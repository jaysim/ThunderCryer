   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"CMessageTask.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZNK5CTask7IsValidEv,"axG",%progbits,_ZNK5CTask7IsValidEv,comdat
  20              		.align	2
  21              		.weak	_ZNK5CTask7IsValidEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZNK5CTask7IsValidEv:
  26              	.LFB132:
  27              		.file 1 "../FreeRTOS_EC/Source/CTask.h"
   1:../FreeRTOS_EC/Source/CTask.h **** /**
   2:../FreeRTOS_EC/Source/CTask.h ****  * @file CTask.h
   3:../FreeRTOS_EC/Source/CTask.h ****  * @class CTask
   4:../FreeRTOS_EC/Source/CTask.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CTask.h ****  *
   6:../FreeRTOS_EC/Source/CTask.h ****  * The CTask class wraps a native FreeRTOS task handle (xTaskHandle). To create a task instance
   7:../FreeRTOS_EC/Source/CTask.h ****  * an object of this class and then call its CTask::Create method like showed in the following samp
   8:../FreeRTOS_EC/Source/CTask.h ****  * \code
   9:../FreeRTOS_EC/Source/CTask.h ****  * CTask g_aTask // global task declaration.
  10:../FreeRTOS_EC/Source/CTask.h ****  *
  11:../FreeRTOS_EC/Source/CTask.h ****  * void main()
  12:../FreeRTOS_EC/Source/CTask.h ****  * {
  13:../FreeRTOS_EC/Source/CTask.h ****  * 	g_aTask.Create(task_control_func, "Led2", configMINIMAL_STACK_SIZE, mainFLASH_TASK_PRIORITY);
  14:../FreeRTOS_EC/Source/CTask.h ****  *
  15:../FreeRTOS_EC/Source/CTask.h ****  * 	CFreeRTOS::StartScheduler();
  16:../FreeRTOS_EC/Source/CTask.h ****  * }
  17:../FreeRTOS_EC/Source/CTask.h ****  * \endcode
  18:../FreeRTOS_EC/Source/CTask.h ****  *
  19:../FreeRTOS_EC/Source/CTask.h ****  * Usually the application subclass this class to create an application specific task object.
  20:../FreeRTOS_EC/Source/CTask.h ****  * See the CHelloWorld class for an example.
  21:../FreeRTOS_EC/Source/CTask.h ****  *
  22:../FreeRTOS_EC/Source/CTask.h ****  * \sa <a href="http://www.freertos.org/taskandcr.html">task documentation</a> in the FreeRTOS web 
  23:../FreeRTOS_EC/Source/CTask.h ****  *
  24:../FreeRTOS_EC/Source/CTask.h ****  * @date Jul 5, 2010
  25:../FreeRTOS_EC/Source/CTask.h ****  * @author Stefano Oliveri (STF12.net)
  26:../FreeRTOS_EC/Source/CTask.h ****  *         E-Mail: software@stf12.net
  27:../FreeRTOS_EC/Source/CTask.h ****  */
  28:../FreeRTOS_EC/Source/CTask.h **** 
  29:../FreeRTOS_EC/Source/CTask.h **** #ifndef CTASK_H_
  30:../FreeRTOS_EC/Source/CTask.h **** #define CTASK_H_
  31:../FreeRTOS_EC/Source/CTask.h **** 
  32:../FreeRTOS_EC/Source/CTask.h **** #include "FreeRTOS.h"
  33:../FreeRTOS_EC/Source/CTask.h **** #include "task.h"
  34:../FreeRTOS_EC/Source/CTask.h **** #include "IFreeRTOSProtocol.h"
  35:../FreeRTOS_EC/Source/CTask.h **** 
  36:../FreeRTOS_EC/Source/CTask.h **** class CTask: public IFreeRTOSObj {
  37:../FreeRTOS_EC/Source/CTask.h **** 
  38:../FreeRTOS_EC/Source/CTask.h **** 	/**
  39:../FreeRTOS_EC/Source/CTask.h **** 	 * Specifies the native FreeRTOS handle managed by an instance of this class.
  40:../FreeRTOS_EC/Source/CTask.h **** 	 */
  41:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle m_handleTask;
  42:../FreeRTOS_EC/Source/CTask.h **** 
  43:../FreeRTOS_EC/Source/CTask.h **** public:
  44:../FreeRTOS_EC/Source/CTask.h **** 	/**
  45:../FreeRTOS_EC/Source/CTask.h **** 	 * The default constructor. It initializes the object without attaching it to a native FreeRTOS ha
  46:../FreeRTOS_EC/Source/CTask.h **** 	 * Call the Create method to allocate a task handle and attach it to the object.
  47:../FreeRTOS_EC/Source/CTask.h **** 	 */
  48:../FreeRTOS_EC/Source/CTask.h **** 	CTask();
  49:../FreeRTOS_EC/Source/CTask.h **** 
  50:../FreeRTOS_EC/Source/CTask.h **** 	/**
  51:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a CTask instance and attach it to a valid handle.
  52:../FreeRTOS_EC/Source/CTask.h **** 	 *
  53:../FreeRTOS_EC/Source/CTask.h **** 	 * @param handleTask a valid task handle.
  54:../FreeRTOS_EC/Source/CTask.h **** 	 */
  55:../FreeRTOS_EC/Source/CTask.h **** 	CTask(xTaskHandle handleTask);
  56:../FreeRTOS_EC/Source/CTask.h **** 
  57:../FreeRTOS_EC/Source/CTask.h **** 	/**
  58:../FreeRTOS_EC/Source/CTask.h **** 	 * Delete the native FreeRTOS task.
  59:../FreeRTOS_EC/Source/CTask.h **** 	 */
  60:../FreeRTOS_EC/Source/CTask.h **** 	virtual ~CTask();
  61:../FreeRTOS_EC/Source/CTask.h **** 
  62:../FreeRTOS_EC/Source/CTask.h **** 	/**
  63:../FreeRTOS_EC/Source/CTask.h **** 	 * Retrieve the native FreeRTOS task handle attached to this object.
  64:../FreeRTOS_EC/Source/CTask.h **** 	 *
  65:../FreeRTOS_EC/Source/CTask.h **** 	 * @return the native FreeRTOS task handle attached to this object.
  66:../FreeRTOS_EC/Source/CTask.h **** 	 */
  67:../FreeRTOS_EC/Source/CTask.h **** 	inline operator xTaskHandle() const { return m_handleTask; }
  68:../FreeRTOS_EC/Source/CTask.h **** 
  69:../FreeRTOS_EC/Source/CTask.h **** 	// FreeRTOS API Wrappers
  70:../FreeRTOS_EC/Source/CTask.h **** 
  71:../FreeRTOS_EC/Source/CTask.h **** 	/**
  72:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a FreeRTOS task and attach its handle to the receiver object.
  73:../FreeRTOS_EC/Source/CTask.h **** 	 *
  74:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00125.html">xTaskCreate</a> FreeRTOS API function.
  75:../FreeRTOS_EC/Source/CTask.h **** 	 */
  76:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usS
  77:../FreeRTOS_EC/Source/CTask.h **** 
  78:../FreeRTOS_EC/Source/CTask.h **** 	/**
  79:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a Memory Protection Unit (MPU) restricted task and attach its handle to the receiver obj
  80:../FreeRTOS_EC/Source/CTask.h **** 	 *
  81:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/xTaskCreateRestricted.html">xTaskCreateRestricted</a> Free
  82:../FreeRTOS_EC/Source/CTask.h **** 	 */
  83:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE CreateRestricted(xTaskParameters *pxTaskDefinition);
  84:../FreeRTOS_EC/Source/CTask.h **** 
  85:../FreeRTOS_EC/Source/CTask.h **** 	/**
  86:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00126.html">vTaskDelete</a>  FreeRTOS API function.
  87:../FreeRTOS_EC/Source/CTask.h **** 	 */
  88:../FreeRTOS_EC/Source/CTask.h **** 	void Delete();
  89:../FreeRTOS_EC/Source/CTask.h **** 
  90:../FreeRTOS_EC/Source/CTask.h **** 	/**
  91:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00127.html">vTaskDelay</a>  FreeRTOS API function.
  92:../FreeRTOS_EC/Source/CTask.h **** 	 */
  93:../FreeRTOS_EC/Source/CTask.h **** 	inline static void Delay(portTickType xTicksToDelay);
  94:../FreeRTOS_EC/Source/CTask.h **** 
  95:../FreeRTOS_EC/Source/CTask.h **** 	/**
  96:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/vtaskdelayuntil.html">vTaskDelayUntil</a>  FreeRTOS API fu
  97:../FreeRTOS_EC/Source/CTask.h **** 	 */
  98:../FreeRTOS_EC/Source/CTask.h ****     inline static void DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement);
  99:../FreeRTOS_EC/Source/CTask.h **** 
 100:../FreeRTOS_EC/Source/CTask.h ****     /**
 101:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskYIELD">taskYIELD</a>  FreeRTOS API func
 102:../FreeRTOS_EC/Source/CTask.h ****      */
 103:../FreeRTOS_EC/Source/CTask.h ****     inline static void Yeld() { taskYIELD(); }
 104:../FreeRTOS_EC/Source/CTask.h **** 
 105:../FreeRTOS_EC/Source/CTask.h ****     /**
 106:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a> 
 107:../FreeRTOS_EC/Source/CTask.h ****      */
 108:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnterCritical() { taskENTER_CRITICAL(); }
 109:../FreeRTOS_EC/Source/CTask.h **** 
 110:../FreeRTOS_EC/Source/CTask.h ****     /**
 111:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  F
 112:../FreeRTOS_EC/Source/CTask.h ****      */
 113:../FreeRTOS_EC/Source/CTask.h ****     inline static void ExitCritical() { taskEXIT_CRITICAL(); }
 114:../FreeRTOS_EC/Source/CTask.h **** 
 115:../FreeRTOS_EC/Source/CTask.h ****     /**
 116:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskDISABLE_INTERRUPTS">taskDISABLE_INTERRU
 117:../FreeRTOS_EC/Source/CTask.h ****      */
 118:../FreeRTOS_EC/Source/CTask.h ****     inline static void DisableInterrupt() { taskDISABLE_INTERRUPTS(); }
 119:../FreeRTOS_EC/Source/CTask.h **** 
 120:../FreeRTOS_EC/Source/CTask.h ****     /**
 121:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENABLE_INTERRUPTS">taskENABLE_INTERRUPT
 122:../FreeRTOS_EC/Source/CTask.h ****      */
 123:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnableInterrupt() { taskENABLE_INTERRUPTS(); }
 124:../FreeRTOS_EC/Source/CTask.h **** 
 125:../FreeRTOS_EC/Source/CTask.h ****     /**
 126:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetCurrentTaskHandle">xTaskGetCurrentT
 127:../FreeRTOS_EC/Source/CTask.h ****      */
 128:../FreeRTOS_EC/Source/CTask.h ****     inline static xTaskHandle GetCurrentTaskHandle();
 129:../FreeRTOS_EC/Source/CTask.h **** 
 130:../FreeRTOS_EC/Source/CTask.h ****     /**
 131:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetTickCount">xTaskGetTickCount</a>  F
 132:../FreeRTOS_EC/Source/CTask.h ****      */
 133:../FreeRTOS_EC/Source/CTask.h ****     inline static portTickType GetTickCount();
 134:../FreeRTOS_EC/Source/CTask.h **** 
 135:../FreeRTOS_EC/Source/CTask.h ****     /**
 136:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetSchedulerState">xTaskGetSchedulerSt
 137:../FreeRTOS_EC/Source/CTask.h ****      */
 138:../FreeRTOS_EC/Source/CTask.h ****     inline static portBASE_TYPE GetSchedulerState();
 139:../FreeRTOS_EC/Source/CTask.h **** 
 140:../FreeRTOS_EC/Source/CTask.h ****     /**
 141:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#usTaskGetNumberOfTasks">uxTaskGetNumberOfTa
 142:../FreeRTOS_EC/Source/CTask.h ****      */
 143:../FreeRTOS_EC/Source/CTask.h ****     inline static unsigned portBASE_TYPE GetNumberOfTasks();
 144:../FreeRTOS_EC/Source/CTask.h **** 
 145:../FreeRTOS_EC/Source/CTask.h ****     /**
 146:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskList">vTaskList</a>  FreeRTOS API func
 147:../FreeRTOS_EC/Source/CTask.h ****      */
 148:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetTaskList(portCHAR *pcWriteBuffer);
 149:../FreeRTOS_EC/Source/CTask.h **** 
 150:../FreeRTOS_EC/Source/CTask.h ****     /**
 151:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskGetRunTimeStats">vTaskGetRunTimeStats<
 152:../FreeRTOS_EC/Source/CTask.h ****      */
 153:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetRunTimeStats(portCHAR *pcWriteBuffer);
 154:../FreeRTOS_EC/Source/CTask.h **** 
 155:../FreeRTOS_EC/Source/CTask.h ****     /**
 156:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00128.html">uxTaskPriorityGet</a>  FreeRTOS API functi
 157:../FreeRTOS_EC/Source/CTask.h ****      */
 158:../FreeRTOS_EC/Source/CTask.h ****     inline unsigned portBASE_TYPE PriorityGet() const;
 159:../FreeRTOS_EC/Source/CTask.h **** 
 160:../FreeRTOS_EC/Source/CTask.h ****     /**
 161:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00129.html">vTaskPrioritySet</a>  FreeRTOS API functio
 162:../FreeRTOS_EC/Source/CTask.h ****      */
 163:../FreeRTOS_EC/Source/CTask.h ****     inline void PrioritySet(unsigned portBASE_TYPE uxNewPriority);
 164:../FreeRTOS_EC/Source/CTask.h **** 
 165:../FreeRTOS_EC/Source/CTask.h ****     /**
 166:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00130.html">vTaskSuspend</a>  FreeRTOS API function.
 167:../FreeRTOS_EC/Source/CTask.h ****      */
 168:../FreeRTOS_EC/Source/CTask.h ****     inline void Suspend();
 169:../FreeRTOS_EC/Source/CTask.h **** 
 170:../FreeRTOS_EC/Source/CTask.h ****     /**
 171:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00131.html">vTaskResume</a>  FreeRTOS API function.
 172:../FreeRTOS_EC/Source/CTask.h ****      */
 173:../FreeRTOS_EC/Source/CTask.h ****     inline void Resume();
 174:../FreeRTOS_EC/Source/CTask.h **** 
 175:../FreeRTOS_EC/Source/CTask.h ****     /**
 176:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/taskresumefromisr.html">xTaskResumeFromISR</a>  FreeRTO
 177:../FreeRTOS_EC/Source/CTask.h ****      */
 178:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE ResumeFromISR();
 179:../FreeRTOS_EC/Source/CTask.h **** 
 180:../FreeRTOS_EC/Source/CTask.h ****     /**
 181:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskSetApplicationTag.html">vTaskSetApplicationTaskTag
 182:../FreeRTOS_EC/Source/CTask.h ****      */
 183:../FreeRTOS_EC/Source/CTask.h ****     inline void SetApplicationTag(pdTASK_HOOK_CODE pxTagValue);
 184:../FreeRTOS_EC/Source/CTask.h **** 
 185:../FreeRTOS_EC/Source/CTask.h ****     /**
 186:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/xTaskCallApplicationTaskHook.html">xTaskCallApplication
 187:../FreeRTOS_EC/Source/CTask.h ****      */
 188:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE CallApplicationTaskHook(void *pvParameter);
 189:../FreeRTOS_EC/Source/CTask.h **** 
 190:../FreeRTOS_EC/Source/CTask.h ****     /**
 191:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskAllocateMPURegions.html">vTaskAllocateMPURegions</
 192:../FreeRTOS_EC/Source/CTask.h ****      */
 193:../FreeRTOS_EC/Source/CTask.h ****     inline void AllocateMPURegions(const xMemoryRegion * const xRegions);
 194:../FreeRTOS_EC/Source/CTask.h **** 
 195:../FreeRTOS_EC/Source/CTask.h ****     // FreeRTOS class extension.
 196:../FreeRTOS_EC/Source/CTask.h **** 	inline bool IsValid() const;
 197:../FreeRTOS_EC/Source/CTask.h **** 	void Attach(xGenericHandle handle);
 198:../FreeRTOS_EC/Source/CTask.h **** 	inline xGenericHandle Detach();
 199:../FreeRTOS_EC/Source/CTask.h **** };
 200:../FreeRTOS_EC/Source/CTask.h **** 
 201:../FreeRTOS_EC/Source/CTask.h **** // inline method
 202:../FreeRTOS_EC/Source/CTask.h **** ////////////////
 203:../FreeRTOS_EC/Source/CTask.h **** 
 204:../FreeRTOS_EC/Source/CTask.h **** inline
 205:../FreeRTOS_EC/Source/CTask.h **** void CTask::Delay(portTickType xTicksToDelay) {
 206:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelay == 1 )
 207:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelay(xTicksToDelay);
 208:../FreeRTOS_EC/Source/CTask.h **** #endif
 209:../FreeRTOS_EC/Source/CTask.h **** }
 210:../FreeRTOS_EC/Source/CTask.h **** 
 211:../FreeRTOS_EC/Source/CTask.h **** inline
 212:../FreeRTOS_EC/Source/CTask.h **** void CTask::DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement) {
 213:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 214:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelayUntil(pxPreviousWakeTime, xTimeIncrement);
 215:../FreeRTOS_EC/Source/CTask.h **** #endif
 216:../FreeRTOS_EC/Source/CTask.h **** }
 217:../FreeRTOS_EC/Source/CTask.h **** 
 218:../FreeRTOS_EC/Source/CTask.h **** inline
 219:../FreeRTOS_EC/Source/CTask.h **** xTaskHandle CTask::GetCurrentTaskHandle() {
 220:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetCurrentTaskHandle();
 221:../FreeRTOS_EC/Source/CTask.h **** }
 222:../FreeRTOS_EC/Source/CTask.h **** 
 223:../FreeRTOS_EC/Source/CTask.h **** inline
 224:../FreeRTOS_EC/Source/CTask.h **** portTickType CTask::GetTickCount() {
 225:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetTickCount();
 226:../FreeRTOS_EC/Source/CTask.h **** }
 227:../FreeRTOS_EC/Source/CTask.h **** 
 228:../FreeRTOS_EC/Source/CTask.h **** inline
 229:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::GetSchedulerState() {
 230:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_xTaskGetSchedulerState == 1 )
 231:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetSchedulerState();
 232:../FreeRTOS_EC/Source/CTask.h **** #else
 233:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 234:../FreeRTOS_EC/Source/CTask.h **** #endif
 235:../FreeRTOS_EC/Source/CTask.h **** }
 236:../FreeRTOS_EC/Source/CTask.h **** 
 237:../FreeRTOS_EC/Source/CTask.h **** inline
 238:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::GetNumberOfTasks() {
 239:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskGetNumberOfTasks();
 240:../FreeRTOS_EC/Source/CTask.h **** }
 241:../FreeRTOS_EC/Source/CTask.h **** 
 242:../FreeRTOS_EC/Source/CTask.h **** inline
 243:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetTaskList(portCHAR *pcWriteBuffer) {
 244:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_TRACE_FACILITY == 1 )
 245:../FreeRTOS_EC/Source/CTask.h **** 	vTaskList((signed portCHAR*)pcWriteBuffer);
 246:../FreeRTOS_EC/Source/CTask.h **** #endif
 247:../FreeRTOS_EC/Source/CTask.h **** }
 248:../FreeRTOS_EC/Source/CTask.h **** 
 249:../FreeRTOS_EC/Source/CTask.h **** inline
 250:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetRunTimeStats(portCHAR *pcWriteBuffer) {
 251:../FreeRTOS_EC/Source/CTask.h **** #if (configGENERATE_RUN_TIME_STATS == 1)
 252:../FreeRTOS_EC/Source/CTask.h **** 	vTaskGetRunTimeStats((signed portCHAR*)pcWriteBuffer);
 253:../FreeRTOS_EC/Source/CTask.h **** #endif
 254:../FreeRTOS_EC/Source/CTask.h **** }
 255:../FreeRTOS_EC/Source/CTask.h **** 
 256:../FreeRTOS_EC/Source/CTask.h **** inline
 257:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::PriorityGet() const {
 258:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 259:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskPriorityGet(m_handleTask);
 260:../FreeRTOS_EC/Source/CTask.h **** #else
 261:../FreeRTOS_EC/Source/CTask.h **** 	return -1;
 262:../FreeRTOS_EC/Source/CTask.h **** #endif
 263:../FreeRTOS_EC/Source/CTask.h **** }
 264:../FreeRTOS_EC/Source/CTask.h **** 
 265:../FreeRTOS_EC/Source/CTask.h **** inline
 266:../FreeRTOS_EC/Source/CTask.h **** void CTask::PrioritySet(unsigned portBASE_TYPE uxNewPriority) {
 267:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 268:../FreeRTOS_EC/Source/CTask.h **** 	vTaskPrioritySet(m_handleTask, uxNewPriority);
 269:../FreeRTOS_EC/Source/CTask.h **** #endif
 270:../FreeRTOS_EC/Source/CTask.h **** }
 271:../FreeRTOS_EC/Source/CTask.h **** 
 272:../FreeRTOS_EC/Source/CTask.h **** inline
 273:../FreeRTOS_EC/Source/CTask.h **** void CTask::Suspend() {
 274:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 275:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSuspend(m_handleTask);
 276:../FreeRTOS_EC/Source/CTask.h **** #endif
 277:../FreeRTOS_EC/Source/CTask.h **** }
 278:../FreeRTOS_EC/Source/CTask.h **** 
 279:../FreeRTOS_EC/Source/CTask.h **** inline
 280:../FreeRTOS_EC/Source/CTask.h **** void CTask::Resume() {
 281:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 282:../FreeRTOS_EC/Source/CTask.h **** 	vTaskResume(m_handleTask);
 283:../FreeRTOS_EC/Source/CTask.h **** #endif
 284:../FreeRTOS_EC/Source/CTask.h **** }
 285:../FreeRTOS_EC/Source/CTask.h **** 
 286:../FreeRTOS_EC/Source/CTask.h **** inline
 287:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::ResumeFromISR() {
 288:../FreeRTOS_EC/Source/CTask.h **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
 289:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskResumeFromISR(m_handleTask);
 290:../FreeRTOS_EC/Source/CTask.h **** #else
 291:../FreeRTOS_EC/Source/CTask.h **** 	return pdFALSE;
 292:../FreeRTOS_EC/Source/CTask.h **** #endif
 293:../FreeRTOS_EC/Source/CTask.h **** }
 294:../FreeRTOS_EC/Source/CTask.h **** 
 295:../FreeRTOS_EC/Source/CTask.h **** inline
 296:../FreeRTOS_EC/Source/CTask.h **** void CTask::SetApplicationTag(pdTASK_HOOK_CODE pxTagValue) {
 297:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 298:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSetApplicationTaskTag(m_handleTask, pxTagValue);
 299:../FreeRTOS_EC/Source/CTask.h **** #endif
 300:../FreeRTOS_EC/Source/CTask.h **** }
 301:../FreeRTOS_EC/Source/CTask.h **** 
 302:../FreeRTOS_EC/Source/CTask.h **** inline
 303:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::CallApplicationTaskHook(void *pvParameter) {
 304:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 305:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskCallApplicationTaskHook(m_handleTask, pvParameter);
 306:../FreeRTOS_EC/Source/CTask.h **** #else
 307:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 308:../FreeRTOS_EC/Source/CTask.h **** #endif
 309:../FreeRTOS_EC/Source/CTask.h **** }
 310:../FreeRTOS_EC/Source/CTask.h **** 
 311:../FreeRTOS_EC/Source/CTask.h **** inline
 312:../FreeRTOS_EC/Source/CTask.h **** void CTask::AllocateMPURegions(const xMemoryRegion * const xRegions) {
 313:../FreeRTOS_EC/Source/CTask.h **** #if ( portUSING_MPU_WRAPPERS == 1 )
 314:../FreeRTOS_EC/Source/CTask.h **** 	vTaskAllocateMPURegions(m_handleTask, xRegions);
 315:../FreeRTOS_EC/Source/CTask.h **** #endif
 316:../FreeRTOS_EC/Source/CTask.h **** }
 317:../FreeRTOS_EC/Source/CTask.h **** 
 318:../FreeRTOS_EC/Source/CTask.h **** inline
 319:../FreeRTOS_EC/Source/CTask.h **** bool CTask::IsValid() const{
  28              		.loc 1 319 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 320:../FreeRTOS_EC/Source/CTask.h **** 	return m_handleTask != NULL;
  44              		.loc 1 320 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 5B68     		ldr	r3, [r3, #4]
  47 000c 002B     		cmp	r3, #0
  48 000e 0CBF     		ite	eq
  49 0010 0023     		moveq	r3, #0
  50 0012 0123     		movne	r3, #1
  51 0014 DBB2     		uxtb	r3, r3
 321:../FreeRTOS_EC/Source/CTask.h **** }
  52              		.loc 1 321 0
  53 0016 1846     		mov	r0, r3
  54 0018 07F10C07 		add	r7, r7, #12
  55 001c BD46     		mov	sp, r7
  56 001e 80BC     		pop	{r7}
  57 0020 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE132:
  61 0022 00BF     		.section	.text._ZN5CTask6DetachEv,"axG",%progbits,_ZN5CTask6DetachEv,comdat
  62              		.align	2
  63              		.weak	_ZN5CTask6DetachEv
  64              		.thumb
  65              		.thumb_func
  67              	_ZN5CTask6DetachEv:
  68              	.LFB133:
 322:../FreeRTOS_EC/Source/CTask.h **** 
 323:../FreeRTOS_EC/Source/CTask.h **** inline
 324:../FreeRTOS_EC/Source/CTask.h **** xGenericHandle CTask::Detach() {
  69              		.loc 1 324 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 16
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74 0000 80B4     		push	{r7}
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 7, -4
  78 0002 85B0     		sub	sp, sp, #20
  79              	.LCFI4:
  80              		.cfi_def_cfa_offset 24
  81 0004 00AF     		add	r7, sp, #0
  82              	.LCFI5:
  83              		.cfi_def_cfa_register 7
  84 0006 7860     		str	r0, [r7, #4]
  85              	.LBB2:
 325:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle res = m_handleTask;
  86              		.loc 1 325 0
  87 0008 7B68     		ldr	r3, [r7, #4]
  88 000a 5B68     		ldr	r3, [r3, #4]
  89 000c FB60     		str	r3, [r7, #12]
 326:../FreeRTOS_EC/Source/CTask.h **** 	m_handleTask = NULL;
  90              		.loc 1 326 0
  91 000e 7B68     		ldr	r3, [r7, #4]
  92 0010 4FF00002 		mov	r2, #0
  93 0014 5A60     		str	r2, [r3, #4]
 327:../FreeRTOS_EC/Source/CTask.h **** 	return res;
  94              		.loc 1 327 0
  95 0016 FB68     		ldr	r3, [r7, #12]
  96              	.LBE2:
 328:../FreeRTOS_EC/Source/CTask.h **** }
  97              		.loc 1 328 0
  98 0018 1846     		mov	r0, r3
  99 001a 07F11407 		add	r7, r7, #20
 100 001e BD46     		mov	sp, r7
 101 0020 80BC     		pop	{r7}
 102 0022 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE133:
 106              		.section	.text._ZN12AManagedTask12HardwareInitEv,"axG",%progbits,_ZN12AManagedTask12HardwareInitEv
 107              		.align	2
 108              		.weak	_ZN12AManagedTask12HardwareInitEv
 109              		.thumb
 110              		.thumb_func
 112              	_ZN12AManagedTask12HardwareInitEv:
 113              	.LFB134:
 114              		.file 2 "../FreeRTOS_EC/Source/AManagedTask.h"
   1:../FreeRTOS_EC/Source/AManagedTask.h **** /**
   2:../FreeRTOS_EC/Source/AManagedTask.h ****  * @file AManagedTask.h
   3:../FreeRTOS_EC/Source/AManagedTask.h ****  * @class AManagedTask
   4:../FreeRTOS_EC/Source/AManagedTask.h ****  *
   5:../FreeRTOS_EC/Source/AManagedTask.h ****  * This class extend the CTask in order to provide a more structured and simple to use framework fo
   6:../FreeRTOS_EC/Source/AManagedTask.h ****  * FreeRTOS programming. All AManagedTask derived objects are grouped in linked list. Please note t
   7:../FreeRTOS_EC/Source/AManagedTask.h ****  * this data structure can be modified in a next release. The framework manage these task objects
   8:../FreeRTOS_EC/Source/AManagedTask.h ****  * by calling their methods during the application life cycle.
   9:../FreeRTOS_EC/Source/AManagedTask.h ****  *
  10:../FreeRTOS_EC/Source/AManagedTask.h ****  * The application extend this abstract class to create a managed task and provide its control loop
  11:../FreeRTOS_EC/Source/AManagedTask.h ****  * \code
  12:../FreeRTOS_EC/Source/AManagedTask.h ****  * class CMyPipe: public AManagedTask
  13:../FreeRTOS_EC/Source/AManagedTask.h ****  * {
  14:../FreeRTOS_EC/Source/AManagedTask.h ****  *   // Task private variables.
  15:../FreeRTOS_EC/Source/AManagedTask.h ****  *
  16:../FreeRTOS_EC/Source/AManagedTask.h ****  * public:
  17:../FreeRTOS_EC/Source/AManagedTask.h ****  *   void Run() {  task control loop  };
  18:../FreeRTOS_EC/Source/AManagedTask.h ****  * }
  19:../FreeRTOS_EC/Source/AManagedTask.h ****  * \endcode
  20:../FreeRTOS_EC/Source/AManagedTask.h ****  *
  21:../FreeRTOS_EC/Source/AManagedTask.h ****  * @date Aug 3, 2010
  22:../FreeRTOS_EC/Source/AManagedTask.h ****  * @author Stefano Oliveri
  23:../FreeRTOS_EC/Source/AManagedTask.h ****  *         E-Mail: software@stf12.net
  24:../FreeRTOS_EC/Source/AManagedTask.h ****  */
  25:../FreeRTOS_EC/Source/AManagedTask.h **** 
  26:../FreeRTOS_EC/Source/AManagedTask.h **** /**
  27:../FreeRTOS_EC/Source/AManagedTask.h ****  * @defgroup FreeRTOS_Managed FreeRTOS Managed Class Extension
  28:../FreeRTOS_EC/Source/AManagedTask.h ****  * @ingroup FreeRTOS_CPP_EXT
  29:../FreeRTOS_EC/Source/AManagedTask.h ****  * The FreeRTOS Managed Class Extension are a set of class that provide a structured and
  30:../FreeRTOS_EC/Source/AManagedTask.h ****  * managed framework to develop a FreeRTOS application.
  31:../FreeRTOS_EC/Source/AManagedTask.h ****  * @{
  32:../FreeRTOS_EC/Source/AManagedTask.h ****  */
  33:../FreeRTOS_EC/Source/AManagedTask.h **** 
  34:../FreeRTOS_EC/Source/AManagedTask.h **** #ifndef AMANAGEDTASK_H_
  35:../FreeRTOS_EC/Source/AManagedTask.h **** #define AMANAGEDTASK_H_
  36:../FreeRTOS_EC/Source/AManagedTask.h **** 
  37:../FreeRTOS_EC/Source/AManagedTask.h **** #include "CTask.h"
  38:../FreeRTOS_EC/Source/AManagedTask.h **** 
  39:../FreeRTOS_EC/Source/AManagedTask.h **** class AManagedTask: public CTask {
  40:../FreeRTOS_EC/Source/AManagedTask.h **** 	friend class CFreeRTOS;
  41:../FreeRTOS_EC/Source/AManagedTask.h **** 
  42:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  43:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Specifies the head of the linked list used to group all application managed task.
  44:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  45:../FreeRTOS_EC/Source/AManagedTask.h **** 	static AManagedTask *s_pManagedTaskListHead;
  46:../FreeRTOS_EC/Source/AManagedTask.h **** 
  47:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  48:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Specifies the next managed task in the list or NULL if this is the last managed task.
  49:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  50:../FreeRTOS_EC/Source/AManagedTask.h **** 	AManagedTask *m_pNextManagedTask;
  51:../FreeRTOS_EC/Source/AManagedTask.h **** 
  52:../FreeRTOS_EC/Source/AManagedTask.h **** public:
  53:../FreeRTOS_EC/Source/AManagedTask.h **** 
  54:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  55:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Default constructor.
  56:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  57:../FreeRTOS_EC/Source/AManagedTask.h **** 	AManagedTask();
  58:../FreeRTOS_EC/Source/AManagedTask.h **** 
  59:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  60:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Destructor.
  61:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  62:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual ~AManagedTask();
  63:../FreeRTOS_EC/Source/AManagedTask.h **** 
  64:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  65:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Create the FreeRTOS task attached to this object.
  66:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  67:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param pcName name of the task. Need only for debug purpose.
  68:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param usStackDepth size in word of the task stack.
  69:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param uxPriority task priority. Valid value ar between taskIDLE_PRIORITY and configMAX_PRIORIT
  70:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  71:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @sa CTask::Create
  72:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  73:../FreeRTOS_EC/Source/AManagedTask.h **** 	portBASE_TYPE Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned port
  74:../FreeRTOS_EC/Source/AManagedTask.h **** 
  75:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  76:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * The framework calls this function before the scheduler start. The default implementation simply
  77:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Override this method to perform task specific hardware initialization that does not use FreeRTO
  78:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  79:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @return true if success, false otherwise.
  80:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  81:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual bool HardwareInit() { return true; }
 115              		.loc 2 81 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0000 80B4     		push	{r7}
 121              	.LCFI6:
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 0002 83B0     		sub	sp, sp, #12
 125              	.LCFI7:
 126              		.cfi_def_cfa_offset 16
 127 0004 00AF     		add	r7, sp, #0
 128              	.LCFI8:
 129              		.cfi_def_cfa_register 7
 130 0006 7860     		str	r0, [r7, #4]
 131              		.loc 2 81 0
 132 0008 4FF00103 		mov	r3, #1
 133 000c 1846     		mov	r0, r3
 134 000e 07F10C07 		add	r7, r7, #12
 135 0012 BD46     		mov	sp, r7
 136 0014 80BC     		pop	{r7}
 137 0016 7047     		bx	lr
 138              		.cfi_endproc
 139              	.LFE134:
 141              		.section	.text._ZN6CQueue4SendEPKvm,"axG",%progbits,_ZN6CQueue4SendEPKvm,comdat
 142              		.align	2
 143              		.weak	_ZN6CQueue4SendEPKvm
 144              		.thumb
 145              		.thumb_func
 147              	_ZN6CQueue4SendEPKvm:
 148              	.LFB137:
 149              		.file 3 "../FreeRTOS_EC/Source/CQueue.h"
   1:../FreeRTOS_EC/Source/CQueue.h **** /**
   2:../FreeRTOS_EC/Source/CQueue.h ****  * @file CQueue.h
   3:../FreeRTOS_EC/Source/CQueue.h ****  * @class CQueue
   4:../FreeRTOS_EC/Source/CQueue.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CQueue.h ****  *
   6:../FreeRTOS_EC/Source/CQueue.h ****  * The CQueue class wraps a native FreeRTOS queue handle (xQueueHandle).
   7:../FreeRTOS_EC/Source/CQueue.h ****  * To create a queue instance an object of this class and then call its CQueue::Create method
   8:../FreeRTOS_EC/Source/CQueue.h ****  * like showed in the following sample:
   9:../FreeRTOS_EC/Source/CQueue.h ****  * \code
  10:../FreeRTOS_EC/Source/CQueue.h ****  * CQueue g_aQueue // global task declaration.
  11:../FreeRTOS_EC/Source/CQueue.h ****  *
  12:../FreeRTOS_EC/Source/CQueue.h ****  * void taskControlFunc(void *pParams)
  13:../FreeRTOS_EC/Source/CQueue.h ****  * {
  14:../FreeRTOS_EC/Source/CQueue.h ****  * 	unsigned char *Message;
  15:../FreeRTOS_EC/Source/CQueue.h ****  * 	g_aQueue.Create(nQueueSize, sizeof(queueItemT));
  16:../FreeRTOS_EC/Source/CQueue.h ****  *
  17:../FreeRTOS_EC/Source/CQueue.h ****  * 	for (;;) {
  18:../FreeRTOS_EC/Source/CQueue.h ****  * 		g_aQueue.Receive(&Message, portMAX_DELAY ) != pdTRUE)
  19:../FreeRTOS_EC/Source/CQueue.h ****  * 		// do something
  20:../FreeRTOS_EC/Source/CQueue.h ****  * }
  21:../FreeRTOS_EC/Source/CQueue.h ****  * \endcode
  22:../FreeRTOS_EC/Source/CQueue.h ****  *
  23:../FreeRTOS_EC/Source/CQueue.h ****  * See the CLcdTask for an example.
  24:../FreeRTOS_EC/Source/CQueue.h ****  *
  25:../FreeRTOS_EC/Source/CQueue.h ****  * \sa <a href="http://www.freertos.org/Inter-Task-Communication.html">queue documentation</a> in t
  26:../FreeRTOS_EC/Source/CQueue.h ****  *
  27:../FreeRTOS_EC/Source/CQueue.h ****  * @date Jul 12, 2010
  28:../FreeRTOS_EC/Source/CQueue.h ****  * @author Stefano Oliveri (STF12.net)
  29:../FreeRTOS_EC/Source/CQueue.h ****  *         E-Mail: software@stf12.net
  30:../FreeRTOS_EC/Source/CQueue.h ****  */
  31:../FreeRTOS_EC/Source/CQueue.h **** 
  32:../FreeRTOS_EC/Source/CQueue.h **** 
  33:../FreeRTOS_EC/Source/CQueue.h **** #ifndef CQUEUE_H_
  34:../FreeRTOS_EC/Source/CQueue.h **** #define CQUEUE_H_
  35:../FreeRTOS_EC/Source/CQueue.h **** 
  36:../FreeRTOS_EC/Source/CQueue.h **** #include <assert.h>
  37:../FreeRTOS_EC/Source/CQueue.h **** 
  38:../FreeRTOS_EC/Source/CQueue.h **** #include "FreeRTOS.h"
  39:../FreeRTOS_EC/Source/CQueue.h **** #include "queue.h"
  40:../FreeRTOS_EC/Source/CQueue.h **** #include "IFreeRTOSProtocol.h"
  41:../FreeRTOS_EC/Source/CQueue.h **** 
  42:../FreeRTOS_EC/Source/CQueue.h **** 
  43:../FreeRTOS_EC/Source/CQueue.h **** class CQueue: public IFreeRTOSObj {
  44:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  45:../FreeRTOS_EC/Source/CQueue.h **** 	 * Specifies the native FreeRTOS handle managed by an instance of this class.
  46:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  47:../FreeRTOS_EC/Source/CQueue.h **** 	xQueueHandle m_handleQueue;
  48:../FreeRTOS_EC/Source/CQueue.h **** 
  49:../FreeRTOS_EC/Source/CQueue.h **** public:
  50:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  51:../FreeRTOS_EC/Source/CQueue.h **** 	 * The default constructor. It initializes the object without attaching it to a native FreeRTOS ha
  52:../FreeRTOS_EC/Source/CQueue.h **** 	 * Call the Create method to allocate a queue handle and attach it to the object.
  53:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  54:../FreeRTOS_EC/Source/CQueue.h **** 	CQueue();
  55:../FreeRTOS_EC/Source/CQueue.h **** 
  56:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  57:../FreeRTOS_EC/Source/CQueue.h **** 	 * Create a CQueue instance and attach it to a valid handle.
  58:../FreeRTOS_EC/Source/CQueue.h **** 	 *
  59:../FreeRTOS_EC/Source/CQueue.h **** 	 * @param handleQueue a valid queue handle.
  60:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  61:../FreeRTOS_EC/Source/CQueue.h **** 	CQueue(xQueueHandle handleQueue);
  62:../FreeRTOS_EC/Source/CQueue.h **** 
  63:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  64:../FreeRTOS_EC/Source/CQueue.h **** 	 * Delete the native FreeRTOS queue.
  65:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  66:../FreeRTOS_EC/Source/CQueue.h **** 	virtual ~CQueue();
  67:../FreeRTOS_EC/Source/CQueue.h **** 
  68:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  69:../FreeRTOS_EC/Source/CQueue.h **** 	 * Retrieve the native FreeRTOS queue handle attached to this object.
  70:../FreeRTOS_EC/Source/CQueue.h **** 	 *
  71:../FreeRTOS_EC/Source/CQueue.h **** 	 * @return the native FreeRTOS queue handle attached to this object.
  72:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  73:../FreeRTOS_EC/Source/CQueue.h **** 	inline operator xQueueHandle() const { return m_handleQueue; }
  74:../FreeRTOS_EC/Source/CQueue.h **** 
  75:../FreeRTOS_EC/Source/CQueue.h **** 	inline bool IsValid() const;
  76:../FreeRTOS_EC/Source/CQueue.h **** 	void Attach(xGenericHandle handle);
  77:../FreeRTOS_EC/Source/CQueue.h **** 	inline xGenericHandle Detach();
  78:../FreeRTOS_EC/Source/CQueue.h **** 
  79:../FreeRTOS_EC/Source/CQueue.h **** 	// FreeRTOS API Wrappers
  80:../FreeRTOS_EC/Source/CQueue.h **** 
  81:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  82:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00116.html">xQueueCreate</a> FreeRTOS API function.
  83:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  84:../FreeRTOS_EC/Source/CQueue.h **** 	CQueue &Create(unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize);
  85:../FreeRTOS_EC/Source/CQueue.h **** 
  86:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  87:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00018.html#vQueueDelete">vQueueDelete</a> FreeRTOS API fu
  88:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  89:../FreeRTOS_EC/Source/CQueue.h **** 	void Delete();
  90:../FreeRTOS_EC/Source/CQueue.h **** 
  91:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  92:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00018.html#ucQueueMessagesWaiting">uxQueueMessagesWaiting
  93:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  94:../FreeRTOS_EC/Source/CQueue.h **** 	inline unsigned portBASE_TYPE MessagesWaiting();
  95:../FreeRTOS_EC/Source/CQueue.h **** 
  96:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  97:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00117.html">xQueueSend</a> FreeRTOS API function.
  98:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  99:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE Send(const void * pvItemToQueue, portTickType xTicksToWait);
 100:../FreeRTOS_EC/Source/CQueue.h **** 
 101:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 102:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueueSendToBack.html">SendToBack</a> FreeRTOS API functio
 103:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 104:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendToBack(const void * pvItemToQueue, portTickType xTicksToWait);
 105:../FreeRTOS_EC/Source/CQueue.h **** 
 106:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 107:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueueSendToFront.html">xQueueSendToFront</a> FreeRTOS API
 108:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 109:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendToFront(const void * pvItemToQueue, portTickType xTicksToWait);
 110:../FreeRTOS_EC/Source/CQueue.h **** 
 111:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 112:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00118.html">xQueueReceive</a> FreeRTOS API function.
 113:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 114:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE Receive(void *pvBuffer, portTickType xTicksToWait);
 115:../FreeRTOS_EC/Source/CQueue.h **** 
 116:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 117:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueuePeek.html">xQueuePeek</a> FreeRTOS API function.
 118:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 119:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE Peek(void *pvBuffer, portTickType xTicksToWait);
 120:../FreeRTOS_EC/Source/CQueue.h **** 
 121:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 122:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00119.html">xQueueSendFromISR</a> FreeRTOS API function.
 123:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 124:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorityTaskWo
 125:../FreeRTOS_EC/Source/CQueue.h **** 
 126:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 127:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueueSendToBackFromISR.html">xQueueSendToBackFromISR</a> 
 128:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 129:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendToBackFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriority
 130:../FreeRTOS_EC/Source/CQueue.h **** 
 131:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 132:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueueSendToFrontFromISR.html">xQueueSendToFrontFromISR</a
 133:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 134:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendToFrontFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorit
 135:../FreeRTOS_EC/Source/CQueue.h **** 
 136:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 137:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00120.html">xQueueReceiveFromISR</a> FreeRTOS API functio
 138:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 139:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE ReceiveFromISR(void *pvBuffer, portBASE_TYPE *pxTaskWoken);
 140:../FreeRTOS_EC/Source/CQueue.h **** 
 141:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 142:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/vQueueAddToRegistry.html">vQueueAddToRegistry</a> FreeRTOS
 143:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 144:../FreeRTOS_EC/Source/CQueue.h **** 	inline void AddToRegistry(signed portCHAR *pcQueueName);
 145:../FreeRTOS_EC/Source/CQueue.h **** 
 146:../FreeRTOS_EC/Source/CQueue.h **** };
 147:../FreeRTOS_EC/Source/CQueue.h **** 
 148:../FreeRTOS_EC/Source/CQueue.h **** // inline method implementation
 149:../FreeRTOS_EC/Source/CQueue.h **** 
 150:../FreeRTOS_EC/Source/CQueue.h **** inline
 151:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::Send(const void * pvItemToQueue, portTickType xTicksToWait) {
 150              		.loc 3 151 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 16
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154 0000 80B5     		push	{r7, lr}
 155              	.LCFI9:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 14, -4
 158              		.cfi_offset 7, -8
 159 0002 84B0     		sub	sp, sp, #16
 160              	.LCFI10:
 161              		.cfi_def_cfa_offset 24
 162 0004 00AF     		add	r7, sp, #0
 163              	.LCFI11:
 164              		.cfi_def_cfa_register 7
 165 0006 F860     		str	r0, [r7, #12]
 166 0008 B960     		str	r1, [r7, #8]
 167 000a 7A60     		str	r2, [r7, #4]
 152:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSend(m_handleQueue, pvItemToQueue, xTicksToWait);
 168              		.loc 3 152 0
 169 000c FB68     		ldr	r3, [r7, #12]
 170 000e 5B68     		ldr	r3, [r3, #4]
 171 0010 1846     		mov	r0, r3
 172 0012 B968     		ldr	r1, [r7, #8]
 173 0014 7A68     		ldr	r2, [r7, #4]
 174 0016 4FF00003 		mov	r3, #0
 175 001a FFF7FEFF 		bl	xQueueGenericSend
 176 001e 0346     		mov	r3, r0
 153:../FreeRTOS_EC/Source/CQueue.h **** }
 177              		.loc 3 153 0
 178 0020 1846     		mov	r0, r3
 179 0022 07F11007 		add	r7, r7, #16
 180 0026 BD46     		mov	sp, r7
 181 0028 80BD     		pop	{r7, pc}
 182              		.cfi_endproc
 183              	.LFE137:
 185 002a 00BF     		.section	.text._ZN6CQueue11SendFromISREPKvPl,"axG",%progbits,_ZN6CQueue11SendFromISREPKvPl,comdat
 186              		.align	2
 187              		.weak	_ZN6CQueue11SendFromISREPKvPl
 188              		.thumb
 189              		.thumb_func
 191              	_ZN6CQueue11SendFromISREPKvPl:
 192              	.LFB138:
 154:../FreeRTOS_EC/Source/CQueue.h **** 
 155:../FreeRTOS_EC/Source/CQueue.h **** inline
 156:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorityTaskWo
 193              		.loc 3 156 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 16
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197 0000 80B5     		push	{r7, lr}
 198              	.LCFI12:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 14, -4
 201              		.cfi_offset 7, -8
 202 0002 84B0     		sub	sp, sp, #16
 203              	.LCFI13:
 204              		.cfi_def_cfa_offset 24
 205 0004 00AF     		add	r7, sp, #0
 206              	.LCFI14:
 207              		.cfi_def_cfa_register 7
 208 0006 F860     		str	r0, [r7, #12]
 209 0008 B960     		str	r1, [r7, #8]
 210 000a 7A60     		str	r2, [r7, #4]
 157:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendFromISR(m_handleQueue, pvItemToQueue, pxHigherPriorityTaskWoken);
 211              		.loc 3 157 0
 212 000c FB68     		ldr	r3, [r7, #12]
 213 000e 5B68     		ldr	r3, [r3, #4]
 214 0010 1846     		mov	r0, r3
 215 0012 B968     		ldr	r1, [r7, #8]
 216 0014 7A68     		ldr	r2, [r7, #4]
 217 0016 4FF00003 		mov	r3, #0
 218 001a FFF7FEFF 		bl	xQueueGenericSendFromISR
 219 001e 0346     		mov	r3, r0
 158:../FreeRTOS_EC/Source/CQueue.h **** }
 220              		.loc 3 158 0
 221 0020 1846     		mov	r0, r3
 222 0022 07F11007 		add	r7, r7, #16
 223 0026 BD46     		mov	sp, r7
 224 0028 80BD     		pop	{r7, pc}
 225              		.cfi_endproc
 226              	.LFE138:
 228 002a 00BF     		.section	.rodata
 229              		.align	2
 230              	.LC0:
 231 0000 2E2E2F46 		.ascii	"../FreeRTOS_EC/Source/CQueue.h\000"
 231      72656552 
 231      544F535F 
 231      45432F53 
 231      6F757263 
 232 001f 00       		.align	2
 233              	.LC1:
 234 0020 49735661 		.ascii	"IsValid()\000"
 234      6C696428 
 234      2900
 235 002a 0000     		.section	.text._ZN6CQueue11SendToFrontEPKvm,"axG",%progbits,_ZN6CQueue11SendToFrontEPKvm,comdat
 236              		.align	2
 237              		.weak	_ZN6CQueue11SendToFrontEPKvm
 238              		.thumb
 239              		.thumb_func
 241              	_ZN6CQueue11SendToFrontEPKvm:
 242              	.LFB141:
 159:../FreeRTOS_EC/Source/CQueue.h **** 
 160:../FreeRTOS_EC/Source/CQueue.h **** inline
 161:../FreeRTOS_EC/Source/CQueue.h **** unsigned portBASE_TYPE CQueue::MessagesWaiting() {
 162:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 163:../FreeRTOS_EC/Source/CQueue.h **** 
 164:../FreeRTOS_EC/Source/CQueue.h **** 	return uxQueueMessagesWaiting(m_handleQueue);
 165:../FreeRTOS_EC/Source/CQueue.h **** }
 166:../FreeRTOS_EC/Source/CQueue.h **** 
 167:../FreeRTOS_EC/Source/CQueue.h **** inline
 168:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendToBack(const void * pvItemToQueue, portTickType xTicksToWait) {
 169:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 170:../FreeRTOS_EC/Source/CQueue.h **** 
 171:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendToBack(m_handleQueue, pvItemToQueue, xTicksToWait);
 172:../FreeRTOS_EC/Source/CQueue.h **** }
 173:../FreeRTOS_EC/Source/CQueue.h **** 
 174:../FreeRTOS_EC/Source/CQueue.h **** inline
 175:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendToFront(const void * pvItemToQueue, portTickType xTicksToWait) {
 243              		.loc 3 175 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 16
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247 0000 80B5     		push	{r7, lr}
 248              	.LCFI15:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 14, -4
 251              		.cfi_offset 7, -8
 252 0002 84B0     		sub	sp, sp, #16
 253              	.LCFI16:
 254              		.cfi_def_cfa_offset 24
 255 0004 00AF     		add	r7, sp, #0
 256              	.LCFI17:
 257              		.cfi_def_cfa_register 7
 258 0006 F860     		str	r0, [r7, #12]
 259 0008 B960     		str	r1, [r7, #8]
 260 000a 7A60     		str	r2, [r7, #4]
 261              	.LBB3:
 176:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 262              		.loc 3 176 0
 263 000c FB68     		ldr	r3, [r7, #12]
 264 000e 1B68     		ldr	r3, [r3, #0]
 265 0010 1B68     		ldr	r3, [r3, #0]
 266 0012 F868     		ldr	r0, [r7, #12]
 267 0014 9847     		blx	r3
 268 0016 0346     		mov	r3, r0
 269 0018 002B     		cmp	r3, #0
 270 001a 0FD1     		bne	.L7
 271              		.loc 3 176 0 is_stmt 0 discriminator 1
 272 001c 40F20000 		movw	r0, #:lower16:.LC0
 273 0020 C0F20000 		movt	r0, #:upper16:.LC0
 274 0024 4FF0B001 		mov	r1, #176
 275 0028 40F20002 		movw	r2, #:lower16:_ZZN6CQueue11SendToFrontEPKvmE19__PRETTY_FUNCTION__
 276 002c C0F20002 		movt	r2, #:upper16:_ZZN6CQueue11SendToFrontEPKvmE19__PRETTY_FUNCTION__
 277 0030 40F20003 		movw	r3, #:lower16:.LC1
 278 0034 C0F20003 		movt	r3, #:upper16:.LC1
 279 0038 FFF7FEFF 		bl	__assert_func
 280              	.L7:
 177:../FreeRTOS_EC/Source/CQueue.h **** 
 178:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendToFront(m_handleQueue, pvItemToQueue, xTicksToWait);
 281              		.loc 3 178 0 is_stmt 1
 282 003c FB68     		ldr	r3, [r7, #12]
 283 003e 5B68     		ldr	r3, [r3, #4]
 284 0040 1846     		mov	r0, r3
 285 0042 B968     		ldr	r1, [r7, #8]
 286 0044 7A68     		ldr	r2, [r7, #4]
 287 0046 4FF00103 		mov	r3, #1
 288 004a FFF7FEFF 		bl	xQueueGenericSend
 289 004e 0346     		mov	r3, r0
 290              	.LBE3:
 179:../FreeRTOS_EC/Source/CQueue.h **** }
 291              		.loc 3 179 0
 292 0050 1846     		mov	r0, r3
 293 0052 07F11007 		add	r7, r7, #16
 294 0056 BD46     		mov	sp, r7
 295 0058 80BD     		pop	{r7, pc}
 296              		.cfi_endproc
 297              	.LFE141:
 299 005a 00BF     		.section	.text._ZN6CQueue7ReceiveEPvm,"axG",%progbits,_ZN6CQueue7ReceiveEPvm,comdat
 300              		.align	2
 301              		.weak	_ZN6CQueue7ReceiveEPvm
 302              		.thumb
 303              		.thumb_func
 305              	_ZN6CQueue7ReceiveEPvm:
 306              	.LFB142:
 180:../FreeRTOS_EC/Source/CQueue.h **** 
 181:../FreeRTOS_EC/Source/CQueue.h **** inline
 182:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::Receive(void *pvBuffer, portTickType xTicksToWait) {
 307              		.loc 3 182 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 16
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311 0000 80B5     		push	{r7, lr}
 312              	.LCFI18:
 313              		.cfi_def_cfa_offset 8
 314              		.cfi_offset 14, -4
 315              		.cfi_offset 7, -8
 316 0002 84B0     		sub	sp, sp, #16
 317              	.LCFI19:
 318              		.cfi_def_cfa_offset 24
 319 0004 00AF     		add	r7, sp, #0
 320              	.LCFI20:
 321              		.cfi_def_cfa_register 7
 322 0006 F860     		str	r0, [r7, #12]
 323 0008 B960     		str	r1, [r7, #8]
 324 000a 7A60     		str	r2, [r7, #4]
 325              	.LBB4:
 183:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 326              		.loc 3 183 0
 327 000c FB68     		ldr	r3, [r7, #12]
 328 000e 1B68     		ldr	r3, [r3, #0]
 329 0010 1B68     		ldr	r3, [r3, #0]
 330 0012 F868     		ldr	r0, [r7, #12]
 331 0014 9847     		blx	r3
 332 0016 0346     		mov	r3, r0
 333 0018 002B     		cmp	r3, #0
 334 001a 0FD1     		bne	.L9
 335              		.loc 3 183 0 is_stmt 0 discriminator 1
 336 001c 40F20000 		movw	r0, #:lower16:.LC0
 337 0020 C0F20000 		movt	r0, #:upper16:.LC0
 338 0024 4FF0B701 		mov	r1, #183
 339 0028 40F20002 		movw	r2, #:lower16:_ZZN6CQueue7ReceiveEPvmE19__PRETTY_FUNCTION__
 340 002c C0F20002 		movt	r2, #:upper16:_ZZN6CQueue7ReceiveEPvmE19__PRETTY_FUNCTION__
 341 0030 40F20003 		movw	r3, #:lower16:.LC1
 342 0034 C0F20003 		movt	r3, #:upper16:.LC1
 343 0038 FFF7FEFF 		bl	__assert_func
 344              	.L9:
 184:../FreeRTOS_EC/Source/CQueue.h **** 
 185:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueReceive(m_handleQueue, pvBuffer, xTicksToWait);
 345              		.loc 3 185 0 is_stmt 1
 346 003c FB68     		ldr	r3, [r7, #12]
 347 003e 5B68     		ldr	r3, [r3, #4]
 348 0040 1846     		mov	r0, r3
 349 0042 B968     		ldr	r1, [r7, #8]
 350 0044 7A68     		ldr	r2, [r7, #4]
 351 0046 4FF00003 		mov	r3, #0
 352 004a FFF7FEFF 		bl	xQueueGenericReceive
 353 004e 0346     		mov	r3, r0
 354              	.LBE4:
 186:../FreeRTOS_EC/Source/CQueue.h **** }
 355              		.loc 3 186 0
 356 0050 1846     		mov	r0, r3
 357 0052 07F11007 		add	r7, r7, #16
 358 0056 BD46     		mov	sp, r7
 359 0058 80BD     		pop	{r7, pc}
 360              		.cfi_endproc
 361              	.LFE142:
 363 005a 00BF     		.section	.text._ZN6CQueue18SendToFrontFromISREPKvPl,"axG",%progbits,_ZN6CQueue18SendToFrontFromISR
 364              		.align	2
 365              		.weak	_ZN6CQueue18SendToFrontFromISREPKvPl
 366              		.thumb
 367              		.thumb_func
 369              	_ZN6CQueue18SendToFrontFromISREPKvPl:
 370              	.LFB145:
 187:../FreeRTOS_EC/Source/CQueue.h **** 
 188:../FreeRTOS_EC/Source/CQueue.h **** inline
 189:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::Peek(void *pvBuffer, portTickType xTicksToWait) {
 190:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 191:../FreeRTOS_EC/Source/CQueue.h **** 
 192:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueuePeek(m_handleQueue, pvBuffer, xTicksToWait);
 193:../FreeRTOS_EC/Source/CQueue.h **** }
 194:../FreeRTOS_EC/Source/CQueue.h **** 
 195:../FreeRTOS_EC/Source/CQueue.h **** inline
 196:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendToBackFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriority
 197:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 198:../FreeRTOS_EC/Source/CQueue.h **** 
 199:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendToBackFromISR(m_handleQueue, pvItemToQueue, pxHigherPriorityTaskWoken);
 200:../FreeRTOS_EC/Source/CQueue.h **** }
 201:../FreeRTOS_EC/Source/CQueue.h **** 
 202:../FreeRTOS_EC/Source/CQueue.h **** inline
 203:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendToFrontFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorit
 371              		.loc 3 203 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 16
 374              		@ frame_needed = 1, uses_anonymous_args = 0
 375 0000 80B5     		push	{r7, lr}
 376              	.LCFI21:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 14, -4
 379              		.cfi_offset 7, -8
 380 0002 84B0     		sub	sp, sp, #16
 381              	.LCFI22:
 382              		.cfi_def_cfa_offset 24
 383 0004 00AF     		add	r7, sp, #0
 384              	.LCFI23:
 385              		.cfi_def_cfa_register 7
 386 0006 F860     		str	r0, [r7, #12]
 387 0008 B960     		str	r1, [r7, #8]
 388 000a 7A60     		str	r2, [r7, #4]
 389              	.LBB5:
 204:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 390              		.loc 3 204 0
 391 000c FB68     		ldr	r3, [r7, #12]
 392 000e 1B68     		ldr	r3, [r3, #0]
 393 0010 1B68     		ldr	r3, [r3, #0]
 394 0012 F868     		ldr	r0, [r7, #12]
 395 0014 9847     		blx	r3
 396 0016 0346     		mov	r3, r0
 397 0018 002B     		cmp	r3, #0
 398 001a 0FD1     		bne	.L11
 399              		.loc 3 204 0 is_stmt 0 discriminator 1
 400 001c 40F20000 		movw	r0, #:lower16:.LC0
 401 0020 C0F20000 		movt	r0, #:upper16:.LC0
 402 0024 4FF0CC01 		mov	r1, #204
 403 0028 40F20002 		movw	r2, #:lower16:_ZZN6CQueue18SendToFrontFromISREPKvPlE19__PRETTY_FUNCTION__
 404 002c C0F20002 		movt	r2, #:upper16:_ZZN6CQueue18SendToFrontFromISREPKvPlE19__PRETTY_FUNCTION__
 405 0030 40F20003 		movw	r3, #:lower16:.LC1
 406 0034 C0F20003 		movt	r3, #:upper16:.LC1
 407 0038 FFF7FEFF 		bl	__assert_func
 408              	.L11:
 205:../FreeRTOS_EC/Source/CQueue.h **** 
 206:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendToFrontFromISR(m_handleQueue, pvItemToQueue, pxHigherPriorityTaskWoken);
 409              		.loc 3 206 0 is_stmt 1
 410 003c FB68     		ldr	r3, [r7, #12]
 411 003e 5B68     		ldr	r3, [r3, #4]
 412 0040 1846     		mov	r0, r3
 413 0042 B968     		ldr	r1, [r7, #8]
 414 0044 7A68     		ldr	r2, [r7, #4]
 415 0046 4FF00103 		mov	r3, #1
 416 004a FFF7FEFF 		bl	xQueueGenericSendFromISR
 417 004e 0346     		mov	r3, r0
 418              	.LBE5:
 207:../FreeRTOS_EC/Source/CQueue.h **** }
 419              		.loc 3 207 0
 420 0050 1846     		mov	r0, r3
 421 0052 07F11007 		add	r7, r7, #16
 422 0056 BD46     		mov	sp, r7
 423 0058 80BD     		pop	{r7, pc}
 424              		.cfi_endproc
 425              	.LFE145:
 427 005a 00BF     		.section	.text._ZN12CMessageTask6OnInitEv,"axG",%progbits,_ZN12CMessageTask6OnInitEv,comdat
 428              		.align	2
 429              		.weak	_ZN12CMessageTask6OnInitEv
 430              		.thumb
 431              		.thumb_func
 433              	_ZN12CMessageTask6OnInitEv:
 434              	.LFB150:
 435              		.file 4 "../FreeRTOS_EC/Source/CMessageTask.h"
   1:../FreeRTOS_EC/Source/CMessageTask.h **** /**
   2:../FreeRTOS_EC/Source/CMessageTask.h ****  * @file CMessageTask.h
   3:../FreeRTOS_EC/Source/CMessageTask.h ****  * @class CMessageTask
   4:../FreeRTOS_EC/Source/CMessageTask.h ****  * @ingroup FreeRTOS_Managed
   5:../FreeRTOS_EC/Source/CMessageTask.h ****  *
   6:../FreeRTOS_EC/Source/CMessageTask.h ****  * This class implements the Queued Message Handler (QMH) design pattern.
   7:../FreeRTOS_EC/Source/CMessageTask.h ****  * \image html QMH.png "Queued Message Handler"
   8:../FreeRTOS_EC/Source/CMessageTask.h ****  * The purpose of the QMH pattern is to allow asynchronous communication between tasks through
   9:../FreeRTOS_EC/Source/CMessageTask.h ****  * a message passing paradigm.
  10:../FreeRTOS_EC/Source/CMessageTask.h ****  * A message is defined by:
  11:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	- a message identifier (id) that should be unique.
  12:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	- a message handler method.
  13:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  14:../FreeRTOS_EC/Source/CMessageTask.h ****  * The prototype of a message handler is: \code void className::MessageHandler(unsigned long wParam
  15:../FreeRTOS_EC/Source/CMessageTask.h ****  * A derived class should not implement a task control loop (by overriding the AManagedTask::Run me
  16:../FreeRTOS_EC/Source/CMessageTask.h ****  * that is provided by the CMessageTask class. This procedure implements the message dispatch routi
  17:../FreeRTOS_EC/Source/CMessageTask.h ****  * When a message is received the message loop searches the derived class's message map for an entr
  18:../FreeRTOS_EC/Source/CMessageTask.h ****  * id of the received message. If such an entry is found the associated message handler is performe
  19:../FreeRTOS_EC/Source/CMessageTask.h ****  * message loop start processing the next message. Otherwise the message loop walk through the mess
  20:../FreeRTOS_EC/Source/CMessageTask.h ****  * base class. If no entry able to handle the message is found, it is discarded.
  21:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  22:../FreeRTOS_EC/Source/CMessageTask.h ****  * One delegate object, implementing the IMessageTaskDelegate interface, could be associated to a C
  23:../FreeRTOS_EC/Source/CMessageTask.h ****  * using the method CMessageTask::SetDelegate. A delegate receive a notification from the task befo
  24:../FreeRTOS_EC/Source/CMessageTask.h ****  * message is dispatched.
  25:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  26:../FreeRTOS_EC/Source/CMessageTask.h ****  * The MessageMacro.h file export a set of macro in order to declare and define the message map in 
  27:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  28:../FreeRTOS_EC/Source/CMessageTask.h ****  * <b>Use Cases</b>
  29:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	- Gate keeper
  30:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	- Command Handler Task.
  31:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  32:../FreeRTOS_EC/Source/CMessageTask.h ****  * <b>Example</b>
  33:../FreeRTOS_EC/Source/CMessageTask.h ****  * \code
  34:../FreeRTOS_EC/Source/CMessageTask.h ****  * //In the header file
  35:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  36:../FreeRTOS_EC/Source/CMessageTask.h ****  * #define MSG_1 APP_MSG + 1
  37:../FreeRTOS_EC/Source/CMessageTask.h ****  * #define MSG_2 APP_MSG + 2
  38:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  39:../FreeRTOS_EC/Source/CMessageTask.h ****  * class MyClass: public CMessageTask
  40:../FreeRTOS_EC/Source/CMessageTask.h ****  * {
  41:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	DECLARE_MESSAGE_MAP(CMessageTestTask)
  42:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  43:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	public:
  44:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	CMessageTestTask();
  45:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	virtual ~CMessageTestTask();
  46:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  47:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	void Message1Handler(unsigned long wParam);
  48:../FreeRTOS_EC/Source/CMessageTask.h ****  * 	void Message2Handler(unsigned long wParam);
  49:../FreeRTOS_EC/Source/CMessageTask.h ****  * };
  50:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  51:../FreeRTOS_EC/Source/CMessageTask.h ****  * // In the implementation file
  52:../FreeRTOS_EC/Source/CMessageTask.h ****  * BEGIN_MESSAGE_MAP(CMessageTask, MyClass)
  53:../FreeRTOS_EC/Source/CMessageTask.h ****  *   MESSAGE_MAP_ENTRY(MyClass, MSG_1, Message1Handler)
  54:../FreeRTOS_EC/Source/CMessageTask.h ****  *   MESSAGE_MAP_ENTRY(MyClass, MSG_2, Message2Handler)
  55:../FreeRTOS_EC/Source/CMessageTask.h ****  * END_MESSAGE_MAP(CMessageTestTask)
  56:../FreeRTOS_EC/Source/CMessageTask.h ****  * \endcode
  57:../FreeRTOS_EC/Source/CMessageTask.h ****  *
  58:../FreeRTOS_EC/Source/CMessageTask.h ****  * @date   Feb 28, 2011
  59:../FreeRTOS_EC/Source/CMessageTask.h ****  * @author Stefano Oliveri (STF12.net)
  60:../FreeRTOS_EC/Source/CMessageTask.h ****  *         E-mail: software@stf12.net
  61:../FreeRTOS_EC/Source/CMessageTask.h ****  */
  62:../FreeRTOS_EC/Source/CMessageTask.h **** 
  63:../FreeRTOS_EC/Source/CMessageTask.h **** #ifndef CMESSAGETASK_H_
  64:../FreeRTOS_EC/Source/CMessageTask.h **** #define CMESSAGETASK_H_
  65:../FreeRTOS_EC/Source/CMessageTask.h **** 
  66:../FreeRTOS_EC/Source/CMessageTask.h **** #include "AManagedTask.h"
  67:../FreeRTOS_EC/Source/CMessageTask.h **** #include "MessageMacro.h"
  68:../FreeRTOS_EC/Source/CMessageTask.h **** #include "Message.h"
  69:../FreeRTOS_EC/Source/CMessageTask.h **** #include "IMessageTaskDelegate.h"
  70:../FreeRTOS_EC/Source/CMessageTask.h **** #include "CQueue.h"
  71:../FreeRTOS_EC/Source/CMessageTask.h **** 
  72:../FreeRTOS_EC/Source/CMessageTask.h **** 
  73:../FreeRTOS_EC/Source/CMessageTask.h **** class CMessageTask: public AManagedTask {
  74:../FreeRTOS_EC/Source/CMessageTask.h **** public:
  75:../FreeRTOS_EC/Source/CMessageTask.h **** 
  76:../FreeRTOS_EC/Source/CMessageTask.h **** 	enum {
  77:../FreeRTOS_EC/Source/CMessageTask.h **** 		MESSAGE_QUEUE_SIZE = 5,
  78:../FreeRTOS_EC/Source/CMessageTask.h **** 	};
  79:../FreeRTOS_EC/Source/CMessageTask.h **** 
  80:../FreeRTOS_EC/Source/CMessageTask.h **** private:
  81:../FreeRTOS_EC/Source/CMessageTask.h **** 
  82:../FreeRTOS_EC/Source/CMessageTask.h **** 	DECLARE_MESSAGE_MAP(CMessageTask);
  83:../FreeRTOS_EC/Source/CMessageTask.h **** 
  84:../FreeRTOS_EC/Source/CMessageTask.h **** 	/**
  85:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * Specify maximum amount of time the task should block waiting for an incoming message.
  86:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * The default value is portMAX_DELAY and the task blocks indefinitely.
  87:../FreeRTOS_EC/Source/CMessageTask.h **** 	 */
  88:../FreeRTOS_EC/Source/CMessageTask.h **** 	portTickType m_nTimeOut;
  89:../FreeRTOS_EC/Source/CMessageTask.h **** 
  90:../FreeRTOS_EC/Source/CMessageTask.h **** 	/**
  91:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * Specifies the synchronization queue used to serialize the access at the LCD.
  92:../FreeRTOS_EC/Source/CMessageTask.h **** 	 */
  93:../FreeRTOS_EC/Source/CMessageTask.h **** 	CQueue m_queue;
  94:../FreeRTOS_EC/Source/CMessageTask.h **** 
  95:../FreeRTOS_EC/Source/CMessageTask.h **** 	/**
  96:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * Specifies the task delegate object. It is the object that receive the notification
  97:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * message from the task.
  98:../FreeRTOS_EC/Source/CMessageTask.h **** 	 */
  99:../FreeRTOS_EC/Source/CMessageTask.h **** 	IMessageTaskDelegate *m_pDelegate;
 100:../FreeRTOS_EC/Source/CMessageTask.h **** 
 101:../FreeRTOS_EC/Source/CMessageTask.h **** public:
 102:../FreeRTOS_EC/Source/CMessageTask.h **** 
 103:../FreeRTOS_EC/Source/CMessageTask.h **** 	CMessageTask();
 104:../FreeRTOS_EC/Source/CMessageTask.h **** 	virtual ~CMessageTask();
 105:../FreeRTOS_EC/Source/CMessageTask.h **** 
 106:../FreeRTOS_EC/Source/CMessageTask.h **** 
 107:../FreeRTOS_EC/Source/CMessageTask.h **** 	/**
 108:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * A subclass overriding this methods should call the base implementation.
 109:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * \sa AManagedTask::OnCreate
 110:../FreeRTOS_EC/Source/CMessageTask.h **** 	 *
 111:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * @param pcName specifies the name assigned to the task for debug purpose.
 112:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * @param usStackDepth specifies the task stack size in words.
 113:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * @param uxPriority specifies the task priority.
 114:../FreeRTOS_EC/Source/CMessageTask.h **** 	 *
 115:../FreeRTOS_EC/Source/CMessageTask.h **** 	 */
 116:../FreeRTOS_EC/Source/CMessageTask.h **** 	portBASE_TYPE OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned po
 117:../FreeRTOS_EC/Source/CMessageTask.h **** 
 118:../FreeRTOS_EC/Source/CMessageTask.h **** 	/**
 119:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * Task control function. It implements the message loop.
 120:../FreeRTOS_EC/Source/CMessageTask.h **** 	 */
 121:../FreeRTOS_EC/Source/CMessageTask.h **** 	void Run();
 122:../FreeRTOS_EC/Source/CMessageTask.h **** 
 123:../FreeRTOS_EC/Source/CMessageTask.h **** 	/**
 124:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * Called by the framework after the scheduler is started, but before the task
 125:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * enter its message loop. Use this method to perform one shot task initialization.
 126:../FreeRTOS_EC/Source/CMessageTask.h **** 	 *
 127:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * @return <code>true</code> if success, <code>false</code> otherwise.
 128:../FreeRTOS_EC/Source/CMessageTask.h **** 	 */
 129:../FreeRTOS_EC/Source/CMessageTask.h **** 	virtual bool OnInit() { return true; }
 436              		.loc 4 129 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 8
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 441 0000 80B4     		push	{r7}
 442              	.LCFI24:
 443              		.cfi_def_cfa_offset 4
 444              		.cfi_offset 7, -4
 445 0002 83B0     		sub	sp, sp, #12
 446              	.LCFI25:
 447              		.cfi_def_cfa_offset 16
 448 0004 00AF     		add	r7, sp, #0
 449              	.LCFI26:
 450              		.cfi_def_cfa_register 7
 451 0006 7860     		str	r0, [r7, #4]
 452              		.loc 4 129 0
 453 0008 4FF00103 		mov	r3, #1
 454 000c 1846     		mov	r0, r3
 455 000e 07F10C07 		add	r7, r7, #12
 456 0012 BD46     		mov	sp, r7
 457 0014 80BC     		pop	{r7}
 458 0016 7047     		bx	lr
 459              		.cfi_endproc
 460              	.LFE150:
 462              		.section	.text._ZN12CMessageTask9OnTimeOutEv,"axG",%progbits,_ZN12CMessageTask9OnTimeOutEv,comdat
 463              		.align	2
 464              		.weak	_ZN12CMessageTask9OnTimeOutEv
 465              		.thumb
 466              		.thumb_func
 468              	_ZN12CMessageTask9OnTimeOutEv:
 469              	.LFB151:
 130:../FreeRTOS_EC/Source/CMessageTask.h **** 
 131:../FreeRTOS_EC/Source/CMessageTask.h **** 	/**
 132:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * Called by the framework during the message loop when the timeout expire and no message are
 133:../FreeRTOS_EC/Source/CMessageTask.h **** 	 * received.
 134:../FreeRTOS_EC/Source/CMessageTask.h **** 	 */
 135:../FreeRTOS_EC/Source/CMessageTask.h **** 	virtual void OnTimeOut() {};
 470              		.loc 4 135 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 8
 473              		@ frame_needed = 1, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475 0000 80B4     		push	{r7}
 476              	.LCFI27:
 477              		.cfi_def_cfa_offset 4
 478              		.cfi_offset 7, -4
 479 0002 83B0     		sub	sp, sp, #12
 480              	.LCFI28:
 481              		.cfi_def_cfa_offset 16
 482 0004 00AF     		add	r7, sp, #0
 483              	.LCFI29:
 484              		.cfi_def_cfa_register 7
 485 0006 7860     		str	r0, [r7, #4]
 486              		.loc 4 135 0
 487 0008 07F10C07 		add	r7, r7, #12
 488 000c BD46     		mov	sp, r7
 489 000e 80BC     		pop	{r7}
 490 0010 7047     		bx	lr
 491              		.cfi_endproc
 492              	.LFE151:
 494              		.global	_ZN12CMessageTask13s_message_mapE
 495 0012 00BF     		.section	.rodata._ZN12CMessageTask13s_message_mapE,"a",%progbits
 496              		.align	2
 499              	_ZN12CMessageTask13s_message_mapE:
 500 0000 00000000 		.space	12
 500      00000000 
 500      00000000 
 501              		.text
 502              		.align	2
 503              		.global	_ZN12CMessageTaskC2Ev
 504              		.thumb
 505              		.thumb_func
 507              	_ZN12CMessageTaskC2Ev:
 508              	.LFB155:
 509              		.file 5 "../FreeRTOS_EC/Source/CMessageTask.cpp"
   1:../FreeRTOS_EC/Source/CMessageTask.cpp **** /*
   2:../FreeRTOS_EC/Source/CMessageTask.cpp ****  * CMessageTask.cpp
   3:../FreeRTOS_EC/Source/CMessageTask.cpp ****  *
   4:../FreeRTOS_EC/Source/CMessageTask.cpp ****  *  Created on: Sep 20, 2010
   5:../FreeRTOS_EC/Source/CMessageTask.cpp ****  *      Author: oliveris
   6:../FreeRTOS_EC/Source/CMessageTask.cpp ****  */
   7:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
   8:../FreeRTOS_EC/Source/CMessageTask.cpp **** #include <stdio.h>
   9:../FreeRTOS_EC/Source/CMessageTask.cpp **** #include "CMessageTask.h"
  10:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  11:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  12:../FreeRTOS_EC/Source/CMessageTask.cpp **** const CMessageTask::message_map_entry_t CMessageTask::s_message_map[] = {
  13:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		{ NULL_MSG, NULL }
  14:../FreeRTOS_EC/Source/CMessageTask.cpp **** };
  15:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  16:../FreeRTOS_EC/Source/CMessageTask.cpp **** CMessageTask::CMessageTask()
 510              		.loc 5 16 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 8
 513              		@ frame_needed = 1, uses_anonymous_args = 0
 514 0000 80B5     		push	{r7, lr}
 515              	.LCFI30:
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 14, -4
 518              		.cfi_offset 7, -8
 519 0002 82B0     		sub	sp, sp, #8
 520              	.LCFI31:
 521              		.cfi_def_cfa_offset 16
 522 0004 00AF     		add	r7, sp, #0
 523              	.LCFI32:
 524              		.cfi_def_cfa_register 7
 525 0006 7860     		str	r0, [r7, #4]
 526              	.LBB6:
 527              		.loc 5 16 0
 528 0008 7B68     		ldr	r3, [r7, #4]
 529 000a 1846     		mov	r0, r3
 530 000c FFF7FEFF 		bl	_ZN12AManagedTaskC2Ev
 531 0010 7B68     		ldr	r3, [r7, #4]
 532 0012 0B4A     		ldr	r2, .L16
 533 0014 1A60     		str	r2, [r3, #0]
 534 0016 7B68     		ldr	r3, [r7, #4]
 535 0018 03F11003 		add	r3, r3, #16
 536 001c 1846     		mov	r0, r3
 537 001e FFF7FEFF 		bl	_ZN6CQueueC1Ev
  17:../FreeRTOS_EC/Source/CMessageTask.cpp **** {
  18:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	m_pDelegate = NULL;
 538              		.loc 5 18 0
 539 0022 7B68     		ldr	r3, [r7, #4]
 540 0024 4FF00002 		mov	r2, #0
 541 0028 9A61     		str	r2, [r3, #24]
  19:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	m_nTimeOut = portMAX_DELAY;
 542              		.loc 5 19 0
 543 002a 7B68     		ldr	r3, [r7, #4]
 544 002c 4FF0FF32 		mov	r2, #-1
 545 0030 DA60     		str	r2, [r3, #12]
 546              	.LBE6:
  20:../FreeRTOS_EC/Source/CMessageTask.cpp **** }
 547              		.loc 5 20 0
 548 0032 7B68     		ldr	r3, [r7, #4]
 549 0034 1846     		mov	r0, r3
 550 0036 07F10807 		add	r7, r7, #8
 551 003a BD46     		mov	sp, r7
 552 003c 80BD     		pop	{r7, pc}
 553              	.L17:
 554 003e 00BF     		.align	2
 555              	.L16:
 556 0040 08000000 		.word	_ZTV12CMessageTask+8
 557              		.cfi_endproc
 558              	.LFE155:
 560              		.align	2
 561              		.global	_ZN12CMessageTaskD2Ev
 562              		.thumb
 563              		.thumb_func
 565              	_ZN12CMessageTaskD2Ev:
 566              	.LFB158:
  21:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  22:../FreeRTOS_EC/Source/CMessageTask.cpp **** CMessageTask::~CMessageTask() {
 567              		.loc 5 22 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 8
 570              		@ frame_needed = 1, uses_anonymous_args = 0
 571 0044 80B5     		push	{r7, lr}
 572              	.LCFI33:
 573              		.cfi_def_cfa_offset 8
 574              		.cfi_offset 14, -4
 575              		.cfi_offset 7, -8
 576 0046 82B0     		sub	sp, sp, #8
 577              	.LCFI34:
 578              		.cfi_def_cfa_offset 16
 579 0048 00AF     		add	r7, sp, #0
 580              	.LCFI35:
 581              		.cfi_def_cfa_register 7
 582 004a 7860     		str	r0, [r7, #4]
 583              	.LBB7:
 584              		.loc 5 22 0
 585 004c 7B68     		ldr	r3, [r7, #4]
 586 004e 0D4A     		ldr	r2, .L21
 587 0050 1A60     		str	r2, [r3, #0]
 588 0052 7B68     		ldr	r3, [r7, #4]
 589 0054 03F11003 		add	r3, r3, #16
  23:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	// TODO Auto-generated destructor stub
  24:../FreeRTOS_EC/Source/CMessageTask.cpp **** }
 590              		.loc 5 24 0
 591 0058 1846     		mov	r0, r3
 592 005a FFF7FEFF 		bl	_ZN6CQueueD1Ev
 593 005e 7868     		ldr	r0, [r7, #4]
 594 0060 FFF7FEFF 		bl	_ZN12AManagedTaskD2Ev
 595              	.LBE7:
 596 0064 4FF00003 		mov	r3, #0
 597 0068 03F00103 		and	r3, r3, #1
 598 006c DBB2     		uxtb	r3, r3
 599 006e 002B     		cmp	r3, #0
 600 0070 02D0     		beq	.L20
 601              		.loc 5 24 0 is_stmt 0 discriminator 2
 602 0072 7868     		ldr	r0, [r7, #4]
 603 0074 FFF7FEFF 		bl	_ZdlPv
 604              	.L20:
 605              		.loc 5 24 0 discriminator 3
 606 0078 7B68     		ldr	r3, [r7, #4]
 607 007a 1846     		mov	r0, r3
 608 007c 07F10807 		add	r7, r7, #8
 609 0080 BD46     		mov	sp, r7
 610 0082 80BD     		pop	{r7, pc}
 611              	.L22:
 612              		.align	2
 613              	.L21:
 614 0084 08000000 		.word	_ZTV12CMessageTask+8
 615              		.cfi_endproc
 616              	.LFE158:
 618              		.align	2
 619              		.global	_ZN12CMessageTaskD0Ev
 620              		.thumb
 621              		.thumb_func
 623              	_ZN12CMessageTaskD0Ev:
 624              	.LFB160:
  22:../FreeRTOS_EC/Source/CMessageTask.cpp **** CMessageTask::~CMessageTask() {
 625              		.loc 5 22 0 is_stmt 1
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 8
 628              		@ frame_needed = 1, uses_anonymous_args = 0
 629 0088 80B5     		push	{r7, lr}
 630              	.LCFI36:
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 14, -4
 633              		.cfi_offset 7, -8
 634 008a 82B0     		sub	sp, sp, #8
 635              	.LCFI37:
 636              		.cfi_def_cfa_offset 16
 637 008c 00AF     		add	r7, sp, #0
 638              	.LCFI38:
 639              		.cfi_def_cfa_register 7
 640 008e 7860     		str	r0, [r7, #4]
 641              		.loc 5 24 0
 642 0090 7868     		ldr	r0, [r7, #4]
 643 0092 FFF7FEFF 		bl	_ZN12CMessageTaskD1Ev
 644 0096 7868     		ldr	r0, [r7, #4]
 645 0098 FFF7FEFF 		bl	_ZdlPv
 646 009c 7B68     		ldr	r3, [r7, #4]
 647 009e 1846     		mov	r0, r3
 648 00a0 07F10807 		add	r7, r7, #8
 649 00a4 BD46     		mov	sp, r7
 650 00a6 80BD     		pop	{r7, pc}
 651              		.cfi_endproc
 652              	.LFE160:
 654              		.align	2
 655              		.global	_ZN12CMessageTask8OnCreateEPKctm
 656              		.thumb
 657              		.thumb_func
 659              	_ZN12CMessageTask8OnCreateEPKctm:
 660              	.LFB161:
  25:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  26:../FreeRTOS_EC/Source/CMessageTask.cpp **** portBASE_TYPE CMessageTask::OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth
 661              		.loc 5 26 0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 24
 664              		@ frame_needed = 1, uses_anonymous_args = 0
 665 00a8 80B5     		push	{r7, lr}
 666              	.LCFI39:
 667              		.cfi_def_cfa_offset 8
 668              		.cfi_offset 14, -4
 669              		.cfi_offset 7, -8
 670 00aa 86B0     		sub	sp, sp, #24
 671              	.LCFI40:
 672              		.cfi_def_cfa_offset 32
 673 00ac 00AF     		add	r7, sp, #0
 674              	.LCFI41:
 675              		.cfi_def_cfa_register 7
 676 00ae F860     		str	r0, [r7, #12]
 677 00b0 B960     		str	r1, [r7, #8]
 678 00b2 3B60     		str	r3, [r7, #0]
 679 00b4 1346     		mov	r3, r2	@ movhi
 680 00b6 FB80     		strh	r3, [r7, #6]	@ movhi
 681              	.LBB8:
  27:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	portBASE_TYPE res;
  28:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	res = m_queue.Create(CMessageTask::MESSAGE_QUEUE_SIZE, sizeof(char[20])).IsValid();
 682              		.loc 5 28 0
 683 00b8 FB68     		ldr	r3, [r7, #12]
 684 00ba 03F11003 		add	r3, r3, #16
 685 00be 1846     		mov	r0, r3
 686 00c0 4FF00501 		mov	r1, #5
 687 00c4 4FF01402 		mov	r2, #20
 688 00c8 FFF7FEFF 		bl	_ZN6CQueue6CreateEmm
 689 00cc 0346     		mov	r3, r0
 690 00ce 1A68     		ldr	r2, [r3, #0]
 691 00d0 1268     		ldr	r2, [r2, #0]
 692 00d2 1846     		mov	r0, r3
 693 00d4 9047     		blx	r2
 694 00d6 0346     		mov	r3, r0
 695 00d8 7B61     		str	r3, [r7, #20]
  29:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  30:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	return res;
 696              		.loc 5 30 0
 697 00da 7B69     		ldr	r3, [r7, #20]
 698              	.LBE8:
  31:../FreeRTOS_EC/Source/CMessageTask.cpp **** }
 699              		.loc 5 31 0
 700 00dc 1846     		mov	r0, r3
 701 00de 07F11807 		add	r7, r7, #24
 702 00e2 BD46     		mov	sp, r7
 703 00e4 80BD     		pop	{r7, pc}
 704              		.cfi_endproc
 705              	.LFE161:
 707 00e6 00BF     		.align	2
 708              		.global	_ZN12CMessageTask3RunEv
 709              		.thumb
 710              		.thumb_func
 712              	_ZN12CMessageTask3RunEv:
 713              	.LFB162:
  32:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  33:../FreeRTOS_EC/Source/CMessageTask.cpp **** void CMessageTask::Run() {
 714              		.loc 5 33 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 16
 717              		@ frame_needed = 1, uses_anonymous_args = 0
 718 00e8 80B5     		push	{r7, lr}
 719              	.LCFI42:
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 14, -4
 722              		.cfi_offset 7, -8
 723 00ea 84B0     		sub	sp, sp, #16
 724              	.LCFI43:
 725              		.cfi_def_cfa_offset 24
 726 00ec 00AF     		add	r7, sp, #0
 727              	.LCFI44:
 728              		.cfi_def_cfa_register 7
 729 00ee 7860     		str	r0, [r7, #4]
 730              	.LBB9:
  34:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  35:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	// call task specific initialization code.
  36:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	 if ( !OnInit() ) {
 731              		.loc 5 36 0
 732 00f0 7B68     		ldr	r3, [r7, #4]
 733 00f2 1B68     		ldr	r3, [r3, #0]
 734 00f4 03F12403 		add	r3, r3, #36
 735 00f8 1B68     		ldr	r3, [r3, #0]
 736 00fa 7868     		ldr	r0, [r7, #4]
 737 00fc 9847     		blx	r3
 738 00fe 0346     		mov	r3, r0
 739 0100 83F00103 		eor	r3, r3, #1
 740 0104 DBB2     		uxtb	r3, r3
 741 0106 002B     		cmp	r3, #0
 742 0108 08D0     		beq	.L27
  37:../FreeRTOS_EC/Source/CMessageTask.cpp **** #if INCLUDE_vTaskDelete == 1
  38:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		 Delete();
 743              		.loc 5 38 0
 744 010a 7B68     		ldr	r3, [r7, #4]
 745 010c 1846     		mov	r0, r3
 746 010e FFF7FEFF 		bl	_ZN5CTask6DeleteEv
 747              	.LBE9:
  39:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		 return;
  40:../FreeRTOS_EC/Source/CMessageTask.cpp **** #else
  41:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	 // The task must not start due to initialization problem, but the FreeRTOS
  42:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	 // vTaskDelete function is not defined by configuration file. Suspend the task.
  43:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		 Suspend();
  44:../FreeRTOS_EC/Source/CMessageTask.cpp **** #endif
  45:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	 }
  46:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  47:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	CMessage msg;
  48:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	for (;;) {
  49:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  50:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		if ( m_queue.Receive(&msg, m_nTimeOut) == pdTRUE ) {
  51:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			// Message Handling routine
  52:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  53:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			// Call the delegate, if one, before try to dispatch the event
  54:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			if (m_pDelegate) m_pDelegate->OnHandleEvent(msg);
  55:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			DispatchMessage(msg);
  56:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			// Call the delegate, if one, after tried to dispatch the event
  57:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			if (m_pDelegate) m_pDelegate->DidHandleEvent(msg);
  58:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		}
  59:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		else {
  60:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			// TODO: STF - timeout expired.
  61:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			OnTimeOut();
  62:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		}
  63:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	}
  64:../FreeRTOS_EC/Source/CMessageTask.cpp **** }
 748              		.loc 5 64 0
 749 0112 07F11007 		add	r7, r7, #16
 750 0116 BD46     		mov	sp, r7
 751 0118 80BD     		pop	{r7, pc}
 752              	.L31:
 753              	.LBB10:
  48:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	for (;;) {
 754              		.loc 5 48 0
 755 011a 00BF     		nop
 756              	.L27:
  50:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		if ( m_queue.Receive(&msg, m_nTimeOut) == pdTRUE ) {
 757              		.loc 5 50 0
 758 011c 7B68     		ldr	r3, [r7, #4]
 759 011e 03F11001 		add	r1, r3, #16
 760 0122 7B68     		ldr	r3, [r7, #4]
 761 0124 DB68     		ldr	r3, [r3, #12]
 762 0126 07F10802 		add	r2, r7, #8
 763 012a 0846     		mov	r0, r1
 764 012c 1146     		mov	r1, r2
 765 012e 1A46     		mov	r2, r3
 766 0130 FFF7FEFF 		bl	_ZN6CQueue7ReceiveEPvm
 767 0134 0346     		mov	r3, r0
 768 0136 012B     		cmp	r3, #1
 769 0138 14BF     		ite	ne
 770 013a 0023     		movne	r3, #0
 771 013c 0123     		moveq	r3, #1
 772 013e DBB2     		uxtb	r3, r3
 773 0140 002B     		cmp	r3, #0
 774 0142 2AD0     		beq	.L28
  54:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			if (m_pDelegate) m_pDelegate->OnHandleEvent(msg);
 775              		.loc 5 54 0
 776 0144 7B68     		ldr	r3, [r7, #4]
 777 0146 9B69     		ldr	r3, [r3, #24]
 778 0148 002B     		cmp	r3, #0
 779 014a 0AD0     		beq	.L29
  54:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			if (m_pDelegate) m_pDelegate->OnHandleEvent(msg);
 780              		.loc 5 54 0 is_stmt 0 discriminator 1
 781 014c 7B68     		ldr	r3, [r7, #4]
 782 014e 9B69     		ldr	r3, [r3, #24]
 783 0150 1B68     		ldr	r3, [r3, #0]
 784 0152 1B68     		ldr	r3, [r3, #0]
 785 0154 7A68     		ldr	r2, [r7, #4]
 786 0156 9169     		ldr	r1, [r2, #24]
 787 0158 07F10802 		add	r2, r7, #8
 788 015c 0846     		mov	r0, r1
 789 015e 1146     		mov	r1, r2
 790 0160 9847     		blx	r3
 791              	.L29:
  55:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			DispatchMessage(msg);
 792              		.loc 5 55 0 is_stmt 1
 793 0162 7B68     		ldr	r3, [r7, #4]
 794 0164 1B68     		ldr	r3, [r3, #0]
 795 0166 03F12003 		add	r3, r3, #32
 796 016a 1B68     		ldr	r3, [r3, #0]
 797 016c 07F10802 		add	r2, r7, #8
 798 0170 7868     		ldr	r0, [r7, #4]
 799 0172 1146     		mov	r1, r2
 800 0174 9847     		blx	r3
  57:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			if (m_pDelegate) m_pDelegate->DidHandleEvent(msg);
 801              		.loc 5 57 0
 802 0176 7B68     		ldr	r3, [r7, #4]
 803 0178 9B69     		ldr	r3, [r3, #24]
 804 017a 002B     		cmp	r3, #0
 805 017c CDD0     		beq	.L31
  57:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			if (m_pDelegate) m_pDelegate->DidHandleEvent(msg);
 806              		.loc 5 57 0 is_stmt 0 discriminator 1
 807 017e 7B68     		ldr	r3, [r7, #4]
 808 0180 9B69     		ldr	r3, [r3, #24]
 809 0182 1B68     		ldr	r3, [r3, #0]
 810 0184 03F10403 		add	r3, r3, #4
 811 0188 1B68     		ldr	r3, [r3, #0]
 812 018a 7A68     		ldr	r2, [r7, #4]
 813 018c 9169     		ldr	r1, [r2, #24]
 814 018e 07F10802 		add	r2, r7, #8
 815 0192 0846     		mov	r0, r1
 816 0194 1146     		mov	r1, r2
 817 0196 9847     		blx	r3
  48:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	for (;;) {
 818              		.loc 5 48 0 is_stmt 1 discriminator 1
 819 0198 BFE7     		b	.L31
 820              	.L28:
  61:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			OnTimeOut();
 821              		.loc 5 61 0
 822 019a 7B68     		ldr	r3, [r7, #4]
 823 019c 1B68     		ldr	r3, [r3, #0]
 824 019e 03F12803 		add	r3, r3, #40
 825 01a2 1B68     		ldr	r3, [r3, #0]
 826 01a4 7868     		ldr	r0, [r7, #4]
 827 01a6 9847     		blx	r3
  48:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	for (;;) {
 828              		.loc 5 48 0
 829 01a8 B7E7     		b	.L31
 830              	.LBE10:
 831              		.cfi_endproc
 832              	.LFE162:
 834 01aa 00BF     		.align	2
 835              		.global	_ZN12CMessageTask15DispatchMessageERK8CMessage
 836              		.thumb
 837              		.thumb_func
 839              	_ZN12CMessageTask15DispatchMessageERK8CMessage:
 840              	.LFB163:
  65:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  66:../FreeRTOS_EC/Source/CMessageTask.cpp **** void CMessageTask::DispatchMessage(const CMessage &msg) {
 841              		.loc 5 66 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 16
 844              		@ frame_needed = 1, uses_anonymous_args = 0
 845 01ac 90B5     		push	{r4, r7, lr}
 846              	.LCFI45:
 847              		.cfi_def_cfa_offset 12
 848              		.cfi_offset 14, -4
 849              		.cfi_offset 7, -8
 850              		.cfi_offset 4, -12
 851 01ae 85B0     		sub	sp, sp, #20
 852              	.LCFI46:
 853              		.cfi_def_cfa_offset 32
 854 01b0 00AF     		add	r7, sp, #0
 855              	.LCFI47:
 856              		.cfi_def_cfa_register 7
 857 01b2 7860     		str	r0, [r7, #4]
 858 01b4 3960     		str	r1, [r7, #0]
 859              	.LBB11:
 860              	.LBB12:
  67:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	for (int i=0; s_message_map[i].id!=NULL_MSG; ++i) {
 861              		.loc 5 67 0
 862 01b6 4FF00003 		mov	r3, #0
 863 01ba FB60     		str	r3, [r7, #12]
 864 01bc 77E0     		b	.L33
 865              	.L38:
  68:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		if (s_message_map[i].id == msg.m_nId) {
 866              		.loc 5 68 0
 867 01be 40F20002 		movw	r2, #:lower16:_ZN12CMessageTask13s_message_mapE
 868 01c2 C0F20002 		movt	r2, #:upper16:_ZN12CMessageTask13s_message_mapE
 869 01c6 F968     		ldr	r1, [r7, #12]
 870 01c8 0B46     		mov	r3, r1
 871 01ca 4FEA4303 		lsl	r3, r3, #1
 872 01ce 5B18     		adds	r3, r3, r1
 873 01d0 4FEA8303 		lsl	r3, r3, #2
 874 01d4 D318     		adds	r3, r2, r3
 875 01d6 1A88     		ldrh	r2, [r3, #0]
 876 01d8 3B68     		ldr	r3, [r7, #0]
 877 01da 1B88     		ldrh	r3, [r3, #0]
 878 01dc 9A42     		cmp	r2, r3
 879 01de 62D1     		bne	.L34
  69:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			(this->*s_message_map[i].MessageHandler)(msg.wParam);
 880              		.loc 5 69 0
 881 01e0 40F20002 		movw	r2, #:lower16:_ZN12CMessageTask13s_message_mapE
 882 01e4 C0F20002 		movt	r2, #:upper16:_ZN12CMessageTask13s_message_mapE
 883 01e8 F968     		ldr	r1, [r7, #12]
 884 01ea 0B46     		mov	r3, r1
 885 01ec 4FEA4303 		lsl	r3, r3, #1
 886 01f0 5B18     		adds	r3, r3, r1
 887 01f2 4FEA8303 		lsl	r3, r3, #2
 888 01f6 D318     		adds	r3, r2, r3
 889 01f8 03F10803 		add	r3, r3, #8
 890 01fc 1B68     		ldr	r3, [r3, #0]
 891 01fe 03F00103 		and	r3, r3, #1
 892 0202 DBB2     		uxtb	r3, r3
 893 0204 002B     		cmp	r3, #0
 894 0206 26D0     		beq	.L35
 895              		.loc 5 69 0 is_stmt 0 discriminator 1
 896 0208 40F20002 		movw	r2, #:lower16:_ZN12CMessageTask13s_message_mapE
 897 020c C0F20002 		movt	r2, #:upper16:_ZN12CMessageTask13s_message_mapE
 898 0210 F968     		ldr	r1, [r7, #12]
 899 0212 0B46     		mov	r3, r1
 900 0214 4FEA4303 		lsl	r3, r3, #1
 901 0218 5B18     		adds	r3, r3, r1
 902 021a 4FEA8303 		lsl	r3, r3, #2
 903 021e D318     		adds	r3, r2, r3
 904 0220 03F10803 		add	r3, r3, #8
 905 0224 1B68     		ldr	r3, [r3, #0]
 906 0226 4FEA6303 		asr	r3, r3, #1
 907 022a 7A68     		ldr	r2, [r7, #4]
 908 022c D318     		adds	r3, r2, r3
 909 022e 1868     		ldr	r0, [r3, #0]
 910 0230 40F20002 		movw	r2, #:lower16:_ZN12CMessageTask13s_message_mapE
 911 0234 C0F20002 		movt	r2, #:upper16:_ZN12CMessageTask13s_message_mapE
 912 0238 F968     		ldr	r1, [r7, #12]
 913 023a 0B46     		mov	r3, r1
 914 023c 4FEA4303 		lsl	r3, r3, #1
 915 0240 5B18     		adds	r3, r3, r1
 916 0242 4FEA8303 		lsl	r3, r3, #2
 917 0246 D318     		adds	r3, r2, r3
 918 0248 03F10403 		add	r3, r3, #4
 919 024c 1B68     		ldr	r3, [r3, #0]
 920 024e C318     		adds	r3, r0, r3
 921 0250 1B68     		ldr	r3, [r3, #0]
 922 0252 1C46     		mov	r4, r3
 923 0254 0EE0     		b	.L36
 924              	.L35:
 925              		.loc 5 69 0 discriminator 2
 926 0256 40F20002 		movw	r2, #:lower16:_ZN12CMessageTask13s_message_mapE
 927 025a C0F20002 		movt	r2, #:upper16:_ZN12CMessageTask13s_message_mapE
 928 025e F968     		ldr	r1, [r7, #12]
 929 0260 0B46     		mov	r3, r1
 930 0262 4FEA4303 		lsl	r3, r3, #1
 931 0266 5B18     		adds	r3, r3, r1
 932 0268 4FEA8303 		lsl	r3, r3, #2
 933 026c D318     		adds	r3, r2, r3
 934 026e 03F10403 		add	r3, r3, #4
 935 0272 1C68     		ldr	r4, [r3, #0]
 936              	.L36:
 937              		.loc 5 69 0 discriminator 3
 938 0274 40F20002 		movw	r2, #:lower16:_ZN12CMessageTask13s_message_mapE
 939 0278 C0F20002 		movt	r2, #:upper16:_ZN12CMessageTask13s_message_mapE
 940 027c F968     		ldr	r1, [r7, #12]
 941 027e 0B46     		mov	r3, r1
 942 0280 4FEA4303 		lsl	r3, r3, #1
 943 0284 5B18     		adds	r3, r3, r1
 944 0286 4FEA8303 		lsl	r3, r3, #2
 945 028a D318     		adds	r3, r2, r3
 946 028c 03F10803 		add	r3, r3, #8
 947 0290 1B68     		ldr	r3, [r3, #0]
 948 0292 4FEA6303 		asr	r3, r3, #1
 949 0296 7A68     		ldr	r2, [r7, #4]
 950 0298 D218     		adds	r2, r2, r3
 951 029a 3B68     		ldr	r3, [r7, #0]
 952 029c 5B68     		ldr	r3, [r3, #4]
 953 029e 1046     		mov	r0, r2
 954 02a0 1946     		mov	r1, r3
 955 02a2 A047     		blx	r4
  70:../FreeRTOS_EC/Source/CMessageTask.cpp **** 			break;
 956              		.loc 5 70 0 is_stmt 1 discriminator 3
 957 02a4 18E0     		b	.L32
 958              	.L34:
  67:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	for (int i=0; s_message_map[i].id!=NULL_MSG; ++i) {
 959              		.loc 5 67 0
 960 02a6 FB68     		ldr	r3, [r7, #12]
 961 02a8 03F10103 		add	r3, r3, #1
 962 02ac FB60     		str	r3, [r7, #12]
 963              	.L33:
  67:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	for (int i=0; s_message_map[i].id!=NULL_MSG; ++i) {
 964              		.loc 5 67 0 is_stmt 0 discriminator 1
 965 02ae 40F20002 		movw	r2, #:lower16:_ZN12CMessageTask13s_message_mapE
 966 02b2 C0F20002 		movt	r2, #:upper16:_ZN12CMessageTask13s_message_mapE
 967 02b6 F968     		ldr	r1, [r7, #12]
 968 02b8 0B46     		mov	r3, r1
 969 02ba 4FEA4303 		lsl	r3, r3, #1
 970 02be 5B18     		adds	r3, r3, r1
 971 02c0 4FEA8303 		lsl	r3, r3, #2
 972 02c4 D318     		adds	r3, r2, r3
 973 02c6 1B88     		ldrh	r3, [r3, #0]
 974 02c8 002B     		cmp	r3, #0
 975 02ca 0CBF     		ite	eq
 976 02cc 0023     		moveq	r3, #0
 977 02ce 0123     		movne	r3, #1
 978 02d0 DBB2     		uxtb	r3, r3
 979 02d2 002B     		cmp	r3, #0
 980 02d4 7FF473AF 		bne	.L38
 981              	.L32:
 982              	.LBE12:
 983              	.LBE11:
  71:../FreeRTOS_EC/Source/CMessageTask.cpp **** 		}
  72:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	}
  73:../FreeRTOS_EC/Source/CMessageTask.cpp **** }
 984              		.loc 5 73 0 is_stmt 1
 985 02d8 07F11407 		add	r7, r7, #20
 986 02dc BD46     		mov	sp, r7
 987 02de 90BD     		pop	{r4, r7, pc}
 988              		.cfi_endproc
 989              	.LFE163:
 991              		.align	2
 992              		.global	_ZN12CMessageTask11PostMessageEP8CMessagem
 993              		.thumb
 994              		.thumb_func
 996              	_ZN12CMessageTask11PostMessageEP8CMessagem:
 997              	.LFB164:
  74:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  75:../FreeRTOS_EC/Source/CMessageTask.cpp **** bool CMessageTask::PostMessage(CMessage *pMsg, portTickType nTicksToWait/*=portMAX_DELAY*/) {
 998              		.loc 5 75 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 16
 1001              		@ frame_needed = 1, uses_anonymous_args = 0
 1002 02e0 80B5     		push	{r7, lr}
 1003              	.LCFI48:
 1004              		.cfi_def_cfa_offset 8
 1005              		.cfi_offset 14, -4
 1006              		.cfi_offset 7, -8
 1007 02e2 84B0     		sub	sp, sp, #16
 1008              	.LCFI49:
 1009              		.cfi_def_cfa_offset 24
 1010 02e4 00AF     		add	r7, sp, #0
 1011              	.LCFI50:
 1012              		.cfi_def_cfa_register 7
 1013 02e6 F860     		str	r0, [r7, #12]
 1014 02e8 B960     		str	r1, [r7, #8]
 1015 02ea 7A60     		str	r2, [r7, #4]
  76:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	return (bool)m_queue.Send(pMsg, nTicksToWait);
 1016              		.loc 5 76 0
 1017 02ec FB68     		ldr	r3, [r7, #12]
 1018 02ee 03F11003 		add	r3, r3, #16
 1019 02f2 1846     		mov	r0, r3
 1020 02f4 B968     		ldr	r1, [r7, #8]
 1021 02f6 7A68     		ldr	r2, [r7, #4]
 1022 02f8 FFF7FEFF 		bl	_ZN6CQueue4SendEPKvm
 1023 02fc 0346     		mov	r3, r0
 1024 02fe 002B     		cmp	r3, #0
 1025 0300 0CBF     		ite	eq
 1026 0302 0023     		moveq	r3, #0
 1027 0304 0123     		movne	r3, #1
 1028 0306 DBB2     		uxtb	r3, r3
  77:../FreeRTOS_EC/Source/CMessageTask.cpp **** }
 1029              		.loc 5 77 0
 1030 0308 1846     		mov	r0, r3
 1031 030a 07F11007 		add	r7, r7, #16
 1032 030e BD46     		mov	sp, r7
 1033 0310 80BD     		pop	{r7, pc}
 1034              		.cfi_endproc
 1035              	.LFE164:
 1037 0312 00BF     		.align	2
 1038              		.global	_ZN12CMessageTask18PostMessageFromISREP8CMessagePl
 1039              		.thumb
 1040              		.thumb_func
 1042              	_ZN12CMessageTask18PostMessageFromISREP8CMessagePl:
 1043              	.LFB165:
  78:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  79:../FreeRTOS_EC/Source/CMessageTask.cpp **** bool CMessageTask::PostMessageFromISR(CMessage *pMsg, portBASE_TYPE *pxHigherPriorityTaskWoken) {
 1044              		.loc 5 79 0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 16
 1047              		@ frame_needed = 1, uses_anonymous_args = 0
 1048 0314 80B5     		push	{r7, lr}
 1049              	.LCFI51:
 1050              		.cfi_def_cfa_offset 8
 1051              		.cfi_offset 14, -4
 1052              		.cfi_offset 7, -8
 1053 0316 84B0     		sub	sp, sp, #16
 1054              	.LCFI52:
 1055              		.cfi_def_cfa_offset 24
 1056 0318 00AF     		add	r7, sp, #0
 1057              	.LCFI53:
 1058              		.cfi_def_cfa_register 7
 1059 031a F860     		str	r0, [r7, #12]
 1060 031c B960     		str	r1, [r7, #8]
 1061 031e 7A60     		str	r2, [r7, #4]
  80:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	return (bool)m_queue.SendFromISR(pMsg, pxHigherPriorityTaskWoken);
 1062              		.loc 5 80 0
 1063 0320 FB68     		ldr	r3, [r7, #12]
 1064 0322 03F11003 		add	r3, r3, #16
 1065 0326 1846     		mov	r0, r3
 1066 0328 B968     		ldr	r1, [r7, #8]
 1067 032a 7A68     		ldr	r2, [r7, #4]
 1068 032c FFF7FEFF 		bl	_ZN6CQueue11SendFromISREPKvPl
 1069 0330 0346     		mov	r3, r0
 1070 0332 002B     		cmp	r3, #0
 1071 0334 0CBF     		ite	eq
 1072 0336 0023     		moveq	r3, #0
 1073 0338 0123     		movne	r3, #1
 1074 033a DBB2     		uxtb	r3, r3
  81:../FreeRTOS_EC/Source/CMessageTask.cpp **** }
 1075              		.loc 5 81 0
 1076 033c 1846     		mov	r0, r3
 1077 033e 07F11007 		add	r7, r7, #16
 1078 0342 BD46     		mov	sp, r7
 1079 0344 80BD     		pop	{r7, pc}
 1080              		.cfi_endproc
 1081              	.LFE165:
 1083 0346 00BF     		.align	2
 1084              		.global	_ZN12CMessageTask11SendMessageEP8CMessagem
 1085              		.thumb
 1086              		.thumb_func
 1088              	_ZN12CMessageTask11SendMessageEP8CMessagem:
 1089              	.LFB166:
  82:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  83:../FreeRTOS_EC/Source/CMessageTask.cpp **** bool CMessageTask::SendMessage(CMessage *pMsg, portTickType nTicksToWait/*=portMAX_DELAY*/) {
 1090              		.loc 5 83 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 16
 1093              		@ frame_needed = 1, uses_anonymous_args = 0
 1094 0348 80B5     		push	{r7, lr}
 1095              	.LCFI54:
 1096              		.cfi_def_cfa_offset 8
 1097              		.cfi_offset 14, -4
 1098              		.cfi_offset 7, -8
 1099 034a 84B0     		sub	sp, sp, #16
 1100              	.LCFI55:
 1101              		.cfi_def_cfa_offset 24
 1102 034c 00AF     		add	r7, sp, #0
 1103              	.LCFI56:
 1104              		.cfi_def_cfa_register 7
 1105 034e F860     		str	r0, [r7, #12]
 1106 0350 B960     		str	r1, [r7, #8]
 1107 0352 7A60     		str	r2, [r7, #4]
  84:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	return (bool)m_queue.SendToFront(pMsg, nTicksToWait);
 1108              		.loc 5 84 0
 1109 0354 FB68     		ldr	r3, [r7, #12]
 1110 0356 03F11003 		add	r3, r3, #16
 1111 035a 1846     		mov	r0, r3
 1112 035c B968     		ldr	r1, [r7, #8]
 1113 035e 7A68     		ldr	r2, [r7, #4]
 1114 0360 FFF7FEFF 		bl	_ZN6CQueue11SendToFrontEPKvm
 1115 0364 0346     		mov	r3, r0
 1116 0366 002B     		cmp	r3, #0
 1117 0368 0CBF     		ite	eq
 1118 036a 0023     		moveq	r3, #0
 1119 036c 0123     		movne	r3, #1
 1120 036e DBB2     		uxtb	r3, r3
  85:../FreeRTOS_EC/Source/CMessageTask.cpp **** }
 1121              		.loc 5 85 0
 1122 0370 1846     		mov	r0, r3
 1123 0372 07F11007 		add	r7, r7, #16
 1124 0376 BD46     		mov	sp, r7
 1125 0378 80BD     		pop	{r7, pc}
 1126              		.cfi_endproc
 1127              	.LFE166:
 1129 037a 00BF     		.align	2
 1130              		.global	_ZN12CMessageTask11SenfFromISREP8CMessagePl
 1131              		.thumb
 1132              		.thumb_func
 1134              	_ZN12CMessageTask11SenfFromISREP8CMessagePl:
 1135              	.LFB167:
  86:../FreeRTOS_EC/Source/CMessageTask.cpp **** 
  87:../FreeRTOS_EC/Source/CMessageTask.cpp **** bool CMessageTask::SenfFromISR(CMessage *pMsg, portBASE_TYPE * pxHigherPriorityTaskWoken) {
 1136              		.loc 5 87 0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 16
 1139              		@ frame_needed = 1, uses_anonymous_args = 0
 1140 037c 80B5     		push	{r7, lr}
 1141              	.LCFI57:
 1142              		.cfi_def_cfa_offset 8
 1143              		.cfi_offset 14, -4
 1144              		.cfi_offset 7, -8
 1145 037e 84B0     		sub	sp, sp, #16
 1146              	.LCFI58:
 1147              		.cfi_def_cfa_offset 24
 1148 0380 00AF     		add	r7, sp, #0
 1149              	.LCFI59:
 1150              		.cfi_def_cfa_register 7
 1151 0382 F860     		str	r0, [r7, #12]
 1152 0384 B960     		str	r1, [r7, #8]
 1153 0386 7A60     		str	r2, [r7, #4]
  88:../FreeRTOS_EC/Source/CMessageTask.cpp **** 	return (bool)m_queue.SendToFrontFromISR(pMsg, pxHigherPriorityTaskWoken);
 1154              		.loc 5 88 0
 1155 0388 FB68     		ldr	r3, [r7, #12]
 1156 038a 03F11003 		add	r3, r3, #16
 1157 038e 1846     		mov	r0, r3
 1158 0390 B968     		ldr	r1, [r7, #8]
 1159 0392 7A68     		ldr	r2, [r7, #4]
 1160 0394 FFF7FEFF 		bl	_ZN6CQueue18SendToFrontFromISREPKvPl
 1161 0398 0346     		mov	r3, r0
 1162 039a 002B     		cmp	r3, #0
 1163 039c 0CBF     		ite	eq
 1164 039e 0023     		moveq	r3, #0
 1165 03a0 0123     		movne	r3, #1
 1166 03a2 DBB2     		uxtb	r3, r3
  89:../FreeRTOS_EC/Source/CMessageTask.cpp **** }
 1167              		.loc 5 89 0
 1168 03a4 1846     		mov	r0, r3
 1169 03a6 07F11007 		add	r7, r7, #16
 1170 03aa BD46     		mov	sp, r7
 1171 03ac 80BD     		pop	{r7, pc}
 1172              		.cfi_endproc
 1173              	.LFE167:
 1175              		.global	_ZTV12CMessageTask
 1176              		.section	.rodata._ZTV12CMessageTask,"a",%progbits
 1177              		.align	3
 1180              	_ZTV12CMessageTask:
 1181 0000 00000000 		.word	0
 1182 0004 00000000 		.word	0
 1183 0008 00000000 		.word	_ZNK5CTask7IsValidEv
 1184 000c 00000000 		.word	_ZN5CTask6AttachEPv
 1185 0010 00000000 		.word	_ZN5CTask6DetachEv
 1186 0014 00000000 		.word	_ZN12CMessageTaskD1Ev
 1187 0018 00000000 		.word	_ZN12CMessageTaskD0Ev
 1188 001c 00000000 		.word	_ZN12AManagedTask12HardwareInitEv
 1189 0020 00000000 		.word	_ZN12CMessageTask3RunEv
 1190 0024 00000000 		.word	_ZN12CMessageTask8OnCreateEPKctm
 1191 0028 00000000 		.word	_ZN12CMessageTask15DispatchMessageERK8CMessage
 1192 002c 00000000 		.word	_ZN12CMessageTask6OnInitEv
 1193 0030 00000000 		.word	_ZN12CMessageTask9OnTimeOutEv
 1194 0034 00000000 		.section	.rodata._ZZN6CQueue18SendToFrontFromISREPKvPlE19__PRETTY_FUNCTION__,"a",%progbits
 1195              		.align	2
 1198              	_ZZN6CQueue18SendToFrontFromISREPKvPlE19__PRETTY_FUNCTION__:
 1199 0000 6C6F6E67 		.ascii	"long int CQueue::SendToFrontFromISR(const void*, lo"
 1199      20696E74 
 1199      20435175 
 1199      6575653A 
 1199      3A53656E 
 1200 0033 6E672069 		.ascii	"ng int*)\000"
 1200      6E742A29 
 1200      00
 1201              		.section	.rodata._ZZN6CQueue11SendToFrontEPKvmE19__PRETTY_FUNCTION__,"a",%progbits
 1202              		.align	2
 1205              	_ZZN6CQueue11SendToFrontEPKvmE19__PRETTY_FUNCTION__:
 1206 0000 6C6F6E67 		.ascii	"long int CQueue::SendToFront(const void*, portTickT"
 1206      20696E74 
 1206      20435175 
 1206      6575653A 
 1206      3A53656E 
 1207 0033 79706529 		.ascii	"ype)\000"
 1207      00
 1208              		.section	.rodata._ZZN6CQueue7ReceiveEPvmE19__PRETTY_FUNCTION__,"a",%progbits
 1209              		.align	2
 1212              	_ZZN6CQueue7ReceiveEPvmE19__PRETTY_FUNCTION__:
 1213 0000 6C6F6E67 		.ascii	"long int CQueue::Receive(void*, portTickType)\000"
 1213      20696E74 
 1213      20435175 
 1213      6575653A 
 1213      3A526563 
 1214              		.global	_ZN12CMessageTaskC1Ev
 1215              		.thumb_set _ZN12CMessageTaskC1Ev,_ZN12CMessageTaskC2Ev
 1216              		.global	_ZN12CMessageTaskD1Ev
 1217              		.thumb_set _ZN12CMessageTaskD1Ev,_ZN12CMessageTaskD2Ev
 1218 002e 0000     		.text
 1219              	.Letext0:
 1220              		.file 6 "d:\\elektronik\\ides\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib
 1221              		.file 7 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../So
 1222              		.file 8 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/task.h"
 1223              		.file 9 "../FreeRTOS_EC/Source/IFreeRTOSProtocol.h"
 1224              		.file 10 "../FreeRTOS_EC/Source/MessageMacro.h"
 1225              		.file 11 "<built-in>"
 1226              		.file 12 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CMessageTask.cpp
  C:\TEMP\cc5bxuyM.s:20     .text._ZNK5CTask7IsValidEv:00000000 $t
  C:\TEMP\cc5bxuyM.s:25     .text._ZNK5CTask7IsValidEv:00000000 _ZNK5CTask7IsValidEv
  C:\TEMP\cc5bxuyM.s:62     .text._ZN5CTask6DetachEv:00000000 $t
  C:\TEMP\cc5bxuyM.s:67     .text._ZN5CTask6DetachEv:00000000 _ZN5CTask6DetachEv
  C:\TEMP\cc5bxuyM.s:107    .text._ZN12AManagedTask12HardwareInitEv:00000000 $t
  C:\TEMP\cc5bxuyM.s:112    .text._ZN12AManagedTask12HardwareInitEv:00000000 _ZN12AManagedTask12HardwareInitEv
  C:\TEMP\cc5bxuyM.s:142    .text._ZN6CQueue4SendEPKvm:00000000 $t
  C:\TEMP\cc5bxuyM.s:147    .text._ZN6CQueue4SendEPKvm:00000000 _ZN6CQueue4SendEPKvm
  C:\TEMP\cc5bxuyM.s:186    .text._ZN6CQueue11SendFromISREPKvPl:00000000 $t
  C:\TEMP\cc5bxuyM.s:191    .text._ZN6CQueue11SendFromISREPKvPl:00000000 _ZN6CQueue11SendFromISREPKvPl
  C:\TEMP\cc5bxuyM.s:229    .rodata:00000000 $d
  C:\TEMP\cc5bxuyM.s:230    .rodata:00000000 .LC0
  C:\TEMP\cc5bxuyM.s:233    .rodata:00000020 .LC1
  C:\TEMP\cc5bxuyM.s:236    .text._ZN6CQueue11SendToFrontEPKvm:00000000 $t
  C:\TEMP\cc5bxuyM.s:241    .text._ZN6CQueue11SendToFrontEPKvm:00000000 _ZN6CQueue11SendToFrontEPKvm
  C:\TEMP\cc5bxuyM.s:1205   .rodata._ZZN6CQueue11SendToFrontEPKvmE19__PRETTY_FUNCTION__:00000000 _ZZN6CQueue11SendToFrontEPKvmE19__PRETTY_FUNCTION__
  C:\TEMP\cc5bxuyM.s:300    .text._ZN6CQueue7ReceiveEPvm:00000000 $t
  C:\TEMP\cc5bxuyM.s:305    .text._ZN6CQueue7ReceiveEPvm:00000000 _ZN6CQueue7ReceiveEPvm
  C:\TEMP\cc5bxuyM.s:1212   .rodata._ZZN6CQueue7ReceiveEPvmE19__PRETTY_FUNCTION__:00000000 _ZZN6CQueue7ReceiveEPvmE19__PRETTY_FUNCTION__
  C:\TEMP\cc5bxuyM.s:364    .text._ZN6CQueue18SendToFrontFromISREPKvPl:00000000 $t
  C:\TEMP\cc5bxuyM.s:369    .text._ZN6CQueue18SendToFrontFromISREPKvPl:00000000 _ZN6CQueue18SendToFrontFromISREPKvPl
  C:\TEMP\cc5bxuyM.s:1198   .rodata._ZZN6CQueue18SendToFrontFromISREPKvPlE19__PRETTY_FUNCTION__:00000000 _ZZN6CQueue18SendToFrontFromISREPKvPlE19__PRETTY_FUNCTION__
  C:\TEMP\cc5bxuyM.s:428    .text._ZN12CMessageTask6OnInitEv:00000000 $t
  C:\TEMP\cc5bxuyM.s:433    .text._ZN12CMessageTask6OnInitEv:00000000 _ZN12CMessageTask6OnInitEv
  C:\TEMP\cc5bxuyM.s:463    .text._ZN12CMessageTask9OnTimeOutEv:00000000 $t
  C:\TEMP\cc5bxuyM.s:468    .text._ZN12CMessageTask9OnTimeOutEv:00000000 _ZN12CMessageTask9OnTimeOutEv
  C:\TEMP\cc5bxuyM.s:499    .rodata._ZN12CMessageTask13s_message_mapE:00000000 _ZN12CMessageTask13s_message_mapE
  C:\TEMP\cc5bxuyM.s:496    .rodata._ZN12CMessageTask13s_message_mapE:00000000 $d
  C:\TEMP\cc5bxuyM.s:502    .text:00000000 $t
  C:\TEMP\cc5bxuyM.s:507    .text:00000000 _ZN12CMessageTaskC2Ev
  C:\TEMP\cc5bxuyM.s:556    .text:00000040 $d
  C:\TEMP\cc5bxuyM.s:1180   .rodata._ZTV12CMessageTask:00000000 _ZTV12CMessageTask
  C:\TEMP\cc5bxuyM.s:560    .text:00000044 $t
  C:\TEMP\cc5bxuyM.s:565    .text:00000044 _ZN12CMessageTaskD2Ev
  C:\TEMP\cc5bxuyM.s:614    .text:00000084 $d
  C:\TEMP\cc5bxuyM.s:618    .text:00000088 $t
  C:\TEMP\cc5bxuyM.s:623    .text:00000088 _ZN12CMessageTaskD0Ev
  C:\TEMP\cc5bxuyM.s:565    .text:00000044 _ZN12CMessageTaskD1Ev
  C:\TEMP\cc5bxuyM.s:659    .text:000000a8 _ZN12CMessageTask8OnCreateEPKctm
  C:\TEMP\cc5bxuyM.s:712    .text:000000e8 _ZN12CMessageTask3RunEv
  C:\TEMP\cc5bxuyM.s:839    .text:000001ac _ZN12CMessageTask15DispatchMessageERK8CMessage
  C:\TEMP\cc5bxuyM.s:996    .text:000002e0 _ZN12CMessageTask11PostMessageEP8CMessagem
  C:\TEMP\cc5bxuyM.s:1042   .text:00000314 _ZN12CMessageTask18PostMessageFromISREP8CMessagePl
  C:\TEMP\cc5bxuyM.s:1088   .text:00000348 _ZN12CMessageTask11SendMessageEP8CMessagem
  C:\TEMP\cc5bxuyM.s:1134   .text:0000037c _ZN12CMessageTask11SenfFromISREP8CMessagePl
  C:\TEMP\cc5bxuyM.s:1177   .rodata._ZTV12CMessageTask:00000000 $d
  C:\TEMP\cc5bxuyM.s:1195   .rodata._ZZN6CQueue18SendToFrontFromISREPKvPlE19__PRETTY_FUNCTION__:00000000 $d
  C:\TEMP\cc5bxuyM.s:1202   .rodata._ZZN6CQueue11SendToFrontEPKvmE19__PRETTY_FUNCTION__:00000000 $d
  C:\TEMP\cc5bxuyM.s:1209   .rodata._ZZN6CQueue7ReceiveEPvmE19__PRETTY_FUNCTION__:00000000 $d
  C:\TEMP\cc5bxuyM.s:507    .text:00000000 _ZN12CMessageTaskC1Ev
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xQueueGenericSend
xQueueGenericSendFromISR
__assert_func
xQueueGenericReceive
_ZN12AManagedTaskC2Ev
_ZN6CQueueC1Ev
_ZN6CQueueD1Ev
_ZN12AManagedTaskD2Ev
_ZdlPv
_ZN6CQueue6CreateEmm
_ZN5CTask6DeleteEv
_ZN5CTask6AttachEPv
