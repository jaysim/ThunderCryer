   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"CRecursiveMutex.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZNK11ASyncObject7IsValidEv,"axG",%progbits,_ZNK11ASyncObject7IsValidEv,comdat
  20              		.align	2
  21              		.weak	_ZNK11ASyncObject7IsValidEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZNK11ASyncObject7IsValidEv:
  26              	.LFB111:
  27              		.file 1 "../FreeRTOS_EC/Source/ASyncObject.h"
   1:../FreeRTOS_EC/Source/ASyncObject.h **** /**
   2:../FreeRTOS_EC/Source/ASyncObject.h ****  * @file   ASyncObject.h
   3:../FreeRTOS_EC/Source/ASyncObject.h ****  * @class  ASyncObject
   4:../FreeRTOS_EC/Source/ASyncObject.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/ASyncObject.h ****  *
   6:../FreeRTOS_EC/Source/ASyncObject.h ****  * Abstract base class for all task synchronization object.
   7:../FreeRTOS_EC/Source/ASyncObject.h ****  *
   8:../FreeRTOS_EC/Source/ASyncObject.h ****  * @date   Jul 13, 2010
   9:../FreeRTOS_EC/Source/ASyncObject.h ****  * @author Stefano Oliveri (STF12.net)
  10:../FreeRTOS_EC/Source/ASyncObject.h ****  *         E-Mail: software@stf12.net
  11:../FreeRTOS_EC/Source/ASyncObject.h ****  */
  12:../FreeRTOS_EC/Source/ASyncObject.h **** 
  13:../FreeRTOS_EC/Source/ASyncObject.h **** #ifndef ASEMAPHORE_H_
  14:../FreeRTOS_EC/Source/ASyncObject.h **** #define ASEMAPHORE_H_
  15:../FreeRTOS_EC/Source/ASyncObject.h **** 
  16:../FreeRTOS_EC/Source/ASyncObject.h **** #include "FreeRTOS.h"
  17:../FreeRTOS_EC/Source/ASyncObject.h **** #include "semphr.h"
  18:../FreeRTOS_EC/Source/ASyncObject.h **** #include "IFreeRTOSProtocol.h"
  19:../FreeRTOS_EC/Source/ASyncObject.h **** 
  20:../FreeRTOS_EC/Source/ASyncObject.h **** class ASyncObject: public IFreeRTOSObj {
  21:../FreeRTOS_EC/Source/ASyncObject.h **** protected:
  22:../FreeRTOS_EC/Source/ASyncObject.h ****     xSemaphoreHandle m_handleSemaphore;
  23:../FreeRTOS_EC/Source/ASyncObject.h **** 
  24:../FreeRTOS_EC/Source/ASyncObject.h **** public:
  25:../FreeRTOS_EC/Source/ASyncObject.h **** 	ASyncObject();
  26:../FreeRTOS_EC/Source/ASyncObject.h **** 	virtual ~ASyncObject();
  27:../FreeRTOS_EC/Source/ASyncObject.h **** 
  28:../FreeRTOS_EC/Source/ASyncObject.h **** 	inline operator xSemaphoreHandle() const { return m_handleSemaphore; }
  29:../FreeRTOS_EC/Source/ASyncObject.h **** 
  30:../FreeRTOS_EC/Source/ASyncObject.h **** 	void Delete();
  31:../FreeRTOS_EC/Source/ASyncObject.h **** 	inline bool IsValid()const;
  32:../FreeRTOS_EC/Source/ASyncObject.h **** 	void Attach(xGenericHandle handle);
  33:../FreeRTOS_EC/Source/ASyncObject.h **** 	inline xGenericHandle Detach();
  34:../FreeRTOS_EC/Source/ASyncObject.h **** 
  35:../FreeRTOS_EC/Source/ASyncObject.h **** 	virtual portBASE_TYPE Take(portTickType xBlockTime) =0;
  36:../FreeRTOS_EC/Source/ASyncObject.h **** 	virtual portBASE_TYPE Give() =0;
  37:../FreeRTOS_EC/Source/ASyncObject.h **** };
  38:../FreeRTOS_EC/Source/ASyncObject.h **** 
  39:../FreeRTOS_EC/Source/ASyncObject.h **** // inline method
  40:../FreeRTOS_EC/Source/ASyncObject.h **** 
  41:../FreeRTOS_EC/Source/ASyncObject.h **** inline
  42:../FreeRTOS_EC/Source/ASyncObject.h **** bool ASyncObject::IsValid() const {
  28              		.loc 1 42 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  43:../FreeRTOS_EC/Source/ASyncObject.h **** 	return m_handleSemaphore != NULL;
  44              		.loc 1 43 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 5B68     		ldr	r3, [r3, #4]
  47 000c 002B     		cmp	r3, #0
  48 000e 0CBF     		ite	eq
  49 0010 0023     		moveq	r3, #0
  50 0012 0123     		movne	r3, #1
  51 0014 DBB2     		uxtb	r3, r3
  44:../FreeRTOS_EC/Source/ASyncObject.h **** }
  52              		.loc 1 44 0
  53 0016 1846     		mov	r0, r3
  54 0018 07F10C07 		add	r7, r7, #12
  55 001c BD46     		mov	sp, r7
  56 001e 80BC     		pop	{r7}
  57 0020 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE111:
  61 0022 00BF     		.section	.text._ZN11ASyncObject6DetachEv,"axG",%progbits,_ZN11ASyncObject6DetachEv,comdat
  62              		.align	2
  63              		.weak	_ZN11ASyncObject6DetachEv
  64              		.thumb
  65              		.thumb_func
  67              	_ZN11ASyncObject6DetachEv:
  68              	.LFB112:
  45:../FreeRTOS_EC/Source/ASyncObject.h **** 
  46:../FreeRTOS_EC/Source/ASyncObject.h **** inline
  47:../FreeRTOS_EC/Source/ASyncObject.h **** xGenericHandle ASyncObject::Detach() {
  69              		.loc 1 47 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 16
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74 0000 80B4     		push	{r7}
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 7, -4
  78 0002 85B0     		sub	sp, sp, #20
  79              	.LCFI4:
  80              		.cfi_def_cfa_offset 24
  81 0004 00AF     		add	r7, sp, #0
  82              	.LCFI5:
  83              		.cfi_def_cfa_register 7
  84 0006 7860     		str	r0, [r7, #4]
  85              	.LBB2:
  48:../FreeRTOS_EC/Source/ASyncObject.h **** 	xSemaphoreHandle res = m_handleSemaphore;
  86              		.loc 1 48 0
  87 0008 7B68     		ldr	r3, [r7, #4]
  88 000a 5B68     		ldr	r3, [r3, #4]
  89 000c FB60     		str	r3, [r7, #12]
  49:../FreeRTOS_EC/Source/ASyncObject.h **** 	m_handleSemaphore = NULL;
  90              		.loc 1 49 0
  91 000e 7B68     		ldr	r3, [r7, #4]
  92 0010 4FF00002 		mov	r2, #0
  93 0014 5A60     		str	r2, [r3, #4]
  50:../FreeRTOS_EC/Source/ASyncObject.h **** 	return res;
  94              		.loc 1 50 0
  95 0016 FB68     		ldr	r3, [r7, #12]
  96              	.LBE2:
  51:../FreeRTOS_EC/Source/ASyncObject.h **** }
  97              		.loc 1 51 0
  98 0018 1846     		mov	r0, r3
  99 001a 07F11407 		add	r7, r7, #20
 100 001e BD46     		mov	sp, r7
 101 0020 80BC     		pop	{r7}
 102 0022 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE112:
 106              		.section	.text._ZN15CRecursiveMutex4TakeEm,"axG",%progbits,_ZN15CRecursiveMutex4TakeEm,comdat
 107              		.align	2
 108              		.weak	_ZN15CRecursiveMutex4TakeEm
 109              		.thumb
 110              		.thumb_func
 112              	_ZN15CRecursiveMutex4TakeEm:
 113              	.LFB113:
 114              		.file 2 "../FreeRTOS_EC/Source/CRecursiveMutex.h"
   1:../FreeRTOS_EC/Source/CRecursiveMutex.h **** /**
   2:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * @file CRecursiveMutex.h
   3:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * @class CRecursiveMutex
   4:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  *
   6:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * The CRecursiveMutex class wraps a native FreeRTOS recursive mutex handle (xSemaphoreHandle).
   7:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * To create a recursive mutex instance an object of this class and then call its CRecursiveMutex::
   8:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * like showed in the following sample:
   9:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * \code
  10:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * CRecursiveMutex g_aRecursiveMutex // global mutex declaration.
  11:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  *
  12:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * void taskControlFunc(void *pParams)
  13:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * {
  14:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * 	g_aRecursiveMutex.Create();
  15:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  *
  16:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * 	for (;;) {
  17:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * 		while (g_aRecursiveMutex.Take(portMAX_DELAY) != pdTRUE) {
  18:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * 		// do something
  19:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * 		}
  20:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * }
  21:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * \endcode
  22:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  *
  23:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * \sa <a href="http://www.freertos.org/Inter-Task-Communication.html#Recursive">recursive mutex do
  24:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  *
  25:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * @date Jul 14, 2010
  26:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  * @author Stefano Oliveri (STF12.net)
  27:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  *         E-Mail: software@stf12.net
  28:../FreeRTOS_EC/Source/CRecursiveMutex.h ****  */
  29:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  30:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  31:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #ifndef CRECURSIVEMUTEX_H_
  32:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #define CRECURSIVEMUTEX_H_
  33:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  34:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #include <assert.h>
  35:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #include "ASyncObject.h"
  36:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  37:../FreeRTOS_EC/Source/CRecursiveMutex.h **** class CRecursiveMutex: public ASyncObject {
  38:../FreeRTOS_EC/Source/CRecursiveMutex.h **** public:
  39:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	/**
  40:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 * Default constructor. It initializes the object without attaching it to a native FreeRTOS handle
  41:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 * Call the Create method to allocate a mutex handle and attach it to the object.
  42:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 */
  43:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	CRecursiveMutex();
  44:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  45:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	/**
  46:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 * Create a recursive mutex instance and attach it to a valid handle.
  47:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 * @param handleSemaphore a valid mutex handle.
  48:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 */
  49:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	CRecursiveMutex(xSemaphoreHandle handleSemaphore);
  50:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  51:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	/**
  52:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 * Delete the native FreeRTOS recursive mutex.
  53:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 */
  54:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	virtual ~CRecursiveMutex();
  55:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  56:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	/**
  57:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 *
  58:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 * @return true if the mutex was created with success, false otherwise.
  59:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 * \sa <a href="http://www.freertos.org/xSemaphoreCreateRecursiveMutex.html">xSemaphoreCreateRecur
  60:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 */
  61:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	bool Create();
  62:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  63:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	/**
  64:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 * \sa <a href="http://www.freertos.org/xSemaphoreTakeRecursive.html">xSemaphoreTakeRecursive</a> 
  65:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 */
  66:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	inline portBASE_TYPE Take(portTickType xBlockTime);
  67:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  68:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	/**
  69:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 * \sa <a href="http://www.freertos.org/xSemaphoreGiveRecursive.html">xSemaphoreGiveRecursive</a> 
  70:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	 */
  71:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	inline portBASE_TYPE Give();
  72:../FreeRTOS_EC/Source/CRecursiveMutex.h **** };
  73:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  74:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  75:../FreeRTOS_EC/Source/CRecursiveMutex.h **** // inline methods implementation
  76:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  77:../FreeRTOS_EC/Source/CRecursiveMutex.h **** inline
  78:../FreeRTOS_EC/Source/CRecursiveMutex.h **** portBASE_TYPE CRecursiveMutex::Take(portTickType xBlockTime) {
 115              		.loc 2 78 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0000 80B4     		push	{r7}
 121              	.LCFI6:
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 0002 83B0     		sub	sp, sp, #12
 125              	.LCFI7:
 126              		.cfi_def_cfa_offset 16
 127 0004 00AF     		add	r7, sp, #0
 128              	.LCFI8:
 129              		.cfi_def_cfa_register 7
 130 0006 7860     		str	r0, [r7, #4]
 131 0008 3960     		str	r1, [r7, #0]
  79:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #if (configUSE_RECURSIVE_MUTEXES == 1)
  80:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	assert(IsValid());
  81:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  82:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	return xSemaphoreTakeRecursive(m_handleSemaphore, xBlockTime);
  83:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #else
  84:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	return  pdFALSE;
 132              		.loc 2 84 0
 133 000a 4FF00003 		mov	r3, #0
  85:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #endif
  86:../FreeRTOS_EC/Source/CRecursiveMutex.h **** }
 134              		.loc 2 86 0
 135 000e 1846     		mov	r0, r3
 136 0010 07F10C07 		add	r7, r7, #12
 137 0014 BD46     		mov	sp, r7
 138 0016 80BC     		pop	{r7}
 139 0018 7047     		bx	lr
 140              		.cfi_endproc
 141              	.LFE113:
 143 001a 00BF     		.section	.text._ZN15CRecursiveMutex4GiveEv,"axG",%progbits,_ZN15CRecursiveMutex4GiveEv,comdat
 144              		.align	2
 145              		.weak	_ZN15CRecursiveMutex4GiveEv
 146              		.thumb
 147              		.thumb_func
 149              	_ZN15CRecursiveMutex4GiveEv:
 150              	.LFB114:
  87:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  88:../FreeRTOS_EC/Source/CRecursiveMutex.h **** inline
  89:../FreeRTOS_EC/Source/CRecursiveMutex.h **** portBASE_TYPE CRecursiveMutex::Give() {
 151              		.loc 2 89 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 8
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156 0000 80B4     		push	{r7}
 157              	.LCFI9:
 158              		.cfi_def_cfa_offset 4
 159              		.cfi_offset 7, -4
 160 0002 83B0     		sub	sp, sp, #12
 161              	.LCFI10:
 162              		.cfi_def_cfa_offset 16
 163 0004 00AF     		add	r7, sp, #0
 164              	.LCFI11:
 165              		.cfi_def_cfa_register 7
 166 0006 7860     		str	r0, [r7, #4]
  90:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #if (configUSE_RECURSIVE_MUTEXES == 1)
  91:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	assert(IsValid());
  92:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 
  93:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	return xSemaphoreGiveRecursive(m_handleSemaphore);
  94:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #else
  95:../FreeRTOS_EC/Source/CRecursiveMutex.h **** 	return  pdFALSE;
 167              		.loc 2 95 0
 168 0008 4FF00003 		mov	r3, #0
  96:../FreeRTOS_EC/Source/CRecursiveMutex.h **** #endif
  97:../FreeRTOS_EC/Source/CRecursiveMutex.h **** }
 169              		.loc 2 97 0
 170 000c 1846     		mov	r0, r3
 171 000e 07F10C07 		add	r7, r7, #12
 172 0012 BD46     		mov	sp, r7
 173 0014 80BC     		pop	{r7}
 174 0016 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE114:
 178              		.text
 179              		.align	2
 180              		.global	_ZN15CRecursiveMutexC2Ev
 181              		.thumb
 182              		.thumb_func
 184              	_ZN15CRecursiveMutexC2Ev:
 185              	.LFB116:
 186              		.file 3 "../FreeRTOS_EC/Source/CRecursiveMutex.cpp"
   1:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** /**
   2:../FreeRTOS_EC/Source/CRecursiveMutex.cpp ****  * CRecursiveMutex.cpp
   3:../FreeRTOS_EC/Source/CRecursiveMutex.cpp ****  *
   4:../FreeRTOS_EC/Source/CRecursiveMutex.cpp ****  *  Created on: Jul 14, 2010
   5:../FreeRTOS_EC/Source/CRecursiveMutex.cpp ****  *      Author: Stefano Oliveri (STF12.net)
   6:../FreeRTOS_EC/Source/CRecursiveMutex.cpp ****  *      E-Mail: software@stf12.net
   7:../FreeRTOS_EC/Source/CRecursiveMutex.cpp ****  */
   8:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 
   9:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** #include "CRecursiveMutex.h"
  10:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 
  11:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** CRecursiveMutex::CRecursiveMutex() {
 187              		.loc 3 11 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 8
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}
 192              	.LCFI12:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 14, -4
 195              		.cfi_offset 7, -8
 196 0002 82B0     		sub	sp, sp, #8
 197              	.LCFI13:
 198              		.cfi_def_cfa_offset 16
 199 0004 00AF     		add	r7, sp, #0
 200              	.LCFI14:
 201              		.cfi_def_cfa_register 7
 202 0006 7860     		str	r0, [r7, #4]
 203              	.LBB3:
 204              		.loc 3 11 0
 205 0008 7B68     		ldr	r3, [r7, #4]
 206 000a 1846     		mov	r0, r3
 207 000c FFF7FEFF 		bl	_ZN11ASyncObjectC2Ev
 208 0010 7B68     		ldr	r3, [r7, #4]
 209 0012 044A     		ldr	r2, .L7
 210 0014 1A60     		str	r2, [r3, #0]
 211              	.LBE3:
  12:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 	// TODO Auto-generated constructor stub
  13:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 
  14:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** }
 212              		.loc 3 14 0
 213 0016 7B68     		ldr	r3, [r7, #4]
 214 0018 1846     		mov	r0, r3
 215 001a 07F10807 		add	r7, r7, #8
 216 001e BD46     		mov	sp, r7
 217 0020 80BD     		pop	{r7, pc}
 218              	.L8:
 219 0022 00BF     		.align	2
 220              	.L7:
 221 0024 08000000 		.word	_ZTV15CRecursiveMutex+8
 222              		.cfi_endproc
 223              	.LFE116:
 225              		.align	2
 226              		.global	_ZN15CRecursiveMutexC2EPv
 227              		.thumb
 228              		.thumb_func
 230              	_ZN15CRecursiveMutexC2EPv:
 231              	.LFB119:
  15:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 
  16:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** CRecursiveMutex::CRecursiveMutex(xSemaphoreHandle handleSemaphore) {
 232              		.loc 3 16 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 8
 235              		@ frame_needed = 1, uses_anonymous_args = 0
 236 0028 80B5     		push	{r7, lr}
 237              	.LCFI15:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 14, -4
 240              		.cfi_offset 7, -8
 241 002a 82B0     		sub	sp, sp, #8
 242              	.LCFI16:
 243              		.cfi_def_cfa_offset 16
 244 002c 00AF     		add	r7, sp, #0
 245              	.LCFI17:
 246              		.cfi_def_cfa_register 7
 247 002e 7860     		str	r0, [r7, #4]
 248 0030 3960     		str	r1, [r7, #0]
 249              	.LBB4:
 250              		.loc 3 16 0
 251 0032 7B68     		ldr	r3, [r7, #4]
 252 0034 1846     		mov	r0, r3
 253 0036 FFF7FEFF 		bl	_ZN11ASyncObjectC2Ev
 254 003a 7B68     		ldr	r3, [r7, #4]
 255 003c 064A     		ldr	r2, .L11
 256 003e 1A60     		str	r2, [r3, #0]
  17:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 	Attach(handleSemaphore);
 257              		.loc 3 17 0
 258 0040 7B68     		ldr	r3, [r7, #4]
 259 0042 1846     		mov	r0, r3
 260 0044 3968     		ldr	r1, [r7, #0]
 261 0046 FFF7FEFF 		bl	_ZN11ASyncObject6AttachEPv
 262              	.LBE4:
  18:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** }
 263              		.loc 3 18 0
 264 004a 7B68     		ldr	r3, [r7, #4]
 265 004c 1846     		mov	r0, r3
 266 004e 07F10807 		add	r7, r7, #8
 267 0052 BD46     		mov	sp, r7
 268 0054 80BD     		pop	{r7, pc}
 269              	.L12:
 270 0056 00BF     		.align	2
 271              	.L11:
 272 0058 08000000 		.word	_ZTV15CRecursiveMutex+8
 273              		.cfi_endproc
 274              	.LFE119:
 276              		.align	2
 277              		.global	_ZN15CRecursiveMutexD2Ev
 278              		.thumb
 279              		.thumb_func
 281              	_ZN15CRecursiveMutexD2Ev:
 282              	.LFB122:
  19:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 
  20:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** CRecursiveMutex::~CRecursiveMutex() {
 283              		.loc 3 20 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 8
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287 005c 80B5     		push	{r7, lr}
 288              	.LCFI18:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 14, -4
 291              		.cfi_offset 7, -8
 292 005e 82B0     		sub	sp, sp, #8
 293              	.LCFI19:
 294              		.cfi_def_cfa_offset 16
 295 0060 00AF     		add	r7, sp, #0
 296              	.LCFI20:
 297              		.cfi_def_cfa_register 7
 298 0062 7860     		str	r0, [r7, #4]
 299              	.LBB5:
 300              		.loc 3 20 0
 301 0064 7B68     		ldr	r3, [r7, #4]
 302 0066 0A4A     		ldr	r2, .L16
 303 0068 1A60     		str	r2, [r3, #0]
  21:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 	// TODO Auto-generated destructor stub
  22:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** }
 304              		.loc 3 22 0
 305 006a 7868     		ldr	r0, [r7, #4]
 306 006c FFF7FEFF 		bl	_ZN11ASyncObjectD2Ev
 307              	.LBE5:
 308 0070 4FF00003 		mov	r3, #0
 309 0074 03F00103 		and	r3, r3, #1
 310 0078 DBB2     		uxtb	r3, r3
 311 007a 002B     		cmp	r3, #0
 312 007c 02D0     		beq	.L15
 313              		.loc 3 22 0 is_stmt 0 discriminator 2
 314 007e 7868     		ldr	r0, [r7, #4]
 315 0080 FFF7FEFF 		bl	_ZdlPv
 316              	.L15:
 317              		.loc 3 22 0 discriminator 3
 318 0084 7B68     		ldr	r3, [r7, #4]
 319 0086 1846     		mov	r0, r3
 320 0088 07F10807 		add	r7, r7, #8
 321 008c BD46     		mov	sp, r7
 322 008e 80BD     		pop	{r7, pc}
 323              	.L17:
 324              		.align	2
 325              	.L16:
 326 0090 08000000 		.word	_ZTV15CRecursiveMutex+8
 327              		.cfi_endproc
 328              	.LFE122:
 330              		.align	2
 331              		.global	_ZN15CRecursiveMutexD0Ev
 332              		.thumb
 333              		.thumb_func
 335              	_ZN15CRecursiveMutexD0Ev:
 336              	.LFB124:
  20:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** CRecursiveMutex::~CRecursiveMutex() {
 337              		.loc 3 20 0 is_stmt 1
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 8
 340              		@ frame_needed = 1, uses_anonymous_args = 0
 341 0094 80B5     		push	{r7, lr}
 342              	.LCFI21:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 14, -4
 345              		.cfi_offset 7, -8
 346 0096 82B0     		sub	sp, sp, #8
 347              	.LCFI22:
 348              		.cfi_def_cfa_offset 16
 349 0098 00AF     		add	r7, sp, #0
 350              	.LCFI23:
 351              		.cfi_def_cfa_register 7
 352 009a 7860     		str	r0, [r7, #4]
 353              		.loc 3 22 0
 354 009c 7868     		ldr	r0, [r7, #4]
 355 009e FFF7FEFF 		bl	_ZN15CRecursiveMutexD1Ev
 356 00a2 7868     		ldr	r0, [r7, #4]
 357 00a4 FFF7FEFF 		bl	_ZdlPv
 358 00a8 7B68     		ldr	r3, [r7, #4]
 359 00aa 1846     		mov	r0, r3
 360 00ac 07F10807 		add	r7, r7, #8
 361 00b0 BD46     		mov	sp, r7
 362 00b2 80BD     		pop	{r7, pc}
 363              		.cfi_endproc
 364              	.LFE124:
 366              		.align	2
 367              		.global	_ZN15CRecursiveMutex6CreateEv
 368              		.thumb
 369              		.thumb_func
 371              	_ZN15CRecursiveMutex6CreateEv:
 372              	.LFB125:
  23:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 
  24:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** bool CRecursiveMutex::Create() {
 373              		.loc 3 24 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 8
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 00b4 80B5     		push	{r7, lr}
 378              	.LCFI24:
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 14, -4
 381              		.cfi_offset 7, -8
 382 00b6 82B0     		sub	sp, sp, #8
 383              	.LCFI25:
 384              		.cfi_def_cfa_offset 16
 385 00b8 00AF     		add	r7, sp, #0
 386              	.LCFI26:
 387              		.cfi_def_cfa_register 7
 388 00ba 7860     		str	r0, [r7, #4]
  25:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** #if (configUSE_RECURSIVE_MUTEXES == 1 && configUSE_MUTEXES ==1)
  26:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 	xSemaphoreHandle handle = xSemaphoreCreateRecursiveMutex();
  27:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 	if (handle != NULL)
  28:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 		Attach(handle);
  29:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** #endif
  30:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 
  31:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** 	return IsValid();
 389              		.loc 3 31 0
 390 00bc 7B68     		ldr	r3, [r7, #4]
 391 00be 1B68     		ldr	r3, [r3, #0]
 392 00c0 1B68     		ldr	r3, [r3, #0]
 393 00c2 7A68     		ldr	r2, [r7, #4]
 394 00c4 1046     		mov	r0, r2
 395 00c6 9847     		blx	r3
 396 00c8 0346     		mov	r3, r0
  32:../FreeRTOS_EC/Source/CRecursiveMutex.cpp **** }
 397              		.loc 3 32 0
 398 00ca 1846     		mov	r0, r3
 399 00cc 07F10807 		add	r7, r7, #8
 400 00d0 BD46     		mov	sp, r7
 401 00d2 80BD     		pop	{r7, pc}
 402              		.cfi_endproc
 403              	.LFE125:
 405              		.global	_ZTV15CRecursiveMutex
 406              		.section	.rodata._ZTV15CRecursiveMutex,"a",%progbits
 407              		.align	3
 410              	_ZTV15CRecursiveMutex:
 411 0000 00000000 		.word	0
 412 0004 00000000 		.word	0
 413 0008 00000000 		.word	_ZNK11ASyncObject7IsValidEv
 414 000c 00000000 		.word	_ZN11ASyncObject6AttachEPv
 415 0010 00000000 		.word	_ZN11ASyncObject6DetachEv
 416 0014 00000000 		.word	_ZN15CRecursiveMutexD1Ev
 417 0018 00000000 		.word	_ZN15CRecursiveMutexD0Ev
 418 001c 00000000 		.word	_ZN15CRecursiveMutex4TakeEm
 419 0020 00000000 		.word	_ZN15CRecursiveMutex4GiveEv
 420              		.global	_ZN15CRecursiveMutexC1Ev
 421              		.thumb_set _ZN15CRecursiveMutexC1Ev,_ZN15CRecursiveMutexC2Ev
 422              		.global	_ZN15CRecursiveMutexC1EPv
 423              		.thumb_set _ZN15CRecursiveMutexC1EPv,_ZN15CRecursiveMutexC2EPv
 424              		.global	_ZN15CRecursiveMutexD1Ev
 425              		.thumb_set _ZN15CRecursiveMutexD1Ev,_ZN15CRecursiveMutexD2Ev
 426 0024 00000000 		.text
 427              	.Letext0:
 428              		.file 4 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 429              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source/portable
 430              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/queue.h"
 431              		.file 7 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/semphr.h"
 432              		.file 8 "../FreeRTOS_EC/Source/IFreeRTOSProtocol.h"
 433              		.file 9 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CRecursiveMutex.cpp
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:20     .text._ZNK11ASyncObject7IsValidEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:25     .text._ZNK11ASyncObject7IsValidEv:00000000 _ZNK11ASyncObject7IsValidEv
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:62     .text._ZN11ASyncObject6DetachEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:67     .text._ZN11ASyncObject6DetachEv:00000000 _ZN11ASyncObject6DetachEv
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:107    .text._ZN15CRecursiveMutex4TakeEm:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:112    .text._ZN15CRecursiveMutex4TakeEm:00000000 _ZN15CRecursiveMutex4TakeEm
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:144    .text._ZN15CRecursiveMutex4GiveEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:149    .text._ZN15CRecursiveMutex4GiveEv:00000000 _ZN15CRecursiveMutex4GiveEv
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:179    .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:184    .text:00000000 _ZN15CRecursiveMutexC2Ev
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:221    .text:00000024 $d
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:410    .rodata._ZTV15CRecursiveMutex:00000000 _ZTV15CRecursiveMutex
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:225    .text:00000028 $t
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:230    .text:00000028 _ZN15CRecursiveMutexC2EPv
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:272    .text:00000058 $d
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:276    .text:0000005c $t
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:281    .text:0000005c _ZN15CRecursiveMutexD2Ev
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:326    .text:00000090 $d
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:330    .text:00000094 $t
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:335    .text:00000094 _ZN15CRecursiveMutexD0Ev
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:281    .text:0000005c _ZN15CRecursiveMutexD1Ev
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:371    .text:000000b4 _ZN15CRecursiveMutex6CreateEv
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:407    .rodata._ZTV15CRecursiveMutex:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:184    .text:00000000 _ZN15CRecursiveMutexC1Ev
C:\Users\Alex\AppData\Local\Temp\ccJYOK3K.s:230    .text:00000028 _ZN15CRecursiveMutexC1EPv
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_ZN11ASyncObjectC2Ev
_ZN11ASyncObject6AttachEPv
_ZN11ASyncObjectD2Ev
_ZdlPv
