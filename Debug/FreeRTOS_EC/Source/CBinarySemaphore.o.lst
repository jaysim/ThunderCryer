   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"CBinarySemaphore.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZNK11ASyncObject7IsValidEv,"axG",%progbits,_ZNK11ASyncObject7IsValidEv,comdat
  19              		.align	2
  20              		.weak	_ZNK11ASyncObject7IsValidEv
  21              		.thumb
  22              		.thumb_func
  24              	_ZNK11ASyncObject7IsValidEv:
  25              	.LFB111:
  26              		.file 1 "../FreeRTOS_EC/Source/ASyncObject.h"
   1:../FreeRTOS_EC/Source/ASyncObject.h **** /**
   2:../FreeRTOS_EC/Source/ASyncObject.h ****  * @file   ASyncObject.h
   3:../FreeRTOS_EC/Source/ASyncObject.h ****  * @class  ASyncObject
   4:../FreeRTOS_EC/Source/ASyncObject.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/ASyncObject.h ****  *
   6:../FreeRTOS_EC/Source/ASyncObject.h ****  * Abstract base class for all task synchronization object.
   7:../FreeRTOS_EC/Source/ASyncObject.h ****  *
   8:../FreeRTOS_EC/Source/ASyncObject.h ****  * @date   Jul 13, 2010
   9:../FreeRTOS_EC/Source/ASyncObject.h ****  * @author Stefano Oliveri (STF12.net)
  10:../FreeRTOS_EC/Source/ASyncObject.h ****  *         E-Mail: software@stf12.net
  11:../FreeRTOS_EC/Source/ASyncObject.h ****  */
  12:../FreeRTOS_EC/Source/ASyncObject.h **** 
  13:../FreeRTOS_EC/Source/ASyncObject.h **** #ifndef ASEMAPHORE_H_
  14:../FreeRTOS_EC/Source/ASyncObject.h **** #define ASEMAPHORE_H_
  15:../FreeRTOS_EC/Source/ASyncObject.h **** 
  16:../FreeRTOS_EC/Source/ASyncObject.h **** #include "FreeRTOS.h"
  17:../FreeRTOS_EC/Source/ASyncObject.h **** #include "semphr.h"
  18:../FreeRTOS_EC/Source/ASyncObject.h **** #include "IFreeRTOSProtocol.h"
  19:../FreeRTOS_EC/Source/ASyncObject.h **** 
  20:../FreeRTOS_EC/Source/ASyncObject.h **** class ASyncObject: public IFreeRTOSObj {
  21:../FreeRTOS_EC/Source/ASyncObject.h **** protected:
  22:../FreeRTOS_EC/Source/ASyncObject.h ****     xSemaphoreHandle m_handleSemaphore;
  23:../FreeRTOS_EC/Source/ASyncObject.h **** 
  24:../FreeRTOS_EC/Source/ASyncObject.h **** public:
  25:../FreeRTOS_EC/Source/ASyncObject.h **** 	ASyncObject();
  26:../FreeRTOS_EC/Source/ASyncObject.h **** 	virtual ~ASyncObject();
  27:../FreeRTOS_EC/Source/ASyncObject.h **** 
  28:../FreeRTOS_EC/Source/ASyncObject.h **** 	inline operator xSemaphoreHandle() const { return m_handleSemaphore; }
  29:../FreeRTOS_EC/Source/ASyncObject.h **** 
  30:../FreeRTOS_EC/Source/ASyncObject.h **** 	void Delete();
  31:../FreeRTOS_EC/Source/ASyncObject.h **** 	inline bool IsValid()const;
  32:../FreeRTOS_EC/Source/ASyncObject.h **** 	void Attach(xGenericHandle handle);
  33:../FreeRTOS_EC/Source/ASyncObject.h **** 	inline xGenericHandle Detach();
  34:../FreeRTOS_EC/Source/ASyncObject.h **** 
  35:../FreeRTOS_EC/Source/ASyncObject.h **** 	virtual portBASE_TYPE Take(portTickType xBlockTime) =0;
  36:../FreeRTOS_EC/Source/ASyncObject.h **** 	virtual portBASE_TYPE Give() =0;
  37:../FreeRTOS_EC/Source/ASyncObject.h **** };
  38:../FreeRTOS_EC/Source/ASyncObject.h **** 
  39:../FreeRTOS_EC/Source/ASyncObject.h **** // inline method
  40:../FreeRTOS_EC/Source/ASyncObject.h **** 
  41:../FreeRTOS_EC/Source/ASyncObject.h **** inline
  42:../FreeRTOS_EC/Source/ASyncObject.h **** bool ASyncObject::IsValid() const {
  27              		.loc 1 42 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  43:../FreeRTOS_EC/Source/ASyncObject.h **** 	return m_handleSemaphore != NULL;
  43              		.loc 1 43 0
  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 5B68     		ldr	r3, [r3, #4]
  46 000c 002B     		cmp	r3, #0
  47 000e 0CBF     		ite	eq
  48 0010 0023     		moveq	r3, #0
  49 0012 0123     		movne	r3, #1
  50 0014 DBB2     		uxtb	r3, r3
  44:../FreeRTOS_EC/Source/ASyncObject.h **** }
  51              		.loc 1 44 0
  52 0016 1846     		mov	r0, r3
  53 0018 07F10C07 		add	r7, r7, #12
  54 001c BD46     		mov	sp, r7
  55 001e 80BC     		pop	{r7}
  56 0020 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE111:
  60 0022 00BF     		.section	.text._ZN11ASyncObject6DetachEv,"axG",%progbits,_ZN11ASyncObject6DetachEv,comdat
  61              		.align	2
  62              		.weak	_ZN11ASyncObject6DetachEv
  63              		.thumb
  64              		.thumb_func
  66              	_ZN11ASyncObject6DetachEv:
  67              	.LFB112:
  45:../FreeRTOS_EC/Source/ASyncObject.h **** 
  46:../FreeRTOS_EC/Source/ASyncObject.h **** inline
  47:../FreeRTOS_EC/Source/ASyncObject.h **** xGenericHandle ASyncObject::Detach() {
  68              		.loc 1 47 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 16
  71              		@ frame_needed = 1, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73 0000 80B4     		push	{r7}
  74              	.LCFI3:
  75              		.cfi_def_cfa_offset 4
  76              		.cfi_offset 7, -4
  77 0002 85B0     		sub	sp, sp, #20
  78              	.LCFI4:
  79              		.cfi_def_cfa_offset 24
  80 0004 00AF     		add	r7, sp, #0
  81              	.LCFI5:
  82              		.cfi_def_cfa_register 7
  83 0006 7860     		str	r0, [r7, #4]
  84              	.LBB2:
  48:../FreeRTOS_EC/Source/ASyncObject.h **** 	xSemaphoreHandle res = m_handleSemaphore;
  85              		.loc 1 48 0
  86 0008 7B68     		ldr	r3, [r7, #4]
  87 000a 5B68     		ldr	r3, [r3, #4]
  88 000c FB60     		str	r3, [r7, #12]
  49:../FreeRTOS_EC/Source/ASyncObject.h **** 	m_handleSemaphore = NULL;
  89              		.loc 1 49 0
  90 000e 7B68     		ldr	r3, [r7, #4]
  91 0010 4FF00002 		mov	r2, #0
  92 0014 5A60     		str	r2, [r3, #4]
  50:../FreeRTOS_EC/Source/ASyncObject.h **** 	return res;
  93              		.loc 1 50 0
  94 0016 FB68     		ldr	r3, [r7, #12]
  95              	.LBE2:
  51:../FreeRTOS_EC/Source/ASyncObject.h **** }
  96              		.loc 1 51 0
  97 0018 1846     		mov	r0, r3
  98 001a 07F11407 		add	r7, r7, #20
  99 001e BD46     		mov	sp, r7
 100 0020 80BC     		pop	{r7}
 101 0022 7047     		bx	lr
 102              		.cfi_endproc
 103              	.LFE112:
 105              		.section	.rodata
 106              		.align	2
 107              	.LC0:
 108 0000 2E2E2F46 		.ascii	"../FreeRTOS_EC/Source/CBinarySemaphore.h\000"
 108      72656552 
 108      544F535F 
 108      45432F53 
 108      6F757263 
 109 0029 000000   		.align	2
 110              	.LC1:
 111 002c 49735661 		.ascii	"IsValid()\000"
 111      6C696428 
 111      2900
 112 0036 0000     		.section	.text._ZN16CBinarySemaphore4TakeEm,"axG",%progbits,_ZN16CBinarySemaphore4TakeEm,comdat
 113              		.align	2
 114              		.weak	_ZN16CBinarySemaphore4TakeEm
 115              		.thumb
 116              		.thumb_func
 118              	_ZN16CBinarySemaphore4TakeEm:
 119              	.LFB113:
 120              		.file 2 "../FreeRTOS_EC/Source/CBinarySemaphore.h"
   1:../FreeRTOS_EC/Source/CBinarySemaphore.h **** /**
   2:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @file CBinarySemaphore.h
   3:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @class CBinarySemaphore
   4:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
   6:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * The CBinarySemaphore class wraps a native FreeRTOS binary semaphore handle (xSemaphoreHandle).
   7:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * To create a binary semaphore instance an object of this class and then call its CBinarySemaphore
   8:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * like showed in the following sample:
   9:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * \code
  10:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * CBinarySemaphore g_aSemaphore // global semaphore declaration.
  11:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
  12:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * void taskControlFunc(void *pParams) // a task control loop
  13:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * {
  14:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 	g_aSemaphore.Create();
  15:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
  16:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 	for (;;) {
  17:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 		while (g_aSemaphore.Take(portMAX_DELAY) != pdTRUE) {
  18:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 		// do something
  19:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 		}
  20:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * }
  21:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * \endcode
  22:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
  23:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * \sa <a href="http://www.freertos.org/Inter-Task-Communication.html#Binary">binary semaphore docu
  24:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  25:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
  26:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @date   Jul 13, 2010
  27:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @author Stefano Oliveri (STF12.net)
  28:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *         E-Mail: software@stf12.net
  29:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  */
  30:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  31:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  32:../FreeRTOS_EC/Source/CBinarySemaphore.h **** #ifndef CBINARYSEMAPHORE_H_
  33:../FreeRTOS_EC/Source/CBinarySemaphore.h **** #define CBINARYSEMAPHORE_H_
  34:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  35:../FreeRTOS_EC/Source/CBinarySemaphore.h **** #include <assert.h>
  36:../FreeRTOS_EC/Source/CBinarySemaphore.h **** #include "ASyncObject.h"
  37:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  38:../FreeRTOS_EC/Source/CBinarySemaphore.h **** class CBinarySemaphore: public ASyncObject {
  39:../FreeRTOS_EC/Source/CBinarySemaphore.h **** public:
  40:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  41:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  42:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Default constructor. It initializes the object without attaching it to a native FreeRTOS handle
  43:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Call the Create method to allocate a binary semaphore handle and attach it to the object.
  44:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  45:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	CBinarySemaphore();
  46:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  47:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  48:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Create a binary semaphore instance and attach it to a valid handle.
  49:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 *
  50:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * @param handleSemaphore a valid binary semaphore handle.
  51:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  52:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	CBinarySemaphore(xSemaphoreHandle handleSemaphore);
  53:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  54:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  55:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Destructor. It deletes the native FreeRTOS counting semaphore.
  56:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  57:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	virtual ~CBinarySemaphore();
  58:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  59:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  60:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Create a FreeRTOS binary semaphore and attach its handle to the receiver object.
  61:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 *
  62:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * @return true if the counting semaphore is created with success, false otherwise.
  63:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 *
  64:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * \sa <a href="http://www.freertos.org/a00121.html">vSemaphoreCreateBinary</a> FreeRTOS API funct
  65:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  66:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	bool Create();
  67:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  68:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  69:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * \sa <a href="http://www.freertos.org/a00122.html">xSemaphoreTake</a> FreeRTOS API function.
  70:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  71:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	inline portBASE_TYPE Take(portTickType xBlockTime);
  72:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  73:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  74:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * \sa <a href="http://www.freertos.org/a00123.html">xSemaphoreGive</a> FreeRTOS API function.
  75:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  76:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	inline portBASE_TYPE Give();
  77:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  78:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  79:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * \sa <a href="http://www.freertos.org/a00124.html">xSemaphoreGiveFromISR</a> FreeRTOS API functi
  80:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  81:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	inline portBASE_TYPE GiveFromISR(signed portBASE_TYPE *pxHigherPriorityTaskWoken);
  82:../FreeRTOS_EC/Source/CBinarySemaphore.h **** };
  83:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  84:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  85:../FreeRTOS_EC/Source/CBinarySemaphore.h **** // inline methods implementation
  86:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  87:../FreeRTOS_EC/Source/CBinarySemaphore.h **** inline
  88:../FreeRTOS_EC/Source/CBinarySemaphore.h **** portBASE_TYPE CBinarySemaphore::Take(portTickType xBlockTime) {
 121              		.loc 2 88 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 8
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125 0000 80B5     		push	{r7, lr}
 126              	.LCFI6:
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 14, -4
 129              		.cfi_offset 7, -8
 130 0002 82B0     		sub	sp, sp, #8
 131              	.LCFI7:
 132              		.cfi_def_cfa_offset 16
 133 0004 00AF     		add	r7, sp, #0
 134              	.LCFI8:
 135              		.cfi_def_cfa_register 7
 136 0006 7860     		str	r0, [r7, #4]
 137 0008 3960     		str	r1, [r7, #0]
 138              	.LBB3:
  89:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	assert(IsValid());
 139              		.loc 2 89 0
 140 000a 7B68     		ldr	r3, [r7, #4]
 141 000c 1B68     		ldr	r3, [r3, #0]
 142 000e 1B68     		ldr	r3, [r3, #0]
 143 0010 7A68     		ldr	r2, [r7, #4]
 144 0012 1046     		mov	r0, r2
 145 0014 9847     		blx	r3
 146 0016 0346     		mov	r3, r0
 147 0018 002B     		cmp	r3, #0
 148 001a 0FD1     		bne	.L4
 149              		.loc 2 89 0 is_stmt 0 discriminator 1
 150 001c 40F20000 		movw	r0, #:lower16:.LC0
 151 0020 C0F20000 		movt	r0, #:upper16:.LC0
 152 0024 4FF05901 		mov	r1, #89
 153 0028 40F20002 		movw	r2, #:lower16:_ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__
 154 002c C0F20002 		movt	r2, #:upper16:_ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__
 155 0030 40F20003 		movw	r3, #:lower16:.LC1
 156 0034 C0F20003 		movt	r3, #:upper16:.LC1
 157 0038 FFF7FEFF 		bl	__assert_func
 158              	.L4:
  90:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  91:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	return xSemaphoreTake(m_handleSemaphore, xBlockTime);
 159              		.loc 2 91 0 is_stmt 1
 160 003c 7B68     		ldr	r3, [r7, #4]
 161 003e 5B68     		ldr	r3, [r3, #4]
 162 0040 1846     		mov	r0, r3
 163 0042 4FF00001 		mov	r1, #0
 164 0046 3A68     		ldr	r2, [r7, #0]
 165 0048 4FF00003 		mov	r3, #0
 166 004c FFF7FEFF 		bl	xQueueGenericReceive
 167 0050 0346     		mov	r3, r0
 168              	.LBE3:
  92:../FreeRTOS_EC/Source/CBinarySemaphore.h **** }
 169              		.loc 2 92 0
 170 0052 1846     		mov	r0, r3
 171 0054 07F10807 		add	r7, r7, #8
 172 0058 BD46     		mov	sp, r7
 173 005a 80BD     		pop	{r7, pc}
 174              		.cfi_endproc
 175              	.LFE113:
 177              		.section	.text._ZN16CBinarySemaphore4GiveEv,"axG",%progbits,_ZN16CBinarySemaphore4GiveEv,comdat
 178              		.align	2
 179              		.weak	_ZN16CBinarySemaphore4GiveEv
 180              		.thumb
 181              		.thumb_func
 183              	_ZN16CBinarySemaphore4GiveEv:
 184              	.LFB114:
  93:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  94:../FreeRTOS_EC/Source/CBinarySemaphore.h **** inline
  95:../FreeRTOS_EC/Source/CBinarySemaphore.h **** portBASE_TYPE CBinarySemaphore::Give() {
 185              		.loc 2 95 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 8
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 80B5     		push	{r7, lr}
 190              	.LCFI9:
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 14, -4
 193              		.cfi_offset 7, -8
 194 0002 82B0     		sub	sp, sp, #8
 195              	.LCFI10:
 196              		.cfi_def_cfa_offset 16
 197 0004 00AF     		add	r7, sp, #0
 198              	.LCFI11:
 199              		.cfi_def_cfa_register 7
 200 0006 7860     		str	r0, [r7, #4]
 201              	.LBB4:
  96:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	assert(IsValid());
 202              		.loc 2 96 0
 203 0008 7B68     		ldr	r3, [r7, #4]
 204 000a 1B68     		ldr	r3, [r3, #0]
 205 000c 1B68     		ldr	r3, [r3, #0]
 206 000e 7A68     		ldr	r2, [r7, #4]
 207 0010 1046     		mov	r0, r2
 208 0012 9847     		blx	r3
 209 0014 0346     		mov	r3, r0
 210 0016 002B     		cmp	r3, #0
 211 0018 0FD1     		bne	.L6
 212              		.loc 2 96 0 is_stmt 0 discriminator 1
 213 001a 40F20000 		movw	r0, #:lower16:.LC0
 214 001e C0F20000 		movt	r0, #:upper16:.LC0
 215 0022 4FF06001 		mov	r1, #96
 216 0026 40F20002 		movw	r2, #:lower16:_ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__
 217 002a C0F20002 		movt	r2, #:upper16:_ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__
 218 002e 40F20003 		movw	r3, #:lower16:.LC1
 219 0032 C0F20003 		movt	r3, #:upper16:.LC1
 220 0036 FFF7FEFF 		bl	__assert_func
 221              	.L6:
  97:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  98:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	return xSemaphoreGive(m_handleSemaphore);
 222              		.loc 2 98 0 is_stmt 1
 223 003a 7B68     		ldr	r3, [r7, #4]
 224 003c 5B68     		ldr	r3, [r3, #4]
 225 003e 1846     		mov	r0, r3
 226 0040 4FF00001 		mov	r1, #0
 227 0044 4FF00002 		mov	r2, #0
 228 0048 4FF00003 		mov	r3, #0
 229 004c FFF7FEFF 		bl	xQueueGenericSend
 230 0050 0346     		mov	r3, r0
 231              	.LBE4:
  99:../FreeRTOS_EC/Source/CBinarySemaphore.h **** }
 232              		.loc 2 99 0
 233 0052 1846     		mov	r0, r3
 234 0054 07F10807 		add	r7, r7, #8
 235 0058 BD46     		mov	sp, r7
 236 005a 80BD     		pop	{r7, pc}
 237              		.cfi_endproc
 238              	.LFE114:
 240              		.text
 241              		.align	2
 242              		.global	_ZN16CBinarySemaphoreC2Ev
 243              		.thumb
 244              		.thumb_func
 246              	_ZN16CBinarySemaphoreC2Ev:
 247              	.LFB117:
 248              		.file 3 "../FreeRTOS_EC/Source/CBinarySemaphore.cpp"
   1:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** /**
   2:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  * CBinarySemaphore.cpp
   3:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  *
   4:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  *  Created on: Jul 13, 2010
   5:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  *      Author: Stefano Oliveri (STF12.net)
   6:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  *      E-Mail: software@stf12.net
   7:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  */
   8:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
   9:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** #include "CBinarySemaphore.h"
  10:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** #include <assert.h>
  11:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  12:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** CBinarySemaphore::CBinarySemaphore() {
 249              		.loc 3 12 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 8
 252              		@ frame_needed = 1, uses_anonymous_args = 0
 253 0000 80B5     		push	{r7, lr}
 254              	.LCFI12:
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 14, -4
 257              		.cfi_offset 7, -8
 258 0002 82B0     		sub	sp, sp, #8
 259              	.LCFI13:
 260              		.cfi_def_cfa_offset 16
 261 0004 00AF     		add	r7, sp, #0
 262              	.LCFI14:
 263              		.cfi_def_cfa_register 7
 264 0006 7860     		str	r0, [r7, #4]
 265              	.LBB5:
 266              		.loc 3 12 0
 267 0008 7B68     		ldr	r3, [r7, #4]
 268 000a 1846     		mov	r0, r3
 269 000c FFF7FEFF 		bl	_ZN11ASyncObjectC2Ev
 270 0010 7B68     		ldr	r3, [r7, #4]
 271 0012 044A     		ldr	r2, .L9
 272 0014 1A60     		str	r2, [r3, #0]
 273              	.LBE5:
  13:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	// TODO Auto-generated constructor stub
  14:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  15:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** }
 274              		.loc 3 15 0
 275 0016 7B68     		ldr	r3, [r7, #4]
 276 0018 1846     		mov	r0, r3
 277 001a 07F10807 		add	r7, r7, #8
 278 001e BD46     		mov	sp, r7
 279 0020 80BD     		pop	{r7, pc}
 280              	.L10:
 281 0022 00BF     		.align	2
 282              	.L9:
 283 0024 08000000 		.word	_ZTV16CBinarySemaphore+8
 284              		.cfi_endproc
 285              	.LFE117:
 287              		.align	2
 288              		.global	_ZN16CBinarySemaphoreD2Ev
 289              		.thumb
 290              		.thumb_func
 292              	_ZN16CBinarySemaphoreD2Ev:
 293              	.LFB120:
  16:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  17:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** CBinarySemaphore::~CBinarySemaphore() {
 294              		.loc 3 17 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 8
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298 0028 80B5     		push	{r7, lr}
 299              	.LCFI15:
 300              		.cfi_def_cfa_offset 8
 301              		.cfi_offset 14, -4
 302              		.cfi_offset 7, -8
 303 002a 82B0     		sub	sp, sp, #8
 304              	.LCFI16:
 305              		.cfi_def_cfa_offset 16
 306 002c 00AF     		add	r7, sp, #0
 307              	.LCFI17:
 308              		.cfi_def_cfa_register 7
 309 002e 7860     		str	r0, [r7, #4]
 310              	.LBB6:
 311              		.loc 3 17 0
 312 0030 7B68     		ldr	r3, [r7, #4]
 313 0032 0A4A     		ldr	r2, .L14
 314 0034 1A60     		str	r2, [r3, #0]
  18:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	// TODO Auto-generated destructor stub
  19:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** }
 315              		.loc 3 19 0
 316 0036 7868     		ldr	r0, [r7, #4]
 317 0038 FFF7FEFF 		bl	_ZN11ASyncObjectD2Ev
 318              	.LBE6:
 319 003c 4FF00003 		mov	r3, #0
 320 0040 03F00103 		and	r3, r3, #1
 321 0044 DBB2     		uxtb	r3, r3
 322 0046 002B     		cmp	r3, #0
 323 0048 02D0     		beq	.L13
 324              		.loc 3 19 0 is_stmt 0 discriminator 2
 325 004a 7868     		ldr	r0, [r7, #4]
 326 004c FFF7FEFF 		bl	_ZdlPv
 327              	.L13:
 328              		.loc 3 19 0 discriminator 3
 329 0050 7B68     		ldr	r3, [r7, #4]
 330 0052 1846     		mov	r0, r3
 331 0054 07F10807 		add	r7, r7, #8
 332 0058 BD46     		mov	sp, r7
 333 005a 80BD     		pop	{r7, pc}
 334              	.L15:
 335              		.align	2
 336              	.L14:
 337 005c 08000000 		.word	_ZTV16CBinarySemaphore+8
 338              		.cfi_endproc
 339              	.LFE120:
 341              		.align	2
 342              		.global	_ZN16CBinarySemaphoreD0Ev
 343              		.thumb
 344              		.thumb_func
 346              	_ZN16CBinarySemaphoreD0Ev:
 347              	.LFB122:
  17:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** CBinarySemaphore::~CBinarySemaphore() {
 348              		.loc 3 17 0 is_stmt 1
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352 0060 80B5     		push	{r7, lr}
 353              	.LCFI18:
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 14, -4
 356              		.cfi_offset 7, -8
 357 0062 82B0     		sub	sp, sp, #8
 358              	.LCFI19:
 359              		.cfi_def_cfa_offset 16
 360 0064 00AF     		add	r7, sp, #0
 361              	.LCFI20:
 362              		.cfi_def_cfa_register 7
 363 0066 7860     		str	r0, [r7, #4]
 364              		.loc 3 19 0
 365 0068 7868     		ldr	r0, [r7, #4]
 366 006a FFF7FEFF 		bl	_ZN16CBinarySemaphoreD1Ev
 367 006e 7868     		ldr	r0, [r7, #4]
 368 0070 FFF7FEFF 		bl	_ZdlPv
 369 0074 7B68     		ldr	r3, [r7, #4]
 370 0076 1846     		mov	r0, r3
 371 0078 07F10807 		add	r7, r7, #8
 372 007c BD46     		mov	sp, r7
 373 007e 80BD     		pop	{r7, pc}
 374              		.cfi_endproc
 375              	.LFE122:
 377              		.align	2
 378              		.global	_ZN16CBinarySemaphoreC2EPv
 379              		.thumb
 380              		.thumb_func
 382              	_ZN16CBinarySemaphoreC2EPv:
 383              	.LFB124:
  20:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  21:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** CBinarySemaphore::CBinarySemaphore(xSemaphoreHandle handleSemaphore) {
 384              		.loc 3 21 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 8
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388 0080 80B5     		push	{r7, lr}
 389              	.LCFI21:
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 14, -4
 392              		.cfi_offset 7, -8
 393 0082 82B0     		sub	sp, sp, #8
 394              	.LCFI22:
 395              		.cfi_def_cfa_offset 16
 396 0084 00AF     		add	r7, sp, #0
 397              	.LCFI23:
 398              		.cfi_def_cfa_register 7
 399 0086 7860     		str	r0, [r7, #4]
 400 0088 3960     		str	r1, [r7, #0]
 401              	.LBB7:
 402              		.loc 3 21 0
 403 008a 7B68     		ldr	r3, [r7, #4]
 404 008c 1846     		mov	r0, r3
 405 008e FFF7FEFF 		bl	_ZN11ASyncObjectC2Ev
 406 0092 7B68     		ldr	r3, [r7, #4]
 407 0094 064A     		ldr	r2, .L20
 408 0096 1A60     		str	r2, [r3, #0]
  22:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	Attach(handleSemaphore);
 409              		.loc 3 22 0
 410 0098 7B68     		ldr	r3, [r7, #4]
 411 009a 1846     		mov	r0, r3
 412 009c 3968     		ldr	r1, [r7, #0]
 413 009e FFF7FEFF 		bl	_ZN11ASyncObject6AttachEPv
 414              	.LBE7:
  23:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** }
 415              		.loc 3 23 0
 416 00a2 7B68     		ldr	r3, [r7, #4]
 417 00a4 1846     		mov	r0, r3
 418 00a6 07F10807 		add	r7, r7, #8
 419 00aa BD46     		mov	sp, r7
 420 00ac 80BD     		pop	{r7, pc}
 421              	.L21:
 422 00ae 00BF     		.align	2
 423              	.L20:
 424 00b0 08000000 		.word	_ZTV16CBinarySemaphore+8
 425              		.cfi_endproc
 426              	.LFE124:
 428              		.align	2
 429              		.global	_ZN16CBinarySemaphore6CreateEv
 430              		.thumb
 431              		.thumb_func
 433              	_ZN16CBinarySemaphore6CreateEv:
 434              	.LFB126:
  24:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  25:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** bool CBinarySemaphore::Create() {
 435              		.loc 3 25 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 16
 438              		@ frame_needed = 1, uses_anonymous_args = 0
 439 00b4 80B5     		push	{r7, lr}
 440              	.LCFI24:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 14, -4
 443              		.cfi_offset 7, -8
 444 00b6 84B0     		sub	sp, sp, #16
 445              	.LCFI25:
 446              		.cfi_def_cfa_offset 24
 447 00b8 00AF     		add	r7, sp, #0
 448              	.LCFI26:
 449              		.cfi_def_cfa_register 7
 450 00ba 7860     		str	r0, [r7, #4]
 451              	.LBB8:
  26:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	xSemaphoreHandle handle;
  27:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  28:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	vSemaphoreCreateBinary(handle);
 452              		.loc 3 28 0
 453 00bc 4FF00100 		mov	r0, #1
 454 00c0 4FF00001 		mov	r1, #0
 455 00c4 FFF7FEFF 		bl	xQueueCreate
 456 00c8 0346     		mov	r3, r0
 457 00ca FB60     		str	r3, [r7, #12]
 458 00cc FB68     		ldr	r3, [r7, #12]
 459 00ce 002B     		cmp	r3, #0
 460 00d0 08D0     		beq	.L23
 461              		.loc 3 28 0 is_stmt 0 discriminator 1
 462 00d2 F868     		ldr	r0, [r7, #12]
 463 00d4 4FF00001 		mov	r1, #0
 464 00d8 4FF00002 		mov	r2, #0
 465 00dc 4FF00003 		mov	r3, #0
 466 00e0 FFF7FEFF 		bl	xQueueGenericSend
 467              	.L23:
  29:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  30:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	if (handle != NULL)
 468              		.loc 3 30 0 is_stmt 1
 469 00e4 FB68     		ldr	r3, [r7, #12]
 470 00e6 002B     		cmp	r3, #0
 471 00e8 08D0     		beq	.L24
  31:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 		Attach(handle);
 472              		.loc 3 31 0
 473 00ea 7B68     		ldr	r3, [r7, #4]
 474 00ec 1B68     		ldr	r3, [r3, #0]
 475 00ee 03F10403 		add	r3, r3, #4
 476 00f2 1B68     		ldr	r3, [r3, #0]
 477 00f4 7A68     		ldr	r2, [r7, #4]
 478 00f6 1046     		mov	r0, r2
 479 00f8 F968     		ldr	r1, [r7, #12]
 480 00fa 9847     		blx	r3
 481              	.L24:
  32:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  33:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	return IsValid();
 482              		.loc 3 33 0
 483 00fc 7B68     		ldr	r3, [r7, #4]
 484 00fe 1B68     		ldr	r3, [r3, #0]
 485 0100 1B68     		ldr	r3, [r3, #0]
 486 0102 7A68     		ldr	r2, [r7, #4]
 487 0104 1046     		mov	r0, r2
 488 0106 9847     		blx	r3
 489 0108 0346     		mov	r3, r0
 490              	.LBE8:
  34:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** }
 491              		.loc 3 34 0
 492 010a 1846     		mov	r0, r3
 493 010c 07F11007 		add	r7, r7, #16
 494 0110 BD46     		mov	sp, r7
 495 0112 80BD     		pop	{r7, pc}
 496              		.cfi_endproc
 497              	.LFE126:
 499              		.global	_ZTV16CBinarySemaphore
 500              		.section	.rodata._ZTV16CBinarySemaphore,"a",%progbits
 501              		.align	3
 504              	_ZTV16CBinarySemaphore:
 505 0000 00000000 		.word	0
 506 0004 00000000 		.word	0
 507 0008 00000000 		.word	_ZNK11ASyncObject7IsValidEv
 508 000c 00000000 		.word	_ZN11ASyncObject6AttachEPv
 509 0010 00000000 		.word	_ZN11ASyncObject6DetachEv
 510 0014 00000000 		.word	_ZN16CBinarySemaphoreD1Ev
 511 0018 00000000 		.word	_ZN16CBinarySemaphoreD0Ev
 512 001c 00000000 		.word	_ZN16CBinarySemaphore4TakeEm
 513 0020 00000000 		.word	_ZN16CBinarySemaphore4GiveEv
 514 0024 00000000 		.section	.rodata._ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__,"a",%progbits
 515              		.align	2
 518              	_ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__:
 519 0000 76697274 		.ascii	"virtual long int CBinarySemaphore::Give()\000"
 519      75616C20 
 519      6C6F6E67 
 519      20696E74 
 519      20434269 
 520 002a 0000     		.section	.rodata._ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__,"a",%progbits
 521              		.align	2
 524              	_ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__:
 525 0000 76697274 		.ascii	"virtual long int CBinarySemaphore::Take(portTickTyp"
 525      75616C20 
 525      6C6F6E67 
 525      20696E74 
 525      20434269 
 526 0033 652900   		.ascii	"e)\000"
 527              		.global	_ZN16CBinarySemaphoreC1Ev
 528              		.thumb_set _ZN16CBinarySemaphoreC1Ev,_ZN16CBinarySemaphoreC2Ev
 529              		.global	_ZN16CBinarySemaphoreD1Ev
 530              		.thumb_set _ZN16CBinarySemaphoreD1Ev,_ZN16CBinarySemaphoreD2Ev
 531              		.global	_ZN16CBinarySemaphoreC1EPv
 532              		.thumb_set _ZN16CBinarySemaphoreC1EPv,_ZN16CBinarySemaphoreC2EPv
 533 0036 0000     		.text
 534              	.Letext0:
 535              		.file 4 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 536              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 537              		.file 6 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 538              		.file 7 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 539              		.file 8 "../FreeRTOS_EC/Source/IFreeRTOSProtocol.h"
 540              		.file 9 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 CBinarySemaphore.cpp
  C:\Temp\ccPXa7UW.s:19     .text._ZNK11ASyncObject7IsValidEv:00000000 $t
  C:\Temp\ccPXa7UW.s:24     .text._ZNK11ASyncObject7IsValidEv:00000000 _ZNK11ASyncObject7IsValidEv
  C:\Temp\ccPXa7UW.s:61     .text._ZN11ASyncObject6DetachEv:00000000 $t
  C:\Temp\ccPXa7UW.s:66     .text._ZN11ASyncObject6DetachEv:00000000 _ZN11ASyncObject6DetachEv
  C:\Temp\ccPXa7UW.s:106    .rodata:00000000 $d
  C:\Temp\ccPXa7UW.s:107    .rodata:00000000 .LC0
  C:\Temp\ccPXa7UW.s:110    .rodata:0000002c .LC1
  C:\Temp\ccPXa7UW.s:113    .text._ZN16CBinarySemaphore4TakeEm:00000000 $t
  C:\Temp\ccPXa7UW.s:118    .text._ZN16CBinarySemaphore4TakeEm:00000000 _ZN16CBinarySemaphore4TakeEm
  C:\Temp\ccPXa7UW.s:524    .rodata._ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__:00000000 _ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__
  C:\Temp\ccPXa7UW.s:178    .text._ZN16CBinarySemaphore4GiveEv:00000000 $t
  C:\Temp\ccPXa7UW.s:183    .text._ZN16CBinarySemaphore4GiveEv:00000000 _ZN16CBinarySemaphore4GiveEv
  C:\Temp\ccPXa7UW.s:518    .rodata._ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__:00000000 _ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__
  C:\Temp\ccPXa7UW.s:241    .text:00000000 $t
  C:\Temp\ccPXa7UW.s:246    .text:00000000 _ZN16CBinarySemaphoreC2Ev
  C:\Temp\ccPXa7UW.s:283    .text:00000024 $d
  C:\Temp\ccPXa7UW.s:504    .rodata._ZTV16CBinarySemaphore:00000000 _ZTV16CBinarySemaphore
  C:\Temp\ccPXa7UW.s:287    .text:00000028 $t
  C:\Temp\ccPXa7UW.s:292    .text:00000028 _ZN16CBinarySemaphoreD2Ev
  C:\Temp\ccPXa7UW.s:337    .text:0000005c $d
  C:\Temp\ccPXa7UW.s:341    .text:00000060 $t
  C:\Temp\ccPXa7UW.s:346    .text:00000060 _ZN16CBinarySemaphoreD0Ev
  C:\Temp\ccPXa7UW.s:292    .text:00000028 _ZN16CBinarySemaphoreD1Ev
  C:\Temp\ccPXa7UW.s:382    .text:00000080 _ZN16CBinarySemaphoreC2EPv
  C:\Temp\ccPXa7UW.s:424    .text:000000b0 $d
  C:\Temp\ccPXa7UW.s:428    .text:000000b4 $t
  C:\Temp\ccPXa7UW.s:433    .text:000000b4 _ZN16CBinarySemaphore6CreateEv
  C:\Temp\ccPXa7UW.s:501    .rodata._ZTV16CBinarySemaphore:00000000 $d
  C:\Temp\ccPXa7UW.s:515    .rodata._ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__:00000000 $d
  C:\Temp\ccPXa7UW.s:521    .rodata._ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__:00000000 $d
  C:\Temp\ccPXa7UW.s:246    .text:00000000 _ZN16CBinarySemaphoreC1Ev
  C:\Temp\ccPXa7UW.s:382    .text:00000080 _ZN16CBinarySemaphoreC1EPv
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__assert_func
xQueueGenericReceive
xQueueGenericSend
_ZN11ASyncObjectC2Ev
_ZN11ASyncObjectD2Ev
_ZdlPv
_ZN11ASyncObject6AttachEPv
xQueueCreate
