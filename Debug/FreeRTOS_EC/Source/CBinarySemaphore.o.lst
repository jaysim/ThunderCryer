   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"CBinarySemaphore.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZNK11ASyncObject7IsValidEv,"axG",%progbits,_ZNK11ASyncObject7IsValidEv,comdat
  20              		.align	2
  21              		.weak	_ZNK11ASyncObject7IsValidEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZNK11ASyncObject7IsValidEv:
  26              	.LFB111:
  27              		.file 1 "../FreeRTOS_EC/Source/ASyncObject.h"
   1:../FreeRTOS_EC/Source/ASyncObject.h **** /**
   2:../FreeRTOS_EC/Source/ASyncObject.h ****  * @file   ASyncObject.h
   3:../FreeRTOS_EC/Source/ASyncObject.h ****  * @class  ASyncObject
   4:../FreeRTOS_EC/Source/ASyncObject.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/ASyncObject.h ****  *
   6:../FreeRTOS_EC/Source/ASyncObject.h ****  * Abstract base class for all task synchronization object.
   7:../FreeRTOS_EC/Source/ASyncObject.h ****  *
   8:../FreeRTOS_EC/Source/ASyncObject.h ****  * @date   Jul 13, 2010
   9:../FreeRTOS_EC/Source/ASyncObject.h ****  * @author Stefano Oliveri (STF12.net)
  10:../FreeRTOS_EC/Source/ASyncObject.h ****  *         E-Mail: software@stf12.net
  11:../FreeRTOS_EC/Source/ASyncObject.h ****  */
  12:../FreeRTOS_EC/Source/ASyncObject.h **** 
  13:../FreeRTOS_EC/Source/ASyncObject.h **** #ifndef ASEMAPHORE_H_
  14:../FreeRTOS_EC/Source/ASyncObject.h **** #define ASEMAPHORE_H_
  15:../FreeRTOS_EC/Source/ASyncObject.h **** 
  16:../FreeRTOS_EC/Source/ASyncObject.h **** #include "FreeRTOS.h"
  17:../FreeRTOS_EC/Source/ASyncObject.h **** #include "semphr.h"
  18:../FreeRTOS_EC/Source/ASyncObject.h **** #include "IFreeRTOSProtocol.h"
  19:../FreeRTOS_EC/Source/ASyncObject.h **** 
  20:../FreeRTOS_EC/Source/ASyncObject.h **** class ASyncObject: public IFreeRTOSObj {
  21:../FreeRTOS_EC/Source/ASyncObject.h **** protected:
  22:../FreeRTOS_EC/Source/ASyncObject.h ****     xSemaphoreHandle m_handleSemaphore;
  23:../FreeRTOS_EC/Source/ASyncObject.h **** 
  24:../FreeRTOS_EC/Source/ASyncObject.h **** public:
  25:../FreeRTOS_EC/Source/ASyncObject.h **** 	ASyncObject();
  26:../FreeRTOS_EC/Source/ASyncObject.h **** 	virtual ~ASyncObject();
  27:../FreeRTOS_EC/Source/ASyncObject.h **** 
  28:../FreeRTOS_EC/Source/ASyncObject.h **** 	inline operator xSemaphoreHandle() const { return m_handleSemaphore; }
  29:../FreeRTOS_EC/Source/ASyncObject.h **** 
  30:../FreeRTOS_EC/Source/ASyncObject.h **** 	void Delete();
  31:../FreeRTOS_EC/Source/ASyncObject.h **** 	inline bool IsValid()const;
  32:../FreeRTOS_EC/Source/ASyncObject.h **** 	void Attach(xGenericHandle handle);
  33:../FreeRTOS_EC/Source/ASyncObject.h **** 	inline xGenericHandle Detach();
  34:../FreeRTOS_EC/Source/ASyncObject.h **** 
  35:../FreeRTOS_EC/Source/ASyncObject.h **** 	virtual portBASE_TYPE Take(portTickType xBlockTime) =0;
  36:../FreeRTOS_EC/Source/ASyncObject.h **** 	virtual portBASE_TYPE Give() =0;
  37:../FreeRTOS_EC/Source/ASyncObject.h **** };
  38:../FreeRTOS_EC/Source/ASyncObject.h **** 
  39:../FreeRTOS_EC/Source/ASyncObject.h **** // inline method
  40:../FreeRTOS_EC/Source/ASyncObject.h **** 
  41:../FreeRTOS_EC/Source/ASyncObject.h **** inline
  42:../FreeRTOS_EC/Source/ASyncObject.h **** bool ASyncObject::IsValid() const {
  28              		.loc 1 42 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  43:../FreeRTOS_EC/Source/ASyncObject.h **** 	return m_handleSemaphore != NULL;
  44              		.loc 1 43 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 5B68     		ldr	r3, [r3, #4]
  47 000c 002B     		cmp	r3, #0
  48 000e 0CBF     		ite	eq
  49 0010 0023     		moveq	r3, #0
  50 0012 0123     		movne	r3, #1
  51 0014 DBB2     		uxtb	r3, r3
  44:../FreeRTOS_EC/Source/ASyncObject.h **** }
  52              		.loc 1 44 0
  53 0016 1846     		mov	r0, r3
  54 0018 07F10C07 		add	r7, r7, #12
  55 001c BD46     		mov	sp, r7
  56 001e 80BC     		pop	{r7}
  57 0020 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE111:
  61 0022 00BF     		.section	.text._ZN11ASyncObject6DetachEv,"axG",%progbits,_ZN11ASyncObject6DetachEv,comdat
  62              		.align	2
  63              		.weak	_ZN11ASyncObject6DetachEv
  64              		.thumb
  65              		.thumb_func
  67              	_ZN11ASyncObject6DetachEv:
  68              	.LFB112:
  45:../FreeRTOS_EC/Source/ASyncObject.h **** 
  46:../FreeRTOS_EC/Source/ASyncObject.h **** inline
  47:../FreeRTOS_EC/Source/ASyncObject.h **** xGenericHandle ASyncObject::Detach() {
  69              		.loc 1 47 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 16
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74 0000 80B4     		push	{r7}
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 7, -4
  78 0002 85B0     		sub	sp, sp, #20
  79              	.LCFI4:
  80              		.cfi_def_cfa_offset 24
  81 0004 00AF     		add	r7, sp, #0
  82              	.LCFI5:
  83              		.cfi_def_cfa_register 7
  84 0006 7860     		str	r0, [r7, #4]
  85              	.LBB2:
  48:../FreeRTOS_EC/Source/ASyncObject.h **** 	xSemaphoreHandle res = m_handleSemaphore;
  86              		.loc 1 48 0
  87 0008 7B68     		ldr	r3, [r7, #4]
  88 000a 5B68     		ldr	r3, [r3, #4]
  89 000c FB60     		str	r3, [r7, #12]
  49:../FreeRTOS_EC/Source/ASyncObject.h **** 	m_handleSemaphore = NULL;
  90              		.loc 1 49 0
  91 000e 7B68     		ldr	r3, [r7, #4]
  92 0010 4FF00002 		mov	r2, #0
  93 0014 5A60     		str	r2, [r3, #4]
  50:../FreeRTOS_EC/Source/ASyncObject.h **** 	return res;
  94              		.loc 1 50 0
  95 0016 FB68     		ldr	r3, [r7, #12]
  96              	.LBE2:
  51:../FreeRTOS_EC/Source/ASyncObject.h **** }
  97              		.loc 1 51 0
  98 0018 1846     		mov	r0, r3
  99 001a 07F11407 		add	r7, r7, #20
 100 001e BD46     		mov	sp, r7
 101 0020 80BC     		pop	{r7}
 102 0022 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE112:
 106              		.section	.rodata
 107              		.align	2
 108              	.LC0:
 109 0000 2E2E2F46 		.ascii	"../FreeRTOS_EC/Source/CBinarySemaphore.h\000"
 109      72656552 
 109      544F535F 
 109      45432F53 
 109      6F757263 
 110 0029 000000   		.align	2
 111              	.LC1:
 112 002c 49735661 		.ascii	"IsValid()\000"
 112      6C696428 
 112      2900
 113 0036 0000     		.section	.text._ZN16CBinarySemaphore4TakeEm,"axG",%progbits,_ZN16CBinarySemaphore4TakeEm,comdat
 114              		.align	2
 115              		.weak	_ZN16CBinarySemaphore4TakeEm
 116              		.thumb
 117              		.thumb_func
 119              	_ZN16CBinarySemaphore4TakeEm:
 120              	.LFB113:
 121              		.file 2 "../FreeRTOS_EC/Source/CBinarySemaphore.h"
   1:../FreeRTOS_EC/Source/CBinarySemaphore.h **** /**
   2:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @file CBinarySemaphore.h
   3:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @class CBinarySemaphore
   4:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
   6:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * The CBinarySemaphore class wraps a native FreeRTOS binary semaphore handle (xSemaphoreHandle).
   7:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * To create a binary semaphore instance an object of this class and then call its CBinarySemaphore
   8:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * like showed in the following sample:
   9:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * \code
  10:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * CBinarySemaphore g_aSemaphore // global semaphore declaration.
  11:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
  12:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * void taskControlFunc(void *pParams) // a task control loop
  13:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * {
  14:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 	g_aSemaphore.Create();
  15:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
  16:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 	for (;;) {
  17:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 		while (g_aSemaphore.Take(portMAX_DELAY) != pdTRUE) {
  18:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 		// do something
  19:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * 		}
  20:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * }
  21:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * \endcode
  22:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
  23:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * \sa <a href="http://www.freertos.org/Inter-Task-Communication.html#Binary">binary semaphore docu
  24:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  25:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *
  26:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @date   Jul 13, 2010
  27:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  * @author Stefano Oliveri (STF12.net)
  28:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  *         E-Mail: software@stf12.net
  29:../FreeRTOS_EC/Source/CBinarySemaphore.h ****  */
  30:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  31:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  32:../FreeRTOS_EC/Source/CBinarySemaphore.h **** #ifndef CBINARYSEMAPHORE_H_
  33:../FreeRTOS_EC/Source/CBinarySemaphore.h **** #define CBINARYSEMAPHORE_H_
  34:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  35:../FreeRTOS_EC/Source/CBinarySemaphore.h **** #include <assert.h>
  36:../FreeRTOS_EC/Source/CBinarySemaphore.h **** #include "ASyncObject.h"
  37:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  38:../FreeRTOS_EC/Source/CBinarySemaphore.h **** class CBinarySemaphore: public ASyncObject {
  39:../FreeRTOS_EC/Source/CBinarySemaphore.h **** public:
  40:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  41:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  42:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Default constructor. It initializes the object without attaching it to a native FreeRTOS handle
  43:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Call the Create method to allocate a binary semaphore handle and attach it to the object.
  44:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  45:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	CBinarySemaphore();
  46:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  47:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  48:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Create a binary semaphore instance and attach it to a valid handle.
  49:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 *
  50:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * @param handleSemaphore a valid binary semaphore handle.
  51:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  52:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	CBinarySemaphore(xSemaphoreHandle handleSemaphore);
  53:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  54:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  55:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Destructor. It deletes the native FreeRTOS counting semaphore.
  56:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  57:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	virtual ~CBinarySemaphore();
  58:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  59:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  60:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * Create a FreeRTOS binary semaphore and attach its handle to the receiver object.
  61:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 *
  62:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * @return true if the counting semaphore is created with success, false otherwise.
  63:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 *
  64:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * \sa <a href="http://www.freertos.org/a00121.html">vSemaphoreCreateBinary</a> FreeRTOS API funct
  65:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  66:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	bool Create();
  67:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  68:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  69:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * \sa <a href="http://www.freertos.org/a00122.html">xSemaphoreTake</a> FreeRTOS API function.
  70:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  71:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	inline portBASE_TYPE Take(portTickType xBlockTime);
  72:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  73:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  74:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * \sa <a href="http://www.freertos.org/a00123.html">xSemaphoreGive</a> FreeRTOS API function.
  75:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  76:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	inline portBASE_TYPE Give();
  77:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  78:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	/**
  79:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 * \sa <a href="http://www.freertos.org/a00124.html">xSemaphoreGiveFromISR</a> FreeRTOS API functi
  80:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	 */
  81:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	inline portBASE_TYPE GiveFromISR(signed portBASE_TYPE *pxHigherPriorityTaskWoken);
  82:../FreeRTOS_EC/Source/CBinarySemaphore.h **** };
  83:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  84:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  85:../FreeRTOS_EC/Source/CBinarySemaphore.h **** // inline methods implementation
  86:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  87:../FreeRTOS_EC/Source/CBinarySemaphore.h **** inline
  88:../FreeRTOS_EC/Source/CBinarySemaphore.h **** portBASE_TYPE CBinarySemaphore::Take(portTickType xBlockTime) {
 122              		.loc 2 88 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126 0000 80B5     		push	{r7, lr}
 127              	.LCFI6:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 14, -4
 130              		.cfi_offset 7, -8
 131 0002 82B0     		sub	sp, sp, #8
 132              	.LCFI7:
 133              		.cfi_def_cfa_offset 16
 134 0004 00AF     		add	r7, sp, #0
 135              	.LCFI8:
 136              		.cfi_def_cfa_register 7
 137 0006 7860     		str	r0, [r7, #4]
 138 0008 3960     		str	r1, [r7, #0]
 139              	.LBB3:
  89:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	assert(IsValid());
 140              		.loc 2 89 0
 141 000a 7B68     		ldr	r3, [r7, #4]
 142 000c 1B68     		ldr	r3, [r3, #0]
 143 000e 1B68     		ldr	r3, [r3, #0]
 144 0010 7A68     		ldr	r2, [r7, #4]
 145 0012 1046     		mov	r0, r2
 146 0014 9847     		blx	r3
 147 0016 0346     		mov	r3, r0
 148 0018 002B     		cmp	r3, #0
 149 001a 0FD1     		bne	.L4
 150              		.loc 2 89 0 is_stmt 0 discriminator 1
 151 001c 40F20000 		movw	r0, #:lower16:.LC0
 152 0020 C0F20000 		movt	r0, #:upper16:.LC0
 153 0024 4FF05901 		mov	r1, #89
 154 0028 40F20002 		movw	r2, #:lower16:_ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__
 155 002c C0F20002 		movt	r2, #:upper16:_ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__
 156 0030 40F20003 		movw	r3, #:lower16:.LC1
 157 0034 C0F20003 		movt	r3, #:upper16:.LC1
 158 0038 FFF7FEFF 		bl	__assert_func
 159              	.L4:
  90:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  91:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	return xSemaphoreTake(m_handleSemaphore, xBlockTime);
 160              		.loc 2 91 0 is_stmt 1
 161 003c 7B68     		ldr	r3, [r7, #4]
 162 003e 5B68     		ldr	r3, [r3, #4]
 163 0040 1846     		mov	r0, r3
 164 0042 4FF00001 		mov	r1, #0
 165 0046 3A68     		ldr	r2, [r7, #0]
 166 0048 4FF00003 		mov	r3, #0
 167 004c FFF7FEFF 		bl	xQueueGenericReceive
 168 0050 0346     		mov	r3, r0
 169              	.LBE3:
  92:../FreeRTOS_EC/Source/CBinarySemaphore.h **** }
 170              		.loc 2 92 0
 171 0052 1846     		mov	r0, r3
 172 0054 07F10807 		add	r7, r7, #8
 173 0058 BD46     		mov	sp, r7
 174 005a 80BD     		pop	{r7, pc}
 175              		.cfi_endproc
 176              	.LFE113:
 178              		.section	.text._ZN16CBinarySemaphore4GiveEv,"axG",%progbits,_ZN16CBinarySemaphore4GiveEv,comdat
 179              		.align	2
 180              		.weak	_ZN16CBinarySemaphore4GiveEv
 181              		.thumb
 182              		.thumb_func
 184              	_ZN16CBinarySemaphore4GiveEv:
 185              	.LFB114:
  93:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  94:../FreeRTOS_EC/Source/CBinarySemaphore.h **** inline
  95:../FreeRTOS_EC/Source/CBinarySemaphore.h **** portBASE_TYPE CBinarySemaphore::Give() {
 186              		.loc 2 95 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 8
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190 0000 80B5     		push	{r7, lr}
 191              	.LCFI9:
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 14, -4
 194              		.cfi_offset 7, -8
 195 0002 82B0     		sub	sp, sp, #8
 196              	.LCFI10:
 197              		.cfi_def_cfa_offset 16
 198 0004 00AF     		add	r7, sp, #0
 199              	.LCFI11:
 200              		.cfi_def_cfa_register 7
 201 0006 7860     		str	r0, [r7, #4]
 202              	.LBB4:
  96:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	assert(IsValid());
 203              		.loc 2 96 0
 204 0008 7B68     		ldr	r3, [r7, #4]
 205 000a 1B68     		ldr	r3, [r3, #0]
 206 000c 1B68     		ldr	r3, [r3, #0]
 207 000e 7A68     		ldr	r2, [r7, #4]
 208 0010 1046     		mov	r0, r2
 209 0012 9847     		blx	r3
 210 0014 0346     		mov	r3, r0
 211 0016 002B     		cmp	r3, #0
 212 0018 0FD1     		bne	.L6
 213              		.loc 2 96 0 is_stmt 0 discriminator 1
 214 001a 40F20000 		movw	r0, #:lower16:.LC0
 215 001e C0F20000 		movt	r0, #:upper16:.LC0
 216 0022 4FF06001 		mov	r1, #96
 217 0026 40F20002 		movw	r2, #:lower16:_ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__
 218 002a C0F20002 		movt	r2, #:upper16:_ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__
 219 002e 40F20003 		movw	r3, #:lower16:.LC1
 220 0032 C0F20003 		movt	r3, #:upper16:.LC1
 221 0036 FFF7FEFF 		bl	__assert_func
 222              	.L6:
  97:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 
  98:../FreeRTOS_EC/Source/CBinarySemaphore.h **** 	return xSemaphoreGive(m_handleSemaphore);
 223              		.loc 2 98 0 is_stmt 1
 224 003a 7B68     		ldr	r3, [r7, #4]
 225 003c 5B68     		ldr	r3, [r3, #4]
 226 003e 1846     		mov	r0, r3
 227 0040 4FF00001 		mov	r1, #0
 228 0044 4FF00002 		mov	r2, #0
 229 0048 4FF00003 		mov	r3, #0
 230 004c FFF7FEFF 		bl	xQueueGenericSend
 231 0050 0346     		mov	r3, r0
 232              	.LBE4:
  99:../FreeRTOS_EC/Source/CBinarySemaphore.h **** }
 233              		.loc 2 99 0
 234 0052 1846     		mov	r0, r3
 235 0054 07F10807 		add	r7, r7, #8
 236 0058 BD46     		mov	sp, r7
 237 005a 80BD     		pop	{r7, pc}
 238              		.cfi_endproc
 239              	.LFE114:
 241              		.text
 242              		.align	2
 243              		.global	_ZN16CBinarySemaphoreC2Ev
 244              		.thumb
 245              		.thumb_func
 247              	_ZN16CBinarySemaphoreC2Ev:
 248              	.LFB117:
 249              		.file 3 "../FreeRTOS_EC/Source/CBinarySemaphore.cpp"
   1:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** /**
   2:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  * CBinarySemaphore.cpp
   3:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  *
   4:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  *  Created on: Jul 13, 2010
   5:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  *      Author: Stefano Oliveri (STF12.net)
   6:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  *      E-Mail: software@stf12.net
   7:../FreeRTOS_EC/Source/CBinarySemaphore.cpp ****  */
   8:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
   9:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** #include "CBinarySemaphore.h"
  10:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** #include <assert.h>
  11:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  12:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** CBinarySemaphore::CBinarySemaphore() {
 250              		.loc 3 12 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 8
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 254 0000 80B5     		push	{r7, lr}
 255              	.LCFI12:
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 14, -4
 258              		.cfi_offset 7, -8
 259 0002 82B0     		sub	sp, sp, #8
 260              	.LCFI13:
 261              		.cfi_def_cfa_offset 16
 262 0004 00AF     		add	r7, sp, #0
 263              	.LCFI14:
 264              		.cfi_def_cfa_register 7
 265 0006 7860     		str	r0, [r7, #4]
 266              	.LBB5:
 267              		.loc 3 12 0
 268 0008 7B68     		ldr	r3, [r7, #4]
 269 000a 1846     		mov	r0, r3
 270 000c FFF7FEFF 		bl	_ZN11ASyncObjectC2Ev
 271 0010 7B68     		ldr	r3, [r7, #4]
 272 0012 044A     		ldr	r2, .L9
 273 0014 1A60     		str	r2, [r3, #0]
 274              	.LBE5:
  13:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	// TODO Auto-generated constructor stub
  14:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  15:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** }
 275              		.loc 3 15 0
 276 0016 7B68     		ldr	r3, [r7, #4]
 277 0018 1846     		mov	r0, r3
 278 001a 07F10807 		add	r7, r7, #8
 279 001e BD46     		mov	sp, r7
 280 0020 80BD     		pop	{r7, pc}
 281              	.L10:
 282 0022 00BF     		.align	2
 283              	.L9:
 284 0024 08000000 		.word	_ZTV16CBinarySemaphore+8
 285              		.cfi_endproc
 286              	.LFE117:
 288              		.align	2
 289              		.global	_ZN16CBinarySemaphoreD2Ev
 290              		.thumb
 291              		.thumb_func
 293              	_ZN16CBinarySemaphoreD2Ev:
 294              	.LFB120:
  16:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  17:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** CBinarySemaphore::~CBinarySemaphore() {
 295              		.loc 3 17 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 8
 298              		@ frame_needed = 1, uses_anonymous_args = 0
 299 0028 80B5     		push	{r7, lr}
 300              	.LCFI15:
 301              		.cfi_def_cfa_offset 8
 302              		.cfi_offset 14, -4
 303              		.cfi_offset 7, -8
 304 002a 82B0     		sub	sp, sp, #8
 305              	.LCFI16:
 306              		.cfi_def_cfa_offset 16
 307 002c 00AF     		add	r7, sp, #0
 308              	.LCFI17:
 309              		.cfi_def_cfa_register 7
 310 002e 7860     		str	r0, [r7, #4]
 311              	.LBB6:
 312              		.loc 3 17 0
 313 0030 7B68     		ldr	r3, [r7, #4]
 314 0032 0A4A     		ldr	r2, .L14
 315 0034 1A60     		str	r2, [r3, #0]
  18:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	// TODO Auto-generated destructor stub
  19:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** }
 316              		.loc 3 19 0
 317 0036 7868     		ldr	r0, [r7, #4]
 318 0038 FFF7FEFF 		bl	_ZN11ASyncObjectD2Ev
 319              	.LBE6:
 320 003c 4FF00003 		mov	r3, #0
 321 0040 03F00103 		and	r3, r3, #1
 322 0044 DBB2     		uxtb	r3, r3
 323 0046 002B     		cmp	r3, #0
 324 0048 02D0     		beq	.L13
 325              		.loc 3 19 0 is_stmt 0 discriminator 2
 326 004a 7868     		ldr	r0, [r7, #4]
 327 004c FFF7FEFF 		bl	_ZdlPv
 328              	.L13:
 329              		.loc 3 19 0 discriminator 3
 330 0050 7B68     		ldr	r3, [r7, #4]
 331 0052 1846     		mov	r0, r3
 332 0054 07F10807 		add	r7, r7, #8
 333 0058 BD46     		mov	sp, r7
 334 005a 80BD     		pop	{r7, pc}
 335              	.L15:
 336              		.align	2
 337              	.L14:
 338 005c 08000000 		.word	_ZTV16CBinarySemaphore+8
 339              		.cfi_endproc
 340              	.LFE120:
 342              		.align	2
 343              		.global	_ZN16CBinarySemaphoreD0Ev
 344              		.thumb
 345              		.thumb_func
 347              	_ZN16CBinarySemaphoreD0Ev:
 348              	.LFB122:
  17:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** CBinarySemaphore::~CBinarySemaphore() {
 349              		.loc 3 17 0 is_stmt 1
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 8
 352              		@ frame_needed = 1, uses_anonymous_args = 0
 353 0060 80B5     		push	{r7, lr}
 354              	.LCFI18:
 355              		.cfi_def_cfa_offset 8
 356              		.cfi_offset 14, -4
 357              		.cfi_offset 7, -8
 358 0062 82B0     		sub	sp, sp, #8
 359              	.LCFI19:
 360              		.cfi_def_cfa_offset 16
 361 0064 00AF     		add	r7, sp, #0
 362              	.LCFI20:
 363              		.cfi_def_cfa_register 7
 364 0066 7860     		str	r0, [r7, #4]
 365              		.loc 3 19 0
 366 0068 7868     		ldr	r0, [r7, #4]
 367 006a FFF7FEFF 		bl	_ZN16CBinarySemaphoreD1Ev
 368 006e 7868     		ldr	r0, [r7, #4]
 369 0070 FFF7FEFF 		bl	_ZdlPv
 370 0074 7B68     		ldr	r3, [r7, #4]
 371 0076 1846     		mov	r0, r3
 372 0078 07F10807 		add	r7, r7, #8
 373 007c BD46     		mov	sp, r7
 374 007e 80BD     		pop	{r7, pc}
 375              		.cfi_endproc
 376              	.LFE122:
 378              		.align	2
 379              		.global	_ZN16CBinarySemaphoreC2EPv
 380              		.thumb
 381              		.thumb_func
 383              	_ZN16CBinarySemaphoreC2EPv:
 384              	.LFB124:
  20:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  21:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** CBinarySemaphore::CBinarySemaphore(xSemaphoreHandle handleSemaphore) {
 385              		.loc 3 21 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 8
 388              		@ frame_needed = 1, uses_anonymous_args = 0
 389 0080 80B5     		push	{r7, lr}
 390              	.LCFI21:
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 14, -4
 393              		.cfi_offset 7, -8
 394 0082 82B0     		sub	sp, sp, #8
 395              	.LCFI22:
 396              		.cfi_def_cfa_offset 16
 397 0084 00AF     		add	r7, sp, #0
 398              	.LCFI23:
 399              		.cfi_def_cfa_register 7
 400 0086 7860     		str	r0, [r7, #4]
 401 0088 3960     		str	r1, [r7, #0]
 402              	.LBB7:
 403              		.loc 3 21 0
 404 008a 7B68     		ldr	r3, [r7, #4]
 405 008c 1846     		mov	r0, r3
 406 008e FFF7FEFF 		bl	_ZN11ASyncObjectC2Ev
 407 0092 7B68     		ldr	r3, [r7, #4]
 408 0094 064A     		ldr	r2, .L20
 409 0096 1A60     		str	r2, [r3, #0]
  22:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	Attach(handleSemaphore);
 410              		.loc 3 22 0
 411 0098 7B68     		ldr	r3, [r7, #4]
 412 009a 1846     		mov	r0, r3
 413 009c 3968     		ldr	r1, [r7, #0]
 414 009e FFF7FEFF 		bl	_ZN11ASyncObject6AttachEPv
 415              	.LBE7:
  23:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** }
 416              		.loc 3 23 0
 417 00a2 7B68     		ldr	r3, [r7, #4]
 418 00a4 1846     		mov	r0, r3
 419 00a6 07F10807 		add	r7, r7, #8
 420 00aa BD46     		mov	sp, r7
 421 00ac 80BD     		pop	{r7, pc}
 422              	.L21:
 423 00ae 00BF     		.align	2
 424              	.L20:
 425 00b0 08000000 		.word	_ZTV16CBinarySemaphore+8
 426              		.cfi_endproc
 427              	.LFE124:
 429              		.align	2
 430              		.global	_ZN16CBinarySemaphore6CreateEv
 431              		.thumb
 432              		.thumb_func
 434              	_ZN16CBinarySemaphore6CreateEv:
 435              	.LFB126:
  24:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  25:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** bool CBinarySemaphore::Create() {
 436              		.loc 3 25 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 16
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440 00b4 80B5     		push	{r7, lr}
 441              	.LCFI24:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 14, -4
 444              		.cfi_offset 7, -8
 445 00b6 84B0     		sub	sp, sp, #16
 446              	.LCFI25:
 447              		.cfi_def_cfa_offset 24
 448 00b8 00AF     		add	r7, sp, #0
 449              	.LCFI26:
 450              		.cfi_def_cfa_register 7
 451 00ba 7860     		str	r0, [r7, #4]
 452              	.LBB8:
  26:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	xSemaphoreHandle handle;
  27:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  28:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	vSemaphoreCreateBinary(handle);
 453              		.loc 3 28 0
 454 00bc 4FF00100 		mov	r0, #1
 455 00c0 4FF00001 		mov	r1, #0
 456 00c4 FFF7FEFF 		bl	xQueueCreate
 457 00c8 0346     		mov	r3, r0
 458 00ca FB60     		str	r3, [r7, #12]
 459 00cc FB68     		ldr	r3, [r7, #12]
 460 00ce 002B     		cmp	r3, #0
 461 00d0 08D0     		beq	.L23
 462              		.loc 3 28 0 is_stmt 0 discriminator 1
 463 00d2 F868     		ldr	r0, [r7, #12]
 464 00d4 4FF00001 		mov	r1, #0
 465 00d8 4FF00002 		mov	r2, #0
 466 00dc 4FF00003 		mov	r3, #0
 467 00e0 FFF7FEFF 		bl	xQueueGenericSend
 468              	.L23:
  29:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  30:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	if (handle != NULL)
 469              		.loc 3 30 0 is_stmt 1
 470 00e4 FB68     		ldr	r3, [r7, #12]
 471 00e6 002B     		cmp	r3, #0
 472 00e8 08D0     		beq	.L24
  31:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 		Attach(handle);
 473              		.loc 3 31 0
 474 00ea 7B68     		ldr	r3, [r7, #4]
 475 00ec 1B68     		ldr	r3, [r3, #0]
 476 00ee 03F10403 		add	r3, r3, #4
 477 00f2 1B68     		ldr	r3, [r3, #0]
 478 00f4 7A68     		ldr	r2, [r7, #4]
 479 00f6 1046     		mov	r0, r2
 480 00f8 F968     		ldr	r1, [r7, #12]
 481 00fa 9847     		blx	r3
 482              	.L24:
  32:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 
  33:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** 	return IsValid();
 483              		.loc 3 33 0
 484 00fc 7B68     		ldr	r3, [r7, #4]
 485 00fe 1B68     		ldr	r3, [r3, #0]
 486 0100 1B68     		ldr	r3, [r3, #0]
 487 0102 7A68     		ldr	r2, [r7, #4]
 488 0104 1046     		mov	r0, r2
 489 0106 9847     		blx	r3
 490 0108 0346     		mov	r3, r0
 491              	.LBE8:
  34:../FreeRTOS_EC/Source/CBinarySemaphore.cpp **** }
 492              		.loc 3 34 0
 493 010a 1846     		mov	r0, r3
 494 010c 07F11007 		add	r7, r7, #16
 495 0110 BD46     		mov	sp, r7
 496 0112 80BD     		pop	{r7, pc}
 497              		.cfi_endproc
 498              	.LFE126:
 500              		.global	_ZTV16CBinarySemaphore
 501              		.section	.rodata._ZTV16CBinarySemaphore,"a",%progbits
 502              		.align	3
 505              	_ZTV16CBinarySemaphore:
 506 0000 00000000 		.word	0
 507 0004 00000000 		.word	0
 508 0008 00000000 		.word	_ZNK11ASyncObject7IsValidEv
 509 000c 00000000 		.word	_ZN11ASyncObject6AttachEPv
 510 0010 00000000 		.word	_ZN11ASyncObject6DetachEv
 511 0014 00000000 		.word	_ZN16CBinarySemaphoreD1Ev
 512 0018 00000000 		.word	_ZN16CBinarySemaphoreD0Ev
 513 001c 00000000 		.word	_ZN16CBinarySemaphore4TakeEm
 514 0020 00000000 		.word	_ZN16CBinarySemaphore4GiveEv
 515 0024 00000000 		.section	.rodata._ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__,"a",%progbits
 516              		.align	2
 519              	_ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__:
 520 0000 76697274 		.ascii	"virtual long int CBinarySemaphore::Give()\000"
 520      75616C20 
 520      6C6F6E67 
 520      20696E74 
 520      20434269 
 521 002a 0000     		.section	.rodata._ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__,"a",%progbits
 522              		.align	2
 525              	_ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__:
 526 0000 76697274 		.ascii	"virtual long int CBinarySemaphore::Take(portTickTyp"
 526      75616C20 
 526      6C6F6E67 
 526      20696E74 
 526      20434269 
 527 0033 652900   		.ascii	"e)\000"
 528              		.global	_ZN16CBinarySemaphoreC1Ev
 529              		.thumb_set _ZN16CBinarySemaphoreC1Ev,_ZN16CBinarySemaphoreC2Ev
 530              		.global	_ZN16CBinarySemaphoreD1Ev
 531              		.thumb_set _ZN16CBinarySemaphoreD1Ev,_ZN16CBinarySemaphoreD2Ev
 532              		.global	_ZN16CBinarySemaphoreC1EPv
 533              		.thumb_set _ZN16CBinarySemaphoreC1EPv,_ZN16CBinarySemaphoreC2EPv
 534 0036 0000     		.text
 535              	.Letext0:
 536              		.file 4 "d:\\elektronik\\ides\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib
 537              		.file 5 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../So
 538              		.file 6 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/queue.h"
 539              		.file 7 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/semphr.h
 540              		.file 8 "../FreeRTOS_EC/Source/IFreeRTOSProtocol.h"
 541              		.file 9 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CBinarySemaphore.cpp
  C:\TEMP\cc7nkNlW.s:20     .text._ZNK11ASyncObject7IsValidEv:00000000 $t
  C:\TEMP\cc7nkNlW.s:25     .text._ZNK11ASyncObject7IsValidEv:00000000 _ZNK11ASyncObject7IsValidEv
  C:\TEMP\cc7nkNlW.s:62     .text._ZN11ASyncObject6DetachEv:00000000 $t
  C:\TEMP\cc7nkNlW.s:67     .text._ZN11ASyncObject6DetachEv:00000000 _ZN11ASyncObject6DetachEv
  C:\TEMP\cc7nkNlW.s:107    .rodata:00000000 $d
  C:\TEMP\cc7nkNlW.s:108    .rodata:00000000 .LC0
  C:\TEMP\cc7nkNlW.s:111    .rodata:0000002c .LC1
  C:\TEMP\cc7nkNlW.s:114    .text._ZN16CBinarySemaphore4TakeEm:00000000 $t
  C:\TEMP\cc7nkNlW.s:119    .text._ZN16CBinarySemaphore4TakeEm:00000000 _ZN16CBinarySemaphore4TakeEm
  C:\TEMP\cc7nkNlW.s:525    .rodata._ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__:00000000 _ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__
  C:\TEMP\cc7nkNlW.s:179    .text._ZN16CBinarySemaphore4GiveEv:00000000 $t
  C:\TEMP\cc7nkNlW.s:184    .text._ZN16CBinarySemaphore4GiveEv:00000000 _ZN16CBinarySemaphore4GiveEv
  C:\TEMP\cc7nkNlW.s:519    .rodata._ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__:00000000 _ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__
  C:\TEMP\cc7nkNlW.s:242    .text:00000000 $t
  C:\TEMP\cc7nkNlW.s:247    .text:00000000 _ZN16CBinarySemaphoreC2Ev
  C:\TEMP\cc7nkNlW.s:284    .text:00000024 $d
  C:\TEMP\cc7nkNlW.s:505    .rodata._ZTV16CBinarySemaphore:00000000 _ZTV16CBinarySemaphore
  C:\TEMP\cc7nkNlW.s:288    .text:00000028 $t
  C:\TEMP\cc7nkNlW.s:293    .text:00000028 _ZN16CBinarySemaphoreD2Ev
  C:\TEMP\cc7nkNlW.s:338    .text:0000005c $d
  C:\TEMP\cc7nkNlW.s:342    .text:00000060 $t
  C:\TEMP\cc7nkNlW.s:347    .text:00000060 _ZN16CBinarySemaphoreD0Ev
  C:\TEMP\cc7nkNlW.s:293    .text:00000028 _ZN16CBinarySemaphoreD1Ev
  C:\TEMP\cc7nkNlW.s:383    .text:00000080 _ZN16CBinarySemaphoreC2EPv
  C:\TEMP\cc7nkNlW.s:425    .text:000000b0 $d
  C:\TEMP\cc7nkNlW.s:429    .text:000000b4 $t
  C:\TEMP\cc7nkNlW.s:434    .text:000000b4 _ZN16CBinarySemaphore6CreateEv
  C:\TEMP\cc7nkNlW.s:502    .rodata._ZTV16CBinarySemaphore:00000000 $d
  C:\TEMP\cc7nkNlW.s:516    .rodata._ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__:00000000 $d
  C:\TEMP\cc7nkNlW.s:522    .rodata._ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__:00000000 $d
  C:\TEMP\cc7nkNlW.s:247    .text:00000000 _ZN16CBinarySemaphoreC1Ev
  C:\TEMP\cc7nkNlW.s:383    .text:00000080 _ZN16CBinarySemaphoreC1EPv
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__assert_func
xQueueGenericReceive
xQueueGenericSend
_ZN11ASyncObjectC2Ev
_ZN11ASyncObjectD2Ev
_ZdlPv
_ZN11ASyncObject6AttachEPv
xQueueCreate
