   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"CQueue.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZNK6CQueue7IsValidEv,"axG",%progbits,_ZNK6CQueue7IsValidEv,comdat
  20              		.align	2
  21              		.weak	_ZNK6CQueue7IsValidEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZNK6CQueue7IsValidEv:
  26              	.LFB122:
  27              		.file 1 "../FreeRTOS_EC/Source/CQueue.h"
   1:../FreeRTOS_EC/Source/CQueue.h **** /**
   2:../FreeRTOS_EC/Source/CQueue.h ****  * @file CQueue.h
   3:../FreeRTOS_EC/Source/CQueue.h ****  * @class CQueue
   4:../FreeRTOS_EC/Source/CQueue.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CQueue.h ****  *
   6:../FreeRTOS_EC/Source/CQueue.h ****  * The CQueue class wraps a native FreeRTOS queue handle (xQueueHandle).
   7:../FreeRTOS_EC/Source/CQueue.h ****  * To create a queue instance an object of this class and then call its CQueue::Create method
   8:../FreeRTOS_EC/Source/CQueue.h ****  * like showed in the following sample:
   9:../FreeRTOS_EC/Source/CQueue.h ****  * \code
  10:../FreeRTOS_EC/Source/CQueue.h ****  * CQueue g_aQueue // global task declaration.
  11:../FreeRTOS_EC/Source/CQueue.h ****  *
  12:../FreeRTOS_EC/Source/CQueue.h ****  * void taskControlFunc(void *pParams)
  13:../FreeRTOS_EC/Source/CQueue.h ****  * {
  14:../FreeRTOS_EC/Source/CQueue.h ****  * 	unsigned char *Message;
  15:../FreeRTOS_EC/Source/CQueue.h ****  * 	g_aQueue.Create(nQueueSize, sizeof(queueItemT));
  16:../FreeRTOS_EC/Source/CQueue.h ****  *
  17:../FreeRTOS_EC/Source/CQueue.h ****  * 	for (;;) {
  18:../FreeRTOS_EC/Source/CQueue.h ****  * 		g_aQueue.Receive(&Message, portMAX_DELAY ) != pdTRUE)
  19:../FreeRTOS_EC/Source/CQueue.h ****  * 		// do something
  20:../FreeRTOS_EC/Source/CQueue.h ****  * }
  21:../FreeRTOS_EC/Source/CQueue.h ****  * \endcode
  22:../FreeRTOS_EC/Source/CQueue.h ****  *
  23:../FreeRTOS_EC/Source/CQueue.h ****  * See the CLcdTask for an example.
  24:../FreeRTOS_EC/Source/CQueue.h ****  *
  25:../FreeRTOS_EC/Source/CQueue.h ****  * \sa <a href="http://www.freertos.org/Inter-Task-Communication.html">queue documentation</a> in t
  26:../FreeRTOS_EC/Source/CQueue.h ****  *
  27:../FreeRTOS_EC/Source/CQueue.h ****  * @date Jul 12, 2010
  28:../FreeRTOS_EC/Source/CQueue.h ****  * @author Stefano Oliveri (STF12.net)
  29:../FreeRTOS_EC/Source/CQueue.h ****  *         E-Mail: software@stf12.net
  30:../FreeRTOS_EC/Source/CQueue.h ****  */
  31:../FreeRTOS_EC/Source/CQueue.h **** 
  32:../FreeRTOS_EC/Source/CQueue.h **** 
  33:../FreeRTOS_EC/Source/CQueue.h **** #ifndef CQUEUE_H_
  34:../FreeRTOS_EC/Source/CQueue.h **** #define CQUEUE_H_
  35:../FreeRTOS_EC/Source/CQueue.h **** 
  36:../FreeRTOS_EC/Source/CQueue.h **** #include <assert.h>
  37:../FreeRTOS_EC/Source/CQueue.h **** 
  38:../FreeRTOS_EC/Source/CQueue.h **** #include "FreeRTOS.h"
  39:../FreeRTOS_EC/Source/CQueue.h **** #include "queue.h"
  40:../FreeRTOS_EC/Source/CQueue.h **** #include "IFreeRTOSProtocol.h"
  41:../FreeRTOS_EC/Source/CQueue.h **** 
  42:../FreeRTOS_EC/Source/CQueue.h **** 
  43:../FreeRTOS_EC/Source/CQueue.h **** class CQueue: public IFreeRTOSObj {
  44:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  45:../FreeRTOS_EC/Source/CQueue.h **** 	 * Specifies the native FreeRTOS handle managed by an instance of this class.
  46:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  47:../FreeRTOS_EC/Source/CQueue.h **** 	xQueueHandle m_handleQueue;
  48:../FreeRTOS_EC/Source/CQueue.h **** 
  49:../FreeRTOS_EC/Source/CQueue.h **** public:
  50:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  51:../FreeRTOS_EC/Source/CQueue.h **** 	 * The default constructor. It initializes the object without attaching it to a native FreeRTOS ha
  52:../FreeRTOS_EC/Source/CQueue.h **** 	 * Call the Create method to allocate a queue handle and attach it to the object.
  53:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  54:../FreeRTOS_EC/Source/CQueue.h **** 	CQueue();
  55:../FreeRTOS_EC/Source/CQueue.h **** 
  56:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  57:../FreeRTOS_EC/Source/CQueue.h **** 	 * Create a CQueue instance and attach it to a valid handle.
  58:../FreeRTOS_EC/Source/CQueue.h **** 	 *
  59:../FreeRTOS_EC/Source/CQueue.h **** 	 * @param handleQueue a valid queue handle.
  60:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  61:../FreeRTOS_EC/Source/CQueue.h **** 	CQueue(xQueueHandle handleQueue);
  62:../FreeRTOS_EC/Source/CQueue.h **** 
  63:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  64:../FreeRTOS_EC/Source/CQueue.h **** 	 * Delete the native FreeRTOS queue.
  65:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  66:../FreeRTOS_EC/Source/CQueue.h **** 	virtual ~CQueue();
  67:../FreeRTOS_EC/Source/CQueue.h **** 
  68:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  69:../FreeRTOS_EC/Source/CQueue.h **** 	 * Retrieve the native FreeRTOS queue handle attached to this object.
  70:../FreeRTOS_EC/Source/CQueue.h **** 	 *
  71:../FreeRTOS_EC/Source/CQueue.h **** 	 * @return the native FreeRTOS queue handle attached to this object.
  72:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  73:../FreeRTOS_EC/Source/CQueue.h **** 	inline operator xQueueHandle() const { return m_handleQueue; }
  74:../FreeRTOS_EC/Source/CQueue.h **** 
  75:../FreeRTOS_EC/Source/CQueue.h **** 	inline bool IsValid() const;
  76:../FreeRTOS_EC/Source/CQueue.h **** 	void Attach(xGenericHandle handle);
  77:../FreeRTOS_EC/Source/CQueue.h **** 	inline xGenericHandle Detach();
  78:../FreeRTOS_EC/Source/CQueue.h **** 
  79:../FreeRTOS_EC/Source/CQueue.h **** 	// FreeRTOS API Wrappers
  80:../FreeRTOS_EC/Source/CQueue.h **** 
  81:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  82:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00116.html">xQueueCreate</a> FreeRTOS API function.
  83:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  84:../FreeRTOS_EC/Source/CQueue.h **** 	CQueue &Create(unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize);
  85:../FreeRTOS_EC/Source/CQueue.h **** 
  86:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  87:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00018.html#vQueueDelete">vQueueDelete</a> FreeRTOS API fu
  88:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  89:../FreeRTOS_EC/Source/CQueue.h **** 	void Delete();
  90:../FreeRTOS_EC/Source/CQueue.h **** 
  91:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  92:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00018.html#ucQueueMessagesWaiting">uxQueueMessagesWaiting
  93:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  94:../FreeRTOS_EC/Source/CQueue.h **** 	inline unsigned portBASE_TYPE MessagesWaiting();
  95:../FreeRTOS_EC/Source/CQueue.h **** 
  96:../FreeRTOS_EC/Source/CQueue.h **** 	/**
  97:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00117.html">xQueueSend</a> FreeRTOS API function.
  98:../FreeRTOS_EC/Source/CQueue.h **** 	 */
  99:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE Send(const void * pvItemToQueue, portTickType xTicksToWait);
 100:../FreeRTOS_EC/Source/CQueue.h **** 
 101:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 102:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueueSendToBack.html">SendToBack</a> FreeRTOS API functio
 103:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 104:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendToBack(const void * pvItemToQueue, portTickType xTicksToWait);
 105:../FreeRTOS_EC/Source/CQueue.h **** 
 106:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 107:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueueSendToFront.html">xQueueSendToFront</a> FreeRTOS API
 108:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 109:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendToFront(const void * pvItemToQueue, portTickType xTicksToWait);
 110:../FreeRTOS_EC/Source/CQueue.h **** 
 111:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 112:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00118.html">xQueueReceive</a> FreeRTOS API function.
 113:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 114:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE Receive(void *pvBuffer, portTickType xTicksToWait);
 115:../FreeRTOS_EC/Source/CQueue.h **** 
 116:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 117:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueuePeek.html">xQueuePeek</a> FreeRTOS API function.
 118:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 119:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE Peek(void *pvBuffer, portTickType xTicksToWait);
 120:../FreeRTOS_EC/Source/CQueue.h **** 
 121:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 122:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00119.html">xQueueSendFromISR</a> FreeRTOS API function.
 123:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 124:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorityTaskWo
 125:../FreeRTOS_EC/Source/CQueue.h **** 
 126:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 127:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueueSendToBackFromISR.html">xQueueSendToBackFromISR</a> 
 128:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 129:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendToBackFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriority
 130:../FreeRTOS_EC/Source/CQueue.h **** 
 131:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 132:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/xQueueSendToFrontFromISR.html">xQueueSendToFrontFromISR</a
 133:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 134:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE SendToFrontFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorit
 135:../FreeRTOS_EC/Source/CQueue.h **** 
 136:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 137:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/a00120.html">xQueueReceiveFromISR</a> FreeRTOS API functio
 138:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 139:../FreeRTOS_EC/Source/CQueue.h **** 	inline portBASE_TYPE ReceiveFromISR(void *pvBuffer, portBASE_TYPE *pxTaskWoken);
 140:../FreeRTOS_EC/Source/CQueue.h **** 
 141:../FreeRTOS_EC/Source/CQueue.h **** 	/**
 142:../FreeRTOS_EC/Source/CQueue.h **** 	 * \sa <a href="http://www.freertos.org/vQueueAddToRegistry.html">vQueueAddToRegistry</a> FreeRTOS
 143:../FreeRTOS_EC/Source/CQueue.h **** 	 */
 144:../FreeRTOS_EC/Source/CQueue.h **** 	inline void AddToRegistry(signed portCHAR *pcQueueName);
 145:../FreeRTOS_EC/Source/CQueue.h **** 
 146:../FreeRTOS_EC/Source/CQueue.h **** };
 147:../FreeRTOS_EC/Source/CQueue.h **** 
 148:../FreeRTOS_EC/Source/CQueue.h **** // inline method implementation
 149:../FreeRTOS_EC/Source/CQueue.h **** 
 150:../FreeRTOS_EC/Source/CQueue.h **** inline
 151:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::Send(const void * pvItemToQueue, portTickType xTicksToWait) {
 152:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSend(m_handleQueue, pvItemToQueue, xTicksToWait);
 153:../FreeRTOS_EC/Source/CQueue.h **** }
 154:../FreeRTOS_EC/Source/CQueue.h **** 
 155:../FreeRTOS_EC/Source/CQueue.h **** inline
 156:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorityTaskWo
 157:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendFromISR(m_handleQueue, pvItemToQueue, pxHigherPriorityTaskWoken);
 158:../FreeRTOS_EC/Source/CQueue.h **** }
 159:../FreeRTOS_EC/Source/CQueue.h **** 
 160:../FreeRTOS_EC/Source/CQueue.h **** inline
 161:../FreeRTOS_EC/Source/CQueue.h **** unsigned portBASE_TYPE CQueue::MessagesWaiting() {
 162:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 163:../FreeRTOS_EC/Source/CQueue.h **** 
 164:../FreeRTOS_EC/Source/CQueue.h **** 	return uxQueueMessagesWaiting(m_handleQueue);
 165:../FreeRTOS_EC/Source/CQueue.h **** }
 166:../FreeRTOS_EC/Source/CQueue.h **** 
 167:../FreeRTOS_EC/Source/CQueue.h **** inline
 168:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendToBack(const void * pvItemToQueue, portTickType xTicksToWait) {
 169:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 170:../FreeRTOS_EC/Source/CQueue.h **** 
 171:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendToBack(m_handleQueue, pvItemToQueue, xTicksToWait);
 172:../FreeRTOS_EC/Source/CQueue.h **** }
 173:../FreeRTOS_EC/Source/CQueue.h **** 
 174:../FreeRTOS_EC/Source/CQueue.h **** inline
 175:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendToFront(const void * pvItemToQueue, portTickType xTicksToWait) {
 176:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 177:../FreeRTOS_EC/Source/CQueue.h **** 
 178:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendToFront(m_handleQueue, pvItemToQueue, xTicksToWait);
 179:../FreeRTOS_EC/Source/CQueue.h **** }
 180:../FreeRTOS_EC/Source/CQueue.h **** 
 181:../FreeRTOS_EC/Source/CQueue.h **** inline
 182:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::Receive(void *pvBuffer, portTickType xTicksToWait) {
 183:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 184:../FreeRTOS_EC/Source/CQueue.h **** 
 185:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueReceive(m_handleQueue, pvBuffer, xTicksToWait);
 186:../FreeRTOS_EC/Source/CQueue.h **** }
 187:../FreeRTOS_EC/Source/CQueue.h **** 
 188:../FreeRTOS_EC/Source/CQueue.h **** inline
 189:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::Peek(void *pvBuffer, portTickType xTicksToWait) {
 190:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 191:../FreeRTOS_EC/Source/CQueue.h **** 
 192:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueuePeek(m_handleQueue, pvBuffer, xTicksToWait);
 193:../FreeRTOS_EC/Source/CQueue.h **** }
 194:../FreeRTOS_EC/Source/CQueue.h **** 
 195:../FreeRTOS_EC/Source/CQueue.h **** inline
 196:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendToBackFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriority
 197:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 198:../FreeRTOS_EC/Source/CQueue.h **** 
 199:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendToBackFromISR(m_handleQueue, pvItemToQueue, pxHigherPriorityTaskWoken);
 200:../FreeRTOS_EC/Source/CQueue.h **** }
 201:../FreeRTOS_EC/Source/CQueue.h **** 
 202:../FreeRTOS_EC/Source/CQueue.h **** inline
 203:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::SendToFrontFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorit
 204:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 205:../FreeRTOS_EC/Source/CQueue.h **** 
 206:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueSendToFrontFromISR(m_handleQueue, pvItemToQueue, pxHigherPriorityTaskWoken);
 207:../FreeRTOS_EC/Source/CQueue.h **** }
 208:../FreeRTOS_EC/Source/CQueue.h **** 
 209:../FreeRTOS_EC/Source/CQueue.h **** inline
 210:../FreeRTOS_EC/Source/CQueue.h **** portBASE_TYPE CQueue::ReceiveFromISR(void *pvBuffer, portBASE_TYPE *pxTaskWoken) {
 211:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 212:../FreeRTOS_EC/Source/CQueue.h **** 
 213:../FreeRTOS_EC/Source/CQueue.h **** 	return xQueueReceiveFromISR(m_handleQueue, pvBuffer, pxTaskWoken);
 214:../FreeRTOS_EC/Source/CQueue.h **** }
 215:../FreeRTOS_EC/Source/CQueue.h **** 
 216:../FreeRTOS_EC/Source/CQueue.h **** inline
 217:../FreeRTOS_EC/Source/CQueue.h **** void CQueue::AddToRegistry(signed portCHAR *pcQueueName) {
 218:../FreeRTOS_EC/Source/CQueue.h **** #if (configQUEUE_REGISTRY_SIZE > 0)
 219:../FreeRTOS_EC/Source/CQueue.h **** 	assert(IsValid());
 220:../FreeRTOS_EC/Source/CQueue.h **** 
 221:../FreeRTOS_EC/Source/CQueue.h **** 	vQueueAddToRegistry(m_handleQueue, pcQueueName);
 222:../FreeRTOS_EC/Source/CQueue.h **** #endif
 223:../FreeRTOS_EC/Source/CQueue.h **** }
 224:../FreeRTOS_EC/Source/CQueue.h **** 
 225:../FreeRTOS_EC/Source/CQueue.h **** inline
 226:../FreeRTOS_EC/Source/CQueue.h **** bool CQueue::IsValid() const{
  28              		.loc 1 226 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 227:../FreeRTOS_EC/Source/CQueue.h **** 	return m_handleQueue != NULL;
  44              		.loc 1 227 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 5B68     		ldr	r3, [r3, #4]
  47 000c 002B     		cmp	r3, #0
  48 000e 0CBF     		ite	eq
  49 0010 0023     		moveq	r3, #0
  50 0012 0123     		movne	r3, #1
  51 0014 DBB2     		uxtb	r3, r3
 228:../FreeRTOS_EC/Source/CQueue.h **** }
  52              		.loc 1 228 0
  53 0016 1846     		mov	r0, r3
  54 0018 07F10C07 		add	r7, r7, #12
  55 001c BD46     		mov	sp, r7
  56 001e 80BC     		pop	{r7}
  57 0020 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE122:
  61 0022 00BF     		.section	.text._ZN6CQueue6DetachEv,"axG",%progbits,_ZN6CQueue6DetachEv,comdat
  62              		.align	2
  63              		.weak	_ZN6CQueue6DetachEv
  64              		.thumb
  65              		.thumb_func
  67              	_ZN6CQueue6DetachEv:
  68              	.LFB123:
 229:../FreeRTOS_EC/Source/CQueue.h **** 
 230:../FreeRTOS_EC/Source/CQueue.h **** inline
 231:../FreeRTOS_EC/Source/CQueue.h **** xGenericHandle CQueue::Detach() {
  69              		.loc 1 231 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 16
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74 0000 80B4     		push	{r7}
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 7, -4
  78 0002 85B0     		sub	sp, sp, #20
  79              	.LCFI4:
  80              		.cfi_def_cfa_offset 24
  81 0004 00AF     		add	r7, sp, #0
  82              	.LCFI5:
  83              		.cfi_def_cfa_register 7
  84 0006 7860     		str	r0, [r7, #4]
  85              	.LBB2:
 232:../FreeRTOS_EC/Source/CQueue.h **** 	xQueueHandle res = m_handleQueue;
  86              		.loc 1 232 0
  87 0008 7B68     		ldr	r3, [r7, #4]
  88 000a 5B68     		ldr	r3, [r3, #4]
  89 000c FB60     		str	r3, [r7, #12]
 233:../FreeRTOS_EC/Source/CQueue.h **** 	m_handleQueue = NULL;
  90              		.loc 1 233 0
  91 000e 7B68     		ldr	r3, [r7, #4]
  92 0010 4FF00002 		mov	r2, #0
  93 0014 5A60     		str	r2, [r3, #4]
 234:../FreeRTOS_EC/Source/CQueue.h **** 	return res;
  94              		.loc 1 234 0
  95 0016 FB68     		ldr	r3, [r7, #12]
  96              	.LBE2:
 235:../FreeRTOS_EC/Source/CQueue.h **** }
  97              		.loc 1 235 0
  98 0018 1846     		mov	r0, r3
  99 001a 07F11407 		add	r7, r7, #20
 100 001e BD46     		mov	sp, r7
 101 0020 80BC     		pop	{r7}
 102 0022 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE123:
 106              		.section	.text._ZN12IFreeRTOSObjC2Ev,"axG",%progbits,_ZN12IFreeRTOSObjC5Ev,comdat
 107              		.align	2
 108              		.weak	_ZN12IFreeRTOSObjC2Ev
 109              		.thumb
 110              		.thumb_func
 112              	_ZN12IFreeRTOSObjC2Ev:
 113              	.LFB126:
 114              		.file 2 "../FreeRTOS_EC/Source/IFreeRTOSProtocol.h"
   1:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** /**
   2:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @file IFreeRTOSProtocol.h
   3:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @class IFreeRTOSObj
   4:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *
   6:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * This interface provide the basic behavior for all class in the FreeRTOS Wrapper layer. All objec
   7:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * must be able to manage the owned native FreeRTOS handle. When the handle is created  it is attac
   8:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * From this moment the object owns the handle. When the object is disposed the handle is deleted a
   9:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * are freed. It is possible to keep the underling native FreeRTOS handle alive by detaching it bef
  10:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * object is disposed.
  11:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *
  12:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *
  13:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @date Aug 5, 2010
  14:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @author Stefano Oliveri (STF12.net)
  15:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *         E-Mail: software@stf12.net
  16:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  */
  17:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  18:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  19:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** #ifndef IFREERTOSPROTOCOL_H_
  20:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** #define IFREERTOSPROTOCOL_H_
  21:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  22:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** typedef void *xGenericHandle;
  23:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  24:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** class IFreeRTOSObj {
 115              		.loc 2 24 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0000 80B4     		push	{r7}
 121              	.LCFI6:
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 0002 83B0     		sub	sp, sp, #12
 125              	.LCFI7:
 126              		.cfi_def_cfa_offset 16
 127 0004 00AF     		add	r7, sp, #0
 128              	.LCFI8:
 129              		.cfi_def_cfa_register 7
 130 0006 7860     		str	r0, [r7, #4]
 131              	.LBB3:
 132              		.loc 2 24 0
 133 0008 7B68     		ldr	r3, [r7, #4]
 134 000a 044A     		ldr	r2, .L5
 135 000c 1A60     		str	r2, [r3, #0]
 136              	.LBE3:
 137 000e 7B68     		ldr	r3, [r7, #4]
 138 0010 1846     		mov	r0, r3
 139 0012 07F10C07 		add	r7, r7, #12
 140 0016 BD46     		mov	sp, r7
 141 0018 80BC     		pop	{r7}
 142 001a 7047     		bx	lr
 143              	.L6:
 144              		.align	2
 145              	.L5:
 146 001c 08000000 		.word	_ZTV12IFreeRTOSObj+8
 147              		.cfi_endproc
 148              	.LFE126:
 150              		.text
 151              		.align	2
 152              		.global	_ZN6CQueueC2Ev
 153              		.thumb
 154              		.thumb_func
 156              	_ZN6CQueueC2Ev:
 157              	.LFB128:
 158              		.file 3 "../FreeRTOS_EC/Source/CQueue.cpp"
   1:../FreeRTOS_EC/Source/CQueue.cpp **** /**
   2:../FreeRTOS_EC/Source/CQueue.cpp ****  * CQueue.cpp
   3:../FreeRTOS_EC/Source/CQueue.cpp ****  *
   4:../FreeRTOS_EC/Source/CQueue.cpp ****  *  Created on: Jul 12, 2010
   5:../FreeRTOS_EC/Source/CQueue.cpp ****  *      Author: Stefano Oliveri (STF12.net)
   6:../FreeRTOS_EC/Source/CQueue.cpp ****  *      E-Mail: software@stf12.net
   7:../FreeRTOS_EC/Source/CQueue.cpp ****  */
   8:../FreeRTOS_EC/Source/CQueue.cpp **** 
   9:../FreeRTOS_EC/Source/CQueue.cpp **** #include "CQueue.h"
  10:../FreeRTOS_EC/Source/CQueue.cpp **** 
  11:../FreeRTOS_EC/Source/CQueue.cpp **** 
  12:../FreeRTOS_EC/Source/CQueue.cpp **** CQueue::CQueue() {
 159              		.loc 3 12 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              	.LCFI9:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 14, -4
 167              		.cfi_offset 7, -8
 168 0002 82B0     		sub	sp, sp, #8
 169              	.LCFI10:
 170              		.cfi_def_cfa_offset 16
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI11:
 173              		.cfi_def_cfa_register 7
 174 0006 7860     		str	r0, [r7, #4]
 175              	.LBB4:
 176              		.loc 3 12 0
 177 0008 7B68     		ldr	r3, [r7, #4]
 178 000a 1846     		mov	r0, r3
 179 000c FFF7FEFF 		bl	_ZN12IFreeRTOSObjC2Ev
 180 0010 7B68     		ldr	r3, [r7, #4]
 181 0012 064A     		ldr	r2, .L9
 182 0014 1A60     		str	r2, [r3, #0]
  13:../FreeRTOS_EC/Source/CQueue.cpp **** 	m_handleQueue = NULL;
 183              		.loc 3 13 0
 184 0016 7B68     		ldr	r3, [r7, #4]
 185 0018 4FF00002 		mov	r2, #0
 186 001c 5A60     		str	r2, [r3, #4]
 187              	.LBE4:
  14:../FreeRTOS_EC/Source/CQueue.cpp **** }
 188              		.loc 3 14 0
 189 001e 7B68     		ldr	r3, [r7, #4]
 190 0020 1846     		mov	r0, r3
 191 0022 07F10807 		add	r7, r7, #8
 192 0026 BD46     		mov	sp, r7
 193 0028 80BD     		pop	{r7, pc}
 194              	.L10:
 195 002a 00BF     		.align	2
 196              	.L9:
 197 002c 08000000 		.word	_ZTV6CQueue+8
 198              		.cfi_endproc
 199              	.LFE128:
 201              		.align	2
 202              		.global	_ZN6CQueueD2Ev
 203              		.thumb
 204              		.thumb_func
 206              	_ZN6CQueueD2Ev:
 207              	.LFB131:
  15:../FreeRTOS_EC/Source/CQueue.cpp **** 
  16:../FreeRTOS_EC/Source/CQueue.cpp **** CQueue::~CQueue() {
 208              		.loc 3 16 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0030 80B5     		push	{r7, lr}
 213              	.LCFI12:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 14, -4
 216              		.cfi_offset 7, -8
 217 0032 82B0     		sub	sp, sp, #8
 218              	.LCFI13:
 219              		.cfi_def_cfa_offset 16
 220 0034 00AF     		add	r7, sp, #0
 221              	.LCFI14:
 222              		.cfi_def_cfa_register 7
 223 0036 7860     		str	r0, [r7, #4]
 224              	.LBB5:
 225              		.loc 3 16 0
 226 0038 7B68     		ldr	r3, [r7, #4]
 227 003a 0D4A     		ldr	r2, .L14
 228 003c 1A60     		str	r2, [r3, #0]
  17:../FreeRTOS_EC/Source/CQueue.cpp **** 	if (IsValid())
 229              		.loc 3 17 0
 230 003e 7868     		ldr	r0, [r7, #4]
 231 0040 FFF7FEFF 		bl	_ZNK6CQueue7IsValidEv
 232 0044 0346     		mov	r3, r0
 233 0046 002B     		cmp	r3, #0
 234 0048 02D0     		beq	.L12
  18:../FreeRTOS_EC/Source/CQueue.cpp **** 		Delete();
 235              		.loc 3 18 0
 236 004a 7868     		ldr	r0, [r7, #4]
 237 004c FFF7FEFF 		bl	_ZN6CQueue6DeleteEv
 238              	.L12:
 239              	.LBE5:
  19:../FreeRTOS_EC/Source/CQueue.cpp **** }
 240              		.loc 3 19 0
 241 0050 4FF00003 		mov	r3, #0
 242 0054 03F00103 		and	r3, r3, #1
 243 0058 DBB2     		uxtb	r3, r3
 244 005a 002B     		cmp	r3, #0
 245 005c 02D0     		beq	.L13
 246              		.loc 3 19 0 is_stmt 0 discriminator 1
 247 005e 7868     		ldr	r0, [r7, #4]
 248 0060 FFF7FEFF 		bl	_ZdlPv
 249              	.L13:
 250              		.loc 3 19 0 discriminator 2
 251 0064 7B68     		ldr	r3, [r7, #4]
 252 0066 1846     		mov	r0, r3
 253 0068 07F10807 		add	r7, r7, #8
 254 006c BD46     		mov	sp, r7
 255 006e 80BD     		pop	{r7, pc}
 256              	.L15:
 257              		.align	2
 258              	.L14:
 259 0070 08000000 		.word	_ZTV6CQueue+8
 260              		.cfi_endproc
 261              	.LFE131:
 263              		.align	2
 264              		.global	_ZN6CQueueD0Ev
 265              		.thumb
 266              		.thumb_func
 268              	_ZN6CQueueD0Ev:
 269              	.LFB133:
  16:../FreeRTOS_EC/Source/CQueue.cpp **** CQueue::~CQueue() {
 270              		.loc 3 16 0 is_stmt 1
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 8
 273              		@ frame_needed = 1, uses_anonymous_args = 0
 274 0074 80B5     		push	{r7, lr}
 275              	.LCFI15:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 14, -4
 278              		.cfi_offset 7, -8
 279 0076 82B0     		sub	sp, sp, #8
 280              	.LCFI16:
 281              		.cfi_def_cfa_offset 16
 282 0078 00AF     		add	r7, sp, #0
 283              	.LCFI17:
 284              		.cfi_def_cfa_register 7
 285 007a 7860     		str	r0, [r7, #4]
 286              		.loc 3 19 0
 287 007c 7868     		ldr	r0, [r7, #4]
 288 007e FFF7FEFF 		bl	_ZN6CQueueD1Ev
 289 0082 7868     		ldr	r0, [r7, #4]
 290 0084 FFF7FEFF 		bl	_ZdlPv
 291 0088 7B68     		ldr	r3, [r7, #4]
 292 008a 1846     		mov	r0, r3
 293 008c 07F10807 		add	r7, r7, #8
 294 0090 BD46     		mov	sp, r7
 295 0092 80BD     		pop	{r7, pc}
 296              		.cfi_endproc
 297              	.LFE133:
 299              		.align	2
 300              		.global	_ZN6CQueueC2EPv
 301              		.thumb
 302              		.thumb_func
 304              	_ZN6CQueueC2EPv:
 305              	.LFB135:
  20:../FreeRTOS_EC/Source/CQueue.cpp **** 
  21:../FreeRTOS_EC/Source/CQueue.cpp **** CQueue::CQueue(xQueueHandle handleQueue) {
 306              		.loc 3 21 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 8
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310 0094 80B5     		push	{r7, lr}
 311              	.LCFI18:
 312              		.cfi_def_cfa_offset 8
 313              		.cfi_offset 14, -4
 314              		.cfi_offset 7, -8
 315 0096 82B0     		sub	sp, sp, #8
 316              	.LCFI19:
 317              		.cfi_def_cfa_offset 16
 318 0098 00AF     		add	r7, sp, #0
 319              	.LCFI20:
 320              		.cfi_def_cfa_register 7
 321 009a 7860     		str	r0, [r7, #4]
 322 009c 3960     		str	r1, [r7, #0]
 323              	.LBB6:
 324              		.loc 3 21 0
 325 009e 7B68     		ldr	r3, [r7, #4]
 326 00a0 1846     		mov	r0, r3
 327 00a2 FFF7FEFF 		bl	_ZN12IFreeRTOSObjC2Ev
 328 00a6 7B68     		ldr	r3, [r7, #4]
 329 00a8 054A     		ldr	r2, .L20
 330 00aa 1A60     		str	r2, [r3, #0]
  22:../FreeRTOS_EC/Source/CQueue.cpp **** 	Attach(handleQueue);
 331              		.loc 3 22 0
 332 00ac 7868     		ldr	r0, [r7, #4]
 333 00ae 3968     		ldr	r1, [r7, #0]
 334 00b0 FFF7FEFF 		bl	_ZN6CQueue6AttachEPv
 335              	.LBE6:
  23:../FreeRTOS_EC/Source/CQueue.cpp **** }
 336              		.loc 3 23 0
 337 00b4 7B68     		ldr	r3, [r7, #4]
 338 00b6 1846     		mov	r0, r3
 339 00b8 07F10807 		add	r7, r7, #8
 340 00bc BD46     		mov	sp, r7
 341 00be 80BD     		pop	{r7, pc}
 342              	.L21:
 343              		.align	2
 344              	.L20:
 345 00c0 08000000 		.word	_ZTV6CQueue+8
 346              		.cfi_endproc
 347              	.LFE135:
 349              		.section	.rodata
 350              		.align	2
 351              	.LC0:
 352 0000 2E2E2F46 		.ascii	"../FreeRTOS_EC/Source/CQueue.cpp\000"
 352      72656552 
 352      544F535F 
 352      45432F53 
 352      6F757263 
 353 0021 000000   		.align	2
 354              	.LC1:
 355 0024 21497356 		.ascii	"!IsValid()\000"
 355      616C6964 
 355      282900
 356              		.text
 357              		.align	2
 358              		.global	_ZN6CQueue6CreateEmm
 359              		.thumb
 360              		.thumb_func
 362              	_ZN6CQueue6CreateEmm:
 363              	.LFB137:
  24:../FreeRTOS_EC/Source/CQueue.cpp **** 
  25:../FreeRTOS_EC/Source/CQueue.cpp **** CQueue &CQueue::Create(unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize) {
 364              		.loc 3 25 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 24
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368 00c4 80B5     		push	{r7, lr}
 369              	.LCFI21:
 370              		.cfi_def_cfa_offset 8
 371              		.cfi_offset 14, -4
 372              		.cfi_offset 7, -8
 373 00c6 86B0     		sub	sp, sp, #24
 374              	.LCFI22:
 375              		.cfi_def_cfa_offset 32
 376 00c8 00AF     		add	r7, sp, #0
 377              	.LCFI23:
 378              		.cfi_def_cfa_register 7
 379 00ca F860     		str	r0, [r7, #12]
 380 00cc B960     		str	r1, [r7, #8]
 381 00ce 7A60     		str	r2, [r7, #4]
 382              	.LBB7:
  26:../FreeRTOS_EC/Source/CQueue.cpp **** 	assert(!IsValid());
 383              		.loc 3 26 0
 384 00d0 FB68     		ldr	r3, [r7, #12]
 385 00d2 1B68     		ldr	r3, [r3, #0]
 386 00d4 1B68     		ldr	r3, [r3, #0]
 387 00d6 F868     		ldr	r0, [r7, #12]
 388 00d8 9847     		blx	r3
 389 00da 0346     		mov	r3, r0
 390 00dc 002B     		cmp	r3, #0
 391 00de 0FD0     		beq	.L23
 392              		.loc 3 26 0 is_stmt 0 discriminator 1
 393 00e0 40F20000 		movw	r0, #:lower16:.LC0
 394 00e4 C0F20000 		movt	r0, #:upper16:.LC0
 395 00e8 4FF01A01 		mov	r1, #26
 396 00ec 40F20002 		movw	r2, #:lower16:_ZZN6CQueue6CreateEmmE19__PRETTY_FUNCTION__
 397 00f0 C0F20002 		movt	r2, #:upper16:_ZZN6CQueue6CreateEmmE19__PRETTY_FUNCTION__
 398 00f4 40F20003 		movw	r3, #:lower16:.LC1
 399 00f8 C0F20003 		movt	r3, #:upper16:.LC1
 400 00fc FFF7FEFF 		bl	__assert_func
 401              	.L23:
  27:../FreeRTOS_EC/Source/CQueue.cpp **** 
  28:../FreeRTOS_EC/Source/CQueue.cpp **** 	xQueueHandle handle;
  29:../FreeRTOS_EC/Source/CQueue.cpp **** 
  30:../FreeRTOS_EC/Source/CQueue.cpp **** 	handle = xQueueCreate(uxQueueLength, uxItemSize);
 402              		.loc 3 30 0 is_stmt 1
 403 0100 B868     		ldr	r0, [r7, #8]
 404 0102 7968     		ldr	r1, [r7, #4]
 405 0104 FFF7FEFF 		bl	xQueueCreate
 406 0108 0346     		mov	r3, r0
 407 010a 7B61     		str	r3, [r7, #20]
  31:../FreeRTOS_EC/Source/CQueue.cpp **** 	if (handle != NULL)
 408              		.loc 3 31 0
 409 010c 7B69     		ldr	r3, [r7, #20]
 410 010e 002B     		cmp	r3, #0
 411 0110 07D0     		beq	.L24
  32:../FreeRTOS_EC/Source/CQueue.cpp **** 		Attach(handle);
 412              		.loc 3 32 0
 413 0112 FB68     		ldr	r3, [r7, #12]
 414 0114 1B68     		ldr	r3, [r3, #0]
 415 0116 03F10403 		add	r3, r3, #4
 416 011a 1B68     		ldr	r3, [r3, #0]
 417 011c F868     		ldr	r0, [r7, #12]
 418 011e 7969     		ldr	r1, [r7, #20]
 419 0120 9847     		blx	r3
 420              	.L24:
  33:../FreeRTOS_EC/Source/CQueue.cpp **** 
  34:../FreeRTOS_EC/Source/CQueue.cpp **** 	return *this;
 421              		.loc 3 34 0
 422 0122 FB68     		ldr	r3, [r7, #12]
 423              	.LBE7:
  35:../FreeRTOS_EC/Source/CQueue.cpp **** }
 424              		.loc 3 35 0
 425 0124 1846     		mov	r0, r3
 426 0126 07F11807 		add	r7, r7, #24
 427 012a BD46     		mov	sp, r7
 428 012c 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE137:
 432              		.section	.rodata
 433 002f 00       		.align	2
 434              	.LC2:
 435 0030 68616E64 		.ascii	"handle != NULL\000"
 435      6C652021 
 435      3D204E55 
 435      4C4C00
 436 003f 00       		.text
 437 012e 00BF     		.align	2
 438              		.global	_ZN6CQueue6AttachEPv
 439              		.thumb
 440              		.thumb_func
 442              	_ZN6CQueue6AttachEPv:
 443              	.LFB138:
  36:../FreeRTOS_EC/Source/CQueue.cpp **** 
  37:../FreeRTOS_EC/Source/CQueue.cpp **** void CQueue::Attach(xGenericHandle handle) {
 444              		.loc 3 37 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 8
 447              		@ frame_needed = 1, uses_anonymous_args = 0
 448 0130 80B5     		push	{r7, lr}
 449              	.LCFI24:
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 14, -4
 452              		.cfi_offset 7, -8
 453 0132 82B0     		sub	sp, sp, #8
 454              	.LCFI25:
 455              		.cfi_def_cfa_offset 16
 456 0134 00AF     		add	r7, sp, #0
 457              	.LCFI26:
 458              		.cfi_def_cfa_register 7
 459 0136 7860     		str	r0, [r7, #4]
 460 0138 3960     		str	r1, [r7, #0]
 461              	.LBB8:
  38:../FreeRTOS_EC/Source/CQueue.cpp **** 	assert(handle != NULL);
 462              		.loc 3 38 0
 463 013a 3B68     		ldr	r3, [r7, #0]
 464 013c 002B     		cmp	r3, #0
 465 013e 0FD1     		bne	.L26
 466              		.loc 3 38 0 is_stmt 0 discriminator 1
 467 0140 40F20000 		movw	r0, #:lower16:.LC0
 468 0144 C0F20000 		movt	r0, #:upper16:.LC0
 469 0148 4FF02601 		mov	r1, #38
 470 014c 40F20002 		movw	r2, #:lower16:_ZZN6CQueue6AttachEPvE19__PRETTY_FUNCTION__
 471 0150 C0F20002 		movt	r2, #:upper16:_ZZN6CQueue6AttachEPvE19__PRETTY_FUNCTION__
 472 0154 40F20003 		movw	r3, #:lower16:.LC2
 473 0158 C0F20003 		movt	r3, #:upper16:.LC2
 474 015c FFF7FEFF 		bl	__assert_func
 475              	.L26:
  39:../FreeRTOS_EC/Source/CQueue.cpp **** 
  40:../FreeRTOS_EC/Source/CQueue.cpp **** 	if (IsValid())
 476              		.loc 3 40 0 is_stmt 1
 477 0160 7B68     		ldr	r3, [r7, #4]
 478 0162 1B68     		ldr	r3, [r3, #0]
 479 0164 1B68     		ldr	r3, [r3, #0]
 480 0166 7868     		ldr	r0, [r7, #4]
 481 0168 9847     		blx	r3
 482 016a 0346     		mov	r3, r0
 483 016c 002B     		cmp	r3, #0
 484 016e 02D0     		beq	.L27
  41:../FreeRTOS_EC/Source/CQueue.cpp **** 		Delete();
 485              		.loc 3 41 0
 486 0170 7868     		ldr	r0, [r7, #4]
 487 0172 FFF7FEFF 		bl	_ZN6CQueue6DeleteEv
 488              	.L27:
  42:../FreeRTOS_EC/Source/CQueue.cpp **** 
  43:../FreeRTOS_EC/Source/CQueue.cpp **** 	m_handleQueue = handle;
 489              		.loc 3 43 0
 490 0176 7B68     		ldr	r3, [r7, #4]
 491 0178 3A68     		ldr	r2, [r7, #0]
 492 017a 5A60     		str	r2, [r3, #4]
 493              	.LBE8:
  44:../FreeRTOS_EC/Source/CQueue.cpp **** }
 494              		.loc 3 44 0
 495 017c 07F10807 		add	r7, r7, #8
 496 0180 BD46     		mov	sp, r7
 497 0182 80BD     		pop	{r7, pc}
 498              		.cfi_endproc
 499              	.LFE138:
 501              		.align	2
 502              		.global	_ZN6CQueue6DeleteEv
 503              		.thumb
 504              		.thumb_func
 506              	_ZN6CQueue6DeleteEv:
 507              	.LFB139:
  45:../FreeRTOS_EC/Source/CQueue.cpp **** 
  46:../FreeRTOS_EC/Source/CQueue.cpp **** void CQueue::Delete() {
 508              		.loc 3 46 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 8
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512 0184 80B5     		push	{r7, lr}
 513              	.LCFI27:
 514              		.cfi_def_cfa_offset 8
 515              		.cfi_offset 14, -4
 516              		.cfi_offset 7, -8
 517 0186 82B0     		sub	sp, sp, #8
 518              	.LCFI28:
 519              		.cfi_def_cfa_offset 16
 520 0188 00AF     		add	r7, sp, #0
 521              	.LCFI29:
 522              		.cfi_def_cfa_register 7
 523 018a 7860     		str	r0, [r7, #4]
  47:../FreeRTOS_EC/Source/CQueue.cpp **** 	if (m_handleQueue != NULL) {
 524              		.loc 3 47 0
 525 018c 7B68     		ldr	r3, [r7, #4]
 526 018e 5B68     		ldr	r3, [r3, #4]
 527 0190 002B     		cmp	r3, #0
 528 0192 08D0     		beq	.L28
  48:../FreeRTOS_EC/Source/CQueue.cpp **** 		vQueueDelete(m_handleQueue);
 529              		.loc 3 48 0
 530 0194 7B68     		ldr	r3, [r7, #4]
 531 0196 5B68     		ldr	r3, [r3, #4]
 532 0198 1846     		mov	r0, r3
 533 019a FFF7FEFF 		bl	vQueueDelete
  49:../FreeRTOS_EC/Source/CQueue.cpp **** 		m_handleQueue = NULL;
 534              		.loc 3 49 0
 535 019e 7B68     		ldr	r3, [r7, #4]
 536 01a0 4FF00002 		mov	r2, #0
 537 01a4 5A60     		str	r2, [r3, #4]
 538              	.L28:
  50:../FreeRTOS_EC/Source/CQueue.cpp **** 	}
  51:../FreeRTOS_EC/Source/CQueue.cpp **** }
 539              		.loc 3 51 0
 540 01a6 07F10807 		add	r7, r7, #8
 541 01aa BD46     		mov	sp, r7
 542 01ac 80BD     		pop	{r7, pc}
 543              		.cfi_endproc
 544              	.LFE139:
 546              		.global	_ZTV6CQueue
 547              		.section	.rodata._ZTV6CQueue,"a",%progbits
 548              		.align	3
 551              	_ZTV6CQueue:
 552 0000 00000000 		.word	0
 553 0004 00000000 		.word	0
 554 0008 00000000 		.word	_ZNK6CQueue7IsValidEv
 555 000c 00000000 		.word	_ZN6CQueue6AttachEPv
 556 0010 00000000 		.word	_ZN6CQueue6DetachEv
 557 0014 00000000 		.word	_ZN6CQueueD1Ev
 558 0018 00000000 		.word	_ZN6CQueueD0Ev
 559              		.weak	_ZTV12IFreeRTOSObj
 560 001c 00000000 		.section	.rodata._ZTV12IFreeRTOSObj,"aG",%progbits,_ZTV12IFreeRTOSObj,comdat
 561              		.align	3
 564              	_ZTV12IFreeRTOSObj:
 565 0000 00000000 		.word	0
 566 0004 00000000 		.word	0
 567 0008 00000000 		.word	__cxa_pure_virtual
 568 000c 00000000 		.word	__cxa_pure_virtual
 569 0010 00000000 		.word	__cxa_pure_virtual
 570 0014 00000000 		.section	.rodata._ZZN6CQueue6AttachEPvE19__PRETTY_FUNCTION__,"a",%progbits
 571              		.align	2
 574              	_ZZN6CQueue6AttachEPvE19__PRETTY_FUNCTION__:
 575 0000 76697274 		.ascii	"virtual void CQueue::Attach(xGenericHandle)\000"
 575      75616C20 
 575      766F6964 
 575      20435175 
 575      6575653A 
 576              		.section	.rodata._ZZN6CQueue6CreateEmmE19__PRETTY_FUNCTION__,"a",%progbits
 577              		.align	2
 580              	_ZZN6CQueue6CreateEmmE19__PRETTY_FUNCTION__:
 581 0000 43517565 		.ascii	"CQueue& CQueue::Create(long unsigned int, long unsi"
 581      75652620 
 581      43517565 
 581      75653A3A 
 581      43726561 
 582 0033 676E6564 		.ascii	"gned int)\000"
 582      20696E74 
 582      2900
 583              		.weak	_ZN12IFreeRTOSObjC1Ev
 584              		.thumb_set _ZN12IFreeRTOSObjC1Ev,_ZN12IFreeRTOSObjC2Ev
 585              		.global	_ZN6CQueueC1Ev
 586              		.thumb_set _ZN6CQueueC1Ev,_ZN6CQueueC2Ev
 587              		.global	_ZN6CQueueD1Ev
 588              		.thumb_set _ZN6CQueueD1Ev,_ZN6CQueueD2Ev
 589              		.global	_ZN6CQueueC1EPv
 590              		.thumb_set _ZN6CQueueC1EPv,_ZN6CQueueC2EPv
 591 003d 000000   		.text
 592              	.Letext0:
 593              		.file 4 "d:\\elektronik\\ides\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib
 594              		.file 5 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../So
 595              		.file 6 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/queue.h"
 596              		.file 7 "D:\\Elektronik\\Projekte\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CQueue.cpp
  C:\TEMP\ccwVXL9D.s:20     .text._ZNK6CQueue7IsValidEv:00000000 $t
  C:\TEMP\ccwVXL9D.s:25     .text._ZNK6CQueue7IsValidEv:00000000 _ZNK6CQueue7IsValidEv
  C:\TEMP\ccwVXL9D.s:62     .text._ZN6CQueue6DetachEv:00000000 $t
  C:\TEMP\ccwVXL9D.s:67     .text._ZN6CQueue6DetachEv:00000000 _ZN6CQueue6DetachEv
  C:\TEMP\ccwVXL9D.s:107    .text._ZN12IFreeRTOSObjC2Ev:00000000 $t
  C:\TEMP\ccwVXL9D.s:112    .text._ZN12IFreeRTOSObjC2Ev:00000000 _ZN12IFreeRTOSObjC2Ev
  C:\TEMP\ccwVXL9D.s:146    .text._ZN12IFreeRTOSObjC2Ev:0000001c $d
  C:\TEMP\ccwVXL9D.s:564    .rodata._ZTV12IFreeRTOSObj:00000000 _ZTV12IFreeRTOSObj
  C:\TEMP\ccwVXL9D.s:151    .text:00000000 $t
  C:\TEMP\ccwVXL9D.s:156    .text:00000000 _ZN6CQueueC2Ev
  C:\TEMP\ccwVXL9D.s:197    .text:0000002c $d
  C:\TEMP\ccwVXL9D.s:551    .rodata._ZTV6CQueue:00000000 _ZTV6CQueue
  C:\TEMP\ccwVXL9D.s:201    .text:00000030 $t
  C:\TEMP\ccwVXL9D.s:206    .text:00000030 _ZN6CQueueD2Ev
  C:\TEMP\ccwVXL9D.s:506    .text:00000184 _ZN6CQueue6DeleteEv
  C:\TEMP\ccwVXL9D.s:259    .text:00000070 $d
  C:\TEMP\ccwVXL9D.s:263    .text:00000074 $t
  C:\TEMP\ccwVXL9D.s:268    .text:00000074 _ZN6CQueueD0Ev
  C:\TEMP\ccwVXL9D.s:206    .text:00000030 _ZN6CQueueD1Ev
  C:\TEMP\ccwVXL9D.s:304    .text:00000094 _ZN6CQueueC2EPv
  C:\TEMP\ccwVXL9D.s:442    .text:00000130 _ZN6CQueue6AttachEPv
  C:\TEMP\ccwVXL9D.s:345    .text:000000c0 $d
  C:\TEMP\ccwVXL9D.s:350    .rodata:00000000 $d
  C:\TEMP\ccwVXL9D.s:351    .rodata:00000000 .LC0
  C:\TEMP\ccwVXL9D.s:354    .rodata:00000024 .LC1
  C:\TEMP\ccwVXL9D.s:357    .text:000000c4 $t
  C:\TEMP\ccwVXL9D.s:362    .text:000000c4 _ZN6CQueue6CreateEmm
  C:\TEMP\ccwVXL9D.s:580    .rodata._ZZN6CQueue6CreateEmmE19__PRETTY_FUNCTION__:00000000 _ZZN6CQueue6CreateEmmE19__PRETTY_FUNCTION__
  C:\TEMP\ccwVXL9D.s:434    .rodata:00000030 .LC2
  C:\TEMP\ccwVXL9D.s:574    .rodata._ZZN6CQueue6AttachEPvE19__PRETTY_FUNCTION__:00000000 _ZZN6CQueue6AttachEPvE19__PRETTY_FUNCTION__
  C:\TEMP\ccwVXL9D.s:548    .rodata._ZTV6CQueue:00000000 $d
  C:\TEMP\ccwVXL9D.s:561    .rodata._ZTV12IFreeRTOSObj:00000000 $d
  C:\TEMP\ccwVXL9D.s:571    .rodata._ZZN6CQueue6AttachEPvE19__PRETTY_FUNCTION__:00000000 $d
  C:\TEMP\ccwVXL9D.s:577    .rodata._ZZN6CQueue6CreateEmmE19__PRETTY_FUNCTION__:00000000 $d
  C:\TEMP\ccwVXL9D.s:112    .text._ZN12IFreeRTOSObjC2Ev:00000000 _ZN12IFreeRTOSObjC1Ev
  C:\TEMP\ccwVXL9D.s:156    .text:00000000 _ZN6CQueueC1Ev
  C:\TEMP\ccwVXL9D.s:304    .text:00000094 _ZN6CQueueC1EPv
                     .debug_frame:00000010 $d
                           .group:00000000 _ZN12IFreeRTOSObjC5Ev

UNDEFINED SYMBOLS
_ZdlPv
__assert_func
xQueueCreate
vQueueDelete
__cxa_pure_virtual
