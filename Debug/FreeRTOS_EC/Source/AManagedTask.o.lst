   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"AManagedTask.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN5CTask13EnterCriticalEv,"axG",%progbits,_ZN5CTask13EnterCriticalEv,comdat
  19              		.align	2
  20              		.weak	_ZN5CTask13EnterCriticalEv
  21              		.thumb
  22              		.thumb_func
  24              	_ZN5CTask13EnterCriticalEv:
  25              	.LFB112:
  26              		.file 1 "../FreeRTOS_EC/Source/CTask.h"
   1:../FreeRTOS_EC/Source/CTask.h **** /**
   2:../FreeRTOS_EC/Source/CTask.h ****  * @file CTask.h
   3:../FreeRTOS_EC/Source/CTask.h ****  * @class CTask
   4:../FreeRTOS_EC/Source/CTask.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CTask.h ****  *
   6:../FreeRTOS_EC/Source/CTask.h ****  * The CTask class wraps a native FreeRTOS task handle (xTaskHandle). To create a task instance
   7:../FreeRTOS_EC/Source/CTask.h ****  * an object of this class and then call its CTask::Create method like showed in the following samp
   8:../FreeRTOS_EC/Source/CTask.h ****  * \code
   9:../FreeRTOS_EC/Source/CTask.h ****  * CTask g_aTask // global task declaration.
  10:../FreeRTOS_EC/Source/CTask.h ****  *
  11:../FreeRTOS_EC/Source/CTask.h ****  * void main()
  12:../FreeRTOS_EC/Source/CTask.h ****  * {
  13:../FreeRTOS_EC/Source/CTask.h ****  * 	g_aTask.Create(task_control_func, "Led2", configMINIMAL_STACK_SIZE, mainFLASH_TASK_PRIORITY);
  14:../FreeRTOS_EC/Source/CTask.h ****  *
  15:../FreeRTOS_EC/Source/CTask.h ****  * 	CFreeRTOS::StartScheduler();
  16:../FreeRTOS_EC/Source/CTask.h ****  * }
  17:../FreeRTOS_EC/Source/CTask.h ****  * \endcode
  18:../FreeRTOS_EC/Source/CTask.h ****  *
  19:../FreeRTOS_EC/Source/CTask.h ****  * Usually the application subclass this class to create an application specific task object.
  20:../FreeRTOS_EC/Source/CTask.h ****  * See the CHelloWorld class for an example.
  21:../FreeRTOS_EC/Source/CTask.h ****  *
  22:../FreeRTOS_EC/Source/CTask.h ****  * \sa <a href="http://www.freertos.org/taskandcr.html">task documentation</a> in the FreeRTOS web 
  23:../FreeRTOS_EC/Source/CTask.h ****  *
  24:../FreeRTOS_EC/Source/CTask.h ****  * @date Jul 5, 2010
  25:../FreeRTOS_EC/Source/CTask.h ****  * @author Stefano Oliveri (STF12.net)
  26:../FreeRTOS_EC/Source/CTask.h ****  *         E-Mail: software@stf12.net
  27:../FreeRTOS_EC/Source/CTask.h ****  */
  28:../FreeRTOS_EC/Source/CTask.h **** 
  29:../FreeRTOS_EC/Source/CTask.h **** #ifndef CTASK_H_
  30:../FreeRTOS_EC/Source/CTask.h **** #define CTASK_H_
  31:../FreeRTOS_EC/Source/CTask.h **** 
  32:../FreeRTOS_EC/Source/CTask.h **** #include "FreeRTOS.h"
  33:../FreeRTOS_EC/Source/CTask.h **** #include "task.h"
  34:../FreeRTOS_EC/Source/CTask.h **** #include "IFreeRTOSProtocol.h"
  35:../FreeRTOS_EC/Source/CTask.h **** 
  36:../FreeRTOS_EC/Source/CTask.h **** class CTask: public IFreeRTOSObj {
  37:../FreeRTOS_EC/Source/CTask.h **** 
  38:../FreeRTOS_EC/Source/CTask.h **** 	/**
  39:../FreeRTOS_EC/Source/CTask.h **** 	 * Specifies the native FreeRTOS handle managed by an instance of this class.
  40:../FreeRTOS_EC/Source/CTask.h **** 	 */
  41:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle m_handleTask;
  42:../FreeRTOS_EC/Source/CTask.h **** 
  43:../FreeRTOS_EC/Source/CTask.h **** public:
  44:../FreeRTOS_EC/Source/CTask.h **** 	/**
  45:../FreeRTOS_EC/Source/CTask.h **** 	 * The default constructor. It initializes the object without attaching it to a native FreeRTOS ha
  46:../FreeRTOS_EC/Source/CTask.h **** 	 * Call the Create method to allocate a task handle and attach it to the object.
  47:../FreeRTOS_EC/Source/CTask.h **** 	 */
  48:../FreeRTOS_EC/Source/CTask.h **** 	CTask();
  49:../FreeRTOS_EC/Source/CTask.h **** 
  50:../FreeRTOS_EC/Source/CTask.h **** 	/**
  51:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a CTask instance and attach it to a valid handle.
  52:../FreeRTOS_EC/Source/CTask.h **** 	 *
  53:../FreeRTOS_EC/Source/CTask.h **** 	 * @param handleTask a valid task handle.
  54:../FreeRTOS_EC/Source/CTask.h **** 	 */
  55:../FreeRTOS_EC/Source/CTask.h **** 	CTask(xTaskHandle handleTask);
  56:../FreeRTOS_EC/Source/CTask.h **** 
  57:../FreeRTOS_EC/Source/CTask.h **** 	/**
  58:../FreeRTOS_EC/Source/CTask.h **** 	 * Delete the native FreeRTOS task.
  59:../FreeRTOS_EC/Source/CTask.h **** 	 */
  60:../FreeRTOS_EC/Source/CTask.h **** 	virtual ~CTask();
  61:../FreeRTOS_EC/Source/CTask.h **** 
  62:../FreeRTOS_EC/Source/CTask.h **** 	/**
  63:../FreeRTOS_EC/Source/CTask.h **** 	 * Retrieve the native FreeRTOS task handle attached to this object.
  64:../FreeRTOS_EC/Source/CTask.h **** 	 *
  65:../FreeRTOS_EC/Source/CTask.h **** 	 * @return the native FreeRTOS task handle attached to this object.
  66:../FreeRTOS_EC/Source/CTask.h **** 	 */
  67:../FreeRTOS_EC/Source/CTask.h **** 	inline operator xTaskHandle() const { return m_handleTask; }
  68:../FreeRTOS_EC/Source/CTask.h **** 
  69:../FreeRTOS_EC/Source/CTask.h **** 	// FreeRTOS API Wrappers
  70:../FreeRTOS_EC/Source/CTask.h **** 
  71:../FreeRTOS_EC/Source/CTask.h **** 	/**
  72:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a FreeRTOS task and attach its handle to the receiver object.
  73:../FreeRTOS_EC/Source/CTask.h **** 	 *
  74:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00125.html">xTaskCreate</a> FreeRTOS API function.
  75:../FreeRTOS_EC/Source/CTask.h **** 	 */
  76:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usS
  77:../FreeRTOS_EC/Source/CTask.h **** 
  78:../FreeRTOS_EC/Source/CTask.h **** 	/**
  79:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a Memory Protection Unit (MPU) restricted task and attach its handle to the receiver obj
  80:../FreeRTOS_EC/Source/CTask.h **** 	 *
  81:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/xTaskCreateRestricted.html">xTaskCreateRestricted</a> Free
  82:../FreeRTOS_EC/Source/CTask.h **** 	 */
  83:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE CreateRestricted(xTaskParameters *pxTaskDefinition);
  84:../FreeRTOS_EC/Source/CTask.h **** 
  85:../FreeRTOS_EC/Source/CTask.h **** 	/**
  86:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00126.html">vTaskDelete</a>  FreeRTOS API function.
  87:../FreeRTOS_EC/Source/CTask.h **** 	 */
  88:../FreeRTOS_EC/Source/CTask.h **** 	void Delete();
  89:../FreeRTOS_EC/Source/CTask.h **** 
  90:../FreeRTOS_EC/Source/CTask.h **** 	/**
  91:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00127.html">vTaskDelay</a>  FreeRTOS API function.
  92:../FreeRTOS_EC/Source/CTask.h **** 	 */
  93:../FreeRTOS_EC/Source/CTask.h **** 	inline static void Delay(portTickType xTicksToDelay);
  94:../FreeRTOS_EC/Source/CTask.h **** 
  95:../FreeRTOS_EC/Source/CTask.h **** 	/**
  96:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/vtaskdelayuntil.html">vTaskDelayUntil</a>  FreeRTOS API fu
  97:../FreeRTOS_EC/Source/CTask.h **** 	 */
  98:../FreeRTOS_EC/Source/CTask.h ****     inline static void DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement);
  99:../FreeRTOS_EC/Source/CTask.h **** 
 100:../FreeRTOS_EC/Source/CTask.h ****     /**
 101:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskYIELD">taskYIELD</a>  FreeRTOS API func
 102:../FreeRTOS_EC/Source/CTask.h ****      */
 103:../FreeRTOS_EC/Source/CTask.h ****     inline static void Yeld() { taskYIELD(); }
 104:../FreeRTOS_EC/Source/CTask.h **** 
 105:../FreeRTOS_EC/Source/CTask.h ****     /**
 106:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a> 
 107:../FreeRTOS_EC/Source/CTask.h ****      */
 108:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnterCritical() { taskENTER_CRITICAL(); }
  27              		.loc 1 108 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  39              		.loc 1 108 0
  40 0004 FFF7FEFF 		bl	vPortEnterCritical
  41 0008 80BD     		pop	{r7, pc}
  42              		.cfi_endproc
  43              	.LFE112:
  45 000a 00BF     		.section	.text._ZN5CTask12ExitCriticalEv,"axG",%progbits,_ZN5CTask12ExitCriticalEv,comdat
  46              		.align	2
  47              		.weak	_ZN5CTask12ExitCriticalEv
  48              		.thumb
  49              		.thumb_func
  51              	_ZN5CTask12ExitCriticalEv:
  52              	.LFB113:
 109:../FreeRTOS_EC/Source/CTask.h **** 
 110:../FreeRTOS_EC/Source/CTask.h ****     /**
 111:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  F
 112:../FreeRTOS_EC/Source/CTask.h ****      */
 113:../FreeRTOS_EC/Source/CTask.h ****     inline static void ExitCritical() { taskEXIT_CRITICAL(); }
  53              		.loc 1 113 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 1, uses_anonymous_args = 0
  57 0000 80B5     		push	{r7, lr}
  58              	.LCFI2:
  59              		.cfi_def_cfa_offset 8
  60              		.cfi_offset 14, -4
  61              		.cfi_offset 7, -8
  62 0002 00AF     		add	r7, sp, #0
  63              	.LCFI3:
  64              		.cfi_def_cfa_register 7
  65              		.loc 1 113 0
  66 0004 FFF7FEFF 		bl	vPortExitCritical
  67 0008 80BD     		pop	{r7, pc}
  68              		.cfi_endproc
  69              	.LFE113:
  71 000a 00BF     		.section	.text._ZNK5CTask7IsValidEv,"axG",%progbits,_ZNK5CTask7IsValidEv,comdat
  72              		.align	2
  73              		.weak	_ZNK5CTask7IsValidEv
  74              		.thumb
  75              		.thumb_func
  77              	_ZNK5CTask7IsValidEv:
  78              	.LFB132:
 114:../FreeRTOS_EC/Source/CTask.h **** 
 115:../FreeRTOS_EC/Source/CTask.h ****     /**
 116:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskDISABLE_INTERRUPTS">taskDISABLE_INTERRU
 117:../FreeRTOS_EC/Source/CTask.h ****      */
 118:../FreeRTOS_EC/Source/CTask.h ****     inline static void DisableInterrupt() { taskDISABLE_INTERRUPTS(); }
 119:../FreeRTOS_EC/Source/CTask.h **** 
 120:../FreeRTOS_EC/Source/CTask.h ****     /**
 121:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENABLE_INTERRUPTS">taskENABLE_INTERRUPT
 122:../FreeRTOS_EC/Source/CTask.h ****      */
 123:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnableInterrupt() { taskENABLE_INTERRUPTS(); }
 124:../FreeRTOS_EC/Source/CTask.h **** 
 125:../FreeRTOS_EC/Source/CTask.h ****     /**
 126:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetCurrentTaskHandle">xTaskGetCurrentT
 127:../FreeRTOS_EC/Source/CTask.h ****      */
 128:../FreeRTOS_EC/Source/CTask.h ****     inline static xTaskHandle GetCurrentTaskHandle();
 129:../FreeRTOS_EC/Source/CTask.h **** 
 130:../FreeRTOS_EC/Source/CTask.h ****     /**
 131:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetTickCount">xTaskGetTickCount</a>  F
 132:../FreeRTOS_EC/Source/CTask.h ****      */
 133:../FreeRTOS_EC/Source/CTask.h ****     inline static portTickType GetTickCount();
 134:../FreeRTOS_EC/Source/CTask.h **** 
 135:../FreeRTOS_EC/Source/CTask.h ****     /**
 136:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetSchedulerState">xTaskGetSchedulerSt
 137:../FreeRTOS_EC/Source/CTask.h ****      */
 138:../FreeRTOS_EC/Source/CTask.h ****     inline static portBASE_TYPE GetSchedulerState();
 139:../FreeRTOS_EC/Source/CTask.h **** 
 140:../FreeRTOS_EC/Source/CTask.h ****     /**
 141:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#usTaskGetNumberOfTasks">uxTaskGetNumberOfTa
 142:../FreeRTOS_EC/Source/CTask.h ****      */
 143:../FreeRTOS_EC/Source/CTask.h ****     inline static unsigned portBASE_TYPE GetNumberOfTasks();
 144:../FreeRTOS_EC/Source/CTask.h **** 
 145:../FreeRTOS_EC/Source/CTask.h ****     /**
 146:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskList">vTaskList</a>  FreeRTOS API func
 147:../FreeRTOS_EC/Source/CTask.h ****      */
 148:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetTaskList(portCHAR *pcWriteBuffer);
 149:../FreeRTOS_EC/Source/CTask.h **** 
 150:../FreeRTOS_EC/Source/CTask.h ****     /**
 151:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskGetRunTimeStats">vTaskGetRunTimeStats<
 152:../FreeRTOS_EC/Source/CTask.h ****      */
 153:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetRunTimeStats(portCHAR *pcWriteBuffer);
 154:../FreeRTOS_EC/Source/CTask.h **** 
 155:../FreeRTOS_EC/Source/CTask.h ****     /**
 156:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00128.html">uxTaskPriorityGet</a>  FreeRTOS API functi
 157:../FreeRTOS_EC/Source/CTask.h ****      */
 158:../FreeRTOS_EC/Source/CTask.h ****     inline unsigned portBASE_TYPE PriorityGet() const;
 159:../FreeRTOS_EC/Source/CTask.h **** 
 160:../FreeRTOS_EC/Source/CTask.h ****     /**
 161:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00129.html">vTaskPrioritySet</a>  FreeRTOS API functio
 162:../FreeRTOS_EC/Source/CTask.h ****      */
 163:../FreeRTOS_EC/Source/CTask.h ****     inline void PrioritySet(unsigned portBASE_TYPE uxNewPriority);
 164:../FreeRTOS_EC/Source/CTask.h **** 
 165:../FreeRTOS_EC/Source/CTask.h ****     /**
 166:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00130.html">vTaskSuspend</a>  FreeRTOS API function.
 167:../FreeRTOS_EC/Source/CTask.h ****      */
 168:../FreeRTOS_EC/Source/CTask.h ****     inline void Suspend();
 169:../FreeRTOS_EC/Source/CTask.h **** 
 170:../FreeRTOS_EC/Source/CTask.h ****     /**
 171:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00131.html">vTaskResume</a>  FreeRTOS API function.
 172:../FreeRTOS_EC/Source/CTask.h ****      */
 173:../FreeRTOS_EC/Source/CTask.h ****     inline void Resume();
 174:../FreeRTOS_EC/Source/CTask.h **** 
 175:../FreeRTOS_EC/Source/CTask.h ****     /**
 176:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/taskresumefromisr.html">xTaskResumeFromISR</a>  FreeRTO
 177:../FreeRTOS_EC/Source/CTask.h ****      */
 178:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE ResumeFromISR();
 179:../FreeRTOS_EC/Source/CTask.h **** 
 180:../FreeRTOS_EC/Source/CTask.h ****     /**
 181:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskSetApplicationTag.html">vTaskSetApplicationTaskTag
 182:../FreeRTOS_EC/Source/CTask.h ****      */
 183:../FreeRTOS_EC/Source/CTask.h ****     inline void SetApplicationTag(pdTASK_HOOK_CODE pxTagValue);
 184:../FreeRTOS_EC/Source/CTask.h **** 
 185:../FreeRTOS_EC/Source/CTask.h ****     /**
 186:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/xTaskCallApplicationTaskHook.html">xTaskCallApplication
 187:../FreeRTOS_EC/Source/CTask.h ****      */
 188:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE CallApplicationTaskHook(void *pvParameter);
 189:../FreeRTOS_EC/Source/CTask.h **** 
 190:../FreeRTOS_EC/Source/CTask.h ****     /**
 191:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskAllocateMPURegions.html">vTaskAllocateMPURegions</
 192:../FreeRTOS_EC/Source/CTask.h ****      */
 193:../FreeRTOS_EC/Source/CTask.h ****     inline void AllocateMPURegions(const xMemoryRegion * const xRegions);
 194:../FreeRTOS_EC/Source/CTask.h **** 
 195:../FreeRTOS_EC/Source/CTask.h ****     // FreeRTOS class extension.
 196:../FreeRTOS_EC/Source/CTask.h **** 	inline bool IsValid() const;
 197:../FreeRTOS_EC/Source/CTask.h **** 	void Attach(xGenericHandle handle);
 198:../FreeRTOS_EC/Source/CTask.h **** 	inline xGenericHandle Detach();
 199:../FreeRTOS_EC/Source/CTask.h **** };
 200:../FreeRTOS_EC/Source/CTask.h **** 
 201:../FreeRTOS_EC/Source/CTask.h **** // inline method
 202:../FreeRTOS_EC/Source/CTask.h **** ////////////////
 203:../FreeRTOS_EC/Source/CTask.h **** 
 204:../FreeRTOS_EC/Source/CTask.h **** inline
 205:../FreeRTOS_EC/Source/CTask.h **** void CTask::Delay(portTickType xTicksToDelay) {
 206:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelay == 1 )
 207:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelay(xTicksToDelay);
 208:../FreeRTOS_EC/Source/CTask.h **** #endif
 209:../FreeRTOS_EC/Source/CTask.h **** }
 210:../FreeRTOS_EC/Source/CTask.h **** 
 211:../FreeRTOS_EC/Source/CTask.h **** inline
 212:../FreeRTOS_EC/Source/CTask.h **** void CTask::DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement) {
 213:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 214:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelayUntil(pxPreviousWakeTime, xTimeIncrement);
 215:../FreeRTOS_EC/Source/CTask.h **** #endif
 216:../FreeRTOS_EC/Source/CTask.h **** }
 217:../FreeRTOS_EC/Source/CTask.h **** 
 218:../FreeRTOS_EC/Source/CTask.h **** inline
 219:../FreeRTOS_EC/Source/CTask.h **** xTaskHandle CTask::GetCurrentTaskHandle() {
 220:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetCurrentTaskHandle();
 221:../FreeRTOS_EC/Source/CTask.h **** }
 222:../FreeRTOS_EC/Source/CTask.h **** 
 223:../FreeRTOS_EC/Source/CTask.h **** inline
 224:../FreeRTOS_EC/Source/CTask.h **** portTickType CTask::GetTickCount() {
 225:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetTickCount();
 226:../FreeRTOS_EC/Source/CTask.h **** }
 227:../FreeRTOS_EC/Source/CTask.h **** 
 228:../FreeRTOS_EC/Source/CTask.h **** inline
 229:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::GetSchedulerState() {
 230:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_xTaskGetSchedulerState == 1 )
 231:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetSchedulerState();
 232:../FreeRTOS_EC/Source/CTask.h **** #else
 233:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 234:../FreeRTOS_EC/Source/CTask.h **** #endif
 235:../FreeRTOS_EC/Source/CTask.h **** }
 236:../FreeRTOS_EC/Source/CTask.h **** 
 237:../FreeRTOS_EC/Source/CTask.h **** inline
 238:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::GetNumberOfTasks() {
 239:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskGetNumberOfTasks();
 240:../FreeRTOS_EC/Source/CTask.h **** }
 241:../FreeRTOS_EC/Source/CTask.h **** 
 242:../FreeRTOS_EC/Source/CTask.h **** inline
 243:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetTaskList(portCHAR *pcWriteBuffer) {
 244:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_TRACE_FACILITY == 1 )
 245:../FreeRTOS_EC/Source/CTask.h **** 	vTaskList((signed portCHAR*)pcWriteBuffer);
 246:../FreeRTOS_EC/Source/CTask.h **** #endif
 247:../FreeRTOS_EC/Source/CTask.h **** }
 248:../FreeRTOS_EC/Source/CTask.h **** 
 249:../FreeRTOS_EC/Source/CTask.h **** inline
 250:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetRunTimeStats(portCHAR *pcWriteBuffer) {
 251:../FreeRTOS_EC/Source/CTask.h **** #if (configGENERATE_RUN_TIME_STATS == 1)
 252:../FreeRTOS_EC/Source/CTask.h **** 	vTaskGetRunTimeStats((signed portCHAR*)pcWriteBuffer);
 253:../FreeRTOS_EC/Source/CTask.h **** #endif
 254:../FreeRTOS_EC/Source/CTask.h **** }
 255:../FreeRTOS_EC/Source/CTask.h **** 
 256:../FreeRTOS_EC/Source/CTask.h **** inline
 257:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::PriorityGet() const {
 258:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 259:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskPriorityGet(m_handleTask);
 260:../FreeRTOS_EC/Source/CTask.h **** #else
 261:../FreeRTOS_EC/Source/CTask.h **** 	return -1;
 262:../FreeRTOS_EC/Source/CTask.h **** #endif
 263:../FreeRTOS_EC/Source/CTask.h **** }
 264:../FreeRTOS_EC/Source/CTask.h **** 
 265:../FreeRTOS_EC/Source/CTask.h **** inline
 266:../FreeRTOS_EC/Source/CTask.h **** void CTask::PrioritySet(unsigned portBASE_TYPE uxNewPriority) {
 267:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 268:../FreeRTOS_EC/Source/CTask.h **** 	vTaskPrioritySet(m_handleTask, uxNewPriority);
 269:../FreeRTOS_EC/Source/CTask.h **** #endif
 270:../FreeRTOS_EC/Source/CTask.h **** }
 271:../FreeRTOS_EC/Source/CTask.h **** 
 272:../FreeRTOS_EC/Source/CTask.h **** inline
 273:../FreeRTOS_EC/Source/CTask.h **** void CTask::Suspend() {
 274:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 275:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSuspend(m_handleTask);
 276:../FreeRTOS_EC/Source/CTask.h **** #endif
 277:../FreeRTOS_EC/Source/CTask.h **** }
 278:../FreeRTOS_EC/Source/CTask.h **** 
 279:../FreeRTOS_EC/Source/CTask.h **** inline
 280:../FreeRTOS_EC/Source/CTask.h **** void CTask::Resume() {
 281:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 282:../FreeRTOS_EC/Source/CTask.h **** 	vTaskResume(m_handleTask);
 283:../FreeRTOS_EC/Source/CTask.h **** #endif
 284:../FreeRTOS_EC/Source/CTask.h **** }
 285:../FreeRTOS_EC/Source/CTask.h **** 
 286:../FreeRTOS_EC/Source/CTask.h **** inline
 287:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::ResumeFromISR() {
 288:../FreeRTOS_EC/Source/CTask.h **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
 289:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskResumeFromISR(m_handleTask);
 290:../FreeRTOS_EC/Source/CTask.h **** #else
 291:../FreeRTOS_EC/Source/CTask.h **** 	return pdFALSE;
 292:../FreeRTOS_EC/Source/CTask.h **** #endif
 293:../FreeRTOS_EC/Source/CTask.h **** }
 294:../FreeRTOS_EC/Source/CTask.h **** 
 295:../FreeRTOS_EC/Source/CTask.h **** inline
 296:../FreeRTOS_EC/Source/CTask.h **** void CTask::SetApplicationTag(pdTASK_HOOK_CODE pxTagValue) {
 297:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 298:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSetApplicationTaskTag(m_handleTask, pxTagValue);
 299:../FreeRTOS_EC/Source/CTask.h **** #endif
 300:../FreeRTOS_EC/Source/CTask.h **** }
 301:../FreeRTOS_EC/Source/CTask.h **** 
 302:../FreeRTOS_EC/Source/CTask.h **** inline
 303:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::CallApplicationTaskHook(void *pvParameter) {
 304:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 305:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskCallApplicationTaskHook(m_handleTask, pvParameter);
 306:../FreeRTOS_EC/Source/CTask.h **** #else
 307:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 308:../FreeRTOS_EC/Source/CTask.h **** #endif
 309:../FreeRTOS_EC/Source/CTask.h **** }
 310:../FreeRTOS_EC/Source/CTask.h **** 
 311:../FreeRTOS_EC/Source/CTask.h **** inline
 312:../FreeRTOS_EC/Source/CTask.h **** void CTask::AllocateMPURegions(const xMemoryRegion * const xRegions) {
 313:../FreeRTOS_EC/Source/CTask.h **** #if ( portUSING_MPU_WRAPPERS == 1 )
 314:../FreeRTOS_EC/Source/CTask.h **** 	vTaskAllocateMPURegions(m_handleTask, xRegions);
 315:../FreeRTOS_EC/Source/CTask.h **** #endif
 316:../FreeRTOS_EC/Source/CTask.h **** }
 317:../FreeRTOS_EC/Source/CTask.h **** 
 318:../FreeRTOS_EC/Source/CTask.h **** inline
 319:../FreeRTOS_EC/Source/CTask.h **** bool CTask::IsValid() const{
  79              		.loc 1 319 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 8
  82              		@ frame_needed = 1, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84 0000 80B4     		push	{r7}
  85              	.LCFI4:
  86              		.cfi_def_cfa_offset 4
  87              		.cfi_offset 7, -4
  88 0002 83B0     		sub	sp, sp, #12
  89              	.LCFI5:
  90              		.cfi_def_cfa_offset 16
  91 0004 00AF     		add	r7, sp, #0
  92              	.LCFI6:
  93              		.cfi_def_cfa_register 7
  94 0006 7860     		str	r0, [r7, #4]
 320:../FreeRTOS_EC/Source/CTask.h **** 	return m_handleTask != NULL;
  95              		.loc 1 320 0
  96 0008 7B68     		ldr	r3, [r7, #4]
  97 000a 5B68     		ldr	r3, [r3, #4]
  98 000c 002B     		cmp	r3, #0
  99 000e 0CBF     		ite	eq
 100 0010 0023     		moveq	r3, #0
 101 0012 0123     		movne	r3, #1
 102 0014 DBB2     		uxtb	r3, r3
 321:../FreeRTOS_EC/Source/CTask.h **** }
 103              		.loc 1 321 0
 104 0016 1846     		mov	r0, r3
 105 0018 07F10C07 		add	r7, r7, #12
 106 001c BD46     		mov	sp, r7
 107 001e 80BC     		pop	{r7}
 108 0020 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE132:
 112 0022 00BF     		.section	.text._ZN5CTask6DetachEv,"axG",%progbits,_ZN5CTask6DetachEv,comdat
 113              		.align	2
 114              		.weak	_ZN5CTask6DetachEv
 115              		.thumb
 116              		.thumb_func
 118              	_ZN5CTask6DetachEv:
 119              	.LFB133:
 322:../FreeRTOS_EC/Source/CTask.h **** 
 323:../FreeRTOS_EC/Source/CTask.h **** inline
 324:../FreeRTOS_EC/Source/CTask.h **** xGenericHandle CTask::Detach() {
 120              		.loc 1 324 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 16
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0000 80B4     		push	{r7}
 126              	.LCFI7:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 0002 85B0     		sub	sp, sp, #20
 130              	.LCFI8:
 131              		.cfi_def_cfa_offset 24
 132 0004 00AF     		add	r7, sp, #0
 133              	.LCFI9:
 134              		.cfi_def_cfa_register 7
 135 0006 7860     		str	r0, [r7, #4]
 136              	.LBB2:
 325:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle res = m_handleTask;
 137              		.loc 1 325 0
 138 0008 7B68     		ldr	r3, [r7, #4]
 139 000a 5B68     		ldr	r3, [r3, #4]
 140 000c FB60     		str	r3, [r7, #12]
 326:../FreeRTOS_EC/Source/CTask.h **** 	m_handleTask = NULL;
 141              		.loc 1 326 0
 142 000e 7B68     		ldr	r3, [r7, #4]
 143 0010 4FF00002 		mov	r2, #0
 144 0014 5A60     		str	r2, [r3, #4]
 327:../FreeRTOS_EC/Source/CTask.h **** 	return res;
 145              		.loc 1 327 0
 146 0016 FB68     		ldr	r3, [r7, #12]
 147              	.LBE2:
 328:../FreeRTOS_EC/Source/CTask.h **** }
 148              		.loc 1 328 0
 149 0018 1846     		mov	r0, r3
 150 001a 07F11407 		add	r7, r7, #20
 151 001e BD46     		mov	sp, r7
 152 0020 80BC     		pop	{r7}
 153 0022 7047     		bx	lr
 154              		.cfi_endproc
 155              	.LFE133:
 157              		.section	.text._ZN12AManagedTask12HardwareInitEv,"axG",%progbits,_ZN12AManagedTask12HardwareInitEv
 158              		.align	2
 159              		.weak	_ZN12AManagedTask12HardwareInitEv
 160              		.thumb
 161              		.thumb_func
 163              	_ZN12AManagedTask12HardwareInitEv:
 164              	.LFB134:
 165              		.file 2 "../FreeRTOS_EC/Source/AManagedTask.h"
   1:../FreeRTOS_EC/Source/AManagedTask.h **** /**
   2:../FreeRTOS_EC/Source/AManagedTask.h ****  * @file AManagedTask.h
   3:../FreeRTOS_EC/Source/AManagedTask.h ****  * @class AManagedTask
   4:../FreeRTOS_EC/Source/AManagedTask.h ****  *
   5:../FreeRTOS_EC/Source/AManagedTask.h ****  * This class extend the CTask in order to provide a more structured and simple to use framework fo
   6:../FreeRTOS_EC/Source/AManagedTask.h ****  * FreeRTOS programming. All AManagedTask derived objects are grouped in linked list. Please note t
   7:../FreeRTOS_EC/Source/AManagedTask.h ****  * this data structure can be modified in a next release. The framework manage these task objects
   8:../FreeRTOS_EC/Source/AManagedTask.h ****  * by calling their methods during the application life cycle.
   9:../FreeRTOS_EC/Source/AManagedTask.h ****  *
  10:../FreeRTOS_EC/Source/AManagedTask.h ****  * The application extend this abstract class to create a managed task and provide its control loop
  11:../FreeRTOS_EC/Source/AManagedTask.h ****  * \code
  12:../FreeRTOS_EC/Source/AManagedTask.h ****  * class CMyPipe: public AManagedTask
  13:../FreeRTOS_EC/Source/AManagedTask.h ****  * {
  14:../FreeRTOS_EC/Source/AManagedTask.h ****  *   // Task private variables.
  15:../FreeRTOS_EC/Source/AManagedTask.h ****  *
  16:../FreeRTOS_EC/Source/AManagedTask.h ****  * public:
  17:../FreeRTOS_EC/Source/AManagedTask.h ****  *   void Run() {  task control loop  };
  18:../FreeRTOS_EC/Source/AManagedTask.h ****  * }
  19:../FreeRTOS_EC/Source/AManagedTask.h ****  * \endcode
  20:../FreeRTOS_EC/Source/AManagedTask.h ****  *
  21:../FreeRTOS_EC/Source/AManagedTask.h ****  * @date Aug 3, 2010
  22:../FreeRTOS_EC/Source/AManagedTask.h ****  * @author Stefano Oliveri
  23:../FreeRTOS_EC/Source/AManagedTask.h ****  *         E-Mail: software@stf12.net
  24:../FreeRTOS_EC/Source/AManagedTask.h ****  */
  25:../FreeRTOS_EC/Source/AManagedTask.h **** 
  26:../FreeRTOS_EC/Source/AManagedTask.h **** /**
  27:../FreeRTOS_EC/Source/AManagedTask.h ****  * @defgroup FreeRTOS_Managed FreeRTOS Managed Class Extension
  28:../FreeRTOS_EC/Source/AManagedTask.h ****  * @ingroup FreeRTOS_CPP_EXT
  29:../FreeRTOS_EC/Source/AManagedTask.h ****  * The FreeRTOS Managed Class Extension are a set of class that provide a structured and
  30:../FreeRTOS_EC/Source/AManagedTask.h ****  * managed framework to develop a FreeRTOS application.
  31:../FreeRTOS_EC/Source/AManagedTask.h ****  * @{
  32:../FreeRTOS_EC/Source/AManagedTask.h ****  */
  33:../FreeRTOS_EC/Source/AManagedTask.h **** 
  34:../FreeRTOS_EC/Source/AManagedTask.h **** #ifndef AMANAGEDTASK_H_
  35:../FreeRTOS_EC/Source/AManagedTask.h **** #define AMANAGEDTASK_H_
  36:../FreeRTOS_EC/Source/AManagedTask.h **** 
  37:../FreeRTOS_EC/Source/AManagedTask.h **** #include "CTask.h"
  38:../FreeRTOS_EC/Source/AManagedTask.h **** 
  39:../FreeRTOS_EC/Source/AManagedTask.h **** class AManagedTask: public CTask {
  40:../FreeRTOS_EC/Source/AManagedTask.h **** 	friend class CFreeRTOS;
  41:../FreeRTOS_EC/Source/AManagedTask.h **** 
  42:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  43:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Specifies the head of the linked list used to group all application managed task.
  44:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  45:../FreeRTOS_EC/Source/AManagedTask.h **** 	static AManagedTask *s_pManagedTaskListHead;
  46:../FreeRTOS_EC/Source/AManagedTask.h **** 
  47:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  48:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Specifies the next managed task in the list or NULL if this is the last managed task.
  49:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  50:../FreeRTOS_EC/Source/AManagedTask.h **** 	AManagedTask *m_pNextManagedTask;
  51:../FreeRTOS_EC/Source/AManagedTask.h **** 
  52:../FreeRTOS_EC/Source/AManagedTask.h **** public:
  53:../FreeRTOS_EC/Source/AManagedTask.h **** 
  54:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  55:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Default constructor.
  56:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  57:../FreeRTOS_EC/Source/AManagedTask.h **** 	AManagedTask();
  58:../FreeRTOS_EC/Source/AManagedTask.h **** 
  59:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  60:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Destructor.
  61:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  62:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual ~AManagedTask();
  63:../FreeRTOS_EC/Source/AManagedTask.h **** 
  64:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  65:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Create the FreeRTOS task attached to this object.
  66:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  67:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param pcName name of the task. Need only for debug purpose.
  68:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param usStackDepth size in word of the task stack.
  69:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param uxPriority task priority. Valid value ar between taskIDLE_PRIORITY and configMAX_PRIORIT
  70:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  71:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @sa CTask::Create
  72:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  73:../FreeRTOS_EC/Source/AManagedTask.h **** 	portBASE_TYPE Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned port
  74:../FreeRTOS_EC/Source/AManagedTask.h **** 
  75:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  76:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * The framework calls this function before the scheduler start. The default implementation simply
  77:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Override this method to perform task specific hardware initialization that does not use FreeRTO
  78:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  79:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @return true if success, false otherwise.
  80:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  81:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual bool HardwareInit() { return true; }
 166              		.loc 2 81 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 8
 169              		@ frame_needed = 1, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 171 0000 80B4     		push	{r7}
 172              	.LCFI10:
 173              		.cfi_def_cfa_offset 4
 174              		.cfi_offset 7, -4
 175 0002 83B0     		sub	sp, sp, #12
 176              	.LCFI11:
 177              		.cfi_def_cfa_offset 16
 178 0004 00AF     		add	r7, sp, #0
 179              	.LCFI12:
 180              		.cfi_def_cfa_register 7
 181 0006 7860     		str	r0, [r7, #4]
 182              		.loc 2 81 0
 183 0008 4FF00103 		mov	r3, #1
 184 000c 1846     		mov	r0, r3
 185 000e 07F10C07 		add	r7, r7, #12
 186 0012 BD46     		mov	sp, r7
 187 0014 80BC     		pop	{r7}
 188 0016 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE134:
 192              		.section	.text._ZN12AManagedTask8OnCreateEPKctm,"axG",%progbits,_ZN12AManagedTask8OnCreateEPKctm,c
 193              		.align	2
 194              		.weak	_ZN12AManagedTask8OnCreateEPKctm
 195              		.thumb
 196              		.thumb_func
 198              	_ZN12AManagedTask8OnCreateEPKctm:
 199              	.LFB135:
  82:../FreeRTOS_EC/Source/AManagedTask.h **** 
  83:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  84:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Task control loop.
  85:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  86:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual void Run() =0;
  87:../FreeRTOS_EC/Source/AManagedTask.h **** 
  88:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  89:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * The framework calls this function before the task is created to give a chance to a managed task
  90:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * own initialization code and stop the task creation process if needed.
  91:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  92:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param pcName specifies the task name.
  93:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param usStackDepth specifies the task stack depth.
  94:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param uxPriority specifies the task priority.
  95:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  96:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @return pdTRUE if success, pdFALSE otherwise. If the method return pdFALSE the task creation pr
  97:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * is stopped and no FreeRTOS resource are allocated.
  98:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  99:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual portBASE_TYPE OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, uns
 200              		.loc 2 99 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 16
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205 0000 80B4     		push	{r7}
 206              	.LCFI13:
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 7, -4
 209 0002 85B0     		sub	sp, sp, #20
 210              	.LCFI14:
 211              		.cfi_def_cfa_offset 24
 212 0004 00AF     		add	r7, sp, #0
 213              	.LCFI15:
 214              		.cfi_def_cfa_register 7
 215 0006 F860     		str	r0, [r7, #12]
 216 0008 B960     		str	r1, [r7, #8]
 217 000a 3B60     		str	r3, [r7, #0]
 218 000c 1346     		mov	r3, r2	@ movhi
 219 000e FB80     		strh	r3, [r7, #6]	@ movhi
 220              		.loc 2 99 0
 221 0010 4FF00103 		mov	r3, #1
 222 0014 1846     		mov	r0, r3
 223 0016 07F11407 		add	r7, r7, #20
 224 001a BD46     		mov	sp, r7
 225 001c 80BC     		pop	{r7}
 226 001e 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE135:
 230              		.section	.text._ZN9CFreeRTOS15SuspendAllTasksEv,"axG",%progbits,_ZN9CFreeRTOS15SuspendAllTasksEv,c
 231              		.align	2
 232              		.weak	_ZN9CFreeRTOS15SuspendAllTasksEv
 233              		.thumb
 234              		.thumb_func
 236              	_ZN9CFreeRTOS15SuspendAllTasksEv:
 237              	.LFB138:
 238              		.file 3 "../FreeRTOS_EC/Source/CFreeRTOS.h"
   1:../FreeRTOS_EC/Source/CFreeRTOS.h **** /**
   2:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @file CFreeRTOS.h
   3:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @class CFreeRTOS
   4:../FreeRTOS_EC/Source/CFreeRTOS.h ****  *
   5:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * This class provide an interface for the <a href="http://www.freertos.org/a00020.html">Kernek Con
   6:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * Moreover provide a method used by the FreeRTOS Extension Layer to initialize the hardware resour
   7:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * All methods are static and inline.
   8:../FreeRTOS_EC/Source/CFreeRTOS.h ****  *
   9:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @date Jul 14, 2010
  10:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @author Stefano Oliveri (STF12.net)
  11:../FreeRTOS_EC/Source/CFreeRTOS.h ****  *         E-Mail: software@stf12.net
  12:../FreeRTOS_EC/Source/CFreeRTOS.h ****  */
  13:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  14:../FreeRTOS_EC/Source/CFreeRTOS.h **** /**
  15:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @defgroup FreeRTOS_CPP_EXT FreeRTOS Class Extension
  16:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * This set of C++ class aim to provide an Object Oriented framework to program a FreeRTOS applicat
  17:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @{
  18:../FreeRTOS_EC/Source/CFreeRTOS.h ****  */
  19:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  20:../FreeRTOS_EC/Source/CFreeRTOS.h **** /**
  21:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @defgroup FreeRTOS_Wrapper FreeRTOS Wrapper Class
  22:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @ingroup FreeRTOS_CPP_EXT
  23:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * The FreeRTOS Wrapper Layer provides a set of class that are able to attach to and manage a FreeR
  24:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * native handle.
  25:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @{
  26:../FreeRTOS_EC/Source/CFreeRTOS.h ****  */
  27:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  28:../FreeRTOS_EC/Source/CFreeRTOS.h **** #ifndef CFREERTOS_H_
  29:../FreeRTOS_EC/Source/CFreeRTOS.h **** #define CFREERTOS_H_
  30:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  31:../FreeRTOS_EC/Source/CFreeRTOS.h **** #include "FreeRTOS.h"
  32:../FreeRTOS_EC/Source/CFreeRTOS.h **** #include "task.h"
  33:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  34:../FreeRTOS_EC/Source/CFreeRTOS.h **** class CFreeRTOS {
  35:../FreeRTOS_EC/Source/CFreeRTOS.h **** public:
  36:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  37:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * Default constructor. Not used.
  38:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  39:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	CFreeRTOS();
  40:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  41:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  42:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * Destructor. Not used.
  43:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  44:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	~CFreeRTOS();
  45:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  46:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  47:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function
  48:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  49:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	static void StartScheduler() { vTaskStartScheduler(); }
  50:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  51:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  52:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00133.html">vTaskEndScheduler</a> FreeRTOS API function.
  53:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  54:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	static void EndScheduler() { vTaskEndScheduler(); }
  55:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  56:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  57:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00134.html">vTaskSuspendAll</a> FreeRTOS API function.
  58:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  59:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	static void SuspendAllTasks() { vTaskSuspendAll(); }
 239              		.loc 3 59 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0000 80B5     		push	{r7, lr}
 244              	.LCFI16:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 14, -4
 247              		.cfi_offset 7, -8
 248 0002 00AF     		add	r7, sp, #0
 249              	.LCFI17:
 250              		.cfi_def_cfa_register 7
 251              		.loc 3 59 0
 252 0004 FFF7FEFF 		bl	vTaskSuspendAll
 253 0008 80BD     		pop	{r7, pc}
 254              		.cfi_endproc
 255              	.LFE138:
 257 000a 00BF     		.section	.text._ZN9CFreeRTOS14ResumeAllTasksEv,"axG",%progbits,_ZN9CFreeRTOS14ResumeAllTasksEv,com
 258              		.align	2
 259              		.weak	_ZN9CFreeRTOS14ResumeAllTasksEv
 260              		.thumb
 261              		.thumb_func
 263              	_ZN9CFreeRTOS14ResumeAllTasksEv:
 264              	.LFB139:
  60:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  61:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  62:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00135.html">xTaskResumeAll</a> FreeRTOS API function.
  63:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  64:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	static signed portBASE_TYPE ResumeAllTasks() { return xTaskResumeAll(); }
 265              		.loc 3 64 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              	.LCFI18:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 14, -4
 273              		.cfi_offset 7, -8
 274 0002 00AF     		add	r7, sp, #0
 275              	.LCFI19:
 276              		.cfi_def_cfa_register 7
 277              		.loc 3 64 0
 278 0004 FFF7FEFF 		bl	xTaskResumeAll
 279 0008 0346     		mov	r3, r0
 280 000a 1846     		mov	r0, r3
 281 000c 80BD     		pop	{r7, pc}
 282              		.cfi_endproc
 283              	.LFE139:
 285              		.global	_ZN12AManagedTask22s_pManagedTaskListHeadE
 286 000e 00BF     		.section	.bss._ZN12AManagedTask22s_pManagedTaskListHeadE,"aw",%nobits
 287              		.align	2
 290              	_ZN12AManagedTask22s_pManagedTaskListHeadE:
 291 0000 00000000 		.space	4
 292              		.text
 293              		.align	2
 294              		.global	_ZN12AManagedTaskC2Ev
 295              		.thumb
 296              		.thumb_func
 298              	_ZN12AManagedTaskC2Ev:
 299              	.LFB141:
 300              		.file 4 "../FreeRTOS_EC/Source/AManagedTask.cpp"
   1:../FreeRTOS_EC/Source/AManagedTask.cpp **** /**
   2:../FreeRTOS_EC/Source/AManagedTask.cpp ****  * AManagedTask.cpp
   3:../FreeRTOS_EC/Source/AManagedTask.cpp ****  *
   4:../FreeRTOS_EC/Source/AManagedTask.cpp ****  *  Created on: Aug 3, 2010
   5:../FreeRTOS_EC/Source/AManagedTask.cpp ****  *      Author: Stefano Oliveri
   6:../FreeRTOS_EC/Source/AManagedTask.cpp ****  */
   7:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
   8:../FreeRTOS_EC/Source/AManagedTask.cpp **** #include "AManagedTask.h"
   9:../FreeRTOS_EC/Source/AManagedTask.cpp **** #include "CFreeRTOS.h"
  10:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  11:../FreeRTOS_EC/Source/AManagedTask.cpp **** AManagedTask* AManagedTask::s_pManagedTaskListHead = NULL;
  12:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  13:../FreeRTOS_EC/Source/AManagedTask.cpp **** AManagedTask::AManagedTask() {
 301              		.loc 4 13 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 8
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305 0000 80B5     		push	{r7, lr}
 306              	.LCFI20:
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 14, -4
 309              		.cfi_offset 7, -8
 310 0002 82B0     		sub	sp, sp, #8
 311              	.LCFI21:
 312              		.cfi_def_cfa_offset 16
 313 0004 00AF     		add	r7, sp, #0
 314              	.LCFI22:
 315              		.cfi_def_cfa_register 7
 316 0006 7860     		str	r0, [r7, #4]
 317              	.LBB3:
 318              		.loc 4 13 0
 319 0008 7B68     		ldr	r3, [r7, #4]
 320 000a 1846     		mov	r0, r3
 321 000c FFF7FEFF 		bl	_ZN5CTaskC2Ev
 322 0010 7B68     		ldr	r3, [r7, #4]
 323 0012 084A     		ldr	r2, .L11
 324 0014 1A60     		str	r2, [r3, #0]
  14:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	m_pNextManagedTask = NULL;
 325              		.loc 4 14 0
 326 0016 7B68     		ldr	r3, [r7, #4]
 327 0018 4FF00002 		mov	r2, #0
 328 001c 9A60     		str	r2, [r3, #8]
  15:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	AddToManagedTask(this);
 329              		.loc 4 15 0
 330 001e 7868     		ldr	r0, [r7, #4]
 331 0020 7968     		ldr	r1, [r7, #4]
 332 0022 FFF7FEFF 		bl	_ZN12AManagedTask16AddToManagedTaskEPS_
 333              	.LBE3:
  16:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 334              		.loc 4 16 0
 335 0026 7B68     		ldr	r3, [r7, #4]
 336 0028 1846     		mov	r0, r3
 337 002a 07F10807 		add	r7, r7, #8
 338 002e BD46     		mov	sp, r7
 339 0030 80BD     		pop	{r7, pc}
 340              	.L12:
 341 0032 00BF     		.align	2
 342              	.L11:
 343 0034 08000000 		.word	_ZTV12AManagedTask+8
 344              		.cfi_endproc
 345              	.LFE141:
 347              		.align	2
 348              		.global	_ZN12AManagedTaskD2Ev
 349              		.thumb
 350              		.thumb_func
 352              	_ZN12AManagedTaskD2Ev:
 353              	.LFB144:
  17:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  18:../FreeRTOS_EC/Source/AManagedTask.cpp **** AManagedTask::~AManagedTask() {
 354              		.loc 4 18 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 8
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358 0038 80B5     		push	{r7, lr}
 359              	.LCFI23:
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 14, -4
 362              		.cfi_offset 7, -8
 363 003a 82B0     		sub	sp, sp, #8
 364              	.LCFI24:
 365              		.cfi_def_cfa_offset 16
 366 003c 00AF     		add	r7, sp, #0
 367              	.LCFI25:
 368              		.cfi_def_cfa_register 7
 369 003e 7860     		str	r0, [r7, #4]
 370              	.LBB4:
 371              		.loc 4 18 0
 372 0040 7B68     		ldr	r3, [r7, #4]
 373 0042 0C4A     		ldr	r2, .L16
 374 0044 1A60     		str	r2, [r3, #0]
  19:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	RemoveFromManagedTask(this);
 375              		.loc 4 19 0
 376 0046 7868     		ldr	r0, [r7, #4]
 377 0048 7968     		ldr	r1, [r7, #4]
 378 004a FFF7FEFF 		bl	_ZN12AManagedTask21RemoveFromManagedTaskEPS_
  20:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 379              		.loc 4 20 0
 380 004e 7868     		ldr	r0, [r7, #4]
 381 0050 FFF7FEFF 		bl	_ZN5CTaskD2Ev
 382              	.LBE4:
 383 0054 4FF00003 		mov	r3, #0
 384 0058 03F00103 		and	r3, r3, #1
 385 005c DBB2     		uxtb	r3, r3
 386 005e 002B     		cmp	r3, #0
 387 0060 02D0     		beq	.L15
 388              		.loc 4 20 0 is_stmt 0 discriminator 2
 389 0062 7868     		ldr	r0, [r7, #4]
 390 0064 FFF7FEFF 		bl	_ZdlPv
 391              	.L15:
 392              		.loc 4 20 0 discriminator 3
 393 0068 7B68     		ldr	r3, [r7, #4]
 394 006a 1846     		mov	r0, r3
 395 006c 07F10807 		add	r7, r7, #8
 396 0070 BD46     		mov	sp, r7
 397 0072 80BD     		pop	{r7, pc}
 398              	.L17:
 399              		.align	2
 400              	.L16:
 401 0074 08000000 		.word	_ZTV12AManagedTask+8
 402              		.cfi_endproc
 403              	.LFE144:
 405              		.align	2
 406              		.global	_ZN12AManagedTaskD0Ev
 407              		.thumb
 408              		.thumb_func
 410              	_ZN12AManagedTaskD0Ev:
 411              	.LFB146:
  18:../FreeRTOS_EC/Source/AManagedTask.cpp **** AManagedTask::~AManagedTask() {
 412              		.loc 4 18 0 is_stmt 1
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0078 80B5     		push	{r7, lr}
 417              	.LCFI26:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 14, -4
 420              		.cfi_offset 7, -8
 421 007a 82B0     		sub	sp, sp, #8
 422              	.LCFI27:
 423              		.cfi_def_cfa_offset 16
 424 007c 00AF     		add	r7, sp, #0
 425              	.LCFI28:
 426              		.cfi_def_cfa_register 7
 427 007e 7860     		str	r0, [r7, #4]
 428              		.loc 4 20 0
 429 0080 7868     		ldr	r0, [r7, #4]
 430 0082 FFF7FEFF 		bl	_ZN12AManagedTaskD1Ev
 431 0086 7868     		ldr	r0, [r7, #4]
 432 0088 FFF7FEFF 		bl	_ZdlPv
 433 008c 7B68     		ldr	r3, [r7, #4]
 434 008e 1846     		mov	r0, r3
 435 0090 07F10807 		add	r7, r7, #8
 436 0094 BD46     		mov	sp, r7
 437 0096 80BD     		pop	{r7, pc}
 438              		.cfi_endproc
 439              	.LFE146:
 441              		.align	2
 442              		.global	_ZN12AManagedTask6CreateEPKctm
 443              		.thumb
 444              		.thumb_func
 446              	_ZN12AManagedTask6CreateEPKctm:
 447              	.LFB147:
  21:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  22:../FreeRTOS_EC/Source/AManagedTask.cpp **** portBASE_TYPE AManagedTask::Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, 
 448              		.loc 4 22 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 16
 451              		@ frame_needed = 1, uses_anonymous_args = 0
 452 0098 90B5     		push	{r4, r7, lr}
 453              	.LCFI29:
 454              		.cfi_def_cfa_offset 12
 455              		.cfi_offset 14, -4
 456              		.cfi_offset 7, -8
 457              		.cfi_offset 4, -12
 458 009a 87B0     		sub	sp, sp, #28
 459              	.LCFI30:
 460              		.cfi_def_cfa_offset 40
 461 009c 02AF     		add	r7, sp, #8
 462              	.LCFI31:
 463              		.cfi_def_cfa 7, 32
 464 009e F860     		str	r0, [r7, #12]
 465 00a0 B960     		str	r1, [r7, #8]
 466 00a2 3B60     		str	r3, [r7, #0]
 467 00a4 1346     		mov	r3, r2	@ movhi
 468 00a6 FB80     		strh	r3, [r7, #6]	@ movhi
  23:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	return OnCreate(pcName, usStackDepth, uxPriority) &&
 469              		.loc 4 23 0
 470 00a8 FB68     		ldr	r3, [r7, #12]
 471 00aa 1B68     		ldr	r3, [r3, #0]
 472 00ac 03F11C03 		add	r3, r3, #28
 473 00b0 1C68     		ldr	r4, [r3, #0]
 474 00b2 FB88     		ldrh	r3, [r7, #6]
 475 00b4 F868     		ldr	r0, [r7, #12]
 476 00b6 B968     		ldr	r1, [r7, #8]
 477 00b8 1A46     		mov	r2, r3
 478 00ba 3B68     		ldr	r3, [r7, #0]
 479 00bc A047     		blx	r4
 480 00be 0346     		mov	r3, r0
  24:../FreeRTOS_EC/Source/AManagedTask.cpp **** 			CTask::Create(AManagedTask::taskControlFunc, pcName, usStackDepth, this, uxPriority);
 481              		.loc 4 24 0
 482 00c0 002B     		cmp	r3, #0
 483 00c2 13D0     		beq	.L21
 484              		.loc 4 24 0 is_stmt 0 discriminator 1
 485 00c4 FA68     		ldr	r2, [r7, #12]
 486 00c6 FB88     		ldrh	r3, [r7, #6]
 487 00c8 F968     		ldr	r1, [r7, #12]
 488 00ca 0091     		str	r1, [sp, #0]
 489 00cc 3968     		ldr	r1, [r7, #0]
 490 00ce 0191     		str	r1, [sp, #4]
 491 00d0 1046     		mov	r0, r2
 492 00d2 40F20001 		movw	r1, #:lower16:_ZN12AManagedTask15taskControlFuncEPv
 493 00d6 C0F20001 		movt	r1, #:upper16:_ZN12AManagedTask15taskControlFuncEPv
 494 00da BA68     		ldr	r2, [r7, #8]
 495 00dc FFF7FEFF 		bl	_ZN5CTask6CreateEPFvPvEPKctS0_m
 496 00e0 0346     		mov	r3, r0
 497 00e2 002B     		cmp	r3, #0
 498 00e4 02D0     		beq	.L21
 499              		.loc 4 24 0 discriminator 3
 500 00e6 4FF00103 		mov	r3, #1
 501 00ea 01E0     		b	.L22
 502              	.L21:
 503              		.loc 4 24 0 discriminator 2
 504 00ec 4FF00003 		mov	r3, #0
 505              	.L22:
  25:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 506              		.loc 4 25 0 is_stmt 1 discriminator 4
 507 00f0 1846     		mov	r0, r3
 508 00f2 07F11407 		add	r7, r7, #20
 509 00f6 BD46     		mov	sp, r7
 510 00f8 90BD     		pop	{r4, r7, pc}
 511              		.cfi_endproc
 512              	.LFE147:
 514 00fa 00BF     		.align	2
 515              		.global	_ZN12AManagedTask15taskControlFuncEPv
 516              		.thumb
 517              		.thumb_func
 519              	_ZN12AManagedTask15taskControlFuncEPv:
 520              	.LFB148:
  26:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  27:../FreeRTOS_EC/Source/AManagedTask.cpp **** void AManagedTask::taskControlFunc(void *pParams) {
 521              		.loc 4 27 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 8
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525 00fc 80B5     		push	{r7, lr}
 526              	.LCFI32:
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_offset 14, -4
 529              		.cfi_offset 7, -8
 530 00fe 82B0     		sub	sp, sp, #8
 531              	.LCFI33:
 532              		.cfi_def_cfa_offset 16
 533 0100 00AF     		add	r7, sp, #0
 534              	.LCFI34:
 535              		.cfi_def_cfa_register 7
 536 0102 7860     		str	r0, [r7, #4]
  28:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	static_cast<AManagedTask *>(pParams)->Run();
 537              		.loc 4 28 0
 538 0104 7B68     		ldr	r3, [r7, #4]
 539 0106 1B68     		ldr	r3, [r3, #0]
 540 0108 03F11803 		add	r3, r3, #24
 541 010c 1B68     		ldr	r3, [r3, #0]
 542 010e 7868     		ldr	r0, [r7, #4]
 543 0110 9847     		blx	r3
  29:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 544              		.loc 4 29 0
 545 0112 07F10807 		add	r7, r7, #8
 546 0116 BD46     		mov	sp, r7
 547 0118 80BD     		pop	{r7, pc}
 548              		.cfi_endproc
 549              	.LFE148:
 551 011a 00BF     		.align	2
 552              		.global	_ZN12AManagedTask16AddToManagedTaskEPS_
 553              		.thumb
 554              		.thumb_func
 556              	_ZN12AManagedTask16AddToManagedTaskEPS_:
 557              	.LFB149:
  30:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  31:../FreeRTOS_EC/Source/AManagedTask.cpp **** void AManagedTask::AddToManagedTask(AManagedTask *pTaskToAdd) {
 558              		.loc 4 31 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 8
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562 011c 80B5     		push	{r7, lr}
 563              	.LCFI35:
 564              		.cfi_def_cfa_offset 8
 565              		.cfi_offset 14, -4
 566              		.cfi_offset 7, -8
 567 011e 82B0     		sub	sp, sp, #8
 568              	.LCFI36:
 569              		.cfi_def_cfa_offset 16
 570 0120 00AF     		add	r7, sp, #0
 571              	.LCFI37:
 572              		.cfi_def_cfa_register 7
 573 0122 7860     		str	r0, [r7, #4]
 574 0124 3960     		str	r1, [r7, #0]
  32:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	EnterCritical();
 575              		.loc 4 32 0
 576 0126 FFF7FEFF 		bl	_ZN5CTask13EnterCriticalEv
  33:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	// is the first element?
  34:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	if (s_pManagedTaskListHead == NULL) {
 577              		.loc 4 34 0
 578 012a 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 579 012e C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 580 0132 1B68     		ldr	r3, [r3, #0]
 581 0134 002B     		cmp	r3, #0
 582 0136 06D1     		bne	.L25
  35:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		s_pManagedTaskListHead = this;
 583              		.loc 4 35 0
 584 0138 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 585 013c C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 586 0140 7A68     		ldr	r2, [r7, #4]
 587 0142 1A60     		str	r2, [r3, #0]
 588 0144 0CE0     		b	.L26
 589              	.L25:
  36:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	}
  37:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	else {
  38:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		// add the task to the head of the managed task list.
  39:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		m_pNextManagedTask = s_pManagedTaskListHead;
 590              		.loc 4 39 0
 591 0146 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 592 014a C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 593 014e 1A68     		ldr	r2, [r3, #0]
 594 0150 7B68     		ldr	r3, [r7, #4]
 595 0152 9A60     		str	r2, [r3, #8]
  40:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		s_pManagedTaskListHead = this;
 596              		.loc 4 40 0
 597 0154 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 598 0158 C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 599 015c 7A68     		ldr	r2, [r7, #4]
 600 015e 1A60     		str	r2, [r3, #0]
 601              	.L26:
  41:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	}
  42:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	ExitCritical();
 602              		.loc 4 42 0
 603 0160 FFF7FEFF 		bl	_ZN5CTask12ExitCriticalEv
  43:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 604              		.loc 4 43 0
 605 0164 07F10807 		add	r7, r7, #8
 606 0168 BD46     		mov	sp, r7
 607 016a 80BD     		pop	{r7, pc}
 608              		.cfi_endproc
 609              	.LFE149:
 611              		.align	2
 612              		.global	_ZN12AManagedTask21RemoveFromManagedTaskEPS_
 613              		.thumb
 614              		.thumb_func
 616              	_ZN12AManagedTask21RemoveFromManagedTaskEPS_:
 617              	.LFB150:
  44:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  45:../FreeRTOS_EC/Source/AManagedTask.cpp **** void AManagedTask::RemoveFromManagedTask(AManagedTask *pTaskToRemove) {
 618              		.loc 4 45 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 16
 621              		@ frame_needed = 1, uses_anonymous_args = 0
 622 016c 80B5     		push	{r7, lr}
 623              	.LCFI38:
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 14, -4
 626              		.cfi_offset 7, -8
 627 016e 84B0     		sub	sp, sp, #16
 628              	.LCFI39:
 629              		.cfi_def_cfa_offset 24
 630 0170 00AF     		add	r7, sp, #0
 631              	.LCFI40:
 632              		.cfi_def_cfa_register 7
 633 0172 7860     		str	r0, [r7, #4]
 634 0174 3960     		str	r1, [r7, #0]
 635              	.LBB5:
  46:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	// search for the task to remove in the managed task list
  47:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	// is it the first element?
  48:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	EnterCritical();
 636              		.loc 4 48 0
 637 0176 FFF7FEFF 		bl	_ZN5CTask13EnterCriticalEv
 638              	.LBB6:
  49:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	if (pTaskToRemove == s_pManagedTaskListHead) {
 639              		.loc 4 49 0
 640 017a 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 641 017e C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 642 0182 1B68     		ldr	r3, [r3, #0]
 643 0184 3A68     		ldr	r2, [r7, #0]
 644 0186 9A42     		cmp	r2, r3
 645 0188 09D1     		bne	.L28
  50:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		s_pManagedTaskListHead = pTaskToRemove->m_pNextManagedTask;
 646              		.loc 4 50 0
 647 018a 3B68     		ldr	r3, [r7, #0]
 648 018c 9A68     		ldr	r2, [r3, #8]
 649 018e 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 650 0192 C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 651 0196 1A60     		str	r2, [r3, #0]
  51:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		ExitCritical();
 652              		.loc 4 51 0
 653 0198 FFF7FEFF 		bl	_ZN5CTask12ExitCriticalEv
 654 019c 25E0     		b	.L27
 655              	.L28:
 656              	.LBB7:
  52:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	}
  53:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	else {
  54:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		ExitCritical();
 657              		.loc 4 54 0
 658 019e FFF7FEFF 		bl	_ZN5CTask12ExitCriticalEv
  55:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		CFreeRTOS::SuspendAllTasks();
 659              		.loc 4 55 0
 660 01a2 FFF7FEFF 		bl	_ZN9CFreeRTOS15SuspendAllTasksEv
  56:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		AManagedTask *pTask = s_pManagedTaskListHead;
 661              		.loc 4 56 0
 662 01a6 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 663 01aa C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 664 01ae 1B68     		ldr	r3, [r3, #0]
 665 01b0 FB60     		str	r3, [r7, #12]
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 666              		.loc 4 57 0
 667 01b2 02E0     		b	.L30
 668              	.L33:
  58:../FreeRTOS_EC/Source/AManagedTask.cpp **** 			pTask = pTask->m_pNextManagedTask;
 669              		.loc 4 58 0
 670 01b4 FB68     		ldr	r3, [r7, #12]
 671 01b6 9B68     		ldr	r3, [r3, #8]
 672 01b8 FB60     		str	r3, [r7, #12]
 673              	.L30:
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 674              		.loc 4 57 0 discriminator 1
 675 01ba FB68     		ldr	r3, [r7, #12]
 676 01bc 002B     		cmp	r3, #0
 677 01be 07D0     		beq	.L31
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 678              		.loc 4 57 0 is_stmt 0 discriminator 2
 679 01c0 FB68     		ldr	r3, [r7, #12]
 680 01c2 9A68     		ldr	r2, [r3, #8]
 681 01c4 3B68     		ldr	r3, [r7, #0]
 682 01c6 9A42     		cmp	r2, r3
 683 01c8 02D0     		beq	.L31
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 684              		.loc 4 57 0 discriminator 4
 685 01ca 4FF00103 		mov	r3, #1
 686 01ce 01E0     		b	.L32
 687              	.L31:
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 688              		.loc 4 57 0 discriminator 3
 689 01d0 4FF00003 		mov	r3, #0
 690              	.L32:
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 691              		.loc 4 57 0 discriminator 5
 692 01d4 002B     		cmp	r3, #0
 693 01d6 EDD1     		bne	.L33
  59:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		}
  60:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		if (pTask != NULL) { // Check to be sure that the task is in the list
 694              		.loc 4 60 0 is_stmt 1
 695 01d8 FB68     		ldr	r3, [r7, #12]
 696 01da 002B     		cmp	r3, #0
 697 01dc 03D0     		beq	.L34
  61:../FreeRTOS_EC/Source/AManagedTask.cpp **** 			// remove the thask from the list
  62:../FreeRTOS_EC/Source/AManagedTask.cpp **** 			pTask->m_pNextManagedTask = pTaskToRemove->m_pNextManagedTask;
 698              		.loc 4 62 0
 699 01de 3B68     		ldr	r3, [r7, #0]
 700 01e0 9A68     		ldr	r2, [r3, #8]
 701 01e2 FB68     		ldr	r3, [r7, #12]
 702 01e4 9A60     		str	r2, [r3, #8]
 703              	.L34:
  63:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		}
  64:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		CFreeRTOS::ResumeAllTasks();
 704              		.loc 4 64 0
 705 01e6 FFF7FEFF 		bl	_ZN9CFreeRTOS14ResumeAllTasksEv
 706              	.L27:
 707              	.LBE7:
 708              	.LBE6:
 709              	.LBE5:
  65:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	}
  66:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 710              		.loc 4 66 0
 711 01ea 07F11007 		add	r7, r7, #16
 712 01ee BD46     		mov	sp, r7
 713 01f0 80BD     		pop	{r7, pc}
 714              		.cfi_endproc
 715              	.LFE150:
 717 01f2 00BF     		.align	2
 718              		.global	_ZN12AManagedTask27InitHardwareForManagedTasksEv
 719              		.thumb
 720              		.thumb_func
 722              	_ZN12AManagedTask27InitHardwareForManagedTasksEv:
 723              	.LFB151:
  67:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  68:../FreeRTOS_EC/Source/AManagedTask.cpp **** bool AManagedTask::InitHardwareForManagedTasks() {
 724              		.loc 4 68 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 8
 727              		@ frame_needed = 1, uses_anonymous_args = 0
 728 01f4 90B5     		push	{r4, r7, lr}
 729              	.LCFI41:
 730              		.cfi_def_cfa_offset 12
 731              		.cfi_offset 14, -4
 732              		.cfi_offset 7, -8
 733              		.cfi_offset 4, -12
 734 01f6 83B0     		sub	sp, sp, #12
 735              	.LCFI42:
 736              		.cfi_def_cfa_offset 24
 737 01f8 00AF     		add	r7, sp, #0
 738              	.LCFI43:
 739              		.cfi_def_cfa_register 7
 740              	.LBB8:
  69:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	bool bRes = true;
 741              		.loc 4 69 0
 742 01fa 4FF00103 		mov	r3, #1
 743 01fe FB71     		strb	r3, [r7, #7]
 744              	.LBB9:
  70:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 745              		.loc 4 70 0
 746 0200 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 747 0204 C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 748 0208 1B68     		ldr	r3, [r3, #0]
 749 020a 3B60     		str	r3, [r7, #0]
 750 020c 11E0     		b	.L36
 751              	.L37:
  71:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		bRes &= pTask->HardwareInit();
 752              		.loc 4 71 0 discriminator 2
 753 020e FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 754 0210 3B68     		ldr	r3, [r7, #0]
 755 0212 1B68     		ldr	r3, [r3, #0]
 756 0214 03F11403 		add	r3, r3, #20
 757 0218 1B68     		ldr	r3, [r3, #0]
 758 021a 3868     		ldr	r0, [r7, #0]
 759 021c 9847     		blx	r3
 760 021e 0346     		mov	r3, r0
 761 0220 2340     		ands	r3, r3, r4
 762 0222 002B     		cmp	r3, #0
 763 0224 0CBF     		ite	eq
 764 0226 0023     		moveq	r3, #0
 765 0228 0123     		movne	r3, #1
 766 022a FB71     		strb	r3, [r7, #7]
  70:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 767              		.loc 4 70 0 discriminator 2
 768 022c 3B68     		ldr	r3, [r7, #0]
 769 022e 9B68     		ldr	r3, [r3, #8]
 770 0230 3B60     		str	r3, [r7, #0]
 771              	.L36:
  70:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 772              		.loc 4 70 0 is_stmt 0 discriminator 1
 773 0232 3B68     		ldr	r3, [r7, #0]
 774 0234 002B     		cmp	r3, #0
 775 0236 0CBF     		ite	eq
 776 0238 0023     		moveq	r3, #0
 777 023a 0123     		movne	r3, #1
 778 023c DBB2     		uxtb	r3, r3
 779 023e 002B     		cmp	r3, #0
 780 0240 E5D1     		bne	.L37
 781              	.LBE9:
  72:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  73:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	return bRes;
 782              		.loc 4 73 0 is_stmt 1
 783 0242 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 784              	.LBE8:
  74:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 785              		.loc 4 74 0
 786 0244 1846     		mov	r0, r3
 787 0246 07F10C07 		add	r7, r7, #12
 788 024a BD46     		mov	sp, r7
 789 024c 90BD     		pop	{r4, r7, pc}
 790              		.cfi_endproc
 791              	.LFE151:
 793              		.global	_ZTV12AManagedTask
 794              		.section	.rodata._ZTV12AManagedTask,"a",%progbits
 795              		.align	3
 798              	_ZTV12AManagedTask:
 799 0000 00000000 		.word	0
 800 0004 00000000 		.word	0
 801 0008 00000000 		.word	_ZNK5CTask7IsValidEv
 802 000c 00000000 		.word	_ZN5CTask6AttachEPv
 803 0010 00000000 		.word	_ZN5CTask6DetachEv
 804 0014 00000000 		.word	_ZN12AManagedTaskD1Ev
 805 0018 00000000 		.word	_ZN12AManagedTaskD0Ev
 806 001c 00000000 		.word	_ZN12AManagedTask12HardwareInitEv
 807 0020 00000000 		.word	__cxa_pure_virtual
 808 0024 00000000 		.word	_ZN12AManagedTask8OnCreateEPKctm
 809              		.global	_ZN12AManagedTaskC1Ev
 810              		.thumb_set _ZN12AManagedTaskC1Ev,_ZN12AManagedTaskC2Ev
 811              		.global	_ZN12AManagedTaskD1Ev
 812              		.thumb_set _ZN12AManagedTaskD1Ev,_ZN12AManagedTaskD2Ev
 813              		.text
 814              	.Letext0:
 815              		.file 5 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 816              		.file 6 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 817              		.file 7 "../FreeRTOS_EC/Source/IFreeRTOSProtocol.h"
 818              		.file 8 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 AManagedTask.cpp
  C:\Temp\ccUWqtYN.s:19     .text._ZN5CTask13EnterCriticalEv:00000000 $t
  C:\Temp\ccUWqtYN.s:24     .text._ZN5CTask13EnterCriticalEv:00000000 _ZN5CTask13EnterCriticalEv
  C:\Temp\ccUWqtYN.s:46     .text._ZN5CTask12ExitCriticalEv:00000000 $t
  C:\Temp\ccUWqtYN.s:51     .text._ZN5CTask12ExitCriticalEv:00000000 _ZN5CTask12ExitCriticalEv
  C:\Temp\ccUWqtYN.s:72     .text._ZNK5CTask7IsValidEv:00000000 $t
  C:\Temp\ccUWqtYN.s:77     .text._ZNK5CTask7IsValidEv:00000000 _ZNK5CTask7IsValidEv
  C:\Temp\ccUWqtYN.s:113    .text._ZN5CTask6DetachEv:00000000 $t
  C:\Temp\ccUWqtYN.s:118    .text._ZN5CTask6DetachEv:00000000 _ZN5CTask6DetachEv
  C:\Temp\ccUWqtYN.s:158    .text._ZN12AManagedTask12HardwareInitEv:00000000 $t
  C:\Temp\ccUWqtYN.s:163    .text._ZN12AManagedTask12HardwareInitEv:00000000 _ZN12AManagedTask12HardwareInitEv
  C:\Temp\ccUWqtYN.s:193    .text._ZN12AManagedTask8OnCreateEPKctm:00000000 $t
  C:\Temp\ccUWqtYN.s:198    .text._ZN12AManagedTask8OnCreateEPKctm:00000000 _ZN12AManagedTask8OnCreateEPKctm
  C:\Temp\ccUWqtYN.s:231    .text._ZN9CFreeRTOS15SuspendAllTasksEv:00000000 $t
  C:\Temp\ccUWqtYN.s:236    .text._ZN9CFreeRTOS15SuspendAllTasksEv:00000000 _ZN9CFreeRTOS15SuspendAllTasksEv
  C:\Temp\ccUWqtYN.s:258    .text._ZN9CFreeRTOS14ResumeAllTasksEv:00000000 $t
  C:\Temp\ccUWqtYN.s:263    .text._ZN9CFreeRTOS14ResumeAllTasksEv:00000000 _ZN9CFreeRTOS14ResumeAllTasksEv
  C:\Temp\ccUWqtYN.s:290    .bss._ZN12AManagedTask22s_pManagedTaskListHeadE:00000000 _ZN12AManagedTask22s_pManagedTaskListHeadE
  C:\Temp\ccUWqtYN.s:287    .bss._ZN12AManagedTask22s_pManagedTaskListHeadE:00000000 $d
  C:\Temp\ccUWqtYN.s:293    .text:00000000 $t
  C:\Temp\ccUWqtYN.s:298    .text:00000000 _ZN12AManagedTaskC2Ev
  C:\Temp\ccUWqtYN.s:556    .text:0000011c _ZN12AManagedTask16AddToManagedTaskEPS_
  C:\Temp\ccUWqtYN.s:343    .text:00000034 $d
  C:\Temp\ccUWqtYN.s:798    .rodata._ZTV12AManagedTask:00000000 _ZTV12AManagedTask
  C:\Temp\ccUWqtYN.s:347    .text:00000038 $t
  C:\Temp\ccUWqtYN.s:352    .text:00000038 _ZN12AManagedTaskD2Ev
  C:\Temp\ccUWqtYN.s:616    .text:0000016c _ZN12AManagedTask21RemoveFromManagedTaskEPS_
  C:\Temp\ccUWqtYN.s:401    .text:00000074 $d
  C:\Temp\ccUWqtYN.s:405    .text:00000078 $t
  C:\Temp\ccUWqtYN.s:410    .text:00000078 _ZN12AManagedTaskD0Ev
  C:\Temp\ccUWqtYN.s:352    .text:00000038 _ZN12AManagedTaskD1Ev
  C:\Temp\ccUWqtYN.s:446    .text:00000098 _ZN12AManagedTask6CreateEPKctm
  C:\Temp\ccUWqtYN.s:519    .text:000000fc _ZN12AManagedTask15taskControlFuncEPv
  C:\Temp\ccUWqtYN.s:722    .text:000001f4 _ZN12AManagedTask27InitHardwareForManagedTasksEv
  C:\Temp\ccUWqtYN.s:795    .rodata._ZTV12AManagedTask:00000000 $d
  C:\Temp\ccUWqtYN.s:298    .text:00000000 _ZN12AManagedTaskC1Ev
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
vTaskSuspendAll
xTaskResumeAll
_ZN5CTaskC2Ev
_ZN5CTaskD2Ev
_ZdlPv
_ZN5CTask6CreateEPFvPvEPKctS0_m
_ZN5CTask6AttachEPv
__cxa_pure_virtual
