   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"AManagedTask.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN5CTask13EnterCriticalEv,"axG",%progbits,_ZN5CTask13EnterCriticalEv,comdat
  20              		.align	2
  21              		.weak	_ZN5CTask13EnterCriticalEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN5CTask13EnterCriticalEv:
  26              	.LFB112:
  27              		.file 1 "../FreeRTOS_EC/Source/CTask.h"
   1:../FreeRTOS_EC/Source/CTask.h **** /**
   2:../FreeRTOS_EC/Source/CTask.h ****  * @file CTask.h
   3:../FreeRTOS_EC/Source/CTask.h ****  * @class CTask
   4:../FreeRTOS_EC/Source/CTask.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CTask.h ****  *
   6:../FreeRTOS_EC/Source/CTask.h ****  * The CTask class wraps a native FreeRTOS task handle (xTaskHandle). To create a task instance
   7:../FreeRTOS_EC/Source/CTask.h ****  * an object of this class and then call its CTask::Create method like showed in the following samp
   8:../FreeRTOS_EC/Source/CTask.h ****  * \code
   9:../FreeRTOS_EC/Source/CTask.h ****  * CTask g_aTask // global task declaration.
  10:../FreeRTOS_EC/Source/CTask.h ****  *
  11:../FreeRTOS_EC/Source/CTask.h ****  * void main()
  12:../FreeRTOS_EC/Source/CTask.h ****  * {
  13:../FreeRTOS_EC/Source/CTask.h ****  * 	g_aTask.Create(task_control_func, "Led2", configMINIMAL_STACK_SIZE, mainFLASH_TASK_PRIORITY);
  14:../FreeRTOS_EC/Source/CTask.h ****  *
  15:../FreeRTOS_EC/Source/CTask.h ****  * 	CFreeRTOS::StartScheduler();
  16:../FreeRTOS_EC/Source/CTask.h ****  * }
  17:../FreeRTOS_EC/Source/CTask.h ****  * \endcode
  18:../FreeRTOS_EC/Source/CTask.h ****  *
  19:../FreeRTOS_EC/Source/CTask.h ****  * Usually the application subclass this class to create an application specific task object.
  20:../FreeRTOS_EC/Source/CTask.h ****  * See the CHelloWorld class for an example.
  21:../FreeRTOS_EC/Source/CTask.h ****  *
  22:../FreeRTOS_EC/Source/CTask.h ****  * \sa <a href="http://www.freertos.org/taskandcr.html">task documentation</a> in the FreeRTOS web 
  23:../FreeRTOS_EC/Source/CTask.h ****  *
  24:../FreeRTOS_EC/Source/CTask.h ****  * @date Jul 5, 2010
  25:../FreeRTOS_EC/Source/CTask.h ****  * @author Stefano Oliveri (STF12.net)
  26:../FreeRTOS_EC/Source/CTask.h ****  *         E-Mail: software@stf12.net
  27:../FreeRTOS_EC/Source/CTask.h ****  */
  28:../FreeRTOS_EC/Source/CTask.h **** 
  29:../FreeRTOS_EC/Source/CTask.h **** #ifndef CTASK_H_
  30:../FreeRTOS_EC/Source/CTask.h **** #define CTASK_H_
  31:../FreeRTOS_EC/Source/CTask.h **** 
  32:../FreeRTOS_EC/Source/CTask.h **** #include "FreeRTOS.h"
  33:../FreeRTOS_EC/Source/CTask.h **** #include "task.h"
  34:../FreeRTOS_EC/Source/CTask.h **** #include "IFreeRTOSProtocol.h"
  35:../FreeRTOS_EC/Source/CTask.h **** 
  36:../FreeRTOS_EC/Source/CTask.h **** class CTask: public IFreeRTOSObj {
  37:../FreeRTOS_EC/Source/CTask.h **** 
  38:../FreeRTOS_EC/Source/CTask.h **** 	/**
  39:../FreeRTOS_EC/Source/CTask.h **** 	 * Specifies the native FreeRTOS handle managed by an instance of this class.
  40:../FreeRTOS_EC/Source/CTask.h **** 	 */
  41:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle m_handleTask;
  42:../FreeRTOS_EC/Source/CTask.h **** 
  43:../FreeRTOS_EC/Source/CTask.h **** public:
  44:../FreeRTOS_EC/Source/CTask.h **** 	/**
  45:../FreeRTOS_EC/Source/CTask.h **** 	 * The default constructor. It initializes the object without attaching it to a native FreeRTOS ha
  46:../FreeRTOS_EC/Source/CTask.h **** 	 * Call the Create method to allocate a task handle and attach it to the object.
  47:../FreeRTOS_EC/Source/CTask.h **** 	 */
  48:../FreeRTOS_EC/Source/CTask.h **** 	CTask();
  49:../FreeRTOS_EC/Source/CTask.h **** 
  50:../FreeRTOS_EC/Source/CTask.h **** 	/**
  51:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a CTask instance and attach it to a valid handle.
  52:../FreeRTOS_EC/Source/CTask.h **** 	 *
  53:../FreeRTOS_EC/Source/CTask.h **** 	 * @param handleTask a valid task handle.
  54:../FreeRTOS_EC/Source/CTask.h **** 	 */
  55:../FreeRTOS_EC/Source/CTask.h **** 	CTask(xTaskHandle handleTask);
  56:../FreeRTOS_EC/Source/CTask.h **** 
  57:../FreeRTOS_EC/Source/CTask.h **** 	/**
  58:../FreeRTOS_EC/Source/CTask.h **** 	 * Delete the native FreeRTOS task.
  59:../FreeRTOS_EC/Source/CTask.h **** 	 */
  60:../FreeRTOS_EC/Source/CTask.h **** 	virtual ~CTask();
  61:../FreeRTOS_EC/Source/CTask.h **** 
  62:../FreeRTOS_EC/Source/CTask.h **** 	/**
  63:../FreeRTOS_EC/Source/CTask.h **** 	 * Retrieve the native FreeRTOS task handle attached to this object.
  64:../FreeRTOS_EC/Source/CTask.h **** 	 *
  65:../FreeRTOS_EC/Source/CTask.h **** 	 * @return the native FreeRTOS task handle attached to this object.
  66:../FreeRTOS_EC/Source/CTask.h **** 	 */
  67:../FreeRTOS_EC/Source/CTask.h **** 	inline operator xTaskHandle() const { return m_handleTask; }
  68:../FreeRTOS_EC/Source/CTask.h **** 
  69:../FreeRTOS_EC/Source/CTask.h **** 	// FreeRTOS API Wrappers
  70:../FreeRTOS_EC/Source/CTask.h **** 
  71:../FreeRTOS_EC/Source/CTask.h **** 	/**
  72:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a FreeRTOS task and attach its handle to the receiver object.
  73:../FreeRTOS_EC/Source/CTask.h **** 	 *
  74:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00125.html">xTaskCreate</a> FreeRTOS API function.
  75:../FreeRTOS_EC/Source/CTask.h **** 	 */
  76:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usS
  77:../FreeRTOS_EC/Source/CTask.h **** 
  78:../FreeRTOS_EC/Source/CTask.h **** 	/**
  79:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a Memory Protection Unit (MPU) restricted task and attach its handle to the receiver obj
  80:../FreeRTOS_EC/Source/CTask.h **** 	 *
  81:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/xTaskCreateRestricted.html">xTaskCreateRestricted</a> Free
  82:../FreeRTOS_EC/Source/CTask.h **** 	 */
  83:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE CreateRestricted(xTaskParameters *pxTaskDefinition);
  84:../FreeRTOS_EC/Source/CTask.h **** 
  85:../FreeRTOS_EC/Source/CTask.h **** 	/**
  86:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00126.html">vTaskDelete</a>  FreeRTOS API function.
  87:../FreeRTOS_EC/Source/CTask.h **** 	 */
  88:../FreeRTOS_EC/Source/CTask.h **** 	void Delete();
  89:../FreeRTOS_EC/Source/CTask.h **** 
  90:../FreeRTOS_EC/Source/CTask.h **** 	/**
  91:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00127.html">vTaskDelay</a>  FreeRTOS API function.
  92:../FreeRTOS_EC/Source/CTask.h **** 	 */
  93:../FreeRTOS_EC/Source/CTask.h **** 	inline static void Delay(portTickType xTicksToDelay);
  94:../FreeRTOS_EC/Source/CTask.h **** 
  95:../FreeRTOS_EC/Source/CTask.h **** 	/**
  96:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/vtaskdelayuntil.html">vTaskDelayUntil</a>  FreeRTOS API fu
  97:../FreeRTOS_EC/Source/CTask.h **** 	 */
  98:../FreeRTOS_EC/Source/CTask.h ****     inline static void DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement);
  99:../FreeRTOS_EC/Source/CTask.h **** 
 100:../FreeRTOS_EC/Source/CTask.h ****     /**
 101:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskYIELD">taskYIELD</a>  FreeRTOS API func
 102:../FreeRTOS_EC/Source/CTask.h ****      */
 103:../FreeRTOS_EC/Source/CTask.h ****     inline static void Yeld() { taskYIELD(); }
 104:../FreeRTOS_EC/Source/CTask.h **** 
 105:../FreeRTOS_EC/Source/CTask.h ****     /**
 106:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a> 
 107:../FreeRTOS_EC/Source/CTask.h ****      */
 108:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnterCritical() { taskENTER_CRITICAL(); }
  28              		.loc 1 108 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
  40              		.loc 1 108 0
  41 0004 FFF7FEFF 		bl	vPortEnterCritical
  42 0008 80BD     		pop	{r7, pc}
  43              		.cfi_endproc
  44              	.LFE112:
  46 000a 00BF     		.section	.text._ZN5CTask12ExitCriticalEv,"axG",%progbits,_ZN5CTask12ExitCriticalEv,comdat
  47              		.align	2
  48              		.weak	_ZN5CTask12ExitCriticalEv
  49              		.thumb
  50              		.thumb_func
  52              	_ZN5CTask12ExitCriticalEv:
  53              	.LFB113:
 109:../FreeRTOS_EC/Source/CTask.h **** 
 110:../FreeRTOS_EC/Source/CTask.h ****     /**
 111:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  F
 112:../FreeRTOS_EC/Source/CTask.h ****      */
 113:../FreeRTOS_EC/Source/CTask.h ****     inline static void ExitCritical() { taskEXIT_CRITICAL(); }
  54              		.loc 1 113 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58 0000 80B5     		push	{r7, lr}
  59              	.LCFI2:
  60              		.cfi_def_cfa_offset 8
  61              		.cfi_offset 14, -4
  62              		.cfi_offset 7, -8
  63 0002 00AF     		add	r7, sp, #0
  64              	.LCFI3:
  65              		.cfi_def_cfa_register 7
  66              		.loc 1 113 0
  67 0004 FFF7FEFF 		bl	vPortExitCritical
  68 0008 80BD     		pop	{r7, pc}
  69              		.cfi_endproc
  70              	.LFE113:
  72 000a 00BF     		.section	.text._ZNK5CTask7IsValidEv,"axG",%progbits,_ZNK5CTask7IsValidEv,comdat
  73              		.align	2
  74              		.weak	_ZNK5CTask7IsValidEv
  75              		.thumb
  76              		.thumb_func
  78              	_ZNK5CTask7IsValidEv:
  79              	.LFB132:
 114:../FreeRTOS_EC/Source/CTask.h **** 
 115:../FreeRTOS_EC/Source/CTask.h ****     /**
 116:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskDISABLE_INTERRUPTS">taskDISABLE_INTERRU
 117:../FreeRTOS_EC/Source/CTask.h ****      */
 118:../FreeRTOS_EC/Source/CTask.h ****     inline static void DisableInterrupt() { taskDISABLE_INTERRUPTS(); }
 119:../FreeRTOS_EC/Source/CTask.h **** 
 120:../FreeRTOS_EC/Source/CTask.h ****     /**
 121:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENABLE_INTERRUPTS">taskENABLE_INTERRUPT
 122:../FreeRTOS_EC/Source/CTask.h ****      */
 123:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnableInterrupt() { taskENABLE_INTERRUPTS(); }
 124:../FreeRTOS_EC/Source/CTask.h **** 
 125:../FreeRTOS_EC/Source/CTask.h ****     /**
 126:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetCurrentTaskHandle">xTaskGetCurrentT
 127:../FreeRTOS_EC/Source/CTask.h ****      */
 128:../FreeRTOS_EC/Source/CTask.h ****     inline static xTaskHandle GetCurrentTaskHandle();
 129:../FreeRTOS_EC/Source/CTask.h **** 
 130:../FreeRTOS_EC/Source/CTask.h ****     /**
 131:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetTickCount">xTaskGetTickCount</a>  F
 132:../FreeRTOS_EC/Source/CTask.h ****      */
 133:../FreeRTOS_EC/Source/CTask.h ****     inline static portTickType GetTickCount();
 134:../FreeRTOS_EC/Source/CTask.h **** 
 135:../FreeRTOS_EC/Source/CTask.h ****     /**
 136:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetSchedulerState">xTaskGetSchedulerSt
 137:../FreeRTOS_EC/Source/CTask.h ****      */
 138:../FreeRTOS_EC/Source/CTask.h ****     inline static portBASE_TYPE GetSchedulerState();
 139:../FreeRTOS_EC/Source/CTask.h **** 
 140:../FreeRTOS_EC/Source/CTask.h ****     /**
 141:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#usTaskGetNumberOfTasks">uxTaskGetNumberOfTa
 142:../FreeRTOS_EC/Source/CTask.h ****      */
 143:../FreeRTOS_EC/Source/CTask.h ****     inline static unsigned portBASE_TYPE GetNumberOfTasks();
 144:../FreeRTOS_EC/Source/CTask.h **** 
 145:../FreeRTOS_EC/Source/CTask.h ****     /**
 146:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskList">vTaskList</a>  FreeRTOS API func
 147:../FreeRTOS_EC/Source/CTask.h ****      */
 148:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetTaskList(portCHAR *pcWriteBuffer);
 149:../FreeRTOS_EC/Source/CTask.h **** 
 150:../FreeRTOS_EC/Source/CTask.h ****     /**
 151:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskGetRunTimeStats">vTaskGetRunTimeStats<
 152:../FreeRTOS_EC/Source/CTask.h ****      */
 153:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetRunTimeStats(portCHAR *pcWriteBuffer);
 154:../FreeRTOS_EC/Source/CTask.h **** 
 155:../FreeRTOS_EC/Source/CTask.h ****     /**
 156:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00128.html">uxTaskPriorityGet</a>  FreeRTOS API functi
 157:../FreeRTOS_EC/Source/CTask.h ****      */
 158:../FreeRTOS_EC/Source/CTask.h ****     inline unsigned portBASE_TYPE PriorityGet() const;
 159:../FreeRTOS_EC/Source/CTask.h **** 
 160:../FreeRTOS_EC/Source/CTask.h ****     /**
 161:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00129.html">vTaskPrioritySet</a>  FreeRTOS API functio
 162:../FreeRTOS_EC/Source/CTask.h ****      */
 163:../FreeRTOS_EC/Source/CTask.h ****     inline void PrioritySet(unsigned portBASE_TYPE uxNewPriority);
 164:../FreeRTOS_EC/Source/CTask.h **** 
 165:../FreeRTOS_EC/Source/CTask.h ****     /**
 166:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00130.html">vTaskSuspend</a>  FreeRTOS API function.
 167:../FreeRTOS_EC/Source/CTask.h ****      */
 168:../FreeRTOS_EC/Source/CTask.h ****     inline void Suspend();
 169:../FreeRTOS_EC/Source/CTask.h **** 
 170:../FreeRTOS_EC/Source/CTask.h ****     /**
 171:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00131.html">vTaskResume</a>  FreeRTOS API function.
 172:../FreeRTOS_EC/Source/CTask.h ****      */
 173:../FreeRTOS_EC/Source/CTask.h ****     inline void Resume();
 174:../FreeRTOS_EC/Source/CTask.h **** 
 175:../FreeRTOS_EC/Source/CTask.h ****     /**
 176:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/taskresumefromisr.html">xTaskResumeFromISR</a>  FreeRTO
 177:../FreeRTOS_EC/Source/CTask.h ****      */
 178:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE ResumeFromISR();
 179:../FreeRTOS_EC/Source/CTask.h **** 
 180:../FreeRTOS_EC/Source/CTask.h ****     /**
 181:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskSetApplicationTag.html">vTaskSetApplicationTaskTag
 182:../FreeRTOS_EC/Source/CTask.h ****      */
 183:../FreeRTOS_EC/Source/CTask.h ****     inline void SetApplicationTag(pdTASK_HOOK_CODE pxTagValue);
 184:../FreeRTOS_EC/Source/CTask.h **** 
 185:../FreeRTOS_EC/Source/CTask.h ****     /**
 186:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/xTaskCallApplicationTaskHook.html">xTaskCallApplication
 187:../FreeRTOS_EC/Source/CTask.h ****      */
 188:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE CallApplicationTaskHook(void *pvParameter);
 189:../FreeRTOS_EC/Source/CTask.h **** 
 190:../FreeRTOS_EC/Source/CTask.h ****     /**
 191:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskAllocateMPURegions.html">vTaskAllocateMPURegions</
 192:../FreeRTOS_EC/Source/CTask.h ****      */
 193:../FreeRTOS_EC/Source/CTask.h ****     inline void AllocateMPURegions(const xMemoryRegion * const xRegions);
 194:../FreeRTOS_EC/Source/CTask.h **** 
 195:../FreeRTOS_EC/Source/CTask.h ****     // FreeRTOS class extension.
 196:../FreeRTOS_EC/Source/CTask.h **** 	inline bool IsValid() const;
 197:../FreeRTOS_EC/Source/CTask.h **** 	void Attach(xGenericHandle handle);
 198:../FreeRTOS_EC/Source/CTask.h **** 	inline xGenericHandle Detach();
 199:../FreeRTOS_EC/Source/CTask.h **** };
 200:../FreeRTOS_EC/Source/CTask.h **** 
 201:../FreeRTOS_EC/Source/CTask.h **** // inline method
 202:../FreeRTOS_EC/Source/CTask.h **** ////////////////
 203:../FreeRTOS_EC/Source/CTask.h **** 
 204:../FreeRTOS_EC/Source/CTask.h **** inline
 205:../FreeRTOS_EC/Source/CTask.h **** void CTask::Delay(portTickType xTicksToDelay) {
 206:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelay == 1 )
 207:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelay(xTicksToDelay);
 208:../FreeRTOS_EC/Source/CTask.h **** #endif
 209:../FreeRTOS_EC/Source/CTask.h **** }
 210:../FreeRTOS_EC/Source/CTask.h **** 
 211:../FreeRTOS_EC/Source/CTask.h **** inline
 212:../FreeRTOS_EC/Source/CTask.h **** void CTask::DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement) {
 213:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 214:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelayUntil(pxPreviousWakeTime, xTimeIncrement);
 215:../FreeRTOS_EC/Source/CTask.h **** #endif
 216:../FreeRTOS_EC/Source/CTask.h **** }
 217:../FreeRTOS_EC/Source/CTask.h **** 
 218:../FreeRTOS_EC/Source/CTask.h **** inline
 219:../FreeRTOS_EC/Source/CTask.h **** xTaskHandle CTask::GetCurrentTaskHandle() {
 220:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetCurrentTaskHandle();
 221:../FreeRTOS_EC/Source/CTask.h **** }
 222:../FreeRTOS_EC/Source/CTask.h **** 
 223:../FreeRTOS_EC/Source/CTask.h **** inline
 224:../FreeRTOS_EC/Source/CTask.h **** portTickType CTask::GetTickCount() {
 225:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetTickCount();
 226:../FreeRTOS_EC/Source/CTask.h **** }
 227:../FreeRTOS_EC/Source/CTask.h **** 
 228:../FreeRTOS_EC/Source/CTask.h **** inline
 229:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::GetSchedulerState() {
 230:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_xTaskGetSchedulerState == 1 )
 231:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetSchedulerState();
 232:../FreeRTOS_EC/Source/CTask.h **** #else
 233:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 234:../FreeRTOS_EC/Source/CTask.h **** #endif
 235:../FreeRTOS_EC/Source/CTask.h **** }
 236:../FreeRTOS_EC/Source/CTask.h **** 
 237:../FreeRTOS_EC/Source/CTask.h **** inline
 238:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::GetNumberOfTasks() {
 239:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskGetNumberOfTasks();
 240:../FreeRTOS_EC/Source/CTask.h **** }
 241:../FreeRTOS_EC/Source/CTask.h **** 
 242:../FreeRTOS_EC/Source/CTask.h **** inline
 243:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetTaskList(portCHAR *pcWriteBuffer) {
 244:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_TRACE_FACILITY == 1 )
 245:../FreeRTOS_EC/Source/CTask.h **** 	vTaskList((signed portCHAR*)pcWriteBuffer);
 246:../FreeRTOS_EC/Source/CTask.h **** #endif
 247:../FreeRTOS_EC/Source/CTask.h **** }
 248:../FreeRTOS_EC/Source/CTask.h **** 
 249:../FreeRTOS_EC/Source/CTask.h **** inline
 250:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetRunTimeStats(portCHAR *pcWriteBuffer) {
 251:../FreeRTOS_EC/Source/CTask.h **** #if (configGENERATE_RUN_TIME_STATS == 1)
 252:../FreeRTOS_EC/Source/CTask.h **** 	vTaskGetRunTimeStats((signed portCHAR*)pcWriteBuffer);
 253:../FreeRTOS_EC/Source/CTask.h **** #endif
 254:../FreeRTOS_EC/Source/CTask.h **** }
 255:../FreeRTOS_EC/Source/CTask.h **** 
 256:../FreeRTOS_EC/Source/CTask.h **** inline
 257:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::PriorityGet() const {
 258:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 259:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskPriorityGet(m_handleTask);
 260:../FreeRTOS_EC/Source/CTask.h **** #else
 261:../FreeRTOS_EC/Source/CTask.h **** 	return -1;
 262:../FreeRTOS_EC/Source/CTask.h **** #endif
 263:../FreeRTOS_EC/Source/CTask.h **** }
 264:../FreeRTOS_EC/Source/CTask.h **** 
 265:../FreeRTOS_EC/Source/CTask.h **** inline
 266:../FreeRTOS_EC/Source/CTask.h **** void CTask::PrioritySet(unsigned portBASE_TYPE uxNewPriority) {
 267:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 268:../FreeRTOS_EC/Source/CTask.h **** 	vTaskPrioritySet(m_handleTask, uxNewPriority);
 269:../FreeRTOS_EC/Source/CTask.h **** #endif
 270:../FreeRTOS_EC/Source/CTask.h **** }
 271:../FreeRTOS_EC/Source/CTask.h **** 
 272:../FreeRTOS_EC/Source/CTask.h **** inline
 273:../FreeRTOS_EC/Source/CTask.h **** void CTask::Suspend() {
 274:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 275:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSuspend(m_handleTask);
 276:../FreeRTOS_EC/Source/CTask.h **** #endif
 277:../FreeRTOS_EC/Source/CTask.h **** }
 278:../FreeRTOS_EC/Source/CTask.h **** 
 279:../FreeRTOS_EC/Source/CTask.h **** inline
 280:../FreeRTOS_EC/Source/CTask.h **** void CTask::Resume() {
 281:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 282:../FreeRTOS_EC/Source/CTask.h **** 	vTaskResume(m_handleTask);
 283:../FreeRTOS_EC/Source/CTask.h **** #endif
 284:../FreeRTOS_EC/Source/CTask.h **** }
 285:../FreeRTOS_EC/Source/CTask.h **** 
 286:../FreeRTOS_EC/Source/CTask.h **** inline
 287:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::ResumeFromISR() {
 288:../FreeRTOS_EC/Source/CTask.h **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
 289:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskResumeFromISR(m_handleTask);
 290:../FreeRTOS_EC/Source/CTask.h **** #else
 291:../FreeRTOS_EC/Source/CTask.h **** 	return pdFALSE;
 292:../FreeRTOS_EC/Source/CTask.h **** #endif
 293:../FreeRTOS_EC/Source/CTask.h **** }
 294:../FreeRTOS_EC/Source/CTask.h **** 
 295:../FreeRTOS_EC/Source/CTask.h **** inline
 296:../FreeRTOS_EC/Source/CTask.h **** void CTask::SetApplicationTag(pdTASK_HOOK_CODE pxTagValue) {
 297:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 298:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSetApplicationTaskTag(m_handleTask, pxTagValue);
 299:../FreeRTOS_EC/Source/CTask.h **** #endif
 300:../FreeRTOS_EC/Source/CTask.h **** }
 301:../FreeRTOS_EC/Source/CTask.h **** 
 302:../FreeRTOS_EC/Source/CTask.h **** inline
 303:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::CallApplicationTaskHook(void *pvParameter) {
 304:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 305:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskCallApplicationTaskHook(m_handleTask, pvParameter);
 306:../FreeRTOS_EC/Source/CTask.h **** #else
 307:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 308:../FreeRTOS_EC/Source/CTask.h **** #endif
 309:../FreeRTOS_EC/Source/CTask.h **** }
 310:../FreeRTOS_EC/Source/CTask.h **** 
 311:../FreeRTOS_EC/Source/CTask.h **** inline
 312:../FreeRTOS_EC/Source/CTask.h **** void CTask::AllocateMPURegions(const xMemoryRegion * const xRegions) {
 313:../FreeRTOS_EC/Source/CTask.h **** #if ( portUSING_MPU_WRAPPERS == 1 )
 314:../FreeRTOS_EC/Source/CTask.h **** 	vTaskAllocateMPURegions(m_handleTask, xRegions);
 315:../FreeRTOS_EC/Source/CTask.h **** #endif
 316:../FreeRTOS_EC/Source/CTask.h **** }
 317:../FreeRTOS_EC/Source/CTask.h **** 
 318:../FreeRTOS_EC/Source/CTask.h **** inline
 319:../FreeRTOS_EC/Source/CTask.h **** bool CTask::IsValid() const{
  80              		.loc 1 319 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85 0000 80B4     		push	{r7}
  86              	.LCFI4:
  87              		.cfi_def_cfa_offset 4
  88              		.cfi_offset 7, -4
  89 0002 83B0     		sub	sp, sp, #12
  90              	.LCFI5:
  91              		.cfi_def_cfa_offset 16
  92 0004 00AF     		add	r7, sp, #0
  93              	.LCFI6:
  94              		.cfi_def_cfa_register 7
  95 0006 7860     		str	r0, [r7, #4]
 320:../FreeRTOS_EC/Source/CTask.h **** 	return m_handleTask != NULL;
  96              		.loc 1 320 0
  97 0008 7B68     		ldr	r3, [r7, #4]
  98 000a 5B68     		ldr	r3, [r3, #4]
  99 000c 002B     		cmp	r3, #0
 100 000e 0CBF     		ite	eq
 101 0010 0023     		moveq	r3, #0
 102 0012 0123     		movne	r3, #1
 103 0014 DBB2     		uxtb	r3, r3
 321:../FreeRTOS_EC/Source/CTask.h **** }
 104              		.loc 1 321 0
 105 0016 1846     		mov	r0, r3
 106 0018 07F10C07 		add	r7, r7, #12
 107 001c BD46     		mov	sp, r7
 108 001e 80BC     		pop	{r7}
 109 0020 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE132:
 113 0022 00BF     		.section	.text._ZN5CTask6DetachEv,"axG",%progbits,_ZN5CTask6DetachEv,comdat
 114              		.align	2
 115              		.weak	_ZN5CTask6DetachEv
 116              		.thumb
 117              		.thumb_func
 119              	_ZN5CTask6DetachEv:
 120              	.LFB133:
 322:../FreeRTOS_EC/Source/CTask.h **** 
 323:../FreeRTOS_EC/Source/CTask.h **** inline
 324:../FreeRTOS_EC/Source/CTask.h **** xGenericHandle CTask::Detach() {
 121              		.loc 1 324 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 16
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 80B4     		push	{r7}
 127              	.LCFI7:
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 7, -4
 130 0002 85B0     		sub	sp, sp, #20
 131              	.LCFI8:
 132              		.cfi_def_cfa_offset 24
 133 0004 00AF     		add	r7, sp, #0
 134              	.LCFI9:
 135              		.cfi_def_cfa_register 7
 136 0006 7860     		str	r0, [r7, #4]
 137              	.LBB2:
 325:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle res = m_handleTask;
 138              		.loc 1 325 0
 139 0008 7B68     		ldr	r3, [r7, #4]
 140 000a 5B68     		ldr	r3, [r3, #4]
 141 000c FB60     		str	r3, [r7, #12]
 326:../FreeRTOS_EC/Source/CTask.h **** 	m_handleTask = NULL;
 142              		.loc 1 326 0
 143 000e 7B68     		ldr	r3, [r7, #4]
 144 0010 4FF00002 		mov	r2, #0
 145 0014 5A60     		str	r2, [r3, #4]
 327:../FreeRTOS_EC/Source/CTask.h **** 	return res;
 146              		.loc 1 327 0
 147 0016 FB68     		ldr	r3, [r7, #12]
 148              	.LBE2:
 328:../FreeRTOS_EC/Source/CTask.h **** }
 149              		.loc 1 328 0
 150 0018 1846     		mov	r0, r3
 151 001a 07F11407 		add	r7, r7, #20
 152 001e BD46     		mov	sp, r7
 153 0020 80BC     		pop	{r7}
 154 0022 7047     		bx	lr
 155              		.cfi_endproc
 156              	.LFE133:
 158              		.section	.text._ZN12AManagedTask12HardwareInitEv,"axG",%progbits,_ZN12AManagedTask12HardwareInitEv
 159              		.align	2
 160              		.weak	_ZN12AManagedTask12HardwareInitEv
 161              		.thumb
 162              		.thumb_func
 164              	_ZN12AManagedTask12HardwareInitEv:
 165              	.LFB134:
 166              		.file 2 "../FreeRTOS_EC/Source/AManagedTask.h"
   1:../FreeRTOS_EC/Source/AManagedTask.h **** /**
   2:../FreeRTOS_EC/Source/AManagedTask.h ****  * @file AManagedTask.h
   3:../FreeRTOS_EC/Source/AManagedTask.h ****  * @class AManagedTask
   4:../FreeRTOS_EC/Source/AManagedTask.h ****  *
   5:../FreeRTOS_EC/Source/AManagedTask.h ****  * This class extend the CTask in order to provide a more structured and simple to use framework fo
   6:../FreeRTOS_EC/Source/AManagedTask.h ****  * FreeRTOS programming. All AManagedTask derived objects are grouped in linked list. Please note t
   7:../FreeRTOS_EC/Source/AManagedTask.h ****  * this data structure can be modified in a next release. The framework manage these task objects
   8:../FreeRTOS_EC/Source/AManagedTask.h ****  * by calling their methods during the application life cycle.
   9:../FreeRTOS_EC/Source/AManagedTask.h ****  *
  10:../FreeRTOS_EC/Source/AManagedTask.h ****  * The application extend this abstract class to create a managed task and provide its control loop
  11:../FreeRTOS_EC/Source/AManagedTask.h ****  * \code
  12:../FreeRTOS_EC/Source/AManagedTask.h ****  * class CMyPipe: public AManagedTask
  13:../FreeRTOS_EC/Source/AManagedTask.h ****  * {
  14:../FreeRTOS_EC/Source/AManagedTask.h ****  *   // Task private variables.
  15:../FreeRTOS_EC/Source/AManagedTask.h ****  *
  16:../FreeRTOS_EC/Source/AManagedTask.h ****  * public:
  17:../FreeRTOS_EC/Source/AManagedTask.h ****  *   void Run() {  task control loop  };
  18:../FreeRTOS_EC/Source/AManagedTask.h ****  * }
  19:../FreeRTOS_EC/Source/AManagedTask.h ****  * \endcode
  20:../FreeRTOS_EC/Source/AManagedTask.h ****  *
  21:../FreeRTOS_EC/Source/AManagedTask.h ****  * @date Aug 3, 2010
  22:../FreeRTOS_EC/Source/AManagedTask.h ****  * @author Stefano Oliveri
  23:../FreeRTOS_EC/Source/AManagedTask.h ****  *         E-Mail: software@stf12.net
  24:../FreeRTOS_EC/Source/AManagedTask.h ****  */
  25:../FreeRTOS_EC/Source/AManagedTask.h **** 
  26:../FreeRTOS_EC/Source/AManagedTask.h **** /**
  27:../FreeRTOS_EC/Source/AManagedTask.h ****  * @defgroup FreeRTOS_Managed FreeRTOS Managed Class Extension
  28:../FreeRTOS_EC/Source/AManagedTask.h ****  * @ingroup FreeRTOS_CPP_EXT
  29:../FreeRTOS_EC/Source/AManagedTask.h ****  * The FreeRTOS Managed Class Extension are a set of class that provide a structured and
  30:../FreeRTOS_EC/Source/AManagedTask.h ****  * managed framework to develop a FreeRTOS application.
  31:../FreeRTOS_EC/Source/AManagedTask.h ****  * @{
  32:../FreeRTOS_EC/Source/AManagedTask.h ****  */
  33:../FreeRTOS_EC/Source/AManagedTask.h **** 
  34:../FreeRTOS_EC/Source/AManagedTask.h **** #ifndef AMANAGEDTASK_H_
  35:../FreeRTOS_EC/Source/AManagedTask.h **** #define AMANAGEDTASK_H_
  36:../FreeRTOS_EC/Source/AManagedTask.h **** 
  37:../FreeRTOS_EC/Source/AManagedTask.h **** #include "CTask.h"
  38:../FreeRTOS_EC/Source/AManagedTask.h **** 
  39:../FreeRTOS_EC/Source/AManagedTask.h **** class AManagedTask: public CTask {
  40:../FreeRTOS_EC/Source/AManagedTask.h **** 	friend class CFreeRTOS;
  41:../FreeRTOS_EC/Source/AManagedTask.h **** 
  42:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  43:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Specifies the head of the linked list used to group all application managed task.
  44:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  45:../FreeRTOS_EC/Source/AManagedTask.h **** 	static AManagedTask *s_pManagedTaskListHead;
  46:../FreeRTOS_EC/Source/AManagedTask.h **** 
  47:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  48:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Specifies the next managed task in the list or NULL if this is the last managed task.
  49:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  50:../FreeRTOS_EC/Source/AManagedTask.h **** 	AManagedTask *m_pNextManagedTask;
  51:../FreeRTOS_EC/Source/AManagedTask.h **** 
  52:../FreeRTOS_EC/Source/AManagedTask.h **** public:
  53:../FreeRTOS_EC/Source/AManagedTask.h **** 
  54:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  55:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Default constructor.
  56:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  57:../FreeRTOS_EC/Source/AManagedTask.h **** 	AManagedTask();
  58:../FreeRTOS_EC/Source/AManagedTask.h **** 
  59:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  60:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Destructor.
  61:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  62:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual ~AManagedTask();
  63:../FreeRTOS_EC/Source/AManagedTask.h **** 
  64:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  65:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Create the FreeRTOS task attached to this object.
  66:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  67:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param pcName name of the task. Need only for debug purpose.
  68:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param usStackDepth size in word of the task stack.
  69:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param uxPriority task priority. Valid value ar between taskIDLE_PRIORITY and configMAX_PRIORIT
  70:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  71:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @sa CTask::Create
  72:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  73:../FreeRTOS_EC/Source/AManagedTask.h **** 	portBASE_TYPE Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned port
  74:../FreeRTOS_EC/Source/AManagedTask.h **** 
  75:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  76:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * The framework calls this function before the scheduler start. The default implementation simply
  77:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Override this method to perform task specific hardware initialization that does not use FreeRTO
  78:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  79:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @return true if success, false otherwise.
  80:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  81:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual bool HardwareInit() { return true; }
 167              		.loc 2 81 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 8
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 0000 80B4     		push	{r7}
 173              	.LCFI10:
 174              		.cfi_def_cfa_offset 4
 175              		.cfi_offset 7, -4
 176 0002 83B0     		sub	sp, sp, #12
 177              	.LCFI11:
 178              		.cfi_def_cfa_offset 16
 179 0004 00AF     		add	r7, sp, #0
 180              	.LCFI12:
 181              		.cfi_def_cfa_register 7
 182 0006 7860     		str	r0, [r7, #4]
 183              		.loc 2 81 0
 184 0008 4FF00103 		mov	r3, #1
 185 000c 1846     		mov	r0, r3
 186 000e 07F10C07 		add	r7, r7, #12
 187 0012 BD46     		mov	sp, r7
 188 0014 80BC     		pop	{r7}
 189 0016 7047     		bx	lr
 190              		.cfi_endproc
 191              	.LFE134:
 193              		.section	.text._ZN12AManagedTask8OnCreateEPKctm,"axG",%progbits,_ZN12AManagedTask8OnCreateEPKctm,c
 194              		.align	2
 195              		.weak	_ZN12AManagedTask8OnCreateEPKctm
 196              		.thumb
 197              		.thumb_func
 199              	_ZN12AManagedTask8OnCreateEPKctm:
 200              	.LFB135:
  82:../FreeRTOS_EC/Source/AManagedTask.h **** 
  83:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  84:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * Task control loop.
  85:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  86:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual void Run() =0;
  87:../FreeRTOS_EC/Source/AManagedTask.h **** 
  88:../FreeRTOS_EC/Source/AManagedTask.h **** 	/**
  89:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * The framework calls this function before the task is created to give a chance to a managed task
  90:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * own initialization code and stop the task creation process if needed.
  91:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  92:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param pcName specifies the task name.
  93:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param usStackDepth specifies the task stack depth.
  94:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @param uxPriority specifies the task priority.
  95:../FreeRTOS_EC/Source/AManagedTask.h **** 	 *
  96:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * @return pdTRUE if success, pdFALSE otherwise. If the method return pdFALSE the task creation pr
  97:../FreeRTOS_EC/Source/AManagedTask.h **** 	 * is stopped and no FreeRTOS resource are allocated.
  98:../FreeRTOS_EC/Source/AManagedTask.h **** 	 */
  99:../FreeRTOS_EC/Source/AManagedTask.h **** 	virtual portBASE_TYPE OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, uns
 201              		.loc 2 99 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 16
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206 0000 80B4     		push	{r7}
 207              	.LCFI13:
 208              		.cfi_def_cfa_offset 4
 209              		.cfi_offset 7, -4
 210 0002 85B0     		sub	sp, sp, #20
 211              	.LCFI14:
 212              		.cfi_def_cfa_offset 24
 213 0004 00AF     		add	r7, sp, #0
 214              	.LCFI15:
 215              		.cfi_def_cfa_register 7
 216 0006 F860     		str	r0, [r7, #12]
 217 0008 B960     		str	r1, [r7, #8]
 218 000a 3B60     		str	r3, [r7, #0]
 219 000c 1346     		mov	r3, r2	@ movhi
 220 000e FB80     		strh	r3, [r7, #6]	@ movhi
 221              		.loc 2 99 0
 222 0010 4FF00103 		mov	r3, #1
 223 0014 1846     		mov	r0, r3
 224 0016 07F11407 		add	r7, r7, #20
 225 001a BD46     		mov	sp, r7
 226 001c 80BC     		pop	{r7}
 227 001e 7047     		bx	lr
 228              		.cfi_endproc
 229              	.LFE135:
 231              		.section	.text._ZN9CFreeRTOS15SuspendAllTasksEv,"axG",%progbits,_ZN9CFreeRTOS15SuspendAllTasksEv,c
 232              		.align	2
 233              		.weak	_ZN9CFreeRTOS15SuspendAllTasksEv
 234              		.thumb
 235              		.thumb_func
 237              	_ZN9CFreeRTOS15SuspendAllTasksEv:
 238              	.LFB138:
 239              		.file 3 "../FreeRTOS_EC/Source/CFreeRTOS.h"
   1:../FreeRTOS_EC/Source/CFreeRTOS.h **** /**
   2:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @file CFreeRTOS.h
   3:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @class CFreeRTOS
   4:../FreeRTOS_EC/Source/CFreeRTOS.h ****  *
   5:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * This class provide an interface for the <a href="http://www.freertos.org/a00020.html">Kernek Con
   6:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * Moreover provide a method used by the FreeRTOS Extension Layer to initialize the hardware resour
   7:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * All methods are static and inline.
   8:../FreeRTOS_EC/Source/CFreeRTOS.h ****  *
   9:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @date Jul 14, 2010
  10:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @author Stefano Oliveri (STF12.net)
  11:../FreeRTOS_EC/Source/CFreeRTOS.h ****  *         E-Mail: software@stf12.net
  12:../FreeRTOS_EC/Source/CFreeRTOS.h ****  */
  13:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  14:../FreeRTOS_EC/Source/CFreeRTOS.h **** /**
  15:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @defgroup FreeRTOS_CPP_EXT FreeRTOS Class Extension
  16:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * This set of C++ class aim to provide an Object Oriented framework to program a FreeRTOS applicat
  17:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @{
  18:../FreeRTOS_EC/Source/CFreeRTOS.h ****  */
  19:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  20:../FreeRTOS_EC/Source/CFreeRTOS.h **** /**
  21:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @defgroup FreeRTOS_Wrapper FreeRTOS Wrapper Class
  22:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @ingroup FreeRTOS_CPP_EXT
  23:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * The FreeRTOS Wrapper Layer provides a set of class that are able to attach to and manage a FreeR
  24:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * native handle.
  25:../FreeRTOS_EC/Source/CFreeRTOS.h ****  * @{
  26:../FreeRTOS_EC/Source/CFreeRTOS.h ****  */
  27:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  28:../FreeRTOS_EC/Source/CFreeRTOS.h **** #ifndef CFREERTOS_H_
  29:../FreeRTOS_EC/Source/CFreeRTOS.h **** #define CFREERTOS_H_
  30:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  31:../FreeRTOS_EC/Source/CFreeRTOS.h **** #include "FreeRTOS.h"
  32:../FreeRTOS_EC/Source/CFreeRTOS.h **** #include "task.h"
  33:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  34:../FreeRTOS_EC/Source/CFreeRTOS.h **** class CFreeRTOS {
  35:../FreeRTOS_EC/Source/CFreeRTOS.h **** public:
  36:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  37:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * Default constructor. Not used.
  38:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  39:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	CFreeRTOS();
  40:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  41:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  42:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * Destructor. Not used.
  43:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  44:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	~CFreeRTOS();
  45:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  46:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  47:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function
  48:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  49:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	static void StartScheduler() { vTaskStartScheduler(); }
  50:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  51:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  52:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00133.html">vTaskEndScheduler</a> FreeRTOS API function.
  53:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  54:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	static void EndScheduler() { vTaskEndScheduler(); }
  55:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  56:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  57:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00134.html">vTaskSuspendAll</a> FreeRTOS API function.
  58:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  59:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	static void SuspendAllTasks() { vTaskSuspendAll(); }
 240              		.loc 3 59 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 1, uses_anonymous_args = 0
 244 0000 80B5     		push	{r7, lr}
 245              	.LCFI16:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 14, -4
 248              		.cfi_offset 7, -8
 249 0002 00AF     		add	r7, sp, #0
 250              	.LCFI17:
 251              		.cfi_def_cfa_register 7
 252              		.loc 3 59 0
 253 0004 FFF7FEFF 		bl	vTaskSuspendAll
 254 0008 80BD     		pop	{r7, pc}
 255              		.cfi_endproc
 256              	.LFE138:
 258 000a 00BF     		.section	.text._ZN9CFreeRTOS14ResumeAllTasksEv,"axG",%progbits,_ZN9CFreeRTOS14ResumeAllTasksEv,com
 259              		.align	2
 260              		.weak	_ZN9CFreeRTOS14ResumeAllTasksEv
 261              		.thumb
 262              		.thumb_func
 264              	_ZN9CFreeRTOS14ResumeAllTasksEv:
 265              	.LFB139:
  60:../FreeRTOS_EC/Source/CFreeRTOS.h **** 
  61:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	/**
  62:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 * \sa <a href="http://www.freertos.org/a00135.html">xTaskResumeAll</a> FreeRTOS API function.
  63:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	 */
  64:../FreeRTOS_EC/Source/CFreeRTOS.h **** 	static signed portBASE_TYPE ResumeAllTasks() { return xTaskResumeAll(); }
 266              		.loc 3 64 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270 0000 80B5     		push	{r7, lr}
 271              	.LCFI18:
 272              		.cfi_def_cfa_offset 8
 273              		.cfi_offset 14, -4
 274              		.cfi_offset 7, -8
 275 0002 00AF     		add	r7, sp, #0
 276              	.LCFI19:
 277              		.cfi_def_cfa_register 7
 278              		.loc 3 64 0
 279 0004 FFF7FEFF 		bl	xTaskResumeAll
 280 0008 0346     		mov	r3, r0
 281 000a 1846     		mov	r0, r3
 282 000c 80BD     		pop	{r7, pc}
 283              		.cfi_endproc
 284              	.LFE139:
 286              		.global	_ZN12AManagedTask22s_pManagedTaskListHeadE
 287 000e 00BF     		.section	.bss._ZN12AManagedTask22s_pManagedTaskListHeadE,"aw",%nobits
 288              		.align	2
 291              	_ZN12AManagedTask22s_pManagedTaskListHeadE:
 292 0000 00000000 		.space	4
 293              		.text
 294              		.align	2
 295              		.global	_ZN12AManagedTaskC2Ev
 296              		.thumb
 297              		.thumb_func
 299              	_ZN12AManagedTaskC2Ev:
 300              	.LFB141:
 301              		.file 4 "../FreeRTOS_EC/Source/AManagedTask.cpp"
   1:../FreeRTOS_EC/Source/AManagedTask.cpp **** /**
   2:../FreeRTOS_EC/Source/AManagedTask.cpp ****  * AManagedTask.cpp
   3:../FreeRTOS_EC/Source/AManagedTask.cpp ****  *
   4:../FreeRTOS_EC/Source/AManagedTask.cpp ****  *  Created on: Aug 3, 2010
   5:../FreeRTOS_EC/Source/AManagedTask.cpp ****  *      Author: Stefano Oliveri
   6:../FreeRTOS_EC/Source/AManagedTask.cpp ****  */
   7:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
   8:../FreeRTOS_EC/Source/AManagedTask.cpp **** #include "AManagedTask.h"
   9:../FreeRTOS_EC/Source/AManagedTask.cpp **** #include "CFreeRTOS.h"
  10:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  11:../FreeRTOS_EC/Source/AManagedTask.cpp **** AManagedTask* AManagedTask::s_pManagedTaskListHead = NULL;
  12:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  13:../FreeRTOS_EC/Source/AManagedTask.cpp **** AManagedTask::AManagedTask() {
 302              		.loc 4 13 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 8
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306 0000 80B5     		push	{r7, lr}
 307              	.LCFI20:
 308              		.cfi_def_cfa_offset 8
 309              		.cfi_offset 14, -4
 310              		.cfi_offset 7, -8
 311 0002 82B0     		sub	sp, sp, #8
 312              	.LCFI21:
 313              		.cfi_def_cfa_offset 16
 314 0004 00AF     		add	r7, sp, #0
 315              	.LCFI22:
 316              		.cfi_def_cfa_register 7
 317 0006 7860     		str	r0, [r7, #4]
 318              	.LBB3:
 319              		.loc 4 13 0
 320 0008 7B68     		ldr	r3, [r7, #4]
 321 000a 1846     		mov	r0, r3
 322 000c FFF7FEFF 		bl	_ZN5CTaskC2Ev
 323 0010 7B68     		ldr	r3, [r7, #4]
 324 0012 084A     		ldr	r2, .L11
 325 0014 1A60     		str	r2, [r3, #0]
  14:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	m_pNextManagedTask = NULL;
 326              		.loc 4 14 0
 327 0016 7B68     		ldr	r3, [r7, #4]
 328 0018 4FF00002 		mov	r2, #0
 329 001c 9A60     		str	r2, [r3, #8]
  15:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	AddToManagedTask(this);
 330              		.loc 4 15 0
 331 001e 7868     		ldr	r0, [r7, #4]
 332 0020 7968     		ldr	r1, [r7, #4]
 333 0022 FFF7FEFF 		bl	_ZN12AManagedTask16AddToManagedTaskEPS_
 334              	.LBE3:
  16:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 335              		.loc 4 16 0
 336 0026 7B68     		ldr	r3, [r7, #4]
 337 0028 1846     		mov	r0, r3
 338 002a 07F10807 		add	r7, r7, #8
 339 002e BD46     		mov	sp, r7
 340 0030 80BD     		pop	{r7, pc}
 341              	.L12:
 342 0032 00BF     		.align	2
 343              	.L11:
 344 0034 08000000 		.word	_ZTV12AManagedTask+8
 345              		.cfi_endproc
 346              	.LFE141:
 348              		.align	2
 349              		.global	_ZN12AManagedTaskD2Ev
 350              		.thumb
 351              		.thumb_func
 353              	_ZN12AManagedTaskD2Ev:
 354              	.LFB144:
  17:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  18:../FreeRTOS_EC/Source/AManagedTask.cpp **** AManagedTask::~AManagedTask() {
 355              		.loc 4 18 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 8
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359 0038 80B5     		push	{r7, lr}
 360              	.LCFI23:
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 14, -4
 363              		.cfi_offset 7, -8
 364 003a 82B0     		sub	sp, sp, #8
 365              	.LCFI24:
 366              		.cfi_def_cfa_offset 16
 367 003c 00AF     		add	r7, sp, #0
 368              	.LCFI25:
 369              		.cfi_def_cfa_register 7
 370 003e 7860     		str	r0, [r7, #4]
 371              	.LBB4:
 372              		.loc 4 18 0
 373 0040 7B68     		ldr	r3, [r7, #4]
 374 0042 0C4A     		ldr	r2, .L16
 375 0044 1A60     		str	r2, [r3, #0]
  19:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	RemoveFromManagedTask(this);
 376              		.loc 4 19 0
 377 0046 7868     		ldr	r0, [r7, #4]
 378 0048 7968     		ldr	r1, [r7, #4]
 379 004a FFF7FEFF 		bl	_ZN12AManagedTask21RemoveFromManagedTaskEPS_
  20:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 380              		.loc 4 20 0
 381 004e 7868     		ldr	r0, [r7, #4]
 382 0050 FFF7FEFF 		bl	_ZN5CTaskD2Ev
 383              	.LBE4:
 384 0054 4FF00003 		mov	r3, #0
 385 0058 03F00103 		and	r3, r3, #1
 386 005c DBB2     		uxtb	r3, r3
 387 005e 002B     		cmp	r3, #0
 388 0060 02D0     		beq	.L15
 389              		.loc 4 20 0 is_stmt 0 discriminator 2
 390 0062 7868     		ldr	r0, [r7, #4]
 391 0064 FFF7FEFF 		bl	_ZdlPv
 392              	.L15:
 393              		.loc 4 20 0 discriminator 3
 394 0068 7B68     		ldr	r3, [r7, #4]
 395 006a 1846     		mov	r0, r3
 396 006c 07F10807 		add	r7, r7, #8
 397 0070 BD46     		mov	sp, r7
 398 0072 80BD     		pop	{r7, pc}
 399              	.L17:
 400              		.align	2
 401              	.L16:
 402 0074 08000000 		.word	_ZTV12AManagedTask+8
 403              		.cfi_endproc
 404              	.LFE144:
 406              		.align	2
 407              		.global	_ZN12AManagedTaskD0Ev
 408              		.thumb
 409              		.thumb_func
 411              	_ZN12AManagedTaskD0Ev:
 412              	.LFB146:
  18:../FreeRTOS_EC/Source/AManagedTask.cpp **** AManagedTask::~AManagedTask() {
 413              		.loc 4 18 0 is_stmt 1
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 8
 416              		@ frame_needed = 1, uses_anonymous_args = 0
 417 0078 80B5     		push	{r7, lr}
 418              	.LCFI26:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 14, -4
 421              		.cfi_offset 7, -8
 422 007a 82B0     		sub	sp, sp, #8
 423              	.LCFI27:
 424              		.cfi_def_cfa_offset 16
 425 007c 00AF     		add	r7, sp, #0
 426              	.LCFI28:
 427              		.cfi_def_cfa_register 7
 428 007e 7860     		str	r0, [r7, #4]
 429              		.loc 4 20 0
 430 0080 7868     		ldr	r0, [r7, #4]
 431 0082 FFF7FEFF 		bl	_ZN12AManagedTaskD1Ev
 432 0086 7868     		ldr	r0, [r7, #4]
 433 0088 FFF7FEFF 		bl	_ZdlPv
 434 008c 7B68     		ldr	r3, [r7, #4]
 435 008e 1846     		mov	r0, r3
 436 0090 07F10807 		add	r7, r7, #8
 437 0094 BD46     		mov	sp, r7
 438 0096 80BD     		pop	{r7, pc}
 439              		.cfi_endproc
 440              	.LFE146:
 442              		.align	2
 443              		.global	_ZN12AManagedTask6CreateEPKctm
 444              		.thumb
 445              		.thumb_func
 447              	_ZN12AManagedTask6CreateEPKctm:
 448              	.LFB147:
  21:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  22:../FreeRTOS_EC/Source/AManagedTask.cpp **** portBASE_TYPE AManagedTask::Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, 
 449              		.loc 4 22 0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 16
 452              		@ frame_needed = 1, uses_anonymous_args = 0
 453 0098 90B5     		push	{r4, r7, lr}
 454              	.LCFI29:
 455              		.cfi_def_cfa_offset 12
 456              		.cfi_offset 14, -4
 457              		.cfi_offset 7, -8
 458              		.cfi_offset 4, -12
 459 009a 87B0     		sub	sp, sp, #28
 460              	.LCFI30:
 461              		.cfi_def_cfa_offset 40
 462 009c 02AF     		add	r7, sp, #8
 463              	.LCFI31:
 464              		.cfi_def_cfa 7, 32
 465 009e F860     		str	r0, [r7, #12]
 466 00a0 B960     		str	r1, [r7, #8]
 467 00a2 3B60     		str	r3, [r7, #0]
 468 00a4 1346     		mov	r3, r2	@ movhi
 469 00a6 FB80     		strh	r3, [r7, #6]	@ movhi
  23:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	return OnCreate(pcName, usStackDepth, uxPriority) &&
 470              		.loc 4 23 0
 471 00a8 FB68     		ldr	r3, [r7, #12]
 472 00aa 1B68     		ldr	r3, [r3, #0]
 473 00ac 03F11C03 		add	r3, r3, #28
 474 00b0 1C68     		ldr	r4, [r3, #0]
 475 00b2 FB88     		ldrh	r3, [r7, #6]
 476 00b4 F868     		ldr	r0, [r7, #12]
 477 00b6 B968     		ldr	r1, [r7, #8]
 478 00b8 1A46     		mov	r2, r3
 479 00ba 3B68     		ldr	r3, [r7, #0]
 480 00bc A047     		blx	r4
 481 00be 0346     		mov	r3, r0
  24:../FreeRTOS_EC/Source/AManagedTask.cpp **** 			CTask::Create(AManagedTask::taskControlFunc, pcName, usStackDepth, this, uxPriority);
 482              		.loc 4 24 0
 483 00c0 002B     		cmp	r3, #0
 484 00c2 13D0     		beq	.L21
 485              		.loc 4 24 0 is_stmt 0 discriminator 1
 486 00c4 FA68     		ldr	r2, [r7, #12]
 487 00c6 FB88     		ldrh	r3, [r7, #6]
 488 00c8 F968     		ldr	r1, [r7, #12]
 489 00ca 0091     		str	r1, [sp, #0]
 490 00cc 3968     		ldr	r1, [r7, #0]
 491 00ce 0191     		str	r1, [sp, #4]
 492 00d0 1046     		mov	r0, r2
 493 00d2 40F20001 		movw	r1, #:lower16:_ZN12AManagedTask15taskControlFuncEPv
 494 00d6 C0F20001 		movt	r1, #:upper16:_ZN12AManagedTask15taskControlFuncEPv
 495 00da BA68     		ldr	r2, [r7, #8]
 496 00dc FFF7FEFF 		bl	_ZN5CTask6CreateEPFvPvEPKctS0_m
 497 00e0 0346     		mov	r3, r0
 498 00e2 002B     		cmp	r3, #0
 499 00e4 02D0     		beq	.L21
 500              		.loc 4 24 0 discriminator 3
 501 00e6 4FF00103 		mov	r3, #1
 502 00ea 01E0     		b	.L22
 503              	.L21:
 504              		.loc 4 24 0 discriminator 2
 505 00ec 4FF00003 		mov	r3, #0
 506              	.L22:
  25:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 507              		.loc 4 25 0 is_stmt 1 discriminator 4
 508 00f0 1846     		mov	r0, r3
 509 00f2 07F11407 		add	r7, r7, #20
 510 00f6 BD46     		mov	sp, r7
 511 00f8 90BD     		pop	{r4, r7, pc}
 512              		.cfi_endproc
 513              	.LFE147:
 515 00fa 00BF     		.align	2
 516              		.global	_ZN12AManagedTask15taskControlFuncEPv
 517              		.thumb
 518              		.thumb_func
 520              	_ZN12AManagedTask15taskControlFuncEPv:
 521              	.LFB148:
  26:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  27:../FreeRTOS_EC/Source/AManagedTask.cpp **** void AManagedTask::taskControlFunc(void *pParams) {
 522              		.loc 4 27 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 8
 525              		@ frame_needed = 1, uses_anonymous_args = 0
 526 00fc 80B5     		push	{r7, lr}
 527              	.LCFI32:
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 14, -4
 530              		.cfi_offset 7, -8
 531 00fe 82B0     		sub	sp, sp, #8
 532              	.LCFI33:
 533              		.cfi_def_cfa_offset 16
 534 0100 00AF     		add	r7, sp, #0
 535              	.LCFI34:
 536              		.cfi_def_cfa_register 7
 537 0102 7860     		str	r0, [r7, #4]
  28:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	static_cast<AManagedTask *>(pParams)->Run();
 538              		.loc 4 28 0
 539 0104 7B68     		ldr	r3, [r7, #4]
 540 0106 1B68     		ldr	r3, [r3, #0]
 541 0108 03F11803 		add	r3, r3, #24
 542 010c 1B68     		ldr	r3, [r3, #0]
 543 010e 7868     		ldr	r0, [r7, #4]
 544 0110 9847     		blx	r3
  29:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 545              		.loc 4 29 0
 546 0112 07F10807 		add	r7, r7, #8
 547 0116 BD46     		mov	sp, r7
 548 0118 80BD     		pop	{r7, pc}
 549              		.cfi_endproc
 550              	.LFE148:
 552 011a 00BF     		.align	2
 553              		.global	_ZN12AManagedTask16AddToManagedTaskEPS_
 554              		.thumb
 555              		.thumb_func
 557              	_ZN12AManagedTask16AddToManagedTaskEPS_:
 558              	.LFB149:
  30:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  31:../FreeRTOS_EC/Source/AManagedTask.cpp **** void AManagedTask::AddToManagedTask(AManagedTask *pTaskToAdd) {
 559              		.loc 4 31 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 8
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563 011c 80B5     		push	{r7, lr}
 564              	.LCFI35:
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 14, -4
 567              		.cfi_offset 7, -8
 568 011e 82B0     		sub	sp, sp, #8
 569              	.LCFI36:
 570              		.cfi_def_cfa_offset 16
 571 0120 00AF     		add	r7, sp, #0
 572              	.LCFI37:
 573              		.cfi_def_cfa_register 7
 574 0122 7860     		str	r0, [r7, #4]
 575 0124 3960     		str	r1, [r7, #0]
  32:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	EnterCritical();
 576              		.loc 4 32 0
 577 0126 FFF7FEFF 		bl	_ZN5CTask13EnterCriticalEv
  33:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	// is the first element?
  34:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	if (s_pManagedTaskListHead == NULL) {
 578              		.loc 4 34 0
 579 012a 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 580 012e C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 581 0132 1B68     		ldr	r3, [r3, #0]
 582 0134 002B     		cmp	r3, #0
 583 0136 06D1     		bne	.L25
  35:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		s_pManagedTaskListHead = this;
 584              		.loc 4 35 0
 585 0138 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 586 013c C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 587 0140 7A68     		ldr	r2, [r7, #4]
 588 0142 1A60     		str	r2, [r3, #0]
 589 0144 0CE0     		b	.L26
 590              	.L25:
  36:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	}
  37:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	else {
  38:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		// add the task to the head of the managed task list.
  39:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		m_pNextManagedTask = s_pManagedTaskListHead;
 591              		.loc 4 39 0
 592 0146 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 593 014a C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 594 014e 1A68     		ldr	r2, [r3, #0]
 595 0150 7B68     		ldr	r3, [r7, #4]
 596 0152 9A60     		str	r2, [r3, #8]
  40:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		s_pManagedTaskListHead = this;
 597              		.loc 4 40 0
 598 0154 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 599 0158 C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 600 015c 7A68     		ldr	r2, [r7, #4]
 601 015e 1A60     		str	r2, [r3, #0]
 602              	.L26:
  41:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	}
  42:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	ExitCritical();
 603              		.loc 4 42 0
 604 0160 FFF7FEFF 		bl	_ZN5CTask12ExitCriticalEv
  43:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 605              		.loc 4 43 0
 606 0164 07F10807 		add	r7, r7, #8
 607 0168 BD46     		mov	sp, r7
 608 016a 80BD     		pop	{r7, pc}
 609              		.cfi_endproc
 610              	.LFE149:
 612              		.align	2
 613              		.global	_ZN12AManagedTask21RemoveFromManagedTaskEPS_
 614              		.thumb
 615              		.thumb_func
 617              	_ZN12AManagedTask21RemoveFromManagedTaskEPS_:
 618              	.LFB150:
  44:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  45:../FreeRTOS_EC/Source/AManagedTask.cpp **** void AManagedTask::RemoveFromManagedTask(AManagedTask *pTaskToRemove) {
 619              		.loc 4 45 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 16
 622              		@ frame_needed = 1, uses_anonymous_args = 0
 623 016c 80B5     		push	{r7, lr}
 624              	.LCFI38:
 625              		.cfi_def_cfa_offset 8
 626              		.cfi_offset 14, -4
 627              		.cfi_offset 7, -8
 628 016e 84B0     		sub	sp, sp, #16
 629              	.LCFI39:
 630              		.cfi_def_cfa_offset 24
 631 0170 00AF     		add	r7, sp, #0
 632              	.LCFI40:
 633              		.cfi_def_cfa_register 7
 634 0172 7860     		str	r0, [r7, #4]
 635 0174 3960     		str	r1, [r7, #0]
 636              	.LBB5:
  46:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	// search for the task to remove in the managed task list
  47:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	// is it the first element?
  48:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	EnterCritical();
 637              		.loc 4 48 0
 638 0176 FFF7FEFF 		bl	_ZN5CTask13EnterCriticalEv
 639              	.LBB6:
  49:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	if (pTaskToRemove == s_pManagedTaskListHead) {
 640              		.loc 4 49 0
 641 017a 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 642 017e C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 643 0182 1B68     		ldr	r3, [r3, #0]
 644 0184 3A68     		ldr	r2, [r7, #0]
 645 0186 9A42     		cmp	r2, r3
 646 0188 09D1     		bne	.L28
  50:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		s_pManagedTaskListHead = pTaskToRemove->m_pNextManagedTask;
 647              		.loc 4 50 0
 648 018a 3B68     		ldr	r3, [r7, #0]
 649 018c 9A68     		ldr	r2, [r3, #8]
 650 018e 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 651 0192 C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 652 0196 1A60     		str	r2, [r3, #0]
  51:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		ExitCritical();
 653              		.loc 4 51 0
 654 0198 FFF7FEFF 		bl	_ZN5CTask12ExitCriticalEv
 655 019c 25E0     		b	.L27
 656              	.L28:
 657              	.LBB7:
  52:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	}
  53:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	else {
  54:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		ExitCritical();
 658              		.loc 4 54 0
 659 019e FFF7FEFF 		bl	_ZN5CTask12ExitCriticalEv
  55:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		CFreeRTOS::SuspendAllTasks();
 660              		.loc 4 55 0
 661 01a2 FFF7FEFF 		bl	_ZN9CFreeRTOS15SuspendAllTasksEv
  56:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		AManagedTask *pTask = s_pManagedTaskListHead;
 662              		.loc 4 56 0
 663 01a6 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 664 01aa C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 665 01ae 1B68     		ldr	r3, [r3, #0]
 666 01b0 FB60     		str	r3, [r7, #12]
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 667              		.loc 4 57 0
 668 01b2 02E0     		b	.L30
 669              	.L33:
  58:../FreeRTOS_EC/Source/AManagedTask.cpp **** 			pTask = pTask->m_pNextManagedTask;
 670              		.loc 4 58 0
 671 01b4 FB68     		ldr	r3, [r7, #12]
 672 01b6 9B68     		ldr	r3, [r3, #8]
 673 01b8 FB60     		str	r3, [r7, #12]
 674              	.L30:
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 675              		.loc 4 57 0 discriminator 1
 676 01ba FB68     		ldr	r3, [r7, #12]
 677 01bc 002B     		cmp	r3, #0
 678 01be 07D0     		beq	.L31
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 679              		.loc 4 57 0 is_stmt 0 discriminator 2
 680 01c0 FB68     		ldr	r3, [r7, #12]
 681 01c2 9A68     		ldr	r2, [r3, #8]
 682 01c4 3B68     		ldr	r3, [r7, #0]
 683 01c6 9A42     		cmp	r2, r3
 684 01c8 02D0     		beq	.L31
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 685              		.loc 4 57 0 discriminator 4
 686 01ca 4FF00103 		mov	r3, #1
 687 01ce 01E0     		b	.L32
 688              	.L31:
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 689              		.loc 4 57 0 discriminator 3
 690 01d0 4FF00003 		mov	r3, #0
 691              	.L32:
  57:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 692              		.loc 4 57 0 discriminator 5
 693 01d4 002B     		cmp	r3, #0
 694 01d6 EDD1     		bne	.L33
  59:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		}
  60:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		if (pTask != NULL) { // Check to be sure that the task is in the list
 695              		.loc 4 60 0 is_stmt 1
 696 01d8 FB68     		ldr	r3, [r7, #12]
 697 01da 002B     		cmp	r3, #0
 698 01dc 03D0     		beq	.L34
  61:../FreeRTOS_EC/Source/AManagedTask.cpp **** 			// remove the thask from the list
  62:../FreeRTOS_EC/Source/AManagedTask.cpp **** 			pTask->m_pNextManagedTask = pTaskToRemove->m_pNextManagedTask;
 699              		.loc 4 62 0
 700 01de 3B68     		ldr	r3, [r7, #0]
 701 01e0 9A68     		ldr	r2, [r3, #8]
 702 01e2 FB68     		ldr	r3, [r7, #12]
 703 01e4 9A60     		str	r2, [r3, #8]
 704              	.L34:
  63:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		}
  64:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		CFreeRTOS::ResumeAllTasks();
 705              		.loc 4 64 0
 706 01e6 FFF7FEFF 		bl	_ZN9CFreeRTOS14ResumeAllTasksEv
 707              	.L27:
 708              	.LBE7:
 709              	.LBE6:
 710              	.LBE5:
  65:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	}
  66:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 711              		.loc 4 66 0
 712 01ea 07F11007 		add	r7, r7, #16
 713 01ee BD46     		mov	sp, r7
 714 01f0 80BD     		pop	{r7, pc}
 715              		.cfi_endproc
 716              	.LFE150:
 718 01f2 00BF     		.align	2
 719              		.global	_ZN12AManagedTask27InitHardwareForManagedTasksEv
 720              		.thumb
 721              		.thumb_func
 723              	_ZN12AManagedTask27InitHardwareForManagedTasksEv:
 724              	.LFB151:
  67:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  68:../FreeRTOS_EC/Source/AManagedTask.cpp **** bool AManagedTask::InitHardwareForManagedTasks() {
 725              		.loc 4 68 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 8
 728              		@ frame_needed = 1, uses_anonymous_args = 0
 729 01f4 90B5     		push	{r4, r7, lr}
 730              	.LCFI41:
 731              		.cfi_def_cfa_offset 12
 732              		.cfi_offset 14, -4
 733              		.cfi_offset 7, -8
 734              		.cfi_offset 4, -12
 735 01f6 83B0     		sub	sp, sp, #12
 736              	.LCFI42:
 737              		.cfi_def_cfa_offset 24
 738 01f8 00AF     		add	r7, sp, #0
 739              	.LCFI43:
 740              		.cfi_def_cfa_register 7
 741              	.LBB8:
  69:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	bool bRes = true;
 742              		.loc 4 69 0
 743 01fa 4FF00103 		mov	r3, #1
 744 01fe FB71     		strb	r3, [r7, #7]
 745              	.LBB9:
  70:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 746              		.loc 4 70 0
 747 0200 40F20003 		movw	r3, #:lower16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 748 0204 C0F20003 		movt	r3, #:upper16:_ZN12AManagedTask22s_pManagedTaskListHeadE
 749 0208 1B68     		ldr	r3, [r3, #0]
 750 020a 3B60     		str	r3, [r7, #0]
 751 020c 11E0     		b	.L36
 752              	.L37:
  71:../FreeRTOS_EC/Source/AManagedTask.cpp **** 		bRes &= pTask->HardwareInit();
 753              		.loc 4 71 0 discriminator 2
 754 020e FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 755 0210 3B68     		ldr	r3, [r7, #0]
 756 0212 1B68     		ldr	r3, [r3, #0]
 757 0214 03F11403 		add	r3, r3, #20
 758 0218 1B68     		ldr	r3, [r3, #0]
 759 021a 3868     		ldr	r0, [r7, #0]
 760 021c 9847     		blx	r3
 761 021e 0346     		mov	r3, r0
 762 0220 2340     		ands	r3, r3, r4
 763 0222 002B     		cmp	r3, #0
 764 0224 0CBF     		ite	eq
 765 0226 0023     		moveq	r3, #0
 766 0228 0123     		movne	r3, #1
 767 022a FB71     		strb	r3, [r7, #7]
  70:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 768              		.loc 4 70 0 discriminator 2
 769 022c 3B68     		ldr	r3, [r7, #0]
 770 022e 9B68     		ldr	r3, [r3, #8]
 771 0230 3B60     		str	r3, [r7, #0]
 772              	.L36:
  70:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 773              		.loc 4 70 0 is_stmt 0 discriminator 1
 774 0232 3B68     		ldr	r3, [r7, #0]
 775 0234 002B     		cmp	r3, #0
 776 0236 0CBF     		ite	eq
 777 0238 0023     		moveq	r3, #0
 778 023a 0123     		movne	r3, #1
 779 023c DBB2     		uxtb	r3, r3
 780 023e 002B     		cmp	r3, #0
 781 0240 E5D1     		bne	.L37
 782              	.LBE9:
  72:../FreeRTOS_EC/Source/AManagedTask.cpp **** 
  73:../FreeRTOS_EC/Source/AManagedTask.cpp **** 	return bRes;
 783              		.loc 4 73 0 is_stmt 1
 784 0242 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 785              	.LBE8:
  74:../FreeRTOS_EC/Source/AManagedTask.cpp **** }
 786              		.loc 4 74 0
 787 0244 1846     		mov	r0, r3
 788 0246 07F10C07 		add	r7, r7, #12
 789 024a BD46     		mov	sp, r7
 790 024c 90BD     		pop	{r4, r7, pc}
 791              		.cfi_endproc
 792              	.LFE151:
 794              		.global	_ZTV12AManagedTask
 795              		.section	.rodata._ZTV12AManagedTask,"a",%progbits
 796              		.align	3
 799              	_ZTV12AManagedTask:
 800 0000 00000000 		.word	0
 801 0004 00000000 		.word	0
 802 0008 00000000 		.word	_ZNK5CTask7IsValidEv
 803 000c 00000000 		.word	_ZN5CTask6AttachEPv
 804 0010 00000000 		.word	_ZN5CTask6DetachEv
 805 0014 00000000 		.word	_ZN12AManagedTaskD1Ev
 806 0018 00000000 		.word	_ZN12AManagedTaskD0Ev
 807 001c 00000000 		.word	_ZN12AManagedTask12HardwareInitEv
 808 0020 00000000 		.word	__cxa_pure_virtual
 809 0024 00000000 		.word	_ZN12AManagedTask8OnCreateEPKctm
 810              		.global	_ZN12AManagedTaskC1Ev
 811              		.thumb_set _ZN12AManagedTaskC1Ev,_ZN12AManagedTaskC2Ev
 812              		.global	_ZN12AManagedTaskD1Ev
 813              		.thumb_set _ZN12AManagedTaskD1Ev,_ZN12AManagedTaskD2Ev
 814              		.text
 815              	.Letext0:
 816              		.file 5 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 817              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/task.h"
 818              		.file 7 "../FreeRTOS_EC/Source/IFreeRTOSProtocol.h"
 819              		.file 8 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 AManagedTask.cpp
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:20     .text._ZN5CTask13EnterCriticalEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:25     .text._ZN5CTask13EnterCriticalEv:00000000 _ZN5CTask13EnterCriticalEv
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:47     .text._ZN5CTask12ExitCriticalEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:52     .text._ZN5CTask12ExitCriticalEv:00000000 _ZN5CTask12ExitCriticalEv
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:73     .text._ZNK5CTask7IsValidEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:78     .text._ZNK5CTask7IsValidEv:00000000 _ZNK5CTask7IsValidEv
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:114    .text._ZN5CTask6DetachEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:119    .text._ZN5CTask6DetachEv:00000000 _ZN5CTask6DetachEv
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:159    .text._ZN12AManagedTask12HardwareInitEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:164    .text._ZN12AManagedTask12HardwareInitEv:00000000 _ZN12AManagedTask12HardwareInitEv
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:194    .text._ZN12AManagedTask8OnCreateEPKctm:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:199    .text._ZN12AManagedTask8OnCreateEPKctm:00000000 _ZN12AManagedTask8OnCreateEPKctm
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:232    .text._ZN9CFreeRTOS15SuspendAllTasksEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:237    .text._ZN9CFreeRTOS15SuspendAllTasksEv:00000000 _ZN9CFreeRTOS15SuspendAllTasksEv
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:259    .text._ZN9CFreeRTOS14ResumeAllTasksEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:264    .text._ZN9CFreeRTOS14ResumeAllTasksEv:00000000 _ZN9CFreeRTOS14ResumeAllTasksEv
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:291    .bss._ZN12AManagedTask22s_pManagedTaskListHeadE:00000000 _ZN12AManagedTask22s_pManagedTaskListHeadE
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:288    .bss._ZN12AManagedTask22s_pManagedTaskListHeadE:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:294    .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:299    .text:00000000 _ZN12AManagedTaskC2Ev
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:557    .text:0000011c _ZN12AManagedTask16AddToManagedTaskEPS_
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:344    .text:00000034 $d
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:799    .rodata._ZTV12AManagedTask:00000000 _ZTV12AManagedTask
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:348    .text:00000038 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:353    .text:00000038 _ZN12AManagedTaskD2Ev
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:617    .text:0000016c _ZN12AManagedTask21RemoveFromManagedTaskEPS_
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:402    .text:00000074 $d
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:406    .text:00000078 $t
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:411    .text:00000078 _ZN12AManagedTaskD0Ev
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:353    .text:00000038 _ZN12AManagedTaskD1Ev
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:447    .text:00000098 _ZN12AManagedTask6CreateEPKctm
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:520    .text:000000fc _ZN12AManagedTask15taskControlFuncEPv
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:723    .text:000001f4 _ZN12AManagedTask27InitHardwareForManagedTasksEv
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:796    .rodata._ZTV12AManagedTask:00000000 $d
C:\Users\Alex\AppData\Local\Temp\cc0zLgxC.s:299    .text:00000000 _ZN12AManagedTaskC1Ev
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
vTaskSuspendAll
xTaskResumeAll
_ZN5CTaskC2Ev
_ZN5CTaskD2Ev
_ZdlPv
_ZN5CTask6CreateEPFvPvEPKctS0_m
_ZN5CTask6AttachEPv
__cxa_pure_virtual
