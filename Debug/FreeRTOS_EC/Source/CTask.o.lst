   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"CTask.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZNK5CTask7IsValidEv,"axG",%progbits,_ZNK5CTask7IsValidEv,comdat
  19              		.align	2
  20              		.weak	_ZNK5CTask7IsValidEv
  21              		.thumb
  22              		.thumb_func
  24              	_ZNK5CTask7IsValidEv:
  25              	.LFB132:
  26              		.file 1 "../FreeRTOS_EC/Source/CTask.h"
   1:../FreeRTOS_EC/Source/CTask.h **** /**
   2:../FreeRTOS_EC/Source/CTask.h ****  * @file CTask.h
   3:../FreeRTOS_EC/Source/CTask.h ****  * @class CTask
   4:../FreeRTOS_EC/Source/CTask.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CTask.h ****  *
   6:../FreeRTOS_EC/Source/CTask.h ****  * The CTask class wraps a native FreeRTOS task handle (xTaskHandle). To create a task instance
   7:../FreeRTOS_EC/Source/CTask.h ****  * an object of this class and then call its CTask::Create method like showed in the following samp
   8:../FreeRTOS_EC/Source/CTask.h ****  * \code
   9:../FreeRTOS_EC/Source/CTask.h ****  * CTask g_aTask // global task declaration.
  10:../FreeRTOS_EC/Source/CTask.h ****  *
  11:../FreeRTOS_EC/Source/CTask.h ****  * void main()
  12:../FreeRTOS_EC/Source/CTask.h ****  * {
  13:../FreeRTOS_EC/Source/CTask.h ****  * 	g_aTask.Create(task_control_func, "Led2", configMINIMAL_STACK_SIZE, mainFLASH_TASK_PRIORITY);
  14:../FreeRTOS_EC/Source/CTask.h ****  *
  15:../FreeRTOS_EC/Source/CTask.h ****  * 	CFreeRTOS::StartScheduler();
  16:../FreeRTOS_EC/Source/CTask.h ****  * }
  17:../FreeRTOS_EC/Source/CTask.h ****  * \endcode
  18:../FreeRTOS_EC/Source/CTask.h ****  *
  19:../FreeRTOS_EC/Source/CTask.h ****  * Usually the application subclass this class to create an application specific task object.
  20:../FreeRTOS_EC/Source/CTask.h ****  * See the CHelloWorld class for an example.
  21:../FreeRTOS_EC/Source/CTask.h ****  *
  22:../FreeRTOS_EC/Source/CTask.h ****  * \sa <a href="http://www.freertos.org/taskandcr.html">task documentation</a> in the FreeRTOS web 
  23:../FreeRTOS_EC/Source/CTask.h ****  *
  24:../FreeRTOS_EC/Source/CTask.h ****  * @date Jul 5, 2010
  25:../FreeRTOS_EC/Source/CTask.h ****  * @author Stefano Oliveri (STF12.net)
  26:../FreeRTOS_EC/Source/CTask.h ****  *         E-Mail: software@stf12.net
  27:../FreeRTOS_EC/Source/CTask.h ****  */
  28:../FreeRTOS_EC/Source/CTask.h **** 
  29:../FreeRTOS_EC/Source/CTask.h **** #ifndef CTASK_H_
  30:../FreeRTOS_EC/Source/CTask.h **** #define CTASK_H_
  31:../FreeRTOS_EC/Source/CTask.h **** 
  32:../FreeRTOS_EC/Source/CTask.h **** #include "FreeRTOS.h"
  33:../FreeRTOS_EC/Source/CTask.h **** #include "task.h"
  34:../FreeRTOS_EC/Source/CTask.h **** #include "IFreeRTOSProtocol.h"
  35:../FreeRTOS_EC/Source/CTask.h **** 
  36:../FreeRTOS_EC/Source/CTask.h **** class CTask: public IFreeRTOSObj {
  37:../FreeRTOS_EC/Source/CTask.h **** 
  38:../FreeRTOS_EC/Source/CTask.h **** 	/**
  39:../FreeRTOS_EC/Source/CTask.h **** 	 * Specifies the native FreeRTOS handle managed by an instance of this class.
  40:../FreeRTOS_EC/Source/CTask.h **** 	 */
  41:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle m_handleTask;
  42:../FreeRTOS_EC/Source/CTask.h **** 
  43:../FreeRTOS_EC/Source/CTask.h **** public:
  44:../FreeRTOS_EC/Source/CTask.h **** 	/**
  45:../FreeRTOS_EC/Source/CTask.h **** 	 * The default constructor. It initializes the object without attaching it to a native FreeRTOS ha
  46:../FreeRTOS_EC/Source/CTask.h **** 	 * Call the Create method to allocate a task handle and attach it to the object.
  47:../FreeRTOS_EC/Source/CTask.h **** 	 */
  48:../FreeRTOS_EC/Source/CTask.h **** 	CTask();
  49:../FreeRTOS_EC/Source/CTask.h **** 
  50:../FreeRTOS_EC/Source/CTask.h **** 	/**
  51:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a CTask instance and attach it to a valid handle.
  52:../FreeRTOS_EC/Source/CTask.h **** 	 *
  53:../FreeRTOS_EC/Source/CTask.h **** 	 * @param handleTask a valid task handle.
  54:../FreeRTOS_EC/Source/CTask.h **** 	 */
  55:../FreeRTOS_EC/Source/CTask.h **** 	CTask(xTaskHandle handleTask);
  56:../FreeRTOS_EC/Source/CTask.h **** 
  57:../FreeRTOS_EC/Source/CTask.h **** 	/**
  58:../FreeRTOS_EC/Source/CTask.h **** 	 * Delete the native FreeRTOS task.
  59:../FreeRTOS_EC/Source/CTask.h **** 	 */
  60:../FreeRTOS_EC/Source/CTask.h **** 	virtual ~CTask();
  61:../FreeRTOS_EC/Source/CTask.h **** 
  62:../FreeRTOS_EC/Source/CTask.h **** 	/**
  63:../FreeRTOS_EC/Source/CTask.h **** 	 * Retrieve the native FreeRTOS task handle attached to this object.
  64:../FreeRTOS_EC/Source/CTask.h **** 	 *
  65:../FreeRTOS_EC/Source/CTask.h **** 	 * @return the native FreeRTOS task handle attached to this object.
  66:../FreeRTOS_EC/Source/CTask.h **** 	 */
  67:../FreeRTOS_EC/Source/CTask.h **** 	inline operator xTaskHandle() const { return m_handleTask; }
  68:../FreeRTOS_EC/Source/CTask.h **** 
  69:../FreeRTOS_EC/Source/CTask.h **** 	// FreeRTOS API Wrappers
  70:../FreeRTOS_EC/Source/CTask.h **** 
  71:../FreeRTOS_EC/Source/CTask.h **** 	/**
  72:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a FreeRTOS task and attach its handle to the receiver object.
  73:../FreeRTOS_EC/Source/CTask.h **** 	 *
  74:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00125.html">xTaskCreate</a> FreeRTOS API function.
  75:../FreeRTOS_EC/Source/CTask.h **** 	 */
  76:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usS
  77:../FreeRTOS_EC/Source/CTask.h **** 
  78:../FreeRTOS_EC/Source/CTask.h **** 	/**
  79:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a Memory Protection Unit (MPU) restricted task and attach its handle to the receiver obj
  80:../FreeRTOS_EC/Source/CTask.h **** 	 *
  81:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/xTaskCreateRestricted.html">xTaskCreateRestricted</a> Free
  82:../FreeRTOS_EC/Source/CTask.h **** 	 */
  83:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE CreateRestricted(xTaskParameters *pxTaskDefinition);
  84:../FreeRTOS_EC/Source/CTask.h **** 
  85:../FreeRTOS_EC/Source/CTask.h **** 	/**
  86:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00126.html">vTaskDelete</a>  FreeRTOS API function.
  87:../FreeRTOS_EC/Source/CTask.h **** 	 */
  88:../FreeRTOS_EC/Source/CTask.h **** 	void Delete();
  89:../FreeRTOS_EC/Source/CTask.h **** 
  90:../FreeRTOS_EC/Source/CTask.h **** 	/**
  91:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00127.html">vTaskDelay</a>  FreeRTOS API function.
  92:../FreeRTOS_EC/Source/CTask.h **** 	 */
  93:../FreeRTOS_EC/Source/CTask.h **** 	inline static void Delay(portTickType xTicksToDelay);
  94:../FreeRTOS_EC/Source/CTask.h **** 
  95:../FreeRTOS_EC/Source/CTask.h **** 	/**
  96:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/vtaskdelayuntil.html">vTaskDelayUntil</a>  FreeRTOS API fu
  97:../FreeRTOS_EC/Source/CTask.h **** 	 */
  98:../FreeRTOS_EC/Source/CTask.h ****     inline static void DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement);
  99:../FreeRTOS_EC/Source/CTask.h **** 
 100:../FreeRTOS_EC/Source/CTask.h ****     /**
 101:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskYIELD">taskYIELD</a>  FreeRTOS API func
 102:../FreeRTOS_EC/Source/CTask.h ****      */
 103:../FreeRTOS_EC/Source/CTask.h ****     inline static void Yeld() { taskYIELD(); }
 104:../FreeRTOS_EC/Source/CTask.h **** 
 105:../FreeRTOS_EC/Source/CTask.h ****     /**
 106:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a> 
 107:../FreeRTOS_EC/Source/CTask.h ****      */
 108:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnterCritical() { taskENTER_CRITICAL(); }
 109:../FreeRTOS_EC/Source/CTask.h **** 
 110:../FreeRTOS_EC/Source/CTask.h ****     /**
 111:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  F
 112:../FreeRTOS_EC/Source/CTask.h ****      */
 113:../FreeRTOS_EC/Source/CTask.h ****     inline static void ExitCritical() { taskEXIT_CRITICAL(); }
 114:../FreeRTOS_EC/Source/CTask.h **** 
 115:../FreeRTOS_EC/Source/CTask.h ****     /**
 116:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskDISABLE_INTERRUPTS">taskDISABLE_INTERRU
 117:../FreeRTOS_EC/Source/CTask.h ****      */
 118:../FreeRTOS_EC/Source/CTask.h ****     inline static void DisableInterrupt() { taskDISABLE_INTERRUPTS(); }
 119:../FreeRTOS_EC/Source/CTask.h **** 
 120:../FreeRTOS_EC/Source/CTask.h ****     /**
 121:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENABLE_INTERRUPTS">taskENABLE_INTERRUPT
 122:../FreeRTOS_EC/Source/CTask.h ****      */
 123:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnableInterrupt() { taskENABLE_INTERRUPTS(); }
 124:../FreeRTOS_EC/Source/CTask.h **** 
 125:../FreeRTOS_EC/Source/CTask.h ****     /**
 126:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetCurrentTaskHandle">xTaskGetCurrentT
 127:../FreeRTOS_EC/Source/CTask.h ****      */
 128:../FreeRTOS_EC/Source/CTask.h ****     inline static xTaskHandle GetCurrentTaskHandle();
 129:../FreeRTOS_EC/Source/CTask.h **** 
 130:../FreeRTOS_EC/Source/CTask.h ****     /**
 131:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetTickCount">xTaskGetTickCount</a>  F
 132:../FreeRTOS_EC/Source/CTask.h ****      */
 133:../FreeRTOS_EC/Source/CTask.h ****     inline static portTickType GetTickCount();
 134:../FreeRTOS_EC/Source/CTask.h **** 
 135:../FreeRTOS_EC/Source/CTask.h ****     /**
 136:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetSchedulerState">xTaskGetSchedulerSt
 137:../FreeRTOS_EC/Source/CTask.h ****      */
 138:../FreeRTOS_EC/Source/CTask.h ****     inline static portBASE_TYPE GetSchedulerState();
 139:../FreeRTOS_EC/Source/CTask.h **** 
 140:../FreeRTOS_EC/Source/CTask.h ****     /**
 141:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#usTaskGetNumberOfTasks">uxTaskGetNumberOfTa
 142:../FreeRTOS_EC/Source/CTask.h ****      */
 143:../FreeRTOS_EC/Source/CTask.h ****     inline static unsigned portBASE_TYPE GetNumberOfTasks();
 144:../FreeRTOS_EC/Source/CTask.h **** 
 145:../FreeRTOS_EC/Source/CTask.h ****     /**
 146:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskList">vTaskList</a>  FreeRTOS API func
 147:../FreeRTOS_EC/Source/CTask.h ****      */
 148:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetTaskList(portCHAR *pcWriteBuffer);
 149:../FreeRTOS_EC/Source/CTask.h **** 
 150:../FreeRTOS_EC/Source/CTask.h ****     /**
 151:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskGetRunTimeStats">vTaskGetRunTimeStats<
 152:../FreeRTOS_EC/Source/CTask.h ****      */
 153:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetRunTimeStats(portCHAR *pcWriteBuffer);
 154:../FreeRTOS_EC/Source/CTask.h **** 
 155:../FreeRTOS_EC/Source/CTask.h ****     /**
 156:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00128.html">uxTaskPriorityGet</a>  FreeRTOS API functi
 157:../FreeRTOS_EC/Source/CTask.h ****      */
 158:../FreeRTOS_EC/Source/CTask.h ****     inline unsigned portBASE_TYPE PriorityGet() const;
 159:../FreeRTOS_EC/Source/CTask.h **** 
 160:../FreeRTOS_EC/Source/CTask.h ****     /**
 161:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00129.html">vTaskPrioritySet</a>  FreeRTOS API functio
 162:../FreeRTOS_EC/Source/CTask.h ****      */
 163:../FreeRTOS_EC/Source/CTask.h ****     inline void PrioritySet(unsigned portBASE_TYPE uxNewPriority);
 164:../FreeRTOS_EC/Source/CTask.h **** 
 165:../FreeRTOS_EC/Source/CTask.h ****     /**
 166:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00130.html">vTaskSuspend</a>  FreeRTOS API function.
 167:../FreeRTOS_EC/Source/CTask.h ****      */
 168:../FreeRTOS_EC/Source/CTask.h ****     inline void Suspend();
 169:../FreeRTOS_EC/Source/CTask.h **** 
 170:../FreeRTOS_EC/Source/CTask.h ****     /**
 171:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00131.html">vTaskResume</a>  FreeRTOS API function.
 172:../FreeRTOS_EC/Source/CTask.h ****      */
 173:../FreeRTOS_EC/Source/CTask.h ****     inline void Resume();
 174:../FreeRTOS_EC/Source/CTask.h **** 
 175:../FreeRTOS_EC/Source/CTask.h ****     /**
 176:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/taskresumefromisr.html">xTaskResumeFromISR</a>  FreeRTO
 177:../FreeRTOS_EC/Source/CTask.h ****      */
 178:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE ResumeFromISR();
 179:../FreeRTOS_EC/Source/CTask.h **** 
 180:../FreeRTOS_EC/Source/CTask.h ****     /**
 181:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskSetApplicationTag.html">vTaskSetApplicationTaskTag
 182:../FreeRTOS_EC/Source/CTask.h ****      */
 183:../FreeRTOS_EC/Source/CTask.h ****     inline void SetApplicationTag(pdTASK_HOOK_CODE pxTagValue);
 184:../FreeRTOS_EC/Source/CTask.h **** 
 185:../FreeRTOS_EC/Source/CTask.h ****     /**
 186:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/xTaskCallApplicationTaskHook.html">xTaskCallApplication
 187:../FreeRTOS_EC/Source/CTask.h ****      */
 188:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE CallApplicationTaskHook(void *pvParameter);
 189:../FreeRTOS_EC/Source/CTask.h **** 
 190:../FreeRTOS_EC/Source/CTask.h ****     /**
 191:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskAllocateMPURegions.html">vTaskAllocateMPURegions</
 192:../FreeRTOS_EC/Source/CTask.h ****      */
 193:../FreeRTOS_EC/Source/CTask.h ****     inline void AllocateMPURegions(const xMemoryRegion * const xRegions);
 194:../FreeRTOS_EC/Source/CTask.h **** 
 195:../FreeRTOS_EC/Source/CTask.h ****     // FreeRTOS class extension.
 196:../FreeRTOS_EC/Source/CTask.h **** 	inline bool IsValid() const;
 197:../FreeRTOS_EC/Source/CTask.h **** 	void Attach(xGenericHandle handle);
 198:../FreeRTOS_EC/Source/CTask.h **** 	inline xGenericHandle Detach();
 199:../FreeRTOS_EC/Source/CTask.h **** };
 200:../FreeRTOS_EC/Source/CTask.h **** 
 201:../FreeRTOS_EC/Source/CTask.h **** // inline method
 202:../FreeRTOS_EC/Source/CTask.h **** ////////////////
 203:../FreeRTOS_EC/Source/CTask.h **** 
 204:../FreeRTOS_EC/Source/CTask.h **** inline
 205:../FreeRTOS_EC/Source/CTask.h **** void CTask::Delay(portTickType xTicksToDelay) {
 206:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelay == 1 )
 207:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelay(xTicksToDelay);
 208:../FreeRTOS_EC/Source/CTask.h **** #endif
 209:../FreeRTOS_EC/Source/CTask.h **** }
 210:../FreeRTOS_EC/Source/CTask.h **** 
 211:../FreeRTOS_EC/Source/CTask.h **** inline
 212:../FreeRTOS_EC/Source/CTask.h **** void CTask::DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement) {
 213:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 214:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelayUntil(pxPreviousWakeTime, xTimeIncrement);
 215:../FreeRTOS_EC/Source/CTask.h **** #endif
 216:../FreeRTOS_EC/Source/CTask.h **** }
 217:../FreeRTOS_EC/Source/CTask.h **** 
 218:../FreeRTOS_EC/Source/CTask.h **** inline
 219:../FreeRTOS_EC/Source/CTask.h **** xTaskHandle CTask::GetCurrentTaskHandle() {
 220:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetCurrentTaskHandle();
 221:../FreeRTOS_EC/Source/CTask.h **** }
 222:../FreeRTOS_EC/Source/CTask.h **** 
 223:../FreeRTOS_EC/Source/CTask.h **** inline
 224:../FreeRTOS_EC/Source/CTask.h **** portTickType CTask::GetTickCount() {
 225:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetTickCount();
 226:../FreeRTOS_EC/Source/CTask.h **** }
 227:../FreeRTOS_EC/Source/CTask.h **** 
 228:../FreeRTOS_EC/Source/CTask.h **** inline
 229:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::GetSchedulerState() {
 230:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_xTaskGetSchedulerState == 1 )
 231:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetSchedulerState();
 232:../FreeRTOS_EC/Source/CTask.h **** #else
 233:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 234:../FreeRTOS_EC/Source/CTask.h **** #endif
 235:../FreeRTOS_EC/Source/CTask.h **** }
 236:../FreeRTOS_EC/Source/CTask.h **** 
 237:../FreeRTOS_EC/Source/CTask.h **** inline
 238:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::GetNumberOfTasks() {
 239:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskGetNumberOfTasks();
 240:../FreeRTOS_EC/Source/CTask.h **** }
 241:../FreeRTOS_EC/Source/CTask.h **** 
 242:../FreeRTOS_EC/Source/CTask.h **** inline
 243:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetTaskList(portCHAR *pcWriteBuffer) {
 244:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_TRACE_FACILITY == 1 )
 245:../FreeRTOS_EC/Source/CTask.h **** 	vTaskList((signed portCHAR*)pcWriteBuffer);
 246:../FreeRTOS_EC/Source/CTask.h **** #endif
 247:../FreeRTOS_EC/Source/CTask.h **** }
 248:../FreeRTOS_EC/Source/CTask.h **** 
 249:../FreeRTOS_EC/Source/CTask.h **** inline
 250:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetRunTimeStats(portCHAR *pcWriteBuffer) {
 251:../FreeRTOS_EC/Source/CTask.h **** #if (configGENERATE_RUN_TIME_STATS == 1)
 252:../FreeRTOS_EC/Source/CTask.h **** 	vTaskGetRunTimeStats((signed portCHAR*)pcWriteBuffer);
 253:../FreeRTOS_EC/Source/CTask.h **** #endif
 254:../FreeRTOS_EC/Source/CTask.h **** }
 255:../FreeRTOS_EC/Source/CTask.h **** 
 256:../FreeRTOS_EC/Source/CTask.h **** inline
 257:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::PriorityGet() const {
 258:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 259:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskPriorityGet(m_handleTask);
 260:../FreeRTOS_EC/Source/CTask.h **** #else
 261:../FreeRTOS_EC/Source/CTask.h **** 	return -1;
 262:../FreeRTOS_EC/Source/CTask.h **** #endif
 263:../FreeRTOS_EC/Source/CTask.h **** }
 264:../FreeRTOS_EC/Source/CTask.h **** 
 265:../FreeRTOS_EC/Source/CTask.h **** inline
 266:../FreeRTOS_EC/Source/CTask.h **** void CTask::PrioritySet(unsigned portBASE_TYPE uxNewPriority) {
 267:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 268:../FreeRTOS_EC/Source/CTask.h **** 	vTaskPrioritySet(m_handleTask, uxNewPriority);
 269:../FreeRTOS_EC/Source/CTask.h **** #endif
 270:../FreeRTOS_EC/Source/CTask.h **** }
 271:../FreeRTOS_EC/Source/CTask.h **** 
 272:../FreeRTOS_EC/Source/CTask.h **** inline
 273:../FreeRTOS_EC/Source/CTask.h **** void CTask::Suspend() {
 274:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 275:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSuspend(m_handleTask);
 276:../FreeRTOS_EC/Source/CTask.h **** #endif
 277:../FreeRTOS_EC/Source/CTask.h **** }
 278:../FreeRTOS_EC/Source/CTask.h **** 
 279:../FreeRTOS_EC/Source/CTask.h **** inline
 280:../FreeRTOS_EC/Source/CTask.h **** void CTask::Resume() {
 281:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 282:../FreeRTOS_EC/Source/CTask.h **** 	vTaskResume(m_handleTask);
 283:../FreeRTOS_EC/Source/CTask.h **** #endif
 284:../FreeRTOS_EC/Source/CTask.h **** }
 285:../FreeRTOS_EC/Source/CTask.h **** 
 286:../FreeRTOS_EC/Source/CTask.h **** inline
 287:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::ResumeFromISR() {
 288:../FreeRTOS_EC/Source/CTask.h **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
 289:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskResumeFromISR(m_handleTask);
 290:../FreeRTOS_EC/Source/CTask.h **** #else
 291:../FreeRTOS_EC/Source/CTask.h **** 	return pdFALSE;
 292:../FreeRTOS_EC/Source/CTask.h **** #endif
 293:../FreeRTOS_EC/Source/CTask.h **** }
 294:../FreeRTOS_EC/Source/CTask.h **** 
 295:../FreeRTOS_EC/Source/CTask.h **** inline
 296:../FreeRTOS_EC/Source/CTask.h **** void CTask::SetApplicationTag(pdTASK_HOOK_CODE pxTagValue) {
 297:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 298:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSetApplicationTaskTag(m_handleTask, pxTagValue);
 299:../FreeRTOS_EC/Source/CTask.h **** #endif
 300:../FreeRTOS_EC/Source/CTask.h **** }
 301:../FreeRTOS_EC/Source/CTask.h **** 
 302:../FreeRTOS_EC/Source/CTask.h **** inline
 303:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::CallApplicationTaskHook(void *pvParameter) {
 304:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 305:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskCallApplicationTaskHook(m_handleTask, pvParameter);
 306:../FreeRTOS_EC/Source/CTask.h **** #else
 307:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 308:../FreeRTOS_EC/Source/CTask.h **** #endif
 309:../FreeRTOS_EC/Source/CTask.h **** }
 310:../FreeRTOS_EC/Source/CTask.h **** 
 311:../FreeRTOS_EC/Source/CTask.h **** inline
 312:../FreeRTOS_EC/Source/CTask.h **** void CTask::AllocateMPURegions(const xMemoryRegion * const xRegions) {
 313:../FreeRTOS_EC/Source/CTask.h **** #if ( portUSING_MPU_WRAPPERS == 1 )
 314:../FreeRTOS_EC/Source/CTask.h **** 	vTaskAllocateMPURegions(m_handleTask, xRegions);
 315:../FreeRTOS_EC/Source/CTask.h **** #endif
 316:../FreeRTOS_EC/Source/CTask.h **** }
 317:../FreeRTOS_EC/Source/CTask.h **** 
 318:../FreeRTOS_EC/Source/CTask.h **** inline
 319:../FreeRTOS_EC/Source/CTask.h **** bool CTask::IsValid() const{
  27              		.loc 1 319 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 320:../FreeRTOS_EC/Source/CTask.h **** 	return m_handleTask != NULL;
  43              		.loc 1 320 0
  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 5B68     		ldr	r3, [r3, #4]
  46 000c 002B     		cmp	r3, #0
  47 000e 0CBF     		ite	eq
  48 0010 0023     		moveq	r3, #0
  49 0012 0123     		movne	r3, #1
  50 0014 DBB2     		uxtb	r3, r3
 321:../FreeRTOS_EC/Source/CTask.h **** }
  51              		.loc 1 321 0
  52 0016 1846     		mov	r0, r3
  53 0018 07F10C07 		add	r7, r7, #12
  54 001c BD46     		mov	sp, r7
  55 001e 80BC     		pop	{r7}
  56 0020 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE132:
  60 0022 00BF     		.section	.text._ZN5CTask6DetachEv,"axG",%progbits,_ZN5CTask6DetachEv,comdat
  61              		.align	2
  62              		.weak	_ZN5CTask6DetachEv
  63              		.thumb
  64              		.thumb_func
  66              	_ZN5CTask6DetachEv:
  67              	.LFB133:
 322:../FreeRTOS_EC/Source/CTask.h **** 
 323:../FreeRTOS_EC/Source/CTask.h **** inline
 324:../FreeRTOS_EC/Source/CTask.h **** xGenericHandle CTask::Detach() {
  68              		.loc 1 324 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 16
  71              		@ frame_needed = 1, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73 0000 80B4     		push	{r7}
  74              	.LCFI3:
  75              		.cfi_def_cfa_offset 4
  76              		.cfi_offset 7, -4
  77 0002 85B0     		sub	sp, sp, #20
  78              	.LCFI4:
  79              		.cfi_def_cfa_offset 24
  80 0004 00AF     		add	r7, sp, #0
  81              	.LCFI5:
  82              		.cfi_def_cfa_register 7
  83 0006 7860     		str	r0, [r7, #4]
  84              	.LBB2:
 325:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle res = m_handleTask;
  85              		.loc 1 325 0
  86 0008 7B68     		ldr	r3, [r7, #4]
  87 000a 5B68     		ldr	r3, [r3, #4]
  88 000c FB60     		str	r3, [r7, #12]
 326:../FreeRTOS_EC/Source/CTask.h **** 	m_handleTask = NULL;
  89              		.loc 1 326 0
  90 000e 7B68     		ldr	r3, [r7, #4]
  91 0010 4FF00002 		mov	r2, #0
  92 0014 5A60     		str	r2, [r3, #4]
 327:../FreeRTOS_EC/Source/CTask.h **** 	return res;
  93              		.loc 1 327 0
  94 0016 FB68     		ldr	r3, [r7, #12]
  95              	.LBE2:
 328:../FreeRTOS_EC/Source/CTask.h **** }
  96              		.loc 1 328 0
  97 0018 1846     		mov	r0, r3
  98 001a 07F11407 		add	r7, r7, #20
  99 001e BD46     		mov	sp, r7
 100 0020 80BC     		pop	{r7}
 101 0022 7047     		bx	lr
 102              		.cfi_endproc
 103              	.LFE133:
 105              		.section	.text._ZN12IFreeRTOSObjC2Ev,"axG",%progbits,_ZN12IFreeRTOSObjC5Ev,comdat
 106              		.align	2
 107              		.weak	_ZN12IFreeRTOSObjC2Ev
 108              		.thumb
 109              		.thumb_func
 111              	_ZN12IFreeRTOSObjC2Ev:
 112              	.LFB136:
 113              		.file 2 "../FreeRTOS_EC/Source/IFreeRTOSProtocol.h"
   1:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** /**
   2:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @file IFreeRTOSProtocol.h
   3:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @class IFreeRTOSObj
   4:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *
   6:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * This interface provide the basic behavior for all class in the FreeRTOS Wrapper layer. All objec
   7:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * must be able to manage the owned native FreeRTOS handle. When the handle is created  it is attac
   8:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * From this moment the object owns the handle. When the object is disposed the handle is deleted a
   9:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * are freed. It is possible to keep the underling native FreeRTOS handle alive by detaching it bef
  10:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * object is disposed.
  11:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *
  12:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *
  13:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @date Aug 5, 2010
  14:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @author Stefano Oliveri (STF12.net)
  15:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *         E-Mail: software@stf12.net
  16:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  */
  17:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  18:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  19:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** #ifndef IFREERTOSPROTOCOL_H_
  20:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** #define IFREERTOSPROTOCOL_H_
  21:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  22:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** typedef void *xGenericHandle;
  23:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  24:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** class IFreeRTOSObj {
 114              		.loc 2 24 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 8
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119 0000 80B4     		push	{r7}
 120              	.LCFI6:
 121              		.cfi_def_cfa_offset 4
 122              		.cfi_offset 7, -4
 123 0002 83B0     		sub	sp, sp, #12
 124              	.LCFI7:
 125              		.cfi_def_cfa_offset 16
 126 0004 00AF     		add	r7, sp, #0
 127              	.LCFI8:
 128              		.cfi_def_cfa_register 7
 129 0006 7860     		str	r0, [r7, #4]
 130              	.LBB3:
 131              		.loc 2 24 0
 132 0008 7B68     		ldr	r3, [r7, #4]
 133 000a 044A     		ldr	r2, .L5
 134 000c 1A60     		str	r2, [r3, #0]
 135              	.LBE3:
 136 000e 7B68     		ldr	r3, [r7, #4]
 137 0010 1846     		mov	r0, r3
 138 0012 07F10C07 		add	r7, r7, #12
 139 0016 BD46     		mov	sp, r7
 140 0018 80BC     		pop	{r7}
 141 001a 7047     		bx	lr
 142              	.L6:
 143              		.align	2
 144              	.L5:
 145 001c 08000000 		.word	_ZTV12IFreeRTOSObj+8
 146              		.cfi_endproc
 147              	.LFE136:
 149              		.section	.text._ZN5CTaskC2Ev,"ax",%progbits
 150              		.align	2
 151              		.global	_ZN5CTaskC2Ev
 152              		.thumb
 153              		.thumb_func
 155              	_ZN5CTaskC2Ev:
 156              	.LFB138:
 157              		.file 3 "../FreeRTOS_EC/Source/CTask.cpp"
   1:../FreeRTOS_EC/Source/CTask.cpp **** /**
   2:../FreeRTOS_EC/Source/CTask.cpp ****  * CTask.cpp
   3:../FreeRTOS_EC/Source/CTask.cpp ****  *
   4:../FreeRTOS_EC/Source/CTask.cpp ****  *  Created on: Jul 5, 2010
   5:../FreeRTOS_EC/Source/CTask.cpp ****  *      Author: Stefano Oliveri (STF12.net)
   6:../FreeRTOS_EC/Source/CTask.cpp ****  *      E-Mail: software@stf12.net
   7:../FreeRTOS_EC/Source/CTask.cpp ****  */
   8:../FreeRTOS_EC/Source/CTask.cpp **** 
   9:../FreeRTOS_EC/Source/CTask.cpp **** #include "CTask.h"
  10:../FreeRTOS_EC/Source/CTask.cpp **** #include <assert.h>
  11:../FreeRTOS_EC/Source/CTask.cpp **** 
  12:../FreeRTOS_EC/Source/CTask.cpp **** 
  13:../FreeRTOS_EC/Source/CTask.cpp **** CTask::CTask() {
 158              		.loc 3 13 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 8
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              	.LCFI9:
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 14, -4
 166              		.cfi_offset 7, -8
 167 0002 82B0     		sub	sp, sp, #8
 168              	.LCFI10:
 169              		.cfi_def_cfa_offset 16
 170 0004 00AF     		add	r7, sp, #0
 171              	.LCFI11:
 172              		.cfi_def_cfa_register 7
 173 0006 7860     		str	r0, [r7, #4]
 174              	.LBB4:
 175              		.loc 3 13 0
 176 0008 7B68     		ldr	r3, [r7, #4]
 177 000a 1846     		mov	r0, r3
 178 000c FFF7FEFF 		bl	_ZN12IFreeRTOSObjC2Ev
 179 0010 7B68     		ldr	r3, [r7, #4]
 180 0012 064A     		ldr	r2, .L9
 181 0014 1A60     		str	r2, [r3, #0]
  14:../FreeRTOS_EC/Source/CTask.cpp **** 	m_handleTask = NULL;
 182              		.loc 3 14 0
 183 0016 7B68     		ldr	r3, [r7, #4]
 184 0018 4FF00002 		mov	r2, #0
 185 001c 5A60     		str	r2, [r3, #4]
 186              	.LBE4:
  15:../FreeRTOS_EC/Source/CTask.cpp **** }
 187              		.loc 3 15 0
 188 001e 7B68     		ldr	r3, [r7, #4]
 189 0020 1846     		mov	r0, r3
 190 0022 07F10807 		add	r7, r7, #8
 191 0026 BD46     		mov	sp, r7
 192 0028 80BD     		pop	{r7, pc}
 193              	.L10:
 194 002a 00BF     		.align	2
 195              	.L9:
 196 002c 08000000 		.word	_ZTV5CTask+8
 197              		.cfi_endproc
 198              	.LFE138:
 200              		.section	.text._ZN5CTaskC2EPv,"ax",%progbits
 201              		.align	2
 202              		.global	_ZN5CTaskC2EPv
 203              		.thumb
 204              		.thumb_func
 206              	_ZN5CTaskC2EPv:
 207              	.LFB141:
  16:../FreeRTOS_EC/Source/CTask.cpp **** 
  17:../FreeRTOS_EC/Source/CTask.cpp **** CTask::CTask(xTaskHandle handleTask) {
 208              		.loc 3 17 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              	.LCFI12:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 14, -4
 216              		.cfi_offset 7, -8
 217 0002 82B0     		sub	sp, sp, #8
 218              	.LCFI13:
 219              		.cfi_def_cfa_offset 16
 220 0004 00AF     		add	r7, sp, #0
 221              	.LCFI14:
 222              		.cfi_def_cfa_register 7
 223 0006 7860     		str	r0, [r7, #4]
 224 0008 3960     		str	r1, [r7, #0]
 225              	.LBB5:
 226              		.loc 3 17 0
 227 000a 7B68     		ldr	r3, [r7, #4]
 228 000c 1846     		mov	r0, r3
 229 000e FFF7FEFF 		bl	_ZN12IFreeRTOSObjC2Ev
 230 0012 7B68     		ldr	r3, [r7, #4]
 231 0014 054A     		ldr	r2, .L13
 232 0016 1A60     		str	r2, [r3, #0]
  18:../FreeRTOS_EC/Source/CTask.cpp **** 	Attach(handleTask);
 233              		.loc 3 18 0
 234 0018 7868     		ldr	r0, [r7, #4]
 235 001a 3968     		ldr	r1, [r7, #0]
 236 001c FFF7FEFF 		bl	_ZN5CTask6AttachEPv
 237              	.LBE5:
  19:../FreeRTOS_EC/Source/CTask.cpp **** }
 238              		.loc 3 19 0
 239 0020 7B68     		ldr	r3, [r7, #4]
 240 0022 1846     		mov	r0, r3
 241 0024 07F10807 		add	r7, r7, #8
 242 0028 BD46     		mov	sp, r7
 243 002a 80BD     		pop	{r7, pc}
 244              	.L14:
 245              		.align	2
 246              	.L13:
 247 002c 08000000 		.word	_ZTV5CTask+8
 248              		.cfi_endproc
 249              	.LFE141:
 251              		.section	.text._ZN5CTaskD2Ev,"ax",%progbits
 252              		.align	2
 253              		.global	_ZN5CTaskD2Ev
 254              		.thumb
 255              		.thumb_func
 257              	_ZN5CTaskD2Ev:
 258              	.LFB144:
  20:../FreeRTOS_EC/Source/CTask.cpp **** 
  21:../FreeRTOS_EC/Source/CTask.cpp **** CTask::~CTask() {
 259              		.loc 3 21 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 8
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263 0000 80B5     		push	{r7, lr}
 264              	.LCFI15:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 14, -4
 267              		.cfi_offset 7, -8
 268 0002 82B0     		sub	sp, sp, #8
 269              	.LCFI16:
 270              		.cfi_def_cfa_offset 16
 271 0004 00AF     		add	r7, sp, #0
 272              	.LCFI17:
 273              		.cfi_def_cfa_register 7
 274 0006 7860     		str	r0, [r7, #4]
 275              	.LBB6:
 276              		.loc 3 21 0
 277 0008 7B68     		ldr	r3, [r7, #4]
 278 000a 0D4A     		ldr	r2, .L18
 279 000c 1A60     		str	r2, [r3, #0]
  22:../FreeRTOS_EC/Source/CTask.cpp **** 	if (IsValid())
 280              		.loc 3 22 0
 281 000e 7868     		ldr	r0, [r7, #4]
 282 0010 FFF7FEFF 		bl	_ZNK5CTask7IsValidEv
 283 0014 0346     		mov	r3, r0
 284 0016 002B     		cmp	r3, #0
 285 0018 02D0     		beq	.L16
  23:../FreeRTOS_EC/Source/CTask.cpp **** 		Delete();
 286              		.loc 3 23 0
 287 001a 7868     		ldr	r0, [r7, #4]
 288 001c FFF7FEFF 		bl	_ZN5CTask6DeleteEv
 289              	.L16:
 290              	.LBE6:
  24:../FreeRTOS_EC/Source/CTask.cpp **** }
 291              		.loc 3 24 0
 292 0020 4FF00003 		mov	r3, #0
 293 0024 03F00103 		and	r3, r3, #1
 294 0028 DBB2     		uxtb	r3, r3
 295 002a 002B     		cmp	r3, #0
 296 002c 02D0     		beq	.L17
 297              		.loc 3 24 0 is_stmt 0 discriminator 1
 298 002e 7868     		ldr	r0, [r7, #4]
 299 0030 FFF7FEFF 		bl	_ZdlPv
 300              	.L17:
 301              		.loc 3 24 0 discriminator 2
 302 0034 7B68     		ldr	r3, [r7, #4]
 303 0036 1846     		mov	r0, r3
 304 0038 07F10807 		add	r7, r7, #8
 305 003c BD46     		mov	sp, r7
 306 003e 80BD     		pop	{r7, pc}
 307              	.L19:
 308              		.align	2
 309              	.L18:
 310 0040 08000000 		.word	_ZTV5CTask+8
 311              		.cfi_endproc
 312              	.LFE144:
 314              		.section	.text._ZN5CTaskD0Ev,"ax",%progbits
 315              		.align	2
 316              		.global	_ZN5CTaskD0Ev
 317              		.thumb
 318              		.thumb_func
 320              	_ZN5CTaskD0Ev:
 321              	.LFB146:
  21:../FreeRTOS_EC/Source/CTask.cpp **** CTask::~CTask() {
 322              		.loc 3 21 0 is_stmt 1
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 8
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326 0000 80B5     		push	{r7, lr}
 327              	.LCFI18:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 14, -4
 330              		.cfi_offset 7, -8
 331 0002 82B0     		sub	sp, sp, #8
 332              	.LCFI19:
 333              		.cfi_def_cfa_offset 16
 334 0004 00AF     		add	r7, sp, #0
 335              	.LCFI20:
 336              		.cfi_def_cfa_register 7
 337 0006 7860     		str	r0, [r7, #4]
 338              		.loc 3 24 0
 339 0008 7868     		ldr	r0, [r7, #4]
 340 000a FFF7FEFF 		bl	_ZN5CTaskD1Ev
 341 000e 7868     		ldr	r0, [r7, #4]
 342 0010 FFF7FEFF 		bl	_ZdlPv
 343 0014 7B68     		ldr	r3, [r7, #4]
 344 0016 1846     		mov	r0, r3
 345 0018 07F10807 		add	r7, r7, #8
 346 001c BD46     		mov	sp, r7
 347 001e 80BD     		pop	{r7, pc}
 348              		.cfi_endproc
 349              	.LFE146:
 351              		.section	.rodata
 352              		.align	2
 353              	.LC0:
 354 0000 2E2E2F46 		.ascii	"../FreeRTOS_EC/Source/CTask.cpp\000"
 354      72656552 
 354      544F535F 
 354      45432F53 
 354      6F757263 
 355              		.align	2
 356              	.LC1:
 357 0020 68616E64 		.ascii	"handle != NULL\000"
 357      6C652021 
 357      3D204E55 
 357      4C4C00
 358 002f 00       		.section	.text._ZN5CTask6AttachEPv,"ax",%progbits
 359              		.align	2
 360              		.global	_ZN5CTask6AttachEPv
 361              		.thumb
 362              		.thumb_func
 364              	_ZN5CTask6AttachEPv:
 365              	.LFB147:
  25:../FreeRTOS_EC/Source/CTask.cpp **** 
  26:../FreeRTOS_EC/Source/CTask.cpp **** void CTask::Attach(xGenericHandle handle) {
 366              		.loc 3 26 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 8
 369              		@ frame_needed = 1, uses_anonymous_args = 0
 370 0000 80B5     		push	{r7, lr}
 371              	.LCFI21:
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 14, -4
 374              		.cfi_offset 7, -8
 375 0002 82B0     		sub	sp, sp, #8
 376              	.LCFI22:
 377              		.cfi_def_cfa_offset 16
 378 0004 00AF     		add	r7, sp, #0
 379              	.LCFI23:
 380              		.cfi_def_cfa_register 7
 381 0006 7860     		str	r0, [r7, #4]
 382 0008 3960     		str	r1, [r7, #0]
 383              	.LBB7:
  27:../FreeRTOS_EC/Source/CTask.cpp **** 	assert(handle != NULL);
 384              		.loc 3 27 0
 385 000a 3B68     		ldr	r3, [r7, #0]
 386 000c 002B     		cmp	r3, #0
 387 000e 0FD1     		bne	.L23
 388              		.loc 3 27 0 is_stmt 0 discriminator 1
 389 0010 40F20000 		movw	r0, #:lower16:.LC0
 390 0014 C0F20000 		movt	r0, #:upper16:.LC0
 391 0018 4FF01B01 		mov	r1, #27
 392 001c 40F20002 		movw	r2, #:lower16:_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__
 393 0020 C0F20002 		movt	r2, #:upper16:_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__
 394 0024 40F20003 		movw	r3, #:lower16:.LC1
 395 0028 C0F20003 		movt	r3, #:upper16:.LC1
 396 002c FFF7FEFF 		bl	__assert_func
 397              	.L23:
  28:../FreeRTOS_EC/Source/CTask.cpp **** 
  29:../FreeRTOS_EC/Source/CTask.cpp **** 	if (IsValid()) {
 398              		.loc 3 29 0 is_stmt 1
 399 0030 7B68     		ldr	r3, [r7, #4]
 400 0032 1B68     		ldr	r3, [r3, #0]
 401 0034 1B68     		ldr	r3, [r3, #0]
 402 0036 7868     		ldr	r0, [r7, #4]
 403 0038 9847     		blx	r3
 404 003a 0346     		mov	r3, r0
 405 003c 002B     		cmp	r3, #0
 406 003e 02D0     		beq	.L24
  30:../FreeRTOS_EC/Source/CTask.cpp **** 		Delete();
 407              		.loc 3 30 0
 408 0040 7868     		ldr	r0, [r7, #4]
 409 0042 FFF7FEFF 		bl	_ZN5CTask6DeleteEv
 410              	.L24:
  31:../FreeRTOS_EC/Source/CTask.cpp **** 	}
  32:../FreeRTOS_EC/Source/CTask.cpp **** 	m_handleTask = handle;
 411              		.loc 3 32 0
 412 0046 7B68     		ldr	r3, [r7, #4]
 413 0048 3A68     		ldr	r2, [r7, #0]
 414 004a 5A60     		str	r2, [r3, #4]
 415              	.LBE7:
  33:../FreeRTOS_EC/Source/CTask.cpp **** }
 416              		.loc 3 33 0
 417 004c 07F10807 		add	r7, r7, #8
 418 0050 BD46     		mov	sp, r7
 419 0052 80BD     		pop	{r7, pc}
 420              		.cfi_endproc
 421              	.LFE147:
 423              		.section	.text._ZN5CTask6CreateEPFvPvEPKctS0_m,"ax",%progbits
 424              		.align	2
 425              		.global	_ZN5CTask6CreateEPFvPvEPKctS0_m
 426              		.thumb
 427              		.thumb_func
 429              	_ZN5CTask6CreateEPFvPvEPKctS0_m:
 430              	.LFB148:
  34:../FreeRTOS_EC/Source/CTask.cpp **** 
  35:../FreeRTOS_EC/Source/CTask.cpp **** portBASE_TYPE CTask::Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHO
  36:../FreeRTOS_EC/Source/CTask.cpp **** {
 431              		.loc 3 36 0
 432              		.cfi_startproc
 433              		@ args = 8, pretend = 0, frame = 24
 434              		@ frame_needed = 1, uses_anonymous_args = 0
 435 0000 80B5     		push	{r7, lr}
 436              	.LCFI24:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 14, -4
 439              		.cfi_offset 7, -8
 440 0002 8AB0     		sub	sp, sp, #40
 441              	.LCFI25:
 442              		.cfi_def_cfa_offset 48
 443 0004 04AF     		add	r7, sp, #16
 444              	.LCFI26:
 445              		.cfi_def_cfa 7, 32
 446 0006 F860     		str	r0, [r7, #12]
 447 0008 B960     		str	r1, [r7, #8]
 448 000a 7A60     		str	r2, [r7, #4]
 449 000c 7B80     		strh	r3, [r7, #2]	@ movhi
 450              	.LBB8:
  37:../FreeRTOS_EC/Source/CTask.cpp **** 	portBASE_TYPE res;
  38:../FreeRTOS_EC/Source/CTask.cpp **** 	xTaskHandle handle;
  39:../FreeRTOS_EC/Source/CTask.cpp **** 	res = xTaskCreate(pvTaskCode, (const signed char*)pcName, usStackDepth, pvParameters, uxPriority, 
 451              		.loc 3 39 0
 452 000e 7B88     		ldrh	r3, [r7, #2]
 453 0010 7A6A     		ldr	r2, [r7, #36]
 454 0012 0092     		str	r2, [sp, #0]
 455 0014 07F11002 		add	r2, r7, #16
 456 0018 0192     		str	r2, [sp, #4]
 457 001a 4FF00002 		mov	r2, #0
 458 001e 0292     		str	r2, [sp, #8]
 459 0020 4FF00002 		mov	r2, #0
 460 0024 0392     		str	r2, [sp, #12]
 461 0026 B868     		ldr	r0, [r7, #8]
 462 0028 7968     		ldr	r1, [r7, #4]
 463 002a 1A46     		mov	r2, r3
 464 002c 3B6A     		ldr	r3, [r7, #32]
 465 002e FFF7FEFF 		bl	xTaskGenericCreate
 466 0032 0346     		mov	r3, r0
 467 0034 7B61     		str	r3, [r7, #20]
  40:../FreeRTOS_EC/Source/CTask.cpp **** 	if (res == pdTRUE)
 468              		.loc 3 40 0
 469 0036 7B69     		ldr	r3, [r7, #20]
 470 0038 012B     		cmp	r3, #1
 471 003a 08D1     		bne	.L26
  41:../FreeRTOS_EC/Source/CTask.cpp **** 		Attach(handle);
 472              		.loc 3 41 0
 473 003c FB68     		ldr	r3, [r7, #12]
 474 003e 1B68     		ldr	r3, [r3, #0]
 475 0040 03F10403 		add	r3, r3, #4
 476 0044 1B68     		ldr	r3, [r3, #0]
 477 0046 3A69     		ldr	r2, [r7, #16]
 478 0048 F868     		ldr	r0, [r7, #12]
 479 004a 1146     		mov	r1, r2
 480 004c 9847     		blx	r3
 481              	.L26:
  42:../FreeRTOS_EC/Source/CTask.cpp **** 
  43:../FreeRTOS_EC/Source/CTask.cpp **** 	return res;
 482              		.loc 3 43 0
 483 004e 7B69     		ldr	r3, [r7, #20]
 484              	.LBE8:
  44:../FreeRTOS_EC/Source/CTask.cpp **** }
 485              		.loc 3 44 0
 486 0050 1846     		mov	r0, r3
 487 0052 07F11807 		add	r7, r7, #24
 488 0056 BD46     		mov	sp, r7
 489 0058 80BD     		pop	{r7, pc}
 490              		.cfi_endproc
 491              	.LFE148:
 493 005a 00BF     		.section	.text._ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS,"ax",%progbits
 494              		.align	2
 495              		.global	_ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS
 496              		.thumb
 497              		.thumb_func
 499              	_ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS:
 500              	.LFB149:
  45:../FreeRTOS_EC/Source/CTask.cpp **** 
  46:../FreeRTOS_EC/Source/CTask.cpp **** portBASE_TYPE CTask::CreateRestricted(xTaskParameters *pxTaskDefinition)
  47:../FreeRTOS_EC/Source/CTask.cpp **** {
 501              		.loc 3 47 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 16
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 506 0000 80B4     		push	{r7}
 507              	.LCFI27:
 508              		.cfi_def_cfa_offset 4
 509              		.cfi_offset 7, -4
 510 0002 85B0     		sub	sp, sp, #20
 511              	.LCFI28:
 512              		.cfi_def_cfa_offset 24
 513 0004 00AF     		add	r7, sp, #0
 514              	.LCFI29:
 515              		.cfi_def_cfa_register 7
 516 0006 7860     		str	r0, [r7, #4]
 517 0008 3960     		str	r1, [r7, #0]
 518              	.LBB9:
  48:../FreeRTOS_EC/Source/CTask.cpp **** 	portBASE_TYPE res = pdFALSE;
 519              		.loc 3 48 0
 520 000a 4FF00003 		mov	r3, #0
 521 000e FB60     		str	r3, [r7, #12]
  49:../FreeRTOS_EC/Source/CTask.cpp **** #if( portUSING_MPU_WRAPPERS == 1 )
  50:../FreeRTOS_EC/Source/CTask.cpp **** 	xTaskHandle handle;
  51:../FreeRTOS_EC/Source/CTask.cpp **** 	res = xTaskCreateRestricted(pxTaskDefinition, &handle);
  52:../FreeRTOS_EC/Source/CTask.cpp **** 	if (res == pdTRUE)
  53:../FreeRTOS_EC/Source/CTask.cpp **** 		Attach(handle);
  54:../FreeRTOS_EC/Source/CTask.cpp **** #endif
  55:../FreeRTOS_EC/Source/CTask.cpp **** 
  56:../FreeRTOS_EC/Source/CTask.cpp **** 	return res;
 522              		.loc 3 56 0
 523 0010 FB68     		ldr	r3, [r7, #12]
 524              	.LBE9:
  57:../FreeRTOS_EC/Source/CTask.cpp **** }
 525              		.loc 3 57 0
 526 0012 1846     		mov	r0, r3
 527 0014 07F11407 		add	r7, r7, #20
 528 0018 BD46     		mov	sp, r7
 529 001a 80BC     		pop	{r7}
 530 001c 7047     		bx	lr
 531              		.cfi_endproc
 532              	.LFE149:
 534 001e 00BF     		.section	.text._ZN5CTask6DeleteEv,"ax",%progbits
 535              		.align	2
 536              		.global	_ZN5CTask6DeleteEv
 537              		.thumb
 538              		.thumb_func
 540              	_ZN5CTask6DeleteEv:
 541              	.LFB150:
  58:../FreeRTOS_EC/Source/CTask.cpp **** 
  59:../FreeRTOS_EC/Source/CTask.cpp **** 
  60:../FreeRTOS_EC/Source/CTask.cpp **** void CTask::Delete() {
 542              		.loc 3 60 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 8
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546 0000 80B5     		push	{r7, lr}
 547              	.LCFI30:
 548              		.cfi_def_cfa_offset 8
 549              		.cfi_offset 14, -4
 550              		.cfi_offset 7, -8
 551 0002 82B0     		sub	sp, sp, #8
 552              	.LCFI31:
 553              		.cfi_def_cfa_offset 16
 554 0004 00AF     		add	r7, sp, #0
 555              	.LCFI32:
 556              		.cfi_def_cfa_register 7
 557 0006 7860     		str	r0, [r7, #4]
  61:../FreeRTOS_EC/Source/CTask.cpp **** 	if (m_handleTask != NULL) {
 558              		.loc 3 61 0
 559 0008 7B68     		ldr	r3, [r7, #4]
 560 000a 5B68     		ldr	r3, [r3, #4]
 561 000c 002B     		cmp	r3, #0
 562 000e 08D0     		beq	.L28
  62:../FreeRTOS_EC/Source/CTask.cpp **** #if ( INCLUDE_vTaskDelete == 1 )
  63:../FreeRTOS_EC/Source/CTask.cpp **** 		vTaskDelete(m_handleTask);
 563              		.loc 3 63 0
 564 0010 7B68     		ldr	r3, [r7, #4]
 565 0012 5B68     		ldr	r3, [r3, #4]
 566 0014 1846     		mov	r0, r3
 567 0016 FFF7FEFF 		bl	vTaskDelete
  64:../FreeRTOS_EC/Source/CTask.cpp **** #else
  65:../FreeRTOS_EC/Source/CTask.cpp **** 		vTaskSuspend(m_handleTask);
  66:../FreeRTOS_EC/Source/CTask.cpp **** #endif
  67:../FreeRTOS_EC/Source/CTask.cpp **** 		m_handleTask = NULL;
 568              		.loc 3 67 0
 569 001a 7B68     		ldr	r3, [r7, #4]
 570 001c 4FF00002 		mov	r2, #0
 571 0020 5A60     		str	r2, [r3, #4]
 572              	.L28:
  68:../FreeRTOS_EC/Source/CTask.cpp **** 	}
  69:../FreeRTOS_EC/Source/CTask.cpp **** }
 573              		.loc 3 69 0
 574 0022 07F10807 		add	r7, r7, #8
 575 0026 BD46     		mov	sp, r7
 576 0028 80BD     		pop	{r7, pc}
 577              		.cfi_endproc
 578              	.LFE150:
 580              		.global	_ZTV5CTask
 581 002a 00BF     		.section	.rodata._ZTV5CTask,"a",%progbits
 582              		.align	3
 585              	_ZTV5CTask:
 586 0000 00000000 		.word	0
 587 0004 00000000 		.word	0
 588 0008 00000000 		.word	_ZNK5CTask7IsValidEv
 589 000c 00000000 		.word	_ZN5CTask6AttachEPv
 590 0010 00000000 		.word	_ZN5CTask6DetachEv
 591 0014 00000000 		.word	_ZN5CTaskD1Ev
 592 0018 00000000 		.word	_ZN5CTaskD0Ev
 593              		.weak	_ZTV12IFreeRTOSObj
 594 001c 00000000 		.section	.rodata._ZTV12IFreeRTOSObj,"aG",%progbits,_ZTV12IFreeRTOSObj,comdat
 595              		.align	3
 598              	_ZTV12IFreeRTOSObj:
 599 0000 00000000 		.word	0
 600 0004 00000000 		.word	0
 601 0008 00000000 		.word	__cxa_pure_virtual
 602 000c 00000000 		.word	__cxa_pure_virtual
 603 0010 00000000 		.word	__cxa_pure_virtual
 604 0014 00000000 		.section	.rodata._ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__,"a",%progbits
 605              		.align	2
 608              	_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__:
 609 0000 76697274 		.ascii	"virtual void CTask::Attach(xGenericHandle)\000"
 609      75616C20 
 609      766F6964 
 609      20435461 
 609      736B3A3A 
 610              		.weak	_ZN12IFreeRTOSObjC1Ev
 611              		.thumb_set _ZN12IFreeRTOSObjC1Ev,_ZN12IFreeRTOSObjC2Ev
 612              		.global	_ZN5CTaskC1Ev
 613              		.thumb_set _ZN5CTaskC1Ev,_ZN5CTaskC2Ev
 614              		.global	_ZN5CTaskC1EPv
 615              		.thumb_set _ZN5CTaskC1EPv,_ZN5CTaskC2EPv
 616              		.global	_ZN5CTaskD1Ev
 617              		.thumb_set _ZN5CTaskD1Ev,_ZN5CTaskD2Ev
 618 002b 00       		.text
 619              	.Letext0:
 620              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 621              		.file 5 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 622              		.file 6 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 623              		.file 7 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 624              		.file 8 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\S
 625              		.file 9 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 CTask.cpp
  C:\Temp\ccTSjQz3.s:19     .text._ZNK5CTask7IsValidEv:00000000 $t
  C:\Temp\ccTSjQz3.s:24     .text._ZNK5CTask7IsValidEv:00000000 _ZNK5CTask7IsValidEv
  C:\Temp\ccTSjQz3.s:61     .text._ZN5CTask6DetachEv:00000000 $t
  C:\Temp\ccTSjQz3.s:66     .text._ZN5CTask6DetachEv:00000000 _ZN5CTask6DetachEv
  C:\Temp\ccTSjQz3.s:106    .text._ZN12IFreeRTOSObjC2Ev:00000000 $t
  C:\Temp\ccTSjQz3.s:111    .text._ZN12IFreeRTOSObjC2Ev:00000000 _ZN12IFreeRTOSObjC2Ev
  C:\Temp\ccTSjQz3.s:145    .text._ZN12IFreeRTOSObjC2Ev:0000001c $d
  C:\Temp\ccTSjQz3.s:598    .rodata._ZTV12IFreeRTOSObj:00000000 _ZTV12IFreeRTOSObj
  C:\Temp\ccTSjQz3.s:150    .text._ZN5CTaskC2Ev:00000000 $t
  C:\Temp\ccTSjQz3.s:155    .text._ZN5CTaskC2Ev:00000000 _ZN5CTaskC2Ev
  C:\Temp\ccTSjQz3.s:196    .text._ZN5CTaskC2Ev:0000002c $d
  C:\Temp\ccTSjQz3.s:585    .rodata._ZTV5CTask:00000000 _ZTV5CTask
  C:\Temp\ccTSjQz3.s:201    .text._ZN5CTaskC2EPv:00000000 $t
  C:\Temp\ccTSjQz3.s:206    .text._ZN5CTaskC2EPv:00000000 _ZN5CTaskC2EPv
  C:\Temp\ccTSjQz3.s:364    .text._ZN5CTask6AttachEPv:00000000 _ZN5CTask6AttachEPv
  C:\Temp\ccTSjQz3.s:247    .text._ZN5CTaskC2EPv:0000002c $d
  C:\Temp\ccTSjQz3.s:252    .text._ZN5CTaskD2Ev:00000000 $t
  C:\Temp\ccTSjQz3.s:257    .text._ZN5CTaskD2Ev:00000000 _ZN5CTaskD2Ev
  C:\Temp\ccTSjQz3.s:540    .text._ZN5CTask6DeleteEv:00000000 _ZN5CTask6DeleteEv
  C:\Temp\ccTSjQz3.s:310    .text._ZN5CTaskD2Ev:00000040 $d
  C:\Temp\ccTSjQz3.s:315    .text._ZN5CTaskD0Ev:00000000 $t
  C:\Temp\ccTSjQz3.s:320    .text._ZN5CTaskD0Ev:00000000 _ZN5CTaskD0Ev
  C:\Temp\ccTSjQz3.s:257    .text._ZN5CTaskD2Ev:00000000 _ZN5CTaskD1Ev
  C:\Temp\ccTSjQz3.s:352    .rodata:00000000 $d
  C:\Temp\ccTSjQz3.s:353    .rodata:00000000 .LC0
  C:\Temp\ccTSjQz3.s:356    .rodata:00000020 .LC1
  C:\Temp\ccTSjQz3.s:359    .text._ZN5CTask6AttachEPv:00000000 $t
  C:\Temp\ccTSjQz3.s:608    .rodata._ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__:00000000 _ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__
  C:\Temp\ccTSjQz3.s:424    .text._ZN5CTask6CreateEPFvPvEPKctS0_m:00000000 $t
  C:\Temp\ccTSjQz3.s:429    .text._ZN5CTask6CreateEPFvPvEPKctS0_m:00000000 _ZN5CTask6CreateEPFvPvEPKctS0_m
  C:\Temp\ccTSjQz3.s:494    .text._ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS:00000000 $t
  C:\Temp\ccTSjQz3.s:499    .text._ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS:00000000 _ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS
  C:\Temp\ccTSjQz3.s:535    .text._ZN5CTask6DeleteEv:00000000 $t
  C:\Temp\ccTSjQz3.s:582    .rodata._ZTV5CTask:00000000 $d
  C:\Temp\ccTSjQz3.s:595    .rodata._ZTV12IFreeRTOSObj:00000000 $d
  C:\Temp\ccTSjQz3.s:605    .rodata._ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__:00000000 $d
  C:\Temp\ccTSjQz3.s:111    .text._ZN12IFreeRTOSObjC2Ev:00000000 _ZN12IFreeRTOSObjC1Ev
  C:\Temp\ccTSjQz3.s:155    .text._ZN5CTaskC2Ev:00000000 _ZN5CTaskC1Ev
  C:\Temp\ccTSjQz3.s:206    .text._ZN5CTaskC2EPv:00000000 _ZN5CTaskC1EPv
                     .debug_frame:00000010 $d
                           .group:00000000 _ZN12IFreeRTOSObjC5Ev

UNDEFINED SYMBOLS
_ZdlPv
__assert_func
xTaskGenericCreate
vTaskDelete
__cxa_pure_virtual
