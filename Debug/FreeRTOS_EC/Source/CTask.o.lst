   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"CTask.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZNK5CTask7IsValidEv,"axG",%progbits,_ZNK5CTask7IsValidEv,comdat
  20              		.align	2
  21              		.weak	_ZNK5CTask7IsValidEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZNK5CTask7IsValidEv:
  26              	.LFB132:
  27              		.file 1 "../FreeRTOS_EC/Source/CTask.h"
   1:../FreeRTOS_EC/Source/CTask.h **** /**
   2:../FreeRTOS_EC/Source/CTask.h ****  * @file CTask.h
   3:../FreeRTOS_EC/Source/CTask.h ****  * @class CTask
   4:../FreeRTOS_EC/Source/CTask.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/CTask.h ****  *
   6:../FreeRTOS_EC/Source/CTask.h ****  * The CTask class wraps a native FreeRTOS task handle (xTaskHandle). To create a task instance
   7:../FreeRTOS_EC/Source/CTask.h ****  * an object of this class and then call its CTask::Create method like showed in the following samp
   8:../FreeRTOS_EC/Source/CTask.h ****  * \code
   9:../FreeRTOS_EC/Source/CTask.h ****  * CTask g_aTask // global task declaration.
  10:../FreeRTOS_EC/Source/CTask.h ****  *
  11:../FreeRTOS_EC/Source/CTask.h ****  * void main()
  12:../FreeRTOS_EC/Source/CTask.h ****  * {
  13:../FreeRTOS_EC/Source/CTask.h ****  * 	g_aTask.Create(task_control_func, "Led2", configMINIMAL_STACK_SIZE, mainFLASH_TASK_PRIORITY);
  14:../FreeRTOS_EC/Source/CTask.h ****  *
  15:../FreeRTOS_EC/Source/CTask.h ****  * 	CFreeRTOS::StartScheduler();
  16:../FreeRTOS_EC/Source/CTask.h ****  * }
  17:../FreeRTOS_EC/Source/CTask.h ****  * \endcode
  18:../FreeRTOS_EC/Source/CTask.h ****  *
  19:../FreeRTOS_EC/Source/CTask.h ****  * Usually the application subclass this class to create an application specific task object.
  20:../FreeRTOS_EC/Source/CTask.h ****  * See the CHelloWorld class for an example.
  21:../FreeRTOS_EC/Source/CTask.h ****  *
  22:../FreeRTOS_EC/Source/CTask.h ****  * \sa <a href="http://www.freertos.org/taskandcr.html">task documentation</a> in the FreeRTOS web 
  23:../FreeRTOS_EC/Source/CTask.h ****  *
  24:../FreeRTOS_EC/Source/CTask.h ****  * @date Jul 5, 2010
  25:../FreeRTOS_EC/Source/CTask.h ****  * @author Stefano Oliveri (STF12.net)
  26:../FreeRTOS_EC/Source/CTask.h ****  *         E-Mail: software@stf12.net
  27:../FreeRTOS_EC/Source/CTask.h ****  */
  28:../FreeRTOS_EC/Source/CTask.h **** 
  29:../FreeRTOS_EC/Source/CTask.h **** #ifndef CTASK_H_
  30:../FreeRTOS_EC/Source/CTask.h **** #define CTASK_H_
  31:../FreeRTOS_EC/Source/CTask.h **** 
  32:../FreeRTOS_EC/Source/CTask.h **** #include "FreeRTOS.h"
  33:../FreeRTOS_EC/Source/CTask.h **** #include "task.h"
  34:../FreeRTOS_EC/Source/CTask.h **** #include "IFreeRTOSProtocol.h"
  35:../FreeRTOS_EC/Source/CTask.h **** 
  36:../FreeRTOS_EC/Source/CTask.h **** class CTask: public IFreeRTOSObj {
  37:../FreeRTOS_EC/Source/CTask.h **** 
  38:../FreeRTOS_EC/Source/CTask.h **** 	/**
  39:../FreeRTOS_EC/Source/CTask.h **** 	 * Specifies the native FreeRTOS handle managed by an instance of this class.
  40:../FreeRTOS_EC/Source/CTask.h **** 	 */
  41:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle m_handleTask;
  42:../FreeRTOS_EC/Source/CTask.h **** 
  43:../FreeRTOS_EC/Source/CTask.h **** public:
  44:../FreeRTOS_EC/Source/CTask.h **** 	/**
  45:../FreeRTOS_EC/Source/CTask.h **** 	 * The default constructor. It initializes the object without attaching it to a native FreeRTOS ha
  46:../FreeRTOS_EC/Source/CTask.h **** 	 * Call the Create method to allocate a task handle and attach it to the object.
  47:../FreeRTOS_EC/Source/CTask.h **** 	 */
  48:../FreeRTOS_EC/Source/CTask.h **** 	CTask();
  49:../FreeRTOS_EC/Source/CTask.h **** 
  50:../FreeRTOS_EC/Source/CTask.h **** 	/**
  51:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a CTask instance and attach it to a valid handle.
  52:../FreeRTOS_EC/Source/CTask.h **** 	 *
  53:../FreeRTOS_EC/Source/CTask.h **** 	 * @param handleTask a valid task handle.
  54:../FreeRTOS_EC/Source/CTask.h **** 	 */
  55:../FreeRTOS_EC/Source/CTask.h **** 	CTask(xTaskHandle handleTask);
  56:../FreeRTOS_EC/Source/CTask.h **** 
  57:../FreeRTOS_EC/Source/CTask.h **** 	/**
  58:../FreeRTOS_EC/Source/CTask.h **** 	 * Delete the native FreeRTOS task.
  59:../FreeRTOS_EC/Source/CTask.h **** 	 */
  60:../FreeRTOS_EC/Source/CTask.h **** 	virtual ~CTask();
  61:../FreeRTOS_EC/Source/CTask.h **** 
  62:../FreeRTOS_EC/Source/CTask.h **** 	/**
  63:../FreeRTOS_EC/Source/CTask.h **** 	 * Retrieve the native FreeRTOS task handle attached to this object.
  64:../FreeRTOS_EC/Source/CTask.h **** 	 *
  65:../FreeRTOS_EC/Source/CTask.h **** 	 * @return the native FreeRTOS task handle attached to this object.
  66:../FreeRTOS_EC/Source/CTask.h **** 	 */
  67:../FreeRTOS_EC/Source/CTask.h **** 	inline operator xTaskHandle() const { return m_handleTask; }
  68:../FreeRTOS_EC/Source/CTask.h **** 
  69:../FreeRTOS_EC/Source/CTask.h **** 	// FreeRTOS API Wrappers
  70:../FreeRTOS_EC/Source/CTask.h **** 
  71:../FreeRTOS_EC/Source/CTask.h **** 	/**
  72:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a FreeRTOS task and attach its handle to the receiver object.
  73:../FreeRTOS_EC/Source/CTask.h **** 	 *
  74:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00125.html">xTaskCreate</a> FreeRTOS API function.
  75:../FreeRTOS_EC/Source/CTask.h **** 	 */
  76:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usS
  77:../FreeRTOS_EC/Source/CTask.h **** 
  78:../FreeRTOS_EC/Source/CTask.h **** 	/**
  79:../FreeRTOS_EC/Source/CTask.h **** 	 * Create a Memory Protection Unit (MPU) restricted task and attach its handle to the receiver obj
  80:../FreeRTOS_EC/Source/CTask.h **** 	 *
  81:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/xTaskCreateRestricted.html">xTaskCreateRestricted</a> Free
  82:../FreeRTOS_EC/Source/CTask.h **** 	 */
  83:../FreeRTOS_EC/Source/CTask.h **** 	portBASE_TYPE CreateRestricted(xTaskParameters *pxTaskDefinition);
  84:../FreeRTOS_EC/Source/CTask.h **** 
  85:../FreeRTOS_EC/Source/CTask.h **** 	/**
  86:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00126.html">vTaskDelete</a>  FreeRTOS API function.
  87:../FreeRTOS_EC/Source/CTask.h **** 	 */
  88:../FreeRTOS_EC/Source/CTask.h **** 	void Delete();
  89:../FreeRTOS_EC/Source/CTask.h **** 
  90:../FreeRTOS_EC/Source/CTask.h **** 	/**
  91:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/a00127.html">vTaskDelay</a>  FreeRTOS API function.
  92:../FreeRTOS_EC/Source/CTask.h **** 	 */
  93:../FreeRTOS_EC/Source/CTask.h **** 	inline static void Delay(portTickType xTicksToDelay);
  94:../FreeRTOS_EC/Source/CTask.h **** 
  95:../FreeRTOS_EC/Source/CTask.h **** 	/**
  96:../FreeRTOS_EC/Source/CTask.h **** 	 * \sa <a href="http://www.freertos.org/vtaskdelayuntil.html">vTaskDelayUntil</a>  FreeRTOS API fu
  97:../FreeRTOS_EC/Source/CTask.h **** 	 */
  98:../FreeRTOS_EC/Source/CTask.h ****     inline static void DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement);
  99:../FreeRTOS_EC/Source/CTask.h **** 
 100:../FreeRTOS_EC/Source/CTask.h ****     /**
 101:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskYIELD">taskYIELD</a>  FreeRTOS API func
 102:../FreeRTOS_EC/Source/CTask.h ****      */
 103:../FreeRTOS_EC/Source/CTask.h ****     inline static void Yeld() { taskYIELD(); }
 104:../FreeRTOS_EC/Source/CTask.h **** 
 105:../FreeRTOS_EC/Source/CTask.h ****     /**
 106:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a> 
 107:../FreeRTOS_EC/Source/CTask.h ****      */
 108:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnterCritical() { taskENTER_CRITICAL(); }
 109:../FreeRTOS_EC/Source/CTask.h **** 
 110:../FreeRTOS_EC/Source/CTask.h ****     /**
 111:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  F
 112:../FreeRTOS_EC/Source/CTask.h ****      */
 113:../FreeRTOS_EC/Source/CTask.h ****     inline static void ExitCritical() { taskEXIT_CRITICAL(); }
 114:../FreeRTOS_EC/Source/CTask.h **** 
 115:../FreeRTOS_EC/Source/CTask.h ****     /**
 116:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskDISABLE_INTERRUPTS">taskDISABLE_INTERRU
 117:../FreeRTOS_EC/Source/CTask.h ****      */
 118:../FreeRTOS_EC/Source/CTask.h ****     inline static void DisableInterrupt() { taskDISABLE_INTERRUPTS(); }
 119:../FreeRTOS_EC/Source/CTask.h **** 
 120:../FreeRTOS_EC/Source/CTask.h ****     /**
 121:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00020.html#taskENABLE_INTERRUPTS">taskENABLE_INTERRUPT
 122:../FreeRTOS_EC/Source/CTask.h ****      */
 123:../FreeRTOS_EC/Source/CTask.h ****     inline static void EnableInterrupt() { taskENABLE_INTERRUPTS(); }
 124:../FreeRTOS_EC/Source/CTask.h **** 
 125:../FreeRTOS_EC/Source/CTask.h ****     /**
 126:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetCurrentTaskHandle">xTaskGetCurrentT
 127:../FreeRTOS_EC/Source/CTask.h ****      */
 128:../FreeRTOS_EC/Source/CTask.h ****     inline static xTaskHandle GetCurrentTaskHandle();
 129:../FreeRTOS_EC/Source/CTask.h **** 
 130:../FreeRTOS_EC/Source/CTask.h ****     /**
 131:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetTickCount">xTaskGetTickCount</a>  F
 132:../FreeRTOS_EC/Source/CTask.h ****      */
 133:../FreeRTOS_EC/Source/CTask.h ****     inline static portTickType GetTickCount();
 134:../FreeRTOS_EC/Source/CTask.h **** 
 135:../FreeRTOS_EC/Source/CTask.h ****     /**
 136:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#xTaskGetSchedulerState">xTaskGetSchedulerSt
 137:../FreeRTOS_EC/Source/CTask.h ****      */
 138:../FreeRTOS_EC/Source/CTask.h ****     inline static portBASE_TYPE GetSchedulerState();
 139:../FreeRTOS_EC/Source/CTask.h **** 
 140:../FreeRTOS_EC/Source/CTask.h ****     /**
 141:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#usTaskGetNumberOfTasks">uxTaskGetNumberOfTa
 142:../FreeRTOS_EC/Source/CTask.h ****      */
 143:../FreeRTOS_EC/Source/CTask.h ****     inline static unsigned portBASE_TYPE GetNumberOfTasks();
 144:../FreeRTOS_EC/Source/CTask.h **** 
 145:../FreeRTOS_EC/Source/CTask.h ****     /**
 146:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskList">vTaskList</a>  FreeRTOS API func
 147:../FreeRTOS_EC/Source/CTask.h ****      */
 148:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetTaskList(portCHAR *pcWriteBuffer);
 149:../FreeRTOS_EC/Source/CTask.h **** 
 150:../FreeRTOS_EC/Source/CTask.h ****     /**
 151:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00021.html#vTaskGetRunTimeStats">vTaskGetRunTimeStats<
 152:../FreeRTOS_EC/Source/CTask.h ****      */
 153:../FreeRTOS_EC/Source/CTask.h ****     inline static void GetRunTimeStats(portCHAR *pcWriteBuffer);
 154:../FreeRTOS_EC/Source/CTask.h **** 
 155:../FreeRTOS_EC/Source/CTask.h ****     /**
 156:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00128.html">uxTaskPriorityGet</a>  FreeRTOS API functi
 157:../FreeRTOS_EC/Source/CTask.h ****      */
 158:../FreeRTOS_EC/Source/CTask.h ****     inline unsigned portBASE_TYPE PriorityGet() const;
 159:../FreeRTOS_EC/Source/CTask.h **** 
 160:../FreeRTOS_EC/Source/CTask.h ****     /**
 161:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00129.html">vTaskPrioritySet</a>  FreeRTOS API functio
 162:../FreeRTOS_EC/Source/CTask.h ****      */
 163:../FreeRTOS_EC/Source/CTask.h ****     inline void PrioritySet(unsigned portBASE_TYPE uxNewPriority);
 164:../FreeRTOS_EC/Source/CTask.h **** 
 165:../FreeRTOS_EC/Source/CTask.h ****     /**
 166:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00130.html">vTaskSuspend</a>  FreeRTOS API function.
 167:../FreeRTOS_EC/Source/CTask.h ****      */
 168:../FreeRTOS_EC/Source/CTask.h ****     inline void Suspend();
 169:../FreeRTOS_EC/Source/CTask.h **** 
 170:../FreeRTOS_EC/Source/CTask.h ****     /**
 171:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/a00131.html">vTaskResume</a>  FreeRTOS API function.
 172:../FreeRTOS_EC/Source/CTask.h ****      */
 173:../FreeRTOS_EC/Source/CTask.h ****     inline void Resume();
 174:../FreeRTOS_EC/Source/CTask.h **** 
 175:../FreeRTOS_EC/Source/CTask.h ****     /**
 176:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/taskresumefromisr.html">xTaskResumeFromISR</a>  FreeRTO
 177:../FreeRTOS_EC/Source/CTask.h ****      */
 178:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE ResumeFromISR();
 179:../FreeRTOS_EC/Source/CTask.h **** 
 180:../FreeRTOS_EC/Source/CTask.h ****     /**
 181:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskSetApplicationTag.html">vTaskSetApplicationTaskTag
 182:../FreeRTOS_EC/Source/CTask.h ****      */
 183:../FreeRTOS_EC/Source/CTask.h ****     inline void SetApplicationTag(pdTASK_HOOK_CODE pxTagValue);
 184:../FreeRTOS_EC/Source/CTask.h **** 
 185:../FreeRTOS_EC/Source/CTask.h ****     /**
 186:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/xTaskCallApplicationTaskHook.html">xTaskCallApplication
 187:../FreeRTOS_EC/Source/CTask.h ****      */
 188:../FreeRTOS_EC/Source/CTask.h ****     inline portBASE_TYPE CallApplicationTaskHook(void *pvParameter);
 189:../FreeRTOS_EC/Source/CTask.h **** 
 190:../FreeRTOS_EC/Source/CTask.h ****     /**
 191:../FreeRTOS_EC/Source/CTask.h ****      * \sa <a href="http://www.freertos.org/vTaskAllocateMPURegions.html">vTaskAllocateMPURegions</
 192:../FreeRTOS_EC/Source/CTask.h ****      */
 193:../FreeRTOS_EC/Source/CTask.h ****     inline void AllocateMPURegions(const xMemoryRegion * const xRegions);
 194:../FreeRTOS_EC/Source/CTask.h **** 
 195:../FreeRTOS_EC/Source/CTask.h ****     // FreeRTOS class extension.
 196:../FreeRTOS_EC/Source/CTask.h **** 	inline bool IsValid() const;
 197:../FreeRTOS_EC/Source/CTask.h **** 	void Attach(xGenericHandle handle);
 198:../FreeRTOS_EC/Source/CTask.h **** 	inline xGenericHandle Detach();
 199:../FreeRTOS_EC/Source/CTask.h **** };
 200:../FreeRTOS_EC/Source/CTask.h **** 
 201:../FreeRTOS_EC/Source/CTask.h **** // inline method
 202:../FreeRTOS_EC/Source/CTask.h **** ////////////////
 203:../FreeRTOS_EC/Source/CTask.h **** 
 204:../FreeRTOS_EC/Source/CTask.h **** inline
 205:../FreeRTOS_EC/Source/CTask.h **** void CTask::Delay(portTickType xTicksToDelay) {
 206:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelay == 1 )
 207:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelay(xTicksToDelay);
 208:../FreeRTOS_EC/Source/CTask.h **** #endif
 209:../FreeRTOS_EC/Source/CTask.h **** }
 210:../FreeRTOS_EC/Source/CTask.h **** 
 211:../FreeRTOS_EC/Source/CTask.h **** inline
 212:../FreeRTOS_EC/Source/CTask.h **** void CTask::DelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement) {
 213:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 214:../FreeRTOS_EC/Source/CTask.h **** 	vTaskDelayUntil(pxPreviousWakeTime, xTimeIncrement);
 215:../FreeRTOS_EC/Source/CTask.h **** #endif
 216:../FreeRTOS_EC/Source/CTask.h **** }
 217:../FreeRTOS_EC/Source/CTask.h **** 
 218:../FreeRTOS_EC/Source/CTask.h **** inline
 219:../FreeRTOS_EC/Source/CTask.h **** xTaskHandle CTask::GetCurrentTaskHandle() {
 220:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetCurrentTaskHandle();
 221:../FreeRTOS_EC/Source/CTask.h **** }
 222:../FreeRTOS_EC/Source/CTask.h **** 
 223:../FreeRTOS_EC/Source/CTask.h **** inline
 224:../FreeRTOS_EC/Source/CTask.h **** portTickType CTask::GetTickCount() {
 225:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetTickCount();
 226:../FreeRTOS_EC/Source/CTask.h **** }
 227:../FreeRTOS_EC/Source/CTask.h **** 
 228:../FreeRTOS_EC/Source/CTask.h **** inline
 229:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::GetSchedulerState() {
 230:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_xTaskGetSchedulerState == 1 )
 231:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskGetSchedulerState();
 232:../FreeRTOS_EC/Source/CTask.h **** #else
 233:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 234:../FreeRTOS_EC/Source/CTask.h **** #endif
 235:../FreeRTOS_EC/Source/CTask.h **** }
 236:../FreeRTOS_EC/Source/CTask.h **** 
 237:../FreeRTOS_EC/Source/CTask.h **** inline
 238:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::GetNumberOfTasks() {
 239:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskGetNumberOfTasks();
 240:../FreeRTOS_EC/Source/CTask.h **** }
 241:../FreeRTOS_EC/Source/CTask.h **** 
 242:../FreeRTOS_EC/Source/CTask.h **** inline
 243:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetTaskList(portCHAR *pcWriteBuffer) {
 244:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_TRACE_FACILITY == 1 )
 245:../FreeRTOS_EC/Source/CTask.h **** 	vTaskList((signed portCHAR*)pcWriteBuffer);
 246:../FreeRTOS_EC/Source/CTask.h **** #endif
 247:../FreeRTOS_EC/Source/CTask.h **** }
 248:../FreeRTOS_EC/Source/CTask.h **** 
 249:../FreeRTOS_EC/Source/CTask.h **** inline
 250:../FreeRTOS_EC/Source/CTask.h **** void CTask::GetRunTimeStats(portCHAR *pcWriteBuffer) {
 251:../FreeRTOS_EC/Source/CTask.h **** #if (configGENERATE_RUN_TIME_STATS == 1)
 252:../FreeRTOS_EC/Source/CTask.h **** 	vTaskGetRunTimeStats((signed portCHAR*)pcWriteBuffer);
 253:../FreeRTOS_EC/Source/CTask.h **** #endif
 254:../FreeRTOS_EC/Source/CTask.h **** }
 255:../FreeRTOS_EC/Source/CTask.h **** 
 256:../FreeRTOS_EC/Source/CTask.h **** inline
 257:../FreeRTOS_EC/Source/CTask.h **** unsigned portBASE_TYPE CTask::PriorityGet() const {
 258:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 259:../FreeRTOS_EC/Source/CTask.h **** 	return uxTaskPriorityGet(m_handleTask);
 260:../FreeRTOS_EC/Source/CTask.h **** #else
 261:../FreeRTOS_EC/Source/CTask.h **** 	return -1;
 262:../FreeRTOS_EC/Source/CTask.h **** #endif
 263:../FreeRTOS_EC/Source/CTask.h **** }
 264:../FreeRTOS_EC/Source/CTask.h **** 
 265:../FreeRTOS_EC/Source/CTask.h **** inline
 266:../FreeRTOS_EC/Source/CTask.h **** void CTask::PrioritySet(unsigned portBASE_TYPE uxNewPriority) {
 267:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 268:../FreeRTOS_EC/Source/CTask.h **** 	vTaskPrioritySet(m_handleTask, uxNewPriority);
 269:../FreeRTOS_EC/Source/CTask.h **** #endif
 270:../FreeRTOS_EC/Source/CTask.h **** }
 271:../FreeRTOS_EC/Source/CTask.h **** 
 272:../FreeRTOS_EC/Source/CTask.h **** inline
 273:../FreeRTOS_EC/Source/CTask.h **** void CTask::Suspend() {
 274:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 275:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSuspend(m_handleTask);
 276:../FreeRTOS_EC/Source/CTask.h **** #endif
 277:../FreeRTOS_EC/Source/CTask.h **** }
 278:../FreeRTOS_EC/Source/CTask.h **** 
 279:../FreeRTOS_EC/Source/CTask.h **** inline
 280:../FreeRTOS_EC/Source/CTask.h **** void CTask::Resume() {
 281:../FreeRTOS_EC/Source/CTask.h **** #if ( INCLUDE_vTaskSuspend == 1 )
 282:../FreeRTOS_EC/Source/CTask.h **** 	vTaskResume(m_handleTask);
 283:../FreeRTOS_EC/Source/CTask.h **** #endif
 284:../FreeRTOS_EC/Source/CTask.h **** }
 285:../FreeRTOS_EC/Source/CTask.h **** 
 286:../FreeRTOS_EC/Source/CTask.h **** inline
 287:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::ResumeFromISR() {
 288:../FreeRTOS_EC/Source/CTask.h **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
 289:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskResumeFromISR(m_handleTask);
 290:../FreeRTOS_EC/Source/CTask.h **** #else
 291:../FreeRTOS_EC/Source/CTask.h **** 	return pdFALSE;
 292:../FreeRTOS_EC/Source/CTask.h **** #endif
 293:../FreeRTOS_EC/Source/CTask.h **** }
 294:../FreeRTOS_EC/Source/CTask.h **** 
 295:../FreeRTOS_EC/Source/CTask.h **** inline
 296:../FreeRTOS_EC/Source/CTask.h **** void CTask::SetApplicationTag(pdTASK_HOOK_CODE pxTagValue) {
 297:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 298:../FreeRTOS_EC/Source/CTask.h **** 	vTaskSetApplicationTaskTag(m_handleTask, pxTagValue);
 299:../FreeRTOS_EC/Source/CTask.h **** #endif
 300:../FreeRTOS_EC/Source/CTask.h **** }
 301:../FreeRTOS_EC/Source/CTask.h **** 
 302:../FreeRTOS_EC/Source/CTask.h **** inline
 303:../FreeRTOS_EC/Source/CTask.h **** portBASE_TYPE CTask::CallApplicationTaskHook(void *pvParameter) {
 304:../FreeRTOS_EC/Source/CTask.h **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 305:../FreeRTOS_EC/Source/CTask.h **** 	return xTaskCallApplicationTaskHook(m_handleTask, pvParameter);
 306:../FreeRTOS_EC/Source/CTask.h **** #else
 307:../FreeRTOS_EC/Source/CTask.h **** 	return 0;
 308:../FreeRTOS_EC/Source/CTask.h **** #endif
 309:../FreeRTOS_EC/Source/CTask.h **** }
 310:../FreeRTOS_EC/Source/CTask.h **** 
 311:../FreeRTOS_EC/Source/CTask.h **** inline
 312:../FreeRTOS_EC/Source/CTask.h **** void CTask::AllocateMPURegions(const xMemoryRegion * const xRegions) {
 313:../FreeRTOS_EC/Source/CTask.h **** #if ( portUSING_MPU_WRAPPERS == 1 )
 314:../FreeRTOS_EC/Source/CTask.h **** 	vTaskAllocateMPURegions(m_handleTask, xRegions);
 315:../FreeRTOS_EC/Source/CTask.h **** #endif
 316:../FreeRTOS_EC/Source/CTask.h **** }
 317:../FreeRTOS_EC/Source/CTask.h **** 
 318:../FreeRTOS_EC/Source/CTask.h **** inline
 319:../FreeRTOS_EC/Source/CTask.h **** bool CTask::IsValid() const{
  28              		.loc 1 319 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 320:../FreeRTOS_EC/Source/CTask.h **** 	return m_handleTask != NULL;
  44              		.loc 1 320 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 5B68     		ldr	r3, [r3, #4]
  47 000c 002B     		cmp	r3, #0
  48 000e 0CBF     		ite	eq
  49 0010 0023     		moveq	r3, #0
  50 0012 0123     		movne	r3, #1
  51 0014 DBB2     		uxtb	r3, r3
 321:../FreeRTOS_EC/Source/CTask.h **** }
  52              		.loc 1 321 0
  53 0016 1846     		mov	r0, r3
  54 0018 07F10C07 		add	r7, r7, #12
  55 001c BD46     		mov	sp, r7
  56 001e 80BC     		pop	{r7}
  57 0020 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE132:
  61 0022 00BF     		.section	.text._ZN5CTask6DetachEv,"axG",%progbits,_ZN5CTask6DetachEv,comdat
  62              		.align	2
  63              		.weak	_ZN5CTask6DetachEv
  64              		.thumb
  65              		.thumb_func
  67              	_ZN5CTask6DetachEv:
  68              	.LFB133:
 322:../FreeRTOS_EC/Source/CTask.h **** 
 323:../FreeRTOS_EC/Source/CTask.h **** inline
 324:../FreeRTOS_EC/Source/CTask.h **** xGenericHandle CTask::Detach() {
  69              		.loc 1 324 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 16
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74 0000 80B4     		push	{r7}
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 7, -4
  78 0002 85B0     		sub	sp, sp, #20
  79              	.LCFI4:
  80              		.cfi_def_cfa_offset 24
  81 0004 00AF     		add	r7, sp, #0
  82              	.LCFI5:
  83              		.cfi_def_cfa_register 7
  84 0006 7860     		str	r0, [r7, #4]
  85              	.LBB2:
 325:../FreeRTOS_EC/Source/CTask.h **** 	xTaskHandle res = m_handleTask;
  86              		.loc 1 325 0
  87 0008 7B68     		ldr	r3, [r7, #4]
  88 000a 5B68     		ldr	r3, [r3, #4]
  89 000c FB60     		str	r3, [r7, #12]
 326:../FreeRTOS_EC/Source/CTask.h **** 	m_handleTask = NULL;
  90              		.loc 1 326 0
  91 000e 7B68     		ldr	r3, [r7, #4]
  92 0010 4FF00002 		mov	r2, #0
  93 0014 5A60     		str	r2, [r3, #4]
 327:../FreeRTOS_EC/Source/CTask.h **** 	return res;
  94              		.loc 1 327 0
  95 0016 FB68     		ldr	r3, [r7, #12]
  96              	.LBE2:
 328:../FreeRTOS_EC/Source/CTask.h **** }
  97              		.loc 1 328 0
  98 0018 1846     		mov	r0, r3
  99 001a 07F11407 		add	r7, r7, #20
 100 001e BD46     		mov	sp, r7
 101 0020 80BC     		pop	{r7}
 102 0022 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE133:
 106              		.section	.text._ZN12IFreeRTOSObjC2Ev,"axG",%progbits,_ZN12IFreeRTOSObjC5Ev,comdat
 107              		.align	2
 108              		.weak	_ZN12IFreeRTOSObjC2Ev
 109              		.thumb
 110              		.thumb_func
 112              	_ZN12IFreeRTOSObjC2Ev:
 113              	.LFB136:
 114              		.file 2 "../FreeRTOS_EC/Source/IFreeRTOSProtocol.h"
   1:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** /**
   2:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @file IFreeRTOSProtocol.h
   3:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @class IFreeRTOSObj
   4:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @ingroup FreeRTOS_Wrapper
   5:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *
   6:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * This interface provide the basic behavior for all class in the FreeRTOS Wrapper layer. All objec
   7:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * must be able to manage the owned native FreeRTOS handle. When the handle is created  it is attac
   8:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * From this moment the object owns the handle. When the object is disposed the handle is deleted a
   9:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * are freed. It is possible to keep the underling native FreeRTOS handle alive by detaching it bef
  10:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * object is disposed.
  11:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *
  12:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *
  13:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @date Aug 5, 2010
  14:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  * @author Stefano Oliveri (STF12.net)
  15:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  *         E-Mail: software@stf12.net
  16:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h ****  */
  17:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  18:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  19:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** #ifndef IFREERTOSPROTOCOL_H_
  20:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** #define IFREERTOSPROTOCOL_H_
  21:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  22:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** typedef void *xGenericHandle;
  23:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** 
  24:../FreeRTOS_EC/Source/IFreeRTOSProtocol.h **** class IFreeRTOSObj {
 115              		.loc 2 24 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0000 80B4     		push	{r7}
 121              	.LCFI6:
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 0002 83B0     		sub	sp, sp, #12
 125              	.LCFI7:
 126              		.cfi_def_cfa_offset 16
 127 0004 00AF     		add	r7, sp, #0
 128              	.LCFI8:
 129              		.cfi_def_cfa_register 7
 130 0006 7860     		str	r0, [r7, #4]
 131              	.LBB3:
 132              		.loc 2 24 0
 133 0008 7B68     		ldr	r3, [r7, #4]
 134 000a 044A     		ldr	r2, .L5
 135 000c 1A60     		str	r2, [r3, #0]
 136              	.LBE3:
 137 000e 7B68     		ldr	r3, [r7, #4]
 138 0010 1846     		mov	r0, r3
 139 0012 07F10C07 		add	r7, r7, #12
 140 0016 BD46     		mov	sp, r7
 141 0018 80BC     		pop	{r7}
 142 001a 7047     		bx	lr
 143              	.L6:
 144              		.align	2
 145              	.L5:
 146 001c 08000000 		.word	_ZTV12IFreeRTOSObj+8
 147              		.cfi_endproc
 148              	.LFE136:
 150              		.text
 151              		.align	2
 152              		.global	_ZN5CTaskC2Ev
 153              		.thumb
 154              		.thumb_func
 156              	_ZN5CTaskC2Ev:
 157              	.LFB138:
 158              		.file 3 "../FreeRTOS_EC/Source/CTask.cpp"
   1:../FreeRTOS_EC/Source/CTask.cpp **** /**
   2:../FreeRTOS_EC/Source/CTask.cpp ****  * CTask.cpp
   3:../FreeRTOS_EC/Source/CTask.cpp ****  *
   4:../FreeRTOS_EC/Source/CTask.cpp ****  *  Created on: Jul 5, 2010
   5:../FreeRTOS_EC/Source/CTask.cpp ****  *      Author: Stefano Oliveri (STF12.net)
   6:../FreeRTOS_EC/Source/CTask.cpp ****  *      E-Mail: software@stf12.net
   7:../FreeRTOS_EC/Source/CTask.cpp ****  */
   8:../FreeRTOS_EC/Source/CTask.cpp **** 
   9:../FreeRTOS_EC/Source/CTask.cpp **** #include "CTask.h"
  10:../FreeRTOS_EC/Source/CTask.cpp **** #include <assert.h>
  11:../FreeRTOS_EC/Source/CTask.cpp **** 
  12:../FreeRTOS_EC/Source/CTask.cpp **** 
  13:../FreeRTOS_EC/Source/CTask.cpp **** CTask::CTask() {
 159              		.loc 3 13 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              	.LCFI9:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 14, -4
 167              		.cfi_offset 7, -8
 168 0002 82B0     		sub	sp, sp, #8
 169              	.LCFI10:
 170              		.cfi_def_cfa_offset 16
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI11:
 173              		.cfi_def_cfa_register 7
 174 0006 7860     		str	r0, [r7, #4]
 175              	.LBB4:
 176              		.loc 3 13 0
 177 0008 7B68     		ldr	r3, [r7, #4]
 178 000a 1846     		mov	r0, r3
 179 000c FFF7FEFF 		bl	_ZN12IFreeRTOSObjC2Ev
 180 0010 7B68     		ldr	r3, [r7, #4]
 181 0012 064A     		ldr	r2, .L9
 182 0014 1A60     		str	r2, [r3, #0]
  14:../FreeRTOS_EC/Source/CTask.cpp **** 	m_handleTask = NULL;
 183              		.loc 3 14 0
 184 0016 7B68     		ldr	r3, [r7, #4]
 185 0018 4FF00002 		mov	r2, #0
 186 001c 5A60     		str	r2, [r3, #4]
 187              	.LBE4:
  15:../FreeRTOS_EC/Source/CTask.cpp **** }
 188              		.loc 3 15 0
 189 001e 7B68     		ldr	r3, [r7, #4]
 190 0020 1846     		mov	r0, r3
 191 0022 07F10807 		add	r7, r7, #8
 192 0026 BD46     		mov	sp, r7
 193 0028 80BD     		pop	{r7, pc}
 194              	.L10:
 195 002a 00BF     		.align	2
 196              	.L9:
 197 002c 08000000 		.word	_ZTV5CTask+8
 198              		.cfi_endproc
 199              	.LFE138:
 201              		.align	2
 202              		.global	_ZN5CTaskC2EPv
 203              		.thumb
 204              		.thumb_func
 206              	_ZN5CTaskC2EPv:
 207              	.LFB141:
  16:../FreeRTOS_EC/Source/CTask.cpp **** 
  17:../FreeRTOS_EC/Source/CTask.cpp **** CTask::CTask(xTaskHandle handleTask) {
 208              		.loc 3 17 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0030 80B5     		push	{r7, lr}
 213              	.LCFI12:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 14, -4
 216              		.cfi_offset 7, -8
 217 0032 82B0     		sub	sp, sp, #8
 218              	.LCFI13:
 219              		.cfi_def_cfa_offset 16
 220 0034 00AF     		add	r7, sp, #0
 221              	.LCFI14:
 222              		.cfi_def_cfa_register 7
 223 0036 7860     		str	r0, [r7, #4]
 224 0038 3960     		str	r1, [r7, #0]
 225              	.LBB5:
 226              		.loc 3 17 0
 227 003a 7B68     		ldr	r3, [r7, #4]
 228 003c 1846     		mov	r0, r3
 229 003e FFF7FEFF 		bl	_ZN12IFreeRTOSObjC2Ev
 230 0042 7B68     		ldr	r3, [r7, #4]
 231 0044 054A     		ldr	r2, .L13
 232 0046 1A60     		str	r2, [r3, #0]
  18:../FreeRTOS_EC/Source/CTask.cpp **** 	Attach(handleTask);
 233              		.loc 3 18 0
 234 0048 7868     		ldr	r0, [r7, #4]
 235 004a 3968     		ldr	r1, [r7, #0]
 236 004c FFF7FEFF 		bl	_ZN5CTask6AttachEPv
 237              	.LBE5:
  19:../FreeRTOS_EC/Source/CTask.cpp **** }
 238              		.loc 3 19 0
 239 0050 7B68     		ldr	r3, [r7, #4]
 240 0052 1846     		mov	r0, r3
 241 0054 07F10807 		add	r7, r7, #8
 242 0058 BD46     		mov	sp, r7
 243 005a 80BD     		pop	{r7, pc}
 244              	.L14:
 245              		.align	2
 246              	.L13:
 247 005c 08000000 		.word	_ZTV5CTask+8
 248              		.cfi_endproc
 249              	.LFE141:
 251              		.align	2
 252              		.global	_ZN5CTaskD2Ev
 253              		.thumb
 254              		.thumb_func
 256              	_ZN5CTaskD2Ev:
 257              	.LFB144:
  20:../FreeRTOS_EC/Source/CTask.cpp **** 
  21:../FreeRTOS_EC/Source/CTask.cpp **** CTask::~CTask() {
 258              		.loc 3 21 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 8
 261              		@ frame_needed = 1, uses_anonymous_args = 0
 262 0060 80B5     		push	{r7, lr}
 263              	.LCFI15:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 14, -4
 266              		.cfi_offset 7, -8
 267 0062 82B0     		sub	sp, sp, #8
 268              	.LCFI16:
 269              		.cfi_def_cfa_offset 16
 270 0064 00AF     		add	r7, sp, #0
 271              	.LCFI17:
 272              		.cfi_def_cfa_register 7
 273 0066 7860     		str	r0, [r7, #4]
 274              	.LBB6:
 275              		.loc 3 21 0
 276 0068 7B68     		ldr	r3, [r7, #4]
 277 006a 0D4A     		ldr	r2, .L18
 278 006c 1A60     		str	r2, [r3, #0]
  22:../FreeRTOS_EC/Source/CTask.cpp **** 	if (IsValid())
 279              		.loc 3 22 0
 280 006e 7868     		ldr	r0, [r7, #4]
 281 0070 FFF7FEFF 		bl	_ZNK5CTask7IsValidEv
 282 0074 0346     		mov	r3, r0
 283 0076 002B     		cmp	r3, #0
 284 0078 02D0     		beq	.L16
  23:../FreeRTOS_EC/Source/CTask.cpp **** 		Delete();
 285              		.loc 3 23 0
 286 007a 7868     		ldr	r0, [r7, #4]
 287 007c FFF7FEFF 		bl	_ZN5CTask6DeleteEv
 288              	.L16:
 289              	.LBE6:
  24:../FreeRTOS_EC/Source/CTask.cpp **** }
 290              		.loc 3 24 0
 291 0080 4FF00003 		mov	r3, #0
 292 0084 03F00103 		and	r3, r3, #1
 293 0088 DBB2     		uxtb	r3, r3
 294 008a 002B     		cmp	r3, #0
 295 008c 02D0     		beq	.L17
 296              		.loc 3 24 0 is_stmt 0 discriminator 1
 297 008e 7868     		ldr	r0, [r7, #4]
 298 0090 FFF7FEFF 		bl	_ZdlPv
 299              	.L17:
 300              		.loc 3 24 0 discriminator 2
 301 0094 7B68     		ldr	r3, [r7, #4]
 302 0096 1846     		mov	r0, r3
 303 0098 07F10807 		add	r7, r7, #8
 304 009c BD46     		mov	sp, r7
 305 009e 80BD     		pop	{r7, pc}
 306              	.L19:
 307              		.align	2
 308              	.L18:
 309 00a0 08000000 		.word	_ZTV5CTask+8
 310              		.cfi_endproc
 311              	.LFE144:
 313              		.align	2
 314              		.global	_ZN5CTaskD0Ev
 315              		.thumb
 316              		.thumb_func
 318              	_ZN5CTaskD0Ev:
 319              	.LFB146:
  21:../FreeRTOS_EC/Source/CTask.cpp **** CTask::~CTask() {
 320              		.loc 3 21 0 is_stmt 1
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 8
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324 00a4 80B5     		push	{r7, lr}
 325              	.LCFI18:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 14, -4
 328              		.cfi_offset 7, -8
 329 00a6 82B0     		sub	sp, sp, #8
 330              	.LCFI19:
 331              		.cfi_def_cfa_offset 16
 332 00a8 00AF     		add	r7, sp, #0
 333              	.LCFI20:
 334              		.cfi_def_cfa_register 7
 335 00aa 7860     		str	r0, [r7, #4]
 336              		.loc 3 24 0
 337 00ac 7868     		ldr	r0, [r7, #4]
 338 00ae FFF7FEFF 		bl	_ZN5CTaskD1Ev
 339 00b2 7868     		ldr	r0, [r7, #4]
 340 00b4 FFF7FEFF 		bl	_ZdlPv
 341 00b8 7B68     		ldr	r3, [r7, #4]
 342 00ba 1846     		mov	r0, r3
 343 00bc 07F10807 		add	r7, r7, #8
 344 00c0 BD46     		mov	sp, r7
 345 00c2 80BD     		pop	{r7, pc}
 346              		.cfi_endproc
 347              	.LFE146:
 349              		.section	.rodata
 350              		.align	2
 351              	.LC0:
 352 0000 2E2E2F46 		.ascii	"../FreeRTOS_EC/Source/CTask.cpp\000"
 352      72656552 
 352      544F535F 
 352      45432F53 
 352      6F757263 
 353              		.align	2
 354              	.LC1:
 355 0020 68616E64 		.ascii	"handle != NULL\000"
 355      6C652021 
 355      3D204E55 
 355      4C4C00
 356 002f 00       		.text
 357              		.align	2
 358              		.global	_ZN5CTask6AttachEPv
 359              		.thumb
 360              		.thumb_func
 362              	_ZN5CTask6AttachEPv:
 363              	.LFB147:
  25:../FreeRTOS_EC/Source/CTask.cpp **** 
  26:../FreeRTOS_EC/Source/CTask.cpp **** void CTask::Attach(xGenericHandle handle) {
 364              		.loc 3 26 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 8
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368 00c4 80B5     		push	{r7, lr}
 369              	.LCFI21:
 370              		.cfi_def_cfa_offset 8
 371              		.cfi_offset 14, -4
 372              		.cfi_offset 7, -8
 373 00c6 82B0     		sub	sp, sp, #8
 374              	.LCFI22:
 375              		.cfi_def_cfa_offset 16
 376 00c8 00AF     		add	r7, sp, #0
 377              	.LCFI23:
 378              		.cfi_def_cfa_register 7
 379 00ca 7860     		str	r0, [r7, #4]
 380 00cc 3960     		str	r1, [r7, #0]
 381              	.LBB7:
  27:../FreeRTOS_EC/Source/CTask.cpp **** 	assert(handle != NULL);
 382              		.loc 3 27 0
 383 00ce 3B68     		ldr	r3, [r7, #0]
 384 00d0 002B     		cmp	r3, #0
 385 00d2 0FD1     		bne	.L23
 386              		.loc 3 27 0 is_stmt 0 discriminator 1
 387 00d4 40F20000 		movw	r0, #:lower16:.LC0
 388 00d8 C0F20000 		movt	r0, #:upper16:.LC0
 389 00dc 4FF01B01 		mov	r1, #27
 390 00e0 40F20002 		movw	r2, #:lower16:_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__
 391 00e4 C0F20002 		movt	r2, #:upper16:_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__
 392 00e8 40F20003 		movw	r3, #:lower16:.LC1
 393 00ec C0F20003 		movt	r3, #:upper16:.LC1
 394 00f0 FFF7FEFF 		bl	__assert_func
 395              	.L23:
  28:../FreeRTOS_EC/Source/CTask.cpp **** 
  29:../FreeRTOS_EC/Source/CTask.cpp **** 	if (IsValid()) {
 396              		.loc 3 29 0 is_stmt 1
 397 00f4 7B68     		ldr	r3, [r7, #4]
 398 00f6 1B68     		ldr	r3, [r3, #0]
 399 00f8 1B68     		ldr	r3, [r3, #0]
 400 00fa 7868     		ldr	r0, [r7, #4]
 401 00fc 9847     		blx	r3
 402 00fe 0346     		mov	r3, r0
 403 0100 002B     		cmp	r3, #0
 404 0102 02D0     		beq	.L24
  30:../FreeRTOS_EC/Source/CTask.cpp **** 		Delete();
 405              		.loc 3 30 0
 406 0104 7868     		ldr	r0, [r7, #4]
 407 0106 FFF7FEFF 		bl	_ZN5CTask6DeleteEv
 408              	.L24:
  31:../FreeRTOS_EC/Source/CTask.cpp **** 	}
  32:../FreeRTOS_EC/Source/CTask.cpp **** 	m_handleTask = handle;
 409              		.loc 3 32 0
 410 010a 7B68     		ldr	r3, [r7, #4]
 411 010c 3A68     		ldr	r2, [r7, #0]
 412 010e 5A60     		str	r2, [r3, #4]
 413              	.LBE7:
  33:../FreeRTOS_EC/Source/CTask.cpp **** }
 414              		.loc 3 33 0
 415 0110 07F10807 		add	r7, r7, #8
 416 0114 BD46     		mov	sp, r7
 417 0116 80BD     		pop	{r7, pc}
 418              		.cfi_endproc
 419              	.LFE147:
 421              		.align	2
 422              		.global	_ZN5CTask6CreateEPFvPvEPKctS0_m
 423              		.thumb
 424              		.thumb_func
 426              	_ZN5CTask6CreateEPFvPvEPKctS0_m:
 427              	.LFB148:
  34:../FreeRTOS_EC/Source/CTask.cpp **** 
  35:../FreeRTOS_EC/Source/CTask.cpp **** portBASE_TYPE CTask::Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHO
  36:../FreeRTOS_EC/Source/CTask.cpp **** {
 428              		.loc 3 36 0
 429              		.cfi_startproc
 430              		@ args = 8, pretend = 0, frame = 24
 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432 0118 80B5     		push	{r7, lr}
 433              	.LCFI24:
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 14, -4
 436              		.cfi_offset 7, -8
 437 011a 8AB0     		sub	sp, sp, #40
 438              	.LCFI25:
 439              		.cfi_def_cfa_offset 48
 440 011c 04AF     		add	r7, sp, #16
 441              	.LCFI26:
 442              		.cfi_def_cfa 7, 32
 443 011e F860     		str	r0, [r7, #12]
 444 0120 B960     		str	r1, [r7, #8]
 445 0122 7A60     		str	r2, [r7, #4]
 446 0124 7B80     		strh	r3, [r7, #2]	@ movhi
 447              	.LBB8:
  37:../FreeRTOS_EC/Source/CTask.cpp **** 	portBASE_TYPE res;
  38:../FreeRTOS_EC/Source/CTask.cpp **** 	xTaskHandle handle;
  39:../FreeRTOS_EC/Source/CTask.cpp **** 	res = xTaskCreate(pvTaskCode, (const signed char*)pcName, usStackDepth, pvParameters, uxPriority, 
 448              		.loc 3 39 0
 449 0126 7B88     		ldrh	r3, [r7, #2]
 450 0128 7A6A     		ldr	r2, [r7, #36]
 451 012a 0092     		str	r2, [sp, #0]
 452 012c 07F11002 		add	r2, r7, #16
 453 0130 0192     		str	r2, [sp, #4]
 454 0132 4FF00002 		mov	r2, #0
 455 0136 0292     		str	r2, [sp, #8]
 456 0138 4FF00002 		mov	r2, #0
 457 013c 0392     		str	r2, [sp, #12]
 458 013e B868     		ldr	r0, [r7, #8]
 459 0140 7968     		ldr	r1, [r7, #4]
 460 0142 1A46     		mov	r2, r3
 461 0144 3B6A     		ldr	r3, [r7, #32]
 462 0146 FFF7FEFF 		bl	xTaskGenericCreate
 463 014a 0346     		mov	r3, r0
 464 014c 7B61     		str	r3, [r7, #20]
  40:../FreeRTOS_EC/Source/CTask.cpp **** 	if (res == pdTRUE)
 465              		.loc 3 40 0
 466 014e 7B69     		ldr	r3, [r7, #20]
 467 0150 012B     		cmp	r3, #1
 468 0152 08D1     		bne	.L26
  41:../FreeRTOS_EC/Source/CTask.cpp **** 		Attach(handle);
 469              		.loc 3 41 0
 470 0154 FB68     		ldr	r3, [r7, #12]
 471 0156 1B68     		ldr	r3, [r3, #0]
 472 0158 03F10403 		add	r3, r3, #4
 473 015c 1B68     		ldr	r3, [r3, #0]
 474 015e 3A69     		ldr	r2, [r7, #16]
 475 0160 F868     		ldr	r0, [r7, #12]
 476 0162 1146     		mov	r1, r2
 477 0164 9847     		blx	r3
 478              	.L26:
  42:../FreeRTOS_EC/Source/CTask.cpp **** 
  43:../FreeRTOS_EC/Source/CTask.cpp **** 	return res;
 479              		.loc 3 43 0
 480 0166 7B69     		ldr	r3, [r7, #20]
 481              	.LBE8:
  44:../FreeRTOS_EC/Source/CTask.cpp **** }
 482              		.loc 3 44 0
 483 0168 1846     		mov	r0, r3
 484 016a 07F11807 		add	r7, r7, #24
 485 016e BD46     		mov	sp, r7
 486 0170 80BD     		pop	{r7, pc}
 487              		.cfi_endproc
 488              	.LFE148:
 490 0172 00BF     		.align	2
 491              		.global	_ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS
 492              		.thumb
 493              		.thumb_func
 495              	_ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS:
 496              	.LFB149:
  45:../FreeRTOS_EC/Source/CTask.cpp **** 
  46:../FreeRTOS_EC/Source/CTask.cpp **** portBASE_TYPE CTask::CreateRestricted(xTaskParameters *pxTaskDefinition)
  47:../FreeRTOS_EC/Source/CTask.cpp **** {
 497              		.loc 3 47 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 16
 500              		@ frame_needed = 1, uses_anonymous_args = 0
 501              		@ link register save eliminated.
 502 0174 80B4     		push	{r7}
 503              	.LCFI27:
 504              		.cfi_def_cfa_offset 4
 505              		.cfi_offset 7, -4
 506 0176 85B0     		sub	sp, sp, #20
 507              	.LCFI28:
 508              		.cfi_def_cfa_offset 24
 509 0178 00AF     		add	r7, sp, #0
 510              	.LCFI29:
 511              		.cfi_def_cfa_register 7
 512 017a 7860     		str	r0, [r7, #4]
 513 017c 3960     		str	r1, [r7, #0]
 514              	.LBB9:
  48:../FreeRTOS_EC/Source/CTask.cpp **** 	portBASE_TYPE res = pdFALSE;
 515              		.loc 3 48 0
 516 017e 4FF00003 		mov	r3, #0
 517 0182 FB60     		str	r3, [r7, #12]
  49:../FreeRTOS_EC/Source/CTask.cpp **** #if( portUSING_MPU_WRAPPERS == 1 )
  50:../FreeRTOS_EC/Source/CTask.cpp **** 	xTaskHandle handle;
  51:../FreeRTOS_EC/Source/CTask.cpp **** 	res = xTaskCreateRestricted(pxTaskDefinition, &handle);
  52:../FreeRTOS_EC/Source/CTask.cpp **** 	if (res == pdTRUE)
  53:../FreeRTOS_EC/Source/CTask.cpp **** 		Attach(handle);
  54:../FreeRTOS_EC/Source/CTask.cpp **** #endif
  55:../FreeRTOS_EC/Source/CTask.cpp **** 
  56:../FreeRTOS_EC/Source/CTask.cpp **** 	return res;
 518              		.loc 3 56 0
 519 0184 FB68     		ldr	r3, [r7, #12]
 520              	.LBE9:
  57:../FreeRTOS_EC/Source/CTask.cpp **** }
 521              		.loc 3 57 0
 522 0186 1846     		mov	r0, r3
 523 0188 07F11407 		add	r7, r7, #20
 524 018c BD46     		mov	sp, r7
 525 018e 80BC     		pop	{r7}
 526 0190 7047     		bx	lr
 527              		.cfi_endproc
 528              	.LFE149:
 530 0192 00BF     		.align	2
 531              		.global	_ZN5CTask6DeleteEv
 532              		.thumb
 533              		.thumb_func
 535              	_ZN5CTask6DeleteEv:
 536              	.LFB150:
  58:../FreeRTOS_EC/Source/CTask.cpp **** 
  59:../FreeRTOS_EC/Source/CTask.cpp **** 
  60:../FreeRTOS_EC/Source/CTask.cpp **** void CTask::Delete() {
 537              		.loc 3 60 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 8
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541 0194 80B5     		push	{r7, lr}
 542              	.LCFI30:
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 14, -4
 545              		.cfi_offset 7, -8
 546 0196 82B0     		sub	sp, sp, #8
 547              	.LCFI31:
 548              		.cfi_def_cfa_offset 16
 549 0198 00AF     		add	r7, sp, #0
 550              	.LCFI32:
 551              		.cfi_def_cfa_register 7
 552 019a 7860     		str	r0, [r7, #4]
  61:../FreeRTOS_EC/Source/CTask.cpp **** 	if (m_handleTask != NULL) {
 553              		.loc 3 61 0
 554 019c 7B68     		ldr	r3, [r7, #4]
 555 019e 5B68     		ldr	r3, [r3, #4]
 556 01a0 002B     		cmp	r3, #0
 557 01a2 08D0     		beq	.L28
  62:../FreeRTOS_EC/Source/CTask.cpp **** #if ( INCLUDE_vTaskDelete == 1 )
  63:../FreeRTOS_EC/Source/CTask.cpp **** 		vTaskDelete(m_handleTask);
 558              		.loc 3 63 0
 559 01a4 7B68     		ldr	r3, [r7, #4]
 560 01a6 5B68     		ldr	r3, [r3, #4]
 561 01a8 1846     		mov	r0, r3
 562 01aa FFF7FEFF 		bl	vTaskDelete
  64:../FreeRTOS_EC/Source/CTask.cpp **** #else
  65:../FreeRTOS_EC/Source/CTask.cpp **** 		vTaskSuspend(m_handleTask);
  66:../FreeRTOS_EC/Source/CTask.cpp **** #endif
  67:../FreeRTOS_EC/Source/CTask.cpp **** 		m_handleTask = NULL;
 563              		.loc 3 67 0
 564 01ae 7B68     		ldr	r3, [r7, #4]
 565 01b0 4FF00002 		mov	r2, #0
 566 01b4 5A60     		str	r2, [r3, #4]
 567              	.L28:
  68:../FreeRTOS_EC/Source/CTask.cpp **** 	}
  69:../FreeRTOS_EC/Source/CTask.cpp **** }
 568              		.loc 3 69 0
 569 01b6 07F10807 		add	r7, r7, #8
 570 01ba BD46     		mov	sp, r7
 571 01bc 80BD     		pop	{r7, pc}
 572              		.cfi_endproc
 573              	.LFE150:
 575              		.global	_ZTV5CTask
 576              		.section	.rodata._ZTV5CTask,"a",%progbits
 577              		.align	3
 580              	_ZTV5CTask:
 581 0000 00000000 		.word	0
 582 0004 00000000 		.word	0
 583 0008 00000000 		.word	_ZNK5CTask7IsValidEv
 584 000c 00000000 		.word	_ZN5CTask6AttachEPv
 585 0010 00000000 		.word	_ZN5CTask6DetachEv
 586 0014 00000000 		.word	_ZN5CTaskD1Ev
 587 0018 00000000 		.word	_ZN5CTaskD0Ev
 588              		.weak	_ZTV12IFreeRTOSObj
 589 001c 00000000 		.section	.rodata._ZTV12IFreeRTOSObj,"aG",%progbits,_ZTV12IFreeRTOSObj,comdat
 590              		.align	3
 593              	_ZTV12IFreeRTOSObj:
 594 0000 00000000 		.word	0
 595 0004 00000000 		.word	0
 596 0008 00000000 		.word	__cxa_pure_virtual
 597 000c 00000000 		.word	__cxa_pure_virtual
 598 0010 00000000 		.word	__cxa_pure_virtual
 599 0014 00000000 		.section	.rodata._ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__,"a",%progbits
 600              		.align	2
 603              	_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__:
 604 0000 76697274 		.ascii	"virtual void CTask::Attach(xGenericHandle)\000"
 604      75616C20 
 604      766F6964 
 604      20435461 
 604      736B3A3A 
 605              		.weak	_ZN12IFreeRTOSObjC1Ev
 606              		.thumb_set _ZN12IFreeRTOSObjC1Ev,_ZN12IFreeRTOSObjC2Ev
 607              		.global	_ZN5CTaskC1Ev
 608              		.thumb_set _ZN5CTaskC1Ev,_ZN5CTaskC2Ev
 609              		.global	_ZN5CTaskC1EPv
 610              		.thumb_set _ZN5CTaskC1EPv,_ZN5CTaskC2EPv
 611              		.global	_ZN5CTaskD1Ev
 612              		.thumb_set _ZN5CTaskD1Ev,_ZN5CTaskD2Ev
 613 002b 00       		.text
 614              	.Letext0:
 615              		.file 4 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/projdefs.h"
 616              		.file 5 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 617              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/../../Source/portable
 618              		.file 7 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/FreeRTOS.h"
 619              		.file 8 "E:\\Desktop\\thundercyer-the-alarm-clock\\FreeRTOS\\Source\\include/task.h"
 620              		.file 9 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CTask.cpp
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:20     .text._ZNK5CTask7IsValidEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:25     .text._ZNK5CTask7IsValidEv:00000000 _ZNK5CTask7IsValidEv
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:62     .text._ZN5CTask6DetachEv:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:67     .text._ZN5CTask6DetachEv:00000000 _ZN5CTask6DetachEv
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:107    .text._ZN12IFreeRTOSObjC2Ev:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:112    .text._ZN12IFreeRTOSObjC2Ev:00000000 _ZN12IFreeRTOSObjC2Ev
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:146    .text._ZN12IFreeRTOSObjC2Ev:0000001c $d
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:593    .rodata._ZTV12IFreeRTOSObj:00000000 _ZTV12IFreeRTOSObj
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:151    .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:156    .text:00000000 _ZN5CTaskC2Ev
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:197    .text:0000002c $d
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:580    .rodata._ZTV5CTask:00000000 _ZTV5CTask
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:201    .text:00000030 $t
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:206    .text:00000030 _ZN5CTaskC2EPv
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:362    .text:000000c4 _ZN5CTask6AttachEPv
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:247    .text:0000005c $d
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:251    .text:00000060 $t
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:256    .text:00000060 _ZN5CTaskD2Ev
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:535    .text:00000194 _ZN5CTask6DeleteEv
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:309    .text:000000a0 $d
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:313    .text:000000a4 $t
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:318    .text:000000a4 _ZN5CTaskD0Ev
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:256    .text:00000060 _ZN5CTaskD1Ev
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:350    .rodata:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:351    .rodata:00000000 .LC0
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:354    .rodata:00000020 .LC1
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:603    .rodata._ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__:00000000 _ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:426    .text:00000118 _ZN5CTask6CreateEPFvPvEPKctS0_m
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:495    .text:00000174 _ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:577    .rodata._ZTV5CTask:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:590    .rodata._ZTV12IFreeRTOSObj:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:600    .rodata._ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:112    .text._ZN12IFreeRTOSObjC2Ev:00000000 _ZN12IFreeRTOSObjC1Ev
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:156    .text:00000000 _ZN5CTaskC1Ev
C:\Users\Alex\AppData\Local\Temp\ccM2YeKt.s:206    .text:00000030 _ZN5CTaskC1EPv
                     .debug_frame:00000010 $d
                           .group:00000000 _ZN12IFreeRTOSObjC5Ev

UNDEFINED SYMBOLS
_ZdlPv
__assert_func
xTaskGenericCreate
vTaskDelete
__cxa_pure_virtual
