   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ustime.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.get_us_time,"ax",%progbits
  19              		.align	2
  20              		.global	get_us_time
  21              		.thumb
  22              		.thumb_func
  24              	get_us_time:
  25              	.LFB110:
  26              		.file 1 "../ustime.c"
   1:../ustime.c   **** #include "ustime.h"
   2:../ustime.c   **** #include <FreeRTOS.h>
   3:../ustime.c   **** #include "stm32f4xx.h"
   4:../ustime.c   **** 
   5:../ustime.c   **** /**
   6:../ustime.c   ****  * Get time count in microseconds.
   7:../ustime.c   ****  *
   8:../ustime.c   ****  * \note
   9:../ustime.c   ****  *   this function must be called at least
  10:../ustime.c   ****  *   once every 65ms to work correctly.
  11:../ustime.c   ****  *
  12:../ustime.c   ****  */
  13:../ustime.c   **** uint64_t get_us_time()
  14:../ustime.c   **** {
  27              		.loc 1 14 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  15:../ustime.c   ****     static uint16_t t0;
  16:../ustime.c   ****     static uint64_t tickcount;
  17:../ustime.c   **** 
  18:../ustime.c   ****     vPortEnterCritical();
  42              		.loc 1 18 0
  43 0006 FFF7FEFF 		bl	vPortEnterCritical
  19:../ustime.c   **** 
  20:../ustime.c   ****     int t = TIM7->CNT;
  44              		.loc 1 20 0
  45 000a 4FF4A053 		mov	r3, #5120
  46 000e C4F20003 		movt	r3, 16384
  47 0012 5B6A     		ldr	r3, [r3, #36]
  48 0014 7B60     		str	r3, [r7, #4]
  21:../ustime.c   ****     if (t < t0)
  49              		.loc 1 21 0
  50 0016 40F20003 		movw	r3, #:lower16:t0.4537
  51 001a C0F20003 		movt	r3, #:upper16:t0.4537
  52 001e 1B88     		ldrh	r3, [r3, #0]
  53 0020 1A46     		mov	r2, r3
  54 0022 7B68     		ldr	r3, [r7, #4]
  55 0024 9A42     		cmp	r2, r3
  56 0026 03DD     		ble	.L2
  22:../ustime.c   ****         t += 0x10000;
  57              		.loc 1 22 0
  58 0028 7B68     		ldr	r3, [r7, #4]
  59 002a 03F58033 		add	r3, r3, #65536
  60 002e 7B60     		str	r3, [r7, #4]
  61              	.L2:
  23:../ustime.c   **** 
  24:../ustime.c   ****     tickcount += t - t0;
  62              		.loc 1 24 0
  63 0030 40F20003 		movw	r3, #:lower16:t0.4537
  64 0034 C0F20003 		movt	r3, #:upper16:t0.4537
  65 0038 1B88     		ldrh	r3, [r3, #0]
  66 003a 7A68     		ldr	r2, [r7, #4]
  67 003c D11A     		subs	r1, r2, r3
  68 003e 0A46     		mov	r2, r1
  69 0040 4FEAE273 		asr	r3, r2, #31
  70 0044 40F20001 		movw	r1, #:lower16:tickcount.4538
  71 0048 C0F20001 		movt	r1, #:upper16:tickcount.4538
  72 004c D1E90001 		ldrd	r0, [r1]
  73 0050 8018     		adds	r0, r0, r2
  74 0052 41EB0301 		adc	r1, r1, r3
  75 0056 40F20003 		movw	r3, #:lower16:tickcount.4538
  76 005a C0F20003 		movt	r3, #:upper16:tickcount.4538
  77 005e C3E90001 		strd	r0, [r3]
  25:../ustime.c   ****     t0 = t;
  78              		.loc 1 25 0
  79 0062 7B68     		ldr	r3, [r7, #4]
  80 0064 9AB2     		uxth	r2, r3
  81 0066 40F20003 		movw	r3, #:lower16:t0.4537
  82 006a C0F20003 		movt	r3, #:upper16:t0.4537
  83 006e 1A80     		strh	r2, [r3, #0]	@ movhi
  26:../ustime.c   **** 
  27:../ustime.c   ****     vPortExitCritical();
  84              		.loc 1 27 0
  85 0070 FFF7FEFF 		bl	vPortExitCritical
  28:../ustime.c   **** 
  29:../ustime.c   ****     return tickcount;
  86              		.loc 1 29 0
  87 0074 40F20003 		movw	r3, #:lower16:tickcount.4538
  88 0078 C0F20003 		movt	r3, #:upper16:tickcount.4538
  89 007c D3E90023 		ldrd	r2, [r3]
  30:../ustime.c   **** }
  90              		.loc 1 30 0
  91 0080 1046     		mov	r0, r2
  92 0082 1946     		mov	r1, r3
  93 0084 07F10807 		add	r7, r7, #8
  94 0088 BD46     		mov	sp, r7
  95 008a 80BD     		pop	{r7, pc}
  96              		.cfi_endproc
  97              	.LFE110:
  99              		.section	.text.delay_us,"ax",%progbits
 100              		.align	2
 101              		.global	delay_us
 102              		.thumb
 103              		.thumb_func
 105              	delay_us:
 106              	.LFB111:
  31:../ustime.c   **** 
  32:../ustime.c   **** 
  33:../ustime.c   **** /**
  34:../ustime.c   ****  * Perform a microsecond delay
  35:../ustime.c   ****  *
  36:../ustime.c   ****  * \param  us  number of microseconds to wait.
  37:../ustime.c   ****  * \note   The actual delay will last between us and (us-1) microseconds.
  38:../ustime.c   ****  *         To wait _at_least_ 1 us, you should use delay_us(2).
  39:../ustime.c   ****  */
  40:../ustime.c   **** void delay_us(unsigned long us)
  41:../ustime.c   **** {
 107              		.loc 1 41 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 16
 110              		@ frame_needed = 1, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112 0000 80B4     		push	{r7}
 113              	.LCFI3:
 114              		.cfi_def_cfa_offset 4
 115              		.cfi_offset 7, -4
 116 0002 85B0     		sub	sp, sp, #20
 117              	.LCFI4:
 118              		.cfi_def_cfa_offset 24
 119 0004 00AF     		add	r7, sp, #0
 120              	.LCFI5:
 121              		.cfi_def_cfa_register 7
 122 0006 7860     		str	r0, [r7, #4]
  42:../ustime.c   ****     uint16_t  t0 = TIM7->CNT;
 123              		.loc 1 42 0
 124 0008 4FF4A053 		mov	r3, #5120
 125 000c C4F20003 		movt	r3, 16384
 126 0010 5B6A     		ldr	r3, [r3, #36]
 127 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 128              	.L6:
 129              	.LBB2:
  43:../ustime.c   ****     for (;;) {
  44:../ustime.c   ****         int  t = TIM7->CNT;
 130              		.loc 1 44 0
 131 0014 4FF4A053 		mov	r3, #5120
 132 0018 C4F20003 		movt	r3, 16384
 133 001c 5B6A     		ldr	r3, [r3, #36]
 134 001e BB60     		str	r3, [r7, #8]
  45:../ustime.c   ****         if (t < t0)
 135              		.loc 1 45 0
 136 0020 FA89     		ldrh	r2, [r7, #14]
 137 0022 BB68     		ldr	r3, [r7, #8]
 138 0024 9A42     		cmp	r2, r3
 139 0026 03DD     		ble	.L4
  46:../ustime.c   ****             t += 0x10000;
 140              		.loc 1 46 0
 141 0028 BB68     		ldr	r3, [r7, #8]
 142 002a 03F58033 		add	r3, r3, #65536
 143 002e BB60     		str	r3, [r7, #8]
 144              	.L4:
  47:../ustime.c   **** 
  48:../ustime.c   ****         if (us < t - t0)
 145              		.loc 1 48 0
 146 0030 FB89     		ldrh	r3, [r7, #14]
 147 0032 BA68     		ldr	r2, [r7, #8]
 148 0034 D31A     		subs	r3, r2, r3
 149 0036 1A46     		mov	r2, r3
 150 0038 7B68     		ldr	r3, [r7, #4]
 151 003a 9A42     		cmp	r2, r3
 152 003c 08D8     		bhi	.L8
 153              	.L5:
  49:../ustime.c   ****             return;
  50:../ustime.c   **** 
  51:../ustime.c   ****         us -= t - t0;
 154              		.loc 1 51 0
 155 003e FA89     		ldrh	r2, [r7, #14]
 156 0040 BB68     		ldr	r3, [r7, #8]
 157 0042 D31A     		subs	r3, r2, r3
 158 0044 7A68     		ldr	r2, [r7, #4]
 159 0046 D318     		adds	r3, r2, r3
 160 0048 7B60     		str	r3, [r7, #4]
  52:../ustime.c   ****         t0  = t;
 161              		.loc 1 52 0
 162 004a BB68     		ldr	r3, [r7, #8]
 163 004c FB81     		strh	r3, [r7, #14]	@ movhi
 164              	.LBE2:
  53:../ustime.c   ****     }
 165              		.loc 1 53 0
 166 004e E1E7     		b	.L6
 167              	.L8:
 168              	.LBB3:
  49:../ustime.c   ****             return;
 169              		.loc 1 49 0
 170 0050 00BF     		nop
 171              	.L7:
 172              	.LBE3:
  54:../ustime.c   **** }
 173              		.loc 1 54 0
 174 0052 07F11407 		add	r7, r7, #20
 175 0056 BD46     		mov	sp, r7
 176 0058 80BC     		pop	{r7}
 177 005a 7047     		bx	lr
 178              		.cfi_endproc
 179              	.LFE111:
 181              		.section	.text.delay_ms,"ax",%progbits
 182              		.align	2
 183              		.global	delay_ms
 184              		.thumb
 185              		.thumb_func
 187              	delay_ms:
 188              	.LFB112:
  55:../ustime.c   **** 
  56:../ustime.c   **** 
  57:../ustime.c   **** /**
  58:../ustime.c   ****  * Perform a millisecond delay
  59:../ustime.c   ****  *
  60:../ustime.c   ****  * \param  ms  number of milliseconds to wait.
  61:../ustime.c   ****  */
  62:../ustime.c   **** void delay_ms(unsigned long ms)
  63:../ustime.c   **** {
 189              		.loc 1 63 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 8
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 80B5     		push	{r7, lr}
 194              	.LCFI6:
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 14, -4
 197              		.cfi_offset 7, -8
 198 0002 82B0     		sub	sp, sp, #8
 199              	.LCFI7:
 200              		.cfi_def_cfa_offset 16
 201 0004 00AF     		add	r7, sp, #0
 202              	.LCFI8:
 203              		.cfi_def_cfa_register 7
 204 0006 7860     		str	r0, [r7, #4]
  64:../ustime.c   ****     delay_us(ms * 1000);
 205              		.loc 1 64 0
 206 0008 7B68     		ldr	r3, [r7, #4]
 207 000a 4FF47A72 		mov	r2, #1000
 208 000e 02FB03F3 		mul	r3, r2, r3
 209 0012 1846     		mov	r0, r3
 210 0014 FFF7FEFF 		bl	delay_us
  65:../ustime.c   **** }
 211              		.loc 1 65 0
 212 0018 07F10807 		add	r7, r7, #8
 213 001c BD46     		mov	sp, r7
 214 001e 80BD     		pop	{r7, pc}
 215              		.cfi_endproc
 216              	.LFE112:
 218              		.section	.text.init_us_timer,"ax",%progbits
 219              		.align	2
 220              		.global	init_us_timer
 221              		.thumb
 222              		.thumb_func
 224              	init_us_timer:
 225              	.LFB113:
  66:../ustime.c   **** 
  67:../ustime.c   **** 
  68:../ustime.c   **** /**
  69:../ustime.c   ****  * Set up TIM7 as a 16bit, microsecond-timer.
  70:../ustime.c   ****  *
  71:../ustime.c   ****  */
  72:../ustime.c   **** void init_us_timer()
  73:../ustime.c   **** {
 226              		.loc 1 73 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 16
 229              		@ frame_needed = 1, uses_anonymous_args = 0
 230 0000 80B5     		push	{r7, lr}
 231              	.LCFI9:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 14, -4
 234              		.cfi_offset 7, -8
 235 0002 84B0     		sub	sp, sp, #16
 236              	.LCFI10:
 237              		.cfi_def_cfa_offset 24
 238 0004 00AF     		add	r7, sp, #0
 239              	.LCFI11:
 240              		.cfi_def_cfa_register 7
  74:../ustime.c   ****     RCC_ClocksTypeDef RCC_Clocks;
  75:../ustime.c   ****     RCC_GetClocksFreq(&RCC_Clocks);
 241              		.loc 1 75 0
 242 0006 3B46     		mov	r3, r7
 243 0008 1846     		mov	r0, r3
 244 000a FFF7FEFF 		bl	RCC_GetClocksFreq
  76:../ustime.c   **** 
  77:../ustime.c   ****     RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 245              		.loc 1 77 0
 246 000e 4FF46053 		mov	r3, #14336
 247 0012 C4F20203 		movt	r3, 16386
 248 0016 4FF46052 		mov	r2, #14336
 249 001a C4F20202 		movt	r2, 16386
 250 001e 126C     		ldr	r2, [r2, #64]
 251 0020 42F02002 		orr	r2, r2, #32
 252 0024 1A64     		str	r2, [r3, #64]
  78:../ustime.c   ****     TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 253              		.loc 1 78 0
 254 0026 4FF4A053 		mov	r3, #5120
 255 002a C4F20003 		movt	r3, 16384
 256 002e F968     		ldr	r1, [r7, #12]
 257 0030 4DF68362 		movw	r2, #56963
 258 0034 C4F21B32 		movt	r2, 17179
 259 0038 A2FB0102 		umull	r0, r2, r2, r1
 260 003c 4FEA9242 		lsr	r2, r2, #18
 261 0040 92B2     		uxth	r2, r2
 262 0042 02F1FF32 		add	r2, r2, #-1
 263 0046 92B2     		uxth	r2, r2
 264 0048 1A85     		strh	r2, [r3, #40]	@ movhi
  79:../ustime.c   ****     TIM7->ARR = 0xFFFF;
 265              		.loc 1 79 0
 266 004a 4FF4A053 		mov	r3, #5120
 267 004e C4F20003 		movt	r3, 16384
 268 0052 4FF6FF72 		movw	r2, #65535
 269 0056 DA62     		str	r2, [r3, #44]
  80:../ustime.c   ****     TIM7->CR1 = TIM_CR1_CEN;
 270              		.loc 1 80 0
 271 0058 4FF4A053 		mov	r3, #5120
 272 005c C4F20003 		movt	r3, 16384
 273 0060 4FF00102 		mov	r2, #1
 274 0064 1A80     		strh	r2, [r3, #0]	@ movhi
  81:../ustime.c   **** }
 275              		.loc 1 81 0
 276 0066 07F11007 		add	r7, r7, #16
 277 006a BD46     		mov	sp, r7
 278 006c 80BD     		pop	{r7, pc}
 279              		.cfi_endproc
 280              	.LFE113:
 282 006e 00BF     		.section	.bss.t0.4537,"aw",%nobits
 283              		.align	1
 286              	t0.4537:
 287 0000 0000     		.space	2
 288              		.section	.bss.tickcount.4538,"aw",%nobits
 289              		.align	3
 292              	tickcount.4538:
 293 0000 00000000 		.space	8
 293      00000000 
 294              		.text
 295              	.Letext0:
 296              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 297              		.file 3 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Devi
 298              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_S
 299              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 ustime.c
  C:\Temp\ccTctLAG.s:19     .text.get_us_time:00000000 $t
  C:\Temp\ccTctLAG.s:24     .text.get_us_time:00000000 get_us_time
  C:\Temp\ccTctLAG.s:286    .bss.t0.4537:00000000 t0.4537
  C:\Temp\ccTctLAG.s:292    .bss.tickcount.4538:00000000 tickcount.4538
  C:\Temp\ccTctLAG.s:100    .text.delay_us:00000000 $t
  C:\Temp\ccTctLAG.s:105    .text.delay_us:00000000 delay_us
  C:\Temp\ccTctLAG.s:182    .text.delay_ms:00000000 $t
  C:\Temp\ccTctLAG.s:187    .text.delay_ms:00000000 delay_ms
  C:\Temp\ccTctLAG.s:219    .text.init_us_timer:00000000 $t
  C:\Temp\ccTctLAG.s:224    .text.init_us_timer:00000000 init_us_timer
  C:\Temp\ccTctLAG.s:283    .bss.t0.4537:00000000 $d
  C:\Temp\ccTctLAG.s:289    .bss.tickcount.4538:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
RCC_GetClocksFreq
