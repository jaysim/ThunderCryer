
ThunderCryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 constructors  00000008  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 destructors   00000004  08000008  08000008  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00014b3c  08000010  08000010  00008010  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.extab    00000138  08014b4c  08014b4c  0001cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000208  08014c84  08014c84  0001cc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .textalign    00000004  08014e8c  08014e8c  0001ce8c  2**0
                  ALLOC
  6 .stacks       00000800  10000000  10000000  00028000  2**0
                  ALLOC
  7 .data         00000910  20000000  08014e90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000009cc  20000910  080157a0  00020910  2**3
                  ALLOC
  9 .ARM.attributes 00000033  00000000  00000000  00020910  2**0
                  CONTENTS, READONLY
 10 .comment      00000011  00000000  00000000  00020943  2**0
                  CONTENTS, READONLY
 11 .debug_line   00022372  00000000  00000000  00020954  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000469b1  00000000  00000000  00042cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ebae  00000000  00000000  00089677  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b8  00000000  00000000  00098228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a0  00000000  00000000  000997e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001f2e5  00000000  00000000  0009ac80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 01483d1f  00000000  00000000  000b9f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000f96d  00000000  00000000  0153dc84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  000092e0  00000000  00000000  0154d5f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000010 <__do_global_dtors_aux>:
 8000010:	b510      	push	{r4, lr}
 8000012:	4c05      	ldr	r4, [pc, #20]	; (8000028 <__do_global_dtors_aux+0x18>)
 8000014:	7823      	ldrb	r3, [r4, #0]
 8000016:	b933      	cbnz	r3, 8000026 <__do_global_dtors_aux+0x16>
 8000018:	4b04      	ldr	r3, [pc, #16]	; (800002c <__do_global_dtors_aux+0x1c>)
 800001a:	b113      	cbz	r3, 8000022 <__do_global_dtors_aux+0x12>
 800001c:	4804      	ldr	r0, [pc, #16]	; (8000030 <__do_global_dtors_aux+0x20>)
 800001e:	f3af 8000 	nop.w
 8000022:	2301      	movs	r3, #1
 8000024:	7023      	strb	r3, [r4, #0]
 8000026:	bd10      	pop	{r4, pc}
 8000028:	20000910 	.word	0x20000910
 800002c:	00000000 	.word	0x00000000
 8000030:	08014e8c 	.word	0x08014e8c

08000034 <frame_dummy>:
 8000034:	b508      	push	{r3, lr}
 8000036:	4b06      	ldr	r3, [pc, #24]	; (8000050 <frame_dummy+0x1c>)
 8000038:	b11b      	cbz	r3, 8000042 <frame_dummy+0xe>
 800003a:	4806      	ldr	r0, [pc, #24]	; (8000054 <frame_dummy+0x20>)
 800003c:	4906      	ldr	r1, [pc, #24]	; (8000058 <frame_dummy+0x24>)
 800003e:	f3af 8000 	nop.w
 8000042:	4806      	ldr	r0, [pc, #24]	; (800005c <frame_dummy+0x28>)
 8000044:	6803      	ldr	r3, [r0, #0]
 8000046:	b113      	cbz	r3, 800004e <frame_dummy+0x1a>
 8000048:	4b05      	ldr	r3, [pc, #20]	; (8000060 <frame_dummy+0x2c>)
 800004a:	b103      	cbz	r3, 800004e <frame_dummy+0x1a>
 800004c:	4798      	blx	r3
 800004e:	bd08      	pop	{r3, pc}
 8000050:	00000000 	.word	0x00000000
 8000054:	08014e8c 	.word	0x08014e8c
 8000058:	20000914 	.word	0x20000914
 800005c:	20000910 	.word	0x20000910
	...

08000070 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000070:	b480      	push	{r7}
 8000072:	b083      	sub	sp, #12
 8000074:	af00      	add	r7, sp, #0
 8000076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000078:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800007c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000080:	687a      	ldr	r2, [r7, #4]
 8000082:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8000086:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800008a:	60da      	str	r2, [r3, #12]
}
 800008c:	f107 070c 	add.w	r7, r7, #12
 8000090:	46bd      	mov	sp, r7
 8000092:	bc80      	pop	{r7}
 8000094:	4770      	bx	lr
 8000096:	bf00      	nop

08000098 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000098:	b480      	push	{r7}
 800009a:	b085      	sub	sp, #20
 800009c:	af00      	add	r7, sp, #0
 800009e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80000a0:	f04f 0300 	mov.w	r3, #0
 80000a4:	73fb      	strb	r3, [r7, #15]
 80000a6:	f04f 0300 	mov.w	r3, #0
 80000aa:	73bb      	strb	r3, [r7, #14]
 80000ac:	f04f 030f 	mov.w	r3, #15
 80000b0:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80000b2:	687b      	ldr	r3, [r7, #4]
 80000b4:	78db      	ldrb	r3, [r3, #3]
 80000b6:	2b00      	cmp	r3, #0
 80000b8:	d045      	beq.n	8000146 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80000ba:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80000be:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80000c2:	68db      	ldr	r3, [r3, #12]
 80000c4:	ea6f 0303 	mvn.w	r3, r3
 80000c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80000cc:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80000d0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80000d2:	7bfb      	ldrb	r3, [r7, #15]
 80000d4:	f1c3 0304 	rsb	r3, r3, #4
 80000d8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80000da:	7b7a      	ldrb	r2, [r7, #13]
 80000dc:	7bfb      	ldrb	r3, [r7, #15]
 80000de:	fa42 f303 	asr.w	r3, r2, r3
 80000e2:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80000e4:	687b      	ldr	r3, [r7, #4]
 80000e6:	785b      	ldrb	r3, [r3, #1]
 80000e8:	461a      	mov	r2, r3
 80000ea:	7bbb      	ldrb	r3, [r7, #14]
 80000ec:	fa02 f303 	lsl.w	r3, r2, r3
 80000f0:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80000f2:	687b      	ldr	r3, [r7, #4]
 80000f4:	789a      	ldrb	r2, [r3, #2]
 80000f6:	7b7b      	ldrb	r3, [r7, #13]
 80000f8:	4013      	ands	r3, r2
 80000fa:	b2da      	uxtb	r2, r3
 80000fc:	7bfb      	ldrb	r3, [r7, #15]
 80000fe:	4313      	orrs	r3, r2
 8000100:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000102:	7bfb      	ldrb	r3, [r7, #15]
 8000104:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000108:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800010a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800010e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000112:	687a      	ldr	r2, [r7, #4]
 8000114:	7812      	ldrb	r2, [r2, #0]
 8000116:	189b      	adds	r3, r3, r2
 8000118:	7bfa      	ldrb	r2, [r7, #15]
 800011a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800011e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000122:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000126:	687a      	ldr	r2, [r7, #4]
 8000128:	7812      	ldrb	r2, [r2, #0]
 800012a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800012e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000130:	6879      	ldr	r1, [r7, #4]
 8000132:	7809      	ldrb	r1, [r1, #0]
 8000134:	f001 011f 	and.w	r1, r1, #31
 8000138:	f04f 0001 	mov.w	r0, #1
 800013c:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000144:	e014      	b.n	8000170 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000146:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800014a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800014e:	687a      	ldr	r2, [r7, #4]
 8000150:	7812      	ldrb	r2, [r2, #0]
 8000152:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000156:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000158:	6879      	ldr	r1, [r7, #4]
 800015a:	7809      	ldrb	r1, [r1, #0]
 800015c:	f001 011f 	and.w	r1, r1, #31
 8000160:	f04f 0001 	mov.w	r0, #1
 8000164:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000168:	f102 0220 	add.w	r2, r2, #32
 800016c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000170:	f107 0714 	add.w	r7, r7, #20
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop

0800017c <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000186:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800018a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800018e:	683a      	ldr	r2, [r7, #0]
 8000190:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000194:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000198:	6879      	ldr	r1, [r7, #4]
 800019a:	430a      	orrs	r2, r1
 800019c:	609a      	str	r2, [r3, #8]
}
 800019e:	f107 070c 	add.w	r7, r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4602      	mov	r2, r0
 80001b0:	460b      	mov	r3, r1
 80001b2:	71fa      	strb	r2, [r7, #7]
 80001b4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80001b6:	79bb      	ldrb	r3, [r7, #6]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d00d      	beq.n	80001d8 <NVIC_SystemLPConfig+0x30>
  {
    SCB->SCR |= LowPowerMode;
 80001bc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80001c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001c4:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80001c8:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80001cc:	6912      	ldr	r2, [r2, #16]
 80001ce:	4611      	mov	r1, r2
 80001d0:	79fa      	ldrb	r2, [r7, #7]
 80001d2:	430a      	orrs	r2, r1
 80001d4:	611a      	str	r2, [r3, #16]
 80001d6:	e00e      	b.n	80001f6 <NVIC_SystemLPConfig+0x4e>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80001d8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80001dc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001e0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80001e4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80001e8:	6912      	ldr	r2, [r2, #16]
 80001ea:	4611      	mov	r1, r2
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	ea6f 0202 	mvn.w	r2, r2
 80001f2:	400a      	ands	r2, r1
 80001f4:	611a      	str	r2, [r3, #16]
  }
}
 80001f6:	f107 070c 	add.w	r7, r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b04      	cmp	r3, #4
 800020c:	d10c      	bne.n	8000228 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800020e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000212:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000216:	f24e 0210 	movw	r2, #57360	; 0xe010
 800021a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800021e:	6812      	ldr	r2, [r2, #0]
 8000220:	f042 0204 	orr.w	r2, r2, #4
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	e00b      	b.n	8000240 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000228:	f24e 0310 	movw	r3, #57360	; 0xe010
 800022c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000230:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000234:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000238:	6812      	ldr	r2, [r2, #0]
 800023a:	f022 0204 	bic.w	r2, r2, #4
 800023e:	601a      	str	r2, [r3, #0]
  }
}
 8000240:	f107 070c 	add.w	r7, r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	0000      	movs	r0, r0
	...

08000250 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8000254:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000258:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800025c:	f04f 0200 	mov.w	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8000262:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000266:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800026a:	f04f 0200 	mov.w	r2, #0
 800026e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8000270:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000274:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000278:	f04f 0200 	mov.w	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 800027e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000282:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000286:	f04f 0200 	mov.w	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 800028c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000290:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000298:	f2c0 027f 	movt	r2, #127	; 0x7f
 800029c:	615a      	str	r2, [r3, #20]
}
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80002ac:	f04f 0300 	mov.w	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80002b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80002b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80002ba:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	799b      	ldrb	r3, [r3, #6]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d07e      	beq.n	80003c2 <EXTI_Init+0x11e>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002c4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80002c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80002cc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80002d0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80002d4:	6812      	ldr	r2, [r2, #0]
 80002d6:	4611      	mov	r1, r2
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	6812      	ldr	r2, [r2, #0]
 80002dc:	ea6f 0202 	mvn.w	r2, r2
 80002e0:	400a      	ands	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002e4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80002e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80002ec:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80002f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80002f4:	6852      	ldr	r2, [r2, #4]
 80002f6:	4611      	mov	r1, r2
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	6812      	ldr	r2, [r2, #0]
 80002fc:	ea6f 0202 	mvn.w	r2, r2
 8000300:	400a      	ands	r2, r1
 8000302:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	68fa      	ldr	r2, [r7, #12]
 800030a:	18d3      	adds	r3, r2, r3
 800030c:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	68fa      	ldr	r2, [r7, #12]
 8000312:	6811      	ldr	r1, [r2, #0]
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	6812      	ldr	r2, [r2, #0]
 8000318:	430a      	orrs	r2, r1
 800031a:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800031c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000320:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000324:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8000328:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800032c:	6892      	ldr	r2, [r2, #8]
 800032e:	4611      	mov	r1, r2
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	ea6f 0202 	mvn.w	r2, r2
 8000338:	400a      	ands	r2, r1
 800033a:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800033c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000340:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000344:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8000348:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800034c:	68d2      	ldr	r2, [r2, #12]
 800034e:	4611      	mov	r1, r2
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	6812      	ldr	r2, [r2, #0]
 8000354:	ea6f 0202 	mvn.w	r2, r2
 8000358:	400a      	ands	r2, r1
 800035a:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	795b      	ldrb	r3, [r3, #5]
 8000360:	2b10      	cmp	r3, #16
 8000362:	d11c      	bne.n	800039e <EXTI_Init+0xfa>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000364:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000368:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800036c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8000370:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000374:	6892      	ldr	r2, [r2, #8]
 8000376:	4611      	mov	r1, r2
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	6812      	ldr	r2, [r2, #0]
 800037c:	430a      	orrs	r2, r1
 800037e:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000380:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000384:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000388:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800038c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000390:	68d2      	ldr	r2, [r2, #12]
 8000392:	4611      	mov	r1, r2
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	6812      	ldr	r2, [r2, #0]
 8000398:	430a      	orrs	r2, r1
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	e01f      	b.n	80003de <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800039e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80003a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80003a6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	68fa      	ldr	r2, [r7, #12]
 80003ae:	18d3      	adds	r3, r2, r3
 80003b0:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	6811      	ldr	r1, [r2, #0]
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	6812      	ldr	r2, [r2, #0]
 80003bc:	430a      	orrs	r2, r1
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	e00d      	b.n	80003de <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	791b      	ldrb	r3, [r3, #4]
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	18d3      	adds	r3, r2, r3
 80003ca:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	6811      	ldr	r1, [r2, #0]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	6812      	ldr	r2, [r2, #0]
 80003d6:	ea6f 0202 	mvn.w	r2, r2
 80003da:	400a      	ands	r2, r1
 80003dc:	601a      	str	r2, [r3, #0]
  }
}
 80003de:	f107 0714 	add.w	r7, r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f04f 0200 	mov.w	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f04f 0200 	mov.w	r2, #0
 80003fe:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f04f 020c 	mov.w	r2, #12
 8000406:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f04f 0200 	mov.w	r2, #0
 800040e:	719a      	strb	r2, [r3, #6]
}
 8000410:	f107 070c 	add.w	r7, r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop

0800041c <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8000424:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000428:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800042c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8000430:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000434:	6912      	ldr	r2, [r2, #16]
 8000436:	4611      	mov	r1, r2
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	430a      	orrs	r2, r1
 800043c:	611a      	str	r2, [r3, #16]
}
 800043e:	f107 070c 	add.w	r7, r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000456:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800045a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	461a      	mov	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4013      	ands	r3, r2
 8000466:	2b00      	cmp	r3, #0
 8000468:	d003      	beq.n	8000472 <EXTI_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800046a:	f04f 0301 	mov.w	r3, #1
 800046e:	73fb      	strb	r3, [r7, #15]
 8000470:	e002      	b.n	8000478 <EXTI_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8000472:	f04f 0300 	mov.w	r3, #0
 8000476:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000478:	7bfb      	ldrb	r3, [r7, #15]
}
 800047a:	4618      	mov	r0, r3
 800047c:	f107 0714 	add.w	r7, r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000490:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000494:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	615a      	str	r2, [r3, #20]
}
 800049c:	f107 070c 	add.w	r7, r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80004b0:	f04f 0300 	mov.w	r3, #0
 80004b4:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80004b6:	f04f 0300 	mov.w	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80004bc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80004c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	461a      	mov	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80004ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80004d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	461a      	mov	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4013      	ands	r3, r2
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d006      	beq.n	80004f0 <EXTI_GetITStatus+0x48>
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d003      	beq.n	80004f0 <EXTI_GetITStatus+0x48>
  {
    bitstatus = SET;
 80004e8:	f04f 0301 	mov.w	r3, #1
 80004ec:	73fb      	strb	r3, [r7, #15]
 80004ee:	e002      	b.n	80004f6 <EXTI_GetITStatus+0x4e>
  }
  else
  {
    bitstatus = RESET;
 80004f0:	f04f 0300 	mov.w	r3, #0
 80004f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	f107 0714 	add.w	r7, r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800050c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000510:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	615a      	str	r2, [r3, #20]
}
 8000518:	f107 070c 	add.w	r7, r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
	...

08000530 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	f04f 0300 	mov.w	r3, #0
 800053e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000542:	429a      	cmp	r2, r3
 8000544:	d10c      	bne.n	8000560 <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000546:	f04f 0001 	mov.w	r0, #1
 800054a:	f04f 0101 	mov.w	r1, #1
 800054e:	f000 ff0d 	bl	800136c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000552:	f04f 0001 	mov.w	r0, #1
 8000556:	f04f 0100 	mov.w	r1, #0
 800055a:	f000 ff07 	bl	800136c <RCC_AHB1PeriphResetCmd>
 800055e:	e09e      	b.n	800069e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000566:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800056a:	429a      	cmp	r2, r3
 800056c:	d10c      	bne.n	8000588 <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800056e:	f04f 0002 	mov.w	r0, #2
 8000572:	f04f 0101 	mov.w	r1, #1
 8000576:	f000 fef9 	bl	800136c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800057a:	f04f 0002 	mov.w	r0, #2
 800057e:	f04f 0100 	mov.w	r1, #0
 8000582:	f000 fef3 	bl	800136c <RCC_AHB1PeriphResetCmd>
 8000586:	e08a      	b.n	800069e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800058e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000592:	429a      	cmp	r2, r3
 8000594:	d10c      	bne.n	80005b0 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000596:	f04f 0004 	mov.w	r0, #4
 800059a:	f04f 0101 	mov.w	r1, #1
 800059e:	f000 fee5 	bl	800136c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80005a2:	f04f 0004 	mov.w	r0, #4
 80005a6:	f04f 0100 	mov.w	r1, #0
 80005aa:	f000 fedf 	bl	800136c <RCC_AHB1PeriphResetCmd>
 80005ae:	e076      	b.n	800069e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d10c      	bne.n	80005d8 <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80005be:	f04f 0008 	mov.w	r0, #8
 80005c2:	f04f 0101 	mov.w	r1, #1
 80005c6:	f000 fed1 	bl	800136c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80005ca:	f04f 0008 	mov.w	r0, #8
 80005ce:	f04f 0100 	mov.w	r1, #0
 80005d2:	f000 fecb 	bl	800136c <RCC_AHB1PeriphResetCmd>
 80005d6:	e062      	b.n	800069e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d10c      	bne.n	8000600 <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80005e6:	f04f 0010 	mov.w	r0, #16
 80005ea:	f04f 0101 	mov.w	r1, #1
 80005ee:	f000 febd 	bl	800136c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80005f2:	f04f 0010 	mov.w	r0, #16
 80005f6:	f04f 0100 	mov.w	r1, #0
 80005fa:	f000 feb7 	bl	800136c <RCC_AHB1PeriphResetCmd>
 80005fe:	e04e      	b.n	800069e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000606:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800060a:	429a      	cmp	r2, r3
 800060c:	d10c      	bne.n	8000628 <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800060e:	f04f 0020 	mov.w	r0, #32
 8000612:	f04f 0101 	mov.w	r1, #1
 8000616:	f000 fea9 	bl	800136c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800061a:	f04f 0020 	mov.w	r0, #32
 800061e:	f04f 0100 	mov.w	r1, #0
 8000622:	f000 fea3 	bl	800136c <RCC_AHB1PeriphResetCmd>
 8000626:	e03a      	b.n	800069e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800062e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000632:	429a      	cmp	r2, r3
 8000634:	d10c      	bne.n	8000650 <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000636:	f04f 0040 	mov.w	r0, #64	; 0x40
 800063a:	f04f 0101 	mov.w	r1, #1
 800063e:	f000 fe95 	bl	800136c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000642:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000646:	f04f 0100 	mov.w	r1, #0
 800064a:	f000 fe8f 	bl	800136c <RCC_AHB1PeriphResetCmd>
 800064e:	e026      	b.n	800069e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000656:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800065a:	429a      	cmp	r2, r3
 800065c:	d10c      	bne.n	8000678 <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800065e:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000662:	f04f 0101 	mov.w	r1, #1
 8000666:	f000 fe81 	bl	800136c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800066a:	f04f 0080 	mov.w	r0, #128	; 0x80
 800066e:	f04f 0100 	mov.w	r1, #0
 8000672:	f000 fe7b 	bl	800136c <RCC_AHB1PeriphResetCmd>
 8000676:	e012      	b.n	800069e <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000682:	429a      	cmp	r2, r3
 8000684:	d10b      	bne.n	800069e <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000686:	f44f 7080 	mov.w	r0, #256	; 0x100
 800068a:	f04f 0101 	mov.w	r1, #1
 800068e:	f000 fe6d 	bl	800136c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000692:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000696:	f04f 0100 	mov.w	r1, #0
 800069a:	f000 fe67 	bl	800136c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 800069e:	f107 0708 	add.w	r7, r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop

080006a8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80006b2:	f04f 0300 	mov.w	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	f04f 0300 	mov.w	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	e08e      	b.n	80007ea <GPIO_Init+0x142>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	f04f 0201 	mov.w	r2, #1
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	4013      	ands	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d17b      	bne.n	80007e2 <GPIO_Init+0x13a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006f6:	f04f 0103 	mov.w	r1, #3
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	ea6f 0303 	mvn.w	r3, r3
 8000702:	401a      	ands	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	4619      	mov	r1, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	431a      	orrs	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d003      	beq.n	8000734 <GPIO_Init+0x8c>
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d138      	bne.n	80007a6 <GPIO_Init+0xfe>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	461a      	mov	r2, r3
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000740:	f04f 0103 	mov.w	r1, #3
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	ea6f 0303 	mvn.w	r3, r3
 800074c:	401a      	ands	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	461a      	mov	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	795b      	ldrb	r3, [r3, #5]
 800075c:	4619      	mov	r1, r3
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	431a      	orrs	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	461a      	mov	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	b29b      	uxth	r3, r3
 8000778:	f04f 0101 	mov.w	r1, #1
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	ea6f 0303 	mvn.w	r3, r3
 8000784:	401a      	ands	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	461a      	mov	r2, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	799b      	ldrb	r3, [r3, #6]
 8000794:	4619      	mov	r1, r3
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	b29b      	uxth	r3, r3
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	431a      	orrs	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	461a      	mov	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b4:	f04f 0103 	mov.w	r1, #3
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	ea6f 0303 	mvn.w	r3, r3
 80007c0:	401a      	ands	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	461a      	mov	r2, r3
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	79db      	ldrb	r3, [r3, #7]
 80007d0:	4619      	mov	r1, r3
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	431a      	orrs	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	f103 0301 	add.w	r3, r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	f67f af6d 	bls.w	80006cc <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80007f2:	f107 071c 	add.w	r7, r7, #28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800080a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f04f 0200 	mov.w	r2, #0
 8000812:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f04f 0200 	mov.w	r2, #0
 800081a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f04f 0200 	mov.w	r2, #0
 800082a:	71da      	strb	r2, [r3, #7]
}
 800082c:	f107 070c 	add.w	r7, r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop

08000838 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8000844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000848:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800084a:	887a      	ldrh	r2, [r7, #2]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000858:	887a      	ldrh	r2, [r7, #2]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	60fb      	str	r3, [r7, #12]
}
 8000870:	f107 0714 	add.w	r7, r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	461a      	mov	r2, r3
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	4013      	ands	r3, r2
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 800089c:	f04f 0301 	mov.w	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e002      	b.n	80008aa <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	f107 0714 	add.w	r7, r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	691b      	ldr	r3, [r3, #16]
 80008c4:	b29b      	uxth	r3, r3
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	f107 070c 	add.w	r7, r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80008e0:	f04f 0300 	mov.w	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	461a      	mov	r2, r3
 80008ec:	887b      	ldrh	r3, [r7, #2]
 80008ee:	4013      	ands	r3, r2
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d003      	beq.n	80008fc <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 80008f4:	f04f 0301 	mov.w	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
 80008fa:	e002      	b.n	8000902 <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
}
 8000904:	4618      	mov	r0, r3
 8000906:	f107 0714 	add.w	r7, r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	b29b      	uxth	r3, r3
}
 800091e:	4618      	mov	r0, r3
 8000920:	f107 070c 	add.w	r7, r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	887a      	ldrh	r2, [r7, #2]
 800093c:	831a      	strh	r2, [r3, #24]
}
 800093e:	f107 070c 	add.w	r7, r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	887a      	ldrh	r2, [r7, #2]
 8000958:	835a      	strh	r2, [r3, #26]
}
 800095a:	f107 070c 	add.w	r7, r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	4613      	mov	r3, r2
 800096e:	460a      	mov	r2, r1
 8000970:	807a      	strh	r2, [r7, #2]
 8000972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000974:	787b      	ldrb	r3, [r7, #1]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	887a      	ldrh	r2, [r7, #2]
 800097e:	831a      	strh	r2, [r3, #24]
 8000980:	e002      	b.n	8000988 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	887a      	ldrh	r2, [r7, #2]
 8000986:	835a      	strh	r2, [r3, #26]
  }
}
 8000988:	f107 070c 	add.w	r7, r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80009a0:	887a      	ldrh	r2, [r7, #2]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	615a      	str	r2, [r3, #20]
}
 80009a6:	f107 070c 	add.w	r7, r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	461a      	mov	r2, r3
 80009c2:	887b      	ldrh	r3, [r7, #2]
 80009c4:	405a      	eors	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	615a      	str	r2, [r3, #20]
}
 80009ca:	f107 070c 	add.w	r7, r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	4613      	mov	r3, r2
 80009de:	460a      	mov	r2, r1
 80009e0:	807a      	strh	r2, [r7, #2]
 80009e2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80009e4:	f04f 0300 	mov.w	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80009f0:	787a      	ldrb	r2, [r7, #1]
 80009f2:	887b      	ldrh	r3, [r7, #2]
 80009f4:	f003 0307 	and.w	r3, r3, #7
 80009f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	887b      	ldrh	r3, [r7, #2]
 8000a0e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4619      	mov	r1, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f101 0108 	add.w	r1, r1, #8
 8000a1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a20:	4619      	mov	r1, r3
 8000a22:	887b      	ldrh	r3, [r7, #2]
 8000a24:	f003 0307 	and.w	r3, r3, #7
 8000a28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a2c:	f04f 000f 	mov.w	r0, #15
 8000a30:	fa00 f303 	lsl.w	r3, r0, r3
 8000a34:	ea6f 0303 	mvn.w	r3, r3
 8000a38:	4019      	ands	r1, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f102 0208 	add.w	r2, r2, #8
 8000a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f102 0208 	add.w	r2, r2, #8
 8000a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f102 0208 	add.w	r2, r2, #8
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a76:	f107 0714 	add.w	r7, r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	f042 0201 	orr.w	r2, r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aa0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000aaa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ab2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ab6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000aba:	6812      	ldr	r2, [r2, #0]
 8000abc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ac0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ac4:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ac6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ace:	f243 0210 	movw	r2, #12304	; 0x3010
 8000ad2:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8000ad6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ad8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ae0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ae4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ae8:	6812      	ldr	r2, [r2, #0]
 8000aea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000aee:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000af0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000af4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000af8:	f04f 0200 	mov.w	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
}
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000b0e:	f643 0302 	movw	r3, #14338	; 0x3802
 8000b12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b16:	f04f 0200 	mov.w	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000b1c:	f643 0302 	movw	r3, #14338	; 0x3802
 8000b20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	701a      	strb	r2, [r3, #0]
}
 8000b28:	f107 070c 	add.w	r7, r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000b4c:	f04f 0031 	mov.w	r0, #49	; 0x31
 8000b50:	f000 fdf4 	bl	800173c <RCC_GetFlagStatus>
 8000b54:	4603      	mov	r3, r0
 8000b56:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f103 0301 	add.w	r3, r3, #1
 8000b5e:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b66:	d002      	beq.n	8000b6e <RCC_WaitForHSEStartUp+0x3a>
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0ee      	beq.n	8000b4c <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000b6e:	f04f 0031 	mov.w	r0, #49	; 0x31
 8000b72:	f000 fde3 	bl	800173c <RCC_GetFlagStatus>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8000b7c:	f04f 0301 	mov.w	r3, #1
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	e002      	b.n	8000b8a <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f107 0708 	add.w	r7, r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop

08000b98 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8000ba2:	f04f 0300 	mov.w	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000ba8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bba:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8000bc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	f107 0714 	add.w	r7, r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000bea:	f04f 0300 	mov.w	r3, #0
 8000bee:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	f107 070c 	add.w	r7, r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000c0a:	f643 0370 	movw	r3, #14448	; 0x3870
 8000c0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000c18:	f643 0370 	movw	r3, #14448	; 0x3870
 8000c1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c20:	f04f 0200 	mov.w	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d002      	beq.n	8000c32 <RCC_LSEConfig+0x32>
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d008      	beq.n	8000c42 <RCC_LSEConfig+0x42>
 8000c30:	e00f      	b.n	8000c52 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000c32:	f643 0370 	movw	r3, #14448	; 0x3870
 8000c36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c3a:	f04f 0201 	mov.w	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
      break;
 8000c40:	e008      	b.n	8000c54 <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000c42:	f643 0370 	movw	r3, #14448	; 0x3870
 8000c46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c4a:	f04f 0205 	mov.w	r2, #5
 8000c4e:	701a      	strb	r2, [r3, #0]
      break;
 8000c50:	e000      	b.n	8000c54 <RCC_LSEConfig+0x54>
    default:
      break;
 8000c52:	bf00      	nop
  }
}
 8000c54:	f107 070c 	add.w	r7, r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000c6a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8000c6e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	601a      	str	r2, [r3, #0]
}
 8000c76:	f107 070c 	add.w	r7, r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000c8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8000c9c:	68ba      	ldr	r2, [r7, #8]
 8000c9e:	4311      	orrs	r1, r2
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8000ca6:	f102 32ff 	add.w	r2, r2, #4294967295
 8000caa:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8000cae:	4311      	orrs	r1, r2
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8000cbe:	f107 0714 	add.w	r7, r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000cd2:	f04f 0360 	mov.w	r3, #96	; 0x60
 8000cd6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	601a      	str	r2, [r3, #0]
}
 8000cde:	f107 070c 	add.w	r7, r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8000cf2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cf6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	ea4f 7202 	mov.w	r2, r2, lsl #28
 8000d06:	430a      	orrs	r2, r1
 8000d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8000d0c:	f107 070c 	add.w	r7, r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000d22:	f04f 0368 	mov.w	r3, #104	; 0x68
 8000d26:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	601a      	str	r2, [r3, #0]
}
 8000d2e:	f107 070c 	add.w	r7, r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000d42:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8000d46:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	f107 070c 	add.w	r7, r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000d68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000d7a:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000d88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	609a      	str	r2, [r3, #8]
}
 8000d94:	f107 0714 	add.w	r7, r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000db0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000db4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000dd0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	609a      	str	r2, [r3, #8]
}
 8000ddc:	f107 0714 	add.w	r7, r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000df6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f023 0303 	bic.w	r3, r3, #3
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000e12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	609a      	str	r2, [r3, #8]
}
 8000e1e:	f107 0714 	add.w	r7, r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000e2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	b2db      	uxtb	r3, r3
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000e56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000e72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	609a      	str	r2, [r3, #8]
}
 8000e7e:	f107 0714 	add.w	r7, r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000e96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000eb2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000eb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	609a      	str	r2, [r3, #8]
}
 8000ebe:	f107 0714 	add.w	r7, r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000ed6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000eda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ef6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000efa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	609a      	str	r2, [r3, #8]
}
 8000f02:	f107 0714 	add.w	r7, r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	f04f 0302 	mov.w	r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	f04f 0302 	mov.w	r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d00a      	beq.n	8000f64 <RCC_GetClocksFreq+0x58>
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	d00f      	beq.n	8000f72 <RCC_GetClocksFreq+0x66>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d162      	bne.n	800101c <RCC_GetClocksFreq+0x110>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000f5c:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8000f60:	6013      	str	r3, [r2, #0]
      break;
 8000f62:	e062      	b.n	800102a <RCC_GetClocksFreq+0x11e>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000f6a:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000f6e:	6013      	str	r3, [r2, #0]
      break;
 8000f70:	e05b      	b.n	800102a <RCC_GetClocksFreq+0x11e>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000f72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f80:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8000f84:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f94:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d015      	beq.n	8000fc8 <RCC_GetClocksFreq+0xbc>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f9c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000fa0:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fba:	400b      	ands	r3, r1
 8000fbc:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000fc0:	fb03 f302 	mul.w	r3, r3, r2
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e014      	b.n	8000ff2 <RCC_GetClocksFreq+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000fc8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000fcc:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fd6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000fec:	fb03 f302 	mul.w	r3, r3, r2
 8000ff0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000ff2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ff6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001000:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8001004:	f103 0301 	add.w	r3, r3, #1
 8001008:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800100c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	fbb2 f2f3 	udiv	r2, r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
      break;
 800101a:	e006      	b.n	800102a <RCC_GetClocksFreq+0x11e>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001022:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8001026:	6013      	str	r3, [r2, #0]
      break;
 8001028:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800102a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800102e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001038:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001040:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001042:	f240 0304 	movw	r3, #4
 8001046:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	189b      	adds	r3, r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa22 f203 	lsr.w	r2, r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001062:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001066:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001070:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8001078:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800107a:	f240 0304 	movw	r3, #4
 800107e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	189b      	adds	r3, r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa22 f203 	lsr.w	r2, r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800109a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800109e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80010a8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	ea4f 3353 	mov.w	r3, r3, lsr #13
 80010b0:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80010b2:	f240 0304 	movw	r3, #4
 80010b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa22 f203 	lsr.w	r2, r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60da      	str	r2, [r3, #12]
}
 80010d2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010f4:	d117      	bne.n	8001126 <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80010f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001108:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800111a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800111e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001126:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800112a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800112e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001132:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001136:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8001138:	4611      	mov	r1, r2
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	ea4f 5202 	mov.w	r2, r2, lsl #20
 8001140:	ea4f 5212 	mov.w	r2, r2, lsr #20
 8001144:	430a      	orrs	r2, r1
 8001146:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001148:	f107 0714 	add.w	r7, r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800115e:	f640 633c 	movw	r3, #3644	; 0xe3c
 8001162:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	601a      	str	r2, [r3, #0]
}
 800116a:	f107 070c 	add.w	r7, r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800117e:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001182:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	f107 070c 	add.w	r7, r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800119c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 80011a0:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	f107 070c 	add.w	r7, r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00d      	beq.n	80011e2 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80011c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011d8:	4611      	mov	r1, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	430a      	orrs	r2, r1
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
 80011e0:	e00e      	b.n	8001200 <RCC_AHB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011f4:	4611      	mov	r1, r2
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	ea6f 0202 	mvn.w	r2, r2
 80011fc:	400a      	ands	r2, r1
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8001200:	f107 070c 	add.w	r7, r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop

0800120c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00d      	beq.n	800123a <RCC_AHB2PeriphClockCmd+0x2e>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800121e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001222:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001226:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800122a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800122e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001230:	4611      	mov	r1, r2
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	430a      	orrs	r2, r1
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
 8001238:	e00e      	b.n	8001258 <RCC_AHB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800123a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800123e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001242:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001246:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800124a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800124c:	4611      	mov	r1, r2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	ea6f 0202 	mvn.w	r2, r2
 8001254:	400a      	ands	r2, r1
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001258:	f107 070c 	add.w	r7, r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00d      	beq.n	8001292 <RCC_AHB3PeriphClockCmd+0x2e>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001276:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800127a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800127e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001282:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001288:	4611      	mov	r1, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	430a      	orrs	r2, r1
 800128e:	639a      	str	r2, [r3, #56]	; 0x38
 8001290:	e00e      	b.n	80012b0 <RCC_AHB3PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001292:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001296:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800129a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800129e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012a4:	4611      	mov	r1, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	ea6f 0202 	mvn.w	r2, r2
 80012ac:	400a      	ands	r2, r1
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 80012b0:	f107 070c 	add.w	r7, r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00d      	beq.n	80012ea <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80012ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012e0:	4611      	mov	r1, r2
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
 80012e8:	e00e      	b.n	8001308 <RCC_APB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80012ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012fc:	4611      	mov	r1, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	ea6f 0202 	mvn.w	r2, r2
 8001304:	400a      	ands	r2, r1
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001308:	f107 070c 	add.w	r7, r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00d      	beq.n	8001342 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001326:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800132a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800132e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001332:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001336:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001338:	4611      	mov	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	430a      	orrs	r2, r1
 800133e:	645a      	str	r2, [r3, #68]	; 0x44
 8001340:	e00e      	b.n	8001360 <RCC_APB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001342:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001346:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800134a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800134e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001352:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001354:	4611      	mov	r1, r2
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	ea6f 0202 	mvn.w	r2, r2
 800135c:	400a      	ands	r2, r1
 800135e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001360:	f107 070c 	add.w	r7, r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00d      	beq.n	800139a <RCC_AHB1PeriphResetCmd+0x2e>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800137e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001386:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800138a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800138e:	6912      	ldr	r2, [r2, #16]
 8001390:	4611      	mov	r1, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	430a      	orrs	r2, r1
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	e00e      	b.n	80013b8 <RCC_AHB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800139a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800139e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013aa:	6912      	ldr	r2, [r2, #16]
 80013ac:	4611      	mov	r1, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	ea6f 0202 	mvn.w	r2, r2
 80013b4:	400a      	ands	r2, r1
 80013b6:	611a      	str	r2, [r3, #16]
  }
}
 80013b8:	f107 070c 	add.w	r7, r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop

080013c4 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00d      	beq.n	80013f2 <RCC_AHB2PeriphResetCmd+0x2e>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80013d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013de:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013e6:	6952      	ldr	r2, [r2, #20]
 80013e8:	4611      	mov	r1, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	e00e      	b.n	8001410 <RCC_AHB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80013f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013fa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001402:	6952      	ldr	r2, [r2, #20]
 8001404:	4611      	mov	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	ea6f 0202 	mvn.w	r2, r2
 800140c:	400a      	ands	r2, r1
 800140e:	615a      	str	r2, [r3, #20]
  }
}
 8001410:	f107 070c 	add.w	r7, r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop

0800141c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00d      	beq.n	800144a <RCC_AHB3PeriphResetCmd+0x2e>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800142e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001432:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001436:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800143a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800143e:	6992      	ldr	r2, [r2, #24]
 8001440:	4611      	mov	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	430a      	orrs	r2, r1
 8001446:	619a      	str	r2, [r3, #24]
 8001448:	e00e      	b.n	8001468 <RCC_AHB3PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800144a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800144e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001452:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001456:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800145a:	6992      	ldr	r2, [r2, #24]
 800145c:	4611      	mov	r1, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	ea6f 0202 	mvn.w	r2, r2
 8001464:	400a      	ands	r2, r1
 8001466:	619a      	str	r2, [r3, #24]
  }
}
 8001468:	f107 070c 	add.w	r7, r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop

08001474 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00d      	beq.n	80014a2 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001486:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800148a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800148e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001492:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001496:	6a12      	ldr	r2, [r2, #32]
 8001498:	4611      	mov	r1, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	430a      	orrs	r2, r1
 800149e:	621a      	str	r2, [r3, #32]
 80014a0:	e00e      	b.n	80014c0 <RCC_APB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80014a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014b2:	6a12      	ldr	r2, [r2, #32]
 80014b4:	4611      	mov	r1, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	ea6f 0202 	mvn.w	r2, r2
 80014bc:	400a      	ands	r2, r1
 80014be:	621a      	str	r2, [r3, #32]
  }
}
 80014c0:	f107 070c 	add.w	r7, r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop

080014cc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00d      	beq.n	80014fa <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80014de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014e6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014f0:	4611      	mov	r1, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
 80014f8:	e00e      	b.n	8001518 <RCC_APB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80014fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001502:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001506:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800150a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800150c:	4611      	mov	r1, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	ea6f 0202 	mvn.w	r2, r2
 8001514:	400a      	ands	r2, r1
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001518:	f107 070c 	add.w	r7, r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001536:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800153a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800153e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001542:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001546:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001548:	4611      	mov	r1, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	430a      	orrs	r2, r1
 800154e:	651a      	str	r2, [r3, #80]	; 0x50
 8001550:	e00e      	b.n	8001570 <RCC_AHB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001552:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001556:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800155a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800155e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001562:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001564:	4611      	mov	r1, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	ea6f 0202 	mvn.w	r2, r2
 800156c:	400a      	ands	r2, r1
 800156e:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8001570:	f107 070c 	add.w	r7, r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00d      	beq.n	80015aa <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800158e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001592:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001596:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800159a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800159e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80015a0:	4611      	mov	r1, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	655a      	str	r2, [r3, #84]	; 0x54
 80015a8:	e00e      	b.n	80015c8 <RCC_AHB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 80015aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80015b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015ba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80015bc:	4611      	mov	r1, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	ea6f 0202 	mvn.w	r2, r2
 80015c4:	400a      	ands	r2, r1
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 80015c8:	f107 070c 	add.w	r7, r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00d      	beq.n	8001602 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80015e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015ee:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80015f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80015f8:	4611      	mov	r1, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001600:	e00e      	b.n	8001620 <RCC_AHB3PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001602:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001606:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800160a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800160e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001612:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001614:	4611      	mov	r1, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	ea6f 0202 	mvn.w	r2, r2
 800161c:	400a      	ands	r2, r1
 800161e:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8001620:	f107 070c 	add.w	r7, r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop

0800162c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <RCC_APB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800163e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001642:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001646:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800164a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800164e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001650:	4611      	mov	r1, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	430a      	orrs	r2, r1
 8001656:	661a      	str	r2, [r3, #96]	; 0x60
 8001658:	e00e      	b.n	8001678 <RCC_APB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800165a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800165e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001662:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001666:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800166a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800166c:	4611      	mov	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	ea6f 0202 	mvn.w	r2, r2
 8001674:	400a      	ands	r2, r1
 8001676:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8001678:	f107 070c 	add.w	r7, r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop

08001684 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00d      	beq.n	80016b2 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001696:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800169a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800169e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016a6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80016a8:	4611      	mov	r1, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	665a      	str	r2, [r3, #100]	; 0x64
 80016b0:	e00e      	b.n	80016d0 <RCC_APB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80016b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80016c4:	4611      	mov	r1, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	ea6f 0202 	mvn.w	r2, r2
 80016cc:	400a      	ands	r2, r1
 80016ce:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 80016d0:	f107 070c 	add.w	r7, r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop

080016dc <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	71fa      	strb	r2, [r7, #7]
 80016e8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00e      	beq.n	800170e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80016f0:	f643 030d 	movw	r3, #14349	; 0x380d
 80016f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016f8:	f643 020d 	movw	r2, #14349	; 0x380d
 80016fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	b2d1      	uxtb	r1, r2
 8001704:	79fa      	ldrb	r2, [r7, #7]
 8001706:	430a      	orrs	r2, r1
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e010      	b.n	8001730 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800170e:	f643 030d 	movw	r3, #14349	; 0x380d
 8001712:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001716:	f643 020d 	movw	r2, #14349	; 0x380d
 800171a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800171e:	7812      	ldrb	r2, [r2, #0]
 8001720:	b2d1      	uxtb	r1, r2
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	ea6f 0202 	mvn.w	r2, r2
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	400a      	ands	r2, r1
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]
  }
}
 8001730:	f107 070c 	add.w	r7, r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop

0800173c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800175e:	b2db      	uxtb	r3, r3
 8001760:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d106      	bne.n	8001776 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8001768:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800176c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00f      	b.n	8001796 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d106      	bne.n	800178a <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 800177c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001780:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	e005      	b.n	8001796 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800178a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800178e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001794:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 80017b0:	f04f 0301 	mov.w	r3, #1
 80017b4:	74fb      	strb	r3, [r7, #19]
 80017b6:	e002      	b.n	80017be <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80017be:	7cfb      	ldrb	r3, [r7, #19]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	f107 071c 	add.w	r7, r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80017d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80017e2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80017e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop

080017f0 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001800:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001804:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	461a      	mov	r2, r3
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <RCC_GetITStatus+0x2c>
  {
    bitstatus = SET;
 8001814:	f04f 0301 	mov.w	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e002      	b.n	8001822 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	f107 0714 	add.w	r7, r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800183a:	f643 030e 	movw	r3, #14350	; 0x380e
 800183e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	701a      	strb	r2, [r3, #0]
}
 8001846:	f107 070c 	add.w	r7, r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001854:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001858:	f04f 0101 	mov.w	r1, #1
 800185c:	f7ff fe36 	bl	80014cc <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001860:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	f7ff fe30 	bl	80014cc <RCC_APB2PeriphResetCmd>
}
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop

08001870 <SYSCFG_MemoryRemapConfig>:
  *         registers. 
  *        
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800187a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800187e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	601a      	str	r2, [r3, #0]
}
 8001886:	f107 070c 	add.w	r7, r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001890:	b490      	push	{r4, r7}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	71fa      	strb	r2, [r7, #7]
 800189c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80018ae:	f04f 020f 	mov.w	r2, #15
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80018b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018c0:	79ba      	ldrb	r2, [r7, #6]
 80018c2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	4610      	mov	r0, r2
 80018ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018ce:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80018d2:	79b9      	ldrb	r1, [r7, #6]
 80018d4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80018d8:	b2c9      	uxtb	r1, r1
 80018da:	f101 0102 	add.w	r1, r1, #2
 80018de:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80018e2:	4611      	mov	r1, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	ea6f 0202 	mvn.w	r2, r2
 80018ea:	4011      	ands	r1, r2
 80018ec:	f100 0202 	add.w	r2, r0, #2
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80018f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018fc:	79ba      	ldrb	r2, [r7, #6]
 80018fe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	4610      	mov	r0, r2
 8001906:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800190a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800190e:	79b9      	ldrb	r1, [r7, #6]
 8001910:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8001914:	b2c9      	uxtb	r1, r1
 8001916:	f101 0102 	add.w	r1, r1, #2
 800191a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800191e:	4611      	mov	r1, r2
 8001920:	79fc      	ldrb	r4, [r7, #7]
 8001922:	79ba      	ldrb	r2, [r7, #6]
 8001924:	f002 0203 	and.w	r2, r2, #3
 8001928:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800192c:	fa04 f202 	lsl.w	r2, r4, r2
 8001930:	4311      	orrs	r1, r2
 8001932:	f100 0202 	add.w	r2, r0, #2
 8001936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800193a:	f107 0710 	add.w	r7, r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bc90      	pop	{r4, r7}
 8001942:	4770      	bx	lr

08001944 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800194c:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 8001950:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	601a      	str	r2, [r3, #0]
}
 8001958:	f107 070c 	add.w	r7, r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800196e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001972:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	f107 070c 	add.w	r7, r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8001990:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001994:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 80019a2:	f04f 0301 	mov.w	r3, #1
 80019a6:	71fb      	strb	r3, [r7, #7]
 80019a8:	e002      	b.n	80019b0 <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	f107 070c 	add.w	r7, r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80019ca:	79fa      	ldrb	r2, [r7, #7]
 80019cc:	f243 4358 	movw	r3, #13400	; 0x3458
 80019d0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80019d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d8:	4618      	mov	r0, r3
 80019da:	f04f 0101 	mov.w	r1, #1
 80019de:	f7ff fbe9 	bl	80011b4 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	f243 4350 	movw	r3, #13392	; 0x3450
 80019e8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80019ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80019f2:	f04f 0301 	mov.w	r3, #1
 80019f6:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80019fe:	f04f 0301 	mov.w	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a04:	f04f 0302 	mov.w	r3, #2
 8001a08:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	f240 0314 	movw	r3, #20
 8001a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7fe fe42 	bl	80006a8 <GPIO_Init>
}
 8001a24:	f107 0710 	add.w	r7, r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	f240 0314 	movw	r3, #20
 8001a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a44:	79f9      	ldrb	r1, [r7, #7]
 8001a46:	f243 4350 	movw	r3, #13392	; 0x3450
 8001a4a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001a4e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001a52:	8313      	strh	r3, [r2, #24]
}
 8001a54:	f107 070c 	add.w	r7, r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	f240 0314 	movw	r3, #20
 8001a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a78:	79f9      	ldrb	r1, [r7, #7]
 8001a7a:	f243 4350 	movw	r3, #13392	; 0x3450
 8001a7e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001a82:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001a86:	8353      	strh	r3, [r2, #26]
}
 8001a88:	f107 070c 	add.w	r7, r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop

08001a94 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8001a9e:	79fa      	ldrb	r2, [r7, #7]
 8001aa0:	f240 0314 	movw	r3, #20
 8001aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001aac:	79f9      	ldrb	r1, [r7, #7]
 8001aae:	f240 0314 	movw	r3, #20
 8001ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ab6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	4619      	mov	r1, r3
 8001abe:	79f8      	ldrb	r0, [r7, #7]
 8001ac0:	f243 4350 	movw	r3, #13392	; 0x3450
 8001ac4:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001ac8:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8001acc:	404b      	eors	r3, r1
 8001ace:	6153      	str	r3, [r2, #20]
}
 8001ad0:	f107 070c 	add.w	r7, r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop

08001adc <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	71fa      	strb	r2, [r7, #7]
 8001ae8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8001aea:	79fa      	ldrb	r2, [r7, #7]
 8001aec:	f243 436c 	movw	r3, #13420	; 0x346c
 8001af0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f04f 0101 	mov.w	r1, #1
 8001afe:	f7ff fb59 	bl	80011b4 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001b02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b06:	f04f 0101 	mov.w	r1, #1
 8001b0a:	f7ff fc03 	bl	8001314 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8001b1a:	79fa      	ldrb	r2, [r7, #7]
 8001b1c:	f243 4368 	movw	r3, #13416	; 0x3468
 8001b20:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001b24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8001b2a:	79fa      	ldrb	r2, [r7, #7]
 8001b2c:	f240 0324 	movw	r3, #36	; 0x24
 8001b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe fdb2 	bl	80006a8 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d13a      	bne.n	8001bc0 <STM_EVAL_PBInit+0xe4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	f243 4374 	movw	r3, #13428	; 0x3474
 8001b50:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001b54:	5c9a      	ldrb	r2, [r3, r2]
 8001b56:	79f9      	ldrb	r1, [r7, #7]
 8001b58:	f243 4378 	movw	r3, #13432	; 0x3478
 8001b5c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001b60:	5c5b      	ldrb	r3, [r3, r1]
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff fe93 	bl	8001890 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	f243 4370 	movw	r3, #13424	; 0x3470
 8001b70:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001b74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b78:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8001b80:	f04f 0308 	mov.w	r3, #8
 8001b84:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001b86:	f04f 0301 	mov.w	r3, #1
 8001b8a:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fb87 	bl	80002a4 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	f243 437c 	movw	r3, #13436	; 0x347c
 8001b9c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001ba0:	5c9b      	ldrb	r3, [r3, r2]
 8001ba2:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001ba4:	f04f 030f 	mov.w	r3, #15
 8001ba8:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001baa:	f04f 030f 	mov.w	r3, #15
 8001bae:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001bb0:	f04f 0301 	mov.w	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fa6c 	bl	8000098 <NVIC_Init>
  }
}
 8001bc0:	f107 0720 	add.w	r7, r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	f240 0324 	movw	r3, #36	; 0x24
 8001bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001be0:	79f9      	ldrb	r1, [r7, #7]
 8001be2:	f243 4368 	movw	r3, #13416	; 0x3468
 8001be6:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001bea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe fe43 	bl	800087c <GPIO_ReadInputDataBit>
 8001bf6:	4603      	mov	r3, r0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f107 0708 	add.w	r7, r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
	...

08001c10 <_ZN12AManagedTaskC1Ev>:
#include "AManagedTask.h"
#include "CFreeRTOS.h"

AManagedTask* AManagedTask::s_pManagedTaskListHead = NULL;

AManagedTask::AManagedTask() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f940 	bl	8001ea0 <_ZN5CTaskC1Ev>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <_ZN12AManagedTaskC1Ev+0x34>)
 8001c24:	601a      	str	r2, [r3, #0]
	m_pNextManagedTask = NULL;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
	AddToManagedTask(this);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	f000 f87b 	bl	8001d2c <_ZN12AManagedTask16AddToManagedTaskEPS_>
}
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f107 0708 	add.w	r7, r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08013488 	.word	0x08013488

08001c48 <_ZN12AManagedTaskD1Ev>:

AManagedTask::~AManagedTask() {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <_ZN12AManagedTaskD1Ev+0x3c>)
 8001c54:	601a      	str	r2, [r3, #0]
	RemoveFromManagedTask(this);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	f000 f88f 	bl	8001d7c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>
}
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f94e 	bl	8001f00 <_ZN5CTaskD1Ev>
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <_ZN12AManagedTaskD1Ev+0x30>
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f010 fa0c 	bl	8012090 <_ZdlPv>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f107 0708 	add.w	r7, r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	08013488 	.word	0x08013488

08001c88 <_ZN12AManagedTaskD0Ev>:
AManagedTask::AManagedTask() {
	m_pNextManagedTask = NULL;
	AddToManagedTask(this);
}

AManagedTask::~AManagedTask() {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	RemoveFromManagedTask(this);
}
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffd9 	bl	8001c48 <_ZN12AManagedTaskD1Ev>
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f010 f9fa 	bl	8012090 <_ZdlPv>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f107 0708 	add.w	r7, r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_ZN12AManagedTask6CreateEPKctm>:

portBASE_TYPE AManagedTask::Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) {
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	80fb      	strh	r3, [r7, #6]
	return OnCreate(pcName, usStackDepth, uxPriority) &&
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f103 031c 	add.w	r3, r3, #28
 8001cc0:	681c      	ldr	r4, [r3, #0]
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	47a0      	blx	r4
 8001cce:	4603      	mov	r3, r0
			CTask::Create(AManagedTask::taskControlFunc, pcName, usStackDepth, this, uxPriority);
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <_ZN12AManagedTask6CreateEPKctm+0x54>
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	9100      	str	r1, [sp, #0]
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	9101      	str	r1, [sp, #4]
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	f641 510d 	movw	r1, #7437	; 0x1d0d
 8001ce6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f000 f964 	bl	8001fb8 <_ZN5CTask6CreateEPFvPvEPKctS0_m>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <_ZN12AManagedTask6CreateEPKctm+0x54>
 8001cf6:	f04f 0301 	mov.w	r3, #1
 8001cfa:	e001      	b.n	8001d00 <_ZN12AManagedTask6CreateEPKctm+0x58>
 8001cfc:	f04f 0300 	mov.w	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	f107 0714 	add.w	r7, r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop

08001d0c <_ZN12AManagedTask15taskControlFuncEPv>:

void AManagedTask::taskControlFunc(void *pParams) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	static_cast<AManagedTask *>(pParams)->Run();
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f103 0318 	add.w	r3, r3, #24
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
}
 8001d22:	f107 0708 	add.w	r7, r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop

08001d2c <_ZN12AManagedTask16AddToManagedTaskEPS_>:

void AManagedTask::AddToManagedTask(AManagedTask *pTaskToAdd) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	EnterCritical();
 8001d36:	f010 f91b 	bl	8011f70 <_ZN5CTask13EnterCriticalEv>
	// is the first element?
	if (s_pManagedTaskListHead == NULL) {
 8001d3a:	f640 132c 	movw	r3, #2348	; 0x92c
 8001d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d106      	bne.n	8001d56 <_ZN12AManagedTask16AddToManagedTaskEPS_+0x2a>
		s_pManagedTaskListHead = this;
 8001d48:	f640 132c 	movw	r3, #2348	; 0x92c
 8001d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e00c      	b.n	8001d70 <_ZN12AManagedTask16AddToManagedTaskEPS_+0x44>
	}
	else {
		// add the task to the head of the managed task list.
		m_pNextManagedTask = s_pManagedTaskListHead;
 8001d56:	f640 132c 	movw	r3, #2348	; 0x92c
 8001d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
		s_pManagedTaskListHead = this;
 8001d64:	f640 132c 	movw	r3, #2348	; 0x92c
 8001d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	601a      	str	r2, [r3, #0]
	}
	ExitCritical();
 8001d70:	f010 f906 	bl	8011f80 <_ZN5CTask12ExitCriticalEv>
}
 8001d74:	f107 0708 	add.w	r7, r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>:

void AManagedTask::RemoveFromManagedTask(AManagedTask *pTaskToRemove) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
	// search for the task to remove in the managed task list
	// is it the first element?
	EnterCritical();
 8001d86:	f010 f8f3 	bl	8011f70 <_ZN5CTask13EnterCriticalEv>
	if (pTaskToRemove == s_pManagedTaskListHead) {
 8001d8a:	f640 132c 	movw	r3, #2348	; 0x92c
 8001d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d109      	bne.n	8001dae <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x32>
		s_pManagedTaskListHead = pTaskToRemove->m_pNextManagedTask;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	f640 132c 	movw	r3, #2348	; 0x92c
 8001da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001da6:	601a      	str	r2, [r3, #0]
		ExitCritical();
 8001da8:	f010 f8ea 	bl	8011f80 <_ZN5CTask12ExitCriticalEv>
 8001dac:	e025      	b.n	8001dfa <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7e>
	}
	else {
		ExitCritical();
 8001dae:	f010 f8e7 	bl	8011f80 <_ZN5CTask12ExitCriticalEv>
		CFreeRTOS::SuspendAllTasks();
 8001db2:	f010 f93d 	bl	8012030 <_ZN9CFreeRTOS15SuspendAllTasksEv>
		AManagedTask *pTask = s_pManagedTaskListHead;
 8001db6:	f640 132c 	movw	r3, #2348	; 0x92c
 8001dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 8001dc2:	e002      	b.n	8001dca <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x4e>
			pTask = pTask->m_pNextManagedTask;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	60fb      	str	r3, [r7, #12]
	}
	else {
		ExitCritical();
		CFreeRTOS::SuspendAllTasks();
		AManagedTask *pTask = s_pManagedTaskListHead;
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d002      	beq.n	8001de0 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 8001dda:	f04f 0301 	mov.w	r3, #1
 8001dde:	e001      	b.n	8001de4 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x68>
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ed      	bne.n	8001dc4 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x48>
			pTask = pTask->m_pNextManagedTask;
		}
		if (pTask != NULL) { // Check to be sure that the task is in the list
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7a>
			// remove the thask from the list
			pTask->m_pNextManagedTask = pTaskToRemove->m_pNextManagedTask;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	609a      	str	r2, [r3, #8]
		}
		CFreeRTOS::ResumeAllTasks();
 8001df6:	f010 f923 	bl	8012040 <_ZN9CFreeRTOS14ResumeAllTasksEv>
	}
}
 8001dfa:	f107 0710 	add.w	r7, r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop

08001e04 <_ZN12AManagedTask27InitHardwareForManagedTasksEv>:

bool AManagedTask::InitHardwareForManagedTasks() {
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
	bool bRes = true;
 8001e0a:	f04f 0301 	mov.w	r3, #1
 8001e0e:	71fb      	strb	r3, [r7, #7]
	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 8001e10:	f640 132c 	movw	r3, #2348	; 0x92c
 8001e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	e011      	b.n	8001e42 <_ZN12AManagedTask27InitHardwareForManagedTasksEv+0x3e>
		bRes &= pTask->HardwareInit();
 8001e1e:	79fc      	ldrb	r4, [r7, #7]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f103 0314 	add.w	r3, r3, #20
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6838      	ldr	r0, [r7, #0]
 8001e2c:	4798      	blx	r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4023      	ands	r3, r4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf0c      	ite	eq
 8001e36:	2300      	moveq	r3, #0
 8001e38:	2301      	movne	r3, #1
 8001e3a:	71fb      	strb	r3, [r7, #7]
	}
}

bool AManagedTask::InitHardwareForManagedTasks() {
	bool bRes = true;
	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1e5      	bne.n	8001e1e <_ZN12AManagedTask27InitHardwareForManagedTasksEv+0x1a>
		bRes &= pTask->HardwareInit();

	return bRes;
 8001e52:	79fb      	ldrb	r3, [r7, #7]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	f107 070c 	add.w	r7, r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	bf00      	nop

08001e60 <_ZN9CFreeRTOSC1Ev>:
 */

#include "CFreeRTOS.h"
#include "AManagedTask.h"

CFreeRTOS::CFreeRTOS() {
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f107 070c 	add.w	r7, r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop

08001e78 <_ZN9CFreeRTOSD1Ev>:

CFreeRTOS::~CFreeRTOS() {
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f107 070c 	add.w	r7, r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <_ZN9CFreeRTOS27InitHardwareForManagedTasksEv>:

bool CFreeRTOS::InitHardwareForManagedTasks() {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	return AManagedTask::InitHardwareForManagedTasks();
 8001e94:	f7ff ffb6 	bl	8001e04 <_ZN12AManagedTask27InitHardwareForManagedTasksEv>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop

08001ea0 <_ZN5CTaskC1Ev>:

#include "CTask.h"
#include <assert.h>


CTask::CTask() {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f010 f8d0 	bl	8012050 <_ZN12IFreeRTOSObjC1Ev>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <_ZN5CTaskC1Ev+0x2c>)
 8001eb4:	601a      	str	r2, [r3, #0]
	m_handleTask = NULL;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
}
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f107 0708 	add.w	r7, r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	080134e8 	.word	0x080134e8

08001ed0 <_ZN5CTaskC1EPv>:

CTask::CTask(xTaskHandle handleTask) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f010 f8b7 	bl	8012050 <_ZN12IFreeRTOSObjC1Ev>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a05      	ldr	r2, [pc, #20]	; (8001efc <_ZN5CTaskC1EPv+0x2c>)
 8001ee6:	601a      	str	r2, [r3, #0]
	Attach(handleTask);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	f000 f83a 	bl	8001f64 <_ZN5CTask6AttachEPv>
}
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f107 0708 	add.w	r7, r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	080134e8 	.word	0x080134e8

08001f00 <_ZN5CTaskD1Ev>:

CTask::~CTask() {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <_ZN5CTaskD1Ev+0x40>)
 8001f0c:	601a      	str	r2, [r3, #0]
	if (IsValid())
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f010 f83e 	bl	8011f90 <_ZNK5CTask7IsValidEv>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <_ZN5CTaskD1Ev+0x20>
		Delete();
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f88a 	bl	8002034 <_ZN5CTask6DeleteEv>
}
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <_ZN5CTaskD1Ev+0x34>
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f010 f8ae 	bl	8012090 <_ZdlPv>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f107 0708 	add.w	r7, r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	080134e8 	.word	0x080134e8

08001f44 <_ZN5CTaskD0Ev>:

CTask::CTask(xTaskHandle handleTask) {
	Attach(handleTask);
}

CTask::~CTask() {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	if (IsValid())
		Delete();
}
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ffd7 	bl	8001f00 <_ZN5CTaskD1Ev>
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f010 f89c 	bl	8012090 <_ZdlPv>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f107 0708 	add.w	r7, r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_ZN5CTask6AttachEPv>:

void CTask::Attach(xGenericHandle handle) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
	assert(handle != NULL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10f      	bne.n	8001f94 <_ZN5CTask6AttachEPv+0x30>
 8001f74:	f243 40b0 	movw	r0, #13488	; 0x34b0
 8001f78:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001f7c:	f04f 011b 	mov.w	r1, #27
 8001f80:	f243 42fc 	movw	r2, #13564	; 0x34fc
 8001f84:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001f88:	f243 43d0 	movw	r3, #13520	; 0x34d0
 8001f8c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001f90:	f008 fd8e 	bl	800aab0 <__assert_func>

	if (IsValid()) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <_ZN5CTask6AttachEPv+0x46>
		Delete();
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f845 	bl	8002034 <_ZN5CTask6DeleteEv>
	}
	m_handleTask = handle;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	605a      	str	r2, [r3, #4]
}
 8001fb0:	f107 0708 	add.w	r7, r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ZN5CTask6CreateEPFvPvEPKctS0_m>:

portBASE_TYPE CTask::Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af04      	add	r7, sp, #16
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	807b      	strh	r3, [r7, #2]
	portBASE_TYPE res;
	xTaskHandle handle;
	res = xTaskCreate(pvTaskCode, (const signed char*)pcName, usStackDepth, pvParameters, uxPriority, &handle);
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fca:	9200      	str	r2, [sp, #0]
 8001fcc:	f107 0210 	add.w	r2, r7, #16
 8001fd0:	9201      	str	r2, [sp, #4]
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	9202      	str	r2, [sp, #8]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	9203      	str	r2, [sp, #12]
 8001fde:	68b8      	ldr	r0, [r7, #8]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f000 fa23 	bl	8002430 <xTaskGenericCreate>
 8001fea:	4603      	mov	r3, r0
 8001fec:	617b      	str	r3, [r7, #20]
	if (res == pdTRUE)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d108      	bne.n	8002006 <_ZN5CTask6CreateEPFvPvEPKctS0_m+0x4e>
		Attach(handle);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f103 0304 	add.w	r3, r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	4611      	mov	r1, r2
 8002004:	4798      	blx	r3

	return res;
 8002006:	697b      	ldr	r3, [r7, #20]
}
 8002008:	4618      	mov	r0, r3
 800200a:	f107 0718 	add.w	r7, r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop

08002014 <_ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS>:

portBASE_TYPE CTask::CreateRestricted(xTaskParameters *pxTaskDefinition)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	portBASE_TYPE res = pdFALSE;
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
	res = xTaskCreateRestricted(pxTaskDefinition, &handle);
	if (res == pdTRUE)
		Attach(handle);
#endif

	return res;
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	4618      	mov	r0, r3
 8002028:	f107 0714 	add.w	r7, r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <_ZN5CTask6DeleteEv>:


void CTask::Delete() {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	if (m_handleTask != NULL) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <_ZN5CTask6DeleteEv+0x22>
#if ( INCLUDE_vTaskDelete == 1 )
		vTaskDelete(m_handleTask);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fac7 	bl	80025dc <vTaskDelete>
#else
		vTaskSuspend(m_handleTask);
#endif
		m_handleTask = NULL;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
	}
}
 8002056:	f107 0708 	add.w	r7, r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop

08002060 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f1a3 0304 	sub.w	r3, r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800207a:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f1a3 0304 	sub.w	r3, r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1a3 0304 	sub.w	r3, r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1a3 0314 	sub.w	r3, r3, #20
 80020a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
 80020ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f06f 0202 	mvn.w	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
	return pxTopOfStack;
 80020b8:	68fb      	ldr	r3, [r7, #12]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	f107 0714 	add.w	r7, r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop

080020c8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <pxCurrentTCBConst2>)
 80020ca:	6819      	ldr	r1, [r3, #0]
 80020cc:	6808      	ldr	r0, [r1, #0]
 80020ce:	f850 eb04 	ldr.w	lr, [r0], #4
 80020d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80020d6:	f380 8809 	msr	PSP, r0
 80020da:	f04f 0000 	mov.w	r0, #0
 80020de:	f380 8811 	msr	BASEPRI, r0
 80020e2:	4770      	bx	lr

080020e4 <pxCurrentTCBConst2>:
 80020e4:	20000930 	.word	0x20000930

080020e8 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 80020e8:	486e      	ldr	r0, [pc, #440]	; (80022a4 <prvSetupTimerInterrupt+0x40>)
 80020ea:	6800      	ldr	r0, [r0, #0]
 80020ec:	6800      	ldr	r0, [r0, #0]
 80020ee:	f380 8808 	msr	MSP, r0
 80020f2:	b662      	cpsie	i
 80020f4:	df00      	svc	0
 80020f6:	bf00      	nop

080020f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80020fc:	f64e 5320 	movw	r3, #60704	; 0xed20
 8002100:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002104:	f64e 5220 	movw	r2, #60704	; 0xed20
 8002108:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 8002112:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002114:	f64e 5320 	movw	r3, #60704	; 0xed20
 8002118:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800211c:	f64e 5220 	movw	r2, #60704	; 0xed20
 8002120:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800212a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800212c:	f000 f89a 	bl	8002264 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002130:	f240 0328 	movw	r3, #40	; 0x28
 8002134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800213e:	f7ff ffd3 	bl	80020e8 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8002142:	f04f 0300 	mov.w	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop

0800214c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM4F port will require this function as there
	is nothing to return to.  */
}
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop

08002158 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800215c:	f64e 5304 	movw	r3, #60676	; 0xed04
 8002160:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002168:	601a      	str	r2, [r3, #0]
}
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002174:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8002178:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 800217c:	f240 0328 	movw	r3, #40	; 0x28
 8002180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f103 0201 	add.w	r2, r3, #1
 800218a:	f240 0328 	movw	r3, #40	; 0x28
 800218e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 80021a0:	f240 0328 	movw	r3, #40	; 0x28
 80021a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f103 32ff 	add.w	r2, r3, #4294967295
 80021ae:	f240 0328 	movw	r3, #40	; 0x28
 80021b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021b6:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80021b8:	f240 0328 	movw	r3, #40	; 0x28
 80021bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 80021c6:	f04f 0000 	mov.w	r0, #0
 80021ca:	f380 8811 	msr	BASEPRI, r0
	}
}
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80021d4:	f3ef 8009 	mrs	r0, PSP
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <pxCurrentTCBConst>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80021e0:	f01e 0f10 	tst.w	lr, #16
 80021e4:	bf08      	it	eq
 80021e6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80021ea:	f840 ed04 	str.w	lr, [r0, #-4]!
 80021ee:	6010      	str	r0, [r2, #0]
 80021f0:	e92d 4008 	stmdb	sp!, {r3, lr}
 80021f4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80021f8:	f380 8811 	msr	BASEPRI, r0
 80021fc:	f001 f804 	bl	8003208 <vTaskSwitchContext>
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f380 8811 	msr	BASEPRI, r0
 8002208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	6808      	ldr	r0, [r1, #0]
 8002210:	f850 eb04 	ldr.w	lr, [r0], #4
 8002214:	f01e 0f10 	tst.w	lr, #16
 8002218:	bf08      	it	eq
 800221a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800221e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002222:	f380 8809 	msr	PSP, r0
 8002226:	4770      	bx	lr

08002228 <pxCurrentTCBConst>:
 8002228:	20000930 	.word	0x20000930

0800222c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
    unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002232:	f64e 5304 	movw	r3, #60676	; 0xed04
 8002236:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800223a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223e:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800224a:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 800224e:	f000 fe9f 	bl	8002f90 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8002252:	f04f 0000 	mov.w	r0, #0
 8002256:	f380 8811 	msr	BASEPRI, r0
}
 800225a:	f107 0708 	add.w	r7, r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop

08002264 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002268:	f24e 0314 	movw	r3, #57364	; 0xe014
 800226c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002270:	f240 0234 	movw	r2, #52	; 0x34
 8002274:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002278:	6811      	ldr	r1, [r2, #0]
 800227a:	f248 521f 	movw	r2, #34079	; 0x851f
 800227e:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 8002282:	fba2 0201 	umull	r0, r2, r2, r1
 8002286:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800228a:	f102 32ff 	add.w	r2, r2, #4294967295
 800228e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002290:	f24e 0310 	movw	r3, #57360	; 0xe010
 8002294:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002298:	f04f 0207 	mov.w	r2, #7
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	e000ed08 	.word	0xe000ed08
	...

080022b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 0208 	add.w	r2, r3, #8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295
 80022c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f103 0208 	add.w	r2, r3, #8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f103 0208 	add.w	r2, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
}
 80022e6:	f107 070c 	add.w	r7, r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
}
 8002300:	f107 070c 	add.w	r7, r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop

0800230c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	461a      	mov	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f103 0201 	add.w	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	f107 0714 	add.w	r7, r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop

08002360 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d103      	bne.n	8002380 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e00e      	b.n	800239e <vListInsert+0x3e>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f103 0308 	add.w	r3, r3, #8
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e002      	b.n	8002390 <vListInsert+0x30>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	d9f5      	bls.n	800238a <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f103 0201 	add.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
}
 80023ce:	f107 0714 	add.w	r7, r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6892      	ldr	r2, [r2, #8]
 80023e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6852      	ldr	r2, [r2, #4]
 80023f2:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	d103      	bne.n	800240c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f103 32ff 	add.w	r2, r3, #4294967295
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	601a      	str	r2, [r3, #0]
}
 8002420:	f107 0714 	add.w	r7, r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	0000      	movs	r0, r0
	...

08002430 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	4618      	mov	r0, r3
 8002444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002446:	f001 f9cd 	bl	80037e4 <prvAllocateTCBAndStack>
 800244a:	4603      	mov	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a5 	beq.w	80025a0 <xTaskGenericCreate+0x170>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002460:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f023 0307 	bic.w	r3, r3, #7
 800246e:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	69b8      	ldr	r0, [r7, #24]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	f001 f88a 	bl	8003594 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	f7ff fdeb 	bl	8002060 <pxPortInitialiseStack>
 800248a:	4602      	mov	r2, r0
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <xTaskGenericCreate+0x6c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 800249c:	f7ff fe68 	bl	8002170 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80024a0:	f640 230c 	movw	r3, #2572	; 0xa0c
 80024a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f103 0201 	add.w	r2, r3, #1
 80024ae:	f640 230c 	movw	r3, #2572	; 0xa0c
 80024b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024b6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80024b8:	f640 1330 	movw	r3, #2352	; 0x930
 80024bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10f      	bne.n	80024e6 <xTaskGenericCreate+0xb6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80024c6:	f640 1330 	movw	r3, #2352	; 0x930
 80024ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80024d2:	f640 230c 	movw	r3, #2572	; 0xa0c
 80024d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d118      	bne.n	8002512 <xTaskGenericCreate+0xe2>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80024e0:	f001 f89c 	bl	800361c <prvInitialiseTaskLists>
 80024e4:	e015      	b.n	8002512 <xTaskGenericCreate+0xe2>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80024e6:	f640 231c 	movw	r3, #2588	; 0xa1c
 80024ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10e      	bne.n	8002512 <xTaskGenericCreate+0xe2>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80024f4:	f640 1330 	movw	r3, #2352	; 0x930
 80024f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	429a      	cmp	r2, r3
 8002504:	d805      	bhi.n	8002512 <xTaskGenericCreate+0xe2>
					{
						pxCurrentTCB = pxNewTCB;
 8002506:	f640 1330 	movw	r3, #2352	; 0x930
 800250a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002516:	f640 2314 	movw	r3, #2580	; 0xa14
 800251a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d906      	bls.n	8002532 <xTaskGenericCreate+0x102>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	f640 2314 	movw	r3, #2580	; 0xa14
 800252c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002530:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8002532:	f640 2330 	movw	r3, #2608	; 0xa30
 8002536:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f103 0201 	add.w	r2, r3, #1
 8002540:	f640 2330 	movw	r3, #2608	; 0xa30
 8002544:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002548:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	f640 2318 	movw	r3, #2584	; 0xa18
 8002552:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d906      	bls.n	800256a <xTaskGenericCreate+0x13a>
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002560:	f640 2318 	movw	r3, #2584	; 0xa18
 8002564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256e:	4613      	mov	r3, r2
 8002570:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002574:	189b      	adds	r3, r3, r2
 8002576:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800257a:	461a      	mov	r2, r3
 800257c:	f640 1334 	movw	r3, #2356	; 0x934
 8002580:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002584:	18d2      	adds	r2, r2, r3
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f103 0304 	add.w	r3, r3, #4
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	f7ff febc 	bl	800230c <vListInsertEnd>

			xReturn = pdPASS;
 8002594:	f04f 0301 	mov.w	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800259a:	f7ff fdff 	bl	800219c <vPortExitCritical>
 800259e:	e002      	b.n	80025a6 <xTaskGenericCreate+0x176>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295
 80025a4:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d111      	bne.n	80025d0 <xTaskGenericCreate+0x1a0>
	{
		if( xSchedulerRunning != pdFALSE )
 80025ac:	f640 231c 	movw	r3, #2588	; 0xa1c
 80025b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <xTaskGenericCreate+0x1a0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80025ba:	f640 1330 	movw	r3, #2352	; 0x930
 80025be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d201      	bcs.n	80025d0 <xTaskGenericCreate+0x1a0>
			{
				portYIELD_WITHIN_API();
 80025cc:	f7ff fdc4 	bl	8002158 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 80025d0:	69fb      	ldr	r3, [r7, #28]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	f107 0720 	add.w	r7, r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 80025e4:	f7ff fdc4 	bl	8002170 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
 80025e8:	f640 1330 	movw	r3, #2352	; 0x930
 80025ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d102      	bne.n	80025fe <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <vTaskDelete+0x34>
 8002604:	f640 1330 	movw	r3, #2352	; 0x930
 8002608:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	e000      	b.n	8002612 <vTaskDelete+0x36>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f103 0304 	add.w	r3, r3, #4
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fedc 	bl	80023d8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f103 0318 	add.w	r3, r3, #24
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fed2 	bl	80023d8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f103 0304 	add.w	r3, r3, #4
 800263a:	f640 10dc 	movw	r0, #2524	; 0x9dc
 800263e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002642:	4619      	mov	r1, r3
 8002644:	f7ff fe62 	bl	800230c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8002648:	f640 13f0 	movw	r3, #2544	; 0x9f0
 800264c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f103 0201 	add.w	r2, r3, #1
 8002656:	f640 13f0 	movw	r3, #2544	; 0x9f0
 800265a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800265e:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8002660:	f640 2330 	movw	r3, #2608	; 0xa30
 8002664:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f103 0201 	add.w	r2, r3, #1
 800266e:	f640 2330 	movw	r3, #2608	; 0xa30
 8002672:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002676:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002678:	f7ff fd90 	bl	800219c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 800267c:	f640 231c 	movw	r3, #2588	; 0xa1c
 8002680:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
 8002690:	f7ff fd62 	bl	8002158 <vPortYieldFromISR>
			}
		}
	}
 8002694:	f107 0710 	add.w	r7, r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
 80026ac:	f000 fabc 	bl	8002c28 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	18d3      	adds	r3, r2, r3
 80026b8:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	f640 2310 	movw	r3, #2576	; 0xa10
 80026c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d910      	bls.n	80026ee <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d91b      	bls.n	800270e <vTaskDelayUntil+0x72>
 80026d6:	f640 2310 	movw	r3, #2576	; 0xa10
 80026da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d913      	bls.n	800270e <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 80026e6:	f04f 0301 	mov.w	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e00f      	b.n	800270e <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d807      	bhi.n	8002708 <vTaskDelayUntil+0x6c>
 80026f8:	f640 2310 	movw	r3, #2576	; 0xa10
 80026fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	429a      	cmp	r2, r3
 8002706:	d902      	bls.n	800270e <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8002708:	f04f 0301 	mov.w	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800271a:	f640 1330 	movw	r3, #2352	; 0x930
 800271e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f103 0304 	add.w	r3, r3, #4
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fe55 	bl	80023d8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800272e:	6938      	ldr	r0, [r7, #16]
 8002730:	f001 f812 	bl	8003758 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002734:	f000 fa8a 	bl	8002c4c <xTaskResumeAll>
 8002738:	4603      	mov	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 8002742:	f7ff fd09 	bl	8002158 <vPortYieldFromISR>
		}
	}
 8002746:	f107 0718 	add.w	r7, r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop

08002750 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01a      	beq.n	800279a <vTaskDelay+0x4a>
		{
			vTaskSuspendAll();
 8002764:	f000 fa60 	bl	8002c28 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002768:	f640 2310 	movw	r3, #2576	; 0xa10
 800276c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002778:	f640 1330 	movw	r3, #2352	; 0x930
 800277c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f103 0304 	add.w	r3, r3, #4
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fe26 	bl	80023d8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800278c:	68b8      	ldr	r0, [r7, #8]
 800278e:	f000 ffe3 	bl	8003758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002792:	f000 fa5b 	bl	8002c4c <xTaskResumeAll>
 8002796:	4603      	mov	r3, r0
 8002798:	60fb      	str	r3, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <vTaskDelay+0x54>
		{
			portYIELD_WITHIN_API();
 80027a0:	f7ff fcda 	bl	8002158 <vPortYieldFromISR>
		}
	}
 80027a4:	f107 0710 	add.w	r7, r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
 80027b4:	f7ff fcdc 	bl	8002170 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <uxTaskPriorityGet+0x1e>
 80027be:	f640 1330 	movw	r3, #2352	; 0x930
 80027c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	e000      	b.n	80027cc <uxTaskPriorityGet+0x20>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 80027d4:	f7ff fce2 	bl	800219c <vPortExitCritical>

		return uxReturn;
 80027d8:	68bb      	ldr	r3, [r7, #8]
	}
 80027da:	4618      	mov	r0, r3
 80027dc:	f107 0710 	add.w	r7, r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d902      	bls.n	8002800 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 80027fa:	f04f 0304 	mov.w	r3, #4
 80027fe:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
 8002800:	f7ff fcb6 	bl	8002170 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
 8002804:	f640 1330 	movw	r3, #2352	; 0x930
 8002808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	d102      	bne.n	800281a <vTaskPrioritySet+0x36>
			{
				pxTask = NULL;
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <vTaskPrioritySet+0x48>
 8002820:	f640 1330 	movw	r3, #2352	; 0x930
 8002824:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e000      	b.n	800282e <vTaskPrioritySet+0x4a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d062      	beq.n	8002904 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	429a      	cmp	r2, r3
 8002844:	d906      	bls.n	8002854 <vTaskPrioritySet+0x70>
				{
					if( pxTask != NULL )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d009      	beq.n	8002860 <vTaskPrioritySet+0x7c>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
 800284c:	f04f 0301 	mov.w	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e005      	b.n	8002860 <vTaskPrioritySet+0x7c>
					}
				}
				else if( pxTask == NULL )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <vTaskPrioritySet+0x7c>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
 800285a:	f04f 0301 	mov.w	r3, #1
 800285e:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	429a      	cmp	r2, r3
 800286a:	d102      	bne.n	8002872 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f1c3 0205 	rsb	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6959      	ldr	r1, [r3, #20]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800288e:	189b      	adds	r3, r3, r2
 8002890:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002894:	461a      	mov	r2, r3
 8002896:	f640 1334 	movw	r3, #2356	; 0x934
 800289a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800289e:	18d3      	adds	r3, r2, r3
 80028a0:	4299      	cmp	r1, r3
 80028a2:	d12a      	bne.n	80028fa <vTaskPrioritySet+0x116>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f103 0304 	add.w	r3, r3, #4
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fd94 	bl	80023d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	f640 2318 	movw	r3, #2584	; 0xa18
 80028b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d906      	bls.n	80028d0 <vTaskPrioritySet+0xec>
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	f640 2318 	movw	r3, #2584	; 0xa18
 80028ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	4613      	mov	r3, r2
 80028d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028da:	189b      	adds	r3, r3, r2
 80028dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	f640 1334 	movw	r3, #2356	; 0x934
 80028e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ea:	18d2      	adds	r2, r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f103 0304 	add.w	r3, r3, #4
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f7ff fd09 	bl	800230c <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <vTaskPrioritySet+0x120>
				{
					portYIELD_WITHIN_API();
 8002900:	f7ff fc2a 	bl	8002158 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
 8002904:	f7ff fc4a 	bl	800219c <vPortExitCritical>
	}
 8002908:	f107 0718 	add.w	r7, r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8002918:	f7ff fc2a 	bl	8002170 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
 800291c:	f640 1330 	movw	r3, #2352	; 0x930
 8002920:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d102      	bne.n	8002932 <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <vTaskSuspend+0x34>
 8002938:	f640 1330 	movw	r3, #2352	; 0x930
 800293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e000      	b.n	8002946 <vTaskSuspend+0x36>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f103 0304 	add.w	r3, r3, #4
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fd42 	bl	80023d8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f103 0318 	add.w	r3, r3, #24
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fd38 	bl	80023d8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f103 0304 	add.w	r3, r3, #4
 800296e:	f640 10f4 	movw	r0, #2548	; 0x9f4
 8002972:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002976:	4619      	mov	r1, r3
 8002978:	f7ff fcc8 	bl	800230c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 800297c:	f7ff fc0e 	bl	800219c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d120      	bne.n	80029c8 <vTaskSuspend+0xb8>
		{
			if( xSchedulerRunning != pdFALSE )
 8002986:	f640 231c 	movw	r3, #2588	; 0xa1c
 800298a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
 8002994:	f7ff fbe0 	bl	8002158 <vPortYieldFromISR>
 8002998:	e016      	b.n	80029c8 <vTaskSuspend+0xb8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800299a:	f640 13f4 	movw	r3, #2548	; 0x9f4
 800299e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f640 230c 	movw	r3, #2572	; 0xa0c
 80029aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d107      	bne.n	80029c4 <vTaskSuspend+0xb4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 80029b4:	f640 1330 	movw	r3, #2352	; 0x930
 80029b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e001      	b.n	80029c8 <vTaskSuspend+0xb8>
				}
				else
				{
					vTaskSwitchContext();
 80029c4:	f000 fc20 	bl	8003208 <vTaskSwitchContext>
				}
			}
		}
	}
 80029c8:	f107 0710 	add.w	r7, r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	f640 13f4 	movw	r3, #2548	; 0x9f4
 80029ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d10e      	bne.n	8002a10 <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f6:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80029fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d006      	beq.n	8002a10 <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
 8002a0a:	f04f 0301 	mov.w	r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 8002a10:	68fb      	ldr	r3, [r7, #12]
	}
 8002a12:	4618      	mov	r0, r3
 8002a14:	f107 0714 	add.w	r7, r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop

08002a20 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d048      	beq.n	8002ac4 <vTaskResume+0xa4>
 8002a32:	f640 1330 	movw	r3, #2352	; 0x930
 8002a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d040      	beq.n	8002ac4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8002a42:	f7ff fb95 	bl	8002170 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff ffc2 	bl	80029d0 <xTaskIsTaskSuspended>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d136      	bne.n	8002ac0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f103 0304 	add.w	r3, r3, #4
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fcbd 	bl	80023d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a62:	f640 2318 	movw	r3, #2584	; 0xa18
 8002a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d906      	bls.n	8002a7e <vTaskResume+0x5e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	f640 2318 	movw	r3, #2584	; 0xa18
 8002a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	4613      	mov	r3, r2
 8002a84:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f640 1334 	movw	r3, #2356	; 0x934
 8002a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a98:	18d2      	adds	r2, r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f103 0304 	add.w	r3, r3, #4
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f7ff fc32 	bl	800230c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	f640 1330 	movw	r3, #2352	; 0x930
 8002ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d301      	bcc.n	8002ac0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8002abc:	f7ff fb4c 	bl	8002158 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
 8002ac0:	f7ff fb6c 	bl	800219c <vPortExitCritical>
		}
	}
 8002ac4:	f107 0710 	add.w	r7, r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	60bb      	str	r3, [r7, #8]

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8002ade:	68b8      	ldr	r0, [r7, #8]
 8002ae0:	f7ff ff76 	bl	80029d0 <xTaskIsTaskSuspended>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d149      	bne.n	8002b7e <xTaskResumeFromISR+0xb2>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002aea:	f640 2320 	movw	r3, #2592	; 0xa20
 8002aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d138      	bne.n	8002b6a <xTaskResumeFromISR+0x9e>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	f640 1330 	movw	r3, #2352	; 0x930
 8002b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	bf34      	ite	cc
 8002b0c:	2300      	movcc	r3, #0
 8002b0e:	2301      	movcs	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
				vListRemove(  &( pxTCB->xGenericListItem ) );
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f103 0304 	add.w	r3, r3, #4
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fc5d 	bl	80023d8 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b22:	f640 2318 	movw	r3, #2584	; 0xa18
 8002b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d906      	bls.n	8002b3e <xTaskResumeFromISR+0x72>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	f640 2318 	movw	r3, #2584	; 0xa18
 8002b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b42:	4613      	mov	r3, r2
 8002b44:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b48:	189b      	adds	r3, r3, r2
 8002b4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f640 1334 	movw	r3, #2356	; 0x934
 8002b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b58:	18d2      	adds	r2, r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f103 0304 	add.w	r3, r3, #4
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f7ff fbd2 	bl	800230c <vListInsertEnd>
 8002b68:	e009      	b.n	8002b7e <xTaskResumeFromISR+0xb2>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f103 0318 	add.w	r3, r3, #24
 8002b70:	f640 10c8 	movw	r0, #2504	; 0x9c8
 8002b74:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7ff fbc7 	bl	800230c <vListInsertEnd>
			}
		}

		return xYieldRequired;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
	}
 8002b80:	4618      	mov	r0, r3
 8002b82:	f107 0710 	add.w	r7, r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop

08002b8c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f640 2308 	movw	r3, #2568	; 0xa08
 8002b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	9302      	str	r3, [sp, #8]
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	9303      	str	r3, [sp, #12]
 8002bae:	f243 5071 	movw	r0, #13681	; 0x3571
 8002bb2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002bb6:	f243 5130 	movw	r1, #13616	; 0x3530
 8002bba:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	f7ff fc33 	bl	8002430 <xTaskGenericCreate>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	607b      	str	r3, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d115      	bne.n	8002c00 <vTaskStartScheduler+0x74>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8002bd4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8002bd8:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8002bdc:	f640 231c 	movw	r3, #2588	; 0xa1c
 8002be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002be4:	f04f 0201 	mov.w	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8002bea:	f640 2310 	movw	r3, #2576	; 0xa10
 8002bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8002bf8:	f001 fac6 	bl	8004188 <init_us_timer>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bfc:	f7ff fa7c 	bl	80020f8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 8002c00:	f107 0708 	add.w	r7, r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
 8002c0c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8002c10:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
 8002c14:	f640 231c 	movw	r3, #2588	; 0xa1c
 8002c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8002c22:	f7ff fa93 	bl	800214c <vPortEndScheduler>
}
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8002c2c:	f640 2320 	movw	r3, #2592	; 0xa20
 8002c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f103 0201 	add.w	r2, r3, #1
 8002c3a:	f640 2320 	movw	r3, #2592	; 0xa20
 8002c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c42:	601a      	str	r2, [r3, #0]
}
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop

08002c4c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c58:	f7ff fa8a 	bl	8002170 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c5c:	f640 2320 	movw	r3, #2592	; 0xa20
 8002c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f103 32ff 	add.w	r2, r3, #4294967295
 8002c6a:	f640 2320 	movw	r3, #2592	; 0xa20
 8002c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c72:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002c74:	f640 2320 	movw	r3, #2592	; 0xa20
 8002c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8086 	bne.w	8002d90 <xTaskResumeAll+0x144>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8002c84:	f640 230c 	movw	r3, #2572	; 0xa0c
 8002c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d07e      	beq.n	8002d90 <xTaskResumeAll+0x144>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002c98:	e03d      	b.n	8002d16 <xTaskResumeAll+0xca>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8002c9a:	f640 13c8 	movw	r3, #2504	; 0x9c8
 8002c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
 8002ca8:	f104 0318 	add.w	r3, r4, #24
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fb93 	bl	80023d8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8002cb2:	f104 0304 	add.w	r3, r4, #4
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fb8e 	bl	80023d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8002cbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cbe:	f640 2318 	movw	r3, #2584	; 0xa18
 8002cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d905      	bls.n	8002cd8 <xTaskResumeAll+0x8c>
 8002ccc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cce:	f640 2318 	movw	r3, #2584	; 0xa18
 8002cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cda:	4613      	mov	r3, r2
 8002cdc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f640 1334 	movw	r3, #2356	; 0x934
 8002cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cf0:	18d2      	adds	r2, r2, r3
 8002cf2:	f104 0304 	add.w	r3, r4, #4
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7ff fb07 	bl	800230c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d00:	f640 1330 	movw	r3, #2352	; 0x930
 8002d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d302      	bcc.n	8002d16 <xTaskResumeAll+0xca>
					{
						xYieldRequired = pdTRUE;
 8002d10:	f04f 0301 	mov.w	r3, #1
 8002d14:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002d16:	f640 13c8 	movw	r3, #2504	; 0x9c8
 8002d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ba      	bne.n	8002c9a <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002d24:	f640 2324 	movw	r3, #2596	; 0xa24
 8002d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d018      	beq.n	8002d64 <xTaskResumeAll+0x118>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002d32:	e00d      	b.n	8002d50 <xTaskResumeAll+0x104>
					{
						vTaskIncrementTick();
 8002d34:	f000 f92c 	bl	8002f90 <vTaskIncrementTick>
						--uxMissedTicks;
 8002d38:	f640 2324 	movw	r3, #2596	; 0xa24
 8002d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f103 32ff 	add.w	r2, r3, #4294967295
 8002d46:	f640 2324 	movw	r3, #2596	; 0xa24
 8002d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d4e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002d50:	f640 2324 	movw	r3, #2596	; 0xa24
 8002d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1ea      	bne.n	8002d34 <xTaskResumeAll+0xe8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8002d5e:	f04f 0301 	mov.w	r3, #1
 8002d62:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d006      	beq.n	8002d78 <xTaskResumeAll+0x12c>
 8002d6a:	f640 2328 	movw	r3, #2600	; 0xa28
 8002d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10b      	bne.n	8002d90 <xTaskResumeAll+0x144>
				{
					xAlreadyYielded = pdTRUE;
 8002d78:	f04f 0301 	mov.w	r3, #1
 8002d7c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8002d7e:	f640 2328 	movw	r3, #2600	; 0xa28
 8002d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8002d8c:	f7ff f9e4 	bl	8002158 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8002d90:	f7ff fa04 	bl	800219c <vPortExitCritical>

	return xAlreadyYielded;
 8002d94:	687b      	ldr	r3, [r7, #4]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	f107 070c 	add.w	r7, r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd90      	pop	{r4, r7, pc}

08002da0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8002da6:	f7ff f9e3 	bl	8002170 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8002daa:	f640 2310 	movw	r3, #2576	; 0xa10
 8002dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8002db6:	f7ff f9f1 	bl	800219c <vPortExitCritical>

	return xTicks;
 8002dba:	687b      	ldr	r3, [r7, #4]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f107 0708 	add.w	r7, r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop

08002dc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8002dd8:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
 8002ddc:	f640 2310 	movw	r3, #2576	; 0xa10
 8002de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002de8:	f04f 0000 	mov.w	r0, #0
 8002dec:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 8002df0:	683b      	ldr	r3, [r7, #0]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	f107 070c 	add.w	r7, r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop

08002e00 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
 8002e04:	f640 230c 	movw	r3, #2572	; 0xa0c
 8002e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e0c:	681b      	ldr	r3, [r3, #0]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
	{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	unsigned long ulTotalRunTime;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
 8002e20:	f7ff ff02 	bl	8002c28 <vTaskSuspendAll>
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8002e24:	f001 f92c 	bl	8004080 <get_us_time>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
			#endif

			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
			ulTotalRunTime /= 100UL;
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	f248 531f 	movw	r3, #34079	; 0x851f
 8002e36:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8002e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e3e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002e42:	60bb      	str	r3, [r7, #8]
			
			/* Run through all the lists that could potentially contain a TCB,
			generating a table of run timer percentages in the provided
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 8002e4c:	687c      	ldr	r4, [r7, #4]
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f009 fa0e 	bl	800c270 <strlen>
 8002e54:	4603      	mov	r3, r0
 8002e56:	18e2      	adds	r2, r4, r3
 8002e58:	f243 5338 	movw	r3, #13624	; 0x3538
 8002e5c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002e60:	4611      	mov	r1, r2
 8002e62:	461a      	mov	r2, r3
 8002e64:	f04f 0303 	mov.w	r3, #3
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f008 fc07 	bl	800b680 <memcpy>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 8002e72:	f640 2314 	movw	r3, #2580	; 0xa14
 8002e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f103 0301 	add.w	r3, r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e88:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f640 1334 	movw	r3, #2356	; 0x934
 8002e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ea2:	18d3      	adds	r3, r2, r3
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d013      	beq.n	8002ed2 <vTaskGetRunTimeStats+0xba>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), ulTotalRunTime, tskREADY_CHAR );
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002eb2:	189b      	adds	r3, r3, r2
 8002eb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f640 1334 	movw	r3, #2356	; 0x934
 8002ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ec2:	18d3      	adds	r3, r2, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	f04f 0352 	mov.w	r3, #82	; 0x52
 8002ece:	f000 fcc3 	bl	8003858 <prvGenerateRunTimeStatsForTasksInList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1d4      	bne.n	8002e82 <vTaskGetRunTimeStats+0x6a>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 8002ed8:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <vTaskGetRunTimeStats+0xe8>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRunTime, tskBLOCKED_CHAR );
 8002ee8:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f04f 0342 	mov.w	r3, #66	; 0x42
 8002efc:	f000 fcac 	bl	8003858 <prvGenerateRunTimeStatsForTasksInList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 8002f00:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <vTaskGetRunTimeStats+0x110>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ulTotalRunTime, tskBLOCKED_CHAR );
 8002f10:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	f04f 0342 	mov.w	r3, #66	; 0x42
 8002f24:	f000 fc98 	bl	8003858 <prvGenerateRunTimeStatsForTasksInList>
			}

			#if ( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 8002f28:	f640 13dc 	movw	r3, #2524	; 0x9dc
 8002f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <vTaskGetRunTimeStats+0x132>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTime, tskDELETED_CHAR );
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f640 11dc 	movw	r1, #2524	; 0x9dc
 8002f3c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	f04f 0344 	mov.w	r3, #68	; 0x44
 8002f46:	f000 fc87 	bl	8003858 <prvGenerateRunTimeStatsForTasksInList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 8002f4a:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8002f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <vTaskGetRunTimeStats+0x154>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime, tskSUSPENDED_CHAR );
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f640 11f4 	movw	r1, #2548	; 0x9f4
 8002f5e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	f04f 0353 	mov.w	r3, #83	; 0x53
 8002f68:	f000 fc76 	bl	8003858 <prvGenerateRunTimeStatsForTasksInList>
				}
			}
			#endif
		}
		xTaskResumeAll();
 8002f6c:	f7ff fe6e 	bl	8002c4c <xTaskResumeAll>
	}
 8002f70:	f107 0714 	add.w	r7, r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	xTaskHandle xTaskGetIdleTaskHandle( void )
	{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
 8002f7c:	f640 2308 	movw	r3, #2568	; 0xa08
 8002f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f84:	681b      	ldr	r3, [r3, #0]
	}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop

08002f90 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002f96:	f640 2320 	movw	r3, #2592	; 0xa20
 8002f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 80c0 	bne.w	8003126 <vTaskIncrementTick+0x196>
	{
		++xTickCount;
 8002fa6:	f640 2310 	movw	r3, #2576	; 0xa10
 8002faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f103 0201 	add.w	r2, r3, #1
 8002fb4:	f640 2310 	movw	r3, #2576	; 0xa10
 8002fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fbc:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8002fbe:	f640 2310 	movw	r3, #2576	; 0xa10
 8002fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d140      	bne.n	800304e <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8002fcc:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8002fd8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fea:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8002fec:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8002ff8:	f640 232c 	movw	r3, #2604	; 0xa2c
 8002ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f103 0201 	add.w	r2, r3, #1
 8003006:	f640 232c 	movw	r3, #2604	; 0xa2c
 800300a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800300e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003010:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8003014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8003020:	f240 032c 	movw	r3, #44	; 0x2c
 8003024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003028:	f04f 32ff 	mov.w	r2, #4294967295
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e00e      	b.n	800304e <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003030:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8003034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	f240 032c 	movw	r3, #44	; 0x2c
 8003048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800304c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 800304e:	f640 2310 	movw	r3, #2576	; 0xa10
 8003052:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	f240 032c 	movw	r3, #44	; 0x2c
 800305c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d36b      	bcc.n	800313e <vTaskIncrementTick+0x1ae>
 8003066:	f640 13c0 	movw	r3, #2496	; 0x9c0
 800306a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <vTaskIncrementTick+0xf6>
 8003076:	f240 032c 	movw	r3, #44	; 0x2c
 800307a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800307e:	f04f 32ff 	mov.w	r2, #4294967295
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e05b      	b.n	800313e <vTaskIncrementTick+0x1ae>
 8003086:	f640 13c0 	movw	r3, #2496	; 0x9c0
 800308a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	f640 2310 	movw	r3, #2576	; 0xa10
 80030a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d206      	bcs.n	80030ba <vTaskIncrementTick+0x12a>
 80030ac:	f240 032c 	movw	r3, #44	; 0x2c
 80030b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e041      	b.n	800313e <vTaskIncrementTick+0x1ae>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f103 0304 	add.w	r3, r3, #4
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff f989 	bl	80023d8 <vListRemove>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <vTaskIncrementTick+0x14a>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f103 0318 	add.w	r3, r3, #24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff f97f 	bl	80023d8 <vListRemove>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	f640 2318 	movw	r3, #2584	; 0xa18
 80030e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d906      	bls.n	80030fa <vTaskIncrementTick+0x16a>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	f640 2318 	movw	r3, #2584	; 0xa18
 80030f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	4613      	mov	r3, r2
 8003100:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003104:	189b      	adds	r3, r3, r2
 8003106:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800310a:	461a      	mov	r2, r3
 800310c:	f640 1334 	movw	r3, #2356	; 0x934
 8003110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003114:	18d2      	adds	r2, r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f103 0304 	add.w	r3, r3, #4
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f7ff f8f4 	bl	800230c <vListInsertEnd>
 8003124:	e79f      	b.n	8003066 <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
 8003126:	f640 2324 	movw	r3, #2596	; 0xa24
 800312a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f103 0201 	add.w	r2, r3, #1
 8003134:	f640 2324 	movw	r3, #2596	; 0xa24
 8003138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800313c:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 800313e:	f107 0710 	add.w	r7, r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop

08003148 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <vTaskSetApplicationTaskTag+0x1e>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
 8003158:	f640 1330 	movw	r3, #2352	; 0x930
 800315c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e001      	b.n	800316a <vTaskSetApplicationTaskTag+0x22>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 800316a:	f7ff f801 	bl	8002170 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	649a      	str	r2, [r3, #72]	; 0x48
		taskEXIT_CRITICAL();
 8003174:	f7ff f812 	bl	800219c <vPortExitCritical>
	}
 8003178:	f107 0710 	add.w	r7, r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <xTaskGetApplicationTaskTag+0x1c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
 800318e:	f640 1330 	movw	r3, #2352	; 0x930
 8003192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e001      	b.n	80031a0 <xTaskGetApplicationTaskTag+0x20>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80031a0:	f7fe ffe6 	bl	8002170 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	60bb      	str	r3, [r7, #8]
		taskEXIT_CRITICAL();
 80031aa:	f7fe fff7 	bl	800219c <vPortExitCritical>

		return xReturn;
 80031ae:	68bb      	ldr	r3, [r7, #8]
	}
 80031b0:	4618      	mov	r0, r3
 80031b2:	f107 0710 	add.w	r7, r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop

080031bc <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <xTaskCallApplicationTaskHook+0x1e>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
 80031cc:	f640 1330 	movw	r3, #2352	; 0x930
 80031d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e001      	b.n	80031de <xTaskCallApplicationTaskHook+0x22>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <xTaskCallApplicationTaskHook+0x38>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ea:	6838      	ldr	r0, [r7, #0]
 80031ec:	4798      	blx	r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	e002      	b.n	80031fa <xTaskCallApplicationTaskHook+0x3e>
		}
		else
		{
			xReturn = pdFAIL;
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 80031fa:	68bb      	ldr	r3, [r7, #8]
	}
 80031fc:	4618      	mov	r0, r3
 80031fe:	f107 0710 	add.w	r7, r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop

08003208 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800320e:	f640 2320 	movw	r3, #2592	; 0xa20
 8003212:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 800321c:	f640 2328 	movw	r3, #2600	; 0xa28
 8003220:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003224:	f04f 0201 	mov.w	r2, #1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e089      	b.n	8003340 <vTaskSwitchContext+0x138>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 800322c:	f000 ff28 	bl	8004080 <get_us_time>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8003238:	f640 1330 	movw	r3, #2352	; 0x930
 800323c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003244:	f640 2368 	movw	r3, #2664	; 0xa68
 8003248:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	1ac3      	subs	r3, r0, r3
 8003252:	18cb      	adds	r3, r1, r3
 8003254:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8003256:	f640 2368 	movw	r3, #2664	; 0xa68
 800325a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	601a      	str	r2, [r3, #0]
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8003262:	f640 1330 	movw	r3, #2352	; 0x930
 8003266:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f640 1330 	movw	r3, #2352	; 0x930
 8003272:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	429a      	cmp	r2, r3
 800327c:	d81d      	bhi.n	80032ba <vTaskSwitchContext+0xb2>
 800327e:	f640 1330 	movw	r3, #2352	; 0x930
 8003282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	f640 1330 	movw	r3, #2352	; 0x930
 800328c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	f000 fdab 	bl	8003df4 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 800329e:	e00c      	b.n	80032ba <vTaskSwitchContext+0xb2>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 80032a0:	f640 2318 	movw	r3, #2584	; 0xa18
 80032a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f103 32ff 	add.w	r2, r3, #4294967295
 80032ae:	f640 2318 	movw	r3, #2584	; 0xa18
 80032b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e000      	b.n	80032bc <vTaskSwitchContext+0xb4>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 80032ba:	bf00      	nop
 80032bc:	f640 2318 	movw	r3, #2584	; 0xa18
 80032c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032d2:	461a      	mov	r2, r3
 80032d4:	f640 1334 	movw	r3, #2356	; 0x934
 80032d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032dc:	18d3      	adds	r3, r2, r3
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0dd      	beq.n	80032a0 <vTaskSwitchContext+0x98>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 80032e4:	f640 2318 	movw	r3, #2584	; 0xa18
 80032e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032fa:	461a      	mov	r2, r3
 80032fc:	f640 1334 	movw	r3, #2356	; 0x934
 8003300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003304:	18d3      	adds	r3, r2, r3
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	461a      	mov	r2, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f103 0308 	add.w	r3, r3, #8
 800331e:	429a      	cmp	r2, r3
 8003320:	d105      	bne.n	800332e <vTaskSwitchContext+0x126>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	461a      	mov	r2, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	461a      	mov	r2, r3
 8003336:	f640 1330 	movw	r3, #2352	; 0x930
 800333a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800333e:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
 8003340:	f107 0708 	add.w	r7, r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8003352:	f640 1330 	movw	r3, #2352	; 0x930
 8003356:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f103 0318 	add.w	r3, r3, #24
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4619      	mov	r1, r3
 8003364:	f7fe fffc 	bl	8002360 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003368:	f640 1330 	movw	r3, #2352	; 0x930
 800336c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f103 0304 	add.w	r3, r3, #4
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff f82e 	bl	80023d8 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d10e      	bne.n	80033a2 <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003384:	f640 1330 	movw	r3, #2352	; 0x930
 8003388:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f103 0304 	add.w	r3, r3, #4
 8003392:	f640 10f4 	movw	r0, #2548	; 0x9f4
 8003396:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800339a:	4619      	mov	r1, r3
 800339c:	f7fe ffb6 	bl	800230c <vListInsertEnd>
 80033a0:	e00a      	b.n	80033b8 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 80033a2:	f640 2310 	movw	r3, #2576	; 0xa10
 80033a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	18d3      	adds	r3, r2, r3
 80033b0:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f9d0 	bl	8003758 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 80033b8:	f107 0710 	add.w	r7, r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f103 0318 	add.w	r3, r3, #24
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fffe 	bl	80023d8 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80033dc:	f640 2320 	movw	r3, #2592	; 0xa20
 80033e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d12b      	bne.n	8003442 <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f103 0304 	add.w	r3, r3, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe fff1 	bl	80023d8 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	f640 2318 	movw	r3, #2584	; 0xa18
 80033fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d906      	bls.n	8003416 <xTaskRemoveFromEventList+0x56>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	f640 2318 	movw	r3, #2584	; 0xa18
 8003410:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	4613      	mov	r3, r2
 800341c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003420:	189b      	adds	r3, r3, r2
 8003422:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003426:	461a      	mov	r2, r3
 8003428:	f640 1334 	movw	r3, #2356	; 0x934
 800342c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003430:	18d2      	adds	r2, r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f103 0304 	add.w	r3, r3, #4
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f7fe ff66 	bl	800230c <vListInsertEnd>
 8003440:	e009      	b.n	8003456 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f103 0318 	add.w	r3, r3, #24
 8003448:	f640 10c8 	movw	r0, #2504	; 0x9c8
 800344c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003450:	4619      	mov	r1, r3
 8003452:	f7fe ff5b 	bl	800230c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	f640 1330 	movw	r3, #2352	; 0x930
 800345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	429a      	cmp	r2, r3
 8003468:	d303      	bcc.n	8003472 <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 800346a:	f04f 0301 	mov.w	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e002      	b.n	8003478 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003478:	68fb      	ldr	r3, [r7, #12]
}
 800347a:	4618      	mov	r0, r3
 800347c:	f107 0710 	add.w	r7, r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800348c:	f640 232c 	movw	r3, #2604	; 0xa2c
 8003490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800349a:	f640 2310 	movw	r3, #2576	; 0xa10
 800349e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	605a      	str	r2, [r3, #4]
}
 80034a8:	f107 070c 	add.w	r7, r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop

080034b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80034be:	f7fe fe57 	bl	8002170 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ca:	d103      	bne.n	80034d4 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e038      	b.n	8003546 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	f640 232c 	movw	r3, #2604	; 0xa2c
 80034dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d00c      	beq.n	8003500 <xTaskCheckForTimeOut+0x4c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	f640 2310 	movw	r3, #2576	; 0xa10
 80034ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d803      	bhi.n	8003500 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80034f8:	f04f 0301 	mov.w	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e022      	b.n	8003546 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8003500:	f640 2310 	movw	r3, #2576	; 0xa10
 8003504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	1ad2      	subs	r2, r2, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d213      	bcs.n	8003540 <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	f640 2310 	movw	r3, #2576	; 0xa10
 8003524:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	1acb      	subs	r3, r1, r3
 800352c:	18d2      	adds	r2, r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffa6 	bl	8003484 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e002      	b.n	8003546 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8003540:	f04f 0301 	mov.w	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003546:	f7fe fe29 	bl	800219c <vPortExitCritical>

	return xReturn;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	f107 0710 	add.w	r7, r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop

08003558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 800355c:	f640 2328 	movw	r3, #2600	; 0xa28
 8003560:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003564:	f04f 0201 	mov.w	r2, #1
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	e000      	b.n	800357c <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 800357a:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 800357c:	f000 f8a0 	bl	80036c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8003580:	f640 1334 	movw	r3, #2356	; 0x934
 8003584:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d9f5      	bls.n	800357a <prvIdleTask+0xa>
			{
				taskYIELD();
 800358e:	f7fe fde3 	bl	8002158 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8003592:	e7f2      	b.n	800357a <prvIdleTask+0xa>

08003594 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80035a8:	4618      	mov	r0, r3
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	f04f 0210 	mov.w	r2, #16
 80035b0:	f008 fee6 	bl	800c380 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d902      	bls.n	80035ca <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 80035c4:	f04f 0304 	mov.w	r3, #4
 80035c8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f103 0304 	add.w	r3, r3, #4
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fe87 	bl	80022f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f103 0318 	add.w	r3, r3, #24
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe fe81 	bl	80022f0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1c3 0205 	rsb	r2, r3, #5
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 8003614:	f107 0710 	add.w	r7, r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	e013      	b.n	8003652 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003632:	189b      	adds	r3, r3, r2
 8003634:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003638:	461a      	mov	r2, r3
 800363a:	f640 1334 	movw	r3, #2356	; 0x934
 800363e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003642:	18d3      	adds	r3, r2, r3
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe fe33 	bl	80022b0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f103 0301 	add.w	r3, r3, #1
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d9e8      	bls.n	800362a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8003658:	f640 1098 	movw	r0, #2456	; 0x998
 800365c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003660:	f7fe fe26 	bl	80022b0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8003664:	f640 10ac 	movw	r0, #2476	; 0x9ac
 8003668:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800366c:	f7fe fe20 	bl	80022b0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8003670:	f640 10c8 	movw	r0, #2504	; 0x9c8
 8003674:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003678:	f7fe fe1a 	bl	80022b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 800367c:	f640 10dc 	movw	r0, #2524	; 0x9dc
 8003680:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003684:	f7fe fe14 	bl	80022b0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8003688:	f640 10f4 	movw	r0, #2548	; 0x9f4
 800368c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003690:	f7fe fe0e 	bl	80022b0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003694:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8003698:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800369c:	f640 1298 	movw	r2, #2456	; 0x998
 80036a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80036a4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036a6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80036aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036ae:	f640 12ac 	movw	r2, #2476	; 0x9ac
 80036b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80036b6:	601a      	str	r2, [r3, #0]
}
 80036b8:	f107 0708 	add.w	r7, r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80036c6:	f640 13f0 	movw	r3, #2544	; 0x9f0
 80036ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d03c      	beq.n	800374e <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
 80036d4:	f7ff faa8 	bl	8002c28 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80036d8:	f640 13dc 	movw	r3, #2524	; 0x9dc
 80036dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bf14      	ite	ne
 80036e6:	2300      	movne	r3, #0
 80036e8:	2301      	moveq	r3, #1
 80036ea:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 80036ec:	f7ff faae 	bl	8002c4c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d12b      	bne.n	800374e <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80036f6:	f7fe fd3b 	bl	8002170 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 80036fa:	f640 13dc 	movw	r3, #2524	; 0x9dc
 80036fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f103 0304 	add.w	r3, r3, #4
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fe62 	bl	80023d8 <vListRemove>
					--uxCurrentNumberOfTasks;
 8003714:	f640 230c 	movw	r3, #2572	; 0xa0c
 8003718:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f103 32ff 	add.w	r2, r3, #4294967295
 8003722:	f640 230c 	movw	r3, #2572	; 0xa0c
 8003726:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800372a:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 800372c:	f640 13f0 	movw	r3, #2544	; 0x9f0
 8003730:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f103 32ff 	add.w	r2, r3, #4294967295
 800373a:	f640 13f0 	movw	r3, #2544	; 0x9f0
 800373e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003742:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8003744:	f7fe fd2a 	bl	800219c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003748:	6838      	ldr	r0, [r7, #0]
 800374a:	f000 f97d 	bl	8003a48 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 800374e:	f107 0708 	add.w	r7, r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop

08003758 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003760:	f640 1330 	movw	r3, #2352	; 0x930
 8003764:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 800376e:	f640 2310 	movw	r3, #2576	; 0xa10
 8003772:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d210      	bcs.n	80037a0 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800377e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003782:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	f640 1330 	movw	r3, #2352	; 0x930
 800378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f103 0304 	add.w	r3, r3, #4
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fe fde1 	bl	8002360 <vListInsert>
 800379e:	e01d      	b.n	80037dc <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80037a0:	f640 13c0 	movw	r3, #2496	; 0x9c0
 80037a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	f640 1330 	movw	r3, #2352	; 0x930
 80037ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f103 0304 	add.w	r3, r3, #4
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	f7fe fdd0 	bl	8002360 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80037c0:	f240 032c 	movw	r3, #44	; 0x2c
 80037c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d205      	bcs.n	80037dc <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80037d0:	f240 032c 	movw	r3, #44	; 0x2c
 80037d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	601a      	str	r2, [r3, #0]
		}
	}
}
 80037dc:	f107 0708 	add.w	r7, r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80037f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037f4:	f007 fc04 	bl	800b000 <malloc>
 80037f8:	4603      	mov	r3, r0
 80037fa:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d023      	beq.n	800384a <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <prvAllocateTCBAndStack+0x34>
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800380e:	4618      	mov	r0, r3
 8003810:	f007 fbf6 	bl	800b000 <malloc>
 8003814:	4603      	mov	r3, r0
 8003816:	e000      	b.n	800381a <prvAllocateTCBAndStack+0x36>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f007 fbf2 	bl	800b010 <free>
			pxNewTCB = NULL;
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	e00a      	b.n	800384a <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800383e:	4610      	mov	r0, r2
 8003840:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 8003844:	461a      	mov	r2, r3
 8003846:	f007 ffcb 	bl	800b7e0 <memset>
		}
	}

	return pxNewTCB;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	f107 0710 	add.w	r7, r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop

08003858 <prvGenerateRunTimeStatsForTasksInList>:
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime, signed char cStatus  )
	{
 8003858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800385c:	b08e      	sub	sp, #56	; 0x38
 800385e:	af04      	add	r7, sp, #16
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	70fb      	strb	r3, [r7, #3]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	461a      	mov	r2, r3
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	f103 0308 	add.w	r3, r3, #8
 8003882:	429a      	cmp	r2, r3
 8003884:	d105      	bne.n	8003892 <prvGenerateRunTimeStatsForTasksInList+0x3a>
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	461a      	mov	r2, r3
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	623b      	str	r3, [r7, #32]
		do
		{
			/* Get next TCB in from the list. */
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	461a      	mov	r2, r3
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f103 0308 	add.w	r3, r3, #8
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d105      	bne.n	80038c4 <prvGenerateRunTimeStatsForTasksInList+0x6c>
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	461a      	mov	r2, r3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	61bb      	str	r3, [r7, #24]

			/* Divide by zero check. */
			if( ulTotalRunTime > 0UL )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d076      	beq.n	80039c0 <prvGenerateRunTimeStatsForTasksInList+0x168>
			{
				/* Has the task run at all? */
				if( pxNextTCB->ulRunTimeCounter == 0UL )
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d11c      	bne.n	8003914 <prvGenerateRunTimeStatsForTasksInList+0xbc>
				{
					/* The task has used no CPU time at all. */
					sprintf( pcStatsString, ( char * ) "%u  %c  %-16s          0   0%%  %5u\r\n", (unsigned int) pxNextTCB->uxPriority, cStatus, pxNextTCB->pcTaskName, usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack ));
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	461d      	mov	r5, r3
 80038e0:	f997 4003 	ldrsb.w	r4, [r7, #3]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f103 0634 	add.w	r6, r3, #52	; 0x34
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f870 	bl	80039d4 <usTaskCheckFreeStackSpace>
 80038f4:	4603      	mov	r3, r0
 80038f6:	9600      	str	r6, [sp, #0]
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	f640 2034 	movw	r0, #2612	; 0xa34
 80038fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003902:	f243 513c 	movw	r1, #13628	; 0x353c
 8003906:	f6c0 0101 	movt	r1, #2049	; 0x801
 800390a:	462a      	mov	r2, r5
 800390c:	4623      	mov	r3, r4
 800390e:	f008 fb09 	bl	800bf24 <sprintf>
 8003912:	e04e      	b.n	80039b2 <prvGenerateRunTimeStatsForTasksInList+0x15a>
				else
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTime has already been divided by 100. */
					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003918:	461a      	mov	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]

					if( ulStatsAsPercentage > 0UL )
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d023      	beq.n	8003970 <prvGenerateRunTimeStatsForTasksInList+0x118>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u %3u%%  %5u\r\n", (unsigned int) pxNextTCB->uxPriority, cStatus, pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage, usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack ));
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	461d      	mov	r5, r3
 800392e:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f103 0834 	add.w	r8, r3, #52	; 0x34
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	461e      	mov	r6, r3
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f846 	bl	80039d4 <usTaskCheckFreeStackSpace>
 8003948:	4603      	mov	r3, r0
 800394a:	f8cd 8000 	str.w	r8, [sp]
 800394e:	9601      	str	r6, [sp, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	9202      	str	r2, [sp, #8]
 8003954:	9303      	str	r3, [sp, #12]
 8003956:	f640 2034 	movw	r0, #2612	; 0xa34
 800395a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800395e:	f243 5164 	movw	r1, #13668	; 0x3564
 8003962:	f6c0 0101 	movt	r1, #2049	; 0x801
 8003966:	462a      	mov	r2, r5
 8003968:	4623      	mov	r3, r4
 800396a:	f008 fadb 	bl	800bf24 <sprintf>
 800396e:	e020      	b.n	80039b2 <prvGenerateRunTimeStatsForTasksInList+0x15a>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u  <1%%  %5u\r\n",  (unsigned int) pxNextTCB->uxPriority, cStatus, pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack ));
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	461d      	mov	r5, r3
 8003976:	f997 4003 	ldrsb.w	r4, [r7, #3]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f103 0834 	add.w	r8, r3, #52	; 0x34
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003984:	461e      	mov	r6, r3
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f822 	bl	80039d4 <usTaskCheckFreeStackSpace>
 8003990:	4603      	mov	r3, r0
 8003992:	f8cd 8000 	str.w	r8, [sp]
 8003996:	9601      	str	r6, [sp, #4]
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	f640 2034 	movw	r0, #2612	; 0xa34
 800399e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80039a2:	f243 5184 	movw	r1, #13700	; 0x3584
 80039a6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80039aa:	462a      	mov	r2, r5
 80039ac:	4623      	mov	r3, r4
 80039ae:	f008 fab9 	bl	800bf24 <sprintf>
						}
						#endif
					}
				}

				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f640 2134 	movw	r1, #2612	; 0xa34
 80039b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80039bc:	f008 fae0 	bl	800bf80 <strcat>
			}

		} while( pxNextTCB != pxFirstTCB );
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	f47f af68 	bne.w	800389a <prvGenerateRunTimeStatsForTasksInList+0x42>
	}
 80039ca:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039d4 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
 80039d4:	b490      	push	{r4, r7}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0U;
 80039dc:	f04f 0400 	mov.w	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80039e0:	e006      	b.n	80039f0 <usTaskCheckFreeStackSpace+0x1c>
		{
			pucStackByte -= portSTACK_GROWTH;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f103 0301 	add.w	r3, r3, #1
 80039e8:	607b      	str	r3, [r7, #4]
			usCount++;
 80039ea:	f104 0301 	add.w	r3, r4, #1
 80039ee:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2ba5      	cmp	r3, #165	; 0xa5
 80039f6:	d0f4      	beq.n	80039e2 <usTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
 80039f8:	ea4f 0394 	mov.w	r3, r4, lsr #2
 80039fc:	b29c      	uxth	r4, r3

		return usCount;
 80039fe:	4623      	mov	r3, r4
	}
 8003a00:	4618      	mov	r0, r3
 8003a02:	f107 0708 	add.w	r7, r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc90      	pop	{r4, r7}
 8003a0a:	4770      	bx	lr

08003a0c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <uxTaskGetStackHighWaterMark+0x1a>
 8003a1a:	f640 1330 	movw	r3, #2352	; 0x930
 8003a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	e000      	b.n	8003a28 <uxTaskGetStackHighWaterMark+0x1c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	613b      	str	r3, [r7, #16]
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
 8003a30:	6938      	ldr	r0, [r7, #16]
 8003a32:	f7ff ffcf 	bl	80039d4 <usTaskCheckFreeStackSpace>
 8003a36:	4603      	mov	r3, r0
 8003a38:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
	}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f107 0718 	add.w	r7, r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop

08003a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	4618      	mov	r0, r3
 8003a56:	f007 fadb 	bl	800b010 <free>
		vPortFree( pxTCB );
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f007 fad8 	bl	800b010 <free>
	}
 8003a60:	f107 0708 	add.w	r7, r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003a6e:	f640 1330 	movw	r3, #2352	; 0x930
 8003a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003a7a:	687b      	ldr	r3, [r7, #4]
	}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f107 070c 	add.w	r7, r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	f640 1330 	movw	r3, #2352	; 0x930
 8003a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d257      	bcs.n	8003b58 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8003aa8:	f640 1330 	movw	r3, #2352	; 0x930
 8003aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	f1c3 0205 	rsb	r2, r3, #5
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6959      	ldr	r1, [r3, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f640 1334 	movw	r3, #2356	; 0x934
 8003ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ada:	18d3      	adds	r3, r2, r3
 8003adc:	4299      	cmp	r1, r3
 8003ade:	d133      	bne.n	8003b48 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f103 0304 	add.w	r3, r3, #4
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe fc76 	bl	80023d8 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003aec:	f640 1330 	movw	r3, #2352	; 0x930
 8003af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	f640 2318 	movw	r3, #2584	; 0xa18
 8003b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d906      	bls.n	8003b1c <vTaskPriorityInherit+0x94>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	f640 2318 	movw	r3, #2584	; 0xa18
 8003b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	4613      	mov	r3, r2
 8003b22:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f640 1334 	movw	r3, #2356	; 0x934
 8003b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b36:	18d2      	adds	r2, r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f103 0304 	add.w	r3, r3, #4
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	f7fe fbe3 	bl	800230c <vListInsertEnd>
 8003b46:	e007      	b.n	8003b58 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b48:	f640 1330 	movw	r3, #2352	; 0x930
 8003b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}
 8003b58:	f107 0710 	add.w	r7, r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d03a      	beq.n	8003be8 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d034      	beq.n	8003be8 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f103 0304 	add.w	r3, r3, #4
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe fc27 	bl	80023d8 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	f1c3 0205 	rsb	r2, r3, #5
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba2:	f640 2318 	movw	r3, #2584	; 0xa18
 8003ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d906      	bls.n	8003bbe <vTaskPriorityDisinherit+0x5e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	f640 2318 	movw	r3, #2584	; 0xa18
 8003bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003bc8:	189b      	adds	r3, r3, r2
 8003bca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f640 1334 	movw	r3, #2356	; 0x934
 8003bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bd8:	18d2      	adds	r2, r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f103 0304 	add.w	r3, r3, #4
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	f7fe fb92 	bl	800230c <vListInsertEnd>
			}
		}
	}
 8003be8:	f107 0710 	add.w	r7, r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe f807 	bl	8001c10 <_ZN12AManagedTaskC1Ev>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <_ZN24CLedHeartBeatSTM32F4DiscC1Em+0x34>)
 8003c06:	601a      	str	r2, [r3, #0]
	ledState = LED_Up;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	731a      	strb	r2, [r3, #12]
	ledRate = newRate;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	611a      	str	r2, [r3, #16]
}
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f107 0708 	add.w	r7, r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	080135b8 	.word	0x080135b8

08003c28 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>:

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x34>)
 8003c34:	601a      	str	r2, [r3, #0]
	// nothing to destroy
}
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fe f806 	bl	8001c48 <_ZN12AManagedTaskD1Ev>
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x28>
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f00e fa20 	bl	8012090 <_ZdlPv>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f107 0708 	add.w	r7, r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	080135b8 	.word	0x080135b8

08003c60 <_ZN24CLedHeartBeatSTM32F4DiscD0Ev>:
CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
	ledState = LED_Up;
	ledRate = newRate;
}

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	// nothing to destroy
}
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ffdd 	bl	8003c28 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f00e fa0e 	bl	8012090 <_ZdlPv>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f107 0708 	add.w	r7, r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv>:
/**
  * @brief  HardwareInit called before Scheduler starts
  * @param  None
  * @retval true on succsess
  */
bool CLedHeartBeatSTM32F4Disc::HardwareInit(){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

	STM_EVAL_LEDInit(LED3);
 8003c88:	f04f 0001 	mov.w	r0, #1
 8003c8c:	f7fd fe98 	bl	80019c0 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8003c90:	f04f 0000 	mov.w	r0, #0
 8003c94:	f7fd fe94 	bl	80019c0 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 8003c98:	f04f 0002 	mov.w	r0, #2
 8003c9c:	f7fd fe90 	bl	80019c0 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8003ca0:	f04f 0003 	mov.w	r0, #3
 8003ca4:	f7fd fe8c 	bl	80019c0 <STM_EVAL_LEDInit>
	return true;
 8003ca8:	f04f 0301 	mov.w	r3, #1
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	f107 0708 	add.w	r7, r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop

08003cb8 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv>:
/**
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	while(1){
		switch(ledState){
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	7b1b      	ldrb	r3, [r3, #12]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d85f      	bhi.n	8003d88 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xd0>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x18>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003ce1 	.word	0x08003ce1
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003d35 	.word	0x08003d35
 8003cdc:	08003d5f 	.word	0x08003d5f
		case LED_Up:
			STM_EVAL_LEDOn(LED3);
 8003ce0:	f04f 0001 	mov.w	r0, #1
 8003ce4:	f7fd fea2 	bl	8001a2c <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED5);
 8003ce8:	f04f 0002 	mov.w	r0, #2
 8003cec:	f7fd feb8 	bl	8001a60 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 8003cf0:	f04f 0003 	mov.w	r0, #3
 8003cf4:	f7fd feb4 	bl	8001a60 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 8003cf8:	f04f 0000 	mov.w	r0, #0
 8003cfc:	f7fd feb0 	bl	8001a60 <STM_EVAL_LEDOff>
			ledState = LED_Right;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f04f 0201 	mov.w	r2, #1
 8003d06:	731a      	strb	r2, [r3, #12]
			break;
 8003d08:	e043      	b.n	8003d92 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Right:
			STM_EVAL_LEDOff(LED3);
 8003d0a:	f04f 0001 	mov.w	r0, #1
 8003d0e:	f7fd fea7 	bl	8001a60 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED5);
 8003d12:	f04f 0002 	mov.w	r0, #2
 8003d16:	f7fd fe89 	bl	8001a2c <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED6);
 8003d1a:	f04f 0003 	mov.w	r0, #3
 8003d1e:	f7fd fe9f 	bl	8001a60 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 8003d22:	f04f 0000 	mov.w	r0, #0
 8003d26:	f7fd fe9b 	bl	8001a60 <STM_EVAL_LEDOff>
			ledState = LED_Down;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f04f 0202 	mov.w	r2, #2
 8003d30:	731a      	strb	r2, [r3, #12]
			break;
 8003d32:	e02e      	b.n	8003d92 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Down:
			STM_EVAL_LEDOff(LED3);
 8003d34:	f04f 0001 	mov.w	r0, #1
 8003d38:	f7fd fe92 	bl	8001a60 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 8003d3c:	f04f 0002 	mov.w	r0, #2
 8003d40:	f7fd fe8e 	bl	8001a60 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED6);
 8003d44:	f04f 0003 	mov.w	r0, #3
 8003d48:	f7fd fe70 	bl	8001a2c <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED4);
 8003d4c:	f04f 0000 	mov.w	r0, #0
 8003d50:	f7fd fe86 	bl	8001a60 <STM_EVAL_LEDOff>
			ledState = LED_Left;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f04f 0203 	mov.w	r2, #3
 8003d5a:	731a      	strb	r2, [r3, #12]
			break;
 8003d5c:	e019      	b.n	8003d92 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Left:
			STM_EVAL_LEDOff(LED3);
 8003d5e:	f04f 0001 	mov.w	r0, #1
 8003d62:	f7fd fe7d 	bl	8001a60 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 8003d66:	f04f 0002 	mov.w	r0, #2
 8003d6a:	f7fd fe79 	bl	8001a60 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 8003d6e:	f04f 0003 	mov.w	r0, #3
 8003d72:	f7fd fe75 	bl	8001a60 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED4);
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	f7fd fe57 	bl	8001a2c <STM_EVAL_LEDOn>
			ledState = LED_Up;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	731a      	strb	r2, [r3, #12]
			break;
 8003d86:	e004      	b.n	8003d92 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		default:
			ledState = LED_Up;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	731a      	strb	r2, [r3, #12]
			break;
 8003d90:	bf00      	nop
		}
		vTaskDelay(ledRate); // 500ms delay
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fcda 	bl	8002750 <vTaskDelay>
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
	while(1){
 8003d9c:	e790      	b.n	8003cc0 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x8>
 8003d9e:	bf00      	nop

08003da0 <main>:
/**
  * @brief  main function
  * @param  None
  * @retval None
  */
int main(void){
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0

	/**
	 * create Led Heartbeat task with minimal stack size and priority
	 * 1 higher than idle task
	 */
	g_LedTast.Create("Led Heartbeat",configMINIMAL_STACK_SIZE,tskIDLE_PRIORITY+1);
 8003da4:	f640 206c 	movw	r0, #2668	; 0xa6c
 8003da8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003dac:	f243 51e0 	movw	r1, #13792	; 0x35e0
 8003db0:	f6c0 0101 	movt	r1, #2049	; 0x801
 8003db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db8:	f04f 0301 	mov.w	r3, #1
 8003dbc:	f7fd ff74 	bl	8001ca8 <_ZN12AManagedTask6CreateEPKctm>

	/**
	 * Initialise the hardware for all Tasks and
	 * then FreeRTOS takes control of execution
	 */
	CFreeRTOS::InitHardwareForManagedTasks();
 8003dc0:	f7fe f866 	bl	8001e90 <_ZN9CFreeRTOS27InitHardwareForManagedTasksEv>
	CFreeRTOS::StartScheduler();
 8003dc4:	f00e f954 	bl	8012070 <_ZN9CFreeRTOS14StartSchedulerEv>
 8003dc8:	f04f 0300 	mov.w	r3, #0

}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <vApplicationTickHook>:

extern "C" {

	// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
	// ----------------------------------------------------------------------------
	void vApplicationTickHook( void ) {
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0

	}
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop

08003ddc <vApplicationIdleHook>:

	// This FreeRTOS call-back function gets when no other task is ready to execute.
	// On a completely unloaded system this is getting called at over 2.5MHz!
	// ----------------------------------------------------------------------------
	void vApplicationIdleHook( void ) {
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0

	}
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop

08003de8 <vApplicationMallocFailedHook>:

	// A required FreeRTOS function.
	// ----------------------------------------------------------------------------
	void vApplicationMallocFailedHook( void ) {
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
		configASSERT( 0 );  // Latch on any failure / error.
	}
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <vApplicationStackOverflowHook>:

	// A required FreeRTOS function. gets called on stack overflow
	// ----------------------------------------------------------------------------
	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName ){
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
		/* TODO, implement your code here */
		while(1);
 8003dfe:	e7fe      	b.n	8003dfe <vApplicationStackOverflowHook+0xa>

08003e00 <EVAL_AUDIO_TransferComplete_CallBack>:

	/*
	  * Callback used by stm32f4_discovery_audio_codec.c.
	  * Refer to stm32f4_discovery_audio_codec.h for more info.
	  */
	void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	   /* TODO, implement your code here */
	   return;
	}
 8003e0a:	f107 070c 	add.w	r7, r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <EVAL_AUDIO_GetSampleCallBack>:

	/*
	  * Callback used by stm324xg_eval_audio_codec.c.
	  * Refer to stm324xg_eval_audio_codec.h for more info.
	  */
	uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
	   /* TODO, implement your code here */
	   return -1;
 8003e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <_Z41__static_initialization_and_destruction_0ii>:
} // extern "C"
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d11b      	bne.n	8003e6c <_Z41__static_initialization_and_destruction_0ii+0x48>
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d116      	bne.n	8003e6c <_Z41__static_initialization_and_destruction_0ii+0x48>

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
 8003e3e:	f640 206c 	movw	r0, #2668	; 0xa6c
 8003e42:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003e46:	f04f 0132 	mov.w	r1, #50	; 0x32
 8003e4a:	f7ff fed1 	bl	8003bf0 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>
 8003e4e:	f643 4329 	movw	r3, #15401	; 0x3c29
 8003e52:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003e56:	f640 206c 	movw	r0, #2668	; 0xa6c
 8003e5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f240 0200 	movw	r2, #0
 8003e64:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003e68:	f00e f90a 	bl	8012080 <__aeabi_atexit>
	  */
	uint16_t EVAL_AUDIO_GetSampleCallBack(void){
	   /* TODO, implement your code here */
	   return -1;
	}
} // extern "C"
 8003e6c:	f107 0708 	add.w	r7, r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_GLOBAL__sub_I_g_LedTast>:
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	f04f 0001 	mov.w	r0, #1
 8003e7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e80:	f7ff ffd0 	bl	8003e24 <_Z41__static_initialization_and_destruction_0ii>
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
	...

08003e90 <_exit>:

size_t   __malloc_margin = 256;
char    *__brkval;

void _exit(int code)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
    for (;;);
 8003e98:	e7fe      	b.n	8003e98 <_exit+0x8>
 8003e9a:	bf00      	nop

08003e9c <_read_r>:
}


ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
    //return uart_read_r(r, fd, ptr, len);
	/**
	 * printf mapping function
	 */
	return 0;
 8003eaa:	f04f 0300 	mov.w	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f107 0714 	add.w	r7, r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop

08003ebc <_write_r>:


ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
    //return uart_write_r(r, fd, ptr, len);
	/**
	 * printf maping function
	 */
	return 0;
 8003eca:	f04f 0300 	mov.w	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f107 0714 	add.w	r7, r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop

08003edc <_lseek_r>:


off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]

    r->_errno = ENOSYS;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f04f 0258 	mov.w	r2, #88	; 0x58
 8003ef0:	601a      	str	r2, [r3, #0]
    return -1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f107 0714 	add.w	r7, r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop

08003f04 <_close_r>:


int _close_r(struct _reent *r, int fd)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
    r->_errno = ENOSYS;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f04f 0258 	mov.w	r2, #88	; 0x58
 8003f14:	601a      	str	r2, [r3, #0]
    return -1;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f107 070c 	add.w	r7, r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop

08003f28 <_fstat_r>:


int _fstat_r(struct _reent *r, int fd, struct stat *st)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
    if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	db09      	blt.n	8003f4e <_fstat_r+0x26>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	dc06      	bgt.n	8003f4e <_fstat_r+0x26>
      st->st_mode = S_IFCHR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f46:	605a      	str	r2, [r3, #4]
      return 0;
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e005      	b.n	8003f5a <_fstat_r+0x32>
    }

    r->_errno = ENOSYS;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f04f 0258 	mov.w	r2, #88	; 0x58
 8003f54:	601a      	str	r2, [r3, #0]
    return -1;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f107 0714 	add.w	r7, r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop

08003f68 <_isatty_r>:


int _isatty_r(struct _reent *r, int fd)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
    return 1;
 8003f72:	f04f 0301 	mov.w	r3, #1
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	f107 070c 	add.w	r7, r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop

08003f84 <_sbrk_r>:


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 8003f84:	b490      	push	{r4, r7}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 8003f8e:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8003f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <_sbrk_r+0x2a>
        __brkval = &end;
 8003f9c:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8003fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fa4:	f241 22dc 	movw	r2, #4828	; 0x12dc
 8003fa8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003fac:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 8003fae:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8003fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	18d2      	adds	r2, r2, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8003fbc:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8003fc0:	4623      	mov	r3, r4
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f240 0330 	movw	r3, #48	; 0x30
 8003fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	1acb      	subs	r3, r1, r3
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d906      	bls.n	8003fe2 <_sbrk_r+0x5e>
        r->_errno = ENOMEM;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f04f 020c 	mov.w	r2, #12
 8003fda:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	e012      	b.n	8004008 <_sbrk_r+0x84>
    }

    void *ret = __brkval;
 8003fe2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8003fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
    __brkval += incr;
 8003fee:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8003ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	18d2      	adds	r2, r2, r3
 8003ffc:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8004000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004004:	601a      	str	r2, [r3, #0]

    return ret;
 8004006:	68fb      	ldr	r3, [r7, #12]
}
 8004008:	4618      	mov	r0, r3
 800400a:	f107 0710 	add.w	r7, r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bc90      	pop	{r4, r7}
 8004012:	4770      	bx	lr

08004014 <_kill_r>:


int _kill_r(struct _reent *r, int pid, int signal)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
    r->_errno = ENOSYS;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f04f 0258 	mov.w	r2, #88	; 0x58
 8004026:	601a      	str	r2, [r3, #0]
    return -1;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800402c:	4618      	mov	r0, r3
 800402e:	f107 0714 	add.w	r7, r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <_getpid_r>:


int _getpid_r(struct _reent *r)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
    r->_errno = ENOSYS;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f04f 0258 	mov.w	r2, #88	; 0x58
 8004046:	601a      	str	r2, [r3, #0]
    return -1;
 8004048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800404c:	4618      	mov	r0, r3
 800404e:	f107 070c 	add.w	r7, r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <__malloc_lock>:


void __malloc_lock(struct _reent *r)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
    vPortEnterCritical();
 8004060:	f7fe f886 	bl	8002170 <vPortEnterCritical>
}
 8004064:	f107 0708 	add.w	r7, r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <__malloc_unlock>:


void __malloc_unlock(struct _reent *r)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
    vPortExitCritical();
 8004074:	f7fe f892 	bl	800219c <vPortExitCritical>
}
 8004078:	f107 0708 	add.w	r7, r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 8004086:	f7fe f873 	bl	8002170 <vPortEnterCritical>

    int t = TIM7->CNT;
 800408a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800408e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	607b      	str	r3, [r7, #4]
    if (t < t0)
 8004096:	f640 2380 	movw	r3, #2688	; 0xa80
 800409a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	dd03      	ble.n	80040b0 <get_us_time+0x30>
        t += 0x10000;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80040ae:	607b      	str	r3, [r7, #4]

    tickcount += t - t0;
 80040b0:	f640 2380 	movw	r3, #2688	; 0xa80
 80040b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	1ad1      	subs	r1, r2, r3
 80040be:	460a      	mov	r2, r1
 80040c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80040c4:	f640 2188 	movw	r1, #2696	; 0xa88
 80040c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80040cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040d0:	1880      	adds	r0, r0, r2
 80040d2:	eb41 0103 	adc.w	r1, r1, r3
 80040d6:	f640 2388 	movw	r3, #2696	; 0xa88
 80040da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80040de:	e9c3 0100 	strd	r0, r1, [r3]
    t0 = t;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	f640 2380 	movw	r3, #2688	; 0xa80
 80040ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80040ee:	801a      	strh	r2, [r3, #0]

    vPortExitCritical();
 80040f0:	f7fe f854 	bl	800219c <vPortExitCritical>

    return tickcount;
 80040f4:	f640 2388 	movw	r3, #2696	; 0xa88
 80040f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	f107 0708 	add.w	r7, r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <delay_us>:
 * \param  us  number of microseconds to wait.
 * \note   The actual delay will last between us and (us-1) microseconds.
 *         To wait _at_least_ 1 us, you should use delay_us(2).
 */
void delay_us(unsigned long us)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
    uint16_t  t0 = TIM7->CNT;
 8004114:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004118:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	81fb      	strh	r3, [r7, #14]
    for (;;) {
        int  t = TIM7->CNT;
 8004120:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004124:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	60bb      	str	r3, [r7, #8]
        if (t < t0)
 800412c:	89fa      	ldrh	r2, [r7, #14]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	429a      	cmp	r2, r3
 8004132:	dd03      	ble.n	800413c <delay_us+0x30>
            t += 0x10000;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800413a:	60bb      	str	r3, [r7, #8]

        if (us < t - t0)
 800413c:	89fb      	ldrh	r3, [r7, #14]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d808      	bhi.n	800415c <delay_us+0x50>
            return;

        us -= t - t0;
 800414a:	89fa      	ldrh	r2, [r7, #14]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	18d3      	adds	r3, r2, r3
 8004154:	607b      	str	r3, [r7, #4]
        t0  = t;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	81fb      	strh	r3, [r7, #14]
    }
 800415a:	e7e1      	b.n	8004120 <delay_us+0x14>
        int  t = TIM7->CNT;
        if (t < t0)
            t += 0x10000;

        if (us < t - t0)
            return;
 800415c:	bf00      	nop

        us -= t - t0;
        t0  = t;
    }
}
 800415e:	f107 0714 	add.w	r7, r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <delay_ms>:
 * Perform a millisecond delay
 *
 * \param  ms  number of milliseconds to wait.
 */
void delay_ms(unsigned long ms)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    delay_us(ms * 1000);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ffc6 	bl	800410c <delay_us>
}
 8004180:	f107 0708 	add.w	r7, r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 800418e:	463b      	mov	r3, r7
 8004190:	4618      	mov	r0, r3
 8004192:	f7fc febb 	bl	8000f0c <RCC_GetClocksFreq>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 8004196:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800419a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800419e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80041a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80041a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041a8:	f042 0220 	orr.w	r2, r2, #32
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 80041ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	f64d 6283 	movw	r2, #56963	; 0xde83
 80041bc:	f2c4 321b 	movt	r2, #17179	; 0x431b
 80041c0:	fba2 0201 	umull	r0, r2, r2, r1
 80041c4:	ea4f 4292 	mov.w	r2, r2, lsr #18
 80041c8:	b292      	uxth	r2, r2
 80041ca:	f102 32ff 	add.w	r2, r2, #4294967295
 80041ce:	b292      	uxth	r2, r2
 80041d0:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 80041d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80041da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 80041e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80041e8:	f04f 0201 	mov.w	r2, #1
 80041ec:	801a      	strh	r2, [r3, #0]
}
 80041ee:	f107 0710 	add.w	r7, r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
	...

08004200 <d_fill_name>:
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <d_fill_name+0x1e>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <d_fill_name+0x1e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d102      	bne.n	8004224 <d_fill_name+0x24>
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e00b      	b.n	800423c <d_fill_name+0x3c>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	f04f 0301 	mov.w	r3, #1
 800423c:	4618      	mov	r0, r3
 800423e:	f107 0714 	add.w	r7, r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <d_fill_extended_operator>:
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <d_fill_extended_operator+0x1e>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	db02      	blt.n	8004266 <d_fill_extended_operator+0x1e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <d_fill_extended_operator+0x24>
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	e00b      	b.n	8004284 <d_fill_extended_operator+0x3c>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	f04f 0301 	mov.w	r3, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f107 0714 	add.w	r7, r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <d_fill_ctor>:
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	460b      	mov	r3, r1
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	72fb      	strb	r3, [r7, #11]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <d_fill_ctor+0x26>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <d_fill_ctor+0x26>
 80042aa:	7afb      	ldrb	r3, [r7, #11]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <d_fill_ctor+0x26>
 80042b0:	7afb      	ldrb	r3, [r7, #11]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d902      	bls.n	80042bc <d_fill_ctor+0x2c>
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	e00b      	b.n	80042d4 <d_fill_ctor+0x44>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f04f 0207 	mov.w	r2, #7
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	7afa      	ldrb	r2, [r7, #11]
 80042c8:	711a      	strb	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	f04f 0301 	mov.w	r3, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f107 0714 	add.w	r7, r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <d_fill_dtor>:
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	460b      	mov	r3, r1
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	72fb      	strb	r3, [r7, #11]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <d_fill_dtor+0x26>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <d_fill_dtor+0x26>
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <d_fill_dtor+0x26>
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	2b03      	cmp	r3, #3
 8004304:	d902      	bls.n	800430c <d_fill_dtor+0x2c>
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	e00b      	b.n	8004324 <d_fill_dtor+0x44>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f04f 0208 	mov.w	r2, #8
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	7afa      	ldrb	r2, [r7, #11]
 8004318:	711a      	strb	r2, [r3, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	f04f 0301 	mov.w	r3, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f107 0714 	add.w	r7, r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <d_make_empty>:
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	429a      	cmp	r2, r3
 8004342:	db02      	blt.n	800434a <d_make_empty+0x1a>
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e013      	b.n	8004372 <d_make_empty+0x42>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6919      	ldr	r1, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	461a      	mov	r2, r3
 8004354:	4613      	mov	r3, r2
 8004356:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800435a:	189b      	adds	r3, r3, r2
 800435c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004360:	18cb      	adds	r3, r1, r3
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f103 0201 	add.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	615a      	str	r2, [r3, #20]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4618      	mov	r0, r3
 8004374:	f107 0714 	add.w	r7, r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop

08004380 <d_make_comp>:
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	460b      	mov	r3, r1
 800438e:	72fb      	strb	r3, [r7, #11]
 8004390:	7afb      	ldrb	r3, [r7, #11]
 8004392:	f103 33ff 	add.w	r3, r3, #4294967295
 8004396:	2b41      	cmp	r3, #65	; 0x41
 8004398:	f200 809d 	bhi.w	80044d6 <d_make_comp+0x156>
 800439c:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <d_make_comp+0x24>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080044ad 	.word	0x080044ad
 80043a8:	080044ad 	.word	0x080044ad
 80043ac:	080044ad 	.word	0x080044ad
 80043b0:	080044ad 	.word	0x080044ad
 80043b4:	080044d7 	.word	0x080044d7
 80043b8:	080044d7 	.word	0x080044d7
 80043bc:	080044d7 	.word	0x080044d7
 80043c0:	080044d7 	.word	0x080044d7
 80043c4:	080044bf 	.word	0x080044bf
 80043c8:	080044bf 	.word	0x080044bf
 80043cc:	080044ad 	.word	0x080044ad
 80043d0:	080044bf 	.word	0x080044bf
 80043d4:	080044bf 	.word	0x080044bf
 80043d8:	080044bf 	.word	0x080044bf
 80043dc:	080044bf 	.word	0x080044bf
 80043e0:	080044bf 	.word	0x080044bf
 80043e4:	080044bf 	.word	0x080044bf
 80043e8:	080044bf 	.word	0x080044bf
 80043ec:	080044bf 	.word	0x080044bf
 80043f0:	080044bf 	.word	0x080044bf
 80043f4:	080044bf 	.word	0x080044bf
 80043f8:	080044d7 	.word	0x080044d7
 80043fc:	080044dd 	.word	0x080044dd
 8004400:	080044dd 	.word	0x080044dd
 8004404:	080044dd 	.word	0x080044dd
 8004408:	080044dd 	.word	0x080044dd
 800440c:	080044dd 	.word	0x080044dd
 8004410:	080044dd 	.word	0x080044dd
 8004414:	080044ad 	.word	0x080044ad
 8004418:	080044bf 	.word	0x080044bf
 800441c:	080044bf 	.word	0x080044bf
 8004420:	080044bf 	.word	0x080044bf
 8004424:	080044bf 	.word	0x080044bf
 8004428:	080044bf 	.word	0x080044bf
 800442c:	080044d7 	.word	0x080044d7
 8004430:	080044bf 	.word	0x080044bf
 8004434:	080044dd 	.word	0x080044dd
 8004438:	080044cb 	.word	0x080044cb
 800443c:	080044ad 	.word	0x080044ad
 8004440:	080044d7 	.word	0x080044d7
 8004444:	080044ad 	.word	0x080044ad
 8004448:	080044dd 	.word	0x080044dd
 800444c:	080044dd 	.word	0x080044dd
 8004450:	080044d7 	.word	0x080044d7
 8004454:	080044d7 	.word	0x080044d7
 8004458:	080044bf 	.word	0x080044bf
 800445c:	080044ad 	.word	0x080044ad
 8004460:	080044ad 	.word	0x080044ad
 8004464:	080044ad 	.word	0x080044ad
 8004468:	080044ad 	.word	0x080044ad
 800446c:	080044ad 	.word	0x080044ad
 8004470:	080044ad 	.word	0x080044ad
 8004474:	080044ad 	.word	0x080044ad
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080044bf 	.word	0x080044bf
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044d7 	.word	0x080044d7
 8004488:	080044d7 	.word	0x080044d7
 800448c:	080044bf 	.word	0x080044bf
 8004490:	080044bf 	.word	0x080044bf
 8004494:	080044bf 	.word	0x080044bf
 8004498:	080044d7 	.word	0x080044d7
 800449c:	080044d7 	.word	0x080044d7
 80044a0:	080044d7 	.word	0x080044d7
 80044a4:	080044bf 	.word	0x080044bf
 80044a8:	080044ad 	.word	0x080044ad
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <d_make_comp+0x138>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d113      	bne.n	80044e0 <d_make_comp+0x160>
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e027      	b.n	800450e <d_make_comp+0x18e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10f      	bne.n	80044e4 <d_make_comp+0x164>
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e021      	b.n	800450e <d_make_comp+0x18e>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <d_make_comp+0x168>
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e01b      	b.n	800450e <d_make_comp+0x18e>
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e018      	b.n	800450e <d_make_comp+0x18e>
 80044dc:	bf00      	nop
 80044de:	e004      	b.n	80044ea <d_make_comp+0x16a>
 80044e0:	bf00      	nop
 80044e2:	e002      	b.n	80044ea <d_make_comp+0x16a>
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <d_make_comp+0x16a>
 80044e8:	bf00      	nop
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7ff ff20 	bl	8004330 <d_make_empty>
 80044f0:	4603      	mov	r3, r0
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <d_make_comp+0x18c>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	7afa      	ldrb	r2, [r7, #11]
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	4618      	mov	r0, r3
 8004510:	f107 0718 	add.w	r7, r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <d_make_demangle_mangled_name>:
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b5f      	cmp	r3, #95	; 0x5f
 800452a:	d106      	bne.n	800453a <d_make_demangle_mangled_name+0x22>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f103 0301 	add.w	r3, r3, #1
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b5a      	cmp	r3, #90	; 0x5a
 8004538:	d00a      	beq.n	8004550 <d_make_demangle_mangled_name+0x38>
 800453a:	6838      	ldr	r0, [r7, #0]
 800453c:	f007 fe98 	bl	800c270 <strlen>
 8004540:	4603      	mov	r3, r0
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	6839      	ldr	r1, [r7, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	f000 f814 	bl	8004574 <d_make_name>
 800454c:	4603      	mov	r3, r0
 800454e:	e00b      	b.n	8004568 <d_make_demangle_mangled_name+0x50>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f103 0202 	add.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	f000 fa4d 	bl	8004a00 <d_encoding>
 8004566:	4603      	mov	r3, r0
 8004568:	4618      	mov	r0, r3
 800456a:	f107 0708 	add.w	r7, r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop

08004574 <d_make_name>:
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff fed5 	bl	8004330 <d_make_empty>
 8004586:	4603      	mov	r3, r0
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	6978      	ldr	r0, [r7, #20]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	f7ff fe36 	bl	8004200 <d_fill_name>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <d_make_name+0x2c>
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	e000      	b.n	80045a2 <d_make_name+0x2e>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f107 0718 	add.w	r7, r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <d_make_builtin_type>:
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <d_make_builtin_type+0x16>
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e00f      	b.n	80045e2 <d_make_builtin_type+0x36>
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff feb4 	bl	8004330 <d_make_empty>
 80045c8:	4603      	mov	r3, r0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <d_make_builtin_type+0x34>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f04f 0223 	mov.w	r2, #35	; 0x23
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f107 0710 	add.w	r7, r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <d_make_operator>:
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fe9a 	bl	8004330 <d_make_empty>
 80045fc:	4603      	mov	r3, r0
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <d_make_operator+0x28>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f04f 022c 	mov.w	r2, #44	; 0x2c
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	605a      	str	r2, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4618      	mov	r0, r3
 8004618:	f107 0710 	add.w	r7, r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <d_make_extended_operator>:
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff fe7f 	bl	8004330 <d_make_empty>
 8004632:	4603      	mov	r3, r0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	6978      	ldr	r0, [r7, #20]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	f7ff fe04 	bl	8004248 <d_fill_extended_operator>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <d_make_extended_operator+0x2c>
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	e000      	b.n	800464e <d_make_extended_operator+0x2e>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	4618      	mov	r0, r3
 8004650:	f107 0718 	add.w	r7, r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <d_make_default_arg>:
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fe63 	bl	8004330 <d_make_empty>
 800466a:	4603      	mov	r3, r0
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <d_make_default_arg+0x30>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f04f 023f 	mov.w	r2, #63	; 0x3f
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	609a      	str	r2, [r3, #8]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	4618      	mov	r0, r3
 800468c:	f107 0718 	add.w	r7, r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <d_make_ctor>:
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	460b      	mov	r3, r1
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	72fb      	strb	r3, [r7, #11]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff fe44 	bl	8004330 <d_make_empty>
 80046a8:	4603      	mov	r3, r0
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	7afb      	ldrb	r3, [r7, #11]
 80046ae:	6978      	ldr	r0, [r7, #20]
 80046b0:	4619      	mov	r1, r3
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	f7ff fdec 	bl	8004290 <d_fill_ctor>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d102      	bne.n	80046c4 <d_make_ctor+0x30>
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	e000      	b.n	80046c6 <d_make_ctor+0x32>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f107 0718 	add.w	r7, r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <d_make_dtor>:
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	460b      	mov	r3, r1
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	72fb      	strb	r3, [r7, #11]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff fe26 	bl	8004330 <d_make_empty>
 80046e4:	4603      	mov	r3, r0
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	7afb      	ldrb	r3, [r7, #11]
 80046ea:	6978      	ldr	r0, [r7, #20]
 80046ec:	4619      	mov	r1, r3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	f7ff fdf6 	bl	80042e0 <d_fill_dtor>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <d_make_dtor+0x30>
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e000      	b.n	8004702 <d_make_dtor+0x32>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	4618      	mov	r0, r3
 8004704:	f107 0718 	add.w	r7, r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <d_make_template_param>:
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fe0a 	bl	8004330 <d_make_empty>
 800471c:	4603      	mov	r3, r0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d006      	beq.n	8004734 <d_make_template_param+0x28>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f04f 0205 	mov.w	r2, #5
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4618      	mov	r0, r3
 8004738:	f107 0710 	add.w	r7, r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <d_make_function_param>:
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fdf0 	bl	8004330 <d_make_empty>
 8004750:	4603      	mov	r3, r0
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <d_make_function_param+0x28>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f04f 0206 	mov.w	r2, #6
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4618      	mov	r0, r3
 800476c:	f107 0710 	add.w	r7, r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <d_make_sub>:
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fdd5 	bl	8004330 <d_make_empty>
 8004786:	4603      	mov	r3, r0
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d009      	beq.n	80047a4 <d_make_sub+0x30>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f04f 0216 	mov.w	r2, #22
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f107 0718 	add.w	r7, r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <d_mangled_name>:
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b5f      	cmp	r3, #95	; 0x5f
 80047c2:	d108      	bne.n	80047d6 <d_mangled_name+0x26>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f103 0201 	add.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e001      	b.n	80047da <d_mangled_name+0x2a>
 80047d6:	f04f 0301 	mov.w	r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <d_mangled_name+0x3a>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <d_mangled_name+0x3a>
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e054      	b.n	8004894 <d_mangled_name+0xe4>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b5a      	cmp	r3, #90	; 0x5a
 80047f2:	d108      	bne.n	8004806 <d_mangled_name+0x56>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f103 0201 	add.w	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	e001      	b.n	800480a <d_mangled_name+0x5a>
 8004806:	f04f 0301 	mov.w	r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <d_mangled_name+0x64>
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e03f      	b.n	8004894 <d_mangled_name+0xe4>
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	6839      	ldr	r1, [r7, #0]
 8004818:	f000 f8f2 	bl	8004a00 <d_encoding>
 800481c:	4603      	mov	r3, r0
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d035      	beq.n	8004892 <d_mangled_name+0xe2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02e      	beq.n	8004892 <d_mangled_name+0xe2>
 8004834:	e005      	b.n	8004842 <d_mangled_name+0x92>
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	68f9      	ldr	r1, [r7, #12]
 800483a:	f002 fcbb 	bl	80071b4 <d_clone_suffix>
 800483e:	4603      	mov	r3, r0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b2e      	cmp	r3, #46	; 0x2e
 800484a:	d122      	bne.n	8004892 <d_mangled_name+0xe2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f103 0301 	add.w	r3, r3, #1
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b60      	cmp	r3, #96	; 0x60
 8004858:	d906      	bls.n	8004868 <d_mangled_name+0xb8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f103 0301 	add.w	r3, r3, #1
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b7a      	cmp	r3, #122	; 0x7a
 8004866:	d9e6      	bls.n	8004836 <d_mangled_name+0x86>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f103 0301 	add.w	r3, r3, #1
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b5f      	cmp	r3, #95	; 0x5f
 8004874:	d0df      	beq.n	8004836 <d_mangled_name+0x86>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f103 0301 	add.w	r3, r3, #1
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b2f      	cmp	r3, #47	; 0x2f
 8004882:	d906      	bls.n	8004892 <d_mangled_name+0xe2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f103 0301 	add.w	r3, r3, #1
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b39      	cmp	r3, #57	; 0x39
 8004890:	d9d1      	bls.n	8004836 <d_mangled_name+0x86>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4618      	mov	r0, r3
 8004896:	f107 0710 	add.w	r7, r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop

080048a0 <has_return_type>:
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <has_return_type+0x14>
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	e01d      	b.n	80048f0 <has_return_type+0x50>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d008      	beq.n	80048ce <has_return_type+0x2e>
 80048bc:	2b04      	cmp	r3, #4
 80048be:	db03      	blt.n	80048c8 <has_return_type+0x28>
 80048c0:	f1a3 031a 	sub.w	r3, r3, #26
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d90d      	bls.n	80048e4 <has_return_type+0x44>
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e010      	b.n	80048f0 <has_return_type+0x50>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f812 	bl	80048fc <is_ctor_dtor_or_conversion>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf14      	ite	ne
 80048de:	2300      	movne	r3, #0
 80048e0:	2301      	moveq	r3, #1
 80048e2:	e005      	b.n	80048f0 <has_return_type+0x50>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff ffd9 	bl	80048a0 <has_return_type>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f107 0708 	add.w	r7, r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop

080048fc <is_ctor_dtor_or_conversion>:
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <is_ctor_dtor_or_conversion+0x14>
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e071      	b.n	80049f4 <is_ctor_dtor_or_conversion+0xf8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	f103 33ff 	add.w	r3, r3, #4294967295
 8004918:	2b2d      	cmp	r3, #45	; 0x2d
 800491a:	d85f      	bhi.n	80049dc <is_ctor_dtor_or_conversion+0xe0>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <is_ctor_dtor_or_conversion+0x28>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	080049e3 	.word	0x080049e3
 8004928:	080049e3 	.word	0x080049e3
 800492c:	080049dd 	.word	0x080049dd
 8004930:	080049dd 	.word	0x080049dd
 8004934:	080049dd 	.word	0x080049dd
 8004938:	080049dd 	.word	0x080049dd
 800493c:	080049f1 	.word	0x080049f1
 8004940:	080049f1 	.word	0x080049f1
 8004944:	080049dd 	.word	0x080049dd
 8004948:	080049dd 	.word	0x080049dd
 800494c:	080049dd 	.word	0x080049dd
 8004950:	080049dd 	.word	0x080049dd
 8004954:	080049dd 	.word	0x080049dd
 8004958:	080049dd 	.word	0x080049dd
 800495c:	080049dd 	.word	0x080049dd
 8004960:	080049dd 	.word	0x080049dd
 8004964:	080049dd 	.word	0x080049dd
 8004968:	080049dd 	.word	0x080049dd
 800496c:	080049dd 	.word	0x080049dd
 8004970:	080049dd 	.word	0x080049dd
 8004974:	080049dd 	.word	0x080049dd
 8004978:	080049dd 	.word	0x080049dd
 800497c:	080049dd 	.word	0x080049dd
 8004980:	080049dd 	.word	0x080049dd
 8004984:	080049dd 	.word	0x080049dd
 8004988:	080049dd 	.word	0x080049dd
 800498c:	080049dd 	.word	0x080049dd
 8004990:	080049dd 	.word	0x080049dd
 8004994:	080049dd 	.word	0x080049dd
 8004998:	080049dd 	.word	0x080049dd
 800499c:	080049dd 	.word	0x080049dd
 80049a0:	080049dd 	.word	0x080049dd
 80049a4:	080049dd 	.word	0x080049dd
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	080049dd 	.word	0x080049dd
 80049b0:	080049dd 	.word	0x080049dd
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049dd 	.word	0x080049dd
 80049c0:	080049dd 	.word	0x080049dd
 80049c4:	080049dd 	.word	0x080049dd
 80049c8:	080049dd 	.word	0x080049dd
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049dd 	.word	0x080049dd
 80049d4:	080049dd 	.word	0x080049dd
 80049d8:	080049f1 	.word	0x080049f1
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e008      	b.n	80049f4 <is_ctor_dtor_or_conversion+0xf8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff ff88 	bl	80048fc <is_ctor_dtor_or_conversion>
 80049ec:	4603      	mov	r3, r0
 80049ee:	e001      	b.n	80049f4 <is_ctor_dtor_or_conversion+0xf8>
 80049f0:	f04f 0301 	mov.w	r3, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f107 0708 	add.w	r7, r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop

08004a00 <d_encoding>:
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	73fb      	strb	r3, [r7, #15]
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	2b47      	cmp	r3, #71	; 0x47
 8004a16:	d002      	beq.n	8004a1e <d_encoding+0x1e>
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b54      	cmp	r3, #84	; 0x54
 8004a1c:	d104      	bne.n	8004a28 <d_encoding+0x28>
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fd1c 	bl	800545c <d_special_name>
 8004a24:	4603      	mov	r3, r0
 8004a26:	e05b      	b.n	8004ae0 <d_encoding+0xe0>
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f85f 	bl	8004aec <d_name>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d034      	beq.n	8004aa2 <d_encoding+0xa2>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d031      	beq.n	8004aa2 <d_encoding+0xa2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d12b      	bne.n	8004aa2 <d_encoding+0xa2>
 8004a4a:	e002      	b.n	8004a52 <d_encoding+0x52>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b1a      	cmp	r3, #26
 8004a58:	d0f8      	beq.n	8004a4c <d_encoding+0x4c>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b1b      	cmp	r3, #27
 8004a60:	d0f4      	beq.n	8004a4c <d_encoding+0x4c>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b1c      	cmp	r3, #28
 8004a68:	d0f0      	beq.n	8004a4c <d_encoding+0x4c>
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d115      	bne.n	8004a9e <d_encoding+0x9e>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	e002      	b.n	8004a80 <d_encoding+0x80>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b1a      	cmp	r3, #26
 8004a86:	d0f8      	beq.n	8004a7a <d_encoding+0x7a>
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b1b      	cmp	r3, #27
 8004a8e:	d0f4      	beq.n	8004a7a <d_encoding+0x7a>
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b1c      	cmp	r3, #28
 8004a96:	d0f0      	beq.n	8004a7a <d_encoding+0x7a>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	609a      	str	r2, [r3, #8]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	e01e      	b.n	8004ae0 <d_encoding+0xe0>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <d_encoding+0xbc>
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <d_encoding+0xbc>
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b45      	cmp	r3, #69	; 0x45
 8004aba:	d101      	bne.n	8004ac0 <d_encoding+0xc0>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	e00f      	b.n	8004ae0 <d_encoding+0xe0>
 8004ac0:	6978      	ldr	r0, [r7, #20]
 8004ac2:	f7ff feed 	bl	80048a0 <has_return_type>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4619      	mov	r1, r3
 8004acc:	f001 fc7e 	bl	80063cc <d_bare_function_type>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f04f 0103 	mov.w	r1, #3
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	f7ff fc51 	bl	8004380 <d_make_comp>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f107 0718 	add.w	r7, r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop

08004aec <d_name>:
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	73fb      	strb	r3, [r7, #15]
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
 8004b02:	2b0e      	cmp	r3, #14
 8004b04:	f200 8088 	bhi.w	8004c18 <d_name+0x12c>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <d_name+0x24>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b61 	.word	0x08004b61
 8004b14:	08004c19 	.word	0x08004c19
 8004b18:	08004b4d 	.word	0x08004b4d
 8004b1c:	08004c19 	.word	0x08004c19
 8004b20:	08004c19 	.word	0x08004c19
 8004b24:	08004c19 	.word	0x08004c19
 8004b28:	08004c19 	.word	0x08004c19
 8004b2c:	08004b6b 	.word	0x08004b6b
 8004b30:	08004c19 	.word	0x08004c19
 8004b34:	08004b61 	.word	0x08004b61
 8004b38:	08004c19 	.word	0x08004c19
 8004b3c:	08004c19 	.word	0x08004c19
 8004b40:	08004c19 	.word	0x08004c19
 8004b44:	08004c19 	.word	0x08004c19
 8004b48:	08004b57 	.word	0x08004b57
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f889 	bl	8004c64 <d_nested_name>
 8004b52:	4603      	mov	r3, r0
 8004b54:	e081      	b.n	8004c5a <d_name+0x16e>
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f002 f990 	bl	8006e7c <d_local_name>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	e07c      	b.n	8004c5a <d_name+0x16e>
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f96b 	bl	8004e3c <d_unqualified_name>
 8004b66:	4603      	mov	r3, r0
 8004b68:	e077      	b.n	8004c5a <d_name+0x16e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f103 0301 	add.w	r3, r3, #1
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b74      	cmp	r3, #116	; 0x74
 8004b76:	d00a      	beq.n	8004b8e <d_name+0xa2>
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f04f 0100 	mov.w	r1, #0
 8004b7e:	f002 fbbd 	bl	80072fc <d_substitution>
 8004b82:	4603      	mov	r3, r0
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	f04f 0301 	mov.w	r3, #1
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	e024      	b.n	8004bd8 <d_name+0xec>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f103 0202 	add.w	r2, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f643 2104 	movw	r1, #14852	; 0x3a04
 8004ba0:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004ba4:	f04f 0203 	mov.w	r2, #3
 8004ba8:	f7ff fce4 	bl	8004574 <d_make_name>
 8004bac:	4604      	mov	r4, r0
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f944 	bl	8004e3c <d_unqualified_name>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f04f 0101 	mov.w	r1, #1
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	f7ff fbdf 	bl	8004380 <d_make_comp>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	f103 0203 	add.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b49      	cmp	r3, #73	; 0x49
 8004be0:	d118      	bne.n	8004c14 <d_name+0x128>
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <d_name+0x110>
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	6979      	ldr	r1, [r7, #20]
 8004bec:	f002 fb5a 	bl	80072a4 <d_add_substitution>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <d_name+0x110>
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e02e      	b.n	8004c5a <d_name+0x16e>
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f001 fdc3 	bl	8006788 <d_template_args>
 8004c02:	4603      	mov	r3, r0
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f04f 0104 	mov.w	r1, #4
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	f7ff fbb8 	bl	8004380 <d_make_comp>
 8004c10:	4603      	mov	r3, r0
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	e020      	b.n	8004c5a <d_name+0x16e>
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f90f 	bl	8004e3c <d_unqualified_name>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b49      	cmp	r3, #73	; 0x49
 8004c2a:	d115      	bne.n	8004c58 <d_name+0x16c>
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	6979      	ldr	r1, [r7, #20]
 8004c30:	f002 fb38 	bl	80072a4 <d_add_substitution>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <d_name+0x154>
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e00c      	b.n	8004c5a <d_name+0x16e>
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 fda1 	bl	8006788 <d_template_args>
 8004c46:	4603      	mov	r3, r0
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f04f 0104 	mov.w	r1, #4
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	f7ff fb96 	bl	8004380 <d_make_comp>
 8004c54:	4603      	mov	r3, r0
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f107 071c 	add.w	r7, r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd90      	pop	{r4, r7, pc}

08004c64 <d_nested_name>:
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b4e      	cmp	r3, #78	; 0x4e
 8004c74:	d108      	bne.n	8004c88 <d_nested_name+0x24>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f103 0201 	add.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	e001      	b.n	8004c8c <d_nested_name+0x28>
 8004c88:	f04f 0301 	mov.w	r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <d_nested_name+0x32>
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e032      	b.n	8004cfc <d_nested_name+0x98>
 8004c96:	f107 0308 	add.w	r3, r7, #8
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f04f 0201 	mov.w	r2, #1
 8004ca2:	f001 fa77 	bl	8006194 <d_cv_qualifiers>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <d_nested_name+0x52>
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e022      	b.n	8004cfc <d_nested_name+0x98>
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f826 	bl	8004d08 <d_prefix>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <d_nested_name+0x6c>
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e015      	b.n	8004cfc <d_nested_name+0x98>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b45      	cmp	r3, #69	; 0x45
 8004cd8:	d108      	bne.n	8004cec <d_nested_name+0x88>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f103 0201 	add.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	e001      	b.n	8004cf0 <d_nested_name+0x8c>
 8004cec:	f04f 0301 	mov.w	r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <d_nested_name+0x96>
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	e000      	b.n	8004cfc <d_nested_name+0x98>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f107 0710 	add.w	r7, r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop

08004d08 <d_prefix>:
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e000      	b.n	8004d1a <d_prefix+0x12>
 8004d18:	bf00      	nop
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	72fb      	strb	r3, [r7, #11]
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <d_prefix+0x26>
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e081      	b.n	8004e32 <d_prefix+0x12a>
 8004d2e:	f04f 0301 	mov.w	r3, #1
 8004d32:	74fb      	strb	r3, [r7, #19]
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	2b2f      	cmp	r3, #47	; 0x2f
 8004d38:	d902      	bls.n	8004d40 <d_prefix+0x38>
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	2b39      	cmp	r3, #57	; 0x39
 8004d3e:	d911      	bls.n	8004d64 <d_prefix+0x5c>
 8004d40:	7afb      	ldrb	r3, [r7, #11]
 8004d42:	2b60      	cmp	r3, #96	; 0x60
 8004d44:	d902      	bls.n	8004d4c <d_prefix+0x44>
 8004d46:	7afb      	ldrb	r3, [r7, #11]
 8004d48:	2b7a      	cmp	r3, #122	; 0x7a
 8004d4a:	d90b      	bls.n	8004d64 <d_prefix+0x5c>
 8004d4c:	7afb      	ldrb	r3, [r7, #11]
 8004d4e:	2b43      	cmp	r3, #67	; 0x43
 8004d50:	d008      	beq.n	8004d64 <d_prefix+0x5c>
 8004d52:	7afb      	ldrb	r3, [r7, #11]
 8004d54:	2b44      	cmp	r3, #68	; 0x44
 8004d56:	d005      	beq.n	8004d64 <d_prefix+0x5c>
 8004d58:	7afb      	ldrb	r3, [r7, #11]
 8004d5a:	2b55      	cmp	r3, #85	; 0x55
 8004d5c:	d002      	beq.n	8004d64 <d_prefix+0x5c>
 8004d5e:	7afb      	ldrb	r3, [r7, #11]
 8004d60:	2b4c      	cmp	r3, #76	; 0x4c
 8004d62:	d105      	bne.n	8004d70 <d_prefix+0x68>
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f869 	bl	8004e3c <d_unqualified_name>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e03e      	b.n	8004dee <d_prefix+0xe6>
 8004d70:	7afb      	ldrb	r3, [r7, #11]
 8004d72:	2b53      	cmp	r3, #83	; 0x53
 8004d74:	d107      	bne.n	8004d86 <d_prefix+0x7e>
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f04f 0101 	mov.w	r1, #1
 8004d7c:	f002 fabe 	bl	80072fc <d_substitution>
 8004d80:	4603      	mov	r3, r0
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e033      	b.n	8004dee <d_prefix+0xe6>
 8004d86:	7afb      	ldrb	r3, [r7, #11]
 8004d88:	2b49      	cmp	r3, #73	; 0x49
 8004d8a:	d10e      	bne.n	8004daa <d_prefix+0xa2>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d102      	bne.n	8004d98 <d_prefix+0x90>
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	e04c      	b.n	8004e32 <d_prefix+0x12a>
 8004d98:	f04f 0304 	mov.w	r3, #4
 8004d9c:	74fb      	strb	r3, [r7, #19]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f001 fcf2 	bl	8006788 <d_template_args>
 8004da4:	4603      	mov	r3, r0
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e021      	b.n	8004dee <d_prefix+0xe6>
 8004daa:	7afb      	ldrb	r3, [r7, #11]
 8004dac:	2b54      	cmp	r3, #84	; 0x54
 8004dae:	d105      	bne.n	8004dbc <d_prefix+0xb4>
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 fcb5 	bl	8006720 <d_template_param>
 8004db6:	4603      	mov	r3, r0
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e018      	b.n	8004dee <d_prefix+0xe6>
 8004dbc:	7afb      	ldrb	r3, [r7, #11]
 8004dbe:	2b45      	cmp	r3, #69	; 0x45
 8004dc0:	d101      	bne.n	8004dc6 <d_prefix+0xbe>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	e035      	b.n	8004e32 <d_prefix+0x12a>
 8004dc6:	7afb      	ldrb	r3, [r7, #11]
 8004dc8:	2b4d      	cmp	r3, #77	; 0x4d
 8004dca:	d10d      	bne.n	8004de8 <d_prefix+0xe0>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <d_prefix+0xd0>
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	e02c      	b.n	8004e32 <d_prefix+0x12a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f103 0201 	add.w	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]
 8004de4:	bf00      	nop
 8004de6:	e797      	b.n	8004d18 <d_prefix+0x10>
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e021      	b.n	8004e32 <d_prefix+0x12a>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <d_prefix+0xf2>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e008      	b.n	8004e0c <d_prefix+0x104>
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f7ff fabc 	bl	8004380 <d_make_comp>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	7afb      	ldrb	r3, [r7, #11]
 8004e0e:	2b53      	cmp	r3, #83	; 0x53
 8004e10:	d082      	beq.n	8004d18 <d_prefix+0x10>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b45      	cmp	r3, #69	; 0x45
 8004e1a:	f43f af7d 	beq.w	8004d18 <d_prefix+0x10>
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	6979      	ldr	r1, [r7, #20]
 8004e22:	f002 fa3f 	bl	80072a4 <d_add_substitution>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af75 	bne.w	8004d18 <d_prefix+0x10>
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f107 0718 	add.w	r7, r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <d_unqualified_name>:
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	75fb      	strb	r3, [r7, #23]
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b2f      	cmp	r3, #47	; 0x2f
 8004e50:	d907      	bls.n	8004e62 <d_unqualified_name+0x26>
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	2b39      	cmp	r3, #57	; 0x39
 8004e56:	d804      	bhi.n	8004e62 <d_unqualified_name+0x26>
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f86d 	bl	8004f38 <d_source_name>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	e065      	b.n	8004f2e <d_unqualified_name+0xf2>
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
 8004e64:	2b60      	cmp	r3, #96	; 0x60
 8004e66:	d91c      	bls.n	8004ea2 <d_unqualified_name+0x66>
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	2b7a      	cmp	r3, #122	; 0x7a
 8004e6c:	d819      	bhi.n	8004ea2 <d_unqualified_name+0x66>
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f956 	bl	8005120 <d_operator_name>
 8004e74:	4603      	mov	r3, r0
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00f      	beq.n	8004e9e <d_unqualified_name+0x62>
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b2c      	cmp	r3, #44	; 0x2c
 8004e84:	d10b      	bne.n	8004e9e <d_unqualified_name+0x62>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	18d3      	adds	r3, r2, r3
 8004e94:	f103 0307 	add.w	r3, r3, #7
 8004e98:	461a      	mov	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	e045      	b.n	8004f2e <d_unqualified_name+0xf2>
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	2b43      	cmp	r3, #67	; 0x43
 8004ea6:	d002      	beq.n	8004eae <d_unqualified_name+0x72>
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
 8004eaa:	2b44      	cmp	r3, #68	; 0x44
 8004eac:	d104      	bne.n	8004eb8 <d_unqualified_name+0x7c>
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fd2e 	bl	8005910 <d_ctor_dtor_name>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	e03a      	b.n	8004f2e <d_unqualified_name+0xf2>
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b4c      	cmp	r3, #76	; 0x4c
 8004ebc:	d11b      	bne.n	8004ef6 <d_unqualified_name+0xba>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f103 0201 	add.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f834 	bl	8004f38 <d_source_name>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <d_unqualified_name+0xa4>
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	e026      	b.n	8004f2e <d_unqualified_name+0xf2>
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f002 f86f 	bl	8006fc4 <d_discriminator>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <d_unqualified_name+0xb6>
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e01d      	b.n	8004f2e <d_unqualified_name+0xf2>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	e01b      	b.n	8004f2e <d_unqualified_name+0xf2>
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b55      	cmp	r3, #85	; 0x55
 8004efa:	d116      	bne.n	8004f2a <d_unqualified_name+0xee>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f103 0301 	add.w	r3, r3, #1
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b6c      	cmp	r3, #108	; 0x6c
 8004f08:	d002      	beq.n	8004f10 <d_unqualified_name+0xd4>
 8004f0a:	2b74      	cmp	r3, #116	; 0x74
 8004f0c:	d005      	beq.n	8004f1a <d_unqualified_name+0xde>
 8004f0e:	e009      	b.n	8004f24 <d_unqualified_name+0xe8>
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f002 f87b 	bl	800700c <d_lambda>
 8004f16:	4603      	mov	r3, r0
 8004f18:	e009      	b.n	8004f2e <d_unqualified_name+0xf2>
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f002 f8f2 	bl	8007104 <d_unnamed_type>
 8004f20:	4603      	mov	r3, r0
 8004f22:	e004      	b.n	8004f2e <d_unqualified_name+0xf2>
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e001      	b.n	8004f2e <d_unqualified_name+0xf2>
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f107 0718 	add.w	r7, r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <d_source_name>:
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f817 	bl	8004f74 <d_number>
 8004f46:	4603      	mov	r3, r0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	dc02      	bgt.n	8004f56 <d_source_name+0x1e>
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e009      	b.n	8004f6a <d_source_name+0x32>
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	f000 f871 	bl	8005040 <d_identifier>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f107 0710 	add.w	r7, r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <d_number>:
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	74fb      	strb	r3, [r7, #19]
 8004f8a:	7cfb      	ldrb	r3, [r7, #19]
 8004f8c:	2b6e      	cmp	r3, #110	; 0x6e
 8004f8e:	d10c      	bne.n	8004faa <d_number+0x36>
 8004f90:	f04f 0301 	mov.w	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f103 0201 	add.w	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60da      	str	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	74fb      	strb	r3, [r7, #19]
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	2b2f      	cmp	r3, #47	; 0x2f
 8004fb4:	d902      	bls.n	8004fbc <d_number+0x48>
 8004fb6:	7cfb      	ldrb	r3, [r7, #19]
 8004fb8:	2b39      	cmp	r3, #57	; 0x39
 8004fba:	d90d      	bls.n	8004fd8 <d_number+0x64>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <d_number+0x56>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f1c3 0300 	rsb	r3, r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f107 071c 	add.w	r7, r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004fe0:	189b      	adds	r3, r3, r2
 8004fe2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	18d3      	adds	r3, r2, r3
 8004fec:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f103 0201 	add.w	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60da      	str	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	74fb      	strb	r3, [r7, #19]
 8005006:	e7d3      	b.n	8004fb0 <d_number+0x3c>

08005008 <d_number_component>:
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff f98d 	bl	8004330 <d_make_empty>
 8005016:	4603      	mov	r3, r0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <d_number_component+0x2c>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f04f 023a 	mov.w	r2, #58	; 0x3a
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ffa3 	bl	8004f74 <d_number>
 800502e:	4602      	mov	r2, r0
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4618      	mov	r0, r3
 8005038:	f107 0710 	add.w	r7, r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <d_identifier>:
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	461a      	mov	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad2      	subs	r2, r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	da02      	bge.n	8005066 <d_identifier+0x26>
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	e056      	b.n	8005114 <d_identifier+0xd4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	18d2      	adds	r2, r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60da      	str	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <d_identifier+0x54>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b24      	cmp	r3, #36	; 0x24
 8005086:	d105      	bne.n	8005094 <d_identifier+0x54>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f103 0201 	add.w	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	60da      	str	r2, [r3, #12]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b09      	cmp	r3, #9
 8005098:	dd36      	ble.n	8005108 <d_identifier+0xc8>
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f643 2108 	movw	r1, #14856	; 0x3a08
 80050a0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80050a4:	f04f 0208 	mov.w	r2, #8
 80050a8:	f006 faba 	bl	800b620 <memcmp>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d12a      	bne.n	8005108 <d_identifier+0xc8>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f103 0308 	add.w	r3, r3, #8
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b2e      	cmp	r3, #46	; 0x2e
 80050c0:	d007      	beq.n	80050d2 <d_identifier+0x92>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b5f      	cmp	r3, #95	; 0x5f
 80050c8:	d003      	beq.n	80050d2 <d_identifier+0x92>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b24      	cmp	r3, #36	; 0x24
 80050d0:	d11a      	bne.n	8005108 <d_identifier+0xc8>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f103 0301 	add.w	r3, r3, #1
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b4e      	cmp	r3, #78	; 0x4e
 80050dc:	d114      	bne.n	8005108 <d_identifier+0xc8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	461a      	mov	r2, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f103 0316 	add.w	r3, r3, #22
 80050ec:	461a      	mov	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f643 2114 	movw	r1, #14868	; 0x3a14
 80050f8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80050fc:	f04f 0215 	mov.w	r2, #21
 8005100:	f7ff fa38 	bl	8004574 <d_make_name>
 8005104:	4603      	mov	r3, r0
 8005106:	e005      	b.n	8005114 <d_identifier+0xd4>
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	f7ff fa31 	bl	8004574 <d_make_name>
 8005112:	4603      	mov	r3, r0
 8005114:	4618      	mov	r0, r3
 8005116:	f107 0710 	add.w	r7, r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop

08005120 <d_operator_name>:
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b089      	sub	sp, #36	; 0x24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <d_operator_name+0x22>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	7813      	ldrb	r3, [r2, #0]
 8005138:	f102 0101 	add.w	r1, r2, #1
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	60d1      	str	r1, [r2, #12]
 8005140:	e001      	b.n	8005146 <d_operator_name+0x26>
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <d_operator_name+0x42>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	7813      	ldrb	r3, [r2, #0]
 8005158:	f102 0101 	add.w	r1, r2, #1
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	60d1      	str	r1, [r2, #12]
 8005160:	e001      	b.n	8005166 <d_operator_name+0x46>
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	75bb      	strb	r3, [r7, #22]
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b76      	cmp	r3, #118	; 0x76
 800516c:	d113      	bne.n	8005196 <d_operator_name+0x76>
 800516e:	7dbb      	ldrb	r3, [r7, #22]
 8005170:	2b2f      	cmp	r3, #47	; 0x2f
 8005172:	d910      	bls.n	8005196 <d_operator_name+0x76>
 8005174:	7dbb      	ldrb	r3, [r7, #22]
 8005176:	2b39      	cmp	r3, #57	; 0x39
 8005178:	d80d      	bhi.n	8005196 <d_operator_name+0x76>
 800517a:	7dbb      	ldrb	r3, [r7, #22]
 800517c:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fed9 	bl	8004f38 <d_source_name>
 8005186:	4603      	mov	r3, r0
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4621      	mov	r1, r4
 800518c:	461a      	mov	r2, r3
 800518e:	f7ff fa47 	bl	8004620 <d_make_extended_operator>
 8005192:	4603      	mov	r3, r0
 8005194:	e065      	b.n	8005262 <d_operator_name+0x142>
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b63      	cmp	r3, #99	; 0x63
 800519a:	d110      	bne.n	80051be <d_operator_name+0x9e>
 800519c:	7dbb      	ldrb	r3, [r7, #22]
 800519e:	2b76      	cmp	r3, #118	; 0x76
 80051a0:	d10d      	bne.n	80051be <d_operator_name+0x9e>
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fc3a 	bl	8005a1c <d_type>
 80051a8:	4603      	mov	r3, r0
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f04f 012e 	mov.w	r1, #46	; 0x2e
 80051b0:	461a      	mov	r2, r3
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	f7ff f8e3 	bl	8004380 <d_make_comp>
 80051ba:	4603      	mov	r3, r0
 80051bc:	e051      	b.n	8005262 <d_operator_name+0x142>
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	f04f 0334 	mov.w	r3, #52	; 0x34
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e000      	b.n	80051ce <d_operator_name+0xae>
 80051cc:	bf00      	nop
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 80051d8:	18d3      	adds	r3, r2, r3
 80051da:	ea4f 0363 	mov.w	r3, r3, asr #1
 80051de:	461a      	mov	r2, r3
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	18d3      	adds	r3, r2, r3
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	ea4f 1203 	mov.w	r2, r3, lsl #4
 80051ec:	f643 33d0 	movw	r3, #15312	; 0x3bd0
 80051f0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80051f4:	18d3      	adds	r3, r2, r3
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	7dfa      	ldrb	r2, [r7, #23]
 8005200:	429a      	cmp	r2, r3
 8005202:	d10d      	bne.n	8005220 <d_operator_name+0x100>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f103 0301 	add.w	r3, r3, #1
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	7dba      	ldrb	r2, [r7, #22]
 8005210:	429a      	cmp	r2, r3
 8005212:	d105      	bne.n	8005220 <d_operator_name+0x100>
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	68f9      	ldr	r1, [r7, #12]
 8005218:	f7ff f9e8 	bl	80045ec <d_make_operator>
 800521c:	4603      	mov	r3, r0
 800521e:	e020      	b.n	8005262 <d_operator_name+0x142>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	7dfa      	ldrb	r2, [r7, #23]
 8005228:	429a      	cmp	r2, r3
 800522a:	d30d      	bcc.n	8005248 <d_operator_name+0x128>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	7dfa      	ldrb	r2, [r7, #23]
 8005234:	429a      	cmp	r2, r3
 8005236:	d10a      	bne.n	800524e <d_operator_name+0x12e>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f103 0301 	add.w	r3, r3, #1
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	7dba      	ldrb	r2, [r7, #22]
 8005244:	429a      	cmp	r2, r3
 8005246:	d202      	bcs.n	800524e <d_operator_name+0x12e>
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e003      	b.n	8005256 <d_operator_name+0x136>
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f103 0301 	add.w	r3, r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	429a      	cmp	r2, r3
 800525c:	d1b6      	bne.n	80051cc <d_operator_name+0xac>
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd90      	pop	{r4, r7, pc}

0800526c <d_make_character>:
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff f85a 	bl	8004330 <d_make_empty>
 800527c:	4603      	mov	r3, r0
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <d_make_character+0x28>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f04f 0239 	mov.w	r2, #57	; 0x39
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	605a      	str	r2, [r3, #4]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4618      	mov	r0, r3
 8005298:	f107 0710 	add.w	r7, r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <d_java_resource>:
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fe5d 	bl	8004f74 <d_number>
 80052ba:	4603      	mov	r3, r0
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	dc02      	bgt.n	80052ca <d_java_resource+0x2a>
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e0c2      	b.n	8005450 <d_java_resource+0x1b0>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <d_java_resource+0x50>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	781a      	ldrb	r2, [r3, #0]
 80052da:	2a5f      	cmp	r2, #95	; 0x5f
 80052dc:	bf0c      	ite	eq
 80052de:	2200      	moveq	r2, #0
 80052e0:	2201      	movne	r2, #1
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	f103 0101 	add.w	r1, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60d9      	str	r1, [r3, #12]
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	d002      	beq.n	80052f6 <d_java_resource+0x56>
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e0ac      	b.n	8005450 <d_java_resource+0x1b0>
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	e092      	b.n	8005432 <d_java_resource+0x192>
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	18d3      	adds	r3, r2, r3
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d102      	bne.n	8005322 <d_java_resource+0x82>
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	e096      	b.n	8005450 <d_java_resource+0x1b0>
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	2b24      	cmp	r3, #36	; 0x24
 8005326:	d142      	bne.n	80053ae <d_java_resource+0x10e>
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f103 0301 	add.w	r3, r3, #1
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	18d3      	adds	r3, r2, r3
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	f102 0201 	add.w	r2, r2, #1
 800533e:	613a      	str	r2, [r7, #16]
 8005340:	2b53      	cmp	r3, #83	; 0x53
 8005342:	d004      	beq.n	800534e <d_java_resource+0xae>
 8005344:	2b5f      	cmp	r3, #95	; 0x5f
 8005346:	d006      	beq.n	8005356 <d_java_resource+0xb6>
 8005348:	2b24      	cmp	r3, #36	; 0x24
 800534a:	d008      	beq.n	800535e <d_java_resource+0xbe>
 800534c:	e00b      	b.n	8005366 <d_java_resource+0xc6>
 800534e:	f04f 032f 	mov.w	r3, #47	; 0x2f
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	e00a      	b.n	800536c <d_java_resource+0xcc>
 8005356:	f04f 032e 	mov.w	r3, #46	; 0x2e
 800535a:	73fb      	strb	r3, [r7, #15]
 800535c:	e006      	b.n	800536c <d_java_resource+0xcc>
 800535e:	f04f 0324 	mov.w	r3, #36	; 0x24
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	e002      	b.n	800536c <d_java_resource+0xcc>
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	e071      	b.n	8005450 <d_java_resource+0x1b0>
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	4619      	mov	r1, r3
 8005372:	f7ff ff7b 	bl	800526c <d_make_character>
 8005376:	4603      	mov	r3, r0
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	18d2      	adds	r2, r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	60bb      	str	r3, [r7, #8]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d133      	bne.n	8005408 <d_java_resource+0x168>
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e054      	b.n	8005450 <d_java_resource+0x1b0>
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f103 0301 	add.w	r3, r3, #1
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	da0b      	bge.n	80053ce <d_java_resource+0x12e>
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	18d3      	adds	r3, r2, r3
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <d_java_resource+0x12e>
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	18d3      	adds	r3, r2, r3
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b24      	cmp	r3, #36	; 0x24
 80053cc:	d1eb      	bne.n	80053a6 <d_java_resource+0x106>
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	f7ff f8ce 	bl	8004574 <d_make_name>
 80053d8:	4603      	mov	r3, r0
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	18d2      	adds	r2, r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d102      	bne.n	8005408 <d_java_resource+0x168>
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	e023      	b.n	8005450 <d_java_resource+0x1b0>
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <d_java_resource+0x174>
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	e00e      	b.n	8005432 <d_java_resource+0x192>
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f04f 0138 	mov.w	r1, #56	; 0x38
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f7fe ffaf 	bl	8004380 <d_make_comp>
 8005422:	4603      	mov	r3, r0
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <d_java_resource+0x192>
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	e00e      	b.n	8005450 <d_java_resource+0x1b0>
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	f73f af69 	bgt.w	800530c <d_java_resource+0x6c>
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f04f 0137 	mov.w	r1, #55	; 0x37
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	f7fe ff9b 	bl	8004380 <d_make_comp>
 800544a:	4603      	mov	r3, r0
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4618      	mov	r0, r3
 8005452:	f107 0720 	add.w	r7, r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop

0800545c <d_special_name>:
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	f103 0214 	add.w	r2, r3, #20
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b54      	cmp	r3, #84	; 0x54
 8005478:	d108      	bne.n	800548c <d_special_name+0x30>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f103 0201 	add.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	f04f 0301 	mov.w	r3, #1
 800548a:	e001      	b.n	8005490 <d_special_name+0x34>
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8177 	beq.w	8005784 <d_special_name+0x328>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <d_special_name+0x54>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	7813      	ldrb	r3, [r2, #0]
 80054a6:	f102 0101 	add.w	r1, r2, #1
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	60d1      	str	r1, [r2, #12]
 80054ae:	e001      	b.n	80054b4 <d_special_name+0x58>
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	f1a3 0343 	sub.w	r3, r3, #67	; 0x43
 80054b8:	2b33      	cmp	r3, #51	; 0x33
 80054ba:	f200 8160 	bhi.w	800577e <d_special_name+0x322>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <d_special_name+0x68>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080056d5 	.word	0x080056d5
 80054c8:	0800577f 	.word	0x0800577f
 80054cc:	0800577f 	.word	0x0800577f
 80054d0:	08005747 	.word	0x08005747
 80054d4:	0800577f 	.word	0x0800577f
 80054d8:	0800577f 	.word	0x0800577f
 80054dc:	080055e5 	.word	0x080055e5
 80054e0:	08005763 	.word	0x08005763
 80054e4:	0800577f 	.word	0x0800577f
 80054e8:	0800577f 	.word	0x0800577f
 80054ec:	0800577f 	.word	0x0800577f
 80054f0:	0800577f 	.word	0x0800577f
 80054f4:	0800577f 	.word	0x0800577f
 80054f8:	0800577f 	.word	0x0800577f
 80054fc:	0800577f 	.word	0x0800577f
 8005500:	0800577f 	.word	0x0800577f
 8005504:	08005601 	.word	0x08005601
 8005508:	080055bd 	.word	0x080055bd
 800550c:	0800577f 	.word	0x0800577f
 8005510:	08005595 	.word	0x08005595
 8005514:	0800577f 	.word	0x0800577f
 8005518:	0800577f 	.word	0x0800577f
 800551c:	0800577f 	.word	0x0800577f
 8005520:	0800577f 	.word	0x0800577f
 8005524:	0800577f 	.word	0x0800577f
 8005528:	0800577f 	.word	0x0800577f
 800552c:	0800577f 	.word	0x0800577f
 8005530:	0800577f 	.word	0x0800577f
 8005534:	0800577f 	.word	0x0800577f
 8005538:	0800577f 	.word	0x0800577f
 800553c:	0800577f 	.word	0x0800577f
 8005540:	0800577f 	.word	0x0800577f
 8005544:	08005689 	.word	0x08005689
 8005548:	0800577f 	.word	0x0800577f
 800554c:	0800577f 	.word	0x0800577f
 8005550:	0800577f 	.word	0x0800577f
 8005554:	0800577f 	.word	0x0800577f
 8005558:	0800561d 	.word	0x0800561d
 800555c:	0800577f 	.word	0x0800577f
 8005560:	0800577f 	.word	0x0800577f
 8005564:	0800577f 	.word	0x0800577f
 8005568:	0800577f 	.word	0x0800577f
 800556c:	0800577f 	.word	0x0800577f
 8005570:	0800577f 	.word	0x0800577f
 8005574:	0800577f 	.word	0x0800577f
 8005578:	0800577f 	.word	0x0800577f
 800557c:	0800577f 	.word	0x0800577f
 8005580:	0800577f 	.word	0x0800577f
 8005584:	0800577f 	.word	0x0800577f
 8005588:	0800577f 	.word	0x0800577f
 800558c:	0800577f 	.word	0x0800577f
 8005590:	08005653 	.word	0x08005653
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	f1a3 0205 	sub.w	r2, r3, #5
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa3b 	bl	8005a1c <d_type>
 80055a6:	4603      	mov	r3, r0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f04f 0109 	mov.w	r1, #9
 80055ae:	461a      	mov	r2, r3
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	f7fe fee4 	bl	8004380 <d_make_comp>
 80055b8:	4603      	mov	r3, r0
 80055ba:	e146      	b.n	800584a <d_special_name+0x3ee>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	f1a3 020a 	sub.w	r2, r3, #10
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fa27 	bl	8005a1c <d_type>
 80055ce:	4603      	mov	r3, r0
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f04f 010a 	mov.w	r1, #10
 80055d6:	461a      	mov	r2, r3
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	f7fe fed0 	bl	8004380 <d_make_comp>
 80055e0:	4603      	mov	r3, r0
 80055e2:	e132      	b.n	800584a <d_special_name+0x3ee>
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fa19 	bl	8005a1c <d_type>
 80055ea:	4603      	mov	r3, r0
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f04f 010c 	mov.w	r1, #12
 80055f2:	461a      	mov	r2, r3
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	f7fe fec2 	bl	8004380 <d_make_comp>
 80055fc:	4603      	mov	r3, r0
 80055fe:	e124      	b.n	800584a <d_special_name+0x3ee>
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fa0b 	bl	8005a1c <d_type>
 8005606:	4603      	mov	r3, r0
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f04f 010d 	mov.w	r1, #13
 800560e:	461a      	mov	r2, r3
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	f7fe feb4 	bl	8004380 <d_make_comp>
 8005618:	4603      	mov	r3, r0
 800561a:	e116      	b.n	800584a <d_special_name+0x3ee>
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f04f 0168 	mov.w	r1, #104	; 0x68
 8005622:	f000 f917 	bl	8005854 <d_call_offset>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <d_special_name+0x1d6>
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	e10b      	b.n	800584a <d_special_name+0x3ee>
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f04f 0100 	mov.w	r1, #0
 8005638:	f7ff f9e2 	bl	8004a00 <d_encoding>
 800563c:	4603      	mov	r3, r0
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f04f 010f 	mov.w	r1, #15
 8005644:	461a      	mov	r2, r3
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	f7fe fe99 	bl	8004380 <d_make_comp>
 800564e:	4603      	mov	r3, r0
 8005650:	e0fb      	b.n	800584a <d_special_name+0x3ee>
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f04f 0176 	mov.w	r1, #118	; 0x76
 8005658:	f000 f8fc 	bl	8005854 <d_call_offset>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <d_special_name+0x20c>
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e0f0      	b.n	800584a <d_special_name+0x3ee>
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f04f 0100 	mov.w	r1, #0
 800566e:	f7ff f9c7 	bl	8004a00 <d_encoding>
 8005672:	4603      	mov	r3, r0
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f04f 0110 	mov.w	r1, #16
 800567a:	461a      	mov	r2, r3
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	f7fe fe7e 	bl	8004380 <d_make_comp>
 8005684:	4603      	mov	r3, r0
 8005686:	e0e0      	b.n	800584a <d_special_name+0x3ee>
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	f000 f8e1 	bl	8005854 <d_call_offset>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d102      	bne.n	800569e <d_special_name+0x242>
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e0d5      	b.n	800584a <d_special_name+0x3ee>
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f04f 0100 	mov.w	r1, #0
 80056a4:	f000 f8d6 	bl	8005854 <d_call_offset>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <d_special_name+0x258>
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	e0ca      	b.n	800584a <d_special_name+0x3ee>
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f04f 0100 	mov.w	r1, #0
 80056ba:	f7ff f9a1 	bl	8004a00 <d_encoding>
 80056be:	4603      	mov	r3, r0
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f04f 0111 	mov.w	r1, #17
 80056c6:	461a      	mov	r2, r3
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	f7fe fe58 	bl	8004380 <d_make_comp>
 80056d0:	4603      	mov	r3, r0
 80056d2:	e0ba      	b.n	800584a <d_special_name+0x3ee>
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f9a1 	bl	8005a1c <d_type>
 80056da:	4603      	mov	r3, r0
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fc48 	bl	8004f74 <d_number>
 80056e4:	4603      	mov	r3, r0
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da02      	bge.n	80056f4 <d_special_name+0x298>
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	e0aa      	b.n	800584a <d_special_name+0x3ee>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b5f      	cmp	r3, #95	; 0x5f
 80056fc:	d108      	bne.n	8005710 <d_special_name+0x2b4>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f103 0201 	add.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	e001      	b.n	8005714 <d_special_name+0x2b8>
 8005710:	f04f 0301 	mov.w	r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <d_special_name+0x2c2>
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e095      	b.n	800584a <d_special_name+0x3ee>
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f97c 	bl	8005a1c <d_type>
 8005724:	4603      	mov	r3, r0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f103 0205 	add.w	r2, r3, #5
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f04f 010b 	mov.w	r1, #11
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f7fe fe1f 	bl	8004380 <d_make_comp>
 8005742:	4603      	mov	r3, r0
 8005744:	e081      	b.n	800584a <d_special_name+0x3ee>
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f968 	bl	8005a1c <d_type>
 800574c:	4603      	mov	r3, r0
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f04f 010e 	mov.w	r1, #14
 8005754:	461a      	mov	r2, r3
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	f7fe fe11 	bl	8004380 <d_make_comp>
 800575e:	4603      	mov	r3, r0
 8005760:	e073      	b.n	800584a <d_special_name+0x3ee>
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f95a 	bl	8005a1c <d_type>
 8005768:	4603      	mov	r3, r0
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f04f 0112 	mov.w	r1, #18
 8005770:	461a      	mov	r2, r3
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	f7fe fe03 	bl	8004380 <d_make_comp>
 800577a:	4603      	mov	r3, r0
 800577c:	e065      	b.n	800584a <d_special_name+0x3ee>
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	e062      	b.n	800584a <d_special_name+0x3ee>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b47      	cmp	r3, #71	; 0x47
 800578c:	d108      	bne.n	80057a0 <d_special_name+0x344>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f103 0201 	add.w	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60da      	str	r2, [r3, #12]
 800579a:	f04f 0301 	mov.w	r3, #1
 800579e:	e001      	b.n	80057a4 <d_special_name+0x348>
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d04e      	beq.n	8005846 <d_special_name+0x3ea>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <d_special_name+0x366>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	7813      	ldrb	r3, [r2, #0]
 80057b8:	f102 0101 	add.w	r1, r2, #1
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	60d1      	str	r1, [r2, #12]
 80057c0:	e001      	b.n	80057c6 <d_special_name+0x36a>
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	2b52      	cmp	r3, #82	; 0x52
 80057c8:	d017      	beq.n	80057fa <d_special_name+0x39e>
 80057ca:	2b52      	cmp	r3, #82	; 0x52
 80057cc:	dc02      	bgt.n	80057d4 <d_special_name+0x378>
 80057ce:	2b41      	cmp	r3, #65	; 0x41
 80057d0:	d021      	beq.n	8005816 <d_special_name+0x3ba>
 80057d2:	e035      	b.n	8005840 <d_special_name+0x3e4>
 80057d4:	2b56      	cmp	r3, #86	; 0x56
 80057d6:	d002      	beq.n	80057de <d_special_name+0x382>
 80057d8:	2b72      	cmp	r3, #114	; 0x72
 80057da:	d02c      	beq.n	8005836 <d_special_name+0x3da>
 80057dc:	e030      	b.n	8005840 <d_special_name+0x3e4>
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff f984 	bl	8004aec <d_name>
 80057e4:	4603      	mov	r3, r0
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f04f 0113 	mov.w	r1, #19
 80057ec:	461a      	mov	r2, r3
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	f7fe fdc5 	bl	8004380 <d_make_comp>
 80057f6:	4603      	mov	r3, r0
 80057f8:	e027      	b.n	800584a <d_special_name+0x3ee>
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff f976 	bl	8004aec <d_name>
 8005800:	4603      	mov	r3, r0
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f04f 0114 	mov.w	r1, #20
 8005808:	461a      	mov	r2, r3
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	f7fe fdb7 	bl	8004380 <d_make_comp>
 8005812:	4603      	mov	r3, r0
 8005814:	e019      	b.n	800584a <d_special_name+0x3ee>
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	f7ff f8f0 	bl	8004a00 <d_encoding>
 8005820:	4603      	mov	r3, r0
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f04f 0115 	mov.w	r1, #21
 8005828:	461a      	mov	r2, r3
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	f7fe fda7 	bl	8004380 <d_make_comp>
 8005832:	4603      	mov	r3, r0
 8005834:	e009      	b.n	800584a <d_special_name+0x3ee>
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fd32 	bl	80052a0 <d_java_resource>
 800583c:	4603      	mov	r3, r0
 800583e:	e004      	b.n	800584a <d_special_name+0x3ee>
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	e001      	b.n	800584a <d_special_name+0x3ee>
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f107 0718 	add.w	r7, r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <d_call_offset>:
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10f      	bne.n	8005884 <d_call_offset+0x30>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <d_call_offset+0x2a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	7813      	ldrb	r3, [r2, #0]
 8005874:	f102 0101 	add.w	r1, r2, #1
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	60d1      	str	r1, [r2, #12]
 800587c:	e001      	b.n	8005882 <d_call_offset+0x2e>
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b68      	cmp	r3, #104	; 0x68
 8005888:	d103      	bne.n	8005892 <d_call_offset+0x3e>
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fb72 	bl	8004f74 <d_number>
 8005890:	e021      	b.n	80058d6 <d_call_offset+0x82>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b76      	cmp	r3, #118	; 0x76
 8005896:	d11b      	bne.n	80058d0 <d_call_offset+0x7c>
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff fb6b 	bl	8004f74 <d_number>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b5f      	cmp	r3, #95	; 0x5f
 80058a6:	d108      	bne.n	80058ba <d_call_offset+0x66>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f103 0201 	add.w	r2, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e001      	b.n	80058be <d_call_offset+0x6a>
 80058ba:	f04f 0301 	mov.w	r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <d_call_offset+0x74>
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	e01d      	b.n	8005904 <d_call_offset+0xb0>
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fb53 	bl	8004f74 <d_number>
 80058ce:	e002      	b.n	80058d6 <d_call_offset+0x82>
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	e016      	b.n	8005904 <d_call_offset+0xb0>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b5f      	cmp	r3, #95	; 0x5f
 80058de:	d108      	bne.n	80058f2 <d_call_offset+0x9e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f103 0201 	add.w	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	e001      	b.n	80058f6 <d_call_offset+0xa2>
 80058f2:	f04f 0301 	mov.w	r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <d_call_offset+0xac>
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	e001      	b.n	8005904 <d_call_offset+0xb0>
 8005900:	f04f 0301 	mov.w	r3, #1
 8005904:	4618      	mov	r0, r3
 8005906:	f107 0708 	add.w	r7, r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop

08005910 <d_ctor_dtor_name>:
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01a      	beq.n	8005956 <d_ctor_dtor_name+0x46>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <d_ctor_dtor_name+0x2c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	18d2      	adds	r2, r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
 800593a:	e00c      	b.n	8005956 <d_ctor_dtor_name+0x46>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b16      	cmp	r3, #22
 8005944:	d107      	bne.n	8005956 <d_ctor_dtor_name+0x46>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	18d2      	adds	r2, r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b43      	cmp	r3, #67	; 0x43
 800595e:	d002      	beq.n	8005966 <d_ctor_dtor_name+0x56>
 8005960:	2b44      	cmp	r3, #68	; 0x44
 8005962:	d02a      	beq.n	80059ba <d_ctor_dtor_name+0xaa>
 8005964:	e053      	b.n	8005a0e <d_ctor_dtor_name+0xfe>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f103 0301 	add.w	r3, r3, #1
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b32      	cmp	r3, #50	; 0x32
 8005972:	d007      	beq.n	8005984 <d_ctor_dtor_name+0x74>
 8005974:	2b33      	cmp	r3, #51	; 0x33
 8005976:	d009      	beq.n	800598c <d_ctor_dtor_name+0x7c>
 8005978:	2b31      	cmp	r3, #49	; 0x31
 800597a:	d10b      	bne.n	8005994 <d_ctor_dtor_name+0x84>
 800597c:	f04f 0301 	mov.w	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
 8005982:	e00a      	b.n	800599a <d_ctor_dtor_name+0x8a>
 8005984:	f04f 0302 	mov.w	r3, #2
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	e006      	b.n	800599a <d_ctor_dtor_name+0x8a>
 800598c:	f04f 0303 	mov.w	r3, #3
 8005990:	73fb      	strb	r3, [r7, #15]
 8005992:	e002      	b.n	800599a <d_ctor_dtor_name+0x8a>
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e03b      	b.n	8005a12 <d_ctor_dtor_name+0x102>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f103 0202 	add.w	r2, r3, #2
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	7bfa      	ldrb	r2, [r7, #15]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	4611      	mov	r1, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	f7fe fe6f 	bl	8004694 <d_make_ctor>
 80059b6:	4603      	mov	r3, r0
 80059b8:	e02b      	b.n	8005a12 <d_ctor_dtor_name+0x102>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f103 0301 	add.w	r3, r3, #1
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b31      	cmp	r3, #49	; 0x31
 80059c6:	d007      	beq.n	80059d8 <d_ctor_dtor_name+0xc8>
 80059c8:	2b32      	cmp	r3, #50	; 0x32
 80059ca:	d009      	beq.n	80059e0 <d_ctor_dtor_name+0xd0>
 80059cc:	2b30      	cmp	r3, #48	; 0x30
 80059ce:	d10b      	bne.n	80059e8 <d_ctor_dtor_name+0xd8>
 80059d0:	f04f 0301 	mov.w	r3, #1
 80059d4:	73bb      	strb	r3, [r7, #14]
 80059d6:	e00a      	b.n	80059ee <d_ctor_dtor_name+0xde>
 80059d8:	f04f 0302 	mov.w	r3, #2
 80059dc:	73bb      	strb	r3, [r7, #14]
 80059de:	e006      	b.n	80059ee <d_ctor_dtor_name+0xde>
 80059e0:	f04f 0303 	mov.w	r3, #3
 80059e4:	73bb      	strb	r3, [r7, #14]
 80059e6:	e002      	b.n	80059ee <d_ctor_dtor_name+0xde>
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e011      	b.n	8005a12 <d_ctor_dtor_name+0x102>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f103 0202 	add.w	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60da      	str	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	7bba      	ldrb	r2, [r7, #14]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	4611      	mov	r1, r2
 8005a04:	461a      	mov	r2, r3
 8005a06:	f7fe fe63 	bl	80046d0 <d_make_dtor>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	e001      	b.n	8005a12 <d_ctor_dtor_name+0x102>
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f107 0710 	add.w	r7, r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <d_type>:
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	74fb      	strb	r3, [r7, #19]
 8005a2c:	7cfb      	ldrb	r3, [r7, #19]
 8005a2e:	2b72      	cmp	r3, #114	; 0x72
 8005a30:	d005      	beq.n	8005a3e <d_type+0x22>
 8005a32:	7cfb      	ldrb	r3, [r7, #19]
 8005a34:	2b56      	cmp	r3, #86	; 0x56
 8005a36:	d002      	beq.n	8005a3e <d_type+0x22>
 8005a38:	7cfb      	ldrb	r3, [r7, #19]
 8005a3a:	2b4b      	cmp	r3, #75	; 0x4b
 8005a3c:	d126      	bne.n	8005a8c <d_type+0x70>
 8005a3e:	f107 0308 	add.w	r3, r7, #8
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4619      	mov	r1, r3
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f000 fba3 	bl	8006194 <d_cv_qualifiers>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <d_type+0x42>
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	e386      	b.n	800616c <d_type+0x750>
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ffdc 	bl	8005a1c <d_type>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <d_type+0x66>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	4619      	mov	r1, r3
 8005a78:	f001 fc14 	bl	80072a4 <d_add_substitution>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <d_type+0x6c>
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	e371      	b.n	800616c <d_type+0x750>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	e36f      	b.n	800616c <d_type+0x750>
 8005a8c:	f04f 0301 	mov.w	r3, #1
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	7cfb      	ldrb	r3, [r7, #19]
 8005a94:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8005a98:	2b4a      	cmp	r3, #74	; 0x4a
 8005a9a:	f200 8352 	bhi.w	8006142 <d_type+0x726>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <d_type+0x88>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005c57 	.word	0x08005c57
 8005aa8:	08005c57 	.word	0x08005c57
 8005aac:	08005c57 	.word	0x08005c57
 8005ab0:	08005c57 	.word	0x08005c57
 8005ab4:	08005c57 	.word	0x08005c57
 8005ab8:	08005c57 	.word	0x08005c57
 8005abc:	08005c57 	.word	0x08005c57
 8005ac0:	08005c57 	.word	0x08005c57
 8005ac4:	08005c57 	.word	0x08005c57
 8005ac8:	08005c57 	.word	0x08005c57
 8005acc:	08006143 	.word	0x08006143
 8005ad0:	08006143 	.word	0x08006143
 8005ad4:	08006143 	.word	0x08006143
 8005ad8:	08006143 	.word	0x08006143
 8005adc:	08006143 	.word	0x08006143
 8005ae0:	08006143 	.word	0x08006143
 8005ae4:	08006143 	.word	0x08006143
 8005ae8:	08005c63 	.word	0x08005c63
 8005aec:	08006143 	.word	0x08006143
 8005af0:	08005dc9 	.word	0x08005dc9
 8005af4:	08005e4d 	.word	0x08005e4d
 8005af8:	08006143 	.word	0x08006143
 8005afc:	08005c4b 	.word	0x08005c4b
 8005b00:	08005df3 	.word	0x08005df3
 8005b04:	08006143 	.word	0x08006143
 8005b08:	08006143 	.word	0x08006143
 8005b0c:	08006143 	.word	0x08006143
 8005b10:	08006143 	.word	0x08006143
 8005b14:	08006143 	.word	0x08006143
 8005b18:	08005c6f 	.word	0x08005c6f
 8005b1c:	08005c57 	.word	0x08005c57
 8005b20:	08005d4b 	.word	0x08005d4b
 8005b24:	08005d75 	.word	0x08005d75
 8005b28:	08006143 	.word	0x08006143
 8005b2c:	08005d9f 	.word	0x08005d9f
 8005b30:	08005cc3 	.word	0x08005cc3
 8005b34:	08005c7b 	.word	0x08005c7b
 8005b38:	08005e1d 	.word	0x08005e1d
 8005b3c:	08006143 	.word	0x08006143
 8005b40:	08006143 	.word	0x08006143
 8005b44:	08006143 	.word	0x08006143
 8005b48:	08006143 	.word	0x08006143
 8005b4c:	08005c57 	.word	0x08005c57
 8005b50:	08006143 	.word	0x08006143
 8005b54:	08006143 	.word	0x08006143
 8005b58:	08006143 	.word	0x08006143
 8005b5c:	08006143 	.word	0x08006143
 8005b60:	08006143 	.word	0x08006143
 8005b64:	08006143 	.word	0x08006143
 8005b68:	08005bd1 	.word	0x08005bd1
 8005b6c:	08005bd1 	.word	0x08005bd1
 8005b70:	08005bd1 	.word	0x08005bd1
 8005b74:	08005bd1 	.word	0x08005bd1
 8005b78:	08005bd1 	.word	0x08005bd1
 8005b7c:	08005bd1 	.word	0x08005bd1
 8005b80:	08005bd1 	.word	0x08005bd1
 8005b84:	08005bd1 	.word	0x08005bd1
 8005b88:	08005bd1 	.word	0x08005bd1
 8005b8c:	08005bd1 	.word	0x08005bd1
 8005b90:	08006143 	.word	0x08006143
 8005b94:	08005bd1 	.word	0x08005bd1
 8005b98:	08005bd1 	.word	0x08005bd1
 8005b9c:	08005bd1 	.word	0x08005bd1
 8005ba0:	08005bd1 	.word	0x08005bd1
 8005ba4:	08006143 	.word	0x08006143
 8005ba8:	08006143 	.word	0x08006143
 8005bac:	08006143 	.word	0x08006143
 8005bb0:	08005bd1 	.word	0x08005bd1
 8005bb4:	08005bd1 	.word	0x08005bd1
 8005bb8:	08005c21 	.word	0x08005c21
 8005bbc:	08005bd1 	.word	0x08005bd1
 8005bc0:	08005bd1 	.word	0x08005bd1
 8005bc4:	08005bd1 	.word	0x08005bd1
 8005bc8:	08005bd1 	.word	0x08005bd1
 8005bcc:	08005bd1 	.word	0x08005bd1
 8005bd0:	7cfa      	ldrb	r2, [r7, #19]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005bd8:	189b      	adds	r3, r3, r2
 8005bda:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005bde:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 8005be2:	f1a2 0204 	sub.w	r2, r2, #4
 8005be6:	f243 7370 	movw	r3, #14192	; 0x3770
 8005bea:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005bee:	18d3      	adds	r3, r2, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f7fe fcda 	bl	80045ac <d_make_builtin_type>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	18d2      	adds	r2, r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f103 0201 	add.w	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60da      	str	r2, [r3, #12]
 8005c1e:	e296      	b.n	800614e <d_type+0x732>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f103 0201 	add.w	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60da      	str	r2, [r3, #12]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff f983 	bl	8004f38 <d_source_name>
 8005c32:	4603      	mov	r3, r0
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f04f 0124 	mov.w	r1, #36	; 0x24
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	f7fe fb9e 	bl	8004380 <d_make_comp>
 8005c44:	4603      	mov	r3, r0
 8005c46:	60bb      	str	r3, [r7, #8]
 8005c48:	e281      	b.n	800614e <d_type+0x732>
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fb16 	bl	800627c <d_function_type>
 8005c50:	4603      	mov	r3, r0
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	e27b      	b.n	800614e <d_type+0x732>
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fbf6 	bl	8006448 <d_class_enum_type>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	e275      	b.n	800614e <d_type+0x732>
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fbfe 	bl	8006464 <d_array_type>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	60bb      	str	r3, [r7, #8]
 8005c6c:	e26f      	b.n	800614e <d_type+0x732>
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fcc0 	bl	80065f4 <d_pointer_to_member_type>
 8005c74:	4603      	mov	r3, r0
 8005c76:	60bb      	str	r3, [r7, #8]
 8005c78:	e269      	b.n	800614e <d_type+0x732>
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fd50 	bl	8006720 <d_template_param>
 8005c80:	4603      	mov	r3, r0
 8005c82:	60bb      	str	r3, [r7, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b49      	cmp	r3, #73	; 0x49
 8005c8c:	f040 825c 	bne.w	8006148 <d_type+0x72c>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4619      	mov	r1, r3
 8005c96:	f001 fb05 	bl	80072a4 <d_add_substitution>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d102      	bne.n	8005ca6 <d_type+0x28a>
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	e262      	b.n	800616c <d_type+0x750>
 8005ca6:	68bc      	ldr	r4, [r7, #8]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fd6d 	bl	8006788 <d_template_args>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f04f 0104 	mov.w	r1, #4
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	f7fe fb62 	bl	8004380 <d_make_comp>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	60bb      	str	r3, [r7, #8]
 8005cc0:	e242      	b.n	8006148 <d_type+0x72c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	74bb      	strb	r3, [r7, #18]
 8005cca:	7cbb      	ldrb	r3, [r7, #18]
 8005ccc:	2b2f      	cmp	r3, #47	; 0x2f
 8005cce:	d902      	bls.n	8005cd6 <d_type+0x2ba>
 8005cd0:	7cbb      	ldrb	r3, [r7, #18]
 8005cd2:	2b39      	cmp	r3, #57	; 0x39
 8005cd4:	d908      	bls.n	8005ce8 <d_type+0x2cc>
 8005cd6:	7cbb      	ldrb	r3, [r7, #18]
 8005cd8:	2b5f      	cmp	r3, #95	; 0x5f
 8005cda:	d005      	beq.n	8005ce8 <d_type+0x2cc>
 8005cdc:	7cbb      	ldrb	r3, [r7, #18]
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d920      	bls.n	8005d24 <d_type+0x308>
 8005ce2:	7cbb      	ldrb	r3, [r7, #18]
 8005ce4:	2b5a      	cmp	r3, #90	; 0x5a
 8005ce6:	d81d      	bhi.n	8005d24 <d_type+0x308>
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	f001 fb05 	bl	80072fc <d_substitution>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b49      	cmp	r3, #73	; 0x49
 8005cfe:	d10d      	bne.n	8005d1c <d_type+0x300>
 8005d00:	68bc      	ldr	r4, [r7, #8]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fd40 	bl	8006788 <d_template_args>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f04f 0104 	mov.w	r1, #4
 8005d10:	4622      	mov	r2, r4
 8005d12:	f7fe fb35 	bl	8004380 <d_make_comp>
 8005d16:	4603      	mov	r3, r0
 8005d18:	60bb      	str	r3, [r7, #8]
 8005d1a:	e015      	b.n	8005d48 <d_type+0x32c>
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e011      	b.n	8005d48 <d_type+0x32c>
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fb8f 	bl	8006448 <d_class_enum_type>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 820b 	beq.w	800614c <d_type+0x730>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b16      	cmp	r3, #22
 8005d3c:	f040 8206 	bne.w	800614c <d_type+0x730>
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	e201      	b.n	800614c <d_type+0x730>
 8005d48:	e200      	b.n	800614c <d_type+0x730>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f103 0201 	add.w	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60da      	str	r2, [r3, #12]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fe60 	bl	8005a1c <d_type>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f04f 0120 	mov.w	r1, #32
 8005d64:	461a      	mov	r2, r3
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	f7fe fb09 	bl	8004380 <d_make_comp>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	e1ec      	b.n	800614e <d_type+0x732>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f103 0201 	add.w	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff fe4b 	bl	8005a1c <d_type>
 8005d86:	4603      	mov	r3, r0
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f04f 011e 	mov.w	r1, #30
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	f7fe faf4 	bl	8004380 <d_make_comp>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	60bb      	str	r3, [r7, #8]
 8005d9c:	e1d7      	b.n	800614e <d_type+0x732>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f103 0201 	add.w	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fe36 	bl	8005a1c <d_type>
 8005db0:	4603      	mov	r3, r0
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f04f 011f 	mov.w	r1, #31
 8005db8:	461a      	mov	r2, r3
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	f7fe fadf 	bl	8004380 <d_make_comp>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	e1c2      	b.n	800614e <d_type+0x732>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f103 0201 	add.w	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff fe21 	bl	8005a1c <d_type>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f04f 0121 	mov.w	r1, #33	; 0x21
 8005de2:	461a      	mov	r2, r3
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	f7fe faca 	bl	8004380 <d_make_comp>
 8005dec:	4603      	mov	r3, r0
 8005dee:	60bb      	str	r3, [r7, #8]
 8005df0:	e1ad      	b.n	800614e <d_type+0x732>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f103 0201 	add.w	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fe0c 	bl	8005a1c <d_type>
 8005e04:	4603      	mov	r3, r0
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f04f 0122 	mov.w	r1, #34	; 0x22
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	f7fe fab5 	bl	8004380 <d_make_comp>
 8005e16:	4603      	mov	r3, r0
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	e198      	b.n	800614e <d_type+0x732>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f103 0201 	add.w	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60da      	str	r2, [r3, #12]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff f885 	bl	8004f38 <d_source_name>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff fdf2 	bl	8005a1c <d_type>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f04f 011d 	mov.w	r1, #29
 8005e42:	f7fe fa9d 	bl	8004380 <d_make_comp>
 8005e46:	4603      	mov	r3, r0
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	e180      	b.n	800614e <d_type+0x732>
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f103 0201 	add.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <d_type+0x45c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	7813      	ldrb	r3, [r2, #0]
 8005e6e:	f102 0101 	add.w	r1, r2, #1
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	60d1      	str	r1, [r2, #12]
 8005e76:	e001      	b.n	8005e7c <d_type+0x460>
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	74fb      	strb	r3, [r7, #19]
 8005e7e:	7cfb      	ldrb	r3, [r7, #19]
 8005e80:	f1a3 0346 	sub.w	r3, r3, #70	; 0x46
 8005e84:	2b30      	cmp	r3, #48	; 0x30
 8005e86:	f200 8157 	bhi.w	8006138 <d_type+0x71c>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <d_type+0x474>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	0800607b 	.word	0x0800607b
 8005e94:	08006139 	.word	0x08006139
 8005e98:	08006139 	.word	0x08006139
 8005e9c:	08006139 	.word	0x08006139
 8005ea0:	08006139 	.word	0x08006139
 8005ea4:	08006139 	.word	0x08006139
 8005ea8:	08006139 	.word	0x08006139
 8005eac:	08006139 	.word	0x08006139
 8005eb0:	08006139 	.word	0x08006139
 8005eb4:	08006139 	.word	0x08006139
 8005eb8:	08006139 	.word	0x08006139
 8005ebc:	08006139 	.word	0x08006139
 8005ec0:	08006139 	.word	0x08006139
 8005ec4:	08006139 	.word	0x08006139
 8005ec8:	08005f55 	.word	0x08005f55
 8005ecc:	08006139 	.word	0x08006139
 8005ed0:	08006139 	.word	0x08006139
 8005ed4:	08006139 	.word	0x08006139
 8005ed8:	08006139 	.word	0x08006139
 8005edc:	08006139 	.word	0x08006139
 8005ee0:	08006139 	.word	0x08006139
 8005ee4:	08006139 	.word	0x08006139
 8005ee8:	08006139 	.word	0x08006139
 8005eec:	08006139 	.word	0x08006139
 8005ef0:	08006139 	.word	0x08006139
 8005ef4:	08006139 	.word	0x08006139
 8005ef8:	08006139 	.word	0x08006139
 8005efc:	08006139 	.word	0x08006139
 8005f00:	08006139 	.word	0x08006139
 8005f04:	08006139 	.word	0x08006139
 8005f08:	08005fe5 	.word	0x08005fe5
 8005f0c:	08006003 	.word	0x08006003
 8005f10:	08005fc7 	.word	0x08005fc7
 8005f14:	08006139 	.word	0x08006139
 8005f18:	08006021 	.word	0x08006021
 8005f1c:	0800605d 	.word	0x0800605d
 8005f20:	08006139 	.word	0x08006139
 8005f24:	08006139 	.word	0x08006139
 8005f28:	08006139 	.word	0x08006139
 8005f2c:	08006139 	.word	0x08006139
 8005f30:	0800611b 	.word	0x0800611b
 8005f34:	08006139 	.word	0x08006139
 8005f38:	08005fa9 	.word	0x08005fa9
 8005f3c:	08006139 	.word	0x08006139
 8005f40:	08006139 	.word	0x08006139
 8005f44:	0800603f 	.word	0x0800603f
 8005f48:	08005f55 	.word	0x08005f55
 8005f4c:	08006139 	.word	0x08006139
 8005f50:	0800610f 	.word	0x0800610f
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fd23 	bl	80069a0 <d_expression>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f04f 013b 	mov.w	r1, #59	; 0x3b
 8005f62:	461a      	mov	r2, r3
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	f7fe fa0a 	bl	8004380 <d_make_comp>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80e3 	beq.w	800613e <d_type+0x722>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00e      	beq.n	8005fa0 <d_type+0x584>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	2a45      	cmp	r2, #69	; 0x45
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2200      	moveq	r2, #0
 8005f8e:	2201      	movne	r2, #1
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	f103 0101 	add.w	r1, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60d9      	str	r1, [r3, #12]
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	f000 80cf 	beq.w	800613e <d_type+0x722>
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	e0ca      	b.n	800613e <d_type+0x722>
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff fd37 	bl	8005a1c <d_type>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f04f 0141 	mov.w	r1, #65	; 0x41
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	f7fe f9e0 	bl	8004380 <d_make_comp>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	60bb      	str	r3, [r7, #8]
 8005fc4:	e0bc      	b.n	8006140 <d_type+0x724>
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	496b      	ldr	r1, [pc, #428]	; (8006178 <d_type+0x75c>)
 8005fca:	f7fe faef 	bl	80045ac <d_make_builtin_type>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	18d2      	adds	r2, r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe2:	e0ad      	b.n	8006140 <d_type+0x724>
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4965      	ldr	r1, [pc, #404]	; (800617c <d_type+0x760>)
 8005fe8:	f7fe fae0 	bl	80045ac <d_make_builtin_type>
 8005fec:	4603      	mov	r3, r0
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	18d2      	adds	r2, r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8006000:	e09e      	b.n	8006140 <d_type+0x724>
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	495e      	ldr	r1, [pc, #376]	; (8006180 <d_type+0x764>)
 8006006:	f7fe fad1 	bl	80045ac <d_make_builtin_type>
 800600a:	4603      	mov	r3, r0
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	18d2      	adds	r2, r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
 800601e:	e08f      	b.n	8006140 <d_type+0x724>
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	4958      	ldr	r1, [pc, #352]	; (8006184 <d_type+0x768>)
 8006024:	f7fe fac2 	bl	80045ac <d_make_builtin_type>
 8006028:	4603      	mov	r3, r0
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	18d2      	adds	r2, r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
 800603c:	e080      	b.n	8006140 <d_type+0x724>
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4951      	ldr	r1, [pc, #324]	; (8006188 <d_type+0x76c>)
 8006042:	f7fe fab3 	bl	80045ac <d_make_builtin_type>
 8006046:	4603      	mov	r3, r0
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	18d2      	adds	r2, r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
 800605a:	e071      	b.n	8006140 <d_type+0x724>
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	494b      	ldr	r1, [pc, #300]	; (800618c <d_type+0x770>)
 8006060:	f7fe faa4 	bl	80045ac <d_make_builtin_type>
 8006064:	4603      	mov	r3, r0
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	18d2      	adds	r2, r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
 8006078:	e062      	b.n	8006140 <d_type+0x724>
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fe f958 	bl	8004330 <d_make_empty>
 8006080:	4603      	mov	r3, r0
 8006082:	60bb      	str	r3, [r7, #8]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f04f 0228 	mov.w	r2, #40	; 0x28
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68d2      	ldr	r2, [r2, #12]
 8006092:	7812      	ldrb	r2, [r2, #0]
 8006094:	2a2f      	cmp	r2, #47	; 0x2f
 8006096:	d907      	bls.n	80060a8 <d_type+0x68c>
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	68d2      	ldr	r2, [r2, #12]
 800609c:	7812      	ldrb	r2, [r2, #0]
 800609e:	2a39      	cmp	r2, #57	; 0x39
 80060a0:	d802      	bhi.n	80060a8 <d_type+0x68c>
 80060a2:	f04f 0201 	mov.w	r2, #1
 80060a6:	e001      	b.n	80060ac <d_type+0x690>
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	b292      	uxth	r2, r2
 80060ae:	811a      	strh	r2, [r3, #8]
 80060b0:	891b      	ldrh	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <d_type+0x6a0>
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fe ff5c 	bl	8004f74 <d_number>
 80060bc:	68bc      	ldr	r4, [r7, #8]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fcac 	bl	8005a1c <d_type>
 80060c4:	4603      	mov	r3, r0
 80060c6:	6063      	str	r3, [r4, #4]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <d_type+0x6ba>
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e04a      	b.n	800616c <d_type+0x750>
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fe ff4c 	bl	8004f74 <d_number>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <d_type+0x6da>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	7813      	ldrb	r3, [r2, #0]
 80060ec:	f102 0101 	add.w	r1, r2, #1
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	60d1      	str	r1, [r2, #12]
 80060f4:	e001      	b.n	80060fa <d_type+0x6de>
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	74fb      	strb	r3, [r7, #19]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	7cfa      	ldrb	r2, [r7, #19]
 8006100:	2a73      	cmp	r2, #115	; 0x73
 8006102:	bf14      	ite	ne
 8006104:	2200      	movne	r2, #0
 8006106:	2201      	moveq	r2, #1
 8006108:	b292      	uxth	r2, r2
 800610a:	815a      	strh	r2, [r3, #10]
 800610c:	e018      	b.n	8006140 <d_type+0x724>
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa28 	bl	8006564 <d_vector_type>
 8006114:	4603      	mov	r3, r0
 8006116:	60bb      	str	r3, [r7, #8]
 8006118:	e012      	b.n	8006140 <d_type+0x724>
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	491c      	ldr	r1, [pc, #112]	; (8006190 <d_type+0x774>)
 800611e:	f7fe fa45 	bl	80045ac <d_make_builtin_type>
 8006122:	4603      	mov	r3, r0
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	18d2      	adds	r2, r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	631a      	str	r2, [r3, #48]	; 0x30
 8006136:	e003      	b.n	8006140 <d_type+0x724>
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e016      	b.n	800616c <d_type+0x750>
 800613e:	bf00      	nop
 8006140:	e005      	b.n	800614e <d_type+0x732>
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	e011      	b.n	800616c <d_type+0x750>
 8006148:	bf00      	nop
 800614a:	e000      	b.n	800614e <d_type+0x732>
 800614c:	bf00      	nop
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <d_type+0x74e>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4619      	mov	r1, r3
 800615a:	f001 f8a3 	bl	80072a4 <d_add_substitution>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <d_type+0x74e>
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	e000      	b.n	800616c <d_type+0x750>
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f107 071c 	add.w	r7, r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	bd90      	pop	{r4, r7, pc}
 8006176:	bf00      	nop
 8006178:	08013978 	.word	0x08013978
 800617c:	0801398c 	.word	0x0801398c
 8006180:	080139a0 	.word	0x080139a0
 8006184:	080139b4 	.word	0x080139b4
 8006188:	080139c8 	.word	0x080139c8
 800618c:	080139dc 	.word	0x080139dc
 8006190:	080139f0 	.word	0x080139f0

08006194 <d_cv_qualifiers>:
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	75fb      	strb	r3, [r7, #23]
 80061a8:	e059      	b.n	800625e <d_cv_qualifiers+0xca>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f103 0201 	add.w	r2, r3, #1
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	2b72      	cmp	r3, #114	; 0x72
 80061ba:	d110      	bne.n	80061de <d_cv_qualifiers+0x4a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <d_cv_qualifiers+0x34>
 80061c2:	f04f 031a 	mov.w	r3, #26
 80061c6:	e001      	b.n	80061cc <d_cv_qualifiers+0x38>
 80061c8:	f04f 0317 	mov.w	r3, #23
 80061cc:	75bb      	strb	r3, [r7, #22]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	f103 0309 	add.w	r3, r3, #9
 80061d6:	461a      	mov	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	631a      	str	r2, [r3, #48]	; 0x30
 80061dc:	e023      	b.n	8006226 <d_cv_qualifiers+0x92>
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b56      	cmp	r3, #86	; 0x56
 80061e2:	d110      	bne.n	8006206 <d_cv_qualifiers+0x72>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <d_cv_qualifiers+0x5c>
 80061ea:	f04f 031b 	mov.w	r3, #27
 80061ee:	e001      	b.n	80061f4 <d_cv_qualifiers+0x60>
 80061f0:	f04f 0318 	mov.w	r3, #24
 80061f4:	75bb      	strb	r3, [r7, #22]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	f103 0309 	add.w	r3, r3, #9
 80061fe:	461a      	mov	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	631a      	str	r2, [r3, #48]	; 0x30
 8006204:	e00f      	b.n	8006226 <d_cv_qualifiers+0x92>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <d_cv_qualifiers+0x7e>
 800620c:	f04f 031c 	mov.w	r3, #28
 8006210:	e001      	b.n	8006216 <d_cv_qualifiers+0x82>
 8006212:	f04f 0319 	mov.w	r3, #25
 8006216:	75bb      	strb	r3, [r7, #22]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	f103 0306 	add.w	r3, r3, #6
 8006220:	461a      	mov	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
 8006226:	7dbb      	ldrb	r3, [r7, #22]
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	4619      	mov	r1, r3
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	f7fe f8a4 	bl	8004380 <d_make_comp>
 8006238:	4602      	mov	r2, r0
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <d_cv_qualifiers+0xb8>
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	e012      	b.n	8006272 <d_cv_qualifiers+0xde>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f103 0304 	add.w	r3, r3, #4
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	75fb      	strb	r3, [r7, #23]
 800625e:	7dfb      	ldrb	r3, [r7, #23]
 8006260:	2b72      	cmp	r3, #114	; 0x72
 8006262:	d0a2      	beq.n	80061aa <d_cv_qualifiers+0x16>
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	2b56      	cmp	r3, #86	; 0x56
 8006268:	d09f      	beq.n	80061aa <d_cv_qualifiers+0x16>
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	2b4b      	cmp	r3, #75	; 0x4b
 800626e:	d09c      	beq.n	80061aa <d_cv_qualifiers+0x16>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f107 0718 	add.w	r7, r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <d_function_type>:
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b46      	cmp	r3, #70	; 0x46
 800628c:	d108      	bne.n	80062a0 <d_function_type+0x24>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f103 0201 	add.w	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60da      	str	r2, [r3, #12]
 800629a:	f04f 0300 	mov.w	r3, #0
 800629e:	e001      	b.n	80062a4 <d_function_type+0x28>
 80062a0:	f04f 0301 	mov.w	r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <d_function_type+0x32>
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	e027      	b.n	80062fe <d_function_type+0x82>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b59      	cmp	r3, #89	; 0x59
 80062b6:	d105      	bne.n	80062c4 <d_function_type+0x48>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f103 0201 	add.w	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60da      	str	r2, [r3, #12]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f04f 0101 	mov.w	r1, #1
 80062ca:	f000 f87f 	bl	80063cc <d_bare_function_type>
 80062ce:	4603      	mov	r3, r0
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b45      	cmp	r3, #69	; 0x45
 80062da:	d108      	bne.n	80062ee <d_function_type+0x72>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f103 0201 	add.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	60da      	str	r2, [r3, #12]
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e001      	b.n	80062f2 <d_function_type+0x76>
 80062ee:	f04f 0301 	mov.w	r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <d_function_type+0x80>
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	e000      	b.n	80062fe <d_function_type+0x82>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4618      	mov	r0, r3
 8006300:	f107 0710 	add.w	r7, r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <d_parmlist>:
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	f107 0308 	add.w	r3, r7, #8
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	74fb      	strb	r3, [r7, #19]
 8006324:	7cfb      	ldrb	r3, [r7, #19]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d028      	beq.n	800637c <d_parmlist+0x74>
 800632a:	7cfb      	ldrb	r3, [r7, #19]
 800632c:	2b45      	cmp	r3, #69	; 0x45
 800632e:	d025      	beq.n	800637c <d_parmlist+0x74>
 8006330:	7cfb      	ldrb	r3, [r7, #19]
 8006332:	2b2e      	cmp	r3, #46	; 0x2e
 8006334:	d022      	beq.n	800637c <d_parmlist+0x74>
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff fb70 	bl	8005a1c <d_type>
 800633c:	4603      	mov	r3, r0
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <d_parmlist+0x44>
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	e03a      	b.n	80063c2 <d_parmlist+0xba>
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	f7fe f812 	bl	8004380 <d_make_comp>
 800635c:	4602      	mov	r2, r0
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <d_parmlist+0x68>
 800636a:	f04f 0300 	mov.w	r3, #0
 800636e:	e028      	b.n	80063c2 <d_parmlist+0xba>
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f103 0308 	add.w	r3, r3, #8
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e7cf      	b.n	800631c <d_parmlist+0x14>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <d_parmlist+0x80>
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	e01c      	b.n	80063c2 <d_parmlist+0xba>
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d117      	bne.n	80063c0 <d_parmlist+0xb8>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b23      	cmp	r3, #35	; 0x23
 8006398:	d112      	bne.n	80063c0 <d_parmlist+0xb8>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	7c1b      	ldrb	r3, [r3, #16]
 80063a2:	2b09      	cmp	r3, #9
 80063a4:	d10c      	bne.n	80063c0 <d_parmlist+0xb8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	1ad2      	subs	r2, r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f107 0718 	add.w	r7, r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <d_bare_function_type>:
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	74fb      	strb	r3, [r7, #19]
 80063de:	7cfb      	ldrb	r3, [r7, #19]
 80063e0:	2b4a      	cmp	r3, #74	; 0x4a
 80063e2:	d108      	bne.n	80063f6 <d_bare_function_type+0x2a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f103 0201 	add.w	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	60da      	str	r2, [r3, #12]
 80063f0:	f04f 0301 	mov.w	r3, #1
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <d_bare_function_type+0x46>
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fb0d 	bl	8005a1c <d_type>
 8006402:	4603      	mov	r3, r0
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d105      	bne.n	8006418 <d_bare_function_type+0x4c>
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e015      	b.n	800643e <d_bare_function_type+0x72>
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff ff75 	bl	8006308 <d_parmlist>
 800641e:	4603      	mov	r3, r0
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <d_bare_function_type+0x62>
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	e007      	b.n	800643e <d_bare_function_type+0x72>
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f04f 0125 	mov.w	r1, #37	; 0x25
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f7fd ffa2 	bl	8004380 <d_make_comp>
 800643c:	4603      	mov	r3, r0
 800643e:	4618      	mov	r0, r3
 8006440:	f107 0718 	add.w	r7, r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <d_class_enum_type>:
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7fe fb4b 	bl	8004aec <d_name>
 8006456:	4603      	mov	r3, r0
 8006458:	4618      	mov	r0, r3
 800645a:	f107 0708 	add.w	r7, r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop

08006464 <d_array_type>:
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b41      	cmp	r3, #65	; 0x41
 8006474:	d108      	bne.n	8006488 <d_array_type+0x24>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f103 0201 	add.w	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	e001      	b.n	800648c <d_array_type+0x28>
 8006488:	f04f 0301 	mov.w	r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <d_array_type+0x32>
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	e061      	b.n	800655a <d_array_type+0xf6>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	74fb      	strb	r3, [r7, #19]
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	2b5f      	cmp	r3, #95	; 0x5f
 80064a2:	d103      	bne.n	80064ac <d_array_type+0x48>
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	e036      	b.n	800651a <d_array_type+0xb6>
 80064ac:	7cfb      	ldrb	r3, [r7, #19]
 80064ae:	2b2f      	cmp	r3, #47	; 0x2f
 80064b0:	d927      	bls.n	8006502 <d_array_type+0x9e>
 80064b2:	7cfb      	ldrb	r3, [r7, #19]
 80064b4:	2b39      	cmp	r3, #57	; 0x39
 80064b6:	d824      	bhi.n	8006502 <d_array_type+0x9e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f103 0201 	add.w	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60da      	str	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	74fb      	strb	r3, [r7, #19]
 80064d2:	7cfb      	ldrb	r3, [r7, #19]
 80064d4:	2b2f      	cmp	r3, #47	; 0x2f
 80064d6:	d902      	bls.n	80064de <d_array_type+0x7a>
 80064d8:	7cfb      	ldrb	r3, [r7, #19]
 80064da:	2b39      	cmp	r3, #57	; 0x39
 80064dc:	d9ef      	bls.n	80064be <d_array_type+0x5a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	461a      	mov	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	461a      	mov	r2, r3
 80064ee:	f7fe f841 	bl	8004574 <d_make_name>
 80064f2:	4603      	mov	r3, r0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10d      	bne.n	8006518 <d_array_type+0xb4>
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e02b      	b.n	800655a <d_array_type+0xf6>
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa4c 	bl	80069a0 <d_expression>
 8006508:	4603      	mov	r3, r0
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <d_array_type+0xb6>
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	e020      	b.n	800655a <d_array_type+0xf6>
 8006518:	bf00      	nop
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b5f      	cmp	r3, #95	; 0x5f
 8006522:	d108      	bne.n	8006536 <d_array_type+0xd2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f103 0201 	add.w	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	e001      	b.n	800653a <d_array_type+0xd6>
 8006536:	f04f 0301 	mov.w	r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <d_array_type+0xe0>
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e00a      	b.n	800655a <d_array_type+0xf6>
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fa69 	bl	8005a1c <d_type>
 800654a:	4603      	mov	r3, r0
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f04f 0126 	mov.w	r1, #38	; 0x26
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	f7fd ff14 	bl	8004380 <d_make_comp>
 8006558:	4603      	mov	r3, r0
 800655a:	4618      	mov	r0, r3
 800655c:	f107 0718 	add.w	r7, r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <d_vector_type>:
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	72fb      	strb	r3, [r7, #11]
 8006574:	7afb      	ldrb	r3, [r7, #11]
 8006576:	2b5f      	cmp	r3, #95	; 0x5f
 8006578:	d10b      	bne.n	8006592 <d_vector_type+0x2e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f103 0201 	add.w	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	60da      	str	r2, [r3, #12]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa0a 	bl	80069a0 <d_expression>
 800658c:	4603      	mov	r3, r0
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e004      	b.n	800659c <d_vector_type+0x38>
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fe fd38 	bl	8005008 <d_number_component>
 8006598:	4603      	mov	r3, r0
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d102      	bne.n	80065a8 <d_vector_type+0x44>
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	e01f      	b.n	80065e8 <d_vector_type+0x84>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b5f      	cmp	r3, #95	; 0x5f
 80065b0:	d108      	bne.n	80065c4 <d_vector_type+0x60>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f103 0201 	add.w	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60da      	str	r2, [r3, #12]
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	e001      	b.n	80065c8 <d_vector_type+0x64>
 80065c4:	f04f 0301 	mov.w	r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <d_vector_type+0x6e>
 80065cc:	f04f 0300 	mov.w	r3, #0
 80065d0:	e00a      	b.n	80065e8 <d_vector_type+0x84>
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fa22 	bl	8005a1c <d_type>
 80065d8:	4603      	mov	r3, r0
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f04f 0129 	mov.w	r1, #41	; 0x29
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f7fd fecd 	bl	8004380 <d_make_comp>
 80065e6:	4603      	mov	r3, r0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f107 0710 	add.w	r7, r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop

080065f4 <d_pointer_to_member_type>:
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b4d      	cmp	r3, #77	; 0x4d
 8006604:	d108      	bne.n	8006618 <d_pointer_to_member_type+0x24>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f103 0201 	add.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	60da      	str	r2, [r3, #12]
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	e001      	b.n	800661c <d_pointer_to_member_type+0x28>
 8006618:	f04f 0301 	mov.w	r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <d_pointer_to_member_type+0x32>
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	e03e      	b.n	80066a4 <d_pointer_to_member_type+0xb0>
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff f9f8 	bl	8005a1c <d_type>
 800662c:	4603      	mov	r3, r0
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	f107 030c 	add.w	r3, r7, #12
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4619      	mov	r1, r3
 8006638:	f04f 0201 	mov.w	r2, #1
 800663c:	f7ff fdaa 	bl	8006194 <d_cv_qualifiers>
 8006640:	4603      	mov	r3, r0
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <d_pointer_to_member_type+0x5c>
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	e029      	b.n	80066a4 <d_pointer_to_member_type+0xb0>
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff f9e3 	bl	8005a1c <d_type>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d102      	bne.n	800666a <d_pointer_to_member_type+0x76>
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	e01c      	b.n	80066a4 <d_pointer_to_member_type+0xb0>
 800666a:	f107 030c 	add.w	r3, r7, #12
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	429a      	cmp	r2, r3
 8006672:	d00f      	beq.n	8006694 <d_pointer_to_member_type+0xa0>
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b25      	cmp	r3, #37	; 0x25
 800667c:	d00a      	beq.n	8006694 <d_pointer_to_member_type+0xa0>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4619      	mov	r1, r3
 8006684:	f000 fe0e 	bl	80072a4 <d_add_substitution>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <d_pointer_to_member_type+0xa0>
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	e007      	b.n	80066a4 <d_pointer_to_member_type+0xb0>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f04f 0127 	mov.w	r1, #39	; 0x27
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	f7fd fe6f 	bl	8004380 <d_make_comp>
 80066a2:	4603      	mov	r3, r0
 80066a4:	4618      	mov	r0, r3
 80066a6:	f107 0718 	add.w	r7, r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop

080066b0 <d_compact_number>:
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b5f      	cmp	r3, #95	; 0x5f
 80066c0:	d103      	bne.n	80066ca <d_compact_number+0x1a>
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e00e      	b.n	80066e8 <d_compact_number+0x38>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b6e      	cmp	r3, #110	; 0x6e
 80066d2:	d102      	bne.n	80066da <d_compact_number+0x2a>
 80066d4:	f04f 33ff 	mov.w	r3, #4294967295
 80066d8:	e01c      	b.n	8006714 <d_compact_number+0x64>
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fe fc4a 	bl	8004f74 <d_number>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f103 0301 	add.w	r3, r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b5f      	cmp	r3, #95	; 0x5f
 80066f0:	d108      	bne.n	8006704 <d_compact_number+0x54>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f103 0201 	add.w	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60da      	str	r2, [r3, #12]
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	e001      	b.n	8006708 <d_compact_number+0x58>
 8006704:	f04f 0301 	mov.w	r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <d_compact_number+0x62>
 800670c:	f04f 33ff 	mov.w	r3, #4294967295
 8006710:	e000      	b.n	8006714 <d_compact_number+0x64>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4618      	mov	r0, r3
 8006716:	f107 0710 	add.w	r7, r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop

08006720 <d_template_param>:
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b54      	cmp	r3, #84	; 0x54
 8006730:	d108      	bne.n	8006744 <d_template_param+0x24>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f103 0201 	add.w	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	e001      	b.n	8006748 <d_template_param+0x28>
 8006744:	f04f 0301 	mov.w	r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <d_template_param+0x32>
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e015      	b.n	800677e <d_template_param+0x5e>
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff ffac 	bl	80066b0 <d_compact_number>
 8006758:	4603      	mov	r3, r0
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	da02      	bge.n	8006768 <d_template_param+0x48>
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	e00a      	b.n	800677e <d_template_param+0x5e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	f103 0201 	add.w	r2, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	629a      	str	r2, [r3, #40]	; 0x28
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	68f9      	ldr	r1, [r7, #12]
 8006778:	f7fd ffc8 	bl	800470c <d_make_template_param>
 800677c:	4603      	mov	r3, r0
 800677e:	4618      	mov	r0, r3
 8006780:	f107 0710 	add.w	r7, r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <d_template_args>:
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b49      	cmp	r3, #73	; 0x49
 800679e:	d108      	bne.n	80067b2 <d_template_args+0x2a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f103 0201 	add.w	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	e001      	b.n	80067b6 <d_template_args+0x2e>
 80067b2:	f04f 0301 	mov.w	r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <d_template_args+0x38>
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	e04f      	b.n	8006860 <d_template_args+0xd8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b45      	cmp	r3, #69	; 0x45
 80067c8:	d110      	bne.n	80067ec <d_template_args+0x64>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f103 0201 	add.w	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60da      	str	r2, [r3, #12]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f04f 012b 	mov.w	r1, #43	; 0x2b
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	f7fd fdcc 	bl	8004380 <d_make_comp>
 80067e8:	4603      	mov	r3, r0
 80067ea:	e039      	b.n	8006860 <d_template_args+0xd8>
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	f107 0308 	add.w	r3, r7, #8
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	e000      	b.n	80067fc <d_template_args+0x74>
 80067fa:	bf00      	nop
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f835 	bl	800686c <d_template_arg>
 8006802:	4603      	mov	r3, r0
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <d_template_args+0x8a>
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	e026      	b.n	8006860 <d_template_args+0xd8>
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f04f 012b 	mov.w	r1, #43	; 0x2b
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	f7fd fdaf 	bl	8004380 <d_make_comp>
 8006822:	4602      	mov	r2, r0
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <d_template_args+0xae>
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	e014      	b.n	8006860 <d_template_args+0xd8>
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f103 0308 	add.w	r3, r3, #8
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b45      	cmp	r3, #69	; 0x45
 8006848:	d1d7      	bne.n	80067fa <d_template_args+0x72>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f103 0201 	add.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	bf00      	nop
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	62da      	str	r2, [r3, #44]	; 0x2c
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	f107 0718 	add.w	r7, r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop

0800686c <d_template_arg>:
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b4c      	cmp	r3, #76	; 0x4c
 800687c:	d026      	beq.n	80068cc <d_template_arg+0x60>
 800687e:	2b58      	cmp	r3, #88	; 0x58
 8006880:	d002      	beq.n	8006888 <d_template_arg+0x1c>
 8006882:	2b49      	cmp	r3, #73	; 0x49
 8006884:	d027      	beq.n	80068d6 <d_template_arg+0x6a>
 8006886:	e02b      	b.n	80068e0 <d_template_arg+0x74>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f103 0201 	add.w	r2, r3, #1
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f883 	bl	80069a0 <d_expression>
 800689a:	4603      	mov	r3, r0
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b45      	cmp	r3, #69	; 0x45
 80068a6:	d108      	bne.n	80068ba <d_template_arg+0x4e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f103 0201 	add.w	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e001      	b.n	80068be <d_template_arg+0x52>
 80068ba:	f04f 0301 	mov.w	r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <d_template_arg+0x5c>
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	e00f      	b.n	80068e8 <d_template_arg+0x7c>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	e00d      	b.n	80068e8 <d_template_arg+0x7c>
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fa37 	bl	8006d40 <d_expr_primary>
 80068d2:	4603      	mov	r3, r0
 80068d4:	e008      	b.n	80068e8 <d_template_arg+0x7c>
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff ff56 	bl	8006788 <d_template_args>
 80068dc:	4603      	mov	r3, r0
 80068de:	e003      	b.n	80068e8 <d_template_arg+0x7c>
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff f89b 	bl	8005a1c <d_type>
 80068e6:	4603      	mov	r3, r0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f107 0710 	add.w	r7, r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop

080068f4 <d_exprlist>:
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	f107 030c 	add.w	r3, r7, #12
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b45      	cmp	r3, #69	; 0x45
 8006910:	d111      	bne.n	8006936 <d_exprlist+0x42>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f103 0201 	add.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	f7fd fd28 	bl	8004380 <d_make_comp>
 8006930:	4603      	mov	r3, r0
 8006932:	e02f      	b.n	8006994 <d_exprlist+0xa0>
 8006934:	bf00      	nop
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f832 	bl	80069a0 <d_expression>
 800693c:	4603      	mov	r3, r0
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <d_exprlist+0x58>
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	e023      	b.n	8006994 <d_exprlist+0xa0>
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	f7fd fd12 	bl	8004380 <d_make_comp>
 800695c:	4602      	mov	r2, r0
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d102      	bne.n	8006970 <d_exprlist+0x7c>
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	e011      	b.n	8006994 <d_exprlist+0xa0>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f103 0308 	add.w	r3, r3, #8
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b45      	cmp	r3, #69	; 0x45
 8006982:	d1d7      	bne.n	8006934 <d_exprlist+0x40>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f103 0201 	add.w	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60da      	str	r2, [r3, #12]
 8006990:	bf00      	nop
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4618      	mov	r0, r3
 8006996:	f107 0718 	add.w	r7, r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop

080069a0 <d_expression>:
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b090      	sub	sp, #64	; 0x40
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069b6:	2b4c      	cmp	r3, #76	; 0x4c
 80069b8:	d104      	bne.n	80069c4 <d_expression+0x24>
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f9c0 	bl	8006d40 <d_expr_primary>
 80069c0:	4603      	mov	r3, r0
 80069c2:	e1b8      	b.n	8006d36 <d_expression+0x396>
 80069c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069c8:	2b54      	cmp	r3, #84	; 0x54
 80069ca:	d104      	bne.n	80069d6 <d_expression+0x36>
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff fea7 	bl	8006720 <d_template_param>
 80069d2:	4603      	mov	r3, r0
 80069d4:	e1af      	b.n	8006d36 <d_expression+0x396>
 80069d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069da:	2b73      	cmp	r3, #115	; 0x73
 80069dc:	d137      	bne.n	8006a4e <d_expression+0xae>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f103 0301 	add.w	r3, r3, #1
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b72      	cmp	r3, #114	; 0x72
 80069ea:	d130      	bne.n	8006a4e <d_expression+0xae>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f103 0202 	add.w	r2, r3, #2
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60da      	str	r2, [r3, #12]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff f80f 	bl	8005a1c <d_type>
 80069fe:	4603      	mov	r3, r0
 8006a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fe fa1a 	bl	8004e3c <d_unqualified_name>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b49      	cmp	r3, #73	; 0x49
 8006a14:	d008      	beq.n	8006a28 <d_expression+0x88>
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f04f 0101 	mov.w	r1, #1
 8006a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	f7fd fcae 	bl	8004380 <d_make_comp>
 8006a24:	4603      	mov	r3, r0
 8006a26:	e186      	b.n	8006d36 <d_expression+0x396>
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fead 	bl	8006788 <d_template_args>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f04f 0104 	mov.w	r1, #4
 8006a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a38:	f7fd fca2 	bl	8004380 <d_make_comp>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f04f 0101 	mov.w	r1, #1
 8006a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a46:	f7fd fc9b 	bl	8004380 <d_make_comp>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	e173      	b.n	8006d36 <d_expression+0x396>
 8006a4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a52:	2b73      	cmp	r3, #115	; 0x73
 8006a54:	d11a      	bne.n	8006a8c <d_expression+0xec>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f103 0301 	add.w	r3, r3, #1
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b70      	cmp	r3, #112	; 0x70
 8006a62:	d113      	bne.n	8006a8c <d_expression+0xec>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f103 0202 	add.w	r2, r3, #2
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff95 	bl	80069a0 <d_expression>
 8006a76:	4603      	mov	r3, r0
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f04f 0141 	mov.w	r1, #65	; 0x41
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	f7fd fc7c 	bl	8004380 <d_make_comp>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	e154      	b.n	8006d36 <d_expression+0x396>
 8006a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a90:	2b66      	cmp	r3, #102	; 0x66
 8006a92:	d11d      	bne.n	8006ad0 <d_expression+0x130>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f103 0301 	add.w	r3, r3, #1
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b70      	cmp	r3, #112	; 0x70
 8006aa0:	d116      	bne.n	8006ad0 <d_expression+0x130>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f103 0202 	add.w	r2, r3, #2
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60da      	str	r2, [r3, #12]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff fdfe 	bl	80066b0 <d_compact_number>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da02      	bge.n	8006ac4 <d_expression+0x124>
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e138      	b.n	8006d36 <d_expression+0x396>
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ac8:	f7fd fe3a 	bl	8004740 <d_make_function_param>
 8006acc:	4603      	mov	r3, r0
 8006ace:	e132      	b.n	8006d36 <d_expression+0x396>
 8006ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8006ad6:	d903      	bls.n	8006ae0 <d_expression+0x140>
 8006ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006adc:	2b39      	cmp	r3, #57	; 0x39
 8006ade:	d90a      	bls.n	8006af6 <d_expression+0x156>
 8006ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ae4:	2b6f      	cmp	r3, #111	; 0x6f
 8006ae6:	d12e      	bne.n	8006b46 <d_expression+0x1a6>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f103 0301 	add.w	r3, r3, #1
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b6e      	cmp	r3, #110	; 0x6e
 8006af4:	d127      	bne.n	8006b46 <d_expression+0x1a6>
 8006af6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006afa:	2b6f      	cmp	r3, #111	; 0x6f
 8006afc:	d105      	bne.n	8006b0a <d_expression+0x16a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f103 0202 	add.w	r2, r3, #2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fe f996 	bl	8004e3c <d_unqualified_name>
 8006b10:	4603      	mov	r3, r0
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <d_expression+0x180>
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	e10a      	b.n	8006d36 <d_expression+0x396>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b49      	cmp	r3, #73	; 0x49
 8006b28:	d10b      	bne.n	8006b42 <d_expression+0x1a2>
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff fe2c 	bl	8006788 <d_template_args>
 8006b30:	4603      	mov	r3, r0
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f04f 0104 	mov.w	r1, #4
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	f7fd fc21 	bl	8004380 <d_make_comp>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	e0f9      	b.n	8006d36 <d_expression+0x396>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	e0f7      	b.n	8006d36 <d_expression+0x396>
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fe faea 	bl	8005120 <d_operator_name>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	623b      	str	r3, [r7, #32]
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <d_expression+0x1bc>
 8006b56:	f04f 0300 	mov.w	r3, #0
 8006b5a:	e0ec      	b.n	8006d36 <d_expression+0x396>
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b2c      	cmp	r3, #44	; 0x2c
 8006b62:	d109      	bne.n	8006b78 <d_expression+0x1d8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f1a3 0302 	sub.w	r3, r3, #2
 8006b72:	18d2      	adds	r2, r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b2c      	cmp	r3, #44	; 0x2c
 8006b7e:	d118      	bne.n	8006bb2 <d_expression+0x212>
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f643 31ac 	movw	r1, #15276	; 0x3bac
 8006b8c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8006b90:	f005 fa1e 	bl	800bfd0 <strcmp>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <d_expression+0x212>
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fe ff3e 	bl	8005a1c <d_type>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8006ba8:	6a3a      	ldr	r2, [r7, #32]
 8006baa:	f7fd fbe9 	bl	8004380 <d_make_comp>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	e0c1      	b.n	8006d36 <d_expression+0x396>
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b2d      	cmp	r3, #45	; 0x2d
 8006bb8:	d00b      	beq.n	8006bd2 <d_expression+0x232>
 8006bba:	2b2e      	cmp	r3, #46	; 0x2e
 8006bbc:	d00d      	beq.n	8006bda <d_expression+0x23a>
 8006bbe:	2b2c      	cmp	r3, #44	; 0x2c
 8006bc0:	d002      	beq.n	8006bc8 <d_expression+0x228>
 8006bc2:	f04f 0300 	mov.w	r3, #0
 8006bc6:	e0b6      	b.n	8006d36 <d_expression+0x396>
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd0:	e007      	b.n	8006be2 <d_expression+0x242>
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd8:	e003      	b.n	8006be2 <d_expression+0x242>
 8006bda:	f04f 0301 	mov.w	r3, #1
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be0:	bf00      	nop
 8006be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d027      	beq.n	8006c38 <d_expression+0x298>
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d07e      	beq.n	8006cea <d_expression+0x34a>
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	f040 80a0 	bne.w	8006d32 <d_expression+0x392>
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bf8:	d110      	bne.n	8006c1c <d_expression+0x27c>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b5f      	cmp	r3, #95	; 0x5f
 8006c02:	d10b      	bne.n	8006c1c <d_expression+0x27c>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f103 0201 	add.w	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60da      	str	r2, [r3, #12]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff fe6f 	bl	80068f4 <d_exprlist>
 8006c16:	4603      	mov	r3, r0
 8006c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c1a:	e004      	b.n	8006c26 <d_expression+0x286>
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff febf 	bl	80069a0 <d_expression>
 8006c22:	4603      	mov	r3, r0
 8006c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8006c2c:	6a3a      	ldr	r2, [r7, #32]
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	f7fd fba6 	bl	8004380 <d_make_comp>
 8006c34:	4603      	mov	r3, r0
 8006c36:	e07e      	b.n	8006d36 <d_expression+0x396>
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff fead 	bl	80069a0 <d_expression>
 8006c46:	4603      	mov	r3, r0
 8006c48:	61bb      	str	r3, [r7, #24]
 8006c4a:	69f8      	ldr	r0, [r7, #28]
 8006c4c:	f643 2150 	movw	r1, #14928	; 0x3a50
 8006c50:	f6c0 0101 	movt	r1, #2049	; 0x801
 8006c54:	f005 f9bc 	bl	800bfd0 <strcmp>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d105      	bne.n	8006c6a <d_expression+0x2ca>
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff fe48 	bl	80068f4 <d_exprlist>
 8006c64:	4603      	mov	r3, r0
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
 8006c68:	e02f      	b.n	8006cca <d_expression+0x32a>
 8006c6a:	69f8      	ldr	r0, [r7, #28]
 8006c6c:	f643 2194 	movw	r1, #14996	; 0x3a94
 8006c70:	f6c0 0101 	movt	r1, #2049	; 0x801
 8006c74:	f005 f9ac 	bl	800bfd0 <strcmp>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <d_expression+0x2f2>
 8006c7e:	69f8      	ldr	r0, [r7, #28]
 8006c80:	f643 317c 	movw	r1, #15228	; 0x3b7c
 8006c84:	f6c0 0101 	movt	r1, #2049	; 0x801
 8006c88:	f005 f9a2 	bl	800bfd0 <strcmp>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d116      	bne.n	8006cc0 <d_expression+0x320>
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fe f8d2 	bl	8004e3c <d_unqualified_name>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b49      	cmp	r3, #73	; 0x49
 8006ca4:	d111      	bne.n	8006cca <d_expression+0x32a>
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff fd6e 	bl	8006788 <d_template_args>
 8006cac:	4603      	mov	r3, r0
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f04f 0104 	mov.w	r1, #4
 8006cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cb6:	f7fd fb63 	bl	8004380 <d_make_comp>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbe:	e004      	b.n	8006cca <d_expression+0x32a>
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fe6d 	bl	80069a0 <d_expression>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f04f 0131 	mov.w	r1, #49	; 0x31
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd4:	f7fd fb54 	bl	8004380 <d_make_comp>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f04f 0130 	mov.w	r1, #48	; 0x30
 8006ce0:	6a3a      	ldr	r2, [r7, #32]
 8006ce2:	f7fd fb4d 	bl	8004380 <d_make_comp>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	e025      	b.n	8006d36 <d_expression+0x396>
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fe58 	bl	80069a0 <d_expression>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff fe53 	bl	80069a0 <d_expression>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff fe4e 	bl	80069a0 <d_expression>
 8006d04:	4603      	mov	r3, r0
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f04f 0134 	mov.w	r1, #52	; 0x34
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	f7fd fb37 	bl	8004380 <d_make_comp>
 8006d12:	4603      	mov	r3, r0
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f04f 0133 	mov.w	r1, #51	; 0x33
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	f7fd fb30 	bl	8004380 <d_make_comp>
 8006d20:	4603      	mov	r3, r0
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f04f 0132 	mov.w	r1, #50	; 0x32
 8006d28:	6a3a      	ldr	r2, [r7, #32]
 8006d2a:	f7fd fb29 	bl	8004380 <d_make_comp>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	e001      	b.n	8006d36 <d_expression+0x396>
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <d_expr_primary>:
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b4c      	cmp	r3, #76	; 0x4c
 8006d50:	d108      	bne.n	8006d64 <d_expr_primary+0x24>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f103 0201 	add.w	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60da      	str	r2, [r3, #12]
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	e001      	b.n	8006d68 <d_expr_primary+0x28>
 8006d64:	f04f 0301 	mov.w	r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <d_expr_primary+0x32>
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	e07e      	b.n	8006e70 <d_expr_primary+0x130>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2b5f      	cmp	r3, #95	; 0x5f
 8006d7a:	d004      	beq.n	8006d86 <d_expr_primary+0x46>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b5a      	cmp	r3, #90	; 0x5a
 8006d84:	d107      	bne.n	8006d96 <d_expr_primary+0x56>
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f04f 0100 	mov.w	r1, #0
 8006d8c:	f7fd fd10 	bl	80047b0 <d_mangled_name>
 8006d90:	4603      	mov	r3, r0
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	e056      	b.n	8006e44 <d_expr_primary+0x104>
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fe fe40 	bl	8005a1c <d_type>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <d_expr_primary+0x6c>
 8006da6:	f04f 0300 	mov.w	r3, #0
 8006daa:	e061      	b.n	8006e70 <d_expr_primary+0x130>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b23      	cmp	r3, #35	; 0x23
 8006db2:	d10c      	bne.n	8006dce <d_expr_primary+0x8e>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	7c1b      	ldrb	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <d_expr_primary+0x8e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8006dce:	f04f 0335 	mov.w	r3, #53	; 0x35
 8006dd2:	74fb      	strb	r3, [r7, #19]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b6e      	cmp	r3, #110	; 0x6e
 8006ddc:	d108      	bne.n	8006df0 <d_expr_primary+0xb0>
 8006dde:	f04f 0336 	mov.w	r3, #54	; 0x36
 8006de2:	74fb      	strb	r3, [r7, #19]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f103 0201 	add.w	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	e00d      	b.n	8006e14 <d_expr_primary+0xd4>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d102      	bne.n	8006e08 <d_expr_primary+0xc8>
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	e033      	b.n	8006e70 <d_expr_primary+0x130>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f103 0201 	add.w	r2, r3, #1
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60da      	str	r2, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b45      	cmp	r3, #69	; 0x45
 8006e1c:	d1ec      	bne.n	8006df8 <d_expr_primary+0xb8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	461a      	mov	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	68b9      	ldr	r1, [r7, #8]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f7fd fba1 	bl	8004574 <d_make_name>
 8006e32:	4603      	mov	r3, r0
 8006e34:	7cfa      	ldrb	r2, [r7, #19]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4611      	mov	r1, r2
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	f7fd faa0 	bl	8004380 <d_make_comp>
 8006e40:	4603      	mov	r3, r0
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b45      	cmp	r3, #69	; 0x45
 8006e4c:	d108      	bne.n	8006e60 <d_expr_primary+0x120>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f103 0201 	add.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	e001      	b.n	8006e64 <d_expr_primary+0x124>
 8006e60:	f04f 0301 	mov.w	r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <d_expr_primary+0x12e>
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	e000      	b.n	8006e70 <d_expr_primary+0x130>
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f107 0718 	add.w	r7, r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop

08006e7c <d_local_name>:
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b5a      	cmp	r3, #90	; 0x5a
 8006e8c:	d108      	bne.n	8006ea0 <d_local_name+0x24>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f103 0201 	add.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60da      	str	r2, [r3, #12]
 8006e9a:	f04f 0300 	mov.w	r3, #0
 8006e9e:	e001      	b.n	8006ea4 <d_local_name+0x28>
 8006ea0:	f04f 0301 	mov.w	r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <d_local_name+0x32>
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	e084      	b.n	8006fb8 <d_local_name+0x13c>
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f04f 0100 	mov.w	r1, #0
 8006eb4:	f7fd fda4 	bl	8004a00 <d_encoding>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b45      	cmp	r3, #69	; 0x45
 8006ec4:	d108      	bne.n	8006ed8 <d_local_name+0x5c>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f103 0201 	add.w	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60da      	str	r2, [r3, #12]
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	e001      	b.n	8006edc <d_local_name+0x60>
 8006ed8:	f04f 0301 	mov.w	r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <d_local_name+0x6a>
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	e068      	b.n	8006fb8 <d_local_name+0x13c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b73      	cmp	r3, #115	; 0x73
 8006eee:	d120      	bne.n	8006f32 <d_local_name+0xb6>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f103 0201 	add.w	r2, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60da      	str	r2, [r3, #12]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f861 	bl	8006fc4 <d_discriminator>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <d_local_name+0x92>
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	e054      	b.n	8006fb8 <d_local_name+0x13c>
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f643 7120 	movw	r1, #16160	; 0x3f20
 8006f14:	f6c0 0101 	movt	r1, #2049	; 0x801
 8006f18:	f04f 020e 	mov.w	r2, #14
 8006f1c:	f7fd fb2a 	bl	8004574 <d_make_name>
 8006f20:	4603      	mov	r3, r0
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f04f 0102 	mov.w	r1, #2
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	f7fd fa29 	bl	8004380 <d_make_comp>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	e042      	b.n	8006fb8 <d_local_name+0x13c>
 8006f32:	f04f 33ff 	mov.w	r3, #4294967295
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b64      	cmp	r3, #100	; 0x64
 8006f40:	d110      	bne.n	8006f64 <d_local_name+0xe8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f103 0201 	add.w	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff fbae 	bl	80066b0 <d_compact_number>
 8006f54:	4603      	mov	r3, r0
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	da02      	bge.n	8006f64 <d_local_name+0xe8>
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	e029      	b.n	8006fb8 <d_local_name+0x13c>
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7fd fdc1 	bl	8004aec <d_name>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00f      	beq.n	8006f94 <d_local_name+0x118>
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b3e      	cmp	r3, #62	; 0x3e
 8006f7a:	d00a      	beq.n	8006f92 <d_local_name+0x116>
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d008      	beq.n	8006f92 <d_local_name+0x116>
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f81f 	bl	8006fc4 <d_discriminator>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d103      	bne.n	8006f94 <d_local_name+0x118>
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e012      	b.n	8006fb8 <d_local_name+0x13c>
 8006f92:	bf00      	nop
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	db06      	blt.n	8006fa8 <d_local_name+0x12c>
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	6939      	ldr	r1, [r7, #16]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	f7fd fb5a 	bl	8004658 <d_make_default_arg>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f04f 0102 	mov.w	r1, #2
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f7fd f9e5 	bl	8004380 <d_make_comp>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f107 0718 	add.w	r7, r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop

08006fc4 <d_discriminator>:
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b5f      	cmp	r3, #95	; 0x5f
 8006fd4:	d002      	beq.n	8006fdc <d_discriminator+0x18>
 8006fd6:	f04f 0301 	mov.w	r3, #1
 8006fda:	e012      	b.n	8007002 <d_discriminator+0x3e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f103 0201 	add.w	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60da      	str	r2, [r3, #12]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7fd ffc3 	bl	8004f74 <d_number>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	da02      	bge.n	8006ffe <d_discriminator+0x3a>
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	e001      	b.n	8007002 <d_discriminator+0x3e>
 8006ffe:	f04f 0301 	mov.w	r3, #1
 8007002:	4618      	mov	r0, r3
 8007004:	f107 0710 	add.w	r7, r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <d_lambda>:
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b55      	cmp	r3, #85	; 0x55
 800701c:	d108      	bne.n	8007030 <d_lambda+0x24>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f103 0201 	add.w	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60da      	str	r2, [r3, #12]
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	e001      	b.n	8007034 <d_lambda+0x28>
 8007030:	f04f 0301 	mov.w	r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <d_lambda+0x32>
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e05c      	b.n	80070f8 <d_lambda+0xec>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b6c      	cmp	r3, #108	; 0x6c
 8007046:	d108      	bne.n	800705a <d_lambda+0x4e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f103 0201 	add.w	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60da      	str	r2, [r3, #12]
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	e001      	b.n	800705e <d_lambda+0x52>
 800705a:	f04f 0301 	mov.w	r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <d_lambda+0x5c>
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	e047      	b.n	80070f8 <d_lambda+0xec>
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff f94d 	bl	8006308 <d_parmlist>
 800706e:	4603      	mov	r3, r0
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <d_lambda+0x72>
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	e03c      	b.n	80070f8 <d_lambda+0xec>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b45      	cmp	r3, #69	; 0x45
 8007086:	d108      	bne.n	800709a <d_lambda+0x8e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f103 0201 	add.w	r2, r3, #1
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60da      	str	r2, [r3, #12]
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	e001      	b.n	800709e <d_lambda+0x92>
 800709a:	f04f 0301 	mov.w	r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <d_lambda+0x9c>
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	e027      	b.n	80070f8 <d_lambda+0xec>
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fb01 	bl	80066b0 <d_compact_number>
 80070ae:	4603      	mov	r3, r0
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	da02      	bge.n	80070be <d_lambda+0xb2>
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	e01c      	b.n	80070f8 <d_lambda+0xec>
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fd f936 	bl	8004330 <d_make_empty>
 80070c4:	4603      	mov	r3, r0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <d_lambda+0xd6>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f04f 023e 	mov.w	r2, #62	; 0x3e
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	605a      	str	r2, [r3, #4]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	609a      	str	r2, [r3, #8]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	f000 f8dd 	bl	80072a4 <d_add_substitution>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d102      	bne.n	80070f6 <d_lambda+0xea>
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	e000      	b.n	80070f8 <d_lambda+0xec>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f107 0718 	add.w	r7, r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop

08007104 <d_unnamed_type>:
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2b55      	cmp	r3, #85	; 0x55
 8007114:	d108      	bne.n	8007128 <d_unnamed_type+0x24>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f103 0201 	add.w	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60da      	str	r2, [r3, #12]
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	e001      	b.n	800712c <d_unnamed_type+0x28>
 8007128:	f04f 0301 	mov.w	r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <d_unnamed_type+0x32>
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	e039      	b.n	80071aa <d_unnamed_type+0xa6>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b74      	cmp	r3, #116	; 0x74
 800713e:	d108      	bne.n	8007152 <d_unnamed_type+0x4e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f103 0201 	add.w	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60da      	str	r2, [r3, #12]
 800714c:	f04f 0300 	mov.w	r3, #0
 8007150:	e001      	b.n	8007156 <d_unnamed_type+0x52>
 8007152:	f04f 0301 	mov.w	r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <d_unnamed_type+0x5c>
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	e024      	b.n	80071aa <d_unnamed_type+0xa6>
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff faa5 	bl	80066b0 <d_compact_number>
 8007166:	4603      	mov	r3, r0
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	da02      	bge.n	8007176 <d_unnamed_type+0x72>
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	e019      	b.n	80071aa <d_unnamed_type+0xa6>
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fd f8da 	bl	8004330 <d_make_empty>
 800717c:	4603      	mov	r3, r0
 800717e:	60bb      	str	r3, [r7, #8]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d006      	beq.n	8007194 <d_unnamed_type+0x90>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f04f 0240 	mov.w	r2, #64	; 0x40
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	605a      	str	r2, [r3, #4]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	f000 f884 	bl	80072a4 <d_add_substitution>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d102      	bne.n	80071a8 <d_unnamed_type+0xa4>
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	e000      	b.n	80071aa <d_unnamed_type+0xa6>
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f107 0710 	add.w	r7, r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <d_clone_suffix>:
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b2e      	cmp	r3, #46	; 0x2e
 80071ce:	d139      	bne.n	8007244 <d_clone_suffix+0x90>
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f103 0301 	add.w	r3, r3, #1
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b60      	cmp	r3, #96	; 0x60
 80071da:	d905      	bls.n	80071e8 <d_clone_suffix+0x34>
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f103 0301 	add.w	r3, r3, #1
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b7a      	cmp	r3, #122	; 0x7a
 80071e6:	d905      	bls.n	80071f4 <d_clone_suffix+0x40>
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f103 0301 	add.w	r3, r3, #1
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b5f      	cmp	r3, #95	; 0x5f
 80071f2:	d127      	bne.n	8007244 <d_clone_suffix+0x90>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f103 0302 	add.w	r3, r3, #2
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e003      	b.n	8007206 <d_clone_suffix+0x52>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f103 0301 	add.w	r3, r3, #1
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b60      	cmp	r3, #96	; 0x60
 800720c:	d903      	bls.n	8007216 <d_clone_suffix+0x62>
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b7a      	cmp	r3, #122	; 0x7a
 8007214:	d9f3      	bls.n	80071fe <d_clone_suffix+0x4a>
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b5f      	cmp	r3, #95	; 0x5f
 800721c:	d0ef      	beq.n	80071fe <d_clone_suffix+0x4a>
 800721e:	e011      	b.n	8007244 <d_clone_suffix+0x90>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f103 0302 	add.w	r3, r3, #2
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	e003      	b.n	8007232 <d_clone_suffix+0x7e>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f103 0301 	add.w	r3, r3, #1
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b2f      	cmp	r3, #47	; 0x2f
 8007238:	d905      	bls.n	8007246 <d_clone_suffix+0x92>
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b39      	cmp	r3, #57	; 0x39
 8007240:	d9f3      	bls.n	800722a <d_clone_suffix+0x76>
 8007242:	e000      	b.n	8007246 <d_clone_suffix+0x92>
 8007244:	bf00      	nop
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b2e      	cmp	r3, #46	; 0x2e
 800724c:	d10b      	bne.n	8007266 <d_clone_suffix+0xb2>
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f103 0301 	add.w	r3, r3, #1
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b2f      	cmp	r3, #47	; 0x2f
 8007258:	d905      	bls.n	8007266 <d_clone_suffix+0xb2>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f103 0301 	add.w	r3, r3, #1
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b39      	cmp	r3, #57	; 0x39
 8007264:	d9dc      	bls.n	8007220 <d_clone_suffix+0x6c>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	1acb      	subs	r3, r1, r3
 8007270:	18d2      	adds	r2, r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60da      	str	r2, [r3, #12]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	6939      	ldr	r1, [r7, #16]
 8007280:	461a      	mov	r2, r3
 8007282:	f7fd f977 	bl	8004574 <d_make_name>
 8007286:	4603      	mov	r3, r0
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f04f 0142 	mov.w	r1, #66	; 0x42
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f7fd f874 	bl	8004380 <d_make_comp>
 8007298:	4603      	mov	r3, r0
 800729a:	4618      	mov	r0, r3
 800729c:	f107 0718 	add.w	r7, r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <d_add_substitution>:
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <d_add_substitution+0x16>
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	e019      	b.n	80072ee <d_add_substitution+0x4a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	429a      	cmp	r2, r3
 80072c4:	db02      	blt.n	80072cc <d_add_substitution+0x28>
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	e010      	b.n	80072ee <d_add_substitution+0x4a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80072d8:	18d3      	adds	r3, r2, r3
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f103 0201 	add.w	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	621a      	str	r2, [r3, #32]
 80072ea:	f04f 0301 	mov.w	r3, #1
 80072ee:	4618      	mov	r0, r3
 80072f0:	f107 070c 	add.w	r7, r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop

080072fc <d_substitution>:
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08c      	sub	sp, #48	; 0x30
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b53      	cmp	r3, #83	; 0x53
 800730e:	d108      	bne.n	8007322 <d_substitution+0x26>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f103 0201 	add.w	r2, r3, #1
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60da      	str	r2, [r3, #12]
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	e001      	b.n	8007326 <d_substitution+0x2a>
 8007322:	f04f 0301 	mov.w	r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <d_substitution+0x34>
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e0f6      	b.n	800751e <d_substitution+0x222>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <d_substitution+0x4e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	7813      	ldrb	r3, [r2, #0]
 8007340:	f102 0101 	add.w	r1, r2, #1
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	60d1      	str	r1, [r2, #12]
 8007348:	e001      	b.n	800734e <d_substitution+0x52>
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007356:	2b5f      	cmp	r3, #95	; 0x5f
 8007358:	d00f      	beq.n	800737a <d_substitution+0x7e>
 800735a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800735e:	2b2f      	cmp	r3, #47	; 0x2f
 8007360:	d903      	bls.n	800736a <d_substitution+0x6e>
 8007362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007366:	2b39      	cmp	r3, #57	; 0x39
 8007368:	d907      	bls.n	800737a <d_substitution+0x7e>
 800736a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d974      	bls.n	800745c <d_substitution+0x160>
 8007372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007376:	2b5a      	cmp	r3, #90	; 0x5a
 8007378:	d870      	bhi.n	800745c <d_substitution+0x160>
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007384:	2b5f      	cmp	r3, #95	; 0x5f
 8007386:	d052      	beq.n	800742e <d_substitution+0x132>
 8007388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800738c:	2b2f      	cmp	r3, #47	; 0x2f
 800738e:	d912      	bls.n	80073b6 <d_substitution+0xba>
 8007390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007394:	2b39      	cmp	r3, #57	; 0x39
 8007396:	d80e      	bhi.n	80073b6 <d_substitution+0xba>
 8007398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800739a:	4613      	mov	r3, r2
 800739c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80073a6:	461a      	mov	r2, r3
 80073a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073ac:	18d3      	adds	r3, r2, r3
 80073ae:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
 80073b4:	e019      	b.n	80073ea <d_substitution+0xee>
 80073b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d912      	bls.n	80073e4 <d_substitution+0xe8>
 80073be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073c2:	2b5a      	cmp	r3, #90	; 0x5a
 80073c4:	d80e      	bhi.n	80073e4 <d_substitution+0xe8>
 80073c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c8:	4613      	mov	r3, r2
 80073ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80073ce:	189b      	adds	r3, r3, r2
 80073d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80073d4:	461a      	mov	r2, r3
 80073d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073da:	18d3      	adds	r3, r2, r3
 80073dc:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
 80073e2:	e002      	b.n	80073ea <d_substitution+0xee>
 80073e4:	f04f 0300 	mov.w	r3, #0
 80073e8:	e099      	b.n	800751e <d_substitution+0x222>
 80073ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d202      	bcs.n	80073f8 <d_substitution+0xfc>
 80073f2:	f04f 0300 	mov.w	r3, #0
 80073f6:	e092      	b.n	800751e <d_substitution+0x222>
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <d_substitution+0x11a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	7813      	ldrb	r3, [r2, #0]
 800740c:	f102 0101 	add.w	r1, r2, #1
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	60d1      	str	r1, [r2, #12]
 8007414:	e001      	b.n	800741a <d_substitution+0x11e>
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800741e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007422:	2b5f      	cmp	r3, #95	; 0x5f
 8007424:	d1b0      	bne.n	8007388 <d_substitution+0x8c>
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	f103 0301 	add.w	r3, r3, #1
 800742c:	62bb      	str	r3, [r7, #40]	; 0x28
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	461a      	mov	r2, r3
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	429a      	cmp	r2, r3
 8007438:	d802      	bhi.n	8007440 <d_substitution+0x144>
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	e06e      	b.n	800751e <d_substitution+0x222>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	f103 0201 	add.w	r2, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	629a      	str	r2, [r3, #40]	; 0x28
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007456:	18d3      	adds	r3, r2, r3
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	e060      	b.n	800751e <d_substitution+0x222>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf0c      	ite	eq
 8007468:	2300      	moveq	r3, #0
 800746a:	2301      	movne	r3, #1
 800746c:	623b      	str	r3, [r7, #32]
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10f      	bne.n	8007494 <d_substitution+0x198>
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00c      	beq.n	8007494 <d_substitution+0x198>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	74fb      	strb	r3, [r7, #19]
 8007482:	7cfb      	ldrb	r3, [r7, #19]
 8007484:	2b43      	cmp	r3, #67	; 0x43
 8007486:	d002      	beq.n	800748e <d_substitution+0x192>
 8007488:	7cfb      	ldrb	r3, [r7, #19]
 800748a:	2b44      	cmp	r3, #68	; 0x44
 800748c:	d102      	bne.n	8007494 <d_substitution+0x198>
 800748e:	f04f 0301 	mov.w	r3, #1
 8007492:	623b      	str	r3, [r7, #32]
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <d_substitution+0x22c>)
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	f244 03c0 	movw	r3, #16576	; 0x40c0
 800749c:	f6c0 0301 	movt	r3, #2049	; 0x801
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	e036      	b.n	8007512 <d_substitution+0x216>
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d12c      	bne.n	800750a <d_substitution+0x20e>
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <d_substitution+0x1d4>
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4611      	mov	r1, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	f7fd f955 	bl	8004774 <d_make_sub>
 80074ca:	4602      	mov	r2, r0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d006      	beq.n	80074e4 <d_substitution+0x1e8>
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e005      	b.n	80074f0 <d_substitution+0x1f4>
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	18d2      	adds	r2, r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	631a      	str	r2, [r3, #48]	; 0x30
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	69b9      	ldr	r1, [r7, #24]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	f7fd f937 	bl	8004774 <d_make_sub>
 8007506:	4603      	mov	r3, r0
 8007508:	e009      	b.n	800751e <d_substitution+0x222>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f103 031c 	add.w	r3, r3, #28
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	429a      	cmp	r2, r3
 8007518:	d3c4      	bcc.n	80074a4 <d_substitution+0x1a8>
 800751a:	f04f 0300 	mov.w	r3, #0
 800751e:	4618      	mov	r0, r3
 8007520:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	08014184 	.word	0x08014184

0800752c <d_growable_string_init>:
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	605a      	str	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	609a      	str	r2, [r3, #8]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <d_growable_string_init+0x38>
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	f000 f804 	bl	800756c <d_growable_string_resize>
 8007564:	f107 0708 	add.w	r7, r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <d_growable_string_resize>:
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d13a      	bne.n	80075f4 <d_growable_string_resize+0x88>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <d_growable_string_resize+0x20>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	e001      	b.n	8007590 <d_growable_string_resize+0x24>
 800758c:	f04f 0302 	mov.w	r3, #2
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e003      	b.n	800759c <d_growable_string_resize+0x30>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d3f7      	bcc.n	8007594 <d_growable_string_resize+0x28>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	f004 f9d0 	bl	800b950 <realloc>
 80075b0:	4603      	mov	r3, r0
 80075b2:	60bb      	str	r3, [r7, #8]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d115      	bne.n	80075e6 <d_growable_string_resize+0x7a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f003 fd26 	bl	800b010 <free>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f04f 0200 	mov.w	r2, #0
 80075da:	609a      	str	r2, [r3, #8]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f04f 0201 	mov.w	r2, #1
 80075e2:	60da      	str	r2, [r3, #12]
 80075e4:	e007      	b.n	80075f6 <d_growable_string_resize+0x8a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	609a      	str	r2, [r3, #8]
 80075f2:	e000      	b.n	80075f6 <d_growable_string_resize+0x8a>
 80075f4:	bf00      	nop
 80075f6:	f107 0710 	add.w	r7, r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop

08007600 <d_growable_string_append_buffer>:
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	18d3      	adds	r3, r2, r3
 8007614:	f103 0301 	add.w	r3, r3, #1
 8007618:	617b      	str	r3, [r7, #20]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	429a      	cmp	r2, r3
 8007622:	d203      	bcs.n	800762c <d_growable_string_append_buffer+0x2c>
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	6979      	ldr	r1, [r7, #20]
 8007628:	f7ff ffa0 	bl	800756c <d_growable_string_resize>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d11e      	bne.n	8007672 <d_growable_string_append_buffer+0x72>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	18d2      	adds	r2, r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4611      	mov	r1, r2
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4608      	mov	r0, r1
 8007648:	4611      	mov	r1, r2
 800764a:	461a      	mov	r2, r3
 800764c:	f004 f818 	bl	800b680 <memcpy>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6859      	ldr	r1, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	18cb      	adds	r3, r1, r3
 800765c:	18d3      	adds	r3, r2, r3
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	18d2      	adds	r2, r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	605a      	str	r2, [r3, #4]
 8007670:	e000      	b.n	8007674 <d_growable_string_append_buffer+0x74>
 8007672:	bf00      	nop
 8007674:	f107 0718 	add.w	r7, r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <d_growable_string_callback_adapter>:
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	6978      	ldr	r0, [r7, #20]
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	f7ff ffb5 	bl	8007600 <d_growable_string_append_buffer>
 8007696:	f107 0718 	add.w	r7, r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop

080076a0 <d_print_init>:
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f04f 0200 	mov.w	r2, #0
 80076ce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8007700:	f107 0714 	add.w	r7, r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	bc80      	pop	{r7}
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop

0800770c <d_print_error>:
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f04f 0201 	mov.w	r2, #1
 800771a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 800771e:	f107 070c 	add.w	r7, r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr

08007728 <d_print_saw_error>:
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007736:	2b00      	cmp	r3, #0
 8007738:	bf0c      	ite	eq
 800773a:	2300      	moveq	r3, #0
 800773c:	2301      	movne	r3, #1
 800773e:	4618      	mov	r0, r3
 8007740:	f107 070c 	add.w	r7, r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop

0800774c <d_print_flush>:
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	18d3      	adds	r3, r2, r3
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	711a      	strb	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	f102 0004 	add.w	r0, r2, #4
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 800777c:	4798      	blx	r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800778e:	f103 0201 	add.w	r2, r3, #1
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8007798:	f107 0708 	add.w	r7, r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <d_append_char>:
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80077b2:	2bff      	cmp	r3, #255	; 0xff
 80077b4:	d102      	bne.n	80077bc <d_append_char+0x1c>
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff ffc8 	bl	800774c <d_print_flush>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	18d2      	adds	r2, r2, r3
 80077c6:	78f9      	ldrb	r1, [r7, #3]
 80077c8:	7111      	strb	r1, [r2, #4]
 80077ca:	f103 0201 	add.w	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80077dc:	f107 0708 	add.w	r7, r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <d_append_buffer>:
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	f04f 0300 	mov.w	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	e00b      	b.n	8007810 <d_append_buffer+0x2c>
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	18d3      	adds	r3, r2, r3
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	4619      	mov	r1, r3
 8007804:	f7ff ffcc 	bl	80077a0 <d_append_char>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f103 0301 	add.w	r3, r3, #1
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d3ef      	bcc.n	80077f8 <d_append_buffer+0x14>
 8007818:	f107 0718 	add.w	r7, r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <d_append_string>:
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	6838      	ldr	r0, [r7, #0]
 800782c:	f004 fd20 	bl	800c270 <strlen>
 8007830:	4603      	mov	r3, r0
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	f7ff ffd4 	bl	80077e4 <d_append_buffer>
 800783c:	f107 0708 	add.w	r7, r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <d_append_num>:
 8007844:	b580      	push	{r7, lr}
 8007846:	b08a      	sub	sp, #40	; 0x28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
 800784e:	f107 030c 	add.w	r3, r7, #12
 8007852:	4618      	mov	r0, r3
 8007854:	f244 1184 	movw	r1, #16772	; 0x4184
 8007858:	f6c0 0101 	movt	r1, #2049	; 0x801
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	f004 fb61 	bl	800bf24 <sprintf>
 8007862:	f107 030c 	add.w	r3, r7, #12
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4619      	mov	r1, r3
 800786a:	f7ff ffd9 	bl	8007820 <d_append_string>
 800786e:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop

08007878 <d_last_char>:
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8007886:	4618      	mov	r0, r3
 8007888:	f107 070c 	add.w	r7, r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop

08007894 <d_print_callback>:
 8007894:	b590      	push	{r4, r7, lr}
 8007896:	b0cf      	sub	sp, #316	; 0x13c
 8007898:	af00      	add	r7, sp, #0
 800789a:	f107 040c 	add.w	r4, r7, #12
 800789e:	6020      	str	r0, [r4, #0]
 80078a0:	f107 0008 	add.w	r0, r7, #8
 80078a4:	6001      	str	r1, [r0, #0]
 80078a6:	f107 0104 	add.w	r1, r7, #4
 80078aa:	600a      	str	r2, [r1, #0]
 80078ac:	463a      	mov	r2, r7
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	f107 0010 	add.w	r0, r7, #16
 80078b4:	f107 010c 	add.w	r1, r7, #12
 80078b8:	f107 0204 	add.w	r2, r7, #4
 80078bc:	463b      	mov	r3, r7
 80078be:	6809      	ldr	r1, [r1, #0]
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f7ff feec 	bl	80076a0 <d_print_init>
 80078c8:	f107 0210 	add.w	r2, r7, #16
 80078cc:	f107 0308 	add.w	r3, r7, #8
 80078d0:	4610      	mov	r0, r2
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	f000 f9cc 	bl	8007c70 <d_print_comp>
 80078d8:	f107 0310 	add.w	r3, r7, #16
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff ff35 	bl	800774c <d_print_flush>
 80078e2:	f107 0310 	add.w	r3, r7, #16
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff ff1e 	bl	8007728 <d_print_saw_error>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf14      	ite	ne
 80078f2:	2300      	movne	r3, #0
 80078f4:	2301      	moveq	r3, #1
 80078f6:	4618      	mov	r0, r3
 80078f8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd90      	pop	{r4, r7, pc}

08007900 <d_print>:
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f107 0210 	add.w	r2, r7, #16
 8007914:	4610      	mov	r0, r2
 8007916:	4619      	mov	r1, r3
 8007918:	f7ff fe08 	bl	800752c <d_growable_string_init>
 800791c:	f107 0310 	add.w	r3, r7, #16
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	f247 627d 	movw	r2, #30333	; 0x767d
 8007928:	f6c0 0200 	movt	r2, #2048	; 0x800
 800792c:	f7ff ffb2 	bl	8007894 <d_print_callback>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <d_print+0x4c>
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	4618      	mov	r0, r3
 800793a:	f003 fb69 	bl	800b010 <free>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	f04f 0300 	mov.w	r3, #0
 800794a:	e009      	b.n	8007960 <d_print+0x60>
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <d_print+0x56>
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	e001      	b.n	800795a <d_print+0x5a>
 8007956:	f04f 0301 	mov.w	r3, #1
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	4618      	mov	r0, r3
 8007962:	f107 0720 	add.w	r7, r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop

0800796c <d_index_template_argument>:
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e010      	b.n	800799e <d_index_template_argument+0x32>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b2b      	cmp	r3, #43	; 0x2b
 8007982:	d002      	beq.n	800798a <d_index_template_argument+0x1e>
 8007984:	f04f 0300 	mov.w	r3, #0
 8007988:	e019      	b.n	80079be <d_index_template_argument+0x52>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	dd0a      	ble.n	80079a6 <d_index_template_argument+0x3a>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f103 33ff 	add.w	r3, r3, #4294967295
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1eb      	bne.n	800797c <d_index_template_argument+0x10>
 80079a4:	e000      	b.n	80079a8 <d_index_template_argument+0x3c>
 80079a6:	bf00      	nop
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d102      	bne.n	80079b4 <d_index_template_argument+0x48>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d102      	bne.n	80079ba <d_index_template_argument+0x4e>
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	e001      	b.n	80079be <d_index_template_argument+0x52>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	4618      	mov	r0, r3
 80079c0:	f107 0714 	add.w	r7, r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop

080079cc <d_lookup_template_argument>:
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d105      	bne.n	80079ec <d_lookup_template_argument+0x20>
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fe93 	bl	800770c <d_print_error>
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	e00b      	b.n	8007a04 <d_lookup_template_argument+0x38>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4610      	mov	r0, r2
 80079fc:	4619      	mov	r1, r3
 80079fe:	f7ff ffb5 	bl	800796c <d_index_template_argument>
 8007a02:	4603      	mov	r3, r0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f107 0708 	add.w	r7, r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop

08007a10 <d_find_pack>:
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <d_find_pack+0x16>
 8007a20:	f04f 0300 	mov.w	r3, #0
 8007a24:	e0d0      	b.n	8007bc8 <d_find_pack+0x1b8>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b41      	cmp	r3, #65	; 0x41
 8007a2c:	f200 80b8 	bhi.w	8007ba0 <d_find_pack+0x190>
 8007a30:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <d_find_pack+0x28>)
 8007a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a36:	bf00      	nop
 8007a38:	08007b6b 	.word	0x08007b6b
 8007a3c:	08007ba1 	.word	0x08007ba1
 8007a40:	08007ba1 	.word	0x08007ba1
 8007a44:	08007ba1 	.word	0x08007ba1
 8007a48:	08007ba1 	.word	0x08007ba1
 8007a4c:	08007b41 	.word	0x08007b41
 8007a50:	08007b6b 	.word	0x08007b6b
 8007a54:	08007b81 	.word	0x08007b81
 8007a58:	08007b91 	.word	0x08007b91
 8007a5c:	08007ba1 	.word	0x08007ba1
 8007a60:	08007ba1 	.word	0x08007ba1
 8007a64:	08007ba1 	.word	0x08007ba1
 8007a68:	08007ba1 	.word	0x08007ba1
 8007a6c:	08007ba1 	.word	0x08007ba1
 8007a70:	08007ba1 	.word	0x08007ba1
 8007a74:	08007ba1 	.word	0x08007ba1
 8007a78:	08007ba1 	.word	0x08007ba1
 8007a7c:	08007ba1 	.word	0x08007ba1
 8007a80:	08007ba1 	.word	0x08007ba1
 8007a84:	08007ba1 	.word	0x08007ba1
 8007a88:	08007ba1 	.word	0x08007ba1
 8007a8c:	08007ba1 	.word	0x08007ba1
 8007a90:	08007b6b 	.word	0x08007b6b
 8007a94:	08007ba1 	.word	0x08007ba1
 8007a98:	08007ba1 	.word	0x08007ba1
 8007a9c:	08007ba1 	.word	0x08007ba1
 8007aa0:	08007ba1 	.word	0x08007ba1
 8007aa4:	08007ba1 	.word	0x08007ba1
 8007aa8:	08007ba1 	.word	0x08007ba1
 8007aac:	08007ba1 	.word	0x08007ba1
 8007ab0:	08007ba1 	.word	0x08007ba1
 8007ab4:	08007ba1 	.word	0x08007ba1
 8007ab8:	08007ba1 	.word	0x08007ba1
 8007abc:	08007ba1 	.word	0x08007ba1
 8007ac0:	08007ba1 	.word	0x08007ba1
 8007ac4:	08007b6b 	.word	0x08007b6b
 8007ac8:	08007ba1 	.word	0x08007ba1
 8007acc:	08007ba1 	.word	0x08007ba1
 8007ad0:	08007ba1 	.word	0x08007ba1
 8007ad4:	08007ba1 	.word	0x08007ba1
 8007ad8:	08007ba1 	.word	0x08007ba1
 8007adc:	08007ba1 	.word	0x08007ba1
 8007ae0:	08007ba1 	.word	0x08007ba1
 8007ae4:	08007ba1 	.word	0x08007ba1
 8007ae8:	08007b6b 	.word	0x08007b6b
 8007aec:	08007b71 	.word	0x08007b71
 8007af0:	08007ba1 	.word	0x08007ba1
 8007af4:	08007ba1 	.word	0x08007ba1
 8007af8:	08007ba1 	.word	0x08007ba1
 8007afc:	08007ba1 	.word	0x08007ba1
 8007b00:	08007ba1 	.word	0x08007ba1
 8007b04:	08007ba1 	.word	0x08007ba1
 8007b08:	08007ba1 	.word	0x08007ba1
 8007b0c:	08007ba1 	.word	0x08007ba1
 8007b10:	08007ba1 	.word	0x08007ba1
 8007b14:	08007ba1 	.word	0x08007ba1
 8007b18:	08007ba1 	.word	0x08007ba1
 8007b1c:	08007b6b 	.word	0x08007b6b
 8007b20:	08007ba1 	.word	0x08007ba1
 8007b24:	08007ba1 	.word	0x08007ba1
 8007b28:	08007ba1 	.word	0x08007ba1
 8007b2c:	08007ba1 	.word	0x08007ba1
 8007b30:	08007b6b 	.word	0x08007b6b
 8007b34:	08007ba1 	.word	0x08007ba1
 8007b38:	08007ba1 	.word	0x08007ba1
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	f7ff ff42 	bl	80079cc <d_lookup_template_argument>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <d_find_pack+0x14e>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b2b      	cmp	r3, #43	; 0x2b
 8007b58:	d101      	bne.n	8007b5e <d_find_pack+0x14e>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	e034      	b.n	8007bc8 <d_find_pack+0x1b8>
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	e031      	b.n	8007bc8 <d_find_pack+0x1b8>
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	e02e      	b.n	8007bc8 <d_find_pack+0x1b8>
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	e02b      	b.n	8007bc8 <d_find_pack+0x1b8>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4619      	mov	r1, r3
 8007b78:	f7ff ff4a 	bl	8007a10 <d_find_pack>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	e023      	b.n	8007bc8 <d_find_pack+0x1b8>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4619      	mov	r1, r3
 8007b88:	f7ff ff42 	bl	8007a10 <d_find_pack>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	e01b      	b.n	8007bc8 <d_find_pack+0x1b8>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	4619      	mov	r1, r3
 8007b98:	f7ff ff3a 	bl	8007a10 <d_find_pack>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	e013      	b.n	8007bc8 <d_find_pack+0x1b8>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f7ff ff32 	bl	8007a10 <d_find_pack>
 8007bac:	4603      	mov	r3, r0
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <d_find_pack+0x1aa>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	e006      	b.n	8007bc8 <d_find_pack+0x1b8>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f7ff ff25 	bl	8007a10 <d_find_pack>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f107 0710 	add.w	r7, r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop

08007bd4 <d_pack_length>:
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	e006      	b.n	8007bf2 <d_pack_length+0x1e>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f103 0301 	add.w	r3, r3, #1
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	607b      	str	r3, [r7, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d007      	beq.n	8007c08 <d_pack_length+0x34>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2b2b      	cmp	r3, #43	; 0x2b
 8007bfe:	d103      	bne.n	8007c08 <d_pack_length+0x34>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1ed      	bne.n	8007be4 <d_pack_length+0x10>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f107 0714 	add.w	r7, r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop

08007c18 <d_print_subexpr>:
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <d_print_subexpr+0x20>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b06      	cmp	r3, #6
 8007c36:	d102      	bne.n	8007c3e <d_print_subexpr+0x26>
 8007c38:	f04f 0301 	mov.w	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d104      	bne.n	8007c4e <d_print_subexpr+0x36>
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f04f 0128 	mov.w	r1, #40	; 0x28
 8007c4a:	f7ff fda9 	bl	80077a0 <d_append_char>
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	f000 f80d 	bl	8007c70 <d_print_comp>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <d_print_subexpr+0x4e>
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f04f 0129 	mov.w	r1, #41	; 0x29
 8007c62:	f7ff fd9d 	bl	80077a0 <d_append_char>
 8007c66:	f107 0710 	add.w	r7, r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop

08007c70 <d_print_comp>:
 8007c70:	b590      	push	{r4, r7, lr}
 8007c72:	b0b5      	sub	sp, #212	; 0xd4
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d104      	bne.n	8007c8a <d_print_comp+0x1a>
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fd43 	bl	800770c <d_print_error>
 8007c86:	f001 b8f3 	b.w	8008e70 <d_print_comp+0x1200>
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff fd4c 	bl	8007728 <d_print_saw_error>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f041 80e1 	bne.w	8008e5a <d_print_comp+0x11ea>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b42      	cmp	r3, #66	; 0x42
 8007c9e:	f201 80d7 	bhi.w	8008e50 <d_print_comp+0x11e0>
 8007ca2:	a101      	add	r1, pc, #4	; (adr r1, 8007ca8 <d_print_comp+0x38>)
 8007ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ca8:	08007db5 	.word	0x08007db5
 8007cac:	08007ded 	.word	0x08007ded
 8007cb0:	08007ded 	.word	0x08007ded
 8007cb4:	08007e2f 	.word	0x08007e2f
 8007cb8:	0800810f 	.word	0x0800810f
 8007cbc:	080081e9 	.word	0x080081e9
 8007cc0:	08008d4f 	.word	0x08008d4f
 8007cc4:	0800825f 	.word	0x0800825f
 8007cc8:	0800826f 	.word	0x0800826f
 8007ccc:	08008289 	.word	0x08008289
 8007cd0:	080082a7 	.word	0x080082a7
 8007cd4:	080082c5 	.word	0x080082c5
 8007cd8:	080082fd 	.word	0x080082fd
 8007cdc:	0800831b 	.word	0x0800831b
 8007ce0:	08008339 	.word	0x08008339
 8007ce4:	08008357 	.word	0x08008357
 8007ce8:	08008375 	.word	0x08008375
 8007cec:	08008393 	.word	0x08008393
 8007cf0:	080083b1 	.word	0x080083b1
 8007cf4:	080083cf 	.word	0x080083cf
 8007cf8:	080083ed 	.word	0x080083ed
 8007cfc:	0800840b 	.word	0x0800840b
 8007d00:	08008429 	.word	0x08008429
 8007d04:	0800843f 	.word	0x0800843f
 8007d08:	0800843f 	.word	0x0800843f
 8007d0c:	0800843f 	.word	0x0800843f
 8007d10:	080084af 	.word	0x080084af
 8007d14:	080084af 	.word	0x080084af
 8007d18:	080084af 	.word	0x080084af
 8007d1c:	080084af 	.word	0x080084af
 8007d20:	080084af 	.word	0x080084af
 8007d24:	080084af 	.word	0x080084af
 8007d28:	080084af 	.word	0x080084af
 8007d2c:	080084af 	.word	0x080084af
 8007d30:	080084af 	.word	0x080084af
 8007d34:	080084f9 	.word	0x080084f9
 8007d38:	08008539 	.word	0x08008539
 8007d3c:	08008549 	.word	0x08008549
 8007d40:	080085e5 	.word	0x080085e5
 8007d44:	08008737 	.word	0x08008737
 8007d48:	0800877f 	.word	0x0800877f
 8007d4c:	08008737 	.word	0x08008737
 8007d50:	080087df 	.word	0x080087df
 8007d54:	080087df 	.word	0x080087df
 8007d58:	0800886d 	.word	0x0800886d
 8007d5c:	080088b9 	.word	0x080088b9
 8007d60:	080088d5 	.word	0x080088d5
 8007d64:	080088ed 	.word	0x080088ed
 8007d68:	08008933 	.word	0x08008933
 8007d6c:	08008a31 	.word	0x08008a31
 8007d70:	08008a39 	.word	0x08008a39
 8007d74:	08008aa1 	.word	0x08008aa1
 8007d78:	08008aa1 	.word	0x08008aa1
 8007d7c:	08008aa9 	.word	0x08008aa9
 8007d80:	08008aa9 	.word	0x08008aa9
 8007d84:	08008c45 	.word	0x08008c45
 8007d88:	08008c61 	.word	0x08008c61
 8007d8c:	08008c7b 	.word	0x08008c7b
 8007d90:	08008c37 	.word	0x08008c37
 8007d94:	08008c8b 	.word	0x08008c8b
 8007d98:	08008d79 	.word	0x08008d79
 8007d9c:	08008d95 	.word	0x08008d95
 8007da0:	08008db1 	.word	0x08008db1
 8007da4:	08008e51 	.word	0x08008e51
 8007da8:	08008df5 	.word	0x08008df5
 8007dac:	08008cb1 	.word	0x08008cb1
 8007db0:	08008e1f 	.word	0x08008e1f
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <d_print_comp+0x166>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	f7ff fd09 	bl	80077e4 <d_append_buffer>
 8007dd2:	f001 b84d 	b.w	8008e70 <d_print_comp+0x1200>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4611      	mov	r1, r2
 8007de2:	461a      	mov	r2, r3
 8007de4:	f001 f848 	bl	8008e78 <d_print_java_identifier>
 8007de8:	f001 b842 	b.w	8008e70 <d_print_comp+0x1200>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	4619      	mov	r1, r3
 8007df4:	f7ff ff3c 	bl	8007c70 <d_print_comp>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d107      	bne.n	8007e14 <d_print_comp+0x1a4>
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f244 1188 	movw	r1, #16776	; 0x4188
 8007e0a:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007e0e:	f7ff fd07 	bl	8007820 <d_append_string>
 8007e12:	e004      	b.n	8007e1e <d_print_comp+0x1ae>
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8007e1a:	f7ff fcc1 	bl	80077a0 <d_append_char>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	4619      	mov	r1, r3
 8007e26:	f7ff ff23 	bl	8007c70 <d_print_comp>
 8007e2a:	f001 b821 	b.w	8008e70 <d_print_comp+0x1200>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8007e42:	f04f 0300 	mov.w	r3, #0
 8007e46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e52:	e05e      	b.n	8007f12 <d_print_comp+0x2a2>
 8007e54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d904      	bls.n	8007e66 <d_print_comp+0x1f6>
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff fc55 	bl	800770c <d_print_error>
 8007e62:	f001 b805 	b.w	8008e70 <d_print_comp+0x1200>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8007e6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e70:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007e74:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8007e78:	18cb      	adds	r3, r1, r3
 8007e7a:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e84:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007e88:	f107 020c 	add.w	r2, r7, #12
 8007e8c:	18d2      	adds	r2, r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8007e94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e98:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007e9c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8007ea0:	18d3      	adds	r3, r2, r3
 8007ea2:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8007ea6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007eb0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007eb4:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8007eb8:	18cb      	adds	r3, r1, r3
 8007eba:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8007eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ece:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007ed2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8007ed6:	18cb      	adds	r3, r1, r3
 8007ed8:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ee2:	f103 0301 	add.w	r3, r3, #1
 8007ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b1a      	cmp	r3, #26
 8007ef2:	d009      	beq.n	8007f08 <d_print_comp+0x298>
 8007ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b1b      	cmp	r3, #27
 8007efc:	d004      	beq.n	8007f08 <d_print_comp+0x298>
 8007efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b1c      	cmp	r3, #28
 8007f06:	d109      	bne.n	8007f1c <d_print_comp+0x2ac>
 8007f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d19c      	bne.n	8007e54 <d_print_comp+0x1e4>
 8007f1a:	e000      	b.n	8007f1e <d_print_comp+0x2ae>
 8007f1c:	bf00      	nop
 8007f1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <d_print_comp+0x2c0>
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fbf0 	bl	800770c <d_print_error>
 8007f2c:	f000 bfa0 	b.w	8008e70 <d_print_comp+0x1200>
 8007f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d10c      	bne.n	8007f54 <d_print_comp+0x2e4>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007f40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007f48:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8007f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	f040 8097 	bne.w	800808e <d_print_comp+0x41e>
 8007f60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b3f      	cmp	r3, #63	; 0x3f
 8007f72:	d17a      	bne.n	800806a <d_print_comp+0x3fa>
 8007f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f7e:	e074      	b.n	800806a <d_print_comp+0x3fa>
 8007f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d904      	bls.n	8007f92 <d_print_comp+0x322>
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff fbbf 	bl	800770c <d_print_error>
 8007f8e:	f000 bf6f 	b.w	8008e70 <d_print_comp+0x1200>
 8007f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f96:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f9e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8007fa2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8007fa6:	188a      	adds	r2, r1, r2
 8007fa8:	f1a2 02c4 	sub.w	r2, r2, #196	; 0xc4
 8007fac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007fb0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8007fb4:	18cb      	adds	r3, r1, r3
 8007fb6:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8007fba:	4614      	mov	r4, r2
 8007fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007fc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fca:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007fce:	f107 020c 	add.w	r2, r7, #12
 8007fd2:	18d2      	adds	r2, r2, r3
 8007fd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007fdc:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8007fe0:	18cb      	adds	r3, r1, r3
 8007fe2:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007ff0:	f107 020c 	add.w	r2, r7, #12
 8007ff4:	18d2      	adds	r2, r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8007ffc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008000:	f103 33ff 	add.w	r3, r3, #4294967295
 8008004:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008008:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800800c:	18d3      	adds	r3, r2, r3
 800800e:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8008012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800801c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008020:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008024:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8008028:	18cb      	adds	r3, r1, r3
 800802a:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 800802e:	f04f 0200 	mov.w	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008038:	f103 33ff 	add.w	r3, r3, #4294967295
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8008042:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008046:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800804a:	18cb      	adds	r3, r1, r3
 800804c:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008056:	f103 0301 	add.w	r3, r3, #1
 800805a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800805e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008068:	e000      	b.n	800806c <d_print_comp+0x3fc>
 800806a:	bf00      	nop
 800806c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b1a      	cmp	r3, #26
 8008074:	d084      	beq.n	8007f80 <d_print_comp+0x310>
 8008076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b1b      	cmp	r3, #27
 800807e:	f43f af7f 	beq.w	8007f80 <d_print_comp+0x310>
 8008082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b1c      	cmp	r3, #28
 800808a:	f43f af79 	beq.w	8007f80 <d_print_comp+0x310>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4619      	mov	r1, r3
 8008096:	f7ff fdeb 	bl	8007c70 <d_print_comp>
 800809a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d129      	bne.n	80080f8 <d_print_comp+0x488>
 80080a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80080ac:	e024      	b.n	80080f8 <d_print_comp+0x488>
 80080ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80080b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080be:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80080c2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80080c6:	18d3      	adds	r3, r2, r3
 80080c8:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d112      	bne.n	80080f8 <d_print_comp+0x488>
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f04f 0120 	mov.w	r1, #32
 80080d8:	f7ff fb62 	bl	80077a0 <d_append_char>
 80080dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80080e4:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80080e8:	18cb      	adds	r3, r1, r3
 80080ea:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4619      	mov	r1, r3
 80080f4:	f001 f82a 	bl	800914c <d_print_mod>
 80080f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1d6      	bne.n	80080ae <d_print_comp+0x43e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008106:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800810a:	f000 beb1 	b.w	8008e70 <d_print_comp+0x1200>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f04f 0200 	mov.w	r2, #0
 800811e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b00      	cmp	r3, #0
 8008134:	d026      	beq.n	8008184 <d_print_comp+0x514>
 8008136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d121      	bne.n	8008184 <d_print_comp+0x514>
 8008140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b06      	cmp	r3, #6
 8008148:	d11c      	bne.n	8008184 <d_print_comp+0x514>
 800814a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	4618      	mov	r0, r3
 8008152:	f244 118c 	movw	r1, #16780	; 0x418c
 8008156:	f6c0 0101 	movt	r1, #2049	; 0x801
 800815a:	f04f 0206 	mov.w	r2, #6
 800815e:	f004 f8b7 	bl	800c2d0 <strncmp>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10d      	bne.n	8008184 <d_print_comp+0x514>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4619      	mov	r1, r3
 8008170:	f7ff fd7e 	bl	8007c70 <d_print_comp>
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f643 21d0 	movw	r1, #15056	; 0x3ad0
 800817a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800817e:	f7ff fb4f 	bl	8007820 <d_append_string>
 8008182:	e02a      	b.n	80081da <d_print_comp+0x56a>
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800818a:	f7ff fd71 	bl	8007c70 <d_print_comp>
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff fb72 	bl	8007878 <d_last_char>
 8008194:	4603      	mov	r3, r0
 8008196:	2b3c      	cmp	r3, #60	; 0x3c
 8008198:	d104      	bne.n	80081a4 <d_print_comp+0x534>
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f04f 0120 	mov.w	r1, #32
 80081a0:	f7ff fafe 	bl	80077a0 <d_append_char>
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80081aa:	f7ff faf9 	bl	80077a0 <d_append_char>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f7ff fd5b 	bl	8007c70 <d_print_comp>
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff fb5c 	bl	8007878 <d_last_char>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b3e      	cmp	r3, #62	; 0x3e
 80081c4:	d104      	bne.n	80081d0 <d_print_comp+0x560>
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f04f 0120 	mov.w	r1, #32
 80081cc:	f7ff fae8 	bl	80077a0 <d_append_char>
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f04f 013e 	mov.w	r1, #62	; 0x3e
 80081d6:	f7ff fae3 	bl	80077a0 <d_append_char>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80081e0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80081e4:	f000 be44 	b.w	8008e70 <d_print_comp+0x1200>
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	f7ff fbee 	bl	80079cc <d_lookup_template_argument>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00f      	beq.n	800821e <d_print_comp+0x5ae>
 80081fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b2b      	cmp	r3, #43	; 0x2b
 8008206:	d10a      	bne.n	800821e <d_print_comp+0x5ae>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800820e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8008212:	4619      	mov	r1, r3
 8008214:	f7ff fbaa 	bl	800796c <d_index_template_argument>
 8008218:	4603      	mov	r3, r0
 800821a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800821e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d104      	bne.n	8008230 <d_print_comp+0x5c0>
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fa70 	bl	800770c <d_print_error>
 800822c:	f000 be20 	b.w	8008e70 <d_print_comp+0x1200>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800823a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800824c:	f7ff fd10 	bl	8007c70 <d_print_comp>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008256:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800825a:	f000 be09 	b.w	8008e70 <d_print_comp+0x1200>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	4619      	mov	r1, r3
 8008266:	f7ff fd03 	bl	8007c70 <d_print_comp>
 800826a:	f000 be01 	b.w	8008e70 <d_print_comp+0x1200>
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f04f 017e 	mov.w	r1, #126	; 0x7e
 8008274:	f7ff fa94 	bl	80077a0 <d_append_char>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4619      	mov	r1, r3
 8008280:	f7ff fcf6 	bl	8007c70 <d_print_comp>
 8008284:	f000 bdf4 	b.w	8008e70 <d_print_comp+0x1200>
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f244 1194 	movw	r1, #16788	; 0x4194
 800828e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008292:	f7ff fac5 	bl	8007820 <d_append_string>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4619      	mov	r1, r3
 800829e:	f7ff fce7 	bl	8007c70 <d_print_comp>
 80082a2:	f000 bde5 	b.w	8008e70 <d_print_comp+0x1200>
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f244 11a0 	movw	r1, #16800	; 0x41a0
 80082ac:	f6c0 0101 	movt	r1, #2049	; 0x801
 80082b0:	f7ff fab6 	bl	8007820 <d_append_string>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4619      	mov	r1, r3
 80082bc:	f7ff fcd8 	bl	8007c70 <d_print_comp>
 80082c0:	f000 bdd6 	b.w	8008e70 <d_print_comp+0x1200>
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f244 11ac 	movw	r1, #16812	; 0x41ac
 80082ca:	f6c0 0101 	movt	r1, #2049	; 0x801
 80082ce:	f7ff faa7 	bl	8007820 <d_append_string>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4619      	mov	r1, r3
 80082da:	f7ff fcc9 	bl	8007c70 <d_print_comp>
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f244 11c8 	movw	r1, #16840	; 0x41c8
 80082e4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80082e8:	f7ff fa9a 	bl	8007820 <d_append_string>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4619      	mov	r1, r3
 80082f4:	f7ff fcbc 	bl	8007c70 <d_print_comp>
 80082f8:	f000 bdba 	b.w	8008e70 <d_print_comp+0x1200>
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f244 11d0 	movw	r1, #16848	; 0x41d0
 8008302:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008306:	f7ff fa8b 	bl	8007820 <d_append_string>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4619      	mov	r1, r3
 8008312:	f7ff fcad 	bl	8007c70 <d_print_comp>
 8008316:	f000 bdab 	b.w	8008e70 <d_print_comp+0x1200>
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f244 11e0 	movw	r1, #16864	; 0x41e0
 8008320:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008324:	f7ff fa7c 	bl	8007820 <d_append_string>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4619      	mov	r1, r3
 8008330:	f7ff fc9e 	bl	8007c70 <d_print_comp>
 8008334:	f000 bd9c 	b.w	8008e70 <d_print_comp+0x1200>
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f244 11f4 	movw	r1, #16884	; 0x41f4
 800833e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008342:	f7ff fa6d 	bl	8007820 <d_append_string>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	4619      	mov	r1, r3
 800834e:	f7ff fc8f 	bl	8007c70 <d_print_comp>
 8008352:	f000 bd8d 	b.w	8008e70 <d_print_comp+0x1200>
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f244 2108 	movw	r1, #16904	; 0x4208
 800835c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008360:	f7ff fa5e 	bl	8007820 <d_append_string>
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	4619      	mov	r1, r3
 800836c:	f7ff fc80 	bl	8007c70 <d_print_comp>
 8008370:	f000 bd7e 	b.w	8008e70 <d_print_comp+0x1200>
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f244 2120 	movw	r1, #16928	; 0x4220
 800837a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800837e:	f7ff fa4f 	bl	8007820 <d_append_string>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4619      	mov	r1, r3
 800838a:	f7ff fc71 	bl	8007c70 <d_print_comp>
 800838e:	f000 bd6f 	b.w	8008e70 <d_print_comp+0x1200>
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f244 2134 	movw	r1, #16948	; 0x4234
 8008398:	f6c0 0101 	movt	r1, #2049	; 0x801
 800839c:	f7ff fa40 	bl	8007820 <d_append_string>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	4619      	mov	r1, r3
 80083a8:	f7ff fc62 	bl	8007c70 <d_print_comp>
 80083ac:	f000 bd60 	b.w	8008e70 <d_print_comp+0x1200>
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f244 2150 	movw	r1, #16976	; 0x4250
 80083b6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80083ba:	f7ff fa31 	bl	8007820 <d_append_string>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4619      	mov	r1, r3
 80083c6:	f7ff fc53 	bl	8007c70 <d_print_comp>
 80083ca:	f000 bd51 	b.w	8008e70 <d_print_comp+0x1200>
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f244 2160 	movw	r1, #16992	; 0x4260
 80083d4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80083d8:	f7ff fa22 	bl	8007820 <d_append_string>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	4619      	mov	r1, r3
 80083e4:	f7ff fc44 	bl	8007c70 <d_print_comp>
 80083e8:	f000 bd42 	b.w	8008e70 <d_print_comp+0x1200>
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f244 2174 	movw	r1, #17012	; 0x4274
 80083f2:	f6c0 0101 	movt	r1, #2049	; 0x801
 80083f6:	f7ff fa13 	bl	8007820 <d_append_string>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	4619      	mov	r1, r3
 8008402:	f7ff fc35 	bl	8007c70 <d_print_comp>
 8008406:	f000 bd33 	b.w	8008e70 <d_print_comp+0x1200>
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f244 2190 	movw	r1, #17040	; 0x4290
 8008410:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008414:	f7ff fa04 	bl	8007820 <d_append_string>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	4619      	mov	r1, r3
 8008420:	f7ff fc26 	bl	8007c70 <d_print_comp>
 8008424:	f000 bd24 	b.w	8008e70 <d_print_comp+0x1200>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	4611      	mov	r1, r2
 8008434:	461a      	mov	r2, r3
 8008436:	f7ff f9d5 	bl	80077e4 <d_append_buffer>
 800843a:	f000 bd19 	b.w	8008e70 <d_print_comp+0x1200>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008448:	e02b      	b.n	80084a2 <d_print_comp+0x832>
 800844a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d121      	bne.n	8008498 <d_print_comp+0x828>
 8008454:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2b17      	cmp	r3, #23
 800845e:	d00b      	beq.n	8008478 <d_print_comp+0x808>
 8008460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b18      	cmp	r3, #24
 800846a:	d005      	beq.n	8008478 <d_print_comp+0x808>
 800846c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b19      	cmp	r3, #25
 8008476:	d119      	bne.n	80084ac <d_print_comp+0x83c>
 8008478:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	781a      	ldrb	r2, [r3, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d107      	bne.n	8008498 <d_print_comp+0x828>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	4619      	mov	r1, r3
 8008490:	f7ff fbee 	bl	8007c70 <d_print_comp>
 8008494:	f000 bcec 	b.w	8008e70 <d_print_comp+0x1200>
 8008498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1cf      	bne.n	800844a <d_print_comp+0x7da>
 80084aa:	e000      	b.n	80084ae <d_print_comp+0x83e>
 80084ac:	bf00      	nop
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80084b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80084bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	673b      	str	r3, [r7, #112]	; 0x70
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	677b      	str	r3, [r7, #116]	; 0x74
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80084d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4619      	mov	r1, r3
 80084da:	f7ff fbc9 	bl	8007c70 <d_print_comp>
 80084de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d103      	bne.n	80084ec <d_print_comp+0x87c>
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	f000 fe30 	bl	800914c <d_print_mod>
 80084ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80084f4:	f000 bcbc 	b.w	8008e70 <d_print_comp+0x1200>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10c      	bne.n	800851e <d_print_comp+0x8ae>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4611      	mov	r1, r2
 8008514:	461a      	mov	r2, r3
 8008516:	f7ff f965 	bl	80077e4 <d_append_buffer>
 800851a:	f000 bca9 	b.w	8008e70 <d_print_comp+0x1200>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	4611      	mov	r1, r2
 800852e:	461a      	mov	r2, r3
 8008530:	f7ff f958 	bl	80077e4 <d_append_buffer>
 8008534:	f000 bc9c 	b.w	8008e70 <d_print_comp+0x1200>
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4619      	mov	r1, r3
 8008540:	f7ff fb96 	bl	8007c70 <d_print_comp>
 8008544:	f000 bc94 	b.w	8008e70 <d_print_comp+0x1200>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <d_print_comp+0x8f4>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	f000 fede 	bl	8009320 <d_print_function_type>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d02a      	beq.n	80085c2 <d_print_comp+0x952>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008572:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800857a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	663b      	str	r3, [r7, #96]	; 0x60
 8008582:	f04f 0300 	mov.w	r3, #0
 8008586:	667b      	str	r3, [r7, #100]	; 0x64
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800858e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4619      	mov	r1, r3
 8008598:	f7ff fb6a 	bl	8007c70 <d_print_comp>
 800859c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80085a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f040 8459 	bne.w	8008e5e <d_print_comp+0x11ee>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <d_print_comp+0x952>
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f04f 0120 	mov.w	r1, #32
 80085be:	f7ff f8ef 	bl	80077a0 <d_append_char>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 8449 	bne.w	8008e62 <d_print_comp+0x11f2>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	f000 fea0 	bl	8009320 <d_print_function_type>
 80085e0:	f000 bc3f 	b.w	8008e62 <d_print_comp+0x11f2>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80085ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f107 020c 	add.w	r2, r7, #12
 80085fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800860e:	61bb      	str	r3, [r7, #24]
 8008610:	f04f 0301 	mov.w	r3, #1
 8008614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800861c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008620:	e043      	b.n	80086aa <d_print_comp+0xa3a>
 8008622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d139      	bne.n	80086a0 <d_print_comp+0xa30>
 800862c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008630:	2b03      	cmp	r3, #3
 8008632:	d904      	bls.n	800863e <d_print_comp+0x9ce>
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff f869 	bl	800770c <d_print_error>
 800863a:	f000 bc19 	b.w	8008e70 <d_print_comp+0x1200>
 800863e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008642:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008646:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800864a:	18d3      	adds	r3, r2, r3
 800864c:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
 8008650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008654:	4614      	mov	r4, r2
 8008656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8008662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008666:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800866a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800866e:	18cb      	adds	r3, r1, r3
 8008670:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800867a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800867e:	f107 020c 	add.w	r2, r7, #12
 8008682:	18d2      	adds	r2, r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800868a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800868e:	f04f 0201 	mov.w	r2, #1
 8008692:	609a      	str	r2, [r3, #8]
 8008694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008698:	f103 0301 	add.w	r3, r3, #1
 800869c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d011      	beq.n	80086d6 <d_print_comp+0xa66>
 80086b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2b17      	cmp	r3, #23
 80086bc:	d0b1      	beq.n	8008622 <d_print_comp+0x9b2>
 80086be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b18      	cmp	r3, #24
 80086c8:	d0ab      	beq.n	8008622 <d_print_comp+0x9b2>
 80086ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b19      	cmp	r3, #25
 80086d4:	d0a5      	beq.n	8008622 <d_print_comp+0x9b2>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4619      	mov	r1, r3
 80086de:	f7ff fac7 	bl	8007c70 <d_print_comp>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80086e8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d014      	beq.n	800871c <d_print_comp+0xaac>
 80086f2:	e3bd      	b.n	8008e70 <d_print_comp+0x1200>
 80086f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80086fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008700:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008704:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008708:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800870c:	18d3      	adds	r3, r2, r3
 800870e:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4619      	mov	r1, r3
 8008718:	f000 fd18 	bl	800914c <d_print_mod>
 800871c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008720:	2b01      	cmp	r3, #1
 8008722:	d8e7      	bhi.n	80086f4 <d_print_comp+0xa84>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	f000 fea0 	bl	8009474 <d_print_array_type>
 8008734:	e39c      	b.n	8008e70 <d_print_comp+0x1200>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800873c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008744:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	653b      	str	r3, [r7, #80]	; 0x50
 800874c:	f04f 0300 	mov.w	r3, #0
 8008750:	657b      	str	r3, [r7, #84]	; 0x54
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008758:	65bb      	str	r3, [r7, #88]	; 0x58
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	4619      	mov	r1, r3
 8008762:	f7ff fa85 	bl	8007c70 <d_print_comp>
 8008766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008768:	2b00      	cmp	r3, #0
 800876a:	d103      	bne.n	8008774 <d_print_comp+0xb04>
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	f000 fcec 	bl	800914c <d_print_mod>
 8008774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800877c:	e378      	b.n	8008e70 <d_print_comp+0x1200>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	895b      	ldrh	r3, [r3, #10]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d006      	beq.n	8008794 <d_print_comp+0xb24>
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f244 21a4 	movw	r1, #17060	; 0x42a4
 800878c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008790:	f7ff f846 	bl	8007820 <d_append_string>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	4ba4      	ldr	r3, [pc, #656]	; (8008a2c <d_print_comp+0xdbc>)
 800879c:	429a      	cmp	r2, r3
 800879e:	d00a      	beq.n	80087b6 <d_print_comp+0xb46>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	4619      	mov	r1, r3
 80087a8:	f7ff fa62 	bl	8007c70 <d_print_comp>
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f04f 0120 	mov.w	r1, #32
 80087b2:	f7fe fff5 	bl	80077a0 <d_append_char>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	891b      	ldrh	r3, [r3, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d007      	beq.n	80087ce <d_print_comp+0xb5e>
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f244 21ac 	movw	r1, #17068	; 0x42ac
 80087c4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80087c8:	f7ff f82a 	bl	8007820 <d_append_string>
 80087cc:	e350      	b.n	8008e70 <d_print_comp+0x1200>
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f244 21b4 	movw	r1, #17076	; 0x42b4
 80087d4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80087d8:	f7ff f822 	bl	8007820 <d_append_string>
 80087dc:	e348      	b.n	8008e70 <d_print_comp+0x1200>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <d_print_comp+0xb82>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4619      	mov	r1, r3
 80087ee:	f7ff fa3f 	bl	8007c70 <d_print_comp>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 8335 	beq.w	8008e66 <d_print_comp+0x11f6>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008802:	2bfd      	cmp	r3, #253	; 0xfd
 8008804:	d902      	bls.n	800880c <d_print_comp+0xb9c>
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fe ffa0 	bl	800774c <d_print_flush>
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f244 21bc 	movw	r1, #17084	; 0x42bc
 8008812:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008816:	f7ff f803 	bl	8007820 <d_append_string>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008820:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800882a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	4619      	mov	r1, r3
 8008836:	f7ff fa1b 	bl	8007c70 <d_print_comp>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8008840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008844:	429a      	cmp	r2, r3
 8008846:	f040 830e 	bne.w	8008e66 <d_print_comp+0x11f6>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8008850:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008854:	429a      	cmp	r2, r3
 8008856:	f040 8306 	bne.w	8008e66 <d_print_comp+0x11f6>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008860:	f1a3 0202 	sub.w	r2, r3, #2
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800886a:	e2fc      	b.n	8008e66 <d_print_comp+0x11f6>
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f244 21c0 	movw	r1, #17088	; 0x42c0
 8008872:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008876:	f7fe ffd3 	bl	8007820 <d_append_string>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8008886:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800888a:	2b60      	cmp	r3, #96	; 0x60
 800888c:	d908      	bls.n	80088a0 <d_print_comp+0xc30>
 800888e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008892:	2b7a      	cmp	r3, #122	; 0x7a
 8008894:	d804      	bhi.n	80088a0 <d_print_comp+0xc30>
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f04f 0120 	mov.w	r1, #32
 800889c:	f7fe ff80 	bl	80077a0 <d_append_char>
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4611      	mov	r1, r2
 80088b0:	461a      	mov	r2, r3
 80088b2:	f7fe ff97 	bl	80077e4 <d_append_buffer>
 80088b6:	e2db      	b.n	8008e70 <d_print_comp+0x1200>
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f244 21cc 	movw	r1, #17100	; 0x42cc
 80088be:	f6c0 0101 	movt	r1, #2049	; 0x801
 80088c2:	f7fe ffad 	bl	8007820 <d_append_string>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7ff f9cf 	bl	8007c70 <d_print_comp>
 80088d2:	e2cd      	b.n	8008e70 <d_print_comp+0x1200>
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f244 21cc 	movw	r1, #17100	; 0x42cc
 80088da:	f6c0 0101 	movt	r1, #2049	; 0x801
 80088de:	f7fe ff9f 	bl	8007820 <d_append_string>
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	f000 fe47 	bl	8009578 <d_print_cast>
 80088ea:	e2c1      	b.n	8008e70 <d_print_comp+0x1200>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b2e      	cmp	r3, #46	; 0x2e
 80088f4:	d006      	beq.n	8008904 <d_print_comp+0xc94>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4619      	mov	r1, r3
 80088fe:	f000 fe1d 	bl	800953c <d_print_expr_op>
 8008902:	e00f      	b.n	8008924 <d_print_comp+0xcb4>
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f04f 0128 	mov.w	r1, #40	; 0x28
 800890a:	f7fe ff49 	bl	80077a0 <d_append_char>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4619      	mov	r1, r3
 8008916:	f000 fe2f 	bl	8009578 <d_print_cast>
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f04f 0129 	mov.w	r1, #41	; 0x29
 8008920:	f7fe ff3e 	bl	80077a0 <d_append_char>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4619      	mov	r1, r3
 800892c:	f7ff f974 	bl	8007c18 <d_print_subexpr>
 8008930:	e29e      	b.n	8008e70 <d_print_comp+0x1200>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b31      	cmp	r3, #49	; 0x31
 800893a:	d003      	beq.n	8008944 <d_print_comp+0xcd4>
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fe fee5 	bl	800770c <d_print_error>
 8008942:	e295      	b.n	8008e70 <d_print_comp+0x1200>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b2c      	cmp	r3, #44	; 0x2c
 800894c:	d111      	bne.n	8008972 <d_print_comp+0xd02>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d10b      	bne.n	8008972 <d_print_comp+0xd02>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2b3e      	cmp	r3, #62	; 0x3e
 8008966:	d104      	bne.n	8008972 <d_print_comp+0xd02>
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f04f 0128 	mov.w	r1, #40	; 0x28
 800896e:	f7fe ff17 	bl	80077a0 <d_append_char>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	4619      	mov	r1, r3
 800897c:	f7ff f94c 	bl	8007c18 <d_print_subexpr>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f643 21cc 	movw	r1, #15052	; 0x3acc
 800898e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008992:	f003 fb1d 	bl	800bfd0 <strcmp>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d111      	bne.n	80089c0 <d_print_comp+0xd50>
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f04f 015b 	mov.w	r1, #91	; 0x5b
 80089a2:	f7fe fefd 	bl	80077a0 <d_append_char>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	4619      	mov	r1, r3
 80089b0:	f7ff f95e 	bl	8007c70 <d_print_comp>
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f04f 015d 	mov.w	r1, #93	; 0x5d
 80089ba:	f7fe fef1 	bl	80077a0 <d_append_char>
 80089be:	e01a      	b.n	80089f6 <d_print_comp+0xd86>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f643 2150 	movw	r1, #14928	; 0x3a50
 80089ce:	f6c0 0101 	movt	r1, #2049	; 0x801
 80089d2:	f003 fafd 	bl	800bfd0 <strcmp>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <d_print_comp+0xd78>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4619      	mov	r1, r3
 80089e4:	f000 fdaa 	bl	800953c <d_print_expr_op>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4619      	mov	r1, r3
 80089f2:	f7ff f911 	bl	8007c18 <d_print_subexpr>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	2b2c      	cmp	r3, #44	; 0x2c
 80089fe:	f040 8234 	bne.w	8008e6a <d_print_comp+0x11fa>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	f040 822d 	bne.w	8008e6a <d_print_comp+0x11fa>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8008a1c:	f040 8225 	bne.w	8008e6a <d_print_comp+0x11fa>
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f04f 0129 	mov.w	r1, #41	; 0x29
 8008a26:	f7fe febb 	bl	80077a0 <d_append_char>
 8008a2a:	e21e      	b.n	8008e6a <d_print_comp+0x11fa>
 8008a2c:	08013810 	.word	0x08013810
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7fe fe6b 	bl	800770c <d_print_error>
 8008a36:	e21b      	b.n	8008e70 <d_print_comp+0x1200>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b33      	cmp	r3, #51	; 0x33
 8008a40:	d105      	bne.n	8008a4e <d_print_comp+0xdde>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b34      	cmp	r3, #52	; 0x34
 8008a4c:	d003      	beq.n	8008a56 <d_print_comp+0xde6>
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7fe fe5c 	bl	800770c <d_print_error>
 8008a54:	e20c      	b.n	8008e70 <d_print_comp+0x1200>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	f7ff f8da 	bl	8007c18 <d_print_subexpr>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	f000 fd66 	bl	800953c <d_print_expr_op>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	f7ff f8cc 	bl	8007c18 <d_print_subexpr>
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f244 21d8 	movw	r1, #17112	; 0x42d8
 8008a86:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008a8a:	f7fe fec9 	bl	8007820 <d_append_string>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f7ff f8bd 	bl	8007c18 <d_print_subexpr>
 8008a9e:	e1e7      	b.n	8008e70 <d_print_comp+0x1200>
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7fe fe33 	bl	800770c <d_print_error>
 8008aa6:	e1e3      	b.n	8008e70 <d_print_comp+0x1200>
 8008aa8:	f04f 0300 	mov.w	r3, #0
 8008aac:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b23      	cmp	r3, #35	; 0x23
 8008ab8:	f040 808a 	bne.w	8008bd0 <d_print_comp+0xf60>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	7c1b      	ldrb	r3, [r3, #16]
 8008ac4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8008ac8:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	db7a      	blt.n	8008bc6 <d_print_comp+0xf56>
 8008ad0:	2b06      	cmp	r3, #6
 8008ad2:	dd02      	ble.n	8008ada <d_print_comp+0xe6a>
 8008ad4:	2b07      	cmp	r3, #7
 8008ad6:	d04d      	beq.n	8008b74 <d_print_comp+0xf04>
 8008ad8:	e075      	b.n	8008bc6 <d_print_comp+0xf56>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d172      	bne.n	8008bca <d_print_comp+0xf5a>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b36      	cmp	r3, #54	; 0x36
 8008aea:	d104      	bne.n	8008af6 <d_print_comp+0xe86>
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8008af2:	f7fe fe55 	bl	80077a0 <d_append_char>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4619      	mov	r1, r3
 8008afe:	f7ff f8b7 	bl	8007c70 <d_print_comp>
 8008b02:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8008b06:	f1a3 0302 	sub.w	r3, r3, #2
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	d830      	bhi.n	8008b70 <d_print_comp+0xf00>
 8008b0e:	a101      	add	r1, pc, #4	; (adr r1, 8008b14 <d_print_comp+0xea4>)
 8008b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b14:	08008b29 	.word	0x08008b29
 8008b18:	08008b35 	.word	0x08008b35
 8008b1c:	08008b41 	.word	0x08008b41
 8008b20:	08008b51 	.word	0x08008b51
 8008b24:	08008b61 	.word	0x08008b61
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f04f 0175 	mov.w	r1, #117	; 0x75
 8008b2e:	f7fe fe37 	bl	80077a0 <d_append_char>
 8008b32:	e01e      	b.n	8008b72 <d_print_comp+0xf02>
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f04f 016c 	mov.w	r1, #108	; 0x6c
 8008b3a:	f7fe fe31 	bl	80077a0 <d_append_char>
 8008b3e:	e018      	b.n	8008b72 <d_print_comp+0xf02>
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f244 21dc 	movw	r1, #17116	; 0x42dc
 8008b46:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008b4a:	f7fe fe69 	bl	8007820 <d_append_string>
 8008b4e:	e010      	b.n	8008b72 <d_print_comp+0xf02>
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f244 21e0 	movw	r1, #17120	; 0x42e0
 8008b56:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008b5a:	f7fe fe61 	bl	8007820 <d_append_string>
 8008b5e:	e008      	b.n	8008b72 <d_print_comp+0xf02>
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f244 21e4 	movw	r1, #17124	; 0x42e4
 8008b66:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008b6a:	f7fe fe59 	bl	8007820 <d_append_string>
 8008b6e:	e000      	b.n	8008b72 <d_print_comp+0xf02>
 8008b70:	bf00      	nop
 8008b72:	e17d      	b.n	8008e70 <d_print_comp+0x1200>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d127      	bne.n	8008bce <d_print_comp+0xf5e>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d122      	bne.n	8008bce <d_print_comp+0xf5e>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b35      	cmp	r3, #53	; 0x35
 8008b8e:	d11e      	bne.n	8008bce <d_print_comp+0xf5e>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b30      	cmp	r3, #48	; 0x30
 8008b9a:	d002      	beq.n	8008ba2 <d_print_comp+0xf32>
 8008b9c:	2b31      	cmp	r3, #49	; 0x31
 8008b9e:	d008      	beq.n	8008bb2 <d_print_comp+0xf42>
 8008ba0:	e00f      	b.n	8008bc2 <d_print_comp+0xf52>
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f244 21e8 	movw	r1, #17128	; 0x42e8
 8008ba8:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008bac:	f7fe fe38 	bl	8007820 <d_append_string>
 8008bb0:	e15e      	b.n	8008e70 <d_print_comp+0x1200>
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f244 21f0 	movw	r1, #17136	; 0x42f0
 8008bb8:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008bbc:	f7fe fe30 	bl	8007820 <d_append_string>
 8008bc0:	e156      	b.n	8008e70 <d_print_comp+0x1200>
 8008bc2:	bf00      	nop
 8008bc4:	e003      	b.n	8008bce <d_print_comp+0xf5e>
 8008bc6:	bf00      	nop
 8008bc8:	e002      	b.n	8008bd0 <d_print_comp+0xf60>
 8008bca:	bf00      	nop
 8008bcc:	e000      	b.n	8008bd0 <d_print_comp+0xf60>
 8008bce:	bf00      	nop
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f04f 0128 	mov.w	r1, #40	; 0x28
 8008bd6:	f7fe fde3 	bl	80077a0 <d_append_char>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4619      	mov	r1, r3
 8008be2:	f7ff f845 	bl	8007c70 <d_print_comp>
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f04f 0129 	mov.w	r1, #41	; 0x29
 8008bec:	f7fe fdd8 	bl	80077a0 <d_append_char>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b36      	cmp	r3, #54	; 0x36
 8008bf6:	d104      	bne.n	8008c02 <d_print_comp+0xf92>
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8008bfe:	f7fe fdcf 	bl	80077a0 <d_append_char>
 8008c02:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d104      	bne.n	8008c14 <d_print_comp+0xfa4>
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f04f 015b 	mov.w	r1, #91	; 0x5b
 8008c10:	f7fe fdc6 	bl	80077a0 <d_append_char>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	f7ff f828 	bl	8007c70 <d_print_comp>
 8008c20:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	f040 8122 	bne.w	8008e6e <d_print_comp+0x11fe>
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8008c30:	f7fe fdb6 	bl	80077a0 <d_append_char>
 8008c34:	e11b      	b.n	8008e6e <d_print_comp+0x11fe>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	f7fe fe01 	bl	8007844 <d_append_num>
 8008c42:	e115      	b.n	8008e70 <d_print_comp+0x1200>
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f244 21f8 	movw	r1, #17144	; 0x42f8
 8008c4a:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008c4e:	f7fe fde7 	bl	8007820 <d_append_string>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7ff f809 	bl	8007c70 <d_print_comp>
 8008c5e:	e107      	b.n	8008e70 <d_print_comp+0x1200>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	4619      	mov	r1, r3
 8008c68:	f7ff f802 	bl	8007c70 <d_print_comp>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	4619      	mov	r1, r3
 8008c74:	f7fe fffc 	bl	8007c70 <d_print_comp>
 8008c78:	e0fa      	b.n	8008e70 <d_print_comp+0x1200>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4619      	mov	r1, r3
 8008c84:	f7fe fd8c 	bl	80077a0 <d_append_char>
 8008c88:	e0f2      	b.n	8008e70 <d_print_comp+0x1200>
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f244 3108 	movw	r1, #17160	; 0x4308
 8008c90:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008c94:	f7fe fdc4 	bl	8007820 <d_append_string>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	f7fe ffe6 	bl	8007c70 <d_print_comp>
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f04f 0129 	mov.w	r1, #41	; 0x29
 8008caa:	f7fe fd79 	bl	80077a0 <d_append_char>
 8008cae:	e0df      	b.n	8008e70 <d_print_comp+0x1200>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	f7fe feaa 	bl	8007a10 <d_find_pack>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10d      	bne.n	8008ce6 <d_print_comp+0x1076>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	f7fe ffa1 	bl	8007c18 <d_print_subexpr>
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f243 7114 	movw	r1, #14100	; 0x3714
 8008cdc:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008ce0:	f7fe fd9e 	bl	8007820 <d_append_string>
 8008ce4:	e0c4      	b.n	8008e70 <d_print_comp+0x1200>
 8008ce6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8008cea:	f7fe ff73 	bl	8007bd4 <d_pack_length>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	603b      	str	r3, [r7, #0]
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d02:	e01d      	b.n	8008d40 <d_print_comp+0x10d0>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d0a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	f7fe ffad 	bl	8007c70 <d_print_comp>
 8008d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d1a:	f103 32ff 	add.w	r2, r3, #4294967295
 8008d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d22:	429a      	cmp	r2, r3
 8008d24:	dd06      	ble.n	8008d34 <d_print_comp+0x10c4>
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f244 21bc 	movw	r1, #17084	; 0x42bc
 8008d2c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008d30:	f7fe fd76 	bl	8007820 <d_append_string>
 8008d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d38:	f103 0301 	add.w	r3, r3, #1
 8008d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	dbdb      	blt.n	8008d04 <d_print_comp+0x1094>
 8008d4c:	e090      	b.n	8008e70 <d_print_comp+0x1200>
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f244 3114 	movw	r1, #17172	; 0x4314
 8008d54:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008d58:	f7fe fd62 	bl	8007820 <d_append_string>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f103 0301 	add.w	r3, r3, #1
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4619      	mov	r1, r3
 8008d68:	f7fe fd6c 	bl	8007844 <d_append_num>
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8008d72:	f7fe fd15 	bl	80077a0 <d_append_char>
 8008d76:	e07b      	b.n	8008e70 <d_print_comp+0x1200>
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f244 311c 	movw	r1, #17180	; 0x431c
 8008d7e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008d82:	f7fe fd4d 	bl	8007820 <d_append_string>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f7fe ff6f 	bl	8007c70 <d_print_comp>
 8008d92:	e06d      	b.n	8008e70 <d_print_comp+0x1200>
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f244 313c 	movw	r1, #17212	; 0x433c
 8008d9a:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008d9e:	f7fe fd3f 	bl	8007820 <d_append_string>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4619      	mov	r1, r3
 8008daa:	f7fe ff61 	bl	8007c70 <d_print_comp>
 8008dae:	e05f      	b.n	8008e70 <d_print_comp+0x1200>
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f244 315c 	movw	r1, #17244	; 0x435c
 8008db6:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008dba:	f7fe fd31 	bl	8007820 <d_append_string>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f7fe ff53 	bl	8007c70 <d_print_comp>
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f244 3168 	movw	r1, #17256	; 0x4368
 8008dd0:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008dd4:	f7fe fd24 	bl	8007820 <d_append_string>
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f103 0301 	add.w	r3, r3, #1
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4619      	mov	r1, r3
 8008de4:	f7fe fd2e 	bl	8007844 <d_append_num>
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8008dee:	f7fe fcd7 	bl	80077a0 <d_append_char>
 8008df2:	e03d      	b.n	8008e70 <d_print_comp+0x1200>
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f244 316c 	movw	r1, #17260	; 0x436c
 8008dfa:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008dfe:	f7fe fd0f 	bl	8007820 <d_append_string>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f103 0301 	add.w	r3, r3, #1
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f7fe fd19 	bl	8007844 <d_append_num>
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8008e18:	f7fe fcc2 	bl	80077a0 <d_append_char>
 8008e1c:	e028      	b.n	8008e70 <d_print_comp+0x1200>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7fe ff23 	bl	8007c70 <d_print_comp>
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f244 317c 	movw	r1, #17276	; 0x437c
 8008e30:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008e34:	f7fe fcf4 	bl	8007820 <d_append_string>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	f7fe ff16 	bl	8007c70 <d_print_comp>
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8008e4a:	f7fe fca9 	bl	80077a0 <d_append_char>
 8008e4e:	e00f      	b.n	8008e70 <d_print_comp+0x1200>
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7fe fc5b 	bl	800770c <d_print_error>
 8008e56:	bf00      	nop
 8008e58:	e00a      	b.n	8008e70 <d_print_comp+0x1200>
 8008e5a:	bf00      	nop
 8008e5c:	e008      	b.n	8008e70 <d_print_comp+0x1200>
 8008e5e:	bf00      	nop
 8008e60:	e006      	b.n	8008e70 <d_print_comp+0x1200>
 8008e62:	bf00      	nop
 8008e64:	e004      	b.n	8008e70 <d_print_comp+0x1200>
 8008e66:	bf00      	nop
 8008e68:	e002      	b.n	8008e70 <d_print_comp+0x1200>
 8008e6a:	bf00      	nop
 8008e6c:	e000      	b.n	8008e70 <d_print_comp+0x1200>
 8008e6e:	bf00      	nop
 8008e70:	f107 07d4 	add.w	r7, r7, #212	; 0xd4
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd90      	pop	{r4, r7, pc}

08008e78 <d_print_java_identifier>:
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	; 0x28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	18d3      	adds	r3, r2, r3
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e90:	e071      	b.n	8008f76 <d_print_java_identifier+0xfe>
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	dd62      	ble.n	8008f62 <d_print_java_identifier+0xea>
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b5f      	cmp	r3, #95	; 0x5f
 8008ea2:	d15e      	bne.n	8008f62 <d_print_java_identifier+0xea>
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	f103 0301 	add.w	r3, r3, #1
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b5f      	cmp	r3, #95	; 0x5f
 8008eae:	d158      	bne.n	8008f62 <d_print_java_identifier+0xea>
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	f103 0302 	add.w	r3, r3, #2
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b55      	cmp	r3, #85	; 0x55
 8008eba:	d152      	bne.n	8008f62 <d_print_java_identifier+0xea>
 8008ebc:	f04f 0300 	mov.w	r3, #0
 8008ec0:	623b      	str	r3, [r7, #32]
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	f103 0303 	add.w	r3, r3, #3
 8008ec8:	61fb      	str	r3, [r7, #28]
 8008eca:	e032      	b.n	8008f32 <d_print_java_identifier+0xba>
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8008ed2:	d909      	bls.n	8008ee8 <d_print_java_identifier+0x70>
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	2b39      	cmp	r3, #57	; 0x39
 8008eda:	d805      	bhi.n	8008ee8 <d_print_java_identifier+0x70>
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e01a      	b.n	8008f1e <d_print_java_identifier+0xa6>
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b40      	cmp	r3, #64	; 0x40
 8008eee:	d909      	bls.n	8008f04 <d_print_java_identifier+0x8c>
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2b46      	cmp	r3, #70	; 0x46
 8008ef6:	d805      	bhi.n	8008f04 <d_print_java_identifier+0x8c>
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 8008f00:	61bb      	str	r3, [r7, #24]
 8008f02:	e00c      	b.n	8008f1e <d_print_java_identifier+0xa6>
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b60      	cmp	r3, #96	; 0x60
 8008f0a:	d916      	bls.n	8008f3a <d_print_java_identifier+0xc2>
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b66      	cmp	r3, #102	; 0x66
 8008f12:	d812      	bhi.n	8008f3a <d_print_java_identifier+0xc2>
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	f1a3 0357 	sub.w	r3, r3, #87	; 0x57
 8008f1c:	61bb      	str	r3, [r7, #24]
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	ea4f 1203 	mov.w	r2, r3, lsl #4
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	18d3      	adds	r3, r2, r3
 8008f28:	623b      	str	r3, [r7, #32]
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	f103 0301 	add.w	r3, r3, #1
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	69fa      	ldr	r2, [r7, #28]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d3c8      	bcc.n	8008ecc <d_print_java_identifier+0x54>
 8008f3a:	69fa      	ldr	r2, [r7, #28]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d20f      	bcs.n	8008f62 <d_print_java_identifier+0xea>
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b5f      	cmp	r3, #95	; 0x5f
 8008f48:	d10b      	bne.n	8008f62 <d_print_java_identifier+0xea>
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	2bff      	cmp	r3, #255	; 0xff
 8008f4e:	d808      	bhi.n	8008f62 <d_print_java_identifier+0xea>
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	4619      	mov	r1, r3
 8008f58:	f7fe fc22 	bl	80077a0 <d_append_char>
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f60:	e005      	b.n	8008f6e <d_print_java_identifier+0xf6>
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f7fe fc19 	bl	80077a0 <d_append_char>
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	f103 0301 	add.w	r3, r3, #1
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
 8008f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d389      	bcc.n	8008e92 <d_print_java_identifier+0x1a>
 8008f7e:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop

08008f88 <d_print_mod_list>:
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 80d2 	beq.w	8009140 <d_print_mod_list+0x1b8>
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7fe fbc3 	bl	8007728 <d_print_saw_error>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f040 80cb 	bne.w	8009140 <d_print_mod_list+0x1b8>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d111      	bne.n	8008fd6 <d_print_mod_list+0x4e>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d116      	bne.n	8008fe6 <d_print_mod_list+0x5e>
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b1a      	cmp	r3, #26
 8008fc0:	d009      	beq.n	8008fd6 <d_print_mod_list+0x4e>
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b1b      	cmp	r3, #27
 8008fca:	d004      	beq.n	8008fd6 <d_print_mod_list+0x4e>
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b1c      	cmp	r3, #28
 8008fd4:	d107      	bne.n	8008fe6 <d_print_mod_list+0x5e>
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	f7ff ffd2 	bl	8008f88 <d_print_mod_list>
 8008fe4:	e0ad      	b.n	8009142 <d_print_mod_list+0x1ba>
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f04f 0201 	mov.w	r2, #1
 8008fec:	609a      	str	r2, [r3, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	2b25      	cmp	r3, #37	; 0x25
 8009008:	d10d      	bne.n	8009026 <d_print_mod_list+0x9e>
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	4611      	mov	r1, r2
 8009016:	461a      	mov	r2, r3
 8009018:	f000 f982 	bl	8009320 <d_print_function_type>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009024:	e08d      	b.n	8009142 <d_print_mod_list+0x1ba>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b26      	cmp	r3, #38	; 0x26
 800902e:	d10d      	bne.n	800904c <d_print_mod_list+0xc4>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	4611      	mov	r1, r2
 800903c:	461a      	mov	r2, r3
 800903e:	f000 fa19 	bl	8009474 <d_print_array_type>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800904a:	e07a      	b.n	8009142 <d_print_mod_list+0x1ba>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d162      	bne.n	800911c <d_print_mod_list+0x194>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800905c:	617b      	str	r3, [r7, #20]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	4619      	mov	r1, r3
 8009072:	f7fe fdfd 	bl	8007c70 <d_print_comp>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0304 	and.w	r3, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d107      	bne.n	800909a <d_print_mod_list+0x112>
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f244 1188 	movw	r1, #16776	; 0x4188
 8009090:	f6c0 0101 	movt	r1, #2049	; 0x801
 8009094:	f7fe fbc4 	bl	8007820 <d_append_string>
 8009098:	e004      	b.n	80090a4 <d_print_mod_list+0x11c>
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f04f 012e 	mov.w	r1, #46	; 0x2e
 80090a0:	f7fe fb7e 	bl	80077a0 <d_append_char>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	61fb      	str	r3, [r7, #28]
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b3f      	cmp	r3, #63	; 0x3f
 80090b2:	d11d      	bne.n	80090f0 <d_print_mod_list+0x168>
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f244 3188 	movw	r1, #17288	; 0x4388
 80090ba:	f6c0 0101 	movt	r1, #2049	; 0x801
 80090be:	f7fe fbaf 	bl	8007820 <d_append_string>
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f103 0301 	add.w	r3, r3, #1
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	4619      	mov	r1, r3
 80090ce:	f7fe fbb9 	bl	8007844 <d_append_num>
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f244 3198 	movw	r1, #17304	; 0x4398
 80090d8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80090dc:	f7fe fba0 	bl	8007820 <d_append_string>
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	61fb      	str	r3, [r7, #28]
 80090e6:	e003      	b.n	80090f0 <d_print_mod_list+0x168>
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	e000      	b.n	80090f2 <d_print_mod_list+0x16a>
 80090f0:	bf00      	nop
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2b1a      	cmp	r3, #26
 80090f8:	d0f6      	beq.n	80090e8 <d_print_mod_list+0x160>
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b1b      	cmp	r3, #27
 8009100:	d0f2      	beq.n	80090e8 <d_print_mod_list+0x160>
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b1c      	cmp	r3, #28
 8009108:	d0ee      	beq.n	80090e8 <d_print_mod_list+0x160>
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	69f9      	ldr	r1, [r7, #28]
 800910e:	f7fe fdaf 	bl	8007c70 <d_print_comp>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800911a:	e012      	b.n	8009142 <d_print_mod_list+0x1ba>
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	4619      	mov	r1, r3
 8009124:	f000 f812 	bl	800914c <d_print_mod>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	4619      	mov	r1, r3
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	f7ff ff25 	bl	8008f88 <d_print_mod_list>
 800913e:	e000      	b.n	8009142 <d_print_mod_list+0x1ba>
 8009140:	bf00      	nop
 8009142:	f107 0720 	add.w	r7, r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop

0800914c <d_print_mod>:
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f1a3 0303 	sub.w	r3, r3, #3
 800915e:	2b26      	cmp	r3, #38	; 0x26
 8009160:	f200 80d3 	bhi.w	800930a <d_print_mod+0x1be>
 8009164:	a201      	add	r2, pc, #4	; (adr r2, 800916c <d_print_mod+0x20>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	080092d7 	.word	0x080092d7
 8009170:	0800930b 	.word	0x0800930b
 8009174:	0800930b 	.word	0x0800930b
 8009178:	0800930b 	.word	0x0800930b
 800917c:	0800930b 	.word	0x0800930b
 8009180:	0800930b 	.word	0x0800930b
 8009184:	0800930b 	.word	0x0800930b
 8009188:	0800930b 	.word	0x0800930b
 800918c:	0800930b 	.word	0x0800930b
 8009190:	0800930b 	.word	0x0800930b
 8009194:	0800930b 	.word	0x0800930b
 8009198:	0800930b 	.word	0x0800930b
 800919c:	0800930b 	.word	0x0800930b
 80091a0:	0800930b 	.word	0x0800930b
 80091a4:	0800930b 	.word	0x0800930b
 80091a8:	0800930b 	.word	0x0800930b
 80091ac:	0800930b 	.word	0x0800930b
 80091b0:	0800930b 	.word	0x0800930b
 80091b4:	0800930b 	.word	0x0800930b
 80091b8:	0800930b 	.word	0x0800930b
 80091bc:	08009209 	.word	0x08009209
 80091c0:	08009219 	.word	0x08009219
 80091c4:	08009229 	.word	0x08009229
 80091c8:	08009209 	.word	0x08009209
 80091cc:	08009219 	.word	0x08009219
 80091d0:	08009229 	.word	0x08009229
 80091d4:	08009239 	.word	0x08009239
 80091d8:	08009251 	.word	0x08009251
 80091dc:	08009269 	.word	0x08009269
 80091e0:	08009275 	.word	0x08009275
 80091e4:	08009285 	.word	0x08009285
 80091e8:	08009295 	.word	0x08009295
 80091ec:	0800930b 	.word	0x0800930b
 80091f0:	0800930b 	.word	0x0800930b
 80091f4:	0800930b 	.word	0x0800930b
 80091f8:	0800930b 	.word	0x0800930b
 80091fc:	080092a5 	.word	0x080092a5
 8009200:	0800930b 	.word	0x0800930b
 8009204:	080092e5 	.word	0x080092e5
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f244 319c 	movw	r1, #17308	; 0x439c
 800920e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8009212:	f7fe fb05 	bl	8007820 <d_append_string>
 8009216:	e07f      	b.n	8009318 <d_print_mod+0x1cc>
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f244 31a8 	movw	r1, #17320	; 0x43a8
 800921e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8009222:	f7fe fafd 	bl	8007820 <d_append_string>
 8009226:	e077      	b.n	8009318 <d_print_mod+0x1cc>
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f244 31b4 	movw	r1, #17332	; 0x43b4
 800922e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8009232:	f7fe faf5 	bl	8007820 <d_append_string>
 8009236:	e06f      	b.n	8009318 <d_print_mod+0x1cc>
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f04f 0120 	mov.w	r1, #32
 800923e:	f7fe faaf 	bl	80077a0 <d_append_char>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4619      	mov	r1, r3
 800924a:	f7fe fd11 	bl	8007c70 <d_print_comp>
 800924e:	e063      	b.n	8009318 <d_print_mod+0x1cc>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b00      	cmp	r3, #0
 800925a:	d15c      	bne.n	8009316 <d_print_mod+0x1ca>
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8009262:	f7fe fa9d 	bl	80077a0 <d_append_char>
 8009266:	e056      	b.n	8009316 <d_print_mod+0x1ca>
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f04f 0126 	mov.w	r1, #38	; 0x26
 800926e:	f7fe fa97 	bl	80077a0 <d_append_char>
 8009272:	e051      	b.n	8009318 <d_print_mod+0x1cc>
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f643 2140 	movw	r1, #14912	; 0x3a40
 800927a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800927e:	f7fe facf 	bl	8007820 <d_append_string>
 8009282:	e049      	b.n	8009318 <d_print_mod+0x1cc>
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f244 31bc 	movw	r1, #17340	; 0x43bc
 800928a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800928e:	f7fe fac7 	bl	8007820 <d_append_string>
 8009292:	e041      	b.n	8009318 <d_print_mod+0x1cc>
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f244 31c8 	movw	r1, #17352	; 0x43c8
 800929a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800929e:	f7fe fabf 	bl	8007820 <d_append_string>
 80092a2:	e039      	b.n	8009318 <d_print_mod+0x1cc>
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7fe fae7 	bl	8007878 <d_last_char>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b28      	cmp	r3, #40	; 0x28
 80092ae:	d004      	beq.n	80092ba <d_print_mod+0x16e>
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f04f 0120 	mov.w	r1, #32
 80092b6:	f7fe fa73 	bl	80077a0 <d_append_char>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	4619      	mov	r1, r3
 80092c2:	f7fe fcd5 	bl	8007c70 <d_print_comp>
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f244 31d4 	movw	r1, #17364	; 0x43d4
 80092cc:	f6c0 0101 	movt	r1, #2049	; 0x801
 80092d0:	f7fe faa6 	bl	8007820 <d_append_string>
 80092d4:	e020      	b.n	8009318 <d_print_mod+0x1cc>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4619      	mov	r1, r3
 80092de:	f7fe fcc7 	bl	8007c70 <d_print_comp>
 80092e2:	e019      	b.n	8009318 <d_print_mod+0x1cc>
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f244 31d8 	movw	r1, #17368	; 0x43d8
 80092ea:	f6c0 0101 	movt	r1, #2049	; 0x801
 80092ee:	f7fe fa97 	bl	8007820 <d_append_string>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4619      	mov	r1, r3
 80092fa:	f7fe fcb9 	bl	8007c70 <d_print_comp>
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f04f 0129 	mov.w	r1, #41	; 0x29
 8009304:	f7fe fa4c 	bl	80077a0 <d_append_char>
 8009308:	e006      	b.n	8009318 <d_print_mod+0x1cc>
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	f7fe fcaf 	bl	8007c70 <d_print_comp>
 8009312:	bf00      	nop
 8009314:	e000      	b.n	8009318 <d_print_mod+0x1cc>
 8009316:	bf00      	nop
 8009318:	f107 0708 	add.w	r7, r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <d_print_function_type>:
 8009320:	b580      	push	{r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	f04f 0300 	mov.w	r3, #0
 8009330:	61fb      	str	r3, [r7, #28]
 8009332:	f04f 0300 	mov.w	r3, #0
 8009336:	61bb      	str	r3, [r7, #24]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	e032      	b.n	80093a4 <d_print_function_type+0x84>
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d132      	bne.n	80093ac <d_print_function_type+0x8c>
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	f1a3 0317 	sub.w	r3, r3, #23
 8009350:	2b10      	cmp	r3, #16
 8009352:	d81e      	bhi.n	8009392 <d_print_function_type+0x72>
 8009354:	f04f 0201 	mov.w	r2, #1
 8009358:	fa02 f203 	lsl.w	r2, r2, r3
 800935c:	f640 4347 	movw	r3, #3143	; 0xc47
 8009360:	f2c0 0301 	movt	r3, #1
 8009364:	4013      	ands	r3, r2
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10c      	bne.n	8009384 <d_print_function_type+0x64>
 800936a:	f402 7360 	and.w	r3, r2, #896	; 0x380
 800936e:	2b00      	cmp	r3, #0
 8009370:	d104      	bne.n	800937c <d_print_function_type+0x5c>
 8009372:	f002 0338 	and.w	r3, r2, #56	; 0x38
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10d      	bne.n	8009396 <d_print_function_type+0x76>
 800937a:	e00a      	b.n	8009392 <d_print_function_type+0x72>
 800937c:	f04f 0301 	mov.w	r3, #1
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	e009      	b.n	8009398 <d_print_function_type+0x78>
 8009384:	f04f 0301 	mov.w	r3, #1
 8009388:	61bb      	str	r3, [r7, #24]
 800938a:	f04f 0301 	mov.w	r3, #1
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e002      	b.n	8009398 <d_print_function_type+0x78>
 8009392:	bf00      	nop
 8009394:	e000      	b.n	8009398 <d_print_function_type+0x78>
 8009396:	bf00      	nop
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d108      	bne.n	80093b0 <d_print_function_type+0x90>
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	617b      	str	r3, [r7, #20]
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1c9      	bne.n	800933e <d_print_function_type+0x1e>
 80093aa:	e002      	b.n	80093b2 <d_print_function_type+0x92>
 80093ac:	bf00      	nop
 80093ae:	e000      	b.n	80093b2 <d_print_function_type+0x92>
 80093b0:	bf00      	nop
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d024      	beq.n	8009402 <d_print_function_type+0xe2>
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10e      	bne.n	80093dc <d_print_function_type+0xbc>
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f7fe fa5a 	bl	8007878 <d_last_char>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b28      	cmp	r3, #40	; 0x28
 80093c8:	d008      	beq.n	80093dc <d_print_function_type+0xbc>
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7fe fa54 	bl	8007878 <d_last_char>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b2a      	cmp	r3, #42	; 0x2a
 80093d4:	d002      	beq.n	80093dc <d_print_function_type+0xbc>
 80093d6:	f04f 0301 	mov.w	r3, #1
 80093da:	61bb      	str	r3, [r7, #24]
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00a      	beq.n	80093f8 <d_print_function_type+0xd8>
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f7fe fa48 	bl	8007878 <d_last_char>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d004      	beq.n	80093f8 <d_print_function_type+0xd8>
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f04f 0120 	mov.w	r1, #32
 80093f4:	f7fe f9d4 	bl	80077a0 <d_append_char>
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f04f 0128 	mov.w	r1, #40	; 0x28
 80093fe:	f7fe f9cf 	bl	80077a0 <d_append_char>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009408:	613b      	str	r3, [r7, #16]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	f04f 0200 	mov.w	r2, #0
 800941c:	f7ff fdb4 	bl	8008f88 <d_print_mod_list>
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <d_print_function_type+0x110>
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f04f 0129 	mov.w	r1, #41	; 0x29
 800942c:	f7fe f9b8 	bl	80077a0 <d_append_char>
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f04f 0128 	mov.w	r1, #40	; 0x28
 8009436:	f7fe f9b3 	bl	80077a0 <d_append_char>
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d005      	beq.n	800944e <d_print_function_type+0x12e>
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	4619      	mov	r1, r3
 800944a:	f7fe fc11 	bl	8007c70 <d_print_comp>
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f04f 0129 	mov.w	r1, #41	; 0x29
 8009454:	f7fe f9a4 	bl	80077a0 <d_append_char>
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	f04f 0201 	mov.w	r2, #1
 8009460:	f7ff fd92 	bl	8008f88 <d_print_mod_list>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800946c:	f107 0720 	add.w	r7, r7, #32
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <d_print_array_type>:
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	f04f 0301 	mov.w	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d037      	beq.n	80094fc <d_print_array_type+0x88>
 800948c:	f04f 0300 	mov.w	r3, #0
 8009490:	61bb      	str	r3, [r7, #24]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	e016      	b.n	80094c6 <d_print_array_type+0x52>
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10f      	bne.n	80094c0 <d_print_array_type+0x4c>
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b26      	cmp	r3, #38	; 0x26
 80094a8:	d103      	bne.n	80094b2 <d_print_array_type+0x3e>
 80094aa:	f04f 0300 	mov.w	r3, #0
 80094ae:	61fb      	str	r3, [r7, #28]
 80094b0:	e00c      	b.n	80094cc <d_print_array_type+0x58>
 80094b2:	f04f 0301 	mov.w	r3, #1
 80094b6:	61bb      	str	r3, [r7, #24]
 80094b8:	f04f 0301 	mov.w	r3, #1
 80094bc:	61fb      	str	r3, [r7, #28]
 80094be:	e005      	b.n	80094cc <d_print_array_type+0x58>
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	617b      	str	r3, [r7, #20]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e5      	bne.n	8009498 <d_print_array_type+0x24>
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d006      	beq.n	80094e0 <d_print_array_type+0x6c>
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f244 31e4 	movw	r1, #17380	; 0x43e4
 80094d8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80094dc:	f7fe f9a0 	bl	8007820 <d_append_string>
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	6879      	ldr	r1, [r7, #4]
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	f7ff fd4e 	bl	8008f88 <d_print_mod_list>
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d004      	beq.n	80094fc <d_print_array_type+0x88>
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f04f 0129 	mov.w	r1, #41	; 0x29
 80094f8:	f7fe f952 	bl	80077a0 <d_append_char>
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <d_print_array_type+0x98>
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f04f 0120 	mov.w	r1, #32
 8009508:	f7fe f94a 	bl	80077a0 <d_append_char>
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f04f 015b 	mov.w	r1, #91	; 0x5b
 8009512:	f7fe f945 	bl	80077a0 <d_append_char>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d005      	beq.n	800952a <d_print_array_type+0xb6>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	4619      	mov	r1, r3
 8009526:	f7fe fba3 	bl	8007c70 <d_print_comp>
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8009530:	f7fe f936 	bl	80077a0 <d_append_char>
 8009534:	f107 0720 	add.w	r7, r7, #32
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <d_print_expr_op>:
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b2c      	cmp	r3, #44	; 0x2c
 800954c:	d10b      	bne.n	8009566 <d_print_expr_op+0x2a>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	4611      	mov	r1, r2
 800955e:	461a      	mov	r2, r3
 8009560:	f7fe f940 	bl	80077e4 <d_append_buffer>
 8009564:	e003      	b.n	800956e <d_print_expr_op+0x32>
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	f7fe fb81 	bl	8007c70 <d_print_comp>
 800956e:	f107 0708 	add.w	r7, r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop

08009578 <d_print_cast>:
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b04      	cmp	r3, #4
 800958a:	d006      	beq.n	800959a <d_print_cast+0x22>
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	4619      	mov	r1, r3
 8009594:	f7fe fb6c 	bl	8007c70 <d_print_comp>
 8009598:	e04a      	b.n	8009630 <d_print_cast+0xb8>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f107 020c 	add.w	r2, r7, #12
 80095ba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	613b      	str	r3, [r7, #16]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4619      	mov	r1, r3
 80095ce:	f7fe fb4f 	bl	8007c70 <d_print_comp>
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7fe f94c 	bl	8007878 <d_last_char>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b3c      	cmp	r3, #60	; 0x3c
 80095e4:	d104      	bne.n	80095f0 <d_print_cast+0x78>
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f04f 0120 	mov.w	r1, #32
 80095ec:	f7fe f8d8 	bl	80077a0 <d_append_char>
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80095f6:	f7fe f8d3 	bl	80077a0 <d_append_char>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	4619      	mov	r1, r3
 8009604:	f7fe fb34 	bl	8007c70 <d_print_comp>
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7fe f935 	bl	8007878 <d_last_char>
 800960e:	4603      	mov	r3, r0
 8009610:	2b3e      	cmp	r3, #62	; 0x3e
 8009612:	d104      	bne.n	800961e <d_print_cast+0xa6>
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f04f 0120 	mov.w	r1, #32
 800961a:	f7fe f8c1 	bl	80077a0 <d_append_char>
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8009624:	f7fe f8bc 	bl	80077a0 <d_append_char>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8009630:	f107 0718 	add.w	r7, r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <d_init_info>:
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	18d2      	adds	r2, r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	605a      	str	r2, [r3, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	609a      	str	r2, [r3, #8]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	60da      	str	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009668:	461a      	mov	r2, r3
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	619a      	str	r2, [r3, #24]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	f04f 0200 	mov.w	r2, #0
 8009674:	615a      	str	r2, [r3, #20]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	625a      	str	r2, [r3, #36]	; 0x24
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	f04f 0200 	mov.w	r2, #0
 8009682:	621a      	str	r2, [r3, #32]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	629a      	str	r2, [r3, #40]	; 0x28
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	62da      	str	r2, [r3, #44]	; 0x2c
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	631a      	str	r2, [r3, #48]	; 0x30
 800969c:	f107 0714 	add.w	r7, r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bc80      	pop	{r7}
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop

080096a8 <d_demangle_callback>:
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	b099      	sub	sp, #100	; 0x64
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2b5f      	cmp	r3, #95	; 0x5f
 80096be:	d10a      	bne.n	80096d6 <d_demangle_callback+0x2e>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f103 0301 	add.w	r3, r3, #1
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2b5a      	cmp	r3, #90	; 0x5a
 80096ca:	d104      	bne.n	80096d6 <d_demangle_callback+0x2e>
 80096cc:	f04f 0301 	mov.w	r3, #1
 80096d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096d4:	e049      	b.n	800976a <d_demangle_callback+0xc2>
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f643 2108 	movw	r1, #14856	; 0x3a08
 80096dc:	f6c0 0101 	movt	r1, #2049	; 0x801
 80096e0:	f04f 0208 	mov.w	r2, #8
 80096e4:	f002 fdf4 	bl	800c2d0 <strncmp>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d131      	bne.n	8009752 <d_demangle_callback+0xaa>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f103 0308 	add.w	r3, r3, #8
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b2e      	cmp	r3, #46	; 0x2e
 80096f8:	d00b      	beq.n	8009712 <d_demangle_callback+0x6a>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f103 0308 	add.w	r3, r3, #8
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b5f      	cmp	r3, #95	; 0x5f
 8009704:	d005      	beq.n	8009712 <d_demangle_callback+0x6a>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f103 0308 	add.w	r3, r3, #8
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	2b24      	cmp	r3, #36	; 0x24
 8009710:	d11f      	bne.n	8009752 <d_demangle_callback+0xaa>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f103 0309 	add.w	r3, r3, #9
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b44      	cmp	r3, #68	; 0x44
 800971c:	d005      	beq.n	800972a <d_demangle_callback+0x82>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f103 0309 	add.w	r3, r3, #9
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b49      	cmp	r3, #73	; 0x49
 8009728:	d113      	bne.n	8009752 <d_demangle_callback+0xaa>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f103 030a 	add.w	r3, r3, #10
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	2b5f      	cmp	r3, #95	; 0x5f
 8009734:	d10d      	bne.n	8009752 <d_demangle_callback+0xaa>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f103 0309 	add.w	r3, r3, #9
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b49      	cmp	r3, #73	; 0x49
 8009740:	d102      	bne.n	8009748 <d_demangle_callback+0xa0>
 8009742:	f04f 0302 	mov.w	r3, #2
 8009746:	e001      	b.n	800974c <d_demangle_callback+0xa4>
 8009748:	f04f 0303 	mov.w	r3, #3
 800974c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009750:	e00b      	b.n	800976a <d_demangle_callback+0xc2>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	f003 0310 	and.w	r3, r3, #16
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <d_demangle_callback+0xba>
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	e0f6      	b.n	8009950 <d_demangle_callback+0x2a8>
 8009762:	f04f 0300 	mov.w	r3, #0
 8009766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f002 fd80 	bl	800c270 <strlen>
 8009770:	4602      	mov	r2, r0
 8009772:	f107 0310 	add.w	r3, r7, #16
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	68b9      	ldr	r1, [r7, #8]
 800977a:	f7ff ff5d 	bl	8009638 <d_init_info>
 800977e:	466b      	mov	r3, sp
 8009780:	461e      	mov	r6, r3
 8009782:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8009784:	f105 33ff 	add.w	r3, r5, #4294967295
 8009788:	657b      	str	r3, [r7, #84]	; 0x54
 800978a:	462b      	mov	r3, r5
 800978c:	4618      	mov	r0, r3
 800978e:	f04f 0100 	mov.w	r1, #0
 8009792:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009796:	fb03 f201 	mul.w	r2, r3, r1
 800979a:	f04f 0300 	mov.w	r3, #0
 800979e:	fb03 f300 	mul.w	r3, r3, r0
 80097a2:	18d4      	adds	r4, r2, r3
 80097a4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80097a8:	fba0 2303 	umull	r2, r3, r0, r3
 80097ac:	18e1      	adds	r1, r4, r3
 80097ae:	460b      	mov	r3, r1
 80097b0:	462a      	mov	r2, r5
 80097b2:	4613      	mov	r3, r2
 80097b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097b8:	189b      	adds	r3, r3, r2
 80097ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80097be:	462b      	mov	r3, r5
 80097c0:	4618      	mov	r0, r3
 80097c2:	f04f 0100 	mov.w	r1, #0
 80097c6:	f04f 0360 	mov.w	r3, #96	; 0x60
 80097ca:	fb03 f201 	mul.w	r2, r3, r1
 80097ce:	f04f 0300 	mov.w	r3, #0
 80097d2:	fb03 f300 	mul.w	r3, r3, r0
 80097d6:	18d4      	adds	r4, r2, r3
 80097d8:	f04f 0360 	mov.w	r3, #96	; 0x60
 80097dc:	fba0 2303 	umull	r2, r3, r0, r3
 80097e0:	18e1      	adds	r1, r4, r3
 80097e2:	460b      	mov	r3, r1
 80097e4:	462a      	mov	r2, r5
 80097e6:	4613      	mov	r3, r2
 80097e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097ec:	189b      	adds	r3, r3, r2
 80097ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80097f2:	f103 0307 	add.w	r3, r3, #7
 80097f6:	f103 0307 	add.w	r3, r3, #7
 80097fa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80097fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009802:	ebad 0d03 	sub.w	sp, sp, r3
 8009806:	466b      	mov	r3, sp
 8009808:	f103 0307 	add.w	r3, r3, #7
 800980c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009810:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009814:	653b      	str	r3, [r7, #80]	; 0x50
 8009816:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009818:	f100 33ff 	add.w	r3, r0, #4294967295
 800981c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800981e:	4601      	mov	r1, r0
 8009820:	460a      	mov	r2, r1
 8009822:	f04f 0300 	mov.w	r3, #0
 8009826:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 800982a:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800982e:	ea41 0b0b 	orr.w	fp, r1, fp
 8009832:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009836:	4601      	mov	r1, r0
 8009838:	460a      	mov	r2, r1
 800983a:	f04f 0300 	mov.w	r3, #0
 800983e:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 8009842:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8009846:	ea41 0909 	orr.w	r9, r1, r9
 800984a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800984e:	4603      	mov	r3, r0
 8009850:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009854:	f103 0307 	add.w	r3, r3, #7
 8009858:	f103 0307 	add.w	r3, r3, #7
 800985c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009860:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009864:	ebad 0d03 	sub.w	sp, sp, r3
 8009868:	466b      	mov	r3, sp
 800986a:	f103 0307 	add.w	r3, r3, #7
 800986e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009872:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009876:	64bb      	str	r3, [r7, #72]	; 0x48
 8009878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800987a:	623b      	str	r3, [r7, #32]
 800987c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009880:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009884:	2b03      	cmp	r3, #3
 8009886:	d846      	bhi.n	8009916 <d_demangle_callback+0x26e>
 8009888:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <d_demangle_callback+0x1e8>)
 800988a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988e:	bf00      	nop
 8009890:	080098a1 	.word	0x080098a1
 8009894:	080098b1 	.word	0x080098b1
 8009898:	080098c5 	.word	0x080098c5
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	f107 0310 	add.w	r3, r7, #16
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fc f8b9 	bl	8005a1c <d_type>
 80098aa:	4603      	mov	r3, r0
 80098ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80098ae:	e032      	b.n	8009916 <d_demangle_callback+0x26e>
 80098b0:	f107 0310 	add.w	r3, r7, #16
 80098b4:	4618      	mov	r0, r3
 80098b6:	f04f 0101 	mov.w	r1, #1
 80098ba:	f7fa ff79 	bl	80047b0 <d_mangled_name>
 80098be:	4603      	mov	r3, r0
 80098c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80098c2:	e028      	b.n	8009916 <d_demangle_callback+0x26e>
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	f103 030b 	add.w	r3, r3, #11
 80098ca:	61fb      	str	r3, [r7, #28]
 80098cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d102      	bne.n	80098da <d_demangle_callback+0x232>
 80098d4:	f04f 043c 	mov.w	r4, #60	; 0x3c
 80098d8:	e001      	b.n	80098de <d_demangle_callback+0x236>
 80098da:	f04f 043d 	mov.w	r4, #61	; 0x3d
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	f107 0210 	add.w	r2, r7, #16
 80098e4:	4610      	mov	r0, r2
 80098e6:	4619      	mov	r1, r3
 80098e8:	f7fa fe16 	bl	8004518 <d_make_demangle_mangled_name>
 80098ec:	4603      	mov	r3, r0
 80098ee:	f107 0210 	add.w	r2, r7, #16
 80098f2:	4610      	mov	r0, r2
 80098f4:	4621      	mov	r1, r4
 80098f6:	461a      	mov	r2, r3
 80098f8:	f04f 0300 	mov.w	r3, #0
 80098fc:	f7fa fd40 	bl	8004380 <d_make_comp>
 8009900:	4603      	mov	r3, r0
 8009902:	65bb      	str	r3, [r7, #88]	; 0x58
 8009904:	69fc      	ldr	r4, [r7, #28]
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	4618      	mov	r0, r3
 800990a:	f002 fcb1 	bl	800c270 <strlen>
 800990e:	4603      	mov	r3, r0
 8009910:	18e3      	adds	r3, r4, r3
 8009912:	61fb      	str	r3, [r7, #28]
 8009914:	bf00      	nop
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f003 0301 	and.w	r3, r3, #1
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d006      	beq.n	8009930 <d_demangle_callback+0x288>
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d002      	beq.n	8009930 <d_demangle_callback+0x288>
 800992a:	f04f 0300 	mov.w	r3, #0
 800992e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009932:	2b00      	cmp	r3, #0
 8009934:	d007      	beq.n	8009946 <d_demangle_callback+0x29e>
 8009936:	68b8      	ldr	r0, [r7, #8]
 8009938:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	f7fd ffa9 	bl	8007894 <d_print_callback>
 8009942:	4603      	mov	r3, r0
 8009944:	e001      	b.n	800994a <d_demangle_callback+0x2a2>
 8009946:	f04f 0300 	mov.w	r3, #0
 800994a:	647b      	str	r3, [r7, #68]	; 0x44
 800994c:	46b5      	mov	sp, r6
 800994e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009950:	4618      	mov	r0, r3
 8009952:	f107 0764 	add.w	r7, r7, #100	; 0x64
 8009956:	46bd      	mov	sp, r7
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800995c <d_demangle>:
 800995c:	b580      	push	{r7, lr}
 800995e:	b08a      	sub	sp, #40	; 0x28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	f107 0314 	add.w	r3, r7, #20
 800996c:	4618      	mov	r0, r3
 800996e:	f04f 0100 	mov.w	r1, #0
 8009972:	f7fd fddb 	bl	800752c <d_growable_string_init>
 8009976:	f107 0314 	add.w	r3, r7, #20
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	f247 627d 	movw	r2, #30333	; 0x767d
 8009982:	f6c0 0200 	movt	r2, #2048	; 0x800
 8009986:	f7ff fe8f 	bl	80096a8 <d_demangle_callback>
 800998a:	4603      	mov	r3, r0
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <d_demangle+0x4e>
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	4618      	mov	r0, r3
 8009998:	f001 fb3a 	bl	800b010 <free>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f04f 0200 	mov.w	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	f04f 0300 	mov.w	r3, #0
 80099a8:	e009      	b.n	80099be <d_demangle+0x62>
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <d_demangle+0x58>
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	e001      	b.n	80099b8 <d_demangle+0x5c>
 80099b4:	f04f 0301 	mov.w	r3, #1
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	4618      	mov	r0, r3
 80099c0:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <__cxa_demangle>:
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d109      	bne.n	80099f0 <__cxa_demangle+0x28>
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <__cxa_demangle+0x22>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	f06f 0202 	mvn.w	r2, #2
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	f04f 0300 	mov.w	r3, #0
 80099ee:	e058      	b.n	8009aa2 <__cxa_demangle+0xda>
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00c      	beq.n	8009a10 <__cxa_demangle+0x48>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d109      	bne.n	8009a10 <__cxa_demangle+0x48>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <__cxa_demangle+0x42>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	f06f 0202 	mvn.w	r2, #2
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	f04f 0300 	mov.w	r3, #0
 8009a0e:	e048      	b.n	8009aa2 <__cxa_demangle+0xda>
 8009a10:	f107 0310 	add.w	r3, r7, #16
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f04f 0111 	mov.w	r1, #17
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f7ff ff9e 	bl	800995c <d_demangle>
 8009a20:	4603      	mov	r3, r0
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d111      	bne.n	8009a4e <__cxa_demangle+0x86>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <__cxa_demangle+0x80>
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d104      	bne.n	8009a40 <__cxa_demangle+0x78>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	e003      	b.n	8009a48 <__cxa_demangle+0x80>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	f06f 0201 	mvn.w	r2, #1
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f04f 0300 	mov.w	r3, #0
 8009a4c:	e029      	b.n	8009aa2 <__cxa_demangle+0xda>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d106      	bne.n	8009a62 <__cxa_demangle+0x9a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d01b      	beq.n	8009a92 <__cxa_demangle+0xca>
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	e017      	b.n	8009a92 <__cxa_demangle+0xca>
 8009a62:	6978      	ldr	r0, [r7, #20]
 8009a64:	f002 fc04 	bl	800c270 <strlen>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d209      	bcs.n	8009a86 <__cxa_demangle+0xbe>
 8009a72:	68b8      	ldr	r0, [r7, #8]
 8009a74:	6979      	ldr	r1, [r7, #20]
 8009a76:	f002 fb9b 	bl	800c1b0 <strcpy>
 8009a7a:	6978      	ldr	r0, [r7, #20]
 8009a7c:	f001 fac8 	bl	800b010 <free>
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	e005      	b.n	8009a92 <__cxa_demangle+0xca>
 8009a86:	68b8      	ldr	r0, [r7, #8]
 8009a88:	f001 fac2 	bl	800b010 <free>
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d003      	beq.n	8009aa0 <__cxa_demangle+0xd8>
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f107 0718 	add.w	r7, r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <__gcclibcxx_demangle_callback>:
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <__gcclibcxx_demangle_callback+0x18>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d102      	bne.n	8009aca <__gcclibcxx_demangle_callback+0x1e>
 8009ac4:	f06f 0302 	mvn.w	r3, #2
 8009ac8:	e010      	b.n	8009aec <__gcclibcxx_demangle_callback+0x40>
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f04f 0111 	mov.w	r1, #17
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f7ff fde8 	bl	80096a8 <d_demangle_callback>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <__gcclibcxx_demangle_callback+0x3c>
 8009ae2:	f06f 0301 	mvn.w	r3, #1
 8009ae6:	e001      	b.n	8009aec <__gcclibcxx_demangle_callback+0x40>
 8009ae8:	f04f 0300 	mov.w	r3, #0
 8009aec:	4618      	mov	r0, r3
 8009aee:	f107 0718 	add.w	r7, r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
	...

08009b00 <_Unwind_decode_target2>:
 8009b00:	6803      	ldr	r3, [r0, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_Unwind_decode_target2+0x6>
 8009b04:	181b      	adds	r3, r3, r0
 8009b06:	4618      	mov	r0, r3
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop

08009b0c <selfrel_offset31>:
 8009b0c:	6803      	ldr	r3, [r0, #0]
 8009b0e:	005a      	lsls	r2, r3, #1
 8009b10:	bf4c      	ite	mi
 8009b12:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009b16:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8009b1a:	18c0      	adds	r0, r0, r3
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop

08009b20 <search_EIT_table>:
 8009b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	4604      	mov	r4, r0
 8009b26:	4691      	mov	r9, r2
 8009b28:	460e      	mov	r6, r1
 8009b2a:	b301      	cbz	r1, 8009b6e <search_EIT_table+0x4e>
 8009b2c:	f101 3bff 	add.w	fp, r1, #4294967295
 8009b30:	2700      	movs	r7, #0
 8009b32:	46da      	mov	sl, fp
 8009b34:	eb07 050a 	add.w	r5, r7, sl
 8009b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b3c:	106d      	asrs	r5, r5, #1
 8009b3e:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 8009b42:	4630      	mov	r0, r6
 8009b44:	f7ff ffe2 	bl	8009b0c <selfrel_offset31>
 8009b48:	4680      	mov	r8, r0
 8009b4a:	1c68      	adds	r0, r5, #1
 8009b4c:	45ab      	cmp	fp, r5
 8009b4e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8009b52:	bf08      	it	eq
 8009b54:	f04f 30ff 	moveq.w	r0, #4294967295
 8009b58:	d002      	beq.n	8009b60 <search_EIT_table+0x40>
 8009b5a:	f7ff ffd7 	bl	8009b0c <selfrel_offset31>
 8009b5e:	3801      	subs	r0, #1
 8009b60:	45c8      	cmp	r8, r9
 8009b62:	d907      	bls.n	8009b74 <search_EIT_table+0x54>
 8009b64:	42bd      	cmp	r5, r7
 8009b66:	f105 3aff 	add.w	sl, r5, #4294967295
 8009b6a:	d1e3      	bne.n	8009b34 <search_EIT_table+0x14>
 8009b6c:	2600      	movs	r6, #0
 8009b6e:	4630      	mov	r0, r6
 8009b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	4548      	cmp	r0, r9
 8009b76:	f105 0701 	add.w	r7, r5, #1
 8009b7a:	d3db      	bcc.n	8009b34 <search_EIT_table+0x14>
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b82:	bf00      	nop

08009b84 <get_eit_entry>:
 8009b84:	4b2c      	ldr	r3, [pc, #176]	; (8009c38 <get_eit_entry+0xb4>)
 8009b86:	b530      	push	{r4, r5, lr}
 8009b88:	4604      	mov	r4, r0
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	1e8d      	subs	r5, r1, #2
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d04a      	beq.n	8009c28 <get_eit_entry+0xa4>
 8009b92:	4628      	mov	r0, r5
 8009b94:	a901      	add	r1, sp, #4
 8009b96:	f3af 8000 	nop.w
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d023      	beq.n	8009be8 <get_eit_entry+0x64>
 8009ba0:	462a      	mov	r2, r5
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	9901      	ldr	r1, [sp, #4]
 8009ba6:	f7ff ffbb 	bl	8009b20 <search_EIT_table>
 8009baa:	4605      	mov	r5, r0
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d01e      	beq.n	8009bee <get_eit_entry+0x6a>
 8009bb0:	f7ff ffac 	bl	8009b0c <selfrel_offset31>
 8009bb4:	686b      	ldr	r3, [r5, #4]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	64a0      	str	r0, [r4, #72]	; 0x48
 8009bba:	d011      	beq.n	8009be0 <get_eit_entry+0x5c>
 8009bbc:	1d28      	adds	r0, r5, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	db23      	blt.n	8009c0a <get_eit_entry+0x86>
 8009bc2:	f7ff ffa3 	bl	8009b0c <selfrel_offset31>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8009bca:	64e0      	str	r0, [r4, #76]	; 0x4c
 8009bcc:	6803      	ldr	r3, [r0, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	db10      	blt.n	8009bf4 <get_eit_entry+0x70>
 8009bd2:	f7ff ff9b 	bl	8009b0c <selfrel_offset31>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2000      	movs	r0, #0
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	b003      	add	sp, #12
 8009bde:	bd30      	pop	{r4, r5, pc}
 8009be0:	2300      	movs	r3, #0
 8009be2:	2005      	movs	r0, #5
 8009be4:	6123      	str	r3, [r4, #16]
 8009be6:	e7f9      	b.n	8009bdc <get_eit_entry+0x58>
 8009be8:	6120      	str	r0, [r4, #16]
 8009bea:	2009      	movs	r0, #9
 8009bec:	e7f6      	b.n	8009bdc <get_eit_entry+0x58>
 8009bee:	6120      	str	r0, [r4, #16]
 8009bf0:	2009      	movs	r0, #9
 8009bf2:	e7f3      	b.n	8009bdc <get_eit_entry+0x58>
 8009bf4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8009bf8:	b158      	cbz	r0, 8009c12 <get_eit_entry+0x8e>
 8009bfa:	2801      	cmp	r0, #1
 8009bfc:	d00c      	beq.n	8009c18 <get_eit_entry+0x94>
 8009bfe:	2802      	cmp	r0, #2
 8009c00:	d00e      	beq.n	8009c20 <get_eit_entry+0x9c>
 8009c02:	2300      	movs	r3, #0
 8009c04:	2009      	movs	r0, #9
 8009c06:	6123      	str	r3, [r4, #16]
 8009c08:	e7e8      	b.n	8009bdc <get_eit_entry+0x58>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8009c0e:	6523      	str	r3, [r4, #80]	; 0x50
 8009c10:	e7dc      	b.n	8009bcc <get_eit_entry+0x48>
 8009c12:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <get_eit_entry+0xb8>)
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	e7e1      	b.n	8009bdc <get_eit_entry+0x58>
 8009c18:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <get_eit_entry+0xbc>)
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	6123      	str	r3, [r4, #16]
 8009c1e:	e7dd      	b.n	8009bdc <get_eit_entry+0x58>
 8009c20:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <get_eit_entry+0xc0>)
 8009c22:	2000      	movs	r0, #0
 8009c24:	6123      	str	r3, [r4, #16]
 8009c26:	e7d9      	b.n	8009bdc <get_eit_entry+0x58>
 8009c28:	4a07      	ldr	r2, [pc, #28]	; (8009c48 <get_eit_entry+0xc4>)
 8009c2a:	4908      	ldr	r1, [pc, #32]	; (8009c4c <get_eit_entry+0xc8>)
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	1a8a      	subs	r2, r1, r2
 8009c30:	10d2      	asrs	r2, r2, #3
 8009c32:	9201      	str	r2, [sp, #4]
 8009c34:	e7b4      	b.n	8009ba0 <get_eit_entry+0x1c>
 8009c36:	bf00      	nop
 8009c38:	00000000 	.word	0x00000000
 8009c3c:	0800a125 	.word	0x0800a125
 8009c40:	0800a121 	.word	0x0800a121
 8009c44:	0800a11d 	.word	0x0800a11d
 8009c48:	08014c84 	.word	0x08014c84
 8009c4c:	08014e8c 	.word	0x08014e8c

08009c50 <restore_non_core_regs>:
 8009c50:	6803      	ldr	r3, [r0, #0]
 8009c52:	b510      	push	{r4, lr}
 8009c54:	4604      	mov	r4, r0
 8009c56:	07d8      	lsls	r0, r3, #31
 8009c58:	d406      	bmi.n	8009c68 <restore_non_core_regs+0x18>
 8009c5a:	0799      	lsls	r1, r3, #30
 8009c5c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8009c60:	d509      	bpl.n	8009c76 <restore_non_core_regs+0x26>
 8009c62:	f000 fc69 	bl	800a538 <__gnu_Unwind_Restore_VFP_D>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	075a      	lsls	r2, r3, #29
 8009c6a:	d509      	bpl.n	8009c80 <restore_non_core_regs+0x30>
 8009c6c:	0718      	lsls	r0, r3, #28
 8009c6e:	d50e      	bpl.n	8009c8e <restore_non_core_regs+0x3e>
 8009c70:	06d9      	lsls	r1, r3, #27
 8009c72:	d513      	bpl.n	8009c9c <restore_non_core_regs+0x4c>
 8009c74:	bd10      	pop	{r4, pc}
 8009c76:	f000 fc57 	bl	800a528 <__gnu_Unwind_Restore_VFP>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	075a      	lsls	r2, r3, #29
 8009c7e:	d4f5      	bmi.n	8009c6c <restore_non_core_regs+0x1c>
 8009c80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c84:	f000 fc60 	bl	800a548 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	0718      	lsls	r0, r3, #28
 8009c8c:	d4f0      	bmi.n	8009c70 <restore_non_core_regs+0x20>
 8009c8e:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8009c92:	f000 fc61 	bl	800a558 <__gnu_Unwind_Restore_WMMXD>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	06d9      	lsls	r1, r3, #27
 8009c9a:	d4eb      	bmi.n	8009c74 <restore_non_core_regs+0x24>
 8009c9c:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8009ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ca4:	f000 bc9c 	b.w	800a5e0 <__gnu_Unwind_Restore_WMMXC>

08009ca8 <unwind_phase2_forced>:
 8009ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cac:	f101 0e04 	add.w	lr, r1, #4
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	4616      	mov	r6, r2
 8009cb4:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8009cb8:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8009cbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009cc0:	ac02      	add	r4, sp, #8
 8009cc2:	1d27      	adds	r7, r4, #4
 8009cc4:	f04f 0c00 	mov.w	ip, #0
 8009cc8:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8009ccc:	4566      	cmp	r6, ip
 8009cce:	bf14      	ite	ne
 8009cd0:	260a      	movne	r6, #10
 8009cd2:	2609      	moveq	r6, #9
 8009cd4:	46e0      	mov	r8, ip
 8009cd6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8009cd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009cdc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8009cde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ce2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8009ce4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8009ce8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8009cec:	4628      	mov	r0, r5
 8009cee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009cf0:	f8c4 c000 	str.w	ip, [r4]
 8009cf4:	f7ff ff46 	bl	8009b84 <get_eit_entry>
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	b307      	cbz	r7, 8009d3e <unwind_phase2_forced+0x96>
 8009cfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009cfe:	f046 0610 	orr.w	r6, r6, #16
 8009d02:	2001      	movs	r0, #1
 8009d04:	4631      	mov	r1, r6
 8009d06:	462a      	mov	r2, r5
 8009d08:	6463      	str	r3, [r4, #68]	; 0x44
 8009d0a:	462b      	mov	r3, r5
 8009d0c:	9400      	str	r4, [sp, #0]
 8009d0e:	f8cd a004 	str.w	sl, [sp, #4]
 8009d12:	47c8      	blx	r9
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d12c      	bne.n	8009d72 <unwind_phase2_forced+0xca>
 8009d18:	2f00      	cmp	r7, #0
 8009d1a:	d12b      	bne.n	8009d74 <unwind_phase2_forced+0xcc>
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	a992      	add	r1, sp, #584	; 0x248
 8009d20:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009d24:	f001 fcac 	bl	800b680 <memcpy>
 8009d28:	f1b8 0f08 	cmp.w	r8, #8
 8009d2c:	d128      	bne.n	8009d80 <unwind_phase2_forced+0xd8>
 8009d2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d30:	4628      	mov	r0, r5
 8009d32:	f7ff ff27 	bl	8009b84 <get_eit_entry>
 8009d36:	2609      	movs	r6, #9
 8009d38:	4607      	mov	r7, r0
 8009d3a:	2f00      	cmp	r7, #0
 8009d3c:	d1de      	bne.n	8009cfc <unwind_phase2_forced+0x54>
 8009d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d40:	4621      	mov	r1, r4
 8009d42:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009d46:	a892      	add	r0, sp, #584	; 0x248
 8009d48:	616b      	str	r3, [r5, #20]
 8009d4a:	f001 fc99 	bl	800b680 <memcpy>
 8009d4e:	692b      	ldr	r3, [r5, #16]
 8009d50:	4629      	mov	r1, r5
 8009d52:	aa92      	add	r2, sp, #584	; 0x248
 8009d54:	4630      	mov	r0, r6
 8009d56:	4798      	blx	r3
 8009d58:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	462a      	mov	r2, r5
 8009d5e:	6463      	str	r3, [r4, #68]	; 0x44
 8009d60:	462b      	mov	r3, r5
 8009d62:	9400      	str	r4, [sp, #0]
 8009d64:	f8cd a004 	str.w	sl, [sp, #4]
 8009d68:	4680      	mov	r8, r0
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	47c8      	blx	r9
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d0d2      	beq.n	8009d18 <unwind_phase2_forced+0x70>
 8009d72:	2709      	movs	r7, #9
 8009d74:	4638      	mov	r0, r7
 8009d76:	b022      	add	sp, #136	; 0x88
 8009d78:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8009d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d80:	f1b8 0f07 	cmp.w	r8, #7
 8009d84:	d1f5      	bne.n	8009d72 <unwind_phase2_forced+0xca>
 8009d86:	1d20      	adds	r0, r4, #4
 8009d88:	f000 fbc2 	bl	800a510 <__restore_core_regs>

08009d8c <unwind_phase2>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4604      	mov	r4, r0
 8009d90:	460d      	mov	r5, r1
 8009d92:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8009d94:	4620      	mov	r0, r4
 8009d96:	f7ff fef5 	bl	8009b84 <get_eit_entry>
 8009d9a:	b950      	cbnz	r0, 8009db2 <unwind_phase2+0x26>
 8009d9c:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8009d9e:	2001      	movs	r0, #1
 8009da0:	6923      	ldr	r3, [r4, #16]
 8009da2:	4621      	mov	r1, r4
 8009da4:	462a      	mov	r2, r5
 8009da6:	6166      	str	r6, [r4, #20]
 8009da8:	4798      	blx	r3
 8009daa:	2808      	cmp	r0, #8
 8009dac:	d0f1      	beq.n	8009d92 <unwind_phase2+0x6>
 8009dae:	2807      	cmp	r0, #7
 8009db0:	d001      	beq.n	8009db6 <unwind_phase2+0x2a>
 8009db2:	f000 fe75 	bl	800aaa0 <abort>
 8009db6:	1d28      	adds	r0, r5, #4
 8009db8:	f000 fbaa 	bl	800a510 <__restore_core_regs>

08009dbc <_Unwind_VRS_Get>:
 8009dbc:	b959      	cbnz	r1, 8009dd6 <_Unwind_VRS_Get+0x1a>
 8009dbe:	2a0f      	cmp	r2, #15
 8009dc0:	bf94      	ite	ls
 8009dc2:	2100      	movls	r1, #0
 8009dc4:	2101      	movhi	r1, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bf0c      	ite	eq
 8009dca:	460b      	moveq	r3, r1
 8009dcc:	f041 0301 	orrne.w	r3, r1, #1
 8009dd0:	b133      	cbz	r3, 8009de0 <_Unwind_VRS_Get+0x24>
 8009dd2:	2002      	movs	r0, #2
 8009dd4:	4770      	bx	lr
 8009dd6:	2904      	cmp	r1, #4
 8009dd8:	bf8c      	ite	hi
 8009dda:	2002      	movhi	r0, #2
 8009ddc:	2001      	movls	r0, #1
 8009dde:	4770      	bx	lr
 8009de0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009de4:	4618      	mov	r0, r3
 8009de6:	9b00      	ldr	r3, [sp, #0]
 8009de8:	6852      	ldr	r2, [r2, #4]
 8009dea:	601a      	str	r2, [r3, #0]
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop

08009df0 <_Unwind_GetGR>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	460a      	mov	r2, r1
 8009df4:	b084      	sub	sp, #16
 8009df6:	2100      	movs	r1, #0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	ac03      	add	r4, sp, #12
 8009dfc:	9400      	str	r4, [sp, #0]
 8009dfe:	f7ff ffdd 	bl	8009dbc <_Unwind_VRS_Get>
 8009e02:	9803      	ldr	r0, [sp, #12]
 8009e04:	b004      	add	sp, #16
 8009e06:	bd10      	pop	{r4, pc}

08009e08 <_Unwind_VRS_Set>:
 8009e08:	b959      	cbnz	r1, 8009e22 <_Unwind_VRS_Set+0x1a>
 8009e0a:	2a0f      	cmp	r2, #15
 8009e0c:	bf94      	ite	ls
 8009e0e:	2100      	movls	r1, #0
 8009e10:	2101      	movhi	r1, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bf0c      	ite	eq
 8009e16:	460b      	moveq	r3, r1
 8009e18:	f041 0301 	orrne.w	r3, r1, #1
 8009e1c:	b133      	cbz	r3, 8009e2c <_Unwind_VRS_Set+0x24>
 8009e1e:	2002      	movs	r0, #2
 8009e20:	4770      	bx	lr
 8009e22:	2904      	cmp	r1, #4
 8009e24:	bf8c      	ite	hi
 8009e26:	2002      	movhi	r0, #2
 8009e28:	2001      	movls	r0, #1
 8009e2a:	4770      	bx	lr
 8009e2c:	9900      	ldr	r1, [sp, #0]
 8009e2e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009e32:	4618      	mov	r0, r3
 8009e34:	6809      	ldr	r1, [r1, #0]
 8009e36:	6051      	str	r1, [r2, #4]
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop

08009e3c <_Unwind_SetGR>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	ab04      	add	r3, sp, #16
 8009e42:	460c      	mov	r4, r1
 8009e44:	2100      	movs	r1, #0
 8009e46:	f843 2d04 	str.w	r2, [r3, #-4]!
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	f7ff ffda 	bl	8009e08 <_Unwind_VRS_Set>
 8009e54:	b004      	add	sp, #16
 8009e56:	bd10      	pop	{r4, pc}

08009e58 <__gnu_unwind_pr_common>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	461e      	mov	r6, r3
 8009e5e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009e60:	4617      	mov	r7, r2
 8009e62:	b089      	sub	sp, #36	; 0x24
 8009e64:	460c      	mov	r4, r1
 8009e66:	f000 0803 	and.w	r8, r0, #3
 8009e6a:	f000 0108 	and.w	r1, r0, #8
 8009e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e72:	9102      	str	r1, [sp, #8]
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	f040 80df 	bne.w	800a03a <__gnu_unwind_pr_common+0x1e2>
 8009e7c:	0212      	lsls	r2, r2, #8
 8009e7e:	f88d 6019 	strb.w	r6, [sp, #25]
 8009e82:	9204      	str	r2, [sp, #16]
 8009e84:	2203      	movs	r2, #3
 8009e86:	f88d 2018 	strb.w	r2, [sp, #24]
 8009e8a:	f1b8 0f02 	cmp.w	r8, #2
 8009e8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009e90:	bf08      	it	eq
 8009e92:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 8009e94:	f012 0201 	ands.w	r2, r2, #1
 8009e98:	bf02      	ittt	eq
 8009e9a:	f104 0158 	addeq.w	r1, r4, #88	; 0x58
 8009e9e:	9200      	streq	r2, [sp, #0]
 8009ea0:	9101      	streq	r1, [sp, #4]
 8009ea2:	f040 80d6 	bne.w	800a052 <__gnu_unwind_pr_common+0x1fa>
 8009ea6:	f8d3 9000 	ldr.w	r9, [r3]
 8009eaa:	f1b9 0f00 	cmp.w	r9, #0
 8009eae:	d031      	beq.n	8009f14 <__gnu_unwind_pr_common+0xbc>
 8009eb0:	2e02      	cmp	r6, #2
 8009eb2:	f000 80bd 	beq.w	800a030 <__gnu_unwind_pr_common+0x1d8>
 8009eb6:	f8b3 9000 	ldrh.w	r9, [r3]
 8009eba:	1d1d      	adds	r5, r3, #4
 8009ebc:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8009ec0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009ec2:	210f      	movs	r1, #15
 8009ec4:	f02b 0a01 	bic.w	sl, fp, #1
 8009ec8:	4638      	mov	r0, r7
 8009eca:	449a      	add	sl, r3
 8009ecc:	f7ff ff90 	bl	8009df0 <_Unwind_GetGR>
 8009ed0:	4582      	cmp	sl, r0
 8009ed2:	d839      	bhi.n	8009f48 <__gnu_unwind_pr_common+0xf0>
 8009ed4:	f029 0301 	bic.w	r3, r9, #1
 8009ed8:	f00b 0b01 	and.w	fp, fp, #1
 8009edc:	449a      	add	sl, r3
 8009ede:	f009 0901 	and.w	r9, r9, #1
 8009ee2:	4550      	cmp	r0, sl
 8009ee4:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 8009ee8:	bf2c      	ite	cs
 8009eea:	2000      	movcs	r0, #0
 8009eec:	2001      	movcc	r0, #1
 8009eee:	f1b9 0f01 	cmp.w	r9, #1
 8009ef2:	d033      	beq.n	8009f5c <__gnu_unwind_pr_common+0x104>
 8009ef4:	d255      	bcs.n	8009fa2 <__gnu_unwind_pr_common+0x14a>
 8009ef6:	f1b8 0f00 	cmp.w	r8, #0
 8009efa:	bf0c      	ite	eq
 8009efc:	2000      	moveq	r0, #0
 8009efe:	f000 0001 	andne.w	r0, r0, #1
 8009f02:	2800      	cmp	r0, #0
 8009f04:	f040 80f0 	bne.w	800a0e8 <__gnu_unwind_pr_common+0x290>
 8009f08:	1d2b      	adds	r3, r5, #4
 8009f0a:	f8d3 9000 	ldr.w	r9, [r3]
 8009f0e:	f1b9 0f00 	cmp.w	r9, #0
 8009f12:	d1cd      	bne.n	8009eb0 <__gnu_unwind_pr_common+0x58>
 8009f14:	4638      	mov	r0, r7
 8009f16:	a904      	add	r1, sp, #16
 8009f18:	f000 fbfc 	bl	800a714 <__gnu_unwind_execute>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d143      	bne.n	8009fa8 <__gnu_unwind_pr_common+0x150>
 8009f20:	9a00      	ldr	r2, [sp, #0]
 8009f22:	2008      	movs	r0, #8
 8009f24:	2a00      	cmp	r2, #0
 8009f26:	d040      	beq.n	8009faa <__gnu_unwind_pr_common+0x152>
 8009f28:	210f      	movs	r1, #15
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	f7ff ff60 	bl	8009df0 <_Unwind_GetGR>
 8009f30:	210e      	movs	r1, #14
 8009f32:	4602      	mov	r2, r0
 8009f34:	4638      	mov	r0, r7
 8009f36:	f7ff ff81 	bl	8009e3c <_Unwind_SetGR>
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	210f      	movs	r1, #15
 8009f3e:	4a76      	ldr	r2, [pc, #472]	; (800a118 <__gnu_unwind_pr_common+0x2c0>)
 8009f40:	f7ff ff7c 	bl	8009e3c <_Unwind_SetGR>
 8009f44:	2007      	movs	r0, #7
 8009f46:	e030      	b.n	8009faa <__gnu_unwind_pr_common+0x152>
 8009f48:	f00b 0b01 	and.w	fp, fp, #1
 8009f4c:	f009 0901 	and.w	r9, r9, #1
 8009f50:	2000      	movs	r0, #0
 8009f52:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 8009f56:	f1b9 0f01 	cmp.w	r9, #1
 8009f5a:	d1cb      	bne.n	8009ef4 <__gnu_unwind_pr_common+0x9c>
 8009f5c:	f1b8 0f00 	cmp.w	r8, #0
 8009f60:	f040 8094 	bne.w	800a08c <__gnu_unwind_pr_common+0x234>
 8009f64:	b1d0      	cbz	r0, 8009f9c <__gnu_unwind_pr_common+0x144>
 8009f66:	686b      	ldr	r3, [r5, #4]
 8009f68:	f8d5 9000 	ldr.w	r9, [r5]
 8009f6c:	1c9a      	adds	r2, r3, #2
 8009f6e:	d01b      	beq.n	8009fa8 <__gnu_unwind_pr_common+0x150>
 8009f70:	9901      	ldr	r1, [sp, #4]
 8009f72:	3301      	adds	r3, #1
 8009f74:	460a      	mov	r2, r1
 8009f76:	9107      	str	r1, [sp, #28]
 8009f78:	f000 80a4 	beq.w	800a0c4 <__gnu_unwind_pr_common+0x26c>
 8009f7c:	1d28      	adds	r0, r5, #4
 8009f7e:	f7ff fdbf 	bl	8009b00 <_Unwind_decode_target2>
 8009f82:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8009f86:	ab07      	add	r3, sp, #28
 8009f88:	4601      	mov	r1, r0
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f008 f968 	bl	8012260 <__cxa_type_match>
 8009f90:	9a07      	ldr	r2, [sp, #28]
 8009f92:	2800      	cmp	r0, #0
 8009f94:	f040 8096 	bne.w	800a0c4 <__gnu_unwind_pr_common+0x26c>
 8009f98:	f8cd 801c 	str.w	r8, [sp, #28]
 8009f9c:	f105 0308 	add.w	r3, r5, #8
 8009fa0:	e781      	b.n	8009ea6 <__gnu_unwind_pr_common+0x4e>
 8009fa2:	f1b9 0f02 	cmp.w	r9, #2
 8009fa6:	d003      	beq.n	8009fb0 <__gnu_unwind_pr_common+0x158>
 8009fa8:	2009      	movs	r0, #9
 8009faa:	b009      	add	sp, #36	; 0x24
 8009fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8009fb6:	f1b8 0f00 	cmp.w	r8, #0
 8009fba:	d14d      	bne.n	800a058 <__gnu_unwind_pr_common+0x200>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d030      	beq.n	800a022 <__gnu_unwind_pr_common+0x1ca>
 8009fc0:	9902      	ldr	r1, [sp, #8]
 8009fc2:	f1d1 0201 	rsbs	r2, r1, #1
 8009fc6:	bf38      	it	cc
 8009fc8:	2200      	movcc	r2, #0
 8009fca:	f1ba 0f00 	cmp.w	sl, #0
 8009fce:	bf08      	it	eq
 8009fd0:	f042 0201 	orreq.w	r2, r2, #1
 8009fd4:	b32a      	cbz	r2, 800a022 <__gnu_unwind_pr_common+0x1ca>
 8009fd6:	f1ba 0f00 	cmp.w	sl, #0
 8009fda:	d07a      	beq.n	800a0d2 <__gnu_unwind_pr_common+0x27a>
 8009fdc:	f105 0904 	add.w	r9, r5, #4
 8009fe0:	46c3      	mov	fp, r8
 8009fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe6:	46b0      	mov	r8, r6
 8009fe8:	462e      	mov	r6, r5
 8009fea:	9d01      	ldr	r5, [sp, #4]
 8009fec:	e004      	b.n	8009ff8 <__gnu_unwind_pr_common+0x1a0>
 8009fee:	4553      	cmp	r3, sl
 8009ff0:	f109 0904 	add.w	r9, r9, #4
 8009ff4:	469b      	mov	fp, r3
 8009ff6:	d06b      	beq.n	800a0d0 <__gnu_unwind_pr_common+0x278>
 8009ff8:	4648      	mov	r0, r9
 8009ffa:	9507      	str	r5, [sp, #28]
 8009ffc:	f7ff fd80 	bl	8009b00 <_Unwind_decode_target2>
 800a000:	ab07      	add	r3, sp, #28
 800a002:	2200      	movs	r2, #0
 800a004:	4601      	mov	r1, r0
 800a006:	4620      	mov	r0, r4
 800a008:	f008 f92a 	bl	8012260 <__cxa_type_match>
 800a00c:	f10b 0301 	add.w	r3, fp, #1
 800a010:	2800      	cmp	r0, #0
 800a012:	d0ec      	beq.n	8009fee <__gnu_unwind_pr_common+0x196>
 800a014:	45da      	cmp	sl, fp
 800a016:	4635      	mov	r5, r6
 800a018:	4646      	mov	r6, r8
 800a01a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a01e:	d058      	beq.n	800a0d2 <__gnu_unwind_pr_common+0x27a>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	db52      	blt.n	800a0cc <__gnu_unwind_pr_common+0x274>
 800a026:	f10a 0a01 	add.w	sl, sl, #1
 800a02a:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 800a02e:	e73a      	b.n	8009ea6 <__gnu_unwind_pr_common+0x4e>
 800a030:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800a034:	f103 0508 	add.w	r5, r3, #8
 800a038:	e742      	b.n	8009ec0 <__gnu_unwind_pr_common+0x68>
 800a03a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800a03e:	0412      	lsls	r2, r2, #16
 800a040:	f88d 1019 	strb.w	r1, [sp, #25]
 800a044:	9204      	str	r2, [sp, #16]
 800a046:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a04a:	2202      	movs	r2, #2
 800a04c:	f88d 2018 	strb.w	r2, [sp, #24]
 800a050:	e71b      	b.n	8009e8a <__gnu_unwind_pr_common+0x32>
 800a052:	2200      	movs	r2, #0
 800a054:	9200      	str	r2, [sp, #0]
 800a056:	e75d      	b.n	8009f14 <__gnu_unwind_pr_common+0xbc>
 800a058:	210d      	movs	r1, #13
 800a05a:	4638      	mov	r0, r7
 800a05c:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800a060:	f7ff fec6 	bl	8009df0 <_Unwind_GetGR>
 800a064:	4581      	cmp	r9, r0
 800a066:	d1db      	bne.n	800a020 <__gnu_unwind_pr_common+0x1c8>
 800a068:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a06a:	429d      	cmp	r5, r3
 800a06c:	d1d8      	bne.n	800a020 <__gnu_unwind_pr_common+0x1c8>
 800a06e:	2200      	movs	r2, #0
 800a070:	1d2b      	adds	r3, r5, #4
 800a072:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a074:	2204      	movs	r2, #4
 800a076:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
 800a07a:	6322      	str	r2, [r4, #48]	; 0x30
 800a07c:	6363      	str	r3, [r4, #52]	; 0x34
 800a07e:	682a      	ldr	r2, [r5, #0]
 800a080:	2a00      	cmp	r2, #0
 800a082:	da44      	bge.n	800a10e <__gnu_unwind_pr_common+0x2b6>
 800a084:	461d      	mov	r5, r3
 800a086:	2301      	movs	r3, #1
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	e7cc      	b.n	800a026 <__gnu_unwind_pr_common+0x1ce>
 800a08c:	210d      	movs	r1, #13
 800a08e:	4638      	mov	r0, r7
 800a090:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800a094:	f7ff feac 	bl	8009df0 <_Unwind_GetGR>
 800a098:	4581      	cmp	r9, r0
 800a09a:	f47f af7f 	bne.w	8009f9c <__gnu_unwind_pr_common+0x144>
 800a09e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a0a0:	429d      	cmp	r5, r3
 800a0a2:	f47f af7b 	bne.w	8009f9c <__gnu_unwind_pr_common+0x144>
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f7ff fd30 	bl	8009b0c <selfrel_offset31>
 800a0ac:	210f      	movs	r1, #15
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	f7ff fec3 	bl	8009e3c <_Unwind_SetGR>
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4622      	mov	r2, r4
 800a0bc:	f7ff febe 	bl	8009e3c <_Unwind_SetGR>
 800a0c0:	2007      	movs	r0, #7
 800a0c2:	e772      	b.n	8009faa <__gnu_unwind_pr_common+0x152>
 800a0c4:	b92a      	cbnz	r2, 800a0d2 <__gnu_unwind_pr_common+0x27a>
 800a0c6:	f105 0308 	add.w	r3, r5, #8
 800a0ca:	e6ec      	b.n	8009ea6 <__gnu_unwind_pr_common+0x4e>
 800a0cc:	3504      	adds	r5, #4
 800a0ce:	e7aa      	b.n	800a026 <__gnu_unwind_pr_common+0x1ce>
 800a0d0:	4635      	mov	r5, r6
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	210d      	movs	r1, #13
 800a0d6:	f7ff fe8b 	bl	8009df0 <_Unwind_GetGR>
 800a0da:	62a5      	str	r5, [r4, #40]	; 0x28
 800a0dc:	4603      	mov	r3, r0
 800a0de:	6223      	str	r3, [r4, #32]
 800a0e0:	9b07      	ldr	r3, [sp, #28]
 800a0e2:	2006      	movs	r0, #6
 800a0e4:	6263      	str	r3, [r4, #36]	; 0x24
 800a0e6:	e760      	b.n	8009faa <__gnu_unwind_pr_common+0x152>
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	3504      	adds	r5, #4
 800a0ec:	f7ff fd0e 	bl	8009b0c <selfrel_offset31>
 800a0f0:	63a5      	str	r5, [r4, #56]	; 0x38
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f008 f92b 	bl	8012350 <__cxa_begin_cleanup>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f43f af54 	beq.w	8009fa8 <__gnu_unwind_pr_common+0x150>
 800a100:	4638      	mov	r0, r7
 800a102:	210f      	movs	r1, #15
 800a104:	4632      	mov	r2, r6
 800a106:	f7ff fe99 	bl	8009e3c <_Unwind_SetGR>
 800a10a:	2007      	movs	r0, #7
 800a10c:	e74d      	b.n	8009faa <__gnu_unwind_pr_common+0x152>
 800a10e:	f10a 0001 	add.w	r0, sl, #1
 800a112:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800a116:	e7c7      	b.n	800a0a8 <__gnu_unwind_pr_common+0x250>
 800a118:	080124c1 	.word	0x080124c1

0800a11c <__aeabi_unwind_cpp_pr2>:
 800a11c:	2302      	movs	r3, #2
 800a11e:	e69b      	b.n	8009e58 <__gnu_unwind_pr_common>

0800a120 <__aeabi_unwind_cpp_pr1>:
 800a120:	2301      	movs	r3, #1
 800a122:	e699      	b.n	8009e58 <__gnu_unwind_pr_common>

0800a124 <__aeabi_unwind_cpp_pr0>:
 800a124:	2300      	movs	r3, #0
 800a126:	e697      	b.n	8009e58 <__gnu_unwind_pr_common>

0800a128 <_Unwind_VRS_Pop>:
 800a128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12c:	4604      	mov	r4, r0
 800a12e:	b0e8      	sub	sp, #416	; 0x1a0
 800a130:	2904      	cmp	r1, #4
 800a132:	d807      	bhi.n	800a144 <_Unwind_VRS_Pop+0x1c>
 800a134:	e8df f001 	tbb	[pc, r1]
 800a138:	034b4d33 	.word	0x034b4d33
 800a13c:	0a          	.byte	0x0a
 800a13d:	00          	.byte	0x00
 800a13e:	2b03      	cmp	r3, #3
 800a140:	f000 80d8 	beq.w	800a2f4 <_Unwind_VRS_Pop+0x1cc>
 800a144:	2002      	movs	r0, #2
 800a146:	b068      	add	sp, #416	; 0x1a0
 800a148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a14c:	2a10      	cmp	r2, #16
 800a14e:	bf94      	ite	ls
 800a150:	2100      	movls	r1, #0
 800a152:	2101      	movhi	r1, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	bf0c      	ite	eq
 800a158:	460b      	moveq	r3, r1
 800a15a:	f041 0301 	orrne.w	r3, r1, #1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1f0      	bne.n	800a144 <_Unwind_VRS_Pop+0x1c>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	06d9      	lsls	r1, r3, #27
 800a166:	f100 80e7 	bmi.w	800a338 <_Unwind_VRS_Pop+0x210>
 800a16a:	ad64      	add	r5, sp, #400	; 0x190
 800a16c:	9201      	str	r2, [sp, #4]
 800a16e:	4628      	mov	r0, r5
 800a170:	2601      	movs	r6, #1
 800a172:	f000 fa3f 	bl	800a5f4 <__gnu_Unwind_Save_WMMXC>
 800a176:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a178:	9a01      	ldr	r2, [sp, #4]
 800a17a:	2300      	movs	r3, #0
 800a17c:	fa16 f103 	lsls.w	r1, r6, r3
 800a180:	4211      	tst	r1, r2
 800a182:	bf1c      	itt	ne
 800a184:	f850 1b04 	ldrne.w	r1, [r0], #4
 800a188:	f845 1023 	strne.w	r1, [r5, r3, lsl #2]
 800a18c:	3301      	adds	r3, #1
 800a18e:	2b04      	cmp	r3, #4
 800a190:	d1f4      	bne.n	800a17c <_Unwind_VRS_Pop+0x54>
 800a192:	63a0      	str	r0, [r4, #56]	; 0x38
 800a194:	4628      	mov	r0, r5
 800a196:	f000 fa23 	bl	800a5e0 <__gnu_Unwind_Restore_WMMXC>
 800a19a:	2000      	movs	r0, #0
 800a19c:	e7d3      	b.n	800a146 <_Unwind_VRS_Pop+0x1e>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1d0      	bne.n	800a144 <_Unwind_VRS_Pop+0x1c>
 800a1a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a1a4:	b292      	uxth	r2, r2
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	fa10 f103 	lsls.w	r1, r0, r3
 800a1ac:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	4211      	tst	r1, r2
 800a1b4:	bf1c      	itt	ne
 800a1b6:	f856 1b04 	ldrne.w	r1, [r6], #4
 800a1ba:	6069      	strne	r1, [r5, #4]
 800a1bc:	2b10      	cmp	r3, #16
 800a1be:	d1f3      	bne.n	800a1a8 <_Unwind_VRS_Pop+0x80>
 800a1c0:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800a1c4:	bf08      	it	eq
 800a1c6:	63a6      	streq	r6, [r4, #56]	; 0x38
 800a1c8:	d0bd      	beq.n	800a146 <_Unwind_VRS_Pop+0x1e>
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	e7bb      	b.n	800a146 <_Unwind_VRS_Pop+0x1e>
 800a1ce:	2001      	movs	r0, #1
 800a1d0:	e7b9      	b.n	800a146 <_Unwind_VRS_Pop+0x1e>
 800a1d2:	1f59      	subs	r1, r3, #5
 800a1d4:	bf18      	it	ne
 800a1d6:	2101      	movne	r1, #1
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	bf0c      	ite	eq
 800a1dc:	2000      	moveq	r0, #0
 800a1de:	f001 0001 	andne.w	r0, r1, #1
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d1ae      	bne.n	800a144 <_Unwind_VRS_Pop+0x1c>
 800a1e6:	0c15      	lsrs	r5, r2, #16
 800a1e8:	b296      	uxth	r6, r2
 800a1ea:	1972      	adds	r2, r6, r5
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	bf14      	ite	ne
 800a1f0:	2020      	movne	r0, #32
 800a1f2:	2010      	moveq	r0, #16
 800a1f4:	4290      	cmp	r0, r2
 800a1f6:	d3a5      	bcc.n	800a144 <_Unwind_VRS_Pop+0x1c>
 800a1f8:	f1a3 0c01 	sub.w	ip, r3, #1
 800a1fc:	f1dc 0700 	rsbs	r7, ip, #0
 800a200:	eb47 070c 	adc.w	r7, r7, ip
 800a204:	2d0f      	cmp	r5, #15
 800a206:	bf94      	ite	ls
 800a208:	2000      	movls	r0, #0
 800a20a:	2001      	movhi	r0, #1
 800a20c:	4238      	tst	r0, r7
 800a20e:	d199      	bne.n	800a144 <_Unwind_VRS_Pop+0x1c>
 800a210:	46b0      	mov	r8, r6
 800a212:	b928      	cbnz	r0, 800a220 <_Unwind_VRS_Pop+0xf8>
 800a214:	2a10      	cmp	r2, #16
 800a216:	bf98      	it	ls
 800a218:	4680      	movls	r8, r0
 800a21a:	d909      	bls.n	800a230 <_Unwind_VRS_Pop+0x108>
 800a21c:	f1a2 0810 	sub.w	r8, r2, #16
 800a220:	f1b8 0f00 	cmp.w	r8, #0
 800a224:	bf0c      	ite	eq
 800a226:	2100      	moveq	r1, #0
 800a228:	f001 0101 	andne.w	r1, r1, #1
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d189      	bne.n	800a144 <_Unwind_VRS_Pop+0x1c>
 800a230:	2d0f      	cmp	r5, #15
 800a232:	d80f      	bhi.n	800a254 <_Unwind_VRS_Pop+0x12c>
 800a234:	6822      	ldr	r2, [r4, #0]
 800a236:	07d1      	lsls	r1, r2, #31
 800a238:	d50c      	bpl.n	800a254 <_Unwind_VRS_Pop+0x12c>
 800a23a:	2b05      	cmp	r3, #5
 800a23c:	f022 0101 	bic.w	r1, r2, #1
 800a240:	4620      	mov	r0, r4
 800a242:	6021      	str	r1, [r4, #0]
 800a244:	f000 80b0 	beq.w	800a3a8 <_Unwind_VRS_Pop+0x280>
 800a248:	f022 0203 	bic.w	r2, r2, #3
 800a24c:	f840 2b48 	str.w	r2, [r0], #72
 800a250:	f000 f96e 	bl	800a530 <__gnu_Unwind_Save_VFP>
 800a254:	f1b8 0f00 	cmp.w	r8, #0
 800a258:	d003      	beq.n	800a262 <_Unwind_VRS_Pop+0x13a>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	075a      	lsls	r2, r3, #29
 800a25e:	f100 8082 	bmi.w	800a366 <_Unwind_VRS_Pop+0x23e>
 800a262:	2f00      	cmp	r7, #0
 800a264:	f040 8096 	bne.w	800a394 <_Unwind_VRS_Pop+0x26c>
 800a268:	2d0f      	cmp	r5, #15
 800a26a:	d975      	bls.n	800a358 <_Unwind_VRS_Pop+0x230>
 800a26c:	f1b8 0f00 	cmp.w	r8, #0
 800a270:	d16c      	bne.n	800a34c <_Unwind_VRS_Pop+0x224>
 800a272:	4633      	mov	r3, r6
 800a274:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a276:	2b00      	cmp	r3, #0
 800a278:	4616      	mov	r6, r2
 800a27a:	dd0f      	ble.n	800a29c <_Unwind_VRS_Pop+0x174>
 800a27c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a280:	ab02      	add	r3, sp, #8
 800a282:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
 800a286:	f10c 33ff 	add.w	r3, ip, #4294967295
 800a28a:	f852 0b04 	ldr.w	r0, [r2], #4
 800a28e:	3b01      	subs	r3, #1
 800a290:	f841 0b04 	str.w	r0, [r1], #4
 800a294:	1c58      	adds	r0, r3, #1
 800a296:	d1f8      	bne.n	800a28a <_Unwind_VRS_Pop+0x162>
 800a298:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 800a29c:	f1b8 0f00 	cmp.w	r8, #0
 800a2a0:	d016      	beq.n	800a2d0 <_Unwind_VRS_Pop+0x1a8>
 800a2a2:	2d10      	cmp	r5, #16
 800a2a4:	bf2c      	ite	cs
 800a2a6:	462a      	movcs	r2, r5
 800a2a8:	2210      	movcc	r2, #16
 800a2aa:	a868      	add	r0, sp, #416	; 0x1a0
 800a2ac:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a2b6:	f10c 33ff 	add.w	r3, ip, #4294967295
 800a2ba:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 800a2be:	f851 0b04 	ldr.w	r0, [r1], #4
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	f842 0b04 	str.w	r0, [r2], #4
 800a2c8:	1c58      	adds	r0, r3, #1
 800a2ca:	d1f8      	bne.n	800a2be <_Unwind_VRS_Pop+0x196>
 800a2cc:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 800a2d0:	2f00      	cmp	r7, #0
 800a2d2:	d158      	bne.n	800a386 <_Unwind_VRS_Pop+0x25e>
 800a2d4:	2d0f      	cmp	r5, #15
 800a2d6:	63a6      	str	r6, [r4, #56]	; 0x38
 800a2d8:	d802      	bhi.n	800a2e0 <_Unwind_VRS_Pop+0x1b8>
 800a2da:	a802      	add	r0, sp, #8
 800a2dc:	f000 f92c 	bl	800a538 <__gnu_Unwind_Restore_VFP_D>
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	f1b8 0f00 	cmp.w	r8, #0
 800a2e6:	f43f af2e 	beq.w	800a146 <_Unwind_VRS_Pop+0x1e>
 800a2ea:	a824      	add	r0, sp, #144	; 0x90
 800a2ec:	f000 f92c 	bl	800a548 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	e728      	b.n	800a146 <_Unwind_VRS_Pop+0x1e>
 800a2f4:	0c16      	lsrs	r6, r2, #16
 800a2f6:	b295      	uxth	r5, r2
 800a2f8:	19ab      	adds	r3, r5, r6
 800a2fa:	2b10      	cmp	r3, #16
 800a2fc:	f63f af22 	bhi.w	800a144 <_Unwind_VRS_Pop+0x1c>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	0718      	lsls	r0, r3, #28
 800a304:	d437      	bmi.n	800a376 <_Unwind_VRS_Pop+0x24e>
 800a306:	a844      	add	r0, sp, #272	; 0x110
 800a308:	006f      	lsls	r7, r5, #1
 800a30a:	f000 f947 	bl	800a59c <__gnu_Unwind_Save_WMMXD>
 800a30e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a310:	4610      	mov	r0, r2
 800a312:	b15d      	cbz	r5, 800a32c <_Unwind_VRS_Pop+0x204>
 800a314:	ab44      	add	r3, sp, #272	; 0x110
 800a316:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a31a:	463b      	mov	r3, r7
 800a31c:	f852 1b04 	ldr.w	r1, [r2], #4
 800a320:	3b01      	subs	r3, #1
 800a322:	f846 1b04 	str.w	r1, [r6], #4
 800a326:	d1f9      	bne.n	800a31c <_Unwind_VRS_Pop+0x1f4>
 800a328:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800a32c:	63a0      	str	r0, [r4, #56]	; 0x38
 800a32e:	a844      	add	r0, sp, #272	; 0x110
 800a330:	f000 f912 	bl	800a558 <__gnu_Unwind_Restore_WMMXD>
 800a334:	2000      	movs	r0, #0
 800a336:	e706      	b.n	800a146 <_Unwind_VRS_Pop+0x1e>
 800a338:	f023 0310 	bic.w	r3, r3, #16
 800a33c:	f504 700c 	add.w	r0, r4, #560	; 0x230
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	9201      	str	r2, [sp, #4]
 800a344:	f000 f956 	bl	800a5f4 <__gnu_Unwind_Save_WMMXC>
 800a348:	9a01      	ldr	r2, [sp, #4]
 800a34a:	e70e      	b.n	800a16a <_Unwind_VRS_Pop+0x42>
 800a34c:	a824      	add	r0, sp, #144	; 0x90
 800a34e:	f000 f8ff 	bl	800a550 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800a352:	f1c5 0310 	rsb	r3, r5, #16
 800a356:	e78d      	b.n	800a274 <_Unwind_VRS_Pop+0x14c>
 800a358:	a802      	add	r0, sp, #8
 800a35a:	f000 f8f1 	bl	800a540 <__gnu_Unwind_Save_VFP_D>
 800a35e:	f1b8 0f00 	cmp.w	r8, #0
 800a362:	d086      	beq.n	800a272 <_Unwind_VRS_Pop+0x14a>
 800a364:	e7f2      	b.n	800a34c <_Unwind_VRS_Pop+0x224>
 800a366:	4620      	mov	r0, r4
 800a368:	f023 0304 	bic.w	r3, r3, #4
 800a36c:	f840 3bd0 	str.w	r3, [r0], #208
 800a370:	f000 f8ee 	bl	800a550 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800a374:	e775      	b.n	800a262 <_Unwind_VRS_Pop+0x13a>
 800a376:	f023 0308 	bic.w	r3, r3, #8
 800a37a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	f000 f90c 	bl	800a59c <__gnu_Unwind_Save_WMMXD>
 800a384:	e7bf      	b.n	800a306 <_Unwind_VRS_Pop+0x1de>
 800a386:	a802      	add	r0, sp, #8
 800a388:	3604      	adds	r6, #4
 800a38a:	63a6      	str	r6, [r4, #56]	; 0x38
 800a38c:	f000 f8cc 	bl	800a528 <__gnu_Unwind_Restore_VFP>
 800a390:	2000      	movs	r0, #0
 800a392:	e6d8      	b.n	800a146 <_Unwind_VRS_Pop+0x1e>
 800a394:	a802      	add	r0, sp, #8
 800a396:	f000 f8cb 	bl	800a530 <__gnu_Unwind_Save_VFP>
 800a39a:	f1b8 0f00 	cmp.w	r8, #0
 800a39e:	f43f af68 	beq.w	800a272 <_Unwind_VRS_Pop+0x14a>
 800a3a2:	f1c5 0310 	rsb	r3, r5, #16
 800a3a6:	e765      	b.n	800a274 <_Unwind_VRS_Pop+0x14c>
 800a3a8:	f041 0102 	orr.w	r1, r1, #2
 800a3ac:	f840 1b48 	str.w	r1, [r0], #72
 800a3b0:	f000 f8c6 	bl	800a540 <__gnu_Unwind_Save_VFP_D>
 800a3b4:	e74e      	b.n	800a254 <_Unwind_VRS_Pop+0x12c>
 800a3b6:	bf00      	nop

0800a3b8 <_Unwind_GetCFA>:
 800a3b8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800a3ba:	4770      	bx	lr

0800a3bc <__gnu_Unwind_RaiseException>:
 800a3bc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a3be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3c0:	1d0f      	adds	r7, r1, #4
 800a3c2:	640b      	str	r3, [r1, #64]	; 0x40
 800a3c4:	460d      	mov	r5, r1
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800a3cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a3ce:	ae01      	add	r6, sp, #4
 800a3d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a3d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a3d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a3d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a3d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a3da:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800a3de:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800a3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f7ff fbca 	bl	8009b84 <get_eit_entry>
 800a3f0:	b958      	cbnz	r0, 800a40a <__gnu_Unwind_RaiseException+0x4e>
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	466a      	mov	r2, sp
 800a3f8:	4798      	blx	r3
 800a3fa:	2808      	cmp	r0, #8
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	d0f3      	beq.n	800a3e8 <__gnu_Unwind_RaiseException+0x2c>
 800a400:	4668      	mov	r0, sp
 800a402:	f7ff fc25 	bl	8009c50 <restore_non_core_regs>
 800a406:	2e06      	cmp	r6, #6
 800a408:	d003      	beq.n	800a412 <__gnu_Unwind_RaiseException+0x56>
 800a40a:	2009      	movs	r0, #9
 800a40c:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a412:	4620      	mov	r0, r4
 800a414:	4629      	mov	r1, r5
 800a416:	f7ff fcb9 	bl	8009d8c <unwind_phase2>
 800a41a:	bf00      	nop

0800a41c <__gnu_Unwind_ForcedUnwind>:
 800a41c:	b410      	push	{r4}
 800a41e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800a420:	60c1      	str	r1, [r0, #12]
 800a422:	4619      	mov	r1, r3
 800a424:	6182      	str	r2, [r0, #24]
 800a426:	2200      	movs	r2, #0
 800a428:	641c      	str	r4, [r3, #64]	; 0x40
 800a42a:	bc10      	pop	{r4}
 800a42c:	e43c      	b.n	8009ca8 <unwind_phase2_forced>
 800a42e:	bf00      	nop

0800a430 <__gnu_Unwind_Resume>:
 800a430:	6942      	ldr	r2, [r0, #20]
 800a432:	b538      	push	{r3, r4, r5, lr}
 800a434:	4604      	mov	r4, r0
 800a436:	68c3      	ldr	r3, [r0, #12]
 800a438:	460d      	mov	r5, r1
 800a43a:	640a      	str	r2, [r1, #64]	; 0x40
 800a43c:	b123      	cbz	r3, 800a448 <__gnu_Unwind_Resume+0x18>
 800a43e:	2201      	movs	r2, #1
 800a440:	f7ff fc32 	bl	8009ca8 <unwind_phase2_forced>
 800a444:	f000 fb2c 	bl	800aaa0 <abort>
 800a448:	6903      	ldr	r3, [r0, #16]
 800a44a:	4621      	mov	r1, r4
 800a44c:	2002      	movs	r0, #2
 800a44e:	462a      	mov	r2, r5
 800a450:	4798      	blx	r3
 800a452:	2807      	cmp	r0, #7
 800a454:	d003      	beq.n	800a45e <__gnu_Unwind_Resume+0x2e>
 800a456:	2808      	cmp	r0, #8
 800a458:	d004      	beq.n	800a464 <__gnu_Unwind_Resume+0x34>
 800a45a:	f000 fb21 	bl	800aaa0 <abort>
 800a45e:	1d28      	adds	r0, r5, #4
 800a460:	f000 f856 	bl	800a510 <__restore_core_regs>
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7ff fc90 	bl	8009d8c <unwind_phase2>

0800a46c <__gnu_Unwind_Resume_or_Rethrow>:
 800a46c:	68c3      	ldr	r3, [r0, #12]
 800a46e:	b11b      	cbz	r3, 800a478 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800a470:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a472:	2200      	movs	r2, #0
 800a474:	640b      	str	r3, [r1, #64]	; 0x40
 800a476:	e417      	b.n	8009ca8 <unwind_phase2_forced>
 800a478:	e7a0      	b.n	800a3bc <__gnu_Unwind_RaiseException>
 800a47a:	bf00      	nop

0800a47c <_Unwind_Complete>:
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop

0800a480 <_Unwind_DeleteException>:
 800a480:	b508      	push	{r3, lr}
 800a482:	4601      	mov	r1, r0
 800a484:	6883      	ldr	r3, [r0, #8]
 800a486:	b10b      	cbz	r3, 800a48c <_Unwind_DeleteException+0xc>
 800a488:	2001      	movs	r0, #1
 800a48a:	4798      	blx	r3
 800a48c:	bd08      	pop	{r3, pc}
 800a48e:	bf00      	nop

0800a490 <__gnu_Unwind_Backtrace>:
 800a490:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a492:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a494:	1d17      	adds	r7, r2, #4
 800a496:	6413      	str	r3, [r2, #64]	; 0x40
 800a498:	4605      	mov	r5, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 800a4a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a4a2:	ae01      	add	r6, sp, #4
 800a4a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a4a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a4a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a4aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a4ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a4ae:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800a4b2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800a4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a4be:	a890      	add	r0, sp, #576	; 0x240
 800a4c0:	f7ff fb60 	bl	8009b84 <get_eit_entry>
 800a4c4:	aa90      	add	r2, sp, #576	; 0x240
 800a4c6:	210c      	movs	r1, #12
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	4668      	mov	r0, sp
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d11d      	bne.n	800a50c <__gnu_Unwind_Backtrace+0x7c>
 800a4d0:	f7ff fcb4 	bl	8009e3c <_Unwind_SetGR>
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	4668      	mov	r0, sp
 800a4d8:	47a8      	blx	r5
 800a4da:	a990      	add	r1, sp, #576	; 0x240
 800a4dc:	466a      	mov	r2, sp
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2008      	movs	r0, #8
 800a4e2:	b99b      	cbnz	r3, 800a50c <__gnu_Unwind_Backtrace+0x7c>
 800a4e4:	9b94      	ldr	r3, [sp, #592]	; 0x250
 800a4e6:	4798      	blx	r3
 800a4e8:	1f43      	subs	r3, r0, #5
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	bf18      	it	ne
 800a4ee:	2301      	movne	r3, #1
 800a4f0:	2809      	cmp	r0, #9
 800a4f2:	bf0c      	ite	eq
 800a4f4:	2300      	moveq	r3, #0
 800a4f6:	f003 0301 	andne.w	r3, r3, #1
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1de      	bne.n	800a4bc <__gnu_Unwind_Backtrace+0x2c>
 800a4fe:	4668      	mov	r0, sp
 800a500:	f7ff fba6 	bl	8009c50 <restore_non_core_regs>
 800a504:	4630      	mov	r0, r6
 800a506:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
 800a50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a50c:	2609      	movs	r6, #9
 800a50e:	e7f6      	b.n	800a4fe <__gnu_Unwind_Backtrace+0x6e>

0800a510 <__restore_core_regs>:
 800a510:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800a514:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800a518:	469c      	mov	ip, r3
 800a51a:	46a6      	mov	lr, r4
 800a51c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800a520:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a524:	46e5      	mov	sp, ip
 800a526:	bd00      	pop	{pc}

0800a528 <__gnu_Unwind_Restore_VFP>:
 800a528:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop

0800a530 <__gnu_Unwind_Save_VFP>:
 800a530:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop

0800a538 <__gnu_Unwind_Restore_VFP_D>:
 800a538:	ec90 0b20 	vldmia	r0, {d0-d15}
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop

0800a540 <__gnu_Unwind_Save_VFP_D>:
 800a540:	ec80 0b20 	vstmia	r0, {d0-d15}
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop

0800a548 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800a548:	ecd0 0b20 	vldmia	r0, {d16-d31}
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop

0800a550 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800a550:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop

0800a558 <__gnu_Unwind_Restore_WMMXD>:
 800a558:	ecf0 0102 	ldfe	f0, [r0], #8
 800a55c:	ecf0 1102 	ldfe	f1, [r0], #8
 800a560:	ecf0 2102 	ldfe	f2, [r0], #8
 800a564:	ecf0 3102 	ldfe	f3, [r0], #8
 800a568:	ecf0 4102 	ldfe	f4, [r0], #8
 800a56c:	ecf0 5102 	ldfe	f5, [r0], #8
 800a570:	ecf0 6102 	ldfe	f6, [r0], #8
 800a574:	ecf0 7102 	ldfe	f7, [r0], #8
 800a578:	ecf0 8102 	ldfp	f0, [r0], #8
 800a57c:	ecf0 9102 	ldfp	f1, [r0], #8
 800a580:	ecf0 a102 	ldfp	f2, [r0], #8
 800a584:	ecf0 b102 	ldfp	f3, [r0], #8
 800a588:	ecf0 c102 	ldfp	f4, [r0], #8
 800a58c:	ecf0 d102 	ldfp	f5, [r0], #8
 800a590:	ecf0 e102 	ldfp	f6, [r0], #8
 800a594:	ecf0 f102 	ldfp	f7, [r0], #8
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop

0800a59c <__gnu_Unwind_Save_WMMXD>:
 800a59c:	ece0 0102 	stfe	f0, [r0], #8
 800a5a0:	ece0 1102 	stfe	f1, [r0], #8
 800a5a4:	ece0 2102 	stfe	f2, [r0], #8
 800a5a8:	ece0 3102 	stfe	f3, [r0], #8
 800a5ac:	ece0 4102 	stfe	f4, [r0], #8
 800a5b0:	ece0 5102 	stfe	f5, [r0], #8
 800a5b4:	ece0 6102 	stfe	f6, [r0], #8
 800a5b8:	ece0 7102 	stfe	f7, [r0], #8
 800a5bc:	ece0 8102 	stfp	f0, [r0], #8
 800a5c0:	ece0 9102 	stfp	f1, [r0], #8
 800a5c4:	ece0 a102 	stfp	f2, [r0], #8
 800a5c8:	ece0 b102 	stfp	f3, [r0], #8
 800a5cc:	ece0 c102 	stfp	f4, [r0], #8
 800a5d0:	ece0 d102 	stfp	f5, [r0], #8
 800a5d4:	ece0 e102 	stfp	f6, [r0], #8
 800a5d8:	ece0 f102 	stfp	f7, [r0], #8
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop

0800a5e0 <__gnu_Unwind_Restore_WMMXC>:
 800a5e0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800a5e4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800a5e8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800a5ec:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop

0800a5f4 <__gnu_Unwind_Save_WMMXC>:
 800a5f4:	fca0 8101 	stc2	1, cr8, [r0], #4
 800a5f8:	fca0 9101 	stc2	1, cr9, [r0], #4
 800a5fc:	fca0 a101 	stc2	1, cr10, [r0], #4
 800a600:	fca0 b101 	stc2	1, cr11, [r0], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop

0800a608 <_Unwind_RaiseException>:
 800a608:	46ec      	mov	ip, sp
 800a60a:	b500      	push	{lr}
 800a60c:	e92d 5000 	stmdb	sp!, {ip, lr}
 800a610:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a614:	f04f 0300 	mov.w	r3, #0
 800a618:	e92d 000c 	stmdb	sp!, {r2, r3}
 800a61c:	a901      	add	r1, sp, #4
 800a61e:	f7ff fecd 	bl	800a3bc <__gnu_Unwind_RaiseException>
 800a622:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800a626:	b012      	add	sp, #72	; 0x48
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop

0800a62c <_Unwind_Resume>:
 800a62c:	46ec      	mov	ip, sp
 800a62e:	b500      	push	{lr}
 800a630:	e92d 5000 	stmdb	sp!, {ip, lr}
 800a634:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a638:	f04f 0300 	mov.w	r3, #0
 800a63c:	e92d 000c 	stmdb	sp!, {r2, r3}
 800a640:	a901      	add	r1, sp, #4
 800a642:	f7ff fef5 	bl	800a430 <__gnu_Unwind_Resume>
 800a646:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800a64a:	b012      	add	sp, #72	; 0x48
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop

0800a650 <_Unwind_Resume_or_Rethrow>:
 800a650:	46ec      	mov	ip, sp
 800a652:	b500      	push	{lr}
 800a654:	e92d 5000 	stmdb	sp!, {ip, lr}
 800a658:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	e92d 000c 	stmdb	sp!, {r2, r3}
 800a664:	a901      	add	r1, sp, #4
 800a666:	f7ff ff01 	bl	800a46c <__gnu_Unwind_Resume_or_Rethrow>
 800a66a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800a66e:	b012      	add	sp, #72	; 0x48
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop

0800a674 <_Unwind_ForcedUnwind>:
 800a674:	46ec      	mov	ip, sp
 800a676:	b500      	push	{lr}
 800a678:	e92d 5000 	stmdb	sp!, {ip, lr}
 800a67c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a680:	f04f 0300 	mov.w	r3, #0
 800a684:	e92d 000c 	stmdb	sp!, {r2, r3}
 800a688:	ab01      	add	r3, sp, #4
 800a68a:	f7ff fec7 	bl	800a41c <__gnu_Unwind_ForcedUnwind>
 800a68e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800a692:	b012      	add	sp, #72	; 0x48
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop

0800a698 <_Unwind_Backtrace>:
 800a698:	46ec      	mov	ip, sp
 800a69a:	b500      	push	{lr}
 800a69c:	e92d 5000 	stmdb	sp!, {ip, lr}
 800a6a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a6a4:	f04f 0300 	mov.w	r3, #0
 800a6a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 800a6ac:	aa01      	add	r2, sp, #4
 800a6ae:	f7ff feef 	bl	800a490 <__gnu_Unwind_Backtrace>
 800a6b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800a6b6:	b012      	add	sp, #72	; 0x48
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	0000      	movs	r0, r0
	...

0800a6c0 <next_unwind_byte>:
 800a6c0:	7a02      	ldrb	r2, [r0, #8]
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	b91a      	cbnz	r2, 800a6ce <next_unwind_byte+0xe>
 800a6c6:	7a42      	ldrb	r2, [r0, #9]
 800a6c8:	b942      	cbnz	r2, 800a6dc <next_unwind_byte+0x1c>
 800a6ca:	20b0      	movs	r0, #176	; 0xb0
 800a6cc:	4770      	bx	lr
 800a6ce:	6800      	ldr	r0, [r0, #0]
 800a6d0:	3a01      	subs	r2, #1
 800a6d2:	721a      	strb	r2, [r3, #8]
 800a6d4:	0202      	lsls	r2, r0, #8
 800a6d6:	0e00      	lsrs	r0, r0, #24
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	4770      	bx	lr
 800a6dc:	6841      	ldr	r1, [r0, #4]
 800a6de:	3a01      	subs	r2, #1
 800a6e0:	7242      	strb	r2, [r0, #9]
 800a6e2:	2203      	movs	r2, #3
 800a6e4:	f851 0b04 	ldr.w	r0, [r1], #4
 800a6e8:	721a      	strb	r2, [r3, #8]
 800a6ea:	6059      	str	r1, [r3, #4]
 800a6ec:	0202      	lsls	r2, r0, #8
 800a6ee:	0e00      	lsrs	r0, r0, #24
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	4770      	bx	lr

0800a6f4 <_Unwind_GetGR.constprop.0>:
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	220c      	movs	r2, #12
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	eb0d 0402 	add.w	r4, sp, r2
 800a702:	9400      	str	r4, [sp, #0]
 800a704:	f7ff fb5a 	bl	8009dbc <_Unwind_VRS_Get>
 800a708:	9803      	ldr	r0, [sp, #12]
 800a70a:	b004      	add	sp, #16
 800a70c:	bd10      	pop	{r4, pc}
 800a70e:	bf00      	nop

0800a710 <unwind_UCB_from_context>:
 800a710:	e7f0      	b.n	800a6f4 <_Unwind_GetGR.constprop.0>
 800a712:	bf00      	nop

0800a714 <__gnu_unwind_execute>:
 800a714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a718:	4606      	mov	r6, r0
 800a71a:	b085      	sub	sp, #20
 800a71c:	460d      	mov	r5, r1
 800a71e:	f04f 0900 	mov.w	r9, #0
 800a722:	f44f 677f 	mov.w	r7, #4080	; 0xff0
 800a726:	4628      	mov	r0, r5
 800a728:	f7ff ffca 	bl	800a6c0 <next_unwind_byte>
 800a72c:	28b0      	cmp	r0, #176	; 0xb0
 800a72e:	4604      	mov	r4, r0
 800a730:	f000 80c9 	beq.w	800a8c6 <__gnu_unwind_execute+0x1b2>
 800a734:	f010 0180 	ands.w	r1, r0, #128	; 0x80
 800a738:	d021      	beq.n	800a77e <__gnu_unwind_execute+0x6a>
 800a73a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800a73e:	2b80      	cmp	r3, #128	; 0x80
 800a740:	f000 8085 	beq.w	800a84e <__gnu_unwind_execute+0x13a>
 800a744:	2b90      	cmp	r3, #144	; 0x90
 800a746:	d037      	beq.n	800a7b8 <__gnu_unwind_execute+0xa4>
 800a748:	2ba0      	cmp	r3, #160	; 0xa0
 800a74a:	d054      	beq.n	800a7f6 <__gnu_unwind_execute+0xe2>
 800a74c:	2bb0      	cmp	r3, #176	; 0xb0
 800a74e:	d065      	beq.n	800a81c <__gnu_unwind_execute+0x108>
 800a750:	2bc0      	cmp	r3, #192	; 0xc0
 800a752:	f000 8094 	beq.w	800a87e <__gnu_unwind_execute+0x16a>
 800a756:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800a75a:	2bd0      	cmp	r3, #208	; 0xd0
 800a75c:	d10b      	bne.n	800a776 <__gnu_unwind_execute+0x62>
 800a75e:	f000 0207 	and.w	r2, r0, #7
 800a762:	2101      	movs	r1, #1
 800a764:	3201      	adds	r2, #1
 800a766:	4630      	mov	r0, r6
 800a768:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a76c:	2305      	movs	r3, #5
 800a76e:	f7ff fcdb 	bl	800a128 <_Unwind_VRS_Pop>
 800a772:	2800      	cmp	r0, #0
 800a774:	d0d7      	beq.n	800a726 <__gnu_unwind_execute+0x12>
 800a776:	2009      	movs	r0, #9
 800a778:	b005      	add	sp, #20
 800a77a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a77e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800a782:	ab03      	add	r3, sp, #12
 800a784:	220d      	movs	r2, #13
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	4630      	mov	r0, r6
 800a78a:	460b      	mov	r3, r1
 800a78c:	f7ff fb16 	bl	8009dbc <_Unwind_VRS_Get>
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	fa5f f888 	uxtb.w	r8, r8
 800a796:	0664      	lsls	r4, r4, #25
 800a798:	f108 0804 	add.w	r8, r8, #4
 800a79c:	ac03      	add	r4, sp, #12
 800a79e:	bf4c      	ite	mi
 800a7a0:	ebc8 0303 	rsbmi	r3, r8, r3
 800a7a4:	4443      	addpl	r3, r8
 800a7a6:	9400      	str	r4, [sp, #0]
 800a7a8:	9303      	str	r3, [sp, #12]
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	220d      	movs	r2, #13
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	f7ff fb29 	bl	8009e08 <_Unwind_VRS_Set>
 800a7b6:	e7b6      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a7b8:	f000 020f 	and.w	r2, r0, #15
 800a7bc:	f1a2 000d 	sub.w	r0, r2, #13
 800a7c0:	4244      	negs	r4, r0
 800a7c2:	eb44 0400 	adc.w	r4, r4, r0
 800a7c6:	2a0f      	cmp	r2, #15
 800a7c8:	bf14      	ite	ne
 800a7ca:	46a0      	movne	r8, r4
 800a7cc:	f044 0801 	orreq.w	r8, r4, #1
 800a7d0:	f1b8 0f00 	cmp.w	r8, #0
 800a7d4:	d1cf      	bne.n	800a776 <__gnu_unwind_execute+0x62>
 800a7d6:	4641      	mov	r1, r8
 800a7d8:	4643      	mov	r3, r8
 800a7da:	4630      	mov	r0, r6
 800a7dc:	ac03      	add	r4, sp, #12
 800a7de:	9400      	str	r4, [sp, #0]
 800a7e0:	f7ff faec 	bl	8009dbc <_Unwind_VRS_Get>
 800a7e4:	ab03      	add	r3, sp, #12
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	4641      	mov	r1, r8
 800a7ec:	220d      	movs	r2, #13
 800a7ee:	4643      	mov	r3, r8
 800a7f0:	f7ff fb0a 	bl	8009e08 <_Unwind_VRS_Set>
 800a7f4:	e797      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a7f6:	43c2      	mvns	r2, r0
 800a7f8:	f002 0207 	and.w	r2, r2, #7
 800a7fc:	fa57 f202 	asrs.w	r2, r7, r2
 800a800:	0701      	lsls	r1, r0, #28
 800a802:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800a806:	4630      	mov	r0, r6
 800a808:	bf48      	it	mi
 800a80a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800a80e:	2100      	movs	r1, #0
 800a810:	460b      	mov	r3, r1
 800a812:	f7ff fc89 	bl	800a128 <_Unwind_VRS_Pop>
 800a816:	2800      	cmp	r0, #0
 800a818:	d1ad      	bne.n	800a776 <__gnu_unwind_execute+0x62>
 800a81a:	e784      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a81c:	28b1      	cmp	r0, #177	; 0xb1
 800a81e:	d076      	beq.n	800a90e <__gnu_unwind_execute+0x1fa>
 800a820:	28b2      	cmp	r0, #178	; 0xb2
 800a822:	f000 8087 	beq.w	800a934 <__gnu_unwind_execute+0x220>
 800a826:	28b3      	cmp	r0, #179	; 0xb3
 800a828:	f000 80aa 	beq.w	800a980 <__gnu_unwind_execute+0x26c>
 800a82c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800a830:	2bb4      	cmp	r3, #180	; 0xb4
 800a832:	d05e      	beq.n	800a8f2 <__gnu_unwind_execute+0x1de>
 800a834:	f000 0207 	and.w	r2, r0, #7
 800a838:	2101      	movs	r1, #1
 800a83a:	3201      	adds	r2, #1
 800a83c:	4630      	mov	r0, r6
 800a83e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a842:	460b      	mov	r3, r1
 800a844:	f7ff fc70 	bl	800a128 <_Unwind_VRS_Pop>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d194      	bne.n	800a776 <__gnu_unwind_execute+0x62>
 800a84c:	e76b      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a84e:	4628      	mov	r0, r5
 800a850:	0224      	lsls	r4, r4, #8
 800a852:	f7ff ff35 	bl	800a6c0 <next_unwind_byte>
 800a856:	4304      	orrs	r4, r0
 800a858:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800a85c:	d08b      	beq.n	800a776 <__gnu_unwind_execute+0x62>
 800a85e:	0522      	lsls	r2, r4, #20
 800a860:	2100      	movs	r1, #0
 800a862:	4630      	mov	r0, r6
 800a864:	460b      	mov	r3, r1
 800a866:	0c12      	lsrs	r2, r2, #16
 800a868:	0124      	lsls	r4, r4, #4
 800a86a:	f7ff fc5d 	bl	800a128 <_Unwind_VRS_Pop>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d181      	bne.n	800a776 <__gnu_unwind_execute+0x62>
 800a872:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800a876:	bf18      	it	ne
 800a878:	f04f 0901 	movne.w	r9, #1
 800a87c:	e753      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a87e:	28c6      	cmp	r0, #198	; 0xc6
 800a880:	f000 8091 	beq.w	800a9a6 <__gnu_unwind_execute+0x292>
 800a884:	28c7      	cmp	r0, #199	; 0xc7
 800a886:	f000 80a1 	beq.w	800a9cc <__gnu_unwind_execute+0x2b8>
 800a88a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800a88e:	2bc0      	cmp	r3, #192	; 0xc0
 800a890:	f000 80af 	beq.w	800a9f2 <__gnu_unwind_execute+0x2de>
 800a894:	28c8      	cmp	r0, #200	; 0xc8
 800a896:	f000 80ba 	beq.w	800aa0e <__gnu_unwind_execute+0x2fa>
 800a89a:	28c9      	cmp	r0, #201	; 0xc9
 800a89c:	f47f af6b 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	f7ff ff0d 	bl	800a6c0 <next_unwind_byte>
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800a8ac:	f000 030f 	and.w	r3, r0, #15
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800a8b8:	2305      	movs	r3, #5
 800a8ba:	f7ff fc35 	bl	800a128 <_Unwind_VRS_Pop>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	f47f af59 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800a8c4:	e72f      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	f1b9 0f00 	cmp.w	r9, #0
 800a8cc:	f47f af54 	bne.w	800a778 <__gnu_unwind_execute+0x64>
 800a8d0:	4649      	mov	r1, r9
 800a8d2:	220e      	movs	r2, #14
 800a8d4:	464b      	mov	r3, r9
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	ac03      	add	r4, sp, #12
 800a8da:	9400      	str	r4, [sp, #0]
 800a8dc:	f7ff fa6e 	bl	8009dbc <_Unwind_VRS_Get>
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	220f      	movs	r2, #15
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	9400      	str	r4, [sp, #0]
 800a8ea:	f7ff fa8d 	bl	8009e08 <_Unwind_VRS_Set>
 800a8ee:	4648      	mov	r0, r9
 800a8f0:	e742      	b.n	800a778 <__gnu_unwind_execute+0x64>
 800a8f2:	f000 0203 	and.w	r2, r0, #3
 800a8f6:	2102      	movs	r1, #2
 800a8f8:	3201      	adds	r2, #1
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a900:	460b      	mov	r3, r1
 800a902:	f7ff fc11 	bl	800a128 <_Unwind_VRS_Pop>
 800a906:	2800      	cmp	r0, #0
 800a908:	f47f af35 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800a90c:	e70b      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a90e:	4628      	mov	r0, r5
 800a910:	f7ff fed6 	bl	800a6c0 <next_unwind_byte>
 800a914:	4602      	mov	r2, r0
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f af2d 	beq.w	800a776 <__gnu_unwind_execute+0x62>
 800a91c:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 800a920:	f47f af29 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800a924:	4630      	mov	r0, r6
 800a926:	460b      	mov	r3, r1
 800a928:	f7ff fbfe 	bl	800a128 <_Unwind_VRS_Pop>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f47f af22 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800a932:	e6f8      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a934:	2100      	movs	r1, #0
 800a936:	220d      	movs	r2, #13
 800a938:	460b      	mov	r3, r1
 800a93a:	4630      	mov	r0, r6
 800a93c:	ac03      	add	r4, sp, #12
 800a93e:	9400      	str	r4, [sp, #0]
 800a940:	f7ff fa3c 	bl	8009dbc <_Unwind_VRS_Get>
 800a944:	4628      	mov	r0, r5
 800a946:	f7ff febb 	bl	800a6c0 <next_unwind_byte>
 800a94a:	2402      	movs	r4, #2
 800a94c:	0602      	lsls	r2, r0, #24
 800a94e:	d50b      	bpl.n	800a968 <__gnu_unwind_execute+0x254>
 800a950:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 800a954:	9a03      	ldr	r2, [sp, #12]
 800a956:	4628      	mov	r0, r5
 800a958:	40a3      	lsls	r3, r4
 800a95a:	3407      	adds	r4, #7
 800a95c:	18d3      	adds	r3, r2, r3
 800a95e:	9303      	str	r3, [sp, #12]
 800a960:	f7ff feae 	bl	800a6c0 <next_unwind_byte>
 800a964:	0603      	lsls	r3, r0, #24
 800a966:	d4f3      	bmi.n	800a950 <__gnu_unwind_execute+0x23c>
 800a968:	ab03      	add	r3, sp, #12
 800a96a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	9b03      	ldr	r3, [sp, #12]
 800a972:	fa10 f404 	lsls.w	r4, r0, r4
 800a976:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a97a:	191b      	adds	r3, r3, r4
 800a97c:	9303      	str	r3, [sp, #12]
 800a97e:	e714      	b.n	800a7aa <__gnu_unwind_execute+0x96>
 800a980:	4628      	mov	r0, r5
 800a982:	f7ff fe9d 	bl	800a6c0 <next_unwind_byte>
 800a986:	2101      	movs	r1, #1
 800a988:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800a98c:	f000 030f 	and.w	r3, r0, #15
 800a990:	3301      	adds	r3, #1
 800a992:	4630      	mov	r0, r6
 800a994:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800a998:	460b      	mov	r3, r1
 800a99a:	f7ff fbc5 	bl	800a128 <_Unwind_VRS_Pop>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	f47f aee9 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800a9a4:	e6bf      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f7ff fe8a 	bl	800a6c0 <next_unwind_byte>
 800a9ac:	2103      	movs	r1, #3
 800a9ae:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800a9b2:	f000 030f 	and.w	r3, r0, #15
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800a9be:	460b      	mov	r3, r1
 800a9c0:	f7ff fbb2 	bl	800a128 <_Unwind_VRS_Pop>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	f47f aed6 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800a9ca:	e6ac      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f7ff fe77 	bl	800a6c0 <next_unwind_byte>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	f43f aece 	beq.w	800a776 <__gnu_unwind_execute+0x62>
 800a9da:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800a9de:	f47f aeca 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	2104      	movs	r1, #4
 800a9e6:	f7ff fb9f 	bl	800a128 <_Unwind_VRS_Pop>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	f47f aec3 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800a9f0:	e699      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800a9f2:	f000 020f 	and.w	r2, r0, #15
 800a9f6:	2103      	movs	r1, #3
 800a9f8:	3201      	adds	r2, #1
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800aa00:	460b      	mov	r3, r1
 800aa02:	f7ff fb91 	bl	800a128 <_Unwind_VRS_Pop>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f47f aeb5 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800aa0c:	e68b      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800aa0e:	4628      	mov	r0, r5
 800aa10:	f7ff fe56 	bl	800a6c0 <next_unwind_byte>
 800aa14:	2101      	movs	r1, #1
 800aa16:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800aa1a:	f000 030f 	and.w	r3, r0, #15
 800aa1e:	3210      	adds	r2, #16
 800aa20:	3301      	adds	r3, #1
 800aa22:	4630      	mov	r0, r6
 800aa24:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800aa28:	2305      	movs	r3, #5
 800aa2a:	f7ff fb7d 	bl	800a128 <_Unwind_VRS_Pop>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	f47f aea1 	bne.w	800a776 <__gnu_unwind_execute+0x62>
 800aa34:	e677      	b.n	800a726 <__gnu_unwind_execute+0x12>
 800aa36:	bf00      	nop

0800aa38 <__gnu_unwind_frame>:
 800aa38:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	b530      	push	{r4, r5, lr}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	f103 0408 	add.w	r4, r3, #8
 800aa46:	2503      	movs	r5, #3
 800aa48:	f88d 500c 	strb.w	r5, [sp, #12]
 800aa4c:	79db      	ldrb	r3, [r3, #7]
 800aa4e:	a901      	add	r1, sp, #4
 800aa50:	0212      	lsls	r2, r2, #8
 800aa52:	9402      	str	r4, [sp, #8]
 800aa54:	9201      	str	r2, [sp, #4]
 800aa56:	f88d 300d 	strb.w	r3, [sp, #13]
 800aa5a:	f7ff fe5b 	bl	800a714 <__gnu_unwind_execute>
 800aa5e:	b005      	add	sp, #20
 800aa60:	bd30      	pop	{r4, r5, pc}
 800aa62:	bf00      	nop

0800aa64 <_Unwind_GetRegionStart>:
 800aa64:	b508      	push	{r3, lr}
 800aa66:	f7ff fe53 	bl	800a710 <unwind_UCB_from_context>
 800aa6a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800aa6c:	bd08      	pop	{r3, pc}
 800aa6e:	bf00      	nop

0800aa70 <_Unwind_GetLanguageSpecificData>:
 800aa70:	b508      	push	{r3, lr}
 800aa72:	f7ff fe4d 	bl	800a710 <unwind_UCB_from_context>
 800aa76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800aa78:	79d8      	ldrb	r0, [r3, #7]
 800aa7a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800aa7e:	f103 0008 	add.w	r0, r3, #8
 800aa82:	bd08      	pop	{r3, pc}

0800aa84 <_Unwind_GetDataRelBase>:
 800aa84:	b508      	push	{r3, lr}
 800aa86:	f000 f80b 	bl	800aaa0 <abort>
 800aa8a:	bf00      	nop

0800aa8c <_Unwind_GetTextRelBase>:
 800aa8c:	b508      	push	{r3, lr}
 800aa8e:	f000 f807 	bl	800aaa0 <abort>
 800aa92:	bf00      	nop
	...

0800aaa0 <abort>:
 800aaa0:	b508      	push	{r3, lr}
 800aaa2:	2006      	movs	r0, #6
 800aaa4:	f001 f9fa 	bl	800be9c <raise>
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	f7f9 f9f1 	bl	8003e90 <_exit>
 800aaae:	bf00      	nop

0800aab0 <__assert_func>:
 800aab0:	4604      	mov	r4, r0
 800aab2:	480a      	ldr	r0, [pc, #40]	; (800aadc <__assert_func+0x2c>)
 800aab4:	b500      	push	{lr}
 800aab6:	b085      	sub	sp, #20
 800aab8:	6800      	ldr	r0, [r0, #0]
 800aaba:	4d09      	ldr	r5, [pc, #36]	; (800aae0 <__assert_func+0x30>)
 800aabc:	68c0      	ldr	r0, [r0, #12]
 800aabe:	b14a      	cbz	r2, 800aad4 <__assert_func+0x24>
 800aac0:	e88d 0022 	stmia.w	sp, {r1, r5}
 800aac4:	9202      	str	r2, [sp, #8]
 800aac6:	461a      	mov	r2, r3
 800aac8:	4906      	ldr	r1, [pc, #24]	; (800aae4 <__assert_func+0x34>)
 800aaca:	4623      	mov	r3, r4
 800aacc:	f000 f838 	bl	800ab40 <fiprintf>
 800aad0:	f7ff ffe6 	bl	800aaa0 <abort>
 800aad4:	4d04      	ldr	r5, [pc, #16]	; (800aae8 <__assert_func+0x38>)
 800aad6:	462a      	mov	r2, r5
 800aad8:	e7f2      	b.n	800aac0 <__assert_func+0x10>
 800aada:	bf00      	nop
 800aadc:	20000048 	.word	0x20000048
 800aae0:	08014a90 	.word	0x08014a90
 800aae4:	08014aa0 	.word	0x08014aa0
 800aae8:	08014a9c 	.word	0x08014a9c

0800aaec <__assert>:
 800aaec:	b508      	push	{r3, lr}
 800aaee:	4613      	mov	r3, r2
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f7ff ffdd 	bl	800aab0 <__assert_func>
 800aaf6:	bf00      	nop
	...

0800ab00 <__cxa_atexit>:
 800ab00:	b410      	push	{r4}
 800ab02:	460c      	mov	r4, r1
 800ab04:	4613      	mov	r3, r2
 800ab06:	4601      	mov	r1, r0
 800ab08:	4622      	mov	r2, r4
 800ab0a:	2002      	movs	r0, #2
 800ab0c:	bc10      	pop	{r4}
 800ab0e:	f003 bc87 	b.w	800e420 <__register_exitproc>
 800ab12:	bf00      	nop
	...

0800ab20 <_fiprintf_r>:
 800ab20:	b40c      	push	{r2, r3}
 800ab22:	b510      	push	{r4, lr}
 800ab24:	b082      	sub	sp, #8
 800ab26:	ac04      	add	r4, sp, #16
 800ab28:	f854 2b04 	ldr.w	r2, [r4], #4
 800ab2c:	4623      	mov	r3, r4
 800ab2e:	9401      	str	r4, [sp, #4]
 800ab30:	f002 fe3e 	bl	800d7b0 <_vfiprintf_r>
 800ab34:	b002      	add	sp, #8
 800ab36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab3a:	b002      	add	sp, #8
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop

0800ab40 <fiprintf>:
 800ab40:	b40e      	push	{r1, r2, r3}
 800ab42:	f240 0348 	movw	r3, #72	; 0x48
 800ab46:	b510      	push	{r4, lr}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	ac05      	add	r4, sp, #20
 800ab4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab50:	4601      	mov	r1, r0
 800ab52:	f854 2b04 	ldr.w	r2, [r4], #4
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	4623      	mov	r3, r4
 800ab5a:	9401      	str	r4, [sp, #4]
 800ab5c:	f002 fe28 	bl	800d7b0 <_vfiprintf_r>
 800ab60:	b003      	add	sp, #12
 800ab62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab66:	b003      	add	sp, #12
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	0000      	movs	r0, r0
	...

0800ab70 <_fputc_r>:
 800ab70:	b510      	push	{r4, lr}
 800ab72:	4604      	mov	r4, r0
 800ab74:	b082      	sub	sp, #8
 800ab76:	b138      	cbz	r0, 800ab88 <_fputc_r+0x18>
 800ab78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ab7a:	b92b      	cbnz	r3, 800ab88 <_fputc_r+0x18>
 800ab7c:	9101      	str	r1, [sp, #4]
 800ab7e:	9200      	str	r2, [sp, #0]
 800ab80:	f004 fdee 	bl	800f760 <__sinit>
 800ab84:	9a00      	ldr	r2, [sp, #0]
 800ab86:	9901      	ldr	r1, [sp, #4]
 800ab88:	4620      	mov	r0, r4
 800ab8a:	b002      	add	sp, #8
 800ab8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab90:	f000 be76 	b.w	800b880 <_putc_r>

0800ab94 <fputc>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	4606      	mov	r6, r0
 800ab98:	4c07      	ldr	r4, [pc, #28]	; (800abb8 <fputc+0x24>)
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	6820      	ldr	r0, [r4, #0]
 800ab9e:	b120      	cbz	r0, 800abaa <fputc+0x16>
 800aba0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aba2:	b913      	cbnz	r3, 800abaa <fputc+0x16>
 800aba4:	f004 fddc 	bl	800f760 <__sinit>
 800aba8:	6820      	ldr	r0, [r4, #0]
 800abaa:	4631      	mov	r1, r6
 800abac:	462a      	mov	r2, r5
 800abae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abb2:	f000 be65 	b.w	800b880 <_putc_r>
 800abb6:	bf00      	nop
 800abb8:	20000048 	.word	0x20000048
 800abbc:	00000000 	.word	0x00000000

0800abc0 <_fputs_r>:
 800abc0:	b530      	push	{r4, r5, lr}
 800abc2:	b087      	sub	sp, #28
 800abc4:	4604      	mov	r4, r0
 800abc6:	4608      	mov	r0, r1
 800abc8:	4615      	mov	r5, r2
 800abca:	9104      	str	r1, [sp, #16]
 800abcc:	f001 fb50 	bl	800c270 <strlen>
 800abd0:	ab04      	add	r3, sp, #16
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	2301      	movs	r3, #1
 800abd6:	9302      	str	r3, [sp, #8]
 800abd8:	9003      	str	r0, [sp, #12]
 800abda:	9005      	str	r0, [sp, #20]
 800abdc:	b10c      	cbz	r4, 800abe2 <_fputs_r+0x22>
 800abde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800abe0:	b18b      	cbz	r3, 800ac06 <_fputs_r+0x46>
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	4620      	mov	r0, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	049a      	lsls	r2, r3, #18
 800abea:	bf5f      	itttt	pl
 800abec:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800abf0:	81ab      	strhpl	r3, [r5, #12]
 800abf2:	6e6a      	ldrpl	r2, [r5, #100]	; 0x64
 800abf4:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 800abf8:	aa01      	add	r2, sp, #4
 800abfa:	bf58      	it	pl
 800abfc:	666b      	strpl	r3, [r5, #100]	; 0x64
 800abfe:	f000 f80f 	bl	800ac20 <__sfvwrite_r>
 800ac02:	b007      	add	sp, #28
 800ac04:	bd30      	pop	{r4, r5, pc}
 800ac06:	4620      	mov	r0, r4
 800ac08:	f004 fdaa 	bl	800f760 <__sinit>
 800ac0c:	e7e9      	b.n	800abe2 <_fputs_r+0x22>
 800ac0e:	bf00      	nop

0800ac10 <fputs>:
 800ac10:	f240 0348 	movw	r3, #72	; 0x48
 800ac14:	460a      	mov	r2, r1
 800ac16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac1a:	4601      	mov	r1, r0
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	e7cf      	b.n	800abc0 <_fputs_r>

0800ac20 <__sfvwrite_r>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	b085      	sub	sp, #20
 800ac26:	4690      	mov	r8, r2
 800ac28:	460c      	mov	r4, r1
 800ac2a:	9001      	str	r0, [sp, #4]
 800ac2c:	6890      	ldr	r0, [r2, #8]
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d04d      	beq.n	800acce <__sfvwrite_r+0xae>
 800ac32:	898b      	ldrh	r3, [r1, #12]
 800ac34:	0719      	lsls	r1, r3, #28
 800ac36:	d56b      	bpl.n	800ad10 <__sfvwrite_r+0xf0>
 800ac38:	6922      	ldr	r2, [r4, #16]
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	d068      	beq.n	800ad10 <__sfvwrite_r+0xf0>
 800ac3e:	f013 0b02 	ands.w	fp, r3, #2
 800ac42:	f8d8 5000 	ldr.w	r5, [r8]
 800ac46:	bf1c      	itt	ne
 800ac48:	f04f 0900 	movne.w	r9, #0
 800ac4c:	464f      	movne	r7, r9
 800ac4e:	d145      	bne.n	800acdc <__sfvwrite_r+0xbc>
 800ac50:	f013 0901 	ands.w	r9, r3, #1
 800ac54:	bf1e      	ittt	ne
 800ac56:	46dc      	movne	ip, fp
 800ac58:	46da      	movne	sl, fp
 800ac5a:	465f      	movne	r7, fp
 800ac5c:	f000 80b5 	beq.w	800adca <__sfvwrite_r+0x1aa>
 800ac60:	2f00      	cmp	r7, #0
 800ac62:	d065      	beq.n	800ad30 <__sfvwrite_r+0x110>
 800ac64:	f1bc 0f00 	cmp.w	ip, #0
 800ac68:	f000 8083 	beq.w	800ad72 <__sfvwrite_r+0x152>
 800ac6c:	6922      	ldr	r2, [r4, #16]
 800ac6e:	45bb      	cmp	fp, r7
 800ac70:	bf34      	ite	cc
 800ac72:	46d9      	movcc	r9, fp
 800ac74:	46b9      	movcs	r9, r7
 800ac76:	6820      	ldr	r0, [r4, #0]
 800ac78:	6963      	ldr	r3, [r4, #20]
 800ac7a:	68a6      	ldr	r6, [r4, #8]
 800ac7c:	4290      	cmp	r0, r2
 800ac7e:	bf94      	ite	ls
 800ac80:	2200      	movls	r2, #0
 800ac82:	2201      	movhi	r2, #1
 800ac84:	199e      	adds	r6, r3, r6
 800ac86:	45b1      	cmp	r9, r6
 800ac88:	bfd4      	ite	le
 800ac8a:	2200      	movle	r2, #0
 800ac8c:	f002 0201 	andgt.w	r2, r2, #1
 800ac90:	2a00      	cmp	r2, #0
 800ac92:	f040 8081 	bne.w	800ad98 <__sfvwrite_r+0x178>
 800ac96:	4599      	cmp	r9, r3
 800ac98:	db51      	blt.n	800ad3e <__sfvwrite_r+0x11e>
 800ac9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac9c:	4652      	mov	r2, sl
 800ac9e:	69e1      	ldr	r1, [r4, #28]
 800aca0:	9801      	ldr	r0, [sp, #4]
 800aca2:	f8cd c000 	str.w	ip, [sp]
 800aca6:	47b0      	blx	r6
 800aca8:	f8dd c000 	ldr.w	ip, [sp]
 800acac:	2800      	cmp	r0, #0
 800acae:	4606      	mov	r6, r0
 800acb0:	f340 8084 	ble.w	800adbc <__sfvwrite_r+0x19c>
 800acb4:	ebbb 0b06 	subs.w	fp, fp, r6
 800acb8:	d054      	beq.n	800ad64 <__sfvwrite_r+0x144>
 800acba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acbe:	44b2      	add	sl, r6
 800acc0:	1bbf      	subs	r7, r7, r6
 800acc2:	1b9e      	subs	r6, r3, r6
 800acc4:	f8c8 6008 	str.w	r6, [r8, #8]
 800acc8:	2e00      	cmp	r6, #0
 800acca:	d1c9      	bne.n	800ac60 <__sfvwrite_r+0x40>
 800accc:	4630      	mov	r0, r6
 800acce:	b005      	add	sp, #20
 800acd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd4:	f8d5 9000 	ldr.w	r9, [r5]
 800acd8:	686f      	ldr	r7, [r5, #4]
 800acda:	3508      	adds	r5, #8
 800acdc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ace0:	bf34      	ite	cc
 800ace2:	463b      	movcc	r3, r7
 800ace4:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800ace8:	464a      	mov	r2, r9
 800acea:	9801      	ldr	r0, [sp, #4]
 800acec:	2f00      	cmp	r7, #0
 800acee:	d0f1      	beq.n	800acd4 <__sfvwrite_r+0xb4>
 800acf0:	69e1      	ldr	r1, [r4, #28]
 800acf2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acf4:	47b0      	blx	r6
 800acf6:	2800      	cmp	r0, #0
 800acf8:	4481      	add	r9, r0
 800acfa:	ebc0 0707 	rsb	r7, r0, r7
 800acfe:	dd5d      	ble.n	800adbc <__sfvwrite_r+0x19c>
 800ad00:	f8d8 6008 	ldr.w	r6, [r8, #8]
 800ad04:	1a30      	subs	r0, r6, r0
 800ad06:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d1e6      	bne.n	800acdc <__sfvwrite_r+0xbc>
 800ad0e:	e7de      	b.n	800acce <__sfvwrite_r+0xae>
 800ad10:	9801      	ldr	r0, [sp, #4]
 800ad12:	4621      	mov	r1, r4
 800ad14:	f003 fb24 	bl	800e360 <__swsetup_r>
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d08f      	beq.n	800ac3e <__sfvwrite_r+0x1e>
 800ad1e:	9901      	ldr	r1, [sp, #4]
 800ad20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	81a3      	strh	r3, [r4, #12]
 800ad2a:	2309      	movs	r3, #9
 800ad2c:	600b      	str	r3, [r1, #0]
 800ad2e:	e7ce      	b.n	800acce <__sfvwrite_r+0xae>
 800ad30:	f8d5 a000 	ldr.w	sl, [r5]
 800ad34:	f04f 0c00 	mov.w	ip, #0
 800ad38:	686f      	ldr	r7, [r5, #4]
 800ad3a:	3508      	adds	r5, #8
 800ad3c:	e790      	b.n	800ac60 <__sfvwrite_r+0x40>
 800ad3e:	464a      	mov	r2, r9
 800ad40:	4651      	mov	r1, sl
 800ad42:	464e      	mov	r6, r9
 800ad44:	f8cd c000 	str.w	ip, [sp]
 800ad48:	f000 fce2 	bl	800b710 <memmove>
 800ad4c:	68a2      	ldr	r2, [r4, #8]
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	ebbb 0b06 	subs.w	fp, fp, r6
 800ad54:	ebc9 0202 	rsb	r2, r9, r2
 800ad58:	f8dd c000 	ldr.w	ip, [sp]
 800ad5c:	444b      	add	r3, r9
 800ad5e:	60a2      	str	r2, [r4, #8]
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	d1aa      	bne.n	800acba <__sfvwrite_r+0x9a>
 800ad64:	9801      	ldr	r0, [sp, #4]
 800ad66:	4621      	mov	r1, r4
 800ad68:	f004 fbd2 	bl	800f510 <_fflush_r>
 800ad6c:	bb30      	cbnz	r0, 800adbc <__sfvwrite_r+0x19c>
 800ad6e:	46dc      	mov	ip, fp
 800ad70:	e7a3      	b.n	800acba <__sfvwrite_r+0x9a>
 800ad72:	4650      	mov	r0, sl
 800ad74:	210a      	movs	r1, #10
 800ad76:	463a      	mov	r2, r7
 800ad78:	f107 0b01 	add.w	fp, r7, #1
 800ad7c:	f000 fc08 	bl	800b590 <memchr>
 800ad80:	f04f 0c01 	mov.w	ip, #1
 800ad84:	2800      	cmp	r0, #0
 800ad86:	f43f af71 	beq.w	800ac6c <__sfvwrite_r+0x4c>
 800ad8a:	f100 0b01 	add.w	fp, r0, #1
 800ad8e:	f04f 0c01 	mov.w	ip, #1
 800ad92:	ebca 0b0b 	rsb	fp, sl, fp
 800ad96:	e769      	b.n	800ac6c <__sfvwrite_r+0x4c>
 800ad98:	4651      	mov	r1, sl
 800ad9a:	4632      	mov	r2, r6
 800ad9c:	f8cd c000 	str.w	ip, [sp]
 800ada0:	f000 fcb6 	bl	800b710 <memmove>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	4621      	mov	r1, r4
 800ada8:	9801      	ldr	r0, [sp, #4]
 800adaa:	199b      	adds	r3, r3, r6
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	f004 fbaf 	bl	800f510 <_fflush_r>
 800adb2:	f8dd c000 	ldr.w	ip, [sp]
 800adb6:	2800      	cmp	r0, #0
 800adb8:	f43f af7c 	beq.w	800acb4 <__sfvwrite_r+0x94>
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	f04f 30ff 	mov.w	r0, #4294967295
 800adc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc6:	81a3      	strh	r3, [r4, #12]
 800adc8:	e781      	b.n	800acce <__sfvwrite_r+0xae>
 800adca:	464e      	mov	r6, r9
 800adcc:	b326      	cbz	r6, 800ae18 <__sfvwrite_r+0x1f8>
 800adce:	059a      	lsls	r2, r3, #22
 800add0:	68a7      	ldr	r7, [r4, #8]
 800add2:	d526      	bpl.n	800ae22 <__sfvwrite_r+0x202>
 800add4:	42be      	cmp	r6, r7
 800add6:	46bb      	mov	fp, r7
 800add8:	d246      	bcs.n	800ae68 <__sfvwrite_r+0x248>
 800adda:	6820      	ldr	r0, [r4, #0]
 800addc:	4633      	mov	r3, r6
 800adde:	46b3      	mov	fp, r6
 800ade0:	46b2      	mov	sl, r6
 800ade2:	4637      	mov	r7, r6
 800ade4:	4649      	mov	r1, r9
 800ade6:	465a      	mov	r2, fp
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	f000 fc91 	bl	800b710 <memmove>
 800adee:	9b00      	ldr	r3, [sp, #0]
 800adf0:	68a1      	ldr	r1, [r4, #8]
 800adf2:	6822      	ldr	r2, [r4, #0]
 800adf4:	1acb      	subs	r3, r1, r3
 800adf6:	60a3      	str	r3, [r4, #8]
 800adf8:	eb02 030b 	add.w	r3, r2, fp
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ae02:	1bc7      	subs	r7, r0, r7
 800ae04:	f8c8 7008 	str.w	r7, [r8, #8]
 800ae08:	2f00      	cmp	r7, #0
 800ae0a:	d02b      	beq.n	800ae64 <__sfvwrite_r+0x244>
 800ae0c:	ebca 0606 	rsb	r6, sl, r6
 800ae10:	44d1      	add	r9, sl
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	2e00      	cmp	r6, #0
 800ae16:	d1da      	bne.n	800adce <__sfvwrite_r+0x1ae>
 800ae18:	f8d5 9000 	ldr.w	r9, [r5]
 800ae1c:	686e      	ldr	r6, [r5, #4]
 800ae1e:	3508      	adds	r5, #8
 800ae20:	e7d4      	b.n	800adcc <__sfvwrite_r+0x1ac>
 800ae22:	6923      	ldr	r3, [r4, #16]
 800ae24:	46ba      	mov	sl, r7
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	4298      	cmp	r0, r3
 800ae2a:	bf94      	ite	ls
 800ae2c:	2300      	movls	r3, #0
 800ae2e:	2301      	movhi	r3, #1
 800ae30:	42b7      	cmp	r7, r6
 800ae32:	bf2c      	ite	cs
 800ae34:	2300      	movcs	r3, #0
 800ae36:	f003 0301 	andcc.w	r3, r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d129      	bne.n	800ae92 <__sfvwrite_r+0x272>
 800ae3e:	6963      	ldr	r3, [r4, #20]
 800ae40:	429e      	cmp	r6, r3
 800ae42:	d319      	bcc.n	800ae78 <__sfvwrite_r+0x258>
 800ae44:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ae46:	464a      	mov	r2, r9
 800ae48:	69e1      	ldr	r1, [r4, #28]
 800ae4a:	9801      	ldr	r0, [sp, #4]
 800ae4c:	47b8      	blx	r7
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	4607      	mov	r7, r0
 800ae52:	ddb3      	ble.n	800adbc <__sfvwrite_r+0x19c>
 800ae54:	4682      	mov	sl, r0
 800ae56:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ae5a:	1bc7      	subs	r7, r0, r7
 800ae5c:	f8c8 7008 	str.w	r7, [r8, #8]
 800ae60:	2f00      	cmp	r7, #0
 800ae62:	d1d3      	bne.n	800ae0c <__sfvwrite_r+0x1ec>
 800ae64:	4638      	mov	r0, r7
 800ae66:	e732      	b.n	800acce <__sfvwrite_r+0xae>
 800ae68:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800ae6c:	d11f      	bne.n	800aeae <__sfvwrite_r+0x28e>
 800ae6e:	463b      	mov	r3, r7
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	46b2      	mov	sl, r6
 800ae74:	4637      	mov	r7, r6
 800ae76:	e7b5      	b.n	800ade4 <__sfvwrite_r+0x1c4>
 800ae78:	4632      	mov	r2, r6
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	f000 fc48 	bl	800b710 <memmove>
 800ae80:	68a2      	ldr	r2, [r4, #8]
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	4637      	mov	r7, r6
 800ae86:	1b92      	subs	r2, r2, r6
 800ae88:	46b2      	mov	sl, r6
 800ae8a:	199b      	adds	r3, r3, r6
 800ae8c:	60a2      	str	r2, [r4, #8]
 800ae8e:	6023      	str	r3, [r4, #0]
 800ae90:	e7b5      	b.n	800adfe <__sfvwrite_r+0x1de>
 800ae92:	4649      	mov	r1, r9
 800ae94:	463a      	mov	r2, r7
 800ae96:	f000 fc3b 	bl	800b710 <memmove>
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	9801      	ldr	r0, [sp, #4]
 800ae9e:	4621      	mov	r1, r4
 800aea0:	19db      	adds	r3, r3, r7
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	f004 fb34 	bl	800f510 <_fflush_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d0a8      	beq.n	800adfe <__sfvwrite_r+0x1de>
 800aeac:	e786      	b.n	800adbc <__sfvwrite_r+0x19c>
 800aeae:	6962      	ldr	r2, [r4, #20]
 800aeb0:	6921      	ldr	r1, [r4, #16]
 800aeb2:	6820      	ldr	r0, [r4, #0]
 800aeb4:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800aeb8:	1a40      	subs	r0, r0, r1
 800aeba:	9003      	str	r0, [sp, #12]
 800aebc:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 800aec0:	3001      	adds	r0, #1
 800aec2:	1980      	adds	r0, r0, r6
 800aec4:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 800aec8:	4584      	cmp	ip, r0
 800aeca:	4662      	mov	r2, ip
 800aecc:	bf38      	it	cc
 800aece:	4684      	movcc	ip, r0
 800aed0:	9801      	ldr	r0, [sp, #4]
 800aed2:	bf38      	it	cc
 800aed4:	4662      	movcc	r2, ip
 800aed6:	055b      	lsls	r3, r3, #21
 800aed8:	d527      	bpl.n	800af2a <__sfvwrite_r+0x30a>
 800aeda:	4611      	mov	r1, r2
 800aedc:	f8cd c000 	str.w	ip, [sp]
 800aee0:	f000 f89e 	bl	800b020 <_malloc_r>
 800aee4:	f8dd c000 	ldr.w	ip, [sp]
 800aee8:	9002      	str	r0, [sp, #8]
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d02e      	beq.n	800af4c <__sfvwrite_r+0x32c>
 800aeee:	6921      	ldr	r1, [r4, #16]
 800aef0:	9802      	ldr	r0, [sp, #8]
 800aef2:	9a03      	ldr	r2, [sp, #12]
 800aef4:	f8cd c000 	str.w	ip, [sp]
 800aef8:	f000 fbc2 	bl	800b680 <memcpy>
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	f8dd c000 	ldr.w	ip, [sp]
 800af02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	9902      	ldr	r1, [sp, #8]
 800af0e:	4633      	mov	r3, r6
 800af10:	9a03      	ldr	r2, [sp, #12]
 800af12:	46b3      	mov	fp, r6
 800af14:	46b2      	mov	sl, r6
 800af16:	4637      	mov	r7, r6
 800af18:	1888      	adds	r0, r1, r2
 800af1a:	6121      	str	r1, [r4, #16]
 800af1c:	ebc2 020c 	rsb	r2, r2, ip
 800af20:	6020      	str	r0, [r4, #0]
 800af22:	f8c4 c014 	str.w	ip, [r4, #20]
 800af26:	60a2      	str	r2, [r4, #8]
 800af28:	e75c      	b.n	800ade4 <__sfvwrite_r+0x1c4>
 800af2a:	f8cd c000 	str.w	ip, [sp]
 800af2e:	f000 fd1f 	bl	800b970 <_realloc_r>
 800af32:	f8dd c000 	ldr.w	ip, [sp]
 800af36:	9002      	str	r0, [sp, #8]
 800af38:	2800      	cmp	r0, #0
 800af3a:	d1e7      	bne.n	800af0c <__sfvwrite_r+0x2ec>
 800af3c:	6921      	ldr	r1, [r4, #16]
 800af3e:	9801      	ldr	r0, [sp, #4]
 800af40:	f004 fd7e 	bl	800fa40 <_free_r>
 800af44:	9901      	ldr	r1, [sp, #4]
 800af46:	230c      	movs	r3, #12
 800af48:	600b      	str	r3, [r1, #0]
 800af4a:	e737      	b.n	800adbc <__sfvwrite_r+0x19c>
 800af4c:	9a01      	ldr	r2, [sp, #4]
 800af4e:	230c      	movs	r3, #12
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	e733      	b.n	800adbc <__sfvwrite_r+0x19c>
	...

0800af60 <_fwrite_r>:
 800af60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af64:	b086      	sub	sp, #24
 800af66:	fb02 f603 	mul.w	r6, r2, r3
 800af6a:	461d      	mov	r5, r3
 800af6c:	4614      	mov	r4, r2
 800af6e:	ab04      	add	r3, sp, #16
 800af70:	4607      	mov	r7, r0
 800af72:	9301      	str	r3, [sp, #4]
 800af74:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800af78:	2301      	movs	r3, #1
 800af7a:	9104      	str	r1, [sp, #16]
 800af7c:	9302      	str	r3, [sp, #8]
 800af7e:	9605      	str	r6, [sp, #20]
 800af80:	9603      	str	r6, [sp, #12]
 800af82:	b108      	cbz	r0, 800af88 <_fwrite_r+0x28>
 800af84:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800af86:	b1f3      	cbz	r3, 800afc6 <_fwrite_r+0x66>
 800af88:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800af8c:	4638      	mov	r0, r7
 800af8e:	4641      	mov	r1, r8
 800af90:	049a      	lsls	r2, r3, #18
 800af92:	bf5f      	itttt	pl
 800af94:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800af98:	f8a8 300c 	strhpl.w	r3, [r8, #12]
 800af9c:	f8d8 2064 	ldrpl.w	r2, [r8, #100]	; 0x64
 800afa0:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 800afa4:	aa01      	add	r2, sp, #4
 800afa6:	bf58      	it	pl
 800afa8:	f8c8 3064 	strpl.w	r3, [r8, #100]	; 0x64
 800afac:	f7ff fe38 	bl	800ac20 <__sfvwrite_r>
 800afb0:	b128      	cbz	r0, 800afbe <_fwrite_r+0x5e>
 800afb2:	9803      	ldr	r0, [sp, #12]
 800afb4:	4621      	mov	r1, r4
 800afb6:	1a30      	subs	r0, r6, r0
 800afb8:	f006 fa12 	bl	80113e0 <__aeabi_uidiv>
 800afbc:	4605      	mov	r5, r0
 800afbe:	4628      	mov	r0, r5
 800afc0:	b006      	add	sp, #24
 800afc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc6:	f004 fbcb 	bl	800f760 <__sinit>
 800afca:	e7dd      	b.n	800af88 <_fwrite_r+0x28>

0800afcc <fwrite>:
 800afcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afce:	f240 0448 	movw	r4, #72	; 0x48
 800afd2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800afd6:	4686      	mov	lr, r0
 800afd8:	460f      	mov	r7, r1
 800afda:	4616      	mov	r6, r2
 800afdc:	b083      	sub	sp, #12
 800afde:	461d      	mov	r5, r3
 800afe0:	6820      	ldr	r0, [r4, #0]
 800afe2:	4671      	mov	r1, lr
 800afe4:	463a      	mov	r2, r7
 800afe6:	4633      	mov	r3, r6
 800afe8:	9500      	str	r5, [sp, #0]
 800afea:	f7ff ffb9 	bl	800af60 <_fwrite_r>
 800afee:	b003      	add	sp, #12
 800aff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff2:	bf00      	nop
	...

0800b000 <malloc>:
 800b000:	f240 0348 	movw	r3, #72	; 0x48
 800b004:	4601      	mov	r1, r0
 800b006:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b00a:	6818      	ldr	r0, [r3, #0]
 800b00c:	f000 b808 	b.w	800b020 <_malloc_r>

0800b010 <free>:
 800b010:	f240 0348 	movw	r3, #72	; 0x48
 800b014:	4601      	mov	r1, r0
 800b016:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b01a:	6818      	ldr	r0, [r3, #0]
 800b01c:	f004 bd10 	b.w	800fa40 <_free_r>

0800b020 <_malloc_r>:
 800b020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	f101 040b 	add.w	r4, r1, #11
 800b028:	2c16      	cmp	r4, #22
 800b02a:	4605      	mov	r5, r0
 800b02c:	d92c      	bls.n	800b088 <_malloc_r+0x68>
 800b02e:	f024 0407 	bic.w	r4, r4, #7
 800b032:	0fe3      	lsrs	r3, r4, #31
 800b034:	428c      	cmp	r4, r1
 800b036:	bf2c      	ite	cs
 800b038:	4619      	movcs	r1, r3
 800b03a:	f043 0101 	orrcc.w	r1, r3, #1
 800b03e:	2900      	cmp	r1, #0
 800b040:	d12b      	bne.n	800b09a <_malloc_r+0x7a>
 800b042:	4628      	mov	r0, r5
 800b044:	f7f9 f808 	bl	8004058 <__malloc_lock>
 800b048:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800b04c:	d22b      	bcs.n	800b0a6 <_malloc_r+0x86>
 800b04e:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 800b052:	4e7e      	ldr	r6, [pc, #504]	; (800b24c <_malloc_r+0x22c>)
 800b054:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 800b058:	68d3      	ldr	r3, [r2, #12]
 800b05a:	4293      	cmp	r3, r2
 800b05c:	f000 822b 	beq.w	800b4b6 <_malloc_r+0x496>
 800b060:	685c      	ldr	r4, [r3, #4]
 800b062:	f103 0708 	add.w	r7, r3, #8
 800b066:	68da      	ldr	r2, [r3, #12]
 800b068:	4628      	mov	r0, r5
 800b06a:	f024 0403 	bic.w	r4, r4, #3
 800b06e:	6899      	ldr	r1, [r3, #8]
 800b070:	191b      	adds	r3, r3, r4
 800b072:	685c      	ldr	r4, [r3, #4]
 800b074:	60ca      	str	r2, [r1, #12]
 800b076:	f044 0401 	orr.w	r4, r4, #1
 800b07a:	6091      	str	r1, [r2, #8]
 800b07c:	605c      	str	r4, [r3, #4]
 800b07e:	f7f8 fff5 	bl	800406c <__malloc_unlock>
 800b082:	4638      	mov	r0, r7
 800b084:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b088:	2300      	movs	r3, #0
 800b08a:	2410      	movs	r4, #16
 800b08c:	428c      	cmp	r4, r1
 800b08e:	bf2c      	ite	cs
 800b090:	4619      	movcs	r1, r3
 800b092:	f043 0101 	orrcc.w	r1, r3, #1
 800b096:	2900      	cmp	r1, #0
 800b098:	d0d3      	beq.n	800b042 <_malloc_r+0x22>
 800b09a:	2700      	movs	r7, #0
 800b09c:	230c      	movs	r3, #12
 800b09e:	4638      	mov	r0, r7
 800b0a0:	602b      	str	r3, [r5, #0]
 800b0a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a6:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 800b0aa:	bf04      	itt	eq
 800b0ac:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 800b0b0:	ea4f 01cc 	moveq.w	r1, ip, lsl #3
 800b0b4:	f040 8083 	bne.w	800b1be <_malloc_r+0x19e>
 800b0b8:	4e64      	ldr	r6, [pc, #400]	; (800b24c <_malloc_r+0x22c>)
 800b0ba:	1871      	adds	r1, r6, r1
 800b0bc:	68cf      	ldr	r7, [r1, #12]
 800b0be:	42b9      	cmp	r1, r7
 800b0c0:	d106      	bne.n	800b0d0 <_malloc_r+0xb0>
 800b0c2:	e00d      	b.n	800b0e0 <_malloc_r+0xc0>
 800b0c4:	2a00      	cmp	r2, #0
 800b0c6:	f280 816c 	bge.w	800b3a2 <_malloc_r+0x382>
 800b0ca:	68ff      	ldr	r7, [r7, #12]
 800b0cc:	42b9      	cmp	r1, r7
 800b0ce:	d007      	beq.n	800b0e0 <_malloc_r+0xc0>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	1b1a      	subs	r2, r3, r4
 800b0d8:	2a0f      	cmp	r2, #15
 800b0da:	ddf3      	ble.n	800b0c4 <_malloc_r+0xa4>
 800b0dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b0e0:	f10c 0c01 	add.w	ip, ip, #1
 800b0e4:	4859      	ldr	r0, [pc, #356]	; (800b24c <_malloc_r+0x22c>)
 800b0e6:	6937      	ldr	r7, [r6, #16]
 800b0e8:	f100 0308 	add.w	r3, r0, #8
 800b0ec:	429f      	cmp	r7, r3
 800b0ee:	bf08      	it	eq
 800b0f0:	6841      	ldreq	r1, [r0, #4]
 800b0f2:	d024      	beq.n	800b13e <_malloc_r+0x11e>
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	f021 0103 	bic.w	r1, r1, #3
 800b0fa:	1b0a      	subs	r2, r1, r4
 800b0fc:	2a0f      	cmp	r2, #15
 800b0fe:	f300 81aa 	bgt.w	800b456 <_malloc_r+0x436>
 800b102:	2a00      	cmp	r2, #0
 800b104:	6143      	str	r3, [r0, #20]
 800b106:	6103      	str	r3, [r0, #16]
 800b108:	f280 8093 	bge.w	800b232 <_malloc_r+0x212>
 800b10c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b110:	f080 8166 	bcs.w	800b3e0 <_malloc_r+0x3c0>
 800b114:	08c9      	lsrs	r1, r1, #3
 800b116:	f04f 0e01 	mov.w	lr, #1
 800b11a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b11e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800b122:	1089      	asrs	r1, r1, #2
 800b124:	fa0e f101 	lsl.w	r1, lr, r1
 800b128:	60fa      	str	r2, [r7, #12]
 800b12a:	f8d2 e008 	ldr.w	lr, [r2, #8]
 800b12e:	ea41 0108 	orr.w	r1, r1, r8
 800b132:	6041      	str	r1, [r0, #4]
 800b134:	f8c7 e008 	str.w	lr, [r7, #8]
 800b138:	f8ce 700c 	str.w	r7, [lr, #12]
 800b13c:	6097      	str	r7, [r2, #8]
 800b13e:	2701      	movs	r7, #1
 800b140:	ea4f 02ac 	mov.w	r2, ip, asr #2
 800b144:	4097      	lsls	r7, r2
 800b146:	428f      	cmp	r7, r1
 800b148:	f200 8082 	bhi.w	800b250 <_malloc_r+0x230>
 800b14c:	4239      	tst	r1, r7
 800b14e:	d106      	bne.n	800b15e <_malloc_r+0x13e>
 800b150:	f02c 0c03 	bic.w	ip, ip, #3
 800b154:	007f      	lsls	r7, r7, #1
 800b156:	f10c 0c04 	add.w	ip, ip, #4
 800b15a:	4239      	tst	r1, r7
 800b15c:	d0fa      	beq.n	800b154 <_malloc_r+0x134>
 800b15e:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 800b162:	46e0      	mov	r8, ip
 800b164:	46ce      	mov	lr, r9
 800b166:	f8de 200c 	ldr.w	r2, [lr, #12]
 800b16a:	4596      	cmp	lr, r2
 800b16c:	d107      	bne.n	800b17e <_malloc_r+0x15e>
 800b16e:	e183      	b.n	800b478 <_malloc_r+0x458>
 800b170:	2900      	cmp	r1, #0
 800b172:	f280 81aa 	bge.w	800b4ca <_malloc_r+0x4aa>
 800b176:	68d2      	ldr	r2, [r2, #12]
 800b178:	4596      	cmp	lr, r2
 800b17a:	f000 817d 	beq.w	800b478 <_malloc_r+0x458>
 800b17e:	6850      	ldr	r0, [r2, #4]
 800b180:	f020 0003 	bic.w	r0, r0, #3
 800b184:	1b01      	subs	r1, r0, r4
 800b186:	290f      	cmp	r1, #15
 800b188:	ddf2      	ble.n	800b170 <_malloc_r+0x150>
 800b18a:	4617      	mov	r7, r2
 800b18c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800b190:	1910      	adds	r0, r2, r4
 800b192:	f041 0801 	orr.w	r8, r1, #1
 800b196:	f857 cf08 	ldr.w	ip, [r7, #8]!
 800b19a:	f044 0401 	orr.w	r4, r4, #1
 800b19e:	5041      	str	r1, [r0, r1]
 800b1a0:	6054      	str	r4, [r2, #4]
 800b1a2:	f8cc e00c 	str.w	lr, [ip, #12]
 800b1a6:	f8ce c008 	str.w	ip, [lr, #8]
 800b1aa:	6170      	str	r0, [r6, #20]
 800b1ac:	6130      	str	r0, [r6, #16]
 800b1ae:	60c3      	str	r3, [r0, #12]
 800b1b0:	6083      	str	r3, [r0, #8]
 800b1b2:	f8c0 8004 	str.w	r8, [r0, #4]
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f7f8 ff58 	bl	800406c <__malloc_unlock>
 800b1bc:	e761      	b.n	800b082 <_malloc_r+0x62>
 800b1be:	f1bc 0f04 	cmp.w	ip, #4
 800b1c2:	bf9e      	ittt	ls
 800b1c4:	ea4f 1c94 	movls.w	ip, r4, lsr #6
 800b1c8:	f10c 0c38 	addls.w	ip, ip, #56	; 0x38
 800b1cc:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 800b1d0:	f67f af72 	bls.w	800b0b8 <_malloc_r+0x98>
 800b1d4:	f1bc 0f14 	cmp.w	ip, #20
 800b1d8:	bf9c      	itt	ls
 800b1da:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 800b1de:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 800b1e2:	f67f af69 	bls.w	800b0b8 <_malloc_r+0x98>
 800b1e6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800b1ea:	bf9e      	ittt	ls
 800b1ec:	ea4f 3c14 	movls.w	ip, r4, lsr #12
 800b1f0:	f10c 0c6e 	addls.w	ip, ip, #110	; 0x6e
 800b1f4:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 800b1f8:	f67f af5e 	bls.w	800b0b8 <_malloc_r+0x98>
 800b1fc:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800b200:	bf9e      	ittt	ls
 800b202:	ea4f 3cd4 	movls.w	ip, r4, lsr #15
 800b206:	f10c 0c77 	addls.w	ip, ip, #119	; 0x77
 800b20a:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 800b20e:	f67f af53 	bls.w	800b0b8 <_malloc_r+0x98>
 800b212:	f240 5354 	movw	r3, #1364	; 0x554
 800b216:	459c      	cmp	ip, r3
 800b218:	bf95      	itete	ls
 800b21a:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 800b21e:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800b222:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 800b226:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 800b22a:	bf98      	it	ls
 800b22c:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 800b230:	e742      	b.n	800b0b8 <_malloc_r+0x98>
 800b232:	187b      	adds	r3, r7, r1
 800b234:	4628      	mov	r0, r5
 800b236:	3708      	adds	r7, #8
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	f042 0201 	orr.w	r2, r2, #1
 800b23e:	605a      	str	r2, [r3, #4]
 800b240:	f7f8 ff14 	bl	800406c <__malloc_unlock>
 800b244:	4638      	mov	r0, r7
 800b246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24a:	bf00      	nop
 800b24c:	20000478 	.word	0x20000478
 800b250:	68b7      	ldr	r7, [r6, #8]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f023 0803 	bic.w	r8, r3, #3
 800b258:	4544      	cmp	r4, r8
 800b25a:	ebc4 0208 	rsb	r2, r4, r8
 800b25e:	bf94      	ite	ls
 800b260:	2300      	movls	r3, #0
 800b262:	2301      	movhi	r3, #1
 800b264:	2a0f      	cmp	r2, #15
 800b266:	bfd8      	it	le
 800b268:	f043 0301 	orrle.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80a8 	beq.w	800b3c2 <_malloc_r+0x3a2>
 800b272:	4bb4      	ldr	r3, [pc, #720]	; (800b544 <_malloc_r+0x524>)
 800b274:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 800b548 <_malloc_r+0x528>
 800b278:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b27c:	f8da 3000 	ldr.w	r3, [sl]
 800b280:	3201      	adds	r2, #1
 800b282:	4423      	add	r3, r4
 800b284:	bf08      	it	eq
 800b286:	f103 0b10 	addeq.w	fp, r3, #16
 800b28a:	d006      	beq.n	800b29a <_malloc_r+0x27a>
 800b28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b290:	330f      	adds	r3, #15
 800b292:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 800b296:	f023 0b1f 	bic.w	fp, r3, #31
 800b29a:	4628      	mov	r0, r5
 800b29c:	4659      	mov	r1, fp
 800b29e:	f7f8 fe71 	bl	8003f84 <_sbrk_r>
 800b2a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b2a6:	4681      	mov	r9, r0
 800b2a8:	f000 813b 	beq.w	800b522 <_malloc_r+0x502>
 800b2ac:	eb07 0208 	add.w	r2, r7, r8
 800b2b0:	4282      	cmp	r2, r0
 800b2b2:	f200 8119 	bhi.w	800b4e8 <_malloc_r+0x4c8>
 800b2b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b2ba:	454a      	cmp	r2, r9
 800b2bc:	445b      	add	r3, fp
 800b2be:	f8ca 3004 	str.w	r3, [sl, #4]
 800b2c2:	f000 8133 	beq.w	800b52c <_malloc_r+0x50c>
 800b2c6:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	3101      	adds	r1, #1
 800b2ce:	bf17      	itett	ne
 800b2d0:	ebc2 0209 	rsbne	r2, r2, r9
 800b2d4:	4b9b      	ldreq	r3, [pc, #620]	; (800b544 <_malloc_r+0x524>)
 800b2d6:	189b      	addne	r3, r3, r2
 800b2d8:	f8ca 3004 	strne.w	r3, [sl, #4]
 800b2dc:	bf08      	it	eq
 800b2de:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 800b2e2:	f019 0307 	ands.w	r3, r9, #7
 800b2e6:	bf1f      	itttt	ne
 800b2e8:	f1c3 0208 	rsbne	r2, r3, #8
 800b2ec:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 800b2f0:	4491      	addne	r9, r2
 800b2f2:	f103 0208 	addne.w	r2, r3, #8
 800b2f6:	eb09 030b 	add.w	r3, r9, fp
 800b2fa:	bf08      	it	eq
 800b2fc:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800b300:	051b      	lsls	r3, r3, #20
 800b302:	0d1b      	lsrs	r3, r3, #20
 800b304:	ebc3 0b02 	rsb	fp, r3, r2
 800b308:	4659      	mov	r1, fp
 800b30a:	f7f8 fe3b 	bl	8003f84 <_sbrk_r>
 800b30e:	1c43      	adds	r3, r0, #1
 800b310:	f000 8124 	beq.w	800b55c <_malloc_r+0x53c>
 800b314:	ebc9 0200 	rsb	r2, r9, r0
 800b318:	445a      	add	r2, fp
 800b31a:	f042 0201 	orr.w	r2, r2, #1
 800b31e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b322:	42b7      	cmp	r7, r6
 800b324:	f8c6 9008 	str.w	r9, [r6, #8]
 800b328:	445b      	add	r3, fp
 800b32a:	f8c9 2004 	str.w	r2, [r9, #4]
 800b32e:	f8ca 3004 	str.w	r3, [sl, #4]
 800b332:	d016      	beq.n	800b362 <_malloc_r+0x342>
 800b334:	f1b8 0f0f 	cmp.w	r8, #15
 800b338:	f240 80ed 	bls.w	800b516 <_malloc_r+0x4f6>
 800b33c:	f1a8 020c 	sub.w	r2, r8, #12
 800b340:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800b344:	f022 0207 	bic.w	r2, r2, #7
 800b348:	2005      	movs	r0, #5
 800b34a:	18b9      	adds	r1, r7, r2
 800b34c:	2a0f      	cmp	r2, #15
 800b34e:	f00e 0e01 	and.w	lr, lr, #1
 800b352:	ea42 0e0e 	orr.w	lr, r2, lr
 800b356:	f8c7 e004 	str.w	lr, [r7, #4]
 800b35a:	6048      	str	r0, [r1, #4]
 800b35c:	6088      	str	r0, [r1, #8]
 800b35e:	f200 80f5 	bhi.w	800b54c <_malloc_r+0x52c>
 800b362:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800b366:	68b7      	ldr	r7, [r6, #8]
 800b368:	4293      	cmp	r3, r2
 800b36a:	bf84      	itt	hi
 800b36c:	4a76      	ldrhi	r2, [pc, #472]	; (800b548 <_malloc_r+0x528>)
 800b36e:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 800b370:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 800b374:	4293      	cmp	r3, r2
 800b376:	bf84      	itt	hi
 800b378:	4a73      	ldrhi	r2, [pc, #460]	; (800b548 <_malloc_r+0x528>)
 800b37a:	6313      	strhi	r3, [r2, #48]	; 0x30
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f023 0303 	bic.w	r3, r3, #3
 800b382:	429c      	cmp	r4, r3
 800b384:	ebc4 0203 	rsb	r2, r4, r3
 800b388:	bf94      	ite	ls
 800b38a:	2300      	movls	r3, #0
 800b38c:	2301      	movhi	r3, #1
 800b38e:	2a0f      	cmp	r2, #15
 800b390:	bfd8      	it	le
 800b392:	f043 0301 	orrle.w	r3, r3, #1
 800b396:	b1a3      	cbz	r3, 800b3c2 <_malloc_r+0x3a2>
 800b398:	4628      	mov	r0, r5
 800b39a:	2700      	movs	r7, #0
 800b39c:	f7f8 fe66 	bl	800406c <__malloc_unlock>
 800b3a0:	e66f      	b.n	800b082 <_malloc_r+0x62>
 800b3a2:	18fb      	adds	r3, r7, r3
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	685c      	ldr	r4, [r3, #4]
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	60ca      	str	r2, [r1, #12]
 800b3b0:	f044 0401 	orr.w	r4, r4, #1
 800b3b4:	6091      	str	r1, [r2, #8]
 800b3b6:	605c      	str	r4, [r3, #4]
 800b3b8:	f7f8 fe58 	bl	800406c <__malloc_unlock>
 800b3bc:	4638      	mov	r0, r7
 800b3be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c2:	193b      	adds	r3, r7, r4
 800b3c4:	f042 0201 	orr.w	r2, r2, #1
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f044 0401 	orr.w	r4, r4, #1
 800b3ce:	60b3      	str	r3, [r6, #8]
 800b3d0:	607c      	str	r4, [r7, #4]
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	605a      	str	r2, [r3, #4]
 800b3d6:	f7f8 fe49 	bl	800406c <__malloc_unlock>
 800b3da:	4638      	mov	r0, r7
 800b3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e0:	0988      	lsrs	r0, r1, #6
 800b3e2:	0a4a      	lsrs	r2, r1, #9
 800b3e4:	3038      	adds	r0, #56	; 0x38
 800b3e6:	2a04      	cmp	r2, #4
 800b3e8:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 800b3ec:	d91c      	bls.n	800b428 <_malloc_r+0x408>
 800b3ee:	2a14      	cmp	r2, #20
 800b3f0:	bf9c      	itt	ls
 800b3f2:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 800b3f6:	ea4f 0ec0 	movls.w	lr, r0, lsl #3
 800b3fa:	d915      	bls.n	800b428 <_malloc_r+0x408>
 800b3fc:	0b08      	lsrs	r0, r1, #12
 800b3fe:	306e      	adds	r0, #110	; 0x6e
 800b400:	2a54      	cmp	r2, #84	; 0x54
 800b402:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 800b406:	d90f      	bls.n	800b428 <_malloc_r+0x408>
 800b408:	0bc8      	lsrs	r0, r1, #15
 800b40a:	3077      	adds	r0, #119	; 0x77
 800b40c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b410:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 800b414:	d908      	bls.n	800b428 <_malloc_r+0x408>
 800b416:	f240 5054 	movw	r0, #1364	; 0x554
 800b41a:	4282      	cmp	r2, r0
 800b41c:	f200 80a7 	bhi.w	800b56e <_malloc_r+0x54e>
 800b420:	0c88      	lsrs	r0, r1, #18
 800b422:	307c      	adds	r0, #124	; 0x7c
 800b424:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 800b428:	44b6      	add	lr, r6
 800b42a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800b544 <_malloc_r+0x524>
 800b42e:	f8de 2008 	ldr.w	r2, [lr, #8]
 800b432:	4572      	cmp	r2, lr
 800b434:	d103      	bne.n	800b43e <_malloc_r+0x41e>
 800b436:	e060      	b.n	800b4fa <_malloc_r+0x4da>
 800b438:	6892      	ldr	r2, [r2, #8]
 800b43a:	4596      	cmp	lr, r2
 800b43c:	d004      	beq.n	800b448 <_malloc_r+0x428>
 800b43e:	6850      	ldr	r0, [r2, #4]
 800b440:	f020 0003 	bic.w	r0, r0, #3
 800b444:	4281      	cmp	r1, r0
 800b446:	d3f7      	bcc.n	800b438 <_malloc_r+0x418>
 800b448:	68d0      	ldr	r0, [r2, #12]
 800b44a:	6871      	ldr	r1, [r6, #4]
 800b44c:	60f8      	str	r0, [r7, #12]
 800b44e:	60ba      	str	r2, [r7, #8]
 800b450:	60d7      	str	r7, [r2, #12]
 800b452:	6087      	str	r7, [r0, #8]
 800b454:	e673      	b.n	800b13e <_malloc_r+0x11e>
 800b456:	1939      	adds	r1, r7, r4
 800b458:	f042 0601 	orr.w	r6, r2, #1
 800b45c:	6141      	str	r1, [r0, #20]
 800b45e:	f044 0401 	orr.w	r4, r4, #1
 800b462:	6101      	str	r1, [r0, #16]
 800b464:	4628      	mov	r0, r5
 800b466:	607c      	str	r4, [r7, #4]
 800b468:	3708      	adds	r7, #8
 800b46a:	60cb      	str	r3, [r1, #12]
 800b46c:	608b      	str	r3, [r1, #8]
 800b46e:	604e      	str	r6, [r1, #4]
 800b470:	508a      	str	r2, [r1, r2]
 800b472:	f7f8 fdfb 	bl	800406c <__malloc_unlock>
 800b476:	e604      	b.n	800b082 <_malloc_r+0x62>
 800b478:	f108 0801 	add.w	r8, r8, #1
 800b47c:	f10e 0e08 	add.w	lr, lr, #8
 800b480:	f018 0f03 	tst.w	r8, #3
 800b484:	f47f ae6f 	bne.w	800b166 <_malloc_r+0x146>
 800b488:	464a      	mov	r2, r9
 800b48a:	f01c 0f03 	tst.w	ip, #3
 800b48e:	f1a2 0108 	sub.w	r1, r2, #8
 800b492:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b496:	d065      	beq.n	800b564 <_malloc_r+0x544>
 800b498:	6812      	ldr	r2, [r2, #0]
 800b49a:	428a      	cmp	r2, r1
 800b49c:	d0f5      	beq.n	800b48a <_malloc_r+0x46a>
 800b49e:	6872      	ldr	r2, [r6, #4]
 800b4a0:	007f      	lsls	r7, r7, #1
 800b4a2:	4297      	cmp	r7, r2
 800b4a4:	f63f aed4 	bhi.w	800b250 <_malloc_r+0x230>
 800b4a8:	2f00      	cmp	r7, #0
 800b4aa:	f43f aed1 	beq.w	800b250 <_malloc_r+0x230>
 800b4ae:	4217      	tst	r7, r2
 800b4b0:	d061      	beq.n	800b576 <_malloc_r+0x556>
 800b4b2:	46c4      	mov	ip, r8
 800b4b4:	e653      	b.n	800b15e <_malloc_r+0x13e>
 800b4b6:	f103 0208 	add.w	r2, r3, #8
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	bf08      	it	eq
 800b4c0:	f10c 0c02 	addeq.w	ip, ip, #2
 800b4c4:	f43f ae0e 	beq.w	800b0e4 <_malloc_r+0xc4>
 800b4c8:	e5ca      	b.n	800b060 <_malloc_r+0x40>
 800b4ca:	4617      	mov	r7, r2
 800b4cc:	1810      	adds	r0, r2, r0
 800b4ce:	68d3      	ldr	r3, [r2, #12]
 800b4d0:	f857 2f08 	ldr.w	r2, [r7, #8]!
 800b4d4:	6841      	ldr	r1, [r0, #4]
 800b4d6:	60d3      	str	r3, [r2, #12]
 800b4d8:	f041 0101 	orr.w	r1, r1, #1
 800b4dc:	609a      	str	r2, [r3, #8]
 800b4de:	6041      	str	r1, [r0, #4]
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f7f8 fdc3 	bl	800406c <__malloc_unlock>
 800b4e6:	e5cc      	b.n	800b082 <_malloc_r+0x62>
 800b4e8:	42b7      	cmp	r7, r6
 800b4ea:	f43f aee4 	beq.w	800b2b6 <_malloc_r+0x296>
 800b4ee:	4b15      	ldr	r3, [pc, #84]	; (800b544 <_malloc_r+0x524>)
 800b4f0:	689f      	ldr	r7, [r3, #8]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f023 0303 	bic.w	r3, r3, #3
 800b4f8:	e743      	b.n	800b382 <_malloc_r+0x362>
 800b4fa:	f04f 0901 	mov.w	r9, #1
 800b4fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b502:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 800b506:	4610      	mov	r0, r2
 800b508:	fa09 fe0e 	lsl.w	lr, r9, lr
 800b50c:	ea4e 0101 	orr.w	r1, lr, r1
 800b510:	f8c8 1004 	str.w	r1, [r8, #4]
 800b514:	e79a      	b.n	800b44c <_malloc_r+0x42c>
 800b516:	2301      	movs	r3, #1
 800b518:	464f      	mov	r7, r9
 800b51a:	f8c9 3004 	str.w	r3, [r9, #4]
 800b51e:	2300      	movs	r3, #0
 800b520:	e72f      	b.n	800b382 <_malloc_r+0x362>
 800b522:	68b7      	ldr	r7, [r6, #8]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f023 0303 	bic.w	r3, r3, #3
 800b52a:	e72a      	b.n	800b382 <_malloc_r+0x362>
 800b52c:	0511      	lsls	r1, r2, #20
 800b52e:	0d09      	lsrs	r1, r1, #20
 800b530:	2900      	cmp	r1, #0
 800b532:	f47f aec8 	bne.w	800b2c6 <_malloc_r+0x2a6>
 800b536:	68b2      	ldr	r2, [r6, #8]
 800b538:	eb0b 0108 	add.w	r1, fp, r8
 800b53c:	f041 0101 	orr.w	r1, r1, #1
 800b540:	6051      	str	r1, [r2, #4]
 800b542:	e70e      	b.n	800b362 <_malloc_r+0x342>
 800b544:	20000478 	.word	0x20000478
 800b548:	20000a90 	.word	0x20000a90
 800b54c:	f107 0108 	add.w	r1, r7, #8
 800b550:	4628      	mov	r0, r5
 800b552:	f004 fa75 	bl	800fa40 <_free_r>
 800b556:	4b0a      	ldr	r3, [pc, #40]	; (800b580 <_malloc_r+0x560>)
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	e702      	b.n	800b362 <_malloc_r+0x342>
 800b55c:	2201      	movs	r2, #1
 800b55e:	f04f 0b00 	mov.w	fp, #0
 800b562:	e6dc      	b.n	800b31e <_malloc_r+0x2fe>
 800b564:	6872      	ldr	r2, [r6, #4]
 800b566:	ea22 0207 	bic.w	r2, r2, r7
 800b56a:	6072      	str	r2, [r6, #4]
 800b56c:	e798      	b.n	800b4a0 <_malloc_r+0x480>
 800b56e:	f44f 7e7c 	mov.w	lr, #1008	; 0x3f0
 800b572:	207e      	movs	r0, #126	; 0x7e
 800b574:	e758      	b.n	800b428 <_malloc_r+0x408>
 800b576:	007f      	lsls	r7, r7, #1
 800b578:	f108 0804 	add.w	r8, r8, #4
 800b57c:	e797      	b.n	800b4ae <_malloc_r+0x48e>
 800b57e:	bf00      	nop
 800b580:	20000a90 	.word	0x20000a90
	...

0800b590 <memchr>:
 800b590:	0783      	lsls	r3, r0, #30
 800b592:	b2c9      	uxtb	r1, r1
 800b594:	b470      	push	{r4, r5, r6}
 800b596:	d012      	beq.n	800b5be <memchr+0x2e>
 800b598:	2a00      	cmp	r2, #0
 800b59a:	d039      	beq.n	800b610 <memchr+0x80>
 800b59c:	7803      	ldrb	r3, [r0, #0]
 800b59e:	428b      	cmp	r3, r1
 800b5a0:	d025      	beq.n	800b5ee <memchr+0x5e>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	3a01      	subs	r2, #1
 800b5a6:	e006      	b.n	800b5b6 <memchr+0x26>
 800b5a8:	2a00      	cmp	r2, #0
 800b5aa:	d031      	beq.n	800b610 <memchr+0x80>
 800b5ac:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800b5b0:	3a01      	subs	r2, #1
 800b5b2:	428c      	cmp	r4, r1
 800b5b4:	d01b      	beq.n	800b5ee <memchr+0x5e>
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	f010 0f03 	tst.w	r0, #3
 800b5bc:	d1f4      	bne.n	800b5a8 <memchr+0x18>
 800b5be:	2a03      	cmp	r2, #3
 800b5c0:	bf84      	itt	hi
 800b5c2:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 800b5c6:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 800b5ca:	d812      	bhi.n	800b5f2 <memchr+0x62>
 800b5cc:	2a00      	cmp	r2, #0
 800b5ce:	d01f      	beq.n	800b610 <memchr+0x80>
 800b5d0:	7803      	ldrb	r3, [r0, #0]
 800b5d2:	428b      	cmp	r3, r1
 800b5d4:	d00b      	beq.n	800b5ee <memchr+0x5e>
 800b5d6:	1c43      	adds	r3, r0, #1
 800b5d8:	1882      	adds	r2, r0, r2
 800b5da:	e003      	b.n	800b5e4 <memchr+0x54>
 800b5dc:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b5e0:	428c      	cmp	r4, r1
 800b5e2:	d004      	beq.n	800b5ee <memchr+0x5e>
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	f100 0001 	add.w	r0, r0, #1
 800b5ea:	d1f7      	bne.n	800b5dc <memchr+0x4c>
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	bc70      	pop	{r4, r5, r6}
 800b5f0:	4770      	bx	lr
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	3004      	adds	r0, #4
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	4073      	eors	r3, r6
 800b5fa:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800b5fe:	ea25 0303 	bic.w	r3, r5, r3
 800b602:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b606:	d105      	bne.n	800b614 <memchr+0x84>
 800b608:	3a04      	subs	r2, #4
 800b60a:	2a03      	cmp	r2, #3
 800b60c:	d8f1      	bhi.n	800b5f2 <memchr+0x62>
 800b60e:	e7dd      	b.n	800b5cc <memchr+0x3c>
 800b610:	4610      	mov	r0, r2
 800b612:	e7ec      	b.n	800b5ee <memchr+0x5e>
 800b614:	4620      	mov	r0, r4
 800b616:	e7d9      	b.n	800b5cc <memchr+0x3c>
	...

0800b620 <memcmp>:
 800b620:	2a03      	cmp	r2, #3
 800b622:	b470      	push	{r4, r5, r6}
 800b624:	d926      	bls.n	800b674 <memcmp+0x54>
 800b626:	ea41 0500 	orr.w	r5, r1, r0
 800b62a:	4603      	mov	r3, r0
 800b62c:	07ad      	lsls	r5, r5, #30
 800b62e:	460c      	mov	r4, r1
 800b630:	d013      	beq.n	800b65a <memcmp+0x3a>
 800b632:	7805      	ldrb	r5, [r0, #0]
 800b634:	3a01      	subs	r2, #1
 800b636:	780c      	ldrb	r4, [r1, #0]
 800b638:	2300      	movs	r3, #0
 800b63a:	42a5      	cmp	r5, r4
 800b63c:	d004      	beq.n	800b648 <memcmp+0x28>
 800b63e:	e01d      	b.n	800b67c <memcmp+0x5c>
 800b640:	7865      	ldrb	r5, [r4, #1]
 800b642:	5ccc      	ldrb	r4, [r1, r3]
 800b644:	42a5      	cmp	r5, r4
 800b646:	d119      	bne.n	800b67c <memcmp+0x5c>
 800b648:	429a      	cmp	r2, r3
 800b64a:	eb00 0403 	add.w	r4, r0, r3
 800b64e:	f103 0301 	add.w	r3, r3, #1
 800b652:	d1f5      	bne.n	800b640 <memcmp+0x20>
 800b654:	2000      	movs	r0, #0
 800b656:	bc70      	pop	{r4, r5, r6}
 800b658:	4770      	bx	lr
 800b65a:	4621      	mov	r1, r4
 800b65c:	4618      	mov	r0, r3
 800b65e:	3404      	adds	r4, #4
 800b660:	3304      	adds	r3, #4
 800b662:	6806      	ldr	r6, [r0, #0]
 800b664:	680d      	ldr	r5, [r1, #0]
 800b666:	42ae      	cmp	r6, r5
 800b668:	d104      	bne.n	800b674 <memcmp+0x54>
 800b66a:	3a04      	subs	r2, #4
 800b66c:	2a03      	cmp	r2, #3
 800b66e:	d8f4      	bhi.n	800b65a <memcmp+0x3a>
 800b670:	4621      	mov	r1, r4
 800b672:	4618      	mov	r0, r3
 800b674:	2a00      	cmp	r2, #0
 800b676:	d1dc      	bne.n	800b632 <memcmp+0x12>
 800b678:	4610      	mov	r0, r2
 800b67a:	e7ec      	b.n	800b656 <memcmp+0x36>
 800b67c:	1b28      	subs	r0, r5, r4
 800b67e:	e7ea      	b.n	800b656 <memcmp+0x36>

0800b680 <memcpy>:
 800b680:	2a0f      	cmp	r2, #15
 800b682:	b4f0      	push	{r4, r5, r6, r7}
 800b684:	bf98      	it	ls
 800b686:	4603      	movls	r3, r0
 800b688:	d931      	bls.n	800b6ee <memcpy+0x6e>
 800b68a:	ea41 0300 	orr.w	r3, r1, r0
 800b68e:	079b      	lsls	r3, r3, #30
 800b690:	d136      	bne.n	800b700 <memcpy+0x80>
 800b692:	460c      	mov	r4, r1
 800b694:	4603      	mov	r3, r0
 800b696:	4615      	mov	r5, r2
 800b698:	6826      	ldr	r6, [r4, #0]
 800b69a:	3d10      	subs	r5, #16
 800b69c:	601e      	str	r6, [r3, #0]
 800b69e:	6866      	ldr	r6, [r4, #4]
 800b6a0:	605e      	str	r6, [r3, #4]
 800b6a2:	68a6      	ldr	r6, [r4, #8]
 800b6a4:	609e      	str	r6, [r3, #8]
 800b6a6:	68e6      	ldr	r6, [r4, #12]
 800b6a8:	3410      	adds	r4, #16
 800b6aa:	60de      	str	r6, [r3, #12]
 800b6ac:	3310      	adds	r3, #16
 800b6ae:	2d0f      	cmp	r5, #15
 800b6b0:	d8f2      	bhi.n	800b698 <memcpy+0x18>
 800b6b2:	f1a2 0410 	sub.w	r4, r2, #16
 800b6b6:	f002 020f 	and.w	r2, r2, #15
 800b6ba:	f024 040f 	bic.w	r4, r4, #15
 800b6be:	3410      	adds	r4, #16
 800b6c0:	2a03      	cmp	r2, #3
 800b6c2:	eb00 0304 	add.w	r3, r0, r4
 800b6c6:	4421      	add	r1, r4
 800b6c8:	d911      	bls.n	800b6ee <memcpy+0x6e>
 800b6ca:	460e      	mov	r6, r1
 800b6cc:	461d      	mov	r5, r3
 800b6ce:	4614      	mov	r4, r2
 800b6d0:	f856 7b04 	ldr.w	r7, [r6], #4
 800b6d4:	3c04      	subs	r4, #4
 800b6d6:	2c03      	cmp	r4, #3
 800b6d8:	f845 7b04 	str.w	r7, [r5], #4
 800b6dc:	d8f8      	bhi.n	800b6d0 <memcpy+0x50>
 800b6de:	1f14      	subs	r4, r2, #4
 800b6e0:	f002 0203 	and.w	r2, r2, #3
 800b6e4:	f024 0403 	bic.w	r4, r4, #3
 800b6e8:	3404      	adds	r4, #4
 800b6ea:	1909      	adds	r1, r1, r4
 800b6ec:	191b      	adds	r3, r3, r4
 800b6ee:	b12a      	cbz	r2, 800b6fc <memcpy+0x7c>
 800b6f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6f4:	3a01      	subs	r2, #1
 800b6f6:	f803 4b01 	strb.w	r4, [r3], #1
 800b6fa:	d1f9      	bne.n	800b6f0 <memcpy+0x70>
 800b6fc:	bcf0      	pop	{r4, r5, r6, r7}
 800b6fe:	4770      	bx	lr
 800b700:	4603      	mov	r3, r0
 800b702:	e7f5      	b.n	800b6f0 <memcpy+0x70>
	...

0800b710 <memmove>:
 800b710:	4288      	cmp	r0, r1
 800b712:	b4f0      	push	{r4, r5, r6, r7}
 800b714:	d912      	bls.n	800b73c <memmove+0x2c>
 800b716:	188d      	adds	r5, r1, r2
 800b718:	42a8      	cmp	r0, r5
 800b71a:	d20f      	bcs.n	800b73c <memmove+0x2c>
 800b71c:	b162      	cbz	r2, 800b738 <memmove+0x28>
 800b71e:	4613      	mov	r3, r2
 800b720:	1882      	adds	r2, r0, r2
 800b722:	4259      	negs	r1, r3
 800b724:	186d      	adds	r5, r5, r1
 800b726:	1852      	adds	r2, r2, r1
 800b728:	18ec      	adds	r4, r5, r3
 800b72a:	18d1      	adds	r1, r2, r3
 800b72c:	3b01      	subs	r3, #1
 800b72e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 800b732:	f801 4c01 	strb.w	r4, [r1, #-1]
 800b736:	d1f7      	bne.n	800b728 <memmove+0x18>
 800b738:	bcf0      	pop	{r4, r5, r6, r7}
 800b73a:	4770      	bx	lr
 800b73c:	2a0f      	cmp	r2, #15
 800b73e:	bf98      	it	ls
 800b740:	4603      	movls	r3, r0
 800b742:	d931      	bls.n	800b7a8 <memmove+0x98>
 800b744:	ea41 0300 	orr.w	r3, r1, r0
 800b748:	079b      	lsls	r3, r3, #30
 800b74a:	d13c      	bne.n	800b7c6 <memmove+0xb6>
 800b74c:	460c      	mov	r4, r1
 800b74e:	4603      	mov	r3, r0
 800b750:	4615      	mov	r5, r2
 800b752:	6826      	ldr	r6, [r4, #0]
 800b754:	3d10      	subs	r5, #16
 800b756:	601e      	str	r6, [r3, #0]
 800b758:	6866      	ldr	r6, [r4, #4]
 800b75a:	605e      	str	r6, [r3, #4]
 800b75c:	68a6      	ldr	r6, [r4, #8]
 800b75e:	609e      	str	r6, [r3, #8]
 800b760:	68e6      	ldr	r6, [r4, #12]
 800b762:	3410      	adds	r4, #16
 800b764:	60de      	str	r6, [r3, #12]
 800b766:	3310      	adds	r3, #16
 800b768:	2d0f      	cmp	r5, #15
 800b76a:	d8f2      	bhi.n	800b752 <memmove+0x42>
 800b76c:	f1a2 0410 	sub.w	r4, r2, #16
 800b770:	f002 020f 	and.w	r2, r2, #15
 800b774:	f024 040f 	bic.w	r4, r4, #15
 800b778:	3410      	adds	r4, #16
 800b77a:	2a03      	cmp	r2, #3
 800b77c:	eb00 0304 	add.w	r3, r0, r4
 800b780:	4421      	add	r1, r4
 800b782:	d911      	bls.n	800b7a8 <memmove+0x98>
 800b784:	460e      	mov	r6, r1
 800b786:	461d      	mov	r5, r3
 800b788:	4614      	mov	r4, r2
 800b78a:	f856 7b04 	ldr.w	r7, [r6], #4
 800b78e:	3c04      	subs	r4, #4
 800b790:	2c03      	cmp	r4, #3
 800b792:	f845 7b04 	str.w	r7, [r5], #4
 800b796:	d8f8      	bhi.n	800b78a <memmove+0x7a>
 800b798:	1f14      	subs	r4, r2, #4
 800b79a:	f002 0203 	and.w	r2, r2, #3
 800b79e:	f024 0403 	bic.w	r4, r4, #3
 800b7a2:	3404      	adds	r4, #4
 800b7a4:	1909      	adds	r1, r1, r4
 800b7a6:	191b      	adds	r3, r3, r4
 800b7a8:	2a00      	cmp	r2, #0
 800b7aa:	d0c5      	beq.n	800b738 <memmove+0x28>
 800b7ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7b0:	3a01      	subs	r2, #1
 800b7b2:	f803 4b01 	strb.w	r4, [r3], #1
 800b7b6:	d0bf      	beq.n	800b738 <memmove+0x28>
 800b7b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7bc:	3a01      	subs	r2, #1
 800b7be:	f803 4b01 	strb.w	r4, [r3], #1
 800b7c2:	d1f3      	bne.n	800b7ac <memmove+0x9c>
 800b7c4:	e7b8      	b.n	800b738 <memmove+0x28>
 800b7c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	3a01      	subs	r2, #1
 800b7ce:	f803 4b01 	strb.w	r4, [r3], #1
 800b7d2:	d1f1      	bne.n	800b7b8 <memmove+0xa8>
 800b7d4:	e7b0      	b.n	800b738 <memmove+0x28>
 800b7d6:	bf00      	nop
	...

0800b7e0 <memset>:
 800b7e0:	f010 0f03 	tst.w	r0, #3
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	b470      	push	{r4, r5, r6}
 800b7e8:	d041      	beq.n	800b86e <memset+0x8e>
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	d03d      	beq.n	800b86a <memset+0x8a>
 800b7ee:	b2ce      	uxtb	r6, r1
 800b7f0:	e001      	b.n	800b7f6 <memset+0x16>
 800b7f2:	2a00      	cmp	r2, #0
 800b7f4:	d039      	beq.n	800b86a <memset+0x8a>
 800b7f6:	f803 6b01 	strb.w	r6, [r3], #1
 800b7fa:	1e54      	subs	r4, r2, #1
 800b7fc:	f013 0f03 	tst.w	r3, #3
 800b800:	4622      	mov	r2, r4
 800b802:	461d      	mov	r5, r3
 800b804:	d1f5      	bne.n	800b7f2 <memset+0x12>
 800b806:	2c03      	cmp	r4, #3
 800b808:	d929      	bls.n	800b85e <memset+0x7e>
 800b80a:	b2ca      	uxtb	r2, r1
 800b80c:	2c0f      	cmp	r4, #15
 800b80e:	bf84      	itt	hi
 800b810:	462b      	movhi	r3, r5
 800b812:	4626      	movhi	r6, r4
 800b814:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 800b818:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800b81c:	d911      	bls.n	800b842 <memset+0x62>
 800b81e:	3e10      	subs	r6, #16
 800b820:	601a      	str	r2, [r3, #0]
 800b822:	605a      	str	r2, [r3, #4]
 800b824:	609a      	str	r2, [r3, #8]
 800b826:	60da      	str	r2, [r3, #12]
 800b828:	3310      	adds	r3, #16
 800b82a:	2e0f      	cmp	r6, #15
 800b82c:	d8f7      	bhi.n	800b81e <memset+0x3e>
 800b82e:	f1a4 0310 	sub.w	r3, r4, #16
 800b832:	f004 040f 	and.w	r4, r4, #15
 800b836:	f023 030f 	bic.w	r3, r3, #15
 800b83a:	3310      	adds	r3, #16
 800b83c:	2c03      	cmp	r4, #3
 800b83e:	441d      	add	r5, r3
 800b840:	d90d      	bls.n	800b85e <memset+0x7e>
 800b842:	462e      	mov	r6, r5
 800b844:	4623      	mov	r3, r4
 800b846:	3b04      	subs	r3, #4
 800b848:	f846 2b04 	str.w	r2, [r6], #4
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d8fa      	bhi.n	800b846 <memset+0x66>
 800b850:	1f23      	subs	r3, r4, #4
 800b852:	f004 0403 	and.w	r4, r4, #3
 800b856:	f023 0303 	bic.w	r3, r3, #3
 800b85a:	3304      	adds	r3, #4
 800b85c:	18ed      	adds	r5, r5, r3
 800b85e:	b2c9      	uxtb	r1, r1
 800b860:	b11c      	cbz	r4, 800b86a <memset+0x8a>
 800b862:	3c01      	subs	r4, #1
 800b864:	f805 1b01 	strb.w	r1, [r5], #1
 800b868:	d1fb      	bne.n	800b862 <memset+0x82>
 800b86a:	bc70      	pop	{r4, r5, r6}
 800b86c:	4770      	bx	lr
 800b86e:	4605      	mov	r5, r0
 800b870:	4614      	mov	r4, r2
 800b872:	e7c8      	b.n	800b806 <memset+0x26>
	...

0800b880 <_putc_r>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	4604      	mov	r4, r0
 800b884:	460e      	mov	r6, r1
 800b886:	4615      	mov	r5, r2
 800b888:	b108      	cbz	r0, 800b88e <_putc_r+0xe>
 800b88a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b88c:	b1c3      	cbz	r3, 800b8c0 <_putc_r+0x40>
 800b88e:	68ab      	ldr	r3, [r5, #8]
 800b890:	3b01      	subs	r3, #1
 800b892:	60ab      	str	r3, [r5, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	db06      	blt.n	800b8a6 <_putc_r+0x26>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	701e      	strb	r6, [r3, #0]
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8a2:	602b      	str	r3, [r5, #0]
 800b8a4:	bd70      	pop	{r4, r5, r6, pc}
 800b8a6:	69aa      	ldr	r2, [r5, #24]
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	db0c      	blt.n	800b8c6 <_putc_r+0x46>
 800b8ac:	682b      	ldr	r3, [r5, #0]
 800b8ae:	701e      	strb	r6, [r3, #0]
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	7819      	ldrb	r1, [r3, #0]
 800b8b4:	290a      	cmp	r1, #10
 800b8b6:	d00d      	beq.n	800b8d4 <_putc_r+0x54>
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	4608      	mov	r0, r1
 800b8bc:	602b      	str	r3, [r5, #0]
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	f003 ff4e 	bl	800f760 <__sinit>
 800b8c4:	e7e3      	b.n	800b88e <_putc_r+0xe>
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	462a      	mov	r2, r5
 800b8cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8d0:	f002 bcde 	b.w	800e290 <__swbuf_r>
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	462a      	mov	r2, r5
 800b8d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8dc:	f002 bcd8 	b.w	800e290 <__swbuf_r>

0800b8e0 <putc>:
 800b8e0:	b570      	push	{r4, r5, r6, lr}
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	4d17      	ldr	r5, [pc, #92]	; (800b944 <putc+0x64>)
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	6828      	ldr	r0, [r5, #0]
 800b8ea:	b108      	cbz	r0, 800b8f0 <putc+0x10>
 800b8ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b8ee:	b1c3      	cbz	r3, 800b922 <putc+0x42>
 800b8f0:	68a3      	ldr	r3, [r4, #8]
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	60a3      	str	r3, [r4, #8]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	db06      	blt.n	800b908 <putc+0x28>
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	701e      	strb	r6, [r3, #0]
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	69a2      	ldr	r2, [r4, #24]
 800b90a:	4293      	cmp	r3, r2
 800b90c:	db0c      	blt.n	800b928 <putc+0x48>
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	701e      	strb	r6, [r3, #0]
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	7819      	ldrb	r1, [r3, #0]
 800b916:	290a      	cmp	r1, #10
 800b918:	d00d      	beq.n	800b936 <putc+0x56>
 800b91a:	3301      	adds	r3, #1
 800b91c:	4608      	mov	r0, r1
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	bd70      	pop	{r4, r5, r6, pc}
 800b922:	f003 ff1d 	bl	800f760 <__sinit>
 800b926:	e7e3      	b.n	800b8f0 <putc+0x10>
 800b928:	6828      	ldr	r0, [r5, #0]
 800b92a:	4631      	mov	r1, r6
 800b92c:	4622      	mov	r2, r4
 800b92e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b932:	f002 bcad 	b.w	800e290 <__swbuf_r>
 800b936:	6828      	ldr	r0, [r5, #0]
 800b938:	4622      	mov	r2, r4
 800b93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b93e:	f002 bca7 	b.w	800e290 <__swbuf_r>
 800b942:	bf00      	nop
 800b944:	20000048 	.word	0x20000048
	...

0800b950 <realloc>:
 800b950:	f240 0348 	movw	r3, #72	; 0x48
 800b954:	460a      	mov	r2, r1
 800b956:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b95a:	4601      	mov	r1, r0
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	f000 b807 	b.w	800b970 <_realloc_r>
 800b962:	bf00      	nop
	...

0800b970 <_realloc_r>:
 800b970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b974:	460c      	mov	r4, r1
 800b976:	b083      	sub	sp, #12
 800b978:	4606      	mov	r6, r0
 800b97a:	2900      	cmp	r1, #0
 800b97c:	f000 8135 	beq.w	800bbea <_realloc_r+0x27a>
 800b980:	9201      	str	r2, [sp, #4]
 800b982:	f7f8 fb69 	bl	8004058 <__malloc_lock>
 800b986:	9a01      	ldr	r2, [sp, #4]
 800b988:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800b98c:	f102 050b 	add.w	r5, r2, #11
 800b990:	2d16      	cmp	r5, #22
 800b992:	f200 809d 	bhi.w	800bad0 <_realloc_r+0x160>
 800b996:	2110      	movs	r1, #16
 800b998:	2700      	movs	r7, #0
 800b99a:	460d      	mov	r5, r1
 800b99c:	4295      	cmp	r5, r2
 800b99e:	bf38      	it	cc
 800b9a0:	f047 0701 	orrcc.w	r7, r7, #1
 800b9a4:	2f00      	cmp	r7, #0
 800b9a6:	f040 8126 	bne.w	800bbf6 <_realloc_r+0x286>
 800b9aa:	f020 0903 	bic.w	r9, r0, #3
 800b9ae:	f1a4 0a08 	sub.w	sl, r4, #8
 800b9b2:	4589      	cmp	r9, r1
 800b9b4:	bfa8      	it	ge
 800b9b6:	464f      	movge	r7, r9
 800b9b8:	da74      	bge.n	800baa4 <_realloc_r+0x134>
 800b9ba:	4ba1      	ldr	r3, [pc, #644]	; (800bc40 <_realloc_r+0x2d0>)
 800b9bc:	eb0a 0e09 	add.w	lr, sl, r9
 800b9c0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800b9c4:	45f3      	cmp	fp, lr
 800b9c6:	f000 811a 	beq.w	800bbfe <_realloc_r+0x28e>
 800b9ca:	f8de c004 	ldr.w	ip, [lr, #4]
 800b9ce:	f02c 0801 	bic.w	r8, ip, #1
 800b9d2:	44f0      	add	r8, lr
 800b9d4:	f8d8 8004 	ldr.w	r8, [r8, #4]
 800b9d8:	f018 0f01 	tst.w	r8, #1
 800b9dc:	bf1c      	itt	ne
 800b9de:	46bc      	movne	ip, r7
 800b9e0:	46e6      	movne	lr, ip
 800b9e2:	d07a      	beq.n	800bada <_realloc_r+0x16a>
 800b9e4:	07c0      	lsls	r0, r0, #31
 800b9e6:	f100 809a 	bmi.w	800bb1e <_realloc_r+0x1ae>
 800b9ea:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800b9ee:	ebc0 080a 	rsb	r8, r0, sl
 800b9f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b9f6:	f020 0003 	bic.w	r0, r0, #3
 800b9fa:	f1be 0f00 	cmp.w	lr, #0
 800b9fe:	f000 80b6 	beq.w	800bb6e <_realloc_r+0x1fe>
 800ba02:	45de      	cmp	lr, fp
 800ba04:	eb00 0b09 	add.w	fp, r0, r9
 800ba08:	f000 814d 	beq.w	800bca6 <_realloc_r+0x336>
 800ba0c:	eb0c 070b 	add.w	r7, ip, fp
 800ba10:	42b9      	cmp	r1, r7
 800ba12:	f300 80ae 	bgt.w	800bb72 <_realloc_r+0x202>
 800ba16:	f8de 100c 	ldr.w	r1, [lr, #12]
 800ba1a:	4643      	mov	r3, r8
 800ba1c:	f8de 0008 	ldr.w	r0, [lr, #8]
 800ba20:	f1a9 0204 	sub.w	r2, r9, #4
 800ba24:	2a24      	cmp	r2, #36	; 0x24
 800ba26:	60c1      	str	r1, [r0, #12]
 800ba28:	6088      	str	r0, [r1, #8]
 800ba2a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800ba2e:	f853 0f08 	ldr.w	r0, [r3, #8]!
 800ba32:	60c1      	str	r1, [r0, #12]
 800ba34:	6088      	str	r0, [r1, #8]
 800ba36:	f200 8191 	bhi.w	800bd5c <_realloc_r+0x3ec>
 800ba3a:	2a13      	cmp	r2, #19
 800ba3c:	bf9c      	itt	ls
 800ba3e:	461a      	movls	r2, r3
 800ba40:	4621      	movls	r1, r4
 800ba42:	d925      	bls.n	800ba90 <_realloc_r+0x120>
 800ba44:	6821      	ldr	r1, [r4, #0]
 800ba46:	2a1b      	cmp	r2, #27
 800ba48:	bf98      	it	ls
 800ba4a:	f108 0210 	addls.w	r2, r8, #16
 800ba4e:	f8c8 1008 	str.w	r1, [r8, #8]
 800ba52:	6861      	ldr	r1, [r4, #4]
 800ba54:	f8c8 100c 	str.w	r1, [r8, #12]
 800ba58:	bf98      	it	ls
 800ba5a:	f104 0108 	addls.w	r1, r4, #8
 800ba5e:	d917      	bls.n	800ba90 <_realloc_r+0x120>
 800ba60:	68a1      	ldr	r1, [r4, #8]
 800ba62:	2a24      	cmp	r2, #36	; 0x24
 800ba64:	bf14      	ite	ne
 800ba66:	f108 0218 	addne.w	r2, r8, #24
 800ba6a:	f108 0220 	addeq.w	r2, r8, #32
 800ba6e:	f8c8 1010 	str.w	r1, [r8, #16]
 800ba72:	68e1      	ldr	r1, [r4, #12]
 800ba74:	f8c8 1014 	str.w	r1, [r8, #20]
 800ba78:	bf11      	iteee	ne
 800ba7a:	f104 0110 	addne.w	r1, r4, #16
 800ba7e:	6920      	ldreq	r0, [r4, #16]
 800ba80:	f104 0118 	addeq.w	r1, r4, #24
 800ba84:	f8c8 0018 	streq.w	r0, [r8, #24]
 800ba88:	bf04      	itt	eq
 800ba8a:	6960      	ldreq	r0, [r4, #20]
 800ba8c:	f8c8 001c 	streq.w	r0, [r8, #28]
 800ba90:	6808      	ldr	r0, [r1, #0]
 800ba92:	461c      	mov	r4, r3
 800ba94:	6010      	str	r0, [r2, #0]
 800ba96:	46c2      	mov	sl, r8
 800ba98:	684b      	ldr	r3, [r1, #4]
 800ba9a:	6053      	str	r3, [r2, #4]
 800ba9c:	688b      	ldr	r3, [r1, #8]
 800ba9e:	6093      	str	r3, [r2, #8]
 800baa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800baa4:	1b7b      	subs	r3, r7, r5
 800baa6:	2b0f      	cmp	r3, #15
 800baa8:	d825      	bhi.n	800baf6 <_realloc_r+0x186>
 800baaa:	eb0a 0307 	add.w	r3, sl, r7
 800baae:	f000 0001 	and.w	r0, r0, #1
 800bab2:	4307      	orrs	r7, r0
 800bab4:	f8ca 7004 	str.w	r7, [sl, #4]
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	f042 0201 	orr.w	r2, r2, #1
 800babe:	605a      	str	r2, [r3, #4]
 800bac0:	4630      	mov	r0, r6
 800bac2:	4627      	mov	r7, r4
 800bac4:	f7f8 fad2 	bl	800406c <__malloc_unlock>
 800bac8:	4638      	mov	r0, r7
 800baca:	b003      	add	sp, #12
 800bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad0:	f025 0507 	bic.w	r5, r5, #7
 800bad4:	4629      	mov	r1, r5
 800bad6:	0fef      	lsrs	r7, r5, #31
 800bad8:	e760      	b.n	800b99c <_realloc_r+0x2c>
 800bada:	f02c 0c03 	bic.w	ip, ip, #3
 800bade:	eb0c 0709 	add.w	r7, ip, r9
 800bae2:	42b9      	cmp	r1, r7
 800bae4:	f73f af7e 	bgt.w	800b9e4 <_realloc_r+0x74>
 800bae8:	f8de 300c 	ldr.w	r3, [lr, #12]
 800baec:	f8de 2008 	ldr.w	r2, [lr, #8]
 800baf0:	60d3      	str	r3, [r2, #12]
 800baf2:	609a      	str	r2, [r3, #8]
 800baf4:	e7d6      	b.n	800baa4 <_realloc_r+0x134>
 800baf6:	eb0a 0105 	add.w	r1, sl, r5
 800bafa:	f000 0001 	and.w	r0, r0, #1
 800bafe:	18ca      	adds	r2, r1, r3
 800bb00:	4305      	orrs	r5, r0
 800bb02:	f043 0301 	orr.w	r3, r3, #1
 800bb06:	f8ca 5004 	str.w	r5, [sl, #4]
 800bb0a:	604b      	str	r3, [r1, #4]
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	6853      	ldr	r3, [r2, #4]
 800bb10:	3108      	adds	r1, #8
 800bb12:	f043 0301 	orr.w	r3, r3, #1
 800bb16:	6053      	str	r3, [r2, #4]
 800bb18:	f003 ff92 	bl	800fa40 <_free_r>
 800bb1c:	e7d0      	b.n	800bac0 <_realloc_r+0x150>
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4611      	mov	r1, r2
 800bb22:	f7ff fa7d 	bl	800b020 <_malloc_r>
 800bb26:	4607      	mov	r7, r0
 800bb28:	b1e8      	cbz	r0, 800bb66 <_realloc_r+0x1f6>
 800bb2a:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800bb2e:	f1a7 0208 	sub.w	r2, r7, #8
 800bb32:	f020 0301 	bic.w	r3, r0, #1
 800bb36:	4453      	add	r3, sl
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	f000 8109 	beq.w	800bd50 <_realloc_r+0x3e0>
 800bb3e:	f1a9 0204 	sub.w	r2, r9, #4
 800bb42:	2a24      	cmp	r2, #36	; 0x24
 800bb44:	f200 80aa 	bhi.w	800bc9c <_realloc_r+0x32c>
 800bb48:	2a13      	cmp	r2, #19
 800bb4a:	bf9c      	itt	ls
 800bb4c:	463b      	movls	r3, r7
 800bb4e:	4622      	movls	r2, r4
 800bb50:	d878      	bhi.n	800bc44 <_realloc_r+0x2d4>
 800bb52:	6811      	ldr	r1, [r2, #0]
 800bb54:	6019      	str	r1, [r3, #0]
 800bb56:	6851      	ldr	r1, [r2, #4]
 800bb58:	6059      	str	r1, [r3, #4]
 800bb5a:	6892      	ldr	r2, [r2, #8]
 800bb5c:	609a      	str	r2, [r3, #8]
 800bb5e:	4630      	mov	r0, r6
 800bb60:	4621      	mov	r1, r4
 800bb62:	f003 ff6d 	bl	800fa40 <_free_r>
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7f8 fa80 	bl	800406c <__malloc_unlock>
 800bb6c:	e7ac      	b.n	800bac8 <_realloc_r+0x158>
 800bb6e:	eb00 0b09 	add.w	fp, r0, r9
 800bb72:	4559      	cmp	r1, fp
 800bb74:	dcd3      	bgt.n	800bb1e <_realloc_r+0x1ae>
 800bb76:	4643      	mov	r3, r8
 800bb78:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800bb7c:	f1a9 0204 	sub.w	r2, r9, #4
 800bb80:	f853 0f08 	ldr.w	r0, [r3, #8]!
 800bb84:	2a24      	cmp	r2, #36	; 0x24
 800bb86:	60c1      	str	r1, [r0, #12]
 800bb88:	6088      	str	r0, [r1, #8]
 800bb8a:	d87d      	bhi.n	800bc88 <_realloc_r+0x318>
 800bb8c:	2a13      	cmp	r2, #19
 800bb8e:	bf9c      	itt	ls
 800bb90:	461a      	movls	r2, r3
 800bb92:	4621      	movls	r1, r4
 800bb94:	d925      	bls.n	800bbe2 <_realloc_r+0x272>
 800bb96:	6821      	ldr	r1, [r4, #0]
 800bb98:	2a1b      	cmp	r2, #27
 800bb9a:	bf98      	it	ls
 800bb9c:	f108 0210 	addls.w	r2, r8, #16
 800bba0:	f8c8 1008 	str.w	r1, [r8, #8]
 800bba4:	6861      	ldr	r1, [r4, #4]
 800bba6:	f8c8 100c 	str.w	r1, [r8, #12]
 800bbaa:	bf98      	it	ls
 800bbac:	f104 0108 	addls.w	r1, r4, #8
 800bbb0:	d917      	bls.n	800bbe2 <_realloc_r+0x272>
 800bbb2:	68a1      	ldr	r1, [r4, #8]
 800bbb4:	2a24      	cmp	r2, #36	; 0x24
 800bbb6:	bf14      	ite	ne
 800bbb8:	f108 0218 	addne.w	r2, r8, #24
 800bbbc:	f108 0220 	addeq.w	r2, r8, #32
 800bbc0:	f8c8 1010 	str.w	r1, [r8, #16]
 800bbc4:	68e1      	ldr	r1, [r4, #12]
 800bbc6:	f8c8 1014 	str.w	r1, [r8, #20]
 800bbca:	bf11      	iteee	ne
 800bbcc:	f104 0110 	addne.w	r1, r4, #16
 800bbd0:	6920      	ldreq	r0, [r4, #16]
 800bbd2:	f104 0118 	addeq.w	r1, r4, #24
 800bbd6:	f8c8 0018 	streq.w	r0, [r8, #24]
 800bbda:	bf04      	itt	eq
 800bbdc:	6960      	ldreq	r0, [r4, #20]
 800bbde:	f8c8 001c 	streq.w	r0, [r8, #28]
 800bbe2:	6808      	ldr	r0, [r1, #0]
 800bbe4:	461c      	mov	r4, r3
 800bbe6:	465f      	mov	r7, fp
 800bbe8:	e754      	b.n	800ba94 <_realloc_r+0x124>
 800bbea:	4611      	mov	r1, r2
 800bbec:	b003      	add	sp, #12
 800bbee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf2:	f7ff ba15 	b.w	800b020 <_malloc_r>
 800bbf6:	230c      	movs	r3, #12
 800bbf8:	2700      	movs	r7, #0
 800bbfa:	6033      	str	r3, [r6, #0]
 800bbfc:	e764      	b.n	800bac8 <_realloc_r+0x158>
 800bbfe:	f8db 7004 	ldr.w	r7, [fp, #4]
 800bc02:	f105 0e10 	add.w	lr, r5, #16
 800bc06:	f027 0c03 	bic.w	ip, r7, #3
 800bc0a:	eb0c 0709 	add.w	r7, ip, r9
 800bc0e:	4577      	cmp	r7, lr
 800bc10:	bfb8      	it	lt
 800bc12:	46de      	movlt	lr, fp
 800bc14:	f6ff aee6 	blt.w	800b9e4 <_realloc_r+0x74>
 800bc18:	eb0a 0205 	add.w	r2, sl, r5
 800bc1c:	1b79      	subs	r1, r7, r5
 800bc1e:	f041 0101 	orr.w	r1, r1, #1
 800bc22:	609a      	str	r2, [r3, #8]
 800bc24:	6051      	str	r1, [r2, #4]
 800bc26:	4630      	mov	r0, r6
 800bc28:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800bc2c:	4627      	mov	r7, r4
 800bc2e:	f001 0301 	and.w	r3, r1, #1
 800bc32:	431d      	orrs	r5, r3
 800bc34:	f844 5c04 	str.w	r5, [r4, #-4]
 800bc38:	f7f8 fa18 	bl	800406c <__malloc_unlock>
 800bc3c:	e744      	b.n	800bac8 <_realloc_r+0x158>
 800bc3e:	bf00      	nop
 800bc40:	20000478 	.word	0x20000478
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	2a1b      	cmp	r2, #27
 800bc48:	bf98      	it	ls
 800bc4a:	f104 0208 	addls.w	r2, r4, #8
 800bc4e:	603b      	str	r3, [r7, #0]
 800bc50:	6863      	ldr	r3, [r4, #4]
 800bc52:	607b      	str	r3, [r7, #4]
 800bc54:	bf98      	it	ls
 800bc56:	f107 0308 	addls.w	r3, r7, #8
 800bc5a:	f67f af7a 	bls.w	800bb52 <_realloc_r+0x1e2>
 800bc5e:	68a3      	ldr	r3, [r4, #8]
 800bc60:	2a24      	cmp	r2, #36	; 0x24
 800bc62:	bf14      	ite	ne
 800bc64:	f104 0210 	addne.w	r2, r4, #16
 800bc68:	f104 0218 	addeq.w	r2, r4, #24
 800bc6c:	60bb      	str	r3, [r7, #8]
 800bc6e:	68e3      	ldr	r3, [r4, #12]
 800bc70:	60fb      	str	r3, [r7, #12]
 800bc72:	bf11      	iteee	ne
 800bc74:	f107 0310 	addne.w	r3, r7, #16
 800bc78:	6921      	ldreq	r1, [r4, #16]
 800bc7a:	f107 0318 	addeq.w	r3, r7, #24
 800bc7e:	6139      	streq	r1, [r7, #16]
 800bc80:	bf04      	itt	eq
 800bc82:	6961      	ldreq	r1, [r4, #20]
 800bc84:	6179      	streq	r1, [r7, #20]
 800bc86:	e764      	b.n	800bb52 <_realloc_r+0x1e2>
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	461c      	mov	r4, r3
 800bc8e:	465f      	mov	r7, fp
 800bc90:	f7ff fd3e 	bl	800b710 <memmove>
 800bc94:	46c2      	mov	sl, r8
 800bc96:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bc9a:	e703      	b.n	800baa4 <_realloc_r+0x134>
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	4621      	mov	r1, r4
 800bca0:	f7ff fd36 	bl	800b710 <memmove>
 800bca4:	e75b      	b.n	800bb5e <_realloc_r+0x1ee>
 800bca6:	f105 0010 	add.w	r0, r5, #16
 800bcaa:	44dc      	add	ip, fp
 800bcac:	4584      	cmp	ip, r0
 800bcae:	f6ff af60 	blt.w	800bb72 <_realloc_r+0x202>
 800bcb2:	4647      	mov	r7, r8
 800bcb4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800bcb8:	f1a9 0204 	sub.w	r2, r9, #4
 800bcbc:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800bcc0:	2a24      	cmp	r2, #36	; 0x24
 800bcc2:	60c1      	str	r1, [r0, #12]
 800bcc4:	6088      	str	r0, [r1, #8]
 800bcc6:	d852      	bhi.n	800bd6e <_realloc_r+0x3fe>
 800bcc8:	2a13      	cmp	r2, #19
 800bcca:	bf9c      	itt	ls
 800bccc:	463a      	movls	r2, r7
 800bcce:	4621      	movls	r1, r4
 800bcd0:	d925      	bls.n	800bd1e <_realloc_r+0x3ae>
 800bcd2:	6821      	ldr	r1, [r4, #0]
 800bcd4:	2a1b      	cmp	r2, #27
 800bcd6:	bf98      	it	ls
 800bcd8:	f108 0210 	addls.w	r2, r8, #16
 800bcdc:	f8c8 1008 	str.w	r1, [r8, #8]
 800bce0:	6861      	ldr	r1, [r4, #4]
 800bce2:	f8c8 100c 	str.w	r1, [r8, #12]
 800bce6:	bf98      	it	ls
 800bce8:	f104 0108 	addls.w	r1, r4, #8
 800bcec:	d917      	bls.n	800bd1e <_realloc_r+0x3ae>
 800bcee:	68a1      	ldr	r1, [r4, #8]
 800bcf0:	2a24      	cmp	r2, #36	; 0x24
 800bcf2:	bf14      	ite	ne
 800bcf4:	f108 0218 	addne.w	r2, r8, #24
 800bcf8:	f108 0220 	addeq.w	r2, r8, #32
 800bcfc:	f8c8 1010 	str.w	r1, [r8, #16]
 800bd00:	68e1      	ldr	r1, [r4, #12]
 800bd02:	f8c8 1014 	str.w	r1, [r8, #20]
 800bd06:	bf11      	iteee	ne
 800bd08:	f104 0110 	addne.w	r1, r4, #16
 800bd0c:	6920      	ldreq	r0, [r4, #16]
 800bd0e:	f104 0118 	addeq.w	r1, r4, #24
 800bd12:	f8c8 0018 	streq.w	r0, [r8, #24]
 800bd16:	bf04      	itt	eq
 800bd18:	6960      	ldreq	r0, [r4, #20]
 800bd1a:	f8c8 001c 	streq.w	r0, [r8, #28]
 800bd1e:	6808      	ldr	r0, [r1, #0]
 800bd20:	6010      	str	r0, [r2, #0]
 800bd22:	6848      	ldr	r0, [r1, #4]
 800bd24:	6050      	str	r0, [r2, #4]
 800bd26:	6889      	ldr	r1, [r1, #8]
 800bd28:	6091      	str	r1, [r2, #8]
 800bd2a:	eb08 0205 	add.w	r2, r8, r5
 800bd2e:	ebc5 010c 	rsb	r1, r5, ip
 800bd32:	f041 0101 	orr.w	r1, r1, #1
 800bd36:	609a      	str	r2, [r3, #8]
 800bd38:	6051      	str	r1, [r2, #4]
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	431d      	orrs	r5, r3
 800bd46:	f8c8 5004 	str.w	r5, [r8, #4]
 800bd4a:	f7f8 f98f 	bl	800406c <__malloc_unlock>
 800bd4e:	e6bb      	b.n	800bac8 <_realloc_r+0x158>
 800bd50:	f857 7c04 	ldr.w	r7, [r7, #-4]
 800bd54:	f027 0703 	bic.w	r7, r7, #3
 800bd58:	444f      	add	r7, r9
 800bd5a:	e6a3      	b.n	800baa4 <_realloc_r+0x134>
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	4618      	mov	r0, r3
 800bd60:	461c      	mov	r4, r3
 800bd62:	46c2      	mov	sl, r8
 800bd64:	f7ff fcd4 	bl	800b710 <memmove>
 800bd68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bd6c:	e69a      	b.n	800baa4 <_realloc_r+0x134>
 800bd6e:	4638      	mov	r0, r7
 800bd70:	4621      	mov	r1, r4
 800bd72:	e88d 1008 	stmia.w	sp, {r3, ip}
 800bd76:	f7ff fccb 	bl	800b710 <memmove>
 800bd7a:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800bd7e:	e7d4      	b.n	800bd2a <_realloc_r+0x3ba>

0800bd80 <_init_signal_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4604      	mov	r4, r0
 800bd84:	f8d0 52dc 	ldr.w	r5, [r0, #732]	; 0x2dc
 800bd88:	b10d      	cbz	r5, 800bd8e <_init_signal_r+0xe>
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	bd38      	pop	{r3, r4, r5, pc}
 800bd8e:	2180      	movs	r1, #128	; 0x80
 800bd90:	f7ff f946 	bl	800b020 <_malloc_r>
 800bd94:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 800bd98:	b148      	cbz	r0, 800bdae <_init_signal_r+0x2e>
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	e001      	b.n	800bda2 <_init_signal_r+0x22>
 800bd9e:	f8d4 02dc 	ldr.w	r0, [r4, #732]	; 0x2dc
 800bda2:	5143      	str	r3, [r0, r5]
 800bda4:	3504      	adds	r5, #4
 800bda6:	2d80      	cmp	r5, #128	; 0x80
 800bda8:	d1f9      	bne.n	800bd9e <_init_signal_r+0x1e>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	bd38      	pop	{r3, r4, r5, pc}
 800bdae:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}

0800bdb4 <_signal_r>:
 800bdb4:	291f      	cmp	r1, #31
 800bdb6:	b510      	push	{r4, lr}
 800bdb8:	4604      	mov	r4, r0
 800bdba:	b082      	sub	sp, #8
 800bdbc:	d808      	bhi.n	800bdd0 <_signal_r+0x1c>
 800bdbe:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800bdc2:	b153      	cbz	r3, 800bdda <_signal_r+0x26>
 800bdc4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800bdc8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800bdcc:	b002      	add	sp, #8
 800bdce:	bd10      	pop	{r4, pc}
 800bdd0:	2316      	movs	r3, #22
 800bdd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	e7f8      	b.n	800bdcc <_signal_r+0x18>
 800bdda:	9101      	str	r1, [sp, #4]
 800bddc:	9200      	str	r2, [sp, #0]
 800bdde:	f7ff ffcf 	bl	800bd80 <_init_signal_r>
 800bde2:	9901      	ldr	r1, [sp, #4]
 800bde4:	9a00      	ldr	r2, [sp, #0]
 800bde6:	b910      	cbnz	r0, 800bdee <_signal_r+0x3a>
 800bde8:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 800bdec:	e7ea      	b.n	800bdc4 <_signal_r+0x10>
 800bdee:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf2:	e7eb      	b.n	800bdcc <_signal_r+0x18>

0800bdf4 <_raise_r>:
 800bdf4:	291f      	cmp	r1, #31
 800bdf6:	b538      	push	{r3, r4, r5, lr}
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	d820      	bhi.n	800be40 <_raise_r+0x4c>
 800bdfe:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800be02:	b19a      	cbz	r2, 800be2c <_raise_r+0x38>
 800be04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be08:	b183      	cbz	r3, 800be2c <_raise_r+0x38>
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d00c      	beq.n	800be28 <_raise_r+0x34>
 800be0e:	1c59      	adds	r1, r3, #1
 800be10:	d006      	beq.n	800be20 <_raise_r+0x2c>
 800be12:	2500      	movs	r5, #0
 800be14:	4620      	mov	r0, r4
 800be16:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800be1a:	4798      	blx	r3
 800be1c:	4628      	mov	r0, r5
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	2316      	movs	r3, #22
 800be22:	2001      	movs	r0, #1
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	bd38      	pop	{r3, r4, r5, pc}
 800be28:	2000      	movs	r0, #0
 800be2a:	bd38      	pop	{r3, r4, r5, pc}
 800be2c:	4628      	mov	r0, r5
 800be2e:	f7f8 f903 	bl	8004038 <_getpid_r>
 800be32:	4622      	mov	r2, r4
 800be34:	4601      	mov	r1, r0
 800be36:	4628      	mov	r0, r5
 800be38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be3c:	f7f8 b8ea 	b.w	8004014 <_kill_r>
 800be40:	2316      	movs	r3, #22
 800be42:	f04f 30ff 	mov.w	r0, #4294967295
 800be46:	602b      	str	r3, [r5, #0]
 800be48:	bd38      	pop	{r3, r4, r5, pc}
 800be4a:	bf00      	nop

0800be4c <__sigtramp_r>:
 800be4c:	291f      	cmp	r1, #31
 800be4e:	b510      	push	{r4, lr}
 800be50:	4604      	mov	r4, r0
 800be52:	b082      	sub	sp, #8
 800be54:	d81e      	bhi.n	800be94 <__sigtramp_r+0x48>
 800be56:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800be5a:	b19a      	cbz	r2, 800be84 <__sigtramp_r+0x38>
 800be5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be60:	2001      	movs	r0, #1
 800be62:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800be66:	b14b      	cbz	r3, 800be7c <__sigtramp_r+0x30>
 800be68:	1c58      	adds	r0, r3, #1
 800be6a:	d009      	beq.n	800be80 <__sigtramp_r+0x34>
 800be6c:	2003      	movs	r0, #3
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d004      	beq.n	800be7c <__sigtramp_r+0x30>
 800be72:	2400      	movs	r4, #0
 800be74:	4608      	mov	r0, r1
 800be76:	6014      	str	r4, [r2, #0]
 800be78:	4798      	blx	r3
 800be7a:	4620      	mov	r0, r4
 800be7c:	b002      	add	sp, #8
 800be7e:	bd10      	pop	{r4, pc}
 800be80:	2002      	movs	r0, #2
 800be82:	e7fb      	b.n	800be7c <__sigtramp_r+0x30>
 800be84:	9101      	str	r1, [sp, #4]
 800be86:	f7ff ff7b 	bl	800bd80 <_init_signal_r>
 800be8a:	9901      	ldr	r1, [sp, #4]
 800be8c:	b910      	cbnz	r0, 800be94 <__sigtramp_r+0x48>
 800be8e:	f8d4 22dc 	ldr.w	r2, [r4, #732]	; 0x2dc
 800be92:	e7e3      	b.n	800be5c <__sigtramp_r+0x10>
 800be94:	f04f 30ff 	mov.w	r0, #4294967295
 800be98:	e7f0      	b.n	800be7c <__sigtramp_r+0x30>
 800be9a:	bf00      	nop

0800be9c <raise>:
 800be9c:	f240 0348 	movw	r3, #72	; 0x48
 800bea0:	4601      	mov	r1, r0
 800bea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bea6:	6818      	ldr	r0, [r3, #0]
 800bea8:	e7a4      	b.n	800bdf4 <_raise_r>
 800beaa:	bf00      	nop

0800beac <signal>:
 800beac:	f240 0348 	movw	r3, #72	; 0x48
 800beb0:	460a      	mov	r2, r1
 800beb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800beb6:	4601      	mov	r1, r0
 800beb8:	6818      	ldr	r0, [r3, #0]
 800beba:	e77b      	b.n	800bdb4 <_signal_r>

0800bebc <_init_signal>:
 800bebc:	f240 0348 	movw	r3, #72	; 0x48
 800bec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bec4:	6818      	ldr	r0, [r3, #0]
 800bec6:	e75b      	b.n	800bd80 <_init_signal_r>

0800bec8 <__sigtramp>:
 800bec8:	f240 0348 	movw	r3, #72	; 0x48
 800becc:	4601      	mov	r1, r0
 800bece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bed2:	6818      	ldr	r0, [r3, #0]
 800bed4:	e7ba      	b.n	800be4c <__sigtramp_r>
 800bed6:	bf00      	nop
	...

0800bee0 <_sprintf_r>:
 800bee0:	b40c      	push	{r2, r3}
 800bee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bee4:	b09d      	sub	sp, #116	; 0x74
 800bee6:	ac22      	add	r4, sp, #136	; 0x88
 800bee8:	460e      	mov	r6, r1
 800beea:	a901      	add	r1, sp, #4
 800beec:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800bef0:	f854 2b04 	ldr.w	r2, [r4], #4
 800bef4:	f44f 7702 	mov.w	r7, #520	; 0x208
 800bef8:	9601      	str	r6, [sp, #4]
 800befa:	4623      	mov	r3, r4
 800befc:	9605      	str	r6, [sp, #20]
 800befe:	f8ad 7010 	strh.w	r7, [sp, #16]
 800bf02:	f04f 36ff 	mov.w	r6, #4294967295
 800bf06:	9503      	str	r5, [sp, #12]
 800bf08:	f8ad 6012 	strh.w	r6, [sp, #18]
 800bf0c:	9506      	str	r5, [sp, #24]
 800bf0e:	941b      	str	r4, [sp, #108]	; 0x6c
 800bf10:	f000 fa6e 	bl	800c3f0 <_svfprintf_r>
 800bf14:	9b01      	ldr	r3, [sp, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	b01d      	add	sp, #116	; 0x74
 800bf1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bf20:	b002      	add	sp, #8
 800bf22:	4770      	bx	lr

0800bf24 <sprintf>:
 800bf24:	b40e      	push	{r1, r2, r3}
 800bf26:	f240 0348 	movw	r3, #72	; 0x48
 800bf2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf2c:	b09c      	sub	sp, #112	; 0x70
 800bf2e:	ac21      	add	r4, sp, #132	; 0x84
 800bf30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf34:	4606      	mov	r6, r0
 800bf36:	a901      	add	r1, sp, #4
 800bf38:	f854 2b04 	ldr.w	r2, [r4], #4
 800bf3c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800bf40:	6818      	ldr	r0, [r3, #0]
 800bf42:	f44f 7702 	mov.w	r7, #520	; 0x208
 800bf46:	4623      	mov	r3, r4
 800bf48:	9601      	str	r6, [sp, #4]
 800bf4a:	9605      	str	r6, [sp, #20]
 800bf4c:	f04f 36ff 	mov.w	r6, #4294967295
 800bf50:	f8ad 7010 	strh.w	r7, [sp, #16]
 800bf54:	f8ad 6012 	strh.w	r6, [sp, #18]
 800bf58:	9503      	str	r5, [sp, #12]
 800bf5a:	9506      	str	r5, [sp, #24]
 800bf5c:	941b      	str	r4, [sp, #108]	; 0x6c
 800bf5e:	f000 fa47 	bl	800c3f0 <_svfprintf_r>
 800bf62:	9b01      	ldr	r3, [sp, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	b01c      	add	sp, #112	; 0x70
 800bf6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bf6e:	b003      	add	sp, #12
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
	...

0800bf80 <strcat>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	0783      	lsls	r3, r0, #30
 800bf84:	4604      	mov	r4, r0
 800bf86:	d120      	bne.n	800bfca <strcat+0x4a>
 800bf88:	6803      	ldr	r3, [r0, #0]
 800bf8a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800bf8e:	ea22 0303 	bic.w	r3, r2, r3
 800bf92:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800bf96:	bf04      	itt	eq
 800bf98:	4602      	moveq	r2, r0
 800bf9a:	4600      	moveq	r0, r0
 800bf9c:	d115      	bne.n	800bfca <strcat+0x4a>
 800bf9e:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800bfa2:	3004      	adds	r0, #4
 800bfa4:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800bfa8:	ea25 0303 	bic.w	r3, r5, r3
 800bfac:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800bfb0:	d0f5      	beq.n	800bf9e <strcat+0x1e>
 800bfb2:	7803      	ldrb	r3, [r0, #0]
 800bfb4:	b12b      	cbz	r3, 800bfc2 <strcat+0x42>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	2a00      	cmp	r2, #0
 800bfc0:	d1fa      	bne.n	800bfb8 <strcat+0x38>
 800bfc2:	f000 f8f5 	bl	800c1b0 <strcpy>
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	bd38      	pop	{r3, r4, r5, pc}
 800bfca:	4620      	mov	r0, r4
 800bfcc:	e7f1      	b.n	800bfb2 <strcat+0x32>
 800bfce:	bf00      	nop

0800bfd0 <strcmp>:
 800bfd0:	ea80 0201 	eor.w	r2, r0, r1
 800bfd4:	f012 0f03 	tst.w	r2, #3
 800bfd8:	d13a      	bne.n	800c050 <strcmp_unaligned>
 800bfda:	f010 0203 	ands.w	r2, r0, #3
 800bfde:	f020 0003 	bic.w	r0, r0, #3
 800bfe2:	f021 0103 	bic.w	r1, r1, #3
 800bfe6:	f850 cb04 	ldr.w	ip, [r0], #4
 800bfea:	bf08      	it	eq
 800bfec:	f851 3b04 	ldreq.w	r3, [r1], #4
 800bff0:	d00d      	beq.n	800c00e <strcmp+0x3e>
 800bff2:	f082 0203 	eor.w	r2, r2, #3
 800bff6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800bffa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bffe:	fa23 f202 	lsr.w	r2, r3, r2
 800c002:	f851 3b04 	ldr.w	r3, [r1], #4
 800c006:	ea4c 0c02 	orr.w	ip, ip, r2
 800c00a:	ea43 0302 	orr.w	r3, r3, r2
 800c00e:	bf00      	nop
 800c010:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800c014:	459c      	cmp	ip, r3
 800c016:	bf01      	itttt	eq
 800c018:	ea22 020c 	biceq.w	r2, r2, ip
 800c01c:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 800c020:	f850 cb04 	ldreq.w	ip, [r0], #4
 800c024:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c028:	d0f2      	beq.n	800c010 <strcmp+0x40>
 800c02a:	ea4f 600c 	mov.w	r0, ip, lsl #24
 800c02e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800c032:	2801      	cmp	r0, #1
 800c034:	bf28      	it	cs
 800c036:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 800c03a:	bf08      	it	eq
 800c03c:	0a1b      	lsreq	r3, r3, #8
 800c03e:	d0f4      	beq.n	800c02a <strcmp+0x5a>
 800c040:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800c044:	ea4f 6010 	mov.w	r0, r0, lsr #24
 800c048:	eba0 0003 	sub.w	r0, r0, r3
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop

0800c050 <strcmp_unaligned>:
 800c050:	f010 0f03 	tst.w	r0, #3
 800c054:	d00a      	beq.n	800c06c <strcmp_unaligned+0x1c>
 800c056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c05a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c05e:	2a01      	cmp	r2, #1
 800c060:	bf28      	it	cs
 800c062:	429a      	cmpcs	r2, r3
 800c064:	d0f4      	beq.n	800c050 <strcmp_unaligned>
 800c066:	eba2 0003 	sub.w	r0, r2, r3
 800c06a:	4770      	bx	lr
 800c06c:	f84d 5d04 	str.w	r5, [sp, #-4]!
 800c070:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800c074:	f04f 0201 	mov.w	r2, #1
 800c078:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 800c07c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800c080:	f001 0c03 	and.w	ip, r1, #3
 800c084:	f021 0103 	bic.w	r1, r1, #3
 800c088:	f850 4b04 	ldr.w	r4, [r0], #4
 800c08c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c090:	f1bc 0f02 	cmp.w	ip, #2
 800c094:	d026      	beq.n	800c0e4 <strcmp_unaligned+0x94>
 800c096:	d84b      	bhi.n	800c130 <strcmp_unaligned+0xe0>
 800c098:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 800c09c:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 800c0a0:	eba4 0302 	sub.w	r3, r4, r2
 800c0a4:	ea23 0304 	bic.w	r3, r3, r4
 800c0a8:	d10d      	bne.n	800c0c6 <strcmp_unaligned+0x76>
 800c0aa:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800c0ae:	bf08      	it	eq
 800c0b0:	f851 5b04 	ldreq.w	r5, [r1], #4
 800c0b4:	d10a      	bne.n	800c0cc <strcmp_unaligned+0x7c>
 800c0b6:	ea8c 0c04 	eor.w	ip, ip, r4
 800c0ba:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 800c0be:	d10c      	bne.n	800c0da <strcmp_unaligned+0x8a>
 800c0c0:	f850 4b04 	ldr.w	r4, [r0], #4
 800c0c4:	e7e8      	b.n	800c098 <strcmp_unaligned+0x48>
 800c0c6:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800c0ca:	e05c      	b.n	800c186 <strcmp_unaligned+0x136>
 800c0cc:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 800c0d0:	d152      	bne.n	800c178 <strcmp_unaligned+0x128>
 800c0d2:	780d      	ldrb	r5, [r1, #0]
 800c0d4:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800c0d8:	e055      	b.n	800c186 <strcmp_unaligned+0x136>
 800c0da:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800c0de:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800c0e2:	e050      	b.n	800c186 <strcmp_unaligned+0x136>
 800c0e4:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 800c0e8:	eba4 0302 	sub.w	r3, r4, r2
 800c0ec:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c0f0:	ea23 0304 	bic.w	r3, r3, r4
 800c0f4:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 800c0f8:	d117      	bne.n	800c12a <strcmp_unaligned+0xda>
 800c0fa:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800c0fe:	bf08      	it	eq
 800c100:	f851 5b04 	ldreq.w	r5, [r1], #4
 800c104:	d107      	bne.n	800c116 <strcmp_unaligned+0xc6>
 800c106:	ea8c 0c04 	eor.w	ip, ip, r4
 800c10a:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 800c10e:	d108      	bne.n	800c122 <strcmp_unaligned+0xd2>
 800c110:	f850 4b04 	ldr.w	r4, [r0], #4
 800c114:	e7e6      	b.n	800c0e4 <strcmp_unaligned+0x94>
 800c116:	041b      	lsls	r3, r3, #16
 800c118:	d12e      	bne.n	800c178 <strcmp_unaligned+0x128>
 800c11a:	880d      	ldrh	r5, [r1, #0]
 800c11c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c120:	e031      	b.n	800c186 <strcmp_unaligned+0x136>
 800c122:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800c126:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c12a:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800c12e:	e02a      	b.n	800c186 <strcmp_unaligned+0x136>
 800c130:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 800c134:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 800c138:	eba4 0302 	sub.w	r3, r4, r2
 800c13c:	ea23 0304 	bic.w	r3, r3, r4
 800c140:	d10d      	bne.n	800c15e <strcmp_unaligned+0x10e>
 800c142:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800c146:	bf08      	it	eq
 800c148:	f851 5b04 	ldreq.w	r5, [r1], #4
 800c14c:	d10a      	bne.n	800c164 <strcmp_unaligned+0x114>
 800c14e:	ea8c 0c04 	eor.w	ip, ip, r4
 800c152:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 800c156:	d10a      	bne.n	800c16e <strcmp_unaligned+0x11e>
 800c158:	f850 4b04 	ldr.w	r4, [r0], #4
 800c15c:	e7e8      	b.n	800c130 <strcmp_unaligned+0xe0>
 800c15e:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800c162:	e010      	b.n	800c186 <strcmp_unaligned+0x136>
 800c164:	f014 0fff 	tst.w	r4, #255	; 0xff
 800c168:	d006      	beq.n	800c178 <strcmp_unaligned+0x128>
 800c16a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c16e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800c172:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800c176:	e006      	b.n	800c186 <strcmp_unaligned+0x136>
 800c178:	f04f 0000 	mov.w	r0, #0
 800c17c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c180:	f85d 5b04 	ldr.w	r5, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 800c18a:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 800c18e:	2801      	cmp	r0, #1
 800c190:	bf28      	it	cs
 800c192:	4290      	cmpcs	r0, r2
 800c194:	bf04      	itt	eq
 800c196:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 800c19a:	0a2d      	lsreq	r5, r5, #8
 800c19c:	d0f3      	beq.n	800c186 <strcmp_unaligned+0x136>
 800c19e:	eba2 0000 	sub.w	r0, r2, r0
 800c1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1a6:	f85d 5b04 	ldr.w	r5, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	0000      	movs	r0, r0
	...

0800c1b0 <strcpy>:
 800c1b0:	ea80 0201 	eor.w	r2, r0, r1
 800c1b4:	4684      	mov	ip, r0
 800c1b6:	f012 0f03 	tst.w	r2, #3
 800c1ba:	d14f      	bne.n	800c25c <strcpy+0xac>
 800c1bc:	f011 0f03 	tst.w	r1, #3
 800c1c0:	d132      	bne.n	800c228 <strcpy+0x78>
 800c1c2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800c1c6:	f011 0f04 	tst.w	r1, #4
 800c1ca:	f851 3b04 	ldr.w	r3, [r1], #4
 800c1ce:	d00b      	beq.n	800c1e8 <strcpy+0x38>
 800c1d0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800c1d4:	439a      	bics	r2, r3
 800c1d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c1da:	bf04      	itt	eq
 800c1dc:	f84c 3b04 	streq.w	r3, [ip], #4
 800c1e0:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c1e4:	d116      	bne.n	800c214 <strcpy+0x64>
 800c1e6:	bf00      	nop
 800c1e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800c1ec:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800c1f0:	439a      	bics	r2, r3
 800c1f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c1f6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800c1fa:	d10b      	bne.n	800c214 <strcpy+0x64>
 800c1fc:	f84c 3b04 	str.w	r3, [ip], #4
 800c200:	43a2      	bics	r2, r4
 800c202:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c206:	bf04      	itt	eq
 800c208:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c20c:	f84c 4b04 	streq.w	r4, [ip], #4
 800c210:	d0ea      	beq.n	800c1e8 <strcpy+0x38>
 800c212:	4623      	mov	r3, r4
 800c214:	f80c 3b01 	strb.w	r3, [ip], #1
 800c218:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c21c:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c220:	d1f8      	bne.n	800c214 <strcpy+0x64>
 800c222:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	f011 0f01 	tst.w	r1, #1
 800c22c:	d006      	beq.n	800c23c <strcpy+0x8c>
 800c22e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c232:	f80c 2b01 	strb.w	r2, [ip], #1
 800c236:	2a00      	cmp	r2, #0
 800c238:	bf08      	it	eq
 800c23a:	4770      	bxeq	lr
 800c23c:	f011 0f02 	tst.w	r1, #2
 800c240:	d0bf      	beq.n	800c1c2 <strcpy+0x12>
 800c242:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c246:	f012 0fff 	tst.w	r2, #255	; 0xff
 800c24a:	bf16      	itet	ne
 800c24c:	f82c 2b02 	strhne.w	r2, [ip], #2
 800c250:	f88c 2000 	strbeq.w	r2, [ip]
 800c254:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800c258:	d1b3      	bne.n	800c1c2 <strcpy+0x12>
 800c25a:	4770      	bx	lr
 800c25c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c260:	f80c 2b01 	strb.w	r2, [ip], #1
 800c264:	2a00      	cmp	r2, #0
 800c266:	d1f9      	bne.n	800c25c <strcpy+0xac>
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	0000      	movs	r0, r0
	...

0800c270 <strlen>:
 800c270:	f020 0103 	bic.w	r1, r0, #3
 800c274:	f010 0003 	ands.w	r0, r0, #3
 800c278:	f1c0 0000 	rsb	r0, r0, #0
 800c27c:	f851 3b04 	ldr.w	r3, [r1], #4
 800c280:	f100 0c04 	add.w	ip, r0, #4
 800c284:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800c288:	f06f 0200 	mvn.w	r2, #0
 800c28c:	bf1c      	itt	ne
 800c28e:	fa22 f20c 	lsrne.w	r2, r2, ip
 800c292:	4313      	orrne	r3, r2
 800c294:	f04f 0c01 	mov.w	ip, #1
 800c298:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800c29c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800c2a0:	eba3 020c 	sub.w	r2, r3, ip
 800c2a4:	ea22 0203 	bic.w	r2, r2, r3
 800c2a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800c2ac:	bf04      	itt	eq
 800c2ae:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c2b2:	3004      	addeq	r0, #4
 800c2b4:	d0f4      	beq.n	800c2a0 <strlen+0x30>
 800c2b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c2ba:	bf1f      	itttt	ne
 800c2bc:	3001      	addne	r0, #1
 800c2be:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800c2c2:	3001      	addne	r0, #1
 800c2c4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800c2c8:	bf18      	it	ne
 800c2ca:	3001      	addne	r0, #1
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop

0800c2d0 <strncmp>:
 800c2d0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800c2d4:	2a00      	cmp	r2, #0
 800c2d6:	d044      	beq.n	800c362 <strncmp+0x92>
 800c2d8:	ea41 0300 	orr.w	r3, r1, r0
 800c2dc:	f013 0303 	ands.w	r3, r3, #3
 800c2e0:	d12c      	bne.n	800c33c <strncmp+0x6c>
 800c2e2:	2a03      	cmp	r2, #3
 800c2e4:	d92a      	bls.n	800c33c <strncmp+0x6c>
 800c2e6:	6804      	ldr	r4, [r0, #0]
 800c2e8:	680d      	ldr	r5, [r1, #0]
 800c2ea:	42ac      	cmp	r4, r5
 800c2ec:	d126      	bne.n	800c33c <strncmp+0x6c>
 800c2ee:	3a04      	subs	r2, #4
 800c2f0:	d037      	beq.n	800c362 <strncmp+0x92>
 800c2f2:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 800c2f6:	ea25 0404 	bic.w	r4, r5, r4
 800c2fa:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800c2fe:	bf04      	itt	eq
 800c300:	460c      	moveq	r4, r1
 800c302:	4605      	moveq	r5, r0
 800c304:	d011      	beq.n	800c32a <strncmp+0x5a>
 800c306:	e034      	b.n	800c372 <strncmp+0xa2>
 800c308:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800c30c:	4635      	mov	r5, r6
 800c30e:	f851 cf04 	ldr.w	ip, [r1, #4]!
 800c312:	463c      	mov	r4, r7
 800c314:	f1a3 3801 	sub.w	r8, r3, #16843009	; 0x1010101
 800c318:	4563      	cmp	r3, ip
 800c31a:	ea28 0803 	bic.w	r8, r8, r3
 800c31e:	d109      	bne.n	800c334 <strncmp+0x64>
 800c320:	3a04      	subs	r2, #4
 800c322:	d01e      	beq.n	800c362 <strncmp+0x92>
 800c324:	f018 3f80 	tst.w	r8, #2155905152	; 0x80808080
 800c328:	d119      	bne.n	800c35e <strncmp+0x8e>
 800c32a:	1d2e      	adds	r6, r5, #4
 800c32c:	1d27      	adds	r7, r4, #4
 800c32e:	2a03      	cmp	r2, #3
 800c330:	d8ea      	bhi.n	800c308 <strncmp+0x38>
 800c332:	b1d2      	cbz	r2, 800c36a <strncmp+0x9a>
 800c334:	3a01      	subs	r2, #1
 800c336:	4639      	mov	r1, r7
 800c338:	4630      	mov	r0, r6
 800c33a:	e000      	b.n	800c33e <strncmp+0x6e>
 800c33c:	3a01      	subs	r2, #1
 800c33e:	7803      	ldrb	r3, [r0, #0]
 800c340:	780c      	ldrb	r4, [r1, #0]
 800c342:	42a3      	cmp	r3, r4
 800c344:	d113      	bne.n	800c36e <strncmp+0x9e>
 800c346:	b162      	cbz	r2, 800c362 <strncmp+0x92>
 800c348:	b19b      	cbz	r3, 800c372 <strncmp+0xa2>
 800c34a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c34e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c352:	42a3      	cmp	r3, r4
 800c354:	d10b      	bne.n	800c36e <strncmp+0x9e>
 800c356:	2a01      	cmp	r2, #1
 800c358:	f102 32ff 	add.w	r2, r2, #4294967295
 800c35c:	d1f4      	bne.n	800c348 <strncmp+0x78>
 800c35e:	2000      	movs	r0, #0
 800c360:	e000      	b.n	800c364 <strncmp+0x94>
 800c362:	4610      	mov	r0, r2
 800c364:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800c368:	4770      	bx	lr
 800c36a:	792b      	ldrb	r3, [r5, #4]
 800c36c:	7924      	ldrb	r4, [r4, #4]
 800c36e:	1b18      	subs	r0, r3, r4
 800c370:	e7f8      	b.n	800c364 <strncmp+0x94>
 800c372:	4618      	mov	r0, r3
 800c374:	e7f6      	b.n	800c364 <strncmp+0x94>
 800c376:	bf00      	nop
	...

0800c380 <strncpy>:
 800c380:	ea41 0300 	orr.w	r3, r1, r0
 800c384:	f013 0f03 	tst.w	r3, #3
 800c388:	460b      	mov	r3, r1
 800c38a:	b470      	push	{r4, r5, r6}
 800c38c:	bf14      	ite	ne
 800c38e:	2500      	movne	r5, #0
 800c390:	2501      	moveq	r5, #1
 800c392:	2a03      	cmp	r2, #3
 800c394:	bf94      	ite	ls
 800c396:	2500      	movls	r5, #0
 800c398:	f005 0501 	andhi.w	r5, r5, #1
 800c39c:	4604      	mov	r4, r0
 800c39e:	b17d      	cbz	r5, 800c3c0 <strncpy+0x40>
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	f853 5b04 	ldr.w	r5, [r3], #4
 800c3a6:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800c3aa:	ea26 0605 	bic.w	r6, r6, r5
 800c3ae:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 800c3b2:	d105      	bne.n	800c3c0 <strncpy+0x40>
 800c3b4:	3a04      	subs	r2, #4
 800c3b6:	f844 5b04 	str.w	r5, [r4], #4
 800c3ba:	2a03      	cmp	r2, #3
 800c3bc:	d8f0      	bhi.n	800c3a0 <strncpy+0x20>
 800c3be:	4619      	mov	r1, r3
 800c3c0:	b1a2      	cbz	r2, 800c3ec <strncpy+0x6c>
 800c3c2:	780d      	ldrb	r5, [r1, #0]
 800c3c4:	1e53      	subs	r3, r2, #1
 800c3c6:	f804 5b01 	strb.w	r5, [r4], #1
 800c3ca:	4622      	mov	r2, r4
 800c3cc:	b145      	cbz	r5, 800c3e0 <strncpy+0x60>
 800c3ce:	b16b      	cbz	r3, 800c3ec <strncpy+0x6c>
 800c3d0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	f802 5b01 	strb.w	r5, [r2], #1
 800c3da:	4614      	mov	r4, r2
 800c3dc:	2d00      	cmp	r5, #0
 800c3de:	d1f6      	bne.n	800c3ce <strncpy+0x4e>
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	b11b      	cbz	r3, 800c3ec <strncpy+0x6c>
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	f804 2b01 	strb.w	r2, [r4], #1
 800c3ea:	d1fb      	bne.n	800c3e4 <strncpy+0x64>
 800c3ec:	bc70      	pop	{r4, r5, r6}
 800c3ee:	4770      	bx	lr

0800c3f0 <_svfprintf_r>:
 800c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	b0c9      	sub	sp, #292	; 0x124
 800c3f6:	468b      	mov	fp, r1
 800c3f8:	4692      	mov	sl, r2
 800c3fa:	9311      	str	r3, [sp, #68]	; 0x44
 800c3fc:	9010      	str	r0, [sp, #64]	; 0x40
 800c3fe:	f003 fc6b 	bl	800fcd8 <_localeconv_r>
 800c402:	2300      	movs	r3, #0
 800c404:	2200      	movs	r2, #0
 800c406:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 800c40a:	6800      	ldr	r0, [r0, #0]
 800c40c:	9019      	str	r0, [sp, #100]	; 0x64
 800c40e:	f7ff ff2f 	bl	800c270 <strlen>
 800c412:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c416:	061d      	lsls	r5, r3, #24
 800c418:	901a      	str	r0, [sp, #104]	; 0x68
 800c41a:	d504      	bpl.n	800c426 <_svfprintf_r+0x36>
 800c41c:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c420:	2b00      	cmp	r3, #0
 800c422:	f001 801f 	beq.w	800d464 <_svfprintf_r+0x1074>
 800c426:	ad3d      	add	r5, sp, #244	; 0xf4
 800c428:	9509      	str	r5, [sp, #36]	; 0x24
 800c42a:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 800c42e:	9508      	str	r5, [sp, #32]
 800c430:	f246 6567 	movw	r5, #26215	; 0x6667
 800c434:	9808      	ldr	r0, [sp, #32]
 800c436:	f2c6 6566 	movt	r5, #26214	; 0x6666
 800c43a:	951e      	str	r5, [sp, #120]	; 0x78
 800c43c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c43e:	2300      	movs	r3, #0
 800c440:	ae23      	add	r6, sp, #140	; 0x8c
 800c442:	9312      	str	r3, [sp, #72]	; 0x48
 800c444:	1a2d      	subs	r5, r5, r0
 800c446:	9521      	str	r5, [sp, #132]	; 0x84
 800c448:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 800c44c:	9320      	str	r3, [sp, #128]	; 0x80
 800c44e:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
 800c452:	931f      	str	r3, [sp, #124]	; 0x7c
 800c454:	930d      	str	r3, [sp, #52]	; 0x34
 800c456:	951b      	str	r5, [sp, #108]	; 0x6c
 800c458:	963d      	str	r6, [sp, #244]	; 0xf4
 800c45a:	933f      	str	r3, [sp, #252]	; 0xfc
 800c45c:	933e      	str	r3, [sp, #248]	; 0xf8
 800c45e:	f89a 3000 	ldrb.w	r3, [sl]
 800c462:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 800c466:	bf18      	it	ne
 800c468:	2201      	movne	r2, #1
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	bf0c      	ite	eq
 800c46e:	2300      	moveq	r3, #0
 800c470:	f002 0301 	andne.w	r3, r2, #1
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 80c6 	beq.w	800c606 <_svfprintf_r+0x216>
 800c47a:	4652      	mov	r2, sl
 800c47c:	4657      	mov	r7, sl
 800c47e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c482:	3701      	adds	r7, #1
 800c484:	1c19      	adds	r1, r3, #0
 800c486:	bf18      	it	ne
 800c488:	2101      	movne	r1, #1
 800c48a:	2b25      	cmp	r3, #37	; 0x25
 800c48c:	bf0c      	ite	eq
 800c48e:	2300      	moveq	r3, #0
 800c490:	f001 0301 	andne.w	r3, r1, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1f2      	bne.n	800c47e <_svfprintf_r+0x8e>
 800c498:	ebb7 080a 	subs.w	r8, r7, sl
 800c49c:	d010      	beq.n	800c4c0 <_svfprintf_r+0xd0>
 800c49e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800c4a0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800c4a2:	3401      	adds	r4, #1
 800c4a4:	f8c6 a000 	str.w	sl, [r6]
 800c4a8:	2c07      	cmp	r4, #7
 800c4aa:	f8c6 8004 	str.w	r8, [r6, #4]
 800c4ae:	4445      	add	r5, r8
 800c4b0:	943e      	str	r4, [sp, #248]	; 0xf8
 800c4b2:	953f      	str	r5, [sp, #252]	; 0xfc
 800c4b4:	f300 808b 	bgt.w	800c5ce <_svfprintf_r+0x1de>
 800c4b8:	3608      	adds	r6, #8
 800c4ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c4bc:	4445      	add	r5, r8
 800c4be:	950d      	str	r5, [sp, #52]	; 0x34
 800c4c0:	783b      	ldrb	r3, [r7, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 808b 	beq.w	800c5de <_svfprintf_r+0x1ee>
 800c4c8:	f107 0a01 	add.w	sl, r7, #1
 800c4cc:	f04f 34ff 	mov.w	r4, #4294967295
 800c4d0:	2720      	movs	r7, #32
 800c4d2:	212b      	movs	r1, #43	; 0x2b
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	930c      	str	r3, [sp, #48]	; 0x30
 800c4d8:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800c4dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c4de:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800c4e2:	f1a3 0220 	sub.w	r2, r3, #32
 800c4e6:	2a58      	cmp	r2, #88	; 0x58
 800c4e8:	f200 8147 	bhi.w	800c77a <_svfprintf_r+0x38a>
 800c4ec:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c4f0:	01450157 	.word	0x01450157
 800c4f4:	02160145 	.word	0x02160145
 800c4f8:	01450145 	.word	0x01450145
 800c4fc:	01450145 	.word	0x01450145
 800c500:	01450145 	.word	0x01450145
 800c504:	008d005e 	.word	0x008d005e
 800c508:	006a0145 	.word	0x006a0145
 800c50c:	0145015f 	.word	0x0145015f
 800c510:	017f017a 	.word	0x017f017a
 800c514:	017f017f 	.word	0x017f017f
 800c518:	017f017f 	.word	0x017f017f
 800c51c:	017f017f 	.word	0x017f017f
 800c520:	017f017f 	.word	0x017f017f
 800c524:	01450145 	.word	0x01450145
 800c528:	01450145 	.word	0x01450145
 800c52c:	01450145 	.word	0x01450145
 800c530:	01450145 	.word	0x01450145
 800c534:	01450145 	.word	0x01450145
 800c538:	024d0192 	.word	0x024d0192
 800c53c:	024d0145 	.word	0x024d0145
 800c540:	01450145 	.word	0x01450145
 800c544:	01450145 	.word	0x01450145
 800c548:	01450283 	.word	0x01450283
 800c54c:	01d30145 	.word	0x01d30145
 800c550:	01450145 	.word	0x01450145
 800c554:	01450145 	.word	0x01450145
 800c558:	023c0145 	.word	0x023c0145
 800c55c:	01450145 	.word	0x01450145
 800c560:	0145021b 	.word	0x0145021b
 800c564:	01450145 	.word	0x01450145
 800c568:	01450145 	.word	0x01450145
 800c56c:	01450145 	.word	0x01450145
 800c570:	01450145 	.word	0x01450145
 800c574:	022b0145 	.word	0x022b0145
 800c578:	024d01f8 	.word	0x024d01f8
 800c57c:	024d024d 	.word	0x024d024d
 800c580:	01f80211 	.word	0x01f80211
 800c584:	01450145 	.word	0x01450145
 800c588:	01450059 	.word	0x01450059
 800c58c:	01e501c4 	.word	0x01e501c4
 800c590:	00590288 	.word	0x00590288
 800c594:	00900145 	.word	0x00900145
 800c598:	01040145 	.word	0x01040145
 800c59c:	01450145 	.word	0x01450145
 800c5a0:	01a5      	.short	0x01a5
 800c5a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c5a4:	f045 0510 	orr.w	r5, r5, #16
 800c5a8:	950a      	str	r5, [sp, #40]	; 0x28
 800c5aa:	e798      	b.n	800c4de <_svfprintf_r+0xee>
 800c5ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c5ae:	682d      	ldr	r5, [r5, #0]
 800c5b0:	950c      	str	r5, [sp, #48]	; 0x30
 800c5b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c5b4:	1d2b      	adds	r3, r5, #4
 800c5b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5b8:	2d00      	cmp	r5, #0
 800c5ba:	f280 8241 	bge.w	800ca40 <_svfprintf_r+0x650>
 800c5be:	426d      	negs	r5, r5
 800c5c0:	9311      	str	r3, [sp, #68]	; 0x44
 800c5c2:	950c      	str	r5, [sp, #48]	; 0x30
 800c5c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c5c6:	f045 0504 	orr.w	r5, r5, #4
 800c5ca:	950a      	str	r5, [sp, #40]	; 0x28
 800c5cc:	e787      	b.n	800c4de <_svfprintf_r+0xee>
 800c5ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c5d0:	4659      	mov	r1, fp
 800c5d2:	aa3d      	add	r2, sp, #244	; 0xf4
 800c5d4:	f004 f904 	bl	80107e0 <__ssprint_r>
 800c5d8:	b940      	cbnz	r0, 800c5ec <_svfprintf_r+0x1fc>
 800c5da:	ae23      	add	r6, sp, #140	; 0x8c
 800c5dc:	e76d      	b.n	800c4ba <_svfprintf_r+0xca>
 800c5de:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800c5e0:	b123      	cbz	r3, 800c5ec <_svfprintf_r+0x1fc>
 800c5e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c5e4:	4659      	mov	r1, fp
 800c5e6:	aa3d      	add	r2, sp, #244	; 0xf4
 800c5e8:	f004 f8fa 	bl	80107e0 <__ssprint_r>
 800c5ec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c5f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c5f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c5f6:	bf18      	it	ne
 800c5f8:	f04f 35ff 	movne.w	r5, #4294967295
 800c5fc:	950d      	str	r5, [sp, #52]	; 0x34
 800c5fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c600:	b049      	add	sp, #292	; 0x124
 800c602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c606:	4657      	mov	r7, sl
 800c608:	e75a      	b.n	800c4c0 <_svfprintf_r+0xd0>
 800c60a:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
 800c60e:	e766      	b.n	800c4de <_svfprintf_r+0xee>
 800c610:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c612:	2500      	movs	r5, #0
 800c614:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
 800c618:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c61a:	6800      	ldr	r0, [r0, #0]
 800c61c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c61e:	1d0f      	adds	r7, r1, #4
 800c620:	9013      	str	r0, [sp, #76]	; 0x4c
 800c622:	2800      	cmp	r0, #0
 800c624:	f000 87af 	beq.w	800d586 <_svfprintf_r+0x1196>
 800c628:	2c00      	cmp	r4, #0
 800c62a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c62c:	f2c0 8767 	blt.w	800d4fe <_svfprintf_r+0x110e>
 800c630:	4629      	mov	r1, r5
 800c632:	4622      	mov	r2, r4
 800c634:	f7fe ffac 	bl	800b590 <memchr>
 800c638:	2800      	cmp	r0, #0
 800c63a:	f000 87d3 	beq.w	800d5e4 <_svfprintf_r+0x11f4>
 800c63e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c640:	9514      	str	r5, [sp, #80]	; 0x50
 800c642:	1a40      	subs	r0, r0, r1
 800c644:	900e      	str	r0, [sp, #56]	; 0x38
 800c646:	42a0      	cmp	r0, r4
 800c648:	f340 8608 	ble.w	800d25c <_svfprintf_r+0xe6c>
 800c64c:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800c650:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800c654:	950b      	str	r5, [sp, #44]	; 0x2c
 800c656:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c658:	9711      	str	r7, [sp, #68]	; 0x44
 800c65a:	940e      	str	r4, [sp, #56]	; 0x38
 800c65c:	9518      	str	r5, [sp, #96]	; 0x60
 800c65e:	b113      	cbz	r3, 800c666 <_svfprintf_r+0x276>
 800c660:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c662:	3501      	adds	r5, #1
 800c664:	950b      	str	r5, [sp, #44]	; 0x2c
 800c666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c668:	f013 0302 	ands.w	r3, r3, #2
 800c66c:	9315      	str	r3, [sp, #84]	; 0x54
 800c66e:	d002      	beq.n	800c676 <_svfprintf_r+0x286>
 800c670:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c672:	3502      	adds	r5, #2
 800c674:	950b      	str	r5, [sp, #44]	; 0x2c
 800c676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c678:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800c67c:	9316      	str	r3, [sp, #88]	; 0x58
 800c67e:	f040 81e1 	bne.w	800ca44 <_svfprintf_r+0x654>
 800c682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c684:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c686:	1a2f      	subs	r7, r5, r0
 800c688:	2f00      	cmp	r7, #0
 800c68a:	f340 81db 	ble.w	800ca44 <_svfprintf_r+0x654>
 800c68e:	2f10      	cmp	r7, #16
 800c690:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800c692:	f340 873b 	ble.w	800d50c <_svfprintf_r+0x111c>
 800c696:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800c698:	f04f 0910 	mov.w	r9, #16
 800c69c:	f8df 8428 	ldr.w	r8, [pc, #1064]	; 800cac8 <_svfprintf_r+0x6d8>
 800c6a0:	4623      	mov	r3, r4
 800c6a2:	4644      	mov	r4, r8
 800c6a4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c6a8:	e002      	b.n	800c6b0 <_svfprintf_r+0x2c0>
 800c6aa:	3f10      	subs	r7, #16
 800c6ac:	2f10      	cmp	r7, #16
 800c6ae:	dd15      	ble.n	800c6dc <_svfprintf_r+0x2ec>
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	e886 0210 	stmia.w	r6, {r4, r9}
 800c6b6:	3510      	adds	r5, #16
 800c6b8:	3608      	adds	r6, #8
 800c6ba:	2b07      	cmp	r3, #7
 800c6bc:	933e      	str	r3, [sp, #248]	; 0xf8
 800c6be:	953f      	str	r5, [sp, #252]	; 0xfc
 800c6c0:	ddf3      	ble.n	800c6aa <_svfprintf_r+0x2ba>
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	4659      	mov	r1, fp
 800c6c6:	aa3d      	add	r2, sp, #244	; 0xf4
 800c6c8:	ae23      	add	r6, sp, #140	; 0x8c
 800c6ca:	f004 f889 	bl	80107e0 <__ssprint_r>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d18c      	bne.n	800c5ec <_svfprintf_r+0x1fc>
 800c6d2:	3f10      	subs	r7, #16
 800c6d4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800c6d6:	2f10      	cmp	r7, #16
 800c6d8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800c6da:	dce9      	bgt.n	800c6b0 <_svfprintf_r+0x2c0>
 800c6dc:	46a0      	mov	r8, r4
 800c6de:	461c      	mov	r4, r3
 800c6e0:	3401      	adds	r4, #1
 800c6e2:	f8c6 8000 	str.w	r8, [r6]
 800c6e6:	2c07      	cmp	r4, #7
 800c6e8:	6077      	str	r7, [r6, #4]
 800c6ea:	443d      	add	r5, r7
 800c6ec:	943e      	str	r4, [sp, #248]	; 0xf8
 800c6ee:	953f      	str	r5, [sp, #252]	; 0xfc
 800c6f0:	f300 8434 	bgt.w	800cf5c <_svfprintf_r+0xb6c>
 800c6f4:	3608      	adds	r6, #8
 800c6f6:	e1a6      	b.n	800ca46 <_svfprintf_r+0x656>
 800c6f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c6fa:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6fc:	06ea      	lsls	r2, r5, #27
 800c6fe:	f140 813c 	bpl.w	800c97a <_svfprintf_r+0x58a>
 800c702:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	3504      	adds	r5, #4
 800c708:	2201      	movs	r2, #1
 800c70a:	1c19      	adds	r1, r3, #0
 800c70c:	9511      	str	r5, [sp, #68]	; 0x44
 800c70e:	bf18      	it	ne
 800c710:	2101      	movne	r1, #1
 800c712:	2000      	movs	r0, #0
 800c714:	f88d 011f 	strb.w	r0, [sp, #287]	; 0x11f
 800c718:	2c00      	cmp	r4, #0
 800c71a:	bfa2      	ittt	ge
 800c71c:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 800c71e:	f025 0580 	bicge.w	r5, r5, #128	; 0x80
 800c722:	950a      	strge	r5, [sp, #40]	; 0x28
 800c724:	2c00      	cmp	r4, #0
 800c726:	bf18      	it	ne
 800c728:	f041 0101 	orrne.w	r1, r1, #1
 800c72c:	2900      	cmp	r1, #0
 800c72e:	f000 82c8 	beq.w	800ccc2 <_svfprintf_r+0x8d2>
 800c732:	2a01      	cmp	r2, #1
 800c734:	f000 8406 	beq.w	800cf44 <_svfprintf_r+0xb54>
 800c738:	2a02      	cmp	r2, #2
 800c73a:	bf18      	it	ne
 800c73c:	aa3d      	addne	r2, sp, #244	; 0xf4
 800c73e:	d101      	bne.n	800c744 <_svfprintf_r+0x354>
 800c740:	e3f0      	b.n	800cf24 <_svfprintf_r+0xb34>
 800c742:	4602      	mov	r2, r0
 800c744:	f003 0107 	and.w	r1, r3, #7
 800c748:	1e50      	subs	r0, r2, #1
 800c74a:	3130      	adds	r1, #48	; 0x30
 800c74c:	08db      	lsrs	r3, r3, #3
 800c74e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c752:	d1f6      	bne.n	800c742 <_svfprintf_r+0x352>
 800c754:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c756:	9013      	str	r0, [sp, #76]	; 0x4c
 800c758:	07ed      	lsls	r5, r5, #31
 800c75a:	f100 84f4 	bmi.w	800d146 <_svfprintf_r+0xd56>
 800c75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c760:	1a1b      	subs	r3, r3, r0
 800c762:	930e      	str	r3, [sp, #56]	; 0x38
 800c764:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c766:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800c76a:	42a5      	cmp	r5, r4
 800c76c:	bfb8      	it	lt
 800c76e:	4625      	movlt	r5, r4
 800c770:	9414      	str	r4, [sp, #80]	; 0x50
 800c772:	950b      	str	r5, [sp, #44]	; 0x2c
 800c774:	2500      	movs	r5, #0
 800c776:	9518      	str	r5, [sp, #96]	; 0x60
 800c778:	e771      	b.n	800c65e <_svfprintf_r+0x26e>
 800c77a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f43f af2e 	beq.w	800c5de <_svfprintf_r+0x1ee>
 800c782:	2501      	movs	r5, #1
 800c784:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
 800c788:	950b      	str	r5, [sp, #44]	; 0x2c
 800c78a:	2300      	movs	r3, #0
 800c78c:	950e      	str	r5, [sp, #56]	; 0x38
 800c78e:	ad33      	add	r5, sp, #204	; 0xcc
 800c790:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800c794:	9513      	str	r5, [sp, #76]	; 0x4c
 800c796:	2300      	movs	r3, #0
 800c798:	9314      	str	r3, [sp, #80]	; 0x50
 800c79a:	9318      	str	r3, [sp, #96]	; 0x60
 800c79c:	e763      	b.n	800c666 <_svfprintf_r+0x276>
 800c79e:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f47f ae9b 	bne.w	800c4de <_svfprintf_r+0xee>
 800c7a8:	f88d 711f 	strb.w	r7, [sp, #287]	; 0x11f
 800c7ac:	e697      	b.n	800c4de <_svfprintf_r+0xee>
 800c7ae:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800c7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c7b4:	f000 813a 	beq.w	800ca2c <_svfprintf_r+0x63c>
 800c7b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c7bc:	2400      	movs	r4, #0
 800c7be:	2a09      	cmp	r2, #9
 800c7c0:	f63f ae8f 	bhi.w	800c4e2 <_svfprintf_r+0xf2>
 800c7c4:	4650      	mov	r0, sl
 800c7c6:	2400      	movs	r4, #0
 800c7c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c7cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c7d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800c7d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c7d8:	2a09      	cmp	r2, #9
 800c7da:	4682      	mov	sl, r0
 800c7dc:	d9f4      	bls.n	800c7c8 <_svfprintf_r+0x3d8>
 800c7de:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800c7e2:	e67e      	b.n	800c4e2 <_svfprintf_r+0xf2>
 800c7e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c7e6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800c7ea:	950a      	str	r5, [sp, #40]	; 0x28
 800c7ec:	e677      	b.n	800c4de <_svfprintf_r+0xee>
 800c7ee:	4650      	mov	r0, sl
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	46b4      	mov	ip, r6
 800c7f4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800c7f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c7fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c800:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800c804:	4682      	mov	sl, r0
 800c806:	2d09      	cmp	r5, #9
 800c808:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 800c80c:	d9f2      	bls.n	800c7f4 <_svfprintf_r+0x404>
 800c80e:	4666      	mov	r6, ip
 800c810:	920c      	str	r2, [sp, #48]	; 0x30
 800c812:	e666      	b.n	800c4e2 <_svfprintf_r+0xf2>
 800c814:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c816:	9317      	str	r3, [sp, #92]	; 0x5c
 800c818:	f045 0510 	orr.w	r5, r5, #16
 800c81c:	950a      	str	r5, [sp, #40]	; 0x28
 800c81e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c820:	06e8      	lsls	r0, r5, #27
 800c822:	d561      	bpl.n	800c8e8 <_svfprintf_r+0x4f8>
 800c824:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c826:	682b      	ldr	r3, [r5, #0]
 800c828:	3504      	adds	r5, #4
 800c82a:	9511      	str	r5, [sp, #68]	; 0x44
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	db67      	blt.n	800c900 <_svfprintf_r+0x510>
 800c830:	bf0c      	ite	eq
 800c832:	2100      	moveq	r1, #0
 800c834:	2101      	movne	r1, #1
 800c836:	2201      	movs	r2, #1
 800c838:	e76e      	b.n	800c718 <_svfprintf_r+0x328>
 800c83a:	4d9f      	ldr	r5, [pc, #636]	; (800cab8 <_svfprintf_r+0x6c8>)
 800c83c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c83e:	9520      	str	r5, [sp, #128]	; 0x80
 800c840:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c842:	06eb      	lsls	r3, r5, #27
 800c844:	d575      	bpl.n	800c932 <_svfprintf_r+0x542>
 800c846:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	3504      	adds	r5, #4
 800c84c:	9511      	str	r5, [sp, #68]	; 0x44
 800c84e:	1c19      	adds	r1, r3, #0
 800c850:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c852:	bf18      	it	ne
 800c854:	2101      	movne	r1, #1
 800c856:	2202      	movs	r2, #2
 800c858:	420d      	tst	r5, r1
 800c85a:	f43f af5a 	beq.w	800c712 <_svfprintf_r+0x322>
 800c85e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c860:	2230      	movs	r2, #48	; 0x30
 800c862:	2101      	movs	r1, #1
 800c864:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 800c868:	2202      	movs	r2, #2
 800c86a:	f88d 511d 	strb.w	r5, [sp, #285]	; 0x11d
 800c86e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c870:	f045 0502 	orr.w	r5, r5, #2
 800c874:	950a      	str	r5, [sp, #40]	; 0x28
 800c876:	e74c      	b.n	800c712 <_svfprintf_r+0x322>
 800c878:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c87a:	06e8      	lsls	r0, r5, #27
 800c87c:	f100 83a3 	bmi.w	800cfc6 <_svfprintf_r+0xbd6>
 800c880:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c882:	0669      	lsls	r1, r5, #25
 800c884:	f140 839f 	bpl.w	800cfc6 <_svfprintf_r+0xbd6>
 800c888:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c88a:	682b      	ldr	r3, [r5, #0]
 800c88c:	3504      	adds	r5, #4
 800c88e:	9511      	str	r5, [sp, #68]	; 0x44
 800c890:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c892:	801d      	strh	r5, [r3, #0]
 800c894:	e5e3      	b.n	800c45e <_svfprintf_r+0x6e>
 800c896:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c898:	9317      	str	r3, [sp, #92]	; 0x5c
 800c89a:	f045 0510 	orr.w	r5, r5, #16
 800c89e:	950a      	str	r5, [sp, #40]	; 0x28
 800c8a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c8a2:	f015 0110 	ands.w	r1, r5, #16
 800c8a6:	d00d      	beq.n	800c8c4 <_svfprintf_r+0x4d4>
 800c8a8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	3504      	adds	r5, #4
 800c8b0:	9511      	str	r5, [sp, #68]	; 0x44
 800c8b2:	1a99      	subs	r1, r3, r2
 800c8b4:	bf18      	it	ne
 800c8b6:	2101      	movne	r1, #1
 800c8b8:	e72b      	b.n	800c712 <_svfprintf_r+0x322>
 800c8ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c8bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c8be:	f015 0110 	ands.w	r1, r5, #16
 800c8c2:	d1f1      	bne.n	800c8a8 <_svfprintf_r+0x4b8>
 800c8c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c8c6:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 800c8ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c8cc:	bf1a      	itte	ne
 800c8ce:	460a      	movne	r2, r1
 800c8d0:	882b      	ldrhne	r3, [r5, #0]
 800c8d2:	682b      	ldreq	r3, [r5, #0]
 800c8d4:	3504      	adds	r5, #4
 800c8d6:	9511      	str	r5, [sp, #68]	; 0x44
 800c8d8:	1c19      	adds	r1, r3, #0
 800c8da:	bf18      	it	ne
 800c8dc:	2101      	movne	r1, #1
 800c8de:	e718      	b.n	800c712 <_svfprintf_r+0x322>
 800c8e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c8e2:	9317      	str	r3, [sp, #92]	; 0x5c
 800c8e4:	06e8      	lsls	r0, r5, #27
 800c8e6:	d49d      	bmi.n	800c824 <_svfprintf_r+0x434>
 800c8e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c8ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c8ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c8f0:	bf0c      	ite	eq
 800c8f2:	682b      	ldreq	r3, [r5, #0]
 800c8f4:	f9b5 3000 	ldrshne.w	r3, [r5]
 800c8f8:	3504      	adds	r5, #4
 800c8fa:	9511      	str	r5, [sp, #68]	; 0x44
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	da97      	bge.n	800c830 <_svfprintf_r+0x440>
 800c900:	425b      	negs	r3, r3
 800c902:	1c19      	adds	r1, r3, #0
 800c904:	bf18      	it	ne
 800c906:	2101      	movne	r1, #1
 800c908:	222d      	movs	r2, #45	; 0x2d
 800c90a:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 800c90e:	2201      	movs	r2, #1
 800c910:	e702      	b.n	800c718 <_svfprintf_r+0x328>
 800c912:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c914:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800c918:	950a      	str	r5, [sp, #40]	; 0x28
 800c91a:	e5e0      	b.n	800c4de <_svfprintf_r+0xee>
 800c91c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c91e:	f045 0501 	orr.w	r5, r5, #1
 800c922:	950a      	str	r5, [sp, #40]	; 0x28
 800c924:	e5db      	b.n	800c4de <_svfprintf_r+0xee>
 800c926:	4d65      	ldr	r5, [pc, #404]	; (800cabc <_svfprintf_r+0x6cc>)
 800c928:	9317      	str	r3, [sp, #92]	; 0x5c
 800c92a:	9520      	str	r5, [sp, #128]	; 0x80
 800c92c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c92e:	06eb      	lsls	r3, r5, #27
 800c930:	d489      	bmi.n	800c846 <_svfprintf_r+0x456>
 800c932:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c934:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c938:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c93a:	bf0c      	ite	eq
 800c93c:	682b      	ldreq	r3, [r5, #0]
 800c93e:	882b      	ldrhne	r3, [r5, #0]
 800c940:	3504      	adds	r5, #4
 800c942:	9511      	str	r5, [sp, #68]	; 0x44
 800c944:	e783      	b.n	800c84e <_svfprintf_r+0x45e>
 800c946:	9317      	str	r3, [sp, #92]	; 0x5c
 800c948:	2501      	movs	r5, #1
 800c94a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c94c:	950b      	str	r5, [sp, #44]	; 0x2c
 800c94e:	1d1d      	adds	r5, r3, #4
 800c950:	9511      	str	r5, [sp, #68]	; 0x44
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	2501      	movs	r5, #1
 800c956:	2300      	movs	r3, #0
 800c958:	950e      	str	r5, [sp, #56]	; 0x38
 800c95a:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800c95e:	ad33      	add	r5, sp, #204	; 0xcc
 800c960:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
 800c964:	9513      	str	r5, [sp, #76]	; 0x4c
 800c966:	e716      	b.n	800c796 <_svfprintf_r+0x3a6>
 800c968:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c96a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c96c:	f045 0510 	orr.w	r5, r5, #16
 800c970:	950a      	str	r5, [sp, #40]	; 0x28
 800c972:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c974:	06ea      	lsls	r2, r5, #27
 800c976:	f53f aec4 	bmi.w	800c702 <_svfprintf_r+0x312>
 800c97a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c97c:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c980:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c982:	bf14      	ite	ne
 800c984:	882b      	ldrhne	r3, [r5, #0]
 800c986:	682b      	ldreq	r3, [r5, #0]
 800c988:	e6bd      	b.n	800c706 <_svfprintf_r+0x316>
 800c98a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c98c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c98e:	1deb      	adds	r3, r5, #7
 800c990:	f023 0307 	bic.w	r3, r3, #7
 800c994:	f103 0508 	add.w	r5, r3, #8
 800c998:	9511      	str	r5, [sp, #68]	; 0x44
 800c99a:	f8d3 8000 	ldr.w	r8, [r3]
 800c99e:	685f      	ldr	r7, [r3, #4]
 800c9a0:	4640      	mov	r0, r8
 800c9a2:	4642      	mov	r2, r8
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	463b      	mov	r3, r7
 800c9a8:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 800c9ac:	f003 fe88 	bl	80106c0 <__fpclassifyd>
 800c9b0:	2801      	cmp	r0, #1
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	f040 83d4 	bne.w	800d160 <_svfprintf_r+0xd70>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	4639      	mov	r1, r7
 800c9be:	f005 fa87 	bl	8011ed0 <__aeabi_dcmplt>
 800c9c2:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800c9c6:	b110      	cbz	r0, 800c9ce <_svfprintf_r+0x5de>
 800c9c8:	232d      	movs	r3, #45	; 0x2d
 800c9ca:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800c9ce:	2503      	movs	r5, #3
 800c9d0:	950b      	str	r5, [sp, #44]	; 0x2c
 800c9d2:	2500      	movs	r5, #0
 800c9d4:	9514      	str	r5, [sp, #80]	; 0x50
 800c9d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c9d8:	4a39      	ldr	r2, [pc, #228]	; (800cac0 <_svfprintf_r+0x6d0>)
 800c9da:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800c9de:	4939      	ldr	r1, [pc, #228]	; (800cac4 <_svfprintf_r+0x6d4>)
 800c9e0:	950a      	str	r5, [sp, #40]	; 0x28
 800c9e2:	2503      	movs	r5, #3
 800c9e4:	950e      	str	r5, [sp, #56]	; 0x38
 800c9e6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c9e8:	2d47      	cmp	r5, #71	; 0x47
 800c9ea:	bfd8      	it	le
 800c9ec:	4611      	movle	r1, r2
 800c9ee:	2500      	movs	r5, #0
 800c9f0:	9113      	str	r1, [sp, #76]	; 0x4c
 800c9f2:	9518      	str	r5, [sp, #96]	; 0x60
 800c9f4:	e633      	b.n	800c65e <_svfprintf_r+0x26e>
 800c9f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c9f8:	f045 0508 	orr.w	r5, r5, #8
 800c9fc:	950a      	str	r5, [sp, #40]	; 0x28
 800c9fe:	e56e      	b.n	800c4de <_svfprintf_r+0xee>
 800ca00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca02:	2078      	movs	r0, #120	; 0x78
 800ca04:	2230      	movs	r2, #48	; 0x30
 800ca06:	9017      	str	r0, [sp, #92]	; 0x5c
 800ca08:	1d1d      	adds	r5, r3, #4
 800ca0a:	9511      	str	r5, [sp, #68]	; 0x44
 800ca0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f045 0502 	orr.w	r5, r5, #2
 800ca14:	950a      	str	r5, [sp, #40]	; 0x28
 800ca16:	4d28      	ldr	r5, [pc, #160]	; (800cab8 <_svfprintf_r+0x6c8>)
 800ca18:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 800ca1c:	2202      	movs	r2, #2
 800ca1e:	1c19      	adds	r1, r3, #0
 800ca20:	f88d 011d 	strb.w	r0, [sp, #285]	; 0x11d
 800ca24:	bf18      	it	ne
 800ca26:	2101      	movne	r1, #1
 800ca28:	9520      	str	r5, [sp, #128]	; 0x80
 800ca2a:	e672      	b.n	800c712 <_svfprintf_r+0x322>
 800ca2c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ca2e:	1d2b      	adds	r3, r5, #4
 800ca30:	682c      	ldr	r4, [r5, #0]
 800ca32:	2c00      	cmp	r4, #0
 800ca34:	bfbc      	itt	lt
 800ca36:	9311      	strlt	r3, [sp, #68]	; 0x44
 800ca38:	f04f 34ff 	movlt.w	r4, #4294967295
 800ca3c:	f6ff ad4f 	blt.w	800c4de <_svfprintf_r+0xee>
 800ca40:	9311      	str	r3, [sp, #68]	; 0x44
 800ca42:	e54c      	b.n	800c4de <_svfprintf_r+0xee>
 800ca44:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800ca46:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800ca4a:	b16b      	cbz	r3, 800ca68 <_svfprintf_r+0x678>
 800ca4c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800ca4e:	ab47      	add	r3, sp, #284	; 0x11c
 800ca50:	3303      	adds	r3, #3
 800ca52:	6033      	str	r3, [r6, #0]
 800ca54:	3401      	adds	r4, #1
 800ca56:	2301      	movs	r3, #1
 800ca58:	2c07      	cmp	r4, #7
 800ca5a:	6073      	str	r3, [r6, #4]
 800ca5c:	441d      	add	r5, r3
 800ca5e:	943e      	str	r4, [sp, #248]	; 0xf8
 800ca60:	953f      	str	r5, [sp, #252]	; 0xfc
 800ca62:	f300 81f8 	bgt.w	800ce56 <_svfprintf_r+0xa66>
 800ca66:	3608      	adds	r6, #8
 800ca68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca6a:	b163      	cbz	r3, 800ca86 <_svfprintf_r+0x696>
 800ca6c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800ca6e:	ab47      	add	r3, sp, #284	; 0x11c
 800ca70:	6033      	str	r3, [r6, #0]
 800ca72:	2302      	movs	r3, #2
 800ca74:	3401      	adds	r4, #1
 800ca76:	6073      	str	r3, [r6, #4]
 800ca78:	2c07      	cmp	r4, #7
 800ca7a:	441d      	add	r5, r3
 800ca7c:	943e      	str	r4, [sp, #248]	; 0xf8
 800ca7e:	953f      	str	r5, [sp, #252]	; 0xfc
 800ca80:	f300 81f4 	bgt.w	800ce6c <_svfprintf_r+0xa7c>
 800ca84:	3608      	adds	r6, #8
 800ca86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ca88:	2b80      	cmp	r3, #128	; 0x80
 800ca8a:	f000 812e 	beq.w	800ccea <_svfprintf_r+0x8fa>
 800ca8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca90:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ca92:	1a1f      	subs	r7, r3, r0
 800ca94:	2f00      	cmp	r7, #0
 800ca96:	dd42      	ble.n	800cb1e <_svfprintf_r+0x72e>
 800ca98:	2f10      	cmp	r7, #16
 800ca9a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800ca9c:	bfd8      	it	le
 800ca9e:	f8df 802c 	ldrle.w	r8, [pc, #44]	; 800cacc <_svfprintf_r+0x6dc>
 800caa2:	dd31      	ble.n	800cb08 <_svfprintf_r+0x718>
 800caa4:	f8df 8024 	ldr.w	r8, [pc, #36]	; 800cacc <_svfprintf_r+0x6dc>
 800caa8:	4623      	mov	r3, r4
 800caaa:	f04f 0910 	mov.w	r9, #16
 800caae:	4644      	mov	r4, r8
 800cab0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800cab4:	e00f      	b.n	800cad6 <_svfprintf_r+0x6e6>
 800cab6:	bf00      	nop
 800cab8:	08014b04 	.word	0x08014b04
 800cabc:	08014af0 	.word	0x08014af0
 800cac0:	08014ae0 	.word	0x08014ae0
 800cac4:	08014ae4 	.word	0x08014ae4
 800cac8:	08014400 	.word	0x08014400
 800cacc:	08014410 	.word	0x08014410
 800cad0:	3f10      	subs	r7, #16
 800cad2:	2f10      	cmp	r7, #16
 800cad4:	dd16      	ble.n	800cb04 <_svfprintf_r+0x714>
 800cad6:	3301      	adds	r3, #1
 800cad8:	e886 0210 	stmia.w	r6, {r4, r9}
 800cadc:	3510      	adds	r5, #16
 800cade:	3608      	adds	r6, #8
 800cae0:	2b07      	cmp	r3, #7
 800cae2:	933e      	str	r3, [sp, #248]	; 0xf8
 800cae4:	953f      	str	r5, [sp, #252]	; 0xfc
 800cae6:	ddf3      	ble.n	800cad0 <_svfprintf_r+0x6e0>
 800cae8:	4640      	mov	r0, r8
 800caea:	4659      	mov	r1, fp
 800caec:	aa3d      	add	r2, sp, #244	; 0xf4
 800caee:	ae23      	add	r6, sp, #140	; 0x8c
 800caf0:	f003 fe76 	bl	80107e0 <__ssprint_r>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f47f ad79 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cafa:	3f10      	subs	r7, #16
 800cafc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cafe:	2f10      	cmp	r7, #16
 800cb00:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800cb02:	dce8      	bgt.n	800cad6 <_svfprintf_r+0x6e6>
 800cb04:	46a0      	mov	r8, r4
 800cb06:	461c      	mov	r4, r3
 800cb08:	3401      	adds	r4, #1
 800cb0a:	f8c6 8000 	str.w	r8, [r6]
 800cb0e:	2c07      	cmp	r4, #7
 800cb10:	6077      	str	r7, [r6, #4]
 800cb12:	443d      	add	r5, r7
 800cb14:	943e      	str	r4, [sp, #248]	; 0xf8
 800cb16:	953f      	str	r5, [sp, #252]	; 0xfc
 800cb18:	f300 8192 	bgt.w	800ce40 <_svfprintf_r+0xa50>
 800cb1c:	3608      	adds	r6, #8
 800cb1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb20:	05ca      	lsls	r2, r1, #23
 800cb22:	d475      	bmi.n	800cc10 <_svfprintf_r+0x820>
 800cb24:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800cb26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb28:	3401      	adds	r4, #1
 800cb2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cb2c:	2c07      	cmp	r4, #7
 800cb2e:	441d      	add	r5, r3
 800cb30:	6073      	str	r3, [r6, #4]
 800cb32:	6030      	str	r0, [r6, #0]
 800cb34:	953f      	str	r5, [sp, #252]	; 0xfc
 800cb36:	943e      	str	r4, [sp, #248]	; 0xf8
 800cb38:	dc5f      	bgt.n	800cbfa <_svfprintf_r+0x80a>
 800cb3a:	3608      	adds	r6, #8
 800cb3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb3e:	074b      	lsls	r3, r1, #29
 800cb40:	d541      	bpl.n	800cbc6 <_svfprintf_r+0x7d6>
 800cb42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb46:	1ad7      	subs	r7, r2, r3
 800cb48:	2f00      	cmp	r7, #0
 800cb4a:	dd3c      	ble.n	800cbc6 <_svfprintf_r+0x7d6>
 800cb4c:	2f10      	cmp	r7, #16
 800cb4e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800cb50:	bfd8      	it	le
 800cb52:	f8df 8334 	ldrle.w	r8, [pc, #820]	; 800ce88 <_svfprintf_r+0xa98>
 800cb56:	dd24      	ble.n	800cba2 <_svfprintf_r+0x7b2>
 800cb58:	f8df 832c 	ldr.w	r8, [pc, #812]	; 800ce88 <_svfprintf_r+0xa98>
 800cb5c:	4623      	mov	r3, r4
 800cb5e:	f04f 0910 	mov.w	r9, #16
 800cb62:	4644      	mov	r4, r8
 800cb64:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800cb68:	e002      	b.n	800cb70 <_svfprintf_r+0x780>
 800cb6a:	3f10      	subs	r7, #16
 800cb6c:	2f10      	cmp	r7, #16
 800cb6e:	dd16      	ble.n	800cb9e <_svfprintf_r+0x7ae>
 800cb70:	3301      	adds	r3, #1
 800cb72:	e886 0210 	stmia.w	r6, {r4, r9}
 800cb76:	3510      	adds	r5, #16
 800cb78:	3608      	adds	r6, #8
 800cb7a:	2b07      	cmp	r3, #7
 800cb7c:	933e      	str	r3, [sp, #248]	; 0xf8
 800cb7e:	953f      	str	r5, [sp, #252]	; 0xfc
 800cb80:	ddf3      	ble.n	800cb6a <_svfprintf_r+0x77a>
 800cb82:	4640      	mov	r0, r8
 800cb84:	4659      	mov	r1, fp
 800cb86:	aa3d      	add	r2, sp, #244	; 0xf4
 800cb88:	ae23      	add	r6, sp, #140	; 0x8c
 800cb8a:	f003 fe29 	bl	80107e0 <__ssprint_r>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	f47f ad2c 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cb94:	3f10      	subs	r7, #16
 800cb96:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cb98:	2f10      	cmp	r7, #16
 800cb9a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800cb9c:	dce8      	bgt.n	800cb70 <_svfprintf_r+0x780>
 800cb9e:	46a0      	mov	r8, r4
 800cba0:	461c      	mov	r4, r3
 800cba2:	3401      	adds	r4, #1
 800cba4:	f8c6 8000 	str.w	r8, [r6]
 800cba8:	2c07      	cmp	r4, #7
 800cbaa:	6077      	str	r7, [r6, #4]
 800cbac:	443d      	add	r5, r7
 800cbae:	943e      	str	r4, [sp, #248]	; 0xf8
 800cbb0:	953f      	str	r5, [sp, #252]	; 0xfc
 800cbb2:	dd08      	ble.n	800cbc6 <_svfprintf_r+0x7d6>
 800cbb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cbb6:	4659      	mov	r1, fp
 800cbb8:	aa3d      	add	r2, sp, #244	; 0xf4
 800cbba:	f003 fe11 	bl	80107e0 <__ssprint_r>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f47f ad14 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cbc4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cbc6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cbc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbcc:	4291      	cmp	r1, r2
 800cbce:	bfac      	ite	ge
 800cbd0:	1840      	addge	r0, r0, r1
 800cbd2:	1880      	addlt	r0, r0, r2
 800cbd4:	900d      	str	r0, [sp, #52]	; 0x34
 800cbd6:	2d00      	cmp	r5, #0
 800cbd8:	f040 8124 	bne.w	800ce24 <_svfprintf_r+0xa34>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	ae23      	add	r6, sp, #140	; 0x8c
 800cbe0:	933e      	str	r3, [sp, #248]	; 0xf8
 800cbe2:	e43c      	b.n	800c45e <_svfprintf_r+0x6e>
 800cbe4:	46a0      	mov	r8, r4
 800cbe6:	461c      	mov	r4, r3
 800cbe8:	3401      	adds	r4, #1
 800cbea:	f8c6 8000 	str.w	r8, [r6]
 800cbee:	2c07      	cmp	r4, #7
 800cbf0:	6077      	str	r7, [r6, #4]
 800cbf2:	443d      	add	r5, r7
 800cbf4:	943e      	str	r4, [sp, #248]	; 0xf8
 800cbf6:	953f      	str	r5, [sp, #252]	; 0xfc
 800cbf8:	dd9f      	ble.n	800cb3a <_svfprintf_r+0x74a>
 800cbfa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cbfc:	4659      	mov	r1, fp
 800cbfe:	aa3d      	add	r2, sp, #244	; 0xf4
 800cc00:	f003 fdee 	bl	80107e0 <__ssprint_r>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	f47f acf1 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cc0a:	ae23      	add	r6, sp, #140	; 0x8c
 800cc0c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cc0e:	e795      	b.n	800cb3c <_svfprintf_r+0x74c>
 800cc10:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800cc12:	2965      	cmp	r1, #101	; 0x65
 800cc14:	f340 80a6 	ble.w	800cd64 <_svfprintf_r+0x974>
 800cc18:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f005 f94c 	bl	8011ebc <__aeabi_dcmpeq>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	f000 8133 	beq.w	800ce90 <_svfprintf_r+0xaa0>
 800cc2a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	6073      	str	r3, [r6, #4]
 800cc30:	3501      	adds	r5, #1
 800cc32:	3401      	adds	r4, #1
 800cc34:	4b93      	ldr	r3, [pc, #588]	; (800ce84 <_svfprintf_r+0xa94>)
 800cc36:	2c07      	cmp	r4, #7
 800cc38:	6033      	str	r3, [r6, #0]
 800cc3a:	953f      	str	r5, [sp, #252]	; 0xfc
 800cc3c:	943e      	str	r4, [sp, #248]	; 0xf8
 800cc3e:	f300 82b8 	bgt.w	800d1b2 <_svfprintf_r+0xdc2>
 800cc42:	3608      	adds	r6, #8
 800cc44:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800cc46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	dc03      	bgt.n	800cc54 <_svfprintf_r+0x864>
 800cc4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc4e:	07db      	lsls	r3, r3, #31
 800cc50:	f57f af74 	bpl.w	800cb3c <_svfprintf_r+0x74c>
 800cc54:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800cc56:	981a      	ldr	r0, [sp, #104]	; 0x68
 800cc58:	3401      	adds	r4, #1
 800cc5a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cc5c:	2c07      	cmp	r4, #7
 800cc5e:	4405      	add	r5, r0
 800cc60:	6070      	str	r0, [r6, #4]
 800cc62:	6031      	str	r1, [r6, #0]
 800cc64:	953f      	str	r5, [sp, #252]	; 0xfc
 800cc66:	943e      	str	r4, [sp, #248]	; 0xf8
 800cc68:	f300 8303 	bgt.w	800d272 <_svfprintf_r+0xe82>
 800cc6c:	3608      	adds	r6, #8
 800cc6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc70:	1e57      	subs	r7, r2, #1
 800cc72:	2f00      	cmp	r7, #0
 800cc74:	f77f af62 	ble.w	800cb3c <_svfprintf_r+0x74c>
 800cc78:	2f10      	cmp	r7, #16
 800cc7a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800cc7c:	f340 84e0 	ble.w	800d640 <_svfprintf_r+0x1250>
 800cc80:	f8df 8208 	ldr.w	r8, [pc, #520]	; 800ce8c <_svfprintf_r+0xa9c>
 800cc84:	4623      	mov	r3, r4
 800cc86:	f04f 0910 	mov.w	r9, #16
 800cc8a:	4644      	mov	r4, r8
 800cc8c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800cc90:	e002      	b.n	800cc98 <_svfprintf_r+0x8a8>
 800cc92:	3f10      	subs	r7, #16
 800cc94:	2f10      	cmp	r7, #16
 800cc96:	dda5      	ble.n	800cbe4 <_svfprintf_r+0x7f4>
 800cc98:	3301      	adds	r3, #1
 800cc9a:	e886 0210 	stmia.w	r6, {r4, r9}
 800cc9e:	3510      	adds	r5, #16
 800cca0:	3608      	adds	r6, #8
 800cca2:	2b07      	cmp	r3, #7
 800cca4:	933e      	str	r3, [sp, #248]	; 0xf8
 800cca6:	953f      	str	r5, [sp, #252]	; 0xfc
 800cca8:	ddf3      	ble.n	800cc92 <_svfprintf_r+0x8a2>
 800ccaa:	4640      	mov	r0, r8
 800ccac:	4659      	mov	r1, fp
 800ccae:	aa3d      	add	r2, sp, #244	; 0xf4
 800ccb0:	ae23      	add	r6, sp, #140	; 0x8c
 800ccb2:	f003 fd95 	bl	80107e0 <__ssprint_r>
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f47f ac98 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800ccbc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800ccbe:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800ccc0:	e7e7      	b.n	800cc92 <_svfprintf_r+0x8a2>
 800ccc2:	2a00      	cmp	r2, #0
 800ccc4:	f040 80b8 	bne.w	800ce38 <_svfprintf_r+0xa48>
 800ccc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ccca:	07e9      	lsls	r1, r5, #31
 800cccc:	bf5e      	ittt	pl
 800ccce:	920e      	strpl	r2, [sp, #56]	; 0x38
 800ccd0:	ad3d      	addpl	r5, sp, #244	; 0xf4
 800ccd2:	9513      	strpl	r5, [sp, #76]	; 0x4c
 800ccd4:	f57f ad46 	bpl.w	800c764 <_svfprintf_r+0x374>
 800ccd8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800ccda:	2330      	movs	r3, #48	; 0x30
 800ccdc:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 800cce0:	950e      	str	r5, [sp, #56]	; 0x38
 800cce2:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 800cce6:	9513      	str	r5, [sp, #76]	; 0x4c
 800cce8:	e53c      	b.n	800c764 <_svfprintf_r+0x374>
 800ccea:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ccec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccee:	1a47      	subs	r7, r0, r1
 800ccf0:	2f00      	cmp	r7, #0
 800ccf2:	f77f aecc 	ble.w	800ca8e <_svfprintf_r+0x69e>
 800ccf6:	2f10      	cmp	r7, #16
 800ccf8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800ccfa:	bfd8      	it	le
 800ccfc:	f8df 818c 	ldrle.w	r8, [pc, #396]	; 800ce8c <_svfprintf_r+0xa9c>
 800cd00:	dd24      	ble.n	800cd4c <_svfprintf_r+0x95c>
 800cd02:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800ce8c <_svfprintf_r+0xa9c>
 800cd06:	4623      	mov	r3, r4
 800cd08:	f04f 0910 	mov.w	r9, #16
 800cd0c:	4644      	mov	r4, r8
 800cd0e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800cd12:	e002      	b.n	800cd1a <_svfprintf_r+0x92a>
 800cd14:	3f10      	subs	r7, #16
 800cd16:	2f10      	cmp	r7, #16
 800cd18:	dd16      	ble.n	800cd48 <_svfprintf_r+0x958>
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	e886 0210 	stmia.w	r6, {r4, r9}
 800cd20:	3510      	adds	r5, #16
 800cd22:	3608      	adds	r6, #8
 800cd24:	2b07      	cmp	r3, #7
 800cd26:	933e      	str	r3, [sp, #248]	; 0xf8
 800cd28:	953f      	str	r5, [sp, #252]	; 0xfc
 800cd2a:	ddf3      	ble.n	800cd14 <_svfprintf_r+0x924>
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	4659      	mov	r1, fp
 800cd30:	aa3d      	add	r2, sp, #244	; 0xf4
 800cd32:	ae23      	add	r6, sp, #140	; 0x8c
 800cd34:	f003 fd54 	bl	80107e0 <__ssprint_r>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	f47f ac57 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cd3e:	3f10      	subs	r7, #16
 800cd40:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cd42:	2f10      	cmp	r7, #16
 800cd44:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800cd46:	dce8      	bgt.n	800cd1a <_svfprintf_r+0x92a>
 800cd48:	46a0      	mov	r8, r4
 800cd4a:	461c      	mov	r4, r3
 800cd4c:	3401      	adds	r4, #1
 800cd4e:	f8c6 8000 	str.w	r8, [r6]
 800cd52:	2c07      	cmp	r4, #7
 800cd54:	6077      	str	r7, [r6, #4]
 800cd56:	443d      	add	r5, r7
 800cd58:	943e      	str	r4, [sp, #248]	; 0xf8
 800cd5a:	953f      	str	r5, [sp, #252]	; 0xfc
 800cd5c:	f300 81e8 	bgt.w	800d130 <_svfprintf_r+0xd40>
 800cd60:	3608      	adds	r6, #8
 800cd62:	e694      	b.n	800ca8e <_svfprintf_r+0x69e>
 800cd64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd66:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	f340 8196 	ble.w	800d09a <_svfprintf_r+0xcaa>
 800cd6e:	3401      	adds	r4, #1
 800cd70:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cd72:	3501      	adds	r5, #1
 800cd74:	2301      	movs	r3, #1
 800cd76:	2c07      	cmp	r4, #7
 800cd78:	6073      	str	r3, [r6, #4]
 800cd7a:	6031      	str	r1, [r6, #0]
 800cd7c:	953f      	str	r5, [sp, #252]	; 0xfc
 800cd7e:	943e      	str	r4, [sp, #248]	; 0xf8
 800cd80:	f300 81a6 	bgt.w	800d0d0 <_svfprintf_r+0xce0>
 800cd84:	3608      	adds	r6, #8
 800cd86:	3401      	adds	r4, #1
 800cd88:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cd8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cd8c:	2c07      	cmp	r4, #7
 800cd8e:	441d      	add	r5, r3
 800cd90:	6073      	str	r3, [r6, #4]
 800cd92:	6032      	str	r2, [r6, #0]
 800cd94:	943e      	str	r4, [sp, #248]	; 0xf8
 800cd96:	953f      	str	r5, [sp, #252]	; 0xfc
 800cd98:	f300 81a6 	bgt.w	800d0e8 <_svfprintf_r+0xcf8>
 800cd9c:	3608      	adds	r6, #8
 800cd9e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800cda2:	2200      	movs	r2, #0
 800cda4:	2300      	movs	r3, #0
 800cda6:	f005 f889 	bl	8011ebc <__aeabi_dcmpeq>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	f040 80e1 	bne.w	800cf72 <_svfprintf_r+0xb82>
 800cdb0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cdb2:	3401      	adds	r4, #1
 800cdb4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cdb6:	1e42      	subs	r2, r0, #1
 800cdb8:	6072      	str	r2, [r6, #4]
 800cdba:	1c4b      	adds	r3, r1, #1
 800cdbc:	2c07      	cmp	r4, #7
 800cdbe:	6033      	str	r3, [r6, #0]
 800cdc0:	4415      	add	r5, r2
 800cdc2:	943e      	str	r4, [sp, #248]	; 0xf8
 800cdc4:	953f      	str	r5, [sp, #252]	; 0xfc
 800cdc6:	dc21      	bgt.n	800ce0c <_svfprintf_r+0xa1c>
 800cdc8:	3608      	adds	r6, #8
 800cdca:	3401      	adds	r4, #1
 800cdcc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800cdce:	2c07      	cmp	r4, #7
 800cdd0:	ab40      	add	r3, sp, #256	; 0x100
 800cdd2:	4405      	add	r5, r0
 800cdd4:	6033      	str	r3, [r6, #0]
 800cdd6:	6070      	str	r0, [r6, #4]
 800cdd8:	953f      	str	r5, [sp, #252]	; 0xfc
 800cdda:	943e      	str	r4, [sp, #248]	; 0xf8
 800cddc:	f77f aead 	ble.w	800cb3a <_svfprintf_r+0x74a>
 800cde0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cde2:	4659      	mov	r1, fp
 800cde4:	aa3d      	add	r2, sp, #244	; 0xf4
 800cde6:	f003 fcfb 	bl	80107e0 <__ssprint_r>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	f47f abfe 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cdf0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cdf2:	ae23      	add	r6, sp, #140	; 0x8c
 800cdf4:	e6a2      	b.n	800cb3c <_svfprintf_r+0x74c>
 800cdf6:	46a0      	mov	r8, r4
 800cdf8:	461c      	mov	r4, r3
 800cdfa:	3401      	adds	r4, #1
 800cdfc:	f8c6 8000 	str.w	r8, [r6]
 800ce00:	2c07      	cmp	r4, #7
 800ce02:	6077      	str	r7, [r6, #4]
 800ce04:	443d      	add	r5, r7
 800ce06:	943e      	str	r4, [sp, #248]	; 0xf8
 800ce08:	953f      	str	r5, [sp, #252]	; 0xfc
 800ce0a:	dddd      	ble.n	800cdc8 <_svfprintf_r+0x9d8>
 800ce0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce0e:	4659      	mov	r1, fp
 800ce10:	aa3d      	add	r2, sp, #244	; 0xf4
 800ce12:	f003 fce5 	bl	80107e0 <__ssprint_r>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	f47f abe8 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800ce1c:	ae23      	add	r6, sp, #140	; 0x8c
 800ce1e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800ce20:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800ce22:	e7d2      	b.n	800cdca <_svfprintf_r+0x9da>
 800ce24:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce26:	4659      	mov	r1, fp
 800ce28:	aa3d      	add	r2, sp, #244	; 0xf4
 800ce2a:	f003 fcd9 	bl	80107e0 <__ssprint_r>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f43f aed4 	beq.w	800cbdc <_svfprintf_r+0x7ec>
 800ce34:	f7ff bbda 	b.w	800c5ec <_svfprintf_r+0x1fc>
 800ce38:	ad3d      	add	r5, sp, #244	; 0xf4
 800ce3a:	910e      	str	r1, [sp, #56]	; 0x38
 800ce3c:	9513      	str	r5, [sp, #76]	; 0x4c
 800ce3e:	e491      	b.n	800c764 <_svfprintf_r+0x374>
 800ce40:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce42:	4659      	mov	r1, fp
 800ce44:	aa3d      	add	r2, sp, #244	; 0xf4
 800ce46:	f003 fccb 	bl	80107e0 <__ssprint_r>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	f47f abce 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800ce50:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800ce52:	ae23      	add	r6, sp, #140	; 0x8c
 800ce54:	e663      	b.n	800cb1e <_svfprintf_r+0x72e>
 800ce56:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce58:	4659      	mov	r1, fp
 800ce5a:	aa3d      	add	r2, sp, #244	; 0xf4
 800ce5c:	f003 fcc0 	bl	80107e0 <__ssprint_r>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	f47f abc3 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800ce66:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800ce68:	ae23      	add	r6, sp, #140	; 0x8c
 800ce6a:	e5fd      	b.n	800ca68 <_svfprintf_r+0x678>
 800ce6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce6e:	4659      	mov	r1, fp
 800ce70:	aa3d      	add	r2, sp, #244	; 0xf4
 800ce72:	f003 fcb5 	bl	80107e0 <__ssprint_r>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	f47f abb8 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800ce7c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800ce7e:	ae23      	add	r6, sp, #140	; 0x8c
 800ce80:	e601      	b.n	800ca86 <_svfprintf_r+0x696>
 800ce82:	bf00      	nop
 800ce84:	08014b20 	.word	0x08014b20
 800ce88:	08014400 	.word	0x08014400
 800ce8c:	08014410 	.word	0x08014410
 800ce90:	9f44      	ldr	r7, [sp, #272]	; 0x110
 800ce92:	2f00      	cmp	r7, #0
 800ce94:	f340 8198 	ble.w	800d1c8 <_svfprintf_r+0xdd8>
 800ce98:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ce9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce9c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ce9e:	428f      	cmp	r7, r1
 800cea0:	bfa8      	it	ge
 800cea2:	460f      	movge	r7, r1
 800cea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cea6:	2f00      	cmp	r7, #0
 800cea8:	4403      	add	r3, r0
 800ceaa:	930e      	str	r3, [sp, #56]	; 0x38
 800ceac:	dd0a      	ble.n	800cec4 <_svfprintf_r+0xad4>
 800ceae:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800ceb0:	19ed      	adds	r5, r5, r7
 800ceb2:	6030      	str	r0, [r6, #0]
 800ceb4:	3401      	adds	r4, #1
 800ceb6:	6077      	str	r7, [r6, #4]
 800ceb8:	2c07      	cmp	r4, #7
 800ceba:	953f      	str	r5, [sp, #252]	; 0xfc
 800cebc:	943e      	str	r4, [sp, #248]	; 0xf8
 800cebe:	f300 832a 	bgt.w	800d516 <_svfprintf_r+0x1126>
 800cec2:	3608      	adds	r6, #8
 800cec4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cec6:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800ceca:	1bcf      	subs	r7, r1, r7
 800cecc:	2f00      	cmp	r7, #0
 800cece:	f340 808c 	ble.w	800cfea <_svfprintf_r+0xbfa>
 800ced2:	2f10      	cmp	r7, #16
 800ced4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800ced6:	bfd8      	it	le
 800ced8:	f8df 8538 	ldrle.w	r8, [pc, #1336]	; 800d414 <_svfprintf_r+0x1024>
 800cedc:	f340 815d 	ble.w	800d19a <_svfprintf_r+0xdaa>
 800cee0:	f8df 8530 	ldr.w	r8, [pc, #1328]	; 800d414 <_svfprintf_r+0x1024>
 800cee4:	4623      	mov	r3, r4
 800cee6:	f04f 0910 	mov.w	r9, #16
 800ceea:	4644      	mov	r4, r8
 800ceec:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800cef0:	e003      	b.n	800cefa <_svfprintf_r+0xb0a>
 800cef2:	3f10      	subs	r7, #16
 800cef4:	2f10      	cmp	r7, #16
 800cef6:	f340 814e 	ble.w	800d196 <_svfprintf_r+0xda6>
 800cefa:	3301      	adds	r3, #1
 800cefc:	e886 0210 	stmia.w	r6, {r4, r9}
 800cf00:	3510      	adds	r5, #16
 800cf02:	3608      	adds	r6, #8
 800cf04:	2b07      	cmp	r3, #7
 800cf06:	933e      	str	r3, [sp, #248]	; 0xf8
 800cf08:	953f      	str	r5, [sp, #252]	; 0xfc
 800cf0a:	ddf2      	ble.n	800cef2 <_svfprintf_r+0xb02>
 800cf0c:	4640      	mov	r0, r8
 800cf0e:	4659      	mov	r1, fp
 800cf10:	aa3d      	add	r2, sp, #244	; 0xf4
 800cf12:	ae23      	add	r6, sp, #140	; 0x8c
 800cf14:	f003 fc64 	bl	80107e0 <__ssprint_r>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	f47f ab67 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cf1e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cf20:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800cf22:	e7e6      	b.n	800cef2 <_svfprintf_r+0xb02>
 800cf24:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800cf26:	f10d 01f3 	add.w	r1, sp, #243	; 0xf3
 800cf2a:	f003 000f 	and.w	r0, r3, #15
 800cf2e:	460a      	mov	r2, r1
 800cf30:	3901      	subs	r1, #1
 800cf32:	091b      	lsrs	r3, r3, #4
 800cf34:	5c28      	ldrb	r0, [r5, r0]
 800cf36:	7010      	strb	r0, [r2, #0]
 800cf38:	d1f7      	bne.n	800cf2a <_svfprintf_r+0xb3a>
 800cf3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cf3c:	9213      	str	r2, [sp, #76]	; 0x4c
 800cf3e:	1aad      	subs	r5, r5, r2
 800cf40:	950e      	str	r5, [sp, #56]	; 0x38
 800cf42:	e40f      	b.n	800c764 <_svfprintf_r+0x374>
 800cf44:	2b09      	cmp	r3, #9
 800cf46:	f200 80db 	bhi.w	800d100 <_svfprintf_r+0xd10>
 800cf4a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800cf4c:	3330      	adds	r3, #48	; 0x30
 800cf4e:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 800cf52:	950e      	str	r5, [sp, #56]	; 0x38
 800cf54:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 800cf58:	9513      	str	r5, [sp, #76]	; 0x4c
 800cf5a:	e403      	b.n	800c764 <_svfprintf_r+0x374>
 800cf5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cf5e:	4659      	mov	r1, fp
 800cf60:	aa3d      	add	r2, sp, #244	; 0xf4
 800cf62:	f003 fc3d 	bl	80107e0 <__ssprint_r>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	f47f ab40 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cf6c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cf6e:	ae23      	add	r6, sp, #140	; 0x8c
 800cf70:	e569      	b.n	800ca46 <_svfprintf_r+0x656>
 800cf72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf74:	1e57      	subs	r7, r2, #1
 800cf76:	2f00      	cmp	r7, #0
 800cf78:	f77f af27 	ble.w	800cdca <_svfprintf_r+0x9da>
 800cf7c:	2f10      	cmp	r7, #16
 800cf7e:	f8df 8494 	ldr.w	r8, [pc, #1172]	; 800d414 <_svfprintf_r+0x1024>
 800cf82:	f77f af3a 	ble.w	800cdfa <_svfprintf_r+0xa0a>
 800cf86:	4623      	mov	r3, r4
 800cf88:	f04f 0910 	mov.w	r9, #16
 800cf8c:	4644      	mov	r4, r8
 800cf8e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800cf92:	e003      	b.n	800cf9c <_svfprintf_r+0xbac>
 800cf94:	3f10      	subs	r7, #16
 800cf96:	2f10      	cmp	r7, #16
 800cf98:	f77f af2d 	ble.w	800cdf6 <_svfprintf_r+0xa06>
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	e886 0210 	stmia.w	r6, {r4, r9}
 800cfa2:	3510      	adds	r5, #16
 800cfa4:	3608      	adds	r6, #8
 800cfa6:	2b07      	cmp	r3, #7
 800cfa8:	933e      	str	r3, [sp, #248]	; 0xf8
 800cfaa:	953f      	str	r5, [sp, #252]	; 0xfc
 800cfac:	ddf2      	ble.n	800cf94 <_svfprintf_r+0xba4>
 800cfae:	4640      	mov	r0, r8
 800cfb0:	4659      	mov	r1, fp
 800cfb2:	aa3d      	add	r2, sp, #244	; 0xf4
 800cfb4:	ae23      	add	r6, sp, #140	; 0x8c
 800cfb6:	f003 fc13 	bl	80107e0 <__ssprint_r>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	f47f ab16 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cfc0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cfc2:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800cfc4:	e7e6      	b.n	800cf94 <_svfprintf_r+0xba4>
 800cfc6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800cfc8:	682b      	ldr	r3, [r5, #0]
 800cfca:	3504      	adds	r5, #4
 800cfcc:	9511      	str	r5, [sp, #68]	; 0x44
 800cfce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cfd0:	601d      	str	r5, [r3, #0]
 800cfd2:	f7ff ba44 	b.w	800c45e <_svfprintf_r+0x6e>
 800cfd6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cfd8:	4659      	mov	r1, fp
 800cfda:	aa3d      	add	r2, sp, #244	; 0xf4
 800cfdc:	f003 fc00 	bl	80107e0 <__ssprint_r>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	f47f ab03 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800cfe6:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800cfe8:	ae23      	add	r6, sp, #140	; 0x8c
 800cfea:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800cfec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cfee:	429a      	cmp	r2, r3
 800cff0:	dc45      	bgt.n	800d07e <_svfprintf_r+0xc8e>
 800cff2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cff4:	07c1      	lsls	r1, r0, #31
 800cff6:	d442      	bmi.n	800d07e <_svfprintf_r+0xc8e>
 800cff8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cffa:	9818      	ldr	r0, [sp, #96]	; 0x60
 800cffc:	180a      	adds	r2, r1, r0
 800cffe:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d000:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d002:	1ac3      	subs	r3, r0, r3
 800d004:	1a8f      	subs	r7, r1, r2
 800d006:	42bb      	cmp	r3, r7
 800d008:	bfb8      	it	lt
 800d00a:	461f      	movlt	r7, r3
 800d00c:	2f00      	cmp	r7, #0
 800d00e:	dd0a      	ble.n	800d026 <_svfprintf_r+0xc36>
 800d010:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d012:	19ed      	adds	r5, r5, r7
 800d014:	6032      	str	r2, [r6, #0]
 800d016:	3401      	adds	r4, #1
 800d018:	6077      	str	r7, [r6, #4]
 800d01a:	2c07      	cmp	r4, #7
 800d01c:	953f      	str	r5, [sp, #252]	; 0xfc
 800d01e:	943e      	str	r4, [sp, #248]	; 0xf8
 800d020:	f300 8284 	bgt.w	800d52c <_svfprintf_r+0x113c>
 800d024:	3608      	adds	r6, #8
 800d026:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800d02a:	1bdf      	subs	r7, r3, r7
 800d02c:	2f00      	cmp	r7, #0
 800d02e:	f77f ad85 	ble.w	800cb3c <_svfprintf_r+0x74c>
 800d032:	2f10      	cmp	r7, #16
 800d034:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d036:	f340 8303 	ble.w	800d640 <_svfprintf_r+0x1250>
 800d03a:	f8df 83d8 	ldr.w	r8, [pc, #984]	; 800d414 <_svfprintf_r+0x1024>
 800d03e:	4623      	mov	r3, r4
 800d040:	f04f 0910 	mov.w	r9, #16
 800d044:	4644      	mov	r4, r8
 800d046:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800d04a:	e003      	b.n	800d054 <_svfprintf_r+0xc64>
 800d04c:	3f10      	subs	r7, #16
 800d04e:	2f10      	cmp	r7, #16
 800d050:	f77f adc8 	ble.w	800cbe4 <_svfprintf_r+0x7f4>
 800d054:	3301      	adds	r3, #1
 800d056:	e886 0210 	stmia.w	r6, {r4, r9}
 800d05a:	3510      	adds	r5, #16
 800d05c:	3608      	adds	r6, #8
 800d05e:	2b07      	cmp	r3, #7
 800d060:	933e      	str	r3, [sp, #248]	; 0xf8
 800d062:	953f      	str	r5, [sp, #252]	; 0xfc
 800d064:	ddf2      	ble.n	800d04c <_svfprintf_r+0xc5c>
 800d066:	4640      	mov	r0, r8
 800d068:	4659      	mov	r1, fp
 800d06a:	aa3d      	add	r2, sp, #244	; 0xf4
 800d06c:	ae23      	add	r6, sp, #140	; 0x8c
 800d06e:	f003 fbb7 	bl	80107e0 <__ssprint_r>
 800d072:	2800      	cmp	r0, #0
 800d074:	f47f aaba 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d078:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d07a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800d07c:	e7e6      	b.n	800d04c <_svfprintf_r+0xc5c>
 800d07e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d080:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d082:	3401      	adds	r4, #1
 800d084:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d086:	2c07      	cmp	r4, #7
 800d088:	440d      	add	r5, r1
 800d08a:	6071      	str	r1, [r6, #4]
 800d08c:	6032      	str	r2, [r6, #0]
 800d08e:	953f      	str	r5, [sp, #252]	; 0xfc
 800d090:	943e      	str	r4, [sp, #248]	; 0xf8
 800d092:	f300 826c 	bgt.w	800d56e <_svfprintf_r+0x117e>
 800d096:	3608      	adds	r6, #8
 800d098:	e7ae      	b.n	800cff8 <_svfprintf_r+0xc08>
 800d09a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d09c:	07c2      	lsls	r2, r0, #31
 800d09e:	f53f ae66 	bmi.w	800cd6e <_svfprintf_r+0x97e>
 800d0a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0a4:	3401      	adds	r4, #1
 800d0a6:	3501      	adds	r5, #1
 800d0a8:	6033      	str	r3, [r6, #0]
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	2c07      	cmp	r4, #7
 800d0ae:	6073      	str	r3, [r6, #4]
 800d0b0:	953f      	str	r5, [sp, #252]	; 0xfc
 800d0b2:	943e      	str	r4, [sp, #248]	; 0xf8
 800d0b4:	f77f ae88 	ble.w	800cdc8 <_svfprintf_r+0x9d8>
 800d0b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d0ba:	4659      	mov	r1, fp
 800d0bc:	aa3d      	add	r2, sp, #244	; 0xf4
 800d0be:	f003 fb8f 	bl	80107e0 <__ssprint_r>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	f47f aa92 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d0c8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d0ca:	ae23      	add	r6, sp, #140	; 0x8c
 800d0cc:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d0ce:	e67c      	b.n	800cdca <_svfprintf_r+0x9da>
 800d0d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d0d2:	4659      	mov	r1, fp
 800d0d4:	aa3d      	add	r2, sp, #244	; 0xf4
 800d0d6:	f003 fb83 	bl	80107e0 <__ssprint_r>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	f47f aa86 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d0e0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d0e2:	ae23      	add	r6, sp, #140	; 0x8c
 800d0e4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d0e6:	e64e      	b.n	800cd86 <_svfprintf_r+0x996>
 800d0e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d0ea:	4659      	mov	r1, fp
 800d0ec:	aa3d      	add	r2, sp, #244	; 0xf4
 800d0ee:	f003 fb77 	bl	80107e0 <__ssprint_r>
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	f47f aa7a 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d0f8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d0fa:	ae23      	add	r6, sp, #140	; 0x8c
 800d0fc:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d0fe:	e64e      	b.n	800cd9e <_svfprintf_r+0x9ae>
 800d100:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d102:	f10d 00f3 	add.w	r0, sp, #243	; 0xf3
 800d106:	fba5 1203 	umull	r1, r2, r5, r3
 800d10a:	4601      	mov	r1, r0
 800d10c:	3801      	subs	r0, #1
 800d10e:	08d2      	lsrs	r2, r2, #3
 800d110:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 800d114:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 800d118:	4613      	mov	r3, r2
 800d11a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d11e:	700a      	strb	r2, [r1, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1f0      	bne.n	800d106 <_svfprintf_r+0xd16>
 800d124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d126:	9113      	str	r1, [sp, #76]	; 0x4c
 800d128:	1a5b      	subs	r3, r3, r1
 800d12a:	930e      	str	r3, [sp, #56]	; 0x38
 800d12c:	f7ff bb1a 	b.w	800c764 <_svfprintf_r+0x374>
 800d130:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d132:	4659      	mov	r1, fp
 800d134:	aa3d      	add	r2, sp, #244	; 0xf4
 800d136:	f003 fb53 	bl	80107e0 <__ssprint_r>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	f47f aa56 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d140:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d142:	ae23      	add	r6, sp, #140	; 0x8c
 800d144:	e4a3      	b.n	800ca8e <_svfprintf_r+0x69e>
 800d146:	2930      	cmp	r1, #48	; 0x30
 800d148:	f000 81fe 	beq.w	800d548 <_svfprintf_r+0x1158>
 800d14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d14e:	1e95      	subs	r5, r2, #2
 800d150:	9513      	str	r5, [sp, #76]	; 0x4c
 800d152:	1b5b      	subs	r3, r3, r5
 800d154:	930e      	str	r3, [sp, #56]	; 0x38
 800d156:	2330      	movs	r3, #48	; 0x30
 800d158:	f802 3c02 	strb.w	r3, [r2, #-2]
 800d15c:	f7ff bb02 	b.w	800c764 <_svfprintf_r+0x374>
 800d160:	4639      	mov	r1, r7
 800d162:	f003 faad 	bl	80106c0 <__fpclassifyd>
 800d166:	2800      	cmp	r0, #0
 800d168:	f040 808e 	bne.w	800d288 <_svfprintf_r+0xe98>
 800d16c:	2503      	movs	r5, #3
 800d16e:	950b      	str	r5, [sp, #44]	; 0x2c
 800d170:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d172:	4aa5      	ldr	r2, [pc, #660]	; (800d408 <_svfprintf_r+0x1018>)
 800d174:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800d178:	49a4      	ldr	r1, [pc, #656]	; (800d40c <_svfprintf_r+0x101c>)
 800d17a:	950a      	str	r5, [sp, #40]	; 0x28
 800d17c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d17e:	9014      	str	r0, [sp, #80]	; 0x50
 800d180:	2d47      	cmp	r5, #71	; 0x47
 800d182:	bfd8      	it	le
 800d184:	4611      	movle	r1, r2
 800d186:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800d18a:	2503      	movs	r5, #3
 800d18c:	9113      	str	r1, [sp, #76]	; 0x4c
 800d18e:	950e      	str	r5, [sp, #56]	; 0x38
 800d190:	9018      	str	r0, [sp, #96]	; 0x60
 800d192:	f7ff ba64 	b.w	800c65e <_svfprintf_r+0x26e>
 800d196:	46a0      	mov	r8, r4
 800d198:	461c      	mov	r4, r3
 800d19a:	3401      	adds	r4, #1
 800d19c:	f8c6 8000 	str.w	r8, [r6]
 800d1a0:	2c07      	cmp	r4, #7
 800d1a2:	6077      	str	r7, [r6, #4]
 800d1a4:	443d      	add	r5, r7
 800d1a6:	943e      	str	r4, [sp, #248]	; 0xf8
 800d1a8:	953f      	str	r5, [sp, #252]	; 0xfc
 800d1aa:	f73f af14 	bgt.w	800cfd6 <_svfprintf_r+0xbe6>
 800d1ae:	3608      	adds	r6, #8
 800d1b0:	e71b      	b.n	800cfea <_svfprintf_r+0xbfa>
 800d1b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d1b4:	4659      	mov	r1, fp
 800d1b6:	aa3d      	add	r2, sp, #244	; 0xf4
 800d1b8:	f003 fb12 	bl	80107e0 <__ssprint_r>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	f47f aa15 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d1c2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d1c4:	ae23      	add	r6, sp, #140	; 0x8c
 800d1c6:	e53d      	b.n	800cc44 <_svfprintf_r+0x854>
 800d1c8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	6073      	str	r3, [r6, #4]
 800d1ce:	3501      	adds	r5, #1
 800d1d0:	3401      	adds	r4, #1
 800d1d2:	4b8f      	ldr	r3, [pc, #572]	; (800d410 <_svfprintf_r+0x1020>)
 800d1d4:	2c07      	cmp	r4, #7
 800d1d6:	6033      	str	r3, [r6, #0]
 800d1d8:	953f      	str	r5, [sp, #252]	; 0xfc
 800d1da:	943e      	str	r4, [sp, #248]	; 0xf8
 800d1dc:	f300 8152 	bgt.w	800d484 <_svfprintf_r+0x1094>
 800d1e0:	3608      	adds	r6, #8
 800d1e2:	b92f      	cbnz	r7, 800d1f0 <_svfprintf_r+0xe00>
 800d1e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1e6:	b91b      	cbnz	r3, 800d1f0 <_svfprintf_r+0xe00>
 800d1e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d1ea:	07c0      	lsls	r0, r0, #31
 800d1ec:	f57f aca6 	bpl.w	800cb3c <_svfprintf_r+0x74c>
 800d1f0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d1f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d1f4:	3401      	adds	r4, #1
 800d1f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d1f8:	2c07      	cmp	r4, #7
 800d1fa:	440d      	add	r5, r1
 800d1fc:	6071      	str	r1, [r6, #4]
 800d1fe:	6032      	str	r2, [r6, #0]
 800d200:	953f      	str	r5, [sp, #252]	; 0xfc
 800d202:	943e      	str	r4, [sp, #248]	; 0xf8
 800d204:	f300 81fb 	bgt.w	800d5fe <_svfprintf_r+0x120e>
 800d208:	3608      	adds	r6, #8
 800d20a:	427f      	negs	r7, r7
 800d20c:	2f00      	cmp	r7, #0
 800d20e:	f340 8169 	ble.w	800d4e4 <_svfprintf_r+0x10f4>
 800d212:	2f10      	cmp	r7, #16
 800d214:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800d414 <_svfprintf_r+0x1024>
 800d218:	f340 819e 	ble.w	800d558 <_svfprintf_r+0x1168>
 800d21c:	4623      	mov	r3, r4
 800d21e:	f04f 0910 	mov.w	r9, #16
 800d222:	4644      	mov	r4, r8
 800d224:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800d228:	e003      	b.n	800d232 <_svfprintf_r+0xe42>
 800d22a:	3f10      	subs	r7, #16
 800d22c:	2f10      	cmp	r7, #16
 800d22e:	f340 8191 	ble.w	800d554 <_svfprintf_r+0x1164>
 800d232:	3301      	adds	r3, #1
 800d234:	e886 0210 	stmia.w	r6, {r4, r9}
 800d238:	3510      	adds	r5, #16
 800d23a:	3608      	adds	r6, #8
 800d23c:	2b07      	cmp	r3, #7
 800d23e:	933e      	str	r3, [sp, #248]	; 0xf8
 800d240:	953f      	str	r5, [sp, #252]	; 0xfc
 800d242:	ddf2      	ble.n	800d22a <_svfprintf_r+0xe3a>
 800d244:	4640      	mov	r0, r8
 800d246:	4659      	mov	r1, fp
 800d248:	aa3d      	add	r2, sp, #244	; 0xf4
 800d24a:	f003 fac9 	bl	80107e0 <__ssprint_r>
 800d24e:	2800      	cmp	r0, #0
 800d250:	f47f a9cc 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d254:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d256:	ae23      	add	r6, sp, #140	; 0x8c
 800d258:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800d25a:	e7e6      	b.n	800d22a <_svfprintf_r+0xe3a>
 800d25c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d25e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800d262:	950b      	str	r5, [sp, #44]	; 0x2c
 800d264:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d266:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800d26a:	9711      	str	r7, [sp, #68]	; 0x44
 800d26c:	9518      	str	r5, [sp, #96]	; 0x60
 800d26e:	f7ff b9f6 	b.w	800c65e <_svfprintf_r+0x26e>
 800d272:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d274:	4659      	mov	r1, fp
 800d276:	aa3d      	add	r2, sp, #244	; 0xf4
 800d278:	f003 fab2 	bl	80107e0 <__ssprint_r>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	f47f a9b5 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d282:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d284:	ae23      	add	r6, sp, #140	; 0x8c
 800d286:	e4f2      	b.n	800cc6e <_svfprintf_r+0x87e>
 800d288:	1c61      	adds	r1, r4, #1
 800d28a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d28c:	f000 8106 	beq.w	800d49c <_svfprintf_r+0x10ac>
 800d290:	f1a5 0967 	sub.w	r9, r5, #103	; 0x67
 800d294:	f1d9 0300 	rsbs	r3, r9, #0
 800d298:	eb43 0309 	adc.w	r3, r3, r9
 800d29c:	2d47      	cmp	r5, #71	; 0x47
 800d29e:	bf08      	it	eq
 800d2a0:	f043 0301 	orreq.w	r3, r3, #1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 81a8 	beq.w	800d5fa <_svfprintf_r+0x120a>
 800d2aa:	2c00      	cmp	r4, #0
 800d2ac:	f000 81c5 	beq.w	800d63a <_svfprintf_r+0x124a>
 800d2b0:	2501      	movs	r5, #1
 800d2b2:	950b      	str	r5, [sp, #44]	; 0x2c
 800d2b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d2b6:	2f00      	cmp	r7, #0
 800d2b8:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 800d2bc:	950a      	str	r5, [sp, #40]	; 0x28
 800d2be:	f2c0 81ab 	blt.w	800d618 <_svfprintf_r+0x1228>
 800d2c2:	2500      	movs	r5, #0
 800d2c4:	9514      	str	r5, [sp, #80]	; 0x50
 800d2c6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d2c8:	46a1      	mov	r9, r4
 800d2ca:	f1a5 0c66 	sub.w	ip, r5, #102	; 0x66
 800d2ce:	f1dc 0500 	rsbs	r5, ip, #0
 800d2d2:	eb45 050c 	adc.w	r5, r5, ip
 800d2d6:	9515      	str	r5, [sp, #84]	; 0x54
 800d2d8:	46ac      	mov	ip, r5
 800d2da:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d2dc:	2303      	movs	r3, #3
 800d2de:	2d46      	cmp	r5, #70	; 0x46
 800d2e0:	bf08      	it	eq
 800d2e2:	f04c 0c01 	orreq.w	ip, ip, #1
 800d2e6:	f1bc 0f00 	cmp.w	ip, #0
 800d2ea:	d10f      	bne.n	800d30c <_svfprintf_r+0xf1c>
 800d2ec:	f1a5 0e65 	sub.w	lr, r5, #101	; 0x65
 800d2f0:	f1de 0300 	rsbs	r3, lr, #0
 800d2f4:	eb43 030e 	adc.w	r3, r3, lr
 800d2f8:	2d45      	cmp	r5, #69	; 0x45
 800d2fa:	bf08      	it	eq
 800d2fc:	f043 0301 	orreq.w	r3, r3, #1
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 818e 	beq.w	800d622 <_svfprintf_r+0x1232>
 800d306:	f104 0901 	add.w	r9, r4, #1
 800d30a:	2302      	movs	r3, #2
 800d30c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d310:	a944      	add	r1, sp, #272	; 0x110
 800d312:	970f      	str	r7, [sp, #60]	; 0x3c
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d318:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d31c:	9102      	str	r1, [sp, #8]
 800d31e:	a945      	add	r1, sp, #276	; 0x114
 800d320:	f8cd c01c 	str.w	ip, [sp, #28]
 800d324:	9103      	str	r1, [sp, #12]
 800d326:	a946      	add	r1, sp, #280	; 0x118
 800d328:	f8cd 9004 	str.w	r9, [sp, #4]
 800d32c:	9104      	str	r1, [sp, #16]
 800d32e:	f001 f971 	bl	800e614 <_dtoa_r>
 800d332:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d334:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d338:	f1b5 0367 	subs.w	r3, r5, #103	; 0x67
 800d33c:	bf18      	it	ne
 800d33e:	2301      	movne	r3, #1
 800d340:	2d47      	cmp	r5, #71	; 0x47
 800d342:	bf0c      	ite	eq
 800d344:	2300      	moveq	r3, #0
 800d346:	f003 0301 	andne.w	r3, r3, #1
 800d34a:	9013      	str	r0, [sp, #76]	; 0x4c
 800d34c:	b923      	cbnz	r3, 800d358 <_svfprintf_r+0xf68>
 800d34e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d350:	07ed      	lsls	r5, r5, #31
 800d352:	bf58      	it	pl
 800d354:	9d46      	ldrpl	r5, [sp, #280]	; 0x118
 800d356:	d515      	bpl.n	800d384 <_svfprintf_r+0xf94>
 800d358:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d35a:	eb00 0509 	add.w	r5, r0, r9
 800d35e:	f1bc 0f00 	cmp.w	ip, #0
 800d362:	d005      	beq.n	800d370 <_svfprintf_r+0xf80>
 800d364:	7803      	ldrb	r3, [r0, #0]
 800d366:	2b30      	cmp	r3, #48	; 0x30
 800d368:	f000 80a4 	beq.w	800d4b4 <_svfprintf_r+0x10c4>
 800d36c:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800d36e:	18ed      	adds	r5, r5, r3
 800d370:	4640      	mov	r0, r8
 800d372:	2200      	movs	r2, #0
 800d374:	2300      	movs	r3, #0
 800d376:	4639      	mov	r1, r7
 800d378:	f004 fda0 	bl	8011ebc <__aeabi_dcmpeq>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	f000 8124 	beq.w	800d5ca <_svfprintf_r+0x11da>
 800d382:	9546      	str	r5, [sp, #280]	; 0x118
 800d384:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d386:	1a6d      	subs	r5, r5, r1
 800d388:	9512      	str	r5, [sp, #72]	; 0x48
 800d38a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d38c:	2d00      	cmp	r5, #0
 800d38e:	f000 8106 	beq.w	800d59e <_svfprintf_r+0x11ae>
 800d392:	9944      	ldr	r1, [sp, #272]	; 0x110
 800d394:	1cc8      	adds	r0, r1, #3
 800d396:	db02      	blt.n	800d39e <_svfprintf_r+0xfae>
 800d398:	428c      	cmp	r4, r1
 800d39a:	f280 8107 	bge.w	800d5ac <_svfprintf_r+0x11bc>
 800d39e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d3a0:	3d02      	subs	r5, #2
 800d3a2:	9517      	str	r5, [sp, #92]	; 0x5c
 800d3a4:	3901      	subs	r1, #1
 800d3a6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d3a8:	2900      	cmp	r1, #0
 800d3aa:	9144      	str	r1, [sp, #272]	; 0x110
 800d3ac:	f88d 5100 	strb.w	r5, [sp, #256]	; 0x100
 800d3b0:	f2c0 8175 	blt.w	800d69e <_svfprintf_r+0x12ae>
 800d3b4:	232b      	movs	r3, #43	; 0x2b
 800d3b6:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 800d3ba:	2909      	cmp	r1, #9
 800d3bc:	f340 8134 	ble.w	800d628 <_svfprintf_r+0x1238>
 800d3c0:	ad43      	add	r5, sp, #268	; 0x10c
 800d3c2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800d3c4:	3503      	adds	r5, #3
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	fb87 3201 	smull	r3, r2, r7, r1
 800d3cc:	17cb      	asrs	r3, r1, #31
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800d3d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d3d8:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 800d3dc:	4619      	mov	r1, r3
 800d3de:	3230      	adds	r2, #48	; 0x30
 800d3e0:	2b09      	cmp	r3, #9
 800d3e2:	f800 2d01 	strb.w	r2, [r0, #-1]!
 800d3e6:	dcef      	bgt.n	800d3c8 <_svfprintf_r+0xfd8>
 800d3e8:	3130      	adds	r1, #48	; 0x30
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	b2c9      	uxtb	r1, r1
 800d3ee:	f802 1d02 	strb.w	r1, [r2, #-2]!
 800d3f2:	4295      	cmp	r5, r2
 800d3f4:	bf98      	it	ls
 800d3f6:	f50d 7181 	addls.w	r1, sp, #258	; 0x102
 800d3fa:	d914      	bls.n	800d426 <_svfprintf_r+0x1036>
 800d3fc:	f50d 7381 	add.w	r3, sp, #258	; 0x102
 800d400:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
 800d404:	e00a      	b.n	800d41c <_svfprintf_r+0x102c>
 800d406:	bf00      	nop
 800d408:	08014ae8 	.word	0x08014ae8
 800d40c:	08014aec 	.word	0x08014aec
 800d410:	08014b20 	.word	0x08014b20
 800d414:	08014410 	.word	0x08014410
 800d418:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d41c:	4282      	cmp	r2, r0
 800d41e:	f803 1b01 	strb.w	r1, [r3], #1
 800d422:	4619      	mov	r1, r3
 800d424:	d1f8      	bne.n	800d418 <_svfprintf_r+0x1028>
 800d426:	ab40      	add	r3, sp, #256	; 0x100
 800d428:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800d42a:	1acb      	subs	r3, r1, r3
 800d42c:	931f      	str	r3, [sp, #124]	; 0x7c
 800d42e:	195d      	adds	r5, r3, r5
 800d430:	950e      	str	r5, [sp, #56]	; 0x38
 800d432:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800d434:	2d01      	cmp	r5, #1
 800d436:	f340 8127 	ble.w	800d688 <_svfprintf_r+0x1298>
 800d43a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d43c:	2500      	movs	r5, #0
 800d43e:	9518      	str	r5, [sp, #96]	; 0x60
 800d440:	3301      	adds	r3, #1
 800d442:	930e      	str	r3, [sp, #56]	; 0x38
 800d444:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 800d448:	950b      	str	r5, [sp, #44]	; 0x2c
 800d44a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d44c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800d450:	2d00      	cmp	r5, #0
 800d452:	f43f a904 	beq.w	800c65e <_svfprintf_r+0x26e>
 800d456:	2300      	movs	r3, #0
 800d458:	9314      	str	r3, [sp, #80]	; 0x50
 800d45a:	232d      	movs	r3, #45	; 0x2d
 800d45c:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 800d460:	f7ff b8fe 	b.w	800c660 <_svfprintf_r+0x270>
 800d464:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d466:	2140      	movs	r1, #64	; 0x40
 800d468:	f7fd fdda 	bl	800b020 <_malloc_r>
 800d46c:	f8cb 0000 	str.w	r0, [fp]
 800d470:	f8cb 0010 	str.w	r0, [fp, #16]
 800d474:	2800      	cmp	r0, #0
 800d476:	f000 8136 	beq.w	800d6e6 <_svfprintf_r+0x12f6>
 800d47a:	2340      	movs	r3, #64	; 0x40
 800d47c:	f8cb 3014 	str.w	r3, [fp, #20]
 800d480:	f7fe bfd1 	b.w	800c426 <_svfprintf_r+0x36>
 800d484:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d486:	4659      	mov	r1, fp
 800d488:	aa3d      	add	r2, sp, #244	; 0xf4
 800d48a:	f003 f9a9 	bl	80107e0 <__ssprint_r>
 800d48e:	2800      	cmp	r0, #0
 800d490:	f47f a8ac 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d494:	9f44      	ldr	r7, [sp, #272]	; 0x110
 800d496:	ae23      	add	r6, sp, #140	; 0x8c
 800d498:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d49a:	e6a2      	b.n	800d1e2 <_svfprintf_r+0xdf2>
 800d49c:	f1a5 0247 	sub.w	r2, r5, #71	; 0x47
 800d4a0:	4253      	negs	r3, r2
 800d4a2:	eb43 0302 	adc.w	r3, r3, r2
 800d4a6:	2406      	movs	r4, #6
 800d4a8:	2d67      	cmp	r5, #103	; 0x67
 800d4aa:	bf08      	it	eq
 800d4ac:	f043 0301 	orreq.w	r3, r3, #1
 800d4b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4b2:	e6ff      	b.n	800d2b4 <_svfprintf_r+0xec4>
 800d4b4:	4640      	mov	r0, r8
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	4639      	mov	r1, r7
 800d4bc:	f004 fcfe 	bl	8011ebc <__aeabi_dcmpeq>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	f47f af53 	bne.w	800d36c <_svfprintf_r+0xf7c>
 800d4c6:	f1c9 0301 	rsb	r3, r9, #1
 800d4ca:	9344      	str	r3, [sp, #272]	; 0x110
 800d4cc:	e74f      	b.n	800d36e <_svfprintf_r+0xf7e>
 800d4ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d4d0:	4659      	mov	r1, fp
 800d4d2:	aa3d      	add	r2, sp, #244	; 0xf4
 800d4d4:	f003 f984 	bl	80107e0 <__ssprint_r>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f47f a887 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d4de:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d4e0:	ae23      	add	r6, sp, #140	; 0x8c
 800d4e2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d4e4:	3401      	adds	r4, #1
 800d4e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d4e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4ea:	2c07      	cmp	r4, #7
 800d4ec:	4405      	add	r5, r0
 800d4ee:	6070      	str	r0, [r6, #4]
 800d4f0:	6033      	str	r3, [r6, #0]
 800d4f2:	943e      	str	r4, [sp, #248]	; 0xf8
 800d4f4:	953f      	str	r5, [sp, #252]	; 0xfc
 800d4f6:	f77f ab20 	ble.w	800cb3a <_svfprintf_r+0x74a>
 800d4fa:	f7ff bb7e 	b.w	800cbfa <_svfprintf_r+0x80a>
 800d4fe:	9514      	str	r5, [sp, #80]	; 0x50
 800d500:	f7fe feb6 	bl	800c270 <strlen>
 800d504:	900e      	str	r0, [sp, #56]	; 0x38
 800d506:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 800d50a:	e6aa      	b.n	800d262 <_svfprintf_r+0xe72>
 800d50c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d50e:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 800d6fc <_svfprintf_r+0x130c>
 800d512:	f7ff b8e5 	b.w	800c6e0 <_svfprintf_r+0x2f0>
 800d516:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d518:	4659      	mov	r1, fp
 800d51a:	aa3d      	add	r2, sp, #244	; 0xf4
 800d51c:	f003 f960 	bl	80107e0 <__ssprint_r>
 800d520:	2800      	cmp	r0, #0
 800d522:	f47f a863 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d526:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d528:	ae23      	add	r6, sp, #140	; 0x8c
 800d52a:	e4cb      	b.n	800cec4 <_svfprintf_r+0xad4>
 800d52c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d52e:	4659      	mov	r1, fp
 800d530:	aa3d      	add	r2, sp, #244	; 0xf4
 800d532:	f003 f955 	bl	80107e0 <__ssprint_r>
 800d536:	2800      	cmp	r0, #0
 800d538:	f47f a858 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d53c:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800d53e:	ae23      	add	r6, sp, #140	; 0x8c
 800d540:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d542:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	e56e      	b.n	800d026 <_svfprintf_r+0xc36>
 800d548:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d54a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d54c:	1a2d      	subs	r5, r5, r0
 800d54e:	950e      	str	r5, [sp, #56]	; 0x38
 800d550:	f7ff b908 	b.w	800c764 <_svfprintf_r+0x374>
 800d554:	46a0      	mov	r8, r4
 800d556:	461c      	mov	r4, r3
 800d558:	3401      	adds	r4, #1
 800d55a:	f8c6 8000 	str.w	r8, [r6]
 800d55e:	2c07      	cmp	r4, #7
 800d560:	6077      	str	r7, [r6, #4]
 800d562:	443d      	add	r5, r7
 800d564:	943e      	str	r4, [sp, #248]	; 0xf8
 800d566:	953f      	str	r5, [sp, #252]	; 0xfc
 800d568:	dcb1      	bgt.n	800d4ce <_svfprintf_r+0x10de>
 800d56a:	3608      	adds	r6, #8
 800d56c:	e7ba      	b.n	800d4e4 <_svfprintf_r+0x10f4>
 800d56e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d570:	4659      	mov	r1, fp
 800d572:	aa3d      	add	r2, sp, #244	; 0xf4
 800d574:	f003 f934 	bl	80107e0 <__ssprint_r>
 800d578:	2800      	cmp	r0, #0
 800d57a:	f47f a837 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d57e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800d580:	ae23      	add	r6, sp, #140	; 0x8c
 800d582:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d584:	e538      	b.n	800cff8 <_svfprintf_r+0xc08>
 800d586:	2c06      	cmp	r4, #6
 800d588:	bf28      	it	cs
 800d58a:	2406      	movcs	r4, #6
 800d58c:	9711      	str	r7, [sp, #68]	; 0x44
 800d58e:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800d592:	950b      	str	r5, [sp, #44]	; 0x2c
 800d594:	4d58      	ldr	r5, [pc, #352]	; (800d6f8 <_svfprintf_r+0x1308>)
 800d596:	940e      	str	r4, [sp, #56]	; 0x38
 800d598:	9513      	str	r5, [sp, #76]	; 0x4c
 800d59a:	f7ff b8fc 	b.w	800c796 <_svfprintf_r+0x3a6>
 800d59e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d5a0:	2d65      	cmp	r5, #101	; 0x65
 800d5a2:	dd6f      	ble.n	800d684 <_svfprintf_r+0x1294>
 800d5a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d5a6:	9944      	ldr	r1, [sp, #272]	; 0x110
 800d5a8:	2d00      	cmp	r5, #0
 800d5aa:	d15d      	bne.n	800d668 <_svfprintf_r+0x1278>
 800d5ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800d5ae:	428d      	cmp	r5, r1
 800d5b0:	dc4a      	bgt.n	800d648 <_svfprintf_r+0x1258>
 800d5b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d5b4:	07ed      	lsls	r5, r5, #31
 800d5b6:	d54f      	bpl.n	800d658 <_svfprintf_r+0x1268>
 800d5b8:	1c4b      	adds	r3, r1, #1
 800d5ba:	2567      	movs	r5, #103	; 0x67
 800d5bc:	930e      	str	r3, [sp, #56]	; 0x38
 800d5be:	9517      	str	r5, [sp, #92]	; 0x5c
 800d5c0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 800d5c4:	9118      	str	r1, [sp, #96]	; 0x60
 800d5c6:	950b      	str	r5, [sp, #44]	; 0x2c
 800d5c8:	e73f      	b.n	800d44a <_svfprintf_r+0x105a>
 800d5ca:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800d5cc:	429d      	cmp	r5, r3
 800d5ce:	bf98      	it	ls
 800d5d0:	461d      	movls	r5, r3
 800d5d2:	f67f aed7 	bls.w	800d384 <_svfprintf_r+0xf94>
 800d5d6:	2230      	movs	r2, #48	; 0x30
 800d5d8:	f803 2b01 	strb.w	r2, [r3], #1
 800d5dc:	42ab      	cmp	r3, r5
 800d5de:	9346      	str	r3, [sp, #280]	; 0x118
 800d5e0:	d1fa      	bne.n	800d5d8 <_svfprintf_r+0x11e8>
 800d5e2:	e6cf      	b.n	800d384 <_svfprintf_r+0xf94>
 800d5e4:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800d5e8:	9014      	str	r0, [sp, #80]	; 0x50
 800d5ea:	950b      	str	r5, [sp, #44]	; 0x2c
 800d5ec:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800d5f0:	9711      	str	r7, [sp, #68]	; 0x44
 800d5f2:	940e      	str	r4, [sp, #56]	; 0x38
 800d5f4:	9018      	str	r0, [sp, #96]	; 0x60
 800d5f6:	f7ff b832 	b.w	800c65e <_svfprintf_r+0x26e>
 800d5fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5fc:	e65a      	b.n	800d2b4 <_svfprintf_r+0xec4>
 800d5fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d600:	4659      	mov	r1, fp
 800d602:	aa3d      	add	r2, sp, #244	; 0xf4
 800d604:	f003 f8ec 	bl	80107e0 <__ssprint_r>
 800d608:	2800      	cmp	r0, #0
 800d60a:	f47e afef 	bne.w	800c5ec <_svfprintf_r+0x1fc>
 800d60e:	9f44      	ldr	r7, [sp, #272]	; 0x110
 800d610:	ae23      	add	r6, sp, #140	; 0x8c
 800d612:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800d614:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800d616:	e5f8      	b.n	800d20a <_svfprintf_r+0xe1a>
 800d618:	252d      	movs	r5, #45	; 0x2d
 800d61a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d61e:	9514      	str	r5, [sp, #80]	; 0x50
 800d620:	e651      	b.n	800d2c6 <_svfprintf_r+0xed6>
 800d622:	46a1      	mov	r9, r4
 800d624:	2302      	movs	r3, #2
 800d626:	e671      	b.n	800d30c <_svfprintf_r+0xf1c>
 800d628:	f101 0230 	add.w	r2, r1, #48	; 0x30
 800d62c:	2330      	movs	r3, #48	; 0x30
 800d62e:	a941      	add	r1, sp, #260	; 0x104
 800d630:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
 800d634:	f88d 2103 	strb.w	r2, [sp, #259]	; 0x103
 800d638:	e6f5      	b.n	800d426 <_svfprintf_r+0x1036>
 800d63a:	2401      	movs	r4, #1
 800d63c:	940b      	str	r4, [sp, #44]	; 0x2c
 800d63e:	e639      	b.n	800d2b4 <_svfprintf_r+0xec4>
 800d640:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800d700 <_svfprintf_r+0x1310>
 800d644:	f7ff bad0 	b.w	800cbe8 <_svfprintf_r+0x7f8>
 800d648:	2900      	cmp	r1, #0
 800d64a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800d64c:	bfd4      	ite	le
 800d64e:	f1c1 0302 	rsble	r3, r1, #2
 800d652:	2301      	movgt	r3, #1
 800d654:	195b      	adds	r3, r3, r5
 800d656:	e7b0      	b.n	800d5ba <_svfprintf_r+0x11ca>
 800d658:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 800d65c:	910e      	str	r1, [sp, #56]	; 0x38
 800d65e:	950b      	str	r5, [sp, #44]	; 0x2c
 800d660:	2567      	movs	r5, #103	; 0x67
 800d662:	9118      	str	r1, [sp, #96]	; 0x60
 800d664:	9517      	str	r5, [sp, #92]	; 0x5c
 800d666:	e6f0      	b.n	800d44a <_svfprintf_r+0x105a>
 800d668:	2900      	cmp	r1, #0
 800d66a:	dd27      	ble.n	800d6bc <_svfprintf_r+0x12cc>
 800d66c:	b9e4      	cbnz	r4, 800d6a8 <_svfprintf_r+0x12b8>
 800d66e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d670:	07ea      	lsls	r2, r5, #31
 800d672:	d419      	bmi.n	800d6a8 <_svfprintf_r+0x12b8>
 800d674:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 800d678:	910e      	str	r1, [sp, #56]	; 0x38
 800d67a:	950b      	str	r5, [sp, #44]	; 0x2c
 800d67c:	2566      	movs	r5, #102	; 0x66
 800d67e:	9118      	str	r1, [sp, #96]	; 0x60
 800d680:	9517      	str	r5, [sp, #92]	; 0x5c
 800d682:	e6e2      	b.n	800d44a <_svfprintf_r+0x105a>
 800d684:	9944      	ldr	r1, [sp, #272]	; 0x110
 800d686:	e68d      	b.n	800d3a4 <_svfprintf_r+0xfb4>
 800d688:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d68a:	f015 0301 	ands.w	r3, r5, #1
 800d68e:	f47f aed4 	bne.w	800d43a <_svfprintf_r+0x104a>
 800d692:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d694:	9318      	str	r3, [sp, #96]	; 0x60
 800d696:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800d69a:	950b      	str	r5, [sp, #44]	; 0x2c
 800d69c:	e6d5      	b.n	800d44a <_svfprintf_r+0x105a>
 800d69e:	232d      	movs	r3, #45	; 0x2d
 800d6a0:	4249      	negs	r1, r1
 800d6a2:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 800d6a6:	e688      	b.n	800d3ba <_svfprintf_r+0xfca>
 800d6a8:	3401      	adds	r4, #1
 800d6aa:	2566      	movs	r5, #102	; 0x66
 800d6ac:	190c      	adds	r4, r1, r4
 800d6ae:	9517      	str	r5, [sp, #92]	; 0x5c
 800d6b0:	940e      	str	r4, [sp, #56]	; 0x38
 800d6b2:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800d6b6:	9118      	str	r1, [sp, #96]	; 0x60
 800d6b8:	950b      	str	r5, [sp, #44]	; 0x2c
 800d6ba:	e6c6      	b.n	800d44a <_svfprintf_r+0x105a>
 800d6bc:	b914      	cbnz	r4, 800d6c4 <_svfprintf_r+0x12d4>
 800d6be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d6c0:	07eb      	lsls	r3, r5, #31
 800d6c2:	d508      	bpl.n	800d6d6 <_svfprintf_r+0x12e6>
 800d6c4:	3402      	adds	r4, #2
 800d6c6:	2566      	movs	r5, #102	; 0x66
 800d6c8:	940e      	str	r4, [sp, #56]	; 0x38
 800d6ca:	9517      	str	r5, [sp, #92]	; 0x5c
 800d6cc:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800d6d0:	9118      	str	r1, [sp, #96]	; 0x60
 800d6d2:	950b      	str	r5, [sp, #44]	; 0x2c
 800d6d4:	e6b9      	b.n	800d44a <_svfprintf_r+0x105a>
 800d6d6:	2501      	movs	r5, #1
 800d6d8:	9118      	str	r1, [sp, #96]	; 0x60
 800d6da:	950b      	str	r5, [sp, #44]	; 0x2c
 800d6dc:	2566      	movs	r5, #102	; 0x66
 800d6de:	9517      	str	r5, [sp, #92]	; 0x5c
 800d6e0:	2501      	movs	r5, #1
 800d6e2:	950e      	str	r5, [sp, #56]	; 0x38
 800d6e4:	e6b1      	b.n	800d44a <_svfprintf_r+0x105a>
 800d6e6:	f04f 35ff 	mov.w	r5, #4294967295
 800d6ea:	950d      	str	r5, [sp, #52]	; 0x34
 800d6ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d6ee:	230c      	movs	r3, #12
 800d6f0:	602b      	str	r3, [r5, #0]
 800d6f2:	f7fe bf84 	b.w	800c5fe <_svfprintf_r+0x20e>
 800d6f6:	bf00      	nop
 800d6f8:	08014b18 	.word	0x08014b18
 800d6fc:	08014400 	.word	0x08014400
 800d700:	08014410 	.word	0x08014410
	...

0800d710 <write>:
 800d710:	b430      	push	{r4, r5}
 800d712:	f240 0448 	movw	r4, #72	; 0x48
 800d716:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800d71a:	460d      	mov	r5, r1
 800d71c:	4613      	mov	r3, r2
 800d71e:	4601      	mov	r1, r0
 800d720:	462a      	mov	r2, r5
 800d722:	6820      	ldr	r0, [r4, #0]
 800d724:	bc30      	pop	{r4, r5}
 800d726:	f7f6 bbc9 	b.w	8003ebc <_write_r>
 800d72a:	bf00      	nop
 800d72c:	0000      	movs	r0, r0
	...

0800d730 <__sprint_r>:
 800d730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d734:	4680      	mov	r8, r0
 800d736:	6890      	ldr	r0, [r2, #8]
 800d738:	4691      	mov	r9, r2
 800d73a:	460e      	mov	r6, r1
 800d73c:	b348      	cbz	r0, 800d792 <__sprint_r+0x62>
 800d73e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d740:	049a      	lsls	r2, r3, #18
 800d742:	d529      	bpl.n	800d798 <__sprint_r+0x68>
 800d744:	f8d9 3000 	ldr.w	r3, [r9]
 800d748:	f103 0a08 	add.w	sl, r3, #8
 800d74c:	e91a 00a0 	ldmdb	sl, {r5, r7}
 800d750:	08bf      	lsrs	r7, r7, #2
 800d752:	b1af      	cbz	r7, 800d780 <__sprint_r+0x50>
 800d754:	2400      	movs	r4, #0
 800d756:	e001      	b.n	800d75c <__sprint_r+0x2c>
 800d758:	42a7      	cmp	r7, r4
 800d75a:	d00f      	beq.n	800d77c <__sprint_r+0x4c>
 800d75c:	f855 1b04 	ldr.w	r1, [r5], #4
 800d760:	4640      	mov	r0, r8
 800d762:	4632      	mov	r2, r6
 800d764:	3401      	adds	r4, #1
 800d766:	f002 f893 	bl	800f890 <_fputwc_r>
 800d76a:	1c43      	adds	r3, r0, #1
 800d76c:	d1f4      	bne.n	800d758 <__sprint_r+0x28>
 800d76e:	2300      	movs	r3, #0
 800d770:	f8c9 3008 	str.w	r3, [r9, #8]
 800d774:	f8c9 3004 	str.w	r3, [r9, #4]
 800d778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800d780:	eba0 0087 	sub.w	r0, r0, r7, lsl #2
 800d784:	f10a 0a08 	add.w	sl, sl, #8
 800d788:	f8c9 0008 	str.w	r0, [r9, #8]
 800d78c:	2800      	cmp	r0, #0
 800d78e:	d1dd      	bne.n	800d74c <__sprint_r+0x1c>
 800d790:	e7ed      	b.n	800d76e <__sprint_r+0x3e>
 800d792:	6050      	str	r0, [r2, #4]
 800d794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d798:	4640      	mov	r0, r8
 800d79a:	464a      	mov	r2, r9
 800d79c:	f7fd fa40 	bl	800ac20 <__sfvwrite_r>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	f8c9 3008 	str.w	r3, [r9, #8]
 800d7a6:	f8c9 3004 	str.w	r3, [r9, #4]
 800d7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ae:	bf00      	nop

0800d7b0 <_vfiprintf_r>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800d7b8:	b081      	sub	sp, #4
 800d7ba:	4683      	mov	fp, r0
 800d7bc:	460c      	mov	r4, r1
 800d7be:	4617      	mov	r7, r2
 800d7c0:	9307      	str	r3, [sp, #28]
 800d7c2:	b118      	cbz	r0, 800d7cc <_vfiprintf_r+0x1c>
 800d7c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f000 845b 	beq.w	800e082 <_vfiprintf_r+0x8d2>
 800d7cc:	89a5      	ldrh	r5, [r4, #12]
 800d7ce:	b2ab      	uxth	r3, r5
 800d7d0:	0498      	lsls	r0, r3, #18
 800d7d2:	d407      	bmi.n	800d7e4 <_vfiprintf_r+0x34>
 800d7d4:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 800d7d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7da:	81a5      	strh	r5, [r4, #12]
 800d7dc:	b2ab      	uxth	r3, r5
 800d7de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d7e2:	6662      	str	r2, [r4, #100]	; 0x64
 800d7e4:	0719      	lsls	r1, r3, #28
 800d7e6:	f140 83c3 	bpl.w	800df70 <_vfiprintf_r+0x7c0>
 800d7ea:	6922      	ldr	r2, [r4, #16]
 800d7ec:	2a00      	cmp	r2, #0
 800d7ee:	f000 83bf 	beq.w	800df70 <_vfiprintf_r+0x7c0>
 800d7f2:	f003 031a 	and.w	r3, r3, #26
 800d7f6:	2b0a      	cmp	r3, #10
 800d7f8:	f000 83c8 	beq.w	800df8c <_vfiprintf_r+0x7dc>
 800d7fc:	f50d 65a2 	add.w	r5, sp, #1296	; 0x510
 800d800:	9502      	str	r5, [sp, #8]
 800d802:	f50d 65a0 	add.w	r5, sp, #1280	; 0x500
 800d806:	f50d 6a95 	add.w	sl, sp, #1192	; 0x4a8
 800d80a:	350f      	adds	r5, #15
 800d80c:	9501      	str	r5, [sp, #4]
 800d80e:	9802      	ldr	r0, [sp, #8]
 800d810:	4655      	mov	r5, sl
 800d812:	9901      	ldr	r1, [sp, #4]
 800d814:	46a1      	mov	r9, r4
 800d816:	f64c 42cd 	movw	r2, #52429	; 0xcccd
 800d81a:	2300      	movs	r3, #0
 800d81c:	1a40      	subs	r0, r0, r1
 800d81e:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
 800d822:	930d      	str	r3, [sp, #52]	; 0x34
 800d824:	9305      	str	r3, [sp, #20]
 800d826:	900f      	str	r0, [sp, #60]	; 0x3c
 800d828:	920e      	str	r2, [sp, #56]	; 0x38
 800d82a:	f8cd a510 	str.w	sl, [sp, #1296]	; 0x510
 800d82e:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
 800d832:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800d836:	783b      	ldrb	r3, [r7, #0]
 800d838:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 800d83c:	bf18      	it	ne
 800d83e:	2201      	movne	r2, #1
 800d840:	2b00      	cmp	r3, #0
 800d842:	bf0c      	ite	eq
 800d844:	2300      	moveq	r3, #0
 800d846:	f002 0301 	andne.w	r3, r2, #1
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f000 8319 	beq.w	800de82 <_vfiprintf_r+0x6d2>
 800d850:	463a      	mov	r2, r7
 800d852:	463c      	mov	r4, r7
 800d854:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800d858:	3401      	adds	r4, #1
 800d85a:	1c19      	adds	r1, r3, #0
 800d85c:	bf18      	it	ne
 800d85e:	2101      	movne	r1, #1
 800d860:	2b25      	cmp	r3, #37	; 0x25
 800d862:	bf0c      	ite	eq
 800d864:	2300      	moveq	r3, #0
 800d866:	f001 0301 	andne.w	r3, r1, #1
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1f2      	bne.n	800d854 <_vfiprintf_r+0xa4>
 800d86e:	1be6      	subs	r6, r4, r7
 800d870:	d012      	beq.n	800d898 <_vfiprintf_r+0xe8>
 800d872:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800d876:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800d87a:	3301      	adds	r3, #1
 800d87c:	602f      	str	r7, [r5, #0]
 800d87e:	2b07      	cmp	r3, #7
 800d880:	4432      	add	r2, r6
 800d882:	606e      	str	r6, [r5, #4]
 800d884:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800d888:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800d88c:	f300 83c1 	bgt.w	800e012 <_vfiprintf_r+0x862>
 800d890:	3508      	adds	r5, #8
 800d892:	9b05      	ldr	r3, [sp, #20]
 800d894:	199b      	adds	r3, r3, r6
 800d896:	9305      	str	r3, [sp, #20]
 800d898:	7823      	ldrb	r3, [r4, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f000 84a8 	beq.w	800e1f0 <_vfiprintf_r+0xa40>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	1c67      	adds	r7, r4, #1
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	f04f 34ff 	mov.w	r4, #4294967295
 800d8aa:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 800d8ae:	9308      	str	r3, [sp, #32]
 800d8b0:	9303      	str	r3, [sp, #12]
 800d8b2:	f817 3b01 	ldrb.w	r3, [r7], #1
 800d8b6:	f1a3 0120 	sub.w	r1, r3, #32
 800d8ba:	2958      	cmp	r1, #88	; 0x58
 800d8bc:	f200 81dd 	bhi.w	800dc7a <_vfiprintf_r+0x4ca>
 800d8c0:	e8df f011 	tbh	[pc, r1, lsl #1]
 800d8c4:	01db01d7 	.word	0x01db01d7
 800d8c8:	01d201db 	.word	0x01d201db
 800d8cc:	01db01db 	.word	0x01db01db
 800d8d0:	01db01db 	.word	0x01db01db
 800d8d4:	01db01db 	.word	0x01db01db
 800d8d8:	020c00d8 	.word	0x020c00d8
 800d8dc:	00e401db 	.word	0x00e401db
 800d8e0:	01db01f1 	.word	0x01db01f1
 800d8e4:	017b01ec 	.word	0x017b01ec
 800d8e8:	017b017b 	.word	0x017b017b
 800d8ec:	017b017b 	.word	0x017b017b
 800d8f0:	017b017b 	.word	0x017b017b
 800d8f4:	017b017b 	.word	0x017b017b
 800d8f8:	01db01db 	.word	0x01db01db
 800d8fc:	01db01db 	.word	0x01db01db
 800d900:	01db01db 	.word	0x01db01db
 800d904:	01db01db 	.word	0x01db01db
 800d908:	01db01db 	.word	0x01db01db
 800d90c:	01db005e 	.word	0x01db005e
 800d910:	01db01db 	.word	0x01db01db
 800d914:	01db01db 	.word	0x01db01db
 800d918:	01db01db 	.word	0x01db01db
 800d91c:	01db01db 	.word	0x01db01db
 800d920:	00b001db 	.word	0x00b001db
 800d924:	01db01db 	.word	0x01db01db
 800d928:	01db01db 	.word	0x01db01db
 800d92c:	00c601db 	.word	0x00c601db
 800d930:	01db01db 	.word	0x01db01db
 800d934:	01db014a 	.word	0x01db014a
 800d938:	01db01db 	.word	0x01db01db
 800d93c:	01db01db 	.word	0x01db01db
 800d940:	01db01db 	.word	0x01db01db
 800d944:	01db01db 	.word	0x01db01db
 800d948:	00ee01db 	.word	0x00ee01db
 800d94c:	01db0062 	.word	0x01db0062
 800d950:	01db01db 	.word	0x01db01db
 800d954:	006200e9 	.word	0x006200e9
 800d958:	01db01db 	.word	0x01db01db
 800d95c:	01db0059 	.word	0x01db0059
 800d960:	00b4018c 	.word	0x00b4018c
 800d964:	00590166 	.word	0x00590166
 800d968:	01b401db 	.word	0x01b401db
 800d96c:	00ca01db 	.word	0x00ca01db
 800d970:	01db01db 	.word	0x01db01db
 800d974:	019d      	.short	0x019d
 800d976:	9b03      	ldr	r3, [sp, #12]
 800d978:	f043 0310 	orr.w	r3, r3, #16
 800d97c:	9303      	str	r3, [sp, #12]
 800d97e:	e798      	b.n	800d8b2 <_vfiprintf_r+0x102>
 800d980:	9b03      	ldr	r3, [sp, #12]
 800d982:	f043 0310 	orr.w	r3, r3, #16
 800d986:	9303      	str	r3, [sp, #12]
 800d988:	9b03      	ldr	r3, [sp, #12]
 800d98a:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 800d98e:	06d8      	lsls	r0, r3, #27
 800d990:	f140 83bf 	bpl.w	800e112 <_vfiprintf_r+0x962>
 800d994:	9b07      	ldr	r3, [sp, #28]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	3304      	adds	r3, #4
 800d99a:	9307      	str	r3, [sp, #28]
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	f2c0 83c5 	blt.w	800e12c <_vfiprintf_r+0x97c>
 800d9a2:	bf0c      	ite	eq
 800d9a4:	2100      	moveq	r1, #0
 800d9a6:	2101      	movne	r1, #1
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	2c00      	cmp	r4, #0
 800d9ac:	bfa2      	ittt	ge
 800d9ae:	9803      	ldrge	r0, [sp, #12]
 800d9b0:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 800d9b4:	9003      	strge	r0, [sp, #12]
 800d9b6:	2c00      	cmp	r4, #0
 800d9b8:	bf18      	it	ne
 800d9ba:	f041 0101 	orrne.w	r1, r1, #1
 800d9be:	2900      	cmp	r1, #0
 800d9c0:	f000 8261 	beq.w	800de86 <_vfiprintf_r+0x6d6>
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	f000 8365 	beq.w	800e094 <_vfiprintf_r+0x8e4>
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	bf18      	it	ne
 800d9ce:	f50d 63a2 	addne.w	r3, sp, #1296	; 0x510
 800d9d2:	d101      	bne.n	800d9d8 <_vfiprintf_r+0x228>
 800d9d4:	e378      	b.n	800e0c8 <_vfiprintf_r+0x918>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	f002 0107 	and.w	r1, r2, #7
 800d9dc:	1e58      	subs	r0, r3, #1
 800d9de:	3130      	adds	r1, #48	; 0x30
 800d9e0:	08d2      	lsrs	r2, r2, #3
 800d9e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d9e6:	d1f6      	bne.n	800d9d6 <_vfiprintf_r+0x226>
 800d9e8:	9a03      	ldr	r2, [sp, #12]
 800d9ea:	900a      	str	r0, [sp, #40]	; 0x28
 800d9ec:	07d2      	lsls	r2, r2, #31
 800d9ee:	f140 83d8 	bpl.w	800e1a2 <_vfiprintf_r+0x9f2>
 800d9f2:	2930      	cmp	r1, #48	; 0x30
 800d9f4:	f000 8425 	beq.w	800e242 <_vfiprintf_r+0xa92>
 800d9f8:	9a02      	ldr	r2, [sp, #8]
 800d9fa:	1e99      	subs	r1, r3, #2
 800d9fc:	910a      	str	r1, [sp, #40]	; 0x28
 800d9fe:	1a52      	subs	r2, r2, r1
 800da00:	9206      	str	r2, [sp, #24]
 800da02:	2230      	movs	r2, #48	; 0x30
 800da04:	f803 2c02 	strb.w	r2, [r3, #-2]
 800da08:	9409      	str	r4, [sp, #36]	; 0x24
 800da0a:	9806      	ldr	r0, [sp, #24]
 800da0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da0e:	f89d 351f 	ldrb.w	r3, [sp, #1311]	; 0x51f
 800da12:	4288      	cmp	r0, r1
 800da14:	bfb8      	it	lt
 800da16:	4608      	movlt	r0, r1
 800da18:	9004      	str	r0, [sp, #16]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d051      	beq.n	800dac2 <_vfiprintf_r+0x312>
 800da1e:	3001      	adds	r0, #1
 800da20:	9004      	str	r0, [sp, #16]
 800da22:	e04e      	b.n	800dac2 <_vfiprintf_r+0x312>
 800da24:	9b03      	ldr	r3, [sp, #12]
 800da26:	f043 0310 	orr.w	r3, r3, #16
 800da2a:	9303      	str	r3, [sp, #12]
 800da2c:	9803      	ldr	r0, [sp, #12]
 800da2e:	f010 0310 	ands.w	r3, r0, #16
 800da32:	f000 835a 	beq.w	800e0ea <_vfiprintf_r+0x93a>
 800da36:	9b07      	ldr	r3, [sp, #28]
 800da38:	9807      	ldr	r0, [sp, #28]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	2300      	movs	r3, #0
 800da3e:	3004      	adds	r0, #4
 800da40:	9007      	str	r0, [sp, #28]
 800da42:	1ad1      	subs	r1, r2, r3
 800da44:	bf18      	it	ne
 800da46:	2101      	movne	r1, #1
 800da48:	2000      	movs	r0, #0
 800da4a:	f88d 051f 	strb.w	r0, [sp, #1311]	; 0x51f
 800da4e:	e7ac      	b.n	800d9aa <_vfiprintf_r+0x1fa>
 800da50:	9b03      	ldr	r3, [sp, #12]
 800da52:	f043 0310 	orr.w	r3, r3, #16
 800da56:	9303      	str	r3, [sp, #12]
 800da58:	9b03      	ldr	r3, [sp, #12]
 800da5a:	06db      	lsls	r3, r3, #27
 800da5c:	f140 8351 	bpl.w	800e102 <_vfiprintf_r+0x952>
 800da60:	9b07      	ldr	r3, [sp, #28]
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	2301      	movs	r3, #1
 800da66:	9807      	ldr	r0, [sp, #28]
 800da68:	3004      	adds	r0, #4
 800da6a:	1c11      	adds	r1, r2, #0
 800da6c:	9007      	str	r0, [sp, #28]
 800da6e:	bf18      	it	ne
 800da70:	2101      	movne	r1, #1
 800da72:	e7e9      	b.n	800da48 <_vfiprintf_r+0x298>
 800da74:	9b07      	ldr	r3, [sp, #28]
 800da76:	9807      	ldr	r0, [sp, #28]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	9308      	str	r3, [sp, #32]
 800da7c:	1d03      	adds	r3, r0, #4
 800da7e:	9908      	ldr	r1, [sp, #32]
 800da80:	2900      	cmp	r1, #0
 800da82:	f280 8375 	bge.w	800e170 <_vfiprintf_r+0x9c0>
 800da86:	4249      	negs	r1, r1
 800da88:	9307      	str	r3, [sp, #28]
 800da8a:	9108      	str	r1, [sp, #32]
 800da8c:	9b03      	ldr	r3, [sp, #12]
 800da8e:	f043 0304 	orr.w	r3, r3, #4
 800da92:	9303      	str	r3, [sp, #12]
 800da94:	e70d      	b.n	800d8b2 <_vfiprintf_r+0x102>
 800da96:	9b03      	ldr	r3, [sp, #12]
 800da98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da9c:	9303      	str	r3, [sp, #12]
 800da9e:	e708      	b.n	800d8b2 <_vfiprintf_r+0x102>
 800daa0:	9b07      	ldr	r3, [sp, #28]
 800daa2:	2001      	movs	r0, #1
 800daa4:	2200      	movs	r2, #0
 800daa6:	9004      	str	r0, [sp, #16]
 800daa8:	1d19      	adds	r1, r3, #4
 800daaa:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
 800dab4:	9107      	str	r1, [sp, #28]
 800dab6:	9006      	str	r0, [sp, #24]
 800dab8:	920a      	str	r2, [sp, #40]	; 0x28
 800daba:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 800dabe:	2300      	movs	r3, #0
 800dac0:	9309      	str	r3, [sp, #36]	; 0x24
 800dac2:	9b03      	ldr	r3, [sp, #12]
 800dac4:	f013 0302 	ands.w	r3, r3, #2
 800dac8:	930b      	str	r3, [sp, #44]	; 0x2c
 800daca:	d002      	beq.n	800dad2 <_vfiprintf_r+0x322>
 800dacc:	9b04      	ldr	r3, [sp, #16]
 800dace:	3302      	adds	r3, #2
 800dad0:	9304      	str	r3, [sp, #16]
 800dad2:	9b03      	ldr	r3, [sp, #12]
 800dad4:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800dad8:	930c      	str	r3, [sp, #48]	; 0x30
 800dada:	f040 8101 	bne.w	800dce0 <_vfiprintf_r+0x530>
 800dade:	9b08      	ldr	r3, [sp, #32]
 800dae0:	9804      	ldr	r0, [sp, #16]
 800dae2:	1a1c      	subs	r4, r3, r0
 800dae4:	2c00      	cmp	r4, #0
 800dae6:	f340 80fb 	ble.w	800dce0 <_vfiprintf_r+0x530>
 800daea:	2c10      	cmp	r4, #16
 800daec:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800daf0:	f340 83a3 	ble.w	800e23a <_vfiprintf_r+0xa8a>
 800daf4:	f04f 0810 	mov.w	r8, #16
 800daf8:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800dafc:	4e95      	ldr	r6, [pc, #596]	; (800dd54 <_vfiprintf_r+0x5a4>)
 800dafe:	e002      	b.n	800db06 <_vfiprintf_r+0x356>
 800db00:	3c10      	subs	r4, #16
 800db02:	2c10      	cmp	r4, #16
 800db04:	dd1b      	ble.n	800db3e <_vfiprintf_r+0x38e>
 800db06:	3301      	adds	r3, #1
 800db08:	3210      	adds	r2, #16
 800db0a:	e885 0140 	stmia.w	r5, {r6, r8}
 800db0e:	3508      	adds	r5, #8
 800db10:	2b07      	cmp	r3, #7
 800db12:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800db16:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800db1a:	ddf1      	ble.n	800db00 <_vfiprintf_r+0x350>
 800db1c:	4658      	mov	r0, fp
 800db1e:	4649      	mov	r1, r9
 800db20:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800db24:	4655      	mov	r5, sl
 800db26:	f7ff fe03 	bl	800d730 <__sprint_r>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	f040 81c8 	bne.w	800dec0 <_vfiprintf_r+0x710>
 800db30:	3c10      	subs	r4, #16
 800db32:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800db36:	2c10      	cmp	r4, #16
 800db38:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800db3c:	dce3      	bgt.n	800db06 <_vfiprintf_r+0x356>
 800db3e:	3301      	adds	r3, #1
 800db40:	1912      	adds	r2, r2, r4
 800db42:	2b07      	cmp	r3, #7
 800db44:	602e      	str	r6, [r5, #0]
 800db46:	606c      	str	r4, [r5, #4]
 800db48:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800db4c:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800db50:	f300 82f5 	bgt.w	800e13e <_vfiprintf_r+0x98e>
 800db54:	3508      	adds	r5, #8
 800db56:	e0c7      	b.n	800dce8 <_vfiprintf_r+0x538>
 800db58:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 800db5c:	9a03      	ldr	r2, [sp, #12]
 800db5e:	497e      	ldr	r1, [pc, #504]	; (800dd58 <_vfiprintf_r+0x5a8>)
 800db60:	06d0      	lsls	r0, r2, #27
 800db62:	910d      	str	r1, [sp, #52]	; 0x34
 800db64:	d552      	bpl.n	800dc0c <_vfiprintf_r+0x45c>
 800db66:	9807      	ldr	r0, [sp, #28]
 800db68:	6802      	ldr	r2, [r0, #0]
 800db6a:	3004      	adds	r0, #4
 800db6c:	9007      	str	r0, [sp, #28]
 800db6e:	1c11      	adds	r1, r2, #0
 800db70:	9803      	ldr	r0, [sp, #12]
 800db72:	bf18      	it	ne
 800db74:	2101      	movne	r1, #1
 800db76:	4208      	tst	r0, r1
 800db78:	d056      	beq.n	800dc28 <_vfiprintf_r+0x478>
 800db7a:	f88d 351d 	strb.w	r3, [sp, #1309]	; 0x51d
 800db7e:	f040 0002 	orr.w	r0, r0, #2
 800db82:	2330      	movs	r3, #48	; 0x30
 800db84:	9003      	str	r0, [sp, #12]
 800db86:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 800db8a:	2101      	movs	r1, #1
 800db8c:	2302      	movs	r3, #2
 800db8e:	e75b      	b.n	800da48 <_vfiprintf_r+0x298>
 800db90:	9b07      	ldr	r3, [sp, #28]
 800db92:	4872      	ldr	r0, [pc, #456]	; (800dd5c <_vfiprintf_r+0x5ac>)
 800db94:	1d19      	adds	r1, r3, #4
 800db96:	9107      	str	r1, [sp, #28]
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	2178      	movs	r1, #120	; 0x78
 800db9c:	9b03      	ldr	r3, [sp, #12]
 800db9e:	f88d 151d 	strb.w	r1, [sp, #1309]	; 0x51d
 800dba2:	f043 0302 	orr.w	r3, r3, #2
 800dba6:	9303      	str	r3, [sp, #12]
 800dba8:	2330      	movs	r3, #48	; 0x30
 800dbaa:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 800dbae:	2302      	movs	r3, #2
 800dbb0:	1c11      	adds	r1, r2, #0
 800dbb2:	bf18      	it	ne
 800dbb4:	2101      	movne	r1, #1
 800dbb6:	900d      	str	r0, [sp, #52]	; 0x34
 800dbb8:	e746      	b.n	800da48 <_vfiprintf_r+0x298>
 800dbba:	4638      	mov	r0, r7
 800dbbc:	2100      	movs	r1, #0
 800dbbe:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800dbc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dbc6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800dbca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800dbce:	4607      	mov	r7, r0
 800dbd0:	2e09      	cmp	r6, #9
 800dbd2:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800dbd6:	d9f2      	bls.n	800dbbe <_vfiprintf_r+0x40e>
 800dbd8:	9108      	str	r1, [sp, #32]
 800dbda:	e66c      	b.n	800d8b6 <_vfiprintf_r+0x106>
 800dbdc:	9b03      	ldr	r3, [sp, #12]
 800dbde:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 800dbe2:	06d9      	lsls	r1, r3, #27
 800dbe4:	f100 82e1 	bmi.w	800e1aa <_vfiprintf_r+0x9fa>
 800dbe8:	9b03      	ldr	r3, [sp, #12]
 800dbea:	065a      	lsls	r2, r3, #25
 800dbec:	f140 830d 	bpl.w	800e20a <_vfiprintf_r+0xa5a>
 800dbf0:	9807      	ldr	r0, [sp, #28]
 800dbf2:	9905      	ldr	r1, [sp, #20]
 800dbf4:	6803      	ldr	r3, [r0, #0]
 800dbf6:	3004      	adds	r0, #4
 800dbf8:	9007      	str	r0, [sp, #28]
 800dbfa:	8019      	strh	r1, [r3, #0]
 800dbfc:	e61b      	b.n	800d836 <_vfiprintf_r+0x86>
 800dbfe:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 800dc02:	9a03      	ldr	r2, [sp, #12]
 800dc04:	4955      	ldr	r1, [pc, #340]	; (800dd5c <_vfiprintf_r+0x5ac>)
 800dc06:	06d0      	lsls	r0, r2, #27
 800dc08:	910d      	str	r1, [sp, #52]	; 0x34
 800dc0a:	d4ac      	bmi.n	800db66 <_vfiprintf_r+0x3b6>
 800dc0c:	9903      	ldr	r1, [sp, #12]
 800dc0e:	0649      	lsls	r1, r1, #25
 800dc10:	f140 82d6 	bpl.w	800e1c0 <_vfiprintf_r+0xa10>
 800dc14:	9807      	ldr	r0, [sp, #28]
 800dc16:	8802      	ldrh	r2, [r0, #0]
 800dc18:	3004      	adds	r0, #4
 800dc1a:	9007      	str	r0, [sp, #28]
 800dc1c:	1c11      	adds	r1, r2, #0
 800dc1e:	9803      	ldr	r0, [sp, #12]
 800dc20:	bf18      	it	ne
 800dc22:	2101      	movne	r1, #1
 800dc24:	4208      	tst	r0, r1
 800dc26:	d1a8      	bne.n	800db7a <_vfiprintf_r+0x3ca>
 800dc28:	2302      	movs	r3, #2
 800dc2a:	e70d      	b.n	800da48 <_vfiprintf_r+0x298>
 800dc2c:	9b07      	ldr	r3, [sp, #28]
 800dc2e:	2600      	movs	r6, #0
 800dc30:	f88d 651f 	strb.w	r6, [sp, #1311]	; 0x51f
 800dc34:	1d19      	adds	r1, r3, #4
 800dc36:	9107      	str	r1, [sp, #28]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	930a      	str	r3, [sp, #40]	; 0x28
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f000 82f2 	beq.w	800e226 <_vfiprintf_r+0xa76>
 800dc42:	2c00      	cmp	r4, #0
 800dc44:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc46:	f2c0 82e8 	blt.w	800e21a <_vfiprintf_r+0xa6a>
 800dc4a:	4631      	mov	r1, r6
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	f7fd fc9f 	bl	800b590 <memchr>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	f000 82fb 	beq.w	800e24e <_vfiprintf_r+0xa9e>
 800dc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc5a:	9609      	str	r6, [sp, #36]	; 0x24
 800dc5c:	1ac0      	subs	r0, r0, r3
 800dc5e:	9006      	str	r0, [sp, #24]
 800dc60:	42a0      	cmp	r0, r4
 800dc62:	bfc8      	it	gt
 800dc64:	9406      	strgt	r4, [sp, #24]
 800dc66:	e6d0      	b.n	800da0a <_vfiprintf_r+0x25a>
 800dc68:	9b03      	ldr	r3, [sp, #12]
 800dc6a:	f043 0301 	orr.w	r3, r3, #1
 800dc6e:	9303      	str	r3, [sp, #12]
 800dc70:	e61f      	b.n	800d8b2 <_vfiprintf_r+0x102>
 800dc72:	2a00      	cmp	r2, #0
 800dc74:	bf08      	it	eq
 800dc76:	2220      	moveq	r2, #32
 800dc78:	e61b      	b.n	800d8b2 <_vfiprintf_r+0x102>
 800dc7a:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f000 82b6 	beq.w	800e1f0 <_vfiprintf_r+0xa40>
 800dc84:	2001      	movs	r0, #1
 800dc86:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 800dc8a:	9004      	str	r0, [sp, #16]
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	9006      	str	r0, [sp, #24]
 800dc90:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 800dc94:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800dc98:	930a      	str	r3, [sp, #40]	; 0x28
 800dc9a:	e710      	b.n	800dabe <_vfiprintf_r+0x30e>
 800dc9c:	9b03      	ldr	r3, [sp, #12]
 800dc9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dca2:	9303      	str	r3, [sp, #12]
 800dca4:	e605      	b.n	800d8b2 <_vfiprintf_r+0x102>
 800dca6:	f817 3b01 	ldrb.w	r3, [r7], #1
 800dcaa:	2b2a      	cmp	r3, #42	; 0x2a
 800dcac:	f000 8256 	beq.w	800e15c <_vfiprintf_r+0x9ac>
 800dcb0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dcb4:	2400      	movs	r4, #0
 800dcb6:	2909      	cmp	r1, #9
 800dcb8:	f63f adfd 	bhi.w	800d8b6 <_vfiprintf_r+0x106>
 800dcbc:	4638      	mov	r0, r7
 800dcbe:	2400      	movs	r4, #0
 800dcc0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dcc4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800dcc8:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800dccc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dcd0:	2909      	cmp	r1, #9
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	d9f4      	bls.n	800dcc0 <_vfiprintf_r+0x510>
 800dcd6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800dcda:	e5ec      	b.n	800d8b6 <_vfiprintf_r+0x106>
 800dcdc:	222b      	movs	r2, #43	; 0x2b
 800dcde:	e5e8      	b.n	800d8b2 <_vfiprintf_r+0x102>
 800dce0:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800dce4:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800dce8:	f89d 151f 	ldrb.w	r1, [sp, #1311]	; 0x51f
 800dcec:	b179      	cbz	r1, 800dd0e <_vfiprintf_r+0x55e>
 800dcee:	3301      	adds	r3, #1
 800dcf0:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 800dcf4:	310f      	adds	r1, #15
 800dcf6:	6029      	str	r1, [r5, #0]
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	2b07      	cmp	r3, #7
 800dcfc:	440a      	add	r2, r1
 800dcfe:	6069      	str	r1, [r5, #4]
 800dd00:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800dd04:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800dd08:	f300 819d 	bgt.w	800e046 <_vfiprintf_r+0x896>
 800dd0c:	3508      	adds	r5, #8
 800dd0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd10:	b179      	cbz	r1, 800dd32 <_vfiprintf_r+0x582>
 800dd12:	3301      	adds	r3, #1
 800dd14:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 800dd18:	310c      	adds	r1, #12
 800dd1a:	6029      	str	r1, [r5, #0]
 800dd1c:	2102      	movs	r1, #2
 800dd1e:	2b07      	cmp	r3, #7
 800dd20:	440a      	add	r2, r1
 800dd22:	6069      	str	r1, [r5, #4]
 800dd24:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800dd28:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800dd2c:	f300 819a 	bgt.w	800e064 <_vfiprintf_r+0x8b4>
 800dd30:	3508      	adds	r5, #8
 800dd32:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dd34:	2880      	cmp	r0, #128	; 0x80
 800dd36:	f000 80d2 	beq.w	800dede <_vfiprintf_r+0x72e>
 800dd3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd3c:	9806      	ldr	r0, [sp, #24]
 800dd3e:	1a0c      	subs	r4, r1, r0
 800dd40:	2c00      	cmp	r4, #0
 800dd42:	dd3a      	ble.n	800ddba <_vfiprintf_r+0x60a>
 800dd44:	2c10      	cmp	r4, #16
 800dd46:	4e06      	ldr	r6, [pc, #24]	; (800dd60 <_vfiprintf_r+0x5b0>)
 800dd48:	bfc8      	it	gt
 800dd4a:	f04f 0810 	movgt.w	r8, #16
 800dd4e:	dc0c      	bgt.n	800dd6a <_vfiprintf_r+0x5ba>
 800dd50:	e027      	b.n	800dda2 <_vfiprintf_r+0x5f2>
 800dd52:	bf00      	nop
 800dd54:	08014420 	.word	0x08014420
 800dd58:	08014af0 	.word	0x08014af0
 800dd5c:	08014b04 	.word	0x08014b04
 800dd60:	08014430 	.word	0x08014430
 800dd64:	3c10      	subs	r4, #16
 800dd66:	2c10      	cmp	r4, #16
 800dd68:	dd1b      	ble.n	800dda2 <_vfiprintf_r+0x5f2>
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	3210      	adds	r2, #16
 800dd6e:	e885 0140 	stmia.w	r5, {r6, r8}
 800dd72:	3508      	adds	r5, #8
 800dd74:	2b07      	cmp	r3, #7
 800dd76:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800dd7a:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800dd7e:	ddf1      	ble.n	800dd64 <_vfiprintf_r+0x5b4>
 800dd80:	4658      	mov	r0, fp
 800dd82:	4649      	mov	r1, r9
 800dd84:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800dd88:	4655      	mov	r5, sl
 800dd8a:	f7ff fcd1 	bl	800d730 <__sprint_r>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	f040 8096 	bne.w	800dec0 <_vfiprintf_r+0x710>
 800dd94:	3c10      	subs	r4, #16
 800dd96:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800dd9a:	2c10      	cmp	r4, #16
 800dd9c:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800dda0:	dce3      	bgt.n	800dd6a <_vfiprintf_r+0x5ba>
 800dda2:	3301      	adds	r3, #1
 800dda4:	1912      	adds	r2, r2, r4
 800dda6:	2b07      	cmp	r3, #7
 800dda8:	602e      	str	r6, [r5, #0]
 800ddaa:	606c      	str	r4, [r5, #4]
 800ddac:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800ddb0:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800ddb4:	f300 8138 	bgt.w	800e028 <_vfiprintf_r+0x878>
 800ddb8:	3508      	adds	r5, #8
 800ddba:	3301      	adds	r3, #1
 800ddbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ddbe:	9806      	ldr	r0, [sp, #24]
 800ddc0:	2b07      	cmp	r3, #7
 800ddc2:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800ddc6:	6029      	str	r1, [r5, #0]
 800ddc8:	4402      	add	r2, r0
 800ddca:	6068      	str	r0, [r5, #4]
 800ddcc:	bfd8      	it	le
 800ddce:	f105 0108 	addle.w	r1, r5, #8
 800ddd2:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800ddd6:	f300 80ba 	bgt.w	800df4e <_vfiprintf_r+0x79e>
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	0758      	lsls	r0, r3, #29
 800ddde:	d536      	bpl.n	800de4e <_vfiprintf_r+0x69e>
 800dde0:	9d08      	ldr	r5, [sp, #32]
 800dde2:	9b04      	ldr	r3, [sp, #16]
 800dde4:	1aec      	subs	r4, r5, r3
 800dde6:	2c00      	cmp	r4, #0
 800dde8:	dd31      	ble.n	800de4e <_vfiprintf_r+0x69e>
 800ddea:	2c10      	cmp	r4, #16
 800ddec:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800ddf0:	bfd8      	it	le
 800ddf2:	4ea6      	ldrle	r6, [pc, #664]	; (800e08c <_vfiprintf_r+0x8dc>)
 800ddf4:	dd20      	ble.n	800de38 <_vfiprintf_r+0x688>
 800ddf6:	2510      	movs	r5, #16
 800ddf8:	4ea4      	ldr	r6, [pc, #656]	; (800e08c <_vfiprintf_r+0x8dc>)
 800ddfa:	e002      	b.n	800de02 <_vfiprintf_r+0x652>
 800ddfc:	3c10      	subs	r4, #16
 800ddfe:	2c10      	cmp	r4, #16
 800de00:	dd1a      	ble.n	800de38 <_vfiprintf_r+0x688>
 800de02:	3301      	adds	r3, #1
 800de04:	3210      	adds	r2, #16
 800de06:	600e      	str	r6, [r1, #0]
 800de08:	604d      	str	r5, [r1, #4]
 800de0a:	3108      	adds	r1, #8
 800de0c:	2b07      	cmp	r3, #7
 800de0e:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800de12:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800de16:	ddf1      	ble.n	800ddfc <_vfiprintf_r+0x64c>
 800de18:	4658      	mov	r0, fp
 800de1a:	4649      	mov	r1, r9
 800de1c:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800de20:	f7ff fc86 	bl	800d730 <__sprint_r>
 800de24:	2800      	cmp	r0, #0
 800de26:	d14b      	bne.n	800dec0 <_vfiprintf_r+0x710>
 800de28:	3c10      	subs	r4, #16
 800de2a:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800de2e:	2c10      	cmp	r4, #16
 800de30:	4651      	mov	r1, sl
 800de32:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800de36:	dce4      	bgt.n	800de02 <_vfiprintf_r+0x652>
 800de38:	3301      	adds	r3, #1
 800de3a:	18a2      	adds	r2, r4, r2
 800de3c:	2b07      	cmp	r3, #7
 800de3e:	600e      	str	r6, [r1, #0]
 800de40:	604c      	str	r4, [r1, #4]
 800de42:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800de46:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800de4a:	f300 8194 	bgt.w	800e176 <_vfiprintf_r+0x9c6>
 800de4e:	9d05      	ldr	r5, [sp, #20]
 800de50:	9b04      	ldr	r3, [sp, #16]
 800de52:	9808      	ldr	r0, [sp, #32]
 800de54:	4283      	cmp	r3, r0
 800de56:	bfac      	ite	ge
 800de58:	18ed      	addge	r5, r5, r3
 800de5a:	182d      	addlt	r5, r5, r0
 800de5c:	9505      	str	r5, [sp, #20]
 800de5e:	bb3a      	cbnz	r2, 800deb0 <_vfiprintf_r+0x700>
 800de60:	2300      	movs	r3, #0
 800de62:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800de66:	783b      	ldrb	r3, [r7, #0]
 800de68:	4655      	mov	r5, sl
 800de6a:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 800de6e:	bf18      	it	ne
 800de70:	2201      	movne	r2, #1
 800de72:	2b00      	cmp	r3, #0
 800de74:	bf0c      	ite	eq
 800de76:	2300      	moveq	r3, #0
 800de78:	f002 0301 	andne.w	r3, r2, #1
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f47f ace7 	bne.w	800d850 <_vfiprintf_r+0xa0>
 800de82:	463c      	mov	r4, r7
 800de84:	e508      	b.n	800d898 <_vfiprintf_r+0xe8>
 800de86:	2b00      	cmp	r3, #0
 800de88:	d16d      	bne.n	800df66 <_vfiprintf_r+0x7b6>
 800de8a:	9803      	ldr	r0, [sp, #12]
 800de8c:	07c2      	lsls	r2, r0, #31
 800de8e:	bf5e      	ittt	pl
 800de90:	9306      	strpl	r3, [sp, #24]
 800de92:	f50d 63a2 	addpl.w	r3, sp, #1296	; 0x510
 800de96:	930a      	strpl	r3, [sp, #40]	; 0x28
 800de98:	f57f adb6 	bpl.w	800da08 <_vfiprintf_r+0x258>
 800de9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de9e:	9306      	str	r3, [sp, #24]
 800dea0:	2330      	movs	r3, #48	; 0x30
 800dea2:	f88d 350f 	strb.w	r3, [sp, #1295]	; 0x50f
 800dea6:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800deaa:	330f      	adds	r3, #15
 800deac:	930a      	str	r3, [sp, #40]	; 0x28
 800deae:	e5ab      	b.n	800da08 <_vfiprintf_r+0x258>
 800deb0:	4658      	mov	r0, fp
 800deb2:	4649      	mov	r1, r9
 800deb4:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800deb8:	f7ff fc3a 	bl	800d730 <__sprint_r>
 800debc:	2800      	cmp	r0, #0
 800debe:	d0cf      	beq.n	800de60 <_vfiprintf_r+0x6b0>
 800dec0:	464c      	mov	r4, r9
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dec8:	9b05      	ldr	r3, [sp, #20]
 800deca:	bf18      	it	ne
 800decc:	f04f 33ff 	movne.w	r3, #4294967295
 800ded0:	9305      	str	r3, [sp, #20]
 800ded2:	9805      	ldr	r0, [sp, #20]
 800ded4:	b049      	add	sp, #292	; 0x124
 800ded6:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 800deda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dede:	9908      	ldr	r1, [sp, #32]
 800dee0:	9804      	ldr	r0, [sp, #16]
 800dee2:	1a0c      	subs	r4, r1, r0
 800dee4:	2c00      	cmp	r4, #0
 800dee6:	f77f af28 	ble.w	800dd3a <_vfiprintf_r+0x58a>
 800deea:	2c10      	cmp	r4, #16
 800deec:	4e68      	ldr	r6, [pc, #416]	; (800e090 <_vfiprintf_r+0x8e0>)
 800deee:	bfc8      	it	gt
 800def0:	f04f 0810 	movgt.w	r8, #16
 800def4:	dc03      	bgt.n	800defe <_vfiprintf_r+0x74e>
 800def6:	e01d      	b.n	800df34 <_vfiprintf_r+0x784>
 800def8:	3c10      	subs	r4, #16
 800defa:	2c10      	cmp	r4, #16
 800defc:	dd1a      	ble.n	800df34 <_vfiprintf_r+0x784>
 800defe:	3301      	adds	r3, #1
 800df00:	3210      	adds	r2, #16
 800df02:	e885 0140 	stmia.w	r5, {r6, r8}
 800df06:	3508      	adds	r5, #8
 800df08:	2b07      	cmp	r3, #7
 800df0a:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800df0e:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800df12:	ddf1      	ble.n	800def8 <_vfiprintf_r+0x748>
 800df14:	4658      	mov	r0, fp
 800df16:	4649      	mov	r1, r9
 800df18:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800df1c:	4655      	mov	r5, sl
 800df1e:	f7ff fc07 	bl	800d730 <__sprint_r>
 800df22:	2800      	cmp	r0, #0
 800df24:	d1cc      	bne.n	800dec0 <_vfiprintf_r+0x710>
 800df26:	3c10      	subs	r4, #16
 800df28:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800df2c:	2c10      	cmp	r4, #16
 800df2e:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800df32:	dce4      	bgt.n	800defe <_vfiprintf_r+0x74e>
 800df34:	3301      	adds	r3, #1
 800df36:	1912      	adds	r2, r2, r4
 800df38:	2b07      	cmp	r3, #7
 800df3a:	602e      	str	r6, [r5, #0]
 800df3c:	606c      	str	r4, [r5, #4]
 800df3e:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800df42:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 800df46:	f300 8144 	bgt.w	800e1d2 <_vfiprintf_r+0xa22>
 800df4a:	3508      	adds	r5, #8
 800df4c:	e6f5      	b.n	800dd3a <_vfiprintf_r+0x58a>
 800df4e:	4658      	mov	r0, fp
 800df50:	4649      	mov	r1, r9
 800df52:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800df56:	f7ff fbeb 	bl	800d730 <__sprint_r>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d1b0      	bne.n	800dec0 <_vfiprintf_r+0x710>
 800df5e:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800df62:	4651      	mov	r1, sl
 800df64:	e739      	b.n	800ddda <_vfiprintf_r+0x62a>
 800df66:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800df6a:	9106      	str	r1, [sp, #24]
 800df6c:	930a      	str	r3, [sp, #40]	; 0x28
 800df6e:	e54b      	b.n	800da08 <_vfiprintf_r+0x258>
 800df70:	4658      	mov	r0, fp
 800df72:	4621      	mov	r1, r4
 800df74:	f000 f9f4 	bl	800e360 <__swsetup_r>
 800df78:	2800      	cmp	r0, #0
 800df7a:	f040 816c 	bne.w	800e256 <_vfiprintf_r+0xaa6>
 800df7e:	89a5      	ldrh	r5, [r4, #12]
 800df80:	b2ab      	uxth	r3, r5
 800df82:	f003 031a 	and.w	r3, r3, #26
 800df86:	2b0a      	cmp	r3, #10
 800df88:	f47f ac38 	bne.w	800d7fc <_vfiprintf_r+0x4c>
 800df8c:	89e6      	ldrh	r6, [r4, #14]
 800df8e:	0432      	lsls	r2, r6, #16
 800df90:	f53f ac34 	bmi.w	800d7fc <_vfiprintf_r+0x4c>
 800df94:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
 800df98:	463a      	mov	r2, r7
 800df9a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800df9e:	4658      	mov	r0, fp
 800dfa0:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 800dfa4:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 800dfa8:	9b07      	ldr	r3, [sp, #28]
 800dfaa:	f025 0502 	bic.w	r5, r5, #2
 800dfae:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800dfb2:	f8ad 544c 	strh.w	r5, [sp, #1100]	; 0x44c
 800dfb6:	f8cd e4a4 	str.w	lr, [sp, #1188]	; 0x4a4
 800dfba:	ad10      	add	r5, sp, #64	; 0x40
 800dfbc:	f8ad 644e 	strh.w	r6, [sp, #1102]	; 0x44e
 800dfc0:	f8cd 5440 	str.w	r5, [sp, #1088]	; 0x440
 800dfc4:	f8cd 5450 	str.w	r5, [sp, #1104]	; 0x450
 800dfc8:	2500      	movs	r5, #0
 800dfca:	f8cd c45c 	str.w	ip, [sp, #1116]	; 0x45c
 800dfce:	f8cd 8464 	str.w	r8, [sp, #1124]	; 0x464
 800dfd2:	f8cd 7448 	str.w	r7, [sp, #1096]	; 0x448
 800dfd6:	f8cd 7454 	str.w	r7, [sp, #1108]	; 0x454
 800dfda:	f8cd 5458 	str.w	r5, [sp, #1112]	; 0x458
 800dfde:	f7ff fbe7 	bl	800d7b0 <_vfiprintf_r>
 800dfe2:	42a8      	cmp	r0, r5
 800dfe4:	9005      	str	r0, [sp, #20]
 800dfe6:	db0a      	blt.n	800dffe <_vfiprintf_r+0x84e>
 800dfe8:	4658      	mov	r0, fp
 800dfea:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 800dfee:	f001 fa8f 	bl	800f510 <_fflush_r>
 800dff2:	9b05      	ldr	r3, [sp, #20]
 800dff4:	42a8      	cmp	r0, r5
 800dff6:	bf18      	it	ne
 800dff8:	f04f 33ff 	movne.w	r3, #4294967295
 800dffc:	9305      	str	r3, [sp, #20]
 800dffe:	f8bd 344c 	ldrh.w	r3, [sp, #1100]	; 0x44c
 800e002:	065b      	lsls	r3, r3, #25
 800e004:	f57f af65 	bpl.w	800ded2 <_vfiprintf_r+0x722>
 800e008:	89a3      	ldrh	r3, [r4, #12]
 800e00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e00e:	81a3      	strh	r3, [r4, #12]
 800e010:	e75f      	b.n	800ded2 <_vfiprintf_r+0x722>
 800e012:	4658      	mov	r0, fp
 800e014:	4649      	mov	r1, r9
 800e016:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800e01a:	f7ff fb89 	bl	800d730 <__sprint_r>
 800e01e:	2800      	cmp	r0, #0
 800e020:	f47f af4e 	bne.w	800dec0 <_vfiprintf_r+0x710>
 800e024:	4655      	mov	r5, sl
 800e026:	e434      	b.n	800d892 <_vfiprintf_r+0xe2>
 800e028:	4658      	mov	r0, fp
 800e02a:	4649      	mov	r1, r9
 800e02c:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800e030:	f7ff fb7e 	bl	800d730 <__sprint_r>
 800e034:	2800      	cmp	r0, #0
 800e036:	f47f af43 	bne.w	800dec0 <_vfiprintf_r+0x710>
 800e03a:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800e03e:	4655      	mov	r5, sl
 800e040:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800e044:	e6b9      	b.n	800ddba <_vfiprintf_r+0x60a>
 800e046:	4658      	mov	r0, fp
 800e048:	4649      	mov	r1, r9
 800e04a:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800e04e:	f7ff fb6f 	bl	800d730 <__sprint_r>
 800e052:	2800      	cmp	r0, #0
 800e054:	f47f af34 	bne.w	800dec0 <_vfiprintf_r+0x710>
 800e058:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800e05c:	4655      	mov	r5, sl
 800e05e:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800e062:	e654      	b.n	800dd0e <_vfiprintf_r+0x55e>
 800e064:	4658      	mov	r0, fp
 800e066:	4649      	mov	r1, r9
 800e068:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800e06c:	f7ff fb60 	bl	800d730 <__sprint_r>
 800e070:	2800      	cmp	r0, #0
 800e072:	f47f af25 	bne.w	800dec0 <_vfiprintf_r+0x710>
 800e076:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800e07a:	4655      	mov	r5, sl
 800e07c:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800e080:	e657      	b.n	800dd32 <_vfiprintf_r+0x582>
 800e082:	f001 fb6d 	bl	800f760 <__sinit>
 800e086:	f7ff bba1 	b.w	800d7cc <_vfiprintf_r+0x1c>
 800e08a:	bf00      	nop
 800e08c:	08014420 	.word	0x08014420
 800e090:	08014430 	.word	0x08014430
 800e094:	2a09      	cmp	r2, #9
 800e096:	d97a      	bls.n	800e18e <_vfiprintf_r+0x9de>
 800e098:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
 800e09c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800e0a0:	300f      	adds	r0, #15
 800e0a2:	fbac 1302 	umull	r1, r3, ip, r2
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	3801      	subs	r0, #1
 800e0aa:	08db      	lsrs	r3, r3, #3
 800e0ac:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 800e0b0:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	3630      	adds	r6, #48	; 0x30
 800e0b8:	700e      	strb	r6, [r1, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1f1      	bne.n	800e0a2 <_vfiprintf_r+0x8f2>
 800e0be:	9b02      	ldr	r3, [sp, #8]
 800e0c0:	910a      	str	r1, [sp, #40]	; 0x28
 800e0c2:	1a5b      	subs	r3, r3, r1
 800e0c4:	9306      	str	r3, [sp, #24]
 800e0c6:	e49f      	b.n	800da08 <_vfiprintf_r+0x258>
 800e0c8:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800e0cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e0ce:	330f      	adds	r3, #15
 800e0d0:	f002 000f 	and.w	r0, r2, #15
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	0912      	lsrs	r2, r2, #4
 800e0da:	5c30      	ldrb	r0, [r6, r0]
 800e0dc:	7008      	strb	r0, [r1, #0]
 800e0de:	d1f7      	bne.n	800e0d0 <_vfiprintf_r+0x920>
 800e0e0:	9b02      	ldr	r3, [sp, #8]
 800e0e2:	910a      	str	r1, [sp, #40]	; 0x28
 800e0e4:	1a5b      	subs	r3, r3, r1
 800e0e6:	9306      	str	r3, [sp, #24]
 800e0e8:	e48e      	b.n	800da08 <_vfiprintf_r+0x258>
 800e0ea:	9a03      	ldr	r2, [sp, #12]
 800e0ec:	f012 0140 	ands.w	r1, r2, #64	; 0x40
 800e0f0:	d06b      	beq.n	800e1ca <_vfiprintf_r+0xa1a>
 800e0f2:	9807      	ldr	r0, [sp, #28]
 800e0f4:	8802      	ldrh	r2, [r0, #0]
 800e0f6:	3004      	adds	r0, #4
 800e0f8:	9007      	str	r0, [sp, #28]
 800e0fa:	1c11      	adds	r1, r2, #0
 800e0fc:	bf18      	it	ne
 800e0fe:	2101      	movne	r1, #1
 800e100:	e4a2      	b.n	800da48 <_vfiprintf_r+0x298>
 800e102:	9b03      	ldr	r3, [sp, #12]
 800e104:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e108:	9b07      	ldr	r3, [sp, #28]
 800e10a:	d056      	beq.n	800e1ba <_vfiprintf_r+0xa0a>
 800e10c:	881a      	ldrh	r2, [r3, #0]
 800e10e:	2301      	movs	r3, #1
 800e110:	e4a9      	b.n	800da66 <_vfiprintf_r+0x2b6>
 800e112:	9b03      	ldr	r3, [sp, #12]
 800e114:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e118:	9b07      	ldr	r3, [sp, #28]
 800e11a:	bf0c      	ite	eq
 800e11c:	681a      	ldreq	r2, [r3, #0]
 800e11e:	f9b3 2000 	ldrshne.w	r2, [r3]
 800e122:	3304      	adds	r3, #4
 800e124:	9307      	str	r3, [sp, #28]
 800e126:	2a00      	cmp	r2, #0
 800e128:	f6bf ac3b 	bge.w	800d9a2 <_vfiprintf_r+0x1f2>
 800e12c:	4252      	negs	r2, r2
 800e12e:	1c11      	adds	r1, r2, #0
 800e130:	bf18      	it	ne
 800e132:	2101      	movne	r1, #1
 800e134:	232d      	movs	r3, #45	; 0x2d
 800e136:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 800e13a:	2301      	movs	r3, #1
 800e13c:	e435      	b.n	800d9aa <_vfiprintf_r+0x1fa>
 800e13e:	4658      	mov	r0, fp
 800e140:	4649      	mov	r1, r9
 800e142:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800e146:	f7ff faf3 	bl	800d730 <__sprint_r>
 800e14a:	2800      	cmp	r0, #0
 800e14c:	f47f aeb8 	bne.w	800dec0 <_vfiprintf_r+0x710>
 800e150:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800e154:	4655      	mov	r5, sl
 800e156:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800e15a:	e5c5      	b.n	800dce8 <_vfiprintf_r+0x538>
 800e15c:	9b07      	ldr	r3, [sp, #28]
 800e15e:	681c      	ldr	r4, [r3, #0]
 800e160:	3304      	adds	r3, #4
 800e162:	2c00      	cmp	r4, #0
 800e164:	bfbc      	itt	lt
 800e166:	9307      	strlt	r3, [sp, #28]
 800e168:	f04f 34ff 	movlt.w	r4, #4294967295
 800e16c:	f6ff aba1 	blt.w	800d8b2 <_vfiprintf_r+0x102>
 800e170:	9307      	str	r3, [sp, #28]
 800e172:	f7ff bb9e 	b.w	800d8b2 <_vfiprintf_r+0x102>
 800e176:	4658      	mov	r0, fp
 800e178:	4649      	mov	r1, r9
 800e17a:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800e17e:	f7ff fad7 	bl	800d730 <__sprint_r>
 800e182:	2800      	cmp	r0, #0
 800e184:	f47f ae9c 	bne.w	800dec0 <_vfiprintf_r+0x710>
 800e188:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800e18c:	e65f      	b.n	800de4e <_vfiprintf_r+0x69e>
 800e18e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e190:	3230      	adds	r2, #48	; 0x30
 800e192:	f88d 250f 	strb.w	r2, [sp, #1295]	; 0x50f
 800e196:	9306      	str	r3, [sp, #24]
 800e198:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800e19c:	330f      	adds	r3, #15
 800e19e:	930a      	str	r3, [sp, #40]	; 0x28
 800e1a0:	e432      	b.n	800da08 <_vfiprintf_r+0x258>
 800e1a2:	9b02      	ldr	r3, [sp, #8]
 800e1a4:	1a1b      	subs	r3, r3, r0
 800e1a6:	9306      	str	r3, [sp, #24]
 800e1a8:	e42e      	b.n	800da08 <_vfiprintf_r+0x258>
 800e1aa:	9807      	ldr	r0, [sp, #28]
 800e1ac:	9905      	ldr	r1, [sp, #20]
 800e1ae:	6803      	ldr	r3, [r0, #0]
 800e1b0:	3004      	adds	r0, #4
 800e1b2:	9007      	str	r0, [sp, #28]
 800e1b4:	6019      	str	r1, [r3, #0]
 800e1b6:	f7ff bb3e 	b.w	800d836 <_vfiprintf_r+0x86>
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e452      	b.n	800da66 <_vfiprintf_r+0x2b6>
 800e1c0:	9907      	ldr	r1, [sp, #28]
 800e1c2:	680a      	ldr	r2, [r1, #0]
 800e1c4:	3104      	adds	r1, #4
 800e1c6:	9107      	str	r1, [sp, #28]
 800e1c8:	e4d1      	b.n	800db6e <_vfiprintf_r+0x3be>
 800e1ca:	9b07      	ldr	r3, [sp, #28]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	e449      	b.n	800da66 <_vfiprintf_r+0x2b6>
 800e1d2:	4658      	mov	r0, fp
 800e1d4:	4649      	mov	r1, r9
 800e1d6:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800e1da:	f7ff faa9 	bl	800d730 <__sprint_r>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	f47f ae6e 	bne.w	800dec0 <_vfiprintf_r+0x710>
 800e1e4:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800e1e8:	4655      	mov	r5, sl
 800e1ea:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800e1ee:	e5a4      	b.n	800dd3a <_vfiprintf_r+0x58a>
 800e1f0:	f8dd 3518 	ldr.w	r3, [sp, #1304]	; 0x518
 800e1f4:	464c      	mov	r4, r9
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f43f ae63 	beq.w	800dec2 <_vfiprintf_r+0x712>
 800e1fc:	4658      	mov	r0, fp
 800e1fe:	4649      	mov	r1, r9
 800e200:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800e204:	f7ff fa94 	bl	800d730 <__sprint_r>
 800e208:	e65b      	b.n	800dec2 <_vfiprintf_r+0x712>
 800e20a:	9a07      	ldr	r2, [sp, #28]
 800e20c:	9805      	ldr	r0, [sp, #20]
 800e20e:	6813      	ldr	r3, [r2, #0]
 800e210:	3204      	adds	r2, #4
 800e212:	9207      	str	r2, [sp, #28]
 800e214:	6018      	str	r0, [r3, #0]
 800e216:	f7ff bb0e 	b.w	800d836 <_vfiprintf_r+0x86>
 800e21a:	9609      	str	r6, [sp, #36]	; 0x24
 800e21c:	f7fe f828 	bl	800c270 <strlen>
 800e220:	9006      	str	r0, [sp, #24]
 800e222:	f7ff bbf2 	b.w	800da0a <_vfiprintf_r+0x25a>
 800e226:	4b0e      	ldr	r3, [pc, #56]	; (800e260 <_vfiprintf_r+0xab0>)
 800e228:	2c06      	cmp	r4, #6
 800e22a:	bf28      	it	cs
 800e22c:	2406      	movcs	r4, #6
 800e22e:	9406      	str	r4, [sp, #24]
 800e230:	930a      	str	r3, [sp, #40]	; 0x28
 800e232:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800e236:	9304      	str	r3, [sp, #16]
 800e238:	e441      	b.n	800dabe <_vfiprintf_r+0x30e>
 800e23a:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800e23e:	4e09      	ldr	r6, [pc, #36]	; (800e264 <_vfiprintf_r+0xab4>)
 800e240:	e47d      	b.n	800db3e <_vfiprintf_r+0x38e>
 800e242:	9b02      	ldr	r3, [sp, #8]
 800e244:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e246:	1a1b      	subs	r3, r3, r0
 800e248:	9306      	str	r3, [sp, #24]
 800e24a:	f7ff bbdd 	b.w	800da08 <_vfiprintf_r+0x258>
 800e24e:	9406      	str	r4, [sp, #24]
 800e250:	9009      	str	r0, [sp, #36]	; 0x24
 800e252:	f7ff bbda 	b.w	800da0a <_vfiprintf_r+0x25a>
 800e256:	f04f 35ff 	mov.w	r5, #4294967295
 800e25a:	9505      	str	r5, [sp, #20]
 800e25c:	e639      	b.n	800ded2 <_vfiprintf_r+0x722>
 800e25e:	bf00      	nop
 800e260:	08014b18 	.word	0x08014b18
 800e264:	08014420 	.word	0x08014420

0800e268 <vfiprintf>:
 800e268:	b430      	push	{r4, r5}
 800e26a:	f240 0448 	movw	r4, #72	; 0x48
 800e26e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800e272:	460d      	mov	r5, r1
 800e274:	4613      	mov	r3, r2
 800e276:	4601      	mov	r1, r0
 800e278:	462a      	mov	r2, r5
 800e27a:	6820      	ldr	r0, [r4, #0]
 800e27c:	bc30      	pop	{r4, r5}
 800e27e:	f7ff ba97 	b.w	800d7b0 <_vfiprintf_r>
 800e282:	bf00      	nop
	...

0800e290 <__swbuf_r>:
 800e290:	b570      	push	{r4, r5, r6, lr}
 800e292:	4604      	mov	r4, r0
 800e294:	460d      	mov	r5, r1
 800e296:	4616      	mov	r6, r2
 800e298:	b110      	cbz	r0, 800e2a0 <__swbuf_r+0x10>
 800e29a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d044      	beq.n	800e32a <__swbuf_r+0x9a>
 800e2a0:	89b2      	ldrh	r2, [r6, #12]
 800e2a2:	69b1      	ldr	r1, [r6, #24]
 800e2a4:	b293      	uxth	r3, r2
 800e2a6:	60b1      	str	r1, [r6, #8]
 800e2a8:	0719      	lsls	r1, r3, #28
 800e2aa:	d52d      	bpl.n	800e308 <__swbuf_r+0x78>
 800e2ac:	6931      	ldr	r1, [r6, #16]
 800e2ae:	2900      	cmp	r1, #0
 800e2b0:	d02a      	beq.n	800e308 <__swbuf_r+0x78>
 800e2b2:	049b      	lsls	r3, r3, #18
 800e2b4:	bf5e      	ittt	pl
 800e2b6:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800e2ba:	81b2      	strhpl	r2, [r6, #12]
 800e2bc:	6e73      	ldrpl	r3, [r6, #100]	; 0x64
 800e2be:	6972      	ldr	r2, [r6, #20]
 800e2c0:	bf5c      	itt	pl
 800e2c2:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 800e2c6:	6673      	strpl	r3, [r6, #100]	; 0x64
 800e2c8:	6833      	ldr	r3, [r6, #0]
 800e2ca:	1a59      	subs	r1, r3, r1
 800e2cc:	4291      	cmp	r1, r2
 800e2ce:	da24      	bge.n	800e31a <__swbuf_r+0x8a>
 800e2d0:	3101      	adds	r1, #1
 800e2d2:	68b2      	ldr	r2, [r6, #8]
 800e2d4:	b2ed      	uxtb	r5, r5
 800e2d6:	3a01      	subs	r2, #1
 800e2d8:	60b2      	str	r2, [r6, #8]
 800e2da:	f803 5b01 	strb.w	r5, [r3], #1
 800e2de:	6972      	ldr	r2, [r6, #20]
 800e2e0:	6033      	str	r3, [r6, #0]
 800e2e2:	428a      	cmp	r2, r1
 800e2e4:	d006      	beq.n	800e2f4 <__swbuf_r+0x64>
 800e2e6:	89b3      	ldrh	r3, [r6, #12]
 800e2e8:	2d0a      	cmp	r5, #10
 800e2ea:	bf14      	ite	ne
 800e2ec:	2300      	movne	r3, #0
 800e2ee:	f003 0301 	andeq.w	r3, r3, #1
 800e2f2:	b13b      	cbz	r3, 800e304 <__swbuf_r+0x74>
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	4631      	mov	r1, r6
 800e2f8:	f001 f90a 	bl	800f510 <_fflush_r>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	bf18      	it	ne
 800e300:	f04f 35ff 	movne.w	r5, #4294967295
 800e304:	4628      	mov	r0, r5
 800e306:	bd70      	pop	{r4, r5, r6, pc}
 800e308:	4620      	mov	r0, r4
 800e30a:	4631      	mov	r1, r6
 800e30c:	f000 f828 	bl	800e360 <__swsetup_r>
 800e310:	b970      	cbnz	r0, 800e330 <__swbuf_r+0xa0>
 800e312:	89b2      	ldrh	r2, [r6, #12]
 800e314:	6931      	ldr	r1, [r6, #16]
 800e316:	b293      	uxth	r3, r2
 800e318:	e7cb      	b.n	800e2b2 <__swbuf_r+0x22>
 800e31a:	4620      	mov	r0, r4
 800e31c:	4631      	mov	r1, r6
 800e31e:	f001 f8f7 	bl	800f510 <_fflush_r>
 800e322:	b970      	cbnz	r0, 800e342 <__swbuf_r+0xb2>
 800e324:	6833      	ldr	r3, [r6, #0]
 800e326:	2101      	movs	r1, #1
 800e328:	e7d3      	b.n	800e2d2 <__swbuf_r+0x42>
 800e32a:	f001 fa19 	bl	800f760 <__sinit>
 800e32e:	e7b7      	b.n	800e2a0 <__swbuf_r+0x10>
 800e330:	89b3      	ldrh	r3, [r6, #12]
 800e332:	f04f 35ff 	mov.w	r5, #4294967295
 800e336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e33a:	81b3      	strh	r3, [r6, #12]
 800e33c:	2309      	movs	r3, #9
 800e33e:	6023      	str	r3, [r4, #0]
 800e340:	e7e0      	b.n	800e304 <__swbuf_r+0x74>
 800e342:	f04f 35ff 	mov.w	r5, #4294967295
 800e346:	e7dd      	b.n	800e304 <__swbuf_r+0x74>

0800e348 <__swbuf>:
 800e348:	f240 0348 	movw	r3, #72	; 0x48
 800e34c:	460a      	mov	r2, r1
 800e34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e352:	4601      	mov	r1, r0
 800e354:	6818      	ldr	r0, [r3, #0]
 800e356:	e79b      	b.n	800e290 <__swbuf_r>
	...

0800e360 <__swsetup_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	4605      	mov	r5, r0
 800e364:	4b2b      	ldr	r3, [pc, #172]	; (800e414 <__swsetup_r+0xb4>)
 800e366:	460c      	mov	r4, r1
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	b110      	cbz	r0, 800e372 <__swsetup_r+0x12>
 800e36c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d03d      	beq.n	800e3ee <__swsetup_r+0x8e>
 800e372:	89a2      	ldrh	r2, [r4, #12]
 800e374:	b293      	uxth	r3, r2
 800e376:	0719      	lsls	r1, r3, #28
 800e378:	bf48      	it	mi
 800e37a:	6921      	ldrmi	r1, [r4, #16]
 800e37c:	d41d      	bmi.n	800e3ba <__swsetup_r+0x5a>
 800e37e:	06d8      	lsls	r0, r3, #27
 800e380:	d544      	bpl.n	800e40c <__swsetup_r+0xac>
 800e382:	0759      	lsls	r1, r3, #29
 800e384:	bf58      	it	pl
 800e386:	6921      	ldrpl	r1, [r4, #16]
 800e388:	d513      	bpl.n	800e3b2 <__swsetup_r+0x52>
 800e38a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e38c:	b149      	cbz	r1, 800e3a2 <__swsetup_r+0x42>
 800e38e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e392:	4299      	cmp	r1, r3
 800e394:	d003      	beq.n	800e39e <__swsetup_r+0x3e>
 800e396:	4628      	mov	r0, r5
 800e398:	f001 fb52 	bl	800fa40 <_free_r>
 800e39c:	89a2      	ldrh	r2, [r4, #12]
 800e39e:	2300      	movs	r3, #0
 800e3a0:	6323      	str	r3, [r4, #48]	; 0x30
 800e3a2:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800e3a6:	6921      	ldr	r1, [r4, #16]
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	6063      	str	r3, [r4, #4]
 800e3ac:	0412      	lsls	r2, r2, #16
 800e3ae:	6021      	str	r1, [r4, #0]
 800e3b0:	0c12      	lsrs	r2, r2, #16
 800e3b2:	f042 0308 	orr.w	r3, r2, #8
 800e3b6:	81a3      	strh	r3, [r4, #12]
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	b1d9      	cbz	r1, 800e3f4 <__swsetup_r+0x94>
 800e3bc:	f013 0201 	ands.w	r2, r3, #1
 800e3c0:	d007      	beq.n	800e3d2 <__swsetup_r+0x72>
 800e3c2:	6963      	ldr	r3, [r4, #20]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	60a2      	str	r2, [r4, #8]
 800e3c8:	425b      	negs	r3, r3
 800e3ca:	61a3      	str	r3, [r4, #24]
 800e3cc:	b139      	cbz	r1, 800e3de <__swsetup_r+0x7e>
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	bd38      	pop	{r3, r4, r5, pc}
 800e3d2:	079b      	lsls	r3, r3, #30
 800e3d4:	bf58      	it	pl
 800e3d6:	6962      	ldrpl	r2, [r4, #20]
 800e3d8:	60a2      	str	r2, [r4, #8]
 800e3da:	2900      	cmp	r1, #0
 800e3dc:	d1f7      	bne.n	800e3ce <__swsetup_r+0x6e>
 800e3de:	89a3      	ldrh	r3, [r4, #12]
 800e3e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e3e4:	bf14      	ite	ne
 800e3e6:	f04f 30ff 	movne.w	r0, #4294967295
 800e3ea:	2000      	moveq	r0, #0
 800e3ec:	bd38      	pop	{r3, r4, r5, pc}
 800e3ee:	f001 f9b7 	bl	800f760 <__sinit>
 800e3f2:	e7be      	b.n	800e372 <__swsetup_r+0x12>
 800e3f4:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800e3f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800e3fc:	d0de      	beq.n	800e3bc <__swsetup_r+0x5c>
 800e3fe:	4621      	mov	r1, r4
 800e400:	4628      	mov	r0, r5
 800e402:	f001 fc7d 	bl	800fd00 <__smakebuf_r>
 800e406:	89a3      	ldrh	r3, [r4, #12]
 800e408:	6921      	ldr	r1, [r4, #16]
 800e40a:	e7d7      	b.n	800e3bc <__swsetup_r+0x5c>
 800e40c:	f04f 30ff 	mov.w	r0, #4294967295
 800e410:	bd38      	pop	{r3, r4, r5, pc}
 800e412:	bf00      	nop
 800e414:	20000048 	.word	0x20000048
	...

0800e420 <__register_exitproc>:
 800e420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e424:	4604      	mov	r4, r0
 800e426:	4828      	ldr	r0, [pc, #160]	; (800e4c8 <__register_exitproc+0xa8>)
 800e428:	b084      	sub	sp, #16
 800e42a:	6805      	ldr	r5, [r0, #0]
 800e42c:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 800e430:	2e00      	cmp	r6, #0
 800e432:	d044      	beq.n	800e4be <__register_exitproc+0x9e>
 800e434:	6870      	ldr	r0, [r6, #4]
 800e436:	281f      	cmp	r0, #31
 800e438:	dd1e      	ble.n	800e478 <__register_exitproc+0x58>
 800e43a:	4824      	ldr	r0, [pc, #144]	; (800e4cc <__register_exitproc+0xac>)
 800e43c:	b910      	cbnz	r0, 800e444 <__register_exitproc+0x24>
 800e43e:	f04f 30ff 	mov.w	r0, #4294967295
 800e442:	e020      	b.n	800e486 <__register_exitproc+0x66>
 800e444:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e448:	9103      	str	r1, [sp, #12]
 800e44a:	9202      	str	r2, [sp, #8]
 800e44c:	9301      	str	r3, [sp, #4]
 800e44e:	f7fc fdd7 	bl	800b000 <malloc>
 800e452:	9903      	ldr	r1, [sp, #12]
 800e454:	9a02      	ldr	r2, [sp, #8]
 800e456:	9b01      	ldr	r3, [sp, #4]
 800e458:	4606      	mov	r6, r0
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d0ef      	beq.n	800e43e <__register_exitproc+0x1e>
 800e45e:	f8d5 c148 	ldr.w	ip, [r5, #328]	; 0x148
 800e462:	2700      	movs	r7, #0
 800e464:	4638      	mov	r0, r7
 800e466:	6077      	str	r7, [r6, #4]
 800e468:	f8c6 c000 	str.w	ip, [r6]
 800e46c:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 800e470:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
 800e474:	f8c6 718c 	str.w	r7, [r6, #396]	; 0x18c
 800e478:	b944      	cbnz	r4, 800e48c <__register_exitproc+0x6c>
 800e47a:	1c83      	adds	r3, r0, #2
 800e47c:	1c42      	adds	r2, r0, #1
 800e47e:	2000      	movs	r0, #0
 800e480:	6072      	str	r2, [r6, #4]
 800e482:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800e486:	b004      	add	sp, #16
 800e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e48c:	2501      	movs	r5, #1
 800e48e:	eb06 0880 	add.w	r8, r6, r0, lsl #2
 800e492:	f8d6 c188 	ldr.w	ip, [r6, #392]	; 0x188
 800e496:	4647      	mov	r7, r8
 800e498:	4085      	lsls	r5, r0
 800e49a:	2c02      	cmp	r4, #2
 800e49c:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 800e4a0:	bf08      	it	eq
 800e4a2:	f8d6 318c 	ldreq.w	r3, [r6, #396]	; 0x18c
 800e4a6:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800e4aa:	ea4c 0205 	orr.w	r2, ip, r5
 800e4ae:	bf08      	it	eq
 800e4b0:	431d      	orreq	r5, r3
 800e4b2:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
 800e4b6:	bf08      	it	eq
 800e4b8:	f8c6 518c 	streq.w	r5, [r6, #396]	; 0x18c
 800e4bc:	e7dd      	b.n	800e47a <__register_exitproc+0x5a>
 800e4be:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800e4c2:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 800e4c6:	e7b5      	b.n	800e434 <__register_exitproc+0x14>
 800e4c8:	080143f0 	.word	0x080143f0
 800e4cc:	0800b001 	.word	0x0800b001

0800e4d0 <quorem>:
 800e4d0:	6903      	ldr	r3, [r0, #16]
 800e4d2:	690a      	ldr	r2, [r1, #16]
 800e4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d8:	4680      	mov	r8, r0
 800e4da:	b083      	sub	sp, #12
 800e4dc:	2000      	movs	r0, #0
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	4689      	mov	r9, r1
 800e4e2:	9200      	str	r2, [sp, #0]
 800e4e4:	f300 8093 	bgt.w	800e60e <quorem+0x13e>
 800e4e8:	3203      	adds	r2, #3
 800e4ea:	9b00      	ldr	r3, [sp, #0]
 800e4ec:	f101 0514 	add.w	r5, r1, #20
 800e4f0:	0092      	lsls	r2, r2, #2
 800e4f2:	1e5c      	subs	r4, r3, #1
 800e4f4:	f108 0314 	add.w	r3, r8, #20
 800e4f8:	9301      	str	r3, [sp, #4]
 800e4fa:	188b      	adds	r3, r1, r2
 800e4fc:	4442      	add	r2, r8
 800e4fe:	1d1f      	adds	r7, r3, #4
 800e500:	6859      	ldr	r1, [r3, #4]
 800e502:	6850      	ldr	r0, [r2, #4]
 800e504:	3101      	adds	r1, #1
 800e506:	f002 ff6b 	bl	80113e0 <__aeabi_uidiv>
 800e50a:	4606      	mov	r6, r0
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d042      	beq.n	800e596 <quorem+0xc6>
 800e510:	2000      	movs	r0, #0
 800e512:	9a01      	ldr	r2, [sp, #4]
 800e514:	462b      	mov	r3, r5
 800e516:	4686      	mov	lr, r0
 800e518:	f853 cb04 	ldr.w	ip, [r3], #4
 800e51c:	6811      	ldr	r1, [r2, #0]
 800e51e:	fa1f fb8c 	uxth.w	fp, ip
 800e522:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800e526:	fa1f fa81 	uxth.w	sl, r1
 800e52a:	fb06 0b0b 	mla	fp, r6, fp, r0
 800e52e:	44d6      	add	lr, sl
 800e530:	fb06 f00c 	mul.w	r0, r6, ip
 800e534:	eb00 401b 	add.w	r0, r0, fp, lsr #16
 800e538:	fa1f fb8b 	uxth.w	fp, fp
 800e53c:	ebcb 0a0e 	rsb	sl, fp, lr
 800e540:	fa1f fe80 	uxth.w	lr, r0
 800e544:	0c00      	lsrs	r0, r0, #16
 800e546:	ebce 4e11 	rsb	lr, lr, r1, lsr #16
 800e54a:	429f      	cmp	r7, r3
 800e54c:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
 800e550:	fa1f fc8a 	uxth.w	ip, sl
 800e554:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
 800e558:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800e55c:	f842 1b04 	str.w	r1, [r2], #4
 800e560:	d2da      	bcs.n	800e518 <quorem+0x48>
 800e562:	1d22      	adds	r2, r4, #4
 800e564:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800e568:	6859      	ldr	r1, [r3, #4]
 800e56a:	b9a1      	cbnz	r1, 800e596 <quorem+0xc6>
 800e56c:	9801      	ldr	r0, [sp, #4]
 800e56e:	4298      	cmp	r0, r3
 800e570:	d20f      	bcs.n	800e592 <quorem+0xc2>
 800e572:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800e576:	b962      	cbnz	r2, 800e592 <quorem+0xc2>
 800e578:	9a00      	ldr	r2, [sp, #0]
 800e57a:	1e91      	subs	r1, r2, #2
 800e57c:	43c2      	mvns	r2, r0
 800e57e:	18d2      	adds	r2, r2, r3
 800e580:	eba1 0192 	sub.w	r1, r1, r2, lsr #2
 800e584:	e002      	b.n	800e58c <quorem+0xbc>
 800e586:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e58a:	b912      	cbnz	r2, 800e592 <quorem+0xc2>
 800e58c:	3c01      	subs	r4, #1
 800e58e:	428c      	cmp	r4, r1
 800e590:	d1f9      	bne.n	800e586 <quorem+0xb6>
 800e592:	f8c8 4010 	str.w	r4, [r8, #16]
 800e596:	4640      	mov	r0, r8
 800e598:	4649      	mov	r1, r9
 800e59a:	f001 fe83 	bl	80102a4 <__mcmp>
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	db34      	blt.n	800e60c <quorem+0x13c>
 800e5a2:	9b01      	ldr	r3, [sp, #4]
 800e5a4:	3601      	adds	r6, #1
 800e5a6:	f04f 0c00 	mov.w	ip, #0
 800e5aa:	f855 0b04 	ldr.w	r0, [r5], #4
 800e5ae:	6819      	ldr	r1, [r3, #0]
 800e5b0:	fa1f f980 	uxth.w	r9, r0
 800e5b4:	0c00      	lsrs	r0, r0, #16
 800e5b6:	b28a      	uxth	r2, r1
 800e5b8:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 800e5bc:	ebc9 0202 	rsb	r2, r9, r2
 800e5c0:	42af      	cmp	r7, r5
 800e5c2:	4494      	add	ip, r2
 800e5c4:	eb01 422c 	add.w	r2, r1, ip, asr #16
 800e5c8:	fa1f fc8c 	uxth.w	ip, ip
 800e5cc:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
 800e5d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e5d4:	f843 1b04 	str.w	r1, [r3], #4
 800e5d8:	d2e7      	bcs.n	800e5aa <quorem+0xda>
 800e5da:	1d22      	adds	r2, r4, #4
 800e5dc:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800e5e0:	6859      	ldr	r1, [r3, #4]
 800e5e2:	b999      	cbnz	r1, 800e60c <quorem+0x13c>
 800e5e4:	9801      	ldr	r0, [sp, #4]
 800e5e6:	4298      	cmp	r0, r3
 800e5e8:	d20e      	bcs.n	800e608 <quorem+0x138>
 800e5ea:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800e5ee:	b95a      	cbnz	r2, 800e608 <quorem+0x138>
 800e5f0:	43c1      	mvns	r1, r0
 800e5f2:	18c9      	adds	r1, r1, r3
 800e5f4:	f021 0103 	bic.w	r1, r1, #3
 800e5f8:	1a59      	subs	r1, r3, r1
 800e5fa:	e002      	b.n	800e602 <quorem+0x132>
 800e5fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e600:	b912      	cbnz	r2, 800e608 <quorem+0x138>
 800e602:	3c01      	subs	r4, #1
 800e604:	428b      	cmp	r3, r1
 800e606:	d1f9      	bne.n	800e5fc <quorem+0x12c>
 800e608:	f8c8 4010 	str.w	r4, [r8, #16]
 800e60c:	4630      	mov	r0, r6
 800e60e:	b003      	add	sp, #12
 800e610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e614 <_dtoa_r>:
 800e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e618:	4681      	mov	r9, r0
 800e61a:	b09d      	sub	sp, #116	; 0x74
 800e61c:	4619      	mov	r1, r3
 800e61e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800e622:	4610      	mov	r0, r2
 800e624:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800e626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e62a:	b163      	cbz	r3, 800e646 <_dtoa_r+0x32>
 800e62c:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 800e630:	2501      	movs	r5, #1
 800e632:	4619      	mov	r1, r3
 800e634:	4648      	mov	r0, r9
 800e636:	4095      	lsls	r5, r2
 800e638:	609d      	str	r5, [r3, #8]
 800e63a:	605a      	str	r2, [r3, #4]
 800e63c:	f001 fbfe 	bl	800fe3c <_Bfree>
 800e640:	2300      	movs	r3, #0
 800e642:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800e646:	9d03      	ldr	r5, [sp, #12]
 800e648:	2d00      	cmp	r5, #0
 800e64a:	f2c0 80e3 	blt.w	800e814 <_dtoa_r+0x200>
 800e64e:	2300      	movs	r3, #0
 800e650:	6023      	str	r3, [r4, #0]
 800e652:	2300      	movs	r3, #0
 800e654:	461a      	mov	r2, r3
 800e656:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800e65a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800e65e:	402b      	ands	r3, r5
 800e660:	4293      	cmp	r3, r2
 800e662:	f000 80c3 	beq.w	800e7ec <_dtoa_r+0x1d8>
 800e666:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e66a:	2200      	movs	r2, #0
 800e66c:	2300      	movs	r3, #0
 800e66e:	2401      	movs	r4, #1
 800e670:	4630      	mov	r0, r6
 800e672:	4639      	mov	r1, r7
 800e674:	f003 fc22 	bl	8011ebc <__aeabi_dcmpeq>
 800e678:	b978      	cbnz	r0, 800e69a <_dtoa_r+0x86>
 800e67a:	f014 0fff 	tst.w	r4, #255	; 0xff
 800e67e:	d110      	bne.n	800e6a2 <_dtoa_r+0x8e>
 800e680:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800e682:	2301      	movs	r3, #1
 800e684:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800e686:	602b      	str	r3, [r5, #0]
 800e688:	4d7b      	ldr	r5, [pc, #492]	; (800e878 <_dtoa_r+0x264>)
 800e68a:	b114      	cbz	r4, 800e692 <_dtoa_r+0x7e>
 800e68c:	4b7b      	ldr	r3, [pc, #492]	; (800e87c <_dtoa_r+0x268>)
 800e68e:	1e5d      	subs	r5, r3, #1
 800e690:	6023      	str	r3, [r4, #0]
 800e692:	4628      	mov	r0, r5
 800e694:	b01d      	add	sp, #116	; 0x74
 800e696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e69a:	2400      	movs	r4, #0
 800e69c:	f014 0fff 	tst.w	r4, #255	; 0xff
 800e6a0:	d0ee      	beq.n	800e680 <_dtoa_r+0x6c>
 800e6a2:	463b      	mov	r3, r7
 800e6a4:	4648      	mov	r0, r9
 800e6a6:	4632      	mov	r2, r6
 800e6a8:	a91b      	add	r1, sp, #108	; 0x6c
 800e6aa:	9100      	str	r1, [sp, #0]
 800e6ac:	a91a      	add	r1, sp, #104	; 0x68
 800e6ae:	9101      	str	r1, [sp, #4]
 800e6b0:	f001 ff02 	bl	80104b8 <__d2b>
 800e6b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e6b8:	900f      	str	r0, [sp, #60]	; 0x3c
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f040 80b9 	bne.w	800e832 <_dtoa_r+0x21e>
 800e6c0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e6c2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800e6c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e6c8:	19be      	adds	r6, r7, r6
 800e6ca:	429e      	cmp	r6, r3
 800e6cc:	f2c0 82a2 	blt.w	800ec14 <_dtoa_r+0x600>
 800e6d0:	9802      	ldr	r0, [sp, #8]
 800e6d2:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 800e6d6:	f506 6282 	add.w	r2, r6, #1040	; 0x410
 800e6da:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800e6de:	3202      	adds	r2, #2
 800e6e0:	1b9b      	subs	r3, r3, r6
 800e6e2:	fa30 f202 	lsrs.w	r2, r0, r2
 800e6e6:	fa15 f303 	lsls.w	r3, r5, r3
 800e6ea:	ea43 0002 	orr.w	r0, r3, r2
 800e6ee:	f003 f901 	bl	80118f4 <__aeabi_ui2d>
 800e6f2:	3e01      	subs	r6, #1
 800e6f4:	2401      	movs	r4, #1
 800e6f6:	9417      	str	r4, [sp, #92]	; 0x5c
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e700:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e702:	f1a5 75f8 	sub.w	r5, r5, #32505856	; 0x1f00000
 800e706:	950d      	str	r5, [sp, #52]	; 0x34
 800e708:	2300      	movs	r3, #0
 800e70a:	2200      	movs	r2, #0
 800e70c:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800e710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e714:	f002 ffb0 	bl	8011678 <__aeabi_dsub>
 800e718:	a351      	add	r3, pc, #324	; (adr r3, 800e860 <_dtoa_r+0x24c>)
 800e71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71e:	f003 f95f 	bl	80119e0 <__aeabi_dmul>
 800e722:	a351      	add	r3, pc, #324	; (adr r3, 800e868 <_dtoa_r+0x254>)
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	f002 ffa8 	bl	801167c <__adddf3>
 800e72c:	4604      	mov	r4, r0
 800e72e:	4630      	mov	r0, r6
 800e730:	460d      	mov	r5, r1
 800e732:	f003 f8ef 	bl	8011914 <__aeabi_i2d>
 800e736:	a34e      	add	r3, pc, #312	; (adr r3, 800e870 <_dtoa_r+0x25c>)
 800e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73c:	f003 f950 	bl	80119e0 <__aeabi_dmul>
 800e740:	4602      	mov	r2, r0
 800e742:	460b      	mov	r3, r1
 800e744:	4620      	mov	r0, r4
 800e746:	4629      	mov	r1, r5
 800e748:	f002 ff98 	bl	801167c <__adddf3>
 800e74c:	4604      	mov	r4, r0
 800e74e:	460d      	mov	r5, r1
 800e750:	f003 fbe6 	bl	8011f20 <__aeabi_d2iz>
 800e754:	4629      	mov	r1, r5
 800e756:	2200      	movs	r2, #0
 800e758:	2300      	movs	r3, #0
 800e75a:	9006      	str	r0, [sp, #24]
 800e75c:	4620      	mov	r0, r4
 800e75e:	f003 fbb7 	bl	8011ed0 <__aeabi_dcmplt>
 800e762:	b150      	cbz	r0, 800e77a <_dtoa_r+0x166>
 800e764:	9806      	ldr	r0, [sp, #24]
 800e766:	f003 f8d5 	bl	8011914 <__aeabi_i2d>
 800e76a:	4622      	mov	r2, r4
 800e76c:	462b      	mov	r3, r5
 800e76e:	f003 fba5 	bl	8011ebc <__aeabi_dcmpeq>
 800e772:	b910      	cbnz	r0, 800e77a <_dtoa_r+0x166>
 800e774:	9c06      	ldr	r4, [sp, #24]
 800e776:	3c01      	subs	r4, #1
 800e778:	9406      	str	r4, [sp, #24]
 800e77a:	9d06      	ldr	r5, [sp, #24]
 800e77c:	2d16      	cmp	r5, #22
 800e77e:	f200 816a 	bhi.w	800ea56 <_dtoa_r+0x442>
 800e782:	493f      	ldr	r1, [pc, #252]	; (800e880 <_dtoa_r+0x26c>)
 800e784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e788:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800e78c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e790:	f003 fbbc 	bl	8011f0c <__aeabi_dcmpgt>
 800e794:	2800      	cmp	r0, #0
 800e796:	f000 8246 	beq.w	800ec26 <_dtoa_r+0x612>
 800e79a:	9c06      	ldr	r4, [sp, #24]
 800e79c:	2500      	movs	r5, #0
 800e79e:	9515      	str	r5, [sp, #84]	; 0x54
 800e7a0:	3c01      	subs	r4, #1
 800e7a2:	9406      	str	r4, [sp, #24]
 800e7a4:	1bbe      	subs	r6, r7, r6
 800e7a6:	3e01      	subs	r6, #1
 800e7a8:	f100 822f 	bmi.w	800ec0a <_dtoa_r+0x5f6>
 800e7ac:	2500      	movs	r5, #0
 800e7ae:	960b      	str	r6, [sp, #44]	; 0x2c
 800e7b0:	9510      	str	r5, [sp, #64]	; 0x40
 800e7b2:	9c06      	ldr	r4, [sp, #24]
 800e7b4:	2c00      	cmp	r4, #0
 800e7b6:	f2c0 821f 	blt.w	800ebf8 <_dtoa_r+0x5e4>
 800e7ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e7bc:	9414      	str	r4, [sp, #80]	; 0x50
 800e7be:	192d      	adds	r5, r5, r4
 800e7c0:	2400      	movs	r4, #0
 800e7c2:	950b      	str	r5, [sp, #44]	; 0x2c
 800e7c4:	9411      	str	r4, [sp, #68]	; 0x44
 800e7c6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800e7c8:	2d09      	cmp	r5, #9
 800e7ca:	d85f      	bhi.n	800e88c <_dtoa_r+0x278>
 800e7cc:	2401      	movs	r4, #1
 800e7ce:	2d05      	cmp	r5, #5
 800e7d0:	dd02      	ble.n	800e7d8 <_dtoa_r+0x1c4>
 800e7d2:	2400      	movs	r4, #0
 800e7d4:	3d04      	subs	r5, #4
 800e7d6:	9526      	str	r5, [sp, #152]	; 0x98
 800e7d8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800e7da:	1eab      	subs	r3, r5, #2
 800e7dc:	2b03      	cmp	r3, #3
 800e7de:	d857      	bhi.n	800e890 <_dtoa_r+0x27c>
 800e7e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e7e4:	039a03af 	.word	0x039a03af
 800e7e8:	03b20264 	.word	0x03b20264
 800e7ec:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800e7ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800e7f2:	9802      	ldr	r0, [sp, #8]
 800e7f4:	6023      	str	r3, [r4, #0]
 800e7f6:	b198      	cbz	r0, 800e820 <_dtoa_r+0x20c>
 800e7f8:	4d22      	ldr	r5, [pc, #136]	; (800e884 <_dtoa_r+0x270>)
 800e7fa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800e7fc:	2c00      	cmp	r4, #0
 800e7fe:	f43f af48 	beq.w	800e692 <_dtoa_r+0x7e>
 800e802:	78eb      	ldrb	r3, [r5, #3]
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 8124 	beq.w	800ea52 <_dtoa_r+0x43e>
 800e80a:	f105 0308 	add.w	r3, r5, #8
 800e80e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	e73e      	b.n	800e692 <_dtoa_r+0x7e>
 800e814:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800e818:	2301      	movs	r3, #1
 800e81a:	9503      	str	r5, [sp, #12]
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	e718      	b.n	800e652 <_dtoa_r+0x3e>
 800e820:	4b18      	ldr	r3, [pc, #96]	; (800e884 <_dtoa_r+0x270>)
 800e822:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e826:	4a18      	ldr	r2, [pc, #96]	; (800e888 <_dtoa_r+0x274>)
 800e828:	2d00      	cmp	r5, #0
 800e82a:	bf0c      	ite	eq
 800e82c:	4615      	moveq	r5, r2
 800e82e:	461d      	movne	r5, r3
 800e830:	e7e3      	b.n	800e7fa <_dtoa_r+0x1e6>
 800e832:	4639      	mov	r1, r7
 800e834:	4630      	mov	r0, r6
 800e836:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e83a:	f5a3 767e 	sub.w	r6, r3, #1016	; 0x3f8
 800e83e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e840:	2400      	movs	r4, #0
 800e842:	3e07      	subs	r6, #7
 800e844:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e846:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 800e84a:	9417      	str	r4, [sp, #92]	; 0x5c
 800e84c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e850:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e854:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e858:	930d      	str	r3, [sp, #52]	; 0x34
 800e85a:	e755      	b.n	800e708 <_dtoa_r+0xf4>
 800e85c:	f3af 8000 	nop.w
 800e860:	636f4361 	.word	0x636f4361
 800e864:	3fd287a7 	.word	0x3fd287a7
 800e868:	8b60c8b3 	.word	0x8b60c8b3
 800e86c:	3fc68a28 	.word	0x3fc68a28
 800e870:	509f79fb 	.word	0x509f79fb
 800e874:	3fd34413 	.word	0x3fd34413
 800e878:	08014b20 	.word	0x08014b20
 800e87c:	08014b21 	.word	0x08014b21
 800e880:	08014450 	.word	0x08014450
 800e884:	08014b3c 	.word	0x08014b3c
 800e888:	08014b30 	.word	0x08014b30
 800e88c:	2400      	movs	r4, #0
 800e88e:	9426      	str	r4, [sp, #152]	; 0x98
 800e890:	2400      	movs	r4, #0
 800e892:	4648      	mov	r0, r9
 800e894:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800e898:	4621      	mov	r1, r4
 800e89a:	f04f 35ff 	mov.w	r5, #4294967295
 800e89e:	950e      	str	r5, [sp, #56]	; 0x38
 800e8a0:	f001 faa6 	bl	800fdf0 <_Balloc>
 800e8a4:	2501      	movs	r5, #1
 800e8a6:	9513      	str	r5, [sp, #76]	; 0x4c
 800e8a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e8aa:	9427      	str	r4, [sp, #156]	; 0x9c
 800e8ac:	9516      	str	r5, [sp, #88]	; 0x58
 800e8ae:	900a      	str	r0, [sp, #40]	; 0x28
 800e8b0:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800e8b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8b6:	9d06      	ldr	r5, [sp, #24]
 800e8b8:	43dc      	mvns	r4, r3
 800e8ba:	0fe4      	lsrs	r4, r4, #31
 800e8bc:	2d0e      	cmp	r5, #14
 800e8be:	bfcc      	ite	gt
 800e8c0:	2400      	movgt	r4, #0
 800e8c2:	f004 0401 	andle.w	r4, r4, #1
 800e8c6:	2c00      	cmp	r4, #0
 800e8c8:	f000 80ca 	beq.w	800ea60 <_dtoa_r+0x44c>
 800e8cc:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800e8ce:	4b63      	ldr	r3, [pc, #396]	; (800ea5c <_dtoa_r+0x448>)
 800e8d0:	0fec      	lsrs	r4, r5, #31
 800e8d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e8d4:	2d00      	cmp	r5, #0
 800e8d6:	bfcc      	ite	gt
 800e8d8:	2400      	movgt	r4, #0
 800e8da:	f004 0401 	andle.w	r4, r4, #1
 800e8de:	9d06      	ldr	r5, [sp, #24]
 800e8e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e8e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e8e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8ec:	2c00      	cmp	r4, #0
 800e8ee:	f040 81c2 	bne.w	800ec76 <_dtoa_r+0x662>
 800e8f2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	4639      	mov	r1, r7
 800e900:	f003 f998 	bl	8011c34 <__aeabi_ddiv>
 800e904:	f003 fb0c 	bl	8011f20 <__aeabi_d2iz>
 800e908:	4682      	mov	sl, r0
 800e90a:	f003 f803 	bl	8011914 <__aeabi_i2d>
 800e90e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e912:	f003 f865 	bl	80119e0 <__aeabi_dmul>
 800e916:	460b      	mov	r3, r1
 800e918:	4602      	mov	r2, r0
 800e91a:	4639      	mov	r1, r7
 800e91c:	4630      	mov	r0, r6
 800e91e:	f002 feab 	bl	8011678 <__aeabi_dsub>
 800e922:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800e926:	f805 3b01 	strb.w	r3, [r5], #1
 800e92a:	46a8      	mov	r8, r5
 800e92c:	9512      	str	r5, [sp, #72]	; 0x48
 800e92e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e930:	2d01      	cmp	r5, #1
 800e932:	4606      	mov	r6, r0
 800e934:	460f      	mov	r7, r1
 800e936:	d052      	beq.n	800e9de <_dtoa_r+0x3ca>
 800e938:	2300      	movs	r3, #0
 800e93a:	2200      	movs	r2, #0
 800e93c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800e940:	f003 f84e 	bl	80119e0 <__aeabi_dmul>
 800e944:	2300      	movs	r3, #0
 800e946:	2200      	movs	r2, #0
 800e948:	4606      	mov	r6, r0
 800e94a:	460f      	mov	r7, r1
 800e94c:	f003 fab6 	bl	8011ebc <__aeabi_dcmpeq>
 800e950:	2301      	movs	r3, #1
 800e952:	b100      	cbz	r0, 800e956 <_dtoa_r+0x342>
 800e954:	4623      	mov	r3, r4
 800e956:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e95a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e95c:	f000 85b6 	beq.w	800f4cc <_dtoa_r+0xeb8>
 800e960:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e962:	1cac      	adds	r4, r5, #2
 800e964:	f8cd 9008 	str.w	r9, [sp, #8]
 800e968:	eb05 0b00 	add.w	fp, r5, r0
 800e96c:	e00e      	b.n	800e98c <_dtoa_r+0x378>
 800e96e:	f003 f837 	bl	80119e0 <__aeabi_dmul>
 800e972:	2200      	movs	r2, #0
 800e974:	2300      	movs	r3, #0
 800e976:	4606      	mov	r6, r0
 800e978:	460f      	mov	r7, r1
 800e97a:	f003 fa9f 	bl	8011ebc <__aeabi_dcmpeq>
 800e97e:	b108      	cbz	r0, 800e984 <_dtoa_r+0x370>
 800e980:	f04f 0800 	mov.w	r8, #0
 800e984:	f018 0fff 	tst.w	r8, #255	; 0xff
 800e988:	f000 845a 	beq.w	800f240 <_dtoa_r+0xc2c>
 800e98c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e990:	4630      	mov	r0, r6
 800e992:	4639      	mov	r1, r7
 800e994:	46a1      	mov	r9, r4
 800e996:	f003 f94d 	bl	8011c34 <__aeabi_ddiv>
 800e99a:	f04f 0801 	mov.w	r8, #1
 800e99e:	f003 fabf 	bl	8011f20 <__aeabi_d2iz>
 800e9a2:	4682      	mov	sl, r0
 800e9a4:	f002 ffb6 	bl	8011914 <__aeabi_i2d>
 800e9a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9ac:	f10a 0530 	add.w	r5, sl, #48	; 0x30
 800e9b0:	f003 f816 	bl	80119e0 <__aeabi_dmul>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	f002 fe5c 	bl	8011678 <__aeabi_dsub>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	455c      	cmp	r4, fp
 800e9c6:	f804 5c01 	strb.w	r5, [r4, #-1]
 800e9ca:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800e9ce:	f104 0401 	add.w	r4, r4, #1
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	460f      	mov	r7, r1
 800e9d6:	d1ca      	bne.n	800e96e <_dtoa_r+0x35a>
 800e9d8:	46c8      	mov	r8, r9
 800e9da:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e9de:	4632      	mov	r2, r6
 800e9e0:	463b      	mov	r3, r7
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	4639      	mov	r1, r7
 800e9e6:	f002 fe49 	bl	801167c <__adddf3>
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	460d      	mov	r5, r1
 800e9ee:	4622      	mov	r2, r4
 800e9f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9f4:	462b      	mov	r3, r5
 800e9f6:	f003 fa6b 	bl	8011ed0 <__aeabi_dcmplt>
 800e9fa:	b960      	cbnz	r0, 800ea16 <_dtoa_r+0x402>
 800e9fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea00:	4622      	mov	r2, r4
 800ea02:	462b      	mov	r3, r5
 800ea04:	f003 fa5a 	bl	8011ebc <__aeabi_dcmpeq>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	f000 841c 	beq.w	800f246 <_dtoa_r+0xc32>
 800ea0e:	f01a 0f01 	tst.w	sl, #1
 800ea12:	f000 8418 	beq.w	800f246 <_dtoa_r+0xc32>
 800ea16:	9c06      	ldr	r4, [sp, #24]
 800ea18:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800ea1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ea1e:	9418      	str	r4, [sp, #96]	; 0x60
 800ea20:	4643      	mov	r3, r8
 800ea22:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ea24:	e002      	b.n	800ea2c <_dtoa_r+0x418>
 800ea26:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	2e39      	cmp	r6, #57	; 0x39
 800ea2e:	461a      	mov	r2, r3
 800ea30:	f040 84d2 	bne.w	800f3d8 <_dtoa_r+0xdc4>
 800ea34:	428b      	cmp	r3, r1
 800ea36:	d1f6      	bne.n	800ea26 <_dtoa_r+0x412>
 800ea38:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ea3a:	2330      	movs	r3, #48	; 0x30
 800ea3c:	920a      	str	r2, [sp, #40]	; 0x28
 800ea3e:	2231      	movs	r2, #49	; 0x31
 800ea40:	3401      	adds	r4, #1
 800ea42:	9406      	str	r4, [sp, #24]
 800ea44:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800ea46:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ea4a:	4623      	mov	r3, r4
 800ea4c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ea50:	e0c0      	b.n	800ebd4 <_dtoa_r+0x5c0>
 800ea52:	1ceb      	adds	r3, r5, #3
 800ea54:	e6db      	b.n	800e80e <_dtoa_r+0x1fa>
 800ea56:	2401      	movs	r4, #1
 800ea58:	9415      	str	r4, [sp, #84]	; 0x54
 800ea5a:	e6a3      	b.n	800e7a4 <_dtoa_r+0x190>
 800ea5c:	08014450 	.word	0x08014450
 800ea60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ea62:	2d00      	cmp	r5, #0
 800ea64:	f040 80e2 	bne.w	800ec2c <_dtoa_r+0x618>
 800ea68:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ea6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ea6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ea70:	2d00      	cmp	r5, #0
 800ea72:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ea74:	bfd4      	ite	le
 800ea76:	2300      	movle	r3, #0
 800ea78:	2301      	movgt	r3, #1
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	bfd4      	ite	le
 800ea7e:	2300      	movle	r3, #0
 800ea80:	f003 0301 	andgt.w	r3, r3, #1
 800ea84:	b14b      	cbz	r3, 800ea9a <_dtoa_r+0x486>
 800ea86:	4603      	mov	r3, r0
 800ea88:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ea8a:	42ab      	cmp	r3, r5
 800ea8c:	bfa8      	it	ge
 800ea8e:	462b      	movge	r3, r5
 800ea90:	1aed      	subs	r5, r5, r3
 800ea92:	1ac9      	subs	r1, r1, r3
 800ea94:	1ac0      	subs	r0, r0, r3
 800ea96:	9110      	str	r1, [sp, #64]	; 0x40
 800ea98:	900b      	str	r0, [sp, #44]	; 0x2c
 800ea9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	dd1a      	ble.n	800ead6 <_dtoa_r+0x4c2>
 800eaa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f000 8457 	beq.w	800f356 <_dtoa_r+0xd42>
 800eaa8:	2c00      	cmp	r4, #0
 800eaaa:	dd10      	ble.n	800eace <_dtoa_r+0x4ba>
 800eaac:	4651      	mov	r1, sl
 800eaae:	4622      	mov	r2, r4
 800eab0:	4648      	mov	r0, r9
 800eab2:	f001 fb4b 	bl	801014c <__pow5mult>
 800eab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eab8:	4682      	mov	sl, r0
 800eaba:	4648      	mov	r0, r9
 800eabc:	4651      	mov	r1, sl
 800eabe:	f001 faa9 	bl	8010014 <__multiply>
 800eac2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eac4:	4606      	mov	r6, r0
 800eac6:	4648      	mov	r0, r9
 800eac8:	f001 f9b8 	bl	800fe3c <_Bfree>
 800eacc:	960f      	str	r6, [sp, #60]	; 0x3c
 800eace:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ead0:	1b02      	subs	r2, r0, r4
 800ead2:	f040 8464 	bne.w	800f39e <_dtoa_r+0xd8a>
 800ead6:	2101      	movs	r1, #1
 800ead8:	4648      	mov	r0, r9
 800eada:	f001 fa91 	bl	8010000 <__i2b>
 800eade:	9914      	ldr	r1, [sp, #80]	; 0x50
 800eae0:	2900      	cmp	r1, #0
 800eae2:	4604      	mov	r4, r0
 800eae4:	dd05      	ble.n	800eaf2 <_dtoa_r+0x4de>
 800eae6:	4621      	mov	r1, r4
 800eae8:	4648      	mov	r0, r9
 800eaea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eaec:	f001 fb2e 	bl	801014c <__pow5mult>
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eaf4:	2a01      	cmp	r2, #1
 800eaf6:	f340 822a 	ble.w	800ef4e <_dtoa_r+0x93a>
 800eafa:	2600      	movs	r6, #0
 800eafc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eafe:	2301      	movs	r3, #1
 800eb00:	2a00      	cmp	r2, #0
 800eb02:	f040 83a4 	bne.w	800f24e <_dtoa_r+0xc3a>
 800eb06:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800eb08:	181b      	adds	r3, r3, r0
 800eb0a:	f013 031f 	ands.w	r3, r3, #31
 800eb0e:	f000 8275 	beq.w	800effc <_dtoa_r+0x9e8>
 800eb12:	f1c3 0220 	rsb	r2, r3, #32
 800eb16:	2a04      	cmp	r2, #4
 800eb18:	f340 84f3 	ble.w	800f502 <_dtoa_r+0xeee>
 800eb1c:	f1c3 031c 	rsb	r3, r3, #28
 800eb20:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eb22:	18ed      	adds	r5, r5, r3
 800eb24:	18c0      	adds	r0, r0, r3
 800eb26:	18c9      	adds	r1, r1, r3
 800eb28:	900b      	str	r0, [sp, #44]	; 0x2c
 800eb2a:	9110      	str	r1, [sp, #64]	; 0x40
 800eb2c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eb2e:	2900      	cmp	r1, #0
 800eb30:	dd05      	ble.n	800eb3e <_dtoa_r+0x52a>
 800eb32:	4648      	mov	r0, r9
 800eb34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eb36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eb38:	f001 fb54 	bl	80101e4 <__lshift>
 800eb3c:	900f      	str	r0, [sp, #60]	; 0x3c
 800eb3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb40:	2a00      	cmp	r2, #0
 800eb42:	dd04      	ble.n	800eb4e <_dtoa_r+0x53a>
 800eb44:	4621      	mov	r1, r4
 800eb46:	4648      	mov	r0, r9
 800eb48:	f001 fb4c 	bl	80101e4 <__lshift>
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f040 8385 	bne.w	800f260 <_dtoa_r+0xc4c>
 800eb56:	9826      	ldr	r0, [sp, #152]	; 0x98
 800eb58:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eb5a:	2802      	cmp	r0, #2
 800eb5c:	bfd4      	ite	le
 800eb5e:	2300      	movle	r3, #0
 800eb60:	2301      	movgt	r3, #1
 800eb62:	2900      	cmp	r1, #0
 800eb64:	bfcc      	ite	gt
 800eb66:	2300      	movgt	r3, #0
 800eb68:	f003 0301 	andle.w	r3, r3, #1
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f000 824e 	beq.w	800f00e <_dtoa_r+0x9fa>
 800eb72:	2900      	cmp	r1, #0
 800eb74:	f040 8094 	bne.w	800eca0 <_dtoa_r+0x68c>
 800eb78:	2205      	movs	r2, #5
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	4648      	mov	r0, r9
 800eb7e:	4621      	mov	r1, r4
 800eb80:	f001 f966 	bl	800fe50 <__multadd>
 800eb84:	4604      	mov	r4, r0
 800eb86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800eb88:	4621      	mov	r1, r4
 800eb8a:	f001 fb8b 	bl	80102a4 <__mcmp>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	f340 8086 	ble.w	800eca0 <_dtoa_r+0x68c>
 800eb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb96:	2700      	movs	r7, #0
 800eb98:	9806      	ldr	r0, [sp, #24]
 800eb9a:	2231      	movs	r2, #49	; 0x31
 800eb9c:	461d      	mov	r5, r3
 800eb9e:	3001      	adds	r0, #1
 800eba0:	f803 2b01 	strb.w	r2, [r3], #1
 800eba4:	9006      	str	r0, [sp, #24]
 800eba6:	930a      	str	r3, [sp, #40]	; 0x28
 800eba8:	4648      	mov	r0, r9
 800ebaa:	4621      	mov	r1, r4
 800ebac:	f001 f946 	bl	800fe3c <_Bfree>
 800ebb0:	f1ba 0f00 	cmp.w	sl, #0
 800ebb4:	d00e      	beq.n	800ebd4 <_dtoa_r+0x5c0>
 800ebb6:	1c3b      	adds	r3, r7, #0
 800ebb8:	bf18      	it	ne
 800ebba:	2301      	movne	r3, #1
 800ebbc:	4557      	cmp	r7, sl
 800ebbe:	bf0c      	ite	eq
 800ebc0:	2300      	moveq	r3, #0
 800ebc2:	f003 0301 	andne.w	r3, r3, #1
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f040 8213 	bne.w	800eff2 <_dtoa_r+0x9de>
 800ebcc:	4648      	mov	r0, r9
 800ebce:	4651      	mov	r1, sl
 800ebd0:	f001 f934 	bl	800fe3c <_Bfree>
 800ebd4:	4648      	mov	r0, r9
 800ebd6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ebd8:	f001 f930 	bl	800fe3c <_Bfree>
 800ebdc:	9c06      	ldr	r4, [sp, #24]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	1c63      	adds	r3, r4, #1
 800ebe2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ebe4:	7022      	strb	r2, [r4, #0]
 800ebe6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800ebec:	2c00      	cmp	r4, #0
 800ebee:	f43f ad50 	beq.w	800e692 <_dtoa_r+0x7e>
 800ebf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ebf4:	6020      	str	r0, [r4, #0]
 800ebf6:	e54c      	b.n	800e692 <_dtoa_r+0x7e>
 800ebf8:	9c06      	ldr	r4, [sp, #24]
 800ebfa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ebfc:	1b2d      	subs	r5, r5, r4
 800ebfe:	9510      	str	r5, [sp, #64]	; 0x40
 800ec00:	4265      	negs	r5, r4
 800ec02:	2400      	movs	r4, #0
 800ec04:	9511      	str	r5, [sp, #68]	; 0x44
 800ec06:	9414      	str	r4, [sp, #80]	; 0x50
 800ec08:	e5dd      	b.n	800e7c6 <_dtoa_r+0x1b2>
 800ec0a:	4276      	negs	r6, r6
 800ec0c:	2400      	movs	r4, #0
 800ec0e:	9610      	str	r6, [sp, #64]	; 0x40
 800ec10:	940b      	str	r4, [sp, #44]	; 0x2c
 800ec12:	e5ce      	b.n	800e7b2 <_dtoa_r+0x19e>
 800ec14:	f64f 32ee 	movw	r2, #64494	; 0xfbee
 800ec18:	9902      	ldr	r1, [sp, #8]
 800ec1a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 800ec1e:	1b92      	subs	r2, r2, r6
 800ec20:	fa11 f002 	lsls.w	r0, r1, r2
 800ec24:	e563      	b.n	800e6ee <_dtoa_r+0xda>
 800ec26:	2500      	movs	r5, #0
 800ec28:	9515      	str	r5, [sp, #84]	; 0x54
 800ec2a:	e5bb      	b.n	800e7a4 <_dtoa_r+0x190>
 800ec2c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800ec2e:	2d01      	cmp	r5, #1
 800ec30:	f340 83bf 	ble.w	800f3b2 <_dtoa_r+0xd9e>
 800ec34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ec36:	1e6b      	subs	r3, r5, #1
 800ec38:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ec3a:	429d      	cmp	r5, r3
 800ec3c:	bfaf      	iteee	ge
 800ec3e:	ebc3 0405 	rsbge	r4, r3, r5
 800ec42:	9d11      	ldrlt	r5, [sp, #68]	; 0x44
 800ec44:	9311      	strlt	r3, [sp, #68]	; 0x44
 800ec46:	ebc5 0203 	rsblt	r2, r5, r3
 800ec4a:	bfbe      	ittt	lt
 800ec4c:	9d14      	ldrlt	r5, [sp, #80]	; 0x50
 800ec4e:	18ad      	addlt	r5, r5, r2
 800ec50:	9514      	strlt	r5, [sp, #80]	; 0x50
 800ec52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ec54:	2d00      	cmp	r5, #0
 800ec56:	f2c0 83c8 	blt.w	800f3ea <_dtoa_r+0xdd6>
 800ec5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ec5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec60:	4648      	mov	r0, r9
 800ec62:	2101      	movs	r1, #1
 800ec64:	18d2      	adds	r2, r2, r3
 800ec66:	9210      	str	r2, [sp, #64]	; 0x40
 800ec68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec6a:	18d2      	adds	r2, r2, r3
 800ec6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ec6e:	f001 f9c7 	bl	8010000 <__i2b>
 800ec72:	4682      	mov	sl, r0
 800ec74:	e6fc      	b.n	800ea70 <_dtoa_r+0x45c>
 800ec76:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ec78:	2c00      	cmp	r4, #0
 800ec7a:	f040 8397 	bne.w	800f3ac <_dtoa_r+0xd98>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	2200      	movs	r2, #0
 800ec82:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800ec86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec8a:	f002 fea9 	bl	80119e0 <__aeabi_dmul>
 800ec8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec92:	f003 f931 	bl	8011ef8 <__aeabi_dcmpge>
 800ec96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ec98:	46a2      	mov	sl, r4
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	f43f af7a 	beq.w	800eb94 <_dtoa_r+0x580>
 800eca0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800eca2:	2700      	movs	r7, #0
 800eca4:	43ed      	mvns	r5, r5
 800eca6:	9506      	str	r5, [sp, #24]
 800eca8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ecaa:	e77d      	b.n	800eba8 <_dtoa_r+0x594>
 800ecac:	2501      	movs	r5, #1
 800ecae:	9513      	str	r5, [sp, #76]	; 0x4c
 800ecb0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800ecb2:	2d00      	cmp	r5, #0
 800ecb4:	f340 82ec 	ble.w	800f290 <_dtoa_r+0xc7c>
 800ecb8:	46ab      	mov	fp, r5
 800ecba:	2d0e      	cmp	r5, #14
 800ecbc:	bf8c      	ite	hi
 800ecbe:	2400      	movhi	r4, #0
 800ecc0:	f004 0401 	andls.w	r4, r4, #1
 800ecc4:	9516      	str	r5, [sp, #88]	; 0x58
 800ecc6:	950e      	str	r5, [sp, #56]	; 0x38
 800ecc8:	2100      	movs	r1, #0
 800ecca:	f1bb 0f17 	cmp.w	fp, #23
 800ecce:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800ecd2:	d90a      	bls.n	800ecea <_dtoa_r+0x6d6>
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	2304      	movs	r3, #4
 800ecd8:	005b      	lsls	r3, r3, #1
 800ecda:	4611      	mov	r1, r2
 800ecdc:	f103 0014 	add.w	r0, r3, #20
 800ece0:	3201      	adds	r2, #1
 800ece2:	4558      	cmp	r0, fp
 800ece4:	d9f8      	bls.n	800ecd8 <_dtoa_r+0x6c4>
 800ece6:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800ecea:	4648      	mov	r0, r9
 800ecec:	f001 f880 	bl	800fdf0 <_Balloc>
 800ecf0:	900a      	str	r0, [sp, #40]	; 0x28
 800ecf2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800ecf6:	2c00      	cmp	r4, #0
 800ecf8:	f43f addc 	beq.w	800e8b4 <_dtoa_r+0x2a0>
 800ecfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed00:	461d      	mov	r5, r3
 800ed02:	4614      	mov	r4, r2
 800ed04:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800ed08:	9d06      	ldr	r5, [sp, #24]
 800ed0a:	2d00      	cmp	r5, #0
 800ed0c:	f340 820d 	ble.w	800f12a <_dtoa_r+0xb16>
 800ed10:	f005 020f 	and.w	r2, r5, #15
 800ed14:	4b9b      	ldr	r3, [pc, #620]	; (800ef84 <_dtoa_r+0x970>)
 800ed16:	112c      	asrs	r4, r5, #4
 800ed18:	2602      	movs	r6, #2
 800ed1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed1e:	06e2      	lsls	r2, r4, #27
 800ed20:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800ed24:	d50b      	bpl.n	800ed3e <_dtoa_r+0x72a>
 800ed26:	4b98      	ldr	r3, [pc, #608]	; (800ef88 <_dtoa_r+0x974>)
 800ed28:	f004 040f 	and.w	r4, r4, #15
 800ed2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed30:	2603      	movs	r6, #3
 800ed32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed36:	f002 ff7d 	bl	8011c34 <__aeabi_ddiv>
 800ed3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed3e:	b174      	cbz	r4, 800ed5e <_dtoa_r+0x74a>
 800ed40:	4d91      	ldr	r5, [pc, #580]	; (800ef88 <_dtoa_r+0x974>)
 800ed42:	07e3      	lsls	r3, r4, #31
 800ed44:	4650      	mov	r0, sl
 800ed46:	4659      	mov	r1, fp
 800ed48:	d506      	bpl.n	800ed58 <_dtoa_r+0x744>
 800ed4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed4e:	3601      	adds	r6, #1
 800ed50:	f002 fe46 	bl	80119e0 <__aeabi_dmul>
 800ed54:	4682      	mov	sl, r0
 800ed56:	468b      	mov	fp, r1
 800ed58:	3508      	adds	r5, #8
 800ed5a:	1064      	asrs	r4, r4, #1
 800ed5c:	d1f1      	bne.n	800ed42 <_dtoa_r+0x72e>
 800ed5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed62:	4652      	mov	r2, sl
 800ed64:	465b      	mov	r3, fp
 800ed66:	f002 ff65 	bl	8011c34 <__aeabi_ddiv>
 800ed6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed6e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ed70:	2c00      	cmp	r4, #0
 800ed72:	f000 810b 	beq.w	800ef8c <_dtoa_r+0x978>
 800ed76:	2300      	movs	r3, #0
 800ed78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed7c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800ed80:	2200      	movs	r2, #0
 800ed82:	f003 f8a5 	bl	8011ed0 <__aeabi_dcmplt>
 800ed86:	2301      	movs	r3, #1
 800ed88:	b900      	cbnz	r0, 800ed8c <_dtoa_r+0x778>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ed8e:	2d00      	cmp	r5, #0
 800ed90:	bfd4      	ite	le
 800ed92:	2300      	movle	r3, #0
 800ed94:	f003 0301 	andgt.w	r3, r3, #1
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f000 80f7 	beq.w	800ef8c <_dtoa_r+0x978>
 800ed9e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800eda0:	2c00      	cmp	r4, #0
 800eda2:	f340 81ad 	ble.w	800f100 <_dtoa_r+0xaec>
 800eda6:	2300      	movs	r3, #0
 800eda8:	2200      	movs	r2, #0
 800edaa:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800edae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edb2:	f002 fe15 	bl	80119e0 <__aeabi_dmul>
 800edb6:	9d06      	ldr	r5, [sp, #24]
 800edb8:	3d01      	subs	r5, #1
 800edba:	9518      	str	r5, [sp, #96]	; 0x60
 800edbc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800edbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edc2:	1c70      	adds	r0, r6, #1
 800edc4:	f002 fda6 	bl	8011914 <__aeabi_i2d>
 800edc8:	4602      	mov	r2, r0
 800edca:	460b      	mov	r3, r1
 800edcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edd0:	f002 fe06 	bl	80119e0 <__aeabi_dmul>
 800edd4:	2300      	movs	r3, #0
 800edd6:	2200      	movs	r2, #0
 800edd8:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800eddc:	f002 fc4e 	bl	801167c <__adddf3>
 800ede0:	4606      	mov	r6, r0
 800ede2:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800ede6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ede8:	2c00      	cmp	r4, #0
 800edea:	f000 81cb 	beq.w	800f184 <_dtoa_r+0xb70>
 800edee:	4b65      	ldr	r3, [pc, #404]	; (800ef84 <_dtoa_r+0x970>)
 800edf0:	2100      	movs	r1, #0
 800edf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800edf4:	2000      	movs	r0, #0
 800edf6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800edfa:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800edfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee02:	9412      	str	r4, [sp, #72]	; 0x48
 800ee04:	f002 ff16 	bl	8011c34 <__aeabi_ddiv>
 800ee08:	4632      	mov	r2, r6
 800ee0a:	463b      	mov	r3, r7
 800ee0c:	f002 fc34 	bl	8011678 <__aeabi_dsub>
 800ee10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee18:	f003 f882 	bl	8011f20 <__aeabi_d2iz>
 800ee1c:	4604      	mov	r4, r0
 800ee1e:	f002 fd79 	bl	8011914 <__aeabi_i2d>
 800ee22:	3430      	adds	r4, #48	; 0x30
 800ee24:	b2e6      	uxtb	r6, r4
 800ee26:	4602      	mov	r2, r0
 800ee28:	460b      	mov	r3, r1
 800ee2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee2e:	f002 fc23 	bl	8011678 <__aeabi_dsub>
 800ee32:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800ee34:	f804 6b01 	strb.w	r6, [r4], #1
 800ee38:	9412      	str	r4, [sp, #72]	; 0x48
 800ee3a:	4682      	mov	sl, r0
 800ee3c:	468b      	mov	fp, r1
 800ee3e:	4652      	mov	r2, sl
 800ee40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee44:	465b      	mov	r3, fp
 800ee46:	f003 f861 	bl	8011f0c <__aeabi_dcmpgt>
 800ee4a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	f040 8345 	bne.w	800f4de <_dtoa_r+0xeca>
 800ee54:	2100      	movs	r1, #0
 800ee56:	4652      	mov	r2, sl
 800ee58:	465b      	mov	r3, fp
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ee60:	f002 fc0a 	bl	8011678 <__aeabi_dsub>
 800ee64:	4602      	mov	r2, r0
 800ee66:	460b      	mov	r3, r1
 800ee68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee6c:	f003 f84e 	bl	8011f0c <__aeabi_dcmpgt>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f040 82ae 	bne.w	800f3d2 <_dtoa_r+0xdbe>
 800ee76:	2d01      	cmp	r5, #1
 800ee78:	f340 8142 	ble.w	800f100 <_dtoa_r+0xaec>
 800ee7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ee7e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ee80:	1965      	adds	r5, r4, r5
 800ee82:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800ee86:	9502      	str	r5, [sp, #8]
 800ee88:	e00c      	b.n	800eea4 <_dtoa_r+0x890>
 800ee8a:	f002 fbf5 	bl	8011678 <__aeabi_dsub>
 800ee8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ee92:	f003 f81d 	bl	8011ed0 <__aeabi_dcmplt>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	f040 8298 	bne.w	800f3cc <_dtoa_r+0xdb8>
 800ee9c:	9d02      	ldr	r5, [sp, #8]
 800ee9e:	42af      	cmp	r7, r5
 800eea0:	f000 812c 	beq.w	800f0fc <_dtoa_r+0xae8>
 800eea4:	2300      	movs	r3, #0
 800eea6:	2200      	movs	r2, #0
 800eea8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800eeac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eeb0:	f002 fd96 	bl	80119e0 <__aeabi_dmul>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800eebc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eec0:	4650      	mov	r0, sl
 800eec2:	4659      	mov	r1, fp
 800eec4:	f002 fd8c 	bl	80119e0 <__aeabi_dmul>
 800eec8:	4689      	mov	r9, r1
 800eeca:	4680      	mov	r8, r0
 800eecc:	f003 f828 	bl	8011f20 <__aeabi_d2iz>
 800eed0:	4604      	mov	r4, r0
 800eed2:	f002 fd1f 	bl	8011914 <__aeabi_i2d>
 800eed6:	3430      	adds	r4, #48	; 0x30
 800eed8:	b2e6      	uxtb	r6, r4
 800eeda:	4602      	mov	r2, r0
 800eedc:	460b      	mov	r3, r1
 800eede:	4640      	mov	r0, r8
 800eee0:	4649      	mov	r1, r9
 800eee2:	f002 fbc9 	bl	8011678 <__aeabi_dsub>
 800eee6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eeea:	f807 6b01 	strb.w	r6, [r7], #1
 800eeee:	463d      	mov	r5, r7
 800eef0:	468b      	mov	fp, r1
 800eef2:	4682      	mov	sl, r0
 800eef4:	f002 ffec 	bl	8011ed0 <__aeabi_dcmplt>
 800eef8:	2100      	movs	r1, #0
 800eefa:	4652      	mov	r2, sl
 800eefc:	465b      	mov	r3, fp
 800eefe:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ef02:	4604      	mov	r4, r0
 800ef04:	2000      	movs	r0, #0
 800ef06:	2c00      	cmp	r4, #0
 800ef08:	d0bf      	beq.n	800ee8a <_dtoa_r+0x876>
 800ef0a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ef0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ef0e:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800ef12:	9406      	str	r4, [sp, #24]
 800ef14:	970a      	str	r7, [sp, #40]	; 0x28
 800ef16:	e65d      	b.n	800ebd4 <_dtoa_r+0x5c0>
 800ef18:	2500      	movs	r5, #0
 800ef1a:	9513      	str	r5, [sp, #76]	; 0x4c
 800ef1c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800ef1e:	9d06      	ldr	r5, [sp, #24]
 800ef20:	1945      	adds	r5, r0, r5
 800ef22:	9516      	str	r5, [sp, #88]	; 0x58
 800ef24:	f105 0b01 	add.w	fp, r5, #1
 800ef28:	f1bb 0f00 	cmp.w	fp, #0
 800ef2c:	f340 81b9 	ble.w	800f2a2 <_dtoa_r+0xc8e>
 800ef30:	f1bb 0f0e 	cmp.w	fp, #14
 800ef34:	bf8c      	ite	hi
 800ef36:	2400      	movhi	r4, #0
 800ef38:	f004 0401 	andls.w	r4, r4, #1
 800ef3c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ef40:	e6c2      	b.n	800ecc8 <_dtoa_r+0x6b4>
 800ef42:	2500      	movs	r5, #0
 800ef44:	9513      	str	r5, [sp, #76]	; 0x4c
 800ef46:	e6b3      	b.n	800ecb0 <_dtoa_r+0x69c>
 800ef48:	2501      	movs	r5, #1
 800ef4a:	9513      	str	r5, [sp, #76]	; 0x4c
 800ef4c:	e7e6      	b.n	800ef1c <_dtoa_r+0x908>
 800ef4e:	9b02      	ldr	r3, [sp, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f47f add2 	bne.w	800eafa <_dtoa_r+0x4e6>
 800ef56:	9a03      	ldr	r2, [sp, #12]
 800ef58:	9e02      	ldr	r6, [sp, #8]
 800ef5a:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	f47f adcc 	bne.w	800eafc <_dtoa_r+0x4e8>
 800ef64:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800ef68:	4013      	ands	r3, r2
 800ef6a:	461e      	mov	r6, r3
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f43f adc5 	beq.w	800eafc <_dtoa_r+0x4e8>
 800ef72:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef74:	2601      	movs	r6, #1
 800ef76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef78:	3001      	adds	r0, #1
 800ef7a:	9010      	str	r0, [sp, #64]	; 0x40
 800ef7c:	3101      	adds	r1, #1
 800ef7e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ef80:	e5bc      	b.n	800eafc <_dtoa_r+0x4e8>
 800ef82:	bf00      	nop
 800ef84:	08014450 	.word	0x08014450
 800ef88:	08014540 	.word	0x08014540
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f002 fcc1 	bl	8011914 <__aeabi_i2d>
 800ef92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef96:	f002 fd23 	bl	80119e0 <__aeabi_dmul>
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800efa2:	f002 fb6b 	bl	801167c <__adddf3>
 800efa6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800efa8:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 800efac:	4606      	mov	r6, r0
 800efae:	4627      	mov	r7, r4
 800efb0:	2d00      	cmp	r5, #0
 800efb2:	f040 80b6 	bne.w	800f122 <_dtoa_r+0xb0e>
 800efb6:	2300      	movs	r3, #0
 800efb8:	2200      	movs	r2, #0
 800efba:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800efbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efc2:	f002 fb59 	bl	8011678 <__aeabi_dsub>
 800efc6:	4632      	mov	r2, r6
 800efc8:	4623      	mov	r3, r4
 800efca:	4682      	mov	sl, r0
 800efcc:	468b      	mov	fp, r1
 800efce:	f002 ff9d 	bl	8011f0c <__aeabi_dcmpgt>
 800efd2:	2800      	cmp	r0, #0
 800efd4:	f040 80d3 	bne.w	800f17e <_dtoa_r+0xb6a>
 800efd8:	4632      	mov	r2, r6
 800efda:	4650      	mov	r0, sl
 800efdc:	4659      	mov	r1, fp
 800efde:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800efe2:	f002 ff75 	bl	8011ed0 <__aeabi_dcmplt>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	f000 808a 	beq.w	800f100 <_dtoa_r+0xaec>
 800efec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800efee:	46a2      	mov	sl, r4
 800eff0:	e656      	b.n	800eca0 <_dtoa_r+0x68c>
 800eff2:	4648      	mov	r0, r9
 800eff4:	4639      	mov	r1, r7
 800eff6:	f000 ff21 	bl	800fe3c <_Bfree>
 800effa:	e5e7      	b.n	800ebcc <_dtoa_r+0x5b8>
 800effc:	231c      	movs	r3, #28
 800effe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f000:	18ed      	adds	r5, r5, r3
 800f002:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f004:	18d2      	adds	r2, r2, r3
 800f006:	9210      	str	r2, [sp, #64]	; 0x40
 800f008:	18c0      	adds	r0, r0, r3
 800f00a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f00c:	e58e      	b.n	800eb2c <_dtoa_r+0x518>
 800f00e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f010:	2900      	cmp	r1, #0
 800f012:	f000 814e 	beq.w	800f2b2 <_dtoa_r+0xc9e>
 800f016:	2d00      	cmp	r5, #0
 800f018:	dd05      	ble.n	800f026 <_dtoa_r+0xa12>
 800f01a:	4651      	mov	r1, sl
 800f01c:	4648      	mov	r0, r9
 800f01e:	462a      	mov	r2, r5
 800f020:	f001 f8e0 	bl	80101e4 <__lshift>
 800f024:	4682      	mov	sl, r0
 800f026:	2e00      	cmp	r6, #0
 800f028:	f040 820a 	bne.w	800f440 <_dtoa_r+0xe2c>
 800f02c:	4656      	mov	r6, sl
 800f02e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f030:	4657      	mov	r7, sl
 800f032:	f04f 0801 	mov.w	r8, #1
 800f036:	9507      	str	r5, [sp, #28]
 800f038:	9d02      	ldr	r5, [sp, #8]
 800f03a:	9402      	str	r4, [sp, #8]
 800f03c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800f03e:	ea05 0508 	and.w	r5, r5, r8
 800f042:	950c      	str	r5, [sp, #48]	; 0x30
 800f044:	9902      	ldr	r1, [sp, #8]
 800f046:	4620      	mov	r0, r4
 800f048:	f7ff fa42 	bl	800e4d0 <quorem>
 800f04c:	4639      	mov	r1, r7
 800f04e:	f04f 0b01 	mov.w	fp, #1
 800f052:	9008      	str	r0, [sp, #32]
 800f054:	4620      	mov	r0, r4
 800f056:	f001 f925 	bl	80102a4 <__mcmp>
 800f05a:	9b08      	ldr	r3, [sp, #32]
 800f05c:	9902      	ldr	r1, [sp, #8]
 800f05e:	4632      	mov	r2, r6
 800f060:	3330      	adds	r3, #48	; 0x30
 800f062:	930b      	str	r3, [sp, #44]	; 0x2c
 800f064:	4605      	mov	r5, r0
 800f066:	4648      	mov	r0, r9
 800f068:	f001 f93c 	bl	80102e4 <__mdiff>
 800f06c:	68c3      	ldr	r3, [r0, #12]
 800f06e:	4682      	mov	sl, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d03d      	beq.n	800f0f0 <_dtoa_r+0xadc>
 800f074:	4648      	mov	r0, r9
 800f076:	4651      	mov	r1, sl
 800f078:	f000 fee0 	bl	800fe3c <_Bfree>
 800f07c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f07e:	ea5b 0000 	orrs.w	r0, fp, r0
 800f082:	d103      	bne.n	800f08c <_dtoa_r+0xa78>
 800f084:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f086:	2900      	cmp	r1, #0
 800f088:	f000 8216 	beq.w	800f4b8 <_dtoa_r+0xea4>
 800f08c:	2d00      	cmp	r5, #0
 800f08e:	f2c0 81b0 	blt.w	800f3f2 <_dtoa_r+0xdde>
 800f092:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f094:	4328      	orrs	r0, r5
 800f096:	d103      	bne.n	800f0a0 <_dtoa_r+0xa8c>
 800f098:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f09a:	2d00      	cmp	r5, #0
 800f09c:	f000 81a9 	beq.w	800f3f2 <_dtoa_r+0xdde>
 800f0a0:	f1bb 0f00 	cmp.w	fp, #0
 800f0a4:	f300 81f0 	bgt.w	800f488 <_dtoa_r+0xe74>
 800f0a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f0aa:	9807      	ldr	r0, [sp, #28]
 800f0ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f0ae:	4588      	cmp	r8, r1
 800f0b0:	f800 5b01 	strb.w	r5, [r0], #1
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	9007      	str	r0, [sp, #28]
 800f0b8:	f000 81e0 	beq.w	800f47c <_dtoa_r+0xe68>
 800f0bc:	4621      	mov	r1, r4
 800f0be:	220a      	movs	r2, #10
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	4648      	mov	r0, r9
 800f0c4:	f000 fec4 	bl	800fe50 <__multadd>
 800f0c8:	42b7      	cmp	r7, r6
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	d01e      	beq.n	800f10c <_dtoa_r+0xaf8>
 800f0ce:	4639      	mov	r1, r7
 800f0d0:	220a      	movs	r2, #10
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	4648      	mov	r0, r9
 800f0d6:	f000 febb 	bl	800fe50 <__multadd>
 800f0da:	4631      	mov	r1, r6
 800f0dc:	220a      	movs	r2, #10
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f108 0801 	add.w	r8, r8, #1
 800f0e4:	4607      	mov	r7, r0
 800f0e6:	4648      	mov	r0, r9
 800f0e8:	f000 feb2 	bl	800fe50 <__multadd>
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	e7a9      	b.n	800f044 <_dtoa_r+0xa30>
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	4651      	mov	r1, sl
 800f0f4:	f001 f8d6 	bl	80102a4 <__mcmp>
 800f0f8:	4683      	mov	fp, r0
 800f0fa:	e7bb      	b.n	800f074 <_dtoa_r+0xa60>
 800f0fc:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800f100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f108:	f7ff bbd4 	b.w	800e8b4 <_dtoa_r+0x2a0>
 800f10c:	4639      	mov	r1, r7
 800f10e:	4648      	mov	r0, r9
 800f110:	220a      	movs	r2, #10
 800f112:	2300      	movs	r3, #0
 800f114:	f000 fe9c 	bl	800fe50 <__multadd>
 800f118:	f108 0801 	add.w	r8, r8, #1
 800f11c:	4607      	mov	r7, r0
 800f11e:	4606      	mov	r6, r0
 800f120:	e790      	b.n	800f044 <_dtoa_r+0xa30>
 800f122:	9c06      	ldr	r4, [sp, #24]
 800f124:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f126:	9418      	str	r4, [sp, #96]	; 0x60
 800f128:	e65d      	b.n	800ede6 <_dtoa_r+0x7d2>
 800f12a:	9d06      	ldr	r5, [sp, #24]
 800f12c:	426c      	negs	r4, r5
 800f12e:	2c00      	cmp	r4, #0
 800f130:	f000 810f 	beq.w	800f352 <_dtoa_r+0xd3e>
 800f134:	f004 020f 	and.w	r2, r4, #15
 800f138:	4ba2      	ldr	r3, [pc, #648]	; (800f3c4 <_dtoa_r+0xdb0>)
 800f13a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f13e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f146:	f002 fc4b 	bl	80119e0 <__aeabi_dmul>
 800f14a:	1124      	asrs	r4, r4, #4
 800f14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f150:	f000 80ff 	beq.w	800f352 <_dtoa_r+0xd3e>
 800f154:	4d9c      	ldr	r5, [pc, #624]	; (800f3c8 <_dtoa_r+0xdb4>)
 800f156:	2602      	movs	r6, #2
 800f158:	4602      	mov	r2, r0
 800f15a:	460b      	mov	r3, r1
 800f15c:	07e7      	lsls	r7, r4, #31
 800f15e:	4610      	mov	r0, r2
 800f160:	4619      	mov	r1, r3
 800f162:	d506      	bpl.n	800f172 <_dtoa_r+0xb5e>
 800f164:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f168:	3601      	adds	r6, #1
 800f16a:	f002 fc39 	bl	80119e0 <__aeabi_dmul>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	3508      	adds	r5, #8
 800f174:	1064      	asrs	r4, r4, #1
 800f176:	d1f1      	bne.n	800f15c <_dtoa_r+0xb48>
 800f178:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f17c:	e5f7      	b.n	800ed6e <_dtoa_r+0x75a>
 800f17e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f180:	46a2      	mov	sl, r4
 800f182:	e507      	b.n	800eb94 <_dtoa_r+0x580>
 800f184:	f105 3aff 	add.w	sl, r5, #4294967295
 800f188:	498e      	ldr	r1, [pc, #568]	; (800f3c4 <_dtoa_r+0xdb0>)
 800f18a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f18c:	4632      	mov	r2, r6
 800f18e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f192:	463b      	mov	r3, r7
 800f194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f198:	9412      	str	r4, [sp, #72]	; 0x48
 800f19a:	f002 fc21 	bl	80119e0 <__aeabi_dmul>
 800f19e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f1a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1a6:	f002 febb 	bl	8011f20 <__aeabi_d2iz>
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	f002 fbb2 	bl	8011914 <__aeabi_i2d>
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1b8:	f002 fa5e 	bl	8011678 <__aeabi_dsub>
 800f1bc:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f1c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800f1c2:	2d01      	cmp	r5, #1
 800f1c4:	f804 3b01 	strb.w	r3, [r4], #1
 800f1c8:	46a0      	mov	r8, r4
 800f1ca:	9412      	str	r4, [sp, #72]	; 0x48
 800f1cc:	4606      	mov	r6, r0
 800f1ce:	460f      	mov	r7, r1
 800f1d0:	d020      	beq.n	800f214 <_dtoa_r+0xc00>
 800f1d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f1d4:	f104 38ff 	add.w	r8, r4, #4294967295
 800f1d8:	44a8      	add	r8, r5
 800f1da:	2300      	movs	r3, #0
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800f1e2:	f002 fbfd 	bl	80119e0 <__aeabi_dmul>
 800f1e6:	460f      	mov	r7, r1
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	f002 fe99 	bl	8011f20 <__aeabi_d2iz>
 800f1ee:	4605      	mov	r5, r0
 800f1f0:	f002 fb90 	bl	8011914 <__aeabi_i2d>
 800f1f4:	3530      	adds	r5, #48	; 0x30
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	f002 fa3b 	bl	8011678 <__aeabi_dsub>
 800f202:	f804 5f01 	strb.w	r5, [r4, #1]!
 800f206:	4544      	cmp	r4, r8
 800f208:	d1e7      	bne.n	800f1da <_dtoa_r+0xbc6>
 800f20a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800f20c:	4606      	mov	r6, r0
 800f20e:	460f      	mov	r7, r1
 800f210:	eb05 080a 	add.w	r8, r5, sl
 800f214:	2300      	movs	r3, #0
 800f216:	2200      	movs	r2, #0
 800f218:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800f21c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f220:	f002 fa2c 	bl	801167c <__adddf3>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	4630      	mov	r0, r6
 800f22a:	4639      	mov	r1, r7
 800f22c:	f002 fe6e 	bl	8011f0c <__aeabi_dcmpgt>
 800f230:	2800      	cmp	r0, #0
 800f232:	f000 8098 	beq.w	800f366 <_dtoa_r+0xd52>
 800f236:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800f23a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f23c:	f7ff bbf0 	b.w	800ea20 <_dtoa_r+0x40c>
 800f240:	46c8      	mov	r8, r9
 800f242:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f246:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f248:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800f24c:	e4c2      	b.n	800ebd4 <_dtoa_r+0x5c0>
 800f24e:	6923      	ldr	r3, [r4, #16]
 800f250:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f254:	6918      	ldr	r0, [r3, #16]
 800f256:	f000 fe87 	bl	800ff68 <__hi0bits>
 800f25a:	f1c0 0320 	rsb	r3, r0, #32
 800f25e:	e452      	b.n	800eb06 <_dtoa_r+0x4f2>
 800f260:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f262:	4621      	mov	r1, r4
 800f264:	f001 f81e 	bl	80102a4 <__mcmp>
 800f268:	2800      	cmp	r0, #0
 800f26a:	f6bf ac74 	bge.w	800eb56 <_dtoa_r+0x542>
 800f26e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f270:	4648      	mov	r0, r9
 800f272:	220a      	movs	r2, #10
 800f274:	2300      	movs	r3, #0
 800f276:	f000 fdeb 	bl	800fe50 <__multadd>
 800f27a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f27c:	900f      	str	r0, [sp, #60]	; 0x3c
 800f27e:	9806      	ldr	r0, [sp, #24]
 800f280:	3801      	subs	r0, #1
 800f282:	9006      	str	r0, [sp, #24]
 800f284:	2900      	cmp	r1, #0
 800f286:	f040 8131 	bne.w	800f4ec <_dtoa_r+0xed8>
 800f28a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f28c:	930e      	str	r3, [sp, #56]	; 0x38
 800f28e:	e462      	b.n	800eb56 <_dtoa_r+0x542>
 800f290:	2301      	movs	r3, #1
 800f292:	9316      	str	r3, [sp, #88]	; 0x58
 800f294:	930e      	str	r3, [sp, #56]	; 0x38
 800f296:	9327      	str	r3, [sp, #156]	; 0x9c
 800f298:	2100      	movs	r1, #0
 800f29a:	401c      	ands	r4, r3
 800f29c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800f2a0:	e523      	b.n	800ecea <_dtoa_r+0x6d6>
 800f2a2:	f1bb 0f0e 	cmp.w	fp, #14
 800f2a6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800f2aa:	bf8c      	ite	hi
 800f2ac:	2300      	movhi	r3, #0
 800f2ae:	2301      	movls	r3, #1
 800f2b0:	e7f2      	b.n	800f298 <_dtoa_r+0xc84>
 800f2b2:	46d3      	mov	fp, sl
 800f2b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f2b6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800f2b8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800f2bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f2be:	e002      	b.n	800f2c6 <_dtoa_r+0xcb2>
 800f2c0:	f000 fdc6 	bl	800fe50 <__multadd>
 800f2c4:	4606      	mov	r6, r0
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f7ff f901 	bl	800e4d0 <quorem>
 800f2ce:	220a      	movs	r2, #10
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4631      	mov	r1, r6
 800f2d4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f2d8:	f807 8005 	strb.w	r8, [r7, r5]
 800f2dc:	3501      	adds	r5, #1
 800f2de:	4648      	mov	r0, r9
 800f2e0:	45aa      	cmp	sl, r5
 800f2e2:	dced      	bgt.n	800f2c0 <_dtoa_r+0xcac>
 800f2e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f2e6:	46da      	mov	sl, fp
 800f2e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2ea:	461f      	mov	r7, r3
 800f2ec:	960f      	str	r6, [sp, #60]	; 0x3c
 800f2ee:	2a01      	cmp	r2, #1
 800f2f0:	bfac      	ite	ge
 800f2f2:	18ad      	addge	r5, r5, r2
 800f2f4:	3501      	addlt	r5, #1
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f2fa:	4648      	mov	r0, r9
 800f2fc:	f000 ff72 	bl	80101e4 <__lshift>
 800f300:	4621      	mov	r1, r4
 800f302:	900f      	str	r0, [sp, #60]	; 0x3c
 800f304:	f000 ffce 	bl	80102a4 <__mcmp>
 800f308:	2800      	cmp	r0, #0
 800f30a:	dd16      	ble.n	800f33a <_dtoa_r+0xd26>
 800f30c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f310:	462b      	mov	r3, r5
 800f312:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f314:	1c69      	adds	r1, r5, #1
 800f316:	e002      	b.n	800f31e <_dtoa_r+0xd0a>
 800f318:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800f31c:	3b01      	subs	r3, #1
 800f31e:	2a39      	cmp	r2, #57	; 0x39
 800f320:	f040 8087 	bne.w	800f432 <_dtoa_r+0xe1e>
 800f324:	428b      	cmp	r3, r1
 800f326:	d1f7      	bne.n	800f318 <_dtoa_r+0xd04>
 800f328:	9806      	ldr	r0, [sp, #24]
 800f32a:	2231      	movs	r2, #49	; 0x31
 800f32c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f32e:	3001      	adds	r0, #1
 800f330:	9006      	str	r0, [sp, #24]
 800f332:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f336:	930a      	str	r3, [sp, #40]	; 0x28
 800f338:	e436      	b.n	800eba8 <_dtoa_r+0x594>
 800f33a:	d102      	bne.n	800f342 <_dtoa_r+0xd2e>
 800f33c:	f018 0f01 	tst.w	r8, #1
 800f340:	d1e4      	bne.n	800f30c <_dtoa_r+0xcf8>
 800f342:	462a      	mov	r2, r5
 800f344:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 800f348:	2b30      	cmp	r3, #48	; 0x30
 800f34a:	d0fa      	beq.n	800f342 <_dtoa_r+0xd2e>
 800f34c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f34e:	920a      	str	r2, [sp, #40]	; 0x28
 800f350:	e42a      	b.n	800eba8 <_dtoa_r+0x594>
 800f352:	2602      	movs	r6, #2
 800f354:	e50b      	b.n	800ed6e <_dtoa_r+0x75a>
 800f356:	4648      	mov	r0, r9
 800f358:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f35a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f35c:	f000 fef6 	bl	801014c <__pow5mult>
 800f360:	900f      	str	r0, [sp, #60]	; 0x3c
 800f362:	f7ff bbb8 	b.w	800ead6 <_dtoa_r+0x4c2>
 800f366:	2100      	movs	r1, #0
 800f368:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f36c:	2000      	movs	r0, #0
 800f36e:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800f372:	f002 f981 	bl	8011678 <__aeabi_dsub>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	4630      	mov	r0, r6
 800f37c:	4639      	mov	r1, r7
 800f37e:	f002 fda7 	bl	8011ed0 <__aeabi_dcmplt>
 800f382:	2800      	cmp	r0, #0
 800f384:	f43f aebc 	beq.w	800f100 <_dtoa_r+0xaec>
 800f388:	4643      	mov	r3, r8
 800f38a:	4619      	mov	r1, r3
 800f38c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f390:	2a30      	cmp	r2, #48	; 0x30
 800f392:	d0fa      	beq.n	800f38a <_dtoa_r+0xd76>
 800f394:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800f396:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f398:	910a      	str	r1, [sp, #40]	; 0x28
 800f39a:	9406      	str	r4, [sp, #24]
 800f39c:	e41a      	b.n	800ebd4 <_dtoa_r+0x5c0>
 800f39e:	4648      	mov	r0, r9
 800f3a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f3a2:	f000 fed3 	bl	801014c <__pow5mult>
 800f3a6:	900f      	str	r0, [sp, #60]	; 0x3c
 800f3a8:	f7ff bb95 	b.w	800ead6 <_dtoa_r+0x4c2>
 800f3ac:	2400      	movs	r4, #0
 800f3ae:	46a2      	mov	sl, r4
 800f3b0:	e476      	b.n	800eca0 <_dtoa_r+0x68c>
 800f3b2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800f3b4:	2c00      	cmp	r4, #0
 800f3b6:	d05a      	beq.n	800f46e <_dtoa_r+0xe5a>
 800f3b8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800f3bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f3be:	3303      	adds	r3, #3
 800f3c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f3c2:	e44c      	b.n	800ec5e <_dtoa_r+0x64a>
 800f3c4:	08014450 	.word	0x08014450
 800f3c8:	08014540 	.word	0x08014540
 800f3cc:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800f3d0:	46a8      	mov	r8, r5
 800f3d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f3d4:	f7ff bb24 	b.w	800ea20 <_dtoa_r+0x40c>
 800f3d8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800f3da:	1c72      	adds	r2, r6, #1
 800f3dc:	930a      	str	r3, [sp, #40]	; 0x28
 800f3de:	b2d2      	uxtb	r2, r2
 800f3e0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f3e4:	9406      	str	r4, [sp, #24]
 800f3e6:	f7ff bbf5 	b.w	800ebd4 <_dtoa_r+0x5c0>
 800f3ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	1b45      	subs	r5, r0, r5
 800f3f0:	e435      	b.n	800ec5e <_dtoa_r+0x64a>
 800f3f2:	f1bb 0f00 	cmp.w	fp, #0
 800f3f6:	940f      	str	r4, [sp, #60]	; 0x3c
 800f3f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f3fc:	9c02      	ldr	r4, [sp, #8]
 800f3fe:	dd10      	ble.n	800f422 <_dtoa_r+0xe0e>
 800f400:	2201      	movs	r2, #1
 800f402:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f404:	4648      	mov	r0, r9
 800f406:	f000 feed 	bl	80101e4 <__lshift>
 800f40a:	4621      	mov	r1, r4
 800f40c:	900f      	str	r0, [sp, #60]	; 0x3c
 800f40e:	f000 ff49 	bl	80102a4 <__mcmp>
 800f412:	2800      	cmp	r0, #0
 800f414:	dd5e      	ble.n	800f4d4 <_dtoa_r+0xec0>
 800f416:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f41a:	d046      	beq.n	800f4aa <_dtoa_r+0xe96>
 800f41c:	9b08      	ldr	r3, [sp, #32]
 800f41e:	f103 0831 	add.w	r8, r3, #49	; 0x31
 800f422:	9b07      	ldr	r3, [sp, #28]
 800f424:	46b2      	mov	sl, r6
 800f426:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f428:	f803 8b01 	strb.w	r8, [r3], #1
 800f42c:	930a      	str	r3, [sp, #40]	; 0x28
 800f42e:	f7ff bbbb 	b.w	800eba8 <_dtoa_r+0x594>
 800f432:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f434:	3201      	adds	r2, #1
 800f436:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f43a:	930a      	str	r3, [sp, #40]	; 0x28
 800f43c:	f7ff bbb4 	b.w	800eba8 <_dtoa_r+0x594>
 800f440:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f444:	4648      	mov	r0, r9
 800f446:	f000 fcd3 	bl	800fdf0 <_Balloc>
 800f44a:	f8da 2010 	ldr.w	r2, [sl, #16]
 800f44e:	f10a 010c 	add.w	r1, sl, #12
 800f452:	3202      	adds	r2, #2
 800f454:	0092      	lsls	r2, r2, #2
 800f456:	4605      	mov	r5, r0
 800f458:	f100 000c 	add.w	r0, r0, #12
 800f45c:	f7fc f910 	bl	800b680 <memcpy>
 800f460:	4648      	mov	r0, r9
 800f462:	4629      	mov	r1, r5
 800f464:	2201      	movs	r2, #1
 800f466:	f000 febd 	bl	80101e4 <__lshift>
 800f46a:	4606      	mov	r6, r0
 800f46c:	e5df      	b.n	800f02e <_dtoa_r+0xa1a>
 800f46e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f470:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f472:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f474:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f478:	f7ff bbf1 	b.w	800ec5e <_dtoa_r+0x64a>
 800f47c:	940f      	str	r4, [sp, #60]	; 0x3c
 800f47e:	46b2      	mov	sl, r6
 800f480:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f484:	9c02      	ldr	r4, [sp, #8]
 800f486:	e736      	b.n	800f2f6 <_dtoa_r+0xce2>
 800f488:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f48c:	940f      	str	r4, [sp, #60]	; 0x3c
 800f48e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f492:	9c02      	ldr	r4, [sp, #8]
 800f494:	d009      	beq.n	800f4aa <_dtoa_r+0xe96>
 800f496:	9b07      	ldr	r3, [sp, #28]
 800f498:	f108 0801 	add.w	r8, r8, #1
 800f49c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f49e:	46b2      	mov	sl, r6
 800f4a0:	f803 8b01 	strb.w	r8, [r3], #1
 800f4a4:	930a      	str	r3, [sp, #40]	; 0x28
 800f4a6:	f7ff bb7f 	b.w	800eba8 <_dtoa_r+0x594>
 800f4aa:	9d07      	ldr	r5, [sp, #28]
 800f4ac:	2339      	movs	r3, #57	; 0x39
 800f4ae:	46b2      	mov	sl, r6
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	f805 3b01 	strb.w	r3, [r5], #1
 800f4b6:	e72b      	b.n	800f310 <_dtoa_r+0xcfc>
 800f4b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f4bc:	940f      	str	r4, [sp, #60]	; 0x3c
 800f4be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f4c2:	9c02      	ldr	r4, [sp, #8]
 800f4c4:	d0f1      	beq.n	800f4aa <_dtoa_r+0xe96>
 800f4c6:	2d00      	cmp	r5, #0
 800f4c8:	dca8      	bgt.n	800f41c <_dtoa_r+0xe08>
 800f4ca:	e7aa      	b.n	800f422 <_dtoa_r+0xe0e>
 800f4cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800f4ce:	940a      	str	r4, [sp, #40]	; 0x28
 800f4d0:	f7ff bb80 	b.w	800ebd4 <_dtoa_r+0x5c0>
 800f4d4:	d1a5      	bne.n	800f422 <_dtoa_r+0xe0e>
 800f4d6:	f018 0f01 	tst.w	r8, #1
 800f4da:	d0a2      	beq.n	800f422 <_dtoa_r+0xe0e>
 800f4dc:	e79b      	b.n	800f416 <_dtoa_r+0xe02>
 800f4de:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800f4e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f4e2:	9406      	str	r4, [sp, #24]
 800f4e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800f4e6:	940a      	str	r4, [sp, #40]	; 0x28
 800f4e8:	f7ff bb74 	b.w	800ebd4 <_dtoa_r+0x5c0>
 800f4ec:	4651      	mov	r1, sl
 800f4ee:	220a      	movs	r2, #10
 800f4f0:	4648      	mov	r0, r9
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	f000 fcac 	bl	800fe50 <__multadd>
 800f4f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f4fa:	920e      	str	r2, [sp, #56]	; 0x38
 800f4fc:	4682      	mov	sl, r0
 800f4fe:	f7ff bb2a 	b.w	800eb56 <_dtoa_r+0x542>
 800f502:	bf18      	it	ne
 800f504:	f1c3 033c 	rsbne	r3, r3, #60	; 0x3c
 800f508:	f43f ab10 	beq.w	800eb2c <_dtoa_r+0x518>
 800f50c:	e577      	b.n	800effe <_dtoa_r+0x9ea>
 800f50e:	bf00      	nop

0800f510 <_fflush_r>:
 800f510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f514:	4680      	mov	r8, r0
 800f516:	460c      	mov	r4, r1
 800f518:	b110      	cbz	r0, 800f520 <_fflush_r+0x10>
 800f51a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d066      	beq.n	800f5ee <_fflush_r+0xde>
 800f520:	89a6      	ldrh	r6, [r4, #12]
 800f522:	2e00      	cmp	r6, #0
 800f524:	d060      	beq.n	800f5e8 <_fflush_r+0xd8>
 800f526:	b233      	sxth	r3, r6
 800f528:	f013 0008 	ands.w	r0, r3, #8
 800f52c:	d01e      	beq.n	800f56c <_fflush_r+0x5c>
 800f52e:	6926      	ldr	r6, [r4, #16]
 800f530:	2e00      	cmp	r6, #0
 800f532:	f000 8088 	beq.w	800f646 <_fflush_r+0x136>
 800f536:	079b      	lsls	r3, r3, #30
 800f538:	6825      	ldr	r5, [r4, #0]
 800f53a:	6026      	str	r6, [r4, #0]
 800f53c:	bf08      	it	eq
 800f53e:	6963      	ldreq	r3, [r4, #20]
 800f540:	ebc6 0505 	rsb	r5, r6, r5
 800f544:	bf18      	it	ne
 800f546:	2300      	movne	r3, #0
 800f548:	60a3      	str	r3, [r4, #8]
 800f54a:	e00a      	b.n	800f562 <_fflush_r+0x52>
 800f54c:	4632      	mov	r2, r6
 800f54e:	462b      	mov	r3, r5
 800f550:	69e1      	ldr	r1, [r4, #28]
 800f552:	4640      	mov	r0, r8
 800f554:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800f556:	47b8      	blx	r7
 800f558:	2800      	cmp	r0, #0
 800f55a:	ebc0 0505 	rsb	r5, r0, r5
 800f55e:	4406      	add	r6, r0
 800f560:	dd65      	ble.n	800f62e <_fflush_r+0x11e>
 800f562:	2d00      	cmp	r5, #0
 800f564:	dcf2      	bgt.n	800f54c <_fflush_r+0x3c>
 800f566:	2000      	movs	r0, #0
 800f568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f56c:	6862      	ldr	r2, [r4, #4]
 800f56e:	f446 6300 	orr.w	r3, r6, #2048	; 0x800
 800f572:	81a3      	strh	r3, [r4, #12]
 800f574:	2a00      	cmp	r2, #0
 800f576:	dd62      	ble.n	800f63e <_fflush_r+0x12e>
 800f578:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f57a:	2e00      	cmp	r6, #0
 800f57c:	d063      	beq.n	800f646 <_fflush_r+0x136>
 800f57e:	b29b      	uxth	r3, r3
 800f580:	2200      	movs	r2, #0
 800f582:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 800f586:	f8d8 5000 	ldr.w	r5, [r8]
 800f58a:	f8c8 2000 	str.w	r2, [r8]
 800f58e:	bf18      	it	ne
 800f590:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800f592:	d033      	beq.n	800f5fc <_fflush_r+0xec>
 800f594:	0759      	lsls	r1, r3, #29
 800f596:	d505      	bpl.n	800f5a4 <_fflush_r+0x94>
 800f598:	6861      	ldr	r1, [r4, #4]
 800f59a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f59c:	1a52      	subs	r2, r2, r1
 800f59e:	b10b      	cbz	r3, 800f5a4 <_fflush_r+0x94>
 800f5a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f5a2:	1ad2      	subs	r2, r2, r3
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	69e1      	ldr	r1, [r4, #28]
 800f5a8:	4640      	mov	r0, r8
 800f5aa:	47b0      	blx	r6
 800f5ac:	1c43      	adds	r3, r0, #1
 800f5ae:	d030      	beq.n	800f612 <_fflush_r+0x102>
 800f5b0:	89a3      	ldrh	r3, [r4, #12]
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	6922      	ldr	r2, [r4, #16]
 800f5b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f5ba:	6061      	str	r1, [r4, #4]
 800f5bc:	041b      	lsls	r3, r3, #16
 800f5be:	6022      	str	r2, [r4, #0]
 800f5c0:	0c1b      	lsrs	r3, r3, #16
 800f5c2:	81a3      	strh	r3, [r4, #12]
 800f5c4:	04d9      	lsls	r1, r3, #19
 800f5c6:	d415      	bmi.n	800f5f4 <_fflush_r+0xe4>
 800f5c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f5ca:	f8c8 5000 	str.w	r5, [r8]
 800f5ce:	2900      	cmp	r1, #0
 800f5d0:	d042      	beq.n	800f658 <_fflush_r+0x148>
 800f5d2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f5d6:	4299      	cmp	r1, r3
 800f5d8:	d002      	beq.n	800f5e0 <_fflush_r+0xd0>
 800f5da:	4640      	mov	r0, r8
 800f5dc:	f000 fa30 	bl	800fa40 <_free_r>
 800f5e0:	2000      	movs	r0, #0
 800f5e2:	6320      	str	r0, [r4, #48]	; 0x30
 800f5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ee:	f000 f8b7 	bl	800f760 <__sinit>
 800f5f2:	e795      	b.n	800f520 <_fflush_r+0x10>
 800f5f4:	1c42      	adds	r2, r0, #1
 800f5f6:	d029      	beq.n	800f64c <_fflush_r+0x13c>
 800f5f8:	6520      	str	r0, [r4, #80]	; 0x50
 800f5fa:	e7e5      	b.n	800f5c8 <_fflush_r+0xb8>
 800f5fc:	463a      	mov	r2, r7
 800f5fe:	2301      	movs	r3, #1
 800f600:	69e1      	ldr	r1, [r4, #28]
 800f602:	4640      	mov	r0, r8
 800f604:	47b0      	blx	r6
 800f606:	1c43      	adds	r3, r0, #1
 800f608:	4602      	mov	r2, r0
 800f60a:	d028      	beq.n	800f65e <_fflush_r+0x14e>
 800f60c:	89a3      	ldrh	r3, [r4, #12]
 800f60e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f610:	e7c0      	b.n	800f594 <_fflush_r+0x84>
 800f612:	f8d8 3000 	ldr.w	r3, [r8]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d0ca      	beq.n	800f5b0 <_fflush_r+0xa0>
 800f61a:	2b1d      	cmp	r3, #29
 800f61c:	d0c8      	beq.n	800f5b0 <_fflush_r+0xa0>
 800f61e:	2b16      	cmp	r3, #22
 800f620:	d0c6      	beq.n	800f5b0 <_fflush_r+0xa0>
 800f622:	89a3      	ldrh	r3, [r4, #12]
 800f624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f628:	81a3      	strh	r3, [r4, #12]
 800f62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62e:	89a3      	ldrh	r3, [r4, #12]
 800f630:	f04f 30ff 	mov.w	r0, #4294967295
 800f634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f638:	81a3      	strh	r3, [r4, #12]
 800f63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f640:	2a00      	cmp	r2, #0
 800f642:	dc99      	bgt.n	800f578 <_fflush_r+0x68>
 800f644:	e7d1      	b.n	800f5ea <_fflush_r+0xda>
 800f646:	4630      	mov	r0, r6
 800f648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f64c:	f8d8 3000 	ldr.w	r3, [r8]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1b9      	bne.n	800f5c8 <_fflush_r+0xb8>
 800f654:	6520      	str	r0, [r4, #80]	; 0x50
 800f656:	e7b7      	b.n	800f5c8 <_fflush_r+0xb8>
 800f658:	4608      	mov	r0, r1
 800f65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f65e:	f8d8 3000 	ldr.w	r3, [r8]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d0d2      	beq.n	800f60c <_fflush_r+0xfc>
 800f666:	f1a3 001d 	sub.w	r0, r3, #29
 800f66a:	4241      	negs	r1, r0
 800f66c:	eb41 0100 	adc.w	r1, r1, r0
 800f670:	2b16      	cmp	r3, #22
 800f672:	bf14      	ite	ne
 800f674:	460b      	movne	r3, r1
 800f676:	f041 0301 	orreq.w	r3, r1, #1
 800f67a:	b123      	cbz	r3, 800f686 <_fflush_r+0x176>
 800f67c:	f8c8 5000 	str.w	r5, [r8]
 800f680:	4638      	mov	r0, r7
 800f682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f686:	89a3      	ldrh	r3, [r4, #12]
 800f688:	4610      	mov	r0, r2
 800f68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f68e:	81a3      	strh	r3, [r4, #12]
 800f690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f694 <fflush>:
 800f694:	4601      	mov	r1, r0
 800f696:	b110      	cbz	r0, 800f69e <fflush+0xa>
 800f698:	4b03      	ldr	r3, [pc, #12]	; (800f6a8 <fflush+0x14>)
 800f69a:	6818      	ldr	r0, [r3, #0]
 800f69c:	e738      	b.n	800f510 <_fflush_r>
 800f69e:	4b03      	ldr	r3, [pc, #12]	; (800f6ac <fflush+0x18>)
 800f6a0:	4903      	ldr	r1, [pc, #12]	; (800f6b0 <fflush+0x1c>)
 800f6a2:	6818      	ldr	r0, [r3, #0]
 800f6a4:	f000 baba 	b.w	800fc1c <_fwalk_reent>
 800f6a8:	20000048 	.word	0x20000048
 800f6ac:	080143f0 	.word	0x080143f0
 800f6b0:	0800f511 	.word	0x0800f511
	...

0800f6c0 <__fp_lock>:
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	4770      	bx	lr

0800f6c4 <__fp_unlock>:
 800f6c4:	2000      	movs	r0, #0
 800f6c6:	4770      	bx	lr

0800f6c8 <_cleanup_r>:
 800f6c8:	f241 31cd 	movw	r1, #5069	; 0x13cd
 800f6cc:	f6c0 0101 	movt	r1, #2049	; 0x801
 800f6d0:	f000 ba7e 	b.w	800fbd0 <_fwalk>

0800f6d4 <std.isra.0>:
 800f6d4:	b570      	push	{r4, r5, r6, lr}
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	2300      	movs	r3, #0
 800f6da:	460e      	mov	r6, r1
 800f6dc:	4615      	mov	r5, r2
 800f6de:	6023      	str	r3, [r4, #0]
 800f6e0:	6063      	str	r3, [r4, #4]
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	60a3      	str	r3, [r4, #8]
 800f6e6:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 800f6ea:	6663      	str	r3, [r4, #100]	; 0x64
 800f6ec:	2208      	movs	r2, #8
 800f6ee:	6123      	str	r3, [r4, #16]
 800f6f0:	6163      	str	r3, [r4, #20]
 800f6f2:	61a3      	str	r3, [r4, #24]
 800f6f4:	81a6      	strh	r6, [r4, #12]
 800f6f6:	81e5      	strh	r5, [r4, #14]
 800f6f8:	f7fc f872 	bl	800b7e0 <memset>
 800f6fc:	f240 7351 	movw	r3, #1873	; 0x751
 800f700:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f704:	6223      	str	r3, [r4, #32]
 800f706:	f240 7379 	movw	r3, #1913	; 0x779
 800f70a:	61e4      	str	r4, [r4, #28]
 800f70c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f710:	6263      	str	r3, [r4, #36]	; 0x24
 800f712:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800f716:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f71a:	62a3      	str	r3, [r4, #40]	; 0x28
 800f71c:	f240 73d5 	movw	r3, #2005	; 0x7d5
 800f720:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f724:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f726:	bd70      	pop	{r4, r5, r6, pc}

0800f728 <__sfmoreglue>:
 800f728:	b570      	push	{r4, r5, r6, lr}
 800f72a:	2568      	movs	r5, #104	; 0x68
 800f72c:	460e      	mov	r6, r1
 800f72e:	fb05 f501 	mul.w	r5, r5, r1
 800f732:	f105 010c 	add.w	r1, r5, #12
 800f736:	f7fb fc73 	bl	800b020 <_malloc_r>
 800f73a:	4604      	mov	r4, r0
 800f73c:	b140      	cbz	r0, 800f750 <__sfmoreglue+0x28>
 800f73e:	2100      	movs	r1, #0
 800f740:	f100 000c 	add.w	r0, r0, #12
 800f744:	e884 0042 	stmia.w	r4, {r1, r6}
 800f748:	462a      	mov	r2, r5
 800f74a:	60a0      	str	r0, [r4, #8]
 800f74c:	f7fc f848 	bl	800b7e0 <memset>
 800f750:	4620      	mov	r0, r4
 800f752:	bd70      	pop	{r4, r5, r6, pc}

0800f754 <_cleanup>:
 800f754:	f244 33f0 	movw	r3, #17392	; 0x43f0
 800f758:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f75c:	6818      	ldr	r0, [r3, #0]
 800f75e:	e7b3      	b.n	800f6c8 <_cleanup_r>

0800f760 <__sinit>:
 800f760:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f762:	b570      	push	{r4, r5, r6, lr}
 800f764:	4604      	mov	r4, r0
 800f766:	b103      	cbz	r3, 800f76a <__sinit+0xa>
 800f768:	bd70      	pop	{r4, r5, r6, pc}
 800f76a:	4e0e      	ldr	r6, [pc, #56]	; (800f7a4 <__sinit+0x44>)
 800f76c:	2501      	movs	r5, #1
 800f76e:	2104      	movs	r1, #4
 800f770:	461a      	mov	r2, r3
 800f772:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 800f776:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800f77a:	63e6      	str	r6, [r4, #60]	; 0x3c
 800f77c:	2603      	movs	r6, #3
 800f77e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800f782:	6840      	ldr	r0, [r0, #4]
 800f784:	63a5      	str	r5, [r4, #56]	; 0x38
 800f786:	f8c4 62e4 	str.w	r6, [r4, #740]	; 0x2e4
 800f78a:	f7ff ffa3 	bl	800f6d4 <std.isra.0>
 800f78e:	68a0      	ldr	r0, [r4, #8]
 800f790:	2109      	movs	r1, #9
 800f792:	462a      	mov	r2, r5
 800f794:	f7ff ff9e 	bl	800f6d4 <std.isra.0>
 800f798:	68e0      	ldr	r0, [r4, #12]
 800f79a:	2112      	movs	r1, #18
 800f79c:	2202      	movs	r2, #2
 800f79e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7a2:	e797      	b.n	800f6d4 <std.isra.0>
 800f7a4:	0800f6c9 	.word	0x0800f6c9

0800f7a8 <__sfp>:
 800f7a8:	4b25      	ldr	r3, [pc, #148]	; (800f840 <__sfp+0x98>)
 800f7aa:	b570      	push	{r4, r5, r6, lr}
 800f7ac:	4606      	mov	r6, r0
 800f7ae:	681d      	ldr	r5, [r3, #0]
 800f7b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d034      	beq.n	800f820 <__sfp+0x78>
 800f7b6:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800f7ba:	686b      	ldr	r3, [r5, #4]
 800f7bc:	68a9      	ldr	r1, [r5, #8]
 800f7be:	3b01      	subs	r3, #1
 800f7c0:	d411      	bmi.n	800f7e6 <__sfp+0x3e>
 800f7c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	b18a      	cbz	r2, 800f7ee <__sfp+0x46>
 800f7ca:	f101 0068 	add.w	r0, r1, #104	; 0x68
 800f7ce:	e002      	b.n	800f7d6 <__sfp+0x2e>
 800f7d0:	f932 2c5c 	ldrsh.w	r2, [r2, #-92]
 800f7d4:	b15a      	cbz	r2, 800f7ee <__sfp+0x46>
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	3468      	adds	r4, #104	; 0x68
 800f7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7de:	ebc1 0204 	rsb	r2, r1, r4
 800f7e2:	4402      	add	r2, r0
 800f7e4:	d1f4      	bne.n	800f7d0 <__sfp+0x28>
 800f7e6:	6828      	ldr	r0, [r5, #0]
 800f7e8:	b1f0      	cbz	r0, 800f828 <__sfp+0x80>
 800f7ea:	4605      	mov	r5, r0
 800f7ec:	e7e5      	b.n	800f7ba <__sfp+0x12>
 800f7ee:	2500      	movs	r5, #0
 800f7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f7f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f7f8:	81e3      	strh	r3, [r4, #14]
 800f7fa:	6665      	str	r5, [r4, #100]	; 0x64
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	6025      	str	r5, [r4, #0]
 800f800:	4629      	mov	r1, r5
 800f802:	81a3      	strh	r3, [r4, #12]
 800f804:	2208      	movs	r2, #8
 800f806:	60a5      	str	r5, [r4, #8]
 800f808:	6065      	str	r5, [r4, #4]
 800f80a:	6125      	str	r5, [r4, #16]
 800f80c:	6165      	str	r5, [r4, #20]
 800f80e:	61a5      	str	r5, [r4, #24]
 800f810:	f7fb ffe6 	bl	800b7e0 <memset>
 800f814:	6325      	str	r5, [r4, #48]	; 0x30
 800f816:	6365      	str	r5, [r4, #52]	; 0x34
 800f818:	6465      	str	r5, [r4, #68]	; 0x44
 800f81a:	64a5      	str	r5, [r4, #72]	; 0x48
 800f81c:	4620      	mov	r0, r4
 800f81e:	bd70      	pop	{r4, r5, r6, pc}
 800f820:	4628      	mov	r0, r5
 800f822:	f7ff ff9d 	bl	800f760 <__sinit>
 800f826:	e7c6      	b.n	800f7b6 <__sfp+0xe>
 800f828:	4630      	mov	r0, r6
 800f82a:	2104      	movs	r1, #4
 800f82c:	f7ff ff7c 	bl	800f728 <__sfmoreglue>
 800f830:	6028      	str	r0, [r5, #0]
 800f832:	2800      	cmp	r0, #0
 800f834:	d1d9      	bne.n	800f7ea <__sfp+0x42>
 800f836:	230c      	movs	r3, #12
 800f838:	4604      	mov	r4, r0
 800f83a:	6033      	str	r3, [r6, #0]
 800f83c:	e7ee      	b.n	800f81c <__sfp+0x74>
 800f83e:	bf00      	nop
 800f840:	080143f0 	.word	0x080143f0

0800f844 <__sfp_lock_acquire>:
 800f844:	4770      	bx	lr
 800f846:	bf00      	nop

0800f848 <__sfp_lock_release>:
 800f848:	4770      	bx	lr
 800f84a:	bf00      	nop

0800f84c <__sinit_lock_acquire>:
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop

0800f850 <__sinit_lock_release>:
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop

0800f854 <__fp_lock_all>:
 800f854:	f240 0348 	movw	r3, #72	; 0x48
 800f858:	f24f 61c1 	movw	r1, #63169	; 0xf6c1
 800f85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f860:	f6c0 0100 	movt	r1, #2048	; 0x800
 800f864:	6818      	ldr	r0, [r3, #0]
 800f866:	f000 b9b3 	b.w	800fbd0 <_fwalk>
 800f86a:	bf00      	nop

0800f86c <__fp_unlock_all>:
 800f86c:	f240 0348 	movw	r3, #72	; 0x48
 800f870:	f24f 61c5 	movw	r1, #63173	; 0xf6c5
 800f874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f878:	f6c0 0100 	movt	r1, #2048	; 0x800
 800f87c:	6818      	ldr	r0, [r3, #0]
 800f87e:	f000 b9a7 	b.w	800fbd0 <_fwalk>
 800f882:	bf00      	nop
	...

0800f890 <_fputwc_r>:
 800f890:	8993      	ldrh	r3, [r2, #12]
 800f892:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f896:	4614      	mov	r4, r2
 800f898:	049a      	lsls	r2, r3, #18
 800f89a:	b083      	sub	sp, #12
 800f89c:	bf5e      	ittt	pl
 800f89e:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800f8a2:	81a3      	strhpl	r3, [r4, #12]
 800f8a4:	6e62      	ldrpl	r2, [r4, #100]	; 0x64
 800f8a6:	4607      	mov	r7, r0
 800f8a8:	460e      	mov	r6, r1
 800f8aa:	bf5c      	itt	pl
 800f8ac:	f442 5300 	orrpl.w	r3, r2, #8192	; 0x2000
 800f8b0:	6663      	strpl	r3, [r4, #100]	; 0x64
 800f8b2:	f000 fa05 	bl	800fcc0 <__locale_mb_cur_max>
 800f8b6:	2801      	cmp	r0, #1
 800f8b8:	d04b      	beq.n	800f952 <_fputwc_r+0xc2>
 800f8ba:	ad01      	add	r5, sp, #4
 800f8bc:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	4632      	mov	r2, r6
 800f8c6:	f001 fc8b 	bl	80111e0 <_wcrtomb_r>
 800f8ca:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f8ce:	4681      	mov	r9, r0
 800f8d0:	d028      	beq.n	800f924 <_fputwc_r+0x94>
 800f8d2:	2800      	cmp	r0, #0
 800f8d4:	d03b      	beq.n	800f94e <_fputwc_r+0xbe>
 800f8d6:	f04f 0800 	mov.w	r8, #0
 800f8da:	e00a      	b.n	800f8f2 <_fputwc_r+0x62>
 800f8dc:	6823      	ldr	r3, [r4, #0]
 800f8de:	f815 2008 	ldrb.w	r2, [r5, r8]
 800f8e2:	701a      	strb	r2, [r3, #0]
 800f8e4:	6823      	ldr	r3, [r4, #0]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	6023      	str	r3, [r4, #0]
 800f8ea:	f108 0801 	add.w	r8, r8, #1
 800f8ee:	45c8      	cmp	r8, r9
 800f8f0:	d22d      	bcs.n	800f94e <_fputwc_r+0xbe>
 800f8f2:	68a3      	ldr	r3, [r4, #8]
 800f8f4:	3b01      	subs	r3, #1
 800f8f6:	60a3      	str	r3, [r4, #8]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	daef      	bge.n	800f8dc <_fputwc_r+0x4c>
 800f8fc:	69a2      	ldr	r2, [r4, #24]
 800f8fe:	2000      	movs	r0, #0
 800f900:	4293      	cmp	r3, r2
 800f902:	db16      	blt.n	800f932 <_fputwc_r+0xa2>
 800f904:	6823      	ldr	r3, [r4, #0]
 800f906:	f815 2008 	ldrb.w	r2, [r5, r8]
 800f90a:	701a      	strb	r2, [r3, #0]
 800f90c:	6823      	ldr	r3, [r4, #0]
 800f90e:	1c5a      	adds	r2, r3, #1
 800f910:	7819      	ldrb	r1, [r3, #0]
 800f912:	290a      	cmp	r1, #10
 800f914:	bf18      	it	ne
 800f916:	6022      	strne	r2, [r4, #0]
 800f918:	d00d      	beq.n	800f936 <_fputwc_r+0xa6>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d0e5      	beq.n	800f8ea <_fputwc_r+0x5a>
 800f91e:	f04f 30ff 	mov.w	r0, #4294967295
 800f922:	e003      	b.n	800f92c <_fputwc_r+0x9c>
 800f924:	89a3      	ldrh	r3, [r4, #12]
 800f926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f92a:	81a3      	strh	r3, [r4, #12]
 800f92c:	b003      	add	sp, #12
 800f92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f932:	f815 1008 	ldrb.w	r1, [r5, r8]
 800f936:	4638      	mov	r0, r7
 800f938:	4622      	mov	r2, r4
 800f93a:	f7fe fca9 	bl	800e290 <__swbuf_r>
 800f93e:	f1a0 33ff 	sub.w	r3, r0, #4294967295
 800f942:	4258      	negs	r0, r3
 800f944:	eb40 0003 	adc.w	r0, r0, r3
 800f948:	2800      	cmp	r0, #0
 800f94a:	d0ce      	beq.n	800f8ea <_fputwc_r+0x5a>
 800f94c:	e7e7      	b.n	800f91e <_fputwc_r+0x8e>
 800f94e:	4630      	mov	r0, r6
 800f950:	e7ec      	b.n	800f92c <_fputwc_r+0x9c>
 800f952:	1c33      	adds	r3, r6, #0
 800f954:	bf18      	it	ne
 800f956:	2301      	movne	r3, #1
 800f958:	2eff      	cmp	r6, #255	; 0xff
 800f95a:	bf8c      	ite	hi
 800f95c:	2300      	movhi	r3, #0
 800f95e:	f003 0301 	andls.w	r3, r3, #1
 800f962:	2b00      	cmp	r3, #0
 800f964:	d0a9      	beq.n	800f8ba <_fputwc_r+0x2a>
 800f966:	ad02      	add	r5, sp, #8
 800f968:	4681      	mov	r9, r0
 800f96a:	f805 6d04 	strb.w	r6, [r5, #-4]!
 800f96e:	e7b2      	b.n	800f8d6 <_fputwc_r+0x46>

0800f970 <fputwc>:
 800f970:	b570      	push	{r4, r5, r6, lr}
 800f972:	4606      	mov	r6, r0
 800f974:	4c06      	ldr	r4, [pc, #24]	; (800f990 <fputwc+0x20>)
 800f976:	460d      	mov	r5, r1
 800f978:	6820      	ldr	r0, [r4, #0]
 800f97a:	b120      	cbz	r0, 800f986 <fputwc+0x16>
 800f97c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f97e:	b913      	cbnz	r3, 800f986 <fputwc+0x16>
 800f980:	f7ff feee 	bl	800f760 <__sinit>
 800f984:	6820      	ldr	r0, [r4, #0]
 800f986:	4631      	mov	r1, r6
 800f988:	462a      	mov	r2, r5
 800f98a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f98e:	e77f      	b.n	800f890 <_fputwc_r>
 800f990:	20000048 	.word	0x20000048
	...

0800f9a0 <_malloc_trim_r>:
 800f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	4d23      	ldr	r5, [pc, #140]	; (800fa34 <_malloc_trim_r+0x94>)
 800f9a6:	460f      	mov	r7, r1
 800f9a8:	f7f4 fb56 	bl	8004058 <__malloc_lock>
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	68ab      	ldr	r3, [r5, #8]
 800f9b0:	685e      	ldr	r6, [r3, #4]
 800f9b2:	f026 0603 	bic.w	r6, r6, #3
 800f9b6:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 800f9ba:	330f      	adds	r3, #15
 800f9bc:	1bdf      	subs	r7, r3, r7
 800f9be:	0b3f      	lsrs	r7, r7, #12
 800f9c0:	3f01      	subs	r7, #1
 800f9c2:	033f      	lsls	r7, r7, #12
 800f9c4:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800f9c8:	db1c      	blt.n	800fa04 <_malloc_trim_r+0x64>
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	f7f4 fada 	bl	8003f84 <_sbrk_r>
 800f9d0:	68ab      	ldr	r3, [r5, #8]
 800f9d2:	199b      	adds	r3, r3, r6
 800f9d4:	4298      	cmp	r0, r3
 800f9d6:	d019      	beq.n	800fa0c <_malloc_trim_r+0x6c>
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f7f4 fb47 	bl	800406c <__malloc_unlock>
 800f9de:	2000      	movs	r0, #0
 800f9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	f7f4 facd 	bl	8003f84 <_sbrk_r>
 800f9ea:	68ab      	ldr	r3, [r5, #8]
 800f9ec:	1ac2      	subs	r2, r0, r3
 800f9ee:	2a0f      	cmp	r2, #15
 800f9f0:	dd07      	ble.n	800fa02 <_malloc_trim_r+0x62>
 800f9f2:	f042 0201 	orr.w	r2, r2, #1
 800f9f6:	605a      	str	r2, [r3, #4]
 800f9f8:	4b0f      	ldr	r3, [pc, #60]	; (800fa38 <_malloc_trim_r+0x98>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	1ac0      	subs	r0, r0, r3
 800f9fe:	4b0f      	ldr	r3, [pc, #60]	; (800fa3c <_malloc_trim_r+0x9c>)
 800fa00:	6018      	str	r0, [r3, #0]
 800fa02:	4620      	mov	r0, r4
 800fa04:	f7f4 fb32 	bl	800406c <__malloc_unlock>
 800fa08:	2000      	movs	r0, #0
 800fa0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa0c:	4279      	negs	r1, r7
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f7f4 fab8 	bl	8003f84 <_sbrk_r>
 800fa14:	3001      	adds	r0, #1
 800fa16:	d0e4      	beq.n	800f9e2 <_malloc_trim_r+0x42>
 800fa18:	4b08      	ldr	r3, [pc, #32]	; (800fa3c <_malloc_trim_r+0x9c>)
 800fa1a:	1bf6      	subs	r6, r6, r7
 800fa1c:	68a9      	ldr	r1, [r5, #8]
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f046 0601 	orr.w	r6, r6, #1
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	604e      	str	r6, [r1, #4]
 800fa28:	1bd7      	subs	r7, r2, r7
 800fa2a:	601f      	str	r7, [r3, #0]
 800fa2c:	f7f4 fb1e 	bl	800406c <__malloc_unlock>
 800fa30:	2001      	movs	r0, #1
 800fa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa34:	20000478 	.word	0x20000478
 800fa38:	20000880 	.word	0x20000880
 800fa3c:	20000a94 	.word	0x20000a94

0800fa40 <_free_r>:
 800fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa42:	460d      	mov	r5, r1
 800fa44:	4604      	mov	r4, r0
 800fa46:	2900      	cmp	r1, #0
 800fa48:	d06f      	beq.n	800fb2a <_free_r+0xea>
 800fa4a:	f7f4 fb05 	bl	8004058 <__malloc_lock>
 800fa4e:	4e59      	ldr	r6, [pc, #356]	; (800fbb4 <_free_r+0x174>)
 800fa50:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800fa54:	f1a5 0108 	sub.w	r1, r5, #8
 800fa58:	f020 0301 	bic.w	r3, r0, #1
 800fa5c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800fa60:	18ca      	adds	r2, r1, r3
 800fa62:	4594      	cmp	ip, r2
 800fa64:	6857      	ldr	r7, [r2, #4]
 800fa66:	f027 0703 	bic.w	r7, r7, #3
 800fa6a:	d07b      	beq.n	800fb64 <_free_r+0x124>
 800fa6c:	f010 0001 	ands.w	r0, r0, #1
 800fa70:	6057      	str	r7, [r2, #4]
 800fa72:	d04a      	beq.n	800fb0a <_free_r+0xca>
 800fa74:	2000      	movs	r0, #0
 800fa76:	19d5      	adds	r5, r2, r7
 800fa78:	686d      	ldr	r5, [r5, #4]
 800fa7a:	f015 0f01 	tst.w	r5, #1
 800fa7e:	d106      	bne.n	800fa8e <_free_r+0x4e>
 800fa80:	19db      	adds	r3, r3, r7
 800fa82:	6895      	ldr	r5, [r2, #8]
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d061      	beq.n	800fb4c <_free_r+0x10c>
 800fa88:	68d2      	ldr	r2, [r2, #12]
 800fa8a:	60ea      	str	r2, [r5, #12]
 800fa8c:	6095      	str	r5, [r2, #8]
 800fa8e:	f043 0201 	orr.w	r2, r3, #1
 800fa92:	50cb      	str	r3, [r1, r3]
 800fa94:	604a      	str	r2, [r1, #4]
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d132      	bne.n	800fb00 <_free_r+0xc0>
 800fa9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa9e:	d345      	bcc.n	800fb2c <_free_r+0xec>
 800faa0:	099d      	lsrs	r5, r3, #6
 800faa2:	0a5a      	lsrs	r2, r3, #9
 800faa4:	3538      	adds	r5, #56	; 0x38
 800faa6:	00e8      	lsls	r0, r5, #3
 800faa8:	2a04      	cmp	r2, #4
 800faaa:	d916      	bls.n	800fada <_free_r+0x9a>
 800faac:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800fab0:	00e8      	lsls	r0, r5, #3
 800fab2:	2a14      	cmp	r2, #20
 800fab4:	d911      	bls.n	800fada <_free_r+0x9a>
 800fab6:	0b1d      	lsrs	r5, r3, #12
 800fab8:	356e      	adds	r5, #110	; 0x6e
 800faba:	00e8      	lsls	r0, r5, #3
 800fabc:	2a54      	cmp	r2, #84	; 0x54
 800fabe:	d90c      	bls.n	800fada <_free_r+0x9a>
 800fac0:	0bdd      	lsrs	r5, r3, #15
 800fac2:	3577      	adds	r5, #119	; 0x77
 800fac4:	00e8      	lsls	r0, r5, #3
 800fac6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800faca:	d906      	bls.n	800fada <_free_r+0x9a>
 800facc:	f240 5054 	movw	r0, #1364	; 0x554
 800fad0:	4282      	cmp	r2, r0
 800fad2:	d86b      	bhi.n	800fbac <_free_r+0x16c>
 800fad4:	0c9d      	lsrs	r5, r3, #18
 800fad6:	357c      	adds	r5, #124	; 0x7c
 800fad8:	00e8      	lsls	r0, r5, #3
 800fada:	1986      	adds	r6, r0, r6
 800fadc:	4835      	ldr	r0, [pc, #212]	; (800fbb4 <_free_r+0x174>)
 800fade:	68b2      	ldr	r2, [r6, #8]
 800fae0:	42b2      	cmp	r2, r6
 800fae2:	d103      	bne.n	800faec <_free_r+0xac>
 800fae4:	e059      	b.n	800fb9a <_free_r+0x15a>
 800fae6:	6892      	ldr	r2, [r2, #8]
 800fae8:	4296      	cmp	r6, r2
 800faea:	d004      	beq.n	800faf6 <_free_r+0xb6>
 800faec:	6850      	ldr	r0, [r2, #4]
 800faee:	f020 0003 	bic.w	r0, r0, #3
 800faf2:	4283      	cmp	r3, r0
 800faf4:	d3f7      	bcc.n	800fae6 <_free_r+0xa6>
 800faf6:	68d3      	ldr	r3, [r2, #12]
 800faf8:	60cb      	str	r3, [r1, #12]
 800fafa:	608a      	str	r2, [r1, #8]
 800fafc:	60d1      	str	r1, [r2, #12]
 800fafe:	6099      	str	r1, [r3, #8]
 800fb00:	4620      	mov	r0, r4
 800fb02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb06:	f7f4 bab1 	b.w	800406c <__malloc_unlock>
 800fb0a:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800fb0e:	f106 0c08 	add.w	ip, r6, #8
 800fb12:	1b49      	subs	r1, r1, r5
 800fb14:	195b      	adds	r3, r3, r5
 800fb16:	688d      	ldr	r5, [r1, #8]
 800fb18:	4565      	cmp	r5, ip
 800fb1a:	d03c      	beq.n	800fb96 <_free_r+0x156>
 800fb1c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800fb20:	f8c5 c00c 	str.w	ip, [r5, #12]
 800fb24:	f8cc 5008 	str.w	r5, [ip, #8]
 800fb28:	e7a5      	b.n	800fa76 <_free_r+0x36>
 800fb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb2c:	08db      	lsrs	r3, r3, #3
 800fb2e:	2001      	movs	r0, #1
 800fb30:	6875      	ldr	r5, [r6, #4]
 800fb32:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800fb36:	109b      	asrs	r3, r3, #2
 800fb38:	fa10 f303 	lsls.w	r3, r0, r3
 800fb3c:	60ca      	str	r2, [r1, #12]
 800fb3e:	6890      	ldr	r0, [r2, #8]
 800fb40:	432b      	orrs	r3, r5
 800fb42:	6073      	str	r3, [r6, #4]
 800fb44:	6088      	str	r0, [r1, #8]
 800fb46:	60c1      	str	r1, [r0, #12]
 800fb48:	6091      	str	r1, [r2, #8]
 800fb4a:	e7d9      	b.n	800fb00 <_free_r+0xc0>
 800fb4c:	4f1a      	ldr	r7, [pc, #104]	; (800fbb8 <_free_r+0x178>)
 800fb4e:	42bd      	cmp	r5, r7
 800fb50:	d19a      	bne.n	800fa88 <_free_r+0x48>
 800fb52:	6171      	str	r1, [r6, #20]
 800fb54:	f043 0201 	orr.w	r2, r3, #1
 800fb58:	6131      	str	r1, [r6, #16]
 800fb5a:	60cd      	str	r5, [r1, #12]
 800fb5c:	608d      	str	r5, [r1, #8]
 800fb5e:	604a      	str	r2, [r1, #4]
 800fb60:	50cb      	str	r3, [r1, r3]
 800fb62:	e7cd      	b.n	800fb00 <_free_r+0xc0>
 800fb64:	07c2      	lsls	r2, r0, #31
 800fb66:	443b      	add	r3, r7
 800fb68:	d407      	bmi.n	800fb7a <_free_r+0x13a>
 800fb6a:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800fb6e:	1a89      	subs	r1, r1, r2
 800fb70:	189b      	adds	r3, r3, r2
 800fb72:	6888      	ldr	r0, [r1, #8]
 800fb74:	68ca      	ldr	r2, [r1, #12]
 800fb76:	60c2      	str	r2, [r0, #12]
 800fb78:	6090      	str	r0, [r2, #8]
 800fb7a:	f043 0201 	orr.w	r2, r3, #1
 800fb7e:	604a      	str	r2, [r1, #4]
 800fb80:	4a0e      	ldr	r2, [pc, #56]	; (800fbbc <_free_r+0x17c>)
 800fb82:	60b1      	str	r1, [r6, #8]
 800fb84:	6812      	ldr	r2, [r2, #0]
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d3ba      	bcc.n	800fb00 <_free_r+0xc0>
 800fb8a:	4b0d      	ldr	r3, [pc, #52]	; (800fbc0 <_free_r+0x180>)
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	6819      	ldr	r1, [r3, #0]
 800fb90:	f7ff ff06 	bl	800f9a0 <_malloc_trim_r>
 800fb94:	e7b4      	b.n	800fb00 <_free_r+0xc0>
 800fb96:	2001      	movs	r0, #1
 800fb98:	e76d      	b.n	800fa76 <_free_r+0x36>
 800fb9a:	2701      	movs	r7, #1
 800fb9c:	6846      	ldr	r6, [r0, #4]
 800fb9e:	10ad      	asrs	r5, r5, #2
 800fba0:	4613      	mov	r3, r2
 800fba2:	fa17 f505 	lsls.w	r5, r7, r5
 800fba6:	4335      	orrs	r5, r6
 800fba8:	6045      	str	r5, [r0, #4]
 800fbaa:	e7a5      	b.n	800faf8 <_free_r+0xb8>
 800fbac:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 800fbb0:	257e      	movs	r5, #126	; 0x7e
 800fbb2:	e792      	b.n	800fada <_free_r+0x9a>
 800fbb4:	20000478 	.word	0x20000478
 800fbb8:	20000480 	.word	0x20000480
 800fbbc:	20000884 	.word	0x20000884
 800fbc0:	20000a90 	.word	0x20000a90
	...

0800fbd0 <_fwalk>:
 800fbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd4:	4606      	mov	r6, r0
 800fbd6:	4688      	mov	r8, r1
 800fbd8:	f7ff fe34 	bl	800f844 <__sfp_lock_acquire>
 800fbdc:	f516 7638 	adds.w	r6, r6, #736	; 0x2e0
 800fbe0:	bf08      	it	eq
 800fbe2:	4637      	moveq	r7, r6
 800fbe4:	d015      	beq.n	800fc12 <_fwalk+0x42>
 800fbe6:	2700      	movs	r7, #0
 800fbe8:	6875      	ldr	r5, [r6, #4]
 800fbea:	68b4      	ldr	r4, [r6, #8]
 800fbec:	3d01      	subs	r5, #1
 800fbee:	d40d      	bmi.n	800fc0c <_fwalk+0x3c>
 800fbf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbf4:	3d01      	subs	r5, #1
 800fbf6:	b133      	cbz	r3, 800fc06 <_fwalk+0x36>
 800fbf8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	3301      	adds	r3, #1
 800fc00:	d001      	beq.n	800fc06 <_fwalk+0x36>
 800fc02:	47c0      	blx	r8
 800fc04:	4307      	orrs	r7, r0
 800fc06:	3468      	adds	r4, #104	; 0x68
 800fc08:	1c6b      	adds	r3, r5, #1
 800fc0a:	d1f1      	bne.n	800fbf0 <_fwalk+0x20>
 800fc0c:	6836      	ldr	r6, [r6, #0]
 800fc0e:	2e00      	cmp	r6, #0
 800fc10:	d1ea      	bne.n	800fbe8 <_fwalk+0x18>
 800fc12:	f7ff fe19 	bl	800f848 <__sfp_lock_release>
 800fc16:	4638      	mov	r0, r7
 800fc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fc1c <_fwalk_reent>:
 800fc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc20:	4607      	mov	r7, r0
 800fc22:	4689      	mov	r9, r1
 800fc24:	f7ff fe0e 	bl	800f844 <__sfp_lock_acquire>
 800fc28:	f517 7638 	adds.w	r6, r7, #736	; 0x2e0
 800fc2c:	bf08      	it	eq
 800fc2e:	46b0      	moveq	r8, r6
 800fc30:	d018      	beq.n	800fc64 <_fwalk_reent+0x48>
 800fc32:	f04f 0800 	mov.w	r8, #0
 800fc36:	6875      	ldr	r5, [r6, #4]
 800fc38:	68b4      	ldr	r4, [r6, #8]
 800fc3a:	3d01      	subs	r5, #1
 800fc3c:	d40f      	bmi.n	800fc5e <_fwalk_reent+0x42>
 800fc3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc42:	3d01      	subs	r5, #1
 800fc44:	b143      	cbz	r3, 800fc58 <_fwalk_reent+0x3c>
 800fc46:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800fc4a:	4621      	mov	r1, r4
 800fc4c:	4638      	mov	r0, r7
 800fc4e:	3301      	adds	r3, #1
 800fc50:	d002      	beq.n	800fc58 <_fwalk_reent+0x3c>
 800fc52:	47c8      	blx	r9
 800fc54:	ea48 0800 	orr.w	r8, r8, r0
 800fc58:	3468      	adds	r4, #104	; 0x68
 800fc5a:	1c6a      	adds	r2, r5, #1
 800fc5c:	d1ef      	bne.n	800fc3e <_fwalk_reent+0x22>
 800fc5e:	6836      	ldr	r6, [r6, #0]
 800fc60:	2e00      	cmp	r6, #0
 800fc62:	d1e8      	bne.n	800fc36 <_fwalk_reent+0x1a>
 800fc64:	f7ff fdf0 	bl	800f848 <__sfp_lock_release>
 800fc68:	4640      	mov	r0, r8
 800fc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc6e:	bf00      	nop

0800fc70 <_setlocale_r>:
 800fc70:	b510      	push	{r4, lr}
 800fc72:	4614      	mov	r4, r2
 800fc74:	b122      	cbz	r2, 800fc80 <_setlocale_r+0x10>
 800fc76:	4610      	mov	r0, r2
 800fc78:	490b      	ldr	r1, [pc, #44]	; (800fca8 <_setlocale_r+0x38>)
 800fc7a:	f7fc f9a9 	bl	800bfd0 <strcmp>
 800fc7e:	b908      	cbnz	r0, 800fc84 <_setlocale_r+0x14>
 800fc80:	480a      	ldr	r0, [pc, #40]	; (800fcac <_setlocale_r+0x3c>)
 800fc82:	bd10      	pop	{r4, pc}
 800fc84:	4620      	mov	r0, r4
 800fc86:	4909      	ldr	r1, [pc, #36]	; (800fcac <_setlocale_r+0x3c>)
 800fc88:	f7fc f9a2 	bl	800bfd0 <strcmp>
 800fc8c:	b908      	cbnz	r0, 800fc92 <_setlocale_r+0x22>
 800fc8e:	4807      	ldr	r0, [pc, #28]	; (800fcac <_setlocale_r+0x3c>)
 800fc90:	bd10      	pop	{r4, pc}
 800fc92:	4620      	mov	r0, r4
 800fc94:	4906      	ldr	r1, [pc, #24]	; (800fcb0 <_setlocale_r+0x40>)
 800fc96:	f7fc f99b 	bl	800bfd0 <strcmp>
 800fc9a:	4b04      	ldr	r3, [pc, #16]	; (800fcac <_setlocale_r+0x3c>)
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	bf0c      	ite	eq
 800fca0:	4618      	moveq	r0, r3
 800fca2:	2000      	movne	r0, #0
 800fca4:	bd10      	pop	{r4, pc}
 800fca6:	bf00      	nop
 800fca8:	08014b40 	.word	0x08014b40
 800fcac:	08014ad0 	.word	0x08014ad0
 800fcb0:	08014a9c 	.word	0x08014a9c

0800fcb4 <__locale_charset>:
 800fcb4:	f640 0088 	movw	r0, #2184	; 0x888
 800fcb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop

0800fcc0 <__locale_mb_cur_max>:
 800fcc0:	f640 0388 	movw	r3, #2184	; 0x888
 800fcc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fcc8:	6a18      	ldr	r0, [r3, #32]
 800fcca:	4770      	bx	lr

0800fccc <__locale_msgcharset>:
 800fccc:	4800      	ldr	r0, [pc, #0]	; (800fcd0 <__locale_msgcharset+0x4>)
 800fcce:	4770      	bx	lr
 800fcd0:	200008ac 	.word	0x200008ac

0800fcd4 <__locale_cjk_lang>:
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	4770      	bx	lr

0800fcd8 <_localeconv_r>:
 800fcd8:	4800      	ldr	r0, [pc, #0]	; (800fcdc <_localeconv_r+0x4>)
 800fcda:	4770      	bx	lr
 800fcdc:	200008cc 	.word	0x200008cc

0800fce0 <setlocale>:
 800fce0:	f240 0348 	movw	r3, #72	; 0x48
 800fce4:	460a      	mov	r2, r1
 800fce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fcea:	4601      	mov	r1, r0
 800fcec:	6818      	ldr	r0, [r3, #0]
 800fcee:	e7bf      	b.n	800fc70 <_setlocale_r>

0800fcf0 <localeconv>:
 800fcf0:	4800      	ldr	r0, [pc, #0]	; (800fcf4 <localeconv+0x4>)
 800fcf2:	4770      	bx	lr
 800fcf4:	200008cc 	.word	0x200008cc
	...

0800fd00 <__smakebuf_r>:
 800fd00:	898b      	ldrh	r3, [r1, #12]
 800fd02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd04:	4605      	mov	r5, r0
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	b091      	sub	sp, #68	; 0x44
 800fd0a:	0790      	lsls	r0, r2, #30
 800fd0c:	460c      	mov	r4, r1
 800fd0e:	d439      	bmi.n	800fd84 <__smakebuf_r+0x84>
 800fd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd14:	2900      	cmp	r1, #0
 800fd16:	db19      	blt.n	800fd4c <__smakebuf_r+0x4c>
 800fd18:	4628      	mov	r0, r5
 800fd1a:	aa01      	add	r2, sp, #4
 800fd1c:	f7f4 f904 	bl	8003f28 <_fstat_r>
 800fd20:	2800      	cmp	r0, #0
 800fd22:	db11      	blt.n	800fd48 <__smakebuf_r+0x48>
 800fd24:	9b02      	ldr	r3, [sp, #8]
 800fd26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800fd2a:	f5a3 5100 	sub.w	r1, r3, #8192	; 0x2000
 800fd2e:	424f      	negs	r7, r1
 800fd30:	eb47 0701 	adc.w	r7, r7, r1
 800fd34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd38:	d037      	beq.n	800fdaa <__smakebuf_r+0xaa>
 800fd3a:	89a3      	ldrh	r3, [r4, #12]
 800fd3c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800fd40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fd44:	81a3      	strh	r3, [r4, #12]
 800fd46:	e00b      	b.n	800fd60 <__smakebuf_r+0x60>
 800fd48:	89a3      	ldrh	r3, [r4, #12]
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800fd50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fd54:	bf14      	ite	ne
 800fd56:	2640      	movne	r6, #64	; 0x40
 800fd58:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800fd5c:	2700      	movs	r7, #0
 800fd5e:	81a3      	strh	r3, [r4, #12]
 800fd60:	4628      	mov	r0, r5
 800fd62:	4631      	mov	r1, r6
 800fd64:	f7fb f95c 	bl	800b020 <_malloc_r>
 800fd68:	89a3      	ldrh	r3, [r4, #12]
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	d029      	beq.n	800fdc2 <__smakebuf_r+0xc2>
 800fd6e:	4a1b      	ldr	r2, [pc, #108]	; (800fddc <__smakebuf_r+0xdc>)
 800fd70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd74:	63ea      	str	r2, [r5, #60]	; 0x3c
 800fd76:	6020      	str	r0, [r4, #0]
 800fd78:	81a3      	strh	r3, [r4, #12]
 800fd7a:	6120      	str	r0, [r4, #16]
 800fd7c:	6166      	str	r6, [r4, #20]
 800fd7e:	b947      	cbnz	r7, 800fd92 <__smakebuf_r+0x92>
 800fd80:	b011      	add	sp, #68	; 0x44
 800fd82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd84:	f101 0343 	add.w	r3, r1, #67	; 0x43
 800fd88:	600b      	str	r3, [r1, #0]
 800fd8a:	610b      	str	r3, [r1, #16]
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	614b      	str	r3, [r1, #20]
 800fd90:	e7f6      	b.n	800fd80 <__smakebuf_r+0x80>
 800fd92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd96:	4628      	mov	r0, r5
 800fd98:	f7f4 f8e6 	bl	8003f68 <_isatty_r>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d0ef      	beq.n	800fd80 <__smakebuf_r+0x80>
 800fda0:	89a3      	ldrh	r3, [r4, #12]
 800fda2:	f043 0301 	orr.w	r3, r3, #1
 800fda6:	81a3      	strh	r3, [r4, #12]
 800fda8:	e7ea      	b.n	800fd80 <__smakebuf_r+0x80>
 800fdaa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fdac:	4b0c      	ldr	r3, [pc, #48]	; (800fde0 <__smakebuf_r+0xe0>)
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d1c3      	bne.n	800fd3a <__smakebuf_r+0x3a>
 800fdb2:	89a2      	ldrh	r2, [r4, #12]
 800fdb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdb8:	461e      	mov	r6, r3
 800fdba:	64e3      	str	r3, [r4, #76]	; 0x4c
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	81a3      	strh	r3, [r4, #12]
 800fdc0:	e7ce      	b.n	800fd60 <__smakebuf_r+0x60>
 800fdc2:	059a      	lsls	r2, r3, #22
 800fdc4:	d4dc      	bmi.n	800fd80 <__smakebuf_r+0x80>
 800fdc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdca:	f043 0302 	orr.w	r3, r3, #2
 800fdce:	6022      	str	r2, [r4, #0]
 800fdd0:	81a3      	strh	r3, [r4, #12]
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	6122      	str	r2, [r4, #16]
 800fdd6:	6163      	str	r3, [r4, #20]
 800fdd8:	e7d2      	b.n	800fd80 <__smakebuf_r+0x80>
 800fdda:	bf00      	nop
 800fddc:	0800f6c9 	.word	0x0800f6c9
 800fde0:	080107b1 	.word	0x080107b1
	...

0800fdf0 <_Balloc>:
 800fdf0:	b538      	push	{r3, r4, r5, lr}
 800fdf2:	4605      	mov	r5, r0
 800fdf4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800fdf6:	460c      	mov	r4, r1
 800fdf8:	b14b      	cbz	r3, 800fe0e <_Balloc+0x1e>
 800fdfa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fdfe:	b178      	cbz	r0, 800fe20 <_Balloc+0x30>
 800fe00:	6802      	ldr	r2, [r0, #0]
 800fe02:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800fe06:	2300      	movs	r3, #0
 800fe08:	6103      	str	r3, [r0, #16]
 800fe0a:	60c3      	str	r3, [r0, #12]
 800fe0c:	bd38      	pop	{r3, r4, r5, pc}
 800fe0e:	2104      	movs	r1, #4
 800fe10:	2221      	movs	r2, #33	; 0x21
 800fe12:	f001 fa65 	bl	80112e0 <_calloc_r>
 800fe16:	4603      	mov	r3, r0
 800fe18:	64e8      	str	r0, [r5, #76]	; 0x4c
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d1ed      	bne.n	800fdfa <_Balloc+0xa>
 800fe1e:	bd38      	pop	{r3, r4, r5, pc}
 800fe20:	2301      	movs	r3, #1
 800fe22:	4628      	mov	r0, r5
 800fe24:	4619      	mov	r1, r3
 800fe26:	fa13 f504 	lsls.w	r5, r3, r4
 800fe2a:	1d6a      	adds	r2, r5, #5
 800fe2c:	0092      	lsls	r2, r2, #2
 800fe2e:	f001 fa57 	bl	80112e0 <_calloc_r>
 800fe32:	2800      	cmp	r0, #0
 800fe34:	d0f3      	beq.n	800fe1e <_Balloc+0x2e>
 800fe36:	6044      	str	r4, [r0, #4]
 800fe38:	6085      	str	r5, [r0, #8]
 800fe3a:	e7e4      	b.n	800fe06 <_Balloc+0x16>

0800fe3c <_Bfree>:
 800fe3c:	b131      	cbz	r1, 800fe4c <_Bfree+0x10>
 800fe3e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800fe40:	684a      	ldr	r2, [r1, #4]
 800fe42:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fe46:	6008      	str	r0, [r1, #0]
 800fe48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop

0800fe50 <__multadd>:
 800fe50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe52:	460c      	mov	r4, r1
 800fe54:	4605      	mov	r5, r0
 800fe56:	690e      	ldr	r6, [r1, #16]
 800fe58:	f101 0014 	add.w	r0, r1, #20
 800fe5c:	b083      	sub	sp, #12
 800fe5e:	2100      	movs	r1, #0
 800fe60:	6807      	ldr	r7, [r0, #0]
 800fe62:	3101      	adds	r1, #1
 800fe64:	fa1f fc87 	uxth.w	ip, r7
 800fe68:	0c3f      	lsrs	r7, r7, #16
 800fe6a:	fb02 330c 	mla	r3, r2, ip, r3
 800fe6e:	fb02 f707 	mul.w	r7, r2, r7
 800fe72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	eb03 4c07 	add.w	ip, r3, r7, lsl #16
 800fe7c:	0c3b      	lsrs	r3, r7, #16
 800fe7e:	428e      	cmp	r6, r1
 800fe80:	f840 cb04 	str.w	ip, [r0], #4
 800fe84:	dcec      	bgt.n	800fe60 <__multadd+0x10>
 800fe86:	b13b      	cbz	r3, 800fe98 <__multadd+0x48>
 800fe88:	68a2      	ldr	r2, [r4, #8]
 800fe8a:	4296      	cmp	r6, r2
 800fe8c:	da07      	bge.n	800fe9e <__multadd+0x4e>
 800fe8e:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 800fe92:	3601      	adds	r6, #1
 800fe94:	6126      	str	r6, [r4, #16]
 800fe96:	6153      	str	r3, [r2, #20]
 800fe98:	4620      	mov	r0, r4
 800fe9a:	b003      	add	sp, #12
 800fe9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe9e:	6861      	ldr	r1, [r4, #4]
 800fea0:	4628      	mov	r0, r5
 800fea2:	9301      	str	r3, [sp, #4]
 800fea4:	3101      	adds	r1, #1
 800fea6:	f7ff ffa3 	bl	800fdf0 <_Balloc>
 800feaa:	6922      	ldr	r2, [r4, #16]
 800feac:	f104 010c 	add.w	r1, r4, #12
 800feb0:	3202      	adds	r2, #2
 800feb2:	0092      	lsls	r2, r2, #2
 800feb4:	4607      	mov	r7, r0
 800feb6:	f100 000c 	add.w	r0, r0, #12
 800feba:	f7fb fbe1 	bl	800b680 <memcpy>
 800febe:	6861      	ldr	r1, [r4, #4]
 800fec0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800fec2:	9b01      	ldr	r3, [sp, #4]
 800fec4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800fec8:	6020      	str	r0, [r4, #0]
 800feca:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 800fece:	463c      	mov	r4, r7
 800fed0:	e7dd      	b.n	800fe8e <__multadd+0x3e>
 800fed2:	bf00      	nop

0800fed4 <__s2b>:
 800fed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fed8:	f648 6439 	movw	r4, #36409	; 0x8e39
 800fedc:	461e      	mov	r6, r3
 800fede:	f6c3 04e3 	movt	r4, #14563	; 0x38e3
 800fee2:	f103 0308 	add.w	r3, r3, #8
 800fee6:	4688      	mov	r8, r1
 800fee8:	4605      	mov	r5, r0
 800feea:	4617      	mov	r7, r2
 800feec:	fb84 1403 	smull	r1, r4, r4, r3
 800fef0:	17db      	asrs	r3, r3, #31
 800fef2:	2100      	movs	r1, #0
 800fef4:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	dd05      	ble.n	800ff08 <__s2b+0x34>
 800fefc:	2201      	movs	r2, #1
 800fefe:	2100      	movs	r1, #0
 800ff00:	0052      	lsls	r2, r2, #1
 800ff02:	3101      	adds	r1, #1
 800ff04:	4293      	cmp	r3, r2
 800ff06:	dcfb      	bgt.n	800ff00 <__s2b+0x2c>
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f7ff ff71 	bl	800fdf0 <_Balloc>
 800ff0e:	9b08      	ldr	r3, [sp, #32]
 800ff10:	6143      	str	r3, [r0, #20]
 800ff12:	2301      	movs	r3, #1
 800ff14:	2f09      	cmp	r7, #9
 800ff16:	4601      	mov	r1, r0
 800ff18:	6103      	str	r3, [r0, #16]
 800ff1a:	dd21      	ble.n	800ff60 <__s2b+0x8c>
 800ff1c:	f108 0909 	add.w	r9, r8, #9
 800ff20:	2409      	movs	r4, #9
 800ff22:	f818 3004 	ldrb.w	r3, [r8, r4]
 800ff26:	220a      	movs	r2, #10
 800ff28:	4628      	mov	r0, r5
 800ff2a:	3401      	adds	r4, #1
 800ff2c:	3b30      	subs	r3, #48	; 0x30
 800ff2e:	f7ff ff8f 	bl	800fe50 <__multadd>
 800ff32:	42bc      	cmp	r4, r7
 800ff34:	4601      	mov	r1, r0
 800ff36:	d1f4      	bne.n	800ff22 <__s2b+0x4e>
 800ff38:	eb09 0804 	add.w	r8, r9, r4
 800ff3c:	f1a8 0808 	sub.w	r8, r8, #8
 800ff40:	42a6      	cmp	r6, r4
 800ff42:	dd0a      	ble.n	800ff5a <__s2b+0x86>
 800ff44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ff48:	220a      	movs	r2, #10
 800ff4a:	4628      	mov	r0, r5
 800ff4c:	3401      	adds	r4, #1
 800ff4e:	3b30      	subs	r3, #48	; 0x30
 800ff50:	f7ff ff7e 	bl	800fe50 <__multadd>
 800ff54:	42b4      	cmp	r4, r6
 800ff56:	4601      	mov	r1, r0
 800ff58:	d1f4      	bne.n	800ff44 <__s2b+0x70>
 800ff5a:	4608      	mov	r0, r1
 800ff5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff60:	f108 080a 	add.w	r8, r8, #10
 800ff64:	2409      	movs	r4, #9
 800ff66:	e7eb      	b.n	800ff40 <__s2b+0x6c>

0800ff68 <__hi0bits>:
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	0c1a      	lsrs	r2, r3, #16
 800ff6e:	d101      	bne.n	800ff74 <__hi0bits+0xc>
 800ff70:	041b      	lsls	r3, r3, #16
 800ff72:	2010      	movs	r0, #16
 800ff74:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ff78:	d101      	bne.n	800ff7e <__hi0bits+0x16>
 800ff7a:	3008      	adds	r0, #8
 800ff7c:	021b      	lsls	r3, r3, #8
 800ff7e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ff82:	d101      	bne.n	800ff88 <__hi0bits+0x20>
 800ff84:	3004      	adds	r0, #4
 800ff86:	011b      	lsls	r3, r3, #4
 800ff88:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ff8c:	d101      	bne.n	800ff92 <__hi0bits+0x2a>
 800ff8e:	3002      	adds	r0, #2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	db02      	blt.n	800ff9c <__hi0bits+0x34>
 800ff96:	005b      	lsls	r3, r3, #1
 800ff98:	d401      	bmi.n	800ff9e <__hi0bits+0x36>
 800ff9a:	2020      	movs	r0, #32
 800ff9c:	4770      	bx	lr
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop

0800ffa4 <__lo0bits>:
 800ffa4:	6803      	ldr	r3, [r0, #0]
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	f013 0007 	ands.w	r0, r3, #7
 800ffac:	d007      	beq.n	800ffbe <__lo0bits+0x1a>
 800ffae:	07d9      	lsls	r1, r3, #31
 800ffb0:	d41f      	bmi.n	800fff2 <__lo0bits+0x4e>
 800ffb2:	0798      	lsls	r0, r3, #30
 800ffb4:	d41f      	bmi.n	800fff6 <__lo0bits+0x52>
 800ffb6:	089b      	lsrs	r3, r3, #2
 800ffb8:	2002      	movs	r0, #2
 800ffba:	6013      	str	r3, [r2, #0]
 800ffbc:	4770      	bx	lr
 800ffbe:	b299      	uxth	r1, r3
 800ffc0:	b909      	cbnz	r1, 800ffc6 <__lo0bits+0x22>
 800ffc2:	0c1b      	lsrs	r3, r3, #16
 800ffc4:	2010      	movs	r0, #16
 800ffc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ffca:	d101      	bne.n	800ffd0 <__lo0bits+0x2c>
 800ffcc:	3008      	adds	r0, #8
 800ffce:	0a1b      	lsrs	r3, r3, #8
 800ffd0:	0719      	lsls	r1, r3, #28
 800ffd2:	d101      	bne.n	800ffd8 <__lo0bits+0x34>
 800ffd4:	3004      	adds	r0, #4
 800ffd6:	091b      	lsrs	r3, r3, #4
 800ffd8:	0799      	lsls	r1, r3, #30
 800ffda:	d101      	bne.n	800ffe0 <__lo0bits+0x3c>
 800ffdc:	3002      	adds	r0, #2
 800ffde:	089b      	lsrs	r3, r3, #2
 800ffe0:	07d9      	lsls	r1, r3, #31
 800ffe2:	d404      	bmi.n	800ffee <__lo0bits+0x4a>
 800ffe4:	085b      	lsrs	r3, r3, #1
 800ffe6:	d101      	bne.n	800ffec <__lo0bits+0x48>
 800ffe8:	2020      	movs	r0, #32
 800ffea:	4770      	bx	lr
 800ffec:	3001      	adds	r0, #1
 800ffee:	6013      	str	r3, [r2, #0]
 800fff0:	4770      	bx	lr
 800fff2:	2000      	movs	r0, #0
 800fff4:	4770      	bx	lr
 800fff6:	085b      	lsrs	r3, r3, #1
 800fff8:	2001      	movs	r0, #1
 800fffa:	6013      	str	r3, [r2, #0]
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop

08010000 <__i2b>:
 8010000:	b510      	push	{r4, lr}
 8010002:	460c      	mov	r4, r1
 8010004:	2101      	movs	r1, #1
 8010006:	f7ff fef3 	bl	800fdf0 <_Balloc>
 801000a:	2301      	movs	r3, #1
 801000c:	6144      	str	r4, [r0, #20]
 801000e:	6103      	str	r3, [r0, #16]
 8010010:	bd10      	pop	{r4, pc}
 8010012:	bf00      	nop

08010014 <__multiply>:
 8010014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010018:	460c      	mov	r4, r1
 801001a:	690d      	ldr	r5, [r1, #16]
 801001c:	b087      	sub	sp, #28
 801001e:	6916      	ldr	r6, [r2, #16]
 8010020:	4692      	mov	sl, r2
 8010022:	42b5      	cmp	r5, r6
 8010024:	da04      	bge.n	8010030 <__multiply+0x1c>
 8010026:	462a      	mov	r2, r5
 8010028:	4654      	mov	r4, sl
 801002a:	4635      	mov	r5, r6
 801002c:	468a      	mov	sl, r1
 801002e:	4616      	mov	r6, r2
 8010030:	68a3      	ldr	r3, [r4, #8]
 8010032:	eb05 0b06 	add.w	fp, r5, r6
 8010036:	6861      	ldr	r1, [r4, #4]
 8010038:	459b      	cmp	fp, r3
 801003a:	bfc8      	it	gt
 801003c:	3101      	addgt	r1, #1
 801003e:	f7ff fed7 	bl	800fdf0 <_Balloc>
 8010042:	f10b 0104 	add.w	r1, fp, #4
 8010046:	9105      	str	r1, [sp, #20]
 8010048:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801004c:	f100 0914 	add.w	r9, r0, #20
 8010050:	3304      	adds	r3, #4
 8010052:	9003      	str	r0, [sp, #12]
 8010054:	4599      	cmp	r9, r3
 8010056:	9304      	str	r3, [sp, #16]
 8010058:	d206      	bcs.n	8010068 <__multiply+0x54>
 801005a:	9904      	ldr	r1, [sp, #16]
 801005c:	464b      	mov	r3, r9
 801005e:	2200      	movs	r2, #0
 8010060:	f843 2b04 	str.w	r2, [r3], #4
 8010064:	4299      	cmp	r1, r3
 8010066:	d8fb      	bhi.n	8010060 <__multiply+0x4c>
 8010068:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 801006c:	f10a 0a14 	add.w	sl, sl, #20
 8010070:	3614      	adds	r6, #20
 8010072:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010076:	3414      	adds	r4, #20
 8010078:	45b2      	cmp	sl, r6
 801007a:	9601      	str	r6, [sp, #4]
 801007c:	f105 0814 	add.w	r8, r5, #20
 8010080:	9402      	str	r4, [sp, #8]
 8010082:	d24a      	bcs.n	801011a <__multiply+0x106>
 8010084:	f85a 5b04 	ldr.w	r5, [sl], #4
 8010088:	b2ac      	uxth	r4, r5
 801008a:	b1ec      	cbz	r4, 80100c8 <__multiply+0xb4>
 801008c:	9a02      	ldr	r2, [sp, #8]
 801008e:	464b      	mov	r3, r9
 8010090:	2500      	movs	r5, #0
 8010092:	6818      	ldr	r0, [r3, #0]
 8010094:	461f      	mov	r7, r3
 8010096:	f852 1b04 	ldr.w	r1, [r2], #4
 801009a:	b286      	uxth	r6, r0
 801009c:	0c00      	lsrs	r0, r0, #16
 801009e:	1976      	adds	r6, r6, r5
 80100a0:	fa1f fc81 	uxth.w	ip, r1
 80100a4:	0c09      	lsrs	r1, r1, #16
 80100a6:	fb04 660c 	mla	r6, r4, ip, r6
 80100aa:	fb04 0001 	mla	r0, r4, r1, r0
 80100ae:	eb00 4516 	add.w	r5, r0, r6, lsr #16
 80100b2:	b2b6      	uxth	r6, r6
 80100b4:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80100b8:	0c2d      	lsrs	r5, r5, #16
 80100ba:	4590      	cmp	r8, r2
 80100bc:	f843 6b04 	str.w	r6, [r3], #4
 80100c0:	d8e7      	bhi.n	8010092 <__multiply+0x7e>
 80100c2:	607d      	str	r5, [r7, #4]
 80100c4:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 80100c8:	0c2d      	lsrs	r5, r5, #16
 80100ca:	d021      	beq.n	8010110 <__multiply+0xfc>
 80100cc:	f8d9 1000 	ldr.w	r1, [r9]
 80100d0:	46cc      	mov	ip, r9
 80100d2:	9b02      	ldr	r3, [sp, #8]
 80100d4:	464e      	mov	r6, r9
 80100d6:	4608      	mov	r0, r1
 80100d8:	2700      	movs	r7, #0
 80100da:	e000      	b.n	80100de <__multiply+0xca>
 80100dc:	4616      	mov	r6, r2
 80100de:	881c      	ldrh	r4, [r3, #0]
 80100e0:	eb07 4710 	add.w	r7, r7, r0, lsr #16
 80100e4:	4632      	mov	r2, r6
 80100e6:	b289      	uxth	r1, r1
 80100e8:	fb05 7704 	mla	r7, r5, r4, r7
 80100ec:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80100f0:	f842 1b04 	str.w	r1, [r2], #4
 80100f4:	f853 1b04 	ldr.w	r1, [r3], #4
 80100f8:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 80100fc:	0c09      	lsrs	r1, r1, #16
 80100fe:	b284      	uxth	r4, r0
 8010100:	fb05 4101 	mla	r1, r5, r1, r4
 8010104:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 8010108:	0c0f      	lsrs	r7, r1, #16
 801010a:	4598      	cmp	r8, r3
 801010c:	d8e6      	bhi.n	80100dc <__multiply+0xc8>
 801010e:	6071      	str	r1, [r6, #4]
 8010110:	9a01      	ldr	r2, [sp, #4]
 8010112:	f109 0904 	add.w	r9, r9, #4
 8010116:	4552      	cmp	r2, sl
 8010118:	d8b4      	bhi.n	8010084 <__multiply+0x70>
 801011a:	f1bb 0f00 	cmp.w	fp, #0
 801011e:	dd0e      	ble.n	801013e <__multiply+0x12a>
 8010120:	9905      	ldr	r1, [sp, #20]
 8010122:	9a03      	ldr	r2, [sp, #12]
 8010124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010128:	b94b      	cbnz	r3, 801013e <__multiply+0x12a>
 801012a:	9904      	ldr	r1, [sp, #16]
 801012c:	465a      	mov	r2, fp
 801012e:	1f0b      	subs	r3, r1, #4
 8010130:	e002      	b.n	8010138 <__multiply+0x124>
 8010132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010136:	b909      	cbnz	r1, 801013c <__multiply+0x128>
 8010138:	3a01      	subs	r2, #1
 801013a:	d1fa      	bne.n	8010132 <__multiply+0x11e>
 801013c:	4693      	mov	fp, r2
 801013e:	9a03      	ldr	r2, [sp, #12]
 8010140:	4610      	mov	r0, r2
 8010142:	f8c2 b010 	str.w	fp, [r2, #16]
 8010146:	b007      	add	sp, #28
 8010148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801014c <__pow5mult>:
 801014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010150:	f012 0603 	ands.w	r6, r2, #3
 8010154:	4615      	mov	r5, r2
 8010156:	4604      	mov	r4, r0
 8010158:	4688      	mov	r8, r1
 801015a:	d12d      	bne.n	80101b8 <__pow5mult+0x6c>
 801015c:	10ad      	asrs	r5, r5, #2
 801015e:	d01d      	beq.n	801019c <__pow5mult+0x50>
 8010160:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8010162:	b92f      	cbnz	r7, 8010170 <__pow5mult+0x24>
 8010164:	e031      	b.n	80101ca <__pow5mult+0x7e>
 8010166:	106d      	asrs	r5, r5, #1
 8010168:	d018      	beq.n	801019c <__pow5mult+0x50>
 801016a:	683e      	ldr	r6, [r7, #0]
 801016c:	b1ce      	cbz	r6, 80101a2 <__pow5mult+0x56>
 801016e:	4637      	mov	r7, r6
 8010170:	07e8      	lsls	r0, r5, #31
 8010172:	d5f8      	bpl.n	8010166 <__pow5mult+0x1a>
 8010174:	4641      	mov	r1, r8
 8010176:	463a      	mov	r2, r7
 8010178:	4620      	mov	r0, r4
 801017a:	f7ff ff4b 	bl	8010014 <__multiply>
 801017e:	f1b8 0f00 	cmp.w	r8, #0
 8010182:	d017      	beq.n	80101b4 <__pow5mult+0x68>
 8010184:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010188:	106d      	asrs	r5, r5, #1
 801018a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801018c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010190:	f8c8 1000 	str.w	r1, [r8]
 8010194:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8010198:	4680      	mov	r8, r0
 801019a:	d1e6      	bne.n	801016a <__pow5mult+0x1e>
 801019c:	4640      	mov	r0, r8
 801019e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101a2:	4639      	mov	r1, r7
 80101a4:	463a      	mov	r2, r7
 80101a6:	4620      	mov	r0, r4
 80101a8:	f7ff ff34 	bl	8010014 <__multiply>
 80101ac:	6038      	str	r0, [r7, #0]
 80101ae:	4607      	mov	r7, r0
 80101b0:	6006      	str	r6, [r0, #0]
 80101b2:	e7dd      	b.n	8010170 <__pow5mult+0x24>
 80101b4:	4680      	mov	r8, r0
 80101b6:	e7d6      	b.n	8010166 <__pow5mult+0x1a>
 80101b8:	4a09      	ldr	r2, [pc, #36]	; (80101e0 <__pow5mult+0x94>)
 80101ba:	3e01      	subs	r6, #1
 80101bc:	2300      	movs	r3, #0
 80101be:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80101c2:	f7ff fe45 	bl	800fe50 <__multadd>
 80101c6:	4680      	mov	r8, r0
 80101c8:	e7c8      	b.n	801015c <__pow5mult+0x10>
 80101ca:	4620      	mov	r0, r4
 80101cc:	f240 2171 	movw	r1, #625	; 0x271
 80101d0:	f7ff ff16 	bl	8010000 <__i2b>
 80101d4:	2300      	movs	r3, #0
 80101d6:	64a0      	str	r0, [r4, #72]	; 0x48
 80101d8:	4607      	mov	r7, r0
 80101da:	6003      	str	r3, [r0, #0]
 80101dc:	e7c8      	b.n	8010170 <__pow5mult+0x24>
 80101de:	bf00      	nop
 80101e0:	08014440 	.word	0x08014440

080101e4 <__lshift>:
 80101e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e8:	4691      	mov	r9, r2
 80101ea:	690a      	ldr	r2, [r1, #16]
 80101ec:	460c      	mov	r4, r1
 80101ee:	ea4f 1769 	mov.w	r7, r9, asr #5
 80101f2:	688b      	ldr	r3, [r1, #8]
 80101f4:	eb07 0b02 	add.w	fp, r7, r2
 80101f8:	4606      	mov	r6, r0
 80101fa:	f10b 0501 	add.w	r5, fp, #1
 80101fe:	6849      	ldr	r1, [r1, #4]
 8010200:	429d      	cmp	r5, r3
 8010202:	dd03      	ble.n	801020c <__lshift+0x28>
 8010204:	005b      	lsls	r3, r3, #1
 8010206:	3101      	adds	r1, #1
 8010208:	429d      	cmp	r5, r3
 801020a:	dcfb      	bgt.n	8010204 <__lshift+0x20>
 801020c:	4630      	mov	r0, r6
 801020e:	f7ff fdef 	bl	800fdf0 <_Balloc>
 8010212:	2f00      	cmp	r7, #0
 8010214:	f100 0314 	add.w	r3, r0, #20
 8010218:	dd09      	ble.n	801022e <__lshift+0x4a>
 801021a:	2200      	movs	r2, #0
 801021c:	4611      	mov	r1, r2
 801021e:	3201      	adds	r2, #1
 8010220:	f843 1b04 	str.w	r1, [r3], #4
 8010224:	42ba      	cmp	r2, r7
 8010226:	d1fa      	bne.n	801021e <__lshift+0x3a>
 8010228:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 801022c:	3314      	adds	r3, #20
 801022e:	6922      	ldr	r2, [r4, #16]
 8010230:	f019 091f 	ands.w	r9, r9, #31
 8010234:	f104 0114 	add.w	r1, r4, #20
 8010238:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 801023c:	f10c 0c14 	add.w	ip, ip, #20
 8010240:	d022      	beq.n	8010288 <__lshift+0xa4>
 8010242:	f1c9 0a20 	rsb	sl, r9, #32
 8010246:	2200      	movs	r2, #0
 8010248:	e000      	b.n	801024c <__lshift+0x68>
 801024a:	463b      	mov	r3, r7
 801024c:	f8d1 8000 	ldr.w	r8, [r1]
 8010250:	461f      	mov	r7, r3
 8010252:	fa08 f809 	lsl.w	r8, r8, r9
 8010256:	ea48 0202 	orr.w	r2, r8, r2
 801025a:	f847 2b04 	str.w	r2, [r7], #4
 801025e:	f851 2b04 	ldr.w	r2, [r1], #4
 8010262:	458c      	cmp	ip, r1
 8010264:	fa22 f20a 	lsr.w	r2, r2, sl
 8010268:	d8ef      	bhi.n	801024a <__lshift+0x66>
 801026a:	605a      	str	r2, [r3, #4]
 801026c:	b10a      	cbz	r2, 8010272 <__lshift+0x8e>
 801026e:	f10b 0502 	add.w	r5, fp, #2
 8010272:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8010274:	3d01      	subs	r5, #1
 8010276:	6862      	ldr	r2, [r4, #4]
 8010278:	6105      	str	r5, [r0, #16]
 801027a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801027e:	6021      	str	r1, [r4, #0]
 8010280:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010288:	f851 2b04 	ldr.w	r2, [r1], #4
 801028c:	458c      	cmp	ip, r1
 801028e:	f843 2b04 	str.w	r2, [r3], #4
 8010292:	d9ee      	bls.n	8010272 <__lshift+0x8e>
 8010294:	f851 2b04 	ldr.w	r2, [r1], #4
 8010298:	458c      	cmp	ip, r1
 801029a:	f843 2b04 	str.w	r2, [r3], #4
 801029e:	d8f3      	bhi.n	8010288 <__lshift+0xa4>
 80102a0:	e7e7      	b.n	8010272 <__lshift+0x8e>
 80102a2:	bf00      	nop

080102a4 <__mcmp>:
 80102a4:	4603      	mov	r3, r0
 80102a6:	690a      	ldr	r2, [r1, #16]
 80102a8:	6900      	ldr	r0, [r0, #16]
 80102aa:	b430      	push	{r4, r5}
 80102ac:	1a80      	subs	r0, r0, r2
 80102ae:	d110      	bne.n	80102d2 <__mcmp+0x2e>
 80102b0:	3204      	adds	r2, #4
 80102b2:	f103 0514 	add.w	r5, r3, #20
 80102b6:	0092      	lsls	r2, r2, #2
 80102b8:	189b      	adds	r3, r3, r2
 80102ba:	1889      	adds	r1, r1, r2
 80102bc:	3304      	adds	r3, #4
 80102be:	3104      	adds	r1, #4
 80102c0:	f853 4c04 	ldr.w	r4, [r3, #-4]
 80102c4:	3b04      	subs	r3, #4
 80102c6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80102ca:	4294      	cmp	r4, r2
 80102cc:	d103      	bne.n	80102d6 <__mcmp+0x32>
 80102ce:	429d      	cmp	r5, r3
 80102d0:	d3f6      	bcc.n	80102c0 <__mcmp+0x1c>
 80102d2:	bc30      	pop	{r4, r5}
 80102d4:	4770      	bx	lr
 80102d6:	bf38      	it	cc
 80102d8:	f04f 30ff 	movcc.w	r0, #4294967295
 80102dc:	d3f9      	bcc.n	80102d2 <__mcmp+0x2e>
 80102de:	2001      	movs	r0, #1
 80102e0:	e7f7      	b.n	80102d2 <__mcmp+0x2e>
 80102e2:	bf00      	nop

080102e4 <__mdiff>:
 80102e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e8:	460c      	mov	r4, r1
 80102ea:	4607      	mov	r7, r0
 80102ec:	4611      	mov	r1, r2
 80102ee:	4620      	mov	r0, r4
 80102f0:	4615      	mov	r5, r2
 80102f2:	f7ff ffd7 	bl	80102a4 <__mcmp>
 80102f6:	2800      	cmp	r0, #0
 80102f8:	4606      	mov	r6, r0
 80102fa:	d05b      	beq.n	80103b4 <__mdiff+0xd0>
 80102fc:	db55      	blt.n	80103aa <__mdiff+0xc6>
 80102fe:	2600      	movs	r6, #0
 8010300:	6861      	ldr	r1, [r4, #4]
 8010302:	4638      	mov	r0, r7
 8010304:	f7ff fd74 	bl	800fdf0 <_Balloc>
 8010308:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801030c:	692b      	ldr	r3, [r5, #16]
 801030e:	f104 0c14 	add.w	ip, r4, #20
 8010312:	f105 0914 	add.w	r9, r5, #20
 8010316:	2700      	movs	r7, #0
 8010318:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 801031c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8010320:	3414      	adds	r4, #20
 8010322:	3514      	adds	r5, #20
 8010324:	f100 0a14 	add.w	sl, r0, #20
 8010328:	60c6      	str	r6, [r0, #12]
 801032a:	f85c 6b04 	ldr.w	r6, [ip], #4
 801032e:	4653      	mov	r3, sl
 8010330:	f859 ab04 	ldr.w	sl, [r9], #4
 8010334:	4662      	mov	r2, ip
 8010336:	b2b1      	uxth	r1, r6
 8010338:	19c9      	adds	r1, r1, r7
 801033a:	fa1f fb8a 	uxth.w	fp, sl
 801033e:	ebcb 0101 	rsb	r1, fp, r1
 8010342:	ea4f 471a 	mov.w	r7, sl, lsr #16
 8010346:	ebc7 4716 	rsb	r7, r7, r6, lsr #16
 801034a:	eb07 4721 	add.w	r7, r7, r1, asr #16
 801034e:	b289      	uxth	r1, r1
 8010350:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8010354:	143f      	asrs	r7, r7, #16
 8010356:	454d      	cmp	r5, r9
 8010358:	f843 1b04 	str.w	r1, [r3], #4
 801035c:	469a      	mov	sl, r3
 801035e:	d8e4      	bhi.n	801032a <__mdiff+0x46>
 8010360:	4564      	cmp	r4, ip
 8010362:	461e      	mov	r6, r3
 8010364:	d915      	bls.n	8010392 <__mdiff+0xae>
 8010366:	f852 5b04 	ldr.w	r5, [r2], #4
 801036a:	b2a9      	uxth	r1, r5
 801036c:	0c2d      	lsrs	r5, r5, #16
 801036e:	19cf      	adds	r7, r1, r7
 8010370:	eb05 4527 	add.w	r5, r5, r7, asr #16
 8010374:	b2bf      	uxth	r7, r7
 8010376:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 801037a:	142f      	asrs	r7, r5, #16
 801037c:	4294      	cmp	r4, r2
 801037e:	f843 1b04 	str.w	r1, [r3], #4
 8010382:	d8f0      	bhi.n	8010366 <__mdiff+0x82>
 8010384:	ea6f 030c 	mvn.w	r3, ip
 8010388:	191b      	adds	r3, r3, r4
 801038a:	f023 0303 	bic.w	r3, r3, #3
 801038e:	3304      	adds	r3, #4
 8010390:	18f3      	adds	r3, r6, r3
 8010392:	b931      	cbnz	r1, 80103a2 <__mdiff+0xbe>
 8010394:	3b04      	subs	r3, #4
 8010396:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801039a:	f108 38ff 	add.w	r8, r8, #4294967295
 801039e:	2a00      	cmp	r2, #0
 80103a0:	d0f9      	beq.n	8010396 <__mdiff+0xb2>
 80103a2:	f8c0 8010 	str.w	r8, [r0, #16]
 80103a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103aa:	4623      	mov	r3, r4
 80103ac:	2601      	movs	r6, #1
 80103ae:	462c      	mov	r4, r5
 80103b0:	461d      	mov	r5, r3
 80103b2:	e7a5      	b.n	8010300 <__mdiff+0x1c>
 80103b4:	4638      	mov	r0, r7
 80103b6:	4631      	mov	r1, r6
 80103b8:	f7ff fd1a 	bl	800fdf0 <_Balloc>
 80103bc:	2301      	movs	r3, #1
 80103be:	6146      	str	r6, [r0, #20]
 80103c0:	6103      	str	r3, [r0, #16]
 80103c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c6:	bf00      	nop

080103c8 <__ulp>:
 80103c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80103cc:	0d1b      	lsrs	r3, r3, #20
 80103ce:	051b      	lsls	r3, r3, #20
 80103d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	dd02      	ble.n	80103de <__ulp+0x16>
 80103d8:	4619      	mov	r1, r3
 80103da:	2000      	movs	r0, #0
 80103dc:	4770      	bx	lr
 80103de:	425b      	negs	r3, r3
 80103e0:	2100      	movs	r1, #0
 80103e2:	151b      	asrs	r3, r3, #20
 80103e4:	2b13      	cmp	r3, #19
 80103e6:	dd0b      	ble.n	8010400 <__ulp+0x38>
 80103e8:	2b32      	cmp	r3, #50	; 0x32
 80103ea:	dd02      	ble.n	80103f2 <__ulp+0x2a>
 80103ec:	2301      	movs	r3, #1
 80103ee:	4618      	mov	r0, r3
 80103f0:	4770      	bx	lr
 80103f2:	2201      	movs	r2, #1
 80103f4:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 80103f8:	fa12 f303 	lsls.w	r3, r2, r3
 80103fc:	4618      	mov	r0, r3
 80103fe:	4770      	bx	lr
 8010400:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010404:	2000      	movs	r0, #0
 8010406:	fa52 f103 	asrs.w	r1, r2, r3
 801040a:	4770      	bx	lr

0801040c <__b2d>:
 801040c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010410:	f100 0614 	add.w	r6, r0, #20
 8010414:	6904      	ldr	r4, [r0, #16]
 8010416:	460f      	mov	r7, r1
 8010418:	3404      	adds	r4, #4
 801041a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 801041e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8010422:	46a0      	mov	r8, r4
 8010424:	4628      	mov	r0, r5
 8010426:	f7ff fd9f 	bl	800ff68 <__hi0bits>
 801042a:	280a      	cmp	r0, #10
 801042c:	f1c0 0320 	rsb	r3, r0, #32
 8010430:	603b      	str	r3, [r7, #0]
 8010432:	dc15      	bgt.n	8010460 <__b2d+0x54>
 8010434:	f1c0 010b 	rsb	r1, r0, #11
 8010438:	fa35 f701 	lsrs.w	r7, r5, r1
 801043c:	42a6      	cmp	r6, r4
 801043e:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
 8010442:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
 8010446:	d232      	bcs.n	80104ae <__b2d+0xa2>
 8010448:	f854 4c04 	ldr.w	r4, [r4, #-4]
 801044c:	fa34 f101 	lsrs.w	r1, r4, r1
 8010450:	3015      	adds	r0, #21
 8010452:	4085      	lsls	r5, r0
 8010454:	ea41 0205 	orr.w	r2, r1, r5
 8010458:	4610      	mov	r0, r2
 801045a:	4619      	mov	r1, r3
 801045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010460:	2100      	movs	r1, #0
 8010462:	42a6      	cmp	r6, r4
 8010464:	d202      	bcs.n	801046c <__b2d+0x60>
 8010466:	f858 1c04 	ldr.w	r1, [r8, #-4]
 801046a:	3c04      	subs	r4, #4
 801046c:	f1b0 070b 	subs.w	r7, r0, #11
 8010470:	bf02      	ittt	eq
 8010472:	f045 557e 	orreq.w	r5, r5, #1065353216	; 0x3f800000
 8010476:	460a      	moveq	r2, r1
 8010478:	f445 03e0 	orreq.w	r3, r5, #7340032	; 0x700000
 801047c:	d0ec      	beq.n	8010458 <__b2d+0x4c>
 801047e:	40bd      	lsls	r5, r7
 8010480:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8010484:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 8010488:	42b4      	cmp	r4, r6
 801048a:	fa21 fc00 	lsr.w	ip, r1, r0
 801048e:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 8010492:	ea45 030c 	orr.w	r3, r5, ip
 8010496:	d90c      	bls.n	80104b2 <__b2d+0xa6>
 8010498:	f854 4c04 	ldr.w	r4, [r4, #-4]
 801049c:	fa34 f000 	lsrs.w	r0, r4, r0
 80104a0:	40b9      	lsls	r1, r7
 80104a2:	ea40 0201 	orr.w	r2, r0, r1
 80104a6:	4619      	mov	r1, r3
 80104a8:	4610      	mov	r0, r2
 80104aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104ae:	2100      	movs	r1, #0
 80104b0:	e7ce      	b.n	8010450 <__b2d+0x44>
 80104b2:	2000      	movs	r0, #0
 80104b4:	e7f4      	b.n	80104a0 <__b2d+0x94>
 80104b6:	bf00      	nop

080104b8 <__d2b>:
 80104b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104bc:	b083      	sub	sp, #12
 80104be:	2101      	movs	r1, #1
 80104c0:	461d      	mov	r5, r3
 80104c2:	4614      	mov	r4, r2
 80104c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80104c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80104c8:	f7ff fc92 	bl	800fdf0 <_Balloc>
 80104cc:	f3c5 590a 	ubfx	r9, r5, #20, #11
 80104d0:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 80104d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	4680      	mov	r8, r0
 80104dc:	f1b9 0f00 	cmp.w	r9, #0
 80104e0:	d002      	beq.n	80104e8 <__d2b+0x30>
 80104e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80104e6:	9301      	str	r3, [sp, #4]
 80104e8:	2c00      	cmp	r4, #0
 80104ea:	d026      	beq.n	801053a <__d2b+0x82>
 80104ec:	a802      	add	r0, sp, #8
 80104ee:	f840 4d08 	str.w	r4, [r0, #-8]!
 80104f2:	4668      	mov	r0, sp
 80104f4:	f7ff fd56 	bl	800ffa4 <__lo0bits>
 80104f8:	9b01      	ldr	r3, [sp, #4]
 80104fa:	2800      	cmp	r0, #0
 80104fc:	d135      	bne.n	801056a <__d2b+0xb2>
 80104fe:	9a00      	ldr	r2, [sp, #0]
 8010500:	f8c8 2014 	str.w	r2, [r8, #20]
 8010504:	2b00      	cmp	r3, #0
 8010506:	bf0c      	ite	eq
 8010508:	2401      	moveq	r4, #1
 801050a:	2402      	movne	r4, #2
 801050c:	f8c8 3018 	str.w	r3, [r8, #24]
 8010510:	f8c8 4010 	str.w	r4, [r8, #16]
 8010514:	f1b9 0f00 	cmp.w	r9, #0
 8010518:	d11d      	bne.n	8010556 <__d2b+0x9e>
 801051a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801051e:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
 8010522:	3802      	subs	r0, #2
 8010524:	6038      	str	r0, [r7, #0]
 8010526:	6918      	ldr	r0, [r3, #16]
 8010528:	f7ff fd1e 	bl	800ff68 <__hi0bits>
 801052c:	ebc0 1444 	rsb	r4, r0, r4, lsl #5
 8010530:	6034      	str	r4, [r6, #0]
 8010532:	4640      	mov	r0, r8
 8010534:	b003      	add	sp, #12
 8010536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801053a:	a801      	add	r0, sp, #4
 801053c:	f7ff fd32 	bl	800ffa4 <__lo0bits>
 8010540:	2301      	movs	r3, #1
 8010542:	461c      	mov	r4, r3
 8010544:	f8c8 3010 	str.w	r3, [r8, #16]
 8010548:	9b01      	ldr	r3, [sp, #4]
 801054a:	f8c8 3014 	str.w	r3, [r8, #20]
 801054e:	3020      	adds	r0, #32
 8010550:	f1b9 0f00 	cmp.w	r9, #0
 8010554:	d0e1      	beq.n	801051a <__d2b+0x62>
 8010556:	f5a9 6986 	sub.w	r9, r9, #1072	; 0x430
 801055a:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 801055e:	f1a9 0903 	sub.w	r9, r9, #3
 8010562:	4448      	add	r0, r9
 8010564:	6038      	str	r0, [r7, #0]
 8010566:	6033      	str	r3, [r6, #0]
 8010568:	e7e3      	b.n	8010532 <__d2b+0x7a>
 801056a:	f1c0 0220 	rsb	r2, r0, #32
 801056e:	9900      	ldr	r1, [sp, #0]
 8010570:	fa13 f202 	lsls.w	r2, r3, r2
 8010574:	40c3      	lsrs	r3, r0
 8010576:	430a      	orrs	r2, r1
 8010578:	9301      	str	r3, [sp, #4]
 801057a:	f8c8 2014 	str.w	r2, [r8, #20]
 801057e:	e7c1      	b.n	8010504 <__d2b+0x4c>

08010580 <__ratio>:
 8010580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010584:	b083      	sub	sp, #12
 8010586:	460c      	mov	r4, r1
 8010588:	4669      	mov	r1, sp
 801058a:	4605      	mov	r5, r0
 801058c:	f7ff ff3e 	bl	801040c <__b2d>
 8010590:	460f      	mov	r7, r1
 8010592:	4606      	mov	r6, r0
 8010594:	a901      	add	r1, sp, #4
 8010596:	4620      	mov	r0, r4
 8010598:	f7ff ff38 	bl	801040c <__b2d>
 801059c:	46b9      	mov	r9, r7
 801059e:	46b0      	mov	r8, r6
 80105a0:	460b      	mov	r3, r1
 80105a2:	4602      	mov	r2, r0
 80105a4:	6929      	ldr	r1, [r5, #16]
 80105a6:	469b      	mov	fp, r3
 80105a8:	6920      	ldr	r0, [r4, #16]
 80105aa:	4692      	mov	sl, r2
 80105ac:	9c00      	ldr	r4, [sp, #0]
 80105ae:	1a09      	subs	r1, r1, r0
 80105b0:	9801      	ldr	r0, [sp, #4]
 80105b2:	1a20      	subs	r0, r4, r0
 80105b4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80105b8:	2900      	cmp	r1, #0
 80105ba:	bfc9      	itett	gt
 80105bc:	eb07 5901 	addgt.w	r9, r7, r1, lsl #20
 80105c0:	eba3 5b01 	suble.w	fp, r3, r1, lsl #20
 80105c4:	4636      	movgt	r6, r6
 80105c6:	464f      	movgt	r7, r9
 80105c8:	bfdc      	itt	le
 80105ca:	4612      	movle	r2, r2
 80105cc:	465b      	movle	r3, fp
 80105ce:	4630      	mov	r0, r6
 80105d0:	4639      	mov	r1, r7
 80105d2:	f001 fb2f 	bl	8011c34 <__aeabi_ddiv>
 80105d6:	b003      	add	sp, #12
 80105d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105dc <_mprec_log10>:
 80105dc:	b510      	push	{r4, lr}
 80105de:	4604      	mov	r4, r0
 80105e0:	2100      	movs	r1, #0
 80105e2:	2000      	movs	r0, #0
 80105e4:	2c17      	cmp	r4, #23
 80105e6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80105ea:	dd08      	ble.n	80105fe <_mprec_log10+0x22>
 80105ec:	2300      	movs	r3, #0
 80105ee:	2200      	movs	r2, #0
 80105f0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80105f4:	f001 f9f4 	bl	80119e0 <__aeabi_dmul>
 80105f8:	3c01      	subs	r4, #1
 80105fa:	d1f7      	bne.n	80105ec <_mprec_log10+0x10>
 80105fc:	bd10      	pop	{r4, pc}
 80105fe:	4b03      	ldr	r3, [pc, #12]	; (801060c <_mprec_log10+0x30>)
 8010600:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010604:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8010608:	bd10      	pop	{r4, pc}
 801060a:	bf00      	nop
 801060c:	08014440 	.word	0x08014440

08010610 <__copybits>:
 8010610:	b470      	push	{r4, r5, r6}
 8010612:	3901      	subs	r1, #1
 8010614:	6916      	ldr	r6, [r2, #16]
 8010616:	f102 0314 	add.w	r3, r2, #20
 801061a:	1149      	asrs	r1, r1, #5
 801061c:	3101      	adds	r1, #1
 801061e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010622:	3614      	adds	r6, #20
 8010624:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010628:	42b3      	cmp	r3, r6
 801062a:	d20c      	bcs.n	8010646 <__copybits+0x36>
 801062c:	4604      	mov	r4, r0
 801062e:	f853 5b04 	ldr.w	r5, [r3], #4
 8010632:	429e      	cmp	r6, r3
 8010634:	f844 5b04 	str.w	r5, [r4], #4
 8010638:	d8f9      	bhi.n	801062e <__copybits+0x1e>
 801063a:	1ab3      	subs	r3, r6, r2
 801063c:	3b15      	subs	r3, #21
 801063e:	f023 0303 	bic.w	r3, r3, #3
 8010642:	3304      	adds	r3, #4
 8010644:	18c0      	adds	r0, r0, r3
 8010646:	4281      	cmp	r1, r0
 8010648:	d904      	bls.n	8010654 <__copybits+0x44>
 801064a:	2300      	movs	r3, #0
 801064c:	f840 3b04 	str.w	r3, [r0], #4
 8010650:	4281      	cmp	r1, r0
 8010652:	d8fb      	bhi.n	801064c <__copybits+0x3c>
 8010654:	bc70      	pop	{r4, r5, r6}
 8010656:	4770      	bx	lr

08010658 <__any_on>:
 8010658:	6902      	ldr	r2, [r0, #16]
 801065a:	114b      	asrs	r3, r1, #5
 801065c:	b410      	push	{r4}
 801065e:	429a      	cmp	r2, r3
 8010660:	db01      	blt.n	8010666 <__any_on+0xe>
 8010662:	461a      	mov	r2, r3
 8010664:	dc18      	bgt.n	8010698 <__any_on+0x40>
 8010666:	3204      	adds	r2, #4
 8010668:	f100 0114 	add.w	r1, r0, #20
 801066c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8010670:	1d1c      	adds	r4, r3, #4
 8010672:	42a1      	cmp	r1, r4
 8010674:	d21d      	bcs.n	80106b2 <__any_on+0x5a>
 8010676:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801067a:	b952      	cbnz	r2, 8010692 <__any_on+0x3a>
 801067c:	1a59      	subs	r1, r3, r1
 801067e:	3103      	adds	r1, #3
 8010680:	f021 0103 	bic.w	r1, r1, #3
 8010684:	1a59      	subs	r1, r3, r1
 8010686:	428b      	cmp	r3, r1
 8010688:	d013      	beq.n	80106b2 <__any_on+0x5a>
 801068a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801068e:	2a00      	cmp	r2, #0
 8010690:	d0f9      	beq.n	8010686 <__any_on+0x2e>
 8010692:	2001      	movs	r0, #1
 8010694:	bc10      	pop	{r4}
 8010696:	4770      	bx	lr
 8010698:	f011 011f 	ands.w	r1, r1, #31
 801069c:	d0e3      	beq.n	8010666 <__any_on+0xe>
 801069e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80106a2:	695b      	ldr	r3, [r3, #20]
 80106a4:	fa33 f401 	lsrs.w	r4, r3, r1
 80106a8:	fa14 f101 	lsls.w	r1, r4, r1
 80106ac:	4299      	cmp	r1, r3
 80106ae:	d1f0      	bne.n	8010692 <__any_on+0x3a>
 80106b0:	e7d9      	b.n	8010666 <__any_on+0xe>
 80106b2:	2000      	movs	r0, #0
 80106b4:	e7ee      	b.n	8010694 <__any_on+0x3c>
 80106b6:	bf00      	nop
	...

080106c0 <__fpclassifyd>:
 80106c0:	ea50 0201 	orrs.w	r2, r0, r1
 80106c4:	460b      	mov	r3, r1
 80106c6:	b410      	push	{r4}
 80106c8:	d102      	bne.n	80106d0 <__fpclassifyd+0x10>
 80106ca:	2002      	movs	r0, #2
 80106cc:	bc10      	pop	{r4}
 80106ce:	4770      	bx	lr
 80106d0:	f1d0 0001 	rsbs	r0, r0, #1
 80106d4:	bf38      	it	cc
 80106d6:	2000      	movcc	r0, #0
 80106d8:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80106dc:	bf14      	ite	ne
 80106de:	2200      	movne	r2, #0
 80106e0:	f000 0201 	andeq.w	r2, r0, #1
 80106e4:	2a00      	cmp	r2, #0
 80106e6:	d1f0      	bne.n	80106ca <__fpclassifyd+0xa>
 80106e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106ec:	f101 44fe 	add.w	r4, r1, #2130706432	; 0x7f000000
 80106f0:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 80106f4:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80106f8:	4291      	cmp	r1, r2
 80106fa:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
 80106fe:	bf8c      	ite	hi
 8010700:	2100      	movhi	r1, #0
 8010702:	2101      	movls	r1, #1
 8010704:	4294      	cmp	r4, r2
 8010706:	bf8c      	ite	hi
 8010708:	460a      	movhi	r2, r1
 801070a:	f041 0201 	orrls.w	r2, r1, #1
 801070e:	b10a      	cbz	r2, 8010714 <__fpclassifyd+0x54>
 8010710:	2004      	movs	r0, #4
 8010712:	e7db      	b.n	80106cc <__fpclassifyd+0xc>
 8010714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010718:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801071c:	bf2c      	ite	cs
 801071e:	2200      	movcs	r2, #0
 8010720:	2201      	movcc	r2, #1
 8010722:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010726:	bf38      	it	cc
 8010728:	f042 0201 	orrcc.w	r2, r2, #1
 801072c:	b10a      	cbz	r2, 8010732 <__fpclassifyd+0x72>
 801072e:	2003      	movs	r0, #3
 8010730:	e7cc      	b.n	80106cc <__fpclassifyd+0xc>
 8010732:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8010736:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 801073a:	bf14      	ite	ne
 801073c:	2100      	movne	r1, #0
 801073e:	2101      	moveq	r1, #1
 8010740:	4293      	cmp	r3, r2
 8010742:	bf14      	ite	ne
 8010744:	460b      	movne	r3, r1
 8010746:	f041 0301 	orreq.w	r3, r1, #1
 801074a:	4018      	ands	r0, r3
 801074c:	e7be      	b.n	80106cc <__fpclassifyd+0xc>
 801074e:	bf00      	nop

08010750 <__sread>:
 8010750:	b510      	push	{r4, lr}
 8010752:	460c      	mov	r4, r1
 8010754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010758:	f7f3 fba0 	bl	8003e9c <_read_r>
 801075c:	2800      	cmp	r0, #0
 801075e:	bfab      	itete	ge
 8010760:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8010762:	89a3      	ldrhlt	r3, [r4, #12]
 8010764:	181b      	addge	r3, r3, r0
 8010766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801076a:	bfac      	ite	ge
 801076c:	6523      	strge	r3, [r4, #80]	; 0x50
 801076e:	81a3      	strhlt	r3, [r4, #12]
 8010770:	bd10      	pop	{r4, pc}
 8010772:	bf00      	nop

08010774 <__seofread>:
 8010774:	2000      	movs	r0, #0
 8010776:	4770      	bx	lr

08010778 <__swrite>:
 8010778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801077c:	461e      	mov	r6, r3
 801077e:	898b      	ldrh	r3, [r1, #12]
 8010780:	4617      	mov	r7, r2
 8010782:	460c      	mov	r4, r1
 8010784:	4605      	mov	r5, r0
 8010786:	05da      	lsls	r2, r3, #23
 8010788:	d506      	bpl.n	8010798 <__swrite+0x20>
 801078a:	2302      	movs	r3, #2
 801078c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010790:	2200      	movs	r2, #0
 8010792:	f7f3 fba3 	bl	8003edc <_lseek_r>
 8010796:	89a3      	ldrh	r3, [r4, #12]
 8010798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801079c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107a0:	81a3      	strh	r3, [r4, #12]
 80107a2:	4628      	mov	r0, r5
 80107a4:	463a      	mov	r2, r7
 80107a6:	4633      	mov	r3, r6
 80107a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ac:	f7f3 bb86 	b.w	8003ebc <_write_r>

080107b0 <__sseek>:
 80107b0:	b510      	push	{r4, lr}
 80107b2:	460c      	mov	r4, r1
 80107b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b8:	f7f3 fb90 	bl	8003edc <_lseek_r>
 80107bc:	89a3      	ldrh	r3, [r4, #12]
 80107be:	1c41      	adds	r1, r0, #1
 80107c0:	bf15      	itete	ne
 80107c2:	6520      	strne	r0, [r4, #80]	; 0x50
 80107c4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107c8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107cc:	81a3      	strheq	r3, [r4, #12]
 80107ce:	bf18      	it	ne
 80107d0:	81a3      	strhne	r3, [r4, #12]
 80107d2:	bd10      	pop	{r4, pc}

080107d4 <__sclose>:
 80107d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107d8:	f7f3 bb94 	b.w	8003f04 <_close_r>
 80107dc:	0000      	movs	r0, r0
	...

080107e0 <__ssprint_r>:
 80107e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e4:	b085      	sub	sp, #20
 80107e6:	6894      	ldr	r4, [r2, #8]
 80107e8:	4691      	mov	r9, r2
 80107ea:	9003      	str	r0, [sp, #12]
 80107ec:	460d      	mov	r5, r1
 80107ee:	6817      	ldr	r7, [r2, #0]
 80107f0:	2c00      	cmp	r4, #0
 80107f2:	d07a      	beq.n	80108ea <__ssprint_r+0x10a>
 80107f4:	f04f 0a00 	mov.w	sl, #0
 80107f8:	6808      	ldr	r0, [r1, #0]
 80107fa:	688b      	ldr	r3, [r1, #8]
 80107fc:	4654      	mov	r4, sl
 80107fe:	2c00      	cmp	r4, #0
 8010800:	d054      	beq.n	80108ac <__ssprint_r+0xcc>
 8010802:	429c      	cmp	r4, r3
 8010804:	461e      	mov	r6, r3
 8010806:	4698      	mov	r8, r3
 8010808:	bf3c      	itt	cc
 801080a:	4626      	movcc	r6, r4
 801080c:	46a0      	movcc	r8, r4
 801080e:	d33d      	bcc.n	801088c <__ssprint_r+0xac>
 8010810:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 8010814:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8010818:	d038      	beq.n	801088c <__ssprint_r+0xac>
 801081a:	696b      	ldr	r3, [r5, #20]
 801081c:	1c62      	adds	r2, r4, #1
 801081e:	6929      	ldr	r1, [r5, #16]
 8010820:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8010824:	1a43      	subs	r3, r0, r1
 8010826:	18d0      	adds	r0, r2, r3
 8010828:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 801082c:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 8010830:	4583      	cmp	fp, r0
 8010832:	465a      	mov	r2, fp
 8010834:	bf38      	it	cc
 8010836:	4683      	movcc	fp, r0
 8010838:	9803      	ldr	r0, [sp, #12]
 801083a:	bf38      	it	cc
 801083c:	465a      	movcc	r2, fp
 801083e:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8010842:	d038      	beq.n	80108b6 <__ssprint_r+0xd6>
 8010844:	4611      	mov	r1, r2
 8010846:	9301      	str	r3, [sp, #4]
 8010848:	f7fa fbea 	bl	800b020 <_malloc_r>
 801084c:	9b01      	ldr	r3, [sp, #4]
 801084e:	4684      	mov	ip, r0
 8010850:	2800      	cmp	r0, #0
 8010852:	d03b      	beq.n	80108cc <__ssprint_r+0xec>
 8010854:	6929      	ldr	r1, [r5, #16]
 8010856:	461a      	mov	r2, r3
 8010858:	9301      	str	r3, [sp, #4]
 801085a:	f8cd c008 	str.w	ip, [sp, #8]
 801085e:	f7fa ff0f 	bl	800b680 <memcpy>
 8010862:	89aa      	ldrh	r2, [r5, #12]
 8010864:	9b01      	ldr	r3, [sp, #4]
 8010866:	f8dd c008 	ldr.w	ip, [sp, #8]
 801086a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801086e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010872:	81aa      	strh	r2, [r5, #12]
 8010874:	4626      	mov	r6, r4
 8010876:	46a0      	mov	r8, r4
 8010878:	eb0c 0003 	add.w	r0, ip, r3
 801087c:	f8c5 c010 	str.w	ip, [r5, #16]
 8010880:	ebc3 030b 	rsb	r3, r3, fp
 8010884:	6028      	str	r0, [r5, #0]
 8010886:	f8c5 b014 	str.w	fp, [r5, #20]
 801088a:	60ab      	str	r3, [r5, #8]
 801088c:	4642      	mov	r2, r8
 801088e:	4651      	mov	r1, sl
 8010890:	f7fa ff3e 	bl	800b710 <memmove>
 8010894:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8010898:	68ab      	ldr	r3, [r5, #8]
 801089a:	6828      	ldr	r0, [r5, #0]
 801089c:	1b14      	subs	r4, r2, r4
 801089e:	1b9b      	subs	r3, r3, r6
 80108a0:	60ab      	str	r3, [r5, #8]
 80108a2:	4440      	add	r0, r8
 80108a4:	6028      	str	r0, [r5, #0]
 80108a6:	f8c9 4008 	str.w	r4, [r9, #8]
 80108aa:	b1f4      	cbz	r4, 80108ea <__ssprint_r+0x10a>
 80108ac:	f8d7 a000 	ldr.w	sl, [r7]
 80108b0:	687c      	ldr	r4, [r7, #4]
 80108b2:	3708      	adds	r7, #8
 80108b4:	e7a3      	b.n	80107fe <__ssprint_r+0x1e>
 80108b6:	9301      	str	r3, [sp, #4]
 80108b8:	f7fb f85a 	bl	800b970 <_realloc_r>
 80108bc:	9b01      	ldr	r3, [sp, #4]
 80108be:	4684      	mov	ip, r0
 80108c0:	2800      	cmp	r0, #0
 80108c2:	d1d7      	bne.n	8010874 <__ssprint_r+0x94>
 80108c4:	6929      	ldr	r1, [r5, #16]
 80108c6:	9803      	ldr	r0, [sp, #12]
 80108c8:	f7ff f8ba 	bl	800fa40 <_free_r>
 80108cc:	9a03      	ldr	r2, [sp, #12]
 80108ce:	230c      	movs	r3, #12
 80108d0:	f04f 30ff 	mov.w	r0, #4294967295
 80108d4:	6013      	str	r3, [r2, #0]
 80108d6:	2300      	movs	r3, #0
 80108d8:	89aa      	ldrh	r2, [r5, #12]
 80108da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80108de:	81aa      	strh	r2, [r5, #12]
 80108e0:	f8c9 3008 	str.w	r3, [r9, #8]
 80108e4:	f8c9 3004 	str.w	r3, [r9, #4]
 80108e8:	e002      	b.n	80108f0 <__ssprint_r+0x110>
 80108ea:	4620      	mov	r0, r4
 80108ec:	f8c9 4004 	str.w	r4, [r9, #4]
 80108f0:	b005      	add	sp, #20
 80108f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f6:	bf00      	nop

080108f8 <_svfiprintf_r>:
 80108f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fc:	b0af      	sub	sp, #188	; 0xbc
 80108fe:	468a      	mov	sl, r1
 8010900:	9307      	str	r3, [sp, #28]
 8010902:	898b      	ldrh	r3, [r1, #12]
 8010904:	9003      	str	r0, [sp, #12]
 8010906:	061b      	lsls	r3, r3, #24
 8010908:	d503      	bpl.n	8010912 <_svfiprintf_r+0x1a>
 801090a:	690b      	ldr	r3, [r1, #16]
 801090c:	2b00      	cmp	r3, #0
 801090e:	f000 8435 	beq.w	801117c <_svfiprintf_r+0x884>
 8010912:	4617      	mov	r7, r2
 8010914:	f10d 01a7 	add.w	r1, sp, #167	; 0xa7
 8010918:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 801091c:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 8010920:	2300      	movs	r3, #0
 8010922:	9102      	str	r1, [sp, #8]
 8010924:	ac10      	add	r4, sp, #64	; 0x40
 8010926:	ebc1 0108 	rsb	r1, r1, r8
 801092a:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
 801092e:	930d      	str	r3, [sp, #52]	; 0x34
 8010930:	9306      	str	r3, [sp, #24]
 8010932:	910f      	str	r1, [sp, #60]	; 0x3c
 8010934:	900e      	str	r0, [sp, #56]	; 0x38
 8010936:	942a      	str	r4, [sp, #168]	; 0xa8
 8010938:	932c      	str	r3, [sp, #176]	; 0xb0
 801093a:	932b      	str	r3, [sp, #172]	; 0xac
 801093c:	783b      	ldrb	r3, [r7, #0]
 801093e:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8010942:	bf18      	it	ne
 8010944:	2201      	movne	r2, #1
 8010946:	2b00      	cmp	r3, #0
 8010948:	bf0c      	ite	eq
 801094a:	2300      	moveq	r3, #0
 801094c:	f002 0301 	andne.w	r3, r2, #1
 8010950:	2b00      	cmp	r3, #0
 8010952:	f000 82ef 	beq.w	8010f34 <_svfiprintf_r+0x63c>
 8010956:	463a      	mov	r2, r7
 8010958:	463d      	mov	r5, r7
 801095a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801095e:	3501      	adds	r5, #1
 8010960:	1c19      	adds	r1, r3, #0
 8010962:	bf18      	it	ne
 8010964:	2101      	movne	r1, #1
 8010966:	2b25      	cmp	r3, #37	; 0x25
 8010968:	bf0c      	ite	eq
 801096a:	2300      	moveq	r3, #0
 801096c:	f001 0301 	andne.w	r3, r1, #1
 8010970:	2b00      	cmp	r3, #0
 8010972:	d1f2      	bne.n	801095a <_svfiprintf_r+0x62>
 8010974:	1bee      	subs	r6, r5, r7
 8010976:	d00e      	beq.n	8010996 <_svfiprintf_r+0x9e>
 8010978:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801097a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801097c:	3301      	adds	r3, #1
 801097e:	6027      	str	r7, [r4, #0]
 8010980:	2b07      	cmp	r3, #7
 8010982:	4432      	add	r2, r6
 8010984:	6066      	str	r6, [r4, #4]
 8010986:	932b      	str	r3, [sp, #172]	; 0xac
 8010988:	922c      	str	r2, [sp, #176]	; 0xb0
 801098a:	f300 8330 	bgt.w	8010fee <_svfiprintf_r+0x6f6>
 801098e:	3408      	adds	r4, #8
 8010990:	9b06      	ldr	r3, [sp, #24]
 8010992:	199b      	adds	r3, r3, r6
 8010994:	9306      	str	r3, [sp, #24]
 8010996:	782b      	ldrb	r3, [r5, #0]
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 82cd 	beq.w	8010f38 <_svfiprintf_r+0x640>
 801099e:	2300      	movs	r3, #0
 80109a0:	1c6f      	adds	r7, r5, #1
 80109a2:	461a      	mov	r2, r3
 80109a4:	f04f 35ff 	mov.w	r5, #4294967295
 80109a8:	469b      	mov	fp, r3
 80109aa:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 80109ae:	9308      	str	r3, [sp, #32]
 80109b0:	f817 3b01 	ldrb.w	r3, [r7], #1
 80109b4:	f1a3 0120 	sub.w	r1, r3, #32
 80109b8:	2958      	cmp	r1, #88	; 0x58
 80109ba:	f200 81a1 	bhi.w	8010d00 <_svfiprintf_r+0x408>
 80109be:	e8df f011 	tbh	[pc, r1, lsl #1]
 80109c2:	019b      	.short	0x019b
 80109c4:	019f019f 	.word	0x019f019f
 80109c8:	019f01fe 	.word	0x019f01fe
 80109cc:	019f019f 	.word	0x019f019f
 80109d0:	019f019f 	.word	0x019f019f
 80109d4:	00f0019f 	.word	0x00f0019f
 80109d8:	019f01fc 	.word	0x019f01fc
 80109dc:	01e100fc 	.word	0x01e100fc
 80109e0:	01de019f 	.word	0x01de019f
 80109e4:	01cd01cd 	.word	0x01cd01cd
 80109e8:	01cd01cd 	.word	0x01cd01cd
 80109ec:	01cd01cd 	.word	0x01cd01cd
 80109f0:	01cd01cd 	.word	0x01cd01cd
 80109f4:	019f01cd 	.word	0x019f01cd
 80109f8:	019f019f 	.word	0x019f019f
 80109fc:	019f019f 	.word	0x019f019f
 8010a00:	019f019f 	.word	0x019f019f
 8010a04:	019f019f 	.word	0x019f019f
 8010a08:	005c019f 	.word	0x005c019f
 8010a0c:	019f019f 	.word	0x019f019f
 8010a10:	019f019f 	.word	0x019f019f
 8010a14:	019f019f 	.word	0x019f019f
 8010a18:	019f019f 	.word	0x019f019f
 8010a1c:	019f019f 	.word	0x019f019f
 8010a20:	019f009c 	.word	0x019f009c
 8010a24:	019f019f 	.word	0x019f019f
 8010a28:	019f019f 	.word	0x019f019f
 8010a2c:	019f00dd 	.word	0x019f00dd
 8010a30:	0152019f 	.word	0x0152019f
 8010a34:	019f019f 	.word	0x019f019f
 8010a38:	019f019f 	.word	0x019f019f
 8010a3c:	019f019f 	.word	0x019f019f
 8010a40:	019f019f 	.word	0x019f019f
 8010a44:	019f019f 	.word	0x019f019f
 8010a48:	005e0102 	.word	0x005e0102
 8010a4c:	019f019f 	.word	0x019f019f
 8010a50:	00ff019f 	.word	0x00ff019f
 8010a54:	019f005e 	.word	0x019f005e
 8010a58:	0059019f 	.word	0x0059019f
 8010a5c:	0172019f 	.word	0x0172019f
 8010a60:	0188009e 	.word	0x0188009e
 8010a64:	019f0059 	.word	0x019f0059
 8010a68:	019f01af 	.word	0x019f01af
 8010a6c:	019f00df 	.word	0x019f00df
 8010a70:	0183019f 	.word	0x0183019f
 8010a74:	f04b 0b10 	orr.w	fp, fp, #16
 8010a78:	e79a      	b.n	80109b0 <_svfiprintf_r+0xb8>
 8010a7a:	f04b 0b10 	orr.w	fp, fp, #16
 8010a7e:	f01b 0f10 	tst.w	fp, #16
 8010a82:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8010a86:	9b07      	ldr	r3, [sp, #28]
 8010a88:	d103      	bne.n	8010a92 <_svfiprintf_r+0x19a>
 8010a8a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8010a8e:	f040 8339 	bne.w	8011104 <_svfiprintf_r+0x80c>
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	3304      	adds	r3, #4
 8010a96:	9307      	str	r3, [sp, #28]
 8010a98:	2a00      	cmp	r2, #0
 8010a9a:	f2c0 833a 	blt.w	8011112 <_svfiprintf_r+0x81a>
 8010a9e:	bf0c      	ite	eq
 8010aa0:	2100      	moveq	r1, #0
 8010aa2:	2101      	movne	r1, #1
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	2d00      	cmp	r5, #0
 8010aa8:	bfa8      	it	ge
 8010aaa:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 8010aae:	2d00      	cmp	r5, #0
 8010ab0:	bf18      	it	ne
 8010ab2:	f041 0101 	orrne.w	r1, r1, #1
 8010ab6:	2900      	cmp	r1, #0
 8010ab8:	d13b      	bne.n	8010b32 <_svfiprintf_r+0x23a>
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f040 8293 	bne.w	8010fe6 <_svfiprintf_r+0x6ee>
 8010ac0:	f01b 0f01 	tst.w	fp, #1
 8010ac4:	bf04      	itt	eq
 8010ac6:	9305      	streq	r3, [sp, #20]
 8010ac8:	f8cd 8028 	streq.w	r8, [sp, #40]	; 0x28
 8010acc:	d007      	beq.n	8010ade <_svfiprintf_r+0x1e6>
 8010ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ad0:	9305      	str	r3, [sp, #20]
 8010ad2:	2330      	movs	r3, #48	; 0x30
 8010ad4:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 8010ad8:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 8010adc:	930a      	str	r3, [sp, #40]	; 0x28
 8010ade:	9509      	str	r5, [sp, #36]	; 0x24
 8010ae0:	9805      	ldr	r0, [sp, #20]
 8010ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ae4:	f89d 30b7 	ldrb.w	r3, [sp, #183]	; 0xb7
 8010ae8:	4288      	cmp	r0, r1
 8010aea:	bfb8      	it	lt
 8010aec:	4608      	movlt	r0, r1
 8010aee:	9004      	str	r0, [sp, #16]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d078      	beq.n	8010be6 <_svfiprintf_r+0x2ee>
 8010af4:	3001      	adds	r0, #1
 8010af6:	9004      	str	r0, [sp, #16]
 8010af8:	e075      	b.n	8010be6 <_svfiprintf_r+0x2ee>
 8010afa:	f04b 0b10 	orr.w	fp, fp, #16
 8010afe:	f01b 0310 	ands.w	r3, fp, #16
 8010b02:	f000 82c9 	beq.w	8011098 <_svfiprintf_r+0x7a0>
 8010b06:	9b07      	ldr	r3, [sp, #28]
 8010b08:	9807      	ldr	r0, [sp, #28]
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	3004      	adds	r0, #4
 8010b10:	9007      	str	r0, [sp, #28]
 8010b12:	1ad1      	subs	r1, r2, r3
 8010b14:	bf18      	it	ne
 8010b16:	2101      	movne	r1, #1
 8010b18:	2000      	movs	r0, #0
 8010b1a:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 8010b1e:	2d00      	cmp	r5, #0
 8010b20:	bfa8      	it	ge
 8010b22:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 8010b26:	2d00      	cmp	r5, #0
 8010b28:	bf18      	it	ne
 8010b2a:	f041 0101 	orrne.w	r1, r1, #1
 8010b2e:	2900      	cmp	r1, #0
 8010b30:	d0c3      	beq.n	8010aba <_svfiprintf_r+0x1c2>
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	f000 8285 	beq.w	8011042 <_svfiprintf_r+0x74a>
 8010b38:	2b02      	cmp	r3, #2
 8010b3a:	bf18      	it	ne
 8010b3c:	4643      	movne	r3, r8
 8010b3e:	d101      	bne.n	8010b44 <_svfiprintf_r+0x24c>
 8010b40:	e298      	b.n	8011074 <_svfiprintf_r+0x77c>
 8010b42:	4603      	mov	r3, r0
 8010b44:	f002 0107 	and.w	r1, r2, #7
 8010b48:	1e58      	subs	r0, r3, #1
 8010b4a:	3130      	adds	r1, #48	; 0x30
 8010b4c:	08d2      	lsrs	r2, r2, #3
 8010b4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010b52:	d1f6      	bne.n	8010b42 <_svfiprintf_r+0x24a>
 8010b54:	f01b 0f01 	tst.w	fp, #1
 8010b58:	900a      	str	r0, [sp, #40]	; 0x28
 8010b5a:	bf04      	itt	eq
 8010b5c:	ebc0 0308 	rsbeq	r3, r0, r8
 8010b60:	9305      	streq	r3, [sp, #20]
 8010b62:	d0bc      	beq.n	8010ade <_svfiprintf_r+0x1e6>
 8010b64:	2930      	cmp	r1, #48	; 0x30
 8010b66:	f000 831b 	beq.w	80111a0 <_svfiprintf_r+0x8a8>
 8010b6a:	1e98      	subs	r0, r3, #2
 8010b6c:	2230      	movs	r2, #48	; 0x30
 8010b6e:	ebc0 0108 	rsb	r1, r0, r8
 8010b72:	900a      	str	r0, [sp, #40]	; 0x28
 8010b74:	9105      	str	r1, [sp, #20]
 8010b76:	f803 2c02 	strb.w	r2, [r3, #-2]
 8010b7a:	e7b0      	b.n	8010ade <_svfiprintf_r+0x1e6>
 8010b7c:	f04b 0b10 	orr.w	fp, fp, #16
 8010b80:	f01b 0f10 	tst.w	fp, #16
 8010b84:	9b07      	ldr	r3, [sp, #28]
 8010b86:	d103      	bne.n	8010b90 <_svfiprintf_r+0x298>
 8010b88:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8010b8c:	f040 82da 	bne.w	8011144 <_svfiprintf_r+0x84c>
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	2301      	movs	r3, #1
 8010b94:	9807      	ldr	r0, [sp, #28]
 8010b96:	3004      	adds	r0, #4
 8010b98:	1c11      	adds	r1, r2, #0
 8010b9a:	9007      	str	r0, [sp, #28]
 8010b9c:	bf18      	it	ne
 8010b9e:	2101      	movne	r1, #1
 8010ba0:	e7ba      	b.n	8010b18 <_svfiprintf_r+0x220>
 8010ba2:	9b07      	ldr	r3, [sp, #28]
 8010ba4:	9807      	ldr	r0, [sp, #28]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	9308      	str	r3, [sp, #32]
 8010baa:	1d03      	adds	r3, r0, #4
 8010bac:	9908      	ldr	r1, [sp, #32]
 8010bae:	2900      	cmp	r1, #0
 8010bb0:	f280 8293 	bge.w	80110da <_svfiprintf_r+0x7e2>
 8010bb4:	4249      	negs	r1, r1
 8010bb6:	9307      	str	r3, [sp, #28]
 8010bb8:	9108      	str	r1, [sp, #32]
 8010bba:	f04b 0b04 	orr.w	fp, fp, #4
 8010bbe:	e6f7      	b.n	80109b0 <_svfiprintf_r+0xb8>
 8010bc0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8010bc4:	e6f4      	b.n	80109b0 <_svfiprintf_r+0xb8>
 8010bc6:	9b07      	ldr	r3, [sp, #28]
 8010bc8:	2001      	movs	r0, #1
 8010bca:	2200      	movs	r2, #0
 8010bcc:	9004      	str	r0, [sp, #16]
 8010bce:	1d19      	adds	r1, r3, #4
 8010bd0:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	aa20      	add	r2, sp, #128	; 0x80
 8010bd8:	9107      	str	r1, [sp, #28]
 8010bda:	9005      	str	r0, [sp, #20]
 8010bdc:	920a      	str	r2, [sp, #40]	; 0x28
 8010bde:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8010be2:	2300      	movs	r3, #0
 8010be4:	9309      	str	r3, [sp, #36]	; 0x24
 8010be6:	f01b 0302 	ands.w	r3, fp, #2
 8010bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bec:	d002      	beq.n	8010bf4 <_svfiprintf_r+0x2fc>
 8010bee:	9b04      	ldr	r3, [sp, #16]
 8010bf0:	3302      	adds	r3, #2
 8010bf2:	9304      	str	r3, [sp, #16]
 8010bf4:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8010bf8:	930c      	str	r3, [sp, #48]	; 0x30
 8010bfa:	f040 80e3 	bne.w	8010dc4 <_svfiprintf_r+0x4cc>
 8010bfe:	9b08      	ldr	r3, [sp, #32]
 8010c00:	9804      	ldr	r0, [sp, #16]
 8010c02:	1a1d      	subs	r5, r3, r0
 8010c04:	2d00      	cmp	r5, #0
 8010c06:	f340 80dd 	ble.w	8010dc4 <_svfiprintf_r+0x4cc>
 8010c0a:	2d10      	cmp	r5, #16
 8010c0c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010c0e:	f340 82c4 	ble.w	801119a <_svfiprintf_r+0x8a2>
 8010c12:	f04f 0910 	mov.w	r9, #16
 8010c16:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010c18:	4ea4      	ldr	r6, [pc, #656]	; (8010eac <_svfiprintf_r+0x5b4>)
 8010c1a:	e002      	b.n	8010c22 <_svfiprintf_r+0x32a>
 8010c1c:	3d10      	subs	r5, #16
 8010c1e:	2d10      	cmp	r5, #16
 8010c20:	dd16      	ble.n	8010c50 <_svfiprintf_r+0x358>
 8010c22:	3301      	adds	r3, #1
 8010c24:	3210      	adds	r2, #16
 8010c26:	e884 0240 	stmia.w	r4, {r6, r9}
 8010c2a:	3408      	adds	r4, #8
 8010c2c:	2b07      	cmp	r3, #7
 8010c2e:	932b      	str	r3, [sp, #172]	; 0xac
 8010c30:	922c      	str	r2, [sp, #176]	; 0xb0
 8010c32:	ddf3      	ble.n	8010c1c <_svfiprintf_r+0x324>
 8010c34:	9803      	ldr	r0, [sp, #12]
 8010c36:	4651      	mov	r1, sl
 8010c38:	4642      	mov	r2, r8
 8010c3a:	ac10      	add	r4, sp, #64	; 0x40
 8010c3c:	f7ff fdd0 	bl	80107e0 <__ssprint_r>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	f040 8180 	bne.w	8010f46 <_svfiprintf_r+0x64e>
 8010c46:	3d10      	subs	r5, #16
 8010c48:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010c4a:	2d10      	cmp	r5, #16
 8010c4c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010c4e:	dce8      	bgt.n	8010c22 <_svfiprintf_r+0x32a>
 8010c50:	3301      	adds	r3, #1
 8010c52:	1952      	adds	r2, r2, r5
 8010c54:	2b07      	cmp	r3, #7
 8010c56:	6026      	str	r6, [r4, #0]
 8010c58:	6065      	str	r5, [r4, #4]
 8010c5a:	932b      	str	r3, [sp, #172]	; 0xac
 8010c5c:	922c      	str	r2, [sp, #176]	; 0xb0
 8010c5e:	f300 8226 	bgt.w	80110ae <_svfiprintf_r+0x7b6>
 8010c62:	3408      	adds	r4, #8
 8010c64:	e0b0      	b.n	8010dc8 <_svfiprintf_r+0x4d0>
 8010c66:	4992      	ldr	r1, [pc, #584]	; (8010eb0 <_svfiprintf_r+0x5b8>)
 8010c68:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8010c6c:	910d      	str	r1, [sp, #52]	; 0x34
 8010c6e:	f01b 0f10 	tst.w	fp, #16
 8010c72:	d103      	bne.n	8010c7c <_svfiprintf_r+0x384>
 8010c74:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8010c78:	f040 825f 	bne.w	801113a <_svfiprintf_r+0x842>
 8010c7c:	9807      	ldr	r0, [sp, #28]
 8010c7e:	6802      	ldr	r2, [r0, #0]
 8010c80:	3004      	adds	r0, #4
 8010c82:	9007      	str	r0, [sp, #28]
 8010c84:	1c11      	adds	r1, r2, #0
 8010c86:	bf18      	it	ne
 8010c88:	2101      	movne	r1, #1
 8010c8a:	ea1b 0f01 	tst.w	fp, r1
 8010c8e:	f000 8201 	beq.w	8011094 <_svfiprintf_r+0x79c>
 8010c92:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
 8010c96:	f04b 0b02 	orr.w	fp, fp, #2
 8010c9a:	2330      	movs	r3, #48	; 0x30
 8010c9c:	2101      	movs	r1, #1
 8010c9e:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	e738      	b.n	8010b18 <_svfiprintf_r+0x220>
 8010ca6:	f01b 0f10 	tst.w	fp, #16
 8010caa:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8010cae:	f040 823d 	bne.w	801112c <_svfiprintf_r+0x834>
 8010cb2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8010cb6:	f000 8259 	beq.w	801116c <_svfiprintf_r+0x874>
 8010cba:	9a07      	ldr	r2, [sp, #28]
 8010cbc:	9806      	ldr	r0, [sp, #24]
 8010cbe:	6813      	ldr	r3, [r2, #0]
 8010cc0:	3204      	adds	r2, #4
 8010cc2:	9207      	str	r2, [sp, #28]
 8010cc4:	8018      	strh	r0, [r3, #0]
 8010cc6:	e639      	b.n	801093c <_svfiprintf_r+0x44>
 8010cc8:	497a      	ldr	r1, [pc, #488]	; (8010eb4 <_svfiprintf_r+0x5bc>)
 8010cca:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8010cce:	910d      	str	r1, [sp, #52]	; 0x34
 8010cd0:	e7cd      	b.n	8010c6e <_svfiprintf_r+0x376>
 8010cd2:	9b07      	ldr	r3, [sp, #28]
 8010cd4:	f04b 0b02 	orr.w	fp, fp, #2
 8010cd8:	4876      	ldr	r0, [pc, #472]	; (8010eb4 <_svfiprintf_r+0x5bc>)
 8010cda:	1d19      	adds	r1, r3, #4
 8010cdc:	9107      	str	r1, [sp, #28]
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	2178      	movs	r1, #120	; 0x78
 8010ce2:	2330      	movs	r3, #48	; 0x30
 8010ce4:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
 8010ce8:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 8010cec:	2302      	movs	r3, #2
 8010cee:	1c11      	adds	r1, r2, #0
 8010cf0:	900d      	str	r0, [sp, #52]	; 0x34
 8010cf2:	bf18      	it	ne
 8010cf4:	2101      	movne	r1, #1
 8010cf6:	e70f      	b.n	8010b18 <_svfiprintf_r+0x220>
 8010cf8:	2a00      	cmp	r2, #0
 8010cfa:	bf08      	it	eq
 8010cfc:	2220      	moveq	r2, #32
 8010cfe:	e657      	b.n	80109b0 <_svfiprintf_r+0xb8>
 8010d00:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f000 8117 	beq.w	8010f38 <_svfiprintf_r+0x640>
 8010d0a:	2001      	movs	r0, #1
 8010d0c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8010d10:	9004      	str	r0, [sp, #16]
 8010d12:	2300      	movs	r3, #0
 8010d14:	9005      	str	r0, [sp, #20]
 8010d16:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 8010d1a:	ab20      	add	r3, sp, #128	; 0x80
 8010d1c:	930a      	str	r3, [sp, #40]	; 0x28
 8010d1e:	e760      	b.n	8010be2 <_svfiprintf_r+0x2ea>
 8010d20:	9b07      	ldr	r3, [sp, #28]
 8010d22:	2600      	movs	r6, #0
 8010d24:	f88d 60b7 	strb.w	r6, [sp, #183]	; 0xb7
 8010d28:	1d19      	adds	r1, r3, #4
 8010d2a:	9107      	str	r1, [sp, #28]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f000 823a 	beq.w	80111aa <_svfiprintf_r+0x8b2>
 8010d36:	2d00      	cmp	r5, #0
 8010d38:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010d3a:	f2c0 8206 	blt.w	801114a <_svfiprintf_r+0x852>
 8010d3e:	4631      	mov	r1, r6
 8010d40:	462a      	mov	r2, r5
 8010d42:	f7fa fc25 	bl	800b590 <memchr>
 8010d46:	2800      	cmp	r0, #0
 8010d48:	f000 8239 	beq.w	80111be <_svfiprintf_r+0x8c6>
 8010d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d4e:	9609      	str	r6, [sp, #36]	; 0x24
 8010d50:	1ac0      	subs	r0, r0, r3
 8010d52:	9005      	str	r0, [sp, #20]
 8010d54:	42a8      	cmp	r0, r5
 8010d56:	bfc8      	it	gt
 8010d58:	9505      	strgt	r5, [sp, #20]
 8010d5a:	e6c1      	b.n	8010ae0 <_svfiprintf_r+0x1e8>
 8010d5c:	4638      	mov	r0, r7
 8010d5e:	2100      	movs	r1, #0
 8010d60:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8010d64:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010d68:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010d6c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010d70:	4607      	mov	r7, r0
 8010d72:	2e09      	cmp	r6, #9
 8010d74:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010d78:	d9f2      	bls.n	8010d60 <_svfiprintf_r+0x468>
 8010d7a:	9108      	str	r1, [sp, #32]
 8010d7c:	e61a      	b.n	80109b4 <_svfiprintf_r+0xbc>
 8010d7e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8010d82:	e615      	b.n	80109b0 <_svfiprintf_r+0xb8>
 8010d84:	f817 3b01 	ldrb.w	r3, [r7], #1
 8010d88:	2b2a      	cmp	r3, #42	; 0x2a
 8010d8a:	f000 819c 	beq.w	80110c6 <_svfiprintf_r+0x7ce>
 8010d8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010d92:	2500      	movs	r5, #0
 8010d94:	2909      	cmp	r1, #9
 8010d96:	f63f ae0d 	bhi.w	80109b4 <_svfiprintf_r+0xbc>
 8010d9a:	4638      	mov	r0, r7
 8010d9c:	2500      	movs	r5, #0
 8010d9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010da2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010da6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8010daa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010dae:	2909      	cmp	r1, #9
 8010db0:	4607      	mov	r7, r0
 8010db2:	d9f4      	bls.n	8010d9e <_svfiprintf_r+0x4a6>
 8010db4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8010db8:	e5fc      	b.n	80109b4 <_svfiprintf_r+0xbc>
 8010dba:	222b      	movs	r2, #43	; 0x2b
 8010dbc:	e5f8      	b.n	80109b0 <_svfiprintf_r+0xb8>
 8010dbe:	f04b 0b01 	orr.w	fp, fp, #1
 8010dc2:	e5f5      	b.n	80109b0 <_svfiprintf_r+0xb8>
 8010dc4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010dc6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010dc8:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
 8010dcc:	b161      	cbz	r1, 8010de8 <_svfiprintf_r+0x4f0>
 8010dce:	3301      	adds	r3, #1
 8010dd0:	f10d 01b7 	add.w	r1, sp, #183	; 0xb7
 8010dd4:	6021      	str	r1, [r4, #0]
 8010dd6:	2101      	movs	r1, #1
 8010dd8:	2b07      	cmp	r3, #7
 8010dda:	440a      	add	r2, r1
 8010ddc:	6061      	str	r1, [r4, #4]
 8010dde:	932b      	str	r3, [sp, #172]	; 0xac
 8010de0:	922c      	str	r2, [sp, #176]	; 0xb0
 8010de2:	f300 8118 	bgt.w	8011016 <_svfiprintf_r+0x71e>
 8010de6:	3408      	adds	r4, #8
 8010de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010dea:	b159      	cbz	r1, 8010e04 <_svfiprintf_r+0x50c>
 8010dec:	3301      	adds	r3, #1
 8010dee:	a92d      	add	r1, sp, #180	; 0xb4
 8010df0:	6021      	str	r1, [r4, #0]
 8010df2:	2102      	movs	r1, #2
 8010df4:	2b07      	cmp	r3, #7
 8010df6:	440a      	add	r2, r1
 8010df8:	6061      	str	r1, [r4, #4]
 8010dfa:	932b      	str	r3, [sp, #172]	; 0xac
 8010dfc:	922c      	str	r2, [sp, #176]	; 0xb0
 8010dfe:	f300 8115 	bgt.w	801102c <_svfiprintf_r+0x734>
 8010e02:	3408      	adds	r4, #8
 8010e04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e06:	2880      	cmp	r0, #128	; 0x80
 8010e08:	f000 80aa 	beq.w	8010f60 <_svfiprintf_r+0x668>
 8010e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e0e:	9805      	ldr	r0, [sp, #20]
 8010e10:	1a0d      	subs	r5, r1, r0
 8010e12:	2d00      	cmp	r5, #0
 8010e14:	dd29      	ble.n	8010e6a <_svfiprintf_r+0x572>
 8010e16:	2d10      	cmp	r5, #16
 8010e18:	4e27      	ldr	r6, [pc, #156]	; (8010eb8 <_svfiprintf_r+0x5c0>)
 8010e1a:	bfc8      	it	gt
 8010e1c:	f04f 0910 	movgt.w	r9, #16
 8010e20:	dc03      	bgt.n	8010e2a <_svfiprintf_r+0x532>
 8010e22:	e018      	b.n	8010e56 <_svfiprintf_r+0x55e>
 8010e24:	3d10      	subs	r5, #16
 8010e26:	2d10      	cmp	r5, #16
 8010e28:	dd15      	ble.n	8010e56 <_svfiprintf_r+0x55e>
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	3210      	adds	r2, #16
 8010e2e:	e884 0240 	stmia.w	r4, {r6, r9}
 8010e32:	3408      	adds	r4, #8
 8010e34:	2b07      	cmp	r3, #7
 8010e36:	932b      	str	r3, [sp, #172]	; 0xac
 8010e38:	922c      	str	r2, [sp, #176]	; 0xb0
 8010e3a:	ddf3      	ble.n	8010e24 <_svfiprintf_r+0x52c>
 8010e3c:	9803      	ldr	r0, [sp, #12]
 8010e3e:	4651      	mov	r1, sl
 8010e40:	4642      	mov	r2, r8
 8010e42:	ac10      	add	r4, sp, #64	; 0x40
 8010e44:	f7ff fccc 	bl	80107e0 <__ssprint_r>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d17c      	bne.n	8010f46 <_svfiprintf_r+0x64e>
 8010e4c:	3d10      	subs	r5, #16
 8010e4e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010e50:	2d10      	cmp	r5, #16
 8010e52:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010e54:	dce9      	bgt.n	8010e2a <_svfiprintf_r+0x532>
 8010e56:	3301      	adds	r3, #1
 8010e58:	1952      	adds	r2, r2, r5
 8010e5a:	2b07      	cmp	r3, #7
 8010e5c:	6026      	str	r6, [r4, #0]
 8010e5e:	6065      	str	r5, [r4, #4]
 8010e60:	932b      	str	r3, [sp, #172]	; 0xac
 8010e62:	922c      	str	r2, [sp, #176]	; 0xb0
 8010e64:	f300 80cc 	bgt.w	8011000 <_svfiprintf_r+0x708>
 8010e68:	3408      	adds	r4, #8
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e6e:	9805      	ldr	r0, [sp, #20]
 8010e70:	2b07      	cmp	r3, #7
 8010e72:	932b      	str	r3, [sp, #172]	; 0xac
 8010e74:	6021      	str	r1, [r4, #0]
 8010e76:	4402      	add	r2, r0
 8010e78:	6060      	str	r0, [r4, #4]
 8010e7a:	bfd8      	it	le
 8010e7c:	f104 0108 	addle.w	r1, r4, #8
 8010e80:	922c      	str	r2, [sp, #176]	; 0xb0
 8010e82:	f300 809e 	bgt.w	8010fc2 <_svfiprintf_r+0x6ca>
 8010e86:	f01b 0f04 	tst.w	fp, #4
 8010e8a:	d039      	beq.n	8010f00 <_svfiprintf_r+0x608>
 8010e8c:	9b08      	ldr	r3, [sp, #32]
 8010e8e:	9804      	ldr	r0, [sp, #16]
 8010e90:	1a1d      	subs	r5, r3, r0
 8010e92:	2d00      	cmp	r5, #0
 8010e94:	dd34      	ble.n	8010f00 <_svfiprintf_r+0x608>
 8010e96:	2d10      	cmp	r5, #16
 8010e98:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010e9a:	bfd8      	it	le
 8010e9c:	4e03      	ldrle	r6, [pc, #12]	; (8010eac <_svfiprintf_r+0x5b4>)
 8010e9e:	dd26      	ble.n	8010eee <_svfiprintf_r+0x5f6>
 8010ea0:	2410      	movs	r4, #16
 8010ea2:	4e02      	ldr	r6, [pc, #8]	; (8010eac <_svfiprintf_r+0x5b4>)
 8010ea4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010ea8:	e00b      	b.n	8010ec2 <_svfiprintf_r+0x5ca>
 8010eaa:	bf00      	nop
 8010eac:	08014570 	.word	0x08014570
 8010eb0:	08014af0 	.word	0x08014af0
 8010eb4:	08014b04 	.word	0x08014b04
 8010eb8:	08014580 	.word	0x08014580
 8010ebc:	3d10      	subs	r5, #16
 8010ebe:	2d10      	cmp	r5, #16
 8010ec0:	dd15      	ble.n	8010eee <_svfiprintf_r+0x5f6>
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	3210      	adds	r2, #16
 8010ec6:	600e      	str	r6, [r1, #0]
 8010ec8:	604c      	str	r4, [r1, #4]
 8010eca:	3108      	adds	r1, #8
 8010ecc:	2b07      	cmp	r3, #7
 8010ece:	932b      	str	r3, [sp, #172]	; 0xac
 8010ed0:	922c      	str	r2, [sp, #176]	; 0xb0
 8010ed2:	ddf3      	ble.n	8010ebc <_svfiprintf_r+0x5c4>
 8010ed4:	4648      	mov	r0, r9
 8010ed6:	4651      	mov	r1, sl
 8010ed8:	4642      	mov	r2, r8
 8010eda:	f7ff fc81 	bl	80107e0 <__ssprint_r>
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	d131      	bne.n	8010f46 <_svfiprintf_r+0x64e>
 8010ee2:	3d10      	subs	r5, #16
 8010ee4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010ee6:	2d10      	cmp	r5, #16
 8010ee8:	a910      	add	r1, sp, #64	; 0x40
 8010eea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010eec:	dce9      	bgt.n	8010ec2 <_svfiprintf_r+0x5ca>
 8010eee:	3301      	adds	r3, #1
 8010ef0:	18aa      	adds	r2, r5, r2
 8010ef2:	2b07      	cmp	r3, #7
 8010ef4:	600e      	str	r6, [r1, #0]
 8010ef6:	604d      	str	r5, [r1, #4]
 8010ef8:	932b      	str	r3, [sp, #172]	; 0xac
 8010efa:	922c      	str	r2, [sp, #176]	; 0xb0
 8010efc:	f300 80ef 	bgt.w	80110de <_svfiprintf_r+0x7e6>
 8010f00:	9b06      	ldr	r3, [sp, #24]
 8010f02:	9804      	ldr	r0, [sp, #16]
 8010f04:	9908      	ldr	r1, [sp, #32]
 8010f06:	4288      	cmp	r0, r1
 8010f08:	bfac      	ite	ge
 8010f0a:	181b      	addge	r3, r3, r0
 8010f0c:	185b      	addlt	r3, r3, r1
 8010f0e:	9306      	str	r3, [sp, #24]
 8010f10:	2a00      	cmp	r2, #0
 8010f12:	d160      	bne.n	8010fd6 <_svfiprintf_r+0x6de>
 8010f14:	2300      	movs	r3, #0
 8010f16:	932b      	str	r3, [sp, #172]	; 0xac
 8010f18:	783b      	ldrb	r3, [r7, #0]
 8010f1a:	ac10      	add	r4, sp, #64	; 0x40
 8010f1c:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8010f20:	bf18      	it	ne
 8010f22:	2201      	movne	r2, #1
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	bf0c      	ite	eq
 8010f28:	2300      	moveq	r3, #0
 8010f2a:	f002 0301 	andne.w	r3, r2, #1
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f47f ad11 	bne.w	8010956 <_svfiprintf_r+0x5e>
 8010f34:	463d      	mov	r5, r7
 8010f36:	e52e      	b.n	8010996 <_svfiprintf_r+0x9e>
 8010f38:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8010f3a:	b123      	cbz	r3, 8010f46 <_svfiprintf_r+0x64e>
 8010f3c:	9803      	ldr	r0, [sp, #12]
 8010f3e:	4651      	mov	r1, sl
 8010f40:	aa2a      	add	r2, sp, #168	; 0xa8
 8010f42:	f7ff fc4d 	bl	80107e0 <__ssprint_r>
 8010f46:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010f4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010f4e:	9b06      	ldr	r3, [sp, #24]
 8010f50:	bf18      	it	ne
 8010f52:	f04f 33ff 	movne.w	r3, #4294967295
 8010f56:	9306      	str	r3, [sp, #24]
 8010f58:	9806      	ldr	r0, [sp, #24]
 8010f5a:	b02f      	add	sp, #188	; 0xbc
 8010f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f60:	9908      	ldr	r1, [sp, #32]
 8010f62:	9804      	ldr	r0, [sp, #16]
 8010f64:	1a0d      	subs	r5, r1, r0
 8010f66:	2d00      	cmp	r5, #0
 8010f68:	f77f af50 	ble.w	8010e0c <_svfiprintf_r+0x514>
 8010f6c:	2d10      	cmp	r5, #16
 8010f6e:	4e99      	ldr	r6, [pc, #612]	; (80111d4 <_svfiprintf_r+0x8dc>)
 8010f70:	bfc8      	it	gt
 8010f72:	f04f 0910 	movgt.w	r9, #16
 8010f76:	dc03      	bgt.n	8010f80 <_svfiprintf_r+0x688>
 8010f78:	e018      	b.n	8010fac <_svfiprintf_r+0x6b4>
 8010f7a:	3d10      	subs	r5, #16
 8010f7c:	2d10      	cmp	r5, #16
 8010f7e:	dd15      	ble.n	8010fac <_svfiprintf_r+0x6b4>
 8010f80:	3301      	adds	r3, #1
 8010f82:	3210      	adds	r2, #16
 8010f84:	e884 0240 	stmia.w	r4, {r6, r9}
 8010f88:	3408      	adds	r4, #8
 8010f8a:	2b07      	cmp	r3, #7
 8010f8c:	932b      	str	r3, [sp, #172]	; 0xac
 8010f8e:	922c      	str	r2, [sp, #176]	; 0xb0
 8010f90:	ddf3      	ble.n	8010f7a <_svfiprintf_r+0x682>
 8010f92:	9803      	ldr	r0, [sp, #12]
 8010f94:	4651      	mov	r1, sl
 8010f96:	4642      	mov	r2, r8
 8010f98:	ac10      	add	r4, sp, #64	; 0x40
 8010f9a:	f7ff fc21 	bl	80107e0 <__ssprint_r>
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	d1d1      	bne.n	8010f46 <_svfiprintf_r+0x64e>
 8010fa2:	3d10      	subs	r5, #16
 8010fa4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010fa6:	2d10      	cmp	r5, #16
 8010fa8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010faa:	dce9      	bgt.n	8010f80 <_svfiprintf_r+0x688>
 8010fac:	3301      	adds	r3, #1
 8010fae:	1952      	adds	r2, r2, r5
 8010fb0:	2b07      	cmp	r3, #7
 8010fb2:	6026      	str	r6, [r4, #0]
 8010fb4:	6065      	str	r5, [r4, #4]
 8010fb6:	932b      	str	r3, [sp, #172]	; 0xac
 8010fb8:	922c      	str	r2, [sp, #176]	; 0xb0
 8010fba:	f300 80cb 	bgt.w	8011154 <_svfiprintf_r+0x85c>
 8010fbe:	3408      	adds	r4, #8
 8010fc0:	e724      	b.n	8010e0c <_svfiprintf_r+0x514>
 8010fc2:	9803      	ldr	r0, [sp, #12]
 8010fc4:	4651      	mov	r1, sl
 8010fc6:	4642      	mov	r2, r8
 8010fc8:	f7ff fc0a 	bl	80107e0 <__ssprint_r>
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	d1ba      	bne.n	8010f46 <_svfiprintf_r+0x64e>
 8010fd0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010fd2:	a910      	add	r1, sp, #64	; 0x40
 8010fd4:	e757      	b.n	8010e86 <_svfiprintf_r+0x58e>
 8010fd6:	9803      	ldr	r0, [sp, #12]
 8010fd8:	4651      	mov	r1, sl
 8010fda:	4642      	mov	r2, r8
 8010fdc:	f7ff fc00 	bl	80107e0 <__ssprint_r>
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d097      	beq.n	8010f14 <_svfiprintf_r+0x61c>
 8010fe4:	e7af      	b.n	8010f46 <_svfiprintf_r+0x64e>
 8010fe6:	9105      	str	r1, [sp, #20]
 8010fe8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010fec:	e577      	b.n	8010ade <_svfiprintf_r+0x1e6>
 8010fee:	9803      	ldr	r0, [sp, #12]
 8010ff0:	4651      	mov	r1, sl
 8010ff2:	4642      	mov	r2, r8
 8010ff4:	f7ff fbf4 	bl	80107e0 <__ssprint_r>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	d1a4      	bne.n	8010f46 <_svfiprintf_r+0x64e>
 8010ffc:	ac10      	add	r4, sp, #64	; 0x40
 8010ffe:	e4c7      	b.n	8010990 <_svfiprintf_r+0x98>
 8011000:	9803      	ldr	r0, [sp, #12]
 8011002:	4651      	mov	r1, sl
 8011004:	4642      	mov	r2, r8
 8011006:	f7ff fbeb 	bl	80107e0 <__ssprint_r>
 801100a:	2800      	cmp	r0, #0
 801100c:	d19b      	bne.n	8010f46 <_svfiprintf_r+0x64e>
 801100e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011010:	ac10      	add	r4, sp, #64	; 0x40
 8011012:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011014:	e729      	b.n	8010e6a <_svfiprintf_r+0x572>
 8011016:	9803      	ldr	r0, [sp, #12]
 8011018:	4651      	mov	r1, sl
 801101a:	4642      	mov	r2, r8
 801101c:	f7ff fbe0 	bl	80107e0 <__ssprint_r>
 8011020:	2800      	cmp	r0, #0
 8011022:	d190      	bne.n	8010f46 <_svfiprintf_r+0x64e>
 8011024:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011026:	ac10      	add	r4, sp, #64	; 0x40
 8011028:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801102a:	e6dd      	b.n	8010de8 <_svfiprintf_r+0x4f0>
 801102c:	9803      	ldr	r0, [sp, #12]
 801102e:	4651      	mov	r1, sl
 8011030:	4642      	mov	r2, r8
 8011032:	f7ff fbd5 	bl	80107e0 <__ssprint_r>
 8011036:	2800      	cmp	r0, #0
 8011038:	d185      	bne.n	8010f46 <_svfiprintf_r+0x64e>
 801103a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801103c:	ac10      	add	r4, sp, #64	; 0x40
 801103e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011040:	e6e0      	b.n	8010e04 <_svfiprintf_r+0x50c>
 8011042:	2a09      	cmp	r2, #9
 8011044:	d955      	bls.n	80110f2 <_svfiprintf_r+0x7fa>
 8011046:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 801104a:	f10d 00a7 	add.w	r0, sp, #167	; 0xa7
 801104e:	fbac 1302 	umull	r1, r3, ip, r2
 8011052:	4601      	mov	r1, r0
 8011054:	3801      	subs	r0, #1
 8011056:	08db      	lsrs	r3, r3, #3
 8011058:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 801105c:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 8011060:	461a      	mov	r2, r3
 8011062:	3630      	adds	r6, #48	; 0x30
 8011064:	700e      	strb	r6, [r1, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d1f1      	bne.n	801104e <_svfiprintf_r+0x756>
 801106a:	ebc1 0308 	rsb	r3, r1, r8
 801106e:	910a      	str	r1, [sp, #40]	; 0x28
 8011070:	9305      	str	r3, [sp, #20]
 8011072:	e534      	b.n	8010ade <_svfiprintf_r+0x1e6>
 8011074:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011076:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 801107a:	f002 000f 	and.w	r0, r2, #15
 801107e:	4619      	mov	r1, r3
 8011080:	3b01      	subs	r3, #1
 8011082:	0912      	lsrs	r2, r2, #4
 8011084:	5c30      	ldrb	r0, [r6, r0]
 8011086:	7008      	strb	r0, [r1, #0]
 8011088:	d1f7      	bne.n	801107a <_svfiprintf_r+0x782>
 801108a:	ebc1 0308 	rsb	r3, r1, r8
 801108e:	910a      	str	r1, [sp, #40]	; 0x28
 8011090:	9305      	str	r3, [sp, #20]
 8011092:	e524      	b.n	8010ade <_svfiprintf_r+0x1e6>
 8011094:	2302      	movs	r3, #2
 8011096:	e53f      	b.n	8010b18 <_svfiprintf_r+0x220>
 8011098:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 801109c:	d042      	beq.n	8011124 <_svfiprintf_r+0x82c>
 801109e:	9907      	ldr	r1, [sp, #28]
 80110a0:	880a      	ldrh	r2, [r1, #0]
 80110a2:	3104      	adds	r1, #4
 80110a4:	9107      	str	r1, [sp, #28]
 80110a6:	1c11      	adds	r1, r2, #0
 80110a8:	bf18      	it	ne
 80110aa:	2101      	movne	r1, #1
 80110ac:	e534      	b.n	8010b18 <_svfiprintf_r+0x220>
 80110ae:	9803      	ldr	r0, [sp, #12]
 80110b0:	4651      	mov	r1, sl
 80110b2:	4642      	mov	r2, r8
 80110b4:	f7ff fb94 	bl	80107e0 <__ssprint_r>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	f47f af44 	bne.w	8010f46 <_svfiprintf_r+0x64e>
 80110be:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80110c0:	ac10      	add	r4, sp, #64	; 0x40
 80110c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80110c4:	e680      	b.n	8010dc8 <_svfiprintf_r+0x4d0>
 80110c6:	9b07      	ldr	r3, [sp, #28]
 80110c8:	681d      	ldr	r5, [r3, #0]
 80110ca:	3304      	adds	r3, #4
 80110cc:	2d00      	cmp	r5, #0
 80110ce:	bfbc      	itt	lt
 80110d0:	9307      	strlt	r3, [sp, #28]
 80110d2:	f04f 35ff 	movlt.w	r5, #4294967295
 80110d6:	f6ff ac6b 	blt.w	80109b0 <_svfiprintf_r+0xb8>
 80110da:	9307      	str	r3, [sp, #28]
 80110dc:	e468      	b.n	80109b0 <_svfiprintf_r+0xb8>
 80110de:	9803      	ldr	r0, [sp, #12]
 80110e0:	4651      	mov	r1, sl
 80110e2:	4642      	mov	r2, r8
 80110e4:	f7ff fb7c 	bl	80107e0 <__ssprint_r>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	f47f af2c 	bne.w	8010f46 <_svfiprintf_r+0x64e>
 80110ee:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80110f0:	e706      	b.n	8010f00 <_svfiprintf_r+0x608>
 80110f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110f4:	3230      	adds	r2, #48	; 0x30
 80110f6:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 80110fa:	9305      	str	r3, [sp, #20]
 80110fc:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 8011100:	930a      	str	r3, [sp, #40]	; 0x28
 8011102:	e4ec      	b.n	8010ade <_svfiprintf_r+0x1e6>
 8011104:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011108:	3304      	adds	r3, #4
 801110a:	9307      	str	r3, [sp, #28]
 801110c:	2a00      	cmp	r2, #0
 801110e:	f6bf acc6 	bge.w	8010a9e <_svfiprintf_r+0x1a6>
 8011112:	4252      	negs	r2, r2
 8011114:	1c11      	adds	r1, r2, #0
 8011116:	bf18      	it	ne
 8011118:	2101      	movne	r1, #1
 801111a:	232d      	movs	r3, #45	; 0x2d
 801111c:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 8011120:	2301      	movs	r3, #1
 8011122:	e4fc      	b.n	8010b1e <_svfiprintf_r+0x226>
 8011124:	9b07      	ldr	r3, [sp, #28]
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	460b      	mov	r3, r1
 801112a:	e533      	b.n	8010b94 <_svfiprintf_r+0x29c>
 801112c:	9807      	ldr	r0, [sp, #28]
 801112e:	9906      	ldr	r1, [sp, #24]
 8011130:	6803      	ldr	r3, [r0, #0]
 8011132:	3004      	adds	r0, #4
 8011134:	9007      	str	r0, [sp, #28]
 8011136:	6019      	str	r1, [r3, #0]
 8011138:	e400      	b.n	801093c <_svfiprintf_r+0x44>
 801113a:	9907      	ldr	r1, [sp, #28]
 801113c:	880a      	ldrh	r2, [r1, #0]
 801113e:	3104      	adds	r1, #4
 8011140:	9107      	str	r1, [sp, #28]
 8011142:	e59f      	b.n	8010c84 <_svfiprintf_r+0x38c>
 8011144:	881a      	ldrh	r2, [r3, #0]
 8011146:	2301      	movs	r3, #1
 8011148:	e524      	b.n	8010b94 <_svfiprintf_r+0x29c>
 801114a:	9609      	str	r6, [sp, #36]	; 0x24
 801114c:	f7fb f890 	bl	800c270 <strlen>
 8011150:	9005      	str	r0, [sp, #20]
 8011152:	e4c5      	b.n	8010ae0 <_svfiprintf_r+0x1e8>
 8011154:	9803      	ldr	r0, [sp, #12]
 8011156:	4651      	mov	r1, sl
 8011158:	4642      	mov	r2, r8
 801115a:	f7ff fb41 	bl	80107e0 <__ssprint_r>
 801115e:	2800      	cmp	r0, #0
 8011160:	f47f aef1 	bne.w	8010f46 <_svfiprintf_r+0x64e>
 8011164:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011166:	ac10      	add	r4, sp, #64	; 0x40
 8011168:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801116a:	e64f      	b.n	8010e0c <_svfiprintf_r+0x514>
 801116c:	9907      	ldr	r1, [sp, #28]
 801116e:	9a06      	ldr	r2, [sp, #24]
 8011170:	680b      	ldr	r3, [r1, #0]
 8011172:	3104      	adds	r1, #4
 8011174:	9107      	str	r1, [sp, #28]
 8011176:	601a      	str	r2, [r3, #0]
 8011178:	f7ff bbe0 	b.w	801093c <_svfiprintf_r+0x44>
 801117c:	2140      	movs	r1, #64	; 0x40
 801117e:	9201      	str	r2, [sp, #4]
 8011180:	f7f9 ff4e 	bl	800b020 <_malloc_r>
 8011184:	9a01      	ldr	r2, [sp, #4]
 8011186:	f8ca 0000 	str.w	r0, [sl]
 801118a:	f8ca 0010 	str.w	r0, [sl, #16]
 801118e:	b1c8      	cbz	r0, 80111c4 <_svfiprintf_r+0x8cc>
 8011190:	2340      	movs	r3, #64	; 0x40
 8011192:	f8ca 3014 	str.w	r3, [sl, #20]
 8011196:	f7ff bbbc 	b.w	8010912 <_svfiprintf_r+0x1a>
 801119a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801119c:	4e0e      	ldr	r6, [pc, #56]	; (80111d8 <_svfiprintf_r+0x8e0>)
 801119e:	e557      	b.n	8010c50 <_svfiprintf_r+0x358>
 80111a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111a2:	ebc3 0308 	rsb	r3, r3, r8
 80111a6:	9305      	str	r3, [sp, #20]
 80111a8:	e499      	b.n	8010ade <_svfiprintf_r+0x1e6>
 80111aa:	4b0c      	ldr	r3, [pc, #48]	; (80111dc <_svfiprintf_r+0x8e4>)
 80111ac:	2d06      	cmp	r5, #6
 80111ae:	bf28      	it	cs
 80111b0:	2506      	movcs	r5, #6
 80111b2:	9505      	str	r5, [sp, #20]
 80111b4:	930a      	str	r3, [sp, #40]	; 0x28
 80111b6:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80111ba:	9304      	str	r3, [sp, #16]
 80111bc:	e511      	b.n	8010be2 <_svfiprintf_r+0x2ea>
 80111be:	9505      	str	r5, [sp, #20]
 80111c0:	9009      	str	r0, [sp, #36]	; 0x24
 80111c2:	e48d      	b.n	8010ae0 <_svfiprintf_r+0x1e8>
 80111c4:	9803      	ldr	r0, [sp, #12]
 80111c6:	f04f 33ff 	mov.w	r3, #4294967295
 80111ca:	9306      	str	r3, [sp, #24]
 80111cc:	230c      	movs	r3, #12
 80111ce:	6003      	str	r3, [r0, #0]
 80111d0:	e6c2      	b.n	8010f58 <_svfiprintf_r+0x660>
 80111d2:	bf00      	nop
 80111d4:	08014580 	.word	0x08014580
 80111d8:	08014570 	.word	0x08014570
 80111dc:	08014b18 	.word	0x08014b18

080111e0 <_wcrtomb_r>:
 80111e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111e4:	461e      	mov	r6, r3
 80111e6:	4b10      	ldr	r3, [pc, #64]	; (8011228 <_wcrtomb_r+0x48>)
 80111e8:	b086      	sub	sp, #24
 80111ea:	460c      	mov	r4, r1
 80111ec:	4605      	mov	r5, r0
 80111ee:	4690      	mov	r8, r2
 80111f0:	681f      	ldr	r7, [r3, #0]
 80111f2:	b181      	cbz	r1, 8011216 <_wcrtomb_r+0x36>
 80111f4:	f7fe fd5e 	bl	800fcb4 <__locale_charset>
 80111f8:	9600      	str	r6, [sp, #0]
 80111fa:	4621      	mov	r1, r4
 80111fc:	4642      	mov	r2, r8
 80111fe:	4603      	mov	r3, r0
 8011200:	4628      	mov	r0, r5
 8011202:	47b8      	blx	r7
 8011204:	1c43      	adds	r3, r0, #1
 8011206:	d103      	bne.n	8011210 <_wcrtomb_r+0x30>
 8011208:	2300      	movs	r3, #0
 801120a:	6033      	str	r3, [r6, #0]
 801120c:	238a      	movs	r3, #138	; 0x8a
 801120e:	602b      	str	r3, [r5, #0]
 8011210:	b006      	add	sp, #24
 8011212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011216:	f7fe fd4d 	bl	800fcb4 <__locale_charset>
 801121a:	9600      	str	r6, [sp, #0]
 801121c:	a903      	add	r1, sp, #12
 801121e:	4622      	mov	r2, r4
 8011220:	4603      	mov	r3, r0
 8011222:	4628      	mov	r0, r5
 8011224:	47b8      	blx	r7
 8011226:	e7ed      	b.n	8011204 <_wcrtomb_r+0x24>
 8011228:	20000904 	.word	0x20000904

0801122c <wcrtomb>:
 801122c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011230:	4607      	mov	r7, r0
 8011232:	b087      	sub	sp, #28
 8011234:	4688      	mov	r8, r1
 8011236:	4614      	mov	r4, r2
 8011238:	4d12      	ldr	r5, [pc, #72]	; (8011284 <wcrtomb+0x58>)
 801123a:	b1a8      	cbz	r0, 8011268 <wcrtomb+0x3c>
 801123c:	4b12      	ldr	r3, [pc, #72]	; (8011288 <wcrtomb+0x5c>)
 801123e:	f8d5 9000 	ldr.w	r9, [r5]
 8011242:	681e      	ldr	r6, [r3, #0]
 8011244:	f7fe fd36 	bl	800fcb4 <__locale_charset>
 8011248:	9400      	str	r4, [sp, #0]
 801124a:	4639      	mov	r1, r7
 801124c:	4642      	mov	r2, r8
 801124e:	4603      	mov	r3, r0
 8011250:	4648      	mov	r0, r9
 8011252:	47b0      	blx	r6
 8011254:	1c42      	adds	r2, r0, #1
 8011256:	d104      	bne.n	8011262 <wcrtomb+0x36>
 8011258:	682b      	ldr	r3, [r5, #0]
 801125a:	2200      	movs	r2, #0
 801125c:	6022      	str	r2, [r4, #0]
 801125e:	228a      	movs	r2, #138	; 0x8a
 8011260:	601a      	str	r2, [r3, #0]
 8011262:	b007      	add	sp, #28
 8011264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011268:	4b07      	ldr	r3, [pc, #28]	; (8011288 <wcrtomb+0x5c>)
 801126a:	f8d5 8000 	ldr.w	r8, [r5]
 801126e:	681e      	ldr	r6, [r3, #0]
 8011270:	f7fe fd20 	bl	800fcb4 <__locale_charset>
 8011274:	9400      	str	r4, [sp, #0]
 8011276:	a903      	add	r1, sp, #12
 8011278:	463a      	mov	r2, r7
 801127a:	4603      	mov	r3, r0
 801127c:	4640      	mov	r0, r8
 801127e:	47b0      	blx	r6
 8011280:	e7e8      	b.n	8011254 <wcrtomb+0x28>
 8011282:	bf00      	nop
 8011284:	20000048 	.word	0x20000048
 8011288:	20000904 	.word	0x20000904
 801128c:	00000000 	.word	0x00000000

08011290 <__ascii_wctomb>:
 8011290:	4603      	mov	r3, r0
 8011292:	b121      	cbz	r1, 801129e <__ascii_wctomb+0xe>
 8011294:	2aff      	cmp	r2, #255	; 0xff
 8011296:	d804      	bhi.n	80112a2 <__ascii_wctomb+0x12>
 8011298:	700a      	strb	r2, [r1, #0]
 801129a:	2001      	movs	r0, #1
 801129c:	4770      	bx	lr
 801129e:	4608      	mov	r0, r1
 80112a0:	4770      	bx	lr
 80112a2:	228a      	movs	r2, #138	; 0x8a
 80112a4:	f04f 30ff 	mov.w	r0, #4294967295
 80112a8:	601a      	str	r2, [r3, #0]
 80112aa:	4770      	bx	lr

080112ac <_wctomb_r>:
 80112ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112b0:	f640 1404 	movw	r4, #2308	; 0x904
 80112b4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80112b8:	b082      	sub	sp, #8
 80112ba:	461e      	mov	r6, r3
 80112bc:	4605      	mov	r5, r0
 80112be:	4688      	mov	r8, r1
 80112c0:	4617      	mov	r7, r2
 80112c2:	6824      	ldr	r4, [r4, #0]
 80112c4:	f7fe fcf6 	bl	800fcb4 <__locale_charset>
 80112c8:	9600      	str	r6, [sp, #0]
 80112ca:	4641      	mov	r1, r8
 80112cc:	463a      	mov	r2, r7
 80112ce:	4603      	mov	r3, r0
 80112d0:	4628      	mov	r0, r5
 80112d2:	47a0      	blx	r4
 80112d4:	b002      	add	sp, #8
 80112d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112da:	bf00      	nop
 80112dc:	0000      	movs	r0, r0
	...

080112e0 <_calloc_r>:
 80112e0:	b510      	push	{r4, lr}
 80112e2:	fb01 f102 	mul.w	r1, r1, r2
 80112e6:	f7f9 fe9b 	bl	800b020 <_malloc_r>
 80112ea:	4604      	mov	r4, r0
 80112ec:	b308      	cbz	r0, 8011332 <_calloc_r+0x52>
 80112ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80112f2:	f022 0203 	bic.w	r2, r2, #3
 80112f6:	3a04      	subs	r2, #4
 80112f8:	2a24      	cmp	r2, #36	; 0x24
 80112fa:	d81c      	bhi.n	8011336 <_calloc_r+0x56>
 80112fc:	2a13      	cmp	r2, #19
 80112fe:	bf98      	it	ls
 8011300:	4602      	movls	r2, r0
 8011302:	d912      	bls.n	801132a <_calloc_r+0x4a>
 8011304:	2300      	movs	r3, #0
 8011306:	2a1b      	cmp	r2, #27
 8011308:	6003      	str	r3, [r0, #0]
 801130a:	bf98      	it	ls
 801130c:	f100 0208 	addls.w	r2, r0, #8
 8011310:	6043      	str	r3, [r0, #4]
 8011312:	d90a      	bls.n	801132a <_calloc_r+0x4a>
 8011314:	2a24      	cmp	r2, #36	; 0x24
 8011316:	6083      	str	r3, [r0, #8]
 8011318:	bf14      	ite	ne
 801131a:	f100 0210 	addne.w	r2, r0, #16
 801131e:	f100 0218 	addeq.w	r2, r0, #24
 8011322:	60c3      	str	r3, [r0, #12]
 8011324:	bf04      	itt	eq
 8011326:	6103      	streq	r3, [r0, #16]
 8011328:	6143      	streq	r3, [r0, #20]
 801132a:	2300      	movs	r3, #0
 801132c:	6013      	str	r3, [r2, #0]
 801132e:	6053      	str	r3, [r2, #4]
 8011330:	6093      	str	r3, [r2, #8]
 8011332:	4620      	mov	r0, r4
 8011334:	bd10      	pop	{r4, pc}
 8011336:	2100      	movs	r1, #0
 8011338:	f7fa fa52 	bl	800b7e0 <memset>
 801133c:	4620      	mov	r0, r4
 801133e:	bd10      	pop	{r4, pc}

08011340 <_fclose_r>:
 8011340:	b570      	push	{r4, r5, r6, lr}
 8011342:	460c      	mov	r4, r1
 8011344:	4605      	mov	r5, r0
 8011346:	460e      	mov	r6, r1
 8011348:	2900      	cmp	r1, #0
 801134a:	d030      	beq.n	80113ae <_fclose_r+0x6e>
 801134c:	f7fe fa7a 	bl	800f844 <__sfp_lock_acquire>
 8011350:	b115      	cbz	r5, 8011358 <_fclose_r+0x18>
 8011352:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011354:	2b00      	cmp	r3, #0
 8011356:	d02c      	beq.n	80113b2 <_fclose_r+0x72>
 8011358:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801135c:	b32e      	cbz	r6, 80113aa <_fclose_r+0x6a>
 801135e:	4628      	mov	r0, r5
 8011360:	4621      	mov	r1, r4
 8011362:	f7fe f8d5 	bl	800f510 <_fflush_r>
 8011366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011368:	4606      	mov	r6, r0
 801136a:	b13b      	cbz	r3, 801137c <_fclose_r+0x3c>
 801136c:	69e1      	ldr	r1, [r4, #28]
 801136e:	4628      	mov	r0, r5
 8011370:	4798      	blx	r3
 8011372:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 8011376:	bf28      	it	cs
 8011378:	f04f 36ff 	movcs.w	r6, #4294967295
 801137c:	89a3      	ldrh	r3, [r4, #12]
 801137e:	061b      	lsls	r3, r3, #24
 8011380:	d41f      	bmi.n	80113c2 <_fclose_r+0x82>
 8011382:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011384:	b141      	cbz	r1, 8011398 <_fclose_r+0x58>
 8011386:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801138a:	4299      	cmp	r1, r3
 801138c:	d002      	beq.n	8011394 <_fclose_r+0x54>
 801138e:	4628      	mov	r0, r5
 8011390:	f7fe fb56 	bl	800fa40 <_free_r>
 8011394:	2300      	movs	r3, #0
 8011396:	6323      	str	r3, [r4, #48]	; 0x30
 8011398:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801139a:	b121      	cbz	r1, 80113a6 <_fclose_r+0x66>
 801139c:	4628      	mov	r0, r5
 801139e:	f7fe fb4f 	bl	800fa40 <_free_r>
 80113a2:	2300      	movs	r3, #0
 80113a4:	6463      	str	r3, [r4, #68]	; 0x44
 80113a6:	2300      	movs	r3, #0
 80113a8:	81a3      	strh	r3, [r4, #12]
 80113aa:	f7fe fa4d 	bl	800f848 <__sfp_lock_release>
 80113ae:	4630      	mov	r0, r6
 80113b0:	bd70      	pop	{r4, r5, r6, pc}
 80113b2:	4628      	mov	r0, r5
 80113b4:	f7fe f9d4 	bl	800f760 <__sinit>
 80113b8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80113bc:	2e00      	cmp	r6, #0
 80113be:	d1ce      	bne.n	801135e <_fclose_r+0x1e>
 80113c0:	e7f3      	b.n	80113aa <_fclose_r+0x6a>
 80113c2:	6921      	ldr	r1, [r4, #16]
 80113c4:	4628      	mov	r0, r5
 80113c6:	f7fe fb3b 	bl	800fa40 <_free_r>
 80113ca:	e7da      	b.n	8011382 <_fclose_r+0x42>

080113cc <fclose>:
 80113cc:	f240 0348 	movw	r3, #72	; 0x48
 80113d0:	4601      	mov	r1, r0
 80113d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113d6:	6818      	ldr	r0, [r3, #0]
 80113d8:	e7b2      	b.n	8011340 <_fclose_r>
 80113da:	bf00      	nop
 80113dc:	0000      	movs	r0, r0
	...

080113e0 <__aeabi_uidiv>:
 80113e0:	1e4a      	subs	r2, r1, #1
 80113e2:	bf08      	it	eq
 80113e4:	4770      	bxeq	lr
 80113e6:	f0c0 8124 	bcc.w	8011632 <__aeabi_uidiv+0x252>
 80113ea:	4288      	cmp	r0, r1
 80113ec:	f240 8116 	bls.w	801161c <__aeabi_uidiv+0x23c>
 80113f0:	4211      	tst	r1, r2
 80113f2:	f000 8117 	beq.w	8011624 <__aeabi_uidiv+0x244>
 80113f6:	fab0 f380 	clz	r3, r0
 80113fa:	fab1 f281 	clz	r2, r1
 80113fe:	eba2 0303 	sub.w	r3, r2, r3
 8011402:	f1c3 031f 	rsb	r3, r3, #31
 8011406:	a204      	add	r2, pc, #16	; (adr r2, 8011418 <__aeabi_uidiv+0x38>)
 8011408:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801140c:	f04f 0200 	mov.w	r2, #0
 8011410:	469f      	mov	pc, r3
 8011412:	bf00      	nop
 8011414:	f3af 8000 	nop.w
 8011418:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 801141c:	bf00      	nop
 801141e:	eb42 0202 	adc.w	r2, r2, r2
 8011422:	bf28      	it	cs
 8011424:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 8011428:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 801142c:	bf00      	nop
 801142e:	eb42 0202 	adc.w	r2, r2, r2
 8011432:	bf28      	it	cs
 8011434:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 8011438:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 801143c:	bf00      	nop
 801143e:	eb42 0202 	adc.w	r2, r2, r2
 8011442:	bf28      	it	cs
 8011444:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 8011448:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 801144c:	bf00      	nop
 801144e:	eb42 0202 	adc.w	r2, r2, r2
 8011452:	bf28      	it	cs
 8011454:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 8011458:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 801145c:	bf00      	nop
 801145e:	eb42 0202 	adc.w	r2, r2, r2
 8011462:	bf28      	it	cs
 8011464:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 8011468:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 801146c:	bf00      	nop
 801146e:	eb42 0202 	adc.w	r2, r2, r2
 8011472:	bf28      	it	cs
 8011474:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 8011478:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 801147c:	bf00      	nop
 801147e:	eb42 0202 	adc.w	r2, r2, r2
 8011482:	bf28      	it	cs
 8011484:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 8011488:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 801148c:	bf00      	nop
 801148e:	eb42 0202 	adc.w	r2, r2, r2
 8011492:	bf28      	it	cs
 8011494:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 8011498:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 801149c:	bf00      	nop
 801149e:	eb42 0202 	adc.w	r2, r2, r2
 80114a2:	bf28      	it	cs
 80114a4:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 80114a8:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 80114ac:	bf00      	nop
 80114ae:	eb42 0202 	adc.w	r2, r2, r2
 80114b2:	bf28      	it	cs
 80114b4:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 80114b8:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 80114bc:	bf00      	nop
 80114be:	eb42 0202 	adc.w	r2, r2, r2
 80114c2:	bf28      	it	cs
 80114c4:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 80114c8:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 80114cc:	bf00      	nop
 80114ce:	eb42 0202 	adc.w	r2, r2, r2
 80114d2:	bf28      	it	cs
 80114d4:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 80114d8:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 80114dc:	bf00      	nop
 80114de:	eb42 0202 	adc.w	r2, r2, r2
 80114e2:	bf28      	it	cs
 80114e4:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 80114e8:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 80114ec:	bf00      	nop
 80114ee:	eb42 0202 	adc.w	r2, r2, r2
 80114f2:	bf28      	it	cs
 80114f4:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 80114f8:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 80114fc:	bf00      	nop
 80114fe:	eb42 0202 	adc.w	r2, r2, r2
 8011502:	bf28      	it	cs
 8011504:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 8011508:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 801150c:	bf00      	nop
 801150e:	eb42 0202 	adc.w	r2, r2, r2
 8011512:	bf28      	it	cs
 8011514:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 8011518:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 801151c:	bf00      	nop
 801151e:	eb42 0202 	adc.w	r2, r2, r2
 8011522:	bf28      	it	cs
 8011524:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 8011528:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 801152c:	bf00      	nop
 801152e:	eb42 0202 	adc.w	r2, r2, r2
 8011532:	bf28      	it	cs
 8011534:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 8011538:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 801153c:	bf00      	nop
 801153e:	eb42 0202 	adc.w	r2, r2, r2
 8011542:	bf28      	it	cs
 8011544:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 8011548:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 801154c:	bf00      	nop
 801154e:	eb42 0202 	adc.w	r2, r2, r2
 8011552:	bf28      	it	cs
 8011554:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 8011558:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 801155c:	bf00      	nop
 801155e:	eb42 0202 	adc.w	r2, r2, r2
 8011562:	bf28      	it	cs
 8011564:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 8011568:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 801156c:	bf00      	nop
 801156e:	eb42 0202 	adc.w	r2, r2, r2
 8011572:	bf28      	it	cs
 8011574:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 8011578:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 801157c:	bf00      	nop
 801157e:	eb42 0202 	adc.w	r2, r2, r2
 8011582:	bf28      	it	cs
 8011584:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 8011588:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 801158c:	bf00      	nop
 801158e:	eb42 0202 	adc.w	r2, r2, r2
 8011592:	bf28      	it	cs
 8011594:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 8011598:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 801159c:	bf00      	nop
 801159e:	eb42 0202 	adc.w	r2, r2, r2
 80115a2:	bf28      	it	cs
 80115a4:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 80115a8:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 80115ac:	bf00      	nop
 80115ae:	eb42 0202 	adc.w	r2, r2, r2
 80115b2:	bf28      	it	cs
 80115b4:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 80115b8:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 80115bc:	bf00      	nop
 80115be:	eb42 0202 	adc.w	r2, r2, r2
 80115c2:	bf28      	it	cs
 80115c4:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 80115c8:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 80115cc:	bf00      	nop
 80115ce:	eb42 0202 	adc.w	r2, r2, r2
 80115d2:	bf28      	it	cs
 80115d4:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 80115d8:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 80115dc:	bf00      	nop
 80115de:	eb42 0202 	adc.w	r2, r2, r2
 80115e2:	bf28      	it	cs
 80115e4:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 80115e8:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 80115ec:	bf00      	nop
 80115ee:	eb42 0202 	adc.w	r2, r2, r2
 80115f2:	bf28      	it	cs
 80115f4:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 80115f8:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 80115fc:	bf00      	nop
 80115fe:	eb42 0202 	adc.w	r2, r2, r2
 8011602:	bf28      	it	cs
 8011604:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 8011608:	ebb0 0f01 	cmp.w	r0, r1
 801160c:	bf00      	nop
 801160e:	eb42 0202 	adc.w	r2, r2, r2
 8011612:	bf28      	it	cs
 8011614:	eba0 0001 	subcs.w	r0, r0, r1
 8011618:	4610      	mov	r0, r2
 801161a:	4770      	bx	lr
 801161c:	bf0c      	ite	eq
 801161e:	2001      	moveq	r0, #1
 8011620:	2000      	movne	r0, #0
 8011622:	4770      	bx	lr
 8011624:	fab1 f281 	clz	r2, r1
 8011628:	f1c2 021f 	rsb	r2, r2, #31
 801162c:	fa20 f002 	lsr.w	r0, r0, r2
 8011630:	4770      	bx	lr
 8011632:	b108      	cbz	r0, 8011638 <__aeabi_uidiv+0x258>
 8011634:	f04f 30ff 	mov.w	r0, #4294967295
 8011638:	f000 b812 	b.w	8011660 <__aeabi_idiv0>

0801163c <__aeabi_uidivmod>:
 801163c:	2900      	cmp	r1, #0
 801163e:	d0f8      	beq.n	8011632 <__aeabi_uidiv+0x252>
 8011640:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 8011644:	f7ff fecc 	bl	80113e0 <__aeabi_uidiv>
 8011648:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 801164c:	fb02 f300 	mul.w	r3, r2, r0
 8011650:	eba1 0103 	sub.w	r1, r1, r3
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
	...

08011660 <__aeabi_idiv0>:
 8011660:	4770      	bx	lr
 8011662:	bf00      	nop
	...

08011670 <__aeabi_drsub>:
 8011670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8011674:	e002      	b.n	801167c <__adddf3>
 8011676:	bf00      	nop

08011678 <__aeabi_dsub>:
 8011678:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801167c <__adddf3>:
 801167c:	b530      	push	{r4, r5, lr}
 801167e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8011682:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8011686:	ea94 0f05 	teq	r4, r5
 801168a:	bf08      	it	eq
 801168c:	ea90 0f02 	teqeq	r0, r2
 8011690:	bf1f      	itttt	ne
 8011692:	ea54 0c00 	orrsne.w	ip, r4, r0
 8011696:	ea55 0c02 	orrsne.w	ip, r5, r2
 801169a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801169e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80116a2:	f000 80e2 	beq.w	801186a <__adddf3+0x1ee>
 80116a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80116aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80116ae:	bfb8      	it	lt
 80116b0:	426d      	neglt	r5, r5
 80116b2:	dd0c      	ble.n	80116ce <__adddf3+0x52>
 80116b4:	442c      	add	r4, r5
 80116b6:	ea80 0202 	eor.w	r2, r0, r2
 80116ba:	ea81 0303 	eor.w	r3, r1, r3
 80116be:	ea82 0000 	eor.w	r0, r2, r0
 80116c2:	ea83 0101 	eor.w	r1, r3, r1
 80116c6:	ea80 0202 	eor.w	r2, r0, r2
 80116ca:	ea81 0303 	eor.w	r3, r1, r3
 80116ce:	2d36      	cmp	r5, #54	; 0x36
 80116d0:	bf88      	it	hi
 80116d2:	bd30      	pophi	{r4, r5, pc}
 80116d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80116d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80116dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80116e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80116e4:	d002      	beq.n	80116ec <__adddf3+0x70>
 80116e6:	4240      	negs	r0, r0
 80116e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80116ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80116f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80116f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80116f8:	d002      	beq.n	8011700 <__adddf3+0x84>
 80116fa:	4252      	negs	r2, r2
 80116fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8011700:	ea94 0f05 	teq	r4, r5
 8011704:	f000 80a7 	beq.w	8011856 <__adddf3+0x1da>
 8011708:	f1a4 0401 	sub.w	r4, r4, #1
 801170c:	f1d5 0e20 	rsbs	lr, r5, #32
 8011710:	db0d      	blt.n	801172e <__adddf3+0xb2>
 8011712:	fa02 fc0e 	lsl.w	ip, r2, lr
 8011716:	fa22 f205 	lsr.w	r2, r2, r5
 801171a:	1880      	adds	r0, r0, r2
 801171c:	f141 0100 	adc.w	r1, r1, #0
 8011720:	fa03 f20e 	lsl.w	r2, r3, lr
 8011724:	1880      	adds	r0, r0, r2
 8011726:	fa43 f305 	asr.w	r3, r3, r5
 801172a:	4159      	adcs	r1, r3
 801172c:	e00e      	b.n	801174c <__adddf3+0xd0>
 801172e:	f1a5 0520 	sub.w	r5, r5, #32
 8011732:	f10e 0e20 	add.w	lr, lr, #32
 8011736:	2a01      	cmp	r2, #1
 8011738:	fa03 fc0e 	lsl.w	ip, r3, lr
 801173c:	bf28      	it	cs
 801173e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8011742:	fa43 f305 	asr.w	r3, r3, r5
 8011746:	18c0      	adds	r0, r0, r3
 8011748:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801174c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8011750:	d507      	bpl.n	8011762 <__adddf3+0xe6>
 8011752:	f04f 0e00 	mov.w	lr, #0
 8011756:	f1dc 0c00 	rsbs	ip, ip, #0
 801175a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801175e:	eb6e 0101 	sbc.w	r1, lr, r1
 8011762:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8011766:	d31b      	bcc.n	80117a0 <__adddf3+0x124>
 8011768:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801176c:	d30c      	bcc.n	8011788 <__adddf3+0x10c>
 801176e:	0849      	lsrs	r1, r1, #1
 8011770:	ea5f 0030 	movs.w	r0, r0, rrx
 8011774:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8011778:	f104 0401 	add.w	r4, r4, #1
 801177c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8011780:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8011784:	f080 809a 	bcs.w	80118bc <__adddf3+0x240>
 8011788:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801178c:	bf08      	it	eq
 801178e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8011792:	f150 0000 	adcs.w	r0, r0, #0
 8011796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801179a:	ea41 0105 	orr.w	r1, r1, r5
 801179e:	bd30      	pop	{r4, r5, pc}
 80117a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80117a4:	4140      	adcs	r0, r0
 80117a6:	eb41 0101 	adc.w	r1, r1, r1
 80117aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80117ae:	f1a4 0401 	sub.w	r4, r4, #1
 80117b2:	d1e9      	bne.n	8011788 <__adddf3+0x10c>
 80117b4:	f091 0f00 	teq	r1, #0
 80117b8:	bf04      	itt	eq
 80117ba:	4601      	moveq	r1, r0
 80117bc:	2000      	moveq	r0, #0
 80117be:	fab1 f381 	clz	r3, r1
 80117c2:	bf08      	it	eq
 80117c4:	3320      	addeq	r3, #32
 80117c6:	f1a3 030b 	sub.w	r3, r3, #11
 80117ca:	f1b3 0220 	subs.w	r2, r3, #32
 80117ce:	da0c      	bge.n	80117ea <__adddf3+0x16e>
 80117d0:	320c      	adds	r2, #12
 80117d2:	dd08      	ble.n	80117e6 <__adddf3+0x16a>
 80117d4:	f102 0c14 	add.w	ip, r2, #20
 80117d8:	f1c2 020c 	rsb	r2, r2, #12
 80117dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80117e0:	fa21 f102 	lsr.w	r1, r1, r2
 80117e4:	e00c      	b.n	8011800 <__adddf3+0x184>
 80117e6:	f102 0214 	add.w	r2, r2, #20
 80117ea:	bfd8      	it	le
 80117ec:	f1c2 0c20 	rsble	ip, r2, #32
 80117f0:	fa01 f102 	lsl.w	r1, r1, r2
 80117f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80117f8:	bfdc      	itt	le
 80117fa:	ea41 010c 	orrle.w	r1, r1, ip
 80117fe:	4090      	lslle	r0, r2
 8011800:	1ae4      	subs	r4, r4, r3
 8011802:	bfa2      	ittt	ge
 8011804:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8011808:	4329      	orrge	r1, r5
 801180a:	bd30      	popge	{r4, r5, pc}
 801180c:	ea6f 0404 	mvn.w	r4, r4
 8011810:	3c1f      	subs	r4, #31
 8011812:	da1c      	bge.n	801184e <__adddf3+0x1d2>
 8011814:	340c      	adds	r4, #12
 8011816:	dc0e      	bgt.n	8011836 <__adddf3+0x1ba>
 8011818:	f104 0414 	add.w	r4, r4, #20
 801181c:	f1c4 0220 	rsb	r2, r4, #32
 8011820:	fa20 f004 	lsr.w	r0, r0, r4
 8011824:	fa01 f302 	lsl.w	r3, r1, r2
 8011828:	ea40 0003 	orr.w	r0, r0, r3
 801182c:	fa21 f304 	lsr.w	r3, r1, r4
 8011830:	ea45 0103 	orr.w	r1, r5, r3
 8011834:	bd30      	pop	{r4, r5, pc}
 8011836:	f1c4 040c 	rsb	r4, r4, #12
 801183a:	f1c4 0220 	rsb	r2, r4, #32
 801183e:	fa20 f002 	lsr.w	r0, r0, r2
 8011842:	fa01 f304 	lsl.w	r3, r1, r4
 8011846:	ea40 0003 	orr.w	r0, r0, r3
 801184a:	4629      	mov	r1, r5
 801184c:	bd30      	pop	{r4, r5, pc}
 801184e:	fa21 f004 	lsr.w	r0, r1, r4
 8011852:	4629      	mov	r1, r5
 8011854:	bd30      	pop	{r4, r5, pc}
 8011856:	f094 0f00 	teq	r4, #0
 801185a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801185e:	bf06      	itte	eq
 8011860:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8011864:	3401      	addeq	r4, #1
 8011866:	3d01      	subne	r5, #1
 8011868:	e74e      	b.n	8011708 <__adddf3+0x8c>
 801186a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801186e:	bf18      	it	ne
 8011870:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8011874:	d029      	beq.n	80118ca <__adddf3+0x24e>
 8011876:	ea94 0f05 	teq	r4, r5
 801187a:	bf08      	it	eq
 801187c:	ea90 0f02 	teqeq	r0, r2
 8011880:	d005      	beq.n	801188e <__adddf3+0x212>
 8011882:	ea54 0c00 	orrs.w	ip, r4, r0
 8011886:	bf04      	itt	eq
 8011888:	4619      	moveq	r1, r3
 801188a:	4610      	moveq	r0, r2
 801188c:	bd30      	pop	{r4, r5, pc}
 801188e:	ea91 0f03 	teq	r1, r3
 8011892:	bf1e      	ittt	ne
 8011894:	2100      	movne	r1, #0
 8011896:	2000      	movne	r0, #0
 8011898:	bd30      	popne	{r4, r5, pc}
 801189a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801189e:	d105      	bne.n	80118ac <__adddf3+0x230>
 80118a0:	0040      	lsls	r0, r0, #1
 80118a2:	4149      	adcs	r1, r1
 80118a4:	bf28      	it	cs
 80118a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80118aa:	bd30      	pop	{r4, r5, pc}
 80118ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80118b0:	bf3c      	itt	cc
 80118b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80118b6:	bd30      	popcc	{r4, r5, pc}
 80118b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80118bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80118c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80118c4:	f04f 0000 	mov.w	r0, #0
 80118c8:	bd30      	pop	{r4, r5, pc}
 80118ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80118ce:	bf1a      	itte	ne
 80118d0:	4619      	movne	r1, r3
 80118d2:	4610      	movne	r0, r2
 80118d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80118d8:	bf1c      	itt	ne
 80118da:	460b      	movne	r3, r1
 80118dc:	4602      	movne	r2, r0
 80118de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80118e2:	bf06      	itte	eq
 80118e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80118e8:	ea91 0f03 	teqeq	r1, r3
 80118ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80118f0:	bd30      	pop	{r4, r5, pc}
 80118f2:	bf00      	nop

080118f4 <__aeabi_ui2d>:
 80118f4:	f090 0f00 	teq	r0, #0
 80118f8:	bf04      	itt	eq
 80118fa:	2100      	moveq	r1, #0
 80118fc:	4770      	bxeq	lr
 80118fe:	b530      	push	{r4, r5, lr}
 8011900:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8011904:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8011908:	f04f 0500 	mov.w	r5, #0
 801190c:	f04f 0100 	mov.w	r1, #0
 8011910:	e750      	b.n	80117b4 <__adddf3+0x138>
 8011912:	bf00      	nop

08011914 <__aeabi_i2d>:
 8011914:	f090 0f00 	teq	r0, #0
 8011918:	bf04      	itt	eq
 801191a:	2100      	moveq	r1, #0
 801191c:	4770      	bxeq	lr
 801191e:	b530      	push	{r4, r5, lr}
 8011920:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8011924:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8011928:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801192c:	bf48      	it	mi
 801192e:	4240      	negmi	r0, r0
 8011930:	f04f 0100 	mov.w	r1, #0
 8011934:	e73e      	b.n	80117b4 <__adddf3+0x138>
 8011936:	bf00      	nop

08011938 <__aeabi_f2d>:
 8011938:	0042      	lsls	r2, r0, #1
 801193a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801193e:	ea4f 0131 	mov.w	r1, r1, rrx
 8011942:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8011946:	bf1f      	itttt	ne
 8011948:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801194c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8011950:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8011954:	4770      	bxne	lr
 8011956:	f092 0f00 	teq	r2, #0
 801195a:	bf14      	ite	ne
 801195c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8011960:	4770      	bxeq	lr
 8011962:	b530      	push	{r4, r5, lr}
 8011964:	f44f 7460 	mov.w	r4, #896	; 0x380
 8011968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801196c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011970:	e720      	b.n	80117b4 <__adddf3+0x138>
 8011972:	bf00      	nop

08011974 <__aeabi_ul2d>:
 8011974:	ea50 0201 	orrs.w	r2, r0, r1
 8011978:	bf08      	it	eq
 801197a:	4770      	bxeq	lr
 801197c:	b530      	push	{r4, r5, lr}
 801197e:	f04f 0500 	mov.w	r5, #0
 8011982:	e00a      	b.n	801199a <__aeabi_l2d+0x16>

08011984 <__aeabi_l2d>:
 8011984:	ea50 0201 	orrs.w	r2, r0, r1
 8011988:	bf08      	it	eq
 801198a:	4770      	bxeq	lr
 801198c:	b530      	push	{r4, r5, lr}
 801198e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8011992:	d502      	bpl.n	801199a <__aeabi_l2d+0x16>
 8011994:	4240      	negs	r0, r0
 8011996:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801199a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801199e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80119a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80119a6:	f43f aedc 	beq.w	8011762 <__adddf3+0xe6>
 80119aa:	f04f 0203 	mov.w	r2, #3
 80119ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80119b2:	bf18      	it	ne
 80119b4:	3203      	addne	r2, #3
 80119b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80119ba:	bf18      	it	ne
 80119bc:	3203      	addne	r2, #3
 80119be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80119c2:	f1c2 0320 	rsb	r3, r2, #32
 80119c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80119ca:	fa20 f002 	lsr.w	r0, r0, r2
 80119ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80119d2:	ea40 000e 	orr.w	r0, r0, lr
 80119d6:	fa21 f102 	lsr.w	r1, r1, r2
 80119da:	4414      	add	r4, r2
 80119dc:	e6c1      	b.n	8011762 <__adddf3+0xe6>
 80119de:	bf00      	nop

080119e0 <__aeabi_dmul>:
 80119e0:	b570      	push	{r4, r5, r6, lr}
 80119e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80119e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80119ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80119ee:	bf1d      	ittte	ne
 80119f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80119f4:	ea94 0f0c 	teqne	r4, ip
 80119f8:	ea95 0f0c 	teqne	r5, ip
 80119fc:	f000 f8de 	bleq	8011bbc <__aeabi_dmul+0x1dc>
 8011a00:	442c      	add	r4, r5
 8011a02:	ea81 0603 	eor.w	r6, r1, r3
 8011a06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8011a0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8011a0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8011a12:	bf18      	it	ne
 8011a14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8011a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a20:	d038      	beq.n	8011a94 <__aeabi_dmul+0xb4>
 8011a22:	fba0 ce02 	umull	ip, lr, r0, r2
 8011a26:	f04f 0500 	mov.w	r5, #0
 8011a2a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8011a2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8011a32:	fbe0 e503 	umlal	lr, r5, r0, r3
 8011a36:	f04f 0600 	mov.w	r6, #0
 8011a3a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8011a3e:	f09c 0f00 	teq	ip, #0
 8011a42:	bf18      	it	ne
 8011a44:	f04e 0e01 	orrne.w	lr, lr, #1
 8011a48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8011a4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8011a50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8011a54:	d204      	bcs.n	8011a60 <__aeabi_dmul+0x80>
 8011a56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8011a5a:	416d      	adcs	r5, r5
 8011a5c:	eb46 0606 	adc.w	r6, r6, r6
 8011a60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8011a64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8011a68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8011a6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8011a70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8011a74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8011a78:	bf88      	it	hi
 8011a7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8011a7e:	d81e      	bhi.n	8011abe <__aeabi_dmul+0xde>
 8011a80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8011a84:	bf08      	it	eq
 8011a86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8011a8a:	f150 0000 	adcs.w	r0, r0, #0
 8011a8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8011a92:	bd70      	pop	{r4, r5, r6, pc}
 8011a94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8011a98:	ea46 0101 	orr.w	r1, r6, r1
 8011a9c:	ea40 0002 	orr.w	r0, r0, r2
 8011aa0:	ea81 0103 	eor.w	r1, r1, r3
 8011aa4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8011aa8:	bfc2      	ittt	gt
 8011aaa:	ebd4 050c 	rsbsgt	r5, r4, ip
 8011aae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8011ab2:	bd70      	popgt	{r4, r5, r6, pc}
 8011ab4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011ab8:	f04f 0e00 	mov.w	lr, #0
 8011abc:	3c01      	subs	r4, #1
 8011abe:	f300 80ab 	bgt.w	8011c18 <__aeabi_dmul+0x238>
 8011ac2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8011ac6:	bfde      	ittt	le
 8011ac8:	2000      	movle	r0, #0
 8011aca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8011ace:	bd70      	pople	{r4, r5, r6, pc}
 8011ad0:	f1c4 0400 	rsb	r4, r4, #0
 8011ad4:	3c20      	subs	r4, #32
 8011ad6:	da35      	bge.n	8011b44 <__aeabi_dmul+0x164>
 8011ad8:	340c      	adds	r4, #12
 8011ada:	dc1b      	bgt.n	8011b14 <__aeabi_dmul+0x134>
 8011adc:	f104 0414 	add.w	r4, r4, #20
 8011ae0:	f1c4 0520 	rsb	r5, r4, #32
 8011ae4:	fa00 f305 	lsl.w	r3, r0, r5
 8011ae8:	fa20 f004 	lsr.w	r0, r0, r4
 8011aec:	fa01 f205 	lsl.w	r2, r1, r5
 8011af0:	ea40 0002 	orr.w	r0, r0, r2
 8011af4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8011af8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011afc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8011b00:	fa21 f604 	lsr.w	r6, r1, r4
 8011b04:	eb42 0106 	adc.w	r1, r2, r6
 8011b08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8011b0c:	bf08      	it	eq
 8011b0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8011b12:	bd70      	pop	{r4, r5, r6, pc}
 8011b14:	f1c4 040c 	rsb	r4, r4, #12
 8011b18:	f1c4 0520 	rsb	r5, r4, #32
 8011b1c:	fa00 f304 	lsl.w	r3, r0, r4
 8011b20:	fa20 f005 	lsr.w	r0, r0, r5
 8011b24:	fa01 f204 	lsl.w	r2, r1, r4
 8011b28:	ea40 0002 	orr.w	r0, r0, r2
 8011b2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8011b30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8011b34:	f141 0100 	adc.w	r1, r1, #0
 8011b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8011b3c:	bf08      	it	eq
 8011b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8011b42:	bd70      	pop	{r4, r5, r6, pc}
 8011b44:	f1c4 0520 	rsb	r5, r4, #32
 8011b48:	fa00 f205 	lsl.w	r2, r0, r5
 8011b4c:	ea4e 0e02 	orr.w	lr, lr, r2
 8011b50:	fa20 f304 	lsr.w	r3, r0, r4
 8011b54:	fa01 f205 	lsl.w	r2, r1, r5
 8011b58:	ea43 0302 	orr.w	r3, r3, r2
 8011b5c:	fa21 f004 	lsr.w	r0, r1, r4
 8011b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8011b64:	fa21 f204 	lsr.w	r2, r1, r4
 8011b68:	ea20 0002 	bic.w	r0, r0, r2
 8011b6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8011b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8011b74:	bf08      	it	eq
 8011b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8011b7a:	bd70      	pop	{r4, r5, r6, pc}
 8011b7c:	f094 0f00 	teq	r4, #0
 8011b80:	d10f      	bne.n	8011ba2 <__aeabi_dmul+0x1c2>
 8011b82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8011b86:	0040      	lsls	r0, r0, #1
 8011b88:	eb41 0101 	adc.w	r1, r1, r1
 8011b8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011b90:	bf08      	it	eq
 8011b92:	3c01      	subeq	r4, #1
 8011b94:	d0f7      	beq.n	8011b86 <__aeabi_dmul+0x1a6>
 8011b96:	ea41 0106 	orr.w	r1, r1, r6
 8011b9a:	f095 0f00 	teq	r5, #0
 8011b9e:	bf18      	it	ne
 8011ba0:	4770      	bxne	lr
 8011ba2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8011ba6:	0052      	lsls	r2, r2, #1
 8011ba8:	eb43 0303 	adc.w	r3, r3, r3
 8011bac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8011bb0:	bf08      	it	eq
 8011bb2:	3d01      	subeq	r5, #1
 8011bb4:	d0f7      	beq.n	8011ba6 <__aeabi_dmul+0x1c6>
 8011bb6:	ea43 0306 	orr.w	r3, r3, r6
 8011bba:	4770      	bx	lr
 8011bbc:	ea94 0f0c 	teq	r4, ip
 8011bc0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8011bc4:	bf18      	it	ne
 8011bc6:	ea95 0f0c 	teqne	r5, ip
 8011bca:	d00c      	beq.n	8011be6 <__aeabi_dmul+0x206>
 8011bcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8011bd0:	bf18      	it	ne
 8011bd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8011bd6:	d1d1      	bne.n	8011b7c <__aeabi_dmul+0x19c>
 8011bd8:	ea81 0103 	eor.w	r1, r1, r3
 8011bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8011be0:	f04f 0000 	mov.w	r0, #0
 8011be4:	bd70      	pop	{r4, r5, r6, pc}
 8011be6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8011bea:	bf06      	itte	eq
 8011bec:	4610      	moveq	r0, r2
 8011bee:	4619      	moveq	r1, r3
 8011bf0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8011bf4:	d019      	beq.n	8011c2a <__aeabi_dmul+0x24a>
 8011bf6:	ea94 0f0c 	teq	r4, ip
 8011bfa:	d102      	bne.n	8011c02 <__aeabi_dmul+0x222>
 8011bfc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8011c00:	d113      	bne.n	8011c2a <__aeabi_dmul+0x24a>
 8011c02:	ea95 0f0c 	teq	r5, ip
 8011c06:	d105      	bne.n	8011c14 <__aeabi_dmul+0x234>
 8011c08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8011c0c:	bf1c      	itt	ne
 8011c0e:	4610      	movne	r0, r2
 8011c10:	4619      	movne	r1, r3
 8011c12:	d10a      	bne.n	8011c2a <__aeabi_dmul+0x24a>
 8011c14:	ea81 0103 	eor.w	r1, r1, r3
 8011c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8011c1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8011c20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011c24:	f04f 0000 	mov.w	r0, #0
 8011c28:	bd70      	pop	{r4, r5, r6, pc}
 8011c2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8011c2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8011c32:	bd70      	pop	{r4, r5, r6, pc}

08011c34 <__aeabi_ddiv>:
 8011c34:	b570      	push	{r4, r5, r6, lr}
 8011c36:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8011c3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8011c3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8011c42:	bf1d      	ittte	ne
 8011c44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8011c48:	ea94 0f0c 	teqne	r4, ip
 8011c4c:	ea95 0f0c 	teqne	r5, ip
 8011c50:	f000 f8a7 	bleq	8011da2 <__aeabi_ddiv+0x16e>
 8011c54:	eba4 0405 	sub.w	r4, r4, r5
 8011c58:	ea81 0e03 	eor.w	lr, r1, r3
 8011c5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8011c60:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8011c64:	f000 8088 	beq.w	8011d78 <__aeabi_ddiv+0x144>
 8011c68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8011c6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8011c70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8011c74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8011c78:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8011c7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8011c80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8011c84:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8011c88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8011c8c:	429d      	cmp	r5, r3
 8011c8e:	bf08      	it	eq
 8011c90:	4296      	cmpeq	r6, r2
 8011c92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8011c96:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8011c9a:	d202      	bcs.n	8011ca2 <__aeabi_ddiv+0x6e>
 8011c9c:	085b      	lsrs	r3, r3, #1
 8011c9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8011ca2:	1ab6      	subs	r6, r6, r2
 8011ca4:	eb65 0503 	sbc.w	r5, r5, r3
 8011ca8:	085b      	lsrs	r3, r3, #1
 8011caa:	ea4f 0232 	mov.w	r2, r2, rrx
 8011cae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011cb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8011cb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8011cba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8011cbe:	bf22      	ittt	cs
 8011cc0:	1ab6      	subcs	r6, r6, r2
 8011cc2:	4675      	movcs	r5, lr
 8011cc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8011cc8:	085b      	lsrs	r3, r3, #1
 8011cca:	ea4f 0232 	mov.w	r2, r2, rrx
 8011cce:	ebb6 0e02 	subs.w	lr, r6, r2
 8011cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8011cd6:	bf22      	ittt	cs
 8011cd8:	1ab6      	subcs	r6, r6, r2
 8011cda:	4675      	movcs	r5, lr
 8011cdc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8011ce0:	085b      	lsrs	r3, r3, #1
 8011ce2:	ea4f 0232 	mov.w	r2, r2, rrx
 8011ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 8011cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8011cee:	bf22      	ittt	cs
 8011cf0:	1ab6      	subcs	r6, r6, r2
 8011cf2:	4675      	movcs	r5, lr
 8011cf4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8011cf8:	085b      	lsrs	r3, r3, #1
 8011cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8011cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 8011d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8011d06:	bf22      	ittt	cs
 8011d08:	1ab6      	subcs	r6, r6, r2
 8011d0a:	4675      	movcs	r5, lr
 8011d0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8011d10:	ea55 0e06 	orrs.w	lr, r5, r6
 8011d14:	d018      	beq.n	8011d48 <__aeabi_ddiv+0x114>
 8011d16:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8011d1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8011d1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8011d22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8011d26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8011d2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011d2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8011d32:	d1c0      	bne.n	8011cb6 <__aeabi_ddiv+0x82>
 8011d34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011d38:	d10b      	bne.n	8011d52 <__aeabi_ddiv+0x11e>
 8011d3a:	ea41 0100 	orr.w	r1, r1, r0
 8011d3e:	f04f 0000 	mov.w	r0, #0
 8011d42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8011d46:	e7b6      	b.n	8011cb6 <__aeabi_ddiv+0x82>
 8011d48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011d4c:	bf04      	itt	eq
 8011d4e:	4301      	orreq	r1, r0
 8011d50:	2000      	moveq	r0, #0
 8011d52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8011d56:	bf88      	it	hi
 8011d58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8011d5c:	f63f aeaf 	bhi.w	8011abe <__aeabi_dmul+0xde>
 8011d60:	ebb5 0c03 	subs.w	ip, r5, r3
 8011d64:	bf04      	itt	eq
 8011d66:	ebb6 0c02 	subseq.w	ip, r6, r2
 8011d6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8011d6e:	f150 0000 	adcs.w	r0, r0, #0
 8011d72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8011d76:	bd70      	pop	{r4, r5, r6, pc}
 8011d78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8011d7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8011d80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8011d84:	bfc2      	ittt	gt
 8011d86:	ebd4 050c 	rsbsgt	r5, r4, ip
 8011d8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8011d8e:	bd70      	popgt	{r4, r5, r6, pc}
 8011d90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011d94:	f04f 0e00 	mov.w	lr, #0
 8011d98:	3c01      	subs	r4, #1
 8011d9a:	e690      	b.n	8011abe <__aeabi_dmul+0xde>
 8011d9c:	ea45 0e06 	orr.w	lr, r5, r6
 8011da0:	e68d      	b.n	8011abe <__aeabi_dmul+0xde>
 8011da2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8011da6:	ea94 0f0c 	teq	r4, ip
 8011daa:	bf08      	it	eq
 8011dac:	ea95 0f0c 	teqeq	r5, ip
 8011db0:	f43f af3b 	beq.w	8011c2a <__aeabi_dmul+0x24a>
 8011db4:	ea94 0f0c 	teq	r4, ip
 8011db8:	d10a      	bne.n	8011dd0 <__aeabi_ddiv+0x19c>
 8011dba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8011dbe:	f47f af34 	bne.w	8011c2a <__aeabi_dmul+0x24a>
 8011dc2:	ea95 0f0c 	teq	r5, ip
 8011dc6:	f47f af25 	bne.w	8011c14 <__aeabi_dmul+0x234>
 8011dca:	4610      	mov	r0, r2
 8011dcc:	4619      	mov	r1, r3
 8011dce:	e72c      	b.n	8011c2a <__aeabi_dmul+0x24a>
 8011dd0:	ea95 0f0c 	teq	r5, ip
 8011dd4:	d106      	bne.n	8011de4 <__aeabi_ddiv+0x1b0>
 8011dd6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8011dda:	f43f aefd 	beq.w	8011bd8 <__aeabi_dmul+0x1f8>
 8011dde:	4610      	mov	r0, r2
 8011de0:	4619      	mov	r1, r3
 8011de2:	e722      	b.n	8011c2a <__aeabi_dmul+0x24a>
 8011de4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8011de8:	bf18      	it	ne
 8011dea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8011dee:	f47f aec5 	bne.w	8011b7c <__aeabi_dmul+0x19c>
 8011df2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8011df6:	f47f af0d 	bne.w	8011c14 <__aeabi_dmul+0x234>
 8011dfa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8011dfe:	f47f aeeb 	bne.w	8011bd8 <__aeabi_dmul+0x1f8>
 8011e02:	e712      	b.n	8011c2a <__aeabi_dmul+0x24a>
	...

08011e10 <__gedf2>:
 8011e10:	f04f 3cff 	mov.w	ip, #4294967295
 8011e14:	e006      	b.n	8011e24 <__cmpdf2+0x4>
 8011e16:	bf00      	nop

08011e18 <__ledf2>:
 8011e18:	f04f 0c01 	mov.w	ip, #1
 8011e1c:	e002      	b.n	8011e24 <__cmpdf2+0x4>
 8011e1e:	bf00      	nop

08011e20 <__cmpdf2>:
 8011e20:	f04f 0c01 	mov.w	ip, #1
 8011e24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8011e28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011e2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011e30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011e34:	bf18      	it	ne
 8011e36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8011e3a:	d01b      	beq.n	8011e74 <__cmpdf2+0x54>
 8011e3c:	b001      	add	sp, #4
 8011e3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8011e42:	bf0c      	ite	eq
 8011e44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8011e48:	ea91 0f03 	teqne	r1, r3
 8011e4c:	bf02      	ittt	eq
 8011e4e:	ea90 0f02 	teqeq	r0, r2
 8011e52:	2000      	moveq	r0, #0
 8011e54:	4770      	bxeq	lr
 8011e56:	f110 0f00 	cmn.w	r0, #0
 8011e5a:	ea91 0f03 	teq	r1, r3
 8011e5e:	bf58      	it	pl
 8011e60:	4299      	cmppl	r1, r3
 8011e62:	bf08      	it	eq
 8011e64:	4290      	cmpeq	r0, r2
 8011e66:	bf2c      	ite	cs
 8011e68:	17d8      	asrcs	r0, r3, #31
 8011e6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8011e6e:	f040 0001 	orr.w	r0, r0, #1
 8011e72:	4770      	bx	lr
 8011e74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011e78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011e7c:	d102      	bne.n	8011e84 <__cmpdf2+0x64>
 8011e7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8011e82:	d107      	bne.n	8011e94 <__cmpdf2+0x74>
 8011e84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011e8c:	d1d6      	bne.n	8011e3c <__cmpdf2+0x1c>
 8011e8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8011e92:	d0d3      	beq.n	8011e3c <__cmpdf2+0x1c>
 8011e94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8011e98:	4770      	bx	lr
 8011e9a:	bf00      	nop

08011e9c <__aeabi_cdrcmple>:
 8011e9c:	4684      	mov	ip, r0
 8011e9e:	4610      	mov	r0, r2
 8011ea0:	4662      	mov	r2, ip
 8011ea2:	468c      	mov	ip, r1
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	4663      	mov	r3, ip
 8011ea8:	e000      	b.n	8011eac <__aeabi_cdcmpeq>
 8011eaa:	bf00      	nop

08011eac <__aeabi_cdcmpeq>:
 8011eac:	b501      	push	{r0, lr}
 8011eae:	f7ff ffb7 	bl	8011e20 <__cmpdf2>
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	bf48      	it	mi
 8011eb6:	f110 0f00 	cmnmi.w	r0, #0
 8011eba:	bd01      	pop	{r0, pc}

08011ebc <__aeabi_dcmpeq>:
 8011ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011ec0:	f7ff fff4 	bl	8011eac <__aeabi_cdcmpeq>
 8011ec4:	bf0c      	ite	eq
 8011ec6:	2001      	moveq	r0, #1
 8011ec8:	2000      	movne	r0, #0
 8011eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8011ece:	bf00      	nop

08011ed0 <__aeabi_dcmplt>:
 8011ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011ed4:	f7ff ffea 	bl	8011eac <__aeabi_cdcmpeq>
 8011ed8:	bf34      	ite	cc
 8011eda:	2001      	movcc	r0, #1
 8011edc:	2000      	movcs	r0, #0
 8011ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8011ee2:	bf00      	nop

08011ee4 <__aeabi_dcmple>:
 8011ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011ee8:	f7ff ffe0 	bl	8011eac <__aeabi_cdcmpeq>
 8011eec:	bf94      	ite	ls
 8011eee:	2001      	movls	r0, #1
 8011ef0:	2000      	movhi	r0, #0
 8011ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8011ef6:	bf00      	nop

08011ef8 <__aeabi_dcmpge>:
 8011ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011efc:	f7ff ffce 	bl	8011e9c <__aeabi_cdrcmple>
 8011f00:	bf94      	ite	ls
 8011f02:	2001      	movls	r0, #1
 8011f04:	2000      	movhi	r0, #0
 8011f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8011f0a:	bf00      	nop

08011f0c <__aeabi_dcmpgt>:
 8011f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011f10:	f7ff ffc4 	bl	8011e9c <__aeabi_cdrcmple>
 8011f14:	bf34      	ite	cc
 8011f16:	2001      	movcc	r0, #1
 8011f18:	2000      	movcs	r0, #0
 8011f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8011f1e:	bf00      	nop

08011f20 <__aeabi_d2iz>:
 8011f20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8011f24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8011f28:	d215      	bcs.n	8011f56 <__aeabi_d2iz+0x36>
 8011f2a:	d511      	bpl.n	8011f50 <__aeabi_d2iz+0x30>
 8011f2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8011f30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8011f34:	d912      	bls.n	8011f5c <__aeabi_d2iz+0x3c>
 8011f36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011f3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8011f42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8011f46:	fa23 f002 	lsr.w	r0, r3, r2
 8011f4a:	bf18      	it	ne
 8011f4c:	4240      	negne	r0, r0
 8011f4e:	4770      	bx	lr
 8011f50:	f04f 0000 	mov.w	r0, #0
 8011f54:	4770      	bx	lr
 8011f56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8011f5a:	d105      	bne.n	8011f68 <__aeabi_d2iz+0x48>
 8011f5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8011f60:	bf08      	it	eq
 8011f62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8011f66:	4770      	bx	lr
 8011f68:	f04f 0000 	mov.w	r0, #0
 8011f6c:	4770      	bx	lr
 8011f6e:	bf00      	nop

08011f70 <_ZN5CTask13EnterCriticalEv>:
    inline static void Yeld() { taskYIELD(); }

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void EnterCritical() { taskENTER_CRITICAL(); }
 8011f70:	b580      	push	{r7, lr}
 8011f72:	af00      	add	r7, sp, #0
 8011f74:	f7f0 f8fc 	bl	8002170 <vPortEnterCritical>
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	0000      	movs	r0, r0
	...

08011f80 <_ZN5CTask12ExitCriticalEv>:

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void ExitCritical() { taskEXIT_CRITICAL(); }
 8011f80:	b580      	push	{r7, lr}
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	f7f0 f90a 	bl	800219c <vPortExitCritical>
 8011f88:	bd80      	pop	{r7, pc}
 8011f8a:	bf00      	nop
 8011f8c:	0000      	movs	r0, r0
	...

08011f90 <_ZNK5CTask7IsValidEv>:
	vTaskAllocateMPURegions(m_handleTask, xRegions);
#endif
}

inline
bool CTask::IsValid() const{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
	return m_handleTask != NULL;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	bf0c      	ite	eq
 8011fa0:	2300      	moveq	r3, #0
 8011fa2:	2301      	movne	r3, #1
 8011fa4:	b2db      	uxtb	r3, r3
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f107 070c 	add.w	r7, r7, #12
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bc80      	pop	{r7}
 8011fb0:	4770      	bx	lr
 8011fb2:	bf00      	nop
	...

08011fc0 <_ZN5CTask6DetachEv>:

inline
xGenericHandle CTask::Detach() {
 8011fc0:	b480      	push	{r7}
 8011fc2:	b085      	sub	sp, #20
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
	xTaskHandle res = m_handleTask;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	60fb      	str	r3, [r7, #12]
	m_handleTask = NULL;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f04f 0200 	mov.w	r2, #0
 8011fd4:	605a      	str	r2, [r3, #4]
	return res;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f107 0714 	add.w	r7, r7, #20
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bc80      	pop	{r7}
 8011fe2:	4770      	bx	lr
	...

08011ff0 <_ZN12AManagedTask12HardwareInitEv>:
	 * The framework calls this function before the scheduler start. The default implementation simply return true.
	 * Override this method to perform task specific hardware initialization that does not use FreeRTOS API.
	 *
	 * @return true if success, false otherwise.
	 */
	virtual bool HardwareInit() { return true; }
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	f04f 0301 	mov.w	r3, #1
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f107 070c 	add.w	r7, r7, #12
 8012002:	46bd      	mov	sp, r7
 8012004:	bc80      	pop	{r7}
 8012006:	4770      	bx	lr
	...

08012010 <_ZN12AManagedTask8OnCreateEPKctm>:
	 * @param uxPriority specifies the task priority.
	 *
	 * @return pdTRUE if success, pdFALSE otherwise. If the method return pdFALSE the task creation process
	 * is stopped and no FreeRTOS resource are allocated.
	 */
	virtual portBASE_TYPE OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) { return pdTRUE; }
 8012010:	b480      	push	{r7}
 8012012:	b085      	sub	sp, #20
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	603b      	str	r3, [r7, #0]
 801201c:	4613      	mov	r3, r2
 801201e:	80fb      	strh	r3, [r7, #6]
 8012020:	f04f 0301 	mov.w	r3, #1
 8012024:	4618      	mov	r0, r3
 8012026:	f107 0714 	add.w	r7, r7, #20
 801202a:	46bd      	mov	sp, r7
 801202c:	bc80      	pop	{r7}
 801202e:	4770      	bx	lr

08012030 <_ZN9CFreeRTOS15SuspendAllTasksEv>:
	static void EndScheduler() { vTaskEndScheduler(); }

	/**
	 * \sa <a href="http://www.freertos.org/a00134.html">vTaskSuspendAll</a> FreeRTOS API function.
	 */
	static void SuspendAllTasks() { vTaskSuspendAll(); }
 8012030:	b580      	push	{r7, lr}
 8012032:	af00      	add	r7, sp, #0
 8012034:	f7f0 fdf8 	bl	8002c28 <vTaskSuspendAll>
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	0000      	movs	r0, r0
	...

08012040 <_ZN9CFreeRTOS14ResumeAllTasksEv>:

	/**
	 * \sa <a href="http://www.freertos.org/a00135.html">xTaskResumeAll</a> FreeRTOS API function.
	 */
	static signed portBASE_TYPE ResumeAllTasks() { return xTaskResumeAll(); }
 8012040:	b580      	push	{r7, lr}
 8012042:	af00      	add	r7, sp, #0
 8012044:	f7f0 fe02 	bl	8002c4c <xTaskResumeAll>
 8012048:	4603      	mov	r3, r0
 801204a:	4618      	mov	r0, r3
 801204c:	bd80      	pop	{r7, pc}
 801204e:	bf00      	nop

08012050 <_ZN12IFreeRTOSObjC1Ev>:
#ifndef IFREERTOSPROTOCOL_H_
#define IFREERTOSPROTOCOL_H_

typedef void *xGenericHandle;

class IFreeRTOSObj {
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	4a04      	ldr	r2, [pc, #16]	; (801206c <_ZN12IFreeRTOSObjC1Ev+0x1c>)
 801205c:	601a      	str	r2, [r3, #0]
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	4618      	mov	r0, r3
 8012062:	f107 070c 	add.w	r7, r7, #12
 8012066:	46bd      	mov	sp, r7
 8012068:	bc80      	pop	{r7}
 801206a:	4770      	bx	lr
 801206c:	08014598 	.word	0x08014598

08012070 <_ZN9CFreeRTOS14StartSchedulerEv>:
	~CFreeRTOS();

	/**
	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function.
	 */
	static void StartScheduler() { vTaskStartScheduler(); }
 8012070:	b580      	push	{r7, lr}
 8012072:	af00      	add	r7, sp, #0
 8012074:	f7f0 fd8a 	bl	8002b8c <vTaskStartScheduler>
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	0000      	movs	r0, r0
	...

08012080 <__aeabi_atexit>:
 8012080:	4603      	mov	r3, r0
 8012082:	4608      	mov	r0, r1
 8012084:	4619      	mov	r1, r3
 8012086:	f7f8 bd3b 	b.w	800ab00 <__cxa_atexit>
 801208a:	bf00      	nop
 801208c:	0000      	movs	r0, r0
	...

08012090 <_ZdlPv>:
 8012090:	b108      	cbz	r0, 8012096 <_ZdlPv+0x6>
 8012092:	f7f8 bfbd 	b.w	800b010 <free>
 8012096:	4770      	bx	lr
	...

080120a0 <__cxa_pure_virtual>:
 80120a0:	f244 51b0 	movw	r1, #17840	; 0x45b0
 80120a4:	221b      	movs	r2, #27
 80120a6:	b508      	push	{r3, lr}
 80120a8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80120ac:	2002      	movs	r0, #2
 80120ae:	f7fb fb2f 	bl	800d710 <write>
 80120b2:	f000 f81d 	bl	80120f0 <_ZSt9terminatev>
 80120b6:	bf00      	nop
	...

080120c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80120c0:	b508      	push	{r3, lr}
 80120c2:	4780      	blx	r0
 80120c4:	f7f8 fcec 	bl	800aaa0 <abort>
 80120c8:	f000 fa8a 	bl	80125e0 <__cxa_begin_catch>
 80120cc:	f7f8 fce8 	bl	800aaa0 <abort>
 80120d0:	460c      	mov	r4, r1
 80120d2:	4605      	mov	r5, r0
 80120d4:	f000 facc 	bl	8012670 <__cxa_end_catch>
 80120d8:	3401      	adds	r4, #1
 80120da:	d001      	beq.n	80120e0 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 80120dc:	f000 f8b8 	bl	8012250 <__cxa_end_cleanup>
 80120e0:	4628      	mov	r0, r5
 80120e2:	f000 f9ed 	bl	80124c0 <__cxa_call_unexpected>
 80120e6:	bf00      	nop
	...

080120f0 <_ZSt9terminatev>:
 80120f0:	b508      	push	{r3, lr}
 80120f2:	f640 1308 	movw	r3, #2312	; 0x908
 80120f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80120fa:	6818      	ldr	r0, [r3, #0]
 80120fc:	f7ff ffe0 	bl	80120c0 <_ZN10__cxxabiv111__terminateEPFvvE>

08012100 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8012100:	b508      	push	{r3, lr}
 8012102:	4780      	blx	r0
 8012104:	f7ff fff4 	bl	80120f0 <_ZSt9terminatev>
	...

08012110 <_ZSt10unexpectedv>:
 8012110:	b508      	push	{r3, lr}
 8012112:	f640 130c 	movw	r3, #2316	; 0x90c
 8012116:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	4798      	blx	r3
 801211e:	f7ff ffe7 	bl	80120f0 <_ZSt9terminatev>
 8012122:	bf00      	nop
	...

08012130 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 8012130:	4b3e      	ldr	r3, [pc, #248]	; (801222c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8012132:	b570      	push	{r4, r5, r6, lr}
 8012134:	b082      	sub	sp, #8
 8012136:	781a      	ldrb	r2, [r3, #0]
 8012138:	2a00      	cmp	r2, #0
 801213a:	d135      	bne.n	80121a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 801213c:	2401      	movs	r4, #1
 801213e:	701c      	strb	r4, [r3, #0]
 8012140:	f000 fe96 	bl	8012e70 <__cxa_current_exception_type>
 8012144:	2800      	cmp	r0, #0
 8012146:	d047      	beq.n	80121d8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa8>
 8012148:	6845      	ldr	r5, [r0, #4]
 801214a:	f04f 36ff 	mov.w	r6, #4294967295
 801214e:	782b      	ldrb	r3, [r5, #0]
 8012150:	2b2a      	cmp	r3, #42	; 0x2a
 8012152:	ab02      	add	r3, sp, #8
 8012154:	bf08      	it	eq
 8012156:	192d      	addeq	r5, r5, r4
 8012158:	2100      	movs	r1, #0
 801215a:	460a      	mov	r2, r1
 801215c:	f843 6d04 	str.w	r6, [r3, #-4]!
 8012160:	4628      	mov	r0, r5
 8012162:	4c33      	ldr	r4, [pc, #204]	; (8012230 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8012164:	f7f7 fc30 	bl	80099c8 <__cxa_demangle>
 8012168:	2101      	movs	r1, #1
 801216a:	2230      	movs	r2, #48	; 0x30
 801216c:	6823      	ldr	r3, [r4, #0]
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	4606      	mov	r6, r0
 8012172:	4830      	ldr	r0, [pc, #192]	; (8012234 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8012174:	f7f8 ff2a 	bl	800afcc <fwrite>
 8012178:	9b01      	ldr	r3, [sp, #4]
 801217a:	b17b      	cbz	r3, 801219c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 801217c:	6823      	ldr	r3, [r4, #0]
 801217e:	4628      	mov	r0, r5
 8012180:	68d9      	ldr	r1, [r3, #12]
 8012182:	f7f8 fd45 	bl	800ac10 <fputs>
 8012186:	6823      	ldr	r3, [r4, #0]
 8012188:	2101      	movs	r1, #1
 801218a:	482b      	ldr	r0, [pc, #172]	; (8012238 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 801218c:	2202      	movs	r2, #2
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	f7f8 ff1c 	bl	800afcc <fwrite>
 8012194:	9b01      	ldr	r3, [sp, #4]
 8012196:	b18b      	cbz	r3, 80121bc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8012198:	f000 fe32 	bl	8012e00 <__cxa_rethrow>
 801219c:	6823      	ldr	r3, [r4, #0]
 801219e:	4630      	mov	r0, r6
 80121a0:	68d9      	ldr	r1, [r3, #12]
 80121a2:	f7f8 fd35 	bl	800ac10 <fputs>
 80121a6:	e7ee      	b.n	8012186 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 80121a8:	4b21      	ldr	r3, [pc, #132]	; (8012230 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 80121aa:	2101      	movs	r1, #1
 80121ac:	221d      	movs	r2, #29
 80121ae:	4823      	ldr	r0, [pc, #140]	; (801223c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	f7f8 ff0a 	bl	800afcc <fwrite>
 80121b8:	f7f8 fc72 	bl	800aaa0 <abort>
 80121bc:	4630      	mov	r0, r6
 80121be:	f7f8 ff27 	bl	800b010 <free>
 80121c2:	f000 fe1d 	bl	8012e00 <__cxa_rethrow>
 80121c6:	2901      	cmp	r1, #1
 80121c8:	460e      	mov	r6, r1
 80121ca:	d00f      	beq.n	80121ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
 80121cc:	f000 fa08 	bl	80125e0 <__cxa_begin_catch>
 80121d0:	f000 fa4e 	bl	8012670 <__cxa_end_catch>
 80121d4:	f7f8 fc64 	bl	800aaa0 <abort>
 80121d8:	4b15      	ldr	r3, [pc, #84]	; (8012230 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 80121da:	4621      	mov	r1, r4
 80121dc:	222d      	movs	r2, #45	; 0x2d
 80121de:	4818      	ldr	r0, [pc, #96]	; (8012240 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	68db      	ldr	r3, [r3, #12]
 80121e4:	f7f8 fef2 	bl	800afcc <fwrite>
 80121e8:	f7f8 fc5a 	bl	800aaa0 <abort>
 80121ec:	f000 f9f8 	bl	80125e0 <__cxa_begin_catch>
 80121f0:	4603      	mov	r3, r0
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	689b      	ldr	r3, [r3, #8]
 80121f6:	4798      	blx	r3
 80121f8:	6823      	ldr	r3, [r4, #0]
 80121fa:	4631      	mov	r1, r6
 80121fc:	220b      	movs	r2, #11
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	4605      	mov	r5, r0
 8012202:	4810      	ldr	r0, [pc, #64]	; (8012244 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
 8012204:	f7f8 fee2 	bl	800afcc <fwrite>
 8012208:	6823      	ldr	r3, [r4, #0]
 801220a:	4628      	mov	r0, r5
 801220c:	68d9      	ldr	r1, [r3, #12]
 801220e:	f7f8 fcff 	bl	800ac10 <fputs>
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	200a      	movs	r0, #10
 8012216:	68d9      	ldr	r1, [r3, #12]
 8012218:	f7f8 fcbc 	bl	800ab94 <fputc>
 801221c:	f000 fa28 	bl	8012670 <__cxa_end_catch>
 8012220:	e7d8      	b.n	80121d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 8012222:	f000 fa25 	bl	8012670 <__cxa_end_catch>
 8012226:	f000 f813 	bl	8012250 <__cxa_end_cleanup>
 801222a:	bf00      	nop
 801222c:	20000ac4 	.word	0x20000ac4
 8012230:	20000048 	.word	0x20000048
 8012234:	080145f0 	.word	0x080145f0
 8012238:	08014624 	.word	0x08014624
 801223c:	080145d0 	.word	0x080145d0
 8012240:	08014628 	.word	0x08014628
 8012244:	08014658 	.word	0x08014658
	...

08012250 <__cxa_end_cleanup>:
 8012250:	b41e      	push	{r1, r2, r3, r4}
 8012252:	f000 f8b5 	bl	80123c0 <__gnu_end_cleanup>
 8012256:	bc1e      	pop	{r1, r2, r3, r4}
 8012258:	f7f8 f9e8 	bl	800a62c <_Unwind_Resume>
 801225c:	0000      	movs	r0, r0
	...

08012260 <__cxa_type_match>:
 8012260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012262:	461e      	mov	r6, r3
 8012264:	7803      	ldrb	r3, [r0, #0]
 8012266:	b083      	sub	sp, #12
 8012268:	460d      	mov	r5, r1
 801226a:	2b47      	cmp	r3, #71	; 0x47
 801226c:	d02c      	beq.n	80122c8 <__cxa_type_match+0x68>
 801226e:	4c31      	ldr	r4, [pc, #196]	; (8012334 <__cxa_type_match+0xd4>)
 8012270:	6823      	ldr	r3, [r4, #0]
 8012272:	4620      	mov	r0, r4
 8012274:	6832      	ldr	r2, [r6, #0]
 8012276:	689b      	ldr	r3, [r3, #8]
 8012278:	9201      	str	r2, [sp, #4]
 801227a:	4798      	blx	r3
 801227c:	b110      	cbz	r0, 8012284 <__cxa_type_match+0x24>
 801227e:	9b01      	ldr	r3, [sp, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	9301      	str	r3, [sp, #4]
 8012284:	682f      	ldr	r7, [r5, #0]
 8012286:	4628      	mov	r0, r5
 8012288:	4621      	mov	r1, r4
 801228a:	aa01      	add	r2, sp, #4
 801228c:	2301      	movs	r3, #1
 801228e:	693f      	ldr	r7, [r7, #16]
 8012290:	47b8      	blx	r7
 8012292:	b1b8      	cbz	r0, 80122c4 <__cxa_type_match+0x64>
 8012294:	9b01      	ldr	r3, [sp, #4]
 8012296:	4a28      	ldr	r2, [pc, #160]	; (8012338 <__cxa_type_match+0xd8>)
 8012298:	6033      	str	r3, [r6, #0]
 801229a:	6812      	ldr	r2, [r2, #0]
 801229c:	682b      	ldr	r3, [r5, #0]
 801229e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80122a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80122a6:	f000 ff33 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 80122aa:	b150      	cbz	r0, 80122c2 <__cxa_type_match+0x62>
 80122ac:	68eb      	ldr	r3, [r5, #12]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d03e      	beq.n	8012330 <__cxa_type_match+0xd0>
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4921      	ldr	r1, [pc, #132]	; (801233c <__cxa_type_match+0xdc>)
 80122b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80122ba:	f000 ff29 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d022      	beq.n	8012308 <__cxa_type_match+0xa8>
 80122c2:	2001      	movs	r0, #1
 80122c4:	b003      	add	sp, #12
 80122c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122c8:	7843      	ldrb	r3, [r0, #1]
 80122ca:	2b4e      	cmp	r3, #78	; 0x4e
 80122cc:	d1cf      	bne.n	801226e <__cxa_type_match+0xe>
 80122ce:	7883      	ldrb	r3, [r0, #2]
 80122d0:	2b55      	cmp	r3, #85	; 0x55
 80122d2:	d1cc      	bne.n	801226e <__cxa_type_match+0xe>
 80122d4:	78c3      	ldrb	r3, [r0, #3]
 80122d6:	2b43      	cmp	r3, #67	; 0x43
 80122d8:	d1c9      	bne.n	801226e <__cxa_type_match+0xe>
 80122da:	7903      	ldrb	r3, [r0, #4]
 80122dc:	2b46      	cmp	r3, #70	; 0x46
 80122de:	d01c      	beq.n	801231a <__cxa_type_match+0xba>
 80122e0:	7903      	ldrb	r3, [r0, #4]
 80122e2:	2b43      	cmp	r3, #67	; 0x43
 80122e4:	d1c3      	bne.n	801226e <__cxa_type_match+0xe>
 80122e6:	7943      	ldrb	r3, [r0, #5]
 80122e8:	2b2b      	cmp	r3, #43	; 0x2b
 80122ea:	d1c0      	bne.n	801226e <__cxa_type_match+0xe>
 80122ec:	7983      	ldrb	r3, [r0, #6]
 80122ee:	2b2b      	cmp	r3, #43	; 0x2b
 80122f0:	d1bd      	bne.n	801226e <__cxa_type_match+0xe>
 80122f2:	79c3      	ldrb	r3, [r0, #7]
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d8ba      	bhi.n	801226e <__cxa_type_match+0xe>
 80122f8:	bf0a      	itet	eq
 80122fa:	f850 3c20 	ldreq.w	r3, [r0, #-32]
 80122fe:	f850 4c20 	ldrne.w	r4, [r0, #-32]
 8012302:	f853 4c78 	ldreq.w	r4, [r3, #-120]
 8012306:	e7b3      	b.n	8012270 <__cxa_type_match+0x10>
 8012308:	68e8      	ldr	r0, [r5, #12]
 801230a:	68e1      	ldr	r1, [r4, #12]
 801230c:	f000 ff00 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 8012310:	2800      	cmp	r0, #0
 8012312:	bf0c      	ite	eq
 8012314:	2002      	moveq	r0, #2
 8012316:	2001      	movne	r0, #1
 8012318:	e7d4      	b.n	80122c4 <__cxa_type_match+0x64>
 801231a:	7943      	ldrb	r3, [r0, #5]
 801231c:	2b4f      	cmp	r3, #79	; 0x4f
 801231e:	d1df      	bne.n	80122e0 <__cxa_type_match+0x80>
 8012320:	7983      	ldrb	r3, [r0, #6]
 8012322:	2b52      	cmp	r3, #82	; 0x52
 8012324:	d1dc      	bne.n	80122e0 <__cxa_type_match+0x80>
 8012326:	79c3      	ldrb	r3, [r0, #7]
 8012328:	4c05      	ldr	r4, [pc, #20]	; (8012340 <__cxa_type_match+0xe0>)
 801232a:	2b00      	cmp	r3, #0
 801232c:	d0a0      	beq.n	8012270 <__cxa_type_match+0x10>
 801232e:	e7d7      	b.n	80122e0 <__cxa_type_match+0x80>
 8012330:	f000 f886 	bl	8012440 <__cxa_bad_typeid>
 8012334:	08014730 	.word	0x08014730
 8012338:	080147a0 	.word	0x080147a0
 801233c:	080147b0 	.word	0x080147b0
 8012340:	08014690 	.word	0x08014690
	...

08012350 <__cxa_begin_cleanup>:
 8012350:	b510      	push	{r4, lr}
 8012352:	4604      	mov	r4, r0
 8012354:	f000 fa1c 	bl	8012790 <__cxa_get_globals>
 8012358:	f1a4 0220 	sub.w	r2, r4, #32
 801235c:	7823      	ldrb	r3, [r4, #0]
 801235e:	2b47      	cmp	r3, #71	; 0x47
 8012360:	d005      	beq.n	801236e <__cxa_begin_cleanup+0x1e>
 8012362:	6883      	ldr	r3, [r0, #8]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d124      	bne.n	80123b2 <__cxa_begin_cleanup+0x62>
 8012368:	6082      	str	r2, [r0, #8]
 801236a:	2001      	movs	r0, #1
 801236c:	bd10      	pop	{r4, pc}
 801236e:	7863      	ldrb	r3, [r4, #1]
 8012370:	2b4e      	cmp	r3, #78	; 0x4e
 8012372:	d1f6      	bne.n	8012362 <__cxa_begin_cleanup+0x12>
 8012374:	78a3      	ldrb	r3, [r4, #2]
 8012376:	2b55      	cmp	r3, #85	; 0x55
 8012378:	d1f3      	bne.n	8012362 <__cxa_begin_cleanup+0x12>
 801237a:	78e3      	ldrb	r3, [r4, #3]
 801237c:	2b43      	cmp	r3, #67	; 0x43
 801237e:	d1f0      	bne.n	8012362 <__cxa_begin_cleanup+0x12>
 8012380:	7923      	ldrb	r3, [r4, #4]
 8012382:	2b43      	cmp	r3, #67	; 0x43
 8012384:	d1ed      	bne.n	8012362 <__cxa_begin_cleanup+0x12>
 8012386:	7963      	ldrb	r3, [r4, #5]
 8012388:	2b2b      	cmp	r3, #43	; 0x2b
 801238a:	d1ea      	bne.n	8012362 <__cxa_begin_cleanup+0x12>
 801238c:	79a3      	ldrb	r3, [r4, #6]
 801238e:	2b2b      	cmp	r3, #43	; 0x2b
 8012390:	d1e7      	bne.n	8012362 <__cxa_begin_cleanup+0x12>
 8012392:	79e3      	ldrb	r3, [r4, #7]
 8012394:	2b01      	cmp	r3, #1
 8012396:	d8e4      	bhi.n	8012362 <__cxa_begin_cleanup+0x12>
 8012398:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801239c:	3301      	adds	r3, #1
 801239e:	f844 3c04 	str.w	r3, [r4, #-4]
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d1e1      	bne.n	801236a <__cxa_begin_cleanup+0x1a>
 80123a6:	6883      	ldr	r3, [r0, #8]
 80123a8:	f844 3c08 	str.w	r3, [r4, #-8]
 80123ac:	6082      	str	r2, [r0, #8]
 80123ae:	2001      	movs	r0, #1
 80123b0:	bd10      	pop	{r4, pc}
 80123b2:	f7ff fe9d 	bl	80120f0 <_ZSt9terminatev>
 80123b6:	bf00      	nop
	...

080123c0 <__gnu_end_cleanup>:
 80123c0:	b508      	push	{r3, lr}
 80123c2:	f000 f9e5 	bl	8012790 <__cxa_get_globals>
 80123c6:	6883      	ldr	r3, [r0, #8]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d030      	beq.n	801242e <__gnu_end_cleanup+0x6e>
 80123cc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80123d0:	2a47      	cmp	r2, #71	; 0x47
 80123d2:	d004      	beq.n	80123de <__gnu_end_cleanup+0x1e>
 80123d4:	2200      	movs	r2, #0
 80123d6:	6082      	str	r2, [r0, #8]
 80123d8:	f103 0020 	add.w	r0, r3, #32
 80123dc:	bd08      	pop	{r3, pc}
 80123de:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80123e2:	2a4e      	cmp	r2, #78	; 0x4e
 80123e4:	d1f6      	bne.n	80123d4 <__gnu_end_cleanup+0x14>
 80123e6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80123ea:	2a55      	cmp	r2, #85	; 0x55
 80123ec:	d1f2      	bne.n	80123d4 <__gnu_end_cleanup+0x14>
 80123ee:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80123f2:	2a43      	cmp	r2, #67	; 0x43
 80123f4:	d1ee      	bne.n	80123d4 <__gnu_end_cleanup+0x14>
 80123f6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80123fa:	2a43      	cmp	r2, #67	; 0x43
 80123fc:	d1ea      	bne.n	80123d4 <__gnu_end_cleanup+0x14>
 80123fe:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8012402:	2a2b      	cmp	r2, #43	; 0x2b
 8012404:	d1e6      	bne.n	80123d4 <__gnu_end_cleanup+0x14>
 8012406:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801240a:	2a2b      	cmp	r2, #43	; 0x2b
 801240c:	d1e2      	bne.n	80123d4 <__gnu_end_cleanup+0x14>
 801240e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8012412:	2a01      	cmp	r2, #1
 8012414:	d8de      	bhi.n	80123d4 <__gnu_end_cleanup+0x14>
 8012416:	69da      	ldr	r2, [r3, #28]
 8012418:	3a01      	subs	r2, #1
 801241a:	61da      	str	r2, [r3, #28]
 801241c:	2a00      	cmp	r2, #0
 801241e:	d1db      	bne.n	80123d8 <__gnu_end_cleanup+0x18>
 8012420:	699a      	ldr	r2, [r3, #24]
 8012422:	6082      	str	r2, [r0, #8]
 8012424:	2200      	movs	r2, #0
 8012426:	f103 0020 	add.w	r0, r3, #32
 801242a:	619a      	str	r2, [r3, #24]
 801242c:	bd08      	pop	{r3, pc}
 801242e:	f7ff fe5f 	bl	80120f0 <_ZSt9terminatev>
 8012432:	bf00      	nop
	...

08012440 <__cxa_bad_typeid>:
 8012440:	b508      	push	{r3, lr}
 8012442:	2004      	movs	r0, #4
 8012444:	f000 ff44 	bl	80132d0 <__cxa_allocate_exception>
 8012448:	4b05      	ldr	r3, [pc, #20]	; (8012460 <__cxa_bad_typeid+0x20>)
 801244a:	f644 1180 	movw	r1, #18816	; 0x4980
 801244e:	f243 1271 	movw	r2, #12657	; 0x3171
 8012452:	f6c0 0101 	movt	r1, #2049	; 0x801
 8012456:	f6c0 0201 	movt	r2, #2049	; 0x801
 801245a:	6003      	str	r3, [r0, #0]
 801245c:	f000 fc90 	bl	8012d80 <__cxa_throw>
 8012460:	08014968 	.word	0x08014968
	...

08012470 <__cxa_call_terminate>:
 8012470:	b510      	push	{r4, lr}
 8012472:	4604      	mov	r4, r0
 8012474:	b120      	cbz	r0, 8012480 <__cxa_call_terminate+0x10>
 8012476:	f000 f8b3 	bl	80125e0 <__cxa_begin_catch>
 801247a:	7823      	ldrb	r3, [r4, #0]
 801247c:	2b47      	cmp	r3, #71	; 0x47
 801247e:	d001      	beq.n	8012484 <__cxa_call_terminate+0x14>
 8012480:	f7ff fe36 	bl	80120f0 <_ZSt9terminatev>
 8012484:	7863      	ldrb	r3, [r4, #1]
 8012486:	2b4e      	cmp	r3, #78	; 0x4e
 8012488:	d1fa      	bne.n	8012480 <__cxa_call_terminate+0x10>
 801248a:	78a3      	ldrb	r3, [r4, #2]
 801248c:	2b55      	cmp	r3, #85	; 0x55
 801248e:	d1f7      	bne.n	8012480 <__cxa_call_terminate+0x10>
 8012490:	78e3      	ldrb	r3, [r4, #3]
 8012492:	2b43      	cmp	r3, #67	; 0x43
 8012494:	d1f4      	bne.n	8012480 <__cxa_call_terminate+0x10>
 8012496:	7923      	ldrb	r3, [r4, #4]
 8012498:	2b43      	cmp	r3, #67	; 0x43
 801249a:	d1f1      	bne.n	8012480 <__cxa_call_terminate+0x10>
 801249c:	7963      	ldrb	r3, [r4, #5]
 801249e:	2b2b      	cmp	r3, #43	; 0x2b
 80124a0:	d1ee      	bne.n	8012480 <__cxa_call_terminate+0x10>
 80124a2:	79a3      	ldrb	r3, [r4, #6]
 80124a4:	2b2b      	cmp	r3, #43	; 0x2b
 80124a6:	d1eb      	bne.n	8012480 <__cxa_call_terminate+0x10>
 80124a8:	79e3      	ldrb	r3, [r4, #7]
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d8e8      	bhi.n	8012480 <__cxa_call_terminate+0x10>
 80124ae:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80124b2:	f7ff fe05 	bl	80120c0 <_ZN10__cxxabiv111__terminateEPFvvE>
 80124b6:	bf00      	nop
	...

080124c0 <__cxa_call_unexpected>:
 80124c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c4:	b085      	sub	sp, #20
 80124c6:	7803      	ldrb	r3, [r0, #0]
 80124c8:	2b47      	cmp	r3, #71	; 0x47
 80124ca:	d010      	beq.n	80124ee <__cxa_call_unexpected+0x2e>
 80124cc:	2400      	movs	r4, #0
 80124ce:	f04f 0801 	mov.w	r8, #1
 80124d2:	46a1      	mov	r9, r4
 80124d4:	4625      	mov	r5, r4
 80124d6:	4626      	mov	r6, r4
 80124d8:	4627      	mov	r7, r4
 80124da:	f000 f881 	bl	80125e0 <__cxa_begin_catch>
 80124de:	f1b8 0f00 	cmp.w	r8, #0
 80124e2:	d001      	beq.n	80124e8 <__cxa_call_unexpected+0x28>
 80124e4:	f7ff fe14 	bl	8012110 <_ZSt10unexpectedv>
 80124e8:	4648      	mov	r0, r9
 80124ea:	f7ff fe09 	bl	8012100 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 80124ee:	7843      	ldrb	r3, [r0, #1]
 80124f0:	2b4e      	cmp	r3, #78	; 0x4e
 80124f2:	d1eb      	bne.n	80124cc <__cxa_call_unexpected+0xc>
 80124f4:	7883      	ldrb	r3, [r0, #2]
 80124f6:	2b55      	cmp	r3, #85	; 0x55
 80124f8:	d1e8      	bne.n	80124cc <__cxa_call_unexpected+0xc>
 80124fa:	78c3      	ldrb	r3, [r0, #3]
 80124fc:	2b43      	cmp	r3, #67	; 0x43
 80124fe:	d1e5      	bne.n	80124cc <__cxa_call_unexpected+0xc>
 8012500:	7903      	ldrb	r3, [r0, #4]
 8012502:	2b43      	cmp	r3, #67	; 0x43
 8012504:	d1e2      	bne.n	80124cc <__cxa_call_unexpected+0xc>
 8012506:	7943      	ldrb	r3, [r0, #5]
 8012508:	2b2b      	cmp	r3, #43	; 0x2b
 801250a:	d1df      	bne.n	80124cc <__cxa_call_unexpected+0xc>
 801250c:	7983      	ldrb	r3, [r0, #6]
 801250e:	2b2b      	cmp	r3, #43	; 0x2b
 8012510:	d1dc      	bne.n	80124cc <__cxa_call_unexpected+0xc>
 8012512:	79c3      	ldrb	r3, [r0, #7]
 8012514:	2b01      	cmp	r3, #1
 8012516:	d8d9      	bhi.n	80124cc <__cxa_call_unexpected+0xc>
 8012518:	f850 9c18 	ldr.w	r9, [r0, #-24]
 801251c:	f04f 0800 	mov.w	r8, #0
 8012520:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8012524:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8012526:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8012528:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801252a:	e7d6      	b.n	80124da <__cxa_call_unexpected+0x1a>
 801252c:	f000 f858 	bl	80125e0 <__cxa_begin_catch>
 8012530:	f000 f926 	bl	8012780 <__cxa_get_globals_fast>
 8012534:	6803      	ldr	r3, [r0, #0]
 8012536:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801253a:	2a01      	cmp	r2, #1
 801253c:	bf18      	it	ne
 801253e:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 8012542:	d100      	bne.n	8012546 <__cxa_call_unexpected+0x86>
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	f04f 0900 	mov.w	r9, #0
 801254a:	f10d 0a10 	add.w	sl, sp, #16
 801254e:	46a8      	mov	r8, r5
 8012550:	46cb      	mov	fp, r9
 8012552:	f026 0603 	bic.w	r6, r6, #3
 8012556:	3320      	adds	r3, #32
 8012558:	9600      	str	r6, [sp, #0]
 801255a:	f84a 2d04 	str.w	r2, [sl, #-4]!
 801255e:	9301      	str	r3, [sp, #4]
 8012560:	455f      	cmp	r7, fp
 8012562:	dd1e      	ble.n	80125a2 <__cxa_call_unexpected+0xe2>
 8012564:	f8d8 5000 	ldr.w	r5, [r8]
 8012568:	b105      	cbz	r5, 801256c <__cxa_call_unexpected+0xac>
 801256a:	4445      	add	r5, r8
 801256c:	9801      	ldr	r0, [sp, #4]
 801256e:	4629      	mov	r1, r5
 8012570:	2200      	movs	r2, #0
 8012572:	4653      	mov	r3, sl
 8012574:	f7ff fe74 	bl	8012260 <__cxa_type_match>
 8012578:	4602      	mov	r2, r0
 801257a:	b9f0      	cbnz	r0, 80125ba <__cxa_call_unexpected+0xfa>
 801257c:	682b      	ldr	r3, [r5, #0]
 801257e:	4628      	mov	r0, r5
 8012580:	4913      	ldr	r1, [pc, #76]	; (80125d0 <__cxa_call_unexpected+0x110>)
 8012582:	691e      	ldr	r6, [r3, #16]
 8012584:	2301      	movs	r3, #1
 8012586:	47b0      	blx	r6
 8012588:	9b00      	ldr	r3, [sp, #0]
 801258a:	f10b 0b01 	add.w	fp, fp, #1
 801258e:	2800      	cmp	r0, #0
 8012590:	bf18      	it	ne
 8012592:	f04f 0901 	movne.w	r9, #1
 8012596:	4498      	add	r8, r3
 8012598:	e7e2      	b.n	8012560 <__cxa_call_unexpected+0xa0>
 801259a:	f000 f821 	bl	80125e0 <__cxa_begin_catch>
 801259e:	f7ff fda7 	bl	80120f0 <_ZSt9terminatev>
 80125a2:	f1b9 0f00 	cmp.w	r9, #0
 80125a6:	d010      	beq.n	80125ca <__cxa_call_unexpected+0x10a>
 80125a8:	2004      	movs	r0, #4
 80125aa:	f000 fe91 	bl	80132d0 <__cxa_allocate_exception>
 80125ae:	4b09      	ldr	r3, [pc, #36]	; (80125d4 <__cxa_call_unexpected+0x114>)
 80125b0:	4907      	ldr	r1, [pc, #28]	; (80125d0 <__cxa_call_unexpected+0x110>)
 80125b2:	4a09      	ldr	r2, [pc, #36]	; (80125d8 <__cxa_call_unexpected+0x118>)
 80125b4:	6003      	str	r3, [r0, #0]
 80125b6:	f000 fbe3 	bl	8012d80 <__cxa_throw>
 80125ba:	f000 fc21 	bl	8012e00 <__cxa_rethrow>
 80125be:	f000 f857 	bl	8012670 <__cxa_end_catch>
 80125c2:	f000 f855 	bl	8012670 <__cxa_end_catch>
 80125c6:	f7ff fe43 	bl	8012250 <__cxa_end_cleanup>
 80125ca:	4620      	mov	r0, r4
 80125cc:	f7ff fd78 	bl	80120c0 <_ZN10__cxxabiv111__terminateEPFvvE>
 80125d0:	08014790 	.word	0x08014790
 80125d4:	08014748 	.word	0x08014748
 80125d8:	08012711 	.word	0x08012711
 80125dc:	00000000 	.word	0x00000000

080125e0 <__cxa_begin_catch>:
 80125e0:	b538      	push	{r3, r4, r5, lr}
 80125e2:	4605      	mov	r5, r0
 80125e4:	f000 f8d4 	bl	8012790 <__cxa_get_globals>
 80125e8:	f1a5 0320 	sub.w	r3, r5, #32
 80125ec:	782a      	ldrb	r2, [r5, #0]
 80125ee:	2a47      	cmp	r2, #71	; 0x47
 80125f0:	6804      	ldr	r4, [r0, #0]
 80125f2:	d004      	beq.n	80125fe <__cxa_begin_catch+0x1e>
 80125f4:	2c00      	cmp	r4, #0
 80125f6:	d12f      	bne.n	8012658 <__cxa_begin_catch+0x78>
 80125f8:	6003      	str	r3, [r0, #0]
 80125fa:	4620      	mov	r0, r4
 80125fc:	bd38      	pop	{r3, r4, r5, pc}
 80125fe:	786a      	ldrb	r2, [r5, #1]
 8012600:	2a4e      	cmp	r2, #78	; 0x4e
 8012602:	d1f7      	bne.n	80125f4 <__cxa_begin_catch+0x14>
 8012604:	78aa      	ldrb	r2, [r5, #2]
 8012606:	2a55      	cmp	r2, #85	; 0x55
 8012608:	d1f4      	bne.n	80125f4 <__cxa_begin_catch+0x14>
 801260a:	78ea      	ldrb	r2, [r5, #3]
 801260c:	2a43      	cmp	r2, #67	; 0x43
 801260e:	d1f1      	bne.n	80125f4 <__cxa_begin_catch+0x14>
 8012610:	792a      	ldrb	r2, [r5, #4]
 8012612:	2a43      	cmp	r2, #67	; 0x43
 8012614:	d1ee      	bne.n	80125f4 <__cxa_begin_catch+0x14>
 8012616:	796a      	ldrb	r2, [r5, #5]
 8012618:	2a2b      	cmp	r2, #43	; 0x2b
 801261a:	d1eb      	bne.n	80125f4 <__cxa_begin_catch+0x14>
 801261c:	79aa      	ldrb	r2, [r5, #6]
 801261e:	2a2b      	cmp	r2, #43	; 0x2b
 8012620:	d1e8      	bne.n	80125f4 <__cxa_begin_catch+0x14>
 8012622:	79ea      	ldrb	r2, [r5, #7]
 8012624:	2a01      	cmp	r2, #1
 8012626:	d8e5      	bhi.n	80125f4 <__cxa_begin_catch+0x14>
 8012628:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 801262c:	2900      	cmp	r1, #0
 801262e:	db10      	blt.n	8012652 <__cxa_begin_catch+0x72>
 8012630:	3101      	adds	r1, #1
 8012632:	6842      	ldr	r2, [r0, #4]
 8012634:	f845 1c0c 	str.w	r1, [r5, #-12]
 8012638:	3a01      	subs	r2, #1
 801263a:	42a3      	cmp	r3, r4
 801263c:	6042      	str	r2, [r0, #4]
 801263e:	bf1c      	itt	ne
 8012640:	f845 4c10 	strne.w	r4, [r5, #-16]
 8012644:	6003      	strne	r3, [r0, #0]
 8012646:	4628      	mov	r0, r5
 8012648:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 801264a:	f7f7 ff17 	bl	800a47c <_Unwind_Complete>
 801264e:	4620      	mov	r0, r4
 8012650:	bd38      	pop	{r3, r4, r5, pc}
 8012652:	f1c1 0101 	rsb	r1, r1, #1
 8012656:	e7ec      	b.n	8012632 <__cxa_begin_catch+0x52>
 8012658:	f7ff fd4a 	bl	80120f0 <_ZSt9terminatev>
 801265c:	3101      	adds	r1, #1
 801265e:	d001      	beq.n	8012664 <__cxa_begin_catch+0x84>
 8012660:	f7ff fdf6 	bl	8012250 <__cxa_end_cleanup>
 8012664:	f7ff ff2c 	bl	80124c0 <__cxa_call_unexpected>
	...

08012670 <__cxa_end_catch>:
 8012670:	b508      	push	{r3, lr}
 8012672:	f000 f885 	bl	8012780 <__cxa_get_globals_fast>
 8012676:	6803      	ldr	r3, [r0, #0]
 8012678:	4602      	mov	r2, r0
 801267a:	2b00      	cmp	r3, #0
 801267c:	d03f      	beq.n	80126fe <__cxa_end_catch+0x8e>
 801267e:	f893 1020 	ldrb.w	r1, [r3, #32]
 8012682:	2947      	cmp	r1, #71	; 0x47
 8012684:	d007      	beq.n	8012696 <__cxa_end_catch+0x26>
 8012686:	f103 0020 	add.w	r0, r3, #32
 801268a:	2300      	movs	r3, #0
 801268c:	6013      	str	r3, [r2, #0]
 801268e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012692:	f7f7 bef5 	b.w	800a480 <_Unwind_DeleteException>
 8012696:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 801269a:	294e      	cmp	r1, #78	; 0x4e
 801269c:	d1f3      	bne.n	8012686 <__cxa_end_catch+0x16>
 801269e:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80126a2:	2955      	cmp	r1, #85	; 0x55
 80126a4:	d1ef      	bne.n	8012686 <__cxa_end_catch+0x16>
 80126a6:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 80126aa:	2943      	cmp	r1, #67	; 0x43
 80126ac:	d1eb      	bne.n	8012686 <__cxa_end_catch+0x16>
 80126ae:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 80126b2:	2943      	cmp	r1, #67	; 0x43
 80126b4:	d1e7      	bne.n	8012686 <__cxa_end_catch+0x16>
 80126b6:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 80126ba:	292b      	cmp	r1, #43	; 0x2b
 80126bc:	d1e3      	bne.n	8012686 <__cxa_end_catch+0x16>
 80126be:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 80126c2:	292b      	cmp	r1, #43	; 0x2b
 80126c4:	d1df      	bne.n	8012686 <__cxa_end_catch+0x16>
 80126c6:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 80126ca:	2901      	cmp	r1, #1
 80126cc:	d8db      	bhi.n	8012686 <__cxa_end_catch+0x16>
 80126ce:	6959      	ldr	r1, [r3, #20]
 80126d0:	2900      	cmp	r1, #0
 80126d2:	db05      	blt.n	80126e0 <__cxa_end_catch+0x70>
 80126d4:	3901      	subs	r1, #1
 80126d6:	d008      	beq.n	80126ea <__cxa_end_catch+0x7a>
 80126d8:	1c4a      	adds	r2, r1, #1
 80126da:	d00e      	beq.n	80126fa <__cxa_end_catch+0x8a>
 80126dc:	6159      	str	r1, [r3, #20]
 80126de:	bd08      	pop	{r3, pc}
 80126e0:	3101      	adds	r1, #1
 80126e2:	d1fb      	bne.n	80126dc <__cxa_end_catch+0x6c>
 80126e4:	6918      	ldr	r0, [r3, #16]
 80126e6:	6010      	str	r0, [r2, #0]
 80126e8:	e7f8      	b.n	80126dc <__cxa_end_catch+0x6c>
 80126ea:	6919      	ldr	r1, [r3, #16]
 80126ec:	f103 0020 	add.w	r0, r3, #32
 80126f0:	6011      	str	r1, [r2, #0]
 80126f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80126f6:	f7f7 bec3 	b.w	800a480 <_Unwind_DeleteException>
 80126fa:	f7ff fcf9 	bl	80120f0 <_ZSt9terminatev>
 80126fe:	bd08      	pop	{r3, pc}

08012700 <_ZNSt9exceptionD1Ev>:
 8012700:	4b01      	ldr	r3, [pc, #4]	; (8012708 <_ZNSt9exceptionD1Ev+0x8>)
 8012702:	6003      	str	r3, [r0, #0]
 8012704:	4770      	bx	lr
 8012706:	bf00      	nop
 8012708:	08014678 	.word	0x08014678
 801270c:	00000000 	.word	0x00000000

08012710 <_ZNSt13bad_exceptionD1Ev>:
 8012710:	4b01      	ldr	r3, [pc, #4]	; (8012718 <_ZNSt13bad_exceptionD1Ev+0x8>)
 8012712:	6003      	str	r3, [r0, #0]
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	08014678 	.word	0x08014678
 801271c:	00000000 	.word	0x00000000

08012720 <_ZNKSt9exception4whatEv>:
 8012720:	f244 60d0 	movw	r0, #18128	; 0x46d0
 8012724:	f6c0 0001 	movt	r0, #2049	; 0x801
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop
 801272c:	0000      	movs	r0, r0
	...

08012730 <_ZNKSt13bad_exception4whatEv>:
 8012730:	f244 60e0 	movw	r0, #18144	; 0x46e0
 8012734:	f6c0 0001 	movt	r0, #2049	; 0x801
 8012738:	4770      	bx	lr
 801273a:	bf00      	nop
 801273c:	0000      	movs	r0, r0
	...

08012740 <_ZNSt13bad_exceptionD0Ev>:
 8012740:	4b03      	ldr	r3, [pc, #12]	; (8012750 <_ZNSt13bad_exceptionD0Ev+0x10>)
 8012742:	b510      	push	{r4, lr}
 8012744:	4604      	mov	r4, r0
 8012746:	6003      	str	r3, [r0, #0]
 8012748:	f7ff fca2 	bl	8012090 <_ZdlPv>
 801274c:	4620      	mov	r0, r4
 801274e:	bd10      	pop	{r4, pc}
 8012750:	08014678 	.word	0x08014678
	...

08012760 <_ZNSt9exceptionD0Ev>:
 8012760:	4b03      	ldr	r3, [pc, #12]	; (8012770 <_ZNSt9exceptionD0Ev+0x10>)
 8012762:	b510      	push	{r4, lr}
 8012764:	4604      	mov	r4, r0
 8012766:	6003      	str	r3, [r0, #0]
 8012768:	f7ff fc92 	bl	8012090 <_ZdlPv>
 801276c:	4620      	mov	r0, r4
 801276e:	bd10      	pop	{r4, pc}
 8012770:	08014678 	.word	0x08014678
	...

08012780 <__cxa_get_globals_fast>:
 8012780:	f640 20c8 	movw	r0, #2760	; 0xac8
 8012784:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012788:	4770      	bx	lr
 801278a:	bf00      	nop
 801278c:	0000      	movs	r0, r0
	...

08012790 <__cxa_get_globals>:
 8012790:	f640 20c8 	movw	r0, #2760	; 0xac8
 8012794:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012798:	4770      	bx	lr
 801279a:	bf00      	nop
 801279c:	0000      	movs	r0, r0
	...

080127a0 <_ZL12read_sleb128PKhPl>:
 80127a0:	2300      	movs	r3, #0
 80127a2:	b470      	push	{r4, r5, r6}
 80127a4:	461a      	mov	r2, r3
 80127a6:	4604      	mov	r4, r0
 80127a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80127ac:	f005 067f 	and.w	r6, r5, #127	; 0x7f
 80127b0:	4620      	mov	r0, r4
 80127b2:	4096      	lsls	r6, r2
 80127b4:	3207      	adds	r2, #7
 80127b6:	f015 0f80 	tst.w	r5, #128	; 0x80
 80127ba:	ea43 0306 	orr.w	r3, r3, r6
 80127be:	d1f3      	bne.n	80127a8 <_ZL12read_sleb128PKhPl+0x8>
 80127c0:	2a1f      	cmp	r2, #31
 80127c2:	d807      	bhi.n	80127d4 <_ZL12read_sleb128PKhPl+0x34>
 80127c4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80127c8:	d004      	beq.n	80127d4 <_ZL12read_sleb128PKhPl+0x34>
 80127ca:	f04f 34ff 	mov.w	r4, #4294967295
 80127ce:	fa14 f202 	lsls.w	r2, r4, r2
 80127d2:	4313      	orrs	r3, r2
 80127d4:	600b      	str	r3, [r1, #0]
 80127d6:	bc70      	pop	{r4, r5, r6}
 80127d8:	4770      	bx	lr
 80127da:	bf00      	nop
 80127dc:	0000      	movs	r0, r0
	...

080127e0 <_ZL28read_encoded_value_with_basehjPKhPj>:
 80127e0:	2850      	cmp	r0, #80	; 0x50
 80127e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127e4:	4604      	mov	r4, r0
 80127e6:	b085      	sub	sp, #20
 80127e8:	460d      	mov	r5, r1
 80127ea:	d053      	beq.n	8012894 <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
 80127ec:	f000 010f 	and.w	r1, r0, #15
 80127f0:	290c      	cmp	r1, #12
 80127f2:	d837      	bhi.n	8012864 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 80127f4:	e8df f001 	tbb	[pc, r1]
 80127f8:	07483807 	.word	0x07483807
 80127fc:	36363620 	.word	0x36363620
 8012800:	07252c36 	.word	0x07252c36
 8012804:	20          	.byte	0x20
 8012805:	00          	.byte	0x00
 8012806:	f892 c001 	ldrb.w	ip, [r2, #1]
 801280a:	1d10      	adds	r0, r2, #4
 801280c:	7811      	ldrb	r1, [r2, #0]
 801280e:	7897      	ldrb	r7, [r2, #2]
 8012810:	78d6      	ldrb	r6, [r2, #3]
 8012812:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 8012816:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 801281a:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 801281e:	b141      	cbz	r1, 8012832 <_ZL28read_encoded_value_with_basehjPKhPj+0x52>
 8012820:	f004 0670 	and.w	r6, r4, #112	; 0x70
 8012824:	2e10      	cmp	r6, #16
 8012826:	bf08      	it	eq
 8012828:	4615      	moveq	r5, r2
 801282a:	0622      	lsls	r2, r4, #24
 801282c:	4429      	add	r1, r5
 801282e:	bf48      	it	mi
 8012830:	6809      	ldrmi	r1, [r1, #0]
 8012832:	6019      	str	r1, [r3, #0]
 8012834:	b005      	add	sp, #20
 8012836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012838:	f892 c001 	ldrb.w	ip, [r2, #1]
 801283c:	f102 0008 	add.w	r0, r2, #8
 8012840:	e7e4      	b.n	801280c <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 8012842:	7856      	ldrb	r6, [r2, #1]
 8012844:	1c90      	adds	r0, r2, #2
 8012846:	7811      	ldrb	r1, [r2, #0]
 8012848:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 801284c:	b209      	sxth	r1, r1
 801284e:	e7e6      	b.n	801281e <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8012850:	4610      	mov	r0, r2
 8012852:	a903      	add	r1, sp, #12
 8012854:	9201      	str	r2, [sp, #4]
 8012856:	9300      	str	r3, [sp, #0]
 8012858:	f7ff ffa2 	bl	80127a0 <_ZL12read_sleb128PKhPl>
 801285c:	9903      	ldr	r1, [sp, #12]
 801285e:	9a01      	ldr	r2, [sp, #4]
 8012860:	9b00      	ldr	r3, [sp, #0]
 8012862:	e7dc      	b.n	801281e <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8012864:	f7f8 f91c 	bl	800aaa0 <abort>
 8012868:	2100      	movs	r1, #0
 801286a:	4610      	mov	r0, r2
 801286c:	460e      	mov	r6, r1
 801286e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8012872:	f007 0c7f 	and.w	ip, r7, #127	; 0x7f
 8012876:	fa0c fc06 	lsl.w	ip, ip, r6
 801287a:	3607      	adds	r6, #7
 801287c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8012880:	ea41 010c 	orr.w	r1, r1, ip
 8012884:	d1f3      	bne.n	801286e <_ZL28read_encoded_value_with_basehjPKhPj+0x8e>
 8012886:	e7ca      	b.n	801281e <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8012888:	7856      	ldrb	r6, [r2, #1]
 801288a:	1c90      	adds	r0, r2, #2
 801288c:	7811      	ldrb	r1, [r2, #0]
 801288e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8012892:	e7c4      	b.n	801281e <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8012894:	1cd0      	adds	r0, r2, #3
 8012896:	f020 0003 	bic.w	r0, r0, #3
 801289a:	f850 1b04 	ldr.w	r1, [r0], #4
 801289e:	e7c8      	b.n	8012832 <_ZL28read_encoded_value_with_basehjPKhPj+0x52>

080128a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80128a0:	28ff      	cmp	r0, #255	; 0xff
 80128a2:	b508      	push	{r3, lr}
 80128a4:	d00d      	beq.n	80128c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 80128a6:	f000 0370 	and.w	r3, r0, #112	; 0x70
 80128aa:	2b20      	cmp	r3, #32
 80128ac:	d019      	beq.n	80128e2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
 80128ae:	dd07      	ble.n	80128c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 80128b0:	2b40      	cmp	r3, #64	; 0x40
 80128b2:	d011      	beq.n	80128d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 80128b4:	2b50      	cmp	r3, #80	; 0x50
 80128b6:	d004      	beq.n	80128c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 80128b8:	2b30      	cmp	r3, #48	; 0x30
 80128ba:	d008      	beq.n	80128ce <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 80128bc:	f7f8 f8f0 	bl	800aaa0 <abort>
 80128c0:	b90b      	cbnz	r3, 80128c6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 80128c2:	2000      	movs	r0, #0
 80128c4:	bd08      	pop	{r3, pc}
 80128c6:	2b10      	cmp	r3, #16
 80128c8:	d0fb      	beq.n	80128c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 80128ca:	f7f8 f8e9 	bl	800aaa0 <abort>
 80128ce:	4608      	mov	r0, r1
 80128d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80128d4:	f7f8 b8d6 	b.w	800aa84 <_Unwind_GetDataRelBase>
 80128d8:	4608      	mov	r0, r1
 80128da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80128de:	f7f8 b8c1 	b.w	800aa64 <_Unwind_GetRegionStart>
 80128e2:	4608      	mov	r0, r1
 80128e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80128e8:	f7f8 b8d0 	b.w	800aa8c <_Unwind_GetTextRelBase>
 80128ec:	0000      	movs	r0, r0
	...

080128f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>:
 80128f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128f2:	4605      	mov	r5, r0
 80128f4:	460e      	mov	r6, r1
 80128f6:	4614      	mov	r4, r2
 80128f8:	b10d      	cbz	r5, 80128fe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0xe>
 80128fa:	f7f8 f8b3 	bl	800aa64 <_Unwind_GetRegionStart>
 80128fe:	6020      	str	r0, [r4, #0]
 8012900:	f816 7b01 	ldrb.w	r7, [r6], #1
 8012904:	2fff      	cmp	r7, #255	; 0xff
 8012906:	bf08      	it	eq
 8012908:	6060      	streq	r0, [r4, #4]
 801290a:	d00a      	beq.n	8012922 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x32>
 801290c:	4629      	mov	r1, r5
 801290e:	4638      	mov	r0, r7
 8012910:	f7ff ffc6 	bl	80128a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012914:	4632      	mov	r2, r6
 8012916:	1d23      	adds	r3, r4, #4
 8012918:	4601      	mov	r1, r0
 801291a:	4638      	mov	r0, r7
 801291c:	f7ff ff60 	bl	80127e0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8012920:	4606      	mov	r6, r0
 8012922:	f816 3b01 	ldrb.w	r3, [r6], #1
 8012926:	2bff      	cmp	r3, #255	; 0xff
 8012928:	7523      	strb	r3, [r4, #20]
 801292a:	d023      	beq.n	8012974 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x84>
 801292c:	2000      	movs	r0, #0
 801292e:	4602      	mov	r2, r0
 8012930:	4633      	mov	r3, r6
 8012932:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012936:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 801293a:	461e      	mov	r6, r3
 801293c:	4095      	lsls	r5, r2
 801293e:	3207      	adds	r2, #7
 8012940:	0609      	lsls	r1, r1, #24
 8012942:	ea40 0005 	orr.w	r0, r0, r5
 8012946:	d4f3      	bmi.n	8012930 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x40>
 8012948:	1818      	adds	r0, r3, r0
 801294a:	60e0      	str	r0, [r4, #12]
 801294c:	2100      	movs	r1, #0
 801294e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8012952:	460b      	mov	r3, r1
 8012954:	7562      	strb	r2, [r4, #21]
 8012956:	4630      	mov	r0, r6
 8012958:	f810 2b01 	ldrb.w	r2, [r0], #1
 801295c:	f002 057f 	and.w	r5, r2, #127	; 0x7f
 8012960:	4606      	mov	r6, r0
 8012962:	409d      	lsls	r5, r3
 8012964:	3307      	adds	r3, #7
 8012966:	0612      	lsls	r2, r2, #24
 8012968:	ea41 0105 	orr.w	r1, r1, r5
 801296c:	d4f3      	bmi.n	8012956 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x66>
 801296e:	1841      	adds	r1, r0, r1
 8012970:	6121      	str	r1, [r4, #16]
 8012972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012974:	2300      	movs	r3, #0
 8012976:	60e3      	str	r3, [r4, #12]
 8012978:	e7e8      	b.n	801294c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x5c>
 801297a:	bf00      	nop
 801297c:	0000      	movs	r0, r0
	...

08012980 <__gxx_personality_v0>:
 8012980:	f000 0303 	and.w	r3, r0, #3
 8012984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012988:	2400      	movs	r4, #0
 801298a:	b093      	sub	sp, #76	; 0x4c
 801298c:	2b01      	cmp	r3, #1
 801298e:	4688      	mov	r8, r1
 8012990:	4617      	mov	r7, r2
 8012992:	940b      	str	r4, [sp, #44]	; 0x2c
 8012994:	f000 80b2 	beq.w	8012afc <__gxx_personality_v0+0x17c>
 8012998:	2b02      	cmp	r3, #2
 801299a:	f000 80a4 	beq.w	8012ae6 <__gxx_personality_v0+0x166>
 801299e:	f000 0608 	and.w	r6, r0, #8
 80129a2:	f04f 0a01 	mov.w	sl, #1
 80129a6:	ad0e      	add	r5, sp, #56	; 0x38
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	f040 8085 	bne.w	8012ab8 <__gxx_personality_v0+0x138>
 80129ae:	2100      	movs	r1, #0
 80129b0:	220c      	movs	r2, #12
 80129b2:	460b      	mov	r3, r1
 80129b4:	4638      	mov	r0, r7
 80129b6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80129ba:	ea46 0a0a 	orr.w	sl, r6, sl
 80129be:	9500      	str	r5, [sp, #0]
 80129c0:	f7f7 fa22 	bl	8009e08 <_Unwind_VRS_Set>
 80129c4:	4638      	mov	r0, r7
 80129c6:	f7f8 f853 	bl	800aa70 <_Unwind_GetLanguageSpecificData>
 80129ca:	4681      	mov	r9, r0
 80129cc:	2800      	cmp	r0, #0
 80129ce:	f000 808a 	beq.w	8012ae6 <__gxx_personality_v0+0x166>
 80129d2:	4601      	mov	r1, r0
 80129d4:	aa05      	add	r2, sp, #20
 80129d6:	4638      	mov	r0, r7
 80129d8:	f7ff ff8a 	bl	80128f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 80129dc:	4639      	mov	r1, r7
 80129de:	4604      	mov	r4, r0
 80129e0:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 80129e4:	f7ff ff5c 	bl	80128a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80129e8:	2100      	movs	r1, #0
 80129ea:	460b      	mov	r3, r1
 80129ec:	220f      	movs	r2, #15
 80129ee:	9500      	str	r5, [sp, #0]
 80129f0:	4606      	mov	r6, r0
 80129f2:	4638      	mov	r0, r7
 80129f4:	9607      	str	r6, [sp, #28]
 80129f6:	f7f7 f9e1 	bl	8009dbc <_Unwind_VRS_Get>
 80129fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80129fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129fe:	f026 0601 	bic.w	r6, r6, #1
 8012a02:	3e01      	subs	r6, #1
 8012a04:	429c      	cmp	r4, r3
 8012a06:	d23a      	bcs.n	8012a7e <__gxx_personality_v0+0xfe>
 8012a08:	f89d b029 	ldrb.w	fp, [sp, #41]	; 0x29
 8012a0c:	2100      	movs	r1, #0
 8012a0e:	4658      	mov	r0, fp
 8012a10:	f7ff ff46 	bl	80128a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012a14:	4622      	mov	r2, r4
 8012a16:	ab0c      	add	r3, sp, #48	; 0x30
 8012a18:	4601      	mov	r1, r0
 8012a1a:	4658      	mov	r0, fp
 8012a1c:	f7ff fee0 	bl	80127e0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8012a20:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 8012a24:	2100      	movs	r1, #0
 8012a26:	4683      	mov	fp, r0
 8012a28:	4620      	mov	r0, r4
 8012a2a:	f7ff ff39 	bl	80128a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012a2e:	465a      	mov	r2, fp
 8012a30:	ab0d      	add	r3, sp, #52	; 0x34
 8012a32:	4601      	mov	r1, r0
 8012a34:	4620      	mov	r0, r4
 8012a36:	f7ff fed3 	bl	80127e0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8012a3a:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 8012a3e:	2100      	movs	r1, #0
 8012a40:	4683      	mov	fp, r0
 8012a42:	4620      	mov	r0, r4
 8012a44:	f7ff ff2c 	bl	80128a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012a48:	462b      	mov	r3, r5
 8012a4a:	465a      	mov	r2, fp
 8012a4c:	4601      	mov	r1, r0
 8012a4e:	4620      	mov	r0, r4
 8012a50:	f7ff fec6 	bl	80127e0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8012a54:	2100      	movs	r1, #0
 8012a56:	460b      	mov	r3, r1
 8012a58:	4604      	mov	r4, r0
 8012a5a:	f814 2b01 	ldrb.w	r2, [r4], #1
 8012a5e:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 8012a62:	4098      	lsls	r0, r3
 8012a64:	3307      	adds	r3, #7
 8012a66:	4301      	orrs	r1, r0
 8012a68:	0610      	lsls	r0, r2, #24
 8012a6a:	d4f6      	bmi.n	8012a5a <__gxx_personality_v0+0xda>
 8012a6c:	9b05      	ldr	r3, [sp, #20]
 8012a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a70:	18d3      	adds	r3, r2, r3
 8012a72:	429e      	cmp	r6, r3
 8012a74:	d222      	bcs.n	8012abc <__gxx_personality_v0+0x13c>
 8012a76:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012a78:	4623      	mov	r3, r4
 8012a7a:	429c      	cmp	r4, r3
 8012a7c:	d3c4      	bcc.n	8012a08 <__gxx_personality_v0+0x88>
 8012a7e:	2400      	movs	r4, #0
 8012a80:	2601      	movs	r6, #1
 8012a82:	46a3      	mov	fp, r4
 8012a84:	f01a 0f01 	tst.w	sl, #1
 8012a88:	d061      	beq.n	8012b4e <__gxx_personality_v0+0x1ce>
 8012a8a:	2e02      	cmp	r6, #2
 8012a8c:	d02b      	beq.n	8012ae6 <__gxx_personality_v0+0x166>
 8012a8e:	2100      	movs	r1, #0
 8012a90:	4638      	mov	r0, r7
 8012a92:	460b      	mov	r3, r1
 8012a94:	220d      	movs	r2, #13
 8012a96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8012a98:	9500      	str	r5, [sp, #0]
 8012a9a:	f7f7 f98f 	bl	8009dbc <_Unwind_VRS_Get>
 8012a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012aa0:	2006      	movs	r0, #6
 8012aa2:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
 8012aa6:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 8012aaa:	f8c8 3020 	str.w	r3, [r8, #32]
 8012aae:	f8c8 902c 	str.w	r9, [r8, #44]	; 0x2c
 8012ab2:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
 8012ab6:	e01e      	b.n	8012af6 <__gxx_personality_v0+0x176>
 8012ab8:	f7f7 fff2 	bl	800aaa0 <abort>
 8012abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012abe:	189b      	adds	r3, r3, r2
 8012ac0:	429e      	cmp	r6, r3
 8012ac2:	d301      	bcc.n	8012ac8 <__gxx_personality_v0+0x148>
 8012ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ac6:	e79d      	b.n	8012a04 <__gxx_personality_v0+0x84>
 8012ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012aca:	469b      	mov	fp, r3
 8012acc:	b113      	cbz	r3, 8012ad4 <__gxx_personality_v0+0x154>
 8012ace:	9a06      	ldr	r2, [sp, #24]
 8012ad0:	eb03 0b02 	add.w	fp, r3, r2
 8012ad4:	4608      	mov	r0, r1
 8012ad6:	b111      	cbz	r1, 8012ade <__gxx_personality_v0+0x15e>
 8012ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ada:	3901      	subs	r1, #1
 8012adc:	1840      	adds	r0, r0, r1
 8012ade:	f1bb 0f00 	cmp.w	fp, #0
 8012ae2:	f040 808c 	bne.w	8012bfe <__gxx_personality_v0+0x27e>
 8012ae6:	4640      	mov	r0, r8
 8012ae8:	4639      	mov	r1, r7
 8012aea:	f7f7 ffa5 	bl	800aa38 <__gnu_unwind_frame>
 8012aee:	2800      	cmp	r0, #0
 8012af0:	bf0c      	ite	eq
 8012af2:	2008      	moveq	r0, #8
 8012af4:	2009      	movne	r0, #9
 8012af6:	b013      	add	sp, #76	; 0x4c
 8012af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012afc:	f010 0608 	ands.w	r6, r0, #8
 8012b00:	bf18      	it	ne
 8012b02:	ad0e      	addne	r5, sp, #56	; 0x38
 8012b04:	d002      	beq.n	8012b0c <__gxx_personality_v0+0x18c>
 8012b06:	f04f 0a02 	mov.w	sl, #2
 8012b0a:	e750      	b.n	80129ae <__gxx_personality_v0+0x2e>
 8012b0c:	4610      	mov	r0, r2
 8012b0e:	4633      	mov	r3, r6
 8012b10:	220d      	movs	r2, #13
 8012b12:	4631      	mov	r1, r6
 8012b14:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8012b18:	ad0e      	add	r5, sp, #56	; 0x38
 8012b1a:	9500      	str	r5, [sp, #0]
 8012b1c:	f7f7 f94e 	bl	8009dbc <_Unwind_VRS_Get>
 8012b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b22:	429c      	cmp	r4, r3
 8012b24:	d1ef      	bne.n	8012b06 <__gxx_personality_v0+0x186>
 8012b26:	f108 0428 	add.w	r4, r8, #40	; 0x28
 8012b2a:	4631      	mov	r1, r6
 8012b2c:	4633      	mov	r3, r6
 8012b2e:	4638      	mov	r0, r7
 8012b30:	220c      	movs	r2, #12
 8012b32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012b36:	9500      	str	r5, [sp, #0]
 8012b38:	f7f7 f966 	bl	8009e08 <_Unwind_VRS_Set>
 8012b3c:	e894 0a10 	ldmia.w	r4, {r4, r9, fp}
 8012b40:	2603      	movs	r6, #3
 8012b42:	f1bb 0f00 	cmp.w	fp, #0
 8012b46:	d13a      	bne.n	8012bbe <__gxx_personality_v0+0x23e>
 8012b48:	4640      	mov	r0, r8
 8012b4a:	f7ff fc91 	bl	8012470 <__cxa_call_terminate>
 8012b4e:	f01a 0f08 	tst.w	sl, #8
 8012b52:	d032      	beq.n	8012bba <__gxx_personality_v0+0x23a>
 8012b54:	2e01      	cmp	r6, #1
 8012b56:	f000 80e3 	beq.w	8012d20 <__gxx_personality_v0+0x3a0>
 8012b5a:	2c00      	cmp	r4, #0
 8012b5c:	f2c0 80e2 	blt.w	8012d24 <__gxx_personality_v0+0x3a4>
 8012b60:	2100      	movs	r1, #0
 8012b62:	4638      	mov	r0, r7
 8012b64:	460a      	mov	r2, r1
 8012b66:	460b      	mov	r3, r1
 8012b68:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012b6c:	9500      	str	r5, [sp, #0]
 8012b6e:	f7f7 f94b 	bl	8009e08 <_Unwind_VRS_Set>
 8012b72:	2100      	movs	r1, #0
 8012b74:	2201      	movs	r2, #1
 8012b76:	460b      	mov	r3, r1
 8012b78:	4638      	mov	r0, r7
 8012b7a:	940e      	str	r4, [sp, #56]	; 0x38
 8012b7c:	9500      	str	r5, [sp, #0]
 8012b7e:	f7f7 f943 	bl	8009e08 <_Unwind_VRS_Set>
 8012b82:	2100      	movs	r1, #0
 8012b84:	220f      	movs	r2, #15
 8012b86:	460b      	mov	r3, r1
 8012b88:	4638      	mov	r0, r7
 8012b8a:	9500      	str	r5, [sp, #0]
 8012b8c:	f7f7 f916 	bl	8009dbc <_Unwind_VRS_Get>
 8012b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b92:	2100      	movs	r1, #0
 8012b94:	220f      	movs	r2, #15
 8012b96:	4638      	mov	r0, r7
 8012b98:	f003 0301 	and.w	r3, r3, #1
 8012b9c:	9500      	str	r5, [sp, #0]
 8012b9e:	ea4b 0303 	orr.w	r3, fp, r3
 8012ba2:	930e      	str	r3, [sp, #56]	; 0x38
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	f7f7 f92f 	bl	8009e08 <_Unwind_VRS_Set>
 8012baa:	2007      	movs	r0, #7
 8012bac:	2e02      	cmp	r6, #2
 8012bae:	d1a2      	bne.n	8012af6 <__gxx_personality_v0+0x176>
 8012bb0:	4640      	mov	r0, r8
 8012bb2:	f7ff fbcd 	bl	8012350 <__cxa_begin_cleanup>
 8012bb6:	2007      	movs	r0, #7
 8012bb8:	e79d      	b.n	8012af6 <__gxx_personality_v0+0x176>
 8012bba:	2e01      	cmp	r6, #1
 8012bbc:	d0c4      	beq.n	8012b48 <__gxx_personality_v0+0x1c8>
 8012bbe:	2c00      	cmp	r4, #0
 8012bc0:	dace      	bge.n	8012b60 <__gxx_personality_v0+0x1e0>
 8012bc2:	aa05      	add	r2, sp, #20
 8012bc4:	4638      	mov	r0, r7
 8012bc6:	4649      	mov	r1, r9
 8012bc8:	f7ff fe92 	bl	80128f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 8012bcc:	9b08      	ldr	r3, [sp, #32]
 8012bce:	43e2      	mvns	r2, r4
 8012bd0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8012bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bd8:	b133      	cbz	r3, 8012be8 <__gxx_personality_v0+0x268>
 8012bda:	4602      	mov	r2, r0
 8012bdc:	2300      	movs	r3, #0
 8012bde:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8012be2:	3301      	adds	r3, #1
 8012be4:	2900      	cmp	r1, #0
 8012be6:	d1fa      	bne.n	8012bde <__gxx_personality_v0+0x25e>
 8012be8:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8012bec:	2300      	movs	r3, #0
 8012bee:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 8012bf2:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8012bf6:	2304      	movs	r3, #4
 8012bf8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8012bfc:	e7b0      	b.n	8012b60 <__gxx_personality_v0+0x1e0>
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	f000 8089 	beq.w	8012d16 <__gxx_personality_v0+0x396>
 8012c04:	f01a 0208 	ands.w	r2, sl, #8
 8012c08:	9203      	str	r2, [sp, #12]
 8012c0a:	d07a      	beq.n	8012d02 <__gxx_personality_v0+0x382>
 8012c0c:	2347      	movs	r3, #71	; 0x47
 8012c0e:	f888 3000 	strb.w	r3, [r8]
 8012c12:	234e      	movs	r3, #78	; 0x4e
 8012c14:	f888 3001 	strb.w	r3, [r8, #1]
 8012c18:	2355      	movs	r3, #85	; 0x55
 8012c1a:	f888 3002 	strb.w	r3, [r8, #2]
 8012c1e:	2343      	movs	r3, #67	; 0x43
 8012c20:	f888 3003 	strb.w	r3, [r8, #3]
 8012c24:	2346      	movs	r3, #70	; 0x46
 8012c26:	f888 3004 	strb.w	r3, [r8, #4]
 8012c2a:	234f      	movs	r3, #79	; 0x4f
 8012c2c:	f888 3005 	strb.w	r3, [r8, #5]
 8012c30:	2352      	movs	r3, #82	; 0x52
 8012c32:	f888 3006 	strb.w	r3, [r8, #6]
 8012c36:	2300      	movs	r3, #0
 8012c38:	f888 3007 	strb.w	r3, [r8, #7]
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	9302      	str	r3, [sp, #8]
 8012c40:	463b      	mov	r3, r7
 8012c42:	4647      	mov	r7, r8
 8012c44:	4698      	mov	r8, r3
 8012c46:	a90f      	add	r1, sp, #60	; 0x3c
 8012c48:	f7ff fdaa 	bl	80127a0 <_ZL12read_sleb128PKhPl>
 8012c4c:	a910      	add	r1, sp, #64	; 0x40
 8012c4e:	4606      	mov	r6, r0
 8012c50:	f7ff fda6 	bl	80127a0 <_ZL12read_sleb128PKhPl>
 8012c54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8012c56:	2c00      	cmp	r4, #0
 8012c58:	4623      	mov	r3, r4
 8012c5a:	d014      	beq.n	8012c86 <__gxx_personality_v0+0x306>
 8012c5c:	dd1e      	ble.n	8012c9c <__gxx_personality_v0+0x31c>
 8012c5e:	9b08      	ldr	r3, [sp, #32]
 8012c60:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 8012c64:	6819      	ldr	r1, [r3, #0]
 8012c66:	b1a9      	cbz	r1, 8012c94 <__gxx_personality_v0+0x314>
 8012c68:	18c9      	adds	r1, r1, r3
 8012c6a:	d013      	beq.n	8012c94 <__gxx_personality_v0+0x314>
 8012c6c:	b16f      	cbz	r7, 8012c8a <__gxx_personality_v0+0x30a>
 8012c6e:	4638      	mov	r0, r7
 8012c70:	2200      	movs	r2, #0
 8012c72:	ab0b      	add	r3, sp, #44	; 0x2c
 8012c74:	f7ff faf4 	bl	8012260 <__cxa_type_match>
 8012c78:	b138      	cbz	r0, 8012c8a <__gxx_personality_v0+0x30a>
 8012c7a:	4643      	mov	r3, r8
 8012c7c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8012c7e:	46b8      	mov	r8, r7
 8012c80:	461f      	mov	r7, r3
 8012c82:	2603      	movs	r6, #3
 8012c84:	e6fe      	b.n	8012a84 <__gxx_personality_v0+0x104>
 8012c86:	2301      	movs	r3, #1
 8012c88:	9302      	str	r3, [sp, #8]
 8012c8a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8012c8c:	2c00      	cmp	r4, #0
 8012c8e:	d029      	beq.n	8012ce4 <__gxx_personality_v0+0x364>
 8012c90:	1930      	adds	r0, r6, r4
 8012c92:	e7d8      	b.n	8012c46 <__gxx_personality_v0+0x2c6>
 8012c94:	4643      	mov	r3, r8
 8012c96:	46b8      	mov	r8, r7
 8012c98:	461f      	mov	r7, r3
 8012c9a:	e7f2      	b.n	8012c82 <__gxx_personality_v0+0x302>
 8012c9c:	b1bf      	cbz	r7, 8012cce <__gxx_personality_v0+0x34e>
 8012c9e:	9a03      	ldr	r2, [sp, #12]
 8012ca0:	b9aa      	cbnz	r2, 8012cce <__gxx_personality_v0+0x34e>
 8012ca2:	9a08      	ldr	r2, [sp, #32]
 8012ca4:	43e1      	mvns	r1, r4
 8012ca6:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 8012caa:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8012cae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012cb0:	9211      	str	r2, [sp, #68]	; 0x44
 8012cb2:	b919      	cbnz	r1, 8012cbc <__gxx_personality_v0+0x33c>
 8012cb4:	e011      	b.n	8012cda <__gxx_personality_v0+0x35a>
 8012cb6:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8012cba:	b1e1      	cbz	r1, 8012cf6 <__gxx_personality_v0+0x376>
 8012cbc:	1861      	adds	r1, r4, r1
 8012cbe:	4638      	mov	r0, r7
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	ab11      	add	r3, sp, #68	; 0x44
 8012cc4:	f7ff facc 	bl	8012260 <__cxa_type_match>
 8012cc8:	2800      	cmp	r0, #0
 8012cca:	d0f4      	beq.n	8012cb6 <__gxx_personality_v0+0x336>
 8012ccc:	e7dd      	b.n	8012c8a <__gxx_personality_v0+0x30a>
 8012cce:	9a08      	ldr	r2, [sp, #32]
 8012cd0:	43d9      	mvns	r1, r3
 8012cd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8012cd6:	2a00      	cmp	r2, #0
 8012cd8:	d1d7      	bne.n	8012c8a <__gxx_personality_v0+0x30a>
 8012cda:	4642      	mov	r2, r8
 8012cdc:	461c      	mov	r4, r3
 8012cde:	46b8      	mov	r8, r7
 8012ce0:	4617      	mov	r7, r2
 8012ce2:	e7ce      	b.n	8012c82 <__gxx_personality_v0+0x302>
 8012ce4:	9a02      	ldr	r2, [sp, #8]
 8012ce6:	4643      	mov	r3, r8
 8012ce8:	46b8      	mov	r8, r7
 8012cea:	461f      	mov	r7, r3
 8012cec:	2a00      	cmp	r2, #0
 8012cee:	f43f aefa 	beq.w	8012ae6 <__gxx_personality_v0+0x166>
 8012cf2:	2602      	movs	r6, #2
 8012cf4:	e6c6      	b.n	8012a84 <__gxx_personality_v0+0x104>
 8012cf6:	4643      	mov	r3, r8
 8012cf8:	46b8      	mov	r8, r7
 8012cfa:	461f      	mov	r7, r3
 8012cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012cfe:	461c      	mov	r4, r3
 8012d00:	e7bf      	b.n	8012c82 <__gxx_personality_v0+0x302>
 8012d02:	f898 3007 	ldrb.w	r3, [r8, #7]
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	bf14      	ite	ne
 8012d0a:	f108 0358 	addne.w	r3, r8, #88	; 0x58
 8012d0e:	f858 3c20 	ldreq.w	r3, [r8, #-32]
 8012d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d14:	e792      	b.n	8012c3c <__gxx_personality_v0+0x2bc>
 8012d16:	4604      	mov	r4, r0
 8012d18:	2602      	movs	r6, #2
 8012d1a:	e6b3      	b.n	8012a84 <__gxx_personality_v0+0x104>
 8012d1c:	f7ff fc60 	bl	80125e0 <__cxa_begin_catch>
 8012d20:	f7ff f9e6 	bl	80120f0 <_ZSt9terminatev>
 8012d24:	f7ff f9f4 	bl	8012110 <_ZSt10unexpectedv>
	...

08012d30 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8012d30:	2801      	cmp	r0, #1
 8012d32:	b510      	push	{r4, lr}
 8012d34:	d81d      	bhi.n	8012d72 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 8012d36:	f04f 32ff 	mov.w	r2, #4294967295
 8012d3a:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8012d3e:	f3bf 8f5f 	dmb	sy
 8012d42:	e853 0f00 	ldrex	r0, [r3]
 8012d46:	4410      	add	r0, r2
 8012d48:	e843 0400 	strex	r4, r0, [r3]
 8012d4c:	f094 0f00 	teq	r4, #0
 8012d50:	d1f7      	bne.n	8012d42 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x12>
 8012d52:	f3bf 8f5f 	dmb	sy
 8012d56:	b958      	cbnz	r0, 8012d70 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x40>
 8012d58:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8012d5c:	f101 0458 	add.w	r4, r1, #88	; 0x58
 8012d60:	b10b      	cbz	r3, 8012d66 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x36>
 8012d62:	4620      	mov	r0, r4
 8012d64:	4798      	blx	r3
 8012d66:	4620      	mov	r0, r4
 8012d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d6c:	f000 bae8 	b.w	8013340 <__cxa_free_exception>
 8012d70:	bd10      	pop	{r4, pc}
 8012d72:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8012d76:	f7ff f9a3 	bl	80120c0 <_ZN10__cxxabiv111__terminateEPFvvE>
 8012d7a:	bf00      	nop
 8012d7c:	0000      	movs	r0, r0
	...

08012d80 <__cxa_throw>:
 8012d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d82:	f640 1308 	movw	r3, #2312	; 0x908
 8012d86:	f640 140c 	movw	r4, #2316	; 0x90c
 8012d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d8e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8012d92:	2743      	movs	r7, #67	; 0x43
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	262b      	movs	r6, #43	; 0x2b
 8012d98:	6825      	ldr	r5, [r4, #0]
 8012d9a:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
 8012d9e:	f840 1c78 	str.w	r1, [r0, #-120]
 8012da2:	2101      	movs	r1, #1
 8012da4:	f840 3c6c 	str.w	r3, [r0, #-108]
 8012da8:	f642 5331 	movw	r3, #11569	; 0x2d31
 8012dac:	f840 1c80 	str.w	r1, [r0, #-128]
 8012db0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8012db4:	f840 2c74 	str.w	r2, [r0, #-116]
 8012db8:	f840 3c50 	str.w	r3, [r0, #-80]
 8012dbc:	2347      	movs	r3, #71	; 0x47
 8012dbe:	f840 5c70 	str.w	r5, [r0, #-112]
 8012dc2:	f800 3c58 	strb.w	r3, [r0, #-88]
 8012dc6:	234e      	movs	r3, #78	; 0x4e
 8012dc8:	f800 7c55 	strb.w	r7, [r0, #-85]
 8012dcc:	f800 3c57 	strb.w	r3, [r0, #-87]
 8012dd0:	2355      	movs	r3, #85	; 0x55
 8012dd2:	f800 7c54 	strb.w	r7, [r0, #-84]
 8012dd6:	f800 3c56 	strb.w	r3, [r0, #-86]
 8012dda:	2300      	movs	r3, #0
 8012ddc:	f800 6c53 	strb.w	r6, [r0, #-83]
 8012de0:	f800 3c51 	strb.w	r3, [r0, #-81]
 8012de4:	f800 6c52 	strb.w	r6, [r0, #-82]
 8012de8:	4620      	mov	r0, r4
 8012dea:	f7f7 fc0d 	bl	800a608 <_Unwind_RaiseException>
 8012dee:	4620      	mov	r0, r4
 8012df0:	f7ff fbf6 	bl	80125e0 <__cxa_begin_catch>
 8012df4:	f7ff f97c 	bl	80120f0 <_ZSt9terminatev>
	...

08012e00 <__cxa_rethrow>:
 8012e00:	b510      	push	{r4, lr}
 8012e02:	f7ff fcc5 	bl	8012790 <__cxa_get_globals>
 8012e06:	6843      	ldr	r3, [r0, #4]
 8012e08:	6804      	ldr	r4, [r0, #0]
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	6043      	str	r3, [r0, #4]
 8012e0e:	b164      	cbz	r4, 8012e2a <__cxa_rethrow+0x2a>
 8012e10:	f894 3020 	ldrb.w	r3, [r4, #32]
 8012e14:	2b47      	cmp	r3, #71	; 0x47
 8012e16:	d00a      	beq.n	8012e2e <__cxa_rethrow+0x2e>
 8012e18:	2300      	movs	r3, #0
 8012e1a:	6003      	str	r3, [r0, #0]
 8012e1c:	3420      	adds	r4, #32
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f7f7 fc16 	bl	800a650 <_Unwind_Resume_or_Rethrow>
 8012e24:	4620      	mov	r0, r4
 8012e26:	f7ff fbdb 	bl	80125e0 <__cxa_begin_catch>
 8012e2a:	f7ff f961 	bl	80120f0 <_ZSt9terminatev>
 8012e2e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8012e32:	2b4e      	cmp	r3, #78	; 0x4e
 8012e34:	d1f0      	bne.n	8012e18 <__cxa_rethrow+0x18>
 8012e36:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8012e3a:	2b55      	cmp	r3, #85	; 0x55
 8012e3c:	d1ec      	bne.n	8012e18 <__cxa_rethrow+0x18>
 8012e3e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8012e42:	2b43      	cmp	r3, #67	; 0x43
 8012e44:	d1e8      	bne.n	8012e18 <__cxa_rethrow+0x18>
 8012e46:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012e4a:	2b43      	cmp	r3, #67	; 0x43
 8012e4c:	d1e4      	bne.n	8012e18 <__cxa_rethrow+0x18>
 8012e4e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012e52:	2b2b      	cmp	r3, #43	; 0x2b
 8012e54:	d1e0      	bne.n	8012e18 <__cxa_rethrow+0x18>
 8012e56:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8012e5a:	2b2b      	cmp	r3, #43	; 0x2b
 8012e5c:	d1dc      	bne.n	8012e18 <__cxa_rethrow+0x18>
 8012e5e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8012e62:	2b01      	cmp	r3, #1
 8012e64:	d8d8      	bhi.n	8012e18 <__cxa_rethrow+0x18>
 8012e66:	6963      	ldr	r3, [r4, #20]
 8012e68:	425b      	negs	r3, r3
 8012e6a:	6163      	str	r3, [r4, #20]
 8012e6c:	e7d6      	b.n	8012e1c <__cxa_rethrow+0x1c>
 8012e6e:	bf00      	nop

08012e70 <__cxa_current_exception_type>:
 8012e70:	b508      	push	{r3, lr}
 8012e72:	f7ff fc8d 	bl	8012790 <__cxa_get_globals>
 8012e76:	6800      	ldr	r0, [r0, #0]
 8012e78:	b130      	cbz	r0, 8012e88 <__cxa_current_exception_type+0x18>
 8012e7a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8012e7e:	2b01      	cmp	r3, #1
 8012e80:	bf04      	itt	eq
 8012e82:	6800      	ldreq	r0, [r0, #0]
 8012e84:	3878      	subeq	r0, #120	; 0x78
 8012e86:	6800      	ldr	r0, [r0, #0]
 8012e88:	bd08      	pop	{r3, pc}
 8012e8a:	bf00      	nop
 8012e8c:	0000      	movs	r0, r0
	...

08012e90 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 8012e90:	4b03      	ldr	r3, [pc, #12]	; (8012ea0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 8012e92:	b510      	push	{r4, lr}
 8012e94:	4604      	mov	r4, r0
 8012e96:	6003      	str	r3, [r0, #0]
 8012e98:	f000 f90a 	bl	80130b0 <_ZNSt9type_infoD1Ev>
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	bd10      	pop	{r4, pc}
 8012ea0:	08014828 	.word	0x08014828
	...

08012eb0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 8012eb0:	4b05      	ldr	r3, [pc, #20]	; (8012ec8 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
 8012eb2:	b510      	push	{r4, lr}
 8012eb4:	4604      	mov	r4, r0
 8012eb6:	6003      	str	r3, [r0, #0]
 8012eb8:	f000 f8fa 	bl	80130b0 <_ZNSt9type_infoD1Ev>
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	f7ff f8e7 	bl	8012090 <_ZdlPv>
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	bd10      	pop	{r4, pc}
 8012ec6:	bf00      	nop
 8012ec8:	08014828 	.word	0x08014828
 8012ecc:	00000000 	.word	0x00000000

08012ed0 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 8012ed0:	2001      	movs	r0, #1
 8012ed2:	4770      	bx	lr
	...

08012ee0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 8012ee0:	4b03      	ldr	r3, [pc, #12]	; (8012ef0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 8012ee2:	b510      	push	{r4, lr}
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	6003      	str	r3, [r0, #0]
 8012ee8:	f000 fa5a 	bl	80133a0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8012eec:	4620      	mov	r0, r4
 8012eee:	bd10      	pop	{r4, pc}
 8012ef0:	08014888 	.word	0x08014888
	...

08012f00 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 8012f00:	4b05      	ldr	r3, [pc, #20]	; (8012f18 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
 8012f02:	b510      	push	{r4, lr}
 8012f04:	4604      	mov	r4, r0
 8012f06:	6003      	str	r3, [r0, #0]
 8012f08:	f000 fa4a 	bl	80133a0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f7ff f8bf 	bl	8012090 <_ZdlPv>
 8012f12:	4620      	mov	r0, r4
 8012f14:	bd10      	pop	{r4, pc}
 8012f16:	bf00      	nop
 8012f18:	08014888 	.word	0x08014888
 8012f1c:	00000000 	.word	0x00000000

08012f20 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	b530      	push	{r4, r5, lr}
 8012f24:	4604      	mov	r4, r0
 8012f26:	b083      	sub	sp, #12
 8012f28:	460d      	mov	r5, r1
 8012f2a:	d908      	bls.n	8012f3e <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
 8012f2c:	68e4      	ldr	r4, [r4, #12]
 8012f2e:	3302      	adds	r3, #2
 8012f30:	68e9      	ldr	r1, [r5, #12]
 8012f32:	4620      	mov	r0, r4
 8012f34:	6824      	ldr	r4, [r4, #0]
 8012f36:	6924      	ldr	r4, [r4, #16]
 8012f38:	47a0      	blx	r4
 8012f3a:	b003      	add	sp, #12
 8012f3c:	bd30      	pop	{r4, r5, pc}
 8012f3e:	68c0      	ldr	r0, [r0, #12]
 8012f40:	4908      	ldr	r1, [pc, #32]	; (8012f64 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
 8012f42:	9201      	str	r2, [sp, #4]
 8012f44:	9300      	str	r3, [sp, #0]
 8012f46:	f000 f8e3 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 8012f4a:	9a01      	ldr	r2, [sp, #4]
 8012f4c:	9b00      	ldr	r3, [sp, #0]
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	d0ec      	beq.n	8012f2c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0xc>
 8012f52:	68eb      	ldr	r3, [r5, #12]
 8012f54:	4618      	mov	r0, r3
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	68db      	ldr	r3, [r3, #12]
 8012f5a:	4798      	blx	r3
 8012f5c:	f080 0001 	eor.w	r0, r0, #1
 8012f60:	b2c0      	uxtb	r0, r0
 8012f62:	e7ea      	b.n	8012f3a <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 8012f64:	080147b0 	.word	0x080147b0
	...

08012f70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8012f70:	4b03      	ldr	r3, [pc, #12]	; (8012f80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8012f72:	b510      	push	{r4, lr}
 8012f74:	4604      	mov	r4, r0
 8012f76:	6003      	str	r3, [r0, #0]
 8012f78:	f000 f952 	bl	8013220 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	bd10      	pop	{r4, pc}
 8012f80:	080148b8 	.word	0x080148b8
	...

08012f90 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8012f90:	4b05      	ldr	r3, [pc, #20]	; (8012fa8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8012f92:	b510      	push	{r4, lr}
 8012f94:	4604      	mov	r4, r0
 8012f96:	6003      	str	r3, [r0, #0]
 8012f98:	f000 f942 	bl	8013220 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	f7ff f877 	bl	8012090 <_ZdlPv>
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	bd10      	pop	{r4, pc}
 8012fa6:	bf00      	nop
 8012fa8:	080148b8 	.word	0x080148b8
 8012fac:	00000000 	.word	0x00000000

08012fb0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8012fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb2:	4607      	mov	r7, r0
 8012fb4:	460e      	mov	r6, r1
 8012fb6:	4615      	mov	r5, r2
 8012fb8:	461c      	mov	r4, r3
 8012fba:	f000 f921 	bl	8013200 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8012fbe:	b108      	cbz	r0, 8012fc4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>
 8012fc0:	2001      	movs	r0, #1
 8012fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fc4:	68bf      	ldr	r7, [r7, #8]
 8012fc6:	4623      	mov	r3, r4
 8012fc8:	4631      	mov	r1, r6
 8012fca:	462a      	mov	r2, r5
 8012fcc:	4638      	mov	r0, r7
 8012fce:	683c      	ldr	r4, [r7, #0]
 8012fd0:	69a4      	ldr	r4, [r4, #24]
 8012fd2:	47a0      	blx	r4
 8012fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fd6:	bf00      	nop
	...

08012fe0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8012fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe4:	b087      	sub	sp, #28
 8012fe6:	4689      	mov	r9, r1
 8012fe8:	4619      	mov	r1, r3
 8012fea:	4698      	mov	r8, r3
 8012fec:	4607      	mov	r7, r0
 8012fee:	4692      	mov	sl, r2
 8012ff0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012ff2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8012ff6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012ff8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012ffa:	f000 f889 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 8012ffe:	4603      	mov	r3, r0
 8013000:	b168      	cbz	r0, 801301e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e>
 8013002:	f1b9 0f00 	cmp.w	r9, #0
 8013006:	6025      	str	r5, [r4, #0]
 8013008:	f884 a004 	strb.w	sl, [r4, #4]
 801300c:	db18      	blt.n	8013040 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x60>
 801300e:	444d      	add	r5, r9
 8013010:	2000      	movs	r0, #0
 8013012:	42ae      	cmp	r6, r5
 8013014:	bf14      	ite	ne
 8013016:	2601      	movne	r6, #1
 8013018:	2606      	moveq	r6, #6
 801301a:	71a6      	strb	r6, [r4, #6]
 801301c:	e00d      	b.n	801303a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 801301e:	42b5      	cmp	r5, r6
 8013020:	d015      	beq.n	801304e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8013022:	68bf      	ldr	r7, [r7, #8]
 8013024:	4649      	mov	r1, r9
 8013026:	4652      	mov	r2, sl
 8013028:	4643      	mov	r3, r8
 801302a:	4638      	mov	r0, r7
 801302c:	683f      	ldr	r7, [r7, #0]
 801302e:	9602      	str	r6, [sp, #8]
 8013030:	9403      	str	r4, [sp, #12]
 8013032:	e88d 0820 	stmia.w	sp, {r5, fp}
 8013036:	69fc      	ldr	r4, [r7, #28]
 8013038:	47a0      	blx	r4
 801303a:	b007      	add	sp, #28
 801303c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013040:	2000      	movs	r0, #0
 8013042:	f119 0f02 	cmn.w	r9, #2
 8013046:	d1f8      	bne.n	801303a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 8013048:	2301      	movs	r3, #1
 801304a:	71a3      	strb	r3, [r4, #6]
 801304c:	e7f5      	b.n	801303a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 801304e:	4638      	mov	r0, r7
 8013050:	4659      	mov	r1, fp
 8013052:	9305      	str	r3, [sp, #20]
 8013054:	f000 f85c 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 8013058:	9b05      	ldr	r3, [sp, #20]
 801305a:	2800      	cmp	r0, #0
 801305c:	d0e1      	beq.n	8013022 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801305e:	f884 a005 	strb.w	sl, [r4, #5]
 8013062:	4618      	mov	r0, r3
 8013064:	e7e9      	b.n	801303a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 8013066:	bf00      	nop
	...

08013070 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8013070:	b570      	push	{r4, r5, r6, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	4605      	mov	r5, r0
 8013076:	460e      	mov	r6, r1
 8013078:	9c08      	ldr	r4, [sp, #32]
 801307a:	4294      	cmp	r4, r2
 801307c:	d008      	beq.n	8013090 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x20>
 801307e:	68ad      	ldr	r5, [r5, #8]
 8013080:	4631      	mov	r1, r6
 8013082:	4628      	mov	r0, r5
 8013084:	682d      	ldr	r5, [r5, #0]
 8013086:	9400      	str	r4, [sp, #0]
 8013088:	6a2c      	ldr	r4, [r5, #32]
 801308a:	47a0      	blx	r4
 801308c:	b004      	add	sp, #16
 801308e:	bd70      	pop	{r4, r5, r6, pc}
 8013090:	4619      	mov	r1, r3
 8013092:	9203      	str	r2, [sp, #12]
 8013094:	9302      	str	r3, [sp, #8]
 8013096:	f000 f83b 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 801309a:	9a03      	ldr	r2, [sp, #12]
 801309c:	9b02      	ldr	r3, [sp, #8]
 801309e:	2800      	cmp	r0, #0
 80130a0:	d0ed      	beq.n	801307e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80130a2:	2006      	movs	r0, #6
 80130a4:	e7f2      	b.n	801308c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 80130a6:	bf00      	nop
	...

080130b0 <_ZNSt9type_infoD1Ev>:
 80130b0:	4b01      	ldr	r3, [pc, #4]	; (80130b8 <_ZNSt9type_infoD1Ev+0x8>)
 80130b2:	6003      	str	r3, [r0, #0]
 80130b4:	4770      	bx	lr
 80130b6:	bf00      	nop
 80130b8:	08014948 	.word	0x08014948
 80130bc:	00000000 	.word	0x00000000

080130c0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80130c0:	2000      	movs	r0, #0
 80130c2:	4770      	bx	lr
	...

080130d0 <_ZNKSt9type_info15__is_function_pEv>:
 80130d0:	2000      	movs	r0, #0
 80130d2:	4770      	bx	lr
	...

080130e0 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 80130e0:	2000      	movs	r0, #0
 80130e2:	4770      	bx	lr
	...

080130f0 <_ZNSt9type_infoD0Ev>:
 80130f0:	4b03      	ldr	r3, [pc, #12]	; (8013100 <_ZNSt9type_infoD0Ev+0x10>)
 80130f2:	b510      	push	{r4, lr}
 80130f4:	4604      	mov	r4, r0
 80130f6:	6003      	str	r3, [r0, #0]
 80130f8:	f7fe ffca 	bl	8012090 <_ZdlPv>
 80130fc:	4620      	mov	r0, r4
 80130fe:	bd10      	pop	{r4, pc}
 8013100:	08014948 	.word	0x08014948
	...

08013110 <_ZNKSt9type_infoeqERKS_>:
 8013110:	4281      	cmp	r1, r0
 8013112:	b508      	push	{r3, lr}
 8013114:	d016      	beq.n	8013144 <_ZNKSt9type_infoeqERKS_+0x34>
 8013116:	6840      	ldr	r0, [r0, #4]
 8013118:	7803      	ldrb	r3, [r0, #0]
 801311a:	2b2a      	cmp	r3, #42	; 0x2a
 801311c:	d00b      	beq.n	8013136 <_ZNKSt9type_infoeqERKS_+0x26>
 801311e:	6849      	ldr	r1, [r1, #4]
 8013120:	780b      	ldrb	r3, [r1, #0]
 8013122:	2b2a      	cmp	r3, #42	; 0x2a
 8013124:	bf08      	it	eq
 8013126:	3101      	addeq	r1, #1
 8013128:	f7f8 ff52 	bl	800bfd0 <strcmp>
 801312c:	f1d0 0001 	rsbs	r0, r0, #1
 8013130:	bf38      	it	cc
 8013132:	2000      	movcc	r0, #0
 8013134:	bd08      	pop	{r3, pc}
 8013136:	7843      	ldrb	r3, [r0, #1]
 8013138:	2b2a      	cmp	r3, #42	; 0x2a
 801313a:	d101      	bne.n	8013140 <_ZNKSt9type_infoeqERKS_+0x30>
 801313c:	2000      	movs	r0, #0
 801313e:	bd08      	pop	{r3, pc}
 8013140:	3001      	adds	r0, #1
 8013142:	e7ec      	b.n	801311e <_ZNKSt9type_infoeqERKS_+0xe>
 8013144:	2001      	movs	r0, #1
 8013146:	bd08      	pop	{r3, pc}
	...

08013150 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8013150:	f7ff bfde 	b.w	8013110 <_ZNKSt9type_infoeqERKS_>
	...

08013160 <_ZNKSt10bad_typeid4whatEv>:
 8013160:	f644 1090 	movw	r0, #18832	; 0x4990
 8013164:	f6c0 0001 	movt	r0, #2049	; 0x801
 8013168:	4770      	bx	lr
 801316a:	bf00      	nop
 801316c:	0000      	movs	r0, r0
	...

08013170 <_ZNSt10bad_typeidD1Ev>:
 8013170:	4b03      	ldr	r3, [pc, #12]	; (8013180 <_ZNSt10bad_typeidD1Ev+0x10>)
 8013172:	b510      	push	{r4, lr}
 8013174:	4604      	mov	r4, r0
 8013176:	6003      	str	r3, [r0, #0]
 8013178:	f7ff fac2 	bl	8012700 <_ZNSt9exceptionD1Ev>
 801317c:	4620      	mov	r0, r4
 801317e:	bd10      	pop	{r4, pc}
 8013180:	08014968 	.word	0x08014968
	...

08013190 <_ZNSt10bad_typeidD0Ev>:
 8013190:	4b05      	ldr	r3, [pc, #20]	; (80131a8 <_ZNSt10bad_typeidD0Ev+0x18>)
 8013192:	b510      	push	{r4, lr}
 8013194:	4604      	mov	r4, r0
 8013196:	6003      	str	r3, [r0, #0]
 8013198:	f7ff fab2 	bl	8012700 <_ZNSt9exceptionD1Ev>
 801319c:	4620      	mov	r0, r4
 801319e:	f7fe ff77 	bl	8012090 <_ZdlPv>
 80131a2:	4620      	mov	r0, r4
 80131a4:	bd10      	pop	{r4, pc}
 80131a6:	bf00      	nop
 80131a8:	08014968 	.word	0x08014968
 80131ac:	00000000 	.word	0x00000000

080131b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80131b0:	b570      	push	{r4, r5, r6, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	6806      	ldr	r6, [r0, #0]
 80131b6:	2400      	movs	r4, #0
 80131b8:	2310      	movs	r3, #16
 80131ba:	4615      	mov	r5, r2
 80131bc:	9302      	str	r3, [sp, #8]
 80131be:	466b      	mov	r3, sp
 80131c0:	6812      	ldr	r2, [r2, #0]
 80131c2:	9400      	str	r4, [sp, #0]
 80131c4:	f88d 4004 	strb.w	r4, [sp, #4]
 80131c8:	9403      	str	r4, [sp, #12]
 80131ca:	69b6      	ldr	r6, [r6, #24]
 80131cc:	47b0      	blx	r6
 80131ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80131d2:	f003 0306 	and.w	r3, r3, #6
 80131d6:	2b06      	cmp	r3, #6
 80131d8:	bf18      	it	ne
 80131da:	4620      	movne	r0, r4
 80131dc:	d102      	bne.n	80131e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x34>
 80131de:	9b00      	ldr	r3, [sp, #0]
 80131e0:	2001      	movs	r0, #1
 80131e2:	602b      	str	r3, [r5, #0]
 80131e4:	b004      	add	sp, #16
 80131e6:	bd70      	pop	{r4, r5, r6, pc}
	...

080131f0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80131f0:	9800      	ldr	r0, [sp, #0]
 80131f2:	4290      	cmp	r0, r2
 80131f4:	bf14      	ite	ne
 80131f6:	2001      	movne	r0, #1
 80131f8:	2006      	moveq	r0, #6
 80131fa:	4770      	bx	lr
 80131fc:	0000      	movs	r0, r0
	...

08013200 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8013200:	b538      	push	{r3, r4, r5, lr}
 8013202:	4614      	mov	r4, r2
 8013204:	461d      	mov	r5, r3
 8013206:	f7ff ff83 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 801320a:	b128      	cbz	r0, 8013218 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x18>
 801320c:	2001      	movs	r0, #1
 801320e:	2308      	movs	r3, #8
 8013210:	602c      	str	r4, [r5, #0]
 8013212:	60eb      	str	r3, [r5, #12]
 8013214:	2306      	movs	r3, #6
 8013216:	712b      	strb	r3, [r5, #4]
 8013218:	bd38      	pop	{r3, r4, r5, pc}
 801321a:	bf00      	nop
 801321c:	0000      	movs	r0, r0
	...

08013220 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8013220:	4b03      	ldr	r3, [pc, #12]	; (8013230 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8013222:	b510      	push	{r4, lr}
 8013224:	4604      	mov	r4, r0
 8013226:	6003      	str	r3, [r0, #0]
 8013228:	f7ff ff42 	bl	80130b0 <_ZNSt9type_infoD1Ev>
 801322c:	4620      	mov	r0, r4
 801322e:	bd10      	pop	{r4, pc}
 8013230:	080149b8 	.word	0x080149b8
	...

08013240 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8013240:	4b05      	ldr	r3, [pc, #20]	; (8013258 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8013242:	b510      	push	{r4, lr}
 8013244:	4604      	mov	r4, r0
 8013246:	6003      	str	r3, [r0, #0]
 8013248:	f7ff ff32 	bl	80130b0 <_ZNSt9type_infoD1Ev>
 801324c:	4620      	mov	r0, r4
 801324e:	f7fe ff1f 	bl	8012090 <_ZdlPv>
 8013252:	4620      	mov	r0, r4
 8013254:	bd10      	pop	{r4, pc}
 8013256:	bf00      	nop
 8013258:	080149b8 	.word	0x080149b8
 801325c:	00000000 	.word	0x00000000

08013260 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8013260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013262:	b083      	sub	sp, #12
 8013264:	4616      	mov	r6, r2
 8013266:	4605      	mov	r5, r0
 8013268:	9c08      	ldr	r4, [sp, #32]
 801326a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801326c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801326e:	4294      	cmp	r4, r2
 8013270:	d00b      	beq.n	801328a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 8013272:	4628      	mov	r0, r5
 8013274:	4619      	mov	r1, r3
 8013276:	f7ff ff4b 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 801327a:	b118      	cbz	r0, 8013284 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 801327c:	2301      	movs	r3, #1
 801327e:	603c      	str	r4, [r7, #0]
 8013280:	713e      	strb	r6, [r7, #4]
 8013282:	71bb      	strb	r3, [r7, #6]
 8013284:	2000      	movs	r0, #0
 8013286:	b003      	add	sp, #12
 8013288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801328a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801328c:	9301      	str	r3, [sp, #4]
 801328e:	f7ff ff3f 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 8013292:	9b01      	ldr	r3, [sp, #4]
 8013294:	2800      	cmp	r0, #0
 8013296:	d0ec      	beq.n	8013272 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
 8013298:	717e      	strb	r6, [r7, #5]
 801329a:	e7f3      	b.n	8013284 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 801329c:	0000      	movs	r0, r0
	...

080132a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80132a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132a2:	4605      	mov	r5, r0
 80132a4:	460c      	mov	r4, r1
 80132a6:	4616      	mov	r6, r2
 80132a8:	461f      	mov	r7, r3
 80132aa:	f7ff ff31 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 80132ae:	b948      	cbnz	r0, 80132c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x24>
 80132b0:	2f03      	cmp	r7, #3
 80132b2:	d900      	bls.n	80132b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 80132b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	4620      	mov	r0, r4
 80132ba:	4629      	mov	r1, r5
 80132bc:	4632      	mov	r2, r6
 80132be:	695b      	ldr	r3, [r3, #20]
 80132c0:	4798      	blx	r3
 80132c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132c4:	2001      	movs	r0, #1
 80132c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080132d0 <__cxa_allocate_exception>:
 80132d0:	b538      	push	{r3, r4, r5, lr}
 80132d2:	f100 0580 	add.w	r5, r0, #128	; 0x80
 80132d6:	4628      	mov	r0, r5
 80132d8:	f7f7 fe92 	bl	800b000 <malloc>
 80132dc:	4604      	mov	r4, r0
 80132de:	b168      	cbz	r0, 80132fc <__cxa_allocate_exception+0x2c>
 80132e0:	f7ff fa56 	bl	8012790 <__cxa_get_globals>
 80132e4:	2100      	movs	r1, #0
 80132e6:	2280      	movs	r2, #128	; 0x80
 80132e8:	4603      	mov	r3, r0
 80132ea:	4620      	mov	r0, r4
 80132ec:	685d      	ldr	r5, [r3, #4]
 80132ee:	3501      	adds	r5, #1
 80132f0:	605d      	str	r5, [r3, #4]
 80132f2:	f7f8 fa75 	bl	800b7e0 <memset>
 80132f6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80132fa:	bd38      	pop	{r3, r4, r5, pc}
 80132fc:	4a0b      	ldr	r2, [pc, #44]	; (801332c <__cxa_allocate_exception+0x5c>)
 80132fe:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8013302:	6811      	ldr	r1, [r2, #0]
 8013304:	bf98      	it	ls
 8013306:	460b      	movls	r3, r1
 8013308:	d805      	bhi.n	8013316 <__cxa_allocate_exception+0x46>
 801330a:	07d8      	lsls	r0, r3, #31
 801330c:	d505      	bpl.n	801331a <__cxa_allocate_exception+0x4a>
 801330e:	3401      	adds	r4, #1
 8013310:	085b      	lsrs	r3, r3, #1
 8013312:	2c04      	cmp	r4, #4
 8013314:	d1f9      	bne.n	801330a <__cxa_allocate_exception+0x3a>
 8013316:	f7fe feeb 	bl	80120f0 <_ZSt9terminatev>
 801331a:	2301      	movs	r3, #1
 801331c:	4804      	ldr	r0, [pc, #16]	; (8013330 <__cxa_allocate_exception+0x60>)
 801331e:	40a3      	lsls	r3, r4
 8013320:	eb00 2444 	add.w	r4, r0, r4, lsl #9
 8013324:	4319      	orrs	r1, r3
 8013326:	6011      	str	r1, [r2, #0]
 8013328:	e7da      	b.n	80132e0 <__cxa_allocate_exception+0x10>
 801332a:	bf00      	nop
 801332c:	20000ad4 	.word	0x20000ad4
 8013330:	20000ad8 	.word	0x20000ad8
	...

08013340 <__cxa_free_exception>:
 8013340:	4b0a      	ldr	r3, [pc, #40]	; (801336c <__cxa_free_exception+0x2c>)
 8013342:	4298      	cmp	r0, r3
 8013344:	d30e      	bcc.n	8013364 <__cxa_free_exception+0x24>
 8013346:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 801334a:	4290      	cmp	r0, r2
 801334c:	d20a      	bcs.n	8013364 <__cxa_free_exception+0x24>
 801334e:	4a08      	ldr	r2, [pc, #32]	; (8013370 <__cxa_free_exception+0x30>)
 8013350:	1ac3      	subs	r3, r0, r3
 8013352:	2001      	movs	r0, #1
 8013354:	0a5b      	lsrs	r3, r3, #9
 8013356:	6811      	ldr	r1, [r2, #0]
 8013358:	fa10 f303 	lsls.w	r3, r0, r3
 801335c:	ea21 0303 	bic.w	r3, r1, r3
 8013360:	6013      	str	r3, [r2, #0]
 8013362:	4770      	bx	lr
 8013364:	3880      	subs	r0, #128	; 0x80
 8013366:	f7f7 be53 	b.w	800b010 <free>
 801336a:	bf00      	nop
 801336c:	20000ad8 	.word	0x20000ad8
 8013370:	20000ad4 	.word	0x20000ad4
	...

08013380 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 8013380:	b510      	push	{r4, lr}
 8013382:	3302      	adds	r3, #2
 8013384:	68c4      	ldr	r4, [r0, #12]
 8013386:	68c9      	ldr	r1, [r1, #12]
 8013388:	4620      	mov	r0, r4
 801338a:	6824      	ldr	r4, [r4, #0]
 801338c:	6924      	ldr	r4, [r4, #16]
 801338e:	47a0      	blx	r4
 8013390:	bd10      	pop	{r4, pc}
 8013392:	bf00      	nop
	...

080133a0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 80133a0:	4b03      	ldr	r3, [pc, #12]	; (80133b0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 80133a2:	b510      	push	{r4, lr}
 80133a4:	4604      	mov	r4, r0
 80133a6:	6003      	str	r3, [r0, #0]
 80133a8:	f7ff fe82 	bl	80130b0 <_ZNSt9type_infoD1Ev>
 80133ac:	4620      	mov	r0, r4
 80133ae:	bd10      	pop	{r4, pc}
 80133b0:	08014a68 	.word	0x08014a68
	...

080133c0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 80133c0:	4b05      	ldr	r3, [pc, #20]	; (80133d8 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
 80133c2:	b510      	push	{r4, lr}
 80133c4:	4604      	mov	r4, r0
 80133c6:	6003      	str	r3, [r0, #0]
 80133c8:	f7ff fe72 	bl	80130b0 <_ZNSt9type_infoD1Ev>
 80133cc:	4620      	mov	r0, r4
 80133ce:	f7fe fe5f 	bl	8012090 <_ZdlPv>
 80133d2:	4620      	mov	r0, r4
 80133d4:	bd10      	pop	{r4, pc}
 80133d6:	bf00      	nop
 80133d8:	08014a68 	.word	0x08014a68
 80133dc:	00000000 	.word	0x00000000

080133e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 80133e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133e4:	4605      	mov	r5, r0
 80133e6:	460c      	mov	r4, r1
 80133e8:	4617      	mov	r7, r2
 80133ea:	461e      	mov	r6, r3
 80133ec:	f7ff fe90 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 80133f0:	4680      	mov	r8, r0
 80133f2:	2800      	cmp	r0, #0
 80133f4:	d125      	bne.n	8013442 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x62>
 80133f6:	682b      	ldr	r3, [r5, #0]
 80133f8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80133fc:	2c00      	cmp	r4, #0
 80133fe:	d023      	beq.n	8013448 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x68>
 8013400:	6823      	ldr	r3, [r4, #0]
 8013402:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013406:	f7ff fe83 	bl	8013110 <_ZNKSt9type_infoeqERKS_>
 801340a:	b1a8      	cbz	r0, 8013438 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 801340c:	f016 0001 	ands.w	r0, r6, #1
 8013410:	d015      	beq.n	801343e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5e>
 8013412:	68ab      	ldr	r3, [r5, #8]
 8013414:	68a2      	ldr	r2, [r4, #8]
 8013416:	439a      	bics	r2, r3
 8013418:	d110      	bne.n	801343c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
 801341a:	f8d5 e000 	ldr.w	lr, [r5]
 801341e:	07db      	lsls	r3, r3, #31
 8013420:	bf58      	it	pl
 8013422:	f026 0601 	bicpl.w	r6, r6, #1
 8013426:	4621      	mov	r1, r4
 8013428:	4628      	mov	r0, r5
 801342a:	463a      	mov	r2, r7
 801342c:	4633      	mov	r3, r6
 801342e:	f8de 4018 	ldr.w	r4, [lr, #24]
 8013432:	47a0      	blx	r4
 8013434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801343c:	4640      	mov	r0, r8
 801343e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013442:	2001      	movs	r0, #1
 8013444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013448:	f7fe fffa 	bl	8012440 <__cxa_bad_typeid>
 801344c:	0000      	movs	r0, r0
	...

08013450 <GPIO_PIN>:
 8013450:	1000 2000 4000 8000                         ... .@..

08013458 <GPIO_CLK>:
 8013458:	0008 0000 0008 0000 0008 0000 0008 0000     ................

08013468 <BUTTON_PIN>:
 8013468:	0001 0000                                   ....

0801346c <BUTTON_CLK>:
 801346c:	0001 0000                                   ....

08013470 <BUTTON_EXTI_LINE>:
 8013470:	0001 0000                                   ....

08013474 <BUTTON_PORT_SOURCE>:
 8013474:	0000 0000                                   ....

08013478 <BUTTON_PIN_SOURCE>:
 8013478:	0000 0000                                   ....

0801347c <BUTTON_IRQn>:
 801347c:	0006 0000                                   ....

08013480 <_ZTV12AManagedTask>:
	...
 8013488:	1f91 0801 1f65 0800 1fc1 0801 1c49 0800     ....e.......I...
 8013498:	1c89 0800 1ff1 0801 20a1 0801 2011 0801     ......... ... ..
	...
 80134b0:	2e2e 462f 6572 5265 4f54 5f53 4345 532f     ../FreeRTOS_EC/S
 80134c0:	756f 6372 2f65 5443 7361 2e6b 7063 0070     ource/CTask.cpp.
 80134d0:	6168 646e 656c 2120 203d 554e 4c4c 0000     handle != NULL..

080134e0 <_ZTV5CTask>:
	...
 80134e8:	1f91 0801 1f65 0800 1fc1 0801 1f01 0800     ....e...........
 80134f8:	1f45 0800                                   E...

080134fc <_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__>:
 80134fc:	6976 7472 6175 206c 6f76 6469 4320 6154     virtual void CTa
 801350c:	6b73 3a3a 7441 6174 6863 7828 6547 656e     sk::Attach(xGene
 801351c:	6972 4863 6e61 6c64 2965 0000 0000 0000     ricHandle)......
 801352c:	0000 0000 4449 454c 0000 0000 0a0d 0000     ....IDLE........
 801353c:	7525 2020 6325 2020 2d25 3631 2073 2020     %u  %c  %-16s   
 801354c:	2020 2020 2020 3020 2020 3020 2525 2020            0   0%%  
 801355c:	3525 0d75 000a 0000 7525 2020 6325 2020     %5u.....%u  %c  
 801356c:	2d25 3631 2073 3125 7530 2520 7533 2525     %-16s %10u %3u%%
 801357c:	2020 3525 0d75 000a 7525 2020 6325 2020       %5u...%u  %c  
 801358c:	2d25 3631 2073 3125 7530 2020 313c 2525     %-16s %10u  <1%%
 801359c:	2020 3525 0d75 000a 0000 0000 0000 0000       %5u...........
 80135ac:	0000 0000                                   ....

080135b0 <_ZTV24CLedHeartBeatSTM32F4Disc>:
	...
 80135b8:	1f91 0801 1f65 0800 1fc1 0801 3c29 0800     ....e.......)<..
 80135c8:	3c61 0800 3c81 0800 3cb9 0800 2011 0801     a<...<...<... ..
	...
 80135e0:	654c 2064 6548 7261 6274 6165 0074 0000     Led Heartbeat...

080135f0 <_ZL12c_FontNative>:
	...
 8013610:	6973 6e67 6465 6320 6168 0072 6f62 6c6f     signed char.bool
 8013620:	0000 0000 6f62 6c6f 6165 006e 6863 7261     ....boolean.char
 8013630:	0000 0000 7962 6574 0000 0000 6f64 6275     ....byte....doub
 8013640:	656c 0000 6f6c 676e 6420 756f 6c62 0065     le..long double.
 8013650:	6c66 616f 0074 0000 5f5f 6c66 616f 3174     float...__float1
 8013660:	3832 0000 6e75 6973 6e67 6465 6320 6168     28..unsigned cha
 8013670:	0072 0000 6e69 0074 6e75 6973 6e67 6465     r...int.unsigned
 8013680:	6920 746e 0000 0000 6e75 6973 6e67 6465      int....unsigned
 8013690:	0000 0000 6f6c 676e 0000 0000 6e75 6973     ....long....unsi
 80136a0:	6e67 6465 6c20 6e6f 0067 0000 5f5f 6e69     gned long...__in
 80136b0:	3174 3832 0000 0000 6e75 6973 6e67 6465     t128....unsigned
 80136c0:	5f20 695f 746e 3231 0038 0000 6873 726f      __int128...shor
 80136d0:	0074 0000 6e75 6973 6e67 6465 7320 6f68     t...unsigned sho
 80136e0:	7472 0000 6f76 6469 0000 0000 6377 6168     rt..void....wcha
 80136f0:	5f72 0074 6f6c 676e 6c20 6e6f 0067 0000     r_t.long long...
 8013700:	6e75 6973 6e67 6465 6c20 6e6f 2067 6f6c     unsigned long lo
 8013710:	676e 0000 2e2e 002e 6564 6963 616d 336c     ng......decimal3
 8013720:	0032 0000 6564 6963 616d 366c 0034 0000     2...decimal64...
 8013730:	6564 6963 616d 316c 3832 0000 6168 666c     decimal128..half
 8013740:	0000 0000 6863 7261 3631 745f 0000 0000     ....char16_t....
 8013750:	6863 7261 3233 745f 0000 0000 6564 6c63     char32_t....decl
 8013760:	7974 6570 6e28 6c75 706c 7274 0029 0000     type(nullptr)...

08013770 <cplus_demangle_builtin_types>:
 8013770:	3610 0801 000b 0000 3610 0801 000b 0000     .6.......6......
 8013780:	0000 0000 361c 0801 0004 0000 3624 0801     .....6......$6..
 8013790:	0007 0000 0007 0000 362c 0801 0004 0000     ........,6......
 80137a0:	3634 0801 0004 0000 0000 0000 363c 0801     46..........<6..
 80137b0:	0006 0000 363c 0801 0006 0000 0008 0000     ....<6..........
 80137c0:	3644 0801 000b 0000 3644 0801 000b 0000     D6......D6......
 80137d0:	0008 0000 3650 0801 0005 0000 3650 0801     ....P6......P6..
 80137e0:	0005 0000 0008 0000 3658 0801 000a 0000     ........X6......
 80137f0:	3658 0801 000a 0000 0008 0000 3664 0801     X6..........d6..
 8013800:	000d 0000 3664 0801 000d 0000 0000 0000     ....d6..........
 8013810:	3674 0801 0003 0000 3674 0801 0003 0000     t6......t6......
 8013820:	0001 0000 3678 0801 000c 0000 3688 0801     ....x6.......6..
 8013830:	0008 0000 0002 0000 0000 0000 0000 0000     ................
	...
 801384c:	3694 0801 0004 0000 3694 0801 0004 0000     .6.......6......
 801385c:	0003 0000 369c 0801 000d 0000 369c 0801     .....6.......6..
 801386c:	000d 0000 0004 0000 36ac 0801 0008 0000     .........6......
 801387c:	36ac 0801 0008 0000 0000 0000 36b8 0801     .6...........6..
 801388c:	0011 0000 36b8 0801 0011 0000 0000 0000     .....6..........
	...
 80138d8:	36cc 0801 0005 0000 36cc 0801 0005 0000     .6.......6......
 80138e8:	0000 0000 36d4 0801 000e 0000 36d4 0801     .....6.......6..
 80138f8:	000e 0000 0000 0000 0000 0000 0000 0000     ................
	...
 8013914:	36e4 0801 0004 0000 36e4 0801 0004 0000     .6.......6......
 8013924:	0009 0000 36ec 0801 0007 0000 362c 0801     .....6......,6..
 8013934:	0004 0000 0000 0000 36f4 0801 0009 0000     .........6......
 8013944:	3694 0801 0004 0000 0005 0000 3700 0801     .6...........7..
 8013954:	0012 0000 3700 0801 0012 0000 0006 0000     .....7..........
 8013964:	3714 0801 0003 0000 3714 0801 0003 0000     .7.......7......
 8013974:	0000 0000 3718 0801 0009 0000 3718 0801     .....7.......7..
 8013984:	0009 0000 0000 0000 3724 0801 0009 0000     ........$7......
 8013994:	3724 0801 0009 0000 0000 0000 3730 0801     $7..........07..
 80139a4:	000a 0000 3730 0801 000a 0000 0000 0000     ....07..........
 80139b4:	373c 0801 0004 0000 373c 0801 0004 0000     <7......<7......
 80139c4:	0008 0000 3744 0801 0008 0000 3744 0801     ....D7......D7..
 80139d4:	0008 0000 0000 0000 3750 0801 0008 0000     ........P7......
 80139e4:	3750 0801 0008 0000 0000 0000 375c 0801     P7..........\7..
 80139f4:	0011 0000 375c 0801 0011 0000 0000 0000     ....\7..........
 8013a04:	7473 0064 475f 4f4c 4142 5f4c 0000 0000     std._GLOBAL_....
 8013a14:	6128 6f6e 796e 6f6d 7375 6e20 6d61 7365     (anonymous names
 8013a24:	6170 6563 0029 0000 4e61 0000 3d26 0000     pace)...aN..&=..
 8013a34:	5361 0000 003d 0000 6161 0000 2626 0000     aS..=...aa..&&..
 8013a44:	6461 0000 0026 0000 6e61 0000 6c63 0000     ad..&...an..cl..
 8013a54:	2928 0000 6d63 0000 002c 0000 6f63 0000     ()..cm..,...co..
 8013a64:	007e 0000 5664 0000 3d2f 0000 6164 0000     ~...dV../=..da..
 8013a74:	6564 656c 6574 5d5b 0000 0000 6564 0000     delete[]....de..
 8013a84:	002a 0000 6c64 0000 6564 656c 6574 0000     *...dl..delete..
 8013a94:	7464 0000 002e 0000 7664 0000 002f 0000     dt......dv../...
 8013aa4:	4f65 0000 3d5e 0000 6f65 0000 005e 0000     eO..^=..eo..^...
 8013ab4:	7165 0000 3d3d 0000 6567 0000 3d3e 0000     eq..==..ge..>=..
 8013ac4:	7467 0000 003e 0000 7869 0000 5d5b 0000     gt..>...ix..[]..
 8013ad4:	536c 0000 3c3c 003d 656c 0000 3d3c 0000     lS..<<=.le..<=..
 8013ae4:	736c 0000 3c3c 0000 746c 0000 003c 0000     ls..<<..lt..<...
 8013af4:	496d 0000 3d2d 0000 4c6d 0000 3d2a 0000     mI..-=..mL..*=..
 8013b04:	696d 0000 002d 0000 6c6d 0000 6d6d 0000     mi..-...ml..mm..
 8013b14:	2d2d 0000 616e 0000 656e 5b77 005d 0000     --..na..new[]...
 8013b24:	656e 0000 3d21 0000 676e 0000 746e 0000     ne..!=..ng..nt..
 8013b34:	0021 0000 776e 0000 656e 0077 526f 0000     !...nw..new.oR..
 8013b44:	3d7c 0000 6f6f 0000 7c7c 0000 726f 0000     |=..oo..||..or..
 8013b54:	007c 0000 4c70 0000 3d2b 0000 6c70 0000     |...pL..+=..pl..
 8013b64:	002b 0000 6d70 0000 3e2d 002a 7070 0000     +...pm..->*.pp..
 8013b74:	2b2b 0000 7370 0000 7470 0000 3e2d 0000     ++..ps..pt..->..
 8013b84:	7571 0000 003f 0000 4d72 0000 3d25 0000     qu..?...rM..%=..
 8013b94:	5372 0000 3e3e 003d 6d72 0000 0025 0000     rS..>>=.rm..%...
 8013ba4:	7372 0000 3e3e 0000 7473 0000 6973 657a     rs..>>..st..size
 8013bb4:	666f 0020 7a73 0000 7461 0000 6c61 6769     of .sz..at..alig
 8013bc4:	6f6e 2066 0000 0000 7a61 0000               nof ....az..

08013bd0 <cplus_demangle_operators>:
 8013bd0:	3a2c 0801 3a30 0801 0002 0000 0002 0000     ,:..0:..........
 8013be0:	3a34 0801 3a38 0801 0001 0000 0002 0000     4:..8:..........
 8013bf0:	3a3c 0801 3a40 0801 0002 0000 0002 0000     <:..@:..........
 8013c00:	3a44 0801 3a48 0801 0001 0000 0001 0000     D:..H:..........
 8013c10:	3a4c 0801 3a48 0801 0001 0000 0002 0000     L:..H:..........
 8013c20:	3a50 0801 3a54 0801 0002 0000 0002 0000     P:..T:..........
 8013c30:	3a58 0801 3a5c 0801 0001 0000 0002 0000     X:..\:..........
 8013c40:	3a60 0801 3a64 0801 0001 0000 0001 0000     `:..d:..........
 8013c50:	3a68 0801 3a6c 0801 0002 0000 0002 0000     h:..l:..........
 8013c60:	3a70 0801 3a74 0801 0008 0000 0001 0000     p:..t:..........
 8013c70:	3a80 0801 3a84 0801 0001 0000 0001 0000     .:...:..........
 8013c80:	3a88 0801 3a8c 0801 0006 0000 0001 0000     .:...:..........
 8013c90:	3a94 0801 3a98 0801 0001 0000 0002 0000     .:...:..........
 8013ca0:	3a9c 0801 3aa0 0801 0001 0000 0002 0000     .:...:..........
 8013cb0:	3aa4 0801 3aa8 0801 0002 0000 0002 0000     .:...:..........
 8013cc0:	3aac 0801 3ab0 0801 0001 0000 0002 0000     .:...:..........
 8013cd0:	3ab4 0801 3ab8 0801 0002 0000 0002 0000     .:...:..........
 8013ce0:	3abc 0801 3ac0 0801 0002 0000 0002 0000     .:...:..........
 8013cf0:	3ac4 0801 3ac8 0801 0001 0000 0002 0000     .:...:..........
 8013d00:	3acc 0801 3ad0 0801 0002 0000 0002 0000     .:...:..........
 8013d10:	3ad4 0801 3ad8 0801 0003 0000 0002 0000     .:...:..........
 8013d20:	3adc 0801 3ae0 0801 0002 0000 0002 0000     .:...:..........
 8013d30:	3ae4 0801 3ae8 0801 0002 0000 0002 0000     .:...:..........
 8013d40:	3aec 0801 3af0 0801 0001 0000 0002 0000     .:...:..........
 8013d50:	3af4 0801 3af8 0801 0002 0000 0002 0000     .:...:..........
 8013d60:	3afc 0801 3b00 0801 0002 0000 0002 0000     .:...;..........
 8013d70:	3b04 0801 3b08 0801 0001 0000 0002 0000     .;...;..........
 8013d80:	3b0c 0801 3a84 0801 0001 0000 0002 0000     .;...:..........
 8013d90:	3b10 0801 3b14 0801 0002 0000 0001 0000     .;...;..........
 8013da0:	3b18 0801 3b1c 0801 0005 0000 0001 0000     .;...;..........
 8013db0:	3b24 0801 3b28 0801 0002 0000 0002 0000     $;..(;..........
 8013dc0:	3b2c 0801 3b08 0801 0001 0000 0001 0000     ,;...;..........
 8013dd0:	3b30 0801 3b34 0801 0001 0000 0001 0000     0;..4;..........
 8013de0:	3b38 0801 3b3c 0801 0003 0000 0001 0000     8;..<;..........
 8013df0:	3b40 0801 3b44 0801 0002 0000 0002 0000     @;..D;..........
 8013e00:	3b48 0801 3b4c 0801 0002 0000 0002 0000     H;..L;..........
 8013e10:	3b50 0801 3b54 0801 0001 0000 0002 0000     P;..T;..........
 8013e20:	3b58 0801 3b5c 0801 0002 0000 0002 0000     X;..\;..........
 8013e30:	3b60 0801 3b64 0801 0001 0000 0002 0000     `;..d;..........
 8013e40:	3b68 0801 3b6c 0801 0003 0000 0002 0000     h;..l;..........
 8013e50:	3b70 0801 3b74 0801 0002 0000 0001 0000     p;..t;..........
 8013e60:	3b78 0801 3b64 0801 0001 0000 0001 0000     x;..d;..........
 8013e70:	3b7c 0801 3b80 0801 0002 0000 0002 0000     |;...;..........
 8013e80:	3b84 0801 3b88 0801 0001 0000 0003 0000     .;...;..........
 8013e90:	3b8c 0801 3b90 0801 0002 0000 0002 0000     .;...;..........
 8013ea0:	3b94 0801 3b98 0801 0003 0000 0002 0000     .;...;..........
 8013eb0:	3b9c 0801 3ba0 0801 0001 0000 0002 0000     .;...;..........
 8013ec0:	3ba4 0801 3ba8 0801 0002 0000 0002 0000     .;...;..........
 8013ed0:	3bac 0801 3bb0 0801 0007 0000 0001 0000     .;...;..........
 8013ee0:	3bb8 0801 3bb0 0801 0007 0000 0001 0000     .;...;..........
 8013ef0:	3bbc 0801 3bc0 0801 0008 0000 0001 0000     .;...;..........
 8013f00:	3bcc 0801 3bc0 0801 0008 0000 0001 0000     .;...;..........
	...
 8013f20:	7473 6972 676e 6c20 7469 7265 6c61 0000     string literal..
 8013f30:	7473 3a64 613a 6c6c 636f 7461 726f 0000     std::allocator..
 8013f40:	6c61 6f6c 6163 6f74 0072 0000 7473 3a64     allocator...std:
 8013f50:	623a 7361 6369 735f 7274 6e69 0067 0000     :basic_string...
 8013f60:	6162 6973 5f63 7473 6972 676e 0000 0000     basic_string....
 8013f70:	7473 3a64 733a 7274 6e69 0067 7473 3a64     std::string.std:
 8013f80:	623a 7361 6369 735f 7274 6e69 3c67 6863     :basic_string<ch
 8013f90:	7261 202c 7473 3a64 633a 6168 5f72 7274     ar, std::char_tr
 8013fa0:	6961 7374 633c 6168 3e72 202c 7473 3a64     aits<char>, std:
 8013fb0:	613a 6c6c 636f 7461 726f 633c 6168 3e72     :allocator<char>
 8013fc0:	3e20 0000 7473 3a64 693a 7473 6572 6d61      >..std::istream
 8013fd0:	0000 0000 7473 3a64 623a 7361 6369 695f     ....std::basic_i
 8013fe0:	7473 6572 6d61 633c 6168 2c72 7320 6474     stream<char, std
 8013ff0:	3a3a 6863 7261 745f 6172 7469 3c73 6863     ::char_traits<ch
 8014000:	7261 203e 003e 0000 6162 6973 5f63 7369     ar> >...basic_is
 8014010:	7274 6165 006d 0000 7473 3a64 6f3a 7473     tream...std::ost
 8014020:	6572 6d61 0000 0000 7473 3a64 623a 7361     ream....std::bas
 8014030:	6369 6f5f 7473 6572 6d61 633c 6168 2c72     ic_ostream<char,
 8014040:	7320 6474 3a3a 6863 7261 745f 6172 7469      std::char_trait
 8014050:	3c73 6863 7261 203e 003e 0000 6162 6973     s<char> >...basi
 8014060:	5f63 736f 7274 6165 006d 0000 7473 3a64     c_ostream...std:
 8014070:	693a 736f 7274 6165 006d 0000 7473 3a64     :iostream...std:
 8014080:	623a 7361 6369 695f 736f 7274 6165 3c6d     :basic_iostream<
 8014090:	6863 7261 202c 7473 3a64 633a 6168 5f72     char, std::char_
 80140a0:	7274 6961 7374 633c 6168 3e72 3e20 0000     traits<char> >..
 80140b0:	6162 6973 5f63 6f69 7473 6572 6d61 0000     basic_iostream..

080140c0 <standard_subs>:
 80140c0:	0074 0000 3a04 0801 0003 0000 3a04 0801     t....:.......:..
 80140d0:	0003 0000 0000 0000 0000 0000 0061 0000     ............a...
 80140e0:	3f30 0801 000e 0000 3f30 0801 000e 0000     0?......0?......
 80140f0:	3f40 0801 0009 0000 0062 0000 3f4c 0801     @?......b...L?..
 8014100:	0011 0000 3f4c 0801 0011 0000 3f60 0801     ....L?......`?..
 8014110:	000c 0000 0073 0000 3f70 0801 000b 0000     ....s...p?......
 8014120:	3f7c 0801 0046 0000 3f60 0801 000c 0000     |?..F...`?......
 8014130:	0069 0000 3fc4 0801 000c 0000 3fd4 0801     i....?.......?..
 8014140:	0031 0000 4008 0801 000d 0000 006f 0000     1....@......o...
 8014150:	4018 0801 000c 0000 4028 0801 0031 0000     .@......(@..1...
 8014160:	405c 0801 000d 0000 0064 0000 406c 0801     \@......d...l@..
 8014170:	000d 0000 407c 0801 0032 0000 40b0 0801     ....|@..2....@..
 8014180:	000e 0000 6c25 0064 3a3a 0000 414a 7272     ....%ld.::..JArr
 8014190:	7961 0000 7476 6261 656c 6620 726f 0020     ay..vtable for .
 80141a0:	5456 2054 6f66 2072 0000 0000 6f63 736e     VTT for ....cons
 80141b0:	7274 6375 6974 6e6f 7620 6174 6c62 2065     truction vtable 
 80141c0:	6f66 2072 0000 0000 692d 2d6e 0000 0000     for ....-in-....
 80141d0:	7974 6570 6e69 6f66 6620 726f 0020 0000     typeinfo for ...
 80141e0:	7974 6570 6e69 6f66 6e20 6d61 2065 6f66     typeinfo name fo
 80141f0:	2072 0000 7974 6570 6e69 6f66 6620 206e     r ..typeinfo fn 
 8014200:	6f66 2072 0000 0000 6f6e 2d6e 6976 7472     for ....non-virt
 8014210:	6175 206c 6874 6e75 206b 6f74 0020 0000     ual thunk to ...
 8014220:	6976 7472 6175 206c 6874 6e75 206b 6f74     virtual thunk to
 8014230:	0020 0000 6f63 6176 6972 6e61 2074 6572      ...covariant re
 8014240:	7574 6e72 7420 7568 6b6e 7420 206f 0000     turn thunk to ..
 8014250:	616a 6176 4320 616c 7373 6620 726f 0020     java Class for .
 8014260:	7567 7261 2064 6176 6972 6261 656c 6620     guard variable f
 8014270:	726f 0020 6572 6566 6572 636e 2065 6574     or .reference te
 8014280:	706d 726f 7261 2079 6f66 2072 0000 0000     mporary for ....
 8014290:	6968 6464 6e65 6120 696c 7361 6620 726f     hidden alias for
 80142a0:	0020 0000 535f 7461 0020 0000 415f 6363      ..._Sat ..._Acc
 80142b0:	6d75 0000 465f 6172 7463 0000 202c 0000     um.._Fract.., ..
 80142c0:	706f 7265 7461 726f 0000 0000 706f 7265     operator....oper
 80142d0:	7461 726f 0020 0000 3a20 0020 6c75 0000     ator ... : .ul..
 80142e0:	6c6c 0000 6c75 006c 6166 736c 0065 0000     ll..ull.false...
 80142f0:	7274 6575 0000 0000 616a 6176 7220 7365     true....java res
 8014300:	756f 6372 2065 0000 6564 6c63 7974 6570     ource ..decltype
 8014310:	2820 0000 707b 7261 236d 0000 6c67 626f      (..{parm#..glob
 8014320:	6c61 6320 6e6f 7473 7572 7463 726f 2073     al constructors 
 8014330:	656b 6579 2064 6f74 0020 0000 6c67 626f     keyed to ...glob
 8014340:	6c61 6420 7365 7274 6375 6f74 7372 6b20     al destructors k
 8014350:	7965 6465 7420 206f 0000 0000 6c7b 6d61     eyed to ....{lam
 8014360:	6462 2861 0000 0000 2329 0000 757b 6e6e     bda(....)#..{unn
 8014370:	6d61 6465 7420 7079 2365 0000 5b20 6c63     amed type#.. [cl
 8014380:	6e6f 2065 0000 0000 647b 6665 7561 746c     one ....{default
 8014390:	6120 6772 0023 0000 3a7d 003a 7220 7365      arg#...}::. res
 80143a0:	7274 6369 0074 0000 7620 6c6f 7461 6c69     trict... volatil
 80143b0:	0065 0000 6320 6e6f 7473 0000 6f63 706d     e... const..comp
 80143c0:	656c 2078 0000 0000 6d69 6761 6e69 7261     lex ....imaginar
 80143d0:	2079 0000 3a3a 002a 5f20 765f 6365 6f74     y ..::*. __vecto
 80143e0:	2872 0000 2820 0000 0000 0000 0000 0000     r(.. (..........

080143f0 <_global_impure_ptr>:
 80143f0:	0050 2000 0000 0000 0000 0000 0000 0000     P.. ............

08014400 <blanks.3927>:
 8014400:	2020 2020 2020 2020 2020 2020 2020 2020                     

08014410 <zeroes.3928>:
 8014410:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08014420 <blanks.3885>:
 8014420:	2020 2020 2020 2020 2020 2020 2020 2020                     

08014430 <zeroes.3886>:
 8014430:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08014440 <p05.2449>:
 8014440:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08014450 <__mprec_tens>:
 8014450:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8014460:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8014470:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8014480:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8014490:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80144a0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80144b0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80144c0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80144d0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80144e0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80144f0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8014500:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8014510:	9db4 79d9 7843 44ea                         ...yCx.D

08014518 <__mprec_tinytens>:
 8014518:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8014528:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8014538:	6f43 64ac 0628 0ac8                         Co.d(...

08014540 <__mprec_bigtens>:
 8014540:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8014550:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8014560:	bf3c 7f73 4fdd 7515 0000 0000 0000 0000     <.s..O.u........

08014570 <blanks.3871>:
 8014570:	2020 2020 2020 2020 2020 2020 2020 2020                     

08014580 <zeroes.3872>:
 8014580:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08014590 <_ZTV12IFreeRTOSObj>:
	...
 8014598:	20a1 0801 20a1 0801 20a1 0801 0000 0000     . ... ... ......
	...
 80145b0:	7570 6572 7620 7269 7574 6c61 6d20 7465     pure virtual met
 80145c0:	6f68 2064 6163 6c6c 6465 000a 0000 0000     hod called......
 80145d0:	6574 6d72 6e69 7461 2065 6163 6c6c 6465     terminate called
 80145e0:	7220 6365 7275 6973 6576 796c 000a 0000      recursively....
 80145f0:	6574 6d72 6e69 7461 2065 6163 6c6c 6465     terminate called
 8014600:	6120 7466 7265 7420 7268 776f 6e69 2067      after throwing 
 8014610:	6e61 6920 736e 6174 636e 2065 666f 2720     an instance of '
 8014620:	0000 0000 0a27 0000 6574 6d72 6e69 7461     ....'...terminat
 8014630:	2065 6163 6c6c 6465 7720 7469 6f68 7475     e called without
 8014640:	6120 206e 6361 6974 6576 6520 6378 7065      an active excep
 8014650:	6974 6e6f 000a 0000 2020 6877 7461 2928     tion....  what()
 8014660:	203a 0020 0000 0000 0000 0000 0000 0000     :  .............

08014670 <_ZTVSt9exception>:
 8014670:	0000 0000 46a0 0801 2701 0801 2761 0801     .....F...'..a'..
 8014680:	2721 0801 0000 0000 0000 0000 0000 0000     !'..............

08014690 <_ZTIN10__cxxabiv115__forced_unwindE>:
 8014690:	49b8 0801 4770 0801 0000 0000 0000 0000     .I..pG..........

080146a0 <_ZTISt9exception>:
 80146a0:	49b8 0801 4760 0801 0000 0000 0000 0000     .I..`G..........

080146b0 <_ZTSSt13bad_exception>:
 80146b0:	7453 3331 6162 5f64 7865 6563 7470 6f69     St13bad_exceptio
 80146c0:	006e 0000 0000 0000 0000 0000 0000 0000     n...............
 80146d0:	7473 3a64 653a 6378 7065 6974 6e6f 0000     std::exception..
 80146e0:	7473 3a64 623a 6461 655f 6378 7065 6974     std::bad_excepti
 80146f0:	6e6f 0000 0000 0000 0000 0000 0000 0000     on..............

08014700 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
 8014700:	314e 5f30 635f 7878 6261 7669 3131 5f39     N10__cxxabiv119_
 8014710:	665f 726f 6965 6e67 655f 6378 7065 6974     _foreign_excepti
 8014720:	6e6f 0045 0000 0000 0000 0000 0000 0000     onE.............

08014730 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
 8014730:	49b8 0801 4700 0801 0000 0000 0000 0000     .I...G..........

08014740 <_ZTVSt13bad_exception>:
 8014740:	0000 0000 4790 0801 2711 0801 2741 0801     .....G...'..A'..
 8014750:	2731 0801 0000 0000 0000 0000 0000 0000     1'..............

08014760 <_ZTSSt9exception>:
 8014760:	7453 6539 6378 7065 6974 6e6f 0000 0000     St9exception....

08014770 <_ZTSN10__cxxabiv115__forced_unwindE>:
 8014770:	314e 5f30 635f 7878 6261 7669 3131 5f35     N10__cxxabiv115_
 8014780:	665f 726f 6563 5f64 6e75 6977 646e 0045     _forced_unwindE.

08014790 <_ZTISt13bad_exception>:
 8014790:	48b8 0801 46b0 0801 46a0 0801 0000 0000     .H...F...F......

080147a0 <_ZTIPv>:
 80147a0:	4888 0801 47c0 0801 0000 0000 47b0 0801     .H...G.......G..

080147b0 <_ZTIv>:
 80147b0:	4828 0801 47d0 0801 0000 0000 0000 0000     (H...G..........

080147c0 <_ZTSPv>:
 80147c0:	7650 0000 0000 0000 0000 0000 0000 0000     Pv..............

080147d0 <_ZTSv>:
 80147d0:	0076 0000 0000 0000 0000 0000 0000 0000     v...............

080147e0 <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
 80147e0:	48b8 0801 47f0 0801 4920 0801 0000 0000     .H...G.. I......

080147f0 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
 80147f0:	314e 5f30 635f 7878 6261 7669 3231 5f33     N10__cxxabiv123_
 8014800:	665f 6e75 6164 656d 746e 6c61 745f 7079     _fundamental_typ
 8014810:	5f65 6e69 6f66 0045 0000 0000 0000 0000     e_infoE.........

08014820 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
 8014820:	0000 0000 47e0 0801 2e91 0801 2eb1 0801     .....G..........
 8014830:	30c1 0801 30d1 0801 3151 0801 30e1 0801     .0...0..Q1...0..

08014840 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
 8014840:	314e 5f30 635f 7878 6261 7669 3131 5f39     N10__cxxabiv119_
 8014850:	705f 696f 746e 7265 745f 7079 5f65 6e69     _pointer_type_in
 8014860:	6f66 0045 0000 0000 0000 0000 0000 0000     foE.............

08014870 <_ZTIN10__cxxabiv119__pointer_type_infoE>:
 8014870:	48b8 0801 4840 0801 4a20 0801 0000 0000     .H..@H.. J......

08014880 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
 8014880:	0000 0000 4870 0801 2ee1 0801 2f01 0801     ....pH......./..
 8014890:	2ed1 0801 30d1 0801 33e1 0801 30e1 0801     .....0...3...0..
 80148a0:	2f21 0801 0000 0000 0000 0000 0000 0000     !/..............

080148b0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80148b0:	0000 0000 48e0 0801 2f71 0801 2f91 0801     .....H..q/.../..
 80148c0:	30c1 0801 30d1 0801 32a1 0801 31b1 0801     .0...0...2...1..
 80148d0:	2fb1 0801 2fe1 0801 3071 0801 0000 0000     ./.../..q0......

080148e0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80148e0:	48b8 0801 48f0 0801 49e0 0801 0000 0000     .H...H...I......

080148f0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80148f0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 8014900:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 8014910:	666e 456f 0000 0000 0000 0000 0000 0000     nfoE............

08014920 <_ZTISt9type_info>:
 8014920:	49b8 0801 4930 0801 0000 0000 0000 0000     .I..0I..........

08014930 <_ZTSSt9type_info>:
 8014930:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

08014940 <_ZTVSt9type_info>:
 8014940:	0000 0000 4920 0801 30b1 0801 30f1 0801     .... I...0...0..
 8014950:	30c1 0801 30d1 0801 3151 0801 30e1 0801     .0...0..Q1...0..

08014960 <_ZTVSt10bad_typeid>:
 8014960:	0000 0000 4980 0801 3171 0801 3191 0801     .....I..q1...1..
 8014970:	3161 0801 0000 0000 0000 0000 0000 0000     a1..............

08014980 <_ZTISt10bad_typeid>:
 8014980:	48b8 0801 49a0 0801 46a0 0801 0000 0000     .H...I...F......
 8014990:	7473 3a64 623a 6461 745f 7079 6965 0064     std::bad_typeid.

080149a0 <_ZTSSt10bad_typeid>:
 80149a0:	7453 3031 6162 5f64 7974 6570 6469 0000     St10bad_typeid..

080149b0 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80149b0:	0000 0000 49e0 0801 3221 0801 3241 0801     .....I..!2..A2..
 80149c0:	30c1 0801 30d1 0801 32a1 0801 31b1 0801     .0...0...2...1..
 80149d0:	3201 0801 3261 0801 31f1 0801 0000 0000     .2..a2...1......

080149e0 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80149e0:	48b8 0801 49f0 0801 4920 0801 0000 0000     .H...I.. I......

080149f0 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80149f0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 8014a00:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 8014a10:	0045 0000 0000 0000 0000 0000 0000 0000     E...............

08014a20 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
 8014a20:	48b8 0801 4a30 0801 4920 0801 0000 0000     .H..0J.. I......

08014a30 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
 8014a30:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 8014a40:	705f 6162 6573 745f 7079 5f65 6e69 6f66     _pbase_type_info
 8014a50:	0045 0000 0000 0000 0000 0000 0000 0000     E...............

08014a60 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
 8014a60:	0000 0000 4a20 0801 33a1 0801 33c1 0801     .... J...3...3..
 8014a70:	30c1 0801 30d1 0801 33e1 0801 30e1 0801     .0...0...3...0..
 8014a80:	3381 0801 0000 0000 0000 0000 0000 0000     .3..............
 8014a90:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
 8014aa0:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
 8014ab0:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
 8014ac0:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...
 8014ad0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
 8014ae0:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 8014af0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8014b00:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 8014b10:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 8014b20:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
 8014b30:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
 8014b40:	4f50 4953 0058 0000 002e 0000               POSIX.......
