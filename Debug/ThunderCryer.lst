
ThunderCryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00035d7c  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000138  08035f04  08035f04  0003df04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000208  0803603c  0803603c  0003e03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08036244  08036244  0003e244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803624c  0803624c  0003e24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009b8  20000000  08036250  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a278  200009b8  08036c08  000409b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  2000ac30  08036c08  00042c30  2**0
                  ALLOC
  9 .ARM.attributes 00000033  00000000  00000000  000409b8  2**0
                  CONTENTS, READONLY
 10 .debug_line   0002a4ca  00000000  00000000  000409eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00060d8a  00000000  00000000  0006aeb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000119f6  00000000  00000000  000cbc3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000018d0  00000000  00000000  000dd638  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001540  00000000  00000000  000def08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000011  00000000  00000000  000e0448  2**0
                  CONTENTS, READONLY
 16 .debug_loc    00021bc8  00000000  00000000  000e0459  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 014ecba4  00000000  00000000  00102021  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0001313a  00000000  00000000  015eebc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  0000aba4  00000000  00000000  01601d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200009b8 	.word	0x200009b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08035eec 	.word	0x08035eec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08035eec 	.word	0x08035eec
 80001d0:	200009bc 	.word	0x200009bc
 80001d4:	200009b8 	.word	0x200009b8
 80001d8:	00000000 	.word	0x00000000

080001dc <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 80001e4:	f04f 0300 	mov.w	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	68db      	ldr	r3, [r3, #12]
 80001ee:	f04f 32ff 	mov.w	r2, #4294967295
 80001f2:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	f04f 32ff 	mov.w	r2, #4294967295
 80001fc:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000204:	60fb      	str	r3, [r7, #12]
  int_mask.b.usbsuspend = 1; 
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800020c:	60fb      	str	r3, [r7, #12]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	619a      	str	r2, [r3, #24]
}
 8000216:	f107 0714 	add.w	r7, r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8000228:	f04f 0300 	mov.w	r3, #0
 800022c:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 800022e:	f04f 0300 	mov.w	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 800023a:	f04f 0003 	mov.w	r0, #3
 800023e:	f018 fb1d 	bl	801887c <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	f103 0301 	add.w	r3, r3, #1
 8000250:	617b      	str	r3, [r7, #20]
 8000252:	697a      	ldr	r2, [r7, #20]
 8000254:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 8000258:	f2c0 0303 	movt	r3, #3
 800025c:	429a      	cmp	r2, r3
 800025e:	d902      	bls.n	8000266 <USB_OTG_CoreReset+0x46>
    {
      return USB_OTG_OK;
 8000260:	f04f 0300 	mov.w	r3, #0
 8000264:	e02a      	b.n	80002bc <USB_OTG_CoreReset+0x9c>
    }
  }
  while (greset.b.ahbidle == 0);
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0e4      	beq.n	800023a <USB_OTG_CoreReset+0x1a>
  /* Core Soft Reset */
  count = 0;
 8000270:	f04f 0300 	mov.w	r3, #0
 8000274:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	f103 0301 	add.w	r3, r3, #1
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	697a      	ldr	r2, [r7, #20]
 8000298:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 800029c:	f2c0 0303 	movt	r3, #3
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d805      	bhi.n	80002b0 <USB_OTG_CoreReset+0x90>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d1eb      	bne.n	8000286 <USB_OTG_CoreReset+0x66>
 80002ae:	e000      	b.n	80002b2 <USB_OTG_CoreReset+0x92>
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 80002b0:	bf00      	nop
    }
  }
  while (greset.b.csftrst == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80002b2:	f04f 0003 	mov.w	r0, #3
 80002b6:	f018 fae1 	bl	801887c <USB_OTG_BSP_uDelay>
  return status;
 80002ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	f107 0718 	add.w	r7, r7, #24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop

080002c8 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	71fa      	strb	r2, [r7, #7]
 80002d4:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80002d6:	f04f 0300 	mov.w	r3, #0
 80002da:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	78db      	ldrb	r3, [r3, #3]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d12d      	bne.n	8000340 <USB_OTG_WritePacket+0x78>
  {
    uint32_t count32b= 0 , i= 0;
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
 80002ea:	f04f 0300 	mov.w	r3, #0
 80002ee:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80002f0:	88bb      	ldrh	r3, [r7, #4]
 80002f2:	f103 0303 	add.w	r3, r3, #3
 80002f6:	f103 0203 	add.w	r2, r3, #3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	bfb8      	it	lt
 80002fe:	4613      	movlt	r3, r2
 8000300:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8000304:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	68fa      	ldr	r2, [r7, #12]
 800030a:	f103 0332 	add.w	r3, r3, #50	; 0x32
 800030e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 8000318:	f04f 0300 	mov.w	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
 800031e:	e00b      	b.n	8000338 <USB_OTG_WritePacket+0x70>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	693b      	ldr	r3, [r7, #16]
 8000326:	601a      	str	r2, [r3, #0]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	f103 0301 	add.w	r3, r3, #1
 800032e:	61fb      	str	r3, [r7, #28]
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	f103 0304 	add.w	r3, r3, #4
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	69fa      	ldr	r2, [r7, #28]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	429a      	cmp	r2, r3
 800033e:	d3ef      	bcc.n	8000320 <USB_OTG_WritePacket+0x58>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
    }
  }
  return status;
 8000340:	7efb      	ldrb	r3, [r7, #27]
}
 8000342:	4618      	mov	r0, r3
 8000344:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4613      	mov	r3, r2
 800035c:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 800035e:	f04f 0300 	mov.w	r3, #0
 8000362:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 8000364:	88fb      	ldrh	r3, [r7, #6]
 8000366:	f103 0303 	add.w	r3, r3, #3
 800036a:	f103 0203 	add.w	r2, r3, #3
 800036e:	2b00      	cmp	r3, #0
 8000370:	bfb8      	it	lt
 8000372:	4613      	movlt	r3, r2
 8000374:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8000378:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000380:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8000382:	f04f 0300 	mov.w	r3, #0
 8000386:	61fb      	str	r3, [r7, #28]
 8000388:	e00b      	b.n	80003a2 <USB_OTG_ReadPacket+0x52>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	601a      	str	r2, [r3, #0]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	f103 0301 	add.w	r3, r3, #1
 8000398:	61fb      	str	r3, [r7, #28]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	f103 0304 	add.w	r3, r3, #4
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	69fa      	ldr	r2, [r7, #28]
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d3ef      	bcc.n	800038a <USB_OTG_ReadPacket+0x3a>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
 80003aa:	68bb      	ldr	r3, [r7, #8]
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b087      	sub	sp, #28
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 80003c4:	f04f 0300 	mov.w	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 80003ca:	f04f 0300 	mov.w	r3, #0
 80003ce:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f04f 0200 	mov.w	r2, #0
 80003d6:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f04f 0201 	mov.w	r2, #1
 80003de:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f04f 0240 	mov.w	r2, #64	; 0x40
 80003e6:	809a      	strh	r2, [r3, #4]
    
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d117      	bne.n	800041e <USB_OTG_SelectCore+0x66>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 80003ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003f2:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f04f 0201 	mov.w	r2, #1
 80003fa:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f04f 0208 	mov.w	r2, #8
 8000402:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f04f 0204 	mov.w	r2, #4
 800040a:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000412:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f04f 0202 	mov.w	r2, #2
 800041a:	721a      	strb	r2, [r3, #8]
 800041c:	e01f      	b.n	800045e <USB_OTG_SelectCore+0xa6>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d11c      	bne.n	800045e <USB_OTG_SelectCore+0xa6>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	f2c4 0304 	movt	r3, #16388	; 0x4004
 800042c:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f04f 0200 	mov.w	r2, #0
 8000434:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f04f 020c 	mov.w	r2, #12
 800043c:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f04f 0206 	mov.w	r2, #6
 8000444:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800044c:	80da      	strh	r2, [r3, #6]
    
#ifdef USB_OTG_ULPI_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_ULPI_PHY;
#else    
 #ifdef USB_OTG_EMBEDDED_PHY_ENABLED
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	f04f 0202 	mov.w	r2, #2
 8000454:	721a      	strb	r2, [r3, #8]
   #endif
 #endif  
#endif      
    
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED    
    pdev->cfg.dma_enable       = 1;    
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f04f 0201 	mov.w	r2, #1
 800045c:	70da      	strb	r2, [r3, #3]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 800045e:	693a      	ldr	r2, [r7, #16]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800046a:	461a      	mov	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	e023      	b.n	80004c0 <USB_OTG_SelectCore+0x108>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	ea4f 1243 	mov.w	r2, r3, lsl #5
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	18d3      	adds	r3, r2, r3
 8000482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8000486:	461a      	mov	r2, r3
 8000488:	6879      	ldr	r1, [r7, #4]
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	f103 0304 	add.w	r3, r3, #4
 8000490:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000494:	18cb      	adds	r3, r1, r3
 8000496:	609a      	str	r2, [r3, #8]
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	ea4f 1243 	mov.w	r2, r3, lsl #5
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	18d3      	adds	r3, r2, r3
 80004a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80004a6:	461a      	mov	r2, r3
 80004a8:	6879      	ldr	r1, [r7, #4]
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	f103 0314 	add.w	r3, r3, #20
 80004b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80004b4:	18cb      	adds	r3, r1, r3
 80004b6:	605a      	str	r2, [r3, #4]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	f103 0301 	add.w	r3, r3, #1
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	785b      	ldrb	r3, [r3, #1]
 80004c4:	461a      	mov	r2, r3
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d8d5      	bhi.n	8000478 <USB_OTG_SelectCore+0xc0>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004d2:	461a      	mov	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80004de:	461a      	mov	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80004e6:	f04f 0300 	mov.w	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e013      	b.n	8000516 <USB_OTG_SelectCore+0x15e>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	ea4f 1243 	mov.w	r2, r3, lsl #5
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	18d3      	adds	r3, r2, r3
 80004f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80004fc:	461a      	mov	r2, r3
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8000506:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800050a:	18cb      	adds	r3, r1, r3
 800050c:	609a      	str	r2, [r3, #8]
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	f103 0301 	add.w	r3, r3, #1
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	461a      	mov	r2, r3
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	429a      	cmp	r2, r3
 8000520:	d8e5      	bhi.n	80004ee <USB_OTG_SelectCore+0x136>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8000522:	f04f 0300 	mov.w	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e013      	b.n	8000552 <USB_OTG_SelectCore+0x19a>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	ea4f 3203 	mov.w	r2, r3, lsl #12
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	18d3      	adds	r3, r2, r3
 8000534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000538:	461a      	mov	r2, r3
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8000542:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000546:	18cb      	adds	r3, r1, r3
 8000548:	609a      	str	r2, [r3, #8]
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	f103 0301 	add.w	r3, r3, #1
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	429a      	cmp	r2, r3
 800055c:	d8e5      	bhi.n	800052a <USB_OTG_SelectCore+0x172>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 800056c:	7bfb      	ldrb	r3, [r7, #15]
}
 800056e:	4618      	mov	r0, r3
 8000570:	f107 071c 	add.w	r7, r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	77fb      	strb	r3, [r7, #31]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GI2CCTL_TypeDef  i2cctl;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 800058a:	f04f 0300 	mov.w	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  gccfg.d32 = 0;
 8000590:	f04f 0300 	mov.w	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  ahbcfg.d32 = 0;
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  

  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7a1b      	ldrb	r3, [r3, #8]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d155      	bne.n	8000650 <USB_OTG_CoreInit+0xd4>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005aa:	617b      	str	r3, [r7, #20]
    gccfg.b.pwdn = 0;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	f36f 4310 	bfc	r3, #16, #1
 80005b2:	617b      	str	r3, [r7, #20]
    
    if (pdev->cfg.Sof_output)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d003      	beq.n	80005c4 <USB_OTG_CoreInit+0x48>
    {
      gccfg.b.sofouten = 1;   
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c2:	617b      	str	r3, [r7, #20]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	697a      	ldr	r2, [r7, #20]
 80005ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 80005cc:	f04f 0300 	mov.w	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	61bb      	str	r3, [r7, #24]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	f36f 1386 	bfc	r3, #6, #1
 80005e0:	61bb      	str	r3, [r7, #24]
#ifdef USB_OTG_INTERNAL_VBUS_ENABLED
    usbcfg.b.ulpi_ext_vbus_drv = 0; /* Use internal VBUS */
#else
 #ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	61bb      	str	r3, [r7, #24]
 #endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	f36f 5396 	bfc	r3, #22, #1
 80005f0:	61bb      	str	r3, [r7, #24]
    usbcfg.b.ulpi_utmi_sel     = 1; /* ULPI seleInterfacect */
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	f043 0310 	orr.w	r3, r3, #16
 80005f8:	61bb      	str	r3, [r7, #24]
    
    usbcfg.b.phyif             = 0; /* 8 bits */
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	f36f 03c3 	bfc	r3, #3, #1
 8000600:	61bb      	str	r3, [r7, #24]
    usbcfg.b.ddrsel            = 0; /* single data rate */
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	f36f 13c7 	bfc	r3, #7, #1
 8000608:	61bb      	str	r3, [r7, #24]
    
    usbcfg.b.ulpi_fsls = 0;
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	f36f 4351 	bfc	r3, #17, #1
 8000610:	61bb      	str	r3, [r7, #24]
    usbcfg.b.ulpi_clk_sus_m = 0;
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	f36f 43d3 	bfc	r3, #19, #1
 8000618:	61bb      	str	r3, [r7, #24]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	69ba      	ldr	r2, [r7, #24]
 8000620:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff fdfc 	bl	8000220 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	78db      	ldrb	r3, [r3, #3]
 800062c:	2b01      	cmp	r3, #1
 800062e:	f040 8089 	bne.w	8000744 <USB_OTG_CoreInit+0x1c8>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f04f 0205 	mov.w	r2, #5
 8000638:	f362 0344 	bfi	r3, r2, #1, #4
 800063c:	60fb      	str	r3, [r7, #12]
      ahbcfg.b.dmaenable = 1;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f043 0320 	orr.w	r3, r3, #32
 8000644:	60fb      	str	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	e079      	b.n	8000744 <USB_OTG_CoreInit+0x1c8>
    }    
  }
  else /* FS interface (embedded Phy or I2C Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	61bb      	str	r3, [r7, #24]
    usbcfg.b.physel  = 1; /* FS Interface */
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065e:	61bb      	str	r3, [r7, #24]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	69ba      	ldr	r2, [r7, #24]
 8000666:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fdd9 	bl	8000220 <USB_OTG_CoreReset>
    /* Enable the I2C interface and deactivate the power down*/
    gccfg.d32 = 0;
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
    gccfg.b.pwdn = 1;
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067a:	617b      	str	r3, [r7, #20]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7a1b      	ldrb	r3, [r3, #8]
 8000680:	2b03      	cmp	r3, #3
 8000682:	d103      	bne.n	800068c <USB_OTG_CoreInit+0x110>
    {
      gccfg.b.i2cifen = 1;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068a:	617b      	str	r3, [r7, #20]
    }   
    gccfg.b.vbussensingA = 1 ;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000692:	617b      	str	r3, [r7, #20]
    gccfg.b.vbussensingB = 1 ;     
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800069a:	617b      	str	r3, [r7, #20]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a2:	617b      	str	r3, [r7, #20]
#endif    
    
    if(pdev->cfg.Sof_output)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7a5b      	ldrb	r3, [r3, #9]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d003      	beq.n	80006b4 <USB_OTG_CoreInit+0x138>
    {
      gccfg.b.sofouten = 1;  
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b2:	617b      	str	r3, [r7, #20]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 80006bc:	f04f 0014 	mov.w	r0, #20
 80006c0:	f018 f908 	bl	80188d4 <USB_OTG_BSP_mDelay>
    /* Program GUSBCFG.OtgUtmifsSel to I2C*/
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7a1b      	ldrb	r3, [r3, #8]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d103      	bne.n	80006dc <USB_OTG_CoreInit+0x160>
    {
      usbcfg.b.otgutmifssel = 1;
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006da:	61bb      	str	r3, [r7, #24]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	60da      	str	r2, [r3, #12]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7a1b      	ldrb	r3, [r3, #8]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d12b      	bne.n	8000744 <USB_OTG_CoreInit+0x1c8>
    {
      /*Program GI2CCTL.I2CEn*/
      i2cctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GI2CCTL);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	613b      	str	r3, [r7, #16]
      i2cctl.b.i2cdevaddr = 1;
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	f04f 0201 	mov.w	r2, #1
 80006fa:	f362 639b 	bfi	r3, r2, #26, #2
 80006fe:	613b      	str	r3, [r7, #16]
      i2cctl.b.i2cen = 0;
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	f36f 53d7 	bfc	r3, #23, #1
 8000706:	613b      	str	r3, [r7, #16]
      i2cctl.b.dat_se0 = 1;
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	613b      	str	r3, [r7, #16]
      i2cctl.b.addr = 0x2D;
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8000716:	f362 4316 	bfi	r3, r2, #16, #7
 800071a:	613b      	str	r3, [r7, #16]
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	631a      	str	r2, [r3, #48]	; 0x30
      
      USB_OTG_BSP_mDelay(200);
 8000724:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8000728:	f018 f8d4 	bl	80188d4 <USB_OTG_BSP_mDelay>
      
      i2cctl.b.i2cen = 1;
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000732:	613b      	str	r3, [r7, #16]
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	631a      	str	r2, [r3, #48]	; 0x30
      USB_OTG_BSP_mDelay(200);
 800073c:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8000740:	f018 f8c8 	bl	80188d4 <USB_OTG_BSP_mDelay>
    }
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	78db      	ldrb	r3, [r3, #3]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d111      	bne.n	8000770 <USB_OTG_CoreInit+0x1f4>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	60fb      	str	r3, [r7, #12]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f04f 0205 	mov.w	r2, #5
 800075a:	f362 0344 	bfi	r3, r2, #1, #4
 800075e:	60fb      	str	r3, [r7, #12]
    ahbcfg.b.dmaenable = 1;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 8000770:	7ffb      	ldrb	r3, [r7, #31]
}
 8000772:	4618      	mov	r0, r3
 8000774:	f107 0720 	add.w	r7, r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8000784:	f04f 0300 	mov.w	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	68d2      	ldr	r2, [r2, #12]
 80007a0:	6892      	ldr	r2, [r2, #8]
 80007a2:	4611      	mov	r1, r2
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	609a      	str	r2, [r3, #8]
  return status;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	f107 0714 	add.w	r7, r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68d2      	ldr	r2, [r2, #12]
 80007dc:	6892      	ldr	r2, [r2, #8]
 80007de:	4611      	mov	r1, r2
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	ea6f 0202 	mvn.w	r2, r2
 80007e6:	400a      	ands	r2, r1
 80007e8:	609a      	str	r2, [r3, #8]
  return status;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	f107 0714 	add.w	r7, r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8000802:	f04f 0300 	mov.w	r3, #0
 8000806:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 800080e:	f04f 0300 	mov.w	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	b2da      	uxtb	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f362 138a 	bfi	r3, r2, #6, #5
 800082c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	f103 0301 	add.w	r3, r3, #1
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 800084c:	f2c0 0303 	movt	r3, #3
 8000850:	429a      	cmp	r2, r3
 8000852:	d805      	bhi.n	8000860 <USB_OTG_FlushTxFifo+0x68>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1eb      	bne.n	8000836 <USB_OTG_FlushTxFifo+0x3e>
 800085e:	e000      	b.n	8000862 <USB_OTG_FlushTxFifo+0x6a>
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 8000860:	bf00      	nop
    }
  }
  while (greset.b.txfflsh == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8000862:	f04f 0003 	mov.w	r0, #3
 8000866:	f018 f809 	bl	801887c <USB_OTG_BSP_uDelay>
  return status;
 800086a:	7cfb      	ldrb	r3, [r7, #19]
}
 800086c:	4618      	mov	r0, r3
 800086e:	f107 0718 	add.w	r7, r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop

08000878 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8000886:	f04f 0300 	mov.w	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	f103 0301 	add.w	r3, r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 80008b8:	f2c0 0303 	movt	r3, #3
 80008bc:	429a      	cmp	r2, r3
 80008be:	d805      	bhi.n	80008cc <USB_OTG_FlushRxFifo+0x54>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1eb      	bne.n	80008a2 <USB_OTG_FlushRxFifo+0x2a>
 80008ca:	e000      	b.n	80008ce <USB_OTG_FlushRxFifo+0x56>
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 80008cc:	bf00      	nop
    }
  }
  while (greset.b.rxfflsh == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80008ce:	f04f 0003 	mov.w	r0, #3
 80008d2:	f017 ffd3 	bl	801887c <USB_OTG_BSP_uDelay>
  return status;
 80008d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	f107 0718 	add.w	r7, r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop

080008e4 <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 80008f0:	f04f 0300 	mov.w	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	f36f 735d 	bfc	r3, #29, #1
 8000904:	60bb      	str	r3, [r7, #8]
  usbcfg.b.force_dev = 0;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	f36f 739e 	bfc	r3, #30, #1
 800090c:	60bb      	str	r3, [r7, #8]
  
  if ( mode == HOST_MODE)
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d104      	bne.n	800091e <USB_OTG_SetCurrentMode+0x3a>
  {
    usbcfg.b.force_host = 1;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	e006      	b.n	800092c <USB_OTG_SetCurrentMode+0x48>
  }
  else if ( mode == DEVICE_MODE)
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d103      	bne.n	800092c <USB_OTG_SetCurrentMode+0x48>
  {
    usbcfg.b.force_dev = 1;
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800092a:	60bb      	str	r3, [r7, #8]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	68ba      	ldr	r2, [r7, #8]
 8000932:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8000934:	f04f 0032 	mov.w	r0, #50	; 0x32
 8000938:	f017 ffcc 	bl	80188d4 <USB_OTG_BSP_mDelay>
  return status;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
}
 800093e:	4618      	mov	r0, r3
 8000940:	f107 0710 	add.w	r7, r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f003 0301 	and.w	r3, r3, #1
}
 800095a:	4618      	mov	r0, r3
 800095c:	f107 070c 	add.w	r7, r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop

08000968 <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ffe9 	bl	8000948 <USB_OTG_GetMode>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	bf0c      	ite	eq
 800097c:	2300      	moveq	r3, #0
 800097e:	2301      	movne	r3, #1
 8000980:	b2db      	uxtb	r3, r3
}
 8000982:	4618      	mov	r0, r3
 8000984:	f107 0708 	add.w	r7, r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <USB_OTG_IsHostMode>:
* @brief  USB_OTG_IsHostMode : Check if it is host mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ffd7 	bl	8000948 <USB_OTG_GetMode>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	bf14      	ite	ne
 80009a0:	2300      	movne	r3, #0
 80009a2:	2301      	moveq	r3, #1
 80009a4:	b2db      	uxtb	r3, r3
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	f107 0708 	add.w	r7, r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4013      	ands	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  return v;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	f107 0714 	add.w	r7, r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <USB_OTG_ReadOtgItr>:
* @brief  USB_OTG_ReadOtgItr : returns the USB_OTG Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadOtgItr (USB_OTG_CORE_HANDLE *pdev)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32 (&pdev->regs.GREGS->GOTGINT));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	685b      	ldr	r3, [r3, #4]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	f107 070c 	add.w	r7, r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <USB_OTG_CoreInitHost>:
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  USB_OTG_STS                     status = USB_OTG_OK;
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	76fb      	strb	r3, [r7, #27]
  
#ifdef USE_OTG_MODE
  USB_OTG_OTGCTL_TypeDef          gotgctl;
#endif
  
  uint32_t                        i = 0;
 8000a0a:	f04f 0300 	mov.w	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  
  nptxfifosize.d32 = 0;  
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  ptxfifosize.d32 = 0;
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
#ifdef USE_OTG_MODE
  gotgctl.d32 = 0;
#endif
  hcfg.d32 = 0;
 8000a1c:	f04f 0300 	mov.w	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f017 fef8 	bl	8018818 <USB_OTG_BSP_ConfigVBUS>
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000a2e:	f04f 0200 	mov.w	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
  
  /* Initialize Host Configuration Register */
  USB_OTG_InitFSLSPClkSel(pdev , HCFG_48_MHZ); /* in init phase */
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f04f 0101 	mov.w	r1, #1
 8000a3a:	f000 f91d 	bl	8000c78 <USB_OTG_InitFSLSPClkSel>
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  hcfg.b.fslssupp = 0;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f36f 0382 	bfc	r3, #2, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	601a      	str	r2, [r3, #0]
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7adb      	ldrb	r3, [r3, #11]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d119      	bne.n	8000a92 <USB_OTG_CoreInitHost+0x96>
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	f04f 0280 	mov.w	r2, #128	; 0x80
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
 8000a68:	f04f 0380 	mov.w	r3, #128	; 0x80
 8000a6c:	82bb      	strh	r3, [r7, #20]
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
 8000a6e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8000a72:	82fb      	strh	r3, [r7, #22]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 8000a7c:	f04f 03e0 	mov.w	r3, #224	; 0xe0
 8000a80:	823b      	strh	r3, [r7, #16]
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
 8000a82:	f04f 0360 	mov.w	r3, #96	; 0x60
 8000a86:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
#endif
#ifdef USB_OTG_HS_CORE  
   if (pdev->cfg.coreID == USB_OTG_HS_CORE_ID)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7adb      	ldrb	r3, [r3, #11]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d119      	bne.n	8000ace <USB_OTG_CoreInitHost+0xd2>
  {
   /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_HS_SIZE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa2:	625a      	str	r2, [r3, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_HS_SIZE;   
 8000aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa8:	82bb      	strh	r3, [r7, #20]
    nptxfifosize.b.depth = TXH_NP_HS_FIFOSIZ;  
 8000aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aae:	82fb      	strh	r3, [r7, #22]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_HS_SIZE + TXH_NP_HS_FIFOSIZ;
 8000ab8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000abc:	823b      	strh	r3, [r7, #16]
    ptxfifosize.b.depth     = TXH_P_HS_FIFOSIZ;
 8000abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac2:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  gotgctl.b.hstsethnpen = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
#endif
  
  /* Make sure the FIFOs are flushed. */
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f04f 0110 	mov.w	r1, #16
 8000ad4:	f7ff fe90 	bl	80007f8 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff fecd 	bl	8000878 <USB_OTG_FlushRxFifo>
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	e019      	b.n	8000b1a <USB_OTG_CoreInitHost+0x11e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8000aee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000af2:	18d3      	adds	r3, r2, r3
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	f04f 32ff 	mov.w	r2, #4294967295
 8000afa:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCGINTMSK, 0 );
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8000b04:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	f103 0301 	add.w	r3, r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d8df      	bhi.n	8000ae6 <USB_OTG_CoreInitHost+0xea>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCGINTMSK, 0 );
  }
#ifndef USE_OTG_MODE
  USB_OTG_DriveVbus(pdev, 1);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f04f 0101 	mov.w	r1, #1
 8000b2c:	f000 f81e 	bl	8000b6c <USB_OTG_DriveVbus>
#endif
  
  USB_OTG_EnableHostInt(pdev);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f85b 	bl	8000bec <USB_OTG_EnableHostInt>
  return status;
 8000b36:	7efb      	ldrb	r3, [r7, #27]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f107 0720 	add.w	r7, r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop

08000b44 <USB_OTG_IsEvenFrame>:
*         This function returns the frame number for sof packet
* @param  pdev : Selected device
* @retval Frame number
*/
uint8_t USB_OTG_IsEvenFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  return !(USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0x1);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2300      	movne	r3, #0
 8000b5c:	2301      	moveq	r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	f107 070c 	add.w	r7, r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <USB_OTG_DriveVbus>:
* @param  pdev : Selected device
* @param  state : VBUS state
* @retval None
*/
void USB_OTG_DriveVbus (USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_HPRT0_TypeDef     hprt0;
  
  hprt0.d32 = 0;
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  
  /* enable disable the external charge pump */
  USB_OTG_BSP_DriveVBUS(pdev, state);
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	4619      	mov	r1, r3
 8000b84:	f017 fe2a 	bl	80187dc <USB_OTG_BSP_DriveVBUS>
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 f891 	bl	8000cb0 <USB_OTG_ReadHPRT0>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	60fb      	str	r3, [r7, #12]
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
 8000b92:	7b7b      	ldrb	r3, [r7, #13]
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10b      	bne.n	8000bb6 <USB_OTG_DriveVbus+0x4a>
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d108      	bne.n	8000bb6 <USB_OTG_DriveVbus+0x4a>
  {
    hprt0.b.prtpwr = 1;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000baa:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	601a      	str	r2, [r3, #0]
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
 8000bb6:	7b7b      	ldrb	r3, [r7, #13]
 8000bb8:	f003 0310 	and.w	r3, r3, #16
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00b      	beq.n	8000bda <USB_OTG_DriveVbus+0x6e>
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d108      	bne.n	8000bda <USB_OTG_DriveVbus+0x6e>
  {
    hprt0.b.prtpwr = 0;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f36f 330c 	bfc	r3, #12, #1
 8000bce:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	601a      	str	r2, [r3, #0]
  }
  
  USB_OTG_BSP_mDelay(200);
 8000bda:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8000bde:	f017 fe79 	bl	80188d4 <USB_OTG_BSP_mDelay>
}
 8000be2:	f107 0710 	add.w	r7, r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop

08000bec <USB_OTG_EnableHostInt>:
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_STS       status = USB_OTG_OK;
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
 8000bfa:	f04f 0300 	mov.w	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c12:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff fae1 	bl	80001dc <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	78db      	ldrb	r3, [r3, #3]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d103      	bne.n	8000c2a <USB_OTG_EnableHostInt+0x3e>
  {  
    intmsk.b.rxstsqlvl  = 1;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	60bb      	str	r3, [r7, #8]
  }  
  intmsk.b.portintr   = 1;
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c30:	60bb      	str	r3, [r7, #8]
  intmsk.b.hcintr     = 1;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c38:	60bb      	str	r3, [r7, #8]
  intmsk.b.disconnect = 1;  
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c40:	60bb      	str	r3, [r7, #8]
  intmsk.b.sofintr    = 1;  
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	60bb      	str	r3, [r7, #8]
  intmsk.b.incomplisoout  = 1; 
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c50:	60bb      	str	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68d2      	ldr	r2, [r2, #12]
 8000c5a:	6992      	ldr	r2, [r2, #24]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	ea6f 0202 	mvn.w	r2, r2
 8000c64:	4011      	ands	r1, r2
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	619a      	str	r2, [r3, #24]
  return status;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f107 0710 	add.w	r7, r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <USB_OTG_InitFSLSPClkSel>:
* @param  pdev : Selected device
* @param  freq : clock frequency
* @retval None
*/
void USB_OTG_InitFSLSPClkSel(USB_OTG_CORE_HANDLE *pdev , uint8_t freq)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
  USB_OTG_HCFG_TypeDef   hcfg;
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	60fb      	str	r3, [r7, #12]
  hcfg.b.fslspclksel = freq;
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f362 0301 	bfi	r3, r2, #0, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	f107 0714 	add.w	r7, r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <USB_OTG_ReadHPRT0>:
* @brief  USB_OTG_ReadHPRT0 : Reads HPRT0 to modify later
* @param  pdev : Selected device
* @retval HPRT0 value
*/
uint32_t USB_OTG_ReadHPRT0(USB_OTG_CORE_HANDLE *pdev)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtena = 0;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f36f 0382 	bfc	r3, #2, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtconndet = 0;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f36f 0341 	bfc	r3, #1, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtenchng = 0;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f36f 03c3 	bfc	r3, #3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtovrcurrchng = 0;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f36f 1345 	bfc	r3, #5, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
  return hprt0.d32;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f107 0714 	add.w	r7, r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <USB_OTG_ReadHostAllChannels_intr>:
* @brief  USB_OTG_ReadHostAllChannels_intr : Register PCD Callbacks
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadHostAllChannels_intr (USB_OTG_CORE_HANDLE *pdev)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32 (&pdev->regs.HREGS->HAINT));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	695b      	ldr	r3, [r3, #20]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f107 070c 	add.w	r7, r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <USB_OTG_ResetPort>:
* @retval status
* @note : (1)The application must wait at least 10 ms (+ 10 ms security)
*   before clearing the reset bit.
*/
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ffcb 	bl	8000cb0 <USB_OTG_ReadHPRT0>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60fb      	str	r3, [r7, #12]
  hprt0.b.prtrst = 1;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d24:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	601a      	str	r2, [r3, #0]
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
 8000d30:	f04f 000a 	mov.w	r0, #10
 8000d34:	f017 fdce 	bl	80188d4 <USB_OTG_BSP_mDelay>
  hprt0.b.prtrst = 0;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f36f 2308 	bfc	r3, #8, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	601a      	str	r2, [r3, #0]
  USB_OTG_BSP_mDelay (20);   
 8000d4a:	f04f 0014 	mov.w	r0, #20
 8000d4e:	f017 fdc1 	bl	80188d4 <USB_OTG_BSP_mDelay>
  return 1;
 8000d52:	f04f 0301 	mov.w	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	f107 0710 	add.w	r7, r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <USB_OTG_HC_Init>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Init(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	77fb      	strb	r3, [r7, #31]
  uint32_t intr_enable = 0;
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  USB_OTG_GINTMSK_TypeDef    gintmsk;
  USB_OTG_HCCHAR_TypeDef     hcchar;
  USB_OTG_HCINTn_TypeDef     hcint;
  
  
  gintmsk.d32 = 0;
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  hcintmsk.d32 = 0;
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  hcchar.d32 = 0;
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  
  /* Clear old interrupt conditions for this host channel. */
  hcint.d32 = 0xFFFFFFFF;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	60bb      	str	r3, [r7, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINT, hcint.d32);
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8000d98:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	609a      	str	r2, [r3, #8]
  
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  if (pdev->cfg.dma_enable == 1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	78db      	ldrb	r3, [r3, #3]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d103      	bne.n	8000dba <USB_OTG_HC_Init+0x5a>
  {
    hcintmsk.b.ahberr = 1;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	617b      	str	r3, [r7, #20]
  }
  
  switch (pdev->host.hc[hc_num].ep_type) 
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000dc2:	18d3      	adds	r3, r2, r3
 8000dc4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000dc8:	7a5b      	ldrb	r3, [r3, #9]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	f200 808d 	bhi.w	8000eea <USB_OTG_HC_Init+0x18a>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <USB_OTG_HC_Init+0x78>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000de9 	.word	0x08000de9
 8000ddc:	08000ea3 	.word	0x08000ea3
 8000de0:	08000de9 	.word	0x08000de9
 8000de4:	08000e55 	.word	0x08000e55
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    hcintmsk.b.xfercompl = 1;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
    hcintmsk.b.stall = 1;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	617b      	str	r3, [r7, #20]
    hcintmsk.b.xacterr = 1;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dfe:	617b      	str	r3, [r7, #20]
    hcintmsk.b.datatglerr = 1;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	617b      	str	r3, [r7, #20]
    hcintmsk.b.nak = 1;  
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	617b      	str	r3, [r7, #20]
    if (pdev->host.hc[hc_num].ep_is_in) 
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000e1e:	799b      	ldrb	r3, [r3, #6]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d004      	beq.n	8000e2e <USB_OTG_HC_Init+0xce>
    {
      hcintmsk.b.bblerr = 1;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	617b      	str	r3, [r7, #20]
      if (pdev->host.hc[hc_num].do_ping) 
      {
        hcintmsk.b.ack = 1;
      }
    }
    break;
 8000e2c:	e058      	b.n	8000ee0 <USB_OTG_HC_Init+0x180>
    {
      hcintmsk.b.bblerr = 1;
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e34:	617b      	str	r3, [r7, #20]
      if (pdev->host.hc[hc_num].do_ping) 
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000e3e:	18d3      	adds	r3, r2, r3
 8000e40:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000e44:	7a1b      	ldrb	r3, [r3, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d04a      	beq.n	8000ee0 <USB_OTG_HC_Init+0x180>
      {
        hcintmsk.b.ack = 1;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	617b      	str	r3, [r7, #20]
      }
    }
    break;
 8000e52:	e045      	b.n	8000ee0 <USB_OTG_HC_Init+0x180>
  case EP_TYPE_INTR:
    hcintmsk.b.xfercompl = 1;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
    hcintmsk.b.nak = 1;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	617b      	str	r3, [r7, #20]
    hcintmsk.b.stall = 1;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	617b      	str	r3, [r7, #20]
    hcintmsk.b.xacterr = 1;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e72:	617b      	str	r3, [r7, #20]
    hcintmsk.b.datatglerr = 1;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7a:	617b      	str	r3, [r7, #20]
    hcintmsk.b.frmovrun = 1;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	617b      	str	r3, [r7, #20]
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000e92:	799b      	ldrb	r3, [r3, #6]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d025      	beq.n	8000ee4 <USB_OTG_HC_Init+0x184>
    {
      hcintmsk.b.bblerr = 1;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	617b      	str	r3, [r7, #20]
    }
    
    break;
 8000ea0:	e020      	b.n	8000ee4 <USB_OTG_HC_Init+0x184>
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
    hcintmsk.b.frmovrun = 1;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb0:	617b      	str	r3, [r7, #20]
    hcintmsk.b.ack = 1;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f043 0320 	orr.w	r3, r3, #32
 8000eb8:	617b      	str	r3, [r7, #20]
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000ec2:	18d3      	adds	r3, r2, r3
 8000ec4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000ec8:	799b      	ldrb	r3, [r3, #6]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00c      	beq.n	8000ee8 <USB_OTG_HC_Init+0x188>
    {
      hcintmsk.b.xacterr = 1;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	617b      	str	r3, [r7, #20]
      hcintmsk.b.bblerr = 1;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	617b      	str	r3, [r7, #20]
    }
    break;
 8000ede:	e003      	b.n	8000ee8 <USB_OTG_HC_Init+0x188>
      if (pdev->host.hc[hc_num].do_ping) 
      {
        hcintmsk.b.ack = 1;
      }
    }
    break;
 8000ee0:	bf00      	nop
 8000ee2:	e002      	b.n	8000eea <USB_OTG_HC_Init+0x18a>
    if (pdev->host.hc[hc_num].ep_is_in) 
    {
      hcintmsk.b.bblerr = 1;
    }
    
    break;
 8000ee4:	bf00      	nop
 8000ee6:	e000      	b.n	8000eea <USB_OTG_HC_Init+0x18a>
    if (pdev->host.hc[hc_num].ep_is_in) 
    {
      hcintmsk.b.xacterr = 1;
      hcintmsk.b.bblerr = 1;
    }
    break;
 8000ee8:	bf00      	nop
  }
  
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCGINTMSK, hcintmsk.d32);
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8000ef2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ef6:	18d3      	adds	r3, r2, r3
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	60da      	str	r2, [r3, #12]
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	f04f 0201 	mov.w	r2, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	61bb      	str	r3, [r7, #24]
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6952      	ldr	r2, [r2, #20]
 8000f12:	6992      	ldr	r2, [r2, #24]
 8000f14:	4611      	mov	r1, r2
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	619a      	str	r2, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f22:	613b      	str	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68d2      	ldr	r2, [r2, #12]
 8000f2c:	6992      	ldr	r2, [r2, #24]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000f44:	18d3      	adds	r3, r2, r3
 8000f46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000f4a:	791b      	ldrb	r3, [r3, #4]
 8000f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f362 539c 	bfi	r3, r2, #22, #7
 8000f58:	60fb      	str	r3, [r7, #12]
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000f62:	18d3      	adds	r3, r2, r3
 8000f64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000f68:	795b      	ldrb	r3, [r3, #5]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f362 23ce 	bfi	r3, r2, #11, #4
 8000f76:	60fb      	str	r3, [r7, #12]
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000f80:	18d3      	adds	r3, r2, r3
 8000f82:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000f86:	799b      	ldrb	r3, [r3, #6]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f362 33cf 	bfi	r3, r2, #15, #1
 8000f94:	60fb      	str	r3, [r7, #12]
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000f9e:	18d3      	adds	r3, r2, r3
 8000fa0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000fa4:	79db      	ldrb	r3, [r3, #7]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	bf14      	ite	ne
 8000faa:	2300      	movne	r3, #0
 8000fac:	2301      	moveq	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f362 4351 	bfi	r3, r2, #17, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000fc6:	7a5b      	ldrb	r3, [r3, #9]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f362 4393 	bfi	r3, r2, #18, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000fde:	18d3      	adds	r3, r2, r3
 8000fe0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000fe4:	895b      	ldrh	r3, [r3, #10]
 8000fe6:	ea4f 5343 	mov.w	r3, r3, lsl #21
 8000fea:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f362 030a 	bfi	r3, r2, #0, #11
 8000ff6:	60fb      	str	r3, [r7, #12]
  if (pdev->host.hc[hc_num].ep_type == HCCHAR_INTR)
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001000:	18d3      	adds	r3, r2, r3
 8001002:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001006:	7a5b      	ldrb	r3, [r3, #9]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d103      	bne.n	8001014 <USB_OTG_HC_Init+0x2b4>
  {
    hcchar.b.oddfrm  = 1;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001012:	60fb      	str	r3, [r7, #12]
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800101c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001020:	18d3      	adds	r3, r2, r3
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	601a      	str	r2, [r3, #0]
  return status;
 8001028:	7ffb      	ldrb	r3, [r7, #31]
}
 800102a:	4618      	mov	r0, r3
 800102c:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <USB_OTG_HC_StartXfer>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  USB_OTG_HCCHAR_TypeDef   hcchar;
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HNPTXSTS_TypeDef hnptxsts; 
  USB_OTG_HPTXSTS_TypeDef  hptxsts; 
  USB_OTG_GINTMSK_TypeDef  intmsk;
  uint16_t                 len_words = 0;   
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	847b      	strh	r3, [r7, #34]	; 0x22
  
  uint16_t num_packets;
  uint16_t max_hc_pkt_count;
  
  max_hc_pkt_count = 256;
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	843b      	strh	r3, [r7, #32]
  hctsiz.d32 = 0;
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  hcchar.d32 = 0;
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  intmsk.d32 = 0;
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001072:	18d3      	adds	r3, r2, r3
 8001074:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d037      	beq.n	80010ee <USB_OTG_HC_StartXfer+0xb6>
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001086:	18d3      	adds	r3, r2, r3
 8001088:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800108c:	681a      	ldr	r2, [r3, #0]
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001096:	18cb      	adds	r3, r1, r3
 8001098:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800109c:	895b      	ldrh	r3, [r3, #10]
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 800109e:	18d3      	adds	r3, r2, r3
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80010a0:	f103 32ff 	add.w	r2, r3, #4294967295
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80010ac:	18cb      	adds	r3, r1, r3
 80010ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80010b2:	895b      	ldrh	r3, [r3, #10]
 80010b4:	fbb2 f3f3 	udiv	r3, r2, r3
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80010b8:	84fb      	strh	r3, [r7, #38]	; 0x26
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
 80010ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010bc:	8c3b      	ldrh	r3, [r7, #32]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d918      	bls.n	80010f4 <USB_OTG_HC_StartXfer+0xbc>
    {
      num_packets = max_hc_pkt_count;
 80010c2:	8c3b      	ldrh	r3, [r7, #32]
 80010c4:	84fb      	strh	r3, [r7, #38]	; 0x26
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
        pdev->host.hc[hc_num].max_packet;
 80010ca:	78f9      	ldrb	r1, [r7, #3]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	ea4f 1141 	mov.w	r1, r1, lsl #5
 80010d2:	1841      	adds	r1, r0, r1
 80010d4:	f501 712a 	add.w	r1, r1, #680	; 0x2a8
 80010d8:	8949      	ldrh	r1, [r1, #10]
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
    {
      num_packets = max_hc_pkt_count;
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 80010da:	fb01 f202 	mul.w	r2, r1, r2
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80010e4:	18cb      	adds	r3, r1, r3
 80010e6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e002      	b.n	80010f4 <USB_OTG_HC_StartXfer+0xbc>
        pdev->host.hc[hc_num].max_packet;
    }
  }
  else
  {
    num_packets = 1;
 80010ee:	f04f 0301 	mov.w	r3, #1
 80010f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (pdev->host.hc[hc_num].ep_is_in)
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001102:	799b      	ldrb	r3, [r3, #6]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d012      	beq.n	800112e <USB_OTG_HC_StartXfer+0xf6>
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
      pdev->host.hc[hc_num].max_packet;
 800110c:	78f9      	ldrb	r1, [r7, #3]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8001114:	1841      	adds	r1, r0, r1
 8001116:	f501 712a 	add.w	r1, r1, #680	; 0x2a8
 800111a:	8949      	ldrh	r1, [r1, #10]
  {
    num_packets = 1;
  }
  if (pdev->host.hc[hc_num].ep_is_in)
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 800111c:	fb01 f202 	mul.w	r2, r1, r2
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001126:	18cb      	adds	r3, r1, r3
 8001128:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800112c:	601a      	str	r2, [r3, #0]
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001136:	18d3      	adds	r3, r2, r3
 8001138:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001142:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f362 0312 	bfi	r3, r2, #0, #19
 800114c:	61bb      	str	r3, [r7, #24]
  hctsiz.b.pktcnt = num_packets;
 800114e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001150:	ea4f 5383 	mov.w	r3, r3, lsl #22
 8001154:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8001158:	b29a      	uxth	r2, r3
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f362 43dc 	bfi	r3, r2, #19, #10
 8001160:	61bb      	str	r3, [r7, #24]
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	f103 030d 	add.w	r3, r3, #13
 800116a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	b2da      	uxtb	r2, r3
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	f362 735e 	bfi	r3, r2, #29, #2
 8001182:	61bb      	str	r3, [r7, #24]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800118c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001190:	18d3      	adds	r3, r2, r3
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	78db      	ldrb	r3, [r3, #3]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d112      	bne.n	80011c6 <USB_OTG_HC_StartXfer+0x18e>
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80011a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f102 020d 	add.w	r2, r2, #13
 80011b8:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80011bc:	188a      	adds	r2, r1, r2
 80011be:	f502 728c 	add.w	r2, r2, #280	; 0x118
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	615a      	str	r2, [r3, #20]
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80011ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61fb      	str	r3, [r7, #28]
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fcb2 	bl	8000b44 <USB_OTG_IsEvenFrame>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f362 735d 	bfi	r3, r2, #29, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011f6:	61fb      	str	r3, [r7, #28]
  hcchar.b.chdis = 0;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f36f 739e 	bfc	r3, #30, #1
 80011fe:	61fb      	str	r3, [r7, #28]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001208:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	601a      	str	r2, [r3, #0]

  if (pdev->cfg.dma_enable == 0) /* Slave mode */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	78db      	ldrb	r3, [r3, #3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 808d 	bne.w	8001338 <USB_OTG_HC_StartXfer+0x300>
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001226:	18d3      	adds	r3, r2, r3
 8001228:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800122c:	799b      	ldrb	r3, [r3, #6]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 8082 	bne.w	8001338 <USB_OTG_HC_StartXfer+0x300>
        (pdev->host.hc[hc_num].xfer_len > 0))
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001242:	681b      	ldr	r3, [r3, #0]
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);

  if (pdev->cfg.dma_enable == 0) /* Slave mode */
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8001244:	2b00      	cmp	r3, #0
 8001246:	d077      	beq.n	8001338 <USB_OTG_HC_StartXfer+0x300>
        (pdev->host.hc[hc_num].xfer_len > 0))
    {
      switch(pdev->host.hc[hc_num].ep_type) 
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001250:	18d3      	adds	r3, r2, r3
 8001252:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001256:	7a5b      	ldrb	r3, [r3, #9]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d851      	bhi.n	8001300 <USB_OTG_HC_StartXfer+0x2c8>
 800125c:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <USB_OTG_HC_StartXfer+0x22c>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001275 	.word	0x08001275
 8001268:	080012bb 	.word	0x080012bb
 800126c:	08001275 	.word	0x08001275
 8001270:	080012bb 	.word	0x080012bb
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	617b      	str	r3, [r7, #20]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001284:	18d3      	adds	r3, r2, r3
 8001286:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f103 0303 	add.w	r3, r3, #3
 8001290:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8001294:	847b      	strh	r3, [r7, #34]	; 0x22
        
        /* check if there is enough space in FIFO space */
        if(len_words > hnptxsts.b.nptxfspcavail)
 8001296:	8abb      	ldrh	r3, [r7, #20]
 8001298:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800129a:	429a      	cmp	r2, r3
 800129c:	d932      	bls.n	8001304 <USB_OTG_HC_StartXfer+0x2cc>
        {
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f043 0320 	orr.w	r3, r3, #32
 80012a4:	60fb      	str	r3, [r7, #12]
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68d2      	ldr	r2, [r2, #12]
 80012ae:	6992      	ldr	r2, [r2, #24]
 80012b0:	4611      	mov	r1, r2
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	619a      	str	r2, [r3, #24]
        }
        
        break;
 80012b8:	e024      	b.n	8001304 <USB_OTG_HC_StartXfer+0x2cc>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	613b      	str	r3, [r7, #16]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80012ca:	18d3      	adds	r3, r2, r3
 80012cc:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f103 0303 	add.w	r3, r3, #3
 80012d6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80012da:	847b      	strh	r3, [r7, #34]	; 0x22
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 80012dc:	8a3b      	ldrh	r3, [r7, #16]
 80012de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d911      	bls.n	8001308 <USB_OTG_HC_StartXfer+0x2d0>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ea:	60fb      	str	r3, [r7, #12]
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68d2      	ldr	r2, [r2, #12]
 80012f4:	6992      	ldr	r2, [r2, #24]
 80012f6:	4611      	mov	r1, r2
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80012fe:	e003      	b.n	8001308 <USB_OTG_HC_StartXfer+0x2d0>
        
      default:
        break;
 8001300:	bf00      	nop
 8001302:	e002      	b.n	800130a <USB_OTG_HC_StartXfer+0x2d2>
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
        }
        
        break;
 8001304:	bf00      	nop
 8001306:	e000      	b.n	800130a <USB_OTG_HC_StartXfer+0x2d2>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
        }
        break;
 8001308:	bf00      	nop
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 800130a:	78fb      	ldrb	r3, [r7, #3]
                          pdev->host.hc[hc_num].xfer_buff , 
 800130c:	687a      	ldr	r2, [r7, #4]
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 800130e:	f103 030d 	add.w	r3, r3, #13
 8001312:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001316:	18d3      	adds	r3, r2, r3
 8001318:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800131c:	6819      	ldr	r1, [r3, #0]
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001326:	18d3      	adds	r3, r2, r3
 8001328:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800132c:	681b      	ldr	r3, [r3, #0]
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 800132e:	b29b      	uxth	r3, r3
 8001330:	78fa      	ldrb	r2, [r7, #3]
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7fe ffc8 	bl	80002c8 <USB_OTG_WritePacket>
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
    }
  }
  return status;
 8001338:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 800133c:	4618      	mov	r0, r3
 800133e:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop

08001348 <USB_OTG_HC_Halt>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Halt(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
  USB_OTG_HNPTXSTS_TypeDef            nptxsts;
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  hptxsts.d32 = 0;
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800136e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001372:	18d3      	adds	r3, r2, r3
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60bb      	str	r3, [r7, #8]
  hcchar.b.chen = 1;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001380:	60bb      	str	r3, [r7, #8]
  hcchar.b.chdis = 1;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001388:	60bb      	str	r3, [r7, #8]
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
 800138a:	7abb      	ldrb	r3, [r7, #10]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <USB_OTG_HC_Halt+0x5a>
 8001396:	7abb      	ldrb	r3, [r7, #10]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d10b      	bne.n	80013ba <USB_OTG_HC_Halt+0x72>
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	613b      	str	r3, [r7, #16]
    if (nptxsts.b.nptxqspcavail == 0)
 80013aa:	7cbb      	ldrb	r3, [r7, #18]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10f      	bne.n	80013d0 <USB_OTG_HC_Halt+0x88>
    {
      hcchar.b.chen = 0;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f36f 73df 	bfc	r3, #31, #1
 80013b6:	60bb      	str	r3, [r7, #8]
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
    if (nptxsts.b.nptxqspcavail == 0)
 80013b8:	e00a      	b.n	80013d0 <USB_OTG_HC_Halt+0x88>
      hcchar.b.chen = 0;
    }
  }
  else
  {
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	60fb      	str	r3, [r7, #12]
    if (hptxsts.b.ptxqspcavail == 0)
 80013c2:	7bbb      	ldrb	r3, [r7, #14]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d103      	bne.n	80013d0 <USB_OTG_HC_Halt+0x88>
    {
      hcchar.b.chen = 0;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f36f 73df 	bfc	r3, #31, #1
 80013ce:	60bb      	str	r3, [r7, #8]
    }
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80013d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80013dc:	18d3      	adds	r3, r2, r3
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	601a      	str	r2, [r3, #0]
  return status;
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	f107 071c 	add.w	r7, r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <USB_OTG_HC_DoPing>:
* @brief  Issue a ping token
* @param  None
* @retval : None
*/
USB_OTG_STS USB_OTG_HC_DoPing(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS               status = USB_OTG_OK;
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
 
  hctsiz.d32 = 0;
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  hctsiz.b.dopng = 1;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001412:	60fb      	str	r3, [r7, #12]
  hctsiz.b.pktcnt = 1;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f04f 0201 	mov.w	r2, #1
 800141a:	f362 43dc 	bfi	r3, r2, #19, #10
 800141e:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001428:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800142c:	18d3      	adds	r3, r2, r3
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	611a      	str	r2, [r3, #16]
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800143c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001440:	18d3      	adds	r3, r2, r3
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
  hcchar.b.chen = 1;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800144e:	613b      	str	r3, [r7, #16]
  hcchar.b.chdis = 0;
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f36f 739e 	bfc	r3, #30, #1
 8001456:	613b      	str	r3, [r7, #16]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001460:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001464:	18d3      	adds	r3, r2, r3
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	601a      	str	r2, [r3, #0]
  return status;  
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	f107 071c 	add.w	r7, r7, #28
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <USB_OTG_StopHost>:
* @brief  Stop the device and clean up fifo's
* @param  None
* @retval : None
*/
void USB_OTG_StopHost(USB_OTG_CORE_HANDLE *pdev)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef  hcchar;
  uint32_t                i;
  
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HAINTMSK , 0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HAINT,      0xFFFFFFFF);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f04f 32ff 	mov.w	r2, #4294967295
 8001496:	615a      	str	r2, [r3, #20]
  /* Flush out any leftover queued requests. */
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e023      	b.n	80014e8 <USB_OTG_StopHost+0x6c>
  {
    hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80014a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014ac:	18d3      	adds	r3, r2, r3
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	60bb      	str	r3, [r7, #8]
    hcchar.b.chen = 0;
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f36f 73df 	bfc	r3, #31, #1
 80014ba:	60bb      	str	r3, [r7, #8]
    hcchar.b.chdis = 1;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014c2:	60bb      	str	r3, [r7, #8]
    hcchar.b.epdir = 0;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f36f 33cf 	bfc	r3, #15, #1
 80014ca:	60bb      	str	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[i]->HCCHAR, hcchar.d32);
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80014d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	601a      	str	r2, [r3, #0]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HAINTMSK , 0);
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HAINT,      0xFFFFFFFF);
  /* Flush out any leftover queued requests. */
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f103 0301 	add.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8d5      	bhi.n	80014a0 <USB_OTG_StopHost+0x24>
    hcchar.b.epdir = 0;
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[i]->HCCHAR, hcchar.d32);
  }
  
  /* Flush the FIFO */
  USB_OTG_FlushRxFifo(pdev);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff f9bf 	bl	8000878 <USB_OTG_FlushRxFifo>
  USB_OTG_FlushTxFifo(pdev ,  0x10 );  
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f04f 0110 	mov.w	r1, #16
 8001500:	f7ff f97a 	bl	80007f8 <USB_OTG_FlushTxFifo>
}
 8001504:	f107 0710 	add.w	r7, r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HCD_Init>:
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 0;
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  pdev->host.ConnSts = 0;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e01c      	b.n	800156a <HCD_Init+0x5e>
  {
  pdev->host.ErrCnt[i]  = 0;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001538:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800153c:	18d3      	adds	r3, r2, r3
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  pdev->host.XferCnt[i]   = 0;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f102 0294 	add.w	r2, r2, #148	; 0x94
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->host.HC_Status[i]   = HC_IDLE;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	18d3      	adds	r3, r2, r3
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	f103 0301 	add.w	r3, r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b0e      	cmp	r3, #14
 800156e:	d9df      	bls.n	8001530 <HCD_Init+0x24>
  {
  pdev->host.ErrCnt[i]  = 0;
  pdev->host.XferCnt[i]   = 0;
  pdev->host.HC_Status[i]   = HC_IDLE;
  }
  pdev->host.hc[0].max_packet  = 8; 
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f04f 0208 	mov.w	r2, #8
 8001576:	f8a3 22b2 	strh.w	r2, [r3, #690]	; 0x2b2

  USB_OTG_SelectCore(pdev, coreID);
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	4619      	mov	r1, r3
 8001580:	f7fe ff1a 	bl	80003b8 <USB_OTG_SelectCore>
#ifndef DUAL_ROLE_MODE_ENABLED
  USB_OTG_DisableGlobalInt(pdev);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff f917 	bl	80007b8 <USB_OTG_DisableGlobalInt>
  USB_OTG_CoreInit(pdev);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7fe fff6 	bl	800057c <USB_OTG_CoreInit>

  /* Force Host Mode*/
  USB_OTG_SetCurrentMode(pdev , HOST_MODE);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f04f 0101 	mov.w	r1, #1
 8001596:	f7ff f9a5 	bl	80008e4 <USB_OTG_SetCurrentMode>
  USB_OTG_CoreInitHost(pdev);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fa2e 	bl	80009fc <USB_OTG_CoreInitHost>
  USB_OTG_EnableGlobalInt(pdev);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff f8eb 	bl	800077c <USB_OTG_EnableGlobalInt>
#endif
   
  return 0;
 80015a6:	f04f 0300 	mov.w	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	f107 0710 	add.w	r7, r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HCD_GetCurrentSpeed>:
  * @param  pdev : Selected device
  * @retval Status
  */

uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
{    
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    USB_OTG_HPRT0_TypeDef  HPRT0;
    HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
    
    return HPRT0.b.prtspd;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f3c3 4341 	ubfx	r3, r3, #17, #2
 80015cc:	b2db      	uxtb	r3, r3
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	f107 0714 	add.w	r7, r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop

080015dc <HCD_ResetPort>:
  *         Issues the reset command to device
  * @param  pdev : Selected device
  * @retval Status
  */
uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
  which indicates that the bus is stable again after the electrical debounce 
  caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
  */
  
  USB_OTG_ResetPort(pdev); 
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fb91 	bl	8000d0c <USB_OTG_ResetPort>
  return 0;
 80015ea:	f04f 0300 	mov.w	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	f107 0708 	add.w	r7, r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HCD_IsDeviceConnected>:
  * @param  pdev : Selected device
  * @retval Device connection status. 1 -> connected and 0 -> disconnected
  * 
  */
uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return (pdev->host.ConnSts);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
}
 8001606:	4618      	mov	r0, r3
 8001608:	f107 070c 	add.w	r7, r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop

08001614 <HCD_GetCurrentFrame>:
  * @param  pdev : Selected device
  * @retval Frame number
  * 
  */
uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8001626:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800162a:	4618      	mov	r0, r3
 800162c:	f107 070c 	add.w	r7, r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop

08001638 <HCD_GetURB_State>:
  * @param  pdev: Selected device
  * @retval URB_STATE
  * 
  */
URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
  return pdev->host.URB_State[ch_num] ;
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	18d3      	adds	r3, r2, r3
 800164a:	f893 329b 	ldrb.w	r3, [r3, #667]	; 0x29b
 800164e:	b2db      	uxtb	r3, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	f107 070c 	add.w	r7, r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <HCD_GetXferCnt>:
  * @param  pdev: Selected device
  * @retval No. of data bytes transferred
  * 
  */
uint32_t HCD_GetXferCnt (USB_OTG_CORE_HANDLE *pdev, uint8_t ch_num) 
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
  return pdev->host.XferCnt[ch_num] ;
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8001674:	4618      	mov	r0, r3
 8001676:	f107 070c 	add.w	r7, r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HCD_GetHCState>:
  * @param  pdev: Selected device
  * @retval HC_STATUS
  * 
  */
HC_STATUS HCD_GetHCState (USB_OTG_CORE_HANDLE *pdev ,  uint8_t ch_num) 
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
  return pdev->host.HC_Status[ch_num] ;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	18d3      	adds	r3, r2, r3
 8001692:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 8001696:	b2db      	uxtb	r3, r3
}
 8001698:	4618      	mov	r0, r3
 800169a:	f107 070c 	add.w	r7, r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HCD_HC_Init>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status 
  */
uint32_t HCD_HC_Init (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
  return USB_OTG_HC_Init(pdev, hc_num);  
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff fb53 	bl	8000d60 <USB_OTG_HC_Init>
 80016ba:	4603      	mov	r3, r0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	f107 0708 	add.w	r7, r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop

080016c8 <HCD_SubmitRequest>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
  pdev->host.hc[hc_num].xfer_count = 0 ;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80016ea:	18d3      	adds	r3, r2, r3
 80016ec:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
  return USB_OTG_HC_StartXfer(pdev, hc_num);
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fc9c 	bl	8001038 <USB_OTG_HC_StartXfer>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	f107 0708 	add.w	r7, r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <USBH_OTG_ISR_Handler>:
  * @param  pdev: Selected device
  * @retval status 
  */

uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t retval = 0;
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  
  gintsts.d32 = 0;
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  
  /* Check if HOST Mode */
  if (USB_OTG_IsHostMode(pdev))
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff f933 	bl	800098c <USB_OTG_IsHostMode>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d072      	beq.n	8001812 <USBH_OTG_ISR_Handler+0x106>
  {
    gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff f93f 	bl	80009b0 <USB_OTG_ReadCoreItr>
 8001732:	4603      	mov	r3, r0
 8001734:	60bb      	str	r3, [r7, #8]
    if (!gintsts.d32)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <USBH_OTG_ISR_Handler+0x36>
    {
      return 0;
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e068      	b.n	8001814 <USBH_OTG_ISR_Handler+0x108>
    }
    
    if (gintsts.b.sofintr)
 8001742:	7a3b      	ldrb	r3, [r7, #8]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <USBH_OTG_ISR_Handler+0x50>
    {
      retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f8b4 	bl	80018bc <USB_OTG_USBH_handle_sof_ISR>
 8001754:	4603      	mov	r3, r0
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.rxstsqlvl)
 800175c:	7a3b      	ldrb	r3, [r7, #8]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <USBH_OTG_ISR_Handler+0x6a>
    {
      retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f001 f907 	bl	800297c <USB_OTG_USBH_handle_rx_qlvl_ISR>
 800176e:	4603      	mov	r3, r0
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.nptxfempty)
 8001776:	7a3b      	ldrb	r3, [r7, #8]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <USBH_OTG_ISR_Handler+0x84>
    {
      retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8d4 	bl	8001930 <USB_OTG_USBH_handle_nptxfempty_ISR>
 8001788:	4603      	mov	r3, r0
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.ptxfempty)
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <USBH_OTG_ISR_Handler+0x9e>
    {
      retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f99f 	bl	8001ae0 <USB_OTG_USBH_handle_ptxfempty_ISR>
 80017a2:	4603      	mov	r3, r0
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
    }    
    
    if (gintsts.b.hcintr)
 80017aa:	7afb      	ldrb	r3, [r7, #11]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <USBH_OTG_ISR_Handler+0xb8>
    {
      retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f832 	bl	8001820 <USB_OTG_USBH_handle_hc_ISR>
 80017bc:	4603      	mov	r3, r0
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.portintr)
 80017c4:	7afb      	ldrb	r3, [r7, #11]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <USBH_OTG_ISR_Handler+0xd2>
    {
      retval |= USB_OTG_USBH_handle_port_ISR (pdev);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fa5d 	bl	8001c90 <USB_OTG_USBH_handle_port_ISR>
 80017d6:	4603      	mov	r3, r0
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.disconnect)
 80017de:	7afb      	ldrb	r3, [r7, #11]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <USBH_OTG_ISR_Handler+0xec>
    {
      retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f87e 	bl	80018ec <USB_OTG_USBH_handle_Disconnect_ISR>
 80017f0:	4603      	mov	r3, r0
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
      
    }
    
     if (gintsts.b.incomplisoout)
 80017f8:	7abb      	ldrb	r3, [r7, #10]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <USBH_OTG_ISR_Handler+0x106>
      {
         retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f001 f99f 	bl	8002b48 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>
 800180a:	4603      	mov	r3, r0
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
      }
      
    
  }
  return retval;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	f107 0710 	add.w	r7, r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop

08001820 <USB_OTG_USBH_handle_hc_ISR>:
  *         This function indicates that one or more host channels has a pending
  * @param  pdev: Selected device
  * @retval status 
  */
static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  USB_OTG_HAINT_TypeDef        haint;
  USB_OTG_HCCHAR_TypeDef       hcchar;
  uint32_t i = 0;
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t retval = 0;
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fa5b 	bl	8000cf0 <USB_OTG_ReadHostAllChannels_intr>
 800183a:	4603      	mov	r3, r0
 800183c:	60fb      	str	r3, [r7, #12]
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e02e      	b.n	80018a4 <USB_OTG_USBH_handle_hc_ISR+0x84>
  {
    if (haint.b.chint & (1 << i))
 8001846:	89bb      	ldrh	r3, [r7, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa42 f303 	asr.w	r3, r2, r3
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d020      	beq.n	800189c <USB_OTG_USBH_handle_hc_ISR+0x7c>
    {
      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001862:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001866:	18d3      	adds	r3, r2, r3
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60bb      	str	r3, [r7, #8]
      
      if (hcchar.b.epdir)
 800186e:	7a7b      	ldrb	r3, [r7, #9]
 8001870:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <USB_OTG_USBH_handle_hc_ISR+0x6c>
      {
        retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	f000 fd77 	bl	8002370 <USB_OTG_USBH_handle_hc_n_In_ISR>
 8001882:	4603      	mov	r3, r0
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	e007      	b.n	800189c <USB_OTG_USBH_handle_hc_ISR+0x7c>
      }
      else
      {
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	6979      	ldr	r1, [r7, #20]
 8001890:	f000 fabe 	bl	8001e10 <USB_OTG_USBH_handle_hc_n_Out_ISR>
 8001894:	4603      	mov	r3, r0
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f103 0301 	add.w	r3, r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8ca      	bhi.n	8001846 <USB_OTG_USBH_handle_hc_ISR+0x26>
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
      }
    }
  }
  
  return retval;
 80018b0:	693b      	ldr	r3, [r7, #16]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	f107 0718 	add.w	r7, r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <USB_OTG_USBH_handle_sof_ISR>:
  *         Handles the start-of-frame interrupt in host mode.
  * @param  pdev: Selected device
  * @retval status 
  */
static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  
  gintsts.d32 = 0;
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  /* Clear interrupt */
  gintsts.b.sofintr = 1;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f043 0308 	orr.w	r3, r3, #8
 80018d0:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	615a      	str	r2, [r3, #20]
  
  return 1;
 80018da:	f04f 0301 	mov.w	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	f107 0714 	add.w	r7, r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop

080018ec <USB_OTG_USBH_handle_Disconnect_ISR>:
  *         Handles disconnect event.
  * @param  pdev: Selected device
  * @retval status 
  */
static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  pdev->host.ConnSts = 0;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  gintsts.d32 = 0;
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  
  pdev->host.port_cb->Disconnect(pdev);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.disconnect = 1;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001916:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	615a      	str	r2, [r3, #20]
  
  return 1;
 8001920:	f04f 0301 	mov.w	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	f107 0710 	add.w	r7, r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop

08001930 <USB_OTG_USBH_handle_nptxfempty_ISR>:
  *         Handles non periodic tx fifo empty.
  * @param  pdev: Selected device
  * @retval status 
  */
static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
  uint16_t                     len_words , len; 
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hnptxsts.b.chnum].xfer_len + 3) / 4;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800194e:	18d3      	adds	r3, r2, r3
 8001950:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f103 0303 	add.w	r3, r3, #3
 800195a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800195e:	82fb      	strh	r3, [r7, #22]
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8001960:	e0a5      	b.n	8001aae <USB_OTG_USBH_handle_nptxfempty_ISR+0x17e>
      (pdev->host.hc[hnptxsts.b.chnum].xfer_len != 0))
  {
    
    len = hnptxsts.b.nptxfspcavail * 4;
 8001962:	89bb      	ldrh	r3, [r7, #12]
 8001964:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001968:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hnptxsts.b.chnum].xfer_len)
 800196a:	8aba      	ldrh	r2, [r7, #20]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001972:	b2db      	uxtb	r3, r3
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800197a:	18cb      	adds	r3, r1, r3
 800197c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d91d      	bls.n	80019c2 <USB_OTG_USBH_handle_nptxfempty_ISR+0x92>
    {
      /* Last packet */
      len = pdev->host.hc[hnptxsts.b.chnum].xfer_len;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f3c3 7341 	ubfx	r3, r3, #29, #2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	82bb      	strh	r3, [r7, #20]
      
      intmsk.d32 = 0;
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
      intmsk.b.nptxfempty = 1;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f043 0320 	orr.w	r3, r3, #32
 80019aa:	613b      	str	r3, [r7, #16]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68d2      	ldr	r2, [r2, #12]
 80019b4:	6992      	ldr	r2, [r2, #24]
 80019b6:	4611      	mov	r1, r2
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	ea6f 0202 	mvn.w	r2, r2
 80019be:	400a      	ands	r2, r1
 80019c0:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hnptxsts.b.chnum].xfer_len + 3) / 4;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f3c3 7341 	ubfx	r3, r3, #29, #2
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80019d0:	18d3      	adds	r3, r2, r3
 80019d2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f103 0303 	add.w	r3, r3, #3
 80019dc:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80019e0:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.chnum].xfer_buff, hnptxsts.b.chnum, len);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f3c3 7341 	ubfx	r3, r3, #29, #2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	f103 030d 	add.w	r3, r3, #13
 80019f0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80019f4:	18d3      	adds	r3, r2, r3
 80019f6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	8abb      	ldrh	r3, [r7, #20]
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7fe fc5d 	bl	80002c8 <USB_OTG_WritePacket>
    
    pdev->host.hc[hnptxsts.b.chnum].xfer_buff  += len;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f102 020d 	add.w	r2, r2, #13
 8001a24:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8001a28:	188a      	adds	r2, r1, r2
 8001a2a:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8001a2e:	6811      	ldr	r1, [r2, #0]
 8001a30:	8aba      	ldrh	r2, [r7, #20]
 8001a32:	188a      	adds	r2, r1, r2
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	f103 030d 	add.w	r3, r3, #13
 8001a3a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001a3e:	18cb      	adds	r3, r1, r3
 8001a40:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001a44:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.chnum].xfer_len   -= len;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8001a5c:	188a      	adds	r2, r1, r2
 8001a5e:	f502 722f 	add.w	r2, r2, #700	; 0x2bc
 8001a62:	6811      	ldr	r1, [r2, #0]
 8001a64:	8aba      	ldrh	r2, [r7, #20]
 8001a66:	1a8a      	subs	r2, r1, r2
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001a6e:	18cb      	adds	r3, r1, r3
 8001a70:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001a74:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.chnum].xfer_count  += len; 
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8001a8c:	188a      	adds	r2, r1, r2
 8001a8e:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 8001a92:	6811      	ldr	r1, [r2, #0]
 8001a94:	8aba      	ldrh	r2, [r7, #20]
 8001a96:	188a      	adds	r2, r1, r2
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001a9e:	18cb      	adds	r3, r1, r3
 8001aa0:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001aa4:	601a      	str	r2, [r3, #0]
        
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	60fb      	str	r3, [r7, #12]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8001aae:	89bb      	ldrh	r3, [r7, #12]
 8001ab0:	8afa      	ldrh	r2, [r7, #22]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d20d      	bcs.n	8001ad2 <USB_OTG_USBH_handle_nptxfempty_ISR+0x1a2>
      (pdev->host.hc[hnptxsts.b.chnum].xfer_len != 0))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001ac4:	18d3      	adds	r3, r2, r3
 8001ac6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001aca:	681b      	ldr	r3, [r3, #0]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f47f af48 	bne.w	8001962 <USB_OTG_USBH_handle_nptxfempty_ISR+0x32>
    pdev->host.hc[hnptxsts.b.chnum].xfer_count  += len; 
        
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  }  

  return 1;
 8001ad2:	f04f 0301 	mov.w	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f107 0718 	add.w	r7, r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <USB_OTG_USBH_handle_ptxfempty_ISR>:
  *         Handles periodic tx fifo empty
  * @param  pdev: Selected device
  * @retval status 
  */
static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HPTXSTS_TypeDef      hptxsts; 
  uint16_t                     len_words , len; 
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hptxsts.b.chnum].xfer_len + 3) / 4;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001afe:	18d3      	adds	r3, r2, r3
 8001b00:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f103 0303 	add.w	r3, r3, #3
 8001b0a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8001b0e:	82fb      	strh	r3, [r7, #22]
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8001b10:	e0a5      	b.n	8001c5e <USB_OTG_USBH_handle_ptxfempty_ISR+0x17e>
      (pdev->host.hc[hptxsts.b.chnum].xfer_len != 0))    
  {
    
    len = hptxsts.b.ptxfspcavail * 4;
 8001b12:	89bb      	ldrh	r3, [r7, #12]
 8001b14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b18:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hptxsts.b.chnum].xfer_len)
 8001b1a:	8aba      	ldrh	r2, [r7, #20]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001b2a:	18cb      	adds	r3, r1, r3
 8001b2c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d91d      	bls.n	8001b72 <USB_OTG_USBH_handle_ptxfempty_ISR+0x92>
    {
      len = pdev->host.hc[hptxsts.b.chnum].xfer_len;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001b44:	18d3      	adds	r3, r2, r3
 8001b46:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	82bb      	strh	r3, [r7, #20]
      /* Last packet */
      intmsk.d32 = 0;
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
      intmsk.b.ptxfempty = 1;
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b5a:	613b      	str	r3, [r7, #16]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68d2      	ldr	r2, [r2, #12]
 8001b64:	6992      	ldr	r2, [r2, #24]
 8001b66:	4611      	mov	r1, r2
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	ea6f 0202 	mvn.w	r2, r2
 8001b6e:	400a      	ands	r2, r1
 8001b70:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hptxsts.b.chnum].xfer_len + 3) / 4;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001b80:	18d3      	adds	r3, r2, r3
 8001b82:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f103 0303 	add.w	r3, r3, #3
 8001b8c:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8001b90:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.chnum].xfer_buff, hptxsts.b.chnum, len);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	f103 030d 	add.w	r3, r3, #13
 8001ba0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001ba4:	18d3      	adds	r3, r2, r3
 8001ba6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001baa:	6819      	ldr	r1, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	8abb      	ldrh	r3, [r7, #20]
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7fe fb85 	bl	80002c8 <USB_OTG_WritePacket>
    
    pdev->host.hc[hptxsts.b.chnum].xfer_buff  += len;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f102 020d 	add.w	r2, r2, #13
 8001bd4:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8001bd8:	188a      	adds	r2, r1, r2
 8001bda:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8001bde:	6811      	ldr	r1, [r2, #0]
 8001be0:	8aba      	ldrh	r2, [r7, #20]
 8001be2:	188a      	adds	r2, r1, r2
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	f103 030d 	add.w	r3, r3, #13
 8001bea:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001bee:	18cb      	adds	r3, r1, r3
 8001bf0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001bf4:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.chnum].xfer_len   -= len;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8001c0c:	188a      	adds	r2, r1, r2
 8001c0e:	f502 722f 	add.w	r2, r2, #700	; 0x2bc
 8001c12:	6811      	ldr	r1, [r2, #0]
 8001c14:	8aba      	ldrh	r2, [r7, #20]
 8001c16:	1a8a      	subs	r2, r1, r2
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001c1e:	18cb      	adds	r3, r1, r3
 8001c20:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001c24:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.chnum].xfer_count  += len; 
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8001c3c:	188a      	adds	r2, r1, r2
 8001c3e:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 8001c42:	6811      	ldr	r1, [r2, #0]
 8001c44:	8aba      	ldrh	r2, [r7, #20]
 8001c46:	188a      	adds	r2, r1, r2
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001c4e:	18cb      	adds	r3, r1, r3
 8001c50:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001c54:	601a      	str	r2, [r3, #0]
     
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	60fb      	str	r3, [r7, #12]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8001c5e:	89bb      	ldrh	r3, [r7, #12]
 8001c60:	8afa      	ldrh	r2, [r7, #22]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d20d      	bcs.n	8001c82 <USB_OTG_USBH_handle_ptxfempty_ISR+0x1a2>
      (pdev->host.hc[hptxsts.b.chnum].xfer_len != 0))    
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8001c74:	18d3      	adds	r3, r2, r3
 8001c76:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001c7a:	681b      	ldr	r3, [r3, #0]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f af48 	bne.w	8001b12 <USB_OTG_USBH_handle_ptxfempty_ISR+0x32>
    pdev->host.hc[hptxsts.b.chnum].xfer_count  += len; 
     
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  }  
  
  return 1;
 8001c82:	f04f 0301 	mov.w	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	f107 0718 	add.w	r7, r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <USB_OTG_USBH_handle_port_ISR>:
  *         This function determines which interrupt conditions have occurred
  * @param  pdev: Selected device
  * @retval status 
  */
static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  USB_OTG_HPRT0_TypeDef  hprt0_dup;
  USB_OTG_HCFG_TypeDef   hcfg;    
  uint32_t do_reset = 0;
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
  uint32_t retval = 0;
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  
  hcfg.d32 = 0;
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  hprt0.d32 = 0;
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = 0;
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	613b      	str	r3, [r7, #16]
  
  /* Clear the interrupt bits in GINTSTS */
  
  hprt0_dup.b.prtena = 0;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f36f 0382 	bfc	r3, #2, #1
 8001cd0:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtconndet = 0;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f36f 0341 	bfc	r3, #1, #1
 8001cd8:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtenchng = 0;
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	f36f 03c3 	bfc	r3, #3, #1
 8001ce0:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtovrcurrchng = 0;
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f36f 1345 	bfc	r3, #5, #1
 8001ce8:	613b      	str	r3, [r7, #16]
  
  /* Port Connect Detected */
  if (hprt0.b.prtconndet)
 8001cea:	7d3b      	ldrb	r3, [r7, #20]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d010      	beq.n	8001d18 <USB_OTG_USBH_handle_port_ISR+0x88>
  {
    pdev->host.port_cb->Connect(pdev);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
    hprt0_dup.b.prtconndet = 1;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	613b      	str	r3, [r7, #16]
    do_reset = 1;
 8001d0a:	f04f 0301 	mov.w	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
    retval |= 1;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	61bb      	str	r3, [r7, #24]
  }
  
  /* Port Enable Changed */
  if (hprt0.b.prtenchng)
 8001d18:	7d3b      	ldrb	r3, [r7, #20]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d055      	beq.n	8001dd0 <USB_OTG_USBH_handle_port_ISR+0x140>
  {
    hprt0_dup.b.prtenchng = 1;
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	613b      	str	r3, [r7, #16]
    if (hprt0.b.prtena == 1)
 8001d2c:	7d3b      	ldrb	r3, [r7, #20]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d04b      	beq.n	8001dd0 <USB_OTG_USBH_handle_port_ISR+0x140>
    {
      pdev->host.ConnSts = 1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f04f 0201 	mov.w	r2, #1
 8001d3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8001d42:	7dbb      	ldrb	r3, [r7, #22]
 8001d44:	f003 0306 	and.w	r3, r3, #6
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d005      	beq.n	8001d5a <USB_OTG_USBH_handle_port_ISR+0xca>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
 8001d4e:	7dbb      	ldrb	r3, [r7, #22]
 8001d50:	f003 0306 	and.w	r3, r3, #6
 8001d54:	b2db      	uxtb	r3, r3
    hprt0_dup.b.prtenchng = 1;
    if (hprt0.b.prtena == 1)
    {
      pdev->host.ConnSts = 1;
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d135      	bne.n	8001dc6 <USB_OTG_USBH_handle_port_ISR+0x136>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8001d62:	7dbb      	ldrb	r3, [r7, #22]
 8001d64:	f003 0306 	and.w	r3, r3, #6
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d117      	bne.n	8001d9e <USB_OTG_USBH_handle_port_ISR+0x10e>
        {
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f241 7270 	movw	r2, #6000	; 0x1770
 8001d76:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_6_MHZ)
 8001d78:	7b3b      	ldrb	r3, [r7, #12]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d024      	beq.n	8001dce <USB_OTG_USBH_handle_port_ISR+0x13e>
          {
            if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7adb      	ldrb	r3, [r3, #11]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d104      	bne.n	8001d96 <USB_OTG_USBH_handle_port_ISR+0x106>
            {          
              USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f04f 0102 	mov.w	r1, #2
 8001d92:	f7fe ff71 	bl	8000c78 <USB_OTG_InitFSLSPClkSel>
            }          
            do_reset = 1;
 8001d96:	f04f 0301 	mov.w	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8001d9c:	e017      	b.n	8001dce <USB_OTG_USBH_handle_port_ISR+0x13e>
          }
        }
        else
        {
          
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001da6:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_48_MHZ)
 8001da8:	7b3b      	ldrb	r3, [r7, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d00c      	beq.n	8001dce <USB_OTG_USBH_handle_port_ISR+0x13e>
          {
            USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f04f 0101 	mov.w	r1, #1
 8001dba:	f7fe ff5d 	bl	8000c78 <USB_OTG_InitFSLSPClkSel>
            do_reset = 1;
 8001dbe:	f04f 0301 	mov.w	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8001dc4:	e003      	b.n	8001dce <USB_OTG_USBH_handle_port_ISR+0x13e>
          }
        }
      }
      else
      {
        do_reset = 1;
 8001dc6:	f04f 0301 	mov.w	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	e000      	b.n	8001dd0 <USB_OTG_USBH_handle_port_ISR+0x140>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8001dce:	bf00      	nop
        do_reset = 1;
      }
    }
  }
  /* Overcurrent Change Interrupt */
  if (hprt0.b.prtovrcurrchng)
 8001dd0:	7d3b      	ldrb	r3, [r7, #20]
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <USB_OTG_USBH_handle_port_ISR+0x15c>
  {
    hprt0_dup.b.prtovrcurrchng = 1;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f043 0320 	orr.w	r3, r3, #32
 8001de2:	613b      	str	r3, [r7, #16]
    retval |= 1;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	61bb      	str	r3, [r7, #24]
  }
  if (do_reset)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <USB_OTG_USBH_handle_port_ISR+0x168>
  {
    USB_OTG_ResetPort(pdev);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe ff8a 	bl	8000d0c <USB_OTG_ResetPort>
    
  }
  /* Clear Port Interrupts */
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	601a      	str	r2, [r3, #0]
  
  return retval;
 8001e02:	69bb      	ldr	r3, [r7, #24]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	f107 0720 	add.w	r7, r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop

08001e10 <USB_OTG_USBH_handle_hc_n_Out_ISR>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number
  * @retval status 
  */
uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b098      	sub	sp, #96	; 0x60
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  USB_OTG_HCINTn_TypeDef     hcint;
  USB_OTG_HCGINTMSK_TypeDef  hcintmsk;
  USB_OTG_HC_REGS *hcreg;
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  
  hcreg = pdev->regs.HC_REGS[num];
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001e22:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e26:	18d3      	adds	r3, r2, r3
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8001e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	65bb      	str	r3, [r7, #88]	; 0x58
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCGINTMSK);
 8001e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	657b      	str	r3, [r7, #84]	; 0x54
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8001e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	65bb      	str	r3, [r7, #88]	; 0x58
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001e48:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e4c:	18d3      	adds	r3, r2, r3
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	653b      	str	r3, [r7, #80]	; 0x50
  
  if (hcint.b.ahberr)
 8001e54:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d022      	beq.n	8001ea8 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x98>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e74:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001e7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e82:	18d3      	adds	r3, r2, r3
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001e9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e9e:	18d3      	adds	r3, r2, r3
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	e25c      	b.n	8002362 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x552>
  } 
  else if (hcint.b.ack)
 8001ea8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <USB_OTG_USBH_handle_hc_n_Out_ISR+0xbc>
  {
    CLEAR_HC_INT(hcreg , ack);
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	647b      	str	r3, [r7, #68]	; 0x44
 8001ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ebe:	f043 0320 	orr.w	r3, r3, #32
 8001ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	e24a      	b.n	8002362 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x552>
  }
  
  else if (hcint.b.xfercompl)
 8001ecc:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03a      	beq.n	8001f50 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x140>
  {
    pdev->host.ErrCnt[num] = 0;
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001ee2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001ee6:	18d3      	adds	r3, r2, r3
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001ef6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	643b      	str	r3, [r7, #64]	; 0x40
 8001f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	643b      	str	r3, [r7, #64]	; 0x40
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001f12:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001f16:	18d3      	adds	r3, r2, r3
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f1c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7ff fa0f 	bl	8001348 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xfercompl);
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3c:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XFRC;            
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	18d3      	adds	r3, r2, r3
 8001f44:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f48:	f04f 0201 	mov.w	r2, #1
 8001f4c:	711a      	strb	r2, [r3, #4]
 8001f4e:	e208      	b.n	8002362 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x552>
  }
  
  else if (hcint.b.stall)
 8001f50:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d030      	beq.n	8001fc0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x1b0>
  {
    CLEAR_HC_INT(hcreg , stall);
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f70:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001f7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001f7e:	18d3      	adds	r3, r2, r3
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001f96:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001f9a:	18d3      	adds	r3, r2, r3
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa0:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7ff f9cd 	bl	8001348 <USB_OTG_HC_Halt>
    pdev->host.HC_Status[num] = HC_STALL;      
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	18d3      	adds	r3, r2, r3
 8001fb4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fb8:	f04f 0205 	mov.w	r2, #5
 8001fbc:	711a      	strb	r2, [r3, #4]
 8001fbe:	e1d0      	b.n	8002362 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x552>
  }
  
  else if (hcint.b.nak)
 8001fc0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03a      	beq.n	8002044 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x234>
  {
    pdev->host.ErrCnt[num] = 0;
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001fd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001fda:	18d3      	adds	r3, r2, r3
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8001fea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001fee:	18d3      	adds	r3, r2, r3
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002006:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800200a:	18d3      	adds	r3, r2, r3
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002010:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4619      	mov	r1, r3
 800201a:	f7ff f995 	bl	8001348 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800202c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800202e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002030:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NAK;      
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	18d3      	adds	r3, r2, r3
 8002038:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800203c:	f04f 0203 	mov.w	r2, #3
 8002040:	711a      	strb	r2, [r3, #4]
 8002042:	e18e      	b.n	8002362 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x552>
  }
  
  else if (hcint.b.xacterr)
 8002044:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002048:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d042      	beq.n	80020d8 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x2c8>
  {
    UNMASK_HOST_INT_CHH (num);
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800205a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800205e:	18d3      	adds	r3, r2, r3
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002076:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800207a:	18d3      	adds	r3, r2, r3
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002080:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4619      	mov	r1, r3
 800208a:	f7ff f95d 	bl	8001348 <USB_OTG_HC_Halt>
    pdev->host.ErrCnt[num] ++;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8002096:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800209a:	18d3      	adds	r3, r2, r3
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f103 0201 	add.w	r2, r3, #1
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f103 0384 	add.w	r3, r3, #132	; 0x84
 80020aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80020ae:	18cb      	adds	r3, r1, r3
 80020b0:	605a      	str	r2, [r3, #4]
    pdev->host.HC_Status[num] = HC_XACTERR;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	18d3      	adds	r3, r2, r3
 80020b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020bc:	f04f 0206 	mov.w	r2, #6
 80020c0:	711a      	strb	r2, [r3, #4]
    CLEAR_HC_INT(hcreg , xacterr);
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
 80020d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	e144      	b.n	8002362 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x552>
  }
  else if (hcint.b.nyet)
 80020d8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03a      	beq.n	800215c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x34c>
  {
    pdev->host.ErrCnt[num] = 0;
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f103 0384 	add.w	r3, r3, #132	; 0x84
 80020ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80020f2:	18d3      	adds	r3, r2, r3
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
    UNMASK_HOST_INT_CHH (num);
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002102:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002106:	18d3      	adds	r3, r2, r3
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800211e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002122:	18d3      	adds	r3, r2, r3
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4619      	mov	r1, r3
 8002132:	f7ff f909 	bl	8001348 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nyet);
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002148:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NYET;    
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	18d3      	adds	r3, r2, r3
 8002150:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002154:	f04f 0204 	mov.w	r2, #4
 8002158:	711a      	strb	r2, [r3, #4]
 800215a:	e102      	b.n	8002362 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x552>
  }
  else if (hcint.b.datatglerr)
 800215c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d03a      	beq.n	80021e0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x3d0>
  {
   
    UNMASK_HOST_INT_CHH (num);
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002172:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002176:	18d3      	adds	r3, r2, r3
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800218e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002192:	18d3      	adds	r3, r2, r3
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7ff f8d1 	bl	8001348 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f043 0310 	orr.w	r3, r3, #16
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b8:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR;
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	18d3      	adds	r3, r2, r3
 80021c0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021c4:	f04f 0208 	mov.w	r2, #8
 80021c8:	711a      	strb	r2, [r3, #4]
    
    CLEAR_HC_INT(hcreg , datatglerr);
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	e0c0      	b.n	8002362 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x552>
  }  
  else if (hcint.b.chhltd)
 80021e0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80b9 	beq.w	8002362 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x552>
  {
    MASK_HOST_INT_CHH (num);
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80021f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80021fc:	18d3      	adds	r3, r2, r3
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f36f 0341 	bfc	r3, #1, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002214:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002218:	18d3      	adds	r3, r2, r3
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	18d3      	adds	r3, r2, r3
 8002226:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800222a:	791b      	ldrb	r3, [r3, #4]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d122      	bne.n	8002278 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x468>
    {
      pdev->host.URB_State[num] = URB_DONE;  
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	18d3      	adds	r3, r2, r3
 8002238:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800223c:	f04f 0201 	mov.w	r2, #1
 8002240:	70da      	strb	r2, [r3, #3]
      
      if (hcchar.b.eptype == EP_TYPE_BULK)
 8002242:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b08      	cmp	r3, #8
 800224e:	d17e      	bne.n	800234e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x53e>
      {
        pdev->host.hc[num].toggle_out ^= 1; 
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f103 0316 	add.w	r3, r3, #22
 8002258:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800225c:	18d3      	adds	r3, r2, r3
 800225e:	795b      	ldrb	r3, [r3, #5]
 8002260:	f083 0301 	eor.w	r3, r3, #1
 8002264:	b2da      	uxtb	r2, r3
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f103 0316 	add.w	r3, r3, #22
 800226e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002272:	18cb      	adds	r3, r1, r3
 8002274:	715a      	strb	r2, [r3, #5]
 8002276:	e06a      	b.n	800234e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x53e>
      }
    }
    else if(pdev->host.HC_Status[num] == HC_NAK)
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002282:	791b      	ldrb	r3, [r3, #4]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b03      	cmp	r3, #3
 8002288:	d108      	bne.n	800229c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x48c>
    {
      pdev->host.URB_State[num] = URB_NOTREADY;      
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	18d3      	adds	r3, r2, r3
 8002290:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8002294:	f04f 0202 	mov.w	r2, #2
 8002298:	70da      	strb	r2, [r3, #3]
 800229a:	e058      	b.n	800234e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x53e>
    }    
    else if(pdev->host.HC_Status[num] == HC_NYET)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022a6:	791b      	ldrb	r3, [r3, #4]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d118      	bne.n	80022e0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4d0>
    {
      if(pdev->host.hc[num].do_ping == 1)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80022b6:	18d3      	adds	r3, r2, r3
 80022b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80022bc:	7a1b      	ldrb	r3, [r3, #8]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d105      	bne.n	80022ce <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4be>
      {
        USB_OTG_HC_DoPing(pdev, num);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7ff f893 	bl	80013f4 <USB_OTG_HC_DoPing>
      }
      pdev->host.URB_State[num] = URB_NOTREADY;      
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	18d3      	adds	r3, r2, r3
 80022d4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80022d8:	f04f 0202 	mov.w	r2, #2
 80022dc:	70da      	strb	r2, [r3, #3]
 80022de:	e036      	b.n	800234e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x53e>
    }      
    else if(pdev->host.HC_Status[num] == HC_STALL)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	18d3      	adds	r3, r2, r3
 80022e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022ea:	791b      	ldrb	r3, [r3, #4]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d108      	bne.n	8002304 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4f4>
    {
      pdev->host.URB_State[num] = URB_STALL;      
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	18d3      	adds	r3, r2, r3
 80022f8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80022fc:	f04f 0204 	mov.w	r2, #4
 8002300:	70da      	strb	r2, [r3, #3]
 8002302:	e024      	b.n	800234e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x53e>
    }  
    else if(pdev->host.HC_Status[num] == HC_XACTERR)
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	18d3      	adds	r3, r2, r3
 800230a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b06      	cmp	r3, #6
 8002314:	d11b      	bne.n	800234e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x53e>
    {
      if (pdev->host.ErrCnt[num] == 3)
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f103 0384 	add.w	r3, r3, #132	; 0x84
 800231e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002322:	18d3      	adds	r3, r2, r3
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d111      	bne.n	800234e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x53e>
      {
        pdev->host.URB_State[num] = URB_ERROR;  
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	18d3      	adds	r3, r2, r3
 8002330:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8002334:	f04f 0203 	mov.w	r2, #3
 8002338:	70da      	strb	r2, [r3, #3]
        pdev->host.ErrCnt[num] = 0;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8002342:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002346:	18d3      	adds	r3, r2, r3
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	605a      	str	r2, [r3, #4]
      }
    }
    CLEAR_HC_INT(hcreg , chhltd);    
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002360:	609a      	str	r2, [r3, #8]
  }
  

  return 1;
 8002362:	f04f 0301 	mov.w	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	f107 0760 	add.w	r7, r7, #96	; 0x60
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <USB_OTG_USBH_handle_hc_n_In_ISR>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number
  * @retval status 
  */
uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b09c      	sub	sp, #112	; 0x70
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HC_REGS *hcreg;

  
  hcreg = pdev->regs.HC_REGS[num];
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002382:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002386:	18d3      	adds	r3, r2, r3
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	66fb      	str	r3, [r7, #108]	; 0x6c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 800238c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	66bb      	str	r3, [r7, #104]	; 0x68
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCGINTMSK);
 8002392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8002398:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800239a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800239c:	4013      	ands	r3, r2
 800239e:	66bb      	str	r3, [r7, #104]	; 0x68
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80023a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80023ac:	18d3      	adds	r3, r2, r3
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = 0;
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	667b      	str	r3, [r7, #100]	; 0x64
  
  
  if (hcint.b.ahberr)
 80023ba:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d022      	beq.n	800240e <USB_OTG_USBH_handle_hc_n_In_ISR+0x9e>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80023ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023da:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80023e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80023e8:	18d3      	adds	r3, r2, r3
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	657b      	str	r3, [r7, #84]	; 0x54
 80023f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	657b      	str	r3, [r7, #84]	; 0x54
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002400:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002404:	18d3      	adds	r3, r2, r3
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800240a:	60da      	str	r2, [r3, #12]
 800240c:	e098      	b.n	8002540 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }  
  else if (hcint.b.ack)
 800240e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <USB_OTG_USBH_handle_hc_n_In_ISR+0xc2>
  {
    CLEAR_HC_INT(hcreg ,ack);
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	653b      	str	r3, [r7, #80]	; 0x50
 8002422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002424:	f043 0320 	orr.w	r3, r3, #32
 8002428:	653b      	str	r3, [r7, #80]	; 0x50
 800242a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	e086      	b.n	8002540 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  
  else if (hcint.b.stall)  
 8002432:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d03e      	beq.n	80024be <USB_OTG_USBH_handle_hc_n_In_ISR+0x14e>
  {
    UNMASK_HOST_INT_CHH (num);
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002448:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800244c:	18d3      	adds	r3, r2, r3
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002464:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002468:	18d3      	adds	r3, r2, r3
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800246e:	60da      	str	r2, [r3, #12]
    pdev->host.HC_Status[num] = HC_STALL; 
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800247a:	f04f 0205 	mov.w	r2, #5
 800247e:	711a      	strb	r2, [r3, #4]
    CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	64bb      	str	r3, [r7, #72]	; 0x48
 8002486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002488:	f043 0310 	orr.w	r3, r3, #16
 800248c:	64bb      	str	r3, [r7, #72]	; 0x48
 800248e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002492:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	647b      	str	r3, [r7, #68]	; 0x44
 800249a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	647b      	str	r3, [r7, #68]	; 0x44
 80024a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a6:	609a      	str	r2, [r3, #8]
    hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
 80024a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024aa:	f36f 1304 	bfc	r3, #4, #1
 80024ae:	66bb      	str	r3, [r7, #104]	; 0x68
                                  else, the pdev->host.HC_Status = HC_STALL
                                  will be overwritten by 'nak' in code below */
    USB_OTG_HC_Halt(pdev, num);    
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7fe ff46 	bl	8001348 <USB_OTG_HC_Halt>
 80024bc:	e040      	b.n	8002540 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  else if (hcint.b.datatglerr)
 80024be:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d039      	beq.n	8002540 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  {

      UNMASK_HOST_INT_CHH (num);
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80024d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80024d8:	18d3      	adds	r3, r2, r3
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	643b      	str	r3, [r7, #64]	; 0x40
 80024e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	643b      	str	r3, [r7, #64]	; 0x40
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80024f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80024f4:	18d3      	adds	r3, r2, r3
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024fa:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe ff20 	bl	8001348 <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak);   
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002510:	f043 0310 	orr.w	r3, r3, #16
 8002514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251a:	609a      	str	r2, [r3, #8]
      pdev->host.HC_Status[num] = HC_DATATGLERR; 
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002526:	f04f 0208 	mov.w	r2, #8
 800252a:	711a      	strb	r2, [r3, #4]
    CLEAR_HC_INT(hcreg , datatglerr);
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	63bb      	str	r3, [r7, #56]	; 0x38
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002538:	63bb      	str	r3, [r7, #56]	; 0x38
 800253a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800253c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253e:	609a      	str	r2, [r3, #8]
  }    
  
  if (hcint.b.frmovrun)
 8002540:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d028      	beq.n	80025a0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x230>
  {
    UNMASK_HOST_INT_CHH (num);
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002556:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800255a:	18d3      	adds	r3, r2, r3
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002572:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002576:	18d3      	adds	r3, r2, r3
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800257c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fedf 	bl	8001348 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
 8002598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800259a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	e1e5      	b.n	800296c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fc>
  }
  
  else if (hcint.b.xfercompl)
 80025a0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80a5 	beq.w	80026fa <USB_OTG_USBH_handle_hc_n_In_ISR+0x38a>
  {
    
    if (pdev->cfg.dma_enable == 1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	78db      	ldrb	r3, [r3, #3]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d11b      	bne.n	80025f0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x280>
    {
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80025c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80025c4:	18d3      	adds	r3, r2, r3
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	65fb      	str	r3, [r7, #92]	; 0x5c
      pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e2:	1ad1      	subs	r1, r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	f102 0294 	add.w	r2, r2, #148	; 0x94
 80025ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
 
    pdev->host.HC_Status[num] = HC_XFRC;     
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	18d3      	adds	r3, r2, r3
 80025f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025fa:	f04f 0201 	mov.w	r2, #1
 80025fe:	711a      	strb	r2, [r3, #4]
    pdev->host.ErrCnt [num]= 0;
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8002608:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800260c:	18d3      	adds	r3, r2, r3
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
    CLEAR_HC_INT(hcreg , xfercompl);
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002626:	609a      	str	r2, [r3, #8]
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8002628:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <USB_OTG_USBH_handle_hc_n_In_ISR+0x2d4>
        (hcchar.b.eptype == EP_TYPE_BULK))
 8002636:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	b2db      	uxtb	r3, r3
 
    pdev->host.HC_Status[num] = HC_XFRC;     
    pdev->host.ErrCnt [num]= 0;
    CLEAR_HC_INT(hcreg , xfercompl);
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8002640:	2b08      	cmp	r3, #8
 8002642:	d13b      	bne.n	80026bc <USB_OTG_USBH_handle_hc_n_In_ISR+0x34c>
        (hcchar.b.eptype == EP_TYPE_BULK))
    {
      UNMASK_HOST_INT_CHH (num);
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800264c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002650:	18d3      	adds	r3, r2, r3
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002668:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800266c:	18d3      	adds	r3, r2, r3
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002672:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fe64 	bl	8001348 <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak); 
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	f043 0310 	orr.w	r3, r3, #16
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002692:	609a      	str	r2, [r3, #8]
      pdev->host.hc[num].toggle_in ^= 1;
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f103 0316 	add.w	r3, r3, #22
 800269c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80026a0:	18d3      	adds	r3, r2, r3
 80026a2:	791b      	ldrb	r3, [r3, #4]
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f103 0316 	add.w	r3, r3, #22
 80026b2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80026b6:	18cb      	adds	r3, r1, r3
 80026b8:	711a      	strb	r2, [r3, #4]
 80026ba:	e157      	b.n	800296c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fc>

    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 80026bc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	f040 814f 	bne.w	800296a <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fa>
    {
      hcchar.b.oddfrm  = 1;
 80026cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026d2:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80026dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80026e0:	18d3      	adds	r3, r2, r3
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026e6:	601a      	str	r2, [r3, #0]
      pdev->host.URB_State[num] = URB_DONE;  
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	18d3      	adds	r3, r2, r3
 80026ee:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80026f2:	f04f 0201 	mov.w	r2, #1
 80026f6:	70da      	strb	r2, [r3, #3]
 80026f8:	e137      	b.n	800296a <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fa>
    }
    
  }
  else if (hcint.b.chhltd)
 80026fa:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8086 	beq.w	8002816 <USB_OTG_USBH_handle_hc_n_In_ISR+0x4a6>
  {
    MASK_HOST_INT_CHH (num);
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002712:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002716:	18d3      	adds	r3, r2, r3
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f36f 0341 	bfc	r3, #1, #1
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800272e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002732:	18d3      	adds	r3, r2, r3
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	18d3      	adds	r3, r2, r3
 8002740:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002744:	791b      	ldrb	r3, [r3, #4]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d108      	bne.n	800275e <USB_OTG_USBH_handle_hc_n_In_ISR+0x3ee>
    {
      pdev->host.URB_State[num] = URB_DONE;      
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	18d3      	adds	r3, r2, r3
 8002752:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8002756:	f04f 0201 	mov.w	r2, #1
 800275a:	70da      	strb	r2, [r3, #3]
 800275c:	e050      	b.n	8002800 <USB_OTG_USBH_handle_hc_n_In_ISR+0x490>
    }
    
    else if (pdev->host.HC_Status[num] == HC_STALL) 
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	18d3      	adds	r3, r2, r3
 8002764:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002768:	791b      	ldrb	r3, [r3, #4]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b05      	cmp	r3, #5
 800276e:	d108      	bne.n	8002782 <USB_OTG_USBH_handle_hc_n_In_ISR+0x412>
    {
       pdev->host.URB_State[num] = URB_STALL;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800277a:	f04f 0204 	mov.w	r2, #4
 800277e:	70da      	strb	r2, [r3, #3]
 8002780:	e03e      	b.n	8002800 <USB_OTG_USBH_handle_hc_n_In_ISR+0x490>
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	18d3      	adds	r3, r2, r3
 8002788:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800278c:	791b      	ldrb	r3, [r3, #4]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b06      	cmp	r3, #6
 8002792:	d008      	beq.n	80027a6 <USB_OTG_USBH_handle_hc_n_In_ISR+0x436>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	18d3      	adds	r3, r2, r3
 800279a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800279e:	791b      	ldrb	r3, [r3, #4]
 80027a0:	b2db      	uxtb	r3, r3
    else if (pdev->host.HC_Status[num] == HC_STALL) 
    {
       pdev->host.URB_State[num] = URB_STALL;
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d112      	bne.n	80027cc <USB_OTG_USBH_handle_hc_n_In_ISR+0x45c>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
    {
        pdev->host.ErrCnt[num] = 0;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f103 0384 	add.w	r3, r3, #132	; 0x84
 80027ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80027b2:	18d3      	adds	r3, r2, r3
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	605a      	str	r2, [r3, #4]
        pdev->host.URB_State[num] = URB_ERROR;  
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	18d3      	adds	r3, r2, r3
 80027c0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80027c4:	f04f 0203 	mov.w	r2, #3
 80027c8:	70da      	strb	r2, [r3, #3]
 80027ca:	e019      	b.n	8002800 <USB_OTG_USBH_handle_hc_n_In_ISR+0x490>

    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 80027cc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d112      	bne.n	8002800 <USB_OTG_USBH_handle_hc_n_In_ISR+0x490>
    {
      pdev->host.hc[num].toggle_in ^= 1;
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f103 0316 	add.w	r3, r3, #22
 80027e2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80027e6:	18d3      	adds	r3, r2, r3
 80027e8:	791b      	ldrb	r3, [r3, #4]
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	f103 0316 	add.w	r3, r3, #22
 80027f8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80027fc:	18cb      	adds	r3, r1, r3
 80027fe:	711a      	strb	r2, [r3, #4]
    }
    
    CLEAR_HC_INT(hcreg , chhltd);    
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e0aa      	b.n	800296c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fc>
    
  }    
  else if (hcint.b.xacterr)
 8002816:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800281a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d042      	beq.n	80028aa <USB_OTG_USBH_handle_hc_n_In_ISR+0x53a>
  {
    UNMASK_HOST_INT_CHH (num);
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800282c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002830:	18d3      	adds	r3, r2, r3
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f043 0302 	orr.w	r3, r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002848:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800284c:	18d3      	adds	r3, r2, r3
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	60da      	str	r2, [r3, #12]
    pdev->host.ErrCnt[num] ++;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f103 0384 	add.w	r3, r3, #132	; 0x84
 800285c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002860:	18d3      	adds	r3, r2, r3
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f103 0201 	add.w	r2, r3, #1
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8002870:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002874:	18cb      	adds	r3, r1, r3
 8002876:	605a      	str	r2, [r3, #4]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002882:	f04f 0206 	mov.w	r2, #6
 8002886:	711a      	strb	r2, [r3, #4]
    USB_OTG_HC_Halt(pdev, num);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4619      	mov	r1, r3
 8002890:	f7fe fd5a 	bl	8001348 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xacterr);    
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	e060      	b.n	800296c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fc>
    
  }
  else if (hcint.b.nak)  
 80028aa:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d059      	beq.n	800296c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fc>
  {  
    if(hcchar.b.eptype == EP_TYPE_INTR)
 80028b8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d128      	bne.n	8002918 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5a8>
    {
      UNMASK_HOST_INT_CHH (num);
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80028ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028d2:	18d3      	adds	r3, r2, r3
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80028ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028ee:	18d3      	adds	r3, r2, r3
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe fd23 	bl	8001348 <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak);   
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f043 0310 	orr.w	r3, r3, #16
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	e01f      	b.n	8002958 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5e8>
    }
     else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8002918:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5c4>
             (hcchar.b.eptype == EP_TYPE_BULK))
 8002926:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	b2db      	uxtb	r3, r3
    {
      UNMASK_HOST_INT_CHH (num);
      USB_OTG_HC_Halt(pdev, num);
      CLEAR_HC_INT(hcreg , nak);   
    }
     else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8002930:	2b08      	cmp	r3, #8
 8002932:	d111      	bne.n	8002958 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5e8>
             (hcchar.b.eptype == EP_TYPE_BULK))
    {
      /* re-activate the channel  */
      hcchar.b.chen = 1;
 8002934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800293a:	663b      	str	r3, [r7, #96]	; 0x60
      hcchar.b.chdis = 0;
 800293c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800293e:	f36f 739e 	bfc	r3, #30, #1
 8002942:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800294c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002950:	18d3      	adds	r3, r2, r3
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002956:	601a      	str	r2, [r3, #0]
    }
    pdev->host.HC_Status[num] = HC_NAK;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002962:	f04f 0203 	mov.w	r2, #3
 8002966:	711a      	strb	r2, [r3, #4]
 8002968:	e000      	b.n	800296c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fc>
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      hcchar.b.oddfrm  = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
      pdev->host.URB_State[num] = URB_DONE;  
 800296a:	bf00      	nop
    }
    pdev->host.HC_Status[num] = HC_NAK;
  }

  
  return 1;
 800296c:	f04f 0301 	mov.w	r3, #1
  
}
 8002970:	4618      	mov	r0, r3
 8002972:	f107 0770 	add.w	r7, r7, #112	; 0x70
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop

0800297c <USB_OTG_USBH_handle_rx_qlvl_ISR>:
  * @param  pdev: Selected device
  * @retval status 
  */

static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  USB_OTG_GRXFSTS_TypeDef       grxsts;
  USB_OTG_GINTMSK_TypeDef       intmsk;
  USB_OTG_HCTSIZn_TypeDef       hctsiz; 
  USB_OTG_HCCHAR_TypeDef        hcchar;
  __IO uint8_t                  channelnum =0;  
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	72fb      	strb	r3, [r7, #11]
  uint32_t                      count;    
  
  /* Disable the Rx Status Queue Level interrupt */
  intmsk.d32 = 0;
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  intmsk.b.rxstsqlvl = 1;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f043 0310 	orr.w	r3, r3, #16
 8002996:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68d2      	ldr	r2, [r2, #12]
 80029a0:	6992      	ldr	r2, [r2, #24]
 80029a2:	4611      	mov	r1, r2
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	ea6f 0202 	mvn.w	r2, r2
 80029aa:	400a      	ands	r2, r1
 80029ac:	619a      	str	r2, [r3, #24]
  
  grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	61bb      	str	r3, [r7, #24]
  channelnum = grxsts.b.chnum;  
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	72fb      	strb	r3, [r7, #11]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
 80029c0:	7afb      	ldrb	r3, [r7, #11]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80029ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029ce:	18d3      	adds	r3, r2, r3
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  
  switch (grxsts.b.pktsts)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	f040 809b 	bne.w	8002b1a <USB_OTG_USBH_handle_rx_qlvl_ISR+0x19e>
  {
  case GRXSTS_PKTSTS_IN:
    /* Read the data into the host buffer. */
    if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f340 8095 	ble.w	8002b1c <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
 80029f2:	7afb      	ldrb	r3, [r7, #11]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	f103 030d 	add.w	r3, r3, #13
 80029fc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002a00:	18d3      	adds	r3, r2, r3
 8002a02:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8087 	beq.w	8002b1c <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
    {  
      
      USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	f103 030d 	add.w	r3, r3, #13
 8002a18:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002a1c:	18d3      	adds	r3, r2, r3
 8002a1e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	f7fd fc8d 	bl	8000350 <USB_OTG_ReadPacket>
      /*manage multiple Xfer */
      pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	f102 020d 	add.w	r2, r2, #13
 8002a4c:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8002a50:	188a      	adds	r2, r1, r2
 8002a52:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8002a56:	6811      	ldr	r1, [r2, #0]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8002a5e:	b292      	uxth	r2, r2
 8002a60:	188a      	adds	r2, r1, r2
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	f103 030d 	add.w	r3, r3, #13
 8002a68:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002a6c:	18cb      	adds	r3, r1, r3
 8002a6e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002a72:	601a      	str	r2, [r3, #0]
      pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8002a8a:	188a      	adds	r2, r1, r2
 8002a8c:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8002a98:	b292      	uxth	r2, r2
 8002a9a:	188a      	adds	r2, r1, r2
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002aa2:	18cb      	adds	r3, r1, r3
 8002aa4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002aa8:	601a      	str	r2, [r3, #0]
      
     
      count = pdev->host.hc[channelnum].xfer_count;
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8002ab4:	18d3      	adds	r3, r2, r3
 8002ab6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61fb      	str	r3, [r7, #28]
      pdev->host.XferCnt[channelnum]  = count;
 8002abe:	7afb      	ldrb	r3, [r7, #11]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8002aca:	69f9      	ldr	r1, [r7, #28]
 8002acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
 8002ad0:	7afb      	ldrb	r3, [r7, #11]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002ada:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ade:	18d3      	adds	r3, r2, r3
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	613b      	str	r3, [r7, #16]
      if(hctsiz.b.pktcnt > 0)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	dd14      	ble.n	8002b1c <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
      {
        /* re-activate the channel when more packets are expected */
        hcchar.b.chen = 1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002af8:	60fb      	str	r3, [r7, #12]
        hcchar.b.chdis = 0;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f36f 739e 	bfc	r3, #30, #1
 8002b00:	60fb      	str	r3, [r7, #12]
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8002b0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b10:	18d3      	adds	r3, r2, r3
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	601a      	str	r2, [r3, #0]
      }
    }
    break;
 8002b18:	e000      	b.n	8002b1c <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
   
    case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8002b1a:	e000      	b.n	8002b1e <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a2>
        hcchar.b.chen = 1;
        hcchar.b.chdis = 0;
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
      }
    }
    break;
 8002b1c:	bf00      	nop
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  intmsk.b.rxstsqlvl = 1;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f043 0310 	orr.w	r3, r3, #16
 8002b24:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	6992      	ldr	r2, [r2, #24]
 8002b30:	4611      	mov	r1, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	619a      	str	r2, [r3, #24]
  return 1;
 8002b38:	f04f 0301 	mov.w	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f107 0720 	add.w	r7, r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop

08002b48 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>:
  *         Handles the incomplete Periodic transfer Interrupt
  * @param  pdev: Selected device
  * @retval status 
  */
static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
    USB_OTG_HCCHAR_TypeDef        hcchar; 
   
    

    
    hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60bb      	str	r3, [r7, #8]
    hcchar.b.chen = 1;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b60:	60bb      	str	r3, [r7, #8]
    hcchar.b.chdis = 1;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b68:	60bb      	str	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	601a      	str	r2, [r3, #0]
    
    gintsts.d32 = 0;
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
    /* Clear interrupt */
    gintsts.b.incomplisoout = 1;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b80:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	615a      	str	r2, [r3, #20]

    return 1;
 8002b8a:	f04f 0301 	mov.w	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f107 0714 	add.w	r7, r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <USBH_Connect>:
  *         USB Connect callback function from the Interrupt. 
  * @param  selected device
  * @retval none
  */
void USBH_Connect (void *pdev)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_CORE_HANDLE *ppdev = pdev;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]
  ppdev->host.port_cb->ConnStatus = 1;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002bae:	f04f 0201 	mov.w	r2, #1
 8002bb2:	721a      	strb	r2, [r3, #8]
  ppdev->host.port_cb->ConnHandled = 0; 
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	729a      	strb	r2, [r3, #10]
}
 8002bc0:	f107 0714 	add.w	r7, r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop

08002bcc <USBH_Disconnect>:
  * @param  selected device
  * @retval none
  */

void USBH_Disconnect (void *pdev)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  
  USB_OTG_CORE_HANDLE *ppdev = pdev;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]
    
  /* Make device Not connected flag true */
  ppdev->host.port_cb->DisconnStatus = 1; 
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002bde:	f04f 0201 	mov.w	r2, #1
 8002be2:	725a      	strb	r2, [r3, #9]
  ppdev->host.port_cb->DisconnHandled = 0;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	72da      	strb	r2, [r3, #11]
}
 8002bf0:	f107 0714 	add.w	r7, r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <USBH_Init>:
void USBH_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBH_HOST *phost,               
               USBH_Class_cb_TypeDef *class_cb, 
               USBH_Usr_cb_TypeDef *usr_cb)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	72fb      	strb	r3, [r7, #11]
     
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f015 fd57 	bl	80186c0 <USB_OTG_BSP_Init>
  
  /* configure GPIO pin used for switching VBUS power */
  USB_OTG_BSP_ConfigVBUS(0);  
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f015 fdff 	bl	8018818 <USB_OTG_BSP_ConfigVBUS>
  
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	f000 f82b 	bl	8002c78 <USBH_DeInit>
  
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	67da      	str	r2, [r3, #124]	; 0x7c
  phost->usr_cb = usr_cb;  
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  pdev->host.port_cb = &USBH_DeviceConnStatus_cb;
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	f640 03cc 	movw	r3, #2252	; 0x8cc
 8002c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c3a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
  
  pdev->host.port_cb->ConnStatus = 0;   
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	721a      	strb	r2, [r3, #8]
  pdev->host.port_cb->DisconnStatus = 0; 
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	725a      	strb	r2, [r3, #9]
  
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 8002c56:	7afb      	ldrb	r3, [r7, #11]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f7fe fc56 	bl	800150c <HCD_Init>
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f015 fd98 	bl	80187a0 <USB_OTG_BSP_EnableInterrupt>
}
 8002c70:	f107 0710 	add.w	r7, r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <USBH_DeInit>:
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  phost->gStateBkp = HOST_IDLE; 
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	705a      	strb	r2, [r3, #1]
  phost->EnumState = ENUM_IDLE;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	709a      	strb	r2, [r3, #2]
  phost->RequestState = CMD_SEND;  
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f04f 0201 	mov.w	r2, #1
 8002ca0:	70da      	strb	r2, [r3, #3]
  
  phost->Control.state = CTRL_SETUP;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f04f 0201 	mov.w	r2, #1
 8002ca8:	771a      	strb	r2, [r3, #28]
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002cb0:	719a      	strb	r2, [r3, #6]
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f883 2020 	strb.w	r2, [r3, #32]
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f04f 0201 	mov.w	r2, #1
 8002cc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  USBH_Free_Channel  (pdev, phost->Control.hc_num_in);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f000 fde7 	bl	80038a0 <USBH_Free_Channel>
  USBH_Free_Channel  (pdev, phost->Control.hc_num_out);  
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	795b      	ldrb	r3, [r3, #5]
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f000 fde1 	bl	80038a0 <USBH_Free_Channel>
  return USBH_OK;
 8002cde:	f04f 0300 	mov.w	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f107 0708 	add.w	r7, r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <USBH_Process>:
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  volatile USBH_Status status = USBH_FAIL;
 8002cf6:	f04f 0302 	mov.w	r3, #2
 8002cfa:	73fb      	strb	r3, [r7, #15]
    
  switch (phost->gState)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	f200 8105 	bhi.w	8002f10 <USBH_Process+0x224>
 8002d06:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <USBH_Process+0x20>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d59 	.word	0x08002d59
 8002d10:	08002d41 	.word	0x08002d41
 8002d14:	08002d77 	.word	0x08002d77
 8002d18:	08002f11 	.word	0x08002f11
 8002d1c:	08002f11 	.word	0x08002f11
 8002d20:	08002f11 	.word	0x08002f11
 8002d24:	08002e45 	.word	0x08002e45
 8002d28:	08002e93 	.word	0x08002e93
 8002d2c:	08002ec3 	.word	0x08002ec3
 8002d30:	08002ee1 	.word	0x08002ee1
 8002d34:	08002e67 	.word	0x08002e67
 8002d38:	08002f11 	.word	0x08002f11
 8002d3c:	08002eeb 	.word	0x08002eeb
  {
  case HOST_ISSUE_CORE_RESET :
     
    if ( HCD_ResetPort(pdev) == 0)
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fe fc4b 	bl	80015dc <HCD_ResetPort>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f040 80e3 	bne.w	8002f14 <USBH_Process+0x228>
    {
      phost->gState = HOST_IDLE;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
    }
    break;
 8002d56:	e0dd      	b.n	8002f14 <USBH_Process+0x228>
    
  case HOST_IDLE :
    
    if (HCD_IsDeviceConnected(pdev))  
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7fe fc4d 	bl	80015f8 <HCD_IsDeviceConnected>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80d9 	beq.w	8002f18 <USBH_Process+0x22c>
    {
      /* Wait for USB Connect Interrupt void USBH_ISR_Connected(void) */     
      USBH_DeAllocate_AllChannel(pdev);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fdc0 	bl	80038ec <USBH_DeAllocate_AllChannel>
      phost->gState = HOST_DEV_ATTACHED;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f04f 0202 	mov.w	r2, #2
 8002d72:	701a      	strb	r2, [r3, #0]
    }
    break;
 8002d74:	e0d0      	b.n	8002f18 <USBH_Process+0x22c>
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	4798      	blx	r3
    pdev->host.port_cb->DisconnStatus = 0; 
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	725a      	strb	r2, [r3, #9]
    pdev->host.port_cb->ConnHandled = 1;  
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002d92:	f04f 0201 	mov.w	r2, #1
 8002d96:	729a      	strb	r2, [r3, #10]

    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	f000 fd59 	bl	8003854 <USBH_Alloc_Channel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461a      	mov	r2, r3
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	715a      	strb	r2, [r3, #5]
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002db0:	f000 fd50 	bl	8003854 <USBH_Alloc_Channel>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	711a      	strb	r2, [r3, #4]
  
    /* Reset USB Device */
    if ( HCD_ResetPort(pdev) == 0)
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fe fc0d 	bl	80015dc <HCD_ResetPort>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 80a9 	bne.w	8002f1c <USBH_Process+0x230>
    {
      phost->usr_cb->ResetDevice();
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4798      	blx	r3
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe fbed 	bl	80015b4 <HCD_GetCurrentSpeed>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      phost->gState = HOST_ENUMERATION;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f04f 0206 	mov.w	r2, #6
 8002dea:	701a      	strb	r2, [r3, #0]
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4798      	blx	r3
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
                           phost->Control.hc_num_in,
 8002dfe:	683b      	ldr	r3, [r7, #0]
      
      phost->gState = HOST_ENUMERATION;
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8002e00:	7919      	ldrb	r1, [r3, #4]
                           phost->Control.hc_num_in,
                           phost->device_prop.address,
 8002e02:	683b      	ldr	r3, [r7, #0]
      
      phost->gState = HOST_ENUMERATION;
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8002e04:	f893 2020 	ldrb.w	r2, [r3, #32]
                           phost->Control.hc_num_in,
                           phost->device_prop.address,
                           phost->device_prop.speed,
 8002e08:	683b      	ldr	r3, [r7, #0]
      
      phost->gState = HOST_ENUMERATION;
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8002e0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
                           phost->Control.hc_num_in,
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	7980      	ldrb	r0, [r0, #6]
      
      phost->gState = HOST_ENUMERATION;
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8002e12:	f04f 0400 	mov.w	r4, #0
 8002e16:	9400      	str	r4, [sp, #0]
 8002e18:	9001      	str	r0, [sp, #4]
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fc48 	bl	80036b0 <USBH_Open_Channel>
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
                           phost->Control.hc_num_out,
 8002e20:	683b      	ldr	r3, [r7, #0]
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8002e22:	7959      	ldrb	r1, [r3, #5]
                           phost->Control.hc_num_out,
                           phost->device_prop.address,
 8002e24:	683b      	ldr	r3, [r7, #0]
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8002e26:	f893 2020 	ldrb.w	r2, [r3, #32]
                           phost->Control.hc_num_out,
                           phost->device_prop.address,
                           phost->device_prop.speed,
 8002e2a:	683b      	ldr	r3, [r7, #0]
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8002e2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
                           phost->Control.hc_num_out,
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size);          
 8002e30:	6838      	ldr	r0, [r7, #0]
 8002e32:	7980      	ldrb	r0, [r0, #6]
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8002e34:	f04f 0400 	mov.w	r4, #0
 8002e38:	9400      	str	r4, [sp, #0]
 8002e3a:	9001      	str	r0, [sp, #4]
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fc37 	bl	80036b0 <USBH_Open_Channel>
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size);          
   }
    break;
 8002e42:	e06b      	b.n	8002f1c <USBH_Process+0x230>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(pdev , phost) == USBH_OK)
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	6839      	ldr	r1, [r7, #0]
 8002e48:	f000 f8c0 	bl	8002fcc <USBH_HandleEnum>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d166      	bne.n	8002f20 <USBH_Process+0x234>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	4798      	blx	r3
      
      phost->gState  = HOST_USR_INPUT;    
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f04f 020a 	mov.w	r2, #10
 8002e62:	701a      	strb	r2, [r3, #0]
    }
    break;
 8002e64:	e05c      	b.n	8002f20 <USBH_Process+0x234>
    
  case HOST_USR_INPUT:    
    /*The function should return user response true to move to class state */
    if ( phost->usr_cb->UserInput() == USBH_USR_RESP_OK)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	4798      	blx	r3
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d156      	bne.n	8002f24 <USBH_Process+0x238>
    {
      if((phost->class_cb->Init(pdev, phost))\
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	4798      	blx	r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d14d      	bne.n	8002f24 <USBH_Process+0x238>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f04f 0207 	mov.w	r2, #7
 8002e8e:	701a      	strb	r2, [r3, #0]
      }     
    }   
    break;
 8002e90:	e048      	b.n	8002f24 <USBH_Process+0x238>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard contol requests state machine */ 
    status = phost->class_cb->Requests(pdev, phost);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	6839      	ldr	r1, [r7, #0]
 8002e9c:	4798      	blx	r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	73fb      	strb	r3, [r7, #15]
    
     if(status == USBH_OK)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <USBH_Process+0x1c8>
     {
       phost->gState  = HOST_CLASS;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f04f 0208 	mov.w	r2, #8
 8002eb0:	701a      	strb	r2, [r3, #0]
     {
       USBH_ErrorHandle(phost, status);
     }
 
    
    break;    
 8002eb2:	e038      	b.n	8002f26 <USBH_Process+0x23a>
       phost->gState  = HOST_CLASS;
     }  
     
     else
     {
       USBH_ErrorHandle(phost, status);
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	6838      	ldr	r0, [r7, #0]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f000 f860 	bl	8002f80 <USBH_ErrorHandle>
     }
 
    
    break;    
 8002ec0:	e031      	b.n	8002f26 <USBH_Process+0x23a>
  case HOST_CLASS:   
    /* process class state machine */
    status = phost->class_cb->Machine(pdev, phost);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	6839      	ldr	r1, [r7, #0]
 8002ecc:	4798      	blx	r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	73fb      	strb	r3, [r7, #15]
    USBH_ErrorHandle(phost, status);
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f000 f851 	bl	8002f80 <USBH_ErrorHandle>
    break;       
 8002ede:	e022      	b.n	8002f26 <USBH_Process+0x23a>
    
  case HOST_CTRL_XFER:
    /* process control transfer state machine */
    USBH_HandleControl(pdev, phost);    
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	f000 fa0e 	bl	8003304 <USBH_HandleControl>
    break;
 8002ee8:	e01d      	b.n	8002f26 <USBH_Process+0x23a>
  case HOST_SUSPENDED:
    break;
  
  case HOST_ERROR_STATE:
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	f7ff fec3 	bl	8002c78 <USBH_DeInit>
    phost->usr_cb->DeInit();
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	f102 0220 	add.w	r2, r2, #32
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4798      	blx	r3
    break;
 8002f0e:	e00a      	b.n	8002f26 <USBH_Process+0x23a>
    
  default :
    break;
 8002f10:	bf00      	nop
 8002f12:	e008      	b.n	8002f26 <USBH_Process+0x23a>
     
    if ( HCD_ResetPort(pdev) == 0)
    {
      phost->gState = HOST_IDLE;
    }
    break;
 8002f14:	bf00      	nop
 8002f16:	e006      	b.n	8002f26 <USBH_Process+0x23a>
    {
      /* Wait for USB Connect Interrupt void USBH_ISR_Connected(void) */     
      USBH_DeAllocate_AllChannel(pdev);
      phost->gState = HOST_DEV_ATTACHED;
    }
    break;
 8002f18:	bf00      	nop
 8002f1a:	e004      	b.n	8002f26 <USBH_Process+0x23a>
                           phost->device_prop.address,
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size);          
   }
    break;
 8002f1c:	bf00      	nop
 8002f1e:	e002      	b.n	8002f26 <USBH_Process+0x23a>
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
      
      phost->gState  = HOST_USR_INPUT;    
    }
    break;
 8002f20:	bf00      	nop
 8002f22:	e000      	b.n	8002f26 <USBH_Process+0x23a>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
      }     
    }   
    break;
 8002f24:	bf00      	nop
  default :
    break;
  }
  
  /* check device disconnection event */
   if (!(HCD_IsDeviceConnected(pdev)) && 
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fb66 	bl	80015f8 <HCD_IsDeviceConnected>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d122      	bne.n	8002f78 <USBH_Process+0x28c>
       (pdev->host.port_cb->DisconnHandled == 0))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002f38:	7adb      	ldrb	r3, [r3, #11]
  default :
    break;
  }
  
  /* check device disconnection event */
   if (!(HCD_IsDeviceConnected(pdev)) && 
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11c      	bne.n	8002f78 <USBH_Process+0x28c>
       (pdev->host.port_cb->DisconnHandled == 0))
  { 
    /* Manage User disconnect operations*/
    phost->usr_cb->DeviceDisconnected();
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	4798      	blx	r3
    
    pdev->host.port_cb->DisconnHandled = 1; /* Handle to avoid the Re-entry*/
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002f4e:	f04f 0201 	mov.w	r2, #1
 8002f52:	72da      	strb	r2, [r3, #11]
    
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	6839      	ldr	r1, [r7, #0]
 8002f58:	f7ff fe8e 	bl	8002c78 <USBH_DeInit>
    phost->usr_cb->DeInit();
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	f102 0220 	add.w	r2, r2, #32
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4798      	blx	r3
  }   
}
 8002f78:	f107 0714 	add.w	r7, r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd90      	pop	{r4, r7, pc}

08002f80 <USBH_ErrorHandle>:
  *         This function handles the Error on Host side.
  * @param  errType : Type of Error or Busy/OK state
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d002      	beq.n	8002f98 <USBH_ErrorHandle+0x18>
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d109      	bne.n	8002fac <USBH_ErrorHandle+0x2c>
       (errType == USBH_UNRECOVERED_ERROR) )
  {
    phost->usr_cb->UnrecoveredError(); 
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	4798      	blx	r3
    phost->gState = HOST_ERROR_STATE;   
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f04f 020c 	mov.w	r2, #12
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e00b      	b.n	8002fc4 <USBH_ErrorHandle+0x44>
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d108      	bne.n	8002fc4 <USBH_ErrorHandle+0x44>
  {
    phost->gState = HOST_ERROR_STATE;  
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f04f 020c 	mov.w	r2, #12
 8002fb8:	701a      	strb	r2, [r3, #0]
    /* user callback for initalization */
    phost->usr_cb->Init();
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4798      	blx	r3
  } 
}
 8002fc4:	f107 0708 	add.w	r7, r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  pdev: Selected device
  * @retval USBH_Status
  */
static USBH_Status USBH_HandleEnum(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b096      	sub	sp, #88	; 0x58
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  USBH_Status Status = USBH_BUSY;  
 8002fd6:	f04f 0301 	mov.w	r3, #1
 8002fda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t Local_Buffer[64];
  
  switch (phost->EnumState)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	789b      	ldrb	r3, [r3, #2]
 8002fe2:	2b09      	cmp	r3, #9
 8002fe4:	f200 8174 	bhi.w	80032d0 <USBH_HandleEnum+0x304>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <USBH_HandleEnum+0x24>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	08003087 	.word	0x08003087
 8002ff8:	080030b7 	.word	0x080030b7
 8002ffc:	08003131 	.word	0x08003131
 8003000:	0800314f 	.word	0x0800314f
 8003004:	0800318b 	.word	0x0800318b
 8003008:	080031eb 	.word	0x080031eb
 800300c:	08003249 	.word	0x08003249
 8003010:	080032a7 	.word	0x080032a7
 8003014:	080032c7 	.word	0x080032c7
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(pdev , phost, 8) == USBH_OK)
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	6839      	ldr	r1, [r7, #0]
 800301c:	f04f 0208 	mov.w	r2, #8
 8003020:	f000 ff7c 	bl	8003f1c <USBH_Get_DevDesc>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 8154 	bne.w	80032d4 <USBH_HandleEnum+0x308>
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	719a      	strb	r2, [r3, #6]
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fad0 	bl	80015dc <HCD_ResetPort>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f04f 0201 	mov.w	r2, #1
 8003042:	709a      	strb	r2, [r3, #2]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
                           phost->Control.hc_num_out,
 8003044:	683b      	ldr	r3, [r7, #0]
      /* Issue Reset  */
      HCD_ResetPort(pdev);
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8003046:	795b      	ldrb	r3, [r3, #5]
                           phost->Control.hc_num_out,
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	7992      	ldrb	r2, [r2, #6]
      /* Issue Reset  */
      HCD_ResetPort(pdev);
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 800304c:	f04f 0100 	mov.w	r1, #0
 8003050:	9100      	str	r1, [sp, #0]
 8003052:	9201      	str	r2, [sp, #4]
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4619      	mov	r1, r3
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	f000 fbaa 	bl	80037b8 <USBH_Modify_Channel>
                           0,
                           0,
                           phost->Control.ep0size);
      
      USBH_Modify_Channel (pdev,
                           phost->Control.hc_num_in,
 8003064:	683b      	ldr	r3, [r7, #0]
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
      
      USBH_Modify_Channel (pdev,
 8003066:	791b      	ldrb	r3, [r3, #4]
                           phost->Control.hc_num_in,
                           0,
                           0,
                           0,
                           phost->Control.ep0size);      
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	7992      	ldrb	r2, [r2, #6]
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
      
      USBH_Modify_Channel (pdev,
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	9100      	str	r1, [sp, #0]
 8003072:	9201      	str	r2, [sp, #4]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4619      	mov	r1, r3
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	f000 fb9a 	bl	80037b8 <USBH_Modify_Channel>
                           0,
                           0,
                           0,
                           phost->Control.ep0size);      
    }
    break;
 8003084:	e126      	b.n	80032d4 <USBH_HandleEnum+0x308>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(pdev, phost, USB_DEVICE_DESC_SIZE)\
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	f04f 0212 	mov.w	r2, #18
 800308e:	f000 ff45 	bl	8003f1c <USBH_Get_DevDesc>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	f040 811f 	bne.w	80032d8 <USBH_HandleEnum+0x30c>
      == USBH_OK)
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	f102 0222 	add.w	r2, r2, #34	; 0x22
 80030a8:	4610      	mov	r0, r2
 80030aa:	4798      	blx	r3
      phost->EnumState = ENUM_SET_ADDR;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f04f 0202 	mov.w	r2, #2
 80030b2:	709a      	strb	r2, [r3, #2]
    }
    break;
 80030b4:	e110      	b.n	80032d8 <USBH_HandleEnum+0x30c>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	6839      	ldr	r1, [r7, #0]
 80030ba:	f04f 0201 	mov.w	r2, #1
 80030be:	f000 ffeb 	bl	8004098 <USBH_SetAddress>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 8109 	bne.w	80032dc <USBH_HandleEnum+0x310>
    {
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f04f 0201 	mov.w	r2, #1
 80030d0:	f883 2020 	strb.w	r2, [r3, #32]
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4798      	blx	r3
      phost->EnumState = ENUM_GET_CFG_DESC;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f04f 0203 	mov.w	r2, #3
 80030e4:	709a      	strb	r2, [r3, #2]
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
                           phost->Control.hc_num_in,
 80030e6:	683b      	ldr	r3, [r7, #0]
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
      phost->EnumState = ENUM_GET_CFG_DESC;
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 80030e8:	791a      	ldrb	r2, [r3, #4]
                           phost->Control.hc_num_in,
                           phost->device_prop.address,
 80030ea:	683b      	ldr	r3, [r7, #0]
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
      phost->EnumState = ENUM_GET_CFG_DESC;
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 80030ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	9100      	str	r1, [sp, #0]
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	9101      	str	r1, [sp, #4]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	f000 fb57 	bl	80037b8 <USBH_Modify_Channel>
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
                           phost->Control.hc_num_out,
 800310a:	683b      	ldr	r3, [r7, #0]
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 800310c:	795a      	ldrb	r2, [r3, #5]
                           phost->Control.hc_num_out,
                           phost->device_prop.address,
 800310e:	683b      	ldr	r3, [r7, #0]
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 8003110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003114:	f04f 0100 	mov.w	r1, #0
 8003118:	9100      	str	r1, [sp, #0]
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	9101      	str	r1, [sp, #4]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4611      	mov	r1, r2
 8003124:	461a      	mov	r2, r3
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	f000 fb45 	bl	80037b8 <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);         
    }
    break;
 800312e:	e0d5      	b.n	80032dc <USBH_HandleEnum+0x310>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(pdev, 
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	6839      	ldr	r1, [r7, #0]
 8003134:	f04f 0209 	mov.w	r2, #9
 8003138:	f000 ff1e 	bl	8003f78 <USBH_Get_CfgDesc>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 80ce 	bne.w	80032e0 <USBH_HandleEnum+0x314>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f04f 0204 	mov.w	r2, #4
 800314a:	709a      	strb	r2, [r3, #2]
    }
    break;
 800314c:	e0c8      	b.n	80032e0 <USBH_HandleEnum+0x314>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
 800314e:	683b      	ldr	r3, [r7, #0]
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
 8003150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	f000 ff0e 	bl	8003f78 <USBH_Get_CfgDesc>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 80c0 	bne.w	80032e4 <USBH_HandleEnum+0x318>
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	f102 0034 	add.w	r0, r2, #52	; 0x34
                                                      phost->device_prop.Itf_Desc,
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	f102 013e 	add.w	r1, r2, #62	; 0x3e
                                                      phost->device_prop.Ep_Desc[0]);
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	f102 0250 	add.w	r2, r2, #80	; 0x50
    if (USBH_Get_CfgDesc(pdev, 
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 800317e:	4798      	blx	r3
                                                      phost->device_prop.Itf_Desc,
                                                      phost->device_prop.Ep_Desc[0]);
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f04f 0205 	mov.w	r2, #5
 8003186:	709a      	strb	r2, [r3, #2]
    }
    break;
 8003188:	e0ac      	b.n	80032e4 <USBH_HandleEnum+0x318>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01c      	beq.n	80031ce <USBH_HandleEnum+0x202>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
                               phost,
                               phost->device_prop.Dev_Desc.iManufacturer, 
 8003194:	683b      	ldr	r3, [r7, #0]
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
 8003196:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800319a:	f107 030c 	add.w	r3, r7, #12
 800319e:	f04f 01ff 	mov.w	r1, #255	; 0xff
 80031a2:	9100      	str	r1, [sp, #0]
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	f000 ff16 	bl	8003fd8 <USBH_Get_StringDesc>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 809a 	bne.w	80032e8 <USBH_HandleEnum+0x31c>
                               phost->device_prop.Dev_Desc.iManufacturer, 
                               Local_Buffer , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        phost->usr_cb->ManufacturerString(Local_Buffer);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	f107 020c 	add.w	r2, r7, #12
 80031c0:	4610      	mov	r0, r2
 80031c2:	4798      	blx	r3
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f04f 0206 	mov.w	r2, #6
 80031ca:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
    }
    break;
 80031cc:	e08c      	b.n	80032e8 <USBH_HandleEnum+0x31c>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f64d 00c8 	movw	r0, #55496	; 0xd8c8
 80031da:	f6c0 0002 	movt	r0, #2050	; 0x802
 80031de:	4798      	blx	r3
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f04f 0206 	mov.w	r2, #6
 80031e6:	709a      	strb	r2, [r3, #2]
    }
    break;
 80031e8:	e07e      	b.n	80032e8 <USBH_HandleEnum+0x31c>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01b      	beq.n	800322c <USBH_HandleEnum+0x260>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
                               phost,
                               phost->device_prop.Dev_Desc.iProduct, 
 80031f4:	683b      	ldr	r3, [r7, #0]
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
 80031f6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8003202:	9100      	str	r1, [sp, #0]
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	6839      	ldr	r1, [r7, #0]
 8003208:	f000 fee6 	bl	8003fd8 <USBH_Get_StringDesc>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d16c      	bne.n	80032ec <USBH_HandleEnum+0x320>
                               phost->device_prop.Dev_Desc.iProduct, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        phost->usr_cb->ProductString(Local_Buffer);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	f107 020c 	add.w	r2, r7, #12
 800321e:	4610      	mov	r0, r2
 8003220:	4798      	blx	r3
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f04f 0207 	mov.w	r2, #7
 8003228:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->ProductString("N/A");
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
    } 
    break;
 800322a:	e05f      	b.n	80032ec <USBH_HandleEnum+0x320>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ProductString("N/A");
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	f64d 00c8 	movw	r0, #55496	; 0xd8c8
 8003238:	f6c0 0002 	movt	r0, #2050	; 0x802
 800323c:	4798      	blx	r3
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f04f 0207 	mov.w	r2, #7
 8003244:	709a      	strb	r2, [r3, #2]
    } 
    break;
 8003246:	e051      	b.n	80032ec <USBH_HandleEnum+0x320>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01b      	beq.n	800328a <USBH_HandleEnum+0x2be>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
                               phost,
                               phost->device_prop.Dev_Desc.iSerialNumber, 
 8003252:	683b      	ldr	r3, [r7, #0]
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
 8003254:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8003260:	9100      	str	r1, [sp, #0]
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	6839      	ldr	r1, [r7, #0]
 8003266:	f000 feb7 	bl	8003fd8 <USBH_Get_StringDesc>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d13f      	bne.n	80032f0 <USBH_HandleEnum+0x324>
                               phost->device_prop.Dev_Desc.iSerialNumber, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
        phost->usr_cb->SerialNumString(Local_Buffer);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f107 020c 	add.w	r2, r7, #12
 800327c:	4610      	mov	r0, r2
 800327e:	4798      	blx	r3
        phost->EnumState = ENUM_SET_CONFIGURATION;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f04f 0208 	mov.w	r2, #8
 8003286:	709a      	strb	r2, [r3, #2]
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
      phost->EnumState = ENUM_SET_CONFIGURATION;
    }  
    break;
 8003288:	e032      	b.n	80032f0 <USBH_HandleEnum+0x324>
        phost->EnumState = ENUM_SET_CONFIGURATION;
      }
    }
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f64d 00c8 	movw	r0, #55496	; 0xd8c8
 8003296:	f6c0 0002 	movt	r0, #2050	; 0x802
 800329a:	4798      	blx	r3
      phost->EnumState = ENUM_SET_CONFIGURATION;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	f04f 0208 	mov.w	r2, #8
 80032a2:	709a      	strb	r2, [r3, #2]
    }  
    break;
 80032a4:	e024      	b.n	80032f0 <USBH_HandleEnum+0x324>
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    }  
    break;
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	6839      	ldr	r1, [r7, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	f000 ff1b 	bl	80040ec <USBH_SetCfg>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11b      	bne.n	80032f4 <USBH_HandleEnum+0x328>
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f04f 0209 	mov.w	r2, #9
 80032c2:	709a      	strb	r2, [r3, #2]
    }
    break;
 80032c4:	e016      	b.n	80032f4 <USBH_HandleEnum+0x328>

    
  case ENUM_DEV_CONFIGURED:
    /* user callback for enumeration done */
    Status = USBH_OK;
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 80032ce:	e012      	b.n	80032f6 <USBH_HandleEnum+0x32a>
    
  default:
    break;
 80032d0:	bf00      	nop
 80032d2:	e010      	b.n	80032f6 <USBH_HandleEnum+0x32a>
                           0,
                           0,
                           0,
                           phost->Control.ep0size);      
    }
    break;
 80032d4:	bf00      	nop
 80032d6:	e00e      	b.n	80032f6 <USBH_HandleEnum+0x32a>
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
      phost->EnumState = ENUM_SET_ADDR;
    }
    break;
 80032d8:	bf00      	nop
 80032da:	e00c      	b.n	80032f6 <USBH_HandleEnum+0x32a>
                           phost->device_prop.address,
                           0,
                           0,
                           0);         
    }
    break;
 80032dc:	bf00      	nop
 80032de:	e00a      	b.n	80032f6 <USBH_HandleEnum+0x32a>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
    }
    break;
 80032e0:	bf00      	nop
 80032e2:	e008      	b.n	80032f6 <USBH_HandleEnum+0x32a>
                                                      phost->device_prop.Itf_Desc,
                                                      phost->device_prop.Ep_Desc[0]);
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
    }
    break;
 80032e4:	bf00      	nop
 80032e6:	e006      	b.n	80032f6 <USBH_HandleEnum+0x32a>
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
    }
    break;
 80032e8:	bf00      	nop
 80032ea:	e004      	b.n	80032f6 <USBH_HandleEnum+0x32a>
    else
    {
      phost->usr_cb->ProductString("N/A");
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
    } 
    break;
 80032ec:	bf00      	nop
 80032ee:	e002      	b.n	80032f6 <USBH_HandleEnum+0x32a>
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
      phost->EnumState = ENUM_SET_CONFIGURATION;
    }  
    break;
 80032f0:	bf00      	nop
 80032f2:	e000      	b.n	80032f6 <USBH_HandleEnum+0x32a>
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
    }
    break;
 80032f4:	bf00      	nop
    break;
    
  default:
    break;
  }  
  return Status;
 80032f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	f107 0750 	add.w	r7, r7, #80	; 0x50
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
  URB_STATE URB_Status = URB_IDLE;
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	73bb      	strb	r3, [r7, #14]
  
  phost->Control.status = CTRL_START;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	749a      	strb	r2, [r3, #18]

  
  switch (phost->Control.state)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	7f1b      	ldrb	r3, [r3, #28]
 8003326:	f103 33ff 	add.w	r3, r3, #4294967295
 800332a:	2b0a      	cmp	r3, #10
 800332c:	f200 81af 	bhi.w	800368e <USBH_HandleControl+0x38a>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <USBH_HandleControl+0x34>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003365 	.word	0x08003365
 800333c:	08003383 	.word	0x08003383
 8003340:	08003423 	.word	0x08003423
 8003344:	08003441 	.word	0x08003441
 8003348:	080034a7 	.word	0x080034a7
 800334c:	080034ef 	.word	0x080034ef
 8003350:	08003541 	.word	0x08003541
 8003354:	0800355d 	.word	0x0800355d
 8003358:	080035d1 	.word	0x080035d1
 800335c:	08003617 	.word	0x08003617
 8003360:	08003657 	.word	0x08003657
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
	                   phost->Control.setup.d8 , 
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f103 0214 	add.w	r2, r3, #20
	                   phost->Control.hc_num_out);  
 800336a:	683b      	ldr	r3, [r7, #0]
  
  switch (phost->Control.state)
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
 800336c:	795b      	ldrb	r3, [r3, #5]
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4611      	mov	r1, r2
 8003372:	461a      	mov	r2, r3
 8003374:	f000 fb5a 	bl	8003a2c <USBH_CtlSendSetup>
	                   phost->Control.setup.d8 , 
	                   phost->Control.hc_num_out);  
    phost->Control.state = CTRL_SETUP_WAIT;  
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f04f 0202 	mov.w	r2, #2
 800337e:	771a      	strb	r2, [r3, #28]
    break; 
 8003380:	e190      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	795b      	ldrb	r3, [r3, #5]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4619      	mov	r1, r3
 800338a:	f7fe f955 	bl	8001638 <HCD_GetURB_State>
 800338e:	4603      	mov	r3, r0
 8003390:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
 8003392:	7bbb      	ldrb	r3, [r7, #14]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d137      	bne.n	8003408 <USBH_HandleControl+0x104>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	7d1b      	ldrb	r3, [r3, #20]
 800339c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80033a0:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	8b5b      	ldrh	r3, [r3, #26]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d013      	beq.n	80033d2 <USBH_HandleControl+0xce>
      {        
        timeout = DATA_STAGE_TIMEOUT;
 80033aa:	f640 2308 	movw	r3, #2568	; 0xa08
 80033ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	801a      	strh	r2, [r3, #0]
        if (direction == USB_D2H)
 80033b8:	7b7b      	ldrb	r3, [r7, #13]
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d104      	bne.n	80033c8 <USBH_HandleControl+0xc4>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f04f 0203 	mov.w	r2, #3
 80033c4:	771a      	strb	r2, [r3, #28]
 80033c6:	e017      	b.n	80033f8 <USBH_HandleControl+0xf4>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f04f 0205 	mov.w	r2, #5
 80033ce:	771a      	strb	r2, [r3, #28]
 80033d0:	e012      	b.n	80033f8 <USBH_HandleControl+0xf4>
        } 
      }
      /* No DATA stage */
      else
      {
        timeout = NODATA_STAGE_TIMEOUT;
 80033d2:	f640 2308 	movw	r3, #2568	; 0xa08
 80033d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033da:	f04f 0232 	mov.w	r2, #50	; 0x32
 80033de:	801a      	strh	r2, [r3, #0]
        
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80033e0:	7b7b      	ldrb	r3, [r7, #13]
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d104      	bne.n	80033f0 <USBH_HandleControl+0xec>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f04f 0209 	mov.w	r2, #9
 80033ec:	771a      	strb	r2, [r3, #28]
 80033ee:	e003      	b.n	80033f8 <USBH_HandleControl+0xf4>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f04f 0207 	mov.w	r2, #7
 80033f6:	771a      	strb	r2, [r3, #28]
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7fe f90b 	bl	8001614 <HCD_GetCurrentFrame>
 80033fe:	4603      	mov	r3, r0
 8003400:	b29a      	uxth	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	821a      	strh	r2, [r3, #16]
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
      phost->Control.status = CTRL_XACTERR;
    }    
    break;
 8003406:	e144      	b.n	8003692 <USBH_HandleControl+0x38e>
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
    }
    else if(URB_Status == URB_ERROR)
 8003408:	7bbb      	ldrb	r3, [r7, #14]
 800340a:	2b03      	cmp	r3, #3
 800340c:	f040 8141 	bne.w	8003692 <USBH_HandleControl+0x38e>
    {
      phost->Control.state = CTRL_ERROR;     
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	f04f 020b 	mov.w	r2, #11
 8003416:	771a      	strb	r2, [r3, #28]
      phost->Control.status = CTRL_XACTERR;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f04f 0205 	mov.w	r2, #5
 800341e:	749a      	strb	r2, [r3, #18]
    }    
    break;
 8003420:	e137      	b.n	8003692 <USBH_HandleControl+0x38e>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
                        phost->Control.buff, 
 8003422:	683b      	ldr	r3, [r7, #0]
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 8003424:	6899      	ldr	r1, [r3, #8]
                        phost->Control.buff, 
                        phost->Control.length,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	899b      	ldrh	r3, [r3, #12]
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 800342a:	b2da      	uxtb	r2, r3
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 800342c:	683b      	ldr	r3, [r7, #0]
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 800342e:	791b      	ldrb	r3, [r3, #4]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fb9b 	bl	8003b6c <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f04f 0204 	mov.w	r2, #4
 800343c:	771a      	strb	r2, [r3, #28]
    break;    
 800343e:	e131      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	791b      	ldrb	r3, [r3, #4]
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4619      	mov	r1, r3
 8003448:	f7fe f8f6 	bl	8001638 <HCD_GetURB_State>
 800344c:	4603      	mov	r3, r0
 800344e:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transfered successfully */
    if  (URB_Status == URB_DONE)
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d103      	bne.n	800345e <USBH_HandleControl+0x15a>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f04f 0209 	mov.w	r2, #9
 800345c:	771a      	strb	r2, [r3, #28]
    }
   
    /* manage error cases*/
    if  (URB_Status == URB_STALL) 
 800345e:	7bbb      	ldrb	r3, [r7, #14]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d104      	bne.n	800346e <USBH_HandleControl+0x16a>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	785a      	ldrb	r2, [r3, #1]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	701a      	strb	r2, [r3, #0]
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
    {
      /* timeout for IN transfer */
      phost->Control.state = CTRL_ERROR; 
    }   
    break;
 800346c:	e113      	b.n	8003696 <USBH_HandleControl+0x392>
    if  (URB_Status == URB_STALL) 
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
    }   
    else if (URB_Status == URB_ERROR)
 800346e:	7bbb      	ldrb	r3, [r7, #14]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d104      	bne.n	800347e <USBH_HandleControl+0x17a>
    {
      /* Device error */
      phost->Control.state = CTRL_ERROR;    
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f04f 020b 	mov.w	r2, #11
 800347a:	771a      	strb	r2, [r3, #28]
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
    {
      /* timeout for IN transfer */
      phost->Control.state = CTRL_ERROR; 
    }   
    break;
 800347c:	e10b      	b.n	8003696 <USBH_HandleControl+0x392>
    else if (URB_Status == URB_ERROR)
    {
      /* Device error */
      phost->Control.state = CTRL_ERROR;    
    }
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe f8c8 	bl	8001614 <HCD_GetCurrentFrame>
 8003484:	4602      	mov	r2, r0
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	8a1b      	ldrh	r3, [r3, #16]
 800348a:	1ad2      	subs	r2, r2, r3
 800348c:	f640 2308 	movw	r3, #2568	; 0xa08
 8003490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	f240 80fd 	bls.w	8003696 <USBH_HandleControl+0x392>
    {
      /* timeout for IN transfer */
      phost->Control.state = CTRL_ERROR; 
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	f04f 020b 	mov.w	r2, #11
 80034a2:	771a      	strb	r2, [r3, #28]
    }   
    break;
 80034a4:	e0f7      	b.n	8003696 <USBH_HandleControl+0x392>
    
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	795b      	ldrb	r3, [r3, #5]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	7952      	ldrb	r2, [r2, #5]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	f102 0216 	add.w	r2, r2, #22
 80034b4:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80034b8:	188a      	adds	r2, r1, r2
 80034ba:	7952      	ldrb	r2, [r2, #5]
 80034bc:	f082 0201 	eor.w	r2, r2, #1
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	f103 0316 	add.w	r3, r3, #22
 80034c8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80034cc:	18cb      	adds	r3, r1, r3
 80034ce:	715a      	strb	r2, [r3, #5]
    
    USBH_CtlSendData (pdev,
                      phost->Control.buff, 
 80034d0:	683b      	ldr	r3, [r7, #0]
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
    
    USBH_CtlSendData (pdev,
 80034d2:	6899      	ldr	r1, [r3, #8]
                      phost->Control.buff, 
                      phost->Control.length , 
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	899b      	ldrh	r3, [r3, #12]
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
    
    USBH_CtlSendData (pdev,
 80034d8:	b2da      	uxtb	r2, r3
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.hc_num_out);
 80034da:	683b      	ldr	r3, [r7, #0]
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
    
    USBH_CtlSendData (pdev,
 80034dc:	795b      	ldrb	r3, [r3, #5]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fae2 	bl	8003aa8 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	f04f 0206 	mov.w	r2, #6
 80034ea:	771a      	strb	r2, [r3, #28]
    break;
 80034ec:	e0da      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);     
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	795b      	ldrb	r3, [r3, #5]
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f7fe f89f 	bl	8001638 <HCD_GetURB_State>
 80034fa:	4603      	mov	r3, r0
 80034fc:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == URB_DONE)
 80034fe:	7bbb      	ldrb	r3, [r7, #14]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d104      	bne.n	800350e <USBH_HandleControl+0x20a>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f04f 0207 	mov.w	r2, #7
 800350a:	771a      	strb	r2, [r3, #28]
    else if (URB_Status == URB_ERROR)
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;      
    } 
    break;
 800350c:	e0c5      	b.n	800369a <USBH_HandleControl+0x396>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
    }
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
 800350e:	7bbb      	ldrb	r3, [r7, #14]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d104      	bne.n	800351e <USBH_HandleControl+0x21a>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	785a      	ldrb	r2, [r3, #1]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	701a      	strb	r2, [r3, #0]
    else if (URB_Status == URB_ERROR)
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;      
    } 
    break;
 800351c:	e0bd      	b.n	800369a <USBH_HandleControl+0x396>
    else if  (URB_Status == URB_STALL) 
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
    } 
    else if  (URB_Status == URB_NOTREADY)
 800351e:	7bbb      	ldrb	r3, [r7, #14]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d104      	bne.n	800352e <USBH_HandleControl+0x22a>
    { 
      /* Nack received from device */
      phost->Control.state = CTRL_DATA_OUT;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f04f 0205 	mov.w	r2, #5
 800352a:	771a      	strb	r2, [r3, #28]
    else if (URB_Status == URB_ERROR)
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;      
    } 
    break;
 800352c:	e0b5      	b.n	800369a <USBH_HandleControl+0x396>
    else if  (URB_Status == URB_NOTREADY)
    { 
      /* Nack received from device */
      phost->Control.state = CTRL_DATA_OUT;
    }    
    else if (URB_Status == URB_ERROR)
 800352e:	7bbb      	ldrb	r3, [r7, #14]
 8003530:	2b03      	cmp	r3, #3
 8003532:	f040 80b2 	bne.w	800369a <USBH_HandleControl+0x396>
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;      
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f04f 020b 	mov.w	r2, #11
 800353c:	771a      	strb	r2, [r3, #28]
    } 
    break;
 800353e:	e0ac      	b.n	800369a <USBH_HandleControl+0x396>
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
                         0,
                         0,
                         phost->Control.hc_num_in);
 8003540:	683b      	ldr	r3, [r7, #0]
    break;
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f000 fb0d 	bl	8003b6c <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.hc_num_in);
    
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f04f 0208 	mov.w	r2, #8
 8003558:	771a      	strb	r2, [r3, #28]
    
    break;
 800355a:	e0a3      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	791b      	ldrb	r3, [r3, #4]
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4619      	mov	r1, r3
 8003564:	f7fe f868 	bl	8001638 <HCD_GetURB_State>
 8003568:	4603      	mov	r3, r0
 800356a:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == URB_DONE)
 800356c:	7bbb      	ldrb	r3, [r7, #14]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d104      	bne.n	800357c <USBH_HandleControl+0x278>
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	785a      	ldrb	r2, [r3, #1]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	701a      	strb	r2, [r3, #0]
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 800357a:	e090      	b.n	800369e <USBH_HandleControl+0x39a>
    if  ( URB_Status == URB_DONE)
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
    }
    
    else if (URB_Status == URB_ERROR)
 800357c:	7bbb      	ldrb	r3, [r7, #14]
 800357e:	2b03      	cmp	r3, #3
 8003580:	d104      	bne.n	800358c <USBH_HandleControl+0x288>
    {
      phost->Control.state = CTRL_ERROR;  
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f04f 020b 	mov.w	r2, #11
 8003588:	771a      	strb	r2, [r3, #28]
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 800358a:	e088      	b.n	800369e <USBH_HandleControl+0x39a>
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fe f841 	bl	8001614 <HCD_GetCurrentFrame>
 8003592:	4602      	mov	r2, r0
      - phost->Control.timer) > timeout)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	8a1b      	ldrh	r3, [r3, #16]
 8003598:	1ad2      	subs	r2, r2, r3
 800359a:	f640 2308 	movw	r3, #2568	; 0xa08
 800359e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035a2:	881b      	ldrh	r3, [r3, #0]
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d904      	bls.n	80035b2 <USBH_HandleControl+0x2ae>
      - phost->Control.timer) > timeout)
    {
      phost->Control.state = CTRL_ERROR; 
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	f04f 020b 	mov.w	r2, #11
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 80035b0:	e075      	b.n	800369e <USBH_HandleControl+0x39a>
    else if((HCD_GetCurrentFrame(pdev)\
      - phost->Control.timer) > timeout)
    {
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
 80035b2:	7bbb      	ldrb	r3, [r7, #14]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d172      	bne.n	800369e <USBH_HandleControl+0x39a>
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	785a      	ldrb	r2, [r3, #1]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	701a      	strb	r2, [r3, #0]
      phost->Control.status = CTRL_STALL;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	f04f 0204 	mov.w	r2, #4
 80035c6:	749a      	strb	r2, [r3, #18]
      status = USBH_NOT_SUPPORTED;
 80035c8:	f04f 0303 	mov.w	r3, #3
 80035cc:	73fb      	strb	r3, [r7, #15]
    }
    break;
 80035ce:	e066      	b.n	800369e <USBH_HandleControl+0x39a>
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	795b      	ldrb	r3, [r3, #5]
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	7952      	ldrb	r2, [r2, #5]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	f102 0216 	add.w	r2, r2, #22
 80035de:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80035e2:	188a      	adds	r2, r1, r2
 80035e4:	7952      	ldrb	r2, [r2, #5]
 80035e6:	f082 0201 	eor.w	r2, r2, #1
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	f103 0316 	add.w	r3, r3, #22
 80035f2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80035f6:	18cb      	adds	r3, r1, r3
 80035f8:	715a      	strb	r2, [r3, #5]
    USBH_CtlSendData (pdev,
                      0,
                      0,
                      phost->Control.hc_num_out);
 80035fa:	683b      	ldr	r3, [r7, #0]
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
    USBH_CtlSendData (pdev,
 80035fc:	795b      	ldrb	r3, [r3, #5]
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f000 fa4e 	bl	8003aa8 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f04f 020a 	mov.w	r2, #10
 8003612:	771a      	strb	r2, [r3, #28]
    break;
 8003614:	e046      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	795b      	ldrb	r3, [r3, #5]
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4619      	mov	r1, r3
 800361e:	f7fe f80b 	bl	8001638 <HCD_GetURB_State>
 8003622:	4603      	mov	r3, r0
 8003624:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == URB_DONE)
 8003626:	7bbb      	ldrb	r3, [r7, #14]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d104      	bne.n	8003636 <USBH_HandleControl+0x332>
    { 
      phost->gState =   phost->gStateBkp;    
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	785a      	ldrb	r2, [r3, #1]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	701a      	strb	r2, [r3, #0]
    }      
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;      
    }
    break;
 8003634:	e035      	b.n	80036a2 <USBH_HandleControl+0x39e>
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
    if  (URB_Status == URB_DONE)
    { 
      phost->gState =   phost->gStateBkp;    
    }
    else if  (URB_Status == URB_NOTREADY)
 8003636:	7bbb      	ldrb	r3, [r7, #14]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d104      	bne.n	8003646 <USBH_HandleControl+0x342>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f04f 0209 	mov.w	r2, #9
 8003642:	771a      	strb	r2, [r3, #28]
    }      
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;      
    }
    break;
 8003644:	e02d      	b.n	80036a2 <USBH_HandleControl+0x39e>
    }
    else if  (URB_Status == URB_NOTREADY)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
    }      
    else if (URB_Status == URB_ERROR)
 8003646:	7bbb      	ldrb	r3, [r7, #14]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d12a      	bne.n	80036a2 <USBH_HandleControl+0x39e>
    {
      phost->Control.state = CTRL_ERROR;      
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f04f 020b 	mov.w	r2, #11
 8003652:	771a      	strb	r2, [r3, #28]
    }
    break;
 8003654:	e025      	b.n	80036a2 <USBH_HandleControl+0x39e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	7b9b      	ldrb	r3, [r3, #14]
 800365a:	f103 0301 	add.w	r3, r3, #1
 800365e:	b2da      	uxtb	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	739a      	strb	r2, [r3, #14]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	7b9b      	ldrb	r3, [r3, #14]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d804      	bhi.n	8003676 <USBH_HandleControl+0x372>
    {
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f04f 0201 	mov.w	r2, #1
 8003672:	771a      	strb	r2, [r3, #28]
      phost->Control.status = CTRL_FAIL;
      phost->gState =   phost->gStateBkp;
      
      status = USBH_FAIL;
    }
    break;
 8003674:	e016      	b.n	80036a4 <USBH_HandleControl+0x3a0>
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f04f 0208 	mov.w	r2, #8
 800367c:	749a      	strb	r2, [r3, #18]
      phost->gState =   phost->gStateBkp;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	785a      	ldrb	r2, [r3, #1]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	701a      	strb	r2, [r3, #0]
      
      status = USBH_FAIL;
 8003686:	f04f 0302 	mov.w	r3, #2
 800368a:	73fb      	strb	r3, [r7, #15]
    }
    break;
 800368c:	e00a      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    
  default:
    break;
 800368e:	bf00      	nop
 8003690:	e008      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
      phost->Control.status = CTRL_XACTERR;
    }    
    break;
 8003692:	bf00      	nop
 8003694:	e006      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
    {
      /* timeout for IN transfer */
      phost->Control.state = CTRL_ERROR; 
    }   
    break;
 8003696:	bf00      	nop
 8003698:	e004      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    else if (URB_Status == URB_ERROR)
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;      
    } 
    break;
 800369a:	bf00      	nop
 800369c:	e002      	b.n	80036a4 <USBH_HandleControl+0x3a0>
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <USBH_HandleControl+0x3a0>
    }      
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;      
    }
    break;
 80036a2:	bf00      	nop
    break;
    
  default:
    break;
  }
  return status;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	f107 0710 	add.w	r7, r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <USBH_Open_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	70f9      	strb	r1, [r7, #3]
 80036ba:	70ba      	strb	r2, [r7, #2]
 80036bc:	707b      	strb	r3, [r7, #1]

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 80036be:	78f8      	ldrb	r0, [r7, #3]
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80036c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80036cc:	18d3      	adds	r3, r2, r3
 80036ce:	889b      	ldrh	r3, [r3, #4]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	ea4f 1340 	mov.w	r3, r0, lsl #5
 80036de:	18cb      	adds	r3, r1, r3
 80036e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80036e4:	715a      	strb	r2, [r3, #5]
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
 80036e6:	78f8      	ldrb	r0, [r7, #3]
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80036f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	889b      	ldrh	r3, [r3, #4]
 80036f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2300      	moveq	r3, #0
 8003702:	2301      	movne	r3, #1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	ea4f 1340 	mov.w	r3, r0, lsl #5
 800370c:	18cb      	adds	r3, r1, r3
 800370e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003712:	719a      	strb	r2, [r3, #6]
  pdev->host.hc[hc_num].dev_addr = dev_address;  
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800371c:	18d3      	adds	r3, r2, r3
 800371e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003722:	78ba      	ldrb	r2, [r7, #2]
 8003724:	711a      	strb	r2, [r3, #4]
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003734:	7c3a      	ldrb	r2, [r7, #16]
 8003736:	725a      	strb	r2, [r3, #9]
  pdev->host.hc[hc_num].max_packet = mps; 
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003740:	18d3      	adds	r3, r2, r3
 8003742:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003746:	8aba      	ldrh	r2, [r7, #20]
 8003748:	815a      	strh	r2, [r3, #10]
  pdev->host.hc[hc_num].speed = speed; 
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003752:	18d3      	adds	r3, r2, r3
 8003754:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003758:	787a      	ldrb	r2, [r7, #1]
 800375a:	71da      	strb	r2, [r3, #7]
  pdev->host.hc[hc_num].toggle_in = 0; 
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	f103 0316 	add.w	r3, r3, #22
 8003764:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003768:	18d3      	adds	r3, r2, r3
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	711a      	strb	r2, [r3, #4]
  pdev->host.hc[hc_num].toggle_out = 0;   
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	f103 0316 	add.w	r3, r3, #22
 8003778:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800377c:	18d3      	adds	r3, r2, r3
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	715a      	strb	r2, [r3, #5]
  if(speed == HPRT0_PRTSPD_HIGH_SPEED)
 8003784:	787b      	ldrb	r3, [r7, #1]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <USBH_Open_Channel+0xee>
  {
    pdev->host.hc[hc_num].do_ping = 1;
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003798:	f04f 0201 	mov.w	r2, #1
 800379c:	721a      	strb	r2, [r3, #8]
  }
  
  USB_OTG_HC_Init(pdev, hc_num) ;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4619      	mov	r1, r3
 80037a4:	f7fd fadc 	bl	8000d60 <USB_OTG_HC_Init>
  
  return HC_OK; 
 80037a8:	f04f 0300 	mov.w	r3, #0

}
 80037ac:	4618      	mov	r0, r3
 80037ae:	f107 0708 	add.w	r7, r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop

080037b8 <USBH_Modify_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	70f9      	strb	r1, [r7, #3]
 80037c2:	70ba      	strb	r2, [r7, #2]
 80037c4:	707b      	strb	r3, [r7, #1]
  
  if(dev_address != 0)
 80037c6:	78bb      	ldrb	r3, [r7, #2]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <USBH_Modify_Channel+0x26>
  {
    pdev->host.hc[hc_num].dev_addr = dev_address;  
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80037d4:	18d3      	adds	r3, r2, r3
 80037d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80037da:	78ba      	ldrb	r2, [r7, #2]
 80037dc:	711a      	strb	r2, [r3, #4]
  }
  
  if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80037e6:	18d3      	adds	r3, r2, r3
 80037e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80037ec:	895b      	ldrh	r3, [r3, #10]
 80037ee:	8aba      	ldrh	r2, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d00b      	beq.n	800380c <USBH_Modify_Channel+0x54>
 80037f4:	8abb      	ldrh	r3, [r7, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <USBH_Modify_Channel+0x54>
  {
    pdev->host.hc[hc_num].max_packet = mps; 
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003802:	18d3      	adds	r3, r2, r3
 8003804:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003808:	8aba      	ldrh	r2, [r7, #20]
 800380a:	815a      	strh	r2, [r3, #10]
  }
  
  if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003814:	18d3      	adds	r3, r2, r3
 8003816:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800381a:	79db      	ldrb	r3, [r3, #7]
 800381c:	787a      	ldrb	r2, [r7, #1]
 800381e:	429a      	cmp	r2, r3
 8003820:	d00b      	beq.n	800383a <USBH_Modify_Channel+0x82>
 8003822:	787b      	ldrb	r3, [r7, #1]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <USBH_Modify_Channel+0x82>
  {
    pdev->host.hc[hc_num].speed = speed; 
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003830:	18d3      	adds	r3, r2, r3
 8003832:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003836:	787a      	ldrb	r2, [r7, #1]
 8003838:	71da      	strb	r2, [r3, #7]
  }
  
  USB_OTG_HC_Init(pdev, hc_num);
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4619      	mov	r1, r3
 8003840:	f7fd fa8e 	bl	8000d60 <USB_OTG_HC_Init>
  return HC_OK; 
 8003844:	f04f 0300 	mov.w	r3, #0

}
 8003848:	4618      	mov	r0, r3
 800384a:	f107 0708 	add.w	r7, r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop

08003854 <USBH_Alloc_Channel>:
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	70fb      	strb	r3, [r7, #3]
  uint16_t hc_num;
  
  hc_num =  USBH_GetFreeChannel(pdev);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f865 	bl	8003930 <USBH_GetFreeChannel>
 8003866:	4603      	mov	r3, r0
 8003868:	81fb      	strh	r3, [r7, #14]

  if (hc_num != HC_ERROR)
 800386a:	89fa      	ldrh	r2, [r7, #14]
 800386c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003870:	429a      	cmp	r2, r3
 8003872:	d00e      	beq.n	8003892 <USBH_Alloc_Channel+0x3e>
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
 8003874:	89f8      	ldrh	r0, [r7, #14]
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	b29b      	uxth	r3, r3
 800387a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003882:	b29a      	uxth	r2, r3
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	f500 7311 	add.w	r3, r0, #580	; 0x244
 800388a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800388e:	18cb      	adds	r3, r1, r3
 8003890:	809a      	strh	r2, [r3, #4]
  }
  return hc_num;
 8003892:	89fb      	ldrh	r3, [r7, #14]
 8003894:	b2db      	uxtb	r3, r3
}
 8003896:	4618      	mov	r0, r3
 8003898:	f107 0710 	add.w	r7, r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <USBH_Free_Channel>:
  *         Free the USB host channel
  * @param  idx: Channel number to be freed 
  * @retval Status
  */
uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
   if(idx < HC_MAX)
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	2b07      	cmp	r3, #7
 80038b0:	d814      	bhi.n	80038dc <USBH_Free_Channel+0x3c>
   {
	 pdev->host.channel[idx] &= HC_USED_MASK;
 80038b2:	78f8      	ldrb	r0, [r7, #3]
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80038bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80038c0:	18d3      	adds	r3, r2, r3
 80038c2:	889b      	ldrh	r3, [r3, #4]
 80038c4:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80038c8:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	f500 7311 	add.w	r3, r0, #580	; 0x244
 80038d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80038d8:	18cb      	adds	r3, r1, r3
 80038da:	809a      	strh	r2, [r3, #4]
   }
   return USBH_OK;
 80038dc:	f04f 0300 	mov.w	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	f107 070c 	add.w	r7, r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <USBH_DeAllocate_AllChannel>:
  *         Free all USB host channel
* @param  pdev : core instance
  * @retval Status
  */
uint8_t USBH_DeAllocate_AllChannel  (USB_OTG_CORE_HANDLE *pdev)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
 80038f4:	f04f 0302 	mov.w	r3, #2
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e00d      	b.n	8003918 <USBH_DeAllocate_AllChannel+0x2c>
   {
	 pdev->host.channel[idx] = 0;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8003904:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003908:	18d3      	adds	r3, r2, r3
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	809a      	strh	r2, [r3, #4]
  */
uint8_t USBH_DeAllocate_AllChannel  (USB_OTG_CORE_HANDLE *pdev)
{
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	f103 0301 	add.w	r3, r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b07      	cmp	r3, #7
 800391c:	d9ee      	bls.n	80038fc <USBH_DeAllocate_AllChannel+0x10>
   {
	 pdev->host.channel[idx] = 0;
   }
   return USBH_OK;
 800391e:	f04f 0300 	mov.w	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	f107 0714 	add.w	r7, r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop

08003930 <USBH_GetFreeChannel>:
  *         Get a free channel number for allocation to a device endpoint
  * @param  None
  * @retval idx: Free Channel number
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e012      	b.n	800396c <USBH_GetFreeChannel+0x3c>
  {
	if ((pdev->host.channel[idx] & HC_USED) == 0)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800394e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003952:	18d3      	adds	r3, r2, r3
 8003954:	889b      	ldrh	r3, [r3, #4]
 8003956:	b29b      	uxth	r3, r3
 8003958:	b21b      	sxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	db02      	blt.n	8003964 <USBH_GetFreeChannel+0x34>
	{
	   return idx;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	b29b      	uxth	r3, r3
 8003962:	e008      	b.n	8003976 <USBH_GetFreeChannel+0x46>
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	f103 0301 	add.w	r3, r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b07      	cmp	r3, #7
 8003970:	d9e9      	bls.n	8003946 <USBH_GetFreeChannel+0x16>
	if ((pdev->host.channel[idx] & HC_USED) == 0)
	{
	   return idx;
	} 
  }
  return HC_ERROR;
 8003972:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8003976:	4618      	mov	r0, r3
 8003978:	f107 0714 	add.w	r7, r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop

08003984 <USBH_CtlReq>:
  */
USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	807b      	strh	r3, [r7, #2]
  USBH_Status status;
  URB_STATE URB_Status = URB_IDLE;
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	75bb      	strb	r3, [r7, #22]
  
  URB_Status = HCD_GetURB_State(pdev, phost->Control.hc_num_out); 
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	795b      	ldrb	r3, [r3, #5]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	4619      	mov	r1, r3
 80039a0:	f7fd fe4a 	bl	8001638 <HCD_GetURB_State>
 80039a4:	4603      	mov	r3, r0
 80039a6:	75bb      	strb	r3, [r7, #22]
  
  status = USBH_BUSY;
 80039a8:	f04f 0301 	mov.w	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	78db      	ldrb	r3, [r3, #3]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d002      	beq.n	80039bc <USBH_CtlReq+0x38>
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d00e      	beq.n	80039d8 <USBH_CtlReq+0x54>
 80039ba:	e02e      	b.n	8003a1a <USBH_CtlReq+0x96>
  {
  case CMD_SEND:
    /* Start a SETUP transfer */
    USBH_SubmitSetupRequest(phost, buff, length);
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	68b8      	ldr	r0, [r7, #8]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f000 fa88 	bl	8003ed8 <USBH_SubmitSetupRequest>
    phost->RequestState = CMD_WAIT;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f04f 0202 	mov.w	r2, #2
 80039ce:	70da      	strb	r2, [r3, #3]
    status = USBH_BUSY;
 80039d0:	f04f 0301 	mov.w	r3, #1
 80039d4:	75fb      	strb	r3, [r7, #23]
    break;
 80039d6:	e022      	b.n	8003a1e <USBH_CtlReq+0x9a>
    
  case CMD_WAIT:
    if  (URB_Status == URB_DONE)
 80039d8:	7dbb      	ldrb	r3, [r7, #22]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d107      	bne.n	80039ee <USBH_CtlReq+0x6a>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f04f 0201 	mov.w	r2, #1
 80039e4:	70da      	strb	r2, [r3, #3]
      status = USBH_OK;
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 80039ec:	e016      	b.n	8003a1c <USBH_CtlReq+0x98>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
      status = USBH_OK;
    }
    else if  (URB_Status == URB_ERROR)
 80039ee:	7dbb      	ldrb	r3, [r7, #22]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d107      	bne.n	8003a04 <USBH_CtlReq+0x80>
    {
      /* Failure Mode */
      phost->RequestState = CMD_SEND;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f04f 0201 	mov.w	r2, #1
 80039fa:	70da      	strb	r2, [r3, #3]
      status = USBH_FAIL;
 80039fc:	f04f 0302 	mov.w	r3, #2
 8003a00:	75fb      	strb	r3, [r7, #23]
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 8003a02:	e00b      	b.n	8003a1c <USBH_CtlReq+0x98>
    {
      /* Failure Mode */
      phost->RequestState = CMD_SEND;
      status = USBH_FAIL;
    }   
     else if  (URB_Status == URB_STALL)
 8003a04:	7dbb      	ldrb	r3, [r7, #22]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d108      	bne.n	8003a1c <USBH_CtlReq+0x98>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f04f 0201 	mov.w	r2, #1
 8003a10:	70da      	strb	r2, [r3, #3]
      status = USBH_NOT_SUPPORTED;
 8003a12:	f04f 0303 	mov.w	r3, #3
 8003a16:	75fb      	strb	r3, [r7, #23]
    }
    break;
 8003a18:	e000      	b.n	8003a1c <USBH_CtlReq+0x98>
    
  default:
    break; 
 8003a1a:	e000      	b.n	8003a1e <USBH_CtlReq+0x9a>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
      status = USBH_NOT_SUPPORTED;
    }
    break;
 8003a1c:	bf00      	nop
    
  default:
    break; 
  }
  return status;
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	f107 0718 	add.w	r7, r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop

08003a2c <USBH_CtlSendSetup>:
  * @param  hc_num: Host channel Number
  * @retval Status
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	71fb      	strb	r3, [r7, #7]
  pdev->host.hc[hc_num].ep_is_in = 0;
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003a42:	18d3      	adds	r3, r2, r3
 8003a44:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	719a      	strb	r2, [r3, #6]
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	f103 030d 	add.w	r3, r3, #13
 8003a56:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003a5a:	18d3      	adds	r3, r2, r3
 8003a5c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003a60:	f04f 0203 	mov.w	r2, #3
 8003a64:	711a      	strb	r2, [r3, #4]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	f103 030d 	add.w	r3, r3, #13
 8003a6e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003a72:	18d3      	adds	r3, r2, r3
 8003a74:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003a84:	18d3      	adds	r3, r2, r3
 8003a86:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8003a8a:	f04f 0208 	mov.w	r2, #8
 8003a8e:	601a      	str	r2, [r3, #0]

  return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	4619      	mov	r1, r3
 8003a96:	f7fd fe17 	bl	80016c8 <HCD_SubmitRequest>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	b2db      	uxtb	r3, r3
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f107 0710 	add.w	r7, r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <USBH_CtlSendData>:
  */
USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	71fa      	strb	r2, [r7, #7]
 8003ab4:	71bb      	strb	r3, [r7, #6]
  pdev->host.hc[hc_num].ep_is_in = 0;
 8003ab6:	79bb      	ldrb	r3, [r7, #6]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	719a      	strb	r2, [r3, #6]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8003aca:	79bb      	ldrb	r3, [r7, #6]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	f103 030d 	add.w	r3, r3, #13
 8003ad2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003ad6:	18d3      	adds	r3, r2, r3
 8003ad8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8003ae0:	79bb      	ldrb	r3, [r7, #6]
 8003ae2:	79fa      	ldrb	r2, [r7, #7]
 8003ae4:	68f9      	ldr	r1, [r7, #12]
 8003ae6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003aea:	18cb      	adds	r3, r1, r3
 8003aec:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8003af0:	601a      	str	r2, [r3, #0]
 
  if ( length == 0 )
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d109      	bne.n	8003b0c <USBH_CtlSendData+0x64>
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
 8003af8:	79bb      	ldrb	r3, [r7, #6]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f103 0316 	add.w	r3, r3, #22
 8003b00:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003b04:	18d3      	adds	r3, r2, r3
 8003b06:	f04f 0201 	mov.w	r2, #1
 8003b0a:	715a      	strb	r2, [r3, #5]
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8003b0c:	79bb      	ldrb	r3, [r7, #6]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	f103 0316 	add.w	r3, r3, #22
 8003b14:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	795b      	ldrb	r3, [r3, #5]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10c      	bne.n	8003b3a <USBH_CtlSendData+0x92>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 8003b20:	79bb      	ldrb	r3, [r7, #6]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f103 030d 	add.w	r3, r3, #13
 8003b28:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003b2c:	18d3      	adds	r3, r2, r3
 8003b2e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	711a      	strb	r2, [r3, #4]
 8003b38:	e00b      	b.n	8003b52 <USBH_CtlSendData+0xaa>
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8003b3a:	79bb      	ldrb	r3, [r7, #6]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	f103 030d 	add.w	r3, r3, #13
 8003b42:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003b46:	18d3      	adds	r3, r2, r3
 8003b48:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003b4c:	f04f 0202 	mov.w	r2, #2
 8003b50:	711a      	strb	r2, [r3, #4]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8003b52:	79bb      	ldrb	r3, [r7, #6]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	4619      	mov	r1, r3
 8003b58:	f7fd fdb6 	bl	80016c8 <HCD_SubmitRequest>
   
  return USBH_OK;
 8003b5c:	f04f 0300 	mov.w	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	f107 0710 	add.w	r7, r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop

08003b6c <USBH_CtlReceiveData>:
  */
USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t* buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	71fa      	strb	r2, [r7, #7]
 8003b78:	71bb      	strb	r3, [r7, #6]

  pdev->host.hc[hc_num].ep_is_in = 1;
 8003b7a:	79bb      	ldrb	r3, [r7, #6]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003b82:	18d3      	adds	r3, r2, r3
 8003b84:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b88:	f04f 0201 	mov.w	r2, #1
 8003b8c:	719a      	strb	r2, [r3, #6]
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8003b8e:	79bb      	ldrb	r3, [r7, #6]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	f103 030d 	add.w	r3, r3, #13
 8003b96:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003b9a:	18d3      	adds	r3, r2, r3
 8003b9c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003ba0:	f04f 0202 	mov.w	r2, #2
 8003ba4:	711a      	strb	r2, [r3, #4]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8003ba6:	79bb      	ldrb	r3, [r7, #6]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	f103 030d 	add.w	r3, r3, #13
 8003bae:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003bb2:	18d3      	adds	r3, r2, r3
 8003bb4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;  
 8003bbc:	79bb      	ldrb	r3, [r7, #6]
 8003bbe:	79fa      	ldrb	r2, [r7, #7]
 8003bc0:	68f9      	ldr	r1, [r7, #12]
 8003bc2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003bc6:	18cb      	adds	r3, r1, r3
 8003bc8:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8003bcc:	601a      	str	r2, [r3, #0]

  HCD_SubmitRequest (pdev , hc_num);   
 8003bce:	79bb      	ldrb	r3, [r7, #6]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fd fd78 	bl	80016c8 <HCD_SubmitRequest>
  
  return USBH_OK;
 8003bd8:	f04f 0300 	mov.w	r3, #0
  
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f107 0710 	add.w	r7, r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop

08003be8 <USBH_BulkSendData>:
  */
USBH_Status USBH_BulkSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	80fa      	strh	r2, [r7, #6]
 8003bf4:	717b      	strb	r3, [r7, #5]
  pdev->host.hc[hc_num].ep_is_in = 0;
 8003bf6:	797b      	ldrb	r3, [r7, #5]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003bfe:	18d3      	adds	r3, r2, r3
 8003c00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	719a      	strb	r2, [r3, #6]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8003c0a:	797b      	ldrb	r3, [r7, #5]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	f103 030d 	add.w	r3, r3, #13
 8003c12:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003c16:	18d3      	adds	r3, r2, r3
 8003c18:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;  
 8003c20:	797b      	ldrb	r3, [r7, #5]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	68f9      	ldr	r1, [r7, #12]
 8003c26:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003c2a:	18cb      	adds	r3, r1, r3
 8003c2c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8003c30:	601a      	str	r2, [r3, #0]

 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8003c32:	797b      	ldrb	r3, [r7, #5]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	f103 0316 	add.w	r3, r3, #22
 8003c3a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	795b      	ldrb	r3, [r3, #5]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10c      	bne.n	8003c60 <USBH_BulkSendData+0x78>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 8003c46:	797b      	ldrb	r3, [r7, #5]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	f103 030d 	add.w	r3, r3, #13
 8003c4e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003c52:	18d3      	adds	r3, r2, r3
 8003c54:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	711a      	strb	r2, [r3, #4]
 8003c5e:	e00b      	b.n	8003c78 <USBH_BulkSendData+0x90>
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8003c60:	797b      	ldrb	r3, [r7, #5]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	f103 030d 	add.w	r3, r3, #13
 8003c68:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003c72:	f04f 0202 	mov.w	r2, #2
 8003c76:	711a      	strb	r2, [r3, #4]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8003c78:	797b      	ldrb	r3, [r7, #5]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f7fd fd23 	bl	80016c8 <HCD_SubmitRequest>
  return USBH_OK;
 8003c82:	f04f 0300 	mov.w	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	f107 0710 	add.w	r7, r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <USBH_BulkReceiveData>:
  */
USBH_Status USBH_BulkReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	80fa      	strh	r2, [r7, #6]
 8003c9c:	717b      	strb	r3, [r7, #5]
  pdev->host.hc[hc_num].ep_is_in = 1;   
 8003c9e:	797b      	ldrb	r3, [r7, #5]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003ca6:	18d3      	adds	r3, r2, r3
 8003ca8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003cac:	f04f 0201 	mov.w	r2, #1
 8003cb0:	719a      	strb	r2, [r3, #6]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8003cb2:	797b      	ldrb	r3, [r7, #5]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	f103 030d 	add.w	r3, r3, #13
 8003cba:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003cbe:	18d3      	adds	r3, r2, r3
 8003cc0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8003cc8:	797b      	ldrb	r3, [r7, #5]
 8003cca:	88fa      	ldrh	r2, [r7, #6]
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003cd2:	18cb      	adds	r3, r1, r3
 8003cd4:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8003cd8:	601a      	str	r2, [r3, #0]
  

  if( pdev->host.hc[hc_num].toggle_in == 0)
 8003cda:	797b      	ldrb	r3, [r7, #5]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	f103 0316 	add.w	r3, r3, #22
 8003ce2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003ce6:	18d3      	adds	r3, r2, r3
 8003ce8:	791b      	ldrb	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10c      	bne.n	8003d08 <USBH_BulkReceiveData+0x78>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8003cee:	797b      	ldrb	r3, [r7, #5]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	f103 030d 	add.w	r3, r3, #13
 8003cf6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003cfa:	18d3      	adds	r3, r2, r3
 8003cfc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	711a      	strb	r2, [r3, #4]
 8003d06:	e00b      	b.n	8003d20 <USBH_BulkReceiveData+0x90>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8003d08:	797b      	ldrb	r3, [r7, #5]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	f103 030d 	add.w	r3, r3, #13
 8003d10:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003d14:	18d3      	adds	r3, r2, r3
 8003d16:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003d1a:	f04f 0202 	mov.w	r2, #2
 8003d1e:	711a      	strb	r2, [r3, #4]
  }

  HCD_SubmitRequest (pdev , hc_num);  
 8003d20:	797b      	ldrb	r3, [r7, #5]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	4619      	mov	r1, r3
 8003d26:	f7fd fccf 	bl	80016c8 <HCD_SubmitRequest>
  return USBH_OK;
 8003d2a:	f04f 0300 	mov.w	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f107 0710 	add.w	r7, r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <USBH_InterruptReceiveData>:
  */
USBH_Status USBH_InterruptReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	71fa      	strb	r2, [r7, #7]
 8003d44:	71bb      	strb	r3, [r7, #6]

  pdev->host.hc[hc_num].ep_is_in = 1;  
 8003d46:	79bb      	ldrb	r3, [r7, #6]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003d4e:	18d3      	adds	r3, r2, r3
 8003d50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003d54:	f04f 0201 	mov.w	r2, #1
 8003d58:	719a      	strb	r2, [r3, #6]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8003d5a:	79bb      	ldrb	r3, [r7, #6]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	f103 030d 	add.w	r3, r3, #13
 8003d62:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003d66:	18d3      	adds	r3, r2, r3
 8003d68:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8003d70:	79bb      	ldrb	r3, [r7, #6]
 8003d72:	79fa      	ldrb	r2, [r7, #7]
 8003d74:	68f9      	ldr	r1, [r7, #12]
 8003d76:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003d7a:	18cb      	adds	r3, r1, r3
 8003d7c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8003d80:	601a      	str	r2, [r3, #0]
  

  
  if(pdev->host.hc[hc_num].toggle_in == 0)
 8003d82:	79bb      	ldrb	r3, [r7, #6]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	f103 0316 	add.w	r3, r3, #22
 8003d8a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003d8e:	18d3      	adds	r3, r2, r3
 8003d90:	791b      	ldrb	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10c      	bne.n	8003db0 <USBH_InterruptReceiveData+0x78>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8003d96:	79bb      	ldrb	r3, [r7, #6]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f103 030d 	add.w	r3, r3, #13
 8003d9e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003da2:	18d3      	adds	r3, r2, r3
 8003da4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	711a      	strb	r2, [r3, #4]
 8003dae:	e00b      	b.n	8003dc8 <USBH_InterruptReceiveData+0x90>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8003db0:	79bb      	ldrb	r3, [r7, #6]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f103 030d 	add.w	r3, r3, #13
 8003db8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003dbc:	18d3      	adds	r3, r2, r3
 8003dbe:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003dc2:	f04f 0202 	mov.w	r2, #2
 8003dc6:	711a      	strb	r2, [r3, #4]
  }

  /* toggle DATA PID */
  pdev->host.hc[hc_num].toggle_in ^= 1;  
 8003dc8:	79bb      	ldrb	r3, [r7, #6]
 8003dca:	79ba      	ldrb	r2, [r7, #6]
 8003dcc:	68f9      	ldr	r1, [r7, #12]
 8003dce:	f102 0216 	add.w	r2, r2, #22
 8003dd2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8003dd6:	188a      	adds	r2, r1, r2
 8003dd8:	7912      	ldrb	r2, [r2, #4]
 8003dda:	f082 0201 	eor.w	r2, r2, #1
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	f103 0316 	add.w	r3, r3, #22
 8003de6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003dea:	18cb      	adds	r3, r1, r3
 8003dec:	711a      	strb	r2, [r3, #4]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8003dee:	79bb      	ldrb	r3, [r7, #6]
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7fd fc68 	bl	80016c8 <HCD_SubmitRequest>
  
  return USBH_OK;
 8003df8:	f04f 0300 	mov.w	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f107 0710 	add.w	r7, r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop

08003e08 <USBH_InterruptSendData>:
  */
USBH_Status USBH_InterruptSendData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t hc_num)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	71fa      	strb	r2, [r7, #7]
 8003e14:	71bb      	strb	r3, [r7, #6]

  pdev->host.hc[hc_num].ep_is_in = 0;  
 8003e16:	79bb      	ldrb	r3, [r7, #6]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003e1e:	18d3      	adds	r3, r2, r3
 8003e20:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	719a      	strb	r2, [r3, #6]
  pdev->host.hc[hc_num].xfer_buff = buff;
 8003e2a:	79bb      	ldrb	r3, [r7, #6]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	f103 030d 	add.w	r3, r3, #13
 8003e32:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003e36:	18d3      	adds	r3, r2, r3
 8003e38:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	601a      	str	r2, [r3, #0]
  pdev->host.hc[hc_num].xfer_len = length;
 8003e40:	79bb      	ldrb	r3, [r7, #6]
 8003e42:	79fa      	ldrb	r2, [r7, #7]
 8003e44:	68f9      	ldr	r1, [r7, #12]
 8003e46:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003e4a:	18cb      	adds	r3, r1, r3
 8003e4c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8003e50:	601a      	str	r2, [r3, #0]
  
  if(pdev->host.hc[hc_num].toggle_in == 0)
 8003e52:	79bb      	ldrb	r3, [r7, #6]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	f103 0316 	add.w	r3, r3, #22
 8003e5a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	791b      	ldrb	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10c      	bne.n	8003e80 <USBH_InterruptSendData+0x78>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
 8003e66:	79bb      	ldrb	r3, [r7, #6]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	f103 030d 	add.w	r3, r3, #13
 8003e6e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003e72:	18d3      	adds	r3, r2, r3
 8003e74:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	711a      	strb	r2, [r3, #4]
 8003e7e:	e00b      	b.n	8003e98 <USBH_InterruptSendData+0x90>
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8003e80:	79bb      	ldrb	r3, [r7, #6]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	f103 030d 	add.w	r3, r3, #13
 8003e88:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003e8c:	18d3      	adds	r3, r2, r3
 8003e8e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003e92:	f04f 0202 	mov.w	r2, #2
 8003e96:	711a      	strb	r2, [r3, #4]
  }

  pdev->host.hc[hc_num].toggle_in ^= 1;  
 8003e98:	79bb      	ldrb	r3, [r7, #6]
 8003e9a:	79ba      	ldrb	r2, [r7, #6]
 8003e9c:	68f9      	ldr	r1, [r7, #12]
 8003e9e:	f102 0216 	add.w	r2, r2, #22
 8003ea2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8003ea6:	188a      	adds	r2, r1, r2
 8003ea8:	7912      	ldrb	r2, [r2, #4]
 8003eaa:	f082 0201 	eor.w	r2, r2, #1
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	68f9      	ldr	r1, [r7, #12]
 8003eb2:	f103 0316 	add.w	r3, r3, #22
 8003eb6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8003eba:	18cb      	adds	r3, r1, r3
 8003ebc:	711a      	strb	r2, [r3, #4]
  
  HCD_SubmitRequest (pdev , hc_num);  
 8003ebe:	79bb      	ldrb	r3, [r7, #6]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f7fd fc00 	bl	80016c8 <HCD_SubmitRequest>
  
  return USBH_OK;
 8003ec8:	f04f 0300 	mov.w	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f107 0710 	add.w	r7, r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop

08003ed8 <USBH_SubmitSetupRequest>:
  * @retval Status. 
*/
static USBH_Status USBH_SubmitSetupRequest(USBH_HOST *phost,
                                           uint8_t* buff, 
                                           uint16_t length)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80fb      	strh	r3, [r7, #6]
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	705a      	strb	r2, [r3, #1]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f04f 0209 	mov.w	r2, #9
 8003ef4:	701a      	strb	r2, [r3, #0]
  phost->Control.buff = buff; 
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	609a      	str	r2, [r3, #8]
  phost->Control.length = length;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	88fa      	ldrh	r2, [r7, #6]
 8003f00:	819a      	strh	r2, [r3, #12]
  phost->Control.state = CTRL_SETUP;  
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f04f 0201 	mov.w	r2, #1
 8003f08:	771a      	strb	r2, [r3, #28]

  return USBH_OK;  
 8003f0a:	f04f 0300 	mov.w	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f107 0714 	add.w	r7, r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop

08003f1c <USBH_Get_DevDesc>:
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	71fb      	strb	r3, [r7, #7]
  
  if((status = USBH_GetDescriptor(pdev, 
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 7288 	add.w	r2, r3, #272	; 0x110
                             uint8_t length)
{
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	9200      	str	r2, [sp, #0]
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f44:	f000 f876 	bl	8004034 <USBH_GetDescriptor>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <USBH_Get_DevDesc+0x50>
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	4608      	mov	r0, r1
 8003f64:	4611      	mov	r1, r2
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 f92a 	bl	80041c0 <USBH_ParseDevDesc>
  }
  return status;      
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f107 0718 	add.w	r7, r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <USBH_Get_CfgDesc>:
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f503 7388 	add.w	r3, r3, #272	; 0x110
                             uint16_t length)

{
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f9e:	f000 f849 	bl	8004034 <USBH_GetDescriptor>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	75fb      	strb	r3, [r7, #23]
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10f      	bne.n	8003fcc <USBH_Get_CfgDesc+0x54>
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f103 0034 	add.w	r0, r3, #52	; 0x34
                       phost->device_prop.Itf_Desc,
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f103 013e 	add.w	r1, r3, #62	; 0x3e
                       phost->device_prop.Ep_Desc[0], 
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f103 0250 	add.w	r2, r3, #80	; 0x50
                       pdev->host.Rx_Buffer,
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f503 7388 	add.w	r3, r3, #272	; 0x110
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
 8003fc4:	88fc      	ldrh	r4, [r7, #6]
 8003fc6:	9400      	str	r4, [sp, #0]
 8003fc8:	f000 f972 	bl	80042b0 <USBH_ParseCfgDesc>
                       phost->device_prop.Ep_Desc[0], 
                       pdev->host.Rx_Buffer,
                       length); 
    
  }
  return status;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f107 071c 	add.w	r7, r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}

08003fd8 <USBH_Get_StringDesc>:
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003ff0:	b29b      	uxth	r3, r3
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  pdev->host.Rx_Buffer,
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	f502 7288 	add.w	r2, r2, #272	; 0x110
                                uint8_t *buff, 
                                uint16_t length)
{
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8003ff8:	9200      	str	r2, [sp, #0]
 8003ffa:	8c3a      	ldrh	r2, [r7, #32]
 8003ffc:	9201      	str	r2, [sp, #4]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f000 f815 	bl	8004034 <USBH_GetDescriptor>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d108      	bne.n	8004026 <USBH_Get_StringDesc+0x4e>
                                  USB_DESC_STRING | string_index, 
                                  pdev->host.Rx_Buffer,
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 7288 	add.w	r2, r3, #272	; 0x110
 800401a:	8c3b      	ldrh	r3, [r7, #32]
 800401c:	4610      	mov	r0, r2
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	f000 fa53 	bl	80044cc <USBH_ParseStringDesc>
  }
  return status;
 8004026:	7dfb      	ldrb	r3, [r7, #23]
}
 8004028:	4618      	mov	r0, r3
 800402a:	f107 0718 	add.w	r7, r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop

08004034 <USBH_GetDescriptor>:
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	71fa      	strb	r2, [r7, #7]
 8004040:	80bb      	strh	r3, [r7, #4]
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	751a      	strb	r2, [r3, #20]
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f04f 0206 	mov.w	r2, #6
 8004054:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = value_idx;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	88ba      	ldrh	r2, [r7, #4]
 800405a:	82da      	strh	r2, [r3, #22]
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 800405c:	88bb      	ldrh	r3, [r7, #4]
 800405e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004066:	d104      	bne.n	8004072 <USBH_GetDescriptor+0x3e>
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f240 4209 	movw	r2, #1033	; 0x409
 800406e:	831a      	strh	r2, [r3, #24]
 8004070:	e003      	b.n	800407a <USBH_GetDescriptor+0x46>
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	831a      	strh	r2, [r3, #24]
  }
  phost->Control.setup.b.wLength.w = length;           
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	8bba      	ldrh	r2, [r7, #28]
 800407e:	835a      	strh	r2, [r3, #26]
  return USBH_CtlReq(pdev, phost, buff , length );     
 8004080:	8bbb      	ldrh	r3, [r7, #28]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	f7ff fc7c 	bl	8003984 <USBH_CtlReq>
 800408c:	4603      	mov	r3, r0
}
 800408e:	4618      	mov	r0, r3
 8004090:	f107 0710 	add.w	r7, r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <USBH_SetAddress>:
* @retval Status
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	71fb      	strb	r3, [r7, #7]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f04f 0205 	mov.w	r2, #5
 80040b4:	755a      	strb	r2, [r3, #21]
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	f7ff fc53 	bl	8003984 <USBH_CtlReq>
 80040de:	4603      	mov	r3, r0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	f107 0710 	add.w	r7, r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop

080040ec <USBH_SetCfg>:
* @retval Status
*/
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	751a      	strb	r2, [r3, #20]
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f04f 0209 	mov.w	r2, #9
 8004108:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = cfg_idx;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	f7ff fc2a 	bl	8003984 <USBH_CtlReq>
 8004130:	4603      	mov	r3, r0
}
 8004132:	4618      	mov	r0, r3
 8004134:	f107 0710 	add.w	r7, r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <USBH_ClrFeature>:
*/
USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	71fa      	strb	r2, [r7, #7]
 8004148:	71bb      	strb	r3, [r7, #6]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f04f 0202 	mov.w	r2, #2
 8004150:	751a      	strb	r2, [r3, #20]
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f04f 0201 	mov.w	r2, #1
 8004158:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	b29a      	uxth	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	835a      	strh	r2, [r3, #26]
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	b25b      	sxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	da0a      	bge.n	8004190 <USBH_ClrFeature+0x54>
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 800417a:	79bb      	ldrb	r3, [r7, #6]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	f103 0316 	add.w	r3, r3, #22
 8004182:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	711a      	strb	r2, [r3, #4]
 800418e:	e009      	b.n	80041a4 <USBH_ClrFeature+0x68>
  }
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
 8004190:	79bb      	ldrb	r3, [r7, #6]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	f103 0316 	add.w	r3, r3, #22
 8004198:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800419c:	18d3      	adds	r3, r2, r3
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	715a      	strb	r2, [r3, #5]
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f7ff fbe8 	bl	8003984 <USBH_CtlReq>
 80041b4:	4603      	mov	r3, r0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	f107 0710 	add.w	r7, r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <USBH_ParseDevDesc>:
* @retval None
*/
static void  USBH_ParseDevDesc (USBH_DevDesc_TypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	785a      	ldrb	r2, [r3, #1]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f103 0302 	add.w	r3, r3, #2
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f103 0303 	add.w	r3, r3, #3
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	791a      	ldrb	r2, [r3, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	795a      	ldrb	r2, [r3, #5]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	799a      	ldrb	r2, [r3, #6]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	79da      	ldrb	r2, [r3, #7]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d93f      	bls.n	80042a4 <USBH_ParseDevDesc+0xe4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f103 0308 	add.w	r3, r3, #8
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f103 0309 	add.w	r3, r3, #9
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800423a:	b29b      	uxth	r3, r3
 800423c:	18d3      	adds	r3, r2, r3
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f103 030a 	add.w	r3, r3, #10
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f103 030b 	add.w	r3, r3, #11
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800425a:	b29b      	uxth	r3, r3
 800425c:	18d3      	adds	r3, r2, r3
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f103 030c 	add.w	r3, r3, #12
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f103 030d 	add.w	r3, r3, #13
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800427a:	b29b      	uxth	r3, r3
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	7b9a      	ldrb	r2, [r3, #14]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	7bda      	ldrb	r2, [r3, #15]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	7c1a      	ldrb	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	7c5a      	ldrb	r2, [r3, #17]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	745a      	strb	r2, [r3, #17]
  }
}
 80042a4:	f107 0714 	add.w	r7, r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop

080042b0 <USBH_ParseCfgDesc>:
static void  USBH_ParseCfgDesc (USBH_CfgDesc_TypeDef* cfg_desc,
                                USBH_InterfaceDesc_TypeDef* itf_desc,
                                USBH_EpDesc_TypeDef*  ep_desc, 
                                uint8_t *buf, 
                                uint16_t length)
{  
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  USBH_InterfaceDesc_TypeDef    *pif ;
  USBH_EpDesc_TypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix;
  int8_t                        ep_ix;  
  
  pdesc   = (USBH_DescHeader_t *)buf;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	785a      	ldrb	r2, [r3, #1]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f103 0302 	add.w	r3, r3, #2
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f103 0303 	add.w	r3, r3, #3
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	18d3      	adds	r3, r2, r3
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	791a      	ldrb	r2, [r3, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	795a      	ldrb	r2, [r3, #5]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	799a      	ldrb	r2, [r3, #6]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	79da      	ldrb	r2, [r3, #7]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	7a1a      	ldrb	r2, [r3, #8]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800431e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004320:	2b09      	cmp	r3, #9
 8004322:	d973      	bls.n	800440c <USBH_ParseCfgDesc+0x15c>
  {
    ptr = USB_LEN_CFG_DESC;
 8004324:	f04f 0309 	mov.w	r3, #9
 8004328:	82fb      	strh	r3, [r7, #22]
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	791b      	ldrb	r3, [r3, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d86c      	bhi.n	800440c <USBH_ParseCfgDesc+0x15c>
    {
      if_ix = 0;
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      pif = (USBH_InterfaceDesc_TypeDef *)0;
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
      
      /* Parse Interface descriptor relative to the current configuration */
      if(cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d861      	bhi.n	800440c <USBH_ParseCfgDesc+0x15c>
      {
        while (if_ix < cfg_desc->bNumInterfaces) 
 8004348:	e05a      	b.n	8004400 <USBH_ParseCfgDesc+0x150>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800434a:	f107 0316 	add.w	r3, r7, #22
 800434e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004350:	4619      	mov	r1, r3
 8004352:	f000 f8f5 	bl	8004540 <USBH_GetNextDesc>
 8004356:	4603      	mov	r3, r0
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	785b      	ldrb	r3, [r3, #1]
 800435e:	2b04      	cmp	r3, #4
 8004360:	d147      	bne.n	80043f2 <USBH_ParseCfgDesc+0x142>
          {  
            pif               = &itf_desc[if_ix];
 8004362:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8004366:	4613      	mov	r3, r2
 8004368:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800436c:	189b      	adds	r3, r3, r2
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	18d3      	adds	r3, r2, r3
 8004372:	61fb      	str	r3, [r7, #28]
            USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);
 8004374:	69f8      	ldr	r0, [r7, #28]
 8004376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004378:	f000 f84c 	bl	8004414 <USBH_ParseInterfaceDesc>
            ep_ix = 0;
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            
            /* Parse Ep descriptors relative to the current interface */
            if(pif->bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d82b      	bhi.n	80043e4 <USBH_ParseCfgDesc+0x134>
            {          
              while (ep_ix < pif->bNumEndpoints) 
 800438c:	e024      	b.n	80043d8 <USBH_ParseCfgDesc+0x128>
              {
                pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
 800438e:	f107 0316 	add.w	r3, r7, #22
 8004392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004394:	4619      	mov	r1, r3
 8004396:	f000 f8d3 	bl	8004540 <USBH_GetNextDesc>
 800439a:	4603      	mov	r3, r0
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
                if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	785b      	ldrb	r3, [r3, #1]
 80043a2:	2b05      	cmp	r3, #5
 80043a4:	d111      	bne.n	80043ca <USBH_ParseCfgDesc+0x11a>
                {  
                  pep               = &ep_desc[ep_ix];
 80043a6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80043aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	18d3      	adds	r3, r2, r3
 80043b2:	61bb      	str	r3, [r7, #24]
                  USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 80043b4:	69b8      	ldr	r0, [r7, #24]
 80043b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043b8:	f000 f85a 	bl	8004470 <USBH_ParseEPDesc>
                  ep_ix++;
 80043bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80043c0:	f103 0301 	add.w	r3, r3, #1
 80043c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043c8:	e006      	b.n	80043d8 <USBH_ParseCfgDesc+0x128>
                }
                else
                {
                  ptr += pdesc->bLength;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	8afb      	ldrh	r3, [r7, #22]
 80043d2:	18d3      	adds	r3, r2, r3
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	82fb      	strh	r3, [r7, #22]
            ep_ix = 0;
            
            /* Parse Ep descriptors relative to the current interface */
            if(pif->bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
            {          
              while (ep_ix < pif->bNumEndpoints) 
 80043d8:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	791b      	ldrb	r3, [r3, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	dbd4      	blt.n	800438e <USBH_ParseCfgDesc+0xde>
                {
                  ptr += pdesc->bLength;
                }
              }
            }
            if_ix++;
 80043e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043e8:	f103 0301 	add.w	r3, r3, #1
 80043ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f0:	e006      	b.n	8004400 <USBH_ParseCfgDesc+0x150>
          }
          else
          {
            ptr += pdesc->bLength;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	8afb      	ldrh	r3, [r7, #22]
 80043fa:	18d3      	adds	r3, r2, r3
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	82fb      	strh	r3, [r7, #22]
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      /* Parse Interface descriptor relative to the current configuration */
      if(cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES)
      {
        while (if_ix < cfg_desc->bNumInterfaces) 
 8004400:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	791b      	ldrb	r3, [r3, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	db9e      	blt.n	800434a <USBH_ParseCfgDesc+0x9a>
          }
        }
      }
    }
  }  
}
 800440c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <USBH_ParseInterfaceDesc>:
* @param  buf: Buffer where the descriptor data is available
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	785a      	ldrb	r2, [r3, #1]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	789a      	ldrb	r2, [r3, #2]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	78da      	ldrb	r2, [r3, #3]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	791a      	ldrb	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	795a      	ldrb	r2, [r3, #5]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	799a      	ldrb	r2, [r3, #6]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	79da      	ldrb	r2, [r3, #7]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	7a1a      	ldrb	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	721a      	strb	r2, [r3, #8]
}
 8004466:	f107 070c 	add.w	r7, r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <USBH_ParseEPDesc>:
* @param  buf: Buffer where the parsed descriptor stored
* @retval None
*/
static void  USBH_ParseEPDesc (USBH_EpDesc_TypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	785a      	ldrb	r2, [r3, #1]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	789a      	ldrb	r2, [r3, #2]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	78da      	ldrb	r2, [r3, #3]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f103 0304 	add.w	r3, r3, #4
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f103 0305 	add.w	r3, r3, #5
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	18d3      	adds	r3, r2, r3
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	799a      	ldrb	r2, [r3, #6]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	719a      	strb	r2, [r3, #6]
}
 80044c2:	f107 070c 	add.w	r7, r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <USBH_ParseStringDesc>:
* @retval None
*/
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f103 0301 	add.w	r3, r3, #1
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d126      	bne.n	8004534 <USBH_ParseStringDesc+0x68>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	f1a3 0202 	sub.w	r2, r3, #2
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	bfb8      	it	lt
 80044f4:	4613      	movlt	r3, r2
 80044f6:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f103 0302 	add.w	r3, r3, #2
 80044fe:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	82fb      	strh	r3, [r7, #22]
 8004506:	e00d      	b.n	8004524 <USBH_ParseStringDesc+0x58>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8004508:	8afb      	ldrh	r3, [r7, #22]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	701a      	strb	r2, [r3, #0]
      pdest++;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f103 0301 	add.w	r3, r3, #1
 800451a:	60bb      	str	r3, [r7, #8]
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 800451c:	8afb      	ldrh	r3, [r7, #22]
 800451e:	f103 0302 	add.w	r3, r3, #2
 8004522:	82fb      	strh	r3, [r7, #22]
 8004524:	8afa      	ldrh	r2, [r7, #22]
 8004526:	8abb      	ldrh	r3, [r7, #20]
 8004528:	429a      	cmp	r2, r3
 800452a:	d3ed      	bcc.n	8004508 <USBH_ParseStringDesc+0x3c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
      pdest++;
    }  
    *pdest = 0; /* mark end of string */  
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
  }
}
 8004534:	f107 071c 	add.w	r7, r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop

08004540 <USBH_GetNextDesc>:
* @param  buf: Buffer where the cfg descriptor is available
* @param  ptr: data popinter inside the cfg descriptor
* @retval next header
*/
static  USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	881a      	ldrh	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	18d3      	adds	r3, r2, r3
 8004554:	b29a      	uxth	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	781b      	ldrb	r3, [r3, #0]
static  USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	18d3      	adds	r3, r2, r3
 8004562:	60fb      	str	r3, [r7, #12]
         ((USBH_DescHeader_t *)pbuf)->bLength);
 
  return(pnext);
 8004564:	68fb      	ldr	r3, [r7, #12]
}
 8004566:	4618      	mov	r0, r3
 8004568:	f107 0714 	add.w	r7, r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop

08004574 <USBH_MSC_Init>:
*         Initializes the mass storage parameters
* @param  None
* @retval None
*/
void USBH_MSC_Init(USB_OTG_CORE_HANDLE *pdev )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  if(HCD_IsDeviceConnected(pdev))
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fd f83b 	bl	80015f8 <HCD_IsDeviceConnected>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01f      	beq.n	80045c8 <USBH_MSC_Init+0x54>
  {      
    USBH_MSC_CBWData.field.CBWSignature = USBH_MSC_BOT_CBW_SIGNATURE;
 8004588:	f244 73e8 	movw	r3, #18408	; 0x47e8
 800458c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004590:	f245 3255 	movw	r2, #21333	; 0x5355
 8004594:	f2c4 3242 	movt	r2, #17218	; 0x4342
 8004598:	601a      	str	r2, [r3, #0]
    USBH_MSC_CBWData.field.CBWTag = USBH_MSC_BOT_CBW_TAG;
 800459a:	f244 73e8 	movw	r3, #18408	; 0x47e8
 800459e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045a2:	f244 0250 	movw	r2, #16464	; 0x4050
 80045a6:	f2c2 0230 	movt	r2, #8240	; 0x2030
 80045aa:	605a      	str	r2, [r3, #4]
    USBH_MSC_CBWData.field.CBWLUN = 0;  /*Only one LUN is supported*/
 80045ac:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80045b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	735a      	strb	r2, [r3, #13]
    USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;  
 80045ba:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80045be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045c2:	f04f 0201 	mov.w	r2, #1
 80045c6:	70da      	strb	r2, [r3, #3]
  }
  
  BOTStallErrorCount = 0;
 80045c8:	f640 230c 	movw	r3, #2572	; 0xa0c
 80045cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
  MSCErrorCount = 0;
 80045d6:	f640 2319 	movw	r3, #2585	; 0xa19
 80045da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
}
 80045e4:	f107 0708 	add.w	r7, r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <USBH_MSC_HandleBOTXfer>:
* @param  None
* @retval None
* 
*/
void USBH_MSC_HandleBOTXfer (USB_OTG_CORE_HANDLE *pdev ,USBH_HOST *phost)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  static uint32_t remainingDataLength;
  static uint8_t *datapointer;
  static uint8_t error_direction;
  USBH_Status status;
  
  URB_STATE URB_Status = URB_IDLE;
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	73bb      	strb	r3, [r7, #14]
  
  if(HCD_IsDeviceConnected(pdev))
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fc fffb 	bl	80015f8 <HCD_IsDeviceConnected>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 82de 	beq.w	8004bc6 <USBH_MSC_HandleBOTXfer+0x5da>
  {  
    
    switch (USBH_MSC_BOTXferParam.BOTState)
 800460a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800460e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004612:	791b      	ldrb	r3, [r3, #4]
 8004614:	f103 33ff 	add.w	r3, r3, #4294967295
 8004618:	2b07      	cmp	r3, #7
 800461a:	f200 82c7 	bhi.w	8004bac <USBH_MSC_HandleBOTXfer+0x5c0>
 800461e:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <USBH_MSC_HandleBOTXfer+0x38>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	08004645 	.word	0x08004645
 8004628:	0800467f 	.word	0x0800467f
 800462c:	08004775 	.word	0x08004775
 8004630:	080048a5 	.word	0x080048a5
 8004634:	080049f1 	.word	0x080049f1
 8004638:	08004a83 	.word	0x08004a83
 800463c:	08004b0b 	.word	0x08004b0b
 8004640:	08004b6b 	.word	0x08004b6b
    {
    case USBH_MSC_SEND_CBW:
      /* send CBW */    
      USBH_BulkSendData (pdev,
 8004644:	f644 0308 	movw	r3, #18440	; 0x4808
 8004648:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f244 71e8 	movw	r1, #18408	; 0x47e8
 8004654:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004658:	f04f 021f 	mov.w	r2, #31
 800465c:	f7ff fac4 	bl	8003be8 <USBH_BulkSendData>
                         &USBH_MSC_CBWData.CBWArray[0], 
                         USBH_MSC_BOT_CBW_PACKET_LENGTH , 
                         MSC_Machine.hc_num_out);
      
      USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SEND_CBW;
 8004660:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004664:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004668:	f04f 0201 	mov.w	r2, #1
 800466c:	715a      	strb	r2, [r3, #5]
      USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SENT_CBW;
 800466e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004672:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004676:	f04f 0202 	mov.w	r2, #2
 800467a:	711a      	strb	r2, [r3, #4]
      
      break;
 800467c:	e2a3      	b.n	8004bc6 <USBH_MSC_HandleBOTXfer+0x5da>
      
    case USBH_MSC_SENT_CBW:
      URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);
 800467e:	f644 0308 	movw	r3, #18440	; 0x4808
 8004682:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4619      	mov	r1, r3
 800468c:	f7fc ffd4 	bl	8001638 <HCD_GetURB_State>
 8004690:	4603      	mov	r3, r0
 8004692:	73bb      	strb	r3, [r7, #14]
      
      if(URB_Status == URB_DONE)
 8004694:	7bbb      	ldrb	r3, [r7, #14]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d14b      	bne.n	8004732 <USBH_MSC_HandleBOTXfer+0x146>
      { 
        BOTStallErrorCount = 0;
 800469a:	f640 230c 	movw	r3, #2572	; 0xa0c
 800469e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SENT_CBW; 
 80046a8:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80046ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046b0:	f04f 0202 	mov.w	r2, #2
 80046b4:	715a      	strb	r2, [r3, #5]
        
        /* If the CBW Pkt is sent successful, then change the state */
        xferDirection = (USBH_MSC_CBWData.field.CBWFlags & USB_REQ_DIR_MASK);
 80046b6:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80046ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046be:	7b1b      	ldrb	r3, [r3, #12]
 80046c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046c4:	737b      	strb	r3, [r7, #13]
        
        if ( USBH_MSC_CBWData.field.CBWTransferLength != 0 )
 80046c6:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80046ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d026      	beq.n	8004722 <USBH_MSC_HandleBOTXfer+0x136>
        {
          remainingDataLength = USBH_MSC_CBWData.field.CBWTransferLength ;
 80046d4:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80046d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	f640 2310 	movw	r3, #2576	; 0xa10
 80046e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046e6:	601a      	str	r2, [r3, #0]
          datapointer = USBH_MSC_BOTXferParam.pRxTxBuff;
 80046e8:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80046ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	f640 2314 	movw	r3, #2580	; 0xa14
 80046f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046fa:	601a      	str	r2, [r3, #0]
          
          /* If there is Data Transfer Stage */
          if (xferDirection == USB_D2H)
 80046fc:	7b7b      	ldrb	r3, [r7, #13]
 80046fe:	2b80      	cmp	r3, #128	; 0x80
 8004700:	d107      	bne.n	8004712 <USBH_MSC_HandleBOTXfer+0x126>
          {
            /* Data Direction is IN */
            USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAIN_STATE;
 8004702:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004706:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800470a:	f04f 0203 	mov.w	r2, #3
 800470e:	711a      	strb	r2, [r3, #4]
      else if(URB_Status == URB_STALL)
      {
        error_direction = USBH_MSC_DIR_OUT;
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
      }
      break;
 8004710:	e24e      	b.n	8004bb0 <USBH_MSC_HandleBOTXfer+0x5c4>
            USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAIN_STATE;
          }
          else
          {
            /* Data Direction is OUT */
            USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAOUT_STATE;
 8004712:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800471a:	f04f 0204 	mov.w	r2, #4
 800471e:	711a      	strb	r2, [r3, #4]
      else if(URB_Status == URB_STALL)
      {
        error_direction = USBH_MSC_DIR_OUT;
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
      }
      break;
 8004720:	e246      	b.n	8004bb0 <USBH_MSC_HandleBOTXfer+0x5c4>
          } 
        }
        
        else
        {/* If there is NO Data Transfer Stage */
          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
 8004722:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004726:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800472a:	f04f 0205 	mov.w	r2, #5
 800472e:	711a      	strb	r2, [r3, #4]
      else if(URB_Status == URB_STALL)
      {
        error_direction = USBH_MSC_DIR_OUT;
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
      }
      break;
 8004730:	e23e      	b.n	8004bb0 <USBH_MSC_HandleBOTXfer+0x5c4>
        {/* If there is NO Data Transfer Stage */
          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
        }
        
      }   
      else if(URB_Status == URB_NOTREADY)
 8004732:	7bbb      	ldrb	r3, [r7, #14]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d10a      	bne.n	800474e <USBH_MSC_HandleBOTXfer+0x162>
      {
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp;    
 8004738:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800473c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004740:	795a      	ldrb	r2, [r3, #5]
 8004742:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004746:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800474a:	711a      	strb	r2, [r3, #4]
      else if(URB_Status == URB_STALL)
      {
        error_direction = USBH_MSC_DIR_OUT;
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
      }
      break;
 800474c:	e230      	b.n	8004bb0 <USBH_MSC_HandleBOTXfer+0x5c4>
      }   
      else if(URB_Status == URB_NOTREADY)
      {
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp;    
      }     
      else if(URB_Status == URB_STALL)
 800474e:	7bbb      	ldrb	r3, [r7, #14]
 8004750:	2b04      	cmp	r3, #4
 8004752:	f040 822d 	bne.w	8004bb0 <USBH_MSC_HandleBOTXfer+0x5c4>
      {
        error_direction = USBH_MSC_DIR_OUT;
 8004756:	f640 2318 	movw	r3, #2584	; 0xa18
 800475a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800475e:	f04f 0201 	mov.w	r2, #1
 8004762:	701a      	strb	r2, [r3, #0]
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
 8004764:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004768:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800476c:	f04f 0208 	mov.w	r2, #8
 8004770:	711a      	strb	r2, [r3, #4]
      }
      break;
 8004772:	e21d      	b.n	8004bb0 <USBH_MSC_HandleBOTXfer+0x5c4>
      
    case USBH_MSC_BOT_DATAIN_STATE:
      
      URB_Status =   HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
 8004774:	f644 0308 	movw	r3, #18440	; 0x4808
 8004778:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4619      	mov	r1, r3
 8004782:	f7fc ff59 	bl	8001638 <HCD_GetURB_State>
 8004786:	4603      	mov	r3, r0
 8004788:	73bb      	strb	r3, [r7, #14]
      /* BOT DATA IN stage */
      if((URB_Status == URB_DONE) ||(USBH_MSC_BOTXferParam.BOTStateBkp != USBH_MSC_BOT_DATAIN_STATE))
 800478a:	7bbb      	ldrb	r3, [r7, #14]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d006      	beq.n	800479e <USBH_MSC_HandleBOTXfer+0x1b2>
 8004790:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004798:	795b      	ldrb	r3, [r3, #5]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d067      	beq.n	800486e <USBH_MSC_HandleBOTXfer+0x282>
      {
        BOTStallErrorCount = 0;
 800479e:	f640 230c 	movw	r3, #2572	; 0xa0c
 80047a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAIN_STATE;    
 80047ac:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80047b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047b4:	f04f 0203 	mov.w	r2, #3
 80047b8:	715a      	strb	r2, [r3, #5]
        
        if(remainingDataLength > USBH_MSC_MPS_SIZE)
 80047ba:	f640 2310 	movw	r3, #2576	; 0xa10
 80047be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d928      	bls.n	800481a <USBH_MSC_HandleBOTXfer+0x22e>
        {
          USBH_BulkReceiveData (pdev,
 80047c8:	f640 2314 	movw	r3, #2580	; 0xa14
 80047cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	f644 0308 	movw	r3, #18440	; 0x4808
 80047d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	4611      	mov	r1, r2
 80047e0:	f04f 0240 	mov.w	r2, #64	; 0x40
 80047e4:	f7ff fa54 	bl	8003c90 <USBH_BulkReceiveData>
	                        datapointer, 
			        USBH_MSC_MPS_SIZE , 
			        MSC_Machine.hc_num_in);
          
          remainingDataLength -= USBH_MSC_MPS_SIZE;
 80047e8:	f640 2310 	movw	r3, #2576	; 0xa10
 80047ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80047f6:	f640 2310 	movw	r3, #2576	; 0xa10
 80047fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047fe:	601a      	str	r2, [r3, #0]
          datapointer = datapointer + USBH_MSC_MPS_SIZE;
 8004800:	f640 2314 	movw	r3, #2580	; 0xa14
 8004804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800480e:	f640 2314 	movw	r3, #2580	; 0xa14
 8004812:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004816:	601a      	str	r2, [r3, #0]
      if((URB_Status == URB_DONE) ||(USBH_MSC_BOTXferParam.BOTStateBkp != USBH_MSC_BOT_DATAIN_STATE))
      {
        BOTStallErrorCount = 0;
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAIN_STATE;    
        
        if(remainingDataLength > USBH_MSC_MPS_SIZE)
 8004818:	e043      	b.n	80048a2 <USBH_MSC_HandleBOTXfer+0x2b6>
			        MSC_Machine.hc_num_in);
          
          remainingDataLength -= USBH_MSC_MPS_SIZE;
          datapointer = datapointer + USBH_MSC_MPS_SIZE;
        }
        else if ( remainingDataLength == 0)
 800481a:	f640 2310 	movw	r3, #2576	; 0xa10
 800481e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d107      	bne.n	8004838 <USBH_MSC_HandleBOTXfer+0x24c>
        {
          /* If value was 0, and successful transfer, then change the state */
          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
 8004828:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800482c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004830:	f04f 0205 	mov.w	r2, #5
 8004834:	711a      	strb	r2, [r3, #4]
      if((URB_Status == URB_DONE) ||(USBH_MSC_BOTXferParam.BOTStateBkp != USBH_MSC_BOT_DATAIN_STATE))
      {
        BOTStallErrorCount = 0;
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAIN_STATE;    
        
        if(remainingDataLength > USBH_MSC_MPS_SIZE)
 8004836:	e034      	b.n	80048a2 <USBH_MSC_HandleBOTXfer+0x2b6>
          /* If value was 0, and successful transfer, then change the state */
          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
        }
        else
        {       
          USBH_BulkReceiveData (pdev,
 8004838:	f640 2314 	movw	r3, #2580	; 0xa14
 800483c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004840:	6819      	ldr	r1, [r3, #0]
 8004842:	f640 2310 	movw	r3, #2576	; 0xa10
 8004846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	b29a      	uxth	r2, r3
 800484e:	f644 0308 	movw	r3, #18440	; 0x4808
 8004852:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff fa19 	bl	8003c90 <USBH_BulkReceiveData>
	                        datapointer, 
			        remainingDataLength , 
			        MSC_Machine.hc_num_in);
          
          remainingDataLength = 0; /* Reset this value and keep in same state */
 800485e:	f640 2310 	movw	r3, #2576	; 0xa10
 8004862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
      if((URB_Status == URB_DONE) ||(USBH_MSC_BOTXferParam.BOTStateBkp != USBH_MSC_BOT_DATAIN_STATE))
      {
        BOTStallErrorCount = 0;
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAIN_STATE;    
        
        if(remainingDataLength > USBH_MSC_MPS_SIZE)
 800486c:	e019      	b.n	80048a2 <USBH_MSC_HandleBOTXfer+0x2b6>
			        MSC_Machine.hc_num_in);
          
          remainingDataLength = 0; /* Reset this value and keep in same state */
        }
      }
      else if(URB_Status == URB_STALL)
 800486e:	7bbb      	ldrb	r3, [r7, #14]
 8004870:	2b04      	cmp	r3, #4
 8004872:	f040 819f 	bne.w	8004bb4 <USBH_MSC_HandleBOTXfer+0x5c8>
      {
        /* This is Data Stage STALL Condition */
        
        error_direction = USBH_MSC_DIR_IN;
 8004876:	f640 2318 	movw	r3, #2584	; 0xa18
 800487a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
 8004884:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004888:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800488c:	f04f 0207 	mov.w	r2, #7
 8004890:	711a      	strb	r2, [r3, #4]
        4. The host shall attempt to receive a CSW.
        
        USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
        state after the ClearFeature Command is issued.
        */
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
 8004892:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004896:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800489a:	f04f 0205 	mov.w	r2, #5
 800489e:	715a      	strb	r2, [r3, #5]
        
      }     
      break;   
 80048a0:	e188      	b.n	8004bb4 <USBH_MSC_HandleBOTXfer+0x5c8>
 80048a2:	e187      	b.n	8004bb4 <USBH_MSC_HandleBOTXfer+0x5c8>
      
      
    case USBH_MSC_BOT_DATAOUT_STATE:
      /* BOT DATA OUT stage */
      URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);       
 80048a4:	f644 0308 	movw	r3, #18440	; 0x4808
 80048a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4619      	mov	r1, r3
 80048b2:	f7fc fec1 	bl	8001638 <HCD_GetURB_State>
 80048b6:	4603      	mov	r3, r0
 80048b8:	73bb      	strb	r3, [r7, #14]
      if(URB_Status == URB_DONE)
 80048ba:	7bbb      	ldrb	r3, [r7, #14]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d167      	bne.n	8004990 <USBH_MSC_HandleBOTXfer+0x3a4>
      {
        BOTStallErrorCount = 0;
 80048c0:	f640 230c 	movw	r3, #2572	; 0xa0c
 80048c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAOUT_STATE;    
 80048ce:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80048d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048d6:	f04f 0204 	mov.w	r2, #4
 80048da:	715a      	strb	r2, [r3, #5]
        if(remainingDataLength > USBH_MSC_MPS_SIZE)
 80048dc:	f640 2310 	movw	r3, #2576	; 0xa10
 80048e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d928      	bls.n	800493c <USBH_MSC_HandleBOTXfer+0x350>
        {
          USBH_BulkSendData (pdev,
 80048ea:	f640 2314 	movw	r3, #2580	; 0xa14
 80048ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	f644 0308 	movw	r3, #18440	; 0x4808
 80048f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4611      	mov	r1, r2
 8004902:	f04f 0240 	mov.w	r2, #64	; 0x40
 8004906:	f7ff f96f 	bl	8003be8 <USBH_BulkSendData>
                             datapointer, 
                             USBH_MSC_MPS_SIZE , 
                             MSC_Machine.hc_num_out);
          datapointer = datapointer + USBH_MSC_MPS_SIZE;
 800490a:	f640 2314 	movw	r3, #2580	; 0xa14
 800490e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004918:	f640 2314 	movw	r3, #2580	; 0xa14
 800491c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004920:	601a      	str	r2, [r3, #0]
          remainingDataLength = remainingDataLength - USBH_MSC_MPS_SIZE;
 8004922:	f640 2310 	movw	r3, #2576	; 0xa10
 8004926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8004930:	f640 2310 	movw	r3, #2576	; 0xa10
 8004934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004938:	601a      	str	r2, [r3, #0]
        */
        
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
        
      }
      break;
 800493a:	e13d      	b.n	8004bb8 <USBH_MSC_HandleBOTXfer+0x5cc>
                             USBH_MSC_MPS_SIZE , 
                             MSC_Machine.hc_num_out);
          datapointer = datapointer + USBH_MSC_MPS_SIZE;
          remainingDataLength = remainingDataLength - USBH_MSC_MPS_SIZE;
        }
        else if ( remainingDataLength == 0)
 800493c:	f640 2310 	movw	r3, #2576	; 0xa10
 8004940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <USBH_MSC_HandleBOTXfer+0x36e>
        {
          /* If value was 0, and successful transfer, then change the state */
          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
 800494a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800494e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004952:	f04f 0205 	mov.w	r2, #5
 8004956:	711a      	strb	r2, [r3, #4]
        */
        
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
        
      }
      break;
 8004958:	e12e      	b.n	8004bb8 <USBH_MSC_HandleBOTXfer+0x5cc>
          /* If value was 0, and successful transfer, then change the state */
          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
        }
        else
        {
          USBH_BulkSendData (pdev,
 800495a:	f640 2314 	movw	r3, #2580	; 0xa14
 800495e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	f640 2310 	movw	r3, #2576	; 0xa10
 8004968:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b29a      	uxth	r2, r3
 8004970:	f644 0308 	movw	r3, #18440	; 0x4808
 8004974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004978:	785b      	ldrb	r3, [r3, #1]
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff f934 	bl	8003be8 <USBH_BulkSendData>
	                     datapointer, 
			     remainingDataLength , 
			     MSC_Machine.hc_num_out);
          
          remainingDataLength = 0; /* Reset this value and keep in same state */   
 8004980:	f640 2310 	movw	r3, #2576	; 0xa10
 8004984:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
        */
        
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
        
      }
      break;
 800498e:	e113      	b.n	8004bb8 <USBH_MSC_HandleBOTXfer+0x5cc>
          
          remainingDataLength = 0; /* Reset this value and keep in same state */   
        }      
      }
      
      else if(URB_Status == URB_NOTREADY)
 8004990:	7bbb      	ldrb	r3, [r7, #14]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d112      	bne.n	80049bc <USBH_MSC_HandleBOTXfer+0x3d0>
      {
        USBH_BulkSendData (pdev,
 8004996:	f640 2314 	movw	r3, #2580	; 0xa14
 800499a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80049a4:	f644 0308 	movw	r3, #18440	; 0x4808
 80049a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4611      	mov	r1, r2
 80049b2:	f04f 0240 	mov.w	r2, #64	; 0x40
 80049b6:	f7ff f917 	bl	8003be8 <USBH_BulkSendData>
        */
        
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
        
      }
      break;
 80049ba:	e0fd      	b.n	8004bb8 <USBH_MSC_HandleBOTXfer+0x5cc>
	                   (datapointer - USBH_MSC_MPS_SIZE), 
			   USBH_MSC_MPS_SIZE , 
			   MSC_Machine.hc_num_out);
      }
      
      else if(URB_Status == URB_STALL)
 80049bc:	7bbb      	ldrb	r3, [r7, #14]
 80049be:	2b04      	cmp	r3, #4
 80049c0:	f040 80fa 	bne.w	8004bb8 <USBH_MSC_HandleBOTXfer+0x5cc>
      {
        error_direction = USBH_MSC_DIR_OUT;
 80049c4:	f640 2318 	movw	r3, #2584	; 0xa18
 80049c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049cc:	f04f 0201 	mov.w	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
 80049d2:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80049d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049da:	f04f 0208 	mov.w	r2, #8
 80049de:	711a      	strb	r2, [r3, #4]
        
        USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
        state after the ClearFeature Command is issued.
        */
        
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
 80049e0:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80049e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049e8:	f04f 0205 	mov.w	r2, #5
 80049ec:	715a      	strb	r2, [r3, #5]
        
      }
      break;
 80049ee:	e0e3      	b.n	8004bb8 <USBH_MSC_HandleBOTXfer+0x5cc>
    case USBH_MSC_RECEIVE_CSW_STATE:
      /* BOT CSW stage */     
        /* NOTE: We cannot reset the BOTStallErrorCount here as it may come from 
        the clearFeature from previous command */
        
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
 80049f0:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80049f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049f8:	f04f 0205 	mov.w	r2, #5
 80049fc:	715a      	strb	r2, [r3, #5]
        
        USBH_MSC_BOTXferParam.pRxTxBuff = USBH_MSC_CSWData.CSWArray;
 80049fe:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a06:	f244 72c8 	movw	r2, #18376	; 0x47c8
 8004a0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004a0e:	609a      	str	r2, [r3, #8]
        USBH_MSC_BOTXferParam.DataLength = USBH_MSC_CSW_MAX_LENGTH;
 8004a10:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a18:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8004a1c:	819a      	strh	r2, [r3, #12]
        
        for(index = USBH_MSC_CSW_LENGTH; index != 0; index--)
 8004a1e:	f04f 030d 	mov.w	r3, #13
 8004a22:	73fb      	strb	r3, [r7, #15]
 8004a24:	e00b      	b.n	8004a3e <USBH_MSC_HandleBOTXfer+0x452>
        {
          USBH_MSC_CSWData.CSWArray[index] = 0;
 8004a26:	7bfa      	ldrb	r2, [r7, #15]
 8004a28:	f244 73c8 	movw	r3, #18376	; 0x47c8
 8004a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a30:	f04f 0100 	mov.w	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
        
        USBH_MSC_BOTXferParam.pRxTxBuff = USBH_MSC_CSWData.CSWArray;
        USBH_MSC_BOTXferParam.DataLength = USBH_MSC_CSW_MAX_LENGTH;
        
        for(index = USBH_MSC_CSW_LENGTH; index != 0; index--)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f0      	bne.n	8004a26 <USBH_MSC_HandleBOTXfer+0x43a>
        {
          USBH_MSC_CSWData.CSWArray[index] = 0;
        }
        
        USBH_MSC_CSWData.CSWArray[0] = 0;
 8004a44:	f244 73c8 	movw	r3, #18376	; 0x47c8
 8004a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
        
        USBH_BulkReceiveData (pdev,
 8004a52:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	f644 0308 	movw	r3, #18440	; 0x4808
 8004a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	4611      	mov	r1, r2
 8004a6a:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8004a6e:	f7ff f90f 	bl	8003c90 <USBH_BulkReceiveData>
                              USBH_MSC_BOTXferParam.pRxTxBuff, 
                              USBH_MSC_CSW_MAX_LENGTH , 
                              MSC_Machine.hc_num_in);
        USBH_MSC_BOTXferParam.BOTState = USBH_MSC_DECODE_CSW;    
 8004a72:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a7a:	f04f 0206 	mov.w	r2, #6
 8004a7e:	711a      	strb	r2, [r3, #4]

      break;
 8004a80:	e0a1      	b.n	8004bc6 <USBH_MSC_HandleBOTXfer+0x5da>
      
    case USBH_MSC_DECODE_CSW:
      URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
 8004a82:	f644 0308 	movw	r3, #18440	; 0x4808
 8004a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f7fc fdd2 	bl	8001638 <HCD_GetURB_State>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73bb      	strb	r3, [r7, #14]
      /* Decode CSW */
      if(URB_Status == URB_DONE)
 8004a98:	7bbb      	ldrb	r3, [r7, #14]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d123      	bne.n	8004ae6 <USBH_MSC_HandleBOTXfer+0x4fa>
      {
        BOTStallErrorCount = 0;
 8004a9e:	f640 230c 	movw	r3, #2572	; 0xa0c
 8004aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
 8004aac:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ab4:	f04f 0205 	mov.w	r2, #5
 8004ab8:	715a      	strb	r2, [r3, #5]
        
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateCurrent ;
 8004aba:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ac2:	789a      	ldrb	r2, [r3, #2]
 8004ac4:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004acc:	701a      	strb	r2, [r3, #0]
        
        USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_DecodeCSW(pdev , phost);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	f000 f8cd 	bl	8004c70 <USBH_MSC_DecodeCSW>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ae2:	73da      	strb	r2, [r3, #15]
      else if(URB_Status == URB_STALL)     
      {
        error_direction = USBH_MSC_DIR_IN;
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
      }
      break;
 8004ae4:	e06a      	b.n	8004bbc <USBH_MSC_HandleBOTXfer+0x5d0>
        
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateCurrent ;
        
        USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_DecodeCSW(pdev , phost);
      }
      else if(URB_Status == URB_STALL)     
 8004ae6:	7bbb      	ldrb	r3, [r7, #14]
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d167      	bne.n	8004bbc <USBH_MSC_HandleBOTXfer+0x5d0>
      {
        error_direction = USBH_MSC_DIR_IN;
 8004aec:	f640 2318 	movw	r3, #2584	; 0xa18
 8004af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
 8004afa:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b02:	f04f 0207 	mov.w	r2, #7
 8004b06:	711a      	strb	r2, [r3, #4]
      }
      break;
 8004b08:	e058      	b.n	8004bbc <USBH_MSC_HandleBOTXfer+0x5d0>
      
    case USBH_MSC_BOT_ERROR_IN: 
      status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_IN);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	6839      	ldr	r1, [r7, #0]
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f000 f85d 	bl	8004bd0 <USBH_MSC_BOT_Abort>
 8004b16:	4603      	mov	r3, r0
 8004b18:	733b      	strb	r3, [r7, #12]
      if (status == USBH_OK)
 8004b1a:	7b3b      	ldrb	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d119      	bne.n	8004b54 <USBH_MSC_HandleBOTXfer+0x568>
      {
        /* Check if the error was due in Both the directions */
        if (error_direction == USBH_MSC_BOTH_DIR)
 8004b20:	f640 2318 	movw	r3, #2584	; 0xa18
 8004b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d107      	bne.n	8004b3e <USBH_MSC_HandleBOTXfer+0x552>
        {/* If Both directions are Needed, Switch to OUT Direction */
          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_ERROR_OUT;
 8004b2e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b36:	f04f 0208 	mov.w	r2, #8
 8004b3a:	711a      	strb	r2, [r3, #4]
      else if (status == USBH_UNRECOVERED_ERROR)
      {
        /* This means that there is a STALL Error limit, Do Reset Recovery */
        USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
      }
      break;
 8004b3c:	e040      	b.n	8004bc0 <USBH_MSC_HandleBOTXfer+0x5d4>
        }
        else
        {
          /* Switch Back to the Original State, In many cases this will be 
          USBH_MSC_RECEIVE_CSW_STATE state */
          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;
 8004b3e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b46:	795a      	ldrb	r2, [r3, #5]
 8004b48:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b50:	711a      	strb	r2, [r3, #4]
      else if (status == USBH_UNRECOVERED_ERROR)
      {
        /* This means that there is a STALL Error limit, Do Reset Recovery */
        USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
      }
      break;
 8004b52:	e035      	b.n	8004bc0 <USBH_MSC_HandleBOTXfer+0x5d4>
          /* Switch Back to the Original State, In many cases this will be 
          USBH_MSC_RECEIVE_CSW_STATE state */
          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;
        }
      }
      else if (status == USBH_UNRECOVERED_ERROR)
 8004b54:	7b3b      	ldrb	r3, [r7, #12]
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d132      	bne.n	8004bc0 <USBH_MSC_HandleBOTXfer+0x5d4>
      {
        /* This means that there is a STALL Error limit, Do Reset Recovery */
        USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
 8004b5a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b62:	f04f 0202 	mov.w	r2, #2
 8004b66:	73da      	strb	r2, [r3, #15]
      }
      break;
 8004b68:	e02a      	b.n	8004bc0 <USBH_MSC_HandleBOTXfer+0x5d4>
      
    case USBH_MSC_BOT_ERROR_OUT: 
      status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_OUT);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	f04f 0201 	mov.w	r2, #1
 8004b72:	f000 f82d 	bl	8004bd0 <USBH_MSC_BOT_Abort>
 8004b76:	4603      	mov	r3, r0
 8004b78:	733b      	strb	r3, [r7, #12]
      if ( status == USBH_OK)
 8004b7a:	7b3b      	ldrb	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <USBH_MSC_HandleBOTXfer+0x5aa>
      { /* Switch Back to the Original State */
        USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;        
 8004b80:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b88:	795a      	ldrb	r2, [r3, #5]
 8004b8a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b92:	711a      	strb	r2, [r3, #4]
      else if (status == USBH_UNRECOVERED_ERROR)
      {
        /* This means that there is a STALL Error limit, Do Reset Recovery */
        USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
      }
      break;
 8004b94:	e016      	b.n	8004bc4 <USBH_MSC_HandleBOTXfer+0x5d8>
      status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_OUT);
      if ( status == USBH_OK)
      { /* Switch Back to the Original State */
        USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;        
      }
      else if (status == USBH_UNRECOVERED_ERROR)
 8004b96:	7b3b      	ldrb	r3, [r7, #12]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d113      	bne.n	8004bc4 <USBH_MSC_HandleBOTXfer+0x5d8>
      {
        /* This means that there is a STALL Error limit, Do Reset Recovery */
        USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
 8004b9c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ba4:	f04f 0202 	mov.w	r2, #2
 8004ba8:	73da      	strb	r2, [r3, #15]
      }
      break;
 8004baa:	e00b      	b.n	8004bc4 <USBH_MSC_HandleBOTXfer+0x5d8>
      
    default:      
      break;
 8004bac:	bf00      	nop
 8004bae:	e00a      	b.n	8004bc6 <USBH_MSC_HandleBOTXfer+0x5da>
      else if(URB_Status == URB_STALL)
      {
        error_direction = USBH_MSC_DIR_OUT;
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
      }
      break;
 8004bb0:	bf00      	nop
 8004bb2:	e008      	b.n	8004bc6 <USBH_MSC_HandleBOTXfer+0x5da>
        state after the ClearFeature Command is issued.
        */
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
        
      }     
      break;   
 8004bb4:	bf00      	nop
 8004bb6:	e006      	b.n	8004bc6 <USBH_MSC_HandleBOTXfer+0x5da>
        */
        
        USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
        
      }
      break;
 8004bb8:	bf00      	nop
 8004bba:	e004      	b.n	8004bc6 <USBH_MSC_HandleBOTXfer+0x5da>
      else if(URB_Status == URB_STALL)     
      {
        error_direction = USBH_MSC_DIR_IN;
        USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
      }
      break;
 8004bbc:	bf00      	nop
 8004bbe:	e002      	b.n	8004bc6 <USBH_MSC_HandleBOTXfer+0x5da>
      else if (status == USBH_UNRECOVERED_ERROR)
      {
        /* This means that there is a STALL Error limit, Do Reset Recovery */
        USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
      }
      break;
 8004bc0:	bf00      	nop
 8004bc2:	e000      	b.n	8004bc6 <USBH_MSC_HandleBOTXfer+0x5da>
      else if (status == USBH_UNRECOVERED_ERROR)
      {
        /* This means that there is a STALL Error limit, Do Reset Recovery */
        USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
      }
      break;
 8004bc4:	bf00      	nop
      
    default:      
      break;
    }
  }
}
 8004bc6:	f107 0710 	add.w	r7, r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop

08004bd0 <USBH_MSC_BOT_Abort>:
* @retval None
*/
USBH_Status USBH_MSC_BOT_Abort(USB_OTG_CORE_HANDLE *pdev, 
                               USBH_HOST *phost,
                               uint8_t direction)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	71fb      	strb	r3, [r7, #7]
  USBH_Status status;
  
  status = USBH_BUSY;
 8004bde:	f04f 0301 	mov.w	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
  
  switch (direction)
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <USBH_MSC_BOT_Abort+0x20>
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d011      	beq.n	8004c12 <USBH_MSC_BOT_Abort+0x42>
 8004bee:	e021      	b.n	8004c34 <USBH_MSC_BOT_Abort+0x64>
  {
  case USBH_MSC_DIR_IN :
    /* send ClrFeture on Bulk IN endpoint */
    status = USBH_ClrFeature(pdev,
 8004bf0:	f644 0308 	movw	r3, #18440	; 0x4808
 8004bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bf8:	78da      	ldrb	r2, [r3, #3]
 8004bfa:	f644 0308 	movw	r3, #18440	; 0x4808
 8004bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	f7ff fa98 	bl	800413c <USBH_ClrFeature>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	75fb      	strb	r3, [r7, #23]
                             phost,
                             MSC_Machine.MSBulkInEp,
                             MSC_Machine.hc_num_in);
    
    break;
 8004c10:	e011      	b.n	8004c36 <USBH_MSC_BOT_Abort+0x66>
    
  case USBH_MSC_DIR_OUT :
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(pdev, 
 8004c12:	f644 0308 	movw	r3, #18440	; 0x4808
 8004c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c1a:	789a      	ldrb	r2, [r3, #2]
 8004c1c:	f644 0308 	movw	r3, #18440	; 0x4808
 8004c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	f7ff fa87 	bl	800413c <USBH_ClrFeature>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	75fb      	strb	r3, [r7, #23]
                             phost,
                             MSC_Machine.MSBulkOutEp,
                             MSC_Machine.hc_num_out);
    break;
 8004c32:	e000      	b.n	8004c36 <USBH_MSC_BOT_Abort+0x66>
    
  default:
    break;
 8004c34:	bf00      	nop
  }
  
  BOTStallErrorCount++; /* Check Continous Number of times, STALL has Occured */ 
 8004c36:	f640 230c 	movw	r3, #2572	; 0xa0c
 8004c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f103 0201 	add.w	r2, r3, #1
 8004c44:	f640 230c 	movw	r3, #2572	; 0xa0c
 8004c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c4c:	601a      	str	r2, [r3, #0]
  if (BOTStallErrorCount > MAX_BULK_STALL_COUNT_LIMIT )
 8004c4e:	f640 230c 	movw	r3, #2572	; 0xa0c
 8004c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d902      	bls.n	8004c62 <USBH_MSC_BOT_Abort+0x92>
  {
    status = USBH_UNRECOVERED_ERROR;
 8004c5c:	f04f 0304 	mov.w	r3, #4
 8004c60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	f107 0718 	add.w	r7, r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop

08004c70 <USBH_MSC_DecodeCSW>:
*     2. the CSW is 13 (Dh) bytes in length,
*     3. dCSWTag matches the dCBWTag from the corresponding CBW.
*/

uint8_t USBH_MSC_DecodeCSW(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint32_t dataXferCount = 0;
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	60bb      	str	r3, [r7, #8]
  status = USBH_MSC_FAIL;
 8004c80:	f04f 0301 	mov.w	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
  
  if(HCD_IsDeviceConnected(pdev))
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fc fcb6 	bl	80015f8 <HCD_IsDeviceConnected>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d04c      	beq.n	8004d2c <USBH_MSC_DecodeCSW+0xbc>
  {
    /*Checking if the transfer length is diffrent than 13*/
    dataXferCount = HCD_GetXferCnt(pdev, MSC_Machine.hc_num_in); 
 8004c92:	f644 0308 	movw	r3, #18440	; 0x4808
 8004c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f7fc fcdc 	bl	800165c <HCD_GetXferCnt>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	60bb      	str	r3, [r7, #8]
    
    if(dataXferCount != USBH_MSC_CSW_LENGTH)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b0d      	cmp	r3, #13
 8004cac:	d003      	beq.n	8004cb6 <USBH_MSC_DecodeCSW+0x46>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/
      
      
      status = USBH_MSC_PHASE_ERROR;
 8004cae:	f04f 0302 	mov.w	r3, #2
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e03a      	b.n	8004d2c <USBH_MSC_DecodeCSW+0xbc>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(USBH_MSC_CSWData.field.CSWSignature == USBH_MSC_BOT_CSW_SIGNATURE)
 8004cb6:	f244 73c8 	movw	r3, #18376	; 0x47c8
 8004cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	f245 3355 	movw	r3, #21333	; 0x5355
 8004cc4:	f2c5 3342 	movt	r3, #21314	; 0x5342
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d12c      	bne.n	8004d26 <USBH_MSC_DecodeCSW+0xb6>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(USBH_MSC_CSWData.field.CSWTag == USBH_MSC_CBWData.field.CBWTag)
 8004ccc:	f244 73c8 	movw	r3, #18376	; 0x47c8
 8004cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8004cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d123      	bne.n	8004d2c <USBH_MSC_DecodeCSW+0xbc>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */
          
          if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_OK) 
 8004ce4:	f244 73c8 	movw	r3, #18376	; 0x47c8
 8004ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cec:	7b1b      	ldrb	r3, [r3, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <USBH_MSC_DecodeCSW+0x8a>
            (12) Ho = Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            
            */
            
            status = USBH_MSC_OK;
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e018      	b.n	8004d2c <USBH_MSC_DecodeCSW+0xbc>
          }
          else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_FAIL)
 8004cfa:	f244 73c8 	movw	r3, #18376	; 0x47c8
 8004cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d02:	7b1b      	ldrb	r3, [r3, #12]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d103      	bne.n	8004d10 <USBH_MSC_DecodeCSW+0xa0>
          {
            status = USBH_MSC_FAIL;
 8004d08:	f04f 0301 	mov.w	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
 8004d0e:	e00d      	b.n	8004d2c <USBH_MSC_DecodeCSW+0xbc>
          }
          
          else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_PHASE_ERROR)
 8004d10:	f244 73c8 	movw	r3, #18376	; 0x47c8
 8004d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d18:	7b1b      	ldrb	r3, [r3, #12]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d106      	bne.n	8004d2c <USBH_MSC_DecodeCSW+0xbc>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            */
            
            status = USBH_MSC_PHASE_ERROR;
 8004d1e:	f04f 0302 	mov.w	r3, #2
 8004d22:	73fb      	strb	r3, [r7, #15]
 8004d24:	e002      	b.n	8004d2c <USBH_MSC_DecodeCSW+0xbc>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */
        
        status = USBH_MSC_PHASE_ERROR;
 8004d26:	f04f 0302 	mov.w	r3, #2
 8004d2a:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/
  }
  
  USBH_MSC_BOTXferParam.BOTXferStatus  = status;
 8004d2c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	73da      	strb	r2, [r3, #15]
  return status;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f107 0710 	add.w	r7, r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <USBH_MSC_InterfaceInit>:
  * @param  hdev: Selected device property
  * @retval USBH_Status : Status of class request handled.
  */
static USBH_Status USBH_MSC_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, 
                                        void *phost)
{	 
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  USBH_HOST *pphost = phost;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	60fb      	str	r3, [r7, #12]
  
  if((pphost->device_prop.Itf_Desc[0].bInterfaceClass == MSC_CLASS) && \
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	f040 80a7 	bne.w	8004eac <USBH_MSC_InterfaceInit+0x168>
     (pphost->device_prop.Itf_Desc[0].bInterfaceProtocol == MSC_PROTOCOL))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
static USBH_Status USBH_MSC_InterfaceInit ( USB_OTG_CORE_HANDLE *pdev, 
                                        void *phost)
{	 
  USBH_HOST *pphost = phost;
  
  if((pphost->device_prop.Itf_Desc[0].bInterfaceClass == MSC_CLASS) && \
 8004d64:	2b50      	cmp	r3, #80	; 0x50
 8004d66:	f040 80a1 	bne.w	8004eac <USBH_MSC_InterfaceInit+0x168>
     (pphost->device_prop.Itf_Desc[0].bInterfaceProtocol == MSC_PROTOCOL))
  {
    if(pphost->device_prop.Ep_Desc[0][0].bEndpointAddress & 0x80)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	b25b      	sxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	da10      	bge.n	8004d9a <USBH_MSC_InterfaceInit+0x56>
    {
      MSC_Machine.MSBulkInEp = (pphost->device_prop.Ep_Desc[0][0].bEndpointAddress);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8004d7e:	f644 0308 	movw	r3, #18440	; 0x4808
 8004d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d86:	70da      	strb	r2, [r3, #3]
      MSC_Machine.MSBulkInEpSize  = pphost->device_prop.Ep_Desc[0][0].wMaxPacketSize;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004d8e:	f644 0308 	movw	r3, #18440	; 0x4808
 8004d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d96:	809a      	strh	r2, [r3, #4]
 8004d98:	e00f      	b.n	8004dba <USBH_MSC_InterfaceInit+0x76>
    }
    else
    {
      MSC_Machine.MSBulkOutEp = (pphost->device_prop.Ep_Desc[0][0].bEndpointAddress);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8004da0:	f644 0308 	movw	r3, #18440	; 0x4808
 8004da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004da8:	709a      	strb	r2, [r3, #2]
      MSC_Machine.MSBulkOutEpSize  = pphost->device_prop.Ep_Desc[0] [0].wMaxPacketSize;      
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004db0:	f644 0308 	movw	r3, #18440	; 0x4808
 8004db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004db8:	80da      	strh	r2, [r3, #6]
    }
    
    if(pphost->device_prop.Ep_Desc[0][1].bEndpointAddress & 0x80)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	da10      	bge.n	8004dea <USBH_MSC_InterfaceInit+0xa6>
    {
      MSC_Machine.MSBulkInEp = (pphost->device_prop.Ep_Desc[0][1].bEndpointAddress);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 8004dce:	f644 0308 	movw	r3, #18440	; 0x4808
 8004dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004dd6:	70da      	strb	r2, [r3, #3]
      MSC_Machine.MSBulkInEpSize  = pphost->device_prop.Ep_Desc[0][1].wMaxPacketSize;      
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dde:	f644 0308 	movw	r3, #18440	; 0x4808
 8004de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004de6:	809a      	strh	r2, [r3, #4]
 8004de8:	e00f      	b.n	8004e0a <USBH_MSC_InterfaceInit+0xc6>
    }
    else
    {
      MSC_Machine.MSBulkOutEp = (pphost->device_prop.Ep_Desc[0][1].bEndpointAddress);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 8004df0:	f644 0308 	movw	r3, #18440	; 0x4808
 8004df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004df8:	709a      	strb	r2, [r3, #2]
      MSC_Machine.MSBulkOutEpSize  = pphost->device_prop.Ep_Desc[0][1].wMaxPacketSize;      
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e00:	f644 0308 	movw	r3, #18440	; 0x4808
 8004e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e08:	80da      	strh	r2, [r3, #6]
    }
    
    MSC_Machine.hc_num_out = USBH_Alloc_Channel(pdev, 
 8004e0a:	f644 0308 	movw	r3, #18440	; 0x4808
 8004e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e12:	789b      	ldrb	r3, [r3, #2]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4619      	mov	r1, r3
 8004e18:	f7fe fd1c 	bl	8003854 <USBH_Alloc_Channel>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f644 0308 	movw	r3, #18440	; 0x4808
 8004e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e28:	705a      	strb	r2, [r3, #1]
                                                MSC_Machine.MSBulkOutEp);
    MSC_Machine.hc_num_in = USBH_Alloc_Channel(pdev,
 8004e2a:	f644 0308 	movw	r3, #18440	; 0x4808
 8004e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e32:	78db      	ldrb	r3, [r3, #3]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4619      	mov	r1, r3
 8004e38:	f7fe fd0c 	bl	8003854 <USBH_Alloc_Channel>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f644 0308 	movw	r3, #18440	; 0x4808
 8004e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e48:	701a      	strb	r2, [r3, #0]
                                                MSC_Machine.MSBulkInEp);  
    
    /* Open the new channels */
    USBH_Open_Channel  (pdev,
 8004e4a:	f644 0308 	movw	r3, #18440	; 0x4808
 8004e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e52:	7859      	ldrb	r1, [r3, #1]
                        MSC_Machine.hc_num_out,
                        pphost->device_prop.address,
 8004e54:	68fb      	ldr	r3, [r7, #12]
                                                MSC_Machine.MSBulkOutEp);
    MSC_Machine.hc_num_in = USBH_Alloc_Channel(pdev,
                                                MSC_Machine.MSBulkInEp);  
    
    /* Open the new channels */
    USBH_Open_Channel  (pdev,
 8004e56:	f893 2020 	ldrb.w	r2, [r3, #32]
                        MSC_Machine.hc_num_out,
                        pphost->device_prop.address,
                        pphost->device_prop.speed,
 8004e5a:	68fb      	ldr	r3, [r7, #12]
                                                MSC_Machine.MSBulkOutEp);
    MSC_Machine.hc_num_in = USBH_Alloc_Channel(pdev,
                                                MSC_Machine.MSBulkInEp);  
    
    /* Open the new channels */
    USBH_Open_Channel  (pdev,
 8004e5c:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8004e60:	f644 0308 	movw	r3, #18440	; 0x4808
 8004e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e68:	88db      	ldrh	r3, [r3, #6]
 8004e6a:	f04f 0002 	mov.w	r0, #2
 8004e6e:	9000      	str	r0, [sp, #0]
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4623      	mov	r3, r4
 8004e76:	f7fe fc1b 	bl	80036b0 <USBH_Open_Channel>
                        pphost->device_prop.address,
                        pphost->device_prop.speed,
                        EP_TYPE_BULK,
                        MSC_Machine.MSBulkOutEpSize);  
    
    USBH_Open_Channel  (pdev,
 8004e7a:	f644 0308 	movw	r3, #18440	; 0x4808
 8004e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e82:	7819      	ldrb	r1, [r3, #0]
                        MSC_Machine.hc_num_in,
                        pphost->device_prop.address,
 8004e84:	68fb      	ldr	r3, [r7, #12]
                        pphost->device_prop.address,
                        pphost->device_prop.speed,
                        EP_TYPE_BULK,
                        MSC_Machine.MSBulkOutEpSize);  
    
    USBH_Open_Channel  (pdev,
 8004e86:	f893 2020 	ldrb.w	r2, [r3, #32]
                        MSC_Machine.hc_num_in,
                        pphost->device_prop.address,
                        pphost->device_prop.speed,
 8004e8a:	68fb      	ldr	r3, [r7, #12]
                        pphost->device_prop.address,
                        pphost->device_prop.speed,
                        EP_TYPE_BULK,
                        MSC_Machine.MSBulkOutEpSize);  
    
    USBH_Open_Channel  (pdev,
 8004e8c:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8004e90:	f644 0308 	movw	r3, #18440	; 0x4808
 8004e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e98:	889b      	ldrh	r3, [r3, #4]
 8004e9a:	f04f 0002 	mov.w	r0, #2
 8004e9e:	9000      	str	r0, [sp, #0]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	f7fe fc03 	bl	80036b0 <USBH_Open_Channel>
 8004eaa:	e004      	b.n	8004eb6 <USBH_MSC_InterfaceInit+0x172>
    
  }
  
  else
  {
    pphost->usr_cb->USBH_USR_DeviceNotSupported(); 
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	4798      	blx	r3
  }
  
  return USBH_OK ;
 8004eb6:	f04f 0300 	mov.w	r3, #0
 
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f107 0714 	add.w	r7, r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd90      	pop	{r4, r7, pc}

08004ec4 <USBH_MSC_InterfaceDeInit>:
  * @param  hdev: Selected device property
  * @retval None
  */
void USBH_MSC_InterfaceDeInit ( USB_OTG_CORE_HANDLE *pdev,
                                void *phost)
{	
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  if ( MSC_Machine.hc_num_out)
 8004ece:	f644 0308 	movw	r3, #18440	; 0x4808
 8004ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d018      	beq.n	8004f0e <USBH_MSC_InterfaceDeInit+0x4a>
  {
    USB_OTG_HC_Halt(pdev, MSC_Machine.hc_num_out);
 8004edc:	f644 0308 	movw	r3, #18440	; 0x4808
 8004ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f7fc fa2d 	bl	8001348 <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, MSC_Machine.hc_num_out);
 8004eee:	f644 0308 	movw	r3, #18440	; 0x4808
 8004ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4619      	mov	r1, r3
 8004efc:	f7fe fcd0 	bl	80038a0 <USBH_Free_Channel>
    MSC_Machine.hc_num_out = 0;     /* Reset the Channel as Free */
 8004f00:	f644 0308 	movw	r3, #18440	; 0x4808
 8004f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	705a      	strb	r2, [r3, #1]
  }
   
  if ( MSC_Machine.hc_num_in)
 8004f0e:	f644 0308 	movw	r3, #18440	; 0x4808
 8004f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d018      	beq.n	8004f4e <USBH_MSC_InterfaceDeInit+0x8a>
  {
    USB_OTG_HC_Halt(pdev, MSC_Machine.hc_num_in);
 8004f1c:	f644 0308 	movw	r3, #18440	; 0x4808
 8004f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f7fc fa0d 	bl	8001348 <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, MSC_Machine.hc_num_in);
 8004f2e:	f644 0308 	movw	r3, #18440	; 0x4808
 8004f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f7fe fcb0 	bl	80038a0 <USBH_Free_Channel>
    MSC_Machine.hc_num_in = 0;     /* Reset the Channel as Free */
 8004f40:	f644 0308 	movw	r3, #18440	; 0x4808
 8004f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
  } 
}
 8004f4e:	f107 0708 	add.w	r7, r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop

08004f58 <USBH_MSC_ClassRequest>:
  * @retval USBH_Status : Status of class request handled.
  */

static USBH_Status USBH_MSC_ClassRequest(USB_OTG_CORE_HANDLE *pdev , 
                                        void *phost)
{   
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  
  USBH_Status status = USBH_OK ;
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	73fb      	strb	r3, [r7, #15]
  USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_INIT_STATE;
 8004f68:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
  
  return status; 
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f107 0714 	add.w	r7, r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <USBH_MSC_Handle>:
  * @retval USBH_Status
  */

static USBH_Status USBH_MSC_Handle(USB_OTG_CORE_HANDLE *pdev , 
                                   void   *phost)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  USBH_HOST *pphost = phost;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	613b      	str	r3, [r7, #16]
    
  USBH_Status status = USBH_BUSY;
 8004f92:	f04f 0301 	mov.w	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
  uint8_t mscStatus = USBH_MSC_BUSY;
 8004f98:	f04f 0303 	mov.w	r3, #3
 8004f9c:	73fb      	strb	r3, [r7, #15]
  uint8_t appliStatus = 0;
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	73bb      	strb	r3, [r7, #14]
  
  static uint8_t maxLunExceed = FALSE;
  
    
  if(HCD_IsDeviceConnected(pdev))
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fc fb27 	bl	80015f8 <HCD_IsDeviceConnected>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 815d 	beq.w	800526c <USBH_MSC_Handle+0x2e8>
  {   
    switch(USBH_MSC_BOTXferParam.MSCState)
 8004fb2:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b0a      	cmp	r3, #10
 8004fbe:	f200 814c 	bhi.w	800525a <USBH_MSC_Handle+0x2d6>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <USBH_MSC_Handle+0x44>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004ff5 	.word	0x08004ff5
 8004fcc:	0800500b 	.word	0x0800500b
 8004fd0:	08005051 	.word	0x08005051
 8004fd4:	08005127 	.word	0x08005127
 8004fd8:	08005165 	.word	0x08005165
 8004fdc:	080051a3 	.word	0x080051a3
 8004fe0:	080051e1 	.word	0x080051e1
 8004fe4:	08005217 	.word	0x08005217
 8004fe8:	08005221 	.word	0x08005221
 8004fec:	080050e5 	.word	0x080050e5
 8004ff0:	08005253 	.word	0x08005253
    {
    case USBH_MSC_BOT_INIT_STATE:
      USBH_MSC_Init(pdev);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fabd 	bl	8004574 <USBH_MSC_Init>
      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_RESET;  
 8004ffa:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8004ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005002:	f04f 0201 	mov.w	r2, #1
 8005006:	701a      	strb	r2, [r3, #0]
      break;
 8005008:	e130      	b.n	800526c <USBH_MSC_Handle+0x2e8>
      
    case USBH_MSC_BOT_RESET:   
      /* Issue BOT RESET request */
      status = USBH_MSC_BOTReset(pdev, phost);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	f000 f933 	bl	8005278 <USBH_MSC_BOTReset>
 8005012:	4603      	mov	r3, r0
 8005014:	75fb      	strb	r3, [r7, #23]
      if(status == USBH_OK )
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <USBH_MSC_Handle+0xa6>
      {
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_GET_MAX_LUN;
 800501c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005020:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005024:	f04f 0202 	mov.w	r2, #2
 8005028:	701a      	strb	r2, [r3, #0]
      }
      
      if(status == USBH_NOT_SUPPORTED )
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b03      	cmp	r3, #3
 800502e:	f040 8116 	bne.w	800525e <USBH_MSC_Handle+0x2da>
      {
       /* If the Command has failed, then we need to move to Next State, after
        STALL condition is cleared by Control-Transfer */
        USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_GET_MAX_LUN; 
 8005032:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005036:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800503a:	f04f 0202 	mov.w	r2, #2
 800503e:	705a      	strb	r2, [r3, #1]

        /* a Clear Feature should be issued here */
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_CTRL_ERROR_STATE;
 8005040:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005044:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005048:	f04f 0209 	mov.w	r2, #9
 800504c:	701a      	strb	r2, [r3, #0]
      }  
      break;
 800504e:	e106      	b.n	800525e <USBH_MSC_Handle+0x2da>
      
    case USBH_MSC_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_GETMaxLUN(pdev, phost);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	f000 f938 	bl	80052c8 <USBH_MSC_GETMaxLUN>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]
      
      if(status == USBH_OK )
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d12d      	bne.n	80050be <USBH_MSC_Handle+0x13a>
      {
        MSC_Machine.maxLun = *(MSC_Machine.buff) ;
 8005062:	f644 0308 	movw	r3, #18440	; 0x4808
 8005066:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800506a:	7a1a      	ldrb	r2, [r3, #8]
 800506c:	f644 0308 	movw	r3, #18440	; 0x4808
 8005070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        /* If device has more that one logical unit then it is not supported */
        if((MSC_Machine.maxLun > 0) && (maxLunExceed == FALSE))
 8005078:	f644 0308 	movw	r3, #18440	; 0x4808
 800507c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005080:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005084:	2b00      	cmp	r3, #0
 8005086:	d013      	beq.n	80050b0 <USBH_MSC_Handle+0x12c>
 8005088:	f640 231a 	movw	r3, #2586	; 0xa1a
 800508c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10c      	bne.n	80050b0 <USBH_MSC_Handle+0x12c>
        {
          maxLunExceed = TRUE;
 8005096:	f640 231a 	movw	r3, #2586	; 0xa1a
 800509a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800509e:	f04f 0201 	mov.w	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
          pphost->usr_cb->USBH_USR_DeviceNotSupported();
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	4798      	blx	r3
          
          break;
 80050ae:	e0dd      	b.n	800526c <USBH_MSC_Handle+0x2e8>
        }
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_TEST_UNIT_READY;
 80050b0:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80050b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050b8:	f04f 0203 	mov.w	r2, #3
 80050bc:	701a      	strb	r2, [r3, #0]
      }
      
      if(status == USBH_NOT_SUPPORTED )
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	f040 80ce 	bne.w	8005262 <USBH_MSC_Handle+0x2de>
      {
               /* If the Command has failed, then we need to move to Next State, after
        STALL condition is cleared by Control-Transfer */
        USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_TEST_UNIT_READY; 
 80050c6:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80050ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050ce:	f04f 0203 	mov.w	r2, #3
 80050d2:	705a      	strb	r2, [r3, #1]
        
        /* a Clear Feature should be issued here */
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_CTRL_ERROR_STATE;
 80050d4:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80050d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050dc:	f04f 0209 	mov.w	r2, #9
 80050e0:	701a      	strb	r2, [r3, #0]
      }    
      break;
 80050e2:	e0be      	b.n	8005262 <USBH_MSC_Handle+0x2de>
    case USBH_MSC_CTRL_ERROR_STATE:
      /* Issue Clearfeature request */
      status = USBH_ClrFeature(pdev,
                               phost,
                               0x00,
                               pphost->Control.hc_num_out);
 80050e4:	693b      	ldr	r3, [r7, #16]
      }    
      break;
      
    case USBH_MSC_CTRL_ERROR_STATE:
      /* Issue Clearfeature request */
      status = USBH_ClrFeature(pdev,
 80050e6:	795b      	ldrb	r3, [r3, #5]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f7ff f824 	bl	800413c <USBH_ClrFeature>
 80050f4:	4603      	mov	r3, r0
 80050f6:	75fb      	strb	r3, [r7, #23]
                               phost,
                               0x00,
                               pphost->Control.hc_num_out);
      if(status == USBH_OK )
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f040 80b3 	bne.w	8005266 <USBH_MSC_Handle+0x2e2>
      {
        /* If GetMaxLun Request not support, assume Single LUN configuration */
        MSC_Machine.maxLun = 0;  
 8005100:	f644 0308 	movw	r3, #18440	; 0x4808
 8005104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateBkp;     
 8005110:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005114:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005118:	785a      	ldrb	r2, [r3, #1]
 800511a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800511e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005122:	701a      	strb	r2, [r3, #0]
      }
      break;  
 8005124:	e09f      	b.n	8005266 <USBH_MSC_Handle+0x2e2>
      
    case USBH_MSC_TEST_UNIT_READY:
      /* Issue SCSI command TestUnitReady */ 
      mscStatus = USBH_MSC_TestUnitReady(pdev);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa9a 	bl	8005660 <USBH_MSC_TestUnitReady>
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]
      
      if(mscStatus == USBH_MSC_OK )
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d111      	bne.n	800515a <USBH_MSC_Handle+0x1d6>
      {
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_READ_CAPACITY10;
 8005136:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800513a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800513e:	f04f 0204 	mov.w	r2, #4
 8005142:	701a      	strb	r2, [r3, #0]
        MSCErrorCount = 0;
 8005144:	f640 2319 	movw	r3, #2585	; 0xa19
 8005148:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        USBH_MSC_ErrorHandle(mscStatus);
      } 
      break;
 8005158:	e088      	b.n	800526c <USBH_MSC_Handle+0x2e8>
        MSCErrorCount = 0;
        status = USBH_OK;
      }
      else
      {
        USBH_MSC_ErrorHandle(mscStatus);
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f8db 	bl	8005318 <USBH_MSC_ErrorHandle>
      } 
      break;
 8005162:	e083      	b.n	800526c <USBH_MSC_Handle+0x2e8>
      
    case USBH_MSC_READ_CAPACITY10:
      /* Issue READ_CAPACITY10 SCSI command */
      mscStatus = USBH_MSC_ReadCapacity10(pdev);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fb39 	bl	80057dc <USBH_MSC_ReadCapacity10>
 800516a:	4603      	mov	r3, r0
 800516c:	73fb      	strb	r3, [r7, #15]
      if(mscStatus == USBH_MSC_OK )
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d111      	bne.n	8005198 <USBH_MSC_Handle+0x214>
      {
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_MODE_SENSE6;
 8005174:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005178:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800517c:	f04f 0205 	mov.w	r2, #5
 8005180:	701a      	strb	r2, [r3, #0]
        MSCErrorCount = 0;
 8005182:	f640 2319 	movw	r3, #2585	; 0xa19
 8005186:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        USBH_MSC_ErrorHandle(mscStatus);
      }
      break;
 8005196:	e069      	b.n	800526c <USBH_MSC_Handle+0x2e8>
        MSCErrorCount = 0;
        status = USBH_OK;
      }
      else
      {
        USBH_MSC_ErrorHandle(mscStatus);
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 f8bc 	bl	8005318 <USBH_MSC_ErrorHandle>
      }
      break;
 80051a0:	e064      	b.n	800526c <USBH_MSC_Handle+0x2e8>

    case USBH_MSC_MODE_SENSE6:
      /* Issue ModeSense6 SCSI command for detecting if device is write-protected */
      mscStatus = USBH_MSC_ModeSense6(pdev);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fc08 	bl	80059b8 <USBH_MSC_ModeSense6>
 80051a8:	4603      	mov	r3, r0
 80051aa:	73fb      	strb	r3, [r7, #15]
      if(mscStatus == USBH_MSC_OK )
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d111      	bne.n	80051d6 <USBH_MSC_Handle+0x252>
      {
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_DEFAULT_APPLI_STATE;
 80051b2:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80051b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051ba:	f04f 0208 	mov.w	r2, #8
 80051be:	701a      	strb	r2, [r3, #0]
        MSCErrorCount = 0;
 80051c0:	f640 2319 	movw	r3, #2585	; 0xa19
 80051c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        USBH_MSC_ErrorHandle(mscStatus);
      }
      break;
 80051d4:	e04a      	b.n	800526c <USBH_MSC_Handle+0x2e8>
        MSCErrorCount = 0;
        status = USBH_OK;
      }
      else
      {
        USBH_MSC_ErrorHandle(mscStatus);
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 f89d 	bl	8005318 <USBH_MSC_ErrorHandle>
      }
      break;
 80051de:	e045      	b.n	800526c <USBH_MSC_Handle+0x2e8>
      
    case USBH_MSC_REQUEST_SENSE:
      /* Issue RequestSense SCSI command for retreiving error code */
      mscStatus = USBH_MSC_RequestSense(pdev);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fcc5 	bl	8005b70 <USBH_MSC_RequestSense>
 80051e6:	4603      	mov	r3, r0
 80051e8:	73fb      	strb	r3, [r7, #15]
      if(mscStatus == USBH_MSC_OK )
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10d      	bne.n	800520c <USBH_MSC_Handle+0x288>
      {
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateBkp;
 80051f0:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80051f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051f8:	785a      	ldrb	r2, [r3, #1]
 80051fa:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80051fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005202:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        USBH_MSC_ErrorHandle(mscStatus);
      }  
      break;
 800520a:	e02f      	b.n	800526c <USBH_MSC_Handle+0x2e8>
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateBkp;
        status = USBH_OK;
      }
      else
      {
        USBH_MSC_ErrorHandle(mscStatus);
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f882 	bl	8005318 <USBH_MSC_ErrorHandle>
      }  
      break;
 8005214:	e02a      	b.n	800526c <USBH_MSC_Handle+0x2e8>
      
    case USBH_MSC_BOT_USB_TRANSFERS:
      /* Process the BOT state machine */
      USBH_MSC_HandleBOTXfer(pdev , phost);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	f7ff f9e7 	bl	80045ec <USBH_MSC_HandleBOTXfer>
      break;
 800521e:	e025      	b.n	800526c <USBH_MSC_Handle+0x2e8>
    
    case USBH_MSC_DEFAULT_APPLI_STATE:
      /* Process Application callback for MSC */
      appliStatus = pphost->usr_cb->USBH_USR_MSC_Application();
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005228:	4798      	blx	r3
 800522a:	4603      	mov	r3, r0
 800522c:	73bb      	strb	r3, [r7, #14]
      if(appliStatus == 0)
 800522e:	7bbb      	ldrb	r3, [r7, #14]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d107      	bne.n	8005244 <USBH_MSC_Handle+0x2c0>
      {
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_DEFAULT_APPLI_STATE;
 8005234:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005238:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800523c:	f04f 0208 	mov.w	r2, #8
 8005240:	701a      	strb	r2, [r3, #0]
      else if (appliStatus == 1) 
      {
        /* De-init requested from application layer */
        status =  USBH_APPLY_DEINIT;
      }
      break;
 8005242:	e012      	b.n	800526a <USBH_MSC_Handle+0x2e6>
      appliStatus = pphost->usr_cb->USBH_USR_MSC_Application();
      if(appliStatus == 0)
      {
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_DEFAULT_APPLI_STATE;
      }
      else if (appliStatus == 1) 
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d10f      	bne.n	800526a <USBH_MSC_Handle+0x2e6>
      {
        /* De-init requested from application layer */
        status =  USBH_APPLY_DEINIT;
 800524a:	f04f 0306 	mov.w	r3, #6
 800524e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005250:	e00b      	b.n	800526a <USBH_MSC_Handle+0x2e6>
      
    case USBH_MSC_UNRECOVERED_STATE:
      
      status = USBH_UNRECOVERED_ERROR;
 8005252:	f04f 0304 	mov.w	r3, #4
 8005256:	75fb      	strb	r3, [r7, #23]
      
      break;
 8005258:	e008      	b.n	800526c <USBH_MSC_Handle+0x2e8>
      
    default:
      break; 
 800525a:	bf00      	nop
 800525c:	e006      	b.n	800526c <USBH_MSC_Handle+0x2e8>
        USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_GET_MAX_LUN; 

        /* a Clear Feature should be issued here */
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_CTRL_ERROR_STATE;
      }  
      break;
 800525e:	bf00      	nop
 8005260:	e004      	b.n	800526c <USBH_MSC_Handle+0x2e8>
        USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_TEST_UNIT_READY; 
        
        /* a Clear Feature should be issued here */
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_CTRL_ERROR_STATE;
      }    
      break;
 8005262:	bf00      	nop
 8005264:	e002      	b.n	800526c <USBH_MSC_Handle+0x2e8>
        /* If GetMaxLun Request not support, assume Single LUN configuration */
        MSC_Machine.maxLun = 0;  
        
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateBkp;     
      }
      break;  
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <USBH_MSC_Handle+0x2e8>
      else if (appliStatus == 1) 
      {
        /* De-init requested from application layer */
        status =  USBH_APPLY_DEINIT;
      }
      break;
 800526a:	bf00      	nop
    default:
      break; 
      
    }
  }
   return status;
 800526c:	7dfb      	ldrb	r3, [r7, #23]
}
 800526e:	4618      	mov	r0, r3
 8005270:	f107 0718 	add.w	r7, r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <USBH_MSC_BOTReset>:
  * @param  pdev: Selected device
  * @retval USBH_Status : Status of class request handled.
  */
static USBH_Status USBH_MSC_BOTReset(USB_OTG_CORE_HANDLE *pdev,
                              USBH_HOST *phost)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	f04f 0221 	mov.w	r2, #33	; 0x21
 8005288:	751a      	strb	r2, [r3, #20]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8005290:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = 0;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 0;           
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 ); 
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	f7fe fb65 	bl	8003984 <USBH_CtlReq>
 80052ba:	4603      	mov	r3, r0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	f107 0708 	add.w	r7, r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop

080052c8 <USBH_MSC_GETMaxLUN>:
  *         device for the next CBW from the host.
  * @param  pdev: Selected device
  * @retval USBH_Status : USB ctl xfer status
  */
static USBH_Status USBH_MSC_GETMaxLUN(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f04f 02a1 	mov.w	r2, #161	; 0xa1
 80052d8:	751a      	strb	r2, [r3, #20]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f04f 02fe 	mov.w	r2, #254	; 0xfe
 80052e0:	755a      	strb	r2, [r3, #21]
  phost->Control.setup.b.wValue.w = 0;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	82da      	strh	r2, [r3, #22]
  phost->Control.setup.b.wIndex.w = 0;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	831a      	strh	r2, [r3, #24]
  phost->Control.setup.b.wLength.w = 1;           
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	f04f 0201 	mov.w	r2, #1
 80052f8:	835a      	strh	r2, [r3, #26]
  
  return USBH_CtlReq(pdev, phost, MSC_Machine.buff , 1 ); 
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	6839      	ldr	r1, [r7, #0]
 80052fe:	4a05      	ldr	r2, [pc, #20]	; (8005314 <USBH_MSC_GETMaxLUN+0x4c>)
 8005300:	f04f 0301 	mov.w	r3, #1
 8005304:	f7fe fb3e 	bl	8003984 <USBH_CtlReq>
 8005308:	4603      	mov	r3, r0
}
 800530a:	4618      	mov	r0, r3
 800530c:	f107 0708 	add.w	r7, r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20004810 	.word	0x20004810

08005318 <USBH_MSC_ErrorHandle>:
  * @param  status
  * @retval None
  */

void USBH_MSC_ErrorHandle(uint8_t status)
{  
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	71fb      	strb	r3, [r7, #7]
    if(status == USBH_MSC_FAIL)
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d12a      	bne.n	800537e <USBH_MSC_ErrorHandle+0x66>
    { 
      MSCErrorCount++;
 8005328:	f640 2319 	movw	r3, #2585	; 0xa19
 800532c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	f103 0301 	add.w	r3, r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	f640 2319 	movw	r3, #2585	; 0xa19
 800533c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005340:	701a      	strb	r2, [r3, #0]
      if(MSCErrorCount < USBH_MSC_ERROR_RETRY_LIMIT)
 8005342:	f640 2319 	movw	r3, #2585	; 0xa19
 8005346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b09      	cmp	r3, #9
 800534e:	d80e      	bhi.n	800536e <USBH_MSC_ErrorHandle+0x56>
      { /* Try MSC level error recovery, Issue the request Sense to get 
        Drive error reason  */
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_REQUEST_SENSE;
 8005350:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005358:	f04f 0206 	mov.w	r2, #6
 800535c:	701a      	strb	r2, [r3, #0]
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 800535e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005362:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005366:	f04f 0201 	mov.w	r2, #1
 800536a:	70da      	strb	r2, [r3, #3]
 800536c:	e011      	b.n	8005392 <USBH_MSC_ErrorHandle+0x7a>
      }
      else
      {
        /* Error trials exceeded the limit, go to unrecovered state */
        USBH_MSC_BOTXferParam.MSCState = USBH_MSC_UNRECOVERED_STATE;
 800536e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005372:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005376:	f04f 020a 	mov.w	r2, #10
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e009      	b.n	8005392 <USBH_MSC_ErrorHandle+0x7a>
      }
    } 
    else if(status == USBH_MSC_PHASE_ERROR)
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d106      	bne.n	8005392 <USBH_MSC_ErrorHandle+0x7a>
    {
      /* Phase error, Go to Unrecoovered state */
      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_UNRECOVERED_STATE;
 8005384:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005388:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800538c:	f04f 020a 	mov.w	r2, #10
 8005390:	701a      	strb	r2, [r3, #0]
    }
    else if(status == USBH_MSC_BUSY)
    {
      /*No change in state*/
    }
}
 8005392:	f107 070c 	add.w	r7, r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
                         BYTE drv		/* Physical drive number (0) */
                           )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	71fb      	strb	r3, [r7, #7]

  if(HCD_IsDeviceConnected(&USB_OTG_Core))
 80053a6:	f640 30c4 	movw	r0, #3012	; 0xbc4
 80053aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80053ae:	f7fc f923 	bl	80015f8 <HCD_IsDeviceConnected>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <disk_initialize+0x38>
  {  
    Stat &= ~STA_NOINIT;
 80053b8:	f640 03e8 	movw	r3, #2280	; 0x8e8
 80053bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	f640 03e8 	movw	r3, #2280	; 0x8e8
 80053ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80053d2:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 80053d4:	f640 03e8 	movw	r3, #2280	; 0x8e8
 80053d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
  
  
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	f107 0708 	add.w	r7, r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop

080053ec <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
                     BYTE drv		/* Physical drive number (0) */
                       )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;		/* Supports only single drive */
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <disk_status+0x16>
 80053fc:	f04f 0301 	mov.w	r3, #1
 8005400:	e005      	b.n	800540e <disk_status+0x22>
  return Stat;
 8005402:	f640 03e8 	movw	r3, #2280	; 0x8e8
 8005406:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	b2db      	uxtb	r3, r3
}
 800540e:	4618      	mov	r0, r3
 8005410:	f107 070c 	add.w	r7, r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop

0800541c <disk_read>:
                   BYTE drv,			/* Physical drive number (0) */
                   BYTE *buff,			/* Pointer to the data buffer to store read data */
                   DWORD sector,		/* Start sector number (LBA) */
                   BYTE count			/* Sector count (1..255) */
                     )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	4602      	mov	r2, r0
 8005428:	73fa      	strb	r2, [r7, #15]
 800542a:	73bb      	strb	r3, [r7, #14]
  BYTE status = USBH_MSC_OK;
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]
  
  if (drv || !count) return RES_PARERR;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <disk_read+0x22>
 8005438:	7bbb      	ldrb	r3, [r7, #14]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <disk_read+0x28>
 800543e:	f04f 0304 	mov.w	r3, #4
 8005442:	e044      	b.n	80054ce <disk_read+0xb2>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005444:	f640 03e8 	movw	r3, #2280	; 0x8e8
 8005448:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <disk_read+0x44>
 800545a:	f04f 0303 	mov.w	r3, #3
 800545e:	e036      	b.n	80054ce <disk_read+0xb2>
  
  
  if(HCD_IsDeviceConnected(&USB_OTG_Core))
 8005460:	f640 30c4 	movw	r0, #3012	; 0xbc4
 8005464:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005468:	f7fc f8c6 	bl	80015f8 <HCD_IsDeviceConnected>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d025      	beq.n	80054be <disk_read+0xa2>
  {  
    
    do
    {
      status = USBH_MSC_Read10(&USB_OTG_Core, buff, sector, 512*count);
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	ea4f 2343 	mov.w	r3, r3, lsl #9
 8005478:	f640 30c4 	movw	r0, #3012	; 0xbc4
 800547c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	f000 fd48 	bl	8005f18 <USBH_MSC_Read10>
 8005488:	4603      	mov	r3, r0
 800548a:	75fb      	strb	r3, [r7, #23]
      USBH_MSC_HandleBOTXfer(&USB_OTG_Core ,&USB_Host);
 800548c:	f640 30c4 	movw	r0, #3012	; 0xbc4
 8005490:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005494:	f241 0174 	movw	r1, #4212	; 0x1074
 8005498:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800549c:	f7ff f8a6 	bl	80045ec <USBH_MSC_HandleBOTXfer>
      
      if(!HCD_IsDeviceConnected(&USB_OTG_Core))
 80054a0:	f640 30c4 	movw	r0, #3012	; 0xbc4
 80054a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80054a8:	f7fc f8a6 	bl	80015f8 <HCD_IsDeviceConnected>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <disk_read+0x9c>
      { 
        return RES_ERROR;
 80054b2:	f04f 0301 	mov.w	r3, #1
 80054b6:	e00a      	b.n	80054ce <disk_read+0xb2>
      }      
    }
    while(status == USBH_MSC_BUSY );
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d0d9      	beq.n	8005472 <disk_read+0x56>
  }
  
  if(status == USBH_MSC_OK)
 80054be:	7dfb      	ldrb	r3, [r7, #23]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <disk_read+0xae>
    return RES_OK;
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e001      	b.n	80054ce <disk_read+0xb2>
  return RES_ERROR;
 80054ca:	f04f 0301 	mov.w	r3, #1
  
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	f107 0718 	add.w	r7, r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <disk_write>:
                    BYTE drv,			/* Physical drive number (0) */
                    const BYTE *buff,	/* Pointer to the data to be written */
                    DWORD sector,		/* Start sector number (LBA) */
                    BYTE count			/* Sector count (1..255) */
                      )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	4602      	mov	r2, r0
 80054e4:	73fa      	strb	r2, [r7, #15]
 80054e6:	73bb      	strb	r3, [r7, #14]
  BYTE status = USBH_MSC_OK;
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
  if (drv || !count) return RES_PARERR;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <disk_write+0x22>
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d102      	bne.n	8005500 <disk_write+0x28>
 80054fa:	f04f 0304 	mov.w	r3, #4
 80054fe:	e051      	b.n	80055a4 <disk_write+0xcc>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005500:	f640 03e8 	movw	r3, #2280	; 0x8e8
 8005504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <disk_write+0x44>
 8005516:	f04f 0303 	mov.w	r3, #3
 800551a:	e043      	b.n	80055a4 <disk_write+0xcc>
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800551c:	f640 03e8 	movw	r3, #2280	; 0x8e8
 8005520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <disk_write+0x5e>
 8005530:	f04f 0302 	mov.w	r3, #2
 8005534:	e036      	b.n	80055a4 <disk_write+0xcc>
  
  
  if(HCD_IsDeviceConnected(&USB_OTG_Core))
 8005536:	f640 30c4 	movw	r0, #3012	; 0xbc4
 800553a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800553e:	f7fc f85b 	bl	80015f8 <HCD_IsDeviceConnected>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d025      	beq.n	8005594 <disk_write+0xbc>
  {  
    do
    {
      status = USBH_MSC_Write10(&USB_OTG_Core,(BYTE*)buff, sector, 512*count);
 8005548:	7bbb      	ldrb	r3, [r7, #14]
 800554a:	ea4f 2343 	mov.w	r3, r3, lsl #9
 800554e:	f640 30c4 	movw	r0, #3012	; 0xbc4
 8005552:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	f000 fbfb 	bl	8005d54 <USBH_MSC_Write10>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
      USBH_MSC_HandleBOTXfer(&USB_OTG_Core, &USB_Host);
 8005562:	f640 30c4 	movw	r0, #3012	; 0xbc4
 8005566:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800556a:	f241 0174 	movw	r1, #4212	; 0x1074
 800556e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005572:	f7ff f83b 	bl	80045ec <USBH_MSC_HandleBOTXfer>
      
      if(!HCD_IsDeviceConnected(&USB_OTG_Core))
 8005576:	f640 30c4 	movw	r0, #3012	; 0xbc4
 800557a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800557e:	f7fc f83b 	bl	80015f8 <HCD_IsDeviceConnected>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <disk_write+0xb6>
      { 
        return RES_ERROR;
 8005588:	f04f 0301 	mov.w	r3, #1
 800558c:	e00a      	b.n	80055a4 <disk_write+0xcc>
      }
    }
    
    while(status == USBH_MSC_BUSY );
 800558e:	7dfb      	ldrb	r3, [r7, #23]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d0d9      	beq.n	8005548 <disk_write+0x70>
    
  }
  
  if(status == USBH_MSC_OK)
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <disk_write+0xc8>
    return RES_OK;
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	e001      	b.n	80055a4 <disk_write+0xcc>
  return RES_ERROR;
 80055a0:	f04f 0301 	mov.w	r3, #1
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	f107 0718 	add.w	r7, r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop

080055b0 <disk_ioctl>:
DRESULT disk_ioctl (
                    BYTE drv,		/* Physical drive number (0) */
                    BYTE ctrl,		/* Control code */
                    void *buff		/* Buffer to send/receive control data */
                      )
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	460b      	mov	r3, r1
 80055b8:	603a      	str	r2, [r7, #0]
 80055ba:	4602      	mov	r2, r0
 80055bc:	71fa      	strb	r2, [r7, #7]
 80055be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_OK;
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]
  
  if (drv) return RES_PARERR;
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <disk_ioctl+0x22>
 80055cc:	f04f 0304 	mov.w	r3, #4
 80055d0:	e03f      	b.n	8005652 <disk_ioctl+0xa2>
  
  res = RES_ERROR;
 80055d2:	f04f 0301 	mov.w	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80055d8:	f640 03e8 	movw	r3, #2280	; 0x8e8
 80055dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <disk_ioctl+0x44>
 80055ee:	f04f 0303 	mov.w	r3, #3
 80055f2:	e02e      	b.n	8005652 <disk_ioctl+0xa2>
  
  switch (ctrl) {
 80055f4:	79bb      	ldrb	r3, [r7, #6]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d826      	bhi.n	8005648 <disk_ioctl+0x98>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <disk_ioctl+0x50>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005611 	.word	0x08005611
 8005604:	08005619 	.word	0x08005619
 8005608:	0800562f 	.word	0x0800562f
 800560c:	0800563f 	.word	0x0800563f
  case CTRL_SYNC :		/* Make sure that no pending write process */
    
    res = RES_OK;
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
    break;
 8005616:	e01b      	b.n	8005650 <disk_ioctl+0xa0>
    
  case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
    
    *(DWORD*)buff = (DWORD) USBH_MSC_Param.MSCapacity;
 8005618:	f644 235c 	movw	r3, #19036	; 0x4a5c
 800561c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]
    break;
 800562c:	e010      	b.n	8005650 <disk_ioctl+0xa0>
    
  case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
    *(WORD*)buff = 512;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005634:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]
    break;
 800563c:	e008      	b.n	8005650 <disk_ioctl+0xa0>
    
  case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
    
    *(DWORD*)buff = 512;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005644:	601a      	str	r2, [r3, #0]
    
    break;
 8005646:	e003      	b.n	8005650 <disk_ioctl+0xa0>
    
    
  default:
    res = RES_PARERR;
 8005648:	f04f 0304 	mov.w	r3, #4
 800564c:	73fb      	strb	r3, [r7, #15]
    break;
 800564e:	bf00      	nop
  }
  
  
  
  return res;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	f107 0714 	add.w	r7, r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop

08005660 <USBH_MSC_TestUnitReady>:
  *         received, it updates the status to upper layer.
  * @param  None
  * @retval Status
  */
uint8_t USBH_MSC_TestUnitReady (USB_OTG_CORE_HANDLE *pdev)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint8_t index;
  USBH_MSC_Status_TypeDef status = USBH_MSC_BUSY;
 8005668:	f04f 0303 	mov.w	r3, #3
 800566c:	73bb      	strb	r3, [r7, #14]
  
  if(HCD_IsDeviceConnected(pdev))
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fb ffc2 	bl	80015f8 <HCD_IsDeviceConnected>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 80a9 	beq.w	80057ce <USBH_MSC_TestUnitReady+0x16e>
  {  
    switch(USBH_MSC_BOTXferParam.CmdStateMachine)
 800567c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005680:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005684:	78db      	ldrb	r3, [r3, #3]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d002      	beq.n	8005690 <USBH_MSC_TestUnitReady+0x30>
 800568a:	2b02      	cmp	r3, #2
 800568c:	d067      	beq.n	800575e <USBH_MSC_TestUnitReady+0xfe>
 800568e:	e09c      	b.n	80057ca <USBH_MSC_TestUnitReady+0x16a>
    {
    case CMD_SEND_STATE:  
      /*Prepare the CBW and relevent field*/
      USBH_MSC_CBWData.field.CBWTransferLength = 0;       /* No Data Transfer */
 8005690:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	609a      	str	r2, [r3, #8]
      USBH_MSC_CBWData.field.CBWFlags = USB_EP_DIR_OUT;
 800569e:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80056a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	731a      	strb	r2, [r3, #12]
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH_TEST_UNIT_READY;
 80056ac:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80056b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056b4:	f04f 0206 	mov.w	r2, #6
 80056b8:	739a      	strb	r2, [r3, #14]
      USBH_MSC_BOTXferParam.pRxTxBuff = USBH_MSC_CSWData.CSWArray;
 80056ba:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80056be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056c2:	f244 72c8 	movw	r2, #18376	; 0x47c8
 80056c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80056ca:	609a      	str	r2, [r3, #8]
      USBH_MSC_BOTXferParam.DataLength = USBH_MSC_CSW_MAX_LENGTH;
 80056cc:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80056d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056d4:	f04f 023f 	mov.w	r2, #63	; 0x3f
 80056d8:	819a      	strh	r2, [r3, #12]
      USBH_MSC_BOTXferParam.MSCStateCurrent = USBH_MSC_TEST_UNIT_READY;
 80056da:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80056de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056e2:	f04f 0203 	mov.w	r2, #3
 80056e6:	709a      	strb	r2, [r3, #2]
      
      for(index = CBW_CB_LENGTH; index != 0; index--)
 80056e8:	f04f 0310 	mov.w	r3, #16
 80056ec:	73fb      	strb	r3, [r7, #15]
 80056ee:	e00c      	b.n	800570a <USBH_MSC_TestUnitReady+0xaa>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
 80056f0:	7bfa      	ldrb	r2, [r7, #15]
 80056f2:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80056f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056fa:	189b      	adds	r3, r3, r2
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	73da      	strb	r2, [r3, #15]
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH_TEST_UNIT_READY;
      USBH_MSC_BOTXferParam.pRxTxBuff = USBH_MSC_CSWData.CSWArray;
      USBH_MSC_BOTXferParam.DataLength = USBH_MSC_CSW_MAX_LENGTH;
      USBH_MSC_BOTXferParam.MSCStateCurrent = USBH_MSC_TEST_UNIT_READY;
      
      for(index = CBW_CB_LENGTH; index != 0; index--)
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	f103 33ff 	add.w	r3, r3, #4294967295
 8005708:	73fb      	strb	r3, [r7, #15]
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ef      	bne.n	80056f0 <USBH_MSC_TestUnitReady+0x90>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
      }
      
      USBH_MSC_CBWData.field.CBWCB[0]  = OPCODE_TEST_UNIT_READY; 
 8005710:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005714:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	73da      	strb	r2, [r3, #15]
      USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SEND_CBW;
 800571e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005722:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005726:	f04f 0201 	mov.w	r2, #1
 800572a:	711a      	strb	r2, [r3, #4]
      /* Start the transfer, then let the state 
      machine magage the other transactions */
      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_USB_TRANSFERS;
 800572c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005730:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005734:	f04f 0207 	mov.w	r2, #7
 8005738:	701a      	strb	r2, [r3, #0]
      USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_BUSY;
 800573a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800573e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005742:	f04f 0203 	mov.w	r2, #3
 8005746:	73da      	strb	r2, [r3, #15]
      USBH_MSC_BOTXferParam.CmdStateMachine = CMD_WAIT_STATUS;
 8005748:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800574c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005750:	f04f 0202 	mov.w	r2, #2
 8005754:	70da      	strb	r2, [r3, #3]
      
      status = USBH_MSC_BUSY; 
 8005756:	f04f 0303 	mov.w	r3, #3
 800575a:	73bb      	strb	r3, [r7, #14]
      break;
 800575c:	e037      	b.n	80057ce <USBH_MSC_TestUnitReady+0x16e>
      
    case CMD_WAIT_STATUS: 
      if(USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_OK)
 800575e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005762:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005766:	7bdb      	ldrb	r3, [r3, #15]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <USBH_MSC_TestUnitReady+0x122>
      { 
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 800576c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005770:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005774:	f04f 0201 	mov.w	r2, #1
 8005778:	70da      	strb	r2, [r3, #3]
       
        status = USBH_MSC_OK;      
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	73bb      	strb	r3, [r7, #14]
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_PHASE_ERROR;    
      }  
      break;
 8005780:	e024      	b.n	80057cc <USBH_MSC_TestUnitReady+0x16c>
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
       
        status = USBH_MSC_OK;      
      }
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_FAIL )
 8005782:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005786:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800578a:	7bdb      	ldrb	r3, [r3, #15]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10a      	bne.n	80057a6 <USBH_MSC_TestUnitReady+0x146>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005790:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005798:	f04f 0201 	mov.w	r2, #1
 800579c:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_FAIL;
 800579e:	f04f 0301 	mov.w	r3, #1
 80057a2:	73bb      	strb	r3, [r7, #14]
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_PHASE_ERROR;    
      }  
      break;
 80057a4:	e012      	b.n	80057cc <USBH_MSC_TestUnitReady+0x16c>
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_FAIL;
      }
      
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_PHASE_ERROR )
 80057a6:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80057aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80057ae:	7bdb      	ldrb	r3, [r3, #15]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d10b      	bne.n	80057cc <USBH_MSC_TestUnitReady+0x16c>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 80057b4:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80057b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80057bc:	f04f 0201 	mov.w	r2, #1
 80057c0:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_PHASE_ERROR;    
 80057c2:	f04f 0302 	mov.w	r3, #2
 80057c6:	73bb      	strb	r3, [r7, #14]
      }  
      break;
 80057c8:	e000      	b.n	80057cc <USBH_MSC_TestUnitReady+0x16c>
      
    default:
      break;
 80057ca:	e000      	b.n	80057ce <USBH_MSC_TestUnitReady+0x16e>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_PHASE_ERROR;    
      }  
      break;
 80057cc:	bf00      	nop
      
    default:
      break;
    }
  }
  return status;
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	f107 0710 	add.w	r7, r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop

080057dc <USBH_MSC_ReadCapacity10>:
  *         received, it updates the status to upper layer
  * @param  None
  * @retval Status
  */
uint8_t USBH_MSC_ReadCapacity10(USB_OTG_CORE_HANDLE *pdev)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint8_t index;
  USBH_MSC_Status_TypeDef status = USBH_MSC_BUSY;
 80057e4:	f04f 0303 	mov.w	r3, #3
 80057e8:	73bb      	strb	r3, [r7, #14]
  
  if(HCD_IsDeviceConnected(pdev))
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fb ff04 	bl	80015f8 <HCD_IsDeviceConnected>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80cf 	beq.w	8005996 <USBH_MSC_ReadCapacity10+0x1ba>
  {  
    switch(USBH_MSC_BOTXferParam.CmdStateMachine)
 80057f8:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80057fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005800:	78db      	ldrb	r3, [r3, #3]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d002      	beq.n	800580c <USBH_MSC_ReadCapacity10+0x30>
 8005806:	2b02      	cmp	r3, #2
 8005808:	d060      	beq.n	80058cc <USBH_MSC_ReadCapacity10+0xf0>
 800580a:	e0c2      	b.n	8005992 <USBH_MSC_ReadCapacity10+0x1b6>
    {
    case CMD_SEND_STATE:
      /*Prepare the CBW and relevent field*/
      USBH_MSC_CBWData.field.CBWTransferLength = XFER_LEN_READ_CAPACITY10;
 800580c:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005810:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005814:	f04f 0208 	mov.w	r2, #8
 8005818:	609a      	str	r2, [r3, #8]
      USBH_MSC_CBWData.field.CBWFlags = USB_EP_DIR_IN;
 800581a:	f244 73e8 	movw	r3, #18408	; 0x47e8
 800581e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005822:	f04f 0280 	mov.w	r2, #128	; 0x80
 8005826:	731a      	strb	r2, [r3, #12]
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH;
 8005828:	f244 73e8 	movw	r3, #18408	; 0x47e8
 800582c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005830:	f04f 020a 	mov.w	r2, #10
 8005834:	739a      	strb	r2, [r3, #14]
      
      USBH_MSC_BOTXferParam.pRxTxBuff = USBH_DataInBuffer;
 8005836:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800583a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800583e:	f644 025c 	movw	r2, #18524	; 0x485c
 8005842:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005846:	609a      	str	r2, [r3, #8]
      USBH_MSC_BOTXferParam.MSCStateCurrent = USBH_MSC_READ_CAPACITY10;
 8005848:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800584c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005850:	f04f 0204 	mov.w	r2, #4
 8005854:	709a      	strb	r2, [r3, #2]
      
      for(index = CBW_CB_LENGTH; index != 0; index--)
 8005856:	f04f 0310 	mov.w	r3, #16
 800585a:	73fb      	strb	r3, [r7, #15]
 800585c:	e00c      	b.n	8005878 <USBH_MSC_ReadCapacity10+0x9c>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
 800585e:	7bfa      	ldrb	r2, [r7, #15]
 8005860:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005868:	189b      	adds	r3, r3, r2
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	73da      	strb	r2, [r3, #15]
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH;
      
      USBH_MSC_BOTXferParam.pRxTxBuff = USBH_DataInBuffer;
      USBH_MSC_BOTXferParam.MSCStateCurrent = USBH_MSC_READ_CAPACITY10;
      
      for(index = CBW_CB_LENGTH; index != 0; index--)
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	f103 33ff 	add.w	r3, r3, #4294967295
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1ef      	bne.n	800585e <USBH_MSC_ReadCapacity10+0x82>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
      }    
      
      USBH_MSC_CBWData.field.CBWCB[0]  = OPCODE_READ_CAPACITY10; 
 800587e:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005882:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005886:	f04f 0225 	mov.w	r2, #37	; 0x25
 800588a:	73da      	strb	r2, [r3, #15]
      USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SEND_CBW;
 800588c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005890:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005894:	f04f 0201 	mov.w	r2, #1
 8005898:	711a      	strb	r2, [r3, #4]
      
      /* Start the transfer, then let the state machine manage the other 
                                                                transactions */
      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_USB_TRANSFERS;
 800589a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800589e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058a2:	f04f 0207 	mov.w	r2, #7
 80058a6:	701a      	strb	r2, [r3, #0]
      USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_BUSY;
 80058a8:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80058ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058b0:	f04f 0203 	mov.w	r2, #3
 80058b4:	73da      	strb	r2, [r3, #15]
      USBH_MSC_BOTXferParam.CmdStateMachine = CMD_WAIT_STATUS;
 80058b6:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80058ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058be:	f04f 0202 	mov.w	r2, #2
 80058c2:	70da      	strb	r2, [r3, #3]
      
      status = USBH_MSC_BUSY;
 80058c4:	f04f 0303 	mov.w	r3, #3
 80058c8:	73bb      	strb	r3, [r7, #14]
      break;
 80058ca:	e064      	b.n	8005996 <USBH_MSC_ReadCapacity10+0x1ba>
      
    case CMD_WAIT_STATUS:
      if(USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_OK)
 80058cc:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80058d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058d4:	7bdb      	ldrb	r3, [r3, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d137      	bne.n	800594a <USBH_MSC_ReadCapacity10+0x16e>
      {
        /*assign the capacity*/
        (((uint8_t*)&USBH_MSC_Param.MSCapacity )[3]) = USBH_DataInBuffer[0];
 80058da:	4a32      	ldr	r2, [pc, #200]	; (80059a4 <USBH_MSC_ReadCapacity10+0x1c8>)
 80058dc:	f644 035c 	movw	r3, #18524	; 0x485c
 80058e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	7013      	strb	r3, [r2, #0]
        (((uint8_t*)&USBH_MSC_Param.MSCapacity )[2]) = USBH_DataInBuffer[1];
 80058e8:	4a2f      	ldr	r2, [pc, #188]	; (80059a8 <USBH_MSC_ReadCapacity10+0x1cc>)
 80058ea:	f644 035c 	movw	r3, #18524	; 0x485c
 80058ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	7013      	strb	r3, [r2, #0]
        (((uint8_t*)&USBH_MSC_Param.MSCapacity )[1]) = USBH_DataInBuffer[2];
 80058f6:	4a2d      	ldr	r2, [pc, #180]	; (80059ac <USBH_MSC_ReadCapacity10+0x1d0>)
 80058f8:	f644 035c 	movw	r3, #18524	; 0x485c
 80058fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005900:	789b      	ldrb	r3, [r3, #2]
 8005902:	7013      	strb	r3, [r2, #0]
        (((uint8_t*)&USBH_MSC_Param.MSCapacity )[0]) = USBH_DataInBuffer[3];
 8005904:	f644 235c 	movw	r3, #19036	; 0x4a5c
 8005908:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800590c:	f644 025c 	movw	r2, #18524	; 0x485c
 8005910:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005914:	78d2      	ldrb	r2, [r2, #3]
 8005916:	701a      	strb	r2, [r3, #0]
        
        /*assign the page length*/
        (((uint8_t*)&USBH_MSC_Param.MSPageLength )[1]) = USBH_DataInBuffer[6];
 8005918:	4a25      	ldr	r2, [pc, #148]	; (80059b0 <USBH_MSC_ReadCapacity10+0x1d4>)
 800591a:	f644 035c 	movw	r3, #18524	; 0x485c
 800591e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005922:	799b      	ldrb	r3, [r3, #6]
 8005924:	7013      	strb	r3, [r2, #0]
        (((uint8_t*)&USBH_MSC_Param.MSPageLength )[0]) = USBH_DataInBuffer[7];
 8005926:	4a23      	ldr	r2, [pc, #140]	; (80059b4 <USBH_MSC_ReadCapacity10+0x1d8>)
 8005928:	f644 035c 	movw	r3, #18524	; 0x485c
 800592c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005930:	79db      	ldrb	r3, [r3, #7]
 8005932:	7013      	strb	r3, [r2, #0]
        
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005934:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005938:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800593c:	f04f 0201 	mov.w	r2, #1
 8005940:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_OK;      
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	73bb      	strb	r3, [r7, #14]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005948:	e024      	b.n	8005994 <USBH_MSC_ReadCapacity10+0x1b8>
        
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_OK;      
      }
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_FAIL )
 800594a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800594e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005952:	7bdb      	ldrb	r3, [r3, #15]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d10a      	bne.n	800596e <USBH_MSC_ReadCapacity10+0x192>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005958:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800595c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005960:	f04f 0201 	mov.w	r2, #1
 8005964:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_FAIL;
 8005966:	f04f 0301 	mov.w	r3, #1
 800596a:	73bb      	strb	r3, [r7, #14]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 800596c:	e012      	b.n	8005994 <USBH_MSC_ReadCapacity10+0x1b8>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_FAIL;
      }  
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_PHASE_ERROR )
 800596e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005976:	7bdb      	ldrb	r3, [r3, #15]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d10b      	bne.n	8005994 <USBH_MSC_ReadCapacity10+0x1b8>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 800597c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005980:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005984:	f04f 0201 	mov.w	r2, #1
 8005988:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_PHASE_ERROR;    
 800598a:	f04f 0302 	mov.w	r3, #2
 800598e:	73bb      	strb	r3, [r7, #14]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005990:	e000      	b.n	8005994 <USBH_MSC_ReadCapacity10+0x1b8>
      
    default:
      break;
 8005992:	e000      	b.n	8005996 <USBH_MSC_ReadCapacity10+0x1ba>
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005994:	bf00      	nop
      
    default:
      break;
    }
  }
  return status;
 8005996:	7bbb      	ldrb	r3, [r7, #14]
}
 8005998:	4618      	mov	r0, r3
 800599a:	f107 0710 	add.w	r7, r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20004a5f 	.word	0x20004a5f
 80059a8:	20004a5e 	.word	0x20004a5e
 80059ac:	20004a5d 	.word	0x20004a5d
 80059b0:	20004a65 	.word	0x20004a65
 80059b4:	20004a64 	.word	0x20004a64

080059b8 <USBH_MSC_ModeSense6>:
  *          for reading the WriteProtect Status of the Mass-Storage device. 
  * @param  None
  * @retval Status
  */
uint8_t USBH_MSC_ModeSense6(USB_OTG_CORE_HANDLE *pdev)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint8_t index;
  USBH_MSC_Status_TypeDef status = USBH_MSC_BUSY;
 80059c0:	f04f 0303 	mov.w	r3, #3
 80059c4:	73bb      	strb	r3, [r7, #14]
  
  if(HCD_IsDeviceConnected(pdev))
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fb fe16 	bl	80015f8 <HCD_IsDeviceConnected>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80c8 	beq.w	8005b64 <USBH_MSC_ModeSense6+0x1ac>
  {  
    switch(USBH_MSC_BOTXferParam.CmdStateMachine)
 80059d4:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80059d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059dc:	78db      	ldrb	r3, [r3, #3]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d002      	beq.n	80059e8 <USBH_MSC_ModeSense6+0x30>
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d06e      	beq.n	8005ac4 <USBH_MSC_ModeSense6+0x10c>
 80059e6:	e0bb      	b.n	8005b60 <USBH_MSC_ModeSense6+0x1a8>
    {
    case CMD_SEND_STATE:
      /*Prepare the CBW and relevent field*/
      USBH_MSC_CBWData.field.CBWTransferLength = XFER_LEN_MODE_SENSE6;
 80059e8:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80059ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059f0:	f04f 023f 	mov.w	r2, #63	; 0x3f
 80059f4:	609a      	str	r2, [r3, #8]
      USBH_MSC_CBWData.field.CBWFlags = USB_EP_DIR_IN;
 80059f6:	f244 73e8 	movw	r3, #18408	; 0x47e8
 80059fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059fe:	f04f 0280 	mov.w	r2, #128	; 0x80
 8005a02:	731a      	strb	r2, [r3, #12]
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH;
 8005a04:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a0c:	f04f 020a 	mov.w	r2, #10
 8005a10:	739a      	strb	r2, [r3, #14]
      
      USBH_MSC_BOTXferParam.pRxTxBuff = USBH_DataInBuffer;
 8005a12:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a1a:	f644 025c 	movw	r2, #18524	; 0x485c
 8005a1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005a22:	609a      	str	r2, [r3, #8]
      USBH_MSC_BOTXferParam.MSCStateCurrent = USBH_MSC_MODE_SENSE6;
 8005a24:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a2c:	f04f 0205 	mov.w	r2, #5
 8005a30:	709a      	strb	r2, [r3, #2]
      
      for(index = CBW_CB_LENGTH; index != 0; index--)
 8005a32:	f04f 0310 	mov.w	r3, #16
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e00c      	b.n	8005a54 <USBH_MSC_ModeSense6+0x9c>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
 8005a3a:	7bfa      	ldrb	r2, [r7, #15]
 8005a3c:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a44:	189b      	adds	r3, r3, r2
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	73da      	strb	r2, [r3, #15]
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH;
      
      USBH_MSC_BOTXferParam.pRxTxBuff = USBH_DataInBuffer;
      USBH_MSC_BOTXferParam.MSCStateCurrent = USBH_MSC_MODE_SENSE6;
      
      for(index = CBW_CB_LENGTH; index != 0; index--)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a52:	73fb      	strb	r3, [r7, #15]
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1ef      	bne.n	8005a3a <USBH_MSC_ModeSense6+0x82>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
      }    
      
      USBH_MSC_CBWData.field.CBWCB[0]  = OPCODE_MODE_SENSE6; 
 8005a5a:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a62:	f04f 021a 	mov.w	r2, #26
 8005a66:	73da      	strb	r2, [r3, #15]
      USBH_MSC_CBWData.field.CBWCB[2]  = MODE_SENSE_PAGE_CONTROL_FIELD | \
 8005a68:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a70:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8005a74:	745a      	strb	r2, [r3, #17]
                                         MODE_SENSE_PAGE_CODE;
                                           
      USBH_MSC_CBWData.field.CBWCB[4]  = XFER_LEN_MODE_SENSE6;
 8005a76:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a7e:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8005a82:	74da      	strb	r2, [r3, #19]
                                                                                      
      USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SEND_CBW;
 8005a84:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a8c:	f04f 0201 	mov.w	r2, #1
 8005a90:	711a      	strb	r2, [r3, #4]
      
      /* Start the transfer, then let the state machine manage the other 
                                                                transactions */
      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_USB_TRANSFERS;
 8005a92:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a9a:	f04f 0207 	mov.w	r2, #7
 8005a9e:	701a      	strb	r2, [r3, #0]
      USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_BUSY;
 8005aa0:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005aa8:	f04f 0203 	mov.w	r2, #3
 8005aac:	73da      	strb	r2, [r3, #15]
      USBH_MSC_BOTXferParam.CmdStateMachine = CMD_WAIT_STATUS;
 8005aae:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ab6:	f04f 0202 	mov.w	r2, #2
 8005aba:	70da      	strb	r2, [r3, #3]
      
      status = USBH_MSC_BUSY;
 8005abc:	f04f 0303 	mov.w	r3, #3
 8005ac0:	73bb      	strb	r3, [r7, #14]
      break;
 8005ac2:	e04f      	b.n	8005b64 <USBH_MSC_ModeSense6+0x1ac>
      
    case CMD_WAIT_STATUS:
      if(USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_OK)
 8005ac4:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005acc:	7bdb      	ldrb	r3, [r3, #15]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d122      	bne.n	8005b18 <USBH_MSC_ModeSense6+0x160>
      {
        /* Assign the Write Protect status */
        /* If WriteProtect = 0, Writing is allowed 
           If WriteProtect != 0, Disk is Write Protected */
        if ( USBH_DataInBuffer[2] & MASK_MODE_SENSE_WRITE_PROTECT)
 8005ad2:	f644 035c 	movw	r3, #18524	; 0x485c
 8005ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ada:	789b      	ldrb	r3, [r3, #2]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	b25b      	sxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	da07      	bge.n	8005af4 <USBH_MSC_ModeSense6+0x13c>
        {
          USBH_MSC_Param.MSWriteProtect   = DISK_WRITE_PROTECTED;
 8005ae4:	f644 235c 	movw	r3, #19036	; 0x4a5c
 8005ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005aec:	f04f 0201 	mov.w	r2, #1
 8005af0:	731a      	strb	r2, [r3, #12]
 8005af2:	e006      	b.n	8005b02 <USBH_MSC_ModeSense6+0x14a>
        }
        else
        {
          USBH_MSC_Param.MSWriteProtect   = 0;
 8005af4:	f644 235c 	movw	r3, #19036	; 0x4a5c
 8005af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	731a      	strb	r2, [r3, #12]
        }
        
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005b02:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b0a:	f04f 0201 	mov.w	r2, #1
 8005b0e:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_OK;      
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	73bb      	strb	r3, [r7, #14]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005b16:	e024      	b.n	8005b62 <USBH_MSC_ModeSense6+0x1aa>
        
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_OK;      
      }
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_FAIL )
 8005b18:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b20:	7bdb      	ldrb	r3, [r3, #15]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d10a      	bne.n	8005b3c <USBH_MSC_ModeSense6+0x184>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005b26:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b2e:	f04f 0201 	mov.w	r2, #1
 8005b32:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_FAIL;
 8005b34:	f04f 0301 	mov.w	r3, #1
 8005b38:	73bb      	strb	r3, [r7, #14]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005b3a:	e012      	b.n	8005b62 <USBH_MSC_ModeSense6+0x1aa>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_FAIL;
      }
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_PHASE_ERROR )
 8005b3c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b44:	7bdb      	ldrb	r3, [r3, #15]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d10b      	bne.n	8005b62 <USBH_MSC_ModeSense6+0x1aa>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005b4a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b52:	f04f 0201 	mov.w	r2, #1
 8005b56:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_PHASE_ERROR;    
 8005b58:	f04f 0302 	mov.w	r3, #2
 8005b5c:	73bb      	strb	r3, [r7, #14]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005b5e:	e000      	b.n	8005b62 <USBH_MSC_ModeSense6+0x1aa>
      
    default:
      break;
 8005b60:	e000      	b.n	8005b64 <USBH_MSC_ModeSense6+0x1ac>
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005b62:	bf00      	nop
      
    default:
      break;
    }
  }
  return status;
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	f107 0710 	add.w	r7, r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBH_MSC_RequestSense>:
  *         received, it updates the status to upper layer
  * @param  None
  * @retval Status
  */
uint8_t USBH_MSC_RequestSense(USB_OTG_CORE_HANDLE *pdev)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  USBH_MSC_Status_TypeDef status = USBH_MSC_BUSY;
 8005b78:	f04f 0303 	mov.w	r3, #3
 8005b7c:	73fb      	strb	r3, [r7, #15]
  
  uint8_t index;
  
  
  if(HCD_IsDeviceConnected(pdev))
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fb fd3a 	bl	80015f8 <HCD_IsDeviceConnected>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80d6 	beq.w	8005d38 <USBH_MSC_RequestSense+0x1c8>
  {  
    switch(USBH_MSC_BOTXferParam.CmdStateMachine)
 8005b8c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b94:	78db      	ldrb	r3, [r3, #3]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d002      	beq.n	8005ba0 <USBH_MSC_RequestSense+0x30>
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d078      	beq.n	8005c90 <USBH_MSC_RequestSense+0x120>
 8005b9e:	e0c9      	b.n	8005d34 <USBH_MSC_RequestSense+0x1c4>
    {
    case CMD_SEND_STATE:
      
      /*Prepare the CBW and relevent field*/
      USBH_MSC_CBWData.field.CBWTransferLength = \
 8005ba0:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ba8:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8005bac:	609a      	str	r2, [r3, #8]
                                                ALLOCATION_LENGTH_REQUEST_SENSE;
      USBH_MSC_CBWData.field.CBWFlags = USB_EP_DIR_IN;
 8005bae:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bb6:	f04f 0280 	mov.w	r2, #128	; 0x80
 8005bba:	731a      	strb	r2, [r3, #12]
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH;
 8005bbc:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bc4:	f04f 020a 	mov.w	r2, #10
 8005bc8:	739a      	strb	r2, [r3, #14]
      
      USBH_MSC_BOTXferParam.pRxTxBuff = USBH_DataInBuffer;
 8005bca:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bd2:	f644 025c 	movw	r2, #18524	; 0x485c
 8005bd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005bda:	609a      	str	r2, [r3, #8]
      USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_BOTXferParam.MSCStateCurrent;
 8005bdc:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005be4:	789a      	ldrb	r2, [r3, #2]
 8005be6:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bee:	705a      	strb	r2, [r3, #1]
      USBH_MSC_BOTXferParam.MSCStateCurrent = USBH_MSC_REQUEST_SENSE;
 8005bf0:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bf8:	f04f 0206 	mov.w	r2, #6
 8005bfc:	709a      	strb	r2, [r3, #2]
      

      for(index = CBW_CB_LENGTH; index != 0; index--)
 8005bfe:	f04f 0310 	mov.w	r3, #16
 8005c02:	73bb      	strb	r3, [r7, #14]
 8005c04:	e00c      	b.n	8005c20 <USBH_MSC_RequestSense+0xb0>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
 8005c06:	7bba      	ldrb	r2, [r7, #14]
 8005c08:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c10:	189b      	adds	r3, r3, r2
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	73da      	strb	r2, [r3, #15]
      USBH_MSC_BOTXferParam.pRxTxBuff = USBH_DataInBuffer;
      USBH_MSC_BOTXferParam.MSCStateBkp = USBH_MSC_BOTXferParam.MSCStateCurrent;
      USBH_MSC_BOTXferParam.MSCStateCurrent = USBH_MSC_REQUEST_SENSE;
      

      for(index = CBW_CB_LENGTH; index != 0; index--)
 8005c18:	7bbb      	ldrb	r3, [r7, #14]
 8005c1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c1e:	73bb      	strb	r3, [r7, #14]
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1ef      	bne.n	8005c06 <USBH_MSC_RequestSense+0x96>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
      }    
      
      USBH_MSC_CBWData.field.CBWCB[0]  = OPCODE_REQUEST_SENSE; 
 8005c26:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c2e:	f04f 0203 	mov.w	r2, #3
 8005c32:	73da      	strb	r2, [r3, #15]
      USBH_MSC_CBWData.field.CBWCB[1]  = DESC_REQUEST_SENSE;
 8005c34:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	741a      	strb	r2, [r3, #16]
      USBH_MSC_CBWData.field.CBWCB[4]  = ALLOCATION_LENGTH_REQUEST_SENSE;
 8005c42:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c4a:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8005c4e:	74da      	strb	r2, [r3, #19]
      
      USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SEND_CBW;
 8005c50:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c58:	f04f 0201 	mov.w	r2, #1
 8005c5c:	711a      	strb	r2, [r3, #4]
      /* Start the transfer, then let the state machine magage 
      the other transactions */
      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_USB_TRANSFERS;
 8005c5e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c66:	f04f 0207 	mov.w	r2, #7
 8005c6a:	701a      	strb	r2, [r3, #0]
      USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_BUSY;
 8005c6c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c74:	f04f 0203 	mov.w	r2, #3
 8005c78:	73da      	strb	r2, [r3, #15]
      USBH_MSC_BOTXferParam.CmdStateMachine = CMD_WAIT_STATUS;
 8005c7a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c82:	f04f 0202 	mov.w	r2, #2
 8005c86:	70da      	strb	r2, [r3, #3]
      
      status = USBH_MSC_BUSY;
 8005c88:	f04f 0303 	mov.w	r3, #3
 8005c8c:	73fb      	strb	r3, [r7, #15]
      
      break;
 8005c8e:	e053      	b.n	8005d38 <USBH_MSC_RequestSense+0x1c8>
      
    case CMD_WAIT_STATUS:
      
      if(USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_OK)
 8005c90:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c98:	7bdb      	ldrb	r3, [r3, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d126      	bne.n	8005cec <USBH_MSC_RequestSense+0x17c>
      {
        /* Get Sense data*/
        (((uint8_t*)&USBH_MSC_Param.MSSenseKey )[3]) = USBH_DataInBuffer[0];
 8005c9e:	4a29      	ldr	r2, [pc, #164]	; (8005d44 <USBH_MSC_RequestSense+0x1d4>)
 8005ca0:	f644 035c 	movw	r3, #18524	; 0x485c
 8005ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	7013      	strb	r3, [r2, #0]
        (((uint8_t*)&USBH_MSC_Param.MSSenseKey )[2]) = USBH_DataInBuffer[1];
 8005cac:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <USBH_MSC_RequestSense+0x1d8>)
 8005cae:	f644 035c 	movw	r3, #18524	; 0x485c
 8005cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	7013      	strb	r3, [r2, #0]
        (((uint8_t*)&USBH_MSC_Param.MSSenseKey )[1]) = USBH_DataInBuffer[2];
 8005cba:	4a24      	ldr	r2, [pc, #144]	; (8005d4c <USBH_MSC_RequestSense+0x1dc>)
 8005cbc:	f644 035c 	movw	r3, #18524	; 0x485c
 8005cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cc4:	789b      	ldrb	r3, [r3, #2]
 8005cc6:	7013      	strb	r3, [r2, #0]
        (((uint8_t*)&USBH_MSC_Param.MSSenseKey )[0]) = USBH_DataInBuffer[3];
 8005cc8:	4a21      	ldr	r2, [pc, #132]	; (8005d50 <USBH_MSC_RequestSense+0x1e0>)
 8005cca:	f644 035c 	movw	r3, #18524	; 0x485c
 8005cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cd2:	78db      	ldrb	r3, [r3, #3]
 8005cd4:	7013      	strb	r3, [r2, #0]
        
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005cd6:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cde:	f04f 0201 	mov.w	r2, #1
 8005ce2:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_OK;      
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005cea:	e024      	b.n	8005d36 <USBH_MSC_RequestSense+0x1c6>
        
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_OK;      
      }
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_FAIL )
 8005cec:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cf4:	7bdb      	ldrb	r3, [r3, #15]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d10a      	bne.n	8005d10 <USBH_MSC_RequestSense+0x1a0>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005cfa:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d02:	f04f 0201 	mov.w	r2, #1
 8005d06:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_FAIL;
 8005d08:	f04f 0301 	mov.w	r3, #1
 8005d0c:	73fb      	strb	r3, [r7, #15]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005d0e:	e012      	b.n	8005d36 <USBH_MSC_RequestSense+0x1c6>
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_FAIL;
      }
      
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_PHASE_ERROR )
 8005d10:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d18:	7bdb      	ldrb	r3, [r3, #15]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d10b      	bne.n	8005d36 <USBH_MSC_RequestSense+0x1c6>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005d1e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d26:	f04f 0201 	mov.w	r2, #1
 8005d2a:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_PHASE_ERROR;    
 8005d2c:	f04f 0302 	mov.w	r3, #2
 8005d30:	73fb      	strb	r3, [r7, #15]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005d32:	e000      	b.n	8005d36 <USBH_MSC_RequestSense+0x1c6>
      
    default:
      break;
 8005d34:	e000      	b.n	8005d38 <USBH_MSC_RequestSense+0x1c8>
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8005d36:	bf00      	nop
      
    default:
      break;
    }
  }
  return status;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f107 0710 	add.w	r7, r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20004a63 	.word	0x20004a63
 8005d48:	20004a62 	.word	0x20004a62
 8005d4c:	20004a61 	.word	0x20004a61
 8005d50:	20004a60 	.word	0x20004a60

08005d54 <USBH_MSC_Write10>:
  */
uint8_t USBH_MSC_Write10(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dataBuffer,
                         uint32_t address,
                         uint32_t nbOfbytes)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
  uint8_t index;
  USBH_MSC_Status_TypeDef status = USBH_MSC_BUSY;
 8005d62:	f04f 0303 	mov.w	r3, #3
 8005d66:	75bb      	strb	r3, [r7, #22]
  uint16_t nbOfPages;
  
  if(HCD_IsDeviceConnected(pdev))
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7fb fc45 	bl	80015f8 <HCD_IsDeviceConnected>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80ca 	beq.w	8005f0a <USBH_MSC_Write10+0x1b6>
  {  
    switch(USBH_MSC_BOTXferParam.CmdStateMachine)
 8005d76:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d7e:	78db      	ldrb	r3, [r3, #3]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d003      	beq.n	8005d8c <USBH_MSC_Write10+0x38>
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	f000 808b 	beq.w	8005ea0 <USBH_MSC_Write10+0x14c>
 8005d8a:	e0bc      	b.n	8005f06 <USBH_MSC_Write10+0x1b2>
    {
    case CMD_SEND_STATE:   
      USBH_MSC_CBWData.field.CBWTransferLength = nbOfbytes;
 8005d8c:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	609a      	str	r2, [r3, #8]
      USBH_MSC_CBWData.field.CBWFlags = USB_EP_DIR_OUT;
 8005d98:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	731a      	strb	r2, [r3, #12]
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH;
 8005da6:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005dae:	f04f 020a 	mov.w	r2, #10
 8005db2:	739a      	strb	r2, [r3, #14]
      USBH_MSC_BOTXferParam.pRxTxBuff = dataBuffer;
 8005db4:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	609a      	str	r2, [r3, #8]
      
      
      for(index = CBW_CB_LENGTH; index != 0; index--)  
 8005dc0:	f04f 0310 	mov.w	r3, #16
 8005dc4:	75fb      	strb	r3, [r7, #23]
 8005dc6:	e00c      	b.n	8005de2 <USBH_MSC_Write10+0x8e>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
 8005dc8:	7dfa      	ldrb	r2, [r7, #23]
 8005dca:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005dd2:	189b      	adds	r3, r3, r2
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	73da      	strb	r2, [r3, #15]
      USBH_MSC_CBWData.field.CBWFlags = USB_EP_DIR_OUT;
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH;
      USBH_MSC_BOTXferParam.pRxTxBuff = dataBuffer;
      
      
      for(index = CBW_CB_LENGTH; index != 0; index--)  
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	f103 33ff 	add.w	r3, r3, #4294967295
 8005de0:	75fb      	strb	r3, [r7, #23]
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ef      	bne.n	8005dc8 <USBH_MSC_Write10+0x74>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
      }
      
      USBH_MSC_CBWData.field.CBWCB[0]  = OPCODE_WRITE10; 
 8005de8:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005df0:	f04f 022a 	mov.w	r2, #42	; 0x2a
 8005df4:	73da      	strb	r2, [r3, #15]
      
      /*logical block address*/
      USBH_MSC_CBWData.field.CBWCB[2]  = (((uint8_t*)&address)[3]) ;
 8005df6:	f107 0304 	add.w	r3, r7, #4
 8005dfa:	78da      	ldrb	r2, [r3, #3]
 8005dfc:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e04:	745a      	strb	r2, [r3, #17]
      USBH_MSC_CBWData.field.CBWCB[3]  = (((uint8_t*)&address)[2]);
 8005e06:	f107 0304 	add.w	r3, r7, #4
 8005e0a:	789a      	ldrb	r2, [r3, #2]
 8005e0c:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e14:	749a      	strb	r2, [r3, #18]
      USBH_MSC_CBWData.field.CBWCB[4]  = (((uint8_t*)&address)[1]);
 8005e16:	f107 0304 	add.w	r3, r7, #4
 8005e1a:	785a      	ldrb	r2, [r3, #1]
 8005e1c:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e24:	74da      	strb	r2, [r3, #19]
      USBH_MSC_CBWData.field.CBWCB[5]  = (((uint8_t*)&address)[0]);
 8005e26:	f107 0304 	add.w	r3, r7, #4
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e34:	751a      	strb	r2, [r3, #20]
      
      /*USBH_MSC_PAGE_LENGTH = 512*/
      nbOfPages = nbOfbytes/ USBH_MSC_PAGE_LENGTH; 
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	82bb      	strh	r3, [r7, #20]
      
      /*Tranfer length */
      USBH_MSC_CBWData.field.CBWCB[7]  = (((uint8_t *)&nbOfPages)[1]) ; 
 8005e40:	f107 0314 	add.w	r3, r7, #20
 8005e44:	785a      	ldrb	r2, [r3, #1]
 8005e46:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e4e:	759a      	strb	r2, [r3, #22]
      USBH_MSC_CBWData.field.CBWCB[8]  = (((uint8_t *)&nbOfPages)[0]) ; 
 8005e50:	f107 0314 	add.w	r3, r7, #20
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e5e:	75da      	strb	r2, [r3, #23]
      
      USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SEND_CBW;
 8005e60:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e68:	f04f 0201 	mov.w	r2, #1
 8005e6c:	711a      	strb	r2, [r3, #4]
      /* Start the transfer, then let the state machine 
      magage the other transactions */
      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_USB_TRANSFERS;
 8005e6e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e76:	f04f 0207 	mov.w	r2, #7
 8005e7a:	701a      	strb	r2, [r3, #0]
      USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_BUSY;
 8005e7c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e84:	f04f 0203 	mov.w	r2, #3
 8005e88:	73da      	strb	r2, [r3, #15]
      USBH_MSC_BOTXferParam.CmdStateMachine = CMD_WAIT_STATUS;
 8005e8a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e92:	f04f 0202 	mov.w	r2, #2
 8005e96:	70da      	strb	r2, [r3, #3]
      
      status = USBH_MSC_BUSY;
 8005e98:	f04f 0303 	mov.w	r3, #3
 8005e9c:	75bb      	strb	r3, [r7, #22]
      
      break;
 8005e9e:	e034      	b.n	8005f0a <USBH_MSC_Write10+0x1b6>
      
    case CMD_WAIT_STATUS:
      if(USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_OK)
 8005ea0:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ea8:	7bdb      	ldrb	r3, [r3, #15]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <USBH_MSC_Write10+0x170>
      { 
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005eae:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005eb6:	f04f 0201 	mov.w	r2, #1
 8005eba:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_OK;      
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	75bb      	strb	r3, [r7, #22]
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_PHASE_ERROR;    
      }
      break;
 8005ec2:	e021      	b.n	8005f08 <USBH_MSC_Write10+0x1b4>
      { 
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_OK;      
      }
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_FAIL )
 8005ec4:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ecc:	7bdb      	ldrb	r3, [r3, #15]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d107      	bne.n	8005ee2 <USBH_MSC_Write10+0x18e>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005ed2:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005eda:	f04f 0201 	mov.w	r2, #1
 8005ede:	70da      	strb	r2, [r3, #3]
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_PHASE_ERROR;    
      }
      break;
 8005ee0:	e012      	b.n	8005f08 <USBH_MSC_Write10+0x1b4>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
      }
      
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_PHASE_ERROR )
 8005ee2:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005eea:	7bdb      	ldrb	r3, [r3, #15]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d10b      	bne.n	8005f08 <USBH_MSC_Write10+0x1b4>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 8005ef0:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ef8:	f04f 0201 	mov.w	r2, #1
 8005efc:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_PHASE_ERROR;    
 8005efe:	f04f 0302 	mov.w	r3, #2
 8005f02:	75bb      	strb	r3, [r7, #22]
      }
      break;
 8005f04:	e000      	b.n	8005f08 <USBH_MSC_Write10+0x1b4>
      
    default:
      break;
 8005f06:	e000      	b.n	8005f0a <USBH_MSC_Write10+0x1b6>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_PHASE_ERROR;    
      }
      break;
 8005f08:	bf00      	nop
      
    default:
      break;
    }
  }
  return status;
 8005f0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f107 0718 	add.w	r7, r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop

08005f18 <USBH_MSC_Read10>:
  */
uint8_t USBH_MSC_Read10(USB_OTG_CORE_HANDLE *pdev,
                        uint8_t *dataBuffer,
                        uint32_t address,
                        uint32_t nbOfbytes)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
  uint8_t index;
  static USBH_MSC_Status_TypeDef status = USBH_MSC_BUSY;
  uint16_t nbOfPages;
  status = USBH_MSC_BUSY;
 8005f26:	f640 03e9 	movw	r3, #2281	; 0x8e9
 8005f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f2e:	f04f 0203 	mov.w	r2, #3
 8005f32:	701a      	strb	r2, [r3, #0]
  
  if(HCD_IsDeviceConnected(pdev))
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7fb fb5f 	bl	80015f8 <HCD_IsDeviceConnected>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 80e3 	beq.w	8006108 <USBH_MSC_Read10+0x1f0>
  {
    switch(USBH_MSC_BOTXferParam.CmdStateMachine)
 8005f42:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f4a:	78db      	ldrb	r3, [r3, #3]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d003      	beq.n	8005f58 <USBH_MSC_Read10+0x40>
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f000 808f 	beq.w	8006074 <USBH_MSC_Read10+0x15c>
 8005f56:	e0d5      	b.n	8006104 <USBH_MSC_Read10+0x1ec>
    {
    case CMD_SEND_STATE:
      /*Prepare the CBW and relevent field*/
      USBH_MSC_CBWData.field.CBWTransferLength = nbOfbytes;
 8005f58:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	609a      	str	r2, [r3, #8]
      USBH_MSC_CBWData.field.CBWFlags = USB_EP_DIR_IN;
 8005f64:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f6c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8005f70:	731a      	strb	r2, [r3, #12]
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH;
 8005f72:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f7a:	f04f 020a 	mov.w	r2, #10
 8005f7e:	739a      	strb	r2, [r3, #14]
      
      USBH_MSC_BOTXferParam.pRxTxBuff = dataBuffer;
 8005f80:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8005f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	609a      	str	r2, [r3, #8]
      
      for(index = CBW_CB_LENGTH; index != 0; index--)
 8005f8c:	f04f 0310 	mov.w	r3, #16
 8005f90:	75fb      	strb	r3, [r7, #23]
 8005f92:	e00c      	b.n	8005fae <USBH_MSC_Read10+0x96>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
 8005f94:	7dfa      	ldrb	r2, [r7, #23]
 8005f96:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f9e:	189b      	adds	r3, r3, r2
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	73da      	strb	r2, [r3, #15]
      USBH_MSC_CBWData.field.CBWFlags = USB_EP_DIR_IN;
      USBH_MSC_CBWData.field.CBWLength = CBW_LENGTH;
      
      USBH_MSC_BOTXferParam.pRxTxBuff = dataBuffer;
      
      for(index = CBW_CB_LENGTH; index != 0; index--)
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fac:	75fb      	strb	r3, [r7, #23]
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ef      	bne.n	8005f94 <USBH_MSC_Read10+0x7c>
      {
        USBH_MSC_CBWData.field.CBWCB[index] = 0x00;
      }
      
      USBH_MSC_CBWData.field.CBWCB[0]  = OPCODE_READ10; 
 8005fb4:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005fbc:	f04f 0228 	mov.w	r2, #40	; 0x28
 8005fc0:	73da      	strb	r2, [r3, #15]
      
      /*logical block address*/
      
      USBH_MSC_CBWData.field.CBWCB[2]  = (((uint8_t*)&address)[3]);
 8005fc2:	f107 0304 	add.w	r3, r7, #4
 8005fc6:	78da      	ldrb	r2, [r3, #3]
 8005fc8:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005fd0:	745a      	strb	r2, [r3, #17]
      USBH_MSC_CBWData.field.CBWCB[3]  = (((uint8_t*)&address)[2]);
 8005fd2:	f107 0304 	add.w	r3, r7, #4
 8005fd6:	789a      	ldrb	r2, [r3, #2]
 8005fd8:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005fe0:	749a      	strb	r2, [r3, #18]
      USBH_MSC_CBWData.field.CBWCB[4]  = (((uint8_t*)&address)[1]);
 8005fe2:	f107 0304 	add.w	r3, r7, #4
 8005fe6:	785a      	ldrb	r2, [r3, #1]
 8005fe8:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ff0:	74da      	strb	r2, [r3, #19]
      USBH_MSC_CBWData.field.CBWCB[5]  = (((uint8_t*)&address)[0]);
 8005ff2:	f107 0304 	add.w	r3, r7, #4
 8005ff6:	781a      	ldrb	r2, [r3, #0]
 8005ff8:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8005ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006000:	751a      	strb	r2, [r3, #20]
      
      /*USBH_MSC_PAGE_LENGTH = 512*/
      nbOfPages = nbOfbytes/ USBH_MSC_PAGE_LENGTH;  
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8006008:	b29b      	uxth	r3, r3
 800600a:	82bb      	strh	r3, [r7, #20]
      
      /*Tranfer length */
      USBH_MSC_CBWData.field.CBWCB[7]  = (((uint8_t *)&nbOfPages)[1]) ; 
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	785a      	ldrb	r2, [r3, #1]
 8006012:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8006016:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800601a:	759a      	strb	r2, [r3, #22]
      USBH_MSC_CBWData.field.CBWCB[8]  = (((uint8_t *)&nbOfPages)[0]) ; 
 800601c:	f107 0314 	add.w	r3, r7, #20
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	f244 73e8 	movw	r3, #18408	; 0x47e8
 8006026:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800602a:	75da      	strb	r2, [r3, #23]
      
      
      USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SEND_CBW;
 800602c:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8006030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006034:	f04f 0201 	mov.w	r2, #1
 8006038:	711a      	strb	r2, [r3, #4]
      /* Start the transfer, then let the state machine 
      magage the other transactions */
      USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOT_USB_TRANSFERS;
 800603a:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800603e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006042:	f04f 0207 	mov.w	r2, #7
 8006046:	701a      	strb	r2, [r3, #0]
      USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_BUSY;
 8006048:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800604c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006050:	f04f 0203 	mov.w	r2, #3
 8006054:	73da      	strb	r2, [r3, #15]
      USBH_MSC_BOTXferParam.CmdStateMachine = CMD_WAIT_STATUS;
 8006056:	f244 73d8 	movw	r3, #18392	; 0x47d8
 800605a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800605e:	f04f 0202 	mov.w	r2, #2
 8006062:	70da      	strb	r2, [r3, #3]
      
      status = USBH_MSC_BUSY;
 8006064:	f640 03e9 	movw	r3, #2281	; 0x8e9
 8006068:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800606c:	f04f 0203 	mov.w	r2, #3
 8006070:	701a      	strb	r2, [r3, #0]
      
      break;
 8006072:	e049      	b.n	8006108 <USBH_MSC_Read10+0x1f0>
      
    case CMD_WAIT_STATUS:
      
      if((USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_OK) && \
 8006074:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8006078:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800607c:	7bdb      	ldrb	r3, [r3, #15]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d114      	bne.n	80060ac <USBH_MSC_Read10+0x194>
        (HCD_IsDeviceConnected(pdev)))
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7fb fab8 	bl	80015f8 <HCD_IsDeviceConnected>
 8006088:	4603      	mov	r3, r0
      
      break;
      
    case CMD_WAIT_STATUS:
      
      if((USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_OK) && \
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <USBH_MSC_Read10+0x194>
        (HCD_IsDeviceConnected(pdev)))
      { 
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 800608e:	f244 73d8 	movw	r3, #18392	; 0x47d8
 8006092:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006096:	f04f 0201 	mov.w	r2, #1
 800609a:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_OK;      
 800609c:	f640 03e9 	movw	r3, #2281	; 0x8e9
 80060a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e02a      	b.n	8006102 <USBH_MSC_Read10+0x1ea>
      }
      else if (( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_FAIL ) && \
 80060ac:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80060b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060b4:	7bdb      	ldrb	r3, [r3, #15]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d10d      	bne.n	80060d6 <USBH_MSC_Read10+0x1be>
        (HCD_IsDeviceConnected(pdev)))
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f7fb fa9c 	bl	80015f8 <HCD_IsDeviceConnected>
 80060c0:	4603      	mov	r3, r0
      { 
        /* Commands successfully sent and Response Received  */       
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
        status = USBH_MSC_OK;      
      }
      else if (( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_FAIL ) && \
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <USBH_MSC_Read10+0x1be>
        (HCD_IsDeviceConnected(pdev)))
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 80060c6:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80060ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060ce:	f04f 0201 	mov.w	r2, #1
 80060d2:	70da      	strb	r2, [r3, #3]
 80060d4:	e015      	b.n	8006102 <USBH_MSC_Read10+0x1ea>
      }
      
      else if ( USBH_MSC_BOTXferParam.BOTXferStatus == USBH_MSC_PHASE_ERROR )
 80060d6:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80060da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060de:	7bdb      	ldrb	r3, [r3, #15]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d110      	bne.n	8006106 <USBH_MSC_Read10+0x1ee>
      {
        /* Failure Mode */
        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;
 80060e4:	f244 73d8 	movw	r3, #18392	; 0x47d8
 80060e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060ec:	f04f 0201 	mov.w	r2, #1
 80060f0:	70da      	strb	r2, [r3, #3]
        status = USBH_MSC_PHASE_ERROR;    
 80060f2:	f640 03e9 	movw	r3, #2281	; 0x8e9
 80060f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060fa:	f04f 0202 	mov.w	r2, #2
 80060fe:	701a      	strb	r2, [r3, #0]
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8006100:	e001      	b.n	8006106 <USBH_MSC_Read10+0x1ee>
 8006102:	e000      	b.n	8006106 <USBH_MSC_Read10+0x1ee>
      
    default:
      break;
 8006104:	e000      	b.n	8006108 <USBH_MSC_Read10+0x1f0>
      else
      {
        /* Wait for the Commands to get Completed */
        /* NO Change in state Machine */
      }
      break;
 8006106:	bf00      	nop
      
    default:
      break;
    }
  }
  return status;
 8006108:	f640 03e9 	movw	r3, #2281	; 0x8e9
 800610c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006110:	781b      	ldrb	r3, [r3, #0]
}
 8006112:	4618      	mov	r0, r3
 8006114:	f107 0718 	add.w	r7, r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8006124:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006128:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8006132:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8006136:	60da      	str	r2, [r3, #12]
}
 8006138:	f107 070c 	add.w	r7, r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop

08006144 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	73bb      	strb	r3, [r7, #14]
 8006158:	f04f 030f 	mov.w	r3, #15
 800615c:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	78db      	ldrb	r3, [r3, #3]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d045      	beq.n	80061f2 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8006166:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800616a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	ea6f 0303 	mvn.w	r3, r3
 8006174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006178:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800617c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	f1c3 0304 	rsb	r3, r3, #4
 8006184:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8006186:	7b7a      	ldrb	r2, [r7, #13]
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	fa42 f303 	asr.w	r3, r2, r3
 800618e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	461a      	mov	r2, r3
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	789a      	ldrb	r2, [r3, #2]
 80061a2:	7b7b      	ldrb	r3, [r7, #13]
 80061a4:	4013      	ands	r3, r2
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80061b4:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80061b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80061ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	189b      	adds	r3, r3, r2
 80061c4:	7bfa      	ldrb	r2, [r7, #15]
 80061c6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80061ca:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80061ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	7812      	ldrb	r2, [r2, #0]
 80061d6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80061da:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	7809      	ldrb	r1, [r1, #0]
 80061e0:	f001 011f 	and.w	r1, r1, #31
 80061e4:	f04f 0001 	mov.w	r0, #1
 80061e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80061ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80061f0:	e014      	b.n	800621c <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80061f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80061f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	7812      	ldrb	r2, [r2, #0]
 80061fe:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8006202:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	7809      	ldrb	r1, [r1, #0]
 8006208:	f001 011f 	and.w	r1, r1, #31
 800620c:	f04f 0001 	mov.w	r0, #1
 8006210:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006214:	f102 0220 	add.w	r2, r2, #32
 8006218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800621c:	f107 0714 	add.w	r7, r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop

08006228 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8006232:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006236:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006240:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	430a      	orrs	r2, r1
 8006248:	609a      	str	r2, [r3, #8]
}
 800624a:	f107 070c 	add.w	r7, r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	71fa      	strb	r2, [r7, #7]
 8006260:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8006262:	79bb      	ldrb	r3, [r7, #6]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00d      	beq.n	8006284 <NVIC_SystemLPConfig+0x30>
  {
    SCB->SCR |= LowPowerMode;
 8006268:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800626c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006270:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8006274:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8006278:	6912      	ldr	r2, [r2, #16]
 800627a:	4611      	mov	r1, r2
 800627c:	79fa      	ldrb	r2, [r7, #7]
 800627e:	430a      	orrs	r2, r1
 8006280:	611a      	str	r2, [r3, #16]
 8006282:	e00e      	b.n	80062a2 <NVIC_SystemLPConfig+0x4e>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8006284:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006288:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800628c:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8006290:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8006294:	6912      	ldr	r2, [r2, #16]
 8006296:	4611      	mov	r1, r2
 8006298:	79fa      	ldrb	r2, [r7, #7]
 800629a:	ea6f 0202 	mvn.w	r2, r2
 800629e:	400a      	ands	r2, r1
 80062a0:	611a      	str	r2, [r3, #16]
  }
}
 80062a2:	f107 070c 	add.w	r7, r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr

080062ac <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d10c      	bne.n	80062d4 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80062ba:	f24e 0310 	movw	r3, #57360	; 0xe010
 80062be:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80062c2:	f24e 0210 	movw	r2, #57360	; 0xe010
 80062c6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	f042 0204 	orr.w	r2, r2, #4
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e00b      	b.n	80062ec <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80062d4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80062d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80062dc:	f24e 0210 	movw	r2, #57360	; 0xe010
 80062e0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	f022 0204 	bic.w	r2, r2, #4
 80062ea:	601a      	str	r2, [r3, #0]
  }
}
 80062ec:	f107 070c 	add.w	r7, r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop

080062f8 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 80062fc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8006300:	f04f 0101 	mov.w	r1, #1
 8006304:	f002 fcb4 	bl	8008c70 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8006308:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800630c:	f04f 0100 	mov.w	r1, #0
 8006310:	f002 fcae 	bl	8008c70 <RCC_APB1PeriphResetCmd>
}
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop

08006318 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800632e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006332:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	ea6f 0303 	mvn.w	r3, r3
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4013      	ands	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800635c:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8006362:	4313      	orrs	r3, r2
 8006364:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8006374:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006378:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]
}
 8006380:	f107 0714 	add.w	r7, r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop

0800638c <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	60da      	str	r2, [r3, #12]
}
 80063b4:	f107 070c 	add.w	r7, r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop

080063c0 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d011      	beq.n	80063f6 <DAC_Cmd+0x36>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 80063d2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80063d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80063da:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80063de:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	4611      	mov	r1, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	f04f 0001 	mov.w	r0, #1
 80063ec:	fa00 f202 	lsl.w	r2, r0, r2
 80063f0:	430a      	orrs	r2, r1
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e012      	b.n	800641c <DAC_Cmd+0x5c>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 80063f6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80063fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80063fe:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006402:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	4611      	mov	r1, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	f04f 0001 	mov.w	r0, #1
 8006410:	fa00 f202 	lsl.w	r2, r0, r2
 8006414:	ea6f 0202 	mvn.w	r2, r2
 8006418:	400a      	ands	r2, r1
 800641a:	601a      	str	r2, [r3, #0]
  }
}
 800641c:	f107 070c 	add.w	r7, r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop

08006428 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d013      	beq.n	8006462 <DAC_SoftwareTriggerCmd+0x3a>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 800643a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800643e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006442:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006446:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800644a:	6852      	ldr	r2, [r2, #4]
 800644c:	4611      	mov	r1, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8006454:	f04f 0001 	mov.w	r0, #1
 8006458:	fa00 f202 	lsl.w	r2, r0, r2
 800645c:	430a      	orrs	r2, r1
 800645e:	605a      	str	r2, [r3, #4]
 8006460:	e014      	b.n	800648c <DAC_SoftwareTriggerCmd+0x64>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8006462:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006466:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800646a:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800646e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006472:	6852      	ldr	r2, [r2, #4]
 8006474:	4611      	mov	r1, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	ea4f 1212 	mov.w	r2, r2, lsr #4
 800647c:	f04f 0001 	mov.w	r0, #1
 8006480:	fa00 f202 	lsl.w	r2, r0, r2
 8006484:	ea6f 0202 	mvn.w	r2, r2
 8006488:	400a      	ands	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
  }
}
 800648c:	f107 070c 	add.w	r7, r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop

08006498 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00c      	beq.n	80064c2 <DAC_DualSoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 80064a8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80064ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80064b0:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80064b4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80064b8:	6852      	ldr	r2, [r2, #4]
 80064ba:	f042 0203 	orr.w	r2, r2, #3
 80064be:	605a      	str	r2, [r3, #4]
 80064c0:	e00b      	b.n	80064da <DAC_DualSoftwareTriggerCmd+0x42>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 80064c2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80064c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80064ca:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80064ce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80064d2:	6852      	ldr	r2, [r2, #4]
 80064d4:	f022 0203 	bic.w	r2, r2, #3
 80064d8:	605a      	str	r2, [r3, #4]
  }
}
 80064da:	f107 070c 	add.w	r7, r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d010      	beq.n	800651a <DAC_WaveGenerationCmd+0x36>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 80064f8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80064fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006500:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006504:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	4611      	mov	r1, r2
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	68b8      	ldr	r0, [r7, #8]
 8006510:	fa00 f202 	lsl.w	r2, r0, r2
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	e011      	b.n	800653e <DAC_WaveGenerationCmd+0x5a>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 800651a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800651e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006522:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006526:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	4611      	mov	r1, r2
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	68b8      	ldr	r0, [r7, #8]
 8006532:	fa00 f202 	lsl.w	r2, r0, r2
 8006536:	ea6f 0202 	mvn.w	r2, r2
 800653a:	400a      	ands	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
  }
}
 800653e:	f107 0714 	add.w	r7, r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr

08006548 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800655a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800655e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006562:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	18d3      	adds	r3, r2, r3
 800656a:	f103 0308 	add.w	r3, r3, #8
 800656e:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	887a      	ldrh	r2, [r7, #2]
 8006574:	601a      	str	r2, [r3, #0]
}
 8006576:	f107 0714 	add.w	r7, r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr

08006580 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8006592:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006596:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800659a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	18d3      	adds	r3, r2, r3
 80065a2:	f103 0314 	add.w	r3, r3, #20
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	887a      	ldrh	r2, [r7, #2]
 80065ac:	601a      	str	r2, [r3, #0]
}
 80065ae:	f107 0714 	add.w	r7, r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	4613      	mov	r3, r2
 80065c2:	460a      	mov	r2, r1
 80065c4:	807a      	strh	r2, [r7, #2]
 80065c6:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d106      	bne.n	80065e8 <DAC_SetDualChannelData+0x30>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 80065da:	887b      	ldrh	r3, [r7, #2]
 80065dc:	ea4f 2203 	mov.w	r2, r3, lsl #8
 80065e0:	883b      	ldrh	r3, [r7, #0]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e005      	b.n	80065f4 <DAC_SetDualChannelData+0x3c>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 80065e8:	887b      	ldrh	r3, [r7, #2]
 80065ea:	ea4f 4203 	mov.w	r2, r3, lsl #16
 80065ee:	883b      	ldrh	r3, [r7, #0]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 80065f4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80065f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80065fc:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	18d3      	adds	r3, r2, r3
 8006604:	f103 0320 	add.w	r3, r3, #32
 8006608:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	601a      	str	r2, [r3, #0]
}
 8006610:	f107 0714 	add.w	r7, r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop

0800661c <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 800662a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800662e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006632:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	ea4f 0293 	mov.w	r2, r3, lsr #2
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	18d3      	adds	r3, r2, r3
 800663e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8006642:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
}
 800664a:	4618      	mov	r0, r3
 800664c:	f107 0714 	add.w	r7, r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop

08006658 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d011      	beq.n	800668e <DAC_DMACmd+0x36>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 800666a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800666e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006672:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006676:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	4611      	mov	r1, r2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006684:	fa00 f202 	lsl.w	r2, r0, r2
 8006688:	430a      	orrs	r2, r1
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	e012      	b.n	80066b4 <DAC_DMACmd+0x5c>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 800668e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006692:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006696:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800669a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	4611      	mov	r1, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80066a8:	fa00 f202 	lsl.w	r2, r0, r2
 80066ac:	ea6f 0202 	mvn.w	r2, r2
 80066b0:	400a      	ands	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]
  }
}
 80066b4:	f107 070c 	add.w	r7, r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d010      	beq.n	80066f6 <DAC_ITConfig+0x36>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 80066d4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80066d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80066dc:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80066e0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	4611      	mov	r1, r2
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	68b8      	ldr	r0, [r7, #8]
 80066ec:	fa00 f202 	lsl.w	r2, r0, r2
 80066f0:	430a      	orrs	r2, r1
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	e011      	b.n	800671a <DAC_ITConfig+0x5a>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 80066f6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80066fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80066fe:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006702:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	4611      	mov	r1, r2
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	68b8      	ldr	r0, [r7, #8]
 800670e:	fa00 f202 	lsl.w	r2, r0, r2
 8006712:	ea6f 0202 	mvn.w	r2, r2
 8006716:	400a      	ands	r2, r1
 8006718:	601a      	str	r2, [r3, #0]
  }
}
 800671a:	f107 0714 	add.w	r7, r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8006734:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006738:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800673c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673e:	461a      	mov	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	fa01 f303 	lsl.w	r3, r1, r3
 8006748:	4013      	ands	r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <DAC_GetFlagStatus+0x32>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 800674e:	f04f 0301 	mov.w	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
 8006754:	e002      	b.n	800675c <DAC_GetFlagStatus+0x38>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	f107 0714 	add.w	r7, r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop

0800676c <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8006776:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800677a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	fa01 f202 	lsl.w	r2, r1, r2
 8006786:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006788:	f107 070c 	add.w	r7, r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 80067aa:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80067ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	fa01 f303 	lsl.w	r3, r1, r3
 80067be:	4013      	ands	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 80067c2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80067c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	461a      	mov	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	fa01 f303 	lsl.w	r3, r1, r3
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d006      	beq.n	80067ea <DAC_GetITStatus+0x56>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <DAC_GetITStatus+0x56>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 80067e2:	f04f 0301 	mov.w	r3, #1
 80067e6:	73fb      	strb	r3, [r7, #15]
 80067e8:	e002      	b.n	80067f0 <DAC_GetITStatus+0x5c>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	f107 0714 	add.w	r7, r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bc80      	pop	{r7}
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop

08006800 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 800680a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800680e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	fa01 f202 	lsl.w	r2, r1, r2
 800681a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800681c:	f107 070c 	add.w	r7, r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop

08006828 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f023 0201 	bic.w	r2, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f04f 0221 	mov.w	r2, #33	; 0x21
 800686a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	f246 0310 	movw	r3, #24592	; 0x6010
 8006872:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006876:	429a      	cmp	r2, r3
 8006878:	d107      	bne.n	800688a <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800687a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800687e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006882:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8006886:	609a      	str	r2, [r3, #8]
 8006888:	e0eb      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	f246 0328 	movw	r3, #24616	; 0x6028
 8006890:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006894:	429a      	cmp	r2, r3
 8006896:	d107      	bne.n	80068a8 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8006898:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800689c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068a0:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80068a4:	609a      	str	r2, [r3, #8]
 80068a6:	e0dc      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	f246 0340 	movw	r3, #24640	; 0x6040
 80068ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d107      	bne.n	80068c6 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80068b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80068ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068be:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	e0cd      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	f246 0358 	movw	r3, #24664	; 0x6058
 80068cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d107      	bne.n	80068e4 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80068d4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80068d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068dc:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80068e0:	609a      	str	r2, [r3, #8]
 80068e2:	e0be      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	f246 0370 	movw	r3, #24688	; 0x6070
 80068ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d109      	bne.n	8006906 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80068f2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80068f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068fa:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80068fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006902:	60da      	str	r2, [r3, #12]
 8006904:	e0ad      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	f246 0388 	movw	r3, #24712	; 0x6088
 800690c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006910:	429a      	cmp	r2, r3
 8006912:	d109      	bne.n	8006928 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8006914:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006918:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800691c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8006920:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006924:	60da      	str	r2, [r3, #12]
 8006926:	e09c      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	f246 03a0 	movw	r3, #24736	; 0x60a0
 800692e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006932:	429a      	cmp	r2, r3
 8006934:	d109      	bne.n	800694a <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8006936:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800693a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8006946:	60da      	str	r2, [r3, #12]
 8006948:	e08b      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8006950:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006954:	429a      	cmp	r2, r3
 8006956:	d107      	bne.n	8006968 <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8006958:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800695c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006960:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	e07c      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	f246 4310 	movw	r3, #25616	; 0x6410
 800696e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006972:	429a      	cmp	r2, r3
 8006974:	d107      	bne.n	8006986 <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8006976:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800697a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800697e:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	e06d      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	f246 4328 	movw	r3, #25640	; 0x6428
 800698c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006990:	429a      	cmp	r2, r3
 8006992:	d107      	bne.n	80069a4 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8006994:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006998:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800699c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80069a0:	609a      	str	r2, [r3, #8]
 80069a2:	e05e      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	f246 4340 	movw	r3, #25664	; 0x6440
 80069aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d107      	bne.n	80069c2 <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80069b2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80069b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069ba:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	e04f      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	f246 4358 	movw	r3, #25688	; 0x6458
 80069c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d107      	bne.n	80069e0 <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80069d0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80069d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069d8:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80069dc:	609a      	str	r2, [r3, #8]
 80069de:	e040      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	f246 4370 	movw	r3, #25712	; 0x6470
 80069e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d109      	bne.n	8006a02 <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80069ee:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80069f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069f6:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80069fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80069fe:	60da      	str	r2, [r3, #12]
 8006a00:	e02f      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	f246 4388 	movw	r3, #25736	; 0x6488
 8006a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d109      	bne.n	8006a24 <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8006a10:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006a14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a18:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8006a1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006a20:	60da      	str	r2, [r3, #12]
 8006a22:	e01e      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8006a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d109      	bne.n	8006a46 <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8006a32:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006a36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8006a42:	60da      	str	r2, [r3, #12]
 8006a44:	e00d      	b.n	8006a62 <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8006a4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d106      	bne.n	8006a62 <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8006a54:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006a58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a5c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8006a60:	60da      	str	r2, [r3, #12]
    }
  }
}
 8006a62:	f107 070c 	add.w	r7, r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	f248 033f 	movw	r3, #32831	; 0x803f
 8006a88:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8006a9e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006aaa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006ab6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006ac2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0307 	bic.w	r3, r3, #7
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aec:	4313      	orrs	r3, r2
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60da      	str	r2, [r3, #12]
}
 8006b12:	f107 0714 	add.w	r7, r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f04f 0200 	mov.w	r2, #0
 8006b4a:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f04f 0200 	mov.w	r2, #0
 8006b62:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f04f 0200 	mov.w	r2, #0
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006b9c:	f107 070c 	add.w	r7, r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop

08006ba8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d006      	beq.n	8006bc8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f043 0201 	orr.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e005      	b.n	8006bd4 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f023 0201 	bic.w	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
  }
}
 8006bd4:	f107 070c 	add.w	r7, r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop

08006be0 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d006      	beq.n	8006bfe <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	e005      	b.n	8006c0a <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]
  }
}
 8006c0a:	f107 070c 	add.w	r7, r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d006      	beq.n	8006c32 <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f043 0220 	orr.w	r2, r3, #32
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	e005      	b.n	8006c3e <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f023 0220 	bic.w	r2, r3, #32
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
  }
}
 8006c3e:	f107 070c 	add.w	r7, r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8006c54:	887a      	ldrh	r2, [r7, #2]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	605a      	str	r2, [r3, #4]
}
 8006c5a:	f107 070c 	add.w	r7, r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr

08006c64 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	b29b      	uxth	r3, r3
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	f107 070c 	add.w	r7, r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop

08006c80 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d006      	beq.n	8006ca0 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	e005      	b.n	8006cac <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	611a      	str	r2, [r3, #16]
}
 8006cb2:	f107 0714 	add.w	r7, r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr

08006cbc <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d006      	beq.n	8006cdc <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e005      	b.n	8006ce8 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
  }
}
 8006ce8:	f107 070c 	add.w	r7, r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop

08006cf4 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	611a      	str	r2, [r3, #16]
 8006d0c:	e002      	b.n	8006d14 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	60da      	str	r2, [r3, #12]
  }
}
 8006d14:	f107 0714 	add.w	r7, r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc80      	pop	{r7}
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop

08006d20 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <DMA_GetCurrentMemoryTarget+0x22>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8006d3a:	f04f 0301 	mov.w	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	e002      	b.n	8006d48 <DMA_GetCurrentMemoryTarget+0x28>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8006d42:	f04f 0300 	mov.w	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8006d48:	68fb      	ldr	r3, [r7, #12]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f107 0714 	add.w	r7, r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop

08006d58 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8006d74:	f04f 0301 	mov.w	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
 8006d7a:	e002      	b.n	8006d82 <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	f107 0714 	add.w	r7, r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006da6:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8006da8:	68fb      	ldr	r3, [r7, #12]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	f107 0714 	add.w	r7, r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop

08006db8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	f246 430f 	movw	r3, #25615	; 0x640f
 8006dd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d805      	bhi.n	8006de8 <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006ddc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006de0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	e004      	b.n	8006df2 <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006de8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006dec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006df0:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	e002      	b.n	8006e0a <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	f640 737d 	movw	r3, #3965	; 0xf7d
 8006e10:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8006e14:	4013      	ands	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <DMA_GetFlagStatus+0x72>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8006e22:	f04f 0301 	mov.w	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
 8006e28:	e002      	b.n	8006e30 <DMA_GetFlagStatus+0x78>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8006e2a:	f04f 0300 	mov.w	r3, #0
 8006e2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	f107 071c 	add.w	r7, r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop

08006e40 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	f246 430f 	movw	r3, #25615	; 0x640f
 8006e50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d805      	bhi.n	8006e64 <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006e58:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006e5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	e004      	b.n	8006e6e <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006e64:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e6c:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <DMA_ClearFlag+0x4a>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	f640 737d 	movw	r3, #3965	; 0xf7d
 8006e7e:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8006e82:	4013      	ands	r3, r2
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	60d3      	str	r3, [r2, #12]
 8006e88:	e007      	b.n	8006e9a <DMA_ClearFlag+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	f640 737d 	movw	r3, #3965	; 0xf7d
 8006e90:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8006e94:	4013      	ands	r3, r2
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	6093      	str	r3, [r2, #8]
  }    
}
 8006e9a:	f107 0714 	add.w	r7, r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr

08006ea4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00f      	beq.n	8006edc <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d006      	beq.n	8006ed0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	615a      	str	r2, [r3, #20]
 8006ece:	e005      	b.n	8006edc <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b80      	cmp	r3, #128	; 0x80
 8006ee0:	d017      	beq.n	8006f12 <DMA_ITConfig+0x6e>
  {
    if (NewState != DISABLE)
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d009      	beq.n	8006efc <DMA_ITConfig+0x58>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f003 031e 	and.w	r3, r3, #30
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e00a      	b.n	8006f12 <DMA_ITConfig+0x6e>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f003 031e 	and.w	r3, r3, #30
 8006f08:	ea6f 0303 	mvn.w	r3, r3
 8006f0c:	401a      	ands	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8006f12:	f107 0714 	add.w	r7, r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr

08006f1c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8006f2c:	f04f 0300 	mov.w	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	f246 430f 	movw	r3, #25615	; 0x640f
 8006f3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d805      	bhi.n	8006f52 <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006f46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006f4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	e004      	b.n	8006f5c <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006f52:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006f56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f5a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	f640 733c 	movw	r3, #3900	; 0xf3c
 8006f62:	f6c0 733c 	movt	r3, #3900	; 0xf3c
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00c      	beq.n	8006f86 <DMA_GetITStatus+0x6a>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006f72:	f003 031e 	and.w	r3, r3, #30
 8006f76:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4013      	ands	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	e004      	b.n	8006f90 <DMA_GetITStatus+0x74>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8e:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <DMA_GetITStatus+0x86>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e002      	b.n	8006fa8 <DMA_GetITStatus+0x8c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	f640 737d 	movw	r3, #3965	; 0xf7d
 8006fae:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d006      	beq.n	8006fce <DMA_GetITStatus+0xb2>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <DMA_GetITStatus+0xb2>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8006fc6:	f04f 0301 	mov.w	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]
 8006fcc:	e002      	b.n	8006fd4 <DMA_GetITStatus+0xb8>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f107 071c 	add.w	r7, r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop

08006fe4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	f246 430f 	movw	r3, #25615	; 0x640f
 8006ff4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d805      	bhi.n	8007008 <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006ffc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007000:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	e004      	b.n	8007012 <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8007008:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800700c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007010:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d008      	beq.n	800702e <DMA_ClearITPendingBit+0x4a>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	f640 737d 	movw	r3, #3965	; 0xf7d
 8007022:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8007026:	4013      	ands	r3, r2
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	60d3      	str	r3, [r2, #12]
 800702c:	e007      	b.n	800703e <DMA_ClearITPendingBit+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	f640 737d 	movw	r3, #3965	; 0xf7d
 8007034:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8007038:	4013      	ands	r3, r2
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	6093      	str	r3, [r2, #8]
  }   
}
 800703e:	f107 0714 	add.w	r7, r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr

08007048 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 800704c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007050:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800705a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800705e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8007068:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800706c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8007076:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800707a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8007084:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007088:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800708c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007090:	f2c0 027f 	movt	r2, #127	; 0x7f
 8007094:	615a      	str	r2, [r3, #20]
}
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr

0800709c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80070aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80070ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80070b2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	799b      	ldrb	r3, [r3, #6]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d07e      	beq.n	80071ba <EXTI_Init+0x11e>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80070bc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80070c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80070c4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80070c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	4611      	mov	r1, r2
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	ea6f 0202 	mvn.w	r2, r2
 80070d8:	400a      	ands	r2, r1
 80070da:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80070dc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80070e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80070e4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80070e8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80070ec:	6852      	ldr	r2, [r2, #4]
 80070ee:	4611      	mov	r1, r2
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	ea6f 0202 	mvn.w	r2, r2
 80070f8:	400a      	ands	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	791b      	ldrb	r3, [r3, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	18d3      	adds	r3, r2, r3
 8007104:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	6811      	ldr	r1, [r2, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6812      	ldr	r2, [r2, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8007114:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007118:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800711c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007120:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007124:	6892      	ldr	r2, [r2, #8]
 8007126:	4611      	mov	r1, r2
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	ea6f 0202 	mvn.w	r2, r2
 8007130:	400a      	ands	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8007134:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007138:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800713c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007140:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007144:	68d2      	ldr	r2, [r2, #12]
 8007146:	4611      	mov	r1, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	ea6f 0202 	mvn.w	r2, r2
 8007150:	400a      	ands	r2, r1
 8007152:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	795b      	ldrb	r3, [r3, #5]
 8007158:	2b10      	cmp	r3, #16
 800715a:	d11c      	bne.n	8007196 <EXTI_Init+0xfa>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800715c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007160:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007164:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007168:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800716c:	6892      	ldr	r2, [r2, #8]
 800716e:	4611      	mov	r1, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8007178:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800717c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007180:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007184:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007188:	68d2      	ldr	r2, [r2, #12]
 800718a:	4611      	mov	r1, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	60da      	str	r2, [r3, #12]
 8007194:	e01f      	b.n	80071d6 <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8007196:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800719a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800719e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	795b      	ldrb	r3, [r3, #5]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	18d3      	adds	r3, r2, r3
 80071a8:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	6811      	ldr	r1, [r2, #0]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e00d      	b.n	80071d6 <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	791b      	ldrb	r3, [r3, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	18d3      	adds	r3, r2, r3
 80071c2:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	6811      	ldr	r1, [r2, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	ea6f 0202 	mvn.w	r2, r2
 80071d2:	400a      	ands	r2, r1
 80071d4:	601a      	str	r2, [r3, #0]
  }
}
 80071d6:	f107 0714 	add.w	r7, r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	bc80      	pop	{r7}
 80071de:	4770      	bx	lr

080071e0 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f04f 0200 	mov.w	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f04f 020c 	mov.w	r2, #12
 80071fe:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	719a      	strb	r2, [r3, #6]
}
 8007208:	f107 070c 	add.w	r7, r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop

08007214 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800721c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007220:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007224:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007228:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800722c:	6912      	ldr	r2, [r2, #16]
 800722e:	4611      	mov	r1, r2
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	430a      	orrs	r2, r1
 8007234:	611a      	str	r2, [r3, #16]
}
 8007236:	f107 070c 	add.w	r7, r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800724e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007252:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	461a      	mov	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4013      	ands	r3, r2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <EXTI_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8007262:	f04f 0301 	mov.w	r3, #1
 8007266:	73fb      	strb	r3, [r7, #15]
 8007268:	e002      	b.n	8007270 <EXTI_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	f107 0714 	add.w	r7, r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop

08007280 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8007288:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800728c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	615a      	str	r2, [r3, #20]
}
 8007294:	f107 070c 	add.w	r7, r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	bc80      	pop	{r7}
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop

080072a0 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80072b4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4013      	ands	r3, r2
 80072c4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80072c6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	461a      	mov	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <EXTI_GetITStatus+0x48>
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <EXTI_GetITStatus+0x48>
  {
    bitstatus = SET;
 80072e0:	f04f 0301 	mov.w	r3, #1
 80072e4:	73fb      	strb	r3, [r7, #15]
 80072e6:	e002      	b.n	80072ee <EXTI_GetITStatus+0x4e>
  }
  else
  {
    bitstatus = RESET;
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	f107 0714 	add.w	r7, r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr

080072fc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8007304:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007308:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	615a      	str	r2, [r3, #20]
}
 8007310:	f107 070c 	add.w	r7, r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop

0800731c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800732e:	429a      	cmp	r2, r3
 8007330:	d10c      	bne.n	800734c <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8007332:	f04f 0001 	mov.w	r0, #1
 8007336:	f04f 0101 	mov.w	r1, #1
 800733a:	f001 fc15 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800733e:	f04f 0001 	mov.w	r0, #1
 8007342:	f04f 0100 	mov.w	r1, #0
 8007346:	f001 fc0f 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
 800734a:	e09e      	b.n	800748a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007352:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007356:	429a      	cmp	r2, r3
 8007358:	d10c      	bne.n	8007374 <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800735a:	f04f 0002 	mov.w	r0, #2
 800735e:	f04f 0101 	mov.w	r1, #1
 8007362:	f001 fc01 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8007366:	f04f 0002 	mov.w	r0, #2
 800736a:	f04f 0100 	mov.w	r1, #0
 800736e:	f001 fbfb 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
 8007372:	e08a      	b.n	800748a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800737a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800737e:	429a      	cmp	r2, r3
 8007380:	d10c      	bne.n	800739c <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8007382:	f04f 0004 	mov.w	r0, #4
 8007386:	f04f 0101 	mov.w	r1, #1
 800738a:	f001 fbed 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800738e:	f04f 0004 	mov.w	r0, #4
 8007392:	f04f 0100 	mov.w	r1, #0
 8007396:	f001 fbe7 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
 800739a:	e076      	b.n	800748a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d10c      	bne.n	80073c4 <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80073aa:	f04f 0008 	mov.w	r0, #8
 80073ae:	f04f 0101 	mov.w	r1, #1
 80073b2:	f001 fbd9 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80073b6:	f04f 0008 	mov.w	r0, #8
 80073ba:	f04f 0100 	mov.w	r1, #0
 80073be:	f001 fbd3 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
 80073c2:	e062      	b.n	800748a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d10c      	bne.n	80073ec <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80073d2:	f04f 0010 	mov.w	r0, #16
 80073d6:	f04f 0101 	mov.w	r1, #1
 80073da:	f001 fbc5 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80073de:	f04f 0010 	mov.w	r0, #16
 80073e2:	f04f 0100 	mov.w	r1, #0
 80073e6:	f001 fbbf 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
 80073ea:	e04e      	b.n	800748a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80073f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d10c      	bne.n	8007414 <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80073fa:	f04f 0020 	mov.w	r0, #32
 80073fe:	f04f 0101 	mov.w	r1, #1
 8007402:	f001 fbb1 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8007406:	f04f 0020 	mov.w	r0, #32
 800740a:	f04f 0100 	mov.w	r1, #0
 800740e:	f001 fbab 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
 8007412:	e03a      	b.n	800748a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800741a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800741e:	429a      	cmp	r2, r3
 8007420:	d10c      	bne.n	800743c <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8007422:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007426:	f04f 0101 	mov.w	r1, #1
 800742a:	f001 fb9d 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800742e:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007432:	f04f 0100 	mov.w	r1, #0
 8007436:	f001 fb97 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
 800743a:	e026      	b.n	800748a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007442:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007446:	429a      	cmp	r2, r3
 8007448:	d10c      	bne.n	8007464 <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800744a:	f04f 0080 	mov.w	r0, #128	; 0x80
 800744e:	f04f 0101 	mov.w	r1, #1
 8007452:	f001 fb89 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8007456:	f04f 0080 	mov.w	r0, #128	; 0x80
 800745a:	f04f 0100 	mov.w	r1, #0
 800745e:	f001 fb83 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
 8007462:	e012      	b.n	800748a <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800746a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800746e:	429a      	cmp	r2, r3
 8007470:	d10b      	bne.n	800748a <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8007472:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007476:	f04f 0101 	mov.w	r1, #1
 800747a:	f001 fb75 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800747e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007482:	f04f 0100 	mov.w	r1, #0
 8007486:	f001 fb6f 	bl	8008b68 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 800748a:	f107 0708 	add.w	r7, r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop

08007494 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80074b0:	f04f 0300 	mov.w	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	e08e      	b.n	80075d6 <GPIO_Init+0x142>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f04f 0201 	mov.w	r2, #1
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	4013      	ands	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d17b      	bne.n	80075ce <GPIO_Init+0x13a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074e2:	f04f 0103 	mov.w	r1, #3
 80074e6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ea:	ea6f 0303 	mvn.w	r3, r3
 80074ee:	401a      	ands	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	791b      	ldrb	r3, [r3, #4]
 80074fe:	4619      	mov	r1, r3
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007506:	fa01 f303 	lsl.w	r3, r1, r3
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	791b      	ldrb	r3, [r3, #4]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d003      	beq.n	8007520 <GPIO_Init+0x8c>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	791b      	ldrb	r3, [r3, #4]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d138      	bne.n	8007592 <GPIO_Init+0xfe>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	461a      	mov	r2, r3
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800752c:	f04f 0103 	mov.w	r1, #3
 8007530:	fa01 f303 	lsl.w	r3, r1, r3
 8007534:	ea6f 0303 	mvn.w	r3, r3
 8007538:	401a      	ands	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	461a      	mov	r2, r3
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	795b      	ldrb	r3, [r3, #5]
 8007548:	4619      	mov	r1, r3
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007550:	fa01 f303 	lsl.w	r3, r1, r3
 8007554:	431a      	orrs	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	461a      	mov	r2, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	b29b      	uxth	r3, r3
 8007564:	f04f 0101 	mov.w	r1, #1
 8007568:	fa01 f303 	lsl.w	r3, r1, r3
 800756c:	ea6f 0303 	mvn.w	r3, r3
 8007570:	401a      	ands	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	461a      	mov	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	799b      	ldrb	r3, [r3, #6]
 8007580:	4619      	mov	r1, r3
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	b29b      	uxth	r3, r3
 8007586:	fa01 f303 	lsl.w	r3, r1, r3
 800758a:	b29b      	uxth	r3, r3
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	461a      	mov	r2, r3
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	b29b      	uxth	r3, r3
 800759c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80075a0:	f04f 0103 	mov.w	r1, #3
 80075a4:	fa01 f303 	lsl.w	r3, r1, r3
 80075a8:	ea6f 0303 	mvn.w	r3, r3
 80075ac:	401a      	ands	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	461a      	mov	r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	79db      	ldrb	r3, [r3, #7]
 80075bc:	4619      	mov	r1, r3
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80075c4:	fa01 f303 	lsl.w	r3, r1, r3
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f103 0301 	add.w	r3, r3, #1
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2b0f      	cmp	r3, #15
 80075da:	f67f af6d 	bls.w	80074b8 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80075de:	f107 071c 	add.w	r7, r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f04f 0200 	mov.w	r2, #0
 8007606:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f04f 0200 	mov.w	r2, #0
 800760e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	71da      	strb	r2, [r3, #7]
}
 8007618:	f107 070c 	add.w	r7, r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	bc80      	pop	{r7}
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop

08007624 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8007630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007634:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8007636:	887a      	ldrh	r2, [r7, #2]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8007644:	887a      	ldrh	r2, [r7, #2]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	60fb      	str	r3, [r7, #12]
}
 800765c:	f107 0714 	add.w	r7, r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop

08007668 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	461a      	mov	r2, r3
 8007680:	887b      	ldrh	r3, [r7, #2]
 8007682:	4013      	ands	r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 8007688:	f04f 0301 	mov.w	r3, #1
 800768c:	73fb      	strb	r3, [r7, #15]
 800768e:	e002      	b.n	8007696 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8007690:	f04f 0300 	mov.w	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007696:	7bfb      	ldrb	r3, [r7, #15]
}
 8007698:	4618      	mov	r0, r3
 800769a:	f107 0714 	add.w	r7, r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr

080076a4 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	b29b      	uxth	r3, r3
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	f107 070c 	add.w	r7, r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop

080076c0 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	461a      	mov	r2, r3
 80076d8:	887b      	ldrh	r3, [r7, #2]
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 80076e0:	f04f 0301 	mov.w	r3, #1
 80076e4:	73fb      	strb	r3, [r7, #15]
 80076e6:	e002      	b.n	80076ee <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80076e8:	f04f 0300 	mov.w	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	f107 0714 	add.w	r7, r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr

080076fc <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	b29b      	uxth	r3, r3
}
 800770a:	4618      	mov	r0, r3
 800770c:	f107 070c 	add.w	r7, r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop

08007718 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	887a      	ldrh	r2, [r7, #2]
 8007728:	831a      	strh	r2, [r3, #24]
}
 800772a:	f107 070c 	add.w	r7, r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	bc80      	pop	{r7}
 8007732:	4770      	bx	lr

08007734 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	887a      	ldrh	r2, [r7, #2]
 8007744:	835a      	strh	r2, [r3, #26]
}
 8007746:	f107 070c 	add.w	r7, r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	bc80      	pop	{r7}
 800774e:	4770      	bx	lr

08007750 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	4613      	mov	r3, r2
 800775a:	460a      	mov	r2, r1
 800775c:	807a      	strh	r2, [r7, #2]
 800775e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8007760:	787b      	ldrb	r3, [r7, #1]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	887a      	ldrh	r2, [r7, #2]
 800776a:	831a      	strh	r2, [r3, #24]
 800776c:	e002      	b.n	8007774 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	887a      	ldrh	r2, [r7, #2]
 8007772:	835a      	strh	r2, [r3, #26]
  }
}
 8007774:	f107 070c 	add.w	r7, r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop

08007780 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800778c:	887a      	ldrh	r2, [r7, #2]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	615a      	str	r2, [r3, #20]
}
 8007792:	f107 070c 	add.w	r7, r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr

0800779c <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	461a      	mov	r2, r3
 80077ae:	887b      	ldrh	r3, [r7, #2]
 80077b0:	405a      	eors	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	615a      	str	r2, [r3, #20]
}
 80077b6:	f107 070c 	add.w	r7, r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr

080077c0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	4613      	mov	r3, r2
 80077ca:	460a      	mov	r2, r1
 80077cc:	807a      	strh	r2, [r7, #2]
 80077ce:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80077d0:	f04f 0300 	mov.w	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80077dc:	787a      	ldrb	r2, [r7, #1]
 80077de:	887b      	ldrh	r3, [r7, #2]
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80077ee:	887b      	ldrh	r3, [r7, #2]
 80077f0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	887b      	ldrh	r3, [r7, #2]
 80077fa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4619      	mov	r1, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f101 0108 	add.w	r1, r1, #8
 8007808:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800780c:	4619      	mov	r1, r3
 800780e:	887b      	ldrh	r3, [r7, #2]
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007818:	f04f 000f 	mov.w	r0, #15
 800781c:	fa00 f303 	lsl.w	r3, r0, r3
 8007820:	ea6f 0303 	mvn.w	r3, r3
 8007824:	4019      	ands	r1, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f102 0208 	add.w	r2, r2, #8
 800782c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8007830:	887b      	ldrh	r3, [r7, #2]
 8007832:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f102 0208 	add.w	r2, r2, #8
 8007840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007844:	461a      	mov	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4313      	orrs	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800784c:	887b      	ldrh	r3, [r7, #2]
 800784e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8007852:	b29b      	uxth	r3, r3
 8007854:	461a      	mov	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f102 0208 	add.w	r2, r2, #8
 800785c:	68b9      	ldr	r1, [r7, #8]
 800785e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007862:	f107 0714 	add.w	r7, r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr

0800786c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800787a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800787e:	429a      	cmp	r2, r3
 8007880:	d10c      	bne.n	800789c <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8007882:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007886:	f04f 0101 	mov.w	r1, #1
 800788a:	f001 f9f1 	bl	8008c70 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800788e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007892:	f04f 0100 	mov.w	r1, #0
 8007896:	f001 f9eb 	bl	8008c70 <RCC_APB1PeriphResetCmd>
 800789a:	e026      	b.n	80078ea <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80078a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d10c      	bne.n	80078c4 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80078aa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80078ae:	f04f 0101 	mov.w	r1, #1
 80078b2:	f001 f9dd 	bl	8008c70 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80078b6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80078ba:	f04f 0100 	mov.w	r1, #0
 80078be:	f001 f9d7 	bl	8008c70 <RCC_APB1PeriphResetCmd>
 80078c2:	e012      	b.n	80078ea <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80078ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d10b      	bne.n	80078ea <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80078d2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80078d6:	f04f 0101 	mov.w	r1, #1
 80078da:	f001 f9c9 	bl	8008c70 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80078de:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80078e2:	f04f 0100 	mov.w	r1, #0
 80078e6:	f001 f9c3 	bl	8008c70 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80078ea:	f107 0708 	add.w	r7, r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop

080078f4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08a      	sub	sp, #40	; 0x28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800790a:	f04f 0304 	mov.w	r3, #4
 800790e:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8007910:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8007914:	f2c0 037a 	movt	r3, #122	; 0x7a
 8007918:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	889b      	ldrh	r3, [r3, #4]
 800791e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8007920:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007922:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007926:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8007928:	f107 030c 	add.w	r3, r7, #12
 800792c:	4618      	mov	r0, r3
 800792e:	f000 feeb 	bl	8008708 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	f64d 6383 	movw	r3, #56963	; 0xde83
 800793c:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8007940:	fba3 1302 	umull	r1, r3, r3, r2
 8007944:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8007948:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800794a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800794c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800794e:	4313      	orrs	r3, r2
 8007950:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007956:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f023 0301 	bic.w	r3, r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8007976:	f2c0 0301 	movt	r3, #1
 800797a:	429a      	cmp	r2, r3
 800797c:	d818      	bhi.n	80079b0 <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800798e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007990:	2b03      	cmp	r3, #3
 8007992:	d802      	bhi.n	800799a <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8007994:	f04f 0304 	mov.w	r3, #4
 8007998:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800799a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800799c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800799e:	4313      	orrs	r3, r2
 80079a0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80079a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80079a4:	f103 0301 	add.w	r3, r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	841a      	strh	r2, [r3, #32]
 80079ae:	e04b      	b.n	8007a48 <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	88da      	ldrh	r2, [r3, #6]
 80079b4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d10a      	bne.n	80079d2 <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	4613      	mov	r3, r2
 80079c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80079c6:	189b      	adds	r3, r3, r2
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079d0:	e010      	b.n	80079f4 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4613      	mov	r3, r2
 80079d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80079dc:	189b      	adds	r3, r3, r2
 80079de:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80079e2:	189b      	adds	r3, r3, r2
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ea:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80079ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079f2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80079f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f6:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80079fa:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8007a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a04:	f043 0301 	orr.w	r3, r3, #1
 8007a08:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8007a0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8007a1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007a22:	fb02 f203 	mul.w	r2, r2, r3
 8007a26:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8007a2a:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8007a2e:	fb83 1302 	smull	r1, r3, r3, r2
 8007a32:	ea4f 11a3 	mov.w	r1, r3, asr #6
 8007a36:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007a3a:	1acb      	subs	r3, r1, r3
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f103 0301 	add.w	r3, r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a4c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8007a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a6a:	f023 030a 	bic.w	r3, r3, #10
 8007a6e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	889a      	ldrh	r2, [r3, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	895b      	ldrh	r3, [r3, #10]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a86:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	899a      	ldrh	r2, [r3, #12]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	891b      	ldrh	r3, [r3, #8]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	811a      	strh	r2, [r3, #8]
}
 8007a98:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aae:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8007abe:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f04f 0200 	mov.w	r2, #0
 8007ac6:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ad6:	819a      	strh	r2, [r3, #12]
}
 8007ad8:	f107 070c 	add.w	r7, r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop

08007ae4 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d008      	beq.n	8007b08 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	801a      	strh	r2, [r3, #0]
 8007b06:	e007      	b.n	8007b18 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	801a      	strh	r2, [r3, #0]
  }
}
 8007b18:	f107 070c 	add.w	r7, r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop

08007b24 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d008      	beq.n	8007b48 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e007      	b.n	8007b58 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	801a      	strh	r2, [r3, #0]
  }
}
 8007b58:	f107 070c 	add.w	r7, r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop

08007b64 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d008      	beq.n	8007b88 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	801a      	strh	r2, [r3, #0]
 8007b86:	e007      	b.n	8007b98 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	801a      	strh	r2, [r3, #0]
  }
}
 8007b98:	f107 070c 	add.w	r7, r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop

08007ba4 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	460a      	mov	r2, r1
 8007bb0:	70fa      	strb	r2, [r7, #3]
 8007bb2:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8007bb4:	78bb      	ldrb	r3, [r7, #2]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d004      	beq.n	8007bc4 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	f043 0301 	orr.w	r3, r3, #1
 8007bc0:	70fb      	strb	r3, [r7, #3]
 8007bc2:	e003      	b.n	8007bcc <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	f023 0301 	bic.w	r3, r3, #1
 8007bca:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	821a      	strh	r2, [r3, #16]
}
 8007bd4:	f107 070c 	add.w	r7, r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	e007      	b.n	8007c14 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	801a      	strh	r2, [r3, #0]
  }
}
 8007c14:	f107 070c 	add.w	r7, r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop

08007c20 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	899b      	ldrh	r3, [r3, #12]
 8007c36:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8007c38:	89fb      	ldrh	r3, [r7, #14]
 8007c3a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007c3e:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	89fb      	ldrh	r3, [r7, #14]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	89fa      	ldrh	r2, [r7, #14]
 8007c56:	819a      	strh	r2, [r3, #12]
}
 8007c58:	f107 0714 	add.w	r7, r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop

08007c64 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d008      	beq.n	8007c88 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	899b      	ldrh	r3, [r3, #12]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	819a      	strh	r2, [r3, #12]
 8007c86:	e007      	b.n	8007c98 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	899b      	ldrh	r3, [r3, #12]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f023 0301 	bic.w	r3, r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	819a      	strh	r2, [r3, #12]
  }
}
 8007c98:	f107 070c 	add.w	r7, r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop

08007ca4 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d008      	beq.n	8007cc8 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	801a      	strh	r2, [r3, #0]
 8007cc6:	e007      	b.n	8007cd8 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	801a      	strh	r2, [r3, #0]
  }
}
 8007cd8:	f107 070c 	add.w	r7, r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop

08007ce4 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	801a      	strh	r2, [r3, #0]
 8007d0a:	e009      	b.n	8007d20 <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8007d16:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	801a      	strh	r2, [r3, #0]
  }
}
 8007d20:	f107 070c 	add.w	r7, r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bc80      	pop	{r7}
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop

08007d2c <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8007d38:	78fb      	ldrb	r3, [r7, #3]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d108      	bne.n	8007d50 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	801a      	strh	r2, [r3, #0]
 8007d4e:	e007      	b.n	8007d60 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	801a      	strh	r2, [r3, #0]
  }
}
 8007d60:	f107 070c 	add.w	r7, r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop

08007d6c <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8007d78:	887b      	ldrh	r3, [r7, #2]
 8007d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d7e:	d008      	beq.n	8007d92 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8b9b      	ldrh	r3, [r3, #28]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	839a      	strh	r2, [r3, #28]
 8007d90:	e007      	b.n	8007da2 <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8b9b      	ldrh	r3, [r3, #28]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	839a      	strh	r2, [r3, #28]
  }
}
 8007da2:	f107 070c 	add.w	r7, r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr

08007dac <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8007db8:	887b      	ldrh	r3, [r7, #2]
 8007dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dbe:	d108      	bne.n	8007dd2 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	801a      	strh	r2, [r3, #0]
 8007dd0:	e007      	b.n	8007de2 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	801a      	strh	r2, [r3, #0]
  }
}
 8007de2:	f107 070c 	add.w	r7, r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bc80      	pop	{r7}
 8007dea:	4770      	bx	lr

08007dec <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8007df8:	887b      	ldrh	r3, [r7, #2]
 8007dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfe:	d108      	bne.n	8007e12 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	801a      	strh	r2, [r3, #0]
 8007e10:	e007      	b.n	8007e22 <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	801a      	strh	r2, [r3, #0]
  }
}
 8007e22:	f107 070c 	add.w	r7, r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr

08007e2c <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d008      	beq.n	8007e50 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f043 0310 	orr.w	r3, r3, #16
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	e007      	b.n	8007e60 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f023 0310 	bic.w	r3, r3, #16
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	801a      	strh	r2, [r3, #0]
  }
}
 8007e60:	f107 070c 	add.w	r7, r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop

08007e6c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8007e78:	78fb      	ldrb	r3, [r7, #3]
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	821a      	strh	r2, [r3, #16]
}
 8007e80:	f107 070c 	add.w	r7, r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop

08007e8c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	8a1b      	ldrh	r3, [r3, #16]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	b2db      	uxtb	r3, r3
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f107 070c 	add.w	r7, r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bc80      	pop	{r7}
 8007ea6:	4770      	bx	lr

08007ea8 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d008      	beq.n	8007ecc <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	801a      	strh	r2, [r3, #0]
 8007eca:	e007      	b.n	8007edc <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	801a      	strh	r2, [r3, #0]
  }
}
 8007edc:	f107 070c 	add.w	r7, r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop

08007ee8 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8007ef4:	887b      	ldrh	r3, [r7, #2]
 8007ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007efa:	d108      	bne.n	8007f0e <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	e007      	b.n	8007f1e <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	801a      	strh	r2, [r3, #0]
  }
}
 8007f1e:	f107 070c 	add.w	r7, r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bc80      	pop	{r7}
 8007f26:	4770      	bx	lr

08007f28 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d008      	beq.n	8007f4c <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	f043 0320 	orr.w	r3, r3, #32
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	801a      	strh	r2, [r3, #0]
 8007f4a:	e007      	b.n	8007f5c <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f023 0320 	bic.w	r3, r3, #32
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	801a      	strh	r2, [r3, #0]
  }
}
 8007f5c:	f107 070c 	add.w	r7, r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop

08007f68 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	8b1b      	ldrh	r3, [r3, #24]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	b2db      	uxtb	r3, r3
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f107 070c 	add.w	r7, r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop

08007f8c <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d008      	beq.n	8007fb0 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	889b      	ldrh	r3, [r3, #4]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	809a      	strh	r2, [r3, #4]
 8007fae:	e007      	b.n	8007fc0 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	889b      	ldrh	r3, [r3, #4]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	809a      	strh	r2, [r3, #4]
  }
}
 8007fc0:	f107 070c 	add.w	r7, r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop

08007fcc <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	889b      	ldrh	r3, [r3, #4]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	809a      	strh	r2, [r3, #4]
 8007fee:	e007      	b.n	8008000 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	889b      	ldrh	r3, [r3, #4]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	809a      	strh	r2, [r3, #4]
  }
}
 8008000:	f107 070c 	add.w	r7, r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop

0800800c <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8008018:	f04f 0300 	mov.w	r3, #0
 800801c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	18d3      	adds	r3, r2, r3
 8008028:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b29b      	uxth	r3, r3
}
 8008030:	4618      	mov	r0, r3
 8008032:	f107 0714 	add.w	r7, r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	460a      	mov	r2, r1
 8008048:	807a      	strh	r2, [r7, #2]
 800804a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800804c:	787b      	ldrb	r3, [r7, #1]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d008      	beq.n	8008064 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	889b      	ldrh	r3, [r3, #4]
 8008056:	b29a      	uxth	r2, r3
 8008058:	887b      	ldrh	r3, [r7, #2]
 800805a:	4313      	orrs	r3, r2
 800805c:	b29a      	uxth	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	809a      	strh	r2, [r3, #4]
 8008062:	e00a      	b.n	800807a <I2C_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	889b      	ldrh	r3, [r3, #4]
 8008068:	b29a      	uxth	r2, r3
 800806a:	887b      	ldrh	r3, [r7, #2]
 800806c:	ea6f 0303 	mvn.w	r3, r3
 8008070:	b29b      	uxth	r3, r3
 8008072:	4013      	ands	r3, r2
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	809a      	strh	r2, [r3, #4]
  }
}
 800807a:	f107 070c 	add.w	r7, r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr

08008084 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800808e:	f04f 0300 	mov.w	r3, #0
 8008092:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	8a9b      	ldrh	r3, [r3, #20]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	8b1b      	ldrh	r3, [r3, #24]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80080bc:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080c8:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	401a      	ands	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d103      	bne.n	80080de <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80080d6:	f04f 0301 	mov.w	r3, #1
 80080da:	75fb      	strb	r3, [r7, #23]
 80080dc:	e002      	b.n	80080e4 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	f107 071c 	add.w	r7, r7, #28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop

080080f4 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 80080fc:	f04f 0300 	mov.w	r3, #0
 8008100:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	f04f 0300 	mov.w	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8a9b      	ldrh	r3, [r3, #20]
 8008112:	b29b      	uxth	r3, r3
 8008114:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	8b1b      	ldrh	r3, [r3, #24]
 800811a:	b29b      	uxth	r3, r3
 800811c:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008124:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008130:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8008132:	697b      	ldr	r3, [r7, #20]
}
 8008134:	4618      	mov	r0, r3
 8008136:	f107 071c 	add.w	r7, r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	f04f 0300 	mov.w	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8008166:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800816e:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d004      	beq.n	8008180 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f103 0314 	add.w	r3, r3, #20
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	e007      	b.n	8008190 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008186:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f103 0318 	add.w	r3, r3, #24
 800818e:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	4013      	ands	r3, r2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800819c:	f04f 0301 	mov.w	r3, #1
 80081a0:	75fb      	strb	r3, [r7, #23]
 80081a2:	e002      	b.n	80081aa <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80081a4:	f04f 0300 	mov.w	r3, #0
 80081a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	f107 071c 	add.w	r7, r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bc80      	pop	{r7}
 80081b6:	4770      	bx	lr

080081b8 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081ce:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	ea6f 0303 	mvn.w	r3, r3
 80081d8:	b29a      	uxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	829a      	strh	r2, [r3, #20]
}
 80081de:	f107 0714 	add.w	r7, r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008204:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	889b      	ldrh	r3, [r3, #4]
 800820c:	b29b      	uxth	r3, r3
 800820e:	4013      	ands	r3, r2
 8008210:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008218:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	8a9b      	ldrh	r3, [r3, #20]
 800821e:	b29b      	uxth	r3, r3
 8008220:	461a      	mov	r2, r3
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	4013      	ands	r3, r2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d006      	beq.n	8008238 <I2C_GetITStatus+0x50>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <I2C_GetITStatus+0x50>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8008230:	f04f 0301 	mov.w	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]
 8008236:	e002      	b.n	800823e <I2C_GetITStatus+0x56>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 800823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008240:	4618      	mov	r0, r3
 8008242:	f107 0714 	add.w	r7, r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr

0800824c <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008262:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	b29b      	uxth	r3, r3
 8008268:	ea6f 0303 	mvn.w	r3, r3
 800826c:	b29a      	uxth	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	829a      	strh	r2, [r3, #20]
}
 8008272:	f107 0714 	add.w	r7, r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008280:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008284:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008288:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800828c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	f042 0201 	orr.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008298:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800829c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80082a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80082aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80082ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80082b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80082b6:	6812      	ldr	r2, [r2, #0]
 80082b8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80082bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80082c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80082c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80082ca:	f243 0210 	movw	r2, #12304	; 0x3010
 80082ce:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80082d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80082d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80082d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80082dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80082e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082ea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80082ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80082f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	60da      	str	r2, [r3, #12]
}
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr

08008300 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800830a:	f643 0302 	movw	r3, #14338	; 0x3802
 800830e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008312:	f04f 0200 	mov.w	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8008318:	f643 0302 	movw	r3, #14338	; 0x3802
 800831c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008320:	79fa      	ldrb	r2, [r7, #7]
 8008322:	701a      	strb	r2, [r3, #0]
}
 8008324:	f107 070c 	add.w	r7, r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	bc80      	pop	{r7}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop

08008330 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8008336:	f04f 0300 	mov.w	r3, #0
 800833a:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8008342:	f04f 0300 	mov.w	r3, #0
 8008346:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8008348:	f04f 0031 	mov.w	r0, #49	; 0x31
 800834c:	f000 fdf4 	bl	8008f38 <RCC_GetFlagStatus>
 8008350:	4603      	mov	r3, r0
 8008352:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	f103 0301 	add.w	r3, r3, #1
 800835a:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008362:	d002      	beq.n	800836a <RCC_WaitForHSEStartUp+0x3a>
 8008364:	79bb      	ldrb	r3, [r7, #6]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0ee      	beq.n	8008348 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800836a:	f04f 0031 	mov.w	r0, #49	; 0x31
 800836e:	f000 fde3 	bl	8008f38 <RCC_GetFlagStatus>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8008378:	f04f 0301 	mov.w	r3, #1
 800837c:	71fb      	strb	r3, [r7, #7]
 800837e:	e002      	b.n	8008386 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8008386:	79fb      	ldrb	r3, [r7, #7]
}
 8008388:	4618      	mov	r0, r3
 800838a:	f107 0708 	add.w	r7, r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop

08008394 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800839e:	f04f 0300 	mov.w	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80083a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80083a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 80083c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80083c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	601a      	str	r2, [r3, #0]
}
 80083d0:	f107 0714 	add.w	r7, r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop

080083dc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80083e6:	f04f 0300 	mov.w	r3, #0
 80083ea:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80083ee:	79fa      	ldrb	r2, [r7, #7]
 80083f0:	601a      	str	r2, [r3, #0]
}
 80083f2:	f107 070c 	add.w	r7, r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr

080083fc <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008406:	f643 0370 	movw	r3, #14448	; 0x3870
 800840a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008414:	f643 0370 	movw	r3, #14448	; 0x3870
 8008418:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d002      	beq.n	800842e <RCC_LSEConfig+0x32>
 8008428:	2b04      	cmp	r3, #4
 800842a:	d008      	beq.n	800843e <RCC_LSEConfig+0x42>
 800842c:	e00f      	b.n	800844e <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800842e:	f643 0370 	movw	r3, #14448	; 0x3870
 8008432:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008436:	f04f 0201 	mov.w	r2, #1
 800843a:	701a      	strb	r2, [r3, #0]
      break;
 800843c:	e008      	b.n	8008450 <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800843e:	f643 0370 	movw	r3, #14448	; 0x3870
 8008442:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008446:	f04f 0205 	mov.w	r2, #5
 800844a:	701a      	strb	r2, [r3, #0]
      break;
 800844c:	e000      	b.n	8008450 <RCC_LSEConfig+0x54>
    default:
      break;
 800844e:	bf00      	nop
  }
}
 8008450:	f107 070c 	add.w	r7, r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop

0800845c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8008466:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 800846a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800846e:	79fa      	ldrb	r2, [r7, #7]
 8008470:	601a      	str	r2, [r3, #0]
}
 8008472:	f107 070c 	add.w	r7, r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800848a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800848e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	4311      	orrs	r1, r2
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80084a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80084a6:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80084aa:	4311      	orrs	r1, r2
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80084b6:	430a      	orrs	r2, r1
 80084b8:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 80084ba:	f107 0714 	add.w	r7, r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr

080084c4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80084ce:	f04f 0360 	mov.w	r3, #96	; 0x60
 80084d2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80084d6:	79fa      	ldrb	r2, [r7, #7]
 80084d8:	601a      	str	r2, [r3, #0]
}
 80084da:	f107 070c 	add.w	r7, r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80084ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80084f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	ea4f 1182 	mov.w	r1, r2, lsl #6
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	ea4f 7202 	mov.w	r2, r2, lsl #28
 8008502:	430a      	orrs	r2, r1
 8008504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008508:	f107 070c 	add.w	r7, r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop

08008514 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800851e:	f04f 0368 	mov.w	r3, #104	; 0x68
 8008522:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008526:	79fa      	ldrb	r2, [r7, #7]
 8008528:	601a      	str	r2, [r3, #0]
}
 800852a:	f107 070c 	add.w	r7, r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr

08008534 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800853e:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8008542:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008546:	79fa      	ldrb	r2, [r7, #7]
 8008548:	601a      	str	r2, [r3, #0]
}
 800854a:	f107 070c 	add.w	r7, r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	bc80      	pop	{r7}
 8008552:	4770      	bx	lr

08008554 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8008564:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008568:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8008576:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	4313      	orrs	r3, r2
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8008584:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008588:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	609a      	str	r2, [r3, #8]
}
 8008590:	f107 0714 	add.w	r7, r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop

0800859c <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80085a6:	f04f 0300 	mov.w	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80085ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80085b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80085be:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80085cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80085d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	609a      	str	r2, [r3, #8]
}
 80085d8:	f107 0714 	add.w	r7, r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop

080085e4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80085f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80085f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f023 0303 	bic.w	r3, r3, #3
 8008604:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800860e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008612:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	609a      	str	r2, [r3, #8]
}
 800861a:	f107 0714 	add.w	r7, r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr

08008624 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8008628:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800862c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f003 030c 	and.w	r3, r3, #12
 8008638:	b2db      	uxtb	r3, r3
}
 800863a:	4618      	mov	r0, r3
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop

08008644 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800864c:	f04f 0300 	mov.w	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8008652:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008656:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008664:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800866e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008672:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	609a      	str	r2, [r3, #8]
}
 800867a:	f107 0714 	add.w	r7, r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr

08008684 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800868c:	f04f 0300 	mov.w	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8008692:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008696:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80086a4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80086ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80086b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	609a      	str	r2, [r3, #8]
}
 80086ba:	f107 0714 	add.w	r7, r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr

080086c4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80086cc:	f04f 0300 	mov.w	r3, #0
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80086d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80086d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80086e4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80086f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80086f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	609a      	str	r2, [r3, #8]
}
 80086fe:	f107 0714 	add.w	r7, r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr

08008708 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8008708:	b480      	push	{r7}
 800870a:	b089      	sub	sp, #36	; 0x24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	f04f 0300 	mov.w	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	61fb      	str	r3, [r7, #28]
 8008722:	f04f 0302 	mov.w	r3, #2
 8008726:	613b      	str	r3, [r7, #16]
 8008728:	f04f 0300 	mov.w	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	f04f 0302 	mov.w	r3, #2
 8008732:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8008734:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008738:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 030c 	and.w	r3, r3, #12
 8008742:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	2b04      	cmp	r3, #4
 8008748:	d00a      	beq.n	8008760 <RCC_GetClocksFreq+0x58>
 800874a:	2b08      	cmp	r3, #8
 800874c:	d00f      	beq.n	800876e <RCC_GetClocksFreq+0x66>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d162      	bne.n	8008818 <RCC_GetClocksFreq+0x110>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8008758:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800875c:	6013      	str	r3, [r2, #0]
      break;
 800875e:	e062      	b.n	8008826 <RCC_GetClocksFreq+0x11e>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8008766:	f2c0 037a 	movt	r3, #122	; 0x7a
 800876a:	6013      	str	r3, [r2, #0]
      break;
 800876c:	e05b      	b.n	8008826 <RCC_GetClocksFreq+0x11e>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800876e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008772:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800877c:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8008780:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008782:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008786:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008790:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d015      	beq.n	80087c4 <RCC_GetClocksFreq+0xbc>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8008798:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800879c:	f2c0 037a 	movt	r3, #122	; 0x7a
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80087a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80087aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	4619      	mov	r1, r3
 80087b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087b6:	400b      	ands	r3, r1
 80087b8:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80087bc:	fb03 f302 	mul.w	r3, r3, r2
 80087c0:	61fb      	str	r3, [r7, #28]
 80087c2:	e014      	b.n	80087ee <RCC_GetClocksFreq+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80087c4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80087c8:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80087d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80087d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	4619      	mov	r1, r3
 80087de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087e2:	400b      	ands	r3, r1
 80087e4:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80087e8:	fb03 f302 	mul.w	r3, r3, r2
 80087ec:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80087ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80087f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087fc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008800:	f103 0301 	add.w	r3, r3, #1
 8008804:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008808:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	601a      	str	r2, [r3, #0]
      break;
 8008816:	e006      	b.n	8008826 <RCC_GetClocksFreq+0x11e>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800881e:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8008822:	6013      	str	r3, [r2, #0]
      break;
 8008824:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8008826:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800882a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008834:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800883c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800883e:	f640 03ec 	movw	r3, #2284	; 0x8ec
 8008842:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	189b      	adds	r3, r3, r2
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	fa22 f203 	lsr.w	r2, r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800885e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008862:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800886c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8008874:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8008876:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800887a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	189b      	adds	r3, r3, r2
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	fa22 f203 	lsr.w	r2, r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8008896:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800889a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80088a4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	ea4f 3353 	mov.w	r3, r3, lsr #13
 80088ac:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80088ae:	f640 03ec 	movw	r3, #2284	; 0x8ec
 80088b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	189b      	adds	r3, r3, r2
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	fa22 f203 	lsr.w	r2, r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	60da      	str	r2, [r3, #12]
}
 80088ce:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr

080088d8 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80088e0:	f04f 0300 	mov.w	r3, #0
 80088e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088f0:	d117      	bne.n	8008922 <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80088f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80088f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008904:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800890c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8008916:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800891a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8008922:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008926:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800892a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800892e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008932:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008934:	4611      	mov	r1, r2
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	ea4f 5202 	mov.w	r2, r2, lsl #20
 800893c:	ea4f 5212 	mov.w	r2, r2, lsr #20
 8008940:	430a      	orrs	r2, r1
 8008942:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008944:	f107 0714 	add.w	r7, r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop

08008950 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800895a:	f640 633c 	movw	r3, #3644	; 0xe3c
 800895e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008962:	79fa      	ldrb	r2, [r7, #7]
 8008964:	601a      	str	r2, [r3, #0]
}
 8008966:	f107 070c 	add.w	r7, r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	bc80      	pop	{r7}
 800896e:	4770      	bx	lr

08008970 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800897a:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 800897e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008982:	79fa      	ldrb	r2, [r7, #7]
 8008984:	601a      	str	r2, [r3, #0]
}
 8008986:	f107 070c 	add.w	r7, r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8008998:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 800899c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
}
 80089a4:	f107 070c 	add.w	r7, r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop

080089b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00d      	beq.n	80089de <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80089c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80089c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80089ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80089d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089d4:	4611      	mov	r1, r2
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	430a      	orrs	r2, r1
 80089da:	631a      	str	r2, [r3, #48]	; 0x30
 80089dc:	e00e      	b.n	80089fc <RCC_AHB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80089de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80089e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089e6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80089ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80089ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089f0:	4611      	mov	r1, r2
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	ea6f 0202 	mvn.w	r2, r2
 80089f8:	400a      	ands	r2, r1
 80089fa:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80089fc:	f107 070c 	add.w	r7, r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bc80      	pop	{r7}
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop

08008a08 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00d      	beq.n	8008a36 <RCC_AHB2PeriphClockCmd+0x2e>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8008a1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008a1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a22:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008a26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	635a      	str	r2, [r3, #52]	; 0x34
 8008a34:	e00e      	b.n	8008a54 <RCC_AHB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8008a36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008a3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a3e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008a42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a48:	4611      	mov	r1, r2
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	ea6f 0202 	mvn.w	r2, r2
 8008a50:	400a      	ands	r2, r1
 8008a52:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8008a54:	f107 070c 	add.w	r7, r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop

08008a60 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00d      	beq.n	8008a8e <RCC_AHB3PeriphClockCmd+0x2e>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8008a72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008a76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a7a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008a7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a84:	4611      	mov	r1, r2
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	639a      	str	r2, [r3, #56]	; 0x38
 8008a8c:	e00e      	b.n	8008aac <RCC_AHB3PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8008a8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008a92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008a9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	ea6f 0202 	mvn.w	r2, r2
 8008aa8:	400a      	ands	r2, r1
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8008aac:	f107 070c 	add.w	r7, r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bc80      	pop	{r7}
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00d      	beq.n	8008ae6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8008aca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ace:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ad2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008ad6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ada:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008adc:	4611      	mov	r1, r2
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8008ae4:	e00e      	b.n	8008b04 <RCC_APB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8008ae6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008aea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008aee:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008af2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008af6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008af8:	4611      	mov	r1, r2
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	ea6f 0202 	mvn.w	r2, r2
 8008b00:	400a      	ands	r2, r1
 8008b02:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8008b04:	f107 070c 	add.w	r7, r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop

08008b10 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00d      	beq.n	8008b3e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8008b22:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b2a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008b2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b34:	4611      	mov	r1, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	645a      	str	r2, [r3, #68]	; 0x44
 8008b3c:	e00e      	b.n	8008b5c <RCC_APB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8008b3e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b46:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008b4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b50:	4611      	mov	r1, r2
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	ea6f 0202 	mvn.w	r2, r2
 8008b58:	400a      	ands	r2, r1
 8008b5a:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8008b5c:	f107 070c 	add.w	r7, r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop

08008b68 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00d      	beq.n	8008b96 <RCC_AHB1PeriphResetCmd+0x2e>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8008b7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b82:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008b86:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b8a:	6912      	ldr	r2, [r2, #16]
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	611a      	str	r2, [r3, #16]
 8008b94:	e00e      	b.n	8008bb4 <RCC_AHB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8008b96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b9e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008ba2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ba6:	6912      	ldr	r2, [r2, #16]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	ea6f 0202 	mvn.w	r2, r2
 8008bb0:	400a      	ands	r2, r1
 8008bb2:	611a      	str	r2, [r3, #16]
  }
}
 8008bb4:	f107 070c 	add.w	r7, r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bc80      	pop	{r7}
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop

08008bc0 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00d      	beq.n	8008bee <RCC_AHB2PeriphResetCmd+0x2e>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8008bd2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bda:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008bde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008be2:	6952      	ldr	r2, [r2, #20]
 8008be4:	4611      	mov	r1, r2
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	615a      	str	r2, [r3, #20]
 8008bec:	e00e      	b.n	8008c0c <RCC_AHB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8008bee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008bf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bf6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008bfa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008bfe:	6952      	ldr	r2, [r2, #20]
 8008c00:	4611      	mov	r1, r2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	ea6f 0202 	mvn.w	r2, r2
 8008c08:	400a      	ands	r2, r1
 8008c0a:	615a      	str	r2, [r3, #20]
  }
}
 8008c0c:	f107 070c 	add.w	r7, r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc80      	pop	{r7}
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop

08008c18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00d      	beq.n	8008c46 <RCC_AHB3PeriphResetCmd+0x2e>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8008c2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c32:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008c36:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c3a:	6992      	ldr	r2, [r2, #24]
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	430a      	orrs	r2, r1
 8008c42:	619a      	str	r2, [r3, #24]
 8008c44:	e00e      	b.n	8008c64 <RCC_AHB3PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8008c46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c4e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008c52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c56:	6992      	ldr	r2, [r2, #24]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	ea6f 0202 	mvn.w	r2, r2
 8008c60:	400a      	ands	r2, r1
 8008c62:	619a      	str	r2, [r3, #24]
  }
}
 8008c64:	f107 070c 	add.w	r7, r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bc80      	pop	{r7}
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop

08008c70 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00d      	beq.n	8008c9e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8008c82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c8a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008c8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c92:	6a12      	ldr	r2, [r2, #32]
 8008c94:	4611      	mov	r1, r2
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	621a      	str	r2, [r3, #32]
 8008c9c:	e00e      	b.n	8008cbc <RCC_APB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8008c9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ca2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ca6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008caa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008cae:	6a12      	ldr	r2, [r2, #32]
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	ea6f 0202 	mvn.w	r2, r2
 8008cb8:	400a      	ands	r2, r1
 8008cba:	621a      	str	r2, [r3, #32]
  }
}
 8008cbc:	f107 070c 	add.w	r7, r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bc80      	pop	{r7}
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop

08008cc8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00d      	beq.n	8008cf6 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8008cda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008cde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ce2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008ce6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008cea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008cec:	4611      	mov	r1, r2
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	625a      	str	r2, [r3, #36]	; 0x24
 8008cf4:	e00e      	b.n	8008d14 <RCC_APB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8008cf6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008cfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cfe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008d02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008d06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d08:	4611      	mov	r1, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	ea6f 0202 	mvn.w	r2, r2
 8008d10:	400a      	ands	r2, r1
 8008d12:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008d14:	f107 070c 	add.w	r7, r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bc80      	pop	{r7}
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop

08008d20 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00d      	beq.n	8008d4e <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8008d32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d3a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008d3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008d42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d44:	4611      	mov	r1, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	651a      	str	r2, [r3, #80]	; 0x50
 8008d4c:	e00e      	b.n	8008d6c <RCC_AHB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8008d4e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d56:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008d5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008d5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d60:	4611      	mov	r1, r2
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	ea6f 0202 	mvn.w	r2, r2
 8008d68:	400a      	ands	r2, r1
 8008d6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8008d6c:	f107 070c 	add.w	r7, r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bc80      	pop	{r7}
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop

08008d78 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00d      	beq.n	8008da6 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8008d8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d92:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008d96:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008d9a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	655a      	str	r2, [r3, #84]	; 0x54
 8008da4:	e00e      	b.n	8008dc4 <RCC_AHB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8008da6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008daa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008dae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008db2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008db6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008db8:	4611      	mov	r1, r2
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	ea6f 0202 	mvn.w	r2, r2
 8008dc0:	400a      	ands	r2, r1
 8008dc2:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8008dc4:	f107 070c 	add.w	r7, r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bc80      	pop	{r7}
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop

08008dd0 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00d      	beq.n	8008dfe <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8008de2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008de6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008dea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008dee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008df2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008df4:	4611      	mov	r1, r2
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8008dfc:	e00e      	b.n	8008e1c <RCC_AHB3PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8008dfe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e06:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008e0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008e0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008e10:	4611      	mov	r1, r2
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	ea6f 0202 	mvn.w	r2, r2
 8008e18:	400a      	ands	r2, r1
 8008e1a:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8008e1c:	f107 070c 	add.w	r7, r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop

08008e28 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00d      	beq.n	8008e56 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8008e3a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e42:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008e46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008e4a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	661a      	str	r2, [r3, #96]	; 0x60
 8008e54:	e00e      	b.n	8008e74 <RCC_APB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8008e56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e5e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008e62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008e66:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8008e68:	4611      	mov	r1, r2
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	ea6f 0202 	mvn.w	r2, r2
 8008e70:	400a      	ands	r2, r1
 8008e72:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8008e74:	f107 070c 	add.w	r7, r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop

08008e80 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00d      	beq.n	8008eae <RCC_APB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8008e92:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e9a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008e9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ea2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	665a      	str	r2, [r3, #100]	; 0x64
 8008eac:	e00e      	b.n	8008ecc <RCC_APB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8008eae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008eb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008eb6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008eba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ebe:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	ea6f 0202 	mvn.w	r2, r2
 8008ec8:	400a      	ands	r2, r1
 8008eca:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8008ecc:	f107 070c 	add.w	r7, r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop

08008ed8 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	71fa      	strb	r2, [r7, #7]
 8008ee4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ee6:	79bb      	ldrb	r3, [r7, #6]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00e      	beq.n	8008f0a <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8008eec:	f643 030d 	movw	r3, #14349	; 0x380d
 8008ef0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ef4:	f643 020d 	movw	r2, #14349	; 0x380d
 8008ef8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008efc:	7812      	ldrb	r2, [r2, #0]
 8008efe:	b2d1      	uxtb	r1, r2
 8008f00:	79fa      	ldrb	r2, [r7, #7]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	b2d2      	uxtb	r2, r2
 8008f06:	701a      	strb	r2, [r3, #0]
 8008f08:	e010      	b.n	8008f2c <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8008f0a:	f643 030d 	movw	r3, #14349	; 0x380d
 8008f0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f12:	f643 020d 	movw	r2, #14349	; 0x380d
 8008f16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f1a:	7812      	ldrb	r2, [r2, #0]
 8008f1c:	b2d1      	uxtb	r1, r2
 8008f1e:	79fa      	ldrb	r2, [r7, #7]
 8008f20:	ea6f 0202 	mvn.w	r2, r2
 8008f24:	b2d2      	uxtb	r2, r2
 8008f26:	400a      	ands	r2, r1
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	701a      	strb	r2, [r3, #0]
  }
}
 8008f2c:	f107 070c 	add.w	r7, r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bc80      	pop	{r7}
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop

08008f38 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8008f42:	f04f 0300 	mov.w	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8008f48:	f04f 0300 	mov.w	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8008f4e:	f04f 0300 	mov.w	r3, #0
 8008f52:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8008f54:	79fb      	ldrb	r3, [r7, #7]
 8008f56:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d106      	bne.n	8008f72 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8008f64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008f68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	617b      	str	r3, [r7, #20]
 8008f70:	e00f      	b.n	8008f92 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d106      	bne.n	8008f86 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8008f78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008f7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	e005      	b.n	8008f92 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8008f86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008f8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f90:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8008f92:	79fb      	ldrb	r3, [r7, #7]
 8008f94:	f003 031f 	and.w	r3, r3, #31
 8008f98:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 8008fac:	f04f 0301 	mov.w	r3, #1
 8008fb0:	74fb      	strb	r3, [r7, #19]
 8008fb2:	e002      	b.n	8008fba <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 8008fb4:	f04f 0300 	mov.w	r3, #0
 8008fb8:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8008fba:	7cfb      	ldrb	r3, [r7, #19]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f107 071c 	add.w	r7, r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bc80      	pop	{r7}
 8008fc6:	4770      	bx	lr

08008fc8 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8008fcc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008fd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fd4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008fd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008fdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008fde:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008fe2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop

08008fec <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8008ff6:	f04f 0300 	mov.w	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8008ffc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009000:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	461a      	mov	r2, r3
 8009008:	79fb      	ldrb	r3, [r7, #7]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <RCC_GetITStatus+0x2c>
  {
    bitstatus = SET;
 8009010:	f04f 0301 	mov.w	r3, #1
 8009014:	73fb      	strb	r3, [r7, #15]
 8009016:	e002      	b.n	800901e <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 8009018:	f04f 0300 	mov.w	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800901e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009020:	4618      	mov	r0, r3
 8009022:	f107 0714 	add.w	r7, r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	bc80      	pop	{r7}
 800902a:	4770      	bx	lr

0800902c <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8009036:	f643 030e 	movw	r3, #14350	; 0x380e
 800903a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800903e:	79fa      	ldrb	r2, [r7, #7]
 8009040:	701a      	strb	r2, [r3, #0]
}
 8009042:	f107 070c 	add.w	r7, r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr

0800904c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800905a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800905e:	429a      	cmp	r2, r3
 8009060:	d10c      	bne.n	800907c <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8009062:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009066:	f04f 0101 	mov.w	r1, #1
 800906a:	f7ff fe2d 	bl	8008cc8 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800906e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009072:	f04f 0100 	mov.w	r1, #0
 8009076:	f7ff fe27 	bl	8008cc8 <RCC_APB2PeriphResetCmd>
 800907a:	e026      	b.n	80090ca <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009082:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009086:	429a      	cmp	r2, r3
 8009088:	d10c      	bne.n	80090a4 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800908a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800908e:	f04f 0101 	mov.w	r1, #1
 8009092:	f7ff fded 	bl	8008c70 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8009096:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800909a:	f04f 0100 	mov.w	r1, #0
 800909e:	f7ff fde7 	bl	8008c70 <RCC_APB1PeriphResetCmd>
 80090a2:	e012      	b.n	80090ca <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80090aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d10b      	bne.n	80090ca <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80090b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80090b6:	f04f 0101 	mov.w	r1, #1
 80090ba:	f7ff fdd9 	bl	8008c70 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80090be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80090c2:	f04f 0100 	mov.w	r1, #0
 80090c6:	f7ff fdd3 	bl	8008c70 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80090ca:	f107 0708 	add.w	r7, r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop

080090d4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80090de:	f04f 0300 	mov.w	r3, #0
 80090e2:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80090ea:	89fb      	ldrh	r3, [r7, #14]
 80090ec:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80090f0:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	881a      	ldrh	r2, [r3, #0]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	885b      	ldrh	r3, [r3, #2]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009102:	4313      	orrs	r3, r2
 8009104:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800910a:	4313      	orrs	r3, r2
 800910c:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009112:	4313      	orrs	r3, r2
 8009114:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800911a:	4313      	orrs	r3, r2
 800911c:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009122:	4313      	orrs	r3, r2
 8009124:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800912a:	4313      	orrs	r3, r2
 800912c:	b29a      	uxth	r2, r3
 800912e:	89fb      	ldrh	r3, [r7, #14]
 8009130:	4313      	orrs	r3, r2
 8009132:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	89fa      	ldrh	r2, [r7, #14]
 8009138:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	8b9b      	ldrh	r3, [r3, #28]
 800913e:	b29b      	uxth	r3, r3
 8009140:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009144:	b29a      	uxth	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	8a1a      	ldrh	r2, [r3, #16]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	821a      	strh	r2, [r3, #16]
}
 8009152:	f107 0714 	add.w	r7, r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	bc80      	pop	{r7}
 800915a:	4770      	bx	lr

0800915c <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800915c:	b480      	push	{r7}
 800915e:	b08b      	sub	sp, #44	; 0x2c
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	837b      	strh	r3, [r7, #26]
 800916c:	f04f 0302 	mov.w	r3, #2
 8009170:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009178:	f04f 0301 	mov.w	r3, #1
 800917c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800917e:	f04f 0300 	mov.w	r3, #0
 8009182:	61fb      	str	r3, [r7, #28]
 8009184:	f04f 0300 	mov.w	r3, #0
 8009188:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800918a:	f04f 0300 	mov.w	r3, #0
 800918e:	613b      	str	r3, [r7, #16]
 8009190:	f04f 0300 	mov.w	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	f04f 0300 	mov.w	r3, #0
 800919a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	8b9b      	ldrh	r3, [r3, #28]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 80091a6:	f023 031f 	bic.w	r3, r3, #31
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f04f 0202 	mov.w	r2, #2
 80091b6:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	8b9b      	ldrh	r3, [r3, #28]
 80091bc:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d106      	bne.n	80091d4 <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 80091c6:	f04f 0300 	mov.w	r3, #0
 80091ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 80091cc:	f04f 0302 	mov.w	r3, #2
 80091d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80091d2:	e09b      	b.n	800930c <I2S_Init+0x1b0>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	889b      	ldrh	r3, [r3, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d103      	bne.n	80091e4 <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80091dc:	f04f 0301 	mov.w	r3, #1
 80091e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80091e2:	e002      	b.n	80091ea <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 80091e4:	f04f 0302 	mov.w	r3, #2
 80091e8:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80091ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80091fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009200:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009204:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009208:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800920c:	6892      	ldr	r2, [r2, #8]
 800920e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009212:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8009214:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009218:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800921c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009220:	461a      	mov	r2, r3
 8009222:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009226:	4013      	ands	r3, r2
 8009228:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800922c:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8009230:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8009234:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8009236:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800923a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800923e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009242:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009246:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8009250:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800925e:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8009260:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8009264:	f2c0 037a 	movt	r3, #122	; 0x7a
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	fbb3 f3f2 	udiv	r3, r3, r2
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	fb02 f203 	mul.w	r2, r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	fbb2 f3f3 	udiv	r3, r2, r3
 800927a:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	88db      	ldrh	r3, [r3, #6]
 8009280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009284:	d113      	bne.n	80092ae <I2S_Init+0x152>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800928c:	4613      	mov	r3, r2
 800928e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009292:	189b      	adds	r3, r3, r2
 8009294:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009298:	461a      	mov	r2, r3
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	f103 0305 	add.w	r3, r3, #5
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	61fb      	str	r3, [r7, #28]
 80092ac:	e015      	b.n	80092da <I2S_Init+0x17e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80092ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092b0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80092ba:	4613      	mov	r3, r2
 80092bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80092c0:	189b      	adds	r3, r3, r2
 80092c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092c6:	461a      	mov	r2, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	f103 0305 	add.w	r3, r3, #5
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 80092e0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 80092e4:	fba3 1302 	umull	r1, r3, r3, r2
 80092e8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80092ec:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80092f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092fa:	69fa      	ldr	r2, [r7, #28]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8009302:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8009304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009306:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800930a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800930c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800930e:	2b01      	cmp	r3, #1
 8009310:	d902      	bls.n	8009318 <I2S_Init+0x1bc>
 8009312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009314:	2bff      	cmp	r3, #255	; 0xff
 8009316:	d905      	bls.n	8009324 <I2S_Init+0x1c8>
  {
    /* Set the default values */
    i2sdiv = 2;
 8009318:	f04f 0302 	mov.w	r3, #2
 800931c:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800931e:	f04f 0300 	mov.w	r3, #0
 8009322:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	88da      	ldrh	r2, [r3, #6]
 8009328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800932a:	4313      	orrs	r3, r2
 800932c:	b29a      	uxth	r2, r3
 800932e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009330:	4313      	orrs	r3, r2
 8009332:	b29a      	uxth	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	8859      	ldrh	r1, [r3, #2]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8009348:	4303      	orrs	r3, r0
 800934a:	b29b      	uxth	r3, r3
 800934c:	430b      	orrs	r3, r1
 800934e:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8009350:	4313      	orrs	r3, r2
 8009352:	b29a      	uxth	r2, r3
 8009354:	8b7b      	ldrh	r3, [r7, #26]
 8009356:	4313      	orrs	r3, r2
 8009358:	b29b      	uxth	r3, r3
 800935a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800935e:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	8b7a      	ldrh	r2, [r7, #26]
 8009364:	839a      	strh	r2, [r3, #28]
}
 8009366:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 800936a:	46bd      	mov	sp, r7
 800936c:	bc80      	pop	{r7}
 800936e:	4770      	bx	lr

08009370 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f04f 0200 	mov.w	r2, #0
 8009386:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f04f 0200 	mov.w	r2, #0
 800938e:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f04f 0200 	mov.w	r2, #0
 80093ae:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f04f 0207 	mov.w	r2, #7
 80093be:	821a      	strh	r2, [r3, #16]
}
 80093c0:	f107 070c 	add.w	r7, r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop

080093cc <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f04f 0200 	mov.w	r2, #0
 80093da:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f04f 0200 	mov.w	r2, #0
 80093e2:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f04f 0200 	mov.w	r2, #0
 80093ea:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f04f 0200 	mov.w	r2, #0
 80093f2:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f04f 0202 	mov.w	r2, #2
 80093fa:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	819a      	strh	r2, [r3, #12]
}
 8009404:	f107 070c 	add.w	r7, r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	bc80      	pop	{r7}
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop

08009410 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d008      	beq.n	8009434 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800942c:	b29a      	uxth	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	801a      	strh	r2, [r3, #0]
 8009432:	e007      	b.n	8009444 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800943e:	b29a      	uxth	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	801a      	strh	r2, [r3, #0]
  }
}
 8009444:	f107 070c 	add.w	r7, r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	bc80      	pop	{r7}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop

08009450 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d008      	beq.n	8009474 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	8b9b      	ldrh	r3, [r3, #28]
 8009466:	b29b      	uxth	r3, r3
 8009468:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800946c:	b29a      	uxth	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	839a      	strh	r2, [r3, #28]
 8009472:	e007      	b.n	8009484 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	8b9b      	ldrh	r3, [r3, #28]
 8009478:	b29b      	uxth	r3, r3
 800947a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800947e:	b29a      	uxth	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	839a      	strh	r2, [r3, #28]
  }
}
 8009484:	f107 070c 	add.w	r7, r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	bc80      	pop	{r7}
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop

08009490 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	887b      	ldrh	r3, [r7, #2]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	801a      	strh	r2, [r3, #0]
}
 80094bc:	f107 070c 	add.w	r7, r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bc80      	pop	{r7}
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop

080094c8 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 80094d4:	887b      	ldrh	r3, [r7, #2]
 80094d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094da:	d108      	bne.n	80094ee <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	801a      	strh	r2, [r3, #0]
 80094ec:	e007      	b.n	80094fe <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	801a      	strh	r2, [r3, #0]
  }
}
 80094fe:	f107 070c 	add.w	r7, r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	bc80      	pop	{r7}
 8009506:	4770      	bx	lr

08009508 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8009514:	887a      	ldrh	r2, [r7, #2]
 8009516:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800951a:	429a      	cmp	r2, r3
 800951c:	d008      	beq.n	8009530 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	b29b      	uxth	r3, r3
 8009524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009528:	b29a      	uxth	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	801a      	strh	r2, [r3, #0]
 800952e:	e007      	b.n	8009540 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	b29b      	uxth	r3, r3
 8009536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800953a:	b29a      	uxth	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	801a      	strh	r2, [r3, #0]
  }
}
 8009540:	f107 070c 	add.w	r7, r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	bc80      	pop	{r7}
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop

0800954c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	889b      	ldrh	r3, [r3, #4]
 8009562:	b29b      	uxth	r3, r3
 8009564:	f043 0304 	orr.w	r3, r3, #4
 8009568:	b29a      	uxth	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	809a      	strh	r2, [r3, #4]
 800956e:	e007      	b.n	8009580 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	889b      	ldrh	r3, [r3, #4]
 8009574:	b29b      	uxth	r3, r3
 8009576:	f023 0304 	bic.w	r3, r3, #4
 800957a:	b29a      	uxth	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	809a      	strh	r2, [r3, #4]
  }
}
 8009580:	f107 070c 	add.w	r7, r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	bc80      	pop	{r7}
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop

0800958c <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d008      	beq.n	80095b0 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	889b      	ldrh	r3, [r3, #4]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f043 0310 	orr.w	r3, r3, #16
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	809a      	strh	r2, [r3, #4]
 80095ae:	e007      	b.n	80095c0 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	889b      	ldrh	r3, [r3, #4]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	f023 0310 	bic.w	r3, r3, #16
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	809a      	strh	r2, [r3, #4]
  }
}
 80095c0:	f107 070c 	add.w	r7, r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bc80      	pop	{r7}
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop

080095cc <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 80095d6:	f04f 0300 	mov.w	r3, #0
 80095da:	81bb      	strh	r3, [r7, #12]
 80095dc:	f04f 0300 	mov.w	r3, #0
 80095e0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	8b9b      	ldrh	r3, [r3, #28]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 80095ec:	f023 031f 	bic.w	r3, r3, #31
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f04f 0202 	mov.w	r2, #2
 80095fc:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	8b9b      	ldrh	r3, [r3, #28]
 8009602:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800960c:	d003      	beq.n	8009616 <I2S_FullDuplexConfig+0x4a>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d103      	bne.n	800961e <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 8009616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800961a:	81fb      	strh	r3, [r7, #14]
 800961c:	e00c      	b.n	8009638 <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009626:	d004      	beq.n	8009632 <I2S_FullDuplexConfig+0x66>
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009630:	d102      	bne.n	8009638 <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 8009632:	f04f 0300 	mov.w	r3, #0
 8009636:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	885a      	ldrh	r2, [r3, #2]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8009644:	430b      	orrs	r3, r1
 8009646:	b29b      	uxth	r3, r3
 8009648:	4313      	orrs	r3, r2
 800964a:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800964c:	89fb      	ldrh	r3, [r7, #14]
 800964e:	4313      	orrs	r3, r2
 8009650:	b29a      	uxth	r2, r3
 8009652:	89bb      	ldrh	r3, [r7, #12]
 8009654:	4313      	orrs	r3, r2
 8009656:	b29b      	uxth	r3, r3
 8009658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800965c:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	89ba      	ldrh	r2, [r7, #12]
 8009662:	839a      	strh	r2, [r3, #28]
}
 8009664:	f107 0714 	add.w	r7, r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop

08009670 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	899b      	ldrh	r3, [r3, #12]
 800967c:	b29b      	uxth	r3, r3
}
 800967e:	4618      	mov	r0, r3
 8009680:	f107 070c 	add.w	r7, r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	bc80      	pop	{r7}
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop

0800968c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	887a      	ldrh	r2, [r7, #2]
 800969c:	819a      	strh	r2, [r3, #12]
}
 800969e:	f107 070c 	add.w	r7, r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bc80      	pop	{r7}
 80096a6:	4770      	bx	lr

080096a8 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d008      	beq.n	80096cc <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	801a      	strh	r2, [r3, #0]
 80096ca:	e007      	b.n	80096dc <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	801a      	strh	r2, [r3, #0]
  }
}
 80096dc:	f107 070c 	add.w	r7, r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop

080096e8 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	801a      	strh	r2, [r3, #0]
}
 8009700:	f107 070c 	add.w	r7, r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	bc80      	pop	{r7}
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop

0800970c <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 8009718:	f04f 0300 	mov.w	r3, #0
 800971c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d003      	beq.n	800972c <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	8b1b      	ldrh	r3, [r3, #24]
 8009728:	81fb      	strh	r3, [r7, #14]
 800972a:	e002      	b.n	8009732 <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	8a9b      	ldrh	r3, [r3, #20]
 8009730:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 8009732:	89fb      	ldrh	r3, [r7, #14]
}
 8009734:	4618      	mov	r0, r3
 8009736:	f107 0714 	add.w	r7, r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	bc80      	pop	{r7}
 800973e:	4770      	bx	lr

08009740 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	8a1b      	ldrh	r3, [r3, #16]
 800974c:	b29b      	uxth	r3, r3
}
 800974e:	4618      	mov	r0, r3
 8009750:	f107 070c 	add.w	r7, r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop

0800975c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	460a      	mov	r2, r1
 8009768:	807a      	strh	r2, [r7, #2]
 800976a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800976c:	787b      	ldrb	r3, [r7, #1]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d008      	beq.n	8009784 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	889b      	ldrh	r3, [r3, #4]
 8009776:	b29a      	uxth	r2, r3
 8009778:	887b      	ldrh	r3, [r7, #2]
 800977a:	4313      	orrs	r3, r2
 800977c:	b29a      	uxth	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	809a      	strh	r2, [r3, #4]
 8009782:	e00a      	b.n	800979a <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	889b      	ldrh	r3, [r3, #4]
 8009788:	b29a      	uxth	r2, r3
 800978a:	887b      	ldrh	r3, [r7, #2]
 800978c:	ea6f 0303 	mvn.w	r3, r3
 8009790:	b29b      	uxth	r3, r3
 8009792:	4013      	ands	r3, r2
 8009794:	b29a      	uxth	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	809a      	strh	r2, [r3, #4]
  }
}
 800979a:	f107 070c 	add.w	r7, r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	bc80      	pop	{r7}
 80097a2:	4770      	bx	lr

080097a4 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	4613      	mov	r3, r2
 80097ae:	460a      	mov	r2, r1
 80097b0:	70fa      	strb	r2, [r7, #3]
 80097b2:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80097b4:	f04f 0300 	mov.w	r3, #0
 80097b8:	81fb      	strh	r3, [r7, #14]
 80097ba:	f04f 0300 	mov.w	r3, #0
 80097be:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80097ca:	89fb      	ldrh	r3, [r7, #14]
 80097cc:	f04f 0201 	mov.w	r2, #1
 80097d0:	fa02 f303 	lsl.w	r3, r2, r3
 80097d4:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80097d6:	78bb      	ldrb	r3, [r7, #2]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d008      	beq.n	80097ee <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	889b      	ldrh	r3, [r3, #4]
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	89bb      	ldrh	r3, [r7, #12]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	809a      	strh	r2, [r3, #4]
 80097ec:	e00a      	b.n	8009804 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	889b      	ldrh	r3, [r3, #4]
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	89bb      	ldrh	r3, [r7, #12]
 80097f6:	ea6f 0303 	mvn.w	r3, r3
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	4013      	ands	r3, r2
 80097fe:	b29a      	uxth	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	809a      	strh	r2, [r3, #4]
  }
}
 8009804:	f107 0714 	add.w	r7, r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	bc80      	pop	{r7}
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop

08009810 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800981c:	f04f 0300 	mov.w	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	891b      	ldrh	r3, [r3, #8]
 8009826:	b29a      	uxth	r2, r3
 8009828:	887b      	ldrh	r3, [r7, #2]
 800982a:	4013      	ands	r3, r2
 800982c:	b29b      	uxth	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8009832:	f04f 0301 	mov.w	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
 8009838:	e002      	b.n	8009840 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800983a:	f04f 0300 	mov.w	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8009840:	7bfb      	ldrb	r3, [r7, #15]
}
 8009842:	4618      	mov	r0, r3
 8009844:	f107 0714 	add.w	r7, r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	bc80      	pop	{r7}
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop

08009850 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800985c:	887b      	ldrh	r3, [r7, #2]
 800985e:	ea6f 0303 	mvn.w	r3, r3
 8009862:	b29a      	uxth	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	811a      	strh	r2, [r3, #8]
}
 8009868:	f107 070c 	add.w	r7, r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	bc80      	pop	{r7}
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop

08009874 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8009880:	f04f 0300 	mov.w	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8009886:	f04f 0300 	mov.w	r3, #0
 800988a:	81bb      	strh	r3, [r7, #12]
 800988c:	f04f 0300 	mov.w	r3, #0
 8009890:	817b      	strh	r3, [r7, #10]
 8009892:	f04f 0300 	mov.w	r3, #0
 8009896:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8009898:	78fb      	ldrb	r3, [r7, #3]
 800989a:	f003 030f 	and.w	r3, r3, #15
 800989e:	f04f 0201 	mov.w	r2, #1
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
 80098a6:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80098b2:	897b      	ldrh	r3, [r7, #10]
 80098b4:	f04f 0201 	mov.w	r2, #1
 80098b8:	fa02 f303 	lsl.w	r3, r2, r3
 80098bc:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	889b      	ldrh	r3, [r3, #4]
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	897b      	ldrh	r3, [r7, #10]
 80098c6:	4013      	ands	r3, r2
 80098c8:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	891b      	ldrh	r3, [r3, #8]
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	89bb      	ldrh	r3, [r7, #12]
 80098d2:	4013      	ands	r3, r2
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d006      	beq.n	80098e8 <SPI_I2S_GetITStatus+0x74>
 80098da:	893b      	ldrh	r3, [r7, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80098e0:	f04f 0301 	mov.w	r3, #1
 80098e4:	73fb      	strb	r3, [r7, #15]
 80098e6:	e002      	b.n	80098ee <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 80098e8:	f04f 0300 	mov.w	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	f107 0714 	add.w	r7, r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr

080098fc <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 8009908:	f04f 0300 	mov.w	r3, #0
 800990c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	f04f 0201 	mov.w	r2, #1
 8009918:	fa02 f303 	lsl.w	r3, r2, r3
 800991c:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800991e:	89fb      	ldrh	r3, [r7, #14]
 8009920:	ea6f 0303 	mvn.w	r3, r3
 8009924:	b29a      	uxth	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	811a      	strh	r2, [r3, #8]
}
 800992a:	f107 0714 	add.w	r7, r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8009938:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800993c:	f04f 0101 	mov.w	r1, #1
 8009940:	f7ff f9c2 	bl	8008cc8 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8009944:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009948:	f04f 0100 	mov.w	r1, #0
 800994c:	f7ff f9bc 	bl	8008cc8 <RCC_APB2PeriphResetCmd>
}
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop

08009954 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800995e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009962:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009966:	79fa      	ldrb	r2, [r7, #7]
 8009968:	601a      	str	r2, [r3, #0]
}
 800996a:	f107 070c 	add.w	r7, r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	bc80      	pop	{r7}
 8009972:	4770      	bx	lr

08009974 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8009974:	b490      	push	{r4, r7}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	71fa      	strb	r2, [r7, #7]
 8009980:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8009988:	79bb      	ldrb	r3, [r7, #6]
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009992:	f04f 020f 	mov.w	r2, #15
 8009996:	fa02 f303 	lsl.w	r3, r2, r3
 800999a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800999c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80099a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80099a4:	79ba      	ldrb	r2, [r7, #6]
 80099a6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80099aa:	b2d2      	uxtb	r2, r2
 80099ac:	4610      	mov	r0, r2
 80099ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80099b2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80099b6:	79b9      	ldrb	r1, [r7, #6]
 80099b8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80099bc:	b2c9      	uxtb	r1, r1
 80099be:	f101 0102 	add.w	r1, r1, #2
 80099c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80099c6:	4611      	mov	r1, r2
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	ea6f 0202 	mvn.w	r2, r2
 80099ce:	4011      	ands	r1, r2
 80099d0:	f100 0202 	add.w	r2, r0, #2
 80099d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80099d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80099dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80099e0:	79ba      	ldrb	r2, [r7, #6]
 80099e2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80099e6:	b2d2      	uxtb	r2, r2
 80099e8:	4610      	mov	r0, r2
 80099ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80099ee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80099f2:	79b9      	ldrb	r1, [r7, #6]
 80099f4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80099f8:	b2c9      	uxtb	r1, r1
 80099fa:	f101 0102 	add.w	r1, r1, #2
 80099fe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009a02:	4611      	mov	r1, r2
 8009a04:	79fc      	ldrb	r4, [r7, #7]
 8009a06:	79ba      	ldrb	r2, [r7, #6]
 8009a08:	f002 0203 	and.w	r2, r2, #3
 8009a0c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8009a10:	fa04 f202 	lsl.w	r2, r4, r2
 8009a14:	4311      	orrs	r1, r2
 8009a16:	f100 0202 	add.w	r2, r0, #2
 8009a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8009a1e:	f107 0710 	add.w	r7, r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bc90      	pop	{r4, r7}
 8009a26:	4770      	bx	lr

08009a28 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8009a30:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 8009a34:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	601a      	str	r2, [r3, #0]
}
 8009a3c:	f107 070c 	add.w	r7, r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bc80      	pop	{r7}
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop

08009a48 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8009a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a56:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8009a5a:	79fa      	ldrb	r2, [r7, #7]
 8009a5c:	601a      	str	r2, [r3, #0]
}
 8009a5e:	f107 070c 	add.w	r7, r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bc80      	pop	{r7}
 8009a66:	4770      	bx	lr

08009a68 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8009a6e:	f04f 0300 	mov.w	r3, #0
 8009a72:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8009a74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a78:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 8009a86:	f04f 0301 	mov.w	r3, #1
 8009a8a:	71fb      	strb	r3, [r7, #7]
 8009a8c:	e002      	b.n	8009a94 <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 8009a8e:	f04f 0300 	mov.w	r3, #0
 8009a92:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8009a94:	79fb      	ldrb	r3, [r7, #7]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	f107 070c 	add.w	r7, r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bc80      	pop	{r7}
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop

08009aa4 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8009aae:	79fa      	ldrb	r2, [r7, #7]
 8009ab0:	f64e 23a0 	movw	r3, #60064	; 0xeaa0
 8009ab4:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f04f 0101 	mov.w	r1, #1
 8009ac2:	f7fe ff75 	bl	80089b0 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8009ac6:	79fa      	ldrb	r2, [r7, #7]
 8009ac8:	f64e 2398 	movw	r3, #60056	; 0xea98
 8009acc:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009ad0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009ad4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8009ad6:	f04f 0301 	mov.w	r3, #1
 8009ada:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009adc:	f04f 0300 	mov.w	r3, #0
 8009ae0:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8009ae2:	f04f 0301 	mov.w	r3, #1
 8009ae6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009ae8:	f04f 0302 	mov.w	r3, #2
 8009aec:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8009aee:	79fa      	ldrb	r2, [r7, #7]
 8009af0:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8009af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009af8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009afc:	f107 0308 	add.w	r3, r7, #8
 8009b00:	4610      	mov	r0, r2
 8009b02:	4619      	mov	r1, r3
 8009b04:	f7fd fcc6 	bl	8007494 <GPIO_Init>
}
 8009b08:	f107 0710 	add.w	r7, r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8009b1a:	79fa      	ldrb	r2, [r7, #7]
 8009b1c:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8009b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b28:	79f9      	ldrb	r1, [r7, #7]
 8009b2a:	f64e 2398 	movw	r3, #60056	; 0xea98
 8009b2e:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009b32:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009b36:	8313      	strh	r3, [r2, #24]
}
 8009b38:	f107 070c 	add.w	r7, r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bc80      	pop	{r7}
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop

08009b44 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8009b4e:	79fa      	ldrb	r2, [r7, #7]
 8009b50:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8009b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b5c:	79f9      	ldrb	r1, [r7, #7]
 8009b5e:	f64e 2398 	movw	r3, #60056	; 0xea98
 8009b62:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009b66:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009b6a:	8353      	strh	r3, [r2, #26]
}
 8009b6c:	f107 070c 	add.w	r7, r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bc80      	pop	{r7}
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop

08009b78 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8009b82:	79fa      	ldrb	r2, [r7, #7]
 8009b84:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8009b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b90:	79f9      	ldrb	r1, [r7, #7]
 8009b92:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8009b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	79f8      	ldrb	r0, [r7, #7]
 8009ba4:	f64e 2398 	movw	r3, #60056	; 0xea98
 8009ba8:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009bac:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8009bb0:	404b      	eors	r3, r1
 8009bb2:	6153      	str	r3, [r2, #20]
}
 8009bb4:	f107 070c 	add.w	r7, r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bc80      	pop	{r7}
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop

08009bc0 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	71fa      	strb	r2, [r7, #7]
 8009bcc:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8009bce:	79fa      	ldrb	r2, [r7, #7]
 8009bd0:	f64e 23b4 	movw	r3, #60084	; 0xeab4
 8009bd4:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f04f 0101 	mov.w	r1, #1
 8009be2:	f7fe fee5 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8009be6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009bea:	f04f 0101 	mov.w	r1, #1
 8009bee:	f7fe ff8f 	bl	8008b10 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8009bf2:	f04f 0300 	mov.w	r3, #0
 8009bf6:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009bf8:	f04f 0300 	mov.w	r3, #0
 8009bfc:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8009bfe:	79fa      	ldrb	r2, [r7, #7]
 8009c00:	f64e 23b0 	movw	r3, #60080	; 0xeab0
 8009c04:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009c08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009c0c:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8009c0e:	79fa      	ldrb	r2, [r7, #7]
 8009c10:	f640 130c 	movw	r3, #2316	; 0x90c
 8009c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009c18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c1c:	f107 0318 	add.w	r3, r7, #24
 8009c20:	4610      	mov	r0, r2
 8009c22:	4619      	mov	r1, r3
 8009c24:	f7fd fc36 	bl	8007494 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8009c28:	79bb      	ldrb	r3, [r7, #6]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d13a      	bne.n	8009ca4 <STM_EVAL_PBInit+0xe4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8009c2e:	79fa      	ldrb	r2, [r7, #7]
 8009c30:	f64e 23bc 	movw	r3, #60092	; 0xeabc
 8009c34:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009c38:	5c9a      	ldrb	r2, [r3, r2]
 8009c3a:	79f9      	ldrb	r1, [r7, #7]
 8009c3c:	f64e 23c0 	movw	r3, #60096	; 0xeac0
 8009c40:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009c44:	5c5b      	ldrb	r3, [r3, r1]
 8009c46:	4610      	mov	r0, r2
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f7ff fe93 	bl	8009974 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8009c4e:	79fa      	ldrb	r2, [r7, #7]
 8009c50:	f64e 23b8 	movw	r3, #60088	; 0xeab8
 8009c54:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009c58:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009c5c:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8009c5e:	f04f 0300 	mov.w	r3, #0
 8009c62:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8009c64:	f04f 0308 	mov.w	r3, #8
 8009c68:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009c6a:	f04f 0301 	mov.w	r3, #1
 8009c6e:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8009c70:	f107 0310 	add.w	r3, r7, #16
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fd fa11 	bl	800709c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8009c7a:	79fa      	ldrb	r2, [r7, #7]
 8009c7c:	f64e 23c4 	movw	r3, #60100	; 0xeac4
 8009c80:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009c84:	5c9b      	ldrb	r3, [r3, r2]
 8009c86:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8009c88:	f04f 030f 	mov.w	r3, #15
 8009c8c:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8009c8e:	f04f 030f 	mov.w	r3, #15
 8009c92:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8009c94:	f04f 0301 	mov.w	r3, #1
 8009c98:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8009c9a:	f107 030c 	add.w	r3, r7, #12
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fc fa50 	bl	8006144 <NVIC_Init>
  }
}
 8009ca4:	f107 0720 	add.w	r7, r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8009cb6:	79fa      	ldrb	r2, [r7, #7]
 8009cb8:	f640 130c 	movw	r3, #2316	; 0x90c
 8009cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009cc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cc4:	79f9      	ldrb	r1, [r7, #7]
 8009cc6:	f64e 23b0 	movw	r3, #60080	; 0xeab0
 8009cca:	f6c0 0302 	movt	r3, #2050	; 0x802
 8009cce:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	f7fd fcc7 	bl	8007668 <GPIO_ReadInputDataBit>
 8009cda:	4603      	mov	r3, r0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f107 0708 	add.w	r7, r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop

08009ce8 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009cf8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8009cfc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	ea4f 2203 	mov.w	r2, r3, lsl #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8009d18:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
 8009d1c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8009d20:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8009d22:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8009d26:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	60da      	str	r2, [r3, #12]
}
 8009d2e:	f107 0714 	add.w	r7, r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bc80      	pop	{r7}
 8009d36:	4770      	bx	lr

08009d38 <EVAL_AUDIO_SetAudioInterface>:
  * @brief  Set the current audio interface (I2S or DAC).
  * @param  Interface: AUDIO_INTERFACE_I2S or AUDIO_INTERFACE_DAC
  * @retval None
  */
void EVAL_AUDIO_SetAudioInterface(uint32_t Interface)
{    
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  CurrAudioInterface = Interface;
 8009d40:	f640 131c 	movw	r3, #2332	; 0x91c
 8009d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	601a      	str	r2, [r3, #0]
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8009d4c:	f640 131c 	movw	r3, #2332	; 0x91c
 8009d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d14a      	bne.n	8009df0 <EVAL_AUDIO_SetAudioInterface+0xb8>
  {
    /* DMA Stream definitions */
    AUDIO_MAL_DMA_CLOCK    = AUDIO_I2S_DMA_CLOCK;
 8009d5a:	f640 1320 	movw	r3, #2336	; 0x920
 8009d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009d66:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_STREAM   = AUDIO_I2S_DMA_STREAM;        
 8009d68:	f640 1324 	movw	r3, #2340	; 0x924
 8009d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d70:	f246 02b8 	movw	r2, #24760	; 0x60b8
 8009d74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009d78:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_DREG     = AUDIO_I2S_DMA_DREG;
 8009d7a:	f640 1328 	movw	r3, #2344	; 0x928
 8009d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d82:	f643 420c 	movw	r2, #15372	; 0x3c0c
 8009d86:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009d8a:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_CHANNEL  = AUDIO_I2S_DMA_CHANNEL;
 8009d8c:	f640 231c 	movw	r3, #2588	; 0xa1c
 8009d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009d94:	f04f 0200 	mov.w	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_IRQ      = AUDIO_I2S_DMA_IRQ  ;
 8009d9a:	f640 132c 	movw	r3, #2348	; 0x92c
 8009d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009da2:	f04f 022f 	mov.w	r2, #47	; 0x2f
 8009da6:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_TC  = AUDIO_I2S_DMA_FLAG_TC;
 8009da8:	f640 1330 	movw	r3, #2352	; 0x930
 8009dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009db0:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
 8009db4:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_HT  = AUDIO_I2S_DMA_FLAG_HT;
 8009db6:	f640 1334 	movw	r3, #2356	; 0x934
 8009dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009dbe:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 8009dc2:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_FE  = AUDIO_I2S_DMA_FLAG_FE;
 8009dc4:	f640 1338 	movw	r3, #2360	; 0x938
 8009dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009dcc:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
 8009dd0:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_TE  = AUDIO_I2S_DMA_FLAG_TE;
 8009dd2:	f640 133c 	movw	r3, #2364	; 0x93c
 8009dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009dda:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
 8009dde:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_DME = AUDIO_I2S_DMA_FLAG_DME;
 8009de0:	f640 1340 	movw	r3, #2368	; 0x940
 8009de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009de8:	f04f 5204 	mov.w	r2, #553648128	; 0x21000000
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	e056      	b.n	8009e9e <EVAL_AUDIO_SetAudioInterface+0x166>
  }
  else if (Interface == AUDIO_INTERFACE_DAC)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d153      	bne.n	8009e9e <EVAL_AUDIO_SetAudioInterface+0x166>
  {
    /* DMA Stream definitions */
    AUDIO_MAL_DMA_CLOCK    = AUDIO_DAC_DMA_CLOCK;
 8009df6:	f640 1320 	movw	r3, #2336	; 0x920
 8009dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009dfe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009e02:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_STREAM   = AUDIO_DAC_DMA_STREAM;        
 8009e04:	f640 1324 	movw	r3, #2340	; 0x924
 8009e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e0c:	f246 0210 	movw	r2, #24592	; 0x6010
 8009e10:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009e14:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_DREG     = AUDIO_DAC_DMA_DREG;
 8009e16:	f640 1328 	movw	r3, #2344	; 0x928
 8009e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e1e:	f247 420c 	movw	r2, #29708	; 0x740c
 8009e22:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009e26:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_CHANNEL  = AUDIO_DAC_DMA_CHANNEL;
 8009e28:	f640 231c 	movw	r3, #2588	; 0xa1c
 8009e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_IRQ      = AUDIO_DAC_DMA_IRQ  ;
 8009e36:	f640 132c 	movw	r3, #2348	; 0x92c
 8009e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e3e:	f04f 020b 	mov.w	r2, #11
 8009e42:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_TC  = AUDIO_DAC_DMA_FLAG_TC;
 8009e44:	f640 1330 	movw	r3, #2352	; 0x930
 8009e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e4c:	f04f 0220 	mov.w	r2, #32
 8009e50:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8009e54:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_HT  = AUDIO_DAC_DMA_FLAG_HT;
 8009e56:	f640 1334 	movw	r3, #2356	; 0x934
 8009e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e5e:	f04f 0210 	mov.w	r2, #16
 8009e62:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8009e66:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_FE  = AUDIO_DAC_DMA_FLAG_FE;
 8009e68:	f640 1338 	movw	r3, #2360	; 0x938
 8009e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e70:	f04f 0201 	mov.w	r2, #1
 8009e74:	f2c1 0280 	movt	r2, #4224	; 0x1080
 8009e78:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_TE  = AUDIO_DAC_DMA_FLAG_TE;
 8009e7a:	f640 133c 	movw	r3, #2364	; 0x93c
 8009e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e82:	f04f 0208 	mov.w	r2, #8
 8009e86:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8009e8a:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_DME = AUDIO_DAC_DMA_FLAG_DME;    
 8009e8c:	f640 1340 	movw	r3, #2368	; 0x940
 8009e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e94:	f04f 0204 	mov.w	r2, #4
 8009e98:	f2c1 0280 	movt	r2, #4224	; 0x1080
 8009e9c:	601a      	str	r2, [r3, #0]
  }
}
 8009e9e:	f107 070c 	add.w	r7, r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bc80      	pop	{r7}
 8009ea6:	4770      	bx	lr

08009ea8 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	603a      	str	r2, [r7, #0]
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	80fa      	strh	r2, [r7, #6]
 8009eb6:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 8009eb8:	797b      	ldrb	r3, [r7, #5]
 8009eba:	2b64      	cmp	r3, #100	; 0x64
 8009ebc:	d811      	bhi.n	8009ee2 <EVAL_AUDIO_Init+0x3a>
 8009ebe:	797a      	ldrb	r2, [r7, #5]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009ec6:	1a9a      	subs	r2, r3, r2
 8009ec8:	f248 531f 	movw	r3, #34079	; 0x851f
 8009ecc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8009ed0:	fb83 1302 	smull	r1, r3, r3, r2
 8009ed4:	ea4f 1163 	mov.w	r1, r3, asr #5
 8009ed8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8009edc:	1acb      	subs	r3, r1, r3
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	e001      	b.n	8009ee6 <EVAL_AUDIO_Init+0x3e>
 8009ee2:	f04f 0364 	mov.w	r3, #100	; 0x64
 8009ee6:	88fa      	ldrh	r2, [r7, #6]
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4619      	mov	r1, r3
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	f000 f9b9 	bl	800a264 <Codec_Init>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <EVAL_AUDIO_Init+0x56>
  {
    return 1;                
 8009ef8:	f04f 0301 	mov.w	r3, #1
 8009efc:	e003      	b.n	8009f06 <EVAL_AUDIO_Init+0x5e>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 8009efe:	f001 f879 	bl	800aff4 <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 8009f02:	f04f 0300 	mov.w	r3, #0
  }
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	f107 0708 	add.w	r7, r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <EVAL_AUDIO_DeInit>:
  *         by EVAL_AUDIO_Init() function). 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_DeInit(void)
{ 
 8009f10:	b580      	push	{r7, lr}
 8009f12:	af00      	add	r7, sp, #0
  /* DeInitialize the Media layer */
  Audio_MAL_DeInit();
 8009f14:	f001 f968 	bl	800b1e8 <Audio_MAL_DeInit>
  
  /* DeInitialize Codec */  
  Codec_DeInit();  
 8009f18:	f000 fa78 	bl	800a40c <Codec_DeInit>
  
  return 0;
 8009f1c:	f04f 0300 	mov.w	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(int16_t* pBuffer, uint32_t Size)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 8009f2e:	f640 1310 	movw	r3, #2320	; 0x910
 8009f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	601a      	str	r2, [r3, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 8009f3a:	f000 fa85 	bl	800a448 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, Size);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4618      	mov	r0, r3
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	f001 f97e 	bl	800b244 <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  // Size/2 was bull shit caused overflow
  AudioRemSize = (Size) - DMA_MAX(AudioTotalSize);
 8009f48:	f640 1310 	movw	r3, #2320	; 0x910
 8009f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f56:	429a      	cmp	r2, r3
 8009f58:	bf38      	it	cc
 8009f5a:	4613      	movcc	r3, r2
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	1ad2      	subs	r2, r2, r3
 8009f60:	f640 1314 	movw	r3, #2324	; 0x914
 8009f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009f68:	601a      	str	r2, [r3, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = (uint16_t*)pBuffer + DMA_MAX(AudioTotalSize);
 8009f6a:	f640 1310 	movw	r3, #2320	; 0x910
 8009f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	bf38      	it	cc
 8009f7c:	4613      	movcc	r3, r2
 8009f7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	18d2      	adds	r2, r2, r3
 8009f86:	f644 436c 	movw	r3, #19564	; 0x4c6c
 8009f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009f8e:	601a      	str	r2, [r3, #0]
  
  return 0;
 8009f90:	f04f 0300 	mov.w	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	f107 0708 	add.w	r7, r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop

08009fa0 <EVAL_AUDIO_PauseResume>:
  * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
  *         from 0) to resume. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_PauseResume(uint32_t Cmd)
{    
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Call the Audio Codec Pause/Resume function */
  if (Codec_PauseResume(Cmd) != 0)
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fa55 	bl	800a458 <Codec_PauseResume>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <EVAL_AUDIO_PauseResume+0x1a>
  {
    return 1;
 8009fb4:	f04f 0301 	mov.w	r3, #1
 8009fb8:	e006      	b.n	8009fc8 <EVAL_AUDIO_PauseResume+0x28>
  }
  else
  {
    /* Call the Media layer pause/resume function */
    Audio_MAL_PauseResume(Cmd, 0);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f04f 0100 	mov.w	r1, #0
 8009fc0:	f001 f9aa 	bl	800b318 <Audio_MAL_PauseResume>
    
    /* Return 0 if all operations are OK */
    return 0;
 8009fc4:	f04f 0300 	mov.w	r3, #0
  }
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f107 0708 	add.w	r7, r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop

08009fd4 <EVAL_AUDIO_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Stop(uint32_t Option)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Call Audio Codec Stop function */
  if (Codec_Stop(Option) != 0)
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fa7f 	bl	800a4e0 <Codec_Stop>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <EVAL_AUDIO_Stop+0x1a>
  {
    return 1;
 8009fe8:	f04f 0301 	mov.w	r3, #1
 8009fec:	e00d      	b.n	800a00a <EVAL_AUDIO_Stop+0x36>
  }
  else
  {
    /* Call Media layer Stop function */
    Audio_MAL_Stop();
 8009fee:	f001 f9db 	bl	800b3a8 <Audio_MAL_Stop>
    
    /* Update the remaining data number */
    AudioRemSize = AudioTotalSize;    
 8009ff2:	f640 1310 	movw	r3, #2320	; 0x910
 8009ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	f640 1314 	movw	r3, #2324	; 0x914
 800a000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a004:	601a      	str	r2, [r3, #0]
    
    /* Return 0 when all operations are correctly done */
    return 0;
 800a006:	f04f 0300 	mov.w	r3, #0
  }
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	f107 0708 	add.w	r7, r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <EVAL_AUDIO_VolumeCtl>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_VolumeCtl(uint8_t Volume)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  return (Codec_VolumeCtrl(VOLUME_CONVERT(Volume)));
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	2b64      	cmp	r3, #100	; 0x64
 800a022:	d811      	bhi.n	800a048 <EVAL_AUDIO_VolumeCtl+0x34>
 800a024:	79fa      	ldrb	r2, [r7, #7]
 800a026:	4613      	mov	r3, r2
 800a028:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800a02c:	1a9a      	subs	r2, r3, r2
 800a02e:	f248 531f 	movw	r3, #34079	; 0x851f
 800a032:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800a036:	fb83 1302 	smull	r1, r3, r3, r2
 800a03a:	ea4f 1163 	mov.w	r1, r3, asr #5
 800a03e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800a042:	1acb      	subs	r3, r1, r3
 800a044:	b2db      	uxtb	r3, r3
 800a046:	e001      	b.n	800a04c <EVAL_AUDIO_VolumeCtl+0x38>
 800a048:	f04f 0364 	mov.w	r3, #100	; 0x64
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 fa7f 	bl	800a550 <Codec_VolumeCtrl>
 800a052:	4603      	mov	r3, r0
}
 800a054:	4618      	mov	r0, r3
 800a056:	f107 0708 	add.w	r7, r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop

0800a060 <EVAL_AUDIO_Mute>:
  * @param  Command: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to 
  *         unmute the codec and restore previous volume level.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Mute(uint32_t Cmd)
{ 
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Call the Codec Mute function */
  return (Codec_Mute(Cmd));
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fab7 	bl	800a5dc <Codec_Mute>
 800a06e:	4603      	mov	r3, r0
}
 800a070:	4618      	mov	r0, r3
 800a072:	f107 0708 	add.w	r7, r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop

0800a07c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800a080:	f640 1324 	movw	r3, #2340	; 0x924
 800a084:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	f640 1330 	movw	r3, #2352	; 0x930
 800a08e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4610      	mov	r0, r2
 800a096:	4619      	mov	r1, r3
 800a098:	f7fc fe8e 	bl	8006db8 <DMA_GetFlagStatus>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80ab 	beq.w	800a1fa <Audio_MAL_IRQHandler+0x17e>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800a0a4:	f640 1314 	movw	r3, #2324	; 0x914
 800a0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 8081 	beq.w	800a1b6 <Audio_MAL_IRQHandler+0x13a>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800a0b4:	bf00      	nop
 800a0b6:	f640 1324 	movw	r3, #2340	; 0x924
 800a0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fc fe49 	bl	8006d58 <DMA_GetCmdStatus>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1f4      	bne.n	800a0b6 <Audio_MAL_IRQHandler+0x3a>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800a0cc:	f640 1324 	movw	r3, #2340	; 0x924
 800a0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	f640 1330 	movw	r3, #2352	; 0x930
 800a0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	f7fc feac 	bl	8006e40 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800a0e8:	f644 436c 	movw	r3, #19564	; 0x4c6c
 800a0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800a0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0fc:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800a0fe:	f640 1314 	movw	r3, #2324	; 0x914
 800a102:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a10c:	429a      	cmp	r2, r3
 800a10e:	bf28      	it	cs
 800a110:	461a      	movcs	r2, r3
 800a112:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800a116:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a11a:	611a      	str	r2, [r3, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800a11c:	f640 1324 	movw	r3, #2340	; 0x924
 800a120:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4618      	mov	r0, r3
 800a128:	f644 41ac 	movw	r1, #19628	; 0x4cac
 800a12c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a130:	f7fc fc9c 	bl	8006a6c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 800a134:	f640 1324 	movw	r3, #2340	; 0x924
 800a138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4618      	mov	r0, r3
 800a140:	f04f 0101 	mov.w	r1, #1
 800a144:	f7fc fd30 	bl	8006ba8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 800a148:	f644 436c 	movw	r3, #19564	; 0x4c6c
 800a14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	f640 1314 	movw	r3, #2324	; 0x914
 800a156:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a15a:	6819      	ldr	r1, [r3, #0]
 800a15c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a160:	4299      	cmp	r1, r3
 800a162:	bf38      	it	cc
 800a164:	460b      	movcc	r3, r1
 800a166:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a16a:	18d2      	adds	r2, r2, r3
 800a16c:	f644 436c 	movw	r3, #19564	; 0x4c6c
 800a170:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a174:	601a      	str	r2, [r3, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800a176:	f640 1314 	movw	r3, #2324	; 0x914
 800a17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	f640 1314 	movw	r3, #2324	; 0x914
 800a184:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a188:	6819      	ldr	r1, [r3, #0]
 800a18a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a18e:	4299      	cmp	r1, r3
 800a190:	bf38      	it	cc
 800a192:	460b      	movcc	r3, r1
 800a194:	1ad2      	subs	r2, r2, r3
 800a196:	f640 1314 	movw	r3, #2324	; 0x914
 800a19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a19e:	601a      	str	r2, [r3, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800a1a0:	f640 1324 	movw	r3, #2340	; 0x924
 800a1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f04f 0101 	mov.w	r1, #1
 800a1b0:	f7fc fcfa 	bl	8006ba8 <DMA_Cmd>
 800a1b4:	e021      	b.n	800a1fa <Audio_MAL_IRQHandler+0x17e>
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 800a1b6:	f640 1324 	movw	r3, #2340	; 0x924
 800a1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f04f 0100 	mov.w	r1, #0
 800a1c6:	f7fc fcef 	bl	8006ba8 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800a1ca:	f640 1324 	movw	r3, #2340	; 0x924
 800a1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	f640 1330 	movw	r3, #2352	; 0x930
 800a1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4610      	mov	r0, r2
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	f7fc fe2d 	bl	8006e40 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800a1e6:	f644 436c 	movw	r3, #19564	; 0x4c6c
 800a1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f04f 0100 	mov.w	r1, #0
 800a1f6:	f013 fd87 	bl	801dd08 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800a200:	f7ff ff3c 	bl	800a07c <Audio_MAL_IRQHandler>
}
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop

0800a208 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800a20c:	f7ff ff36 	bl	800a07c <Audio_MAL_IRQHandler>
}
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop

0800a214 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800a218:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800a21c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a220:	f04f 0102 	mov.w	r1, #2
 800a224:	f7ff faf4 	bl	8009810 <SPI_I2S_GetFlagStatus>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d018      	beq.n	800a260 <SPI3_IRQHandler+0x4c>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800a22e:	f640 131c 	movw	r3, #2332	; 0x91c
 800a232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d107      	bne.n	800a24c <SPI3_IRQHandler+0x38>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800a23c:	f013 fd84 	bl	801dd48 <EVAL_AUDIO_GetSampleCallBack>
 800a240:	4603      	mov	r3, r0
 800a242:	f04f 0004 	mov.w	r0, #4
 800a246:	4619      	mov	r1, r3
 800a248:	f7fc f97e 	bl	8006548 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800a24c:	f013 fd7c 	bl	801dd48 <EVAL_AUDIO_GetSampleCallBack>
 800a250:	4603      	mov	r3, r0
 800a252:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800a256:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a25a:	4619      	mov	r1, r3
 800a25c:	f7ff fa16 	bl	800968c <SPI_I2S_SendData>
  }
}
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop

0800a264 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	460b      	mov	r3, r1
 800a26c:	603a      	str	r2, [r7, #0]
 800a26e:	4602      	mov	r2, r0
 800a270:	80fa      	strh	r2, [r7, #6]
 800a272:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800a274:	f04f 0300 	mov.w	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 800a27a:	f000 fd73 	bl	800ad64 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 800a27e:	f000 f9d7 	bl	800a630 <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 800a282:	f000 fcc7 	bl	800ac14 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 800a286:	f04f 0002 	mov.w	r0, #2
 800a28a:	f04f 0101 	mov.w	r1, #1
 800a28e:	f000 f9eb 	bl	800a668 <Codec_WriteRegister>
 800a292:	4603      	mov	r3, r0
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	18d3      	adds	r3, r2, r3
 800a298:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 800a29a:	f04f 0004 	mov.w	r0, #4
 800a29e:	f04f 01af 	mov.w	r1, #175	; 0xaf
 800a2a2:	f000 f9e1 	bl	800a668 <Codec_WriteRegister>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	18d3      	adds	r3, r2, r3
 800a2ac:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 800a2ae:	f640 231b 	movw	r3, #2587	; 0xa1b
 800a2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a2b6:	f04f 02af 	mov.w	r2, #175	; 0xaf
 800a2ba:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 800a2bc:	f04f 0005 	mov.w	r0, #5
 800a2c0:	f04f 0181 	mov.w	r1, #129	; 0x81
 800a2c4:	f000 f9d0 	bl	800a668 <Codec_WriteRegister>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	18d3      	adds	r3, r2, r3
 800a2ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 800a2d0:	f04f 0006 	mov.w	r0, #6
 800a2d4:	f04f 0104 	mov.w	r1, #4
 800a2d8:	f000 f9c6 	bl	800a668 <Codec_WriteRegister>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	18d3      	adds	r3, r2, r3
 800a2e2:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 800a2e4:	797b      	ldrb	r3, [r7, #5]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f932 	bl	800a550 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800a2ec:	f640 131c 	movw	r3, #2332	; 0x91c
 800a2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d131      	bne.n	800a35e <Codec_Init+0xfa>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 800a2fa:	f04f 0008 	mov.w	r0, #8
 800a2fe:	f04f 0101 	mov.w	r1, #1
 800a302:	f000 f9b1 	bl	800a668 <Codec_WriteRegister>
 800a306:	4603      	mov	r3, r0
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	18d3      	adds	r3, r2, r3
 800a30c:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 800a30e:	f04f 0009 	mov.w	r0, #9
 800a312:	f04f 0101 	mov.w	r1, #1
 800a316:	f000 f9a7 	bl	800a668 <Codec_WriteRegister>
 800a31a:	4603      	mov	r3, r0
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	18d3      	adds	r3, r2, r3
 800a320:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 800a322:	f04f 000e 	mov.w	r0, #14
 800a326:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800a32a:	f000 f99d 	bl	800a668 <Codec_WriteRegister>
 800a32e:	4603      	mov	r3, r0
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	18d3      	adds	r3, r2, r3
 800a334:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 800a336:	f04f 0014 	mov.w	r0, #20
 800a33a:	f04f 0100 	mov.w	r1, #0
 800a33e:	f000 f993 	bl	800a668 <Codec_WriteRegister>
 800a342:	4603      	mov	r3, r0
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	18d3      	adds	r3, r2, r3
 800a348:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 800a34a:	f04f 0015 	mov.w	r0, #21
 800a34e:	f04f 0100 	mov.w	r1, #0
 800a352:	f000 f989 	bl	800a668 <Codec_WriteRegister>
 800a356:	4603      	mov	r3, r0
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	18d3      	adds	r3, r2, r3
 800a35c:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 800a35e:	f04f 0002 	mov.w	r0, #2
 800a362:	f04f 019e 	mov.w	r1, #158	; 0x9e
 800a366:	f000 f97f 	bl	800a668 <Codec_WriteRegister>
 800a36a:	4603      	mov	r3, r0
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	18d3      	adds	r3, r2, r3
 800a370:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 800a372:	f04f 000a 	mov.w	r0, #10
 800a376:	f04f 0100 	mov.w	r1, #0
 800a37a:	f000 f975 	bl	800a668 <Codec_WriteRegister>
 800a37e:	4603      	mov	r3, r0
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	18d3      	adds	r3, r2, r3
 800a384:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 800a386:	f640 131c 	movw	r3, #2332	; 0x91c
 800a38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b02      	cmp	r3, #2
 800a392:	d009      	beq.n	800a3a8 <Codec_Init+0x144>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 800a394:	f04f 000e 	mov.w	r0, #14
 800a398:	f04f 0104 	mov.w	r1, #4
 800a39c:	f000 f964 	bl	800a668 <Codec_WriteRegister>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	18d3      	adds	r3, r2, r3
 800a3a6:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 800a3a8:	f04f 0027 	mov.w	r0, #39	; 0x27
 800a3ac:	f04f 0100 	mov.w	r1, #0
 800a3b0:	f000 f95a 	bl	800a668 <Codec_WriteRegister>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	18d3      	adds	r3, r2, r3
 800a3ba:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 800a3bc:	f04f 001f 	mov.w	r0, #31
 800a3c0:	f04f 010f 	mov.w	r1, #15
 800a3c4:	f000 f950 	bl	800a668 <Codec_WriteRegister>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	18d3      	adds	r3, r2, r3
 800a3ce:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 800a3d0:	f04f 001a 	mov.w	r0, #26
 800a3d4:	f04f 010a 	mov.w	r1, #10
 800a3d8:	f000 f946 	bl	800a668 <Codec_WriteRegister>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	18d3      	adds	r3, r2, r3
 800a3e2:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 800a3e4:	f04f 001b 	mov.w	r0, #27
 800a3e8:	f04f 010a 	mov.w	r1, #10
 800a3ec:	f000 f93c 	bl	800a668 <Codec_WriteRegister>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	18d3      	adds	r3, r2, r3
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 800a3f8:	6838      	ldr	r0, [r7, #0]
 800a3fa:	f000 fc49 	bl	800ac90 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 800a3fe:	68fb      	ldr	r3, [r7, #12]
}
 800a400:	4618      	mov	r0, r3
 800a402:	f107 0710 	add.w	r7, r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop

0800a40c <Codec_DeInit>:
  *         resources.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_DeInit(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
  uint32_t counter = 0; 
 800a412:	f04f 0300 	mov.w	r3, #0
 800a416:	607b      	str	r3, [r7, #4]

  /* Reset the Codec Registers */
  Codec_Reset();  
 800a418:	f000 f90a 	bl	800a630 <Codec_Reset>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);    
 800a41c:	f04f 0002 	mov.w	r0, #2
 800a420:	f04f 0101 	mov.w	r1, #1
 800a424:	f000 f920 	bl	800a668 <Codec_WriteRegister>
 800a428:	4603      	mov	r3, r0
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	18d3      	adds	r3, r2, r3
 800a42e:	607b      	str	r3, [r7, #4]
  
  /* Deinitialize all use GPIOs */
  Codec_GPIO_DeInit();
 800a430:	f000 fd6e 	bl	800af10 <Codec_GPIO_DeInit>

  /* Disable the Codec control interface */
  Codec_CtrlInterface_DeInit();
 800a434:	f000 fc26 	bl	800ac84 <Codec_CtrlInterface_DeInit>
  
  /* Deinitialize the Codec audio interface (I2S) */
  Codec_AudioInterface_DeInit(); 
 800a438:	f000 fc7c 	bl	800ad34 <Codec_AudioInterface_DeInit>
  
  /* Return communication control value */
  return counter;  
 800a43c:	687b      	ldr	r3, [r7, #4]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	f107 0708 	add.w	r7, r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 800a448:	b480      	push	{r7}
 800a44a:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 800a44c:	f04f 0300 	mov.w	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	46bd      	mov	sp, r7
 800a454:	bc80      	pop	{r7}
 800a456:	4770      	bx	lr

0800a458 <Codec_PauseResume>:
  * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
  *         from 0) to resume. 
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_PauseResume(uint32_t Cmd)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;   
 800a460:	f04f 0300 	mov.w	r3, #0
 800a464:	60fb      	str	r3, [r7, #12]
  
  /* Pause the audio file playing */
  if (Cmd == AUDIO_PAUSE)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d112      	bne.n	800a492 <Codec_PauseResume+0x3a>
  { 
    /* Mute the output first */
    counter += Codec_Mute(AUDIO_MUTE_ON);
 800a46c:	f04f 0001 	mov.w	r0, #1
 800a470:	f000 f8b4 	bl	800a5dc <Codec_Mute>
 800a474:	4603      	mov	r3, r0
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	18d3      	adds	r3, r2, r3
 800a47a:	60fb      	str	r3, [r7, #12]

    /* Put the Codec in Power save mode */    
    counter += Codec_WriteRegister(0x02, 0x01);    
 800a47c:	f04f 0002 	mov.w	r0, #2
 800a480:	f04f 0101 	mov.w	r1, #1
 800a484:	f000 f8f0 	bl	800a668 <Codec_WriteRegister>
 800a488:	4603      	mov	r3, r0
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	18d3      	adds	r3, r2, r3
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	e020      	b.n	800a4d4 <Codec_PauseResume+0x7c>
  }
  else /* AUDIO_RESUME */
  {
    /* Unmute the output first */
    counter += Codec_Mute(AUDIO_MUTE_OFF);
 800a492:	f04f 0000 	mov.w	r0, #0
 800a496:	f000 f8a1 	bl	800a5dc <Codec_Mute>
 800a49a:	4603      	mov	r3, r0
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	18d3      	adds	r3, r2, r3
 800a4a0:	60fb      	str	r3, [r7, #12]
    
    counter += Codec_WriteRegister(0x04, OutputDev);
 800a4a2:	f640 231b 	movw	r3, #2587	; 0xa1b
 800a4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f04f 0004 	mov.w	r0, #4
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	f000 f8d8 	bl	800a668 <Codec_WriteRegister>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	18d3      	adds	r3, r2, r3
 800a4be:	60fb      	str	r3, [r7, #12]
    
    /* Exit the Power save mode */
    counter += Codec_WriteRegister(0x02, 0x9E); 
 800a4c0:	f04f 0002 	mov.w	r0, #2
 800a4c4:	f04f 019e 	mov.w	r1, #158	; 0x9e
 800a4c8:	f000 f8ce 	bl	800a668 <Codec_WriteRegister>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	18d3      	adds	r3, r2, r3
 800a4d2:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f107 0710 	add.w	r7, r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <Codec_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Stop(uint32_t CodecPdwnMode)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;   
 800a4e8:	f04f 0300 	mov.w	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]

  /* Mute the output first */
  Codec_Mute(AUDIO_MUTE_ON);
 800a4ee:	f04f 0001 	mov.w	r0, #1
 800a4f2:	f000 f873 	bl	800a5dc <Codec_Mute>
  
  if (CodecPdwnMode == CODEC_PDWN_SW)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d10a      	bne.n	800a512 <Codec_Stop+0x32>
  {    
    /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
    counter += Codec_WriteRegister(0x02, 0x9F);
 800a4fc:	f04f 0002 	mov.w	r0, #2
 800a500:	f04f 019f 	mov.w	r1, #159	; 0x9f
 800a504:	f000 f8b0 	bl	800a668 <Codec_WriteRegister>
 800a508:	4603      	mov	r3, r0
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	18d3      	adds	r3, r2, r3
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	e017      	b.n	800a542 <Codec_Stop+0x62>
  }
  else /* CODEC_PDWN_HW */
  { 
    /* Power down the DAC components */
    counter += Codec_WriteRegister(0x02, 0x9F);
 800a512:	f04f 0002 	mov.w	r0, #2
 800a516:	f04f 019f 	mov.w	r1, #159	; 0x9f
 800a51a:	f000 f8a5 	bl	800a668 <Codec_WriteRegister>
 800a51e:	4603      	mov	r3, r0
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	18d3      	adds	r3, r2, r3
 800a524:	60fb      	str	r3, [r7, #12]
    
    /* Wait at least 100us */
    Delay(0xFFF);
 800a526:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a52a:	f000 fd4d 	bl	800afc8 <Delay>
    
    /* Reset The pin */
    GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 800a52e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a532:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800a536:	f04f 0110 	mov.w	r1, #16
 800a53a:	f04f 0200 	mov.w	r2, #0
 800a53e:	f7fd f907 	bl	8007750 <GPIO_WriteBit>
  }
  
  return counter;    
 800a542:	68fb      	ldr	r3, [r7, #12]
}
 800a544:	4618      	mov	r0, r3
 800a546:	f107 0710 	add.w	r7, r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop

0800a550 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 800a55a:	f04f 0300 	mov.w	r3, #0
 800a55e:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 800a560:	79fb      	ldrb	r3, [r7, #7]
 800a562:	2be6      	cmp	r3, #230	; 0xe6
 800a564:	d91a      	bls.n	800a59c <Codec_VolumeCtrl+0x4c>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	f103 0319 	add.w	r3, r3, #25
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f04f 0020 	mov.w	r0, #32
 800a572:	4619      	mov	r1, r3
 800a574:	f000 f878 	bl	800a668 <Codec_WriteRegister>
 800a578:	4603      	mov	r3, r0
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	18d3      	adds	r3, r2, r3
 800a57e:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	f103 0319 	add.w	r3, r3, #25
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f04f 0021 	mov.w	r0, #33	; 0x21
 800a58c:	4619      	mov	r1, r3
 800a58e:	f000 f86b 	bl	800a668 <Codec_WriteRegister>
 800a592:	4603      	mov	r3, r0
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	18d3      	adds	r3, r2, r3
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	e019      	b.n	800a5d0 <Codec_VolumeCtrl+0x80>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	f103 0319 	add.w	r3, r3, #25
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f04f 0020 	mov.w	r0, #32
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	f000 f85d 	bl	800a668 <Codec_WriteRegister>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	18d3      	adds	r3, r2, r3
 800a5b4:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	f103 0319 	add.w	r3, r3, #25
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	f04f 0021 	mov.w	r0, #33	; 0x21
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	f000 f850 	bl	800a668 <Codec_WriteRegister>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	18d3      	adds	r3, r2, r3
 800a5ce:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 800a5d0:	68fb      	ldr	r3, [r7, #12]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f107 0710 	add.w	r7, r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <Codec_Mute>:
  * @param  Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Mute(uint32_t Cmd)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;  
 800a5e4:	f04f 0300 	mov.w	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if (Cmd == AUDIO_MUTE_ON)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d10a      	bne.n	800a606 <Codec_Mute+0x2a>
  {
    counter += Codec_WriteRegister(0x04, 0xFF);
 800a5f0:	f04f 0004 	mov.w	r0, #4
 800a5f4:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800a5f8:	f000 f836 	bl	800a668 <Codec_WriteRegister>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	18d3      	adds	r3, r2, r3
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	e00e      	b.n	800a624 <Codec_Mute+0x48>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += Codec_WriteRegister(0x04, OutputDev);
 800a606:	f640 231b 	movw	r3, #2587	; 0xa1b
 800a60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	f04f 0004 	mov.w	r0, #4
 800a616:	4619      	mov	r1, r3
 800a618:	f000 f826 	bl	800a668 <Codec_WriteRegister>
 800a61c:	4603      	mov	r3, r0
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	18d3      	adds	r3, r2, r3
 800a622:	60fb      	str	r3, [r7, #12]
  }
  
  return counter; 
 800a624:	68fb      	ldr	r3, [r7, #12]
}
 800a626:	4618      	mov	r0, r3
 800a628:	f107 0710 	add.w	r7, r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 800a634:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a638:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800a63c:	f04f 0110 	mov.w	r1, #16
 800a640:	f04f 0200 	mov.w	r2, #0
 800a644:	f7fd f884 	bl	8007750 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 800a648:	f644 70ff 	movw	r0, #20479	; 0x4fff
 800a64c:	f000 fcbc 	bl	800afc8 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 800a650:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a654:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800a658:	f04f 0110 	mov.w	r1, #16
 800a65c:	f04f 0201 	mov.w	r2, #1
 800a660:	f7fd f876 	bl	8007750 <GPIO_WriteBit>
}
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop

0800a668 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	71fa      	strb	r2, [r7, #7]
 800a674:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800a67c:	f640 1318 	movw	r3, #2328	; 0x918
 800a680:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a684:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 800a688:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800a68a:	e016      	b.n	800a6ba <Codec_WriteRegister+0x52>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800a68c:	f640 1318 	movw	r3, #2328	; 0x918
 800a690:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	bf14      	ite	ne
 800a69a:	2200      	movne	r2, #0
 800a69c:	2201      	moveq	r2, #1
 800a69e:	b2d2      	uxtb	r2, r2
 800a6a0:	f103 31ff 	add.w	r1, r3, #4294967295
 800a6a4:	f640 1318 	movw	r3, #2328	; 0x918
 800a6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a6ac:	6019      	str	r1, [r3, #0]
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	d003      	beq.n	800a6ba <Codec_WriteRegister+0x52>
 800a6b2:	f000 fc9b 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	e0e3      	b.n	800a882 <Codec_WriteRegister+0x21a>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800a6ba:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a6be:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a6c2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800a6c6:	f7fd fd3b 	bl	8008140 <I2C_GetFlagStatus>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1dd      	bne.n	800a68c <Codec_WriteRegister+0x24>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 800a6d0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a6d4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a6d8:	f04f 0101 	mov.w	r1, #1
 800a6dc:	f7fd fa22 	bl	8007b24 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800a6e0:	f640 1318 	movw	r3, #2328	; 0x918
 800a6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a6e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6ec:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800a6ee:	e016      	b.n	800a71e <Codec_WriteRegister+0xb6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800a6f0:	f640 1318 	movw	r3, #2328	; 0x918
 800a6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	bf14      	ite	ne
 800a6fe:	2200      	movne	r2, #0
 800a700:	2201      	moveq	r2, #1
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	f103 31ff 	add.w	r1, r3, #4294967295
 800a708:	f640 1318 	movw	r3, #2328	; 0x918
 800a70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a710:	6019      	str	r1, [r3, #0]
 800a712:	2a00      	cmp	r2, #0
 800a714:	d003      	beq.n	800a71e <Codec_WriteRegister+0xb6>
 800a716:	f000 fc69 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800a71a:	4603      	mov	r3, r0
 800a71c:	e0b1      	b.n	800a882 <Codec_WriteRegister+0x21a>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800a71e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a722:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a726:	f04f 0101 	mov.w	r1, #1
 800a72a:	f2c0 0103 	movt	r1, #3
 800a72e:	f7fd fca9 	bl	8008084 <I2C_CheckEvent>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d0db      	beq.n	800a6f0 <Codec_WriteRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 800a738:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a73c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a740:	f04f 0194 	mov.w	r1, #148	; 0x94
 800a744:	f04f 0200 	mov.w	r2, #0
 800a748:	f7fd fa2c 	bl	8007ba4 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800a74c:	f640 1318 	movw	r3, #2328	; 0x918
 800a750:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a758:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a75a:	e016      	b.n	800a78a <Codec_WriteRegister+0x122>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800a75c:	f640 1318 	movw	r3, #2328	; 0x918
 800a760:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	bf14      	ite	ne
 800a76a:	2200      	movne	r2, #0
 800a76c:	2201      	moveq	r2, #1
 800a76e:	b2d2      	uxtb	r2, r2
 800a770:	f103 31ff 	add.w	r1, r3, #4294967295
 800a774:	f640 1318 	movw	r3, #2328	; 0x918
 800a778:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a77c:	6019      	str	r1, [r3, #0]
 800a77e:	2a00      	cmp	r2, #0
 800a780:	d003      	beq.n	800a78a <Codec_WriteRegister+0x122>
 800a782:	f000 fc33 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800a786:	4603      	mov	r3, r0
 800a788:	e07b      	b.n	800a882 <Codec_WriteRegister+0x21a>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a78a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a78e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a792:	f04f 0182 	mov.w	r1, #130	; 0x82
 800a796:	f2c0 0107 	movt	r1, #7
 800a79a:	f7fd fc73 	bl	8008084 <I2C_CheckEvent>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0db      	beq.n	800a75c <Codec_WriteRegister+0xf4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a7aa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	f7fd fb5c 	bl	8007e6c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800a7b4:	f640 1318 	movw	r3, #2328	; 0x918
 800a7b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a7c0:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800a7c2:	e016      	b.n	800a7f2 <Codec_WriteRegister+0x18a>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800a7c4:	f640 1318 	movw	r3, #2328	; 0x918
 800a7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bf14      	ite	ne
 800a7d2:	2200      	movne	r2, #0
 800a7d4:	2201      	moveq	r2, #1
 800a7d6:	b2d2      	uxtb	r2, r2
 800a7d8:	f103 31ff 	add.w	r1, r3, #4294967295
 800a7dc:	f640 1318 	movw	r3, #2328	; 0x918
 800a7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7e4:	6019      	str	r1, [r3, #0]
 800a7e6:	2a00      	cmp	r2, #0
 800a7e8:	d003      	beq.n	800a7f2 <Codec_WriteRegister+0x18a>
 800a7ea:	f000 fbff 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	e047      	b.n	800a882 <Codec_WriteRegister+0x21a>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800a7f2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a7f6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a7fa:	f04f 0180 	mov.w	r1, #128	; 0x80
 800a7fe:	f2c0 0107 	movt	r1, #7
 800a802:	f7fd fc3f 	bl	8008084 <I2C_CheckEvent>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0db      	beq.n	800a7c4 <Codec_WriteRegister+0x15c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 800a80c:	79bb      	ldrb	r3, [r7, #6]
 800a80e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a812:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a816:	4619      	mov	r1, r3
 800a818:	f7fd fb28 	bl	8007e6c <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800a81c:	f640 1318 	movw	r3, #2328	; 0x918
 800a820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a824:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 800a828:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 800a82a:	e014      	b.n	800a856 <Codec_WriteRegister+0x1ee>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 800a82c:	f640 1318 	movw	r3, #2328	; 0x918
 800a830:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	bf14      	ite	ne
 800a83a:	2200      	movne	r2, #0
 800a83c:	2201      	moveq	r2, #1
 800a83e:	b2d2      	uxtb	r2, r2
 800a840:	f103 31ff 	add.w	r1, r3, #4294967295
 800a844:	f640 1318 	movw	r3, #2328	; 0x918
 800a848:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a84c:	6019      	str	r1, [r3, #0]
 800a84e:	2a00      	cmp	r2, #0
 800a850:	d001      	beq.n	800a856 <Codec_WriteRegister+0x1ee>
 800a852:	f000 fbcb 	bl	800afec <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 800a856:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a85a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a85e:	f04f 0104 	mov.w	r1, #4
 800a862:	f2c1 0100 	movt	r1, #4096	; 0x1000
 800a866:	f7fd fc6b 	bl	8008140 <I2C_GetFlagStatus>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d0dd      	beq.n	800a82c <Codec_WriteRegister+0x1c4>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 800a870:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a874:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a878:	f04f 0101 	mov.w	r1, #1
 800a87c:	f7fd f972 	bl	8007b64 <I2C_GenerateSTOP>
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 800a880:	68fb      	ldr	r3, [r7, #12]
}
 800a882:	4618      	mov	r0, r3
 800a884:	f107 0710 	add.w	r7, r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	4603      	mov	r3, r0
 800a894:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800a89c:	f640 1318 	movw	r3, #2328	; 0x918
 800a8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a8a4:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 800a8a8:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800a8aa:	e016      	b.n	800a8da <Codec_ReadRegister+0x4e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800a8ac:	f640 1318 	movw	r3, #2328	; 0x918
 800a8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	bf14      	ite	ne
 800a8ba:	2200      	movne	r2, #0
 800a8bc:	2201      	moveq	r2, #1
 800a8be:	b2d2      	uxtb	r2, r2
 800a8c0:	f103 31ff 	add.w	r1, r3, #4294967295
 800a8c4:	f640 1318 	movw	r3, #2328	; 0x918
 800a8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a8cc:	6019      	str	r1, [r3, #0]
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	d003      	beq.n	800a8da <Codec_ReadRegister+0x4e>
 800a8d2:	f000 fb8b 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	e197      	b.n	800ac0a <Codec_ReadRegister+0x37e>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800a8da:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a8de:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a8e2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800a8e6:	f7fd fc2b 	bl	8008140 <I2C_GetFlagStatus>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1dd      	bne.n	800a8ac <Codec_ReadRegister+0x20>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 800a8f0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a8f4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a8f8:	f04f 0101 	mov.w	r1, #1
 800a8fc:	f7fd f912 	bl	8007b24 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800a900:	f640 1318 	movw	r3, #2328	; 0x918
 800a904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a90c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800a90e:	e016      	b.n	800a93e <Codec_ReadRegister+0xb2>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800a910:	f640 1318 	movw	r3, #2328	; 0x918
 800a914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bf14      	ite	ne
 800a91e:	2200      	movne	r2, #0
 800a920:	2201      	moveq	r2, #1
 800a922:	b2d2      	uxtb	r2, r2
 800a924:	f103 31ff 	add.w	r1, r3, #4294967295
 800a928:	f640 1318 	movw	r3, #2328	; 0x918
 800a92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a930:	6019      	str	r1, [r3, #0]
 800a932:	2a00      	cmp	r2, #0
 800a934:	d003      	beq.n	800a93e <Codec_ReadRegister+0xb2>
 800a936:	f000 fb59 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800a93a:	4603      	mov	r3, r0
 800a93c:	e165      	b.n	800ac0a <Codec_ReadRegister+0x37e>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800a93e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a942:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a946:	f04f 0101 	mov.w	r1, #1
 800a94a:	f2c0 0103 	movt	r1, #3
 800a94e:	f7fd fb99 	bl	8008084 <I2C_CheckEvent>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d0db      	beq.n	800a910 <Codec_ReadRegister+0x84>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 800a958:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a95c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a960:	f04f 0194 	mov.w	r1, #148	; 0x94
 800a964:	f04f 0200 	mov.w	r2, #0
 800a968:	f7fd f91c 	bl	8007ba4 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800a96c:	f640 1318 	movw	r3, #2328	; 0x918
 800a970:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a978:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a97a:	e016      	b.n	800a9aa <Codec_ReadRegister+0x11e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800a97c:	f640 1318 	movw	r3, #2328	; 0x918
 800a980:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	bf14      	ite	ne
 800a98a:	2200      	movne	r2, #0
 800a98c:	2201      	moveq	r2, #1
 800a98e:	b2d2      	uxtb	r2, r2
 800a990:	f103 31ff 	add.w	r1, r3, #4294967295
 800a994:	f640 1318 	movw	r3, #2328	; 0x918
 800a998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a99c:	6019      	str	r1, [r3, #0]
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	d003      	beq.n	800a9aa <Codec_ReadRegister+0x11e>
 800a9a2:	f000 fb23 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	e12f      	b.n	800ac0a <Codec_ReadRegister+0x37e>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a9aa:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a9ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a9b2:	f04f 0182 	mov.w	r1, #130	; 0x82
 800a9b6:	f2c0 0107 	movt	r1, #7
 800a9ba:	f7fd fb63 	bl	8008084 <I2C_CheckEvent>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d0db      	beq.n	800a97c <Codec_ReadRegister+0xf0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800a9ca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	f7fd fa4c 	bl	8007e6c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800a9d4:	f640 1318 	movw	r3, #2328	; 0x918
 800a9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9e0:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 800a9e2:	e016      	b.n	800aa12 <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800a9e4:	f640 1318 	movw	r3, #2328	; 0x918
 800a9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	bf14      	ite	ne
 800a9f2:	2200      	movne	r2, #0
 800a9f4:	2201      	moveq	r2, #1
 800a9f6:	b2d2      	uxtb	r2, r2
 800a9f8:	f103 31ff 	add.w	r1, r3, #4294967295
 800a9fc:	f640 1318 	movw	r3, #2328	; 0x918
 800aa00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa04:	6019      	str	r1, [r3, #0]
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	d003      	beq.n	800aa12 <Codec_ReadRegister+0x186>
 800aa0a:	f000 faef 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	e0fb      	b.n	800ac0a <Codec_ReadRegister+0x37e>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 800aa12:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800aa16:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800aa1a:	f04f 0104 	mov.w	r1, #4
 800aa1e:	f2c1 0100 	movt	r1, #4096	; 0x1000
 800aa22:	f7fd fb8d 	bl	8008140 <I2C_GetFlagStatus>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d0db      	beq.n	800a9e4 <Codec_ReadRegister+0x158>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 800aa2c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800aa30:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800aa34:	f04f 0101 	mov.w	r1, #1
 800aa38:	f7fd f874 	bl	8007b24 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800aa3c:	f640 1318 	movw	r3, #2328	; 0x918
 800aa40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aa48:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800aa4a:	e016      	b.n	800aa7a <Codec_ReadRegister+0x1ee>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800aa4c:	f640 1318 	movw	r3, #2328	; 0x918
 800aa50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	bf14      	ite	ne
 800aa5a:	2200      	movne	r2, #0
 800aa5c:	2201      	moveq	r2, #1
 800aa5e:	b2d2      	uxtb	r2, r2
 800aa60:	f103 31ff 	add.w	r1, r3, #4294967295
 800aa64:	f640 1318 	movw	r3, #2328	; 0x918
 800aa68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa6c:	6019      	str	r1, [r3, #0]
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	d003      	beq.n	800aa7a <Codec_ReadRegister+0x1ee>
 800aa72:	f000 fabb 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800aa76:	4603      	mov	r3, r0
 800aa78:	e0c7      	b.n	800ac0a <Codec_ReadRegister+0x37e>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800aa7a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800aa7e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800aa82:	f04f 0101 	mov.w	r1, #1
 800aa86:	f2c0 0103 	movt	r1, #3
 800aa8a:	f7fd fafb 	bl	8008084 <I2C_CheckEvent>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0db      	beq.n	800aa4c <Codec_ReadRegister+0x1c0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 800aa94:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800aa98:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800aa9c:	f04f 0194 	mov.w	r1, #148	; 0x94
 800aaa0:	f04f 0201 	mov.w	r2, #1
 800aaa4:	f7fd f87e 	bl	8007ba4 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800aaa8:	f640 1318 	movw	r3, #2328	; 0x918
 800aaac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aab4:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 800aab6:	e016      	b.n	800aae6 <Codec_ReadRegister+0x25a>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800aab8:	f640 1318 	movw	r3, #2328	; 0x918
 800aabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	bf14      	ite	ne
 800aac6:	2200      	movne	r2, #0
 800aac8:	2201      	moveq	r2, #1
 800aaca:	b2d2      	uxtb	r2, r2
 800aacc:	f103 31ff 	add.w	r1, r3, #4294967295
 800aad0:	f640 1318 	movw	r3, #2328	; 0x918
 800aad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aad8:	6019      	str	r1, [r3, #0]
 800aada:	2a00      	cmp	r2, #0
 800aadc:	d003      	beq.n	800aae6 <Codec_ReadRegister+0x25a>
 800aade:	f000 fa85 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800aae2:	4603      	mov	r3, r0
 800aae4:	e091      	b.n	800ac0a <Codec_ReadRegister+0x37e>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 800aae6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800aaea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800aaee:	f04f 0102 	mov.w	r1, #2
 800aaf2:	f2c1 0100 	movt	r1, #4096	; 0x1000
 800aaf6:	f7fd fb23 	bl	8008140 <I2C_GetFlagStatus>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0db      	beq.n	800aab8 <Codec_ReadRegister+0x22c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 800ab00:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ab04:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ab08:	f04f 0100 	mov.w	r1, #0
 800ab0c:	f7fd f868 	bl	8007be0 <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 800ab10:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800ab14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab18:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 800ab1a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ab1e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ab22:	f04f 0101 	mov.w	r1, #1
 800ab26:	f7fd f81d 	bl	8007b64 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800ab2a:	f640 1318 	movw	r3, #2328	; 0x918
 800ab2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab36:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 800ab38:	e016      	b.n	800ab68 <Codec_ReadRegister+0x2dc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800ab3a:	f640 1318 	movw	r3, #2328	; 0x918
 800ab3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bf14      	ite	ne
 800ab48:	2200      	movne	r2, #0
 800ab4a:	2201      	moveq	r2, #1
 800ab4c:	b2d2      	uxtb	r2, r2
 800ab4e:	f103 31ff 	add.w	r1, r3, #4294967295
 800ab52:	f640 1318 	movw	r3, #2328	; 0x918
 800ab56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab5a:	6019      	str	r1, [r3, #0]
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	d003      	beq.n	800ab68 <Codec_ReadRegister+0x2dc>
 800ab60:	f000 fa44 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800ab64:	4603      	mov	r3, r0
 800ab66:	e050      	b.n	800ac0a <Codec_ReadRegister+0x37e>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 800ab68:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ab6c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ab70:	f04f 0140 	mov.w	r1, #64	; 0x40
 800ab74:	f2c1 0100 	movt	r1, #4096	; 0x1000
 800ab78:	f7fd fae2 	bl	8008140 <I2C_GetFlagStatus>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0db      	beq.n	800ab3a <Codec_ReadRegister+0x2ae>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 800ab82:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ab86:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ab8a:	f7fd f97f 	bl	8007e8c <I2C_ReceiveData>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800ab92:	f640 1318 	movw	r3, #2328	; 0x918
 800ab96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ab9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab9e:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 800aba0:	e016      	b.n	800abd0 <Codec_ReadRegister+0x344>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800aba2:	f640 1318 	movw	r3, #2328	; 0x918
 800aba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	bf14      	ite	ne
 800abb0:	2200      	movne	r2, #0
 800abb2:	2201      	moveq	r2, #1
 800abb4:	b2d2      	uxtb	r2, r2
 800abb6:	f103 31ff 	add.w	r1, r3, #4294967295
 800abba:	f640 1318 	movw	r3, #2328	; 0x918
 800abbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abc2:	6019      	str	r1, [r3, #0]
 800abc4:	2a00      	cmp	r2, #0
 800abc6:	d003      	beq.n	800abd0 <Codec_ReadRegister+0x344>
 800abc8:	f000 fa10 	bl	800afec <Codec_TIMEOUT_UserCallback>
 800abcc:	4603      	mov	r3, r0
 800abce:	e01c      	b.n	800ac0a <Codec_ReadRegister+0x37e>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 800abd0:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800abd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	b29b      	uxth	r3, r3
 800abdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1de      	bne.n	800aba2 <Codec_ReadRegister+0x316>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 800abe4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800abe8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800abec:	f04f 0101 	mov.w	r1, #1
 800abf0:	f7fc fff6 	bl	8007be0 <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 800abf4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800abf8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800abfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ac00:	f2c1 0100 	movt	r1, #4096	; 0x1000
 800ac04:	f7fd fad8 	bl	80081b8 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 800ac08:	68fb      	ldr	r3, [r7, #12]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f107 0710 	add.w	r7, r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 800ac1a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ac1e:	f04f 0101 	mov.w	r1, #1
 800ac22:	f7fd ff49 	bl	8008ab8 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 800ac26:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ac2a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ac2e:	f7fc fe1d 	bl	800786c <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800ac32:	f04f 0300 	mov.w	r3, #0
 800ac36:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800ac38:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800ac3c:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 800ac3e:	f04f 0333 	mov.w	r3, #51	; 0x33
 800ac42:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800ac44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac48:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800ac4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac4e:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800ac50:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800ac54:	f2c0 0301 	movt	r3, #1
 800ac58:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 800ac5a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ac5e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ac62:	f04f 0101 	mov.w	r1, #1
 800ac66:	f7fc ff3d 	bl	8007ae4 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 800ac6a:	463b      	mov	r3, r7
 800ac6c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800ac70:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ac74:	4619      	mov	r1, r3
 800ac76:	f7fc fe3d 	bl	80078f4 <I2C_Init>
}
 800ac7a:	f107 0710 	add.w	r7, r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop

0800ac84 <Codec_CtrlInterface_DeInit>:
  *         may be used by other modules.
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_DeInit(void)
{
 800ac84:	b480      	push	{r7}
 800ac86:	af00      	add	r7, sp, #0
  /* Disable the I2C peripheral */ /* This step is not done here because 
     the I2C interface can be used by other modules */
  /* I2C_DeInit(CODEC_I2C); */
}
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bc80      	pop	{r7}
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop

0800ac90 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b08a      	sub	sp, #40	; 0x28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 800ac98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ac9c:	f04f 0101 	mov.w	r1, #1
 800aca0:	f7fd ff0a 	bl	8008ab8 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 800aca4:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800aca8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800acac:	f7fe f9ce 	bl	800904c <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 800acb4:	f04f 0300 	mov.w	r3, #0
 800acb8:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 800acba:	f04f 0300 	mov.w	r3, #0
 800acbe:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 800acc0:	f04f 0300 	mov.w	r3, #0
 800acc4:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 800acc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acca:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 800accc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acd0:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 800acd2:	f107 0318 	add.w	r3, r7, #24
 800acd6:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800acda:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800acde:	4619      	mov	r1, r3
 800ace0:	f7fe fa3c 	bl	800915c <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800ace4:	f640 131c 	movw	r3, #2332	; 0x91c
 800ace8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d11b      	bne.n	800ad2a <Codec_AudioInterface_Init+0x9a>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 800acf2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800acf6:	f04f 0101 	mov.w	r1, #1
 800acfa:	f7fd fedd 	bl	8008ab8 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 800acfe:	f04f 0300 	mov.w	r3, #0
 800ad02:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800ad04:	f04f 0300 	mov.w	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800ad0a:	f04f 0300 	mov.w	r3, #0
 800ad0e:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 800ad10:	f107 0308 	add.w	r3, r7, #8
 800ad14:	f04f 0000 	mov.w	r0, #0
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f7fb fafd 	bl	8006318 <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 800ad1e:	f04f 0000 	mov.w	r0, #0
 800ad22:	f04f 0101 	mov.w	r1, #1
 800ad26:	f7fb fb4b 	bl	80063c0 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 800ad2a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop

0800ad34 <Codec_AudioInterface_DeInit>:
  * @brief  Restores the Audio Codec audio interface to its default state.
  * @param  None
  * @retval None
  */
static void Codec_AudioInterface_DeInit(void)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	af00      	add	r7, sp, #0
  /* Disable the CODEC_I2S peripheral (in case it hasn't already been disabled) */
  I2S_Cmd(CODEC_I2S, DISABLE);
 800ad38:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800ad3c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ad40:	f04f 0100 	mov.w	r1, #0
 800ad44:	f7fe fb84 	bl	8009450 <I2S_Cmd>
  
  /* Deinitialize the CODEC_I2S peripheral */
  SPI_I2S_DeInit(CODEC_I2S);
 800ad48:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800ad4c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ad50:	f7fe f97c 	bl	800904c <SPI_I2S_DeInit>
  
  /* Disable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, DISABLE); 
 800ad54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ad58:	f04f 0100 	mov.w	r1, #0
 800ad5c:	f7fd feac 	bl	8008ab8 <RCC_APB1PeriphClockCmd>
}
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop

0800ad64 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 800ad6a:	f04f 0008 	mov.w	r0, #8
 800ad6e:	f04f 0101 	mov.w	r1, #1
 800ad72:	f7fd fe1d 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 800ad76:	f04f 0310 	mov.w	r3, #16
 800ad7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800ad7c:	f04f 0301 	mov.w	r3, #1
 800ad80:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800ad82:	f04f 0302 	mov.w	r3, #2
 800ad86:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ad88:	f04f 0300 	mov.w	r3, #0
 800ad8c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800ad8e:	f04f 0300 	mov.w	r3, #0
 800ad92:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 800ad94:	463b      	mov	r3, r7
 800ad96:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ad9a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ad9e:	4619      	mov	r1, r3
 800ada0:	f7fc fb78 	bl	8007494 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 800ada4:	f04f 0007 	mov.w	r0, #7
 800ada8:	f04f 0101 	mov.w	r1, #1
 800adac:	f7fd fe00 	bl	80089b0 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 800adb0:	f44f 7310 	mov.w	r3, #576	; 0x240
 800adb4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800adb6:	f04f 0302 	mov.w	r3, #2
 800adba:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800adbc:	f04f 0302 	mov.w	r3, #2
 800adc0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800adc2:	f04f 0301 	mov.w	r3, #1
 800adc6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800adc8:	f04f 0300 	mov.w	r3, #0
 800adcc:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 800adce:	463b      	mov	r3, r7
 800add0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800add4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800add8:	4619      	mov	r1, r3
 800adda:	f7fc fb5b 	bl	8007494 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 800adde:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ade2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ade6:	f04f 0106 	mov.w	r1, #6
 800adea:	f04f 0204 	mov.w	r2, #4
 800adee:	f7fc fce7 	bl	80077c0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 800adf2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800adf6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800adfa:	f04f 0109 	mov.w	r1, #9
 800adfe:	f04f 0204 	mov.w	r2, #4
 800ae02:	f7fc fcdd 	bl	80077c0 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 800ae06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ae0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800ae0c:	f04f 0302 	mov.w	r3, #2
 800ae10:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800ae12:	f04f 0302 	mov.w	r3, #2
 800ae16:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ae18:	f04f 0300 	mov.w	r3, #0
 800ae1c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800ae1e:	f04f 0300 	mov.w	r3, #0
 800ae22:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 800ae24:	463b      	mov	r3, r7
 800ae26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ae2a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ae2e:	4619      	mov	r1, r3
 800ae30:	f7fc fb30 	bl	8007494 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 800ae34:	f04f 0000 	mov.w	r0, #0
 800ae38:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ae3c:	f04f 0104 	mov.w	r1, #4
 800ae40:	f04f 0206 	mov.w	r2, #6
 800ae44:	f7fc fcbc 	bl	80077c0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 800ae48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ae4c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ae50:	f04f 010a 	mov.w	r1, #10
 800ae54:	f04f 0206 	mov.w	r2, #6
 800ae58:	f7fc fcb2 	bl	80077c0 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 800ae5c:	f640 131c 	movw	r3, #2332	; 0x91c
 800ae60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d015      	beq.n	800ae96 <Codec_GPIO_Init+0x132>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 800ae6a:	f04f 0310 	mov.w	r3, #16
 800ae6e:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 800ae70:	463b      	mov	r3, r7
 800ae72:	f04f 0000 	mov.w	r0, #0
 800ae76:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f7fc fb0a 	bl	8007494 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 800ae80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ae84:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ae88:	f04f 010c 	mov.w	r1, #12
 800ae8c:	f04f 0206 	mov.w	r2, #6
 800ae90:	f7fc fc96 	bl	80077c0 <GPIO_PinAFConfig>
 800ae94:	e016      	b.n	800aec4 <Codec_GPIO_Init+0x160>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800ae96:	f04f 0001 	mov.w	r0, #1
 800ae9a:	f04f 0101 	mov.w	r1, #1
 800ae9e:	f7fd fd87 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 800aea2:	f04f 0310 	mov.w	r3, #16
 800aea6:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800aea8:	f04f 0303 	mov.w	r3, #3
 800aeac:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800aeae:	f04f 0300 	mov.w	r3, #0
 800aeb2:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800aeb4:	463b      	mov	r3, r7
 800aeb6:	f04f 0000 	mov.w	r0, #0
 800aeba:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800aebe:	4619      	mov	r1, r3
 800aec0:	f7fc fae8 	bl	8007494 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 800aec4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aec8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800aeca:	f04f 0302 	mov.w	r3, #2
 800aece:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800aed0:	f04f 0302 	mov.w	r3, #2
 800aed4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800aed6:	f04f 0300 	mov.w	r3, #0
 800aeda:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800aedc:	f04f 0300 	mov.w	r3, #0
 800aee0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 800aee2:	463b      	mov	r3, r7
 800aee4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aee8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800aeec:	4619      	mov	r1, r3
 800aeee:	f7fc fad1 	bl	8007494 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 800aef2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aef6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800aefa:	f04f 0107 	mov.w	r1, #7
 800aefe:	f04f 0206 	mov.w	r2, #6
 800af02:	f7fc fc5d 	bl	80077c0 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 800af06:	f107 0708 	add.w	r7, r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop

0800af10 <Codec_GPIO_DeInit>:
  * @brief  Restores the IOs used by the Audio Codec interface to their default state.
  * @param  None
  * @retval None
  */
static void Codec_GPIO_DeInit(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Deinitialize all the GPIOs used by the driver */
  GPIO_InitStructure.GPIO_Pin =  CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN;
 800af16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800af1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800af1c:	f04f 0300 	mov.w	r3, #0
 800af20:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800af28:	f04f 0300 	mov.w	r3, #0
 800af2c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800af2e:	f04f 0300 	mov.w	r3, #0
 800af32:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);  
 800af34:	463b      	mov	r3, r7
 800af36:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af3a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800af3e:	4619      	mov	r1, r3
 800af40:	f7fc faa8 	bl	8007494 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 800af44:	f04f 0310 	mov.w	r3, #16
 800af48:	603b      	str	r3, [r7, #0]
  GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 800af4a:	463b      	mov	r3, r7
 800af4c:	f04f 0000 	mov.w	r0, #0
 800af50:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800af54:	4619      	mov	r1, r3
 800af56:	f7fc fa9d 	bl	8007494 <GPIO_Init>
     
  /* Disconnect pins from I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, 0x00);  
 800af5a:	f04f 0000 	mov.w	r0, #0
 800af5e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800af62:	f04f 0104 	mov.w	r1, #4
 800af66:	f04f 0200 	mov.w	r2, #0
 800af6a:	f7fc fc29 	bl	80077c0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, 0x00);
 800af6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af72:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800af76:	f04f 010a 	mov.w	r1, #10
 800af7a:	f04f 0200 	mov.w	r2, #0
 800af7e:	f7fc fc1f 	bl	80077c0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, 0x00);  
 800af82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af86:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800af8a:	f04f 010c 	mov.w	r1, #12
 800af8e:	f04f 0200 	mov.w	r2, #0
 800af92:	f7fc fc15 	bl	80077c0 <GPIO_PinAFConfig>
  
#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins deinitialization: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 800af96:	f04f 0380 	mov.w	r3, #128	; 0x80
 800af9a:	603b      	str	r3, [r7, #0]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 800af9c:	463b      	mov	r3, r7
 800af9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800afa2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800afa6:	4619      	mov	r1, r3
 800afa8:	f7fc fa74 	bl	8007494 <GPIO_Init>
  /* Disconnect pins from I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 800afac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800afb0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800afb4:	f04f 0107 	mov.w	r1, #7
 800afb8:	f04f 0206 	mov.w	r2, #6
 800afbc:	f7fc fc00 	bl	80077c0 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */    
}
 800afc0:	f107 0708 	add.w	r7, r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <Delay>:
  * @brief  Inserts a delay time (not accurate timing).
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void Delay( __IO uint32_t nCount)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 800afd0:	e003      	b.n	800afda <Delay+0x12>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f103 33ff 	add.w	r3, r3, #4294967295
 800afd8:	607b      	str	r3, [r7, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1f8      	bne.n	800afd2 <Delay+0xa>
}
 800afe0:	f107 070c 	add.w	r7, r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop

0800afec <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 800afec:	b480      	push	{r7}
 800afee:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
  {   
  }
 800aff0:	e7fe      	b.n	800aff0 <Codec_TIMEOUT_UserCallback+0x4>
 800aff2:	bf00      	nop

0800aff4 <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 800affa:	f640 131c 	movw	r3, #2332	; 0x91c
 800affe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2b01      	cmp	r3, #1
 800b006:	f040 80bc 	bne.w	800b182 <Audio_MAL_Init+0x18e>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 800b00a:	f640 1320 	movw	r3, #2336	; 0x920
 800b00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4618      	mov	r0, r3
 800b016:	f04f 0101 	mov.w	r1, #1
 800b01a:	f7fd fcc9 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 800b01e:	f640 1324 	movw	r3, #2340	; 0x924
 800b022:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4618      	mov	r0, r3
 800b02a:	f04f 0100 	mov.w	r1, #0
 800b02e:	f7fb fdbb 	bl	8006ba8 <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 800b032:	f640 1324 	movw	r3, #2340	; 0x924
 800b036:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fb fbf3 	bl	8006828 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 800b042:	f640 231c 	movw	r3, #2588	; 0xa1c
 800b046:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b050:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b054:	601a      	str	r2, [r3, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 800b056:	f640 1328 	movw	r3, #2344	; 0x928
 800b05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b064:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b068:	605a      	str	r2, [r3, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 800b06a:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b072:	f04f 0200 	mov.w	r2, #0
 800b076:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800b078:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b080:	f04f 0240 	mov.w	r2, #64	; 0x40
 800b084:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 800b086:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b08e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b092:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800b094:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b098:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b09c:	f04f 0200 	mov.w	r2, #0
 800b0a0:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800b0a2:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0ae:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 800b0b0:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0bc:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 800b0be:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b0c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b0ca:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800b0cc:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0d4:	f04f 0200 	mov.w	r2, #0
 800b0d8:	625a      	str	r2, [r3, #36]	; 0x24
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800b0da:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b0e6:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 800b0e8:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0f0:	f04f 0200 	mov.w	r2, #0
 800b0f4:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800b0f6:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0fe:	f04f 0200 	mov.w	r2, #0
 800b102:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800b104:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b108:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b10c:	f04f 0200 	mov.w	r2, #0
 800b110:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 800b112:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b116:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b11a:	f04f 0200 	mov.w	r2, #0
 800b11e:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 800b120:	f640 1324 	movw	r3, #2340	; 0x924
 800b124:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f644 41ac 	movw	r1, #19628	; 0x4cac
 800b130:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b134:	f7fb fc9a 	bl	8006a6c <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 800b138:	f640 1324 	movw	r3, #2340	; 0x924
 800b13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4618      	mov	r0, r3
 800b144:	f04f 0110 	mov.w	r1, #16
 800b148:	f04f 0201 	mov.w	r2, #1
 800b14c:	f7fb feaa 	bl	8006ea4 <DMA_ITConfig>
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_SetPriorityGrouping(NVIC_PriorityGroup_4);		//added for FreeRTOS support in Tansfercomplete callback
 800b150:	f44f 7040 	mov.w	r0, #768	; 0x300
 800b154:	f7fe fdc8 	bl	8009ce8 <NVIC_SetPriorityGrouping>

    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 800b158:	f640 132c 	movw	r3, #2348	; 0x92c
 800b15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	b2db      	uxtb	r3, r3
 800b164:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 800b166:	f04f 030d 	mov.w	r3, #13
 800b16a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 800b16c:	f04f 0300 	mov.w	r3, #0
 800b170:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800b172:	f04f 0301 	mov.w	r3, #1
 800b176:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 800b178:	f107 0304 	add.w	r3, r7, #4
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fa ffe1 	bl	8006144 <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 800b182:	f640 131c 	movw	r3, #2332	; 0x91c
 800b186:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d10a      	bne.n	800b1a6 <Audio_MAL_Init+0x1b2>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 800b190:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800b194:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b198:	f04f 0102 	mov.w	r1, #2
 800b19c:	f04f 0201 	mov.w	r2, #1
 800b1a0:	f7fe fadc 	bl	800975c <SPI_I2S_DMACmd>
 800b1a4:	e01c      	b.n	800b1e0 <Audio_MAL_Init+0x1ec>
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 800b1a6:	f000 f935 	bl	800b414 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 800b1aa:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800b1ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b1b2:	f04f 0171 	mov.w	r1, #113	; 0x71
 800b1b6:	f04f 0201 	mov.w	r2, #1
 800b1ba:	f7fe faf3 	bl	80097a4 <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 800b1be:	f04f 0333 	mov.w	r3, #51	; 0x33
 800b1c2:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 800b1c4:	f04f 030d 	mov.w	r3, #13
 800b1c8:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 800b1ca:	f04f 0300 	mov.w	r3, #0
 800b1ce:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800b1d0:	f04f 0301 	mov.w	r3, #1
 800b1d4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 800b1d6:	f107 0304 	add.w	r3, r7, #4
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fa ffb2 	bl	8006144 <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 800b1e0:	f107 0708 	add.w	r7, r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <Audio_MAL_DeInit>:
  * @brief  Restore default state of the used Media.
  * @param  None
  * @retval None
  */
static void Audio_MAL_DeInit(void)  
{   
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;  
  
  /* Deinitialize the NVIC interrupt for the I2S DMA Stream */
  NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 800b1ee:	f640 132c 	movw	r3, #2348	; 0x92c
 800b1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 800b1fc:	f04f 030d 	mov.w	r3, #13
 800b200:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 800b202:	f04f 0300 	mov.w	r3, #0
 800b206:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 800b208:	f04f 0300 	mov.w	r3, #0
 800b20c:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);  
 800b20e:	f107 0304 	add.w	r3, r7, #4
 800b212:	4618      	mov	r0, r3
 800b214:	f7fa ff96 	bl	8006144 <NVIC_Init>
#endif 
  
  /* Disable the DMA stream before the deinit */
  DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 800b218:	f640 1324 	movw	r3, #2340	; 0x924
 800b21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4618      	mov	r0, r3
 800b224:	f04f 0100 	mov.w	r1, #0
 800b228:	f7fb fcbe 	bl	8006ba8 <DMA_Cmd>
  
  /* Dinitialize the DMA Stream */
  DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 800b22c:	f640 1324 	movw	r3, #2340	; 0x924
 800b230:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4618      	mov	r0, r3
 800b238:	f7fb faf6 	bl	8006828 <DMA_DeInit>
  
  /* 
     The DMA clock is not disabled, since it can be used by other streams 
                                                                          */ 
}
 800b23c:	f107 0708 	add.w	r7, r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 800b24e:	f640 131c 	movw	r3, #2332	; 0x91c
 800b252:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d124      	bne.n	800b2a6 <Audio_MAL_Play+0x62>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 800b25c:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b260:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size/2;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800b26e:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b272:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b276:	611a      	str	r2, [r3, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800b278:	f640 1324 	movw	r3, #2340	; 0x924
 800b27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4618      	mov	r0, r3
 800b284:	f644 41ac 	movw	r1, #19628	; 0x4cac
 800b288:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b28c:	f7fb fbee 	bl	8006a6c <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 800b290:	f640 1324 	movw	r3, #2340	; 0x924
 800b294:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f04f 0101 	mov.w	r1, #1
 800b2a0:	f7fb fc82 	bl	8006ba8 <DMA_Cmd>
 800b2a4:	e021      	b.n	800b2ea <Audio_MAL_Play+0xa6>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 800b2a6:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 800b2b2:	f644 43ac 	movw	r3, #19628	; 0x4cac
 800b2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	611a      	str	r2, [r3, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800b2be:	f640 1324 	movw	r3, #2340	; 0x924
 800b2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f644 41ac 	movw	r1, #19628	; 0x4cac
 800b2ce:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b2d2:	f7fb fbcb 	bl	8006a6c <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 800b2d6:	f640 1324 	movw	r3, #2340	; 0x924
 800b2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f04f 0101 	mov.w	r1, #1
 800b2e6:	f7fb fc5f 	bl	8006ba8 <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 800b2ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b2ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2f2:	8b9b      	ldrh	r3, [r3, #28]
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d107      	bne.n	800b30e <Audio_MAL_Play+0xca>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 800b2fe:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800b302:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b306:	f04f 0101 	mov.w	r1, #1
 800b30a:	f7fe f8a1 	bl	8009450 <I2S_Cmd>
  }
}
 800b30e:	f107 0708 	add.w	r7, r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop

0800b318 <Audio_MAL_PauseResume>:
  *              from 0) to resume. 
  * @param  Addr: Address from/at which the audio stream should resume/pause.
  * @retval None
  */
static void Audio_MAL_PauseResume(uint32_t Cmd, uint32_t Addr)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  /* Pause the audio file playing */
  if (Cmd == AUDIO_PAUSE)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d114      	bne.n	800b352 <Audio_MAL_PauseResume+0x3a>
  {   
    /* Disable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, DISABLE);
 800b328:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800b32c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b330:	f04f 0102 	mov.w	r1, #2
 800b334:	f04f 0200 	mov.w	r2, #0
 800b338:	f7fe fa10 	bl	800975c <SPI_I2S_DMACmd>
    /* Pause the I2S DMA Stream 
        Note. For the STM32F40x devices, the DMA implements a pause feature, 
              by disabling the stream, all configuration is preserved and data 
              transfer is paused till the next enable of the stream.
              This feature is not available on STM32F40x devices. */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 800b33c:	f640 1324 	movw	r3, #2340	; 0x924
 800b340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4618      	mov	r0, r3
 800b348:	f04f 0100 	mov.w	r1, #0
 800b34c:	f7fb fc2c 	bl	8006ba8 <DMA_Cmd>
 800b350:	e025      	b.n	800b39e <Audio_MAL_PauseResume+0x86>
  }
  else /* AUDIO_RESUME */
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);
 800b352:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800b356:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b35a:	f04f 0102 	mov.w	r1, #2
 800b35e:	f04f 0201 	mov.w	r2, #1
 800b362:	f7fe f9fb 	bl	800975c <SPI_I2S_DMACmd>
    /* Resume the I2S DMA Stream 
        Note. For the STM32F40x devices, the DMA implements a pause feature, 
              by disabling the stream, all configuration is preserved and data 
              transfer is paused till the next enable of the stream.
              This feature is not available on STM32F40x devices. */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 800b366:	f640 1324 	movw	r3, #2340	; 0x924
 800b36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4618      	mov	r0, r3
 800b372:	f04f 0101 	mov.w	r1, #1
 800b376:	f7fb fc17 	bl	8006ba8 <DMA_Cmd>
    
    /* If the I2S peripheral is still not enabled, enable it */
    if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 800b37a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b37e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b382:	8b9b      	ldrh	r3, [r3, #28]
 800b384:	b29b      	uxth	r3, r3
 800b386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d107      	bne.n	800b39e <Audio_MAL_PauseResume+0x86>
    {
      I2S_Cmd(CODEC_I2S, ENABLE);
 800b38e:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800b392:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b396:	f04f 0101 	mov.w	r1, #1
 800b39a:	f7fe f859 	bl	8009450 <I2S_Cmd>
    }    
  } 
}
 800b39e:	f107 0708 	add.w	r7, r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop

0800b3a8 <Audio_MAL_Stop>:
  * @brief  Stops audio stream playing on the used Media.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Stop(void)
{   
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
  /* Stop the Transfer on the I2S side: Stop and disable the DMA stream */
  DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 800b3ac:	f640 1324 	movw	r3, #2340	; 0x924
 800b3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f04f 0100 	mov.w	r1, #0
 800b3bc:	f7fb fbf4 	bl	8006ba8 <DMA_Cmd>

  /* Clear all the DMA flags for the next transfer */
  DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC |AUDIO_MAL_DMA_FLAG_HT | \
 800b3c0:	f640 1324 	movw	r3, #2340	; 0x924
 800b3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	f640 1330 	movw	r3, #2352	; 0x930
 800b3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3d2:	6819      	ldr	r1, [r3, #0]
 800b3d4:	f640 1334 	movw	r3, #2356	; 0x934
 800b3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4319      	orrs	r1, r3
 800b3e0:	f640 1338 	movw	r3, #2360	; 0x938
 800b3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4319      	orrs	r1, r3
 800b3ec:	f640 133c 	movw	r3, #2364	; 0x93c
 800b3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	430b      	orrs	r3, r1
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	f7fb fd20 	bl	8006e40 <DMA_ClearFlag>
  /*  
           The I2S DMA requests are not disabled here.
                                                            */
  
  /* In all modes, disable the I2S peripheral */
  I2S_Cmd(CODEC_I2S, DISABLE);
 800b400:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800b404:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b408:	f04f 0100 	mov.w	r1, #0
 800b40c:	f7fe f820 	bl	8009450 <I2S_Cmd>
}
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop

0800b414 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 800b41a:	f04f 0001 	mov.w	r0, #1
 800b41e:	f2c0 0020 	movt	r0, #32
 800b422:	f04f 0101 	mov.w	r1, #1
 800b426:	f7fd fac3 	bl	80089b0 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 800b42a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800b42e:	f04f 0101 	mov.w	r1, #1
 800b432:	f7fd fb41 	bl	8008ab8 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 800b436:	f04f 0310 	mov.w	r3, #16
 800b43a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800b43c:	f04f 0303 	mov.w	r3, #3
 800b440:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800b442:	f04f 0300 	mov.w	r3, #0
 800b446:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800b448:	463b      	mov	r3, r7
 800b44a:	f04f 0000 	mov.w	r0, #0
 800b44e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b452:	4619      	mov	r1, r3
 800b454:	f7fc f81e 	bl	8007494 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 800b458:	f04f 0300 	mov.w	r3, #0
 800b45c:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800b45e:	f04f 0300 	mov.w	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800b464:	f04f 0300 	mov.w	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 800b46a:	f107 0308 	add.w	r3, r7, #8
 800b46e:	f04f 0000 	mov.w	r0, #0
 800b472:	4619      	mov	r1, r3
 800b474:	f7fa ff50 	bl	8006318 <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 800b478:	f04f 0000 	mov.w	r0, #0
 800b47c:	f04f 0101 	mov.w	r1, #1
 800b480:	f7fa ff9e 	bl	80063c0 <DAC_Cmd>
}
 800b484:	f107 0718 	add.w	r7, r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <LIS302DL_Init>:
  * @param  LIS302DL_Config_Struct: pointer to a LIS302DL_Config_TypeDef structure 
  *         that contains the configuration setting for the LIS302DL.
  * @retval None
  */
void LIS302DL_Init(LIS302DL_InitTypeDef *LIS302DL_InitStruct)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 800b494:	f04f 0300 	mov.w	r3, #0
 800b498:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
 800b49a:	f000 f9ed 	bl	800b878 <LIS302DL_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	785a      	ldrb	r2, [r3, #1]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	791b      	ldrb	r3, [r3, #4]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	73fb      	strb	r3, [r7, #15]
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 800b4c4:	f107 030f 	add.w	r3, r7, #15
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f04f 0120 	mov.w	r1, #32
 800b4ce:	f04f 0201 	mov.w	r2, #1
 800b4d2:	f000 f8ed 	bl	800b6b0 <LIS302DL_Write>
}
 800b4d6:	f107 0710 	add.w	r7, r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop

0800b4e0 <LIS302DL_FilterConfig>:
  * @param  LIS302DL_Filter_ConfigTypeDef: pointer to a LIS302DL_FilterConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Filter.
  * @retval None
  */
void LIS302DL_FilterConfig(LIS302DL_FilterConfigTypeDef *LIS302DL_FilterConfigStruct)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 800b4e8:	f04f 0300 	mov.w	r3, #0
 800b4ec:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  LIS302DL_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800b4ee:	f107 030f 	add.w	r3, r7, #15
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f04f 0121 	mov.w	r1, #33	; 0x21
 800b4f8:	f04f 0201 	mov.w	r2, #1
 800b4fc:	f000 f910 	bl	800b720 <LIS302DL_Read>
  
  /* Clear high pass filter cut-off level, interrupt and data selection bits*/
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 800b506:	b2db      	uxtb	r3, r3
 800b508:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
  /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
  ctrl |= (uint8_t)(LIS302DL_FilterConfigStruct->HighPassFilter_Data_Selection | \
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	781a      	ldrb	r2, [r3, #0]
                    LIS302DL_FilterConfigStruct->HighPassFilter_CutOff_Frequency | \
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	785b      	ldrb	r3, [r3, #1]
  /* Clear high pass filter cut-off level, interrupt and data selection bits*/
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
  /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
  ctrl |= (uint8_t)(LIS302DL_FilterConfigStruct->HighPassFilter_Data_Selection | \
 800b512:	4313      	orrs	r3, r2
 800b514:	b2da      	uxtb	r2, r3
                    LIS302DL_FilterConfigStruct->HighPassFilter_CutOff_Frequency | \
                    LIS302DL_FilterConfigStruct->HighPassFilter_Interrupt);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	789b      	ldrb	r3, [r3, #2]
  /* Clear high pass filter cut-off level, interrupt and data selection bits*/
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
  /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
  ctrl |= (uint8_t)(LIS302DL_FilterConfigStruct->HighPassFilter_Data_Selection | \
 800b51a:	4313      	orrs	r3, r2
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	4313      	orrs	r3, r2
 800b522:	b2db      	uxtb	r3, r3
 800b524:	73fb      	strb	r3, [r7, #15]
                    LIS302DL_FilterConfigStruct->HighPassFilter_CutOff_Frequency | \
                    LIS302DL_FilterConfigStruct->HighPassFilter_Interrupt);
  
  /* Write value to MEMS CTRL_REG2 register */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800b526:	f107 030f 	add.w	r3, r7, #15
 800b52a:	4618      	mov	r0, r3
 800b52c:	f04f 0121 	mov.w	r1, #33	; 0x21
 800b530:	f04f 0201 	mov.w	r2, #1
 800b534:	f000 f8bc 	bl	800b6b0 <LIS302DL_Write>
}
 800b538:	f107 0710 	add.w	r7, r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 800b548:	f04f 0300 	mov.w	r3, #0
 800b54c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800b54e:	f107 030f 	add.w	r3, r7, #15
 800b552:	4618      	mov	r0, r3
 800b554:	f04f 0138 	mov.w	r1, #56	; 0x38
 800b558:	f04f 0201 	mov.w	r2, #1
 800b55c:	f000 f8e0 	bl	800b720 <LIS302DL_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	785b      	ldrb	r3, [r3, #1]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800b568:	4313      	orrs	r3, r2
 800b56a:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	789b      	ldrb	r3, [r3, #2]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800b570:	4313      	orrs	r3, r2
 800b572:	b2db      	uxtb	r3, r3
 800b574:	73fb      	strb	r3, [r7, #15]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
  
  /* Write value to MEMS CLICK_CFG register */
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800b576:	f107 030f 	add.w	r3, r7, #15
 800b57a:	4618      	mov	r0, r3
 800b57c:	f04f 0138 	mov.w	r1, #56	; 0x38
 800b580:	f04f 0201 	mov.w	r2, #1
 800b584:	f000 f894 	bl	800b6b0 <LIS302DL_Write>
}
 800b588:	f107 0710 	add.w	r7, r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <LIS302DL_LowpowerCmd>:
  *     @arg LIS302DL_LOWPOWERMODE_POWERDOWN: Power down mode
  *     @arg LIS302DL_LOWPOWERMODE_ACTIVE: Active mode  
  * @retval None
  */
void LIS302DL_LowpowerCmd(uint8_t LowPowerMode)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG1 register */
  LIS302DL_Read(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 800b59a:	f107 030f 	add.w	r3, r7, #15
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f04f 0120 	mov.w	r1, #32
 800b5a4:	f04f 0201 	mov.w	r2, #1
 800b5a8:	f000 f8ba 	bl	800b720 <LIS302DL_Read>
  
  /* Set new low power mode configuration */
  tmpreg &= (uint8_t)~LIS302DL_LOWPOWERMODE_ACTIVE;
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
 800b5ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	73fb      	strb	r3, [r7, #15]
  tmpreg |= LowPowerMode;
 800b5b6:	7bfa      	ldrb	r2, [r7, #15]
 800b5b8:	79fb      	ldrb	r3, [r7, #7]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 800b5c0:	f107 030f 	add.w	r3, r7, #15
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f04f 0120 	mov.w	r1, #32
 800b5ca:	f04f 0201 	mov.w	r2, #1
 800b5ce:	f000 f86f 	bl	800b6b0 <LIS302DL_Write>
}
 800b5d2:	f107 0710 	add.w	r7, r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop

0800b5dc <LIS302DL_DataRateCmd>:
  *     @arg LIS302DL_DATARATE_100: 100 Hz output data rate 
  *     @arg LIS302DL_DATARATE_400: 400 Hz output data rate    
  * @retval None
  */
void LIS302DL_DataRateCmd(uint8_t DataRateValue)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG1 register */
  LIS302DL_Read(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 800b5e6:	f107 030f 	add.w	r3, r7, #15
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f04f 0120 	mov.w	r1, #32
 800b5f0:	f04f 0201 	mov.w	r2, #1
 800b5f4:	f000 f894 	bl	800b720 <LIS302DL_Read>
  
  /* Set new Data rate configuration */
  tmpreg &= (uint8_t)~LIS302DL_DATARATE_400;
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	73fb      	strb	r3, [r7, #15]
  tmpreg |= DataRateValue;
 800b602:	7bfa      	ldrb	r2, [r7, #15]
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	4313      	orrs	r3, r2
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 800b60c:	f107 030f 	add.w	r3, r7, #15
 800b610:	4618      	mov	r0, r3
 800b612:	f04f 0120 	mov.w	r1, #32
 800b616:	f04f 0201 	mov.w	r2, #1
 800b61a:	f000 f849 	bl	800b6b0 <LIS302DL_Write>
}
 800b61e:	f107 0710 	add.w	r7, r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop

0800b628 <LIS302DL_FullScaleCmd>:
  *     @arg LIS302DL_FULLSCALE_2_3: +-2.3g
  *     @arg LIS302DL_FULLSCALE_9_2: +-9.2g   
  * @retval None
  */
void LIS302DL_FullScaleCmd(uint8_t FS_value)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG1 register */
  LIS302DL_Read(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 800b632:	f107 030f 	add.w	r3, r7, #15
 800b636:	4618      	mov	r0, r3
 800b638:	f04f 0120 	mov.w	r1, #32
 800b63c:	f04f 0201 	mov.w	r2, #1
 800b640:	f000 f86e 	bl	800b720 <LIS302DL_Read>
  
  /* Set new full scale configuration */
  tmpreg &= (uint8_t)~LIS302DL_FULLSCALE_9_2;
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	f023 0320 	bic.w	r3, r3, #32
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FS_value;
 800b64e:	7bfa      	ldrb	r2, [r7, #15]
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	4313      	orrs	r3, r2
 800b654:	b2db      	uxtb	r3, r3
 800b656:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 800b658:	f107 030f 	add.w	r3, r7, #15
 800b65c:	4618      	mov	r0, r3
 800b65e:	f04f 0120 	mov.w	r1, #32
 800b662:	f04f 0201 	mov.w	r2, #1
 800b666:	f000 f823 	bl	800b6b0 <LIS302DL_Write>
}
 800b66a:	f107 0710 	add.w	r7, r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop

0800b674 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  LIS302DL_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800b67a:	f107 0307 	add.w	r3, r7, #7
 800b67e:	4618      	mov	r0, r3
 800b680:	f04f 0121 	mov.w	r1, #33	; 0x21
 800b684:	f04f 0201 	mov.w	r2, #1
 800b688:	f000 f84a 	bl	800b720 <LIS302DL_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 800b68c:	79fb      	ldrb	r3, [r7, #7]
 800b68e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b692:	b2db      	uxtb	r3, r3
 800b694:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 regsister */
  LIS302DL_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800b696:	f107 0307 	add.w	r3, r7, #7
 800b69a:	4618      	mov	r0, r3
 800b69c:	f04f 0121 	mov.w	r1, #33	; 0x21
 800b6a0:	f04f 0201 	mov.w	r2, #1
 800b6a4:	f000 f804 	bl	800b6b0 <LIS302DL_Write>
}
 800b6a8:	f107 0708 	add.w	r7, r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <LIS302DL_Write>:
  * @param  WriteAddr : LIS302DL's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void LIS302DL_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	460a      	mov	r2, r1
 800b6bc:	70fa      	strb	r2, [r7, #3]
 800b6be:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800b6c0:	883b      	ldrh	r3, [r7, #0]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d903      	bls.n	800b6ce <LIS302DL_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800b6c6:	78fb      	ldrb	r3, [r7, #3]
 800b6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6cc:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 800b6ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b6d2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b6d6:	f04f 0108 	mov.w	r1, #8
 800b6da:	f7fc f82b 	bl	8007734 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 f9af 	bl	800ba44 <LIS302DL_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800b6e6:	e00c      	b.n	800b702 <LIS302DL_Write+0x52>
  {
    LIS302DL_SendByte(*pBuffer);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 f9a9 	bl	800ba44 <LIS302DL_SendByte>
    NumByteToWrite--;
 800b6f2:	883b      	ldrh	r3, [r7, #0]
 800b6f4:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6f8:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f103 0301 	add.w	r3, r3, #1
 800b700:	607b      	str	r3, [r7, #4]
  LIS302DL_CS_LOW();
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800b702:	883b      	ldrh	r3, [r7, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1ef      	bne.n	800b6e8 <LIS302DL_Write+0x38>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 800b708:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b70c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b710:	f04f 0108 	mov.w	r1, #8
 800b714:	f7fc f800 	bl	8007718 <GPIO_SetBits>
}
 800b718:	f107 0708 	add.w	r7, r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <LIS302DL_Read>:
  * @param  ReadAddr : LIS302DL's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the LIS302DL.
  * @retval None
  */
void LIS302DL_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	4613      	mov	r3, r2
 800b72a:	460a      	mov	r2, r1
 800b72c:	70fa      	strb	r2, [r7, #3]
 800b72e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 800b730:	883b      	ldrh	r3, [r7, #0]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d904      	bls.n	800b740 <LIS302DL_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800b736:	78fb      	ldrb	r3, [r7, #3]
 800b738:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800b73c:	70fb      	strb	r3, [r7, #3]
 800b73e:	e003      	b.n	800b748 <LIS302DL_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b746:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 800b748:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b74c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b750:	f04f 0108 	mov.w	r1, #8
 800b754:	f7fb ffee 	bl	8007734 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
 800b758:	78fb      	ldrb	r3, [r7, #3]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 f972 	bl	800ba44 <LIS302DL_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800b760:	e00f      	b.n	800b782 <LIS302DL_Read+0x62>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to LIS302DL (Slave device) */
    *pBuffer = LIS302DL_SendByte(DUMMY_BYTE);
 800b762:	f04f 0000 	mov.w	r0, #0
 800b766:	f000 f96d 	bl	800ba44 <LIS302DL_SendByte>
 800b76a:	4603      	mov	r3, r0
 800b76c:	461a      	mov	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800b772:	883b      	ldrh	r3, [r7, #0]
 800b774:	f103 33ff 	add.w	r3, r3, #4294967295
 800b778:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f103 0301 	add.w	r3, r3, #1
 800b780:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800b782:	883b      	ldrh	r3, [r7, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1ec      	bne.n	800b762 <LIS302DL_Read+0x42>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 800b788:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b78c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b790:	f04f 0108 	mov.w	r1, #8
 800b794:	f7fb ffc0 	bl	8007718 <GPIO_SetBits>
}
 800b798:	f107 0708 	add.w	r7, r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  s16 buffer to store data
  * @retval None
  */
void LIS302DL_ReadACC(int32_t* out)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];
  uint8_t crtl, i = 0x00;
 800b7a8:	f04f 0300 	mov.w	r3, #0
 800b7ac:	75fb      	strb	r3, [r7, #23]
   
  LIS302DL_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);  
 800b7ae:	f107 030f 	add.w	r3, r7, #15
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f04f 0120 	mov.w	r1, #32
 800b7b8:	f04f 0201 	mov.w	r2, #1
 800b7bc:	f7ff ffb0 	bl	800b720 <LIS302DL_Read>
  LIS302DL_Read(buffer, LIS302DL_OUT_X_ADDR, 6);
 800b7c0:	f107 0310 	add.w	r3, r7, #16
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f04f 0129 	mov.w	r1, #41	; 0x29
 800b7ca:	f04f 0206 	mov.w	r2, #6
 800b7ce:	f7ff ffa7 	bl	800b720 <LIS302DL_Read>
  
  switch(crtl & 0x20) 
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	f003 0320 	and.w	r3, r3, #32
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <LIS302DL_ReadACC+0x42>
 800b7dc:	2b20      	cmp	r3, #32
 800b7de:	d023      	beq.n	800b828 <LIS302DL_ReadACC+0x88>
 800b7e0:	e045      	b.n	800b86e <LIS302DL_ReadACC+0xce>
    {
    /* FS bit = 0 ==> Sensitivity typical value = 18milligals/digit*/ 
    case 0x00:
      for(i=0; i<0x03; i++)
 800b7e2:	f04f 0300 	mov.w	r3, #0
 800b7e6:	75fb      	strb	r3, [r7, #23]
 800b7e8:	e01a      	b.n	800b820 <LIS302DL_ReadACC+0x80>
      {
        *out =(int32_t)(LIS302DL_SENSITIVITY_2_3G *  (int8_t)buffer[2*i]);
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7f0:	f107 0218 	add.w	r2, r7, #24
 800b7f4:	18d3      	adds	r3, r2, r3
 800b7f6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	b25a      	sxtb	r2, r3
 800b7fe:	4613      	mov	r3, r2
 800b800:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b804:	189b      	adds	r3, r3, r2
 800b806:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b80a:	461a      	mov	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	601a      	str	r2, [r3, #0]
        out++;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f103 0304 	add.w	r3, r3, #4
 800b816:	607b      	str	r3, [r7, #4]
  
  switch(crtl & 0x20) 
    {
    /* FS bit = 0 ==> Sensitivity typical value = 18milligals/digit*/ 
    case 0x00:
      for(i=0; i<0x03; i++)
 800b818:	7dfb      	ldrb	r3, [r7, #23]
 800b81a:	f103 0301 	add.w	r3, r3, #1
 800b81e:	75fb      	strb	r3, [r7, #23]
 800b820:	7dfb      	ldrb	r3, [r7, #23]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d9e1      	bls.n	800b7ea <LIS302DL_ReadACC+0x4a>
      {
        *out =(int32_t)(LIS302DL_SENSITIVITY_2_3G *  (int8_t)buffer[2*i]);
        out++;
      }
      break;
 800b826:	e023      	b.n	800b870 <LIS302DL_ReadACC+0xd0>
    /* FS bit = 1 ==> Sensitivity typical value = 72milligals/digit*/ 
    case 0x20:
      for(i=0; i<0x03; i++)
 800b828:	f04f 0300 	mov.w	r3, #0
 800b82c:	75fb      	strb	r3, [r7, #23]
 800b82e:	e01a      	b.n	800b866 <LIS302DL_ReadACC+0xc6>
      {
        *out =(int32_t)(LIS302DL_SENSITIVITY_9_2G * (int8_t)buffer[2*i]);
 800b830:	7dfb      	ldrb	r3, [r7, #23]
 800b832:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b836:	f107 0218 	add.w	r2, r7, #24
 800b83a:	18d3      	adds	r3, r2, r3
 800b83c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	b25a      	sxtb	r2, r3
 800b844:	4613      	mov	r3, r2
 800b846:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b84a:	189b      	adds	r3, r3, r2
 800b84c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b850:	461a      	mov	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	601a      	str	r2, [r3, #0]
        out++;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f103 0304 	add.w	r3, r3, #4
 800b85c:	607b      	str	r3, [r7, #4]
        out++;
      }
      break;
    /* FS bit = 1 ==> Sensitivity typical value = 72milligals/digit*/ 
    case 0x20:
      for(i=0; i<0x03; i++)
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	f103 0301 	add.w	r3, r3, #1
 800b864:	75fb      	strb	r3, [r7, #23]
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d9e1      	bls.n	800b830 <LIS302DL_ReadACC+0x90>
      {
        *out =(int32_t)(LIS302DL_SENSITIVITY_9_2G * (int8_t)buffer[2*i]);
        out++;
      }         
      break;
 800b86c:	e000      	b.n	800b870 <LIS302DL_ReadACC+0xd0>
    default:
      break;
 800b86e:	bf00      	nop
    }
 }
 800b870:	f107 0718 	add.w	r7, r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <LIS302DL_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the LIS302DL
  * @param  None
  * @retval None
  */
static void LIS302DL_LowLevel_Init(void)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(LIS302DL_SPI_CLK, ENABLE);
 800b87e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b882:	f04f 0101 	mov.w	r1, #1
 800b886:	f7fd f943 	bl	8008b10 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_SCK_GPIO_CLK | LIS302DL_SPI_MISO_GPIO_CLK | LIS302DL_SPI_MOSI_GPIO_CLK, ENABLE);
 800b88a:	f04f 0001 	mov.w	r0, #1
 800b88e:	f04f 0101 	mov.w	r1, #1
 800b892:	f7fd f88d 	bl	80089b0 <RCC_AHB1PeriphClockCmd>

  /* Enable CS  GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_CS_GPIO_CLK, ENABLE);
 800b896:	f04f 0010 	mov.w	r0, #16
 800b89a:	f04f 0101 	mov.w	r1, #1
 800b89e:	f7fd f887 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT1_GPIO_CLK, ENABLE);
 800b8a2:	f04f 0010 	mov.w	r0, #16
 800b8a6:	f04f 0101 	mov.w	r1, #1
 800b8aa:	f7fd f881 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT2_GPIO_CLK, ENABLE);
 800b8ae:	f04f 0010 	mov.w	r0, #16
 800b8b2:	f04f 0101 	mov.w	r1, #1
 800b8b6:	f7fd f87b 	bl	80089b0 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(LIS302DL_SPI_SCK_GPIO_PORT, LIS302DL_SPI_SCK_SOURCE, LIS302DL_SPI_SCK_AF);
 800b8ba:	f04f 0000 	mov.w	r0, #0
 800b8be:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b8c2:	f04f 0105 	mov.w	r1, #5
 800b8c6:	f04f 0205 	mov.w	r2, #5
 800b8ca:	f7fb ff79 	bl	80077c0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MISO_GPIO_PORT, LIS302DL_SPI_MISO_SOURCE, LIS302DL_SPI_MISO_AF);
 800b8ce:	f04f 0000 	mov.w	r0, #0
 800b8d2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b8d6:	f04f 0106 	mov.w	r1, #6
 800b8da:	f04f 0205 	mov.w	r2, #5
 800b8de:	f7fb ff6f 	bl	80077c0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MOSI_GPIO_PORT, LIS302DL_SPI_MOSI_SOURCE, LIS302DL_SPI_MOSI_AF);
 800b8e2:	f04f 0000 	mov.w	r0, #0
 800b8e6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b8ea:	f04f 0107 	mov.w	r1, #7
 800b8ee:	f04f 0205 	mov.w	r2, #5
 800b8f2:	f7fb ff65 	bl	80077c0 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800b8f6:	f04f 0302 	mov.w	r3, #2
 800b8fa:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800b8fc:	f04f 0300 	mov.w	r3, #0
 800b900:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 800b902:	f04f 0302 	mov.w	r3, #2
 800b906:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800b908:	f04f 0302 	mov.w	r3, #2
 800b90c:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_SCK_PIN;
 800b90e:	f04f 0320 	mov.w	r3, #32
 800b912:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800b914:	f107 0318 	add.w	r3, r7, #24
 800b918:	f04f 0000 	mov.w	r0, #0
 800b91c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b920:	4619      	mov	r1, r3
 800b922:	f7fb fdb7 	bl	8007494 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  LIS302DL_SPI_MOSI_PIN;
 800b926:	f04f 0380 	mov.w	r3, #128	; 0x80
 800b92a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800b92c:	f107 0318 	add.w	r3, r7, #24
 800b930:	f04f 0000 	mov.w	r0, #0
 800b934:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b938:	4619      	mov	r1, r3
 800b93a:	f7fb fdab 	bl	8007494 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_MISO_PIN;
 800b93e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b942:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800b944:	f107 0318 	add.w	r3, r7, #24
 800b948:	f04f 0000 	mov.w	r0, #0
 800b94c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b950:	4619      	mov	r1, r3
 800b952:	f7fb fd9f 	bl	8007494 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(LIS302DL_SPI);
 800b956:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800b95a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b95e:	f7fd fb75 	bl	800904c <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800b962:	f04f 0300 	mov.w	r3, #0
 800b966:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800b968:	f04f 0300 	mov.w	r3, #0
 800b96c:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800b96e:	f04f 0300 	mov.w	r3, #0
 800b972:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800b974:	f04f 0300 	mov.w	r3, #0
 800b978:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800b97a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b97e:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 800b980:	f04f 0308 	mov.w	r3, #8
 800b984:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800b986:	f04f 0300 	mov.w	r3, #0
 800b98a:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 800b98c:	f04f 0307 	mov.w	r3, #7
 800b990:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800b992:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b996:	80fb      	strh	r3, [r7, #6]
  SPI_Init(LIS302DL_SPI, &SPI_InitStructure);
 800b998:	f107 0304 	add.w	r3, r7, #4
 800b99c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800b9a0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	f7fd fb95 	bl	80090d4 <SPI_Init>

  /* Enable SPI1  */
  SPI_Cmd(LIS302DL_SPI, ENABLE);
 800b9aa:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800b9ae:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b9b2:	f04f 0101 	mov.w	r1, #1
 800b9b6:	f7fd fd2b 	bl	8009410 <SPI_Cmd>

  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_CS_PIN;
 800b9ba:	f04f 0308 	mov.w	r3, #8
 800b9be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800b9c0:	f04f 0301 	mov.w	r3, #1
 800b9c4:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800b9c6:	f04f 0300 	mov.w	r3, #0
 800b9ca:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800b9cc:	f04f 0302 	mov.w	r3, #2
 800b9d0:	777b      	strb	r3, [r7, #29]
  GPIO_Init(LIS302DL_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 800b9d2:	f107 0318 	add.w	r3, r7, #24
 800b9d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b9da:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b9de:	4619      	mov	r1, r3
 800b9e0:	f7fb fd58 	bl	8007494 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(LIS302DL_SPI_CS_GPIO_PORT, LIS302DL_SPI_CS_PIN);
 800b9e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b9e8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b9ec:	f04f 0108 	mov.w	r1, #8
 800b9f0:	f7fb fe92 	bl	8007718 <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT1_PIN;
 800b9f4:	f04f 0301 	mov.w	r3, #1
 800b9f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800b9fa:	f04f 0300 	mov.w	r3, #0
 800b9fe:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ba00:	f04f 0300 	mov.w	r3, #0
 800ba04:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800ba06:	f04f 0302 	mov.w	r3, #2
 800ba0a:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800ba0c:	f04f 0300 	mov.w	r3, #0
 800ba10:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(LIS302DL_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 800ba12:	f107 0318 	add.w	r3, r7, #24
 800ba16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ba1a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ba1e:	4619      	mov	r1, r3
 800ba20:	f7fb fd38 	bl	8007494 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT2_PIN;
 800ba24:	f04f 0302 	mov.w	r3, #2
 800ba28:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 800ba2a:	f107 0318 	add.w	r3, r7, #24
 800ba2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ba32:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ba36:	4619      	mov	r1, r3
 800ba38:	f7fb fd2c 	bl	8007494 <GPIO_Init>
}
 800ba3c:	f107 0720 	add.w	r7, r7, #32
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <LIS302DL_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 800ba4e:	f640 1344 	movw	r3, #2372	; 0x944
 800ba52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba5a:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 800ba5c:	e017      	b.n	800ba8e <LIS302DL_SendByte+0x4a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 800ba5e:	f640 1344 	movw	r3, #2372	; 0x944
 800ba62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	bf14      	ite	ne
 800ba6c:	2200      	movne	r2, #0
 800ba6e:	2201      	moveq	r2, #1
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	f103 31ff 	add.w	r1, r3, #4294967295
 800ba76:	f640 1344 	movw	r3, #2372	; 0x944
 800ba7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba7e:	6019      	str	r1, [r3, #0]
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	d004      	beq.n	800ba8e <LIS302DL_SendByte+0x4a>
 800ba84:	f000 f850 	bl	800bb28 <LIS302DL_TIMEOUT_UserCallback>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	e046      	b.n	800bb1c <LIS302DL_SendByte+0xd8>
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 800ba8e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ba92:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ba96:	f04f 0102 	mov.w	r1, #2
 800ba9a:	f7fd feb9 	bl	8009810 <SPI_I2S_GetFlagStatus>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0dc      	beq.n	800ba5e <LIS302DL_SendByte+0x1a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800baac:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bab0:	4619      	mov	r1, r3
 800bab2:	f7fd fdeb 	bl	800968c <SPI_I2S_SendData>
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 800bab6:	f640 1344 	movw	r3, #2372	; 0x944
 800baba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800babe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bac2:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 800bac4:	e017      	b.n	800baf6 <LIS302DL_SendByte+0xb2>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 800bac6:	f640 1344 	movw	r3, #2372	; 0x944
 800baca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bf14      	ite	ne
 800bad4:	2200      	movne	r2, #0
 800bad6:	2201      	moveq	r2, #1
 800bad8:	b2d2      	uxtb	r2, r2
 800bada:	f103 31ff 	add.w	r1, r3, #4294967295
 800bade:	f640 1344 	movw	r3, #2372	; 0x944
 800bae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bae6:	6019      	str	r1, [r3, #0]
 800bae8:	2a00      	cmp	r2, #0
 800baea:	d004      	beq.n	800baf6 <LIS302DL_SendByte+0xb2>
 800baec:	f000 f81c 	bl	800bb28 <LIS302DL_TIMEOUT_UserCallback>
 800baf0:	4603      	mov	r3, r0
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	e012      	b.n	800bb1c <LIS302DL_SendByte+0xd8>
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 800baf6:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800bafa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bafe:	f04f 0101 	mov.w	r1, #1
 800bb02:	f7fd fe85 	bl	8009810 <SPI_I2S_GetFlagStatus>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d0dc      	beq.n	800bac6 <LIS302DL_SendByte+0x82>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(LIS302DL_SPI);
 800bb0c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800bb10:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bb14:	f7fd fdac 	bl	8009670 <SPI_I2S_ReceiveData>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	b2db      	uxtb	r3, r3
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f107 0708 	add.w	r7, r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop

0800bb28 <LIS302DL_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t LIS302DL_TIMEOUT_UserCallback(void)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
  {   
  }
 800bb2c:	e7fe      	b.n	800bb2c <LIS302DL_TIMEOUT_UserCallback+0x4>
 800bb2e:	bf00      	nop

0800bb30 <_ZN6CMenueC1EP11CGraphicLCD>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CMenue::CMenue(CGraphicLCD *display) : glcd(display){
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f00a f947 	bl	8015dd0 <_ZN12AManagedTaskC1Ev>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a05      	ldr	r2, [pc, #20]	; (800bb5c <_ZN6CMenueC1EP11CGraphicLCD+0x2c>)
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	60da      	str	r2, [r3, #12]
}
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f107 0708 	add.w	r7, r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	0802ead0 	.word	0x0802ead0

0800bb60 <_ZN6CMenueD1Ev>:

CMenue::~CMenue() {
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a0a      	ldr	r2, [pc, #40]	; (800bb94 <_ZN6CMenueD1Ev+0x34>)
 800bb6c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f00a f94a 	bl	8015e08 <_ZN12AManagedTaskD1Ev>
 800bb74:	f04f 0300 	mov.w	r3, #0
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d002      	beq.n	800bb88 <_ZN6CMenueD1Ev+0x28>
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f020 fdb4 	bl	802c6f0 <_ZdlPv>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f107 0708 	add.w	r7, r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	0802ead0 	.word	0x0802ead0

0800bb98 <_ZN6CMenueD0Ev>:


CMenue::CMenue(CGraphicLCD *display) : glcd(display){
}

CMenue::~CMenue() {
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7ff ffdd 	bl	800bb60 <_ZN6CMenueD1Ev>
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f020 fda2 	bl	802c6f0 <_ZdlPv>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f107 0708 	add.w	r7, r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <_ZN6CMenue12HardwareInitEv>:
/**
  * @brief  HardwareInit called before Scheduler starts
  * @param  None
  * @retval true on success
  */
bool CMenue::HardwareInit(void){
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]

	return true;
 800bbc0:	f04f 0301 	mov.w	r3, #1
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f107 070c 	add.w	r7, r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bc80      	pop	{r7}
 800bbce:	4770      	bx	lr

0800bbd0 <_ZN6CMenue3RunEv>:
/**
  * @brief  task function for Menu
  * @param  None
  * @retval None
  */
void CMenue::Run(void){
 800bbd0:	b590      	push	{r4, r7, lr}
 800bbd2:	b087      	sub	sp, #28
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	6078      	str	r0, [r7, #4]
	char buffer[4];
	int x = 0;
 800bbd8:	f04f 0300 	mov.w	r3, #0
 800bbdc:	60fb      	str	r3, [r7, #12]

	glcd->Init();
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f103 0320 	add.w	r3, r3, #32
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	68d2      	ldr	r2, [r2, #12]
 800bbee:	4610      	mov	r0, r2
 800bbf0:	4798      	blx	r3
	glcd->Inverse(true);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f04f 0101 	mov.w	r1, #1
 800bbfc:	f008 ff64 	bl	8014ac8 <_ZN11CGraphicLCD7InverseEb>
	glcd->Clear();
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	68d2      	ldr	r2, [r2, #12]
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	4798      	blx	r3


	vTaskDelay(500/portTICK_RATE_MS);
 800bc10:	f04f 0032 	mov.w	r0, #50	; 0x32
 800bc14:	f00b fa74 	bl	8017100 <vTaskDelay>
	glcd->WriteString("Introducing Project:",c_FontSansSerif12,5,5);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f103 0318 	add.w	r3, r3, #24
 800bc22:	681c      	ldr	r4, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	f04f 0205 	mov.w	r2, #5
 800bc2c:	9200      	str	r2, [sp, #0]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f64d 01cc 	movw	r1, #55500	; 0xd8cc
 800bc34:	f6c0 0102 	movt	r1, #2050	; 0x802
 800bc38:	f641 72c8 	movw	r2, #8136	; 0x1fc8
 800bc3c:	f6c0 0203 	movt	r2, #2051	; 0x803
 800bc40:	f04f 0305 	mov.w	r3, #5
 800bc44:	47a0      	blx	r4

	vTaskDelay(1000/portTICK_RATE_MS);
 800bc46:	f04f 0064 	mov.w	r0, #100	; 0x64
 800bc4a:	f00b fa59 	bl	8017100 <vTaskDelay>
	glcd->WriteString("ThunderCryer",c_FontSansSerif26,3,35);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f103 0318 	add.w	r3, r3, #24
 800bc58:	681c      	ldr	r4, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	f04f 0223 	mov.w	r2, #35	; 0x23
 800bc62:	9200      	str	r2, [sp, #0]
 800bc64:	4618      	mov	r0, r3
 800bc66:	f64d 01e4 	movw	r1, #55524	; 0xd8e4
 800bc6a:	f6c0 0102 	movt	r1, #2050	; 0x802
 800bc6e:	f642 52ec 	movw	r2, #11756	; 0x2dec
 800bc72:	f6c0 0203 	movt	r2, #2051	; 0x803
 800bc76:	f04f 0303 	mov.w	r3, #3
 800bc7a:	47a0      	blx	r4

	vTaskDelay(10000/portTICK_RATE_MS);
 800bc7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bc80:	f00b fa3e 	bl	8017100 <vTaskDelay>
	glcd->Clear();
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	68d2      	ldr	r2, [r2, #12]
 800bc90:	4610      	mov	r0, r2
 800bc92:	4798      	blx	r3
	glcd->Window(2,2,100,60);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f103 0308 	add.w	r3, r3, #8
 800bc9e:	681c      	ldr	r4, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800bca8:	9200      	str	r2, [sp, #0]
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f04f 0102 	mov.w	r1, #2
 800bcb0:	f04f 0202 	mov.w	r2, #2
 800bcb4:	f04f 0364 	mov.w	r3, #100	; 0x64
 800bcb8:	47a0      	blx	r4
	glcd->WriteString("21:14",c_FontSansSerif26,5,5);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f103 0318 	add.w	r3, r3, #24
 800bcc4:	681c      	ldr	r4, [r3, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	f04f 0205 	mov.w	r2, #5
 800bcce:	9200      	str	r2, [sp, #0]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f64d 01f4 	movw	r1, #55540	; 0xd8f4
 800bcd6:	f6c0 0102 	movt	r1, #2050	; 0x802
 800bcda:	f642 52ec 	movw	r2, #11756	; 0x2dec
 800bcde:	f6c0 0203 	movt	r2, #2051	; 0x803
 800bce2:	f04f 0305 	mov.w	r3, #5
 800bce6:	47a0      	blx	r4
	glcd->WriteString("Fr. 24.02.12",c_FontNative,5,40);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f103 0318 	add.w	r3, r3, #24
 800bcf2:	681c      	ldr	r4, [r3, #0]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	f04f 0228 	mov.w	r2, #40	; 0x28
 800bcfc:	9200      	str	r2, [sp, #0]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f64d 01fc 	movw	r1, #55548	; 0xd8fc
 800bd04:	f6c0 0102 	movt	r1, #2050	; 0x802
 800bd08:	f64e 22f0 	movw	r2, #60144	; 0xeaf0
 800bd0c:	f6c0 0202 	movt	r2, #2050	; 0x802
 800bd10:	f04f 0305 	mov.w	r3, #5
 800bd14:	47a0      	blx	r4

	glcd->WriteString("Development in progress",c_FontNative,1,120);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f103 0318 	add.w	r3, r3, #24
 800bd20:	681c      	ldr	r4, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	f04f 0278 	mov.w	r2, #120	; 0x78
 800bd2a:	9200      	str	r2, [sp, #0]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f64d 110c 	movw	r1, #55564	; 0xd90c
 800bd32:	f6c0 0102 	movt	r1, #2050	; 0x802
 800bd36:	f64e 22f0 	movw	r2, #60144	; 0xeaf0
 800bd3a:	f6c0 0202 	movt	r2, #2050	; 0x802
 800bd3e:	f04f 0301 	mov.w	r3, #1
 800bd42:	47a0      	blx	r4

	while(1){
		if(x<60) {
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b3b      	cmp	r3, #59	; 0x3b
 800bd48:	dc3b      	bgt.n	800bdc2 <_ZN6CMenue3RunEv+0x1f2>
			sprintf(buffer,"%02u",x);
 800bd4a:	f107 0308 	add.w	r3, r7, #8
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f64d 1124 	movw	r1, #55588	; 0xd924
 800bd54:	f6c0 0102 	movt	r1, #2050	; 0x802
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	f01a fc43 	bl	80265e4 <sprintf>
			glcd->SectorClear(75,7,20,20);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f103 0310 	add.w	r3, r3, #16
 800bd68:	681c      	ldr	r4, [r3, #0]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	f04f 0214 	mov.w	r2, #20
 800bd72:	9200      	str	r2, [sp, #0]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f04f 014b 	mov.w	r1, #75	; 0x4b
 800bd7a:	f04f 0207 	mov.w	r2, #7
 800bd7e:	f04f 0314 	mov.w	r3, #20
 800bd82:	47a0      	blx	r4
			glcd->WriteString(buffer,c_FontSansSerif12,75,7);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f103 0318 	add.w	r3, r3, #24
 800bd8e:	681c      	ldr	r4, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68da      	ldr	r2, [r3, #12]
 800bd94:	f107 0308 	add.w	r3, r7, #8
 800bd98:	f04f 0107 	mov.w	r1, #7
 800bd9c:	9100      	str	r1, [sp, #0]
 800bd9e:	4610      	mov	r0, r2
 800bda0:	4619      	mov	r1, r3
 800bda2:	f641 72c8 	movw	r2, #8136	; 0x1fc8
 800bda6:	f6c0 0203 	movt	r2, #2051	; 0x803
 800bdaa:	f04f 034b 	mov.w	r3, #75	; 0x4b
 800bdae:	47a0      	blx	r4
			x++;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f103 0301 	add.w	r3, r3, #1
 800bdb6:	60fb      	str	r3, [r7, #12]
			vTaskDelay(1000/portTICK_RATE_MS);
 800bdb8:	f04f 0064 	mov.w	r0, #100	; 0x64
 800bdbc:	f00b f9a0 	bl	8017100 <vTaskDelay>
	glcd->WriteString("21:14",c_FontSansSerif26,5,5);
	glcd->WriteString("Fr. 24.02.12",c_FontNative,5,40);

	glcd->WriteString("Development in progress",c_FontNative,1,120);

	while(1){
 800bdc0:	e7c0      	b.n	800bd44 <_ZN6CMenue3RunEv+0x174>
			glcd->SectorClear(75,7,20,20);
			glcd->WriteString(buffer,c_FontSansSerif12,75,7);
			x++;
			vTaskDelay(1000/portTICK_RATE_MS);
		} else
			x = 0;
 800bdc2:	f04f 0300 	mov.w	r3, #0
 800bdc6:	60fb      	str	r3, [r7, #12]
	glcd->WriteString("21:14",c_FontSansSerif26,5,5);
	glcd->WriteString("Fr. 24.02.12",c_FontNative,5,40);

	glcd->WriteString("Development in progress",c_FontNative,1,120);

	while(1){
 800bdc8:	e7bc      	b.n	800bd44 <_ZN6CMenue3RunEv+0x174>
 800bdca:	bf00      	nop

0800bdcc <xmp3_SetBitstreamPointer>:
 * Outputs:     filled bitstream info struct
 *
 * Return:      none
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
	/* init bitstream */
	bsi->bytePtr = buf;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	601a      	str	r2, [r3, #0]
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f04f 0200 	mov.w	r2, #0
 800bde4:	605a      	str	r2, [r3, #4]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f04f 0200 	mov.w	r2, #0
 800bdec:	609a      	str	r2, [r3, #8]
	bsi->nBytes = nBytes;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	60da      	str	r2, [r3, #12]
}
 800bdf4:	f107 0714 	add.w	r7, r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bc80      	pop	{r7}
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop

0800be00 <RefillBitstreamCache>:
 *
 * TODO:        optimize for ARM
 *              possibly add little/big-endian modes for doing 32-bit loads
 **************************************************************************************/
static __inline void RefillBitstreamCache(BitStreamInfo *bsi)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
	int nBytes = bsi->nBytes;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	60fb      	str	r3, [r7, #12]

	/* optimize for common case, independent of machine endian-ness */
	if (nBytes >= 4) {
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2b03      	cmp	r3, #3
 800be12:	dd3e      	ble.n	800be92 <RefillBitstreamCache+0x92>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	781a      	ldrb	r2, [r3, #0]
 800be1a:	ea4f 6202 	mov.w	r2, r2, lsl #24
 800be1e:	4611      	mov	r1, r2
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	6051      	str	r1, [r2, #4]
 800be24:	f103 0201 	add.w	r2, r3, #1
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	601a      	str	r2, [r3, #0]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6859      	ldr	r1, [r3, #4]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	781a      	ldrb	r2, [r3, #0]
 800be36:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800be3a:	4311      	orrs	r1, r2
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	6051      	str	r1, [r2, #4]
 800be40:	f103 0201 	add.w	r2, r3, #1
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	601a      	str	r2, [r3, #0]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6859      	ldr	r1, [r3, #4]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	781a      	ldrb	r2, [r3, #0]
 800be52:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800be56:	4311      	orrs	r1, r2
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	6051      	str	r1, [r2, #4]
 800be5c:	f103 0201 	add.w	r2, r3, #1
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	601a      	str	r2, [r3, #0]
		bsi->iCache |= (*bsi->bytePtr++);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6859      	ldr	r1, [r3, #4]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	781a      	ldrb	r2, [r3, #0]
 800be6e:	4311      	orrs	r1, r2
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	6051      	str	r1, [r2, #4]
 800be74:	f103 0201 	add.w	r2, r3, #1
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	601a      	str	r2, [r3, #0]
		bsi->cachedBits = 32;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f04f 0220 	mov.w	r2, #32
 800be82:	609a      	str	r2, [r3, #8]
		bsi->nBytes -= 4;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	f1a3 0204 	sub.w	r2, r3, #4
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	60da      	str	r2, [r3, #12]
 800be90:	e038      	b.n	800bf04 <RefillBitstreamCache+0x104>
	} else {
		bsi->iCache = 0;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f04f 0200 	mov.w	r2, #0
 800be98:	605a      	str	r2, [r3, #4]
		while (nBytes--) {
 800be9a:	e011      	b.n	800bec0 <RefillBitstreamCache+0xc0>
			bsi->iCache |= (*bsi->bytePtr++);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6859      	ldr	r1, [r3, #4]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	781a      	ldrb	r2, [r3, #0]
 800bea6:	4311      	orrs	r1, r2
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	6051      	str	r1, [r2, #4]
 800beac:	f103 0201 	add.w	r2, r3, #1
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	601a      	str	r2, [r3, #0]
			bsi->iCache <<= 8;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	ea4f 2203 	mov.w	r2, r3, lsl #8
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++);
		bsi->cachedBits = 32;
		bsi->nBytes -= 4;
	} else {
		bsi->iCache = 0;
		while (nBytes--) {
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	bf0c      	ite	eq
 800bec6:	2300      	moveq	r3, #0
 800bec8:	2301      	movne	r3, #1
 800beca:	b2db      	uxtb	r3, r3
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	f102 32ff 	add.w	r2, r2, #4294967295
 800bed2:	60fa      	str	r2, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1e1      	bne.n	800be9c <RefillBitstreamCache+0x9c>
			bsi->iCache |= (*bsi->bytePtr++);
			bsi->iCache <<= 8;
		}
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685a      	ldr	r2, [r3, #4]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	f1c3 0303 	rsb	r3, r3, #3
 800bee4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800bee8:	fa02 f203 	lsl.w	r2, r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 8*bsi->nBytes;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	609a      	str	r2, [r3, #8]
		bsi->nBytes = 0;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f04f 0200 	mov.w	r2, #0
 800bf02:	60da      	str	r2, [r3, #12]
	}
}
 800bf04:	f107 0714 	add.w	r7, r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bc80      	pop	{r7}
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop

0800bf10 <xmp3_GetBits>:
 *              if nBits = 0, returns 0 (useful for scalefactor unpacking)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	f003 031f 	and.w	r3, r3, #31
 800bf20:	603b      	str	r3, [r7, #0]
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	f1c3 031f 	rsb	r3, r3, #31
 800bf2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf30:	60fb      	str	r3, [r7, #12]
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800bf38:	60fb      	str	r3, [r7, #12]
	bsi->iCache <<= nBits;					/* left-justify cache */
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685a      	ldr	r2, [r3, #4]
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	fa02 f203 	lsl.w	r2, r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	605a      	str	r2, [r3, #4]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	689a      	ldr	r2, [r3, #8]
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	1ad2      	subs	r2, r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	609a      	str	r2, [r3, #8]

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da20      	bge.n	800bf9e <xmp3_GetBits+0x8e>
		lowBits = -bsi->cachedBits;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f1c3 0300 	rsb	r3, r3, #0
 800bf64:	60bb      	str	r3, [r7, #8]
		RefillBitstreamCache(bsi);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7ff ff4a 	bl	800be00 <RefillBitstreamCache>
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	f1c3 0320 	rsb	r3, r3, #32
 800bf76:	fa22 f303 	lsr.w	r3, r2, r3
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]
	
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	461a      	mov	r2, r3
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	609a      	str	r2, [r3, #8]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	fa02 f203 	lsl.w	r2, r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	605a      	str	r2, [r3, #4]
	}

	return data;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f107 0710 	add.w	r7, r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop

0800bfac <xmp3_CalcBitsUsed>:
 * Outputs:     none
 *
 * Return:      number of bits read from bitstream, as offset from startBuf:startOffset
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800bfc6:	617b      	str	r3, [r7, #20]
	bitsUsed -= bsi->cachedBits;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	617b      	str	r3, [r7, #20]
	bitsUsed -= startOffset;
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	617b      	str	r3, [r7, #20]

	return bitsUsed;
 800bfda:	697b      	ldr	r3, [r7, #20]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f107 071c 	add.w	r7, r7, #28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bc80      	pop	{r7}
 800bfe6:	4770      	bx	lr

0800bfe8 <xmp3_CheckPadBit>:
 * Outputs:     none
 *
 * Return:      1 if pad bit is set, 0 if not, -1 if null input pointer
 **************************************************************************************/
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <xmp3_CheckPadBit+0x16>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d102      	bne.n	800c004 <xmp3_CheckPadBit+0x1c>
		return -1;
 800bffe:	f04f 33ff 	mov.w	r3, #4294967295
 800c002:	e008      	b.n	800c016 <xmp3_CheckPadBit+0x2e>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	60fb      	str	r3, [r7, #12]

	return (fh->paddingBit ? 1 : 0);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	bf0c      	ite	eq
 800c012:	2300      	moveq	r3, #0
 800c014:	2301      	movne	r3, #1
}
 800c016:	4618      	mov	r0, r3
 800c018:	f107 0714 	add.w	r7, r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bc80      	pop	{r7}
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop

0800c024 <xmp3_UnpackFrameHeader>:
 *
 * TODO:        check for valid modes, depending on capabilities of decoder
 *              test CRC on actual stream (verify no endian problems)
 **************************************************************************************/
int UnpackFrameHeader(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 800c024:	b490      	push	{r4, r7}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00f      	beq.n	800c054 <xmp3_UnpackFrameHeader+0x30>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00b      	beq.n	800c054 <xmp3_UnpackFrameHeader+0x30>
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	2bff      	cmp	r3, #255	; 0xff
 800c042:	d107      	bne.n	800c054 <xmp3_UnpackFrameHeader+0x30>
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	f103 0301 	add.w	r3, r3, #1
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800c050:	2be0      	cmp	r3, #224	; 0xe0
 800c052:	d002      	beq.n	800c05a <xmp3_UnpackFrameHeader+0x36>
		return -1;
 800c054:	f04f 33ff 	mov.w	r3, #4294967295
 800c058:	e194      	b.n	800c384 <xmp3_UnpackFrameHeader+0x360>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	60fb      	str	r3, [r7, #12]

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	f103 0301 	add.w	r3, r3, #1
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	f003 0303 	and.w	r3, r3, #3
 800c072:	60bb      	str	r3, [r7, #8]
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00a      	beq.n	800c090 <xmp3_UnpackFrameHeader+0x6c>
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	f003 0301 	and.w	r3, r3, #1
 800c080:	2b00      	cmp	r3, #0
 800c082:	d102      	bne.n	800c08a <xmp3_UnpackFrameHeader+0x66>
 800c084:	f04f 0301 	mov.w	r3, #1
 800c088:	e001      	b.n	800c08e <xmp3_UnpackFrameHeader+0x6a>
 800c08a:	f04f 0300 	mov.w	r3, #0
 800c08e:	e001      	b.n	800c094 <xmp3_UnpackFrameHeader+0x70>
 800c090:	f04f 0302 	mov.w	r3, #2
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	7013      	strb	r3, [r2, #0]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	f103 0301 	add.w	r3, r3, #1
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	f003 0303 	and.w	r3, r3, #3
 800c0aa:	f1c3 0204 	rsb	r2, r3, #4
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	605a      	str	r2, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	f103 0301 	add.w	r3, r3, #1
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	bf14      	ite	ne
 800c0c2:	2200      	movne	r2, #0
 800c0c4:	2201      	moveq	r2, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	609a      	str	r2, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	f103 0302 	add.w	r3, r3, #2
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	f003 020f 	and.w	r2, r3, #15
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	60da      	str	r2, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	f103 0302 	add.w	r3, r3, #2
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	f003 0203 	and.w	r2, r3, #3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	611a      	str	r2, [r3, #16]
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	f103 0302 	add.w	r3, r3, #2
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800c102:	b2db      	uxtb	r3, r3
 800c104:	f003 0201 	and.w	r2, r3, #1
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	615a      	str	r2, [r3, #20]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	f103 0302 	add.w	r3, r3, #2
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	f003 0201 	and.w	r2, r3, #1
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	619a      	str	r2, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	f103 0303 	add.w	r3, r3, #3
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	771a      	strb	r2, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	f103 0303 	add.w	r3, r3, #3
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 0203 	and.w	r2, r3, #3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	621a      	str	r2, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	f103 0303 	add.w	r3, r3, #3
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800c150:	b2db      	uxtb	r3, r3
 800c152:	f003 0201 	and.w	r2, r3, #1
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	625a      	str	r2, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	f103 0303 	add.w	r3, r3, #3
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800c166:	b2db      	uxtb	r3, r3
 800c168:	f003 0201 	and.w	r2, r3, #1
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	629a      	str	r2, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	f103 0303 	add.w	r3, r3, #3
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	f003 0203 	and.w	r2, r3, #3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	2b03      	cmp	r3, #3
 800c186:	d007      	beq.n	800c198 <xmp3_UnpackFrameHeader+0x174>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	2b04      	cmp	r3, #4
 800c18e:	d003      	beq.n	800c198 <xmp3_UnpackFrameHeader+0x174>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	2b0f      	cmp	r3, #15
 800c196:	d102      	bne.n	800c19e <xmp3_UnpackFrameHeader+0x17a>
		return -1;
 800c198:	f04f 33ff 	mov.w	r3, #4294967295
 800c19c:	e0f2      	b.n	800c384 <xmp3_UnpackFrameHeader+0x360>

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	f04f 02de 	mov.w	r2, #222	; 0xde
 800c1a6:	fb02 f203 	mul.w	r2, r2, r3
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	f04f 014a 	mov.w	r1, #74	; 0x4a
 800c1b2:	fb01 f303 	mul.w	r3, r1, r3
 800c1b6:	18d2      	adds	r2, r2, r3
 800c1b8:	f641 4360 	movw	r3, #7264	; 0x1c60
 800c1bc:	f6c0 0303 	movt	r3, #2051	; 0x803
 800c1c0:	18d2      	adds	r2, r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	635a      	str	r2, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	7f1b      	ldrb	r3, [r3, #28]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d003      	beq.n	800c1d6 <xmp3_UnpackFrameHeader+0x1b2>
		fh->modeExt = 0;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f04f 0200 	mov.w	r2, #0
 800c1d4:	621a      	str	r2, [r3, #32]

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	7f1b      	ldrb	r3, [r3, #28]
 800c1da:	2b03      	cmp	r3, #3
 800c1dc:	d102      	bne.n	800c1e4 <xmp3_UnpackFrameHeader+0x1c0>
 800c1de:	f04f 0301 	mov.w	r3, #1
 800c1e2:	e001      	b.n	800c1e8 <xmp3_UnpackFrameHeader+0x1c4>
 800c1e4:	f04f 0302 	mov.w	r3, #2
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	f8c2 37bc 	str.w	r3, [r2, #1980]	; 0x7bc
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6918      	ldr	r0, [r3, #16]
 800c1f8:	f641 12fc 	movw	r2, #6652	; 0x19fc
 800c1fc:	f6c0 0203 	movt	r2, #2051	; 0x803
 800c200:	460b      	mov	r3, r1
 800c202:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c206:	185b      	adds	r3, r3, r1
 800c208:	181b      	adds	r3, r3, r0
 800c20a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d102      	bne.n	800c222 <xmp3_UnpackFrameHeader+0x1fe>
 800c21c:	f04f 0302 	mov.w	r3, #2
 800c220:	e001      	b.n	800c226 <xmp3_UnpackFrameHeader+0x202>
 800c222:	f04f 0301 	mov.w	r3, #1
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	f8c2 37c4 	str.w	r3, [r2, #1988]	; 0x7c4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	4619      	mov	r1, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	f103 30ff 	add.w	r0, r3, #4294967295
 800c23a:	f641 3230 	movw	r2, #6960	; 0x1b30
 800c23e:	f6c0 0203 	movt	r2, #2051	; 0x803
 800c242:	460b      	mov	r3, r1
 800c244:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c248:	185b      	adds	r3, r3, r1
 800c24a:	181b      	adds	r3, r3, r0
 800c24c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c250:	b21a      	sxth	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 800c258:	fb92 f2f3 	sdiv	r2, r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8c3 27c8 	str.w	r2, [r3, #1992]	; 0x7c8
	mp3DecInfo->layer = fh->layer;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	685a      	ldr	r2, [r3, #4]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8c3 27d0 	str.w	r2, [r3, #2000]	; 0x7d0
	mp3DecInfo->version = fh->ver;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	781a      	ldrb	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d068      	beq.n	800c350 <xmp3_UnpackFrameHeader+0x32c>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	4618      	mov	r0, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	f103 33ff 	add.w	r3, r3, #4294967295
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	68d4      	ldr	r4, [r2, #12]
 800c290:	f641 2120 	movw	r1, #6688	; 0x1a20
 800c294:	f6c0 0103 	movt	r1, #2051	; 0x803
 800c298:	461a      	mov	r2, r3
 800c29a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800c29e:	1ad2      	subs	r2, r2, r3
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2a6:	181b      	adds	r3, r3, r0
 800c2a8:	ea4f 1003 	mov.w	r0, r3, lsl #4
 800c2ac:	1ac0      	subs	r0, r0, r3
 800c2ae:	1813      	adds	r3, r2, r0
 800c2b0:	191b      	adds	r3, r3, r4
 800c2b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c2b6:	b21b      	sxth	r3, r3
 800c2b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2bc:	fb02 f203 	mul.w	r2, r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8c3 27b8 	str.w	r2, [r3, #1976]	; 0x7b8
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	68d4      	ldr	r4, [r2, #12]
 800c2d4:	f641 3150 	movw	r1, #6992	; 0x1b50
 800c2d8:	f6c0 0103 	movt	r1, #2051	; 0x803
 800c2dc:	461a      	mov	r2, r3
 800c2de:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800c2e2:	1ad2      	subs	r2, r2, r3
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2ea:	181b      	adds	r3, r3, r0
 800c2ec:	ea4f 1003 	mov.w	r0, r3, lsl #4
 800c2f0:	1ac0      	subs	r0, r0, r3
 800c2f2:	1813      	adds	r3, r2, r0
 800c2f4:	191b      	adds	r3, r3, r4
 800c2f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c2fa:	b21a      	sxth	r2, r3
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	4618      	mov	r0, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	7f1b      	ldrb	r3, [r3, #28]
 800c306:	2b03      	cmp	r3, #3
 800c308:	bf0c      	ite	eq
 800c30a:	2100      	moveq	r1, #0
 800c30c:	2101      	movne	r1, #1
 800c30e:	f641 3344 	movw	r3, #6980	; 0x1b44
 800c312:	f6c0 0303 	movt	r3, #2051	; 0x803
 800c316:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800c31a:	1841      	adds	r1, r0, r1
 800c31c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800c320:	b21b      	sxth	r3, r3
	 */
	if (fh->brIdx) {
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c322:	1ad3      	subs	r3, r2, r3
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800c324:	f1a3 0204 	sub.w	r2, r3, #4
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <xmp3_UnpackFrameHeader+0x312>
 800c330:	f04f 0302 	mov.w	r3, #2
 800c334:	e001      	b.n	800c33a <xmp3_UnpackFrameHeader+0x316>
 800c336:	f04f 0300 	mov.w	r3, #0
 800c33a:	1ad2      	subs	r2, r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	bf0c      	ite	eq
 800c344:	2300      	moveq	r3, #0
 800c346:	2301      	movne	r3, #1
 800c348:	18d2      	adds	r2, r2, r3
	 */
	if (fh->brIdx) {
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00f      	beq.n	800c378 <xmp3_UnpackFrameHeader+0x354>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	f103 0304 	add.w	r3, r3, #4
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	ea4f 2203 	mov.w	r2, r3, lsl #8
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	f103 0305 	add.w	r3, r3, #5
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	431a      	orrs	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	631a      	str	r2, [r3, #48]	; 0x30
		return 6;
 800c372:	f04f 0306 	mov.w	r3, #6
 800c376:	e005      	b.n	800c384 <xmp3_UnpackFrameHeader+0x360>
	} else {
		fh->CRCWord = 0;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f04f 0200 	mov.w	r2, #0
 800c37e:	631a      	str	r2, [r3, #48]	; 0x30
		return 4;
 800c380:	f04f 0304 	mov.w	r3, #4
	}
}
 800c384:	4618      	mov	r0, r3
 800c386:	f107 0710 	add.w	r7, r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bc90      	pop	{r4, r7}
 800c38e:	4770      	bx	lr

0800c390 <xmp3_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b08e      	sub	sp, #56	; 0x38
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d007      	beq.n	800c3b0 <xmp3_UnpackSideInfo+0x20>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d003      	beq.n	800c3b0 <xmp3_UnpackSideInfo+0x20>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d102      	bne.n	800c3b6 <xmp3_UnpackSideInfo+0x26>
		return -1;
 800c3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b4:	e1bd      	b.n	800c732 <xmp3_UnpackSideInfo+0x3a2>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	627b      	str	r3, [r7, #36]	; 0x24
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	623b      	str	r3, [r7, #32]

	bsi = &bitStreamInfo;
 800c3c2:	f107 0308 	add.w	r3, r7, #8
 800c3c6:	61fb      	str	r3, [r7, #28]
	if (fh->ver == MPEG1) {
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d153      	bne.n	800c478 <xmp3_UnpackSideInfo+0xe8>
		/* MPEG 1 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	7f1b      	ldrb	r3, [r3, #28]
 800c3d4:	2b03      	cmp	r3, #3
 800c3d6:	d102      	bne.n	800c3de <xmp3_UnpackSideInfo+0x4e>
 800c3d8:	f04f 0311 	mov.w	r3, #17
 800c3dc:	e001      	b.n	800c3e2 <xmp3_UnpackSideInfo+0x52>
 800c3de:	f04f 0320 	mov.w	r3, #32
 800c3e2:	62bb      	str	r3, [r7, #40]	; 0x28
		SetBitstreamPointer(bsi, nBytes, buf);
 800c3e4:	69f8      	ldr	r0, [r7, #28]
 800c3e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3e8:	683a      	ldr	r2, [r7, #0]
 800c3ea:	f7ff fcef 	bl	800bdcc <xmp3_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 9);
 800c3ee:	69f8      	ldr	r0, [r7, #28]
 800c3f0:	f04f 0109 	mov.w	r1, #9
 800c3f4:	f7ff fd8c 	bl	800bf10 <xmp3_GetBits>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	601a      	str	r2, [r3, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	7f1b      	ldrb	r3, [r3, #28]
 800c404:	2b03      	cmp	r3, #3
 800c406:	d102      	bne.n	800c40e <xmp3_UnpackSideInfo+0x7e>
 800c408:	f04f 0305 	mov.w	r3, #5
 800c40c:	e001      	b.n	800c412 <xmp3_UnpackSideInfo+0x82>
 800c40e:	f04f 0303 	mov.w	r3, #3
 800c412:	69f8      	ldr	r0, [r7, #28]
 800c414:	4619      	mov	r1, r3
 800c416:	f7ff fd7b 	bl	800bf10 <xmp3_GetBits>
 800c41a:	4603      	mov	r3, r0
 800c41c:	461a      	mov	r2, r3
 800c41e:	6a3b      	ldr	r3, [r7, #32]
 800c420:	605a      	str	r2, [r3, #4]

		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c422:	f04f 0300 	mov.w	r3, #0
 800c426:	633b      	str	r3, [r7, #48]	; 0x30
 800c428:	e01f      	b.n	800c46a <xmp3_UnpackSideInfo+0xda>
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800c42a:	f04f 0300 	mov.w	r3, #0
 800c42e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c430:	e014      	b.n	800c45c <xmp3_UnpackSideInfo+0xcc>
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 800c432:	69f8      	ldr	r0, [r7, #28]
 800c434:	f04f 0101 	mov.w	r1, #1
 800c438:	f7ff fd6a 	bl	800bf10 <xmp3_GetBits>
 800c43c:	4603      	mov	r3, r0
 800c43e:	4619      	mov	r1, r3
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c444:	ea4f 0082 	mov.w	r0, r2, lsl #2
 800c448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c44a:	1882      	adds	r2, r0, r2
 800c44c:	f102 0202 	add.w	r2, r2, #2
 800c450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SetBitstreamPointer(bsi, nBytes, buf);
		si->mainDataBegin = GetBits(bsi, 9);
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));

		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800c454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c456:	f103 0301 	add.w	r3, r3, #1
 800c45a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45e:	2b03      	cmp	r3, #3
 800c460:	dde7      	ble.n	800c432 <xmp3_UnpackSideInfo+0xa2>
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
		SetBitstreamPointer(bsi, nBytes, buf);
		si->mainDataBegin = GetBits(bsi, 9);
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));

		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	f103 0301 	add.w	r3, r3, #1
 800c468:	633b      	str	r3, [r7, #48]	; 0x30
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	429a      	cmp	r2, r3
 800c474:	dcd9      	bgt.n	800c42a <xmp3_UnpackSideInfo+0x9a>
 800c476:	e028      	b.n	800c4ca <xmp3_UnpackSideInfo+0x13a>
			for (bd = 0; bd < MAX_SCFBD; bd++)
				si->scfsi[ch][bd] = GetBits(bsi, 1);
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	7f1b      	ldrb	r3, [r3, #28]
 800c47c:	2b03      	cmp	r3, #3
 800c47e:	d102      	bne.n	800c486 <xmp3_UnpackSideInfo+0xf6>
 800c480:	f04f 0309 	mov.w	r3, #9
 800c484:	e001      	b.n	800c48a <xmp3_UnpackSideInfo+0xfa>
 800c486:	f04f 0311 	mov.w	r3, #17
 800c48a:	62bb      	str	r3, [r7, #40]	; 0x28
		SetBitstreamPointer(bsi, nBytes, buf);
 800c48c:	69f8      	ldr	r0, [r7, #28]
 800c48e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	f7ff fc9b 	bl	800bdcc <xmp3_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 8);
 800c496:	69f8      	ldr	r0, [r7, #28]
 800c498:	f04f 0108 	mov.w	r1, #8
 800c49c:	f7ff fd38 	bl	800bf10 <xmp3_GetBits>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	601a      	str	r2, [r3, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	7f1b      	ldrb	r3, [r3, #28]
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	d102      	bne.n	800c4b6 <xmp3_UnpackSideInfo+0x126>
 800c4b0:	f04f 0301 	mov.w	r3, #1
 800c4b4:	e001      	b.n	800c4ba <xmp3_UnpackSideInfo+0x12a>
 800c4b6:	f04f 0302 	mov.w	r3, #2
 800c4ba:	69f8      	ldr	r0, [r7, #28]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	f7ff fd27 	bl	800bf10 <xmp3_GetBits>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	605a      	str	r2, [r3, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800c4ca:	f04f 0300 	mov.w	r3, #0
 800c4ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c4d0:	e122      	b.n	800c718 <xmp3_UnpackSideInfo+0x388>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c4d2:	f04f 0300 	mov.w	r3, #0
 800c4d6:	633b      	str	r3, [r7, #48]	; 0x30
 800c4d8:	e113      	b.n	800c702 <xmp3_UnpackSideInfo+0x372>
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */
 800c4da:	6a3b      	ldr	r3, [r7, #32]
 800c4dc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c4e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c4e8:	189b      	adds	r3, r3, r2
 800c4ea:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c4f8:	189b      	adds	r3, r3, r2
 800c4fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c4fe:	18c3      	adds	r3, r0, r3
 800c500:	18cb      	adds	r3, r1, r3
 800c502:	61bb      	str	r3, [r7, #24]

			sis->part23Length =    GetBits(bsi, 12);
 800c504:	69f8      	ldr	r0, [r7, #28]
 800c506:	f04f 010c 	mov.w	r1, #12
 800c50a:	f7ff fd01 	bl	800bf10 <xmp3_GetBits>
 800c50e:	4603      	mov	r3, r0
 800c510:	461a      	mov	r2, r3
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	601a      	str	r2, [r3, #0]
			sis->nBigvals =        GetBits(bsi, 9);
 800c516:	69f8      	ldr	r0, [r7, #28]
 800c518:	f04f 0109 	mov.w	r1, #9
 800c51c:	f7ff fcf8 	bl	800bf10 <xmp3_GetBits>
 800c520:	4603      	mov	r3, r0
 800c522:	461a      	mov	r2, r3
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	605a      	str	r2, [r3, #4]
			sis->globalGain =      GetBits(bsi, 8);
 800c528:	69f8      	ldr	r0, [r7, #28]
 800c52a:	f04f 0108 	mov.w	r1, #8
 800c52e:	f7ff fcef 	bl	800bf10 <xmp3_GetBits>
 800c532:	4603      	mov	r3, r0
 800c534:	461a      	mov	r2, r3
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	609a      	str	r2, [r3, #8]
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d102      	bne.n	800c548 <xmp3_UnpackSideInfo+0x1b8>
 800c542:	f04f 0304 	mov.w	r3, #4
 800c546:	e001      	b.n	800c54c <xmp3_UnpackSideInfo+0x1bc>
 800c548:	f04f 0309 	mov.w	r3, #9
 800c54c:	69f8      	ldr	r0, [r7, #28]
 800c54e:	4619      	mov	r1, r3
 800c550:	f7ff fcde 	bl	800bf10 <xmp3_GetBits>
 800c554:	4603      	mov	r3, r0
 800c556:	461a      	mov	r2, r3
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	60da      	str	r2, [r3, #12]
			sis->winSwitchFlag =   GetBits(bsi, 1);
 800c55c:	69f8      	ldr	r0, [r7, #28]
 800c55e:	f04f 0101 	mov.w	r1, #1
 800c562:	f7ff fcd5 	bl	800bf10 <xmp3_GetBits>
 800c566:	4603      	mov	r3, r0
 800c568:	461a      	mov	r2, r3
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	611a      	str	r2, [r3, #16]

			if(sis->winSwitchFlag) {
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d06b      	beq.n	800c64e <xmp3_UnpackSideInfo+0x2be>
				/* this is a start, stop, short, or mixed block */
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 800c576:	69f8      	ldr	r0, [r7, #28]
 800c578:	f04f 0102 	mov.w	r1, #2
 800c57c:	f7ff fcc8 	bl	800bf10 <xmp3_GetBits>
 800c580:	4603      	mov	r3, r0
 800c582:	461a      	mov	r2, r3
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	615a      	str	r2, [r3, #20]
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800c588:	69f8      	ldr	r0, [r7, #28]
 800c58a:	f04f 0101 	mov.w	r1, #1
 800c58e:	f7ff fcbf 	bl	800bf10 <xmp3_GetBits>
 800c592:	4603      	mov	r3, r0
 800c594:	461a      	mov	r2, r3
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	619a      	str	r2, [r3, #24]
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800c59a:	69f8      	ldr	r0, [r7, #28]
 800c59c:	f04f 0105 	mov.w	r1, #5
 800c5a0:	f7ff fcb6 	bl	800bf10 <xmp3_GetBits>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	61da      	str	r2, [r3, #28]
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800c5ac:	69f8      	ldr	r0, [r7, #28]
 800c5ae:	f04f 0105 	mov.w	r1, #5
 800c5b2:	f7ff fcad 	bl	800bf10 <xmp3_GetBits>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	621a      	str	r2, [r3, #32]
				sis->tableSelect[2] =  0;					/* unused */
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	f04f 0200 	mov.w	r2, #0
 800c5c4:	625a      	str	r2, [r3, #36]	; 0x24
				sis->subBlockGain[0] = GetBits(bsi, 3);
 800c5c6:	69f8      	ldr	r0, [r7, #28]
 800c5c8:	f04f 0103 	mov.w	r1, #3
 800c5cc:	f7ff fca0 	bl	800bf10 <xmp3_GetBits>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	629a      	str	r2, [r3, #40]	; 0x28
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800c5d8:	69f8      	ldr	r0, [r7, #28]
 800c5da:	f04f 0103 	mov.w	r1, #3
 800c5de:	f7ff fc97 	bl	800bf10 <xmp3_GetBits>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	62da      	str	r2, [r3, #44]	; 0x2c
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800c5ea:	69f8      	ldr	r0, [r7, #28]
 800c5ec:	f04f 0103 	mov.w	r1, #3
 800c5f0:	f7ff fc8e 	bl	800bf10 <xmp3_GetBits>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	631a      	str	r2, [r3, #48]	; 0x30

				/* TODO - check logic */
				if (sis->blockType == 0) {
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10c      	bne.n	800c61e <xmp3_UnpackSideInfo+0x28e>
					/* this should not be allowed, according to spec */
					sis->nBigvals = 0;
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	f04f 0200 	mov.w	r2, #0
 800c60a:	605a      	str	r2, [r3, #4]
					sis->part23Length = 0;
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	f04f 0200 	mov.w	r2, #0
 800c612:	601a      	str	r2, [r3, #0]
					sis->sfCompress = 0;
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	f04f 0200 	mov.w	r2, #0
 800c61a:	60da      	str	r2, [r3, #12]
 800c61c:	e010      	b.n	800c640 <xmp3_UnpackSideInfo+0x2b0>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	2b02      	cmp	r3, #2
 800c624:	d108      	bne.n	800c638 <xmp3_UnpackSideInfo+0x2a8>
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d104      	bne.n	800c638 <xmp3_UnpackSideInfo+0x2a8>
					/* short block, not mixed */
					sis->region0Count = 8;
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	f04f 0208 	mov.w	r2, #8
 800c634:	635a      	str	r2, [r3, #52]	; 0x34
 800c636:	e003      	b.n	800c640 <xmp3_UnpackSideInfo+0x2b0>
				} else {
					/* start, stop, or short-mixed */
					sis->region0Count = 7;
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	f04f 0207 	mov.w	r2, #7
 800c63e:	635a      	str	r2, [r3, #52]	; 0x34
				}
				sis->region1Count = 20 - sis->region0Count;
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c644:	f1c3 0214 	rsb	r2, r3, #20
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	639a      	str	r2, [r3, #56]	; 0x38
 800c64c:	e034      	b.n	800c6b8 <xmp3_UnpackSideInfo+0x328>
			} else {
				/* this is a normal block */
				sis->blockType = 0;
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	f04f 0200 	mov.w	r2, #0
 800c654:	615a      	str	r2, [r3, #20]
				sis->mixedBlock = 0;
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	f04f 0200 	mov.w	r2, #0
 800c65c:	619a      	str	r2, [r3, #24]
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800c65e:	69f8      	ldr	r0, [r7, #28]
 800c660:	f04f 0105 	mov.w	r1, #5
 800c664:	f7ff fc54 	bl	800bf10 <xmp3_GetBits>
 800c668:	4603      	mov	r3, r0
 800c66a:	461a      	mov	r2, r3
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	61da      	str	r2, [r3, #28]
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800c670:	69f8      	ldr	r0, [r7, #28]
 800c672:	f04f 0105 	mov.w	r1, #5
 800c676:	f7ff fc4b 	bl	800bf10 <xmp3_GetBits>
 800c67a:	4603      	mov	r3, r0
 800c67c:	461a      	mov	r2, r3
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	621a      	str	r2, [r3, #32]
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800c682:	69f8      	ldr	r0, [r7, #28]
 800c684:	f04f 0105 	mov.w	r1, #5
 800c688:	f7ff fc42 	bl	800bf10 <xmp3_GetBits>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	625a      	str	r2, [r3, #36]	; 0x24
				sis->region0Count =    GetBits(bsi, 4);
 800c694:	69f8      	ldr	r0, [r7, #28]
 800c696:	f04f 0104 	mov.w	r1, #4
 800c69a:	f7ff fc39 	bl	800bf10 <xmp3_GetBits>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	635a      	str	r2, [r3, #52]	; 0x34
				sis->region1Count =    GetBits(bsi, 3);
 800c6a6:	69f8      	ldr	r0, [r7, #28]
 800c6a8:	f04f 0103 	mov.w	r1, #3
 800c6ac:	f7ff fc30 	bl	800bf10 <xmp3_GetBits>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	639a      	str	r2, [r3, #56]	; 0x38
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d106      	bne.n	800c6ce <xmp3_UnpackSideInfo+0x33e>
 800c6c0:	69f8      	ldr	r0, [r7, #28]
 800c6c2:	f04f 0101 	mov.w	r1, #1
 800c6c6:	f7ff fc23 	bl	800bf10 <xmp3_GetBits>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	e001      	b.n	800c6d2 <xmp3_UnpackSideInfo+0x342>
 800c6ce:	f04f 0300 	mov.w	r3, #0
 800c6d2:	69ba      	ldr	r2, [r7, #24]
 800c6d4:	63d3      	str	r3, [r2, #60]	; 0x3c
			sis->sfactScale =        GetBits(bsi, 1);
 800c6d6:	69f8      	ldr	r0, [r7, #28]
 800c6d8:	f04f 0101 	mov.w	r1, #1
 800c6dc:	f7ff fc18 	bl	800bf10 <xmp3_GetBits>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	641a      	str	r2, [r3, #64]	; 0x40
			sis->count1TableSelect = GetBits(bsi, 1);
 800c6e8:	69f8      	ldr	r0, [r7, #28]
 800c6ea:	f04f 0101 	mov.w	r1, #1
 800c6ee:	f7ff fc0f 	bl	800bf10 <xmp3_GetBits>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	645a      	str	r2, [r3, #68]	; 0x44
		si->mainDataBegin = GetBits(bsi, 8);
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fc:	f103 0301 	add.w	r3, r3, #1
 800c700:	633b      	str	r3, [r7, #48]	; 0x30
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 800c708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70a:	429a      	cmp	r2, r3
 800c70c:	f73f aee5 	bgt.w	800c4da <xmp3_UnpackSideInfo+0x14a>
		SetBitstreamPointer(bsi, nBytes, buf);
		si->mainDataBegin = GetBits(bsi, 8);
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800c710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c712:	f103 0301 	add.w	r3, r3, #1
 800c716:	637b      	str	r3, [r7, #52]	; 0x34
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 27c4 	ldr.w	r2, [r3, #1988]	; 0x7c4
 800c71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c720:	429a      	cmp	r2, r3
 800c722:	f73f aed6 	bgt.w	800c4d2 <xmp3_UnpackSideInfo+0x142>
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
			sis->sfactScale =        GetBits(bsi, 1);
			sis->count1TableSelect = GetBits(bsi, 1);
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 800c726:	6a3b      	ldr	r3, [r7, #32]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c732:	4618      	mov	r0, r3
 800c734:	f107 0738 	add.w	r7, r7, #56	; 0x38
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <ClearBuffer>:
 * Return:      none
 *
 * Notes:       slow, platform-independent equivalent to memset(buf, 0, nBytes)
 **************************************************************************************/
void ClearBuffer(void *buf, int nBytes)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
	int i;
	unsigned char *cbuf = (unsigned char *)buf;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < nBytes; i++)
 800c74a:	f04f 0300 	mov.w	r3, #0
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	e009      	b.n	800c766 <ClearBuffer+0x2a>
		cbuf[i] = 0;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	18d3      	adds	r3, r2, r3
 800c758:	f04f 0200 	mov.w	r2, #0
 800c75c:	701a      	strb	r2, [r3, #0]
void ClearBuffer(void *buf, int nBytes)
{
	int i;
	unsigned char *cbuf = (unsigned char *)buf;

	for (i = 0; i < nBytes; i++)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f103 0301 	add.w	r3, r3, #1
 800c764:	60fb      	str	r3, [r7, #12]
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	dbf1      	blt.n	800c752 <ClearBuffer+0x16>
		cbuf[i] = 0;

}
 800c76e:	f107 0714 	add.w	r7, r7, #20
 800c772:	46bd      	mov	sp, r7
 800c774:	bc80      	pop	{r7}
 800c776:	4770      	bx	lr

0800c778 <xmp3_AllocateBuffers>:
 *
 *              Changed by Kasper Jepsen to support static buffers as well.
 *
 **************************************************************************************/
MP3DecInfo *AllocateBuffers(void)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
  MP3DecInfo *mp3DecInfo_pointer;
  #ifdef static_buffers
  mp3DecInfo_pointer = (MP3DecInfo*)&mp3DecInfo;
 800c77e:	f644 5320 	movw	r3, #19744	; 0x4d20
 800c782:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c786:	607b      	str	r3, [r7, #4]
  ClearBuffer((void*)&mp3DecInfo, sizeof(MP3DecInfo));
 800c788:	f644 5020 	movw	r0, #19744	; 0x4d20
 800c78c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c790:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800c794:	f7ff ffd2 	bl	800c73c <ClearBuffer>

  	mp3DecInfo.FrameHeaderPS =     (void*)&fh;
 800c798:	f644 5320 	movw	r3, #19744	; 0x4d20
 800c79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7a0:	f644 42e8 	movw	r2, #19688	; 0x4ce8
 800c7a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c7a8:	601a      	str	r2, [r3, #0]
	mp3DecInfo.SideInfoPS =        (void*)&si;
 800c7aa:	f644 5320 	movw	r3, #19744	; 0x4d20
 800c7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7b2:	f245 622c 	movw	r2, #22060	; 0x562c
 800c7b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c7ba:	605a      	str	r2, [r3, #4]
	mp3DecInfo.ScaleFactorInfoPS = (void*)&sfi;
 800c7bc:	f644 5320 	movw	r3, #19744	; 0x4d20
 800c7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7c4:	f245 5210 	movw	r2, #21776	; 0x5510
 800c7c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c7cc:	609a      	str	r2, [r3, #8]
	mp3DecInfo.HuffmanInfoPS =     (void*)&hi;
 800c7ce:	f644 5320 	movw	r3, #19744	; 0x4d20
 800c7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7d6:	f647 1278 	movw	r2, #31096	; 0x7978
 800c7da:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c7de:	60da      	str	r2, [r3, #12]
	mp3DecInfo.DequantInfoPS =     (void*)&di;
 800c7e0:	f644 5320 	movw	r3, #19744	; 0x4d20
 800c7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7e8:	f648 3288 	movw	r2, #35720	; 0x8b88
 800c7ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c7f0:	611a      	str	r2, [r3, #16]
	mp3DecInfo.IMDCTInfoPS =       (void*)&mi;
 800c7f2:	f644 5320 	movw	r3, #19744	; 0x4d20
 800c7f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7fa:	f648 62d0 	movw	r2, #36560	; 0x8ed0
 800c7fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c802:	615a      	str	r2, [r3, #20]
	mp3DecInfo.SubbandInfoPS =     (void*)&sbi;
 800c804:	f644 5320 	movw	r3, #19744	; 0x4d20
 800c808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c80c:	f245 7274 	movw	r2, #22388	; 0x5774
 800c810:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c814:	619a      	str	r2, [r3, #24]

	/* important to do this - DSP primitives assume a bunch of state variables are 0 on first use */
    ClearBuffer((void*)&fh,  sizeof(FrameHeader));
 800c816:	f644 40e8 	movw	r0, #19688	; 0x4ce8
 800c81a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c81e:	f04f 0138 	mov.w	r1, #56	; 0x38
 800c822:	f7ff ff8b 	bl	800c73c <ClearBuffer>
	ClearBuffer((void*)&si,  sizeof(SideInfo));
 800c826:	f245 602c 	movw	r0, #22060	; 0x562c
 800c82a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c82e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800c832:	f7ff ff83 	bl	800c73c <ClearBuffer>
	ClearBuffer((void*)&sfi, sizeof(ScaleFactorInfo));
 800c836:	f245 5010 	movw	r0, #21776	; 0x5510
 800c83a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c83e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800c842:	f7ff ff7b 	bl	800c73c <ClearBuffer>
	ClearBuffer((void*)&hi,  sizeof(HuffmanInfo));
 800c846:	f647 1078 	movw	r0, #31096	; 0x7978
 800c84a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c84e:	f241 2110 	movw	r1, #4624	; 0x1210
 800c852:	f7ff ff73 	bl	800c73c <ClearBuffer>
	ClearBuffer((void*)&di,  sizeof(DequantInfo));
 800c856:	f648 3088 	movw	r0, #35720	; 0x8b88
 800c85a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c85e:	f44f 7152 	mov.w	r1, #840	; 0x348
 800c862:	f7ff ff6b 	bl	800c73c <ClearBuffer>
	ClearBuffer((void*)&mi,  sizeof(IMDCTInfo));
 800c866:	f648 60d0 	movw	r0, #36560	; 0x8ed0
 800c86a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c86e:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 800c872:	f7ff ff63 	bl	800c73c <ClearBuffer>
	ClearBuffer((void*)&sbi, sizeof(SubbandInfo));
 800c876:	f245 7074 	movw	r0, #22388	; 0x5774
 800c87a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c87e:	f242 2104 	movw	r1, #8708	; 0x2204
 800c882:	f7ff ff5b 	bl	800c73c <ClearBuffer>
	ClearBuffer(di,  sizeof(DequantInfo));
	ClearBuffer(mi,  sizeof(IMDCTInfo));
	ClearBuffer(sbi, sizeof(SubbandInfo));

#endif
	return mp3DecInfo_pointer;
 800c886:	687b      	ldr	r3, [r7, #4]

}
 800c888:	4618      	mov	r0, r3
 800c88a:	f107 0708 	add.w	r7, r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop

0800c894 <xmp3_FreeBuffers>:
 * Return:      none
 *
 * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
 **************************************************************************************/
void FreeBuffers(MP3DecInfo *mp3DecInfo)
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
	SAFE_FREE(mp3DecInfo->IMDCTInfoPS);
	SAFE_FREE(mp3DecInfo->SubbandInfoPS);

	SAFE_FREE(mp3DecInfo);
#endif
}
 800c89c:	f107 070c 	add.w	r7, r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bc80      	pop	{r7}
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop

0800c8a8 <MULSHIFT32>:


#if defined(__GNUC__) && defined(__arm__)

static __inline__ int MULSHIFT32(int x, int y)
{
 800c8a8:	b490      	push	{r4, r7}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
int zlow;
__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	fb82 4303 	smull	r4, r3, r2, r3
 800c8ba:	60fc      	str	r4, [r7, #12]
 800c8bc:	603b      	str	r3, [r7, #0]
return y;
 800c8be:	683b      	ldr	r3, [r7, #0]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f107 0710 	add.w	r7, r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bc90      	pop	{r4, r7}
 800c8ca:	4770      	bx	lr

0800c8cc <xmp3_FDCT32>:
 * TODO:        code organization and optimization for ARM
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 800c8cc:	b590      	push	{r4, r7, lr}
 800c8ce:	b09f      	sub	sp, #124	; 0x7c
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	603b      	str	r3, [r7, #0]
    int i, s, tmp, es;
    const int *cptr = dcttab;
 800c8da:	f64e 3308 	movw	r3, #60168	; 0xeb08
 800c8de:	f6c0 0302 	movt	r3, #2050	; 0x802
 800c8e2:	66bb      	str	r3, [r7, #104]	; 0x68

	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
 800c8e4:	f04f 0300 	mov.w	r3, #0
 800c8e8:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (gb < 6) {
 800c8ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8ee:	2b05      	cmp	r3, #5
 800c8f0:	dc1e      	bgt.n	800c930 <xmp3_FDCT32+0x64>
		es = 6 - gb;
 800c8f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8f6:	f1c3 0306 	rsb	r3, r3, #6
 800c8fa:	66fb      	str	r3, [r7, #108]	; 0x6c
		for (i = 0; i < 32; i++)
 800c8fc:	f04f 0300 	mov.w	r3, #0
 800c900:	677b      	str	r3, [r7, #116]	; 0x74
 800c902:	e012      	b.n	800c92a <xmp3_FDCT32+0x5e>
			buf[i] >>= es;
 800c904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c906:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	18d3      	adds	r3, r2, r3
 800c90e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c910:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c914:	68f9      	ldr	r1, [r7, #12]
 800c916:	188a      	adds	r2, r1, r2
 800c918:	6811      	ldr	r1, [r2, #0]
 800c91a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c91c:	fa41 f202 	asr.w	r2, r1, r2
 800c920:	601a      	str	r2, [r3, #0]
	 *  almost never triggered)
	 */
	es = 0;
	if (gb < 6) {
		es = 6 - gb;
		for (i = 0; i < 32; i++)
 800c922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c924:	f103 0301 	add.w	r3, r3, #1
 800c928:	677b      	str	r3, [r7, #116]	; 0x74
 800c92a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c92c:	2b1f      	cmp	r3, #31
 800c92e:	dde9      	ble.n	800c904 <xmp3_FDCT32+0x38>
			buf[i] >>= es;
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	663b      	str	r3, [r7, #96]	; 0x60
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c93a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c940:	65bb      	str	r3, [r7, #88]	; 0x58
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c946:	657b      	str	r3, [r7, #84]	; 0x54
 800c948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c94a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c94c:	18d3      	adds	r3, r2, r3
 800c94e:	653b      	str	r3, [r7, #80]	; 0x50
 800c950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c956:	f103 0304 	add.w	r3, r3, #4
 800c95a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c95c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c95e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c960:	1acb      	subs	r3, r1, r3
 800c962:	4610      	mov	r0, r2
 800c964:	4619      	mov	r1, r3
 800c966:	f7ff ff9f 	bl	800c8a8 <MULSHIFT32>
 800c96a:	4603      	mov	r3, r0
 800c96c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c970:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c976:	18d3      	adds	r3, r2, r3
 800c978:	64bb      	str	r3, [r7, #72]	; 0x48
 800c97a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c980:	f103 0304 	add.w	r3, r3, #4
 800c984:	66bb      	str	r3, [r7, #104]	; 0x68
 800c986:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c98a:	1acb      	subs	r3, r1, r3
 800c98c:	4610      	mov	r0, r2
 800c98e:	4619      	mov	r1, r3
 800c990:	f7ff ff8a 	bl	800c8a8 <MULSHIFT32>
 800c994:	4603      	mov	r3, r0
 800c996:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800c99a:	647b      	str	r3, [r7, #68]	; 0x44
 800c99c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c99e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9a0:	18d2      	adds	r2, r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	601a      	str	r2, [r3, #0]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800c9ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9b4:	1acb      	subs	r3, r1, r3
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	f7ff ff75 	bl	800c8a8 <MULSHIFT32>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c9c4:	6023      	str	r3, [r4, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800c9cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c9ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9d0:	188a      	adds	r2, r1, r2
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 800c9da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9e0:	f103 0304 	add.w	r3, r3, #4
 800c9e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c9e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ea:	1acb      	subs	r3, r1, r3
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	f7ff ff5a 	bl	800c8a8 <MULSHIFT32>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c9fa:	6023      	str	r3, [r4, #0]
	D32FP(1, 1, 3, 1);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	663b      	str	r3, [r7, #96]	; 0x60
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca12:	657b      	str	r3, [r7, #84]	; 0x54
 800ca14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca18:	18d3      	adds	r3, r2, r3
 800ca1a:	653b      	str	r3, [r7, #80]	; 0x50
 800ca1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca22:	f103 0304 	add.w	r3, r3, #4
 800ca26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ca2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca2c:	1acb      	subs	r3, r1, r3
 800ca2e:	4610      	mov	r0, r2
 800ca30:	4619      	mov	r1, r3
 800ca32:	f7ff ff39 	bl	800c8a8 <MULSHIFT32>
 800ca36:	4603      	mov	r3, r0
 800ca38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca42:	18d3      	adds	r3, r2, r3
 800ca44:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca4c:	f103 0304 	add.w	r3, r3, #4
 800ca50:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca56:	1acb      	subs	r3, r1, r3
 800ca58:	4610      	mov	r0, r2
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	f7ff ff24 	bl	800c8a8 <MULSHIFT32>
 800ca60:	4603      	mov	r3, r0
 800ca62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ca66:	647b      	str	r3, [r7, #68]	; 0x44
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f103 0304 	add.w	r3, r3, #4
 800ca6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca72:	188a      	adds	r2, r1, r2
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800ca7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca84:	1acb      	subs	r3, r1, r3
 800ca86:	4610      	mov	r0, r2
 800ca88:	4619      	mov	r1, r3
 800ca8a:	f7ff ff0d 	bl	800c8a8 <MULSHIFT32>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800ca9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ca9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800caa0:	188a      	adds	r2, r1, r2
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800caaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cab0:	f103 0304 	add.w	r3, r3, #4
 800cab4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cab6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caba:	1acb      	subs	r3, r1, r3
 800cabc:	4610      	mov	r0, r2
 800cabe:	4619      	mov	r1, r3
 800cac0:	f7ff fef2 	bl	800c8a8 <MULSHIFT32>
 800cac4:	4603      	mov	r3, r0
 800cac6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800caca:	6023      	str	r3, [r4, #0]
	D32FP(2, 1, 3, 1);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	663b      	str	r3, [r7, #96]	; 0x60
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cadc:	65bb      	str	r3, [r7, #88]	; 0x58
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cae2:	657b      	str	r3, [r7, #84]	; 0x54
 800cae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cae8:	18d3      	adds	r3, r2, r3
 800caea:	653b      	str	r3, [r7, #80]	; 0x50
 800caec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caf2:	f103 0304 	add.w	r3, r3, #4
 800caf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800caf8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cafa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cafc:	1acb      	subs	r3, r1, r3
 800cafe:	4610      	mov	r0, r2
 800cb00:	4619      	mov	r1, r3
 800cb02:	f7ff fed1 	bl	800c8a8 <MULSHIFT32>
 800cb06:	4603      	mov	r3, r0
 800cb08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cb0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb12:	18d3      	adds	r3, r2, r3
 800cb14:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb1c:	f103 0304 	add.w	r3, r3, #4
 800cb20:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb26:	1acb      	subs	r3, r1, r3
 800cb28:	4610      	mov	r0, r2
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	f7ff febc 	bl	800c8a8 <MULSHIFT32>
 800cb30:	4603      	mov	r3, r0
 800cb32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800cb36:	647b      	str	r3, [r7, #68]	; 0x44
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f103 0308 	add.w	r3, r3, #8
 800cb3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb42:	188a      	adds	r2, r1, r2
 800cb44:	601a      	str	r2, [r3, #0]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800cb4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb54:	1acb      	subs	r3, r1, r3
 800cb56:	4610      	mov	r0, r2
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f7ff fea5 	bl	800c8a8 <MULSHIFT32>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cb64:	6023      	str	r3, [r4, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800cb6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb70:	188a      	adds	r2, r1, r2
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f103 0474 	add.w	r4, r3, #116	; 0x74
 800cb7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb80:	f103 0304 	add.w	r3, r3, #4
 800cb84:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cb88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb8a:	1acb      	subs	r3, r1, r3
 800cb8c:	4610      	mov	r0, r2
 800cb8e:	4619      	mov	r1, r3
 800cb90:	f7ff fe8a 	bl	800c8a8 <MULSHIFT32>
 800cb94:	4603      	mov	r3, r0
 800cb96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cb9a:	6023      	str	r3, [r4, #0]
	D32FP(3, 1, 2, 1);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	663b      	str	r3, [r7, #96]	; 0x60
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbac:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbb2:	657b      	str	r3, [r7, #84]	; 0x54
 800cbb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbb8:	18d3      	adds	r3, r2, r3
 800cbba:	653b      	str	r3, [r7, #80]	; 0x50
 800cbbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbc2:	f103 0304 	add.w	r3, r3, #4
 800cbc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbc8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbcc:	1acb      	subs	r3, r1, r3
 800cbce:	4610      	mov	r0, r2
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f7ff fe69 	bl	800c8a8 <MULSHIFT32>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbe2:	18d3      	adds	r3, r2, r3
 800cbe4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbec:	f103 0304 	add.w	r3, r3, #4
 800cbf0:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf6:	1acb      	subs	r3, r1, r3
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	f7ff fe54 	bl	800c8a8 <MULSHIFT32>
 800cc00:	4603      	mov	r3, r0
 800cc02:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800cc06:	647b      	str	r3, [r7, #68]	; 0x44
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f103 030c 	add.w	r3, r3, #12
 800cc0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc12:	188a      	adds	r2, r1, r2
 800cc14:	601a      	str	r2, [r3, #0]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800cc1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc24:	1acb      	subs	r3, r1, r3
 800cc26:	4610      	mov	r0, r2
 800cc28:	4619      	mov	r1, r3
 800cc2a:	f7ff fe3d 	bl	800c8a8 <MULSHIFT32>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 800cc3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc40:	188a      	adds	r2, r1, r2
 800cc42:	601a      	str	r2, [r3, #0]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800cc4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc50:	f103 0304 	add.w	r3, r3, #4
 800cc54:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc56:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cc58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc5a:	1acb      	subs	r3, r1, r3
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	4619      	mov	r1, r3
 800cc60:	f7ff fe22 	bl	800c8a8 <MULSHIFT32>
 800cc64:	4603      	mov	r3, r0
 800cc66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc6a:	6023      	str	r3, [r4, #0]
	D32FP(4, 1, 2, 1);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	663b      	str	r3, [r7, #96]	; 0x60
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc82:	657b      	str	r3, [r7, #84]	; 0x54
 800cc84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc88:	18d3      	adds	r3, r2, r3
 800cc8a:	653b      	str	r3, [r7, #80]	; 0x50
 800cc8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc92:	f103 0304 	add.w	r3, r3, #4
 800cc96:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cc9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc9c:	1acb      	subs	r3, r1, r3
 800cc9e:	4610      	mov	r0, r2
 800cca0:	4619      	mov	r1, r3
 800cca2:	f7ff fe01 	bl	800c8a8 <MULSHIFT32>
 800cca6:	4603      	mov	r3, r0
 800cca8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ccac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccb2:	18d3      	adds	r3, r2, r3
 800ccb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccbc:	f103 0304 	add.w	r3, r3, #4
 800ccc0:	66bb      	str	r3, [r7, #104]	; 0x68
 800ccc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccc6:	1acb      	subs	r3, r1, r3
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4619      	mov	r1, r3
 800cccc:	f7ff fdec 	bl	800c8a8 <MULSHIFT32>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ccd6:	647b      	str	r3, [r7, #68]	; 0x44
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f103 0310 	add.w	r3, r3, #16
 800ccde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cce2:	188a      	adds	r2, r1, r2
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ccec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccf4:	1acb      	subs	r3, r1, r3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f7ff fdd5 	bl	800c8a8 <MULSHIFT32>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800cd0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd10:	188a      	adds	r2, r1, r2
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800cd1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd20:	f103 0304 	add.w	r3, r3, #4
 800cd24:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cd28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd2a:	1acb      	subs	r3, r1, r3
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	4619      	mov	r1, r3
 800cd30:	f7ff fdba 	bl	800c8a8 <MULSHIFT32>
 800cd34:	4603      	mov	r3, r0
 800cd36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd3a:	6023      	str	r3, [r4, #0]
	D32FP(5, 1, 1, 2);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	695b      	ldr	r3, [r3, #20]
 800cd40:	663b      	str	r3, [r7, #96]	; 0x60
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4c:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd52:	657b      	str	r3, [r7, #84]	; 0x54
 800cd54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd58:	18d3      	adds	r3, r2, r3
 800cd5a:	653b      	str	r3, [r7, #80]	; 0x50
 800cd5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd62:	f103 0304 	add.w	r3, r3, #4
 800cd66:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd6c:	1acb      	subs	r3, r1, r3
 800cd6e:	4610      	mov	r0, r2
 800cd70:	4619      	mov	r1, r3
 800cd72:	f7ff fd99 	bl	800c8a8 <MULSHIFT32>
 800cd76:	4603      	mov	r3, r0
 800cd78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd82:	18d3      	adds	r3, r2, r3
 800cd84:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd8c:	f103 0304 	add.w	r3, r3, #4
 800cd90:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd96:	1acb      	subs	r3, r1, r3
 800cd98:	4610      	mov	r0, r2
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	f7ff fd84 	bl	800c8a8 <MULSHIFT32>
 800cda0:	4603      	mov	r3, r0
 800cda2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cda6:	647b      	str	r3, [r7, #68]	; 0x44
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f103 0314 	add.w	r3, r3, #20
 800cdae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cdb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdb2:	188a      	adds	r2, r1, r2
 800cdb4:	601a      	str	r2, [r3, #0]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800cdbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cdc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdc4:	1acb      	subs	r3, r1, r3
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	4619      	mov	r1, r3
 800cdca:	f7ff fd6d 	bl	800c8a8 <MULSHIFT32>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f103 0354 	add.w	r3, r3, #84	; 0x54
 800cddc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cde0:	188a      	adds	r2, r1, r2
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800cdea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdf0:	f103 0304 	add.w	r3, r3, #4
 800cdf4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cdf6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cdf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdfa:	1acb      	subs	r3, r1, r3
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	4619      	mov	r1, r3
 800ce00:	f7ff fd52 	bl	800c8a8 <MULSHIFT32>
 800ce04:	4603      	mov	r3, r0
 800ce06:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ce0a:	6023      	str	r3, [r4, #0]
	D32FP(6, 1, 1, 2);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	699b      	ldr	r3, [r3, #24]
 800ce10:	663b      	str	r3, [r7, #96]	; 0x60
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce22:	657b      	str	r3, [r7, #84]	; 0x54
 800ce24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce28:	18d3      	adds	r3, r2, r3
 800ce2a:	653b      	str	r3, [r7, #80]	; 0x50
 800ce2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce32:	f103 0304 	add.w	r3, r3, #4
 800ce36:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce38:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce3c:	1acb      	subs	r3, r1, r3
 800ce3e:	4610      	mov	r0, r2
 800ce40:	4619      	mov	r1, r3
 800ce42:	f7ff fd31 	bl	800c8a8 <MULSHIFT32>
 800ce46:	4603      	mov	r3, r0
 800ce48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce52:	18d3      	adds	r3, r2, r3
 800ce54:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce5c:	f103 0304 	add.w	r3, r3, #4
 800ce60:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce66:	1acb      	subs	r3, r1, r3
 800ce68:	4610      	mov	r0, r2
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	f7ff fd1c 	bl	800c8a8 <MULSHIFT32>
 800ce70:	4603      	mov	r3, r0
 800ce72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce76:	647b      	str	r3, [r7, #68]	; 0x44
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f103 0318 	add.w	r3, r3, #24
 800ce7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce82:	188a      	adds	r2, r1, r2
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800ce8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce94:	1acb      	subs	r3, r1, r3
 800ce96:	4610      	mov	r0, r2
 800ce98:	4619      	mov	r1, r3
 800ce9a:	f7ff fd05 	bl	800c8a8 <MULSHIFT32>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f103 0358 	add.w	r3, r3, #88	; 0x58
 800ceac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ceae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ceb0:	188a      	adds	r2, r1, r2
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800ceba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cec0:	f103 0304 	add.w	r3, r3, #4
 800cec4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cec6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceca:	1acb      	subs	r3, r1, r3
 800cecc:	4610      	mov	r0, r2
 800cece:	4619      	mov	r1, r3
 800ced0:	f7ff fcea 	bl	800c8a8 <MULSHIFT32>
 800ced4:	4603      	mov	r3, r0
 800ced6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ceda:	6023      	str	r3, [r4, #0]
	D32FP(7, 1, 1, 4);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	69db      	ldr	r3, [r3, #28]
 800cee0:	663b      	str	r3, [r7, #96]	; 0x60
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6a1b      	ldr	r3, [r3, #32]
 800ceec:	65bb      	str	r3, [r7, #88]	; 0x58
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cef2:	657b      	str	r3, [r7, #84]	; 0x54
 800cef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cef8:	18d3      	adds	r3, r2, r3
 800cefa:	653b      	str	r3, [r7, #80]	; 0x50
 800cefc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf02:	f103 0304 	add.w	r3, r3, #4
 800cf06:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cf0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf0c:	1acb      	subs	r3, r1, r3
 800cf0e:	4610      	mov	r0, r2
 800cf10:	4619      	mov	r1, r3
 800cf12:	f7ff fcc9 	bl	800c8a8 <MULSHIFT32>
 800cf16:	4603      	mov	r3, r0
 800cf18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf22:	18d3      	adds	r3, r2, r3
 800cf24:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf2c:	f103 0304 	add.w	r3, r3, #4
 800cf30:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf36:	1acb      	subs	r3, r1, r3
 800cf38:	4610      	mov	r0, r2
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	f7ff fcb4 	bl	800c8a8 <MULSHIFT32>
 800cf40:	4603      	mov	r3, r0
 800cf42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf46:	647b      	str	r3, [r7, #68]	; 0x44
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f103 031c 	add.w	r3, r3, #28
 800cf4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf52:	188a      	adds	r2, r1, r2
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f103 0420 	add.w	r4, r3, #32
 800cf5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf64:	1acb      	subs	r3, r1, r3
 800cf66:	4610      	mov	r0, r2
 800cf68:	4619      	mov	r1, r3
 800cf6a:	f7ff fc9d 	bl	800c8a8 <MULSHIFT32>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800cf74:	6023      	str	r3, [r4, #0]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 800cf7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf80:	188a      	adds	r2, r1, r2
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800cf8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf90:	f103 0304 	add.w	r3, r3, #4
 800cf94:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf96:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cf98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf9a:	1acb      	subs	r3, r1, r3
 800cf9c:	4610      	mov	r0, r2
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	f7ff fc82 	bl	800c8a8 <MULSHIFT32>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800cfaa:	6023      	str	r3, [r4, #0]

	/* second pass */
	for (i = 4; i > 0; i--) {
 800cfac:	f04f 0304 	mov.w	r3, #4
 800cfb0:	677b      	str	r3, [r7, #116]	; 0x74
 800cfb2:	e139      	b.n	800d228 <xmp3_FDCT32+0x95c>
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	663b      	str	r3, [r7, #96]	; 0x60
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	69db      	ldr	r3, [r3, #28]
 800cfbe:	643b      	str	r3, [r7, #64]	; 0x40
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	63fb      	str	r3, [r7, #60]	; 0x3c
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800cfcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd0:	18d3      	adds	r3, r2, r3
 800cfd2:	653b      	str	r3, [r7, #80]	; 0x50
 800cfd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfda:	f103 0304 	add.w	r3, r3, #4
 800cfde:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfe0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cfe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe4:	1acb      	subs	r3, r1, r3
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	4619      	mov	r1, r3
 800cfea:	f7ff fc5d 	bl	800c8a8 <MULSHIFT32>
 800cfee:	4603      	mov	r3, r0
 800cff0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cff4:	63bb      	str	r3, [r7, #56]	; 0x38
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800cff6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffa:	18d3      	adds	r3, r2, r3
 800cffc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d004:	f103 0304 	add.w	r3, r3, #4
 800d008:	66bb      	str	r3, [r7, #104]	; 0x68
 800d00a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00e:	1acb      	subs	r3, r1, r3
 800d010:	4610      	mov	r0, r2
 800d012:	4619      	mov	r1, r3
 800d014:	f7ff fc48 	bl	800c8a8 <MULSHIFT32>
 800d018:	4603      	mov	r3, r0
 800d01a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800d01e:	637b      	str	r3, [r7, #52]	; 0x34
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800d020:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d024:	18d3      	adds	r3, r2, r3
 800d026:	663b      	str	r3, [r7, #96]	; 0x60
 800d028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d030:	1acb      	subs	r3, r1, r3
 800d032:	4610      	mov	r0, r2
 800d034:	4619      	mov	r1, r3
 800d036:	f7ff fc37 	bl	800c8a8 <MULSHIFT32>
 800d03a:	4603      	mov	r3, r0
 800d03c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d040:	65fb      	str	r3, [r7, #92]	; 0x5c
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800d042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d046:	18d3      	adds	r3, r2, r3
 800d048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d04a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d050:	f103 0304 	add.w	r3, r3, #4
 800d054:	66bb      	str	r3, [r7, #104]	; 0x68
 800d056:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05a:	1acb      	subs	r3, r1, r3
 800d05c:	4610      	mov	r0, r2
 800d05e:	4619      	mov	r1, r3
 800d060:	f7ff fc22 	bl	800c8a8 <MULSHIFT32>
 800d064:	4603      	mov	r3, r0
 800d066:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d06a:	643b      	str	r3, [r7, #64]	; 0x40

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	65bb      	str	r3, [r7, #88]	; 0x58
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	633b      	str	r3, [r7, #48]	; 0x30
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	657b      	str	r3, [r7, #84]	; 0x54
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	695b      	ldr	r3, [r3, #20]
 800d082:	62fb      	str	r3, [r7, #44]	; 0x2c
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800d084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	18d3      	adds	r3, r2, r3
 800d08a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d08c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d092:	f103 0304 	add.w	r3, r3, #4
 800d096:	66bb      	str	r3, [r7, #104]	; 0x68
 800d098:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09c:	1acb      	subs	r3, r1, r3
 800d09e:	4610      	mov	r0, r2
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	f7ff fc01 	bl	800c8a8 <MULSHIFT32>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d0ac:	62bb      	str	r3, [r7, #40]	; 0x28
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800d0ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	18d3      	adds	r3, r2, r3
 800d0b4:	647b      	str	r3, [r7, #68]	; 0x44
 800d0b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0bc:	f103 0304 	add.w	r3, r3, #4
 800d0c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	1acb      	subs	r3, r1, r3
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	f7ff fbec 	bl	800c8a8 <MULSHIFT32>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d0d6:	627b      	str	r3, [r7, #36]	; 0x24
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800d0d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0dc:	18d3      	adds	r3, r2, r3
 800d0de:	65bb      	str	r3, [r7, #88]	; 0x58
 800d0e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d0e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0e8:	1acb      	subs	r3, r1, r3
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	f7ff fbdb 	bl	800c8a8 <MULSHIFT32>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d0f8:	657b      	str	r3, [r7, #84]	; 0x54
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 800d0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	18d3      	adds	r3, r2, r3
 800d100:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d108:	f103 0304 	add.w	r3, r3, #4
 800d10c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d10e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	1acb      	subs	r3, r1, r3
 800d114:	4610      	mov	r0, r2
 800d116:	4619      	mov	r1, r3
 800d118:	f7ff fbc6 	bl	800c8a8 <MULSHIFT32>
 800d11c:	4603      	mov	r3, r0
 800d11e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d122:	633b      	str	r3, [r7, #48]	; 0x30

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800d124:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d128:	18d3      	adds	r3, r2, r3
 800d12a:	653b      	str	r3, [r7, #80]	; 0x50
 800d12c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d12e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	f647 109a 	movw	r0, #31130	; 0x799a
 800d136:	f6c5 2082 	movt	r0, #23170	; 0x5a82
 800d13a:	4619      	mov	r1, r3
 800d13c:	f7ff fbb4 	bl	800c8a8 <MULSHIFT32>
 800d140:	4603      	mov	r3, r0
 800d142:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d146:	64bb      	str	r3, [r7, #72]	; 0x48
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800d148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d14a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d14c:	18d3      	adds	r3, r2, r3
 800d14e:	647b      	str	r3, [r7, #68]	; 0x44
 800d150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	f647 109a 	movw	r0, #31130	; 0x799a
 800d15a:	f6c5 2082 	movt	r0, #23170	; 0x5a82
 800d15e:	4619      	mov	r1, r3
 800d160:	f7ff fba2 	bl	800c8a8 <MULSHIFT32>
 800d164:	4603      	mov	r3, r0
 800d166:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d16a:	64fb      	str	r3, [r7, #76]	; 0x4c
		buf[0] = b0;	    buf[1] = b1;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f103 0304 	add.w	r3, r3, #4
 800d178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d17a:	601a      	str	r2, [r3, #0]
		buf[2] = b2 + b3;	buf[3] = b3;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f103 0308 	add.w	r3, r3, #8
 800d182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d184:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d186:	188a      	adds	r2, r1, r2
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f103 030c 	add.w	r3, r3, #12
 800d190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d192:	601a      	str	r2, [r3, #0]

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800d194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	18d3      	adds	r3, r2, r3
 800d19a:	637b      	str	r3, [r7, #52]	; 0x34
 800d19c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	f647 109a 	movw	r0, #31130	; 0x799a
 800d1a6:	f6c5 2082 	movt	r0, #23170	; 0x5a82
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	f7ff fb7c 	bl	800c8a8 <MULSHIFT32>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d1b6:	627b      	str	r3, [r7, #36]	; 0x24
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800d1b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1bc:	18d3      	adds	r3, r2, r3
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	f647 109a 	movw	r0, #31130	; 0x799a
 800d1ca:	f6c5 2082 	movt	r0, #23170	; 0x5a82
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	f7ff fb6a 	bl	800c8a8 <MULSHIFT32>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d1da:	63bb      	str	r3, [r7, #56]	; 0x38
		b6 += b7;
 800d1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e0:	18d3      	adds	r3, r2, r3
 800d1e2:	62bb      	str	r3, [r7, #40]	; 0x28
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f103 0310 	add.w	r3, r3, #16
 800d1ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d1ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1ee:	188a      	adds	r2, r1, r2
 800d1f0:	601a      	str	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f103 0314 	add.w	r3, r3, #20
 800d1f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1fc:	188a      	adds	r2, r1, r2
 800d1fe:	601a      	str	r2, [r3, #0]
		buf[6] = b5 + b6;	buf[7] = b7;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f103 0318 	add.w	r3, r3, #24
 800d206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d20a:	188a      	adds	r2, r1, r2
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f103 031c 	add.w	r3, r3, #28
 800d214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d216:	601a      	str	r2, [r3, #0]

		buf += 8;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f103 0320 	add.w	r3, r3, #32
 800d21e:	60fb      	str	r3, [r7, #12]
	D32FP(5, 1, 1, 2);
	D32FP(6, 1, 1, 2);
	D32FP(7, 1, 1, 4);

	/* second pass */
	for (i = 4; i > 0; i--) {
 800d220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d222:	f103 33ff 	add.w	r3, r3, #4294967295
 800d226:	677b      	str	r3, [r7, #116]	; 0x74
 800d228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f73f aec2 	bgt.w	800cfb4 <xmp3_FDCT32+0x6e8>
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
		buf[6] = b5 + b6;	buf[7] = b7;

		buf += 8;
	}
	buf -= 32;	/* reset */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800d236:	60fb      	str	r3, [r7, #12]

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	1ad3      	subs	r3, r2, r3
 800d23e:	f003 0207 	and.w	r2, r3, #7
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <xmp3_FDCT32+0x982>
 800d248:	f04f 0300 	mov.w	r3, #0
 800d24c:	e001      	b.n	800d252 <xmp3_FDCT32+0x986>
 800d24e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800d252:	18d3      	adds	r3, r2, r3
 800d254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d258:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	18d3      	adds	r3, r2, r3
 800d260:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 0];				d[0] = d[8] = s;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	673b      	str	r3, [r7, #112]	; 0x70
 800d268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d26a:	f103 0320 	add.w	r3, r3, #32
 800d26e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d270:	601a      	str	r2, [r3, #0]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d276:	601a      	str	r2, [r3, #0]
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d002      	beq.n	800d284 <xmp3_FDCT32+0x9b8>
 800d27e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800d282:	e001      	b.n	800d288 <xmp3_FDCT32+0x9bc>
 800d284:	f04f 0300 	mov.w	r3, #0
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	189b      	adds	r3, r3, r2
 800d28c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	18d3      	adds	r3, r2, r3
 800d294:	667b      	str	r3, [r7, #100]	; 0x64

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	673b      	str	r3, [r7, #112]	; 0x70
 800d29c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d29e:	f103 0320 	add.w	r3, r3, #32
 800d2a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2aa:	601a      	str	r2, [r3, #0]
 800d2ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d2b2:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[25] + buf[29];
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	18d3      	adds	r3, r2, r3
 800d2c6:	623b      	str	r3, [r7, #32]
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	18d3      	adds	r3, r2, r3
 800d2d4:	673b      	str	r3, [r7, #112]	; 0x70
 800d2d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2d8:	f103 0320 	add.w	r3, r3, #32
 800d2dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d2ec:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	18d3      	adds	r3, r2, r3
 800d300:	673b      	str	r3, [r7, #112]	; 0x70
 800d302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d304:	f103 0320 	add.w	r3, r3, #32
 800d308:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d310:	601a      	str	r2, [r3, #0]
 800d312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d314:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d318:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f103 0354 	add.w	r3, r3, #84	; 0x54
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	6a3b      	ldr	r3, [r7, #32]
 800d324:	18d3      	adds	r3, r2, r3
 800d326:	673b      	str	r3, [r7, #112]	; 0x70
 800d328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d32a:	f103 0320 	add.w	r3, r3, #32
 800d32e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d336:	601a      	str	r2, [r3, #0]
 800d338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d33a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d33e:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[29] + buf[27];
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	18d3      	adds	r3, r2, r3
 800d352:	623b      	str	r3, [r7, #32]
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	673b      	str	r3, [r7, #112]	; 0x70
 800d35a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d35c:	f103 0320 	add.w	r3, r3, #32
 800d360:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d368:	601a      	str	r2, [r3, #0]
 800d36a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d36c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d370:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f103 0354 	add.w	r3, r3, #84	; 0x54
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	6a3b      	ldr	r3, [r7, #32]
 800d37c:	18d3      	adds	r3, r2, r3
 800d37e:	673b      	str	r3, [r7, #112]	; 0x70
 800d380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d382:	f103 0320 	add.w	r3, r3, #32
 800d386:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d392:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d396:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	18d3      	adds	r3, r2, r3
 800d3aa:	673b      	str	r3, [r7, #112]	; 0x70
 800d3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3ae:	f103 0320 	add.w	r3, r3, #32
 800d3b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d3b4:	601a      	str	r2, [r3, #0]
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d3c2:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	6a3b      	ldr	r3, [r7, #32]
 800d3ce:	18d3      	adds	r3, r2, r3
 800d3d0:	673b      	str	r3, [r7, #112]	; 0x70
 800d3d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3d4:	f103 0320 	add.w	r3, r3, #32
 800d3d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d3e8:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[27] + buf[31];
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	18d3      	adds	r3, r2, r3
 800d3fc:	623b      	str	r3, [r7, #32]
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	673b      	str	r3, [r7, #112]	; 0x70
 800d404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d406:	f103 0320 	add.w	r3, r3, #32
 800d40a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d40c:	601a      	str	r2, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d416:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d41a:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	18d3      	adds	r3, r2, r3
 800d428:	673b      	str	r3, [r7, #112]	; 0x70
 800d42a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d42c:	f103 0320 	add.w	r3, r3, #32
 800d430:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d43c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d440:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	18d3      	adds	r3, r2, r3
 800d454:	673b      	str	r3, [r7, #112]	; 0x70
 800d456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d458:	f103 0320 	add.w	r3, r3, #32
 800d45c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d45e:	601a      	str	r2, [r3, #0]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d468:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d46c:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	18d3      	adds	r3, r2, r3
 800d47a:	673b      	str	r3, [r7, #112]	; 0x70
 800d47c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d47e:	f103 0320 	add.w	r3, r3, #32
 800d482:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d48e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d492:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[31];
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d498:	623b      	str	r3, [r7, #32]
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	69db      	ldr	r3, [r3, #28]
 800d49e:	673b      	str	r3, [r7, #112]	; 0x70
 800d4a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4a2:	f103 0320 	add.w	r3, r3, #32
 800d4a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d4a8:	601a      	str	r2, [r3, #0]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d4b6:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	18d3      	adds	r3, r2, r3
 800d4c4:	673b      	str	r3, [r7, #112]	; 0x70
 800d4c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4c8:	f103 0320 	add.w	r3, r3, #32
 800d4cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d4ce:	601a      	str	r2, [r3, #0]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d4dc:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e2:	673b      	str	r3, [r7, #112]	; 0x70
 800d4e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4e6:	f103 0320 	add.w	r3, r3, #32
 800d4ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d4ec:	601a      	str	r2, [r3, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d4fa:	667b      	str	r3, [r7, #100]	; 0x64
	s = tmp;					d[0] = d[8] = s;
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	673b      	str	r3, [r7, #112]	; 0x70
 800d500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d502:	f103 0320 	add.w	r3, r3, #32
 800d506:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d508:	601a      	str	r2, [r3, #0]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d50e:	601a      	str	r2, [r3, #0]

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	f003 0207 	and.w	r2, r3, #7
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <xmp3_FDCT32+0xc5a>
 800d520:	f04f 0300 	mov.w	r3, #0
 800d524:	e001      	b.n	800d52a <xmp3_FDCT32+0xc5e>
 800d526:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800d52a:	18d3      	adds	r3, r2, r3
 800d52c:	f103 0310 	add.w	r3, r3, #16
 800d530:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	18d3      	adds	r3, r2, r3
 800d538:	667b      	str	r3, [r7, #100]	; 0x64

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	673b      	str	r3, [r7, #112]	; 0x70
 800d540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d542:	f103 0320 	add.w	r3, r3, #32
 800d546:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d552:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d556:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[30] + buf[25];
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f103 0378 	add.w	r3, r3, #120	; 0x78
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	18d3      	adds	r3, r2, r3
 800d56a:	623b      	str	r3, [r7, #32]
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	6a3b      	ldr	r3, [r7, #32]
 800d576:	18d3      	adds	r3, r2, r3
 800d578:	673b      	str	r3, [r7, #112]	; 0x70
 800d57a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d57c:	f103 0320 	add.w	r3, r3, #32
 800d580:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d582:	601a      	str	r2, [r3, #0]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d588:	601a      	str	r2, [r3, #0]
 800d58a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d58c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d590:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	18d3      	adds	r3, r2, r3
 800d5a4:	673b      	str	r3, [r7, #112]	; 0x70
 800d5a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5a8:	f103 0320 	add.w	r3, r3, #32
 800d5ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d5ae:	601a      	str	r2, [r3, #0]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d5bc:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f103 0358 	add.w	r3, r3, #88	; 0x58
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	6a3b      	ldr	r3, [r7, #32]
 800d5c8:	18d3      	adds	r3, r2, r3
 800d5ca:	673b      	str	r3, [r7, #112]	; 0x70
 800d5cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5ce:	f103 0320 	add.w	r3, r3, #32
 800d5d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d5d4:	601a      	str	r2, [r3, #0]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5da:	601a      	str	r2, [r3, #0]
 800d5dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d5e2:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	673b      	str	r3, [r7, #112]	; 0x70
 800d5ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5ec:	f103 0320 	add.w	r3, r3, #32
 800d5f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d5f2:	601a      	str	r2, [r3, #0]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d600:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[26] + buf[30];
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f103 0378 	add.w	r3, r3, #120	; 0x78
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	18d3      	adds	r3, r2, r3
 800d614:	623b      	str	r3, [r7, #32]
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f103 0358 	add.w	r3, r3, #88	; 0x58
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	6a3b      	ldr	r3, [r7, #32]
 800d620:	18d3      	adds	r3, r2, r3
 800d622:	673b      	str	r3, [r7, #112]	; 0x70
 800d624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d626:	f103 0320 	add.w	r3, r3, #32
 800d62a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d62c:	601a      	str	r2, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d636:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d63a:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	18d3      	adds	r3, r2, r3
 800d64e:	673b      	str	r3, [r7, #112]	; 0x70
 800d650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d652:	f103 0320 	add.w	r3, r3, #32
 800d656:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d65e:	601a      	str	r2, [r3, #0]
 800d660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d662:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d666:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	6a3b      	ldr	r3, [r7, #32]
 800d672:	18d3      	adds	r3, r2, r3
 800d674:	673b      	str	r3, [r7, #112]	; 0x70
 800d676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d678:	f103 0320 	add.w	r3, r3, #32
 800d67c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d67e:	601a      	str	r2, [r3, #0]
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d684:	601a      	str	r2, [r3, #0]
 800d686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d688:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d68c:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	673b      	str	r3, [r7, #112]	; 0x70
 800d694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d696:	f103 0320 	add.w	r3, r3, #32
 800d69a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6a2:	601a      	str	r2, [r3, #0]
 800d6a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d6aa:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[28] + buf[26];
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	18d3      	adds	r3, r2, r3
 800d6be:	623b      	str	r3, [r7, #32]
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	6a3b      	ldr	r3, [r7, #32]
 800d6ca:	18d3      	adds	r3, r2, r3
 800d6cc:	673b      	str	r3, [r7, #112]	; 0x70
 800d6ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6d0:	f103 0320 	add.w	r3, r3, #32
 800d6d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d6d6:	601a      	str	r2, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6dc:	601a      	str	r2, [r3, #0]
 800d6de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d6e4:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	18d3      	adds	r3, r2, r3
 800d6f8:	673b      	str	r3, [r7, #112]	; 0x70
 800d6fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6fc:	f103 0320 	add.w	r3, r3, #32
 800d700:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d702:	601a      	str	r2, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d708:	601a      	str	r2, [r3, #0]
 800d70a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d70c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d710:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	18d3      	adds	r3, r2, r3
 800d71e:	673b      	str	r3, [r7, #112]	; 0x70
 800d720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d722:	f103 0320 	add.w	r3, r3, #32
 800d726:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d732:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d736:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	673b      	str	r3, [r7, #112]	; 0x70
 800d73e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d740:	f103 0320 	add.w	r3, r3, #32
 800d744:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d746:	601a      	str	r2, [r3, #0]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d750:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d754:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[24] + buf[28];
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	18d3      	adds	r3, r2, r3
 800d768:	623b      	str	r3, [r7, #32]
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	18d3      	adds	r3, r2, r3
 800d776:	673b      	str	r3, [r7, #112]	; 0x70
 800d778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d77a:	f103 0320 	add.w	r3, r3, #32
 800d77e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d786:	601a      	str	r2, [r3, #0]
 800d788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d78a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d78e:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f103 0320 	add.w	r3, r3, #32
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	18d3      	adds	r3, r2, r3
 800d7a2:	673b      	str	r3, [r7, #112]	; 0x70
 800d7a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7a6:	f103 0320 	add.w	r3, r3, #32
 800d7aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d7ba:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[16] + tmp;			d[0] = d[8] = s;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	18d3      	adds	r3, r2, r3
 800d7c8:	673b      	str	r3, [r7, #112]	; 0x70
 800d7ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7cc:	f103 0320 	add.w	r3, r3, #32
 800d7d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7d8:	601a      	str	r2, [r3, #0]

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 800d7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f000 80cc 	beq.w	800d97a <xmp3_FDCT32+0x10ae>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	f003 0207 	and.w	r2, r3, #7
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d002      	beq.n	800d7f8 <xmp3_FDCT32+0xf2c>
 800d7f2:	f04f 0300 	mov.w	r3, #0
 800d7f6:	e001      	b.n	800d7fc <xmp3_FDCT32+0xf30>
 800d7f8:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800d7fc:	18d3      	adds	r3, r2, r3
 800d7fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d802:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	18d3      	adds	r3, r2, r3
 800d80a:	667b      	str	r3, [r7, #100]	; 0x64
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 800d80c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	673b      	str	r3, [r7, #112]	; 0x70
 800d812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d814:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800d818:	61fb      	str	r3, [r7, #28]
 800d81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d81c:	f1c3 031f 	rsb	r3, r3, #31
 800d820:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d822:	fa42 f203 	asr.w	r2, r2, r3
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d00b      	beq.n	800d844 <xmp3_FDCT32+0xf78>
 800d82c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d82e:	f1c3 031f 	rsb	r3, r3, #31
 800d832:	f04f 0201 	mov.w	r2, #1
 800d836:	fa02 f303 	lsl.w	r3, r2, r3
 800d83a:	f103 32ff 	add.w	r2, r3, #4294967295
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	4053      	eors	r3, r2
 800d842:	673b      	str	r3, [r7, #112]	; 0x70
 800d844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d846:	f103 0320 	add.w	r3, r3, #32
 800d84a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d84c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d84e:	fa01 f202 	lsl.w	r2, r1, r2
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d858:	601a      	str	r2, [r3, #0]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d002      	beq.n	800d866 <xmp3_FDCT32+0xf9a>
 800d860:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800d864:	e001      	b.n	800d86a <xmp3_FDCT32+0xf9e>
 800d866:	f04f 0300 	mov.w	r3, #0
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	189b      	adds	r3, r3, r2
 800d86e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	18d3      	adds	r3, r2, r3
 800d876:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 16; i <= 31; i++) {
 800d878:	f04f 0310 	mov.w	r3, #16
 800d87c:	677b      	str	r3, [r7, #116]	; 0x74
 800d87e:	e02e      	b.n	800d8de <xmp3_FDCT32+0x1012>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800d880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	673b      	str	r3, [r7, #112]	; 0x70
 800d886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d888:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800d88c:	61bb      	str	r3, [r7, #24]
 800d88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d890:	f1c3 031f 	rsb	r3, r3, #31
 800d894:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d896:	fa42 f203 	asr.w	r2, r2, r3
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d00b      	beq.n	800d8b8 <xmp3_FDCT32+0xfec>
 800d8a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8a2:	f1c3 031f 	rsb	r3, r3, #31
 800d8a6:	f04f 0201 	mov.w	r2, #1
 800d8aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ae:	f103 32ff 	add.w	r2, r3, #4294967295
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	4053      	eors	r3, r2
 800d8b6:	673b      	str	r3, [r7, #112]	; 0x70
 800d8b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8ba:	f103 0320 	add.w	r3, r3, #32
 800d8be:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d8c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d8c2:	fa01 f202 	lsl.w	r2, r1, r2
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d8d4:	667b      	str	r3, [r7, #100]	; 0x64
	if (es) {
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
		for (i = 16; i <= 31; i++) {
 800d8d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8d8:	f103 0301 	add.w	r3, r3, #1
 800d8dc:	677b      	str	r3, [r7, #116]	; 0x74
 800d8de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8e0:	2b1f      	cmp	r3, #31
 800d8e2:	ddcd      	ble.n	800d880 <xmp3_FDCT32+0xfb4>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	f003 0207 	and.w	r2, r3, #7
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <xmp3_FDCT32+0x102e>
 800d8f4:	f04f 0300 	mov.w	r3, #0
 800d8f8:	e001      	b.n	800d8fe <xmp3_FDCT32+0x1032>
 800d8fa:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800d8fe:	18d3      	adds	r3, r2, r3
 800d900:	f103 0310 	add.w	r3, r3, #16
 800d904:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	18d3      	adds	r3, r2, r3
 800d90c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 15; i >= 0; i--) {
 800d90e:	f04f 030f 	mov.w	r3, #15
 800d912:	677b      	str	r3, [r7, #116]	; 0x74
 800d914:	e02e      	b.n	800d974 <xmp3_FDCT32+0x10a8>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800d916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	673b      	str	r3, [r7, #112]	; 0x70
 800d91c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d91e:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800d922:	617b      	str	r3, [r7, #20]
 800d924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d926:	f1c3 031f 	rsb	r3, r3, #31
 800d92a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d92c:	fa42 f203 	asr.w	r2, r2, r3
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	429a      	cmp	r2, r3
 800d934:	d00b      	beq.n	800d94e <xmp3_FDCT32+0x1082>
 800d936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d938:	f1c3 031f 	rsb	r3, r3, #31
 800d93c:	f04f 0201 	mov.w	r2, #1
 800d940:	fa02 f303 	lsl.w	r3, r2, r3
 800d944:	f103 32ff 	add.w	r2, r3, #4294967295
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	4053      	eors	r3, r2
 800d94c:	673b      	str	r3, [r7, #112]	; 0x70
 800d94e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d950:	f103 0320 	add.w	r3, r3, #32
 800d954:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d956:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d958:	fa01 f202 	lsl.w	r2, r1, r2
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d966:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d96a:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 16; i <= 31; i++) {
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		for (i = 15; i >= 0; i--) {
 800d96c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d96e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d972:	677b      	str	r3, [r7, #116]	; 0x74
 800d974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d976:	2b00      	cmp	r3, #0
 800d978:	dacd      	bge.n	800d916 <xmp3_FDCT32+0x104a>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
		}
	}
}
 800d97a:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd90      	pop	{r4, r7, pc}
 800d982:	bf00      	nop

0800d984 <CLZ>:

return x;
}

static __inline int CLZ(int x)
{
 800d984:	b490      	push	{r4, r7}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
while (!(x & 0x80000000)) {
numZeros++;
x <
}*/

__asm__ ("clz %0, %1" : "=r" (numZeros) : "r" (x) : "cc");
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	fab3 f483 	clz	r4, r3
 800d992:	60fc      	str	r4, [r7, #12]

return numZeros;
 800d994:	68fb      	ldr	r3, [r7, #12]
}
 800d996:	4618      	mov	r0, r3
 800d998:	f107 0710 	add.w	r7, r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bc90      	pop	{r4, r7}
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop

0800d9a4 <xmp3_Dequantize>:
 *                round to PCM (>> by 15 less than we otherwise would have).
 *              Equivalently, we can think of the dequantized coefficients as 
 *                Q(DQ_FRACBITS_OUT - 15) with no implicit bias. 
 **************************************************************************************/
int Dequantize(MP3DecInfo *mp3DecInfo, int gr)
{
 800d9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9a6:	b095      	sub	sp, #84	; 0x54
 800d9a8:	af06      	add	r7, sp, #24
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d013      	beq.n	800d9dc <xmp3_Dequantize+0x38>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00f      	beq.n	800d9dc <xmp3_Dequantize+0x38>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00b      	beq.n	800d9dc <xmp3_Dequantize+0x38>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d007      	beq.n	800d9dc <xmp3_Dequantize+0x38>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	68db      	ldr	r3, [r3, #12]
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d003      	beq.n	800d9dc <xmp3_Dequantize+0x38>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	691b      	ldr	r3, [r3, #16]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d102      	bne.n	800d9e2 <xmp3_Dequantize+0x3e>
		return -1;
 800d9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e0:	e1e2      	b.n	800dda8 <xmp3_Dequantize+0x404>

	fh = (FrameHeader *)(mp3DecInfo->FrameHeaderPS);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* si is an array of up to 4 structs, stored as gr0ch0, gr0ch1, gr1ch0, gr1ch1 */
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	627b      	str	r3, [r7, #36]	; 0x24
	sfi = (ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	623b      	str	r3, [r7, #32]
	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	61fb      	str	r3, [r7, #28]
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	691b      	ldr	r3, [r3, #16]
 800d9fe:	61bb      	str	r3, [r7, #24]
	cbi = di->cbi;
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800da06:	617b      	str	r3, [r7, #20]
	mOut[0] = mOut[1] = 0;
 800da08:	f04f 0300 	mov.w	r3, #0
 800da0c:	613b      	str	r3, [r7, #16]
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	60fb      	str	r3, [r7, #12]

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800da12:	f04f 0300 	mov.w	r3, #0
 800da16:	633b      	str	r3, [r7, #48]	; 0x30
 800da18:	e053      	b.n	800dac2 <xmp3_Dequantize+0x11e>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800da1a:	69f9      	ldr	r1, [r7, #28]
 800da1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da1e:	4613      	mov	r3, r2
 800da20:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800da24:	189b      	adds	r3, r3, r2
 800da26:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800da2a:	18c8      	adds	r0, r1, r3
 800da2c:	69b9      	ldr	r1, [r7, #24]
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800da3a:	18d4      	adds	r4, r2, r3
			&si->sis[gr][ch], &sfi->sfis[gr][ch], &cbi[ch]);
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	f103 0528 	add.w	r5, r3, #40	; 0x28
 800da42:	683a      	ldr	r2, [r7, #0]
 800da44:	4613      	mov	r3, r2
 800da46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800da4a:	189b      	adds	r3, r3, r2
 800da4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800da50:	461e      	mov	r6, r3
 800da52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da54:	4613      	mov	r3, r2
 800da56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800da5a:	189b      	adds	r3, r3, r2
 800da5c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800da60:	18f3      	adds	r3, r6, r3
	cbi = di->cbi;
	mOut[0] = mOut[1] = 0;

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800da62:	18ee      	adds	r6, r5, r3
			&si->sis[gr][ch], &sfi->sfis[gr][ch], &cbi[ch]);
 800da64:	6a3d      	ldr	r5, [r7, #32]
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	4613      	mov	r3, r2
 800da6a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800da6e:	1a9b      	subs	r3, r3, r2
 800da70:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800da74:	469e      	mov	lr, r3
 800da76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da78:	4613      	mov	r3, r2
 800da7a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800da7e:	1a9b      	subs	r3, r3, r2
 800da80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da84:	4473      	add	r3, lr
	cbi = di->cbi;
	mOut[0] = mOut[1] = 0;

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800da86:	18ed      	adds	r5, r5, r3
 800da88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			&si->sis[gr][ch], &sfi->sfis[gr][ch], &cbi[ch]);
 800da8a:	4613      	mov	r3, r2
 800da8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da90:	189b      	adds	r3, r3, r2
 800da92:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	cbi = di->cbi;
	mOut[0] = mOut[1] = 0;

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	18d3      	adds	r3, r2, r3
 800da9a:	9600      	str	r6, [sp, #0]
 800da9c:	9501      	str	r5, [sp, #4]
 800da9e:	9302      	str	r3, [sp, #8]
 800daa0:	4622      	mov	r2, r4
 800daa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa4:	f000 fb0a 	bl	800e0bc <xmp3_DequantChannel>
 800daa8:	4601      	mov	r1, r0
 800daaa:	69fa      	ldr	r2, [r7, #28]
 800daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daae:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800dab2:	f103 0302 	add.w	r3, r3, #2
 800dab6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
	cbi = di->cbi;
	mOut[0] = mOut[1] = 0;

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabc:	f103 0301 	add.w	r3, r3, #1
 800dac0:	633b      	str	r3, [r7, #48]	; 0x30
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	429a      	cmp	r2, r3
 800dacc:	dca5      	bgt.n	800da1a <xmp3_Dequantize+0x76>
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 800dace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d077      	beq.n	800dbc6 <xmp3_Dequantize+0x222>
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dadc:	f103 0308 	add.w	r3, r3, #8
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	dd07      	ble.n	800daf6 <xmp3_Dequantize+0x152>
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800daec:	f103 030c 	add.w	r3, r3, #12
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	dc67      	bgt.n	800dbc6 <xmp3_Dequantize+0x222>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800daf6:	f04f 0300 	mov.w	r3, #0
 800dafa:	637b      	str	r3, [r7, #52]	; 0x34
 800dafc:	e023      	b.n	800db46 <xmp3_Dequantize+0x1a2>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db06:	f04f 0301 	mov.w	r3, #1
 800db0a:	f2cc 0300 	movt	r3, #49152	; 0xc000
 800db0e:	429a      	cmp	r2, r3
 800db10:	da07      	bge.n	800db22 <xmp3_Dequantize+0x17e>
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800db16:	f04f 0301 	mov.w	r3, #1
 800db1a:	f2cc 0300 	movt	r3, #49152	; 0xc000
 800db1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db2a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800db2e:	429a      	cmp	r2, r3
 800db30:	dd05      	ble.n	800db3e <xmp3_Dequantize+0x19a>
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db36:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800db3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800db3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db40:	f103 0301 	add.w	r3, r3, #1
 800db44:	637b      	str	r3, [r7, #52]	; 0x34
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db50:	429a      	cmp	r2, r3
 800db52:	dcd4      	bgt.n	800dafe <xmp3_Dequantize+0x15a>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
		}
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800db54:	f04f 0300 	mov.w	r3, #0
 800db58:	637b      	str	r3, [r7, #52]	; 0x34
 800db5a:	e02b      	b.n	800dbb4 <xmp3_Dequantize+0x210>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db60:	f502 7210 	add.w	r2, r2, #576	; 0x240
 800db64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db68:	f04f 0301 	mov.w	r3, #1
 800db6c:	f2cc 0300 	movt	r3, #49152	; 0xc000
 800db70:	429a      	cmp	r2, r3
 800db72:	da09      	bge.n	800db88 <xmp3_Dequantize+0x1e4>
 800db74:	69fa      	ldr	r2, [r7, #28]
 800db76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db78:	f503 7110 	add.w	r1, r3, #576	; 0x240
 800db7c:	f04f 0301 	mov.w	r3, #1
 800db80:	f2cc 0300 	movt	r3, #49152	; 0xc000
 800db84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db8c:	f502 7210 	add.w	r2, r2, #576	; 0x240
 800db90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db94:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800db98:	429a      	cmp	r2, r3
 800db9a:	dd07      	ble.n	800dbac <xmp3_Dequantize+0x208>
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dba0:	f502 7210 	add.w	r2, r2, #576	; 0x240
 800dba4:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800dba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
		}
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800dbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbae:	f103 0301 	add.w	r3, r3, #1
 800dbb2:	637b      	str	r3, [r7, #52]	; 0x34
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dbba:	f103 0304 	add.w	r3, r3, #4
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	dcca      	bgt.n	800db5c <xmp3_Dequantize+0x1b8>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	6a1b      	ldr	r3, [r3, #32]
 800dbca:	ea4f 0363 	mov.w	r3, r3, asr #1
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d044      	beq.n	800dc5c <xmp3_Dequantize+0x2b8>
		if (fh->modeExt & 0x01) {
 800dbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	f003 0301 	and.w	r3, r3, #1
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d027      	beq.n	800dc30 <xmp3_Dequantize+0x28c>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	f103 0318 	add.w	r3, r3, #24
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10c      	bne.n	800dc06 <xmp3_Dequantize+0x262>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 800dbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf0:	697a      	ldr	r2, [r7, #20]
 800dbf2:	f102 0218 	add.w	r2, r2, #24
 800dbf6:	6952      	ldr	r2, [r2, #20]
 800dbf8:	f102 0201 	add.w	r2, r2, #1
 800dbfc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dc00:	b21b      	sxth	r3, r3
 800dc02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc04:	e022      	b.n	800dc4c <xmp3_Dequantize+0x2a8>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 800dc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f103 0318 	add.w	r3, r3, #24
 800dc10:	691b      	ldr	r3, [r3, #16]
 800dc12:	f103 0301 	add.w	r3, r3, #1
 800dc16:	f103 0314 	add.w	r3, r3, #20
 800dc1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc1e:	18d3      	adds	r3, r2, r3
 800dc20:	88db      	ldrh	r3, [r3, #6]
 800dc22:	b21a      	sxth	r2, r3
 800dc24:	4613      	mov	r3, r2
 800dc26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc2a:	189b      	adds	r3, r3, r2
 800dc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc2e:	e00d      	b.n	800dc4c <xmp3_Dequantize+0x2a8>
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dc36:	f103 0304 	add.w	r3, r3, #4
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	bfa8      	it	ge
 800dc48:	4613      	movge	r3, r2
 800dc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 800dc4c:	69fa      	ldr	r2, [r7, #28]
 800dc4e:	f107 030c 	add.w	r3, r7, #12
 800dc52:	4610      	mov	r0, r2
 800dc54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc56:	461a      	mov	r2, r3
 800dc58:	f005 fcae 	bl	80135b8 <xmp3_MidSideProc>
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 800dc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	f003 0301 	and.w	r3, r3, #1
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d064      	beq.n	800dd34 <xmp3_Dequantize+0x390>
		nSamps = hi->nonZeroBound[0];
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (fh->ver == MPEG1) {
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d12b      	bne.n	800dcd4 <xmp3_Dequantize+0x330>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800dc7c:	69f9      	ldr	r1, [r7, #28]
 800dc7e:	6a38      	ldr	r0, [r7, #32]
 800dc80:	683a      	ldr	r2, [r7, #0]
 800dc82:	4613      	mov	r3, r2
 800dc84:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800dc88:	1a9b      	subs	r3, r3, r2
 800dc8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800dc8e:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 800dc92:	18c4      	adds	r4, r0, r3
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	f503 7546 	add.w	r5, r3, #792	; 0x318
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 800dc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9c:	6a1b      	ldr	r3, [r3, #32]

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
		nSamps = hi->nonZeroBound[0];
		if (fh->ver == MPEG1) {
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800dc9e:	ea4f 0063 	mov.w	r0, r3, asr #1
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 800dca2:	6a7e      	ldr	r6, [r7, #36]	; 0x24

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
		nSamps = hi->nonZeroBound[0];
		if (fh->ver == MPEG1) {
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	4613      	mov	r3, r2
 800dca8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800dcac:	189b      	adds	r3, r3, r2
 800dcae:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dcb2:	18f3      	adds	r3, r6, r3
 800dcb4:	f103 0388 	add.w	r3, r3, #136	; 0x88
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	9500      	str	r5, [sp, #0]
 800dcbc:	9001      	str	r0, [sp, #4]
 800dcbe:	9302      	str	r3, [sp, #8]
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 800dcc0:	f107 030c 	add.w	r3, r7, #12

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
		nSamps = hi->nonZeroBound[0];
		if (fh->ver == MPEG1) {
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800dcc4:	9303      	str	r3, [sp, #12]
 800dcc6:	4608      	mov	r0, r1
 800dcc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dccc:	4623      	mov	r3, r4
 800dcce:	f005 fcd3 	bl	8013678 <xmp3_IntensityProcMPEG1>
 800dcd2:	e02f      	b.n	800dd34 <xmp3_Dequantize+0x390>
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		} else {
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800dcd4:	69f9      	ldr	r1, [r7, #28]
 800dcd6:	6a38      	ldr	r0, [r7, #32]
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	4613      	mov	r3, r2
 800dcdc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800dce0:	1a9b      	subs	r3, r3, r2
 800dce2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800dce6:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 800dcea:	18c4      	adds	r4, r0, r3
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	f503 7646 	add.w	r6, r3, #792	; 0x318
 800dcf2:	6a3b      	ldr	r3, [r7, #32]
 800dcf4:	f103 05f8 	add.w	r5, r3, #248	; 0xf8
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	6a1b      	ldr	r3, [r3, #32]
		nSamps = hi->nonZeroBound[0];
		if (fh->ver == MPEG1) {
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		} else {
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800dcfc:	ea4f 0063 	mov.w	r0, r3, asr #1
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 800dd00:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
		nSamps = hi->nonZeroBound[0];
		if (fh->ver == MPEG1) {
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		} else {
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	4613      	mov	r3, r2
 800dd08:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800dd0c:	189b      	adds	r3, r3, r2
 800dd0e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dd12:	4473      	add	r3, lr
 800dd14:	f103 0388 	add.w	r3, r3, #136	; 0x88
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	9600      	str	r6, [sp, #0]
 800dd1c:	9501      	str	r5, [sp, #4]
 800dd1e:	9002      	str	r0, [sp, #8]
 800dd20:	9303      	str	r3, [sp, #12]
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 800dd22:	f107 030c 	add.w	r3, r7, #12
		nSamps = hi->nonZeroBound[0];
		if (fh->ver == MPEG1) {
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		} else {
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800dd26:	9304      	str	r3, [sp, #16]
 800dd28:	4608      	mov	r0, r1
 800dd2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd2e:	4623      	mov	r3, r4
 800dd30:	f005 ff12 	bl	8013b58 <xmp3_IntensityProcMPEG2>
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	6a1b      	ldr	r3, [r3, #32]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d033      	beq.n	800dda4 <xmp3_Dequantize+0x400>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7ff fe20 	bl	800d984 <CLZ>
 800dd44:	4603      	mov	r3, r0
 800dd46:	f103 32ff 	add.w	r2, r3, #4294967295
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dd50:	f103 0308 	add.w	r3, r3, #8
 800dd54:	601a      	str	r2, [r3, #0]
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff fe13 	bl	800d984 <CLZ>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	f103 32ff 	add.w	r2, r3, #4294967295
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dd6a:	f103 030c 	add.w	r3, r3, #12
 800dd6e:	601a      	str	r2, [r3, #0]
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dd76:	f103 0304 	add.w	r3, r3, #4
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	bfa8      	it	ge
 800dd88:	4613      	movge	r3, r2
 800dd8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		hi->nonZeroBound[0] = nSamps;
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dd92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd94:	601a      	str	r2, [r3, #0]
		hi->nonZeroBound[1] = nSamps;
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800dd9c:	f103 0304 	add.w	r3, r3, #4
 800dda0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dda2:	601a      	str	r2, [r3, #0]
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 800dda4:	f04f 0300 	mov.w	r3, #0
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f107 073c 	add.w	r7, r7, #60	; 0x3c
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddb2:	bf00      	nop

0800ddb4 <MULSHIFT32>:


#if defined(__GNUC__) && defined(__arm__)

static __inline__ int MULSHIFT32(int x, int y)
{
 800ddb4:	b490      	push	{r4, r7}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
int zlow;
__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	fb82 4303 	smull	r4, r3, r2, r3
 800ddc6:	60fc      	str	r4, [r7, #12]
 800ddc8:	603b      	str	r3, [r7, #0]
return y;
 800ddca:	683b      	ldr	r3, [r7, #0]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f107 0710 	add.w	r7, r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bc90      	pop	{r4, r7}
 800ddd6:	4770      	bx	lr

0800ddd8 <CLZ>:

return x;
}

static __inline int CLZ(int x)
{
 800ddd8:	b490      	push	{r4, r7}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
while (!(x & 0x80000000)) {
numZeros++;
x <
}*/

__asm__ ("clz %0, %1" : "=r" (numZeros) : "r" (x) : "cc");
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	fab3 f483 	clz	r4, r3
 800dde6:	60fc      	str	r4, [r7, #12]

return numZeros;
 800dde8:	68fb      	ldr	r3, [r7, #12]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	f107 0710 	add.w	r7, r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bc90      	pop	{r4, r7}
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop

0800ddf8 <DequantBlock>:
 * Outputs:     dequantized samples in Q25 format
 *
 * Return:      bitwise-OR of the unsigned outputs (for guard bit calculations)
 **************************************************************************************/
static int DequantBlock(int *inbuf, int *outbuf, int num, int scale)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b092      	sub	sp, #72	; 0x48
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
 800de04:	603b      	str	r3, [r7, #0]
	int tab4[4];
	int scalef, scalei, shift;
	int sx, x, y;
	int mask = 0;
 800de06:	f04f 0300 	mov.w	r3, #0
 800de0a:	63bb      	str	r3, [r7, #56]	; 0x38
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	f003 0303 	and.w	r3, r3, #3
 800de12:	ea4f 1283 	mov.w	r2, r3, lsl #6
 800de16:	f64e 33f0 	movw	r3, #60400	; 0xebf0
 800de1a:	f6c0 0302 	movt	r3, #2050	; 0x802
 800de1e:	18d3      	adds	r3, r2, r3
 800de20:	637b      	str	r3, [r7, #52]	; 0x34
	scalef = pow14[scale & 0x3];
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	f003 0203 	and.w	r2, r3, #3
 800de28:	f64e 33e0 	movw	r3, #60384	; 0xebe0
 800de2c:	f6c0 0302 	movt	r3, #2050	; 0x802
 800de30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de34:	633b      	str	r3, [r7, #48]	; 0x30
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800de3c:	2b1f      	cmp	r3, #31
 800de3e:	bfa8      	it	ge
 800de40:	231f      	movge	r3, #31
 800de42:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	f103 0303 	add.w	r3, r3, #3
 800de4a:	2b1f      	cmp	r3, #31
 800de4c:	bfa8      	it	ge
 800de4e:	231f      	movge	r3, #31
 800de50:	647b      	str	r3, [r7, #68]	; 0x44
	shift = MAX(shift, 0);
 800de52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de58:	647b      	str	r3, [r7, #68]	; 0x44
	tab4[0] = 0;
 800de5a:	f04f 0300 	mov.w	r3, #0
 800de5e:	617b      	str	r3, [r7, #20]
	tab4[1] = tab16[1] >> shift;
 800de60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de62:	f103 0304 	add.w	r3, r3, #4
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de6a:	fa42 f303 	asr.w	r3, r2, r3
 800de6e:	61bb      	str	r3, [r7, #24]
	tab4[2] = tab16[2] >> shift;
 800de70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de72:	f103 0308 	add.w	r3, r3, #8
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de7a:	fa42 f303 	asr.w	r3, r2, r3
 800de7e:	61fb      	str	r3, [r7, #28]
	tab4[3] = tab16[3] >> shift;
 800de80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de82:	f103 030c 	add.w	r3, r3, #12
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de8a:	fa42 f303 	asr.w	r3, r2, r3
 800de8e:	623b      	str	r3, [r7, #32]

	do {

		sx = *inbuf++;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	62bb      	str	r3, [r7, #40]	; 0x28
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f103 0304 	add.w	r3, r3, #4
 800de9c:	60fb      	str	r3, [r7, #12]
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 800de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dea4:	643b      	str	r3, [r7, #64]	; 0x40

		if (x < 4) {
 800dea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea8:	2b03      	cmp	r3, #3
 800deaa:	dc09      	bgt.n	800dec0 <DequantBlock+0xc8>

			y = tab4[x];
 800deac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800deb2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800deb6:	18d3      	adds	r3, r2, r3
 800deb8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800debc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800debe:	e0dc      	b.n	800e07a <DequantBlock+0x282>

		} else if (x < 16) {
 800dec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dec2:	2b0f      	cmp	r3, #15
 800dec4:	dc16      	bgt.n	800def4 <DequantBlock+0xfc>

			y = tab16[x];
 800dec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dec8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800decc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dece:	18d3      	adds	r3, r2, r3
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	63fb      	str	r3, [r7, #60]	; 0x3c
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800ded4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	da06      	bge.n	800dee8 <DequantBlock+0xf0>
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	f1c3 0300 	rsb	r3, r3, #0
 800dee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dee2:	fa02 f303 	lsl.w	r3, r2, r3
 800dee6:	e003      	b.n	800def0 <DequantBlock+0xf8>
 800dee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800deea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deec:	fa42 f303 	asr.w	r3, r2, r3
 800def0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800def2:	e0c2      	b.n	800e07a <DequantBlock+0x282>

		} else {

			if (x < 64) {
 800def4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def6:	2b3f      	cmp	r3, #63	; 0x3f
 800def8:	dc14      	bgt.n	800df24 <DequantBlock+0x12c>

				y = pow43[x-16];
 800defa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800defc:	f1a3 0210 	sub.w	r2, r3, #16
 800df00:	f64e 43f0 	movw	r3, #60656	; 0xecf0
 800df04:	f6c0 0302 	movt	r3, #2050	; 0x802
 800df08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df0c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* fractional scale */
				y = MULSHIFT32(y, scalef);
 800df0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800df10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df12:	f7ff ff4f 	bl	800ddb4 <MULSHIFT32>
 800df16:	4603      	mov	r3, r0
 800df18:	63fb      	str	r3, [r7, #60]	; 0x3c
				shift = scalei - 3;
 800df1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1c:	f1a3 0303 	sub.w	r3, r3, #3
 800df20:	647b      	str	r3, [r7, #68]	; 0x44
 800df22:	e08c      	b.n	800e03e <DequantBlock+0x246>

			} else {

				/* normalize to [0x40000000, 0x7fffffff] */
				x <<= 17;
 800df24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df26:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800df2a:	643b      	str	r3, [r7, #64]	; 0x40
				shift = 0;
 800df2c:	f04f 0300 	mov.w	r3, #0
 800df30:	647b      	str	r3, [r7, #68]	; 0x44
				if (x < 0x08000000)
 800df32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df34:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800df38:	429a      	cmp	r2, r3
 800df3a:	dc07      	bgt.n	800df4c <DequantBlock+0x154>
					x <<= 4, shift += 4;
 800df3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df3e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800df42:	643b      	str	r3, [r7, #64]	; 0x40
 800df44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df46:	f103 0304 	add.w	r3, r3, #4
 800df4a:	647b      	str	r3, [r7, #68]	; 0x44
				if (x < 0x20000000)
 800df4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df4e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800df52:	429a      	cmp	r2, r3
 800df54:	dc07      	bgt.n	800df66 <DequantBlock+0x16e>
					x <<= 2, shift += 2;
 800df56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df58:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800df5c:	643b      	str	r3, [r7, #64]	; 0x40
 800df5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df60:	f103 0302 	add.w	r3, r3, #2
 800df64:	647b      	str	r3, [r7, #68]	; 0x44
				if (x < 0x40000000)
 800df66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df68:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800df6c:	429a      	cmp	r2, r3
 800df6e:	dc07      	bgt.n	800df80 <DequantBlock+0x188>
					x <<= 1, shift += 1;
 800df70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df76:	643b      	str	r3, [r7, #64]	; 0x40
 800df78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df7a:	f103 0301 	add.w	r3, r3, #1
 800df7e:	647b      	str	r3, [r7, #68]	; 0x44

				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800df80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df82:	f647 1399 	movw	r3, #31129	; 0x7999
 800df86:	f6c5 2382 	movt	r3, #23170	; 0x5a82
 800df8a:	429a      	cmp	r2, r3
 800df8c:	dc04      	bgt.n	800df98 <DequantBlock+0x1a0>
 800df8e:	f64e 53b0 	movw	r3, #60848	; 0xedb0
 800df92:	f6c0 0302 	movt	r3, #2050	; 0x802
 800df96:	e003      	b.n	800dfa0 <DequantBlock+0x1a8>
 800df98:	f64e 53c4 	movw	r3, #60868	; 0xedc4
 800df9c:	f6c0 0302 	movt	r3, #2050	; 0x802
 800dfa0:	627b      	str	r3, [r7, #36]	; 0x24

				/* polynomial */
				y = coef[0];
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[1];
 800dfa8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfac:	f7ff ff02 	bl	800ddb4 <MULSHIFT32>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb4:	f103 0304 	add.w	r3, r3, #4
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	18d3      	adds	r3, r2, r3
 800dfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[2];
 800dfbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfc2:	f7ff fef7 	bl	800ddb4 <MULSHIFT32>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	f103 0308 	add.w	r3, r3, #8
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	18d3      	adds	r3, r2, r3
 800dfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[3];
 800dfd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfd8:	f7ff feec 	bl	800ddb4 <MULSHIFT32>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe0:	f103 030c 	add.w	r3, r3, #12
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	18d3      	adds	r3, r2, r3
 800dfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[4];
 800dfea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfee:	f7ff fee1 	bl	800ddb4 <MULSHIFT32>
 800dff2:	4602      	mov	r2, r0
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	f103 0310 	add.w	r3, r3, #16
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	18d3      	adds	r3, r2, r3
 800dffe:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800e000:	f64e 53f8 	movw	r3, #60920	; 0xedf8
 800e004:	f6c0 0302 	movt	r3, #2050	; 0x802
 800e008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e00e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e010:	4619      	mov	r1, r3
 800e012:	f7ff fecf 	bl	800ddb4 <MULSHIFT32>
 800e016:	4603      	mov	r3, r0
 800e018:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e01c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* fractional scale */
				y = MULSHIFT32(y, scalef);
 800e01e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e022:	f7ff fec7 	bl	800ddb4 <MULSHIFT32>
 800e026:	4603      	mov	r3, r0
 800e028:	63fb      	str	r3, [r7, #60]	; 0x3c
				shift = scalei - pow2exp[shift];
 800e02a:	f64e 53d8 	movw	r3, #60888	; 0xedd8
 800e02e:	f6c0 0302 	movt	r3, #2050	; 0x802
 800e032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e03a:	1ad3      	subs	r3, r2, r3
 800e03c:	647b      	str	r3, [r7, #68]	; 0x44
			}

			/* integer scale */
			if (shift < 0) {
 800e03e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e040:	2b00      	cmp	r3, #0
 800e042:	da15      	bge.n	800e070 <DequantBlock+0x278>
				shift = -shift;
 800e044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e046:	f1c3 0300 	rsb	r3, r3, #0
 800e04a:	647b      	str	r3, [r7, #68]	; 0x44
				if (y > (0x7fffffff >> shift))
 800e04c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e052:	fa42 f203 	asr.w	r2, r2, r3
 800e056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e058:	429a      	cmp	r2, r3
 800e05a:	da03      	bge.n	800e064 <DequantBlock+0x26c>
					y = 0x7fffffff;		/* clip */
 800e05c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e060:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e062:	e00a      	b.n	800e07a <DequantBlock+0x282>
				else
					y <<= shift;
 800e064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e068:	fa02 f303 	lsl.w	r3, r2, r3
 800e06c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e06e:	e004      	b.n	800e07a <DequantBlock+0x282>
			} else {
				y >>= shift;
 800e070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e074:	fa42 f303 	asr.w	r3, r2, r3
 800e078:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		/* sign and store */
		mask |= y;
 800e07a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07e:	4313      	orrs	r3, r2
 800e080:	63bb      	str	r3, [r7, #56]	; 0x38
		*outbuf++ = (sx < 0) ? -y : y;
 800e082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e084:	2b00      	cmp	r3, #0
 800e086:	da03      	bge.n	800e090 <DequantBlock+0x298>
 800e088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08a:	f1c3 0300 	rsb	r3, r3, #0
 800e08e:	e000      	b.n	800e092 <DequantBlock+0x29a>
 800e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	6013      	str	r3, [r2, #0]
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	f103 0304 	add.w	r3, r3, #4
 800e09c:	60bb      	str	r3, [r7, #8]

	} while (--num);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f103 33ff 	add.w	r3, r3, #4294967295
 800e0a4:	607b      	str	r3, [r7, #4]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f47f aef1 	bne.w	800de90 <DequantBlock+0x98>

	return mask;
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop

0800e0bc <xmp3_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b096      	sub	sp, #88	; 0x58
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
 800e0c8:	603b      	str	r3, [r7, #0]
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 800e0ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0cc:	695b      	ldr	r3, [r3, #20]
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d11e      	bne.n	800e110 <xmp3_DequantChannel+0x54>
		cbStartL = 0;
 800e0d2:	f04f 0300 	mov.w	r3, #0
 800e0d6:	633b      	str	r3, [r7, #48]	; 0x30
		if (sis->mixedBlock) { 
 800e0d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00d      	beq.n	800e0fc <xmp3_DequantChannel+0x40>
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d102      	bne.n	800e0ee <xmp3_DequantChannel+0x32>
 800e0e8:	f04f 0308 	mov.w	r3, #8
 800e0ec:	e001      	b.n	800e0f2 <xmp3_DequantChannel+0x36>
 800e0ee:	f04f 0306 	mov.w	r3, #6
 800e0f2:	647b      	str	r3, [r7, #68]	; 0x44
			cbStartS = 3; 
 800e0f4:	f04f 0303 	mov.w	r3, #3
 800e0f8:	643b      	str	r3, [r7, #64]	; 0x40
 800e0fa:	e005      	b.n	800e108 <xmp3_DequantChannel+0x4c>
		} else {
			cbEndL = 0; 
 800e0fc:	f04f 0300 	mov.w	r3, #0
 800e100:	647b      	str	r3, [r7, #68]	; 0x44
			cbStartS = 0;
 800e102:	f04f 0300 	mov.w	r3, #0
 800e106:	643b      	str	r3, [r7, #64]	; 0x40
		}
		cbEndS = 13;
 800e108:	f04f 030d 	mov.w	r3, #13
 800e10c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e10e:	e00b      	b.n	800e128 <xmp3_DequantChannel+0x6c>
	} else {
		/* long block */
		cbStartL = 0;
 800e110:	f04f 0300 	mov.w	r3, #0
 800e114:	633b      	str	r3, [r7, #48]	; 0x30
		cbEndL =   22;
 800e116:	f04f 0316 	mov.w	r3, #22
 800e11a:	647b      	str	r3, [r7, #68]	; 0x44
		cbStartS = 13;
 800e11c:	f04f 030d 	mov.w	r3, #13
 800e120:	643b      	str	r3, [r7, #64]	; 0x40
		cbEndS =   13;
 800e122:	f04f 030d 	mov.w	r3, #13
 800e126:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 800e128:	f04f 0300 	mov.w	r3, #0
 800e12c:	613b      	str	r3, [r7, #16]
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	617b      	str	r3, [r7, #20]
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	61bb      	str	r3, [r7, #24]
	gbMask = 0;
 800e136:	f04f 0300 	mov.w	r3, #0
 800e13a:	63bb      	str	r3, [r7, #56]	; 0x38
	i = 0;
 800e13c:	f04f 0300 	mov.w	r3, #0
 800e140:	657b      	str	r3, [r7, #84]	; 0x54

	/* sfactScale = 0 --> quantizer step size = 2
	 * sfactScale = 1 --> quantizer step size = sqrt(2)
	 *   so sfactMultiplier = 2 or 4 (jump through globalGain by powers of 2 or sqrt(2))
	 */
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e146:	f103 0301 	add.w	r3, r3, #1
 800e14a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e14e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
 800e150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	637b      	str	r3, [r7, #52]	; 0x34
	if (fh->modeExt >> 1)
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	6a1b      	ldr	r3, [r3, #32]
 800e15a:	ea4f 0363 	mov.w	r3, r3, asr #1
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d003      	beq.n	800e16a <xmp3_DequantChannel+0xae>
		 globalGain -= 2;
 800e162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e164:	f1a3 0302 	sub.w	r3, r3, #2
 800e168:	637b      	str	r3, [r7, #52]	; 0x34
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 800e16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e16c:	f103 0302 	add.w	r3, r3, #2
 800e170:	637b      	str	r3, [r7, #52]	; 0x34

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 800e172:	f04f 0300 	mov.w	r3, #0
 800e176:	64bb      	str	r3, [r7, #72]	; 0x48
 800e178:	e058      	b.n	800e22c <xmp3_DequantChannel+0x170>

		nonZero = 0;
 800e17a:	f04f 0300 	mov.w	r3, #0
 800e17e:	62bb      	str	r3, [r7, #40]	; 0x28
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e186:	f102 0201 	add.w	r2, r2, #1
 800e18a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e18e:	b21a      	sxth	r2, r3
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e194:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e196:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800e19a:	b21b      	sxth	r3, r3
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	627b      	str	r3, [r7, #36]	; 0x24
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1a2:	f1c3 02d2 	rsb	r2, r3, #210	; 0xd2
 800e1a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e1a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1aa:	18cb      	adds	r3, r1, r3
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d007      	beq.n	800e1c8 <xmp3_DequantChannel+0x10c>
 800e1b8:	f64e 33c8 	movw	r3, #60360	; 0xebc8
 800e1bc:	f6c0 0302 	movt	r3, #2050	; 0x802
 800e1c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e1c2:	181b      	adds	r3, r3, r0
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	e001      	b.n	800e1cc <xmp3_DequantChannel+0x110>
 800e1c8:	f04f 0300 	mov.w	r3, #0
 800e1cc:	18cb      	adds	r3, r1, r3
 800e1ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1d0:	fb01 f303 	mul.w	r3, r1, r3
 800e1d4:	18d3      	adds	r3, r2, r3
 800e1d6:	623b      	str	r3, [r7, #32]

		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e1d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1da:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	18d2      	adds	r2, r2, r3
 800e1e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e1e8:	68f9      	ldr	r1, [r7, #12]
 800e1ea:	18cb      	adds	r3, r1, r3
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	f7ff fe00 	bl	800ddf8 <DequantBlock>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	62bb      	str	r3, [r7, #40]	; 0x28
		i += nSamps;
 800e200:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e204:	18d3      	adds	r3, r2, r3
 800e206:	657b      	str	r3, [r7, #84]	; 0x54

		/* update highest non-zero critical band */
		if (nonZero) 
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <xmp3_DequantChannel+0x156>
			cbMax[0] = cb;
 800e20e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e210:	613b      	str	r3, [r7, #16]
		gbMask |= nonZero;
 800e212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	4313      	orrs	r3, r2
 800e218:	63bb      	str	r3, [r7, #56]	; 0x38

		if (i >= *nonZeroBound) 
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e220:	429a      	cmp	r2, r3
 800e222:	dd08      	ble.n	800e236 <xmp3_DequantChannel+0x17a>
	if (fh->modeExt >> 1)
		 globalGain -= 2;
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 800e224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e226:	f103 0301 	add.w	r3, r3, #1
 800e22a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e22c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e22e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e230:	429a      	cmp	r2, r3
 800e232:	dba2      	blt.n	800e17a <xmp3_DequantChannel+0xbe>
 800e234:	e000      	b.n	800e238 <xmp3_DequantChannel+0x17c>
		if (nonZero) 
			cbMax[0] = cb;
		gbMask |= nonZero;

		if (i >= *nonZeroBound) 
			break;
 800e236:	bf00      	nop
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
 800e238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e23a:	f04f 0200 	mov.w	r2, #0
 800e23e:	601a      	str	r2, [r3, #0]
	cbi->cbEndL  = cbMax[0];
 800e240:	693a      	ldr	r2, [r7, #16]
 800e242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e244:	615a      	str	r2, [r3, #20]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800e246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e248:	f04f 0200 	mov.w	r2, #0
 800e24c:	60da      	str	r2, [r3, #12]
 800e24e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e250:	68da      	ldr	r2, [r3, #12]
 800e252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e254:	609a      	str	r2, [r3, #8]
 800e256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e258:	689a      	ldr	r2, [r3, #8]
 800e25a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e25c:	605a      	str	r2, [r3, #4]
	cbi->cbEndSMax = 0;
 800e25e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e260:	f04f 0200 	mov.w	r2, #0
 800e264:	611a      	str	r2, [r3, #16]

	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 800e266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e268:	2b0b      	cmp	r3, #11
 800e26a:	dd06      	ble.n	800e27a <xmp3_DequantChannel+0x1be>
		return CLZ(gbMask) - 1;
 800e26c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e26e:	f7ff fdb3 	bl	800ddd8 <CLZ>
 800e272:	4603      	mov	r3, r0
 800e274:	f103 33ff 	add.w	r3, r3, #4294967295
 800e278:	e108      	b.n	800e48c <xmp3_DequantChannel+0x3d0>
	
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800e27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e27c:	613b      	str	r3, [r7, #16]
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	617b      	str	r3, [r7, #20]
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	61bb      	str	r3, [r7, #24]
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800e286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e288:	64bb      	str	r3, [r7, #72]	; 0x48
 800e28a:	e0c8      	b.n	800e41e <xmp3_DequantChannel+0x362>

		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e292:	f103 0301 	add.w	r3, r3, #1
 800e296:	f103 0314 	add.w	r3, r3, #20
 800e29a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e29e:	18d3      	adds	r3, r2, r3
 800e2a0:	88db      	ldrh	r3, [r3, #6]
 800e2a2:	b21a      	sxth	r2, r3
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e2a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2aa:	f103 0314 	add.w	r3, r3, #20
 800e2ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e2b2:	18cb      	adds	r3, r1, r3
 800e2b4:	88db      	ldrh	r3, [r3, #6]
 800e2b6:	b21b      	sxth	r3, r3
 800e2b8:	1ad3      	subs	r3, r2, r3
 800e2ba:	627b      	str	r3, [r7, #36]	; 0x24
		for (w = 0; w < 3; w++) {
 800e2bc:	f04f 0300 	mov.w	r3, #0
 800e2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2c2:	e050      	b.n	800e366 <xmp3_DequantChannel+0x2aa>
			nonZero =  0;
 800e2c4:	f04f 0300 	mov.w	r3, #0
 800e2c8:	62bb      	str	r3, [r7, #40]	; 0x28
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 800e2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2cc:	f1c3 01d2 	rsb	r1, r3, #210	; 0xd2
 800e2d0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e2d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e2da:	189b      	adds	r3, r3, r2
 800e2dc:	18c2      	adds	r2, r0, r3
 800e2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2e0:	18d3      	adds	r3, r2, r3
 800e2e2:	f103 0317 	add.w	r3, r3, #23
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2ea:	fb02 f203 	mul.w	r2, r2, r3
 800e2ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e2f2:	f100 000a 	add.w	r0, r0, #10
 800e2f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e2fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e2fe:	18d3      	adds	r3, r2, r3
 800e300:	18cb      	adds	r3, r1, r3
 800e302:	623b      	str	r3, [r7, #32]

			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e308:	fb02 f303 	mul.w	r3, r2, r3
 800e30c:	461a      	mov	r2, r3
 800e30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e310:	18d3      	adds	r3, r2, r3
 800e312:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e316:	68fa      	ldr	r2, [r7, #12]
 800e318:	18d2      	adds	r2, r2, r3
 800e31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e31e:	fb01 f303 	mul.w	r3, r1, r3
 800e322:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	18cb      	adds	r3, r1, r3
 800e32a:	4610      	mov	r0, r2
 800e32c:	4619      	mov	r1, r3
 800e32e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e330:	6a3b      	ldr	r3, [r7, #32]
 800e332:	f7ff fd61 	bl	800ddf8 <DequantBlock>
 800e336:	4603      	mov	r3, r0
 800e338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e33a:	4313      	orrs	r3, r2
 800e33c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* update highest non-zero critical band */
			if (nonZero)
 800e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e340:	2b00      	cmp	r3, #0
 800e342:	d008      	beq.n	800e356 <xmp3_DequantChannel+0x29a>
				cbMax[w] = cb;
 800e344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e346:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e34a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e34e:	18d3      	adds	r3, r2, r3
 800e350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e352:	f843 2c48 	str.w	r2, [r3, #-72]
			gbMask |= nonZero;
 800e356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	4313      	orrs	r3, r2
 800e35c:	63bb      	str	r3, [r7, #56]	; 0x38
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
	for (cb = cbStartS; cb < cbEndS; cb++) {

		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
		for (w = 0; w < 3; w++) {
 800e35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e360:	f103 0301 	add.w	r3, r3, #1
 800e364:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e368:	2b02      	cmp	r3, #2
 800e36a:	ddab      	ble.n	800e2c4 <xmp3_DequantChannel+0x208>
				cbMax[w] = cb;
			gbMask |= nonZero;
		}

		/* reorder blocks */
		buf = (ARRAY3 *)(sampleBuf + i);
 800e36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e36e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e372:	68fa      	ldr	r2, [r7, #12]
 800e374:	18d3      	adds	r3, r2, r3
 800e376:	61fb      	str	r3, [r7, #28]
		i += 3*nSamps;
 800e378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e37a:	4613      	mov	r3, r2
 800e37c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e380:	189b      	adds	r3, r3, r2
 800e382:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e384:	18d3      	adds	r3, r2, r3
 800e386:	657b      	str	r3, [r7, #84]	; 0x54
		for (j = 0; j < nSamps; j++) {
 800e388:	f04f 0300 	mov.w	r3, #0
 800e38c:	653b      	str	r3, [r7, #80]	; 0x50
 800e38e:	e039      	b.n	800e404 <xmp3_DequantChannel+0x348>
			buf[j][0] = workBuf[0*nSamps + j];
 800e390:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e392:	4613      	mov	r3, r2
 800e394:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e398:	189b      	adds	r3, r3, r2
 800e39a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e39e:	69fa      	ldr	r2, [r7, #28]
 800e3a0:	18d3      	adds	r3, r2, r3
 800e3a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3a4:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800e3a8:	68b9      	ldr	r1, [r7, #8]
 800e3aa:	188a      	adds	r2, r1, r2
 800e3ac:	6812      	ldr	r2, [r2, #0]
 800e3ae:	601a      	str	r2, [r3, #0]
			buf[j][1] = workBuf[1*nSamps + j];
 800e3b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e3b8:	189b      	adds	r3, r3, r2
 800e3ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e3be:	69fa      	ldr	r2, [r7, #28]
 800e3c0:	18d3      	adds	r3, r2, r3
 800e3c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3c6:	188a      	adds	r2, r1, r2
 800e3c8:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800e3cc:	68b9      	ldr	r1, [r7, #8]
 800e3ce:	188a      	adds	r2, r1, r2
 800e3d0:	6812      	ldr	r2, [r2, #0]
 800e3d2:	605a      	str	r2, [r3, #4]
			buf[j][2] = workBuf[2*nSamps + j];
 800e3d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e3dc:	189b      	adds	r3, r3, r2
 800e3de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e3e2:	69fa      	ldr	r2, [r7, #28]
 800e3e4:	18d3      	adds	r3, r2, r3
 800e3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3e8:	ea4f 0142 	mov.w	r1, r2, lsl #1
 800e3ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3ee:	188a      	adds	r2, r1, r2
 800e3f0:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800e3f4:	68b9      	ldr	r1, [r7, #8]
 800e3f6:	188a      	adds	r2, r1, r2
 800e3f8:	6812      	ldr	r2, [r2, #0]
 800e3fa:	609a      	str	r2, [r3, #8]
		}

		/* reorder blocks */
		buf = (ARRAY3 *)(sampleBuf + i);
		i += 3*nSamps;
		for (j = 0; j < nSamps; j++) {
 800e3fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3fe:	f103 0301 	add.w	r3, r3, #1
 800e402:	653b      	str	r3, [r7, #80]	; 0x50
 800e404:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e408:	429a      	cmp	r2, r3
 800e40a:	dbc1      	blt.n	800e390 <xmp3_DequantChannel+0x2d4>
			buf[j][2] = workBuf[2*nSamps + j];
		}

		ASSERT(3*nSamps <= MAX_REORDER_SAMPS);

		if (i >= *nonZeroBound) 
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e412:	429a      	cmp	r2, r3
 800e414:	dd09      	ble.n	800e42a <xmp3_DequantChannel+0x36e>
	if (cbStartS >= 12) 
		return CLZ(gbMask) - 1;
	
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800e416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e418:	f103 0301 	add.w	r3, r3, #1
 800e41c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e41e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e422:	429a      	cmp	r2, r3
 800e424:	f6ff af32 	blt.w	800e28c <xmp3_DequantChannel+0x1d0>
 800e428:	e000      	b.n	800e42c <xmp3_DequantChannel+0x370>
		}

		ASSERT(3*nSamps <= MAX_REORDER_SAMPS);

		if (i >= *nonZeroBound) 
			break;
 800e42a:	bf00      	nop
	 * however, the original nzb is no longer necessarily true
	 *   for each cb, buf[][] is updated with 3*nSamps samples (i increases 3*nSamps each time)
	 *   (buf[j + 1][0] = 3 (input) samples ahead of buf[j][0])
     * so update nonZeroBound to i
	 */
	*nonZeroBound = i;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e430:	601a      	str	r2, [r3, #0]

	ASSERT(*nonZeroBound <= MAX_NSAMP);

	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d002      	beq.n	800e440 <xmp3_DequantChannel+0x384>
 800e43a:	f04f 0302 	mov.w	r3, #2
 800e43e:	e001      	b.n	800e444 <xmp3_DequantChannel+0x388>
 800e440:	f04f 0301 	mov.w	r3, #1
 800e444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e446:	6013      	str	r3, [r2, #0]

	cbi->cbEndS[0] = cbMax[0];
 800e448:	693a      	ldr	r2, [r7, #16]
 800e44a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e44c:	605a      	str	r2, [r3, #4]
	cbi->cbEndS[1] = cbMax[1];
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e452:	609a      	str	r2, [r3, #8]
	cbi->cbEndS[2] = cbMax[2];
 800e454:	69ba      	ldr	r2, [r7, #24]
 800e456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e458:	60da      	str	r2, [r3, #12]

	cbi->cbEndSMax = cbMax[0];
 800e45a:	693a      	ldr	r2, [r7, #16]
 800e45c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e45e:	611a      	str	r2, [r3, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 800e460:	697a      	ldr	r2, [r7, #20]
 800e462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e464:	691b      	ldr	r3, [r3, #16]
 800e466:	429a      	cmp	r2, r3
 800e468:	bfb8      	it	lt
 800e46a:	461a      	movlt	r2, r3
 800e46c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e46e:	611a      	str	r2, [r3, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800e470:	69ba      	ldr	r2, [r7, #24]
 800e472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	429a      	cmp	r2, r3
 800e478:	bfb8      	it	lt
 800e47a:	461a      	movlt	r2, r3
 800e47c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e47e:	611a      	str	r2, [r3, #16]

	return CLZ(gbMask) - 1;
 800e480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e482:	f7ff fca9 	bl	800ddd8 <CLZ>
 800e486:	4603      	mov	r3, r0
 800e488:	f103 33ff 	add.w	r3, r3, #4294967295
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	f107 0758 	add.w	r7, r7, #88	; 0x58
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop

0800e498 <DecodeHuffmanPairs>:
 * Notes:       assumes that nVals is an even number
 *              si_huff.bit tests every Huffman codeword in every table (though not
 *                necessarily all linBits outputs for x,y > 15)
 **************************************************************************************/
static int DecodeHuffmanPairs(int *xy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 800e498:	b480      	push	{r7}
 800e49a:	b095      	sub	sp, #84	; 0x54
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
 800e4a4:	603b      	str	r3, [r7, #0]
	int cachedBits, padBits, len, startBits, linBits, maxBits, minBits;
	HuffTabType tabType;
	unsigned short cw, *tBase, *tCurr;
	unsigned int cache;

	if(nVals <= 0) 
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	dc02      	bgt.n	800e4b2 <DecodeHuffmanPairs+0x1a>
		return 0;
 800e4ac:	f04f 0300 	mov.w	r3, #0
 800e4b0:	e32b      	b.n	800eb0a <DecodeHuffmanPairs+0x672>

	if (bitsLeft < 0)
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	da02      	bge.n	800e4be <DecodeHuffmanPairs+0x26>
		return -1;
 800e4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4bc:	e325      	b.n	800eb0a <DecodeHuffmanPairs+0x672>
	startBits = bitsLeft;
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	633b      	str	r3, [r7, #48]	; 0x30

	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800e4c2:	f640 733c 	movw	r3, #3900	; 0xf3c
 800e4c6:	f6c0 0303 	movt	r3, #2051	; 0x803
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4d0:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800e4d4:	f64e 6318 	movw	r3, #60952	; 0xee18
 800e4d8:	f6c0 0302 	movt	r3, #2050	; 0x802
 800e4dc:	18d3      	adds	r3, r2, r3
 800e4de:	62fb      	str	r3, [r7, #44]	; 0x2c
	linBits = huffTabLookup[tabIdx].linBits;
 800e4e0:	f640 73bc 	movw	r3, #4028	; 0xfbc
 800e4e4:	f6c0 0303 	movt	r3, #2051	; 0x803
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800e4ee:	62bb      	str	r3, [r7, #40]	; 0x28
	tabType = huffTabLookup[tabIdx].tabType;
 800e4f0:	f640 72bc 	movw	r2, #4028	; 0xfbc
 800e4f4:	f6c0 0203 	movt	r2, #2051	; 0x803
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e4fe:	18d3      	adds	r3, r2, r3
 800e500:	791b      	ldrb	r3, [r3, #4]
 800e502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ASSERT(tabIdx < HUFF_PAIRTABS);
	ASSERT(tabIdx >= 0);
	ASSERT(tabType != invalidTab);

	/* initially fill cache with any partial byte */
	cache = 0;
 800e506:	f04f 0300 	mov.w	r3, #0
 800e50a:	637b      	str	r3, [r7, #52]	; 0x34
	cachedBits = (8 - bitOffset) & 0x07;
 800e50c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e50e:	f1c3 0300 	rsb	r3, r3, #0
 800e512:	f003 0307 	and.w	r3, r3, #7
 800e516:	643b      	str	r3, [r7, #64]	; 0x40
	if (cachedBits)
 800e518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00c      	beq.n	800e538 <DecodeHuffmanPairs+0xa0>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800e51e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e526:	f1c3 0320 	rsb	r3, r3, #32
 800e52a:	fa02 f303 	lsl.w	r3, r2, r3
 800e52e:	637b      	str	r3, [r7, #52]	; 0x34
 800e530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e532:	f103 0301 	add.w	r3, r3, #1
 800e536:	65bb      	str	r3, [r7, #88]	; 0x58
	bitsLeft -= cachedBits;
 800e538:	683a      	ldr	r2, [r7, #0]
 800e53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53c:	1ad3      	subs	r3, r2, r3
 800e53e:	603b      	str	r3, [r7, #0]

	if (tabType == noBits) {
 800e540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e544:	2b00      	cmp	r3, #0
 800e546:	d120      	bne.n	800e58a <DecodeHuffmanPairs+0xf2>
		/* table 0, no data, x = y = 0 */
		for (i = 0; i < nVals; i+=2) {
 800e548:	f04f 0300 	mov.w	r3, #0
 800e54c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e54e:	e015      	b.n	800e57c <DecodeHuffmanPairs+0xe4>
			xy[i+0] = 0;
 800e550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e552:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	18d3      	adds	r3, r2, r3
 800e55a:	f04f 0200 	mov.w	r2, #0
 800e55e:	601a      	str	r2, [r3, #0]
			xy[i+1] = 0;
 800e560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e562:	f103 0301 	add.w	r3, r3, #1
 800e566:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	18d3      	adds	r3, r2, r3
 800e56e:	f04f 0200 	mov.w	r2, #0
 800e572:	601a      	str	r2, [r3, #0]
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
	bitsLeft -= cachedBits;

	if (tabType == noBits) {
		/* table 0, no data, x = y = 0 */
		for (i = 0; i < nVals; i+=2) {
 800e574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e576:	f103 0302 	add.w	r3, r3, #2
 800e57a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e57c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	429a      	cmp	r2, r3
 800e582:	dbe5      	blt.n	800e550 <DecodeHuffmanPairs+0xb8>
			xy[i+0] = 0;
			xy[i+1] = 0;
		}
		return 0;
 800e584:	f04f 0300 	mov.w	r3, #0
 800e588:	e2bf      	b.n	800eb0a <DecodeHuffmanPairs+0x672>
	} else if (tabType == oneShot) {
 800e58a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e58e:	2b01      	cmp	r3, #1
 800e590:	f040 80f5 	bne.w	800e77e <DecodeHuffmanPairs+0x2e6>
		/* single lookup, no escapes */
		maxBits = GetMaxbits(tBase[0]);
 800e594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e596:	881b      	ldrh	r3, [r3, #0]
 800e598:	f003 030f 	and.w	r3, r3, #15
 800e59c:	623b      	str	r3, [r7, #32]
		tBase++;
 800e59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a0:	f103 0302 	add.w	r3, r3, #2
 800e5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		padBits = 0;
 800e5a6:	f04f 0300 	mov.w	r3, #0
 800e5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (nVals > 0) {
 800e5ac:	e0d9      	b.n	800e762 <DecodeHuffmanPairs+0x2ca>
			/* refill cache - assumes cachedBits <= 16 */
			if (bitsLeft >= 16) {
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b0f      	cmp	r3, #15
 800e5b2:	dd26      	ble.n	800e602 <DecodeHuffmanPairs+0x16a>
				/* load 2 new bytes into left-justified cache */
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e5b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5bc:	f1c3 0318 	rsb	r3, r3, #24
 800e5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e5c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800e5ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5cc:	f103 0301 	add.w	r3, r3, #1
 800e5d0:	65bb      	str	r3, [r7, #88]	; 0x58
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e5d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5da:	f1c3 0310 	rsb	r3, r3, #16
 800e5de:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	637b      	str	r3, [r7, #52]	; 0x34
 800e5e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5ea:	f103 0301 	add.w	r3, r3, #1
 800e5ee:	65bb      	str	r3, [r7, #88]	; 0x58
				cachedBits += 16;
 800e5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5f2:	f103 0310 	add.w	r3, r3, #16
 800e5f6:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft -= 16;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	f1a3 0310 	sub.w	r3, r3, #16
 800e5fe:	603b      	str	r3, [r7, #0]
				padBits = 11;
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 800e600:	e0a9      	b.n	800e756 <DecodeHuffmanPairs+0x2be>
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
				cachedBits += 16;
				bitsLeft -= 16;
			} else {
				/* last time through, pad cache with zeros and drain cache */
				if (cachedBits + bitsLeft <= 0)	return -1;
 800e602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	18d3      	adds	r3, r2, r3
 800e608:	2b00      	cmp	r3, #0
 800e60a:	dc02      	bgt.n	800e612 <DecodeHuffmanPairs+0x17a>
 800e60c:	f04f 33ff 	mov.w	r3, #4294967295
 800e610:	e27b      	b.n	800eb0a <DecodeHuffmanPairs+0x672>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	dd0e      	ble.n	800e636 <DecodeHuffmanPairs+0x19e>
 800e618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	461a      	mov	r2, r3
 800e61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e620:	f1c3 0318 	rsb	r3, r3, #24
 800e624:	fa02 f303 	lsl.w	r3, r2, r3
 800e628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e62a:	4313      	orrs	r3, r2
 800e62c:	637b      	str	r3, [r7, #52]	; 0x34
 800e62e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e630:	f103 0301 	add.w	r3, r3, #1
 800e634:	65bb      	str	r3, [r7, #88]	; 0x58
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2b08      	cmp	r3, #8
 800e63a:	dd0e      	ble.n	800e65a <DecodeHuffmanPairs+0x1c2>
 800e63c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	461a      	mov	r2, r3
 800e642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e644:	f1c3 0310 	rsb	r3, r3, #16
 800e648:	fa02 f303 	lsl.w	r3, r2, r3
 800e64c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e64e:	4313      	orrs	r3, r2
 800e650:	637b      	str	r3, [r7, #52]	; 0x34
 800e652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e654:	f103 0301 	add.w	r3, r3, #1
 800e658:	65bb      	str	r3, [r7, #88]	; 0x58
				cachedBits += bitsLeft;
 800e65a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	18d3      	adds	r3, r2, r3
 800e660:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft = 0;
 800e662:	f04f 0300 	mov.w	r3, #0
 800e666:	603b      	str	r3, [r7, #0]

				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e66a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e66e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e672:	fa42 f303 	asr.w	r3, r2, r3
 800e676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e678:	4013      	ands	r3, r2
 800e67a:	637b      	str	r3, [r7, #52]	; 0x34
				padBits = 11;
 800e67c:	f04f 030b 	mov.w	r3, #11
 800e680:	63fb      	str	r3, [r7, #60]	; 0x3c
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800e682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e686:	18d3      	adds	r3, r2, r3
 800e688:	643b      	str	r3, [r7, #64]	; 0x40
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 800e68a:	e064      	b.n	800e756 <DecodeHuffmanPairs+0x2be>
				cw = tBase[cache >> (32 - maxBits)];
 800e68c:	6a3b      	ldr	r3, [r7, #32]
 800e68e:	f1c3 0320 	rsb	r3, r3, #32
 800e692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e694:	fa22 f303 	lsr.w	r3, r2, r3
 800e698:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e69c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e69e:	18d3      	adds	r3, r2, r3
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	83fb      	strh	r3, [r7, #30]
				len = GetHLen(cw);
 800e6a4:	8bfb      	ldrh	r3, [r7, #30]
 800e6a6:	ea4f 3313 	mov.w	r3, r3, lsr #12
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	f003 030f 	and.w	r3, r3, #15
 800e6b0:	61bb      	str	r3, [r7, #24]
				cachedBits -= len;
 800e6b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	1ad3      	subs	r3, r2, r3
 800e6b8:	643b      	str	r3, [r7, #64]	; 0x40
				cache <<= len;
 800e6ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	fa02 f303 	lsl.w	r3, r2, r3
 800e6c2:	637b      	str	r3, [r7, #52]	; 0x34

				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e6c4:	8bfb      	ldrh	r3, [r7, #30]
 800e6c6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	f003 030f 	and.w	r3, r3, #15
 800e6d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00d      	beq.n	800e6f4 <DecodeHuffmanPairs+0x25c>
 800e6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6da:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800e6de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e6ea:	637b      	str	r3, [r7, #52]	; 0x34
 800e6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800e6f2:	643b      	str	r3, [r7, #64]	; 0x40
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e6f4:	8bfb      	ldrh	r3, [r7, #30]
 800e6f6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	f003 030f 	and.w	r3, r3, #15
 800e700:	647b      	str	r3, [r7, #68]	; 0x44
 800e702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00d      	beq.n	800e724 <DecodeHuffmanPairs+0x28c>
 800e708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800e70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e710:	4313      	orrs	r3, r2
 800e712:	647b      	str	r3, [r7, #68]	; 0x44
 800e714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e716:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e71a:	637b      	str	r3, [r7, #52]	; 0x34
 800e71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e71e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e722:	643b      	str	r3, [r7, #64]	; 0x40

				/* ran out of bits - should never have consumed padBits */
				if (cachedBits < padBits)
 800e724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e728:	429a      	cmp	r2, r3
 800e72a:	da02      	bge.n	800e732 <DecodeHuffmanPairs+0x29a>
					return -1;
 800e72c:	f04f 33ff 	mov.w	r3, #4294967295
 800e730:	e1eb      	b.n	800eb0a <DecodeHuffmanPairs+0x672>

				*xy++ = x;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e736:	601a      	str	r2, [r3, #0]
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f103 0304 	add.w	r3, r3, #4
 800e73e:	60fb      	str	r3, [r7, #12]
				*xy++ = y;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e744:	601a      	str	r2, [r3, #0]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f103 0304 	add.w	r3, r3, #4
 800e74c:	60fb      	str	r3, [r7, #12]
				nVals -= 2;
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	f1a3 0302 	sub.w	r3, r3, #2
 800e754:	60bb      	str	r3, [r7, #8]
				padBits = 11;
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	dd02      	ble.n	800e762 <DecodeHuffmanPairs+0x2ca>
 800e75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e75e:	2b0a      	cmp	r3, #10
 800e760:	dc94      	bgt.n	800e68c <DecodeHuffmanPairs+0x1f4>
	} else if (tabType == oneShot) {
		/* single lookup, no escapes */
		maxBits = GetMaxbits(tBase[0]);
		tBase++;
		padBits = 0;
		while (nVals > 0) {
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	2b00      	cmp	r3, #0
 800e766:	f73f af22 	bgt.w	800e5ae <DecodeHuffmanPairs+0x116>
				*xy++ = x;
				*xy++ = y;
				nVals -= 2;
			}
		}
		bitsLeft += (cachedBits - padBits);
 800e76a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e76e:	1ad3      	subs	r3, r2, r3
 800e770:	683a      	ldr	r2, [r7, #0]
 800e772:	18d3      	adds	r3, r2, r3
 800e774:	603b      	str	r3, [r7, #0]
		return (startBits - bitsLeft);
 800e776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	e1c5      	b.n	800eb0a <DecodeHuffmanPairs+0x672>
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 800e77e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e782:	2b03      	cmp	r3, #3
 800e784:	d004      	beq.n	800e790 <DecodeHuffmanPairs+0x2f8>
 800e786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	f040 81bb 	bne.w	800eb06 <DecodeHuffmanPairs+0x66e>
		tCurr = tBase;
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	63bb      	str	r3, [r7, #56]	; 0x38
		padBits = 0;
 800e794:	f04f 0300 	mov.w	r3, #0
 800e798:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (nVals > 0) {
 800e79a:	e1a6      	b.n	800eaea <DecodeHuffmanPairs+0x652>
			/* refill cache - assumes cachedBits <= 16 */
			if (bitsLeft >= 16) {
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	2b0f      	cmp	r3, #15
 800e7a0:	dd26      	ble.n	800e7f0 <DecodeHuffmanPairs+0x358>
				/* load 2 new bytes into left-justified cache */
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e7a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7aa:	f1c3 0318 	rsb	r3, r3, #24
 800e7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e7b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7ba:	f103 0301 	add.w	r3, r3, #1
 800e7be:	65bb      	str	r3, [r7, #88]	; 0x58
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e7c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7c8:	f1c3 0310 	rsb	r3, r3, #16
 800e7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e7d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	637b      	str	r3, [r7, #52]	; 0x34
 800e7d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7d8:	f103 0301 	add.w	r3, r3, #1
 800e7dc:	65bb      	str	r3, [r7, #88]	; 0x58
				cachedBits += 16;
 800e7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7e0:	f103 0310 	add.w	r3, r3, #16
 800e7e4:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft -= 16;
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	f1a3 0310 	sub.w	r3, r3, #16
 800e7ec:	603b      	str	r3, [r7, #0]
				padBits = 11;
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 800e7ee:	e175      	b.n	800eadc <DecodeHuffmanPairs+0x644>
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
				cachedBits += 16;
				bitsLeft -= 16;
			} else {
				/* last time through, pad cache with zeros and drain cache */
				if (cachedBits + bitsLeft <= 0)	return -1;
 800e7f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	18d3      	adds	r3, r2, r3
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	dc02      	bgt.n	800e800 <DecodeHuffmanPairs+0x368>
 800e7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e7fe:	e184      	b.n	800eb0a <DecodeHuffmanPairs+0x672>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	dd0e      	ble.n	800e824 <DecodeHuffmanPairs+0x38c>
 800e806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	461a      	mov	r2, r3
 800e80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e80e:	f1c3 0318 	rsb	r3, r3, #24
 800e812:	fa02 f303 	lsl.w	r3, r2, r3
 800e816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e818:	4313      	orrs	r3, r2
 800e81a:	637b      	str	r3, [r7, #52]	; 0x34
 800e81c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e81e:	f103 0301 	add.w	r3, r3, #1
 800e822:	65bb      	str	r3, [r7, #88]	; 0x58
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	2b08      	cmp	r3, #8
 800e828:	dd0e      	ble.n	800e848 <DecodeHuffmanPairs+0x3b0>
 800e82a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e832:	f1c3 0310 	rsb	r3, r3, #16
 800e836:	fa02 f303 	lsl.w	r3, r2, r3
 800e83a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e83c:	4313      	orrs	r3, r2
 800e83e:	637b      	str	r3, [r7, #52]	; 0x34
 800e840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e842:	f103 0301 	add.w	r3, r3, #1
 800e846:	65bb      	str	r3, [r7, #88]	; 0x58
				cachedBits += bitsLeft;
 800e848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	18d3      	adds	r3, r2, r3
 800e84e:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft = 0;
 800e850:	f04f 0300 	mov.w	r3, #0
 800e854:	603b      	str	r3, [r7, #0]

				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e858:	f103 33ff 	add.w	r3, r3, #4294967295
 800e85c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e860:	fa42 f303 	asr.w	r3, r2, r3
 800e864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e866:	4013      	ands	r3, r2
 800e868:	637b      	str	r3, [r7, #52]	; 0x34
				padBits = 11;
 800e86a:	f04f 030b 	mov.w	r3, #11
 800e86e:	63fb      	str	r3, [r7, #60]	; 0x3c
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800e870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e874:	18d3      	adds	r3, r2, r3
 800e876:	643b      	str	r3, [r7, #64]	; 0x40
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 800e878:	e130      	b.n	800eadc <DecodeHuffmanPairs+0x644>
				maxBits = GetMaxbits(tCurr[0]);
 800e87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	f003 030f 	and.w	r3, r3, #15
 800e882:	623b      	str	r3, [r7, #32]
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 800e884:	6a3b      	ldr	r3, [r7, #32]
 800e886:	f1c3 0320 	rsb	r3, r3, #32
 800e88a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e88c:	fa22 f303 	lsr.w	r3, r2, r3
 800e890:	f103 0301 	add.w	r3, r3, #1
 800e894:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e89a:	18d3      	adds	r3, r2, r3
 800e89c:	881b      	ldrh	r3, [r3, #0]
 800e89e:	83fb      	strh	r3, [r7, #30]
				len = GetHLen(cw);
 800e8a0:	8bfb      	ldrh	r3, [r7, #30]
 800e8a2:	ea4f 3313 	mov.w	r3, r3, lsr #12
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	f003 030f 	and.w	r3, r3, #15
 800e8ac:	61bb      	str	r3, [r7, #24]
				if (!len) {
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10f      	bne.n	800e8d4 <DecodeHuffmanPairs+0x43c>
					cachedBits -= maxBits;
 800e8b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	643b      	str	r3, [r7, #64]	; 0x40
					cache <<= maxBits;
 800e8bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8be:	6a3b      	ldr	r3, [r7, #32]
 800e8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e8c4:	637b      	str	r3, [r7, #52]	; 0x34
					tCurr += cw;
 800e8c6:	8bfb      	ldrh	r3, [r7, #30]
 800e8c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e8cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8ce:	18d3      	adds	r3, r2, r3
 800e8d0:	63bb      	str	r3, [r7, #56]	; 0x38
					continue;
 800e8d2:	e103      	b.n	800eadc <DecodeHuffmanPairs+0x644>
				}
				cachedBits -= len;
 800e8d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	643b      	str	r3, [r7, #64]	; 0x40
				cache <<= len;
 800e8dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e8e4:	637b      	str	r3, [r7, #52]	; 0x34
			
				x = GetCWX(cw);
 800e8e6:	8bfb      	ldrh	r3, [r7, #30]
 800e8e8:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	f003 030f 	and.w	r3, r3, #15
 800e8f2:	64bb      	str	r3, [r7, #72]	; 0x48
				y = GetCWY(cw);
 800e8f4:	8bfb      	ldrh	r3, [r7, #30]
 800e8f6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	f003 030f 	and.w	r3, r3, #15
 800e900:	647b      	str	r3, [r7, #68]	; 0x44

				if (x == 15 && tabType == loopLinbits) {
 800e902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e904:	2b0f      	cmp	r3, #15
 800e906:	d157      	bne.n	800e9b8 <DecodeHuffmanPairs+0x520>
 800e908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e90c:	2b03      	cmp	r3, #3
 800e90e:	d153      	bne.n	800e9b8 <DecodeHuffmanPairs+0x520>
					minBits = linBits + 1 + (y ? 1 : 0);
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e912:	f103 0201 	add.w	r2, r3, #1
 800e916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e918:	2b00      	cmp	r3, #0
 800e91a:	bf0c      	ite	eq
 800e91c:	2300      	moveq	r3, #0
 800e91e:	2301      	movne	r3, #1
 800e920:	18d3      	adds	r3, r2, r3
 800e922:	617b      	str	r3, [r7, #20]
					if (cachedBits + bitsLeft < minBits)
 800e924:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	18d2      	adds	r2, r2, r3
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	da19      	bge.n	800e964 <DecodeHuffmanPairs+0x4cc>
						return -1;
 800e930:	f04f 33ff 	mov.w	r3, #4294967295
 800e934:	e0e9      	b.n	800eb0a <DecodeHuffmanPairs+0x672>
					while (cachedBits < minBits) {
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	461a      	mov	r2, r3
 800e93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e93e:	f1c3 0318 	rsb	r3, r3, #24
 800e942:	fa02 f303 	lsl.w	r3, r2, r3
 800e946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e948:	4313      	orrs	r3, r2
 800e94a:	637b      	str	r3, [r7, #52]	; 0x34
 800e94c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e94e:	f103 0301 	add.w	r3, r3, #1
 800e952:	65bb      	str	r3, [r7, #88]	; 0x58
						cachedBits += 8;
 800e954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e956:	f103 0308 	add.w	r3, r3, #8
 800e95a:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft -= 8;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	f1a3 0308 	sub.w	r3, r3, #8
 800e962:	603b      	str	r3, [r7, #0]

				if (x == 15 && tabType == loopLinbits) {
					minBits = linBits + 1 + (y ? 1 : 0);
					if (cachedBits + bitsLeft < minBits)
						return -1;
					while (cachedBits < minBits) {
 800e964:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	429a      	cmp	r2, r3
 800e96a:	dbe4      	blt.n	800e936 <DecodeHuffmanPairs+0x49e>
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
						cachedBits += 8;
						bitsLeft -= 8;
					}
					if (bitsLeft < 0) {
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	da10      	bge.n	800e994 <DecodeHuffmanPairs+0x4fc>
						cachedBits += bitsLeft;
 800e972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	18d3      	adds	r3, r2, r3
 800e978:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft = 0;
 800e97a:	f04f 0300 	mov.w	r3, #0
 800e97e:	603b      	str	r3, [r7, #0]
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e982:	f103 33ff 	add.w	r3, r3, #4294967295
 800e986:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e98a:	fa42 f303 	asr.w	r3, r2, r3
 800e98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e990:	4013      	ands	r3, r2
 800e992:	637b      	str	r3, [r7, #52]	; 0x34
					}
					x += (int)(cache >> (32 - linBits));
 800e994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e996:	f1c3 0320 	rsb	r3, r3, #32
 800e99a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e99c:	fa22 f303 	lsr.w	r3, r2, r3
 800e9a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9a2:	18d3      	adds	r3, r2, r3
 800e9a4:	64bb      	str	r3, [r7, #72]	; 0x48
					cachedBits -= linBits;
 800e9a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	643b      	str	r3, [r7, #64]	; 0x40
					cache <<= linBits;
 800e9ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e9b6:	637b      	str	r3, [r7, #52]	; 0x34
				}
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e9b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00d      	beq.n	800e9da <DecodeHuffmanPairs+0x542>
 800e9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9c0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800e9c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e9d0:	637b      	str	r3, [r7, #52]	; 0x34
 800e9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d4:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9d8:	643b      	str	r3, [r7, #64]	; 0x40

				if (y == 15 && tabType == loopLinbits) {
 800e9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9dc:	2b0f      	cmp	r3, #15
 800e9de:	d151      	bne.n	800ea84 <DecodeHuffmanPairs+0x5ec>
 800e9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9e4:	2b03      	cmp	r3, #3
 800e9e6:	d14d      	bne.n	800ea84 <DecodeHuffmanPairs+0x5ec>
					minBits = linBits + 1;
 800e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ea:	f103 0301 	add.w	r3, r3, #1
 800e9ee:	617b      	str	r3, [r7, #20]
					if (cachedBits + bitsLeft < minBits)
 800e9f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	18d2      	adds	r2, r2, r3
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	da19      	bge.n	800ea30 <DecodeHuffmanPairs+0x598>
						return -1;
 800e9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800ea00:	e083      	b.n	800eb0a <DecodeHuffmanPairs+0x672>
					while (cachedBits < minBits) {
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ea02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea0a:	f1c3 0318 	rsb	r3, r3, #24
 800ea0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea14:	4313      	orrs	r3, r2
 800ea16:	637b      	str	r3, [r7, #52]	; 0x34
 800ea18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea1a:	f103 0301 	add.w	r3, r3, #1
 800ea1e:	65bb      	str	r3, [r7, #88]	; 0x58
						cachedBits += 8;
 800ea20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea22:	f103 0308 	add.w	r3, r3, #8
 800ea26:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft -= 8;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	f1a3 0308 	sub.w	r3, r3, #8
 800ea2e:	603b      	str	r3, [r7, #0]

				if (y == 15 && tabType == loopLinbits) {
					minBits = linBits + 1;
					if (cachedBits + bitsLeft < minBits)
						return -1;
					while (cachedBits < minBits) {
 800ea30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	dbe4      	blt.n	800ea02 <DecodeHuffmanPairs+0x56a>
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
						cachedBits += 8;
						bitsLeft -= 8;
					}
					if (bitsLeft < 0) {
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	da10      	bge.n	800ea60 <DecodeHuffmanPairs+0x5c8>
						cachedBits += bitsLeft;
 800ea3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	18d3      	adds	r3, r2, r3
 800ea44:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft = 0;
 800ea46:	f04f 0300 	mov.w	r3, #0
 800ea4a:	603b      	str	r3, [r7, #0]
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ea4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ea56:	fa42 f303 	asr.w	r3, r2, r3
 800ea5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea5c:	4013      	ands	r3, r2
 800ea5e:	637b      	str	r3, [r7, #52]	; 0x34
					}
					y += (int)(cache >> (32 - linBits));
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	f1c3 0320 	rsb	r3, r3, #32
 800ea66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea68:	fa22 f303 	lsr.w	r3, r2, r3
 800ea6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea6e:	18d3      	adds	r3, r2, r3
 800ea70:	647b      	str	r3, [r7, #68]	; 0x44
					cachedBits -= linBits;
 800ea72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	643b      	str	r3, [r7, #64]	; 0x40
					cache <<= linBits;
 800ea7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea82:	637b      	str	r3, [r7, #52]	; 0x34
				}
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800ea84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00d      	beq.n	800eaa6 <DecodeHuffmanPairs+0x60e>
 800ea8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea8c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800ea90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea92:	4313      	orrs	r3, r2
 800ea94:	647b      	str	r3, [r7, #68]	; 0x44
 800ea96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ea9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaa0:	f103 33ff 	add.w	r3, r3, #4294967295
 800eaa4:	643b      	str	r3, [r7, #64]	; 0x40

				/* ran out of bits - should never have consumed padBits */
				if (cachedBits < padBits)
 800eaa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eaa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	da02      	bge.n	800eab4 <DecodeHuffmanPairs+0x61c>
					return -1;
 800eaae:	f04f 33ff 	mov.w	r3, #4294967295
 800eab2:	e02a      	b.n	800eb0a <DecodeHuffmanPairs+0x672>

				*xy++ = x;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f103 0304 	add.w	r3, r3, #4
 800eac0:	60fb      	str	r3, [r7, #12]
				*xy++ = y;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eac6:	601a      	str	r2, [r3, #0]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f103 0304 	add.w	r3, r3, #4
 800eace:	60fb      	str	r3, [r7, #12]
				nVals -= 2;
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	f1a3 0302 	sub.w	r3, r3, #2
 800ead6:	60bb      	str	r3, [r7, #8]
				tCurr = tBase;
 800ead8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eada:	63bb      	str	r3, [r7, #56]	; 0x38
				padBits = 11;
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	dd03      	ble.n	800eaea <DecodeHuffmanPairs+0x652>
 800eae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eae4:	2b0a      	cmp	r3, #10
 800eae6:	f73f aec8 	bgt.w	800e87a <DecodeHuffmanPairs+0x3e2>
		bitsLeft += (cachedBits - padBits);
		return (startBits - bitsLeft);
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
		tCurr = tBase;
		padBits = 0;
		while (nVals > 0) {
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f73f ae55 	bgt.w	800e79c <DecodeHuffmanPairs+0x304>
				*xy++ = y;
				nVals -= 2;
				tCurr = tBase;
			}
		}
		bitsLeft += (cachedBits - padBits);
 800eaf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eaf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	18d3      	adds	r3, r2, r3
 800eafc:	603b      	str	r3, [r7, #0]
		return (startBits - bitsLeft);
 800eafe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	1ad3      	subs	r3, r2, r3
 800eb04:	e001      	b.n	800eb0a <DecodeHuffmanPairs+0x672>
	}

	/* error in bitstream - trying to access unused Huffman table */
	return -1;
 800eb06:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f107 0754 	add.w	r7, r7, #84	; 0x54
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bc80      	pop	{r7}
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop

0800eb18 <DecodeHuffmanQuads>:
 *                of the quad word after which all samples are 0)
 * 
 * Notes:        si_huff.bit tests every vwxy output in both quad tables
 **************************************************************************************/
static int DecodeHuffmanQuads(int *vwxy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b091      	sub	sp, #68	; 0x44
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	603b      	str	r3, [r7, #0]
	int i, v, w, x, y;
	int len, maxBits, cachedBits, padBits;
	unsigned int cache;
	unsigned char cw, *tBase;

	if (bitsLeft <= 0)
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	dc02      	bgt.n	800eb32 <DecodeHuffmanQuads+0x1a>
		return 0;
 800eb2c:	f04f 0300 	mov.w	r3, #0
 800eb30:	e155      	b.n	800edde <DecodeHuffmanQuads+0x2c6>

	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 800eb32:	f241 130c 	movw	r3, #4364	; 0x110c
 800eb36:	f6c0 0303 	movt	r3, #2051	; 0x803
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb40:	461a      	mov	r2, r3
 800eb42:	f241 03bc 	movw	r3, #4284	; 0x10bc
 800eb46:	f6c0 0303 	movt	r3, #2051	; 0x803
 800eb4a:	18d3      	adds	r3, r2, r3
 800eb4c:	61fb      	str	r3, [r7, #28]
	maxBits = quadTabMaxBits[tabIdx];
 800eb4e:	f241 1314 	movw	r3, #4372	; 0x1114
 800eb52:	f6c0 0303 	movt	r3, #2051	; 0x803
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb5c:	61bb      	str	r3, [r7, #24]

	/* initially fill cache with any partial byte */
	cache = 0;
 800eb5e:	f04f 0300 	mov.w	r3, #0
 800eb62:	623b      	str	r3, [r7, #32]
	cachedBits = (8 - bitOffset) & 0x07;
 800eb64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb66:	f1c3 0300 	rsb	r3, r3, #0
 800eb6a:	f003 0307 	and.w	r3, r3, #7
 800eb6e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cachedBits)
 800eb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00c      	beq.n	800eb90 <DecodeHuffmanQuads+0x78>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800eb76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	f1c3 0320 	rsb	r3, r3, #32
 800eb82:	fa02 f303 	lsl.w	r3, r2, r3
 800eb86:	623b      	str	r3, [r7, #32]
 800eb88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb8a:	f103 0301 	add.w	r3, r3, #1
 800eb8e:	64bb      	str	r3, [r7, #72]	; 0x48
	bitsLeft -= cachedBits;
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb94:	1ad3      	subs	r3, r2, r3
 800eb96:	603b      	str	r3, [r7, #0]

	i = padBits = 0;
 800eb98:	f04f 0300 	mov.w	r3, #0
 800eb9c:	627b      	str	r3, [r7, #36]	; 0x24
 800eb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba0:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (i < (nVals - 3)) {
 800eba2:	e114      	b.n	800edce <DecodeHuffmanQuads+0x2b6>
		/* refill cache - assumes cachedBits <= 16 */
		if (bitsLeft >= 16) {
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b0f      	cmp	r3, #15
 800eba8:	dd26      	ble.n	800ebf8 <DecodeHuffmanQuads+0xe0>
			/* load 2 new bytes into left-justified cache */
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ebaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	f1c3 0318 	rsb	r3, r3, #24
 800ebb6:	fa02 f303 	lsl.w	r3, r2, r3
 800ebba:	6a3a      	ldr	r2, [r7, #32]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	623b      	str	r3, [r7, #32]
 800ebc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebc2:	f103 0301 	add.w	r3, r3, #1
 800ebc6:	64bb      	str	r3, [r7, #72]	; 0x48
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ebc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	461a      	mov	r2, r3
 800ebce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd0:	f1c3 0310 	rsb	r3, r3, #16
 800ebd4:	fa02 f303 	lsl.w	r3, r2, r3
 800ebd8:	6a3a      	ldr	r2, [r7, #32]
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	623b      	str	r3, [r7, #32]
 800ebde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebe0:	f103 0301 	add.w	r3, r3, #1
 800ebe4:	64bb      	str	r3, [r7, #72]	; 0x48
			cachedBits += 16;
 800ebe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe8:	f103 0310 	add.w	r3, r3, #16
 800ebec:	62bb      	str	r3, [r7, #40]	; 0x28
			bitsLeft -= 16;
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	f1a3 0310 	sub.w	r3, r3, #16
 800ebf4:	603b      	str	r3, [r7, #0]
			padBits = 10;
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
		}

		/* largest maxBits = 6, plus 4 for sign bits, so make sure cache has at least 10 bits */
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800ebf6:	e0e0      	b.n	800edba <DecodeHuffmanQuads+0x2a2>
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
			cachedBits += 16;
			bitsLeft -= 16;
		} else {
			/* last time through, pad cache with zeros and drain cache */
			if (cachedBits + bitsLeft <= 0) return i;
 800ebf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	18d3      	adds	r3, r2, r3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	dc01      	bgt.n	800ec06 <DecodeHuffmanQuads+0xee>
 800ec02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec04:	e0eb      	b.n	800edde <DecodeHuffmanQuads+0x2c6>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	dd0e      	ble.n	800ec2a <DecodeHuffmanQuads+0x112>
 800ec0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	461a      	mov	r2, r3
 800ec12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec14:	f1c3 0318 	rsb	r3, r3, #24
 800ec18:	fa02 f303 	lsl.w	r3, r2, r3
 800ec1c:	6a3a      	ldr	r2, [r7, #32]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	623b      	str	r3, [r7, #32]
 800ec22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec24:	f103 0301 	add.w	r3, r3, #1
 800ec28:	64bb      	str	r3, [r7, #72]	; 0x48
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	2b08      	cmp	r3, #8
 800ec2e:	dd0e      	ble.n	800ec4e <DecodeHuffmanQuads+0x136>
 800ec30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	461a      	mov	r2, r3
 800ec36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec38:	f1c3 0310 	rsb	r3, r3, #16
 800ec3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec40:	6a3a      	ldr	r2, [r7, #32]
 800ec42:	4313      	orrs	r3, r2
 800ec44:	623b      	str	r3, [r7, #32]
 800ec46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec48:	f103 0301 	add.w	r3, r3, #1
 800ec4c:	64bb      	str	r3, [r7, #72]	; 0x48
			cachedBits += bitsLeft;
 800ec4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	18d3      	adds	r3, r2, r3
 800ec54:	62bb      	str	r3, [r7, #40]	; 0x28
			bitsLeft = 0;
 800ec56:	f04f 0300 	mov.w	r3, #0
 800ec5a:	603b      	str	r3, [r7, #0]

			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ec5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec66:	fa42 f303 	asr.w	r3, r2, r3
 800ec6a:	6a3a      	ldr	r2, [r7, #32]
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	623b      	str	r3, [r7, #32]
			padBits = 10;
 800ec70:	f04f 030a 	mov.w	r3, #10
 800ec74:	627b      	str	r3, [r7, #36]	; 0x24
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800ec76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7a:	18d3      	adds	r3, r2, r3
 800ec7c:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		/* largest maxBits = 6, plus 4 for sign bits, so make sure cache has at least 10 bits */
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800ec7e:	e09c      	b.n	800edba <DecodeHuffmanQuads+0x2a2>
			cw = tBase[cache >> (32 - maxBits)];
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	f1c3 0320 	rsb	r3, r3, #32
 800ec86:	6a3a      	ldr	r2, [r7, #32]
 800ec88:	fa22 f303 	lsr.w	r3, r2, r3
 800ec8c:	69fa      	ldr	r2, [r7, #28]
 800ec8e:	18d3      	adds	r3, r2, r3
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	75fb      	strb	r3, [r7, #23]
			len = GetHLenQ(cw);
 800ec94:	7dfb      	ldrb	r3, [r7, #23]
 800ec96:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	f003 030f 	and.w	r3, r3, #15
 800eca0:	613b      	str	r3, [r7, #16]
			cachedBits -= len;
 800eca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	62bb      	str	r3, [r7, #40]	; 0x28
			cache <<= len;
 800ecaa:	6a3a      	ldr	r2, [r7, #32]
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	fa02 f303 	lsl.w	r3, r2, r3
 800ecb2:	623b      	str	r3, [r7, #32]

			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800ecb4:	7dfb      	ldrb	r3, [r7, #23]
 800ecb6:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	f003 0301 	and.w	r3, r3, #1
 800ecc0:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00d      	beq.n	800ece4 <DecodeHuffmanQuads+0x1cc>
 800ecc8:	6a3b      	ldr	r3, [r7, #32]
 800ecca:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800ecce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ecda:	623b      	str	r3, [r7, #32]
 800ecdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecde:	f103 33ff 	add.w	r3, r3, #4294967295
 800ece2:	62bb      	str	r3, [r7, #40]	; 0x28
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 800ece4:	7dfb      	ldrb	r3, [r7, #23]
 800ece6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	f003 0301 	and.w	r3, r3, #1
 800ecf0:	637b      	str	r3, [r7, #52]	; 0x34
 800ecf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00d      	beq.n	800ed14 <DecodeHuffmanQuads+0x1fc>
 800ecf8:	6a3b      	ldr	r3, [r7, #32]
 800ecfa:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800ecfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed00:	4313      	orrs	r3, r2
 800ed02:	637b      	str	r3, [r7, #52]	; 0x34
 800ed04:	6a3b      	ldr	r3, [r7, #32]
 800ed06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed0a:	623b      	str	r3, [r7, #32]
 800ed0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed12:	62bb      	str	r3, [r7, #40]	; 0x28
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800ed14:	7dfb      	ldrb	r3, [r7, #23]
 800ed16:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	f003 0301 	and.w	r3, r3, #1
 800ed20:	633b      	str	r3, [r7, #48]	; 0x30
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00d      	beq.n	800ed44 <DecodeHuffmanQuads+0x22c>
 800ed28:	6a3b      	ldr	r3, [r7, #32]
 800ed2a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed30:	4313      	orrs	r3, r2
 800ed32:	633b      	str	r3, [r7, #48]	; 0x30
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed3a:	623b      	str	r3, [r7, #32]
 800ed3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed42:	62bb      	str	r3, [r7, #40]	; 0x28
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800ed44:	7dfb      	ldrb	r3, [r7, #23]
 800ed46:	f003 0301 	and.w	r3, r3, #1
 800ed4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d00d      	beq.n	800ed6e <DecodeHuffmanQuads+0x256>
 800ed52:	6a3b      	ldr	r3, [r7, #32]
 800ed54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800ed58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed5e:	6a3b      	ldr	r3, [r7, #32]
 800ed60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed64:	623b      	str	r3, [r7, #32]
 800ed66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed68:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* ran out of bits - okay (means we're done) */
			if (cachedBits < padBits)
 800ed6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed72:	429a      	cmp	r2, r3
 800ed74:	da01      	bge.n	800ed7a <DecodeHuffmanQuads+0x262>
				return i;
 800ed76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed78:	e031      	b.n	800edde <DecodeHuffmanQuads+0x2c6>

			*vwxy++ = v;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed7e:	601a      	str	r2, [r3, #0]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f103 0304 	add.w	r3, r3, #4
 800ed86:	60fb      	str	r3, [r7, #12]
			*vwxy++ = w;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed8c:	601a      	str	r2, [r3, #0]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f103 0304 	add.w	r3, r3, #4
 800ed94:	60fb      	str	r3, [r7, #12]
			*vwxy++ = x;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f103 0304 	add.w	r3, r3, #4
 800eda2:	60fb      	str	r3, [r7, #12]
			*vwxy++ = y;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f103 0304 	add.w	r3, r3, #4
 800edb0:	60fb      	str	r3, [r7, #12]
			i += 4;
 800edb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb4:	f103 0304 	add.w	r3, r3, #4
 800edb8:	63fb      	str	r3, [r7, #60]	; 0x3c
			padBits = 10;
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
		}

		/* largest maxBits = 6, plus 4 for sign bits, so make sure cache has at least 10 bits */
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	f1a3 0203 	sub.w	r2, r3, #3
 800edc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc2:	429a      	cmp	r2, r3
 800edc4:	dd03      	ble.n	800edce <DecodeHuffmanQuads+0x2b6>
 800edc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc8:	2b09      	cmp	r3, #9
 800edca:	f73f af59 	bgt.w	800ec80 <DecodeHuffmanQuads+0x168>
	if (cachedBits)
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
	bitsLeft -= cachedBits;

	i = padBits = 0;
	while (i < (nVals - 3)) {
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	f1a3 0203 	sub.w	r2, r3, #3
 800edd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd6:	429a      	cmp	r2, r3
 800edd8:	f73f aee4 	bgt.w	800eba4 <DecodeHuffmanQuads+0x8c>
			i += 4;
		}
	}

	/* decoded max number of quad values */
	return i;
 800eddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800edde:	4618      	mov	r0, r3
 800ede0:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bc80      	pop	{r7}
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop

0800edec <xmp3_DecodeHuffman>:
 *                byte located at buf + offset)
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 800edec:	b5b0      	push	{r4, r5, r7, lr}
 800edee:	b096      	sub	sp, #88	; 0x58
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
 800edf8:	603b      	str	r3, [r7, #0]
	int r1Start, r2Start, rEnd[4];	/* region boundaries */
	int i, w, bitsUsed, bitsLeft;
	unsigned char *startBuf = buf;
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	SideInfoSub *sis;
	ScaleFactorInfo *sfi;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00f      	beq.n	800ee24 <xmp3_DecodeHuffman+0x38>
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00b      	beq.n	800ee24 <xmp3_DecodeHuffman+0x38>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d007      	beq.n	800ee24 <xmp3_DecodeHuffman+0x38>
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	689b      	ldr	r3, [r3, #8]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d003      	beq.n	800ee24 <xmp3_DecodeHuffman+0x38>
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d102      	bne.n	800ee2a <xmp3_DecodeHuffman+0x3e>
		return -1;
 800ee24:	f04f 33ff 	mov.w	r3, #4294967295
 800ee28:	e175      	b.n	800f116 <xmp3_DecodeHuffman+0x32a>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	63bb      	str	r3, [r7, #56]	; 0x38
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	637b      	str	r3, [r7, #52]	; 0x34
	sis = &si->sis[gr][ch];
 800ee36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee38:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ee3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee3e:	4613      	mov	r3, r2
 800ee40:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ee44:	189b      	adds	r3, r3, r2
 800ee46:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee4e:	4613      	mov	r3, r2
 800ee50:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ee54:	189b      	adds	r3, r3, r2
 800ee56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ee5a:	18c3      	adds	r3, r0, r3
 800ee5c:	18cb      	adds	r3, r1, r3
 800ee5e:	633b      	str	r3, [r7, #48]	; 0x30
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	62fb      	str	r3, [r7, #44]	; 0x2c
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	68db      	ldr	r3, [r3, #12]
 800ee6a:	62bb      	str	r3, [r7, #40]	; 0x28

	if (huffBlockBits < 0)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	da02      	bge.n	800ee78 <xmp3_DecodeHuffman+0x8c>
		return -1;
 800ee72:	f04f 33ff 	mov.w	r3, #4294967295
 800ee76:	e14e      	b.n	800f116 <xmp3_DecodeHuffman+0x32a>

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800ee78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7a:	691b      	ldr	r3, [r3, #16]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d049      	beq.n	800ef14 <xmp3_DecodeHuffman+0x128>
 800ee80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee82:	695b      	ldr	r3, [r3, #20]
 800ee84:	2b02      	cmp	r3, #2
 800ee86:	d145      	bne.n	800ef14 <xmp3_DecodeHuffman+0x128>
		if (sis->mixedBlock == 0) {
 800ee88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8a:	699b      	ldr	r3, [r3, #24]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d11b      	bne.n	800eec8 <xmp3_DecodeHuffman+0xdc>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800ee90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee98:	f103 0201 	add.w	r2, r3, #1
 800ee9c:	f245 5356 	movw	r3, #21846	; 0x5556
 800eea0:	f2c5 5355 	movt	r3, #21845	; 0x5555
 800eea4:	fb83 c002 	smull	ip, r0, r3, r2
 800eea8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800eeac:	1ac3      	subs	r3, r0, r3
 800eeae:	f103 0314 	add.w	r3, r3, #20
 800eeb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eeb6:	18cb      	adds	r3, r1, r3
 800eeb8:	88db      	ldrh	r3, [r3, #6]
 800eeba:	b21a      	sxth	r2, r3
 800eebc:	4613      	mov	r3, r2
 800eebe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eec2:	189b      	adds	r3, r3, r2
 800eec4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eec6:	e021      	b.n	800ef0c <xmp3_DecodeHuffman+0x120>
		} else {
			if (fh->ver == MPEG1) {
 800eec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10a      	bne.n	800eee6 <xmp3_DecodeHuffman+0xfa>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800eed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eed6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eed8:	f102 0201 	add.w	r2, r2, #1
 800eedc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800eee0:	b21b      	sxth	r3, r3
 800eee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eee4:	e012      	b.n	800ef0c <xmp3_DecodeHuffman+0x120>
			} else {
				/* see MPEG2 spec for explanation */
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 800eee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eeec:	b21a      	sxth	r2, r3
 800eeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eef2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800eef4:	b21b      	sxth	r3, r3
 800eef6:	1ad3      	subs	r3, r2, r3
 800eef8:	627b      	str	r3, [r7, #36]	; 0x24
				r1Start = fh->sfBand->l[6] + 2*w;
 800eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eefe:	899b      	ldrh	r3, [r3, #12]
 800ef00:	b21a      	sxth	r2, r3
 800ef02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef08:	18d3      	adds	r3, r2, r3
 800ef0a:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800ef0c:	f44f 7310 	mov.w	r3, #576	; 0x240
 800ef10:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef12:	e018      	b.n	800ef46 <xmp3_DecodeHuffman+0x15a>
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800ef14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ef1c:	f102 0201 	add.w	r2, r2, #1
 800ef20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ef24:	b21b      	sxth	r3, r3
 800ef26:	64fb      	str	r3, [r7, #76]	; 0x4c
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800ef28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ef30:	f102 0101 	add.w	r1, r2, #1
 800ef34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ef38:	188a      	adds	r2, r1, r2
 800ef3a:	f102 0201 	add.w	r2, r2, #1
 800ef3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ef42:	b21b      	sxth	r3, r3
 800ef44:	64bb      	str	r3, [r7, #72]	; 0x48
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800ef46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef4e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ef52:	bfa8      	it	ge
 800ef54:	f44f 7310 	movge.w	r3, #576	; 0x240
 800ef58:	61fb      	str	r3, [r7, #28]
	rEnd[2] = MIN(r2Start, rEnd[3]);
 800ef5a:	69fa      	ldr	r2, [r7, #28]
 800ef5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	bfb8      	it	lt
 800ef62:	4613      	movlt	r3, r2
 800ef64:	61bb      	str	r3, [r7, #24]
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800ef66:	69fa      	ldr	r2, [r7, #28]
 800ef68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	bfb8      	it	lt
 800ef6e:	4613      	movlt	r3, r2
 800ef70:	617b      	str	r3, [r7, #20]
	rEnd[0] = 0;
 800ef72:	f04f 0300 	mov.w	r3, #0
 800ef76:	613b      	str	r3, [r7, #16]

	/* rounds up to first all-zero pair (we don't check last pair for (x,y) == (non-zero, zero)) */
	hi->nonZeroBound[ch] = rEnd[3];
 800ef78:	69f9      	ldr	r1, [r7, #28]
 800ef7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef7e:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 800ef82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	643b      	str	r3, [r7, #64]	; 0x40
	for (i = 0; i < 3; i++) {
 800ef8a:	f04f 0300 	mov.w	r3, #0
 800ef8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ef90:	e05f      	b.n	800f052 <xmp3_DecodeHuffman+0x266>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800ef92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef96:	4613      	mov	r3, r2
 800ef98:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ef9c:	189b      	adds	r3, r3, r2
 800ef9e:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800efa2:	461a      	mov	r2, r3
 800efa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efa6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800efaa:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800efae:	18c3      	adds	r3, r0, r3
 800efb0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800efb4:	18d3      	adds	r3, r2, r3
 800efb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800efba:	18c9      	adds	r1, r1, r3
 800efbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efbe:	f103 0301 	add.w	r3, r3, #1
 800efc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800efc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800efca:	18d3      	adds	r3, r2, r3
 800efcc:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800efd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800efd6:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 800efda:	4463      	add	r3, ip
 800efdc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800efe0:	1ad2      	subs	r2, r2, r3
 800efe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efe6:	f103 0306 	add.w	r3, r3, #6
 800efea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800efee:	18c3      	adds	r3, r0, r3
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	6800      	ldr	r0, [r0, #0]
 800eff6:	68bc      	ldr	r4, [r7, #8]
 800eff8:	9400      	str	r4, [sp, #0]
 800effa:	9001      	str	r0, [sp, #4]
 800effc:	4608      	mov	r0, r1
 800effe:	4611      	mov	r1, r2
 800f000:	461a      	mov	r2, r3
 800f002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f004:	f7ff fa48 	bl	800e498 <DecodeHuffmanPairs>
 800f008:	4603      	mov	r3, r0
 800f00a:	623b      	str	r3, [r7, #32]
		if (bitsUsed < 0 || bitsUsed > bitsLeft)	/* error - overran end of bitstream */
 800f00c:	6a3b      	ldr	r3, [r7, #32]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	db03      	blt.n	800f01a <xmp3_DecodeHuffman+0x22e>
 800f012:	6a3a      	ldr	r2, [r7, #32]
 800f014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f016:	429a      	cmp	r2, r3
 800f018:	dd02      	ble.n	800f020 <xmp3_DecodeHuffman+0x234>
			return -1;
 800f01a:	f04f 33ff 	mov.w	r3, #4294967295
 800f01e:	e07a      	b.n	800f116 <xmp3_DecodeHuffman+0x32a>

		/* update bitstream position */
		buf += (bitsUsed + *bitOffset) >> 3;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	18d3      	adds	r3, r2, r3
 800f028:	ea4f 03e3 	mov.w	r3, r3, asr #3
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	18d3      	adds	r3, r2, r3
 800f030:	60bb      	str	r3, [r7, #8]
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	18d3      	adds	r3, r2, r3
 800f03a:	f003 0207 	and.w	r2, r3, #7
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	601a      	str	r2, [r3, #0]
		bitsLeft -= bitsUsed;
 800f042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f044:	6a3b      	ldr	r3, [r7, #32]
 800f046:	1ad3      	subs	r3, r2, r3
 800f048:	643b      	str	r3, [r7, #64]	; 0x40
	/* rounds up to first all-zero pair (we don't check last pair for (x,y) == (non-zero, zero)) */
	hi->nonZeroBound[ch] = rEnd[3];

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
	for (i = 0; i < 3; i++) {
 800f04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f04c:	f103 0301 	add.w	r3, r3, #1
 800f050:	647b      	str	r3, [r7, #68]	; 0x44
 800f052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f054:	2b02      	cmp	r3, #2
 800f056:	dd9c      	ble.n	800ef92 <xmp3_DecodeHuffman+0x1a6>
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
		bitsLeft -= bitsUsed;
	}

	/* decode Huffman quads (if any) */
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800f058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f05c:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 800f060:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f066:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f068:	4613      	mov	r3, r2
 800f06a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f06e:	189b      	adds	r3, r3, r2
 800f070:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800f074:	461a      	mov	r2, r3
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	18d3      	adds	r3, r2, r3
 800f07a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f07e:	18c9      	adds	r1, r1, r3
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	f5c3 7210 	rsb	r2, r3, #576	; 0x240
 800f086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	6800      	ldr	r0, [r0, #0]
 800f08e:	68bd      	ldr	r5, [r7, #8]
 800f090:	9500      	str	r5, [sp, #0]
 800f092:	9001      	str	r0, [sp, #4]
 800f094:	4608      	mov	r0, r1
 800f096:	4611      	mov	r1, r2
 800f098:	461a      	mov	r2, r3
 800f09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f09c:	f7ff fd3c 	bl	800eb18 <DecodeHuffmanQuads>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	18e1      	adds	r1, r4, r3
 800f0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f0a8:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 800f0ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f0b4:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 800f0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0bc:	647b      	str	r3, [r7, #68]	; 0x44
 800f0be:	e011      	b.n	800f0e4 <xmp3_DecodeHuffman+0x2f8>
		hi->huffDecBuf[ch][i] = 0;
 800f0c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f0ca:	189b      	adds	r3, r3, r2
 800f0cc:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800f0d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0d2:	189b      	adds	r3, r3, r2
 800f0d4:	f04f 0200 	mov.w	r2, #0
 800f0d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/* decode Huffman quads (if any) */
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800f0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0de:	f103 0301 	add.w	r3, r3, #1
 800f0e2:	647b      	str	r3, [r7, #68]	; 0x44
 800f0e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0e6:	f240 233f 	movw	r3, #575	; 0x23f
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	dde8      	ble.n	800f0c0 <xmp3_DecodeHuffman+0x2d4>
		hi->huffDecBuf[ch][i] = 0;
	
	/* If bits used for 576 samples < huffBlockBits, then the extras are considered
	 *  to be stuffing bits (throw away, but need to return correct bitstream position) 
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0f4:	18d3      	adds	r3, r2, r3
 800f0f6:	ea4f 03e3 	mov.w	r3, r3, asr #3
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	18d3      	adds	r3, r2, r3
 800f0fe:	60bb      	str	r3, [r7, #8]
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f106:	18d3      	adds	r3, r2, r3
 800f108:	f003 0207 	and.w	r2, r3, #7
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	601a      	str	r2, [r3, #0]
	
	return (buf - startBuf);
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f114:	1ad3      	subs	r3, r2, r3
}
 800f116:	4618      	mov	r0, r3
 800f118:	f107 0750 	add.w	r7, r7, #80	; 0x50
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bdb0      	pop	{r4, r5, r7, pc}

0800f120 <MULSHIFT32>:


#if defined(__GNUC__) && defined(__arm__)

static __inline__ int MULSHIFT32(int x, int y)
{
 800f120:	b490      	push	{r4, r7}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
int zlow;
__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	fb82 4303 	smull	r4, r3, r2, r3
 800f132:	60fc      	str	r4, [r7, #12]
 800f134:	603b      	str	r3, [r7, #0]
return y;
 800f136:	683b      	ldr	r3, [r7, #0]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	f107 0710 	add.w	r7, r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bc90      	pop	{r4, r7}
 800f142:	4770      	bx	lr

0800f144 <FASTABS>:

	return (short)x;
}

static __inline int FASTABS(int x)
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
int sign;

sign = x >> (sizeof(int) * 8 - 1);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800f152:	60fb      	str	r3, [r7, #12]
x ^= sign;
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	4053      	eors	r3, r2
 800f15a:	607b      	str	r3, [r7, #4]
x -= sign;
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	607b      	str	r3, [r7, #4]

return x;
 800f164:	687b      	ldr	r3, [r7, #4]
}
 800f166:	4618      	mov	r0, r3
 800f168:	f107 0714 	add.w	r7, r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bc80      	pop	{r7}
 800f170:	4770      	bx	lr
 800f172:	bf00      	nop

0800f174 <CLZ>:

static __inline int CLZ(int x)
{
 800f174:	b490      	push	{r4, r7}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
while (!(x & 0x80000000)) {
numZeros++;
x <
}*/

__asm__ ("clz %0, %1" : "=r" (numZeros) : "r" (x) : "cc");
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	fab3 f483 	clz	r4, r3
 800f182:	60fc      	str	r4, [r7, #12]

return numZeros;
 800f184:	68fb      	ldr	r3, [r7, #12]
}
 800f186:	4618      	mov	r0, r3
 800f188:	f107 0710 	add.w	r7, r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bc90      	pop	{r4, r7}
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop

0800f194 <AntiAlias>:
 *              assume at least 1 guard bit in x[] to avoid overflow
 *                (should be guaranteed from dequant, and max gain from stproc * max 
 *                 gain from AntiAlias < 2.0)
 **************************************************************************************/
static void AntiAlias(int *x, int nBfly)
{
 800f194:	b5b0      	push	{r4, r5, r7, lr}
 800f196:	b088      	sub	sp, #32
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
	int k, a0, b0, c0, c1;
	const int *c;

	/* csa = Q31 */
	for (k = nBfly; k > 0; k--) {
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	61fb      	str	r3, [r7, #28]
 800f1a2:	e1c2      	b.n	800f52a <AntiAlias+0x396>
		c = csa[0];
 800f1a4:	f241 539c 	movw	r3, #5532	; 0x159c
 800f1a8:	f6c0 0303 	movt	r3, #2051	; 0x803
 800f1ac:	61bb      	str	r3, [r7, #24]
		x += 18;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800f1b4:	607b      	str	r3, [r7, #4]

		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f1bc:	617b      	str	r3, [r7, #20]
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	613b      	str	r3, [r7, #16]
 800f1c4:	69bb      	ldr	r3, [r7, #24]
 800f1c6:	f103 0304 	add.w	r3, r3, #4
 800f1ca:	61bb      	str	r3, [r7, #24]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	60fb      	str	r3, [r7, #12]
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	60bb      	str	r3, [r7, #8]
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	f103 0304 	add.w	r3, r3, #4
 800f1de:	61bb      	str	r3, [r7, #24]
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f1a3 0404 	sub.w	r4, r3, #4
 800f1e6:	6938      	ldr	r0, [r7, #16]
 800f1e8:	6979      	ldr	r1, [r7, #20]
 800f1ea:	f7ff ff99 	bl	800f120 <MULSHIFT32>
 800f1ee:	4605      	mov	r5, r0
 800f1f0:	68b8      	ldr	r0, [r7, #8]
 800f1f2:	68f9      	ldr	r1, [r7, #12]
 800f1f4:	f7ff ff94 	bl	800f120 <MULSHIFT32>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	1aeb      	subs	r3, r5, r3
 800f1fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f200:	6023      	str	r3, [r4, #0]
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f202:	6938      	ldr	r0, [r7, #16]
 800f204:	68f9      	ldr	r1, [r7, #12]
 800f206:	f7ff ff8b 	bl	800f120 <MULSHIFT32>
 800f20a:	4604      	mov	r4, r0
 800f20c:	68b8      	ldr	r0, [r7, #8]
 800f20e:	6979      	ldr	r1, [r7, #20]
 800f210:	f7ff ff86 	bl	800f120 <MULSHIFT32>
 800f214:	4603      	mov	r3, r0
 800f216:	18e3      	adds	r3, r4, r3
 800f218:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	601a      	str	r2, [r3, #0]

		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800f226:	617b      	str	r3, [r7, #20]
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	613b      	str	r3, [r7, #16]
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	f103 0304 	add.w	r3, r3, #4
 800f234:	61bb      	str	r3, [r7, #24]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	60fb      	str	r3, [r7, #12]
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	60bb      	str	r3, [r7, #8]
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	f103 0304 	add.w	r3, r3, #4
 800f248:	61bb      	str	r3, [r7, #24]
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f1a3 0408 	sub.w	r4, r3, #8
 800f250:	6938      	ldr	r0, [r7, #16]
 800f252:	6979      	ldr	r1, [r7, #20]
 800f254:	f7ff ff64 	bl	800f120 <MULSHIFT32>
 800f258:	4605      	mov	r5, r0
 800f25a:	68b8      	ldr	r0, [r7, #8]
 800f25c:	68f9      	ldr	r1, [r7, #12]
 800f25e:	f7ff ff5f 	bl	800f120 <MULSHIFT32>
 800f262:	4603      	mov	r3, r0
 800f264:	1aeb      	subs	r3, r5, r3
 800f266:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f26a:	6023      	str	r3, [r4, #0]
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f103 0404 	add.w	r4, r3, #4
 800f272:	6938      	ldr	r0, [r7, #16]
 800f274:	68f9      	ldr	r1, [r7, #12]
 800f276:	f7ff ff53 	bl	800f120 <MULSHIFT32>
 800f27a:	4605      	mov	r5, r0
 800f27c:	68b8      	ldr	r0, [r7, #8]
 800f27e:	6979      	ldr	r1, [r7, #20]
 800f280:	f7ff ff4e 	bl	800f120 <MULSHIFT32>
 800f284:	4603      	mov	r3, r0
 800f286:	18eb      	adds	r3, r5, r3
 800f288:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f28c:	6023      	str	r3, [r4, #0]
		
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800f294:	617b      	str	r3, [r7, #20]
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	613b      	str	r3, [r7, #16]
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	f103 0304 	add.w	r3, r3, #4
 800f2a2:	61bb      	str	r3, [r7, #24]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	60fb      	str	r3, [r7, #12]
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	60bb      	str	r3, [r7, #8]
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	f103 0304 	add.w	r3, r3, #4
 800f2b6:	61bb      	str	r3, [r7, #24]
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f1a3 040c 	sub.w	r4, r3, #12
 800f2be:	6938      	ldr	r0, [r7, #16]
 800f2c0:	6979      	ldr	r1, [r7, #20]
 800f2c2:	f7ff ff2d 	bl	800f120 <MULSHIFT32>
 800f2c6:	4605      	mov	r5, r0
 800f2c8:	68b8      	ldr	r0, [r7, #8]
 800f2ca:	68f9      	ldr	r1, [r7, #12]
 800f2cc:	f7ff ff28 	bl	800f120 <MULSHIFT32>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	1aeb      	subs	r3, r5, r3
 800f2d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2d8:	6023      	str	r3, [r4, #0]
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f103 0408 	add.w	r4, r3, #8
 800f2e0:	6938      	ldr	r0, [r7, #16]
 800f2e2:	68f9      	ldr	r1, [r7, #12]
 800f2e4:	f7ff ff1c 	bl	800f120 <MULSHIFT32>
 800f2e8:	4605      	mov	r5, r0
 800f2ea:	68b8      	ldr	r0, [r7, #8]
 800f2ec:	6979      	ldr	r1, [r7, #20]
 800f2ee:	f7ff ff17 	bl	800f120 <MULSHIFT32>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	18eb      	adds	r3, r5, r3
 800f2f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2fa:	6023      	str	r3, [r4, #0]

		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800f302:	617b      	str	r3, [r7, #20]
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	613b      	str	r3, [r7, #16]
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	f103 0304 	add.w	r3, r3, #4
 800f310:	61bb      	str	r3, [r7, #24]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	60fb      	str	r3, [r7, #12]
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	60bb      	str	r3, [r7, #8]
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	f103 0304 	add.w	r3, r3, #4
 800f324:	61bb      	str	r3, [r7, #24]
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f1a3 0410 	sub.w	r4, r3, #16
 800f32c:	6938      	ldr	r0, [r7, #16]
 800f32e:	6979      	ldr	r1, [r7, #20]
 800f330:	f7ff fef6 	bl	800f120 <MULSHIFT32>
 800f334:	4605      	mov	r5, r0
 800f336:	68b8      	ldr	r0, [r7, #8]
 800f338:	68f9      	ldr	r1, [r7, #12]
 800f33a:	f7ff fef1 	bl	800f120 <MULSHIFT32>
 800f33e:	4603      	mov	r3, r0
 800f340:	1aeb      	subs	r3, r5, r3
 800f342:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f346:	6023      	str	r3, [r4, #0]
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f103 040c 	add.w	r4, r3, #12
 800f34e:	6938      	ldr	r0, [r7, #16]
 800f350:	68f9      	ldr	r1, [r7, #12]
 800f352:	f7ff fee5 	bl	800f120 <MULSHIFT32>
 800f356:	4605      	mov	r5, r0
 800f358:	68b8      	ldr	r0, [r7, #8]
 800f35a:	6979      	ldr	r1, [r7, #20]
 800f35c:	f7ff fee0 	bl	800f120 <MULSHIFT32>
 800f360:	4603      	mov	r3, r0
 800f362:	18eb      	adds	r3, r5, r3
 800f364:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f368:	6023      	str	r3, [r4, #0]

		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800f370:	617b      	str	r3, [r7, #20]
 800f372:	69bb      	ldr	r3, [r7, #24]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	613b      	str	r3, [r7, #16]
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	f103 0304 	add.w	r3, r3, #4
 800f37e:	61bb      	str	r3, [r7, #24]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	60fb      	str	r3, [r7, #12]
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	60bb      	str	r3, [r7, #8]
 800f38c:	69bb      	ldr	r3, [r7, #24]
 800f38e:	f103 0304 	add.w	r3, r3, #4
 800f392:	61bb      	str	r3, [r7, #24]
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f1a3 0414 	sub.w	r4, r3, #20
 800f39a:	6938      	ldr	r0, [r7, #16]
 800f39c:	6979      	ldr	r1, [r7, #20]
 800f39e:	f7ff febf 	bl	800f120 <MULSHIFT32>
 800f3a2:	4605      	mov	r5, r0
 800f3a4:	68b8      	ldr	r0, [r7, #8]
 800f3a6:	68f9      	ldr	r1, [r7, #12]
 800f3a8:	f7ff feba 	bl	800f120 <MULSHIFT32>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	1aeb      	subs	r3, r5, r3
 800f3b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f3b4:	6023      	str	r3, [r4, #0]
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f103 0410 	add.w	r4, r3, #16
 800f3bc:	6938      	ldr	r0, [r7, #16]
 800f3be:	68f9      	ldr	r1, [r7, #12]
 800f3c0:	f7ff feae 	bl	800f120 <MULSHIFT32>
 800f3c4:	4605      	mov	r5, r0
 800f3c6:	68b8      	ldr	r0, [r7, #8]
 800f3c8:	6979      	ldr	r1, [r7, #20]
 800f3ca:	f7ff fea9 	bl	800f120 <MULSHIFT32>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	18eb      	adds	r3, r5, r3
 800f3d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f3d6:	6023      	str	r3, [r4, #0]

		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	613b      	str	r3, [r7, #16]
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	f103 0304 	add.w	r3, r3, #4
 800f3ec:	61bb      	str	r3, [r7, #24]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	60fb      	str	r3, [r7, #12]
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	60bb      	str	r3, [r7, #8]
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	f103 0304 	add.w	r3, r3, #4
 800f400:	61bb      	str	r3, [r7, #24]
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f1a3 0418 	sub.w	r4, r3, #24
 800f408:	6938      	ldr	r0, [r7, #16]
 800f40a:	6979      	ldr	r1, [r7, #20]
 800f40c:	f7ff fe88 	bl	800f120 <MULSHIFT32>
 800f410:	4605      	mov	r5, r0
 800f412:	68b8      	ldr	r0, [r7, #8]
 800f414:	68f9      	ldr	r1, [r7, #12]
 800f416:	f7ff fe83 	bl	800f120 <MULSHIFT32>
 800f41a:	4603      	mov	r3, r0
 800f41c:	1aeb      	subs	r3, r5, r3
 800f41e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f422:	6023      	str	r3, [r4, #0]
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f103 0414 	add.w	r4, r3, #20
 800f42a:	6938      	ldr	r0, [r7, #16]
 800f42c:	68f9      	ldr	r1, [r7, #12]
 800f42e:	f7ff fe77 	bl	800f120 <MULSHIFT32>
 800f432:	4605      	mov	r5, r0
 800f434:	68b8      	ldr	r0, [r7, #8]
 800f436:	6979      	ldr	r1, [r7, #20]
 800f438:	f7ff fe72 	bl	800f120 <MULSHIFT32>
 800f43c:	4603      	mov	r3, r0
 800f43e:	18eb      	adds	r3, r5, r3
 800f440:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f444:	6023      	str	r3, [r4, #0]

		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800f44c:	617b      	str	r3, [r7, #20]
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	613b      	str	r3, [r7, #16]
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	f103 0304 	add.w	r3, r3, #4
 800f45a:	61bb      	str	r3, [r7, #24]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	699b      	ldr	r3, [r3, #24]
 800f460:	60fb      	str	r3, [r7, #12]
 800f462:	69bb      	ldr	r3, [r7, #24]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	60bb      	str	r3, [r7, #8]
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	f103 0304 	add.w	r3, r3, #4
 800f46e:	61bb      	str	r3, [r7, #24]
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f1a3 041c 	sub.w	r4, r3, #28
 800f476:	6938      	ldr	r0, [r7, #16]
 800f478:	6979      	ldr	r1, [r7, #20]
 800f47a:	f7ff fe51 	bl	800f120 <MULSHIFT32>
 800f47e:	4605      	mov	r5, r0
 800f480:	68b8      	ldr	r0, [r7, #8]
 800f482:	68f9      	ldr	r1, [r7, #12]
 800f484:	f7ff fe4c 	bl	800f120 <MULSHIFT32>
 800f488:	4603      	mov	r3, r0
 800f48a:	1aeb      	subs	r3, r5, r3
 800f48c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f490:	6023      	str	r3, [r4, #0]
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f103 0418 	add.w	r4, r3, #24
 800f498:	6938      	ldr	r0, [r7, #16]
 800f49a:	68f9      	ldr	r1, [r7, #12]
 800f49c:	f7ff fe40 	bl	800f120 <MULSHIFT32>
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	68b8      	ldr	r0, [r7, #8]
 800f4a4:	6979      	ldr	r1, [r7, #20]
 800f4a6:	f7ff fe3b 	bl	800f120 <MULSHIFT32>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	18eb      	adds	r3, r5, r3
 800f4ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4b2:	6023      	str	r3, [r4, #0]

		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800f4ba:	617b      	str	r3, [r7, #20]
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	613b      	str	r3, [r7, #16]
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	f103 0304 	add.w	r3, r3, #4
 800f4c8:	61bb      	str	r3, [r7, #24]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	69db      	ldr	r3, [r3, #28]
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	60bb      	str	r3, [r7, #8]
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	f103 0304 	add.w	r3, r3, #4
 800f4dc:	61bb      	str	r3, [r7, #24]
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f1a3 0420 	sub.w	r4, r3, #32
 800f4e4:	6938      	ldr	r0, [r7, #16]
 800f4e6:	6979      	ldr	r1, [r7, #20]
 800f4e8:	f7ff fe1a 	bl	800f120 <MULSHIFT32>
 800f4ec:	4605      	mov	r5, r0
 800f4ee:	68b8      	ldr	r0, [r7, #8]
 800f4f0:	68f9      	ldr	r1, [r7, #12]
 800f4f2:	f7ff fe15 	bl	800f120 <MULSHIFT32>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	1aeb      	subs	r3, r5, r3
 800f4fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4fe:	6023      	str	r3, [r4, #0]
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f103 041c 	add.w	r4, r3, #28
 800f506:	6938      	ldr	r0, [r7, #16]
 800f508:	68f9      	ldr	r1, [r7, #12]
 800f50a:	f7ff fe09 	bl	800f120 <MULSHIFT32>
 800f50e:	4605      	mov	r5, r0
 800f510:	68b8      	ldr	r0, [r7, #8]
 800f512:	6979      	ldr	r1, [r7, #20]
 800f514:	f7ff fe04 	bl	800f120 <MULSHIFT32>
 800f518:	4603      	mov	r3, r0
 800f51a:	18eb      	adds	r3, r5, r3
 800f51c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f520:	6023      	str	r3, [r4, #0]
{
	int k, a0, b0, c0, c1;
	const int *c;

	/* csa = Q31 */
	for (k = nBfly; k > 0; k--) {
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	f103 33ff 	add.w	r3, r3, #4294967295
 800f528:	61fb      	str	r3, [r7, #28]
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f73f ae39 	bgt.w	800f1a4 <AntiAlias+0x10>

		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
	}
}
 800f532:	f107 0720 	add.w	r7, r7, #32
 800f536:	46bd      	mov	sp, r7
 800f538:	bdb0      	pop	{r4, r5, r7, pc}
 800f53a:	bf00      	nop

0800f53c <WinPrevious>:
 * Notes:       produces 9 output samples from 18 input samples via symmetry
 *              all blocks gain at least 1 guard bit via window (long blocks get extra
 *                sign bit, short blocks can have one addition but max gain < 1.0)
 **************************************************************************************/
static void WinPrevious(int *xPrev, int *xPrevWin, int btPrev)
{
 800f53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f53e:	b08f      	sub	sp, #60	; 0x3c
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
	int i, x, *xp, *xpwLo, *xpwHi, wLo, wHi;
	const int *wpLo, *wpHi;

	xp = xPrev;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	633b      	str	r3, [r7, #48]	; 0x30
	/* mapping (see IMDCT12x3): xPrev[0-2] = sum[6-8], xPrev[3-8] = sum[12-17] */
	if (btPrev == 2) {
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b02      	cmp	r3, #2
 800f550:	f040 8146 	bne.w	800f7e0 <WinPrevious+0x2a4>
		/* this could be reordered for minimum loads/stores */
		wpLo = imdctWin[btPrev];
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	4613      	mov	r3, r2
 800f558:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f55c:	189b      	adds	r3, r3, r2
 800f55e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f562:	461a      	mov	r2, r3
 800f564:	f241 2314 	movw	r3, #4628	; 0x1214
 800f568:	f6c0 0303 	movt	r3, #2051	; 0x803
 800f56c:	18d3      	adds	r3, r2, r3
 800f56e:	627b      	str	r3, [r7, #36]	; 0x24
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800f570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f572:	f103 0318 	add.w	r3, r3, #24
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f103 0308 	add.w	r3, r3, #8
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4610      	mov	r0, r2
 800f582:	4619      	mov	r1, r3
 800f584:	f7ff fdcc 	bl	800f120 <MULSHIFT32>
 800f588:	4604      	mov	r4, r0
 800f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f103 0318 	add.w	r3, r3, #24
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4610      	mov	r0, r2
 800f598:	4619      	mov	r1, r3
 800f59a:	f7ff fdc1 	bl	800f120 <MULSHIFT32>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	18e2      	adds	r2, r4, r3
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	601a      	str	r2, [r3, #0]
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	f103 0404 	add.w	r4, r3, #4
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	f103 031c 	add.w	r3, r3, #28
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f103 0304 	add.w	r3, r3, #4
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4610      	mov	r0, r2
 800f5be:	4619      	mov	r1, r3
 800f5c0:	f7ff fdae 	bl	800f120 <MULSHIFT32>
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c8:	f103 0304 	add.w	r3, r3, #4
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f103 031c 	add.w	r3, r3, #28
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4610      	mov	r0, r2
 800f5d8:	4619      	mov	r1, r3
 800f5da:	f7ff fda1 	bl	800f120 <MULSHIFT32>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	18eb      	adds	r3, r5, r3
 800f5e2:	6023      	str	r3, [r4, #0]
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	f103 0408 	add.w	r4, r3, #8
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ec:	f103 0320 	add.w	r3, r3, #32
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4610      	mov	r0, r2
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	f7ff fd91 	bl	800f120 <MULSHIFT32>
 800f5fe:	4605      	mov	r5, r0
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f602:	f103 0308 	add.w	r3, r3, #8
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f103 0320 	add.w	r3, r3, #32
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4610      	mov	r0, r2
 800f612:	4619      	mov	r1, r3
 800f614:	f7ff fd84 	bl	800f120 <MULSHIFT32>
 800f618:	4603      	mov	r3, r0
 800f61a:	18eb      	adds	r3, r5, r3
 800f61c:	6023      	str	r3, [r4, #0]
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	f103 040c 	add.w	r4, r3, #12
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4610      	mov	r0, r2
 800f632:	4619      	mov	r1, r3
 800f634:	f7ff fd74 	bl	800f120 <MULSHIFT32>
 800f638:	4605      	mov	r5, r0
 800f63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63c:	f103 030c 	add.w	r3, r3, #12
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f103 0320 	add.w	r3, r3, #32
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4610      	mov	r0, r2
 800f64c:	4619      	mov	r1, r3
 800f64e:	f7ff fd67 	bl	800f120 <MULSHIFT32>
 800f652:	4603      	mov	r3, r0
 800f654:	18eb      	adds	r3, r5, r3
 800f656:	6023      	str	r3, [r4, #0]
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	f103 0410 	add.w	r4, r3, #16
 800f65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f660:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f103 0304 	add.w	r3, r3, #4
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	4610      	mov	r0, r2
 800f670:	4619      	mov	r1, r3
 800f672:	f7ff fd55 	bl	800f120 <MULSHIFT32>
 800f676:	4605      	mov	r5, r0
 800f678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67a:	f103 0310 	add.w	r3, r3, #16
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f103 031c 	add.w	r3, r3, #28
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4610      	mov	r0, r2
 800f68a:	4619      	mov	r1, r3
 800f68c:	f7ff fd48 	bl	800f120 <MULSHIFT32>
 800f690:	4603      	mov	r3, r0
 800f692:	18eb      	adds	r3, r5, r3
 800f694:	6023      	str	r3, [r4, #0]
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	f103 0414 	add.w	r4, r3, #20
 800f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f103 0308 	add.w	r3, r3, #8
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4610      	mov	r0, r2
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	f7ff fd36 	bl	800f120 <MULSHIFT32>
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b8:	f103 0314 	add.w	r3, r3, #20
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f103 0318 	add.w	r3, r3, #24
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4610      	mov	r0, r2
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	f7ff fd29 	bl	800f120 <MULSHIFT32>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	18eb      	adds	r3, r5, r3
 800f6d2:	6023      	str	r3, [r4, #0]
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	f103 0418 	add.w	r4, r3, #24
 800f6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6dc:	f103 0318 	add.w	r3, r3, #24
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f103 0314 	add.w	r3, r3, #20
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	f7ff fd17 	bl	800f120 <MULSHIFT32>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	6023      	str	r3, [r4, #0]
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	f103 041c 	add.w	r4, r3, #28
 800f6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fe:	f103 031c 	add.w	r3, r3, #28
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f103 0310 	add.w	r3, r3, #16
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4610      	mov	r0, r2
 800f70e:	4619      	mov	r1, r3
 800f710:	f7ff fd06 	bl	800f120 <MULSHIFT32>
 800f714:	4603      	mov	r3, r0
 800f716:	6023      	str	r3, [r4, #0]
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	f103 0420 	add.w	r4, r3, #32
 800f71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f720:	f103 0320 	add.w	r3, r3, #32
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f103 030c 	add.w	r3, r3, #12
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4610      	mov	r0, r2
 800f730:	4619      	mov	r1, r3
 800f732:	f7ff fcf5 	bl	800f120 <MULSHIFT32>
 800f736:	4603      	mov	r3, r0
 800f738:	6023      	str	r3, [r4, #0]
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800f740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f742:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f746:	681a      	ldr	r2, [r3, #0]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f103 030c 	add.w	r3, r3, #12
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4610      	mov	r0, r2
 800f752:	4619      	mov	r1, r3
 800f754:	f7ff fce4 	bl	800f120 <MULSHIFT32>
 800f758:	4603      	mov	r3, r0
 800f75a:	6023      	str	r3, [r4, #0]
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800f762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f764:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800f768:	681a      	ldr	r2, [r3, #0]
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f103 0310 	add.w	r3, r3, #16
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4610      	mov	r0, r2
 800f774:	4619      	mov	r1, r3
 800f776:	f7ff fcd3 	bl	800f120 <MULSHIFT32>
 800f77a:	4603      	mov	r3, r0
 800f77c:	6023      	str	r3, [r4, #0]
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f786:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800f78a:	681a      	ldr	r2, [r3, #0]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f103 0314 	add.w	r3, r3, #20
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4610      	mov	r0, r2
 800f796:	4619      	mov	r1, r3
 800f798:	f7ff fcc2 	bl	800f120 <MULSHIFT32>
 800f79c:	4603      	mov	r3, r0
 800f79e:	6023      	str	r3, [r4, #0]
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	f103 0530 	add.w	r5, r3, #48	; 0x30
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800f7ac:	68ba      	ldr	r2, [r7, #8]
 800f7ae:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800f7b2:	68b9      	ldr	r1, [r7, #8]
 800f7b4:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800f7b8:	68b8      	ldr	r0, [r7, #8]
 800f7ba:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800f7be:	68bc      	ldr	r4, [r7, #8]
 800f7c0:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800f7c4:	f04f 0600 	mov.w	r6, #0
 800f7c8:	6026      	str	r6, [r4, #0]
 800f7ca:	6824      	ldr	r4, [r4, #0]
 800f7cc:	6004      	str	r4, [r0, #0]
 800f7ce:	6800      	ldr	r0, [r0, #0]
 800f7d0:	6008      	str	r0, [r1, #0]
 800f7d2:	6809      	ldr	r1, [r1, #0]
 800f7d4:	6011      	str	r1, [r2, #0]
 800f7d6:	6812      	ldr	r2, [r2, #0]
 800f7d8:	601a      	str	r2, [r3, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	602b      	str	r3, [r5, #0]
 800f7de:	e04e      	b.n	800f87e <WinPrevious+0x342>
	} else {
		/* use ARM-style pointers (*ptr++) so that ADS compiles well */
		wpLo = imdctWin[btPrev] + 18;
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f7e8:	189b      	adds	r3, r3, r2
 800f7ea:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f7ee:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800f7f2:	f241 2314 	movw	r3, #4628	; 0x1214
 800f7f6:	f6c0 0303 	movt	r3, #2051	; 0x803
 800f7fa:	18d3      	adds	r3, r2, r3
 800f7fc:	627b      	str	r3, [r7, #36]	; 0x24
		wpHi = wpLo + 17;
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f800:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800f804:	623b      	str	r3, [r7, #32]
		xpwLo = xPrevWin;
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	62fb      	str	r3, [r7, #44]	; 0x2c
		xpwHi = xPrevWin + 17;
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800f810:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 9; i > 0; i--) {
 800f812:	f04f 0309 	mov.w	r3, #9
 800f816:	637b      	str	r3, [r7, #52]	; 0x34
 800f818:	e02e      	b.n	800f878 <WinPrevious+0x33c>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	61fb      	str	r3, [r7, #28]
 800f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f822:	f103 0304 	add.w	r3, r3, #4
 800f826:	633b      	str	r3, [r7, #48]	; 0x30
 800f828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	61bb      	str	r3, [r7, #24]
 800f82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f830:	f103 0304 	add.w	r3, r3, #4
 800f834:	627b      	str	r3, [r7, #36]	; 0x24
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	617b      	str	r3, [r7, #20]
 800f83c:	6a3b      	ldr	r3, [r7, #32]
 800f83e:	f1a3 0304 	sub.w	r3, r3, #4
 800f842:	623b      	str	r3, [r7, #32]
			*xpwLo++ = MULSHIFT32(wLo, x);
 800f844:	69b8      	ldr	r0, [r7, #24]
 800f846:	69f9      	ldr	r1, [r7, #28]
 800f848:	f7ff fc6a 	bl	800f120 <MULSHIFT32>
 800f84c:	4602      	mov	r2, r0
 800f84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f850:	601a      	str	r2, [r3, #0]
 800f852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f854:	f103 0304 	add.w	r3, r3, #4
 800f858:	62fb      	str	r3, [r7, #44]	; 0x2c
			*xpwHi-- = MULSHIFT32(wHi, x);
 800f85a:	6978      	ldr	r0, [r7, #20]
 800f85c:	69f9      	ldr	r1, [r7, #28]
 800f85e:	f7ff fc5f 	bl	800f120 <MULSHIFT32>
 800f862:	4602      	mov	r2, r0
 800f864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f866:	601a      	str	r2, [r3, #0]
 800f868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86a:	f1a3 0304 	sub.w	r3, r3, #4
 800f86e:	62bb      	str	r3, [r7, #40]	; 0x28
		/* use ARM-style pointers (*ptr++) so that ADS compiles well */
		wpLo = imdctWin[btPrev] + 18;
		wpHi = wpLo + 17;
		xpwLo = xPrevWin;
		xpwHi = xPrevWin + 17;
		for (i = 9; i > 0; i--) {
 800f870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f872:	f103 33ff 	add.w	r3, r3, #4294967295
 800f876:	637b      	str	r3, [r7, #52]	; 0x34
 800f878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	dccd      	bgt.n	800f81a <WinPrevious+0x2de>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
			*xpwLo++ = MULSHIFT32(wLo, x);
			*xpwHi-- = MULSHIFT32(wHi, x);
		}
	}
}
 800f87e:	f107 073c 	add.w	r7, r7, #60	; 0x3c
 800f882:	46bd      	mov	sp, r7
 800f884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f886:	bf00      	nop

0800f888 <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b096      	sub	sp, #88	; 0x58
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
 800f894:	603b      	str	r3, [r7, #0]
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f040 80a2 	bne.w	800f9e2 <FreqInvertRescale+0x15a>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f003 0301 	and.w	r3, r3, #1
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	f000 8098 	beq.w	800f9dc <FreqInvertRescale+0x154>
			y += NBANDS;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800f8b2:	60fb      	str	r3, [r7, #12]
			y0 = *y;	y += 2*NBANDS;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8c0:	60fb      	str	r3, [r7, #12]
			y1 = *y;	y += 2*NBANDS;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	647b      	str	r3, [r7, #68]	; 0x44
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8ce:	60fb      	str	r3, [r7, #12]
			y2 = *y;	y += 2*NBANDS;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	643b      	str	r3, [r7, #64]	; 0x40
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8dc:	60fb      	str	r3, [r7, #12]
			y3 = *y;	y += 2*NBANDS;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8ea:	60fb      	str	r3, [r7, #12]
			y4 = *y;	y += 2*NBANDS;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8f8:	60fb      	str	r3, [r7, #12]
			y5 = *y;	y += 2*NBANDS;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	637b      	str	r3, [r7, #52]	; 0x34
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f906:	60fb      	str	r3, [r7, #12]
			y6 = *y;	y += 2*NBANDS;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	633b      	str	r3, [r7, #48]	; 0x30
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f914:	60fb      	str	r3, [r7, #12]
			y7 = *y;	y += 2*NBANDS;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f922:	60fb      	str	r3, [r7, #12]
			y8 = *y;	y += 2*NBANDS;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	62bb      	str	r3, [r7, #40]	; 0x28
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f930:	60fb      	str	r3, [r7, #12]

			y -= 18*NBANDS;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 800f938:	60fb      	str	r3, [r7, #12]
			*y = -y0;	y += 2*NBANDS;
 800f93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f93c:	f1c3 0200 	rsb	r2, r3, #0
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	601a      	str	r2, [r3, #0]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f94a:	60fb      	str	r3, [r7, #12]
			*y = -y1;	y += 2*NBANDS;
 800f94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f94e:	f1c3 0200 	rsb	r2, r3, #0
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	601a      	str	r2, [r3, #0]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f95c:	60fb      	str	r3, [r7, #12]
			*y = -y2;	y += 2*NBANDS;
 800f95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f960:	f1c3 0200 	rsb	r2, r3, #0
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	601a      	str	r2, [r3, #0]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f96e:	60fb      	str	r3, [r7, #12]
			*y = -y3;	y += 2*NBANDS;
 800f970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f972:	f1c3 0200 	rsb	r2, r3, #0
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	601a      	str	r2, [r3, #0]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f980:	60fb      	str	r3, [r7, #12]
			*y = -y4;	y += 2*NBANDS;
 800f982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f984:	f1c3 0200 	rsb	r2, r3, #0
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	601a      	str	r2, [r3, #0]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f992:	60fb      	str	r3, [r7, #12]
			*y = -y5;	y += 2*NBANDS;
 800f994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f996:	f1c3 0200 	rsb	r2, r3, #0
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f9a4:	60fb      	str	r3, [r7, #12]
			*y = -y6;	y += 2*NBANDS;
 800f9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a8:	f1c3 0200 	rsb	r2, r3, #0
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	601a      	str	r2, [r3, #0]
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f9b6:	60fb      	str	r3, [r7, #12]
			*y = -y7;	y += 2*NBANDS;
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	f1c3 0200 	rsb	r2, r3, #0
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	601a      	str	r2, [r3, #0]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f9c8:	60fb      	str	r3, [r7, #12]
			*y = -y8;	y += 2*NBANDS;
 800f9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9cc:	f1c3 0200 	rsb	r2, r3, #0
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	601a      	str	r2, [r3, #0]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f9da:	60fb      	str	r3, [r7, #12]
		}
		return 0;
 800f9dc:	f04f 0300 	mov.w	r3, #0
 800f9e0:	e12d      	b.n	800fc3e <FreqInvertRescale+0x3b6>
	} else {
		/* undo pre-IMDCT scaling, clipping if necessary */
		mOut = 0;
 800f9e2:	f04f 0300 	mov.w	r3, #0
 800f9e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (blockIdx & 0x01) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f003 0301 	and.w	r3, r3, #1
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f000 8093 	beq.w	800fb1c <FreqInvertRescale+0x294>
			/* frequency invert */
			for (i = 0; i < 18; i+=2) {
 800f9f6:	f04f 0300 	mov.w	r3, #0
 800f9fa:	657b      	str	r3, [r7, #84]	; 0x54
 800f9fc:	e089      	b.n	800fb12 <FreqInvertRescale+0x28a>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	653b      	str	r3, [r7, #80]	; 0x50
 800fa04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa06:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	f1c3 031f 	rsb	r3, r3, #31
 800fa12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa14:	fa42 f203 	asr.w	r2, r2, r3
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d00b      	beq.n	800fa36 <FreqInvertRescale+0x1ae>
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	f1c3 031f 	rsb	r3, r3, #31
 800fa24:	f04f 0201 	mov.w	r2, #1
 800fa28:	fa02 f303 	lsl.w	r3, r2, r3
 800fa2c:	f103 32ff 	add.w	r2, r3, #4294967295
 800fa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa32:	4053      	eors	r3, r2
 800fa34:	653b      	str	r3, [r7, #80]	; 0x50
 800fa36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	fa02 f203 	lsl.w	r2, r2, r3
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	601a      	str	r2, [r3, #0]
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7ff fb7c 	bl	800f144 <FASTABS>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa50:	4313      	orrs	r3, r2
 800fa52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800fa5a:	60fb      	str	r3, [r7, #12]
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f1c3 0300 	rsb	r3, r3, #0
 800fa64:	653b      	str	r3, [r7, #80]	; 0x50
 800fa66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa68:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800fa6c:	623b      	str	r3, [r7, #32]
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	f1c3 031f 	rsb	r3, r3, #31
 800fa74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa76:	fa42 f203 	asr.w	r2, r2, r3
 800fa7a:	6a3b      	ldr	r3, [r7, #32]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d00b      	beq.n	800fa98 <FreqInvertRescale+0x210>
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	f1c3 031f 	rsb	r3, r3, #31
 800fa86:	f04f 0201 	mov.w	r2, #1
 800fa8a:	fa02 f303 	lsl.w	r3, r2, r3
 800fa8e:	f103 32ff 	add.w	r2, r3, #4294967295
 800fa92:	6a3b      	ldr	r3, [r7, #32]
 800fa94:	4053      	eors	r3, r2
 800fa96:	653b      	str	r3, [r7, #80]	; 0x50
 800fa98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	fa02 f203 	lsl.w	r2, r2, r3
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	601a      	str	r2, [r3, #0]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7ff fb4b 	bl	800f144 <FASTABS>
 800faae:	4603      	mov	r3, r0
 800fab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fab2:	4313      	orrs	r3, r2
 800fab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800fabc:	60fb      	str	r3, [r7, #12]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	653b      	str	r3, [r7, #80]	; 0x50
 800fac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fac6:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800faca:	61fb      	str	r3, [r7, #28]
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	f1c3 031f 	rsb	r3, r3, #31
 800fad2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fad4:	fa42 f203 	asr.w	r2, r2, r3
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d00b      	beq.n	800faf6 <FreqInvertRescale+0x26e>
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	f1c3 031f 	rsb	r3, r3, #31
 800fae4:	f04f 0201 	mov.w	r2, #1
 800fae8:	fa02 f303 	lsl.w	r3, r2, r3
 800faec:	f103 32ff 	add.w	r2, r3, #4294967295
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	4053      	eors	r3, r2
 800faf4:	653b      	str	r3, [r7, #80]	; 0x50
 800faf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	fa02 f203 	lsl.w	r2, r2, r3
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	601a      	str	r2, [r3, #0]
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	f103 0304 	add.w	r3, r3, #4
 800fb08:	60bb      	str	r3, [r7, #8]
	} else {
		/* undo pre-IMDCT scaling, clipping if necessary */
		mOut = 0;
		if (blockIdx & 0x01) {
			/* frequency invert */
			for (i = 0; i < 18; i+=2) {
 800fb0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb0c:	f103 0302 	add.w	r3, r3, #2
 800fb10:	657b      	str	r3, [r7, #84]	; 0x54
 800fb12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb14:	2b11      	cmp	r3, #17
 800fb16:	f77f af72 	ble.w	800f9fe <FreqInvertRescale+0x176>
 800fb1a:	e08f      	b.n	800fc3c <FreqInvertRescale+0x3b4>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		} else {
			for (i = 0; i < 18; i+=2) {
 800fb1c:	f04f 0300 	mov.w	r3, #0
 800fb20:	657b      	str	r3, [r7, #84]	; 0x54
 800fb22:	e087      	b.n	800fc34 <FreqInvertRescale+0x3ac>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	653b      	str	r3, [r7, #80]	; 0x50
 800fb2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb2c:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800fb30:	61bb      	str	r3, [r7, #24]
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	f1c3 031f 	rsb	r3, r3, #31
 800fb38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb3a:	fa42 f203 	asr.w	r2, r2, r3
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d00b      	beq.n	800fb5c <FreqInvertRescale+0x2d4>
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	f1c3 031f 	rsb	r3, r3, #31
 800fb4a:	f04f 0201 	mov.w	r2, #1
 800fb4e:	fa02 f303 	lsl.w	r3, r2, r3
 800fb52:	f103 32ff 	add.w	r2, r3, #4294967295
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	4053      	eors	r3, r2
 800fb5a:	653b      	str	r3, [r7, #80]	; 0x50
 800fb5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	fa02 f203 	lsl.w	r2, r2, r3
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	601a      	str	r2, [r3, #0]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7ff fae9 	bl	800f144 <FASTABS>
 800fb72:	4603      	mov	r3, r0
 800fb74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb76:	4313      	orrs	r3, r2
 800fb78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800fb80:	60fb      	str	r3, [r7, #12]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	653b      	str	r3, [r7, #80]	; 0x50
 800fb88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb8a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800fb8e:	617b      	str	r3, [r7, #20]
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	f1c3 031f 	rsb	r3, r3, #31
 800fb96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb98:	fa42 f203 	asr.w	r2, r2, r3
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d00b      	beq.n	800fbba <FreqInvertRescale+0x332>
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	f1c3 031f 	rsb	r3, r3, #31
 800fba8:	f04f 0201 	mov.w	r2, #1
 800fbac:	fa02 f303 	lsl.w	r3, r2, r3
 800fbb0:	f103 32ff 	add.w	r2, r3, #4294967295
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	4053      	eors	r3, r2
 800fbb8:	653b      	str	r3, [r7, #80]	; 0x50
 800fbba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	fa02 f203 	lsl.w	r2, r2, r3
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	601a      	str	r2, [r3, #0]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff faba 	bl	800f144 <FASTABS>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800fbde:	60fb      	str	r3, [r7, #12]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	653b      	str	r3, [r7, #80]	; 0x50
 800fbe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbe8:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800fbec:	613b      	str	r3, [r7, #16]
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	f1c3 031f 	rsb	r3, r3, #31
 800fbf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbf6:	fa42 f203 	asr.w	r2, r2, r3
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d00b      	beq.n	800fc18 <FreqInvertRescale+0x390>
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	f1c3 031f 	rsb	r3, r3, #31
 800fc06:	f04f 0201 	mov.w	r2, #1
 800fc0a:	fa02 f303 	lsl.w	r3, r2, r3
 800fc0e:	f103 32ff 	add.w	r2, r3, #4294967295
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	4053      	eors	r3, r2
 800fc16:	653b      	str	r3, [r7, #80]	; 0x50
 800fc18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	fa02 f203 	lsl.w	r2, r2, r3
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	601a      	str	r2, [r3, #0]
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	f103 0304 	add.w	r3, r3, #4
 800fc2a:	60bb      	str	r3, [r7, #8]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		} else {
			for (i = 0; i < 18; i+=2) {
 800fc2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc2e:	f103 0302 	add.w	r3, r3, #2
 800fc32:	657b      	str	r3, [r7, #84]	; 0x54
 800fc34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc36:	2b11      	cmp	r3, #17
 800fc38:	f77f af74 	ble.w	800fb24 <FreqInvertRescale+0x29c>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		}
		return mOut;
 800fc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	}
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f107 0758 	add.w	r7, r7, #88	; 0x58
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <idct9>:
	0x7f834ed0, 0x7ba3751d, 0x7401e4c1, 0x68d9f964, 0x5a82799a, 0x496af3e2, 0x36185aee, 0x2120fb83, 0x0b27eb5c, 
};

/* require at least 3 guard bits in x[] to ensure no overflow */
static __inline void idct9(int *x)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b0b0      	sub	sp, #192	; 0xc0
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
	int a10, a11, a12, a13, a14, a15, a16, a17, a18;
	int a19, a20, a21, a22, a23, a24, a25, a26, a27;
	int m1, m3, m5, m6, m7, m8, m9, m10, m11, m12;
	int x0, x1, x2, x3, x4, x5, x6, x7, x8;

	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	691b      	ldr	r3, [r3, #16]
 800fc74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	695b      	ldr	r3, [r3, #20]
 800fc7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	699b      	ldr	r3, [r3, #24]
 800fc84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	69db      	ldr	r3, [r3, #28]
 800fc8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a1b      	ldr	r3, [r3, #32]
 800fc94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	a1 = x0 - x6;
 800fc98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fc9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	a2 = x1 - x5;
 800fca6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fcaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fcae:	1ad3      	subs	r3, r2, r3
 800fcb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	a3 = x1 + x5;
 800fcb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fcb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fcbc:	18d3      	adds	r3, r2, r3
 800fcbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	a4 = x2 - x4;
 800fcc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fcc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	a5 = x2 + x4;
 800fcd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fcd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fcd8:	18d3      	adds	r3, r2, r3
 800fcda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	a6 = x2 + x8;
 800fcde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fce6:	18d3      	adds	r3, r2, r3
 800fce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	a7 = x1 + x7;
 800fcec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fcf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fcf4:	18d3      	adds	r3, r2, r3
 800fcf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800fcfa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fcfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd02:	1ad3      	subs	r3, r2, r3
 800fd04:	67fb      	str	r3, [r7, #124]	; 0x7c
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800fd06:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fd0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd0e:	1ad3      	subs	r3, r2, r3
 800fd10:	67bb      	str	r3, [r7, #120]	; 0x78
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800fd12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fd16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	677b      	str	r3, [r7, #116]	; 0x74
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800fd1e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fd22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	673b      	str	r3, [r7, #112]	; 0x70

	/* do the << 1 as constant shifts where mX is actually used (free, no stall or extra inst.) */
	m1 =  MULSHIFT32(c9_0, x3);
 800fd2a:	f241 131c 	movw	r3, #4380	; 0x111c
 800fd2e:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4618      	mov	r0, r3
 800fd36:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800fd3a:	f7ff f9f1 	bl	800f120 <MULSHIFT32>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	66fb      	str	r3, [r7, #108]	; 0x6c
	m3 =  MULSHIFT32(c9_0, a10);
 800fd42:	f241 131c 	movw	r3, #4380	; 0x111c
 800fd46:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fd50:	f7ff f9e6 	bl	800f120 <MULSHIFT32>
 800fd54:	4603      	mov	r3, r0
 800fd56:	66bb      	str	r3, [r7, #104]	; 0x68
	m5 =  MULSHIFT32(c9_1, a5);
 800fd58:	f241 1320 	movw	r3, #4384	; 0x1120
 800fd5c:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800fd68:	f7ff f9da 	bl	800f120 <MULSHIFT32>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	667b      	str	r3, [r7, #100]	; 0x64
	m6 =  MULSHIFT32(c9_2, a6);
 800fd70:	f241 1324 	movw	r3, #4388	; 0x1124
 800fd74:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fd80:	f7ff f9ce 	bl	800f120 <MULSHIFT32>
 800fd84:	4603      	mov	r3, r0
 800fd86:	663b      	str	r3, [r7, #96]	; 0x60
	m7 =  MULSHIFT32(c9_1, a8);
 800fd88:	f241 1320 	movw	r3, #4384	; 0x1120
 800fd8c:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4618      	mov	r0, r3
 800fd94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fd96:	f7ff f9c3 	bl	800f120 <MULSHIFT32>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	65fb      	str	r3, [r7, #92]	; 0x5c
	m8 =  MULSHIFT32(c9_2, a5);
 800fd9e:	f241 1324 	movw	r3, #4388	; 0x1124
 800fda2:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800fdae:	f7ff f9b7 	bl	800f120 <MULSHIFT32>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	65bb      	str	r3, [r7, #88]	; 0x58
	m9 =  MULSHIFT32(c9_3, a9);
 800fdb6:	f241 1328 	movw	r3, #4392	; 0x1128
 800fdba:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fdc4:	f7ff f9ac 	bl	800f120 <MULSHIFT32>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	657b      	str	r3, [r7, #84]	; 0x54
	m10 = MULSHIFT32(c9_4, a7);
 800fdcc:	f241 132c 	movw	r3, #4396	; 0x112c
 800fdd0:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fddc:	f7ff f9a0 	bl	800f120 <MULSHIFT32>
 800fde0:	4603      	mov	r3, r0
 800fde2:	653b      	str	r3, [r7, #80]	; 0x50
	m11 = MULSHIFT32(c9_3, a3);
 800fde4:	f241 1328 	movw	r3, #4392	; 0x1128
 800fde8:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fdf4:	f7ff f994 	bl	800f120 <MULSHIFT32>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	64fb      	str	r3, [r7, #76]	; 0x4c
	m12 = MULSHIFT32(c9_4, a9);
 800fdfc:	f241 132c 	movw	r3, #4396	; 0x112c
 800fe00:	f6c0 0303 	movt	r3, #2051	; 0x803
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4618      	mov	r0, r3
 800fe08:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fe0a:	f7ff f989 	bl	800f120 <MULSHIFT32>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	64bb      	str	r3, [r7, #72]	; 0x48

	a12 = x[0] +  (x[6] >> 1);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f103 0318 	add.w	r3, r3, #24
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	ea4f 0363 	mov.w	r3, r3, asr #1
 800fe22:	18d3      	adds	r3, r2, r3
 800fe24:	647b      	str	r3, [r7, #68]	; 0x44
	a13 = a12  +  (  m1 << 1);
 800fe26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe28:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800fe2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe2e:	18d3      	adds	r3, r2, r3
 800fe30:	643b      	str	r3, [r7, #64]	; 0x40
	a14 = a12  -  (  m1 << 1);
 800fe32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe3a:	1ad3      	subs	r3, r2, r3
 800fe3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	a15 = a1   +  ( a11 >> 1);
 800fe3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe40:	ea4f 0263 	mov.w	r2, r3, asr #1
 800fe44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fe48:	18d3      	adds	r3, r2, r3
 800fe4a:	63bb      	str	r3, [r7, #56]	; 0x38
	a16 = ( m5 << 1) + (m6 << 1);
 800fe4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe4e:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800fe52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe58:	18d3      	adds	r3, r2, r3
 800fe5a:	637b      	str	r3, [r7, #52]	; 0x34
	a17 = ( m7 << 1) - (m8 << 1);
 800fe5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe5e:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800fe62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe68:	1ad3      	subs	r3, r2, r3
 800fe6a:	633b      	str	r3, [r7, #48]	; 0x30
	a18 = a16 + a17;
 800fe6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe70:	18d3      	adds	r3, r2, r3
 800fe72:	62fb      	str	r3, [r7, #44]	; 0x2c
	a19 = ( m9 << 1) + (m10 << 1);
 800fe74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe76:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800fe7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe80:	18d3      	adds	r3, r2, r3
 800fe82:	62bb      	str	r3, [r7, #40]	; 0x28
	a20 = (m11 << 1) - (m12 << 1);
 800fe84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe86:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800fe8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	627b      	str	r3, [r7, #36]	; 0x24

	a21 = a20 - a19;
 800fe94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe98:	1ad3      	subs	r3, r2, r3
 800fe9a:	623b      	str	r3, [r7, #32]
	a22 = a13 + a16;
 800fe9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fea0:	18d3      	adds	r3, r2, r3
 800fea2:	61fb      	str	r3, [r7, #28]
	a23 = a14 + a16;
 800fea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fea8:	18d3      	adds	r3, r2, r3
 800feaa:	61bb      	str	r3, [r7, #24]
	a24 = a14 + a17;
 800feac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800feae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb0:	18d3      	adds	r3, r2, r3
 800feb2:	617b      	str	r3, [r7, #20]
	a25 = a13 + a17;
 800feb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800feb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb8:	18d3      	adds	r3, r2, r3
 800feba:	613b      	str	r3, [r7, #16]
	a26 = a14 - a18;
 800febc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec0:	1ad3      	subs	r3, r2, r3
 800fec2:	60fb      	str	r3, [r7, #12]
	a27 = a13 - a18;
 800fec4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	60bb      	str	r3, [r7, #8]

	x0 = a22 + a19;			x[0] = x0;
 800fecc:	69fa      	ldr	r2, [r7, #28]
 800fece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed0:	18d3      	adds	r3, r2, r3
 800fed2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fedc:	601a      	str	r2, [r3, #0]
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800fede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fee0:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800fee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee6:	18d3      	adds	r3, r2, r3
 800fee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f103 0304 	add.w	r3, r3, #4
 800fef2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fef6:	601a      	str	r2, [r3, #0]
	x2 = a24 + a20;			x[2] = x2;
 800fef8:	697a      	ldr	r2, [r7, #20]
 800fefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefc:	18d3      	adds	r3, r2, r3
 800fefe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f103 0308 	add.w	r3, r3, #8
 800ff08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ff0c:	601a      	str	r2, [r3, #0]
	x3 = a26 - a21;			x[3] = x3;
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	6a3b      	ldr	r3, [r7, #32]
 800ff12:	1ad3      	subs	r3, r2, r3
 800ff14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f103 030c 	add.w	r3, r3, #12
 800ff1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ff22:	601a      	str	r2, [r3, #0]
	x4 = a1 - a11;			x[4] = x4;
 800ff24:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ff2a:	1ad3      	subs	r3, r2, r3
 800ff2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f103 0310 	add.w	r3, r3, #16
 800ff36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ff3a:	601a      	str	r2, [r3, #0]
	x5 = a27 + a21;			x[5] = x5;
 800ff3c:	68ba      	ldr	r2, [r7, #8]
 800ff3e:	6a3b      	ldr	r3, [r7, #32]
 800ff40:	18d3      	adds	r3, r2, r3
 800ff42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f103 0314 	add.w	r3, r3, #20
 800ff4c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ff50:	601a      	str	r2, [r3, #0]
	x6 = a25 - a20;			x[6] = x6;
 800ff52:	693a      	ldr	r2, [r7, #16]
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f103 0318 	add.w	r3, r3, #24
 800ff62:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ff66:	601a      	str	r2, [r3, #0]
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800ff68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff70:	1ad3      	subs	r3, r2, r3
 800ff72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f103 031c 	add.w	r3, r3, #28
 800ff7c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ff80:	601a      	str	r2, [r3, #0]
	x8 = a23 - a19;			x[8] = x8;
 800ff82:	69ba      	ldr	r2, [r7, #24]
 800ff84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff86:	1ad3      	subs	r3, r2, r3
 800ff88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f103 0320 	add.w	r3, r3, #32
 800ff92:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ff96:	601a      	str	r2, [r3, #0]
}
 800ff98:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <IMDCT36>:
 *
 * TODO:        optimize for ARM (reorder window coefs, ARM-style pointers in C, 
 *                inline asm may or may not be helpful)
 **************************************************************************************/
static int IMDCT36(int *xCurr, int *xPrev, int *y, int btCurr, int btPrev, int blockIdx, int gb)
{
 800ffa0:	b590      	push	{r4, r7, lr}
 800ffa2:	b0b9      	sub	sp, #228	; 0xe4
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
 800ffac:	603b      	str	r3, [r7, #0]
	int i, es, xBuf[18], xPrevWin[18];
	int acc1, acc2, s, d, t, mOut;
	int xo, xe, c, *xp, yLo, yHi;
	const int *cp, *wp;

	acc1 = acc2 = 0;
 800ffae:	f04f 0300 	mov.w	r3, #0
 800ffb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ffb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ffba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	xCurr += 17;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800ffc4:	60fb      	str	r3, [r7, #12]

	/* 7 gb is always adequate for antialias + accumulator loop + idct9 */
	if (gb < 7) {
 800ffc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ffca:	2b06      	cmp	r3, #6
 800ffcc:	dc64      	bgt.n	8010098 <IMDCT36+0xf8>
		/* rarely triggered - 5% to 10% of the time on normal clips (with Q25 input) */
		es = 7 - gb;
 800ffce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ffd2:	f1c3 0307 	rsb	r3, r3, #7
 800ffd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		for (i = 8; i >= 0; i--) {	
 800ffda:	f04f 0308 	mov.w	r3, #8
 800ffde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ffe2:	e054      	b.n	801008e <IMDCT36+0xee>
			acc1 = ((*xCurr--) >> es) - acc1;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffec:	fa42 f203 	asr.w	r2, r2, r3
 800fff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fff4:	1ad3      	subs	r3, r2, r3
 800fff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f1a3 0304 	sub.w	r3, r3, #4
 8010000:	60fb      	str	r3, [r7, #12]
			acc2 = acc1 - acc2;
 8010002:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8010006:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801000a:	1ad3      	subs	r3, r2, r3
 801000c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			acc1 = ((*xCurr--) >> es) - acc1;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010018:	fa42 f203 	asr.w	r2, r2, r3
 801001c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010020:	1ad3      	subs	r3, r2, r3
 8010022:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f1a3 0304 	sub.w	r3, r3, #4
 801002c:	60fb      	str	r3, [r7, #12]
			xBuf[i+9] = acc2;	/* odd */
 801002e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010032:	f103 0309 	add.w	r3, r3, #9
 8010036:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801003a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801003e:	18d3      	adds	r3, r2, r3
 8010040:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010044:	f843 2c88 	str.w	r2, [r3, #-136]
			xBuf[i+0] = acc1;	/* even */
 8010048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801004c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010050:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8010054:	18d3      	adds	r3, r2, r3
 8010056:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801005a:	f843 2c88 	str.w	r2, [r3, #-136]
			xPrev[i] >>= es;
 801005e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010062:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010066:	68ba      	ldr	r2, [r7, #8]
 8010068:	18d3      	adds	r3, r2, r3
 801006a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801006e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8010072:	68b9      	ldr	r1, [r7, #8]
 8010074:	188a      	adds	r2, r1, r2
 8010076:	6811      	ldr	r1, [r2, #0]
 8010078:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801007c:	fa41 f202 	asr.w	r2, r1, r2
 8010080:	601a      	str	r2, [r3, #0]

	/* 7 gb is always adequate for antialias + accumulator loop + idct9 */
	if (gb < 7) {
		/* rarely triggered - 5% to 10% of the time on normal clips (with Q25 input) */
		es = 7 - gb;
		for (i = 8; i >= 0; i--) {	
 8010082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010086:	f103 33ff 	add.w	r3, r3, #4294967295
 801008a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801008e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010092:	2b00      	cmp	r3, #0
 8010094:	daa6      	bge.n	800ffe4 <IMDCT36+0x44>
 8010096:	e047      	b.n	8010128 <IMDCT36+0x188>
			xBuf[i+9] = acc2;	/* odd */
			xBuf[i+0] = acc1;	/* even */
			xPrev[i] >>= es;
		}
	} else {
		es = 0;
 8010098:	f04f 0300 	mov.w	r3, #0
 801009c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		/* max gain = 18, assume adequate guard bits */
		for (i = 8; i >= 0; i--) {	
 80100a0:	f04f 0308 	mov.w	r3, #8
 80100a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80100a8:	e03a      	b.n	8010120 <IMDCT36+0x180>
			acc1 = (*xCurr--) - acc1;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f1a3 0304 	sub.w	r3, r3, #4
 80100be:	60fb      	str	r3, [r7, #12]
			acc2 = acc1 - acc2;
 80100c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80100c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			acc1 = (*xCurr--) - acc1;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f1a3 0304 	sub.w	r3, r3, #4
 80100e2:	60fb      	str	r3, [r7, #12]
			xBuf[i+9] = acc2;	/* odd */
 80100e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80100e8:	f103 0309 	add.w	r3, r3, #9
 80100ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80100f0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80100f4:	18d3      	adds	r3, r2, r3
 80100f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80100fa:	f843 2c88 	str.w	r2, [r3, #-136]
			xBuf[i+0] = acc1;	/* even */
 80100fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010102:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010106:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801010a:	18d3      	adds	r3, r2, r3
 801010c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8010110:	f843 2c88 	str.w	r2, [r3, #-136]
			xPrev[i] >>= es;
		}
	} else {
		es = 0;
		/* max gain = 18, assume adequate guard bits */
		for (i = 8; i >= 0; i--) {	
 8010114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010118:	f103 33ff 	add.w	r3, r3, #4294967295
 801011c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010124:	2b00      	cmp	r3, #0
 8010126:	dac0      	bge.n	80100aa <IMDCT36+0x10a>
			xBuf[i+9] = acc2;	/* odd */
			xBuf[i+0] = acc1;	/* even */
		}
	}
	/* xEven[0] and xOdd[0] scaled by 0.5 */
	xBuf[9] >>= 1;
 8010128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801012a:	ea4f 0363 	mov.w	r3, r3, asr #1
 801012e:	67fb      	str	r3, [r7, #124]	; 0x7c
	xBuf[0] >>= 1;
 8010130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010132:	ea4f 0363 	mov.w	r3, r3, asr #1
 8010136:	65bb      	str	r3, [r7, #88]	; 0x58

	/* do 9-point IDCT on even and odd */
	idct9(xBuf+0);	/* even */
 8010138:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801013c:	4618      	mov	r0, r3
 801013e:	f7ff fd83 	bl	800fc48 <idct9>
	idct9(xBuf+9);	/* odd */
 8010142:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010146:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff fd7c 	bl	800fc48 <idct9>

	xp = xBuf + 8;
 8010150:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010154:	f103 0320 	add.w	r3, r3, #32
 8010158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	cp = c18 + 8;
 801015c:	4bd1      	ldr	r3, [pc, #836]	; (80104a4 <IMDCT36+0x504>)
 801015e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	mOut = 0;
 8010162:	f04f 0300 	mov.w	r3, #0
 8010166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (btPrev == 0 && btCurr == 0) {
 801016a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801016e:	2b00      	cmp	r3, #0
 8010170:	f040 80b8 	bne.w	80102e4 <IMDCT36+0x344>
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	f040 80b4 	bne.w	80102e4 <IMDCT36+0x344>
		/* fast path - use symmetry of sin window to reduce windowing multiplies to 18 (N/2) */
		wp = fastWin36;
 801017c:	f241 1354 	movw	r3, #4436	; 0x1154
 8010180:	f6c0 0303 	movt	r3, #2051	; 0x803
 8010184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (i = 0; i < 9; i++) {
 8010188:	f04f 0300 	mov.w	r3, #0
 801018c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010190:	e0a2      	b.n	80102d8 <IMDCT36+0x338>
			/* do ARM-style pointer arithmetic (i still needed for y[] indexing - compiler spills if 2 y pointers) */
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 8010192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801019c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80101a0:	f1a3 0304 	sub.w	r3, r3, #4
 80101a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80101a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80101ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80101b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80101bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80101c0:	f1a3 0304 	sub.w	r3, r3, #4
 80101c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			/* gain 2 int bits here */
			xo = MULSHIFT32(c, xo);			/* 2*c18*xOdd (mul by 2 implicit in scaling)  */
 80101c8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80101cc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80101d0:	f7fe ffa6 	bl	800f120 <MULSHIFT32>
 80101d4:	4603      	mov	r3, r0
 80101d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			xe >>= 2;
 80101da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80101de:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80101e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f1c3 0300 	rsb	r3, r3, #0
 80101ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 80101f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80101f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80101fa:	1ad3      	subs	r3, r2, r3
 80101fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8010200:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010204:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010208:	18d2      	adds	r2, r2, r3
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	601a      	str	r2, [r3, #0]
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	f103 0304 	add.w	r3, r3, #4
 8010214:	60bb      	str	r3, [r7, #8]
			t = s - d;
 8010216:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801021a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801021e:	1ad3      	subs	r3, r2, r3
 8010220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8010224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801022e:	f102 0204 	add.w	r2, r2, #4
 8010232:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8010236:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 801023a:	4619      	mov	r1, r3
 801023c:	f7fe ff70 	bl	800f120 <MULSHIFT32>
 8010240:	4603      	mov	r3, r0
 8010242:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801024a:	18d3      	adds	r3, r2, r3
 801024c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			yHi = (s + (MULSHIFT32(t, *wp++) << 2));
 8010250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801025a:	f102 0204 	add.w	r2, r2, #4
 801025e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8010262:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8010266:	4619      	mov	r1, r3
 8010268:	f7fe ff5a 	bl	800f120 <MULSHIFT32>
 801026c:	4603      	mov	r3, r0
 801026e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010276:	18d3      	adds	r3, r2, r3
 8010278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			y[(i)*NBANDS]    = 	yLo;
 801027c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010280:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8010284:	687a      	ldr	r2, [r7, #4]
 8010286:	18d3      	adds	r3, r2, r3
 8010288:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801028c:	601a      	str	r2, [r3, #0]
			y[(17-i)*NBANDS] =  yHi;
 801028e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010292:	f1c3 0311 	rsb	r3, r3, #17
 8010296:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	18d3      	adds	r3, r2, r3
 801029e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80102a2:	601a      	str	r2, [r3, #0]
			mOut |= FASTABS(yLo);
 80102a4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80102a8:	f7fe ff4c 	bl	800f144 <FASTABS>
 80102ac:	4603      	mov	r3, r0
 80102ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80102b2:	4313      	orrs	r3, r2
 80102b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			mOut |= FASTABS(yHi);
 80102b8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80102bc:	f7fe ff42 	bl	800f144 <FASTABS>
 80102c0:	4603      	mov	r3, r0
 80102c2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80102c6:	4313      	orrs	r3, r2
 80102c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	cp = c18 + 8;
	mOut = 0;
	if (btPrev == 0 && btCurr == 0) {
		/* fast path - use symmetry of sin window to reduce windowing multiplies to 18 (N/2) */
		wp = fastWin36;
		for (i = 0; i < 9; i++) {
 80102cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102d0:	f103 0301 	add.w	r3, r3, #1
 80102d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80102d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102dc:	2b08      	cmp	r3, #8
 80102de:	f77f af58 	ble.w	8010192 <IMDCT36+0x1f2>
	idct9(xBuf+9);	/* odd */

	xp = xBuf + 8;
	cp = c18 + 8;
	mOut = 0;
	if (btPrev == 0 && btCurr == 0) {
 80102e2:	e0c6      	b.n	8010472 <IMDCT36+0x4d2>
		}
	} else {
		/* slower method - either prev or curr is using window type != 0 so do full 36-point window 
		 * output xPrevWin has at least 3 guard bits (xPrev has 2, gain 1 in WinPrevious)
		 */
		WinPrevious(xPrev, xPrevWin, btPrev);
 80102e4:	f107 0310 	add.w	r3, r7, #16
 80102e8:	68b8      	ldr	r0, [r7, #8]
 80102ea:	4619      	mov	r1, r3
 80102ec:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80102f0:	f7ff f924 	bl	800f53c <WinPrevious>

		wp = imdctWin[btCurr];
 80102f4:	683a      	ldr	r2, [r7, #0]
 80102f6:	4613      	mov	r3, r2
 80102f8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80102fc:	189b      	adds	r3, r3, r2
 80102fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010302:	461a      	mov	r2, r3
 8010304:	f241 2314 	movw	r3, #4628	; 0x1214
 8010308:	f6c0 0303 	movt	r3, #2051	; 0x803
 801030c:	18d3      	adds	r3, r2, r3
 801030e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (i = 0; i < 9; i++) {
 8010312:	f04f 0300 	mov.w	r3, #0
 8010316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801031a:	e0a5      	b.n	8010468 <IMDCT36+0x4c8>
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 801031c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801032a:	f1a3 0304 	sub.w	r3, r3, #4
 801032e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801033c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801034a:	f1a3 0304 	sub.w	r3, r3, #4
 801034e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			/* gain 2 int bits here */
			xo = MULSHIFT32(c, xo);			/* 2*c18*xOdd (mul by 2 implicit in scaling)  */
 8010352:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010356:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801035a:	f7fe fee1 	bl	800f120 <MULSHIFT32>
 801035e:	4603      	mov	r3, r0
 8010360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			xe >>= 2;
 8010364:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010368:	ea4f 03a3 	mov.w	r3, r3, asr #2
 801036c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

			d = xe - xo;
 8010370:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010378:	1ad3      	subs	r3, r2, r3
 801037a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 801037e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010386:	18d2      	adds	r2, r2, r3
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	601a      	str	r2, [r3, #0]
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	f103 0304 	add.w	r3, r3, #4
 8010392:	60bb      	str	r3, [r7, #8]
			
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8010394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010398:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801039c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80103a0:	18d3      	adds	r3, r2, r3
 80103a2:	f853 4cd0 	ldr.w	r4, [r3, #-208]
 80103a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80103ae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80103b2:	18d3      	adds	r3, r2, r3
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80103ba:	4619      	mov	r1, r3
 80103bc:	f7fe feb0 	bl	800f120 <MULSHIFT32>
 80103c0:	4603      	mov	r3, r0
 80103c2:	18e3      	adds	r3, r4, r3
 80103c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80103c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80103cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103d0:	f1c3 0311 	rsb	r3, r3, #17
 80103d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80103d8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80103dc:	18d3      	adds	r3, r2, r3
 80103de:	f853 4cd0 	ldr.w	r4, [r3, #-208]
 80103e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103e6:	f1c3 0311 	rsb	r3, r3, #17
 80103ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80103ee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80103f2:	18d3      	adds	r3, r2, r3
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80103fa:	4619      	mov	r1, r3
 80103fc:	f7fe fe90 	bl	800f120 <MULSHIFT32>
 8010400:	4603      	mov	r3, r0
 8010402:	18e3      	adds	r3, r4, r3
 8010404:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010408:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			y[(i)*NBANDS]    = yLo;
 801040c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010410:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	18d3      	adds	r3, r2, r3
 8010418:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801041c:	601a      	str	r2, [r3, #0]
			y[(17-i)*NBANDS] = yHi;
 801041e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010422:	f1c3 0311 	rsb	r3, r3, #17
 8010426:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	18d3      	adds	r3, r2, r3
 801042e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010432:	601a      	str	r2, [r3, #0]
			mOut |= FASTABS(yLo);
 8010434:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8010438:	f7fe fe84 	bl	800f144 <FASTABS>
 801043c:	4603      	mov	r3, r0
 801043e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010442:	4313      	orrs	r3, r2
 8010444:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			mOut |= FASTABS(yHi);
 8010448:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801044c:	f7fe fe7a 	bl	800f144 <FASTABS>
 8010450:	4603      	mov	r3, r0
 8010452:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010456:	4313      	orrs	r3, r2
 8010458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		 * output xPrevWin has at least 3 guard bits (xPrev has 2, gain 1 in WinPrevious)
		 */
		WinPrevious(xPrev, xPrevWin, btPrev);

		wp = imdctWin[btCurr];
		for (i = 0; i < 9; i++) {
 801045c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010460:	f103 0301 	add.w	r3, r3, #1
 8010464:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801046c:	2b08      	cmp	r3, #8
 801046e:	f77f af55 	ble.w	801031c <IMDCT36+0x37c>
			mOut |= FASTABS(yLo);
			mOut |= FASTABS(yHi);
		}
	}

	xPrev -= 9;
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
 8010478:	60bb      	str	r3, [r7, #8]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	68b9      	ldr	r1, [r7, #8]
 801047e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8010482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010486:	f7ff f9ff 	bl	800f888 <FreqInvertRescale>
 801048a:	4603      	mov	r3, r0
 801048c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010490:	4313      	orrs	r3, r2
 8010492:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	return mOut;
 8010496:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 801049a:	4618      	mov	r0, r3
 801049c:	f107 07e4 	add.w	r7, r7, #228	; 0xe4
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd90      	pop	{r4, r7, pc}
 80104a4:	08031150 	.word	0x08031150

080104a8 <imdct12>:

/* 12-point inverse DCT, used in IMDCT12x3() 
 * 4 input guard bits will ensure no overflow
 */
static __inline void imdct12 (int *x, int *out)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b08c      	sub	sp, #48	; 0x30
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
	int a0, a1, a2;
	int x0, x1, x2, x3, x4, x5;

	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f103 030c 	add.w	r3, r3, #12
 80104be:	607b      	str	r3, [r7, #4]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f103 030c 	add.w	r3, r3, #12
 80104cc:	607b      	str	r3, [r7, #4]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	627b      	str	r3, [r7, #36]	; 0x24
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f103 030c 	add.w	r3, r3, #12
 80104da:	607b      	str	r3, [r7, #4]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	623b      	str	r3, [r7, #32]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f103 030c 	add.w	r3, r3, #12
 80104e8:	607b      	str	r3, [r7, #4]
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	61fb      	str	r3, [r7, #28]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f103 030c 	add.w	r3, r3, #12
 80104f6:	607b      	str	r3, [r7, #4]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	61bb      	str	r3, [r7, #24]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f103 030c 	add.w	r3, r3, #12
 8010504:	607b      	str	r3, [r7, #4]

	x4 -= x5;
 8010506:	69fa      	ldr	r2, [r7, #28]
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	61fb      	str	r3, [r7, #28]
	x3 -= x4;
 801050e:	6a3a      	ldr	r2, [r7, #32]
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	1ad3      	subs	r3, r2, r3
 8010514:	623b      	str	r3, [r7, #32]
	x2 -= x3;
 8010516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010518:	6a3b      	ldr	r3, [r7, #32]
 801051a:	1ad3      	subs	r3, r2, r3
 801051c:	627b      	str	r3, [r7, #36]	; 0x24
	x3 -= x5;
 801051e:	6a3a      	ldr	r2, [r7, #32]
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	1ad3      	subs	r3, r2, r3
 8010524:	623b      	str	r3, [r7, #32]
	x1 -= x2;
 8010526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	62bb      	str	r3, [r7, #40]	; 0x28
	x0 -= x1;
 801052e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010532:	1ad3      	subs	r3, r2, r3
 8010534:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 -= x3;
 8010536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010538:	6a3b      	ldr	r3, [r7, #32]
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	62bb      	str	r3, [r7, #40]	; 0x28

	x0 >>= 1;
 801053e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010540:	ea4f 0363 	mov.w	r3, r3, asr #1
 8010544:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 >>= 1;
 8010546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010548:	ea4f 0363 	mov.w	r3, r3, asr #1
 801054c:	62bb      	str	r3, [r7, #40]	; 0x28

	a0 = MULSHIFT32(c3_0, x2) << 1;
 801054e:	f241 139c 	movw	r3, #4508	; 0x119c
 8010552:	f6c0 0303 	movt	r3, #2051	; 0x803
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4618      	mov	r0, r3
 801055a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801055c:	f7fe fde0 	bl	800f120 <MULSHIFT32>
 8010560:	4603      	mov	r3, r0
 8010562:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010566:	617b      	str	r3, [r7, #20]
	a1 = x0 + (x4 >> 1);
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	ea4f 0263 	mov.w	r2, r3, asr #1
 801056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010570:	18d3      	adds	r3, r2, r3
 8010572:	613b      	str	r3, [r7, #16]
	a2 = x0 - x4;
 8010574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	1ad3      	subs	r3, r2, r3
 801057a:	60fb      	str	r3, [r7, #12]
	x0 = a1 + a0;
 801057c:	693a      	ldr	r2, [r7, #16]
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	18d3      	adds	r3, r2, r3
 8010582:	62fb      	str	r3, [r7, #44]	; 0x2c
	x2 = a2;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	627b      	str	r3, [r7, #36]	; 0x24
	x4 = a1 - a0;
 8010588:	693a      	ldr	r2, [r7, #16]
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	61fb      	str	r3, [r7, #28]

	a0 = MULSHIFT32(c3_0, x3) << 1;
 8010590:	f241 139c 	movw	r3, #4508	; 0x119c
 8010594:	f6c0 0303 	movt	r3, #2051	; 0x803
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	4618      	mov	r0, r3
 801059c:	6a39      	ldr	r1, [r7, #32]
 801059e:	f7fe fdbf 	bl	800f120 <MULSHIFT32>
 80105a2:	4603      	mov	r3, r0
 80105a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80105a8:	617b      	str	r3, [r7, #20]
	a1 = x1 + (x5 >> 1);
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	ea4f 0263 	mov.w	r2, r3, asr #1
 80105b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b2:	18d3      	adds	r3, r2, r3
 80105b4:	613b      	str	r3, [r7, #16]
	a2 = x1 - x5;
 80105b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	1ad3      	subs	r3, r2, r3
 80105bc:	60fb      	str	r3, [r7, #12]

	/* cos window odd samples, mul by 2, eat sign bit */
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 80105be:	f241 13a0 	movw	r3, #4512	; 0x11a0
 80105c2:	f6c0 0303 	movt	r3, #2051	; 0x803
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	6939      	ldr	r1, [r7, #16]
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	18cb      	adds	r3, r1, r3
 80105ce:	4610      	mov	r0, r2
 80105d0:	4619      	mov	r1, r3
 80105d2:	f7fe fda5 	bl	800f120 <MULSHIFT32>
 80105d6:	4603      	mov	r3, r0
 80105d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80105dc:	62bb      	str	r3, [r7, #40]	; 0x28
	x3 = MULSHIFT32(c6[1], a2) << 2;
 80105de:	f241 13a0 	movw	r3, #4512	; 0x11a0
 80105e2:	f6c0 0303 	movt	r3, #2051	; 0x803
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	4618      	mov	r0, r3
 80105ea:	68f9      	ldr	r1, [r7, #12]
 80105ec:	f7fe fd98 	bl	800f120 <MULSHIFT32>
 80105f0:	4603      	mov	r3, r0
 80105f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80105f6:	623b      	str	r3, [r7, #32]
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 80105f8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 80105fc:	f6c0 0303 	movt	r3, #2051	; 0x803
 8010600:	689a      	ldr	r2, [r3, #8]
 8010602:	6939      	ldr	r1, [r7, #16]
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	1acb      	subs	r3, r1, r3
 8010608:	4610      	mov	r0, r2
 801060a:	4619      	mov	r1, r3
 801060c:	f7fe fd88 	bl	800f120 <MULSHIFT32>
 8010610:	4603      	mov	r3, r0
 8010612:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010616:	61bb      	str	r3, [r7, #24]

	*out = x0 + x1;	out++;
 8010618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	18d2      	adds	r2, r2, r3
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	601a      	str	r2, [r3, #0]
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	f103 0304 	add.w	r3, r3, #4
 8010628:	603b      	str	r3, [r7, #0]
	*out = x2 + x3;	out++;
 801062a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801062c:	6a3b      	ldr	r3, [r7, #32]
 801062e:	18d2      	adds	r2, r2, r3
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	601a      	str	r2, [r3, #0]
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	f103 0304 	add.w	r3, r3, #4
 801063a:	603b      	str	r3, [r7, #0]
	*out = x4 + x5;	out++;
 801063c:	69fa      	ldr	r2, [r7, #28]
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	18d2      	adds	r2, r2, r3
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	601a      	str	r2, [r3, #0]
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	f103 0304 	add.w	r3, r3, #4
 801064c:	603b      	str	r3, [r7, #0]
	*out = x4 - x5;	out++;
 801064e:	69fa      	ldr	r2, [r7, #28]
 8010650:	69bb      	ldr	r3, [r7, #24]
 8010652:	1ad2      	subs	r2, r2, r3
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	601a      	str	r2, [r3, #0]
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	f103 0304 	add.w	r3, r3, #4
 801065e:	603b      	str	r3, [r7, #0]
	*out = x2 - x3;	out++;
 8010660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010662:	6a3b      	ldr	r3, [r7, #32]
 8010664:	1ad2      	subs	r2, r2, r3
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	f103 0304 	add.w	r3, r3, #4
 8010670:	603b      	str	r3, [r7, #0]
	*out = x0 - x1;
 8010672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010676:	1ad2      	subs	r2, r2, r3
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	601a      	str	r2, [r3, #0]
}
 801067c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <IMDCT12x3>:
 * Return:      mOut (OR of abs(y) for all y calculated here)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
static int IMDCT12x3(int *xCurr, int *xPrev, int *y, int btPrev, int blockIdx, int gb)
{
 8010684:	b5b0      	push	{r4, r5, r7, lr}
 8010686:	b0ae      	sub	sp, #184	; 0xb8
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
 8010690:	603b      	str	r3, [r7, #0]
	int i, es, mOut, yLo, xBuf[18], xPrevWin[18];	/* need temp buffer for reordering short blocks */
	const int *wp;

	es = 0;
 8010692:	f04f 0300 	mov.w	r3, #0
 8010696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	/* 7 gb is always adequate for accumulator loop + idct12 + window + overlap */
	if (gb < 7) {
 801069a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801069e:	2b06      	cmp	r3, #6
 80106a0:	dc4b      	bgt.n	801073a <IMDCT12x3+0xb6>
		es = 7 - gb;
 80106a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80106a6:	f1c3 0307 	rsb	r3, r3, #7
 80106aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (i = 0; i < 18; i+=2) {
 80106ae:	f04f 0300 	mov.w	r3, #0
 80106b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80106b6:	e038      	b.n	801072a <IMDCT12x3+0xa6>
			xCurr[i+0] >>= es;
 80106b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	18d3      	adds	r3, r2, r3
 80106c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80106c8:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80106cc:	68f9      	ldr	r1, [r7, #12]
 80106ce:	188a      	adds	r2, r1, r2
 80106d0:	6811      	ldr	r1, [r2, #0]
 80106d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80106d6:	fa41 f202 	asr.w	r2, r1, r2
 80106da:	601a      	str	r2, [r3, #0]
			xCurr[i+1] >>= es;
 80106dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106e0:	f103 0301 	add.w	r3, r3, #1
 80106e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	18d3      	adds	r3, r2, r3
 80106ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80106f0:	f102 0201 	add.w	r2, r2, #1
 80106f4:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80106f8:	68f9      	ldr	r1, [r7, #12]
 80106fa:	188a      	adds	r2, r1, r2
 80106fc:	6811      	ldr	r1, [r2, #0]
 80106fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010702:	fa41 f202 	asr.w	r2, r1, r2
 8010706:	601a      	str	r2, [r3, #0]
			*xPrev++ >>= es;
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	6819      	ldr	r1, [r3, #0]
 801070c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010710:	fa41 f202 	asr.w	r2, r1, r2
 8010714:	601a      	str	r2, [r3, #0]
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	f103 0304 	add.w	r3, r3, #4
 801071c:	60bb      	str	r3, [r7, #8]

	es = 0;
	/* 7 gb is always adequate for accumulator loop + idct12 + window + overlap */
	if (gb < 7) {
		es = 7 - gb;
		for (i = 0; i < 18; i+=2) {
 801071e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010722:	f103 0302 	add.w	r3, r3, #2
 8010726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801072a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801072e:	2b11      	cmp	r3, #17
 8010730:	ddc2      	ble.n	80106b8 <IMDCT12x3+0x34>
			xCurr[i+0] >>= es;
			xCurr[i+1] >>= es;
			*xPrev++ >>= es;
		}
		xPrev -= 9;
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
 8010738:	60bb      	str	r3, [r7, #8]
	}

	/* requires 4 input guard bits for each imdct12 */
	imdct12(xCurr + 0, xBuf + 0);
 801073a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801073e:	68f8      	ldr	r0, [r7, #12]
 8010740:	4619      	mov	r1, r3
 8010742:	f7ff feb1 	bl	80104a8 <imdct12>
	imdct12(xCurr + 1, xBuf + 6);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f103 0204 	add.w	r2, r3, #4
 801074c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010750:	f103 0318 	add.w	r3, r3, #24
 8010754:	4610      	mov	r0, r2
 8010756:	4619      	mov	r1, r3
 8010758:	f7ff fea6 	bl	80104a8 <imdct12>
	imdct12(xCurr + 2, xBuf + 12);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f103 0208 	add.w	r2, r3, #8
 8010762:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010766:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801076a:	4610      	mov	r0, r2
 801076c:	4619      	mov	r1, r3
 801076e:	f7ff fe9b 	bl	80104a8 <imdct12>

	/* window previous from last time */
	WinPrevious(xPrev, xPrevWin, btPrev);
 8010772:	f107 0314 	add.w	r3, r7, #20
 8010776:	68b8      	ldr	r0, [r7, #8]
 8010778:	4619      	mov	r1, r3
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	f7fe fede 	bl	800f53c <WinPrevious>

	/* could unroll this for speed, minimum loads (short blocks usually rare, so doesn't make much overall difference) 
	 * xPrevWin[i] << 2 still has 1 gb always, max gain of windowed xBuf stuff also < 1.0 and gain the sign bit
	 * so y calculations won't overflow
	 */
	wp = imdctWin[2];
 8010780:	4bd5      	ldr	r3, [pc, #852]	; (8010ad8 <IMDCT12x3+0x454>)
 8010782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	mOut = 0;
 8010786:	f04f 0300 	mov.w	r3, #0
 801078a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for (i = 0; i < 3; i++) {
 801078e:	f04f 0300 	mov.w	r3, #0
 8010792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010796:	e175      	b.n	8010a84 <IMDCT12x3+0x400>
		yLo = (xPrevWin[ 0+i] << 2);
 8010798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801079c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80107a0:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80107a4:	18cb      	adds	r3, r1, r3
 80107a6:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80107aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80107ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 80107b2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80107b6:	f7fe fcc5 	bl	800f144 <FASTABS>
 80107ba:	4603      	mov	r3, r0
 80107bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80107c0:	4313      	orrs	r3, r2
 80107c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80107c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80107ca:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	18d3      	adds	r3, r2, r3
 80107d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80107d6:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[ 3+i] << 2);
 80107d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80107dc:	f103 0303 	add.w	r3, r3, #3
 80107e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80107e4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80107e8:	18d3      	adds	r3, r2, r3
 80107ea:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80107ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80107f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 80107f6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80107fa:	f7fe fca3 	bl	800f144 <FASTABS>
 80107fe:	4603      	mov	r3, r0
 8010800:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010804:	4313      	orrs	r3, r2
 8010806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801080a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801080e:	f103 0303 	add.w	r3, r3, #3
 8010812:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	18d3      	adds	r3, r2, r3
 801081a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801081e:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8010820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010824:	f103 0306 	add.w	r3, r3, #6
 8010828:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801082c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8010830:	18cb      	adds	r3, r1, r3
 8010832:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8010836:	ea4f 0483 	mov.w	r4, r3, lsl #2
 801083a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801083e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010846:	18d3      	adds	r3, r2, r3
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801084e:	f103 0303 	add.w	r3, r3, #3
 8010852:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010856:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801085a:	18cb      	adds	r3, r1, r3
 801085c:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8010860:	4610      	mov	r0, r2
 8010862:	4619      	mov	r1, r3
 8010864:	f7fe fc5c 	bl	800f120 <MULSHIFT32>
 8010868:	4603      	mov	r3, r0
 801086a:	18e3      	adds	r3, r4, r3
 801086c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8010870:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8010874:	f7fe fc66 	bl	800f144 <FASTABS>
 8010878:	4603      	mov	r3, r0
 801087a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801087e:	4313      	orrs	r3, r2
 8010880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010884:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010888:	f103 0306 	add.w	r3, r3, #6
 801088c:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	18d3      	adds	r3, r2, r3
 8010894:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010898:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 801089a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801089e:	f103 0309 	add.w	r3, r3, #9
 80108a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80108a6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80108aa:	18d3      	adds	r3, r2, r3
 80108ac:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80108b0:	ea4f 0483 	mov.w	r4, r3, lsl #2
 80108b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80108b8:	f103 0303 	add.w	r3, r3, #3
 80108bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80108c0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80108c4:	18d3      	adds	r3, r2, r3
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80108cc:	f1c3 0305 	rsb	r3, r3, #5
 80108d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80108d4:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80108d8:	18cb      	adds	r3, r1, r3
 80108da:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80108de:	4610      	mov	r0, r2
 80108e0:	4619      	mov	r1, r3
 80108e2:	f7fe fc1d 	bl	800f120 <MULSHIFT32>
 80108e6:	4603      	mov	r3, r0
 80108e8:	18e3      	adds	r3, r4, r3
 80108ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 80108ee:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80108f2:	f7fe fc27 	bl	800f144 <FASTABS>
 80108f6:	4603      	mov	r3, r0
 80108f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80108fc:	4313      	orrs	r3, r2
 80108fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010906:	f103 0309 	add.w	r3, r3, #9
 801090a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	18d3      	adds	r3, r2, r3
 8010912:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010916:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8010918:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801091c:	f103 030c 	add.w	r3, r3, #12
 8010920:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010924:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8010928:	18d3      	adds	r3, r2, r3
 801092a:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 801092e:	ea4f 0483 	mov.w	r4, r3, lsl #2
 8010932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010936:	f103 0306 	add.w	r3, r3, #6
 801093a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801093e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010942:	18d3      	adds	r3, r2, r3
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801094a:	f1c3 0302 	rsb	r3, r3, #2
 801094e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010952:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8010956:	18cb      	adds	r3, r1, r3
 8010958:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 801095c:	4610      	mov	r0, r2
 801095e:	4619      	mov	r1, r3
 8010960:	f7fe fbde 	bl	800f120 <MULSHIFT32>
 8010964:	4605      	mov	r5, r0
 8010966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801096a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801096e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010972:	18d3      	adds	r3, r2, r3
 8010974:	681a      	ldr	r2, [r3, #0]
 8010976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801097a:	f103 0309 	add.w	r3, r3, #9
 801097e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010982:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8010986:	18cb      	adds	r3, r1, r3
 8010988:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 801098c:	4610      	mov	r0, r2
 801098e:	4619      	mov	r1, r3
 8010990:	f7fe fbc6 	bl	800f120 <MULSHIFT32>
 8010994:	4603      	mov	r3, r0
 8010996:	18eb      	adds	r3, r5, r3
 8010998:	18e3      	adds	r3, r4, r3
 801099a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 801099e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80109a2:	f7fe fbcf 	bl	800f144 <FASTABS>
 80109a6:	4603      	mov	r3, r0
 80109a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80109ac:	4313      	orrs	r3, r2
 80109ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80109b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80109b6:	f103 030c 	add.w	r3, r3, #12
 80109ba:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	18d3      	adds	r3, r2, r3
 80109c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80109c6:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 80109c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80109cc:	f103 030f 	add.w	r3, r3, #15
 80109d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80109d4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80109d8:	18d3      	adds	r3, r2, r3
 80109da:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80109de:	ea4f 0483 	mov.w	r4, r3, lsl #2
 80109e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80109e6:	f103 0309 	add.w	r3, r3, #9
 80109ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80109ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80109f2:	18d3      	adds	r3, r2, r3
 80109f4:	681a      	ldr	r2, [r3, #0]
 80109f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80109fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80109fe:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8010a02:	18cb      	adds	r3, r1, r3
 8010a04:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8010a08:	4610      	mov	r0, r2
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	f7fe fb88 	bl	800f120 <MULSHIFT32>
 8010a10:	4605      	mov	r5, r0
 8010a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a16:	f103 0303 	add.w	r3, r3, #3
 8010a1a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010a22:	18d3      	adds	r3, r2, r3
 8010a24:	681a      	ldr	r2, [r3, #0]
 8010a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a2a:	f1c3 030b 	rsb	r3, r3, #11
 8010a2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010a32:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8010a36:	18cb      	adds	r3, r1, r3
 8010a38:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	4619      	mov	r1, r3
 8010a40:	f7fe fb6e 	bl	800f120 <MULSHIFT32>
 8010a44:	4603      	mov	r3, r0
 8010a46:	18eb      	adds	r3, r5, r3
 8010a48:	18e3      	adds	r3, r4, r3
 8010a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8010a4e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8010a52:	f7fe fb77 	bl	800f144 <FASTABS>
 8010a56:	4603      	mov	r3, r0
 8010a58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010a5c:	4313      	orrs	r3, r2
 8010a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010a62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a66:	f103 030f 	add.w	r3, r3, #15
 8010a6a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	18d3      	adds	r3, r2, r3
 8010a72:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010a76:	601a      	str	r2, [r3, #0]
	 * xPrevWin[i] << 2 still has 1 gb always, max gain of windowed xBuf stuff also < 1.0 and gain the sign bit
	 * so y calculations won't overflow
	 */
	wp = imdctWin[2];
	mOut = 0;
	for (i = 0; i < 3; i++) {
 8010a78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a7c:	f103 0301 	add.w	r3, r3, #1
 8010a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010a84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a88:	2b02      	cmp	r3, #2
 8010a8a:	f77f ae85 	ble.w	8010798 <IMDCT12x3+0x114>
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
	}

	/* save previous (unwindowed) for overlap - only need samples 6-8, 12-17 */
	for (i = 6; i < 9; i++)
 8010a8e:	f04f 0306 	mov.w	r3, #6
 8010a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010a96:	e016      	b.n	8010ac6 <IMDCT12x3+0x442>
		*xPrev++ = xBuf[i] >> 2;
 8010a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010aa0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8010aa4:	18d3      	adds	r3, r2, r3
 8010aa6:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8010aaa:	ea4f 02a3 	mov.w	r2, r3, asr #2
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	f103 0304 	add.w	r3, r3, #4
 8010ab8:	60bb      	str	r3, [r7, #8]
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
	}

	/* save previous (unwindowed) for overlap - only need samples 6-8, 12-17 */
	for (i = 6; i < 9; i++)
 8010aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010abe:	f103 0301 	add.w	r3, r3, #1
 8010ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ac6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010aca:	2b08      	cmp	r3, #8
 8010acc:	dde4      	ble.n	8010a98 <IMDCT12x3+0x414>
		*xPrev++ = xBuf[i] >> 2;
	for (i = 12; i < 18; i++)
 8010ace:	f04f 030c 	mov.w	r3, #12
 8010ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ad6:	e018      	b.n	8010b0a <IMDCT12x3+0x486>
 8010ad8:	08031334 	.word	0x08031334
		*xPrev++ = xBuf[i] >> 2;
 8010adc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010ae0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010ae4:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8010ae8:	18cb      	adds	r3, r1, r3
 8010aea:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8010aee:	ea4f 02a3 	mov.w	r2, r3, asr #2
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	601a      	str	r2, [r3, #0]
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	f103 0304 	add.w	r3, r3, #4
 8010afc:	60bb      	str	r3, [r7, #8]
	}

	/* save previous (unwindowed) for overlap - only need samples 6-8, 12-17 */
	for (i = 6; i < 9; i++)
		*xPrev++ = xBuf[i] >> 2;
	for (i = 12; i < 18; i++)
 8010afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010b02:	f103 0301 	add.w	r3, r3, #1
 8010b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010b0e:	2b11      	cmp	r3, #17
 8010b10:	dde4      	ble.n	8010adc <IMDCT12x3+0x458>
		*xPrev++ = xBuf[i] >> 2;

	xPrev -= 9;
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
 8010b18:	60bb      	str	r3, [r7, #8]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	68b9      	ldr	r1, [r7, #8]
 8010b1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010b22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010b26:	f7fe feaf 	bl	800f888 <FreqInvertRescale>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010b30:	4313      	orrs	r3, r2
 8010b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	return mOut;
 8010b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f107 07b8 	add.w	r7, r7, #184	; 0xb8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bdb0      	pop	{r4, r5, r7, pc}

08010b44 <HybridTransform>:
 *                (including overlap-add)
 *
 * TODO:        examine mixedBlock/winSwitch logic carefully (test he_mode.bit)
 **************************************************************************************/
static int HybridTransform(int *xCurr, int *xPrev, int y[BLOCK_SIZE][NBANDS], SideInfoSub *sis, BlockCount *bc)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b0a4      	sub	sp, #144	; 0x90
 8010b48:	af04      	add	r7, sp, #16
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
 8010b50:	603b      	str	r3, [r7, #0]

	ASSERT(bc->nBlocksLong  <= NBANDS);
	ASSERT(bc->nBlocksTotal <= NBANDS);
	ASSERT(bc->nBlocksPrev  <= NBANDS);

	mOut = 0;
 8010b52:	f04f 0300 	mov.w	r3, #0
 8010b56:	667b      	str	r3, [r7, #100]	; 0x64

	/* do long blocks, if any */
	for(i = 0; i < bc->nBlocksLong; i++) {
 8010b58:	f04f 0300 	mov.w	r3, #0
 8010b5c:	677b      	str	r3, [r7, #116]	; 0x74
 8010b5e:	e03f      	b.n	8010be0 <HybridTransform+0x9c>
		/* currWinIdx picks the right window for long blocks (if mixed, long blocks use window type 0) */
		currWinIdx = sis->blockType;
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	695b      	ldr	r3, [r3, #20]
 8010b64:	67fb      	str	r3, [r7, #124]	; 0x7c
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	699b      	ldr	r3, [r3, #24]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d008      	beq.n	8010b80 <HybridTransform+0x3c>
 8010b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b72:	695a      	ldr	r2, [r3, #20]
 8010b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b76:	429a      	cmp	r2, r3
 8010b78:	dd02      	ble.n	8010b80 <HybridTransform+0x3c>
			currWinIdx = 0;
 8010b7a:	f04f 0300 	mov.w	r3, #0
 8010b7e:	67fb      	str	r3, [r7, #124]	; 0x7c

		prevWinIdx = bc->prevType;
 8010b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	67bb      	str	r3, [r7, #120]	; 0x78
		if (i < bc->prevWinSwitch)
 8010b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b8c:	691a      	ldr	r2, [r3, #16]
 8010b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b90:	429a      	cmp	r2, r3
 8010b92:	dd02      	ble.n	8010b9a <HybridTransform+0x56>
			 prevWinIdx = 0;
 8010b94:	f04f 0300 	mov.w	r3, #0
 8010b98:	67bb      	str	r3, [r7, #120]	; 0x78

		/* do 36-point IMDCT, including windowing and overlap-add */
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 8010b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	18d3      	adds	r3, r2, r3
 8010ba4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010ba8:	6992      	ldr	r2, [r2, #24]
 8010baa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010bac:	9100      	str	r1, [sp, #0]
 8010bae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010bb0:	9101      	str	r1, [sp, #4]
 8010bb2:	9202      	str	r2, [sp, #8]
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	68b9      	ldr	r1, [r7, #8]
 8010bb8:	461a      	mov	r2, r3
 8010bba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010bbc:	f7ff f9f0 	bl	800ffa0 <IMDCT36>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010bc4:	4313      	orrs	r3, r2
 8010bc6:	667b      	str	r3, [r7, #100]	; 0x64
		xCurr += 18;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8010bce:	60fb      	str	r3, [r7, #12]
		xPrev += 9;
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8010bd6:	60bb      	str	r3, [r7, #8]
	ASSERT(bc->nBlocksPrev  <= NBANDS);

	mOut = 0;

	/* do long blocks, if any */
	for(i = 0; i < bc->nBlocksLong; i++) {
 8010bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bda:	f103 0301 	add.w	r3, r3, #1
 8010bde:	677b      	str	r3, [r7, #116]	; 0x74
 8010be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010be8:	429a      	cmp	r2, r3
 8010bea:	dcb9      	bgt.n	8010b60 <HybridTransform+0x1c>
		xCurr += 18;
		xPrev += 9;
	}

	/* do short blocks (if any) */
	for (   ; i < bc->nBlocksTotal; i++) {
 8010bec:	e02d      	b.n	8010c4a <HybridTransform+0x106>
		ASSERT(sis->blockType == 2);

		prevWinIdx = bc->prevType;
 8010bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bf2:	68db      	ldr	r3, [r3, #12]
 8010bf4:	67bb      	str	r3, [r7, #120]	; 0x78
		if (i < bc->prevWinSwitch)
 8010bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bfa:	691a      	ldr	r2, [r3, #16]
 8010bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	dd02      	ble.n	8010c08 <HybridTransform+0xc4>
			 prevWinIdx = 0;
 8010c02:	f04f 0300 	mov.w	r3, #0
 8010c06:	67bb      	str	r3, [r7, #120]	; 0x78
		
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8010c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c0a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	18d3      	adds	r3, r2, r3
 8010c12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010c16:	6992      	ldr	r2, [r2, #24]
 8010c18:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010c1a:	9100      	str	r1, [sp, #0]
 8010c1c:	9201      	str	r2, [sp, #4]
 8010c1e:	68f8      	ldr	r0, [r7, #12]
 8010c20:	68b9      	ldr	r1, [r7, #8]
 8010c22:	461a      	mov	r2, r3
 8010c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c26:	f7ff fd2d 	bl	8010684 <IMDCT12x3>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	667b      	str	r3, [r7, #100]	; 0x64
		xCurr += 18;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8010c38:	60fb      	str	r3, [r7, #12]
		xPrev += 9;
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8010c40:	60bb      	str	r3, [r7, #8]
		xCurr += 18;
		xPrev += 9;
	}

	/* do short blocks (if any) */
	for (   ; i < bc->nBlocksTotal; i++) {
 8010c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c44:	f103 0301 	add.w	r3, r3, #1
 8010c48:	677b      	str	r3, [r7, #116]	; 0x74
 8010c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c4e:	685a      	ldr	r2, [r3, #4]
 8010c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c52:	429a      	cmp	r2, r3
 8010c54:	dccb      	bgt.n	8010bee <HybridTransform+0xaa>
		
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
		xCurr += 18;
		xPrev += 9;
	}
	nBlocksOut = i;
 8010c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c58:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	/* window and overlap prev if prev longer that current */
	for (   ; i < bc->nBlocksPrev; i++) {
 8010c5a:	e08a      	b.n	8010d72 <HybridTransform+0x22e>
		prevWinIdx = bc->prevType;
 8010c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	67bb      	str	r3, [r7, #120]	; 0x78
		if (i < bc->prevWinSwitch)
 8010c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c68:	691a      	ldr	r2, [r3, #16]
 8010c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	dd02      	ble.n	8010c76 <HybridTransform+0x132>
			 prevWinIdx = 0;
 8010c70:	f04f 0300 	mov.w	r3, #0
 8010c74:	67bb      	str	r3, [r7, #120]	; 0x78
		WinPrevious(xPrev, xPrevWin, prevWinIdx);
 8010c76:	f107 0314 	add.w	r3, r7, #20
 8010c7a:	68b8      	ldr	r0, [r7, #8]
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010c80:	f7fe fc5c 	bl	800f53c <WinPrevious>

		nonZero = 0;
 8010c84:	f04f 0300 	mov.w	r3, #0
 8010c88:	66bb      	str	r3, [r7, #104]	; 0x68
		fiBit = i << 31;
 8010c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c8c:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 8010c90:	663b      	str	r3, [r7, #96]	; 0x60
		for (j = 0; j < 9; j++) {
 8010c92:	f04f 0300 	mov.w	r3, #0
 8010c96:	673b      	str	r3, [r7, #112]	; 0x70
 8010c98:	e05b      	b.n	8010d52 <HybridTransform+0x20e>
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8010c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ca0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010ca4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8010ca8:	18d3      	adds	r3, r2, r3
 8010caa:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8010cae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
			nonZero |= xp;
 8010cb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	66bb      	str	r3, [r7, #104]	; 0x68
			y[2*j+0][i] = xp;
 8010cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010cbe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	18d3      	adds	r3, r2, r3
 8010cc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010cc8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mOut |= FASTABS(xp);
 8010cce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8010cd0:	f7fe fa38 	bl	800f144 <FASTABS>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010cd8:	4313      	orrs	r3, r2
 8010cda:	667b      	str	r3, [r7, #100]	; 0x64

			/* frequency inversion on odd blocks/odd samples (flip sign if i odd, j odd) */
			xp = xPrevWin[2*j+1] << 2;
 8010cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010cde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ce2:	f103 0301 	add.w	r3, r3, #1
 8010ce6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010cea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8010cee:	18d3      	adds	r3, r2, r3
 8010cf0:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8010cf4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8010cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cfc:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8010d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d02:	405a      	eors	r2, r3
 8010d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d06:	f003 0301 	and.w	r3, r3, #1
 8010d0a:	18d3      	adds	r3, r2, r3
 8010d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
			nonZero |= xp;
 8010d0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d12:	4313      	orrs	r3, r2
 8010d14:	66bb      	str	r3, [r7, #104]	; 0x68
			y[2*j+1][i] = xp;
 8010d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d18:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010d1c:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	18d3      	adds	r3, r2, r3
 8010d24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010d26:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mOut |= FASTABS(xp);
 8010d2c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8010d2e:	f7fe fa09 	bl	800f144 <FASTABS>
 8010d32:	4603      	mov	r3, r0
 8010d34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010d36:	4313      	orrs	r3, r2
 8010d38:	667b      	str	r3, [r7, #100]	; 0x64

			xPrev[j] = 0;
 8010d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	18d3      	adds	r3, r2, r3
 8010d44:	f04f 0200 	mov.w	r2, #0
 8010d48:	601a      	str	r2, [r3, #0]
			 prevWinIdx = 0;
		WinPrevious(xPrev, xPrevWin, prevWinIdx);

		nonZero = 0;
		fiBit = i << 31;
		for (j = 0; j < 9; j++) {
 8010d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d4c:	f103 0301 	add.w	r3, r3, #1
 8010d50:	673b      	str	r3, [r7, #112]	; 0x70
 8010d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d54:	2b08      	cmp	r3, #8
 8010d56:	dda0      	ble.n	8010c9a <HybridTransform+0x156>
			y[2*j+1][i] = xp;
			mOut |= FASTABS(xp);

			xPrev[j] = 0;
		}
		xPrev += 9;
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8010d5e:	60bb      	str	r3, [r7, #8]
		if (nonZero)
 8010d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d001      	beq.n	8010d6a <HybridTransform+0x226>
			nBlocksOut = i;
 8010d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d68:	66fb      	str	r3, [r7, #108]	; 0x6c
		xPrev += 9;
	}
	nBlocksOut = i;
	
	/* window and overlap prev if prev longer that current */
	for (   ; i < bc->nBlocksPrev; i++) {
 8010d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d6c:	f103 0301 	add.w	r3, r3, #1
 8010d70:	677b      	str	r3, [r7, #116]	; 0x74
 8010d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d76:	689a      	ldr	r2, [r3, #8]
 8010d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	f73f af6e 	bgt.w	8010c5c <HybridTransform+0x118>
		if (nonZero)
			nBlocksOut = i;
	}
	
	/* clear rest of blocks */
	for (   ; i < 32; i++) {
 8010d80:	e018      	b.n	8010db4 <HybridTransform+0x270>
		for (j = 0; j < 18; j++) 
 8010d82:	f04f 0300 	mov.w	r3, #0
 8010d86:	673b      	str	r3, [r7, #112]	; 0x70
 8010d88:	e00d      	b.n	8010da6 <HybridTransform+0x262>
			y[j][i] = 0;
 8010d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d8c:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	18d3      	adds	r3, r2, r3
 8010d94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010d96:	f04f 0100 	mov.w	r1, #0
 8010d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			nBlocksOut = i;
	}
	
	/* clear rest of blocks */
	for (   ; i < 32; i++) {
		for (j = 0; j < 18; j++) 
 8010d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010da0:	f103 0301 	add.w	r3, r3, #1
 8010da4:	673b      	str	r3, [r7, #112]	; 0x70
 8010da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010da8:	2b11      	cmp	r3, #17
 8010daa:	ddee      	ble.n	8010d8a <HybridTransform+0x246>
		if (nonZero)
			nBlocksOut = i;
	}
	
	/* clear rest of blocks */
	for (   ; i < 32; i++) {
 8010dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010dae:	f103 0301 	add.w	r3, r3, #1
 8010db2:	677b      	str	r3, [r7, #116]	; 0x74
 8010db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010db6:	2b1f      	cmp	r3, #31
 8010db8:	dde3      	ble.n	8010d82 <HybridTransform+0x23e>
		for (j = 0; j < 18; j++) 
			y[j][i] = 0;
	}

	bc->gbOut = CLZ(mOut) - 1;
 8010dba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010dbc:	f7fe f9da 	bl	800f174 <CLZ>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	f103 32ff 	add.w	r2, r3, #4294967295
 8010dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dca:	61da      	str	r2, [r3, #28]

	return nBlocksOut;
 8010dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f107 0780 	add.w	r7, r7, #128	; 0x80
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <xmp3_IMDCT>:
 *              updated hi->nonZeroBound index for this channel
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
int IMDCT(MP3DecInfo *mp3DecInfo, int gr, int ch)
{
 8010dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dda:	b095      	sub	sp, #84	; 0x54
 8010ddc:	af02      	add	r7, sp, #8
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00f      	beq.n	8010e0a <xmp3_IMDCT+0x32>
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d00b      	beq.n	8010e0a <xmp3_IMDCT+0x32>
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d007      	beq.n	8010e0a <xmp3_IMDCT+0x32>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	68db      	ldr	r3, [r3, #12]
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d003      	beq.n	8010e0a <xmp3_IMDCT+0x32>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	695b      	ldr	r3, [r3, #20]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d102      	bne.n	8010e10 <xmp3_IMDCT+0x38>
		return -1;
 8010e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8010e0e:	e17e      	b.n	801110e <xmp3_IMDCT+0x336>

	/* si is an array of up to 4 structs, stored as gr0ch0, gr0ch1, gr1ch0, gr1ch1 */
	fh = (FrameHeader *)(mp3DecInfo->FrameHeaderPS);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	643b      	str	r3, [r7, #64]	; 0x40
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	63bb      	str	r3, [r7, #56]	; 0x38
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	695b      	ldr	r3, [r3, #20]
 8010e26:	637b      	str	r3, [r7, #52]	; 0x34
	/* anti-aliasing done on whole long blocks only
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 8010e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d102      	bne.n	8010e3a <xmp3_IMDCT+0x62>
 8010e34:	f04f 0308 	mov.w	r3, #8
 8010e38:	e001      	b.n	8010e3e <xmp3_IMDCT+0x66>
 8010e3a:	f04f 0306 	mov.w	r3, #6
 8010e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e42:	b21a      	sxth	r2, r3
 8010e44:	f648 6339 	movw	r3, #36409	; 0x8e39
 8010e48:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8010e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8010e50:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8010e54:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010e58:	1acb      	subs	r3, r1, r3
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	b21b      	sxth	r3, r3
 8010e5e:	633b      	str	r3, [r7, #48]	; 0x30
	if (si->sis[gr][ch].blockType != 2) {
 8010e60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	68b9      	ldr	r1, [r7, #8]
 8010e66:	461a      	mov	r2, r3
 8010e68:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010e6c:	18d2      	adds	r2, r2, r3
 8010e6e:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 8010e72:	461a      	mov	r2, r3
 8010e74:	460b      	mov	r3, r1
 8010e76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010e7a:	185b      	adds	r3, r3, r1
 8010e7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010e80:	18d3      	adds	r3, r2, r3
 8010e82:	18c3      	adds	r3, r0, r3
 8010e84:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d01d      	beq.n	8010eca <xmp3_IMDCT+0xf2>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 8010e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8010e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e9a:	f103 0207 	add.w	r2, r3, #7
 8010e9e:	f648 6339 	movw	r3, #36409	; 0x8e39
 8010ea2:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8010ea6:	fb83 1302 	smull	r1, r3, r3, r2
 8010eaa:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8010eae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010eb2:	1acb      	subs	r3, r1, r3
 8010eb4:	f103 0301 	add.w	r3, r3, #1
 8010eb8:	2b20      	cmp	r3, #32
 8010eba:	bfa8      	it	ge
 8010ebc:	2320      	movge	r3, #32
 8010ebe:	613b      	str	r3, [r7, #16]
		nBfly = bc.nBlocksLong - 1;
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8010ec8:	e03a      	b.n	8010f40 <xmp3_IMDCT+0x168>
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 8010eca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	68b9      	ldr	r1, [r7, #8]
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010ed6:	18d2      	adds	r2, r2, r3
 8010ed8:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 8010edc:	461a      	mov	r2, r3
 8010ede:	460b      	mov	r3, r1
 8010ee0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010ee4:	185b      	adds	r3, r3, r1
 8010ee6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010eea:	18d3      	adds	r3, r2, r3
 8010eec:	18c3      	adds	r3, r0, r3
 8010eee:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d11d      	bne.n	8010f34 <xmp3_IMDCT+0x15c>
 8010ef8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	68b9      	ldr	r1, [r7, #8]
 8010efe:	461a      	mov	r2, r3
 8010f00:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010f04:	18d2      	adds	r2, r2, r3
 8010f06:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010f12:	185b      	adds	r3, r3, r1
 8010f14:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010f18:	18d3      	adds	r3, r2, r3
 8010f1a:	18c3      	adds	r3, r0, r3
 8010f1c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d006      	beq.n	8010f34 <xmp3_IMDCT+0x15c>
		/* mixed block - long transforms until cutoff, then short transforms */
		bc.nBlocksLong = blockCutoff;	
 8010f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f28:	613b      	str	r3, [r7, #16]
		nBfly = bc.nBlocksLong - 1;
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f30:	647b      	str	r3, [r7, #68]	; 0x44
 8010f32:	e005      	b.n	8010f40 <xmp3_IMDCT+0x168>
	} else {
		/* all short transforms */
		bc.nBlocksLong = 0;
 8010f34:	f04f 0300 	mov.w	r3, #0
 8010f38:	613b      	str	r3, [r7, #16]
		nBfly = 0;
 8010f3a:	f04f 0300 	mov.w	r3, #0
 8010f3e:	647b      	str	r3, [r7, #68]	; 0x44
	}
 
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 8010f40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	4613      	mov	r3, r2
 8010f46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010f4a:	189b      	adds	r3, r3, r2
 8010f4c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010f50:	18cb      	adds	r3, r1, r3
 8010f52:	4618      	mov	r0, r3
 8010f54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f56:	f7fe f91d 	bl	800f194 <AntiAlias>
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 8010f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f5c:	4613      	mov	r3, r2
 8010f5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010f62:	189b      	adds	r3, r3, r2
 8010f64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f68:	f103 0208 	add.w	r2, r3, #8
 8010f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6e:	6879      	ldr	r1, [r7, #4]
 8010f70:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8010f74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	bfac      	ite	ge
 8010f7c:	4611      	movge	r1, r2
 8010f7e:	4619      	movlt	r1, r3
 8010f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8010f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);

	/* for readability, use a struct instead of passing a million parameters to HybridTransform() */
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 8010f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8010f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f98:	f103 0211 	add.w	r2, r3, #17
 8010f9c:	f648 6339 	movw	r3, #36409	; 0x8e39
 8010fa0:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8010fa4:	fb83 1302 	smull	r1, r3, r3, r2
 8010fa8:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8010fac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010fb0:	1acb      	subs	r3, r1, r3
 8010fb2:	617b      	str	r3, [r7, #20]
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 8010fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	f502 62d8 	add.w	r2, r2, #1728	; 0x6c0
 8010fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fc0:	61bb      	str	r3, [r7, #24]
	bc.prevType = mi->prevType[ch];
 8010fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8010fca:	f103 0302 	add.w	r3, r3, #2
 8010fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fd2:	61fb      	str	r3, [r7, #28]
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 8010fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8010fdc:	f103 0304 	add.w	r3, r3, #4
 8010fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fe4:	623b      	str	r3, [r7, #32]
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 8010fe6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	68b9      	ldr	r1, [r7, #8]
 8010fec:	461a      	mov	r2, r3
 8010fee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010ff2:	18d2      	adds	r2, r2, r3
 8010ff4:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	460b      	mov	r3, r1
 8010ffc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8011000:	185b      	adds	r3, r3, r1
 8011002:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011006:	18d3      	adds	r3, r2, r3
 8011008:	18c3      	adds	r3, r0, r3
 801100a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d001      	beq.n	8011018 <xmp3_IMDCT+0x240>
 8011014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011016:	e001      	b.n	801101c <xmp3_IMDCT+0x244>
 8011018:	f04f 0300 	mov.w	r3, #0
 801101c:	627b      	str	r3, [r7, #36]	; 0x24
	bc.gbIn = hi->gb[ch];
 801101e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8011026:	f103 0302 	add.w	r3, r3, #2
 801102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801102e:	62bb      	str	r3, [r7, #40]	; 0x28

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 8011030:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	4613      	mov	r3, r2
 8011036:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801103a:	189b      	adds	r3, r3, r2
 801103c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011040:	18c8      	adds	r0, r1, r3
 8011042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011044:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	4613      	mov	r3, r2
 801104c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8011050:	189b      	adds	r3, r3, r2
 8011052:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8011056:	18c9      	adds	r1, r1, r3
 8011058:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	4613      	mov	r3, r2
 801105e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8011062:	189b      	adds	r3, r3, r2
 8011064:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011068:	18e4      	adds	r4, r4, r3
 801106a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801106c:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	4613      	mov	r3, r2
 8011074:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8011078:	189b      	adds	r3, r3, r2
 801107a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801107e:	461e      	mov	r6, r3
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	4613      	mov	r3, r2
 8011084:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8011088:	189b      	adds	r3, r3, r2
 801108a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801108e:	18f3      	adds	r3, r6, r3
 8011090:	18eb      	adds	r3, r5, r3
 8011092:	f107 0210 	add.w	r2, r7, #16
 8011096:	9200      	str	r2, [sp, #0]
 8011098:	4622      	mov	r2, r4
 801109a:	f7ff fd53 	bl	8010b44 <HybridTransform>
 801109e:	4601      	mov	r1, r0
 80110a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	f502 62d8 	add.w	r2, r2, #1728	; 0x6c0
 80110a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 80110ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	68b9      	ldr	r1, [r7, #8]
 80110b2:	461a      	mov	r2, r3
 80110b4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80110b8:	18d2      	adds	r2, r2, r3
 80110ba:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 80110be:	461a      	mov	r2, r3
 80110c0:	460b      	mov	r3, r1
 80110c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80110c6:	185b      	adds	r3, r3, r1
 80110c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80110cc:	18d3      	adds	r3, r2, r3
 80110ce:	18c3      	adds	r3, r0, r3
 80110d0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80110d4:	6819      	ldr	r1, [r3, #0]
 80110d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80110de:	f103 0302 	add.w	r3, r3, #2
 80110e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 80110e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80110f0:	f103 0304 	add.w	r3, r3, #4
 80110f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	mi->gb[ch] = bc.gbOut;
 80110f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8011102:	f103 0306 	add.w	r3, r3, #6
 8011106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 801110a:	f04f 0300 	mov.w	r3, #0
}
 801110e:	4618      	mov	r0, r3
 8011110:	f107 074c 	add.w	r7, r7, #76	; 0x4c
 8011114:	46bd      	mov	sp, r7
 8011116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011118 <MADD64>:
signed int hi32;
} r;
} U64;

static __inline Word64 MADD64(Word64 sum64, int x, int y)
{
 8011118:	b480      	push	{r7}
 801111a:	b087      	sub	sp, #28
 801111c:	af00      	add	r7, sp, #0
 801111e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8011122:	607a      	str	r2, [r7, #4]
 8011124:	603b      	str	r3, [r7, #0]
U64 u;
u.w64 = sum64;
 8011126:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801112a:	e9c7 2304 	strd	r2, r3, [r7, #16]

__asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 801112e:	693a      	ldr	r2, [r7, #16]
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	6879      	ldr	r1, [r7, #4]
 8011134:	6838      	ldr	r0, [r7, #0]
 8011136:	fbc1 2300 	smlal	r2, r3, r1, r0
 801113a:	613a      	str	r2, [r7, #16]
 801113c:	617b      	str	r3, [r7, #20]

return u.w64;
 801113e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8011142:	4610      	mov	r0, r2
 8011144:	4619      	mov	r1, r3
 8011146:	f107 071c 	add.w	r7, r7, #28
 801114a:	46bd      	mov	sp, r7
 801114c:	bc80      	pop	{r7}
 801114e:	4770      	bx	lr

08011150 <SAR64>:
static __inline Word64 SAR64(Word64 x, int n)
{
 8011150:	b4f0      	push	{r4, r5, r6, r7}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801115a:	607a      	str	r2, [r7, #4]
return x >> n;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f1a3 0320 	sub.w	r3, r3, #32
 8011162:	68fa      	ldr	r2, [r7, #12]
 8011164:	fa42 f203 	asr.w	r2, r2, r3
 8011168:	6879      	ldr	r1, [r7, #4]
 801116a:	f1c1 0120 	rsb	r1, r1, #32
 801116e:	68f8      	ldr	r0, [r7, #12]
 8011170:	fa00 f101 	lsl.w	r1, r0, r1
 8011174:	68be      	ldr	r6, [r7, #8]
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	fa26 f400 	lsr.w	r4, r6, r0
 801117c:	430c      	orrs	r4, r1
 801117e:	2b00      	cmp	r3, #0
 8011180:	bfa8      	it	ge
 8011182:	4614      	movge	r4, r2
 8011184:	68fa      	ldr	r2, [r7, #12]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	fa42 f503 	asr.w	r5, r2, r3
 801118c:	4622      	mov	r2, r4
 801118e:	462b      	mov	r3, r5

}
 8011190:	4610      	mov	r0, r2
 8011192:	4619      	mov	r1, r3
 8011194:	f107 0710 	add.w	r7, r7, #16
 8011198:	46bd      	mov	sp, r7
 801119a:	bcf0      	pop	{r4, r5, r6, r7}
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop

080111a0 <ClipToShort>:
 */
#define DEF_NFRACBITS	(DQ_FRACBITS_OUT - 2 - 2 - 15)	
#define CSHIFT	12	/* coefficients have 12 leading sign bits for early-terminating mulitplies */

static __inline short ClipToShort(int x, int fracBits)
{
 80111a0:	b480      	push	{r7}
 80111a2:	b085      	sub	sp, #20
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
	int sign;
	
	/* assumes you've already rounded (x += (1 << (fracBits-1))) */
	x >>= fracBits;
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	fa42 f303 	asr.w	r3, r2, r3
 80111b2:	607b      	str	r3, [r7, #4]
	
	/* Ken's trick: clips to [-32768, 32767] */
	sign = x >> 31;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	ea4f 73e3 	mov.w	r3, r3, asr #31
 80111ba:	60fb      	str	r3, [r7, #12]
	if (sign != (x >> 15))
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	ea4f 32e3 	mov.w	r2, r3, asr #15
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d005      	beq.n	80111d4 <ClipToShort+0x34>
		x = sign ^ ((1 << 15) - 1);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f483 43fe 	eor.w	r3, r3, #32512	; 0x7f00
 80111ce:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80111d2:	607b      	str	r3, [r7, #4]

	return (short)x;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	b21b      	sxth	r3, r3
}
 80111da:	4618      	mov	r0, r3
 80111dc:	f107 0714 	add.w	r7, r7, #20
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bc80      	pop	{r7}
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop

080111e8 <xmp3_PolyphaseMono>:
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 *                (note max filter gain - see polyCoef[] comments)
 **************************************************************************************/
void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
{	
 80111e8:	b590      	push	{r4, r7, lr}
 80111ea:	b093      	sub	sp, #76	; 0x4c
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	60f8      	str	r0, [r7, #12]
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	607a      	str	r2, [r7, #4]
	const int *coef;
	int *vb1;
	int vLo, vHi, c1, c2;
	Word64 sum1L, sum2L, rndVal;

	rndVal = (Word64)( 1 << (DEF_NFRACBITS - 1 + (32 - CSHIFT)) );
 80111f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80111f8:	f04f 0300 	mov.w	r3, #0
 80111fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	/* special case, output sample 0 */
	coef = coefBase;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	643b      	str	r3, [r7, #64]	; 0x40
	vb1 = vbuf;
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	63fb      	str	r3, [r7, #60]	; 0x3c
	sum1L = rndVal;
 8011208:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801120c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	MC0M(0)
 8011210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	627b      	str	r3, [r7, #36]	; 0x24
 8011216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011218:	f103 0304 	add.w	r3, r3, #4
 801121c:	643b      	str	r3, [r7, #64]	; 0x40
 801121e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	623b      	str	r3, [r7, #32]
 8011224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011226:	f103 0304 	add.w	r3, r3, #4
 801122a:	643b      	str	r3, [r7, #64]	; 0x40
 801122c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	61fb      	str	r3, [r7, #28]
 8011232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011236:	61bb      	str	r3, [r7, #24]
 8011238:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801123c:	69fa      	ldr	r2, [r7, #28]
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011240:	f7ff ff6a 	bl	8011118 <MADD64>
 8011244:	4602      	mov	r2, r0
 8011246:	460b      	mov	r3, r1
 8011248:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801124c:	6a3b      	ldr	r3, [r7, #32]
 801124e:	f1c3 0300 	rsb	r3, r3, #0
 8011252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011256:	69ba      	ldr	r2, [r7, #24]
 8011258:	f7ff ff5e 	bl	8011118 <MADD64>
 801125c:	4602      	mov	r2, r0
 801125e:	460b      	mov	r3, r1
 8011260:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC0M(1)
 8011264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	627b      	str	r3, [r7, #36]	; 0x24
 801126a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801126c:	f103 0304 	add.w	r3, r3, #4
 8011270:	643b      	str	r3, [r7, #64]	; 0x40
 8011272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	623b      	str	r3, [r7, #32]
 8011278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801127a:	f103 0304 	add.w	r3, r3, #4
 801127e:	643b      	str	r3, [r7, #64]	; 0x40
 8011280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	61fb      	str	r3, [r7, #28]
 8011286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801128a:	61bb      	str	r3, [r7, #24]
 801128c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011290:	69fa      	ldr	r2, [r7, #28]
 8011292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011294:	f7ff ff40 	bl	8011118 <MADD64>
 8011298:	4602      	mov	r2, r0
 801129a:	460b      	mov	r3, r1
 801129c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80112a0:	6a3b      	ldr	r3, [r7, #32]
 80112a2:	f1c3 0300 	rsb	r3, r3, #0
 80112a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80112aa:	69ba      	ldr	r2, [r7, #24]
 80112ac:	f7ff ff34 	bl	8011118 <MADD64>
 80112b0:	4602      	mov	r2, r0
 80112b2:	460b      	mov	r3, r1
 80112b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC0M(2)
 80112b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	627b      	str	r3, [r7, #36]	; 0x24
 80112be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112c0:	f103 0304 	add.w	r3, r3, #4
 80112c4:	643b      	str	r3, [r7, #64]	; 0x40
 80112c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	623b      	str	r3, [r7, #32]
 80112cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112ce:	f103 0304 	add.w	r3, r3, #4
 80112d2:	643b      	str	r3, [r7, #64]	; 0x40
 80112d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112d6:	689b      	ldr	r3, [r3, #8]
 80112d8:	61fb      	str	r3, [r7, #28]
 80112da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112de:	61bb      	str	r3, [r7, #24]
 80112e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80112e4:	69fa      	ldr	r2, [r7, #28]
 80112e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e8:	f7ff ff16 	bl	8011118 <MADD64>
 80112ec:	4602      	mov	r2, r0
 80112ee:	460b      	mov	r3, r1
 80112f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80112f4:	6a3b      	ldr	r3, [r7, #32]
 80112f6:	f1c3 0300 	rsb	r3, r3, #0
 80112fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80112fe:	69ba      	ldr	r2, [r7, #24]
 8011300:	f7ff ff0a 	bl	8011118 <MADD64>
 8011304:	4602      	mov	r2, r0
 8011306:	460b      	mov	r3, r1
 8011308:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC0M(3)
 801130c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	627b      	str	r3, [r7, #36]	; 0x24
 8011312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011314:	f103 0304 	add.w	r3, r3, #4
 8011318:	643b      	str	r3, [r7, #64]	; 0x40
 801131a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	623b      	str	r3, [r7, #32]
 8011320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011322:	f103 0304 	add.w	r3, r3, #4
 8011326:	643b      	str	r3, [r7, #64]	; 0x40
 8011328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	61fb      	str	r3, [r7, #28]
 801132e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011332:	61bb      	str	r3, [r7, #24]
 8011334:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011338:	69fa      	ldr	r2, [r7, #28]
 801133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133c:	f7ff feec 	bl	8011118 <MADD64>
 8011340:	4602      	mov	r2, r0
 8011342:	460b      	mov	r3, r1
 8011344:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011348:	6a3b      	ldr	r3, [r7, #32]
 801134a:	f1c3 0300 	rsb	r3, r3, #0
 801134e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011352:	69ba      	ldr	r2, [r7, #24]
 8011354:	f7ff fee0 	bl	8011118 <MADD64>
 8011358:	4602      	mov	r2, r0
 801135a:	460b      	mov	r3, r1
 801135c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC0M(4)
 8011360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	627b      	str	r3, [r7, #36]	; 0x24
 8011366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011368:	f103 0304 	add.w	r3, r3, #4
 801136c:	643b      	str	r3, [r7, #64]	; 0x40
 801136e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	623b      	str	r3, [r7, #32]
 8011374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011376:	f103 0304 	add.w	r3, r3, #4
 801137a:	643b      	str	r3, [r7, #64]	; 0x40
 801137c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137e:	691b      	ldr	r3, [r3, #16]
 8011380:	61fb      	str	r3, [r7, #28]
 8011382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011386:	61bb      	str	r3, [r7, #24]
 8011388:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801138c:	69fa      	ldr	r2, [r7, #28]
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	f7ff fec2 	bl	8011118 <MADD64>
 8011394:	4602      	mov	r2, r0
 8011396:	460b      	mov	r3, r1
 8011398:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801139c:	6a3b      	ldr	r3, [r7, #32]
 801139e:	f1c3 0300 	rsb	r3, r3, #0
 80113a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80113a6:	69ba      	ldr	r2, [r7, #24]
 80113a8:	f7ff feb6 	bl	8011118 <MADD64>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC0M(5)
 80113b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	627b      	str	r3, [r7, #36]	; 0x24
 80113ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113bc:	f103 0304 	add.w	r3, r3, #4
 80113c0:	643b      	str	r3, [r7, #64]	; 0x40
 80113c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	623b      	str	r3, [r7, #32]
 80113c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ca:	f103 0304 	add.w	r3, r3, #4
 80113ce:	643b      	str	r3, [r7, #64]	; 0x40
 80113d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113d2:	695b      	ldr	r3, [r3, #20]
 80113d4:	61fb      	str	r3, [r7, #28]
 80113d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80113da:	61bb      	str	r3, [r7, #24]
 80113dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80113e0:	69fa      	ldr	r2, [r7, #28]
 80113e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e4:	f7ff fe98 	bl	8011118 <MADD64>
 80113e8:	4602      	mov	r2, r0
 80113ea:	460b      	mov	r3, r1
 80113ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80113f0:	6a3b      	ldr	r3, [r7, #32]
 80113f2:	f1c3 0300 	rsb	r3, r3, #0
 80113f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80113fa:	69ba      	ldr	r2, [r7, #24]
 80113fc:	f7ff fe8c 	bl	8011118 <MADD64>
 8011400:	4602      	mov	r2, r0
 8011402:	460b      	mov	r3, r1
 8011404:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC0M(6)
 8011408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	627b      	str	r3, [r7, #36]	; 0x24
 801140e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011410:	f103 0304 	add.w	r3, r3, #4
 8011414:	643b      	str	r3, [r7, #64]	; 0x40
 8011416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	623b      	str	r3, [r7, #32]
 801141c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801141e:	f103 0304 	add.w	r3, r3, #4
 8011422:	643b      	str	r3, [r7, #64]	; 0x40
 8011424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011426:	699b      	ldr	r3, [r3, #24]
 8011428:	61fb      	str	r3, [r7, #28]
 801142a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801142e:	61bb      	str	r3, [r7, #24]
 8011430:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011434:	69fa      	ldr	r2, [r7, #28]
 8011436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011438:	f7ff fe6e 	bl	8011118 <MADD64>
 801143c:	4602      	mov	r2, r0
 801143e:	460b      	mov	r3, r1
 8011440:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011444:	6a3b      	ldr	r3, [r7, #32]
 8011446:	f1c3 0300 	rsb	r3, r3, #0
 801144a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801144e:	69ba      	ldr	r2, [r7, #24]
 8011450:	f7ff fe62 	bl	8011118 <MADD64>
 8011454:	4602      	mov	r2, r0
 8011456:	460b      	mov	r3, r1
 8011458:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC0M(7)
 801145c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	627b      	str	r3, [r7, #36]	; 0x24
 8011462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011464:	f103 0304 	add.w	r3, r3, #4
 8011468:	643b      	str	r3, [r7, #64]	; 0x40
 801146a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	623b      	str	r3, [r7, #32]
 8011470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011472:	f103 0304 	add.w	r3, r3, #4
 8011476:	643b      	str	r3, [r7, #64]	; 0x40
 8011478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801147a:	69db      	ldr	r3, [r3, #28]
 801147c:	61fb      	str	r3, [r7, #28]
 801147e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011482:	61bb      	str	r3, [r7, #24]
 8011484:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011488:	69fa      	ldr	r2, [r7, #28]
 801148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148c:	f7ff fe44 	bl	8011118 <MADD64>
 8011490:	4602      	mov	r2, r0
 8011492:	460b      	mov	r3, r1
 8011494:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011498:	6a3b      	ldr	r3, [r7, #32]
 801149a:	f1c3 0300 	rsb	r3, r3, #0
 801149e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80114a2:	69ba      	ldr	r2, [r7, #24]
 80114a4:	f7ff fe38 	bl	8011118 <MADD64>
 80114a8:	4602      	mov	r2, r0
 80114aa:	460b      	mov	r3, r1
 80114ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 80114b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80114b4:	f04f 0214 	mov.w	r2, #20
 80114b8:	f7ff fe4a 	bl	8011150 <SAR64>
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	4613      	mov	r3, r2
 80114c2:	4618      	mov	r0, r3
 80114c4:	f04f 0106 	mov.w	r1, #6
 80114c8:	f7ff fe6a 	bl	80111a0 <ClipToShort>
 80114cc:	4603      	mov	r3, r0
 80114ce:	461a      	mov	r2, r3
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	801a      	strh	r2, [r3, #0]

	/* special case, output sample 16 */
	coef = coefBase + 256;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114da:	643b      	str	r3, [r7, #64]	; 0x40
	vb1 = vbuf + 64*16;
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80114e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sum1L = rndVal;
 80114e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80114e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	MC1M(0)
 80114ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	627b      	str	r3, [r7, #36]	; 0x24
 80114f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114f4:	f103 0304 	add.w	r3, r3, #4
 80114f8:	643b      	str	r3, [r7, #64]	; 0x40
 80114fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	61fb      	str	r3, [r7, #28]
 8011500:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011504:	69fa      	ldr	r2, [r7, #28]
 8011506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011508:	f7ff fe06 	bl	8011118 <MADD64>
 801150c:	4602      	mov	r2, r0
 801150e:	460b      	mov	r3, r1
 8011510:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC1M(1)
 8011514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	627b      	str	r3, [r7, #36]	; 0x24
 801151a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801151c:	f103 0304 	add.w	r3, r3, #4
 8011520:	643b      	str	r3, [r7, #64]	; 0x40
 8011522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	61fb      	str	r3, [r7, #28]
 8011528:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801152c:	69fa      	ldr	r2, [r7, #28]
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	f7ff fdf2 	bl	8011118 <MADD64>
 8011534:	4602      	mov	r2, r0
 8011536:	460b      	mov	r3, r1
 8011538:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC1M(2)
 801153c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	627b      	str	r3, [r7, #36]	; 0x24
 8011542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011544:	f103 0304 	add.w	r3, r3, #4
 8011548:	643b      	str	r3, [r7, #64]	; 0x40
 801154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801154c:	689b      	ldr	r3, [r3, #8]
 801154e:	61fb      	str	r3, [r7, #28]
 8011550:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011554:	69fa      	ldr	r2, [r7, #28]
 8011556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011558:	f7ff fdde 	bl	8011118 <MADD64>
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC1M(3)
 8011564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	627b      	str	r3, [r7, #36]	; 0x24
 801156a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801156c:	f103 0304 	add.w	r3, r3, #4
 8011570:	643b      	str	r3, [r7, #64]	; 0x40
 8011572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	61fb      	str	r3, [r7, #28]
 8011578:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801157c:	69fa      	ldr	r2, [r7, #28]
 801157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011580:	f7ff fdca 	bl	8011118 <MADD64>
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC1M(4)
 801158c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	627b      	str	r3, [r7, #36]	; 0x24
 8011592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011594:	f103 0304 	add.w	r3, r3, #4
 8011598:	643b      	str	r3, [r7, #64]	; 0x40
 801159a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801159c:	691b      	ldr	r3, [r3, #16]
 801159e:	61fb      	str	r3, [r7, #28]
 80115a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80115a4:	69fa      	ldr	r2, [r7, #28]
 80115a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a8:	f7ff fdb6 	bl	8011118 <MADD64>
 80115ac:	4602      	mov	r2, r0
 80115ae:	460b      	mov	r3, r1
 80115b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC1M(5)
 80115b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	627b      	str	r3, [r7, #36]	; 0x24
 80115ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115bc:	f103 0304 	add.w	r3, r3, #4
 80115c0:	643b      	str	r3, [r7, #64]	; 0x40
 80115c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115c4:	695b      	ldr	r3, [r3, #20]
 80115c6:	61fb      	str	r3, [r7, #28]
 80115c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80115cc:	69fa      	ldr	r2, [r7, #28]
 80115ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d0:	f7ff fda2 	bl	8011118 <MADD64>
 80115d4:	4602      	mov	r2, r0
 80115d6:	460b      	mov	r3, r1
 80115d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC1M(6)
 80115dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	627b      	str	r3, [r7, #36]	; 0x24
 80115e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115e4:	f103 0304 	add.w	r3, r3, #4
 80115e8:	643b      	str	r3, [r7, #64]	; 0x40
 80115ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115ec:	699b      	ldr	r3, [r3, #24]
 80115ee:	61fb      	str	r3, [r7, #28]
 80115f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80115f4:	69fa      	ldr	r2, [r7, #28]
 80115f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f8:	f7ff fd8e 	bl	8011118 <MADD64>
 80115fc:	4602      	mov	r2, r0
 80115fe:	460b      	mov	r3, r1
 8011600:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	MC1M(7)
 8011604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	627b      	str	r3, [r7, #36]	; 0x24
 801160a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801160c:	f103 0304 	add.w	r3, r3, #4
 8011610:	643b      	str	r3, [r7, #64]	; 0x40
 8011612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011614:	69db      	ldr	r3, [r3, #28]
 8011616:	61fb      	str	r3, [r7, #28]
 8011618:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801161c:	69fa      	ldr	r2, [r7, #28]
 801161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011620:	f7ff fd7a 	bl	8011118 <MADD64>
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	*(pcm + 16) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	f103 0420 	add.w	r4, r3, #32
 8011632:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011636:	f04f 0214 	mov.w	r2, #20
 801163a:	f7ff fd89 	bl	8011150 <SAR64>
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	4613      	mov	r3, r2
 8011644:	4618      	mov	r0, r3
 8011646:	f04f 0106 	mov.w	r1, #6
 801164a:	f7ff fda9 	bl	80111a0 <ClipToShort>
 801164e:	4603      	mov	r3, r0
 8011650:	8023      	strh	r3, [r4, #0]

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8011658:	643b      	str	r3, [r7, #64]	; 0x40
	vb1 = vbuf + 64;
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011660:	63fb      	str	r3, [r7, #60]	; 0x3c
	pcm++;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f103 0302 	add.w	r3, r3, #2
 8011668:	60fb      	str	r3, [r7, #12]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 801166a:	f04f 030f 	mov.w	r3, #15
 801166e:	647b      	str	r3, [r7, #68]	; 0x44
 8011670:	e22a      	b.n	8011ac8 <xmp3_PolyphaseMono+0x8e0>
		sum1L = sum2L = rndVal;
 8011672:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011676:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801167a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801167e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		MC2M(0)
 8011682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	627b      	str	r3, [r7, #36]	; 0x24
 8011688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801168a:	f103 0304 	add.w	r3, r3, #4
 801168e:	643b      	str	r3, [r7, #64]	; 0x40
 8011690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	623b      	str	r3, [r7, #32]
 8011696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011698:	f103 0304 	add.w	r3, r3, #4
 801169c:	643b      	str	r3, [r7, #64]	; 0x40
 801169e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	61fb      	str	r3, [r7, #28]
 80116a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80116a8:	61bb      	str	r3, [r7, #24]
 80116aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80116ae:	69fa      	ldr	r2, [r7, #28]
 80116b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b2:	f7ff fd31 	bl	8011118 <MADD64>
 80116b6:	4602      	mov	r2, r0
 80116b8:	460b      	mov	r3, r1
 80116ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80116be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80116c2:	69fa      	ldr	r2, [r7, #28]
 80116c4:	6a3b      	ldr	r3, [r7, #32]
 80116c6:	f7ff fd27 	bl	8011118 <MADD64>
 80116ca:	4602      	mov	r2, r0
 80116cc:	460b      	mov	r3, r1
 80116ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80116d2:	6a3b      	ldr	r3, [r7, #32]
 80116d4:	f1c3 0300 	rsb	r3, r3, #0
 80116d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80116dc:	69ba      	ldr	r2, [r7, #24]
 80116de:	f7ff fd1b 	bl	8011118 <MADD64>
 80116e2:	4602      	mov	r2, r0
 80116e4:	460b      	mov	r3, r1
 80116e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80116ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80116ee:	69ba      	ldr	r2, [r7, #24]
 80116f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f2:	f7ff fd11 	bl	8011118 <MADD64>
 80116f6:	4602      	mov	r2, r0
 80116f8:	460b      	mov	r3, r1
 80116fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2M(1)
 80116fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	627b      	str	r3, [r7, #36]	; 0x24
 8011704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011706:	f103 0304 	add.w	r3, r3, #4
 801170a:	643b      	str	r3, [r7, #64]	; 0x40
 801170c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	623b      	str	r3, [r7, #32]
 8011712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011714:	f103 0304 	add.w	r3, r3, #4
 8011718:	643b      	str	r3, [r7, #64]	; 0x40
 801171a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	61fb      	str	r3, [r7, #28]
 8011720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011724:	61bb      	str	r3, [r7, #24]
 8011726:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801172a:	69fa      	ldr	r2, [r7, #28]
 801172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172e:	f7ff fcf3 	bl	8011118 <MADD64>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801173a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801173e:	69fa      	ldr	r2, [r7, #28]
 8011740:	6a3b      	ldr	r3, [r7, #32]
 8011742:	f7ff fce9 	bl	8011118 <MADD64>
 8011746:	4602      	mov	r2, r0
 8011748:	460b      	mov	r3, r1
 801174a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801174e:	6a3b      	ldr	r3, [r7, #32]
 8011750:	f1c3 0300 	rsb	r3, r3, #0
 8011754:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011758:	69ba      	ldr	r2, [r7, #24]
 801175a:	f7ff fcdd 	bl	8011118 <MADD64>
 801175e:	4602      	mov	r2, r0
 8011760:	460b      	mov	r3, r1
 8011762:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011766:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801176a:	69ba      	ldr	r2, [r7, #24]
 801176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176e:	f7ff fcd3 	bl	8011118 <MADD64>
 8011772:	4602      	mov	r2, r0
 8011774:	460b      	mov	r3, r1
 8011776:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2M(2)
 801177a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	627b      	str	r3, [r7, #36]	; 0x24
 8011780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011782:	f103 0304 	add.w	r3, r3, #4
 8011786:	643b      	str	r3, [r7, #64]	; 0x40
 8011788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	623b      	str	r3, [r7, #32]
 801178e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011790:	f103 0304 	add.w	r3, r3, #4
 8011794:	643b      	str	r3, [r7, #64]	; 0x40
 8011796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011798:	689b      	ldr	r3, [r3, #8]
 801179a:	61fb      	str	r3, [r7, #28]
 801179c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117a0:	61bb      	str	r3, [r7, #24]
 80117a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80117a6:	69fa      	ldr	r2, [r7, #28]
 80117a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117aa:	f7ff fcb5 	bl	8011118 <MADD64>
 80117ae:	4602      	mov	r2, r0
 80117b0:	460b      	mov	r3, r1
 80117b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80117b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80117ba:	69fa      	ldr	r2, [r7, #28]
 80117bc:	6a3b      	ldr	r3, [r7, #32]
 80117be:	f7ff fcab 	bl	8011118 <MADD64>
 80117c2:	4602      	mov	r2, r0
 80117c4:	460b      	mov	r3, r1
 80117c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80117ca:	6a3b      	ldr	r3, [r7, #32]
 80117cc:	f1c3 0300 	rsb	r3, r3, #0
 80117d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80117d4:	69ba      	ldr	r2, [r7, #24]
 80117d6:	f7ff fc9f 	bl	8011118 <MADD64>
 80117da:	4602      	mov	r2, r0
 80117dc:	460b      	mov	r3, r1
 80117de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80117e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80117e6:	69ba      	ldr	r2, [r7, #24]
 80117e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ea:	f7ff fc95 	bl	8011118 <MADD64>
 80117ee:	4602      	mov	r2, r0
 80117f0:	460b      	mov	r3, r1
 80117f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2M(3)
 80117f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	627b      	str	r3, [r7, #36]	; 0x24
 80117fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117fe:	f103 0304 	add.w	r3, r3, #4
 8011802:	643b      	str	r3, [r7, #64]	; 0x40
 8011804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	623b      	str	r3, [r7, #32]
 801180a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801180c:	f103 0304 	add.w	r3, r3, #4
 8011810:	643b      	str	r3, [r7, #64]	; 0x40
 8011812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	61fb      	str	r3, [r7, #28]
 8011818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801181a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801181c:	61bb      	str	r3, [r7, #24]
 801181e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011822:	69fa      	ldr	r2, [r7, #28]
 8011824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011826:	f7ff fc77 	bl	8011118 <MADD64>
 801182a:	4602      	mov	r2, r0
 801182c:	460b      	mov	r3, r1
 801182e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011832:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011836:	69fa      	ldr	r2, [r7, #28]
 8011838:	6a3b      	ldr	r3, [r7, #32]
 801183a:	f7ff fc6d 	bl	8011118 <MADD64>
 801183e:	4602      	mov	r2, r0
 8011840:	460b      	mov	r3, r1
 8011842:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8011846:	6a3b      	ldr	r3, [r7, #32]
 8011848:	f1c3 0300 	rsb	r3, r3, #0
 801184c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011850:	69ba      	ldr	r2, [r7, #24]
 8011852:	f7ff fc61 	bl	8011118 <MADD64>
 8011856:	4602      	mov	r2, r0
 8011858:	460b      	mov	r3, r1
 801185a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801185e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011862:	69ba      	ldr	r2, [r7, #24]
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	f7ff fc57 	bl	8011118 <MADD64>
 801186a:	4602      	mov	r2, r0
 801186c:	460b      	mov	r3, r1
 801186e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2M(4)
 8011872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	627b      	str	r3, [r7, #36]	; 0x24
 8011878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801187a:	f103 0304 	add.w	r3, r3, #4
 801187e:	643b      	str	r3, [r7, #64]	; 0x40
 8011880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	623b      	str	r3, [r7, #32]
 8011886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011888:	f103 0304 	add.w	r3, r3, #4
 801188c:	643b      	str	r3, [r7, #64]	; 0x40
 801188e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011890:	691b      	ldr	r3, [r3, #16]
 8011892:	61fb      	str	r3, [r7, #28]
 8011894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011898:	61bb      	str	r3, [r7, #24]
 801189a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801189e:	69fa      	ldr	r2, [r7, #28]
 80118a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a2:	f7ff fc39 	bl	8011118 <MADD64>
 80118a6:	4602      	mov	r2, r0
 80118a8:	460b      	mov	r3, r1
 80118aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80118ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80118b2:	69fa      	ldr	r2, [r7, #28]
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	f7ff fc2f 	bl	8011118 <MADD64>
 80118ba:	4602      	mov	r2, r0
 80118bc:	460b      	mov	r3, r1
 80118be:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80118c2:	6a3b      	ldr	r3, [r7, #32]
 80118c4:	f1c3 0300 	rsb	r3, r3, #0
 80118c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80118cc:	69ba      	ldr	r2, [r7, #24]
 80118ce:	f7ff fc23 	bl	8011118 <MADD64>
 80118d2:	4602      	mov	r2, r0
 80118d4:	460b      	mov	r3, r1
 80118d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80118da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80118de:	69ba      	ldr	r2, [r7, #24]
 80118e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e2:	f7ff fc19 	bl	8011118 <MADD64>
 80118e6:	4602      	mov	r2, r0
 80118e8:	460b      	mov	r3, r1
 80118ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2M(5)
 80118ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	627b      	str	r3, [r7, #36]	; 0x24
 80118f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118f6:	f103 0304 	add.w	r3, r3, #4
 80118fa:	643b      	str	r3, [r7, #64]	; 0x40
 80118fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	623b      	str	r3, [r7, #32]
 8011902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011904:	f103 0304 	add.w	r3, r3, #4
 8011908:	643b      	str	r3, [r7, #64]	; 0x40
 801190a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801190c:	695b      	ldr	r3, [r3, #20]
 801190e:	61fb      	str	r3, [r7, #28]
 8011910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011914:	61bb      	str	r3, [r7, #24]
 8011916:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801191a:	69fa      	ldr	r2, [r7, #28]
 801191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191e:	f7ff fbfb 	bl	8011118 <MADD64>
 8011922:	4602      	mov	r2, r0
 8011924:	460b      	mov	r3, r1
 8011926:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801192a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801192e:	69fa      	ldr	r2, [r7, #28]
 8011930:	6a3b      	ldr	r3, [r7, #32]
 8011932:	f7ff fbf1 	bl	8011118 <MADD64>
 8011936:	4602      	mov	r2, r0
 8011938:	460b      	mov	r3, r1
 801193a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801193e:	6a3b      	ldr	r3, [r7, #32]
 8011940:	f1c3 0300 	rsb	r3, r3, #0
 8011944:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011948:	69ba      	ldr	r2, [r7, #24]
 801194a:	f7ff fbe5 	bl	8011118 <MADD64>
 801194e:	4602      	mov	r2, r0
 8011950:	460b      	mov	r3, r1
 8011952:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011956:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801195a:	69ba      	ldr	r2, [r7, #24]
 801195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195e:	f7ff fbdb 	bl	8011118 <MADD64>
 8011962:	4602      	mov	r2, r0
 8011964:	460b      	mov	r3, r1
 8011966:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2M(6)
 801196a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	627b      	str	r3, [r7, #36]	; 0x24
 8011970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011972:	f103 0304 	add.w	r3, r3, #4
 8011976:	643b      	str	r3, [r7, #64]	; 0x40
 8011978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	623b      	str	r3, [r7, #32]
 801197e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011980:	f103 0304 	add.w	r3, r3, #4
 8011984:	643b      	str	r3, [r7, #64]	; 0x40
 8011986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011988:	699b      	ldr	r3, [r3, #24]
 801198a:	61fb      	str	r3, [r7, #28]
 801198c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011990:	61bb      	str	r3, [r7, #24]
 8011992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011996:	69fa      	ldr	r2, [r7, #28]
 8011998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801199a:	f7ff fbbd 	bl	8011118 <MADD64>
 801199e:	4602      	mov	r2, r0
 80119a0:	460b      	mov	r3, r1
 80119a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80119a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80119aa:	69fa      	ldr	r2, [r7, #28]
 80119ac:	6a3b      	ldr	r3, [r7, #32]
 80119ae:	f7ff fbb3 	bl	8011118 <MADD64>
 80119b2:	4602      	mov	r2, r0
 80119b4:	460b      	mov	r3, r1
 80119b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80119ba:	6a3b      	ldr	r3, [r7, #32]
 80119bc:	f1c3 0300 	rsb	r3, r3, #0
 80119c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80119c4:	69ba      	ldr	r2, [r7, #24]
 80119c6:	f7ff fba7 	bl	8011118 <MADD64>
 80119ca:	4602      	mov	r2, r0
 80119cc:	460b      	mov	r3, r1
 80119ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80119d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80119d6:	69ba      	ldr	r2, [r7, #24]
 80119d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119da:	f7ff fb9d 	bl	8011118 <MADD64>
 80119de:	4602      	mov	r2, r0
 80119e0:	460b      	mov	r3, r1
 80119e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2M(7)
 80119e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	627b      	str	r3, [r7, #36]	; 0x24
 80119ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119ee:	f103 0304 	add.w	r3, r3, #4
 80119f2:	643b      	str	r3, [r7, #64]	; 0x40
 80119f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	623b      	str	r3, [r7, #32]
 80119fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119fc:	f103 0304 	add.w	r3, r3, #4
 8011a00:	643b      	str	r3, [r7, #64]	; 0x40
 8011a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a04:	69db      	ldr	r3, [r3, #28]
 8011a06:	61fb      	str	r3, [r7, #28]
 8011a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a0c:	61bb      	str	r3, [r7, #24]
 8011a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011a12:	69fa      	ldr	r2, [r7, #28]
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a16:	f7ff fb7f 	bl	8011118 <MADD64>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011a22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011a26:	69fa      	ldr	r2, [r7, #28]
 8011a28:	6a3b      	ldr	r3, [r7, #32]
 8011a2a:	f7ff fb75 	bl	8011118 <MADD64>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	460b      	mov	r3, r1
 8011a32:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8011a36:	6a3b      	ldr	r3, [r7, #32]
 8011a38:	f1c3 0300 	rsb	r3, r3, #0
 8011a3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011a40:	69ba      	ldr	r2, [r7, #24]
 8011a42:	f7ff fb69 	bl	8011118 <MADD64>
 8011a46:	4602      	mov	r2, r0
 8011a48:	460b      	mov	r3, r1
 8011a4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011a4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011a52:	69ba      	ldr	r2, [r7, #24]
 8011a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a56:	f7ff fb5f 	bl	8011118 <MADD64>
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	e9c7 2304 	strd	r2, r3, [r7, #16]

		vb1 += 64;
 8011a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011a68:	63fb      	str	r3, [r7, #60]	; 0x3c
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 8011a6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011a6e:	f04f 0214 	mov.w	r2, #20
 8011a72:	f7ff fb6d 	bl	8011150 <SAR64>
 8011a76:	4602      	mov	r2, r0
 8011a78:	460b      	mov	r3, r1
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f04f 0106 	mov.w	r1, #6
 8011a82:	f7ff fb8d 	bl	80111a0 <ClipToShort>
 8011a86:	4603      	mov	r3, r0
 8011a88:	461a      	mov	r2, r3
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	801a      	strh	r2, [r3, #0]
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 8011a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a90:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011a94:	68fa      	ldr	r2, [r7, #12]
 8011a96:	18d4      	adds	r4, r2, r3
 8011a98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011a9c:	f04f 0214 	mov.w	r2, #20
 8011aa0:	f7ff fb56 	bl	8011150 <SAR64>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f04f 0106 	mov.w	r1, #6
 8011ab0:	f7ff fb76 	bl	80111a0 <ClipToShort>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	8023      	strh	r3, [r4, #0]
		pcm++;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f103 0302 	add.w	r3, r3, #2
 8011abe:	60fb      	str	r3, [r7, #12]
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm++;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 8011ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ac2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8011ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f73f add1 	bgt.w	8011672 <xmp3_PolyphaseMono+0x48a>
		vb1 += 64;
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		pcm++;
	}
}
 8011ad0:	f107 074c 	add.w	r7, r7, #76	; 0x4c
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd90      	pop	{r4, r7, pc}

08011ad8 <xmp3_PolyphaseStereo>:
 * Notes:       interleaves PCM samples LRLRLR...
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 **************************************************************************************/
void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
{
 8011ad8:	b590      	push	{r4, r7, lr}
 8011ada:	b097      	sub	sp, #92	; 0x5c
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
	const int *coef;
	int *vb1;
	int vLo, vHi, c1, c2;
	Word64 sum1L, sum2L, sum1R, sum2R, rndVal;

	rndVal = (Word64)( 1 << (DEF_NFRACBITS - 1 + (32 - CSHIFT)) );
 8011ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011ae8:	f04f 0300 	mov.w	r3, #0
 8011aec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	/* special case, output sample 0 */
	coef = coefBase;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	653b      	str	r3, [r7, #80]	; 0x50
	vb1 = vbuf;
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sum1L = sum1R = rndVal;
 8011af8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011afc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011b04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	MC0S(0)
 8011b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b10:	f103 0304 	add.w	r3, r3, #4
 8011b14:	653b      	str	r3, [r7, #80]	; 0x50
 8011b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b1e:	f103 0304 	add.w	r3, r3, #4
 8011b22:	653b      	str	r3, [r7, #80]	; 0x50
 8011b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	627b      	str	r3, [r7, #36]	; 0x24
 8011b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b2e:	623b      	str	r3, [r7, #32]
 8011b30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b38:	f7ff faee 	bl	8011118 <MADD64>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	460b      	mov	r3, r1
 8011b40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b46:	f1c3 0300 	rsb	r3, r3, #0
 8011b4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011b4e:	6a3a      	ldr	r2, [r7, #32]
 8011b50:	f7ff fae2 	bl	8011118 <MADD64>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011b62:	627b      	str	r3, [r7, #36]	; 0x24
 8011b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8011b6a:	623b      	str	r3, [r7, #32]
 8011b6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b74:	f7ff fad0 	bl	8011118 <MADD64>
 8011b78:	4602      	mov	r2, r0
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b82:	f1c3 0300 	rsb	r3, r3, #0
 8011b86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011b8a:	6a3a      	ldr	r2, [r7, #32]
 8011b8c:	f7ff fac4 	bl	8011118 <MADD64>
 8011b90:	4602      	mov	r2, r0
 8011b92:	460b      	mov	r3, r1
 8011b94:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC0S(1)
 8011b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ba0:	f103 0304 	add.w	r3, r3, #4
 8011ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8011ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8011bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bae:	f103 0304 	add.w	r3, r3, #4
 8011bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8011bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8011bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bbe:	623b      	str	r3, [r7, #32]
 8011bc0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc8:	f7ff faa6 	bl	8011118 <MADD64>
 8011bcc:	4602      	mov	r2, r0
 8011bce:	460b      	mov	r3, r1
 8011bd0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd6:	f1c3 0300 	rsb	r3, r3, #0
 8011bda:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011bde:	6a3a      	ldr	r2, [r7, #32]
 8011be0:	f7ff fa9a 	bl	8011118 <MADD64>
 8011be4:	4602      	mov	r2, r0
 8011be6:	460b      	mov	r3, r1
 8011be8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8011bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011bfa:	623b      	str	r3, [r7, #32]
 8011bfc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c04:	f7ff fa88 	bl	8011118 <MADD64>
 8011c08:	4602      	mov	r2, r0
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c12:	f1c3 0300 	rsb	r3, r3, #0
 8011c16:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011c1a:	6a3a      	ldr	r2, [r7, #32]
 8011c1c:	f7ff fa7c 	bl	8011118 <MADD64>
 8011c20:	4602      	mov	r2, r0
 8011c22:	460b      	mov	r3, r1
 8011c24:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC0S(2)
 8011c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c30:	f103 0304 	add.w	r3, r3, #4
 8011c34:	653b      	str	r3, [r7, #80]	; 0x50
 8011c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c3e:	f103 0304 	add.w	r3, r3, #4
 8011c42:	653b      	str	r3, [r7, #80]	; 0x50
 8011c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c46:	689b      	ldr	r3, [r3, #8]
 8011c48:	627b      	str	r3, [r7, #36]	; 0x24
 8011c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c4e:	623b      	str	r3, [r7, #32]
 8011c50:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c58:	f7ff fa5e 	bl	8011118 <MADD64>
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	460b      	mov	r3, r1
 8011c60:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c66:	f1c3 0300 	rsb	r3, r3, #0
 8011c6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011c6e:	6a3a      	ldr	r2, [r7, #32]
 8011c70:	f7ff fa52 	bl	8011118 <MADD64>
 8011c74:	4602      	mov	r2, r0
 8011c76:	460b      	mov	r3, r1
 8011c78:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c82:	627b      	str	r3, [r7, #36]	; 0x24
 8011c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8011c8a:	623b      	str	r3, [r7, #32]
 8011c8c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c94:	f7ff fa40 	bl	8011118 <MADD64>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	460b      	mov	r3, r1
 8011c9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca2:	f1c3 0300 	rsb	r3, r3, #0
 8011ca6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011caa:	6a3a      	ldr	r2, [r7, #32]
 8011cac:	f7ff fa34 	bl	8011118 <MADD64>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC0S(3)
 8011cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cc0:	f103 0304 	add.w	r3, r3, #4
 8011cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8011cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cce:	f103 0304 	add.w	r3, r3, #4
 8011cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8011cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8011cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cde:	623b      	str	r3, [r7, #32]
 8011ce0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce8:	f7ff fa16 	bl	8011118 <MADD64>
 8011cec:	4602      	mov	r2, r0
 8011cee:	460b      	mov	r3, r1
 8011cf0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf6:	f1c3 0300 	rsb	r3, r3, #0
 8011cfa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011cfe:	6a3a      	ldr	r2, [r7, #32]
 8011d00:	f7ff fa0a 	bl	8011118 <MADD64>
 8011d04:	4602      	mov	r2, r0
 8011d06:	460b      	mov	r3, r1
 8011d08:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d12:	627b      	str	r3, [r7, #36]	; 0x24
 8011d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d16:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8011d1a:	623b      	str	r3, [r7, #32]
 8011d1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d24:	f7ff f9f8 	bl	8011118 <MADD64>
 8011d28:	4602      	mov	r2, r0
 8011d2a:	460b      	mov	r3, r1
 8011d2c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d32:	f1c3 0300 	rsb	r3, r3, #0
 8011d36:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011d3a:	6a3a      	ldr	r2, [r7, #32]
 8011d3c:	f7ff f9ec 	bl	8011118 <MADD64>
 8011d40:	4602      	mov	r2, r0
 8011d42:	460b      	mov	r3, r1
 8011d44:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC0S(4)
 8011d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d50:	f103 0304 	add.w	r3, r3, #4
 8011d54:	653b      	str	r3, [r7, #80]	; 0x50
 8011d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d5e:	f103 0304 	add.w	r3, r3, #4
 8011d62:	653b      	str	r3, [r7, #80]	; 0x50
 8011d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d66:	691b      	ldr	r3, [r3, #16]
 8011d68:	627b      	str	r3, [r7, #36]	; 0x24
 8011d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d6e:	623b      	str	r3, [r7, #32]
 8011d70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d78:	f7ff f9ce 	bl	8011118 <MADD64>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	460b      	mov	r3, r1
 8011d80:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d86:	f1c3 0300 	rsb	r3, r3, #0
 8011d8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011d8e:	6a3a      	ldr	r2, [r7, #32]
 8011d90:	f7ff f9c2 	bl	8011118 <MADD64>
 8011d94:	4602      	mov	r2, r0
 8011d96:	460b      	mov	r3, r1
 8011d98:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011da2:	627b      	str	r3, [r7, #36]	; 0x24
 8011da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011da6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011daa:	623b      	str	r3, [r7, #32]
 8011dac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db4:	f7ff f9b0 	bl	8011118 <MADD64>
 8011db8:	4602      	mov	r2, r0
 8011dba:	460b      	mov	r3, r1
 8011dbc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc2:	f1c3 0300 	rsb	r3, r3, #0
 8011dc6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011dca:	6a3a      	ldr	r2, [r7, #32]
 8011dcc:	f7ff f9a4 	bl	8011118 <MADD64>
 8011dd0:	4602      	mov	r2, r0
 8011dd2:	460b      	mov	r3, r1
 8011dd4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC0S(5)
 8011dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011de0:	f103 0304 	add.w	r3, r3, #4
 8011de4:	653b      	str	r3, [r7, #80]	; 0x50
 8011de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8011dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dee:	f103 0304 	add.w	r3, r3, #4
 8011df2:	653b      	str	r3, [r7, #80]	; 0x50
 8011df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011df6:	695b      	ldr	r3, [r3, #20]
 8011df8:	627b      	str	r3, [r7, #36]	; 0x24
 8011dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011dfe:	623b      	str	r3, [r7, #32]
 8011e00:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e08:	f7ff f986 	bl	8011118 <MADD64>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e16:	f1c3 0300 	rsb	r3, r3, #0
 8011e1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011e1e:	6a3a      	ldr	r2, [r7, #32]
 8011e20:	f7ff f97a 	bl	8011118 <MADD64>
 8011e24:	4602      	mov	r2, r0
 8011e26:	460b      	mov	r3, r1
 8011e28:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011e32:	627b      	str	r3, [r7, #36]	; 0x24
 8011e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e36:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011e3a:	623b      	str	r3, [r7, #32]
 8011e3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e44:	f7ff f968 	bl	8011118 <MADD64>
 8011e48:	4602      	mov	r2, r0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e52:	f1c3 0300 	rsb	r3, r3, #0
 8011e56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011e5a:	6a3a      	ldr	r2, [r7, #32]
 8011e5c:	f7ff f95c 	bl	8011118 <MADD64>
 8011e60:	4602      	mov	r2, r0
 8011e62:	460b      	mov	r3, r1
 8011e64:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC0S(6)
 8011e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e70:	f103 0304 	add.w	r3, r3, #4
 8011e74:	653b      	str	r3, [r7, #80]	; 0x50
 8011e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e7e:	f103 0304 	add.w	r3, r3, #4
 8011e82:	653b      	str	r3, [r7, #80]	; 0x50
 8011e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e86:	699b      	ldr	r3, [r3, #24]
 8011e88:	627b      	str	r3, [r7, #36]	; 0x24
 8011e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e8e:	623b      	str	r3, [r7, #32]
 8011e90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e98:	f7ff f93e 	bl	8011118 <MADD64>
 8011e9c:	4602      	mov	r2, r0
 8011e9e:	460b      	mov	r3, r1
 8011ea0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea6:	f1c3 0300 	rsb	r3, r3, #0
 8011eaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011eae:	6a3a      	ldr	r2, [r7, #32]
 8011eb0:	f7ff f932 	bl	8011118 <MADD64>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	460b      	mov	r3, r1
 8011eb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8011ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ec6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011eca:	623b      	str	r3, [r7, #32]
 8011ecc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed4:	f7ff f920 	bl	8011118 <MADD64>
 8011ed8:	4602      	mov	r2, r0
 8011eda:	460b      	mov	r3, r1
 8011edc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee2:	f1c3 0300 	rsb	r3, r3, #0
 8011ee6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011eea:	6a3a      	ldr	r2, [r7, #32]
 8011eec:	f7ff f914 	bl	8011118 <MADD64>
 8011ef0:	4602      	mov	r2, r0
 8011ef2:	460b      	mov	r3, r1
 8011ef4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC0S(7)
 8011ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f00:	f103 0304 	add.w	r3, r3, #4
 8011f04:	653b      	str	r3, [r7, #80]	; 0x50
 8011f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f0e:	f103 0304 	add.w	r3, r3, #4
 8011f12:	653b      	str	r3, [r7, #80]	; 0x50
 8011f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f16:	69db      	ldr	r3, [r3, #28]
 8011f18:	627b      	str	r3, [r7, #36]	; 0x24
 8011f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f1e:	623b      	str	r3, [r7, #32]
 8011f20:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f28:	f7ff f8f6 	bl	8011118 <MADD64>
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	460b      	mov	r3, r1
 8011f30:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f36:	f1c3 0300 	rsb	r3, r3, #0
 8011f3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011f3e:	6a3a      	ldr	r2, [r7, #32]
 8011f40:	f7ff f8ea 	bl	8011118 <MADD64>
 8011f44:	4602      	mov	r2, r0
 8011f46:	460b      	mov	r3, r1
 8011f48:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8011f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011f52:	627b      	str	r3, [r7, #36]	; 0x24
 8011f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011f5a:	623b      	str	r3, [r7, #32]
 8011f5c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f64:	f7ff f8d8 	bl	8011118 <MADD64>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f72:	f1c3 0300 	rsb	r3, r3, #0
 8011f76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011f7a:	6a3a      	ldr	r2, [r7, #32]
 8011f7c:	f7ff f8cc 	bl	8011118 <MADD64>
 8011f80:	4602      	mov	r2, r0
 8011f82:	460b      	mov	r3, r1
 8011f84:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 8011f88:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011f8c:	f04f 0214 	mov.w	r2, #20
 8011f90:	f7ff f8de 	bl	8011150 <SAR64>
 8011f94:	4602      	mov	r2, r0
 8011f96:	460b      	mov	r3, r1
 8011f98:	4613      	mov	r3, r2
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f04f 0106 	mov.w	r1, #6
 8011fa0:	f7ff f8fe 	bl	80111a0 <ClipToShort>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	801a      	strh	r2, [r3, #0]
	*(pcm + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f103 0402 	add.w	r4, r3, #2
 8011fb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011fb6:	f04f 0214 	mov.w	r2, #20
 8011fba:	f7ff f8c9 	bl	8011150 <SAR64>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	4613      	mov	r3, r2
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f04f 0106 	mov.w	r1, #6
 8011fca:	f7ff f8e9 	bl	80111a0 <ClipToShort>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	8023      	strh	r3, [r4, #0]

	/* special case, output sample 16 */
	coef = coefBase + 256;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011fd8:	653b      	str	r3, [r7, #80]	; 0x50
	vb1 = vbuf + 64*16;
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
	sum1L = sum1R = rndVal;
 8011fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011fe6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8011fea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011fee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	MC1S(0)
 8011ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ffa:	f103 0304 	add.w	r3, r3, #4
 8011ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8012000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	627b      	str	r3, [r7, #36]	; 0x24
 8012006:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200e:	f7ff f883 	bl	8011118 <MADD64>
 8012012:	4602      	mov	r2, r0
 8012014:	460b      	mov	r3, r1
 8012016:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801201a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801201c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012020:	627b      	str	r3, [r7, #36]	; 0x24
 8012022:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8012026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801202a:	f7ff f875 	bl	8011118 <MADD64>
 801202e:	4602      	mov	r2, r0
 8012030:	460b      	mov	r3, r1
 8012032:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC1S(1)
 8012036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801203e:	f103 0304 	add.w	r3, r3, #4
 8012042:	653b      	str	r3, [r7, #80]	; 0x50
 8012044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	627b      	str	r3, [r7, #36]	; 0x24
 801204a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012052:	f7ff f861 	bl	8011118 <MADD64>
 8012056:	4602      	mov	r2, r0
 8012058:	460b      	mov	r3, r1
 801205a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801205e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012064:	627b      	str	r3, [r7, #36]	; 0x24
 8012066:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206e:	f7ff f853 	bl	8011118 <MADD64>
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC1S(2)
 801207a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012082:	f103 0304 	add.w	r3, r3, #4
 8012086:	653b      	str	r3, [r7, #80]	; 0x50
 8012088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	627b      	str	r3, [r7, #36]	; 0x24
 801208e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8012092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012096:	f7ff f83f 	bl	8011118 <MADD64>
 801209a:	4602      	mov	r2, r0
 801209c:	460b      	mov	r3, r1
 801209e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80120a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120a8:	627b      	str	r3, [r7, #36]	; 0x24
 80120aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80120ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b2:	f7ff f831 	bl	8011118 <MADD64>
 80120b6:	4602      	mov	r2, r0
 80120b8:	460b      	mov	r3, r1
 80120ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC1S(3)
 80120be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120c6:	f103 0304 	add.w	r3, r3, #4
 80120ca:	653b      	str	r3, [r7, #80]	; 0x50
 80120cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	627b      	str	r3, [r7, #36]	; 0x24
 80120d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80120d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120da:	f7ff f81d 	bl	8011118 <MADD64>
 80120de:	4602      	mov	r2, r0
 80120e0:	460b      	mov	r3, r1
 80120e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80120e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120ec:	627b      	str	r3, [r7, #36]	; 0x24
 80120ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80120f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f6:	f7ff f80f 	bl	8011118 <MADD64>
 80120fa:	4602      	mov	r2, r0
 80120fc:	460b      	mov	r3, r1
 80120fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC1S(4)
 8012102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210a:	f103 0304 	add.w	r3, r3, #4
 801210e:	653b      	str	r3, [r7, #80]	; 0x50
 8012110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012112:	691b      	ldr	r3, [r3, #16]
 8012114:	627b      	str	r3, [r7, #36]	; 0x24
 8012116:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211e:	f7fe fffb 	bl	8011118 <MADD64>
 8012122:	4602      	mov	r2, r0
 8012124:	460b      	mov	r3, r1
 8012126:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801212a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012130:	627b      	str	r3, [r7, #36]	; 0x24
 8012132:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8012136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213a:	f7fe ffed 	bl	8011118 <MADD64>
 801213e:	4602      	mov	r2, r0
 8012140:	460b      	mov	r3, r1
 8012142:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC1S(5)
 8012146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801214c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801214e:	f103 0304 	add.w	r3, r3, #4
 8012152:	653b      	str	r3, [r7, #80]	; 0x50
 8012154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012156:	695b      	ldr	r3, [r3, #20]
 8012158:	627b      	str	r3, [r7, #36]	; 0x24
 801215a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012162:	f7fe ffd9 	bl	8011118 <MADD64>
 8012166:	4602      	mov	r2, r0
 8012168:	460b      	mov	r3, r1
 801216a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801216e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012174:	627b      	str	r3, [r7, #36]	; 0x24
 8012176:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	f7fe ffcb 	bl	8011118 <MADD64>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC1S(6)
 801218a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012192:	f103 0304 	add.w	r3, r3, #4
 8012196:	653b      	str	r3, [r7, #80]	; 0x50
 8012198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801219a:	699b      	ldr	r3, [r3, #24]
 801219c:	627b      	str	r3, [r7, #36]	; 0x24
 801219e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80121a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a6:	f7fe ffb7 	bl	8011118 <MADD64>
 80121aa:	4602      	mov	r2, r0
 80121ac:	460b      	mov	r3, r1
 80121ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80121b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80121b8:	627b      	str	r3, [r7, #36]	; 0x24
 80121ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80121be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c2:	f7fe ffa9 	bl	8011118 <MADD64>
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	MC1S(7)
 80121ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121d6:	f103 0304 	add.w	r3, r3, #4
 80121da:	653b      	str	r3, [r7, #80]	; 0x50
 80121dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121de:	69db      	ldr	r3, [r3, #28]
 80121e0:	627b      	str	r3, [r7, #36]	; 0x24
 80121e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80121e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ea:	f7fe ff95 	bl	8011118 <MADD64>
 80121ee:	4602      	mov	r2, r0
 80121f0:	460b      	mov	r3, r1
 80121f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80121f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80121fc:	627b      	str	r3, [r7, #36]	; 0x24
 80121fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8012202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012206:	f7fe ff87 	bl	8011118 <MADD64>
 801220a:	4602      	mov	r2, r0
 801220c:	460b      	mov	r3, r1
 801220e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	*(pcm + 2*16 + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012218:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801221c:	f04f 0214 	mov.w	r2, #20
 8012220:	f7fe ff96 	bl	8011150 <SAR64>
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	4613      	mov	r3, r2
 801222a:	4618      	mov	r0, r3
 801222c:	f04f 0106 	mov.w	r1, #6
 8012230:	f7fe ffb6 	bl	80111a0 <ClipToShort>
 8012234:	4603      	mov	r3, r0
 8012236:	8023      	strh	r3, [r4, #0]
	*(pcm + 2*16 + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	f103 0442 	add.w	r4, r3, #66	; 0x42
 801223e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8012242:	f04f 0214 	mov.w	r2, #20
 8012246:	f7fe ff83 	bl	8011150 <SAR64>
 801224a:	4602      	mov	r2, r0
 801224c:	460b      	mov	r3, r1
 801224e:	4613      	mov	r3, r2
 8012250:	4618      	mov	r0, r3
 8012252:	f04f 0106 	mov.w	r1, #6
 8012256:	f7fe ffa3 	bl	80111a0 <ClipToShort>
 801225a:	4603      	mov	r3, r0
 801225c:	8023      	strh	r3, [r4, #0]

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8012264:	653b      	str	r3, [r7, #80]	; 0x50
	vb1 = vbuf + 64;
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801226c:	64fb      	str	r3, [r7, #76]	; 0x4c
	pcm += 2;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	f103 0304 	add.w	r3, r3, #4
 8012274:	60fb      	str	r3, [r7, #12]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 8012276:	f04f 030f 	mov.w	r3, #15
 801227a:	657b      	str	r3, [r7, #84]	; 0x54
 801227c:	e3ec      	b.n	8012a58 <xmp3_PolyphaseStereo+0xf80>
		sum1L = sum2L = rndVal;
 801227e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012282:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8012286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801228a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		sum1R = sum2R = rndVal;
 801228e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012292:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012296:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801229a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		MC2S(0)
 801229e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a6:	f103 0304 	add.w	r3, r3, #4
 80122aa:	653b      	str	r3, [r7, #80]	; 0x50
 80122ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80122b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b4:	f103 0304 	add.w	r3, r3, #4
 80122b8:	653b      	str	r3, [r7, #80]	; 0x50
 80122ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	627b      	str	r3, [r7, #36]	; 0x24
 80122c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122c4:	623b      	str	r3, [r7, #32]
 80122c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80122ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ce:	f7fe ff23 	bl	8011118 <MADD64>
 80122d2:	4602      	mov	r2, r0
 80122d4:	460b      	mov	r3, r1
 80122d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80122da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80122de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e2:	f7fe ff19 	bl	8011118 <MADD64>
 80122e6:	4602      	mov	r2, r0
 80122e8:	460b      	mov	r3, r1
 80122ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80122ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f0:	f1c3 0300 	rsb	r3, r3, #0
 80122f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80122f8:	6a3a      	ldr	r2, [r7, #32]
 80122fa:	f7fe ff0d 	bl	8011118 <MADD64>
 80122fe:	4602      	mov	r2, r0
 8012300:	460b      	mov	r3, r1
 8012302:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8012306:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801230a:	6a3a      	ldr	r2, [r7, #32]
 801230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230e:	f7fe ff03 	bl	8011118 <MADD64>
 8012312:	4602      	mov	r2, r0
 8012314:	460b      	mov	r3, r1
 8012316:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801231a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801231c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012320:	627b      	str	r3, [r7, #36]	; 0x24
 8012322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012324:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8012328:	623b      	str	r3, [r7, #32]
 801232a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012332:	f7fe fef1 	bl	8011118 <MADD64>
 8012336:	4602      	mov	r2, r0
 8012338:	460b      	mov	r3, r1
 801233a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801233e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012346:	f7fe fee7 	bl	8011118 <MADD64>
 801234a:	4602      	mov	r2, r0
 801234c:	460b      	mov	r3, r1
 801234e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012354:	f1c3 0300 	rsb	r3, r3, #0
 8012358:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801235c:	6a3a      	ldr	r2, [r7, #32]
 801235e:	f7fe fedb 	bl	8011118 <MADD64>
 8012362:	4602      	mov	r2, r0
 8012364:	460b      	mov	r3, r1
 8012366:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801236a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801236e:	6a3a      	ldr	r2, [r7, #32]
 8012370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012372:	f7fe fed1 	bl	8011118 <MADD64>
 8012376:	4602      	mov	r2, r0
 8012378:	460b      	mov	r3, r1
 801237a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2S(1)
 801237e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012386:	f103 0304 	add.w	r3, r3, #4
 801238a:	653b      	str	r3, [r7, #80]	; 0x50
 801238c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	62bb      	str	r3, [r7, #40]	; 0x28
 8012392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012394:	f103 0304 	add.w	r3, r3, #4
 8012398:	653b      	str	r3, [r7, #80]	; 0x50
 801239a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	627b      	str	r3, [r7, #36]	; 0x24
 80123a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123a4:	623b      	str	r3, [r7, #32]
 80123a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80123aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ae:	f7fe feb3 	bl	8011118 <MADD64>
 80123b2:	4602      	mov	r2, r0
 80123b4:	460b      	mov	r3, r1
 80123b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80123ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80123be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c2:	f7fe fea9 	bl	8011118 <MADD64>
 80123c6:	4602      	mov	r2, r0
 80123c8:	460b      	mov	r3, r1
 80123ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80123ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d0:	f1c3 0300 	rsb	r3, r3, #0
 80123d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80123d8:	6a3a      	ldr	r2, [r7, #32]
 80123da:	f7fe fe9d 	bl	8011118 <MADD64>
 80123de:	4602      	mov	r2, r0
 80123e0:	460b      	mov	r3, r1
 80123e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80123e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80123ea:	6a3a      	ldr	r2, [r7, #32]
 80123ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ee:	f7fe fe93 	bl	8011118 <MADD64>
 80123f2:	4602      	mov	r2, r0
 80123f4:	460b      	mov	r3, r1
 80123f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80123fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012400:	627b      	str	r3, [r7, #36]	; 0x24
 8012402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012408:	623b      	str	r3, [r7, #32]
 801240a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801240e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012412:	f7fe fe81 	bl	8011118 <MADD64>
 8012416:	4602      	mov	r2, r0
 8012418:	460b      	mov	r3, r1
 801241a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801241e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012426:	f7fe fe77 	bl	8011118 <MADD64>
 801242a:	4602      	mov	r2, r0
 801242c:	460b      	mov	r3, r1
 801242e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012434:	f1c3 0300 	rsb	r3, r3, #0
 8012438:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801243c:	6a3a      	ldr	r2, [r7, #32]
 801243e:	f7fe fe6b 	bl	8011118 <MADD64>
 8012442:	4602      	mov	r2, r0
 8012444:	460b      	mov	r3, r1
 8012446:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801244a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801244e:	6a3a      	ldr	r2, [r7, #32]
 8012450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012452:	f7fe fe61 	bl	8011118 <MADD64>
 8012456:	4602      	mov	r2, r0
 8012458:	460b      	mov	r3, r1
 801245a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2S(2)
 801245e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012466:	f103 0304 	add.w	r3, r3, #4
 801246a:	653b      	str	r3, [r7, #80]	; 0x50
 801246c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	62bb      	str	r3, [r7, #40]	; 0x28
 8012472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012474:	f103 0304 	add.w	r3, r3, #4
 8012478:	653b      	str	r3, [r7, #80]	; 0x50
 801247a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801247c:	689b      	ldr	r3, [r3, #8]
 801247e:	627b      	str	r3, [r7, #36]	; 0x24
 8012480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012484:	623b      	str	r3, [r7, #32]
 8012486:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248e:	f7fe fe43 	bl	8011118 <MADD64>
 8012492:	4602      	mov	r2, r0
 8012494:	460b      	mov	r3, r1
 8012496:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801249a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a2:	f7fe fe39 	bl	8011118 <MADD64>
 80124a6:	4602      	mov	r2, r0
 80124a8:	460b      	mov	r3, r1
 80124aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80124ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b0:	f1c3 0300 	rsb	r3, r3, #0
 80124b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80124b8:	6a3a      	ldr	r2, [r7, #32]
 80124ba:	f7fe fe2d 	bl	8011118 <MADD64>
 80124be:	4602      	mov	r2, r0
 80124c0:	460b      	mov	r3, r1
 80124c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80124c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80124ca:	6a3a      	ldr	r2, [r7, #32]
 80124cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ce:	f7fe fe23 	bl	8011118 <MADD64>
 80124d2:	4602      	mov	r2, r0
 80124d4:	460b      	mov	r3, r1
 80124d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80124da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80124e0:	627b      	str	r3, [r7, #36]	; 0x24
 80124e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80124e8:	623b      	str	r3, [r7, #32]
 80124ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80124ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f2:	f7fe fe11 	bl	8011118 <MADD64>
 80124f6:	4602      	mov	r2, r0
 80124f8:	460b      	mov	r3, r1
 80124fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80124fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012506:	f7fe fe07 	bl	8011118 <MADD64>
 801250a:	4602      	mov	r2, r0
 801250c:	460b      	mov	r3, r1
 801250e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012514:	f1c3 0300 	rsb	r3, r3, #0
 8012518:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801251c:	6a3a      	ldr	r2, [r7, #32]
 801251e:	f7fe fdfb 	bl	8011118 <MADD64>
 8012522:	4602      	mov	r2, r0
 8012524:	460b      	mov	r3, r1
 8012526:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801252a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801252e:	6a3a      	ldr	r2, [r7, #32]
 8012530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012532:	f7fe fdf1 	bl	8011118 <MADD64>
 8012536:	4602      	mov	r2, r0
 8012538:	460b      	mov	r3, r1
 801253a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2S(3)
 801253e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012546:	f103 0304 	add.w	r3, r3, #4
 801254a:	653b      	str	r3, [r7, #80]	; 0x50
 801254c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	62bb      	str	r3, [r7, #40]	; 0x28
 8012552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012554:	f103 0304 	add.w	r3, r3, #4
 8012558:	653b      	str	r3, [r7, #80]	; 0x50
 801255a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801255c:	68db      	ldr	r3, [r3, #12]
 801255e:	627b      	str	r3, [r7, #36]	; 0x24
 8012560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012564:	623b      	str	r3, [r7, #32]
 8012566:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256e:	f7fe fdd3 	bl	8011118 <MADD64>
 8012572:	4602      	mov	r2, r0
 8012574:	460b      	mov	r3, r1
 8012576:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801257a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012582:	f7fe fdc9 	bl	8011118 <MADD64>
 8012586:	4602      	mov	r2, r0
 8012588:	460b      	mov	r3, r1
 801258a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012590:	f1c3 0300 	rsb	r3, r3, #0
 8012594:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8012598:	6a3a      	ldr	r2, [r7, #32]
 801259a:	f7fe fdbd 	bl	8011118 <MADD64>
 801259e:	4602      	mov	r2, r0
 80125a0:	460b      	mov	r3, r1
 80125a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80125a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80125aa:	6a3a      	ldr	r2, [r7, #32]
 80125ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ae:	f7fe fdb3 	bl	8011118 <MADD64>
 80125b2:	4602      	mov	r2, r0
 80125b4:	460b      	mov	r3, r1
 80125b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80125ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125c0:	627b      	str	r3, [r7, #36]	; 0x24
 80125c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80125c8:	623b      	str	r3, [r7, #32]
 80125ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80125ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d2:	f7fe fda1 	bl	8011118 <MADD64>
 80125d6:	4602      	mov	r2, r0
 80125d8:	460b      	mov	r3, r1
 80125da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80125de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80125e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e6:	f7fe fd97 	bl	8011118 <MADD64>
 80125ea:	4602      	mov	r2, r0
 80125ec:	460b      	mov	r3, r1
 80125ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80125f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f4:	f1c3 0300 	rsb	r3, r3, #0
 80125f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80125fc:	6a3a      	ldr	r2, [r7, #32]
 80125fe:	f7fe fd8b 	bl	8011118 <MADD64>
 8012602:	4602      	mov	r2, r0
 8012604:	460b      	mov	r3, r1
 8012606:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801260a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801260e:	6a3a      	ldr	r2, [r7, #32]
 8012610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012612:	f7fe fd81 	bl	8011118 <MADD64>
 8012616:	4602      	mov	r2, r0
 8012618:	460b      	mov	r3, r1
 801261a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2S(4)
 801261e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012626:	f103 0304 	add.w	r3, r3, #4
 801262a:	653b      	str	r3, [r7, #80]	; 0x50
 801262c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	62bb      	str	r3, [r7, #40]	; 0x28
 8012632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012634:	f103 0304 	add.w	r3, r3, #4
 8012638:	653b      	str	r3, [r7, #80]	; 0x50
 801263a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801263c:	691b      	ldr	r3, [r3, #16]
 801263e:	627b      	str	r3, [r7, #36]	; 0x24
 8012640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012644:	623b      	str	r3, [r7, #32]
 8012646:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264e:	f7fe fd63 	bl	8011118 <MADD64>
 8012652:	4602      	mov	r2, r0
 8012654:	460b      	mov	r3, r1
 8012656:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801265a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012662:	f7fe fd59 	bl	8011118 <MADD64>
 8012666:	4602      	mov	r2, r0
 8012668:	460b      	mov	r3, r1
 801266a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012670:	f1c3 0300 	rsb	r3, r3, #0
 8012674:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8012678:	6a3a      	ldr	r2, [r7, #32]
 801267a:	f7fe fd4d 	bl	8011118 <MADD64>
 801267e:	4602      	mov	r2, r0
 8012680:	460b      	mov	r3, r1
 8012682:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8012686:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801268a:	6a3a      	ldr	r2, [r7, #32]
 801268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801268e:	f7fe fd43 	bl	8011118 <MADD64>
 8012692:	4602      	mov	r2, r0
 8012694:	460b      	mov	r3, r1
 8012696:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801269a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126a0:	627b      	str	r3, [r7, #36]	; 0x24
 80126a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80126a8:	623b      	str	r3, [r7, #32]
 80126aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80126ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b2:	f7fe fd31 	bl	8011118 <MADD64>
 80126b6:	4602      	mov	r2, r0
 80126b8:	460b      	mov	r3, r1
 80126ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80126be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80126c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c6:	f7fe fd27 	bl	8011118 <MADD64>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80126d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d4:	f1c3 0300 	rsb	r3, r3, #0
 80126d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80126dc:	6a3a      	ldr	r2, [r7, #32]
 80126de:	f7fe fd1b 	bl	8011118 <MADD64>
 80126e2:	4602      	mov	r2, r0
 80126e4:	460b      	mov	r3, r1
 80126e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80126ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80126ee:	6a3a      	ldr	r2, [r7, #32]
 80126f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f2:	f7fe fd11 	bl	8011118 <MADD64>
 80126f6:	4602      	mov	r2, r0
 80126f8:	460b      	mov	r3, r1
 80126fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2S(5)
 80126fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012706:	f103 0304 	add.w	r3, r3, #4
 801270a:	653b      	str	r3, [r7, #80]	; 0x50
 801270c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	62bb      	str	r3, [r7, #40]	; 0x28
 8012712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012714:	f103 0304 	add.w	r3, r3, #4
 8012718:	653b      	str	r3, [r7, #80]	; 0x50
 801271a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801271c:	695b      	ldr	r3, [r3, #20]
 801271e:	627b      	str	r3, [r7, #36]	; 0x24
 8012720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012724:	623b      	str	r3, [r7, #32]
 8012726:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272e:	f7fe fcf3 	bl	8011118 <MADD64>
 8012732:	4602      	mov	r2, r0
 8012734:	460b      	mov	r3, r1
 8012736:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801273a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012742:	f7fe fce9 	bl	8011118 <MADD64>
 8012746:	4602      	mov	r2, r0
 8012748:	460b      	mov	r3, r1
 801274a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012750:	f1c3 0300 	rsb	r3, r3, #0
 8012754:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8012758:	6a3a      	ldr	r2, [r7, #32]
 801275a:	f7fe fcdd 	bl	8011118 <MADD64>
 801275e:	4602      	mov	r2, r0
 8012760:	460b      	mov	r3, r1
 8012762:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8012766:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801276a:	6a3a      	ldr	r2, [r7, #32]
 801276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276e:	f7fe fcd3 	bl	8011118 <MADD64>
 8012772:	4602      	mov	r2, r0
 8012774:	460b      	mov	r3, r1
 8012776:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801277a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801277c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012780:	627b      	str	r3, [r7, #36]	; 0x24
 8012782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012784:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012788:	623b      	str	r3, [r7, #32]
 801278a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012792:	f7fe fcc1 	bl	8011118 <MADD64>
 8012796:	4602      	mov	r2, r0
 8012798:	460b      	mov	r3, r1
 801279a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801279e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80127a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a6:	f7fe fcb7 	bl	8011118 <MADD64>
 80127aa:	4602      	mov	r2, r0
 80127ac:	460b      	mov	r3, r1
 80127ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80127b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b4:	f1c3 0300 	rsb	r3, r3, #0
 80127b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80127bc:	6a3a      	ldr	r2, [r7, #32]
 80127be:	f7fe fcab 	bl	8011118 <MADD64>
 80127c2:	4602      	mov	r2, r0
 80127c4:	460b      	mov	r3, r1
 80127c6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80127ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80127ce:	6a3a      	ldr	r2, [r7, #32]
 80127d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d2:	f7fe fca1 	bl	8011118 <MADD64>
 80127d6:	4602      	mov	r2, r0
 80127d8:	460b      	mov	r3, r1
 80127da:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2S(6)
 80127de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e6:	f103 0304 	add.w	r3, r3, #4
 80127ea:	653b      	str	r3, [r7, #80]	; 0x50
 80127ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80127f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127f4:	f103 0304 	add.w	r3, r3, #4
 80127f8:	653b      	str	r3, [r7, #80]	; 0x50
 80127fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127fc:	699b      	ldr	r3, [r3, #24]
 80127fe:	627b      	str	r3, [r7, #36]	; 0x24
 8012800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012804:	623b      	str	r3, [r7, #32]
 8012806:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280e:	f7fe fc83 	bl	8011118 <MADD64>
 8012812:	4602      	mov	r2, r0
 8012814:	460b      	mov	r3, r1
 8012816:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801281a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801281e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012822:	f7fe fc79 	bl	8011118 <MADD64>
 8012826:	4602      	mov	r2, r0
 8012828:	460b      	mov	r3, r1
 801282a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012830:	f1c3 0300 	rsb	r3, r3, #0
 8012834:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8012838:	6a3a      	ldr	r2, [r7, #32]
 801283a:	f7fe fc6d 	bl	8011118 <MADD64>
 801283e:	4602      	mov	r2, r0
 8012840:	460b      	mov	r3, r1
 8012842:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8012846:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801284a:	6a3a      	ldr	r2, [r7, #32]
 801284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284e:	f7fe fc63 	bl	8011118 <MADD64>
 8012852:	4602      	mov	r2, r0
 8012854:	460b      	mov	r3, r1
 8012856:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801285c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012860:	627b      	str	r3, [r7, #36]	; 0x24
 8012862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012864:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012868:	623b      	str	r3, [r7, #32]
 801286a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012872:	f7fe fc51 	bl	8011118 <MADD64>
 8012876:	4602      	mov	r2, r0
 8012878:	460b      	mov	r3, r1
 801287a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801287e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012886:	f7fe fc47 	bl	8011118 <MADD64>
 801288a:	4602      	mov	r2, r0
 801288c:	460b      	mov	r3, r1
 801288e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012894:	f1c3 0300 	rsb	r3, r3, #0
 8012898:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801289c:	6a3a      	ldr	r2, [r7, #32]
 801289e:	f7fe fc3b 	bl	8011118 <MADD64>
 80128a2:	4602      	mov	r2, r0
 80128a4:	460b      	mov	r3, r1
 80128a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80128aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80128ae:	6a3a      	ldr	r2, [r7, #32]
 80128b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b2:	f7fe fc31 	bl	8011118 <MADD64>
 80128b6:	4602      	mov	r2, r0
 80128b8:	460b      	mov	r3, r1
 80128ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
		MC2S(7)
 80128be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128c6:	f103 0304 	add.w	r3, r3, #4
 80128ca:	653b      	str	r3, [r7, #80]	; 0x50
 80128cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80128d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128d4:	f103 0304 	add.w	r3, r3, #4
 80128d8:	653b      	str	r3, [r7, #80]	; 0x50
 80128da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128dc:	69db      	ldr	r3, [r3, #28]
 80128de:	627b      	str	r3, [r7, #36]	; 0x24
 80128e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128e4:	623b      	str	r3, [r7, #32]
 80128e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80128ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ee:	f7fe fc13 	bl	8011118 <MADD64>
 80128f2:	4602      	mov	r2, r0
 80128f4:	460b      	mov	r3, r1
 80128f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80128fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80128fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012902:	f7fe fc09 	bl	8011118 <MADD64>
 8012906:	4602      	mov	r2, r0
 8012908:	460b      	mov	r3, r1
 801290a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012910:	f1c3 0300 	rsb	r3, r3, #0
 8012914:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8012918:	6a3a      	ldr	r2, [r7, #32]
 801291a:	f7fe fbfd 	bl	8011118 <MADD64>
 801291e:	4602      	mov	r2, r0
 8012920:	460b      	mov	r3, r1
 8012922:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8012926:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801292a:	6a3a      	ldr	r2, [r7, #32]
 801292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801292e:	f7fe fbf3 	bl	8011118 <MADD64>
 8012932:	4602      	mov	r2, r0
 8012934:	460b      	mov	r3, r1
 8012936:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801293a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801293c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012940:	627b      	str	r3, [r7, #36]	; 0x24
 8012942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012944:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012948:	623b      	str	r3, [r7, #32]
 801294a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012952:	f7fe fbe1 	bl	8011118 <MADD64>
 8012956:	4602      	mov	r2, r0
 8012958:	460b      	mov	r3, r1
 801295a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801295e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012966:	f7fe fbd7 	bl	8011118 <MADD64>
 801296a:	4602      	mov	r2, r0
 801296c:	460b      	mov	r3, r1
 801296e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012974:	f1c3 0300 	rsb	r3, r3, #0
 8012978:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801297c:	6a3a      	ldr	r2, [r7, #32]
 801297e:	f7fe fbcb 	bl	8011118 <MADD64>
 8012982:	4602      	mov	r2, r0
 8012984:	460b      	mov	r3, r1
 8012986:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 801298a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801298e:	6a3a      	ldr	r2, [r7, #32]
 8012990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012992:	f7fe fbc1 	bl	8011118 <MADD64>
 8012996:	4602      	mov	r2, r0
 8012998:	460b      	mov	r3, r1
 801299a:	e9c7 2304 	strd	r2, r3, [r7, #16]

		vb1 += 64;
 801299e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80129a4:	64fb      	str	r3, [r7, #76]	; 0x4c
		*(pcm + 0)         = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 80129a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80129aa:	f04f 0214 	mov.w	r2, #20
 80129ae:	f7fe fbcf 	bl	8011150 <SAR64>
 80129b2:	4602      	mov	r2, r0
 80129b4:	460b      	mov	r3, r1
 80129b6:	4613      	mov	r3, r2
 80129b8:	4618      	mov	r0, r3
 80129ba:	f04f 0106 	mov.w	r1, #6
 80129be:	f7fe fbef 	bl	80111a0 <ClipToShort>
 80129c2:	4603      	mov	r3, r0
 80129c4:	461a      	mov	r2, r3
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	801a      	strh	r2, [r3, #0]
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f103 0402 	add.w	r4, r3, #2
 80129d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80129d4:	f04f 0214 	mov.w	r2, #20
 80129d8:	f7fe fbba 	bl	8011150 <SAR64>
 80129dc:	4602      	mov	r2, r0
 80129de:	460b      	mov	r3, r1
 80129e0:	4613      	mov	r3, r2
 80129e2:	4618      	mov	r0, r3
 80129e4:	f04f 0106 	mov.w	r1, #6
 80129e8:	f7fe fbda 	bl	80111a0 <ClipToShort>
 80129ec:	4603      	mov	r3, r0
 80129ee:	8023      	strh	r3, [r4, #0]
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 80129f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	18d4      	adds	r4, r2, r3
 80129fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80129fe:	f04f 0214 	mov.w	r2, #20
 8012a02:	f7fe fba5 	bl	8011150 <SAR64>
 8012a06:	4602      	mov	r2, r0
 8012a08:	460b      	mov	r3, r1
 8012a0a:	4613      	mov	r3, r2
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f04f 0106 	mov.w	r1, #6
 8012a12:	f7fe fbc5 	bl	80111a0 <ClipToShort>
 8012a16:	4603      	mov	r3, r0
 8012a18:	8023      	strh	r3, [r4, #0]
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
 8012a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a1c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8012a20:	f103 0302 	add.w	r3, r3, #2
 8012a24:	68fa      	ldr	r2, [r7, #12]
 8012a26:	18d4      	adds	r4, r2, r3
 8012a28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012a2c:	f04f 0214 	mov.w	r2, #20
 8012a30:	f7fe fb8e 	bl	8011150 <SAR64>
 8012a34:	4602      	mov	r2, r0
 8012a36:	460b      	mov	r3, r1
 8012a38:	4613      	mov	r3, r2
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f04f 0106 	mov.w	r1, #6
 8012a40:	f7fe fbae 	bl	80111a0 <ClipToShort>
 8012a44:	4603      	mov	r3, r0
 8012a46:	8023      	strh	r3, [r4, #0]
		pcm += 2;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f103 0304 	add.w	r3, r3, #4
 8012a4e:	60fb      	str	r3, [r7, #12]
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm += 2;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 8012a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a52:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a56:	657b      	str	r3, [r7, #84]	; 0x54
 8012a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	f73f ac0f 	bgt.w	801227e <xmp3_PolyphaseStereo+0x7a6>
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
		pcm += 2;
	}
}
 8012a60:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd90      	pop	{r4, r7, pc}

08012a68 <UnpackSFMPEG1>:
 *                so that we index through consectutive memory locations when unpacking 
 *                (make sure dequantizer follows same convention)
 *              Illegal Intensity Position = 7 (always) for MPEG1 scale factors
 **************************************************************************************/
static void UnpackSFMPEG1(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int *scfsi, int gr, ScaleFactorInfoSub *sfisGr0)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b088      	sub	sp, #32
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
 8012a74:	603b      	str	r3, [r7, #0]
	int sfb;
	int slen0, slen1;
	
	/* these can be 0, so make sure GetBits(bsi, 0) returns 0 (no >> 32 or anything) */
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	68da      	ldr	r2, [r3, #12]
 8012a7a:	f241 13ac 	movw	r3, #4524	; 0x11ac
 8012a7e:	f6c0 0303 	movt	r3, #2051	; 0x803
 8012a82:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8012a86:	61bb      	str	r3, [r7, #24]
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	f241 12ac 	movw	r2, #4524	; 0x11ac
 8012a90:	f6c0 0203 	movt	r2, #2051	; 0x803
 8012a94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012a98:	18d3      	adds	r3, r2, r3
 8012a9a:	785b      	ldrb	r3, [r3, #1]
 8012a9c:	617b      	str	r3, [r7, #20]
	
	if (sis->blockType == 2) {
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	695b      	ldr	r3, [r3, #20]
 8012aa2:	2b02      	cmp	r3, #2
 8012aa4:	f040 80a8 	bne.w	8012bf8 <UnpackSFMPEG1+0x190>
		/* short block, type 2 (implies winSwitchFlag == 1) */
		if (sis->mixedBlock) {          
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	699b      	ldr	r3, [r3, #24]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d018      	beq.n	8012ae2 <UnpackSFMPEG1+0x7a>
			/* do long block portion */
			for (sfb = 0; sfb < 8; sfb++)
 8012ab0:	f04f 0300 	mov.w	r3, #0
 8012ab4:	61fb      	str	r3, [r7, #28]
 8012ab6:	e00d      	b.n	8012ad4 <UnpackSFMPEG1+0x6c>
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 8012ab8:	68f8      	ldr	r0, [r7, #12]
 8012aba:	69b9      	ldr	r1, [r7, #24]
 8012abc:	f7f9 fa28 	bl	800bf10 <xmp3_GetBits>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	b2da      	uxtb	r2, r3
 8012ac4:	6879      	ldr	r1, [r7, #4]
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	18cb      	adds	r3, r1, r3
 8012aca:	701a      	strb	r2, [r3, #0]
	
	if (sis->blockType == 2) {
		/* short block, type 2 (implies winSwitchFlag == 1) */
		if (sis->mixedBlock) {          
			/* do long block portion */
			for (sfb = 0; sfb < 8; sfb++)
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	f103 0301 	add.w	r3, r3, #1
 8012ad2:	61fb      	str	r3, [r7, #28]
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	2b07      	cmp	r3, #7
 8012ad8:	ddee      	ble.n	8012ab8 <UnpackSFMPEG1+0x50>
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
			sfb = 3;
 8012ada:	f04f 0303 	mov.w	r3, #3
 8012ade:	61fb      	str	r3, [r7, #28]
		} else {
			/* all short blocks */
			sfb = 0;
		}

		for (      ; sfb < 6; sfb++) {
 8012ae0:	e03a      	b.n	8012b58 <UnpackSFMPEG1+0xf0>
			for (sfb = 0; sfb < 8; sfb++)
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
			sfb = 3;
		} else {
			/* all short blocks */
			sfb = 0;
 8012ae2:	f04f 0300 	mov.w	r3, #0
 8012ae6:	61fb      	str	r3, [r7, #28]
		}

		for (      ; sfb < 6; sfb++) {
 8012ae8:	e036      	b.n	8012b58 <UnpackSFMPEG1+0xf0>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 8012aea:	68f8      	ldr	r0, [r7, #12]
 8012aec:	69b9      	ldr	r1, [r7, #24]
 8012aee:	f7f9 fa0f 	bl	800bf10 <xmp3_GetBits>
 8012af2:	4603      	mov	r3, r0
 8012af4:	b2d9      	uxtb	r1, r3
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	69fa      	ldr	r2, [r7, #28]
 8012afa:	4613      	mov	r3, r2
 8012afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b00:	189b      	adds	r3, r3, r2
 8012b02:	18c3      	adds	r3, r0, r3
 8012b04:	f103 0317 	add.w	r3, r3, #23
 8012b08:	460a      	mov	r2, r1
 8012b0a:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	69b9      	ldr	r1, [r7, #24]
 8012b10:	f7f9 f9fe 	bl	800bf10 <xmp3_GetBits>
 8012b14:	4603      	mov	r3, r0
 8012b16:	b2d9      	uxtb	r1, r3
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	69fa      	ldr	r2, [r7, #28]
 8012b1c:	4613      	mov	r3, r2
 8012b1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b22:	189b      	adds	r3, r3, r2
 8012b24:	18c3      	adds	r3, r0, r3
 8012b26:	f103 0318 	add.w	r3, r3, #24
 8012b2a:	460a      	mov	r2, r1
 8012b2c:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 8012b2e:	68f8      	ldr	r0, [r7, #12]
 8012b30:	69b9      	ldr	r1, [r7, #24]
 8012b32:	f7f9 f9ed 	bl	800bf10 <xmp3_GetBits>
 8012b36:	4603      	mov	r3, r0
 8012b38:	b2d9      	uxtb	r1, r3
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	69fa      	ldr	r2, [r7, #28]
 8012b3e:	4613      	mov	r3, r2
 8012b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b44:	189b      	adds	r3, r3, r2
 8012b46:	18c3      	adds	r3, r0, r3
 8012b48:	f103 0319 	add.w	r3, r3, #25
 8012b4c:	460a      	mov	r2, r1
 8012b4e:	701a      	strb	r2, [r3, #0]
		} else {
			/* all short blocks */
			sfb = 0;
		}

		for (      ; sfb < 6; sfb++) {
 8012b50:	69fb      	ldr	r3, [r7, #28]
 8012b52:	f103 0301 	add.w	r3, r3, #1
 8012b56:	61fb      	str	r3, [r7, #28]
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	2b05      	cmp	r3, #5
 8012b5c:	ddc5      	ble.n	8012aea <UnpackSFMPEG1+0x82>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
		}

		for (      ; sfb < 12; sfb++) {
 8012b5e:	e036      	b.n	8012bce <UnpackSFMPEG1+0x166>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 8012b60:	68f8      	ldr	r0, [r7, #12]
 8012b62:	6979      	ldr	r1, [r7, #20]
 8012b64:	f7f9 f9d4 	bl	800bf10 <xmp3_GetBits>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	b2d9      	uxtb	r1, r3
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	69fa      	ldr	r2, [r7, #28]
 8012b70:	4613      	mov	r3, r2
 8012b72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b76:	189b      	adds	r3, r3, r2
 8012b78:	18c3      	adds	r3, r0, r3
 8012b7a:	f103 0317 	add.w	r3, r3, #23
 8012b7e:	460a      	mov	r2, r1
 8012b80:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8012b82:	68f8      	ldr	r0, [r7, #12]
 8012b84:	6979      	ldr	r1, [r7, #20]
 8012b86:	f7f9 f9c3 	bl	800bf10 <xmp3_GetBits>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	b2d9      	uxtb	r1, r3
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	69fa      	ldr	r2, [r7, #28]
 8012b92:	4613      	mov	r3, r2
 8012b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b98:	189b      	adds	r3, r3, r2
 8012b9a:	18c3      	adds	r3, r0, r3
 8012b9c:	f103 0318 	add.w	r3, r3, #24
 8012ba0:	460a      	mov	r2, r1
 8012ba2:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 8012ba4:	68f8      	ldr	r0, [r7, #12]
 8012ba6:	6979      	ldr	r1, [r7, #20]
 8012ba8:	f7f9 f9b2 	bl	800bf10 <xmp3_GetBits>
 8012bac:	4603      	mov	r3, r0
 8012bae:	b2d9      	uxtb	r1, r3
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	69fa      	ldr	r2, [r7, #28]
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012bba:	189b      	adds	r3, r3, r2
 8012bbc:	18c3      	adds	r3, r0, r3
 8012bbe:	f103 0319 	add.w	r3, r3, #25
 8012bc2:	460a      	mov	r2, r1
 8012bc4:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
		}

		for (      ; sfb < 12; sfb++) {
 8012bc6:	69fb      	ldr	r3, [r7, #28]
 8012bc8:	f103 0301 	add.w	r3, r3, #1
 8012bcc:	61fb      	str	r3, [r7, #28]
 8012bce:	69fb      	ldr	r3, [r7, #28]
 8012bd0:	2b0b      	cmp	r3, #11
 8012bd2:	ddc5      	ble.n	8012b60 <UnpackSFMPEG1+0xf8>
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
		}

		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f04f 0200 	mov.w	r2, #0
 8012bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8012bf6:	e0d6      	b.n	8012da6 <UnpackSFMPEG1+0x33e>
	} else {
		/* long blocks, type 0, 1, or 3 */
		if(gr == 0) {
 8012bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d12a      	bne.n	8012c54 <UnpackSFMPEG1+0x1ec>
			/* first granule */
			for (sfb = 0;  sfb < 11; sfb++) 
 8012bfe:	f04f 0300 	mov.w	r3, #0
 8012c02:	61fb      	str	r3, [r7, #28]
 8012c04:	e00d      	b.n	8012c22 <UnpackSFMPEG1+0x1ba>
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8012c06:	68f8      	ldr	r0, [r7, #12]
 8012c08:	69b9      	ldr	r1, [r7, #24]
 8012c0a:	f7f9 f981 	bl	800bf10 <xmp3_GetBits>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	b2da      	uxtb	r2, r3
 8012c12:	6879      	ldr	r1, [r7, #4]
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	18cb      	adds	r3, r1, r3
 8012c18:	701a      	strb	r2, [r3, #0]
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
	} else {
		/* long blocks, type 0, 1, or 3 */
		if(gr == 0) {
			/* first granule */
			for (sfb = 0;  sfb < 11; sfb++) 
 8012c1a:	69fb      	ldr	r3, [r7, #28]
 8012c1c:	f103 0301 	add.w	r3, r3, #1
 8012c20:	61fb      	str	r3, [r7, #28]
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	2b0a      	cmp	r3, #10
 8012c26:	ddee      	ble.n	8012c06 <UnpackSFMPEG1+0x19e>
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
			for (sfb = 11; sfb < 21; sfb++) 
 8012c28:	f04f 030b 	mov.w	r3, #11
 8012c2c:	61fb      	str	r3, [r7, #28]
 8012c2e:	e00d      	b.n	8012c4c <UnpackSFMPEG1+0x1e4>
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8012c30:	68f8      	ldr	r0, [r7, #12]
 8012c32:	6979      	ldr	r1, [r7, #20]
 8012c34:	f7f9 f96c 	bl	800bf10 <xmp3_GetBits>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	6879      	ldr	r1, [r7, #4]
 8012c3e:	69fb      	ldr	r3, [r7, #28]
 8012c40:	18cb      	adds	r3, r1, r3
 8012c42:	701a      	strb	r2, [r3, #0]
		/* long blocks, type 0, 1, or 3 */
		if(gr == 0) {
			/* first granule */
			for (sfb = 0;  sfb < 11; sfb++) 
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
			for (sfb = 11; sfb < 21; sfb++) 
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	f103 0301 	add.w	r3, r3, #1
 8012c4a:	61fb      	str	r3, [r7, #28]
 8012c4c:	69fb      	ldr	r3, [r7, #28]
 8012c4e:	2b14      	cmp	r3, #20
 8012c50:	ddee      	ble.n	8012c30 <UnpackSFMPEG1+0x1c8>
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
			return;
 8012c52:	e0a8      	b.n	8012da6 <UnpackSFMPEG1+0x33e>
		} else {
			/* second granule
			 * scfsi: 0 = different scalefactors for each granule, 1 = copy sf's from granule 0 into granule 1 
			 * for block type == 2, scfsi is always 0
			 */
			sfb = 0;
 8012c54:	f04f 0300 	mov.w	r3, #0
 8012c58:	61fb      	str	r3, [r7, #28]
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d01e      	beq.n	8012ca0 <UnpackSFMPEG1+0x238>
 8012c62:	e00b      	b.n	8012c7c <UnpackSFMPEG1+0x214>
 8012c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	18d3      	adds	r3, r2, r3
 8012c6a:	781a      	ldrb	r2, [r3, #0]
 8012c6c:	6879      	ldr	r1, [r7, #4]
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	18cb      	adds	r3, r1, r3
 8012c72:	701a      	strb	r2, [r3, #0]
 8012c74:	69fb      	ldr	r3, [r7, #28]
 8012c76:	f103 0301 	add.w	r3, r3, #1
 8012c7a:	61fb      	str	r3, [r7, #28]
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	2b05      	cmp	r3, #5
 8012c80:	ddf0      	ble.n	8012c64 <UnpackSFMPEG1+0x1fc>
 8012c82:	e010      	b.n	8012ca6 <UnpackSFMPEG1+0x23e>
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8012c84:	68f8      	ldr	r0, [r7, #12]
 8012c86:	69b9      	ldr	r1, [r7, #24]
 8012c88:	f7f9 f942 	bl	800bf10 <xmp3_GetBits>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	b2da      	uxtb	r2, r3
 8012c90:	6879      	ldr	r1, [r7, #4]
 8012c92:	69fb      	ldr	r3, [r7, #28]
 8012c94:	18cb      	adds	r3, r1, r3
 8012c96:	701a      	strb	r2, [r3, #0]
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	f103 0301 	add.w	r3, r3, #1
 8012c9e:	61fb      	str	r3, [r7, #28]
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	2b05      	cmp	r3, #5
 8012ca4:	ddee      	ble.n	8012c84 <UnpackSFMPEG1+0x21c>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	f103 0304 	add.w	r3, r3, #4
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d01e      	beq.n	8012cf0 <UnpackSFMPEG1+0x288>
 8012cb2:	e00b      	b.n	8012ccc <UnpackSFMPEG1+0x264>
 8012cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cb6:	69fb      	ldr	r3, [r7, #28]
 8012cb8:	18d3      	adds	r3, r2, r3
 8012cba:	781a      	ldrb	r2, [r3, #0]
 8012cbc:	6879      	ldr	r1, [r7, #4]
 8012cbe:	69fb      	ldr	r3, [r7, #28]
 8012cc0:	18cb      	adds	r3, r1, r3
 8012cc2:	701a      	strb	r2, [r3, #0]
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	f103 0301 	add.w	r3, r3, #1
 8012cca:	61fb      	str	r3, [r7, #28]
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	2b0a      	cmp	r3, #10
 8012cd0:	ddf0      	ble.n	8012cb4 <UnpackSFMPEG1+0x24c>
 8012cd2:	e010      	b.n	8012cf6 <UnpackSFMPEG1+0x28e>
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8012cd4:	68f8      	ldr	r0, [r7, #12]
 8012cd6:	69b9      	ldr	r1, [r7, #24]
 8012cd8:	f7f9 f91a 	bl	800bf10 <xmp3_GetBits>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	b2da      	uxtb	r2, r3
 8012ce0:	6879      	ldr	r1, [r7, #4]
 8012ce2:	69fb      	ldr	r3, [r7, #28]
 8012ce4:	18cb      	adds	r3, r1, r3
 8012ce6:	701a      	strb	r2, [r3, #0]
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	f103 0301 	add.w	r3, r3, #1
 8012cee:	61fb      	str	r3, [r7, #28]
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	2b0a      	cmp	r3, #10
 8012cf4:	ddee      	ble.n	8012cd4 <UnpackSFMPEG1+0x26c>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	f103 0308 	add.w	r3, r3, #8
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d01e      	beq.n	8012d40 <UnpackSFMPEG1+0x2d8>
 8012d02:	e00b      	b.n	8012d1c <UnpackSFMPEG1+0x2b4>
 8012d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	18d3      	adds	r3, r2, r3
 8012d0a:	781a      	ldrb	r2, [r3, #0]
 8012d0c:	6879      	ldr	r1, [r7, #4]
 8012d0e:	69fb      	ldr	r3, [r7, #28]
 8012d10:	18cb      	adds	r3, r1, r3
 8012d12:	701a      	strb	r2, [r3, #0]
 8012d14:	69fb      	ldr	r3, [r7, #28]
 8012d16:	f103 0301 	add.w	r3, r3, #1
 8012d1a:	61fb      	str	r3, [r7, #28]
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	2b0f      	cmp	r3, #15
 8012d20:	ddf0      	ble.n	8012d04 <UnpackSFMPEG1+0x29c>
 8012d22:	e010      	b.n	8012d46 <UnpackSFMPEG1+0x2de>
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	6979      	ldr	r1, [r7, #20]
 8012d28:	f7f9 f8f2 	bl	800bf10 <xmp3_GetBits>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	b2da      	uxtb	r2, r3
 8012d30:	6879      	ldr	r1, [r7, #4]
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	18cb      	adds	r3, r1, r3
 8012d36:	701a      	strb	r2, [r3, #0]
 8012d38:	69fb      	ldr	r3, [r7, #28]
 8012d3a:	f103 0301 	add.w	r3, r3, #1
 8012d3e:	61fb      	str	r3, [r7, #28]
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	2b0f      	cmp	r3, #15
 8012d44:	ddee      	ble.n	8012d24 <UnpackSFMPEG1+0x2bc>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	f103 030c 	add.w	r3, r3, #12
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d01e      	beq.n	8012d90 <UnpackSFMPEG1+0x328>
 8012d52:	e00b      	b.n	8012d6c <UnpackSFMPEG1+0x304>
 8012d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	18d3      	adds	r3, r2, r3
 8012d5a:	781a      	ldrb	r2, [r3, #0]
 8012d5c:	6879      	ldr	r1, [r7, #4]
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	18cb      	adds	r3, r1, r3
 8012d62:	701a      	strb	r2, [r3, #0]
 8012d64:	69fb      	ldr	r3, [r7, #28]
 8012d66:	f103 0301 	add.w	r3, r3, #1
 8012d6a:	61fb      	str	r3, [r7, #28]
 8012d6c:	69fb      	ldr	r3, [r7, #28]
 8012d6e:	2b14      	cmp	r3, #20
 8012d70:	ddf0      	ble.n	8012d54 <UnpackSFMPEG1+0x2ec>
 8012d72:	e010      	b.n	8012d96 <UnpackSFMPEG1+0x32e>
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8012d74:	68f8      	ldr	r0, [r7, #12]
 8012d76:	6979      	ldr	r1, [r7, #20]
 8012d78:	f7f9 f8ca 	bl	800bf10 <xmp3_GetBits>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	b2da      	uxtb	r2, r3
 8012d80:	6879      	ldr	r1, [r7, #4]
 8012d82:	69fb      	ldr	r3, [r7, #28]
 8012d84:	18cb      	adds	r3, r1, r3
 8012d86:	701a      	strb	r2, [r3, #0]
 8012d88:	69fb      	ldr	r3, [r7, #28]
 8012d8a:	f103 0301 	add.w	r3, r3, #1
 8012d8e:	61fb      	str	r3, [r7, #28]
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	2b14      	cmp	r3, #20
 8012d94:	ddee      	ble.n	8012d74 <UnpackSFMPEG1+0x30c>
		}
		/* last sf band not transmitted */
		sfis->l[21] = 0;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f04f 0200 	mov.w	r2, #0
 8012d9c:	755a      	strb	r2, [r3, #21]
		sfis->l[22] = 0;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f04f 0200 	mov.w	r2, #0
 8012da4:	759a      	strb	r2, [r3, #22]
	}
}
 8012da6:	f107 0720 	add.w	r7, r7, #32
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop

08012db0 <UnpackSFMPEG2>:
 *
 * TODO:        optimize the / and % stuff (only do one divide, get modulo x 
 *                with (x / m) * m, etc.)
 **************************************************************************************/
static void UnpackSFMPEG2(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int gr, int ch, int modeExt, ScaleFactorJS *sfjs)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b096      	sub	sp, #88	; 0x58
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
 8012dbc:	603b      	str	r3, [r7, #0]

	int i, sfb, sfcIdx, btIdx, nrIdx, iipTest;
	int slen[4], nr[4];
	int sfCompress, preFlag, intensityScale;
	
	sfCompress = sis->sfCompress;
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	68db      	ldr	r3, [r3, #12]
 8012dc2:	63bb      	str	r3, [r7, #56]	; 0x38
	preFlag = 0;
 8012dc4:	f04f 0300 	mov.w	r3, #0
 8012dc8:	643b      	str	r3, [r7, #64]	; 0x40
	intensityScale = 0;
 8012dca:	f04f 0300 	mov.w	r3, #0
 8012dce:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* stereo mode bits (1 = on): bit 1 = mid-side on/off, bit 0 = intensity on/off */
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8012dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012dd2:	f003 0301 	and.w	r3, r3, #1
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d003      	beq.n	8012de2 <UnpackSFMPEG2+0x32>
 8012dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ddc:	2b01      	cmp	r3, #1
 8012dde:	f000 80a0 	beq.w	8012f22 <UnpackSFMPEG2+0x172>
		/* in other words: if ((modeExt & 0x01) == 0 || ch == 0) */
		if (sfCompress < 400) {
 8012de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012de4:	f240 138f 	movw	r3, #399	; 0x18f
 8012de8:	429a      	cmp	r2, r3
 8012dea:	dc30      	bgt.n	8012e4e <UnpackSFMPEG2+0x9e>
			/* max slen = floor[(399/16) / 5] = 4 */
			slen[0] = (sfCompress >> 4) / 5;
 8012dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dee:	ea4f 1223 	mov.w	r2, r3, asr #4
 8012df2:	f246 6367 	movw	r3, #26215	; 0x6667
 8012df6:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8012dfa:	fb83 0302 	smull	r0, r3, r3, r2
 8012dfe:	ea4f 0163 	mov.w	r1, r3, asr #1
 8012e02:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012e06:	1acb      	subs	r3, r1, r3
 8012e08:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1]= (sfCompress >> 4) % 5;
 8012e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0c:	ea4f 1123 	mov.w	r1, r3, asr #4
 8012e10:	f246 6367 	movw	r3, #26215	; 0x6667
 8012e14:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8012e18:	fb83 2301 	smull	r2, r3, r3, r1
 8012e1c:	ea4f 0263 	mov.w	r2, r3, asr #1
 8012e20:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8012e24:	1ad2      	subs	r2, r2, r3
 8012e26:	4613      	mov	r3, r2
 8012e28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012e2c:	189b      	adds	r3, r3, r2
 8012e2e:	1aca      	subs	r2, r1, r3
 8012e30:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2]= (sfCompress & 0x0f) >> 2;
 8012e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e34:	f003 030f 	and.w	r3, r3, #15
 8012e38:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8012e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
			slen[3]= (sfCompress & 0x03);
 8012e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e40:	f003 0303 	and.w	r3, r3, #3
 8012e44:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 0;
 8012e46:	f04f 0300 	mov.w	r3, #0
 8012e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	intensityScale = 0;

	/* stereo mode bits (1 = on): bit 1 = mid-side on/off, bit 0 = intensity on/off */
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
		/* in other words: if ((modeExt & 0x01) == 0 || ch == 0) */
		if (sfCompress < 400) {
 8012e4c:	e10e      	b.n	801306c <UnpackSFMPEG2+0x2bc>
			slen[0] = (sfCompress >> 4) / 5;
			slen[1]= (sfCompress >> 4) % 5;
			slen[2]= (sfCompress & 0x0f) >> 2;
			slen[3]= (sfCompress & 0x03);
			sfcIdx = 0;
		} else if (sfCompress < 500) {
 8012e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e50:	f240 13f3 	movw	r3, #499	; 0x1f3
 8012e54:	429a      	cmp	r2, r3
 8012e56:	dc31      	bgt.n	8012ebc <UnpackSFMPEG2+0x10c>
			/* max slen = floor[(99/4) / 5] = 4 */
			sfCompress -= 400;
 8012e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8012e5e:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = (sfCompress >> 2) / 5;
 8012e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e62:	ea4f 02a3 	mov.w	r2, r3, asr #2
 8012e66:	f246 6367 	movw	r3, #26215	; 0x6667
 8012e6a:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8012e6e:	fb83 0302 	smull	r0, r3, r3, r2
 8012e72:	ea4f 0163 	mov.w	r1, r3, asr #1
 8012e76:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012e7a:	1acb      	subs	r3, r1, r3
 8012e7c:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1]= (sfCompress >> 2) % 5;
 8012e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e80:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8012e84:	f246 6367 	movw	r3, #26215	; 0x6667
 8012e88:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8012e8c:	fb83 2301 	smull	r2, r3, r3, r1
 8012e90:	ea4f 0263 	mov.w	r2, r3, asr #1
 8012e94:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8012e98:	1ad2      	subs	r2, r2, r3
 8012e9a:	4613      	mov	r3, r2
 8012e9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012ea0:	189b      	adds	r3, r3, r2
 8012ea2:	1aca      	subs	r2, r1, r3
 8012ea4:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2]= (sfCompress & 0x03);
 8012ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea8:	f003 0303 	and.w	r3, r3, #3
 8012eac:	62fb      	str	r3, [r7, #44]	; 0x2c
			slen[3]= 0;
 8012eae:	f04f 0300 	mov.w	r3, #0
 8012eb2:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 1;
 8012eb4:	f04f 0301 	mov.w	r3, #1
 8012eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
	intensityScale = 0;

	/* stereo mode bits (1 = on): bit 1 = mid-side on/off, bit 0 = intensity on/off */
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
		/* in other words: if ((modeExt & 0x01) == 0 || ch == 0) */
		if (sfCompress < 400) {
 8012eba:	e0d7      	b.n	801306c <UnpackSFMPEG2+0x2bc>
			slen[2]= (sfCompress & 0x03);
			slen[3]= 0;
			sfcIdx = 1;
		} else {
			/* max slen = floor[11/3] = 3 (sfCompress = 9 bits in MPEG2) */
			sfCompress -= 500;
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8012ec2:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = sfCompress / 3;
 8012ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ec6:	f245 5356 	movw	r3, #21846	; 0x5556
 8012eca:	f2c5 5355 	movt	r3, #21845	; 0x5555
 8012ece:	fb83 0102 	smull	r0, r1, r3, r2
 8012ed2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012ed6:	1acb      	subs	r3, r1, r3
 8012ed8:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = sfCompress % 3;
 8012eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012edc:	f245 5356 	movw	r3, #21846	; 0x5556
 8012ee0:	f2c5 5355 	movt	r3, #21845	; 0x5555
 8012ee4:	fb83 0201 	smull	r0, r2, r3, r1
 8012ee8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8012eec:	1ad2      	subs	r2, r2, r3
 8012eee:	4613      	mov	r3, r2
 8012ef0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ef4:	189b      	adds	r3, r3, r2
 8012ef6:	1aca      	subs	r2, r1, r3
 8012ef8:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2] = slen[3] = 0;
 8012efa:	f04f 0300 	mov.w	r3, #0
 8012efe:	633b      	str	r3, [r7, #48]	; 0x30
 8012f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f02:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sis->mixedBlock) {
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	699b      	ldr	r3, [r3, #24]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d003      	beq.n	8012f14 <UnpackSFMPEG2+0x164>
				/* adjust for long/short mix logic (see comment above in NRTab[] definition) */
				slen[2] = slen[1];  
 8012f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
				slen[1] = slen[0];
 8012f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f12:	62bb      	str	r3, [r7, #40]	; 0x28
			}  
			preFlag = 1;
 8012f14:	f04f 0301 	mov.w	r3, #1
 8012f18:	643b      	str	r3, [r7, #64]	; 0x40
			sfcIdx = 2;
 8012f1a:	f04f 0302 	mov.w	r3, #2
 8012f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	intensityScale = 0;

	/* stereo mode bits (1 = on): bit 1 = mid-side on/off, bit 0 = intensity on/off */
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
		/* in other words: if ((modeExt & 0x01) == 0 || ch == 0) */
		if (sfCompress < 400) {
 8012f20:	e0a4      	b.n	801306c <UnpackSFMPEG2+0x2bc>
			preFlag = 1;
			sfcIdx = 2;
		}
	} else {    
		/* intensity stereo ch = 1 (right) */
		intensityScale = sfCompress & 0x01;
 8012f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f24:	f003 0301 	and.w	r3, r3, #1
 8012f28:	63fb      	str	r3, [r7, #60]	; 0x3c
		sfCompress >>= 1;
 8012f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2c:	ea4f 0363 	mov.w	r3, r3, asr #1
 8012f30:	63bb      	str	r3, [r7, #56]	; 0x38
		if (sfCompress < 180) {
 8012f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f34:	2bb3      	cmp	r3, #179	; 0xb3
 8012f36:	dc54      	bgt.n	8012fe2 <UnpackSFMPEG2+0x232>
			/* max slen = floor[35/6] = 5 (from mod 36) */
			slen[0] = (sfCompress / 36);
 8012f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f3a:	f648 6339 	movw	r3, #36409	; 0x8e39
 8012f3e:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8012f42:	fb83 1302 	smull	r1, r3, r3, r2
 8012f46:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8012f4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012f4e:	1acb      	subs	r3, r1, r3
 8012f50:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = (sfCompress % 36) / 6;
 8012f52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012f54:	f648 6339 	movw	r3, #36409	; 0x8e39
 8012f58:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8012f5c:	fb83 2301 	smull	r2, r3, r3, r1
 8012f60:	ea4f 02e3 	mov.w	r2, r3, asr #3
 8012f64:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8012f68:	1ad2      	subs	r2, r2, r3
 8012f6a:	4613      	mov	r3, r2
 8012f6c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8012f70:	189b      	adds	r3, r3, r2
 8012f72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012f76:	1aca      	subs	r2, r1, r3
 8012f78:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8012f7c:	f6c2 23aa 	movt	r3, #10922	; 0x2aaa
 8012f80:	fb83 0102 	smull	r0, r1, r3, r2
 8012f84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012f88:	1acb      	subs	r3, r1, r3
 8012f8a:	62bb      	str	r3, [r7, #40]	; 0x28
			slen[2] = (sfCompress % 36) % 6;
 8012f8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012f8e:	f648 6339 	movw	r3, #36409	; 0x8e39
 8012f92:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8012f96:	fb83 2301 	smull	r2, r3, r3, r1
 8012f9a:	ea4f 02e3 	mov.w	r2, r3, asr #3
 8012f9e:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8012fa2:	1ad2      	subs	r2, r2, r3
 8012fa4:	4613      	mov	r3, r2
 8012fa6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8012faa:	189b      	adds	r3, r3, r2
 8012fac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012fb0:	1aca      	subs	r2, r1, r3
 8012fb2:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8012fb6:	f6c2 23aa 	movt	r3, #10922	; 0x2aaa
 8012fba:	fb83 0102 	smull	r0, r1, r3, r2
 8012fbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012fc2:	1ac9      	subs	r1, r1, r3
 8012fc4:	460b      	mov	r3, r1
 8012fc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012fca:	185b      	adds	r3, r3, r1
 8012fcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012fd0:	1ad1      	subs	r1, r2, r3
 8012fd2:	62f9      	str	r1, [r7, #44]	; 0x2c
			slen[3] = 0;
 8012fd4:	f04f 0300 	mov.w	r3, #0
 8012fd8:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 3;
 8012fda:	f04f 0303 	mov.w	r3, #3
 8012fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012fe0:	e044      	b.n	801306c <UnpackSFMPEG2+0x2bc>
		} else if (sfCompress < 244) {
 8012fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe4:	2bf3      	cmp	r3, #243	; 0xf3
 8012fe6:	dc1a      	bgt.n	801301e <UnpackSFMPEG2+0x26e>
			/* max slen = floor[63/16] = 3 */
			sfCompress -= 180;
 8012fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fea:	f1a3 03b4 	sub.w	r3, r3, #180	; 0xb4
 8012fee:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = (sfCompress & 0x3f) >> 4;
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ff6:	ea4f 1323 	mov.w	r3, r3, asr #4
 8012ffa:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = (sfCompress & 0x0f) >> 2;
 8012ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffe:	f003 030f 	and.w	r3, r3, #15
 8013002:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8013006:	62bb      	str	r3, [r7, #40]	; 0x28
			slen[2] = (sfCompress & 0x03);
 8013008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300a:	f003 0303 	and.w	r3, r3, #3
 801300e:	62fb      	str	r3, [r7, #44]	; 0x2c
			slen[3] = 0;
 8013010:	f04f 0300 	mov.w	r3, #0
 8013014:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 4;
 8013016:	f04f 0304 	mov.w	r3, #4
 801301a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801301c:	e026      	b.n	801306c <UnpackSFMPEG2+0x2bc>
		} else {
			/* max slen = floor[11/3] = 3 (max sfCompress >> 1 = 511/2 = 255) */
			sfCompress -= 244;
 801301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013020:	f1a3 03f4 	sub.w	r3, r3, #244	; 0xf4
 8013024:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = (sfCompress / 3);
 8013026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013028:	f245 5356 	movw	r3, #21846	; 0x5556
 801302c:	f2c5 5355 	movt	r3, #21845	; 0x5555
 8013030:	fb83 0102 	smull	r0, r1, r3, r2
 8013034:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013038:	1acb      	subs	r3, r1, r3
 801303a:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = (sfCompress % 3);
 801303c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801303e:	f245 5356 	movw	r3, #21846	; 0x5556
 8013042:	f2c5 5355 	movt	r3, #21845	; 0x5555
 8013046:	fb83 0201 	smull	r0, r2, r3, r1
 801304a:	ea4f 73e1 	mov.w	r3, r1, asr #31
 801304e:	1ad2      	subs	r2, r2, r3
 8013050:	4613      	mov	r3, r2
 8013052:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013056:	189b      	adds	r3, r3, r2
 8013058:	1aca      	subs	r2, r1, r3
 801305a:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2] = slen[3] = 0;
 801305c:	f04f 0300 	mov.w	r3, #0
 8013060:	633b      	str	r3, [r7, #48]	; 0x30
 8013062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013064:	62fb      	str	r3, [r7, #44]	; 0x2c
			sfcIdx = 5;
 8013066:	f04f 0305 	mov.w	r3, #5
 801306a:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
	}
	
	/* set index based on block type: (0,1,3) --> 0, (2 non-mixed) --> 1, (2 mixed) ---> 2 */
	btIdx = 0;
 801306c:	f04f 0300 	mov.w	r3, #0
 8013070:	64bb      	str	r3, [r7, #72]	; 0x48
	if (sis->blockType == 2) 
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	695b      	ldr	r3, [r3, #20]
 8013076:	2b02      	cmp	r3, #2
 8013078:	d109      	bne.n	801308e <UnpackSFMPEG2+0x2de>
		btIdx = (sis->mixedBlock ? 2 : 1);
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	699b      	ldr	r3, [r3, #24]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d002      	beq.n	8013088 <UnpackSFMPEG2+0x2d8>
 8013082:	f04f 0302 	mov.w	r3, #2
 8013086:	e001      	b.n	801308c <UnpackSFMPEG2+0x2dc>
 8013088:	f04f 0301 	mov.w	r3, #1
 801308c:	64bb      	str	r3, [r7, #72]	; 0x48
	for (i = 0; i < 4; i++)
 801308e:	f04f 0300 	mov.w	r3, #0
 8013092:	657b      	str	r3, [r7, #84]	; 0x54
 8013094:	e01d      	b.n	80130d2 <UnpackSFMPEG2+0x322>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8013096:	f241 12cc 	movw	r2, #4556	; 0x11cc
 801309a:	f6c0 0203 	movt	r2, #2051	; 0x803
 801309e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80130a0:	460b      	mov	r3, r1
 80130a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80130a6:	185b      	adds	r3, r3, r1
 80130a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80130aa:	185b      	adds	r3, r3, r1
 80130ac:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80130b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130b2:	18cb      	adds	r3, r1, r3
 80130b4:	18d3      	adds	r3, r2, r3
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	461a      	mov	r2, r3
 80130ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80130c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80130c4:	18cb      	adds	r3, r1, r3
 80130c6:	f843 2c44 	str.w	r2, [r3, #-68]
	
	/* set index based on block type: (0,1,3) --> 0, (2 non-mixed) --> 1, (2 mixed) ---> 2 */
	btIdx = 0;
	if (sis->blockType == 2) 
		btIdx = (sis->mixedBlock ? 2 : 1);
	for (i = 0; i < 4; i++)
 80130ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130cc:	f103 0301 	add.w	r3, r3, #1
 80130d0:	657b      	str	r3, [r7, #84]	; 0x54
 80130d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130d4:	2b03      	cmp	r3, #3
 80130d6:	ddde      	ble.n	8013096 <UnpackSFMPEG2+0x2e6>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];

	/* save intensity stereo scale factor info */
	if( (modeExt & 0x01) && (ch == 1) ) {
 80130d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130da:	f003 0301 	and.w	r3, r3, #1
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d02e      	beq.n	8013142 <UnpackSFMPEG2+0x392>
 80130e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d12b      	bne.n	8013142 <UnpackSFMPEG2+0x392>
		for (i = 0; i < 4; i++) {
 80130ea:	f04f 0300 	mov.w	r3, #0
 80130ee:	657b      	str	r3, [r7, #84]	; 0x54
 80130f0:	e021      	b.n	8013136 <UnpackSFMPEG2+0x386>
			sfjs->slen[i] = slen[i];
 80130f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80130f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80130fc:	18d3      	adds	r3, r2, r3
 80130fe:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8013102:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013106:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801310a:	18cb      	adds	r3, r1, r3
 801310c:	605a      	str	r2, [r3, #4]
			sfjs->nr[i] = nr[i];
 801310e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013110:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013114:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8013118:	18c3      	adds	r3, r0, r3
 801311a:	f853 2c44 	ldr.w	r2, [r3, #-68]
 801311e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013122:	f103 0304 	add.w	r3, r3, #4
 8013126:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801312a:	18cb      	adds	r3, r1, r3
 801312c:	605a      	str	r2, [r3, #4]
	for (i = 0; i < 4; i++)
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];

	/* save intensity stereo scale factor info */
	if( (modeExt & 0x01) && (ch == 1) ) {
		for (i = 0; i < 4; i++) {
 801312e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013130:	f103 0301 	add.w	r3, r3, #1
 8013134:	657b      	str	r3, [r7, #84]	; 0x54
 8013136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013138:	2b03      	cmp	r3, #3
 801313a:	ddda      	ble.n	80130f2 <UnpackSFMPEG2+0x342>
			sfjs->slen[i] = slen[i];
			sfjs->nr[i] = nr[i];
		}
		sfjs->intensityScale = intensityScale;
 801313c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801313e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013140:	601a      	str	r2, [r3, #0]
	}
	sis->preFlag = preFlag;
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013146:	63da      	str	r2, [r3, #60]	; 0x3c

	/* short blocks */
	if(sis->blockType == 2) {
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	695b      	ldr	r3, [r3, #20]
 801314c:	2b02      	cmp	r3, #2
 801314e:	f040 80ba 	bne.w	80132c6 <UnpackSFMPEG2+0x516>
		if(sis->mixedBlock) {
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	699b      	ldr	r3, [r3, #24]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d024      	beq.n	80131a4 <UnpackSFMPEG2+0x3f4>
			/* do long block portion */
			iipTest = (1 << slen[0]) - 1;
 801315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315c:	f04f 0201 	mov.w	r2, #1
 8013160:	fa02 f303 	lsl.w	r3, r2, r3
 8013164:	f103 33ff 	add.w	r3, r3, #4294967295
 8013168:	637b      	str	r3, [r7, #52]	; 0x34
			for (sfb=0; sfb < 6; sfb++) {
 801316a:	f04f 0300 	mov.w	r3, #0
 801316e:	653b      	str	r3, [r7, #80]	; 0x50
 8013170:	e00e      	b.n	8013190 <UnpackSFMPEG2+0x3e0>
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 8013172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	4619      	mov	r1, r3
 8013178:	f7f8 feca 	bl	800bf10 <xmp3_GetBits>
 801317c:	4603      	mov	r3, r0
 801317e:	b2da      	uxtb	r2, r3
 8013180:	6879      	ldr	r1, [r7, #4]
 8013182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013184:	18cb      	adds	r3, r1, r3
 8013186:	701a      	strb	r2, [r3, #0]
	/* short blocks */
	if(sis->blockType == 2) {
		if(sis->mixedBlock) {
			/* do long block portion */
			iipTest = (1 << slen[0]) - 1;
			for (sfb=0; sfb < 6; sfb++) {
 8013188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801318a:	f103 0301 	add.w	r3, r3, #1
 801318e:	653b      	str	r3, [r7, #80]	; 0x50
 8013190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013192:	2b05      	cmp	r3, #5
 8013194:	dded      	ble.n	8013172 <UnpackSFMPEG2+0x3c2>
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
			}
			sfb = 3;  /* start sfb for short */
 8013196:	f04f 0303 	mov.w	r3, #3
 801319a:	653b      	str	r3, [r7, #80]	; 0x50
			nrIdx = 1;
 801319c:	f04f 0301 	mov.w	r3, #1
 80131a0:	647b      	str	r3, [r7, #68]	; 0x44
			sfb = 0;
			nrIdx = 0;
		}

		/* remaining short blocks, sfb just keeps incrementing */
		for (    ; nrIdx <= 3; nrIdx++) {
 80131a2:	e07b      	b.n	801329c <UnpackSFMPEG2+0x4ec>
			}
			sfb = 3;  /* start sfb for short */
			nrIdx = 1;
		} else {      
			/* all short blocks, so start nr, sfb at 0 */
			sfb = 0;
 80131a4:	f04f 0300 	mov.w	r3, #0
 80131a8:	653b      	str	r3, [r7, #80]	; 0x50
			nrIdx = 0;
 80131aa:	f04f 0300 	mov.w	r3, #0
 80131ae:	647b      	str	r3, [r7, #68]	; 0x44
		}

		/* remaining short blocks, sfb just keeps incrementing */
		for (    ; nrIdx <= 3; nrIdx++) {
 80131b0:	e074      	b.n	801329c <UnpackSFMPEG2+0x4ec>
			iipTest = (1 << slen[nrIdx]) - 1;
 80131b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80131b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80131bc:	18cb      	adds	r3, r1, r3
 80131be:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80131c2:	f04f 0201 	mov.w	r2, #1
 80131c6:	fa02 f303 	lsl.w	r3, r2, r3
 80131ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80131ce:	637b      	str	r3, [r7, #52]	; 0x34
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 80131d0:	f04f 0300 	mov.w	r3, #0
 80131d4:	657b      	str	r3, [r7, #84]	; 0x54
 80131d6:	e052      	b.n	801327e <UnpackSFMPEG2+0x4ce>
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 80131d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131da:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80131de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80131e2:	18d3      	adds	r3, r2, r3
 80131e4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80131e8:	68f8      	ldr	r0, [r7, #12]
 80131ea:	4619      	mov	r1, r3
 80131ec:	f7f8 fe90 	bl	800bf10 <xmp3_GetBits>
 80131f0:	4603      	mov	r3, r0
 80131f2:	b2d9      	uxtb	r1, r3
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131f8:	4613      	mov	r3, r2
 80131fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80131fe:	189b      	adds	r3, r3, r2
 8013200:	18c3      	adds	r3, r0, r3
 8013202:	f103 0317 	add.w	r3, r3, #23
 8013206:	460a      	mov	r2, r1
 8013208:	701a      	strb	r2, [r3, #0]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 801320a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801320c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013210:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8013214:	18c3      	adds	r3, r0, r3
 8013216:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801321a:	68f8      	ldr	r0, [r7, #12]
 801321c:	4619      	mov	r1, r3
 801321e:	f7f8 fe77 	bl	800bf10 <xmp3_GetBits>
 8013222:	4603      	mov	r3, r0
 8013224:	b2d9      	uxtb	r1, r3
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801322a:	4613      	mov	r3, r2
 801322c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013230:	189b      	adds	r3, r3, r2
 8013232:	18c3      	adds	r3, r0, r3
 8013234:	f103 0318 	add.w	r3, r3, #24
 8013238:	460a      	mov	r2, r1
 801323a:	701a      	strb	r2, [r3, #0]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 801323c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801323e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013242:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013246:	18cb      	adds	r3, r1, r3
 8013248:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801324c:	68f8      	ldr	r0, [r7, #12]
 801324e:	4619      	mov	r1, r3
 8013250:	f7f8 fe5e 	bl	800bf10 <xmp3_GetBits>
 8013254:	4603      	mov	r3, r0
 8013256:	b2d9      	uxtb	r1, r3
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801325c:	4613      	mov	r3, r2
 801325e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013262:	189b      	adds	r3, r3, r2
 8013264:	18c3      	adds	r3, r0, r3
 8013266:	f103 0319 	add.w	r3, r3, #25
 801326a:	460a      	mov	r2, r1
 801326c:	701a      	strb	r2, [r3, #0]
		}

		/* remaining short blocks, sfb just keeps incrementing */
		for (    ; nrIdx <= 3; nrIdx++) {
			iipTest = (1 << slen[nrIdx]) - 1;
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 801326e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013270:	f103 0301 	add.w	r3, r3, #1
 8013274:	657b      	str	r3, [r7, #84]	; 0x54
 8013276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013278:	f103 0301 	add.w	r3, r3, #1
 801327c:	653b      	str	r3, [r7, #80]	; 0x50
 801327e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013280:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013284:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013288:	18d3      	adds	r3, r2, r3
 801328a:	f853 2c44 	ldr.w	r2, [r3, #-68]
 801328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013290:	429a      	cmp	r2, r3
 8013292:	dca1      	bgt.n	80131d8 <UnpackSFMPEG2+0x428>
			sfb = 0;
			nrIdx = 0;
		}

		/* remaining short blocks, sfb just keeps incrementing */
		for (    ; nrIdx <= 3; nrIdx++) {
 8013294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013296:	f103 0301 	add.w	r3, r3, #1
 801329a:	647b      	str	r3, [r7, #68]	; 0x44
 801329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801329e:	2b03      	cmp	r3, #3
 80132a0:	dd87      	ble.n	80131b2 <UnpackSFMPEG2+0x402>
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
			}
		}
		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f04f 0200 	mov.w	r2, #0
 80132a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80132c4:	e04d      	b.n	8013362 <UnpackSFMPEG2+0x5b2>
	} else {
		/* long blocks */
		sfb = 0;
 80132c6:	f04f 0300 	mov.w	r3, #0
 80132ca:	653b      	str	r3, [r7, #80]	; 0x50
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 80132cc:	f04f 0300 	mov.w	r3, #0
 80132d0:	647b      	str	r3, [r7, #68]	; 0x44
 80132d2:	e03b      	b.n	801334c <UnpackSFMPEG2+0x59c>
			iipTest = (1 << slen[nrIdx]) - 1;
 80132d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80132da:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80132de:	18c3      	adds	r3, r0, r3
 80132e0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80132e4:	f04f 0201 	mov.w	r2, #1
 80132e8:	fa02 f303 	lsl.w	r3, r2, r3
 80132ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80132f0:	637b      	str	r3, [r7, #52]	; 0x34
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 80132f2:	f04f 0300 	mov.w	r3, #0
 80132f6:	657b      	str	r3, [r7, #84]	; 0x54
 80132f8:	e019      	b.n	801332e <UnpackSFMPEG2+0x57e>
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 80132fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013300:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013304:	18cb      	adds	r3, r1, r3
 8013306:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801330a:	68f8      	ldr	r0, [r7, #12]
 801330c:	4619      	mov	r1, r3
 801330e:	f7f8 fdff 	bl	800bf10 <xmp3_GetBits>
 8013312:	4603      	mov	r3, r0
 8013314:	b2da      	uxtb	r2, r3
 8013316:	6879      	ldr	r1, [r7, #4]
 8013318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801331a:	18cb      	adds	r3, r1, r3
 801331c:	701a      	strb	r2, [r3, #0]
	} else {
		/* long blocks */
		sfb = 0;
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
			iipTest = (1 << slen[nrIdx]) - 1;
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 801331e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013320:	f103 0301 	add.w	r3, r3, #1
 8013324:	657b      	str	r3, [r7, #84]	; 0x54
 8013326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013328:	f103 0301 	add.w	r3, r3, #1
 801332c:	653b      	str	r3, [r7, #80]	; 0x50
 801332e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013330:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013334:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013338:	18d3      	adds	r3, r2, r3
 801333a:	f853 2c44 	ldr.w	r2, [r3, #-68]
 801333e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013340:	429a      	cmp	r2, r3
 8013342:	dcda      	bgt.n	80132fa <UnpackSFMPEG2+0x54a>
		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
	} else {
		/* long blocks */
		sfb = 0;
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 8013344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013346:	f103 0301 	add.w	r3, r3, #1
 801334a:	647b      	str	r3, [r7, #68]	; 0x44
 801334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801334e:	2b03      	cmp	r3, #3
 8013350:	ddc0      	ble.n	80132d4 <UnpackSFMPEG2+0x524>
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
			}
		}
		/* last sf band not transmitted */
		sfis->l[21] = sfis->l[22] = 0;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f04f 0200 	mov.w	r2, #0
 8013358:	759a      	strb	r2, [r3, #22]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	7d9a      	ldrb	r2, [r3, #22]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	755a      	strb	r2, [r3, #21]

	}
}
 8013362:	f107 0758 	add.w	r7, r7, #88	; 0x58
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
 801336a:	bf00      	nop

0801336c <xmp3_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 801336c:	b5b0      	push	{r4, r5, r7, lr}
 801336e:	b092      	sub	sp, #72	; 0x48
 8013370:	af04      	add	r7, sp, #16
 8013372:	60f8      	str	r0, [r7, #12]
 8013374:	60b9      	str	r1, [r7, #8]
 8013376:	607a      	str	r2, [r7, #4]
 8013378:	603b      	str	r3, [r7, #0]
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d00b      	beq.n	8013398 <xmp3_UnpackScaleFactors+0x2c>
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d007      	beq.n	8013398 <xmp3_UnpackScaleFactors+0x2c>
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	685b      	ldr	r3, [r3, #4]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d003      	beq.n	8013398 <xmp3_UnpackScaleFactors+0x2c>
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	689b      	ldr	r3, [r3, #8]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d102      	bne.n	801339e <xmp3_UnpackScaleFactors+0x32>
		return -1;
 8013398:	f04f 33ff 	mov.w	r3, #4294967295
 801339c:	e0dc      	b.n	8013558 <xmp3_UnpackScaleFactors+0x1ec>
	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	637b      	str	r3, [r7, #52]	; 0x34
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	633b      	str	r3, [r7, #48]	; 0x30
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	689b      	ldr	r3, [r3, #8]
 80133ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* init GetBits reader */
	startBuf = buf;
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	62bb      	str	r3, [r7, #40]	; 0x28
	bsi = &bitStreamInfo;
 80133b4:	f107 0310 	add.w	r3, r7, #16
 80133b8:	627b      	str	r3, [r7, #36]	; 0x24
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	18d3      	adds	r3, r2, r3
 80133c2:	f103 0307 	add.w	r3, r3, #7
 80133c6:	f103 0207 	add.w	r2, r3, #7
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	bfb8      	it	lt
 80133ce:	4613      	movlt	r3, r2
 80133d0:	ea4f 03e3 	mov.w	r3, r3, asr #3
 80133d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133d6:	4619      	mov	r1, r3
 80133d8:	68ba      	ldr	r2, [r7, #8]
 80133da:	f7f8 fcf7 	bl	800bdcc <xmp3_SetBitstreamPointer>
	if (*bitOffset)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d005      	beq.n	80133f2 <xmp3_UnpackScaleFactors+0x86>
		GetBits(bsi, *bitOffset);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133ec:	4619      	mov	r1, r3
 80133ee:	f7f8 fd8f 	bl	800bf10 <xmp3_GetBits>

	if (fh->ver == MPEG1) 
 80133f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d13e      	bne.n	8013478 <xmp3_UnpackScaleFactors+0x10c>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 80133fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133fc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8013400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013402:	4613      	mov	r3, r2
 8013404:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013408:	189b      	adds	r3, r3, r2
 801340a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801340e:	4618      	mov	r0, r3
 8013410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013412:	4613      	mov	r3, r2
 8013414:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013418:	189b      	adds	r3, r3, r2
 801341a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801341e:	18c3      	adds	r3, r0, r3
 8013420:	18c9      	adds	r1, r1, r3
 8013422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013426:	4613      	mov	r3, r2
 8013428:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801342c:	1a9b      	subs	r3, r3, r2
 801342e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013432:	461c      	mov	r4, r3
 8013434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013436:	4613      	mov	r3, r2
 8013438:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801343c:	1a9b      	subs	r3, r3, r2
 801343e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013442:	18e3      	adds	r3, r4, r3
 8013444:	18c5      	adds	r5, r0, r3
 8013446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013448:	f103 0208 	add.w	r2, r3, #8
 801344c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801344e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8013452:	18d4      	adds	r4, r2, r3
 8013454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013458:	4613      	mov	r3, r2
 801345a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801345e:	1a9b      	subs	r3, r3, r2
 8013460:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013464:	18c3      	adds	r3, r0, r3
 8013466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013468:	9200      	str	r2, [sp, #0]
 801346a:	9301      	str	r3, [sp, #4]
 801346c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801346e:	462a      	mov	r2, r5
 8013470:	4623      	mov	r3, r4
 8013472:	f7ff faf9 	bl	8012a68 <UnpackSFMPEG1>
 8013476:	e033      	b.n	80134e0 <xmp3_UnpackScaleFactors+0x174>
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);
 8013478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801347e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013480:	4613      	mov	r3, r2
 8013482:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013486:	189b      	adds	r3, r3, r2
 8013488:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801348c:	4618      	mov	r0, r3
 801348e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013490:	4613      	mov	r3, r2
 8013492:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013496:	189b      	adds	r3, r3, r2
 8013498:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801349c:	18c3      	adds	r3, r0, r3
 801349e:	18c9      	adds	r1, r1, r3
 80134a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80134a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134a4:	4613      	mov	r3, r2
 80134a6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80134aa:	1a9b      	subs	r3, r3, r2
 80134ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80134b0:	461c      	mov	r4, r3
 80134b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80134b4:	4613      	mov	r3, r2
 80134b6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80134ba:	1a9b      	subs	r3, r3, r2
 80134bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80134c0:	18e3      	adds	r3, r4, r3
 80134c2:	18c3      	adds	r3, r0, r3
 80134c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134c6:	6a10      	ldr	r0, [r2, #32]
 80134c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134ca:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 80134ce:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80134d0:	9400      	str	r4, [sp, #0]
 80134d2:	9001      	str	r0, [sp, #4]
 80134d4:	9202      	str	r2, [sp, #8]
 80134d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134d8:	461a      	mov	r2, r3
 80134da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134dc:	f7ff fc68 	bl	8012db0 <UnpackSFMPEG2>

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 80134e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80134e6:	461a      	mov	r2, r3
 80134e8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80134ec:	18d2      	adds	r2, r2, r3
 80134ee:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 80134f2:	461a      	mov	r2, r3
 80134f4:	460b      	mov	r3, r1
 80134f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80134fa:	185b      	adds	r3, r3, r1
 80134fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8013500:	18d3      	adds	r3, r2, r3
 8013502:	18c3      	adds	r3, r0, r3
 8013504:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8013508:	6819      	ldr	r1, [r3, #0]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801350e:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8013512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013514:	1882      	adds	r2, r0, r2
 8013516:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 801351a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013524:	68b9      	ldr	r1, [r7, #8]
 8013526:	461a      	mov	r2, r3
 8013528:	f7f8 fd40 	bl	800bfac <xmp3_CalcBitsUsed>
 801352c:	4603      	mov	r3, r0
 801352e:	623b      	str	r3, [r7, #32]
	buf += (bitsUsed + *bitOffset) >> 3;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	6a3b      	ldr	r3, [r7, #32]
 8013536:	18d3      	adds	r3, r2, r3
 8013538:	ea4f 03e3 	mov.w	r3, r3, asr #3
 801353c:	68ba      	ldr	r2, [r7, #8]
 801353e:	18d3      	adds	r3, r2, r3
 8013540:	60bb      	str	r3, [r7, #8]
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	6a3b      	ldr	r3, [r7, #32]
 8013548:	18d3      	adds	r3, r2, r3
 801354a:	f003 0207 	and.w	r2, r3, #7
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	601a      	str	r2, [r3, #0]

	return (buf - startBuf);
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013556:	1ad3      	subs	r3, r2, r3
}
 8013558:	4618      	mov	r0, r3
 801355a:	f107 0738 	add.w	r7, r7, #56	; 0x38
 801355e:	46bd      	mov	sp, r7
 8013560:	bdb0      	pop	{r4, r5, r7, pc}
 8013562:	bf00      	nop

08013564 <MULSHIFT32>:


#if defined(__GNUC__) && defined(__arm__)

static __inline__ int MULSHIFT32(int x, int y)
{
 8013564:	b490      	push	{r4, r7}
 8013566:	b084      	sub	sp, #16
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	6039      	str	r1, [r7, #0]
int zlow;
__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	fb82 4303 	smull	r4, r3, r2, r3
 8013576:	60fc      	str	r4, [r7, #12]
 8013578:	603b      	str	r3, [r7, #0]
return y;
 801357a:	683b      	ldr	r3, [r7, #0]
}
 801357c:	4618      	mov	r0, r3
 801357e:	f107 0710 	add.w	r7, r7, #16
 8013582:	46bd      	mov	sp, r7
 8013584:	bc90      	pop	{r4, r7}
 8013586:	4770      	bx	lr

08013588 <FASTABS>:

	return (short)x;
}

static __inline int FASTABS(int x)
{
 8013588:	b480      	push	{r7}
 801358a:	b085      	sub	sp, #20
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
int sign;

sign = x >> (sizeof(int) * 8 - 1);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8013596:	60fb      	str	r3, [r7, #12]
x ^= sign;
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	4053      	eors	r3, r2
 801359e:	607b      	str	r3, [r7, #4]
x -= sign;
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	1ad3      	subs	r3, r2, r3
 80135a6:	607b      	str	r3, [r7, #4]

return x;
 80135a8:	687b      	ldr	r3, [r7, #4]
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	f107 0714 	add.w	r7, r7, #20
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bc80      	pop	{r7}
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop

080135b8 <xmp3_MidSideProc>:
 * Return:      none
 *
 * Notes:       assume at least 1 GB in input
 **************************************************************************************/
void MidSideProc(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, int mOut[2])  
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b08a      	sub	sp, #40	; 0x28
 80135bc:	af00      	add	r7, sp, #0
 80135be:	60f8      	str	r0, [r7, #12]
 80135c0:	60b9      	str	r1, [r7, #8]
 80135c2:	607a      	str	r2, [r7, #4]
	int i, xr, xl, mOutL, mOutR;
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
 80135c4:	f04f 0300 	mov.w	r3, #0
 80135c8:	61fb      	str	r3, [r7, #28]
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	623b      	str	r3, [r7, #32]
	for(i = 0; i < nSamps; i++) {
 80135ce:	f04f 0300 	mov.w	r3, #0
 80135d2:	627b      	str	r3, [r7, #36]	; 0x24
 80135d4:	e037      	b.n	8013646 <xmp3_MidSideProc+0x8e>
		xl = x[0][i];
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135de:	61bb      	str	r3, [r7, #24]
		xr = x[1][i];
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135ec:	617b      	str	r3, [r7, #20]
		x[0][i] = xl + xr;
 80135ee:	69ba      	ldr	r2, [r7, #24]
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	18d1      	adds	r1, r2, r3
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		x[1][i] = xl - xr;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013602:	69b9      	ldr	r1, [r7, #24]
 8013604:	697a      	ldr	r2, [r7, #20]
 8013606:	1a89      	subs	r1, r1, r2
 8013608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801360a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		mOutL |= FASTABS(x[0][i]);
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013616:	4618      	mov	r0, r3
 8013618:	f7ff ffb6 	bl	8013588 <FASTABS>
 801361c:	4603      	mov	r3, r0
 801361e:	6a3a      	ldr	r2, [r7, #32]
 8013620:	4313      	orrs	r3, r2
 8013622:	623b      	str	r3, [r7, #32]
		mOutR |= FASTABS(x[1][i]);
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013630:	4618      	mov	r0, r3
 8013632:	f7ff ffa9 	bl	8013588 <FASTABS>
 8013636:	4603      	mov	r3, r0
 8013638:	69fa      	ldr	r2, [r7, #28]
 801363a:	4313      	orrs	r3, r2
 801363c:	61fb      	str	r3, [r7, #28]
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
	for(i = 0; i < nSamps; i++) {
 801363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013640:	f103 0301 	add.w	r3, r3, #1
 8013644:	627b      	str	r3, [r7, #36]	; 0x24
 8013646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	429a      	cmp	r2, r3
 801364c:	dbc3      	blt.n	80135d6 <xmp3_MidSideProc+0x1e>
		x[0][i] = xl + xr;
		x[1][i] = xl - xr;
		mOutL |= FASTABS(x[0][i]);
		mOutR |= FASTABS(x[1][i]);
	}
	mOut[0] |= mOutL;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	6a3b      	ldr	r3, [r7, #32]
 8013654:	431a      	orrs	r2, r3
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	601a      	str	r2, [r3, #0]
	mOut[1] |= mOutR;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f103 0304 	add.w	r3, r3, #4
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	f102 0204 	add.w	r2, r2, #4
 8013666:	6811      	ldr	r1, [r2, #0]
 8013668:	69fa      	ldr	r2, [r7, #28]
 801366a:	430a      	orrs	r2, r1
 801366c:	601a      	str	r2, [r3, #0]
}
 801366e:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}
 8013676:	bf00      	nop

08013678 <xmp3_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b09c      	sub	sp, #112	; 0x70
 801367c:	af00      	add	r7, sp, #0
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
 8013684:	603b      	str	r3, [r7, #0]
	int i=0, j=0, n=0, cb=0, w=0;
 8013686:	f04f 0300 	mov.w	r3, #0
 801368a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801368c:	f04f 0300 	mov.w	r3, #0
 8013690:	66bb      	str	r3, [r7, #104]	; 0x68
 8013692:	f04f 0300 	mov.w	r3, #0
 8013696:	63bb      	str	r3, [r7, #56]	; 0x38
 8013698:	f04f 0300 	mov.w	r3, #0
 801369c:	667b      	str	r3, [r7, #100]	; 0x64
 801369e:	f04f 0300 	mov.w	r3, #0
 80136a2:	663b      	str	r3, [r7, #96]	; 0x60
	int sampsLeft, isf, mOutL, mOutR, xl, xr;
	int fl, fr, fls[3], frs[3];
	int cbStartL=0, cbStartS=0, cbEndL=0, cbEndS=0;
 80136a4:	f04f 0300 	mov.w	r3, #0
 80136a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80136aa:	f04f 0300 	mov.w	r3, #0
 80136ae:	647b      	str	r3, [r7, #68]	; 0x44
 80136b0:	f04f 0300 	mov.w	r3, #0
 80136b4:	643b      	str	r3, [r7, #64]	; 0x40
 80136b6:	f04f 0300 	mov.w	r3, #0
 80136ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 80136bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136be:	f103 0318 	add.w	r3, r3, #24
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d118      	bne.n	80136fa <xmp3_IntensityProcMPEG1+0x82>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
 80136c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136ca:	f103 0318 	add.w	r3, r3, #24
 80136ce:	695b      	ldr	r3, [r3, #20]
 80136d0:	f103 0301 	add.w	r3, r3, #1
 80136d4:	64bb      	str	r3, [r7, #72]	; 0x48
		cbEndL =   cbi[0].cbEndL + 1;
 80136d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136d8:	695b      	ldr	r3, [r3, #20]
 80136da:	f103 0301 	add.w	r3, r3, #1
 80136de:	643b      	str	r3, [r7, #64]	; 0x40
		cbStartS = cbEndS = 0;
 80136e0:	f04f 0300 	mov.w	r3, #0
 80136e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80136e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136e8:	647b      	str	r3, [r7, #68]	; 0x44
		i = fh->sfBand->l[cbStartL];
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80136f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80136f4:	b21b      	sxth	r3, r3
 80136f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80136f8:	e02b      	b.n	8013752 <xmp3_IntensityProcMPEG1+0xda>
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 80136fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136fc:	f103 0318 	add.w	r3, r3, #24
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2b01      	cmp	r3, #1
 8013704:	d005      	beq.n	8013712 <xmp3_IntensityProcMPEG1+0x9a>
 8013706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013708:	f103 0318 	add.w	r3, r3, #24
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	2b02      	cmp	r3, #2
 8013710:	d11f      	bne.n	8013752 <xmp3_IntensityProcMPEG1+0xda>
		/* short or mixed block */
		cbStartS = cbi[1].cbEndSMax + 1;
 8013712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013714:	f103 0318 	add.w	r3, r3, #24
 8013718:	691b      	ldr	r3, [r3, #16]
 801371a:	f103 0301 	add.w	r3, r3, #1
 801371e:	647b      	str	r3, [r7, #68]	; 0x44
		cbEndS =   cbi[0].cbEndSMax + 1;
 8013720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013722:	691b      	ldr	r3, [r3, #16]
 8013724:	f103 0301 	add.w	r3, r3, #1
 8013728:	63fb      	str	r3, [r7, #60]	; 0x3c
		cbStartL = cbEndL = 0;
 801372a:	f04f 0300 	mov.w	r3, #0
 801372e:	643b      	str	r3, [r7, #64]	; 0x40
 8013730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013732:	64bb      	str	r3, [r7, #72]	; 0x48
		i = 3 * fh->sfBand->s[cbStartS];
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801373a:	f103 0314 	add.w	r3, r3, #20
 801373e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013742:	18d3      	adds	r3, r2, r3
 8013744:	88db      	ldrh	r3, [r3, #6]
 8013746:	b21a      	sxth	r2, r3
 8013748:	4613      	mov	r3, r2
 801374a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801374e:	189b      	adds	r3, r3, r2
 8013750:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	sampsLeft = nSamps - i;		/* process to length of left */
 8013752:	68ba      	ldr	r2, [r7, #8]
 8013754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013756:	1ad3      	subs	r3, r2, r3
 8013758:	65fb      	str	r3, [r7, #92]	; 0x5c
	isfTab = (int *)ISFMpeg1[midSideFlag];
 801375a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801375c:	4613      	mov	r3, r2
 801375e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013762:	1a9b      	subs	r3, r3, r2
 8013764:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013768:	461a      	mov	r2, r3
 801376a:	f241 4354 	movw	r3, #5204	; 0x1454
 801376e:	f6c0 0303 	movt	r3, #2051	; 0x803
 8013772:	18d3      	adds	r3, r2, r3
 8013774:	637b      	str	r3, [r7, #52]	; 0x34
	mOutL = mOutR = 0;
 8013776:	f04f 0300 	mov.w	r3, #0
 801377a:	657b      	str	r3, [r7, #84]	; 0x54
 801377c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801377e:	65bb      	str	r3, [r7, #88]	; 0x58

	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8013780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013782:	667b      	str	r3, [r7, #100]	; 0x64
 8013784:	e08a      	b.n	801389c <xmp3_IntensityProcMPEG1+0x224>
		isf = sfis->l[cb];
 8013786:	683a      	ldr	r2, [r7, #0]
 8013788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801378a:	18d3      	adds	r3, r2, r3
 801378c:	781b      	ldrb	r3, [r3, #0]
 801378e:	633b      	str	r3, [r7, #48]	; 0x30
		if (isf == 7) {
 8013790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013792:	2b07      	cmp	r3, #7
 8013794:	d112      	bne.n	80137bc <xmp3_IntensityProcMPEG1+0x144>
			fl = ISFIIP[midSideFlag][0];
 8013796:	f241 538c 	movw	r3, #5516	; 0x158c
 801379a:	f6c0 0303 	movt	r3, #2051	; 0x803
 801379e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80137a0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80137a4:	653b      	str	r3, [r7, #80]	; 0x50
			fr = ISFIIP[midSideFlag][1];
 80137a6:	f241 528c 	movw	r2, #5516	; 0x158c
 80137aa:	f6c0 0203 	movt	r2, #2051	; 0x803
 80137ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80137b0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80137b4:	18d3      	adds	r3, r2, r3
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80137ba:	e012      	b.n	80137e2 <xmp3_IntensityProcMPEG1+0x16a>
		} else {
			fl = isfTab[isf];	
 80137bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80137c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137c4:	18d3      	adds	r3, r2, r3
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	653b      	str	r3, [r7, #80]	; 0x50
			fr = isfTab[6] - isfTab[isf];
 80137ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137cc:	f103 0318 	add.w	r3, r3, #24
 80137d0:	681a      	ldr	r2, [r3, #0]
 80137d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80137d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80137da:	18cb      	adds	r3, r1, r3
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	1ad3      	subs	r3, r2, r3
 80137e0:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80137e8:	f102 0201 	add.w	r2, r2, #1
 80137ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80137f0:	b21a      	sxth	r2, r3
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80137f8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80137fc:	b21b      	sxth	r3, r3
 80137fe:	1ad3      	subs	r3, r2, r3
 8013800:	63bb      	str	r3, [r7, #56]	; 0x38
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8013802:	f04f 0300 	mov.w	r3, #0
 8013806:	66bb      	str	r3, [r7, #104]	; 0x68
 8013808:	e03d      	b.n	8013886 <xmp3_IntensityProcMPEG1+0x20e>
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801380e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013812:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013814:	4619      	mov	r1, r3
 8013816:	f7ff fea5 	bl	8013564 <MULSHIFT32>
 801381a:	4603      	mov	r3, r0
 801381c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013828:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801382a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801382c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013832:	f7ff fea9 	bl	8013588 <FASTABS>
 8013836:	4603      	mov	r3, r0
 8013838:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801383a:	4313      	orrs	r3, r2
 801383c:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013846:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013848:	4619      	mov	r1, r3
 801384a:	f7ff fe8b 	bl	8013564 <MULSHIFT32>
 801384e:	4603      	mov	r3, r0
 8013850:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013854:	62bb      	str	r3, [r7, #40]	; 0x28
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801385a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801385c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013862:	f7ff fe91 	bl	8013588 <FASTABS>
 8013866:	4603      	mov	r3, r0
 8013868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801386a:	4313      	orrs	r3, r2
 801386c:	65bb      	str	r3, [r7, #88]	; 0x58
			sampsLeft--;
 801386e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013870:	f103 33ff 	add.w	r3, r3, #4294967295
 8013874:	65fb      	str	r3, [r7, #92]	; 0x5c
			fl = isfTab[isf];	
			fr = isfTab[6] - isfTab[isf];
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8013876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013878:	f103 0301 	add.w	r3, r3, #1
 801387c:	66bb      	str	r3, [r7, #104]	; 0x68
 801387e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013880:	f103 0301 	add.w	r3, r3, #1
 8013884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013886:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388a:	429a      	cmp	r2, r3
 801388c:	da02      	bge.n	8013894 <xmp3_IntensityProcMPEG1+0x21c>
 801388e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013890:	2b00      	cmp	r3, #0
 8013892:	dcba      	bgt.n	801380a <xmp3_IntensityProcMPEG1+0x192>
	sampsLeft = nSamps - i;		/* process to length of left */
	isfTab = (int *)ISFMpeg1[midSideFlag];
	mOutL = mOutR = 0;

	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8013894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013896:	f103 0301 	add.w	r3, r3, #1
 801389a:	667b      	str	r3, [r7, #100]	; 0x64
 801389c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801389e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138a0:	429a      	cmp	r2, r3
 80138a2:	da03      	bge.n	80138ac <xmp3_IntensityProcMPEG1+0x234>
 80138a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	f73f af6d 	bgt.w	8013786 <xmp3_IntensityProcMPEG1+0x10e>
			sampsLeft--;
		}
	}

	/* short blocks */
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 80138ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ae:	667b      	str	r3, [r7, #100]	; 0x64
 80138b0:	e13c      	b.n	8013b2c <xmp3_IntensityProcMPEG1+0x4b4>
		for (w = 0; w < 3; w++) {
 80138b2:	f04f 0300 	mov.w	r3, #0
 80138b6:	663b      	str	r3, [r7, #96]	; 0x60
 80138b8:	e055      	b.n	8013966 <xmp3_IntensityProcMPEG1+0x2ee>
			isf = sfis->s[cb][w];
 80138ba:	6839      	ldr	r1, [r7, #0]
 80138bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80138be:	4613      	mov	r3, r2
 80138c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80138c4:	189b      	adds	r3, r3, r2
 80138c6:	18ca      	adds	r2, r1, r3
 80138c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80138ca:	18d3      	adds	r3, r2, r3
 80138cc:	f103 0317 	add.w	r3, r3, #23
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	633b      	str	r3, [r7, #48]	; 0x30
			if (isf == 7) {
 80138d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d6:	2b07      	cmp	r3, #7
 80138d8:	d120      	bne.n	801391c <xmp3_IntensityProcMPEG1+0x2a4>
				fls[w] = ISFIIP[midSideFlag][0];
 80138da:	f241 538c 	movw	r3, #5516	; 0x158c
 80138de:	f6c0 0303 	movt	r3, #2051	; 0x803
 80138e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80138e4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80138e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80138ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80138ee:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80138f2:	18cb      	adds	r3, r1, r3
 80138f4:	f843 2c54 	str.w	r2, [r3, #-84]
				frs[w] = ISFIIP[midSideFlag][1];
 80138f8:	f241 528c 	movw	r2, #5516	; 0x158c
 80138fc:	f6c0 0203 	movt	r2, #2051	; 0x803
 8013900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013906:	18d3      	adds	r3, r2, r3
 8013908:	685a      	ldr	r2, [r3, #4]
 801390a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801390c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013910:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013914:	18cb      	adds	r3, r1, r3
 8013916:	f843 2c60 	str.w	r2, [r3, #-96]
 801391a:	e020      	b.n	801395e <xmp3_IntensityProcMPEG1+0x2e6>
			} else {
				fls[w] = isfTab[isf];
 801391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801391e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013924:	18d3      	adds	r3, r2, r3
 8013926:	681a      	ldr	r2, [r3, #0]
 8013928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801392a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801392e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013932:	18cb      	adds	r3, r1, r3
 8013934:	f843 2c54 	str.w	r2, [r3, #-84]
				frs[w] = isfTab[6] - isfTab[isf];
 8013938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801393a:	f103 0318 	add.w	r3, r3, #24
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013942:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013946:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013948:	18cb      	adds	r3, r1, r3
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	1ad2      	subs	r2, r2, r3
 801394e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013950:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013954:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013958:	18cb      	adds	r3, r1, r3
 801395a:	f843 2c60 	str.w	r2, [r3, #-96]
		}
	}

	/* short blocks */
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
		for (w = 0; w < 3; w++) {
 801395e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013960:	f103 0301 	add.w	r3, r3, #1
 8013964:	663b      	str	r3, [r7, #96]	; 0x60
 8013966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013968:	2b02      	cmp	r3, #2
 801396a:	dda6      	ble.n	80138ba <xmp3_IntensityProcMPEG1+0x242>
				fls[w] = isfTab[isf];
				frs[w] = isfTab[6] - isfTab[isf];
			}
		}

		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013972:	f103 0301 	add.w	r3, r3, #1
 8013976:	f103 0314 	add.w	r3, r3, #20
 801397a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801397e:	18d3      	adds	r3, r2, r3
 8013980:	88db      	ldrh	r3, [r3, #6]
 8013982:	b21a      	sxth	r2, r3
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801398a:	f103 0314 	add.w	r3, r3, #20
 801398e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013992:	18cb      	adds	r3, r1, r3
 8013994:	88db      	ldrh	r3, [r3, #6]
 8013996:	b21b      	sxth	r3, r3
 8013998:	1ad3      	subs	r3, r2, r3
 801399a:	63bb      	str	r3, [r7, #56]	; 0x38
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 801399c:	f04f 0300 	mov.w	r3, #0
 80139a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80139a2:	e0b7      	b.n	8013b14 <xmp3_IntensityProcMPEG1+0x49c>
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 80139a4:	693a      	ldr	r2, [r7, #16]
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80139aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80139ae:	4610      	mov	r0, r2
 80139b0:	4619      	mov	r1, r3
 80139b2:	f7ff fdd7 	bl	8013564 <MULSHIFT32>
 80139b6:	4603      	mov	r3, r0
 80139b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80139bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80139c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80139c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80139cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80139ce:	f7ff fddb 	bl	8013588 <FASTABS>
 80139d2:	4603      	mov	r3, r0
 80139d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80139d6:	4313      	orrs	r3, r2
 80139d8:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 80139da:	69fa      	ldr	r2, [r7, #28]
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80139e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80139e4:	4610      	mov	r0, r2
 80139e6:	4619      	mov	r1, r3
 80139e8:	f7ff fdbc 	bl	8013564 <MULSHIFT32>
 80139ec:	4603      	mov	r3, r0
 80139ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80139f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80139f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80139fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a00:	f7ff fdc2 	bl	8013588 <FASTABS>
 8013a04:	4603      	mov	r3, r0
 8013a06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013a08:	4313      	orrs	r3, r2
 8013a0a:	65bb      	str	r3, [r7, #88]	; 0x58
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 8013a0c:	697a      	ldr	r2, [r7, #20]
 8013a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a10:	f103 0101 	add.w	r1, r3, #1
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a1a:	4610      	mov	r0, r2
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	f7ff fda1 	bl	8013564 <MULSHIFT32>
 8013a22:	4603      	mov	r3, r0
 8013a24:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013a32:	f102 0201 	add.w	r2, r2, #1
 8013a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013a3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a3e:	f7ff fda3 	bl	8013588 <FASTABS>
 8013a42:	4603      	mov	r3, r0
 8013a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013a46:	4313      	orrs	r3, r2
 8013a48:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 8013a4a:	6a3a      	ldr	r2, [r7, #32]
 8013a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a4e:	f103 0101 	add.w	r1, r3, #1
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a58:	4610      	mov	r0, r2
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	f7ff fd82 	bl	8013564 <MULSHIFT32>
 8013a60:	4603      	mov	r3, r0
 8013a62:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a6a:	f103 0201 	add.w	r2, r3, #1
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a78:	f7ff fd86 	bl	8013588 <FASTABS>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013a80:	4313      	orrs	r3, r2
 8013a82:	65bb      	str	r3, [r7, #88]	; 0x58
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 8013a84:	69ba      	ldr	r2, [r7, #24]
 8013a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a88:	f103 0102 	add.w	r1, r3, #2
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a92:	4610      	mov	r0, r2
 8013a94:	4619      	mov	r1, r3
 8013a96:	f7ff fd65 	bl	8013564 <MULSHIFT32>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013aaa:	f102 0202 	add.w	r2, r2, #2
 8013aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ab6:	f7ff fd67 	bl	8013588 <FASTABS>
 8013aba:	4603      	mov	r3, r0
 8013abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013abe:	4313      	orrs	r3, r2
 8013ac0:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8013ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ac6:	f103 0102 	add.w	r1, r3, #2
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ad0:	4610      	mov	r0, r2
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	f7ff fd46 	bl	8013564 <MULSHIFT32>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ae2:	f103 0202 	add.w	r2, r3, #2
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013af0:	f7ff fd4a 	bl	8013588 <FASTABS>
 8013af4:	4603      	mov	r3, r0
 8013af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013af8:	4313      	orrs	r3, r2
 8013afa:	65bb      	str	r3, [r7, #88]	; 0x58
			sampsLeft -= 3;
 8013afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013afe:	f1a3 0303 	sub.w	r3, r3, #3
 8013b02:	65fb      	str	r3, [r7, #92]	; 0x5c
				frs[w] = isfTab[6] - isfTab[isf];
			}
		}

		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8013b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b06:	f103 0301 	add.w	r3, r3, #1
 8013b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8013b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b0e:	f103 0303 	add.w	r3, r3, #3
 8013b12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013b14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	da03      	bge.n	8013b24 <xmp3_IntensityProcMPEG1+0x4ac>
 8013b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b1e:	2b02      	cmp	r3, #2
 8013b20:	f73f af40 	bgt.w	80139a4 <xmp3_IntensityProcMPEG1+0x32c>
			sampsLeft--;
		}
	}

	/* short blocks */
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8013b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b26:	f103 0301 	add.w	r3, r3, #1
 8013b2a:	667b      	str	r3, [r7, #100]	; 0x64
 8013b2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b30:	429a      	cmp	r2, r3
 8013b32:	da03      	bge.n	8013b3c <xmp3_IntensityProcMPEG1+0x4c4>
 8013b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b36:	2b02      	cmp	r3, #2
 8013b38:	f73f aebb 	bgt.w	80138b2 <xmp3_IntensityProcMPEG1+0x23a>
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
			sampsLeft -= 3;
		}
	}
	mOut[0] = mOutL;
 8013b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013b42:	601a      	str	r2, [r3, #0]
	mOut[1] = mOutR;
 8013b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013b48:	f103 0304 	add.w	r3, r3, #4
 8013b4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013b4e:	601a      	str	r2, [r3, #0]
	
	return;
}
 8013b50:	f107 0770 	add.w	r7, r7, #112	; 0x70
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <xmp3_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b0b2      	sub	sp, #200	; 0xc8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	607a      	str	r2, [r7, #4]
 8013b64:	603b      	str	r3, [r7, #0]
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8013b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8013b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013b74:	18d3      	adds	r3, r2, r3
 8013b76:	ea4f 1283 	mov.w	r2, r3, lsl #6
 8013b7a:	f241 438c 	movw	r3, #5260	; 0x148c
 8013b7e:	f6c0 0303 	movt	r3, #2051	; 0x803
 8013b82:	18d3      	adds	r3, r2, r3
 8013b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mOutL = mOutR = 0;
 8013b88:	f04f 0300 	mov.w	r3, #0
 8013b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013b90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
 8013b98:	f04f 0300 	mov.w	r3, #0
 8013b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013ba8:	e03f      	b.n	8013c2a <xmp3_IntensityProcMPEG2+0xd2>
		tmp = (1 << sfjs->slen[r]) - 1;
 8013baa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8013bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013bb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013bb6:	18d3      	adds	r3, r2, r3
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	f04f 0201 	mov.w	r2, #1
 8013bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8013bc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8013bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8013bca:	f04f 0300 	mov.w	r3, #0
 8013bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013bd2:	e016      	b.n	8013c02 <xmp3_IntensityProcMPEG2+0xaa>
			il[k] = tmp;
 8013bd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013bd8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013bdc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8013be0:	18d3      	adds	r3, r2, r3
 8013be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013be6:	f843 2cb4 	str.w	r2, [r3, #-180]
	mOutL = mOutR = 0;

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
		tmp = (1 << sfjs->slen[r]) - 1;
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8013bea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013bee:	f103 0301 	add.w	r3, r3, #1
 8013bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013bf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013bfa:	f103 0301 	add.w	r3, r3, #1
 8013bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013c02:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8013c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013c0a:	f103 0304 	add.w	r3, r3, #4
 8013c0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013c12:	18d3      	adds	r3, r2, r3
 8013c14:	685a      	ldr	r2, [r3, #4]
 8013c16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	dcda      	bgt.n	8013bd4 <xmp3_IntensityProcMPEG2+0x7c>
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
	mOutL = mOutR = 0;

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
 8013c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013c22:	f103 0301 	add.w	r3, r3, #1
 8013c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013c2e:	2b03      	cmp	r3, #3
 8013c30:	ddbb      	ble.n	8013baa <xmp3_IntensityProcMPEG2+0x52>
		tmp = (1 << sfjs->slen[r]) - 1;
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
			il[k] = tmp;
	}

	if (cbi[1].cbType == 0) {
 8013c32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013c36:	f103 0318 	add.w	r3, r3, #24
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	f040 810b 	bne.w	8013e58 <xmp3_IntensityProcMPEG2+0x300>
		/* long blocks */
		il[21] = il[22] = 1;
 8013c42:	f04f 0301 	mov.w	r3, #1
 8013c46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c4a:	66bb      	str	r3, [r7, #104]	; 0x68
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 8013c4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013c50:	f103 0318 	add.w	r3, r3, #24
 8013c54:	695b      	ldr	r3, [r3, #20]
 8013c56:	f103 0301 	add.w	r3, r3, #1
 8013c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 8013c5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013c62:	695b      	ldr	r3, [r3, #20]
 8013c64:	f103 0301 	add.w	r3, r3, #1
 8013c68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		i = fh->sfBand->l[cbStartL];
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c70:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8013c74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013c78:	b21b      	sxth	r3, r3
 8013c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		sampsLeft = nSamps - i;
 8013c7e:	68ba      	ldr	r2, [r7, #8]
 8013c80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013c84:	1ad3      	subs	r3, r2, r3
 8013c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		for(cb = cbStartL; cb < cbEndL; cb++) {
 8013c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013c92:	e0d9      	b.n	8013e48 <xmp3_IntensityProcMPEG2+0x2f0>
			sfIdx = sfis->l[cb];
 8013c94:	683a      	ldr	r2, [r7, #0]
 8013c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013c9a:	18d3      	adds	r3, r2, r3
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			if (sfIdx == il[cb]) {
 8013ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013ca6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013caa:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8013cae:	18d3      	adds	r3, r2, r3
 8013cb0:	f853 2cb4 	ldr.w	r2, [r3, #-180]
 8013cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d116      	bne.n	8013cea <xmp3_IntensityProcMPEG2+0x192>
				fl = ISFIIP[midSideFlag][0];
 8013cbc:	f241 538c 	movw	r3, #5516	; 0x158c
 8013cc0:	f6c0 0303 	movt	r3, #2051	; 0x803
 8013cc4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8013cc8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8013ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				fr = ISFIIP[midSideFlag][1];
 8013cd0:	f241 528c 	movw	r2, #5516	; 0x158c
 8013cd4:	f6c0 0203 	movt	r2, #2051	; 0x803
 8013cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013cdc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013ce0:	18d3      	adds	r3, r2, r3
 8013ce2:	685b      	ldr	r3, [r3, #4]
 8013ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013ce8:	e031      	b.n	8013d4e <xmp3_IntensityProcMPEG2+0x1f6>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
 8013cea:	683a      	ldr	r2, [r7, #0]
 8013cec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013cf0:	18d3      	adds	r3, r2, r3
 8013cf2:	781b      	ldrb	r3, [r3, #0]
 8013cf4:	f103 0301 	add.w	r3, r3, #1
 8013cf8:	ea4f 0363 	mov.w	r3, r3, asr #1
 8013cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8013d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013d04:	f003 0301 	and.w	r3, r3, #1
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d004      	beq.n	8013d18 <xmp3_IntensityProcMPEG2+0x1c0>
 8013d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d12:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013d16:	e001      	b.n	8013d1c <xmp3_IntensityProcMPEG2+0x1c4>
 8013d18:	f04f 0300 	mov.w	r3, #0
 8013d1c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013d20:	18d3      	adds	r3, r2, r3
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8013d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013d2c:	f003 0301 	and.w	r3, r3, #1
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d104      	bne.n	8013d3e <xmp3_IntensityProcMPEG2+0x1e6>
 8013d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d38:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013d3c:	e001      	b.n	8013d42 <xmp3_IntensityProcMPEG2+0x1ea>
 8013d3e:	f04f 0300 	mov.w	r3, #0
 8013d42:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013d46:	18d3      	adds	r3, r2, r3
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013d56:	f102 0201 	add.w	r2, r2, #1
 8013d5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013d5e:	b21a      	sxth	r2, r3
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d64:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8013d68:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8013d6c:	b21b      	sxth	r3, r3
 8013d6e:	1ad2      	subs	r2, r2, r3
 8013d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013d74:	429a      	cmp	r2, r3
 8013d76:	bfb8      	it	lt
 8013d78:	4613      	movlt	r3, r2
 8013d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			for(j = 0; j < n; j++, i++) {
 8013d7e:	f04f 0300 	mov.w	r3, #0
 8013d82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013d86:	e047      	b.n	8013e18 <xmp3_IntensityProcMPEG2+0x2c0>
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d92:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8013d96:	4619      	mov	r1, r3
 8013d98:	f7ff fbe4 	bl	8013564 <MULSHIFT32>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013da2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013dae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013db4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013db6:	f7ff fbe7 	bl	8013588 <FASTABS>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dd0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	f7ff fbc5 	bl	8013564 <MULSHIFT32>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013de8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013dee:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8013df0:	f7ff fbca 	bl	8013588 <FASTABS>
 8013df4:	4603      	mov	r3, r0
 8013df6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013dfa:	4313      	orrs	r3, r2
 8013dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);

			for(j = 0; j < n; j++, i++) {
 8013e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e04:	f103 0301 	add.w	r3, r3, #1
 8013e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013e10:	f103 0301 	add.w	r3, r3, #1
 8013e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013e20:	429a      	cmp	r2, r3
 8013e22:	dbb1      	blt.n	8013d88 <xmp3_IntensityProcMPEG2+0x230>
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
 8013e24:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013e2c:	1ad3      	subs	r3, r2, r3
 8013e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (sampsLeft == 0)		
 8013e32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	f000 813a 	beq.w	80140b0 <xmp3_IntensityProcMPEG2+0x558>
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
		i = fh->sfBand->l[cbStartL];
		sampsLeft = nSamps - i;

		for(cb = cbStartL; cb < cbEndL; cb++) {
 8013e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013e40:	f103 0301 	add.w	r3, r3, #1
 8013e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013e48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e50:	429a      	cmp	r2, r3
 8013e52:	f6ff af1f 	blt.w	8013c94 <xmp3_IntensityProcMPEG2+0x13c>
 8013e56:	e12c      	b.n	80140b2 <xmp3_IntensityProcMPEG2+0x55a>
			if (sampsLeft == 0)		
				break;
		}
	} else {
		/* short or mixed blocks */
		il[12] = 1;
 8013e58:	f04f 0301 	mov.w	r3, #1
 8013e5c:	647b      	str	r3, [r7, #68]	; 0x44

		for(w = 0; w < 3; w++) {
 8013e5e:	f04f 0300 	mov.w	r3, #0
 8013e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013e66:	e11d      	b.n	80140a4 <xmp3_IntensityProcMPEG2+0x54c>
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8013e68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013e6c:	f103 0218 	add.w	r2, r3, #24
 8013e70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013e74:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013e78:	18d3      	adds	r3, r2, r3
 8013e7a:	685b      	ldr	r3, [r3, #4]
 8013e7c:	f103 0301 	add.w	r3, r3, #1
 8013e80:	677b      	str	r3, [r7, #116]	; 0x74
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 8013e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013e86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013e8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013e8e:	18d3      	adds	r3, r2, r3
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	f103 0301 	add.w	r3, r3, #1
 8013e96:	673b      	str	r3, [r7, #112]	; 0x70
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e9e:	f103 0314 	add.w	r3, r3, #20
 8013ea2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013ea6:	18d3      	adds	r3, r2, r3
 8013ea8:	88db      	ldrh	r3, [r3, #6]
 8013eaa:	b21a      	sxth	r2, r3
 8013eac:	4613      	mov	r3, r2
 8013eae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013eb2:	189a      	adds	r2, r3, r2
 8013eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013eb8:	18d3      	adds	r3, r2, r3
 8013eba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

			/* skip through sample array by 3, so early-exit logic would be more tricky */
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8013ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013ec4:	e0e2      	b.n	801408c <xmp3_IntensityProcMPEG2+0x534>
				sfIdx = sfis->s[cb][w];
 8013ec6:	6839      	ldr	r1, [r7, #0]
 8013ec8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013ecc:	4613      	mov	r3, r2
 8013ece:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013ed2:	189b      	adds	r3, r3, r2
 8013ed4:	18ca      	adds	r2, r1, r3
 8013ed6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013eda:	18d3      	adds	r3, r2, r3
 8013edc:	f103 0317 	add.w	r3, r3, #23
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				if (sfIdx == il[cb]) {
 8013ee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013eea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013eee:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8013ef2:	18d3      	adds	r3, r2, r3
 8013ef4:	f853 2cb4 	ldr.w	r2, [r3, #-180]
 8013ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d116      	bne.n	8013f2e <xmp3_IntensityProcMPEG2+0x3d6>
					fl = ISFIIP[midSideFlag][0];
 8013f00:	f241 538c 	movw	r3, #5516	; 0x158c
 8013f04:	f6c0 0303 	movt	r3, #2051	; 0x803
 8013f08:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8013f0c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8013f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					fr = ISFIIP[midSideFlag][1];
 8013f14:	f241 528c 	movw	r2, #5516	; 0x158c
 8013f18:	f6c0 0203 	movt	r2, #2051	; 0x803
 8013f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013f20:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013f24:	18d3      	adds	r3, r2, r3
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013f2c:	e03a      	b.n	8013fa4 <xmp3_IntensityProcMPEG2+0x44c>
				} else {
					isf = (sfis->s[cb][w] + 1) >> 1;
 8013f2e:	6839      	ldr	r1, [r7, #0]
 8013f30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013f34:	4613      	mov	r3, r2
 8013f36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013f3a:	189b      	adds	r3, r3, r2
 8013f3c:	18ca      	adds	r2, r1, r3
 8013f3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013f42:	18d3      	adds	r3, r2, r3
 8013f44:	f103 0317 	add.w	r3, r3, #23
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	f103 0301 	add.w	r3, r3, #1
 8013f4e:	ea4f 0363 	mov.w	r3, r3, asr #1
 8013f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8013f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013f5a:	f003 0301 	and.w	r3, r3, #1
 8013f5e:	b2db      	uxtb	r3, r3
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d004      	beq.n	8013f6e <xmp3_IntensityProcMPEG2+0x416>
 8013f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013f68:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013f6c:	e001      	b.n	8013f72 <xmp3_IntensityProcMPEG2+0x41a>
 8013f6e:	f04f 0300 	mov.w	r3, #0
 8013f72:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013f76:	18d3      	adds	r3, r2, r3
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8013f7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013f82:	f003 0301 	and.w	r3, r3, #1
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d104      	bne.n	8013f94 <xmp3_IntensityProcMPEG2+0x43c>
 8013f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013f8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013f92:	e001      	b.n	8013f98 <xmp3_IntensityProcMPEG2+0x440>
 8013f94:	f04f 0300 	mov.w	r3, #0
 8013f98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013f9c:	18d3      	adds	r3, r2, r3
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				}
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013fa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013fac:	f103 0301 	add.w	r3, r3, #1
 8013fb0:	f103 0314 	add.w	r3, r3, #20
 8013fb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013fb8:	18d3      	adds	r3, r2, r3
 8013fba:	88db      	ldrh	r3, [r3, #6]
 8013fbc:	b21a      	sxth	r2, r3
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013fc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013fc6:	f103 0314 	add.w	r3, r3, #20
 8013fca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013fce:	18cb      	adds	r3, r1, r3
 8013fd0:	88db      	ldrh	r3, [r3, #6]
 8013fd2:	b21b      	sxth	r3, r3
 8013fd4:	1ad3      	subs	r3, r2, r3
 8013fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

				for(j = 0; j < n; j++, i+=3) {
 8013fda:	f04f 0300 	mov.w	r3, #0
 8013fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013fe2:	e047      	b.n	8014074 <xmp3_IntensityProcMPEG2+0x51c>
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fee:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	f7ff fab6 	bl	8013564 <MULSHIFT32>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014006:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801400a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801400c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014010:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8014012:	f7ff fab9 	bl	8013588 <FASTABS>
 8014016:	4603      	mov	r3, r0
 8014018:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801401c:	4313      	orrs	r3, r2
 801401e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801402c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014030:	4619      	mov	r1, r3
 8014032:	f7ff fa97 	bl	8013564 <MULSHIFT32>
 8014036:	4603      	mov	r3, r0
 8014038:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801403c:	67bb      	str	r3, [r7, #120]	; 0x78
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014044:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801404a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801404c:	f7ff fa9c 	bl	8013588 <FASTABS>
 8014050:	4603      	mov	r3, r0
 8014052:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014056:	4313      	orrs	r3, r2
 8014058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
				}
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];

				for(j = 0; j < n; j++, i+=3) {
 801405c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014060:	f103 0301 	add.w	r3, r3, #1
 8014064:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801406c:	f103 0303 	add.w	r3, r3, #3
 8014070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014074:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8014078:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801407c:	429a      	cmp	r2, r3
 801407e:	dbb1      	blt.n	8013fe4 <xmp3_IntensityProcMPEG2+0x48c>
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
			i = 3 * fh->sfBand->s[cbStartS] + w;

			/* skip through sample array by 3, so early-exit logic would be more tricky */
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8014080:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014084:	f103 0301 	add.w	r3, r3, #1
 8014088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801408c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014092:	429a      	cmp	r2, r3
 8014094:	f6ff af17 	blt.w	8013ec6 <xmp3_IntensityProcMPEG2+0x36e>
		}
	} else {
		/* short or mixed blocks */
		il[12] = 1;

		for(w = 0; w < 3; w++) {
 8014098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801409c:	f103 0301 	add.w	r3, r3, #1
 80140a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80140a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80140a8:	2b02      	cmp	r3, #2
 80140aa:	f77f aedd 	ble.w	8013e68 <xmp3_IntensityProcMPEG2+0x310>
 80140ae:	e000      	b.n	80140b2 <xmp3_IntensityProcMPEG2+0x55a>
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
			if (sampsLeft == 0)		
				break;
 80140b0:	bf00      	nop
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
				}
			}
		}
	}
	mOut[0] = mOutL;
 80140b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80140b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80140ba:	601a      	str	r2, [r3, #0]
	mOut[1] = mOutR;
 80140bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80140c0:	f103 0304 	add.w	r3, r3, #4
 80140c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80140c8:	601a      	str	r2, [r3, #0]

	return;
}
 80140ca:	f107 07c8 	add.w	r7, r7, #200	; 0xc8
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
 80140d2:	bf00      	nop

080140d4 <xmp3_Subband>:
 * Outputs:     decoded PCM data, interleaved LRLRLR... if stereo
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
int Subband(MP3DecInfo *mp3DecInfo, short *pcmBuf)
{
 80140d4:	b590      	push	{r4, r7, lr}
 80140d6:	b089      	sub	sp, #36	; 0x24
 80140d8:	af02      	add	r7, sp, #8
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d00b      	beq.n	80140fc <xmp3_Subband+0x28>
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d007      	beq.n	80140fc <xmp3_Subband+0x28>
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	695b      	ldr	r3, [r3, #20]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d003      	beq.n	80140fc <xmp3_Subband+0x28>
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	699b      	ldr	r3, [r3, #24]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d102      	bne.n	8014102 <xmp3_Subband+0x2e>
		return -1;
 80140fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014100:	e0c9      	b.n	8014296 <xmp3_Subband+0x1c2>

	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	613b      	str	r3, [r7, #16]
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	695b      	ldr	r3, [r3, #20]
 801410c:	60fb      	str	r3, [r7, #12]
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	699b      	ldr	r3, [r3, #24]
 8014112:	60bb      	str	r3, [r7, #8]

	if (mp3DecInfo->nChans == 2) {
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 801411a:	2b02      	cmp	r3, #2
 801411c:	d16a      	bne.n	80141f4 <xmp3_Subband+0x120>
		/* stereo */
		for (b = 0; b < BLOCK_SIZE; b++) {
 801411e:	f04f 0300 	mov.w	r3, #0
 8014122:	617b      	str	r3, [r7, #20]
 8014124:	e062      	b.n	80141ec <xmp3_Subband+0x118>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 8014126:	68fa      	ldr	r2, [r7, #12]
 8014128:	697b      	ldr	r3, [r7, #20]
 801412a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801412e:	18d0      	adds	r0, r2, r3
 8014130:	68b9      	ldr	r1, [r7, #8]
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8014138:	681a      	ldr	r2, [r3, #0]
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	f003 0401 	and.w	r4, r3, #1
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 8014146:	f103 0318 	add.w	r3, r3, #24
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	9300      	str	r3, [sp, #0]
 801414e:	4623      	mov	r3, r4
 8014150:	f7f8 fbbc 	bl	800c8cc <xmp3_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 8014154:	68fa      	ldr	r2, [r7, #12]
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	f103 0312 	add.w	r3, r3, #18
 801415c:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8014160:	18d0      	adds	r0, r2, r3
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 801416e:	681a      	ldr	r2, [r3, #0]
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	f003 0401 	and.w	r4, r3, #1
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 801417c:	f103 031c 	add.w	r3, r3, #28
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	9300      	str	r3, [sp, #0]
 8014184:	4623      	mov	r3, r4
 8014186:	f7f8 fba1 	bl	800c8cc <xmp3_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 801418a:	68b9      	ldr	r1, [r7, #8]
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	4618      	mov	r0, r3
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	f003 0201 	and.w	r2, r3, #1
 801419c:	4613      	mov	r3, r2
 801419e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80141a2:	189b      	adds	r3, r3, r2
 80141a4:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80141a8:	18c3      	adds	r3, r0, r3
 80141aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80141ae:	18cb      	adds	r3, r1, r3
 80141b0:	6838      	ldr	r0, [r7, #0]
 80141b2:	4619      	mov	r1, r3
 80141b4:	f241 52dc 	movw	r2, #5596	; 0x15dc
 80141b8:	f6c0 0203 	movt	r2, #2051	; 0x803
 80141bc:	f7fd fc8c 	bl	8011ad8 <xmp3_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	f003 0301 	and.w	r3, r3, #1
 80141ce:	1ad3      	subs	r3, r2, r3
 80141d0:	f003 0207 	and.w	r2, r3, #7
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80141da:	601a      	str	r2, [r3, #0]
			pcmBuf += (2 * NBANDS);
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	f103 0380 	add.w	r3, r3, #128	; 0x80
 80141e2:	603b      	str	r3, [r7, #0]
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);

	if (mp3DecInfo->nChans == 2) {
		/* stereo */
		for (b = 0; b < BLOCK_SIZE; b++) {
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	f103 0301 	add.w	r3, r3, #1
 80141ea:	617b      	str	r3, [r7, #20]
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	2b11      	cmp	r3, #17
 80141f0:	dd99      	ble.n	8014126 <xmp3_Subband+0x52>
 80141f2:	e04e      	b.n	8014292 <xmp3_Subband+0x1be>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += (2 * NBANDS);
		}
	} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
 80141f4:	f04f 0300 	mov.w	r3, #0
 80141f8:	617b      	str	r3, [r7, #20]
 80141fa:	e047      	b.n	801428c <xmp3_Subband+0x1b8>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 80141fc:	68fa      	ldr	r2, [r7, #12]
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8014204:	18d0      	adds	r0, r2, r3
 8014206:	68b9      	ldr	r1, [r7, #8]
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 801420e:	681a      	ldr	r2, [r3, #0]
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	f003 0401 	and.w	r4, r3, #1
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 801421c:	f103 0318 	add.w	r3, r3, #24
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	4623      	mov	r3, r4
 8014226:	f7f8 fb51 	bl	800c8cc <xmp3_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 801422a:	68b9      	ldr	r1, [r7, #8]
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	4618      	mov	r0, r3
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	f003 0201 	and.w	r2, r3, #1
 801423c:	4613      	mov	r3, r2
 801423e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8014242:	189b      	adds	r3, r3, r2
 8014244:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8014248:	18c3      	adds	r3, r0, r3
 801424a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801424e:	18cb      	adds	r3, r1, r3
 8014250:	6838      	ldr	r0, [r7, #0]
 8014252:	4619      	mov	r1, r3
 8014254:	f241 52dc 	movw	r2, #5596	; 0x15dc
 8014258:	f6c0 0203 	movt	r2, #2051	; 0x803
 801425c:	f7fc ffc4 	bl	80111e8 <xmp3_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	f003 0301 	and.w	r3, r3, #1
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	f003 0207 	and.w	r2, r3, #7
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 801427a:	601a      	str	r2, [r3, #0]
			pcmBuf += NBANDS;
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8014282:	603b      	str	r3, [r7, #0]
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += (2 * NBANDS);
		}
	} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	f103 0301 	add.w	r3, r3, #1
 801428a:	617b      	str	r3, [r7, #20]
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	2b11      	cmp	r3, #17
 8014290:	ddb4      	ble.n	80141fc <xmp3_Subband+0x128>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += NBANDS;
		}
	}

	return 0;
 8014292:	f04f 0300 	mov.w	r3, #0
}
 8014296:	4618      	mov	r0, r3
 8014298:	f107 071c 	add.w	r7, r7, #28
 801429c:	46bd      	mov	sp, r7
 801429e:	bd90      	pop	{r4, r7, pc}

080142a0 <MP3InitDecoder>:
 * Outputs:     none
 *
 * Return:      handle to mp3 decoder instance, 0 if malloc fails
 **************************************************************************************/
HMP3Decoder MP3InitDecoder(void)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
	MP3DecInfo *mp3DecInfo;

	mp3DecInfo = AllocateBuffers();
 80142a6:	f7f8 fa67 	bl	800c778 <xmp3_AllocateBuffers>
 80142aa:	4603      	mov	r3, r0
 80142ac:	607b      	str	r3, [r7, #4]

	return (HMP3Decoder)mp3DecInfo;
 80142ae:	687b      	ldr	r3, [r7, #4]
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	f107 0708 	add.w	r7, r7, #8
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop

080142bc <MP3FreeDecoder>:
 * Outputs:     none
 *
 * Return:      none
 **************************************************************************************/
void MP3FreeDecoder(HMP3Decoder hMP3Decoder)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	60fb      	str	r3, [r7, #12]

	if (!mp3DecInfo)
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d003      	beq.n	80142d6 <MP3FreeDecoder+0x1a>
		return;

	FreeBuffers(mp3DecInfo);
 80142ce:	68f8      	ldr	r0, [r7, #12]
 80142d0:	f7f8 fae0 	bl	800c894 <xmp3_FreeBuffers>
 80142d4:	e000      	b.n	80142d8 <MP3FreeDecoder+0x1c>
void MP3FreeDecoder(HMP3Decoder hMP3Decoder)
{
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;

	if (!mp3DecInfo)
		return;
 80142d6:	bf00      	nop

	FreeBuffers(mp3DecInfo);
}
 80142d8:	f107 0710 	add.w	r7, r7, #16
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <MP3FindSyncWord>:
 *
 * Return:      offset to first sync word (bytes from start of buf)
 *              -1 if sync not found after searching nBytes
 **************************************************************************************/
int MP3FindSyncWord(unsigned char *buf, int nBytes)
{
 80142e0:	b480      	push	{r7}
 80142e2:	b085      	sub	sp, #20
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	6039      	str	r1, [r7, #0]
	int i;

	/* find byte-aligned syncword - need 12 (MPEG 1,2) or 11 (MPEG 2.5) matching bits */
	for (i = 0; i < nBytes - 1; i++) {
 80142ea:	f04f 0300 	mov.w	r3, #0
 80142ee:	60fb      	str	r3, [r7, #12]
 80142f0:	e015      	b.n	801431e <MP3FindSyncWord+0x3e>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	687a      	ldr	r2, [r7, #4]
 80142f6:	18d3      	adds	r3, r2, r3
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	2bff      	cmp	r3, #255	; 0xff
 80142fc:	d10b      	bne.n	8014316 <MP3FindSyncWord+0x36>
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	f103 0301 	add.w	r3, r3, #1
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	18d3      	adds	r3, r2, r3
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801430e:	2be0      	cmp	r3, #224	; 0xe0
 8014310:	d101      	bne.n	8014316 <MP3FindSyncWord+0x36>
			return i;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	e00b      	b.n	801432e <MP3FindSyncWord+0x4e>
int MP3FindSyncWord(unsigned char *buf, int nBytes)
{
	int i;

	/* find byte-aligned syncword - need 12 (MPEG 1,2) or 11 (MPEG 2.5) matching bits */
	for (i = 0; i < nBytes - 1; i++) {
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	f103 0301 	add.w	r3, r3, #1
 801431c:	60fb      	str	r3, [r7, #12]
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	f103 32ff 	add.w	r2, r3, #4294967295
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	429a      	cmp	r2, r3
 8014328:	dce3      	bgt.n	80142f2 <MP3FindSyncWord+0x12>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
			return i;
	}
	
	return -1;
 801432a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801432e:	4618      	mov	r0, r3
 8014330:	f107 0714 	add.w	r7, r7, #20
 8014334:	46bd      	mov	sp, r7
 8014336:	bc80      	pop	{r7}
 8014338:	4770      	bx	lr
 801433a:	bf00      	nop

0801433c <MP3FindFreeSync>:
 *              since free mode requires CBR (see spec) we generally only call
 *                this function once (first frame) then store the result (nSlots)
 *                and just use it from then on
 **************************************************************************************/
static int MP3FindFreeSync(unsigned char *buf, unsigned char firstFH[4], int nBytes)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b086      	sub	sp, #24
 8014340:	af00      	add	r7, sp, #0
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	60b9      	str	r1, [r7, #8]
 8014346:	607a      	str	r2, [r7, #4]
	int offset = 0;
 8014348:	f04f 0300 	mov.w	r3, #0
 801434c:	613b      	str	r3, [r7, #16]
	unsigned char *bufPtr = buf;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	617b      	str	r3, [r7, #20]
	 *  - run out of nBytes (FindMP3SyncWord() returns -1)
	 *  - find the next valid frame header (sync word, version, layer, CRC flag, bitrate, and sample rate
	 *      in next header must match current header)
	 */
	while (1) {
		offset = MP3FindSyncWord(bufPtr, nBytes);
 8014352:	6978      	ldr	r0, [r7, #20]
 8014354:	6879      	ldr	r1, [r7, #4]
 8014356:	f7ff ffc3 	bl	80142e0 <MP3FindSyncWord>
 801435a:	4603      	mov	r3, r0
 801435c:	613b      	str	r3, [r7, #16]
		bufPtr += offset;
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	697a      	ldr	r2, [r7, #20]
 8014362:	18d3      	adds	r3, r2, r3
 8014364:	617b      	str	r3, [r7, #20]
		if (offset < 0) {
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	2b00      	cmp	r3, #0
 801436a:	da02      	bge.n	8014372 <MP3FindFreeSync+0x36>
			return -1;
 801436c:	f04f 33ff 	mov.w	r3, #4294967295
 8014370:	e03f      	b.n	80143f2 <MP3FindFreeSync+0xb6>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 8014372:	697b      	ldr	r3, [r7, #20]
 8014374:	781a      	ldrb	r2, [r3, #0]
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	429a      	cmp	r2, r3
 801437c:	d12b      	bne.n	80143d6 <MP3FindFreeSync+0x9a>
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	f103 0301 	add.w	r3, r3, #1
 8014384:	781a      	ldrb	r2, [r3, #0]
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	f103 0301 	add.w	r3, r3, #1
 801438c:	781b      	ldrb	r3, [r3, #0]
 801438e:	429a      	cmp	r2, r3
 8014390:	d121      	bne.n	80143d6 <MP3FindFreeSync+0x9a>
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	f103 0302 	add.w	r3, r3, #2
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	461a      	mov	r2, r3
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	f103 0302 	add.w	r3, r3, #2
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	4053      	eors	r3, r2
 80143a6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d113      	bne.n	80143d6 <MP3FindFreeSync+0x9a>
			/* want to return number of bytes per frame, NOT counting the padding byte, so subtract one if padFlag == 1 */
			if ((firstFH[2] >> 1) & 0x01)
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	f103 0302 	add.w	r3, r3, #2
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80143ba:	b2db      	uxtb	r3, r3
 80143bc:	f003 0301 	and.w	r3, r3, #1
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d003      	beq.n	80143ce <MP3FindFreeSync+0x92>
				bufPtr--;
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80143cc:	617b      	str	r3, [r7, #20]
			return bufPtr - buf;
 80143ce:	697a      	ldr	r2, [r7, #20]
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	1ad3      	subs	r3, r2, r3
 80143d4:	e00d      	b.n	80143f2 <MP3FindFreeSync+0xb6>
		}
		bufPtr += 3;
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	f103 0303 	add.w	r3, r3, #3
 80143dc:	617b      	str	r3, [r7, #20]
		nBytes -= (offset + 3);
 80143de:	693a      	ldr	r2, [r7, #16]
 80143e0:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80143e4:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80143e8:	1a9b      	subs	r3, r3, r2
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	18d3      	adds	r3, r2, r3
 80143ee:	607b      	str	r3, [r7, #4]
	};
 80143f0:	e7af      	b.n	8014352 <MP3FindFreeSync+0x16>

		return -1;
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	f107 0718 	add.w	r7, r7, #24
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <MP3GetLastFrameInfo>:
 * Return:      none
 *
 * Notes:       call this right after calling MP3Decode
 **************************************************************************************/
void MP3GetLastFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo)
{
 80143fc:	b490      	push	{r4, r7}
 80143fe:	b084      	sub	sp, #16
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	60fb      	str	r3, [r7, #12]

	if (!mp3DecInfo || mp3DecInfo->layer != 3) {
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d004      	beq.n	801441a <MP3GetLastFrameInfo+0x1e>
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8014416:	2b03      	cmp	r3, #3
 8014418:	d01c      	beq.n	8014454 <MP3GetLastFrameInfo+0x58>
		mp3FrameInfo->bitrate = 0;
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	f04f 0200 	mov.w	r2, #0
 8014420:	601a      	str	r2, [r3, #0]
		mp3FrameInfo->nChans = 0;
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	f04f 0200 	mov.w	r2, #0
 8014428:	605a      	str	r2, [r3, #4]
		mp3FrameInfo->samprate = 0;
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	f04f 0200 	mov.w	r2, #0
 8014430:	609a      	str	r2, [r3, #8]
		mp3FrameInfo->bitsPerSample = 0;
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	f04f 0200 	mov.w	r2, #0
 8014438:	60da      	str	r2, [r3, #12]
		mp3FrameInfo->outputSamps = 0;
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	f04f 0200 	mov.w	r2, #0
 8014440:	611a      	str	r2, [r3, #16]
		mp3FrameInfo->layer = 0;
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	f04f 0200 	mov.w	r2, #0
 8014448:	615a      	str	r2, [r3, #20]
		mp3FrameInfo->version = 0;
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	f04f 0200 	mov.w	r2, #0
 8014450:	619a      	str	r2, [r3, #24]
 8014452:	e039      	b.n	80144c8 <MP3GetLastFrameInfo+0xcc>
	} else {
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	f8d3 27b8 	ldr.w	r2, [r3, #1976]	; 0x7b8
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	601a      	str	r2, [r3, #0]
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 8014464:	683b      	ldr	r3, [r7, #0]
 8014466:	605a      	str	r2, [r3, #4]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	f8d3 27c0 	ldr.w	r2, [r3, #1984]	; 0x7c0
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	609a      	str	r2, [r3, #8]
		mp3FrameInfo->bitsPerSample = 16;
 8014472:	683b      	ldr	r3, [r7, #0]
 8014474:	f04f 0210 	mov.w	r2, #16
 8014478:	60da      	str	r2, [r3, #12]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	f8d3 07bc 	ldr.w	r0, [r3, #1980]	; 0x7bc
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 8014486:	4619      	mov	r1, r3
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 801448e:	f103 34ff 	add.w	r4, r3, #4294967295
 8014492:	f641 3230 	movw	r2, #6960	; 0x1b30
 8014496:	f6c0 0203 	movt	r2, #2051	; 0x803
 801449a:	460b      	mov	r3, r1
 801449c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80144a0:	185b      	adds	r3, r3, r1
 80144a2:	191b      	adds	r3, r3, r4
 80144a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144a8:	b21b      	sxth	r3, r3
 80144aa:	fb03 f200 	mul.w	r2, r3, r0
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	611a      	str	r2, [r3, #16]
		mp3FrameInfo->layer = mp3DecInfo->layer;
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	; 0x7d0
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	615a      	str	r2, [r3, #20]
		mp3FrameInfo->version = mp3DecInfo->version;
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 80144c2:	461a      	mov	r2, r3
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	619a      	str	r2, [r3, #24]
	}
}
 80144c8:	f107 0710 	add.w	r7, r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bc90      	pop	{r4, r7}
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop

080144d4 <MP3GetNextFrameInfo>:
 * Outputs:     filled-in MP3FrameInfo struct
 *
 * Return:      error code, defined in mp3dec.h (0 means no error, < 0 means error)
 **************************************************************************************/
int MP3GetNextFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo, unsigned char *buf)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b086      	sub	sp, #24
 80144d8:	af00      	add	r7, sp, #0
 80144da:	60f8      	str	r0, [r7, #12]
 80144dc:	60b9      	str	r1, [r7, #8]
 80144de:	607a      	str	r2, [r7, #4]
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	617b      	str	r3, [r7, #20]

	if (!mp3DecInfo)
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d102      	bne.n	80144f0 <MP3GetNextFrameInfo+0x1c>
		return ERR_MP3_NULL_POINTER;
 80144ea:	f06f 0304 	mvn.w	r3, #4
 80144ee:	e015      	b.n	801451c <MP3GetNextFrameInfo+0x48>

	if (UnpackFrameHeader(mp3DecInfo, buf) == -1 || mp3DecInfo->layer != 3)
 80144f0:	6978      	ldr	r0, [r7, #20]
 80144f2:	6879      	ldr	r1, [r7, #4]
 80144f4:	f7f7 fd96 	bl	800c024 <xmp3_UnpackFrameHeader>
 80144f8:	4603      	mov	r3, r0
 80144fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144fe:	d004      	beq.n	801450a <MP3GetNextFrameInfo+0x36>
 8014500:	697b      	ldr	r3, [r7, #20]
 8014502:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8014506:	2b03      	cmp	r3, #3
 8014508:	d002      	beq.n	8014510 <MP3GetNextFrameInfo+0x3c>
		return ERR_MP3_INVALID_FRAMEHEADER;
 801450a:	f06f 0305 	mvn.w	r3, #5
 801450e:	e005      	b.n	801451c <MP3GetNextFrameInfo+0x48>

	MP3GetLastFrameInfo(mp3DecInfo, mp3FrameInfo);
 8014510:	6978      	ldr	r0, [r7, #20]
 8014512:	68b9      	ldr	r1, [r7, #8]
 8014514:	f7ff ff72 	bl	80143fc <MP3GetLastFrameInfo>

	return ERR_MP3_NONE;
 8014518:	f04f 0300 	mov.w	r3, #0
}
 801451c:	4618      	mov	r0, r3
 801451e:	f107 0718 	add.w	r7, r7, #24
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop

08014528 <MP3ClearBadFrame>:
 * Outputs:     zeroed out pcm buffer
 *
 * Return:      none
 **************************************************************************************/
static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, short *outbuf)
{
 8014528:	b480      	push	{r7}
 801452a:	b085      	sub	sp, #20
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
 8014530:	6039      	str	r1, [r7, #0]
	int i;

	if (!mp3DecInfo)
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d020      	beq.n	801457a <MP3ClearBadFrame+0x52>
		return;

	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8014538:	f04f 0300 	mov.w	r3, #0
 801453c:	60fb      	str	r3, [r7, #12]
 801453e:	e00b      	b.n	8014558 <MP3ClearBadFrame+0x30>
		outbuf[i] = 0;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014546:	683a      	ldr	r2, [r7, #0]
 8014548:	18d3      	adds	r3, r2, r3
 801454a:	f04f 0200 	mov.w	r2, #0
 801454e:	801a      	strh	r2, [r3, #0]
	int i;

	if (!mp3DecInfo)
		return;

	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	f103 0301 	add.w	r3, r3, #1
 8014556:	60fb      	str	r3, [r7, #12]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 801455e:	687a      	ldr	r2, [r7, #4]
 8014560:	f8d2 27c8 	ldr.w	r2, [r2, #1992]	; 0x7c8
 8014564:	fb02 f303 	mul.w	r3, r2, r3
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	f8d2 27bc 	ldr.w	r2, [r2, #1980]	; 0x7bc
 801456e:	fb02 f203 	mul.w	r2, r2, r3
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	429a      	cmp	r2, r3
 8014576:	dce3      	bgt.n	8014540 <MP3ClearBadFrame+0x18>
 8014578:	e000      	b.n	801457c <MP3ClearBadFrame+0x54>
static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, short *outbuf)
{
	int i;

	if (!mp3DecInfo)
		return;
 801457a:	bf00      	nop

	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
		outbuf[i] = 0;
}
 801457c:	f107 0714 	add.w	r7, r7, #20
 8014580:	46bd      	mov	sp, r7
 8014582:	bc80      	pop	{r7}
 8014584:	4770      	bx	lr
 8014586:	bf00      	nop

08014588 <MP3Decode>:
 *
 * Notes:       switching useSize on and off between frames in the same stream 
 *                is not supported (bit reservoir is not maintained if useSize on)
 **************************************************************************************/
int MP3Decode(HMP3Decoder hMP3Decoder, unsigned char **inbuf, int *bytesLeft, short *outbuf, int useSize)
{
 8014588:	b590      	push	{r4, r7, lr}
 801458a:	b095      	sub	sp, #84	; 0x54
 801458c:	af02      	add	r7, sp, #8
 801458e:	60f8      	str	r0, [r7, #12]
 8014590:	60b9      	str	r1, [r7, #8]
 8014592:	607a      	str	r2, [r7, #4]
 8014594:	603b      	str	r3, [r7, #0]
	int offset, bitOffset, mainBits, gr, ch, fhBytes, siBytes, freeFrameBytes;
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	637b      	str	r3, [r7, #52]	; 0x34

	if (!mp3DecInfo)
 801459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801459c:	2b00      	cmp	r3, #0
 801459e:	d102      	bne.n	80145a6 <MP3Decode+0x1e>
		return ERR_MP3_NULL_POINTER;
 80145a0:	f06f 0304 	mvn.w	r3, #4
 80145a4:	e22a      	b.n	80149fc <MP3Decode+0x474>

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145ac:	4619      	mov	r1, r3
 80145ae:	f7f7 fd39 	bl	800c024 <xmp3_UnpackFrameHeader>
 80145b2:	4603      	mov	r3, r0
 80145b4:	633b      	str	r3, [r7, #48]	; 0x30
	if (fhBytes < 0)	
 80145b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	da02      	bge.n	80145c2 <MP3Decode+0x3a>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 80145bc:	f06f 0305 	mvn.w	r3, #5
 80145c0:	e21c      	b.n	80149fc <MP3Decode+0x474>
	*inbuf += fhBytes;
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	681a      	ldr	r2, [r3, #0]
 80145c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c8:	18d2      	adds	r2, r2, r3
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	601a      	str	r2, [r3, #0]
	
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 80145ce:	68bb      	ldr	r3, [r7, #8]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145d4:	4619      	mov	r1, r3
 80145d6:	f7f7 fedb 	bl	800c390 <xmp3_UnpackSideInfo>
 80145da:	4603      	mov	r3, r0
 80145dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (siBytes < 0) {
 80145de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	da06      	bge.n	80145f2 <MP3Decode+0x6a>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
 80145e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145e6:	6839      	ldr	r1, [r7, #0]
 80145e8:	f7ff ff9e 	bl	8014528 <MP3ClearBadFrame>
		return ERR_MP3_INVALID_SIDEINFO;
 80145ec:	f06f 0306 	mvn.w	r3, #6
 80145f0:	e204      	b.n	80149fc <MP3Decode+0x474>
	}
	*inbuf += siBytes;
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	681a      	ldr	r2, [r3, #0]
 80145f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f8:	18d2      	adds	r2, r2, r3
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	601a      	str	r2, [r3, #0]
	*bytesLeft -= (fhBytes + siBytes);
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681a      	ldr	r2, [r3, #0]
 8014602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014606:	18cb      	adds	r3, r1, r3
 8014608:	1ad2      	subs	r2, r2, r3
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	601a      	str	r2, [r3, #0]
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 801460e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014610:	f8d3 37b8 	ldr.w	r3, [r3, #1976]	; 0x7b8
 8014614:	2b00      	cmp	r3, #0
 8014616:	d004      	beq.n	8014622 <MP3Decode+0x9a>
 8014618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801461a:	f8d3 37b0 	ldr.w	r3, [r3, #1968]	; 0x7b0
 801461e:	2b00      	cmp	r3, #0
 8014620:	d052      	beq.n	80146c8 <MP3Decode+0x140>
		if (!mp3DecInfo->freeBitrateFlag) {
 8014622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014624:	f8d3 37b0 	ldr.w	r3, [r3, #1968]	; 0x7b0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d142      	bne.n	80146b2 <MP3Decode+0x12a>
			/* first time through, need to scan for next sync word and figure out frame size */
			mp3DecInfo->freeBitrateFlag = 1;
 801462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801462e:	f04f 0201 	mov.w	r2, #1
 8014632:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	6819      	ldr	r1, [r3, #0]
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014640:	f1c3 0000 	rsb	r0, r3, #0
 8014644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014646:	1ac3      	subs	r3, r0, r3
 8014648:	18d2      	adds	r2, r2, r3
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4608      	mov	r0, r1
 8014650:	4611      	mov	r1, r2
 8014652:	461a      	mov	r2, r3
 8014654:	f7ff fe72 	bl	801433c <MP3FindFreeSync>
 8014658:	4602      	mov	r2, r0
 801465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801465c:	f8c3 27b4 	str.w	r2, [r3, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 8014660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014662:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	; 0x7b4
 8014666:	2b00      	cmp	r3, #0
 8014668:	da06      	bge.n	8014678 <MP3Decode+0xf0>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 801466a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801466c:	6839      	ldr	r1, [r7, #0]
 801466e:	f7ff ff5b 	bl	8014528 <MP3ClearBadFrame>
				return ERR_MP3_FREE_BITRATE_SYNC;
 8014672:	f06f 0302 	mvn.w	r3, #2
 8014676:	e1c1      	b.n	80149fc <MP3Decode+0x474>
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 8014678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801467a:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
 801467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014680:	18d2      	adds	r2, r2, r3
 8014682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014684:	18d3      	adds	r3, r2, r3
 8014686:	62bb      	str	r3, [r7, #40]	; 0x28
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 8014688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801468a:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 801468e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014690:	fb02 f303 	mul.w	r3, r2, r3
 8014694:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8014698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801469a:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 801469e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80146a0:	f8d1 17c8 	ldr.w	r1, [r1, #1992]	; 0x7c8
 80146a4:	fb01 f303 	mul.w	r3, r1, r3
 80146a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80146ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ae:	f8c3 27b8 	str.w	r2, [r3, #1976]	; 0x7b8
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 80146b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146b4:	f8d3 47b4 	ldr.w	r4, [r3, #1972]	; 0x7b4
 80146b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80146ba:	f7f7 fc95 	bl	800bfe8 <xmp3_CheckPadBit>
 80146be:	4603      	mov	r3, r0
 80146c0:	18e2      	adds	r2, r4, r3
 80146c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146c4:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
	 *  - calling function assembles "self-contained" MP3 frames by shifting any main_data 
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
 80146c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d02f      	beq.n	801472e <MP3Decode+0x1a6>
		mp3DecInfo->nSlots = *bytesLeft;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681a      	ldr	r2, [r3, #0]
 80146d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146d4:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 80146d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146da:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d104      	bne.n	80146ec <MP3Decode+0x164>
 80146e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146e4:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	dc06      	bgt.n	80146fa <MP3Decode+0x172>
			/* error - non self-contained frame, or missing frame (size <= 0), could do loss concealment here */
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 80146ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80146ee:	6839      	ldr	r1, [r7, #0]
 80146f0:	f7ff ff1a 	bl	8014528 <MP3ClearBadFrame>
			return ERR_MP3_INVALID_FRAMEHEADER;
 80146f4:	f06f 0305 	mvn.w	r3, #5
 80146f8:	e180      	b.n	80149fc <MP3Decode+0x474>
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 80146fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146fc:	f8d3 27cc 	ldr.w	r2, [r3, #1996]	; 0x7cc
 8014700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014702:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
		mainPtr = *inbuf;
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	63bb      	str	r3, [r7, #56]	; 0x38
		*inbuf += mp3DecInfo->nSlots;
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	681a      	ldr	r2, [r3, #0]
 8014710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014712:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8014716:	18d2      	adds	r2, r2, r3
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	601a      	str	r2, [r3, #0]
		*bytesLeft -= (mp3DecInfo->nSlots);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681a      	ldr	r2, [r3, #0]
 8014720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014722:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8014726:	1ad2      	subs	r2, r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	601a      	str	r2, [r3, #0]
 801472c:	e08e      	b.n	801484c <MP3Decode+0x2c4>
	} else {
		/* out of data - assume last or truncated frame */
		if (mp3DecInfo->nSlots > *bytesLeft) {
 801472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014730:	f8d3 27cc 	ldr.w	r2, [r3, #1996]	; 0x7cc
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	429a      	cmp	r2, r3
 801473a:	dd06      	ble.n	801474a <MP3Decode+0x1c2>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 801473c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801473e:	6839      	ldr	r1, [r7, #0]
 8014740:	f7ff fef2 	bl	8014528 <MP3ClearBadFrame>
			return ERR_MP3_INDATA_UNDERFLOW;	
 8014744:	f04f 33ff 	mov.w	r3, #4294967295
 8014748:	e158      	b.n	80149fc <MP3Decode+0x474>
		}
		/* fill main data buffer with enough new data for this frame */
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 801474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801474c:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	; 0x7dc
 8014750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014752:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8014756:	429a      	cmp	r2, r3
 8014758:	db46      	blt.n	80147e8 <MP3Decode+0x260>
			/* adequate "old" main data available (i.e. bit reservoir) */
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 801475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801475c:	f103 011c 	add.w	r1, r3, #28
 8014760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014762:	f103 021c 	add.w	r2, r3, #28
 8014766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014768:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 801476c:	4618      	mov	r0, r3
 801476e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014770:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8014774:	1ac3      	subs	r3, r0, r3
 8014776:	18d2      	adds	r2, r2, r3
 8014778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801477a:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 801477e:	4608      	mov	r0, r1
 8014780:	4611      	mov	r1, r2
 8014782:	461a      	mov	r2, r3
 8014784:	f011 fb3c 	bl	8025e00 <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 8014788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801478a:	f103 021c 	add.w	r2, r3, #28
 801478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014790:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8014794:	18d1      	adds	r1, r2, r3
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801479c:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 80147a0:	4608      	mov	r0, r1
 80147a2:	4611      	mov	r1, r2
 80147a4:	461a      	mov	r2, r3
 80147a6:	f011 fae9 	bl	8025d7c <memcpy>

			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 80147aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147ac:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	; 0x7d8
 80147b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147b2:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 80147b6:	18d2      	adds	r2, r2, r3
 80147b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147ba:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147c4:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 80147c8:	18d2      	adds	r2, r2, r3
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	601a      	str	r2, [r3, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681a      	ldr	r2, [r3, #0]
 80147d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147d4:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 80147d8:	1ad2      	subs	r2, r2, r3
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	601a      	str	r2, [r3, #0]
			mainPtr = mp3DecInfo->mainBuf;
 80147de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147e0:	f103 031c 	add.w	r3, r3, #28
 80147e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80147e6:	e031      	b.n	801484c <MP3Decode+0x2c4>
		} else {
			/* not enough data in bit reservoir from previous frames (perhaps starting in middle of file) */
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 80147e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147ea:	f103 021c 	add.w	r2, r3, #28
 80147ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147f0:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 80147f4:	18d1      	adds	r1, r2, r3
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	681a      	ldr	r2, [r3, #0]
 80147fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147fc:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8014800:	4608      	mov	r0, r1
 8014802:	4611      	mov	r1, r2
 8014804:	461a      	mov	r2, r3
 8014806:	f011 fab9 	bl	8025d7c <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 801480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801480c:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	; 0x7dc
 8014810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014812:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8014816:	18d2      	adds	r2, r2, r3
 8014818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801481a:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	681a      	ldr	r2, [r3, #0]
 8014822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014824:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8014828:	18d2      	adds	r2, r2, r3
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	601a      	str	r2, [r3, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681a      	ldr	r2, [r3, #0]
 8014832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014834:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8014838:	1ad2      	subs	r2, r2, r3
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	601a      	str	r2, [r3, #0]
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 801483e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014840:	6839      	ldr	r1, [r7, #0]
 8014842:	f7ff fe71 	bl	8014528 <MP3ClearBadFrame>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 8014846:	f06f 0301 	mvn.w	r3, #1
 801484a:	e0d7      	b.n	80149fc <MP3Decode+0x474>
		}
	}
	bitOffset = 0;
 801484c:	f04f 0300 	mov.w	r3, #0
 8014850:	617b      	str	r3, [r7, #20]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 8014852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014854:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 8014858:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801485c:	647b      	str	r3, [r7, #68]	; 0x44

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 801485e:	f04f 0300 	mov.w	r3, #0
 8014862:	643b      	str	r3, [r7, #64]	; 0x40
 8014864:	e0c1      	b.n	80149ea <MP3Decode+0x462>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8014866:	f04f 0300 	mov.w	r3, #0
 801486a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801486c:	e06b      	b.n	8014946 <MP3Decode+0x3be>
			/* unpack scale factors and compute size of scale factor block */
			prevBitOffset = bitOffset;
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	627b      	str	r3, [r7, #36]	; 0x24
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 8014872:	f107 0314 	add.w	r3, r7, #20
 8014876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014878:	9200      	str	r2, [sp, #0]
 801487a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801487c:	9201      	str	r2, [sp, #4]
 801487e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014882:	461a      	mov	r2, r3
 8014884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014886:	f7fe fd71 	bl	801336c <xmp3_UnpackScaleFactors>
 801488a:	4603      	mov	r3, r0
 801488c:	623b      	str	r3, [r7, #32]

			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 801488e:	6a3b      	ldr	r3, [r7, #32]
 8014890:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8014894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014896:	1ad2      	subs	r2, r2, r3
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	18d3      	adds	r3, r2, r3
 801489c:	61fb      	str	r3, [r7, #28]
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 801489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80148a2:	ea4f 0142 	mov.w	r1, r2, lsl #1
 80148a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148a8:	188a      	adds	r2, r1, r2
 80148aa:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 80148ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80148b2:	69fb      	ldr	r3, [r7, #28]
 80148b4:	1ad3      	subs	r3, r2, r3
 80148b6:	61bb      	str	r3, [r7, #24]
			mainPtr += offset;
 80148b8:	6a3b      	ldr	r3, [r7, #32]
 80148ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148bc:	18d3      	adds	r3, r2, r3
 80148be:	63bb      	str	r3, [r7, #56]	; 0x38
			mainBits -= sfBlockBits;
 80148c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80148c2:	69fb      	ldr	r3, [r7, #28]
 80148c4:	1ad3      	subs	r3, r2, r3
 80148c6:	647b      	str	r3, [r7, #68]	; 0x44

			if (offset < 0 || mainBits < huffBlockBits) {
 80148c8:	6a3b      	ldr	r3, [r7, #32]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	db03      	blt.n	80148d6 <MP3Decode+0x34e>
 80148ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80148d0:	69bb      	ldr	r3, [r7, #24]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	da06      	bge.n	80148e4 <MP3Decode+0x35c>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 80148d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80148d8:	6839      	ldr	r1, [r7, #0]
 80148da:	f7ff fe25 	bl	8014528 <MP3ClearBadFrame>
				return ERR_MP3_INVALID_SCALEFACT;
 80148de:	f06f 0307 	mvn.w	r3, #7
 80148e2:	e08b      	b.n	80149fc <MP3Decode+0x474>
			}

			/* decode Huffman code words */
			prevBitOffset = bitOffset;
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	627b      	str	r3, [r7, #36]	; 0x24
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 80148e8:	f107 0314 	add.w	r3, r7, #20
 80148ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80148ee:	9200      	str	r2, [sp, #0]
 80148f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148f2:	9201      	str	r2, [sp, #4]
 80148f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80148f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80148f8:	461a      	mov	r2, r3
 80148fa:	69bb      	ldr	r3, [r7, #24]
 80148fc:	f7fa fa76 	bl	800edec <xmp3_DecodeHuffman>
 8014900:	4603      	mov	r3, r0
 8014902:	623b      	str	r3, [r7, #32]
			if (offset < 0) {
 8014904:	6a3b      	ldr	r3, [r7, #32]
 8014906:	2b00      	cmp	r3, #0
 8014908:	da06      	bge.n	8014918 <MP3Decode+0x390>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 801490a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801490c:	6839      	ldr	r1, [r7, #0]
 801490e:	f7ff fe0b 	bl	8014528 <MP3ClearBadFrame>
				return ERR_MP3_INVALID_HUFFCODES;
 8014912:	f06f 0308 	mvn.w	r3, #8
 8014916:	e071      	b.n	80149fc <MP3Decode+0x474>
			}

			mainPtr += offset;
 8014918:	6a3b      	ldr	r3, [r7, #32]
 801491a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801491c:	18d3      	adds	r3, r2, r3
 801491e:	63bb      	str	r3, [r7, #56]	; 0x38
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 8014920:	6a3a      	ldr	r2, [r7, #32]
 8014922:	4613      	mov	r3, r2
 8014924:	ea4f 7343 	mov.w	r3, r3, lsl #29
 8014928:	1a9b      	subs	r3, r3, r2
 801492a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801492e:	461a      	mov	r2, r3
 8014930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014932:	18d2      	adds	r2, r2, r3
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	1ad3      	subs	r3, r2, r3
 8014938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801493a:	18d3      	adds	r3, r2, r3
 801493c:	647b      	str	r3, [r7, #68]	; 0x44
	bitOffset = 0;
	mainBits = mp3DecInfo->mainDataBytes * 8;

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 801493e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014940:	f103 0301 	add.w	r3, r3, #1
 8014944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014948:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 801494c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801494e:	429a      	cmp	r2, r3
 8014950:	dc8d      	bgt.n	801486e <MP3Decode+0x2e6>

			mainPtr += offset;
			mainBits -= (8*offset - prevBitOffset + bitOffset);
		}
		/* dequantize coefficients, decode stereo, reorder short blocks */
		if (Dequantize(mp3DecInfo, gr) < 0) {
 8014952:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014954:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014956:	f7f9 f825 	bl	800d9a4 <xmp3_Dequantize>
 801495a:	4603      	mov	r3, r0
 801495c:	2b00      	cmp	r3, #0
 801495e:	da06      	bge.n	801496e <MP3Decode+0x3e6>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8014960:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014962:	6839      	ldr	r1, [r7, #0]
 8014964:	f7ff fde0 	bl	8014528 <MP3ClearBadFrame>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 8014968:	f06f 0309 	mvn.w	r3, #9
 801496c:	e046      	b.n	80149fc <MP3Decode+0x474>
		}

		/* alias reduction, inverse MDCT, overlap-add, frequency inversion */
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 801496e:	f04f 0300 	mov.w	r3, #0
 8014972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014974:	e012      	b.n	801499c <MP3Decode+0x414>
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 8014976:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801497a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801497c:	f7fc fa2c 	bl	8010dd8 <xmp3_IMDCT>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	da06      	bge.n	8014994 <MP3Decode+0x40c>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8014986:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014988:	6839      	ldr	r1, [r7, #0]
 801498a:	f7ff fdcd 	bl	8014528 <MP3ClearBadFrame>
				return ERR_MP3_INVALID_IMDCT;			
 801498e:	f06f 030a 	mvn.w	r3, #10
 8014992:	e033      	b.n	80149fc <MP3Decode+0x474>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_DEQUANTIZE;			
		}

		/* alias reduction, inverse MDCT, overlap-add, frequency inversion */
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8014994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014996:	f103 0301 	add.w	r3, r3, #1
 801499a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801499e:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 80149a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149a4:	429a      	cmp	r2, r3
 80149a6:	dce6      	bgt.n	8014976 <MP3Decode+0x3ee>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_INVALID_IMDCT;			
			}

		/* subband transform - if stereo, interleaves pcm LRLRLR */
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 80149a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149aa:	f8d3 37c8 	ldr.w	r3, [r3, #1992]	; 0x7c8
 80149ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80149b0:	fb02 f303 	mul.w	r3, r2, r3
 80149b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80149b6:	f8d2 27bc 	ldr.w	r2, [r2, #1980]	; 0x7bc
 80149ba:	fb02 f303 	mul.w	r3, r2, r3
 80149be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	18d3      	adds	r3, r2, r3
 80149c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80149c8:	4619      	mov	r1, r3
 80149ca:	f7ff fb83 	bl	80140d4 <xmp3_Subband>
 80149ce:	4603      	mov	r3, r0
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	da06      	bge.n	80149e2 <MP3Decode+0x45a>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 80149d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80149d6:	6839      	ldr	r1, [r7, #0]
 80149d8:	f7ff fda6 	bl	8014528 <MP3ClearBadFrame>
			return ERR_MP3_INVALID_SUBBAND;			
 80149dc:	f06f 030b 	mvn.w	r3, #11
 80149e0:	e00c      	b.n	80149fc <MP3Decode+0x474>
	}
	bitOffset = 0;
	mainBits = mp3DecInfo->mainDataBytes * 8;

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 80149e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149e4:	f103 0301 	add.w	r3, r3, #1
 80149e8:	643b      	str	r3, [r7, #64]	; 0x40
 80149ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ec:	f8d3 27c4 	ldr.w	r2, [r3, #1988]	; 0x7c4
 80149f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149f2:	429a      	cmp	r2, r3
 80149f4:	f73f af37 	bgt.w	8014866 <MP3Decode+0x2de>
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_SUBBAND;			
		}
	}
	return ERR_MP3_NONE;
 80149f8:	f04f 0300 	mov.w	r3, #0
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	f107 074c 	add.w	r7, r7, #76	; 0x4c
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd90      	pop	{r4, r7, pc}
 8014a06:	bf00      	nop

08014a08 <_ZN11CGraphicLCDC1Ev>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

CGraphicLCD::CGraphicLCD() {
 8014a08:	b480      	push	{r7}
 8014a0a:	b083      	sub	sp, #12
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	4a06      	ldr	r2, [pc, #24]	; (8014a2c <_ZN11CGraphicLCDC1Ev+0x24>)
 8014a14:	601a      	str	r2, [r3, #0]
	bInverse=false;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	f04f 0200 	mov.w	r2, #0
 8014a1c:	711a      	strb	r2, [r3, #4]
}
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	4618      	mov	r0, r3
 8014a22:	f107 070c 	add.w	r7, r7, #12
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bc80      	pop	{r7}
 8014a2a:	4770      	bx	lr
 8014a2c:	08031f08 	.word	0x08031f08

08014a30 <_ZN11CGraphicLCDC1Eb>:

CGraphicLCD::CGraphicLCD(bool inverse) {
 8014a30:	b480      	push	{r7}
 8014a32:	b083      	sub	sp, #12
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	460b      	mov	r3, r1
 8014a3a:	70fb      	strb	r3, [r7, #3]
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	4a06      	ldr	r2, [pc, #24]	; (8014a58 <_ZN11CGraphicLCDC1Eb+0x28>)
 8014a40:	601a      	str	r2, [r3, #0]
	bInverse=inverse;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	78fa      	ldrb	r2, [r7, #3]
 8014a46:	711a      	strb	r2, [r3, #4]
}
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f107 070c 	add.w	r7, r7, #12
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bc80      	pop	{r7}
 8014a54:	4770      	bx	lr
 8014a56:	bf00      	nop
 8014a58:	08031f08 	.word	0x08031f08

08014a5c <_ZN11CGraphicLCDD1Ev>:

CGraphicLCD::~CGraphicLCD() {
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b082      	sub	sp, #8
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	4a09      	ldr	r2, [pc, #36]	; (8014a8c <_ZN11CGraphicLCDD1Ev+0x30>)
 8014a68:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8014a6a:	f04f 0300 	mov.w	r3, #0
 8014a6e:	f003 0301 	and.w	r3, r3, #1
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d002      	beq.n	8014a7e <_ZN11CGraphicLCDD1Ev+0x22>
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f017 fe39 	bl	802c6f0 <_ZdlPv>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	4618      	mov	r0, r3
 8014a82:	f107 0708 	add.w	r7, r7, #8
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}
 8014a8a:	bf00      	nop
 8014a8c:	08031f08 	.word	0x08031f08

08014a90 <_ZN11CGraphicLCDD0Ev>:

CGraphicLCD::CGraphicLCD(bool inverse) {
	bInverse=inverse;
}

CGraphicLCD::~CGraphicLCD() {
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b082      	sub	sp, #8
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7ff ffdf 	bl	8014a5c <_ZN11CGraphicLCDD1Ev>
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f017 fe26 	bl	802c6f0 <_ZdlPv>
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f107 0708 	add.w	r7, r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <_ZN11CGraphicLCD7InverseEv>:
/**
  * @brief gives inverted draw status
  * @param  None
  * @retval true on inverse mode
  */
bool CGraphicLCD::Inverse(){
 8014ab0:	b480      	push	{r7}
 8014ab2:	b083      	sub	sp, #12
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
	return bInverse;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	791b      	ldrb	r3, [r3, #4]
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	f107 070c 	add.w	r7, r7, #12
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bc80      	pop	{r7}
 8014ac6:	4770      	bx	lr

08014ac8 <_ZN11CGraphicLCD7InverseEb>:
/**
  * @brief  sets inverted draw mode
  * @param  ture for inverted draw mode
  * @retval None
  */
void CGraphicLCD::Inverse(bool inverse){
 8014ac8:	b480      	push	{r7}
 8014aca:	b083      	sub	sp, #12
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	70fb      	strb	r3, [r7, #3]
	bInverse = inverse;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	78fa      	ldrb	r2, [r7, #3]
 8014ad8:	711a      	strb	r2, [r3, #4]
}
 8014ada:	f107 070c 	add.w	r7, r7, #12
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bc80      	pop	{r7}
 8014ae2:	4770      	bx	lr

08014ae4 <_ZN13CT6963CDriverC1Ev>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CT6963CDriver::CT6963CDriver() {
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7ff ff8a 	bl	8014a08 <_ZN11CGraphicLCDC1Ev>
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	4a04      	ldr	r2, [pc, #16]	; (8014b08 <_ZN13CT6963CDriverC1Ev+0x24>)
 8014af8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f107 0708 	add.w	r7, r7, #8
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	08031f40 	.word	0x08031f40

08014b0c <_ZN13CT6963CDriverD1Ev>:

CT6963CDriver::~CT6963CDriver() {
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	4a0a      	ldr	r2, [pc, #40]	; (8014b40 <_ZN13CT6963CDriverD1Ev+0x34>)
 8014b18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f7ff ff9e 	bl	8014a5c <_ZN11CGraphicLCDD1Ev>
 8014b20:	f04f 0300 	mov.w	r3, #0
 8014b24:	f003 0301 	and.w	r3, r3, #1
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d002      	beq.n	8014b34 <_ZN13CT6963CDriverD1Ev+0x28>
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f017 fdde 	bl	802c6f0 <_ZdlPv>
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	4618      	mov	r0, r3
 8014b38:	f107 0708 	add.w	r7, r7, #8
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd80      	pop	{r7, pc}
 8014b40:	08031f40 	.word	0x08031f40

08014b44 <_ZN13CT6963CDriverD0Ev>:
CT6963CDriver::CT6963CDriver() {
	// TODO Auto-generated constructor stub

}

CT6963CDriver::~CT6963CDriver() {
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f7ff ffdd 	bl	8014b0c <_ZN13CT6963CDriverD1Ev>
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f017 fdcc 	bl	802c6f0 <_ZdlPv>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f107 0708 	add.w	r7, r7, #8
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <_ZN13CT6963CDriver4InitEv>:
/**
  * @brief  initializes Display controller
  * @param  None
  * @retval None
  */
void CT6963CDriver::Init(){
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b082      	sub	sp, #8
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]

	HardwareInit();
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	4798      	blx	r3

	Reset();
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	4798      	blx	r3

	// Graphic home address
	WriteData(GLCD_GRAPHIC_HOME & 0xFF);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f04f 01e0 	mov.w	r1, #224	; 0xe0
 8014b98:	4798      	blx	r3
	WriteData(GLCD_GRAPHIC_HOME >> 8);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f04f 0101 	mov.w	r1, #1
 8014baa:	4798      	blx	r3
	WriteCommand(T6963_SET_GRAPHIC_HOME_ADDRESS);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f04f 0142 	mov.w	r1, #66	; 0x42
 8014bbc:	4798      	blx	r3

	//graphic line length
	WriteData(GLCD_GRAPHIC_AREA);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f04f 011e 	mov.w	r1, #30
 8014bce:	4798      	blx	r3
	WriteData(0x00);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f04f 0100 	mov.w	r1, #0
 8014be0:	4798      	blx	r3
	WriteCommand(T6963_SET_GRAPHIC_AREA);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f04f 0143 	mov.w	r1, #67	; 0x43
 8014bf2:	4798      	blx	r3

	//text home address
	WriteData(GLCD_TEXT_HOME & 0xFF);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f04f 0100 	mov.w	r1, #0
 8014c04:	4798      	blx	r3
	WriteData(GLCD_TEXT_HOME >> 8);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f04f 0100 	mov.w	r1, #0
 8014c16:	4798      	blx	r3
	WriteCommand(T6963_SET_TEXT_HOME_ADDRESS);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f04f 0140 	mov.w	r1, #64	; 0x40
 8014c28:	4798      	blx	r3

	//text line length
	WriteData(GLCD_TEXT_AREA);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f04f 011e 	mov.w	r1, #30
 8014c3a:	4798      	blx	r3
	WriteData(0x00);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f04f 0100 	mov.w	r1, #0
 8014c4c:	4798      	blx	r3
	WriteCommand(T6963_SET_TEXT_AREA);
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f04f 0141 	mov.w	r1, #65	; 0x41
 8014c5e:	4798      	blx	r3

	//write offset register  (no effect)
	WriteData(GLCD_OFFSET_REGISTER);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f04f 0102 	mov.w	r1, #2
 8014c70:	4798      	blx	r3
	WriteData(0x00);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f04f 0100 	mov.w	r1, #0
 8014c82:	4798      	blx	r3
	WriteCommand(T6963_SET_OFFSET_REGISTER);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f04f 0122 	mov.w	r1, #34	; 0x22
 8014c94:	4798      	blx	r3

	// display in XOR Mode
	WriteCommand(T6963_MODE_SET | 1);
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f04f 0181 	mov.w	r1, #129	; 0x81
 8014ca6:	4798      	blx	r3

	//Graphic and Text mode
	WriteCommand(T6963_DISPLAY_MODE  | T6963_TEXT_DISPLAY_ON | T6963_GRAPHIC_DISPLAY_ON );
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f04f 019c 	mov.w	r1, #156	; 0x9c
 8014cb8:	4798      	blx	r3
}
 8014cba:	f107 0708 	add.w	r7, r7, #8
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}
 8014cc2:	bf00      	nop

08014cc4 <_ZN13CT6963CDriver17SetAddressPointerEj>:
/**
  * @brief  set address pointer in T6963C
  * @param  address
  * @retval None
  */
void CT6963CDriver::SetAddressPointer(unsigned int address){
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b082      	sub	sp, #8
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	6039      	str	r1, [r7, #0]
	address += 2; // display offset
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	f103 0302 	add.w	r3, r3, #2
 8014cd4:	603b      	str	r3, [r7, #0]
	WriteData(address & 0xFF);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	683a      	ldr	r2, [r7, #0]
 8014ce2:	b2d2      	uxtb	r2, r2
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	4611      	mov	r1, r2
 8014ce8:	4798      	blx	r3
	WriteData(address >> 8);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	683a      	ldr	r2, [r7, #0]
 8014cf6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8014cfa:	b2d2      	uxtb	r2, r2
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	4611      	mov	r1, r2
 8014d00:	4798      	blx	r3
	WriteCommand(T6963_SET_ADDRESS_POINTER);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f04f 0124 	mov.w	r1, #36	; 0x24
 8014d12:	4798      	blx	r3
}
 8014d14:	f107 0708 	add.w	r7, r7, #8
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}

08014d1c <_ZN13CT6963CDriver8TextGoToEhh>:
  * @brief  sets address pointer to specific text address
  * @param  column and line
  * @retval None
  */
void CT6963CDriver::TextGoTo(unsigned char x, unsigned char y)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b084      	sub	sp, #16
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
 8014d24:	4613      	mov	r3, r2
 8014d26:	460a      	mov	r2, r1
 8014d28:	70fa      	strb	r2, [r7, #3]
 8014d2a:	70bb      	strb	r3, [r7, #2]
	unsigned int address;

	address = GLCD_TEXT_HOME +  x + (GLCD_TEXT_AREA * y);
 8014d2c:	78f9      	ldrb	r1, [r7, #3]
 8014d2e:	78ba      	ldrb	r2, [r7, #2]
 8014d30:	4613      	mov	r3, r2
 8014d32:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8014d36:	1a9b      	subs	r3, r3, r2
 8014d38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014d3c:	18cb      	adds	r3, r1, r3
 8014d3e:	60fb      	str	r3, [r7, #12]
	SetAddressPointer(address);
 8014d40:	6878      	ldr	r0, [r7, #4]
 8014d42:	68f9      	ldr	r1, [r7, #12]
 8014d44:	f7ff ffbe 	bl	8014cc4 <_ZN13CT6963CDriver17SetAddressPointerEj>
}
 8014d48:	f107 0710 	add.w	r7, r7, #16
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <_ZN13CT6963CDriver11GraphicGoToEhh>:
  * @brief  sets address pointer to specific pixel in graphics ram
  * @param  coordinates of the pixel byte
  * @retval None
  */
void CT6963CDriver::GraphicGoTo(unsigned char x, unsigned char y)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b084      	sub	sp, #16
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	4613      	mov	r3, r2
 8014d5a:	460a      	mov	r2, r1
 8014d5c:	70fa      	strb	r2, [r7, #3]
 8014d5e:	70bb      	strb	r3, [r7, #2]
	unsigned int address;
	address = GLCD_GRAPHIC_HOME + ((x) / GLCD_FONT_WIDTH) + (GLCD_GRAPHIC_AREA * y);
 8014d60:	78fb      	ldrb	r3, [r7, #3]
 8014d62:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	4619      	mov	r1, r3
 8014d6a:	78ba      	ldrb	r2, [r7, #2]
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8014d72:	1a9b      	subs	r3, r3, r2
 8014d74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014d78:	18cb      	adds	r3, r1, r3
 8014d7a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8014d7e:	60fb      	str	r3, [r7, #12]
	SetAddressPointer(address);
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	68f9      	ldr	r1, [r7, #12]
 8014d84:	f7ff ff9e 	bl	8014cc4 <_ZN13CT6963CDriver17SetAddressPointerEj>
}
 8014d88:	f107 0710 	add.w	r7, r7, #16
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <_ZN13CT6963CDriver5ClearEv>:
/**
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void CT6963CDriver::Clear(){
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b084      	sub	sp, #16
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
	unsigned int i;
	// Graphics and Text are different mem pools in this Controller
	SetAddressPointer(GLCD_GRAPHIC_HOME);
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8014d9e:	f7ff ff91 	bl	8014cc4 <_ZN13CT6963CDriver17SetAddressPointerEj>

	for(i = 0; i < GLCD_GRAPHIC_SIZE; i++)
 8014da2:	f04f 0300 	mov.w	r3, #0
 8014da6:	60fb      	str	r3, [r7, #12]
 8014da8:	e015      	b.n	8014dd6 <_ZN13CT6963CDriver5ClearEv+0x46>
	{
		if(Inverse())
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7ff fe7f 	bl	8014ab0 <_ZN11CGraphicLCD7InverseEv>
 8014db2:	4603      	mov	r3, r0
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d005      	beq.n	8014dc4 <_ZN13CT6963CDriver5ClearEv+0x34>
			WriteDisplayData(0xFF);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8014dbe:	f000 f835 	bl	8014e2c <_ZN13CT6963CDriver16WriteDisplayDataEh>
 8014dc2:	e004      	b.n	8014dce <_ZN13CT6963CDriver5ClearEv+0x3e>
		else
			WriteDisplayData(0x00);
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f04f 0100 	mov.w	r1, #0
 8014dca:	f000 f82f 	bl	8014e2c <_ZN13CT6963CDriver16WriteDisplayDataEh>
void CT6963CDriver::Clear(){
	unsigned int i;
	// Graphics and Text are different mem pools in this Controller
	SetAddressPointer(GLCD_GRAPHIC_HOME);

	for(i = 0; i < GLCD_GRAPHIC_SIZE; i++)
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	f103 0301 	add.w	r3, r3, #1
 8014dd4:	60fb      	str	r3, [r7, #12]
 8014dd6:	68fa      	ldr	r2, [r7, #12]
 8014dd8:	f640 63ff 	movw	r3, #3839	; 0xeff
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	bf8c      	ite	hi
 8014de0:	2300      	movhi	r3, #0
 8014de2:	2301      	movls	r3, #1
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d1df      	bne.n	8014daa <_ZN13CT6963CDriver5ClearEv+0x1a>
			WriteDisplayData(0xFF);
		else
			WriteDisplayData(0x00);
	}

	SetAddressPointer(GLCD_TEXT_HOME);
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f04f 0100 	mov.w	r1, #0
 8014df0:	f7ff ff68 	bl	8014cc4 <_ZN13CT6963CDriver17SetAddressPointerEj>

	for(i = 0; i < GLCD_TEXT_SIZE; i++)
 8014df4:	f04f 0300 	mov.w	r3, #0
 8014df8:	60fb      	str	r3, [r7, #12]
 8014dfa:	e008      	b.n	8014e0e <_ZN13CT6963CDriver5ClearEv+0x7e>
	{
			WriteDisplayData(0x00);
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	f04f 0100 	mov.w	r1, #0
 8014e02:	f000 f813 	bl	8014e2c <_ZN13CT6963CDriver16WriteDisplayDataEh>
			WriteDisplayData(0x00);
	}

	SetAddressPointer(GLCD_TEXT_HOME);

	for(i = 0; i < GLCD_TEXT_SIZE; i++)
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	f103 0301 	add.w	r3, r3, #1
 8014e0c:	60fb      	str	r3, [r7, #12]
 8014e0e:	68fa      	ldr	r2, [r7, #12]
 8014e10:	f240 13df 	movw	r3, #479	; 0x1df
 8014e14:	429a      	cmp	r2, r3
 8014e16:	bf8c      	ite	hi
 8014e18:	2300      	movhi	r3, #0
 8014e1a:	2301      	movls	r3, #1
 8014e1c:	b2db      	uxtb	r3, r3
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d1ec      	bne.n	8014dfc <_ZN13CT6963CDriver5ClearEv+0x6c>
	{
			WriteDisplayData(0x00);
	}
}
 8014e22:	f107 0710 	add.w	r7, r7, #16
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop

08014e2c <_ZN13CT6963CDriver16WriteDisplayDataEh>:
  * @brief  writes incremental data to display ram
  * @param  data byte
  * @retval None
  */
void CT6963CDriver::WriteDisplayData(unsigned char x)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b082      	sub	sp, #8
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	460b      	mov	r3, r1
 8014e36:	70fb      	strb	r3, [r7, #3]
	WriteData(x);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	78fa      	ldrb	r2, [r7, #3]
 8014e44:	6878      	ldr	r0, [r7, #4]
 8014e46:	4611      	mov	r1, r2
 8014e48:	4798      	blx	r3
	WriteCommand(T6963_DATA_WRITE_AND_INCREMENT);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 8014e5a:	4798      	blx	r3
}
 8014e5c:	f107 0708 	add.w	r7, r7, #8
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}

08014e64 <_ZN13CT6963CDriver9WriteCharEc>:
  * @brief  writes single ASCII char to display
  * @param  ASCII char
  * @retval None
  */
void CT6963CDriver::WriteChar(char charCode)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	460b      	mov	r3, r1
 8014e6e:	70fb      	strb	r3, [r7, #3]
	WriteDisplayData(charCode - 32);
 8014e70:	78fb      	ldrb	r3, [r7, #3]
 8014e72:	f1a3 0320 	sub.w	r3, r3, #32
 8014e76:	b2db      	uxtb	r3, r3
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	f7ff ffd6 	bl	8014e2c <_ZN13CT6963CDriver16WriteDisplayDataEh>
}
 8014e80:	f107 0708 	add.w	r7, r7, #8
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}

08014e88 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj>:
  * 		ground must be cleared
  * @param  null terminated string, font structure, x, y
  * @retval None
  */
void CT6963CDriver::WriteString(const char * str, const tFont &font,unsigned int x, unsigned int y)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b08c      	sub	sp, #48	; 0x30
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	60f8      	str	r0, [r7, #12]
 8014e90:	60b9      	str	r1, [r7, #8]
 8014e92:	607a      	str	r2, [r7, #4]
 8014e94:	603b      	str	r3, [r7, #0]
	unsigned int offset,width;
	unsigned int i,j,map,height,allwidth=0;
 8014e96:	f04f 0300 	mov.w	r3, #0
 8014e9a:	623b      	str	r3, [r7, #32]

	// use internal Character generator
	if(font.glyph_height == 0){
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	685b      	ldr	r3, [r3, #4]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	f040 80aa 	bne.w	8014ffa <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x172>
		TextGoTo(x/GLCD_FONT_WIDTH, y/8);
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014eac:	b2da      	uxtb	r2, r3
 8014eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eb0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	68f8      	ldr	r0, [r7, #12]
 8014eb8:	4611      	mov	r1, r2
 8014eba:	461a      	mov	r2, r3
 8014ebc:	f7ff ff2e 	bl	8014d1c <_ZN13CT6963CDriver8TextGoToEhh>

		while(*str)
 8014ec0:	e009      	b.n	8014ed6 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x4e>
		{
			WriteChar(*str++);
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	68ba      	ldr	r2, [r7, #8]
 8014ec8:	f102 0201 	add.w	r2, r2, #1
 8014ecc:	60ba      	str	r2, [r7, #8]
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	f7ff ffc7 	bl	8014e64 <_ZN13CT6963CDriver9WriteCharEc>

	// use internal Character generator
	if(font.glyph_height == 0){
		TextGoTo(x/GLCD_FONT_WIDTH, y/8);

		while(*str)
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	bf0c      	ite	eq
 8014ede:	2300      	moveq	r3, #0
 8014ee0:	2301      	movne	r3, #1
 8014ee2:	b2db      	uxtb	r3, r3
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d1ec      	bne.n	8014ec2 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x3a>
 8014ee8:	e097      	b.n	801501a <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x192>
	// generate fonts
	else {
		while((map = *str++))
		{
			// get char position in font table
			map = font.mapping_table[map];
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	68da      	ldr	r2, [r3, #12]
 8014eee:	69fb      	ldr	r3, [r7, #28]
 8014ef0:	18d3      	adds	r3, r2, r3
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	61fb      	str	r3, [r7, #28]
			// determine char width
			width = font.glyph_width;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	62fb      	str	r3, [r7, #44]	; 0x2c
			// font has no constant width
			if(width == 0)
 8014efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d105      	bne.n	8014f0e <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x86>
				width = font.width_table[map];
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	691a      	ldr	r2, [r3, #16]
 8014f06:	69fb      	ldr	r3, [r7, #28]
 8014f08:	18d3      	adds	r3, r2, r3
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	62fb      	str	r3, [r7, #44]	; 0x2c

			// char data offset
			offset = font.offset_table[map];
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	695a      	ldr	r2, [r3, #20]
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014f18:	18d3      	adds	r3, r2, r3
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	61bb      	str	r3, [r7, #24]
			// height is ever constant
			height = font.glyph_height;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	617b      	str	r3, [r7, #20]

			//step through all lines of an char
			for(j=0 ; j<height * (((width-1)/8)+1) ; j+=(((width-1)/8)+1)    )
 8014f24:	f04f 0300 	mov.w	r3, #0
 8014f28:	627b      	str	r3, [r7, #36]	; 0x24
 8014f2a:	e050      	b.n	8014fce <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x146>
			{   // step through every single point of a line of the char
				for(i=0 ; i<width  ; i++)
 8014f2c:	f04f 0300 	mov.w	r3, #0
 8014f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f32:	e039      	b.n	8014fa8 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x120>
				{   //  the pixel needs to be set
					if( font.glyph_table[ offset+j+(i/8) ] & (1 << ( 7 - ( i % 8 ) ) ) )
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	689a      	ldr	r2, [r3, #8]
 8014f38:	69b9      	ldr	r1, [r7, #24]
 8014f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3c:	18c9      	adds	r1, r1, r3
 8014f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f40:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014f44:	18cb      	adds	r3, r1, r3
 8014f46:	18d3      	adds	r3, r2, r3
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f4e:	ea6f 0303 	mvn.w	r3, r3
 8014f52:	f003 0307 	and.w	r3, r3, #7
 8014f56:	fa42 f303 	asr.w	r3, r2, r3
 8014f5a:	f003 0301 	and.w	r3, r3, #1
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d01d      	beq.n	8014fa0 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x118>
						SetPixel( x+i+allwidth , y+j/ (((width-1)/8)+1)  );
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	b2da      	uxtb	r2, r3
 8014f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f6a:	b2db      	uxtb	r3, r3
 8014f6c:	18d3      	adds	r3, r2, r3
 8014f6e:	b2da      	uxtb	r2, r3
 8014f70:	6a3b      	ldr	r3, [r7, #32]
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	18d3      	adds	r3, r2, r3
 8014f76:	b2da      	uxtb	r2, r3
 8014f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014f7e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014f82:	f103 0301 	add.w	r3, r3, #1
 8014f86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8014f8c:	b2d9      	uxtb	r1, r3
 8014f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f90:	b2db      	uxtb	r3, r3
 8014f92:	18cb      	adds	r3, r1, r3
 8014f94:	b2db      	uxtb	r3, r3
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	4611      	mov	r1, r2
 8014f9a:	461a      	mov	r2, r3
 8014f9c:	f000 f842 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
			height = font.glyph_height;

			//step through all lines of an char
			for(j=0 ; j<height * (((width-1)/8)+1) ; j+=(((width-1)/8)+1)    )
			{   // step through every single point of a line of the char
				for(i=0 ; i<width  ; i++)
 8014fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa2:	f103 0301 	add.w	r3, r3, #1
 8014fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8014fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fac:	429a      	cmp	r2, r3
 8014fae:	bf2c      	ite	cs
 8014fb0:	2300      	movcs	r3, #0
 8014fb2:	2301      	movcc	r3, #1
 8014fb4:	b2db      	uxtb	r3, r3
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d1bc      	bne.n	8014f34 <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0xac>
			offset = font.offset_table[map];
			// height is ever constant
			height = font.glyph_height;

			//step through all lines of an char
			for(j=0 ; j<height * (((width-1)/8)+1) ; j+=(((width-1)/8)+1)    )
 8014fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fbc:	f103 33ff 	add.w	r3, r3, #4294967295
 8014fc0:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8014fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc6:	18d3      	adds	r3, r2, r3
 8014fc8:	f103 0301 	add.w	r3, r3, #1
 8014fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8014fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fd0:	f103 33ff 	add.w	r3, r3, #4294967295
 8014fd4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014fd8:	f103 0301 	add.w	r3, r3, #1
 8014fdc:	697a      	ldr	r2, [r7, #20]
 8014fde:	fb02 f203 	mul.w	r2, r2, r3
 8014fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	bf94      	ite	ls
 8014fe8:	2300      	movls	r3, #0
 8014fea:	2301      	movhi	r3, #1
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d19c      	bne.n	8014f2c <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0xa4>
					if( font.glyph_table[ offset+j+(i/8) ] & (1 << ( 7 - ( i % 8 ) ) ) )
						SetPixel( x+i+allwidth , y+j/ (((width-1)/8)+1)  );
				}//End i
			}// End j
			//remember string width to set the next char directly net to the previous
			allwidth+=width;
 8014ff2:	6a3a      	ldr	r2, [r7, #32]
 8014ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff6:	18d3      	adds	r3, r2, r3
 8014ff8:	623b      	str	r3, [r7, #32]
		}

	}
	// generate fonts
	else {
		while((map = *str++))
 8014ffa:	68bb      	ldr	r3, [r7, #8]
 8014ffc:	781b      	ldrb	r3, [r3, #0]
 8014ffe:	61fb      	str	r3, [r7, #28]
 8015000:	69fb      	ldr	r3, [r7, #28]
 8015002:	2b00      	cmp	r3, #0
 8015004:	bf0c      	ite	eq
 8015006:	2300      	moveq	r3, #0
 8015008:	2301      	movne	r3, #1
 801500a:	b2db      	uxtb	r3, r3
 801500c:	68ba      	ldr	r2, [r7, #8]
 801500e:	f102 0201 	add.w	r2, r2, #1
 8015012:	60ba      	str	r2, [r7, #8]
 8015014:	2b00      	cmp	r3, #0
 8015016:	f47f af68 	bne.w	8014eea <_ZN13CT6963CDriver11WriteStringEPKcRK5tFontjj+0x62>
			allwidth+=width;
		}

	}

}
 801501a:	f107 0730 	add.w	r7, r7, #48	; 0x30
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}
 8015022:	bf00      	nop

08015024 <_ZN13CT6963CDriver8SetPixelEhh>:
  * @brief  sets a pixel in graphics ram
  * @param  coordinates from upper left corner
  * @retval None
  */
void CT6963CDriver::SetPixel(unsigned char x, unsigned char y)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b084      	sub	sp, #16
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
 801502c:	4613      	mov	r3, r2
 801502e:	460a      	mov	r2, r1
 8015030:	70fa      	strb	r2, [r7, #3]
 8015032:	70bb      	strb	r3, [r7, #2]
	unsigned char tmp;

	// do nothing for pixel out of range
	if(x > (GLCD_PIXELS_PER_LINE-1) || y > (GLCD_NUMBER_OF_LINES-1))
 8015034:	78fb      	ldrb	r3, [r7, #3]
 8015036:	2bef      	cmp	r3, #239	; 0xef
 8015038:	d832      	bhi.n	80150a0 <_ZN13CT6963CDriver8SetPixelEhh+0x7c>
 801503a:	78bb      	ldrb	r3, [r7, #2]
 801503c:	b25b      	sxtb	r3, r3
 801503e:	2b00      	cmp	r3, #0
 8015040:	db2e      	blt.n	80150a0 <_ZN13CT6963CDriver8SetPixelEhh+0x7c>
		return;

	GraphicGoTo(x,y);
 8015042:	78fa      	ldrb	r2, [r7, #3]
 8015044:	78bb      	ldrb	r3, [r7, #2]
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	4611      	mov	r1, r2
 801504a:	461a      	mov	r2, r3
 801504c:	f7ff fe80 	bl	8014d50 <_ZN13CT6963CDriver11GraphicGoToEhh>


	tmp = (GLCD_FONT_WIDTH - 1) - (x % GLCD_FONT_WIDTH);
 8015050:	78fb      	ldrb	r3, [r7, #3]
 8015052:	ea6f 0303 	mvn.w	r3, r3
 8015056:	b2db      	uxtb	r3, r3
 8015058:	f003 0307 	and.w	r3, r3, #7
 801505c:	73fb      	strb	r3, [r7, #15]

	if(Inverse())
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4618      	mov	r0, r3
 8015062:	f7ff fd25 	bl	8014ab0 <_ZN11CGraphicLCD7InverseEv>
 8015066:	4603      	mov	r3, r0
 8015068:	2b00      	cmp	r3, #0
 801506a:	d00c      	beq.n	8015086 <_ZN13CT6963CDriver8SetPixelEhh+0x62>
		WriteCommand(T6963_BIT_RESET | tmp);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	7bfa      	ldrb	r2, [r7, #15]
 8015078:	f062 020f 	orn	r2, r2, #15
 801507c:	b2d2      	uxtb	r2, r2
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	4611      	mov	r1, r2
 8015082:	4798      	blx	r3
 8015084:	e00d      	b.n	80150a2 <_ZN13CT6963CDriver8SetPixelEhh+0x7e>
	else
		WriteCommand(T6963_BIT_SET | tmp);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	7bfa      	ldrb	r2, [r7, #15]
 8015092:	f062 0207 	orn	r2, r2, #7
 8015096:	b2d2      	uxtb	r2, r2
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	4611      	mov	r1, r2
 801509c:	4798      	blx	r3
 801509e:	e000      	b.n	80150a2 <_ZN13CT6963CDriver8SetPixelEhh+0x7e>
{
	unsigned char tmp;

	// do nothing for pixel out of range
	if(x > (GLCD_PIXELS_PER_LINE-1) || y > (GLCD_NUMBER_OF_LINES-1))
		return;
 80150a0:	bf00      	nop

	if(Inverse())
		WriteCommand(T6963_BIT_RESET | tmp);
	else
		WriteCommand(T6963_BIT_SET | tmp);
}
 80150a2:	f107 0710 	add.w	r7, r7, #16
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	bf00      	nop

080150ac <_ZN13CT6963CDriver4LineEjjjj>:
  * @retval None
  *
  * Copyright (c) Radoslaw Kwiecien, 2007r
  * http://en.radzio.dxp.pl/t6963/
  */
void CT6963CDriver::Line(unsigned int x1, unsigned int y1,unsigned int x2, unsigned int y2){
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b08e      	sub	sp, #56	; 0x38
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	60b9      	str	r1, [r7, #8]
 80150b6:	607a      	str	r2, [r7, #4]
 80150b8:	603b      	str	r3, [r7, #0]
	unsigned int CurrentX, CurrentY;
	int Xinc, Yinc,
	Dx, Dy, TwoDx, TwoDy,
	TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (x2-x1);
 80150ba:	683a      	ldr	r2, [r7, #0]
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	1ad3      	subs	r3, r2, r3
 80150c0:	627b      	str	r3, [r7, #36]	; 0x24
	Dy = (y2-y1);
 80150c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	1ad3      	subs	r3, r2, r3
 80150c8:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 80150ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ce:	18d3      	adds	r3, r2, r3
 80150d0:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 80150d2:	6a3a      	ldr	r2, [r7, #32]
 80150d4:	6a3b      	ldr	r3, [r7, #32]
 80150d6:	18d3      	adds	r3, r2, r3
 80150d8:	61bb      	str	r3, [r7, #24]

	CurrentX = x1;
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	637b      	str	r3, [r7, #52]	; 0x34
	CurrentY = y1;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	633b      	str	r3, [r7, #48]	; 0x30

	Xinc = 1;
 80150e2:	f04f 0301 	mov.w	r3, #1
 80150e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	Yinc = 1;
 80150e8:	f04f 0301 	mov.w	r3, #1
 80150ec:	62bb      	str	r3, [r7, #40]	; 0x28

	if(Dx < 0)	// line from right to left
 80150ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	da0a      	bge.n	801510a <_ZN13CT6963CDriver4LineEjjjj+0x5e>
	{
		Xinc = -1;
 80150f4:	f04f 33ff 	mov.w	r3, #4294967295
 80150f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		Dx = -Dx;
 80150fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fc:	f1c3 0300 	rsb	r3, r3, #0
 8015100:	627b      	str	r3, [r7, #36]	; 0x24
		TwoDx = -TwoDx;
 8015102:	69fb      	ldr	r3, [r7, #28]
 8015104:	f1c3 0300 	rsb	r3, r3, #0
 8015108:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) // line from bottom to top
 801510a:	6a3b      	ldr	r3, [r7, #32]
 801510c:	2b00      	cmp	r3, #0
 801510e:	da0a      	bge.n	8015126 <_ZN13CT6963CDriver4LineEjjjj+0x7a>
	{
		Yinc = -1;
 8015110:	f04f 33ff 	mov.w	r3, #4294967295
 8015114:	62bb      	str	r3, [r7, #40]	; 0x28
		Dy = -Dy;
 8015116:	6a3b      	ldr	r3, [r7, #32]
 8015118:	f1c3 0300 	rsb	r3, r3, #0
 801511c:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 801511e:	69bb      	ldr	r3, [r7, #24]
 8015120:	f1c3 0300 	rsb	r3, r3, #0
 8015124:	61bb      	str	r3, [r7, #24]
	}

	SetPixel(x1,y1); // starting point
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	b2da      	uxtb	r2, r3
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	b2db      	uxtb	r3, r3
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	4611      	mov	r1, r2
 8015132:	461a      	mov	r2, r3
 8015134:	f7ff ff76 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>

	if ((Dx != 0) || (Dy != 0)) // line is vertical or horizontal
 8015138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513a:	2b00      	cmp	r3, #0
 801513c:	d102      	bne.n	8015144 <_ZN13CT6963CDriver4LineEjjjj+0x98>
 801513e:	6a3b      	ldr	r3, [r7, #32]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d056      	beq.n	80151f2 <_ZN13CT6963CDriver4LineEjjjj+0x146>
	{

		if (Dy <= Dx) // x is running var
 8015144:	6a3a      	ldr	r2, [r7, #32]
 8015146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015148:	429a      	cmp	r2, r3
 801514a:	dc29      	bgt.n	80151a0 <_ZN13CT6963CDriver4LineEjjjj+0xf4>
		{
			TwoDxAccumulatedError = 0;
 801514c:	f04f 0300 	mov.w	r3, #0
 8015150:	617b      	str	r3, [r7, #20]
			do
			{
				CurrentX += Xinc; // step X
 8015152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015156:	18d3      	adds	r3, r2, r3
 8015158:	637b      	str	r3, [r7, #52]	; 0x34
				TwoDxAccumulatedError += TwoDy;
 801515a:	697a      	ldr	r2, [r7, #20]
 801515c:	69bb      	ldr	r3, [r7, #24]
 801515e:	18d3      	adds	r3, r2, r3
 8015160:	617b      	str	r3, [r7, #20]
				if(TwoDxAccumulatedError > Dx)  // Increase Y
 8015162:	697a      	ldr	r2, [r7, #20]
 8015164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015166:	429a      	cmp	r2, r3
 8015168:	dd07      	ble.n	801517a <_ZN13CT6963CDriver4LineEjjjj+0xce>
				{
					CurrentY += Yinc;
 801516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801516c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801516e:	18d3      	adds	r3, r2, r3
 8015170:	633b      	str	r3, [r7, #48]	; 0x30
					TwoDxAccumulatedError -= TwoDx;
 8015172:	697a      	ldr	r2, [r7, #20]
 8015174:	69fb      	ldr	r3, [r7, #28]
 8015176:	1ad3      	subs	r3, r2, r3
 8015178:	617b      	str	r3, [r7, #20]
				}
				SetPixel(CurrentX,CurrentY);
 801517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801517c:	b2da      	uxtb	r2, r3
 801517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015180:	b2db      	uxtb	r3, r3
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	4611      	mov	r1, r2
 8015186:	461a      	mov	r2, r3
 8015188:	f7ff ff4c 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
	{

		if (Dy <= Dx) // x is running var
		{
			TwoDxAccumulatedError = 0;
			do
 801518c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	429a      	cmp	r2, r3
 8015192:	bf0c      	ite	eq
 8015194:	2300      	moveq	r3, #0
 8015196:	2301      	movne	r3, #1
 8015198:	b2db      	uxtb	r3, r3
 801519a:	2b00      	cmp	r3, #0
 801519c:	d1d9      	bne.n	8015152 <_ZN13CT6963CDriver4LineEjjjj+0xa6>
 801519e:	e028      	b.n	80151f2 <_ZN13CT6963CDriver4LineEjjjj+0x146>
				SetPixel(CurrentX,CurrentY);
			}while (CurrentX != x2); // line finished
		}
		else // y is running var
		{
			TwoDyAccumulatedError = 0;
 80151a0:	f04f 0300 	mov.w	r3, #0
 80151a4:	613b      	str	r3, [r7, #16]
			do
			{
				CurrentY += Yinc;
 80151a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151aa:	18d3      	adds	r3, r2, r3
 80151ac:	633b      	str	r3, [r7, #48]	; 0x30
				TwoDyAccumulatedError += TwoDx;
 80151ae:	693a      	ldr	r2, [r7, #16]
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	18d3      	adds	r3, r2, r3
 80151b4:	613b      	str	r3, [r7, #16]
				if(TwoDyAccumulatedError>Dy)
 80151b6:	693a      	ldr	r2, [r7, #16]
 80151b8:	6a3b      	ldr	r3, [r7, #32]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	dd07      	ble.n	80151ce <_ZN13CT6963CDriver4LineEjjjj+0x122>
				{
					CurrentX += Xinc;
 80151be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80151c2:	18d3      	adds	r3, r2, r3
 80151c4:	637b      	str	r3, [r7, #52]	; 0x34
					TwoDyAccumulatedError -= TwoDy;
 80151c6:	693a      	ldr	r2, [r7, #16]
 80151c8:	69bb      	ldr	r3, [r7, #24]
 80151ca:	1ad3      	subs	r3, r2, r3
 80151cc:	613b      	str	r3, [r7, #16]
				}
				SetPixel(CurrentX,CurrentY);
 80151ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151d0:	b2da      	uxtb	r2, r3
 80151d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	68f8      	ldr	r0, [r7, #12]
 80151d8:	4611      	mov	r1, r2
 80151da:	461a      	mov	r2, r3
 80151dc:	f7ff ff22 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
			}while (CurrentX != x2); // line finished
		}
		else // y is running var
		{
			TwoDyAccumulatedError = 0;
			do
 80151e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151e4:	429a      	cmp	r2, r3
 80151e6:	bf0c      	ite	eq
 80151e8:	2300      	moveq	r3, #0
 80151ea:	2301      	movne	r3, #1
 80151ec:	b2db      	uxtb	r3, r3
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d1d9      	bne.n	80151a6 <_ZN13CT6963CDriver4LineEjjjj+0xfa>
				}
				SetPixel(CurrentX,CurrentY);
			}while (CurrentY != y2); // line finished
		}
	}
}
 80151f2:	f107 0738 	add.w	r7, r7, #56	; 0x38
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop

080151fc <_ZN13CT6963CDriver6WindowEjjjj>:
/**
  * @brief  draw a window with upper left corner at (x,y) and specified width and height, edges round or square
  * @param  x1,y1,width,heigth, edge type enum
  * @retval None
  */
void CT6963CDriver::Window(unsigned int x,unsigned int y,unsigned int width,unsigned int height){
 80151fc:	b5b0      	push	{r4, r5, r7, lr}
 80151fe:	b088      	sub	sp, #32
 8015200:	af02      	add	r7, sp, #8
 8015202:	60f8      	str	r0, [r7, #12]
 8015204:	60b9      	str	r1, [r7, #8]
 8015206:	607a      	str	r2, [r7, #4]
 8015208:	603b      	str	r3, [r7, #0]
	unsigned int i;

	Rectangle(x+3,y,width-4,4,true); // filled top bar
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	f103 030c 	add.w	r3, r3, #12
 8015212:	681c      	ldr	r4, [r3, #0]
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	f103 0203 	add.w	r2, r3, #3
 801521a:	683b      	ldr	r3, [r7, #0]
 801521c:	f1a3 0304 	sub.w	r3, r3, #4
 8015220:	f04f 0104 	mov.w	r1, #4
 8015224:	9100      	str	r1, [sp, #0]
 8015226:	f04f 0101 	mov.w	r1, #1
 801522a:	9101      	str	r1, [sp, #4]
 801522c:	68f8      	ldr	r0, [r7, #12]
 801522e:	4611      	mov	r1, r2
 8015230:	687a      	ldr	r2, [r7, #4]
 8015232:	47a0      	blx	r4
	Line(x,y+4,x,y+height-4);			// left border
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	f103 0304 	add.w	r3, r3, #4
 801523c:	681c      	ldr	r4, [r3, #0]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f103 0304 	add.w	r3, r3, #4
 8015244:	6879      	ldr	r1, [r7, #4]
 8015246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015248:	188a      	adds	r2, r1, r2
 801524a:	f1a2 0204 	sub.w	r2, r2, #4
 801524e:	9200      	str	r2, [sp, #0]
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	68b9      	ldr	r1, [r7, #8]
 8015254:	461a      	mov	r2, r3
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	47a0      	blx	r4
	Line(x+width,y+4,x+width,y+height-4);// right border
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	f103 0304 	add.w	r3, r3, #4
 8015262:	681c      	ldr	r4, [r3, #0]
 8015264:	68ba      	ldr	r2, [r7, #8]
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	18d1      	adds	r1, r2, r3
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f103 0204 	add.w	r2, r3, #4
 8015270:	68b8      	ldr	r0, [r7, #8]
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	18c3      	adds	r3, r0, r3
 8015276:	687d      	ldr	r5, [r7, #4]
 8015278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801527a:	1828      	adds	r0, r5, r0
 801527c:	f1a0 0004 	sub.w	r0, r0, #4
 8015280:	9000      	str	r0, [sp, #0]
 8015282:	68f8      	ldr	r0, [r7, #12]
 8015284:	47a0      	blx	r4
	Line(x+4,y+height,x+width-5,y+height);// bottom border
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	f103 0304 	add.w	r3, r3, #4
 801528e:	681c      	ldr	r4, [r3, #0]
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	f103 0104 	add.w	r1, r3, #4
 8015296:	687a      	ldr	r2, [r7, #4]
 8015298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801529a:	18d2      	adds	r2, r2, r3
 801529c:	68b8      	ldr	r0, [r7, #8]
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	18c3      	adds	r3, r0, r3
 80152a2:	f1a3 0305 	sub.w	r3, r3, #5
 80152a6:	687d      	ldr	r5, [r7, #4]
 80152a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152aa:	1828      	adds	r0, r5, r0
 80152ac:	9000      	str	r0, [sp, #0]
 80152ae:	68f8      	ldr	r0, [r7, #12]
 80152b0:	47a0      	blx	r4

	for(i=1;i<3;i++){
 80152b2:	f04f 0301 	mov.w	r3, #1
 80152b6:	617b      	str	r3, [r7, #20]
 80152b8:	e04b      	b.n	8015352 <_ZN13CT6963CDriver6WindowEjjjj+0x156>
		// upper left
		SetPixel(x+i,y+3);
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	b2da      	uxtb	r2, r3
 80152be:	697b      	ldr	r3, [r7, #20]
 80152c0:	b2db      	uxtb	r3, r3
 80152c2:	18d3      	adds	r3, r2, r3
 80152c4:	b2da      	uxtb	r2, r3
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	b2db      	uxtb	r3, r3
 80152ca:	f103 0303 	add.w	r3, r3, #3
 80152ce:	b2db      	uxtb	r3, r3
 80152d0:	68f8      	ldr	r0, [r7, #12]
 80152d2:	4611      	mov	r1, r2
 80152d4:	461a      	mov	r2, r3
 80152d6:	f7ff fea5 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+i,y+2);
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	b2da      	uxtb	r2, r3
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	b2db      	uxtb	r3, r3
 80152e2:	18d3      	adds	r3, r2, r3
 80152e4:	b2da      	uxtb	r2, r3
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	b2db      	uxtb	r3, r3
 80152ea:	f103 0302 	add.w	r3, r3, #2
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	4611      	mov	r1, r2
 80152f4:	461a      	mov	r2, r3
 80152f6:	f7ff fe95 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>

		// upper right
		SetPixel(x+width-i,y+3);
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	b2da      	uxtb	r2, r3
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	b2db      	uxtb	r3, r3
 8015302:	18d3      	adds	r3, r2, r3
 8015304:	b2da      	uxtb	r2, r3
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	b2db      	uxtb	r3, r3
 801530a:	1ad3      	subs	r3, r2, r3
 801530c:	b2da      	uxtb	r2, r3
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	b2db      	uxtb	r3, r3
 8015312:	f103 0303 	add.w	r3, r3, #3
 8015316:	b2db      	uxtb	r3, r3
 8015318:	68f8      	ldr	r0, [r7, #12]
 801531a:	4611      	mov	r1, r2
 801531c:	461a      	mov	r2, r3
 801531e:	f7ff fe81 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+width-i,y+2);
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	b2da      	uxtb	r2, r3
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	b2db      	uxtb	r3, r3
 801532a:	18d3      	adds	r3, r2, r3
 801532c:	b2da      	uxtb	r2, r3
 801532e:	697b      	ldr	r3, [r7, #20]
 8015330:	b2db      	uxtb	r3, r3
 8015332:	1ad3      	subs	r3, r2, r3
 8015334:	b2da      	uxtb	r2, r3
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	b2db      	uxtb	r3, r3
 801533a:	f103 0302 	add.w	r3, r3, #2
 801533e:	b2db      	uxtb	r3, r3
 8015340:	68f8      	ldr	r0, [r7, #12]
 8015342:	4611      	mov	r1, r2
 8015344:	461a      	mov	r2, r3
 8015346:	f7ff fe6d 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
	Rectangle(x+3,y,width-4,4,true); // filled top bar
	Line(x,y+4,x,y+height-4);			// left border
	Line(x+width,y+4,x+width,y+height-4);// right border
	Line(x+4,y+height,x+width-5,y+height);// bottom border

	for(i=1;i<3;i++){
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	f103 0301 	add.w	r3, r3, #1
 8015350:	617b      	str	r3, [r7, #20]
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	2b02      	cmp	r3, #2
 8015356:	bf8c      	ite	hi
 8015358:	2300      	movhi	r3, #0
 801535a:	2301      	movls	r3, #1
 801535c:	b2db      	uxtb	r3, r3
 801535e:	2b00      	cmp	r3, #0
 8015360:	d1ab      	bne.n	80152ba <_ZN13CT6963CDriver6WindowEjjjj+0xbe>
		SetPixel(x+width-i,y+3);
		SetPixel(x+width-i,y+2);
	}

	// upper left
	SetPixel(x+3,y+1);
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	b2db      	uxtb	r3, r3
 8015366:	f103 0303 	add.w	r3, r3, #3
 801536a:	b2da      	uxtb	r2, r3
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	b2db      	uxtb	r3, r3
 8015370:	f103 0301 	add.w	r3, r3, #1
 8015374:	b2db      	uxtb	r3, r3
 8015376:	68f8      	ldr	r0, [r7, #12]
 8015378:	4611      	mov	r1, r2
 801537a:	461a      	mov	r2, r3
 801537c:	f7ff fe52 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+2,y+1);
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	b2db      	uxtb	r3, r3
 8015384:	f103 0302 	add.w	r3, r3, #2
 8015388:	b2da      	uxtb	r2, r3
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	b2db      	uxtb	r3, r3
 801538e:	f103 0301 	add.w	r3, r3, #1
 8015392:	b2db      	uxtb	r3, r3
 8015394:	68f8      	ldr	r0, [r7, #12]
 8015396:	4611      	mov	r1, r2
 8015398:	461a      	mov	r2, r3
 801539a:	f7ff fe43 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>

	// upper right
	SetPixel(x+width-3,y+1);
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	b2da      	uxtb	r2, r3
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	b2db      	uxtb	r3, r3
 80153a6:	18d3      	adds	r3, r2, r3
 80153a8:	b2db      	uxtb	r3, r3
 80153aa:	f1a3 0303 	sub.w	r3, r3, #3
 80153ae:	b2da      	uxtb	r2, r3
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	f103 0301 	add.w	r3, r3, #1
 80153b8:	b2db      	uxtb	r3, r3
 80153ba:	68f8      	ldr	r0, [r7, #12]
 80153bc:	4611      	mov	r1, r2
 80153be:	461a      	mov	r2, r3
 80153c0:	f7ff fe30 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-2,y+1);
 80153c4:	68bb      	ldr	r3, [r7, #8]
 80153c6:	b2da      	uxtb	r2, r3
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	b2db      	uxtb	r3, r3
 80153cc:	18d3      	adds	r3, r2, r3
 80153ce:	b2db      	uxtb	r3, r3
 80153d0:	f1a3 0302 	sub.w	r3, r3, #2
 80153d4:	b2da      	uxtb	r2, r3
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	f103 0301 	add.w	r3, r3, #1
 80153de:	b2db      	uxtb	r3, r3
 80153e0:	68f8      	ldr	r0, [r7, #12]
 80153e2:	4611      	mov	r1, r2
 80153e4:	461a      	mov	r2, r3
 80153e6:	f7ff fe1d 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>


	// bottom left
	SetPixel(x+1,y+height-2);
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	b2db      	uxtb	r3, r3
 80153ee:	f103 0301 	add.w	r3, r3, #1
 80153f2:	b2da      	uxtb	r2, r3
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	b2d9      	uxtb	r1, r3
 80153f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fa:	b2db      	uxtb	r3, r3
 80153fc:	18cb      	adds	r3, r1, r3
 80153fe:	b2db      	uxtb	r3, r3
 8015400:	f1a3 0302 	sub.w	r3, r3, #2
 8015404:	b2db      	uxtb	r3, r3
 8015406:	68f8      	ldr	r0, [r7, #12]
 8015408:	4611      	mov	r1, r2
 801540a:	461a      	mov	r2, r3
 801540c:	f7ff fe0a 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+1,y+height-3);
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	b2db      	uxtb	r3, r3
 8015414:	f103 0301 	add.w	r3, r3, #1
 8015418:	b2da      	uxtb	r2, r3
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	b2d9      	uxtb	r1, r3
 801541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015420:	b2db      	uxtb	r3, r3
 8015422:	18cb      	adds	r3, r1, r3
 8015424:	b2db      	uxtb	r3, r3
 8015426:	f1a3 0303 	sub.w	r3, r3, #3
 801542a:	b2db      	uxtb	r3, r3
 801542c:	68f8      	ldr	r0, [r7, #12]
 801542e:	4611      	mov	r1, r2
 8015430:	461a      	mov	r2, r3
 8015432:	f7ff fdf7 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>

	// bottom left
	SetPixel(x+3,y+height-1);
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	b2db      	uxtb	r3, r3
 801543a:	f103 0303 	add.w	r3, r3, #3
 801543e:	b2da      	uxtb	r2, r3
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	b2d9      	uxtb	r1, r3
 8015444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015446:	b2db      	uxtb	r3, r3
 8015448:	18cb      	adds	r3, r1, r3
 801544a:	b2db      	uxtb	r3, r3
 801544c:	f103 33ff 	add.w	r3, r3, #4294967295
 8015450:	b2db      	uxtb	r3, r3
 8015452:	68f8      	ldr	r0, [r7, #12]
 8015454:	4611      	mov	r1, r2
 8015456:	461a      	mov	r2, r3
 8015458:	f7ff fde4 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+2,y+height-1);
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	b2db      	uxtb	r3, r3
 8015460:	f103 0302 	add.w	r3, r3, #2
 8015464:	b2da      	uxtb	r2, r3
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	b2d9      	uxtb	r1, r3
 801546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801546c:	b2db      	uxtb	r3, r3
 801546e:	18cb      	adds	r3, r1, r3
 8015470:	b2db      	uxtb	r3, r3
 8015472:	f103 33ff 	add.w	r3, r3, #4294967295
 8015476:	b2db      	uxtb	r3, r3
 8015478:	68f8      	ldr	r0, [r7, #12]
 801547a:	4611      	mov	r1, r2
 801547c:	461a      	mov	r2, r3
 801547e:	f7ff fdd1 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>


	// bottom right
	SetPixel(x+width-1,y+height-2);
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	b2da      	uxtb	r2, r3
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	b2db      	uxtb	r3, r3
 801548a:	18d3      	adds	r3, r2, r3
 801548c:	b2db      	uxtb	r3, r3
 801548e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015492:	b2da      	uxtb	r2, r3
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	b2d9      	uxtb	r1, r3
 8015498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801549a:	b2db      	uxtb	r3, r3
 801549c:	18cb      	adds	r3, r1, r3
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	f1a3 0302 	sub.w	r3, r3, #2
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	68f8      	ldr	r0, [r7, #12]
 80154a8:	4611      	mov	r1, r2
 80154aa:	461a      	mov	r2, r3
 80154ac:	f7ff fdba 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-1,y+height-3);
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	b2da      	uxtb	r2, r3
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	b2db      	uxtb	r3, r3
 80154b8:	18d3      	adds	r3, r2, r3
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80154c0:	b2da      	uxtb	r2, r3
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	b2d9      	uxtb	r1, r3
 80154c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c8:	b2db      	uxtb	r3, r3
 80154ca:	18cb      	adds	r3, r1, r3
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	f1a3 0303 	sub.w	r3, r3, #3
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	68f8      	ldr	r0, [r7, #12]
 80154d6:	4611      	mov	r1, r2
 80154d8:	461a      	mov	r2, r3
 80154da:	f7ff fda3 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>

	// bottom right
	SetPixel(x+width-2,y+height-1);
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	b2da      	uxtb	r2, r3
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	b2db      	uxtb	r3, r3
 80154e6:	18d3      	adds	r3, r2, r3
 80154e8:	b2db      	uxtb	r3, r3
 80154ea:	f1a3 0302 	sub.w	r3, r3, #2
 80154ee:	b2da      	uxtb	r2, r3
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	b2d9      	uxtb	r1, r3
 80154f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f6:	b2db      	uxtb	r3, r3
 80154f8:	18cb      	adds	r3, r1, r3
 80154fa:	b2db      	uxtb	r3, r3
 80154fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8015500:	b2db      	uxtb	r3, r3
 8015502:	68f8      	ldr	r0, [r7, #12]
 8015504:	4611      	mov	r1, r2
 8015506:	461a      	mov	r2, r3
 8015508:	f7ff fd8c 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-3,y+height-1);
 801550c:	68bb      	ldr	r3, [r7, #8]
 801550e:	b2da      	uxtb	r2, r3
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	b2db      	uxtb	r3, r3
 8015514:	18d3      	adds	r3, r2, r3
 8015516:	b2db      	uxtb	r3, r3
 8015518:	f1a3 0303 	sub.w	r3, r3, #3
 801551c:	b2da      	uxtb	r2, r3
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	b2d9      	uxtb	r1, r3
 8015522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015524:	b2db      	uxtb	r3, r3
 8015526:	18cb      	adds	r3, r1, r3
 8015528:	b2db      	uxtb	r3, r3
 801552a:	f103 33ff 	add.w	r3, r3, #4294967295
 801552e:	b2db      	uxtb	r3, r3
 8015530:	68f8      	ldr	r0, [r7, #12]
 8015532:	4611      	mov	r1, r2
 8015534:	461a      	mov	r2, r3
 8015536:	f7ff fd75 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>



}
 801553a:	f107 0718 	add.w	r7, r7, #24
 801553e:	46bd      	mov	sp, r7
 8015540:	bdb0      	pop	{r4, r5, r7, pc}
 8015542:	bf00      	nop

08015544 <_ZN13CT6963CDriver9RectangleEjjjjb>:
/**
  * @brief  draw an rectangle with upper left corner at (x,y) and specified width and height
  * @param  x1,y1,width,heigth,  true for filled
  * @retval None
  */
void CT6963CDriver::Rectangle(unsigned int x,unsigned int y,unsigned int width,unsigned int height,  bool fill){
 8015544:	b580      	push	{r7, lr}
 8015546:	b086      	sub	sp, #24
 8015548:	af00      	add	r7, sp, #0
 801554a:	60f8      	str	r0, [r7, #12]
 801554c:	60b9      	str	r1, [r7, #8]
 801554e:	607a      	str	r2, [r7, #4]
 8015550:	603b      	str	r3, [r7, #0]
	unsigned char i;
	unsigned char k;

	if(fill){	// fill rect
 8015552:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015556:	2b00      	cmp	r3, #0
 8015558:	d031      	beq.n	80155be <_ZN13CT6963CDriver9RectangleEjjjjb+0x7a>
		//lines
		for (i=0;i<height;i++){
 801555a:	f04f 0300 	mov.w	r3, #0
 801555e:	75fb      	strb	r3, [r7, #23]
 8015560:	e023      	b.n	80155aa <_ZN13CT6963CDriver9RectangleEjjjjb+0x66>
			// columns
			for (k=0;k<width;k++) {
 8015562:	f04f 0300 	mov.w	r3, #0
 8015566:	75bb      	strb	r3, [r7, #22]
 8015568:	e012      	b.n	8015590 <_ZN13CT6963CDriver9RectangleEjjjjb+0x4c>
				SetPixel(x+k,y+i);
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	b2da      	uxtb	r2, r3
 801556e:	7dbb      	ldrb	r3, [r7, #22]
 8015570:	18d3      	adds	r3, r2, r3
 8015572:	b2da      	uxtb	r2, r3
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	b2d9      	uxtb	r1, r3
 8015578:	7dfb      	ldrb	r3, [r7, #23]
 801557a:	18cb      	adds	r3, r1, r3
 801557c:	b2db      	uxtb	r3, r3
 801557e:	68f8      	ldr	r0, [r7, #12]
 8015580:	4611      	mov	r1, r2
 8015582:	461a      	mov	r2, r3
 8015584:	f7ff fd4e 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>

	if(fill){	// fill rect
		//lines
		for (i=0;i<height;i++){
			// columns
			for (k=0;k<width;k++) {
 8015588:	7dbb      	ldrb	r3, [r7, #22]
 801558a:	f103 0301 	add.w	r3, r3, #1
 801558e:	75bb      	strb	r3, [r7, #22]
 8015590:	7dba      	ldrb	r2, [r7, #22]
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	429a      	cmp	r2, r3
 8015596:	bf2c      	ite	cs
 8015598:	2300      	movcs	r3, #0
 801559a:	2301      	movcc	r3, #1
 801559c:	b2db      	uxtb	r3, r3
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d1e3      	bne.n	801556a <_ZN13CT6963CDriver9RectangleEjjjjb+0x26>
	unsigned char i;
	unsigned char k;

	if(fill){	// fill rect
		//lines
		for (i=0;i<height;i++){
 80155a2:	7dfb      	ldrb	r3, [r7, #23]
 80155a4:	f103 0301 	add.w	r3, r3, #1
 80155a8:	75fb      	strb	r3, [r7, #23]
 80155aa:	7dfa      	ldrb	r2, [r7, #23]
 80155ac:	6a3b      	ldr	r3, [r7, #32]
 80155ae:	429a      	cmp	r2, r3
 80155b0:	bf2c      	ite	cs
 80155b2:	2300      	movcs	r3, #0
 80155b4:	2301      	movcc	r3, #1
 80155b6:	b2db      	uxtb	r3, r3
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d1d2      	bne.n	8015562 <_ZN13CT6963CDriver9RectangleEjjjjb+0x1e>
 80155bc:	e05f      	b.n	801567e <_ZN13CT6963CDriver9RectangleEjjjjb+0x13a>
				SetPixel(x+k,y+i);
			}
		}
	} else {
		//lines vertical
		for (i = 0; i < height; i++) {
 80155be:	f04f 0300 	mov.w	r3, #0
 80155c2:	75fb      	strb	r3, [r7, #23]
 80155c4:	e022      	b.n	801560c <_ZN13CT6963CDriver9RectangleEjjjjb+0xc8>
			SetPixel(x, y + i);
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	b2d9      	uxtb	r1, r3
 80155ce:	7dfb      	ldrb	r3, [r7, #23]
 80155d0:	18cb      	adds	r3, r1, r3
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	68f8      	ldr	r0, [r7, #12]
 80155d6:	4611      	mov	r1, r2
 80155d8:	461a      	mov	r2, r3
 80155da:	f7ff fd23 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
			SetPixel(x + width - 1, y + i);
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	b2da      	uxtb	r2, r3
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	18d3      	adds	r3, r2, r3
 80155e8:	b2db      	uxtb	r3, r3
 80155ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80155ee:	b2da      	uxtb	r2, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	b2d9      	uxtb	r1, r3
 80155f4:	7dfb      	ldrb	r3, [r7, #23]
 80155f6:	18cb      	adds	r3, r1, r3
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	4611      	mov	r1, r2
 80155fe:	461a      	mov	r2, r3
 8015600:	f7ff fd10 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
				SetPixel(x+k,y+i);
			}
		}
	} else {
		//lines vertical
		for (i = 0; i < height; i++) {
 8015604:	7dfb      	ldrb	r3, [r7, #23]
 8015606:	f103 0301 	add.w	r3, r3, #1
 801560a:	75fb      	strb	r3, [r7, #23]
 801560c:	7dfa      	ldrb	r2, [r7, #23]
 801560e:	6a3b      	ldr	r3, [r7, #32]
 8015610:	429a      	cmp	r2, r3
 8015612:	bf2c      	ite	cs
 8015614:	2300      	movcs	r3, #0
 8015616:	2301      	movcc	r3, #1
 8015618:	b2db      	uxtb	r3, r3
 801561a:	2b00      	cmp	r3, #0
 801561c:	d1d3      	bne.n	80155c6 <_ZN13CT6963CDriver9RectangleEjjjjb+0x82>
			SetPixel(x, y + i);
			SetPixel(x + width - 1, y + i);
		}
		//lines horizontal
		for (i = 0; i < width; i++)	{
 801561e:	f04f 0300 	mov.w	r3, #0
 8015622:	75fb      	strb	r3, [r7, #23]
 8015624:	e022      	b.n	801566c <_ZN13CT6963CDriver9RectangleEjjjjb+0x128>
			SetPixel(x + i, y);
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	b2da      	uxtb	r2, r3
 801562a:	7dfb      	ldrb	r3, [r7, #23]
 801562c:	18d3      	adds	r3, r2, r3
 801562e:	b2da      	uxtb	r2, r3
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	b2db      	uxtb	r3, r3
 8015634:	68f8      	ldr	r0, [r7, #12]
 8015636:	4611      	mov	r1, r2
 8015638:	461a      	mov	r2, r3
 801563a:	f7ff fcf3 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
			SetPixel(x + i, y + height - 1);
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	b2da      	uxtb	r2, r3
 8015642:	7dfb      	ldrb	r3, [r7, #23]
 8015644:	18d3      	adds	r3, r2, r3
 8015646:	b2da      	uxtb	r2, r3
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	b2d9      	uxtb	r1, r3
 801564c:	6a3b      	ldr	r3, [r7, #32]
 801564e:	b2db      	uxtb	r3, r3
 8015650:	18cb      	adds	r3, r1, r3
 8015652:	b2db      	uxtb	r3, r3
 8015654:	f103 33ff 	add.w	r3, r3, #4294967295
 8015658:	b2db      	uxtb	r3, r3
 801565a:	68f8      	ldr	r0, [r7, #12]
 801565c:	4611      	mov	r1, r2
 801565e:	461a      	mov	r2, r3
 8015660:	f7ff fce0 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		for (i = 0; i < height; i++) {
			SetPixel(x, y + i);
			SetPixel(x + width - 1, y + i);
		}
		//lines horizontal
		for (i = 0; i < width; i++)	{
 8015664:	7dfb      	ldrb	r3, [r7, #23]
 8015666:	f103 0301 	add.w	r3, r3, #1
 801566a:	75fb      	strb	r3, [r7, #23]
 801566c:	7dfa      	ldrb	r2, [r7, #23]
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	429a      	cmp	r2, r3
 8015672:	bf2c      	ite	cs
 8015674:	2300      	movcs	r3, #0
 8015676:	2301      	movcc	r3, #1
 8015678:	b2db      	uxtb	r3, r3
 801567a:	2b00      	cmp	r3, #0
 801567c:	d1d3      	bne.n	8015626 <_ZN13CT6963CDriver9RectangleEjjjjb+0xe2>
			SetPixel(x + i, y);
			SetPixel(x + i, y + height - 1);
		}
	}
}
 801567e:	f107 0718 	add.w	r7, r7, #24
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}
 8015686:	bf00      	nop

08015688 <_ZN13CT6963CDriver11SectorClearEjjjj>:
/**
  * @brief  clear sector from upper left (x,y) with specified width and height
  * @param  x1,y1,width, height
  * @retval None
  */
void CT6963CDriver::SectorClear(unsigned int x,unsigned int y,unsigned int width,unsigned int height){
 8015688:	b590      	push	{r4, r7, lr}
 801568a:	b089      	sub	sp, #36	; 0x24
 801568c:	af02      	add	r7, sp, #8
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
 8015694:	603b      	str	r3, [r7, #0]
	bool oldInverse;

	oldInverse = Inverse();
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	4618      	mov	r0, r3
 801569a:	f7ff fa09 	bl	8014ab0 <_ZN11CGraphicLCD7InverseEv>
 801569e:	4603      	mov	r3, r0
 80156a0:	75fb      	strb	r3, [r7, #23]
	Inverse(!oldInverse);
 80156a2:	68fa      	ldr	r2, [r7, #12]
 80156a4:	7dfb      	ldrb	r3, [r7, #23]
 80156a6:	f083 0301 	eor.w	r3, r3, #1
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	4610      	mov	r0, r2
 80156ae:	4619      	mov	r1, r3
 80156b0:	f7ff fa0a 	bl	8014ac8 <_ZN11CGraphicLCD7InverseEb>

	Rectangle(x,y,width,height,true);
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	f103 030c 	add.w	r3, r3, #12
 80156bc:	681c      	ldr	r4, [r3, #0]
 80156be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c0:	9300      	str	r3, [sp, #0]
 80156c2:	f04f 0301 	mov.w	r3, #1
 80156c6:	9301      	str	r3, [sp, #4]
 80156c8:	68f8      	ldr	r0, [r7, #12]
 80156ca:	68b9      	ldr	r1, [r7, #8]
 80156cc:	687a      	ldr	r2, [r7, #4]
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	47a0      	blx	r4

	Inverse(oldInverse);
 80156d2:	68fa      	ldr	r2, [r7, #12]
 80156d4:	7dfb      	ldrb	r3, [r7, #23]
 80156d6:	4610      	mov	r0, r2
 80156d8:	4619      	mov	r1, r3
 80156da:	f7ff f9f5 	bl	8014ac8 <_ZN11CGraphicLCD7InverseEb>
}
 80156de:	f107 071c 	add.w	r7, r7, #28
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd90      	pop	{r4, r7, pc}
 80156e6:	bf00      	nop

080156e8 <_ZN13CT6963CDriver6CircleEhhh>:
  * @brief  draw a circle with center at (cx,cy) and specified radius
  * @param  x1,y1,width,
  * @retval None
  */
void CT6963CDriver::Circle(unsigned char cx, unsigned char cy ,unsigned char radius)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b088      	sub	sp, #32
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	70f9      	strb	r1, [r7, #3]
 80156f2:	70ba      	strb	r2, [r7, #2]
 80156f4:	707b      	strb	r3, [r7, #1]
	int x, y, xchange, ychange, radiusError;
	x = radius;
 80156f6:	787b      	ldrb	r3, [r7, #1]
 80156f8:	61fb      	str	r3, [r7, #28]
	y = 0;
 80156fa:	f04f 0300 	mov.w	r3, #0
 80156fe:	61bb      	str	r3, [r7, #24]
	xchange = 1 - 2 * radius;
 8015700:	787a      	ldrb	r2, [r7, #1]
 8015702:	4613      	mov	r3, r2
 8015704:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 8015708:	1a9b      	subs	r3, r3, r2
 801570a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801570e:	f103 0301 	add.w	r3, r3, #1
 8015712:	617b      	str	r3, [r7, #20]
	ychange = 1;
 8015714:	f04f 0301 	mov.w	r3, #1
 8015718:	613b      	str	r3, [r7, #16]
	radiusError = 0;
 801571a:	f04f 0300 	mov.w	r3, #0
 801571e:	60fb      	str	r3, [r7, #12]
	while(x >= y)
 8015720:	e096      	b.n	8015850 <_ZN13CT6963CDriver6CircleEhhh+0x168>
	{
		SetPixel(cx+x, cy+y);
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	b2da      	uxtb	r2, r3
 8015726:	78fb      	ldrb	r3, [r7, #3]
 8015728:	18d3      	adds	r3, r2, r3
 801572a:	b2da      	uxtb	r2, r3
 801572c:	69bb      	ldr	r3, [r7, #24]
 801572e:	b2d9      	uxtb	r1, r3
 8015730:	78bb      	ldrb	r3, [r7, #2]
 8015732:	18cb      	adds	r3, r1, r3
 8015734:	b2db      	uxtb	r3, r3
 8015736:	6878      	ldr	r0, [r7, #4]
 8015738:	4611      	mov	r1, r2
 801573a:	461a      	mov	r2, r3
 801573c:	f7ff fc72 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-x, cy+y );
 8015740:	69fb      	ldr	r3, [r7, #28]
 8015742:	b2db      	uxtb	r3, r3
 8015744:	78fa      	ldrb	r2, [r7, #3]
 8015746:	1ad3      	subs	r3, r2, r3
 8015748:	b2da      	uxtb	r2, r3
 801574a:	69bb      	ldr	r3, [r7, #24]
 801574c:	b2d9      	uxtb	r1, r3
 801574e:	78bb      	ldrb	r3, [r7, #2]
 8015750:	18cb      	adds	r3, r1, r3
 8015752:	b2db      	uxtb	r3, r3
 8015754:	6878      	ldr	r0, [r7, #4]
 8015756:	4611      	mov	r1, r2
 8015758:	461a      	mov	r2, r3
 801575a:	f7ff fc63 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-x, cy-y );
 801575e:	69fb      	ldr	r3, [r7, #28]
 8015760:	b2db      	uxtb	r3, r3
 8015762:	78fa      	ldrb	r2, [r7, #3]
 8015764:	1ad3      	subs	r3, r2, r3
 8015766:	b2da      	uxtb	r2, r3
 8015768:	69bb      	ldr	r3, [r7, #24]
 801576a:	b2db      	uxtb	r3, r3
 801576c:	78b9      	ldrb	r1, [r7, #2]
 801576e:	1acb      	subs	r3, r1, r3
 8015770:	b2db      	uxtb	r3, r3
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	4611      	mov	r1, r2
 8015776:	461a      	mov	r2, r3
 8015778:	f7ff fc54 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+x, cy-y );
 801577c:	69fb      	ldr	r3, [r7, #28]
 801577e:	b2da      	uxtb	r2, r3
 8015780:	78fb      	ldrb	r3, [r7, #3]
 8015782:	18d3      	adds	r3, r2, r3
 8015784:	b2da      	uxtb	r2, r3
 8015786:	69bb      	ldr	r3, [r7, #24]
 8015788:	b2db      	uxtb	r3, r3
 801578a:	78b9      	ldrb	r1, [r7, #2]
 801578c:	1acb      	subs	r3, r1, r3
 801578e:	b2db      	uxtb	r3, r3
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	4611      	mov	r1, r2
 8015794:	461a      	mov	r2, r3
 8015796:	f7ff fc45 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+y, cy+x );
 801579a:	69bb      	ldr	r3, [r7, #24]
 801579c:	b2da      	uxtb	r2, r3
 801579e:	78fb      	ldrb	r3, [r7, #3]
 80157a0:	18d3      	adds	r3, r2, r3
 80157a2:	b2da      	uxtb	r2, r3
 80157a4:	69fb      	ldr	r3, [r7, #28]
 80157a6:	b2d9      	uxtb	r1, r3
 80157a8:	78bb      	ldrb	r3, [r7, #2]
 80157aa:	18cb      	adds	r3, r1, r3
 80157ac:	b2db      	uxtb	r3, r3
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	4611      	mov	r1, r2
 80157b2:	461a      	mov	r2, r3
 80157b4:	f7ff fc36 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-y, cy+x );
 80157b8:	69bb      	ldr	r3, [r7, #24]
 80157ba:	b2db      	uxtb	r3, r3
 80157bc:	78fa      	ldrb	r2, [r7, #3]
 80157be:	1ad3      	subs	r3, r2, r3
 80157c0:	b2da      	uxtb	r2, r3
 80157c2:	69fb      	ldr	r3, [r7, #28]
 80157c4:	b2d9      	uxtb	r1, r3
 80157c6:	78bb      	ldrb	r3, [r7, #2]
 80157c8:	18cb      	adds	r3, r1, r3
 80157ca:	b2db      	uxtb	r3, r3
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	4611      	mov	r1, r2
 80157d0:	461a      	mov	r2, r3
 80157d2:	f7ff fc27 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-y, cy-x );
 80157d6:	69bb      	ldr	r3, [r7, #24]
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	78fa      	ldrb	r2, [r7, #3]
 80157dc:	1ad3      	subs	r3, r2, r3
 80157de:	b2da      	uxtb	r2, r3
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	b2db      	uxtb	r3, r3
 80157e4:	78b9      	ldrb	r1, [r7, #2]
 80157e6:	1acb      	subs	r3, r1, r3
 80157e8:	b2db      	uxtb	r3, r3
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	4611      	mov	r1, r2
 80157ee:	461a      	mov	r2, r3
 80157f0:	f7ff fc18 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+y, cy-x );
 80157f4:	69bb      	ldr	r3, [r7, #24]
 80157f6:	b2da      	uxtb	r2, r3
 80157f8:	78fb      	ldrb	r3, [r7, #3]
 80157fa:	18d3      	adds	r3, r2, r3
 80157fc:	b2da      	uxtb	r2, r3
 80157fe:	69fb      	ldr	r3, [r7, #28]
 8015800:	b2db      	uxtb	r3, r3
 8015802:	78b9      	ldrb	r1, [r7, #2]
 8015804:	1acb      	subs	r3, r1, r3
 8015806:	b2db      	uxtb	r3, r3
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	4611      	mov	r1, r2
 801580c:	461a      	mov	r2, r3
 801580e:	f7ff fc09 	bl	8015024 <_ZN13CT6963CDriver8SetPixelEhh>
		y++;
 8015812:	69bb      	ldr	r3, [r7, #24]
 8015814:	f103 0301 	add.w	r3, r3, #1
 8015818:	61bb      	str	r3, [r7, #24]
		radiusError += ychange;
 801581a:	68fa      	ldr	r2, [r7, #12]
 801581c:	693b      	ldr	r3, [r7, #16]
 801581e:	18d3      	adds	r3, r2, r3
 8015820:	60fb      	str	r3, [r7, #12]
		ychange += 2;
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	f103 0302 	add.w	r3, r3, #2
 8015828:	613b      	str	r3, [r7, #16]
		if ( 2*radiusError + xchange > 0 )
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	18d3      	adds	r3, r2, r3
 8015834:	2b00      	cmp	r3, #0
 8015836:	dd0b      	ble.n	8015850 <_ZN13CT6963CDriver6CircleEhhh+0x168>
		{
			x--;
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	f103 33ff 	add.w	r3, r3, #4294967295
 801583e:	61fb      	str	r3, [r7, #28]
			radiusError += xchange;
 8015840:	68fa      	ldr	r2, [r7, #12]
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	18d3      	adds	r3, r2, r3
 8015846:	60fb      	str	r3, [r7, #12]
			xchange += 2;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	f103 0302 	add.w	r3, r3, #2
 801584e:	617b      	str	r3, [r7, #20]
	x = radius;
	y = 0;
	xchange = 1 - 2 * radius;
	ychange = 1;
	radiusError = 0;
	while(x >= y)
 8015850:	69fa      	ldr	r2, [r7, #28]
 8015852:	69bb      	ldr	r3, [r7, #24]
 8015854:	429a      	cmp	r2, r3
 8015856:	bfb4      	ite	lt
 8015858:	2300      	movlt	r3, #0
 801585a:	2301      	movge	r3, #1
 801585c:	b2db      	uxtb	r3, r3
 801585e:	2b00      	cmp	r3, #0
 8015860:	f47f af5f 	bne.w	8015722 <_ZN13CT6963CDriver6CircleEhhh+0x3a>
			x--;
			radiusError += xchange;
			xchange += 2;
		}
	}
}
 8015864:	f107 0720 	add.w	r7, r7, #32
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}

0801586c <_ZN13CT6963CDriver6BitmapEPhhhhh>:
  * @brief  writes a bitmap to graphics ram
  * @param  coordinates, width and heigth
  * @retval None
  */
void CT6963CDriver::Bitmap(unsigned char * bitmap, unsigned char x, unsigned char y, unsigned char width, unsigned char height)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b086      	sub	sp, #24
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	71fa      	strb	r2, [r7, #7]
 8015878:	71bb      	strb	r3, [r7, #6]
	unsigned char i, j;

	for(j = 0; j < height; j++)
 801587a:	f04f 0300 	mov.w	r3, #0
 801587e:	75bb      	strb	r3, [r7, #22]
 8015880:	e04f      	b.n	8015922 <_ZN13CT6963CDriver6BitmapEPhhhhh+0xb6>
	{
		GraphicGoTo(x, y + j);
 8015882:	79ba      	ldrb	r2, [r7, #6]
 8015884:	7dbb      	ldrb	r3, [r7, #22]
 8015886:	18d3      	adds	r3, r2, r3
 8015888:	b2db      	uxtb	r3, r3
 801588a:	79fa      	ldrb	r2, [r7, #7]
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	4611      	mov	r1, r2
 8015890:	461a      	mov	r2, r3
 8015892:	f7ff fa5d 	bl	8014d50 <_ZN13CT6963CDriver11GraphicGoToEhh>
		for(i = 0; i < width/GLCD_FONT_WIDTH; i++)
 8015896:	f04f 0300 	mov.w	r3, #0
 801589a:	75fb      	strb	r3, [r7, #23]
 801589c:	e030      	b.n	8015900 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x94>
		{
			if(Inverse()){
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7ff f905 	bl	8014ab0 <_ZN11CGraphicLCD7InverseEv>
 80158a6:	4603      	mov	r3, r0
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d015      	beq.n	80158d8 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x6c>
				WriteDisplayData(!bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
 80158ac:	7df9      	ldrb	r1, [r7, #23]
 80158ae:	7dba      	ldrb	r2, [r7, #22]
 80158b0:	4613      	mov	r3, r2
 80158b2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80158b6:	1a9b      	subs	r3, r3, r2
 80158b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80158bc:	18cb      	adds	r3, r1, r3
 80158be:	68ba      	ldr	r2, [r7, #8]
 80158c0:	18d3      	adds	r3, r2, r3
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	bf14      	ite	ne
 80158c8:	2300      	movne	r3, #0
 80158ca:	2301      	moveq	r3, #1
 80158cc:	b2db      	uxtb	r3, r3
 80158ce:	68f8      	ldr	r0, [r7, #12]
 80158d0:	4619      	mov	r1, r3
 80158d2:	f7ff faab 	bl	8014e2c <_ZN13CT6963CDriver16WriteDisplayDataEh>
 80158d6:	e00f      	b.n	80158f8 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x8c>
			} else {
				WriteDisplayData(bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
 80158d8:	7df9      	ldrb	r1, [r7, #23]
 80158da:	7dba      	ldrb	r2, [r7, #22]
 80158dc:	4613      	mov	r3, r2
 80158de:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80158e2:	1a9b      	subs	r3, r3, r2
 80158e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80158e8:	18cb      	adds	r3, r1, r3
 80158ea:	68ba      	ldr	r2, [r7, #8]
 80158ec:	18d3      	adds	r3, r2, r3
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	68f8      	ldr	r0, [r7, #12]
 80158f2:	4619      	mov	r1, r3
 80158f4:	f7ff fa9a 	bl	8014e2c <_ZN13CT6963CDriver16WriteDisplayDataEh>
	unsigned char i, j;

	for(j = 0; j < height; j++)
	{
		GraphicGoTo(x, y + j);
		for(i = 0; i < width/GLCD_FONT_WIDTH; i++)
 80158f8:	7dfb      	ldrb	r3, [r7, #23]
 80158fa:	f103 0301 	add.w	r3, r3, #1
 80158fe:	75fb      	strb	r3, [r7, #23]
 8015900:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015904:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8015908:	b2db      	uxtb	r3, r3
 801590a:	7dfa      	ldrb	r2, [r7, #23]
 801590c:	429a      	cmp	r2, r3
 801590e:	bf2c      	ite	cs
 8015910:	2300      	movcs	r3, #0
 8015912:	2301      	movcc	r3, #1
 8015914:	b2db      	uxtb	r3, r3
 8015916:	2b00      	cmp	r3, #0
 8015918:	d1c1      	bne.n	801589e <_ZN13CT6963CDriver6BitmapEPhhhhh+0x32>
  */
void CT6963CDriver::Bitmap(unsigned char * bitmap, unsigned char x, unsigned char y, unsigned char width, unsigned char height)
{
	unsigned char i, j;

	for(j = 0; j < height; j++)
 801591a:	7dbb      	ldrb	r3, [r7, #22]
 801591c:	f103 0301 	add.w	r3, r3, #1
 8015920:	75bb      	strb	r3, [r7, #22]
 8015922:	7dba      	ldrb	r2, [r7, #22]
 8015924:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015928:	429a      	cmp	r2, r3
 801592a:	bf2c      	ite	cs
 801592c:	2300      	movcs	r3, #0
 801592e:	2301      	movcc	r3, #1
 8015930:	b2db      	uxtb	r3, r3
 8015932:	2b00      	cmp	r3, #0
 8015934:	d1a5      	bne.n	8015882 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x16>
			} else {
				WriteDisplayData(bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
			}
		}
	}
}
 8015936:	f107 0718 	add.w	r7, r7, #24
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop

08015940 <_ZN21CT6963_GPIO_InterfaceC1Ev>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/



CT6963_GPIO_Interface::CT6963_GPIO_Interface() {
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	4618      	mov	r0, r3
 801594c:	f7ff f8ca 	bl	8014ae4 <_ZN13CT6963CDriverC1Ev>
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	4a04      	ldr	r2, [pc, #16]	; (8015964 <_ZN21CT6963_GPIO_InterfaceC1Ev+0x24>)
 8015954:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	4618      	mov	r0, r3
 801595a:	f107 0708 	add.w	r7, r7, #8
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}
 8015962:	bf00      	nop
 8015964:	08031f88 	.word	0x08031f88

08015968 <_ZN21CT6963_GPIO_InterfaceD1Ev>:

CT6963_GPIO_Interface::~CT6963_GPIO_Interface() {
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	4a0a      	ldr	r2, [pc, #40]	; (801599c <_ZN21CT6963_GPIO_InterfaceD1Ev+0x34>)
 8015974:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f7ff f8c8 	bl	8014b0c <_ZN13CT6963CDriverD1Ev>
 801597c:	f04f 0300 	mov.w	r3, #0
 8015980:	f003 0301 	and.w	r3, r3, #1
 8015984:	b2db      	uxtb	r3, r3
 8015986:	2b00      	cmp	r3, #0
 8015988:	d002      	beq.n	8015990 <_ZN21CT6963_GPIO_InterfaceD1Ev+0x28>
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f016 feb0 	bl	802c6f0 <_ZdlPv>
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	4618      	mov	r0, r3
 8015994:	f107 0708 	add.w	r7, r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}
 801599c:	08031f88 	.word	0x08031f88

080159a0 <_ZN21CT6963_GPIO_InterfaceD0Ev>:
CT6963_GPIO_Interface::CT6963_GPIO_Interface() {
	// TODO Auto-generated constructor stub

}

CT6963_GPIO_Interface::~CT6963_GPIO_Interface() {
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	f7ff ffdd 	bl	8015968 <_ZN21CT6963_GPIO_InterfaceD1Ev>
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f016 fe9e 	bl	802c6f0 <_ZdlPv>
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	4618      	mov	r0, r3
 80159b8:	f107 0708 	add.w	r7, r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <_Z11CheckStatusv>:
  * @brief  reads T6963C status byte
  * @param  None
  * @retval true for display ready
  */
bool CheckStatus(void)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0

	uint16_t tmp;
	GLCD_DATA_INPUT;
 80159c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80159ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80159ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80159d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80159d6:	6812      	ldr	r2, [r2, #0]
 80159d8:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80159dc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80159e0:	601a      	str	r2, [r3, #0]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD);
 80159e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80159e6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80159ea:	f04f 0120 	mov.w	r1, #32
 80159ee:	f7f1 fea1 	bl	8007734 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 80159f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80159f6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80159fa:	f04f 0102 	mov.w	r1, #2
 80159fe:	f7f1 fe99 	bl	8007734 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 8015a02:	f04f 0002 	mov.w	r0, #2
 8015a06:	f008 ff0f 	bl	801e828 <delay_us>

	tmp = ((GPIO_ReadInputData(GLCD_DATA_PORT) & GLCD_DATA_PORT_MASK) >> GLCD_DATA_OFFSET);
 8015a0a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8015a0e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015a12:	f7f1 fe47 	bl	80076a4 <GPIO_ReadInputData>
 8015a16:	4603      	mov	r3, r0
 8015a18:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8015a1c:	80fb      	strh	r3, [r7, #6]

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8015a1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015a22:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015a26:	f04f 0102 	mov.w	r1, #2
 8015a2a:	f7f1 fe75 	bl	8007718 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD);
 8015a2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015a32:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015a36:	f04f 0120 	mov.w	r1, #32
 8015a3a:	f7f1 fe6d 	bl	8007718 <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 8015a3e:	f04f 0001 	mov.w	r0, #1
 8015a42:	f008 fef1 	bl	801e828 <delay_us>

	GLCD_DATA_OUTPUT;
 8015a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015a4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8015a4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015a52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8015a56:	6812      	ldr	r2, [r2, #0]
 8015a58:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 8015a5c:	f442 02aa 	orr.w	r2, r2, #5570560	; 0x550000
 8015a60:	601a      	str	r2, [r3, #0]

	return ((tmp&0x03)==0x03);
 8015a62:	88fb      	ldrh	r3, [r7, #6]
 8015a64:	f003 0303 	and.w	r3, r3, #3
 8015a68:	2b03      	cmp	r3, #3
 8015a6a:	bf14      	ite	ne
 8015a6c:	2300      	movne	r3, #0
 8015a6e:	2301      	moveq	r3, #1
 8015a70:	b2db      	uxtb	r3, r3
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	f107 0708 	add.w	r7, r7, #8
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}

08015a7c <_ZN21CT6963_GPIO_Interface12HardwareInitEv>:
/**
  * @brief  initialize Hardware to drive the display
  * @param  None
  * @retval None
  */
void CT6963_GPIO_Interface::HardwareInit(void){
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b084      	sub	sp, #16
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]


	GPIO_InitTypeDef GPIO_InitStructure;
	// activate Clock for Io Ports used
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 8015a84:	f04f 0002 	mov.w	r0, #2
 8015a88:	f04f 0101 	mov.w	r1, #1
 8015a8c:	f7f2 ff90 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC , ENABLE);
 8015a90:	f04f 0004 	mov.w	r0, #4
 8015a94:	f04f 0101 	mov.w	r1, #1
 8015a98:	f7f2 ff8a 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE , ENABLE);
 8015a9c:	f04f 0010 	mov.w	r0, #16
 8015aa0:	f04f 0101 	mov.w	r1, #1
 8015aa4:	f7f2 ff84 	bl	80089b0 <RCC_AHB1PeriphClockCmd>

	// all pins as pp outputs with no pull
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8015aa8:	f04f 0301 	mov.w	r3, #1
 8015aac:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8015aae:	f04f 0300 	mov.w	r3, #0
 8015ab2:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8015ab4:	f04f 0300 	mov.w	r3, #0
 8015ab8:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8015aba:	f04f 0301 	mov.w	r3, #1
 8015abe:	737b      	strb	r3, [r7, #13]

	//Control pins CD and RD
	GPIO_InitStructure.GPIO_Pin = GLCD_CD | GLCD_RD;
 8015ac0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015ac4:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_CTRL_PORT_CD_RD,&GPIO_InitStructure);
 8015ac6:	f107 0308 	add.w	r3, r7, #8
 8015aca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015ace:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	f7f1 fcde 	bl	8007494 <GPIO_Init>
	//Control pins WR, CE and RST
	GPIO_InitStructure.GPIO_Pin = GLCD_WR | GLCD_CE | GLCD_RESET;
 8015ad8:	f640 0303 	movw	r3, #2051	; 0x803
 8015adc:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_CTRL_PORT_WR_CE,&GPIO_InitStructure);
 8015ade:	f107 0308 	add.w	r3, r7, #8
 8015ae2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015ae6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015aea:	4619      	mov	r1, r3
 8015aec:	f7f1 fcd2 	bl	8007494 <GPIO_Init>

	// data pins are high byte
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8015af0:	f04f 0302 	mov.w	r3, #2
 8015af4:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Pin = GLCD_DATA_PORT_MASK;
 8015af6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8015afa:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_DATA_PORT,&GPIO_InitStructure);
 8015afc:	f107 0308 	add.w	r3, r7, #8
 8015b00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8015b04:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015b08:	4619      	mov	r1, r3
 8015b0a:	f7f1 fcc3 	bl	8007494 <GPIO_Init>

	//Set all Control pins to high level
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD | GLCD_RD);	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR | GLCD_CE );
 8015b0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015b12:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015b16:	f04f 0130 	mov.w	r1, #48	; 0x30
 8015b1a:	f7f1 fdfd 	bl	8007718 <GPIO_SetBits>
 8015b1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015b22:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015b26:	f04f 0103 	mov.w	r1, #3
 8015b2a:	f7f1 fdf5 	bl	8007718 <GPIO_SetBits>

	init_us_timer(); //delay timer init
 8015b2e:	f008 feb9 	bl	801e8a4 <init_us_timer>

}
 8015b32:	f107 0710 	add.w	r7, r7, #16
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
 8015b3a:	bf00      	nop

08015b3c <_ZN21CT6963_GPIO_Interface5ResetEv>:
/**
  * @brief  Reset the Display
  * @param  None
  * @retval None
  */
void CT6963_GPIO_Interface::Reset(void){
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]

	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_RESET | GLCD_CE );
 8015b44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015b48:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015b4c:	f640 0102 	movw	r1, #2050	; 0x802
 8015b50:	f7f1 fdf0 	bl	8007734 <GPIO_ResetBits>

	vTaskDelay(20);  // sleep 20 ms
 8015b54:	f04f 0014 	mov.w	r0, #20
 8015b58:	f001 fad2 	bl	8017100 <vTaskDelay>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_RESET | GLCD_CE );
 8015b5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015b60:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015b64:	f640 0102 	movw	r1, #2050	; 0x802
 8015b68:	f7f1 fdd6 	bl	8007718 <GPIO_SetBits>

}
 8015b6c:	f107 0708 	add.w	r7, r7, #8
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}

08015b74 <_ZN21CT6963_GPIO_Interface12WriteCommandEh>:
/**
  * @brief  writes a command
  * @param  command
  * @retval None
  */
void CT6963_GPIO_Interface::WriteCommand(const unsigned char command){
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	460b      	mov	r3, r1
 8015b7e:	70fb      	strb	r3, [r7, #3]

	while(!CheckStatus());
 8015b80:	bf00      	nop
 8015b82:	f7ff ff1d 	bl	80159c0 <_Z11CheckStatusv>
 8015b86:	4603      	mov	r3, r0
 8015b88:	f083 0301 	eor.w	r3, r3, #1
 8015b8c:	b2db      	uxtb	r3, r3
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d1f7      	bne.n	8015b82 <_ZN21CT6963_GPIO_Interface12WriteCommandEh+0xe>

	GLCD_DATA_PORT->ODR &= ~GLCD_DATA_PORT_MASK;  //Clear Data pins
 8015b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015b96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8015b9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015b9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8015ba2:	6952      	ldr	r2, [r2, #20]
 8015ba4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8015ba8:	615a      	str	r2, [r3, #20]
	GLCD_DATA_PORT->ODR |= (command << (GLCD_DATA_OFFSET)); // lowbyte will stay as is in this write
 8015baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015bae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8015bb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015bb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8015bba:	6952      	ldr	r2, [r2, #20]
 8015bbc:	4611      	mov	r1, r2
 8015bbe:	78fa      	ldrb	r2, [r7, #3]
 8015bc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8015bc4:	430a      	orrs	r2, r1
 8015bc6:	615a      	str	r2, [r3, #20]

	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8015bc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015bcc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015bd0:	f04f 0101 	mov.w	r1, #1
 8015bd4:	f7f1 fdae 	bl	8007734 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8015bd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015bdc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015be0:	f04f 0102 	mov.w	r1, #2
 8015be4:	f7f1 fda6 	bl	8007734 <GPIO_ResetBits>

	delay_us(c_iDelayFore);   // time for display to read the data
 8015be8:	f04f 0002 	mov.w	r0, #2
 8015bec:	f008 fe1c 	bl	801e828 <delay_us>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8015bf0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015bf4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015bf8:	f04f 0102 	mov.w	r1, #2
 8015bfc:	f7f1 fd8c 	bl	8007718 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8015c00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015c04:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015c08:	f04f 0101 	mov.w	r1, #1
 8015c0c:	f7f1 fd84 	bl	8007718 <GPIO_SetBits>


	delay_us(c_iDelayAfter);
 8015c10:	f04f 0001 	mov.w	r0, #1
 8015c14:	f008 fe08 	bl	801e828 <delay_us>
}
 8015c18:	f107 0708 	add.w	r7, r7, #8
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}

08015c20 <_ZN21CT6963_GPIO_Interface9WriteDataEh>:
/**
  * @brief  writes a data
  * @param  data
  * @retval None
  */
void CT6963_GPIO_Interface::WriteData(const unsigned char data){
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	460b      	mov	r3, r1
 8015c2a:	70fb      	strb	r3, [r7, #3]
	while(!CheckStatus());
 8015c2c:	bf00      	nop
 8015c2e:	f7ff fec7 	bl	80159c0 <_Z11CheckStatusv>
 8015c32:	4603      	mov	r3, r0
 8015c34:	f083 0301 	eor.w	r3, r3, #1
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d1f7      	bne.n	8015c2e <_ZN21CT6963_GPIO_Interface9WriteDataEh+0xe>

	GLCD_DATA_PORT->ODR &= ~GLCD_DATA_PORT_MASK;  //Clear Data pins
 8015c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015c42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8015c46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015c4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8015c4e:	6952      	ldr	r2, [r2, #20]
 8015c50:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8015c54:	615a      	str	r2, [r3, #20]
	GLCD_DATA_PORT->ODR |= ((uint16_t)data << GLCD_DATA_OFFSET); // lowbyte will stay as is in this write
 8015c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015c5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8015c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015c62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8015c66:	6952      	ldr	r2, [r2, #20]
 8015c68:	4611      	mov	r1, r2
 8015c6a:	78fa      	ldrb	r2, [r7, #3]
 8015c6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8015c70:	430a      	orrs	r2, r1
 8015c72:	615a      	str	r2, [r3, #20]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD);
 8015c74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015c78:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015c7c:	f04f 0110 	mov.w	r1, #16
 8015c80:	f7f1 fd58 	bl	8007734 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8015c84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015c88:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015c8c:	f04f 0101 	mov.w	r1, #1
 8015c90:	f7f1 fd50 	bl	8007734 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8015c94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015c98:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015c9c:	f04f 0102 	mov.w	r1, #2
 8015ca0:	f7f1 fd48 	bl	8007734 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 8015ca4:	f04f 0002 	mov.w	r0, #2
 8015ca8:	f008 fdbe 	bl	801e828 <delay_us>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8015cac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015cb0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015cb4:	f04f 0102 	mov.w	r1, #2
 8015cb8:	f7f1 fd2e 	bl	8007718 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD);
 8015cbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015cc0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015cc4:	f04f 0110 	mov.w	r1, #16
 8015cc8:	f7f1 fd26 	bl	8007718 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8015ccc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015cd0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015cd4:	f04f 0101 	mov.w	r1, #1
 8015cd8:	f7f1 fd1e 	bl	8007718 <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 8015cdc:	f04f 0001 	mov.w	r0, #1
 8015ce0:	f008 fda2 	bl	801e828 <delay_us>
}
 8015ce4:	f107 0708 	add.w	r7, r7, #8
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}

08015cec <_ZN21CT6963_GPIO_Interface8ReadDataEv>:
/**
  * @brief  reads data from display
  * @param  None
  * @retval data from display
  */
unsigned char CT6963_GPIO_Interface::ReadData(){
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	while(!CheckStatus());
 8015cf4:	bf00      	nop
 8015cf6:	f7ff fe63 	bl	80159c0 <_Z11CheckStatusv>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	f083 0301 	eor.w	r3, r3, #1
 8015d00:	b2db      	uxtb	r3, r3
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d1f7      	bne.n	8015cf6 <_ZN21CT6963_GPIO_Interface8ReadDataEv+0xa>

	GLCD_DATA_INPUT;
 8015d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015d0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8015d0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015d12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8015d16:	6812      	ldr	r2, [r2, #0]
 8015d18:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8015d1c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8015d20:	601a      	str	r2, [r3, #0]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD );
 8015d22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015d26:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015d2a:	f04f 0120 	mov.w	r1, #32
 8015d2e:	f7f1 fd01 	bl	8007734 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD );
 8015d32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015d36:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015d3a:	f04f 0110 	mov.w	r1, #16
 8015d3e:	f7f1 fcf9 	bl	8007734 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE );
 8015d42:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015d46:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015d4a:	f04f 0102 	mov.w	r1, #2
 8015d4e:	f7f1 fcf1 	bl	8007734 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 8015d52:	f04f 0002 	mov.w	r0, #2
 8015d56:	f008 fd67 	bl	801e828 <delay_us>

	tmp = ((GPIO_ReadInputData(GLCD_DATA_PORT) & GLCD_DATA_PORT_MASK) >> GLCD_DATA_OFFSET);
 8015d5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8015d5e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015d62:	f7f1 fc9f 	bl	80076a4 <GPIO_ReadInputData>
 8015d66:	4603      	mov	r3, r0
 8015d68:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8015d6c:	81fb      	strh	r3, [r7, #14]

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE );
 8015d6e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015d72:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015d76:	f04f 0102 	mov.w	r1, #2
 8015d7a:	f7f1 fccd 	bl	8007718 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD );
 8015d7e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015d82:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015d86:	f04f 0110 	mov.w	r1, #16
 8015d8a:	f7f1 fcc5 	bl	8007718 <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD );
 8015d8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015d92:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8015d96:	f04f 0120 	mov.w	r1, #32
 8015d9a:	f7f1 fcbd 	bl	8007718 <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 8015d9e:	f04f 0001 	mov.w	r0, #1
 8015da2:	f008 fd41 	bl	801e828 <delay_us>

	GLCD_DATA_OUTPUT;
 8015da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015daa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8015dae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015db2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8015db6:	6812      	ldr	r2, [r2, #0]
 8015db8:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 8015dbc:	f442 02aa 	orr.w	r2, r2, #5570560	; 0x550000
 8015dc0:	601a      	str	r2, [r3, #0]
	return (unsigned char)tmp;
 8015dc2:	89fb      	ldrh	r3, [r7, #14]
 8015dc4:	b2db      	uxtb	r3, r3
}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f107 0710 	add.w	r7, r7, #16
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}

08015dd0 <_ZN12AManagedTaskC1Ev>:
#include "AManagedTask.h"
#include "CFreeRTOS.h"

AManagedTask* AManagedTask::s_pManagedTaskListHead = NULL;

AManagedTask::AManagedTask() {
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f000 f940 	bl	8016060 <_ZN5CTaskC1Ev>
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	4a08      	ldr	r2, [pc, #32]	; (8015e04 <_ZN12AManagedTaskC1Ev+0x34>)
 8015de4:	601a      	str	r2, [r3, #0]
	m_pNextManagedTask = NULL;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f04f 0200 	mov.w	r2, #0
 8015dec:	609a      	str	r2, [r3, #8]
	AddToManagedTask(this);
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	6879      	ldr	r1, [r7, #4]
 8015df2:	f000 f87b 	bl	8015eec <_ZN12AManagedTask16AddToManagedTaskEPS_>
}
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f107 0708 	add.w	r7, r7, #8
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}
 8015e02:	bf00      	nop
 8015e04:	08035900 	.word	0x08035900

08015e08 <_ZN12AManagedTaskD1Ev>:

AManagedTask::~AManagedTask() {
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	4a0c      	ldr	r2, [pc, #48]	; (8015e44 <_ZN12AManagedTaskD1Ev+0x3c>)
 8015e14:	601a      	str	r2, [r3, #0]
	RemoveFromManagedTask(this);
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	6879      	ldr	r1, [r7, #4]
 8015e1a:	f000 f88f 	bl	8015f3c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>
}
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	f000 f94e 	bl	80160c0 <_ZN5CTaskD1Ev>
 8015e24:	f04f 0300 	mov.w	r3, #0
 8015e28:	f003 0301 	and.w	r3, r3, #1
 8015e2c:	b2db      	uxtb	r3, r3
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d002      	beq.n	8015e38 <_ZN12AManagedTaskD1Ev+0x30>
 8015e32:	6878      	ldr	r0, [r7, #4]
 8015e34:	f016 fc5c 	bl	802c6f0 <_ZdlPv>
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f107 0708 	add.w	r7, r7, #8
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}
 8015e44:	08035900 	.word	0x08035900

08015e48 <_ZN12AManagedTaskD0Ev>:
AManagedTask::AManagedTask() {
	m_pNextManagedTask = NULL;
	AddToManagedTask(this);
}

AManagedTask::~AManagedTask() {
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
	RemoveFromManagedTask(this);
}
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f7ff ffd9 	bl	8015e08 <_ZN12AManagedTaskD1Ev>
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f016 fc4a 	bl	802c6f0 <_ZdlPv>
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f107 0708 	add.w	r7, r7, #8
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}

08015e68 <_ZN12AManagedTask6CreateEPKctm>:

portBASE_TYPE AManagedTask::Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) {
 8015e68:	b590      	push	{r4, r7, lr}
 8015e6a:	b087      	sub	sp, #28
 8015e6c:	af02      	add	r7, sp, #8
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	603b      	str	r3, [r7, #0]
 8015e74:	4613      	mov	r3, r2
 8015e76:	80fb      	strh	r3, [r7, #6]
	return OnCreate(pcName, usStackDepth, uxPriority) &&
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	f103 031c 	add.w	r3, r3, #28
 8015e80:	681c      	ldr	r4, [r3, #0]
 8015e82:	88fb      	ldrh	r3, [r7, #6]
 8015e84:	68f8      	ldr	r0, [r7, #12]
 8015e86:	68b9      	ldr	r1, [r7, #8]
 8015e88:	461a      	mov	r2, r3
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	47a0      	blx	r4
 8015e8e:	4603      	mov	r3, r0
			CTask::Create(AManagedTask::taskControlFunc, pcName, usStackDepth, this, uxPriority);
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d013      	beq.n	8015ebc <_ZN12AManagedTask6CreateEPKctm+0x54>
 8015e94:	68fa      	ldr	r2, [r7, #12]
 8015e96:	88fb      	ldrh	r3, [r7, #6]
 8015e98:	68f9      	ldr	r1, [r7, #12]
 8015e9a:	9100      	str	r1, [sp, #0]
 8015e9c:	6839      	ldr	r1, [r7, #0]
 8015e9e:	9101      	str	r1, [sp, #4]
 8015ea0:	4610      	mov	r0, r2
 8015ea2:	f645 61cd 	movw	r1, #24269	; 0x5ecd
 8015ea6:	f6c0 0101 	movt	r1, #2049	; 0x801
 8015eaa:	68ba      	ldr	r2, [r7, #8]
 8015eac:	f000 f964 	bl	8016178 <_ZN5CTask6CreateEPFvPvEPKctS0_m>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d002      	beq.n	8015ebc <_ZN12AManagedTask6CreateEPKctm+0x54>
 8015eb6:	f04f 0301 	mov.w	r3, #1
 8015eba:	e001      	b.n	8015ec0 <_ZN12AManagedTask6CreateEPKctm+0x58>
 8015ebc:	f04f 0300 	mov.w	r3, #0
}
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f107 0714 	add.w	r7, r7, #20
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bd90      	pop	{r4, r7, pc}
 8015eca:	bf00      	nop

08015ecc <_ZN12AManagedTask15taskControlFuncEPv>:

void AManagedTask::taskControlFunc(void *pParams) {
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b082      	sub	sp, #8
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
	static_cast<AManagedTask *>(pParams)->Run();
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	f103 0318 	add.w	r3, r3, #24
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	4798      	blx	r3
}
 8015ee2:	f107 0708 	add.w	r7, r7, #8
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop

08015eec <_ZN12AManagedTask16AddToManagedTaskEPS_>:

void AManagedTask::AddToManagedTask(AManagedTask *pTaskToAdd) {
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	6039      	str	r1, [r7, #0]
	EnterCritical();
 8015ef6:	f016 fb7b 	bl	802c5f0 <_ZN5CTask13EnterCriticalEv>
	// is the first element?
	if (s_pManagedTaskListHead == NULL) {
 8015efa:	f640 2320 	movw	r3, #2592	; 0xa20
 8015efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d106      	bne.n	8015f16 <_ZN12AManagedTask16AddToManagedTaskEPS_+0x2a>
		s_pManagedTaskListHead = this;
 8015f08:	f640 2320 	movw	r3, #2592	; 0xa20
 8015f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	601a      	str	r2, [r3, #0]
 8015f14:	e00c      	b.n	8015f30 <_ZN12AManagedTask16AddToManagedTaskEPS_+0x44>
	}
	else {
		// add the task to the head of the managed task list.
		m_pNextManagedTask = s_pManagedTaskListHead;
 8015f16:	f640 2320 	movw	r3, #2592	; 0xa20
 8015f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f1e:	681a      	ldr	r2, [r3, #0]
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	609a      	str	r2, [r3, #8]
		s_pManagedTaskListHead = this;
 8015f24:	f640 2320 	movw	r3, #2592	; 0xa20
 8015f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f2c:	687a      	ldr	r2, [r7, #4]
 8015f2e:	601a      	str	r2, [r3, #0]
	}
	ExitCritical();
 8015f30:	f016 fb64 	bl	802c5fc <_ZN5CTask12ExitCriticalEv>
}
 8015f34:	f107 0708 	add.w	r7, r7, #8
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}

08015f3c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>:

void AManagedTask::RemoveFromManagedTask(AManagedTask *pTaskToRemove) {
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b084      	sub	sp, #16
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
 8015f44:	6039      	str	r1, [r7, #0]
	// search for the task to remove in the managed task list
	// is it the first element?
	EnterCritical();
 8015f46:	f016 fb53 	bl	802c5f0 <_ZN5CTask13EnterCriticalEv>
	if (pTaskToRemove == s_pManagedTaskListHead) {
 8015f4a:	f640 2320 	movw	r3, #2592	; 0xa20
 8015f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	683a      	ldr	r2, [r7, #0]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d109      	bne.n	8015f6e <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x32>
		s_pManagedTaskListHead = pTaskToRemove->m_pNextManagedTask;
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	689a      	ldr	r2, [r3, #8]
 8015f5e:	f640 2320 	movw	r3, #2592	; 0xa20
 8015f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f66:	601a      	str	r2, [r3, #0]
		ExitCritical();
 8015f68:	f016 fb48 	bl	802c5fc <_ZN5CTask12ExitCriticalEv>
 8015f6c:	e025      	b.n	8015fba <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7e>
	}
	else {
		ExitCritical();
 8015f6e:	f016 fb45 	bl	802c5fc <_ZN5CTask12ExitCriticalEv>
		CFreeRTOS::SuspendAllTasks();
 8015f72:	f016 fb55 	bl	802c620 <_ZN9CFreeRTOS15SuspendAllTasksEv>
		AManagedTask *pTask = s_pManagedTaskListHead;
 8015f76:	f640 2320 	movw	r3, #2592	; 0xa20
 8015f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	60fb      	str	r3, [r7, #12]
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 8015f82:	e002      	b.n	8015f8a <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x4e>
			pTask = pTask->m_pNextManagedTask;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	689b      	ldr	r3, [r3, #8]
 8015f88:	60fb      	str	r3, [r7, #12]
	}
	else {
		ExitCritical();
		CFreeRTOS::SuspendAllTasks();
		AManagedTask *pTask = s_pManagedTaskListHead;
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d007      	beq.n	8015fa0 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	689a      	ldr	r2, [r3, #8]
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d002      	beq.n	8015fa0 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 8015f9a:	f04f 0301 	mov.w	r3, #1
 8015f9e:	e001      	b.n	8015fa4 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x68>
 8015fa0:	f04f 0300 	mov.w	r3, #0
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d1ed      	bne.n	8015f84 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x48>
			pTask = pTask->m_pNextManagedTask;
		}
		if (pTask != NULL) { // Check to be sure that the task is in the list
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d003      	beq.n	8015fb6 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7a>
			// remove the thask from the list
			pTask->m_pNextManagedTask = pTaskToRemove->m_pNextManagedTask;
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	689a      	ldr	r2, [r3, #8]
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	609a      	str	r2, [r3, #8]
		}
		CFreeRTOS::ResumeAllTasks();
 8015fb6:	f016 fb39 	bl	802c62c <_ZN9CFreeRTOS14ResumeAllTasksEv>
	}
}
 8015fba:	f107 0710 	add.w	r7, r7, #16
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	bd80      	pop	{r7, pc}
 8015fc2:	bf00      	nop

08015fc4 <_ZN12AManagedTask27InitHardwareForManagedTasksEv>:

bool AManagedTask::InitHardwareForManagedTasks() {
 8015fc4:	b590      	push	{r4, r7, lr}
 8015fc6:	b083      	sub	sp, #12
 8015fc8:	af00      	add	r7, sp, #0
	bool bRes = true;
 8015fca:	f04f 0301 	mov.w	r3, #1
 8015fce:	71fb      	strb	r3, [r7, #7]
	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 8015fd0:	f640 2320 	movw	r3, #2592	; 0xa20
 8015fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	603b      	str	r3, [r7, #0]
 8015fdc:	e011      	b.n	8016002 <_ZN12AManagedTask27InitHardwareForManagedTasksEv+0x3e>
		bRes &= pTask->HardwareInit();
 8015fde:	79fc      	ldrb	r4, [r7, #7]
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f103 0314 	add.w	r3, r3, #20
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	6838      	ldr	r0, [r7, #0]
 8015fec:	4798      	blx	r3
 8015fee:	4603      	mov	r3, r0
 8015ff0:	4023      	ands	r3, r4
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	bf0c      	ite	eq
 8015ff6:	2300      	moveq	r3, #0
 8015ff8:	2301      	movne	r3, #1
 8015ffa:	71fb      	strb	r3, [r7, #7]
	}
}

bool AManagedTask::InitHardwareForManagedTasks() {
	bool bRes = true;
	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	689b      	ldr	r3, [r3, #8]
 8016000:	603b      	str	r3, [r7, #0]
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	2b00      	cmp	r3, #0
 8016006:	bf0c      	ite	eq
 8016008:	2300      	moveq	r3, #0
 801600a:	2301      	movne	r3, #1
 801600c:	b2db      	uxtb	r3, r3
 801600e:	2b00      	cmp	r3, #0
 8016010:	d1e5      	bne.n	8015fde <_ZN12AManagedTask27InitHardwareForManagedTasksEv+0x1a>
		bRes &= pTask->HardwareInit();

	return bRes;
 8016012:	79fb      	ldrb	r3, [r7, #7]
}
 8016014:	4618      	mov	r0, r3
 8016016:	f107 070c 	add.w	r7, r7, #12
 801601a:	46bd      	mov	sp, r7
 801601c:	bd90      	pop	{r4, r7, pc}
 801601e:	bf00      	nop

08016020 <_ZN9CFreeRTOSC1Ev>:
 */

#include "CFreeRTOS.h"
#include "AManagedTask.h"

CFreeRTOS::CFreeRTOS() {
 8016020:	b480      	push	{r7}
 8016022:	b083      	sub	sp, #12
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	4618      	mov	r0, r3
 801602c:	f107 070c 	add.w	r7, r7, #12
 8016030:	46bd      	mov	sp, r7
 8016032:	bc80      	pop	{r7}
 8016034:	4770      	bx	lr
 8016036:	bf00      	nop

08016038 <_ZN9CFreeRTOSD1Ev>:

CFreeRTOS::~CFreeRTOS() {
 8016038:	b480      	push	{r7}
 801603a:	b083      	sub	sp, #12
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	4618      	mov	r0, r3
 8016044:	f107 070c 	add.w	r7, r7, #12
 8016048:	46bd      	mov	sp, r7
 801604a:	bc80      	pop	{r7}
 801604c:	4770      	bx	lr
 801604e:	bf00      	nop

08016050 <_ZN9CFreeRTOS27InitHardwareForManagedTasksEv>:

bool CFreeRTOS::InitHardwareForManagedTasks() {
 8016050:	b580      	push	{r7, lr}
 8016052:	af00      	add	r7, sp, #0
	return AManagedTask::InitHardwareForManagedTasks();
 8016054:	f7ff ffb6 	bl	8015fc4 <_ZN12AManagedTask27InitHardwareForManagedTasksEv>
 8016058:	4603      	mov	r3, r0
}
 801605a:	4618      	mov	r0, r3
 801605c:	bd80      	pop	{r7, pc}
 801605e:	bf00      	nop

08016060 <_ZN5CTaskC1Ev>:

#include "CTask.h"
#include <assert.h>


CTask::CTask() {
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	4618      	mov	r0, r3
 801606c:	f016 fae6 	bl	802c63c <_ZN12IFreeRTOSObjC1Ev>
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	4a06      	ldr	r2, [pc, #24]	; (801608c <_ZN5CTaskC1Ev+0x2c>)
 8016074:	601a      	str	r2, [r3, #0]
	m_handleTask = NULL;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	f04f 0200 	mov.w	r2, #0
 801607c:	605a      	str	r2, [r3, #4]
}
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	4618      	mov	r0, r3
 8016082:	f107 0708 	add.w	r7, r7, #8
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}
 801608a:	bf00      	nop
 801608c:	08035940 	.word	0x08035940

08016090 <_ZN5CTaskC1EPv>:

CTask::CTask(xTaskHandle handleTask) {
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	6039      	str	r1, [r7, #0]
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	4618      	mov	r0, r3
 801609e:	f016 facd 	bl	802c63c <_ZN12IFreeRTOSObjC1Ev>
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	4a05      	ldr	r2, [pc, #20]	; (80160bc <_ZN5CTaskC1EPv+0x2c>)
 80160a6:	601a      	str	r2, [r3, #0]
	Attach(handleTask);
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	6839      	ldr	r1, [r7, #0]
 80160ac:	f000 f83a 	bl	8016124 <_ZN5CTask6AttachEPv>
}
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	4618      	mov	r0, r3
 80160b4:	f107 0708 	add.w	r7, r7, #8
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	08035940 	.word	0x08035940

080160c0 <_ZN5CTaskD1Ev>:

CTask::~CTask() {
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	4a0d      	ldr	r2, [pc, #52]	; (8016100 <_ZN5CTaskD1Ev+0x40>)
 80160cc:	601a      	str	r2, [r3, #0]
	if (IsValid())
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f016 fa5a 	bl	802c588 <_ZNK5CTask7IsValidEv>
 80160d4:	4603      	mov	r3, r0
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d002      	beq.n	80160e0 <_ZN5CTaskD1Ev+0x20>
		Delete();
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f000 f88a 	bl	80161f4 <_ZN5CTask6DeleteEv>
}
 80160e0:	f04f 0300 	mov.w	r3, #0
 80160e4:	f003 0301 	and.w	r3, r3, #1
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d002      	beq.n	80160f4 <_ZN5CTaskD1Ev+0x34>
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f016 fafe 	bl	802c6f0 <_ZdlPv>
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	4618      	mov	r0, r3
 80160f8:	f107 0708 	add.w	r7, r7, #8
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}
 8016100:	08035940 	.word	0x08035940

08016104 <_ZN5CTaskD0Ev>:

CTask::CTask(xTaskHandle handleTask) {
	Attach(handleTask);
}

CTask::~CTask() {
 8016104:	b580      	push	{r7, lr}
 8016106:	b082      	sub	sp, #8
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
	if (IsValid())
		Delete();
}
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f7ff ffd7 	bl	80160c0 <_ZN5CTaskD1Ev>
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f016 faec 	bl	802c6f0 <_ZdlPv>
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	4618      	mov	r0, r3
 801611c:	f107 0708 	add.w	r7, r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}

08016124 <_ZN5CTask6AttachEPv>:

void CTask::Attach(xGenericHandle handle) {
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	6039      	str	r1, [r7, #0]
	assert(handle != NULL);
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d10f      	bne.n	8016154 <_ZN5CTask6AttachEPv+0x30>
 8016134:	f64d 102c 	movw	r0, #55596	; 0xd92c
 8016138:	f6c0 0002 	movt	r0, #2050	; 0x802
 801613c:	f04f 011b 	mov.w	r1, #27
 8016140:	f645 1258 	movw	r2, #22872	; 0x5958
 8016144:	f6c0 0203 	movt	r2, #2051	; 0x803
 8016148:	f64d 134c 	movw	r3, #55628	; 0xd94c
 801614c:	f6c0 0302 	movt	r3, #2050	; 0x802
 8016150:	f00f f82c 	bl	80251ac <__assert_func>

	if (IsValid()) {
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	4798      	blx	r3
 801615e:	4603      	mov	r3, r0
 8016160:	2b00      	cmp	r3, #0
 8016162:	d002      	beq.n	801616a <_ZN5CTask6AttachEPv+0x46>
		Delete();
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f000 f845 	bl	80161f4 <_ZN5CTask6DeleteEv>
	}
	m_handleTask = handle;
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	683a      	ldr	r2, [r7, #0]
 801616e:	605a      	str	r2, [r3, #4]
}
 8016170:	f107 0708 	add.w	r7, r7, #8
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}

08016178 <_ZN5CTask6CreateEPFvPvEPKctS0_m>:

portBASE_TYPE CTask::Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b08a      	sub	sp, #40	; 0x28
 801617c:	af04      	add	r7, sp, #16
 801617e:	60f8      	str	r0, [r7, #12]
 8016180:	60b9      	str	r1, [r7, #8]
 8016182:	607a      	str	r2, [r7, #4]
 8016184:	807b      	strh	r3, [r7, #2]
	portBASE_TYPE res;
	xTaskHandle handle;
	res = xTaskCreate(pvTaskCode, (const signed char*)pcName, usStackDepth, pvParameters, uxPriority, &handle);
 8016186:	887b      	ldrh	r3, [r7, #2]
 8016188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801618a:	9200      	str	r2, [sp, #0]
 801618c:	f107 0210 	add.w	r2, r7, #16
 8016190:	9201      	str	r2, [sp, #4]
 8016192:	f04f 0200 	mov.w	r2, #0
 8016196:	9202      	str	r2, [sp, #8]
 8016198:	f04f 0200 	mov.w	r2, #0
 801619c:	9203      	str	r2, [sp, #12]
 801619e:	68b8      	ldr	r0, [r7, #8]
 80161a0:	6879      	ldr	r1, [r7, #4]
 80161a2:	461a      	mov	r2, r3
 80161a4:	6a3b      	ldr	r3, [r7, #32]
 80161a6:	f000 fe1b 	bl	8016de0 <xTaskGenericCreate>
 80161aa:	4603      	mov	r3, r0
 80161ac:	617b      	str	r3, [r7, #20]
	if (res == pdTRUE)
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	2b01      	cmp	r3, #1
 80161b2:	d108      	bne.n	80161c6 <_ZN5CTask6CreateEPFvPvEPKctS0_m+0x4e>
		Attach(handle);
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	f103 0304 	add.w	r3, r3, #4
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	693a      	ldr	r2, [r7, #16]
 80161c0:	68f8      	ldr	r0, [r7, #12]
 80161c2:	4611      	mov	r1, r2
 80161c4:	4798      	blx	r3

	return res;
 80161c6:	697b      	ldr	r3, [r7, #20]
}
 80161c8:	4618      	mov	r0, r3
 80161ca:	f107 0718 	add.w	r7, r7, #24
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}
 80161d2:	bf00      	nop

080161d4 <_ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS>:

portBASE_TYPE CTask::CreateRestricted(xTaskParameters *pxTaskDefinition)
{
 80161d4:	b480      	push	{r7}
 80161d6:	b085      	sub	sp, #20
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
	portBASE_TYPE res = pdFALSE;
 80161de:	f04f 0300 	mov.w	r3, #0
 80161e2:	60fb      	str	r3, [r7, #12]
	res = xTaskCreateRestricted(pxTaskDefinition, &handle);
	if (res == pdTRUE)
		Attach(handle);
#endif

	return res;
 80161e4:	68fb      	ldr	r3, [r7, #12]
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	f107 0714 	add.w	r7, r7, #20
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bc80      	pop	{r7}
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop

080161f4 <_ZN5CTask6DeleteEv>:


void CTask::Delete() {
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
	if (m_handleTask != NULL) {
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d008      	beq.n	8016216 <_ZN5CTask6DeleteEv+0x22>
#if ( INCLUDE_vTaskDelete == 1 )
		vTaskDelete(m_handleTask);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	4618      	mov	r0, r3
 801620a:	f000 febf 	bl	8016f8c <vTaskDelete>
#else
		vTaskSuspend(m_handleTask);
#endif
		m_handleTask = NULL;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f04f 0200 	mov.w	r2, #0
 8016214:	605a      	str	r2, [r3, #4]
	}
}
 8016216:	f107 0708 	add.w	r7, r7, #8
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}
 801621e:	bf00      	nop

08016220 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8016220:	b480      	push	{r7}
 8016222:	b085      	sub	sp, #20
 8016224:	af00      	add	r7, sp, #0
 8016226:	60f8      	str	r0, [r7, #12]
 8016228:	60b9      	str	r1, [r7, #8]
 801622a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	f1a3 0304 	sub.w	r3, r3, #4
 8016232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801623a:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	f1a3 0304 	sub.w	r3, r3, #4
 8016242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8016244:	68ba      	ldr	r2, [r7, #8]
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	f1a3 0304 	sub.w	r3, r3, #4
 8016250:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	f04f 0200 	mov.w	r2, #0
 8016258:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	f1a3 0314 	sub.w	r3, r3, #20
 8016260:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
 801626e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	f06f 0202 	mvn.w	r2, #2
 8016276:	601a      	str	r2, [r3, #0]
	return pxTopOfStack;
 8016278:	68fb      	ldr	r3, [r7, #12]
}
 801627a:	4618      	mov	r0, r3
 801627c:	f107 0714 	add.w	r7, r7, #20
 8016280:	46bd      	mov	sp, r7
 8016282:	bc80      	pop	{r7}
 8016284:	4770      	bx	lr
 8016286:	bf00      	nop

08016288 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016288:	4b06      	ldr	r3, [pc, #24]	; (80162a4 <pxCurrentTCBConst2>)
 801628a:	6819      	ldr	r1, [r3, #0]
 801628c:	6808      	ldr	r0, [r1, #0]
 801628e:	f850 eb04 	ldr.w	lr, [r0], #4
 8016292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8016296:	f380 8809 	msr	PSP, r0
 801629a:	f04f 0000 	mov.w	r0, #0
 801629e:	f380 8811 	msr	BASEPRI, r0
 80162a2:	4770      	bx	lr

080162a4 <pxCurrentTCBConst2>:
 80162a4:	20000a24 	.word	0x20000a24

080162a8 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 80162a8:	486e      	ldr	r0, [pc, #440]	; (8016464 <prvSetupTimerInterrupt+0x40>)
 80162aa:	6800      	ldr	r0, [r0, #0]
 80162ac:	6800      	ldr	r0, [r0, #0]
 80162ae:	f380 8808 	msr	MSP, r0
 80162b2:	b662      	cpsie	i
 80162b4:	df00      	svc	0
 80162b6:	bf00      	nop

080162b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80162bc:	f64e 5320 	movw	r3, #60704	; 0xed20
 80162c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80162c4:	f64e 5220 	movw	r2, #60704	; 0xed20
 80162c8:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80162cc:	6812      	ldr	r2, [r2, #0]
 80162ce:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 80162d2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80162d4:	f64e 5320 	movw	r3, #60704	; 0xed20
 80162d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80162dc:	f64e 5220 	movw	r2, #60704	; 0xed20
 80162e0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80162e4:	6812      	ldr	r2, [r2, #0]
 80162e6:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80162ea:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80162ec:	f000 f89a 	bl	8016424 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80162f0:	f640 1348 	movw	r3, #2376	; 0x948
 80162f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80162f8:	f04f 0200 	mov.w	r2, #0
 80162fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80162fe:	f7ff ffd3 	bl	80162a8 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8016302:	f04f 0300 	mov.w	r3, #0
}
 8016306:	4618      	mov	r0, r3
 8016308:	bd80      	pop	{r7, pc}
 801630a:	bf00      	nop

0801630c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 801630c:	b480      	push	{r7}
 801630e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM4F port will require this function as there
	is nothing to return to.  */
}
 8016310:	46bd      	mov	sp, r7
 8016312:	bc80      	pop	{r7}
 8016314:	4770      	bx	lr
 8016316:	bf00      	nop

08016318 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8016318:	b480      	push	{r7}
 801631a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801631c:	f64e 5304 	movw	r3, #60676	; 0xed04
 8016320:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8016324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016328:	601a      	str	r2, [r3, #0]
}
 801632a:	46bd      	mov	sp, r7
 801632c:	bc80      	pop	{r7}
 801632e:	4770      	bx	lr

08016330 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016330:	b480      	push	{r7}
 8016332:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8016334:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8016338:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 801633c:	f640 1348 	movw	r3, #2376	; 0x948
 8016340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	f103 0201 	add.w	r2, r3, #1
 801634a:	f640 1348 	movw	r3, #2376	; 0x948
 801634e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016352:	601a      	str	r2, [r3, #0]
}
 8016354:	46bd      	mov	sp, r7
 8016356:	bc80      	pop	{r7}
 8016358:	4770      	bx	lr
 801635a:	bf00      	nop

0801635c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801635c:	b480      	push	{r7}
 801635e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8016360:	f640 1348 	movw	r3, #2376	; 0x948
 8016364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	f103 32ff 	add.w	r2, r3, #4294967295
 801636e:	f640 1348 	movw	r3, #2376	; 0x948
 8016372:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016376:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8016378:	f640 1348 	movw	r3, #2376	; 0x948
 801637c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d103      	bne.n	801638e <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 8016386:	f04f 0000 	mov.w	r0, #0
 801638a:	f380 8811 	msr	BASEPRI, r0
	}
}
 801638e:	46bd      	mov	sp, r7
 8016390:	bc80      	pop	{r7}
 8016392:	4770      	bx	lr

08016394 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016394:	f3ef 8009 	mrs	r0, PSP
 8016398:	4b13      	ldr	r3, [pc, #76]	; (80163e8 <pxCurrentTCBConst>)
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80163a0:	f01e 0f10 	tst.w	lr, #16
 80163a4:	bf08      	it	eq
 80163a6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80163aa:	f840 ed04 	str.w	lr, [r0, #-4]!
 80163ae:	6010      	str	r0, [r2, #0]
 80163b0:	e92d 4008 	stmdb	sp!, {r3, lr}
 80163b4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80163b8:	f380 8811 	msr	BASEPRI, r0
 80163bc:	f001 fbfc 	bl	8017bb8 <vTaskSwitchContext>
 80163c0:	f04f 0000 	mov.w	r0, #0
 80163c4:	f380 8811 	msr	BASEPRI, r0
 80163c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80163cc:	6819      	ldr	r1, [r3, #0]
 80163ce:	6808      	ldr	r0, [r1, #0]
 80163d0:	f850 eb04 	ldr.w	lr, [r0], #4
 80163d4:	f01e 0f10 	tst.w	lr, #16
 80163d8:	bf08      	it	eq
 80163da:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80163de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80163e2:	f380 8809 	msr	PSP, r0
 80163e6:	4770      	bx	lr

080163e8 <pxCurrentTCBConst>:
 80163e8:	20000a24 	.word	0x20000a24

080163ec <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b082      	sub	sp, #8
 80163f0:	af00      	add	r7, sp, #0
    unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80163f2:	f64e 5304 	movw	r3, #60676	; 0xed04
 80163f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80163fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163fe:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8016400:	f04f 0300 	mov.w	r3, #0
 8016404:	607b      	str	r3, [r7, #4]
 8016406:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 801640a:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 801640e:	f001 fa97 	bl	8017940 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8016412:	f04f 0000 	mov.w	r0, #0
 8016416:	f380 8811 	msr	BASEPRI, r0
}
 801641a:	f107 0708 	add.w	r7, r7, #8
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop

08016424 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8016424:	b480      	push	{r7}
 8016426:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016428:	f24e 0314 	movw	r3, #57364	; 0xe014
 801642c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8016430:	f640 129c 	movw	r2, #2460	; 0x99c
 8016434:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8016438:	6811      	ldr	r1, [r2, #0]
 801643a:	f248 521f 	movw	r2, #34079	; 0x851f
 801643e:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 8016442:	fba2 0201 	umull	r0, r2, r2, r1
 8016446:	ea4f 1252 	mov.w	r2, r2, lsr #5
 801644a:	f102 32ff 	add.w	r2, r2, #4294967295
 801644e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8016450:	f24e 0310 	movw	r3, #57360	; 0xe010
 8016454:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8016458:	f04f 0207 	mov.w	r2, #7
 801645c:	601a      	str	r2, [r3, #0]
}
 801645e:	46bd      	mov	sp, r7
 8016460:	bc80      	pop	{r7}
 8016462:	4770      	bx	lr
 8016464:	e000ed08 	.word	0xe000ed08

08016468 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8016468:	b480      	push	{r7}
 801646a:	b083      	sub	sp, #12
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f103 0208 	add.w	r2, r3, #8
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f04f 32ff 	mov.w	r2, #4294967295
 8016480:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	f103 0208 	add.w	r2, r3, #8
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f103 0208 	add.w	r2, r3, #8
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f04f 0200 	mov.w	r2, #0
 801649c:	601a      	str	r2, [r3, #0]
}
 801649e:	f107 070c 	add.w	r7, r7, #12
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bc80      	pop	{r7}
 80164a6:	4770      	bx	lr

080164a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 80164a8:	b480      	push	{r7}
 80164aa:	b083      	sub	sp, #12
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f04f 0200 	mov.w	r2, #0
 80164b6:	611a      	str	r2, [r3, #16]
}
 80164b8:	f107 070c 	add.w	r7, r7, #12
 80164bc:	46bd      	mov	sp, r7
 80164be:	bc80      	pop	{r7}
 80164c0:	4770      	bx	lr
 80164c2:	bf00      	nop

080164c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 80164c4:	b480      	push	{r7}
 80164c6:	b085      	sub	sp, #20
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
 80164cc:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	685b      	ldr	r3, [r3, #4]
 80164d8:	461a      	mov	r2, r3
 80164da:	683b      	ldr	r3, [r7, #0]
 80164dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	685a      	ldr	r2, [r3, #4]
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	683a      	ldr	r2, [r7, #0]
 80164ec:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	683a      	ldr	r2, [r7, #0]
 80164f2:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	683a      	ldr	r2, [r7, #0]
 80164f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	687a      	ldr	r2, [r7, #4]
 80164fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	f103 0201 	add.w	r2, r3, #1
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	601a      	str	r2, [r3, #0]
}
 801650c:	f107 0714 	add.w	r7, r7, #20
 8016510:	46bd      	mov	sp, r7
 8016512:	bc80      	pop	{r7}
 8016514:	4770      	bx	lr
 8016516:	bf00      	nop

08016518 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8016518:	b480      	push	{r7}
 801651a:	b085      	sub	sp, #20
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
 8016520:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801652e:	d103      	bne.n	8016538 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	691b      	ldr	r3, [r3, #16]
 8016534:	60fb      	str	r3, [r7, #12]
 8016536:	e00e      	b.n	8016556 <vListInsert+0x3e>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f103 0308 	add.w	r3, r3, #8
 801653e:	60fb      	str	r3, [r7, #12]
 8016540:	e002      	b.n	8016548 <vListInsert+0x30>
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	685b      	ldr	r3, [r3, #4]
 8016546:	60fb      	str	r3, [r7, #12]
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	461a      	mov	r2, r3
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	429a      	cmp	r2, r3
 8016554:	d9f5      	bls.n	8016542 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	685b      	ldr	r3, [r3, #4]
 801655a:	461a      	mov	r2, r3
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	683a      	ldr	r2, [r7, #0]
 8016566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	68fa      	ldr	r2, [r7, #12]
 801656c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	683a      	ldr	r2, [r7, #0]
 8016572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	687a      	ldr	r2, [r7, #4]
 8016578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	f103 0201 	add.w	r2, r3, #1
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	601a      	str	r2, [r3, #0]
}
 8016586:	f107 0714 	add.w	r7, r7, #20
 801658a:	46bd      	mov	sp, r7
 801658c:	bc80      	pop	{r7}
 801658e:	4770      	bx	lr

08016590 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8016590:	b480      	push	{r7}
 8016592:	b085      	sub	sp, #20
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	687a      	ldr	r2, [r7, #4]
 801659e:	6892      	ldr	r2, [r2, #8]
 80165a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	689b      	ldr	r3, [r3, #8]
 80165a6:	687a      	ldr	r2, [r7, #4]
 80165a8:	6852      	ldr	r2, [r2, #4]
 80165aa:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	691b      	ldr	r3, [r3, #16]
 80165b0:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	685a      	ldr	r2, [r3, #4]
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d103      	bne.n	80165c4 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	689a      	ldr	r2, [r3, #8]
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f04f 0200 	mov.w	r2, #0
 80165ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	f103 32ff 	add.w	r2, r3, #4294967295
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	601a      	str	r2, [r3, #0]
}
 80165d8:	f107 0714 	add.w	r7, r7, #20
 80165dc:	46bd      	mov	sp, r7
 80165de:	bc80      	pop	{r7}
 80165e0:	4770      	bx	lr
 80165e2:	bf00      	nop

080165e4 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b086      	sub	sp, #24
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	6039      	str	r1, [r7, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80165ee:	f04f 0300 	mov.w	r3, #0
 80165f2:	617b      	str	r3, [r7, #20]

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d056      	beq.n	80166a8 <xQueueCreate+0xc4>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80165fa:	f04f 004c 	mov.w	r0, #76	; 0x4c
 80165fe:	f00f f887 	bl	8025710 <malloc>
 8016602:	4603      	mov	r3, r0
 8016604:	613b      	str	r3, [r7, #16]
		if( pxNewQueue != NULL )
 8016606:	693b      	ldr	r3, [r7, #16]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d04d      	beq.n	80166a8 <xQueueCreate+0xc4>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	683a      	ldr	r2, [r7, #0]
 8016610:	fb02 f303 	mul.w	r3, r2, r3
 8016614:	f103 0301 	add.w	r3, r3, #1
 8016618:	60fb      	str	r3, [r7, #12]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 801661a:	68f8      	ldr	r0, [r7, #12]
 801661c:	f00f f878 	bl	8025710 <malloc>
 8016620:	4603      	mov	r3, r0
 8016622:	461a      	mov	r2, r3
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8016628:	693b      	ldr	r3, [r7, #16]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d038      	beq.n	80166a2 <xQueueCreate+0xbe>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	681a      	ldr	r2, [r3, #0]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	6839      	ldr	r1, [r7, #0]
 8016638:	fb01 f303 	mul.w	r3, r1, r3
 801663c:	18d2      	adds	r2, r2, r3
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	f04f 0200 	mov.w	r2, #0
 8016648:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	681a      	ldr	r2, [r3, #0]
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	681a      	ldr	r2, [r3, #0]
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	f103 33ff 	add.w	r3, r3, #4294967295
 801665c:	6839      	ldr	r1, [r7, #0]
 801665e:	fb01 f303 	mul.w	r3, r1, r3
 8016662:	18d2      	adds	r2, r2, r3
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	687a      	ldr	r2, [r7, #4]
 801666c:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 801666e:	693b      	ldr	r3, [r7, #16]
 8016670:	683a      	ldr	r2, [r7, #0]
 8016672:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
 8016674:	693b      	ldr	r3, [r7, #16]
 8016676:	f04f 32ff 	mov.w	r2, #4294967295
 801667a:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 801667c:	693b      	ldr	r3, [r7, #16]
 801667e:	f04f 32ff 	mov.w	r2, #4294967295
 8016682:	649a      	str	r2, [r3, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8016684:	693b      	ldr	r3, [r7, #16]
 8016686:	f103 0310 	add.w	r3, r3, #16
 801668a:	4618      	mov	r0, r3
 801668c:	f7ff feec 	bl	8016468 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8016690:	693b      	ldr	r3, [r7, #16]
 8016692:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8016696:	4618      	mov	r0, r3
 8016698:	f7ff fee6 	bl	8016468 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 801669c:	693b      	ldr	r3, [r7, #16]
 801669e:	617b      	str	r3, [r7, #20]
 80166a0:	e002      	b.n	80166a8 <xQueueCreate+0xc4>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
 80166a2:	6938      	ldr	r0, [r7, #16]
 80166a4:	f00f f83c 	bl	8025720 <free>
		}
	}

	configASSERT( xReturn );

	return xReturn;
 80166a8:	697b      	ldr	r3, [r7, #20]
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	f107 0718 	add.w	r7, r7, #24
 80166b0:	46bd      	mov	sp, r7
 80166b2:	bd80      	pop	{r7, pc}

080166b4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80166ba:	f04f 004c 	mov.w	r0, #76	; 0x4c
 80166be:	f00f f827 	bl	8025710 <malloc>
 80166c2:	4603      	mov	r3, r0
 80166c4:	607b      	str	r3, [r7, #4]
		if( pxNewQueue != NULL )
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d038      	beq.n	801673e <xQueueCreateMutex+0x8a>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f04f 0200 	mov.w	r2, #0
 80166d2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	f04f 0200 	mov.w	r2, #0
 80166da:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	f04f 0200 	mov.w	r2, #0
 80166e2:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f04f 0200 	mov.w	r2, #0
 80166ea:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f04f 0200 	mov.w	r2, #0
 80166f2:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f04f 0201 	mov.w	r2, #1
 80166fa:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f04f 0200 	mov.w	r2, #0
 8016702:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f04f 32ff 	mov.w	r2, #4294967295
 801670a:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	f04f 32ff 	mov.w	r2, #4294967295
 8016712:	649a      	str	r2, [r3, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	f103 0310 	add.w	r3, r3, #16
 801671a:	4618      	mov	r0, r3
 801671c:	f7ff fea4 	bl	8016468 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8016726:	4618      	mov	r0, r3
 8016728:	f7ff fe9e 	bl	8016468 <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f04f 0100 	mov.w	r1, #0
 8016732:	f04f 0200 	mov.w	r2, #0
 8016736:	f04f 0300 	mov.w	r3, #0
 801673a:	f000 f807 	bl	801674c <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
 801673e:	687b      	ldr	r3, [r7, #4]
	}
 8016740:	4618      	mov	r0, r3
 8016742:	f107 0708 	add.w	r7, r7, #8
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}
 801674a:	bf00      	nop

0801674c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b088      	sub	sp, #32
 8016750:	af00      	add	r7, sp, #0
 8016752:	60f8      	str	r0, [r7, #12]
 8016754:	60b9      	str	r1, [r7, #8]
 8016756:	607a      	str	r2, [r7, #4]
 8016758:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 801675a:	f04f 0300 	mov.w	r3, #0
 801675e:	61fb      	str	r3, [r7, #28]
 8016760:	e000      	b.n	8016764 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8016762:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016764:	f7ff fde4 	bl	8016330 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801676c:	461a      	mov	r2, r3
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016772:	429a      	cmp	r2, r3
 8016774:	d218      	bcs.n	80167a8 <xQueueGenericSend+0x5c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016776:	68f8      	ldr	r0, [r7, #12]
 8016778:	68b9      	ldr	r1, [r7, #8]
 801677a:	683a      	ldr	r2, [r7, #0]
 801677c:	f000 f9fe 	bl	8016b7c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016784:	2b00      	cmp	r3, #0
 8016786:	d00a      	beq.n	801679e <xQueueGenericSend+0x52>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801678e:	4618      	mov	r0, r3
 8016790:	f001 faee 	bl	8017d70 <xTaskRemoveFromEventList>
 8016794:	4603      	mov	r3, r0
 8016796:	2b01      	cmp	r3, #1
 8016798:	d101      	bne.n	801679e <xQueueGenericSend+0x52>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 801679a:	f7ff fdbd 	bl	8016318 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 801679e:	f7ff fddd 	bl	801635c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 80167a2:	f04f 0301 	mov.w	r3, #1
 80167a6:	e05d      	b.n	8016864 <xQueueGenericSend+0x118>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d104      	bne.n	80167b8 <xQueueGenericSend+0x6c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80167ae:	f7ff fdd5 	bl	801635c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80167b2:	f04f 0300 	mov.w	r3, #0
 80167b6:	e055      	b.n	8016864 <xQueueGenericSend+0x118>
				}
				else if( xEntryTimeSet == pdFALSE )
 80167b8:	69fb      	ldr	r3, [r7, #28]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d107      	bne.n	80167ce <xQueueGenericSend+0x82>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80167be:	f107 0314 	add.w	r3, r7, #20
 80167c2:	4618      	mov	r0, r3
 80167c4:	f001 fb36 	bl	8017e34 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80167c8:	f04f 0301 	mov.w	r3, #1
 80167cc:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 80167ce:	f7ff fdc5 	bl	801635c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80167d2:	f000 ff01 	bl	80175d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80167d6:	f7ff fdab 	bl	8016330 <vPortEnterCritical>
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167e2:	d103      	bne.n	80167ec <xQueueGenericSend+0xa0>
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	f04f 0200 	mov.w	r2, #0
 80167ea:	645a      	str	r2, [r3, #68]	; 0x44
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80167f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167f4:	d103      	bne.n	80167fe <xQueueGenericSend+0xb2>
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	f04f 0200 	mov.w	r2, #0
 80167fc:	649a      	str	r2, [r3, #72]	; 0x48
 80167fe:	f7ff fdad 	bl	801635c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016802:	f107 0214 	add.w	r2, r7, #20
 8016806:	f107 0304 	add.w	r3, r7, #4
 801680a:	4610      	mov	r0, r2
 801680c:	4619      	mov	r1, r3
 801680e:	f001 fb29 	bl	8017e64 <xTaskCheckForTimeOut>
 8016812:	4603      	mov	r3, r0
 8016814:	2b00      	cmp	r3, #0
 8016816:	d11e      	bne.n	8016856 <xQueueGenericSend+0x10a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016818:	68f8      	ldr	r0, [r7, #12]
 801681a:	f000 fab3 	bl	8016d84 <prvIsQueueFull>
 801681e:	4603      	mov	r3, r0
 8016820:	2b00      	cmp	r3, #0
 8016822:	d012      	beq.n	801684a <xQueueGenericSend+0xfe>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	f103 0210 	add.w	r2, r3, #16
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	4610      	mov	r0, r2
 801682e:	4619      	mov	r1, r3
 8016830:	f001 fa62 	bl	8017cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016834:	68f8      	ldr	r0, [r7, #12]
 8016836:	f000 fa2d 	bl	8016c94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801683a:	f000 fedf 	bl	80175fc <xTaskResumeAll>
 801683e:	4603      	mov	r3, r0
 8016840:	2b00      	cmp	r3, #0
 8016842:	d18e      	bne.n	8016762 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8016844:	f7ff fd68 	bl	8016318 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8016848:	e78b      	b.n	8016762 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801684a:	68f8      	ldr	r0, [r7, #12]
 801684c:	f000 fa22 	bl	8016c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016850:	f000 fed4 	bl	80175fc <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8016854:	e785      	b.n	8016762 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	f000 fa1c 	bl	8016c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801685c:	f000 fece 	bl	80175fc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016860:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8016864:	4618      	mov	r0, r3
 8016866:	f107 0720 	add.w	r7, r7, #32
 801686a:	46bd      	mov	sp, r7
 801686c:	bd80      	pop	{r7, pc}
 801686e:	bf00      	nop

08016870 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b086      	sub	sp, #24
 8016874:	af00      	add	r7, sp, #0
 8016876:	60f8      	str	r0, [r7, #12]
 8016878:	60b9      	str	r1, [r7, #8]
 801687a:	607a      	str	r2, [r7, #4]
 801687c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801687e:	f04f 0300 	mov.w	r3, #0
 8016882:	613b      	str	r3, [r7, #16]
 8016884:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8016888:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016890:	461a      	mov	r2, r3
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016896:	429a      	cmp	r2, r3
 8016898:	d225      	bcs.n	80168e6 <xQueueGenericSendFromISR+0x76>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801689a:	68f8      	ldr	r0, [r7, #12]
 801689c:	68b9      	ldr	r1, [r7, #8]
 801689e:	683a      	ldr	r2, [r7, #0]
 80168a0:	f000 f96c 	bl	8016b7c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80168a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ac:	d111      	bne.n	80168d2 <xQueueGenericSendFromISR+0x62>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d013      	beq.n	80168de <xQueueGenericSendFromISR+0x6e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80168bc:	4618      	mov	r0, r3
 80168be:	f001 fa57 	bl	8017d70 <xTaskRemoveFromEventList>
 80168c2:	4603      	mov	r3, r0
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d00a      	beq.n	80168de <xQueueGenericSendFromISR+0x6e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f04f 0201 	mov.w	r2, #1
 80168ce:	601a      	str	r2, [r3, #0]
 80168d0:	e005      	b.n	80168de <xQueueGenericSendFromISR+0x6e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80168d6:	f103 0201 	add.w	r2, r3, #1
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80168de:	f04f 0301 	mov.w	r3, #1
 80168e2:	617b      	str	r3, [r7, #20]
 80168e4:	e002      	b.n	80168ec <xQueueGenericSendFromISR+0x7c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80168e6:	f04f 0300 	mov.w	r3, #0
 80168ea:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80168ec:	f04f 0000 	mov.w	r0, #0
 80168f0:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 80168f4:	697b      	ldr	r3, [r7, #20]
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	f107 0718 	add.w	r7, r7, #24
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}

08016900 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b088      	sub	sp, #32
 8016904:	af00      	add	r7, sp, #0
 8016906:	60f8      	str	r0, [r7, #12]
 8016908:	60b9      	str	r1, [r7, #8]
 801690a:	607a      	str	r2, [r7, #4]
 801690c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 801690e:	f04f 0300 	mov.w	r3, #0
 8016912:	61fb      	str	r3, [r7, #28]
 8016914:	e000      	b.n	8016918 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8016916:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8016918:	f7ff fd0a 	bl	8016330 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016920:	2b00      	cmp	r3, #0
 8016922:	d03f      	beq.n	80169a4 <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	68db      	ldr	r3, [r3, #12]
 8016928:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801692a:	68f8      	ldr	r0, [r7, #12]
 801692c:	68b9      	ldr	r1, [r7, #8]
 801692e:	f000 f989 	bl	8016c44 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d11e      	bne.n	8016976 <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801693c:	f103 32ff 	add.w	r2, r3, #4294967295
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d104      	bne.n	8016956 <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 801694c:	f001 fd64 	bl	8018418 <xTaskGetCurrentTaskHandle>
 8016950:	4602      	mov	r2, r0
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	691b      	ldr	r3, [r3, #16]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d01d      	beq.n	801699a <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	f103 0310 	add.w	r3, r3, #16
 8016964:	4618      	mov	r0, r3
 8016966:	f001 fa03 	bl	8017d70 <xTaskRemoveFromEventList>
 801696a:	4603      	mov	r3, r0
 801696c:	2b01      	cmp	r3, #1
 801696e:	d114      	bne.n	801699a <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
 8016970:	f7ff fcd2 	bl	8016318 <vPortYieldFromISR>
 8016974:	e011      	b.n	801699a <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	69ba      	ldr	r2, [r7, #24]
 801697a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016980:	2b00      	cmp	r3, #0
 8016982:	d00a      	beq.n	801699a <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801698a:	4618      	mov	r0, r3
 801698c:	f001 f9f0 	bl	8017d70 <xTaskRemoveFromEventList>
 8016990:	4603      	mov	r3, r0
 8016992:	2b00      	cmp	r3, #0
 8016994:	d001      	beq.n	801699a <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8016996:	f7ff fcbf 	bl	8016318 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 801699a:	f7ff fcdf 	bl	801635c <vPortExitCritical>
				return pdPASS;
 801699e:	f04f 0301 	mov.w	r3, #1
 80169a2:	e06b      	b.n	8016a7c <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d104      	bne.n	80169b4 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80169aa:	f7ff fcd7 	bl	801635c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80169ae:	f04f 0300 	mov.w	r3, #0
 80169b2:	e063      	b.n	8016a7c <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d107      	bne.n	80169ca <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80169ba:	f107 0310 	add.w	r3, r7, #16
 80169be:	4618      	mov	r0, r3
 80169c0:	f001 fa38 	bl	8017e34 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80169c4:	f04f 0301 	mov.w	r3, #1
 80169c8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 80169ca:	f7ff fcc7 	bl	801635c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80169ce:	f000 fe03 	bl	80175d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80169d2:	f7ff fcad 	bl	8016330 <vPortEnterCritical>
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80169da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169de:	d103      	bne.n	80169e8 <xQueueGenericReceive+0xe8>
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f04f 0200 	mov.w	r2, #0
 80169e6:	645a      	str	r2, [r3, #68]	; 0x44
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80169ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169f0:	d103      	bne.n	80169fa <xQueueGenericReceive+0xfa>
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	f04f 0200 	mov.w	r2, #0
 80169f8:	649a      	str	r2, [r3, #72]	; 0x48
 80169fa:	f7ff fcaf 	bl	801635c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80169fe:	f107 0210 	add.w	r2, r7, #16
 8016a02:	f107 0304 	add.w	r3, r7, #4
 8016a06:	4610      	mov	r0, r2
 8016a08:	4619      	mov	r1, r3
 8016a0a:	f001 fa2b 	bl	8017e64 <xTaskCheckForTimeOut>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d12c      	bne.n	8016a6e <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016a14:	68f8      	ldr	r0, [r7, #12]
 8016a16:	f000 f98d 	bl	8016d34 <prvIsQueueEmpty>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d020      	beq.n	8016a62 <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d108      	bne.n	8016a3a <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
 8016a28:	f7ff fc82 	bl	8016330 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	685b      	ldr	r3, [r3, #4]
 8016a30:	4618      	mov	r0, r3
 8016a32:	f001 fd01 	bl	8018438 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8016a36:	f7ff fc91 	bl	801635c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	4610      	mov	r0, r2
 8016a44:	4619      	mov	r1, r3
 8016a46:	f001 f957 	bl	8017cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016a4a:	68f8      	ldr	r0, [r7, #12]
 8016a4c:	f000 f922 	bl	8016c94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016a50:	f000 fdd4 	bl	80175fc <xTaskResumeAll>
 8016a54:	4603      	mov	r3, r0
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	f47f af5d 	bne.w	8016916 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 8016a5c:	f7ff fc5c 	bl	8016318 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8016a60:	e759      	b.n	8016916 <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016a62:	68f8      	ldr	r0, [r7, #12]
 8016a64:	f000 f916 	bl	8016c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016a68:	f000 fdc8 	bl	80175fc <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8016a6c:	e753      	b.n	8016916 <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8016a6e:	68f8      	ldr	r0, [r7, #12]
 8016a70:	f000 f910 	bl	8016c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016a74:	f000 fdc2 	bl	80175fc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8016a78:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f107 0720 	add.w	r7, r7, #32
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
 8016a86:	bf00      	nop

08016a88 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b086      	sub	sp, #24
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	60f8      	str	r0, [r7, #12]
 8016a90:	60b9      	str	r1, [r7, #8]
 8016a92:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016a94:	f04f 0300 	mov.w	r3, #0
 8016a98:	613b      	str	r3, [r7, #16]
 8016a9a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8016a9e:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d02a      	beq.n	8016b00 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016aaa:	68f8      	ldr	r0, [r7, #12]
 8016aac:	68b9      	ldr	r1, [r7, #8]
 8016aae:	f000 f8c9 	bl	8016c44 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ab6:	f103 32ff 	add.w	r2, r3, #4294967295
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ac6:	d111      	bne.n	8016aec <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	691b      	ldr	r3, [r3, #16]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d013      	beq.n	8016af8 <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	f103 0310 	add.w	r3, r3, #16
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f001 f94a 	bl	8017d70 <xTaskRemoveFromEventList>
 8016adc:	4603      	mov	r3, r0
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d00a      	beq.n	8016af8 <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	f04f 0201 	mov.w	r2, #1
 8016ae8:	601a      	str	r2, [r3, #0]
 8016aea:	e005      	b.n	8016af8 <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016af0:	f103 0201 	add.w	r2, r3, #1
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016af8:	f04f 0301 	mov.w	r3, #1
 8016afc:	617b      	str	r3, [r7, #20]
 8016afe:	e002      	b.n	8016b06 <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
 8016b00:	f04f 0300 	mov.w	r3, #0
 8016b04:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8016b06:	f04f 0000 	mov.w	r0, #0
 8016b0a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 8016b0e:	697b      	ldr	r3, [r7, #20]
}
 8016b10:	4618      	mov	r0, r3
 8016b12:	f107 0718 	add.w	r7, r7, #24
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop

08016b1c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b084      	sub	sp, #16
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8016b24:	f7ff fc04 	bl	8016330 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b2c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8016b2e:	f7ff fc15 	bl	801635c <vPortExitCritical>

	return uxReturn;
 8016b32:	68fb      	ldr	r3, [r7, #12]
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	f107 0710 	add.w	r7, r7, #16
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop

08016b40 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
 8016b40:	b480      	push	{r7}
 8016b42:	b085      	sub	sp, #20
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b4c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8016b4e:	68fb      	ldr	r3, [r7, #12]
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	f107 0714 	add.w	r7, r7, #20
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bc80      	pop	{r7}
 8016b5a:	4770      	bx	lr

08016b5c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b082      	sub	sp, #8
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f00e fdd9 	bl	8025720 <free>
	vPortFree( pxQueue );
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f00e fdd6 	bl	8025720 <free>
}
 8016b74:	f107 0708 	add.w	r7, r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b084      	sub	sp, #16
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	60f8      	str	r0, [r7, #12]
 8016b84:	60b9      	str	r1, [r7, #8]
 8016b86:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d10d      	bne.n	8016bac <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d14a      	bne.n	8016c2e <prvCopyDataToQueue+0xb2>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	685b      	ldr	r3, [r3, #4]
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f001 fcb7 	bl	8018510 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	f04f 0200 	mov.w	r2, #0
 8016ba8:	605a      	str	r2, [r3, #4]
 8016baa:	e040      	b.n	8016c2e <prvCopyDataToQueue+0xb2>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d11b      	bne.n	8016bea <prvCopyDataToQueue+0x6e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	6899      	ldr	r1, [r3, #8]
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bba:	68ba      	ldr	r2, [r7, #8]
 8016bbc:	4608      	mov	r0, r1
 8016bbe:	4611      	mov	r1, r2
 8016bc0:	461a      	mov	r2, r3
 8016bc2:	f00f f8db 	bl	8025d7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	689a      	ldr	r2, [r3, #8]
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bce:	18d2      	adds	r2, r2, r3
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	689a      	ldr	r2, [r3, #8]
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	685b      	ldr	r3, [r3, #4]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d326      	bcc.n	8016c2e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	681a      	ldr	r2, [r3, #0]
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	609a      	str	r2, [r3, #8]
 8016be8:	e021      	b.n	8016c2e <prvCopyDataToQueue+0xb2>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	68d9      	ldr	r1, [r3, #12]
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bf2:	68ba      	ldr	r2, [r7, #8]
 8016bf4:	4608      	mov	r0, r1
 8016bf6:	4611      	mov	r1, r2
 8016bf8:	461a      	mov	r2, r3
 8016bfa:	f00f f8bf 	bl	8025d7c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	68da      	ldr	r2, [r3, #12]
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c06:	f1c3 0300 	rsb	r3, r3, #0
 8016c0a:	18d2      	adds	r2, r2, r3
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	68da      	ldr	r2, [r3, #12]
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d208      	bcs.n	8016c2e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	685a      	ldr	r2, [r3, #4]
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c24:	f1c3 0300 	rsb	r3, r3, #0
 8016c28:	18d2      	adds	r2, r2, r3
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c32:	f103 0201 	add.w	r2, r3, #1
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	639a      	str	r2, [r3, #56]	; 0x38
}
 8016c3a:	f107 0710 	add.w	r7, r7, #16
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bd80      	pop	{r7, pc}
 8016c42:	bf00      	nop

08016c44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b082      	sub	sp, #8
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
 8016c4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d01a      	beq.n	8016c8c <prvCopyDataFromQueue+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	68da      	ldr	r2, [r3, #12]
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c5e:	18d2      	adds	r2, r2, r3
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	68da      	ldr	r2, [r3, #12]
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	685b      	ldr	r3, [r3, #4]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d303      	bcc.n	8016c78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681a      	ldr	r2, [r3, #0]
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	68da      	ldr	r2, [r3, #12]
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c80:	6839      	ldr	r1, [r7, #0]
 8016c82:	4608      	mov	r0, r1
 8016c84:	4611      	mov	r1, r2
 8016c86:	461a      	mov	r2, r3
 8016c88:	f00f f878 	bl	8025d7c <memcpy>
	}
}
 8016c8c:	f107 0708 	add.w	r7, r7, #8
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016c9c:	f7ff fb48 	bl	8016330 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8016ca0:	e014      	b.n	8016ccc <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d015      	beq.n	8016cd6 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f001 f85d 	bl	8017d70 <xTaskRemoveFromEventList>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d001      	beq.n	8016cc0 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8016cbc:	f001 f924 	bl	8017f08 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016cc4:	f103 32ff 	add.w	r2, r3, #4294967295
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	dce6      	bgt.n	8016ca2 <prvUnlockQueue+0xe>
 8016cd4:	e000      	b.n	8016cd8 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
 8016cd6:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	f04f 32ff 	mov.w	r2, #4294967295
 8016cde:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8016ce0:	f7ff fb3c 	bl	801635c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016ce4:	f7ff fb24 	bl	8016330 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8016ce8:	e014      	b.n	8016d14 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	691b      	ldr	r3, [r3, #16]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d015      	beq.n	8016d1e <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	f103 0310 	add.w	r3, r3, #16
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f001 f839 	bl	8017d70 <xTaskRemoveFromEventList>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d001      	beq.n	8016d08 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 8016d04:	f001 f900 	bl	8017f08 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d0c:	f103 32ff 	add.w	r2, r3, #4294967295
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	dce6      	bgt.n	8016cea <prvUnlockQueue+0x56>
 8016d1c:	e000      	b.n	8016d20 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 8016d1e:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f04f 32ff 	mov.w	r2, #4294967295
 8016d26:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016d28:	f7ff fb18 	bl	801635c <vPortExitCritical>
}
 8016d2c:	f107 0708 	add.w	r7, r7, #8
 8016d30:	46bd      	mov	sp, r7
 8016d32:	bd80      	pop	{r7, pc}

08016d34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b084      	sub	sp, #16
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8016d3c:	f7ff faf8 	bl	8016330 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	bf14      	ite	ne
 8016d48:	2300      	movne	r3, #0
 8016d4a:	2301      	moveq	r3, #1
 8016d4c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8016d4e:	f7ff fb05 	bl	801635c <vPortExitCritical>

	return xReturn;
 8016d52:	68fb      	ldr	r3, [r7, #12]
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	f107 0710 	add.w	r7, r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}
 8016d5e:	bf00      	nop

08016d60 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
 8016d60:	b480      	push	{r7}
 8016d62:	b085      	sub	sp, #20
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	bf14      	ite	ne
 8016d70:	2300      	movne	r3, #0
 8016d72:	2301      	moveq	r3, #1
 8016d74:	60fb      	str	r3, [r7, #12]

	return xReturn;
 8016d76:	68fb      	ldr	r3, [r7, #12]
}
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f107 0714 	add.w	r7, r7, #20
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	bc80      	pop	{r7}
 8016d82:	4770      	bx	lr

08016d84 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b084      	sub	sp, #16
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8016d8c:	f7ff fad0 	bl	8016330 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d94:	461a      	mov	r2, r3
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	bf14      	ite	ne
 8016d9e:	2300      	movne	r3, #0
 8016da0:	2301      	moveq	r3, #1
 8016da2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8016da4:	f7ff fada 	bl	801635c <vPortExitCritical>

	return xReturn;
 8016da8:	68fb      	ldr	r3, [r7, #12]
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	f107 0710 	add.w	r7, r7, #16
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}

08016db4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
 8016db4:	b480      	push	{r7}
 8016db6:	b085      	sub	sp, #20
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dc0:	461a      	mov	r2, r3
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	bf14      	ite	ne
 8016dca:	2300      	movne	r3, #0
 8016dcc:	2301      	moveq	r3, #1
 8016dce:	60fb      	str	r3, [r7, #12]

	return xReturn;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f107 0714 	add.w	r7, r7, #20
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bc80      	pop	{r7}
 8016ddc:	4770      	bx	lr
 8016dde:	bf00      	nop

08016de0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b08a      	sub	sp, #40	; 0x28
 8016de4:	af02      	add	r7, sp, #8
 8016de6:	60f8      	str	r0, [r7, #12]
 8016de8:	60b9      	str	r1, [r7, #8]
 8016dea:	603b      	str	r3, [r7, #0]
 8016dec:	4613      	mov	r3, r2
 8016dee:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8016df0:	88fb      	ldrh	r3, [r7, #6]
 8016df2:	4618      	mov	r0, r3
 8016df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016df6:	f001 f9cd 	bl	8018194 <prvAllocateTCBAndStack>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
 8016dfe:	69bb      	ldr	r3, [r7, #24]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	f000 80a5 	beq.w	8016f50 <xTaskGenericCreate+0x170>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8016e06:	69bb      	ldr	r3, [r7, #24]
 8016e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016e0a:	88fb      	ldrh	r3, [r7, #6]
 8016e0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8016e10:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016e14:	18d3      	adds	r3, r2, r3
 8016e16:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8016e18:	697b      	ldr	r3, [r7, #20]
 8016e1a:	f023 0307 	bic.w	r3, r3, #7
 8016e1e:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8016e20:	88fb      	ldrh	r3, [r7, #6]
 8016e22:	9300      	str	r3, [sp, #0]
 8016e24:	69b8      	ldr	r0, [r7, #24]
 8016e26:	68b9      	ldr	r1, [r7, #8]
 8016e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e2c:	f001 f88a 	bl	8017f44 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016e30:	6978      	ldr	r0, [r7, #20]
 8016e32:	68f9      	ldr	r1, [r7, #12]
 8016e34:	683a      	ldr	r2, [r7, #0]
 8016e36:	f7ff f9f3 	bl	8016220 <pxPortInitialiseStack>
 8016e3a:	4602      	mov	r2, r0
 8016e3c:	69bb      	ldr	r3, [r7, #24]
 8016e3e:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8016e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d002      	beq.n	8016e4c <xTaskGenericCreate+0x6c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8016e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e48:	69ba      	ldr	r2, [r7, #24]
 8016e4a:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8016e4c:	f7ff fa70 	bl	8016330 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8016e50:	f640 3364 	movw	r3, #2916	; 0xb64
 8016e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f103 0201 	add.w	r2, r3, #1
 8016e5e:	f640 3364 	movw	r3, #2916	; 0xb64
 8016e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e66:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8016e68:	f640 2324 	movw	r3, #2596	; 0xa24
 8016e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d10f      	bne.n	8016e96 <xTaskGenericCreate+0xb6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8016e76:	f640 2324 	movw	r3, #2596	; 0xa24
 8016e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e7e:	69ba      	ldr	r2, [r7, #24]
 8016e80:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8016e82:	f640 3364 	movw	r3, #2916	; 0xb64
 8016e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	d118      	bne.n	8016ec2 <xTaskGenericCreate+0xe2>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8016e90:	f001 f89c 	bl	8017fcc <prvInitialiseTaskLists>
 8016e94:	e015      	b.n	8016ec2 <xTaskGenericCreate+0xe2>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8016e96:	f640 3374 	movw	r3, #2932	; 0xb74
 8016e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d10e      	bne.n	8016ec2 <xTaskGenericCreate+0xe2>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8016ea4:	f640 2324 	movw	r3, #2596	; 0xa24
 8016ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb2:	429a      	cmp	r2, r3
 8016eb4:	d805      	bhi.n	8016ec2 <xTaskGenericCreate+0xe2>
					{
						pxCurrentTCB = pxNewTCB;
 8016eb6:	f640 2324 	movw	r3, #2596	; 0xa24
 8016eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016ebe:	69ba      	ldr	r2, [r7, #24]
 8016ec0:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8016ec2:	69bb      	ldr	r3, [r7, #24]
 8016ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ec6:	f640 336c 	movw	r3, #2924	; 0xb6c
 8016eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d906      	bls.n	8016ee2 <xTaskGenericCreate+0x102>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8016ed4:	69bb      	ldr	r3, [r7, #24]
 8016ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ed8:	f640 336c 	movw	r3, #2924	; 0xb6c
 8016edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016ee0:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8016ee2:	f640 3388 	movw	r3, #2952	; 0xb88
 8016ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	f103 0201 	add.w	r2, r3, #1
 8016ef0:	f640 3388 	movw	r3, #2952	; 0xb88
 8016ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016ef8:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8016efa:	69bb      	ldr	r3, [r7, #24]
 8016efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016efe:	f640 3370 	movw	r3, #2928	; 0xb70
 8016f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d906      	bls.n	8016f1a <xTaskGenericCreate+0x13a>
 8016f0c:	69bb      	ldr	r3, [r7, #24]
 8016f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f10:	f640 3370 	movw	r3, #2928	; 0xb70
 8016f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f18:	601a      	str	r2, [r3, #0]
 8016f1a:	69bb      	ldr	r3, [r7, #24]
 8016f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f1e:	4613      	mov	r3, r2
 8016f20:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016f24:	189b      	adds	r3, r3, r2
 8016f26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016f2a:	461a      	mov	r2, r3
 8016f2c:	f640 2328 	movw	r3, #2600	; 0xa28
 8016f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f34:	18d2      	adds	r2, r2, r3
 8016f36:	69bb      	ldr	r3, [r7, #24]
 8016f38:	f103 0304 	add.w	r3, r3, #4
 8016f3c:	4610      	mov	r0, r2
 8016f3e:	4619      	mov	r1, r3
 8016f40:	f7ff fac0 	bl	80164c4 <vListInsertEnd>

			xReturn = pdPASS;
 8016f44:	f04f 0301 	mov.w	r3, #1
 8016f48:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8016f4a:	f7ff fa07 	bl	801635c <vPortExitCritical>
 8016f4e:	e002      	b.n	8016f56 <xTaskGenericCreate+0x176>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016f50:	f04f 33ff 	mov.w	r3, #4294967295
 8016f54:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8016f56:	69fb      	ldr	r3, [r7, #28]
 8016f58:	2b01      	cmp	r3, #1
 8016f5a:	d111      	bne.n	8016f80 <xTaskGenericCreate+0x1a0>
	{
		if( xSchedulerRunning != pdFALSE )
 8016f5c:	f640 3374 	movw	r3, #2932	; 0xb74
 8016f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d00a      	beq.n	8016f80 <xTaskGenericCreate+0x1a0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8016f6a:	f640 2324 	movw	r3, #2596	; 0xa24
 8016f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d201      	bcs.n	8016f80 <xTaskGenericCreate+0x1a0>
			{
				portYIELD_WITHIN_API();
 8016f7c:	f7ff f9cc 	bl	8016318 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8016f80:	69fb      	ldr	r3, [r7, #28]
}
 8016f82:	4618      	mov	r0, r3
 8016f84:	f107 0720 	add.w	r7, r7, #32
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}

08016f8c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b084      	sub	sp, #16
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8016f94:	f7ff f9cc 	bl	8016330 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
 8016f98:	f640 2324 	movw	r3, #2596	; 0xa24
 8016f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	687a      	ldr	r2, [r7, #4]
 8016fa4:	429a      	cmp	r2, r3
 8016fa6:	d102      	bne.n	8016fae <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
 8016fa8:	f04f 0300 	mov.w	r3, #0
 8016fac:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d105      	bne.n	8016fc0 <vTaskDelete+0x34>
 8016fb4:	f640 2324 	movw	r3, #2596	; 0xa24
 8016fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	e000      	b.n	8016fc2 <vTaskDelete+0x36>
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	f103 0304 	add.w	r3, r3, #4
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7ff fae0 	bl	8016590 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d005      	beq.n	8016fe4 <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	f103 0318 	add.w	r3, r3, #24
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7ff fad6 	bl	8016590 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	f103 0304 	add.w	r3, r3, #4
 8016fea:	f640 3034 	movw	r0, #2868	; 0xb34
 8016fee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	f7ff fa66 	bl	80164c4 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8016ff8:	f640 3348 	movw	r3, #2888	; 0xb48
 8016ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	f103 0201 	add.w	r2, r3, #1
 8017006:	f640 3348 	movw	r3, #2888	; 0xb48
 801700a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801700e:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8017010:	f640 3388 	movw	r3, #2952	; 0xb88
 8017014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	f103 0201 	add.w	r2, r3, #1
 801701e:	f640 3388 	movw	r3, #2952	; 0xb88
 8017022:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017026:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8017028:	f7ff f998 	bl	801635c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 801702c:	f640 3374 	movw	r3, #2932	; 0xb74
 8017030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d004      	beq.n	8017044 <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d101      	bne.n	8017044 <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
 8017040:	f7ff f96a 	bl	8016318 <vPortYieldFromISR>
			}
		}
	}
 8017044:	f107 0710 	add.w	r7, r7, #16
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}

0801704c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 801704c:	b580      	push	{r7, lr}
 801704e:	b086      	sub	sp, #24
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
 8017054:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8017056:	f04f 0300 	mov.w	r3, #0
 801705a:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
 801705c:	f000 fabc 	bl	80175d8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	681a      	ldr	r2, [r3, #0]
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	18d3      	adds	r3, r2, r3
 8017068:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	681a      	ldr	r2, [r3, #0]
 801706e:	f640 3368 	movw	r3, #2920	; 0xb68
 8017072:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	429a      	cmp	r2, r3
 801707a:	d910      	bls.n	801709e <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681a      	ldr	r2, [r3, #0]
 8017080:	693b      	ldr	r3, [r7, #16]
 8017082:	429a      	cmp	r2, r3
 8017084:	d91b      	bls.n	80170be <vTaskDelayUntil+0x72>
 8017086:	f640 3368 	movw	r3, #2920	; 0xb68
 801708a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	693a      	ldr	r2, [r7, #16]
 8017092:	429a      	cmp	r2, r3
 8017094:	d913      	bls.n	80170be <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8017096:	f04f 0301 	mov.w	r3, #1
 801709a:	617b      	str	r3, [r7, #20]
 801709c:	e00f      	b.n	80170be <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	681a      	ldr	r2, [r3, #0]
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d807      	bhi.n	80170b8 <vTaskDelayUntil+0x6c>
 80170a8:	f640 3368 	movw	r3, #2920	; 0xb68
 80170ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	693a      	ldr	r2, [r7, #16]
 80170b4:	429a      	cmp	r2, r3
 80170b6:	d902      	bls.n	80170be <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 80170b8:	f04f 0301 	mov.w	r3, #1
 80170bc:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	693a      	ldr	r2, [r7, #16]
 80170c2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d00c      	beq.n	80170e4 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80170ca:	f640 2324 	movw	r3, #2596	; 0xa24
 80170ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	f103 0304 	add.w	r3, r3, #4
 80170d8:	4618      	mov	r0, r3
 80170da:	f7ff fa59 	bl	8016590 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80170de:	6938      	ldr	r0, [r7, #16]
 80170e0:	f001 f812 	bl	8018108 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80170e4:	f000 fa8a 	bl	80175fc <xTaskResumeAll>
 80170e8:	4603      	mov	r3, r0
 80170ea:	60fb      	str	r3, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d101      	bne.n	80170f6 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 80170f2:	f7ff f911 	bl	8016318 <vPortYieldFromISR>
		}
	}
 80170f6:	f107 0718 	add.w	r7, r7, #24
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}
 80170fe:	bf00      	nop

08017100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8017100:	b580      	push	{r7, lr}
 8017102:	b084      	sub	sp, #16
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8017108:	f04f 0300 	mov.w	r3, #0
 801710c:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d01a      	beq.n	801714a <vTaskDelay+0x4a>
		{
			vTaskSuspendAll();
 8017114:	f000 fa60 	bl	80175d8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8017118:	f640 3368 	movw	r3, #2920	; 0xb68
 801711c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017120:	681a      	ldr	r2, [r3, #0]
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	18d3      	adds	r3, r2, r3
 8017126:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8017128:	f640 2324 	movw	r3, #2596	; 0xa24
 801712c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	f103 0304 	add.w	r3, r3, #4
 8017136:	4618      	mov	r0, r3
 8017138:	f7ff fa2a 	bl	8016590 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 801713c:	68b8      	ldr	r0, [r7, #8]
 801713e:	f000 ffe3 	bl	8018108 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017142:	f000 fa5b 	bl	80175fc <xTaskResumeAll>
 8017146:	4603      	mov	r3, r0
 8017148:	60fb      	str	r3, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d101      	bne.n	8017154 <vTaskDelay+0x54>
		{
			portYIELD_WITHIN_API();
 8017150:	f7ff f8e2 	bl	8016318 <vPortYieldFromISR>
		}
	}
 8017154:	f107 0710 	add.w	r7, r7, #16
 8017158:	46bd      	mov	sp, r7
 801715a:	bd80      	pop	{r7, pc}

0801715c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
 801715c:	b580      	push	{r7, lr}
 801715e:	b084      	sub	sp, #16
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
 8017164:	f7ff f8e4 	bl	8016330 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d105      	bne.n	801717a <uxTaskPriorityGet+0x1e>
 801716e:	f640 2324 	movw	r3, #2596	; 0xa24
 8017172:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	e000      	b.n	801717c <uxTaskPriorityGet+0x20>
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017182:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8017184:	f7ff f8ea 	bl	801635c <vPortExitCritical>

		return uxReturn;
 8017188:	68bb      	ldr	r3, [r7, #8]
	}
 801718a:	4618      	mov	r0, r3
 801718c:	f107 0710 	add.w	r7, r7, #16
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}

08017194 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
 8017194:	b580      	push	{r7, lr}
 8017196:	b086      	sub	sp, #24
 8017198:	af00      	add	r7, sp, #0
 801719a:	6078      	str	r0, [r7, #4]
 801719c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
 801719e:	f04f 0300 	mov.w	r3, #0
 80171a2:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	2b09      	cmp	r3, #9
 80171a8:	d902      	bls.n	80171b0 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 80171aa:	f04f 0309 	mov.w	r3, #9
 80171ae:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
 80171b0:	f7ff f8be 	bl	8016330 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
 80171b4:	f640 2324 	movw	r3, #2596	; 0xa24
 80171b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	687a      	ldr	r2, [r7, #4]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	d102      	bne.n	80171ca <vTaskPrioritySet+0x36>
			{
				pxTask = NULL;
 80171c4:	f04f 0300 	mov.w	r3, #0
 80171c8:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d105      	bne.n	80171dc <vTaskPrioritySet+0x48>
 80171d0:	f640 2324 	movw	r3, #2596	; 0xa24
 80171d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	e000      	b.n	80171de <vTaskPrioritySet+0x4a>
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171e4:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
 80171e6:	68fa      	ldr	r2, [r7, #12]
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	429a      	cmp	r2, r3
 80171ec:	d062      	beq.n	80172b4 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
 80171ee:	683a      	ldr	r2, [r7, #0]
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	429a      	cmp	r2, r3
 80171f4:	d906      	bls.n	8017204 <vTaskPrioritySet+0x70>
				{
					if( pxTask != NULL )
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d009      	beq.n	8017210 <vTaskPrioritySet+0x7c>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
 80171fc:	f04f 0301 	mov.w	r3, #1
 8017200:	617b      	str	r3, [r7, #20]
 8017202:	e005      	b.n	8017210 <vTaskPrioritySet+0x7c>
					}
				}
				else if( pxTask == NULL )
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d102      	bne.n	8017210 <vTaskPrioritySet+0x7c>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
 801720a:	f04f 0301 	mov.w	r3, #1
 801720e:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8017210:	693b      	ldr	r3, [r7, #16]
 8017212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017214:	693b      	ldr	r3, [r7, #16]
 8017216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017218:	429a      	cmp	r2, r3
 801721a:	d102      	bne.n	8017222 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
 801721c:	693b      	ldr	r3, [r7, #16]
 801721e:	683a      	ldr	r2, [r7, #0]
 8017220:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8017222:	693b      	ldr	r3, [r7, #16]
 8017224:	683a      	ldr	r2, [r7, #0]
 8017226:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	f1c3 020a 	rsb	r2, r3, #10
 801722e:	693b      	ldr	r3, [r7, #16]
 8017230:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
 8017232:	693b      	ldr	r3, [r7, #16]
 8017234:	6959      	ldr	r1, [r3, #20]
 8017236:	68fa      	ldr	r2, [r7, #12]
 8017238:	4613      	mov	r3, r2
 801723a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801723e:	189b      	adds	r3, r3, r2
 8017240:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017244:	461a      	mov	r2, r3
 8017246:	f640 2328 	movw	r3, #2600	; 0xa28
 801724a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801724e:	18d3      	adds	r3, r2, r3
 8017250:	4299      	cmp	r1, r3
 8017252:	d12a      	bne.n	80172aa <vTaskPrioritySet+0x116>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
 8017254:	693b      	ldr	r3, [r7, #16]
 8017256:	f103 0304 	add.w	r3, r3, #4
 801725a:	4618      	mov	r0, r3
 801725c:	f7ff f998 	bl	8016590 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017264:	f640 3370 	movw	r3, #2928	; 0xb70
 8017268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	429a      	cmp	r2, r3
 8017270:	d906      	bls.n	8017280 <vTaskPrioritySet+0xec>
 8017272:	693b      	ldr	r3, [r7, #16]
 8017274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017276:	f640 3370 	movw	r3, #2928	; 0xb70
 801727a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801727e:	601a      	str	r2, [r3, #0]
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017284:	4613      	mov	r3, r2
 8017286:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801728a:	189b      	adds	r3, r3, r2
 801728c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017290:	461a      	mov	r2, r3
 8017292:	f640 2328 	movw	r3, #2600	; 0xa28
 8017296:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801729a:	18d2      	adds	r2, r2, r3
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	f103 0304 	add.w	r3, r3, #4
 80172a2:	4610      	mov	r0, r2
 80172a4:	4619      	mov	r1, r3
 80172a6:	f7ff f90d 	bl	80164c4 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
 80172aa:	697b      	ldr	r3, [r7, #20]
 80172ac:	2b01      	cmp	r3, #1
 80172ae:	d101      	bne.n	80172b4 <vTaskPrioritySet+0x120>
				{
					portYIELD_WITHIN_API();
 80172b0:	f7ff f832 	bl	8016318 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
 80172b4:	f7ff f852 	bl	801635c <vPortExitCritical>
	}
 80172b8:	f107 0718 	add.w	r7, r7, #24
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}

080172c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b084      	sub	sp, #16
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 80172c8:	f7ff f832 	bl	8016330 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
 80172cc:	f640 2324 	movw	r3, #2596	; 0xa24
 80172d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	687a      	ldr	r2, [r7, #4]
 80172d8:	429a      	cmp	r2, r3
 80172da:	d102      	bne.n	80172e2 <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
 80172dc:	f04f 0300 	mov.w	r3, #0
 80172e0:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d105      	bne.n	80172f4 <vTaskSuspend+0x34>
 80172e8:	f640 2324 	movw	r3, #2596	; 0xa24
 80172ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	e000      	b.n	80172f6 <vTaskSuspend+0x36>
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	f103 0304 	add.w	r3, r3, #4
 80172fe:	4618      	mov	r0, r3
 8017300:	f7ff f946 	bl	8016590 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017308:	2b00      	cmp	r3, #0
 801730a:	d005      	beq.n	8017318 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	f103 0318 	add.w	r3, r3, #24
 8017312:	4618      	mov	r0, r3
 8017314:	f7ff f93c 	bl	8016590 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	f103 0304 	add.w	r3, r3, #4
 801731e:	f640 304c 	movw	r0, #2892	; 0xb4c
 8017322:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017326:	4619      	mov	r1, r3
 8017328:	f7ff f8cc 	bl	80164c4 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 801732c:	f7ff f816 	bl	801635c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d120      	bne.n	8017378 <vTaskSuspend+0xb8>
		{
			if( xSchedulerRunning != pdFALSE )
 8017336:	f640 3374 	movw	r3, #2932	; 0xb74
 801733a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d002      	beq.n	801734a <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
 8017344:	f7fe ffe8 	bl	8016318 <vPortYieldFromISR>
 8017348:	e016      	b.n	8017378 <vTaskSuspend+0xb8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 801734a:	f640 334c 	movw	r3, #2892	; 0xb4c
 801734e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	461a      	mov	r2, r3
 8017356:	f640 3364 	movw	r3, #2916	; 0xb64
 801735a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	429a      	cmp	r2, r3
 8017362:	d107      	bne.n	8017374 <vTaskSuspend+0xb4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8017364:	f640 2324 	movw	r3, #2596	; 0xa24
 8017368:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801736c:	f04f 0200 	mov.w	r2, #0
 8017370:	601a      	str	r2, [r3, #0]
 8017372:	e001      	b.n	8017378 <vTaskSuspend+0xb8>
				}
				else
				{
					vTaskSwitchContext();
 8017374:	f000 fc20 	bl	8017bb8 <vTaskSwitchContext>
				}
			}
		}
	}
 8017378:	f107 0710 	add.w	r7, r7, #16
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 8017380:	b480      	push	{r7}
 8017382:	b085      	sub	sp, #20
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8017388:	f04f 0300 	mov.w	r3, #0
 801738c:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8017392:	68bb      	ldr	r3, [r7, #8]
 8017394:	695a      	ldr	r2, [r3, #20]
 8017396:	f640 334c 	movw	r3, #2892	; 0xb4c
 801739a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801739e:	429a      	cmp	r2, r3
 80173a0:	d10e      	bne.n	80173c0 <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 80173a2:	68bb      	ldr	r3, [r7, #8]
 80173a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80173a6:	f640 3320 	movw	r3, #2848	; 0xb20
 80173aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80173ae:	429a      	cmp	r2, r3
 80173b0:	d006      	beq.n	80173c0 <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d102      	bne.n	80173c0 <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
 80173ba:	f04f 0301 	mov.w	r3, #1
 80173be:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 80173c0:	68fb      	ldr	r3, [r7, #12]
	}
 80173c2:	4618      	mov	r0, r3
 80173c4:	f107 0714 	add.w	r7, r7, #20
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bc80      	pop	{r7}
 80173cc:	4770      	bx	lr
 80173ce:	bf00      	nop

080173d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d048      	beq.n	8017474 <vTaskResume+0xa4>
 80173e2:	f640 2324 	movw	r3, #2596	; 0xa24
 80173e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	68fa      	ldr	r2, [r7, #12]
 80173ee:	429a      	cmp	r2, r3
 80173f0:	d040      	beq.n	8017474 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80173f2:	f7fe ff9d 	bl	8016330 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80173f6:	68f8      	ldr	r0, [r7, #12]
 80173f8:	f7ff ffc2 	bl	8017380 <xTaskIsTaskSuspended>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b01      	cmp	r3, #1
 8017400:	d136      	bne.n	8017470 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	f103 0304 	add.w	r3, r3, #4
 8017408:	4618      	mov	r0, r3
 801740a:	f7ff f8c1 	bl	8016590 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017412:	f640 3370 	movw	r3, #2928	; 0xb70
 8017416:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	429a      	cmp	r2, r3
 801741e:	d906      	bls.n	801742e <vTaskResume+0x5e>
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017424:	f640 3370 	movw	r3, #2928	; 0xb70
 8017428:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801742c:	601a      	str	r2, [r3, #0]
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017432:	4613      	mov	r3, r2
 8017434:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017438:	189b      	adds	r3, r3, r2
 801743a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801743e:	461a      	mov	r2, r3
 8017440:	f640 2328 	movw	r3, #2600	; 0xa28
 8017444:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017448:	18d2      	adds	r2, r2, r3
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	f103 0304 	add.w	r3, r3, #4
 8017450:	4610      	mov	r0, r2
 8017452:	4619      	mov	r1, r3
 8017454:	f7ff f836 	bl	80164c4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801745c:	f640 2324 	movw	r3, #2596	; 0xa24
 8017460:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017468:	429a      	cmp	r2, r3
 801746a:	d301      	bcc.n	8017470 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 801746c:	f7fe ff54 	bl	8016318 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
 8017470:	f7fe ff74 	bl	801635c <vPortExitCritical>
		}
	}
 8017474:	f107 0710 	add.w	r7, r7, #16
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}

0801747c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
 801747c:	b580      	push	{r7, lr}
 801747e:	b084      	sub	sp, #16
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
 8017484:	f04f 0300 	mov.w	r3, #0
 8017488:	60fb      	str	r3, [r7, #12]
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	60bb      	str	r3, [r7, #8]

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 801748e:	68b8      	ldr	r0, [r7, #8]
 8017490:	f7ff ff76 	bl	8017380 <xTaskIsTaskSuspended>
 8017494:	4603      	mov	r3, r0
 8017496:	2b01      	cmp	r3, #1
 8017498:	d149      	bne.n	801752e <xTaskResumeFromISR+0xb2>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 801749a:	f640 3378 	movw	r3, #2936	; 0xb78
 801749e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d138      	bne.n	801751a <xTaskResumeFromISR+0x9e>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 80174a8:	68bb      	ldr	r3, [r7, #8]
 80174aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174ac:	f640 2324 	movw	r3, #2596	; 0xa24
 80174b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174b8:	429a      	cmp	r2, r3
 80174ba:	bf34      	ite	cc
 80174bc:	2300      	movcc	r3, #0
 80174be:	2301      	movcs	r3, #1
 80174c0:	60fb      	str	r3, [r7, #12]
				vListRemove(  &( pxTCB->xGenericListItem ) );
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	f103 0304 	add.w	r3, r3, #4
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7ff f861 	bl	8016590 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174d2:	f640 3370 	movw	r3, #2928	; 0xb70
 80174d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	429a      	cmp	r2, r3
 80174de:	d906      	bls.n	80174ee <xTaskResumeFromISR+0x72>
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174e4:	f640 3370 	movw	r3, #2928	; 0xb70
 80174e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80174ec:	601a      	str	r2, [r3, #0]
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174f2:	4613      	mov	r3, r2
 80174f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80174f8:	189b      	adds	r3, r3, r2
 80174fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80174fe:	461a      	mov	r2, r3
 8017500:	f640 2328 	movw	r3, #2600	; 0xa28
 8017504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017508:	18d2      	adds	r2, r2, r3
 801750a:	68bb      	ldr	r3, [r7, #8]
 801750c:	f103 0304 	add.w	r3, r3, #4
 8017510:	4610      	mov	r0, r2
 8017512:	4619      	mov	r1, r3
 8017514:	f7fe ffd6 	bl	80164c4 <vListInsertEnd>
 8017518:	e009      	b.n	801752e <xTaskResumeFromISR+0xb2>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	f103 0318 	add.w	r3, r3, #24
 8017520:	f640 3020 	movw	r0, #2848	; 0xb20
 8017524:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017528:	4619      	mov	r1, r3
 801752a:	f7fe ffcb 	bl	80164c4 <vListInsertEnd>
			}
		}

		return xYieldRequired;
 801752e:	68fb      	ldr	r3, [r7, #12]
	}
 8017530:	4618      	mov	r0, r3
 8017532:	f107 0710 	add.w	r7, r7, #16
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}
 801753a:	bf00      	nop

0801753c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b086      	sub	sp, #24
 8017540:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
 8017542:	f04f 0300 	mov.w	r3, #0
 8017546:	9300      	str	r3, [sp, #0]
 8017548:	f640 3360 	movw	r3, #2912	; 0xb60
 801754c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017550:	9301      	str	r3, [sp, #4]
 8017552:	f04f 0300 	mov.w	r3, #0
 8017556:	9302      	str	r3, [sp, #8]
 8017558:	f04f 0300 	mov.w	r3, #0
 801755c:	9303      	str	r3, [sp, #12]
 801755e:	f647 7021 	movw	r0, #32545	; 0x7f21
 8017562:	f6c0 0001 	movt	r0, #2049	; 0x801
 8017566:	f64d 115c 	movw	r1, #55644	; 0xd95c
 801756a:	f6c0 0102 	movt	r1, #2050	; 0x802
 801756e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017572:	f04f 0300 	mov.w	r3, #0
 8017576:	f7ff fc33 	bl	8016de0 <xTaskGenericCreate>
 801757a:	4603      	mov	r3, r0
 801757c:	607b      	str	r3, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	2b01      	cmp	r3, #1
 8017582:	d115      	bne.n	80175b0 <vTaskStartScheduler+0x74>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8017584:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8017588:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 801758c:	f640 3374 	movw	r3, #2932	; 0xb74
 8017590:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017594:	f04f 0201 	mov.w	r2, #1
 8017598:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 801759a:	f640 3368 	movw	r3, #2920	; 0xb68
 801759e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80175a2:	f04f 0200 	mov.w	r2, #0
 80175a6:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80175a8:	f007 f97c 	bl	801e8a4 <init_us_timer>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80175ac:	f7fe fe84 	bl	80162b8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 80175b0:	f107 0708 	add.w	r7, r7, #8
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
 80175bc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80175c0:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
 80175c4:	f640 3374 	movw	r3, #2932	; 0xb74
 80175c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80175cc:	f04f 0200 	mov.w	r2, #0
 80175d0:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 80175d2:	f7fe fe9b 	bl	801630c <vPortEndScheduler>
}
 80175d6:	bd80      	pop	{r7, pc}

080175d8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80175d8:	b480      	push	{r7}
 80175da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80175dc:	f640 3378 	movw	r3, #2936	; 0xb78
 80175e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	f103 0201 	add.w	r2, r3, #1
 80175ea:	f640 3378 	movw	r3, #2936	; 0xb78
 80175ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80175f2:	601a      	str	r2, [r3, #0]
}
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bc80      	pop	{r7}
 80175f8:	4770      	bx	lr
 80175fa:	bf00      	nop

080175fc <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80175fc:	b590      	push	{r4, r7, lr}
 80175fe:	b083      	sub	sp, #12
 8017600:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8017602:	f04f 0300 	mov.w	r3, #0
 8017606:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017608:	f7fe fe92 	bl	8016330 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801760c:	f640 3378 	movw	r3, #2936	; 0xb78
 8017610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	f103 32ff 	add.w	r2, r3, #4294967295
 801761a:	f640 3378 	movw	r3, #2936	; 0xb78
 801761e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017622:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8017624:	f640 3378 	movw	r3, #2936	; 0xb78
 8017628:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	2b00      	cmp	r3, #0
 8017630:	f040 8086 	bne.w	8017740 <xTaskResumeAll+0x144>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8017634:	f640 3364 	movw	r3, #2916	; 0xb64
 8017638:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d07e      	beq.n	8017740 <xTaskResumeAll+0x144>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8017642:	f04f 0300 	mov.w	r3, #0
 8017646:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8017648:	e03d      	b.n	80176c6 <xTaskResumeAll+0xca>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 801764a:	f640 3320 	movw	r3, #2848	; 0xb20
 801764e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017652:	68db      	ldr	r3, [r3, #12]
 8017654:	68db      	ldr	r3, [r3, #12]
 8017656:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
 8017658:	f104 0318 	add.w	r3, r4, #24
 801765c:	4618      	mov	r0, r3
 801765e:	f7fe ff97 	bl	8016590 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8017662:	f104 0304 	add.w	r3, r4, #4
 8017666:	4618      	mov	r0, r3
 8017668:	f7fe ff92 	bl	8016590 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 801766c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801766e:	f640 3370 	movw	r3, #2928	; 0xb70
 8017672:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	429a      	cmp	r2, r3
 801767a:	d905      	bls.n	8017688 <xTaskResumeAll+0x8c>
 801767c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801767e:	f640 3370 	movw	r3, #2928	; 0xb70
 8017682:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017686:	601a      	str	r2, [r3, #0]
 8017688:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801768a:	4613      	mov	r3, r2
 801768c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017690:	189b      	adds	r3, r3, r2
 8017692:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017696:	461a      	mov	r2, r3
 8017698:	f640 2328 	movw	r3, #2600	; 0xa28
 801769c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80176a0:	18d2      	adds	r2, r2, r3
 80176a2:	f104 0304 	add.w	r3, r4, #4
 80176a6:	4610      	mov	r0, r2
 80176a8:	4619      	mov	r1, r3
 80176aa:	f7fe ff0b 	bl	80164c4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80176ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80176b0:	f640 2324 	movw	r3, #2596	; 0xa24
 80176b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176bc:	429a      	cmp	r2, r3
 80176be:	d302      	bcc.n	80176c6 <xTaskResumeAll+0xca>
					{
						xYieldRequired = pdTRUE;
 80176c0:	f04f 0301 	mov.w	r3, #1
 80176c4:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 80176c6:	f640 3320 	movw	r3, #2848	; 0xb20
 80176ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d1ba      	bne.n	801764a <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80176d4:	f640 337c 	movw	r3, #2940	; 0xb7c
 80176d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d018      	beq.n	8017714 <xTaskResumeAll+0x118>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80176e2:	e00d      	b.n	8017700 <xTaskResumeAll+0x104>
					{
						vTaskIncrementTick();
 80176e4:	f000 f92c 	bl	8017940 <vTaskIncrementTick>
						--uxMissedTicks;
 80176e8:	f640 337c 	movw	r3, #2940	; 0xb7c
 80176ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	f103 32ff 	add.w	r2, r3, #4294967295
 80176f6:	f640 337c 	movw	r3, #2940	; 0xb7c
 80176fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80176fe:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8017700:	f640 337c 	movw	r3, #2940	; 0xb7c
 8017704:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d1ea      	bne.n	80176e4 <xTaskResumeAll+0xe8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 801770e:	f04f 0301 	mov.w	r3, #1
 8017712:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	2b01      	cmp	r3, #1
 8017718:	d006      	beq.n	8017728 <xTaskResumeAll+0x12c>
 801771a:	f640 3380 	movw	r3, #2944	; 0xb80
 801771e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	2b01      	cmp	r3, #1
 8017726:	d10b      	bne.n	8017740 <xTaskResumeAll+0x144>
				{
					xAlreadyYielded = pdTRUE;
 8017728:	f04f 0301 	mov.w	r3, #1
 801772c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 801772e:	f640 3380 	movw	r3, #2944	; 0xb80
 8017732:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017736:	f04f 0200 	mov.w	r2, #0
 801773a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 801773c:	f7fe fdec 	bl	8016318 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8017740:	f7fe fe0c 	bl	801635c <vPortExitCritical>

	return xAlreadyYielded;
 8017744:	687b      	ldr	r3, [r7, #4]
}
 8017746:	4618      	mov	r0, r3
 8017748:	f107 070c 	add.w	r7, r7, #12
 801774c:	46bd      	mov	sp, r7
 801774e:	bd90      	pop	{r4, r7, pc}

08017750 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b082      	sub	sp, #8
 8017754:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8017756:	f7fe fdeb 	bl	8016330 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 801775a:	f640 3368 	movw	r3, #2920	; 0xb68
 801775e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8017766:	f7fe fdf9 	bl	801635c <vPortExitCritical>

	return xTicks;
 801776a:	687b      	ldr	r3, [r7, #4]
}
 801776c:	4618      	mov	r0, r3
 801776e:	f107 0708 	add.w	r7, r7, #8
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}
 8017776:	bf00      	nop

08017778 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
 8017778:	b480      	push	{r7}
 801777a:	b083      	sub	sp, #12
 801777c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801777e:	f04f 0300 	mov.w	r3, #0
 8017782:	607b      	str	r3, [r7, #4]
 8017784:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8017788:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
 801778c:	f640 3368 	movw	r3, #2920	; 0xb68
 8017790:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8017798:	f04f 0000 	mov.w	r0, #0
 801779c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 80177a0:	683b      	ldr	r3, [r7, #0]
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	f107 070c 	add.w	r7, r7, #12
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bc80      	pop	{r7}
 80177ac:	4770      	bx	lr
 80177ae:	bf00      	nop

080177b0 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
 80177b0:	b480      	push	{r7}
 80177b2:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
 80177b4:	f640 3364 	movw	r3, #2916	; 0xb64
 80177b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80177bc:	681b      	ldr	r3, [r3, #0]
}
 80177be:	4618      	mov	r0, r3
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bc80      	pop	{r7}
 80177c4:	4770      	bx	lr
 80177c6:	bf00      	nop

080177c8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
	{
 80177c8:	b590      	push	{r4, r7, lr}
 80177ca:	b085      	sub	sp, #20
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
	unsigned long ulTotalRunTime;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
 80177d0:	f7ff ff02 	bl	80175d8 <vTaskSuspendAll>
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80177d4:	f006 ffe2 	bl	801e79c <get_us_time>
 80177d8:	4602      	mov	r2, r0
 80177da:	460b      	mov	r3, r1
 80177dc:	4613      	mov	r3, r2
 80177de:	60bb      	str	r3, [r7, #8]
			#endif

			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
			ulTotalRunTime /= 100UL;
 80177e0:	68ba      	ldr	r2, [r7, #8]
 80177e2:	f248 531f 	movw	r3, #34079	; 0x851f
 80177e6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80177ea:	fba3 1302 	umull	r1, r3, r3, r2
 80177ee:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80177f2:	60bb      	str	r3, [r7, #8]
			
			/* Run through all the lists that could potentially contain a TCB,
			generating a table of run timer percentages in the provided
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f04f 0200 	mov.w	r2, #0
 80177fa:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 80177fc:	687c      	ldr	r4, [r7, #4]
 80177fe:	4620      	mov	r0, r4
 8017800:	f00f f88c 	bl	802691c <strlen>
 8017804:	4603      	mov	r3, r0
 8017806:	18e2      	adds	r2, r4, r3
 8017808:	f64d 1364 	movw	r3, #55652	; 0xd964
 801780c:	f6c0 0302 	movt	r3, #2050	; 0x802
 8017810:	4611      	mov	r1, r2
 8017812:	461a      	mov	r2, r3
 8017814:	f04f 0303 	mov.w	r3, #3
 8017818:	4608      	mov	r0, r1
 801781a:	4611      	mov	r1, r2
 801781c:	461a      	mov	r2, r3
 801781e:	f00e faad 	bl	8025d7c <memcpy>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 8017822:	f640 336c 	movw	r3, #2924	; 0xb6c
 8017826:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	f103 0301 	add.w	r3, r3, #1
 8017830:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	f103 33ff 	add.w	r3, r3, #4294967295
 8017838:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 801783a:	68fa      	ldr	r2, [r7, #12]
 801783c:	4613      	mov	r3, r2
 801783e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017842:	189b      	adds	r3, r3, r2
 8017844:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017848:	461a      	mov	r2, r3
 801784a:	f640 2328 	movw	r3, #2600	; 0xa28
 801784e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017852:	18d3      	adds	r3, r2, r3
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d013      	beq.n	8017882 <vTaskGetRunTimeStats+0xba>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), ulTotalRunTime, tskREADY_CHAR );
 801785a:	68fa      	ldr	r2, [r7, #12]
 801785c:	4613      	mov	r3, r2
 801785e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017862:	189b      	adds	r3, r3, r2
 8017864:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017868:	461a      	mov	r2, r3
 801786a:	f640 2328 	movw	r3, #2600	; 0xa28
 801786e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017872:	18d3      	adds	r3, r2, r3
 8017874:	6878      	ldr	r0, [r7, #4]
 8017876:	4619      	mov	r1, r3
 8017878:	68ba      	ldr	r2, [r7, #8]
 801787a:	f04f 0352 	mov.w	r3, #82	; 0x52
 801787e:	f000 fcc3 	bl	8018208 <prvGenerateRunTimeStatsForTasksInList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d1d4      	bne.n	8017832 <vTaskGetRunTimeStats+0x6a>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 8017888:	f640 3318 	movw	r3, #2840	; 0xb18
 801788c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d00b      	beq.n	80178b0 <vTaskGetRunTimeStats+0xe8>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRunTime, tskBLOCKED_CHAR );
 8017898:	f640 3318 	movw	r3, #2840	; 0xb18
 801789c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	6878      	ldr	r0, [r7, #4]
 80178a4:	4619      	mov	r1, r3
 80178a6:	68ba      	ldr	r2, [r7, #8]
 80178a8:	f04f 0342 	mov.w	r3, #66	; 0x42
 80178ac:	f000 fcac 	bl	8018208 <prvGenerateRunTimeStatsForTasksInList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 80178b0:	f640 331c 	movw	r3, #2844	; 0xb1c
 80178b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d00b      	beq.n	80178d8 <vTaskGetRunTimeStats+0x110>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ulTotalRunTime, tskBLOCKED_CHAR );
 80178c0:	f640 331c 	movw	r3, #2844	; 0xb1c
 80178c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	4619      	mov	r1, r3
 80178ce:	68ba      	ldr	r2, [r7, #8]
 80178d0:	f04f 0342 	mov.w	r3, #66	; 0x42
 80178d4:	f000 fc98 	bl	8018208 <prvGenerateRunTimeStatsForTasksInList>
			}

			#if ( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 80178d8:	f640 3334 	movw	r3, #2868	; 0xb34
 80178dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d009      	beq.n	80178fa <vTaskGetRunTimeStats+0x132>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTime, tskDELETED_CHAR );
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f640 3134 	movw	r1, #2868	; 0xb34
 80178ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80178f0:	68ba      	ldr	r2, [r7, #8]
 80178f2:	f04f 0344 	mov.w	r3, #68	; 0x44
 80178f6:	f000 fc87 	bl	8018208 <prvGenerateRunTimeStatsForTasksInList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 80178fa:	f640 334c 	movw	r3, #2892	; 0xb4c
 80178fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d009      	beq.n	801791c <vTaskGetRunTimeStats+0x154>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime, tskSUSPENDED_CHAR );
 8017908:	6878      	ldr	r0, [r7, #4]
 801790a:	f640 314c 	movw	r1, #2892	; 0xb4c
 801790e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8017912:	68ba      	ldr	r2, [r7, #8]
 8017914:	f04f 0353 	mov.w	r3, #83	; 0x53
 8017918:	f000 fc76 	bl	8018208 <prvGenerateRunTimeStatsForTasksInList>
				}
			}
			#endif
		}
		xTaskResumeAll();
 801791c:	f7ff fe6e 	bl	80175fc <xTaskResumeAll>
	}
 8017920:	f107 0714 	add.w	r7, r7, #20
 8017924:	46bd      	mov	sp, r7
 8017926:	bd90      	pop	{r4, r7, pc}

08017928 <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	xTaskHandle xTaskGetIdleTaskHandle( void )
	{
 8017928:	b480      	push	{r7}
 801792a:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
 801792c:	f640 3360 	movw	r3, #2912	; 0xb60
 8017930:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017934:	681b      	ldr	r3, [r3, #0]
	}
 8017936:	4618      	mov	r0, r3
 8017938:	46bd      	mov	sp, r7
 801793a:	bc80      	pop	{r7}
 801793c:	4770      	bx	lr
 801793e:	bf00      	nop

08017940 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b084      	sub	sp, #16
 8017944:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8017946:	f640 3378 	movw	r3, #2936	; 0xb78
 801794a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	f040 80c0 	bne.w	8017ad6 <vTaskIncrementTick+0x196>
	{
		++xTickCount;
 8017956:	f640 3368 	movw	r3, #2920	; 0xb68
 801795a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	f103 0201 	add.w	r2, r3, #1
 8017964:	f640 3368 	movw	r3, #2920	; 0xb68
 8017968:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801796c:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 801796e:	f640 3368 	movw	r3, #2920	; 0xb68
 8017972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d140      	bne.n	80179fe <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 801797c:	f640 3318 	movw	r3, #2840	; 0xb18
 8017980:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8017988:	f640 331c 	movw	r3, #2844	; 0xb1c
 801798c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017990:	681a      	ldr	r2, [r3, #0]
 8017992:	f640 3318 	movw	r3, #2840	; 0xb18
 8017996:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801799a:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 801799c:	f640 331c 	movw	r3, #2844	; 0xb1c
 80179a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179a4:	68fa      	ldr	r2, [r7, #12]
 80179a6:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 80179a8:	f640 3384 	movw	r3, #2948	; 0xb84
 80179ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	f103 0201 	add.w	r2, r3, #1
 80179b6:	f640 3384 	movw	r3, #2948	; 0xb84
 80179ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179be:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80179c0:	f640 3318 	movw	r3, #2840	; 0xb18
 80179c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d107      	bne.n	80179e0 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 80179d0:	f640 134c 	movw	r3, #2380	; 0x94c
 80179d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179d8:	f04f 32ff 	mov.w	r2, #4294967295
 80179dc:	601a      	str	r2, [r3, #0]
 80179de:	e00e      	b.n	80179fe <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80179e0:	f640 3318 	movw	r3, #2840	; 0xb18
 80179e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	68db      	ldr	r3, [r3, #12]
 80179ec:	68db      	ldr	r3, [r3, #12]
 80179ee:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80179f0:	68bb      	ldr	r3, [r7, #8]
 80179f2:	685a      	ldr	r2, [r3, #4]
 80179f4:	f640 134c 	movw	r3, #2380	; 0x94c
 80179f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179fc:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 80179fe:	f640 3368 	movw	r3, #2920	; 0xb68
 8017a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a06:	681a      	ldr	r2, [r3, #0]
 8017a08:	f640 134c 	movw	r3, #2380	; 0x94c
 8017a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d36b      	bcc.n	8017aee <vTaskIncrementTick+0x1ae>
 8017a16:	f640 3318 	movw	r3, #2840	; 0xb18
 8017a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d107      	bne.n	8017a36 <vTaskIncrementTick+0xf6>
 8017a26:	f640 134c 	movw	r3, #2380	; 0x94c
 8017a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8017a32:	601a      	str	r2, [r3, #0]
 8017a34:	e05b      	b.n	8017aee <vTaskIncrementTick+0x1ae>
 8017a36:	f640 3318 	movw	r3, #2840	; 0xb18
 8017a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	68db      	ldr	r3, [r3, #12]
 8017a42:	68db      	ldr	r3, [r3, #12]
 8017a44:	60bb      	str	r3, [r7, #8]
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	685b      	ldr	r3, [r3, #4]
 8017a4a:	607b      	str	r3, [r7, #4]
 8017a4c:	f640 3368 	movw	r3, #2920	; 0xb68
 8017a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a54:	681a      	ldr	r2, [r3, #0]
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d206      	bcs.n	8017a6a <vTaskIncrementTick+0x12a>
 8017a5c:	f640 134c 	movw	r3, #2380	; 0x94c
 8017a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	601a      	str	r2, [r3, #0]
 8017a68:	e041      	b.n	8017aee <vTaskIncrementTick+0x1ae>
 8017a6a:	68bb      	ldr	r3, [r7, #8]
 8017a6c:	f103 0304 	add.w	r3, r3, #4
 8017a70:	4618      	mov	r0, r3
 8017a72:	f7fe fd8d 	bl	8016590 <vListRemove>
 8017a76:	68bb      	ldr	r3, [r7, #8]
 8017a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d005      	beq.n	8017a8a <vTaskIncrementTick+0x14a>
 8017a7e:	68bb      	ldr	r3, [r7, #8]
 8017a80:	f103 0318 	add.w	r3, r3, #24
 8017a84:	4618      	mov	r0, r3
 8017a86:	f7fe fd83 	bl	8016590 <vListRemove>
 8017a8a:	68bb      	ldr	r3, [r7, #8]
 8017a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a8e:	f640 3370 	movw	r3, #2928	; 0xb70
 8017a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	d906      	bls.n	8017aaa <vTaskIncrementTick+0x16a>
 8017a9c:	68bb      	ldr	r3, [r7, #8]
 8017a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017aa0:	f640 3370 	movw	r3, #2928	; 0xb70
 8017aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017aa8:	601a      	str	r2, [r3, #0]
 8017aaa:	68bb      	ldr	r3, [r7, #8]
 8017aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017aae:	4613      	mov	r3, r2
 8017ab0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017ab4:	189b      	adds	r3, r3, r2
 8017ab6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017aba:	461a      	mov	r2, r3
 8017abc:	f640 2328 	movw	r3, #2600	; 0xa28
 8017ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017ac4:	18d2      	adds	r2, r2, r3
 8017ac6:	68bb      	ldr	r3, [r7, #8]
 8017ac8:	f103 0304 	add.w	r3, r3, #4
 8017acc:	4610      	mov	r0, r2
 8017ace:	4619      	mov	r1, r3
 8017ad0:	f7fe fcf8 	bl	80164c4 <vListInsertEnd>
 8017ad4:	e79f      	b.n	8017a16 <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
 8017ad6:	f640 337c 	movw	r3, #2940	; 0xb7c
 8017ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	f103 0201 	add.w	r2, r3, #1
 8017ae4:	f640 337c 	movw	r3, #2940	; 0xb7c
 8017ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017aec:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 8017aee:	f107 0710 	add.w	r7, r7, #16
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop

08017af8 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b084      	sub	sp, #16
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
 8017b00:	6039      	str	r1, [r7, #0]
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d106      	bne.n	8017b16 <vTaskSetApplicationTaskTag+0x1e>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
 8017b08:	f640 2324 	movw	r3, #2596	; 0xa24
 8017b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	60fb      	str	r3, [r7, #12]
 8017b14:	e001      	b.n	8017b1a <vTaskSetApplicationTaskTag+0x22>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8017b1a:	f7fe fc09 	bl	8016330 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	683a      	ldr	r2, [r7, #0]
 8017b22:	649a      	str	r2, [r3, #72]	; 0x48
		taskEXIT_CRITICAL();
 8017b24:	f7fe fc1a 	bl	801635c <vPortExitCritical>
	}
 8017b28:	f107 0710 	add.w	r7, r7, #16
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d106      	bne.n	8017b4c <xTaskGetApplicationTaskTag+0x1c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
 8017b3e:	f640 2324 	movw	r3, #2596	; 0xa24
 8017b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	60fb      	str	r3, [r7, #12]
 8017b4a:	e001      	b.n	8017b50 <xTaskGetApplicationTaskTag+0x20>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8017b50:	f7fe fbee 	bl	8016330 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b58:	60bb      	str	r3, [r7, #8]
		taskEXIT_CRITICAL();
 8017b5a:	f7fe fbff 	bl	801635c <vPortExitCritical>

		return xReturn;
 8017b5e:	68bb      	ldr	r3, [r7, #8]
	}
 8017b60:	4618      	mov	r0, r3
 8017b62:	f107 0710 	add.w	r7, r7, #16
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}
 8017b6a:	bf00      	nop

08017b6c <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b084      	sub	sp, #16
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
 8017b74:	6039      	str	r1, [r7, #0]
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d106      	bne.n	8017b8a <xTaskCallApplicationTaskHook+0x1e>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
 8017b7c:	f640 2324 	movw	r3, #2596	; 0xa24
 8017b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	60fb      	str	r3, [r7, #12]
 8017b88:	e001      	b.n	8017b8e <xTaskCallApplicationTaskHook+0x22>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d006      	beq.n	8017ba4 <xTaskCallApplicationTaskHook+0x38>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b9a:	6838      	ldr	r0, [r7, #0]
 8017b9c:	4798      	blx	r3
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	60bb      	str	r3, [r7, #8]
 8017ba2:	e002      	b.n	8017baa <xTaskCallApplicationTaskHook+0x3e>
		}
		else
		{
			xReturn = pdFAIL;
 8017ba4:	f04f 0300 	mov.w	r3, #0
 8017ba8:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8017baa:	68bb      	ldr	r3, [r7, #8]
	}
 8017bac:	4618      	mov	r0, r3
 8017bae:	f107 0710 	add.w	r7, r7, #16
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}
 8017bb6:	bf00      	nop

08017bb8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8017bbe:	f640 3378 	movw	r3, #2936	; 0xb78
 8017bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d007      	beq.n	8017bdc <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8017bcc:	f640 3380 	movw	r3, #2944	; 0xb80
 8017bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017bd4:	f04f 0201 	mov.w	r2, #1
 8017bd8:	601a      	str	r2, [r3, #0]
 8017bda:	e089      	b.n	8017cf0 <vTaskSwitchContext+0x138>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8017bdc:	f006 fdde 	bl	801e79c <get_us_time>
 8017be0:	4602      	mov	r2, r0
 8017be2:	460b      	mov	r3, r1
 8017be4:	4613      	mov	r3, r2
 8017be6:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8017be8:	f640 2324 	movw	r3, #2596	; 0xa24
 8017bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017bf0:	681a      	ldr	r2, [r3, #0]
 8017bf2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8017bf4:	f640 33c0 	movw	r3, #3008	; 0xbc0
 8017bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	1ac3      	subs	r3, r0, r3
 8017c02:	18cb      	adds	r3, r1, r3
 8017c04:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8017c06:	f640 33c0 	movw	r3, #3008	; 0xbc0
 8017c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c0e:	687a      	ldr	r2, [r7, #4]
 8017c10:	601a      	str	r2, [r3, #0]
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8017c12:	f640 2324 	movw	r3, #2596	; 0xa24
 8017c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	681a      	ldr	r2, [r3, #0]
 8017c1e:	f640 2324 	movw	r3, #2596	; 0xa24
 8017c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	d81d      	bhi.n	8017c6a <vTaskSwitchContext+0xb2>
 8017c2e:	f640 2324 	movw	r3, #2596	; 0xa24
 8017c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c36:	681a      	ldr	r2, [r3, #0]
 8017c38:	f640 2324 	movw	r3, #2596	; 0xa24
 8017c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8017c46:	4610      	mov	r0, r2
 8017c48:	4619      	mov	r1, r3
 8017c4a:	f006 f9ad 	bl	801dfa8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8017c4e:	e00c      	b.n	8017c6a <vTaskSwitchContext+0xb2>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 8017c50:	f640 3370 	movw	r3, #2928	; 0xb70
 8017c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	f103 32ff 	add.w	r2, r3, #4294967295
 8017c5e:	f640 3370 	movw	r3, #2928	; 0xb70
 8017c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c66:	601a      	str	r2, [r3, #0]
 8017c68:	e000      	b.n	8017c6c <vTaskSwitchContext+0xb4>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8017c6a:	bf00      	nop
 8017c6c:	f640 3370 	movw	r3, #2928	; 0xb70
 8017c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c74:	681a      	ldr	r2, [r3, #0]
 8017c76:	4613      	mov	r3, r2
 8017c78:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017c7c:	189b      	adds	r3, r3, r2
 8017c7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017c82:	461a      	mov	r2, r3
 8017c84:	f640 2328 	movw	r3, #2600	; 0xa28
 8017c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c8c:	18d3      	adds	r3, r2, r3
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d0dd      	beq.n	8017c50 <vTaskSwitchContext+0x98>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8017c94:	f640 3370 	movw	r3, #2928	; 0xb70
 8017c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017c9c:	681a      	ldr	r2, [r3, #0]
 8017c9e:	4613      	mov	r3, r2
 8017ca0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017ca4:	189b      	adds	r3, r3, r2
 8017ca6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017caa:	461a      	mov	r2, r3
 8017cac:	f640 2328 	movw	r3, #2600	; 0xa28
 8017cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017cb4:	18d3      	adds	r3, r2, r3
 8017cb6:	603b      	str	r3, [r7, #0]
 8017cb8:	683b      	ldr	r3, [r7, #0]
 8017cba:	685b      	ldr	r3, [r3, #4]
 8017cbc:	685b      	ldr	r3, [r3, #4]
 8017cbe:	461a      	mov	r2, r3
 8017cc0:	683b      	ldr	r3, [r7, #0]
 8017cc2:	605a      	str	r2, [r3, #4]
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	685a      	ldr	r2, [r3, #4]
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	f103 0308 	add.w	r3, r3, #8
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	d105      	bne.n	8017cde <vTaskSwitchContext+0x126>
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	685b      	ldr	r3, [r3, #4]
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	461a      	mov	r2, r3
 8017cda:	683b      	ldr	r3, [r7, #0]
 8017cdc:	605a      	str	r2, [r3, #4]
 8017cde:	683b      	ldr	r3, [r7, #0]
 8017ce0:	685b      	ldr	r3, [r3, #4]
 8017ce2:	68db      	ldr	r3, [r3, #12]
 8017ce4:	461a      	mov	r2, r3
 8017ce6:	f640 2324 	movw	r3, #2596	; 0xa24
 8017cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017cee:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
 8017cf0:	f107 0708 	add.w	r7, r7, #8
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b084      	sub	sp, #16
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
 8017d00:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8017d02:	f640 2324 	movw	r3, #2596	; 0xa24
 8017d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	f103 0318 	add.w	r3, r3, #24
 8017d10:	6878      	ldr	r0, [r7, #4]
 8017d12:	4619      	mov	r1, r3
 8017d14:	f7fe fc00 	bl	8016518 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8017d18:	f640 2324 	movw	r3, #2596	; 0xa24
 8017d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	f103 0304 	add.w	r3, r3, #4
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7fe fc32 	bl	8016590 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d32:	d10e      	bne.n	8017d52 <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8017d34:	f640 2324 	movw	r3, #2596	; 0xa24
 8017d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	f103 0304 	add.w	r3, r3, #4
 8017d42:	f640 304c 	movw	r0, #2892	; 0xb4c
 8017d46:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017d4a:	4619      	mov	r1, r3
 8017d4c:	f7fe fbba 	bl	80164c4 <vListInsertEnd>
 8017d50:	e00a      	b.n	8017d68 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8017d52:	f640 3368 	movw	r3, #2920	; 0xb68
 8017d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017d5a:	681a      	ldr	r2, [r3, #0]
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	18d3      	adds	r3, r2, r3
 8017d60:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8017d62:	68f8      	ldr	r0, [r7, #12]
 8017d64:	f000 f9d0 	bl	8018108 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8017d68:	f107 0710 	add.w	r7, r7, #16
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}

08017d70 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b084      	sub	sp, #16
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	68db      	ldr	r3, [r3, #12]
 8017d7c:	68db      	ldr	r3, [r3, #12]
 8017d7e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017d80:	68bb      	ldr	r3, [r7, #8]
 8017d82:	f103 0318 	add.w	r3, r3, #24
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7fe fc02 	bl	8016590 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8017d8c:	f640 3378 	movw	r3, #2936	; 0xb78
 8017d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d12b      	bne.n	8017df2 <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8017d9a:	68bb      	ldr	r3, [r7, #8]
 8017d9c:	f103 0304 	add.w	r3, r3, #4
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7fe fbf5 	bl	8016590 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8017da6:	68bb      	ldr	r3, [r7, #8]
 8017da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017daa:	f640 3370 	movw	r3, #2928	; 0xb70
 8017dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d906      	bls.n	8017dc6 <xTaskRemoveFromEventList+0x56>
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dbc:	f640 3370 	movw	r3, #2928	; 0xb70
 8017dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017dc4:	601a      	str	r2, [r3, #0]
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dca:	4613      	mov	r3, r2
 8017dcc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017dd0:	189b      	adds	r3, r3, r2
 8017dd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017dd6:	461a      	mov	r2, r3
 8017dd8:	f640 2328 	movw	r3, #2600	; 0xa28
 8017ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017de0:	18d2      	adds	r2, r2, r3
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	f103 0304 	add.w	r3, r3, #4
 8017de8:	4610      	mov	r0, r2
 8017dea:	4619      	mov	r1, r3
 8017dec:	f7fe fb6a 	bl	80164c4 <vListInsertEnd>
 8017df0:	e009      	b.n	8017e06 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	f103 0318 	add.w	r3, r3, #24
 8017df8:	f640 3020 	movw	r0, #2848	; 0xb20
 8017dfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8017e00:	4619      	mov	r1, r3
 8017e02:	f7fe fb5f 	bl	80164c4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017e06:	68bb      	ldr	r3, [r7, #8]
 8017e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e0a:	f640 2324 	movw	r3, #2596	; 0xa24
 8017e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e16:	429a      	cmp	r2, r3
 8017e18:	d303      	bcc.n	8017e22 <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8017e1a:	f04f 0301 	mov.w	r3, #1
 8017e1e:	60fb      	str	r3, [r7, #12]
 8017e20:	e002      	b.n	8017e28 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
 8017e22:	f04f 0300 	mov.w	r3, #0
 8017e26:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8017e28:	68fb      	ldr	r3, [r7, #12]
}
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f107 0710 	add.w	r7, r7, #16
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}

08017e34 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8017e34:	b480      	push	{r7}
 8017e36:	b083      	sub	sp, #12
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017e3c:	f640 3384 	movw	r3, #2948	; 0xb84
 8017e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e44:	681a      	ldr	r2, [r3, #0]
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017e4a:	f640 3368 	movw	r3, #2920	; 0xb68
 8017e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e52:	681a      	ldr	r2, [r3, #0]
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	605a      	str	r2, [r3, #4]
}
 8017e58:	f107 070c 	add.w	r7, r7, #12
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bc80      	pop	{r7}
 8017e60:	4770      	bx	lr
 8017e62:	bf00      	nop

08017e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b084      	sub	sp, #16
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
 8017e6c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8017e6e:	f7fe fa5f 	bl	8016330 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e7a:	d103      	bne.n	8017e84 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
 8017e7c:	f04f 0300 	mov.w	r3, #0
 8017e80:	60fb      	str	r3, [r7, #12]
 8017e82:	e038      	b.n	8017ef6 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	681a      	ldr	r2, [r3, #0]
 8017e88:	f640 3384 	movw	r3, #2948	; 0xb84
 8017e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	429a      	cmp	r2, r3
 8017e94:	d00c      	beq.n	8017eb0 <xTaskCheckForTimeOut+0x4c>
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	685a      	ldr	r2, [r3, #4]
 8017e9a:	f640 3368 	movw	r3, #2920	; 0xb68
 8017e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	429a      	cmp	r2, r3
 8017ea6:	d803      	bhi.n	8017eb0 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8017ea8:	f04f 0301 	mov.w	r3, #1
 8017eac:	60fb      	str	r3, [r7, #12]
 8017eae:	e022      	b.n	8017ef6 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8017eb0:	f640 3368 	movw	r3, #2920	; 0xb68
 8017eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017eb8:	681a      	ldr	r2, [r3, #0]
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	685b      	ldr	r3, [r3, #4]
 8017ebe:	1ad2      	subs	r2, r2, r3
 8017ec0:	683b      	ldr	r3, [r7, #0]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	d213      	bcs.n	8017ef0 <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8017ec8:	683b      	ldr	r3, [r7, #0]
 8017eca:	681a      	ldr	r2, [r3, #0]
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	6859      	ldr	r1, [r3, #4]
 8017ed0:	f640 3368 	movw	r3, #2920	; 0xb68
 8017ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	1acb      	subs	r3, r1, r3
 8017edc:	18d2      	adds	r2, r2, r3
 8017ede:	683b      	ldr	r3, [r7, #0]
 8017ee0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	f7ff ffa6 	bl	8017e34 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8017ee8:	f04f 0300 	mov.w	r3, #0
 8017eec:	60fb      	str	r3, [r7, #12]
 8017eee:	e002      	b.n	8017ef6 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8017ef0:	f04f 0301 	mov.w	r3, #1
 8017ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017ef6:	f7fe fa31 	bl	801635c <vPortExitCritical>

	return xReturn;
 8017efa:	68fb      	ldr	r3, [r7, #12]
}
 8017efc:	4618      	mov	r0, r3
 8017efe:	f107 0710 	add.w	r7, r7, #16
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}
 8017f06:	bf00      	nop

08017f08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017f08:	b480      	push	{r7}
 8017f0a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8017f0c:	f640 3380 	movw	r3, #2944	; 0xb80
 8017f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f14:	f04f 0201 	mov.w	r2, #1
 8017f18:	601a      	str	r2, [r3, #0]
}
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bc80      	pop	{r7}
 8017f1e:	4770      	bx	lr

08017f20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b082      	sub	sp, #8
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	e000      	b.n	8017f2c <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8017f2a:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8017f2c:	f000 f8a0 	bl	8018070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8017f30:	f640 2328 	movw	r3, #2600	; 0xa28
 8017f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	2b01      	cmp	r3, #1
 8017f3c:	d9f5      	bls.n	8017f2a <prvIdleTask+0xa>
			{
				taskYIELD();
 8017f3e:	f7fe f9eb 	bl	8016318 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8017f42:	e7f2      	b.n	8017f2a <prvIdleTask+0xa>

08017f44 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b084      	sub	sp, #16
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	60f8      	str	r0, [r7, #12]
 8017f4c:	60b9      	str	r1, [r7, #8]
 8017f4e:	607a      	str	r2, [r7, #4]
 8017f50:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8017f58:	4618      	mov	r0, r3
 8017f5a:	68b9      	ldr	r1, [r7, #8]
 8017f5c:	f04f 0210 	mov.w	r2, #16
 8017f60:	f00e fd60 	bl	8026a24 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	f04f 0200 	mov.w	r2, #0
 8017f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	2b09      	cmp	r3, #9
 8017f72:	d902      	bls.n	8017f7a <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8017f74:	f04f 0309 	mov.w	r3, #9
 8017f78:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	687a      	ldr	r2, [r7, #4]
 8017f7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	687a      	ldr	r2, [r7, #4]
 8017f84:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	f103 0304 	add.w	r3, r3, #4
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f7fe fa8b 	bl	80164a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	f103 0318 	add.w	r3, r3, #24
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f7fe fa85 	bl	80164a8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	68fa      	ldr	r2, [r7, #12]
 8017fa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	f1c3 020a 	rsb	r2, r3, #10
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	68fa      	ldr	r2, [r7, #12]
 8017fb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	f04f 0200 	mov.w	r2, #0
 8017fba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	f04f 0200 	mov.w	r2, #0
 8017fc2:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 8017fc4:	f107 0710 	add.w	r7, r7, #16
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}

08017fcc <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b082      	sub	sp, #8
 8017fd0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8017fd2:	f04f 0300 	mov.w	r3, #0
 8017fd6:	607b      	str	r3, [r7, #4]
 8017fd8:	e013      	b.n	8018002 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8017fda:	687a      	ldr	r2, [r7, #4]
 8017fdc:	4613      	mov	r3, r2
 8017fde:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017fe2:	189b      	adds	r3, r3, r2
 8017fe4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017fe8:	461a      	mov	r2, r3
 8017fea:	f640 2328 	movw	r3, #2600	; 0xa28
 8017fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017ff2:	18d3      	adds	r3, r2, r3
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7fe fa37 	bl	8016468 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f103 0301 	add.w	r3, r3, #1
 8018000:	607b      	str	r3, [r7, #4]
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2b09      	cmp	r3, #9
 8018006:	d9e8      	bls.n	8017fda <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8018008:	f640 20f0 	movw	r0, #2800	; 0xaf0
 801800c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8018010:	f7fe fa2a 	bl	8016468 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8018014:	f640 3004 	movw	r0, #2820	; 0xb04
 8018018:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801801c:	f7fe fa24 	bl	8016468 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8018020:	f640 3020 	movw	r0, #2848	; 0xb20
 8018024:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8018028:	f7fe fa1e 	bl	8016468 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 801802c:	f640 3034 	movw	r0, #2868	; 0xb34
 8018030:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8018034:	f7fe fa18 	bl	8016468 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8018038:	f640 304c 	movw	r0, #2892	; 0xb4c
 801803c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8018040:	f7fe fa12 	bl	8016468 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018044:	f640 3318 	movw	r3, #2840	; 0xb18
 8018048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801804c:	f640 22f0 	movw	r2, #2800	; 0xaf0
 8018050:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8018054:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018056:	f640 331c 	movw	r3, #2844	; 0xb1c
 801805a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801805e:	f640 3204 	movw	r2, #2820	; 0xb04
 8018062:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8018066:	601a      	str	r2, [r3, #0]
}
 8018068:	f107 0708 	add.w	r7, r7, #8
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}

08018070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8018076:	f640 3348 	movw	r3, #2888	; 0xb48
 801807a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d03c      	beq.n	80180fe <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
 8018084:	f7ff faa8 	bl	80175d8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8018088:	f640 3334 	movw	r3, #2868	; 0xb34
 801808c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	bf14      	ite	ne
 8018096:	2300      	movne	r3, #0
 8018098:	2301      	moveq	r3, #1
 801809a:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 801809c:	f7ff faae 	bl	80175fc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d12b      	bne.n	80180fe <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80180a6:	f7fe f943 	bl	8016330 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 80180aa:	f640 3334 	movw	r3, #2868	; 0xb34
 80180ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80180b2:	68db      	ldr	r3, [r3, #12]
 80180b4:	68db      	ldr	r3, [r3, #12]
 80180b6:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	f103 0304 	add.w	r3, r3, #4
 80180be:	4618      	mov	r0, r3
 80180c0:	f7fe fa66 	bl	8016590 <vListRemove>
					--uxCurrentNumberOfTasks;
 80180c4:	f640 3364 	movw	r3, #2916	; 0xb64
 80180c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	f103 32ff 	add.w	r2, r3, #4294967295
 80180d2:	f640 3364 	movw	r3, #2916	; 0xb64
 80180d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80180da:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80180dc:	f640 3348 	movw	r3, #2888	; 0xb48
 80180e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	f103 32ff 	add.w	r2, r3, #4294967295
 80180ea:	f640 3348 	movw	r3, #2888	; 0xb48
 80180ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80180f2:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80180f4:	f7fe f932 	bl	801635c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80180f8:	6838      	ldr	r0, [r7, #0]
 80180fa:	f000 f97d 	bl	80183f8 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 80180fe:	f107 0708 	add.w	r7, r7, #8
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}
 8018106:	bf00      	nop

08018108 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b082      	sub	sp, #8
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8018110:	f640 2324 	movw	r3, #2596	; 0xa24
 8018114:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	687a      	ldr	r2, [r7, #4]
 801811c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 801811e:	f640 3368 	movw	r3, #2920	; 0xb68
 8018122:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	687a      	ldr	r2, [r7, #4]
 801812a:	429a      	cmp	r2, r3
 801812c:	d210      	bcs.n	8018150 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 801812e:	f640 331c 	movw	r3, #2844	; 0xb1c
 8018132:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018136:	681a      	ldr	r2, [r3, #0]
 8018138:	f640 2324 	movw	r3, #2596	; 0xa24
 801813c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	f103 0304 	add.w	r3, r3, #4
 8018146:	4610      	mov	r0, r2
 8018148:	4619      	mov	r1, r3
 801814a:	f7fe f9e5 	bl	8016518 <vListInsert>
 801814e:	e01d      	b.n	801818c <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8018150:	f640 3318 	movw	r3, #2840	; 0xb18
 8018154:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018158:	681a      	ldr	r2, [r3, #0]
 801815a:	f640 2324 	movw	r3, #2596	; 0xa24
 801815e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	f103 0304 	add.w	r3, r3, #4
 8018168:	4610      	mov	r0, r2
 801816a:	4619      	mov	r1, r3
 801816c:	f7fe f9d4 	bl	8016518 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8018170:	f640 134c 	movw	r3, #2380	; 0x94c
 8018174:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	687a      	ldr	r2, [r7, #4]
 801817c:	429a      	cmp	r2, r3
 801817e:	d205      	bcs.n	801818c <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8018180:	f640 134c 	movw	r3, #2380	; 0x94c
 8018184:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018188:	687a      	ldr	r2, [r7, #4]
 801818a:	601a      	str	r2, [r3, #0]
		}
	}
}
 801818c:	f107 0708 	add.w	r7, r7, #8
 8018190:	46bd      	mov	sp, r7
 8018192:	bd80      	pop	{r7, pc}

08018194 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b084      	sub	sp, #16
 8018198:	af00      	add	r7, sp, #0
 801819a:	4603      	mov	r3, r0
 801819c:	6039      	str	r1, [r7, #0]
 801819e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80181a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80181a4:	f00d fab4 	bl	8025710 <malloc>
 80181a8:	4603      	mov	r3, r0
 80181aa:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d023      	beq.n	80181fa <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80181b2:	683b      	ldr	r3, [r7, #0]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d107      	bne.n	80181c8 <prvAllocateTCBAndStack+0x34>
 80181b8:	88fb      	ldrh	r3, [r7, #6]
 80181ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80181be:	4618      	mov	r0, r3
 80181c0:	f00d faa6 	bl	8025710 <malloc>
 80181c4:	4603      	mov	r3, r0
 80181c6:	e000      	b.n	80181ca <prvAllocateTCBAndStack+0x36>
 80181c8:	683b      	ldr	r3, [r7, #0]
 80181ca:	68fa      	ldr	r2, [r7, #12]
 80181cc:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d106      	bne.n	80181e4 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80181d6:	68f8      	ldr	r0, [r7, #12]
 80181d8:	f00d faa2 	bl	8025720 <free>
			pxNewTCB = NULL;
 80181dc:	f04f 0300 	mov.w	r3, #0
 80181e0:	60fb      	str	r3, [r7, #12]
 80181e2:	e00a      	b.n	80181fa <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80181e8:	88fb      	ldrh	r3, [r7, #6]
 80181ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80181ee:	4610      	mov	r0, r2
 80181f0:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 80181f4:	461a      	mov	r2, r3
 80181f6:	f00d fe67 	bl	8025ec8 <memset>
		}
	}

	return pxNewTCB;
 80181fa:	68fb      	ldr	r3, [r7, #12]
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	f107 0710 	add.w	r7, r7, #16
 8018202:	46bd      	mov	sp, r7
 8018204:	bd80      	pop	{r7, pc}
 8018206:	bf00      	nop

08018208 <prvGenerateRunTimeStatsForTasksInList>:
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime, signed char cStatus  )
	{
 8018208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801820c:	b08e      	sub	sp, #56	; 0x38
 801820e:	af04      	add	r7, sp, #16
 8018210:	60f8      	str	r0, [r7, #12]
 8018212:	60b9      	str	r1, [r7, #8]
 8018214:	607a      	str	r2, [r7, #4]
 8018216:	70fb      	strb	r3, [r7, #3]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8018218:	68bb      	ldr	r3, [r7, #8]
 801821a:	627b      	str	r3, [r7, #36]	; 0x24
 801821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801821e:	685b      	ldr	r3, [r3, #4]
 8018220:	685b      	ldr	r3, [r3, #4]
 8018222:	461a      	mov	r2, r3
 8018224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018226:	605a      	str	r2, [r3, #4]
 8018228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822a:	685a      	ldr	r2, [r3, #4]
 801822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822e:	f103 0308 	add.w	r3, r3, #8
 8018232:	429a      	cmp	r2, r3
 8018234:	d105      	bne.n	8018242 <prvGenerateRunTimeStatsForTasksInList+0x3a>
 8018236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018238:	685b      	ldr	r3, [r3, #4]
 801823a:	685b      	ldr	r3, [r3, #4]
 801823c:	461a      	mov	r2, r3
 801823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018240:	605a      	str	r2, [r3, #4]
 8018242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018244:	685b      	ldr	r3, [r3, #4]
 8018246:	68db      	ldr	r3, [r3, #12]
 8018248:	623b      	str	r3, [r7, #32]
		do
		{
			/* Get next TCB in from the list. */
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 801824a:	68bb      	ldr	r3, [r7, #8]
 801824c:	61fb      	str	r3, [r7, #28]
 801824e:	69fb      	ldr	r3, [r7, #28]
 8018250:	685b      	ldr	r3, [r3, #4]
 8018252:	685b      	ldr	r3, [r3, #4]
 8018254:	461a      	mov	r2, r3
 8018256:	69fb      	ldr	r3, [r7, #28]
 8018258:	605a      	str	r2, [r3, #4]
 801825a:	69fb      	ldr	r3, [r7, #28]
 801825c:	685a      	ldr	r2, [r3, #4]
 801825e:	69fb      	ldr	r3, [r7, #28]
 8018260:	f103 0308 	add.w	r3, r3, #8
 8018264:	429a      	cmp	r2, r3
 8018266:	d105      	bne.n	8018274 <prvGenerateRunTimeStatsForTasksInList+0x6c>
 8018268:	69fb      	ldr	r3, [r7, #28]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	685b      	ldr	r3, [r3, #4]
 801826e:	461a      	mov	r2, r3
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	605a      	str	r2, [r3, #4]
 8018274:	69fb      	ldr	r3, [r7, #28]
 8018276:	685b      	ldr	r3, [r3, #4]
 8018278:	68db      	ldr	r3, [r3, #12]
 801827a:	61bb      	str	r3, [r7, #24]

			/* Divide by zero check. */
			if( ulTotalRunTime > 0UL )
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d076      	beq.n	8018370 <prvGenerateRunTimeStatsForTasksInList+0x168>
			{
				/* Has the task run at all? */
				if( pxNextTCB->ulRunTimeCounter == 0UL )
 8018282:	69bb      	ldr	r3, [r7, #24]
 8018284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018286:	2b00      	cmp	r3, #0
 8018288:	d11c      	bne.n	80182c4 <prvGenerateRunTimeStatsForTasksInList+0xbc>
				{
					/* The task has used no CPU time at all. */
					sprintf( pcStatsString, ( char * ) "%u  %c  %-16s          0   0%%  %5u\r\n", (unsigned int) pxNextTCB->uxPriority, cStatus, pxNextTCB->pcTaskName, usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack ));
 801828a:	69bb      	ldr	r3, [r7, #24]
 801828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801828e:	461d      	mov	r5, r3
 8018290:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8018294:	69bb      	ldr	r3, [r7, #24]
 8018296:	f103 0634 	add.w	r6, r3, #52	; 0x34
 801829a:	69bb      	ldr	r3, [r7, #24]
 801829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801829e:	4618      	mov	r0, r3
 80182a0:	f000 f870 	bl	8018384 <usTaskCheckFreeStackSpace>
 80182a4:	4603      	mov	r3, r0
 80182a6:	9600      	str	r6, [sp, #0]
 80182a8:	9301      	str	r3, [sp, #4]
 80182aa:	f640 308c 	movw	r0, #2956	; 0xb8c
 80182ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80182b2:	f64d 1168 	movw	r1, #55656	; 0xd968
 80182b6:	f6c0 0102 	movt	r1, #2050	; 0x802
 80182ba:	462a      	mov	r2, r5
 80182bc:	4623      	mov	r3, r4
 80182be:	f00e f991 	bl	80265e4 <sprintf>
 80182c2:	e04e      	b.n	8018362 <prvGenerateRunTimeStatsForTasksInList+0x15a>
				else
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTime has already been divided by 100. */
					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
 80182c4:	69bb      	ldr	r3, [r7, #24]
 80182c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182c8:	461a      	mov	r2, r3
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80182d0:	617b      	str	r3, [r7, #20]

					if( ulStatsAsPercentage > 0UL )
 80182d2:	697b      	ldr	r3, [r7, #20]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d023      	beq.n	8018320 <prvGenerateRunTimeStatsForTasksInList+0x118>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u %3u%%  %5u\r\n", (unsigned int) pxNextTCB->uxPriority, cStatus, pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage, usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack ));
 80182d8:	69bb      	ldr	r3, [r7, #24]
 80182da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182dc:	461d      	mov	r5, r3
 80182de:	f997 4003 	ldrsb.w	r4, [r7, #3]
 80182e2:	69bb      	ldr	r3, [r7, #24]
 80182e4:	f103 0834 	add.w	r8, r3, #52	; 0x34
 80182e8:	69bb      	ldr	r3, [r7, #24]
 80182ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182ec:	461e      	mov	r6, r3
 80182ee:	69bb      	ldr	r3, [r7, #24]
 80182f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182f2:	4618      	mov	r0, r3
 80182f4:	f000 f846 	bl	8018384 <usTaskCheckFreeStackSpace>
 80182f8:	4603      	mov	r3, r0
 80182fa:	f8cd 8000 	str.w	r8, [sp]
 80182fe:	9601      	str	r6, [sp, #4]
 8018300:	697a      	ldr	r2, [r7, #20]
 8018302:	9202      	str	r2, [sp, #8]
 8018304:	9303      	str	r3, [sp, #12]
 8018306:	f640 308c 	movw	r0, #2956	; 0xb8c
 801830a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801830e:	f64d 1190 	movw	r1, #55696	; 0xd990
 8018312:	f6c0 0102 	movt	r1, #2050	; 0x802
 8018316:	462a      	mov	r2, r5
 8018318:	4623      	mov	r3, r4
 801831a:	f00e f963 	bl	80265e4 <sprintf>
 801831e:	e020      	b.n	8018362 <prvGenerateRunTimeStatsForTasksInList+0x15a>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u  <1%%  %5u\r\n",  (unsigned int) pxNextTCB->uxPriority, cStatus, pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack ));
 8018320:	69bb      	ldr	r3, [r7, #24]
 8018322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018324:	461d      	mov	r5, r3
 8018326:	f997 4003 	ldrsb.w	r4, [r7, #3]
 801832a:	69bb      	ldr	r3, [r7, #24]
 801832c:	f103 0834 	add.w	r8, r3, #52	; 0x34
 8018330:	69bb      	ldr	r3, [r7, #24]
 8018332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018334:	461e      	mov	r6, r3
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801833a:	4618      	mov	r0, r3
 801833c:	f000 f822 	bl	8018384 <usTaskCheckFreeStackSpace>
 8018340:	4603      	mov	r3, r0
 8018342:	f8cd 8000 	str.w	r8, [sp]
 8018346:	9601      	str	r6, [sp, #4]
 8018348:	9302      	str	r3, [sp, #8]
 801834a:	f640 308c 	movw	r0, #2956	; 0xb8c
 801834e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8018352:	f64d 11b0 	movw	r1, #55728	; 0xd9b0
 8018356:	f6c0 0102 	movt	r1, #2050	; 0x802
 801835a:	462a      	mov	r2, r5
 801835c:	4623      	mov	r3, r4
 801835e:	f00e f941 	bl	80265e4 <sprintf>
						}
						#endif
					}
				}

				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
 8018362:	68f8      	ldr	r0, [r7, #12]
 8018364:	f640 318c 	movw	r1, #2956	; 0xb8c
 8018368:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801836c:	f00e f962 	bl	8026634 <strcat>
			}

		} while( pxNextTCB != pxFirstTCB );
 8018370:	69ba      	ldr	r2, [r7, #24]
 8018372:	6a3b      	ldr	r3, [r7, #32]
 8018374:	429a      	cmp	r2, r3
 8018376:	f47f af68 	bne.w	801824a <prvGenerateRunTimeStatsForTasksInList+0x42>
	}
 801837a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 801837e:	46bd      	mov	sp, r7
 8018380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018384 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
 8018384:	b490      	push	{r4, r7}
 8018386:	b082      	sub	sp, #8
 8018388:	af00      	add	r7, sp, #0
 801838a:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0U;
 801838c:	f04f 0400 	mov.w	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8018390:	e006      	b.n	80183a0 <usTaskCheckFreeStackSpace+0x1c>
		{
			pucStackByte -= portSTACK_GROWTH;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	f103 0301 	add.w	r3, r3, #1
 8018398:	607b      	str	r3, [r7, #4]
			usCount++;
 801839a:	f104 0301 	add.w	r3, r4, #1
 801839e:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	781b      	ldrb	r3, [r3, #0]
 80183a4:	2ba5      	cmp	r3, #165	; 0xa5
 80183a6:	d0f4      	beq.n	8018392 <usTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
 80183a8:	ea4f 0394 	mov.w	r3, r4, lsr #2
 80183ac:	b29c      	uxth	r4, r3

		return usCount;
 80183ae:	4623      	mov	r3, r4
	}
 80183b0:	4618      	mov	r0, r3
 80183b2:	f107 0708 	add.w	r7, r7, #8
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bc90      	pop	{r4, r7}
 80183ba:	4770      	bx	lr

080183bc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b086      	sub	sp, #24
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d105      	bne.n	80183d6 <uxTaskGetStackHighWaterMark+0x1a>
 80183ca:	f640 2324 	movw	r3, #2596	; 0xa24
 80183ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	e000      	b.n	80183d8 <uxTaskGetStackHighWaterMark+0x1c>
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 80183da:	697b      	ldr	r3, [r7, #20]
 80183dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183de:	613b      	str	r3, [r7, #16]
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
 80183e0:	6938      	ldr	r0, [r7, #16]
 80183e2:	f7ff ffcf 	bl	8018384 <usTaskCheckFreeStackSpace>
 80183e6:	4603      	mov	r3, r0
 80183e8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80183ea:	68fb      	ldr	r3, [r7, #12]
	}
 80183ec:	4618      	mov	r0, r3
 80183ee:	f107 0718 	add.w	r7, r7, #24
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}
 80183f6:	bf00      	nop

080183f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b082      	sub	sp, #8
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018404:	4618      	mov	r0, r3
 8018406:	f00d f98b 	bl	8025720 <free>
		vPortFree( pxTCB );
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	f00d f988 	bl	8025720 <free>
	}
 8018410:	f107 0708 	add.w	r7, r7, #8
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}

08018418 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8018418:	b480      	push	{r7}
 801841a:	b083      	sub	sp, #12
 801841c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801841e:	f640 2324 	movw	r3, #2596	; 0xa24
 8018422:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	607b      	str	r3, [r7, #4]

		return xReturn;
 801842a:	687b      	ldr	r3, [r7, #4]
	}
 801842c:	4618      	mov	r0, r3
 801842e:	f107 070c 	add.w	r7, r7, #12
 8018432:	46bd      	mov	sp, r7
 8018434:	bc80      	pop	{r7}
 8018436:	4770      	bx	lr

08018438 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018448:	f640 2324 	movw	r3, #2596	; 0xa24
 801844c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018454:	429a      	cmp	r2, r3
 8018456:	d257      	bcs.n	8018508 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8018458:	f640 2324 	movw	r3, #2596	; 0xa24
 801845c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018464:	f1c3 020a 	rsb	r2, r3, #10
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	6959      	ldr	r1, [r3, #20]
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018474:	4613      	mov	r3, r2
 8018476:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801847a:	189b      	adds	r3, r3, r2
 801847c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018480:	461a      	mov	r2, r3
 8018482:	f640 2328 	movw	r3, #2600	; 0xa28
 8018486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801848a:	18d3      	adds	r3, r2, r3
 801848c:	4299      	cmp	r1, r3
 801848e:	d133      	bne.n	80184f8 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	f103 0304 	add.w	r3, r3, #4
 8018496:	4618      	mov	r0, r3
 8018498:	f7fe f87a 	bl	8016590 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801849c:	f640 2324 	movw	r3, #2596	; 0xa24
 80184a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184b0:	f640 3370 	movw	r3, #2928	; 0xb70
 80184b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d906      	bls.n	80184cc <vTaskPriorityInherit+0x94>
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184c2:	f640 3370 	movw	r3, #2928	; 0xb70
 80184c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80184ca:	601a      	str	r2, [r3, #0]
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184d0:	4613      	mov	r3, r2
 80184d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80184d6:	189b      	adds	r3, r3, r2
 80184d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80184dc:	461a      	mov	r2, r3
 80184de:	f640 2328 	movw	r3, #2600	; 0xa28
 80184e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80184e6:	18d2      	adds	r2, r2, r3
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	f103 0304 	add.w	r3, r3, #4
 80184ee:	4610      	mov	r0, r2
 80184f0:	4619      	mov	r1, r3
 80184f2:	f7fd ffe7 	bl	80164c4 <vListInsertEnd>
 80184f6:	e007      	b.n	8018508 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80184f8:	f640 2324 	movw	r3, #2596	; 0xa24
 80184fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}
 8018508:	f107 0710 	add.w	r7, r7, #16
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}

08018510 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8018510:	b580      	push	{r7, lr}
 8018512:	b084      	sub	sp, #16
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d03a      	beq.n	8018598 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801852a:	429a      	cmp	r2, r3
 801852c:	d034      	beq.n	8018598 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	f103 0304 	add.w	r3, r3, #4
 8018534:	4618      	mov	r0, r3
 8018536:	f7fe f82b 	bl	8016590 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018546:	f1c3 020a 	rsb	r2, r3, #10
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018552:	f640 3370 	movw	r3, #2928	; 0xb70
 8018556:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	429a      	cmp	r2, r3
 801855e:	d906      	bls.n	801856e <vTaskPriorityDisinherit+0x5e>
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018564:	f640 3370 	movw	r3, #2928	; 0xb70
 8018568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801856c:	601a      	str	r2, [r3, #0]
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018572:	4613      	mov	r3, r2
 8018574:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018578:	189b      	adds	r3, r3, r2
 801857a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801857e:	461a      	mov	r2, r3
 8018580:	f640 2328 	movw	r3, #2600	; 0xa28
 8018584:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018588:	18d2      	adds	r2, r2, r3
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	f103 0304 	add.w	r3, r3, #4
 8018590:	4610      	mov	r0, r2
 8018592:	4619      	mov	r1, r3
 8018594:	f7fd ff96 	bl	80164c4 <vListInsertEnd>
			}
		}
	}
 8018598:	f107 0710 	add.w	r7, r7, #16
 801859c:	46bd      	mov	sp, r7
 801859e:	bd80      	pop	{r7, pc}

080185a0 <_ZN16CUSB_MassStorageC1Ev>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/



CUSB_MassStorage::CUSB_MassStorage() {
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b082      	sub	sp, #8
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	4618      	mov	r0, r3
 80185ac:	f7fd fc10 	bl	8015dd0 <_ZN12AManagedTaskC1Ev>
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	4a04      	ldr	r2, [pc, #16]	; (80185c4 <_ZN16CUSB_MassStorageC1Ev+0x24>)
 80185b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	4618      	mov	r0, r3
 80185ba:	f107 0708 	add.w	r7, r7, #8
 80185be:	46bd      	mov	sp, r7
 80185c0:	bd80      	pop	{r7, pc}
 80185c2:	bf00      	nop
 80185c4:	08035990 	.word	0x08035990

080185c8 <_ZN16CUSB_MassStorageD1Ev>:

CUSB_MassStorage::~CUSB_MassStorage() {
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b082      	sub	sp, #8
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	4a0a      	ldr	r2, [pc, #40]	; (80185fc <_ZN16CUSB_MassStorageD1Ev+0x34>)
 80185d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80185d6:	6878      	ldr	r0, [r7, #4]
 80185d8:	f7fd fc16 	bl	8015e08 <_ZN12AManagedTaskD1Ev>
 80185dc:	f04f 0300 	mov.w	r3, #0
 80185e0:	f003 0301 	and.w	r3, r3, #1
 80185e4:	b2db      	uxtb	r3, r3
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d002      	beq.n	80185f0 <_ZN16CUSB_MassStorageD1Ev+0x28>
 80185ea:	6878      	ldr	r0, [r7, #4]
 80185ec:	f014 f880 	bl	802c6f0 <_ZdlPv>
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	4618      	mov	r0, r3
 80185f4:	f107 0708 	add.w	r7, r7, #8
 80185f8:	46bd      	mov	sp, r7
 80185fa:	bd80      	pop	{r7, pc}
 80185fc:	08035990 	.word	0x08035990

08018600 <_ZN16CUSB_MassStorageD0Ev>:
CUSB_MassStorage::CUSB_MassStorage() {
	// TODO Auto-generated constructor stub

}

CUSB_MassStorage::~CUSB_MassStorage() {
 8018600:	b580      	push	{r7, lr}
 8018602:	b082      	sub	sp, #8
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f7ff ffdd 	bl	80185c8 <_ZN16CUSB_MassStorageD1Ev>
 801860e:	6878      	ldr	r0, [r7, #4]
 8018610:	f014 f86e 	bl	802c6f0 <_ZdlPv>
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	4618      	mov	r0, r3
 8018618:	f107 0708 	add.w	r7, r7, #8
 801861c:	46bd      	mov	sp, r7
 801861e:	bd80      	pop	{r7, pc}

08018620 <_ZN16CUSB_MassStorage12HardwareInitEv>:
  * @brief  HardwareInit called before Scheduler starts
  * 		USB OTG FS will be initialized interface will be initialized
  * @param  None
  * @retval true on succsess
  */
bool CUSB_MassStorage::HardwareInit(void){
 8018620:	b580      	push	{r7, lr}
 8018622:	b084      	sub	sp, #16
 8018624:	af02      	add	r7, sp, #8
 8018626:	6078      	str	r0, [r7, #4]

	/* Init Host Library */
	USBH_Init(&USB_OTG_Core, USB_OTG_FS_CORE_ID, &USB_Host, &USBH_MSC_cb, &USR_Callbacks);
 8018628:	f640 1350 	movw	r3, #2384	; 0x950
 801862c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018630:	9300      	str	r3, [sp, #0]
 8018632:	f640 30c4 	movw	r0, #3012	; 0xbc4
 8018636:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801863a:	f04f 0101 	mov.w	r1, #1
 801863e:	f241 0274 	movw	r2, #4212	; 0x1074
 8018642:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8018646:	f640 03d8 	movw	r3, #2264	; 0x8d8
 801864a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801864e:	f7ea fad5 	bl	8002bfc <USBH_Init>

	return true;
 8018652:	f04f 0301 	mov.w	r3, #1
}
 8018656:	4618      	mov	r0, r3
 8018658:	f107 0708 	add.w	r7, r7, #8
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}

08018660 <_ZN16CUSB_MassStorage3RunEv>:
/**
  * @brief  task function for USB handling
  * @param  None
  * @retval None
  */
void CUSB_MassStorage::Run(void){
 8018660:	b580      	push	{r7, lr}
 8018662:	b082      	sub	sp, #8
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
	while(1){
	    /* Host Task handler */
	    USBH_Process(&USB_OTG_Core, &USB_Host);
 8018668:	f640 30c4 	movw	r0, #3012	; 0xbc4
 801866c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8018670:	f241 0174 	movw	r1, #4212	; 0x1074
 8018674:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8018678:	f7ea fb38 	bl	8002cec <USBH_Process>
  * @brief  task function for USB handling
  * @param  None
  * @retval None
  */
void CUSB_MassStorage::Run(void){
	while(1){
 801867c:	e7f4      	b.n	8018668 <_ZN16CUSB_MassStorage3RunEv+0x8>
 801867e:	bf00      	nop

08018680 <_ZN16CUSB_MassStorage17IsDeviceConnectedEv>:
/**
  * @brief  Get Connection Status
  * @param  None
  * @retval status of storage device
  */
bool CUSB_MassStorage::IsDeviceConnected(void){
 8018680:	b580      	push	{r7, lr}
 8018682:	b082      	sub	sp, #8
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
	return HCD_IsDeviceConnected(&USB_OTG_Core);
 8018688:	f640 30c4 	movw	r0, #3012	; 0xbc4
 801868c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8018690:	f7e8 ffb2 	bl	80015f8 <HCD_IsDeviceConnected>
 8018694:	4603      	mov	r3, r0
 8018696:	2b00      	cmp	r3, #0
 8018698:	bf0c      	ite	eq
 801869a:	2300      	moveq	r3, #0
 801869c:	2301      	movne	r3, #1
 801869e:	b2db      	uxtb	r3, r3
}
 80186a0:	4618      	mov	r0, r3
 80186a2:	f107 0708 	add.w	r7, r7, #8
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bd80      	pop	{r7, pc}
 80186aa:	bf00      	nop

080186ac <BSP_Init>:
  *         board user initializations
  * @param  None
  * @retval None
  */
void BSP_Init(void)
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	af00      	add	r7, sp, #0
  /* Configure PA0 pin: User Key pin */
  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 80186b0:	f04f 0000 	mov.w	r0, #0
 80186b4:	f04f 0100 	mov.w	r1, #0
 80186b8:	f7f1 fa82 	bl	8009bc0 <STM_EVAL_PBInit>
}
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop

080186c0 <USB_OTG_BSP_Init>:
  *         Initilizes BSP configurations
  * @param  None
  * @retval None
  */
void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
 /* Note: On STM32F4-Discovery board only USB OTG FS core is supported. */

  GPIO_InitTypeDef GPIO_InitStructure;
 #ifdef USE_USB_OTG_FS 

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);  
 80186c8:	f04f 0001 	mov.w	r0, #1
 80186cc:	f04f 0101 	mov.w	r1, #1
 80186d0:	f7f0 f96e 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
  
  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9  | 
 80186d4:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 80186d8:	60bb      	str	r3, [r7, #8]
      GPIO_Pin_11 | 
        GPIO_Pin_12;
  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80186da:	f04f 0303 	mov.w	r3, #3
 80186de:	737b      	strb	r3, [r7, #13]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80186e0:	f04f 0302 	mov.w	r3, #2
 80186e4:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80186e6:	f04f 0300 	mov.w	r3, #0
 80186ea:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80186ec:	f04f 0300 	mov.w	r3, #0
 80186f0:	73fb      	strb	r3, [r7, #15]
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 80186f2:	f107 0308 	add.w	r3, r7, #8
 80186f6:	f04f 0000 	mov.w	r0, #0
 80186fa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80186fe:	4619      	mov	r1, r3
 8018700:	f7ee fec8 	bl	8007494 <GPIO_Init>
  
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ; 
 8018704:	f04f 0000 	mov.w	r0, #0
 8018708:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801870c:	f04f 0109 	mov.w	r1, #9
 8018710:	f04f 020a 	mov.w	r2, #10
 8018714:	f7ef f854 	bl	80077c0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ; 
 8018718:	f04f 0000 	mov.w	r0, #0
 801871c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8018720:	f04f 010b 	mov.w	r1, #11
 8018724:	f04f 020a 	mov.w	r2, #10
 8018728:	f7ef f84a 	bl	80077c0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 801872c:	f04f 0000 	mov.w	r0, #0
 8018730:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8018734:	f04f 010c 	mov.w	r1, #12
 8018738:	f04f 020a 	mov.w	r2, #10
 801873c:	f7ef f840 	bl	80077c0 <GPIO_PinAFConfig>
  
  /* this for ID line debug */
  
  
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 8018740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8018746:	f04f 0301 	mov.w	r3, #1
 801874a:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;  
 801874c:	f04f 0301 	mov.w	r3, #1
 8018750:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8018752:	f04f 0303 	mov.w	r3, #3
 8018756:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8018758:	f107 0308 	add.w	r3, r7, #8
 801875c:	f04f 0000 	mov.w	r0, #0
 8018760:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8018764:	4619      	mov	r1, r3
 8018766:	f7ee fe95 	bl	8007494 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;   
 801876a:	f04f 0000 	mov.w	r0, #0
 801876e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8018772:	f04f 010a 	mov.w	r1, #10
 8018776:	f04f 020a 	mov.w	r2, #10
 801877a:	f7ef f821 	bl	80077c0 <GPIO_PinAFConfig>


  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 801877e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8018782:	f04f 0101 	mov.w	r1, #1
 8018786:	f7f0 f9c3 	bl	8008b10 <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ; 
 801878a:	f04f 0080 	mov.w	r0, #128	; 0x80
 801878e:	f04f 0101 	mov.w	r1, #1
 8018792:	f7f0 f939 	bl	8008a08 <RCC_AHB2PeriphClockCmd>
  #endif
 #endif //USB_OTG_HS

  /* Intialize Timer for delay function */
  //USB_OTG_BSP_TimeInit();
}
 8018796:	f107 0710 	add.w	r7, r7, #16
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}
 801879e:	bf00      	nop

080187a0 <USB_OTG_BSP_EnableInterrupt>:
  *         Configures USB Global interrupt
  * @param  None
  * @retval None
  */
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b084      	sub	sp, #16
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]

  NVIC_InitTypeDef NVIC_InitStructure;
  /* Enable USB Interrupt */
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 80187a8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80187ac:	f7ed fcb6 	bl	800611c <NVIC_PriorityGroupConfig>

  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;
 80187b0:	f04f 0343 	mov.w	r3, #67	; 0x43
 80187b4:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80187b6:	f04f 0300 	mov.w	r3, #0
 80187ba:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80187bc:	f04f 0301 	mov.w	r3, #1
 80187c0:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80187c2:	f04f 0301 	mov.w	r3, #1
 80187c6:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 80187c8:	f107 030c 	add.w	r3, r7, #12
 80187cc:	4618      	mov	r0, r3
 80187ce:	f7ed fcb9 	bl	8006144 <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

  NVIC_Init(&NVIC_InitStructure);*/
}
 80187d2:	f107 0710 	add.w	r7, r7, #16
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}
 80187da:	bf00      	nop

080187dc <USB_OTG_BSP_DriveVBUS>:
  *         Drives the Vbus signal through IO
  * @param  state : VBUS states
  * @retval None
  */
void USB_OTG_BSP_DriveVBUS(USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b082      	sub	sp, #8
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
 80187e4:	460b      	mov	r3, r1
 80187e6:	70fb      	strb	r3, [r7, #3]

  Bit 12 PPWR: Port power
  The application uses this field to control power to this port, and the core 
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
 80187e8:	78fb      	ldrb	r3, [r7, #3]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d108      	bne.n	8018800 <USB_OTG_BSP_DriveVBUS+0x24>
  {
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 80187ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80187f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80187f6:	f04f 0101 	mov.w	r1, #1
 80187fa:	f7ee ff8d 	bl	8007718 <GPIO_SetBits>
 80187fe:	e007      	b.n	8018810 <USB_OTG_BSP_DriveVBUS+0x34>
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    GPIO_ResetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 8018800:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018804:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8018808:	f04f 0101 	mov.w	r1, #1
 801880c:	f7ee ff92 	bl	8007734 <GPIO_ResetBits>
  }
}
 8018810:	f107 0708 	add.w	r7, r7, #8
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}

08018818 <USB_OTG_BSP_ConfigVBUS>:
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b084      	sub	sp, #16
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;


  RCC_AHB1PeriphClockCmd(HOST_POWERSW_PORT_RCC, ENABLE);
 8018820:	f04f 0004 	mov.w	r0, #4
 8018824:	f04f 0101 	mov.w	r1, #1
 8018828:	f7f0 f8c2 	bl	80089b0 <RCC_AHB1PeriphClockCmd>


  /* Configure Power Switch Vbus Pin */
  GPIO_InitStructure.GPIO_Pin = HOST_POWERSW_VBUS;
 801882c:	f04f 0301 	mov.w	r3, #1
 8018830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8018832:	f04f 0302 	mov.w	r3, #2
 8018836:	737b      	strb	r3, [r7, #13]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8018838:	f04f 0301 	mov.w	r3, #1
 801883c:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801883e:	f04f 0300 	mov.w	r3, #0
 8018842:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;  
 8018844:	f04f 0300 	mov.w	r3, #0
 8018848:	73fb      	strb	r3, [r7, #15]
  
  GPIO_Init(HOST_POWERSW_PORT, &GPIO_InitStructure);
 801884a:	f107 0308 	add.w	r3, r7, #8
 801884e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018852:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8018856:	4619      	mov	r1, r3
 8018858:	f7ee fe1c 	bl	8007494 <GPIO_Init>

  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
 801885c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018860:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8018864:	f04f 0101 	mov.w	r1, #1
 8018868:	f7ee ff56 	bl	8007718 <GPIO_SetBits>

  USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilising the Vbus Low
 801886c:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8018870:	f000 f830 	bl	80188d4 <USB_OTG_BSP_mDelay>
      in Reset Condition, when Vbus=1 and Reset-button is pressed by user */

}
 8018874:	f107 0710 	add.w	r7, r7, #16
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}

0801887c <USB_OTG_BSP_uDelay>:
  *         This function provides delay time in micro sec
  * @param  usec : Value of delay required in micro sec
  * @retval None
  */
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
 801887c:	b480      	push	{r7}
 801887e:	b085      	sub	sp, #20
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]

#ifdef USE_ACCURATE_TIME
  BSP_Delay(usec, TIM_USEC_DELAY);
#else
  __IO uint32_t count = 0;
 8018884:	f04f 0300 	mov.w	r3, #0
 8018888:	60bb      	str	r3, [r7, #8]
  const uint32_t utime = (120 * usec / 7);
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	4613      	mov	r3, r2
 801888e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8018892:	1a9b      	subs	r3, r3, r2
 8018894:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018898:	461a      	mov	r2, r3
 801889a:	f644 1325 	movw	r3, #18725	; 0x4925
 801889e:	f2c2 4392 	movt	r3, #9362	; 0x2492
 80188a2:	fba3 1302 	umull	r1, r3, r3, r2
 80188a6:	1ad2      	subs	r2, r2, r3
 80188a8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80188ac:	189b      	adds	r3, r3, r2
 80188ae:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80188b2:	60fb      	str	r3, [r7, #12]
 80188b4:	e000      	b.n	80188b8 <USB_OTG_BSP_uDelay+0x3c>
    if ( ++count > utime )
    {
      return ;
    }
  }
  while (1);
 80188b6:	bf00      	nop
#else
  __IO uint32_t count = 0;
  const uint32_t utime = (120 * usec / 7);
  do
  {
    if ( ++count > utime )
 80188b8:	68bb      	ldr	r3, [r7, #8]
 80188ba:	f103 0301 	add.w	r3, r3, #1
 80188be:	60bb      	str	r3, [r7, #8]
 80188c0:	68fa      	ldr	r2, [r7, #12]
 80188c2:	4293      	cmp	r3, r2
 80188c4:	d9f7      	bls.n	80188b6 <USB_OTG_BSP_uDelay+0x3a>
    {
      return ;
 80188c6:	bf00      	nop
    }
  }
  while (1);
#endif

}
 80188c8:	f107 0714 	add.w	r7, r7, #20
 80188cc:	46bd      	mov	sp, r7
 80188ce:	bc80      	pop	{r7}
 80188d0:	4770      	bx	lr
 80188d2:	bf00      	nop

080188d4 <USB_OTG_BSP_mDelay>:
  *          This function provides delay time in milli sec
  * @param  msec : Value of delay required in milli sec
  * @retval None
  */
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b082      	sub	sp, #8
 80188d8:	af00      	add	r7, sp, #0
 80188da:	6078      	str	r0, [r7, #4]
#ifdef USE_ACCURATE_TIME
  BSP_Delay(msec, TIM_MSEC_DELAY);
#else
  USB_OTG_BSP_uDelay(msec * 1000);
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80188e2:	fb02 f303 	mul.w	r3, r2, r3
 80188e6:	4618      	mov	r0, r3
 80188e8:	f7ff ffc8 	bl	801887c <USB_OTG_BSP_uDelay>
#endif

}
 80188ec:	f107 0708 	add.w	r7, r7, #8
 80188f0:	46bd      	mov	sp, r7
 80188f2:	bd80      	pop	{r7, pc}

080188f4 <USB_OTG_BSP_TimerIRQ>:
  *         Time base IRQ
  * @param  None
  * @retval None
  */
void USB_OTG_BSP_TimerIRQ (void)
{
 80188f4:	b480      	push	{r7}
 80188f6:	af00      	add	r7, sp, #0
    {
      TIM_Cmd(TIM2, DISABLE);
    }
  }
#endif
}
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bc80      	pop	{r7}
 80188fc:	4770      	bx	lr
 80188fe:	bf00      	nop

08018900 <USBH_USR_Init>:
  * @brief  USBH_USR_Init
  * @param  None
  * @retval None
  */
void USBH_USR_Init(void)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	af00      	add	r7, sp, #0
	vSemaphoreCreateBinary(semUSBMounted);
 8018904:	f04f 0001 	mov.w	r0, #1
 8018908:	f04f 0100 	mov.w	r1, #0
 801890c:	f7fd fe6a 	bl	80165e4 <xQueueCreate>
 8018910:	4602      	mov	r2, r0
 8018912:	f64a 4328 	movw	r3, #44072	; 0xac28
 8018916:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801891a:	601a      	str	r2, [r3, #0]
 801891c:	f64a 4328 	movw	r3, #44072	; 0xac28
 8018920:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d00d      	beq.n	8018946 <USBH_USR_Init+0x46>
 801892a:	f64a 4328 	movw	r3, #44072	; 0xac28
 801892e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	4618      	mov	r0, r3
 8018936:	f04f 0100 	mov.w	r1, #0
 801893a:	f04f 0200 	mov.w	r2, #0
 801893e:	f04f 0300 	mov.w	r3, #0
 8018942:	f7fd ff03 	bl	801674c <xQueueGenericSend>
	xSemaphoreTake(semUSBMounted,0); //Ensure sem is not available
 8018946:	f64a 4328 	movw	r3, #44072	; 0xac28
 801894a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	4618      	mov	r0, r3
 8018952:	f04f 0100 	mov.w	r1, #0
 8018956:	f04f 0200 	mov.w	r2, #0
 801895a:	f04f 0300 	mov.w	r3, #0
 801895e:	f7fd ffcf 	bl	8016900 <xQueueGenericReceive>

	vSemaphoreCreateBinary(semUSBApplication);
 8018962:	f04f 0001 	mov.w	r0, #1
 8018966:	f04f 0100 	mov.w	r1, #0
 801896a:	f7fd fe3b 	bl	80165e4 <xQueueCreate>
 801896e:	4602      	mov	r2, r0
 8018970:	f64a 13f0 	movw	r3, #43504	; 0xa9f0
 8018974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018978:	601a      	str	r2, [r3, #0]
 801897a:	f64a 13f0 	movw	r3, #43504	; 0xa9f0
 801897e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d00d      	beq.n	80189a4 <USBH_USR_Init+0xa4>
 8018988:	f64a 13f0 	movw	r3, #43504	; 0xa9f0
 801898c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	4618      	mov	r0, r3
 8018994:	f04f 0100 	mov.w	r1, #0
 8018998:	f04f 0200 	mov.w	r2, #0
 801899c:	f04f 0300 	mov.w	r3, #0
 80189a0:	f7fd fed4 	bl	801674c <xQueueGenericSend>
	xSemaphoreTake(semUSBApplication,0); //Ensure sem is not available
 80189a4:	f64a 13f0 	movw	r3, #43504	; 0xa9f0
 80189a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	4618      	mov	r0, r3
 80189b0:	f04f 0100 	mov.w	r1, #0
 80189b4:	f04f 0200 	mov.w	r2, #0
 80189b8:	f04f 0300 	mov.w	r3, #0
 80189bc:	f7fd ffa0 	bl	8016900 <xQueueGenericReceive>

}
 80189c0:	bd80      	pop	{r7, pc}
 80189c2:	bf00      	nop

080189c4 <USBH_USR_DeviceAttached>:
  * @brief  USBH_USR_DeviceAttached
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceAttached(void)
{
 80189c4:	b480      	push	{r7}
 80189c6:	af00      	add	r7, sp, #0

}
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bc80      	pop	{r7}
 80189cc:	4770      	bx	lr
 80189ce:	bf00      	nop

080189d0 <USBH_USR_UnrecoveredError>:
  * @brief  USBH_USR_UnrecoveredError
  * @param  None
  * @retval None
  */
void USBH_USR_UnrecoveredError (void)
{
 80189d0:	b480      	push	{r7}
 80189d2:	af00      	add	r7, sp, #0
}
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bc80      	pop	{r7}
 80189d8:	4770      	bx	lr
 80189da:	bf00      	nop

080189dc <USBH_USR_DeviceDisconnected>:
  *         Device disconnect event
  * @param  None
  * @retval Staus
  */
void USBH_USR_DeviceDisconnected (void)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	af00      	add	r7, sp, #0
	// do not fully block the Task to signal device disconnected
	xSemaphoreTake(semUSBMounted,1000/portTICK_RATE_MS);
 80189e0:	f64a 4328 	movw	r3, #44072	; 0xac28
 80189e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	4618      	mov	r0, r3
 80189ec:	f04f 0100 	mov.w	r1, #0
 80189f0:	f04f 0264 	mov.w	r2, #100	; 0x64
 80189f4:	f04f 0300 	mov.w	r3, #0
 80189f8:	f7fd ff82 	bl	8016900 <xQueueGenericReceive>
}
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop

08018a00 <USBH_USR_ResetDevice>:
  * @brief  USBH_USR_ResetUSBDevice
  * @param  None
  * @retval None
  */
void USBH_USR_ResetDevice(void)
{
 8018a00:	b480      	push	{r7}
 8018a02:	af00      	add	r7, sp, #0
  /* callback for USB-Reset */
}
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bc80      	pop	{r7}
 8018a08:	4770      	bx	lr
 8018a0a:	bf00      	nop

08018a0c <USBH_USR_DeviceSpeedDetected>:
  *         Displays the message on LCD for device speed
  * @param  Device speed:
  * @retval None
  */
void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
 8018a0c:	b480      	push	{r7}
 8018a0e:	b083      	sub	sp, #12
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	4603      	mov	r3, r0
 8018a14:	71fb      	strb	r3, [r7, #7]
}
 8018a16:	f107 070c 	add.w	r7, r7, #12
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bc80      	pop	{r7}
 8018a1e:	4770      	bx	lr

08018a20 <USBH_USR_Device_DescAvailable>:
  * @brief  USBH_USR_Device_DescAvailable
  * @param  device descriptor
  * @retval None
  */
void USBH_USR_Device_DescAvailable(void *DeviceDesc)
{
 8018a20:	b480      	push	{r7}
 8018a22:	b083      	sub	sp, #12
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
  /* callback for device descriptor */
}
 8018a28:	f107 070c 	add.w	r7, r7, #12
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	bc80      	pop	{r7}
 8018a30:	4770      	bx	lr
 8018a32:	bf00      	nop

08018a34 <USBH_USR_DeviceAddressAssigned>:
  *         USB device is successfully assigned the Address
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceAddressAssigned(void)
{
 8018a34:	b480      	push	{r7}
 8018a36:	af00      	add	r7, sp, #0
  /* callback for device successfully assigned the Address */
}
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bc80      	pop	{r7}
 8018a3c:	4770      	bx	lr
 8018a3e:	bf00      	nop

08018a40 <USBH_USR_Configuration_DescAvailable>:
  * @retval None
  */
void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
    USBH_InterfaceDesc_TypeDef *itfDesc,
    USBH_EpDesc_TypeDef *epDesc)
{
 8018a40:	b480      	push	{r7}
 8018a42:	b085      	sub	sp, #20
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	60f8      	str	r0, [r7, #12]
 8018a48:	60b9      	str	r1, [r7, #8]
 8018a4a:	607a      	str	r2, [r7, #4]
  /* callback for configuration descriptor */
}
 8018a4c:	f107 0714 	add.w	r7, r7, #20
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bc80      	pop	{r7}
 8018a54:	4770      	bx	lr
 8018a56:	bf00      	nop

08018a58 <USBH_USR_Manufacturer_String>:
  * @brief  USBH_USR_Manufacturer_String
  * @param  Manufacturer String
  * @retval None
  */
void USBH_USR_Manufacturer_String(void *ManufacturerString)
{
 8018a58:	b480      	push	{r7}
 8018a5a:	b083      	sub	sp, #12
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
  /* callback for  Manufacturer String */
}
 8018a60:	f107 070c 	add.w	r7, r7, #12
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bc80      	pop	{r7}
 8018a68:	4770      	bx	lr
 8018a6a:	bf00      	nop

08018a6c <USBH_USR_Product_String>:
  * @brief  USBH_USR_Product_String
  * @param  Product String
  * @retval None
  */
void USBH_USR_Product_String(void *ProductString)
{
 8018a6c:	b480      	push	{r7}
 8018a6e:	b083      	sub	sp, #12
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
  /* callback for Product String */
}
 8018a74:	f107 070c 	add.w	r7, r7, #12
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bc80      	pop	{r7}
 8018a7c:	4770      	bx	lr
 8018a7e:	bf00      	nop

08018a80 <USBH_USR_SerialNum_String>:
  * @brief  USBH_USR_SerialNum_String
  * @param  SerialNum_String
  * @retval None
  */
void USBH_USR_SerialNum_String(void *SerialNumString)
{
 8018a80:	b480      	push	{r7}
 8018a82:	b083      	sub	sp, #12
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
  /* callback for SerialNum_String */
}
 8018a88:	f107 070c 	add.w	r7, r7, #12
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bc80      	pop	{r7}
 8018a90:	4770      	bx	lr
 8018a92:	bf00      	nop

08018a94 <USBH_USR_EnumerationDone>:
  *         User response request is displayed to ask application jump to class
  * @param  None
  * @retval None
  */
void USBH_USR_EnumerationDone(void)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	af00      	add	r7, sp, #0
  vTaskDelay(500/portTICK_RATE_MS);
 8018a98:	f04f 0032 	mov.w	r0, #50	; 0x32
 8018a9c:	f7fe fb30 	bl	8017100 <vTaskDelay>
  
  /* Initialises the File System*/
  if (f_mount( 0, &fatfs ) != FR_OK )
 8018aa0:	f04f 0000 	mov.w	r0, #0
 8018aa4:	f64a 11f4 	movw	r1, #43508	; 0xa9f4
 8018aa8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8018aac:	f001 fd80 	bl	801a5b0 <f_mount>
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d10e      	bne.n	8018ad4 <USBH_USR_EnumerationDone+0x40>
	  return;

  // signal a mounted device
  xSemaphoreGive(semUSBMounted);
 8018ab6:	f64a 4328 	movw	r3, #44072	; 0xac28
 8018aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f04f 0100 	mov.w	r1, #0
 8018ac6:	f04f 0200 	mov.w	r2, #0
 8018aca:	f04f 0300 	mov.w	r3, #0
 8018ace:	f7fd fe3d 	bl	801674c <xQueueGenericSend>
 8018ad2:	e000      	b.n	8018ad6 <USBH_USR_EnumerationDone+0x42>
{
  vTaskDelay(500/portTICK_RATE_MS);
  
  /* Initialises the File System*/
  if (f_mount( 0, &fatfs ) != FR_OK )
	  return;
 8018ad4:	bf00      	nop

  // signal a mounted device
  xSemaphoreGive(semUSBMounted);
} 
 8018ad6:	bd80      	pop	{r7, pc}

08018ad8 <USBH_USR_DeviceNotSupported>:
  *         Device is not supported
  * @param  None
  * @retval None
  */
void USBH_USR_DeviceNotSupported(void)
{
 8018ad8:	b480      	push	{r7}
 8018ada:	af00      	add	r7, sp, #0
}
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bc80      	pop	{r7}
 8018ae0:	4770      	bx	lr
 8018ae2:	bf00      	nop

08018ae4 <USBH_USR_UserInput>:
  *         User Action for application state entry
  * @param  None
  * @retval USBH_USR_Status : User response for key button
  */
USBH_USR_Status USBH_USR_UserInput(void)
{
 8018ae4:	b480      	push	{r7}
 8018ae6:	af00      	add	r7, sp, #0
  /* callback for Key botton: set by software in this case */
  return USBH_USR_RESP_OK;
 8018ae8:	f04f 0301 	mov.w	r3, #1
}
 8018aec:	4618      	mov	r0, r3
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bc80      	pop	{r7}
 8018af2:	4770      	bx	lr

08018af4 <USBH_USR_OverCurrentDetected>:
  *         Over Current Detected on VBUS
  * @param  None
  * @retval None
  */
void USBH_USR_OverCurrentDetected (void)
{
 8018af4:	b480      	push	{r7}
 8018af6:	af00      	add	r7, sp, #0
}
 8018af8:	46bd      	mov	sp, r7
 8018afa:	bc80      	pop	{r7}
 8018afc:	4770      	bx	lr
 8018afe:	bf00      	nop

08018b00 <USBH_USR_MSC_Application>:
  * @brief  USBH_USR_MSC_Application
  * @param  None
  * @retval Staus
  */
int USBH_USR_MSC_Application(void)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	af00      	add	r7, sp, #0
	/*
	 * to syncronise USB Application Layer and File handler
	 * This Sem is given, so FileHandler is woke, when File Handler
	 * gives the Sem back Usb obtains it and processes
	 */
	xSemaphoreGive(semUSBApplication);
 8018b04:	f64a 13f0 	movw	r3, #43504	; 0xa9f0
 8018b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f04f 0100 	mov.w	r1, #0
 8018b14:	f04f 0200 	mov.w	r2, #0
 8018b18:	f04f 0300 	mov.w	r3, #0
 8018b1c:	f7fd fe16 	bl	801674c <xQueueGenericSend>
	/*
	 * ensure task yields
	 */
	taskYIELD();
 8018b20:	f7fd fbfa 	bl	8016318 <vPortYieldFromISR>
	/*
	 * Filehandler Tast is executing
	 */
	xSemaphoreTake(semUSBApplication,portMAX_DELAY);
 8018b24:	f64a 13f0 	movw	r3, #43504	; 0xa9f0
 8018b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	4618      	mov	r0, r3
 8018b30:	f04f 0100 	mov.w	r1, #0
 8018b34:	f04f 32ff 	mov.w	r2, #4294967295
 8018b38:	f04f 0300 	mov.w	r3, #0
 8018b3c:	f7fd fee0 	bl	8016900 <xQueueGenericReceive>
  return(0);
 8018b40:	f04f 0300 	mov.w	r3, #0
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	bd80      	pop	{r7, pc}

08018b48 <USBH_USR_DeInit>:
  *         Deint User state and associated variables
  * @param  None
  * @retval None
  */
void USBH_USR_DeInit(void)
{
 8018b48:	b480      	push	{r7}
 8018b4a:	af00      	add	r7, sp, #0

}
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bc80      	pop	{r7}
 8018b50:	4770      	bx	lr
 8018b52:	bf00      	nop

08018b54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
 8018b54:	b480      	push	{r7}
 8018b56:	b087      	sub	sp, #28
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	60f8      	str	r0, [r7, #12]
 8018b5c:	60b9      	str	r1, [r7, #8]
 8018b5e:	607a      	str	r2, [r7, #4]
	char *d = (char*)dst;
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	617b      	str	r3, [r7, #20]
	const char *s = (const char *)src;
 8018b64:	68bb      	ldr	r3, [r7, #8]
 8018b66:	613b      	str	r3, [r7, #16]
	while (cnt--) *d++ = *s++;
 8018b68:	e00b      	b.n	8018b82 <mem_cpy+0x2e>
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	781a      	ldrb	r2, [r3, #0]
 8018b6e:	697b      	ldr	r3, [r7, #20]
 8018b70:	701a      	strb	r2, [r3, #0]
 8018b72:	697b      	ldr	r3, [r7, #20]
 8018b74:	f103 0301 	add.w	r3, r3, #1
 8018b78:	617b      	str	r3, [r7, #20]
 8018b7a:	693b      	ldr	r3, [r7, #16]
 8018b7c:	f103 0301 	add.w	r3, r3, #1
 8018b80:	613b      	str	r3, [r7, #16]
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	bf0c      	ite	eq
 8018b88:	2300      	moveq	r3, #0
 8018b8a:	2301      	movne	r3, #1
 8018b8c:	b2db      	uxtb	r3, r3
 8018b8e:	687a      	ldr	r2, [r7, #4]
 8018b90:	f102 32ff 	add.w	r2, r2, #4294967295
 8018b94:	607a      	str	r2, [r7, #4]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d1e7      	bne.n	8018b6a <mem_cpy+0x16>
}
 8018b9a:	f107 071c 	add.w	r7, r7, #28
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	bc80      	pop	{r7}
 8018ba2:	4770      	bx	lr

08018ba4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
 8018ba4:	b480      	push	{r7}
 8018ba6:	b087      	sub	sp, #28
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	60f8      	str	r0, [r7, #12]
 8018bac:	60b9      	str	r1, [r7, #8]
 8018bae:	607a      	str	r2, [r7, #4]
	char *d = (char*)dst;
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	617b      	str	r3, [r7, #20]
	while (cnt--) *d++ = (char)val;
 8018bb4:	e007      	b.n	8018bc6 <mem_set+0x22>
 8018bb6:	68bb      	ldr	r3, [r7, #8]
 8018bb8:	b2da      	uxtb	r2, r3
 8018bba:	697b      	ldr	r3, [r7, #20]
 8018bbc:	701a      	strb	r2, [r3, #0]
 8018bbe:	697b      	ldr	r3, [r7, #20]
 8018bc0:	f103 0301 	add.w	r3, r3, #1
 8018bc4:	617b      	str	r3, [r7, #20]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	bf0c      	ite	eq
 8018bcc:	2300      	moveq	r3, #0
 8018bce:	2301      	movne	r3, #1
 8018bd0:	b2db      	uxtb	r3, r3
 8018bd2:	687a      	ldr	r2, [r7, #4]
 8018bd4:	f102 32ff 	add.w	r2, r2, #4294967295
 8018bd8:	607a      	str	r2, [r7, #4]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d1eb      	bne.n	8018bb6 <mem_set+0x12>
}
 8018bde:	f107 071c 	add.w	r7, r7, #28
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bc80      	pop	{r7}
 8018be6:	4770      	bx	lr

08018be8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
 8018be8:	b480      	push	{r7}
 8018bea:	b089      	sub	sp, #36	; 0x24
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	60f8      	str	r0, [r7, #12]
 8018bf0:	60b9      	str	r1, [r7, #8]
 8018bf2:	607a      	str	r2, [r7, #4]
	const char *d = (const char *)dst, *s = (const char *)src;
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	61fb      	str	r3, [r7, #28]
 8018bf8:	68bb      	ldr	r3, [r7, #8]
 8018bfa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8018bfc:	f04f 0300 	mov.w	r3, #0
 8018c00:	617b      	str	r3, [r7, #20]
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8018c02:	bf00      	nop
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	bf0c      	ite	eq
 8018c0a:	2300      	moveq	r3, #0
 8018c0c:	2301      	movne	r3, #1
 8018c0e:	b2db      	uxtb	r3, r3
 8018c10:	687a      	ldr	r2, [r7, #4]
 8018c12:	f102 32ff 	add.w	r2, r2, #4294967295
 8018c16:	607a      	str	r2, [r7, #4]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d016      	beq.n	8018c4a <mem_cmp+0x62>
 8018c1c:	69fb      	ldr	r3, [r7, #28]
 8018c1e:	781b      	ldrb	r3, [r3, #0]
 8018c20:	461a      	mov	r2, r3
 8018c22:	69bb      	ldr	r3, [r7, #24]
 8018c24:	781b      	ldrb	r3, [r3, #0]
 8018c26:	1ad3      	subs	r3, r2, r3
 8018c28:	617b      	str	r3, [r7, #20]
 8018c2a:	697b      	ldr	r3, [r7, #20]
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	bf14      	ite	ne
 8018c30:	2300      	movne	r3, #0
 8018c32:	2301      	moveq	r3, #1
 8018c34:	b2db      	uxtb	r3, r3
 8018c36:	69fa      	ldr	r2, [r7, #28]
 8018c38:	f102 0201 	add.w	r2, r2, #1
 8018c3c:	61fa      	str	r2, [r7, #28]
 8018c3e:	69ba      	ldr	r2, [r7, #24]
 8018c40:	f102 0201 	add.w	r2, r2, #1
 8018c44:	61ba      	str	r2, [r7, #24]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d1dc      	bne.n	8018c04 <mem_cmp+0x1c>
	return r;
 8018c4a:	697b      	ldr	r3, [r7, #20]
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8018c52:	46bd      	mov	sp, r7
 8018c54:	bc80      	pop	{r7}
 8018c56:	4770      	bx	lr

08018c58 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8018c58:	b480      	push	{r7}
 8018c5a:	b083      	sub	sp, #12
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8018c62:	e003      	b.n	8018c6c <chk_chr+0x14>
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	f103 0301 	add.w	r3, r3, #1
 8018c6a:	607b      	str	r3, [r7, #4]
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d005      	beq.n	8018c80 <chk_chr+0x28>
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	781b      	ldrb	r3, [r3, #0]
 8018c78:	461a      	mov	r2, r3
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	429a      	cmp	r2, r3
 8018c7e:	d1f1      	bne.n	8018c64 <chk_chr+0xc>
	return *str;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	781b      	ldrb	r3, [r3, #0]
}
 8018c84:	4618      	mov	r0, r3
 8018c86:	f107 070c 	add.w	r7, r7, #12
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	bc80      	pop	{r7}
 8018c8e:	4770      	bx	lr

08018c90 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b084      	sub	sp, #16
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
 8018c98:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c9e:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
 8018ca0:	68fa      	ldr	r2, [r7, #12]
 8018ca2:	683b      	ldr	r3, [r7, #0]
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	d055      	beq.n	8018d54 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	791b      	ldrb	r3, [r3, #4]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d039      	beq.n	8018d24 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	785a      	ldrb	r2, [r3, #1]
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8018cba:	4610      	mov	r0, r2
 8018cbc:	4619      	mov	r1, r3
 8018cbe:	68fa      	ldr	r2, [r7, #12]
 8018cc0:	f04f 0301 	mov.w	r3, #1
 8018cc4:	f7ec fc08 	bl	80054d8 <disk_write>
 8018cc8:	4603      	mov	r3, r0
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d002      	beq.n	8018cd4 <move_window+0x44>
				return FR_DISK_ERR;
 8018cce:	f04f 0301 	mov.w	r3, #1
 8018cd2:	e041      	b.n	8018d58 <move_window+0xc8>
			fs->wflag = 0;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	f04f 0200 	mov.w	r2, #0
 8018cda:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	69db      	ldr	r3, [r3, #28]
 8018ce4:	18d2      	adds	r2, r2, r3
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	429a      	cmp	r2, r3
 8018cea:	d91b      	bls.n	8018d24 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	78db      	ldrb	r3, [r3, #3]
 8018cf0:	72fb      	strb	r3, [r7, #11]
 8018cf2:	e014      	b.n	8018d1e <move_window+0x8e>
					wsect += fs->sects_fat;
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	69db      	ldr	r3, [r3, #28]
 8018cf8:	68fa      	ldr	r2, [r7, #12]
 8018cfa:	18d3      	adds	r3, r2, r3
 8018cfc:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drive, fs->win, wsect, 1);
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	785a      	ldrb	r2, [r3, #1]
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8018d08:	4610      	mov	r0, r2
 8018d0a:	4619      	mov	r1, r3
 8018d0c:	68fa      	ldr	r2, [r7, #12]
 8018d0e:	f04f 0301 	mov.w	r3, #1
 8018d12:	f7ec fbe1 	bl	80054d8 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8018d16:	7afb      	ldrb	r3, [r7, #11]
 8018d18:	f103 33ff 	add.w	r3, r3, #4294967295
 8018d1c:	72fb      	strb	r3, [r7, #11]
 8018d1e:	7afb      	ldrb	r3, [r7, #11]
 8018d20:	2b01      	cmp	r3, #1
 8018d22:	d8e7      	bhi.n	8018cf4 <move_window+0x64>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8018d24:	683b      	ldr	r3, [r7, #0]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d014      	beq.n	8018d54 <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	785a      	ldrb	r2, [r3, #1]
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8018d34:	4610      	mov	r0, r2
 8018d36:	4619      	mov	r1, r3
 8018d38:	683a      	ldr	r2, [r7, #0]
 8018d3a:	f04f 0301 	mov.w	r3, #1
 8018d3e:	f7ec fb6d 	bl	800541c <disk_read>
 8018d42:	4603      	mov	r3, r0
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d002      	beq.n	8018d4e <move_window+0xbe>
				return FR_DISK_ERR;
 8018d48:	f04f 0301 	mov.w	r3, #1
 8018d4c:	e004      	b.n	8018d58 <move_window+0xc8>
			fs->winsect = sector;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	683a      	ldr	r2, [r7, #0]
 8018d52:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}

	return FR_OK;
 8018d54:	f04f 0300 	mov.w	r3, #0
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	f107 0710 	add.w	r7, r7, #16
 8018d5e:	46bd      	mov	sp, r7
 8018d60:	bd80      	pop	{r7, pc}
 8018d62:	bf00      	nop

08018d64 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b084      	sub	sp, #16
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
 8018d6c:	6878      	ldr	r0, [r7, #4]
 8018d6e:	f04f 0100 	mov.w	r1, #0
 8018d72:	f7ff ff8d 	bl	8018c90 <move_window>
 8018d76:	4603      	mov	r3, r0
 8018d78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8018d7a:	7bfb      	ldrb	r3, [r7, #15]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	f040 80ab 	bne.w	8018ed8 <sync+0x174>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	781b      	ldrb	r3, [r3, #0]
 8018d86:	2b03      	cmp	r3, #3
 8018d88:	f040 8097 	bne.w	8018eba <sync+0x156>
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	7a9b      	ldrb	r3, [r3, #10]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	f000 8092 	beq.w	8018eba <sync+0x156>
			fs->winsect = 0;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	f04f 0200 	mov.w	r2, #0
 8018d9c:	631a      	str	r2, [r3, #48]	; 0x30
			mem_set(fs->win, 0, 512);
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8018da4:	4618      	mov	r0, r3
 8018da6:	f04f 0100 	mov.w	r1, #0
 8018daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018dae:	f7ff fef9 	bl	8018ba4 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	f04f 0255 	mov.w	r2, #85	; 0x55
 8018db8:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	f04f 02aa 	mov.w	r2, #170	; 0xaa
 8018dc2:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	f04f 0252 	mov.w	r2, #82	; 0x52
 8018dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f04f 0252 	mov.w	r2, #82	; 0x52
 8018dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	f04f 0261 	mov.w	r2, #97	; 0x61
 8018de0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	f04f 0241 	mov.w	r2, #65	; 0x41
 8018dea:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	f04f 0272 	mov.w	r2, #114	; 0x72
 8018df4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	f04f 0272 	mov.w	r2, #114	; 0x72
 8018dfe:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	f04f 0241 	mov.w	r2, #65	; 0x41
 8018e08:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f04f 0261 	mov.w	r2, #97	; 0x61
 8018e12:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	691b      	ldr	r3, [r3, #16]
 8018e1a:	b2da      	uxtb	r2, r3
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	691b      	ldr	r3, [r3, #16]
 8018e26:	b29b      	uxth	r3, r3
 8018e28:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8018e2c:	b29b      	uxth	r3, r3
 8018e2e:	b2da      	uxtb	r2, r3
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	691b      	ldr	r3, [r3, #16]
 8018e3a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8018e3e:	b2da      	uxtb	r2, r3
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	691b      	ldr	r3, [r3, #16]
 8018e4a:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8018e4e:	b2da      	uxtb	r2, r3
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	68db      	ldr	r3, [r3, #12]
 8018e5a:	b2da      	uxtb	r2, r3
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	68db      	ldr	r3, [r3, #12]
 8018e66:	b29b      	uxth	r3, r3
 8018e68:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8018e6c:	b29b      	uxth	r3, r3
 8018e6e:	b2da      	uxtb	r2, r3
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	68db      	ldr	r3, [r3, #12]
 8018e7a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8018e7e:	b2da      	uxtb	r2, r3
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	68db      	ldr	r3, [r3, #12]
 8018e8a:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8018e8e:	b2da      	uxtb	r2, r3
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	7859      	ldrb	r1, [r3, #1]
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	695b      	ldr	r3, [r3, #20]
 8018ea4:	4608      	mov	r0, r1
 8018ea6:	4611      	mov	r1, r2
 8018ea8:	461a      	mov	r2, r3
 8018eaa:	f04f 0301 	mov.w	r3, #1
 8018eae:	f7ec fb13 	bl	80054d8 <disk_write>
			fs->fsi_flag = 0;
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	f04f 0200 	mov.w	r2, #0
 8018eb8:	729a      	strb	r2, [r3, #10]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	785b      	ldrb	r3, [r3, #1]
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f04f 0100 	mov.w	r1, #0
 8018ec4:	f04f 0200 	mov.w	r2, #0
 8018ec8:	f7ec fb72 	bl	80055b0 <disk_ioctl>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d002      	beq.n	8018ed8 <sync+0x174>
			res = FR_DISK_ERR;
 8018ed2:	f04f 0301 	mov.w	r3, #1
 8018ed6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8018ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8018eda:	4618      	mov	r0, r3
 8018edc:	f107 0710 	add.w	r7, r7, #16
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}

08018ee4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b086      	sub	sp, #24
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
 8018eec:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	2b01      	cmp	r3, #1
 8018ef2:	d904      	bls.n	8018efe <get_fat+0x1a>
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	6a1a      	ldr	r2, [r3, #32]
 8018ef8:	683b      	ldr	r3, [r7, #0]
 8018efa:	429a      	cmp	r2, r3
 8018efc:	d802      	bhi.n	8018f04 <get_fat+0x20>
		return 1;
 8018efe:	f04f 0301 	mov.w	r3, #1
 8018f02:	e0e3      	b.n	80190cc <get_fat+0x1e8>

	fsect = fs->fatbase;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f08:	617b      	str	r3, [r7, #20]
	switch (fs->fs_type) {
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	781b      	ldrb	r3, [r3, #0]
 8018f0e:	2b02      	cmp	r3, #2
 8018f10:	d052      	beq.n	8018fb8 <get_fat+0xd4>
 8018f12:	2b03      	cmp	r3, #3
 8018f14:	d07f      	beq.n	8019016 <get_fat+0x132>
 8018f16:	2b01      	cmp	r3, #1
 8018f18:	f040 80d6 	bne.w	80190c8 <get_fat+0x1e4>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	613b      	str	r3, [r7, #16]
 8018f20:	693b      	ldr	r3, [r7, #16]
 8018f22:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8018f26:	693a      	ldr	r2, [r7, #16]
 8018f28:	18d3      	adds	r3, r2, r3
 8018f2a:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8018f2c:	693b      	ldr	r3, [r7, #16]
 8018f2e:	ea4f 2253 	mov.w	r2, r3, lsr #9
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	18d3      	adds	r3, r2, r3
 8018f36:	6878      	ldr	r0, [r7, #4]
 8018f38:	4619      	mov	r1, r3
 8018f3a:	f7ff fea9 	bl	8018c90 <move_window>
 8018f3e:	4603      	mov	r3, r0
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	f040 80ba 	bne.w	80190ba <get_fat+0x1d6>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 8018f46:	693b      	ldr	r3, [r7, #16]
 8018f48:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8018f4c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8018f50:	687a      	ldr	r2, [r7, #4]
 8018f52:	18d3      	adds	r3, r2, r3
 8018f54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018f58:	60fb      	str	r3, [r7, #12]
 8018f5a:	693b      	ldr	r3, [r7, #16]
 8018f5c:	f103 0301 	add.w	r3, r3, #1
 8018f60:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8018f62:	693b      	ldr	r3, [r7, #16]
 8018f64:	ea4f 2253 	mov.w	r2, r3, lsr #9
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	18d3      	adds	r3, r2, r3
 8018f6c:	6878      	ldr	r0, [r7, #4]
 8018f6e:	4619      	mov	r1, r3
 8018f70:	f7ff fe8e 	bl	8018c90 <move_window>
 8018f74:	4603      	mov	r3, r0
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	f040 80a1 	bne.w	80190be <get_fat+0x1da>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 8018f7c:	693b      	ldr	r3, [r7, #16]
 8018f7e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8018f82:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8018f86:	687a      	ldr	r2, [r7, #4]
 8018f88:	18d3      	adds	r3, r2, r3
 8018f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018f8e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8018f92:	68fa      	ldr	r2, [r7, #12]
 8018f94:	4313      	orrs	r3, r2
 8018f96:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018f98:	683b      	ldr	r3, [r7, #0]
 8018f9a:	f003 0301 	and.w	r3, r3, #1
 8018f9e:	b2db      	uxtb	r3, r3
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d003      	beq.n	8018fac <get_fat+0xc8>
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8018faa:	e004      	b.n	8018fb6 <get_fat+0xd2>
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8018fb2:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8018fb6:	e089      	b.n	80190cc <get_fat+0x1e8>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8018fbe:	697b      	ldr	r3, [r7, #20]
 8018fc0:	18d3      	adds	r3, r2, r3
 8018fc2:	6878      	ldr	r0, [r7, #4]
 8018fc4:	4619      	mov	r1, r3
 8018fc6:	f7ff fe63 	bl	8018c90 <move_window>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d178      	bne.n	80190c2 <get_fat+0x1de>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	b29b      	uxth	r3, r3
 8018fda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018fde:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8018fe2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8018fe6:	f103 0301 	add.w	r3, r3, #1
 8018fea:	18d3      	adds	r3, r2, r3
 8018fec:	781b      	ldrb	r3, [r3, #0]
 8018fee:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8018ff2:	b29a      	uxth	r2, r3
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	b29b      	uxth	r3, r3
 8018ffe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019002:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8019006:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801900a:	18cb      	adds	r3, r1, r3
 801900c:	781b      	ldrb	r3, [r3, #0]
 801900e:	4313      	orrs	r3, r2
 8019010:	b29b      	uxth	r3, r3
 8019012:	b29b      	uxth	r3, r3
 8019014:	e05a      	b.n	80190cc <get_fat+0x1e8>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	ea4f 12d3 	mov.w	r2, r3, lsr #7
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	18d3      	adds	r3, r2, r3
 8019020:	6878      	ldr	r0, [r7, #4]
 8019022:	4619      	mov	r1, r3
 8019024:	f7ff fe34 	bl	8018c90 <move_window>
 8019028:	4603      	mov	r3, r0
 801902a:	2b00      	cmp	r3, #0
 801902c:	d14b      	bne.n	80190c6 <get_fat+0x1e2>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019034:	683b      	ldr	r3, [r7, #0]
 8019036:	b29b      	uxth	r3, r3
 8019038:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801903c:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8019040:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8019044:	f103 0303 	add.w	r3, r3, #3
 8019048:	18d3      	adds	r3, r2, r3
 801904a:	781b      	ldrb	r3, [r3, #0]
 801904c:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8019056:	683b      	ldr	r3, [r7, #0]
 8019058:	b29b      	uxth	r3, r3
 801905a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801905e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8019062:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8019066:	f103 0302 	add.w	r3, r3, #2
 801906a:	18cb      	adds	r3, r1, r3
 801906c:	781b      	ldrb	r3, [r3, #0]
 801906e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8019072:	431a      	orrs	r2, r3
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	b29b      	uxth	r3, r3
 801907e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019082:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8019086:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801908a:	f103 0301 	add.w	r3, r3, #1
 801908e:	18cb      	adds	r3, r1, r3
 8019090:	781b      	ldrb	r3, [r3, #0]
 8019092:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8019096:	431a      	orrs	r2, r3
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801909e:	683b      	ldr	r3, [r7, #0]
 80190a0:	b29b      	uxth	r3, r3
 80190a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80190a6:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80190aa:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80190ae:	18cb      	adds	r3, r1, r3
 80190b0:	781b      	ldrb	r3, [r3, #0]
 80190b2:	4313      	orrs	r3, r2
 80190b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80190b8:	e008      	b.n	80190cc <get_fat+0x1e8>

	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 80190ba:	bf00      	nop
 80190bc:	e004      	b.n	80190c8 <get_fat+0x1e4>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 80190be:	bf00      	nop
 80190c0:	e002      	b.n	80190c8 <get_fat+0x1e4>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 80190c2:	bf00      	nop
 80190c4:	e000      	b.n	80190c8 <get_fat+0x1e4>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 80190c6:	bf00      	nop
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
 80190c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80190cc:	4618      	mov	r0, r3
 80190ce:	f107 0718 	add.w	r7, r7, #24
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}
 80190d6:	bf00      	nop

080190d8 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b088      	sub	sp, #32
 80190dc:	af00      	add	r7, sp, #0
 80190de:	60f8      	str	r0, [r7, #12]
 80190e0:	60b9      	str	r1, [r7, #8]
 80190e2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	2b01      	cmp	r3, #1
 80190e8:	d904      	bls.n	80190f4 <put_fat+0x1c>
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	6a1a      	ldr	r2, [r3, #32]
 80190ee:	68bb      	ldr	r3, [r7, #8]
 80190f0:	429a      	cmp	r2, r3
 80190f2:	d803      	bhi.n	80190fc <put_fat+0x24>
		res = FR_INT_ERR;
 80190f4:	f04f 0302 	mov.w	r3, #2
 80190f8:	77fb      	strb	r3, [r7, #31]
 80190fa:	e121      	b.n	8019340 <put_fat+0x268>

	} else {
		fsect = fs->fatbase;
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019100:	61bb      	str	r3, [r7, #24]
		switch (fs->fs_type) {
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	781b      	ldrb	r3, [r3, #0]
 8019106:	2b02      	cmp	r3, #2
 8019108:	d07e      	beq.n	8019208 <put_fat+0x130>
 801910a:	2b03      	cmp	r3, #3
 801910c:	f000 80b0 	beq.w	8019270 <put_fat+0x198>
 8019110:	2b01      	cmp	r3, #1
 8019112:	f040 8106 	bne.w	8019322 <put_fat+0x24a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8019116:	68bb      	ldr	r3, [r7, #8]
 8019118:	617b      	str	r3, [r7, #20]
 801911a:	697b      	ldr	r3, [r7, #20]
 801911c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8019120:	697a      	ldr	r2, [r7, #20]
 8019122:	18d3      	adds	r3, r2, r3
 8019124:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fsect + (bc / SS(fs)));
 8019126:	697b      	ldr	r3, [r7, #20]
 8019128:	ea4f 2253 	mov.w	r2, r3, lsr #9
 801912c:	69bb      	ldr	r3, [r7, #24]
 801912e:	18d3      	adds	r3, r2, r3
 8019130:	68f8      	ldr	r0, [r7, #12]
 8019132:	4619      	mov	r1, r3
 8019134:	f7ff fdac 	bl	8018c90 <move_window>
 8019138:	4603      	mov	r3, r0
 801913a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801913c:	7ffb      	ldrb	r3, [r7, #31]
 801913e:	2b00      	cmp	r3, #0
 8019140:	f040 80f3 	bne.w	801932a <put_fat+0x252>
			p = &fs->win[bc & (SS(fs) - 1)];
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801914a:	697b      	ldr	r3, [r7, #20]
 801914c:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8019150:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8019154:	18d3      	adds	r3, r2, r3
 8019156:	613b      	str	r3, [r7, #16]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019158:	68bb      	ldr	r3, [r7, #8]
 801915a:	f003 0301 	and.w	r3, r3, #1
 801915e:	b2db      	uxtb	r3, r3
 8019160:	2b00      	cmp	r3, #0
 8019162:	d00e      	beq.n	8019182 <put_fat+0xaa>
 8019164:	693b      	ldr	r3, [r7, #16]
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	b2db      	uxtb	r3, r3
 801916a:	f003 030f 	and.w	r3, r3, #15
 801916e:	b2da      	uxtb	r2, r3
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	b2db      	uxtb	r3, r3
 8019174:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8019178:	b2db      	uxtb	r3, r3
 801917a:	4313      	orrs	r3, r2
 801917c:	b2db      	uxtb	r3, r3
 801917e:	b2db      	uxtb	r3, r3
 8019180:	e001      	b.n	8019186 <put_fat+0xae>
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	b2db      	uxtb	r3, r3
 8019186:	693a      	ldr	r2, [r7, #16]
 8019188:	7013      	strb	r3, [r2, #0]
			bc++;
 801918a:	697b      	ldr	r3, [r7, #20]
 801918c:	f103 0301 	add.w	r3, r3, #1
 8019190:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	f04f 0201 	mov.w	r2, #1
 8019198:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fsect + (bc / SS(fs)));
 801919a:	697b      	ldr	r3, [r7, #20]
 801919c:	ea4f 2253 	mov.w	r2, r3, lsr #9
 80191a0:	69bb      	ldr	r3, [r7, #24]
 80191a2:	18d3      	adds	r3, r2, r3
 80191a4:	68f8      	ldr	r0, [r7, #12]
 80191a6:	4619      	mov	r1, r3
 80191a8:	f7ff fd72 	bl	8018c90 <move_window>
 80191ac:	4603      	mov	r3, r0
 80191ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80191b0:	7ffb      	ldrb	r3, [r7, #31]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	f040 80bb 	bne.w	801932e <put_fat+0x256>
			p = &fs->win[bc & (SS(fs) - 1)];
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80191be:	697b      	ldr	r3, [r7, #20]
 80191c0:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80191c4:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80191c8:	18d3      	adds	r3, r2, r3
 80191ca:	613b      	str	r3, [r7, #16]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80191cc:	68bb      	ldr	r3, [r7, #8]
 80191ce:	f003 0301 	and.w	r3, r3, #1
 80191d2:	b2db      	uxtb	r3, r3
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d004      	beq.n	80191e2 <put_fat+0x10a>
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80191de:	b2db      	uxtb	r3, r3
 80191e0:	e00f      	b.n	8019202 <put_fat+0x12a>
 80191e2:	693b      	ldr	r3, [r7, #16]
 80191e4:	781b      	ldrb	r3, [r3, #0]
 80191e6:	b2db      	uxtb	r3, r3
 80191e8:	f023 030f 	bic.w	r3, r3, #15
 80191ec:	b2da      	uxtb	r2, r3
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80191f4:	b2db      	uxtb	r3, r3
 80191f6:	f003 030f 	and.w	r3, r3, #15
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	4313      	orrs	r3, r2
 80191fe:	b2db      	uxtb	r3, r3
 8019200:	b2db      	uxtb	r3, r3
 8019202:	693a      	ldr	r2, [r7, #16]
 8019204:	7013      	strb	r3, [r2, #0]
			break;
 8019206:	e097      	b.n	8019338 <put_fat+0x260>

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 8019208:	68bb      	ldr	r3, [r7, #8]
 801920a:	ea4f 2213 	mov.w	r2, r3, lsr #8
 801920e:	69bb      	ldr	r3, [r7, #24]
 8019210:	18d3      	adds	r3, r2, r3
 8019212:	68f8      	ldr	r0, [r7, #12]
 8019214:	4619      	mov	r1, r3
 8019216:	f7ff fd3b 	bl	8018c90 <move_window>
 801921a:	4603      	mov	r3, r0
 801921c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801921e:	7ffb      	ldrb	r3, [r7, #31]
 8019220:	2b00      	cmp	r3, #0
 8019222:	f040 8086 	bne.w	8019332 <put_fat+0x25a>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801922c:	68bb      	ldr	r3, [r7, #8]
 801922e:	b29b      	uxth	r3, r3
 8019230:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019234:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8019238:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801923c:	18d3      	adds	r3, r2, r3
 801923e:	687a      	ldr	r2, [r7, #4]
 8019240:	b2d2      	uxtb	r2, r2
 8019242:	701a      	strb	r2, [r3, #0]
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801924a:	68bb      	ldr	r3, [r7, #8]
 801924c:	b29b      	uxth	r3, r3
 801924e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019252:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8019256:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801925a:	f103 0301 	add.w	r3, r3, #1
 801925e:	18d3      	adds	r3, r2, r3
 8019260:	687a      	ldr	r2, [r7, #4]
 8019262:	b292      	uxth	r2, r2
 8019264:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8019268:	b292      	uxth	r2, r2
 801926a:	b2d2      	uxtb	r2, r2
 801926c:	701a      	strb	r2, [r3, #0]
			break;
 801926e:	e063      	b.n	8019338 <put_fat+0x260>

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 8019270:	68bb      	ldr	r3, [r7, #8]
 8019272:	ea4f 12d3 	mov.w	r2, r3, lsr #7
 8019276:	69bb      	ldr	r3, [r7, #24]
 8019278:	18d3      	adds	r3, r2, r3
 801927a:	68f8      	ldr	r0, [r7, #12]
 801927c:	4619      	mov	r1, r3
 801927e:	f7ff fd07 	bl	8018c90 <move_window>
 8019282:	4603      	mov	r3, r0
 8019284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019286:	7ffb      	ldrb	r3, [r7, #31]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d154      	bne.n	8019336 <put_fat+0x25e>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019292:	68bb      	ldr	r3, [r7, #8]
 8019294:	b29b      	uxth	r3, r3
 8019296:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801929a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801929e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80192a2:	18d3      	adds	r3, r2, r3
 80192a4:	687a      	ldr	r2, [r7, #4]
 80192a6:	b2d2      	uxtb	r2, r2
 80192a8:	701a      	strb	r2, [r3, #0]
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80192b0:	68bb      	ldr	r3, [r7, #8]
 80192b2:	b29b      	uxth	r3, r3
 80192b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80192b8:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80192bc:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80192c0:	f103 0301 	add.w	r3, r3, #1
 80192c4:	18d3      	adds	r3, r2, r3
 80192c6:	687a      	ldr	r2, [r7, #4]
 80192c8:	b292      	uxth	r2, r2
 80192ca:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80192ce:	b292      	uxth	r2, r2
 80192d0:	b2d2      	uxtb	r2, r2
 80192d2:	701a      	strb	r2, [r3, #0]
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80192da:	68bb      	ldr	r3, [r7, #8]
 80192dc:	b29b      	uxth	r3, r3
 80192de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80192e2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80192e6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80192ea:	f103 0302 	add.w	r3, r3, #2
 80192ee:	18d3      	adds	r3, r2, r3
 80192f0:	687a      	ldr	r2, [r7, #4]
 80192f2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80192f6:	b2d2      	uxtb	r2, r2
 80192f8:	701a      	strb	r2, [r3, #0]
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019300:	68bb      	ldr	r3, [r7, #8]
 8019302:	b29b      	uxth	r3, r3
 8019304:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019308:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801930c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8019310:	f103 0303 	add.w	r3, r3, #3
 8019314:	18d3      	adds	r3, r2, r3
 8019316:	687a      	ldr	r2, [r7, #4]
 8019318:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801931c:	b2d2      	uxtb	r2, r2
 801931e:	701a      	strb	r2, [r3, #0]
			break;
 8019320:	e00a      	b.n	8019338 <put_fat+0x260>

		default :
			res = FR_INT_ERR;
 8019322:	f04f 0302 	mov.w	r3, #2
 8019326:	77fb      	strb	r3, [r7, #31]
			break;
 8019328:	e006      	b.n	8019338 <put_fat+0x260>
		fsect = fs->fatbase;
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
 801932a:	bf00      	nop
 801932c:	e004      	b.n	8019338 <put_fat+0x260>
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
 801932e:	bf00      	nop
 8019330:	e002      	b.n	8019338 <put_fat+0x260>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
 8019332:	bf00      	nop
 8019334:	e000      	b.n	8019338 <put_fat+0x260>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
 8019336:	bf00      	nop

		default :
			res = FR_INT_ERR;
			break;
		}
		fs->wflag = 1;
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	f04f 0201 	mov.w	r2, #1
 801933e:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8019340:	7ffb      	ldrb	r3, [r7, #31]
}
 8019342:	4618      	mov	r0, r3
 8019344:	f107 0720 	add.w	r7, r7, #32
 8019348:	46bd      	mov	sp, r7
 801934a:	bd80      	pop	{r7, pc}

0801934c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b084      	sub	sp, #16
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
 8019354:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 8019356:	683b      	ldr	r3, [r7, #0]
 8019358:	2b01      	cmp	r3, #1
 801935a:	d904      	bls.n	8019366 <remove_chain+0x1a>
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	6a1a      	ldr	r2, [r3, #32]
 8019360:	683b      	ldr	r3, [r7, #0]
 8019362:	429a      	cmp	r2, r3
 8019364:	d803      	bhi.n	801936e <remove_chain+0x22>
		res = FR_INT_ERR;
 8019366:	f04f 0302 	mov.w	r3, #2
 801936a:	73fb      	strb	r3, [r7, #15]
 801936c:	e040      	b.n	80193f0 <remove_chain+0xa4>

	} else {
		res = FR_OK;
 801936e:	f04f 0300 	mov.w	r3, #0
 8019372:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->max_clust) {			/* Not a last link? */
 8019374:	e033      	b.n	80193de <remove_chain+0x92>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8019376:	6878      	ldr	r0, [r7, #4]
 8019378:	6839      	ldr	r1, [r7, #0]
 801937a:	f7ff fdb3 	bl	8018ee4 <get_fat>
 801937e:	4603      	mov	r3, r0
 8019380:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d030      	beq.n	80193ea <remove_chain+0x9e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8019388:	68bb      	ldr	r3, [r7, #8]
 801938a:	2b01      	cmp	r3, #1
 801938c:	d103      	bne.n	8019396 <remove_chain+0x4a>
 801938e:	f04f 0302 	mov.w	r3, #2
 8019392:	73fb      	strb	r3, [r7, #15]
 8019394:	e02c      	b.n	80193f0 <remove_chain+0xa4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8019396:	68bb      	ldr	r3, [r7, #8]
 8019398:	f1b3 3fff 	cmp.w	r3, #4294967295
 801939c:	d103      	bne.n	80193a6 <remove_chain+0x5a>
 801939e:	f04f 0301 	mov.w	r3, #1
 80193a2:	73fb      	strb	r3, [r7, #15]
 80193a4:	e024      	b.n	80193f0 <remove_chain+0xa4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80193a6:	6878      	ldr	r0, [r7, #4]
 80193a8:	6839      	ldr	r1, [r7, #0]
 80193aa:	f04f 0200 	mov.w	r2, #0
 80193ae:	f7ff fe93 	bl	80190d8 <put_fat>
 80193b2:	4603      	mov	r3, r0
 80193b4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80193b6:	7bfb      	ldrb	r3, [r7, #15]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d118      	bne.n	80193ee <remove_chain+0xa2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	691b      	ldr	r3, [r3, #16]
 80193c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193c4:	d009      	beq.n	80193da <remove_chain+0x8e>
				fs->free_clust++;
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	691b      	ldr	r3, [r3, #16]
 80193ca:	f103 0201 	add.w	r2, r3, #1
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	f04f 0201 	mov.w	r2, #1
 80193d8:	729a      	strb	r2, [r3, #10]
			}
			clst = nxt;	/* Next cluster */
 80193da:	68bb      	ldr	r3, [r7, #8]
 80193dc:	603b      	str	r3, [r7, #0]
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	6a1a      	ldr	r2, [r3, #32]
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d8c6      	bhi.n	8019376 <remove_chain+0x2a>
 80193e8:	e002      	b.n	80193f0 <remove_chain+0xa4>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 80193ea:	bf00      	nop
 80193ec:	e000      	b.n	80193f0 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
 80193ee:	bf00      	nop
			}
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
 80193f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80193f2:	4618      	mov	r0, r3
 80193f4:	f107 0710 	add.w	r7, r7, #16
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}

080193fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b086      	sub	sp, #24
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
 8019404:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	6a1b      	ldr	r3, [r3, #32]
 801940a:	60fb      	str	r3, [r7, #12]
	if (clst == 0) {		/* Create new chain */
 801940c:	683b      	ldr	r3, [r7, #0]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d10d      	bne.n	801942e <create_chain+0x32>
		scl = fs->last_clust;			/* Get suggested start point */
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	68db      	ldr	r3, [r3, #12]
 8019416:	613b      	str	r3, [r7, #16]
		if (scl == 0 || scl >= mcl) scl = 1;
 8019418:	693b      	ldr	r3, [r7, #16]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d003      	beq.n	8019426 <create_chain+0x2a>
 801941e:	693a      	ldr	r2, [r7, #16]
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	429a      	cmp	r2, r3
 8019424:	d317      	bcc.n	8019456 <create_chain+0x5a>
 8019426:	f04f 0301 	mov.w	r3, #1
 801942a:	613b      	str	r3, [r7, #16]
 801942c:	e013      	b.n	8019456 <create_chain+0x5a>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 801942e:	6878      	ldr	r0, [r7, #4]
 8019430:	6839      	ldr	r1, [r7, #0]
 8019432:	f7ff fd57 	bl	8018ee4 <get_fat>
 8019436:	4603      	mov	r3, r0
 8019438:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 801943a:	68bb      	ldr	r3, [r7, #8]
 801943c:	2b01      	cmp	r3, #1
 801943e:	d802      	bhi.n	8019446 <create_chain+0x4a>
 8019440:	f04f 0301 	mov.w	r3, #1
 8019444:	e064      	b.n	8019510 <create_chain+0x114>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 8019446:	68ba      	ldr	r2, [r7, #8]
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	429a      	cmp	r2, r3
 801944c:	d201      	bcs.n	8019452 <create_chain+0x56>
 801944e:	68bb      	ldr	r3, [r7, #8]
 8019450:	e05e      	b.n	8019510 <create_chain+0x114>
		scl = clst;
 8019452:	683b      	ldr	r3, [r7, #0]
 8019454:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8019456:	693b      	ldr	r3, [r7, #16]
 8019458:	617b      	str	r3, [r7, #20]
 801945a:	e000      	b.n	801945e <create_chain+0x62>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
	}
 801945c:	bf00      	nop
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 801945e:	697b      	ldr	r3, [r7, #20]
 8019460:	f103 0301 	add.w	r3, r3, #1
 8019464:	617b      	str	r3, [r7, #20]
		if (ncl >= mcl) {				/* Wrap around */
 8019466:	697a      	ldr	r2, [r7, #20]
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	429a      	cmp	r2, r3
 801946c:	d309      	bcc.n	8019482 <create_chain+0x86>
			ncl = 2;
 801946e:	f04f 0302 	mov.w	r3, #2
 8019472:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free custer */
 8019474:	697a      	ldr	r2, [r7, #20]
 8019476:	693b      	ldr	r3, [r7, #16]
 8019478:	429a      	cmp	r2, r3
 801947a:	d902      	bls.n	8019482 <create_chain+0x86>
 801947c:	f04f 0300 	mov.w	r3, #0
 8019480:	e046      	b.n	8019510 <create_chain+0x114>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8019482:	6878      	ldr	r0, [r7, #4]
 8019484:	6979      	ldr	r1, [r7, #20]
 8019486:	f7ff fd2d 	bl	8018ee4 <get_fat>
 801948a:	4603      	mov	r3, r0
 801948c:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 801948e:	68bb      	ldr	r3, [r7, #8]
 8019490:	2b00      	cmp	r3, #0
 8019492:	d00f      	beq.n	80194b4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 8019494:	68bb      	ldr	r3, [r7, #8]
 8019496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801949a:	d002      	beq.n	80194a2 <create_chain+0xa6>
 801949c:	68bb      	ldr	r3, [r7, #8]
 801949e:	2b01      	cmp	r3, #1
 80194a0:	d101      	bne.n	80194a6 <create_chain+0xaa>
			return cs;
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	e034      	b.n	8019510 <create_chain+0x114>
		if (ncl == scl) return 0;		/* No free custer */
 80194a6:	697a      	ldr	r2, [r7, #20]
 80194a8:	693b      	ldr	r3, [r7, #16]
 80194aa:	429a      	cmp	r2, r3
 80194ac:	d1d6      	bne.n	801945c <create_chain+0x60>
 80194ae:	f04f 0300 	mov.w	r3, #0
 80194b2:	e02d      	b.n	8019510 <create_chain+0x114>
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
 80194b4:	bf00      	nop
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 80194b6:	6878      	ldr	r0, [r7, #4]
 80194b8:	6979      	ldr	r1, [r7, #20]
 80194ba:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80194be:	f7ff fe0b 	bl	80190d8 <put_fat>
 80194c2:	4603      	mov	r3, r0
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d002      	beq.n	80194ce <create_chain+0xd2>
		return 0xFFFFFFFF;
 80194c8:	f04f 33ff 	mov.w	r3, #4294967295
 80194cc:	e020      	b.n	8019510 <create_chain+0x114>
	if (clst != 0) {					/* Link it to the previous one if needed */
 80194ce:	683b      	ldr	r3, [r7, #0]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d00a      	beq.n	80194ea <create_chain+0xee>
		if (put_fat(fs, clst, ncl))
 80194d4:	6878      	ldr	r0, [r7, #4]
 80194d6:	6839      	ldr	r1, [r7, #0]
 80194d8:	697a      	ldr	r2, [r7, #20]
 80194da:	f7ff fdfd 	bl	80190d8 <put_fat>
 80194de:	4603      	mov	r3, r0
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d002      	beq.n	80194ea <create_chain+0xee>
			return 0xFFFFFFFF;
 80194e4:	f04f 33ff 	mov.w	r3, #4294967295
 80194e8:	e012      	b.n	8019510 <create_chain+0x114>
	}

	fs->last_clust = ncl;				/* Update FSINFO */
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	697a      	ldr	r2, [r7, #20]
 80194ee:	60da      	str	r2, [r3, #12]
	if (fs->free_clust != 0xFFFFFFFF) {
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	691b      	ldr	r3, [r3, #16]
 80194f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194f8:	d009      	beq.n	801950e <create_chain+0x112>
		fs->free_clust--;
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	691b      	ldr	r3, [r3, #16]
 80194fe:	f103 32ff 	add.w	r2, r3, #4294967295
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 1;
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	f04f 0201 	mov.w	r2, #1
 801950c:	729a      	strb	r2, [r3, #10]
	}

	return ncl;		/* Return new cluster number */
 801950e:	697b      	ldr	r3, [r7, #20]
}
 8019510:	4618      	mov	r0, r3
 8019512:	f107 0718 	add.w	r7, r7, #24
 8019516:	46bd      	mov	sp, r7
 8019518:	bd80      	pop	{r7, pc}
 801951a:	bf00      	nop

0801951c <clust2sect>:
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801951c:	b480      	push	{r7}
 801951e:	b083      	sub	sp, #12
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8019526:	683b      	ldr	r3, [r7, #0]
 8019528:	f1a3 0302 	sub.w	r3, r3, #2
 801952c:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	6a1b      	ldr	r3, [r3, #32]
 8019532:	f1a3 0202 	sub.w	r2, r3, #2
 8019536:	683b      	ldr	r3, [r7, #0]
 8019538:	429a      	cmp	r2, r3
 801953a:	d802      	bhi.n	8019542 <clust2sect+0x26>
 801953c:	f04f 0300 	mov.w	r3, #0
 8019540:	e007      	b.n	8019552 <clust2sect+0x36>
	return clst * fs->csize + fs->database;
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	789b      	ldrb	r3, [r3, #2]
 8019546:	683a      	ldr	r2, [r7, #0]
 8019548:	fb02 f203 	mul.w	r2, r2, r3
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019550:	18d3      	adds	r3, r2, r3
}
 8019552:	4618      	mov	r0, r3
 8019554:	f107 070c 	add.w	r7, r7, #12
 8019558:	46bd      	mov	sp, r7
 801955a:	bc80      	pop	{r7}
 801955c:	4770      	bx	lr
 801955e:	bf00      	nop

08019560 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b084      	sub	sp, #16
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	460b      	mov	r3, r1
 801956a:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	887a      	ldrh	r2, [r7, #2]
 8019570:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	689b      	ldr	r3, [r3, #8]
 8019576:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	2b01      	cmp	r3, #1
 801957c:	d005      	beq.n	801958a <dir_seek+0x2a>
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	6a1a      	ldr	r2, [r3, #32]
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	429a      	cmp	r2, r3
 8019588:	d802      	bhi.n	8019590 <dir_seek+0x30>
		return FR_INT_ERR;
 801958a:	f04f 0302 	mov.w	r3, #2
 801958e:	e06e      	b.n	801966e <dir_seek+0x10e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d108      	bne.n	80195a8 <dir_seek+0x48>
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	781b      	ldrb	r3, [r3, #0]
 801959c:	2b03      	cmp	r3, #3
 801959e:	d103      	bne.n	80195a8 <dir_seek+0x48>
		clst = dj->fs->dirbase;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195a6:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table */
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d116      	bne.n	80195dc <dir_seek+0x7c>
		dj->clust = clst;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	68fa      	ldr	r2, [r7, #12]
 80195b2:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	891b      	ldrh	r3, [r3, #8]
 80195ba:	887a      	ldrh	r2, [r7, #2]
 80195bc:	429a      	cmp	r2, r3
 80195be:	d302      	bcc.n	80195c6 <dir_seek+0x66>
			return FR_INT_ERR;
 80195c0:	f04f 0302 	mov.w	r3, #2
 80195c4:	e053      	b.n	801966e <dir_seek+0x10e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80195cc:	887b      	ldrh	r3, [r7, #2]
 80195ce:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80195d2:	b29b      	uxth	r3, r3
 80195d4:	18d2      	adds	r2, r2, r3
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	611a      	str	r2, [r3, #16]
 80195da:	e03a      	b.n	8019652 <dir_seek+0xf2>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	789b      	ldrb	r3, [r3, #2]
 80195e2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80195e6:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 80195e8:	e01e      	b.n	8019628 <dir_seek+0xc8>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	4618      	mov	r0, r3
 80195f0:	68f9      	ldr	r1, [r7, #12]
 80195f2:	f7ff fc77 	bl	8018ee4 <get_fat>
 80195f6:	4603      	mov	r3, r0
 80195f8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019600:	d102      	bne.n	8019608 <dir_seek+0xa8>
 8019602:	f04f 0301 	mov.w	r3, #1
 8019606:	e032      	b.n	801966e <dir_seek+0x10e>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	2b01      	cmp	r3, #1
 801960c:	d905      	bls.n	801961a <dir_seek+0xba>
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	6a1a      	ldr	r2, [r3, #32]
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	429a      	cmp	r2, r3
 8019618:	d802      	bhi.n	8019620 <dir_seek+0xc0>
				return FR_INT_ERR;
 801961a:	f04f 0302 	mov.w	r3, #2
 801961e:	e026      	b.n	801966e <dir_seek+0x10e>
			idx -= ic;
 8019620:	887a      	ldrh	r2, [r7, #2]
 8019622:	897b      	ldrh	r3, [r7, #10]
 8019624:	1ad3      	subs	r3, r2, r3
 8019626:	807b      	strh	r3, [r7, #2]
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8019628:	887a      	ldrh	r2, [r7, #2]
 801962a:	897b      	ldrh	r3, [r7, #10]
 801962c:	429a      	cmp	r2, r3
 801962e:	d2dc      	bcs.n	80195ea <dir_seek+0x8a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	68fa      	ldr	r2, [r7, #12]
 8019634:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	4618      	mov	r0, r3
 801963c:	68f9      	ldr	r1, [r7, #12]
 801963e:	f7ff ff6d 	bl	801951c <clust2sect>
 8019642:	4602      	mov	r2, r0
 8019644:	887b      	ldrh	r3, [r7, #2]
 8019646:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801964a:	b29b      	uxth	r3, r3
 801964c:	18d2      	adds	r2, r2, r3
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801965a:	887b      	ldrh	r3, [r7, #2]
 801965c:	f003 030f 	and.w	r3, r3, #15
 8019660:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019664:	18d2      	adds	r2, r2, r3
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 801966a:	f04f 0300 	mov.w	r3, #0
}
 801966e:	4618      	mov	r0, r3
 8019670:	f107 0710 	add.w	r7, r7, #16
 8019674:	46bd      	mov	sp, r7
 8019676:	bd80      	pop	{r7, pc}

08019678 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 8019678:	b590      	push	{r4, r7, lr}
 801967a:	b085      	sub	sp, #20
 801967c:	af00      	add	r7, sp, #0
 801967e:	6078      	str	r0, [r7, #4]
 8019680:	460b      	mov	r3, r1
 8019682:	70fb      	strb	r3, [r7, #3]
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	88db      	ldrh	r3, [r3, #6]
 8019688:	f103 0301 	add.w	r3, r3, #1
 801968c:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 801968e:	893b      	ldrh	r3, [r7, #8]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d003      	beq.n	801969c <dir_next+0x24>
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	691b      	ldr	r3, [r3, #16]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d102      	bne.n	80196a2 <dir_next+0x2a>
		return FR_NO_FILE;
 801969c:	f04f 0304 	mov.w	r3, #4
 80196a0:	e0d6      	b.n	8019850 <dir_next+0x1d8>

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 80196a2:	893b      	ldrh	r3, [r7, #8]
 80196a4:	f003 030f 	and.w	r3, r3, #15
 80196a8:	b29b      	uxth	r3, r3
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	f040 80bf 	bne.w	801982e <dir_next+0x1b6>
		dj->sect++;					/* Next sector */
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	691b      	ldr	r3, [r3, #16]
 80196b4:	f103 0201 	add.w	r2, r3, #1
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	68db      	ldr	r3, [r3, #12]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d109      	bne.n	80196d8 <dir_next+0x60>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	891b      	ldrh	r3, [r3, #8]
 80196ca:	893a      	ldrh	r2, [r7, #8]
 80196cc:	429a      	cmp	r2, r3
 80196ce:	f0c0 80ae 	bcc.w	801982e <dir_next+0x1b6>
				return FR_NO_FILE;
 80196d2:	f04f 0304 	mov.w	r3, #4
 80196d6:	e0bb      	b.n	8019850 <dir_next+0x1d8>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80196d8:	893b      	ldrh	r3, [r7, #8]
 80196da:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80196de:	b29b      	uxth	r3, r3
 80196e0:	461a      	mov	r2, r3
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	789b      	ldrb	r3, [r3, #2]
 80196e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80196ec:	4013      	ands	r3, r2
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	f040 809d 	bne.w	801982e <dir_next+0x1b6>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	681a      	ldr	r2, [r3, #0]
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	68db      	ldr	r3, [r3, #12]
 80196fc:	4610      	mov	r0, r2
 80196fe:	4619      	mov	r1, r3
 8019700:	f7ff fbf0 	bl	8018ee4 <get_fat>
 8019704:	4603      	mov	r3, r0
 8019706:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	2b01      	cmp	r3, #1
 801970c:	d802      	bhi.n	8019714 <dir_next+0x9c>
 801970e:	f04f 0302 	mov.w	r3, #2
 8019712:	e09d      	b.n	8019850 <dir_next+0x1d8>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801971a:	d102      	bne.n	8019722 <dir_next+0xaa>
 801971c:	f04f 0301 	mov.w	r3, #1
 8019720:	e096      	b.n	8019850 <dir_next+0x1d8>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	6a1a      	ldr	r2, [r3, #32]
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	429a      	cmp	r2, r3
 801972c:	d873      	bhi.n	8019816 <dir_next+0x19e>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 801972e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d102      	bne.n	801973c <dir_next+0xc4>
 8019736:	f04f 0304 	mov.w	r3, #4
 801973a:	e089      	b.n	8019850 <dir_next+0x1d8>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681a      	ldr	r2, [r3, #0]
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	68db      	ldr	r3, [r3, #12]
 8019744:	4610      	mov	r0, r2
 8019746:	4619      	mov	r1, r3
 8019748:	f7ff fe58 	bl	80193fc <create_chain>
 801974c:	4603      	mov	r3, r0
 801974e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d102      	bne.n	801975c <dir_next+0xe4>
 8019756:	f04f 0307 	mov.w	r3, #7
 801975a:	e079      	b.n	8019850 <dir_next+0x1d8>
					if (clst == 1) return FR_INT_ERR;
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	2b01      	cmp	r3, #1
 8019760:	d102      	bne.n	8019768 <dir_next+0xf0>
 8019762:	f04f 0302 	mov.w	r3, #2
 8019766:	e073      	b.n	8019850 <dir_next+0x1d8>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801976e:	d102      	bne.n	8019776 <dir_next+0xfe>
 8019770:	f04f 0301 	mov.w	r3, #1
 8019774:	e06c      	b.n	8019850 <dir_next+0x1d8>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	4618      	mov	r0, r3
 801977c:	f04f 0100 	mov.w	r1, #0
 8019780:	f7ff fa86 	bl	8018c90 <move_window>
 8019784:	4603      	mov	r3, r0
 8019786:	2b00      	cmp	r3, #0
 8019788:	d002      	beq.n	8019790 <dir_next+0x118>
 801978a:	f04f 0301 	mov.w	r3, #1
 801978e:	e05f      	b.n	8019850 <dir_next+0x1d8>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8019798:	4618      	mov	r0, r3
 801979a:	f04f 0100 	mov.w	r1, #0
 801979e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80197a2:	f7ff f9ff 	bl	8018ba4 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	681c      	ldr	r4, [r3, #0]
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	4618      	mov	r0, r3
 80197b0:	68f9      	ldr	r1, [r7, #12]
 80197b2:	f7ff feb3 	bl	801951c <clust2sect>
 80197b6:	4603      	mov	r3, r0
 80197b8:	6323      	str	r3, [r4, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80197ba:	f04f 0300 	mov.w	r3, #0
 80197be:	72fb      	strb	r3, [r7, #11]
 80197c0:	e01b      	b.n	80197fa <dir_next+0x182>
						dj->fs->wflag = 1;
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	f04f 0201 	mov.w	r2, #1
 80197ca:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	4618      	mov	r0, r3
 80197d2:	f04f 0100 	mov.w	r1, #0
 80197d6:	f7ff fa5b 	bl	8018c90 <move_window>
 80197da:	4603      	mov	r3, r0
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d002      	beq.n	80197e6 <dir_next+0x16e>
 80197e0:	f04f 0301 	mov.w	r3, #1
 80197e4:	e034      	b.n	8019850 <dir_next+0x1d8>
						dj->fs->winsect++;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80197ec:	f102 0201 	add.w	r2, r2, #1
 80197f0:	631a      	str	r2, [r3, #48]	; 0x30
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80197f2:	7afb      	ldrb	r3, [r7, #11]
 80197f4:	f103 0301 	add.w	r3, r3, #1
 80197f8:	72fb      	strb	r3, [r7, #11]
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	789b      	ldrb	r3, [r3, #2]
 8019800:	7afa      	ldrb	r2, [r7, #11]
 8019802:	429a      	cmp	r2, r3
 8019804:	d3dd      	bcc.n	80197c2 <dir_next+0x14a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	687a      	ldr	r2, [r7, #4]
 801980c:	6812      	ldr	r2, [r2, #0]
 801980e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8019810:	7afa      	ldrb	r2, [r7, #11]
 8019812:	1a8a      	subs	r2, r1, r2
 8019814:	631a      	str	r2, [r3, #48]	; 0x30
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	68fa      	ldr	r2, [r7, #12]
 801981a:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	4618      	mov	r0, r3
 8019822:	68f9      	ldr	r1, [r7, #12]
 8019824:	f7ff fe7a 	bl	801951c <clust2sect>
 8019828:	4602      	mov	r2, r0
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	893a      	ldrh	r2, [r7, #8]
 8019832:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801983c:	893b      	ldrh	r3, [r7, #8]
 801983e:	f003 030f 	and.w	r3, r3, #15
 8019842:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019846:	18d2      	adds	r2, r2, r3
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	615a      	str	r2, [r3, #20]

	return FR_OK;
 801984c:	f04f 0300 	mov.w	r3, #0
}
 8019850:	4618      	mov	r0, r3
 8019852:	f107 0714 	add.w	r7, r7, #20
 8019856:	46bd      	mov	sp, r7
 8019858:	bd90      	pop	{r4, r7, pc}
 801985a:	bf00      	nop

0801985c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b086      	sub	sp, #24
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
 8019864:	6878      	ldr	r0, [r7, #4]
 8019866:	f04f 0100 	mov.w	r1, #0
 801986a:	f7ff fe79 	bl	8019560 <dir_seek>
 801986e:	4603      	mov	r3, r0
 8019870:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8019872:	7dfb      	ldrb	r3, [r7, #23]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d001      	beq.n	801987c <dir_find+0x20>
 8019878:	7dfb      	ldrb	r3, [r7, #23]
 801987a:	e03b      	b.n	80198f4 <dir_find+0x98>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	681a      	ldr	r2, [r3, #0]
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	691b      	ldr	r3, [r3, #16]
 8019884:	4610      	mov	r0, r2
 8019886:	4619      	mov	r1, r3
 8019888:	f7ff fa02 	bl	8018c90 <move_window>
 801988c:	4603      	mov	r3, r0
 801988e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8019890:	7dfb      	ldrb	r3, [r7, #23]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d12a      	bne.n	80198ec <dir_find+0x90>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	695b      	ldr	r3, [r3, #20]
 801989a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 801989c:	693b      	ldr	r3, [r7, #16]
 801989e:	781b      	ldrb	r3, [r3, #0]
 80198a0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80198a2:	7bfb      	ldrb	r3, [r7, #15]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d103      	bne.n	80198b0 <dir_find+0x54>
 80198a8:	f04f 0304 	mov.w	r3, #4
 80198ac:	75fb      	strb	r3, [r7, #23]
 80198ae:	e020      	b.n	80198f2 <dir_find+0x96>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 80198b0:	693b      	ldr	r3, [r7, #16]
 80198b2:	f103 030b 	add.w	r3, r3, #11
 80198b6:	781b      	ldrb	r3, [r3, #0]
 80198b8:	f003 0308 	and.w	r3, r3, #8
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d10a      	bne.n	80198d6 <dir_find+0x7a>
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	699b      	ldr	r3, [r3, #24]
 80198c4:	6938      	ldr	r0, [r7, #16]
 80198c6:	4619      	mov	r1, r3
 80198c8:	f04f 020b 	mov.w	r2, #11
 80198cc:	f7ff f98c 	bl	8018be8 <mem_cmp>
 80198d0:	4603      	mov	r3, r0
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d00c      	beq.n	80198f0 <dir_find+0x94>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
 80198d6:	6878      	ldr	r0, [r7, #4]
 80198d8:	f04f 0100 	mov.w	r1, #0
 80198dc:	f7ff fecc 	bl	8019678 <dir_next>
 80198e0:	4603      	mov	r3, r0
 80198e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80198e4:	7dfb      	ldrb	r3, [r7, #23]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d0c8      	beq.n	801987c <dir_find+0x20>
 80198ea:	e002      	b.n	80198f2 <dir_find+0x96>
#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
 80198ec:	bf00      	nop
 80198ee:	e000      	b.n	80198f2 <dir_find+0x96>
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
 80198f0:	bf00      	nop
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
	} while (res == FR_OK);

	return res;
 80198f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80198f4:	4618      	mov	r0, r3
 80198f6:	f107 0718 	add.w	r7, r7, #24
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bd80      	pop	{r7, pc}
 80198fe:	bf00      	nop

08019900 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b086      	sub	sp, #24
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8019908:	f04f 0304 	mov.w	r3, #4
 801990c:	75fb      	strb	r3, [r7, #23]
	while (dj->sect) {
 801990e:	e02e      	b.n	801996e <dir_read+0x6e>
		res = move_window(dj->fs, dj->sect);
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	681a      	ldr	r2, [r3, #0]
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	691b      	ldr	r3, [r3, #16]
 8019918:	4610      	mov	r0, r2
 801991a:	4619      	mov	r1, r3
 801991c:	f7ff f9b8 	bl	8018c90 <move_window>
 8019920:	4603      	mov	r3, r0
 8019922:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8019924:	7dfb      	ldrb	r3, [r7, #23]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d126      	bne.n	8019978 <dir_read+0x78>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	695b      	ldr	r3, [r3, #20]
 801992e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8019930:	693b      	ldr	r3, [r7, #16]
 8019932:	781b      	ldrb	r3, [r3, #0]
 8019934:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8019936:	7bfb      	ldrb	r3, [r7, #15]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d103      	bne.n	8019944 <dir_read+0x44>
 801993c:	f04f 0304 	mov.w	r3, #4
 8019940:	75fb      	strb	r3, [r7, #23]
 8019942:	e01e      	b.n	8019982 <dir_read+0x82>
					dj->lfn_idx = 0xFFFF;		/* No LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 8019944:	7bfb      	ldrb	r3, [r7, #15]
 8019946:	2be5      	cmp	r3, #229	; 0xe5
 8019948:	d007      	beq.n	801995a <dir_read+0x5a>
 801994a:	693b      	ldr	r3, [r7, #16]
 801994c:	f103 030b 	add.w	r3, r3, #11
 8019950:	781b      	ldrb	r3, [r3, #0]
 8019952:	f003 0308 	and.w	r3, r3, #8
 8019956:	2b00      	cmp	r3, #0
 8019958:	d010      	beq.n	801997c <dir_read+0x7c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
 801995a:	6878      	ldr	r0, [r7, #4]
 801995c:	f04f 0100 	mov.w	r1, #0
 8019960:	f7ff fe8a 	bl	8019678 <dir_next>
 8019964:	4603      	mov	r3, r0
 8019966:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8019968:	7dfb      	ldrb	r3, [r7, #23]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d108      	bne.n	8019980 <dir_read+0x80>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	691b      	ldr	r3, [r3, #16]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d1cc      	bne.n	8019910 <dir_read+0x10>
 8019976:	e004      	b.n	8019982 <dir_read+0x82>
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
 8019978:	bf00      	nop
 801997a:	e002      	b.n	8019982 <dir_read+0x82>
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
 801997c:	bf00      	nop
 801997e:	e000      	b.n	8019982 <dir_read+0x82>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
 8019980:	bf00      	nop
	}

	if (res != FR_OK) dj->sect = 0;
 8019982:	7dfb      	ldrb	r3, [r7, #23]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d003      	beq.n	8019990 <dir_read+0x90>
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	f04f 0200 	mov.w	r2, #0
 801998e:	611a      	str	r2, [r3, #16]

	return res;
 8019990:	7dfb      	ldrb	r3, [r7, #23]
}
 8019992:	4618      	mov	r0, r3
 8019994:	f107 0718 	add.w	r7, r7, #24
 8019998:	46bd      	mov	sp, r7
 801999a:	bd80      	pop	{r7, pc}

0801999c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b084      	sub	sp, #16
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
 80199a4:	6878      	ldr	r0, [r7, #4]
 80199a6:	f04f 0100 	mov.w	r1, #0
 80199aa:	f7ff fdd9 	bl	8019560 <dir_seek>
 80199ae:	4603      	mov	r3, r0
 80199b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80199b2:	7bfb      	ldrb	r3, [r7, #15]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d122      	bne.n	80199fe <dir_register+0x62>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	681a      	ldr	r2, [r3, #0]
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	691b      	ldr	r3, [r3, #16]
 80199c0:	4610      	mov	r0, r2
 80199c2:	4619      	mov	r1, r3
 80199c4:	f7ff f964 	bl	8018c90 <move_window>
 80199c8:	4603      	mov	r3, r0
 80199ca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80199cc:	7bfb      	ldrb	r3, [r7, #15]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d114      	bne.n	80199fc <dir_register+0x60>
			c = *dj->dir;
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	695b      	ldr	r3, [r3, #20]
 80199d6:	781b      	ldrb	r3, [r3, #0]
 80199d8:	73bb      	strb	r3, [r7, #14]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 80199da:	7bbb      	ldrb	r3, [r7, #14]
 80199dc:	2be5      	cmp	r3, #229	; 0xe5
 80199de:	d00e      	beq.n	80199fe <dir_register+0x62>
 80199e0:	7bbb      	ldrb	r3, [r7, #14]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d00b      	beq.n	80199fe <dir_register+0x62>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
 80199e6:	6878      	ldr	r0, [r7, #4]
 80199e8:	f04f 0101 	mov.w	r1, #1
 80199ec:	f7ff fe44 	bl	8019678 <dir_next>
 80199f0:	4603      	mov	r3, r0
 80199f2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80199f4:	7bfb      	ldrb	r3, [r7, #15]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d0de      	beq.n	80199b8 <dir_register+0x1c>
 80199fa:	e000      	b.n	80199fe <dir_register+0x62>
#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
	if (res == FR_OK) {
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
			if (res != FR_OK) break;
 80199fc:	bf00      	nop
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
 80199fe:	7bfb      	ldrb	r3, [r7, #15]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d12f      	bne.n	8019a64 <dir_register+0xc8>
		res = move_window(dj->fs, dj->sect);
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681a      	ldr	r2, [r3, #0]
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	691b      	ldr	r3, [r3, #16]
 8019a0c:	4610      	mov	r0, r2
 8019a0e:	4619      	mov	r1, r3
 8019a10:	f7ff f93e 	bl	8018c90 <move_window>
 8019a14:	4603      	mov	r3, r0
 8019a16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019a18:	7bfb      	ldrb	r3, [r7, #15]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d122      	bne.n	8019a64 <dir_register+0xc8>
			dir = dj->dir;
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	695b      	ldr	r3, [r3, #20]
 8019a22:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, 32);		/* Clean the entry */
 8019a24:	68b8      	ldr	r0, [r7, #8]
 8019a26:	f04f 0100 	mov.w	r1, #0
 8019a2a:	f04f 0220 	mov.w	r2, #32
 8019a2e:	f7ff f8b9 	bl	8018ba4 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	699b      	ldr	r3, [r3, #24]
 8019a36:	68b8      	ldr	r0, [r7, #8]
 8019a38:	4619      	mov	r1, r3
 8019a3a:	f04f 020b 	mov.w	r2, #11
 8019a3e:	f7ff f889 	bl	8018b54 <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
 8019a42:	68bb      	ldr	r3, [r7, #8]
 8019a44:	f103 030c 	add.w	r3, r3, #12
 8019a48:	687a      	ldr	r2, [r7, #4]
 8019a4a:	6992      	ldr	r2, [r2, #24]
 8019a4c:	f102 020b 	add.w	r2, r2, #11
 8019a50:	7812      	ldrb	r2, [r2, #0]
 8019a52:	f002 0218 	and.w	r2, r2, #24
 8019a56:	b2d2      	uxtb	r2, r2
 8019a58:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	f04f 0201 	mov.w	r2, #1
 8019a62:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8019a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a66:	4618      	mov	r0, r3
 8019a68:	f107 0710 	add.w	r7, r7, #16
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	bd80      	pop	{r7, pc}

08019a70 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b084      	sub	sp, #16
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	88db      	ldrh	r3, [r3, #6]
 8019a7c:	6878      	ldr	r0, [r7, #4]
 8019a7e:	4619      	mov	r1, r3
 8019a80:	f7ff fd6e 	bl	8019560 <dir_seek>
 8019a84:	4603      	mov	r3, r0
 8019a86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8019a88:	7bfb      	ldrb	r3, [r7, #15]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d116      	bne.n	8019abc <dir_remove+0x4c>
		res = move_window(dj->fs, dj->sect);
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	681a      	ldr	r2, [r3, #0]
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	691b      	ldr	r3, [r3, #16]
 8019a96:	4610      	mov	r0, r2
 8019a98:	4619      	mov	r1, r3
 8019a9a:	f7ff f8f9 	bl	8018c90 <move_window>
 8019a9e:	4603      	mov	r3, r0
 8019aa0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019aa2:	7bfb      	ldrb	r3, [r7, #15]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d109      	bne.n	8019abc <dir_remove+0x4c>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	695b      	ldr	r3, [r3, #20]
 8019aac:	f04f 02e5 	mov.w	r2, #229	; 0xe5
 8019ab0:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	f04f 0201 	mov.w	r2, #1
 8019aba:	711a      	strb	r2, [r3, #4]
		}
	}
#endif

	return res;
 8019abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f107 0710 	add.w	r7, r7, #16
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	bd80      	pop	{r7, pc}

08019ac8 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	b088      	sub	sp, #32
 8019acc:	af00      	add	r7, sp, #0
 8019ace:	6078      	str	r0, [r7, #4]
 8019ad0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	699b      	ldr	r3, [r3, #24]
 8019ad6:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 8019ad8:	68f8      	ldr	r0, [r7, #12]
 8019ada:	f04f 0120 	mov.w	r1, #32
 8019ade:	f04f 020b 	mov.w	r2, #11
 8019ae2:	f7ff f85f 	bl	8018ba4 <mem_set>
	si = i = b = 0; ni = 8;
 8019ae6:	f04f 0300 	mov.w	r3, #0
 8019aea:	77fb      	strb	r3, [r7, #31]
 8019aec:	f04f 0300 	mov.w	r3, #0
 8019af0:	613b      	str	r3, [r7, #16]
 8019af2:	693b      	ldr	r3, [r7, #16]
 8019af4:	617b      	str	r3, [r7, #20]
 8019af6:	f04f 0308 	mov.w	r3, #8
 8019afa:	61bb      	str	r3, [r7, #24]
	p = *path;
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	60bb      	str	r3, [r7, #8]
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
 8019b02:	697b      	ldr	r3, [r7, #20]
 8019b04:	68ba      	ldr	r2, [r7, #8]
 8019b06:	18d3      	adds	r3, r2, r3
 8019b08:	781b      	ldrb	r3, [r3, #0]
 8019b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8019b0c:	d138      	bne.n	8019b80 <create_name+0xb8>
		for (;;) {
			c = p[si++];
 8019b0e:	697b      	ldr	r3, [r7, #20]
 8019b10:	68ba      	ldr	r2, [r7, #8]
 8019b12:	18d3      	adds	r3, r2, r3
 8019b14:	781b      	ldrb	r3, [r3, #0]
 8019b16:	77bb      	strb	r3, [r7, #30]
 8019b18:	697b      	ldr	r3, [r7, #20]
 8019b1a:	f103 0301 	add.w	r3, r3, #1
 8019b1e:	617b      	str	r3, [r7, #20]
			if (c != '.' || si >= 3) break;
 8019b20:	7fbb      	ldrb	r3, [r7, #30]
 8019b22:	2b2e      	cmp	r3, #46	; 0x2e
 8019b24:	d10c      	bne.n	8019b40 <create_name+0x78>
 8019b26:	697b      	ldr	r3, [r7, #20]
 8019b28:	2b02      	cmp	r3, #2
 8019b2a:	dc09      	bgt.n	8019b40 <create_name+0x78>
			sfn[i++] = c;
 8019b2c:	693b      	ldr	r3, [r7, #16]
 8019b2e:	68fa      	ldr	r2, [r7, #12]
 8019b30:	18d3      	adds	r3, r2, r3
 8019b32:	7fba      	ldrb	r2, [r7, #30]
 8019b34:	701a      	strb	r2, [r3, #0]
 8019b36:	693b      	ldr	r3, [r7, #16]
 8019b38:	f103 0301 	add.w	r3, r3, #1
 8019b3c:	613b      	str	r3, [r7, #16]
		}
 8019b3e:	e7e6      	b.n	8019b0e <create_name+0x46>
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
 8019b40:	7fbb      	ldrb	r3, [r7, #30]
 8019b42:	2b2f      	cmp	r3, #47	; 0x2f
 8019b44:	d008      	beq.n	8019b58 <create_name+0x90>
 8019b46:	7fbb      	ldrb	r3, [r7, #30]
 8019b48:	2b5c      	cmp	r3, #92	; 0x5c
 8019b4a:	d005      	beq.n	8019b58 <create_name+0x90>
 8019b4c:	7fbb      	ldrb	r3, [r7, #30]
 8019b4e:	2b1f      	cmp	r3, #31
 8019b50:	d902      	bls.n	8019b58 <create_name+0x90>
 8019b52:	f04f 0306 	mov.w	r3, #6
 8019b56:	e0b9      	b.n	8019ccc <create_name+0x204>
		*path = &p[si];									/* Rerurn pointer to the next segment */
 8019b58:	697b      	ldr	r3, [r7, #20]
 8019b5a:	68ba      	ldr	r2, [r7, #8]
 8019b5c:	18d2      	adds	r2, r2, r3
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	601a      	str	r2, [r3, #0]
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	f103 020b 	add.w	r2, r3, #11
 8019b68:	7fbb      	ldrb	r3, [r7, #30]
 8019b6a:	2b1f      	cmp	r3, #31
 8019b6c:	d802      	bhi.n	8019b74 <create_name+0xac>
 8019b6e:	f04f 0324 	mov.w	r3, #36	; 0x24
 8019b72:	e001      	b.n	8019b78 <create_name+0xb0>
 8019b74:	f04f 0320 	mov.w	r3, #32
 8019b78:	7013      	strb	r3, [r2, #0]
		return FR_OK;
 8019b7a:	f04f 0300 	mov.w	r3, #0
 8019b7e:	e0a5      	b.n	8019ccc <create_name+0x204>
	}
#endif
	for (;;) {
		c = p[si++];
 8019b80:	697b      	ldr	r3, [r7, #20]
 8019b82:	68ba      	ldr	r2, [r7, #8]
 8019b84:	18d3      	adds	r3, r2, r3
 8019b86:	781b      	ldrb	r3, [r3, #0]
 8019b88:	77bb      	strb	r3, [r7, #30]
 8019b8a:	697b      	ldr	r3, [r7, #20]
 8019b8c:	f103 0301 	add.w	r3, r3, #1
 8019b90:	617b      	str	r3, [r7, #20]
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8019b92:	7fbb      	ldrb	r3, [r7, #30]
 8019b94:	2b1f      	cmp	r3, #31
 8019b96:	d95d      	bls.n	8019c54 <create_name+0x18c>
 8019b98:	7fbb      	ldrb	r3, [r7, #30]
 8019b9a:	2b2f      	cmp	r3, #47	; 0x2f
 8019b9c:	d05a      	beq.n	8019c54 <create_name+0x18c>
 8019b9e:	7fbb      	ldrb	r3, [r7, #30]
 8019ba0:	2b5c      	cmp	r3, #92	; 0x5c
 8019ba2:	d057      	beq.n	8019c54 <create_name+0x18c>
		if (c == '.' || i >= ni) {
 8019ba4:	7fbb      	ldrb	r3, [r7, #30]
 8019ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8019ba8:	d003      	beq.n	8019bb2 <create_name+0xea>
 8019baa:	693a      	ldr	r2, [r7, #16]
 8019bac:	69bb      	ldr	r3, [r7, #24]
 8019bae:	429a      	cmp	r2, r3
 8019bb0:	db14      	blt.n	8019bdc <create_name+0x114>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8019bb2:	69bb      	ldr	r3, [r7, #24]
 8019bb4:	2b08      	cmp	r3, #8
 8019bb6:	d102      	bne.n	8019bbe <create_name+0xf6>
 8019bb8:	7fbb      	ldrb	r3, [r7, #30]
 8019bba:	2b2e      	cmp	r3, #46	; 0x2e
 8019bbc:	d002      	beq.n	8019bc4 <create_name+0xfc>
 8019bbe:	f04f 0306 	mov.w	r3, #6
 8019bc2:	e083      	b.n	8019ccc <create_name+0x204>
			i = 8; ni = 11;
 8019bc4:	f04f 0308 	mov.w	r3, #8
 8019bc8:	613b      	str	r3, [r7, #16]
 8019bca:	f04f 030b 	mov.w	r3, #11
 8019bce:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8019bd0:	7ffb      	ldrb	r3, [r7, #31]
 8019bd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019bd6:	77fb      	strb	r3, [r7, #31]
 8019bd8:	bf00      	nop
					b |= 1; c -= 0x20;
				}
			}
			sfn[i++] = c;
		}
	}
 8019bda:	e7d1      	b.n	8019b80 <create_name+0xb8>
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
 8019bdc:	7fbb      	ldrb	r3, [r7, #30]
 8019bde:	b25b      	sxtb	r3, r3
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	da06      	bge.n	8019bf2 <create_name+0x12a>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
 8019be4:	7ffb      	ldrb	r3, [r7, #31]
 8019be6:	f043 0303 	orr.w	r3, r3, #3
 8019bea:	77fb      	strb	r3, [r7, #31]
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
 8019bec:	f04f 0306 	mov.w	r3, #6
 8019bf0:	e06c      	b.n	8019ccc <create_name+0x204>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
 8019bf2:	7fbb      	ldrb	r3, [r7, #30]
 8019bf4:	f64d 10d0 	movw	r0, #55760	; 0xd9d0
 8019bf8:	f6c0 0002 	movt	r0, #2050	; 0x802
 8019bfc:	4619      	mov	r1, r3
 8019bfe:	f7ff f82b 	bl	8018c58 <chk_chr>
 8019c02:	4603      	mov	r3, r0
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d002      	beq.n	8019c0e <create_name+0x146>
				return FR_INVALID_NAME;
 8019c08:	f04f 0306 	mov.w	r3, #6
 8019c0c:	e05e      	b.n	8019ccc <create_name+0x204>
			if (IsUpper(c)) {
 8019c0e:	7fbb      	ldrb	r3, [r7, #30]
 8019c10:	2b40      	cmp	r3, #64	; 0x40
 8019c12:	d907      	bls.n	8019c24 <create_name+0x15c>
 8019c14:	7fbb      	ldrb	r3, [r7, #30]
 8019c16:	2b5a      	cmp	r3, #90	; 0x5a
 8019c18:	d804      	bhi.n	8019c24 <create_name+0x15c>
				b |= 2;
 8019c1a:	7ffb      	ldrb	r3, [r7, #31]
 8019c1c:	f043 0302 	orr.w	r3, r3, #2
 8019c20:	77fb      	strb	r3, [r7, #31]
 8019c22:	e00d      	b.n	8019c40 <create_name+0x178>
			} else {
				if (IsLower(c)) {
 8019c24:	7fbb      	ldrb	r3, [r7, #30]
 8019c26:	2b60      	cmp	r3, #96	; 0x60
 8019c28:	d90a      	bls.n	8019c40 <create_name+0x178>
 8019c2a:	7fbb      	ldrb	r3, [r7, #30]
 8019c2c:	2b7a      	cmp	r3, #122	; 0x7a
 8019c2e:	d807      	bhi.n	8019c40 <create_name+0x178>
					b |= 1; c -= 0x20;
 8019c30:	7ffb      	ldrb	r3, [r7, #31]
 8019c32:	f043 0301 	orr.w	r3, r3, #1
 8019c36:	77fb      	strb	r3, [r7, #31]
 8019c38:	7fbb      	ldrb	r3, [r7, #30]
 8019c3a:	f1a3 0320 	sub.w	r3, r3, #32
 8019c3e:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8019c40:	693b      	ldr	r3, [r7, #16]
 8019c42:	68fa      	ldr	r2, [r7, #12]
 8019c44:	18d3      	adds	r3, r2, r3
 8019c46:	7fba      	ldrb	r2, [r7, #30]
 8019c48:	701a      	strb	r2, [r3, #0]
 8019c4a:	693b      	ldr	r3, [r7, #16]
 8019c4c:	f103 0301 	add.w	r3, r3, #1
 8019c50:	613b      	str	r3, [r7, #16]
		}
	}
 8019c52:	e795      	b.n	8019b80 <create_name+0xb8>
	*path = &p[si];						/* Rerurn pointer to the next segment */
 8019c54:	697b      	ldr	r3, [r7, #20]
 8019c56:	68ba      	ldr	r2, [r7, #8]
 8019c58:	18d2      	adds	r2, r2, r3
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	601a      	str	r2, [r3, #0]
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8019c5e:	7fbb      	ldrb	r3, [r7, #30]
 8019c60:	2b1f      	cmp	r3, #31
 8019c62:	d802      	bhi.n	8019c6a <create_name+0x1a2>
 8019c64:	f04f 0304 	mov.w	r3, #4
 8019c68:	e001      	b.n	8019c6e <create_name+0x1a6>
 8019c6a:	f04f 0300 	mov.w	r3, #0
 8019c6e:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
 8019c70:	693b      	ldr	r3, [r7, #16]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d102      	bne.n	8019c7c <create_name+0x1b4>
 8019c76:	f04f 0306 	mov.w	r3, #6
 8019c7a:	e027      	b.n	8019ccc <create_name+0x204>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	781b      	ldrb	r3, [r3, #0]
 8019c80:	2be5      	cmp	r3, #229	; 0xe5
 8019c82:	d103      	bne.n	8019c8c <create_name+0x1c4>
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	f04f 0205 	mov.w	r2, #5
 8019c8a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8019c8c:	69bb      	ldr	r3, [r7, #24]
 8019c8e:	2b08      	cmp	r3, #8
 8019c90:	d103      	bne.n	8019c9a <create_name+0x1d2>
 8019c92:	7ffb      	ldrb	r3, [r7, #31]
 8019c94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019c98:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8019c9a:	7ffb      	ldrb	r3, [r7, #31]
 8019c9c:	f003 0303 	and.w	r3, r3, #3
 8019ca0:	2b01      	cmp	r3, #1
 8019ca2:	d103      	bne.n	8019cac <create_name+0x1e4>
 8019ca4:	7fbb      	ldrb	r3, [r7, #30]
 8019ca6:	f043 0310 	orr.w	r3, r3, #16
 8019caa:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8019cac:	7ffb      	ldrb	r3, [r7, #31]
 8019cae:	f003 030c 	and.w	r3, r3, #12
 8019cb2:	2b04      	cmp	r3, #4
 8019cb4:	d103      	bne.n	8019cbe <create_name+0x1f6>
 8019cb6:	7fbb      	ldrb	r3, [r7, #30]
 8019cb8:	f043 0308 	orr.w	r3, r3, #8
 8019cbc:	77bb      	strb	r3, [r7, #30]

	sfn[11] = c;		/* Store NT flag, File name is created */
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	f103 030b 	add.w	r3, r3, #11
 8019cc4:	7fba      	ldrb	r2, [r7, #30]
 8019cc6:	701a      	strb	r2, [r3, #0]
#endif

	return FR_OK;
 8019cc8:	f04f 0300 	mov.w	r3, #0
}
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f107 0720 	add.w	r7, r7, #32
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}
 8019cd6:	bf00      	nop

08019cd8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
 8019cd8:	b480      	push	{r7}
 8019cda:	b089      	sub	sp, #36	; 0x24
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
 8019ce0:	6039      	str	r1, [r7, #0]
#if _USE_LFN
	XCHAR *tp;
#endif


	p = fno->fname;
 8019ce2:	683b      	ldr	r3, [r7, #0]
 8019ce4:	f103 0309 	add.w	r3, r3, #9
 8019ce8:	617b      	str	r3, [r7, #20]
	if (dj->sect) {
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	691b      	ldr	r3, [r3, #16]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	f000 80af 	beq.w	8019e52 <get_fileinfo+0x17a>
		dir = dj->dir;
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	695b      	ldr	r3, [r3, #20]
 8019cf8:	613b      	str	r3, [r7, #16]
		nt = dir[DIR_NTres];		/* NT flag */
 8019cfa:	693b      	ldr	r3, [r7, #16]
 8019cfc:	7b1b      	ldrb	r3, [r3, #12]
 8019cfe:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8019d00:	f04f 0300 	mov.w	r3, #0
 8019d04:	61fb      	str	r3, [r7, #28]
 8019d06:	e027      	b.n	8019d58 <get_fileinfo+0x80>
			c = dir[i];
 8019d08:	69fb      	ldr	r3, [r7, #28]
 8019d0a:	693a      	ldr	r2, [r7, #16]
 8019d0c:	18d3      	adds	r3, r2, r3
 8019d0e:	781b      	ldrb	r3, [r3, #0]
 8019d10:	76fb      	strb	r3, [r7, #27]
			if (c == ' ') break;
 8019d12:	7efb      	ldrb	r3, [r7, #27]
 8019d14:	2b20      	cmp	r3, #32
 8019d16:	d023      	beq.n	8019d60 <get_fileinfo+0x88>
			if (c == 0x05) c = 0xE5;
 8019d18:	7efb      	ldrb	r3, [r7, #27]
 8019d1a:	2b05      	cmp	r3, #5
 8019d1c:	d102      	bne.n	8019d24 <get_fileinfo+0x4c>
 8019d1e:	f04f 03e5 	mov.w	r3, #229	; 0xe5
 8019d22:	76fb      	strb	r3, [r7, #27]
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
 8019d24:	7bfb      	ldrb	r3, [r7, #15]
 8019d26:	f003 0308 	and.w	r3, r3, #8
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d009      	beq.n	8019d42 <get_fileinfo+0x6a>
 8019d2e:	7efb      	ldrb	r3, [r7, #27]
 8019d30:	2b40      	cmp	r3, #64	; 0x40
 8019d32:	d906      	bls.n	8019d42 <get_fileinfo+0x6a>
 8019d34:	7efb      	ldrb	r3, [r7, #27]
 8019d36:	2b5a      	cmp	r3, #90	; 0x5a
 8019d38:	d803      	bhi.n	8019d42 <get_fileinfo+0x6a>
 8019d3a:	7efb      	ldrb	r3, [r7, #27]
 8019d3c:	f103 0320 	add.w	r3, r3, #32
 8019d40:	76fb      	strb	r3, [r7, #27]
			*p++ = c;
 8019d42:	697b      	ldr	r3, [r7, #20]
 8019d44:	7efa      	ldrb	r2, [r7, #27]
 8019d46:	701a      	strb	r2, [r3, #0]
 8019d48:	697b      	ldr	r3, [r7, #20]
 8019d4a:	f103 0301 	add.w	r3, r3, #1
 8019d4e:	617b      	str	r3, [r7, #20]

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8019d50:	69fb      	ldr	r3, [r7, #28]
 8019d52:	f103 0301 	add.w	r3, r3, #1
 8019d56:	61fb      	str	r3, [r7, #28]
 8019d58:	69fb      	ldr	r3, [r7, #28]
 8019d5a:	2b07      	cmp	r3, #7
 8019d5c:	ddd4      	ble.n	8019d08 <get_fileinfo+0x30>
 8019d5e:	e000      	b.n	8019d62 <get_fileinfo+0x8a>
			c = dir[i];
			if (c == ' ') break;
 8019d60:	bf00      	nop
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
 8019d62:	693b      	ldr	r3, [r7, #16]
 8019d64:	f103 0308 	add.w	r3, r3, #8
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	2b20      	cmp	r3, #32
 8019d6c:	d032      	beq.n	8019dd4 <get_fileinfo+0xfc>
			*p++ = '.';
 8019d6e:	697b      	ldr	r3, [r7, #20]
 8019d70:	f04f 022e 	mov.w	r2, #46	; 0x2e
 8019d74:	701a      	strb	r2, [r3, #0]
 8019d76:	697b      	ldr	r3, [r7, #20]
 8019d78:	f103 0301 	add.w	r3, r3, #1
 8019d7c:	617b      	str	r3, [r7, #20]
			for (i = 8; i < 11; i++) {
 8019d7e:	f04f 0308 	mov.w	r3, #8
 8019d82:	61fb      	str	r3, [r7, #28]
 8019d84:	e021      	b.n	8019dca <get_fileinfo+0xf2>
				c = dir[i];
 8019d86:	69fb      	ldr	r3, [r7, #28]
 8019d88:	693a      	ldr	r2, [r7, #16]
 8019d8a:	18d3      	adds	r3, r2, r3
 8019d8c:	781b      	ldrb	r3, [r3, #0]
 8019d8e:	76fb      	strb	r3, [r7, #27]
				if (c == ' ') break;
 8019d90:	7efb      	ldrb	r3, [r7, #27]
 8019d92:	2b20      	cmp	r3, #32
 8019d94:	d01d      	beq.n	8019dd2 <get_fileinfo+0xfa>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
 8019d96:	7bfb      	ldrb	r3, [r7, #15]
 8019d98:	f003 0310 	and.w	r3, r3, #16
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d009      	beq.n	8019db4 <get_fileinfo+0xdc>
 8019da0:	7efb      	ldrb	r3, [r7, #27]
 8019da2:	2b40      	cmp	r3, #64	; 0x40
 8019da4:	d906      	bls.n	8019db4 <get_fileinfo+0xdc>
 8019da6:	7efb      	ldrb	r3, [r7, #27]
 8019da8:	2b5a      	cmp	r3, #90	; 0x5a
 8019daa:	d803      	bhi.n	8019db4 <get_fileinfo+0xdc>
 8019dac:	7efb      	ldrb	r3, [r7, #27]
 8019dae:	f103 0320 	add.w	r3, r3, #32
 8019db2:	76fb      	strb	r3, [r7, #27]
				*p++ = c;
 8019db4:	697b      	ldr	r3, [r7, #20]
 8019db6:	7efa      	ldrb	r2, [r7, #27]
 8019db8:	701a      	strb	r2, [r3, #0]
 8019dba:	697b      	ldr	r3, [r7, #20]
 8019dbc:	f103 0301 	add.w	r3, r3, #1
 8019dc0:	617b      	str	r3, [r7, #20]
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 8019dc2:	69fb      	ldr	r3, [r7, #28]
 8019dc4:	f103 0301 	add.w	r3, r3, #1
 8019dc8:	61fb      	str	r3, [r7, #28]
 8019dca:	69fb      	ldr	r3, [r7, #28]
 8019dcc:	2b0a      	cmp	r3, #10
 8019dce:	ddda      	ble.n	8019d86 <get_fileinfo+0xae>
 8019dd0:	e000      	b.n	8019dd4 <get_fileinfo+0xfc>
				c = dir[i];
				if (c == ' ') break;
 8019dd2:	bf00      	nop
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	7ada      	ldrb	r2, [r3, #11]
 8019dd8:	683b      	ldr	r3, [r7, #0]
 8019dda:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 8019ddc:	693b      	ldr	r3, [r7, #16]
 8019dde:	f103 031f 	add.w	r3, r3, #31
 8019de2:	781b      	ldrb	r3, [r3, #0]
 8019de4:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8019de8:	693b      	ldr	r3, [r7, #16]
 8019dea:	f103 031e 	add.w	r3, r3, #30
 8019dee:	781b      	ldrb	r3, [r3, #0]
 8019df0:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8019df4:	431a      	orrs	r2, r3
 8019df6:	693b      	ldr	r3, [r7, #16]
 8019df8:	f103 031d 	add.w	r3, r3, #29
 8019dfc:	781b      	ldrb	r3, [r3, #0]
 8019dfe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8019e02:	431a      	orrs	r2, r3
 8019e04:	693b      	ldr	r3, [r7, #16]
 8019e06:	f103 031c 	add.w	r3, r3, #28
 8019e0a:	781b      	ldrb	r3, [r3, #0]
 8019e0c:	431a      	orrs	r2, r3
 8019e0e:	683b      	ldr	r3, [r7, #0]
 8019e10:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 8019e12:	693b      	ldr	r3, [r7, #16]
 8019e14:	f103 0319 	add.w	r3, r3, #25
 8019e18:	781b      	ldrb	r3, [r3, #0]
 8019e1a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8019e1e:	b29a      	uxth	r2, r3
 8019e20:	693b      	ldr	r3, [r7, #16]
 8019e22:	f103 0318 	add.w	r3, r3, #24
 8019e26:	781b      	ldrb	r3, [r3, #0]
 8019e28:	4313      	orrs	r3, r2
 8019e2a:	b29b      	uxth	r3, r3
 8019e2c:	b29a      	uxth	r2, r3
 8019e2e:	683b      	ldr	r3, [r7, #0]
 8019e30:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 8019e32:	693b      	ldr	r3, [r7, #16]
 8019e34:	f103 0317 	add.w	r3, r3, #23
 8019e38:	781b      	ldrb	r3, [r3, #0]
 8019e3a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8019e3e:	b29a      	uxth	r2, r3
 8019e40:	693b      	ldr	r3, [r7, #16]
 8019e42:	f103 0316 	add.w	r3, r3, #22
 8019e46:	781b      	ldrb	r3, [r3, #0]
 8019e48:	4313      	orrs	r3, r2
 8019e4a:	b29b      	uxth	r3, r3
 8019e4c:	b29a      	uxth	r2, r3
 8019e4e:	683b      	ldr	r3, [r7, #0]
 8019e50:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;
 8019e52:	697b      	ldr	r3, [r7, #20]
 8019e54:	f04f 0200 	mov.w	r2, #0
 8019e58:	701a      	strb	r2, [r3, #0]
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
 8019e5a:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8019e5e:	46bd      	mov	sp, r7
 8019e60:	bc80      	pop	{r7}
 8019e62:	4770      	bx	lr

08019e64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
 8019e64:	b580      	push	{r7, lr}
 8019e66:	b084      	sub	sp, #16
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	6078      	str	r0, [r7, #4]
 8019e6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, last;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8019e6e:	683b      	ldr	r3, [r7, #0]
 8019e70:	781b      	ldrb	r3, [r3, #0]
 8019e72:	2b2f      	cmp	r3, #47	; 0x2f
 8019e74:	d003      	beq.n	8019e7e <follow_path+0x1a>
 8019e76:	683b      	ldr	r3, [r7, #0]
 8019e78:	781b      	ldrb	r3, [r3, #0]
 8019e7a:	2b5c      	cmp	r3, #92	; 0x5c
 8019e7c:	d108      	bne.n	8019e90 <follow_path+0x2c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 8019e7e:	683b      	ldr	r3, [r7, #0]
 8019e80:	f103 0301 	add.w	r3, r3, #1
 8019e84:	603b      	str	r3, [r7, #0]
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	f04f 0200 	mov.w	r2, #0
 8019e8c:	609a      	str	r2, [r3, #8]
 8019e8e:	e004      	b.n	8019e9a <follow_path+0x36>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	699a      	ldr	r2, [r3, #24]
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
 8019e9a:	683b      	ldr	r3, [r7, #0]
 8019e9c:	781b      	ldrb	r3, [r3, #0]
 8019e9e:	2b1f      	cmp	r3, #31
 8019ea0:	d80b      	bhi.n	8019eba <follow_path+0x56>
		res = dir_seek(dj, 0);
 8019ea2:	6878      	ldr	r0, [r7, #4]
 8019ea4:	f04f 0100 	mov.w	r1, #0
 8019ea8:	f7ff fb5a 	bl	8019560 <dir_seek>
 8019eac:	4603      	mov	r3, r0
 8019eae:	73fb      	strb	r3, [r7, #15]
		dj->dir = NULL;
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	f04f 0200 	mov.w	r2, #0
 8019eb6:	615a      	str	r2, [r3, #20]
 8019eb8:	e05c      	b.n	8019f74 <follow_path+0x110>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8019eba:	463b      	mov	r3, r7
 8019ebc:	6878      	ldr	r0, [r7, #4]
 8019ebe:	4619      	mov	r1, r3
 8019ec0:	f7ff fe02 	bl	8019ac8 <create_name>
 8019ec4:	4603      	mov	r3, r0
 8019ec6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8019ec8:	7bfb      	ldrb	r3, [r7, #15]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d14d      	bne.n	8019f6a <follow_path+0x106>
			res = dir_find(dj);				/* Find it */
 8019ece:	6878      	ldr	r0, [r7, #4]
 8019ed0:	f7ff fcc4 	bl	801985c <dir_find>
 8019ed4:	4603      	mov	r3, r0
 8019ed6:	73fb      	strb	r3, [r7, #15]
			last = *(dj->fn+11) & NS_LAST;
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	699b      	ldr	r3, [r3, #24]
 8019edc:	f103 030b 	add.w	r3, r3, #11
 8019ee0:	781b      	ldrb	r3, [r3, #0]
 8019ee2:	f003 0304 	and.w	r3, r3, #4
 8019ee6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Could not find the object */
 8019ee8:	7bfb      	ldrb	r3, [r7, #15]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d009      	beq.n	8019f02 <follow_path+0x9e>
				if (res == FR_NO_FILE && !last)
 8019eee:	7bfb      	ldrb	r3, [r7, #15]
 8019ef0:	2b04      	cmp	r3, #4
 8019ef2:	d13c      	bne.n	8019f6e <follow_path+0x10a>
 8019ef4:	7bbb      	ldrb	r3, [r7, #14]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d139      	bne.n	8019f6e <follow_path+0x10a>
					res = FR_NO_PATH;
 8019efa:	f04f 0305 	mov.w	r3, #5
 8019efe:	73fb      	strb	r3, [r7, #15]
				break;
 8019f00:	e035      	b.n	8019f6e <follow_path+0x10a>
			}
			if (last) break;				/* Last segment match. Function completed. */
 8019f02:	7bbb      	ldrb	r3, [r7, #14]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d134      	bne.n	8019f72 <follow_path+0x10e>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	695b      	ldr	r3, [r3, #20]
 8019f0c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 8019f0e:	68bb      	ldr	r3, [r7, #8]
 8019f10:	f103 030b 	add.w	r3, r3, #11
 8019f14:	781b      	ldrb	r3, [r3, #0]
 8019f16:	f003 0310 	and.w	r3, r3, #16
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d103      	bne.n	8019f26 <follow_path+0xc2>
				res = FR_NO_PATH; break;
 8019f1e:	f04f 0305 	mov.w	r3, #5
 8019f22:	73fb      	strb	r3, [r7, #15]
 8019f24:	e026      	b.n	8019f74 <follow_path+0x110>
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8019f26:	68bb      	ldr	r3, [r7, #8]
 8019f28:	f103 0315 	add.w	r3, r3, #21
 8019f2c:	781b      	ldrb	r3, [r3, #0]
 8019f2e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8019f32:	b29a      	uxth	r2, r3
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	f103 0314 	add.w	r3, r3, #20
 8019f3a:	781b      	ldrb	r3, [r3, #0]
 8019f3c:	4313      	orrs	r3, r2
 8019f3e:	b29b      	uxth	r3, r3
 8019f40:	b29b      	uxth	r3, r3
 8019f42:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8019f46:	68bb      	ldr	r3, [r7, #8]
 8019f48:	f103 031b 	add.w	r3, r3, #27
 8019f4c:	781b      	ldrb	r3, [r3, #0]
 8019f4e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8019f52:	b299      	uxth	r1, r3
 8019f54:	68bb      	ldr	r3, [r7, #8]
 8019f56:	f103 031a 	add.w	r3, r3, #26
 8019f5a:	781b      	ldrb	r3, [r3, #0]
 8019f5c:	430b      	orrs	r3, r1
 8019f5e:	b29b      	uxth	r3, r3
 8019f60:	b29b      	uxth	r3, r3
 8019f62:	431a      	orrs	r2, r3
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	609a      	str	r2, [r3, #8]
		}
 8019f68:	e7a7      	b.n	8019eba <follow_path+0x56>
		dj->dir = NULL;

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
 8019f6a:	bf00      	nop
 8019f6c:	e002      	b.n	8019f74 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
					res = FR_NO_PATH;
				break;
 8019f6e:	bf00      	nop
 8019f70:	e000      	b.n	8019f74 <follow_path+0x110>
			}
			if (last) break;				/* Last segment match. Function completed. */
 8019f72:	bf00      	nop
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
 8019f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f76:	4618      	mov	r0, r3
 8019f78:	f107 0710 	add.w	r7, r7, #16
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	bd80      	pop	{r7, pc}

08019f80 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8019f80:	b580      	push	{r7, lr}
 8019f82:	b082      	sub	sp, #8
 8019f84:	af00      	add	r7, sp, #0
 8019f86:	6078      	str	r0, [r7, #4]
 8019f88:	6039      	str	r1, [r7, #0]
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	785a      	ldrb	r2, [r3, #1]
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8019f94:	4610      	mov	r0, r2
 8019f96:	4619      	mov	r1, r3
 8019f98:	683a      	ldr	r2, [r7, #0]
 8019f9a:	f04f 0301 	mov.w	r3, #1
 8019f9e:	f7eb fa3d 	bl	800541c <disk_read>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d002      	beq.n	8019fae <check_fs+0x2e>
		return 3;
 8019fa8:	f04f 0303 	mov.w	r3, #3
 8019fac:	e041      	b.n	801a032 <check_fs+0xb2>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 8019fb4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8019fb8:	b29a      	uxth	r2, r3
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8019fc0:	4313      	orrs	r3, r2
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	b21a      	sxth	r2, r3
 8019fc6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019fca:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	d002      	beq.n	8019fd8 <check_fs+0x58>
		return 2;
 8019fd2:	f04f 0302 	mov.w	r3, #2
 8019fd6:	e02c      	b.n	801a032 <check_fs+0xb2>

	if (!mem_cmp(&fs->win[BS_FilSysType], fatstr, 3))	/* Check FAT signature */
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8019fde:	4618      	mov	r0, r3
 8019fe0:	f645 11f4 	movw	r1, #23028	; 0x59f4
 8019fe4:	f6c0 0103 	movt	r1, #2051	; 0x803
 8019fe8:	f04f 0203 	mov.w	r2, #3
 8019fec:	f7fe fdfc 	bl	8018be8 <mem_cmp>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d102      	bne.n	8019ffc <check_fs+0x7c>
		return 0;
 8019ff6:	f04f 0300 	mov.w	r3, #0
 8019ffa:	e01a      	b.n	801a032 <check_fs+0xb2>
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	f103 0386 	add.w	r3, r3, #134	; 0x86
 801a002:	4618      	mov	r0, r3
 801a004:	f645 11f4 	movw	r1, #23028	; 0x59f4
 801a008:	f6c0 0103 	movt	r1, #2051	; 0x803
 801a00c:	f04f 0203 	mov.w	r2, #3
 801a010:	f7fe fdea 	bl	8018be8 <mem_cmp>
 801a014:	4603      	mov	r3, r0
 801a016:	2b00      	cmp	r3, #0
 801a018:	d109      	bne.n	801a02e <check_fs+0xae>
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a020:	b2db      	uxtb	r3, r3
 801a022:	b25b      	sxtb	r3, r3
 801a024:	2b00      	cmp	r3, #0
 801a026:	db02      	blt.n	801a02e <check_fs+0xae>
		return 0;
 801a028:	f04f 0300 	mov.w	r3, #0
 801a02c:	e001      	b.n	801a032 <check_fs+0xb2>

	return 1;
 801a02e:	f04f 0301 	mov.w	r3, #1
}
 801a032:	4618      	mov	r0, r3
 801a034:	f107 0708 	add.w	r7, r7, #8
 801a038:	46bd      	mov	sp, r7
 801a03a:	bd80      	pop	{r7, pc}

0801a03c <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 801a03c:	b580      	push	{r7, lr}
 801a03e:	b090      	sub	sp, #64	; 0x40
 801a040:	af00      	add	r7, sp, #0
 801a042:	60f8      	str	r0, [r7, #12]
 801a044:	60b9      	str	r1, [r7, #8]
 801a046:	4613      	mov	r3, r2
 801a048:	71fb      	strb	r3, [r7, #7]
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	62bb      	str	r3, [r7, #40]	; 0x28
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
 801a050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a052:	781b      	ldrb	r3, [r3, #0]
 801a054:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 801a058:	63bb      	str	r3, [r7, #56]	; 0x38
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 801a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a05c:	2b09      	cmp	r3, #9
 801a05e:	d80d      	bhi.n	801a07c <auto_mount+0x40>
 801a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a062:	f103 0301 	add.w	r3, r3, #1
 801a066:	781b      	ldrb	r3, [r3, #0]
 801a068:	2b3a      	cmp	r3, #58	; 0x3a
 801a06a:	d107      	bne.n	801a07c <auto_mount+0x40>
		p += 2; *path = p;			/* Return pointer to the path name */
 801a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a06e:	f103 0302 	add.w	r3, r3, #2
 801a072:	62bb      	str	r3, [r7, #40]	; 0x28
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a078:	601a      	str	r2, [r3, #0]
 801a07a:	e005      	b.n	801a088 <auto_mount+0x4c>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
 801a07c:	f241 03fe 	movw	r3, #4350	; 0x10fe
 801a080:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a084:	781b      	ldrb	r3, [r3, #0]
 801a086:	63bb      	str	r3, [r7, #56]	; 0x38
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
 801a088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d002      	beq.n	801a094 <auto_mount+0x58>
		return FR_INVALID_DRIVE;
 801a08e:	f04f 030b 	mov.w	r3, #11
 801a092:	e25d      	b.n	801a550 <auto_mount+0x514>
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
 801a094:	f241 03f8 	movw	r3, #4344	; 0x10f8
 801a098:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a09c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a0a2:	627b      	str	r3, [r7, #36]	; 0x24
 801a0a4:	68bb      	ldr	r3, [r7, #8]
 801a0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0a8:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
 801a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d102      	bne.n	801a0b6 <auto_mount+0x7a>
 801a0b0:	f04f 030c 	mov.w	r3, #12
 801a0b4:	e24c      	b.n	801a550 <auto_mount+0x514>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
 801a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0b8:	781b      	ldrb	r3, [r3, #0]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d01c      	beq.n	801a0f8 <auto_mount+0xbc>
		stat = disk_status(fs->drive);
 801a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0c0:	785b      	ldrb	r3, [r3, #1]
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	f7eb f992 	bl	80053ec <disk_status>
 801a0c8:	4603      	mov	r3, r0
 801a0ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
 801a0ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a0d2:	f003 0301 	and.w	r3, r3, #1
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d10e      	bne.n	801a0f8 <auto_mount+0xbc>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 801a0da:	79fb      	ldrb	r3, [r7, #7]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d008      	beq.n	801a0f2 <auto_mount+0xb6>
 801a0e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a0e4:	f003 0304 	and.w	r3, r3, #4
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d002      	beq.n	801a0f2 <auto_mount+0xb6>
				return FR_WRITE_PROTECTED;
 801a0ec:	f04f 030a 	mov.w	r3, #10
 801a0f0:	e22e      	b.n	801a550 <auto_mount+0x514>
#endif
			return FR_OK;			/* The file system object is valid */
 801a0f2:	f04f 0300 	mov.w	r3, #0
 801a0f6:	e22b      	b.n	801a550 <auto_mount+0x514>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
 801a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0fa:	f04f 0200 	mov.w	r2, #0
 801a0fe:	701a      	strb	r2, [r3, #0]
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
 801a100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a102:	b2da      	uxtb	r2, r3
 801a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a106:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 801a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a10a:	785b      	ldrb	r3, [r3, #1]
 801a10c:	4618      	mov	r0, r3
 801a10e:	f7eb f945 	bl	800539c <disk_initialize>
 801a112:	4603      	mov	r3, r0
 801a114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 801a118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a11c:	f003 0301 	and.w	r3, r3, #1
 801a120:	b2db      	uxtb	r3, r3
 801a122:	2b00      	cmp	r3, #0
 801a124:	d002      	beq.n	801a12c <auto_mount+0xf0>
		return FR_NOT_READY;
 801a126:	f04f 0303 	mov.w	r3, #3
 801a12a:	e211      	b.n	801a550 <auto_mount+0x514>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 801a12c:	79fb      	ldrb	r3, [r7, #7]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d008      	beq.n	801a144 <auto_mount+0x108>
 801a132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a136:	f003 0304 	and.w	r3, r3, #4
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d002      	beq.n	801a144 <auto_mount+0x108>
		return FR_WRITE_PROTECTED;
 801a13e:	f04f 030a 	mov.w	r3, #10
 801a142:	e205      	b.n	801a550 <auto_mount+0x514>
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 801a144:	f04f 0300 	mov.w	r3, #0
 801a148:	637b      	str	r3, [r7, #52]	; 0x34
 801a14a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a14c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a14e:	f7ff ff17 	bl	8019f80 <check_fs>
 801a152:	4603      	mov	r3, r0
 801a154:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 801a158:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a15c:	2b01      	cmp	r3, #1
 801a15e:	d12a      	bne.n	801a1b6 <auto_mount+0x17a>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
 801a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a162:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 801a166:	61fb      	str	r3, [r7, #28]
		if (tbl[4]) {									/* Is the partition existing? */
 801a168:	69fb      	ldr	r3, [r7, #28]
 801a16a:	f103 0304 	add.w	r3, r3, #4
 801a16e:	781b      	ldrb	r3, [r3, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d020      	beq.n	801a1b6 <auto_mount+0x17a>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 801a174:	69fb      	ldr	r3, [r7, #28]
 801a176:	f103 030b 	add.w	r3, r3, #11
 801a17a:	781b      	ldrb	r3, [r3, #0]
 801a17c:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801a180:	69fb      	ldr	r3, [r7, #28]
 801a182:	f103 030a 	add.w	r3, r3, #10
 801a186:	781b      	ldrb	r3, [r3, #0]
 801a188:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801a18c:	431a      	orrs	r2, r3
 801a18e:	69fb      	ldr	r3, [r7, #28]
 801a190:	f103 0309 	add.w	r3, r3, #9
 801a194:	781b      	ldrb	r3, [r3, #0]
 801a196:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a19a:	431a      	orrs	r2, r3
 801a19c:	69fb      	ldr	r3, [r7, #28]
 801a19e:	f103 0308 	add.w	r3, r3, #8
 801a1a2:	781b      	ldrb	r3, [r3, #0]
 801a1a4:	4313      	orrs	r3, r2
 801a1a6:	637b      	str	r3, [r7, #52]	; 0x34
			fmt = check_fs(fs, bsect);					/* Check the partition */
 801a1a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a1aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a1ac:	f7ff fee8 	bl	8019f80 <check_fs>
 801a1b0:	4603      	mov	r3, r0
 801a1b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 801a1b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a1ba:	2b03      	cmp	r3, #3
 801a1bc:	d102      	bne.n	801a1c4 <auto_mount+0x188>
 801a1be:	f04f 0301 	mov.w	r3, #1
 801a1c2:	e1c5      	b.n	801a550 <auto_mount+0x514>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
 801a1c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d10e      	bne.n	801a1ea <auto_mount+0x1ae>
 801a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a1d2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a1d6:	b29a      	uxth	r2, r3
 801a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a1de:	4313      	orrs	r3, r2
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	b21b      	sxth	r3, r3
 801a1e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1e8:	d002      	beq.n	801a1f0 <auto_mount+0x1b4>
		return FR_NO_FILESYSTEM;
 801a1ea:	f04f 030d 	mov.w	r3, #13
 801a1ee:	e1af      	b.n	801a550 <auto_mount+0x514>

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 801a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1f2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801a1f6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a1fa:	b29a      	uxth	r2, r3
 801a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1fe:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801a202:	4313      	orrs	r3, r2
 801a204:	b29b      	uxth	r3, r3
 801a206:	b29b      	uxth	r3, r3
 801a208:	633b      	str	r3, [r7, #48]	; 0x30
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 801a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d115      	bne.n	801a23c <auto_mount+0x200>
 801a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a212:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 801a216:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a21c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 801a220:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801a224:	431a      	orrs	r2, r3
 801a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a228:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a22c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a230:	431a      	orrs	r2, r3
 801a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a234:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a238:	4313      	orrs	r3, r2
 801a23a:	633b      	str	r3, [r7, #48]	; 0x30
	fs->sects_fat = fsize;
 801a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a23e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a240:	61da      	str	r2, [r3, #28]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 801a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a244:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a24a:	70da      	strb	r2, [r3, #3]
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 801a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a24e:	78db      	ldrb	r3, [r3, #3]
 801a250:	461a      	mov	r2, r3
 801a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a254:	fb02 f303 	mul.w	r3, r2, r3
 801a258:	633b      	str	r3, [r7, #48]	; 0x30
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 801a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a25c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a260:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a264:	b29a      	uxth	r2, r3
 801a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a26c:	4313      	orrs	r3, r2
 801a26e:	b29b      	uxth	r3, r3
 801a270:	b29b      	uxth	r3, r3
 801a272:	461a      	mov	r2, r3
 801a274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a276:	18d2      	adds	r2, r2, r3
 801a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a27a:	625a      	str	r2, [r3, #36]	; 0x24
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 801a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a27e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 801a282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a284:	709a      	strb	r2, [r3, #2]
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 801a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a288:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a28c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a290:	b29a      	uxth	r2, r3
 801a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a298:	4313      	orrs	r3, r2
 801a29a:	b29b      	uxth	r3, r3
 801a29c:	b29a      	uxth	r2, r3
 801a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2a0:	811a      	strh	r2, [r3, #8]
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
 801a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a2a8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a2ac:	b29a      	uxth	r2, r3
 801a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2b0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a2b4:	4313      	orrs	r3, r2
 801a2b6:	b29b      	uxth	r3, r3
 801a2b8:	b29b      	uxth	r3, r3
 801a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 801a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d115      	bne.n	801a2ee <auto_mount+0x2b2>
 801a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2c4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 801a2c8:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a2d2:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801a2d6:	431a      	orrs	r2, r3
 801a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2da:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801a2de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a2e2:	431a      	orrs	r2, r3
 801a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801a2ea:	4313      	orrs	r3, r2
 801a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 801a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a2f4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a2f8:	b29a      	uxth	r2, r3
 801a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a300:	4313      	orrs	r3, r2
 801a302:	b29b      	uxth	r3, r3
 801a304:	b29b      	uxth	r3, r3
 801a306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a308:	1ad2      	subs	r2, r2, r3
 801a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a30c:	1ad2      	subs	r2, r2, r3
 801a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a310:	891b      	ldrh	r3, [r3, #8]
 801a312:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801a316:	b29b      	uxth	r3, r3
 801a318:	1ad2      	subs	r2, r2, r3
		) / fs->csize + 2;
 801a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a31c:	789b      	ldrb	r3, [r3, #2]
 801a31e:	fbb2 f3f3 	udiv	r3, r2, r3
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
 801a322:	f103 0302 	add.w	r3, r3, #2
 801a326:	61bb      	str	r3, [r7, #24]
 801a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a32a:	69ba      	ldr	r2, [r7, #24]
 801a32c:	621a      	str	r2, [r3, #32]
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
 801a32e:	f04f 0301 	mov.w	r3, #1
 801a332:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 801a336:	69ba      	ldr	r2, [r7, #24]
 801a338:	f640 73f6 	movw	r3, #4086	; 0xff6
 801a33c:	429a      	cmp	r2, r3
 801a33e:	d903      	bls.n	801a348 <auto_mount+0x30c>
 801a340:	f04f 0302 	mov.w	r3, #2
 801a344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 801a348:	69ba      	ldr	r2, [r7, #24]
 801a34a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 801a34e:	429a      	cmp	r2, r3
 801a350:	d903      	bls.n	801a35a <auto_mount+0x31e>
 801a352:	f04f 0303 	mov.w	r3, #3
 801a356:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (fmt == FS_FAT32)
 801a35a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a35e:	2b03      	cmp	r3, #3
 801a360:	d117      	bne.n	801a392 <auto_mount+0x356>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 801a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a364:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 801a368:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801a372:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801a376:	431a      	orrs	r2, r3
 801a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a37a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801a37e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a382:	431a      	orrs	r2, r3
 801a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a386:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801a38a:	431a      	orrs	r2, r3
 801a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a38e:	629a      	str	r2, [r3, #40]	; 0x28
 801a390:	e005      	b.n	801a39e <auto_mount+0x362>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 801a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a398:	18d2      	adds	r2, r2, r3
 801a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a39c:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 801a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3a4:	18d2      	adds	r2, r2, r3
 801a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a8:	891b      	ldrh	r3, [r3, #8]
 801a3aa:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801a3ae:	b29b      	uxth	r3, r3
 801a3b0:	18d2      	adds	r2, r2, r3
 801a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3b4:	62da      	str	r2, [r3, #44]	; 0x2c

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
 801a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3b8:	f04f 32ff 	mov.w	r2, #4294967295
 801a3bc:	611a      	str	r2, [r3, #16]
	fs->wflag = 0;
 801a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c0:	f04f 0200 	mov.w	r2, #0
 801a3c4:	711a      	strb	r2, [r3, #4]
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
 801a3c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a3ca:	2b03      	cmp	r3, #3
 801a3cc:	f040 809c 	bne.w	801a508 <auto_mount+0x4cc>
	 	fs->fsi_flag = 0;
 801a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3d2:	f04f 0200 	mov.w	r2, #0
 801a3d6:	729a      	strb	r2, [r3, #10]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 801a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3da:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801a3de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a3e2:	b29a      	uxth	r2, r3
 801a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3e6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801a3ea:	4313      	orrs	r3, r2
 801a3ec:	b29b      	uxth	r3, r3
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	461a      	mov	r2, r3
 801a3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3f4:	18d2      	adds	r2, r2, r3
 801a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3f8:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 801a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3fc:	7859      	ldrb	r1, [r3, #1]
 801a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a400:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a406:	695b      	ldr	r3, [r3, #20]
 801a408:	4608      	mov	r0, r1
 801a40a:	4611      	mov	r1, r2
 801a40c:	461a      	mov	r2, r3
 801a40e:	f04f 0301 	mov.w	r3, #1
 801a412:	f7eb f803 	bl	800541c <disk_read>
 801a416:	4603      	mov	r3, r0
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d175      	bne.n	801a508 <auto_mount+0x4cc>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 801a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a41e:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 801a422:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a426:	b29a      	uxth	r2, r3
 801a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a42a:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 801a42e:	4313      	orrs	r3, r2
 801a430:	b29b      	uxth	r3, r3
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 801a432:	b21a      	sxth	r2, r3
 801a434:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801a438:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 801a43c:	429a      	cmp	r2, r3
 801a43e:	d163      	bne.n	801a508 <auto_mount+0x4cc>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 801a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a442:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801a446:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a44c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801a450:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801a454:	431a      	orrs	r2, r3
 801a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801a45c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a460:	431a      	orrs	r2, r3
 801a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a464:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a468:	431a      	orrs	r2, r3
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 801a46a:	f245 2352 	movw	r3, #21074	; 0x5252
 801a46e:	f2c4 1361 	movt	r3, #16737	; 0x4161
 801a472:	429a      	cmp	r2, r3
 801a474:	d148      	bne.n	801a508 <auto_mount+0x4cc>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 801a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a478:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 801a47c:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a482:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 801a486:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801a48a:	431a      	orrs	r2, r3
 801a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a48e:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
 801a492:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a496:	431a      	orrs	r2, r3
 801a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a49a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 801a49e:	431a      	orrs	r2, r3
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 801a4a0:	f247 2372 	movw	r3, #29298	; 0x7272
 801a4a4:	f2c6 1341 	movt	r3, #24897	; 0x6141
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	d12d      	bne.n	801a508 <auto_mount+0x4cc>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 801a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ae:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 801a4b2:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4b8:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 801a4bc:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801a4c0:	431a      	orrs	r2, r3
 801a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c4:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 801a4c8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a4cc:	431a      	orrs	r2, r3
 801a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 801a4d4:	431a      	orrs	r2, r3
 801a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d8:	60da      	str	r2, [r3, #12]
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 801a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4dc:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 801a4e0:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801a4ea:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801a4ee:	431a      	orrs	r2, r3
 801a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4f2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 801a4f6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a4fa:	431a      	orrs	r2, r3
 801a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4fe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801a502:	431a      	orrs	r2, r3
 801a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a506:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 801a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a50a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801a50e:	701a      	strb	r2, [r3, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
 801a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a512:	f04f 0200 	mov.w	r2, #0
 801a516:	631a      	str	r2, [r3, #48]	; 0x30
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 801a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a51a:	f04f 0200 	mov.w	r2, #0
 801a51e:	619a      	str	r2, [r3, #24]
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 801a520:	f241 03fc 	movw	r3, #4348	; 0x10fc
 801a524:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a528:	881b      	ldrh	r3, [r3, #0]
 801a52a:	f103 0301 	add.w	r3, r3, #1
 801a52e:	b29a      	uxth	r2, r3
 801a530:	f241 03fc 	movw	r3, #4348	; 0x10fc
 801a534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a538:	801a      	strh	r2, [r3, #0]
 801a53a:	f241 03fc 	movw	r3, #4348	; 0x10fc
 801a53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a542:	881a      	ldrh	r2, [r3, #0]
 801a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a546:	80da      	strh	r2, [r3, #6]
	res = FR_OK;
 801a548:	f04f 0300 	mov.w	r3, #0
 801a54c:	75fb      	strb	r3, [r7, #23]

	return res;
 801a54e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a550:	4618      	mov	r0, r3
 801a552:	f107 0740 	add.w	r7, r7, #64	; 0x40
 801a556:	46bd      	mov	sp, r7
 801a558:	bd80      	pop	{r7, pc}
 801a55a:	bf00      	nop

0801a55c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 801a55c:	b580      	push	{r7, lr}
 801a55e:	b082      	sub	sp, #8
 801a560:	af00      	add	r7, sp, #0
 801a562:	6078      	str	r0, [r7, #4]
 801a564:	460b      	mov	r3, r1
 801a566:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d008      	beq.n	801a580 <validate+0x24>
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	781b      	ldrb	r3, [r3, #0]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d004      	beq.n	801a580 <validate+0x24>
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	88db      	ldrh	r3, [r3, #6]
 801a57a:	887a      	ldrh	r2, [r7, #2]
 801a57c:	429a      	cmp	r2, r3
 801a57e:	d002      	beq.n	801a586 <validate+0x2a>
		return FR_INVALID_OBJECT;
 801a580:	f04f 0309 	mov.w	r3, #9
 801a584:	e00f      	b.n	801a5a6 <validate+0x4a>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	785b      	ldrb	r3, [r3, #1]
 801a58a:	4618      	mov	r0, r3
 801a58c:	f7ea ff2e 	bl	80053ec <disk_status>
 801a590:	4603      	mov	r3, r0
 801a592:	f003 0301 	and.w	r3, r3, #1
 801a596:	b2db      	uxtb	r3, r3
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d002      	beq.n	801a5a2 <validate+0x46>
		return FR_NOT_READY;
 801a59c:	f04f 0303 	mov.w	r3, #3
 801a5a0:	e001      	b.n	801a5a6 <validate+0x4a>

	return FR_OK;
 801a5a2:	f04f 0300 	mov.w	r3, #0
}
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	f107 0708 	add.w	r7, r7, #8
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	bd80      	pop	{r7, pc}

0801a5b0 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 801a5b0:	b480      	push	{r7}
 801a5b2:	b085      	sub	sp, #20
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	6039      	str	r1, [r7, #0]
 801a5ba:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 801a5bc:	79fb      	ldrb	r3, [r7, #7]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d002      	beq.n	801a5c8 <f_mount+0x18>
		return FR_INVALID_DRIVE;
 801a5c2:	f04f 030b 	mov.w	r3, #11
 801a5c6:	e01f      	b.n	801a608 <f_mount+0x58>
	rfs = FatFs[vol];				/* Get current fs object */
 801a5c8:	79fa      	ldrb	r2, [r7, #7]
 801a5ca:	f241 03f8 	movw	r3, #4344	; 0x10f8
 801a5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5d6:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d003      	beq.n	801a5e6 <f_mount+0x36>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	f04f 0200 	mov.w	r2, #0
 801a5e4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801a5e6:	683b      	ldr	r3, [r7, #0]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d003      	beq.n	801a5f4 <f_mount+0x44>
		fs->fs_type = 0;			/* Clear new fs object */
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	f04f 0200 	mov.w	r2, #0
 801a5f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 801a5f4:	79fa      	ldrb	r2, [r7, #7]
 801a5f6:	f241 03f8 	movw	r3, #4344	; 0x10f8
 801a5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801a5fe:	6839      	ldr	r1, [r7, #0]
 801a600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return FR_OK;
 801a604:	f04f 0300 	mov.w	r3, #0
}
 801a608:	4618      	mov	r0, r3
 801a60a:	f107 0714 	add.w	r7, r7, #20
 801a60e:	46bd      	mov	sp, r7
 801a610:	bc80      	pop	{r7}
 801a612:	4770      	bx	lr

0801a614 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/*Access mode and file open mode flags, mcg changed name to modearg */
)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b092      	sub	sp, #72	; 0x48
 801a618:	af00      	add	r7, sp, #0
 801a61a:	60f8      	str	r0, [r7, #12]
 801a61c:	60b9      	str	r1, [r7, #8]
 801a61e:	4613      	mov	r3, r2
 801a620:	71fb      	strb	r3, [r7, #7]
	BYTE *dir;
//        BYTE mode; //mcg

//      mode = modearg; //mcg using local var to try ad prevent hard fault exception that occurred when using mode arg directly

	fp->fs = NULL;		/* Clear file object */
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	f04f 0200 	mov.w	r2, #0
 801a628:	601a      	str	r2, [r3, #0]
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 801a62a:	79fb      	ldrb	r3, [r7, #7]
 801a62c:	f003 031f 	and.w	r3, r3, #31
 801a630:	71fb      	strb	r3, [r7, #7]
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
 801a632:	79fb      	ldrb	r3, [r7, #7]
 801a634:	f003 031e 	and.w	r3, r3, #30
 801a638:	b2db      	uxtb	r3, r3
 801a63a:	f107 0108 	add.w	r1, r7, #8
 801a63e:	f107 021c 	add.w	r2, r7, #28
 801a642:	4608      	mov	r0, r1
 801a644:	4611      	mov	r1, r2
 801a646:	461a      	mov	r2, r3
 801a648:	f7ff fcf8 	bl	801a03c <auto_mount>
 801a64c:	4603      	mov	r3, r0
 801a64e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801a652:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a656:	2b00      	cmp	r3, #0
 801a658:	d002      	beq.n	801a660 <f_open+0x4c>
 801a65a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a65e:	e185      	b.n	801a96c <f_open+0x358>
	INITBUF(dj, sfn, lfn);
 801a660:	f107 0310 	add.w	r3, r7, #16
 801a664:	637b      	str	r3, [r7, #52]	; 0x34
	res = follow_path(&dj, path);	/* Follow the file path */
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	f107 021c 	add.w	r2, r7, #28
 801a66c:	4610      	mov	r0, r2
 801a66e:	4619      	mov	r1, r3
 801a670:	f7ff fbf8 	bl	8019e64 <follow_path>
 801a674:	4603      	mov	r3, r0
 801a676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801a67a:	79fb      	ldrb	r3, [r7, #7]
 801a67c:	f003 031c 	and.w	r3, r3, #28
 801a680:	2b00      	cmp	r3, #0
 801a682:	f000 80f0 	beq.w	801a866 <f_open+0x252>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
 801a686:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d019      	beq.n	801a6c2 <f_open+0xae>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
 801a68e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a692:	2b04      	cmp	r3, #4
 801a694:	d107      	bne.n	801a6a6 <f_open+0x92>
				res = dir_register(&dj);
 801a696:	f107 031c 	add.w	r3, r7, #28
 801a69a:	4618      	mov	r0, r3
 801a69c:	f7ff f97e 	bl	801999c <dir_register>
 801a6a0:	4603      	mov	r3, r0
 801a6a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801a6a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d002      	beq.n	801a6b4 <f_open+0xa0>
 801a6ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a6b2:	e15b      	b.n	801a96c <f_open+0x358>
			mode |= FA_CREATE_ALWAYS;
 801a6b4:	79fb      	ldrb	r3, [r7, #7]
 801a6b6:	f043 0308 	orr.w	r3, r3, #8
 801a6ba:	71fb      	strb	r3, [r7, #7]
			dir = dj.dir;			/* Created entry (SFN entry) */
 801a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6be:	643b      	str	r3, [r7, #64]	; 0x40
 801a6c0:	e099      	b.n	801a7f6 <f_open+0x1e2>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 801a6c2:	79fb      	ldrb	r3, [r7, #7]
 801a6c4:	f003 0304 	and.w	r3, r3, #4
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d002      	beq.n	801a6d2 <f_open+0xbe>
				LEAVE_FF(dj.fs, FR_EXIST);
 801a6cc:	f04f 0308 	mov.w	r3, #8
 801a6d0:	e14c      	b.n	801a96c <f_open+0x358>
			dir = dj.dir;
 801a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6d4:	643b      	str	r3, [r7, #64]	; 0x40
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 801a6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d007      	beq.n	801a6ec <f_open+0xd8>
 801a6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a6de:	f103 030b 	add.w	r3, r3, #11
 801a6e2:	781b      	ldrb	r3, [r3, #0]
 801a6e4:	f003 0311 	and.w	r3, r3, #17
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d002      	beq.n	801a6f2 <f_open+0xde>
				LEAVE_FF(dj.fs, FR_DENIED);
 801a6ec:	f04f 0307 	mov.w	r3, #7
 801a6f0:	e13c      	b.n	801a96c <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 801a6f2:	79fb      	ldrb	r3, [r7, #7]
 801a6f4:	f003 0308 	and.w	r3, r3, #8
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d07c      	beq.n	801a7f6 <f_open+0x1e2>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 801a6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a6fe:	f103 0315 	add.w	r3, r3, #21
 801a702:	781b      	ldrb	r3, [r3, #0]
 801a704:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a708:	b29a      	uxth	r2, r3
 801a70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a70c:	f103 0314 	add.w	r3, r3, #20
 801a710:	781b      	ldrb	r3, [r3, #0]
 801a712:	4313      	orrs	r3, r2
 801a714:	b29b      	uxth	r3, r3
 801a716:	b29b      	uxth	r3, r3
 801a718:	ea4f 4203 	mov.w	r2, r3, lsl #16
 801a71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a71e:	f103 031b 	add.w	r3, r3, #27
 801a722:	781b      	ldrb	r3, [r3, #0]
 801a724:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a728:	b299      	uxth	r1, r3
 801a72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a72c:	f103 031a 	add.w	r3, r3, #26
 801a730:	781b      	ldrb	r3, [r3, #0]
 801a732:	430b      	orrs	r3, r1
 801a734:	b29b      	uxth	r3, r3
 801a736:	b29b      	uxth	r3, r3
 801a738:	4313      	orrs	r3, r2
 801a73a:	63fb      	str	r3, [r7, #60]	; 0x3c
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 801a73c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a73e:	f103 0314 	add.w	r3, r3, #20
 801a742:	f04f 0200 	mov.w	r2, #0
 801a746:	701a      	strb	r2, [r3, #0]
 801a748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a74a:	f103 0315 	add.w	r3, r3, #21
 801a74e:	f04f 0200 	mov.w	r2, #0
 801a752:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_FstClusLO, 0);
 801a754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a756:	f103 031a 	add.w	r3, r3, #26
 801a75a:	f04f 0200 	mov.w	r2, #0
 801a75e:	701a      	strb	r2, [r3, #0]
 801a760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a762:	f103 031b 	add.w	r3, r3, #27
 801a766:	f04f 0200 	mov.w	r2, #0
 801a76a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 801a76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a76e:	f103 031c 	add.w	r3, r3, #28
 801a772:	f04f 0200 	mov.w	r2, #0
 801a776:	701a      	strb	r2, [r3, #0]
 801a778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a77a:	f103 031d 	add.w	r3, r3, #29
 801a77e:	f04f 0200 	mov.w	r2, #0
 801a782:	701a      	strb	r2, [r3, #0]
 801a784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a786:	f103 031e 	add.w	r3, r3, #30
 801a78a:	f04f 0200 	mov.w	r2, #0
 801a78e:	701a      	strb	r2, [r3, #0]
 801a790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a792:	f103 031f 	add.w	r3, r3, #31
 801a796:	f04f 0200 	mov.w	r2, #0
 801a79a:	701a      	strb	r2, [r3, #0]
				dj.fs->wflag = 1;
 801a79c:	69fb      	ldr	r3, [r7, #28]
 801a79e:	f04f 0201 	mov.w	r2, #1
 801a7a2:	711a      	strb	r2, [r3, #4]
				ps = dj.fs->winsect;			/* Remove the cluster chain */
 801a7a4:	69fb      	ldr	r3, [r7, #28]
 801a7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7a8:	63bb      	str	r3, [r7, #56]	; 0x38
				if (cl) {
 801a7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d013      	beq.n	801a7d8 <f_open+0x1c4>
					res = remove_chain(dj.fs, cl);
 801a7b0:	69fb      	ldr	r3, [r7, #28]
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a7b6:	f7fe fdc9 	bl	801934c <remove_chain>
 801a7ba:	4603      	mov	r3, r0
 801a7bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (res) LEAVE_FF(dj.fs, res);
 801a7c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d002      	beq.n	801a7ce <f_open+0x1ba>
 801a7c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a7cc:	e0ce      	b.n	801a96c <f_open+0x358>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801a7ce:	69fb      	ldr	r3, [r7, #28]
 801a7d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a7d2:	f102 32ff 	add.w	r2, r2, #4294967295
 801a7d6:	60da      	str	r2, [r3, #12]
				}
				res = move_window(dj.fs, ps);
 801a7d8:	69fb      	ldr	r3, [r7, #28]
 801a7da:	4618      	mov	r0, r3
 801a7dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a7de:	f7fe fa57 	bl	8018c90 <move_window>
 801a7e2:	4603      	mov	r3, r0
 801a7e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801a7e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d002      	beq.n	801a7f6 <f_open+0x1e2>
 801a7f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a7f4:	e0ba      	b.n	801a96c <f_open+0x358>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
 801a7f6:	79fb      	ldrb	r3, [r7, #7]
 801a7f8:	f003 0308 	and.w	r3, r3, #8
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d05a      	beq.n	801a8b6 <f_open+0x2a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
 801a800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a802:	f103 030b 	add.w	r3, r3, #11
 801a806:	f04f 0200 	mov.w	r2, #0
 801a80a:	701a      	strb	r2, [r3, #0]
			ps = get_fattime();
 801a80c:	f003 faa4 	bl	801dd58 <get_fattime>
 801a810:	4603      	mov	r3, r0
 801a812:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 801a814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a816:	f103 030e 	add.w	r3, r3, #14
 801a81a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a81c:	b2d2      	uxtb	r2, r2
 801a81e:	701a      	strb	r2, [r3, #0]
 801a820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a822:	f103 030f 	add.w	r3, r3, #15
 801a826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a828:	b292      	uxth	r2, r2
 801a82a:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801a82e:	b292      	uxth	r2, r2
 801a830:	b2d2      	uxtb	r2, r2
 801a832:	701a      	strb	r2, [r3, #0]
 801a834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a836:	f103 0310 	add.w	r3, r3, #16
 801a83a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a83c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801a840:	b2d2      	uxtb	r2, r2
 801a842:	701a      	strb	r2, [r3, #0]
 801a844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a846:	f103 0311 	add.w	r3, r3, #17
 801a84a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a84c:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801a850:	b2d2      	uxtb	r2, r2
 801a852:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
 801a854:	69fb      	ldr	r3, [r7, #28]
 801a856:	f04f 0201 	mov.w	r2, #1
 801a85a:	711a      	strb	r2, [r3, #4]
			mode |= FA__WRITTEN;				/* Set file changed flag */
 801a85c:	79fb      	ldrb	r3, [r7, #7]
 801a85e:	f043 0320 	orr.w	r3, r3, #32
 801a862:	71fb      	strb	r3, [r7, #7]
 801a864:	e027      	b.n	801a8b6 <f_open+0x2a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
 801a866:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d002      	beq.n	801a874 <f_open+0x260>
 801a86e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a872:	e07b      	b.n	801a96c <f_open+0x358>
		dir = dj.dir;
 801a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a876:	643b      	str	r3, [r7, #64]	; 0x40
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 801a878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d007      	beq.n	801a88e <f_open+0x27a>
 801a87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a880:	f103 030b 	add.w	r3, r3, #11
 801a884:	781b      	ldrb	r3, [r3, #0]
 801a886:	f003 0310 	and.w	r3, r3, #16
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d002      	beq.n	801a894 <f_open+0x280>
			LEAVE_FF(dj.fs, FR_NO_FILE);
 801a88e:	f04f 0304 	mov.w	r3, #4
 801a892:	e06b      	b.n	801a96c <f_open+0x358>
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801a894:	79fb      	ldrb	r3, [r7, #7]
 801a896:	f003 0302 	and.w	r3, r3, #2
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d00b      	beq.n	801a8b6 <f_open+0x2a2>
 801a89e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8a0:	f103 030b 	add.w	r3, r3, #11
 801a8a4:	781b      	ldrb	r3, [r3, #0]
 801a8a6:	f003 0301 	and.w	r3, r3, #1
 801a8aa:	b2db      	uxtb	r3, r3
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d002      	beq.n	801a8b6 <f_open+0x2a2>
			LEAVE_FF(dj.fs, FR_DENIED);
 801a8b0:	f04f 0307 	mov.w	r3, #7
 801a8b4:	e05a      	b.n	801a96c <f_open+0x358>
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801a8b6:	69fb      	ldr	r3, [r7, #28]
 801a8b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	61da      	str	r2, [r3, #28]
	fp->dir_ptr = dj.dir;
 801a8be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a8c0:	68fb      	ldr	r3, [r7, #12]
 801a8c2:	621a      	str	r2, [r3, #32]
#endif
	fp->flag = mode;					/* File access mode */
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	79fa      	ldrb	r2, [r7, #7]
 801a8c8:	719a      	strb	r2, [r3, #6]
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801a8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8cc:	f103 0315 	add.w	r3, r3, #21
 801a8d0:	781b      	ldrb	r3, [r3, #0]
 801a8d2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a8d6:	b29a      	uxth	r2, r3
 801a8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8da:	f103 0314 	add.w	r3, r3, #20
 801a8de:	781b      	ldrb	r3, [r3, #0]
 801a8e0:	4313      	orrs	r3, r2
 801a8e2:	b29b      	uxth	r3, r3
 801a8e4:	b29b      	uxth	r3, r3
 801a8e6:	ea4f 4203 	mov.w	r2, r3, lsl #16
 801a8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8ec:	f103 031b 	add.w	r3, r3, #27
 801a8f0:	781b      	ldrb	r3, [r3, #0]
 801a8f2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a8f6:	b299      	uxth	r1, r3
 801a8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8fa:	f103 031a 	add.w	r3, r3, #26
 801a8fe:	781b      	ldrb	r3, [r3, #0]
 801a900:	430b      	orrs	r3, r1
 801a902:	b29b      	uxth	r3, r3
 801a904:	b29b      	uxth	r3, r3
 801a906:	431a      	orrs	r2, r3
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	611a      	str	r2, [r3, #16]
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 801a90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a90e:	f103 031f 	add.w	r3, r3, #31
 801a912:	781b      	ldrb	r3, [r3, #0]
 801a914:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801a918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a91a:	f103 031e 	add.w	r3, r3, #30
 801a91e:	781b      	ldrb	r3, [r3, #0]
 801a920:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801a924:	431a      	orrs	r2, r3
 801a926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a928:	f103 031d 	add.w	r3, r3, #29
 801a92c:	781b      	ldrb	r3, [r3, #0]
 801a92e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801a932:	431a      	orrs	r2, r3
 801a934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a936:	f103 031c 	add.w	r3, r3, #28
 801a93a:	781b      	ldrb	r3, [r3, #0]
 801a93c:	431a      	orrs	r2, r3
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	60da      	str	r2, [r3, #12]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	f04f 0200 	mov.w	r2, #0
 801a948:	609a      	str	r2, [r3, #8]
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801a950:	71da      	strb	r2, [r3, #7]
	fp->dsect = 0;
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	f04f 0200 	mov.w	r2, #0
 801a958:	619a      	str	r2, [r3, #24]
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 801a95a:	69fa      	ldr	r2, [r7, #28]
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	601a      	str	r2, [r3, #0]
 801a960:	69fb      	ldr	r3, [r7, #28]
 801a962:	88da      	ldrh	r2, [r3, #6]
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	809a      	strh	r2, [r3, #4]

	LEAVE_FF(dj.fs, FR_OK);
 801a968:	f04f 0300 	mov.w	r3, #0
}
 801a96c:	4618      	mov	r0, r3
 801a96e:	f107 0748 	add.w	r7, r7, #72	; 0x48
 801a972:	46bd      	mov	sp, r7
 801a974:	bd80      	pop	{r7, pc}
 801a976:	bf00      	nop

0801a978 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 801a978:	b580      	push	{r7, lr}
 801a97a:	b08c      	sub	sp, #48	; 0x30
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	60f8      	str	r0, [r7, #12]
 801a980:	60b9      	str	r1, [r7, #8]
 801a982:	607a      	str	r2, [r7, #4]
 801a984:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
 801a986:	68bb      	ldr	r3, [r7, #8]
 801a988:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;
 801a98a:	683b      	ldr	r3, [r7, #0]
 801a98c:	f04f 0200 	mov.w	r2, #0
 801a990:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	681a      	ldr	r2, [r3, #0]
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	889b      	ldrh	r3, [r3, #4]
 801a99a:	4610      	mov	r0, r2
 801a99c:	4619      	mov	r1, r3
 801a99e:	f7ff fddd 	bl	801a55c <validate>
 801a9a2:	4603      	mov	r3, r0
 801a9a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801a9a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d002      	beq.n	801a9b6 <f_read+0x3e>
 801a9b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a9b4:	e164      	b.n	801ac80 <f_read+0x308>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	799b      	ldrb	r3, [r3, #6]
 801a9ba:	b2db      	uxtb	r3, r3
 801a9bc:	b25b      	sxtb	r3, r3
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	da02      	bge.n	801a9c8 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 801a9c2:	f04f 0302 	mov.w	r3, #2
 801a9c6:	e15b      	b.n	801ac80 <f_read+0x308>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	799b      	ldrb	r3, [r3, #6]
 801a9cc:	f003 0301 	and.w	r3, r3, #1
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d102      	bne.n	801a9da <f_read+0x62>
		LEAVE_FF(fp->fs, FR_DENIED);
 801a9d4:	f04f 0307 	mov.w	r3, #7
 801a9d8:	e152      	b.n	801ac80 <f_read+0x308>
	remain = fp->fsize - fp->fptr;
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	68da      	ldr	r2, [r3, #12]
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	689b      	ldr	r3, [r3, #8]
 801a9e2:	1ad3      	subs	r3, r2, r3
 801a9e4:	61fb      	str	r3, [r7, #28]
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
 801a9e6:	687a      	ldr	r2, [r7, #4]
 801a9e8:	69fb      	ldr	r3, [r7, #28]
 801a9ea:	429a      	cmp	r2, r3
 801a9ec:	f240 8142 	bls.w	801ac74 <f_read+0x2fc>
 801a9f0:	69fb      	ldr	r3, [r7, #28]
 801a9f2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;									/* Repeat until all data transferred */
 801a9f4:	e13e      	b.n	801ac74 <f_read+0x2fc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	689b      	ldr	r3, [r3, #8]
 801a9fa:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801a9fe:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	f040 8103 	bne.w	801ac0e <f_read+0x296>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	79da      	ldrb	r2, [r3, #7]
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	789b      	ldrb	r3, [r3, #2]
 801aa12:	429a      	cmp	r2, r3
 801aa14:	d332      	bcc.n	801aa7c <f_read+0x104>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	689b      	ldr	r3, [r3, #8]
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d102      	bne.n	801aa24 <f_read+0xac>
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	691b      	ldr	r3, [r3, #16]
 801aa22:	e008      	b.n	801aa36 <f_read+0xbe>
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	681a      	ldr	r2, [r3, #0]
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	695b      	ldr	r3, [r3, #20]
 801aa2c:	4610      	mov	r0, r2
 801aa2e:	4619      	mov	r1, r3
 801aa30:	f7fe fa58 	bl	8018ee4 <get_fat>
 801aa34:	4603      	mov	r3, r0

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 801aa36:	61bb      	str	r3, [r7, #24]
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 801aa38:	69bb      	ldr	r3, [r7, #24]
 801aa3a:	2b01      	cmp	r3, #1
 801aa3c:	d809      	bhi.n	801aa52 <f_read+0xda>
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	799b      	ldrb	r3, [r3, #6]
 801aa42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801aa46:	b2da      	uxtb	r2, r3
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	719a      	strb	r2, [r3, #6]
 801aa4c:	f04f 0302 	mov.w	r3, #2
 801aa50:	e116      	b.n	801ac80 <f_read+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801aa52:	69bb      	ldr	r3, [r7, #24]
 801aa54:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa58:	d109      	bne.n	801aa6e <f_read+0xf6>
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	799b      	ldrb	r3, [r3, #6]
 801aa5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801aa62:	b2da      	uxtb	r2, r3
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	719a      	strb	r2, [r3, #6]
 801aa68:	f04f 0301 	mov.w	r3, #1
 801aa6c:	e108      	b.n	801ac80 <f_read+0x308>
				fp->curr_clust = clst;				/* Update current cluster */
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	69ba      	ldr	r2, [r7, #24]
 801aa72:	615a      	str	r2, [r3, #20]
				fp->csect = 0;						/* Reset sector offset in the cluster */
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	f04f 0200 	mov.w	r2, #0
 801aa7a:	71da      	strb	r2, [r3, #7]
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	681a      	ldr	r2, [r3, #0]
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	695b      	ldr	r3, [r3, #20]
 801aa84:	4610      	mov	r0, r2
 801aa86:	4619      	mov	r1, r3
 801aa88:	f7fe fd48 	bl	801951c <clust2sect>
 801aa8c:	4603      	mov	r3, r0
 801aa8e:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801aa90:	697b      	ldr	r3, [r7, #20]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d109      	bne.n	801aaaa <f_read+0x132>
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	799b      	ldrb	r3, [r3, #6]
 801aa9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801aa9e:	b2da      	uxtb	r2, r3
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	719a      	strb	r2, [r3, #6]
 801aaa4:	f04f 0302 	mov.w	r3, #2
 801aaa8:	e0ea      	b.n	801ac80 <f_read+0x308>
			sect += fp->csect;
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	79db      	ldrb	r3, [r3, #7]
 801aaae:	697a      	ldr	r2, [r7, #20]
 801aab0:	18d3      	adds	r3, r2, r3
 801aab2:	617b      	str	r3, [r7, #20]
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	ea4f 2353 	mov.w	r3, r3, lsr #9
 801aaba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {								/* Read maximum contiguous sectors directly */
 801aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d053      	beq.n	801ab6a <f_read+0x1f2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	79db      	ldrb	r3, [r3, #7]
 801aac6:	461a      	mov	r2, r3
 801aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaca:	18d2      	adds	r2, r2, r3
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	789b      	ldrb	r3, [r3, #2]
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d907      	bls.n	801aae6 <f_read+0x16e>
					cc = fp->fs->csize - fp->csect;
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	789b      	ldrb	r3, [r3, #2]
 801aadc:	461a      	mov	r2, r3
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	79db      	ldrb	r3, [r3, #7]
 801aae2:	1ad3      	subs	r3, r2, r3
 801aae4:	62bb      	str	r3, [r7, #40]	; 0x28
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	785a      	ldrb	r2, [r3, #1]
 801aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaee:	b2db      	uxtb	r3, r3
 801aaf0:	4610      	mov	r0, r2
 801aaf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aaf4:	697a      	ldr	r2, [r7, #20]
 801aaf6:	f7ea fc91 	bl	800541c <disk_read>
 801aafa:	4603      	mov	r3, r0
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d009      	beq.n	801ab14 <f_read+0x19c>
					ABORT(fp->fs, FR_DISK_ERR);
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	799b      	ldrb	r3, [r3, #6]
 801ab04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ab08:	b2da      	uxtb	r2, r3
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	719a      	strb	r2, [r3, #6]
 801ab0e:	f04f 0301 	mov.w	r3, #1
 801ab12:	e0b5      	b.n	801ac80 <f_read+0x308>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	799b      	ldrb	r3, [r3, #6]
 801ab18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d017      	beq.n	801ab50 <f_read+0x1d8>
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	699a      	ldr	r2, [r3, #24]
 801ab24:	697b      	ldr	r3, [r7, #20]
 801ab26:	1ad2      	subs	r2, r2, r3
 801ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab2a:	429a      	cmp	r2, r3
 801ab2c:	d210      	bcs.n	801ab50 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	699a      	ldr	r2, [r3, #24]
 801ab32:	697b      	ldr	r3, [r7, #20]
 801ab34:	1ad3      	subs	r3, r2, r3
 801ab36:	ea4f 2343 	mov.w	r3, r3, lsl #9
 801ab3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab3c:	18d2      	adds	r2, r2, r3
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801ab44:	4610      	mov	r0, r2
 801ab46:	4619      	mov	r1, r3
 801ab48:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab4c:	f7fe f802 	bl	8018b54 <mem_cpy>
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	79da      	ldrb	r2, [r3, #7]
 801ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab56:	b2db      	uxtb	r3, r3
 801ab58:	18d3      	adds	r3, r2, r3
 801ab5a:	b2da      	uxtb	r2, r3
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	71da      	strb	r2, [r3, #7]
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 801ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab62:	ea4f 2343 	mov.w	r3, r3, lsl #9
 801ab66:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801ab68:	e070      	b.n	801ac4c <f_read+0x2d4>
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	799b      	ldrb	r3, [r3, #6]
 801ab6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d022      	beq.n	801abbc <f_read+0x244>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	7859      	ldrb	r1, [r3, #1]
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	699b      	ldr	r3, [r3, #24]
 801ab86:	4608      	mov	r0, r1
 801ab88:	4611      	mov	r1, r2
 801ab8a:	461a      	mov	r2, r3
 801ab8c:	f04f 0301 	mov.w	r3, #1
 801ab90:	f7ea fca2 	bl	80054d8 <disk_write>
 801ab94:	4603      	mov	r3, r0
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d009      	beq.n	801abae <f_read+0x236>
					ABORT(fp->fs, FR_DISK_ERR);
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	799b      	ldrb	r3, [r3, #6]
 801ab9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801aba2:	b2da      	uxtb	r2, r3
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	719a      	strb	r2, [r3, #6]
 801aba8:	f04f 0301 	mov.w	r3, #1
 801abac:	e068      	b.n	801ac80 <f_read+0x308>
				fp->flag &= ~FA__DIRTY;
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	799b      	ldrb	r3, [r3, #6]
 801abb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801abb6:	b2da      	uxtb	r2, r3
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	699a      	ldr	r2, [r3, #24]
 801abc0:	697b      	ldr	r3, [r7, #20]
 801abc2:	429a      	cmp	r2, r3
 801abc4:	d019      	beq.n	801abfa <f_read+0x282>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	785a      	ldrb	r2, [r3, #1]
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801abd2:	4610      	mov	r0, r2
 801abd4:	4619      	mov	r1, r3
 801abd6:	697a      	ldr	r2, [r7, #20]
 801abd8:	f04f 0301 	mov.w	r3, #1
 801abdc:	f7ea fc1e 	bl	800541c <disk_read>
 801abe0:	4603      	mov	r3, r0
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d009      	beq.n	801abfa <f_read+0x282>
					ABORT(fp->fs, FR_DISK_ERR);
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	799b      	ldrb	r3, [r3, #6]
 801abea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801abee:	b2da      	uxtb	r2, r3
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	719a      	strb	r2, [r3, #6]
 801abf4:	f04f 0301 	mov.w	r3, #1
 801abf8:	e042      	b.n	801ac80 <f_read+0x308>
			}
#endif
			fp->dsect = sect;
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	697a      	ldr	r2, [r7, #20]
 801abfe:	619a      	str	r2, [r3, #24]
			fp->csect++;							/* Next sector address in the cluster */
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	79db      	ldrb	r3, [r3, #7]
 801ac04:	f103 0301 	add.w	r3, r3, #1
 801ac08:	b2da      	uxtb	r2, r3
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	71da      	strb	r2, [r3, #7]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	689b      	ldr	r3, [r3, #8]
 801ac12:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801ac16:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801ac1a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801ac1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;
 801ac20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	429a      	cmp	r2, r3
 801ac26:	d901      	bls.n	801ac2c <f_read+0x2b4>
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 801ac2c:	68fb      	ldr	r3, [r7, #12]
 801ac2e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	689b      	ldr	r3, [r3, #8]
 801ac36:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801ac3a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801ac3e:	18d2      	adds	r2, r2, r3
 801ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ac44:	4611      	mov	r1, r2
 801ac46:	461a      	mov	r2, r3
 801ac48:	f7fd ff84 	bl	8018b54 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801ac4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac50:	18d3      	adds	r3, r2, r3
 801ac52:	627b      	str	r3, [r7, #36]	; 0x24
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	689a      	ldr	r2, [r3, #8]
 801ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac5a:	18d2      	adds	r2, r2, r3
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	609a      	str	r2, [r3, #8]
 801ac60:	683b      	ldr	r3, [r7, #0]
 801ac62:	681a      	ldr	r2, [r3, #0]
 801ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac66:	18d2      	adds	r2, r2, r3
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	601a      	str	r2, [r3, #0]
 801ac6c:	687a      	ldr	r2, [r7, #4]
 801ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac70:	1ad3      	subs	r3, r2, r3
 801ac72:	607b      	str	r3, [r7, #4]
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	f47f aebd 	bne.w	801a9f6 <f_read+0x7e>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 801ac7c:	f04f 0300 	mov.w	r3, #0
}
 801ac80:	4618      	mov	r0, r3
 801ac82:	f107 0730 	add.w	r7, r7, #48	; 0x30
 801ac86:	46bd      	mov	sp, r7
 801ac88:	bd80      	pop	{r7, pc}
 801ac8a:	bf00      	nop

0801ac8c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 801ac8c:	b580      	push	{r7, lr}
 801ac8e:	b08a      	sub	sp, #40	; 0x28
 801ac90:	af00      	add	r7, sp, #0
 801ac92:	60f8      	str	r0, [r7, #12]
 801ac94:	60b9      	str	r1, [r7, #8]
 801ac96:	607a      	str	r2, [r7, #4]
 801ac98:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
 801ac9a:	68bb      	ldr	r3, [r7, #8]
 801ac9c:	61bb      	str	r3, [r7, #24]


	*bw = 0;
 801ac9e:	683b      	ldr	r3, [r7, #0]
 801aca0:	f04f 0200 	mov.w	r2, #0
 801aca4:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	681a      	ldr	r2, [r3, #0]
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	889b      	ldrh	r3, [r3, #4]
 801acae:	4610      	mov	r0, r2
 801acb0:	4619      	mov	r1, r3
 801acb2:	f7ff fc53 	bl	801a55c <validate>
 801acb6:	4603      	mov	r3, r0
 801acb8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801acba:	7dfb      	ldrb	r3, [r7, #23]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d001      	beq.n	801acc4 <f_write+0x38>
 801acc0:	7dfb      	ldrb	r3, [r7, #23]
 801acc2:	e198      	b.n	801aff6 <f_write+0x36a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	799b      	ldrb	r3, [r3, #6]
 801acc8:	b2db      	uxtb	r3, r3
 801acca:	b25b      	sxtb	r3, r3
 801accc:	2b00      	cmp	r3, #0
 801acce:	da02      	bge.n	801acd6 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 801acd0:	f04f 0302 	mov.w	r3, #2
 801acd4:	e18f      	b.n	801aff6 <f_write+0x36a>
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	799b      	ldrb	r3, [r3, #6]
 801acda:	f003 0302 	and.w	r3, r3, #2
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d102      	bne.n	801ace8 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 801ace2:	f04f 0307 	mov.w	r3, #7
 801ace6:	e186      	b.n	801aff6 <f_write+0x36a>
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	68da      	ldr	r2, [r3, #12]
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	18d2      	adds	r2, r2, r3
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	68db      	ldr	r3, [r3, #12]
 801acf4:	429a      	cmp	r2, r3
 801acf6:	f080 8165 	bcs.w	801afc4 <f_write+0x338>
 801acfa:	f04f 0300 	mov.w	r3, #0
 801acfe:	607b      	str	r3, [r7, #4]

	for ( ;  btw;									/* Repeat until all data transferred */
 801ad00:	e160      	b.n	801afc4 <f_write+0x338>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	689b      	ldr	r3, [r3, #8]
 801ad06:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801ad0a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	f040 811e 	bne.w	801af50 <f_write+0x2c4>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	79da      	ldrb	r2, [r3, #7]
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	789b      	ldrb	r3, [r3, #2]
 801ad1e:	429a      	cmp	r2, r3
 801ad20:	d346      	bcc.n	801adb0 <f_write+0x124>
				if (fp->fptr == 0) {				/* On the top of the file? */
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	689b      	ldr	r3, [r3, #8]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d112      	bne.n	801ad50 <f_write+0xc4>
					clst = fp->org_clust;			/* Follow from the origin */
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	691b      	ldr	r3, [r3, #16]
 801ad2e:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)					/* When there is no cluster chain, */
 801ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d116      	bne.n	801ad64 <f_write+0xd8>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	f04f 0100 	mov.w	r1, #0
 801ad40:	f7fe fb5c 	bl	80193fc <create_chain>
 801ad44:	4603      	mov	r3, r0
 801ad46:	627b      	str	r3, [r7, #36]	; 0x24
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad4c:	611a      	str	r2, [r3, #16]
 801ad4e:	e009      	b.n	801ad64 <f_write+0xd8>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	681a      	ldr	r2, [r3, #0]
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	695b      	ldr	r3, [r3, #20]
 801ad58:	4610      	mov	r0, r2
 801ad5a:	4619      	mov	r1, r3
 801ad5c:	f7fe fb4e 	bl	80193fc <create_chain>
 801ad60:	4603      	mov	r3, r0
 801ad62:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
 801ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	f000 8131 	beq.w	801afce <f_write+0x342>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad6e:	2b01      	cmp	r3, #1
 801ad70:	d109      	bne.n	801ad86 <f_write+0xfa>
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	799b      	ldrb	r3, [r3, #6]
 801ad76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ad7a:	b2da      	uxtb	r2, r3
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	719a      	strb	r2, [r3, #6]
 801ad80:	f04f 0302 	mov.w	r3, #2
 801ad84:	e137      	b.n	801aff6 <f_write+0x36a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad88:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad8c:	d109      	bne.n	801ada2 <f_write+0x116>
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	799b      	ldrb	r3, [r3, #6]
 801ad92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ad96:	b2da      	uxtb	r2, r3
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	719a      	strb	r2, [r3, #6]
 801ad9c:	f04f 0301 	mov.w	r3, #1
 801ada0:	e129      	b.n	801aff6 <f_write+0x36a>
				fp->curr_clust = clst;				/* Update current cluster */
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ada6:	615a      	str	r2, [r3, #20]
				fp->csect = 0;						/* Reset sector address in the cluster */
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	f04f 0200 	mov.w	r2, #0
 801adae:	71da      	strb	r2, [r3, #7]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	799b      	ldrb	r3, [r3, #6]
 801adb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d022      	beq.n	801ae02 <f_write+0x176>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	7859      	ldrb	r1, [r3, #1]
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801adc8:	68fb      	ldr	r3, [r7, #12]
 801adca:	699b      	ldr	r3, [r3, #24]
 801adcc:	4608      	mov	r0, r1
 801adce:	4611      	mov	r1, r2
 801add0:	461a      	mov	r2, r3
 801add2:	f04f 0301 	mov.w	r3, #1
 801add6:	f7ea fb7f 	bl	80054d8 <disk_write>
 801adda:	4603      	mov	r3, r0
 801addc:	2b00      	cmp	r3, #0
 801adde:	d009      	beq.n	801adf4 <f_write+0x168>
					ABORT(fp->fs, FR_DISK_ERR);
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	799b      	ldrb	r3, [r3, #6]
 801ade4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ade8:	b2da      	uxtb	r2, r3
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	719a      	strb	r2, [r3, #6]
 801adee:	f04f 0301 	mov.w	r3, #1
 801adf2:	e100      	b.n	801aff6 <f_write+0x36a>
				fp->flag &= ~FA__DIRTY;
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	799b      	ldrb	r3, [r3, #6]
 801adf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801adfc:	b2da      	uxtb	r2, r3
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 801ae02:	68fb      	ldr	r3, [r7, #12]
 801ae04:	681a      	ldr	r2, [r3, #0]
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	695b      	ldr	r3, [r3, #20]
 801ae0a:	4610      	mov	r0, r2
 801ae0c:	4619      	mov	r1, r3
 801ae0e:	f7fe fb85 	bl	801951c <clust2sect>
 801ae12:	4603      	mov	r3, r0
 801ae14:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801ae16:	693b      	ldr	r3, [r7, #16]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d109      	bne.n	801ae30 <f_write+0x1a4>
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	799b      	ldrb	r3, [r3, #6]
 801ae20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ae24:	b2da      	uxtb	r2, r3
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	719a      	strb	r2, [r3, #6]
 801ae2a:	f04f 0302 	mov.w	r3, #2
 801ae2e:	e0e2      	b.n	801aff6 <f_write+0x36a>
			sect += fp->csect;
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	79db      	ldrb	r3, [r3, #7]
 801ae34:	693a      	ldr	r2, [r7, #16]
 801ae36:	18d3      	adds	r3, r2, r3
 801ae38:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	ea4f 2353 	mov.w	r3, r3, lsr #9
 801ae40:	61fb      	str	r3, [r7, #28]
			if (cc) {								/* Write maximum contiguous sectors directly */
 801ae42:	69fb      	ldr	r3, [r7, #28]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d054      	beq.n	801aef2 <f_write+0x266>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	79db      	ldrb	r3, [r3, #7]
 801ae4c:	461a      	mov	r2, r3
 801ae4e:	69fb      	ldr	r3, [r7, #28]
 801ae50:	18d2      	adds	r2, r2, r3
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	789b      	ldrb	r3, [r3, #2]
 801ae58:	429a      	cmp	r2, r3
 801ae5a:	d907      	bls.n	801ae6c <f_write+0x1e0>
					cc = fp->fs->csize - fp->csect;
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	789b      	ldrb	r3, [r3, #2]
 801ae62:	461a      	mov	r2, r3
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	79db      	ldrb	r3, [r3, #7]
 801ae68:	1ad3      	subs	r3, r2, r3
 801ae6a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	785a      	ldrb	r2, [r3, #1]
 801ae72:	69fb      	ldr	r3, [r7, #28]
 801ae74:	b2db      	uxtb	r3, r3
 801ae76:	4610      	mov	r0, r2
 801ae78:	69b9      	ldr	r1, [r7, #24]
 801ae7a:	693a      	ldr	r2, [r7, #16]
 801ae7c:	f7ea fb2c 	bl	80054d8 <disk_write>
 801ae80:	4603      	mov	r3, r0
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d009      	beq.n	801ae9a <f_write+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	799b      	ldrb	r3, [r3, #6]
 801ae8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ae8e:	b2da      	uxtb	r2, r3
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	719a      	strb	r2, [r3, #6]
 801ae94:	f04f 0301 	mov.w	r3, #1
 801ae98:	e0ad      	b.n	801aff6 <f_write+0x36a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	699a      	ldr	r2, [r3, #24]
 801ae9e:	693b      	ldr	r3, [r7, #16]
 801aea0:	1ad2      	subs	r2, r2, r3
 801aea2:	69fb      	ldr	r3, [r7, #28]
 801aea4:	429a      	cmp	r2, r3
 801aea6:	d217      	bcs.n	801aed8 <f_write+0x24c>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	6999      	ldr	r1, [r3, #24]
 801aeb2:	693b      	ldr	r3, [r7, #16]
 801aeb4:	1acb      	subs	r3, r1, r3
 801aeb6:	ea4f 2343 	mov.w	r3, r3, lsl #9
 801aeba:	69b9      	ldr	r1, [r7, #24]
 801aebc:	18cb      	adds	r3, r1, r3
 801aebe:	4610      	mov	r0, r2
 801aec0:	4619      	mov	r1, r3
 801aec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801aec6:	f7fd fe45 	bl	8018b54 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	799b      	ldrb	r3, [r3, #6]
 801aece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801aed2:	b2da      	uxtb	r2, r3
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	719a      	strb	r2, [r3, #6]
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	79da      	ldrb	r2, [r3, #7]
 801aedc:	69fb      	ldr	r3, [r7, #28]
 801aede:	b2db      	uxtb	r3, r3
 801aee0:	18d3      	adds	r3, r2, r3
 801aee2:	b2da      	uxtb	r2, r3
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	71da      	strb	r2, [r3, #7]
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 801aee8:	69fb      	ldr	r3, [r7, #28]
 801aeea:	ea4f 2343 	mov.w	r3, r3, lsl #9
 801aeee:	623b      	str	r3, [r7, #32]
				continue;
 801aef0:	e054      	b.n	801af9c <f_write+0x310>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	699a      	ldr	r2, [r3, #24]
 801aef6:	693b      	ldr	r3, [r7, #16]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	d01f      	beq.n	801af3c <f_write+0x2b0>
				if (fp->fptr < fp->fsize &&
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	689a      	ldr	r2, [r3, #8]
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	68db      	ldr	r3, [r3, #12]
 801af04:	429a      	cmp	r2, r3
 801af06:	d219      	bcs.n	801af3c <f_write+0x2b0>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	785a      	ldrb	r2, [r3, #1]
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801af14:	4610      	mov	r0, r2
 801af16:	4619      	mov	r1, r3
 801af18:	693a      	ldr	r2, [r7, #16]
 801af1a:	f04f 0301 	mov.w	r3, #1
 801af1e:	f7ea fa7d 	bl	800541c <disk_read>
 801af22:	4603      	mov	r3, r0
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (fp->fptr < fp->fsize &&
 801af24:	2b00      	cmp	r3, #0
 801af26:	d009      	beq.n	801af3c <f_write+0x2b0>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	799b      	ldrb	r3, [r3, #6]
 801af2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801af30:	b2da      	uxtb	r2, r3
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	719a      	strb	r2, [r3, #6]
 801af36:	f04f 0301 	mov.w	r3, #1
 801af3a:	e05c      	b.n	801aff6 <f_write+0x36a>
			}
#endif
			fp->dsect = sect;
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	693a      	ldr	r2, [r7, #16]
 801af40:	619a      	str	r2, [r3, #24]
			fp->csect++;							/* Next sector address in the cluster */
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	79db      	ldrb	r3, [r3, #7]
 801af46:	f103 0301 	add.w	r3, r3, #1
 801af4a:	b2da      	uxtb	r2, r3
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	71da      	strb	r2, [r3, #7]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	689b      	ldr	r3, [r3, #8]
 801af54:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801af58:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801af5c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801af60:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 801af62:	6a3a      	ldr	r2, [r7, #32]
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	429a      	cmp	r2, r3
 801af68:	d901      	bls.n	801af6e <f_write+0x2e2>
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	689b      	ldr	r3, [r3, #8]
 801af78:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801af7c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801af80:	18d2      	adds	r2, r2, r3
 801af82:	6a3b      	ldr	r3, [r7, #32]
 801af84:	4610      	mov	r0, r2
 801af86:	69b9      	ldr	r1, [r7, #24]
 801af88:	461a      	mov	r2, r3
 801af8a:	f7fd fde3 	bl	8018b54 <mem_cpy>
		fp->flag |= FA__DIRTY;
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	799b      	ldrb	r3, [r3, #6]
 801af92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af96:	b2da      	uxtb	r2, r3
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	719a      	strb	r2, [r3, #6]
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 801af9c:	69ba      	ldr	r2, [r7, #24]
 801af9e:	6a3b      	ldr	r3, [r7, #32]
 801afa0:	18d3      	adds	r3, r2, r3
 801afa2:	61bb      	str	r3, [r7, #24]
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	689a      	ldr	r2, [r3, #8]
 801afa8:	6a3b      	ldr	r3, [r7, #32]
 801afaa:	18d2      	adds	r2, r2, r3
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	609a      	str	r2, [r3, #8]
 801afb0:	683b      	ldr	r3, [r7, #0]
 801afb2:	681a      	ldr	r2, [r3, #0]
 801afb4:	6a3b      	ldr	r3, [r7, #32]
 801afb6:	18d2      	adds	r2, r2, r3
 801afb8:	683b      	ldr	r3, [r7, #0]
 801afba:	601a      	str	r2, [r3, #0]
 801afbc:	687a      	ldr	r2, [r7, #4]
 801afbe:	6a3b      	ldr	r3, [r7, #32]
 801afc0:	1ad3      	subs	r3, r2, r3
 801afc2:	607b      	str	r3, [r7, #4]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	f47f ae9b 	bne.w	801ad02 <f_write+0x76>
 801afcc:	e000      	b.n	801afd0 <f_write+0x344>
					if (clst == 0)					/* When there is no cluster chain, */
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
 801afce:	bf00      	nop
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	689a      	ldr	r2, [r3, #8]
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	68db      	ldr	r3, [r3, #12]
 801afd8:	429a      	cmp	r2, r3
 801afda:	d903      	bls.n	801afe4 <f_write+0x358>
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	689a      	ldr	r2, [r3, #8]
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	799b      	ldrb	r3, [r3, #6]
 801afe8:	f043 0320 	orr.w	r3, r3, #32
 801afec:	b2da      	uxtb	r2, r3
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 801aff2:	f04f 0300 	mov.w	r3, #0
}
 801aff6:	4618      	mov	r0, r3
 801aff8:	f107 0728 	add.w	r7, r7, #40	; 0x28
 801affc:	46bd      	mov	sp, r7
 801affe:	bd80      	pop	{r7, pc}

0801b000 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 801b000:	b580      	push	{r7, lr}
 801b002:	b086      	sub	sp, #24
 801b004:	af00      	add	r7, sp, #0
 801b006:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	681a      	ldr	r2, [r3, #0]
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	889b      	ldrh	r3, [r3, #4]
 801b010:	4610      	mov	r0, r2
 801b012:	4619      	mov	r1, r3
 801b014:	f7ff faa2 	bl	801a55c <validate>
 801b018:	4603      	mov	r3, r0
 801b01a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b01c:	7dfb      	ldrb	r3, [r7, #23]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	f040 80c8 	bne.w	801b1b4 <f_sync+0x1b4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	799b      	ldrb	r3, [r3, #6]
 801b028:	f003 0320 	and.w	r3, r3, #32
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	f000 80c1 	beq.w	801b1b4 <f_sync+0x1b4>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	799b      	ldrb	r3, [r3, #6]
 801b036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d01b      	beq.n	801b076 <f_sync+0x76>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	7859      	ldrb	r1, [r3, #1]
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	699b      	ldr	r3, [r3, #24]
 801b04e:	4608      	mov	r0, r1
 801b050:	4611      	mov	r1, r2
 801b052:	461a      	mov	r2, r3
 801b054:	f04f 0301 	mov.w	r3, #1
 801b058:	f7ea fa3e 	bl	80054d8 <disk_write>
 801b05c:	4603      	mov	r3, r0
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d002      	beq.n	801b068 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 801b062:	f04f 0301 	mov.w	r3, #1
 801b066:	e0a6      	b.n	801b1b6 <f_sync+0x1b6>
				fp->flag &= ~FA__DIRTY;
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	799b      	ldrb	r3, [r3, #6]
 801b06c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b070:	b2da      	uxtb	r2, r3
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	681a      	ldr	r2, [r3, #0]
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	69db      	ldr	r3, [r3, #28]
 801b07e:	4610      	mov	r0, r2
 801b080:	4619      	mov	r1, r3
 801b082:	f7fd fe05 	bl	8018c90 <move_window>
 801b086:	4603      	mov	r3, r0
 801b088:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 801b08a:	7dfb      	ldrb	r3, [r7, #23]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	f040 8091 	bne.w	801b1b4 <f_sync+0x1b4>
				dir = fp->dir_ptr;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	6a1b      	ldr	r3, [r3, #32]
 801b096:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 801b098:	693b      	ldr	r3, [r7, #16]
 801b09a:	f103 030b 	add.w	r3, r3, #11
 801b09e:	693a      	ldr	r2, [r7, #16]
 801b0a0:	f102 020b 	add.w	r2, r2, #11
 801b0a4:	7812      	ldrb	r2, [r2, #0]
 801b0a6:	f042 0220 	orr.w	r2, r2, #32
 801b0aa:	b2d2      	uxtb	r2, r2
 801b0ac:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 801b0ae:	693b      	ldr	r3, [r7, #16]
 801b0b0:	f103 031c 	add.w	r3, r3, #28
 801b0b4:	687a      	ldr	r2, [r7, #4]
 801b0b6:	68d2      	ldr	r2, [r2, #12]
 801b0b8:	b2d2      	uxtb	r2, r2
 801b0ba:	701a      	strb	r2, [r3, #0]
 801b0bc:	693b      	ldr	r3, [r7, #16]
 801b0be:	f103 031d 	add.w	r3, r3, #29
 801b0c2:	687a      	ldr	r2, [r7, #4]
 801b0c4:	68d2      	ldr	r2, [r2, #12]
 801b0c6:	b292      	uxth	r2, r2
 801b0c8:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801b0cc:	b292      	uxth	r2, r2
 801b0ce:	b2d2      	uxtb	r2, r2
 801b0d0:	701a      	strb	r2, [r3, #0]
 801b0d2:	693b      	ldr	r3, [r7, #16]
 801b0d4:	f103 031e 	add.w	r3, r3, #30
 801b0d8:	687a      	ldr	r2, [r7, #4]
 801b0da:	68d2      	ldr	r2, [r2, #12]
 801b0dc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801b0e0:	b2d2      	uxtb	r2, r2
 801b0e2:	701a      	strb	r2, [r3, #0]
 801b0e4:	693b      	ldr	r3, [r7, #16]
 801b0e6:	f103 031f 	add.w	r3, r3, #31
 801b0ea:	687a      	ldr	r2, [r7, #4]
 801b0ec:	68d2      	ldr	r2, [r2, #12]
 801b0ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801b0f2:	b2d2      	uxtb	r2, r2
 801b0f4:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
 801b0f6:	693b      	ldr	r3, [r7, #16]
 801b0f8:	f103 031a 	add.w	r3, r3, #26
 801b0fc:	687a      	ldr	r2, [r7, #4]
 801b0fe:	6912      	ldr	r2, [r2, #16]
 801b100:	b2d2      	uxtb	r2, r2
 801b102:	701a      	strb	r2, [r3, #0]
 801b104:	693b      	ldr	r3, [r7, #16]
 801b106:	f103 031b 	add.w	r3, r3, #27
 801b10a:	687a      	ldr	r2, [r7, #4]
 801b10c:	6912      	ldr	r2, [r2, #16]
 801b10e:	b292      	uxth	r2, r2
 801b110:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801b114:	b292      	uxth	r2, r2
 801b116:	b2d2      	uxtb	r2, r2
 801b118:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
 801b11a:	693b      	ldr	r3, [r7, #16]
 801b11c:	f103 0314 	add.w	r3, r3, #20
 801b120:	687a      	ldr	r2, [r7, #4]
 801b122:	6912      	ldr	r2, [r2, #16]
 801b124:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801b128:	b2d2      	uxtb	r2, r2
 801b12a:	701a      	strb	r2, [r3, #0]
 801b12c:	693b      	ldr	r3, [r7, #16]
 801b12e:	f103 0315 	add.w	r3, r3, #21
 801b132:	687a      	ldr	r2, [r7, #4]
 801b134:	6912      	ldr	r2, [r2, #16]
 801b136:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801b13a:	b292      	uxth	r2, r2
 801b13c:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801b140:	b292      	uxth	r2, r2
 801b142:	b2d2      	uxtb	r2, r2
 801b144:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();			/* Updated time */
 801b146:	f002 fe07 	bl	801dd58 <get_fattime>
 801b14a:	4603      	mov	r3, r0
 801b14c:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
 801b14e:	693b      	ldr	r3, [r7, #16]
 801b150:	f103 0316 	add.w	r3, r3, #22
 801b154:	68fa      	ldr	r2, [r7, #12]
 801b156:	b2d2      	uxtb	r2, r2
 801b158:	701a      	strb	r2, [r3, #0]
 801b15a:	693b      	ldr	r3, [r7, #16]
 801b15c:	f103 0317 	add.w	r3, r3, #23
 801b160:	68fa      	ldr	r2, [r7, #12]
 801b162:	b292      	uxth	r2, r2
 801b164:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801b168:	b292      	uxth	r2, r2
 801b16a:	b2d2      	uxtb	r2, r2
 801b16c:	701a      	strb	r2, [r3, #0]
 801b16e:	693b      	ldr	r3, [r7, #16]
 801b170:	f103 0318 	add.w	r3, r3, #24
 801b174:	68fa      	ldr	r2, [r7, #12]
 801b176:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801b17a:	b2d2      	uxtb	r2, r2
 801b17c:	701a      	strb	r2, [r3, #0]
 801b17e:	693b      	ldr	r3, [r7, #16]
 801b180:	f103 0319 	add.w	r3, r3, #25
 801b184:	68fa      	ldr	r2, [r7, #12]
 801b186:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801b18a:	b2d2      	uxtb	r2, r2
 801b18c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	799b      	ldrb	r3, [r3, #6]
 801b192:	f023 0320 	bic.w	r3, r3, #32
 801b196:	b2da      	uxtb	r2, r3
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	f04f 0201 	mov.w	r2, #1
 801b1a4:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f7fd fdda 	bl	8018d64 <sync>
 801b1b0:	4603      	mov	r3, r0
 801b1b2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 801b1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	f107 0718 	add.w	r7, r7, #24
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bd80      	pop	{r7, pc}

0801b1c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b084      	sub	sp, #16
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
 801b1c8:	6878      	ldr	r0, [r7, #4]
 801b1ca:	f7ff ff19 	bl	801b000 <f_sync>
 801b1ce:	4603      	mov	r3, r0
 801b1d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) fp->fs = NULL;
 801b1d2:	7bfb      	ldrb	r3, [r7, #15]
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d103      	bne.n	801b1e0 <f_close+0x20>
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	f04f 0200 	mov.w	r2, #0
 801b1de:	601a      	str	r2, [r3, #0]
	return res;
 801b1e0:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	f107 0710 	add.w	r7, r7, #16
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}

0801b1ec <f_chdrive>:
#if _FS_RPATH

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
 801b1ec:	b480      	push	{r7}
 801b1ee:	b083      	sub	sp, #12
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	4603      	mov	r3, r0
 801b1f4:	71fb      	strb	r3, [r7, #7]
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 801b1f6:	79fb      	ldrb	r3, [r7, #7]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d002      	beq.n	801b202 <f_chdrive+0x16>
 801b1fc:	f04f 030b 	mov.w	r3, #11
 801b200:	e007      	b.n	801b212 <f_chdrive+0x26>

	Drive = drv;
 801b202:	f241 03fe 	movw	r3, #4350	; 0x10fe
 801b206:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801b20a:	79fa      	ldrb	r2, [r7, #7]
 801b20c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801b20e:	f04f 0300 	mov.w	r3, #0
}
 801b212:	4618      	mov	r0, r3
 801b214:	f107 070c 	add.w	r7, r7, #12
 801b218:	46bd      	mov	sp, r7
 801b21a:	bc80      	pop	{r7}
 801b21c:	4770      	bx	lr
 801b21e:	bf00      	nop

0801b220 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
 801b220:	b580      	push	{r7, lr}
 801b222:	b08e      	sub	sp, #56	; 0x38
 801b224:	af00      	add	r7, sp, #0
 801b226:	6078      	str	r0, [r7, #4]
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 0);
 801b228:	f107 0204 	add.w	r2, r7, #4
 801b22c:	f107 0314 	add.w	r3, r7, #20
 801b230:	4610      	mov	r0, r2
 801b232:	4619      	mov	r1, r3
 801b234:	f04f 0200 	mov.w	r2, #0
 801b238:	f7fe ff00 	bl	801a03c <auto_mount>
 801b23c:	4603      	mov	r3, r0
 801b23e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 801b242:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b246:	2b00      	cmp	r3, #0
 801b248:	d150      	bne.n	801b2ec <f_chdir+0xcc>
		INITBUF(dj, sfn, lfn);
 801b24a:	f107 0308 	add.w	r3, r7, #8
 801b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
		res = follow_path(&dj, path);		/* Follow the file path */
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	f107 0214 	add.w	r2, r7, #20
 801b256:	4610      	mov	r0, r2
 801b258:	4619      	mov	r1, r3
 801b25a:	f7fe fe03 	bl	8019e64 <follow_path>
 801b25e:	4603      	mov	r3, r0
 801b260:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {					/* Follow completed */
 801b264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d137      	bne.n	801b2dc <f_chdir+0xbc>
			dir = dj.dir;					/* Pointer to the entry */
 801b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b26e:	633b      	str	r3, [r7, #48]	; 0x30
			if (!dir) {
 801b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b272:	2b00      	cmp	r3, #0
 801b274:	d104      	bne.n	801b280 <f_chdir+0x60>
				dj.fs->cdir = 0;			/* No entry (root dir) */
 801b276:	697b      	ldr	r3, [r7, #20]
 801b278:	f04f 0200 	mov.w	r2, #0
 801b27c:	619a      	str	r2, [r3, #24]
 801b27e:	e02d      	b.n	801b2dc <f_chdir+0xbc>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
 801b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b282:	f103 030b 	add.w	r3, r3, #11
 801b286:	781b      	ldrb	r3, [r3, #0]
 801b288:	f003 0310 	and.w	r3, r3, #16
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d021      	beq.n	801b2d4 <f_chdir+0xb4>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801b290:	697b      	ldr	r3, [r7, #20]
 801b292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b294:	f102 0215 	add.w	r2, r2, #21
 801b298:	7812      	ldrb	r2, [r2, #0]
 801b29a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 801b29e:	b291      	uxth	r1, r2
 801b2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b2a2:	f102 0214 	add.w	r2, r2, #20
 801b2a6:	7812      	ldrb	r2, [r2, #0]
 801b2a8:	430a      	orrs	r2, r1
 801b2aa:	b292      	uxth	r2, r2
 801b2ac:	b292      	uxth	r2, r2
 801b2ae:	ea4f 4102 	mov.w	r1, r2, lsl #16
 801b2b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b2b4:	f102 021b 	add.w	r2, r2, #27
 801b2b8:	7812      	ldrb	r2, [r2, #0]
 801b2ba:	ea4f 2202 	mov.w	r2, r2, lsl #8
 801b2be:	b290      	uxth	r0, r2
 801b2c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b2c2:	f102 021a 	add.w	r2, r2, #26
 801b2c6:	7812      	ldrb	r2, [r2, #0]
 801b2c8:	4302      	orrs	r2, r0
 801b2ca:	b292      	uxth	r2, r2
 801b2cc:	b292      	uxth	r2, r2
 801b2ce:	430a      	orrs	r2, r1
 801b2d0:	619a      	str	r2, [r3, #24]
 801b2d2:	e003      	b.n	801b2dc <f_chdir+0xbc>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
 801b2d4:	f04f 0305 	mov.w	r3, #5
 801b2d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801b2dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b2e0:	2b04      	cmp	r3, #4
 801b2e2:	d103      	bne.n	801b2ec <f_chdir+0xcc>
 801b2e4:	f04f 0305 	mov.w	r3, #5
 801b2e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	LEAVE_FF(dj.fs, res);
 801b2ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	f107 0738 	add.w	r7, r7, #56	; 0x38
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bd80      	pop	{r7, pc}
 801b2fa:	bf00      	nop

0801b2fc <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b088      	sub	sp, #32
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
 801b304:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	681a      	ldr	r2, [r3, #0]
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	889b      	ldrh	r3, [r3, #4]
 801b30e:	4610      	mov	r0, r2
 801b310:	4619      	mov	r1, r3
 801b312:	f7ff f923 	bl	801a55c <validate>
 801b316:	4603      	mov	r3, r0
 801b318:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801b31a:	7dfb      	ldrb	r3, [r7, #23]
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d001      	beq.n	801b324 <f_lseek+0x28>
 801b320:	7dfb      	ldrb	r3, [r7, #23]
 801b322:	e16c      	b.n	801b5fe <f_lseek+0x302>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	799b      	ldrb	r3, [r3, #6]
 801b328:	b2db      	uxtb	r3, r3
 801b32a:	b25b      	sxtb	r3, r3
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	da02      	bge.n	801b336 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 801b330:	f04f 0302 	mov.w	r3, #2
 801b334:	e163      	b.n	801b5fe <f_lseek+0x302>
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	68da      	ldr	r2, [r3, #12]
 801b33a:	683b      	ldr	r3, [r7, #0]
 801b33c:	429a      	cmp	r2, r3
 801b33e:	d208      	bcs.n	801b352 <f_lseek+0x56>
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	799b      	ldrb	r3, [r3, #6]
 801b344:	f003 0302 	and.w	r3, r3, #2
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d102      	bne.n	801b352 <f_lseek+0x56>
#endif
		) ofs = fp->fsize;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	68db      	ldr	r3, [r3, #12]
 801b350:	603b      	str	r3, [r7, #0]

	ifptr = fp->fptr;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	689b      	ldr	r3, [r3, #8]
 801b356:	613b      	str	r3, [r7, #16]
	fp->fptr = nsect = 0; fp->csect = 255;
 801b358:	f04f 0300 	mov.w	r3, #0
 801b35c:	61bb      	str	r3, [r7, #24]
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	69ba      	ldr	r2, [r7, #24]
 801b362:	609a      	str	r2, [r3, #8]
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801b36a:	71da      	strb	r2, [r3, #7]
	if (ofs > 0) {
 801b36c:	683b      	ldr	r3, [r7, #0]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	f000 80e0 	beq.w	801b534 <f_lseek+0x238>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	789b      	ldrb	r3, [r3, #2]
 801b37a:	ea4f 2343 	mov.w	r3, r3, lsl #9
 801b37e:	60fb      	str	r3, [r7, #12]
		if (ifptr > 0 &&
 801b380:	693b      	ldr	r3, [r7, #16]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d01f      	beq.n	801b3c6 <f_lseek+0xca>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801b386:	683b      	ldr	r3, [r7, #0]
 801b388:	f103 32ff 	add.w	r2, r3, #4294967295
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	fbb2 f2f3 	udiv	r2, r2, r3
 801b392:	693b      	ldr	r3, [r7, #16]
 801b394:	f103 31ff 	add.w	r1, r3, #4294967295
 801b398:	68fb      	ldr	r3, [r7, #12]
 801b39a:	fbb1 f3f3 	udiv	r3, r1, r3

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
	if (ofs > 0) {
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
		if (ifptr > 0 &&
 801b39e:	429a      	cmp	r2, r3
 801b3a0:	d311      	bcc.n	801b3c6 <f_lseek+0xca>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 801b3a2:	693b      	ldr	r3, [r7, #16]
 801b3a4:	f103 32ff 	add.w	r2, r3, #4294967295
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	f1c3 0300 	rsb	r3, r3, #0
 801b3ae:	401a      	ands	r2, r3
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	609a      	str	r2, [r3, #8]
			ofs -= fp->fptr;
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	689b      	ldr	r3, [r3, #8]
 801b3b8:	683a      	ldr	r2, [r7, #0]
 801b3ba:	1ad3      	subs	r3, r2, r3
 801b3bc:	603b      	str	r3, [r7, #0]
			clst = fp->curr_clust;
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	695b      	ldr	r3, [r3, #20]
 801b3c2:	61fb      	str	r3, [r7, #28]
 801b3c4:	e02f      	b.n	801b426 <f_lseek+0x12a>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	691b      	ldr	r3, [r3, #16]
 801b3ca:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
 801b3cc:	69fb      	ldr	r3, [r7, #28]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d126      	bne.n	801b420 <f_lseek+0x124>
				clst = create_chain(fp->fs, 0);
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	4618      	mov	r0, r3
 801b3d8:	f04f 0100 	mov.w	r1, #0
 801b3dc:	f7fe f80e 	bl	80193fc <create_chain>
 801b3e0:	4603      	mov	r3, r0
 801b3e2:	61fb      	str	r3, [r7, #28]
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801b3e4:	69fb      	ldr	r3, [r7, #28]
 801b3e6:	2b01      	cmp	r3, #1
 801b3e8:	d109      	bne.n	801b3fe <f_lseek+0x102>
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	799b      	ldrb	r3, [r3, #6]
 801b3ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b3f2:	b2da      	uxtb	r2, r3
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	719a      	strb	r2, [r3, #6]
 801b3f8:	f04f 0302 	mov.w	r3, #2
 801b3fc:	e0ff      	b.n	801b5fe <f_lseek+0x302>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801b3fe:	69fb      	ldr	r3, [r7, #28]
 801b400:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b404:	d109      	bne.n	801b41a <f_lseek+0x11e>
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	799b      	ldrb	r3, [r3, #6]
 801b40a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b40e:	b2da      	uxtb	r2, r3
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	719a      	strb	r2, [r3, #6]
 801b414:	f04f 0301 	mov.w	r3, #1
 801b418:	e0f1      	b.n	801b5fe <f_lseek+0x302>
				fp->org_clust = clst;
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	69fa      	ldr	r2, [r7, #28]
 801b41e:	611a      	str	r2, [r3, #16]
			}
#endif
			fp->curr_clust = clst;
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	69fa      	ldr	r2, [r7, #28]
 801b424:	615a      	str	r2, [r3, #20]
		}
		if (clst != 0) {
 801b426:	69fb      	ldr	r3, [r7, #28]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	f000 8083 	beq.w	801b534 <f_lseek+0x238>
			while (ofs > bcs) {						/* Cluster following loop */
 801b42e:	e049      	b.n	801b4c4 <f_lseek+0x1c8>
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	799b      	ldrb	r3, [r3, #6]
 801b434:	f003 0302 	and.w	r3, r3, #2
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d00d      	beq.n	801b458 <f_lseek+0x15c>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	4618      	mov	r0, r3
 801b442:	69f9      	ldr	r1, [r7, #28]
 801b444:	f7fd ffda 	bl	80193fc <create_chain>
 801b448:	4603      	mov	r3, r0
 801b44a:	61fb      	str	r3, [r7, #28]
					if (clst == 0) {				/* When disk gets full, clip file size */
 801b44c:	69fb      	ldr	r3, [r7, #28]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d10a      	bne.n	801b468 <f_lseek+0x16c>
						ofs = bcs; break;
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	603b      	str	r3, [r7, #0]
 801b456:	e039      	b.n	801b4cc <f_lseek+0x1d0>
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	4618      	mov	r0, r3
 801b45e:	69f9      	ldr	r1, [r7, #28]
 801b460:	f7fd fd40 	bl	8018ee4 <get_fat>
 801b464:	4603      	mov	r3, r0
 801b466:	61fb      	str	r3, [r7, #28]
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801b468:	69fb      	ldr	r3, [r7, #28]
 801b46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b46e:	d109      	bne.n	801b484 <f_lseek+0x188>
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	799b      	ldrb	r3, [r3, #6]
 801b474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b478:	b2da      	uxtb	r2, r3
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	719a      	strb	r2, [r3, #6]
 801b47e:	f04f 0301 	mov.w	r3, #1
 801b482:	e0bc      	b.n	801b5fe <f_lseek+0x302>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
 801b484:	69fb      	ldr	r3, [r7, #28]
 801b486:	2b01      	cmp	r3, #1
 801b488:	d905      	bls.n	801b496 <f_lseek+0x19a>
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	6a1a      	ldr	r2, [r3, #32]
 801b490:	69fb      	ldr	r3, [r7, #28]
 801b492:	429a      	cmp	r2, r3
 801b494:	d809      	bhi.n	801b4aa <f_lseek+0x1ae>
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	799b      	ldrb	r3, [r3, #6]
 801b49a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b49e:	b2da      	uxtb	r2, r3
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	719a      	strb	r2, [r3, #6]
 801b4a4:	f04f 0302 	mov.w	r3, #2
 801b4a8:	e0a9      	b.n	801b5fe <f_lseek+0x302>
				fp->curr_clust = clst;
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	69fa      	ldr	r2, [r7, #28]
 801b4ae:	615a      	str	r2, [r3, #20]
				fp->fptr += bcs;
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	689a      	ldr	r2, [r3, #8]
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	18d2      	adds	r2, r2, r3
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	609a      	str	r2, [r3, #8]
				ofs -= bcs;
 801b4bc:	683a      	ldr	r2, [r7, #0]
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	1ad3      	subs	r3, r2, r3
 801b4c2:	603b      	str	r3, [r7, #0]
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
 801b4c4:	683a      	ldr	r2, [r7, #0]
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	429a      	cmp	r2, r3
 801b4ca:	d8b1      	bhi.n	801b430 <f_lseek+0x134>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	689a      	ldr	r2, [r3, #8]
 801b4d0:	683b      	ldr	r3, [r7, #0]
 801b4d2:	18d2      	adds	r2, r2, r3
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	609a      	str	r2, [r3, #8]
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 801b4d8:	683b      	ldr	r3, [r7, #0]
 801b4da:	ea4f 2353 	mov.w	r3, r3, lsr #9
 801b4de:	b2da      	uxtb	r2, r3
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	71da      	strb	r2, [r3, #7]
			if (ofs % SS(fp->fs)) {
 801b4e4:	683b      	ldr	r3, [r7, #0]
 801b4e6:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801b4ea:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d020      	beq.n	801b534 <f_lseek+0x238>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	69f9      	ldr	r1, [r7, #28]
 801b4fa:	f7fe f80f 	bl	801951c <clust2sect>
 801b4fe:	4603      	mov	r3, r0
 801b500:	61bb      	str	r3, [r7, #24]
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 801b502:	69bb      	ldr	r3, [r7, #24]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d109      	bne.n	801b51c <f_lseek+0x220>
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	799b      	ldrb	r3, [r3, #6]
 801b50c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b510:	b2da      	uxtb	r2, r3
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	719a      	strb	r2, [r3, #6]
 801b516:	f04f 0302 	mov.w	r3, #2
 801b51a:	e070      	b.n	801b5fe <f_lseek+0x302>
				nsect += fp->csect;
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	79db      	ldrb	r3, [r3, #7]
 801b520:	69ba      	ldr	r2, [r7, #24]
 801b522:	18d3      	adds	r3, r2, r3
 801b524:	61bb      	str	r3, [r7, #24]
				fp->csect++;
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	79db      	ldrb	r3, [r3, #7]
 801b52a:	f103 0301 	add.w	r3, r3, #1
 801b52e:	b2da      	uxtb	r2, r3
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	71da      	strb	r2, [r3, #7]
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	689b      	ldr	r3, [r3, #8]
 801b538:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801b53c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801b540:	2b00      	cmp	r3, #0
 801b542:	d04a      	beq.n	801b5da <f_lseek+0x2de>
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	699a      	ldr	r2, [r3, #24]
 801b548:	69bb      	ldr	r3, [r7, #24]
 801b54a:	429a      	cmp	r2, r3
 801b54c:	d045      	beq.n	801b5da <f_lseek+0x2de>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	799b      	ldrb	r3, [r3, #6]
 801b552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b556:	2b00      	cmp	r3, #0
 801b558:	d022      	beq.n	801b5a0 <f_lseek+0x2a4>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	7859      	ldrb	r1, [r3, #1]
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	699b      	ldr	r3, [r3, #24]
 801b56a:	4608      	mov	r0, r1
 801b56c:	4611      	mov	r1, r2
 801b56e:	461a      	mov	r2, r3
 801b570:	f04f 0301 	mov.w	r3, #1
 801b574:	f7e9 ffb0 	bl	80054d8 <disk_write>
 801b578:	4603      	mov	r3, r0
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d009      	beq.n	801b592 <f_lseek+0x296>
				ABORT(fp->fs, FR_DISK_ERR);
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	799b      	ldrb	r3, [r3, #6]
 801b582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b586:	b2da      	uxtb	r2, r3
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	719a      	strb	r2, [r3, #6]
 801b58c:	f04f 0301 	mov.w	r3, #1
 801b590:	e035      	b.n	801b5fe <f_lseek+0x302>
			fp->flag &= ~FA__DIRTY;
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	799b      	ldrb	r3, [r3, #6]
 801b596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b59a:	b2da      	uxtb	r2, r3
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	719a      	strb	r2, [r3, #6]
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	785a      	ldrb	r2, [r3, #1]
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801b5ac:	4610      	mov	r0, r2
 801b5ae:	4619      	mov	r1, r3
 801b5b0:	69ba      	ldr	r2, [r7, #24]
 801b5b2:	f04f 0301 	mov.w	r3, #1
 801b5b6:	f7e9 ff31 	bl	800541c <disk_read>
 801b5ba:	4603      	mov	r3, r0
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d009      	beq.n	801b5d4 <f_lseek+0x2d8>
			ABORT(fp->fs, FR_DISK_ERR);
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	799b      	ldrb	r3, [r3, #6]
 801b5c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b5c8:	b2da      	uxtb	r2, r3
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	719a      	strb	r2, [r3, #6]
 801b5ce:	f04f 0301 	mov.w	r3, #1
 801b5d2:	e014      	b.n	801b5fe <f_lseek+0x302>
#endif
		fp->dsect = nsect;
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	69ba      	ldr	r2, [r7, #24]
 801b5d8:	619a      	str	r2, [r3, #24]
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	689a      	ldr	r2, [r3, #8]
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	68db      	ldr	r3, [r3, #12]
 801b5e2:	429a      	cmp	r2, r3
 801b5e4:	d90a      	bls.n	801b5fc <f_lseek+0x300>
		fp->fsize = fp->fptr;
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	689a      	ldr	r2, [r3, #8]
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	60da      	str	r2, [r3, #12]
		fp->flag |= FA__WRITTEN;
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	799b      	ldrb	r3, [r3, #6]
 801b5f2:	f043 0320 	orr.w	r3, r3, #32
 801b5f6:	b2da      	uxtb	r2, r3
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	719a      	strb	r2, [r3, #6]
	}
#endif

	LEAVE_FF(fp->fs, res);
 801b5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5fe:	4618      	mov	r0, r3
 801b600:	f107 0720 	add.w	r7, r7, #32
 801b604:	46bd      	mov	sp, r7
 801b606:	bd80      	pop	{r7, pc}

0801b608 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
 801b608:	b580      	push	{r7, lr}
 801b60a:	b088      	sub	sp, #32
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	6078      	str	r0, [r7, #4]
 801b610:	6039      	str	r1, [r7, #0]
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	463a      	mov	r2, r7
 801b616:	4610      	mov	r0, r2
 801b618:	4619      	mov	r1, r3
 801b61a:	f04f 0200 	mov.w	r2, #0
 801b61e:	f7fe fd0d 	bl	801a03c <auto_mount>
 801b622:	4603      	mov	r3, r0
 801b624:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 801b626:	7ffb      	ldrb	r3, [r7, #31]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d155      	bne.n	801b6d8 <f_opendir+0xd0>
		INITBUF((*dj), sfn, lfn);
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	f107 020c 	add.w	r2, r7, #12
 801b632:	619a      	str	r2, [r3, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
 801b634:	683b      	ldr	r3, [r7, #0]
 801b636:	6878      	ldr	r0, [r7, #4]
 801b638:	4619      	mov	r1, r3
 801b63a:	f7fe fc13 	bl	8019e64 <follow_path>
 801b63e:	4603      	mov	r3, r0
 801b640:	77fb      	strb	r3, [r7, #31]
		if (res == FR_OK) {						/* Follow completed */
 801b642:	7ffb      	ldrb	r3, [r7, #31]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d141      	bne.n	801b6cc <f_opendir+0xc4>
			dir = dj->dir;
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	695b      	ldr	r3, [r3, #20]
 801b64c:	61bb      	str	r3, [r7, #24]
			if (dir) {							/* It is not the root dir */
 801b64e:	69bb      	ldr	r3, [r7, #24]
 801b650:	2b00      	cmp	r3, #0
 801b652:	d02c      	beq.n	801b6ae <f_opendir+0xa6>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 801b654:	69bb      	ldr	r3, [r7, #24]
 801b656:	f103 030b 	add.w	r3, r3, #11
 801b65a:	781b      	ldrb	r3, [r3, #0]
 801b65c:	f003 0310 	and.w	r3, r3, #16
 801b660:	2b00      	cmp	r3, #0
 801b662:	d021      	beq.n	801b6a8 <f_opendir+0xa0>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801b664:	69bb      	ldr	r3, [r7, #24]
 801b666:	f103 0315 	add.w	r3, r3, #21
 801b66a:	781b      	ldrb	r3, [r3, #0]
 801b66c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b670:	b29a      	uxth	r2, r3
 801b672:	69bb      	ldr	r3, [r7, #24]
 801b674:	f103 0314 	add.w	r3, r3, #20
 801b678:	781b      	ldrb	r3, [r3, #0]
 801b67a:	4313      	orrs	r3, r2
 801b67c:	b29b      	uxth	r3, r3
 801b67e:	b29b      	uxth	r3, r3
 801b680:	ea4f 4203 	mov.w	r2, r3, lsl #16
 801b684:	69bb      	ldr	r3, [r7, #24]
 801b686:	f103 031b 	add.w	r3, r3, #27
 801b68a:	781b      	ldrb	r3, [r3, #0]
 801b68c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b690:	b299      	uxth	r1, r3
 801b692:	69bb      	ldr	r3, [r7, #24]
 801b694:	f103 031a 	add.w	r3, r3, #26
 801b698:	781b      	ldrb	r3, [r3, #0]
 801b69a:	430b      	orrs	r3, r1
 801b69c:	b29b      	uxth	r3, r3
 801b69e:	b29b      	uxth	r3, r3
 801b6a0:	431a      	orrs	r2, r3
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	609a      	str	r2, [r3, #8]
 801b6a6:	e002      	b.n	801b6ae <f_opendir+0xa6>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
 801b6a8:	f04f 0305 	mov.w	r3, #5
 801b6ac:	77fb      	strb	r3, [r7, #31]
				}
			}
			if (res == FR_OK) {
 801b6ae:	7ffb      	ldrb	r3, [r7, #31]
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d10b      	bne.n	801b6cc <f_opendir+0xc4>
				dj->id = dj->fs->id;
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	88da      	ldrh	r2, [r3, #6]
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	809a      	strh	r2, [r3, #4]
				res = dir_seek(dj, 0);			/* Rewind dir */
 801b6be:	6878      	ldr	r0, [r7, #4]
 801b6c0:	f04f 0100 	mov.w	r1, #0
 801b6c4:	f7fd ff4c 	bl	8019560 <dir_seek>
 801b6c8:	4603      	mov	r3, r0
 801b6ca:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801b6cc:	7ffb      	ldrb	r3, [r7, #31]
 801b6ce:	2b04      	cmp	r3, #4
 801b6d0:	d102      	bne.n	801b6d8 <f_opendir+0xd0>
 801b6d2:	f04f 0305 	mov.w	r3, #5
 801b6d6:	77fb      	strb	r3, [r7, #31]
	}

	LEAVE_FF(dj->fs, res);
 801b6d8:	7ffb      	ldrb	r3, [r7, #31]
}
 801b6da:	4618      	mov	r0, r3
 801b6dc:	f107 0720 	add.w	r7, r7, #32
 801b6e0:	46bd      	mov	sp, r7
 801b6e2:	bd80      	pop	{r7, pc}

0801b6e4 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 801b6e4:	b580      	push	{r7, lr}
 801b6e6:	b086      	sub	sp, #24
 801b6e8:	af00      	add	r7, sp, #0
 801b6ea:	6078      	str	r0, [r7, #4]
 801b6ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	681a      	ldr	r2, [r3, #0]
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	889b      	ldrh	r3, [r3, #4]
 801b6f6:	4610      	mov	r0, r2
 801b6f8:	4619      	mov	r1, r3
 801b6fa:	f7fe ff2f 	bl	801a55c <validate>
 801b6fe:	4603      	mov	r3, r0
 801b700:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b702:	7dfb      	ldrb	r3, [r7, #23]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d135      	bne.n	801b774 <f_readdir+0x90>
		INITBUF((*dj), sfn, lfn);
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	f107 0208 	add.w	r2, r7, #8
 801b70e:	619a      	str	r2, [r3, #24]
		if (!fno) {
 801b710:	683b      	ldr	r3, [r7, #0]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d107      	bne.n	801b726 <f_readdir+0x42>
			res = dir_seek(dj, 0);
 801b716:	6878      	ldr	r0, [r7, #4]
 801b718:	f04f 0100 	mov.w	r1, #0
 801b71c:	f7fd ff20 	bl	8019560 <dir_seek>
 801b720:	4603      	mov	r3, r0
 801b722:	75fb      	strb	r3, [r7, #23]
 801b724:	e026      	b.n	801b774 <f_readdir+0x90>
		} else {
			res = dir_read(dj);
 801b726:	6878      	ldr	r0, [r7, #4]
 801b728:	f7fe f8ea 	bl	8019900 <dir_read>
 801b72c:	4603      	mov	r3, r0
 801b72e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {
 801b730:	7dfb      	ldrb	r3, [r7, #23]
 801b732:	2b04      	cmp	r3, #4
 801b734:	d106      	bne.n	801b744 <f_readdir+0x60>
				dj->sect = 0;
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	f04f 0200 	mov.w	r2, #0
 801b73c:	611a      	str	r2, [r3, #16]
				res = FR_OK;
 801b73e:	f04f 0300 	mov.w	r3, #0
 801b742:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 801b744:	7dfb      	ldrb	r3, [r7, #23]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d114      	bne.n	801b774 <f_readdir+0x90>
				get_fileinfo(dj, fno);		/* Get the object information */
 801b74a:	6878      	ldr	r0, [r7, #4]
 801b74c:	6839      	ldr	r1, [r7, #0]
 801b74e:	f7fe fac3 	bl	8019cd8 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
 801b752:	6878      	ldr	r0, [r7, #4]
 801b754:	f04f 0100 	mov.w	r1, #0
 801b758:	f7fd ff8e 	bl	8019678 <dir_next>
 801b75c:	4603      	mov	r3, r0
 801b75e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 801b760:	7dfb      	ldrb	r3, [r7, #23]
 801b762:	2b04      	cmp	r3, #4
 801b764:	d106      	bne.n	801b774 <f_readdir+0x90>
					dj->sect = 0;
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	f04f 0200 	mov.w	r2, #0
 801b76c:	611a      	str	r2, [r3, #16]
					res = FR_OK;
 801b76e:	f04f 0300 	mov.w	r3, #0
 801b772:	75fb      	strb	r3, [r7, #23]
				}
			}
		}
	}

	LEAVE_FF(dj->fs, res);
 801b774:	7dfb      	ldrb	r3, [r7, #23]
}
 801b776:	4618      	mov	r0, r3
 801b778:	f107 0718 	add.w	r7, r7, #24
 801b77c:	46bd      	mov	sp, r7
 801b77e:	bd80      	pop	{r7, pc}

0801b780 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 801b780:	b580      	push	{r7, lr}
 801b782:	b08e      	sub	sp, #56	; 0x38
 801b784:	af00      	add	r7, sp, #0
 801b786:	6078      	str	r0, [r7, #4]
 801b788:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = auto_mount(&path, &dj.fs, 0);
 801b78a:	f107 0204 	add.w	r2, r7, #4
 801b78e:	f107 0318 	add.w	r3, r7, #24
 801b792:	4610      	mov	r0, r2
 801b794:	4619      	mov	r1, r3
 801b796:	f04f 0200 	mov.w	r2, #0
 801b79a:	f7fe fc4f 	bl	801a03c <auto_mount>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 801b7a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d11e      	bne.n	801b7ea <f_stat+0x6a>
		INITBUF(dj, sfn, lfn);
 801b7ac:	f107 030c 	add.w	r3, r7, #12
 801b7b0:	633b      	str	r3, [r7, #48]	; 0x30
		res = follow_path(&dj, path);	/* Follow the file path */
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	f107 0218 	add.w	r2, r7, #24
 801b7b8:	4610      	mov	r0, r2
 801b7ba:	4619      	mov	r1, r3
 801b7bc:	f7fe fb52 	bl	8019e64 <follow_path>
 801b7c0:	4603      	mov	r3, r0
 801b7c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {				/* Follwo completed */
 801b7c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d10d      	bne.n	801b7ea <f_stat+0x6a>
			if (dj.dir)	/* Found an object */
 801b7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d006      	beq.n	801b7e2 <f_stat+0x62>
				get_fileinfo(&dj, fno);
 801b7d4:	f107 0318 	add.w	r3, r7, #24
 801b7d8:	4618      	mov	r0, r3
 801b7da:	6839      	ldr	r1, [r7, #0]
 801b7dc:	f7fe fa7c 	bl	8019cd8 <get_fileinfo>
 801b7e0:	e003      	b.n	801b7ea <f_stat+0x6a>
			else		/* It is root dir */
				res = FR_INVALID_NAME;
 801b7e2:	f04f 0306 	mov.w	r3, #6
 801b7e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
	}

	LEAVE_FF(dj.fs, res);
 801b7ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	f107 0738 	add.w	r7, r7, #56	; 0x38
 801b7f4:	46bd      	mov	sp, r7
 801b7f6:	bd80      	pop	{r7, pc}

0801b7f8 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
 801b7f8:	b580      	push	{r7, lr}
 801b7fa:	b08c      	sub	sp, #48	; 0x30
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	60f8      	str	r0, [r7, #12]
 801b800:	60b9      	str	r1, [r7, #8]
 801b802:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = auto_mount(&path, fatfs, 0);
 801b804:	f107 030c 	add.w	r3, r7, #12
 801b808:	4618      	mov	r0, r3
 801b80a:	6879      	ldr	r1, [r7, #4]
 801b80c:	f04f 0200 	mov.w	r2, #0
 801b810:	f7fe fc14 	bl	801a03c <auto_mount>
 801b814:	4603      	mov	r3, r0
 801b816:	76fb      	strb	r3, [r7, #27]
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
 801b818:	7efb      	ldrb	r3, [r7, #27]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d001      	beq.n	801b822 <f_getfree+0x2a>
 801b81e:	7efb      	ldrb	r3, [r7, #27]
 801b820:	e0ca      	b.n	801b9b8 <f_getfree+0x1c0>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	691a      	ldr	r2, [r3, #16]
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	6a1b      	ldr	r3, [r3, #32]
 801b82e:	f1a3 0302 	sub.w	r3, r3, #2
 801b832:	429a      	cmp	r2, r3
 801b834:	d807      	bhi.n	801b846 <f_getfree+0x4e>
		*nclst = (*fatfs)->free_clust;
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	691a      	ldr	r2, [r3, #16]
 801b83c:	68bb      	ldr	r3, [r7, #8]
 801b83e:	601a      	str	r2, [r3, #0]
		LEAVE_FF(*fatfs, FR_OK);
 801b840:	f04f 0300 	mov.w	r3, #0
 801b844:	e0b8      	b.n	801b9b8 <f_getfree+0x1c0>
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	781b      	ldrb	r3, [r3, #0]
 801b84c:	76bb      	strb	r3, [r7, #26]
	n = 0;
 801b84e:	f04f 0300 	mov.w	r3, #0
 801b852:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (fat == FS_FAT12) {
 801b854:	7ebb      	ldrb	r3, [r7, #26]
 801b856:	2b01      	cmp	r3, #1
 801b858:	d129      	bne.n	801b8ae <f_getfree+0xb6>
		clst = 2;
 801b85a:	f04f 0302 	mov.w	r3, #2
 801b85e:	62bb      	str	r3, [r7, #40]	; 0x28
		do {
			stat = get_fat(*fatfs, clst);
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	4618      	mov	r0, r3
 801b866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b868:	f7fd fb3c 	bl	8018ee4 <get_fat>
 801b86c:	4603      	mov	r3, r0
 801b86e:	617b      	str	r3, [r7, #20]
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
 801b870:	697b      	ldr	r3, [r7, #20]
 801b872:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b876:	d102      	bne.n	801b87e <f_getfree+0x86>
 801b878:	f04f 0301 	mov.w	r3, #1
 801b87c:	e09c      	b.n	801b9b8 <f_getfree+0x1c0>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
 801b87e:	697b      	ldr	r3, [r7, #20]
 801b880:	2b01      	cmp	r3, #1
 801b882:	d102      	bne.n	801b88a <f_getfree+0x92>
 801b884:	f04f 0302 	mov.w	r3, #2
 801b888:	e096      	b.n	801b9b8 <f_getfree+0x1c0>
			if (stat == 0) n++;
 801b88a:	697b      	ldr	r3, [r7, #20]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d103      	bne.n	801b898 <f_getfree+0xa0>
 801b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b892:	f103 0301 	add.w	r3, r3, #1
 801b896:	62fb      	str	r3, [r7, #44]	; 0x2c
		} while (++clst < (*fatfs)->max_clust);
 801b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b89a:	f103 0301 	add.w	r3, r3, #1
 801b89e:	62bb      	str	r3, [r7, #40]	; 0x28
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	6a1b      	ldr	r3, [r3, #32]
 801b8a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b8a8:	429a      	cmp	r2, r3
 801b8aa:	d3d9      	bcc.n	801b860 <f_getfree+0x68>
 801b8ac:	e073      	b.n	801b996 <f_getfree+0x19e>
	} else {
		clst = (*fatfs)->max_clust;
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	6a1b      	ldr	r3, [r3, #32]
 801b8b4:	62bb      	str	r3, [r7, #40]	; 0x28
		sect = (*fatfs)->fatbase;
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8bc:	627b      	str	r3, [r7, #36]	; 0x24
		i = 0; p = 0;
 801b8be:	f04f 0300 	mov.w	r3, #0
 801b8c2:	623b      	str	r3, [r7, #32]
 801b8c4:	f04f 0300 	mov.w	r3, #0
 801b8c8:	61fb      	str	r3, [r7, #28]
		do {
			if (!i) {
 801b8ca:	6a3b      	ldr	r3, [r7, #32]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d119      	bne.n	801b904 <f_getfree+0x10c>
				res = move_window(*fatfs, sect++);
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	681a      	ldr	r2, [r3, #0]
 801b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b8d8:	f101 0101 	add.w	r1, r1, #1
 801b8dc:	6279      	str	r1, [r7, #36]	; 0x24
 801b8de:	4610      	mov	r0, r2
 801b8e0:	4619      	mov	r1, r3
 801b8e2:	f7fd f9d5 	bl	8018c90 <move_window>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	76fb      	strb	r3, [r7, #27]
				if (res != FR_OK)
 801b8ea:	7efb      	ldrb	r3, [r7, #27]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d001      	beq.n	801b8f4 <f_getfree+0xfc>
					LEAVE_FF(*fatfs, res);
 801b8f0:	7efb      	ldrb	r3, [r7, #27]
 801b8f2:	e061      	b.n	801b9b8 <f_getfree+0x1c0>
				p = (*fatfs)->win;
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801b8fc:	61fb      	str	r3, [r7, #28]
				i = SS(*fatfs);
 801b8fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b902:	623b      	str	r3, [r7, #32]
			}
			if (fat == FS_FAT16) {
 801b904:	7ebb      	ldrb	r3, [r7, #26]
 801b906:	2b02      	cmp	r3, #2
 801b908:	d119      	bne.n	801b93e <f_getfree+0x146>
				if (LD_WORD(p) == 0) n++;
 801b90a:	69fb      	ldr	r3, [r7, #28]
 801b90c:	f103 0301 	add.w	r3, r3, #1
 801b910:	781b      	ldrb	r3, [r3, #0]
 801b912:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b916:	b29a      	uxth	r2, r3
 801b918:	69fb      	ldr	r3, [r7, #28]
 801b91a:	781b      	ldrb	r3, [r3, #0]
 801b91c:	4313      	orrs	r3, r2
 801b91e:	b29b      	uxth	r3, r3
 801b920:	2b00      	cmp	r3, #0
 801b922:	d103      	bne.n	801b92c <f_getfree+0x134>
 801b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b926:	f103 0301 	add.w	r3, r3, #1
 801b92a:	62fb      	str	r3, [r7, #44]	; 0x2c
				p += 2; i -= 2;
 801b92c:	69fb      	ldr	r3, [r7, #28]
 801b92e:	f103 0302 	add.w	r3, r3, #2
 801b932:	61fb      	str	r3, [r7, #28]
 801b934:	6a3b      	ldr	r3, [r7, #32]
 801b936:	f1a3 0302 	sub.w	r3, r3, #2
 801b93a:	623b      	str	r3, [r7, #32]
 801b93c:	e024      	b.n	801b988 <f_getfree+0x190>
			} else {
				if (LD_DWORD(p) == 0) n++;
 801b93e:	69fb      	ldr	r3, [r7, #28]
 801b940:	f103 0303 	add.w	r3, r3, #3
 801b944:	781b      	ldrb	r3, [r3, #0]
 801b946:	ea4f 6203 	mov.w	r2, r3, lsl #24
 801b94a:	69fb      	ldr	r3, [r7, #28]
 801b94c:	f103 0302 	add.w	r3, r3, #2
 801b950:	781b      	ldrb	r3, [r3, #0]
 801b952:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801b956:	431a      	orrs	r2, r3
 801b958:	69fb      	ldr	r3, [r7, #28]
 801b95a:	f103 0301 	add.w	r3, r3, #1
 801b95e:	781b      	ldrb	r3, [r3, #0]
 801b960:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b964:	431a      	orrs	r2, r3
 801b966:	69fb      	ldr	r3, [r7, #28]
 801b968:	781b      	ldrb	r3, [r3, #0]
 801b96a:	4313      	orrs	r3, r2
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	d103      	bne.n	801b978 <f_getfree+0x180>
 801b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b972:	f103 0301 	add.w	r3, r3, #1
 801b976:	62fb      	str	r3, [r7, #44]	; 0x2c
				p += 4; i -= 4;
 801b978:	69fb      	ldr	r3, [r7, #28]
 801b97a:	f103 0304 	add.w	r3, r3, #4
 801b97e:	61fb      	str	r3, [r7, #28]
 801b980:	6a3b      	ldr	r3, [r7, #32]
 801b982:	f1a3 0304 	sub.w	r3, r3, #4
 801b986:	623b      	str	r3, [r7, #32]
			}
		} while (--clst);
 801b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b98a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b98e:	62bb      	str	r3, [r7, #40]	; 0x28
 801b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b992:	2b00      	cmp	r3, #0
 801b994:	d199      	bne.n	801b8ca <f_getfree+0xd2>
	}
	(*fatfs)->free_clust = n;
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b99c:	611a      	str	r2, [r3, #16]
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 801b99e:	7ebb      	ldrb	r3, [r7, #26]
 801b9a0:	2b03      	cmp	r3, #3
 801b9a2:	d104      	bne.n	801b9ae <f_getfree+0x1b6>
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	f04f 0201 	mov.w	r2, #1
 801b9ac:	729a      	strb	r2, [r3, #10]
	*nclst = n;
 801b9ae:	68bb      	ldr	r3, [r7, #8]
 801b9b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b9b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(*fatfs, FR_OK);
 801b9b4:	f04f 0300 	mov.w	r3, #0
}
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	f107 0730 	add.w	r7, r7, #48	; 0x30
 801b9be:	46bd      	mov	sp, r7
 801b9c0:	bd80      	pop	{r7, pc}
 801b9c2:	bf00      	nop

0801b9c4 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b084      	sub	sp, #16
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	681a      	ldr	r2, [r3, #0]
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	889b      	ldrh	r3, [r3, #4]
 801b9d4:	4610      	mov	r0, r2
 801b9d6:	4619      	mov	r1, r3
 801b9d8:	f7fe fdc0 	bl	801a55c <validate>
 801b9dc:	4603      	mov	r3, r0
 801b9de:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801b9e0:	7bfb      	ldrb	r3, [r7, #15]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d001      	beq.n	801b9ea <f_truncate+0x26>
 801b9e6:	7bfb      	ldrb	r3, [r7, #15]
 801b9e8:	e07a      	b.n	801bae0 <f_truncate+0x11c>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	799b      	ldrb	r3, [r3, #6]
 801b9ee:	b2db      	uxtb	r3, r3
 801b9f0:	b25b      	sxtb	r3, r3
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	da02      	bge.n	801b9fc <f_truncate+0x38>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 801b9f6:	f04f 0302 	mov.w	r3, #2
 801b9fa:	e071      	b.n	801bae0 <f_truncate+0x11c>
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	799b      	ldrb	r3, [r3, #6]
 801ba00:	f003 0302 	and.w	r3, r3, #2
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d102      	bne.n	801ba0e <f_truncate+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 801ba08:	f04f 0307 	mov.w	r3, #7
 801ba0c:	e068      	b.n	801bae0 <f_truncate+0x11c>

	if (fp->fsize > fp->fptr) {
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	68da      	ldr	r2, [r3, #12]
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	689b      	ldr	r3, [r3, #8]
 801ba16:	429a      	cmp	r2, r3
 801ba18:	d957      	bls.n	801baca <f_truncate+0x106>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	689a      	ldr	r2, [r3, #8]
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	60da      	str	r2, [r3, #12]
		fp->flag |= FA__WRITTEN;
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	799b      	ldrb	r3, [r3, #6]
 801ba26:	f043 0320 	orr.w	r3, r3, #32
 801ba2a:	b2da      	uxtb	r2, r3
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	719a      	strb	r2, [r3, #6]
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	689b      	ldr	r3, [r3, #8]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d10e      	bne.n	801ba56 <f_truncate+0x92>
			res = remove_chain(fp->fs, fp->org_clust);
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	681a      	ldr	r2, [r3, #0]
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	691b      	ldr	r3, [r3, #16]
 801ba40:	4610      	mov	r0, r2
 801ba42:	4619      	mov	r1, r3
 801ba44:	f7fd fc82 	bl	801934c <remove_chain>
 801ba48:	4603      	mov	r3, r0
 801ba4a:	73fb      	strb	r3, [r7, #15]
			fp->org_clust = 0;
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	f04f 0200 	mov.w	r2, #0
 801ba52:	611a      	str	r2, [r3, #16]
 801ba54:	e039      	b.n	801baca <f_truncate+0x106>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	681a      	ldr	r2, [r3, #0]
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	695b      	ldr	r3, [r3, #20]
 801ba5e:	4610      	mov	r0, r2
 801ba60:	4619      	mov	r1, r3
 801ba62:	f7fd fa3f 	bl	8018ee4 <get_fat>
 801ba66:	4603      	mov	r3, r0
 801ba68:	60bb      	str	r3, [r7, #8]
			res = FR_OK;
 801ba6a:	f04f 0300 	mov.w	r3, #0
 801ba6e:	73fb      	strb	r3, [r7, #15]
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801ba70:	68bb      	ldr	r3, [r7, #8]
 801ba72:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba76:	d102      	bne.n	801ba7e <f_truncate+0xba>
 801ba78:	f04f 0301 	mov.w	r3, #1
 801ba7c:	73fb      	strb	r3, [r7, #15]
			if (ncl == 1) res = FR_INT_ERR;
 801ba7e:	68bb      	ldr	r3, [r7, #8]
 801ba80:	2b01      	cmp	r3, #1
 801ba82:	d102      	bne.n	801ba8a <f_truncate+0xc6>
 801ba84:	f04f 0302 	mov.w	r3, #2
 801ba88:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK && ncl < fp->fs->max_clust) {
 801ba8a:	7bfb      	ldrb	r3, [r7, #15]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d11c      	bne.n	801baca <f_truncate+0x106>
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	6a1a      	ldr	r2, [r3, #32]
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	429a      	cmp	r2, r3
 801ba9a:	d916      	bls.n	801baca <f_truncate+0x106>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	681a      	ldr	r2, [r3, #0]
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	695b      	ldr	r3, [r3, #20]
 801baa4:	4610      	mov	r0, r2
 801baa6:	4619      	mov	r1, r3
 801baa8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801baac:	f7fd fb14 	bl	80190d8 <put_fat>
 801bab0:	4603      	mov	r3, r0
 801bab2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 801bab4:	7bfb      	ldrb	r3, [r7, #15]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d107      	bne.n	801baca <f_truncate+0x106>
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	4618      	mov	r0, r3
 801bac0:	68b9      	ldr	r1, [r7, #8]
 801bac2:	f7fd fc43 	bl	801934c <remove_chain>
 801bac6:	4603      	mov	r3, r0
 801bac8:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
 801baca:	7bfb      	ldrb	r3, [r7, #15]
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d006      	beq.n	801bade <f_truncate+0x11a>
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	799b      	ldrb	r3, [r3, #6]
 801bad4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bad8:	b2da      	uxtb	r2, r3
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, res);
 801bade:	7bfb      	ldrb	r3, [r7, #15]
}
 801bae0:	4618      	mov	r0, r3
 801bae2:	f107 0710 	add.w	r7, r7, #16
 801bae6:	46bd      	mov	sp, r7
 801bae8:	bd80      	pop	{r7, pc}
 801baea:	bf00      	nop

0801baec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
 801baec:	b580      	push	{r7, lr}
 801baee:	b096      	sub	sp, #88	; 0x58
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = auto_mount(&path, &dj.fs, 1);
 801baf4:	f107 0204 	add.w	r2, r7, #4
 801baf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bafc:	4610      	mov	r0, r2
 801bafe:	4619      	mov	r1, r3
 801bb00:	f04f 0201 	mov.w	r2, #1
 801bb04:	f7fe fa9a 	bl	801a03c <auto_mount>
 801bb08:	4603      	mov	r3, r0
 801bb0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801bb0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d002      	beq.n	801bb1c <f_unlink+0x30>
 801bb16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bb1a:	e0bd      	b.n	801bc98 <f_unlink+0x1ac>

	INITBUF(dj, sfn, lfn);
 801bb1c:	f107 0308 	add.w	r3, r7, #8
 801bb20:	64bb      	str	r3, [r7, #72]	; 0x48
	res = follow_path(&dj, path);			/* Follow the file path */
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801bb28:	4610      	mov	r0, r2
 801bb2a:	4619      	mov	r1, r3
 801bb2c:	f7fe f99a 	bl	8019e64 <follow_path>
 801bb30:	4603      	mov	r3, r0
 801bb32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
 801bb36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d10b      	bne.n	801bb56 <f_unlink+0x6a>
 801bb3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bb40:	f103 030b 	add.w	r3, r3, #11
 801bb44:	781b      	ldrb	r3, [r3, #0]
 801bb46:	f003 0320 	and.w	r3, r3, #32
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d003      	beq.n	801bb56 <f_unlink+0x6a>
		res = FR_INVALID_NAME;
 801bb4e:	f04f 0306 	mov.w	r3, #6
 801bb52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
 801bb56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d002      	beq.n	801bb64 <f_unlink+0x78>
 801bb5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bb62:	e099      	b.n	801bc98 <f_unlink+0x1ac>

	dir = dj.dir;
 801bb64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bb66:	653b      	str	r3, [r7, #80]	; 0x50
	if (!dir)								/* Is it the root directory? */
 801bb68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d102      	bne.n	801bb74 <f_unlink+0x88>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
 801bb6e:	f04f 0306 	mov.w	r3, #6
 801bb72:	e091      	b.n	801bc98 <f_unlink+0x1ac>
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
 801bb74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb76:	f103 030b 	add.w	r3, r3, #11
 801bb7a:	781b      	ldrb	r3, [r3, #0]
 801bb7c:	f003 0301 	and.w	r3, r3, #1
 801bb80:	b2db      	uxtb	r3, r3
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d002      	beq.n	801bb8c <f_unlink+0xa0>
		LEAVE_FF(dj.fs, FR_DENIED);
 801bb86:	f04f 0307 	mov.w	r3, #7
 801bb8a:	e085      	b.n	801bc98 <f_unlink+0x1ac>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801bb8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb8e:	f103 0315 	add.w	r3, r3, #21
 801bb92:	781b      	ldrb	r3, [r3, #0]
 801bb94:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801bb98:	b29a      	uxth	r2, r3
 801bb9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb9c:	f103 0314 	add.w	r3, r3, #20
 801bba0:	781b      	ldrb	r3, [r3, #0]
 801bba2:	4313      	orrs	r3, r2
 801bba4:	b29b      	uxth	r3, r3
 801bba6:	b29b      	uxth	r3, r3
 801bba8:	ea4f 4203 	mov.w	r2, r3, lsl #16
 801bbac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbae:	f103 031b 	add.w	r3, r3, #27
 801bbb2:	781b      	ldrb	r3, [r3, #0]
 801bbb4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801bbb8:	b299      	uxth	r1, r3
 801bbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbbc:	f103 031a 	add.w	r3, r3, #26
 801bbc0:	781b      	ldrb	r3, [r3, #0]
 801bbc2:	430b      	orrs	r3, r1
 801bbc4:	b29b      	uxth	r3, r3
 801bbc6:	b29b      	uxth	r3, r3
 801bbc8:	4313      	orrs	r3, r2
 801bbca:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
 801bbcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbce:	f103 030b 	add.w	r3, r3, #11
 801bbd2:	781b      	ldrb	r3, [r3, #0]
 801bbd4:	f003 0310 	and.w	r3, r3, #16
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d039      	beq.n	801bc50 <f_unlink+0x164>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
 801bbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bbde:	2b01      	cmp	r3, #1
 801bbe0:	d802      	bhi.n	801bbe8 <f_unlink+0xfc>
 801bbe2:	f04f 0302 	mov.w	r3, #2
 801bbe6:	e057      	b.n	801bc98 <f_unlink+0x1ac>
		mem_cpy(&sdj, &dj, sizeof(DIR));		/* Check if the sub-dir is empty or not */
 801bbe8:	f107 0214 	add.w	r2, r7, #20
 801bbec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bbf0:	4610      	mov	r0, r2
 801bbf2:	4619      	mov	r1, r3
 801bbf4:	f04f 021c 	mov.w	r2, #28
 801bbf8:	f7fc ffac 	bl	8018b54 <mem_cpy>
		sdj.sclust = dclst;
 801bbfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bbfe:	61fb      	str	r3, [r7, #28]
		res = dir_seek(&sdj, 0);
 801bc00:	f107 0314 	add.w	r3, r7, #20
 801bc04:	4618      	mov	r0, r3
 801bc06:	f04f 0100 	mov.w	r1, #0
 801bc0a:	f7fd fca9 	bl	8019560 <dir_seek>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801bc14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d002      	beq.n	801bc22 <f_unlink+0x136>
 801bc1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bc20:	e03a      	b.n	801bc98 <f_unlink+0x1ac>
		res = dir_read(&sdj);
 801bc22:	f107 0314 	add.w	r3, r7, #20
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7fd fe6a 	bl	8019900 <dir_read>
 801bc2c:	4603      	mov	r3, r0
 801bc2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
 801bc32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d103      	bne.n	801bc42 <f_unlink+0x156>
 801bc3a:	f04f 0307 	mov.w	r3, #7
 801bc3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
 801bc42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bc46:	2b04      	cmp	r3, #4
 801bc48:	d002      	beq.n	801bc50 <f_unlink+0x164>
 801bc4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bc4e:	e023      	b.n	801bc98 <f_unlink+0x1ac>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
 801bc50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bc54:	4618      	mov	r0, r3
 801bc56:	f7fd ff0b 	bl	8019a70 <dir_remove>
 801bc5a:	4603      	mov	r3, r0
 801bc5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (res == FR_OK) {
 801bc60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d115      	bne.n	801bc94 <f_unlink+0x1a8>
		if (dclst)
 801bc68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d007      	beq.n	801bc7e <f_unlink+0x192>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
 801bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc70:	4618      	mov	r0, r3
 801bc72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bc74:	f7fd fb6a 	bl	801934c <remove_chain>
 801bc78:	4603      	mov	r3, r0
 801bc7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = sync(dj.fs);
 801bc7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d106      	bne.n	801bc94 <f_unlink+0x1a8>
 801bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc88:	4618      	mov	r0, r3
 801bc8a:	f7fd f86b 	bl	8018d64 <sync>
 801bc8e:	4603      	mov	r3, r0
 801bc90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	LEAVE_FF(dj.fs, res);
 801bc94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801bc98:	4618      	mov	r0, r3
 801bc9a:	f107 0758 	add.w	r7, r7, #88	; 0x58
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	bd80      	pop	{r7, pc}
 801bca2:	bf00      	nop

0801bca4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b092      	sub	sp, #72	; 0x48
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = auto_mount(&path, &dj.fs, 1);
 801bcac:	f107 0204 	add.w	r2, r7, #4
 801bcb0:	f107 0314 	add.w	r3, r7, #20
 801bcb4:	4610      	mov	r0, r2
 801bcb6:	4619      	mov	r1, r3
 801bcb8:	f04f 0201 	mov.w	r2, #1
 801bcbc:	f7fe f9be 	bl	801a03c <auto_mount>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801bcc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d002      	beq.n	801bcd4 <f_mkdir+0x30>
 801bcce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bcd2:	e1ab      	b.n	801c02c <f_mkdir+0x388>

	INITBUF(dj, sfn, lfn);
 801bcd4:	f107 0308 	add.w	r3, r7, #8
 801bcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	res = follow_path(&dj, path);			/* Follow the file path */
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	f107 0214 	add.w	r2, r7, #20
 801bce0:	4610      	mov	r0, r2
 801bce2:	4619      	mov	r1, r3
 801bce4:	f7fe f8be 	bl	8019e64 <follow_path>
 801bce8:	4603      	mov	r3, r0
 801bcea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
 801bcee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d103      	bne.n	801bcfe <f_mkdir+0x5a>
 801bcf6:	f04f 0308 	mov.w	r3, #8
 801bcfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[11] & NS_DOT))
 801bcfe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bd02:	2b04      	cmp	r3, #4
 801bd04:	d10b      	bne.n	801bd1e <f_mkdir+0x7a>
 801bd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd08:	f103 030b 	add.w	r3, r3, #11
 801bd0c:	781b      	ldrb	r3, [r3, #0]
 801bd0e:	f003 0320 	and.w	r3, r3, #32
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d003      	beq.n	801bd1e <f_mkdir+0x7a>
		res = FR_INVALID_NAME;
 801bd16:	f04f 0306 	mov.w	r3, #6
 801bd1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res != FR_NO_FILE)					/* Any error occured */
 801bd1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bd22:	2b04      	cmp	r3, #4
 801bd24:	d002      	beq.n	801bd2c <f_mkdir+0x88>
		LEAVE_FF(dj.fs, res);
 801bd26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bd2a:	e17f      	b.n	801c02c <f_mkdir+0x388>

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
 801bd2c:	697b      	ldr	r3, [r7, #20]
 801bd2e:	4618      	mov	r0, r3
 801bd30:	f04f 0100 	mov.w	r1, #0
 801bd34:	f7fd fb62 	bl	80193fc <create_chain>
 801bd38:	4603      	mov	r3, r0
 801bd3a:	63bb      	str	r3, [r7, #56]	; 0x38
	res = FR_OK;
 801bd3c:	f04f 0300 	mov.w	r3, #0
 801bd40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (dclst == 0) res = FR_DENIED;
 801bd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d103      	bne.n	801bd52 <f_mkdir+0xae>
 801bd4a:	f04f 0307 	mov.w	r3, #7
 801bd4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (dclst == 1) res = FR_INT_ERR;
 801bd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd54:	2b01      	cmp	r3, #1
 801bd56:	d103      	bne.n	801bd60 <f_mkdir+0xbc>
 801bd58:	f04f 0302 	mov.w	r3, #2
 801bd5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801bd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd66:	d103      	bne.n	801bd70 <f_mkdir+0xcc>
 801bd68:	f04f 0301 	mov.w	r3, #1
 801bd6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK)
 801bd70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d108      	bne.n	801bd8a <f_mkdir+0xe6>
		res = move_window(dj.fs, 0);
 801bd78:	697b      	ldr	r3, [r7, #20]
 801bd7a:	4618      	mov	r0, r3
 801bd7c:	f04f 0100 	mov.w	r1, #0
 801bd80:	f7fc ff86 	bl	8018c90 <move_window>
 801bd84:	4603      	mov	r3, r0
 801bd86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801bd8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d002      	beq.n	801bd98 <f_mkdir+0xf4>
 801bd92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bd96:	e149      	b.n	801c02c <f_mkdir+0x388>
	dsect = clust2sect(dj.fs, dclst);
 801bd98:	697b      	ldr	r3, [r7, #20]
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801bd9e:	f7fd fbbd 	bl	801951c <clust2sect>
 801bda2:	4603      	mov	r3, r0
 801bda4:	643b      	str	r3, [r7, #64]	; 0x40

	dir = dj.fs->win;						/* Initialize the new directory table */
 801bda6:	697b      	ldr	r3, [r7, #20]
 801bda8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801bdac:	637b      	str	r3, [r7, #52]	; 0x34
	mem_set(dir, 0, SS(dj.fs));
 801bdae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bdb0:	f04f 0100 	mov.w	r1, #0
 801bdb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bdb8:	f7fc fef4 	bl	8018ba4 <mem_set>
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
 801bdbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bdbe:	f04f 0120 	mov.w	r1, #32
 801bdc2:	f04f 020b 	mov.w	r2, #11
 801bdc6:	f7fc feed 	bl	8018ba4 <mem_set>
	dir[DIR_Name] = '.';
 801bdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdcc:	f04f 022e 	mov.w	r2, #46	; 0x2e
 801bdd0:	701a      	strb	r2, [r3, #0]
	dir[DIR_Attr] = AM_DIR;
 801bdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdd4:	f103 030b 	add.w	r3, r3, #11
 801bdd8:	f04f 0210 	mov.w	r2, #16
 801bddc:	701a      	strb	r2, [r3, #0]
	tim = get_fattime();
 801bdde:	f001 ffbb 	bl	801dd58 <get_fattime>
 801bde2:	4603      	mov	r3, r0
 801bde4:	633b      	str	r3, [r7, #48]	; 0x30
	ST_DWORD(dir+DIR_WrtTime, tim);
 801bde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bde8:	f103 0316 	add.w	r3, r3, #22
 801bdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bdee:	b2d2      	uxtb	r2, r2
 801bdf0:	701a      	strb	r2, [r3, #0]
 801bdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdf4:	f103 0317 	add.w	r3, r3, #23
 801bdf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bdfa:	b292      	uxth	r2, r2
 801bdfc:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801be00:	b292      	uxth	r2, r2
 801be02:	b2d2      	uxtb	r2, r2
 801be04:	701a      	strb	r2, [r3, #0]
 801be06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be08:	f103 0318 	add.w	r3, r3, #24
 801be0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be0e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801be12:	b2d2      	uxtb	r2, r2
 801be14:	701a      	strb	r2, [r3, #0]
 801be16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be18:	f103 0319 	add.w	r3, r3, #25
 801be1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801be22:	b2d2      	uxtb	r2, r2
 801be24:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+DIR_FstClusLO, dclst);
 801be26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be28:	f103 031a 	add.w	r3, r3, #26
 801be2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be2e:	b2d2      	uxtb	r2, r2
 801be30:	701a      	strb	r2, [r3, #0]
 801be32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be34:	f103 031b 	add.w	r3, r3, #27
 801be38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be3a:	b292      	uxth	r2, r2
 801be3c:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801be40:	b292      	uxth	r2, r2
 801be42:	b2d2      	uxtb	r2, r2
 801be44:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801be46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be48:	f103 0314 	add.w	r3, r3, #20
 801be4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be4e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801be52:	b2d2      	uxtb	r2, r2
 801be54:	701a      	strb	r2, [r3, #0]
 801be56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be58:	f103 0315 	add.w	r3, r3, #21
 801be5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801be62:	b292      	uxth	r2, r2
 801be64:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801be68:	b292      	uxth	r2, r2
 801be6a:	b2d2      	uxtb	r2, r2
 801be6c:	701a      	strb	r2, [r3, #0]
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 801be6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be70:	f103 0320 	add.w	r3, r3, #32
 801be74:	4618      	mov	r0, r3
 801be76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801be78:	f04f 0220 	mov.w	r2, #32
 801be7c:	f7fc fe6a 	bl	8018b54 <mem_cpy>
	dir[33] = '.';
 801be80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be82:	f103 0321 	add.w	r3, r3, #33	; 0x21
 801be86:	f04f 022e 	mov.w	r2, #46	; 0x2e
 801be8a:	701a      	strb	r2, [r3, #0]
	pclst = dj.sclust;
 801be8c:	69fb      	ldr	r3, [r7, #28]
 801be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 801be90:	697b      	ldr	r3, [r7, #20]
 801be92:	781b      	ldrb	r3, [r3, #0]
 801be94:	2b03      	cmp	r3, #3
 801be96:	d107      	bne.n	801bea8 <f_mkdir+0x204>
 801be98:	697b      	ldr	r3, [r7, #20]
 801be9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801be9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be9e:	429a      	cmp	r2, r3
 801bea0:	d102      	bne.n	801bea8 <f_mkdir+0x204>
		pclst = 0;
 801bea2:	f04f 0300 	mov.w	r3, #0
 801bea6:	63fb      	str	r3, [r7, #60]	; 0x3c
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
 801bea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beaa:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 801beae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801beb0:	b2d2      	uxtb	r2, r2
 801beb2:	701a      	strb	r2, [r3, #0]
 801beb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beb6:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 801beba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bebc:	b292      	uxth	r2, r2
 801bebe:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801bec2:	b292      	uxth	r2, r2
 801bec4:	b2d2      	uxtb	r2, r2
 801bec6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
 801bec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beca:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801bece:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bed0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801bed4:	b2d2      	uxtb	r2, r2
 801bed6:	701a      	strb	r2, [r3, #0]
 801bed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beda:	f103 0335 	add.w	r3, r3, #53	; 0x35
 801bede:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bee0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801bee4:	b292      	uxth	r2, r2
 801bee6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801beea:	b292      	uxth	r2, r2
 801beec:	b2d2      	uxtb	r2, r2
 801beee:	701a      	strb	r2, [r3, #0]
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 801bef0:	f04f 0300 	mov.w	r3, #0
 801bef4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801bef8:	e027      	b.n	801bf4a <f_mkdir+0x2a6>
		dj.fs->winsect = dsect++;
 801befa:	697b      	ldr	r3, [r7, #20]
 801befc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801befe:	631a      	str	r2, [r3, #48]	; 0x30
 801bf00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf02:	f103 0301 	add.w	r3, r3, #1
 801bf06:	643b      	str	r3, [r7, #64]	; 0x40
		dj.fs->wflag = 1;
 801bf08:	697b      	ldr	r3, [r7, #20]
 801bf0a:	f04f 0201 	mov.w	r2, #1
 801bf0e:	711a      	strb	r2, [r3, #4]
		res = move_window(dj.fs, 0);
 801bf10:	697b      	ldr	r3, [r7, #20]
 801bf12:	4618      	mov	r0, r3
 801bf14:	f04f 0100 	mov.w	r1, #0
 801bf18:	f7fc feba 	bl	8018c90 <move_window>
 801bf1c:	4603      	mov	r3, r0
 801bf1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res) LEAVE_FF(dj.fs, res);
 801bf22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d002      	beq.n	801bf30 <f_mkdir+0x28c>
 801bf2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bf2e:	e07d      	b.n	801c02c <f_mkdir+0x388>
		mem_set(dir, 0, SS(dj.fs));
 801bf30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bf32:	f04f 0100 	mov.w	r1, #0
 801bf36:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bf3a:	f7fc fe33 	bl	8018ba4 <mem_set>
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 801bf3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801bf42:	f103 0301 	add.w	r3, r3, #1
 801bf46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801bf4a:	697b      	ldr	r3, [r7, #20]
 801bf4c:	789b      	ldrb	r3, [r3, #2]
 801bf4e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801bf52:	429a      	cmp	r2, r3
 801bf54:	d3d1      	bcc.n	801befa <f_mkdir+0x256>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
 801bf56:	f107 0314 	add.w	r3, r7, #20
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	f7fd fd1e 	bl	801999c <dir_register>
 801bf60:	4603      	mov	r3, r0
 801bf62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res != FR_OK) {
 801bf66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d005      	beq.n	801bf7a <f_mkdir+0x2d6>
		remove_chain(dj.fs, dclst);
 801bf6e:	697b      	ldr	r3, [r7, #20]
 801bf70:	4618      	mov	r0, r3
 801bf72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801bf74:	f7fd f9ea 	bl	801934c <remove_chain>
 801bf78:	e056      	b.n	801c028 <f_mkdir+0x384>
	} else {
		dir = dj.dir;
 801bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf7c:	637b      	str	r3, [r7, #52]	; 0x34
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
 801bf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf80:	f103 030b 	add.w	r3, r3, #11
 801bf84:	f04f 0210 	mov.w	r2, #16
 801bf88:	701a      	strb	r2, [r3, #0]
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
 801bf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf8c:	f103 0316 	add.w	r3, r3, #22
 801bf90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf92:	b2d2      	uxtb	r2, r2
 801bf94:	701a      	strb	r2, [r3, #0]
 801bf96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf98:	f103 0317 	add.w	r3, r3, #23
 801bf9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf9e:	b292      	uxth	r2, r2
 801bfa0:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801bfa4:	b292      	uxth	r2, r2
 801bfa6:	b2d2      	uxtb	r2, r2
 801bfa8:	701a      	strb	r2, [r3, #0]
 801bfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfac:	f103 0318 	add.w	r3, r3, #24
 801bfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bfb2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801bfb6:	b2d2      	uxtb	r2, r2
 801bfb8:	701a      	strb	r2, [r3, #0]
 801bfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfbc:	f103 0319 	add.w	r3, r3, #25
 801bfc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bfc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801bfc6:	b2d2      	uxtb	r2, r2
 801bfc8:	701a      	strb	r2, [r3, #0]
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
 801bfca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfcc:	f103 031a 	add.w	r3, r3, #26
 801bfd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bfd2:	b2d2      	uxtb	r2, r2
 801bfd4:	701a      	strb	r2, [r3, #0]
 801bfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfd8:	f103 031b 	add.w	r3, r3, #27
 801bfdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bfde:	b292      	uxth	r2, r2
 801bfe0:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801bfe4:	b292      	uxth	r2, r2
 801bfe6:	b2d2      	uxtb	r2, r2
 801bfe8:	701a      	strb	r2, [r3, #0]
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 801bfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfec:	f103 0314 	add.w	r3, r3, #20
 801bff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bff2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801bff6:	b2d2      	uxtb	r2, r2
 801bff8:	701a      	strb	r2, [r3, #0]
 801bffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bffc:	f103 0315 	add.w	r3, r3, #21
 801c000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c002:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801c006:	b292      	uxth	r2, r2
 801c008:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c00c:	b292      	uxth	r2, r2
 801c00e:	b2d2      	uxtb	r2, r2
 801c010:	701a      	strb	r2, [r3, #0]
		dj.fs->wflag = 1;
 801c012:	697b      	ldr	r3, [r7, #20]
 801c014:	f04f 0201 	mov.w	r2, #1
 801c018:	711a      	strb	r2, [r3, #4]
		res = sync(dj.fs);
 801c01a:	697b      	ldr	r3, [r7, #20]
 801c01c:	4618      	mov	r0, r3
 801c01e:	f7fc fea1 	bl	8018d64 <sync>
 801c022:	4603      	mov	r3, r0
 801c024:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(dj.fs, res);
 801c028:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801c02c:	4618      	mov	r0, r3
 801c02e:	f107 0748 	add.w	r7, r7, #72	; 0x48
 801c032:	46bd      	mov	sp, r7
 801c034:	bd80      	pop	{r7, pc}
 801c036:	bf00      	nop

0801c038 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
 801c038:	b580      	push	{r7, lr}
 801c03a:	b08e      	sub	sp, #56	; 0x38
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
 801c040:	4613      	mov	r3, r2
 801c042:	460a      	mov	r2, r1
 801c044:	70fa      	strb	r2, [r7, #3]
 801c046:	70bb      	strb	r3, [r7, #2]
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
 801c048:	f107 0204 	add.w	r2, r7, #4
 801c04c:	f107 0314 	add.w	r3, r7, #20
 801c050:	4610      	mov	r0, r2
 801c052:	4619      	mov	r1, r3
 801c054:	f04f 0201 	mov.w	r2, #1
 801c058:	f7fd fff0 	bl	801a03c <auto_mount>
 801c05c:	4603      	mov	r3, r0
 801c05e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 801c062:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c066:	2b00      	cmp	r3, #0
 801c068:	d14d      	bne.n	801c106 <f_chmod+0xce>
		INITBUF(dj, sfn, lfn);
 801c06a:	f107 0308 	add.w	r3, r7, #8
 801c06e:	62fb      	str	r3, [r7, #44]	; 0x2c
		res = follow_path(&dj, path);		/* Follow the file path */
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	f107 0214 	add.w	r2, r7, #20
 801c076:	4610      	mov	r0, r2
 801c078:	4619      	mov	r1, r3
 801c07a:	f7fd fef3 	bl	8019e64 <follow_path>
 801c07e:	4603      	mov	r3, r0
 801c080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
 801c084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d10b      	bne.n	801c0a4 <f_chmod+0x6c>
 801c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c08e:	f103 030b 	add.w	r3, r3, #11
 801c092:	781b      	ldrb	r3, [r3, #0]
 801c094:	f003 0320 	and.w	r3, r3, #32
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d003      	beq.n	801c0a4 <f_chmod+0x6c>
			res = FR_INVALID_NAME;
 801c09c:	f04f 0306 	mov.w	r3, #6
 801c0a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {
 801c0a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d12c      	bne.n	801c106 <f_chmod+0xce>
			dir = dj.dir;
 801c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0ae:	633b      	str	r3, [r7, #48]	; 0x30
			if (!dir) {						/* Is it a root directory? */
 801c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d104      	bne.n	801c0c0 <f_chmod+0x88>
				res = FR_INVALID_NAME;
 801c0b6:	f04f 0306 	mov.w	r3, #6
 801c0ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801c0be:	e022      	b.n	801c106 <f_chmod+0xce>
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 801c0c0:	78bb      	ldrb	r3, [r7, #2]
 801c0c2:	f003 0327 	and.w	r3, r3, #39	; 0x27
 801c0c6:	70bb      	strb	r3, [r7, #2]
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 801c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0ca:	f103 030b 	add.w	r3, r3, #11
 801c0ce:	78f9      	ldrb	r1, [r7, #3]
 801c0d0:	78ba      	ldrb	r2, [r7, #2]
 801c0d2:	400a      	ands	r2, r1
 801c0d4:	b2d1      	uxtb	r1, r2
 801c0d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0d8:	f102 020b 	add.w	r2, r2, #11
 801c0dc:	7810      	ldrb	r0, [r2, #0]
 801c0de:	78ba      	ldrb	r2, [r7, #2]
 801c0e0:	ea6f 0202 	mvn.w	r2, r2
 801c0e4:	b2d2      	uxtb	r2, r2
 801c0e6:	4002      	ands	r2, r0
 801c0e8:	b2d2      	uxtb	r2, r2
 801c0ea:	430a      	orrs	r2, r1
 801c0ec:	b2d2      	uxtb	r2, r2
 801c0ee:	701a      	strb	r2, [r3, #0]
				dj.fs->wflag = 1;
 801c0f0:	697b      	ldr	r3, [r7, #20]
 801c0f2:	f04f 0201 	mov.w	r2, #1
 801c0f6:	711a      	strb	r2, [r3, #4]
				res = sync(dj.fs);
 801c0f8:	697b      	ldr	r3, [r7, #20]
 801c0fa:	4618      	mov	r0, r3
 801c0fc:	f7fc fe32 	bl	8018d64 <sync>
 801c100:	4603      	mov	r3, r0
 801c102:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
	}

	LEAVE_FF(dj.fs, res);
 801c106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 801c10a:	4618      	mov	r0, r3
 801c10c:	f107 0738 	add.w	r7, r7, #56	; 0x38
 801c110:	46bd      	mov	sp, r7
 801c112:	bd80      	pop	{r7, pc}

0801c114 <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
 801c114:	b580      	push	{r7, lr}
 801c116:	b08e      	sub	sp, #56	; 0x38
 801c118:	af00      	add	r7, sp, #0
 801c11a:	6078      	str	r0, [r7, #4]
 801c11c:	6039      	str	r1, [r7, #0]
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
 801c11e:	f107 0204 	add.w	r2, r7, #4
 801c122:	f107 0314 	add.w	r3, r7, #20
 801c126:	4610      	mov	r0, r2
 801c128:	4619      	mov	r1, r3
 801c12a:	f04f 0201 	mov.w	r2, #1
 801c12e:	f7fd ff85 	bl	801a03c <auto_mount>
 801c132:	4603      	mov	r3, r0
 801c134:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 801c138:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d157      	bne.n	801c1f0 <f_utime+0xdc>
		INITBUF(dj, sfn, lfn);
 801c140:	f107 0308 	add.w	r3, r7, #8
 801c144:	62fb      	str	r3, [r7, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	f107 0214 	add.w	r2, r7, #20
 801c14c:	4610      	mov	r0, r2
 801c14e:	4619      	mov	r1, r3
 801c150:	f7fd fe88 	bl	8019e64 <follow_path>
 801c154:	4603      	mov	r3, r0
 801c156:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
 801c15a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d10b      	bne.n	801c17a <f_utime+0x66>
 801c162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c164:	f103 030b 	add.w	r3, r3, #11
 801c168:	781b      	ldrb	r3, [r3, #0]
 801c16a:	f003 0320 	and.w	r3, r3, #32
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d003      	beq.n	801c17a <f_utime+0x66>
			res = FR_INVALID_NAME;
 801c172:	f04f 0306 	mov.w	r3, #6
 801c176:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {
 801c17a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d136      	bne.n	801c1f0 <f_utime+0xdc>
			dir = dj.dir;
 801c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c184:	633b      	str	r3, [r7, #48]	; 0x30
			if (!dir) {				/* Root directory */
 801c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d104      	bne.n	801c196 <f_utime+0x82>
				res = FR_INVALID_NAME;
 801c18c:	f04f 0306 	mov.w	r3, #6
 801c190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801c194:	e02c      	b.n	801c1f0 <f_utime+0xdc>
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 801c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c198:	f103 0316 	add.w	r3, r3, #22
 801c19c:	683a      	ldr	r2, [r7, #0]
 801c19e:	88d2      	ldrh	r2, [r2, #6]
 801c1a0:	b2d2      	uxtb	r2, r2
 801c1a2:	701a      	strb	r2, [r3, #0]
 801c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1a6:	f103 0317 	add.w	r3, r3, #23
 801c1aa:	683a      	ldr	r2, [r7, #0]
 801c1ac:	88d2      	ldrh	r2, [r2, #6]
 801c1ae:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c1b2:	b292      	uxth	r2, r2
 801c1b4:	b2d2      	uxtb	r2, r2
 801c1b6:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 801c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1ba:	f103 0318 	add.w	r3, r3, #24
 801c1be:	683a      	ldr	r2, [r7, #0]
 801c1c0:	8892      	ldrh	r2, [r2, #4]
 801c1c2:	b2d2      	uxtb	r2, r2
 801c1c4:	701a      	strb	r2, [r3, #0]
 801c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1c8:	f103 0319 	add.w	r3, r3, #25
 801c1cc:	683a      	ldr	r2, [r7, #0]
 801c1ce:	8892      	ldrh	r2, [r2, #4]
 801c1d0:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c1d4:	b292      	uxth	r2, r2
 801c1d6:	b2d2      	uxtb	r2, r2
 801c1d8:	701a      	strb	r2, [r3, #0]
				dj.fs->wflag = 1;
 801c1da:	697b      	ldr	r3, [r7, #20]
 801c1dc:	f04f 0201 	mov.w	r2, #1
 801c1e0:	711a      	strb	r2, [r3, #4]
				res = sync(dj.fs);
 801c1e2:	697b      	ldr	r3, [r7, #20]
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	f7fc fdbd 	bl	8018d64 <sync>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
	}

	LEAVE_FF(dj.fs, res);
 801c1f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	f107 0738 	add.w	r7, r7, #56	; 0x38
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}
 801c1fe:	bf00      	nop

0801c200 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
 801c200:	b580      	push	{r7, lr}
 801c202:	b09c      	sub	sp, #112	; 0x70
 801c204:	af00      	add	r7, sp, #0
 801c206:	6078      	str	r0, [r7, #4]
 801c208:	6039      	str	r1, [r7, #0]
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
 801c20a:	f107 0320 	add.w	r3, r7, #32
 801c20e:	663b      	str	r3, [r7, #96]	; 0x60
	res = auto_mount(&path_old, &dj_old.fs, 1);
 801c210:	f107 0204 	add.w	r2, r7, #4
 801c214:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c218:	4610      	mov	r0, r2
 801c21a:	4619      	mov	r1, r3
 801c21c:	f04f 0201 	mov.w	r2, #1
 801c220:	f7fd ff0c 	bl	801a03c <auto_mount>
 801c224:	4603      	mov	r3, r0
 801c226:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 801c22a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d11b      	bne.n	801c26a <f_rename+0x6a>
		dj_new.fs = dj_old.fs;
 801c232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c234:	62fb      	str	r3, [r7, #44]	; 0x2c
		res = follow_path(&dj_old, path_old);	/* Check old object */
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801c23c:	4610      	mov	r0, r2
 801c23e:	4619      	mov	r1, r3
 801c240:	f7fd fe10 	bl	8019e64 <follow_path>
 801c244:	4603      	mov	r3, r0
 801c246:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
 801c24a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d10b      	bne.n	801c26a <f_rename+0x6a>
 801c252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c254:	f103 030b 	add.w	r3, r3, #11
 801c258:	781b      	ldrb	r3, [r3, #0]
 801c25a:	f003 0320 	and.w	r3, r3, #32
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d003      	beq.n	801c26a <f_rename+0x6a>
			res = FR_INVALID_NAME;
 801c262:	f04f 0306 	mov.w	r3, #6
 801c266:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
 801c26a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d002      	beq.n	801c278 <f_rename+0x78>
 801c272:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c276:	e0f2      	b.n	801c45e <f_rename+0x25e>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
 801c278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d102      	bne.n	801c284 <f_rename+0x84>
 801c27e:	f04f 0304 	mov.w	r3, #4
 801c282:	e0ec      	b.n	801c45e <f_rename+0x25e>
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
 801c284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c286:	f103 030b 	add.w	r3, r3, #11
 801c28a:	f107 0208 	add.w	r2, r7, #8
 801c28e:	4610      	mov	r0, r2
 801c290:	4619      	mov	r1, r3
 801c292:	f04f 0215 	mov.w	r2, #21
 801c296:	f7fc fc5d 	bl	8018b54 <mem_cpy>

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
 801c29a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c29e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c2a2:	4610      	mov	r0, r2
 801c2a4:	4619      	mov	r1, r3
 801c2a6:	f04f 021c 	mov.w	r2, #28
 801c2aa:	f7fc fc53 	bl	8018b54 <mem_cpy>
	res = follow_path(&dj_new, path_new);		/* Check new object */
 801c2ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c2b2:	4618      	mov	r0, r3
 801c2b4:	6839      	ldr	r1, [r7, #0]
 801c2b6:	f7fd fdd5 	bl	8019e64 <follow_path>
 801c2ba:	4603      	mov	r3, r0
 801c2bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
 801c2c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d103      	bne.n	801c2d0 <f_rename+0xd0>
 801c2c8:	f04f 0308 	mov.w	r3, #8
 801c2cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
 801c2d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c2d4:	2b04      	cmp	r3, #4
 801c2d6:	f040 80c0 	bne.w	801c45a <f_rename+0x25a>
		res = dir_register(&dj_new);			/* Register the new object */
 801c2da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c2de:	4618      	mov	r0, r3
 801c2e0:	f7fd fb5c 	bl	801999c <dir_register>
 801c2e4:	4603      	mov	r3, r0
 801c2e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (res == FR_OK) {
 801c2ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	f040 80b3 	bne.w	801c45a <f_rename+0x25a>
			dir = dj_new.dir;					/* Copy object information into new entry */
 801c2f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2f6:	66bb      	str	r3, [r7, #104]	; 0x68
			mem_cpy(dir+13, buf+2, 19);
 801c2f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c2fa:	f103 020d 	add.w	r2, r3, #13
 801c2fe:	f107 0308 	add.w	r3, r7, #8
 801c302:	f103 0302 	add.w	r3, r3, #2
 801c306:	4610      	mov	r0, r2
 801c308:	4619      	mov	r1, r3
 801c30a:	f04f 0213 	mov.w	r2, #19
 801c30e:	f7fc fc21 	bl	8018b54 <mem_cpy>
			dir[DIR_Attr] = buf[0] | AM_ARC;
 801c312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c314:	f103 030b 	add.w	r3, r3, #11
 801c318:	7a3a      	ldrb	r2, [r7, #8]
 801c31a:	f042 0220 	orr.w	r2, r2, #32
 801c31e:	b2d2      	uxtb	r2, r2
 801c320:	701a      	strb	r2, [r3, #0]
			dj_old.fs->wflag = 1;
 801c322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c324:	f04f 0201 	mov.w	r2, #1
 801c328:	711a      	strb	r2, [r3, #4]
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
 801c32a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c32c:	f103 030b 	add.w	r3, r3, #11
 801c330:	781b      	ldrb	r3, [r3, #0]
 801c332:	f003 0310 	and.w	r3, r3, #16
 801c336:	2b00      	cmp	r3, #0
 801c338:	d078      	beq.n	801c42c <f_rename+0x22c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
 801c33a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c33c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c33e:	f103 0315 	add.w	r3, r3, #21
 801c342:	781b      	ldrb	r3, [r3, #0]
 801c344:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c348:	b299      	uxth	r1, r3
 801c34a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c34c:	f103 0314 	add.w	r3, r3, #20
 801c350:	781b      	ldrb	r3, [r3, #0]
 801c352:	430b      	orrs	r3, r1
 801c354:	b29b      	uxth	r3, r3
 801c356:	b299      	uxth	r1, r3
 801c358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c35a:	f103 031b 	add.w	r3, r3, #27
 801c35e:	781b      	ldrb	r3, [r3, #0]
 801c360:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c364:	b298      	uxth	r0, r3
 801c366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c368:	f103 031a 	add.w	r3, r3, #26
 801c36c:	781b      	ldrb	r3, [r3, #0]
 801c36e:	4303      	orrs	r3, r0
 801c370:	b29b      	uxth	r3, r3
 801c372:	b29b      	uxth	r3, r3
 801c374:	430b      	orrs	r3, r1
 801c376:	b29b      	uxth	r3, r3
 801c378:	4610      	mov	r0, r2
 801c37a:	4619      	mov	r1, r3
 801c37c:	f7fd f8ce 	bl	801951c <clust2sect>
 801c380:	4603      	mov	r3, r0
 801c382:	667b      	str	r3, [r7, #100]	; 0x64
				if (!dw) {
 801c384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c386:	2b00      	cmp	r3, #0
 801c388:	d104      	bne.n	801c394 <f_rename+0x194>
					res = FR_INT_ERR;
 801c38a:	f04f 0302 	mov.w	r3, #2
 801c38e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 801c392:	e04b      	b.n	801c42c <f_rename+0x22c>
				} else {
					res = move_window(dj_new.fs, dw);
 801c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c396:	4618      	mov	r0, r3
 801c398:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801c39a:	f7fc fc79 	bl	8018c90 <move_window>
 801c39e:	4603      	mov	r3, r0
 801c3a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					dir = dj_new.fs->win+32;
 801c3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3a6:	f103 0354 	add.w	r3, r3, #84	; 0x54
 801c3aa:	66bb      	str	r3, [r7, #104]	; 0x68
					if (res == FR_OK && dir[1] == '.') {
 801c3ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d13b      	bne.n	801c42c <f_rename+0x22c>
 801c3b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c3b6:	f103 0301 	add.w	r3, r3, #1
 801c3ba:	781b      	ldrb	r3, [r3, #0]
 801c3bc:	2b2e      	cmp	r3, #46	; 0x2e
 801c3be:	d135      	bne.n	801c42c <f_rename+0x22c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
 801c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3c2:	781b      	ldrb	r3, [r3, #0]
 801c3c4:	2b03      	cmp	r3, #3
 801c3c6:	d104      	bne.n	801c3d2 <f_rename+0x1d2>
 801c3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3ce:	429a      	cmp	r2, r3
 801c3d0:	d001      	beq.n	801c3d6 <f_rename+0x1d6>
 801c3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3d4:	e001      	b.n	801c3da <f_rename+0x1da>
 801c3d6:	f04f 0300 	mov.w	r3, #0
 801c3da:	667b      	str	r3, [r7, #100]	; 0x64
						ST_WORD(dir+DIR_FstClusLO, dw);
 801c3dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c3de:	f103 031a 	add.w	r3, r3, #26
 801c3e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c3e4:	b2d2      	uxtb	r2, r2
 801c3e6:	701a      	strb	r2, [r3, #0]
 801c3e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c3ea:	f103 031b 	add.w	r3, r3, #27
 801c3ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c3f0:	b292      	uxth	r2, r2
 801c3f2:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c3f6:	b292      	uxth	r2, r2
 801c3f8:	b2d2      	uxtb	r2, r2
 801c3fa:	701a      	strb	r2, [r3, #0]
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
 801c3fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c3fe:	f103 0314 	add.w	r3, r3, #20
 801c402:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c404:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801c408:	b2d2      	uxtb	r2, r2
 801c40a:	701a      	strb	r2, [r3, #0]
 801c40c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c40e:	f103 0315 	add.w	r3, r3, #21
 801c412:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c414:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801c418:	b292      	uxth	r2, r2
 801c41a:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c41e:	b292      	uxth	r2, r2
 801c420:	b2d2      	uxtb	r2, r2
 801c422:	701a      	strb	r2, [r3, #0]
						dj_new.fs->wflag = 1;
 801c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c426:	f04f 0201 	mov.w	r2, #1
 801c42a:	711a      	strb	r2, [r3, #4]
					}
				}
			}
			if (res == FR_OK) {
 801c42c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c430:	2b00      	cmp	r3, #0
 801c432:	d112      	bne.n	801c45a <f_rename+0x25a>
				res = dir_remove(&dj_old);			/* Remove old entry */
 801c434:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c438:	4618      	mov	r0, r3
 801c43a:	f7fd fb19 	bl	8019a70 <dir_remove>
 801c43e:	4603      	mov	r3, r0
 801c440:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK)
 801c444:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d106      	bne.n	801c45a <f_rename+0x25a>
					res = sync(dj_old.fs);
 801c44c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c44e:	4618      	mov	r0, r3
 801c450:	f7fc fc88 	bl	8018d64 <sync>
 801c454:	4603      	mov	r3, r0
 801c456:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
 801c45a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801c45e:	4618      	mov	r0, r3
 801c460:	f107 0770 	add.w	r7, r7, #112	; 0x70
 801c464:	46bd      	mov	sp, r7
 801c466:	bd80      	pop	{r7, pc}

0801c468 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b094      	sub	sp, #80	; 0x50
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	4613      	mov	r3, r2
 801c470:	4602      	mov	r2, r0
 801c472:	71fa      	strb	r2, [r7, #7]
 801c474:	460a      	mov	r2, r1
 801c476:	71ba      	strb	r2, [r7, #6]
 801c478:	80bb      	strh	r3, [r7, #4]
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 801c47a:	79fb      	ldrb	r3, [r7, #7]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d003      	beq.n	801c488 <f_mkfs+0x20>
 801c480:	f04f 030b 	mov.w	r3, #11
 801c484:	f000 bdb1 	b.w	801cfea <f_mkfs+0xb82>
	if (partition >= 2) return FR_MKFS_ABORTED;
 801c488:	79bb      	ldrb	r3, [r7, #6]
 801c48a:	2b01      	cmp	r3, #1
 801c48c:	d903      	bls.n	801c496 <f_mkfs+0x2e>
 801c48e:	f04f 030e 	mov.w	r3, #14
 801c492:	f000 bdaa 	b.w	801cfea <f_mkfs+0xb82>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
 801c496:	79fa      	ldrb	r2, [r7, #7]
 801c498:	f241 03f8 	movw	r3, #4344	; 0x10f8
 801c49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801c4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c4a4:	633b      	str	r3, [r7, #48]	; 0x30
	if (!fs) return FR_NOT_ENABLED;
 801c4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d103      	bne.n	801c4b4 <f_mkfs+0x4c>
 801c4ac:	f04f 030c 	mov.w	r3, #12
 801c4b0:	f000 bd9b 	b.w	801cfea <f_mkfs+0xb82>
	fs->fs_type = 0;
 801c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4b6:	f04f 0200 	mov.w	r2, #0
 801c4ba:	701a      	strb	r2, [r3, #0]
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
 801c4bc:	79fb      	ldrb	r3, [r7, #7]
 801c4be:	4618      	mov	r0, r3
 801c4c0:	f7e8 ff6c 	bl	800539c <disk_initialize>
 801c4c4:	4603      	mov	r3, r0
 801c4c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801c4ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c4ce:	f003 0301 	and.w	r3, r3, #1
 801c4d2:	b2db      	uxtb	r3, r3
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d003      	beq.n	801c4e0 <f_mkfs+0x78>
 801c4d8:	f04f 0303 	mov.w	r3, #3
 801c4dc:	f000 bd85 	b.w	801cfea <f_mkfs+0xb82>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801c4e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c4e4:	f003 0304 	and.w	r3, r3, #4
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d003      	beq.n	801c4f4 <f_mkfs+0x8c>
 801c4ec:	f04f 030a 	mov.w	r3, #10
 801c4f0:	f000 bd7b 	b.w	801cfea <f_mkfs+0xb82>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
 801c4f4:	79fa      	ldrb	r2, [r7, #7]
 801c4f6:	f107 0310 	add.w	r3, r7, #16
 801c4fa:	4610      	mov	r0, r2
 801c4fc:	f04f 0101 	mov.w	r1, #1
 801c500:	461a      	mov	r2, r3
 801c502:	f7e9 f855 	bl	80055b0 <disk_ioctl>
 801c506:	4603      	mov	r3, r0
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d104      	bne.n	801c516 <f_mkfs+0xae>
 801c50c:	693a      	ldr	r2, [r7, #16]
 801c50e:	f240 73cf 	movw	r3, #1999	; 0x7cf
 801c512:	429a      	cmp	r2, r3
 801c514:	d803      	bhi.n	801c51e <f_mkfs+0xb6>
		return FR_MKFS_ABORTED;
 801c516:	f04f 030e 	mov.w	r3, #14
 801c51a:	f000 bd66 	b.w	801cfea <f_mkfs+0xb82>
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
 801c51e:	693b      	ldr	r3, [r7, #16]
 801c520:	f1b3 6ffa 	cmp.w	r3, #131072000	; 0x7d00000
 801c524:	d902      	bls.n	801c52c <f_mkfs+0xc4>
 801c526:	f04f 63fa 	mov.w	r3, #131072000	; 0x7d00000
 801c52a:	613b      	str	r3, [r7, #16]
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
 801c52c:	79bb      	ldrb	r3, [r7, #6]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d102      	bne.n	801c538 <f_mkfs+0xd0>
 801c532:	f04f 033f 	mov.w	r3, #63	; 0x3f
 801c536:	e001      	b.n	801c53c <f_mkfs+0xd4>
 801c538:	f04f 0300 	mov.w	r3, #0
 801c53c:	62bb      	str	r3, [r7, #40]	; 0x28
	n_part -= b_part;
 801c53e:	693a      	ldr	r2, [r7, #16]
 801c540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c542:	1ad3      	subs	r3, r2, r3
 801c544:	613b      	str	r3, [r7, #16]
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
 801c546:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c54a:	63bb      	str	r3, [r7, #56]	; 0x38
 801c54c:	e003      	b.n	801c556 <f_mkfs+0xee>
 801c54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c550:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c554:	63bb      	str	r3, [r7, #56]	; 0x38
 801c556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c55c:	d803      	bhi.n	801c566 <f_mkfs+0xfe>
 801c55e:	88ba      	ldrh	r2, [r7, #4]
 801c560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c562:	429a      	cmp	r2, r3
 801c564:	d1f3      	bne.n	801c54e <f_mkfs+0xe6>
	if (d != allocsize) allocsize = 0;
 801c566:	88ba      	ldrh	r2, [r7, #4]
 801c568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c56a:	429a      	cmp	r2, r3
 801c56c:	d002      	beq.n	801c574 <f_mkfs+0x10c>
 801c56e:	f04f 0300 	mov.w	r3, #0
 801c572:	80bb      	strh	r3, [r7, #4]
	if (!allocsize) {					/* Auto selection of cluster size */
 801c574:	88bb      	ldrh	r3, [r7, #4]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d12b      	bne.n	801c5d2 <f_mkfs+0x16a>
		d = n_part;
 801c57a:	693b      	ldr	r3, [r7, #16]
 801c57c:	63bb      	str	r3, [r7, #56]	; 0x38
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
 801c57e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c582:	86fb      	strh	r3, [r7, #54]	; 0x36
 801c584:	e007      	b.n	801c596 <f_mkfs+0x12e>
 801c586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c588:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801c58c:	63bb      	str	r3, [r7, #56]	; 0x38
 801c58e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c590:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801c594:	86fb      	strh	r3, [r7, #54]	; 0x36
 801c596:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c59c:	d8f3      	bhi.n	801c586 <f_mkfs+0x11e>
		for (n = 0; d < sstbl[n]; n++) ;
 801c59e:	f04f 0300 	mov.w	r3, #0
 801c5a2:	60fb      	str	r3, [r7, #12]
 801c5a4:	e003      	b.n	801c5ae <f_mkfs+0x146>
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	f103 0301 	add.w	r3, r3, #1
 801c5ac:	60fb      	str	r3, [r7, #12]
 801c5ae:	68fa      	ldr	r2, [r7, #12]
 801c5b0:	f645 13b0 	movw	r3, #22960	; 0x59b0
 801c5b4:	f6c0 0303 	movt	r3, #2051	; 0x803
 801c5b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5be:	429a      	cmp	r2, r3
 801c5c0:	d8f1      	bhi.n	801c5a6 <f_mkfs+0x13e>
		allocsize = cstbl[n];
 801c5c2:	68fa      	ldr	r2, [r7, #12]
 801c5c4:	f645 13dc 	movw	r3, #23004	; 0x59dc
 801c5c8:	f6c0 0303 	movt	r3, #2051	; 0x803
 801c5cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801c5d0:	80bb      	strh	r3, [r7, #4]
	}
	if (allocsize < SS(fs)) allocsize = SS(fs); 
 801c5d2:	88ba      	ldrh	r2, [r7, #4]
 801c5d4:	f240 13ff 	movw	r3, #511	; 0x1ff
 801c5d8:	429a      	cmp	r2, r3
 801c5da:	d802      	bhi.n	801c5e2 <f_mkfs+0x17a>
 801c5dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c5e0:	80bb      	strh	r3, [r7, #4]
            
	allocsize /= SS(fs);		/* Number of sectors per cluster */
 801c5e2:	88bb      	ldrh	r3, [r7, #4]
 801c5e4:	ea4f 2353 	mov.w	r3, r3, lsr #9
 801c5e8:	80bb      	strh	r3, [r7, #4]

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
 801c5ea:	693a      	ldr	r2, [r7, #16]
 801c5ec:	88bb      	ldrh	r3, [r7, #4]
 801c5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 801c5f2:	627b      	str	r3, [r7, #36]	; 0x24
	fmt = FS_FAT12;
 801c5f4:	f04f 0301 	mov.w	r3, #1
 801c5f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (n_clst >= 0xFF5) 
 801c5fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5fe:	f640 73f4 	movw	r3, #4084	; 0xff4
 801c602:	429a      	cmp	r2, r3
 801c604:	d903      	bls.n	801c60e <f_mkfs+0x1a6>
          fmt = FS_FAT16;
 801c606:	f04f 0302 	mov.w	r3, #2
 801c60a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (n_clst >= 0xFFF5) 
 801c60e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c610:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 801c614:	429a      	cmp	r2, r3
 801c616:	d903      	bls.n	801c620 <f_mkfs+0x1b8>
          fmt = FS_FAT32;
 801c618:	f04f 0303 	mov.w	r3, #3
 801c61c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	/* Determine offset and size of FAT structure */
	switch (fmt) {
 801c620:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801c624:	2b01      	cmp	r3, #1
 801c626:	d002      	beq.n	801c62e <f_mkfs+0x1c6>
 801c628:	2b02      	cmp	r3, #2
 801c62a:	d018      	beq.n	801c65e <f_mkfs+0x1f6>
 801c62c:	e029      	b.n	801c682 <f_mkfs+0x21a>
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
 801c62e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c630:	4613      	mov	r3, r2
 801c632:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c636:	189b      	adds	r3, r3, r2
 801c638:	f103 0301 	add.w	r3, r3, #1
 801c63c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801c640:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801c644:	f103 0302 	add.w	r3, r3, #2
 801c648:	ea4f 2353 	mov.w	r3, r3, lsr #9
 801c64c:	643b      	str	r3, [r7, #64]	; 0x40
		n_rsv = 1 + partition;
 801c64e:	79bb      	ldrb	r3, [r7, #6]
 801c650:	f103 0301 	add.w	r3, r3, #1
 801c654:	647b      	str	r3, [r7, #68]	; 0x44
		n_dir = N_ROOTDIR * 32 / SS(fs);
 801c656:	f04f 0320 	mov.w	r3, #32
 801c65a:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 801c65c:	e023      	b.n	801c6a6 <f_mkfs+0x23e>
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
 801c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c660:	f503 7381 	add.w	r3, r3, #258	; 0x102
 801c664:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c668:	f103 33ff 	add.w	r3, r3, #4294967295
 801c66c:	ea4f 2353 	mov.w	r3, r3, lsr #9
 801c670:	643b      	str	r3, [r7, #64]	; 0x40
		n_rsv = 1 + partition;
 801c672:	79bb      	ldrb	r3, [r7, #6]
 801c674:	f103 0301 	add.w	r3, r3, #1
 801c678:	647b      	str	r3, [r7, #68]	; 0x44
		n_dir = N_ROOTDIR * 32 / SS(fs);
 801c67a:	f04f 0320 	mov.w	r3, #32
 801c67e:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 801c680:	e011      	b.n	801c6a6 <f_mkfs+0x23e>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 801c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c684:	f103 0382 	add.w	r3, r3, #130	; 0x82
 801c688:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801c68c:	f103 33ff 	add.w	r3, r3, #4294967295
 801c690:	ea4f 2353 	mov.w	r3, r3, lsr #9
 801c694:	643b      	str	r3, [r7, #64]	; 0x40
		n_rsv = 33 - partition;
 801c696:	79bb      	ldrb	r3, [r7, #6]
 801c698:	f1c3 0321 	rsb	r3, r3, #33	; 0x21
 801c69c:	647b      	str	r3, [r7, #68]	; 0x44
		n_dir = 0;
 801c69e:	f04f 0300 	mov.w	r3, #0
 801c6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 801c6a4:	bf00      	nop
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
 801c6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c6aa:	18d3      	adds	r3, r2, r3
 801c6ac:	64bb      	str	r3, [r7, #72]	; 0x48
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
 801c6ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c6b2:	18d3      	adds	r3, r2, r3
 801c6b4:	623b      	str	r3, [r7, #32]
	b_data = b_dir + n_dir;			/* Data start sector */
 801c6b6:	6a3a      	ldr	r2, [r7, #32]
 801c6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c6ba:	18d3      	adds	r3, r2, r3
 801c6bc:	61fb      	str	r3, [r7, #28]

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
 801c6be:	79fa      	ldrb	r2, [r7, #7]
 801c6c0:	f107 030c 	add.w	r3, r7, #12
 801c6c4:	4610      	mov	r0, r2
 801c6c6:	f04f 0103 	mov.w	r1, #3
 801c6ca:	461a      	mov	r2, r3
 801c6cc:	f7e8 ff70 	bl	80055b0 <disk_ioctl>
 801c6d0:	4603      	mov	r3, r0
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d003      	beq.n	801c6de <f_mkfs+0x276>
 801c6d6:	f04f 030e 	mov.w	r3, #14
 801c6da:	f000 bc86 	b.w	801cfea <f_mkfs+0xb82>
	n = (b_data + n - 1) & ~(n - 1);
 801c6de:	68fa      	ldr	r2, [r7, #12]
 801c6e0:	69fb      	ldr	r3, [r7, #28]
 801c6e2:	18d3      	adds	r3, r2, r3
 801c6e4:	f103 32ff 	add.w	r2, r3, #4294967295
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	f1c3 0300 	rsb	r3, r3, #0
 801c6ee:	4013      	ands	r3, r2
 801c6f0:	60fb      	str	r3, [r7, #12]
	n_fat += (n - b_data) / N_FATS;
 801c6f2:	68fa      	ldr	r2, [r7, #12]
 801c6f4:	69fb      	ldr	r3, [r7, #28]
 801c6f6:	1ad3      	subs	r3, r2, r3
 801c6f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c6fa:	18d3      	adds	r3, r2, r3
 801c6fc:	643b      	str	r3, [r7, #64]	; 0x40
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
 801c6fe:	693a      	ldr	r2, [r7, #16]
 801c700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c702:	1ad2      	subs	r2, r2, r3
 801c704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c706:	1ad2      	subs	r2, r2, r3
 801c708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c70a:	1ad2      	subs	r2, r2, r3
 801c70c:	88bb      	ldrh	r3, [r7, #4]
 801c70e:	fbb2 f3f3 	udiv	r3, r2, r3
 801c712:	627b      	str	r3, [r7, #36]	; 0x24
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
 801c714:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801c718:	2b02      	cmp	r3, #2
 801c71a:	d104      	bne.n	801c726 <f_mkfs+0x2be>
 801c71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c71e:	f640 73f4 	movw	r3, #4084	; 0xff4
 801c722:	429a      	cmp	r2, r3
 801c724:	d908      	bls.n	801c738 <f_mkfs+0x2d0>
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
 801c726:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801c72a:	2b03      	cmp	r3, #3
 801c72c:	d108      	bne.n	801c740 <f_mkfs+0x2d8>
 801c72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c730:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 801c734:	429a      	cmp	r2, r3
 801c736:	d803      	bhi.n	801c740 <f_mkfs+0x2d8>
		return FR_MKFS_ABORTED;
 801c738:	f04f 030e 	mov.w	r3, #14
 801c73c:	f000 bc55 	b.w	801cfea <f_mkfs+0xb82>

	/* Create partition table if needed */
	if (!partition) {
 801c740:	79bb      	ldrb	r3, [r7, #6]
 801c742:	2b00      	cmp	r3, #0
 801c744:	f040 80d4 	bne.w	801c8f0 <f_mkfs+0x488>
		DWORD n_disk = b_part + n_part;
 801c748:	693b      	ldr	r3, [r7, #16]
 801c74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c74c:	18d3      	adds	r3, r2, r3
 801c74e:	61bb      	str	r3, [r7, #24]

		mem_set(fs->win, 0, SS(fs));
 801c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c752:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801c756:	4618      	mov	r0, r3
 801c758:	f04f 0100 	mov.w	r1, #0
 801c75c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c760:	f7fc fa20 	bl	8018ba4 <mem_set>
		tbl = fs->win+MBR_Table;
 801c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c766:	f503 73f9 	add.w	r3, r3, #498	; 0x1f2
 801c76a:	617b      	str	r3, [r7, #20]
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
 801c76c:	697b      	ldr	r3, [r7, #20]
 801c76e:	f04f 0280 	mov.w	r2, #128	; 0x80
 801c772:	701a      	strb	r2, [r3, #0]
 801c774:	697b      	ldr	r3, [r7, #20]
 801c776:	f103 0301 	add.w	r3, r3, #1
 801c77a:	f04f 0201 	mov.w	r2, #1
 801c77e:	701a      	strb	r2, [r3, #0]
 801c780:	697b      	ldr	r3, [r7, #20]
 801c782:	f103 0302 	add.w	r3, r3, #2
 801c786:	f04f 0201 	mov.w	r2, #1
 801c78a:	701a      	strb	r2, [r3, #0]
 801c78c:	697b      	ldr	r3, [r7, #20]
 801c78e:	f103 0303 	add.w	r3, r3, #3
 801c792:	f04f 0200 	mov.w	r2, #0
 801c796:	701a      	strb	r2, [r3, #0]
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
 801c798:	69ba      	ldr	r2, [r7, #24]
 801c79a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801c79e:	f2c0 03fb 	movt	r3, #251	; 0xfb
 801c7a2:	429a      	cmp	r2, r3
 801c7a4:	d81f      	bhi.n	801c7e6 <f_mkfs+0x37e>
			n_disk = n_disk / 63 / 255;
 801c7a6:	69ba      	ldr	r2, [r7, #24]
 801c7a8:	f245 635b 	movw	r3, #22107	; 0x565b
 801c7ac:	f2c0 5315 	movt	r3, #1301	; 0x515
 801c7b0:	fba3 1302 	umull	r1, r3, r3, r2
 801c7b4:	1ad2      	subs	r2, r2, r3
 801c7b6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801c7ba:	189b      	adds	r3, r3, r2
 801c7bc:	ea4f 3353 	mov.w	r3, r3, lsr #13
 801c7c0:	61bb      	str	r3, [r7, #24]
			tbl[7] = (BYTE)n_disk;
 801c7c2:	697b      	ldr	r3, [r7, #20]
 801c7c4:	f103 0307 	add.w	r3, r3, #7
 801c7c8:	69ba      	ldr	r2, [r7, #24]
 801c7ca:	b2d2      	uxtb	r2, r2
 801c7cc:	701a      	strb	r2, [r3, #0]
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	f103 0306 	add.w	r3, r3, #6
 801c7d4:	69ba      	ldr	r2, [r7, #24]
 801c7d6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c7da:	b2d2      	uxtb	r2, r2
 801c7dc:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801c7e0:	b2d2      	uxtb	r2, r2
 801c7e2:	701a      	strb	r2, [r3, #0]
 801c7e4:	e00b      	b.n	801c7fe <f_mkfs+0x396>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
 801c7e6:	697b      	ldr	r3, [r7, #20]
 801c7e8:	f103 0306 	add.w	r3, r3, #6
 801c7ec:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801c7f0:	701a      	strb	r2, [r3, #0]
 801c7f2:	697b      	ldr	r3, [r7, #20]
 801c7f4:	f103 0307 	add.w	r3, r3, #7
 801c7f8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801c7fc:	701a      	strb	r2, [r3, #0]
		}
		tbl[5] = 254;
 801c7fe:	697b      	ldr	r3, [r7, #20]
 801c800:	f103 0305 	add.w	r3, r3, #5
 801c804:	f04f 02fe 	mov.w	r2, #254	; 0xfe
 801c808:	701a      	strb	r2, [r3, #0]
		if (fmt != FS_FAT32)			/* System ID */
 801c80a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801c80e:	2b03      	cmp	r3, #3
 801c810:	d00e      	beq.n	801c830 <f_mkfs+0x3c8>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
 801c812:	697b      	ldr	r3, [r7, #20]
 801c814:	f103 0204 	add.w	r2, r3, #4
 801c818:	6939      	ldr	r1, [r7, #16]
 801c81a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c81e:	4299      	cmp	r1, r3
 801c820:	d802      	bhi.n	801c828 <f_mkfs+0x3c0>
 801c822:	f04f 0304 	mov.w	r3, #4
 801c826:	e001      	b.n	801c82c <f_mkfs+0x3c4>
 801c828:	f04f 0306 	mov.w	r3, #6
 801c82c:	7013      	strb	r3, [r2, #0]
 801c82e:	e005      	b.n	801c83c <f_mkfs+0x3d4>
		else
			tbl[4] = 0x0c;
 801c830:	697b      	ldr	r3, [r7, #20]
 801c832:	f103 0304 	add.w	r3, r3, #4
 801c836:	f04f 020c 	mov.w	r2, #12
 801c83a:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 801c83c:	697b      	ldr	r3, [r7, #20]
 801c83e:	f103 0308 	add.w	r3, r3, #8
 801c842:	f04f 023f 	mov.w	r2, #63	; 0x3f
 801c846:	701a      	strb	r2, [r3, #0]
 801c848:	697b      	ldr	r3, [r7, #20]
 801c84a:	f103 0309 	add.w	r3, r3, #9
 801c84e:	f04f 0200 	mov.w	r2, #0
 801c852:	701a      	strb	r2, [r3, #0]
 801c854:	697b      	ldr	r3, [r7, #20]
 801c856:	f103 030a 	add.w	r3, r3, #10
 801c85a:	f04f 0200 	mov.w	r2, #0
 801c85e:	701a      	strb	r2, [r3, #0]
 801c860:	697b      	ldr	r3, [r7, #20]
 801c862:	f103 030b 	add.w	r3, r3, #11
 801c866:	f04f 0200 	mov.w	r2, #0
 801c86a:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
 801c86c:	697b      	ldr	r3, [r7, #20]
 801c86e:	f103 030c 	add.w	r3, r3, #12
 801c872:	693a      	ldr	r2, [r7, #16]
 801c874:	b2d2      	uxtb	r2, r2
 801c876:	701a      	strb	r2, [r3, #0]
 801c878:	697b      	ldr	r3, [r7, #20]
 801c87a:	f103 030d 	add.w	r3, r3, #13
 801c87e:	693a      	ldr	r2, [r7, #16]
 801c880:	b292      	uxth	r2, r2
 801c882:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c886:	b292      	uxth	r2, r2
 801c888:	b2d2      	uxtb	r2, r2
 801c88a:	701a      	strb	r2, [r3, #0]
 801c88c:	697b      	ldr	r3, [r7, #20]
 801c88e:	f103 030e 	add.w	r3, r3, #14
 801c892:	693a      	ldr	r2, [r7, #16]
 801c894:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801c898:	b2d2      	uxtb	r2, r2
 801c89a:	701a      	strb	r2, [r3, #0]
 801c89c:	697b      	ldr	r3, [r7, #20]
 801c89e:	f103 030f 	add.w	r3, r3, #15
 801c8a2:	693a      	ldr	r2, [r7, #16]
 801c8a4:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801c8a8:	b2d2      	uxtb	r2, r2
 801c8aa:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
 801c8ac:	697b      	ldr	r3, [r7, #20]
 801c8ae:	f103 0340 	add.w	r3, r3, #64	; 0x40
 801c8b2:	f04f 0255 	mov.w	r2, #85	; 0x55
 801c8b6:	701a      	strb	r2, [r3, #0]
 801c8b8:	697b      	ldr	r3, [r7, #20]
 801c8ba:	f103 0341 	add.w	r3, r3, #65	; 0x41
 801c8be:	f04f 02aa 	mov.w	r2, #170	; 0xaa
 801c8c2:	701a      	strb	r2, [r3, #0]
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
 801c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8c6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801c8ca:	79fa      	ldrb	r2, [r7, #7]
 801c8cc:	4610      	mov	r0, r2
 801c8ce:	4619      	mov	r1, r3
 801c8d0:	f04f 0200 	mov.w	r2, #0
 801c8d4:	f04f 0301 	mov.w	r3, #1
 801c8d8:	f7e8 fdfe 	bl	80054d8 <disk_write>
 801c8dc:	4603      	mov	r3, r0
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d002      	beq.n	801c8e8 <f_mkfs+0x480>
			return FR_DISK_ERR;
 801c8e2:	f04f 0301 	mov.w	r3, #1
 801c8e6:	e380      	b.n	801cfea <f_mkfs+0xb82>
		partition = 0xF8;
 801c8e8:	f04f 03f8 	mov.w	r3, #248	; 0xf8
 801c8ec:	71bb      	strb	r3, [r7, #6]
 801c8ee:	e002      	b.n	801c8f6 <f_mkfs+0x48e>
	} else {
		partition = 0xF0;
 801c8f0:	f04f 03f0 	mov.w	r3, #240	; 0xf0
 801c8f4:	71bb      	strb	r3, [r7, #6]
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
 801c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8f8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801c8fc:	617b      	str	r3, [r7, #20]
	mem_set(tbl, 0, SS(fs));
 801c8fe:	6978      	ldr	r0, [r7, #20]
 801c900:	f04f 0100 	mov.w	r1, #0
 801c904:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c908:	f7fc f94c 	bl	8018ba4 <mem_set>
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
 801c90c:	697b      	ldr	r3, [r7, #20]
 801c90e:	f04f 02eb 	mov.w	r2, #235	; 0xeb
 801c912:	701a      	strb	r2, [r3, #0]
 801c914:	697b      	ldr	r3, [r7, #20]
 801c916:	f103 0301 	add.w	r3, r3, #1
 801c91a:	f04f 02fe 	mov.w	r2, #254	; 0xfe
 801c91e:	701a      	strb	r2, [r3, #0]
 801c920:	697b      	ldr	r3, [r7, #20]
 801c922:	f103 0302 	add.w	r3, r3, #2
 801c926:	f04f 0290 	mov.w	r2, #144	; 0x90
 801c92a:	701a      	strb	r2, [r3, #0]
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	f103 0303 	add.w	r3, r3, #3
 801c932:	f04f 0200 	mov.w	r2, #0
 801c936:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
 801c938:	697b      	ldr	r3, [r7, #20]
 801c93a:	f103 030b 	add.w	r3, r3, #11
 801c93e:	f04f 0200 	mov.w	r2, #0
 801c942:	701a      	strb	r2, [r3, #0]
 801c944:	697b      	ldr	r3, [r7, #20]
 801c946:	f103 030c 	add.w	r3, r3, #12
 801c94a:	f04f 0202 	mov.w	r2, #2
 801c94e:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
 801c950:	697b      	ldr	r3, [r7, #20]
 801c952:	f103 030d 	add.w	r3, r3, #13
 801c956:	88ba      	ldrh	r2, [r7, #4]
 801c958:	b2d2      	uxtb	r2, r2
 801c95a:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
 801c95c:	697b      	ldr	r3, [r7, #20]
 801c95e:	f103 030e 	add.w	r3, r3, #14
 801c962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c964:	b2d2      	uxtb	r2, r2
 801c966:	701a      	strb	r2, [r3, #0]
 801c968:	697b      	ldr	r3, [r7, #20]
 801c96a:	f103 030f 	add.w	r3, r3, #15
 801c96e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c970:	b292      	uxth	r2, r2
 801c972:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c976:	b292      	uxth	r2, r2
 801c978:	b2d2      	uxtb	r2, r2
 801c97a:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
 801c97c:	697b      	ldr	r3, [r7, #20]
 801c97e:	f103 0310 	add.w	r3, r3, #16
 801c982:	f04f 0201 	mov.w	r2, #1
 801c986:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
 801c988:	697b      	ldr	r3, [r7, #20]
 801c98a:	f103 0311 	add.w	r3, r3, #17
 801c98e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c990:	b2d2      	uxtb	r2, r2
 801c992:	ea4f 1202 	mov.w	r2, r2, lsl #4
 801c996:	b2d2      	uxtb	r2, r2
 801c998:	701a      	strb	r2, [r3, #0]
 801c99a:	697b      	ldr	r3, [r7, #20]
 801c99c:	f103 0312 	add.w	r3, r3, #18
 801c9a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c9a2:	b292      	uxth	r2, r2
 801c9a4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 801c9a8:	b292      	uxth	r2, r2
 801c9aa:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c9ae:	b292      	uxth	r2, r2
 801c9b0:	b2d2      	uxtb	r2, r2
 801c9b2:	701a      	strb	r2, [r3, #0]
	if (n_part < 0x10000) {						/* Number of total sectors */
 801c9b4:	693a      	ldr	r2, [r7, #16]
 801c9b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c9ba:	429a      	cmp	r2, r3
 801c9bc:	d810      	bhi.n	801c9e0 <f_mkfs+0x578>
		ST_WORD(tbl+BPB_TotSec16, n_part);
 801c9be:	697b      	ldr	r3, [r7, #20]
 801c9c0:	f103 0313 	add.w	r3, r3, #19
 801c9c4:	693a      	ldr	r2, [r7, #16]
 801c9c6:	b2d2      	uxtb	r2, r2
 801c9c8:	701a      	strb	r2, [r3, #0]
 801c9ca:	697b      	ldr	r3, [r7, #20]
 801c9cc:	f103 0314 	add.w	r3, r3, #20
 801c9d0:	693a      	ldr	r2, [r7, #16]
 801c9d2:	b292      	uxth	r2, r2
 801c9d4:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c9d8:	b292      	uxth	r2, r2
 801c9da:	b2d2      	uxtb	r2, r2
 801c9dc:	701a      	strb	r2, [r3, #0]
 801c9de:	e01f      	b.n	801ca20 <f_mkfs+0x5b8>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
 801c9e0:	697b      	ldr	r3, [r7, #20]
 801c9e2:	f103 0320 	add.w	r3, r3, #32
 801c9e6:	693a      	ldr	r2, [r7, #16]
 801c9e8:	b2d2      	uxtb	r2, r2
 801c9ea:	701a      	strb	r2, [r3, #0]
 801c9ec:	697b      	ldr	r3, [r7, #20]
 801c9ee:	f103 0321 	add.w	r3, r3, #33	; 0x21
 801c9f2:	693a      	ldr	r2, [r7, #16]
 801c9f4:	b292      	uxth	r2, r2
 801c9f6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801c9fa:	b292      	uxth	r2, r2
 801c9fc:	b2d2      	uxtb	r2, r2
 801c9fe:	701a      	strb	r2, [r3, #0]
 801ca00:	697b      	ldr	r3, [r7, #20]
 801ca02:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801ca06:	693a      	ldr	r2, [r7, #16]
 801ca08:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801ca0c:	b2d2      	uxtb	r2, r2
 801ca0e:	701a      	strb	r2, [r3, #0]
 801ca10:	697b      	ldr	r3, [r7, #20]
 801ca12:	f103 0323 	add.w	r3, r3, #35	; 0x23
 801ca16:	693a      	ldr	r2, [r7, #16]
 801ca18:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801ca1c:	b2d2      	uxtb	r2, r2
 801ca1e:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
 801ca20:	697b      	ldr	r3, [r7, #20]
 801ca22:	f103 0315 	add.w	r3, r3, #21
 801ca26:	79ba      	ldrb	r2, [r7, #6]
 801ca28:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
 801ca2a:	697b      	ldr	r3, [r7, #20]
 801ca2c:	f103 0318 	add.w	r3, r3, #24
 801ca30:	f04f 023f 	mov.w	r2, #63	; 0x3f
 801ca34:	701a      	strb	r2, [r3, #0]
 801ca36:	697b      	ldr	r3, [r7, #20]
 801ca38:	f103 0319 	add.w	r3, r3, #25
 801ca3c:	f04f 0200 	mov.w	r2, #0
 801ca40:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
 801ca42:	697b      	ldr	r3, [r7, #20]
 801ca44:	f103 031a 	add.w	r3, r3, #26
 801ca48:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801ca4c:	701a      	strb	r2, [r3, #0]
 801ca4e:	697b      	ldr	r3, [r7, #20]
 801ca50:	f103 031b 	add.w	r3, r3, #27
 801ca54:	f04f 0200 	mov.w	r2, #0
 801ca58:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
 801ca5a:	697b      	ldr	r3, [r7, #20]
 801ca5c:	f103 031c 	add.w	r3, r3, #28
 801ca60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca62:	b2d2      	uxtb	r2, r2
 801ca64:	701a      	strb	r2, [r3, #0]
 801ca66:	697b      	ldr	r3, [r7, #20]
 801ca68:	f103 031d 	add.w	r3, r3, #29
 801ca6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca6e:	b292      	uxth	r2, r2
 801ca70:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801ca74:	b292      	uxth	r2, r2
 801ca76:	b2d2      	uxtb	r2, r2
 801ca78:	701a      	strb	r2, [r3, #0]
 801ca7a:	697b      	ldr	r3, [r7, #20]
 801ca7c:	f103 031e 	add.w	r3, r3, #30
 801ca80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca82:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801ca86:	b2d2      	uxtb	r2, r2
 801ca88:	701a      	strb	r2, [r3, #0]
 801ca8a:	697b      	ldr	r3, [r7, #20]
 801ca8c:	f103 031f 	add.w	r3, r3, #31
 801ca90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca92:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801ca96:	b2d2      	uxtb	r2, r2
 801ca98:	701a      	strb	r2, [r3, #0]
	n = get_fattime();							/* Use current time as a VSN */
 801ca9a:	f001 f95d 	bl	801dd58 <get_fattime>
 801ca9e:	4603      	mov	r3, r0
 801caa0:	60fb      	str	r3, [r7, #12]
	if (fmt != FS_FAT32) {
 801caa2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801caa6:	2b03      	cmp	r3, #3
 801caa8:	d048      	beq.n	801cb3c <f_mkfs+0x6d4>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
 801caaa:	697b      	ldr	r3, [r7, #20]
 801caac:	f103 0327 	add.w	r3, r3, #39	; 0x27
 801cab0:	68fa      	ldr	r2, [r7, #12]
 801cab2:	b2d2      	uxtb	r2, r2
 801cab4:	701a      	strb	r2, [r3, #0]
 801cab6:	697b      	ldr	r3, [r7, #20]
 801cab8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 801cabc:	68fa      	ldr	r2, [r7, #12]
 801cabe:	b292      	uxth	r2, r2
 801cac0:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801cac4:	b292      	uxth	r2, r2
 801cac6:	b2d2      	uxtb	r2, r2
 801cac8:	701a      	strb	r2, [r3, #0]
 801caca:	697b      	ldr	r3, [r7, #20]
 801cacc:	f103 0329 	add.w	r3, r3, #41	; 0x29
 801cad0:	68fa      	ldr	r2, [r7, #12]
 801cad2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801cad6:	b2d2      	uxtb	r2, r2
 801cad8:	701a      	strb	r2, [r3, #0]
 801cada:	697b      	ldr	r3, [r7, #20]
 801cadc:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 801cae0:	68fa      	ldr	r2, [r7, #12]
 801cae2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801cae6:	b2d2      	uxtb	r2, r2
 801cae8:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
 801caea:	697b      	ldr	r3, [r7, #20]
 801caec:	f103 0316 	add.w	r3, r3, #22
 801caf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801caf2:	b2d2      	uxtb	r2, r2
 801caf4:	701a      	strb	r2, [r3, #0]
 801caf6:	697b      	ldr	r3, [r7, #20]
 801caf8:	f103 0317 	add.w	r3, r3, #23
 801cafc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cafe:	b292      	uxth	r2, r2
 801cb00:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801cb04:	b292      	uxth	r2, r2
 801cb06:	b2d2      	uxtb	r2, r2
 801cb08:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
 801cb0a:	697b      	ldr	r3, [r7, #20]
 801cb0c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801cb10:	f04f 0280 	mov.w	r2, #128	; 0x80
 801cb14:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
 801cb16:	697b      	ldr	r3, [r7, #20]
 801cb18:	f103 0326 	add.w	r3, r3, #38	; 0x26
 801cb1c:	f04f 0229 	mov.w	r2, #41	; 0x29
 801cb20:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
 801cb22:	697b      	ldr	r3, [r7, #20]
 801cb24:	f103 032b 	add.w	r3, r3, #43	; 0x2b
 801cb28:	4618      	mov	r0, r3
 801cb2a:	f64d 11dc 	movw	r1, #55772	; 0xd9dc
 801cb2e:	f6c0 0102 	movt	r1, #2050	; 0x802
 801cb32:	f04f 0213 	mov.w	r2, #19
 801cb36:	f7fc f80d 	bl	8018b54 <mem_cpy>
 801cb3a:	e087      	b.n	801cc4c <f_mkfs+0x7e4>
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
 801cb3c:	697b      	ldr	r3, [r7, #20]
 801cb3e:	f103 0343 	add.w	r3, r3, #67	; 0x43
 801cb42:	68fa      	ldr	r2, [r7, #12]
 801cb44:	b2d2      	uxtb	r2, r2
 801cb46:	701a      	strb	r2, [r3, #0]
 801cb48:	697b      	ldr	r3, [r7, #20]
 801cb4a:	f103 0344 	add.w	r3, r3, #68	; 0x44
 801cb4e:	68fa      	ldr	r2, [r7, #12]
 801cb50:	b292      	uxth	r2, r2
 801cb52:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801cb56:	b292      	uxth	r2, r2
 801cb58:	b2d2      	uxtb	r2, r2
 801cb5a:	701a      	strb	r2, [r3, #0]
 801cb5c:	697b      	ldr	r3, [r7, #20]
 801cb5e:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801cb62:	68fa      	ldr	r2, [r7, #12]
 801cb64:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801cb68:	b2d2      	uxtb	r2, r2
 801cb6a:	701a      	strb	r2, [r3, #0]
 801cb6c:	697b      	ldr	r3, [r7, #20]
 801cb6e:	f103 0346 	add.w	r3, r3, #70	; 0x46
 801cb72:	68fa      	ldr	r2, [r7, #12]
 801cb74:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801cb78:	b2d2      	uxtb	r2, r2
 801cb7a:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
 801cb7c:	697b      	ldr	r3, [r7, #20]
 801cb7e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 801cb82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cb84:	b2d2      	uxtb	r2, r2
 801cb86:	701a      	strb	r2, [r3, #0]
 801cb88:	697b      	ldr	r3, [r7, #20]
 801cb8a:	f103 0325 	add.w	r3, r3, #37	; 0x25
 801cb8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cb90:	b292      	uxth	r2, r2
 801cb92:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801cb96:	b292      	uxth	r2, r2
 801cb98:	b2d2      	uxtb	r2, r2
 801cb9a:	701a      	strb	r2, [r3, #0]
 801cb9c:	697b      	ldr	r3, [r7, #20]
 801cb9e:	f103 0326 	add.w	r3, r3, #38	; 0x26
 801cba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cba4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801cba8:	b2d2      	uxtb	r2, r2
 801cbaa:	701a      	strb	r2, [r3, #0]
 801cbac:	697b      	ldr	r3, [r7, #20]
 801cbae:	f103 0327 	add.w	r3, r3, #39	; 0x27
 801cbb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cbb4:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801cbb8:	b2d2      	uxtb	r2, r2
 801cbba:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
 801cbbc:	697b      	ldr	r3, [r7, #20]
 801cbbe:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 801cbc2:	f04f 0202 	mov.w	r2, #2
 801cbc6:	701a      	strb	r2, [r3, #0]
 801cbc8:	697b      	ldr	r3, [r7, #20]
 801cbca:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 801cbce:	f04f 0200 	mov.w	r2, #0
 801cbd2:	701a      	strb	r2, [r3, #0]
 801cbd4:	697b      	ldr	r3, [r7, #20]
 801cbd6:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 801cbda:	f04f 0200 	mov.w	r2, #0
 801cbde:	701a      	strb	r2, [r3, #0]
 801cbe0:	697b      	ldr	r3, [r7, #20]
 801cbe2:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 801cbe6:	f04f 0200 	mov.w	r2, #0
 801cbea:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
 801cbec:	697b      	ldr	r3, [r7, #20]
 801cbee:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801cbf2:	f04f 0201 	mov.w	r2, #1
 801cbf6:	701a      	strb	r2, [r3, #0]
 801cbf8:	697b      	ldr	r3, [r7, #20]
 801cbfa:	f103 0331 	add.w	r3, r3, #49	; 0x31
 801cbfe:	f04f 0200 	mov.w	r2, #0
 801cc02:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
 801cc04:	697b      	ldr	r3, [r7, #20]
 801cc06:	f103 0332 	add.w	r3, r3, #50	; 0x32
 801cc0a:	f04f 0206 	mov.w	r2, #6
 801cc0e:	701a      	strb	r2, [r3, #0]
 801cc10:	697b      	ldr	r3, [r7, #20]
 801cc12:	f103 0333 	add.w	r3, r3, #51	; 0x33
 801cc16:	f04f 0200 	mov.w	r2, #0
 801cc1a:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
 801cc1c:	697b      	ldr	r3, [r7, #20]
 801cc1e:	f103 0340 	add.w	r3, r3, #64	; 0x40
 801cc22:	f04f 0280 	mov.w	r2, #128	; 0x80
 801cc26:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
 801cc28:	697b      	ldr	r3, [r7, #20]
 801cc2a:	f103 0342 	add.w	r3, r3, #66	; 0x42
 801cc2e:	f04f 0229 	mov.w	r2, #41	; 0x29
 801cc32:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
 801cc34:	697b      	ldr	r3, [r7, #20]
 801cc36:	f103 0347 	add.w	r3, r3, #71	; 0x47
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	f64d 11f0 	movw	r1, #55792	; 0xd9f0
 801cc40:	f6c0 0102 	movt	r1, #2050	; 0x802
 801cc44:	f04f 0213 	mov.w	r2, #19
 801cc48:	f7fb ff84 	bl	8018b54 <mem_cpy>
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
 801cc4c:	697b      	ldr	r3, [r7, #20]
 801cc4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801cc52:	f04f 0255 	mov.w	r2, #85	; 0x55
 801cc56:	701a      	strb	r2, [r3, #0]
 801cc58:	697b      	ldr	r3, [r7, #20]
 801cc5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801cc5e:	f103 0303 	add.w	r3, r3, #3
 801cc62:	f04f 02aa 	mov.w	r2, #170	; 0xaa
 801cc66:	701a      	strb	r2, [r3, #0]
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
 801cc68:	79fb      	ldrb	r3, [r7, #7]
 801cc6a:	4618      	mov	r0, r3
 801cc6c:	6979      	ldr	r1, [r7, #20]
 801cc6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cc70:	f04f 0301 	mov.w	r3, #1
 801cc74:	f7e8 fc30 	bl	80054d8 <disk_write>
 801cc78:	4603      	mov	r3, r0
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d002      	beq.n	801cc84 <f_mkfs+0x81c>
		return FR_DISK_ERR;
 801cc7e:	f04f 0301 	mov.w	r3, #1
 801cc82:	e1b2      	b.n	801cfea <f_mkfs+0xb82>
	if (fmt == FS_FAT32)
 801cc84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801cc88:	2b03      	cmp	r3, #3
 801cc8a:	d10a      	bne.n	801cca2 <f_mkfs+0x83a>
		disk_write(drv, tbl, b_part+6, 1);
 801cc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc8e:	f103 0306 	add.w	r3, r3, #6
 801cc92:	79fa      	ldrb	r2, [r7, #7]
 801cc94:	4610      	mov	r0, r2
 801cc96:	6979      	ldr	r1, [r7, #20]
 801cc98:	461a      	mov	r2, r3
 801cc9a:	f04f 0301 	mov.w	r3, #1
 801cc9e:	f7e8 fc1b 	bl	80054d8 <disk_write>

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
 801cca2:	f04f 0300 	mov.w	r3, #0
 801cca6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801ccaa:	e0be      	b.n	801ce2a <f_mkfs+0x9c2>
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
 801ccac:	6978      	ldr	r0, [r7, #20]
 801ccae:	f04f 0100 	mov.w	r1, #0
 801ccb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ccb6:	f7fb ff75 	bl	8018ba4 <mem_set>
		if (fmt != FS_FAT32) {
 801ccba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ccbe:	2b03      	cmp	r3, #3
 801ccc0:	d02e      	beq.n	801cd20 <f_mkfs+0x8b8>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 801ccc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ccc6:	2b01      	cmp	r3, #1
 801ccc8:	d104      	bne.n	801ccd4 <f_mkfs+0x86c>
 801ccca:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 801ccce:	f2c0 03ff 	movt	r3, #255	; 0xff
 801ccd2:	e001      	b.n	801ccd8 <f_mkfs+0x870>
 801ccd4:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 801ccd8:	60fb      	str	r3, [r7, #12]
			n |= partition;
 801ccda:	79ba      	ldrb	r2, [r7, #6]
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	4313      	orrs	r3, r2
 801cce0:	60fb      	str	r3, [r7, #12]
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	b2da      	uxtb	r2, r3
 801cce6:	697b      	ldr	r3, [r7, #20]
 801cce8:	701a      	strb	r2, [r3, #0]
 801ccea:	697b      	ldr	r3, [r7, #20]
 801ccec:	f103 0301 	add.w	r3, r3, #1
 801ccf0:	68fa      	ldr	r2, [r7, #12]
 801ccf2:	b292      	uxth	r2, r2
 801ccf4:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801ccf8:	b292      	uxth	r2, r2
 801ccfa:	b2d2      	uxtb	r2, r2
 801ccfc:	701a      	strb	r2, [r3, #0]
 801ccfe:	697b      	ldr	r3, [r7, #20]
 801cd00:	f103 0302 	add.w	r3, r3, #2
 801cd04:	68fa      	ldr	r2, [r7, #12]
 801cd06:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801cd0a:	b2d2      	uxtb	r2, r2
 801cd0c:	701a      	strb	r2, [r3, #0]
 801cd0e:	697b      	ldr	r3, [r7, #20]
 801cd10:	f103 0303 	add.w	r3, r3, #3
 801cd14:	68fa      	ldr	r2, [r7, #12]
 801cd16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801cd1a:	b2d2      	uxtb	r2, r2
 801cd1c:	701a      	strb	r2, [r3, #0]
 801cd1e:	e045      	b.n	801cdac <f_mkfs+0x944>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
 801cd20:	697b      	ldr	r3, [r7, #20]
 801cd22:	f04f 02f8 	mov.w	r2, #248	; 0xf8
 801cd26:	701a      	strb	r2, [r3, #0]
 801cd28:	697b      	ldr	r3, [r7, #20]
 801cd2a:	f103 0301 	add.w	r3, r3, #1
 801cd2e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd32:	701a      	strb	r2, [r3, #0]
 801cd34:	697b      	ldr	r3, [r7, #20]
 801cd36:	f103 0302 	add.w	r3, r3, #2
 801cd3a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd3e:	701a      	strb	r2, [r3, #0]
 801cd40:	697b      	ldr	r3, [r7, #20]
 801cd42:	f103 0303 	add.w	r3, r3, #3
 801cd46:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd4a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl+4, 0xFFFFFFFF);
 801cd4c:	697b      	ldr	r3, [r7, #20]
 801cd4e:	f103 0304 	add.w	r3, r3, #4
 801cd52:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd56:	701a      	strb	r2, [r3, #0]
 801cd58:	697b      	ldr	r3, [r7, #20]
 801cd5a:	f103 0305 	add.w	r3, r3, #5
 801cd5e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd62:	701a      	strb	r2, [r3, #0]
 801cd64:	697b      	ldr	r3, [r7, #20]
 801cd66:	f103 0306 	add.w	r3, r3, #6
 801cd6a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd6e:	701a      	strb	r2, [r3, #0]
 801cd70:	697b      	ldr	r3, [r7, #20]
 801cd72:	f103 0307 	add.w	r3, r3, #7
 801cd76:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd7a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
 801cd7c:	697b      	ldr	r3, [r7, #20]
 801cd7e:	f103 0308 	add.w	r3, r3, #8
 801cd82:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd86:	701a      	strb	r2, [r3, #0]
 801cd88:	697b      	ldr	r3, [r7, #20]
 801cd8a:	f103 0309 	add.w	r3, r3, #9
 801cd8e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd92:	701a      	strb	r2, [r3, #0]
 801cd94:	697b      	ldr	r3, [r7, #20]
 801cd96:	f103 030a 	add.w	r3, r3, #10
 801cd9a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cd9e:	701a      	strb	r2, [r3, #0]
 801cda0:	697b      	ldr	r3, [r7, #20]
 801cda2:	f103 030b 	add.w	r3, r3, #11
 801cda6:	f04f 020f 	mov.w	r2, #15
 801cdaa:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 801cdac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cdae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cdb0:	f102 0201 	add.w	r2, r2, #1
 801cdb4:	64ba      	str	r2, [r7, #72]	; 0x48
 801cdb6:	79fa      	ldrb	r2, [r7, #7]
 801cdb8:	4610      	mov	r0, r2
 801cdba:	6979      	ldr	r1, [r7, #20]
 801cdbc:	461a      	mov	r2, r3
 801cdbe:	f04f 0301 	mov.w	r3, #1
 801cdc2:	f7e8 fb89 	bl	80054d8 <disk_write>
 801cdc6:	4603      	mov	r3, r0
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d002      	beq.n	801cdd2 <f_mkfs+0x96a>
			return FR_DISK_ERR;
 801cdcc:	f04f 0301 	mov.w	r3, #1
 801cdd0:	e10b      	b.n	801cfea <f_mkfs+0xb82>
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
 801cdd2:	6978      	ldr	r0, [r7, #20]
 801cdd4:	f04f 0100 	mov.w	r1, #0
 801cdd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801cddc:	f7fb fee2 	bl	8018ba4 <mem_set>
		for (n = 1; n < n_fat; n++) {
 801cde0:	f04f 0301 	mov.w	r3, #1
 801cde4:	60fb      	str	r3, [r7, #12]
 801cde6:	e016      	b.n	801ce16 <f_mkfs+0x9ae>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 801cde8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cdea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cdec:	f102 0201 	add.w	r2, r2, #1
 801cdf0:	64ba      	str	r2, [r7, #72]	; 0x48
 801cdf2:	79fa      	ldrb	r2, [r7, #7]
 801cdf4:	4610      	mov	r0, r2
 801cdf6:	6979      	ldr	r1, [r7, #20]
 801cdf8:	461a      	mov	r2, r3
 801cdfa:	f04f 0301 	mov.w	r3, #1
 801cdfe:	f7e8 fb6b 	bl	80054d8 <disk_write>
 801ce02:	4603      	mov	r3, r0
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d002      	beq.n	801ce0e <f_mkfs+0x9a6>
				return FR_DISK_ERR;
 801ce08:	f04f 0301 	mov.w	r3, #1
 801ce0c:	e0ed      	b.n	801cfea <f_mkfs+0xb82>
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
 801ce0e:	68fb      	ldr	r3, [r7, #12]
 801ce10:	f103 0301 	add.w	r3, r3, #1
 801ce14:	60fb      	str	r3, [r7, #12]
 801ce16:	68fa      	ldr	r2, [r7, #12]
 801ce18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ce1a:	429a      	cmp	r2, r3
 801ce1c:	d3e4      	bcc.n	801cde8 <f_mkfs+0x980>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
 801ce1e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801ce22:	f103 0301 	add.w	r3, r3, #1
 801ce26:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801ce2a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	f43f af3c 	beq.w	801ccac <f_mkfs+0x844>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
 801ce34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ce38:	2b03      	cmp	r3, #3
 801ce3a:	d102      	bne.n	801ce42 <f_mkfs+0x9da>
 801ce3c:	88bb      	ldrh	r3, [r7, #4]
 801ce3e:	b2db      	uxtb	r3, r3
 801ce40:	e001      	b.n	801ce46 <f_mkfs+0x9de>
 801ce42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce44:	b2db      	uxtb	r3, r3
 801ce46:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 801ce4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ce4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ce4e:	f102 0201 	add.w	r2, r2, #1
 801ce52:	64ba      	str	r2, [r7, #72]	; 0x48
 801ce54:	79fa      	ldrb	r2, [r7, #7]
 801ce56:	4610      	mov	r0, r2
 801ce58:	6979      	ldr	r1, [r7, #20]
 801ce5a:	461a      	mov	r2, r3
 801ce5c:	f04f 0301 	mov.w	r3, #1
 801ce60:	f7e8 fb3a 	bl	80054d8 <disk_write>
 801ce64:	4603      	mov	r3, r0
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d002      	beq.n	801ce70 <f_mkfs+0xa08>
			return FR_DISK_ERR;
 801ce6a:	f04f 0301 	mov.w	r3, #1
 801ce6e:	e0bc      	b.n	801cfea <f_mkfs+0xb82>
	} while (--m);
 801ce70:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801ce74:	f103 33ff 	add.w	r3, r3, #4294967295
 801ce78:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801ce7c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d1e2      	bne.n	801ce4a <f_mkfs+0x9e2>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
 801ce84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ce88:	2b03      	cmp	r3, #3
 801ce8a:	f040 80a0 	bne.w	801cfce <f_mkfs+0xb66>
		ST_WORD(tbl+BS_55AA, 0xAA55);
 801ce8e:	697b      	ldr	r3, [r7, #20]
 801ce90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801ce94:	f04f 0255 	mov.w	r2, #85	; 0x55
 801ce98:	701a      	strb	r2, [r3, #0]
 801ce9a:	697b      	ldr	r3, [r7, #20]
 801ce9c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801cea0:	f103 0303 	add.w	r3, r3, #3
 801cea4:	f04f 02aa 	mov.w	r2, #170	; 0xaa
 801cea8:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 801ceaa:	697b      	ldr	r3, [r7, #20]
 801ceac:	f04f 0252 	mov.w	r2, #82	; 0x52
 801ceb0:	701a      	strb	r2, [r3, #0]
 801ceb2:	697b      	ldr	r3, [r7, #20]
 801ceb4:	f103 0301 	add.w	r3, r3, #1
 801ceb8:	f04f 0252 	mov.w	r2, #82	; 0x52
 801cebc:	701a      	strb	r2, [r3, #0]
 801cebe:	697b      	ldr	r3, [r7, #20]
 801cec0:	f103 0302 	add.w	r3, r3, #2
 801cec4:	f04f 0261 	mov.w	r2, #97	; 0x61
 801cec8:	701a      	strb	r2, [r3, #0]
 801ceca:	697b      	ldr	r3, [r7, #20]
 801cecc:	f103 0303 	add.w	r3, r3, #3
 801ced0:	f04f 0241 	mov.w	r2, #65	; 0x41
 801ced4:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 801ced6:	697b      	ldr	r3, [r7, #20]
 801ced8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801cedc:	f04f 0272 	mov.w	r2, #114	; 0x72
 801cee0:	701a      	strb	r2, [r3, #0]
 801cee2:	697b      	ldr	r3, [r7, #20]
 801cee4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801cee8:	f103 0301 	add.w	r3, r3, #1
 801ceec:	f04f 0272 	mov.w	r2, #114	; 0x72
 801cef0:	701a      	strb	r2, [r3, #0]
 801cef2:	697b      	ldr	r3, [r7, #20]
 801cef4:	f503 73f3 	add.w	r3, r3, #486	; 0x1e6
 801cef8:	f04f 0241 	mov.w	r2, #65	; 0x41
 801cefc:	701a      	strb	r2, [r3, #0]
 801cefe:	697b      	ldr	r3, [r7, #20]
 801cf00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801cf04:	f103 0303 	add.w	r3, r3, #3
 801cf08:	f04f 0261 	mov.w	r2, #97	; 0x61
 801cf0c:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
 801cf0e:	697b      	ldr	r3, [r7, #20]
 801cf10:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801cf14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf16:	b2d2      	uxtb	r2, r2
 801cf18:	f102 32ff 	add.w	r2, r2, #4294967295
 801cf1c:	b2d2      	uxtb	r2, r2
 801cf1e:	701a      	strb	r2, [r3, #0]
 801cf20:	697b      	ldr	r3, [r7, #20]
 801cf22:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801cf26:	f103 0301 	add.w	r3, r3, #1
 801cf2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf2c:	b292      	uxth	r2, r2
 801cf2e:	f102 32ff 	add.w	r2, r2, #4294967295
 801cf32:	b292      	uxth	r2, r2
 801cf34:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801cf38:	b292      	uxth	r2, r2
 801cf3a:	b2d2      	uxtb	r2, r2
 801cf3c:	701a      	strb	r2, [r3, #0]
 801cf3e:	697b      	ldr	r3, [r7, #20]
 801cf40:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 801cf44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf46:	f102 32ff 	add.w	r2, r2, #4294967295
 801cf4a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801cf4e:	b2d2      	uxtb	r2, r2
 801cf50:	701a      	strb	r2, [r3, #0]
 801cf52:	697b      	ldr	r3, [r7, #20]
 801cf54:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801cf58:	f103 0303 	add.w	r3, r3, #3
 801cf5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf5e:	f102 32ff 	add.w	r2, r2, #4294967295
 801cf62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801cf66:	b2d2      	uxtb	r2, r2
 801cf68:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
 801cf6a:	697b      	ldr	r3, [r7, #20]
 801cf6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801cf70:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cf74:	701a      	strb	r2, [r3, #0]
 801cf76:	697b      	ldr	r3, [r7, #20]
 801cf78:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801cf7c:	f103 0301 	add.w	r3, r3, #1
 801cf80:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cf84:	701a      	strb	r2, [r3, #0]
 801cf86:	697b      	ldr	r3, [r7, #20]
 801cf88:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 801cf8c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cf90:	701a      	strb	r2, [r3, #0]
 801cf92:	697b      	ldr	r3, [r7, #20]
 801cf94:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801cf98:	f103 0303 	add.w	r3, r3, #3
 801cf9c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801cfa0:	701a      	strb	r2, [r3, #0]
		disk_write(drv, tbl, b_part+1, 1);
 801cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfa4:	f103 0301 	add.w	r3, r3, #1
 801cfa8:	79fa      	ldrb	r2, [r7, #7]
 801cfaa:	4610      	mov	r0, r2
 801cfac:	6979      	ldr	r1, [r7, #20]
 801cfae:	461a      	mov	r2, r3
 801cfb0:	f04f 0301 	mov.w	r3, #1
 801cfb4:	f7e8 fa90 	bl	80054d8 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
 801cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfba:	f103 0307 	add.w	r3, r3, #7
 801cfbe:	79fa      	ldrb	r2, [r7, #7]
 801cfc0:	4610      	mov	r0, r2
 801cfc2:	6979      	ldr	r1, [r7, #20]
 801cfc4:	461a      	mov	r2, r3
 801cfc6:	f04f 0301 	mov.w	r3, #1
 801cfca:	f7e8 fa85 	bl	80054d8 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
 801cfce:	79fb      	ldrb	r3, [r7, #7]
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	f04f 0100 	mov.w	r1, #0
 801cfd6:	f04f 0200 	mov.w	r2, #0
 801cfda:	f7e8 fae9 	bl	80055b0 <disk_ioctl>
 801cfde:	4603      	mov	r3, r0
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	bf0c      	ite	eq
 801cfe4:	2300      	moveq	r3, #0
 801cfe6:	2301      	movne	r3, #1
 801cfe8:	b2db      	uxtb	r3, r3
}
 801cfea:	4618      	mov	r0, r3
 801cfec:	f107 0750 	add.w	r7, r7, #80	; 0x50
 801cff0:	46bd      	mov	sp, r7
 801cff2:	bd80      	pop	{r7, pc}

0801cff4 <_ZN12CFileHandlerC1Ev>:
static int16_t  iPCMBuffer2[PCM_OUT_SIZE] = {0x0000}; //double Buffering
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CFileHandler::CFileHandler() {
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b082      	sub	sp, #8
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	4618      	mov	r0, r3
 801d000:	f7f8 fee6 	bl	8015dd0 <_ZN12AManagedTaskC1Ev>
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	4a18      	ldr	r2, [pc, #96]	; (801d068 <_ZN12CFileHandlerC1Ev+0x74>)
 801d008:	601a      	str	r2, [r3, #0]
	fsresult = FR_OK;
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	f04f 0200 	mov.w	r2, #0
 801d010:	731a      	strb	r2, [r3, #12]
	uiBytesLeft = 0;
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	f04f 0200 	mov.w	r2, #0
 801d018:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
	ptrReadPosition = uiReadBuffer;
 801d01c:	687a      	ldr	r2, [r7, #4]
 801d01e:	f241 130c 	movw	r3, #4364	; 0x110c
 801d022:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d026:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
	eMP3State = OPEN_FILE;
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	f04f 0201 	mov.w	r2, #1
 801d030:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
	eBuffer = BUFFER_1;
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	f04f 0200 	mov.w	r2, #0
 801d03a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
	uiVolume = 80;
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	f04f 0250 	mov.w	r2, #80	; 0x50
 801d044:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	uiLastSamplerate = 44100;
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	f64a 4244 	movw	r2, #44100	; 0xac44
 801d04e:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
	bPlaying  = true;
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	f04f 0201 	mov.w	r2, #1
 801d058:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
}
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	4618      	mov	r0, r3
 801d060:	f107 0708 	add.w	r7, r7, #8
 801d064:	46bd      	mov	sp, r7
 801d066:	bd80      	pop	{r7, pc}
 801d068:	08035a00 	.word	0x08035a00

0801d06c <_ZN12CFileHandlerD1Ev>:

CFileHandler::~CFileHandler() {
 801d06c:	b580      	push	{r7, lr}
 801d06e:	b082      	sub	sp, #8
 801d070:	af00      	add	r7, sp, #0
 801d072:	6078      	str	r0, [r7, #4]
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	4a0a      	ldr	r2, [pc, #40]	; (801d0a0 <_ZN12CFileHandlerD1Ev+0x34>)
 801d078:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801d07a:	6878      	ldr	r0, [r7, #4]
 801d07c:	f7f8 fec4 	bl	8015e08 <_ZN12AManagedTaskD1Ev>
 801d080:	f04f 0300 	mov.w	r3, #0
 801d084:	f003 0301 	and.w	r3, r3, #1
 801d088:	b2db      	uxtb	r3, r3
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d002      	beq.n	801d094 <_ZN12CFileHandlerD1Ev+0x28>
 801d08e:	6878      	ldr	r0, [r7, #4]
 801d090:	f00f fb2e 	bl	802c6f0 <_ZdlPv>
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	4618      	mov	r0, r3
 801d098:	f107 0708 	add.w	r7, r7, #8
 801d09c:	46bd      	mov	sp, r7
 801d09e:	bd80      	pop	{r7, pc}
 801d0a0:	08035a00 	.word	0x08035a00

0801d0a4 <_ZN12CFileHandlerD0Ev>:
	uiVolume = 80;
	uiLastSamplerate = 44100;
	bPlaying  = true;
}

CFileHandler::~CFileHandler() {
 801d0a4:	b580      	push	{r7, lr}
 801d0a6:	b082      	sub	sp, #8
 801d0a8:	af00      	add	r7, sp, #0
 801d0aa:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 801d0ac:	6878      	ldr	r0, [r7, #4]
 801d0ae:	f7ff ffdd 	bl	801d06c <_ZN12CFileHandlerD1Ev>
 801d0b2:	6878      	ldr	r0, [r7, #4]
 801d0b4:	f00f fb1c 	bl	802c6f0 <_ZdlPv>
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	f107 0708 	add.w	r7, r7, #8
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}

0801d0c4 <_ZN12CFileHandler12HardwareInitEv>:
  * @brief  HardwareInit called before Scheduler starts
  * 		SD Card interface will be initialized
  * @param  None
  * @retval true on succsess
  */
bool CFileHandler::HardwareInit(){
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b082      	sub	sp, #8
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(semShock);
 801d0cc:	f04f 0001 	mov.w	r0, #1
 801d0d0:	f04f 0100 	mov.w	r1, #0
 801d0d4:	f7f9 fa86 	bl	80165e4 <xQueueCreate>
 801d0d8:	4602      	mov	r2, r0
 801d0da:	f241 1308 	movw	r3, #4360	; 0x1108
 801d0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d0e2:	601a      	str	r2, [r3, #0]
 801d0e4:	f241 1308 	movw	r3, #4360	; 0x1108
 801d0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d0ec:	681b      	ldr	r3, [r3, #0]
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d00d      	beq.n	801d10e <_ZN12CFileHandler12HardwareInitEv+0x4a>
 801d0f2:	f241 1308 	movw	r3, #4360	; 0x1108
 801d0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	f04f 0100 	mov.w	r1, #0
 801d102:	f04f 0200 	mov.w	r2, #0
 801d106:	f04f 0300 	mov.w	r3, #0
 801d10a:	f7f9 fb1f 	bl	801674c <xQueueGenericSend>
	vSemaphoreCreateBinary(semUserButton);
 801d10e:	f04f 0001 	mov.w	r0, #1
 801d112:	f04f 0100 	mov.w	r1, #0
 801d116:	f7f9 fa65 	bl	80165e4 <xQueueCreate>
 801d11a:	4602      	mov	r2, r0
 801d11c:	f241 1304 	movw	r3, #4356	; 0x1104
 801d120:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d124:	601a      	str	r2, [r3, #0]
 801d126:	f241 1304 	movw	r3, #4356	; 0x1104
 801d12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	2b00      	cmp	r3, #0
 801d132:	d00d      	beq.n	801d150 <_ZN12CFileHandler12HardwareInitEv+0x8c>
 801d134:	f241 1304 	movw	r3, #4356	; 0x1104
 801d138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	4618      	mov	r0, r3
 801d140:	f04f 0100 	mov.w	r1, #0
 801d144:	f04f 0200 	mov.w	r2, #0
 801d148:	f04f 0300 	mov.w	r3, #0
 801d14c:	f7f9 fafe 	bl	801674c <xQueueGenericSend>
	// ensure that the semaphores are taken
	xSemaphoreTake(semShock,0);
 801d150:	f241 1308 	movw	r3, #4360	; 0x1108
 801d154:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	4618      	mov	r0, r3
 801d15c:	f04f 0100 	mov.w	r1, #0
 801d160:	f04f 0200 	mov.w	r2, #0
 801d164:	f04f 0300 	mov.w	r3, #0
 801d168:	f7f9 fbca 	bl	8016900 <xQueueGenericReceive>
	xSemaphoreTake(semUserButton,0);
 801d16c:	f241 1304 	movw	r3, #4356	; 0x1104
 801d170:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	4618      	mov	r0, r3
 801d178:	f04f 0100 	mov.w	r1, #0
 801d17c:	f04f 0200 	mov.w	r2, #0
 801d180:	f04f 0300 	mov.w	r3, #0
 801d184:	f7f9 fbbc 	bl	8016900 <xQueueGenericReceive>

	/*
	 * configure onboard accelerometer to drive
	 * an external interrupt line on mechanical shock
	 */
	Mems_Config();
 801d188:	6878      	ldr	r0, [r7, #4]
 801d18a:	f000 fcdd 	bl	801db48 <_ZN12CFileHandler11Mems_ConfigEv>
	/*
	 * configure Interrupt for UserButton
	 */
	EXTILine_Config();
 801d18e:	6878      	ldr	r0, [r7, #4]
 801d190:	f000 fd68 	bl	801dc64 <_ZN12CFileHandler15EXTILine_ConfigEv>

	hMP3Decoder = MP3InitDecoder();
 801d194:	f7f7 f884 	bl	80142a0 <MP3InitDecoder>
 801d198:	4602      	mov	r2, r0
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	/*
	 * first Codec init with standard samplerate
	 */
	EVAL_AUDIO_Init(OUTPUT_DEVICE_AUTO,uiVolume,uiLastSamplerate);
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	f893 22a0 	ldrb.w	r2, [r3, #672]	; 0x2a0
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 801d1ac:	f04f 0004 	mov.w	r0, #4
 801d1b0:	4611      	mov	r1, r2
 801d1b2:	461a      	mov	r2, r3
 801d1b4:	f7ec fe78 	bl	8009ea8 <EVAL_AUDIO_Init>
	// stop I2S to prevent noise
	EVAL_AUDIO_Stop(CODEC_PDWN_SW);
 801d1b8:	f04f 0002 	mov.w	r0, #2
 801d1bc:	f7ec ff0a 	bl	8009fd4 <EVAL_AUDIO_Stop>
	return true;
 801d1c0:	f04f 0301 	mov.w	r3, #1
}
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	f107 0708 	add.w	r7, r7, #8
 801d1ca:	46bd      	mov	sp, r7
 801d1cc:	bd80      	pop	{r7, pc}
 801d1ce:	bf00      	nop

0801d1d0 <_ZN12CFileHandler3RunEv>:
/**
  * @brief  task function for file handling
  * @param  None
  * @retval None
  */
void CFileHandler::Run(){
 801d1d0:	b580      	push	{r7, lr}
 801d1d2:	b082      	sub	sp, #8
 801d1d4:	af00      	add	r7, sp, #0
 801d1d6:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(semI2SDMAFinished);
 801d1d8:	f04f 0001 	mov.w	r0, #1
 801d1dc:	f04f 0100 	mov.w	r1, #0
 801d1e0:	f7f9 fa00 	bl	80165e4 <xQueueCreate>
 801d1e4:	4602      	mov	r2, r0
 801d1e6:	f241 1300 	movw	r3, #4352	; 0x1100
 801d1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d1ee:	601a      	str	r2, [r3, #0]
 801d1f0:	f241 1300 	movw	r3, #4352	; 0x1100
 801d1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d00d      	beq.n	801d21a <_ZN12CFileHandler3RunEv+0x4a>
 801d1fe:	f241 1300 	movw	r3, #4352	; 0x1100
 801d202:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	4618      	mov	r0, r3
 801d20a:	f04f 0100 	mov.w	r1, #0
 801d20e:	f04f 0200 	mov.w	r2, #0
 801d212:	f04f 0300 	mov.w	r3, #0
 801d216:	f7f9 fa99 	bl	801674c <xQueueGenericSend>

	/*
	 * Read configuration from file on startup
	 */
	ReadConfig();
 801d21a:	6878      	ldr	r0, [r7, #4]
 801d21c:	f000 f872 	bl	801d304 <_ZN12CFileHandler10ReadConfigEv>

	/*
	 * start mp3 player, will not leave this function
	 */
	MP3Player();
 801d220:	6878      	ldr	r0, [r7, #4]
 801d222:	f000 f883 	bl	801d32c <_ZN12CFileHandler9MP3PlayerEv>

}
 801d226:	f107 0708 	add.w	r7, r7, #8
 801d22a:	46bd      	mov	sp, r7
 801d22c:	bd80      	pop	{r7, pc}
 801d22e:	bf00      	nop

0801d230 <_ZN12CFileHandler12RefillBufferEv>:
/**
  * @brief  Refills the Decoder Buffer
  *
  * @retval true for success and false for fault
  */
bool CFileHandler::RefillBuffer(void){
 801d230:	b580      	push	{r7, lr}
 801d232:	b084      	sub	sp, #16
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
	UINT uiBytesToRead=0;
 801d238:	f04f 0300 	mov.w	r3, #0
 801d23c:	60fb      	str	r3, [r7, #12]
	UINT uiBytesRead=0;
 801d23e:	f04f 0300 	mov.w	r3, #0
 801d242:	60bb      	str	r3, [r7, #8]

	if(uiBytesLeft > 0) {
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d01b      	beq.n	801d286 <_ZN12CFileHandler12RefillBufferEv+0x56>
		//
		// Fat reading with offset is too slow
		// memmove is faster
		//
		// enshure there is no overlap
		if(uiBytesLeft > READBUF_THRESHOLD )
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	f8b3 229a 	ldrh.w	r2, [r3, #666]	; 0x29a
 801d254:	f240 33c9 	movw	r3, #969	; 0x3c9
 801d258:	429a      	cmp	r2, r3
 801d25a:	d902      	bls.n	801d262 <_ZN12CFileHandler12RefillBufferEv+0x32>
			return false; // illegal call of RefillBuffer
 801d25c:	f04f 0300 	mov.w	r3, #0
 801d260:	e04a      	b.n	801d2f8 <_ZN12CFileHandler12RefillBufferEv+0xc8>

		portENTER_CRITICAL();	// prevent RTOS from scheduling
 801d262:	f7f9 f865 	bl	8016330 <vPortEnterCritical>
		memmove(uiReadBuffer,ptrReadPosition,uiBytesLeft);
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 801d272:	f241 100c 	movw	r0, #4364	; 0x110c
 801d276:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801d27a:	4611      	mov	r1, r2
 801d27c:	461a      	mov	r2, r3
 801d27e:	f008 fdbf 	bl	8025e00 <memmove>
		portEXIT_CRITICAL();
 801d282:	f7f9 f86b 	bl	801635c <vPortExitCritical>
	}

	uiBytesToRead = READBUF_SIZE - uiBytesLeft;
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 801d28c:	f5c3 63f2 	rsb	r3, r3, #1936	; 0x790
 801d290:	f103 0304 	add.w	r3, r3, #4
 801d294:	60fb      	str	r3, [r7, #12]

	fsresult = f_read(&file,uiReadBuffer+uiBytesLeft,uiBytesToRead,&uiBytesRead);
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	f103 0110 	add.w	r1, r3, #16
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 801d2a2:	461a      	mov	r2, r3
 801d2a4:	f241 130c 	movw	r3, #4364	; 0x110c
 801d2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d2ac:	18d2      	adds	r2, r2, r3
 801d2ae:	f107 0308 	add.w	r3, r7, #8
 801d2b2:	4608      	mov	r0, r1
 801d2b4:	4611      	mov	r1, r2
 801d2b6:	68fa      	ldr	r2, [r7, #12]
 801d2b8:	f7fd fb5e 	bl	801a978 <f_read>
 801d2bc:	4603      	mov	r3, r0
 801d2be:	461a      	mov	r2, r3
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	731a      	strb	r2, [r3, #12]
	if(fsresult != FR_OK)
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	7b1b      	ldrb	r3, [r3, #12]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d002      	beq.n	801d2d2 <_ZN12CFileHandler12RefillBufferEv+0xa2>
		return false; // Readerror
 801d2cc:	f04f 0300 	mov.w	r3, #0
 801d2d0:	e012      	b.n	801d2f8 <_ZN12CFileHandler12RefillBufferEv+0xc8>

	uiBytesLeft += uiBytesRead; // add newly read bytes
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	f8b3 229a 	ldrh.w	r2, [r3, #666]	; 0x29a
 801d2d8:	68bb      	ldr	r3, [r7, #8]
 801d2da:	b29b      	uxth	r3, r3
 801d2dc:	18d3      	adds	r3, r2, r3
 801d2de:	b29a      	uxth	r2, r3
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
	ptrReadPosition = uiReadBuffer; // set read position to beginning of buffer
 801d2e6:	687a      	ldr	r2, [r7, #4]
 801d2e8:	f241 130c 	movw	r3, #4364	; 0x110c
 801d2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d2f0:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c

	return true;
 801d2f4:	f04f 0301 	mov.w	r3, #1
}
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	f107 0710 	add.w	r7, r7, #16
 801d2fe:	46bd      	mov	sp, r7
 801d300:	bd80      	pop	{r7, pc}
 801d302:	bf00      	nop

0801d304 <_ZN12CFileHandler10ReadConfigEv>:

/**
  * @brief  reads configuration from filesystem
  *
  */
void CFileHandler::ReadConfig(){
 801d304:	b480      	push	{r7}
 801d306:	b083      	sub	sp, #12
 801d308:	af00      	add	r7, sp, #0
 801d30a:	6078      	str	r0, [r7, #4]

}
 801d30c:	f107 070c 	add.w	r7, r7, #12
 801d310:	46bd      	mov	sp, r7
 801d312:	bc80      	pop	{r7}
 801d314:	4770      	bx	lr
 801d316:	bf00      	nop

0801d318 <_ZN12CFileHandler11WriteConfigEv>:

/**
  * @brief  writes configuration to filesystem
  *
  */
void CFileHandler::WriteConfig(){
 801d318:	b480      	push	{r7}
 801d31a:	b083      	sub	sp, #12
 801d31c:	af00      	add	r7, sp, #0
 801d31e:	6078      	str	r0, [r7, #4]
}
 801d320:	f107 070c 	add.w	r7, r7, #12
 801d324:	46bd      	mov	sp, r7
 801d326:	bc80      	pop	{r7}
 801d328:	4770      	bx	lr
 801d32a:	bf00      	nop

0801d32c <_ZN12CFileHandler9MP3PlayerEv>:

/**
  * @brief  MP3 player application
  * 		Playes MP3 from he whole device
  */
void CFileHandler::MP3Player(){
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b084      	sub	sp, #16
 801d330:	af00      	add	r7, sp, #0
 801d332:	6078      	str	r0, [r7, #4]
	int i;
	bool bFileIsMP3 = false;
 801d334:	f04f 0300 	mov.w	r3, #0
 801d338:	72fb      	strb	r3, [r7, #11]

	//operate files only when device connected
	while(GetUSBConnected()){
 801d33a:	e177      	b.n	801d62c <_ZN12CFileHandler9MP3PlayerEv+0x300>

		switch(ePlayerState){
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
 801d342:	2b03      	cmp	r3, #3
 801d344:	f200 815b 	bhi.w	801d5fe <_ZN12CFileHandler9MP3PlayerEv+0x2d2>
 801d348:	a201      	add	r2, pc, #4	; (adr r2, 801d350 <_ZN12CFileHandler9MP3PlayerEv+0x24>)
 801d34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d34e:	bf00      	nop
 801d350:	0801d361 	.word	0x0801d361
 801d354:	0801d3bf 	.word	0x0801d3bf
 801d358:	0801d563 	.word	0x0801d563
 801d35c:	0801d5bf 	.word	0x0801d5bf
/*------------------------------------------------------------------------------*/
		case OPEN_DIR:

			/* Open the directory */
			fsresult = f_opendir(&dir, path);
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	f503 720d 	add.w	r2, r3, #564	; 0x234
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	f503 731a 	add.w	r3, r3, #616	; 0x268
 801d36c:	4610      	mov	r0, r2
 801d36e:	4619      	mov	r1, r3
 801d370:	f7fe f94a 	bl	801b608 <f_opendir>
 801d374:	4603      	mov	r3, r0
 801d376:	461a      	mov	r2, r3
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	731a      	strb	r2, [r3, #12]
			if (fsresult == FR_OK) {
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	7b1b      	ldrb	r3, [r3, #12]
 801d380:	2b00      	cmp	r3, #0
 801d382:	f040 8148 	bne.w	801d616 <_ZN12CFileHandler9MP3PlayerEv+0x2ea>
				/* get new file on success */
				ePlayerStatePrev = ePlayerState;
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	f893 2292 	ldrb.w	r2, [r3, #658]	; 0x292
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
				ePlayerState = GET_FILE;
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	f04f 0201 	mov.w	r2, #1
 801d398:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292

				if(bStop){
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	f000 8137 	beq.w	801d616 <_ZN12CFileHandler9MP3PlayerEv+0x2ea>
					ePlayerState = STOP;
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	f04f 0203 	mov.w	r2, #3
 801d3ae:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
					bStop = false;
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	f04f 0200 	mov.w	r2, #0
 801d3b8:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
				}
			}
			break;
 801d3bc:	e12b      	b.n	801d616 <_ZN12CFileHandler9MP3PlayerEv+0x2ea>
/*------------------------------------------------------------------------------*/
		case GET_FILE:
			/* Read a directory item */
			fsresult = f_readdir(&dir, &fileInfo);
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	f503 720d 	add.w	r2, r3, #564	; 0x234
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801d3ca:	4610      	mov	r0, r2
 801d3cc:	4619      	mov	r1, r3
 801d3ce:	f7fe f989 	bl	801b6e4 <f_readdir>
 801d3d2:	4603      	mov	r3, r0
 801d3d4:	461a      	mov	r2, r3
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	731a      	strb	r2, [r3, #12]
			if (fsresult != FR_OK || fileInfo.fname[0] == 0){
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	7b1b      	ldrb	r3, [r3, #12]
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	f040 811b 	bne.w	801d61a <_ZN12CFileHandler9MP3PlayerEv+0x2ee>
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	f893 3259 	ldrb.w	r3, [r3, #601]	; 0x259
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	f000 8115 	beq.w	801d61a <_ZN12CFileHandler9MP3PlayerEv+0x2ee>
				break;  /* Break on error or end of dir */
			}
			if (fileInfo.fname[0] == '.'){
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	f893 3259 	ldrb.w	r3, [r3, #601]	; 0x259
 801d3f6:	2b2e      	cmp	r3, #46	; 0x2e
 801d3f8:	f000 8111 	beq.w	801d61e <_ZN12CFileHandler9MP3PlayerEv+0x2f2>
				continue;             /* Ignore dot entry */
			}
			if (fileInfo.fattrib & AM_DIR) {
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	f893 3258 	ldrb.w	r3, [r3, #600]	; 0x258
 801d402:	f003 0310 	and.w	r3, r3, #16
 801d406:	2b00      	cmp	r3, #0
 801d408:	d036      	beq.n	801d478 <_ZN12CFileHandler9MP3PlayerEv+0x14c>
				/* It is a directory */
				/* copy dir Path in Path var */
				strcpy(path,fileInfo.fname);
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	f503 721a 	add.w	r2, r3, #616	; 0x268
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	f503 7316 	add.w	r3, r3, #600	; 0x258
 801d416:	f103 0301 	add.w	r3, r3, #1
 801d41a:	4610      	mov	r0, r2
 801d41c:	4619      	mov	r1, r3
 801d41e:	f009 fa1f 	bl	8026860 <strcpy>
				/* open the new Folder */
				ePlayerStatePrev = ePlayerState;
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	f893 2292 	ldrb.w	r2, [r3, #658]	; 0x292
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
				ePlayerState = OPEN_DIR;
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	f04f 0200 	mov.w	r2, #0
 801d434:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292

				/* get next file on next flag */
				if(bNext) {
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d009      	beq.n	801d456 <_ZN12CFileHandler9MP3PlayerEv+0x12a>
					ePlayerState = GET_FILE;
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	f04f 0201 	mov.w	r2, #1
 801d448:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
					bNext = false;
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	f04f 0200 	mov.w	r2, #0
 801d452:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
				}

				if(bStop){
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	f000 80e0 	beq.w	801d622 <_ZN12CFileHandler9MP3PlayerEv+0x2f6>
					ePlayerState = STOP;
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	f04f 0203 	mov.w	r2, #3
 801d468:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
					bStop = false;
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	f04f 0200 	mov.w	r2, #0
 801d472:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
					}

				}
			}

			break;
 801d476:	e0d4      	b.n	801d622 <_ZN12CFileHandler9MP3PlayerEv+0x2f6>
					ePlayerState = STOP;
					bStop = false;
				}
			} else {
				/* It is a file. */
				bFileIsMP3 = false;
 801d478:	f04f 0300 	mov.w	r3, #0
 801d47c:	72fb      	strb	r3, [r7, #11]
				/* check filetype */
				for(i=sizeof(fileInfo.fname)-4;i>=0;i--){
 801d47e:	f04f 0309 	mov.w	r3, #9
 801d482:	60fb      	str	r3, [r7, #12]
 801d484:	e032      	b.n	801d4ec <_ZN12CFileHandler9MP3PlayerEv+0x1c0>
					if(fileInfo.fname[i] == '.'){
 801d486:	687a      	ldr	r2, [r7, #4]
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	18d3      	adds	r3, r2, r3
 801d48c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 801d490:	785b      	ldrb	r3, [r3, #1]
 801d492:	2b2e      	cmp	r3, #46	; 0x2e
 801d494:	d126      	bne.n	801d4e4 <_ZN12CFileHandler9MP3PlayerEv+0x1b8>
						if((toupper(fileInfo.fname[i+1]) == 'M') &&
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	f103 0301 	add.w	r3, r3, #1
 801d49c:	687a      	ldr	r2, [r7, #4]
 801d49e:	18d3      	adds	r3, r2, r3
 801d4a0:	f893 3259 	ldrb.w	r3, [r3, #601]	; 0x259
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	f00a fc8d 	bl	8027dc4 <toupper>
 801d4aa:	4603      	mov	r3, r0
 801d4ac:	2b4d      	cmp	r3, #77	; 0x4d
 801d4ae:	d119      	bne.n	801d4e4 <_ZN12CFileHandler9MP3PlayerEv+0x1b8>
							(toupper(fileInfo.fname[i+2]) == 'P') &&
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	f103 0302 	add.w	r3, r3, #2
 801d4b6:	687a      	ldr	r2, [r7, #4]
 801d4b8:	18d3      	adds	r3, r2, r3
 801d4ba:	f893 3259 	ldrb.w	r3, [r3, #601]	; 0x259
 801d4be:	4618      	mov	r0, r3
 801d4c0:	f00a fc80 	bl	8027dc4 <toupper>
 801d4c4:	4603      	mov	r3, r0
				/* It is a file. */
				bFileIsMP3 = false;
				/* check filetype */
				for(i=sizeof(fileInfo.fname)-4;i>=0;i--){
					if(fileInfo.fname[i] == '.'){
						if((toupper(fileInfo.fname[i+1]) == 'M') &&
 801d4c6:	2b50      	cmp	r3, #80	; 0x50
 801d4c8:	d10c      	bne.n	801d4e4 <_ZN12CFileHandler9MP3PlayerEv+0x1b8>
 801d4ca:	68fb      	ldr	r3, [r7, #12]
 801d4cc:	f103 0303 	add.w	r3, r3, #3
 801d4d0:	687a      	ldr	r2, [r7, #4]
							(toupper(fileInfo.fname[i+2]) == 'P') &&
							((fileInfo.fname[i+3]) == '3')){
 801d4d2:	18d3      	adds	r3, r2, r3
 801d4d4:	f893 3259 	ldrb.w	r3, [r3, #601]	; 0x259
				/* It is a file. */
				bFileIsMP3 = false;
				/* check filetype */
				for(i=sizeof(fileInfo.fname)-4;i>=0;i--){
					if(fileInfo.fname[i] == '.'){
						if((toupper(fileInfo.fname[i+1]) == 'M') &&
 801d4d8:	2b33      	cmp	r3, #51	; 0x33
 801d4da:	d103      	bne.n	801d4e4 <_ZN12CFileHandler9MP3PlayerEv+0x1b8>
							(toupper(fileInfo.fname[i+2]) == 'P') &&
							((fileInfo.fname[i+3]) == '3')){
							/* Fileending is .MP3, so play it */
							bFileIsMP3 = true;
 801d4dc:	f04f 0301 	mov.w	r3, #1
 801d4e0:	72fb      	strb	r3, [r7, #11]
							break;
 801d4e2:	e00b      	b.n	801d4fc <_ZN12CFileHandler9MP3PlayerEv+0x1d0>
				}
			} else {
				/* It is a file. */
				bFileIsMP3 = false;
				/* check filetype */
				for(i=sizeof(fileInfo.fname)-4;i>=0;i--){
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	f103 33ff 	add.w	r3, r3, #4294967295
 801d4ea:	60fb      	str	r3, [r7, #12]
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	ea6f 0303 	mvn.w	r3, r3
 801d4f2:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 801d4f6:	b2db      	uxtb	r3, r3
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	d1c4      	bne.n	801d486 <_ZN12CFileHandler9MP3PlayerEv+0x15a>
							bFileIsMP3 = true;
							break;
						}
					}
				}
				ePlayerStatePrev = ePlayerState;
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	f893 2292 	ldrb.w	r2, [r3, #658]	; 0x292
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
				/* check if its an MP3 */
				if(bFileIsMP3){
 801d508:	7afb      	ldrb	r3, [r7, #11]
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d014      	beq.n	801d538 <_ZN12CFileHandler9MP3PlayerEv+0x20c>
					/* play MP3 */
					ePlayerState = PLAY_FILE;
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	f04f 0202 	mov.w	r2, #2
 801d514:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292

					/* get next file on next flag */
					if(bNext) {
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d07f      	beq.n	801d622 <_ZN12CFileHandler9MP3PlayerEv+0x2f6>
						ePlayerState = GET_FILE;
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	f04f 0201 	mov.w	r2, #1
 801d528:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
						bNext = false;
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	f04f 0200 	mov.w	r2, #0
 801d532:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
					}

				}
			}

			break;
 801d536:	e074      	b.n	801d622 <_ZN12CFileHandler9MP3PlayerEv+0x2f6>
						bNext = false;
					}

				} else {
					/*get next file*/
					ePlayerState = GET_FILE;
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	f04f 0201 	mov.w	r2, #1
 801d53e:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292

					if(bStop){
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d06a      	beq.n	801d622 <_ZN12CFileHandler9MP3PlayerEv+0x2f6>
						ePlayerState = STOP;
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	f04f 0203 	mov.w	r2, #3
 801d552:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
						bStop = false;
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	f04f 0200 	mov.w	r2, #0
 801d55c:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
					}

				}
			}

			break;
 801d560:	e05f      	b.n	801d622 <_ZN12CFileHandler9MP3PlayerEv+0x2f6>
/*------------------------------------------------------------------------------*/
		case PLAY_FILE:

			PlayMP3(fileInfo.fname);
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	f503 7316 	add.w	r3, r3, #600	; 0x258
 801d568:	f103 0301 	add.w	r3, r3, #1
 801d56c:	6878      	ldr	r0, [r7, #4]
 801d56e:	4619      	mov	r1, r3
 801d570:	f000 f8a4 	bl	801d6bc <_ZN12CFileHandler7PlayMP3EPKc>

			ePlayerStatePrev = ePlayerState;
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	f893 2292 	ldrb.w	r2, [r3, #658]	; 0x292
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293

			/* get next file on next flag */
			if(bNext) {
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 801d586:	2b00      	cmp	r3, #0
 801d588:	d009      	beq.n	801d59e <_ZN12CFileHandler9MP3PlayerEv+0x272>
				ePlayerState = GET_FILE;
 801d58a:	687b      	ldr	r3, [r7, #4]
 801d58c:	f04f 0201 	mov.w	r2, #1
 801d590:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
				bNext = false;
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	f04f 0200 	mov.w	r2, #0
 801d59a:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
			}

			if(bStop){
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d03e      	beq.n	801d626 <_ZN12CFileHandler9MP3PlayerEv+0x2fa>
				ePlayerState = STOP;
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	f04f 0203 	mov.w	r2, #3
 801d5ae:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
				bStop = false;
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	f04f 0200 	mov.w	r2, #0
 801d5b8:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
			}

			break;
 801d5bc:	e033      	b.n	801d626 <_ZN12CFileHandler9MP3PlayerEv+0x2fa>
/*------------------------------------------------------------------------------*/
		case STOP:
			/* start playing again */
			if(bPlay){
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	f893 3295 	ldrb.w	r3, [r3, #661]	; 0x295
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d030      	beq.n	801d62a <_ZN12CFileHandler9MP3PlayerEv+0x2fe>
				/*check for stop loop */
				if(ePlayerStatePrev == STOP)
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	f893 3293 	ldrb.w	r3, [r3, #659]	; 0x293
 801d5ce:	2b03      	cmp	r3, #3
 801d5d0:	d104      	bne.n	801d5dc <_ZN12CFileHandler9MP3PlayerEv+0x2b0>
					ePlayerStatePrev = OPEN_DIR;
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	f04f 0200 	mov.w	r2, #0
 801d5d8:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
				/* go back to previous state */
				ePlayerState = ePlayerStatePrev;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	f893 2293 	ldrb.w	r2, [r3, #659]	; 0x293
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
				ePlayerStatePrev = STOP;
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	f04f 0203 	mov.w	r2, #3
 801d5ee:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
				/*clear Flag*/
				bPlay = false;
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	f04f 0200 	mov.w	r2, #0
 801d5f8:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
			}
			break;
 801d5fc:	e015      	b.n	801d62a <_ZN12CFileHandler9MP3PlayerEv+0x2fe>
/*------------------------------------------------------------------------------*/
		default:
			ePlayerStatePrev = ePlayerState;
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	f893 2292 	ldrb.w	r2, [r3, #658]	; 0x292
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
			ePlayerState = OPEN_DIR;
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	f04f 0200 	mov.w	r2, #0
 801d610:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
			break;
 801d614:	e00a      	b.n	801d62c <_ZN12CFileHandler9MP3PlayerEv+0x300>
				if(bStop){
					ePlayerState = STOP;
					bStop = false;
				}
			}
			break;
 801d616:	bf00      	nop
 801d618:	e008      	b.n	801d62c <_ZN12CFileHandler9MP3PlayerEv+0x300>
/*------------------------------------------------------------------------------*/
		case GET_FILE:
			/* Read a directory item */
			fsresult = f_readdir(&dir, &fileInfo);
			if (fsresult != FR_OK || fileInfo.fname[0] == 0){
				break;  /* Break on error or end of dir */
 801d61a:	bf00      	nop
 801d61c:	e006      	b.n	801d62c <_ZN12CFileHandler9MP3PlayerEv+0x300>
			}
			if (fileInfo.fname[0] == '.'){
				continue;             /* Ignore dot entry */
 801d61e:	bf00      	nop
 801d620:	e004      	b.n	801d62c <_ZN12CFileHandler9MP3PlayerEv+0x300>
					}

				}
			}

			break;
 801d622:	bf00      	nop
 801d624:	e002      	b.n	801d62c <_ZN12CFileHandler9MP3PlayerEv+0x300>
			if(bStop){
				ePlayerState = STOP;
				bStop = false;
			}

			break;
 801d626:	bf00      	nop
 801d628:	e000      	b.n	801d62c <_ZN12CFileHandler9MP3PlayerEv+0x300>
				ePlayerState = ePlayerStatePrev;
				ePlayerStatePrev = STOP;
				/*clear Flag*/
				bPlay = false;
			}
			break;
 801d62a:	bf00      	nop
void CFileHandler::MP3Player(){
	int i;
	bool bFileIsMP3 = false;

	//operate files only when device connected
	while(GetUSBConnected()){
 801d62c:	6878      	ldr	r0, [r7, #4]
 801d62e:	f00f f815 	bl	802c65c <_ZN12CFileHandler15GetUSBConnectedEv>
 801d632:	4603      	mov	r3, r0
 801d634:	2b00      	cmp	r3, #0
 801d636:	f47f ae81 	bne.w	801d33c <_ZN12CFileHandler9MP3PlayerEv+0x10>
			ePlayerStatePrev = ePlayerState;
			ePlayerState = OPEN_DIR;
			break;
		}
	}
}
 801d63a:	f107 0710 	add.w	r7, r7, #16
 801d63e:	46bd      	mov	sp, r7
 801d640:	bd80      	pop	{r7, pc}
 801d642:	bf00      	nop

0801d644 <_ZN12CFileHandler13GetUSBReleaseEm>:
/**
  * @brief  gets sem from USB handling layer
  *
  * @retval true for success and false for fault
  */
bool CFileHandler::GetUSBRelease(portTickType delay){
 801d644:	b580      	push	{r7, lr}
 801d646:	b082      	sub	sp, #8
 801d648:	af00      	add	r7, sp, #0
 801d64a:	6078      	str	r0, [r7, #4]
 801d64c:	6039      	str	r1, [r7, #0]
	/*
	 * get sem from USB Application layer
	 * to process without disturbing USB handling
	 */
	xSemaphoreTake(semUSBApplication,delay);
 801d64e:	f64a 13f0 	movw	r3, #43504	; 0xa9f0
 801d652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	4618      	mov	r0, r3
 801d65a:	f04f 0100 	mov.w	r1, #0
 801d65e:	683a      	ldr	r2, [r7, #0]
 801d660:	f04f 0300 	mov.w	r3, #0
 801d664:	f7f9 f94c 	bl	8016900 <xQueueGenericReceive>

	/*
	 * check if Device is Connected
	 */
	if(GetUSBConnected()){
 801d668:	6878      	ldr	r0, [r7, #4]
 801d66a:	f00e fff7 	bl	802c65c <_ZN12CFileHandler15GetUSBConnectedEv>
 801d66e:	4603      	mov	r3, r0
 801d670:	2b00      	cmp	r3, #0
 801d672:	d002      	beq.n	801d67a <_ZN12CFileHandler13GetUSBReleaseEm+0x36>
		return true;
 801d674:	f04f 0301 	mov.w	r3, #1
 801d678:	e004      	b.n	801d684 <_ZN12CFileHandler13GetUSBReleaseEm+0x40>
	} else {
		/*
		 * Release Sem from USB
		 */
		ReleaseUSB();
 801d67a:	6878      	ldr	r0, [r7, #4]
 801d67c:	f000 f808 	bl	801d690 <_ZN12CFileHandler10ReleaseUSBEv>
		return false;
 801d680:	f04f 0300 	mov.w	r3, #0
	}

}
 801d684:	4618      	mov	r0, r3
 801d686:	f107 0708 	add.w	r7, r7, #8
 801d68a:	46bd      	mov	sp, r7
 801d68c:	bd80      	pop	{r7, pc}
 801d68e:	bf00      	nop

0801d690 <_ZN12CFileHandler10ReleaseUSBEv>:


/**
  * @brief  give USB sem Back to USB handling Layer
  */
void CFileHandler::ReleaseUSB(){
 801d690:	b580      	push	{r7, lr}
 801d692:	b082      	sub	sp, #8
 801d694:	af00      	add	r7, sp, #0
 801d696:	6078      	str	r0, [r7, #4]
	/*
	 * Application layer needs to give back the sem when ever possible
	 */
	xSemaphoreGive(semUSBApplication);
 801d698:	f64a 13f0 	movw	r3, #43504	; 0xa9f0
 801d69c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	f04f 0100 	mov.w	r1, #0
 801d6a8:	f04f 0200 	mov.w	r2, #0
 801d6ac:	f04f 0300 	mov.w	r3, #0
 801d6b0:	f7f9 f84c 	bl	801674c <xQueueGenericSend>
}
 801d6b4:	f107 0708 	add.w	r7, r7, #8
 801d6b8:	46bd      	mov	sp, r7
 801d6ba:	bd80      	pop	{r7, pc}

0801d6bc <_ZN12CFileHandler7PlayMP3EPKc>:
/**
  * @brief  plays mp3 file
  *
  * @retval true for success and false for fault
  */
bool CFileHandler::PlayMP3(const char* filename){
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b084      	sub	sp, #16
 801d6c0:	af02      	add	r7, sp, #8
 801d6c2:	6078      	str	r0, [r7, #4]
 801d6c4:	6039      	str	r1, [r7, #0]
	static int offset = 0;
	static int err = 0;

	//operate files only when device connected
	while(GetUSBConnected()){
 801d6c6:	e1e9      	b.n	801da9c <_ZN12CFileHandler7PlayMP3EPKc+0x3e0>

		/* check if file is skipped */
		if(bNext) {
 801d6c8:	687b      	ldr	r3, [r7, #4]
 801d6ca:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d002      	beq.n	801d6d8 <_ZN12CFileHandler7PlayMP3EPKc+0x1c>
			/* file is to be skiped */
			return false;
 801d6d2:	f04f 0300 	mov.w	r3, #0
 801d6d6:	e1ef      	b.n	801dab8 <_ZN12CFileHandler7PlayMP3EPKc+0x3fc>
		}

		switch(eMP3State){
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 801d6de:	f103 33ff 	add.w	r3, r3, #4294967295
 801d6e2:	2b03      	cmp	r3, #3
 801d6e4:	f200 81ac 	bhi.w	801da40 <_ZN12CFileHandler7PlayMP3EPKc+0x384>
 801d6e8:	a201      	add	r2, pc, #4	; (adr r2, 801d6f0 <_ZN12CFileHandler7PlayMP3EPKc+0x34>)
 801d6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d6ee:	bf00      	nop
 801d6f0:	0801d701 	.word	0x0801d701
 801d6f4:	0801d751 	.word	0x0801d751
 801d6f8:	0801d883 	.word	0x0801d883
 801d6fc:	0801d9c9 	.word	0x0801d9c9
/*------------------------------------------------------------------------------*/
		case OPEN_FILE:

			fsresult = f_open(&file,filename,FA_OPEN_EXISTING | FA_READ);
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	f103 0310 	add.w	r3, r3, #16
 801d706:	4618      	mov	r0, r3
 801d708:	6839      	ldr	r1, [r7, #0]
 801d70a:	f04f 0201 	mov.w	r2, #1
 801d70e:	f7fc ff81 	bl	801a614 <f_open>
 801d712:	4603      	mov	r3, r0
 801d714:	461a      	mov	r2, r3
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	731a      	strb	r2, [r3, #12]
			if(fsresult != FR_OK)
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	7b1b      	ldrb	r3, [r3, #12]
 801d71e:	2b00      	cmp	r3, #0
 801d720:	f040 81b5 	bne.w	801da8e <_ZN12CFileHandler7PlayMP3EPKc+0x3d2>
				break;

			f_sync(&file); //see app note from chan
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	f103 0310 	add.w	r3, r3, #16
 801d72a:	4618      	mov	r0, r3
 801d72c:	f7fd fc68 	bl	801b000 <f_sync>

			if(!RefillBuffer()) // read data from file
 801d730:	6878      	ldr	r0, [r7, #4]
 801d732:	f7ff fd7d 	bl	801d230 <_ZN12CFileHandler12RefillBufferEv>
 801d736:	4603      	mov	r3, r0
 801d738:	f083 0301 	eor.w	r3, r3, #1
 801d73c:	b2db      	uxtb	r3, r3
 801d73e:	2b00      	cmp	r3, #0
 801d740:	f040 81a7 	bne.w	801da92 <_ZN12CFileHandler7PlayMP3EPKc+0x3d6>
				break;

			eMP3State = FIND_SYNC;
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	f04f 0202 	mov.w	r2, #2
 801d74a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

			break;
 801d74e:	e1a5      	b.n	801da9c <_ZN12CFileHandler7PlayMP3EPKc+0x3e0>
/*------------------------------------------------------------------------------*/
		case FIND_SYNC:
			// search beginning of MP3 data
			offset = MP3FindSyncWord(ptrReadPosition, uiBytesLeft);
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 801d75c:	4610      	mov	r0, r2
 801d75e:	4619      	mov	r1, r3
 801d760:	f7f6 fdbe 	bl	80142e0 <MP3FindSyncWord>
 801d764:	4602      	mov	r2, r0
 801d766:	f643 43a0 	movw	r3, #15520	; 0x3ca0
 801d76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d76e:	601a      	str	r2, [r3, #0]
			if (offset < 0) {
 801d770:	f643 43a0 	movw	r3, #15520	; 0x3ca0
 801d774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	da08      	bge.n	801d790 <_ZN12CFileHandler7PlayMP3EPKc+0xd4>
				// no Sync found in Buffer
				uiBytesLeft = 0; // discard all data
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	f04f 0200 	mov.w	r2, #0
 801d784:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
				RefillBuffer(); // read data from file
 801d788:	6878      	ldr	r0, [r7, #4]
 801d78a:	f7ff fd51 	bl	801d230 <_ZN12CFileHandler12RefillBufferEv>
				break;
 801d78e:	e185      	b.n	801da9c <_ZN12CFileHandler7PlayMP3EPKc+0x3e0>
			}
			// move read ptr to Frame position
			ptrReadPosition += offset;
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 801d796:	f643 43a0 	movw	r3, #15520	; 0x3ca0
 801d79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	18d2      	adds	r2, r2, r3
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
			uiBytesLeft -= offset;
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	f8b3 229a 	ldrh.w	r2, [r3, #666]	; 0x29a
 801d7ae:	f643 43a0 	movw	r3, #15520	; 0x3ca0
 801d7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	b29b      	uxth	r3, r3
 801d7ba:	1ad3      	subs	r3, r2, r3
 801d7bc:	b29a      	uxth	r2, r3
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a

			/*
			 * ensure that the found Frame is a valid frame and
			 * not some weird ID3 tag
			 */
			err = MP3GetNextFrameInfo(hMP3Decoder,&mp3FrameInfo,ptrReadPosition);
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	f8d3 12a4 	ldr.w	r1, [r3, #676]	; 0x2a4
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	f503 722a 	add.w	r2, r3, #680	; 0x2a8
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801d7d6:	4608      	mov	r0, r1
 801d7d8:	4611      	mov	r1, r2
 801d7da:	461a      	mov	r2, r3
 801d7dc:	f7f6 fe7a 	bl	80144d4 <MP3GetNextFrameInfo>
 801d7e0:	4602      	mov	r2, r0
 801d7e2:	f643 43a4 	movw	r3, #15524	; 0x3ca4
 801d7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d7ea:	601a      	str	r2, [r3, #0]
			if(err == 0 && mp3FrameInfo.nChans == 2 && mp3FrameInfo.version == 0){
 801d7ec:	f643 43a4 	movw	r3, #15524	; 0x3ca4
 801d7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d135      	bne.n	801d866 <_ZN12CFileHandler7PlayMP3EPKc+0x1aa>
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801d800:	2b02      	cmp	r3, #2
 801d802:	d130      	bne.n	801d866 <_ZN12CFileHandler7PlayMP3EPKc+0x1aa>
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d12b      	bne.n	801d866 <_ZN12CFileHandler7PlayMP3EPKc+0x1aa>
				if(uiLastSamplerate != mp3FrameInfo.samprate) {
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 801d814:	461a      	mov	r2, r3
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d81c:	429a      	cmp	r2, r3
 801d81e:	d01c      	beq.n	801d85a <_ZN12CFileHandler7PlayMP3EPKc+0x19e>
					/* Initialize I2S interface */
					EVAL_AUDIO_SetAudioInterface(AUDIO_INTERFACE_I2S);
 801d820:	f04f 0001 	mov.w	r0, #1
 801d824:	f7ec fa88 	bl	8009d38 <EVAL_AUDIO_SetAudioInterface>
					/*
					 * initialize Codec with sample freq.
					 */
					portENTER_CRITICAL();
 801d828:	f7f8 fd82 	bl	8016330 <vPortEnterCritical>
					EVAL_AUDIO_DeInit();
 801d82c:	f7ec fb70 	bl	8009f10 <EVAL_AUDIO_DeInit>
					EVAL_AUDIO_Init(OUTPUT_DEVICE_AUTO,uiVolume,mp3FrameInfo.samprate);
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	f893 22a0 	ldrb.w	r2, [r3, #672]	; 0x2a0
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d83c:	f04f 0004 	mov.w	r0, #4
 801d840:	4611      	mov	r1, r2
 801d842:	461a      	mov	r2, r3
 801d844:	f7ec fb30 	bl	8009ea8 <EVAL_AUDIO_Init>
					portEXIT_CRITICAL();
 801d848:	f7f8 fd88 	bl	801635c <vPortExitCritical>
					uiLastSamplerate = mp3FrameInfo.samprate;
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d852:	b29a      	uxth	r2, r3
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
				}
				/*
				 * Frame is valid initialize Codec is initialized with samperate
				 * so lets go playing mp3
				 */
				eMP3State = DECODE;
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	f04f 0203 	mov.w	r2, #3
 801d860:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				 * valid frame but not compatible with the codec
				 */
				eMP3State = CLOSE_FILE;
			}

			break;
 801d864:	e117      	b.n	801da96 <_ZN12CFileHandler7PlayMP3EPKc+0x3da>
				/*
				 * Frame is valid initialize Codec is initialized with samperate
				 * so lets go playing mp3
				 */
				eMP3State = DECODE;
			}else if(err == 0){
 801d866:	f643 43a4 	movw	r3, #15524	; 0x3ca4
 801d86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	2b00      	cmp	r3, #0
 801d872:	f040 8110 	bne.w	801da96 <_ZN12CFileHandler7PlayMP3EPKc+0x3da>
				/*
				 * valid frame but not compatible with the codec
				 */
				eMP3State = CLOSE_FILE;
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	f04f 0205 	mov.w	r2, #5
 801d87c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			}

			break;
 801d880:	e109      	b.n	801da96 <_ZN12CFileHandler7PlayMP3EPKc+0x3da>
/*------------------------------------------------------------------------------*/
		case DECODE:

			if(uiBytesLeft < READBUF_THRESHOLD) {
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 801d888:	f5b3 7f72 	cmp.w	r3, #968	; 0x3c8
 801d88c:	d80d      	bhi.n	801d8aa <_ZN12CFileHandler7PlayMP3EPKc+0x1ee>
				if(!RefillBuffer()) // end of file
 801d88e:	6878      	ldr	r0, [r7, #4]
 801d890:	f7ff fcce 	bl	801d230 <_ZN12CFileHandler12RefillBufferEv>
 801d894:	4603      	mov	r3, r0
 801d896:	f083 0301 	eor.w	r3, r3, #1
 801d89a:	b2db      	uxtb	r3, r3
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d004      	beq.n	801d8aa <_ZN12CFileHandler7PlayMP3EPKc+0x1ee>
					eMP3State = CLOSE_FILE;
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	f04f 0205 	mov.w	r2, #5
 801d8a6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			}

			if(eBuffer == BUFFER_1){
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d11d      	bne.n	801d8f0 <_ZN12CFileHandler7PlayMP3EPKc+0x234>
				err = MP3Decode(hMP3Decoder,&ptrReadPosition,(int*)&uiBytesLeft,iPCMBuffer1,0);
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	f8d3 12a4 	ldr.w	r1, [r3, #676]	; 0x2a4
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801d8c6:	f103 0302 	add.w	r3, r3, #2
 801d8ca:	f04f 0000 	mov.w	r0, #0
 801d8ce:	9000      	str	r0, [sp, #0]
 801d8d0:	4608      	mov	r0, r1
 801d8d2:	4611      	mov	r1, r2
 801d8d4:	461a      	mov	r2, r3
 801d8d6:	f641 03a0 	movw	r3, #6304	; 0x18a0
 801d8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d8de:	f7f6 fe53 	bl	8014588 <MP3Decode>
 801d8e2:	4602      	mov	r2, r0
 801d8e4:	f643 43a4 	movw	r3, #15524	; 0x3ca4
 801d8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d8ec:	601a      	str	r2, [r3, #0]
 801d8ee:	e01c      	b.n	801d92a <_ZN12CFileHandler7PlayMP3EPKc+0x26e>
			}else{
				err = MP3Decode(hMP3Decoder,&ptrReadPosition,(int*)&uiBytesLeft,iPCMBuffer2,0);
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	f8d3 12a4 	ldr.w	r1, [r3, #676]	; 0x2a4
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801d902:	f103 0302 	add.w	r3, r3, #2
 801d906:	f04f 0000 	mov.w	r0, #0
 801d90a:	9000      	str	r0, [sp, #0]
 801d90c:	4608      	mov	r0, r1
 801d90e:	4611      	mov	r1, r2
 801d910:	461a      	mov	r2, r3
 801d912:	f642 23a0 	movw	r3, #10912	; 0x2aa0
 801d916:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d91a:	f7f6 fe35 	bl	8014588 <MP3Decode>
 801d91e:	4602      	mov	r2, r0
 801d920:	f643 43a4 	movw	r3, #15524	; 0x3ca4
 801d924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d928:	601a      	str	r2, [r3, #0]
			}

			if (err)
 801d92a:	f643 43a4 	movw	r3, #15524	; 0x3ca4
 801d92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d041      	beq.n	801d9bc <_ZN12CFileHandler7PlayMP3EPKc+0x300>
			{
				/* error occurred */
				switch (err)
 801d938:	f643 43a4 	movw	r3, #15524	; 0x3ca4
 801d93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	f103 0306 	add.w	r3, r3, #6
 801d946:	2b05      	cmp	r3, #5
 801d948:	d82f      	bhi.n	801d9aa <_ZN12CFileHandler7PlayMP3EPKc+0x2ee>
 801d94a:	a201      	add	r2, pc, #4	; (adr r2, 801d950 <_ZN12CFileHandler7PlayMP3EPKc+0x294>)
 801d94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d950:	0801d99f 	.word	0x0801d99f
 801d954:	0801d9ab 	.word	0x0801d9ab
 801d958:	0801d9ab 	.word	0x0801d9ab
 801d95c:	0801d993 	.word	0x0801d993
 801d960:	0801d987 	.word	0x0801d987
 801d964:	0801d969 	.word	0x0801d969
				{
				case ERR_MP3_INDATA_UNDERFLOW:
					if(!RefillBuffer()){ // end of file
 801d968:	6878      	ldr	r0, [r7, #4]
 801d96a:	f7ff fc61 	bl	801d230 <_ZN12CFileHandler12RefillBufferEv>
 801d96e:	4603      	mov	r3, r0
 801d970:	f083 0301 	eor.w	r3, r3, #1
 801d974:	b2db      	uxtb	r3, r3
 801d976:	2b00      	cmp	r3, #0
 801d978:	d01e      	beq.n	801d9b8 <_ZN12CFileHandler7PlayMP3EPKc+0x2fc>
						eMP3State = CLOSE_FILE;
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	f04f 0205 	mov.w	r2, #5
 801d980:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
					}
					break;
 801d984:	e018      	b.n	801d9b8 <_ZN12CFileHandler7PlayMP3EPKc+0x2fc>
				case ERR_MP3_MAINDATA_UNDERFLOW:
					eMP3State = DECODE; // more data needed
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	f04f 0203 	mov.w	r2, #3
 801d98c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
					break;
 801d990:	e013      	b.n	801d9ba <_ZN12CFileHandler7PlayMP3EPKc+0x2fe>
				case ERR_MP3_FREE_BITRATE_SYNC:
					eMP3State = CLOSE_FILE;
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	f04f 0205 	mov.w	r2, #5
 801d998:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
					break;
 801d99c:	e00d      	b.n	801d9ba <_ZN12CFileHandler7PlayMP3EPKc+0x2fe>
				case ERR_MP3_INVALID_FRAMEHEADER:
					eMP3State = FIND_SYNC;
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	f04f 0202 	mov.w	r2, #2
 801d9a4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
					break;
 801d9a8:	e007      	b.n	801d9ba <_ZN12CFileHandler7PlayMP3EPKc+0x2fe>
				default:
					eMP3State = CLOSE_FILE;
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	f04f 0205 	mov.w	r2, #5
 801d9b0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
					break;
 801d9b4:	bf00      	nop
				}
			} else {
				eMP3State = PLAYBACK;
			}

			break;
 801d9b6:	e071      	b.n	801da9c <_ZN12CFileHandler7PlayMP3EPKc+0x3e0>
				{
				case ERR_MP3_INDATA_UNDERFLOW:
					if(!RefillBuffer()){ // end of file
						eMP3State = CLOSE_FILE;
					}
					break;
 801d9b8:	bf00      	nop
				}
			} else {
				eMP3State = PLAYBACK;
			}

			break;
 801d9ba:	e06f      	b.n	801da9c <_ZN12CFileHandler7PlayMP3EPKc+0x3e0>
				default:
					eMP3State = CLOSE_FILE;
					break;
				}
			} else {
				eMP3State = PLAYBACK;
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	f04f 0204 	mov.w	r2, #4
 801d9c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			}

			break;
 801d9c6:	e069      	b.n	801da9c <_ZN12CFileHandler7PlayMP3EPKc+0x3e0>

/*------------------------------------------------------------------------------*/
		case PLAYBACK:
			if(xSemaphoreTake(semI2SDMAFinished , portMAX_DELAY ) == pdTRUE){
 801d9c8:	f241 1300 	movw	r3, #4352	; 0x1100
 801d9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d9d0:	681b      	ldr	r3, [r3, #0]
 801d9d2:	4618      	mov	r0, r3
 801d9d4:	f04f 0100 	mov.w	r1, #0
 801d9d8:	f04f 32ff 	mov.w	r2, #4294967295
 801d9dc:	f04f 0300 	mov.w	r3, #0
 801d9e0:	f7f8 ff8e 	bl	8016900 <xQueueGenericReceive>
 801d9e4:	4603      	mov	r3, r0
 801d9e6:	2b01      	cmp	r3, #1
 801d9e8:	bf14      	ite	ne
 801d9ea:	2300      	movne	r3, #0
 801d9ec:	2301      	moveq	r3, #1
 801d9ee:	b2db      	uxtb	r3, r3
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d052      	beq.n	801da9a <_ZN12CFileHandler7PlayMP3EPKc+0x3de>
				/*
				 * start playing the samples
				 */
				if(eBuffer == BUFFER_1) {
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d10d      	bne.n	801da1a <_ZN12CFileHandler7PlayMP3EPKc+0x35e>
					EVAL_AUDIO_Play(iPCMBuffer1,sizeof(iPCMBuffer1));
 801d9fe:	f641 00a0 	movw	r0, #6304	; 0x18a0
 801da02:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801da06:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 801da0a:	f7ec fa8b 	bl	8009f24 <EVAL_AUDIO_Play>
					eBuffer = BUFFER_2;
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	f04f 0201 	mov.w	r2, #1
 801da14:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 801da18:	e00c      	b.n	801da34 <_ZN12CFileHandler7PlayMP3EPKc+0x378>
				}else{
					EVAL_AUDIO_Play(iPCMBuffer2,sizeof(iPCMBuffer2));
 801da1a:	f642 20a0 	movw	r0, #10912	; 0x2aa0
 801da1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801da22:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 801da26:	f7ec fa7d 	bl	8009f24 <EVAL_AUDIO_Play>
					eBuffer = BUFFER_1; //switch Buffers
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	f04f 0200 	mov.w	r2, #0
 801da30:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
				}
				eMP3State = DECODE;
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	f04f 0203 	mov.w	r2, #3
 801da3a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			}

			break;
 801da3e:	e02c      	b.n	801da9a <_ZN12CFileHandler7PlayMP3EPKc+0x3de>

		default:
			// stop I2S to prevent noise
			EVAL_AUDIO_Stop(CODEC_PDWN_SW);
 801da40:	f04f 0002 	mov.w	r0, #2
 801da44:	f7ec fac6 	bl	8009fd4 <EVAL_AUDIO_Stop>
			fsresult = FR_OK;
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	f04f 0200 	mov.w	r2, #0
 801da4e:	731a      	strb	r2, [r3, #12]
			uiBytesLeft = 0;
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	f04f 0200 	mov.w	r2, #0
 801da56:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
			ptrReadPosition = uiReadBuffer;
 801da5a:	687a      	ldr	r2, [r7, #4]
 801da5c:	f241 130c 	movw	r3, #4364	; 0x110c
 801da60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801da64:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
			eBuffer = BUFFER_1;
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	f04f 0200 	mov.w	r2, #0
 801da6e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
			/*
			 * Close-File State not implemented,
			 * all unknown states result in file close
			 */
			f_close(&file);
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	f103 0310 	add.w	r3, r3, #16
 801da78:	4618      	mov	r0, r3
 801da7a:	f7fd fba1 	bl	801b1c0 <f_close>
			eMP3State = OPEN_FILE;
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	f04f 0201 	mov.w	r2, #1
 801da84:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			return true;
 801da88:	f04f 0301 	mov.w	r3, #1
 801da8c:	e014      	b.n	801dab8 <_ZN12CFileHandler7PlayMP3EPKc+0x3fc>
/*------------------------------------------------------------------------------*/
		case OPEN_FILE:

			fsresult = f_open(&file,filename,FA_OPEN_EXISTING | FA_READ);
			if(fsresult != FR_OK)
				break;
 801da8e:	bf00      	nop
 801da90:	e004      	b.n	801da9c <_ZN12CFileHandler7PlayMP3EPKc+0x3e0>

			f_sync(&file); //see app note from chan

			if(!RefillBuffer()) // read data from file
				break;
 801da92:	bf00      	nop
 801da94:	e002      	b.n	801da9c <_ZN12CFileHandler7PlayMP3EPKc+0x3e0>
				 * valid frame but not compatible with the codec
				 */
				eMP3State = CLOSE_FILE;
			}

			break;
 801da96:	bf00      	nop
 801da98:	e000      	b.n	801da9c <_ZN12CFileHandler7PlayMP3EPKc+0x3e0>
					eBuffer = BUFFER_1; //switch Buffers
				}
				eMP3State = DECODE;
			}

			break;
 801da9a:	bf00      	nop
bool CFileHandler::PlayMP3(const char* filename){
	static int offset = 0;
	static int err = 0;

	//operate files only when device connected
	while(GetUSBConnected()){
 801da9c:	6878      	ldr	r0, [r7, #4]
 801da9e:	f00e fddd 	bl	802c65c <_ZN12CFileHandler15GetUSBConnectedEv>
 801daa2:	4603      	mov	r3, r0
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	f47f ae0f 	bne.w	801d6c8 <_ZN12CFileHandler7PlayMP3EPKc+0xc>
			eMP3State = OPEN_FILE;
			return true;
			break;
		}
	}
	eMP3State = OPEN_FILE;
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	f04f 0201 	mov.w	r2, #1
 801dab0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
	return false; //Device disconnected
 801dab4:	f04f 0300 	mov.w	r3, #0
}
 801dab8:	4618      	mov	r0, r3
 801daba:	f107 0708 	add.w	r7, r7, #8
 801dabe:	46bd      	mov	sp, r7
 801dac0:	bd80      	pop	{r7, pc}
 801dac2:	bf00      	nop

0801dac4 <_ZN12CFileHandler7GetSongEv>:

/**
 * @brief get the actual filename of the song played
 * @return filename of played song
 */
const char* CFileHandler::GetSong(){
 801dac4:	b480      	push	{r7}
 801dac6:	b083      	sub	sp, #12
 801dac8:	af00      	add	r7, sp, #0
 801daca:	6078      	str	r0, [r7, #4]
	return fileInfo.fname;
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	f503 7316 	add.w	r3, r3, #600	; 0x258
 801dad2:	f103 0301 	add.w	r3, r3, #1
}
 801dad6:	4618      	mov	r0, r3
 801dad8:	f107 070c 	add.w	r7, r7, #12
 801dadc:	46bd      	mov	sp, r7
 801dade:	bc80      	pop	{r7}
 801dae0:	4770      	bx	lr
 801dae2:	bf00      	nop

0801dae4 <_ZN12CFileHandler9PlayPauseEv>:

/**
  * @brief  toggles play, pause state
  *
  */
void CFileHandler::PlayPause(){
 801dae4:	b580      	push	{r7, lr}
 801dae6:	b082      	sub	sp, #8
 801dae8:	af00      	add	r7, sp, #0
 801daea:	6078      	str	r0, [r7, #4]
	if(bPlaying) {
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d009      	beq.n	801db0a <_ZN12CFileHandler9PlayPauseEv+0x26>
		EVAL_AUDIO_PauseResume(AUDIO_PAUSE);
 801daf6:	f04f 0000 	mov.w	r0, #0
 801dafa:	f7ec fa51 	bl	8009fa0 <EVAL_AUDIO_PauseResume>
		bPlaying = false;
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	f04f 0200 	mov.w	r2, #0
 801db04:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 801db08:	e008      	b.n	801db1c <_ZN12CFileHandler9PlayPauseEv+0x38>
	} else {
		EVAL_AUDIO_PauseResume(AUDIO_RESUME);
 801db0a:	f04f 0001 	mov.w	r0, #1
 801db0e:	f7ec fa47 	bl	8009fa0 <EVAL_AUDIO_PauseResume>
		bPlaying = true;
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	f04f 0201 	mov.w	r2, #1
 801db18:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
	}
}
 801db1c:	f107 0708 	add.w	r7, r7, #8
 801db20:	46bd      	mov	sp, r7
 801db22:	bd80      	pop	{r7, pc}

0801db24 <_ZN12CFileHandler9SetVolumeEh>:

/**
  * @brief  set actual DAC volume in %
  *
  */
void CFileHandler::SetVolume(uint8_t newVolume){
 801db24:	b580      	push	{r7, lr}
 801db26:	b082      	sub	sp, #8
 801db28:	af00      	add	r7, sp, #0
 801db2a:	6078      	str	r0, [r7, #4]
 801db2c:	460b      	mov	r3, r1
 801db2e:	70fb      	strb	r3, [r7, #3]
	uiVolume = newVolume;
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	78fa      	ldrb	r2, [r7, #3]
 801db34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	EVAL_AUDIO_VolumeCtl(newVolume);
 801db38:	78fb      	ldrb	r3, [r7, #3]
 801db3a:	4618      	mov	r0, r3
 801db3c:	f7ec fa6a 	bl	800a014 <EVAL_AUDIO_VolumeCtl>
}
 801db40:	f107 0708 	add.w	r7, r7, #8
 801db44:	46bd      	mov	sp, r7
 801db46:	bd80      	pop	{r7, pc}

0801db48 <_ZN12CFileHandler11Mems_ConfigEv>:
 * @brief  configure the mems accelometer
 * @param  None
 * @retval None
 */
void CFileHandler::Mems_Config(void)
{
 801db48:	b580      	push	{r7, lr}
 801db4a:	b086      	sub	sp, #24
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0;
 801db50:	f04f 0300 	mov.w	r3, #0
 801db54:	75fb      	strb	r3, [r7, #23]

	LIS302DL_InitTypeDef  LIS302DL_InitStruct;
	LIS302DL_InterruptConfigTypeDef LIS302DL_InterruptStruct;

	/* Set configuration of LIS302DL*/
	LIS302DL_InitStruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 801db56:	f04f 0340 	mov.w	r3, #64	; 0x40
 801db5a:	743b      	strb	r3, [r7, #16]
	LIS302DL_InitStruct.Output_DataRate = LIS302DL_DATARATE_100;
 801db5c:	f04f 0300 	mov.w	r3, #0
 801db60:	747b      	strb	r3, [r7, #17]
	LIS302DL_InitStruct.Axes_Enable = LIS302DL_X_ENABLE | LIS302DL_Y_ENABLE | LIS302DL_Z_ENABLE;
 801db62:	f04f 0307 	mov.w	r3, #7
 801db66:	74bb      	strb	r3, [r7, #18]
	LIS302DL_InitStruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 801db68:	f04f 0300 	mov.w	r3, #0
 801db6c:	74fb      	strb	r3, [r7, #19]
	LIS302DL_InitStruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 801db6e:	f04f 0300 	mov.w	r3, #0
 801db72:	753b      	strb	r3, [r7, #20]
	LIS302DL_Init(&LIS302DL_InitStruct);
 801db74:	f107 0310 	add.w	r3, r7, #16
 801db78:	4618      	mov	r0, r3
 801db7a:	f7ed fc87 	bl	800b48c <LIS302DL_Init>

	/* Set configuration of Internal High Pass Filter of LIS302DL*/
	LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 801db7e:	f04f 0340 	mov.w	r3, #64	; 0x40
 801db82:	733b      	strb	r3, [r7, #12]
	LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 801db84:	f04f 0310 	mov.w	r3, #16
 801db88:	737b      	strb	r3, [r7, #13]
	LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 801db8a:	f04f 0320 	mov.w	r3, #32
 801db8e:	73bb      	strb	r3, [r7, #14]
	LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 801db90:	f107 030c 	add.w	r3, r7, #12
 801db94:	4618      	mov	r0, r3
 801db96:	f7ed fcd3 	bl	800b540 <LIS302DL_InterruptConfig>

	/* Configure Interrupt control register: enable Click interrupt on INT1 and
     INT2 on Z axis high event */
	ctrl = 0x3F;
 801db9a:	f04f 033f 	mov.w	r3, #63	; 0x3f
 801db9e:	75fb      	strb	r3, [r7, #23]
	LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 801dba0:	f107 0317 	add.w	r3, r7, #23
 801dba4:	4618      	mov	r0, r3
 801dba6:	f04f 0122 	mov.w	r1, #34	; 0x22
 801dbaa:	f04f 0201 	mov.w	r2, #1
 801dbae:	f7ed fd7f 	bl	800b6b0 <LIS302DL_Write>

	/* Enable Interrupt generation on click on Z axis */
	ctrl = 0x50;
 801dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dbb6:	75fb      	strb	r3, [r7, #23]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 801dbb8:	f107 0317 	add.w	r3, r7, #23
 801dbbc:	4618      	mov	r0, r3
 801dbbe:	f04f 0138 	mov.w	r1, #56	; 0x38
 801dbc2:	f04f 0201 	mov.w	r2, #1
 801dbc6:	f7ed fd73 	bl	800b6b0 <LIS302DL_Write>

	/* Configure Click Threshold on X/Y axis (10 x 0.5g) */
	ctrl = 0xAA;
 801dbca:	f04f 03aa 	mov.w	r3, #170	; 0xaa
 801dbce:	75fb      	strb	r3, [r7, #23]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 801dbd0:	f107 0317 	add.w	r3, r7, #23
 801dbd4:	4618      	mov	r0, r3
 801dbd6:	f04f 013b 	mov.w	r1, #59	; 0x3b
 801dbda:	f04f 0201 	mov.w	r2, #1
 801dbde:	f7ed fd67 	bl	800b6b0 <LIS302DL_Write>

	/* Configure Click Threshold on Z axis (10 x 0.5g) */
	ctrl = 0x0A;
 801dbe2:	f04f 030a 	mov.w	r3, #10
 801dbe6:	75fb      	strb	r3, [r7, #23]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 801dbe8:	f107 0317 	add.w	r3, r7, #23
 801dbec:	4618      	mov	r0, r3
 801dbee:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801dbf2:	f04f 0201 	mov.w	r2, #1
 801dbf6:	f7ed fd5b 	bl	800b6b0 <LIS302DL_Write>

	/* Enable interrupt on Y axis high event */
	ctrl = 0x4C;
 801dbfa:	f04f 034c 	mov.w	r3, #76	; 0x4c
 801dbfe:	75fb      	strb	r3, [r7, #23]
	LIS302DL_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 801dc00:	f107 0317 	add.w	r3, r7, #23
 801dc04:	4618      	mov	r0, r3
 801dc06:	f04f 0130 	mov.w	r1, #48	; 0x30
 801dc0a:	f04f 0201 	mov.w	r2, #1
 801dc0e:	f7ed fd4f 	bl	800b6b0 <LIS302DL_Write>

	/* Configure Time Limit */
	ctrl = 0x03;
 801dc12:	f04f 0303 	mov.w	r3, #3
 801dc16:	75fb      	strb	r3, [r7, #23]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 801dc18:	f107 0317 	add.w	r3, r7, #23
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	f04f 013d 	mov.w	r1, #61	; 0x3d
 801dc22:	f04f 0201 	mov.w	r2, #1
 801dc26:	f7ed fd43 	bl	800b6b0 <LIS302DL_Write>

	/* Configure Latency */
	ctrl = 0x7F;
 801dc2a:	f04f 037f 	mov.w	r3, #127	; 0x7f
 801dc2e:	75fb      	strb	r3, [r7, #23]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 801dc30:	f107 0317 	add.w	r3, r7, #23
 801dc34:	4618      	mov	r0, r3
 801dc36:	f04f 013e 	mov.w	r1, #62	; 0x3e
 801dc3a:	f04f 0201 	mov.w	r2, #1
 801dc3e:	f7ed fd37 	bl	800b6b0 <LIS302DL_Write>

	/* Configure Click Window */
	ctrl = 0x7F;
 801dc42:	f04f 037f 	mov.w	r3, #127	; 0x7f
 801dc46:	75fb      	strb	r3, [r7, #23]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 801dc48:	f107 0317 	add.w	r3, r7, #23
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	f04f 013f 	mov.w	r1, #63	; 0x3f
 801dc52:	f04f 0201 	mov.w	r2, #1
 801dc56:	f7ed fd2b 	bl	800b6b0 <LIS302DL_Write>

}
 801dc5a:	f107 0718 	add.w	r7, r7, #24
 801dc5e:	46bd      	mov	sp, r7
 801dc60:	bd80      	pop	{r7, pc}
 801dc62:	bf00      	nop

0801dc64 <_ZN12CFileHandler15EXTILine_ConfigEv>:
 * @brief  Configures EXTI Line0 (connected to PA0 pin) in interrupt mode
 * @param  None
 * @retval None
 */
void CFileHandler::EXTILine_Config(void)
{
 801dc64:	b580      	push	{r7, lr}
 801dc66:	b088      	sub	sp, #32
 801dc68:	af00      	add	r7, sp, #0
 801dc6a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef   GPIO_InitStructure;
	NVIC_InitTypeDef   NVIC_InitStructure;
	EXTI_InitTypeDef   EXTI_InitStructure;
	/* Enable GPIOA clock */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 801dc6c:	f04f 0010 	mov.w	r0, #16
 801dc70:	f04f 0101 	mov.w	r1, #1
 801dc74:	f7ea fe9c 	bl	80089b0 <RCC_AHB1PeriphClockCmd>
	/* Enable SYSCFG clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 801dc78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801dc7c:	f04f 0101 	mov.w	r1, #1
 801dc80:	f7ea ff46 	bl	8008b10 <RCC_APB2PeriphClockCmd>
	/* Configure PE0 and PE1 pins as input floating */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801dc84:	f04f 0300 	mov.w	r3, #0
 801dc88:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801dc8a:	f04f 0300 	mov.w	r3, #0
 801dc8e:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
 801dc90:	f04f 0303 	mov.w	r3, #3
 801dc94:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 801dc96:	f107 0318 	add.w	r3, r7, #24
 801dc9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801dc9e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801dca2:	4619      	mov	r1, r3
 801dca4:	f7e9 fbf6 	bl	8007494 <GPIO_Init>

	/* Connect EXTI Line to PE1 pins */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource1);
 801dca8:	f04f 0004 	mov.w	r0, #4
 801dcac:	f04f 0101 	mov.w	r1, #1
 801dcb0:	f7eb fe60 	bl	8009974 <SYSCFG_EXTILineConfig>

	/* Configure EXTI Line1 */
	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 801dcb4:	f04f 0302 	mov.w	r3, #2
 801dcb8:	60fb      	str	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 801dcba:	f04f 0300 	mov.w	r3, #0
 801dcbe:	743b      	strb	r3, [r7, #16]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 801dcc0:	f04f 0308 	mov.w	r3, #8
 801dcc4:	747b      	strb	r3, [r7, #17]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 801dcc6:	f04f 0301 	mov.w	r3, #1
 801dcca:	74bb      	strb	r3, [r7, #18]
	EXTI_Init(&EXTI_InitStructure);
 801dccc:	f107 030c 	add.w	r3, r7, #12
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	f7e9 f9e3 	bl	800709c <EXTI_Init>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 801dcd6:	f44f 7040 	mov.w	r0, #768	; 0x300
 801dcda:	f7e8 fa1f 	bl	800611c <NVIC_PriorityGroupConfig>

	/* Enable and set EXTI Line0 Interrupt to the priority 1 higher than RTOS Kern */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 801dcde:	f04f 0307 	mov.w	r3, #7
 801dce2:	753b      	strb	r3, [r7, #20]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_KERNEL_INTERRUPT_PRIORITY-1;
 801dce4:	f04f 030e 	mov.w	r3, #14
 801dce8:	757b      	strb	r3, [r7, #21]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 801dcea:	f04f 0300 	mov.w	r3, #0
 801dcee:	75bb      	strb	r3, [r7, #22]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 801dcf0:	f04f 0301 	mov.w	r3, #1
 801dcf4:	75fb      	strb	r3, [r7, #23]
	NVIC_Init(&NVIC_InitStructure);
 801dcf6:	f107 0314 	add.w	r3, r7, #20
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	f7e8 fa22 	bl	8006144 <NVIC_Init>
}
 801dd00:	f107 0720 	add.w	r7, r7, #32
 801dd04:	46bd      	mov	sp, r7
 801dd06:	bd80      	pop	{r7, pc}

0801dd08 <EVAL_AUDIO_TransferComplete_CallBack>:
 * @brief  Calculates the remaining file size and new position of the pointer.
 * @param  None
 * @retval None
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 801dd08:	b580      	push	{r7, lr}
 801dd0a:	b084      	sub	sp, #16
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	6078      	str	r0, [r7, #4]
 801dd10:	6039      	str	r1, [r7, #0]
  for the DMA transfer. If the Audio files size is less than the DMA max
  data transfer size, so there is no calculation to be done, just restart
  from the beginning of the file ... */
	/* Check if the end of file has been reached */

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 801dd12:	f04f 0300 	mov.w	r3, #0
 801dd16:	60fb      	str	r3, [r7, #12]

	xSemaphoreGiveFromISR(semI2SDMAFinished,&xHigherPriorityTaskWoken);
 801dd18:	f241 1300 	movw	r3, #4352	; 0x1100
 801dd1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dd20:	681a      	ldr	r2, [r3, #0]
 801dd22:	f107 030c 	add.w	r3, r7, #12
 801dd26:	4610      	mov	r0, r2
 801dd28:	f04f 0100 	mov.w	r1, #0
 801dd2c:	461a      	mov	r2, r3
 801dd2e:	f04f 0300 	mov.w	r3, #0
 801dd32:	f7f8 fd9d 	bl	8016870 <xQueueGenericSendFromISR>
	/*
	 * triggers PendSV handler for context switch
	 * but when DMA Handler has higher Priority
	 * this has no effect until ISR is finished
	 */
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d001      	beq.n	801dd40 <EVAL_AUDIO_TransferComplete_CallBack+0x38>
 801dd3c:	f7f8 faec 	bl	8016318 <vPortYieldFromISR>
}
 801dd40:	f107 0710 	add.w	r7, r7, #16
 801dd44:	46bd      	mov	sp, r7
 801dd46:	bd80      	pop	{r7, pc}

0801dd48 <EVAL_AUDIO_GetSampleCallBack>:
 * @brief  Get next data sample callback
 * @param  None
 * @retval Next data sample to be sent
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 801dd48:	b480      	push	{r7}
 801dd4a:	af00      	add	r7, sp, #0
	return 0;
 801dd4c:	f04f 0300 	mov.w	r3, #0
}
 801dd50:	4618      	mov	r0, r3
 801dd52:	46bd      	mov	sp, r7
 801dd54:	bc80      	pop	{r7}
 801dd56:	4770      	bx	lr

0801dd58 <get_fattime>:
 * 			bit 4:0
 * 				 Second / 2 (0..29)
 *
 */
DWORD get_fattime (void)
{
 801dd58:	b480      	push	{r7}
 801dd5a:	af00      	add	r7, sp, #0


  return 0;
 801dd5c:	f04f 0300 	mov.w	r3, #0
}
 801dd60:	4618      	mov	r0, r3
 801dd62:	46bd      	mov	sp, r7
 801dd64:	bc80      	pop	{r7}
 801dd66:	4770      	bx	lr

0801dd68 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	b082      	sub	sp, #8
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	6078      	str	r0, [r7, #4]
 801dd70:	6039      	str	r1, [r7, #0]
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	4618      	mov	r0, r3
 801dd76:	f7f8 f82b 	bl	8015dd0 <_ZN12AManagedTaskC1Ev>
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	4a07      	ldr	r2, [pc, #28]	; (801dd9c <_ZN24CLedHeartBeatSTM32F4DiscC1Em+0x34>)
 801dd7e:	601a      	str	r2, [r3, #0]
	ledState = LED_Up;
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	f04f 0200 	mov.w	r2, #0
 801dd86:	731a      	strb	r2, [r3, #12]
	ledRate = newRate;
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	683a      	ldr	r2, [r7, #0]
 801dd8c:	611a      	str	r2, [r3, #16]
}
 801dd8e:	687b      	ldr	r3, [r7, #4]
 801dd90:	4618      	mov	r0, r3
 801dd92:	f107 0708 	add.w	r7, r7, #8
 801dd96:	46bd      	mov	sp, r7
 801dd98:	bd80      	pop	{r7, pc}
 801dd9a:	bf00      	nop
 801dd9c:	08035a28 	.word	0x08035a28

0801dda0 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>:

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 801dda0:	b580      	push	{r7, lr}
 801dda2:	b082      	sub	sp, #8
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	6078      	str	r0, [r7, #4]
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	4a0a      	ldr	r2, [pc, #40]	; (801ddd4 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x34>)
 801ddac:	601a      	str	r2, [r3, #0]
	// nothing to destroy
}
 801ddae:	6878      	ldr	r0, [r7, #4]
 801ddb0:	f7f8 f82a 	bl	8015e08 <_ZN12AManagedTaskD1Ev>
 801ddb4:	f04f 0300 	mov.w	r3, #0
 801ddb8:	f003 0301 	and.w	r3, r3, #1
 801ddbc:	b2db      	uxtb	r3, r3
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d002      	beq.n	801ddc8 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x28>
 801ddc2:	6878      	ldr	r0, [r7, #4]
 801ddc4:	f00e fc94 	bl	802c6f0 <_ZdlPv>
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	4618      	mov	r0, r3
 801ddcc:	f107 0708 	add.w	r7, r7, #8
 801ddd0:	46bd      	mov	sp, r7
 801ddd2:	bd80      	pop	{r7, pc}
 801ddd4:	08035a28 	.word	0x08035a28

0801ddd8 <_ZN24CLedHeartBeatSTM32F4DiscD0Ev>:
CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
	ledState = LED_Up;
	ledRate = newRate;
}

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 801ddd8:	b580      	push	{r7, lr}
 801ddda:	b082      	sub	sp, #8
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	6078      	str	r0, [r7, #4]
	// nothing to destroy
}
 801dde0:	6878      	ldr	r0, [r7, #4]
 801dde2:	f7ff ffdd 	bl	801dda0 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>
 801dde6:	6878      	ldr	r0, [r7, #4]
 801dde8:	f00e fc82 	bl	802c6f0 <_ZdlPv>
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	4618      	mov	r0, r3
 801ddf0:	f107 0708 	add.w	r7, r7, #8
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	bd80      	pop	{r7, pc}

0801ddf8 <_ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv>:
/**
  * @brief  HardwareInit called before Scheduler starts
  * @param  None
  * @retval true on succsess
  */
bool CLedHeartBeatSTM32F4Disc::HardwareInit(){
 801ddf8:	b580      	push	{r7, lr}
 801ddfa:	b082      	sub	sp, #8
 801ddfc:	af00      	add	r7, sp, #0
 801ddfe:	6078      	str	r0, [r7, #4]

	STM_EVAL_LEDInit(LED3);
 801de00:	f04f 0001 	mov.w	r0, #1
 801de04:	f7eb fe4e 	bl	8009aa4 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 801de08:	f04f 0000 	mov.w	r0, #0
 801de0c:	f7eb fe4a 	bl	8009aa4 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 801de10:	f04f 0002 	mov.w	r0, #2
 801de14:	f7eb fe46 	bl	8009aa4 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 801de18:	f04f 0003 	mov.w	r0, #3
 801de1c:	f7eb fe42 	bl	8009aa4 <STM_EVAL_LEDInit>
	return true;
 801de20:	f04f 0301 	mov.w	r3, #1
}
 801de24:	4618      	mov	r0, r3
 801de26:	f107 0708 	add.w	r7, r7, #8
 801de2a:	46bd      	mov	sp, r7
 801de2c:	bd80      	pop	{r7, pc}
 801de2e:	bf00      	nop

0801de30 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv>:
/**
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
 801de30:	b580      	push	{r7, lr}
 801de32:	b082      	sub	sp, #8
 801de34:	af00      	add	r7, sp, #0
 801de36:	6078      	str	r0, [r7, #4]
	while(1){
		switch(ledState){
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	7b1b      	ldrb	r3, [r3, #12]
 801de3c:	2b03      	cmp	r3, #3
 801de3e:	d85f      	bhi.n	801df00 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xd0>
 801de40:	a201      	add	r2, pc, #4	; (adr r2, 801de48 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x18>)
 801de42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de46:	bf00      	nop
 801de48:	0801de59 	.word	0x0801de59
 801de4c:	0801de83 	.word	0x0801de83
 801de50:	0801dead 	.word	0x0801dead
 801de54:	0801ded7 	.word	0x0801ded7
		case LED_Up:
			STM_EVAL_LEDOn(LED3);
 801de58:	f04f 0001 	mov.w	r0, #1
 801de5c:	f7eb fe58 	bl	8009b10 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED5);
 801de60:	f04f 0002 	mov.w	r0, #2
 801de64:	f7eb fe6e 	bl	8009b44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 801de68:	f04f 0003 	mov.w	r0, #3
 801de6c:	f7eb fe6a 	bl	8009b44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 801de70:	f04f 0000 	mov.w	r0, #0
 801de74:	f7eb fe66 	bl	8009b44 <STM_EVAL_LEDOff>
			ledState = LED_Right;
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	f04f 0201 	mov.w	r2, #1
 801de7e:	731a      	strb	r2, [r3, #12]
			break;
 801de80:	e043      	b.n	801df0a <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Right:
			STM_EVAL_LEDOff(LED3);
 801de82:	f04f 0001 	mov.w	r0, #1
 801de86:	f7eb fe5d 	bl	8009b44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED5);
 801de8a:	f04f 0002 	mov.w	r0, #2
 801de8e:	f7eb fe3f 	bl	8009b10 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED6);
 801de92:	f04f 0003 	mov.w	r0, #3
 801de96:	f7eb fe55 	bl	8009b44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 801de9a:	f04f 0000 	mov.w	r0, #0
 801de9e:	f7eb fe51 	bl	8009b44 <STM_EVAL_LEDOff>
			ledState = LED_Down;
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	f04f 0202 	mov.w	r2, #2
 801dea8:	731a      	strb	r2, [r3, #12]
			break;
 801deaa:	e02e      	b.n	801df0a <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Down:
			STM_EVAL_LEDOff(LED3);
 801deac:	f04f 0001 	mov.w	r0, #1
 801deb0:	f7eb fe48 	bl	8009b44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 801deb4:	f04f 0002 	mov.w	r0, #2
 801deb8:	f7eb fe44 	bl	8009b44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED6);
 801debc:	f04f 0003 	mov.w	r0, #3
 801dec0:	f7eb fe26 	bl	8009b10 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED4);
 801dec4:	f04f 0000 	mov.w	r0, #0
 801dec8:	f7eb fe3c 	bl	8009b44 <STM_EVAL_LEDOff>
			ledState = LED_Left;
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	f04f 0203 	mov.w	r2, #3
 801ded2:	731a      	strb	r2, [r3, #12]
			break;
 801ded4:	e019      	b.n	801df0a <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Left:
			STM_EVAL_LEDOff(LED3);
 801ded6:	f04f 0001 	mov.w	r0, #1
 801deda:	f7eb fe33 	bl	8009b44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 801dede:	f04f 0002 	mov.w	r0, #2
 801dee2:	f7eb fe2f 	bl	8009b44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 801dee6:	f04f 0003 	mov.w	r0, #3
 801deea:	f7eb fe2b 	bl	8009b44 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED4);
 801deee:	f04f 0000 	mov.w	r0, #0
 801def2:	f7eb fe0d 	bl	8009b10 <STM_EVAL_LEDOn>
			ledState = LED_Up;
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	f04f 0200 	mov.w	r2, #0
 801defc:	731a      	strb	r2, [r3, #12]
			break;
 801defe:	e004      	b.n	801df0a <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		default:
			ledState = LED_Up;
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	f04f 0200 	mov.w	r2, #0
 801df06:	731a      	strb	r2, [r3, #12]
			break;
 801df08:	bf00      	nop
		}
		vTaskDelay(ledRate); // 500ms delay
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	691b      	ldr	r3, [r3, #16]
 801df0e:	4618      	mov	r0, r3
 801df10:	f7f9 f8f6 	bl	8017100 <vTaskDelay>
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
	while(1){
 801df14:	e790      	b.n	801de38 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x8>
 801df16:	bf00      	nop

0801df18 <main>:
/**
  * @brief  main function
  * @param  None
  * @retval None
  */
int main(void){
 801df18:	b580      	push	{r7, lr}
 801df1a:	b082      	sub	sp, #8
 801df1c:	af00      	add	r7, sp, #0

	/**
	 * create Led Heartbeat task with minimal stack size and priority
	 * 1 higher than idle task
	 */
	g_LedTast.Create("Led Heartbeat",configMINIMAL_STACK_SIZE,tskIDLE_PRIORITY+3);
 801df1e:	f643 40a8 	movw	r0, #15528	; 0x3ca8
 801df22:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801df26:	f64d 2104 	movw	r1, #55812	; 0xda04
 801df2a:	f6c0 0102 	movt	r1, #2050	; 0x802
 801df2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801df32:	f04f 0303 	mov.w	r3, #3
 801df36:	f7f7 ff97 	bl	8015e68 <_ZN12AManagedTask6CreateEPKctm>
	g_MSC.Create("USB Massstorage", configMINIMAL_STACK_SIZE * 10, tskIDLE_PRIORITY +1);
 801df3a:	f643 7098 	movw	r0, #16280	; 0x3f98
 801df3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801df42:	f64d 2114 	movw	r1, #55828	; 0xda14
 801df46:	f6c0 0102 	movt	r1, #2050	; 0x802
 801df4a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 801df4e:	f04f 0301 	mov.w	r3, #1
 801df52:	f7f7 ff89 	bl	8015e68 <_ZN12AManagedTask6CreateEPKctm>
	//g_Menue.Create("Menue",configMINIMAL_STACK_SIZE * 2,tskIDLE_PRIORITY+3);
	g_FileHandler.Create("FileHandler",configMINIMAL_STACK_SIZE * 20,tskIDLE_PRIORITY+1);
 801df56:	f643 40d4 	movw	r0, #15572	; 0x3cd4
 801df5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801df5e:	f64d 2124 	movw	r1, #55844	; 0xda24
 801df62:	f6c0 0102 	movt	r1, #2050	; 0x802
 801df66:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 801df6a:	f04f 0301 	mov.w	r3, #1
 801df6e:	f7f7 ff7b 	bl	8015e68 <_ZN12AManagedTask6CreateEPKctm>

	/**
	 * Initialize the hardware for all Tasks and
	 * then FreeRTOS takes control of execution
	 */
	CFreeRTOS::InitHardwareForManagedTasks();
 801df72:	f7f8 f86d 	bl	8016050 <_ZN9CFreeRTOS27InitHardwareForManagedTasksEv>
	CFreeRTOS::StartScheduler();
 801df76:	f00e fb81 	bl	802c67c <_ZN9CFreeRTOS14StartSchedulerEv>

	while(1){
		u++;
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	f103 0301 	add.w	r3, r3, #1
 801df80:	607b      	str	r3, [r7, #4]
	 * then FreeRTOS takes control of execution
	 */
	CFreeRTOS::InitHardwareForManagedTasks();
	CFreeRTOS::StartScheduler();

	while(1){
 801df82:	e7fa      	b.n	801df7a <main+0x62>

0801df84 <vApplicationTickHook>:

extern "C" {

	// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
	// ----------------------------------------------------------------------------
	void vApplicationTickHook( void ) {
 801df84:	b480      	push	{r7}
 801df86:	af00      	add	r7, sp, #0

	}
 801df88:	46bd      	mov	sp, r7
 801df8a:	bc80      	pop	{r7}
 801df8c:	4770      	bx	lr
 801df8e:	bf00      	nop

0801df90 <vApplicationIdleHook>:

	// This FreeRTOS call-back function gets when no other task is ready to execute.
	// On a completely unloaded system this is getting called at over 2.5MHz!
	// ----------------------------------------------------------------------------
	void vApplicationIdleHook( void ) {
 801df90:	b480      	push	{r7}
 801df92:	af00      	add	r7, sp, #0

	}
 801df94:	46bd      	mov	sp, r7
 801df96:	bc80      	pop	{r7}
 801df98:	4770      	bx	lr
 801df9a:	bf00      	nop

0801df9c <vApplicationMallocFailedHook>:

	// A required FreeRTOS function.
	// ----------------------------------------------------------------------------
	void vApplicationMallocFailedHook( void ) {
 801df9c:	b480      	push	{r7}
 801df9e:	af00      	add	r7, sp, #0
		configASSERT( 0 );  // Latch on any failure / error.
	}
 801dfa0:	46bd      	mov	sp, r7
 801dfa2:	bc80      	pop	{r7}
 801dfa4:	4770      	bx	lr
 801dfa6:	bf00      	nop

0801dfa8 <vApplicationStackOverflowHook>:

	// A required FreeRTOS function. gets called on stack overflow
	// ----------------------------------------------------------------------------
	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName ){
 801dfa8:	b480      	push	{r7}
 801dfaa:	b083      	sub	sp, #12
 801dfac:	af00      	add	r7, sp, #0
 801dfae:	6078      	str	r0, [r7, #4]
 801dfb0:	6039      	str	r1, [r7, #0]
		/* TODO, implement your code here */
		while(1);
 801dfb2:	e7fe      	b.n	801dfb2 <vApplicationStackOverflowHook+0xa>

0801dfb4 <_Z41__static_initialization_and_destruction_0ii>:
	}
} // extern "C"

}//Somewhere is a { open i think i left one #ifdef __cplusplus  closing brance
 801dfb4:	b580      	push	{r7, lr}
 801dfb6:	b082      	sub	sp, #8
 801dfb8:	af00      	add	r7, sp, #0
 801dfba:	6078      	str	r0, [r7, #4]
 801dfbc:	6039      	str	r1, [r7, #0]
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	2b01      	cmp	r3, #1
 801dfc2:	d173      	bne.n	801e0ac <_Z41__static_initialization_and_destruction_0ii+0xf8>
 801dfc4:	683a      	ldr	r2, [r7, #0]
 801dfc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dfca:	429a      	cmp	r2, r3
 801dfcc:	d16e      	bne.n	801e0ac <_Z41__static_initialization_and_destruction_0ii+0xf8>

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
CLedHeartBeatSTM32F4Disc g_LedTast(200/portTICK_RATE_MS);
 801dfce:	f643 40a8 	movw	r0, #15528	; 0x3ca8
 801dfd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801dfd6:	f04f 0114 	mov.w	r1, #20
 801dfda:	f7ff fec5 	bl	801dd68 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>
 801dfde:	f64d 53a1 	movw	r3, #56737	; 0xdda1
 801dfe2:	f6c0 0301 	movt	r3, #2049	; 0x801
 801dfe6:	f643 40a8 	movw	r0, #15528	; 0x3ca8
 801dfea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801dfee:	4619      	mov	r1, r3
 801dff0:	f240 0200 	movw	r2, #0
 801dff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801dff8:	f00e fb74 	bl	802c6e4 <__aeabi_atexit>
CT6963_GPIO_Interface g_Display;
 801dffc:	f643 40bc 	movw	r0, #15548	; 0x3cbc
 801e000:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801e004:	f7f7 fc9c 	bl	8015940 <_ZN21CT6963_GPIO_InterfaceC1Ev>
 801e008:	f645 1369 	movw	r3, #22889	; 0x5969
 801e00c:	f6c0 0301 	movt	r3, #2049	; 0x801
 801e010:	f643 40bc 	movw	r0, #15548	; 0x3cbc
 801e014:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801e018:	4619      	mov	r1, r3
 801e01a:	f240 0200 	movw	r2, #0
 801e01e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801e022:	f00e fb5f 	bl	802c6e4 <__aeabi_atexit>
CMenue	g_Menue(&g_Display);
 801e026:	f643 40c4 	movw	r0, #15556	; 0x3cc4
 801e02a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801e02e:	f643 41bc 	movw	r1, #15548	; 0x3cbc
 801e032:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801e036:	f7ed fd7b 	bl	800bb30 <_ZN6CMenueC1EP11CGraphicLCD>
 801e03a:	f64b 3361 	movw	r3, #47969	; 0xbb61
 801e03e:	f6c0 0300 	movt	r3, #2048	; 0x800
 801e042:	f643 40c4 	movw	r0, #15556	; 0x3cc4
 801e046:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801e04a:	4619      	mov	r1, r3
 801e04c:	f240 0200 	movw	r2, #0
 801e050:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801e054:	f00e fb46 	bl	802c6e4 <__aeabi_atexit>
CFileHandler g_FileHandler;
 801e058:	f643 40d4 	movw	r0, #15572	; 0x3cd4
 801e05c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801e060:	f7fe ffc8 	bl	801cff4 <_ZN12CFileHandlerC1Ev>
 801e064:	f24d 036d 	movw	r3, #53357	; 0xd06d
 801e068:	f6c0 0301 	movt	r3, #2049	; 0x801
 801e06c:	f643 40d4 	movw	r0, #15572	; 0x3cd4
 801e070:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801e074:	4619      	mov	r1, r3
 801e076:	f240 0200 	movw	r2, #0
 801e07a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801e07e:	f00e fb31 	bl	802c6e4 <__aeabi_atexit>
CUSB_MassStorage g_MSC;
 801e082:	f643 7098 	movw	r0, #16280	; 0x3f98
 801e086:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801e08a:	f7fa fa89 	bl	80185a0 <_ZN16CUSB_MassStorageC1Ev>
 801e08e:	f248 53c9 	movw	r3, #34249	; 0x85c9
 801e092:	f6c0 0301 	movt	r3, #2049	; 0x801
 801e096:	f643 7098 	movw	r0, #16280	; 0x3f98
 801e09a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801e09e:	4619      	mov	r1, r3
 801e0a0:	f240 0200 	movw	r2, #0
 801e0a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801e0a8:	f00e fb1c 	bl	802c6e4 <__aeabi_atexit>
		/* TODO, implement your code here */
		while(1);
	}
} // extern "C"

}//Somewhere is a { open i think i left one #ifdef __cplusplus  closing brance
 801e0ac:	f107 0708 	add.w	r7, r7, #8
 801e0b0:	46bd      	mov	sp, r7
 801e0b2:	bd80      	pop	{r7, pc}

0801e0b4 <_GLOBAL__sub_I_g_LedTast>:
 801e0b4:	b580      	push	{r7, lr}
 801e0b6:	af00      	add	r7, sp, #0
 801e0b8:	f04f 0001 	mov.w	r0, #1
 801e0bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e0c0:	f7ff ff78 	bl	801dfb4 <_Z41__static_initialization_and_destruction_0ii>
 801e0c4:	bd80      	pop	{r7, pc}
 801e0c6:	bf00      	nop

0801e0c8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 801e0c8:	b480      	push	{r7}
 801e0ca:	af00      	add	r7, sp, #0
}
 801e0cc:	46bd      	mov	sp, r7
 801e0ce:	bc80      	pop	{r7}
 801e0d0:	4770      	bx	lr
 801e0d2:	bf00      	nop

0801e0d4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 801e0d4:	b480      	push	{r7}
 801e0d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {}
 801e0d8:	e7fe      	b.n	801e0d8 <HardFault_Handler+0x4>
 801e0da:	bf00      	nop

0801e0dc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 801e0dc:	b480      	push	{r7}
 801e0de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {}
 801e0e0:	e7fe      	b.n	801e0e0 <MemManage_Handler+0x4>
 801e0e2:	bf00      	nop

0801e0e4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 801e0e4:	b480      	push	{r7}
 801e0e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {}
 801e0e8:	e7fe      	b.n	801e0e8 <BusFault_Handler+0x4>
 801e0ea:	bf00      	nop

0801e0ec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 801e0ec:	b480      	push	{r7}
 801e0ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {}
 801e0f0:	e7fe      	b.n	801e0f0 <UsageFault_Handler+0x4>
 801e0f2:	bf00      	nop

0801e0f4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{}
 801e0f4:	b480      	push	{r7}
 801e0f6:	af00      	add	r7, sp, #0
 801e0f8:	46bd      	mov	sp, r7
 801e0fa:	bc80      	pop	{r7}
 801e0fc:	4770      	bx	lr
 801e0fe:	bf00      	nop

0801e100 <EXTI1_IRQHandler>:
 * 			Triggers Event on mechanical shock, good as "Snoozze" Button :D
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 801e100:	b580      	push	{r7, lr}
 801e102:	b082      	sub	sp, #8
 801e104:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 801e106:	f04f 0300 	mov.w	r3, #0
 801e10a:	607b      	str	r3, [r7, #4]

	/* Check the click on the accelerometer to Pause/Resume Playing */
	if(EXTI_GetITStatus(EXTI_Line1) != RESET)
 801e10c:	f04f 0002 	mov.w	r0, #2
 801e110:	f7e9 f8c6 	bl	80072a0 <EXTI_GetITStatus>
 801e114:	4603      	mov	r3, r0
 801e116:	2b00      	cmp	r3, #0
 801e118:	d017      	beq.n	801e14a <EXTI1_IRQHandler+0x4a>
	{
		/*give sem in FreeRTOS */
		xSemaphoreGiveFromISR(semShock,&xHigherPriorityTaskWoken);
 801e11a:	f241 1308 	movw	r3, #4360	; 0x1108
 801e11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e122:	681a      	ldr	r2, [r3, #0]
 801e124:	f107 0304 	add.w	r3, r7, #4
 801e128:	4610      	mov	r0, r2
 801e12a:	f04f 0100 	mov.w	r1, #0
 801e12e:	461a      	mov	r2, r3
 801e130:	f04f 0300 	mov.w	r3, #0
 801e134:	f7f8 fb9c 	bl	8016870 <xQueueGenericSendFromISR>

		/* Clear the EXTI line 1 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line1);
 801e138:	f04f 0002 	mov.w	r0, #2
 801e13c:	f7e9 f8de 	bl	80072fc <EXTI_ClearITPendingBit>
		/*
		 * triggers PendSV handler for context switch
		 * but when DMA Handler has higher Priority
		 * this has no effect until ISR is finished
		 */
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	2b00      	cmp	r3, #0
 801e144:	d001      	beq.n	801e14a <EXTI1_IRQHandler+0x4a>
 801e146:	f7f8 f8e7 	bl	8016318 <vPortYieldFromISR>
	}
}
 801e14a:	f107 0708 	add.w	r7, r7, #8
 801e14e:	46bd      	mov	sp, r7
 801e150:	bd80      	pop	{r7, pc}
 801e152:	bf00      	nop

0801e154 <EXTI0_IRQHandler>:
 *         This function handles External line 0 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 801e154:	b580      	push	{r7, lr}
 801e156:	b082      	sub	sp, #8
 801e158:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 801e15a:	f04f 0300 	mov.w	r3, #0
 801e15e:	607b      	str	r3, [r7, #4]

	/* Checks whether the User Button EXTI line is asserted*/
	if (EXTI_GetITStatus(EXTI_Line0) != RESET)
 801e160:	f04f 0001 	mov.w	r0, #1
 801e164:	f7e9 f89c 	bl	80072a0 <EXTI_GetITStatus>
 801e168:	4603      	mov	r3, r0
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d017      	beq.n	801e19e <EXTI0_IRQHandler+0x4a>
	{
		/*give sem in FreeRTOS */
		xSemaphoreGiveFromISR(semUserButton,&xHigherPriorityTaskWoken);
 801e16e:	f241 1304 	movw	r3, #4356	; 0x1104
 801e172:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e176:	681a      	ldr	r2, [r3, #0]
 801e178:	f107 0304 	add.w	r3, r7, #4
 801e17c:	4610      	mov	r0, r2
 801e17e:	f04f 0100 	mov.w	r1, #0
 801e182:	461a      	mov	r2, r3
 801e184:	f04f 0300 	mov.w	r3, #0
 801e188:	f7f8 fb72 	bl	8016870 <xQueueGenericSendFromISR>

		/* Clear the EXTI line 1 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line1);
 801e18c:	f04f 0002 	mov.w	r0, #2
 801e190:	f7e9 f8b4 	bl	80072fc <EXTI_ClearITPendingBit>
		/*
		 * triggers PendSV handler for context switch
		 * but when DMA Handler has higher Priority
		 * this has no effect until ISR is finished
		 */
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	2b00      	cmp	r3, #0
 801e198:	d001      	beq.n	801e19e <EXTI0_IRQHandler+0x4a>
 801e19a:	f7f8 f8bd 	bl	8016318 <vPortYieldFromISR>
	}

	/* Clears the EXTI's line pending bit.*/
	EXTI_ClearITPendingBit(EXTI_Line0);
 801e19e:	f04f 0001 	mov.w	r0, #1
 801e1a2:	f7e9 f8ab 	bl	80072fc <EXTI_ClearITPendingBit>
}
 801e1a6:	f107 0708 	add.w	r7, r7, #8
 801e1aa:	46bd      	mov	sp, r7
 801e1ac:	bd80      	pop	{r7, pc}
 801e1ae:	bf00      	nop

0801e1b0 <OTG_FS_IRQHandler>:
 * @brief  This function handles USB-On-The-Go FS global interrupt request.
 * @param  None
 * @retval None
 */
void OTG_FS_IRQHandler(void)
{
 801e1b0:	b580      	push	{r7, lr}
 801e1b2:	af00      	add	r7, sp, #0
	USBH_OTG_ISR_Handler(&USB_OTG_Core);
 801e1b4:	f640 30c4 	movw	r0, #3012	; 0xbc4
 801e1b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801e1bc:	f7e3 faa6 	bl	800170c <USBH_OTG_ISR_Handler>
}
 801e1c0:	bd80      	pop	{r7, pc}
 801e1c2:	bf00      	nop

0801e1c4 <_exit>:

size_t   __malloc_margin = 256;
char    *__brkval;

void _exit(int code)
{
 801e1c4:	b480      	push	{r7}
 801e1c6:	b083      	sub	sp, #12
 801e1c8:	af00      	add	r7, sp, #0
 801e1ca:	6078      	str	r0, [r7, #4]
    for (;;);
 801e1cc:	e7fe      	b.n	801e1cc <_exit+0x8>
 801e1ce:	bf00      	nop

0801e1d0 <_read_r>:
}


ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
{
 801e1d0:	b480      	push	{r7}
 801e1d2:	b085      	sub	sp, #20
 801e1d4:	af00      	add	r7, sp, #0
 801e1d6:	60f8      	str	r0, [r7, #12]
 801e1d8:	60b9      	str	r1, [r7, #8]
 801e1da:	607a      	str	r2, [r7, #4]
 801e1dc:	603b      	str	r3, [r7, #0]
    //return uart_read_r(r, fd, ptr, len);
	/**
	 * printf mapping function
	 */
	return 0;
 801e1de:	f04f 0300 	mov.w	r3, #0
}
 801e1e2:	4618      	mov	r0, r3
 801e1e4:	f107 0714 	add.w	r7, r7, #20
 801e1e8:	46bd      	mov	sp, r7
 801e1ea:	bc80      	pop	{r7}
 801e1ec:	4770      	bx	lr
 801e1ee:	bf00      	nop

0801e1f0 <_write_r>:


ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 801e1f0:	b480      	push	{r7}
 801e1f2:	b085      	sub	sp, #20
 801e1f4:	af00      	add	r7, sp, #0
 801e1f6:	60f8      	str	r0, [r7, #12]
 801e1f8:	60b9      	str	r1, [r7, #8]
 801e1fa:	607a      	str	r2, [r7, #4]
 801e1fc:	603b      	str	r3, [r7, #0]
    //return uart_write_r(r, fd, ptr, len);
	/**
	 * printf maping function
	 */
	return 0;
 801e1fe:	f04f 0300 	mov.w	r3, #0
}
 801e202:	4618      	mov	r0, r3
 801e204:	f107 0714 	add.w	r7, r7, #20
 801e208:	46bd      	mov	sp, r7
 801e20a:	bc80      	pop	{r7}
 801e20c:	4770      	bx	lr
 801e20e:	bf00      	nop

0801e210 <_lseek_r>:


off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
{
 801e210:	b480      	push	{r7}
 801e212:	b085      	sub	sp, #20
 801e214:	af00      	add	r7, sp, #0
 801e216:	60f8      	str	r0, [r7, #12]
 801e218:	60b9      	str	r1, [r7, #8]
 801e21a:	607a      	str	r2, [r7, #4]
 801e21c:	603b      	str	r3, [r7, #0]

    r->_errno = ENOSYS;
 801e21e:	68fb      	ldr	r3, [r7, #12]
 801e220:	f04f 0258 	mov.w	r2, #88	; 0x58
 801e224:	601a      	str	r2, [r3, #0]
    return -1;
 801e226:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e22a:	4618      	mov	r0, r3
 801e22c:	f107 0714 	add.w	r7, r7, #20
 801e230:	46bd      	mov	sp, r7
 801e232:	bc80      	pop	{r7}
 801e234:	4770      	bx	lr
 801e236:	bf00      	nop

0801e238 <_close_r>:


int _close_r(struct _reent *r, int fd)
{
 801e238:	b480      	push	{r7}
 801e23a:	b083      	sub	sp, #12
 801e23c:	af00      	add	r7, sp, #0
 801e23e:	6078      	str	r0, [r7, #4]
 801e240:	6039      	str	r1, [r7, #0]
    r->_errno = ENOSYS;
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	f04f 0258 	mov.w	r2, #88	; 0x58
 801e248:	601a      	str	r2, [r3, #0]
    return -1;
 801e24a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e24e:	4618      	mov	r0, r3
 801e250:	f107 070c 	add.w	r7, r7, #12
 801e254:	46bd      	mov	sp, r7
 801e256:	bc80      	pop	{r7}
 801e258:	4770      	bx	lr
 801e25a:	bf00      	nop

0801e25c <_fstat_r>:


int _fstat_r(struct _reent *r, int fd, struct stat *st)
{
 801e25c:	b480      	push	{r7}
 801e25e:	b085      	sub	sp, #20
 801e260:	af00      	add	r7, sp, #0
 801e262:	60f8      	str	r0, [r7, #12]
 801e264:	60b9      	str	r1, [r7, #8]
 801e266:	607a      	str	r2, [r7, #4]
    if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 801e268:	68bb      	ldr	r3, [r7, #8]
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	db09      	blt.n	801e282 <_fstat_r+0x26>
 801e26e:	68bb      	ldr	r3, [r7, #8]
 801e270:	2b02      	cmp	r3, #2
 801e272:	dc06      	bgt.n	801e282 <_fstat_r+0x26>
      st->st_mode = S_IFCHR;
 801e274:	687b      	ldr	r3, [r7, #4]
 801e276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801e27a:	605a      	str	r2, [r3, #4]
      return 0;
 801e27c:	f04f 0300 	mov.w	r3, #0
 801e280:	e005      	b.n	801e28e <_fstat_r+0x32>
    }

    r->_errno = ENOSYS;
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	f04f 0258 	mov.w	r2, #88	; 0x58
 801e288:	601a      	str	r2, [r3, #0]
    return -1;
 801e28a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e28e:	4618      	mov	r0, r3
 801e290:	f107 0714 	add.w	r7, r7, #20
 801e294:	46bd      	mov	sp, r7
 801e296:	bc80      	pop	{r7}
 801e298:	4770      	bx	lr
 801e29a:	bf00      	nop

0801e29c <_isatty_r>:


int _isatty_r(struct _reent *r, int fd)
{
 801e29c:	b480      	push	{r7}
 801e29e:	b083      	sub	sp, #12
 801e2a0:	af00      	add	r7, sp, #0
 801e2a2:	6078      	str	r0, [r7, #4]
 801e2a4:	6039      	str	r1, [r7, #0]
    return 1;
 801e2a6:	f04f 0301 	mov.w	r3, #1
}
 801e2aa:	4618      	mov	r0, r3
 801e2ac:	f107 070c 	add.w	r7, r7, #12
 801e2b0:	46bd      	mov	sp, r7
 801e2b2:	bc80      	pop	{r7}
 801e2b4:	4770      	bx	lr
 801e2b6:	bf00      	nop

0801e2b8 <_sbrk_r>:


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 801e2b8:	b490      	push	{r4, r7}
 801e2ba:	b084      	sub	sp, #16
 801e2bc:	af00      	add	r7, sp, #0
 801e2be:	6078      	str	r0, [r7, #4]
 801e2c0:	6039      	str	r1, [r7, #0]
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 801e2c2:	f64a 432c 	movw	r3, #44076	; 0xac2c
 801e2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	d108      	bne.n	801e2e2 <_sbrk_r+0x2a>
        __brkval = &end;
 801e2d0:	f64a 432c 	movw	r3, #44076	; 0xac2c
 801e2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e2d8:	f64a 4230 	movw	r2, #44080	; 0xac30
 801e2dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801e2e0:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 801e2e2:	f64a 432c 	movw	r3, #44076	; 0xac2c
 801e2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e2ea:	681a      	ldr	r2, [r3, #0]
 801e2ec:	683b      	ldr	r3, [r7, #0]
 801e2ee:	18d2      	adds	r2, r2, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 801e2f0:	f3ef 8408 	mrs	r4, MSP
  return(result);
 801e2f4:	4623      	mov	r3, r4
 801e2f6:	4619      	mov	r1, r3
 801e2f8:	f640 1398 	movw	r3, #2456	; 0x998
 801e2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	1acb      	subs	r3, r1, r3
 801e304:	429a      	cmp	r2, r3
 801e306:	d906      	bls.n	801e316 <_sbrk_r+0x5e>
        r->_errno = ENOMEM;
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	f04f 020c 	mov.w	r2, #12
 801e30e:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 801e310:	f04f 33ff 	mov.w	r3, #4294967295
 801e314:	e012      	b.n	801e33c <_sbrk_r+0x84>
    }

    void *ret = __brkval;
 801e316:	f64a 432c 	movw	r3, #44076	; 0xac2c
 801e31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	60fb      	str	r3, [r7, #12]
    __brkval += incr;
 801e322:	f64a 432c 	movw	r3, #44076	; 0xac2c
 801e326:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e32a:	681a      	ldr	r2, [r3, #0]
 801e32c:	683b      	ldr	r3, [r7, #0]
 801e32e:	18d2      	adds	r2, r2, r3
 801e330:	f64a 432c 	movw	r3, #44076	; 0xac2c
 801e334:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e338:	601a      	str	r2, [r3, #0]

    return ret;
 801e33a:	68fb      	ldr	r3, [r7, #12]
}
 801e33c:	4618      	mov	r0, r3
 801e33e:	f107 0710 	add.w	r7, r7, #16
 801e342:	46bd      	mov	sp, r7
 801e344:	bc90      	pop	{r4, r7}
 801e346:	4770      	bx	lr

0801e348 <_kill_r>:


int _kill_r(struct _reent *r, int pid, int signal)
{
 801e348:	b480      	push	{r7}
 801e34a:	b085      	sub	sp, #20
 801e34c:	af00      	add	r7, sp, #0
 801e34e:	60f8      	str	r0, [r7, #12]
 801e350:	60b9      	str	r1, [r7, #8]
 801e352:	607a      	str	r2, [r7, #4]
    r->_errno = ENOSYS;
 801e354:	68fb      	ldr	r3, [r7, #12]
 801e356:	f04f 0258 	mov.w	r2, #88	; 0x58
 801e35a:	601a      	str	r2, [r3, #0]
    return -1;
 801e35c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e360:	4618      	mov	r0, r3
 801e362:	f107 0714 	add.w	r7, r7, #20
 801e366:	46bd      	mov	sp, r7
 801e368:	bc80      	pop	{r7}
 801e36a:	4770      	bx	lr

0801e36c <_getpid_r>:


int _getpid_r(struct _reent *r)
{
 801e36c:	b480      	push	{r7}
 801e36e:	b083      	sub	sp, #12
 801e370:	af00      	add	r7, sp, #0
 801e372:	6078      	str	r0, [r7, #4]
    r->_errno = ENOSYS;
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	f04f 0258 	mov.w	r2, #88	; 0x58
 801e37a:	601a      	str	r2, [r3, #0]
    return -1;
 801e37c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e380:	4618      	mov	r0, r3
 801e382:	f107 070c 	add.w	r7, r7, #12
 801e386:	46bd      	mov	sp, r7
 801e388:	bc80      	pop	{r7}
 801e38a:	4770      	bx	lr

0801e38c <__malloc_lock>:


void __malloc_lock(struct _reent *r)
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b082      	sub	sp, #8
 801e390:	af00      	add	r7, sp, #0
 801e392:	6078      	str	r0, [r7, #4]
    vPortEnterCritical();
 801e394:	f7f7 ffcc 	bl	8016330 <vPortEnterCritical>
}
 801e398:	f107 0708 	add.w	r7, r7, #8
 801e39c:	46bd      	mov	sp, r7
 801e39e:	bd80      	pop	{r7, pc}

0801e3a0 <__malloc_unlock>:


void __malloc_unlock(struct _reent *r)
{
 801e3a0:	b580      	push	{r7, lr}
 801e3a2:	b082      	sub	sp, #8
 801e3a4:	af00      	add	r7, sp, #0
 801e3a6:	6078      	str	r0, [r7, #4]
    vPortExitCritical();
 801e3a8:	f7f7 ffd8 	bl	801635c <vPortExitCritical>
}
 801e3ac:	f107 0708 	add.w	r7, r7, #8
 801e3b0:	46bd      	mov	sp, r7
 801e3b2:	bd80      	pop	{r7, pc}

0801e3b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801e3b4:	b580      	push	{r7, lr}
 801e3b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801e3b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e3bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e3c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e3c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e3c8:	6812      	ldr	r2, [r2, #0]
 801e3ca:	f042 0201 	orr.w	r2, r2, #1
 801e3ce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801e3d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e3d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e3d8:	f04f 0200 	mov.w	r2, #0
 801e3dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801e3de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e3e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e3e6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e3ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e3ee:	6812      	ldr	r2, [r2, #0]
 801e3f0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801e3f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801e3f8:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801e3fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e3fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e402:	f243 0210 	movw	r2, #12304	; 0x3010
 801e406:	f2c2 4200 	movt	r2, #9216	; 0x2400
 801e40a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801e40c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e410:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e414:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e418:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e41c:	6812      	ldr	r2, [r2, #0]
 801e41e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801e422:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801e424:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e428:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e42c:	f04f 0200 	mov.w	r2, #0
 801e430:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 801e432:	f000 f8c3 	bl	801e5bc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801e436:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 801e43a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 801e43e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801e442:	609a      	str	r2, [r3, #8]
#endif
}
 801e444:	bd80      	pop	{r7, pc}
 801e446:	bf00      	nop

0801e448 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 801e448:	b480      	push	{r7}
 801e44a:	b087      	sub	sp, #28
 801e44c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 801e44e:	f04f 0300 	mov.w	r3, #0
 801e452:	613b      	str	r3, [r7, #16]
 801e454:	f04f 0300 	mov.w	r3, #0
 801e458:	617b      	str	r3, [r7, #20]
 801e45a:	f04f 0302 	mov.w	r3, #2
 801e45e:	60fb      	str	r3, [r7, #12]
 801e460:	f04f 0300 	mov.w	r3, #0
 801e464:	60bb      	str	r3, [r7, #8]
 801e466:	f04f 0302 	mov.w	r3, #2
 801e46a:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 801e46c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e470:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e474:	689b      	ldr	r3, [r3, #8]
 801e476:	f003 030c 	and.w	r3, r3, #12
 801e47a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 801e47c:	693b      	ldr	r3, [r7, #16]
 801e47e:	2b04      	cmp	r3, #4
 801e480:	d00d      	beq.n	801e49e <SystemCoreClockUpdate+0x56>
 801e482:	2b08      	cmp	r3, #8
 801e484:	d015      	beq.n	801e4b2 <SystemCoreClockUpdate+0x6a>
 801e486:	2b00      	cmp	r3, #0
 801e488:	d16b      	bne.n	801e562 <SystemCoreClockUpdate+0x11a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 801e48a:	f640 139c 	movw	r3, #2460	; 0x99c
 801e48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e492:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 801e496:	f2c0 02f4 	movt	r2, #244	; 0xf4
 801e49a:	601a      	str	r2, [r3, #0]
      break;
 801e49c:	e06b      	b.n	801e576 <SystemCoreClockUpdate+0x12e>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 801e49e:	f640 139c 	movw	r3, #2460	; 0x99c
 801e4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e4a6:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 801e4aa:	f2c0 027a 	movt	r2, #122	; 0x7a
 801e4ae:	601a      	str	r2, [r3, #0]
      break;
 801e4b0:	e061      	b.n	801e576 <SystemCoreClockUpdate+0x12e>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 801e4b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e4b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e4ba:	685b      	ldr	r3, [r3, #4]
 801e4bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e4c0:	ea4f 5393 	mov.w	r3, r3, lsr #22
 801e4c4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801e4c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e4ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e4ce:	685b      	ldr	r3, [r3, #4]
 801e4d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e4d4:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 801e4d6:	68bb      	ldr	r3, [r7, #8]
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d015      	beq.n	801e508 <SystemCoreClockUpdate+0xc0>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 801e4dc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801e4e0:	f2c0 037a 	movt	r3, #122	; 0x7a
 801e4e4:	687a      	ldr	r2, [r7, #4]
 801e4e6:	fbb3 f2f2 	udiv	r2, r3, r2
 801e4ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e4ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e4f2:	685b      	ldr	r3, [r3, #4]
 801e4f4:	4619      	mov	r1, r3
 801e4f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801e4fa:	400b      	ands	r3, r1
 801e4fc:	ea4f 1393 	mov.w	r3, r3, lsr #6
 801e500:	fb03 f302 	mul.w	r3, r3, r2
 801e504:	617b      	str	r3, [r7, #20]
 801e506:	e014      	b.n	801e532 <SystemCoreClockUpdate+0xea>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 801e508:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 801e50c:	f2c0 03f4 	movt	r3, #244	; 0xf4
 801e510:	687a      	ldr	r2, [r7, #4]
 801e512:	fbb3 f2f2 	udiv	r2, r3, r2
 801e516:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e51a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e51e:	685b      	ldr	r3, [r3, #4]
 801e520:	4619      	mov	r1, r3
 801e522:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801e526:	400b      	ands	r3, r1
 801e528:	ea4f 1393 	mov.w	r3, r3, lsr #6
 801e52c:	fb03 f302 	mul.w	r3, r3, r2
 801e530:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 801e532:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e536:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e53a:	685b      	ldr	r3, [r3, #4]
 801e53c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801e540:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801e544:	f103 0301 	add.w	r3, r3, #1
 801e548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e54c:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 801e54e:	697a      	ldr	r2, [r7, #20]
 801e550:	68fb      	ldr	r3, [r7, #12]
 801e552:	fbb2 f2f3 	udiv	r2, r2, r3
 801e556:	f640 139c 	movw	r3, #2460	; 0x99c
 801e55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e55e:	601a      	str	r2, [r3, #0]
      break;
 801e560:	e009      	b.n	801e576 <SystemCoreClockUpdate+0x12e>
    default:
      SystemCoreClock = HSI_VALUE;
 801e562:	f640 139c 	movw	r3, #2460	; 0x99c
 801e566:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e56a:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 801e56e:	f2c0 02f4 	movt	r2, #244	; 0xf4
 801e572:	601a      	str	r2, [r3, #0]
      break;
 801e574:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 801e576:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e57e:	689b      	ldr	r3, [r3, #8]
 801e580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e584:	ea4f 1213 	mov.w	r2, r3, lsr #4
 801e588:	f640 13a0 	movw	r3, #2464	; 0x9a0
 801e58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e590:	5c9b      	ldrb	r3, [r3, r2]
 801e592:	b2db      	uxtb	r3, r3
 801e594:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 801e596:	f640 139c 	movw	r3, #2460	; 0x99c
 801e59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e59e:	681a      	ldr	r2, [r3, #0]
 801e5a0:	693b      	ldr	r3, [r7, #16]
 801e5a2:	fa22 f203 	lsr.w	r2, r2, r3
 801e5a6:	f640 139c 	movw	r3, #2460	; 0x99c
 801e5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e5ae:	601a      	str	r2, [r3, #0]
}
 801e5b0:	f107 071c 	add.w	r7, r7, #28
 801e5b4:	46bd      	mov	sp, r7
 801e5b6:	bc80      	pop	{r7}
 801e5b8:	4770      	bx	lr
 801e5ba:	bf00      	nop

0801e5bc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 801e5bc:	b480      	push	{r7}
 801e5be:	b083      	sub	sp, #12
 801e5c0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 801e5c2:	f04f 0300 	mov.w	r3, #0
 801e5c6:	607b      	str	r3, [r7, #4]
 801e5c8:	f04f 0300 	mov.w	r3, #0
 801e5cc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 801e5ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e5d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e5d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e5da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e5de:	6812      	ldr	r2, [r2, #0]
 801e5e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801e5e4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 801e5e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e5ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e5f4:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	f103 0301 	add.w	r3, r3, #1
 801e5fc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 801e5fe:	683b      	ldr	r3, [r7, #0]
 801e600:	2b00      	cmp	r3, #0
 801e602:	d103      	bne.n	801e60c <SetSysClock+0x50>
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 801e60a:	d1ec      	bne.n	801e5e6 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 801e60c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e610:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d003      	beq.n	801e626 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 801e61e:	f04f 0301 	mov.w	r3, #1
 801e622:	603b      	str	r3, [r7, #0]
 801e624:	e002      	b.n	801e62c <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 801e626:	f04f 0300 	mov.w	r3, #0
 801e62a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 801e62c:	683b      	ldr	r3, [r7, #0]
 801e62e:	2b01      	cmp	r3, #1
 801e630:	f040 8082 	bne.w	801e738 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 801e634:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e638:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e63c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e640:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e644:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801e646:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801e64a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 801e64c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 801e650:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801e654:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 801e658:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801e65c:	6812      	ldr	r2, [r2, #0]
 801e65e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e662:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 801e664:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e668:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e66c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e670:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e674:	6892      	ldr	r2, [r2, #8]
 801e676:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 801e678:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e67c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e680:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e684:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e688:	6892      	ldr	r2, [r2, #8]
 801e68a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e68e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 801e690:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e694:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e698:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e69c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e6a0:	6892      	ldr	r2, [r2, #8]
 801e6a2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 801e6a6:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 801e6a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e6ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e6b0:	f245 4208 	movw	r2, #21512	; 0x5408
 801e6b4:	f2c0 7240 	movt	r2, #1856	; 0x740
 801e6b8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 801e6ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e6be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e6c2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e6c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e6ca:	6812      	ldr	r2, [r2, #0]
 801e6cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 801e6d0:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 801e6d2:	bf00      	nop
 801e6d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e6d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	d0f6      	beq.n	801e6d4 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 801e6e6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801e6ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e6ee:	f240 6205 	movw	r2, #1541	; 0x605
 801e6f2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 801e6f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e6f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e6fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e700:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e704:	6892      	ldr	r2, [r2, #8]
 801e706:	f022 0203 	bic.w	r2, r2, #3
 801e70a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 801e70c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e710:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e714:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e718:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e71c:	6892      	ldr	r2, [r2, #8]
 801e71e:	f042 0202 	orr.w	r2, r2, #2
 801e722:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 801e724:	bf00      	nop
 801e726:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e72a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e72e:	689b      	ldr	r3, [r3, #8]
 801e730:	f003 030c 	and.w	r3, r3, #12
 801e734:	2b08      	cmp	r3, #8
 801e736:	d1f6      	bne.n	801e726 <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 801e738:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e73c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e740:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e744:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e748:	6892      	ldr	r2, [r2, #8]
 801e74a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 801e74e:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 801e750:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e754:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e758:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 801e75c:	f2c5 0200 	movt	r2, #20480	; 0x5000
 801e760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 801e764:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e768:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e76c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e770:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e774:	6812      	ldr	r2, [r2, #0]
 801e776:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801e77a:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 801e77c:	bf00      	nop
 801e77e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e782:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e786:	681b      	ldr	r3, [r3, #0]
 801e788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d0f6      	beq.n	801e77e <SetSysClock+0x1c2>
  {
  }
}
 801e790:	f107 070c 	add.w	r7, r7, #12
 801e794:	46bd      	mov	sp, r7
 801e796:	bc80      	pop	{r7}
 801e798:	4770      	bx	lr
 801e79a:	bf00      	nop

0801e79c <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b082      	sub	sp, #8
 801e7a0:	af00      	add	r7, sp, #0
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 801e7a2:	f7f7 fdc5 	bl	8016330 <vPortEnterCritical>

    int t = TIM7->CNT;
 801e7a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e7aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801e7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7b0:	607b      	str	r3, [r7, #4]
    if (t < t0)
 801e7b2:	f643 73a4 	movw	r3, #16292	; 0x3fa4
 801e7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e7ba:	881b      	ldrh	r3, [r3, #0]
 801e7bc:	461a      	mov	r2, r3
 801e7be:	687b      	ldr	r3, [r7, #4]
 801e7c0:	429a      	cmp	r2, r3
 801e7c2:	dd03      	ble.n	801e7cc <get_us_time+0x30>
        t += 0x10000;
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801e7ca:	607b      	str	r3, [r7, #4]

    tickcount += t - t0;
 801e7cc:	f643 73a4 	movw	r3, #16292	; 0x3fa4
 801e7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e7d4:	881b      	ldrh	r3, [r3, #0]
 801e7d6:	687a      	ldr	r2, [r7, #4]
 801e7d8:	1ad1      	subs	r1, r2, r3
 801e7da:	460a      	mov	r2, r1
 801e7dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801e7e0:	f643 71a8 	movw	r1, #16296	; 0x3fa8
 801e7e4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801e7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e7ec:	1880      	adds	r0, r0, r2
 801e7ee:	eb41 0103 	adc.w	r1, r1, r3
 801e7f2:	f643 73a8 	movw	r3, #16296	; 0x3fa8
 801e7f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e7fa:	e9c3 0100 	strd	r0, r1, [r3]
    t0 = t;
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	b29a      	uxth	r2, r3
 801e802:	f643 73a4 	movw	r3, #16292	; 0x3fa4
 801e806:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e80a:	801a      	strh	r2, [r3, #0]

    vPortExitCritical();
 801e80c:	f7f7 fda6 	bl	801635c <vPortExitCritical>

    return tickcount;
 801e810:	f643 73a8 	movw	r3, #16296	; 0x3fa8
 801e814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e818:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 801e81c:	4610      	mov	r0, r2
 801e81e:	4619      	mov	r1, r3
 801e820:	f107 0708 	add.w	r7, r7, #8
 801e824:	46bd      	mov	sp, r7
 801e826:	bd80      	pop	{r7, pc}

0801e828 <delay_us>:
 * \param  us  number of microseconds to wait.
 * \note   The actual delay will last between us and (us-1) microseconds.
 *         To wait _at_least_ 1 us, you should use delay_us(2).
 */
void delay_us(unsigned long us)
{
 801e828:	b480      	push	{r7}
 801e82a:	b085      	sub	sp, #20
 801e82c:	af00      	add	r7, sp, #0
 801e82e:	6078      	str	r0, [r7, #4]
    uint16_t  t0 = TIM7->CNT;
 801e830:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e834:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801e838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e83a:	81fb      	strh	r3, [r7, #14]
    for (;;) {
        int  t = TIM7->CNT;
 801e83c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e840:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801e844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e846:	60bb      	str	r3, [r7, #8]
        if (t < t0)
 801e848:	89fa      	ldrh	r2, [r7, #14]
 801e84a:	68bb      	ldr	r3, [r7, #8]
 801e84c:	429a      	cmp	r2, r3
 801e84e:	dd03      	ble.n	801e858 <delay_us+0x30>
            t += 0x10000;
 801e850:	68bb      	ldr	r3, [r7, #8]
 801e852:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801e856:	60bb      	str	r3, [r7, #8]

        if (us < t - t0)
 801e858:	89fb      	ldrh	r3, [r7, #14]
 801e85a:	68ba      	ldr	r2, [r7, #8]
 801e85c:	1ad3      	subs	r3, r2, r3
 801e85e:	461a      	mov	r2, r3
 801e860:	687b      	ldr	r3, [r7, #4]
 801e862:	429a      	cmp	r2, r3
 801e864:	d808      	bhi.n	801e878 <delay_us+0x50>
            return;

        us -= t - t0;
 801e866:	89fa      	ldrh	r2, [r7, #14]
 801e868:	68bb      	ldr	r3, [r7, #8]
 801e86a:	1ad3      	subs	r3, r2, r3
 801e86c:	687a      	ldr	r2, [r7, #4]
 801e86e:	18d3      	adds	r3, r2, r3
 801e870:	607b      	str	r3, [r7, #4]
        t0  = t;
 801e872:	68bb      	ldr	r3, [r7, #8]
 801e874:	81fb      	strh	r3, [r7, #14]
    }
 801e876:	e7e1      	b.n	801e83c <delay_us+0x14>
        int  t = TIM7->CNT;
        if (t < t0)
            t += 0x10000;

        if (us < t - t0)
            return;
 801e878:	bf00      	nop

        us -= t - t0;
        t0  = t;
    }
}
 801e87a:	f107 0714 	add.w	r7, r7, #20
 801e87e:	46bd      	mov	sp, r7
 801e880:	bc80      	pop	{r7}
 801e882:	4770      	bx	lr

0801e884 <delay_ms>:
 * Perform a millisecond delay
 *
 * \param  ms  number of milliseconds to wait.
 */
void delay_ms(unsigned long ms)
{
 801e884:	b580      	push	{r7, lr}
 801e886:	b082      	sub	sp, #8
 801e888:	af00      	add	r7, sp, #0
 801e88a:	6078      	str	r0, [r7, #4]
    delay_us(ms * 1000);
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e892:	fb02 f303 	mul.w	r3, r2, r3
 801e896:	4618      	mov	r0, r3
 801e898:	f7ff ffc6 	bl	801e828 <delay_us>
}
 801e89c:	f107 0708 	add.w	r7, r7, #8
 801e8a0:	46bd      	mov	sp, r7
 801e8a2:	bd80      	pop	{r7, pc}

0801e8a4 <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 801e8a4:	b580      	push	{r7, lr}
 801e8a6:	b084      	sub	sp, #16
 801e8a8:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 801e8aa:	463b      	mov	r3, r7
 801e8ac:	4618      	mov	r0, r3
 801e8ae:	f7e9 ff2b 	bl	8008708 <RCC_GetClocksFreq>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 801e8b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801e8b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801e8ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801e8be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801e8c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801e8c4:	f042 0220 	orr.w	r2, r2, #32
 801e8c8:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 801e8ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e8ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801e8d2:	68f9      	ldr	r1, [r7, #12]
 801e8d4:	f64d 6283 	movw	r2, #56963	; 0xde83
 801e8d8:	f2c4 321b 	movt	r2, #17179	; 0x431b
 801e8dc:	fba2 0201 	umull	r0, r2, r2, r1
 801e8e0:	ea4f 4292 	mov.w	r2, r2, lsr #18
 801e8e4:	b292      	uxth	r2, r2
 801e8e6:	f102 32ff 	add.w	r2, r2, #4294967295
 801e8ea:	b292      	uxth	r2, r2
 801e8ec:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 801e8ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e8f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801e8f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e8fa:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 801e8fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e900:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801e904:	f04f 0201 	mov.w	r2, #1
 801e908:	801a      	strh	r2, [r3, #0]
}
 801e90a:	f107 0710 	add.w	r7, r7, #16
 801e90e:	46bd      	mov	sp, r7
 801e910:	bd80      	pop	{r7, pc}
 801e912:	bf00      	nop

0801e914 <d_fill_name>:
 801e914:	b480      	push	{r7}
 801e916:	b085      	sub	sp, #20
 801e918:	af00      	add	r7, sp, #0
 801e91a:	60f8      	str	r0, [r7, #12]
 801e91c:	60b9      	str	r1, [r7, #8]
 801e91e:	607a      	str	r2, [r7, #4]
 801e920:	68fb      	ldr	r3, [r7, #12]
 801e922:	2b00      	cmp	r3, #0
 801e924:	d005      	beq.n	801e932 <d_fill_name+0x1e>
 801e926:	68bb      	ldr	r3, [r7, #8]
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d002      	beq.n	801e932 <d_fill_name+0x1e>
 801e92c:	687b      	ldr	r3, [r7, #4]
 801e92e:	2b00      	cmp	r3, #0
 801e930:	d102      	bne.n	801e938 <d_fill_name+0x24>
 801e932:	f04f 0300 	mov.w	r3, #0
 801e936:	e00b      	b.n	801e950 <d_fill_name+0x3c>
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	f04f 0200 	mov.w	r2, #0
 801e93e:	701a      	strb	r2, [r3, #0]
 801e940:	68fb      	ldr	r3, [r7, #12]
 801e942:	68ba      	ldr	r2, [r7, #8]
 801e944:	605a      	str	r2, [r3, #4]
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	687a      	ldr	r2, [r7, #4]
 801e94a:	609a      	str	r2, [r3, #8]
 801e94c:	f04f 0301 	mov.w	r3, #1
 801e950:	4618      	mov	r0, r3
 801e952:	f107 0714 	add.w	r7, r7, #20
 801e956:	46bd      	mov	sp, r7
 801e958:	bc80      	pop	{r7}
 801e95a:	4770      	bx	lr

0801e95c <d_fill_extended_operator>:
 801e95c:	b480      	push	{r7}
 801e95e:	b085      	sub	sp, #20
 801e960:	af00      	add	r7, sp, #0
 801e962:	60f8      	str	r0, [r7, #12]
 801e964:	60b9      	str	r1, [r7, #8]
 801e966:	607a      	str	r2, [r7, #4]
 801e968:	68fb      	ldr	r3, [r7, #12]
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d005      	beq.n	801e97a <d_fill_extended_operator+0x1e>
 801e96e:	68bb      	ldr	r3, [r7, #8]
 801e970:	2b00      	cmp	r3, #0
 801e972:	db02      	blt.n	801e97a <d_fill_extended_operator+0x1e>
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	2b00      	cmp	r3, #0
 801e978:	d102      	bne.n	801e980 <d_fill_extended_operator+0x24>
 801e97a:	f04f 0300 	mov.w	r3, #0
 801e97e:	e00b      	b.n	801e998 <d_fill_extended_operator+0x3c>
 801e980:	68fb      	ldr	r3, [r7, #12]
 801e982:	f04f 022d 	mov.w	r2, #45	; 0x2d
 801e986:	701a      	strb	r2, [r3, #0]
 801e988:	68fb      	ldr	r3, [r7, #12]
 801e98a:	68ba      	ldr	r2, [r7, #8]
 801e98c:	605a      	str	r2, [r3, #4]
 801e98e:	68fb      	ldr	r3, [r7, #12]
 801e990:	687a      	ldr	r2, [r7, #4]
 801e992:	609a      	str	r2, [r3, #8]
 801e994:	f04f 0301 	mov.w	r3, #1
 801e998:	4618      	mov	r0, r3
 801e99a:	f107 0714 	add.w	r7, r7, #20
 801e99e:	46bd      	mov	sp, r7
 801e9a0:	bc80      	pop	{r7}
 801e9a2:	4770      	bx	lr

0801e9a4 <d_fill_ctor>:
 801e9a4:	b480      	push	{r7}
 801e9a6:	b085      	sub	sp, #20
 801e9a8:	af00      	add	r7, sp, #0
 801e9aa:	60f8      	str	r0, [r7, #12]
 801e9ac:	460b      	mov	r3, r1
 801e9ae:	607a      	str	r2, [r7, #4]
 801e9b0:	72fb      	strb	r3, [r7, #11]
 801e9b2:	68fb      	ldr	r3, [r7, #12]
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d008      	beq.n	801e9ca <d_fill_ctor+0x26>
 801e9b8:	687b      	ldr	r3, [r7, #4]
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d005      	beq.n	801e9ca <d_fill_ctor+0x26>
 801e9be:	7afb      	ldrb	r3, [r7, #11]
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	d002      	beq.n	801e9ca <d_fill_ctor+0x26>
 801e9c4:	7afb      	ldrb	r3, [r7, #11]
 801e9c6:	2b03      	cmp	r3, #3
 801e9c8:	d902      	bls.n	801e9d0 <d_fill_ctor+0x2c>
 801e9ca:	f04f 0300 	mov.w	r3, #0
 801e9ce:	e00b      	b.n	801e9e8 <d_fill_ctor+0x44>
 801e9d0:	68fb      	ldr	r3, [r7, #12]
 801e9d2:	f04f 0207 	mov.w	r2, #7
 801e9d6:	701a      	strb	r2, [r3, #0]
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	7afa      	ldrb	r2, [r7, #11]
 801e9dc:	711a      	strb	r2, [r3, #4]
 801e9de:	68fb      	ldr	r3, [r7, #12]
 801e9e0:	687a      	ldr	r2, [r7, #4]
 801e9e2:	609a      	str	r2, [r3, #8]
 801e9e4:	f04f 0301 	mov.w	r3, #1
 801e9e8:	4618      	mov	r0, r3
 801e9ea:	f107 0714 	add.w	r7, r7, #20
 801e9ee:	46bd      	mov	sp, r7
 801e9f0:	bc80      	pop	{r7}
 801e9f2:	4770      	bx	lr

0801e9f4 <d_fill_dtor>:
 801e9f4:	b480      	push	{r7}
 801e9f6:	b085      	sub	sp, #20
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	60f8      	str	r0, [r7, #12]
 801e9fc:	460b      	mov	r3, r1
 801e9fe:	607a      	str	r2, [r7, #4]
 801ea00:	72fb      	strb	r3, [r7, #11]
 801ea02:	68fb      	ldr	r3, [r7, #12]
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d008      	beq.n	801ea1a <d_fill_dtor+0x26>
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	d005      	beq.n	801ea1a <d_fill_dtor+0x26>
 801ea0e:	7afb      	ldrb	r3, [r7, #11]
 801ea10:	2b00      	cmp	r3, #0
 801ea12:	d002      	beq.n	801ea1a <d_fill_dtor+0x26>
 801ea14:	7afb      	ldrb	r3, [r7, #11]
 801ea16:	2b03      	cmp	r3, #3
 801ea18:	d902      	bls.n	801ea20 <d_fill_dtor+0x2c>
 801ea1a:	f04f 0300 	mov.w	r3, #0
 801ea1e:	e00b      	b.n	801ea38 <d_fill_dtor+0x44>
 801ea20:	68fb      	ldr	r3, [r7, #12]
 801ea22:	f04f 0208 	mov.w	r2, #8
 801ea26:	701a      	strb	r2, [r3, #0]
 801ea28:	68fb      	ldr	r3, [r7, #12]
 801ea2a:	7afa      	ldrb	r2, [r7, #11]
 801ea2c:	711a      	strb	r2, [r3, #4]
 801ea2e:	68fb      	ldr	r3, [r7, #12]
 801ea30:	687a      	ldr	r2, [r7, #4]
 801ea32:	609a      	str	r2, [r3, #8]
 801ea34:	f04f 0301 	mov.w	r3, #1
 801ea38:	4618      	mov	r0, r3
 801ea3a:	f107 0714 	add.w	r7, r7, #20
 801ea3e:	46bd      	mov	sp, r7
 801ea40:	bc80      	pop	{r7}
 801ea42:	4770      	bx	lr

0801ea44 <d_make_empty>:
 801ea44:	b480      	push	{r7}
 801ea46:	b085      	sub	sp, #20
 801ea48:	af00      	add	r7, sp, #0
 801ea4a:	6078      	str	r0, [r7, #4]
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	695a      	ldr	r2, [r3, #20]
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	699b      	ldr	r3, [r3, #24]
 801ea54:	429a      	cmp	r2, r3
 801ea56:	db02      	blt.n	801ea5e <d_make_empty+0x1a>
 801ea58:	f04f 0300 	mov.w	r3, #0
 801ea5c:	e013      	b.n	801ea86 <d_make_empty+0x42>
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	6919      	ldr	r1, [r3, #16]
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	695b      	ldr	r3, [r3, #20]
 801ea66:	461a      	mov	r2, r3
 801ea68:	4613      	mov	r3, r2
 801ea6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ea6e:	189b      	adds	r3, r3, r2
 801ea70:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801ea74:	18cb      	adds	r3, r1, r3
 801ea76:	60fb      	str	r3, [r7, #12]
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	695b      	ldr	r3, [r3, #20]
 801ea7c:	f103 0201 	add.w	r2, r3, #1
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	615a      	str	r2, [r3, #20]
 801ea84:	68fb      	ldr	r3, [r7, #12]
 801ea86:	4618      	mov	r0, r3
 801ea88:	f107 0714 	add.w	r7, r7, #20
 801ea8c:	46bd      	mov	sp, r7
 801ea8e:	bc80      	pop	{r7}
 801ea90:	4770      	bx	lr
 801ea92:	bf00      	nop

0801ea94 <d_make_comp>:
 801ea94:	b580      	push	{r7, lr}
 801ea96:	b086      	sub	sp, #24
 801ea98:	af00      	add	r7, sp, #0
 801ea9a:	60f8      	str	r0, [r7, #12]
 801ea9c:	607a      	str	r2, [r7, #4]
 801ea9e:	603b      	str	r3, [r7, #0]
 801eaa0:	460b      	mov	r3, r1
 801eaa2:	72fb      	strb	r3, [r7, #11]
 801eaa4:	7afb      	ldrb	r3, [r7, #11]
 801eaa6:	f103 33ff 	add.w	r3, r3, #4294967295
 801eaaa:	2b41      	cmp	r3, #65	; 0x41
 801eaac:	f200 809d 	bhi.w	801ebea <d_make_comp+0x156>
 801eab0:	a201      	add	r2, pc, #4	; (adr r2, 801eab8 <d_make_comp+0x24>)
 801eab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eab6:	bf00      	nop
 801eab8:	0801ebc1 	.word	0x0801ebc1
 801eabc:	0801ebc1 	.word	0x0801ebc1
 801eac0:	0801ebc1 	.word	0x0801ebc1
 801eac4:	0801ebc1 	.word	0x0801ebc1
 801eac8:	0801ebeb 	.word	0x0801ebeb
 801eacc:	0801ebeb 	.word	0x0801ebeb
 801ead0:	0801ebeb 	.word	0x0801ebeb
 801ead4:	0801ebeb 	.word	0x0801ebeb
 801ead8:	0801ebd3 	.word	0x0801ebd3
 801eadc:	0801ebd3 	.word	0x0801ebd3
 801eae0:	0801ebc1 	.word	0x0801ebc1
 801eae4:	0801ebd3 	.word	0x0801ebd3
 801eae8:	0801ebd3 	.word	0x0801ebd3
 801eaec:	0801ebd3 	.word	0x0801ebd3
 801eaf0:	0801ebd3 	.word	0x0801ebd3
 801eaf4:	0801ebd3 	.word	0x0801ebd3
 801eaf8:	0801ebd3 	.word	0x0801ebd3
 801eafc:	0801ebd3 	.word	0x0801ebd3
 801eb00:	0801ebd3 	.word	0x0801ebd3
 801eb04:	0801ebd3 	.word	0x0801ebd3
 801eb08:	0801ebd3 	.word	0x0801ebd3
 801eb0c:	0801ebeb 	.word	0x0801ebeb
 801eb10:	0801ebf1 	.word	0x0801ebf1
 801eb14:	0801ebf1 	.word	0x0801ebf1
 801eb18:	0801ebf1 	.word	0x0801ebf1
 801eb1c:	0801ebf1 	.word	0x0801ebf1
 801eb20:	0801ebf1 	.word	0x0801ebf1
 801eb24:	0801ebf1 	.word	0x0801ebf1
 801eb28:	0801ebc1 	.word	0x0801ebc1
 801eb2c:	0801ebd3 	.word	0x0801ebd3
 801eb30:	0801ebd3 	.word	0x0801ebd3
 801eb34:	0801ebd3 	.word	0x0801ebd3
 801eb38:	0801ebd3 	.word	0x0801ebd3
 801eb3c:	0801ebd3 	.word	0x0801ebd3
 801eb40:	0801ebeb 	.word	0x0801ebeb
 801eb44:	0801ebd3 	.word	0x0801ebd3
 801eb48:	0801ebf1 	.word	0x0801ebf1
 801eb4c:	0801ebdf 	.word	0x0801ebdf
 801eb50:	0801ebc1 	.word	0x0801ebc1
 801eb54:	0801ebeb 	.word	0x0801ebeb
 801eb58:	0801ebc1 	.word	0x0801ebc1
 801eb5c:	0801ebf1 	.word	0x0801ebf1
 801eb60:	0801ebf1 	.word	0x0801ebf1
 801eb64:	0801ebeb 	.word	0x0801ebeb
 801eb68:	0801ebeb 	.word	0x0801ebeb
 801eb6c:	0801ebd3 	.word	0x0801ebd3
 801eb70:	0801ebc1 	.word	0x0801ebc1
 801eb74:	0801ebc1 	.word	0x0801ebc1
 801eb78:	0801ebc1 	.word	0x0801ebc1
 801eb7c:	0801ebc1 	.word	0x0801ebc1
 801eb80:	0801ebc1 	.word	0x0801ebc1
 801eb84:	0801ebc1 	.word	0x0801ebc1
 801eb88:	0801ebc1 	.word	0x0801ebc1
 801eb8c:	0801ebc1 	.word	0x0801ebc1
 801eb90:	0801ebd3 	.word	0x0801ebd3
 801eb94:	0801ebc1 	.word	0x0801ebc1
 801eb98:	0801ebeb 	.word	0x0801ebeb
 801eb9c:	0801ebeb 	.word	0x0801ebeb
 801eba0:	0801ebd3 	.word	0x0801ebd3
 801eba4:	0801ebd3 	.word	0x0801ebd3
 801eba8:	0801ebd3 	.word	0x0801ebd3
 801ebac:	0801ebeb 	.word	0x0801ebeb
 801ebb0:	0801ebeb 	.word	0x0801ebeb
 801ebb4:	0801ebeb 	.word	0x0801ebeb
 801ebb8:	0801ebd3 	.word	0x0801ebd3
 801ebbc:	0801ebc1 	.word	0x0801ebc1
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d002      	beq.n	801ebcc <d_make_comp+0x138>
 801ebc6:	683b      	ldr	r3, [r7, #0]
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d113      	bne.n	801ebf4 <d_make_comp+0x160>
 801ebcc:	f04f 0300 	mov.w	r3, #0
 801ebd0:	e027      	b.n	801ec22 <d_make_comp+0x18e>
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d10f      	bne.n	801ebf8 <d_make_comp+0x164>
 801ebd8:	f04f 0300 	mov.w	r3, #0
 801ebdc:	e021      	b.n	801ec22 <d_make_comp+0x18e>
 801ebde:	683b      	ldr	r3, [r7, #0]
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d10b      	bne.n	801ebfc <d_make_comp+0x168>
 801ebe4:	f04f 0300 	mov.w	r3, #0
 801ebe8:	e01b      	b.n	801ec22 <d_make_comp+0x18e>
 801ebea:	f04f 0300 	mov.w	r3, #0
 801ebee:	e018      	b.n	801ec22 <d_make_comp+0x18e>
 801ebf0:	bf00      	nop
 801ebf2:	e004      	b.n	801ebfe <d_make_comp+0x16a>
 801ebf4:	bf00      	nop
 801ebf6:	e002      	b.n	801ebfe <d_make_comp+0x16a>
 801ebf8:	bf00      	nop
 801ebfa:	e000      	b.n	801ebfe <d_make_comp+0x16a>
 801ebfc:	bf00      	nop
 801ebfe:	68f8      	ldr	r0, [r7, #12]
 801ec00:	f7ff ff20 	bl	801ea44 <d_make_empty>
 801ec04:	4603      	mov	r3, r0
 801ec06:	617b      	str	r3, [r7, #20]
 801ec08:	697b      	ldr	r3, [r7, #20]
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d008      	beq.n	801ec20 <d_make_comp+0x18c>
 801ec0e:	697b      	ldr	r3, [r7, #20]
 801ec10:	7afa      	ldrb	r2, [r7, #11]
 801ec12:	701a      	strb	r2, [r3, #0]
 801ec14:	697b      	ldr	r3, [r7, #20]
 801ec16:	687a      	ldr	r2, [r7, #4]
 801ec18:	605a      	str	r2, [r3, #4]
 801ec1a:	697b      	ldr	r3, [r7, #20]
 801ec1c:	683a      	ldr	r2, [r7, #0]
 801ec1e:	609a      	str	r2, [r3, #8]
 801ec20:	697b      	ldr	r3, [r7, #20]
 801ec22:	4618      	mov	r0, r3
 801ec24:	f107 0718 	add.w	r7, r7, #24
 801ec28:	46bd      	mov	sp, r7
 801ec2a:	bd80      	pop	{r7, pc}

0801ec2c <d_make_demangle_mangled_name>:
 801ec2c:	b580      	push	{r7, lr}
 801ec2e:	b082      	sub	sp, #8
 801ec30:	af00      	add	r7, sp, #0
 801ec32:	6078      	str	r0, [r7, #4]
 801ec34:	6039      	str	r1, [r7, #0]
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	68db      	ldr	r3, [r3, #12]
 801ec3a:	781b      	ldrb	r3, [r3, #0]
 801ec3c:	2b5f      	cmp	r3, #95	; 0x5f
 801ec3e:	d106      	bne.n	801ec4e <d_make_demangle_mangled_name+0x22>
 801ec40:	687b      	ldr	r3, [r7, #4]
 801ec42:	68db      	ldr	r3, [r3, #12]
 801ec44:	f103 0301 	add.w	r3, r3, #1
 801ec48:	781b      	ldrb	r3, [r3, #0]
 801ec4a:	2b5a      	cmp	r3, #90	; 0x5a
 801ec4c:	d00a      	beq.n	801ec64 <d_make_demangle_mangled_name+0x38>
 801ec4e:	6838      	ldr	r0, [r7, #0]
 801ec50:	f007 fe64 	bl	802691c <strlen>
 801ec54:	4603      	mov	r3, r0
 801ec56:	6878      	ldr	r0, [r7, #4]
 801ec58:	6839      	ldr	r1, [r7, #0]
 801ec5a:	461a      	mov	r2, r3
 801ec5c:	f000 f814 	bl	801ec88 <d_make_name>
 801ec60:	4603      	mov	r3, r0
 801ec62:	e00b      	b.n	801ec7c <d_make_demangle_mangled_name+0x50>
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	68db      	ldr	r3, [r3, #12]
 801ec68:	f103 0202 	add.w	r2, r3, #2
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	60da      	str	r2, [r3, #12]
 801ec70:	6878      	ldr	r0, [r7, #4]
 801ec72:	f04f 0100 	mov.w	r1, #0
 801ec76:	f000 fa4d 	bl	801f114 <d_encoding>
 801ec7a:	4603      	mov	r3, r0
 801ec7c:	4618      	mov	r0, r3
 801ec7e:	f107 0708 	add.w	r7, r7, #8
 801ec82:	46bd      	mov	sp, r7
 801ec84:	bd80      	pop	{r7, pc}
 801ec86:	bf00      	nop

0801ec88 <d_make_name>:
 801ec88:	b580      	push	{r7, lr}
 801ec8a:	b086      	sub	sp, #24
 801ec8c:	af00      	add	r7, sp, #0
 801ec8e:	60f8      	str	r0, [r7, #12]
 801ec90:	60b9      	str	r1, [r7, #8]
 801ec92:	607a      	str	r2, [r7, #4]
 801ec94:	68f8      	ldr	r0, [r7, #12]
 801ec96:	f7ff fed5 	bl	801ea44 <d_make_empty>
 801ec9a:	4603      	mov	r3, r0
 801ec9c:	617b      	str	r3, [r7, #20]
 801ec9e:	6978      	ldr	r0, [r7, #20]
 801eca0:	68b9      	ldr	r1, [r7, #8]
 801eca2:	687a      	ldr	r2, [r7, #4]
 801eca4:	f7ff fe36 	bl	801e914 <d_fill_name>
 801eca8:	4603      	mov	r3, r0
 801ecaa:	2b00      	cmp	r3, #0
 801ecac:	d102      	bne.n	801ecb4 <d_make_name+0x2c>
 801ecae:	f04f 0300 	mov.w	r3, #0
 801ecb2:	e000      	b.n	801ecb6 <d_make_name+0x2e>
 801ecb4:	697b      	ldr	r3, [r7, #20]
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	f107 0718 	add.w	r7, r7, #24
 801ecbc:	46bd      	mov	sp, r7
 801ecbe:	bd80      	pop	{r7, pc}

0801ecc0 <d_make_builtin_type>:
 801ecc0:	b580      	push	{r7, lr}
 801ecc2:	b084      	sub	sp, #16
 801ecc4:	af00      	add	r7, sp, #0
 801ecc6:	6078      	str	r0, [r7, #4]
 801ecc8:	6039      	str	r1, [r7, #0]
 801ecca:	683b      	ldr	r3, [r7, #0]
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d102      	bne.n	801ecd6 <d_make_builtin_type+0x16>
 801ecd0:	f04f 0300 	mov.w	r3, #0
 801ecd4:	e00f      	b.n	801ecf6 <d_make_builtin_type+0x36>
 801ecd6:	6878      	ldr	r0, [r7, #4]
 801ecd8:	f7ff feb4 	bl	801ea44 <d_make_empty>
 801ecdc:	4603      	mov	r3, r0
 801ecde:	60fb      	str	r3, [r7, #12]
 801ece0:	68fb      	ldr	r3, [r7, #12]
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d006      	beq.n	801ecf4 <d_make_builtin_type+0x34>
 801ece6:	68fb      	ldr	r3, [r7, #12]
 801ece8:	f04f 0223 	mov.w	r2, #35	; 0x23
 801ecec:	701a      	strb	r2, [r3, #0]
 801ecee:	68fb      	ldr	r3, [r7, #12]
 801ecf0:	683a      	ldr	r2, [r7, #0]
 801ecf2:	605a      	str	r2, [r3, #4]
 801ecf4:	68fb      	ldr	r3, [r7, #12]
 801ecf6:	4618      	mov	r0, r3
 801ecf8:	f107 0710 	add.w	r7, r7, #16
 801ecfc:	46bd      	mov	sp, r7
 801ecfe:	bd80      	pop	{r7, pc}

0801ed00 <d_make_operator>:
 801ed00:	b580      	push	{r7, lr}
 801ed02:	b084      	sub	sp, #16
 801ed04:	af00      	add	r7, sp, #0
 801ed06:	6078      	str	r0, [r7, #4]
 801ed08:	6039      	str	r1, [r7, #0]
 801ed0a:	6878      	ldr	r0, [r7, #4]
 801ed0c:	f7ff fe9a 	bl	801ea44 <d_make_empty>
 801ed10:	4603      	mov	r3, r0
 801ed12:	60fb      	str	r3, [r7, #12]
 801ed14:	68fb      	ldr	r3, [r7, #12]
 801ed16:	2b00      	cmp	r3, #0
 801ed18:	d006      	beq.n	801ed28 <d_make_operator+0x28>
 801ed1a:	68fb      	ldr	r3, [r7, #12]
 801ed1c:	f04f 022c 	mov.w	r2, #44	; 0x2c
 801ed20:	701a      	strb	r2, [r3, #0]
 801ed22:	68fb      	ldr	r3, [r7, #12]
 801ed24:	683a      	ldr	r2, [r7, #0]
 801ed26:	605a      	str	r2, [r3, #4]
 801ed28:	68fb      	ldr	r3, [r7, #12]
 801ed2a:	4618      	mov	r0, r3
 801ed2c:	f107 0710 	add.w	r7, r7, #16
 801ed30:	46bd      	mov	sp, r7
 801ed32:	bd80      	pop	{r7, pc}

0801ed34 <d_make_extended_operator>:
 801ed34:	b580      	push	{r7, lr}
 801ed36:	b086      	sub	sp, #24
 801ed38:	af00      	add	r7, sp, #0
 801ed3a:	60f8      	str	r0, [r7, #12]
 801ed3c:	60b9      	str	r1, [r7, #8]
 801ed3e:	607a      	str	r2, [r7, #4]
 801ed40:	68f8      	ldr	r0, [r7, #12]
 801ed42:	f7ff fe7f 	bl	801ea44 <d_make_empty>
 801ed46:	4603      	mov	r3, r0
 801ed48:	617b      	str	r3, [r7, #20]
 801ed4a:	6978      	ldr	r0, [r7, #20]
 801ed4c:	68b9      	ldr	r1, [r7, #8]
 801ed4e:	687a      	ldr	r2, [r7, #4]
 801ed50:	f7ff fe04 	bl	801e95c <d_fill_extended_operator>
 801ed54:	4603      	mov	r3, r0
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d102      	bne.n	801ed60 <d_make_extended_operator+0x2c>
 801ed5a:	f04f 0300 	mov.w	r3, #0
 801ed5e:	e000      	b.n	801ed62 <d_make_extended_operator+0x2e>
 801ed60:	697b      	ldr	r3, [r7, #20]
 801ed62:	4618      	mov	r0, r3
 801ed64:	f107 0718 	add.w	r7, r7, #24
 801ed68:	46bd      	mov	sp, r7
 801ed6a:	bd80      	pop	{r7, pc}

0801ed6c <d_make_default_arg>:
 801ed6c:	b580      	push	{r7, lr}
 801ed6e:	b086      	sub	sp, #24
 801ed70:	af00      	add	r7, sp, #0
 801ed72:	60f8      	str	r0, [r7, #12]
 801ed74:	60b9      	str	r1, [r7, #8]
 801ed76:	607a      	str	r2, [r7, #4]
 801ed78:	68f8      	ldr	r0, [r7, #12]
 801ed7a:	f7ff fe63 	bl	801ea44 <d_make_empty>
 801ed7e:	4603      	mov	r3, r0
 801ed80:	617b      	str	r3, [r7, #20]
 801ed82:	697b      	ldr	r3, [r7, #20]
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	d009      	beq.n	801ed9c <d_make_default_arg+0x30>
 801ed88:	697b      	ldr	r3, [r7, #20]
 801ed8a:	f04f 023f 	mov.w	r2, #63	; 0x3f
 801ed8e:	701a      	strb	r2, [r3, #0]
 801ed90:	697b      	ldr	r3, [r7, #20]
 801ed92:	68ba      	ldr	r2, [r7, #8]
 801ed94:	609a      	str	r2, [r3, #8]
 801ed96:	697b      	ldr	r3, [r7, #20]
 801ed98:	687a      	ldr	r2, [r7, #4]
 801ed9a:	605a      	str	r2, [r3, #4]
 801ed9c:	697b      	ldr	r3, [r7, #20]
 801ed9e:	4618      	mov	r0, r3
 801eda0:	f107 0718 	add.w	r7, r7, #24
 801eda4:	46bd      	mov	sp, r7
 801eda6:	bd80      	pop	{r7, pc}

0801eda8 <d_make_ctor>:
 801eda8:	b580      	push	{r7, lr}
 801edaa:	b086      	sub	sp, #24
 801edac:	af00      	add	r7, sp, #0
 801edae:	60f8      	str	r0, [r7, #12]
 801edb0:	460b      	mov	r3, r1
 801edb2:	607a      	str	r2, [r7, #4]
 801edb4:	72fb      	strb	r3, [r7, #11]
 801edb6:	68f8      	ldr	r0, [r7, #12]
 801edb8:	f7ff fe44 	bl	801ea44 <d_make_empty>
 801edbc:	4603      	mov	r3, r0
 801edbe:	617b      	str	r3, [r7, #20]
 801edc0:	7afb      	ldrb	r3, [r7, #11]
 801edc2:	6978      	ldr	r0, [r7, #20]
 801edc4:	4619      	mov	r1, r3
 801edc6:	687a      	ldr	r2, [r7, #4]
 801edc8:	f7ff fdec 	bl	801e9a4 <d_fill_ctor>
 801edcc:	4603      	mov	r3, r0
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d102      	bne.n	801edd8 <d_make_ctor+0x30>
 801edd2:	f04f 0300 	mov.w	r3, #0
 801edd6:	e000      	b.n	801edda <d_make_ctor+0x32>
 801edd8:	697b      	ldr	r3, [r7, #20]
 801edda:	4618      	mov	r0, r3
 801eddc:	f107 0718 	add.w	r7, r7, #24
 801ede0:	46bd      	mov	sp, r7
 801ede2:	bd80      	pop	{r7, pc}

0801ede4 <d_make_dtor>:
 801ede4:	b580      	push	{r7, lr}
 801ede6:	b086      	sub	sp, #24
 801ede8:	af00      	add	r7, sp, #0
 801edea:	60f8      	str	r0, [r7, #12]
 801edec:	460b      	mov	r3, r1
 801edee:	607a      	str	r2, [r7, #4]
 801edf0:	72fb      	strb	r3, [r7, #11]
 801edf2:	68f8      	ldr	r0, [r7, #12]
 801edf4:	f7ff fe26 	bl	801ea44 <d_make_empty>
 801edf8:	4603      	mov	r3, r0
 801edfa:	617b      	str	r3, [r7, #20]
 801edfc:	7afb      	ldrb	r3, [r7, #11]
 801edfe:	6978      	ldr	r0, [r7, #20]
 801ee00:	4619      	mov	r1, r3
 801ee02:	687a      	ldr	r2, [r7, #4]
 801ee04:	f7ff fdf6 	bl	801e9f4 <d_fill_dtor>
 801ee08:	4603      	mov	r3, r0
 801ee0a:	2b00      	cmp	r3, #0
 801ee0c:	d102      	bne.n	801ee14 <d_make_dtor+0x30>
 801ee0e:	f04f 0300 	mov.w	r3, #0
 801ee12:	e000      	b.n	801ee16 <d_make_dtor+0x32>
 801ee14:	697b      	ldr	r3, [r7, #20]
 801ee16:	4618      	mov	r0, r3
 801ee18:	f107 0718 	add.w	r7, r7, #24
 801ee1c:	46bd      	mov	sp, r7
 801ee1e:	bd80      	pop	{r7, pc}

0801ee20 <d_make_template_param>:
 801ee20:	b580      	push	{r7, lr}
 801ee22:	b084      	sub	sp, #16
 801ee24:	af00      	add	r7, sp, #0
 801ee26:	6078      	str	r0, [r7, #4]
 801ee28:	6039      	str	r1, [r7, #0]
 801ee2a:	6878      	ldr	r0, [r7, #4]
 801ee2c:	f7ff fe0a 	bl	801ea44 <d_make_empty>
 801ee30:	4603      	mov	r3, r0
 801ee32:	60fb      	str	r3, [r7, #12]
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d006      	beq.n	801ee48 <d_make_template_param+0x28>
 801ee3a:	68fb      	ldr	r3, [r7, #12]
 801ee3c:	f04f 0205 	mov.w	r2, #5
 801ee40:	701a      	strb	r2, [r3, #0]
 801ee42:	68fb      	ldr	r3, [r7, #12]
 801ee44:	683a      	ldr	r2, [r7, #0]
 801ee46:	605a      	str	r2, [r3, #4]
 801ee48:	68fb      	ldr	r3, [r7, #12]
 801ee4a:	4618      	mov	r0, r3
 801ee4c:	f107 0710 	add.w	r7, r7, #16
 801ee50:	46bd      	mov	sp, r7
 801ee52:	bd80      	pop	{r7, pc}

0801ee54 <d_make_function_param>:
 801ee54:	b580      	push	{r7, lr}
 801ee56:	b084      	sub	sp, #16
 801ee58:	af00      	add	r7, sp, #0
 801ee5a:	6078      	str	r0, [r7, #4]
 801ee5c:	6039      	str	r1, [r7, #0]
 801ee5e:	6878      	ldr	r0, [r7, #4]
 801ee60:	f7ff fdf0 	bl	801ea44 <d_make_empty>
 801ee64:	4603      	mov	r3, r0
 801ee66:	60fb      	str	r3, [r7, #12]
 801ee68:	68fb      	ldr	r3, [r7, #12]
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d006      	beq.n	801ee7c <d_make_function_param+0x28>
 801ee6e:	68fb      	ldr	r3, [r7, #12]
 801ee70:	f04f 0206 	mov.w	r2, #6
 801ee74:	701a      	strb	r2, [r3, #0]
 801ee76:	68fb      	ldr	r3, [r7, #12]
 801ee78:	683a      	ldr	r2, [r7, #0]
 801ee7a:	605a      	str	r2, [r3, #4]
 801ee7c:	68fb      	ldr	r3, [r7, #12]
 801ee7e:	4618      	mov	r0, r3
 801ee80:	f107 0710 	add.w	r7, r7, #16
 801ee84:	46bd      	mov	sp, r7
 801ee86:	bd80      	pop	{r7, pc}

0801ee88 <d_make_sub>:
 801ee88:	b580      	push	{r7, lr}
 801ee8a:	b086      	sub	sp, #24
 801ee8c:	af00      	add	r7, sp, #0
 801ee8e:	60f8      	str	r0, [r7, #12]
 801ee90:	60b9      	str	r1, [r7, #8]
 801ee92:	607a      	str	r2, [r7, #4]
 801ee94:	68f8      	ldr	r0, [r7, #12]
 801ee96:	f7ff fdd5 	bl	801ea44 <d_make_empty>
 801ee9a:	4603      	mov	r3, r0
 801ee9c:	617b      	str	r3, [r7, #20]
 801ee9e:	697b      	ldr	r3, [r7, #20]
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	d009      	beq.n	801eeb8 <d_make_sub+0x30>
 801eea4:	697b      	ldr	r3, [r7, #20]
 801eea6:	f04f 0216 	mov.w	r2, #22
 801eeaa:	701a      	strb	r2, [r3, #0]
 801eeac:	697b      	ldr	r3, [r7, #20]
 801eeae:	68ba      	ldr	r2, [r7, #8]
 801eeb0:	605a      	str	r2, [r3, #4]
 801eeb2:	697b      	ldr	r3, [r7, #20]
 801eeb4:	687a      	ldr	r2, [r7, #4]
 801eeb6:	609a      	str	r2, [r3, #8]
 801eeb8:	697b      	ldr	r3, [r7, #20]
 801eeba:	4618      	mov	r0, r3
 801eebc:	f107 0718 	add.w	r7, r7, #24
 801eec0:	46bd      	mov	sp, r7
 801eec2:	bd80      	pop	{r7, pc}

0801eec4 <d_mangled_name>:
 801eec4:	b580      	push	{r7, lr}
 801eec6:	b084      	sub	sp, #16
 801eec8:	af00      	add	r7, sp, #0
 801eeca:	6078      	str	r0, [r7, #4]
 801eecc:	6039      	str	r1, [r7, #0]
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	68db      	ldr	r3, [r3, #12]
 801eed2:	781b      	ldrb	r3, [r3, #0]
 801eed4:	2b5f      	cmp	r3, #95	; 0x5f
 801eed6:	d108      	bne.n	801eeea <d_mangled_name+0x26>
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	68db      	ldr	r3, [r3, #12]
 801eedc:	f103 0201 	add.w	r2, r3, #1
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	60da      	str	r2, [r3, #12]
 801eee4:	f04f 0300 	mov.w	r3, #0
 801eee8:	e001      	b.n	801eeee <d_mangled_name+0x2a>
 801eeea:	f04f 0301 	mov.w	r3, #1
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d005      	beq.n	801eefe <d_mangled_name+0x3a>
 801eef2:	683b      	ldr	r3, [r7, #0]
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	d002      	beq.n	801eefe <d_mangled_name+0x3a>
 801eef8:	f04f 0300 	mov.w	r3, #0
 801eefc:	e054      	b.n	801efa8 <d_mangled_name+0xe4>
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	68db      	ldr	r3, [r3, #12]
 801ef02:	781b      	ldrb	r3, [r3, #0]
 801ef04:	2b5a      	cmp	r3, #90	; 0x5a
 801ef06:	d108      	bne.n	801ef1a <d_mangled_name+0x56>
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	68db      	ldr	r3, [r3, #12]
 801ef0c:	f103 0201 	add.w	r2, r3, #1
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	60da      	str	r2, [r3, #12]
 801ef14:	f04f 0300 	mov.w	r3, #0
 801ef18:	e001      	b.n	801ef1e <d_mangled_name+0x5a>
 801ef1a:	f04f 0301 	mov.w	r3, #1
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d002      	beq.n	801ef28 <d_mangled_name+0x64>
 801ef22:	f04f 0300 	mov.w	r3, #0
 801ef26:	e03f      	b.n	801efa8 <d_mangled_name+0xe4>
 801ef28:	6878      	ldr	r0, [r7, #4]
 801ef2a:	6839      	ldr	r1, [r7, #0]
 801ef2c:	f000 f8f2 	bl	801f114 <d_encoding>
 801ef30:	4603      	mov	r3, r0
 801ef32:	60fb      	str	r3, [r7, #12]
 801ef34:	683b      	ldr	r3, [r7, #0]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d035      	beq.n	801efa6 <d_mangled_name+0xe2>
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	689b      	ldr	r3, [r3, #8]
 801ef3e:	f003 0301 	and.w	r3, r3, #1
 801ef42:	b2db      	uxtb	r3, r3
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d02e      	beq.n	801efa6 <d_mangled_name+0xe2>
 801ef48:	e005      	b.n	801ef56 <d_mangled_name+0x92>
 801ef4a:	6878      	ldr	r0, [r7, #4]
 801ef4c:	68f9      	ldr	r1, [r7, #12]
 801ef4e:	f002 fcbb 	bl	80218c8 <d_clone_suffix>
 801ef52:	4603      	mov	r3, r0
 801ef54:	60fb      	str	r3, [r7, #12]
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	68db      	ldr	r3, [r3, #12]
 801ef5a:	781b      	ldrb	r3, [r3, #0]
 801ef5c:	2b2e      	cmp	r3, #46	; 0x2e
 801ef5e:	d122      	bne.n	801efa6 <d_mangled_name+0xe2>
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	68db      	ldr	r3, [r3, #12]
 801ef64:	f103 0301 	add.w	r3, r3, #1
 801ef68:	781b      	ldrb	r3, [r3, #0]
 801ef6a:	2b60      	cmp	r3, #96	; 0x60
 801ef6c:	d906      	bls.n	801ef7c <d_mangled_name+0xb8>
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	68db      	ldr	r3, [r3, #12]
 801ef72:	f103 0301 	add.w	r3, r3, #1
 801ef76:	781b      	ldrb	r3, [r3, #0]
 801ef78:	2b7a      	cmp	r3, #122	; 0x7a
 801ef7a:	d9e6      	bls.n	801ef4a <d_mangled_name+0x86>
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	68db      	ldr	r3, [r3, #12]
 801ef80:	f103 0301 	add.w	r3, r3, #1
 801ef84:	781b      	ldrb	r3, [r3, #0]
 801ef86:	2b5f      	cmp	r3, #95	; 0x5f
 801ef88:	d0df      	beq.n	801ef4a <d_mangled_name+0x86>
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	68db      	ldr	r3, [r3, #12]
 801ef8e:	f103 0301 	add.w	r3, r3, #1
 801ef92:	781b      	ldrb	r3, [r3, #0]
 801ef94:	2b2f      	cmp	r3, #47	; 0x2f
 801ef96:	d906      	bls.n	801efa6 <d_mangled_name+0xe2>
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	68db      	ldr	r3, [r3, #12]
 801ef9c:	f103 0301 	add.w	r3, r3, #1
 801efa0:	781b      	ldrb	r3, [r3, #0]
 801efa2:	2b39      	cmp	r3, #57	; 0x39
 801efa4:	d9d1      	bls.n	801ef4a <d_mangled_name+0x86>
 801efa6:	68fb      	ldr	r3, [r7, #12]
 801efa8:	4618      	mov	r0, r3
 801efaa:	f107 0710 	add.w	r7, r7, #16
 801efae:	46bd      	mov	sp, r7
 801efb0:	bd80      	pop	{r7, pc}
 801efb2:	bf00      	nop

0801efb4 <has_return_type>:
 801efb4:	b580      	push	{r7, lr}
 801efb6:	b082      	sub	sp, #8
 801efb8:	af00      	add	r7, sp, #0
 801efba:	6078      	str	r0, [r7, #4]
 801efbc:	687b      	ldr	r3, [r7, #4]
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	d102      	bne.n	801efc8 <has_return_type+0x14>
 801efc2:	f04f 0300 	mov.w	r3, #0
 801efc6:	e01d      	b.n	801f004 <has_return_type+0x50>
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	781b      	ldrb	r3, [r3, #0]
 801efcc:	2b04      	cmp	r3, #4
 801efce:	d008      	beq.n	801efe2 <has_return_type+0x2e>
 801efd0:	2b04      	cmp	r3, #4
 801efd2:	db03      	blt.n	801efdc <has_return_type+0x28>
 801efd4:	f1a3 031a 	sub.w	r3, r3, #26
 801efd8:	2b02      	cmp	r3, #2
 801efda:	d90d      	bls.n	801eff8 <has_return_type+0x44>
 801efdc:	f04f 0300 	mov.w	r3, #0
 801efe0:	e010      	b.n	801f004 <has_return_type+0x50>
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	685b      	ldr	r3, [r3, #4]
 801efe6:	4618      	mov	r0, r3
 801efe8:	f000 f812 	bl	801f010 <is_ctor_dtor_or_conversion>
 801efec:	4603      	mov	r3, r0
 801efee:	2b00      	cmp	r3, #0
 801eff0:	bf14      	ite	ne
 801eff2:	2300      	movne	r3, #0
 801eff4:	2301      	moveq	r3, #1
 801eff6:	e005      	b.n	801f004 <has_return_type+0x50>
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	685b      	ldr	r3, [r3, #4]
 801effc:	4618      	mov	r0, r3
 801effe:	f7ff ffd9 	bl	801efb4 <has_return_type>
 801f002:	4603      	mov	r3, r0
 801f004:	4618      	mov	r0, r3
 801f006:	f107 0708 	add.w	r7, r7, #8
 801f00a:	46bd      	mov	sp, r7
 801f00c:	bd80      	pop	{r7, pc}
 801f00e:	bf00      	nop

0801f010 <is_ctor_dtor_or_conversion>:
 801f010:	b580      	push	{r7, lr}
 801f012:	b082      	sub	sp, #8
 801f014:	af00      	add	r7, sp, #0
 801f016:	6078      	str	r0, [r7, #4]
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	2b00      	cmp	r3, #0
 801f01c:	d102      	bne.n	801f024 <is_ctor_dtor_or_conversion+0x14>
 801f01e:	f04f 0300 	mov.w	r3, #0
 801f022:	e071      	b.n	801f108 <is_ctor_dtor_or_conversion+0xf8>
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	781b      	ldrb	r3, [r3, #0]
 801f028:	f103 33ff 	add.w	r3, r3, #4294967295
 801f02c:	2b2d      	cmp	r3, #45	; 0x2d
 801f02e:	d85f      	bhi.n	801f0f0 <is_ctor_dtor_or_conversion+0xe0>
 801f030:	a201      	add	r2, pc, #4	; (adr r2, 801f038 <is_ctor_dtor_or_conversion+0x28>)
 801f032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f036:	bf00      	nop
 801f038:	0801f0f7 	.word	0x0801f0f7
 801f03c:	0801f0f7 	.word	0x0801f0f7
 801f040:	0801f0f1 	.word	0x0801f0f1
 801f044:	0801f0f1 	.word	0x0801f0f1
 801f048:	0801f0f1 	.word	0x0801f0f1
 801f04c:	0801f0f1 	.word	0x0801f0f1
 801f050:	0801f105 	.word	0x0801f105
 801f054:	0801f105 	.word	0x0801f105
 801f058:	0801f0f1 	.word	0x0801f0f1
 801f05c:	0801f0f1 	.word	0x0801f0f1
 801f060:	0801f0f1 	.word	0x0801f0f1
 801f064:	0801f0f1 	.word	0x0801f0f1
 801f068:	0801f0f1 	.word	0x0801f0f1
 801f06c:	0801f0f1 	.word	0x0801f0f1
 801f070:	0801f0f1 	.word	0x0801f0f1
 801f074:	0801f0f1 	.word	0x0801f0f1
 801f078:	0801f0f1 	.word	0x0801f0f1
 801f07c:	0801f0f1 	.word	0x0801f0f1
 801f080:	0801f0f1 	.word	0x0801f0f1
 801f084:	0801f0f1 	.word	0x0801f0f1
 801f088:	0801f0f1 	.word	0x0801f0f1
 801f08c:	0801f0f1 	.word	0x0801f0f1
 801f090:	0801f0f1 	.word	0x0801f0f1
 801f094:	0801f0f1 	.word	0x0801f0f1
 801f098:	0801f0f1 	.word	0x0801f0f1
 801f09c:	0801f0f1 	.word	0x0801f0f1
 801f0a0:	0801f0f1 	.word	0x0801f0f1
 801f0a4:	0801f0f1 	.word	0x0801f0f1
 801f0a8:	0801f0f1 	.word	0x0801f0f1
 801f0ac:	0801f0f1 	.word	0x0801f0f1
 801f0b0:	0801f0f1 	.word	0x0801f0f1
 801f0b4:	0801f0f1 	.word	0x0801f0f1
 801f0b8:	0801f0f1 	.word	0x0801f0f1
 801f0bc:	0801f0f1 	.word	0x0801f0f1
 801f0c0:	0801f0f1 	.word	0x0801f0f1
 801f0c4:	0801f0f1 	.word	0x0801f0f1
 801f0c8:	0801f0f1 	.word	0x0801f0f1
 801f0cc:	0801f0f1 	.word	0x0801f0f1
 801f0d0:	0801f0f1 	.word	0x0801f0f1
 801f0d4:	0801f0f1 	.word	0x0801f0f1
 801f0d8:	0801f0f1 	.word	0x0801f0f1
 801f0dc:	0801f0f1 	.word	0x0801f0f1
 801f0e0:	0801f0f1 	.word	0x0801f0f1
 801f0e4:	0801f0f1 	.word	0x0801f0f1
 801f0e8:	0801f0f1 	.word	0x0801f0f1
 801f0ec:	0801f105 	.word	0x0801f105
 801f0f0:	f04f 0300 	mov.w	r3, #0
 801f0f4:	e008      	b.n	801f108 <is_ctor_dtor_or_conversion+0xf8>
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	689b      	ldr	r3, [r3, #8]
 801f0fa:	4618      	mov	r0, r3
 801f0fc:	f7ff ff88 	bl	801f010 <is_ctor_dtor_or_conversion>
 801f100:	4603      	mov	r3, r0
 801f102:	e001      	b.n	801f108 <is_ctor_dtor_or_conversion+0xf8>
 801f104:	f04f 0301 	mov.w	r3, #1
 801f108:	4618      	mov	r0, r3
 801f10a:	f107 0708 	add.w	r7, r7, #8
 801f10e:	46bd      	mov	sp, r7
 801f110:	bd80      	pop	{r7, pc}
 801f112:	bf00      	nop

0801f114 <d_encoding>:
 801f114:	b580      	push	{r7, lr}
 801f116:	b086      	sub	sp, #24
 801f118:	af00      	add	r7, sp, #0
 801f11a:	6078      	str	r0, [r7, #4]
 801f11c:	6039      	str	r1, [r7, #0]
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	68db      	ldr	r3, [r3, #12]
 801f122:	781b      	ldrb	r3, [r3, #0]
 801f124:	73fb      	strb	r3, [r7, #15]
 801f126:	7bfb      	ldrb	r3, [r7, #15]
 801f128:	2b47      	cmp	r3, #71	; 0x47
 801f12a:	d002      	beq.n	801f132 <d_encoding+0x1e>
 801f12c:	7bfb      	ldrb	r3, [r7, #15]
 801f12e:	2b54      	cmp	r3, #84	; 0x54
 801f130:	d104      	bne.n	801f13c <d_encoding+0x28>
 801f132:	6878      	ldr	r0, [r7, #4]
 801f134:	f000 fd1c 	bl	801fb70 <d_special_name>
 801f138:	4603      	mov	r3, r0
 801f13a:	e05b      	b.n	801f1f4 <d_encoding+0xe0>
 801f13c:	6878      	ldr	r0, [r7, #4]
 801f13e:	f000 f85f 	bl	801f200 <d_name>
 801f142:	4603      	mov	r3, r0
 801f144:	617b      	str	r3, [r7, #20]
 801f146:	697b      	ldr	r3, [r7, #20]
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d034      	beq.n	801f1b6 <d_encoding+0xa2>
 801f14c:	683b      	ldr	r3, [r7, #0]
 801f14e:	2b00      	cmp	r3, #0
 801f150:	d031      	beq.n	801f1b6 <d_encoding+0xa2>
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	689b      	ldr	r3, [r3, #8]
 801f156:	f003 0301 	and.w	r3, r3, #1
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d12b      	bne.n	801f1b6 <d_encoding+0xa2>
 801f15e:	e002      	b.n	801f166 <d_encoding+0x52>
 801f160:	697b      	ldr	r3, [r7, #20]
 801f162:	685b      	ldr	r3, [r3, #4]
 801f164:	617b      	str	r3, [r7, #20]
 801f166:	697b      	ldr	r3, [r7, #20]
 801f168:	781b      	ldrb	r3, [r3, #0]
 801f16a:	2b1a      	cmp	r3, #26
 801f16c:	d0f8      	beq.n	801f160 <d_encoding+0x4c>
 801f16e:	697b      	ldr	r3, [r7, #20]
 801f170:	781b      	ldrb	r3, [r3, #0]
 801f172:	2b1b      	cmp	r3, #27
 801f174:	d0f4      	beq.n	801f160 <d_encoding+0x4c>
 801f176:	697b      	ldr	r3, [r7, #20]
 801f178:	781b      	ldrb	r3, [r3, #0]
 801f17a:	2b1c      	cmp	r3, #28
 801f17c:	d0f0      	beq.n	801f160 <d_encoding+0x4c>
 801f17e:	697b      	ldr	r3, [r7, #20]
 801f180:	781b      	ldrb	r3, [r3, #0]
 801f182:	2b02      	cmp	r3, #2
 801f184:	d115      	bne.n	801f1b2 <d_encoding+0x9e>
 801f186:	697b      	ldr	r3, [r7, #20]
 801f188:	689b      	ldr	r3, [r3, #8]
 801f18a:	613b      	str	r3, [r7, #16]
 801f18c:	e002      	b.n	801f194 <d_encoding+0x80>
 801f18e:	693b      	ldr	r3, [r7, #16]
 801f190:	685b      	ldr	r3, [r3, #4]
 801f192:	613b      	str	r3, [r7, #16]
 801f194:	693b      	ldr	r3, [r7, #16]
 801f196:	781b      	ldrb	r3, [r3, #0]
 801f198:	2b1a      	cmp	r3, #26
 801f19a:	d0f8      	beq.n	801f18e <d_encoding+0x7a>
 801f19c:	693b      	ldr	r3, [r7, #16]
 801f19e:	781b      	ldrb	r3, [r3, #0]
 801f1a0:	2b1b      	cmp	r3, #27
 801f1a2:	d0f4      	beq.n	801f18e <d_encoding+0x7a>
 801f1a4:	693b      	ldr	r3, [r7, #16]
 801f1a6:	781b      	ldrb	r3, [r3, #0]
 801f1a8:	2b1c      	cmp	r3, #28
 801f1aa:	d0f0      	beq.n	801f18e <d_encoding+0x7a>
 801f1ac:	697b      	ldr	r3, [r7, #20]
 801f1ae:	693a      	ldr	r2, [r7, #16]
 801f1b0:	609a      	str	r2, [r3, #8]
 801f1b2:	697b      	ldr	r3, [r7, #20]
 801f1b4:	e01e      	b.n	801f1f4 <d_encoding+0xe0>
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	68db      	ldr	r3, [r3, #12]
 801f1ba:	781b      	ldrb	r3, [r3, #0]
 801f1bc:	73fb      	strb	r3, [r7, #15]
 801f1be:	697b      	ldr	r3, [r7, #20]
 801f1c0:	2b00      	cmp	r3, #0
 801f1c2:	d005      	beq.n	801f1d0 <d_encoding+0xbc>
 801f1c4:	7bfb      	ldrb	r3, [r7, #15]
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	d002      	beq.n	801f1d0 <d_encoding+0xbc>
 801f1ca:	7bfb      	ldrb	r3, [r7, #15]
 801f1cc:	2b45      	cmp	r3, #69	; 0x45
 801f1ce:	d101      	bne.n	801f1d4 <d_encoding+0xc0>
 801f1d0:	697b      	ldr	r3, [r7, #20]
 801f1d2:	e00f      	b.n	801f1f4 <d_encoding+0xe0>
 801f1d4:	6978      	ldr	r0, [r7, #20]
 801f1d6:	f7ff feed 	bl	801efb4 <has_return_type>
 801f1da:	4603      	mov	r3, r0
 801f1dc:	6878      	ldr	r0, [r7, #4]
 801f1de:	4619      	mov	r1, r3
 801f1e0:	f001 fc7e 	bl	8020ae0 <d_bare_function_type>
 801f1e4:	4603      	mov	r3, r0
 801f1e6:	6878      	ldr	r0, [r7, #4]
 801f1e8:	f04f 0103 	mov.w	r1, #3
 801f1ec:	697a      	ldr	r2, [r7, #20]
 801f1ee:	f7ff fc51 	bl	801ea94 <d_make_comp>
 801f1f2:	4603      	mov	r3, r0
 801f1f4:	4618      	mov	r0, r3
 801f1f6:	f107 0718 	add.w	r7, r7, #24
 801f1fa:	46bd      	mov	sp, r7
 801f1fc:	bd80      	pop	{r7, pc}
 801f1fe:	bf00      	nop

0801f200 <d_name>:
 801f200:	b590      	push	{r4, r7, lr}
 801f202:	b087      	sub	sp, #28
 801f204:	af00      	add	r7, sp, #0
 801f206:	6078      	str	r0, [r7, #4]
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	68db      	ldr	r3, [r3, #12]
 801f20c:	781b      	ldrb	r3, [r3, #0]
 801f20e:	73fb      	strb	r3, [r7, #15]
 801f210:	7bfb      	ldrb	r3, [r7, #15]
 801f212:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
 801f216:	2b0e      	cmp	r3, #14
 801f218:	f200 8088 	bhi.w	801f32c <d_name+0x12c>
 801f21c:	a201      	add	r2, pc, #4	; (adr r2, 801f224 <d_name+0x24>)
 801f21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f222:	bf00      	nop
 801f224:	0801f275 	.word	0x0801f275
 801f228:	0801f32d 	.word	0x0801f32d
 801f22c:	0801f261 	.word	0x0801f261
 801f230:	0801f32d 	.word	0x0801f32d
 801f234:	0801f32d 	.word	0x0801f32d
 801f238:	0801f32d 	.word	0x0801f32d
 801f23c:	0801f32d 	.word	0x0801f32d
 801f240:	0801f27f 	.word	0x0801f27f
 801f244:	0801f32d 	.word	0x0801f32d
 801f248:	0801f275 	.word	0x0801f275
 801f24c:	0801f32d 	.word	0x0801f32d
 801f250:	0801f32d 	.word	0x0801f32d
 801f254:	0801f32d 	.word	0x0801f32d
 801f258:	0801f32d 	.word	0x0801f32d
 801f25c:	0801f26b 	.word	0x0801f26b
 801f260:	6878      	ldr	r0, [r7, #4]
 801f262:	f000 f889 	bl	801f378 <d_nested_name>
 801f266:	4603      	mov	r3, r0
 801f268:	e081      	b.n	801f36e <d_name+0x16e>
 801f26a:	6878      	ldr	r0, [r7, #4]
 801f26c:	f002 f990 	bl	8021590 <d_local_name>
 801f270:	4603      	mov	r3, r0
 801f272:	e07c      	b.n	801f36e <d_name+0x16e>
 801f274:	6878      	ldr	r0, [r7, #4]
 801f276:	f000 f96b 	bl	801f550 <d_unqualified_name>
 801f27a:	4603      	mov	r3, r0
 801f27c:	e077      	b.n	801f36e <d_name+0x16e>
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	68db      	ldr	r3, [r3, #12]
 801f282:	f103 0301 	add.w	r3, r3, #1
 801f286:	781b      	ldrb	r3, [r3, #0]
 801f288:	2b74      	cmp	r3, #116	; 0x74
 801f28a:	d00a      	beq.n	801f2a2 <d_name+0xa2>
 801f28c:	6878      	ldr	r0, [r7, #4]
 801f28e:	f04f 0100 	mov.w	r1, #0
 801f292:	f002 fbbd 	bl	8021a10 <d_substitution>
 801f296:	4603      	mov	r3, r0
 801f298:	617b      	str	r3, [r7, #20]
 801f29a:	f04f 0301 	mov.w	r3, #1
 801f29e:	613b      	str	r3, [r7, #16]
 801f2a0:	e024      	b.n	801f2ec <d_name+0xec>
 801f2a2:	687b      	ldr	r3, [r7, #4]
 801f2a4:	68db      	ldr	r3, [r3, #12]
 801f2a6:	f103 0202 	add.w	r2, r3, #2
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	60da      	str	r2, [r3, #12]
 801f2ae:	6878      	ldr	r0, [r7, #4]
 801f2b0:	f64d 6124 	movw	r1, #56868	; 0xde24
 801f2b4:	f6c0 0102 	movt	r1, #2050	; 0x802
 801f2b8:	f04f 0203 	mov.w	r2, #3
 801f2bc:	f7ff fce4 	bl	801ec88 <d_make_name>
 801f2c0:	4604      	mov	r4, r0
 801f2c2:	6878      	ldr	r0, [r7, #4]
 801f2c4:	f000 f944 	bl	801f550 <d_unqualified_name>
 801f2c8:	4603      	mov	r3, r0
 801f2ca:	6878      	ldr	r0, [r7, #4]
 801f2cc:	f04f 0101 	mov.w	r1, #1
 801f2d0:	4622      	mov	r2, r4
 801f2d2:	f7ff fbdf 	bl	801ea94 <d_make_comp>
 801f2d6:	4603      	mov	r3, r0
 801f2d8:	617b      	str	r3, [r7, #20]
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f2de:	f103 0203 	add.w	r2, r3, #3
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	631a      	str	r2, [r3, #48]	; 0x30
 801f2e6:	f04f 0300 	mov.w	r3, #0
 801f2ea:	613b      	str	r3, [r7, #16]
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	68db      	ldr	r3, [r3, #12]
 801f2f0:	781b      	ldrb	r3, [r3, #0]
 801f2f2:	2b49      	cmp	r3, #73	; 0x49
 801f2f4:	d118      	bne.n	801f328 <d_name+0x128>
 801f2f6:	693b      	ldr	r3, [r7, #16]
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	d109      	bne.n	801f310 <d_name+0x110>
 801f2fc:	6878      	ldr	r0, [r7, #4]
 801f2fe:	6979      	ldr	r1, [r7, #20]
 801f300:	f002 fb5a 	bl	80219b8 <d_add_substitution>
 801f304:	4603      	mov	r3, r0
 801f306:	2b00      	cmp	r3, #0
 801f308:	d102      	bne.n	801f310 <d_name+0x110>
 801f30a:	f04f 0300 	mov.w	r3, #0
 801f30e:	e02e      	b.n	801f36e <d_name+0x16e>
 801f310:	6878      	ldr	r0, [r7, #4]
 801f312:	f001 fdc3 	bl	8020e9c <d_template_args>
 801f316:	4603      	mov	r3, r0
 801f318:	6878      	ldr	r0, [r7, #4]
 801f31a:	f04f 0104 	mov.w	r1, #4
 801f31e:	697a      	ldr	r2, [r7, #20]
 801f320:	f7ff fbb8 	bl	801ea94 <d_make_comp>
 801f324:	4603      	mov	r3, r0
 801f326:	617b      	str	r3, [r7, #20]
 801f328:	697b      	ldr	r3, [r7, #20]
 801f32a:	e020      	b.n	801f36e <d_name+0x16e>
 801f32c:	6878      	ldr	r0, [r7, #4]
 801f32e:	f000 f90f 	bl	801f550 <d_unqualified_name>
 801f332:	4603      	mov	r3, r0
 801f334:	617b      	str	r3, [r7, #20]
 801f336:	687b      	ldr	r3, [r7, #4]
 801f338:	68db      	ldr	r3, [r3, #12]
 801f33a:	781b      	ldrb	r3, [r3, #0]
 801f33c:	2b49      	cmp	r3, #73	; 0x49
 801f33e:	d115      	bne.n	801f36c <d_name+0x16c>
 801f340:	6878      	ldr	r0, [r7, #4]
 801f342:	6979      	ldr	r1, [r7, #20]
 801f344:	f002 fb38 	bl	80219b8 <d_add_substitution>
 801f348:	4603      	mov	r3, r0
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d102      	bne.n	801f354 <d_name+0x154>
 801f34e:	f04f 0300 	mov.w	r3, #0
 801f352:	e00c      	b.n	801f36e <d_name+0x16e>
 801f354:	6878      	ldr	r0, [r7, #4]
 801f356:	f001 fda1 	bl	8020e9c <d_template_args>
 801f35a:	4603      	mov	r3, r0
 801f35c:	6878      	ldr	r0, [r7, #4]
 801f35e:	f04f 0104 	mov.w	r1, #4
 801f362:	697a      	ldr	r2, [r7, #20]
 801f364:	f7ff fb96 	bl	801ea94 <d_make_comp>
 801f368:	4603      	mov	r3, r0
 801f36a:	617b      	str	r3, [r7, #20]
 801f36c:	697b      	ldr	r3, [r7, #20]
 801f36e:	4618      	mov	r0, r3
 801f370:	f107 071c 	add.w	r7, r7, #28
 801f374:	46bd      	mov	sp, r7
 801f376:	bd90      	pop	{r4, r7, pc}

0801f378 <d_nested_name>:
 801f378:	b580      	push	{r7, lr}
 801f37a:	b084      	sub	sp, #16
 801f37c:	af00      	add	r7, sp, #0
 801f37e:	6078      	str	r0, [r7, #4]
 801f380:	687b      	ldr	r3, [r7, #4]
 801f382:	68db      	ldr	r3, [r3, #12]
 801f384:	781b      	ldrb	r3, [r3, #0]
 801f386:	2b4e      	cmp	r3, #78	; 0x4e
 801f388:	d108      	bne.n	801f39c <d_nested_name+0x24>
 801f38a:	687b      	ldr	r3, [r7, #4]
 801f38c:	68db      	ldr	r3, [r3, #12]
 801f38e:	f103 0201 	add.w	r2, r3, #1
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	60da      	str	r2, [r3, #12]
 801f396:	f04f 0300 	mov.w	r3, #0
 801f39a:	e001      	b.n	801f3a0 <d_nested_name+0x28>
 801f39c:	f04f 0301 	mov.w	r3, #1
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d002      	beq.n	801f3aa <d_nested_name+0x32>
 801f3a4:	f04f 0300 	mov.w	r3, #0
 801f3a8:	e032      	b.n	801f410 <d_nested_name+0x98>
 801f3aa:	f107 0308 	add.w	r3, r7, #8
 801f3ae:	6878      	ldr	r0, [r7, #4]
 801f3b0:	4619      	mov	r1, r3
 801f3b2:	f04f 0201 	mov.w	r2, #1
 801f3b6:	f001 fa77 	bl	80208a8 <d_cv_qualifiers>
 801f3ba:	4603      	mov	r3, r0
 801f3bc:	60fb      	str	r3, [r7, #12]
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	d102      	bne.n	801f3ca <d_nested_name+0x52>
 801f3c4:	f04f 0300 	mov.w	r3, #0
 801f3c8:	e022      	b.n	801f410 <d_nested_name+0x98>
 801f3ca:	6878      	ldr	r0, [r7, #4]
 801f3cc:	f000 f826 	bl	801f41c <d_prefix>
 801f3d0:	4602      	mov	r2, r0
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	601a      	str	r2, [r3, #0]
 801f3d6:	68fb      	ldr	r3, [r7, #12]
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	d102      	bne.n	801f3e4 <d_nested_name+0x6c>
 801f3de:	f04f 0300 	mov.w	r3, #0
 801f3e2:	e015      	b.n	801f410 <d_nested_name+0x98>
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	68db      	ldr	r3, [r3, #12]
 801f3e8:	781b      	ldrb	r3, [r3, #0]
 801f3ea:	2b45      	cmp	r3, #69	; 0x45
 801f3ec:	d108      	bne.n	801f400 <d_nested_name+0x88>
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	68db      	ldr	r3, [r3, #12]
 801f3f2:	f103 0201 	add.w	r2, r3, #1
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	60da      	str	r2, [r3, #12]
 801f3fa:	f04f 0300 	mov.w	r3, #0
 801f3fe:	e001      	b.n	801f404 <d_nested_name+0x8c>
 801f400:	f04f 0301 	mov.w	r3, #1
 801f404:	2b00      	cmp	r3, #0
 801f406:	d002      	beq.n	801f40e <d_nested_name+0x96>
 801f408:	f04f 0300 	mov.w	r3, #0
 801f40c:	e000      	b.n	801f410 <d_nested_name+0x98>
 801f40e:	68bb      	ldr	r3, [r7, #8]
 801f410:	4618      	mov	r0, r3
 801f412:	f107 0710 	add.w	r7, r7, #16
 801f416:	46bd      	mov	sp, r7
 801f418:	bd80      	pop	{r7, pc}
 801f41a:	bf00      	nop

0801f41c <d_prefix>:
 801f41c:	b580      	push	{r7, lr}
 801f41e:	b086      	sub	sp, #24
 801f420:	af00      	add	r7, sp, #0
 801f422:	6078      	str	r0, [r7, #4]
 801f424:	f04f 0300 	mov.w	r3, #0
 801f428:	617b      	str	r3, [r7, #20]
 801f42a:	e000      	b.n	801f42e <d_prefix+0x12>
 801f42c:	bf00      	nop
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	68db      	ldr	r3, [r3, #12]
 801f432:	781b      	ldrb	r3, [r3, #0]
 801f434:	72fb      	strb	r3, [r7, #11]
 801f436:	7afb      	ldrb	r3, [r7, #11]
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d102      	bne.n	801f442 <d_prefix+0x26>
 801f43c:	f04f 0300 	mov.w	r3, #0
 801f440:	e081      	b.n	801f546 <d_prefix+0x12a>
 801f442:	f04f 0301 	mov.w	r3, #1
 801f446:	74fb      	strb	r3, [r7, #19]
 801f448:	7afb      	ldrb	r3, [r7, #11]
 801f44a:	2b2f      	cmp	r3, #47	; 0x2f
 801f44c:	d902      	bls.n	801f454 <d_prefix+0x38>
 801f44e:	7afb      	ldrb	r3, [r7, #11]
 801f450:	2b39      	cmp	r3, #57	; 0x39
 801f452:	d911      	bls.n	801f478 <d_prefix+0x5c>
 801f454:	7afb      	ldrb	r3, [r7, #11]
 801f456:	2b60      	cmp	r3, #96	; 0x60
 801f458:	d902      	bls.n	801f460 <d_prefix+0x44>
 801f45a:	7afb      	ldrb	r3, [r7, #11]
 801f45c:	2b7a      	cmp	r3, #122	; 0x7a
 801f45e:	d90b      	bls.n	801f478 <d_prefix+0x5c>
 801f460:	7afb      	ldrb	r3, [r7, #11]
 801f462:	2b43      	cmp	r3, #67	; 0x43
 801f464:	d008      	beq.n	801f478 <d_prefix+0x5c>
 801f466:	7afb      	ldrb	r3, [r7, #11]
 801f468:	2b44      	cmp	r3, #68	; 0x44
 801f46a:	d005      	beq.n	801f478 <d_prefix+0x5c>
 801f46c:	7afb      	ldrb	r3, [r7, #11]
 801f46e:	2b55      	cmp	r3, #85	; 0x55
 801f470:	d002      	beq.n	801f478 <d_prefix+0x5c>
 801f472:	7afb      	ldrb	r3, [r7, #11]
 801f474:	2b4c      	cmp	r3, #76	; 0x4c
 801f476:	d105      	bne.n	801f484 <d_prefix+0x68>
 801f478:	6878      	ldr	r0, [r7, #4]
 801f47a:	f000 f869 	bl	801f550 <d_unqualified_name>
 801f47e:	4603      	mov	r3, r0
 801f480:	60fb      	str	r3, [r7, #12]
 801f482:	e03e      	b.n	801f502 <d_prefix+0xe6>
 801f484:	7afb      	ldrb	r3, [r7, #11]
 801f486:	2b53      	cmp	r3, #83	; 0x53
 801f488:	d107      	bne.n	801f49a <d_prefix+0x7e>
 801f48a:	6878      	ldr	r0, [r7, #4]
 801f48c:	f04f 0101 	mov.w	r1, #1
 801f490:	f002 fabe 	bl	8021a10 <d_substitution>
 801f494:	4603      	mov	r3, r0
 801f496:	60fb      	str	r3, [r7, #12]
 801f498:	e033      	b.n	801f502 <d_prefix+0xe6>
 801f49a:	7afb      	ldrb	r3, [r7, #11]
 801f49c:	2b49      	cmp	r3, #73	; 0x49
 801f49e:	d10e      	bne.n	801f4be <d_prefix+0xa2>
 801f4a0:	697b      	ldr	r3, [r7, #20]
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	d102      	bne.n	801f4ac <d_prefix+0x90>
 801f4a6:	f04f 0300 	mov.w	r3, #0
 801f4aa:	e04c      	b.n	801f546 <d_prefix+0x12a>
 801f4ac:	f04f 0304 	mov.w	r3, #4
 801f4b0:	74fb      	strb	r3, [r7, #19]
 801f4b2:	6878      	ldr	r0, [r7, #4]
 801f4b4:	f001 fcf2 	bl	8020e9c <d_template_args>
 801f4b8:	4603      	mov	r3, r0
 801f4ba:	60fb      	str	r3, [r7, #12]
 801f4bc:	e021      	b.n	801f502 <d_prefix+0xe6>
 801f4be:	7afb      	ldrb	r3, [r7, #11]
 801f4c0:	2b54      	cmp	r3, #84	; 0x54
 801f4c2:	d105      	bne.n	801f4d0 <d_prefix+0xb4>
 801f4c4:	6878      	ldr	r0, [r7, #4]
 801f4c6:	f001 fcb5 	bl	8020e34 <d_template_param>
 801f4ca:	4603      	mov	r3, r0
 801f4cc:	60fb      	str	r3, [r7, #12]
 801f4ce:	e018      	b.n	801f502 <d_prefix+0xe6>
 801f4d0:	7afb      	ldrb	r3, [r7, #11]
 801f4d2:	2b45      	cmp	r3, #69	; 0x45
 801f4d4:	d101      	bne.n	801f4da <d_prefix+0xbe>
 801f4d6:	697b      	ldr	r3, [r7, #20]
 801f4d8:	e035      	b.n	801f546 <d_prefix+0x12a>
 801f4da:	7afb      	ldrb	r3, [r7, #11]
 801f4dc:	2b4d      	cmp	r3, #77	; 0x4d
 801f4de:	d10d      	bne.n	801f4fc <d_prefix+0xe0>
 801f4e0:	697b      	ldr	r3, [r7, #20]
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	d102      	bne.n	801f4ec <d_prefix+0xd0>
 801f4e6:	f04f 0300 	mov.w	r3, #0
 801f4ea:	e02c      	b.n	801f546 <d_prefix+0x12a>
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	68db      	ldr	r3, [r3, #12]
 801f4f0:	f103 0201 	add.w	r2, r3, #1
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	60da      	str	r2, [r3, #12]
 801f4f8:	bf00      	nop
 801f4fa:	e797      	b.n	801f42c <d_prefix+0x10>
 801f4fc:	f04f 0300 	mov.w	r3, #0
 801f500:	e021      	b.n	801f546 <d_prefix+0x12a>
 801f502:	697b      	ldr	r3, [r7, #20]
 801f504:	2b00      	cmp	r3, #0
 801f506:	d102      	bne.n	801f50e <d_prefix+0xf2>
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	617b      	str	r3, [r7, #20]
 801f50c:	e008      	b.n	801f520 <d_prefix+0x104>
 801f50e:	7cfb      	ldrb	r3, [r7, #19]
 801f510:	6878      	ldr	r0, [r7, #4]
 801f512:	4619      	mov	r1, r3
 801f514:	697a      	ldr	r2, [r7, #20]
 801f516:	68fb      	ldr	r3, [r7, #12]
 801f518:	f7ff fabc 	bl	801ea94 <d_make_comp>
 801f51c:	4603      	mov	r3, r0
 801f51e:	617b      	str	r3, [r7, #20]
 801f520:	7afb      	ldrb	r3, [r7, #11]
 801f522:	2b53      	cmp	r3, #83	; 0x53
 801f524:	d082      	beq.n	801f42c <d_prefix+0x10>
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	68db      	ldr	r3, [r3, #12]
 801f52a:	781b      	ldrb	r3, [r3, #0]
 801f52c:	2b45      	cmp	r3, #69	; 0x45
 801f52e:	f43f af7d 	beq.w	801f42c <d_prefix+0x10>
 801f532:	6878      	ldr	r0, [r7, #4]
 801f534:	6979      	ldr	r1, [r7, #20]
 801f536:	f002 fa3f 	bl	80219b8 <d_add_substitution>
 801f53a:	4603      	mov	r3, r0
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	f47f af75 	bne.w	801f42c <d_prefix+0x10>
 801f542:	f04f 0300 	mov.w	r3, #0
 801f546:	4618      	mov	r0, r3
 801f548:	f107 0718 	add.w	r7, r7, #24
 801f54c:	46bd      	mov	sp, r7
 801f54e:	bd80      	pop	{r7, pc}

0801f550 <d_unqualified_name>:
 801f550:	b580      	push	{r7, lr}
 801f552:	b086      	sub	sp, #24
 801f554:	af00      	add	r7, sp, #0
 801f556:	6078      	str	r0, [r7, #4]
 801f558:	687b      	ldr	r3, [r7, #4]
 801f55a:	68db      	ldr	r3, [r3, #12]
 801f55c:	781b      	ldrb	r3, [r3, #0]
 801f55e:	75fb      	strb	r3, [r7, #23]
 801f560:	7dfb      	ldrb	r3, [r7, #23]
 801f562:	2b2f      	cmp	r3, #47	; 0x2f
 801f564:	d907      	bls.n	801f576 <d_unqualified_name+0x26>
 801f566:	7dfb      	ldrb	r3, [r7, #23]
 801f568:	2b39      	cmp	r3, #57	; 0x39
 801f56a:	d804      	bhi.n	801f576 <d_unqualified_name+0x26>
 801f56c:	6878      	ldr	r0, [r7, #4]
 801f56e:	f000 f86d 	bl	801f64c <d_source_name>
 801f572:	4603      	mov	r3, r0
 801f574:	e065      	b.n	801f642 <d_unqualified_name+0xf2>
 801f576:	7dfb      	ldrb	r3, [r7, #23]
 801f578:	2b60      	cmp	r3, #96	; 0x60
 801f57a:	d91c      	bls.n	801f5b6 <d_unqualified_name+0x66>
 801f57c:	7dfb      	ldrb	r3, [r7, #23]
 801f57e:	2b7a      	cmp	r3, #122	; 0x7a
 801f580:	d819      	bhi.n	801f5b6 <d_unqualified_name+0x66>
 801f582:	6878      	ldr	r0, [r7, #4]
 801f584:	f000 f956 	bl	801f834 <d_operator_name>
 801f588:	4603      	mov	r3, r0
 801f58a:	613b      	str	r3, [r7, #16]
 801f58c:	693b      	ldr	r3, [r7, #16]
 801f58e:	2b00      	cmp	r3, #0
 801f590:	d00f      	beq.n	801f5b2 <d_unqualified_name+0x62>
 801f592:	693b      	ldr	r3, [r7, #16]
 801f594:	781b      	ldrb	r3, [r3, #0]
 801f596:	2b2c      	cmp	r3, #44	; 0x2c
 801f598:	d10b      	bne.n	801f5b2 <d_unqualified_name+0x62>
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f59e:	461a      	mov	r2, r3
 801f5a0:	693b      	ldr	r3, [r7, #16]
 801f5a2:	685b      	ldr	r3, [r3, #4]
 801f5a4:	689b      	ldr	r3, [r3, #8]
 801f5a6:	18d3      	adds	r3, r2, r3
 801f5a8:	f103 0307 	add.w	r3, r3, #7
 801f5ac:	461a      	mov	r2, r3
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	631a      	str	r2, [r3, #48]	; 0x30
 801f5b2:	693b      	ldr	r3, [r7, #16]
 801f5b4:	e045      	b.n	801f642 <d_unqualified_name+0xf2>
 801f5b6:	7dfb      	ldrb	r3, [r7, #23]
 801f5b8:	2b43      	cmp	r3, #67	; 0x43
 801f5ba:	d002      	beq.n	801f5c2 <d_unqualified_name+0x72>
 801f5bc:	7dfb      	ldrb	r3, [r7, #23]
 801f5be:	2b44      	cmp	r3, #68	; 0x44
 801f5c0:	d104      	bne.n	801f5cc <d_unqualified_name+0x7c>
 801f5c2:	6878      	ldr	r0, [r7, #4]
 801f5c4:	f000 fd2e 	bl	8020024 <d_ctor_dtor_name>
 801f5c8:	4603      	mov	r3, r0
 801f5ca:	e03a      	b.n	801f642 <d_unqualified_name+0xf2>
 801f5cc:	7dfb      	ldrb	r3, [r7, #23]
 801f5ce:	2b4c      	cmp	r3, #76	; 0x4c
 801f5d0:	d11b      	bne.n	801f60a <d_unqualified_name+0xba>
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	68db      	ldr	r3, [r3, #12]
 801f5d6:	f103 0201 	add.w	r2, r3, #1
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	60da      	str	r2, [r3, #12]
 801f5de:	6878      	ldr	r0, [r7, #4]
 801f5e0:	f000 f834 	bl	801f64c <d_source_name>
 801f5e4:	4603      	mov	r3, r0
 801f5e6:	60fb      	str	r3, [r7, #12]
 801f5e8:	68fb      	ldr	r3, [r7, #12]
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	d102      	bne.n	801f5f4 <d_unqualified_name+0xa4>
 801f5ee:	f04f 0300 	mov.w	r3, #0
 801f5f2:	e026      	b.n	801f642 <d_unqualified_name+0xf2>
 801f5f4:	6878      	ldr	r0, [r7, #4]
 801f5f6:	f002 f86f 	bl	80216d8 <d_discriminator>
 801f5fa:	4603      	mov	r3, r0
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	d102      	bne.n	801f606 <d_unqualified_name+0xb6>
 801f600:	f04f 0300 	mov.w	r3, #0
 801f604:	e01d      	b.n	801f642 <d_unqualified_name+0xf2>
 801f606:	68fb      	ldr	r3, [r7, #12]
 801f608:	e01b      	b.n	801f642 <d_unqualified_name+0xf2>
 801f60a:	7dfb      	ldrb	r3, [r7, #23]
 801f60c:	2b55      	cmp	r3, #85	; 0x55
 801f60e:	d116      	bne.n	801f63e <d_unqualified_name+0xee>
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	68db      	ldr	r3, [r3, #12]
 801f614:	f103 0301 	add.w	r3, r3, #1
 801f618:	781b      	ldrb	r3, [r3, #0]
 801f61a:	2b6c      	cmp	r3, #108	; 0x6c
 801f61c:	d002      	beq.n	801f624 <d_unqualified_name+0xd4>
 801f61e:	2b74      	cmp	r3, #116	; 0x74
 801f620:	d005      	beq.n	801f62e <d_unqualified_name+0xde>
 801f622:	e009      	b.n	801f638 <d_unqualified_name+0xe8>
 801f624:	6878      	ldr	r0, [r7, #4]
 801f626:	f002 f87b 	bl	8021720 <d_lambda>
 801f62a:	4603      	mov	r3, r0
 801f62c:	e009      	b.n	801f642 <d_unqualified_name+0xf2>
 801f62e:	6878      	ldr	r0, [r7, #4]
 801f630:	f002 f8f2 	bl	8021818 <d_unnamed_type>
 801f634:	4603      	mov	r3, r0
 801f636:	e004      	b.n	801f642 <d_unqualified_name+0xf2>
 801f638:	f04f 0300 	mov.w	r3, #0
 801f63c:	e001      	b.n	801f642 <d_unqualified_name+0xf2>
 801f63e:	f04f 0300 	mov.w	r3, #0
 801f642:	4618      	mov	r0, r3
 801f644:	f107 0718 	add.w	r7, r7, #24
 801f648:	46bd      	mov	sp, r7
 801f64a:	bd80      	pop	{r7, pc}

0801f64c <d_source_name>:
 801f64c:	b580      	push	{r7, lr}
 801f64e:	b084      	sub	sp, #16
 801f650:	af00      	add	r7, sp, #0
 801f652:	6078      	str	r0, [r7, #4]
 801f654:	6878      	ldr	r0, [r7, #4]
 801f656:	f000 f817 	bl	801f688 <d_number>
 801f65a:	4603      	mov	r3, r0
 801f65c:	60fb      	str	r3, [r7, #12]
 801f65e:	68fb      	ldr	r3, [r7, #12]
 801f660:	2b00      	cmp	r3, #0
 801f662:	dc02      	bgt.n	801f66a <d_source_name+0x1e>
 801f664:	f04f 0300 	mov.w	r3, #0
 801f668:	e009      	b.n	801f67e <d_source_name+0x32>
 801f66a:	6878      	ldr	r0, [r7, #4]
 801f66c:	68f9      	ldr	r1, [r7, #12]
 801f66e:	f000 f871 	bl	801f754 <d_identifier>
 801f672:	4603      	mov	r3, r0
 801f674:	60bb      	str	r3, [r7, #8]
 801f676:	687b      	ldr	r3, [r7, #4]
 801f678:	68ba      	ldr	r2, [r7, #8]
 801f67a:	62da      	str	r2, [r3, #44]	; 0x2c
 801f67c:	68bb      	ldr	r3, [r7, #8]
 801f67e:	4618      	mov	r0, r3
 801f680:	f107 0710 	add.w	r7, r7, #16
 801f684:	46bd      	mov	sp, r7
 801f686:	bd80      	pop	{r7, pc}

0801f688 <d_number>:
 801f688:	b480      	push	{r7}
 801f68a:	b087      	sub	sp, #28
 801f68c:	af00      	add	r7, sp, #0
 801f68e:	6078      	str	r0, [r7, #4]
 801f690:	f04f 0300 	mov.w	r3, #0
 801f694:	617b      	str	r3, [r7, #20]
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	68db      	ldr	r3, [r3, #12]
 801f69a:	781b      	ldrb	r3, [r3, #0]
 801f69c:	74fb      	strb	r3, [r7, #19]
 801f69e:	7cfb      	ldrb	r3, [r7, #19]
 801f6a0:	2b6e      	cmp	r3, #110	; 0x6e
 801f6a2:	d10c      	bne.n	801f6be <d_number+0x36>
 801f6a4:	f04f 0301 	mov.w	r3, #1
 801f6a8:	617b      	str	r3, [r7, #20]
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	68db      	ldr	r3, [r3, #12]
 801f6ae:	f103 0201 	add.w	r2, r3, #1
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	60da      	str	r2, [r3, #12]
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	68db      	ldr	r3, [r3, #12]
 801f6ba:	781b      	ldrb	r3, [r3, #0]
 801f6bc:	74fb      	strb	r3, [r7, #19]
 801f6be:	f04f 0300 	mov.w	r3, #0
 801f6c2:	60fb      	str	r3, [r7, #12]
 801f6c4:	7cfb      	ldrb	r3, [r7, #19]
 801f6c6:	2b2f      	cmp	r3, #47	; 0x2f
 801f6c8:	d902      	bls.n	801f6d0 <d_number+0x48>
 801f6ca:	7cfb      	ldrb	r3, [r7, #19]
 801f6cc:	2b39      	cmp	r3, #57	; 0x39
 801f6ce:	d90d      	bls.n	801f6ec <d_number+0x64>
 801f6d0:	697b      	ldr	r3, [r7, #20]
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d003      	beq.n	801f6de <d_number+0x56>
 801f6d6:	68fb      	ldr	r3, [r7, #12]
 801f6d8:	f1c3 0300 	rsb	r3, r3, #0
 801f6dc:	60fb      	str	r3, [r7, #12]
 801f6de:	68fb      	ldr	r3, [r7, #12]
 801f6e0:	4618      	mov	r0, r3
 801f6e2:	f107 071c 	add.w	r7, r7, #28
 801f6e6:	46bd      	mov	sp, r7
 801f6e8:	bc80      	pop	{r7}
 801f6ea:	4770      	bx	lr
 801f6ec:	68fa      	ldr	r2, [r7, #12]
 801f6ee:	4613      	mov	r3, r2
 801f6f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801f6f4:	189b      	adds	r3, r3, r2
 801f6f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f6fa:	461a      	mov	r2, r3
 801f6fc:	7cfb      	ldrb	r3, [r7, #19]
 801f6fe:	18d3      	adds	r3, r2, r3
 801f700:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 801f704:	60fb      	str	r3, [r7, #12]
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	68db      	ldr	r3, [r3, #12]
 801f70a:	f103 0201 	add.w	r2, r3, #1
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	60da      	str	r2, [r3, #12]
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	68db      	ldr	r3, [r3, #12]
 801f716:	781b      	ldrb	r3, [r3, #0]
 801f718:	74fb      	strb	r3, [r7, #19]
 801f71a:	e7d3      	b.n	801f6c4 <d_number+0x3c>

0801f71c <d_number_component>:
 801f71c:	b580      	push	{r7, lr}
 801f71e:	b084      	sub	sp, #16
 801f720:	af00      	add	r7, sp, #0
 801f722:	6078      	str	r0, [r7, #4]
 801f724:	6878      	ldr	r0, [r7, #4]
 801f726:	f7ff f98d 	bl	801ea44 <d_make_empty>
 801f72a:	4603      	mov	r3, r0
 801f72c:	60fb      	str	r3, [r7, #12]
 801f72e:	68fb      	ldr	r3, [r7, #12]
 801f730:	2b00      	cmp	r3, #0
 801f732:	d009      	beq.n	801f748 <d_number_component+0x2c>
 801f734:	68fb      	ldr	r3, [r7, #12]
 801f736:	f04f 023a 	mov.w	r2, #58	; 0x3a
 801f73a:	701a      	strb	r2, [r3, #0]
 801f73c:	6878      	ldr	r0, [r7, #4]
 801f73e:	f7ff ffa3 	bl	801f688 <d_number>
 801f742:	4602      	mov	r2, r0
 801f744:	68fb      	ldr	r3, [r7, #12]
 801f746:	605a      	str	r2, [r3, #4]
 801f748:	68fb      	ldr	r3, [r7, #12]
 801f74a:	4618      	mov	r0, r3
 801f74c:	f107 0710 	add.w	r7, r7, #16
 801f750:	46bd      	mov	sp, r7
 801f752:	bd80      	pop	{r7, pc}

0801f754 <d_identifier>:
 801f754:	b580      	push	{r7, lr}
 801f756:	b084      	sub	sp, #16
 801f758:	af00      	add	r7, sp, #0
 801f75a:	6078      	str	r0, [r7, #4]
 801f75c:	6039      	str	r1, [r7, #0]
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	68db      	ldr	r3, [r3, #12]
 801f762:	60fb      	str	r3, [r7, #12]
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	685b      	ldr	r3, [r3, #4]
 801f768:	461a      	mov	r2, r3
 801f76a:	68fb      	ldr	r3, [r7, #12]
 801f76c:	1ad2      	subs	r2, r2, r3
 801f76e:	683b      	ldr	r3, [r7, #0]
 801f770:	429a      	cmp	r2, r3
 801f772:	da02      	bge.n	801f77a <d_identifier+0x26>
 801f774:	f04f 0300 	mov.w	r3, #0
 801f778:	e056      	b.n	801f828 <d_identifier+0xd4>
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	68da      	ldr	r2, [r3, #12]
 801f77e:	683b      	ldr	r3, [r7, #0]
 801f780:	18d2      	adds	r2, r2, r3
 801f782:	687b      	ldr	r3, [r7, #4]
 801f784:	60da      	str	r2, [r3, #12]
 801f786:	687b      	ldr	r3, [r7, #4]
 801f788:	689b      	ldr	r3, [r3, #8]
 801f78a:	f003 0304 	and.w	r3, r3, #4
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d00a      	beq.n	801f7a8 <d_identifier+0x54>
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	68db      	ldr	r3, [r3, #12]
 801f796:	781b      	ldrb	r3, [r3, #0]
 801f798:	2b24      	cmp	r3, #36	; 0x24
 801f79a:	d105      	bne.n	801f7a8 <d_identifier+0x54>
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	68db      	ldr	r3, [r3, #12]
 801f7a0:	f103 0201 	add.w	r2, r3, #1
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	60da      	str	r2, [r3, #12]
 801f7a8:	683b      	ldr	r3, [r7, #0]
 801f7aa:	2b09      	cmp	r3, #9
 801f7ac:	dd36      	ble.n	801f81c <d_identifier+0xc8>
 801f7ae:	68f8      	ldr	r0, [r7, #12]
 801f7b0:	f64d 6128 	movw	r1, #56872	; 0xde28
 801f7b4:	f6c0 0102 	movt	r1, #2050	; 0x802
 801f7b8:	f04f 0208 	mov.w	r2, #8
 801f7bc:	f006 faae 	bl	8025d1c <memcmp>
 801f7c0:	4603      	mov	r3, r0
 801f7c2:	2b00      	cmp	r3, #0
 801f7c4:	d12a      	bne.n	801f81c <d_identifier+0xc8>
 801f7c6:	68fb      	ldr	r3, [r7, #12]
 801f7c8:	f103 0308 	add.w	r3, r3, #8
 801f7cc:	60bb      	str	r3, [r7, #8]
 801f7ce:	68bb      	ldr	r3, [r7, #8]
 801f7d0:	781b      	ldrb	r3, [r3, #0]
 801f7d2:	2b2e      	cmp	r3, #46	; 0x2e
 801f7d4:	d007      	beq.n	801f7e6 <d_identifier+0x92>
 801f7d6:	68bb      	ldr	r3, [r7, #8]
 801f7d8:	781b      	ldrb	r3, [r3, #0]
 801f7da:	2b5f      	cmp	r3, #95	; 0x5f
 801f7dc:	d003      	beq.n	801f7e6 <d_identifier+0x92>
 801f7de:	68bb      	ldr	r3, [r7, #8]
 801f7e0:	781b      	ldrb	r3, [r3, #0]
 801f7e2:	2b24      	cmp	r3, #36	; 0x24
 801f7e4:	d11a      	bne.n	801f81c <d_identifier+0xc8>
 801f7e6:	68bb      	ldr	r3, [r7, #8]
 801f7e8:	f103 0301 	add.w	r3, r3, #1
 801f7ec:	781b      	ldrb	r3, [r3, #0]
 801f7ee:	2b4e      	cmp	r3, #78	; 0x4e
 801f7f0:	d114      	bne.n	801f81c <d_identifier+0xc8>
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f7f6:	461a      	mov	r2, r3
 801f7f8:	683b      	ldr	r3, [r7, #0]
 801f7fa:	1ad3      	subs	r3, r2, r3
 801f7fc:	f103 0316 	add.w	r3, r3, #22
 801f800:	461a      	mov	r2, r3
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	631a      	str	r2, [r3, #48]	; 0x30
 801f806:	6878      	ldr	r0, [r7, #4]
 801f808:	f64d 6134 	movw	r1, #56884	; 0xde34
 801f80c:	f6c0 0102 	movt	r1, #2050	; 0x802
 801f810:	f04f 0215 	mov.w	r2, #21
 801f814:	f7ff fa38 	bl	801ec88 <d_make_name>
 801f818:	4603      	mov	r3, r0
 801f81a:	e005      	b.n	801f828 <d_identifier+0xd4>
 801f81c:	6878      	ldr	r0, [r7, #4]
 801f81e:	68f9      	ldr	r1, [r7, #12]
 801f820:	683a      	ldr	r2, [r7, #0]
 801f822:	f7ff fa31 	bl	801ec88 <d_make_name>
 801f826:	4603      	mov	r3, r0
 801f828:	4618      	mov	r0, r3
 801f82a:	f107 0710 	add.w	r7, r7, #16
 801f82e:	46bd      	mov	sp, r7
 801f830:	bd80      	pop	{r7, pc}
 801f832:	bf00      	nop

0801f834 <d_operator_name>:
 801f834:	b590      	push	{r4, r7, lr}
 801f836:	b089      	sub	sp, #36	; 0x24
 801f838:	af00      	add	r7, sp, #0
 801f83a:	6078      	str	r0, [r7, #4]
 801f83c:	687b      	ldr	r3, [r7, #4]
 801f83e:	68db      	ldr	r3, [r3, #12]
 801f840:	781b      	ldrb	r3, [r3, #0]
 801f842:	2b00      	cmp	r3, #0
 801f844:	d007      	beq.n	801f856 <d_operator_name+0x22>
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	68da      	ldr	r2, [r3, #12]
 801f84a:	7813      	ldrb	r3, [r2, #0]
 801f84c:	f102 0101 	add.w	r1, r2, #1
 801f850:	687a      	ldr	r2, [r7, #4]
 801f852:	60d1      	str	r1, [r2, #12]
 801f854:	e001      	b.n	801f85a <d_operator_name+0x26>
 801f856:	f04f 0300 	mov.w	r3, #0
 801f85a:	75fb      	strb	r3, [r7, #23]
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	68db      	ldr	r3, [r3, #12]
 801f860:	781b      	ldrb	r3, [r3, #0]
 801f862:	2b00      	cmp	r3, #0
 801f864:	d007      	beq.n	801f876 <d_operator_name+0x42>
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	68da      	ldr	r2, [r3, #12]
 801f86a:	7813      	ldrb	r3, [r2, #0]
 801f86c:	f102 0101 	add.w	r1, r2, #1
 801f870:	687a      	ldr	r2, [r7, #4]
 801f872:	60d1      	str	r1, [r2, #12]
 801f874:	e001      	b.n	801f87a <d_operator_name+0x46>
 801f876:	f04f 0300 	mov.w	r3, #0
 801f87a:	75bb      	strb	r3, [r7, #22]
 801f87c:	7dfb      	ldrb	r3, [r7, #23]
 801f87e:	2b76      	cmp	r3, #118	; 0x76
 801f880:	d113      	bne.n	801f8aa <d_operator_name+0x76>
 801f882:	7dbb      	ldrb	r3, [r7, #22]
 801f884:	2b2f      	cmp	r3, #47	; 0x2f
 801f886:	d910      	bls.n	801f8aa <d_operator_name+0x76>
 801f888:	7dbb      	ldrb	r3, [r7, #22]
 801f88a:	2b39      	cmp	r3, #57	; 0x39
 801f88c:	d80d      	bhi.n	801f8aa <d_operator_name+0x76>
 801f88e:	7dbb      	ldrb	r3, [r7, #22]
 801f890:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 801f894:	6878      	ldr	r0, [r7, #4]
 801f896:	f7ff fed9 	bl	801f64c <d_source_name>
 801f89a:	4603      	mov	r3, r0
 801f89c:	6878      	ldr	r0, [r7, #4]
 801f89e:	4621      	mov	r1, r4
 801f8a0:	461a      	mov	r2, r3
 801f8a2:	f7ff fa47 	bl	801ed34 <d_make_extended_operator>
 801f8a6:	4603      	mov	r3, r0
 801f8a8:	e065      	b.n	801f976 <d_operator_name+0x142>
 801f8aa:	7dfb      	ldrb	r3, [r7, #23]
 801f8ac:	2b63      	cmp	r3, #99	; 0x63
 801f8ae:	d110      	bne.n	801f8d2 <d_operator_name+0x9e>
 801f8b0:	7dbb      	ldrb	r3, [r7, #22]
 801f8b2:	2b76      	cmp	r3, #118	; 0x76
 801f8b4:	d10d      	bne.n	801f8d2 <d_operator_name+0x9e>
 801f8b6:	6878      	ldr	r0, [r7, #4]
 801f8b8:	f000 fc3a 	bl	8020130 <d_type>
 801f8bc:	4603      	mov	r3, r0
 801f8be:	6878      	ldr	r0, [r7, #4]
 801f8c0:	f04f 012e 	mov.w	r1, #46	; 0x2e
 801f8c4:	461a      	mov	r2, r3
 801f8c6:	f04f 0300 	mov.w	r3, #0
 801f8ca:	f7ff f8e3 	bl	801ea94 <d_make_comp>
 801f8ce:	4603      	mov	r3, r0
 801f8d0:	e051      	b.n	801f976 <d_operator_name+0x142>
 801f8d2:	f04f 0300 	mov.w	r3, #0
 801f8d6:	61fb      	str	r3, [r7, #28]
 801f8d8:	f04f 0334 	mov.w	r3, #52	; 0x34
 801f8dc:	61bb      	str	r3, [r7, #24]
 801f8de:	e000      	b.n	801f8e2 <d_operator_name+0xae>
 801f8e0:	bf00      	nop
 801f8e2:	69ba      	ldr	r2, [r7, #24]
 801f8e4:	69fb      	ldr	r3, [r7, #28]
 801f8e6:	1ad3      	subs	r3, r2, r3
 801f8e8:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 801f8ec:	18d3      	adds	r3, r2, r3
 801f8ee:	ea4f 0363 	mov.w	r3, r3, asr #1
 801f8f2:	461a      	mov	r2, r3
 801f8f4:	69fb      	ldr	r3, [r7, #28]
 801f8f6:	18d3      	adds	r3, r2, r3
 801f8f8:	613b      	str	r3, [r7, #16]
 801f8fa:	693b      	ldr	r3, [r7, #16]
 801f8fc:	ea4f 1203 	mov.w	r2, r3, lsl #4
 801f900:	f64d 73f0 	movw	r3, #57328	; 0xdff0
 801f904:	f6c0 0302 	movt	r3, #2050	; 0x802
 801f908:	18d3      	adds	r3, r2, r3
 801f90a:	60fb      	str	r3, [r7, #12]
 801f90c:	68fb      	ldr	r3, [r7, #12]
 801f90e:	681b      	ldr	r3, [r3, #0]
 801f910:	781b      	ldrb	r3, [r3, #0]
 801f912:	7dfa      	ldrb	r2, [r7, #23]
 801f914:	429a      	cmp	r2, r3
 801f916:	d10d      	bne.n	801f934 <d_operator_name+0x100>
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	f103 0301 	add.w	r3, r3, #1
 801f920:	781b      	ldrb	r3, [r3, #0]
 801f922:	7dba      	ldrb	r2, [r7, #22]
 801f924:	429a      	cmp	r2, r3
 801f926:	d105      	bne.n	801f934 <d_operator_name+0x100>
 801f928:	6878      	ldr	r0, [r7, #4]
 801f92a:	68f9      	ldr	r1, [r7, #12]
 801f92c:	f7ff f9e8 	bl	801ed00 <d_make_operator>
 801f930:	4603      	mov	r3, r0
 801f932:	e020      	b.n	801f976 <d_operator_name+0x142>
 801f934:	68fb      	ldr	r3, [r7, #12]
 801f936:	681b      	ldr	r3, [r3, #0]
 801f938:	781b      	ldrb	r3, [r3, #0]
 801f93a:	7dfa      	ldrb	r2, [r7, #23]
 801f93c:	429a      	cmp	r2, r3
 801f93e:	d30d      	bcc.n	801f95c <d_operator_name+0x128>
 801f940:	68fb      	ldr	r3, [r7, #12]
 801f942:	681b      	ldr	r3, [r3, #0]
 801f944:	781b      	ldrb	r3, [r3, #0]
 801f946:	7dfa      	ldrb	r2, [r7, #23]
 801f948:	429a      	cmp	r2, r3
 801f94a:	d10a      	bne.n	801f962 <d_operator_name+0x12e>
 801f94c:	68fb      	ldr	r3, [r7, #12]
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	f103 0301 	add.w	r3, r3, #1
 801f954:	781b      	ldrb	r3, [r3, #0]
 801f956:	7dba      	ldrb	r2, [r7, #22]
 801f958:	429a      	cmp	r2, r3
 801f95a:	d202      	bcs.n	801f962 <d_operator_name+0x12e>
 801f95c:	693b      	ldr	r3, [r7, #16]
 801f95e:	61bb      	str	r3, [r7, #24]
 801f960:	e003      	b.n	801f96a <d_operator_name+0x136>
 801f962:	693b      	ldr	r3, [r7, #16]
 801f964:	f103 0301 	add.w	r3, r3, #1
 801f968:	61fb      	str	r3, [r7, #28]
 801f96a:	69fa      	ldr	r2, [r7, #28]
 801f96c:	69bb      	ldr	r3, [r7, #24]
 801f96e:	429a      	cmp	r2, r3
 801f970:	d1b6      	bne.n	801f8e0 <d_operator_name+0xac>
 801f972:	f04f 0300 	mov.w	r3, #0
 801f976:	4618      	mov	r0, r3
 801f978:	f107 0724 	add.w	r7, r7, #36	; 0x24
 801f97c:	46bd      	mov	sp, r7
 801f97e:	bd90      	pop	{r4, r7, pc}

0801f980 <d_make_character>:
 801f980:	b580      	push	{r7, lr}
 801f982:	b084      	sub	sp, #16
 801f984:	af00      	add	r7, sp, #0
 801f986:	6078      	str	r0, [r7, #4]
 801f988:	6039      	str	r1, [r7, #0]
 801f98a:	6878      	ldr	r0, [r7, #4]
 801f98c:	f7ff f85a 	bl	801ea44 <d_make_empty>
 801f990:	4603      	mov	r3, r0
 801f992:	60fb      	str	r3, [r7, #12]
 801f994:	68fb      	ldr	r3, [r7, #12]
 801f996:	2b00      	cmp	r3, #0
 801f998:	d006      	beq.n	801f9a8 <d_make_character+0x28>
 801f99a:	68fb      	ldr	r3, [r7, #12]
 801f99c:	f04f 0239 	mov.w	r2, #57	; 0x39
 801f9a0:	701a      	strb	r2, [r3, #0]
 801f9a2:	68fb      	ldr	r3, [r7, #12]
 801f9a4:	683a      	ldr	r2, [r7, #0]
 801f9a6:	605a      	str	r2, [r3, #4]
 801f9a8:	68fb      	ldr	r3, [r7, #12]
 801f9aa:	4618      	mov	r0, r3
 801f9ac:	f107 0710 	add.w	r7, r7, #16
 801f9b0:	46bd      	mov	sp, r7
 801f9b2:	bd80      	pop	{r7, pc}

0801f9b4 <d_java_resource>:
 801f9b4:	b580      	push	{r7, lr}
 801f9b6:	b088      	sub	sp, #32
 801f9b8:	af00      	add	r7, sp, #0
 801f9ba:	6078      	str	r0, [r7, #4]
 801f9bc:	f04f 0300 	mov.w	r3, #0
 801f9c0:	61fb      	str	r3, [r7, #28]
 801f9c2:	f04f 0300 	mov.w	r3, #0
 801f9c6:	61bb      	str	r3, [r7, #24]
 801f9c8:	6878      	ldr	r0, [r7, #4]
 801f9ca:	f7ff fe5d 	bl	801f688 <d_number>
 801f9ce:	4603      	mov	r3, r0
 801f9d0:	617b      	str	r3, [r7, #20]
 801f9d2:	697b      	ldr	r3, [r7, #20]
 801f9d4:	2b01      	cmp	r3, #1
 801f9d6:	dc02      	bgt.n	801f9de <d_java_resource+0x2a>
 801f9d8:	f04f 0300 	mov.w	r3, #0
 801f9dc:	e0c2      	b.n	801fb64 <d_java_resource+0x1b0>
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	68db      	ldr	r3, [r3, #12]
 801f9e2:	781b      	ldrb	r3, [r3, #0]
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	d00d      	beq.n	801fa04 <d_java_resource+0x50>
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	68db      	ldr	r3, [r3, #12]
 801f9ec:	781a      	ldrb	r2, [r3, #0]
 801f9ee:	2a5f      	cmp	r2, #95	; 0x5f
 801f9f0:	bf0c      	ite	eq
 801f9f2:	2200      	moveq	r2, #0
 801f9f4:	2201      	movne	r2, #1
 801f9f6:	b2d2      	uxtb	r2, r2
 801f9f8:	f103 0101 	add.w	r1, r3, #1
 801f9fc:	687b      	ldr	r3, [r7, #4]
 801f9fe:	60d9      	str	r1, [r3, #12]
 801fa00:	2a00      	cmp	r2, #0
 801fa02:	d002      	beq.n	801fa0a <d_java_resource+0x56>
 801fa04:	f04f 0300 	mov.w	r3, #0
 801fa08:	e0ac      	b.n	801fb64 <d_java_resource+0x1b0>
 801fa0a:	697b      	ldr	r3, [r7, #20]
 801fa0c:	f103 33ff 	add.w	r3, r3, #4294967295
 801fa10:	617b      	str	r3, [r7, #20]
 801fa12:	687b      	ldr	r3, [r7, #4]
 801fa14:	68db      	ldr	r3, [r3, #12]
 801fa16:	60bb      	str	r3, [r7, #8]
 801fa18:	f04f 0300 	mov.w	r3, #0
 801fa1c:	613b      	str	r3, [r7, #16]
 801fa1e:	e092      	b.n	801fb46 <d_java_resource+0x192>
 801fa20:	693b      	ldr	r3, [r7, #16]
 801fa22:	68ba      	ldr	r2, [r7, #8]
 801fa24:	18d3      	adds	r3, r2, r3
 801fa26:	781b      	ldrb	r3, [r3, #0]
 801fa28:	73fb      	strb	r3, [r7, #15]
 801fa2a:	7bfb      	ldrb	r3, [r7, #15]
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	d102      	bne.n	801fa36 <d_java_resource+0x82>
 801fa30:	f04f 0300 	mov.w	r3, #0
 801fa34:	e096      	b.n	801fb64 <d_java_resource+0x1b0>
 801fa36:	7bfb      	ldrb	r3, [r7, #15]
 801fa38:	2b24      	cmp	r3, #36	; 0x24
 801fa3a:	d142      	bne.n	801fac2 <d_java_resource+0x10e>
 801fa3c:	693b      	ldr	r3, [r7, #16]
 801fa3e:	f103 0301 	add.w	r3, r3, #1
 801fa42:	613b      	str	r3, [r7, #16]
 801fa44:	693b      	ldr	r3, [r7, #16]
 801fa46:	68ba      	ldr	r2, [r7, #8]
 801fa48:	18d3      	adds	r3, r2, r3
 801fa4a:	781b      	ldrb	r3, [r3, #0]
 801fa4c:	693a      	ldr	r2, [r7, #16]
 801fa4e:	f102 0201 	add.w	r2, r2, #1
 801fa52:	613a      	str	r2, [r7, #16]
 801fa54:	2b53      	cmp	r3, #83	; 0x53
 801fa56:	d004      	beq.n	801fa62 <d_java_resource+0xae>
 801fa58:	2b5f      	cmp	r3, #95	; 0x5f
 801fa5a:	d006      	beq.n	801fa6a <d_java_resource+0xb6>
 801fa5c:	2b24      	cmp	r3, #36	; 0x24
 801fa5e:	d008      	beq.n	801fa72 <d_java_resource+0xbe>
 801fa60:	e00b      	b.n	801fa7a <d_java_resource+0xc6>
 801fa62:	f04f 032f 	mov.w	r3, #47	; 0x2f
 801fa66:	73fb      	strb	r3, [r7, #15]
 801fa68:	e00a      	b.n	801fa80 <d_java_resource+0xcc>
 801fa6a:	f04f 032e 	mov.w	r3, #46	; 0x2e
 801fa6e:	73fb      	strb	r3, [r7, #15]
 801fa70:	e006      	b.n	801fa80 <d_java_resource+0xcc>
 801fa72:	f04f 0324 	mov.w	r3, #36	; 0x24
 801fa76:	73fb      	strb	r3, [r7, #15]
 801fa78:	e002      	b.n	801fa80 <d_java_resource+0xcc>
 801fa7a:	f04f 0300 	mov.w	r3, #0
 801fa7e:	e071      	b.n	801fb64 <d_java_resource+0x1b0>
 801fa80:	7bfb      	ldrb	r3, [r7, #15]
 801fa82:	6878      	ldr	r0, [r7, #4]
 801fa84:	4619      	mov	r1, r3
 801fa86:	f7ff ff7b 	bl	801f980 <d_make_character>
 801fa8a:	4603      	mov	r3, r0
 801fa8c:	61bb      	str	r3, [r7, #24]
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	68da      	ldr	r2, [r3, #12]
 801fa92:	693b      	ldr	r3, [r7, #16]
 801fa94:	18d2      	adds	r2, r2, r3
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	60da      	str	r2, [r3, #12]
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	68db      	ldr	r3, [r3, #12]
 801fa9e:	60bb      	str	r3, [r7, #8]
 801faa0:	697a      	ldr	r2, [r7, #20]
 801faa2:	693b      	ldr	r3, [r7, #16]
 801faa4:	1ad3      	subs	r3, r2, r3
 801faa6:	617b      	str	r3, [r7, #20]
 801faa8:	f04f 0300 	mov.w	r3, #0
 801faac:	613b      	str	r3, [r7, #16]
 801faae:	69bb      	ldr	r3, [r7, #24]
 801fab0:	2b00      	cmp	r3, #0
 801fab2:	d133      	bne.n	801fb1c <d_java_resource+0x168>
 801fab4:	f04f 0300 	mov.w	r3, #0
 801fab8:	e054      	b.n	801fb64 <d_java_resource+0x1b0>
 801faba:	693b      	ldr	r3, [r7, #16]
 801fabc:	f103 0301 	add.w	r3, r3, #1
 801fac0:	613b      	str	r3, [r7, #16]
 801fac2:	693a      	ldr	r2, [r7, #16]
 801fac4:	697b      	ldr	r3, [r7, #20]
 801fac6:	429a      	cmp	r2, r3
 801fac8:	da0b      	bge.n	801fae2 <d_java_resource+0x12e>
 801faca:	693b      	ldr	r3, [r7, #16]
 801facc:	68ba      	ldr	r2, [r7, #8]
 801face:	18d3      	adds	r3, r2, r3
 801fad0:	781b      	ldrb	r3, [r3, #0]
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	d005      	beq.n	801fae2 <d_java_resource+0x12e>
 801fad6:	693b      	ldr	r3, [r7, #16]
 801fad8:	68ba      	ldr	r2, [r7, #8]
 801fada:	18d3      	adds	r3, r2, r3
 801fadc:	781b      	ldrb	r3, [r3, #0]
 801fade:	2b24      	cmp	r3, #36	; 0x24
 801fae0:	d1eb      	bne.n	801faba <d_java_resource+0x106>
 801fae2:	6878      	ldr	r0, [r7, #4]
 801fae4:	68b9      	ldr	r1, [r7, #8]
 801fae6:	693a      	ldr	r2, [r7, #16]
 801fae8:	f7ff f8ce 	bl	801ec88 <d_make_name>
 801faec:	4603      	mov	r3, r0
 801faee:	61bb      	str	r3, [r7, #24]
 801faf0:	687b      	ldr	r3, [r7, #4]
 801faf2:	68da      	ldr	r2, [r3, #12]
 801faf4:	693b      	ldr	r3, [r7, #16]
 801faf6:	18d2      	adds	r2, r2, r3
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	60da      	str	r2, [r3, #12]
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	68db      	ldr	r3, [r3, #12]
 801fb00:	60bb      	str	r3, [r7, #8]
 801fb02:	697a      	ldr	r2, [r7, #20]
 801fb04:	693b      	ldr	r3, [r7, #16]
 801fb06:	1ad3      	subs	r3, r2, r3
 801fb08:	617b      	str	r3, [r7, #20]
 801fb0a:	f04f 0300 	mov.w	r3, #0
 801fb0e:	613b      	str	r3, [r7, #16]
 801fb10:	69bb      	ldr	r3, [r7, #24]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d102      	bne.n	801fb1c <d_java_resource+0x168>
 801fb16:	f04f 0300 	mov.w	r3, #0
 801fb1a:	e023      	b.n	801fb64 <d_java_resource+0x1b0>
 801fb1c:	69fb      	ldr	r3, [r7, #28]
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	d102      	bne.n	801fb28 <d_java_resource+0x174>
 801fb22:	69bb      	ldr	r3, [r7, #24]
 801fb24:	61fb      	str	r3, [r7, #28]
 801fb26:	e00e      	b.n	801fb46 <d_java_resource+0x192>
 801fb28:	6878      	ldr	r0, [r7, #4]
 801fb2a:	f04f 0138 	mov.w	r1, #56	; 0x38
 801fb2e:	69fa      	ldr	r2, [r7, #28]
 801fb30:	69bb      	ldr	r3, [r7, #24]
 801fb32:	f7fe ffaf 	bl	801ea94 <d_make_comp>
 801fb36:	4603      	mov	r3, r0
 801fb38:	61fb      	str	r3, [r7, #28]
 801fb3a:	69fb      	ldr	r3, [r7, #28]
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	d102      	bne.n	801fb46 <d_java_resource+0x192>
 801fb40:	f04f 0300 	mov.w	r3, #0
 801fb44:	e00e      	b.n	801fb64 <d_java_resource+0x1b0>
 801fb46:	697b      	ldr	r3, [r7, #20]
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	f73f af69 	bgt.w	801fa20 <d_java_resource+0x6c>
 801fb4e:	6878      	ldr	r0, [r7, #4]
 801fb50:	f04f 0137 	mov.w	r1, #55	; 0x37
 801fb54:	69fa      	ldr	r2, [r7, #28]
 801fb56:	f04f 0300 	mov.w	r3, #0
 801fb5a:	f7fe ff9b 	bl	801ea94 <d_make_comp>
 801fb5e:	4603      	mov	r3, r0
 801fb60:	61fb      	str	r3, [r7, #28]
 801fb62:	69fb      	ldr	r3, [r7, #28]
 801fb64:	4618      	mov	r0, r3
 801fb66:	f107 0720 	add.w	r7, r7, #32
 801fb6a:	46bd      	mov	sp, r7
 801fb6c:	bd80      	pop	{r7, pc}
 801fb6e:	bf00      	nop

0801fb70 <d_special_name>:
 801fb70:	b580      	push	{r7, lr}
 801fb72:	b086      	sub	sp, #24
 801fb74:	af00      	add	r7, sp, #0
 801fb76:	6078      	str	r0, [r7, #4]
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb7c:	f103 0214 	add.w	r2, r3, #20
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	631a      	str	r2, [r3, #48]	; 0x30
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	68db      	ldr	r3, [r3, #12]
 801fb88:	781b      	ldrb	r3, [r3, #0]
 801fb8a:	2b54      	cmp	r3, #84	; 0x54
 801fb8c:	d108      	bne.n	801fba0 <d_special_name+0x30>
 801fb8e:	687b      	ldr	r3, [r7, #4]
 801fb90:	68db      	ldr	r3, [r3, #12]
 801fb92:	f103 0201 	add.w	r2, r3, #1
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	60da      	str	r2, [r3, #12]
 801fb9a:	f04f 0301 	mov.w	r3, #1
 801fb9e:	e001      	b.n	801fba4 <d_special_name+0x34>
 801fba0:	f04f 0300 	mov.w	r3, #0
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	f000 8177 	beq.w	801fe98 <d_special_name+0x328>
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	68db      	ldr	r3, [r3, #12]
 801fbae:	781b      	ldrb	r3, [r3, #0]
 801fbb0:	2b00      	cmp	r3, #0
 801fbb2:	d007      	beq.n	801fbc4 <d_special_name+0x54>
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	68da      	ldr	r2, [r3, #12]
 801fbb8:	7813      	ldrb	r3, [r2, #0]
 801fbba:	f102 0101 	add.w	r1, r2, #1
 801fbbe:	687a      	ldr	r2, [r7, #4]
 801fbc0:	60d1      	str	r1, [r2, #12]
 801fbc2:	e001      	b.n	801fbc8 <d_special_name+0x58>
 801fbc4:	f04f 0300 	mov.w	r3, #0
 801fbc8:	f1a3 0343 	sub.w	r3, r3, #67	; 0x43
 801fbcc:	2b33      	cmp	r3, #51	; 0x33
 801fbce:	f200 8160 	bhi.w	801fe92 <d_special_name+0x322>
 801fbd2:	a201      	add	r2, pc, #4	; (adr r2, 801fbd8 <d_special_name+0x68>)
 801fbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbd8:	0801fde9 	.word	0x0801fde9
 801fbdc:	0801fe93 	.word	0x0801fe93
 801fbe0:	0801fe93 	.word	0x0801fe93
 801fbe4:	0801fe5b 	.word	0x0801fe5b
 801fbe8:	0801fe93 	.word	0x0801fe93
 801fbec:	0801fe93 	.word	0x0801fe93
 801fbf0:	0801fcf9 	.word	0x0801fcf9
 801fbf4:	0801fe77 	.word	0x0801fe77
 801fbf8:	0801fe93 	.word	0x0801fe93
 801fbfc:	0801fe93 	.word	0x0801fe93
 801fc00:	0801fe93 	.word	0x0801fe93
 801fc04:	0801fe93 	.word	0x0801fe93
 801fc08:	0801fe93 	.word	0x0801fe93
 801fc0c:	0801fe93 	.word	0x0801fe93
 801fc10:	0801fe93 	.word	0x0801fe93
 801fc14:	0801fe93 	.word	0x0801fe93
 801fc18:	0801fd15 	.word	0x0801fd15
 801fc1c:	0801fcd1 	.word	0x0801fcd1
 801fc20:	0801fe93 	.word	0x0801fe93
 801fc24:	0801fca9 	.word	0x0801fca9
 801fc28:	0801fe93 	.word	0x0801fe93
 801fc2c:	0801fe93 	.word	0x0801fe93
 801fc30:	0801fe93 	.word	0x0801fe93
 801fc34:	0801fe93 	.word	0x0801fe93
 801fc38:	0801fe93 	.word	0x0801fe93
 801fc3c:	0801fe93 	.word	0x0801fe93
 801fc40:	0801fe93 	.word	0x0801fe93
 801fc44:	0801fe93 	.word	0x0801fe93
 801fc48:	0801fe93 	.word	0x0801fe93
 801fc4c:	0801fe93 	.word	0x0801fe93
 801fc50:	0801fe93 	.word	0x0801fe93
 801fc54:	0801fe93 	.word	0x0801fe93
 801fc58:	0801fd9d 	.word	0x0801fd9d
 801fc5c:	0801fe93 	.word	0x0801fe93
 801fc60:	0801fe93 	.word	0x0801fe93
 801fc64:	0801fe93 	.word	0x0801fe93
 801fc68:	0801fe93 	.word	0x0801fe93
 801fc6c:	0801fd31 	.word	0x0801fd31
 801fc70:	0801fe93 	.word	0x0801fe93
 801fc74:	0801fe93 	.word	0x0801fe93
 801fc78:	0801fe93 	.word	0x0801fe93
 801fc7c:	0801fe93 	.word	0x0801fe93
 801fc80:	0801fe93 	.word	0x0801fe93
 801fc84:	0801fe93 	.word	0x0801fe93
 801fc88:	0801fe93 	.word	0x0801fe93
 801fc8c:	0801fe93 	.word	0x0801fe93
 801fc90:	0801fe93 	.word	0x0801fe93
 801fc94:	0801fe93 	.word	0x0801fe93
 801fc98:	0801fe93 	.word	0x0801fe93
 801fc9c:	0801fe93 	.word	0x0801fe93
 801fca0:	0801fe93 	.word	0x0801fe93
 801fca4:	0801fd67 	.word	0x0801fd67
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fcac:	f1a3 0205 	sub.w	r2, r3, #5
 801fcb0:	687b      	ldr	r3, [r7, #4]
 801fcb2:	631a      	str	r2, [r3, #48]	; 0x30
 801fcb4:	6878      	ldr	r0, [r7, #4]
 801fcb6:	f000 fa3b 	bl	8020130 <d_type>
 801fcba:	4603      	mov	r3, r0
 801fcbc:	6878      	ldr	r0, [r7, #4]
 801fcbe:	f04f 0109 	mov.w	r1, #9
 801fcc2:	461a      	mov	r2, r3
 801fcc4:	f04f 0300 	mov.w	r3, #0
 801fcc8:	f7fe fee4 	bl	801ea94 <d_make_comp>
 801fccc:	4603      	mov	r3, r0
 801fcce:	e146      	b.n	801ff5e <d_special_name+0x3ee>
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fcd4:	f1a3 020a 	sub.w	r2, r3, #10
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	631a      	str	r2, [r3, #48]	; 0x30
 801fcdc:	6878      	ldr	r0, [r7, #4]
 801fcde:	f000 fa27 	bl	8020130 <d_type>
 801fce2:	4603      	mov	r3, r0
 801fce4:	6878      	ldr	r0, [r7, #4]
 801fce6:	f04f 010a 	mov.w	r1, #10
 801fcea:	461a      	mov	r2, r3
 801fcec:	f04f 0300 	mov.w	r3, #0
 801fcf0:	f7fe fed0 	bl	801ea94 <d_make_comp>
 801fcf4:	4603      	mov	r3, r0
 801fcf6:	e132      	b.n	801ff5e <d_special_name+0x3ee>
 801fcf8:	6878      	ldr	r0, [r7, #4]
 801fcfa:	f000 fa19 	bl	8020130 <d_type>
 801fcfe:	4603      	mov	r3, r0
 801fd00:	6878      	ldr	r0, [r7, #4]
 801fd02:	f04f 010c 	mov.w	r1, #12
 801fd06:	461a      	mov	r2, r3
 801fd08:	f04f 0300 	mov.w	r3, #0
 801fd0c:	f7fe fec2 	bl	801ea94 <d_make_comp>
 801fd10:	4603      	mov	r3, r0
 801fd12:	e124      	b.n	801ff5e <d_special_name+0x3ee>
 801fd14:	6878      	ldr	r0, [r7, #4]
 801fd16:	f000 fa0b 	bl	8020130 <d_type>
 801fd1a:	4603      	mov	r3, r0
 801fd1c:	6878      	ldr	r0, [r7, #4]
 801fd1e:	f04f 010d 	mov.w	r1, #13
 801fd22:	461a      	mov	r2, r3
 801fd24:	f04f 0300 	mov.w	r3, #0
 801fd28:	f7fe feb4 	bl	801ea94 <d_make_comp>
 801fd2c:	4603      	mov	r3, r0
 801fd2e:	e116      	b.n	801ff5e <d_special_name+0x3ee>
 801fd30:	6878      	ldr	r0, [r7, #4]
 801fd32:	f04f 0168 	mov.w	r1, #104	; 0x68
 801fd36:	f000 f917 	bl	801ff68 <d_call_offset>
 801fd3a:	4603      	mov	r3, r0
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d102      	bne.n	801fd46 <d_special_name+0x1d6>
 801fd40:	f04f 0300 	mov.w	r3, #0
 801fd44:	e10b      	b.n	801ff5e <d_special_name+0x3ee>
 801fd46:	6878      	ldr	r0, [r7, #4]
 801fd48:	f04f 0100 	mov.w	r1, #0
 801fd4c:	f7ff f9e2 	bl	801f114 <d_encoding>
 801fd50:	4603      	mov	r3, r0
 801fd52:	6878      	ldr	r0, [r7, #4]
 801fd54:	f04f 010f 	mov.w	r1, #15
 801fd58:	461a      	mov	r2, r3
 801fd5a:	f04f 0300 	mov.w	r3, #0
 801fd5e:	f7fe fe99 	bl	801ea94 <d_make_comp>
 801fd62:	4603      	mov	r3, r0
 801fd64:	e0fb      	b.n	801ff5e <d_special_name+0x3ee>
 801fd66:	6878      	ldr	r0, [r7, #4]
 801fd68:	f04f 0176 	mov.w	r1, #118	; 0x76
 801fd6c:	f000 f8fc 	bl	801ff68 <d_call_offset>
 801fd70:	4603      	mov	r3, r0
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d102      	bne.n	801fd7c <d_special_name+0x20c>
 801fd76:	f04f 0300 	mov.w	r3, #0
 801fd7a:	e0f0      	b.n	801ff5e <d_special_name+0x3ee>
 801fd7c:	6878      	ldr	r0, [r7, #4]
 801fd7e:	f04f 0100 	mov.w	r1, #0
 801fd82:	f7ff f9c7 	bl	801f114 <d_encoding>
 801fd86:	4603      	mov	r3, r0
 801fd88:	6878      	ldr	r0, [r7, #4]
 801fd8a:	f04f 0110 	mov.w	r1, #16
 801fd8e:	461a      	mov	r2, r3
 801fd90:	f04f 0300 	mov.w	r3, #0
 801fd94:	f7fe fe7e 	bl	801ea94 <d_make_comp>
 801fd98:	4603      	mov	r3, r0
 801fd9a:	e0e0      	b.n	801ff5e <d_special_name+0x3ee>
 801fd9c:	6878      	ldr	r0, [r7, #4]
 801fd9e:	f04f 0100 	mov.w	r1, #0
 801fda2:	f000 f8e1 	bl	801ff68 <d_call_offset>
 801fda6:	4603      	mov	r3, r0
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d102      	bne.n	801fdb2 <d_special_name+0x242>
 801fdac:	f04f 0300 	mov.w	r3, #0
 801fdb0:	e0d5      	b.n	801ff5e <d_special_name+0x3ee>
 801fdb2:	6878      	ldr	r0, [r7, #4]
 801fdb4:	f04f 0100 	mov.w	r1, #0
 801fdb8:	f000 f8d6 	bl	801ff68 <d_call_offset>
 801fdbc:	4603      	mov	r3, r0
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d102      	bne.n	801fdc8 <d_special_name+0x258>
 801fdc2:	f04f 0300 	mov.w	r3, #0
 801fdc6:	e0ca      	b.n	801ff5e <d_special_name+0x3ee>
 801fdc8:	6878      	ldr	r0, [r7, #4]
 801fdca:	f04f 0100 	mov.w	r1, #0
 801fdce:	f7ff f9a1 	bl	801f114 <d_encoding>
 801fdd2:	4603      	mov	r3, r0
 801fdd4:	6878      	ldr	r0, [r7, #4]
 801fdd6:	f04f 0111 	mov.w	r1, #17
 801fdda:	461a      	mov	r2, r3
 801fddc:	f04f 0300 	mov.w	r3, #0
 801fde0:	f7fe fe58 	bl	801ea94 <d_make_comp>
 801fde4:	4603      	mov	r3, r0
 801fde6:	e0ba      	b.n	801ff5e <d_special_name+0x3ee>
 801fde8:	6878      	ldr	r0, [r7, #4]
 801fdea:	f000 f9a1 	bl	8020130 <d_type>
 801fdee:	4603      	mov	r3, r0
 801fdf0:	617b      	str	r3, [r7, #20]
 801fdf2:	6878      	ldr	r0, [r7, #4]
 801fdf4:	f7ff fc48 	bl	801f688 <d_number>
 801fdf8:	4603      	mov	r3, r0
 801fdfa:	613b      	str	r3, [r7, #16]
 801fdfc:	693b      	ldr	r3, [r7, #16]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	da02      	bge.n	801fe08 <d_special_name+0x298>
 801fe02:	f04f 0300 	mov.w	r3, #0
 801fe06:	e0aa      	b.n	801ff5e <d_special_name+0x3ee>
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	68db      	ldr	r3, [r3, #12]
 801fe0c:	781b      	ldrb	r3, [r3, #0]
 801fe0e:	2b5f      	cmp	r3, #95	; 0x5f
 801fe10:	d108      	bne.n	801fe24 <d_special_name+0x2b4>
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	68db      	ldr	r3, [r3, #12]
 801fe16:	f103 0201 	add.w	r2, r3, #1
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	60da      	str	r2, [r3, #12]
 801fe1e:	f04f 0300 	mov.w	r3, #0
 801fe22:	e001      	b.n	801fe28 <d_special_name+0x2b8>
 801fe24:	f04f 0301 	mov.w	r3, #1
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d002      	beq.n	801fe32 <d_special_name+0x2c2>
 801fe2c:	f04f 0300 	mov.w	r3, #0
 801fe30:	e095      	b.n	801ff5e <d_special_name+0x3ee>
 801fe32:	6878      	ldr	r0, [r7, #4]
 801fe34:	f000 f97c 	bl	8020130 <d_type>
 801fe38:	4603      	mov	r3, r0
 801fe3a:	60fb      	str	r3, [r7, #12]
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fe40:	f103 0205 	add.w	r2, r3, #5
 801fe44:	687b      	ldr	r3, [r7, #4]
 801fe46:	631a      	str	r2, [r3, #48]	; 0x30
 801fe48:	6878      	ldr	r0, [r7, #4]
 801fe4a:	f04f 010b 	mov.w	r1, #11
 801fe4e:	68fa      	ldr	r2, [r7, #12]
 801fe50:	697b      	ldr	r3, [r7, #20]
 801fe52:	f7fe fe1f 	bl	801ea94 <d_make_comp>
 801fe56:	4603      	mov	r3, r0
 801fe58:	e081      	b.n	801ff5e <d_special_name+0x3ee>
 801fe5a:	6878      	ldr	r0, [r7, #4]
 801fe5c:	f000 f968 	bl	8020130 <d_type>
 801fe60:	4603      	mov	r3, r0
 801fe62:	6878      	ldr	r0, [r7, #4]
 801fe64:	f04f 010e 	mov.w	r1, #14
 801fe68:	461a      	mov	r2, r3
 801fe6a:	f04f 0300 	mov.w	r3, #0
 801fe6e:	f7fe fe11 	bl	801ea94 <d_make_comp>
 801fe72:	4603      	mov	r3, r0
 801fe74:	e073      	b.n	801ff5e <d_special_name+0x3ee>
 801fe76:	6878      	ldr	r0, [r7, #4]
 801fe78:	f000 f95a 	bl	8020130 <d_type>
 801fe7c:	4603      	mov	r3, r0
 801fe7e:	6878      	ldr	r0, [r7, #4]
 801fe80:	f04f 0112 	mov.w	r1, #18
 801fe84:	461a      	mov	r2, r3
 801fe86:	f04f 0300 	mov.w	r3, #0
 801fe8a:	f7fe fe03 	bl	801ea94 <d_make_comp>
 801fe8e:	4603      	mov	r3, r0
 801fe90:	e065      	b.n	801ff5e <d_special_name+0x3ee>
 801fe92:	f04f 0300 	mov.w	r3, #0
 801fe96:	e062      	b.n	801ff5e <d_special_name+0x3ee>
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	68db      	ldr	r3, [r3, #12]
 801fe9c:	781b      	ldrb	r3, [r3, #0]
 801fe9e:	2b47      	cmp	r3, #71	; 0x47
 801fea0:	d108      	bne.n	801feb4 <d_special_name+0x344>
 801fea2:	687b      	ldr	r3, [r7, #4]
 801fea4:	68db      	ldr	r3, [r3, #12]
 801fea6:	f103 0201 	add.w	r2, r3, #1
 801feaa:	687b      	ldr	r3, [r7, #4]
 801feac:	60da      	str	r2, [r3, #12]
 801feae:	f04f 0301 	mov.w	r3, #1
 801feb2:	e001      	b.n	801feb8 <d_special_name+0x348>
 801feb4:	f04f 0300 	mov.w	r3, #0
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d04e      	beq.n	801ff5a <d_special_name+0x3ea>
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	68db      	ldr	r3, [r3, #12]
 801fec0:	781b      	ldrb	r3, [r3, #0]
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	d007      	beq.n	801fed6 <d_special_name+0x366>
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	68da      	ldr	r2, [r3, #12]
 801feca:	7813      	ldrb	r3, [r2, #0]
 801fecc:	f102 0101 	add.w	r1, r2, #1
 801fed0:	687a      	ldr	r2, [r7, #4]
 801fed2:	60d1      	str	r1, [r2, #12]
 801fed4:	e001      	b.n	801feda <d_special_name+0x36a>
 801fed6:	f04f 0300 	mov.w	r3, #0
 801feda:	2b52      	cmp	r3, #82	; 0x52
 801fedc:	d017      	beq.n	801ff0e <d_special_name+0x39e>
 801fede:	2b52      	cmp	r3, #82	; 0x52
 801fee0:	dc02      	bgt.n	801fee8 <d_special_name+0x378>
 801fee2:	2b41      	cmp	r3, #65	; 0x41
 801fee4:	d021      	beq.n	801ff2a <d_special_name+0x3ba>
 801fee6:	e035      	b.n	801ff54 <d_special_name+0x3e4>
 801fee8:	2b56      	cmp	r3, #86	; 0x56
 801feea:	d002      	beq.n	801fef2 <d_special_name+0x382>
 801feec:	2b72      	cmp	r3, #114	; 0x72
 801feee:	d02c      	beq.n	801ff4a <d_special_name+0x3da>
 801fef0:	e030      	b.n	801ff54 <d_special_name+0x3e4>
 801fef2:	6878      	ldr	r0, [r7, #4]
 801fef4:	f7ff f984 	bl	801f200 <d_name>
 801fef8:	4603      	mov	r3, r0
 801fefa:	6878      	ldr	r0, [r7, #4]
 801fefc:	f04f 0113 	mov.w	r1, #19
 801ff00:	461a      	mov	r2, r3
 801ff02:	f04f 0300 	mov.w	r3, #0
 801ff06:	f7fe fdc5 	bl	801ea94 <d_make_comp>
 801ff0a:	4603      	mov	r3, r0
 801ff0c:	e027      	b.n	801ff5e <d_special_name+0x3ee>
 801ff0e:	6878      	ldr	r0, [r7, #4]
 801ff10:	f7ff f976 	bl	801f200 <d_name>
 801ff14:	4603      	mov	r3, r0
 801ff16:	6878      	ldr	r0, [r7, #4]
 801ff18:	f04f 0114 	mov.w	r1, #20
 801ff1c:	461a      	mov	r2, r3
 801ff1e:	f04f 0300 	mov.w	r3, #0
 801ff22:	f7fe fdb7 	bl	801ea94 <d_make_comp>
 801ff26:	4603      	mov	r3, r0
 801ff28:	e019      	b.n	801ff5e <d_special_name+0x3ee>
 801ff2a:	6878      	ldr	r0, [r7, #4]
 801ff2c:	f04f 0100 	mov.w	r1, #0
 801ff30:	f7ff f8f0 	bl	801f114 <d_encoding>
 801ff34:	4603      	mov	r3, r0
 801ff36:	6878      	ldr	r0, [r7, #4]
 801ff38:	f04f 0115 	mov.w	r1, #21
 801ff3c:	461a      	mov	r2, r3
 801ff3e:	f04f 0300 	mov.w	r3, #0
 801ff42:	f7fe fda7 	bl	801ea94 <d_make_comp>
 801ff46:	4603      	mov	r3, r0
 801ff48:	e009      	b.n	801ff5e <d_special_name+0x3ee>
 801ff4a:	6878      	ldr	r0, [r7, #4]
 801ff4c:	f7ff fd32 	bl	801f9b4 <d_java_resource>
 801ff50:	4603      	mov	r3, r0
 801ff52:	e004      	b.n	801ff5e <d_special_name+0x3ee>
 801ff54:	f04f 0300 	mov.w	r3, #0
 801ff58:	e001      	b.n	801ff5e <d_special_name+0x3ee>
 801ff5a:	f04f 0300 	mov.w	r3, #0
 801ff5e:	4618      	mov	r0, r3
 801ff60:	f107 0718 	add.w	r7, r7, #24
 801ff64:	46bd      	mov	sp, r7
 801ff66:	bd80      	pop	{r7, pc}

0801ff68 <d_call_offset>:
 801ff68:	b580      	push	{r7, lr}
 801ff6a:	b082      	sub	sp, #8
 801ff6c:	af00      	add	r7, sp, #0
 801ff6e:	6078      	str	r0, [r7, #4]
 801ff70:	6039      	str	r1, [r7, #0]
 801ff72:	683b      	ldr	r3, [r7, #0]
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d10f      	bne.n	801ff98 <d_call_offset+0x30>
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	68db      	ldr	r3, [r3, #12]
 801ff7c:	781b      	ldrb	r3, [r3, #0]
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d007      	beq.n	801ff92 <d_call_offset+0x2a>
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	68da      	ldr	r2, [r3, #12]
 801ff86:	7813      	ldrb	r3, [r2, #0]
 801ff88:	f102 0101 	add.w	r1, r2, #1
 801ff8c:	687a      	ldr	r2, [r7, #4]
 801ff8e:	60d1      	str	r1, [r2, #12]
 801ff90:	e001      	b.n	801ff96 <d_call_offset+0x2e>
 801ff92:	f04f 0300 	mov.w	r3, #0
 801ff96:	603b      	str	r3, [r7, #0]
 801ff98:	683b      	ldr	r3, [r7, #0]
 801ff9a:	2b68      	cmp	r3, #104	; 0x68
 801ff9c:	d103      	bne.n	801ffa6 <d_call_offset+0x3e>
 801ff9e:	6878      	ldr	r0, [r7, #4]
 801ffa0:	f7ff fb72 	bl	801f688 <d_number>
 801ffa4:	e021      	b.n	801ffea <d_call_offset+0x82>
 801ffa6:	683b      	ldr	r3, [r7, #0]
 801ffa8:	2b76      	cmp	r3, #118	; 0x76
 801ffaa:	d11b      	bne.n	801ffe4 <d_call_offset+0x7c>
 801ffac:	6878      	ldr	r0, [r7, #4]
 801ffae:	f7ff fb6b 	bl	801f688 <d_number>
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	68db      	ldr	r3, [r3, #12]
 801ffb6:	781b      	ldrb	r3, [r3, #0]
 801ffb8:	2b5f      	cmp	r3, #95	; 0x5f
 801ffba:	d108      	bne.n	801ffce <d_call_offset+0x66>
 801ffbc:	687b      	ldr	r3, [r7, #4]
 801ffbe:	68db      	ldr	r3, [r3, #12]
 801ffc0:	f103 0201 	add.w	r2, r3, #1
 801ffc4:	687b      	ldr	r3, [r7, #4]
 801ffc6:	60da      	str	r2, [r3, #12]
 801ffc8:	f04f 0300 	mov.w	r3, #0
 801ffcc:	e001      	b.n	801ffd2 <d_call_offset+0x6a>
 801ffce:	f04f 0301 	mov.w	r3, #1
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	d002      	beq.n	801ffdc <d_call_offset+0x74>
 801ffd6:	f04f 0300 	mov.w	r3, #0
 801ffda:	e01d      	b.n	8020018 <d_call_offset+0xb0>
 801ffdc:	6878      	ldr	r0, [r7, #4]
 801ffde:	f7ff fb53 	bl	801f688 <d_number>
 801ffe2:	e002      	b.n	801ffea <d_call_offset+0x82>
 801ffe4:	f04f 0300 	mov.w	r3, #0
 801ffe8:	e016      	b.n	8020018 <d_call_offset+0xb0>
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	68db      	ldr	r3, [r3, #12]
 801ffee:	781b      	ldrb	r3, [r3, #0]
 801fff0:	2b5f      	cmp	r3, #95	; 0x5f
 801fff2:	d108      	bne.n	8020006 <d_call_offset+0x9e>
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	68db      	ldr	r3, [r3, #12]
 801fff8:	f103 0201 	add.w	r2, r3, #1
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	60da      	str	r2, [r3, #12]
 8020000:	f04f 0300 	mov.w	r3, #0
 8020004:	e001      	b.n	802000a <d_call_offset+0xa2>
 8020006:	f04f 0301 	mov.w	r3, #1
 802000a:	2b00      	cmp	r3, #0
 802000c:	d002      	beq.n	8020014 <d_call_offset+0xac>
 802000e:	f04f 0300 	mov.w	r3, #0
 8020012:	e001      	b.n	8020018 <d_call_offset+0xb0>
 8020014:	f04f 0301 	mov.w	r3, #1
 8020018:	4618      	mov	r0, r3
 802001a:	f107 0708 	add.w	r7, r7, #8
 802001e:	46bd      	mov	sp, r7
 8020020:	bd80      	pop	{r7, pc}
 8020022:	bf00      	nop

08020024 <d_ctor_dtor_name>:
 8020024:	b580      	push	{r7, lr}
 8020026:	b084      	sub	sp, #16
 8020028:	af00      	add	r7, sp, #0
 802002a:	6078      	str	r0, [r7, #4]
 802002c:	687b      	ldr	r3, [r7, #4]
 802002e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020030:	2b00      	cmp	r3, #0
 8020032:	d01a      	beq.n	802006a <d_ctor_dtor_name+0x46>
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020038:	781b      	ldrb	r3, [r3, #0]
 802003a:	2b00      	cmp	r3, #0
 802003c:	d108      	bne.n	8020050 <d_ctor_dtor_name+0x2c>
 802003e:	687b      	ldr	r3, [r7, #4]
 8020040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020046:	689b      	ldr	r3, [r3, #8]
 8020048:	18d2      	adds	r2, r2, r3
 802004a:	687b      	ldr	r3, [r7, #4]
 802004c:	631a      	str	r2, [r3, #48]	; 0x30
 802004e:	e00c      	b.n	802006a <d_ctor_dtor_name+0x46>
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020054:	781b      	ldrb	r3, [r3, #0]
 8020056:	2b16      	cmp	r3, #22
 8020058:	d107      	bne.n	802006a <d_ctor_dtor_name+0x46>
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802005e:	687b      	ldr	r3, [r7, #4]
 8020060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020062:	689b      	ldr	r3, [r3, #8]
 8020064:	18d2      	adds	r2, r2, r3
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	631a      	str	r2, [r3, #48]	; 0x30
 802006a:	687b      	ldr	r3, [r7, #4]
 802006c:	68db      	ldr	r3, [r3, #12]
 802006e:	781b      	ldrb	r3, [r3, #0]
 8020070:	2b43      	cmp	r3, #67	; 0x43
 8020072:	d002      	beq.n	802007a <d_ctor_dtor_name+0x56>
 8020074:	2b44      	cmp	r3, #68	; 0x44
 8020076:	d02a      	beq.n	80200ce <d_ctor_dtor_name+0xaa>
 8020078:	e053      	b.n	8020122 <d_ctor_dtor_name+0xfe>
 802007a:	687b      	ldr	r3, [r7, #4]
 802007c:	68db      	ldr	r3, [r3, #12]
 802007e:	f103 0301 	add.w	r3, r3, #1
 8020082:	781b      	ldrb	r3, [r3, #0]
 8020084:	2b32      	cmp	r3, #50	; 0x32
 8020086:	d007      	beq.n	8020098 <d_ctor_dtor_name+0x74>
 8020088:	2b33      	cmp	r3, #51	; 0x33
 802008a:	d009      	beq.n	80200a0 <d_ctor_dtor_name+0x7c>
 802008c:	2b31      	cmp	r3, #49	; 0x31
 802008e:	d10b      	bne.n	80200a8 <d_ctor_dtor_name+0x84>
 8020090:	f04f 0301 	mov.w	r3, #1
 8020094:	73fb      	strb	r3, [r7, #15]
 8020096:	e00a      	b.n	80200ae <d_ctor_dtor_name+0x8a>
 8020098:	f04f 0302 	mov.w	r3, #2
 802009c:	73fb      	strb	r3, [r7, #15]
 802009e:	e006      	b.n	80200ae <d_ctor_dtor_name+0x8a>
 80200a0:	f04f 0303 	mov.w	r3, #3
 80200a4:	73fb      	strb	r3, [r7, #15]
 80200a6:	e002      	b.n	80200ae <d_ctor_dtor_name+0x8a>
 80200a8:	f04f 0300 	mov.w	r3, #0
 80200ac:	e03b      	b.n	8020126 <d_ctor_dtor_name+0x102>
 80200ae:	687b      	ldr	r3, [r7, #4]
 80200b0:	68db      	ldr	r3, [r3, #12]
 80200b2:	f103 0202 	add.w	r2, r3, #2
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	60da      	str	r2, [r3, #12]
 80200ba:	687b      	ldr	r3, [r7, #4]
 80200bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80200be:	7bfa      	ldrb	r2, [r7, #15]
 80200c0:	6878      	ldr	r0, [r7, #4]
 80200c2:	4611      	mov	r1, r2
 80200c4:	461a      	mov	r2, r3
 80200c6:	f7fe fe6f 	bl	801eda8 <d_make_ctor>
 80200ca:	4603      	mov	r3, r0
 80200cc:	e02b      	b.n	8020126 <d_ctor_dtor_name+0x102>
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	68db      	ldr	r3, [r3, #12]
 80200d2:	f103 0301 	add.w	r3, r3, #1
 80200d6:	781b      	ldrb	r3, [r3, #0]
 80200d8:	2b31      	cmp	r3, #49	; 0x31
 80200da:	d007      	beq.n	80200ec <d_ctor_dtor_name+0xc8>
 80200dc:	2b32      	cmp	r3, #50	; 0x32
 80200de:	d009      	beq.n	80200f4 <d_ctor_dtor_name+0xd0>
 80200e0:	2b30      	cmp	r3, #48	; 0x30
 80200e2:	d10b      	bne.n	80200fc <d_ctor_dtor_name+0xd8>
 80200e4:	f04f 0301 	mov.w	r3, #1
 80200e8:	73bb      	strb	r3, [r7, #14]
 80200ea:	e00a      	b.n	8020102 <d_ctor_dtor_name+0xde>
 80200ec:	f04f 0302 	mov.w	r3, #2
 80200f0:	73bb      	strb	r3, [r7, #14]
 80200f2:	e006      	b.n	8020102 <d_ctor_dtor_name+0xde>
 80200f4:	f04f 0303 	mov.w	r3, #3
 80200f8:	73bb      	strb	r3, [r7, #14]
 80200fa:	e002      	b.n	8020102 <d_ctor_dtor_name+0xde>
 80200fc:	f04f 0300 	mov.w	r3, #0
 8020100:	e011      	b.n	8020126 <d_ctor_dtor_name+0x102>
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	68db      	ldr	r3, [r3, #12]
 8020106:	f103 0202 	add.w	r2, r3, #2
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	60da      	str	r2, [r3, #12]
 802010e:	687b      	ldr	r3, [r7, #4]
 8020110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020112:	7bba      	ldrb	r2, [r7, #14]
 8020114:	6878      	ldr	r0, [r7, #4]
 8020116:	4611      	mov	r1, r2
 8020118:	461a      	mov	r2, r3
 802011a:	f7fe fe63 	bl	801ede4 <d_make_dtor>
 802011e:	4603      	mov	r3, r0
 8020120:	e001      	b.n	8020126 <d_ctor_dtor_name+0x102>
 8020122:	f04f 0300 	mov.w	r3, #0
 8020126:	4618      	mov	r0, r3
 8020128:	f107 0710 	add.w	r7, r7, #16
 802012c:	46bd      	mov	sp, r7
 802012e:	bd80      	pop	{r7, pc}

08020130 <d_type>:
 8020130:	b590      	push	{r4, r7, lr}
 8020132:	b087      	sub	sp, #28
 8020134:	af00      	add	r7, sp, #0
 8020136:	6078      	str	r0, [r7, #4]
 8020138:	687b      	ldr	r3, [r7, #4]
 802013a:	68db      	ldr	r3, [r3, #12]
 802013c:	781b      	ldrb	r3, [r3, #0]
 802013e:	74fb      	strb	r3, [r7, #19]
 8020140:	7cfb      	ldrb	r3, [r7, #19]
 8020142:	2b72      	cmp	r3, #114	; 0x72
 8020144:	d005      	beq.n	8020152 <d_type+0x22>
 8020146:	7cfb      	ldrb	r3, [r7, #19]
 8020148:	2b56      	cmp	r3, #86	; 0x56
 802014a:	d002      	beq.n	8020152 <d_type+0x22>
 802014c:	7cfb      	ldrb	r3, [r7, #19]
 802014e:	2b4b      	cmp	r3, #75	; 0x4b
 8020150:	d126      	bne.n	80201a0 <d_type+0x70>
 8020152:	f107 0308 	add.w	r3, r7, #8
 8020156:	6878      	ldr	r0, [r7, #4]
 8020158:	4619      	mov	r1, r3
 802015a:	f04f 0200 	mov.w	r2, #0
 802015e:	f000 fba3 	bl	80208a8 <d_cv_qualifiers>
 8020162:	4603      	mov	r3, r0
 8020164:	60fb      	str	r3, [r7, #12]
 8020166:	68fb      	ldr	r3, [r7, #12]
 8020168:	2b00      	cmp	r3, #0
 802016a:	d102      	bne.n	8020172 <d_type+0x42>
 802016c:	f04f 0300 	mov.w	r3, #0
 8020170:	e386      	b.n	8020880 <d_type+0x750>
 8020172:	6878      	ldr	r0, [r7, #4]
 8020174:	f7ff ffdc 	bl	8020130 <d_type>
 8020178:	4602      	mov	r2, r0
 802017a:	68fb      	ldr	r3, [r7, #12]
 802017c:	601a      	str	r2, [r3, #0]
 802017e:	68fb      	ldr	r3, [r7, #12]
 8020180:	681b      	ldr	r3, [r3, #0]
 8020182:	2b00      	cmp	r3, #0
 8020184:	d007      	beq.n	8020196 <d_type+0x66>
 8020186:	68bb      	ldr	r3, [r7, #8]
 8020188:	6878      	ldr	r0, [r7, #4]
 802018a:	4619      	mov	r1, r3
 802018c:	f001 fc14 	bl	80219b8 <d_add_substitution>
 8020190:	4603      	mov	r3, r0
 8020192:	2b00      	cmp	r3, #0
 8020194:	d102      	bne.n	802019c <d_type+0x6c>
 8020196:	f04f 0300 	mov.w	r3, #0
 802019a:	e371      	b.n	8020880 <d_type+0x750>
 802019c:	68bb      	ldr	r3, [r7, #8]
 802019e:	e36f      	b.n	8020880 <d_type+0x750>
 80201a0:	f04f 0301 	mov.w	r3, #1
 80201a4:	617b      	str	r3, [r7, #20]
 80201a6:	7cfb      	ldrb	r3, [r7, #19]
 80201a8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80201ac:	2b4a      	cmp	r3, #74	; 0x4a
 80201ae:	f200 8352 	bhi.w	8020856 <d_type+0x726>
 80201b2:	a201      	add	r2, pc, #4	; (adr r2, 80201b8 <d_type+0x88>)
 80201b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80201b8:	0802036b 	.word	0x0802036b
 80201bc:	0802036b 	.word	0x0802036b
 80201c0:	0802036b 	.word	0x0802036b
 80201c4:	0802036b 	.word	0x0802036b
 80201c8:	0802036b 	.word	0x0802036b
 80201cc:	0802036b 	.word	0x0802036b
 80201d0:	0802036b 	.word	0x0802036b
 80201d4:	0802036b 	.word	0x0802036b
 80201d8:	0802036b 	.word	0x0802036b
 80201dc:	0802036b 	.word	0x0802036b
 80201e0:	08020857 	.word	0x08020857
 80201e4:	08020857 	.word	0x08020857
 80201e8:	08020857 	.word	0x08020857
 80201ec:	08020857 	.word	0x08020857
 80201f0:	08020857 	.word	0x08020857
 80201f4:	08020857 	.word	0x08020857
 80201f8:	08020857 	.word	0x08020857
 80201fc:	08020377 	.word	0x08020377
 8020200:	08020857 	.word	0x08020857
 8020204:	080204dd 	.word	0x080204dd
 8020208:	08020561 	.word	0x08020561
 802020c:	08020857 	.word	0x08020857
 8020210:	0802035f 	.word	0x0802035f
 8020214:	08020507 	.word	0x08020507
 8020218:	08020857 	.word	0x08020857
 802021c:	08020857 	.word	0x08020857
 8020220:	08020857 	.word	0x08020857
 8020224:	08020857 	.word	0x08020857
 8020228:	08020857 	.word	0x08020857
 802022c:	08020383 	.word	0x08020383
 8020230:	0802036b 	.word	0x0802036b
 8020234:	0802045f 	.word	0x0802045f
 8020238:	08020489 	.word	0x08020489
 802023c:	08020857 	.word	0x08020857
 8020240:	080204b3 	.word	0x080204b3
 8020244:	080203d7 	.word	0x080203d7
 8020248:	0802038f 	.word	0x0802038f
 802024c:	08020531 	.word	0x08020531
 8020250:	08020857 	.word	0x08020857
 8020254:	08020857 	.word	0x08020857
 8020258:	08020857 	.word	0x08020857
 802025c:	08020857 	.word	0x08020857
 8020260:	0802036b 	.word	0x0802036b
 8020264:	08020857 	.word	0x08020857
 8020268:	08020857 	.word	0x08020857
 802026c:	08020857 	.word	0x08020857
 8020270:	08020857 	.word	0x08020857
 8020274:	08020857 	.word	0x08020857
 8020278:	08020857 	.word	0x08020857
 802027c:	080202e5 	.word	0x080202e5
 8020280:	080202e5 	.word	0x080202e5
 8020284:	080202e5 	.word	0x080202e5
 8020288:	080202e5 	.word	0x080202e5
 802028c:	080202e5 	.word	0x080202e5
 8020290:	080202e5 	.word	0x080202e5
 8020294:	080202e5 	.word	0x080202e5
 8020298:	080202e5 	.word	0x080202e5
 802029c:	080202e5 	.word	0x080202e5
 80202a0:	080202e5 	.word	0x080202e5
 80202a4:	08020857 	.word	0x08020857
 80202a8:	080202e5 	.word	0x080202e5
 80202ac:	080202e5 	.word	0x080202e5
 80202b0:	080202e5 	.word	0x080202e5
 80202b4:	080202e5 	.word	0x080202e5
 80202b8:	08020857 	.word	0x08020857
 80202bc:	08020857 	.word	0x08020857
 80202c0:	08020857 	.word	0x08020857
 80202c4:	080202e5 	.word	0x080202e5
 80202c8:	080202e5 	.word	0x080202e5
 80202cc:	08020335 	.word	0x08020335
 80202d0:	080202e5 	.word	0x080202e5
 80202d4:	080202e5 	.word	0x080202e5
 80202d8:	080202e5 	.word	0x080202e5
 80202dc:	080202e5 	.word	0x080202e5
 80202e0:	080202e5 	.word	0x080202e5
 80202e4:	7cfa      	ldrb	r2, [r7, #19]
 80202e6:	4613      	mov	r3, r2
 80202e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80202ec:	189b      	adds	r3, r3, r2
 80202ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80202f2:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 80202f6:	f1a2 0204 	sub.w	r2, r2, #4
 80202fa:	f64d 3390 	movw	r3, #56208	; 0xdb90
 80202fe:	f6c0 0302 	movt	r3, #2050	; 0x802
 8020302:	18d3      	adds	r3, r2, r3
 8020304:	6878      	ldr	r0, [r7, #4]
 8020306:	4619      	mov	r1, r3
 8020308:	f7fe fcda 	bl	801ecc0 <d_make_builtin_type>
 802030c:	4603      	mov	r3, r0
 802030e:	60bb      	str	r3, [r7, #8]
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020314:	68bb      	ldr	r3, [r7, #8]
 8020316:	685b      	ldr	r3, [r3, #4]
 8020318:	685b      	ldr	r3, [r3, #4]
 802031a:	18d2      	adds	r2, r2, r3
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	631a      	str	r2, [r3, #48]	; 0x30
 8020320:	f04f 0300 	mov.w	r3, #0
 8020324:	617b      	str	r3, [r7, #20]
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	68db      	ldr	r3, [r3, #12]
 802032a:	f103 0201 	add.w	r2, r3, #1
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	60da      	str	r2, [r3, #12]
 8020332:	e296      	b.n	8020862 <d_type+0x732>
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	68db      	ldr	r3, [r3, #12]
 8020338:	f103 0201 	add.w	r2, r3, #1
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	60da      	str	r2, [r3, #12]
 8020340:	6878      	ldr	r0, [r7, #4]
 8020342:	f7ff f983 	bl	801f64c <d_source_name>
 8020346:	4603      	mov	r3, r0
 8020348:	6878      	ldr	r0, [r7, #4]
 802034a:	f04f 0124 	mov.w	r1, #36	; 0x24
 802034e:	461a      	mov	r2, r3
 8020350:	f04f 0300 	mov.w	r3, #0
 8020354:	f7fe fb9e 	bl	801ea94 <d_make_comp>
 8020358:	4603      	mov	r3, r0
 802035a:	60bb      	str	r3, [r7, #8]
 802035c:	e281      	b.n	8020862 <d_type+0x732>
 802035e:	6878      	ldr	r0, [r7, #4]
 8020360:	f000 fb16 	bl	8020990 <d_function_type>
 8020364:	4603      	mov	r3, r0
 8020366:	60bb      	str	r3, [r7, #8]
 8020368:	e27b      	b.n	8020862 <d_type+0x732>
 802036a:	6878      	ldr	r0, [r7, #4]
 802036c:	f000 fbf6 	bl	8020b5c <d_class_enum_type>
 8020370:	4603      	mov	r3, r0
 8020372:	60bb      	str	r3, [r7, #8]
 8020374:	e275      	b.n	8020862 <d_type+0x732>
 8020376:	6878      	ldr	r0, [r7, #4]
 8020378:	f000 fbfe 	bl	8020b78 <d_array_type>
 802037c:	4603      	mov	r3, r0
 802037e:	60bb      	str	r3, [r7, #8]
 8020380:	e26f      	b.n	8020862 <d_type+0x732>
 8020382:	6878      	ldr	r0, [r7, #4]
 8020384:	f000 fcc0 	bl	8020d08 <d_pointer_to_member_type>
 8020388:	4603      	mov	r3, r0
 802038a:	60bb      	str	r3, [r7, #8]
 802038c:	e269      	b.n	8020862 <d_type+0x732>
 802038e:	6878      	ldr	r0, [r7, #4]
 8020390:	f000 fd50 	bl	8020e34 <d_template_param>
 8020394:	4603      	mov	r3, r0
 8020396:	60bb      	str	r3, [r7, #8]
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	68db      	ldr	r3, [r3, #12]
 802039c:	781b      	ldrb	r3, [r3, #0]
 802039e:	2b49      	cmp	r3, #73	; 0x49
 80203a0:	f040 825c 	bne.w	802085c <d_type+0x72c>
 80203a4:	68bb      	ldr	r3, [r7, #8]
 80203a6:	6878      	ldr	r0, [r7, #4]
 80203a8:	4619      	mov	r1, r3
 80203aa:	f001 fb05 	bl	80219b8 <d_add_substitution>
 80203ae:	4603      	mov	r3, r0
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	d102      	bne.n	80203ba <d_type+0x28a>
 80203b4:	f04f 0300 	mov.w	r3, #0
 80203b8:	e262      	b.n	8020880 <d_type+0x750>
 80203ba:	68bc      	ldr	r4, [r7, #8]
 80203bc:	6878      	ldr	r0, [r7, #4]
 80203be:	f000 fd6d 	bl	8020e9c <d_template_args>
 80203c2:	4603      	mov	r3, r0
 80203c4:	6878      	ldr	r0, [r7, #4]
 80203c6:	f04f 0104 	mov.w	r1, #4
 80203ca:	4622      	mov	r2, r4
 80203cc:	f7fe fb62 	bl	801ea94 <d_make_comp>
 80203d0:	4603      	mov	r3, r0
 80203d2:	60bb      	str	r3, [r7, #8]
 80203d4:	e242      	b.n	802085c <d_type+0x72c>
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	68db      	ldr	r3, [r3, #12]
 80203da:	785b      	ldrb	r3, [r3, #1]
 80203dc:	74bb      	strb	r3, [r7, #18]
 80203de:	7cbb      	ldrb	r3, [r7, #18]
 80203e0:	2b2f      	cmp	r3, #47	; 0x2f
 80203e2:	d902      	bls.n	80203ea <d_type+0x2ba>
 80203e4:	7cbb      	ldrb	r3, [r7, #18]
 80203e6:	2b39      	cmp	r3, #57	; 0x39
 80203e8:	d908      	bls.n	80203fc <d_type+0x2cc>
 80203ea:	7cbb      	ldrb	r3, [r7, #18]
 80203ec:	2b5f      	cmp	r3, #95	; 0x5f
 80203ee:	d005      	beq.n	80203fc <d_type+0x2cc>
 80203f0:	7cbb      	ldrb	r3, [r7, #18]
 80203f2:	2b40      	cmp	r3, #64	; 0x40
 80203f4:	d920      	bls.n	8020438 <d_type+0x308>
 80203f6:	7cbb      	ldrb	r3, [r7, #18]
 80203f8:	2b5a      	cmp	r3, #90	; 0x5a
 80203fa:	d81d      	bhi.n	8020438 <d_type+0x308>
 80203fc:	6878      	ldr	r0, [r7, #4]
 80203fe:	f04f 0100 	mov.w	r1, #0
 8020402:	f001 fb05 	bl	8021a10 <d_substitution>
 8020406:	4603      	mov	r3, r0
 8020408:	60bb      	str	r3, [r7, #8]
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	68db      	ldr	r3, [r3, #12]
 802040e:	781b      	ldrb	r3, [r3, #0]
 8020410:	2b49      	cmp	r3, #73	; 0x49
 8020412:	d10d      	bne.n	8020430 <d_type+0x300>
 8020414:	68bc      	ldr	r4, [r7, #8]
 8020416:	6878      	ldr	r0, [r7, #4]
 8020418:	f000 fd40 	bl	8020e9c <d_template_args>
 802041c:	4603      	mov	r3, r0
 802041e:	6878      	ldr	r0, [r7, #4]
 8020420:	f04f 0104 	mov.w	r1, #4
 8020424:	4622      	mov	r2, r4
 8020426:	f7fe fb35 	bl	801ea94 <d_make_comp>
 802042a:	4603      	mov	r3, r0
 802042c:	60bb      	str	r3, [r7, #8]
 802042e:	e015      	b.n	802045c <d_type+0x32c>
 8020430:	f04f 0300 	mov.w	r3, #0
 8020434:	617b      	str	r3, [r7, #20]
 8020436:	e011      	b.n	802045c <d_type+0x32c>
 8020438:	6878      	ldr	r0, [r7, #4]
 802043a:	f000 fb8f 	bl	8020b5c <d_class_enum_type>
 802043e:	4603      	mov	r3, r0
 8020440:	60bb      	str	r3, [r7, #8]
 8020442:	68bb      	ldr	r3, [r7, #8]
 8020444:	2b00      	cmp	r3, #0
 8020446:	f000 820b 	beq.w	8020860 <d_type+0x730>
 802044a:	68bb      	ldr	r3, [r7, #8]
 802044c:	781b      	ldrb	r3, [r3, #0]
 802044e:	2b16      	cmp	r3, #22
 8020450:	f040 8206 	bne.w	8020860 <d_type+0x730>
 8020454:	f04f 0300 	mov.w	r3, #0
 8020458:	617b      	str	r3, [r7, #20]
 802045a:	e201      	b.n	8020860 <d_type+0x730>
 802045c:	e200      	b.n	8020860 <d_type+0x730>
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	68db      	ldr	r3, [r3, #12]
 8020462:	f103 0201 	add.w	r2, r3, #1
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	60da      	str	r2, [r3, #12]
 802046a:	6878      	ldr	r0, [r7, #4]
 802046c:	f7ff fe60 	bl	8020130 <d_type>
 8020470:	4603      	mov	r3, r0
 8020472:	6878      	ldr	r0, [r7, #4]
 8020474:	f04f 0120 	mov.w	r1, #32
 8020478:	461a      	mov	r2, r3
 802047a:	f04f 0300 	mov.w	r3, #0
 802047e:	f7fe fb09 	bl	801ea94 <d_make_comp>
 8020482:	4603      	mov	r3, r0
 8020484:	60bb      	str	r3, [r7, #8]
 8020486:	e1ec      	b.n	8020862 <d_type+0x732>
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	68db      	ldr	r3, [r3, #12]
 802048c:	f103 0201 	add.w	r2, r3, #1
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	60da      	str	r2, [r3, #12]
 8020494:	6878      	ldr	r0, [r7, #4]
 8020496:	f7ff fe4b 	bl	8020130 <d_type>
 802049a:	4603      	mov	r3, r0
 802049c:	6878      	ldr	r0, [r7, #4]
 802049e:	f04f 011e 	mov.w	r1, #30
 80204a2:	461a      	mov	r2, r3
 80204a4:	f04f 0300 	mov.w	r3, #0
 80204a8:	f7fe faf4 	bl	801ea94 <d_make_comp>
 80204ac:	4603      	mov	r3, r0
 80204ae:	60bb      	str	r3, [r7, #8]
 80204b0:	e1d7      	b.n	8020862 <d_type+0x732>
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	68db      	ldr	r3, [r3, #12]
 80204b6:	f103 0201 	add.w	r2, r3, #1
 80204ba:	687b      	ldr	r3, [r7, #4]
 80204bc:	60da      	str	r2, [r3, #12]
 80204be:	6878      	ldr	r0, [r7, #4]
 80204c0:	f7ff fe36 	bl	8020130 <d_type>
 80204c4:	4603      	mov	r3, r0
 80204c6:	6878      	ldr	r0, [r7, #4]
 80204c8:	f04f 011f 	mov.w	r1, #31
 80204cc:	461a      	mov	r2, r3
 80204ce:	f04f 0300 	mov.w	r3, #0
 80204d2:	f7fe fadf 	bl	801ea94 <d_make_comp>
 80204d6:	4603      	mov	r3, r0
 80204d8:	60bb      	str	r3, [r7, #8]
 80204da:	e1c2      	b.n	8020862 <d_type+0x732>
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	68db      	ldr	r3, [r3, #12]
 80204e0:	f103 0201 	add.w	r2, r3, #1
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	60da      	str	r2, [r3, #12]
 80204e8:	6878      	ldr	r0, [r7, #4]
 80204ea:	f7ff fe21 	bl	8020130 <d_type>
 80204ee:	4603      	mov	r3, r0
 80204f0:	6878      	ldr	r0, [r7, #4]
 80204f2:	f04f 0121 	mov.w	r1, #33	; 0x21
 80204f6:	461a      	mov	r2, r3
 80204f8:	f04f 0300 	mov.w	r3, #0
 80204fc:	f7fe faca 	bl	801ea94 <d_make_comp>
 8020500:	4603      	mov	r3, r0
 8020502:	60bb      	str	r3, [r7, #8]
 8020504:	e1ad      	b.n	8020862 <d_type+0x732>
 8020506:	687b      	ldr	r3, [r7, #4]
 8020508:	68db      	ldr	r3, [r3, #12]
 802050a:	f103 0201 	add.w	r2, r3, #1
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	60da      	str	r2, [r3, #12]
 8020512:	6878      	ldr	r0, [r7, #4]
 8020514:	f7ff fe0c 	bl	8020130 <d_type>
 8020518:	4603      	mov	r3, r0
 802051a:	6878      	ldr	r0, [r7, #4]
 802051c:	f04f 0122 	mov.w	r1, #34	; 0x22
 8020520:	461a      	mov	r2, r3
 8020522:	f04f 0300 	mov.w	r3, #0
 8020526:	f7fe fab5 	bl	801ea94 <d_make_comp>
 802052a:	4603      	mov	r3, r0
 802052c:	60bb      	str	r3, [r7, #8]
 802052e:	e198      	b.n	8020862 <d_type+0x732>
 8020530:	687b      	ldr	r3, [r7, #4]
 8020532:	68db      	ldr	r3, [r3, #12]
 8020534:	f103 0201 	add.w	r2, r3, #1
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	60da      	str	r2, [r3, #12]
 802053c:	6878      	ldr	r0, [r7, #4]
 802053e:	f7ff f885 	bl	801f64c <d_source_name>
 8020542:	4603      	mov	r3, r0
 8020544:	60bb      	str	r3, [r7, #8]
 8020546:	6878      	ldr	r0, [r7, #4]
 8020548:	f7ff fdf2 	bl	8020130 <d_type>
 802054c:	4602      	mov	r2, r0
 802054e:	68bb      	ldr	r3, [r7, #8]
 8020550:	6878      	ldr	r0, [r7, #4]
 8020552:	f04f 011d 	mov.w	r1, #29
 8020556:	f7fe fa9d 	bl	801ea94 <d_make_comp>
 802055a:	4603      	mov	r3, r0
 802055c:	60bb      	str	r3, [r7, #8]
 802055e:	e180      	b.n	8020862 <d_type+0x732>
 8020560:	f04f 0300 	mov.w	r3, #0
 8020564:	617b      	str	r3, [r7, #20]
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	68db      	ldr	r3, [r3, #12]
 802056a:	f103 0201 	add.w	r2, r3, #1
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	60da      	str	r2, [r3, #12]
 8020572:	687b      	ldr	r3, [r7, #4]
 8020574:	68db      	ldr	r3, [r3, #12]
 8020576:	781b      	ldrb	r3, [r3, #0]
 8020578:	2b00      	cmp	r3, #0
 802057a:	d007      	beq.n	802058c <d_type+0x45c>
 802057c:	687b      	ldr	r3, [r7, #4]
 802057e:	68da      	ldr	r2, [r3, #12]
 8020580:	7813      	ldrb	r3, [r2, #0]
 8020582:	f102 0101 	add.w	r1, r2, #1
 8020586:	687a      	ldr	r2, [r7, #4]
 8020588:	60d1      	str	r1, [r2, #12]
 802058a:	e001      	b.n	8020590 <d_type+0x460>
 802058c:	f04f 0300 	mov.w	r3, #0
 8020590:	74fb      	strb	r3, [r7, #19]
 8020592:	7cfb      	ldrb	r3, [r7, #19]
 8020594:	f1a3 0346 	sub.w	r3, r3, #70	; 0x46
 8020598:	2b30      	cmp	r3, #48	; 0x30
 802059a:	f200 8157 	bhi.w	802084c <d_type+0x71c>
 802059e:	a201      	add	r2, pc, #4	; (adr r2, 80205a4 <d_type+0x474>)
 80205a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205a4:	0802078f 	.word	0x0802078f
 80205a8:	0802084d 	.word	0x0802084d
 80205ac:	0802084d 	.word	0x0802084d
 80205b0:	0802084d 	.word	0x0802084d
 80205b4:	0802084d 	.word	0x0802084d
 80205b8:	0802084d 	.word	0x0802084d
 80205bc:	0802084d 	.word	0x0802084d
 80205c0:	0802084d 	.word	0x0802084d
 80205c4:	0802084d 	.word	0x0802084d
 80205c8:	0802084d 	.word	0x0802084d
 80205cc:	0802084d 	.word	0x0802084d
 80205d0:	0802084d 	.word	0x0802084d
 80205d4:	0802084d 	.word	0x0802084d
 80205d8:	0802084d 	.word	0x0802084d
 80205dc:	08020669 	.word	0x08020669
 80205e0:	0802084d 	.word	0x0802084d
 80205e4:	0802084d 	.word	0x0802084d
 80205e8:	0802084d 	.word	0x0802084d
 80205ec:	0802084d 	.word	0x0802084d
 80205f0:	0802084d 	.word	0x0802084d
 80205f4:	0802084d 	.word	0x0802084d
 80205f8:	0802084d 	.word	0x0802084d
 80205fc:	0802084d 	.word	0x0802084d
 8020600:	0802084d 	.word	0x0802084d
 8020604:	0802084d 	.word	0x0802084d
 8020608:	0802084d 	.word	0x0802084d
 802060c:	0802084d 	.word	0x0802084d
 8020610:	0802084d 	.word	0x0802084d
 8020614:	0802084d 	.word	0x0802084d
 8020618:	0802084d 	.word	0x0802084d
 802061c:	080206f9 	.word	0x080206f9
 8020620:	08020717 	.word	0x08020717
 8020624:	080206db 	.word	0x080206db
 8020628:	0802084d 	.word	0x0802084d
 802062c:	08020735 	.word	0x08020735
 8020630:	08020771 	.word	0x08020771
 8020634:	0802084d 	.word	0x0802084d
 8020638:	0802084d 	.word	0x0802084d
 802063c:	0802084d 	.word	0x0802084d
 8020640:	0802084d 	.word	0x0802084d
 8020644:	0802082f 	.word	0x0802082f
 8020648:	0802084d 	.word	0x0802084d
 802064c:	080206bd 	.word	0x080206bd
 8020650:	0802084d 	.word	0x0802084d
 8020654:	0802084d 	.word	0x0802084d
 8020658:	08020753 	.word	0x08020753
 802065c:	08020669 	.word	0x08020669
 8020660:	0802084d 	.word	0x0802084d
 8020664:	08020823 	.word	0x08020823
 8020668:	6878      	ldr	r0, [r7, #4]
 802066a:	f000 fd23 	bl	80210b4 <d_expression>
 802066e:	4603      	mov	r3, r0
 8020670:	6878      	ldr	r0, [r7, #4]
 8020672:	f04f 013b 	mov.w	r1, #59	; 0x3b
 8020676:	461a      	mov	r2, r3
 8020678:	f04f 0300 	mov.w	r3, #0
 802067c:	f7fe fa0a 	bl	801ea94 <d_make_comp>
 8020680:	4603      	mov	r3, r0
 8020682:	60bb      	str	r3, [r7, #8]
 8020684:	68bb      	ldr	r3, [r7, #8]
 8020686:	2b00      	cmp	r3, #0
 8020688:	f000 80e3 	beq.w	8020852 <d_type+0x722>
 802068c:	687b      	ldr	r3, [r7, #4]
 802068e:	68db      	ldr	r3, [r3, #12]
 8020690:	781b      	ldrb	r3, [r3, #0]
 8020692:	2b00      	cmp	r3, #0
 8020694:	d00e      	beq.n	80206b4 <d_type+0x584>
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	68db      	ldr	r3, [r3, #12]
 802069a:	781a      	ldrb	r2, [r3, #0]
 802069c:	2a45      	cmp	r2, #69	; 0x45
 802069e:	bf0c      	ite	eq
 80206a0:	2200      	moveq	r2, #0
 80206a2:	2201      	movne	r2, #1
 80206a4:	b2d2      	uxtb	r2, r2
 80206a6:	f103 0101 	add.w	r1, r3, #1
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	60d9      	str	r1, [r3, #12]
 80206ae:	2a00      	cmp	r2, #0
 80206b0:	f000 80cf 	beq.w	8020852 <d_type+0x722>
 80206b4:	f04f 0300 	mov.w	r3, #0
 80206b8:	60bb      	str	r3, [r7, #8]
 80206ba:	e0ca      	b.n	8020852 <d_type+0x722>
 80206bc:	6878      	ldr	r0, [r7, #4]
 80206be:	f7ff fd37 	bl	8020130 <d_type>
 80206c2:	4603      	mov	r3, r0
 80206c4:	6878      	ldr	r0, [r7, #4]
 80206c6:	f04f 0141 	mov.w	r1, #65	; 0x41
 80206ca:	461a      	mov	r2, r3
 80206cc:	f04f 0300 	mov.w	r3, #0
 80206d0:	f7fe f9e0 	bl	801ea94 <d_make_comp>
 80206d4:	4603      	mov	r3, r0
 80206d6:	60bb      	str	r3, [r7, #8]
 80206d8:	e0bc      	b.n	8020854 <d_type+0x724>
 80206da:	6878      	ldr	r0, [r7, #4]
 80206dc:	496b      	ldr	r1, [pc, #428]	; (802088c <d_type+0x75c>)
 80206de:	f7fe faef 	bl	801ecc0 <d_make_builtin_type>
 80206e2:	4603      	mov	r3, r0
 80206e4:	60bb      	str	r3, [r7, #8]
 80206e6:	687b      	ldr	r3, [r7, #4]
 80206e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206ea:	68bb      	ldr	r3, [r7, #8]
 80206ec:	685b      	ldr	r3, [r3, #4]
 80206ee:	685b      	ldr	r3, [r3, #4]
 80206f0:	18d2      	adds	r2, r2, r3
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	631a      	str	r2, [r3, #48]	; 0x30
 80206f6:	e0ad      	b.n	8020854 <d_type+0x724>
 80206f8:	6878      	ldr	r0, [r7, #4]
 80206fa:	4965      	ldr	r1, [pc, #404]	; (8020890 <d_type+0x760>)
 80206fc:	f7fe fae0 	bl	801ecc0 <d_make_builtin_type>
 8020700:	4603      	mov	r3, r0
 8020702:	60bb      	str	r3, [r7, #8]
 8020704:	687b      	ldr	r3, [r7, #4]
 8020706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020708:	68bb      	ldr	r3, [r7, #8]
 802070a:	685b      	ldr	r3, [r3, #4]
 802070c:	685b      	ldr	r3, [r3, #4]
 802070e:	18d2      	adds	r2, r2, r3
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	631a      	str	r2, [r3, #48]	; 0x30
 8020714:	e09e      	b.n	8020854 <d_type+0x724>
 8020716:	6878      	ldr	r0, [r7, #4]
 8020718:	495e      	ldr	r1, [pc, #376]	; (8020894 <d_type+0x764>)
 802071a:	f7fe fad1 	bl	801ecc0 <d_make_builtin_type>
 802071e:	4603      	mov	r3, r0
 8020720:	60bb      	str	r3, [r7, #8]
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020726:	68bb      	ldr	r3, [r7, #8]
 8020728:	685b      	ldr	r3, [r3, #4]
 802072a:	685b      	ldr	r3, [r3, #4]
 802072c:	18d2      	adds	r2, r2, r3
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	631a      	str	r2, [r3, #48]	; 0x30
 8020732:	e08f      	b.n	8020854 <d_type+0x724>
 8020734:	6878      	ldr	r0, [r7, #4]
 8020736:	4958      	ldr	r1, [pc, #352]	; (8020898 <d_type+0x768>)
 8020738:	f7fe fac2 	bl	801ecc0 <d_make_builtin_type>
 802073c:	4603      	mov	r3, r0
 802073e:	60bb      	str	r3, [r7, #8]
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020744:	68bb      	ldr	r3, [r7, #8]
 8020746:	685b      	ldr	r3, [r3, #4]
 8020748:	685b      	ldr	r3, [r3, #4]
 802074a:	18d2      	adds	r2, r2, r3
 802074c:	687b      	ldr	r3, [r7, #4]
 802074e:	631a      	str	r2, [r3, #48]	; 0x30
 8020750:	e080      	b.n	8020854 <d_type+0x724>
 8020752:	6878      	ldr	r0, [r7, #4]
 8020754:	4951      	ldr	r1, [pc, #324]	; (802089c <d_type+0x76c>)
 8020756:	f7fe fab3 	bl	801ecc0 <d_make_builtin_type>
 802075a:	4603      	mov	r3, r0
 802075c:	60bb      	str	r3, [r7, #8]
 802075e:	687b      	ldr	r3, [r7, #4]
 8020760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020762:	68bb      	ldr	r3, [r7, #8]
 8020764:	685b      	ldr	r3, [r3, #4]
 8020766:	685b      	ldr	r3, [r3, #4]
 8020768:	18d2      	adds	r2, r2, r3
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	631a      	str	r2, [r3, #48]	; 0x30
 802076e:	e071      	b.n	8020854 <d_type+0x724>
 8020770:	6878      	ldr	r0, [r7, #4]
 8020772:	494b      	ldr	r1, [pc, #300]	; (80208a0 <d_type+0x770>)
 8020774:	f7fe faa4 	bl	801ecc0 <d_make_builtin_type>
 8020778:	4603      	mov	r3, r0
 802077a:	60bb      	str	r3, [r7, #8]
 802077c:	687b      	ldr	r3, [r7, #4]
 802077e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020780:	68bb      	ldr	r3, [r7, #8]
 8020782:	685b      	ldr	r3, [r3, #4]
 8020784:	685b      	ldr	r3, [r3, #4]
 8020786:	18d2      	adds	r2, r2, r3
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	631a      	str	r2, [r3, #48]	; 0x30
 802078c:	e062      	b.n	8020854 <d_type+0x724>
 802078e:	6878      	ldr	r0, [r7, #4]
 8020790:	f7fe f958 	bl	801ea44 <d_make_empty>
 8020794:	4603      	mov	r3, r0
 8020796:	60bb      	str	r3, [r7, #8]
 8020798:	68bb      	ldr	r3, [r7, #8]
 802079a:	f04f 0228 	mov.w	r2, #40	; 0x28
 802079e:	701a      	strb	r2, [r3, #0]
 80207a0:	68bb      	ldr	r3, [r7, #8]
 80207a2:	687a      	ldr	r2, [r7, #4]
 80207a4:	68d2      	ldr	r2, [r2, #12]
 80207a6:	7812      	ldrb	r2, [r2, #0]
 80207a8:	2a2f      	cmp	r2, #47	; 0x2f
 80207aa:	d907      	bls.n	80207bc <d_type+0x68c>
 80207ac:	687a      	ldr	r2, [r7, #4]
 80207ae:	68d2      	ldr	r2, [r2, #12]
 80207b0:	7812      	ldrb	r2, [r2, #0]
 80207b2:	2a39      	cmp	r2, #57	; 0x39
 80207b4:	d802      	bhi.n	80207bc <d_type+0x68c>
 80207b6:	f04f 0201 	mov.w	r2, #1
 80207ba:	e001      	b.n	80207c0 <d_type+0x690>
 80207bc:	f04f 0200 	mov.w	r2, #0
 80207c0:	b292      	uxth	r2, r2
 80207c2:	811a      	strh	r2, [r3, #8]
 80207c4:	891b      	ldrh	r3, [r3, #8]
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d002      	beq.n	80207d0 <d_type+0x6a0>
 80207ca:	6878      	ldr	r0, [r7, #4]
 80207cc:	f7fe ff5c 	bl	801f688 <d_number>
 80207d0:	68bc      	ldr	r4, [r7, #8]
 80207d2:	6878      	ldr	r0, [r7, #4]
 80207d4:	f7ff fcac 	bl	8020130 <d_type>
 80207d8:	4603      	mov	r3, r0
 80207da:	6063      	str	r3, [r4, #4]
 80207dc:	68bb      	ldr	r3, [r7, #8]
 80207de:	685b      	ldr	r3, [r3, #4]
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d102      	bne.n	80207ea <d_type+0x6ba>
 80207e4:	f04f 0300 	mov.w	r3, #0
 80207e8:	e04a      	b.n	8020880 <d_type+0x750>
 80207ea:	6878      	ldr	r0, [r7, #4]
 80207ec:	f7fe ff4c 	bl	801f688 <d_number>
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	68db      	ldr	r3, [r3, #12]
 80207f4:	781b      	ldrb	r3, [r3, #0]
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	d007      	beq.n	802080a <d_type+0x6da>
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	68da      	ldr	r2, [r3, #12]
 80207fe:	7813      	ldrb	r3, [r2, #0]
 8020800:	f102 0101 	add.w	r1, r2, #1
 8020804:	687a      	ldr	r2, [r7, #4]
 8020806:	60d1      	str	r1, [r2, #12]
 8020808:	e001      	b.n	802080e <d_type+0x6de>
 802080a:	f04f 0300 	mov.w	r3, #0
 802080e:	74fb      	strb	r3, [r7, #19]
 8020810:	68bb      	ldr	r3, [r7, #8]
 8020812:	7cfa      	ldrb	r2, [r7, #19]
 8020814:	2a73      	cmp	r2, #115	; 0x73
 8020816:	bf14      	ite	ne
 8020818:	2200      	movne	r2, #0
 802081a:	2201      	moveq	r2, #1
 802081c:	b292      	uxth	r2, r2
 802081e:	815a      	strh	r2, [r3, #10]
 8020820:	e018      	b.n	8020854 <d_type+0x724>
 8020822:	6878      	ldr	r0, [r7, #4]
 8020824:	f000 fa28 	bl	8020c78 <d_vector_type>
 8020828:	4603      	mov	r3, r0
 802082a:	60bb      	str	r3, [r7, #8]
 802082c:	e012      	b.n	8020854 <d_type+0x724>
 802082e:	6878      	ldr	r0, [r7, #4]
 8020830:	491c      	ldr	r1, [pc, #112]	; (80208a4 <d_type+0x774>)
 8020832:	f7fe fa45 	bl	801ecc0 <d_make_builtin_type>
 8020836:	4603      	mov	r3, r0
 8020838:	60bb      	str	r3, [r7, #8]
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802083e:	68bb      	ldr	r3, [r7, #8]
 8020840:	685b      	ldr	r3, [r3, #4]
 8020842:	685b      	ldr	r3, [r3, #4]
 8020844:	18d2      	adds	r2, r2, r3
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	631a      	str	r2, [r3, #48]	; 0x30
 802084a:	e003      	b.n	8020854 <d_type+0x724>
 802084c:	f04f 0300 	mov.w	r3, #0
 8020850:	e016      	b.n	8020880 <d_type+0x750>
 8020852:	bf00      	nop
 8020854:	e005      	b.n	8020862 <d_type+0x732>
 8020856:	f04f 0300 	mov.w	r3, #0
 802085a:	e011      	b.n	8020880 <d_type+0x750>
 802085c:	bf00      	nop
 802085e:	e000      	b.n	8020862 <d_type+0x732>
 8020860:	bf00      	nop
 8020862:	697b      	ldr	r3, [r7, #20]
 8020864:	2b00      	cmp	r3, #0
 8020866:	d00a      	beq.n	802087e <d_type+0x74e>
 8020868:	68bb      	ldr	r3, [r7, #8]
 802086a:	6878      	ldr	r0, [r7, #4]
 802086c:	4619      	mov	r1, r3
 802086e:	f001 f8a3 	bl	80219b8 <d_add_substitution>
 8020872:	4603      	mov	r3, r0
 8020874:	2b00      	cmp	r3, #0
 8020876:	d102      	bne.n	802087e <d_type+0x74e>
 8020878:	f04f 0300 	mov.w	r3, #0
 802087c:	e000      	b.n	8020880 <d_type+0x750>
 802087e:	68bb      	ldr	r3, [r7, #8]
 8020880:	4618      	mov	r0, r3
 8020882:	f107 071c 	add.w	r7, r7, #28
 8020886:	46bd      	mov	sp, r7
 8020888:	bd90      	pop	{r4, r7, pc}
 802088a:	bf00      	nop
 802088c:	0802dd98 	.word	0x0802dd98
 8020890:	0802ddac 	.word	0x0802ddac
 8020894:	0802ddc0 	.word	0x0802ddc0
 8020898:	0802ddd4 	.word	0x0802ddd4
 802089c:	0802dde8 	.word	0x0802dde8
 80208a0:	0802ddfc 	.word	0x0802ddfc
 80208a4:	0802de10 	.word	0x0802de10

080208a8 <d_cv_qualifiers>:
 80208a8:	b580      	push	{r7, lr}
 80208aa:	b086      	sub	sp, #24
 80208ac:	af00      	add	r7, sp, #0
 80208ae:	60f8      	str	r0, [r7, #12]
 80208b0:	60b9      	str	r1, [r7, #8]
 80208b2:	607a      	str	r2, [r7, #4]
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	68db      	ldr	r3, [r3, #12]
 80208b8:	781b      	ldrb	r3, [r3, #0]
 80208ba:	75fb      	strb	r3, [r7, #23]
 80208bc:	e059      	b.n	8020972 <d_cv_qualifiers+0xca>
 80208be:	68fb      	ldr	r3, [r7, #12]
 80208c0:	68db      	ldr	r3, [r3, #12]
 80208c2:	f103 0201 	add.w	r2, r3, #1
 80208c6:	68fb      	ldr	r3, [r7, #12]
 80208c8:	60da      	str	r2, [r3, #12]
 80208ca:	7dfb      	ldrb	r3, [r7, #23]
 80208cc:	2b72      	cmp	r3, #114	; 0x72
 80208ce:	d110      	bne.n	80208f2 <d_cv_qualifiers+0x4a>
 80208d0:	687b      	ldr	r3, [r7, #4]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d002      	beq.n	80208dc <d_cv_qualifiers+0x34>
 80208d6:	f04f 031a 	mov.w	r3, #26
 80208da:	e001      	b.n	80208e0 <d_cv_qualifiers+0x38>
 80208dc:	f04f 0317 	mov.w	r3, #23
 80208e0:	75bb      	strb	r3, [r7, #22]
 80208e2:	68fb      	ldr	r3, [r7, #12]
 80208e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80208e6:	f103 0309 	add.w	r3, r3, #9
 80208ea:	461a      	mov	r2, r3
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	631a      	str	r2, [r3, #48]	; 0x30
 80208f0:	e023      	b.n	802093a <d_cv_qualifiers+0x92>
 80208f2:	7dfb      	ldrb	r3, [r7, #23]
 80208f4:	2b56      	cmp	r3, #86	; 0x56
 80208f6:	d110      	bne.n	802091a <d_cv_qualifiers+0x72>
 80208f8:	687b      	ldr	r3, [r7, #4]
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	d002      	beq.n	8020904 <d_cv_qualifiers+0x5c>
 80208fe:	f04f 031b 	mov.w	r3, #27
 8020902:	e001      	b.n	8020908 <d_cv_qualifiers+0x60>
 8020904:	f04f 0318 	mov.w	r3, #24
 8020908:	75bb      	strb	r3, [r7, #22]
 802090a:	68fb      	ldr	r3, [r7, #12]
 802090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802090e:	f103 0309 	add.w	r3, r3, #9
 8020912:	461a      	mov	r2, r3
 8020914:	68fb      	ldr	r3, [r7, #12]
 8020916:	631a      	str	r2, [r3, #48]	; 0x30
 8020918:	e00f      	b.n	802093a <d_cv_qualifiers+0x92>
 802091a:	687b      	ldr	r3, [r7, #4]
 802091c:	2b00      	cmp	r3, #0
 802091e:	d002      	beq.n	8020926 <d_cv_qualifiers+0x7e>
 8020920:	f04f 031c 	mov.w	r3, #28
 8020924:	e001      	b.n	802092a <d_cv_qualifiers+0x82>
 8020926:	f04f 0319 	mov.w	r3, #25
 802092a:	75bb      	strb	r3, [r7, #22]
 802092c:	68fb      	ldr	r3, [r7, #12]
 802092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020930:	f103 0306 	add.w	r3, r3, #6
 8020934:	461a      	mov	r2, r3
 8020936:	68fb      	ldr	r3, [r7, #12]
 8020938:	631a      	str	r2, [r3, #48]	; 0x30
 802093a:	7dbb      	ldrb	r3, [r7, #22]
 802093c:	68f8      	ldr	r0, [r7, #12]
 802093e:	4619      	mov	r1, r3
 8020940:	f04f 0200 	mov.w	r2, #0
 8020944:	f04f 0300 	mov.w	r3, #0
 8020948:	f7fe f8a4 	bl	801ea94 <d_make_comp>
 802094c:	4602      	mov	r2, r0
 802094e:	68bb      	ldr	r3, [r7, #8]
 8020950:	601a      	str	r2, [r3, #0]
 8020952:	68bb      	ldr	r3, [r7, #8]
 8020954:	681b      	ldr	r3, [r3, #0]
 8020956:	2b00      	cmp	r3, #0
 8020958:	d102      	bne.n	8020960 <d_cv_qualifiers+0xb8>
 802095a:	f04f 0300 	mov.w	r3, #0
 802095e:	e012      	b.n	8020986 <d_cv_qualifiers+0xde>
 8020960:	68bb      	ldr	r3, [r7, #8]
 8020962:	681b      	ldr	r3, [r3, #0]
 8020964:	f103 0304 	add.w	r3, r3, #4
 8020968:	60bb      	str	r3, [r7, #8]
 802096a:	68fb      	ldr	r3, [r7, #12]
 802096c:	68db      	ldr	r3, [r3, #12]
 802096e:	781b      	ldrb	r3, [r3, #0]
 8020970:	75fb      	strb	r3, [r7, #23]
 8020972:	7dfb      	ldrb	r3, [r7, #23]
 8020974:	2b72      	cmp	r3, #114	; 0x72
 8020976:	d0a2      	beq.n	80208be <d_cv_qualifiers+0x16>
 8020978:	7dfb      	ldrb	r3, [r7, #23]
 802097a:	2b56      	cmp	r3, #86	; 0x56
 802097c:	d09f      	beq.n	80208be <d_cv_qualifiers+0x16>
 802097e:	7dfb      	ldrb	r3, [r7, #23]
 8020980:	2b4b      	cmp	r3, #75	; 0x4b
 8020982:	d09c      	beq.n	80208be <d_cv_qualifiers+0x16>
 8020984:	68bb      	ldr	r3, [r7, #8]
 8020986:	4618      	mov	r0, r3
 8020988:	f107 0718 	add.w	r7, r7, #24
 802098c:	46bd      	mov	sp, r7
 802098e:	bd80      	pop	{r7, pc}

08020990 <d_function_type>:
 8020990:	b580      	push	{r7, lr}
 8020992:	b084      	sub	sp, #16
 8020994:	af00      	add	r7, sp, #0
 8020996:	6078      	str	r0, [r7, #4]
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	68db      	ldr	r3, [r3, #12]
 802099c:	781b      	ldrb	r3, [r3, #0]
 802099e:	2b46      	cmp	r3, #70	; 0x46
 80209a0:	d108      	bne.n	80209b4 <d_function_type+0x24>
 80209a2:	687b      	ldr	r3, [r7, #4]
 80209a4:	68db      	ldr	r3, [r3, #12]
 80209a6:	f103 0201 	add.w	r2, r3, #1
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	60da      	str	r2, [r3, #12]
 80209ae:	f04f 0300 	mov.w	r3, #0
 80209b2:	e001      	b.n	80209b8 <d_function_type+0x28>
 80209b4:	f04f 0301 	mov.w	r3, #1
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	d002      	beq.n	80209c2 <d_function_type+0x32>
 80209bc:	f04f 0300 	mov.w	r3, #0
 80209c0:	e027      	b.n	8020a12 <d_function_type+0x82>
 80209c2:	687b      	ldr	r3, [r7, #4]
 80209c4:	68db      	ldr	r3, [r3, #12]
 80209c6:	781b      	ldrb	r3, [r3, #0]
 80209c8:	2b59      	cmp	r3, #89	; 0x59
 80209ca:	d105      	bne.n	80209d8 <d_function_type+0x48>
 80209cc:	687b      	ldr	r3, [r7, #4]
 80209ce:	68db      	ldr	r3, [r3, #12]
 80209d0:	f103 0201 	add.w	r2, r3, #1
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	60da      	str	r2, [r3, #12]
 80209d8:	6878      	ldr	r0, [r7, #4]
 80209da:	f04f 0101 	mov.w	r1, #1
 80209de:	f000 f87f 	bl	8020ae0 <d_bare_function_type>
 80209e2:	4603      	mov	r3, r0
 80209e4:	60fb      	str	r3, [r7, #12]
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	68db      	ldr	r3, [r3, #12]
 80209ea:	781b      	ldrb	r3, [r3, #0]
 80209ec:	2b45      	cmp	r3, #69	; 0x45
 80209ee:	d108      	bne.n	8020a02 <d_function_type+0x72>
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	68db      	ldr	r3, [r3, #12]
 80209f4:	f103 0201 	add.w	r2, r3, #1
 80209f8:	687b      	ldr	r3, [r7, #4]
 80209fa:	60da      	str	r2, [r3, #12]
 80209fc:	f04f 0300 	mov.w	r3, #0
 8020a00:	e001      	b.n	8020a06 <d_function_type+0x76>
 8020a02:	f04f 0301 	mov.w	r3, #1
 8020a06:	2b00      	cmp	r3, #0
 8020a08:	d002      	beq.n	8020a10 <d_function_type+0x80>
 8020a0a:	f04f 0300 	mov.w	r3, #0
 8020a0e:	e000      	b.n	8020a12 <d_function_type+0x82>
 8020a10:	68fb      	ldr	r3, [r7, #12]
 8020a12:	4618      	mov	r0, r3
 8020a14:	f107 0710 	add.w	r7, r7, #16
 8020a18:	46bd      	mov	sp, r7
 8020a1a:	bd80      	pop	{r7, pc}

08020a1c <d_parmlist>:
 8020a1c:	b580      	push	{r7, lr}
 8020a1e:	b086      	sub	sp, #24
 8020a20:	af00      	add	r7, sp, #0
 8020a22:	6078      	str	r0, [r7, #4]
 8020a24:	f04f 0300 	mov.w	r3, #0
 8020a28:	60bb      	str	r3, [r7, #8]
 8020a2a:	f107 0308 	add.w	r3, r7, #8
 8020a2e:	617b      	str	r3, [r7, #20]
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	68db      	ldr	r3, [r3, #12]
 8020a34:	781b      	ldrb	r3, [r3, #0]
 8020a36:	74fb      	strb	r3, [r7, #19]
 8020a38:	7cfb      	ldrb	r3, [r7, #19]
 8020a3a:	2b00      	cmp	r3, #0
 8020a3c:	d028      	beq.n	8020a90 <d_parmlist+0x74>
 8020a3e:	7cfb      	ldrb	r3, [r7, #19]
 8020a40:	2b45      	cmp	r3, #69	; 0x45
 8020a42:	d025      	beq.n	8020a90 <d_parmlist+0x74>
 8020a44:	7cfb      	ldrb	r3, [r7, #19]
 8020a46:	2b2e      	cmp	r3, #46	; 0x2e
 8020a48:	d022      	beq.n	8020a90 <d_parmlist+0x74>
 8020a4a:	6878      	ldr	r0, [r7, #4]
 8020a4c:	f7ff fb70 	bl	8020130 <d_type>
 8020a50:	4603      	mov	r3, r0
 8020a52:	60fb      	str	r3, [r7, #12]
 8020a54:	68fb      	ldr	r3, [r7, #12]
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	d102      	bne.n	8020a60 <d_parmlist+0x44>
 8020a5a:	f04f 0300 	mov.w	r3, #0
 8020a5e:	e03a      	b.n	8020ad6 <d_parmlist+0xba>
 8020a60:	6878      	ldr	r0, [r7, #4]
 8020a62:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8020a66:	68fa      	ldr	r2, [r7, #12]
 8020a68:	f04f 0300 	mov.w	r3, #0
 8020a6c:	f7fe f812 	bl	801ea94 <d_make_comp>
 8020a70:	4602      	mov	r2, r0
 8020a72:	697b      	ldr	r3, [r7, #20]
 8020a74:	601a      	str	r2, [r3, #0]
 8020a76:	697b      	ldr	r3, [r7, #20]
 8020a78:	681b      	ldr	r3, [r3, #0]
 8020a7a:	2b00      	cmp	r3, #0
 8020a7c:	d102      	bne.n	8020a84 <d_parmlist+0x68>
 8020a7e:	f04f 0300 	mov.w	r3, #0
 8020a82:	e028      	b.n	8020ad6 <d_parmlist+0xba>
 8020a84:	697b      	ldr	r3, [r7, #20]
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	f103 0308 	add.w	r3, r3, #8
 8020a8c:	617b      	str	r3, [r7, #20]
 8020a8e:	e7cf      	b.n	8020a30 <d_parmlist+0x14>
 8020a90:	68bb      	ldr	r3, [r7, #8]
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d102      	bne.n	8020a9c <d_parmlist+0x80>
 8020a96:	f04f 0300 	mov.w	r3, #0
 8020a9a:	e01c      	b.n	8020ad6 <d_parmlist+0xba>
 8020a9c:	68bb      	ldr	r3, [r7, #8]
 8020a9e:	689b      	ldr	r3, [r3, #8]
 8020aa0:	2b00      	cmp	r3, #0
 8020aa2:	d117      	bne.n	8020ad4 <d_parmlist+0xb8>
 8020aa4:	68bb      	ldr	r3, [r7, #8]
 8020aa6:	685b      	ldr	r3, [r3, #4]
 8020aa8:	781b      	ldrb	r3, [r3, #0]
 8020aaa:	2b23      	cmp	r3, #35	; 0x23
 8020aac:	d112      	bne.n	8020ad4 <d_parmlist+0xb8>
 8020aae:	68bb      	ldr	r3, [r7, #8]
 8020ab0:	685b      	ldr	r3, [r3, #4]
 8020ab2:	685b      	ldr	r3, [r3, #4]
 8020ab4:	7c1b      	ldrb	r3, [r3, #16]
 8020ab6:	2b09      	cmp	r3, #9
 8020ab8:	d10c      	bne.n	8020ad4 <d_parmlist+0xb8>
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020abe:	68bb      	ldr	r3, [r7, #8]
 8020ac0:	685b      	ldr	r3, [r3, #4]
 8020ac2:	685b      	ldr	r3, [r3, #4]
 8020ac4:	685b      	ldr	r3, [r3, #4]
 8020ac6:	1ad2      	subs	r2, r2, r3
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	631a      	str	r2, [r3, #48]	; 0x30
 8020acc:	68bb      	ldr	r3, [r7, #8]
 8020ace:	f04f 0200 	mov.w	r2, #0
 8020ad2:	605a      	str	r2, [r3, #4]
 8020ad4:	68bb      	ldr	r3, [r7, #8]
 8020ad6:	4618      	mov	r0, r3
 8020ad8:	f107 0718 	add.w	r7, r7, #24
 8020adc:	46bd      	mov	sp, r7
 8020ade:	bd80      	pop	{r7, pc}

08020ae0 <d_bare_function_type>:
 8020ae0:	b580      	push	{r7, lr}
 8020ae2:	b086      	sub	sp, #24
 8020ae4:	af00      	add	r7, sp, #0
 8020ae6:	6078      	str	r0, [r7, #4]
 8020ae8:	6039      	str	r1, [r7, #0]
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	68db      	ldr	r3, [r3, #12]
 8020aee:	781b      	ldrb	r3, [r3, #0]
 8020af0:	74fb      	strb	r3, [r7, #19]
 8020af2:	7cfb      	ldrb	r3, [r7, #19]
 8020af4:	2b4a      	cmp	r3, #74	; 0x4a
 8020af6:	d108      	bne.n	8020b0a <d_bare_function_type+0x2a>
 8020af8:	687b      	ldr	r3, [r7, #4]
 8020afa:	68db      	ldr	r3, [r3, #12]
 8020afc:	f103 0201 	add.w	r2, r3, #1
 8020b00:	687b      	ldr	r3, [r7, #4]
 8020b02:	60da      	str	r2, [r3, #12]
 8020b04:	f04f 0301 	mov.w	r3, #1
 8020b08:	603b      	str	r3, [r7, #0]
 8020b0a:	683b      	ldr	r3, [r7, #0]
 8020b0c:	2b00      	cmp	r3, #0
 8020b0e:	d00a      	beq.n	8020b26 <d_bare_function_type+0x46>
 8020b10:	6878      	ldr	r0, [r7, #4]
 8020b12:	f7ff fb0d 	bl	8020130 <d_type>
 8020b16:	4603      	mov	r3, r0
 8020b18:	617b      	str	r3, [r7, #20]
 8020b1a:	697b      	ldr	r3, [r7, #20]
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	d105      	bne.n	8020b2c <d_bare_function_type+0x4c>
 8020b20:	f04f 0300 	mov.w	r3, #0
 8020b24:	e015      	b.n	8020b52 <d_bare_function_type+0x72>
 8020b26:	f04f 0300 	mov.w	r3, #0
 8020b2a:	617b      	str	r3, [r7, #20]
 8020b2c:	6878      	ldr	r0, [r7, #4]
 8020b2e:	f7ff ff75 	bl	8020a1c <d_parmlist>
 8020b32:	4603      	mov	r3, r0
 8020b34:	60fb      	str	r3, [r7, #12]
 8020b36:	68fb      	ldr	r3, [r7, #12]
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	d102      	bne.n	8020b42 <d_bare_function_type+0x62>
 8020b3c:	f04f 0300 	mov.w	r3, #0
 8020b40:	e007      	b.n	8020b52 <d_bare_function_type+0x72>
 8020b42:	6878      	ldr	r0, [r7, #4]
 8020b44:	f04f 0125 	mov.w	r1, #37	; 0x25
 8020b48:	697a      	ldr	r2, [r7, #20]
 8020b4a:	68fb      	ldr	r3, [r7, #12]
 8020b4c:	f7fd ffa2 	bl	801ea94 <d_make_comp>
 8020b50:	4603      	mov	r3, r0
 8020b52:	4618      	mov	r0, r3
 8020b54:	f107 0718 	add.w	r7, r7, #24
 8020b58:	46bd      	mov	sp, r7
 8020b5a:	bd80      	pop	{r7, pc}

08020b5c <d_class_enum_type>:
 8020b5c:	b580      	push	{r7, lr}
 8020b5e:	b082      	sub	sp, #8
 8020b60:	af00      	add	r7, sp, #0
 8020b62:	6078      	str	r0, [r7, #4]
 8020b64:	6878      	ldr	r0, [r7, #4]
 8020b66:	f7fe fb4b 	bl	801f200 <d_name>
 8020b6a:	4603      	mov	r3, r0
 8020b6c:	4618      	mov	r0, r3
 8020b6e:	f107 0708 	add.w	r7, r7, #8
 8020b72:	46bd      	mov	sp, r7
 8020b74:	bd80      	pop	{r7, pc}
 8020b76:	bf00      	nop

08020b78 <d_array_type>:
 8020b78:	b580      	push	{r7, lr}
 8020b7a:	b086      	sub	sp, #24
 8020b7c:	af00      	add	r7, sp, #0
 8020b7e:	6078      	str	r0, [r7, #4]
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	68db      	ldr	r3, [r3, #12]
 8020b84:	781b      	ldrb	r3, [r3, #0]
 8020b86:	2b41      	cmp	r3, #65	; 0x41
 8020b88:	d108      	bne.n	8020b9c <d_array_type+0x24>
 8020b8a:	687b      	ldr	r3, [r7, #4]
 8020b8c:	68db      	ldr	r3, [r3, #12]
 8020b8e:	f103 0201 	add.w	r2, r3, #1
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	60da      	str	r2, [r3, #12]
 8020b96:	f04f 0300 	mov.w	r3, #0
 8020b9a:	e001      	b.n	8020ba0 <d_array_type+0x28>
 8020b9c:	f04f 0301 	mov.w	r3, #1
 8020ba0:	2b00      	cmp	r3, #0
 8020ba2:	d002      	beq.n	8020baa <d_array_type+0x32>
 8020ba4:	f04f 0300 	mov.w	r3, #0
 8020ba8:	e061      	b.n	8020c6e <d_array_type+0xf6>
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	68db      	ldr	r3, [r3, #12]
 8020bae:	781b      	ldrb	r3, [r3, #0]
 8020bb0:	74fb      	strb	r3, [r7, #19]
 8020bb2:	7cfb      	ldrb	r3, [r7, #19]
 8020bb4:	2b5f      	cmp	r3, #95	; 0x5f
 8020bb6:	d103      	bne.n	8020bc0 <d_array_type+0x48>
 8020bb8:	f04f 0300 	mov.w	r3, #0
 8020bbc:	617b      	str	r3, [r7, #20]
 8020bbe:	e036      	b.n	8020c2e <d_array_type+0xb6>
 8020bc0:	7cfb      	ldrb	r3, [r7, #19]
 8020bc2:	2b2f      	cmp	r3, #47	; 0x2f
 8020bc4:	d927      	bls.n	8020c16 <d_array_type+0x9e>
 8020bc6:	7cfb      	ldrb	r3, [r7, #19]
 8020bc8:	2b39      	cmp	r3, #57	; 0x39
 8020bca:	d824      	bhi.n	8020c16 <d_array_type+0x9e>
 8020bcc:	687b      	ldr	r3, [r7, #4]
 8020bce:	68db      	ldr	r3, [r3, #12]
 8020bd0:	60fb      	str	r3, [r7, #12]
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	68db      	ldr	r3, [r3, #12]
 8020bd6:	f103 0201 	add.w	r2, r3, #1
 8020bda:	687b      	ldr	r3, [r7, #4]
 8020bdc:	60da      	str	r2, [r3, #12]
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	68db      	ldr	r3, [r3, #12]
 8020be2:	781b      	ldrb	r3, [r3, #0]
 8020be4:	74fb      	strb	r3, [r7, #19]
 8020be6:	7cfb      	ldrb	r3, [r7, #19]
 8020be8:	2b2f      	cmp	r3, #47	; 0x2f
 8020bea:	d902      	bls.n	8020bf2 <d_array_type+0x7a>
 8020bec:	7cfb      	ldrb	r3, [r7, #19]
 8020bee:	2b39      	cmp	r3, #57	; 0x39
 8020bf0:	d9ef      	bls.n	8020bd2 <d_array_type+0x5a>
 8020bf2:	687b      	ldr	r3, [r7, #4]
 8020bf4:	68db      	ldr	r3, [r3, #12]
 8020bf6:	461a      	mov	r2, r3
 8020bf8:	68fb      	ldr	r3, [r7, #12]
 8020bfa:	1ad3      	subs	r3, r2, r3
 8020bfc:	6878      	ldr	r0, [r7, #4]
 8020bfe:	68f9      	ldr	r1, [r7, #12]
 8020c00:	461a      	mov	r2, r3
 8020c02:	f7fe f841 	bl	801ec88 <d_make_name>
 8020c06:	4603      	mov	r3, r0
 8020c08:	617b      	str	r3, [r7, #20]
 8020c0a:	697b      	ldr	r3, [r7, #20]
 8020c0c:	2b00      	cmp	r3, #0
 8020c0e:	d10d      	bne.n	8020c2c <d_array_type+0xb4>
 8020c10:	f04f 0300 	mov.w	r3, #0
 8020c14:	e02b      	b.n	8020c6e <d_array_type+0xf6>
 8020c16:	6878      	ldr	r0, [r7, #4]
 8020c18:	f000 fa4c 	bl	80210b4 <d_expression>
 8020c1c:	4603      	mov	r3, r0
 8020c1e:	617b      	str	r3, [r7, #20]
 8020c20:	697b      	ldr	r3, [r7, #20]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d103      	bne.n	8020c2e <d_array_type+0xb6>
 8020c26:	f04f 0300 	mov.w	r3, #0
 8020c2a:	e020      	b.n	8020c6e <d_array_type+0xf6>
 8020c2c:	bf00      	nop
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	68db      	ldr	r3, [r3, #12]
 8020c32:	781b      	ldrb	r3, [r3, #0]
 8020c34:	2b5f      	cmp	r3, #95	; 0x5f
 8020c36:	d108      	bne.n	8020c4a <d_array_type+0xd2>
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	68db      	ldr	r3, [r3, #12]
 8020c3c:	f103 0201 	add.w	r2, r3, #1
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	60da      	str	r2, [r3, #12]
 8020c44:	f04f 0300 	mov.w	r3, #0
 8020c48:	e001      	b.n	8020c4e <d_array_type+0xd6>
 8020c4a:	f04f 0301 	mov.w	r3, #1
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	d002      	beq.n	8020c58 <d_array_type+0xe0>
 8020c52:	f04f 0300 	mov.w	r3, #0
 8020c56:	e00a      	b.n	8020c6e <d_array_type+0xf6>
 8020c58:	6878      	ldr	r0, [r7, #4]
 8020c5a:	f7ff fa69 	bl	8020130 <d_type>
 8020c5e:	4603      	mov	r3, r0
 8020c60:	6878      	ldr	r0, [r7, #4]
 8020c62:	f04f 0126 	mov.w	r1, #38	; 0x26
 8020c66:	697a      	ldr	r2, [r7, #20]
 8020c68:	f7fd ff14 	bl	801ea94 <d_make_comp>
 8020c6c:	4603      	mov	r3, r0
 8020c6e:	4618      	mov	r0, r3
 8020c70:	f107 0718 	add.w	r7, r7, #24
 8020c74:	46bd      	mov	sp, r7
 8020c76:	bd80      	pop	{r7, pc}

08020c78 <d_vector_type>:
 8020c78:	b580      	push	{r7, lr}
 8020c7a:	b084      	sub	sp, #16
 8020c7c:	af00      	add	r7, sp, #0
 8020c7e:	6078      	str	r0, [r7, #4]
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	68db      	ldr	r3, [r3, #12]
 8020c84:	781b      	ldrb	r3, [r3, #0]
 8020c86:	72fb      	strb	r3, [r7, #11]
 8020c88:	7afb      	ldrb	r3, [r7, #11]
 8020c8a:	2b5f      	cmp	r3, #95	; 0x5f
 8020c8c:	d10b      	bne.n	8020ca6 <d_vector_type+0x2e>
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	68db      	ldr	r3, [r3, #12]
 8020c92:	f103 0201 	add.w	r2, r3, #1
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	60da      	str	r2, [r3, #12]
 8020c9a:	6878      	ldr	r0, [r7, #4]
 8020c9c:	f000 fa0a 	bl	80210b4 <d_expression>
 8020ca0:	4603      	mov	r3, r0
 8020ca2:	60fb      	str	r3, [r7, #12]
 8020ca4:	e004      	b.n	8020cb0 <d_vector_type+0x38>
 8020ca6:	6878      	ldr	r0, [r7, #4]
 8020ca8:	f7fe fd38 	bl	801f71c <d_number_component>
 8020cac:	4603      	mov	r3, r0
 8020cae:	60fb      	str	r3, [r7, #12]
 8020cb0:	68fb      	ldr	r3, [r7, #12]
 8020cb2:	2b00      	cmp	r3, #0
 8020cb4:	d102      	bne.n	8020cbc <d_vector_type+0x44>
 8020cb6:	f04f 0300 	mov.w	r3, #0
 8020cba:	e01f      	b.n	8020cfc <d_vector_type+0x84>
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	68db      	ldr	r3, [r3, #12]
 8020cc0:	781b      	ldrb	r3, [r3, #0]
 8020cc2:	2b5f      	cmp	r3, #95	; 0x5f
 8020cc4:	d108      	bne.n	8020cd8 <d_vector_type+0x60>
 8020cc6:	687b      	ldr	r3, [r7, #4]
 8020cc8:	68db      	ldr	r3, [r3, #12]
 8020cca:	f103 0201 	add.w	r2, r3, #1
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	60da      	str	r2, [r3, #12]
 8020cd2:	f04f 0300 	mov.w	r3, #0
 8020cd6:	e001      	b.n	8020cdc <d_vector_type+0x64>
 8020cd8:	f04f 0301 	mov.w	r3, #1
 8020cdc:	2b00      	cmp	r3, #0
 8020cde:	d002      	beq.n	8020ce6 <d_vector_type+0x6e>
 8020ce0:	f04f 0300 	mov.w	r3, #0
 8020ce4:	e00a      	b.n	8020cfc <d_vector_type+0x84>
 8020ce6:	6878      	ldr	r0, [r7, #4]
 8020ce8:	f7ff fa22 	bl	8020130 <d_type>
 8020cec:	4603      	mov	r3, r0
 8020cee:	6878      	ldr	r0, [r7, #4]
 8020cf0:	f04f 0129 	mov.w	r1, #41	; 0x29
 8020cf4:	68fa      	ldr	r2, [r7, #12]
 8020cf6:	f7fd fecd 	bl	801ea94 <d_make_comp>
 8020cfa:	4603      	mov	r3, r0
 8020cfc:	4618      	mov	r0, r3
 8020cfe:	f107 0710 	add.w	r7, r7, #16
 8020d02:	46bd      	mov	sp, r7
 8020d04:	bd80      	pop	{r7, pc}
 8020d06:	bf00      	nop

08020d08 <d_pointer_to_member_type>:
 8020d08:	b580      	push	{r7, lr}
 8020d0a:	b086      	sub	sp, #24
 8020d0c:	af00      	add	r7, sp, #0
 8020d0e:	6078      	str	r0, [r7, #4]
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	68db      	ldr	r3, [r3, #12]
 8020d14:	781b      	ldrb	r3, [r3, #0]
 8020d16:	2b4d      	cmp	r3, #77	; 0x4d
 8020d18:	d108      	bne.n	8020d2c <d_pointer_to_member_type+0x24>
 8020d1a:	687b      	ldr	r3, [r7, #4]
 8020d1c:	68db      	ldr	r3, [r3, #12]
 8020d1e:	f103 0201 	add.w	r2, r3, #1
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	60da      	str	r2, [r3, #12]
 8020d26:	f04f 0300 	mov.w	r3, #0
 8020d2a:	e001      	b.n	8020d30 <d_pointer_to_member_type+0x28>
 8020d2c:	f04f 0301 	mov.w	r3, #1
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	d002      	beq.n	8020d3a <d_pointer_to_member_type+0x32>
 8020d34:	f04f 0300 	mov.w	r3, #0
 8020d38:	e03e      	b.n	8020db8 <d_pointer_to_member_type+0xb0>
 8020d3a:	6878      	ldr	r0, [r7, #4]
 8020d3c:	f7ff f9f8 	bl	8020130 <d_type>
 8020d40:	4603      	mov	r3, r0
 8020d42:	617b      	str	r3, [r7, #20]
 8020d44:	f107 030c 	add.w	r3, r7, #12
 8020d48:	6878      	ldr	r0, [r7, #4]
 8020d4a:	4619      	mov	r1, r3
 8020d4c:	f04f 0201 	mov.w	r2, #1
 8020d50:	f7ff fdaa 	bl	80208a8 <d_cv_qualifiers>
 8020d54:	4603      	mov	r3, r0
 8020d56:	613b      	str	r3, [r7, #16]
 8020d58:	693b      	ldr	r3, [r7, #16]
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	d102      	bne.n	8020d64 <d_pointer_to_member_type+0x5c>
 8020d5e:	f04f 0300 	mov.w	r3, #0
 8020d62:	e029      	b.n	8020db8 <d_pointer_to_member_type+0xb0>
 8020d64:	6878      	ldr	r0, [r7, #4]
 8020d66:	f7ff f9e3 	bl	8020130 <d_type>
 8020d6a:	4602      	mov	r2, r0
 8020d6c:	693b      	ldr	r3, [r7, #16]
 8020d6e:	601a      	str	r2, [r3, #0]
 8020d70:	693b      	ldr	r3, [r7, #16]
 8020d72:	681b      	ldr	r3, [r3, #0]
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	d102      	bne.n	8020d7e <d_pointer_to_member_type+0x76>
 8020d78:	f04f 0300 	mov.w	r3, #0
 8020d7c:	e01c      	b.n	8020db8 <d_pointer_to_member_type+0xb0>
 8020d7e:	f107 030c 	add.w	r3, r7, #12
 8020d82:	693a      	ldr	r2, [r7, #16]
 8020d84:	429a      	cmp	r2, r3
 8020d86:	d00f      	beq.n	8020da8 <d_pointer_to_member_type+0xa0>
 8020d88:	693b      	ldr	r3, [r7, #16]
 8020d8a:	681b      	ldr	r3, [r3, #0]
 8020d8c:	781b      	ldrb	r3, [r3, #0]
 8020d8e:	2b25      	cmp	r3, #37	; 0x25
 8020d90:	d00a      	beq.n	8020da8 <d_pointer_to_member_type+0xa0>
 8020d92:	68fb      	ldr	r3, [r7, #12]
 8020d94:	6878      	ldr	r0, [r7, #4]
 8020d96:	4619      	mov	r1, r3
 8020d98:	f000 fe0e 	bl	80219b8 <d_add_substitution>
 8020d9c:	4603      	mov	r3, r0
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d102      	bne.n	8020da8 <d_pointer_to_member_type+0xa0>
 8020da2:	f04f 0300 	mov.w	r3, #0
 8020da6:	e007      	b.n	8020db8 <d_pointer_to_member_type+0xb0>
 8020da8:	68fb      	ldr	r3, [r7, #12]
 8020daa:	6878      	ldr	r0, [r7, #4]
 8020dac:	f04f 0127 	mov.w	r1, #39	; 0x27
 8020db0:	697a      	ldr	r2, [r7, #20]
 8020db2:	f7fd fe6f 	bl	801ea94 <d_make_comp>
 8020db6:	4603      	mov	r3, r0
 8020db8:	4618      	mov	r0, r3
 8020dba:	f107 0718 	add.w	r7, r7, #24
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd80      	pop	{r7, pc}
 8020dc2:	bf00      	nop

08020dc4 <d_compact_number>:
 8020dc4:	b580      	push	{r7, lr}
 8020dc6:	b084      	sub	sp, #16
 8020dc8:	af00      	add	r7, sp, #0
 8020dca:	6078      	str	r0, [r7, #4]
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	68db      	ldr	r3, [r3, #12]
 8020dd0:	781b      	ldrb	r3, [r3, #0]
 8020dd2:	2b5f      	cmp	r3, #95	; 0x5f
 8020dd4:	d103      	bne.n	8020dde <d_compact_number+0x1a>
 8020dd6:	f04f 0300 	mov.w	r3, #0
 8020dda:	60fb      	str	r3, [r7, #12]
 8020ddc:	e00e      	b.n	8020dfc <d_compact_number+0x38>
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	68db      	ldr	r3, [r3, #12]
 8020de2:	781b      	ldrb	r3, [r3, #0]
 8020de4:	2b6e      	cmp	r3, #110	; 0x6e
 8020de6:	d102      	bne.n	8020dee <d_compact_number+0x2a>
 8020de8:	f04f 33ff 	mov.w	r3, #4294967295
 8020dec:	e01c      	b.n	8020e28 <d_compact_number+0x64>
 8020dee:	6878      	ldr	r0, [r7, #4]
 8020df0:	f7fe fc4a 	bl	801f688 <d_number>
 8020df4:	4603      	mov	r3, r0
 8020df6:	f103 0301 	add.w	r3, r3, #1
 8020dfa:	60fb      	str	r3, [r7, #12]
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	68db      	ldr	r3, [r3, #12]
 8020e00:	781b      	ldrb	r3, [r3, #0]
 8020e02:	2b5f      	cmp	r3, #95	; 0x5f
 8020e04:	d108      	bne.n	8020e18 <d_compact_number+0x54>
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	68db      	ldr	r3, [r3, #12]
 8020e0a:	f103 0201 	add.w	r2, r3, #1
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	60da      	str	r2, [r3, #12]
 8020e12:	f04f 0300 	mov.w	r3, #0
 8020e16:	e001      	b.n	8020e1c <d_compact_number+0x58>
 8020e18:	f04f 0301 	mov.w	r3, #1
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	d002      	beq.n	8020e26 <d_compact_number+0x62>
 8020e20:	f04f 33ff 	mov.w	r3, #4294967295
 8020e24:	e000      	b.n	8020e28 <d_compact_number+0x64>
 8020e26:	68fb      	ldr	r3, [r7, #12]
 8020e28:	4618      	mov	r0, r3
 8020e2a:	f107 0710 	add.w	r7, r7, #16
 8020e2e:	46bd      	mov	sp, r7
 8020e30:	bd80      	pop	{r7, pc}
 8020e32:	bf00      	nop

08020e34 <d_template_param>:
 8020e34:	b580      	push	{r7, lr}
 8020e36:	b084      	sub	sp, #16
 8020e38:	af00      	add	r7, sp, #0
 8020e3a:	6078      	str	r0, [r7, #4]
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	68db      	ldr	r3, [r3, #12]
 8020e40:	781b      	ldrb	r3, [r3, #0]
 8020e42:	2b54      	cmp	r3, #84	; 0x54
 8020e44:	d108      	bne.n	8020e58 <d_template_param+0x24>
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	68db      	ldr	r3, [r3, #12]
 8020e4a:	f103 0201 	add.w	r2, r3, #1
 8020e4e:	687b      	ldr	r3, [r7, #4]
 8020e50:	60da      	str	r2, [r3, #12]
 8020e52:	f04f 0300 	mov.w	r3, #0
 8020e56:	e001      	b.n	8020e5c <d_template_param+0x28>
 8020e58:	f04f 0301 	mov.w	r3, #1
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d002      	beq.n	8020e66 <d_template_param+0x32>
 8020e60:	f04f 0300 	mov.w	r3, #0
 8020e64:	e015      	b.n	8020e92 <d_template_param+0x5e>
 8020e66:	6878      	ldr	r0, [r7, #4]
 8020e68:	f7ff ffac 	bl	8020dc4 <d_compact_number>
 8020e6c:	4603      	mov	r3, r0
 8020e6e:	60fb      	str	r3, [r7, #12]
 8020e70:	68fb      	ldr	r3, [r7, #12]
 8020e72:	2b00      	cmp	r3, #0
 8020e74:	da02      	bge.n	8020e7c <d_template_param+0x48>
 8020e76:	f04f 0300 	mov.w	r3, #0
 8020e7a:	e00a      	b.n	8020e92 <d_template_param+0x5e>
 8020e7c:	687b      	ldr	r3, [r7, #4]
 8020e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e80:	f103 0201 	add.w	r2, r3, #1
 8020e84:	687b      	ldr	r3, [r7, #4]
 8020e86:	629a      	str	r2, [r3, #40]	; 0x28
 8020e88:	6878      	ldr	r0, [r7, #4]
 8020e8a:	68f9      	ldr	r1, [r7, #12]
 8020e8c:	f7fd ffc8 	bl	801ee20 <d_make_template_param>
 8020e90:	4603      	mov	r3, r0
 8020e92:	4618      	mov	r0, r3
 8020e94:	f107 0710 	add.w	r7, r7, #16
 8020e98:	46bd      	mov	sp, r7
 8020e9a:	bd80      	pop	{r7, pc}

08020e9c <d_template_args>:
 8020e9c:	b580      	push	{r7, lr}
 8020e9e:	b086      	sub	sp, #24
 8020ea0:	af00      	add	r7, sp, #0
 8020ea2:	6078      	str	r0, [r7, #4]
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020ea8:	613b      	str	r3, [r7, #16]
 8020eaa:	687b      	ldr	r3, [r7, #4]
 8020eac:	68db      	ldr	r3, [r3, #12]
 8020eae:	781b      	ldrb	r3, [r3, #0]
 8020eb0:	2b49      	cmp	r3, #73	; 0x49
 8020eb2:	d108      	bne.n	8020ec6 <d_template_args+0x2a>
 8020eb4:	687b      	ldr	r3, [r7, #4]
 8020eb6:	68db      	ldr	r3, [r3, #12]
 8020eb8:	f103 0201 	add.w	r2, r3, #1
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	60da      	str	r2, [r3, #12]
 8020ec0:	f04f 0300 	mov.w	r3, #0
 8020ec4:	e001      	b.n	8020eca <d_template_args+0x2e>
 8020ec6:	f04f 0301 	mov.w	r3, #1
 8020eca:	2b00      	cmp	r3, #0
 8020ecc:	d002      	beq.n	8020ed4 <d_template_args+0x38>
 8020ece:	f04f 0300 	mov.w	r3, #0
 8020ed2:	e04f      	b.n	8020f74 <d_template_args+0xd8>
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	68db      	ldr	r3, [r3, #12]
 8020ed8:	781b      	ldrb	r3, [r3, #0]
 8020eda:	2b45      	cmp	r3, #69	; 0x45
 8020edc:	d110      	bne.n	8020f00 <d_template_args+0x64>
 8020ede:	687b      	ldr	r3, [r7, #4]
 8020ee0:	68db      	ldr	r3, [r3, #12]
 8020ee2:	f103 0201 	add.w	r2, r3, #1
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	60da      	str	r2, [r3, #12]
 8020eea:	6878      	ldr	r0, [r7, #4]
 8020eec:	f04f 012b 	mov.w	r1, #43	; 0x2b
 8020ef0:	f04f 0200 	mov.w	r2, #0
 8020ef4:	f04f 0300 	mov.w	r3, #0
 8020ef8:	f7fd fdcc 	bl	801ea94 <d_make_comp>
 8020efc:	4603      	mov	r3, r0
 8020efe:	e039      	b.n	8020f74 <d_template_args+0xd8>
 8020f00:	f04f 0300 	mov.w	r3, #0
 8020f04:	60bb      	str	r3, [r7, #8]
 8020f06:	f107 0308 	add.w	r3, r7, #8
 8020f0a:	617b      	str	r3, [r7, #20]
 8020f0c:	e000      	b.n	8020f10 <d_template_args+0x74>
 8020f0e:	bf00      	nop
 8020f10:	6878      	ldr	r0, [r7, #4]
 8020f12:	f000 f835 	bl	8020f80 <d_template_arg>
 8020f16:	4603      	mov	r3, r0
 8020f18:	60fb      	str	r3, [r7, #12]
 8020f1a:	68fb      	ldr	r3, [r7, #12]
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	d102      	bne.n	8020f26 <d_template_args+0x8a>
 8020f20:	f04f 0300 	mov.w	r3, #0
 8020f24:	e026      	b.n	8020f74 <d_template_args+0xd8>
 8020f26:	6878      	ldr	r0, [r7, #4]
 8020f28:	f04f 012b 	mov.w	r1, #43	; 0x2b
 8020f2c:	68fa      	ldr	r2, [r7, #12]
 8020f2e:	f04f 0300 	mov.w	r3, #0
 8020f32:	f7fd fdaf 	bl	801ea94 <d_make_comp>
 8020f36:	4602      	mov	r2, r0
 8020f38:	697b      	ldr	r3, [r7, #20]
 8020f3a:	601a      	str	r2, [r3, #0]
 8020f3c:	697b      	ldr	r3, [r7, #20]
 8020f3e:	681b      	ldr	r3, [r3, #0]
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	d102      	bne.n	8020f4a <d_template_args+0xae>
 8020f44:	f04f 0300 	mov.w	r3, #0
 8020f48:	e014      	b.n	8020f74 <d_template_args+0xd8>
 8020f4a:	697b      	ldr	r3, [r7, #20]
 8020f4c:	681b      	ldr	r3, [r3, #0]
 8020f4e:	f103 0308 	add.w	r3, r3, #8
 8020f52:	617b      	str	r3, [r7, #20]
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	68db      	ldr	r3, [r3, #12]
 8020f58:	781b      	ldrb	r3, [r3, #0]
 8020f5a:	2b45      	cmp	r3, #69	; 0x45
 8020f5c:	d1d7      	bne.n	8020f0e <d_template_args+0x72>
 8020f5e:	687b      	ldr	r3, [r7, #4]
 8020f60:	68db      	ldr	r3, [r3, #12]
 8020f62:	f103 0201 	add.w	r2, r3, #1
 8020f66:	687b      	ldr	r3, [r7, #4]
 8020f68:	60da      	str	r2, [r3, #12]
 8020f6a:	bf00      	nop
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	693a      	ldr	r2, [r7, #16]
 8020f70:	62da      	str	r2, [r3, #44]	; 0x2c
 8020f72:	68bb      	ldr	r3, [r7, #8]
 8020f74:	4618      	mov	r0, r3
 8020f76:	f107 0718 	add.w	r7, r7, #24
 8020f7a:	46bd      	mov	sp, r7
 8020f7c:	bd80      	pop	{r7, pc}
 8020f7e:	bf00      	nop

08020f80 <d_template_arg>:
 8020f80:	b580      	push	{r7, lr}
 8020f82:	b084      	sub	sp, #16
 8020f84:	af00      	add	r7, sp, #0
 8020f86:	6078      	str	r0, [r7, #4]
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	68db      	ldr	r3, [r3, #12]
 8020f8c:	781b      	ldrb	r3, [r3, #0]
 8020f8e:	2b4c      	cmp	r3, #76	; 0x4c
 8020f90:	d026      	beq.n	8020fe0 <d_template_arg+0x60>
 8020f92:	2b58      	cmp	r3, #88	; 0x58
 8020f94:	d002      	beq.n	8020f9c <d_template_arg+0x1c>
 8020f96:	2b49      	cmp	r3, #73	; 0x49
 8020f98:	d027      	beq.n	8020fea <d_template_arg+0x6a>
 8020f9a:	e02b      	b.n	8020ff4 <d_template_arg+0x74>
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	68db      	ldr	r3, [r3, #12]
 8020fa0:	f103 0201 	add.w	r2, r3, #1
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	60da      	str	r2, [r3, #12]
 8020fa8:	6878      	ldr	r0, [r7, #4]
 8020faa:	f000 f883 	bl	80210b4 <d_expression>
 8020fae:	4603      	mov	r3, r0
 8020fb0:	60fb      	str	r3, [r7, #12]
 8020fb2:	687b      	ldr	r3, [r7, #4]
 8020fb4:	68db      	ldr	r3, [r3, #12]
 8020fb6:	781b      	ldrb	r3, [r3, #0]
 8020fb8:	2b45      	cmp	r3, #69	; 0x45
 8020fba:	d108      	bne.n	8020fce <d_template_arg+0x4e>
 8020fbc:	687b      	ldr	r3, [r7, #4]
 8020fbe:	68db      	ldr	r3, [r3, #12]
 8020fc0:	f103 0201 	add.w	r2, r3, #1
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	60da      	str	r2, [r3, #12]
 8020fc8:	f04f 0300 	mov.w	r3, #0
 8020fcc:	e001      	b.n	8020fd2 <d_template_arg+0x52>
 8020fce:	f04f 0301 	mov.w	r3, #1
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	d002      	beq.n	8020fdc <d_template_arg+0x5c>
 8020fd6:	f04f 0300 	mov.w	r3, #0
 8020fda:	e00f      	b.n	8020ffc <d_template_arg+0x7c>
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	e00d      	b.n	8020ffc <d_template_arg+0x7c>
 8020fe0:	6878      	ldr	r0, [r7, #4]
 8020fe2:	f000 fa37 	bl	8021454 <d_expr_primary>
 8020fe6:	4603      	mov	r3, r0
 8020fe8:	e008      	b.n	8020ffc <d_template_arg+0x7c>
 8020fea:	6878      	ldr	r0, [r7, #4]
 8020fec:	f7ff ff56 	bl	8020e9c <d_template_args>
 8020ff0:	4603      	mov	r3, r0
 8020ff2:	e003      	b.n	8020ffc <d_template_arg+0x7c>
 8020ff4:	6878      	ldr	r0, [r7, #4]
 8020ff6:	f7ff f89b 	bl	8020130 <d_type>
 8020ffa:	4603      	mov	r3, r0
 8020ffc:	4618      	mov	r0, r3
 8020ffe:	f107 0710 	add.w	r7, r7, #16
 8021002:	46bd      	mov	sp, r7
 8021004:	bd80      	pop	{r7, pc}
 8021006:	bf00      	nop

08021008 <d_exprlist>:
 8021008:	b580      	push	{r7, lr}
 802100a:	b086      	sub	sp, #24
 802100c:	af00      	add	r7, sp, #0
 802100e:	6078      	str	r0, [r7, #4]
 8021010:	f04f 0300 	mov.w	r3, #0
 8021014:	60fb      	str	r3, [r7, #12]
 8021016:	f107 030c 	add.w	r3, r7, #12
 802101a:	617b      	str	r3, [r7, #20]
 802101c:	687b      	ldr	r3, [r7, #4]
 802101e:	68db      	ldr	r3, [r3, #12]
 8021020:	781b      	ldrb	r3, [r3, #0]
 8021022:	2b45      	cmp	r3, #69	; 0x45
 8021024:	d111      	bne.n	802104a <d_exprlist+0x42>
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	68db      	ldr	r3, [r3, #12]
 802102a:	f103 0201 	add.w	r2, r3, #1
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	60da      	str	r2, [r3, #12]
 8021032:	6878      	ldr	r0, [r7, #4]
 8021034:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8021038:	f04f 0200 	mov.w	r2, #0
 802103c:	f04f 0300 	mov.w	r3, #0
 8021040:	f7fd fd28 	bl	801ea94 <d_make_comp>
 8021044:	4603      	mov	r3, r0
 8021046:	e02f      	b.n	80210a8 <d_exprlist+0xa0>
 8021048:	bf00      	nop
 802104a:	6878      	ldr	r0, [r7, #4]
 802104c:	f000 f832 	bl	80210b4 <d_expression>
 8021050:	4603      	mov	r3, r0
 8021052:	613b      	str	r3, [r7, #16]
 8021054:	693b      	ldr	r3, [r7, #16]
 8021056:	2b00      	cmp	r3, #0
 8021058:	d102      	bne.n	8021060 <d_exprlist+0x58>
 802105a:	f04f 0300 	mov.w	r3, #0
 802105e:	e023      	b.n	80210a8 <d_exprlist+0xa0>
 8021060:	6878      	ldr	r0, [r7, #4]
 8021062:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8021066:	693a      	ldr	r2, [r7, #16]
 8021068:	f04f 0300 	mov.w	r3, #0
 802106c:	f7fd fd12 	bl	801ea94 <d_make_comp>
 8021070:	4602      	mov	r2, r0
 8021072:	697b      	ldr	r3, [r7, #20]
 8021074:	601a      	str	r2, [r3, #0]
 8021076:	697b      	ldr	r3, [r7, #20]
 8021078:	681b      	ldr	r3, [r3, #0]
 802107a:	2b00      	cmp	r3, #0
 802107c:	d102      	bne.n	8021084 <d_exprlist+0x7c>
 802107e:	f04f 0300 	mov.w	r3, #0
 8021082:	e011      	b.n	80210a8 <d_exprlist+0xa0>
 8021084:	697b      	ldr	r3, [r7, #20]
 8021086:	681b      	ldr	r3, [r3, #0]
 8021088:	f103 0308 	add.w	r3, r3, #8
 802108c:	617b      	str	r3, [r7, #20]
 802108e:	687b      	ldr	r3, [r7, #4]
 8021090:	68db      	ldr	r3, [r3, #12]
 8021092:	781b      	ldrb	r3, [r3, #0]
 8021094:	2b45      	cmp	r3, #69	; 0x45
 8021096:	d1d7      	bne.n	8021048 <d_exprlist+0x40>
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	68db      	ldr	r3, [r3, #12]
 802109c:	f103 0201 	add.w	r2, r3, #1
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	60da      	str	r2, [r3, #12]
 80210a4:	bf00      	nop
 80210a6:	68fb      	ldr	r3, [r7, #12]
 80210a8:	4618      	mov	r0, r3
 80210aa:	f107 0718 	add.w	r7, r7, #24
 80210ae:	46bd      	mov	sp, r7
 80210b0:	bd80      	pop	{r7, pc}
 80210b2:	bf00      	nop

080210b4 <d_expression>:
 80210b4:	b580      	push	{r7, lr}
 80210b6:	b090      	sub	sp, #64	; 0x40
 80210b8:	af00      	add	r7, sp, #0
 80210ba:	6078      	str	r0, [r7, #4]
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	68db      	ldr	r3, [r3, #12]
 80210c0:	781b      	ldrb	r3, [r3, #0]
 80210c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80210c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80210ca:	2b4c      	cmp	r3, #76	; 0x4c
 80210cc:	d104      	bne.n	80210d8 <d_expression+0x24>
 80210ce:	6878      	ldr	r0, [r7, #4]
 80210d0:	f000 f9c0 	bl	8021454 <d_expr_primary>
 80210d4:	4603      	mov	r3, r0
 80210d6:	e1b8      	b.n	802144a <d_expression+0x396>
 80210d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80210dc:	2b54      	cmp	r3, #84	; 0x54
 80210de:	d104      	bne.n	80210ea <d_expression+0x36>
 80210e0:	6878      	ldr	r0, [r7, #4]
 80210e2:	f7ff fea7 	bl	8020e34 <d_template_param>
 80210e6:	4603      	mov	r3, r0
 80210e8:	e1af      	b.n	802144a <d_expression+0x396>
 80210ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80210ee:	2b73      	cmp	r3, #115	; 0x73
 80210f0:	d137      	bne.n	8021162 <d_expression+0xae>
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	68db      	ldr	r3, [r3, #12]
 80210f6:	f103 0301 	add.w	r3, r3, #1
 80210fa:	781b      	ldrb	r3, [r3, #0]
 80210fc:	2b72      	cmp	r3, #114	; 0x72
 80210fe:	d130      	bne.n	8021162 <d_expression+0xae>
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	68db      	ldr	r3, [r3, #12]
 8021104:	f103 0202 	add.w	r2, r3, #2
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	60da      	str	r2, [r3, #12]
 802110c:	6878      	ldr	r0, [r7, #4]
 802110e:	f7ff f80f 	bl	8020130 <d_type>
 8021112:	4603      	mov	r3, r0
 8021114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021116:	6878      	ldr	r0, [r7, #4]
 8021118:	f7fe fa1a 	bl	801f550 <d_unqualified_name>
 802111c:	4603      	mov	r3, r0
 802111e:	62bb      	str	r3, [r7, #40]	; 0x28
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	68db      	ldr	r3, [r3, #12]
 8021124:	781b      	ldrb	r3, [r3, #0]
 8021126:	2b49      	cmp	r3, #73	; 0x49
 8021128:	d008      	beq.n	802113c <d_expression+0x88>
 802112a:	6878      	ldr	r0, [r7, #4]
 802112c:	f04f 0101 	mov.w	r1, #1
 8021130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021134:	f7fd fcae 	bl	801ea94 <d_make_comp>
 8021138:	4603      	mov	r3, r0
 802113a:	e186      	b.n	802144a <d_expression+0x396>
 802113c:	6878      	ldr	r0, [r7, #4]
 802113e:	f7ff fead 	bl	8020e9c <d_template_args>
 8021142:	4603      	mov	r3, r0
 8021144:	6878      	ldr	r0, [r7, #4]
 8021146:	f04f 0104 	mov.w	r1, #4
 802114a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802114c:	f7fd fca2 	bl	801ea94 <d_make_comp>
 8021150:	4603      	mov	r3, r0
 8021152:	6878      	ldr	r0, [r7, #4]
 8021154:	f04f 0101 	mov.w	r1, #1
 8021158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802115a:	f7fd fc9b 	bl	801ea94 <d_make_comp>
 802115e:	4603      	mov	r3, r0
 8021160:	e173      	b.n	802144a <d_expression+0x396>
 8021162:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021166:	2b73      	cmp	r3, #115	; 0x73
 8021168:	d11a      	bne.n	80211a0 <d_expression+0xec>
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	68db      	ldr	r3, [r3, #12]
 802116e:	f103 0301 	add.w	r3, r3, #1
 8021172:	781b      	ldrb	r3, [r3, #0]
 8021174:	2b70      	cmp	r3, #112	; 0x70
 8021176:	d113      	bne.n	80211a0 <d_expression+0xec>
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	68db      	ldr	r3, [r3, #12]
 802117c:	f103 0202 	add.w	r2, r3, #2
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	60da      	str	r2, [r3, #12]
 8021184:	6878      	ldr	r0, [r7, #4]
 8021186:	f7ff ff95 	bl	80210b4 <d_expression>
 802118a:	4603      	mov	r3, r0
 802118c:	6878      	ldr	r0, [r7, #4]
 802118e:	f04f 0141 	mov.w	r1, #65	; 0x41
 8021192:	461a      	mov	r2, r3
 8021194:	f04f 0300 	mov.w	r3, #0
 8021198:	f7fd fc7c 	bl	801ea94 <d_make_comp>
 802119c:	4603      	mov	r3, r0
 802119e:	e154      	b.n	802144a <d_expression+0x396>
 80211a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80211a4:	2b66      	cmp	r3, #102	; 0x66
 80211a6:	d11d      	bne.n	80211e4 <d_expression+0x130>
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	68db      	ldr	r3, [r3, #12]
 80211ac:	f103 0301 	add.w	r3, r3, #1
 80211b0:	781b      	ldrb	r3, [r3, #0]
 80211b2:	2b70      	cmp	r3, #112	; 0x70
 80211b4:	d116      	bne.n	80211e4 <d_expression+0x130>
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	68db      	ldr	r3, [r3, #12]
 80211ba:	f103 0202 	add.w	r2, r3, #2
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	60da      	str	r2, [r3, #12]
 80211c2:	6878      	ldr	r0, [r7, #4]
 80211c4:	f7ff fdfe 	bl	8020dc4 <d_compact_number>
 80211c8:	4603      	mov	r3, r0
 80211ca:	627b      	str	r3, [r7, #36]	; 0x24
 80211cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	da02      	bge.n	80211d8 <d_expression+0x124>
 80211d2:	f04f 0300 	mov.w	r3, #0
 80211d6:	e138      	b.n	802144a <d_expression+0x396>
 80211d8:	6878      	ldr	r0, [r7, #4]
 80211da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80211dc:	f7fd fe3a 	bl	801ee54 <d_make_function_param>
 80211e0:	4603      	mov	r3, r0
 80211e2:	e132      	b.n	802144a <d_expression+0x396>
 80211e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80211e8:	2b2f      	cmp	r3, #47	; 0x2f
 80211ea:	d903      	bls.n	80211f4 <d_expression+0x140>
 80211ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80211f0:	2b39      	cmp	r3, #57	; 0x39
 80211f2:	d90a      	bls.n	802120a <d_expression+0x156>
 80211f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80211f8:	2b6f      	cmp	r3, #111	; 0x6f
 80211fa:	d12e      	bne.n	802125a <d_expression+0x1a6>
 80211fc:	687b      	ldr	r3, [r7, #4]
 80211fe:	68db      	ldr	r3, [r3, #12]
 8021200:	f103 0301 	add.w	r3, r3, #1
 8021204:	781b      	ldrb	r3, [r3, #0]
 8021206:	2b6e      	cmp	r3, #110	; 0x6e
 8021208:	d127      	bne.n	802125a <d_expression+0x1a6>
 802120a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802120e:	2b6f      	cmp	r3, #111	; 0x6f
 8021210:	d105      	bne.n	802121e <d_expression+0x16a>
 8021212:	687b      	ldr	r3, [r7, #4]
 8021214:	68db      	ldr	r3, [r3, #12]
 8021216:	f103 0202 	add.w	r2, r3, #2
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	60da      	str	r2, [r3, #12]
 802121e:	6878      	ldr	r0, [r7, #4]
 8021220:	f7fe f996 	bl	801f550 <d_unqualified_name>
 8021224:	4603      	mov	r3, r0
 8021226:	60fb      	str	r3, [r7, #12]
 8021228:	68fb      	ldr	r3, [r7, #12]
 802122a:	2b00      	cmp	r3, #0
 802122c:	d102      	bne.n	8021234 <d_expression+0x180>
 802122e:	f04f 0300 	mov.w	r3, #0
 8021232:	e10a      	b.n	802144a <d_expression+0x396>
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	68db      	ldr	r3, [r3, #12]
 8021238:	781b      	ldrb	r3, [r3, #0]
 802123a:	2b49      	cmp	r3, #73	; 0x49
 802123c:	d10b      	bne.n	8021256 <d_expression+0x1a2>
 802123e:	6878      	ldr	r0, [r7, #4]
 8021240:	f7ff fe2c 	bl	8020e9c <d_template_args>
 8021244:	4603      	mov	r3, r0
 8021246:	6878      	ldr	r0, [r7, #4]
 8021248:	f04f 0104 	mov.w	r1, #4
 802124c:	68fa      	ldr	r2, [r7, #12]
 802124e:	f7fd fc21 	bl	801ea94 <d_make_comp>
 8021252:	4603      	mov	r3, r0
 8021254:	e0f9      	b.n	802144a <d_expression+0x396>
 8021256:	68fb      	ldr	r3, [r7, #12]
 8021258:	e0f7      	b.n	802144a <d_expression+0x396>
 802125a:	6878      	ldr	r0, [r7, #4]
 802125c:	f7fe faea 	bl	801f834 <d_operator_name>
 8021260:	4603      	mov	r3, r0
 8021262:	623b      	str	r3, [r7, #32]
 8021264:	6a3b      	ldr	r3, [r7, #32]
 8021266:	2b00      	cmp	r3, #0
 8021268:	d102      	bne.n	8021270 <d_expression+0x1bc>
 802126a:	f04f 0300 	mov.w	r3, #0
 802126e:	e0ec      	b.n	802144a <d_expression+0x396>
 8021270:	6a3b      	ldr	r3, [r7, #32]
 8021272:	781b      	ldrb	r3, [r3, #0]
 8021274:	2b2c      	cmp	r3, #44	; 0x2c
 8021276:	d109      	bne.n	802128c <d_expression+0x1d8>
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802127c:	6a3b      	ldr	r3, [r7, #32]
 802127e:	685b      	ldr	r3, [r3, #4]
 8021280:	689b      	ldr	r3, [r3, #8]
 8021282:	f1a3 0302 	sub.w	r3, r3, #2
 8021286:	18d2      	adds	r2, r2, r3
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	631a      	str	r2, [r3, #48]	; 0x30
 802128c:	6a3b      	ldr	r3, [r7, #32]
 802128e:	781b      	ldrb	r3, [r3, #0]
 8021290:	2b2c      	cmp	r3, #44	; 0x2c
 8021292:	d118      	bne.n	80212c6 <d_expression+0x212>
 8021294:	6a3b      	ldr	r3, [r7, #32]
 8021296:	685b      	ldr	r3, [r3, #4]
 8021298:	681b      	ldr	r3, [r3, #0]
 802129a:	4618      	mov	r0, r3
 802129c:	f64d 71cc 	movw	r1, #57292	; 0xdfcc
 80212a0:	f6c0 0102 	movt	r1, #2050	; 0x802
 80212a4:	f005 f9ee 	bl	8026684 <strcmp>
 80212a8:	4603      	mov	r3, r0
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	d10b      	bne.n	80212c6 <d_expression+0x212>
 80212ae:	6878      	ldr	r0, [r7, #4]
 80212b0:	f7fe ff3e 	bl	8020130 <d_type>
 80212b4:	4603      	mov	r3, r0
 80212b6:	6878      	ldr	r0, [r7, #4]
 80212b8:	f04f 012f 	mov.w	r1, #47	; 0x2f
 80212bc:	6a3a      	ldr	r2, [r7, #32]
 80212be:	f7fd fbe9 	bl	801ea94 <d_make_comp>
 80212c2:	4603      	mov	r3, r0
 80212c4:	e0c1      	b.n	802144a <d_expression+0x396>
 80212c6:	6a3b      	ldr	r3, [r7, #32]
 80212c8:	781b      	ldrb	r3, [r3, #0]
 80212ca:	2b2d      	cmp	r3, #45	; 0x2d
 80212cc:	d00b      	beq.n	80212e6 <d_expression+0x232>
 80212ce:	2b2e      	cmp	r3, #46	; 0x2e
 80212d0:	d00d      	beq.n	80212ee <d_expression+0x23a>
 80212d2:	2b2c      	cmp	r3, #44	; 0x2c
 80212d4:	d002      	beq.n	80212dc <d_expression+0x228>
 80212d6:	f04f 0300 	mov.w	r3, #0
 80212da:	e0b6      	b.n	802144a <d_expression+0x396>
 80212dc:	6a3b      	ldr	r3, [r7, #32]
 80212de:	685b      	ldr	r3, [r3, #4]
 80212e0:	68db      	ldr	r3, [r3, #12]
 80212e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80212e4:	e007      	b.n	80212f6 <d_expression+0x242>
 80212e6:	6a3b      	ldr	r3, [r7, #32]
 80212e8:	685b      	ldr	r3, [r3, #4]
 80212ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80212ec:	e003      	b.n	80212f6 <d_expression+0x242>
 80212ee:	f04f 0301 	mov.w	r3, #1
 80212f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80212f4:	bf00      	nop
 80212f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80212f8:	2b02      	cmp	r3, #2
 80212fa:	d027      	beq.n	802134c <d_expression+0x298>
 80212fc:	2b03      	cmp	r3, #3
 80212fe:	d07e      	beq.n	80213fe <d_expression+0x34a>
 8021300:	2b01      	cmp	r3, #1
 8021302:	f040 80a0 	bne.w	8021446 <d_expression+0x392>
 8021306:	6a3b      	ldr	r3, [r7, #32]
 8021308:	781b      	ldrb	r3, [r3, #0]
 802130a:	2b2e      	cmp	r3, #46	; 0x2e
 802130c:	d110      	bne.n	8021330 <d_expression+0x27c>
 802130e:	687b      	ldr	r3, [r7, #4]
 8021310:	68db      	ldr	r3, [r3, #12]
 8021312:	781b      	ldrb	r3, [r3, #0]
 8021314:	2b5f      	cmp	r3, #95	; 0x5f
 8021316:	d10b      	bne.n	8021330 <d_expression+0x27c>
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	68db      	ldr	r3, [r3, #12]
 802131c:	f103 0201 	add.w	r2, r3, #1
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	60da      	str	r2, [r3, #12]
 8021324:	6878      	ldr	r0, [r7, #4]
 8021326:	f7ff fe6f 	bl	8021008 <d_exprlist>
 802132a:	4603      	mov	r3, r0
 802132c:	63bb      	str	r3, [r7, #56]	; 0x38
 802132e:	e004      	b.n	802133a <d_expression+0x286>
 8021330:	6878      	ldr	r0, [r7, #4]
 8021332:	f7ff febf 	bl	80210b4 <d_expression>
 8021336:	4603      	mov	r3, r0
 8021338:	63bb      	str	r3, [r7, #56]	; 0x38
 802133a:	6878      	ldr	r0, [r7, #4]
 802133c:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8021340:	6a3a      	ldr	r2, [r7, #32]
 8021342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021344:	f7fd fba6 	bl	801ea94 <d_make_comp>
 8021348:	4603      	mov	r3, r0
 802134a:	e07e      	b.n	802144a <d_expression+0x396>
 802134c:	6a3b      	ldr	r3, [r7, #32]
 802134e:	685b      	ldr	r3, [r3, #4]
 8021350:	681b      	ldr	r3, [r3, #0]
 8021352:	61fb      	str	r3, [r7, #28]
 8021354:	6878      	ldr	r0, [r7, #4]
 8021356:	f7ff fead 	bl	80210b4 <d_expression>
 802135a:	4603      	mov	r3, r0
 802135c:	61bb      	str	r3, [r7, #24]
 802135e:	69f8      	ldr	r0, [r7, #28]
 8021360:	f64d 6170 	movw	r1, #56944	; 0xde70
 8021364:	f6c0 0102 	movt	r1, #2050	; 0x802
 8021368:	f005 f98c 	bl	8026684 <strcmp>
 802136c:	4603      	mov	r3, r0
 802136e:	2b00      	cmp	r3, #0
 8021370:	d105      	bne.n	802137e <d_expression+0x2ca>
 8021372:	6878      	ldr	r0, [r7, #4]
 8021374:	f7ff fe48 	bl	8021008 <d_exprlist>
 8021378:	4603      	mov	r3, r0
 802137a:	637b      	str	r3, [r7, #52]	; 0x34
 802137c:	e02f      	b.n	80213de <d_expression+0x32a>
 802137e:	69f8      	ldr	r0, [r7, #28]
 8021380:	f64d 61b4 	movw	r1, #57012	; 0xdeb4
 8021384:	f6c0 0102 	movt	r1, #2050	; 0x802
 8021388:	f005 f97c 	bl	8026684 <strcmp>
 802138c:	4603      	mov	r3, r0
 802138e:	2b00      	cmp	r3, #0
 8021390:	d009      	beq.n	80213a6 <d_expression+0x2f2>
 8021392:	69f8      	ldr	r0, [r7, #28]
 8021394:	f64d 719c 	movw	r1, #57244	; 0xdf9c
 8021398:	f6c0 0102 	movt	r1, #2050	; 0x802
 802139c:	f005 f972 	bl	8026684 <strcmp>
 80213a0:	4603      	mov	r3, r0
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	d116      	bne.n	80213d4 <d_expression+0x320>
 80213a6:	6878      	ldr	r0, [r7, #4]
 80213a8:	f7fe f8d2 	bl	801f550 <d_unqualified_name>
 80213ac:	4603      	mov	r3, r0
 80213ae:	637b      	str	r3, [r7, #52]	; 0x34
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	68db      	ldr	r3, [r3, #12]
 80213b4:	781b      	ldrb	r3, [r3, #0]
 80213b6:	2b49      	cmp	r3, #73	; 0x49
 80213b8:	d111      	bne.n	80213de <d_expression+0x32a>
 80213ba:	6878      	ldr	r0, [r7, #4]
 80213bc:	f7ff fd6e 	bl	8020e9c <d_template_args>
 80213c0:	4603      	mov	r3, r0
 80213c2:	6878      	ldr	r0, [r7, #4]
 80213c4:	f04f 0104 	mov.w	r1, #4
 80213c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80213ca:	f7fd fb63 	bl	801ea94 <d_make_comp>
 80213ce:	4603      	mov	r3, r0
 80213d0:	637b      	str	r3, [r7, #52]	; 0x34
 80213d2:	e004      	b.n	80213de <d_expression+0x32a>
 80213d4:	6878      	ldr	r0, [r7, #4]
 80213d6:	f7ff fe6d 	bl	80210b4 <d_expression>
 80213da:	4603      	mov	r3, r0
 80213dc:	637b      	str	r3, [r7, #52]	; 0x34
 80213de:	6878      	ldr	r0, [r7, #4]
 80213e0:	f04f 0131 	mov.w	r1, #49	; 0x31
 80213e4:	69ba      	ldr	r2, [r7, #24]
 80213e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80213e8:	f7fd fb54 	bl	801ea94 <d_make_comp>
 80213ec:	4603      	mov	r3, r0
 80213ee:	6878      	ldr	r0, [r7, #4]
 80213f0:	f04f 0130 	mov.w	r1, #48	; 0x30
 80213f4:	6a3a      	ldr	r2, [r7, #32]
 80213f6:	f7fd fb4d 	bl	801ea94 <d_make_comp>
 80213fa:	4603      	mov	r3, r0
 80213fc:	e025      	b.n	802144a <d_expression+0x396>
 80213fe:	6878      	ldr	r0, [r7, #4]
 8021400:	f7ff fe58 	bl	80210b4 <d_expression>
 8021404:	4603      	mov	r3, r0
 8021406:	617b      	str	r3, [r7, #20]
 8021408:	6878      	ldr	r0, [r7, #4]
 802140a:	f7ff fe53 	bl	80210b4 <d_expression>
 802140e:	4603      	mov	r3, r0
 8021410:	613b      	str	r3, [r7, #16]
 8021412:	6878      	ldr	r0, [r7, #4]
 8021414:	f7ff fe4e 	bl	80210b4 <d_expression>
 8021418:	4603      	mov	r3, r0
 802141a:	6878      	ldr	r0, [r7, #4]
 802141c:	f04f 0134 	mov.w	r1, #52	; 0x34
 8021420:	693a      	ldr	r2, [r7, #16]
 8021422:	f7fd fb37 	bl	801ea94 <d_make_comp>
 8021426:	4603      	mov	r3, r0
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f04f 0133 	mov.w	r1, #51	; 0x33
 802142e:	697a      	ldr	r2, [r7, #20]
 8021430:	f7fd fb30 	bl	801ea94 <d_make_comp>
 8021434:	4603      	mov	r3, r0
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f04f 0132 	mov.w	r1, #50	; 0x32
 802143c:	6a3a      	ldr	r2, [r7, #32]
 802143e:	f7fd fb29 	bl	801ea94 <d_make_comp>
 8021442:	4603      	mov	r3, r0
 8021444:	e001      	b.n	802144a <d_expression+0x396>
 8021446:	f04f 0300 	mov.w	r3, #0
 802144a:	4618      	mov	r0, r3
 802144c:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8021450:	46bd      	mov	sp, r7
 8021452:	bd80      	pop	{r7, pc}

08021454 <d_expr_primary>:
 8021454:	b580      	push	{r7, lr}
 8021456:	b086      	sub	sp, #24
 8021458:	af00      	add	r7, sp, #0
 802145a:	6078      	str	r0, [r7, #4]
 802145c:	687b      	ldr	r3, [r7, #4]
 802145e:	68db      	ldr	r3, [r3, #12]
 8021460:	781b      	ldrb	r3, [r3, #0]
 8021462:	2b4c      	cmp	r3, #76	; 0x4c
 8021464:	d108      	bne.n	8021478 <d_expr_primary+0x24>
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	68db      	ldr	r3, [r3, #12]
 802146a:	f103 0201 	add.w	r2, r3, #1
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	60da      	str	r2, [r3, #12]
 8021472:	f04f 0300 	mov.w	r3, #0
 8021476:	e001      	b.n	802147c <d_expr_primary+0x28>
 8021478:	f04f 0301 	mov.w	r3, #1
 802147c:	2b00      	cmp	r3, #0
 802147e:	d002      	beq.n	8021486 <d_expr_primary+0x32>
 8021480:	f04f 0300 	mov.w	r3, #0
 8021484:	e07e      	b.n	8021584 <d_expr_primary+0x130>
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	68db      	ldr	r3, [r3, #12]
 802148a:	781b      	ldrb	r3, [r3, #0]
 802148c:	2b5f      	cmp	r3, #95	; 0x5f
 802148e:	d004      	beq.n	802149a <d_expr_primary+0x46>
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	68db      	ldr	r3, [r3, #12]
 8021494:	781b      	ldrb	r3, [r3, #0]
 8021496:	2b5a      	cmp	r3, #90	; 0x5a
 8021498:	d107      	bne.n	80214aa <d_expr_primary+0x56>
 802149a:	6878      	ldr	r0, [r7, #4]
 802149c:	f04f 0100 	mov.w	r1, #0
 80214a0:	f7fd fd10 	bl	801eec4 <d_mangled_name>
 80214a4:	4603      	mov	r3, r0
 80214a6:	617b      	str	r3, [r7, #20]
 80214a8:	e056      	b.n	8021558 <d_expr_primary+0x104>
 80214aa:	6878      	ldr	r0, [r7, #4]
 80214ac:	f7fe fe40 	bl	8020130 <d_type>
 80214b0:	4603      	mov	r3, r0
 80214b2:	60fb      	str	r3, [r7, #12]
 80214b4:	68fb      	ldr	r3, [r7, #12]
 80214b6:	2b00      	cmp	r3, #0
 80214b8:	d102      	bne.n	80214c0 <d_expr_primary+0x6c>
 80214ba:	f04f 0300 	mov.w	r3, #0
 80214be:	e061      	b.n	8021584 <d_expr_primary+0x130>
 80214c0:	68fb      	ldr	r3, [r7, #12]
 80214c2:	781b      	ldrb	r3, [r3, #0]
 80214c4:	2b23      	cmp	r3, #35	; 0x23
 80214c6:	d10c      	bne.n	80214e2 <d_expr_primary+0x8e>
 80214c8:	68fb      	ldr	r3, [r7, #12]
 80214ca:	685b      	ldr	r3, [r3, #4]
 80214cc:	7c1b      	ldrb	r3, [r3, #16]
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	d007      	beq.n	80214e2 <d_expr_primary+0x8e>
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80214d6:	68fb      	ldr	r3, [r7, #12]
 80214d8:	685b      	ldr	r3, [r3, #4]
 80214da:	685b      	ldr	r3, [r3, #4]
 80214dc:	1ad2      	subs	r2, r2, r3
 80214de:	687b      	ldr	r3, [r7, #4]
 80214e0:	631a      	str	r2, [r3, #48]	; 0x30
 80214e2:	f04f 0335 	mov.w	r3, #53	; 0x35
 80214e6:	74fb      	strb	r3, [r7, #19]
 80214e8:	687b      	ldr	r3, [r7, #4]
 80214ea:	68db      	ldr	r3, [r3, #12]
 80214ec:	781b      	ldrb	r3, [r3, #0]
 80214ee:	2b6e      	cmp	r3, #110	; 0x6e
 80214f0:	d108      	bne.n	8021504 <d_expr_primary+0xb0>
 80214f2:	f04f 0336 	mov.w	r3, #54	; 0x36
 80214f6:	74fb      	strb	r3, [r7, #19]
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	68db      	ldr	r3, [r3, #12]
 80214fc:	f103 0201 	add.w	r2, r3, #1
 8021500:	687b      	ldr	r3, [r7, #4]
 8021502:	60da      	str	r2, [r3, #12]
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	68db      	ldr	r3, [r3, #12]
 8021508:	60bb      	str	r3, [r7, #8]
 802150a:	e00d      	b.n	8021528 <d_expr_primary+0xd4>
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	68db      	ldr	r3, [r3, #12]
 8021510:	781b      	ldrb	r3, [r3, #0]
 8021512:	2b00      	cmp	r3, #0
 8021514:	d102      	bne.n	802151c <d_expr_primary+0xc8>
 8021516:	f04f 0300 	mov.w	r3, #0
 802151a:	e033      	b.n	8021584 <d_expr_primary+0x130>
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	68db      	ldr	r3, [r3, #12]
 8021520:	f103 0201 	add.w	r2, r3, #1
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	60da      	str	r2, [r3, #12]
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	68db      	ldr	r3, [r3, #12]
 802152c:	781b      	ldrb	r3, [r3, #0]
 802152e:	2b45      	cmp	r3, #69	; 0x45
 8021530:	d1ec      	bne.n	802150c <d_expr_primary+0xb8>
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	68db      	ldr	r3, [r3, #12]
 8021536:	461a      	mov	r2, r3
 8021538:	68bb      	ldr	r3, [r7, #8]
 802153a:	1ad3      	subs	r3, r2, r3
 802153c:	6878      	ldr	r0, [r7, #4]
 802153e:	68b9      	ldr	r1, [r7, #8]
 8021540:	461a      	mov	r2, r3
 8021542:	f7fd fba1 	bl	801ec88 <d_make_name>
 8021546:	4603      	mov	r3, r0
 8021548:	7cfa      	ldrb	r2, [r7, #19]
 802154a:	6878      	ldr	r0, [r7, #4]
 802154c:	4611      	mov	r1, r2
 802154e:	68fa      	ldr	r2, [r7, #12]
 8021550:	f7fd faa0 	bl	801ea94 <d_make_comp>
 8021554:	4603      	mov	r3, r0
 8021556:	617b      	str	r3, [r7, #20]
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	68db      	ldr	r3, [r3, #12]
 802155c:	781b      	ldrb	r3, [r3, #0]
 802155e:	2b45      	cmp	r3, #69	; 0x45
 8021560:	d108      	bne.n	8021574 <d_expr_primary+0x120>
 8021562:	687b      	ldr	r3, [r7, #4]
 8021564:	68db      	ldr	r3, [r3, #12]
 8021566:	f103 0201 	add.w	r2, r3, #1
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	60da      	str	r2, [r3, #12]
 802156e:	f04f 0300 	mov.w	r3, #0
 8021572:	e001      	b.n	8021578 <d_expr_primary+0x124>
 8021574:	f04f 0301 	mov.w	r3, #1
 8021578:	2b00      	cmp	r3, #0
 802157a:	d002      	beq.n	8021582 <d_expr_primary+0x12e>
 802157c:	f04f 0300 	mov.w	r3, #0
 8021580:	e000      	b.n	8021584 <d_expr_primary+0x130>
 8021582:	697b      	ldr	r3, [r7, #20]
 8021584:	4618      	mov	r0, r3
 8021586:	f107 0718 	add.w	r7, r7, #24
 802158a:	46bd      	mov	sp, r7
 802158c:	bd80      	pop	{r7, pc}
 802158e:	bf00      	nop

08021590 <d_local_name>:
 8021590:	b580      	push	{r7, lr}
 8021592:	b086      	sub	sp, #24
 8021594:	af00      	add	r7, sp, #0
 8021596:	6078      	str	r0, [r7, #4]
 8021598:	687b      	ldr	r3, [r7, #4]
 802159a:	68db      	ldr	r3, [r3, #12]
 802159c:	781b      	ldrb	r3, [r3, #0]
 802159e:	2b5a      	cmp	r3, #90	; 0x5a
 80215a0:	d108      	bne.n	80215b4 <d_local_name+0x24>
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	68db      	ldr	r3, [r3, #12]
 80215a6:	f103 0201 	add.w	r2, r3, #1
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	60da      	str	r2, [r3, #12]
 80215ae:	f04f 0300 	mov.w	r3, #0
 80215b2:	e001      	b.n	80215b8 <d_local_name+0x28>
 80215b4:	f04f 0301 	mov.w	r3, #1
 80215b8:	2b00      	cmp	r3, #0
 80215ba:	d002      	beq.n	80215c2 <d_local_name+0x32>
 80215bc:	f04f 0300 	mov.w	r3, #0
 80215c0:	e084      	b.n	80216cc <d_local_name+0x13c>
 80215c2:	6878      	ldr	r0, [r7, #4]
 80215c4:	f04f 0100 	mov.w	r1, #0
 80215c8:	f7fd fda4 	bl	801f114 <d_encoding>
 80215cc:	4603      	mov	r3, r0
 80215ce:	60fb      	str	r3, [r7, #12]
 80215d0:	687b      	ldr	r3, [r7, #4]
 80215d2:	68db      	ldr	r3, [r3, #12]
 80215d4:	781b      	ldrb	r3, [r3, #0]
 80215d6:	2b45      	cmp	r3, #69	; 0x45
 80215d8:	d108      	bne.n	80215ec <d_local_name+0x5c>
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	68db      	ldr	r3, [r3, #12]
 80215de:	f103 0201 	add.w	r2, r3, #1
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	60da      	str	r2, [r3, #12]
 80215e6:	f04f 0300 	mov.w	r3, #0
 80215ea:	e001      	b.n	80215f0 <d_local_name+0x60>
 80215ec:	f04f 0301 	mov.w	r3, #1
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	d002      	beq.n	80215fa <d_local_name+0x6a>
 80215f4:	f04f 0300 	mov.w	r3, #0
 80215f8:	e068      	b.n	80216cc <d_local_name+0x13c>
 80215fa:	687b      	ldr	r3, [r7, #4]
 80215fc:	68db      	ldr	r3, [r3, #12]
 80215fe:	781b      	ldrb	r3, [r3, #0]
 8021600:	2b73      	cmp	r3, #115	; 0x73
 8021602:	d120      	bne.n	8021646 <d_local_name+0xb6>
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	68db      	ldr	r3, [r3, #12]
 8021608:	f103 0201 	add.w	r2, r3, #1
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	60da      	str	r2, [r3, #12]
 8021610:	6878      	ldr	r0, [r7, #4]
 8021612:	f000 f861 	bl	80216d8 <d_discriminator>
 8021616:	4603      	mov	r3, r0
 8021618:	2b00      	cmp	r3, #0
 802161a:	d102      	bne.n	8021622 <d_local_name+0x92>
 802161c:	f04f 0300 	mov.w	r3, #0
 8021620:	e054      	b.n	80216cc <d_local_name+0x13c>
 8021622:	6878      	ldr	r0, [r7, #4]
 8021624:	f24e 3140 	movw	r1, #58176	; 0xe340
 8021628:	f6c0 0102 	movt	r1, #2050	; 0x802
 802162c:	f04f 020e 	mov.w	r2, #14
 8021630:	f7fd fb2a 	bl	801ec88 <d_make_name>
 8021634:	4603      	mov	r3, r0
 8021636:	6878      	ldr	r0, [r7, #4]
 8021638:	f04f 0102 	mov.w	r1, #2
 802163c:	68fa      	ldr	r2, [r7, #12]
 802163e:	f7fd fa29 	bl	801ea94 <d_make_comp>
 8021642:	4603      	mov	r3, r0
 8021644:	e042      	b.n	80216cc <d_local_name+0x13c>
 8021646:	f04f 33ff 	mov.w	r3, #4294967295
 802164a:	613b      	str	r3, [r7, #16]
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	68db      	ldr	r3, [r3, #12]
 8021650:	781b      	ldrb	r3, [r3, #0]
 8021652:	2b64      	cmp	r3, #100	; 0x64
 8021654:	d110      	bne.n	8021678 <d_local_name+0xe8>
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	68db      	ldr	r3, [r3, #12]
 802165a:	f103 0201 	add.w	r2, r3, #1
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	60da      	str	r2, [r3, #12]
 8021662:	6878      	ldr	r0, [r7, #4]
 8021664:	f7ff fbae 	bl	8020dc4 <d_compact_number>
 8021668:	4603      	mov	r3, r0
 802166a:	613b      	str	r3, [r7, #16]
 802166c:	693b      	ldr	r3, [r7, #16]
 802166e:	2b00      	cmp	r3, #0
 8021670:	da02      	bge.n	8021678 <d_local_name+0xe8>
 8021672:	f04f 0300 	mov.w	r3, #0
 8021676:	e029      	b.n	80216cc <d_local_name+0x13c>
 8021678:	6878      	ldr	r0, [r7, #4]
 802167a:	f7fd fdc1 	bl	801f200 <d_name>
 802167e:	4603      	mov	r3, r0
 8021680:	617b      	str	r3, [r7, #20]
 8021682:	697b      	ldr	r3, [r7, #20]
 8021684:	2b00      	cmp	r3, #0
 8021686:	d00f      	beq.n	80216a8 <d_local_name+0x118>
 8021688:	697b      	ldr	r3, [r7, #20]
 802168a:	781b      	ldrb	r3, [r3, #0]
 802168c:	2b3e      	cmp	r3, #62	; 0x3e
 802168e:	d00a      	beq.n	80216a6 <d_local_name+0x116>
 8021690:	2b40      	cmp	r3, #64	; 0x40
 8021692:	d008      	beq.n	80216a6 <d_local_name+0x116>
 8021694:	6878      	ldr	r0, [r7, #4]
 8021696:	f000 f81f 	bl	80216d8 <d_discriminator>
 802169a:	4603      	mov	r3, r0
 802169c:	2b00      	cmp	r3, #0
 802169e:	d103      	bne.n	80216a8 <d_local_name+0x118>
 80216a0:	f04f 0300 	mov.w	r3, #0
 80216a4:	e012      	b.n	80216cc <d_local_name+0x13c>
 80216a6:	bf00      	nop
 80216a8:	693b      	ldr	r3, [r7, #16]
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	db06      	blt.n	80216bc <d_local_name+0x12c>
 80216ae:	6878      	ldr	r0, [r7, #4]
 80216b0:	6939      	ldr	r1, [r7, #16]
 80216b2:	697a      	ldr	r2, [r7, #20]
 80216b4:	f7fd fb5a 	bl	801ed6c <d_make_default_arg>
 80216b8:	4603      	mov	r3, r0
 80216ba:	617b      	str	r3, [r7, #20]
 80216bc:	6878      	ldr	r0, [r7, #4]
 80216be:	f04f 0102 	mov.w	r1, #2
 80216c2:	68fa      	ldr	r2, [r7, #12]
 80216c4:	697b      	ldr	r3, [r7, #20]
 80216c6:	f7fd f9e5 	bl	801ea94 <d_make_comp>
 80216ca:	4603      	mov	r3, r0
 80216cc:	4618      	mov	r0, r3
 80216ce:	f107 0718 	add.w	r7, r7, #24
 80216d2:	46bd      	mov	sp, r7
 80216d4:	bd80      	pop	{r7, pc}
 80216d6:	bf00      	nop

080216d8 <d_discriminator>:
 80216d8:	b580      	push	{r7, lr}
 80216da:	b084      	sub	sp, #16
 80216dc:	af00      	add	r7, sp, #0
 80216de:	6078      	str	r0, [r7, #4]
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	68db      	ldr	r3, [r3, #12]
 80216e4:	781b      	ldrb	r3, [r3, #0]
 80216e6:	2b5f      	cmp	r3, #95	; 0x5f
 80216e8:	d002      	beq.n	80216f0 <d_discriminator+0x18>
 80216ea:	f04f 0301 	mov.w	r3, #1
 80216ee:	e012      	b.n	8021716 <d_discriminator+0x3e>
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	68db      	ldr	r3, [r3, #12]
 80216f4:	f103 0201 	add.w	r2, r3, #1
 80216f8:	687b      	ldr	r3, [r7, #4]
 80216fa:	60da      	str	r2, [r3, #12]
 80216fc:	6878      	ldr	r0, [r7, #4]
 80216fe:	f7fd ffc3 	bl	801f688 <d_number>
 8021702:	4603      	mov	r3, r0
 8021704:	60fb      	str	r3, [r7, #12]
 8021706:	68fb      	ldr	r3, [r7, #12]
 8021708:	2b00      	cmp	r3, #0
 802170a:	da02      	bge.n	8021712 <d_discriminator+0x3a>
 802170c:	f04f 0300 	mov.w	r3, #0
 8021710:	e001      	b.n	8021716 <d_discriminator+0x3e>
 8021712:	f04f 0301 	mov.w	r3, #1
 8021716:	4618      	mov	r0, r3
 8021718:	f107 0710 	add.w	r7, r7, #16
 802171c:	46bd      	mov	sp, r7
 802171e:	bd80      	pop	{r7, pc}

08021720 <d_lambda>:
 8021720:	b580      	push	{r7, lr}
 8021722:	b086      	sub	sp, #24
 8021724:	af00      	add	r7, sp, #0
 8021726:	6078      	str	r0, [r7, #4]
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	68db      	ldr	r3, [r3, #12]
 802172c:	781b      	ldrb	r3, [r3, #0]
 802172e:	2b55      	cmp	r3, #85	; 0x55
 8021730:	d108      	bne.n	8021744 <d_lambda+0x24>
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	68db      	ldr	r3, [r3, #12]
 8021736:	f103 0201 	add.w	r2, r3, #1
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	60da      	str	r2, [r3, #12]
 802173e:	f04f 0300 	mov.w	r3, #0
 8021742:	e001      	b.n	8021748 <d_lambda+0x28>
 8021744:	f04f 0301 	mov.w	r3, #1
 8021748:	2b00      	cmp	r3, #0
 802174a:	d002      	beq.n	8021752 <d_lambda+0x32>
 802174c:	f04f 0300 	mov.w	r3, #0
 8021750:	e05c      	b.n	802180c <d_lambda+0xec>
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	68db      	ldr	r3, [r3, #12]
 8021756:	781b      	ldrb	r3, [r3, #0]
 8021758:	2b6c      	cmp	r3, #108	; 0x6c
 802175a:	d108      	bne.n	802176e <d_lambda+0x4e>
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	68db      	ldr	r3, [r3, #12]
 8021760:	f103 0201 	add.w	r2, r3, #1
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	60da      	str	r2, [r3, #12]
 8021768:	f04f 0300 	mov.w	r3, #0
 802176c:	e001      	b.n	8021772 <d_lambda+0x52>
 802176e:	f04f 0301 	mov.w	r3, #1
 8021772:	2b00      	cmp	r3, #0
 8021774:	d002      	beq.n	802177c <d_lambda+0x5c>
 8021776:	f04f 0300 	mov.w	r3, #0
 802177a:	e047      	b.n	802180c <d_lambda+0xec>
 802177c:	6878      	ldr	r0, [r7, #4]
 802177e:	f7ff f94d 	bl	8020a1c <d_parmlist>
 8021782:	4603      	mov	r3, r0
 8021784:	617b      	str	r3, [r7, #20]
 8021786:	697b      	ldr	r3, [r7, #20]
 8021788:	2b00      	cmp	r3, #0
 802178a:	d102      	bne.n	8021792 <d_lambda+0x72>
 802178c:	f04f 0300 	mov.w	r3, #0
 8021790:	e03c      	b.n	802180c <d_lambda+0xec>
 8021792:	687b      	ldr	r3, [r7, #4]
 8021794:	68db      	ldr	r3, [r3, #12]
 8021796:	781b      	ldrb	r3, [r3, #0]
 8021798:	2b45      	cmp	r3, #69	; 0x45
 802179a:	d108      	bne.n	80217ae <d_lambda+0x8e>
 802179c:	687b      	ldr	r3, [r7, #4]
 802179e:	68db      	ldr	r3, [r3, #12]
 80217a0:	f103 0201 	add.w	r2, r3, #1
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	60da      	str	r2, [r3, #12]
 80217a8:	f04f 0300 	mov.w	r3, #0
 80217ac:	e001      	b.n	80217b2 <d_lambda+0x92>
 80217ae:	f04f 0301 	mov.w	r3, #1
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	d002      	beq.n	80217bc <d_lambda+0x9c>
 80217b6:	f04f 0300 	mov.w	r3, #0
 80217ba:	e027      	b.n	802180c <d_lambda+0xec>
 80217bc:	6878      	ldr	r0, [r7, #4]
 80217be:	f7ff fb01 	bl	8020dc4 <d_compact_number>
 80217c2:	4603      	mov	r3, r0
 80217c4:	613b      	str	r3, [r7, #16]
 80217c6:	693b      	ldr	r3, [r7, #16]
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	da02      	bge.n	80217d2 <d_lambda+0xb2>
 80217cc:	f04f 0300 	mov.w	r3, #0
 80217d0:	e01c      	b.n	802180c <d_lambda+0xec>
 80217d2:	6878      	ldr	r0, [r7, #4]
 80217d4:	f7fd f936 	bl	801ea44 <d_make_empty>
 80217d8:	4603      	mov	r3, r0
 80217da:	60fb      	str	r3, [r7, #12]
 80217dc:	68fb      	ldr	r3, [r7, #12]
 80217de:	2b00      	cmp	r3, #0
 80217e0:	d009      	beq.n	80217f6 <d_lambda+0xd6>
 80217e2:	68fb      	ldr	r3, [r7, #12]
 80217e4:	f04f 023e 	mov.w	r2, #62	; 0x3e
 80217e8:	701a      	strb	r2, [r3, #0]
 80217ea:	68fb      	ldr	r3, [r7, #12]
 80217ec:	697a      	ldr	r2, [r7, #20]
 80217ee:	605a      	str	r2, [r3, #4]
 80217f0:	68fb      	ldr	r3, [r7, #12]
 80217f2:	693a      	ldr	r2, [r7, #16]
 80217f4:	609a      	str	r2, [r3, #8]
 80217f6:	6878      	ldr	r0, [r7, #4]
 80217f8:	68f9      	ldr	r1, [r7, #12]
 80217fa:	f000 f8dd 	bl	80219b8 <d_add_substitution>
 80217fe:	4603      	mov	r3, r0
 8021800:	2b00      	cmp	r3, #0
 8021802:	d102      	bne.n	802180a <d_lambda+0xea>
 8021804:	f04f 0300 	mov.w	r3, #0
 8021808:	e000      	b.n	802180c <d_lambda+0xec>
 802180a:	68fb      	ldr	r3, [r7, #12]
 802180c:	4618      	mov	r0, r3
 802180e:	f107 0718 	add.w	r7, r7, #24
 8021812:	46bd      	mov	sp, r7
 8021814:	bd80      	pop	{r7, pc}
 8021816:	bf00      	nop

08021818 <d_unnamed_type>:
 8021818:	b580      	push	{r7, lr}
 802181a:	b084      	sub	sp, #16
 802181c:	af00      	add	r7, sp, #0
 802181e:	6078      	str	r0, [r7, #4]
 8021820:	687b      	ldr	r3, [r7, #4]
 8021822:	68db      	ldr	r3, [r3, #12]
 8021824:	781b      	ldrb	r3, [r3, #0]
 8021826:	2b55      	cmp	r3, #85	; 0x55
 8021828:	d108      	bne.n	802183c <d_unnamed_type+0x24>
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	68db      	ldr	r3, [r3, #12]
 802182e:	f103 0201 	add.w	r2, r3, #1
 8021832:	687b      	ldr	r3, [r7, #4]
 8021834:	60da      	str	r2, [r3, #12]
 8021836:	f04f 0300 	mov.w	r3, #0
 802183a:	e001      	b.n	8021840 <d_unnamed_type+0x28>
 802183c:	f04f 0301 	mov.w	r3, #1
 8021840:	2b00      	cmp	r3, #0
 8021842:	d002      	beq.n	802184a <d_unnamed_type+0x32>
 8021844:	f04f 0300 	mov.w	r3, #0
 8021848:	e039      	b.n	80218be <d_unnamed_type+0xa6>
 802184a:	687b      	ldr	r3, [r7, #4]
 802184c:	68db      	ldr	r3, [r3, #12]
 802184e:	781b      	ldrb	r3, [r3, #0]
 8021850:	2b74      	cmp	r3, #116	; 0x74
 8021852:	d108      	bne.n	8021866 <d_unnamed_type+0x4e>
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	68db      	ldr	r3, [r3, #12]
 8021858:	f103 0201 	add.w	r2, r3, #1
 802185c:	687b      	ldr	r3, [r7, #4]
 802185e:	60da      	str	r2, [r3, #12]
 8021860:	f04f 0300 	mov.w	r3, #0
 8021864:	e001      	b.n	802186a <d_unnamed_type+0x52>
 8021866:	f04f 0301 	mov.w	r3, #1
 802186a:	2b00      	cmp	r3, #0
 802186c:	d002      	beq.n	8021874 <d_unnamed_type+0x5c>
 802186e:	f04f 0300 	mov.w	r3, #0
 8021872:	e024      	b.n	80218be <d_unnamed_type+0xa6>
 8021874:	6878      	ldr	r0, [r7, #4]
 8021876:	f7ff faa5 	bl	8020dc4 <d_compact_number>
 802187a:	4603      	mov	r3, r0
 802187c:	60fb      	str	r3, [r7, #12]
 802187e:	68fb      	ldr	r3, [r7, #12]
 8021880:	2b00      	cmp	r3, #0
 8021882:	da02      	bge.n	802188a <d_unnamed_type+0x72>
 8021884:	f04f 0300 	mov.w	r3, #0
 8021888:	e019      	b.n	80218be <d_unnamed_type+0xa6>
 802188a:	6878      	ldr	r0, [r7, #4]
 802188c:	f7fd f8da 	bl	801ea44 <d_make_empty>
 8021890:	4603      	mov	r3, r0
 8021892:	60bb      	str	r3, [r7, #8]
 8021894:	68bb      	ldr	r3, [r7, #8]
 8021896:	2b00      	cmp	r3, #0
 8021898:	d006      	beq.n	80218a8 <d_unnamed_type+0x90>
 802189a:	68bb      	ldr	r3, [r7, #8]
 802189c:	f04f 0240 	mov.w	r2, #64	; 0x40
 80218a0:	701a      	strb	r2, [r3, #0]
 80218a2:	68bb      	ldr	r3, [r7, #8]
 80218a4:	68fa      	ldr	r2, [r7, #12]
 80218a6:	605a      	str	r2, [r3, #4]
 80218a8:	6878      	ldr	r0, [r7, #4]
 80218aa:	68b9      	ldr	r1, [r7, #8]
 80218ac:	f000 f884 	bl	80219b8 <d_add_substitution>
 80218b0:	4603      	mov	r3, r0
 80218b2:	2b00      	cmp	r3, #0
 80218b4:	d102      	bne.n	80218bc <d_unnamed_type+0xa4>
 80218b6:	f04f 0300 	mov.w	r3, #0
 80218ba:	e000      	b.n	80218be <d_unnamed_type+0xa6>
 80218bc:	68bb      	ldr	r3, [r7, #8]
 80218be:	4618      	mov	r0, r3
 80218c0:	f107 0710 	add.w	r7, r7, #16
 80218c4:	46bd      	mov	sp, r7
 80218c6:	bd80      	pop	{r7, pc}

080218c8 <d_clone_suffix>:
 80218c8:	b580      	push	{r7, lr}
 80218ca:	b086      	sub	sp, #24
 80218cc:	af00      	add	r7, sp, #0
 80218ce:	6078      	str	r0, [r7, #4]
 80218d0:	6039      	str	r1, [r7, #0]
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	68db      	ldr	r3, [r3, #12]
 80218d6:	613b      	str	r3, [r7, #16]
 80218d8:	693b      	ldr	r3, [r7, #16]
 80218da:	617b      	str	r3, [r7, #20]
 80218dc:	697b      	ldr	r3, [r7, #20]
 80218de:	781b      	ldrb	r3, [r3, #0]
 80218e0:	2b2e      	cmp	r3, #46	; 0x2e
 80218e2:	d139      	bne.n	8021958 <d_clone_suffix+0x90>
 80218e4:	697b      	ldr	r3, [r7, #20]
 80218e6:	f103 0301 	add.w	r3, r3, #1
 80218ea:	781b      	ldrb	r3, [r3, #0]
 80218ec:	2b60      	cmp	r3, #96	; 0x60
 80218ee:	d905      	bls.n	80218fc <d_clone_suffix+0x34>
 80218f0:	697b      	ldr	r3, [r7, #20]
 80218f2:	f103 0301 	add.w	r3, r3, #1
 80218f6:	781b      	ldrb	r3, [r3, #0]
 80218f8:	2b7a      	cmp	r3, #122	; 0x7a
 80218fa:	d905      	bls.n	8021908 <d_clone_suffix+0x40>
 80218fc:	697b      	ldr	r3, [r7, #20]
 80218fe:	f103 0301 	add.w	r3, r3, #1
 8021902:	781b      	ldrb	r3, [r3, #0]
 8021904:	2b5f      	cmp	r3, #95	; 0x5f
 8021906:	d127      	bne.n	8021958 <d_clone_suffix+0x90>
 8021908:	697b      	ldr	r3, [r7, #20]
 802190a:	f103 0302 	add.w	r3, r3, #2
 802190e:	617b      	str	r3, [r7, #20]
 8021910:	e003      	b.n	802191a <d_clone_suffix+0x52>
 8021912:	697b      	ldr	r3, [r7, #20]
 8021914:	f103 0301 	add.w	r3, r3, #1
 8021918:	617b      	str	r3, [r7, #20]
 802191a:	697b      	ldr	r3, [r7, #20]
 802191c:	781b      	ldrb	r3, [r3, #0]
 802191e:	2b60      	cmp	r3, #96	; 0x60
 8021920:	d903      	bls.n	802192a <d_clone_suffix+0x62>
 8021922:	697b      	ldr	r3, [r7, #20]
 8021924:	781b      	ldrb	r3, [r3, #0]
 8021926:	2b7a      	cmp	r3, #122	; 0x7a
 8021928:	d9f3      	bls.n	8021912 <d_clone_suffix+0x4a>
 802192a:	697b      	ldr	r3, [r7, #20]
 802192c:	781b      	ldrb	r3, [r3, #0]
 802192e:	2b5f      	cmp	r3, #95	; 0x5f
 8021930:	d0ef      	beq.n	8021912 <d_clone_suffix+0x4a>
 8021932:	e011      	b.n	8021958 <d_clone_suffix+0x90>
 8021934:	697b      	ldr	r3, [r7, #20]
 8021936:	f103 0302 	add.w	r3, r3, #2
 802193a:	617b      	str	r3, [r7, #20]
 802193c:	e003      	b.n	8021946 <d_clone_suffix+0x7e>
 802193e:	697b      	ldr	r3, [r7, #20]
 8021940:	f103 0301 	add.w	r3, r3, #1
 8021944:	617b      	str	r3, [r7, #20]
 8021946:	697b      	ldr	r3, [r7, #20]
 8021948:	781b      	ldrb	r3, [r3, #0]
 802194a:	2b2f      	cmp	r3, #47	; 0x2f
 802194c:	d905      	bls.n	802195a <d_clone_suffix+0x92>
 802194e:	697b      	ldr	r3, [r7, #20]
 8021950:	781b      	ldrb	r3, [r3, #0]
 8021952:	2b39      	cmp	r3, #57	; 0x39
 8021954:	d9f3      	bls.n	802193e <d_clone_suffix+0x76>
 8021956:	e000      	b.n	802195a <d_clone_suffix+0x92>
 8021958:	bf00      	nop
 802195a:	697b      	ldr	r3, [r7, #20]
 802195c:	781b      	ldrb	r3, [r3, #0]
 802195e:	2b2e      	cmp	r3, #46	; 0x2e
 8021960:	d10b      	bne.n	802197a <d_clone_suffix+0xb2>
 8021962:	697b      	ldr	r3, [r7, #20]
 8021964:	f103 0301 	add.w	r3, r3, #1
 8021968:	781b      	ldrb	r3, [r3, #0]
 802196a:	2b2f      	cmp	r3, #47	; 0x2f
 802196c:	d905      	bls.n	802197a <d_clone_suffix+0xb2>
 802196e:	697b      	ldr	r3, [r7, #20]
 8021970:	f103 0301 	add.w	r3, r3, #1
 8021974:	781b      	ldrb	r3, [r3, #0]
 8021976:	2b39      	cmp	r3, #57	; 0x39
 8021978:	d9dc      	bls.n	8021934 <d_clone_suffix+0x6c>
 802197a:	687b      	ldr	r3, [r7, #4]
 802197c:	68da      	ldr	r2, [r3, #12]
 802197e:	6979      	ldr	r1, [r7, #20]
 8021980:	693b      	ldr	r3, [r7, #16]
 8021982:	1acb      	subs	r3, r1, r3
 8021984:	18d2      	adds	r2, r2, r3
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	60da      	str	r2, [r3, #12]
 802198a:	697a      	ldr	r2, [r7, #20]
 802198c:	693b      	ldr	r3, [r7, #16]
 802198e:	1ad3      	subs	r3, r2, r3
 8021990:	6878      	ldr	r0, [r7, #4]
 8021992:	6939      	ldr	r1, [r7, #16]
 8021994:	461a      	mov	r2, r3
 8021996:	f7fd f977 	bl	801ec88 <d_make_name>
 802199a:	4603      	mov	r3, r0
 802199c:	60fb      	str	r3, [r7, #12]
 802199e:	6878      	ldr	r0, [r7, #4]
 80219a0:	f04f 0142 	mov.w	r1, #66	; 0x42
 80219a4:	683a      	ldr	r2, [r7, #0]
 80219a6:	68fb      	ldr	r3, [r7, #12]
 80219a8:	f7fd f874 	bl	801ea94 <d_make_comp>
 80219ac:	4603      	mov	r3, r0
 80219ae:	4618      	mov	r0, r3
 80219b0:	f107 0718 	add.w	r7, r7, #24
 80219b4:	46bd      	mov	sp, r7
 80219b6:	bd80      	pop	{r7, pc}

080219b8 <d_add_substitution>:
 80219b8:	b480      	push	{r7}
 80219ba:	b083      	sub	sp, #12
 80219bc:	af00      	add	r7, sp, #0
 80219be:	6078      	str	r0, [r7, #4]
 80219c0:	6039      	str	r1, [r7, #0]
 80219c2:	683b      	ldr	r3, [r7, #0]
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d102      	bne.n	80219ce <d_add_substitution+0x16>
 80219c8:	f04f 0300 	mov.w	r3, #0
 80219cc:	e019      	b.n	8021a02 <d_add_substitution+0x4a>
 80219ce:	687b      	ldr	r3, [r7, #4]
 80219d0:	6a1a      	ldr	r2, [r3, #32]
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80219d6:	429a      	cmp	r2, r3
 80219d8:	db02      	blt.n	80219e0 <d_add_substitution+0x28>
 80219da:	f04f 0300 	mov.w	r3, #0
 80219de:	e010      	b.n	8021a02 <d_add_substitution+0x4a>
 80219e0:	687b      	ldr	r3, [r7, #4]
 80219e2:	69da      	ldr	r2, [r3, #28]
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	6a1b      	ldr	r3, [r3, #32]
 80219e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80219ec:	18d3      	adds	r3, r2, r3
 80219ee:	683a      	ldr	r2, [r7, #0]
 80219f0:	601a      	str	r2, [r3, #0]
 80219f2:	687b      	ldr	r3, [r7, #4]
 80219f4:	6a1b      	ldr	r3, [r3, #32]
 80219f6:	f103 0201 	add.w	r2, r3, #1
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	621a      	str	r2, [r3, #32]
 80219fe:	f04f 0301 	mov.w	r3, #1
 8021a02:	4618      	mov	r0, r3
 8021a04:	f107 070c 	add.w	r7, r7, #12
 8021a08:	46bd      	mov	sp, r7
 8021a0a:	bc80      	pop	{r7}
 8021a0c:	4770      	bx	lr
 8021a0e:	bf00      	nop

08021a10 <d_substitution>:
 8021a10:	b580      	push	{r7, lr}
 8021a12:	b08c      	sub	sp, #48	; 0x30
 8021a14:	af00      	add	r7, sp, #0
 8021a16:	6078      	str	r0, [r7, #4]
 8021a18:	6039      	str	r1, [r7, #0]
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	68db      	ldr	r3, [r3, #12]
 8021a1e:	781b      	ldrb	r3, [r3, #0]
 8021a20:	2b53      	cmp	r3, #83	; 0x53
 8021a22:	d108      	bne.n	8021a36 <d_substitution+0x26>
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	68db      	ldr	r3, [r3, #12]
 8021a28:	f103 0201 	add.w	r2, r3, #1
 8021a2c:	687b      	ldr	r3, [r7, #4]
 8021a2e:	60da      	str	r2, [r3, #12]
 8021a30:	f04f 0300 	mov.w	r3, #0
 8021a34:	e001      	b.n	8021a3a <d_substitution+0x2a>
 8021a36:	f04f 0301 	mov.w	r3, #1
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d002      	beq.n	8021a44 <d_substitution+0x34>
 8021a3e:	f04f 0300 	mov.w	r3, #0
 8021a42:	e0f6      	b.n	8021c32 <d_substitution+0x222>
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	68db      	ldr	r3, [r3, #12]
 8021a48:	781b      	ldrb	r3, [r3, #0]
 8021a4a:	2b00      	cmp	r3, #0
 8021a4c:	d007      	beq.n	8021a5e <d_substitution+0x4e>
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	68da      	ldr	r2, [r3, #12]
 8021a52:	7813      	ldrb	r3, [r2, #0]
 8021a54:	f102 0101 	add.w	r1, r2, #1
 8021a58:	687a      	ldr	r2, [r7, #4]
 8021a5a:	60d1      	str	r1, [r2, #12]
 8021a5c:	e001      	b.n	8021a62 <d_substitution+0x52>
 8021a5e:	f04f 0300 	mov.w	r3, #0
 8021a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8021a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021a6a:	2b5f      	cmp	r3, #95	; 0x5f
 8021a6c:	d00f      	beq.n	8021a8e <d_substitution+0x7e>
 8021a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021a72:	2b2f      	cmp	r3, #47	; 0x2f
 8021a74:	d903      	bls.n	8021a7e <d_substitution+0x6e>
 8021a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021a7a:	2b39      	cmp	r3, #57	; 0x39
 8021a7c:	d907      	bls.n	8021a8e <d_substitution+0x7e>
 8021a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021a82:	2b40      	cmp	r3, #64	; 0x40
 8021a84:	d974      	bls.n	8021b70 <d_substitution+0x160>
 8021a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021a8a:	2b5a      	cmp	r3, #90	; 0x5a
 8021a8c:	d870      	bhi.n	8021b70 <d_substitution+0x160>
 8021a8e:	f04f 0300 	mov.w	r3, #0
 8021a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8021a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021a98:	2b5f      	cmp	r3, #95	; 0x5f
 8021a9a:	d052      	beq.n	8021b42 <d_substitution+0x132>
 8021a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021aa0:	2b2f      	cmp	r3, #47	; 0x2f
 8021aa2:	d912      	bls.n	8021aca <d_substitution+0xba>
 8021aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021aa8:	2b39      	cmp	r3, #57	; 0x39
 8021aaa:	d80e      	bhi.n	8021aca <d_substitution+0xba>
 8021aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021aae:	4613      	mov	r3, r2
 8021ab0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8021ab4:	189b      	adds	r3, r3, r2
 8021ab6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021aba:	461a      	mov	r2, r3
 8021abc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021ac0:	18d3      	adds	r3, r2, r3
 8021ac2:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8021ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8021ac8:	e019      	b.n	8021afe <d_substitution+0xee>
 8021aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021ace:	2b40      	cmp	r3, #64	; 0x40
 8021ad0:	d912      	bls.n	8021af8 <d_substitution+0xe8>
 8021ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021ad6:	2b5a      	cmp	r3, #90	; 0x5a
 8021ad8:	d80e      	bhi.n	8021af8 <d_substitution+0xe8>
 8021ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021adc:	4613      	mov	r3, r2
 8021ade:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8021ae2:	189b      	adds	r3, r3, r2
 8021ae4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021ae8:	461a      	mov	r2, r3
 8021aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021aee:	18d3      	adds	r3, r2, r3
 8021af0:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 8021af4:	627b      	str	r3, [r7, #36]	; 0x24
 8021af6:	e002      	b.n	8021afe <d_substitution+0xee>
 8021af8:	f04f 0300 	mov.w	r3, #0
 8021afc:	e099      	b.n	8021c32 <d_substitution+0x222>
 8021afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b02:	429a      	cmp	r2, r3
 8021b04:	d202      	bcs.n	8021b0c <d_substitution+0xfc>
 8021b06:	f04f 0300 	mov.w	r3, #0
 8021b0a:	e092      	b.n	8021c32 <d_substitution+0x222>
 8021b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8021b10:	687b      	ldr	r3, [r7, #4]
 8021b12:	68db      	ldr	r3, [r3, #12]
 8021b14:	781b      	ldrb	r3, [r3, #0]
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	d007      	beq.n	8021b2a <d_substitution+0x11a>
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	68da      	ldr	r2, [r3, #12]
 8021b1e:	7813      	ldrb	r3, [r2, #0]
 8021b20:	f102 0101 	add.w	r1, r2, #1
 8021b24:	687a      	ldr	r2, [r7, #4]
 8021b26:	60d1      	str	r1, [r2, #12]
 8021b28:	e001      	b.n	8021b2e <d_substitution+0x11e>
 8021b2a:	f04f 0300 	mov.w	r3, #0
 8021b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8021b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021b36:	2b5f      	cmp	r3, #95	; 0x5f
 8021b38:	d1b0      	bne.n	8021a9c <d_substitution+0x8c>
 8021b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b3c:	f103 0301 	add.w	r3, r3, #1
 8021b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8021b42:	687b      	ldr	r3, [r7, #4]
 8021b44:	6a1b      	ldr	r3, [r3, #32]
 8021b46:	461a      	mov	r2, r3
 8021b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b4a:	429a      	cmp	r2, r3
 8021b4c:	d802      	bhi.n	8021b54 <d_substitution+0x144>
 8021b4e:	f04f 0300 	mov.w	r3, #0
 8021b52:	e06e      	b.n	8021c32 <d_substitution+0x222>
 8021b54:	687b      	ldr	r3, [r7, #4]
 8021b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b58:	f103 0201 	add.w	r2, r3, #1
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	629a      	str	r2, [r3, #40]	; 0x28
 8021b60:	687b      	ldr	r3, [r7, #4]
 8021b62:	69da      	ldr	r2, [r3, #28]
 8021b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b66:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021b6a:	18d3      	adds	r3, r2, r3
 8021b6c:	681b      	ldr	r3, [r3, #0]
 8021b6e:	e060      	b.n	8021c32 <d_substitution+0x222>
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	689b      	ldr	r3, [r3, #8]
 8021b74:	f003 0308 	and.w	r3, r3, #8
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	bf0c      	ite	eq
 8021b7c:	2300      	moveq	r3, #0
 8021b7e:	2301      	movne	r3, #1
 8021b80:	623b      	str	r3, [r7, #32]
 8021b82:	6a3b      	ldr	r3, [r7, #32]
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d10f      	bne.n	8021ba8 <d_substitution+0x198>
 8021b88:	683b      	ldr	r3, [r7, #0]
 8021b8a:	2b00      	cmp	r3, #0
 8021b8c:	d00c      	beq.n	8021ba8 <d_substitution+0x198>
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	68db      	ldr	r3, [r3, #12]
 8021b92:	781b      	ldrb	r3, [r3, #0]
 8021b94:	74fb      	strb	r3, [r7, #19]
 8021b96:	7cfb      	ldrb	r3, [r7, #19]
 8021b98:	2b43      	cmp	r3, #67	; 0x43
 8021b9a:	d002      	beq.n	8021ba2 <d_substitution+0x192>
 8021b9c:	7cfb      	ldrb	r3, [r7, #19]
 8021b9e:	2b44      	cmp	r3, #68	; 0x44
 8021ba0:	d102      	bne.n	8021ba8 <d_substitution+0x198>
 8021ba2:	f04f 0301 	mov.w	r3, #1
 8021ba6:	623b      	str	r3, [r7, #32]
 8021ba8:	4b24      	ldr	r3, [pc, #144]	; (8021c3c <d_substitution+0x22c>)
 8021baa:	60fb      	str	r3, [r7, #12]
 8021bac:	f24e 43e0 	movw	r3, #58592	; 0xe4e0
 8021bb0:	f6c0 0302 	movt	r3, #2050	; 0x802
 8021bb4:	61fb      	str	r3, [r7, #28]
 8021bb6:	e036      	b.n	8021c26 <d_substitution+0x216>
 8021bb8:	69fb      	ldr	r3, [r7, #28]
 8021bba:	781b      	ldrb	r3, [r3, #0]
 8021bbc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8021bc0:	429a      	cmp	r2, r3
 8021bc2:	d12c      	bne.n	8021c1e <d_substitution+0x20e>
 8021bc4:	69fb      	ldr	r3, [r7, #28]
 8021bc6:	695b      	ldr	r3, [r3, #20]
 8021bc8:	2b00      	cmp	r3, #0
 8021bca:	d00b      	beq.n	8021be4 <d_substitution+0x1d4>
 8021bcc:	69fb      	ldr	r3, [r7, #28]
 8021bce:	695a      	ldr	r2, [r3, #20]
 8021bd0:	69fb      	ldr	r3, [r7, #28]
 8021bd2:	699b      	ldr	r3, [r3, #24]
 8021bd4:	6878      	ldr	r0, [r7, #4]
 8021bd6:	4611      	mov	r1, r2
 8021bd8:	461a      	mov	r2, r3
 8021bda:	f7fd f955 	bl	801ee88 <d_make_sub>
 8021bde:	4602      	mov	r2, r0
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	62da      	str	r2, [r3, #44]	; 0x2c
 8021be4:	6a3b      	ldr	r3, [r7, #32]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d006      	beq.n	8021bf8 <d_substitution+0x1e8>
 8021bea:	69fb      	ldr	r3, [r7, #28]
 8021bec:	68db      	ldr	r3, [r3, #12]
 8021bee:	61bb      	str	r3, [r7, #24]
 8021bf0:	69fb      	ldr	r3, [r7, #28]
 8021bf2:	691b      	ldr	r3, [r3, #16]
 8021bf4:	617b      	str	r3, [r7, #20]
 8021bf6:	e005      	b.n	8021c04 <d_substitution+0x1f4>
 8021bf8:	69fb      	ldr	r3, [r7, #28]
 8021bfa:	685b      	ldr	r3, [r3, #4]
 8021bfc:	61bb      	str	r3, [r7, #24]
 8021bfe:	69fb      	ldr	r3, [r7, #28]
 8021c00:	689b      	ldr	r3, [r3, #8]
 8021c02:	617b      	str	r3, [r7, #20]
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021c08:	697b      	ldr	r3, [r7, #20]
 8021c0a:	18d2      	adds	r2, r2, r3
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8021c10:	6878      	ldr	r0, [r7, #4]
 8021c12:	69b9      	ldr	r1, [r7, #24]
 8021c14:	697a      	ldr	r2, [r7, #20]
 8021c16:	f7fd f937 	bl	801ee88 <d_make_sub>
 8021c1a:	4603      	mov	r3, r0
 8021c1c:	e009      	b.n	8021c32 <d_substitution+0x222>
 8021c1e:	69fb      	ldr	r3, [r7, #28]
 8021c20:	f103 031c 	add.w	r3, r3, #28
 8021c24:	61fb      	str	r3, [r7, #28]
 8021c26:	69fa      	ldr	r2, [r7, #28]
 8021c28:	68fb      	ldr	r3, [r7, #12]
 8021c2a:	429a      	cmp	r2, r3
 8021c2c:	d3c4      	bcc.n	8021bb8 <d_substitution+0x1a8>
 8021c2e:	f04f 0300 	mov.w	r3, #0
 8021c32:	4618      	mov	r0, r3
 8021c34:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8021c38:	46bd      	mov	sp, r7
 8021c3a:	bd80      	pop	{r7, pc}
 8021c3c:	0802e5a4 	.word	0x0802e5a4

08021c40 <d_growable_string_init>:
 8021c40:	b580      	push	{r7, lr}
 8021c42:	b082      	sub	sp, #8
 8021c44:	af00      	add	r7, sp, #0
 8021c46:	6078      	str	r0, [r7, #4]
 8021c48:	6039      	str	r1, [r7, #0]
 8021c4a:	687b      	ldr	r3, [r7, #4]
 8021c4c:	f04f 0200 	mov.w	r2, #0
 8021c50:	601a      	str	r2, [r3, #0]
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	f04f 0200 	mov.w	r2, #0
 8021c58:	605a      	str	r2, [r3, #4]
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	f04f 0200 	mov.w	r2, #0
 8021c60:	609a      	str	r2, [r3, #8]
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	f04f 0200 	mov.w	r2, #0
 8021c68:	60da      	str	r2, [r3, #12]
 8021c6a:	683b      	ldr	r3, [r7, #0]
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	d003      	beq.n	8021c78 <d_growable_string_init+0x38>
 8021c70:	6878      	ldr	r0, [r7, #4]
 8021c72:	6839      	ldr	r1, [r7, #0]
 8021c74:	f000 f804 	bl	8021c80 <d_growable_string_resize>
 8021c78:	f107 0708 	add.w	r7, r7, #8
 8021c7c:	46bd      	mov	sp, r7
 8021c7e:	bd80      	pop	{r7, pc}

08021c80 <d_growable_string_resize>:
 8021c80:	b580      	push	{r7, lr}
 8021c82:	b084      	sub	sp, #16
 8021c84:	af00      	add	r7, sp, #0
 8021c86:	6078      	str	r0, [r7, #4]
 8021c88:	6039      	str	r1, [r7, #0]
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	68db      	ldr	r3, [r3, #12]
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	d13a      	bne.n	8021d08 <d_growable_string_resize+0x88>
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	689b      	ldr	r3, [r3, #8]
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d002      	beq.n	8021ca0 <d_growable_string_resize+0x20>
 8021c9a:	687b      	ldr	r3, [r7, #4]
 8021c9c:	689b      	ldr	r3, [r3, #8]
 8021c9e:	e001      	b.n	8021ca4 <d_growable_string_resize+0x24>
 8021ca0:	f04f 0302 	mov.w	r3, #2
 8021ca4:	60fb      	str	r3, [r7, #12]
 8021ca6:	e003      	b.n	8021cb0 <d_growable_string_resize+0x30>
 8021ca8:	68fb      	ldr	r3, [r7, #12]
 8021caa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021cae:	60fb      	str	r3, [r7, #12]
 8021cb0:	68fa      	ldr	r2, [r7, #12]
 8021cb2:	683b      	ldr	r3, [r7, #0]
 8021cb4:	429a      	cmp	r2, r3
 8021cb6:	d3f7      	bcc.n	8021ca8 <d_growable_string_resize+0x28>
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	681b      	ldr	r3, [r3, #0]
 8021cbc:	4618      	mov	r0, r3
 8021cbe:	68f9      	ldr	r1, [r7, #12]
 8021cc0:	f004 f9b0 	bl	8026024 <realloc>
 8021cc4:	4603      	mov	r3, r0
 8021cc6:	60bb      	str	r3, [r7, #8]
 8021cc8:	68bb      	ldr	r3, [r7, #8]
 8021cca:	2b00      	cmp	r3, #0
 8021ccc:	d115      	bne.n	8021cfa <d_growable_string_resize+0x7a>
 8021cce:	687b      	ldr	r3, [r7, #4]
 8021cd0:	681b      	ldr	r3, [r3, #0]
 8021cd2:	4618      	mov	r0, r3
 8021cd4:	f003 fd24 	bl	8025720 <free>
 8021cd8:	687b      	ldr	r3, [r7, #4]
 8021cda:	f04f 0200 	mov.w	r2, #0
 8021cde:	601a      	str	r2, [r3, #0]
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	f04f 0200 	mov.w	r2, #0
 8021ce6:	605a      	str	r2, [r3, #4]
 8021ce8:	687b      	ldr	r3, [r7, #4]
 8021cea:	f04f 0200 	mov.w	r2, #0
 8021cee:	609a      	str	r2, [r3, #8]
 8021cf0:	687b      	ldr	r3, [r7, #4]
 8021cf2:	f04f 0201 	mov.w	r2, #1
 8021cf6:	60da      	str	r2, [r3, #12]
 8021cf8:	e007      	b.n	8021d0a <d_growable_string_resize+0x8a>
 8021cfa:	687b      	ldr	r3, [r7, #4]
 8021cfc:	68ba      	ldr	r2, [r7, #8]
 8021cfe:	601a      	str	r2, [r3, #0]
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	68fa      	ldr	r2, [r7, #12]
 8021d04:	609a      	str	r2, [r3, #8]
 8021d06:	e000      	b.n	8021d0a <d_growable_string_resize+0x8a>
 8021d08:	bf00      	nop
 8021d0a:	f107 0710 	add.w	r7, r7, #16
 8021d0e:	46bd      	mov	sp, r7
 8021d10:	bd80      	pop	{r7, pc}
 8021d12:	bf00      	nop

08021d14 <d_growable_string_append_buffer>:
 8021d14:	b580      	push	{r7, lr}
 8021d16:	b086      	sub	sp, #24
 8021d18:	af00      	add	r7, sp, #0
 8021d1a:	60f8      	str	r0, [r7, #12]
 8021d1c:	60b9      	str	r1, [r7, #8]
 8021d1e:	607a      	str	r2, [r7, #4]
 8021d20:	68fb      	ldr	r3, [r7, #12]
 8021d22:	685a      	ldr	r2, [r3, #4]
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	18d3      	adds	r3, r2, r3
 8021d28:	f103 0301 	add.w	r3, r3, #1
 8021d2c:	617b      	str	r3, [r7, #20]
 8021d2e:	68fb      	ldr	r3, [r7, #12]
 8021d30:	689a      	ldr	r2, [r3, #8]
 8021d32:	697b      	ldr	r3, [r7, #20]
 8021d34:	429a      	cmp	r2, r3
 8021d36:	d203      	bcs.n	8021d40 <d_growable_string_append_buffer+0x2c>
 8021d38:	68f8      	ldr	r0, [r7, #12]
 8021d3a:	6979      	ldr	r1, [r7, #20]
 8021d3c:	f7ff ffa0 	bl	8021c80 <d_growable_string_resize>
 8021d40:	68fb      	ldr	r3, [r7, #12]
 8021d42:	68db      	ldr	r3, [r3, #12]
 8021d44:	2b00      	cmp	r3, #0
 8021d46:	d11e      	bne.n	8021d86 <d_growable_string_append_buffer+0x72>
 8021d48:	68fb      	ldr	r3, [r7, #12]
 8021d4a:	681a      	ldr	r2, [r3, #0]
 8021d4c:	68fb      	ldr	r3, [r7, #12]
 8021d4e:	685b      	ldr	r3, [r3, #4]
 8021d50:	18d2      	adds	r2, r2, r3
 8021d52:	68bb      	ldr	r3, [r7, #8]
 8021d54:	4611      	mov	r1, r2
 8021d56:	461a      	mov	r2, r3
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	4608      	mov	r0, r1
 8021d5c:	4611      	mov	r1, r2
 8021d5e:	461a      	mov	r2, r3
 8021d60:	f004 f80c 	bl	8025d7c <memcpy>
 8021d64:	68fb      	ldr	r3, [r7, #12]
 8021d66:	681a      	ldr	r2, [r3, #0]
 8021d68:	68fb      	ldr	r3, [r7, #12]
 8021d6a:	6859      	ldr	r1, [r3, #4]
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	18cb      	adds	r3, r1, r3
 8021d70:	18d3      	adds	r3, r2, r3
 8021d72:	f04f 0200 	mov.w	r2, #0
 8021d76:	701a      	strb	r2, [r3, #0]
 8021d78:	68fb      	ldr	r3, [r7, #12]
 8021d7a:	685a      	ldr	r2, [r3, #4]
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	18d2      	adds	r2, r2, r3
 8021d80:	68fb      	ldr	r3, [r7, #12]
 8021d82:	605a      	str	r2, [r3, #4]
 8021d84:	e000      	b.n	8021d88 <d_growable_string_append_buffer+0x74>
 8021d86:	bf00      	nop
 8021d88:	f107 0718 	add.w	r7, r7, #24
 8021d8c:	46bd      	mov	sp, r7
 8021d8e:	bd80      	pop	{r7, pc}

08021d90 <d_growable_string_callback_adapter>:
 8021d90:	b580      	push	{r7, lr}
 8021d92:	b086      	sub	sp, #24
 8021d94:	af00      	add	r7, sp, #0
 8021d96:	60f8      	str	r0, [r7, #12]
 8021d98:	60b9      	str	r1, [r7, #8]
 8021d9a:	607a      	str	r2, [r7, #4]
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	617b      	str	r3, [r7, #20]
 8021da0:	6978      	ldr	r0, [r7, #20]
 8021da2:	68f9      	ldr	r1, [r7, #12]
 8021da4:	68ba      	ldr	r2, [r7, #8]
 8021da6:	f7ff ffb5 	bl	8021d14 <d_growable_string_append_buffer>
 8021daa:	f107 0718 	add.w	r7, r7, #24
 8021dae:	46bd      	mov	sp, r7
 8021db0:	bd80      	pop	{r7, pc}
 8021db2:	bf00      	nop

08021db4 <d_print_init>:
 8021db4:	b480      	push	{r7}
 8021db6:	b085      	sub	sp, #20
 8021db8:	af00      	add	r7, sp, #0
 8021dba:	60f8      	str	r0, [r7, #12]
 8021dbc:	60b9      	str	r1, [r7, #8]
 8021dbe:	607a      	str	r2, [r7, #4]
 8021dc0:	603b      	str	r3, [r7, #0]
 8021dc2:	68fb      	ldr	r3, [r7, #12]
 8021dc4:	68ba      	ldr	r2, [r7, #8]
 8021dc6:	601a      	str	r2, [r3, #0]
 8021dc8:	68fb      	ldr	r3, [r7, #12]
 8021dca:	f04f 0200 	mov.w	r2, #0
 8021dce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8021dd2:	68fb      	ldr	r3, [r7, #12]
 8021dd4:	f04f 0200 	mov.w	r2, #0
 8021dd8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8021ddc:	68fb      	ldr	r3, [r7, #12]
 8021dde:	f04f 0200 	mov.w	r2, #0
 8021de2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8021de6:	68fb      	ldr	r3, [r7, #12]
 8021de8:	f04f 0200 	mov.w	r2, #0
 8021dec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8021df0:	68fb      	ldr	r3, [r7, #12]
 8021df2:	f04f 0200 	mov.w	r2, #0
 8021df6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8021dfa:	68fb      	ldr	r3, [r7, #12]
 8021dfc:	687a      	ldr	r2, [r7, #4]
 8021dfe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8021e02:	68fb      	ldr	r3, [r7, #12]
 8021e04:	683a      	ldr	r2, [r7, #0]
 8021e06:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8021e0a:	68fb      	ldr	r3, [r7, #12]
 8021e0c:	f04f 0200 	mov.w	r2, #0
 8021e10:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8021e14:	f107 0714 	add.w	r7, r7, #20
 8021e18:	46bd      	mov	sp, r7
 8021e1a:	bc80      	pop	{r7}
 8021e1c:	4770      	bx	lr
 8021e1e:	bf00      	nop

08021e20 <d_print_error>:
 8021e20:	b480      	push	{r7}
 8021e22:	b083      	sub	sp, #12
 8021e24:	af00      	add	r7, sp, #0
 8021e26:	6078      	str	r0, [r7, #4]
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	f04f 0201 	mov.w	r2, #1
 8021e2e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8021e32:	f107 070c 	add.w	r7, r7, #12
 8021e36:	46bd      	mov	sp, r7
 8021e38:	bc80      	pop	{r7}
 8021e3a:	4770      	bx	lr

08021e3c <d_print_saw_error>:
 8021e3c:	b480      	push	{r7}
 8021e3e:	b083      	sub	sp, #12
 8021e40:	af00      	add	r7, sp, #0
 8021e42:	6078      	str	r0, [r7, #4]
 8021e44:	687b      	ldr	r3, [r7, #4]
 8021e46:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8021e4a:	2b00      	cmp	r3, #0
 8021e4c:	bf0c      	ite	eq
 8021e4e:	2300      	moveq	r3, #0
 8021e50:	2301      	movne	r3, #1
 8021e52:	4618      	mov	r0, r3
 8021e54:	f107 070c 	add.w	r7, r7, #12
 8021e58:	46bd      	mov	sp, r7
 8021e5a:	bc80      	pop	{r7}
 8021e5c:	4770      	bx	lr
 8021e5e:	bf00      	nop

08021e60 <d_print_flush>:
 8021e60:	b580      	push	{r7, lr}
 8021e62:	b082      	sub	sp, #8
 8021e64:	af00      	add	r7, sp, #0
 8021e66:	6078      	str	r0, [r7, #4]
 8021e68:	687b      	ldr	r3, [r7, #4]
 8021e6a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8021e6e:	687a      	ldr	r2, [r7, #4]
 8021e70:	18d3      	adds	r3, r2, r3
 8021e72:	f04f 0200 	mov.w	r2, #0
 8021e76:	711a      	strb	r2, [r3, #4]
 8021e78:	687b      	ldr	r3, [r7, #4]
 8021e7a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8021e7e:	687a      	ldr	r2, [r7, #4]
 8021e80:	f102 0004 	add.w	r0, r2, #4
 8021e84:	687a      	ldr	r2, [r7, #4]
 8021e86:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 8021e8a:	687a      	ldr	r2, [r7, #4]
 8021e8c:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8021e90:	4798      	blx	r3
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	f04f 0200 	mov.w	r2, #0
 8021e98:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8021e9c:	687b      	ldr	r3, [r7, #4]
 8021e9e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8021ea2:	f103 0201 	add.w	r2, r3, #1
 8021ea6:	687b      	ldr	r3, [r7, #4]
 8021ea8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8021eac:	f107 0708 	add.w	r7, r7, #8
 8021eb0:	46bd      	mov	sp, r7
 8021eb2:	bd80      	pop	{r7, pc}

08021eb4 <d_append_char>:
 8021eb4:	b580      	push	{r7, lr}
 8021eb6:	b082      	sub	sp, #8
 8021eb8:	af00      	add	r7, sp, #0
 8021eba:	6078      	str	r0, [r7, #4]
 8021ebc:	460b      	mov	r3, r1
 8021ebe:	70fb      	strb	r3, [r7, #3]
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8021ec6:	2bff      	cmp	r3, #255	; 0xff
 8021ec8:	d102      	bne.n	8021ed0 <d_append_char+0x1c>
 8021eca:	6878      	ldr	r0, [r7, #4]
 8021ecc:	f7ff ffc8 	bl	8021e60 <d_print_flush>
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8021ed6:	687a      	ldr	r2, [r7, #4]
 8021ed8:	18d2      	adds	r2, r2, r3
 8021eda:	78f9      	ldrb	r1, [r7, #3]
 8021edc:	7111      	strb	r1, [r2, #4]
 8021ede:	f103 0201 	add.w	r2, r3, #1
 8021ee2:	687b      	ldr	r3, [r7, #4]
 8021ee4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	78fa      	ldrb	r2, [r7, #3]
 8021eec:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8021ef0:	f107 0708 	add.w	r7, r7, #8
 8021ef4:	46bd      	mov	sp, r7
 8021ef6:	bd80      	pop	{r7, pc}

08021ef8 <d_append_buffer>:
 8021ef8:	b580      	push	{r7, lr}
 8021efa:	b086      	sub	sp, #24
 8021efc:	af00      	add	r7, sp, #0
 8021efe:	60f8      	str	r0, [r7, #12]
 8021f00:	60b9      	str	r1, [r7, #8]
 8021f02:	607a      	str	r2, [r7, #4]
 8021f04:	f04f 0300 	mov.w	r3, #0
 8021f08:	617b      	str	r3, [r7, #20]
 8021f0a:	e00b      	b.n	8021f24 <d_append_buffer+0x2c>
 8021f0c:	68ba      	ldr	r2, [r7, #8]
 8021f0e:	697b      	ldr	r3, [r7, #20]
 8021f10:	18d3      	adds	r3, r2, r3
 8021f12:	781b      	ldrb	r3, [r3, #0]
 8021f14:	68f8      	ldr	r0, [r7, #12]
 8021f16:	4619      	mov	r1, r3
 8021f18:	f7ff ffcc 	bl	8021eb4 <d_append_char>
 8021f1c:	697b      	ldr	r3, [r7, #20]
 8021f1e:	f103 0301 	add.w	r3, r3, #1
 8021f22:	617b      	str	r3, [r7, #20]
 8021f24:	697a      	ldr	r2, [r7, #20]
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	429a      	cmp	r2, r3
 8021f2a:	d3ef      	bcc.n	8021f0c <d_append_buffer+0x14>
 8021f2c:	f107 0718 	add.w	r7, r7, #24
 8021f30:	46bd      	mov	sp, r7
 8021f32:	bd80      	pop	{r7, pc}

08021f34 <d_append_string>:
 8021f34:	b580      	push	{r7, lr}
 8021f36:	b082      	sub	sp, #8
 8021f38:	af00      	add	r7, sp, #0
 8021f3a:	6078      	str	r0, [r7, #4]
 8021f3c:	6039      	str	r1, [r7, #0]
 8021f3e:	6838      	ldr	r0, [r7, #0]
 8021f40:	f004 fcec 	bl	802691c <strlen>
 8021f44:	4603      	mov	r3, r0
 8021f46:	6878      	ldr	r0, [r7, #4]
 8021f48:	6839      	ldr	r1, [r7, #0]
 8021f4a:	461a      	mov	r2, r3
 8021f4c:	f7ff ffd4 	bl	8021ef8 <d_append_buffer>
 8021f50:	f107 0708 	add.w	r7, r7, #8
 8021f54:	46bd      	mov	sp, r7
 8021f56:	bd80      	pop	{r7, pc}

08021f58 <d_append_num>:
 8021f58:	b580      	push	{r7, lr}
 8021f5a:	b08a      	sub	sp, #40	; 0x28
 8021f5c:	af00      	add	r7, sp, #0
 8021f5e:	6078      	str	r0, [r7, #4]
 8021f60:	6039      	str	r1, [r7, #0]
 8021f62:	f107 030c 	add.w	r3, r7, #12
 8021f66:	4618      	mov	r0, r3
 8021f68:	f24e 51a4 	movw	r1, #58788	; 0xe5a4
 8021f6c:	f6c0 0102 	movt	r1, #2050	; 0x802
 8021f70:	683a      	ldr	r2, [r7, #0]
 8021f72:	f004 fb37 	bl	80265e4 <sprintf>
 8021f76:	f107 030c 	add.w	r3, r7, #12
 8021f7a:	6878      	ldr	r0, [r7, #4]
 8021f7c:	4619      	mov	r1, r3
 8021f7e:	f7ff ffd9 	bl	8021f34 <d_append_string>
 8021f82:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8021f86:	46bd      	mov	sp, r7
 8021f88:	bd80      	pop	{r7, pc}
 8021f8a:	bf00      	nop

08021f8c <d_last_char>:
 8021f8c:	b480      	push	{r7}
 8021f8e:	b083      	sub	sp, #12
 8021f90:	af00      	add	r7, sp, #0
 8021f92:	6078      	str	r0, [r7, #4]
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021f9a:	4618      	mov	r0, r3
 8021f9c:	f107 070c 	add.w	r7, r7, #12
 8021fa0:	46bd      	mov	sp, r7
 8021fa2:	bc80      	pop	{r7}
 8021fa4:	4770      	bx	lr
 8021fa6:	bf00      	nop

08021fa8 <d_print_callback>:
 8021fa8:	b590      	push	{r4, r7, lr}
 8021faa:	b0cf      	sub	sp, #316	; 0x13c
 8021fac:	af00      	add	r7, sp, #0
 8021fae:	f107 040c 	add.w	r4, r7, #12
 8021fb2:	6020      	str	r0, [r4, #0]
 8021fb4:	f107 0008 	add.w	r0, r7, #8
 8021fb8:	6001      	str	r1, [r0, #0]
 8021fba:	f107 0104 	add.w	r1, r7, #4
 8021fbe:	600a      	str	r2, [r1, #0]
 8021fc0:	463a      	mov	r2, r7
 8021fc2:	6013      	str	r3, [r2, #0]
 8021fc4:	f107 0010 	add.w	r0, r7, #16
 8021fc8:	f107 010c 	add.w	r1, r7, #12
 8021fcc:	f107 0204 	add.w	r2, r7, #4
 8021fd0:	463b      	mov	r3, r7
 8021fd2:	6809      	ldr	r1, [r1, #0]
 8021fd4:	6812      	ldr	r2, [r2, #0]
 8021fd6:	681b      	ldr	r3, [r3, #0]
 8021fd8:	f7ff feec 	bl	8021db4 <d_print_init>
 8021fdc:	f107 0210 	add.w	r2, r7, #16
 8021fe0:	f107 0308 	add.w	r3, r7, #8
 8021fe4:	4610      	mov	r0, r2
 8021fe6:	6819      	ldr	r1, [r3, #0]
 8021fe8:	f000 f9cc 	bl	8022384 <d_print_comp>
 8021fec:	f107 0310 	add.w	r3, r7, #16
 8021ff0:	4618      	mov	r0, r3
 8021ff2:	f7ff ff35 	bl	8021e60 <d_print_flush>
 8021ff6:	f107 0310 	add.w	r3, r7, #16
 8021ffa:	4618      	mov	r0, r3
 8021ffc:	f7ff ff1e 	bl	8021e3c <d_print_saw_error>
 8022000:	4603      	mov	r3, r0
 8022002:	2b00      	cmp	r3, #0
 8022004:	bf14      	ite	ne
 8022006:	2300      	movne	r3, #0
 8022008:	2301      	moveq	r3, #1
 802200a:	4618      	mov	r0, r3
 802200c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8022010:	46bd      	mov	sp, r7
 8022012:	bd90      	pop	{r4, r7, pc}

08022014 <d_print>:
 8022014:	b580      	push	{r7, lr}
 8022016:	b088      	sub	sp, #32
 8022018:	af00      	add	r7, sp, #0
 802201a:	60f8      	str	r0, [r7, #12]
 802201c:	60b9      	str	r1, [r7, #8]
 802201e:	607a      	str	r2, [r7, #4]
 8022020:	603b      	str	r3, [r7, #0]
 8022022:	687b      	ldr	r3, [r7, #4]
 8022024:	f107 0210 	add.w	r2, r7, #16
 8022028:	4610      	mov	r0, r2
 802202a:	4619      	mov	r1, r3
 802202c:	f7ff fe08 	bl	8021c40 <d_growable_string_init>
 8022030:	f107 0310 	add.w	r3, r7, #16
 8022034:	68f8      	ldr	r0, [r7, #12]
 8022036:	68b9      	ldr	r1, [r7, #8]
 8022038:	f641 5291 	movw	r2, #7569	; 0x1d91
 802203c:	f6c0 0202 	movt	r2, #2050	; 0x802
 8022040:	f7ff ffb2 	bl	8021fa8 <d_print_callback>
 8022044:	4603      	mov	r3, r0
 8022046:	2b00      	cmp	r3, #0
 8022048:	d10a      	bne.n	8022060 <d_print+0x4c>
 802204a:	693b      	ldr	r3, [r7, #16]
 802204c:	4618      	mov	r0, r3
 802204e:	f003 fb67 	bl	8025720 <free>
 8022052:	683b      	ldr	r3, [r7, #0]
 8022054:	f04f 0200 	mov.w	r2, #0
 8022058:	601a      	str	r2, [r3, #0]
 802205a:	f04f 0300 	mov.w	r3, #0
 802205e:	e009      	b.n	8022074 <d_print+0x60>
 8022060:	69fb      	ldr	r3, [r7, #28]
 8022062:	2b00      	cmp	r3, #0
 8022064:	d101      	bne.n	802206a <d_print+0x56>
 8022066:	69bb      	ldr	r3, [r7, #24]
 8022068:	e001      	b.n	802206e <d_print+0x5a>
 802206a:	f04f 0301 	mov.w	r3, #1
 802206e:	683a      	ldr	r2, [r7, #0]
 8022070:	6013      	str	r3, [r2, #0]
 8022072:	693b      	ldr	r3, [r7, #16]
 8022074:	4618      	mov	r0, r3
 8022076:	f107 0720 	add.w	r7, r7, #32
 802207a:	46bd      	mov	sp, r7
 802207c:	bd80      	pop	{r7, pc}
 802207e:	bf00      	nop

08022080 <d_index_template_argument>:
 8022080:	b480      	push	{r7}
 8022082:	b085      	sub	sp, #20
 8022084:	af00      	add	r7, sp, #0
 8022086:	6078      	str	r0, [r7, #4]
 8022088:	6039      	str	r1, [r7, #0]
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	60fb      	str	r3, [r7, #12]
 802208e:	e010      	b.n	80220b2 <d_index_template_argument+0x32>
 8022090:	68fb      	ldr	r3, [r7, #12]
 8022092:	781b      	ldrb	r3, [r3, #0]
 8022094:	2b2b      	cmp	r3, #43	; 0x2b
 8022096:	d002      	beq.n	802209e <d_index_template_argument+0x1e>
 8022098:	f04f 0300 	mov.w	r3, #0
 802209c:	e019      	b.n	80220d2 <d_index_template_argument+0x52>
 802209e:	683b      	ldr	r3, [r7, #0]
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	dd0a      	ble.n	80220ba <d_index_template_argument+0x3a>
 80220a4:	683b      	ldr	r3, [r7, #0]
 80220a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80220aa:	603b      	str	r3, [r7, #0]
 80220ac:	68fb      	ldr	r3, [r7, #12]
 80220ae:	689b      	ldr	r3, [r3, #8]
 80220b0:	60fb      	str	r3, [r7, #12]
 80220b2:	68fb      	ldr	r3, [r7, #12]
 80220b4:	2b00      	cmp	r3, #0
 80220b6:	d1eb      	bne.n	8022090 <d_index_template_argument+0x10>
 80220b8:	e000      	b.n	80220bc <d_index_template_argument+0x3c>
 80220ba:	bf00      	nop
 80220bc:	683b      	ldr	r3, [r7, #0]
 80220be:	2b00      	cmp	r3, #0
 80220c0:	d102      	bne.n	80220c8 <d_index_template_argument+0x48>
 80220c2:	68fb      	ldr	r3, [r7, #12]
 80220c4:	2b00      	cmp	r3, #0
 80220c6:	d102      	bne.n	80220ce <d_index_template_argument+0x4e>
 80220c8:	f04f 0300 	mov.w	r3, #0
 80220cc:	e001      	b.n	80220d2 <d_index_template_argument+0x52>
 80220ce:	68fb      	ldr	r3, [r7, #12]
 80220d0:	685b      	ldr	r3, [r3, #4]
 80220d2:	4618      	mov	r0, r3
 80220d4:	f107 0714 	add.w	r7, r7, #20
 80220d8:	46bd      	mov	sp, r7
 80220da:	bc80      	pop	{r7}
 80220dc:	4770      	bx	lr
 80220de:	bf00      	nop

080220e0 <d_lookup_template_argument>:
 80220e0:	b580      	push	{r7, lr}
 80220e2:	b082      	sub	sp, #8
 80220e4:	af00      	add	r7, sp, #0
 80220e6:	6078      	str	r0, [r7, #4]
 80220e8:	6039      	str	r1, [r7, #0]
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d105      	bne.n	8022100 <d_lookup_template_argument+0x20>
 80220f4:	6878      	ldr	r0, [r7, #4]
 80220f6:	f7ff fe93 	bl	8021e20 <d_print_error>
 80220fa:	f04f 0300 	mov.w	r3, #0
 80220fe:	e00b      	b.n	8022118 <d_lookup_template_argument+0x38>
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8022106:	685b      	ldr	r3, [r3, #4]
 8022108:	689a      	ldr	r2, [r3, #8]
 802210a:	683b      	ldr	r3, [r7, #0]
 802210c:	685b      	ldr	r3, [r3, #4]
 802210e:	4610      	mov	r0, r2
 8022110:	4619      	mov	r1, r3
 8022112:	f7ff ffb5 	bl	8022080 <d_index_template_argument>
 8022116:	4603      	mov	r3, r0
 8022118:	4618      	mov	r0, r3
 802211a:	f107 0708 	add.w	r7, r7, #8
 802211e:	46bd      	mov	sp, r7
 8022120:	bd80      	pop	{r7, pc}
 8022122:	bf00      	nop

08022124 <d_find_pack>:
 8022124:	b580      	push	{r7, lr}
 8022126:	b084      	sub	sp, #16
 8022128:	af00      	add	r7, sp, #0
 802212a:	6078      	str	r0, [r7, #4]
 802212c:	6039      	str	r1, [r7, #0]
 802212e:	683b      	ldr	r3, [r7, #0]
 8022130:	2b00      	cmp	r3, #0
 8022132:	d102      	bne.n	802213a <d_find_pack+0x16>
 8022134:	f04f 0300 	mov.w	r3, #0
 8022138:	e0d0      	b.n	80222dc <d_find_pack+0x1b8>
 802213a:	683b      	ldr	r3, [r7, #0]
 802213c:	781b      	ldrb	r3, [r3, #0]
 802213e:	2b41      	cmp	r3, #65	; 0x41
 8022140:	f200 80b8 	bhi.w	80222b4 <d_find_pack+0x190>
 8022144:	a201      	add	r2, pc, #4	; (adr r2, 802214c <d_find_pack+0x28>)
 8022146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802214a:	bf00      	nop
 802214c:	0802227f 	.word	0x0802227f
 8022150:	080222b5 	.word	0x080222b5
 8022154:	080222b5 	.word	0x080222b5
 8022158:	080222b5 	.word	0x080222b5
 802215c:	080222b5 	.word	0x080222b5
 8022160:	08022255 	.word	0x08022255
 8022164:	0802227f 	.word	0x0802227f
 8022168:	08022295 	.word	0x08022295
 802216c:	080222a5 	.word	0x080222a5
 8022170:	080222b5 	.word	0x080222b5
 8022174:	080222b5 	.word	0x080222b5
 8022178:	080222b5 	.word	0x080222b5
 802217c:	080222b5 	.word	0x080222b5
 8022180:	080222b5 	.word	0x080222b5
 8022184:	080222b5 	.word	0x080222b5
 8022188:	080222b5 	.word	0x080222b5
 802218c:	080222b5 	.word	0x080222b5
 8022190:	080222b5 	.word	0x080222b5
 8022194:	080222b5 	.word	0x080222b5
 8022198:	080222b5 	.word	0x080222b5
 802219c:	080222b5 	.word	0x080222b5
 80221a0:	080222b5 	.word	0x080222b5
 80221a4:	0802227f 	.word	0x0802227f
 80221a8:	080222b5 	.word	0x080222b5
 80221ac:	080222b5 	.word	0x080222b5
 80221b0:	080222b5 	.word	0x080222b5
 80221b4:	080222b5 	.word	0x080222b5
 80221b8:	080222b5 	.word	0x080222b5
 80221bc:	080222b5 	.word	0x080222b5
 80221c0:	080222b5 	.word	0x080222b5
 80221c4:	080222b5 	.word	0x080222b5
 80221c8:	080222b5 	.word	0x080222b5
 80221cc:	080222b5 	.word	0x080222b5
 80221d0:	080222b5 	.word	0x080222b5
 80221d4:	080222b5 	.word	0x080222b5
 80221d8:	0802227f 	.word	0x0802227f
 80221dc:	080222b5 	.word	0x080222b5
 80221e0:	080222b5 	.word	0x080222b5
 80221e4:	080222b5 	.word	0x080222b5
 80221e8:	080222b5 	.word	0x080222b5
 80221ec:	080222b5 	.word	0x080222b5
 80221f0:	080222b5 	.word	0x080222b5
 80221f4:	080222b5 	.word	0x080222b5
 80221f8:	080222b5 	.word	0x080222b5
 80221fc:	0802227f 	.word	0x0802227f
 8022200:	08022285 	.word	0x08022285
 8022204:	080222b5 	.word	0x080222b5
 8022208:	080222b5 	.word	0x080222b5
 802220c:	080222b5 	.word	0x080222b5
 8022210:	080222b5 	.word	0x080222b5
 8022214:	080222b5 	.word	0x080222b5
 8022218:	080222b5 	.word	0x080222b5
 802221c:	080222b5 	.word	0x080222b5
 8022220:	080222b5 	.word	0x080222b5
 8022224:	080222b5 	.word	0x080222b5
 8022228:	080222b5 	.word	0x080222b5
 802222c:	080222b5 	.word	0x080222b5
 8022230:	0802227f 	.word	0x0802227f
 8022234:	080222b5 	.word	0x080222b5
 8022238:	080222b5 	.word	0x080222b5
 802223c:	080222b5 	.word	0x080222b5
 8022240:	080222b5 	.word	0x080222b5
 8022244:	0802227f 	.word	0x0802227f
 8022248:	080222b5 	.word	0x080222b5
 802224c:	080222b5 	.word	0x080222b5
 8022250:	08022279 	.word	0x08022279
 8022254:	6878      	ldr	r0, [r7, #4]
 8022256:	6839      	ldr	r1, [r7, #0]
 8022258:	f7ff ff42 	bl	80220e0 <d_lookup_template_argument>
 802225c:	4603      	mov	r3, r0
 802225e:	60fb      	str	r3, [r7, #12]
 8022260:	68fb      	ldr	r3, [r7, #12]
 8022262:	2b00      	cmp	r3, #0
 8022264:	d005      	beq.n	8022272 <d_find_pack+0x14e>
 8022266:	68fb      	ldr	r3, [r7, #12]
 8022268:	781b      	ldrb	r3, [r3, #0]
 802226a:	2b2b      	cmp	r3, #43	; 0x2b
 802226c:	d101      	bne.n	8022272 <d_find_pack+0x14e>
 802226e:	68fb      	ldr	r3, [r7, #12]
 8022270:	e034      	b.n	80222dc <d_find_pack+0x1b8>
 8022272:	f04f 0300 	mov.w	r3, #0
 8022276:	e031      	b.n	80222dc <d_find_pack+0x1b8>
 8022278:	f04f 0300 	mov.w	r3, #0
 802227c:	e02e      	b.n	80222dc <d_find_pack+0x1b8>
 802227e:	f04f 0300 	mov.w	r3, #0
 8022282:	e02b      	b.n	80222dc <d_find_pack+0x1b8>
 8022284:	683b      	ldr	r3, [r7, #0]
 8022286:	689b      	ldr	r3, [r3, #8]
 8022288:	6878      	ldr	r0, [r7, #4]
 802228a:	4619      	mov	r1, r3
 802228c:	f7ff ff4a 	bl	8022124 <d_find_pack>
 8022290:	4603      	mov	r3, r0
 8022292:	e023      	b.n	80222dc <d_find_pack+0x1b8>
 8022294:	683b      	ldr	r3, [r7, #0]
 8022296:	689b      	ldr	r3, [r3, #8]
 8022298:	6878      	ldr	r0, [r7, #4]
 802229a:	4619      	mov	r1, r3
 802229c:	f7ff ff42 	bl	8022124 <d_find_pack>
 80222a0:	4603      	mov	r3, r0
 80222a2:	e01b      	b.n	80222dc <d_find_pack+0x1b8>
 80222a4:	683b      	ldr	r3, [r7, #0]
 80222a6:	689b      	ldr	r3, [r3, #8]
 80222a8:	6878      	ldr	r0, [r7, #4]
 80222aa:	4619      	mov	r1, r3
 80222ac:	f7ff ff3a 	bl	8022124 <d_find_pack>
 80222b0:	4603      	mov	r3, r0
 80222b2:	e013      	b.n	80222dc <d_find_pack+0x1b8>
 80222b4:	683b      	ldr	r3, [r7, #0]
 80222b6:	685b      	ldr	r3, [r3, #4]
 80222b8:	6878      	ldr	r0, [r7, #4]
 80222ba:	4619      	mov	r1, r3
 80222bc:	f7ff ff32 	bl	8022124 <d_find_pack>
 80222c0:	4603      	mov	r3, r0
 80222c2:	60fb      	str	r3, [r7, #12]
 80222c4:	68fb      	ldr	r3, [r7, #12]
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	d001      	beq.n	80222ce <d_find_pack+0x1aa>
 80222ca:	68fb      	ldr	r3, [r7, #12]
 80222cc:	e006      	b.n	80222dc <d_find_pack+0x1b8>
 80222ce:	683b      	ldr	r3, [r7, #0]
 80222d0:	689b      	ldr	r3, [r3, #8]
 80222d2:	6878      	ldr	r0, [r7, #4]
 80222d4:	4619      	mov	r1, r3
 80222d6:	f7ff ff25 	bl	8022124 <d_find_pack>
 80222da:	4603      	mov	r3, r0
 80222dc:	4618      	mov	r0, r3
 80222de:	f107 0710 	add.w	r7, r7, #16
 80222e2:	46bd      	mov	sp, r7
 80222e4:	bd80      	pop	{r7, pc}
 80222e6:	bf00      	nop

080222e8 <d_pack_length>:
 80222e8:	b480      	push	{r7}
 80222ea:	b085      	sub	sp, #20
 80222ec:	af00      	add	r7, sp, #0
 80222ee:	6078      	str	r0, [r7, #4]
 80222f0:	f04f 0300 	mov.w	r3, #0
 80222f4:	60fb      	str	r3, [r7, #12]
 80222f6:	e006      	b.n	8022306 <d_pack_length+0x1e>
 80222f8:	68fb      	ldr	r3, [r7, #12]
 80222fa:	f103 0301 	add.w	r3, r3, #1
 80222fe:	60fb      	str	r3, [r7, #12]
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	689b      	ldr	r3, [r3, #8]
 8022304:	607b      	str	r3, [r7, #4]
 8022306:	687b      	ldr	r3, [r7, #4]
 8022308:	2b00      	cmp	r3, #0
 802230a:	d007      	beq.n	802231c <d_pack_length+0x34>
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	781b      	ldrb	r3, [r3, #0]
 8022310:	2b2b      	cmp	r3, #43	; 0x2b
 8022312:	d103      	bne.n	802231c <d_pack_length+0x34>
 8022314:	687b      	ldr	r3, [r7, #4]
 8022316:	685b      	ldr	r3, [r3, #4]
 8022318:	2b00      	cmp	r3, #0
 802231a:	d1ed      	bne.n	80222f8 <d_pack_length+0x10>
 802231c:	68fb      	ldr	r3, [r7, #12]
 802231e:	4618      	mov	r0, r3
 8022320:	f107 0714 	add.w	r7, r7, #20
 8022324:	46bd      	mov	sp, r7
 8022326:	bc80      	pop	{r7}
 8022328:	4770      	bx	lr
 802232a:	bf00      	nop

0802232c <d_print_subexpr>:
 802232c:	b580      	push	{r7, lr}
 802232e:	b084      	sub	sp, #16
 8022330:	af00      	add	r7, sp, #0
 8022332:	6078      	str	r0, [r7, #4]
 8022334:	6039      	str	r1, [r7, #0]
 8022336:	f04f 0300 	mov.w	r3, #0
 802233a:	60fb      	str	r3, [r7, #12]
 802233c:	683b      	ldr	r3, [r7, #0]
 802233e:	781b      	ldrb	r3, [r3, #0]
 8022340:	2b00      	cmp	r3, #0
 8022342:	d003      	beq.n	802234c <d_print_subexpr+0x20>
 8022344:	683b      	ldr	r3, [r7, #0]
 8022346:	781b      	ldrb	r3, [r3, #0]
 8022348:	2b06      	cmp	r3, #6
 802234a:	d102      	bne.n	8022352 <d_print_subexpr+0x26>
 802234c:	f04f 0301 	mov.w	r3, #1
 8022350:	60fb      	str	r3, [r7, #12]
 8022352:	68fb      	ldr	r3, [r7, #12]
 8022354:	2b00      	cmp	r3, #0
 8022356:	d104      	bne.n	8022362 <d_print_subexpr+0x36>
 8022358:	6878      	ldr	r0, [r7, #4]
 802235a:	f04f 0128 	mov.w	r1, #40	; 0x28
 802235e:	f7ff fda9 	bl	8021eb4 <d_append_char>
 8022362:	6878      	ldr	r0, [r7, #4]
 8022364:	6839      	ldr	r1, [r7, #0]
 8022366:	f000 f80d 	bl	8022384 <d_print_comp>
 802236a:	68fb      	ldr	r3, [r7, #12]
 802236c:	2b00      	cmp	r3, #0
 802236e:	d104      	bne.n	802237a <d_print_subexpr+0x4e>
 8022370:	6878      	ldr	r0, [r7, #4]
 8022372:	f04f 0129 	mov.w	r1, #41	; 0x29
 8022376:	f7ff fd9d 	bl	8021eb4 <d_append_char>
 802237a:	f107 0710 	add.w	r7, r7, #16
 802237e:	46bd      	mov	sp, r7
 8022380:	bd80      	pop	{r7, pc}
 8022382:	bf00      	nop

08022384 <d_print_comp>:
 8022384:	b590      	push	{r4, r7, lr}
 8022386:	b0b5      	sub	sp, #212	; 0xd4
 8022388:	af00      	add	r7, sp, #0
 802238a:	6078      	str	r0, [r7, #4]
 802238c:	6039      	str	r1, [r7, #0]
 802238e:	683b      	ldr	r3, [r7, #0]
 8022390:	2b00      	cmp	r3, #0
 8022392:	d104      	bne.n	802239e <d_print_comp+0x1a>
 8022394:	6878      	ldr	r0, [r7, #4]
 8022396:	f7ff fd43 	bl	8021e20 <d_print_error>
 802239a:	f001 b8f3 	b.w	8023584 <d_print_comp+0x1200>
 802239e:	6878      	ldr	r0, [r7, #4]
 80223a0:	f7ff fd4c 	bl	8021e3c <d_print_saw_error>
 80223a4:	4603      	mov	r3, r0
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	f041 80e1 	bne.w	802356e <d_print_comp+0x11ea>
 80223ac:	683b      	ldr	r3, [r7, #0]
 80223ae:	781b      	ldrb	r3, [r3, #0]
 80223b0:	2b42      	cmp	r3, #66	; 0x42
 80223b2:	f201 80d7 	bhi.w	8023564 <d_print_comp+0x11e0>
 80223b6:	a101      	add	r1, pc, #4	; (adr r1, 80223bc <d_print_comp+0x38>)
 80223b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80223bc:	080224c9 	.word	0x080224c9
 80223c0:	08022501 	.word	0x08022501
 80223c4:	08022501 	.word	0x08022501
 80223c8:	08022543 	.word	0x08022543
 80223cc:	08022823 	.word	0x08022823
 80223d0:	080228fd 	.word	0x080228fd
 80223d4:	08023463 	.word	0x08023463
 80223d8:	08022973 	.word	0x08022973
 80223dc:	08022983 	.word	0x08022983
 80223e0:	0802299d 	.word	0x0802299d
 80223e4:	080229bb 	.word	0x080229bb
 80223e8:	080229d9 	.word	0x080229d9
 80223ec:	08022a11 	.word	0x08022a11
 80223f0:	08022a2f 	.word	0x08022a2f
 80223f4:	08022a4d 	.word	0x08022a4d
 80223f8:	08022a6b 	.word	0x08022a6b
 80223fc:	08022a89 	.word	0x08022a89
 8022400:	08022aa7 	.word	0x08022aa7
 8022404:	08022ac5 	.word	0x08022ac5
 8022408:	08022ae3 	.word	0x08022ae3
 802240c:	08022b01 	.word	0x08022b01
 8022410:	08022b1f 	.word	0x08022b1f
 8022414:	08022b3d 	.word	0x08022b3d
 8022418:	08022b53 	.word	0x08022b53
 802241c:	08022b53 	.word	0x08022b53
 8022420:	08022b53 	.word	0x08022b53
 8022424:	08022bc3 	.word	0x08022bc3
 8022428:	08022bc3 	.word	0x08022bc3
 802242c:	08022bc3 	.word	0x08022bc3
 8022430:	08022bc3 	.word	0x08022bc3
 8022434:	08022bc3 	.word	0x08022bc3
 8022438:	08022bc3 	.word	0x08022bc3
 802243c:	08022bc3 	.word	0x08022bc3
 8022440:	08022bc3 	.word	0x08022bc3
 8022444:	08022bc3 	.word	0x08022bc3
 8022448:	08022c0d 	.word	0x08022c0d
 802244c:	08022c4d 	.word	0x08022c4d
 8022450:	08022c5d 	.word	0x08022c5d
 8022454:	08022cf9 	.word	0x08022cf9
 8022458:	08022e4b 	.word	0x08022e4b
 802245c:	08022e93 	.word	0x08022e93
 8022460:	08022e4b 	.word	0x08022e4b
 8022464:	08022ef3 	.word	0x08022ef3
 8022468:	08022ef3 	.word	0x08022ef3
 802246c:	08022f81 	.word	0x08022f81
 8022470:	08022fcd 	.word	0x08022fcd
 8022474:	08022fe9 	.word	0x08022fe9
 8022478:	08023001 	.word	0x08023001
 802247c:	08023047 	.word	0x08023047
 8022480:	08023145 	.word	0x08023145
 8022484:	0802314d 	.word	0x0802314d
 8022488:	080231b5 	.word	0x080231b5
 802248c:	080231b5 	.word	0x080231b5
 8022490:	080231bd 	.word	0x080231bd
 8022494:	080231bd 	.word	0x080231bd
 8022498:	08023359 	.word	0x08023359
 802249c:	08023375 	.word	0x08023375
 80224a0:	0802338f 	.word	0x0802338f
 80224a4:	0802334b 	.word	0x0802334b
 80224a8:	0802339f 	.word	0x0802339f
 80224ac:	0802348d 	.word	0x0802348d
 80224b0:	080234a9 	.word	0x080234a9
 80224b4:	080234c5 	.word	0x080234c5
 80224b8:	08023565 	.word	0x08023565
 80224bc:	08023509 	.word	0x08023509
 80224c0:	080233c5 	.word	0x080233c5
 80224c4:	08023533 	.word	0x08023533
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	681b      	ldr	r3, [r3, #0]
 80224cc:	f003 0304 	and.w	r3, r3, #4
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d10a      	bne.n	80224ea <d_print_comp+0x166>
 80224d4:	683b      	ldr	r3, [r7, #0]
 80224d6:	685a      	ldr	r2, [r3, #4]
 80224d8:	683b      	ldr	r3, [r7, #0]
 80224da:	689b      	ldr	r3, [r3, #8]
 80224dc:	6878      	ldr	r0, [r7, #4]
 80224de:	4611      	mov	r1, r2
 80224e0:	461a      	mov	r2, r3
 80224e2:	f7ff fd09 	bl	8021ef8 <d_append_buffer>
 80224e6:	f001 b84d 	b.w	8023584 <d_print_comp+0x1200>
 80224ea:	683b      	ldr	r3, [r7, #0]
 80224ec:	685a      	ldr	r2, [r3, #4]
 80224ee:	683b      	ldr	r3, [r7, #0]
 80224f0:	689b      	ldr	r3, [r3, #8]
 80224f2:	6878      	ldr	r0, [r7, #4]
 80224f4:	4611      	mov	r1, r2
 80224f6:	461a      	mov	r2, r3
 80224f8:	f001 f848 	bl	802358c <d_print_java_identifier>
 80224fc:	f001 b842 	b.w	8023584 <d_print_comp+0x1200>
 8022500:	683b      	ldr	r3, [r7, #0]
 8022502:	685b      	ldr	r3, [r3, #4]
 8022504:	6878      	ldr	r0, [r7, #4]
 8022506:	4619      	mov	r1, r3
 8022508:	f7ff ff3c 	bl	8022384 <d_print_comp>
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	f003 0304 	and.w	r3, r3, #4
 8022514:	2b00      	cmp	r3, #0
 8022516:	d107      	bne.n	8022528 <d_print_comp+0x1a4>
 8022518:	6878      	ldr	r0, [r7, #4]
 802251a:	f24e 51a8 	movw	r1, #58792	; 0xe5a8
 802251e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022522:	f7ff fd07 	bl	8021f34 <d_append_string>
 8022526:	e004      	b.n	8022532 <d_print_comp+0x1ae>
 8022528:	6878      	ldr	r0, [r7, #4]
 802252a:	f04f 012e 	mov.w	r1, #46	; 0x2e
 802252e:	f7ff fcc1 	bl	8021eb4 <d_append_char>
 8022532:	683b      	ldr	r3, [r7, #0]
 8022534:	689b      	ldr	r3, [r3, #8]
 8022536:	6878      	ldr	r0, [r7, #4]
 8022538:	4619      	mov	r1, r3
 802253a:	f7ff ff23 	bl	8022384 <d_print_comp>
 802253e:	f001 b821 	b.w	8023584 <d_print_comp+0x1200>
 8022542:	687b      	ldr	r3, [r7, #4]
 8022544:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	f04f 0200 	mov.w	r2, #0
 8022552:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022556:	f04f 0300 	mov.w	r3, #0
 802255a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802255e:	683b      	ldr	r3, [r7, #0]
 8022560:	685b      	ldr	r3, [r3, #4]
 8022562:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8022566:	e05e      	b.n	8022626 <d_print_comp+0x2a2>
 8022568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802256c:	2b03      	cmp	r3, #3
 802256e:	d904      	bls.n	802257a <d_print_comp+0x1f6>
 8022570:	6878      	ldr	r0, [r7, #4]
 8022572:	f7ff fc55 	bl	8021e20 <d_print_error>
 8022576:	f001 b805 	b.w	8023584 <d_print_comp+0x1200>
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8022580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8022584:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022588:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 802258c:	18cb      	adds	r3, r1, r3
 802258e:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8022592:	601a      	str	r2, [r3, #0]
 8022594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8022598:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802259c:	f107 020c 	add.w	r2, r7, #12
 80225a0:	18d2      	adds	r2, r2, r3
 80225a2:	687b      	ldr	r3, [r7, #4]
 80225a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80225a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80225ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80225b0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80225b4:	18d3      	adds	r3, r2, r3
 80225b6:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 80225ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80225be:	601a      	str	r2, [r3, #0]
 80225c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80225c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80225c8:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80225cc:	18cb      	adds	r3, r1, r3
 80225ce:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 80225d2:	f04f 0200 	mov.w	r2, #0
 80225d6:	601a      	str	r2, [r3, #0]
 80225d8:	687b      	ldr	r3, [r7, #4]
 80225da:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80225de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80225e2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80225e6:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80225ea:	18cb      	adds	r3, r1, r3
 80225ec:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 80225f0:	601a      	str	r2, [r3, #0]
 80225f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80225f6:	f103 0301 	add.w	r3, r3, #1
 80225fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80225fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8022602:	781b      	ldrb	r3, [r3, #0]
 8022604:	2b1a      	cmp	r3, #26
 8022606:	d009      	beq.n	802261c <d_print_comp+0x298>
 8022608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802260c:	781b      	ldrb	r3, [r3, #0]
 802260e:	2b1b      	cmp	r3, #27
 8022610:	d004      	beq.n	802261c <d_print_comp+0x298>
 8022612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8022616:	781b      	ldrb	r3, [r3, #0]
 8022618:	2b1c      	cmp	r3, #28
 802261a:	d109      	bne.n	8022630 <d_print_comp+0x2ac>
 802261c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8022620:	685b      	ldr	r3, [r3, #4]
 8022622:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8022626:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802262a:	2b00      	cmp	r3, #0
 802262c:	d19c      	bne.n	8022568 <d_print_comp+0x1e4>
 802262e:	e000      	b.n	8022632 <d_print_comp+0x2ae>
 8022630:	bf00      	nop
 8022632:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8022636:	2b00      	cmp	r3, #0
 8022638:	d104      	bne.n	8022644 <d_print_comp+0x2c0>
 802263a:	6878      	ldr	r0, [r7, #4]
 802263c:	f7ff fbf0 	bl	8021e20 <d_print_error>
 8022640:	f000 bfa0 	b.w	8023584 <d_print_comp+0x1200>
 8022644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8022648:	781b      	ldrb	r3, [r3, #0]
 802264a:	2b04      	cmp	r3, #4
 802264c:	d10c      	bne.n	8022668 <d_print_comp+0x2e4>
 802264e:	687b      	ldr	r3, [r7, #4]
 8022650:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8022654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802265c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8022660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8022664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802266c:	781b      	ldrb	r3, [r3, #0]
 802266e:	2b02      	cmp	r3, #2
 8022670:	f040 8097 	bne.w	80227a2 <d_print_comp+0x41e>
 8022674:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8022678:	689b      	ldr	r3, [r3, #8]
 802267a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802267e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8022682:	781b      	ldrb	r3, [r3, #0]
 8022684:	2b3f      	cmp	r3, #63	; 0x3f
 8022686:	d17a      	bne.n	802277e <d_print_comp+0x3fa>
 8022688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802268c:	685b      	ldr	r3, [r3, #4]
 802268e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8022692:	e074      	b.n	802277e <d_print_comp+0x3fa>
 8022694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8022698:	2b03      	cmp	r3, #3
 802269a:	d904      	bls.n	80226a6 <d_print_comp+0x322>
 802269c:	6878      	ldr	r0, [r7, #4]
 802269e:	f7ff fbbf 	bl	8021e20 <d_print_error>
 80226a2:	f000 bf6f 	b.w	8023584 <d_print_comp+0x1200>
 80226a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80226aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80226ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80226b2:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80226b6:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80226ba:	188a      	adds	r2, r1, r2
 80226bc:	f1a2 02c4 	sub.w	r2, r2, #196	; 0xc4
 80226c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80226c4:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80226c8:	18cb      	adds	r3, r1, r3
 80226ca:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 80226ce:	4614      	mov	r4, r2
 80226d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80226d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80226d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80226da:	f103 33ff 	add.w	r3, r3, #4294967295
 80226de:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80226e2:	f107 020c 	add.w	r2, r7, #12
 80226e6:	18d2      	adds	r2, r2, r3
 80226e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80226ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80226f0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80226f4:	18cb      	adds	r3, r1, r3
 80226f6:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 80226fa:	601a      	str	r2, [r3, #0]
 80226fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8022700:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022704:	f107 020c 	add.w	r2, r7, #12
 8022708:	18d2      	adds	r2, r2, r3
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8022714:	f103 33ff 	add.w	r3, r3, #4294967295
 8022718:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802271c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8022720:	18d3      	adds	r3, r2, r3
 8022722:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8022726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802272a:	601a      	str	r2, [r3, #0]
 802272c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8022730:	f103 33ff 	add.w	r3, r3, #4294967295
 8022734:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022738:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 802273c:	18cb      	adds	r3, r1, r3
 802273e:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 8022742:	f04f 0200 	mov.w	r2, #0
 8022746:	601a      	str	r2, [r3, #0]
 8022748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802274c:	f103 33ff 	add.w	r3, r3, #4294967295
 8022750:	687a      	ldr	r2, [r7, #4]
 8022752:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8022756:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802275a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 802275e:	18cb      	adds	r3, r1, r3
 8022760:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 8022764:	601a      	str	r2, [r3, #0]
 8022766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802276a:	f103 0301 	add.w	r3, r3, #1
 802276e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8022772:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8022776:	685b      	ldr	r3, [r3, #4]
 8022778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802277c:	e000      	b.n	8022780 <d_print_comp+0x3fc>
 802277e:	bf00      	nop
 8022780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8022784:	781b      	ldrb	r3, [r3, #0]
 8022786:	2b1a      	cmp	r3, #26
 8022788:	d084      	beq.n	8022694 <d_print_comp+0x310>
 802278a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802278e:	781b      	ldrb	r3, [r3, #0]
 8022790:	2b1b      	cmp	r3, #27
 8022792:	f43f af7f 	beq.w	8022694 <d_print_comp+0x310>
 8022796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802279a:	781b      	ldrb	r3, [r3, #0]
 802279c:	2b1c      	cmp	r3, #28
 802279e:	f43f af79 	beq.w	8022694 <d_print_comp+0x310>
 80227a2:	683b      	ldr	r3, [r7, #0]
 80227a4:	689b      	ldr	r3, [r3, #8]
 80227a6:	6878      	ldr	r0, [r7, #4]
 80227a8:	4619      	mov	r1, r3
 80227aa:	f7ff fdeb 	bl	8022384 <d_print_comp>
 80227ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80227b2:	781b      	ldrb	r3, [r3, #0]
 80227b4:	2b04      	cmp	r3, #4
 80227b6:	d129      	bne.n	802280c <d_print_comp+0x488>
 80227b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80227c0:	e024      	b.n	802280c <d_print_comp+0x488>
 80227c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80227c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80227ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80227ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80227d2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80227d6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80227da:	18d3      	adds	r3, r2, r3
 80227dc:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 80227e0:	681b      	ldr	r3, [r3, #0]
 80227e2:	2b00      	cmp	r3, #0
 80227e4:	d112      	bne.n	802280c <d_print_comp+0x488>
 80227e6:	6878      	ldr	r0, [r7, #4]
 80227e8:	f04f 0120 	mov.w	r1, #32
 80227ec:	f7ff fb62 	bl	8021eb4 <d_append_char>
 80227f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80227f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80227f8:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80227fc:	18cb      	adds	r3, r1, r3
 80227fe:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8022802:	681b      	ldr	r3, [r3, #0]
 8022804:	6878      	ldr	r0, [r7, #4]
 8022806:	4619      	mov	r1, r3
 8022808:	f001 f82a 	bl	8023860 <d_print_mod>
 802280c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8022810:	2b00      	cmp	r3, #0
 8022812:	d1d6      	bne.n	80227c2 <d_print_comp+0x43e>
 8022814:	687b      	ldr	r3, [r7, #4]
 8022816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802281a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 802281e:	f000 beb1 	b.w	8023584 <d_print_comp+0x1200>
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802282c:	687b      	ldr	r3, [r7, #4]
 802282e:	f04f 0200 	mov.w	r2, #0
 8022832:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022836:	683b      	ldr	r3, [r7, #0]
 8022838:	685b      	ldr	r3, [r3, #4]
 802283a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802283e:	687b      	ldr	r3, [r7, #4]
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	f003 0304 	and.w	r3, r3, #4
 8022846:	2b00      	cmp	r3, #0
 8022848:	d026      	beq.n	8022898 <d_print_comp+0x514>
 802284a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802284e:	781b      	ldrb	r3, [r3, #0]
 8022850:	2b00      	cmp	r3, #0
 8022852:	d121      	bne.n	8022898 <d_print_comp+0x514>
 8022854:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8022858:	689b      	ldr	r3, [r3, #8]
 802285a:	2b06      	cmp	r3, #6
 802285c:	d11c      	bne.n	8022898 <d_print_comp+0x514>
 802285e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8022862:	685b      	ldr	r3, [r3, #4]
 8022864:	4618      	mov	r0, r3
 8022866:	f24e 51ac 	movw	r1, #58796	; 0xe5ac
 802286a:	f6c0 0102 	movt	r1, #2050	; 0x802
 802286e:	f04f 0206 	mov.w	r2, #6
 8022872:	f004 f883 	bl	802697c <strncmp>
 8022876:	4603      	mov	r3, r0
 8022878:	2b00      	cmp	r3, #0
 802287a:	d10d      	bne.n	8022898 <d_print_comp+0x514>
 802287c:	683b      	ldr	r3, [r7, #0]
 802287e:	689b      	ldr	r3, [r3, #8]
 8022880:	6878      	ldr	r0, [r7, #4]
 8022882:	4619      	mov	r1, r3
 8022884:	f7ff fd7e 	bl	8022384 <d_print_comp>
 8022888:	6878      	ldr	r0, [r7, #4]
 802288a:	f64d 61f0 	movw	r1, #57072	; 0xdef0
 802288e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022892:	f7ff fb4f 	bl	8021f34 <d_append_string>
 8022896:	e02a      	b.n	80228ee <d_print_comp+0x56a>
 8022898:	6878      	ldr	r0, [r7, #4]
 802289a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802289e:	f7ff fd71 	bl	8022384 <d_print_comp>
 80228a2:	6878      	ldr	r0, [r7, #4]
 80228a4:	f7ff fb72 	bl	8021f8c <d_last_char>
 80228a8:	4603      	mov	r3, r0
 80228aa:	2b3c      	cmp	r3, #60	; 0x3c
 80228ac:	d104      	bne.n	80228b8 <d_print_comp+0x534>
 80228ae:	6878      	ldr	r0, [r7, #4]
 80228b0:	f04f 0120 	mov.w	r1, #32
 80228b4:	f7ff fafe 	bl	8021eb4 <d_append_char>
 80228b8:	6878      	ldr	r0, [r7, #4]
 80228ba:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80228be:	f7ff faf9 	bl	8021eb4 <d_append_char>
 80228c2:	683b      	ldr	r3, [r7, #0]
 80228c4:	689b      	ldr	r3, [r3, #8]
 80228c6:	6878      	ldr	r0, [r7, #4]
 80228c8:	4619      	mov	r1, r3
 80228ca:	f7ff fd5b 	bl	8022384 <d_print_comp>
 80228ce:	6878      	ldr	r0, [r7, #4]
 80228d0:	f7ff fb5c 	bl	8021f8c <d_last_char>
 80228d4:	4603      	mov	r3, r0
 80228d6:	2b3e      	cmp	r3, #62	; 0x3e
 80228d8:	d104      	bne.n	80228e4 <d_print_comp+0x560>
 80228da:	6878      	ldr	r0, [r7, #4]
 80228dc:	f04f 0120 	mov.w	r1, #32
 80228e0:	f7ff fae8 	bl	8021eb4 <d_append_char>
 80228e4:	6878      	ldr	r0, [r7, #4]
 80228e6:	f04f 013e 	mov.w	r1, #62	; 0x3e
 80228ea:	f7ff fae3 	bl	8021eb4 <d_append_char>
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80228f4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80228f8:	f000 be44 	b.w	8023584 <d_print_comp+0x1200>
 80228fc:	6878      	ldr	r0, [r7, #4]
 80228fe:	6839      	ldr	r1, [r7, #0]
 8022900:	f7ff fbee 	bl	80220e0 <d_lookup_template_argument>
 8022904:	4603      	mov	r3, r0
 8022906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802290a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802290e:	2b00      	cmp	r3, #0
 8022910:	d00f      	beq.n	8022932 <d_print_comp+0x5ae>
 8022912:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8022916:	781b      	ldrb	r3, [r3, #0]
 8022918:	2b2b      	cmp	r3, #43	; 0x2b
 802291a:	d10a      	bne.n	8022932 <d_print_comp+0x5ae>
 802291c:	687b      	ldr	r3, [r7, #4]
 802291e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8022922:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8022926:	4619      	mov	r1, r3
 8022928:	f7ff fbaa 	bl	8022080 <d_index_template_argument>
 802292c:	4603      	mov	r3, r0
 802292e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8022932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8022936:	2b00      	cmp	r3, #0
 8022938:	d104      	bne.n	8022944 <d_print_comp+0x5c0>
 802293a:	6878      	ldr	r0, [r7, #4]
 802293c:	f7ff fa70 	bl	8021e20 <d_print_error>
 8022940:	f000 be20 	b.w	8023584 <d_print_comp+0x1200>
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 802294a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802294e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8022952:	681a      	ldr	r2, [r3, #0]
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 802295a:	6878      	ldr	r0, [r7, #4]
 802295c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8022960:	f7ff fd10 	bl	8022384 <d_print_comp>
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802296a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 802296e:	f000 be09 	b.w	8023584 <d_print_comp+0x1200>
 8022972:	683b      	ldr	r3, [r7, #0]
 8022974:	689b      	ldr	r3, [r3, #8]
 8022976:	6878      	ldr	r0, [r7, #4]
 8022978:	4619      	mov	r1, r3
 802297a:	f7ff fd03 	bl	8022384 <d_print_comp>
 802297e:	f000 be01 	b.w	8023584 <d_print_comp+0x1200>
 8022982:	6878      	ldr	r0, [r7, #4]
 8022984:	f04f 017e 	mov.w	r1, #126	; 0x7e
 8022988:	f7ff fa94 	bl	8021eb4 <d_append_char>
 802298c:	683b      	ldr	r3, [r7, #0]
 802298e:	689b      	ldr	r3, [r3, #8]
 8022990:	6878      	ldr	r0, [r7, #4]
 8022992:	4619      	mov	r1, r3
 8022994:	f7ff fcf6 	bl	8022384 <d_print_comp>
 8022998:	f000 bdf4 	b.w	8023584 <d_print_comp+0x1200>
 802299c:	6878      	ldr	r0, [r7, #4]
 802299e:	f24e 51b4 	movw	r1, #58804	; 0xe5b4
 80229a2:	f6c0 0102 	movt	r1, #2050	; 0x802
 80229a6:	f7ff fac5 	bl	8021f34 <d_append_string>
 80229aa:	683b      	ldr	r3, [r7, #0]
 80229ac:	685b      	ldr	r3, [r3, #4]
 80229ae:	6878      	ldr	r0, [r7, #4]
 80229b0:	4619      	mov	r1, r3
 80229b2:	f7ff fce7 	bl	8022384 <d_print_comp>
 80229b6:	f000 bde5 	b.w	8023584 <d_print_comp+0x1200>
 80229ba:	6878      	ldr	r0, [r7, #4]
 80229bc:	f24e 51c0 	movw	r1, #58816	; 0xe5c0
 80229c0:	f6c0 0102 	movt	r1, #2050	; 0x802
 80229c4:	f7ff fab6 	bl	8021f34 <d_append_string>
 80229c8:	683b      	ldr	r3, [r7, #0]
 80229ca:	685b      	ldr	r3, [r3, #4]
 80229cc:	6878      	ldr	r0, [r7, #4]
 80229ce:	4619      	mov	r1, r3
 80229d0:	f7ff fcd8 	bl	8022384 <d_print_comp>
 80229d4:	f000 bdd6 	b.w	8023584 <d_print_comp+0x1200>
 80229d8:	6878      	ldr	r0, [r7, #4]
 80229da:	f24e 51cc 	movw	r1, #58828	; 0xe5cc
 80229de:	f6c0 0102 	movt	r1, #2050	; 0x802
 80229e2:	f7ff faa7 	bl	8021f34 <d_append_string>
 80229e6:	683b      	ldr	r3, [r7, #0]
 80229e8:	685b      	ldr	r3, [r3, #4]
 80229ea:	6878      	ldr	r0, [r7, #4]
 80229ec:	4619      	mov	r1, r3
 80229ee:	f7ff fcc9 	bl	8022384 <d_print_comp>
 80229f2:	6878      	ldr	r0, [r7, #4]
 80229f4:	f24e 51e8 	movw	r1, #58856	; 0xe5e8
 80229f8:	f6c0 0102 	movt	r1, #2050	; 0x802
 80229fc:	f7ff fa9a 	bl	8021f34 <d_append_string>
 8022a00:	683b      	ldr	r3, [r7, #0]
 8022a02:	689b      	ldr	r3, [r3, #8]
 8022a04:	6878      	ldr	r0, [r7, #4]
 8022a06:	4619      	mov	r1, r3
 8022a08:	f7ff fcbc 	bl	8022384 <d_print_comp>
 8022a0c:	f000 bdba 	b.w	8023584 <d_print_comp+0x1200>
 8022a10:	6878      	ldr	r0, [r7, #4]
 8022a12:	f24e 51f0 	movw	r1, #58864	; 0xe5f0
 8022a16:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022a1a:	f7ff fa8b 	bl	8021f34 <d_append_string>
 8022a1e:	683b      	ldr	r3, [r7, #0]
 8022a20:	685b      	ldr	r3, [r3, #4]
 8022a22:	6878      	ldr	r0, [r7, #4]
 8022a24:	4619      	mov	r1, r3
 8022a26:	f7ff fcad 	bl	8022384 <d_print_comp>
 8022a2a:	f000 bdab 	b.w	8023584 <d_print_comp+0x1200>
 8022a2e:	6878      	ldr	r0, [r7, #4]
 8022a30:	f24e 6100 	movw	r1, #58880	; 0xe600
 8022a34:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022a38:	f7ff fa7c 	bl	8021f34 <d_append_string>
 8022a3c:	683b      	ldr	r3, [r7, #0]
 8022a3e:	685b      	ldr	r3, [r3, #4]
 8022a40:	6878      	ldr	r0, [r7, #4]
 8022a42:	4619      	mov	r1, r3
 8022a44:	f7ff fc9e 	bl	8022384 <d_print_comp>
 8022a48:	f000 bd9c 	b.w	8023584 <d_print_comp+0x1200>
 8022a4c:	6878      	ldr	r0, [r7, #4]
 8022a4e:	f24e 6114 	movw	r1, #58900	; 0xe614
 8022a52:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022a56:	f7ff fa6d 	bl	8021f34 <d_append_string>
 8022a5a:	683b      	ldr	r3, [r7, #0]
 8022a5c:	685b      	ldr	r3, [r3, #4]
 8022a5e:	6878      	ldr	r0, [r7, #4]
 8022a60:	4619      	mov	r1, r3
 8022a62:	f7ff fc8f 	bl	8022384 <d_print_comp>
 8022a66:	f000 bd8d 	b.w	8023584 <d_print_comp+0x1200>
 8022a6a:	6878      	ldr	r0, [r7, #4]
 8022a6c:	f24e 6128 	movw	r1, #58920	; 0xe628
 8022a70:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022a74:	f7ff fa5e 	bl	8021f34 <d_append_string>
 8022a78:	683b      	ldr	r3, [r7, #0]
 8022a7a:	685b      	ldr	r3, [r3, #4]
 8022a7c:	6878      	ldr	r0, [r7, #4]
 8022a7e:	4619      	mov	r1, r3
 8022a80:	f7ff fc80 	bl	8022384 <d_print_comp>
 8022a84:	f000 bd7e 	b.w	8023584 <d_print_comp+0x1200>
 8022a88:	6878      	ldr	r0, [r7, #4]
 8022a8a:	f24e 6140 	movw	r1, #58944	; 0xe640
 8022a8e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022a92:	f7ff fa4f 	bl	8021f34 <d_append_string>
 8022a96:	683b      	ldr	r3, [r7, #0]
 8022a98:	685b      	ldr	r3, [r3, #4]
 8022a9a:	6878      	ldr	r0, [r7, #4]
 8022a9c:	4619      	mov	r1, r3
 8022a9e:	f7ff fc71 	bl	8022384 <d_print_comp>
 8022aa2:	f000 bd6f 	b.w	8023584 <d_print_comp+0x1200>
 8022aa6:	6878      	ldr	r0, [r7, #4]
 8022aa8:	f24e 6154 	movw	r1, #58964	; 0xe654
 8022aac:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022ab0:	f7ff fa40 	bl	8021f34 <d_append_string>
 8022ab4:	683b      	ldr	r3, [r7, #0]
 8022ab6:	685b      	ldr	r3, [r3, #4]
 8022ab8:	6878      	ldr	r0, [r7, #4]
 8022aba:	4619      	mov	r1, r3
 8022abc:	f7ff fc62 	bl	8022384 <d_print_comp>
 8022ac0:	f000 bd60 	b.w	8023584 <d_print_comp+0x1200>
 8022ac4:	6878      	ldr	r0, [r7, #4]
 8022ac6:	f24e 6170 	movw	r1, #58992	; 0xe670
 8022aca:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022ace:	f7ff fa31 	bl	8021f34 <d_append_string>
 8022ad2:	683b      	ldr	r3, [r7, #0]
 8022ad4:	685b      	ldr	r3, [r3, #4]
 8022ad6:	6878      	ldr	r0, [r7, #4]
 8022ad8:	4619      	mov	r1, r3
 8022ada:	f7ff fc53 	bl	8022384 <d_print_comp>
 8022ade:	f000 bd51 	b.w	8023584 <d_print_comp+0x1200>
 8022ae2:	6878      	ldr	r0, [r7, #4]
 8022ae4:	f24e 6180 	movw	r1, #59008	; 0xe680
 8022ae8:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022aec:	f7ff fa22 	bl	8021f34 <d_append_string>
 8022af0:	683b      	ldr	r3, [r7, #0]
 8022af2:	685b      	ldr	r3, [r3, #4]
 8022af4:	6878      	ldr	r0, [r7, #4]
 8022af6:	4619      	mov	r1, r3
 8022af8:	f7ff fc44 	bl	8022384 <d_print_comp>
 8022afc:	f000 bd42 	b.w	8023584 <d_print_comp+0x1200>
 8022b00:	6878      	ldr	r0, [r7, #4]
 8022b02:	f24e 6194 	movw	r1, #59028	; 0xe694
 8022b06:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022b0a:	f7ff fa13 	bl	8021f34 <d_append_string>
 8022b0e:	683b      	ldr	r3, [r7, #0]
 8022b10:	685b      	ldr	r3, [r3, #4]
 8022b12:	6878      	ldr	r0, [r7, #4]
 8022b14:	4619      	mov	r1, r3
 8022b16:	f7ff fc35 	bl	8022384 <d_print_comp>
 8022b1a:	f000 bd33 	b.w	8023584 <d_print_comp+0x1200>
 8022b1e:	6878      	ldr	r0, [r7, #4]
 8022b20:	f24e 61b0 	movw	r1, #59056	; 0xe6b0
 8022b24:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022b28:	f7ff fa04 	bl	8021f34 <d_append_string>
 8022b2c:	683b      	ldr	r3, [r7, #0]
 8022b2e:	685b      	ldr	r3, [r3, #4]
 8022b30:	6878      	ldr	r0, [r7, #4]
 8022b32:	4619      	mov	r1, r3
 8022b34:	f7ff fc26 	bl	8022384 <d_print_comp>
 8022b38:	f000 bd24 	b.w	8023584 <d_print_comp+0x1200>
 8022b3c:	683b      	ldr	r3, [r7, #0]
 8022b3e:	685a      	ldr	r2, [r3, #4]
 8022b40:	683b      	ldr	r3, [r7, #0]
 8022b42:	689b      	ldr	r3, [r3, #8]
 8022b44:	6878      	ldr	r0, [r7, #4]
 8022b46:	4611      	mov	r1, r2
 8022b48:	461a      	mov	r2, r3
 8022b4a:	f7ff f9d5 	bl	8021ef8 <d_append_buffer>
 8022b4e:	f000 bd19 	b.w	8023584 <d_print_comp+0x1200>
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022b58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8022b5c:	e02b      	b.n	8022bb6 <d_print_comp+0x832>
 8022b5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8022b62:	689b      	ldr	r3, [r3, #8]
 8022b64:	2b00      	cmp	r3, #0
 8022b66:	d121      	bne.n	8022bac <d_print_comp+0x828>
 8022b68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8022b6c:	685b      	ldr	r3, [r3, #4]
 8022b6e:	781b      	ldrb	r3, [r3, #0]
 8022b70:	2b17      	cmp	r3, #23
 8022b72:	d00b      	beq.n	8022b8c <d_print_comp+0x808>
 8022b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8022b78:	685b      	ldr	r3, [r3, #4]
 8022b7a:	781b      	ldrb	r3, [r3, #0]
 8022b7c:	2b18      	cmp	r3, #24
 8022b7e:	d005      	beq.n	8022b8c <d_print_comp+0x808>
 8022b80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8022b84:	685b      	ldr	r3, [r3, #4]
 8022b86:	781b      	ldrb	r3, [r3, #0]
 8022b88:	2b19      	cmp	r3, #25
 8022b8a:	d119      	bne.n	8022bc0 <d_print_comp+0x83c>
 8022b8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8022b90:	685b      	ldr	r3, [r3, #4]
 8022b92:	781a      	ldrb	r2, [r3, #0]
 8022b94:	683b      	ldr	r3, [r7, #0]
 8022b96:	781b      	ldrb	r3, [r3, #0]
 8022b98:	429a      	cmp	r2, r3
 8022b9a:	d107      	bne.n	8022bac <d_print_comp+0x828>
 8022b9c:	683b      	ldr	r3, [r7, #0]
 8022b9e:	685b      	ldr	r3, [r3, #4]
 8022ba0:	6878      	ldr	r0, [r7, #4]
 8022ba2:	4619      	mov	r1, r3
 8022ba4:	f7ff fbee 	bl	8022384 <d_print_comp>
 8022ba8:	f000 bcec 	b.w	8023584 <d_print_comp+0x1200>
 8022bac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8022bb0:	681b      	ldr	r3, [r3, #0]
 8022bb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8022bb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8022bba:	2b00      	cmp	r3, #0
 8022bbc:	d1cf      	bne.n	8022b5e <d_print_comp+0x7da>
 8022bbe:	e000      	b.n	8022bc2 <d_print_comp+0x83e>
 8022bc0:	bf00      	nop
 8022bc2:	687b      	ldr	r3, [r7, #4]
 8022bc4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8022bd0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022bd4:	683b      	ldr	r3, [r7, #0]
 8022bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8022bd8:	f04f 0300 	mov.w	r3, #0
 8022bdc:	677b      	str	r3, [r7, #116]	; 0x74
 8022bde:	687b      	ldr	r3, [r7, #4]
 8022be0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8022be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8022be6:	683b      	ldr	r3, [r7, #0]
 8022be8:	685b      	ldr	r3, [r3, #4]
 8022bea:	6878      	ldr	r0, [r7, #4]
 8022bec:	4619      	mov	r1, r3
 8022bee:	f7ff fbc9 	bl	8022384 <d_print_comp>
 8022bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	d103      	bne.n	8022c00 <d_print_comp+0x87c>
 8022bf8:	6878      	ldr	r0, [r7, #4]
 8022bfa:	6839      	ldr	r1, [r7, #0]
 8022bfc:	f000 fe30 	bl	8023860 <d_print_mod>
 8022c00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022c02:	687b      	ldr	r3, [r7, #4]
 8022c04:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022c08:	f000 bcbc 	b.w	8023584 <d_print_comp+0x1200>
 8022c0c:	687b      	ldr	r3, [r7, #4]
 8022c0e:	681b      	ldr	r3, [r3, #0]
 8022c10:	f003 0304 	and.w	r3, r3, #4
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d10c      	bne.n	8022c32 <d_print_comp+0x8ae>
 8022c18:	683b      	ldr	r3, [r7, #0]
 8022c1a:	685b      	ldr	r3, [r3, #4]
 8022c1c:	681a      	ldr	r2, [r3, #0]
 8022c1e:	683b      	ldr	r3, [r7, #0]
 8022c20:	685b      	ldr	r3, [r3, #4]
 8022c22:	685b      	ldr	r3, [r3, #4]
 8022c24:	6878      	ldr	r0, [r7, #4]
 8022c26:	4611      	mov	r1, r2
 8022c28:	461a      	mov	r2, r3
 8022c2a:	f7ff f965 	bl	8021ef8 <d_append_buffer>
 8022c2e:	f000 bca9 	b.w	8023584 <d_print_comp+0x1200>
 8022c32:	683b      	ldr	r3, [r7, #0]
 8022c34:	685b      	ldr	r3, [r3, #4]
 8022c36:	689a      	ldr	r2, [r3, #8]
 8022c38:	683b      	ldr	r3, [r7, #0]
 8022c3a:	685b      	ldr	r3, [r3, #4]
 8022c3c:	68db      	ldr	r3, [r3, #12]
 8022c3e:	6878      	ldr	r0, [r7, #4]
 8022c40:	4611      	mov	r1, r2
 8022c42:	461a      	mov	r2, r3
 8022c44:	f7ff f958 	bl	8021ef8 <d_append_buffer>
 8022c48:	f000 bc9c 	b.w	8023584 <d_print_comp+0x1200>
 8022c4c:	683b      	ldr	r3, [r7, #0]
 8022c4e:	685b      	ldr	r3, [r3, #4]
 8022c50:	6878      	ldr	r0, [r7, #4]
 8022c52:	4619      	mov	r1, r3
 8022c54:	f7ff fb96 	bl	8022384 <d_print_comp>
 8022c58:	f000 bc94 	b.w	8023584 <d_print_comp+0x1200>
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	681b      	ldr	r3, [r3, #0]
 8022c60:	f003 0320 	and.w	r3, r3, #32
 8022c64:	2b00      	cmp	r3, #0
 8022c66:	d007      	beq.n	8022c78 <d_print_comp+0x8f4>
 8022c68:	687b      	ldr	r3, [r7, #4]
 8022c6a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022c6e:	6878      	ldr	r0, [r7, #4]
 8022c70:	6839      	ldr	r1, [r7, #0]
 8022c72:	461a      	mov	r2, r3
 8022c74:	f000 fede 	bl	8023a34 <d_print_function_type>
 8022c78:	683b      	ldr	r3, [r7, #0]
 8022c7a:	685b      	ldr	r3, [r3, #4]
 8022c7c:	2b00      	cmp	r3, #0
 8022c7e:	d02a      	beq.n	8022cd6 <d_print_comp+0x952>
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022c8e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022c92:	683b      	ldr	r3, [r7, #0]
 8022c94:	663b      	str	r3, [r7, #96]	; 0x60
 8022c96:	f04f 0300 	mov.w	r3, #0
 8022c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8022c9c:	687b      	ldr	r3, [r7, #4]
 8022c9e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8022ca2:	66bb      	str	r3, [r7, #104]	; 0x68
 8022ca4:	683b      	ldr	r3, [r7, #0]
 8022ca6:	685b      	ldr	r3, [r3, #4]
 8022ca8:	6878      	ldr	r0, [r7, #4]
 8022caa:	4619      	mov	r1, r3
 8022cac:	f7ff fb6a 	bl	8022384 <d_print_comp>
 8022cb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8022cb2:	687b      	ldr	r3, [r7, #4]
 8022cb4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	f040 8459 	bne.w	8023572 <d_print_comp+0x11ee>
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	681b      	ldr	r3, [r3, #0]
 8022cc4:	f003 0320 	and.w	r3, r3, #32
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d104      	bne.n	8022cd6 <d_print_comp+0x952>
 8022ccc:	6878      	ldr	r0, [r7, #4]
 8022cce:	f04f 0120 	mov.w	r1, #32
 8022cd2:	f7ff f8ef 	bl	8021eb4 <d_append_char>
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	681b      	ldr	r3, [r3, #0]
 8022cda:	f003 0320 	and.w	r3, r3, #32
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	f040 8449 	bne.w	8023576 <d_print_comp+0x11f2>
 8022ce4:	687b      	ldr	r3, [r7, #4]
 8022ce6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022cea:	6878      	ldr	r0, [r7, #4]
 8022cec:	6839      	ldr	r1, [r7, #0]
 8022cee:	461a      	mov	r2, r3
 8022cf0:	f000 fea0 	bl	8023a34 <d_print_function_type>
 8022cf4:	f000 bc3f 	b.w	8023576 <d_print_comp+0x11f2>
 8022cf8:	687b      	ldr	r3, [r7, #4]
 8022cfa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022cfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8022d02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8022d06:	60fb      	str	r3, [r7, #12]
 8022d08:	687b      	ldr	r3, [r7, #4]
 8022d0a:	f107 020c 	add.w	r2, r7, #12
 8022d0e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022d12:	683b      	ldr	r3, [r7, #0]
 8022d14:	613b      	str	r3, [r7, #16]
 8022d16:	f04f 0300 	mov.w	r3, #0
 8022d1a:	617b      	str	r3, [r7, #20]
 8022d1c:	687b      	ldr	r3, [r7, #4]
 8022d1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8022d22:	61bb      	str	r3, [r7, #24]
 8022d24:	f04f 0301 	mov.w	r3, #1
 8022d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8022d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022d34:	e043      	b.n	8022dbe <d_print_comp+0xa3a>
 8022d36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8022d3a:	689b      	ldr	r3, [r3, #8]
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	d139      	bne.n	8022db4 <d_print_comp+0xa30>
 8022d40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8022d44:	2b03      	cmp	r3, #3
 8022d46:	d904      	bls.n	8022d52 <d_print_comp+0x9ce>
 8022d48:	6878      	ldr	r0, [r7, #4]
 8022d4a:	f7ff f869 	bl	8021e20 <d_print_error>
 8022d4e:	f000 bc19 	b.w	8023584 <d_print_comp+0x1200>
 8022d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8022d56:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022d5a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8022d5e:	18d3      	adds	r3, r2, r3
 8022d60:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
 8022d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8022d68:	4614      	mov	r4, r2
 8022d6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8022d70:	687b      	ldr	r3, [r7, #4]
 8022d72:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8022d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8022d7a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022d7e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8022d82:	18cb      	adds	r3, r1, r3
 8022d84:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8022d88:	601a      	str	r2, [r3, #0]
 8022d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8022d8e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022d92:	f107 020c 	add.w	r2, r7, #12
 8022d96:	18d2      	adds	r2, r2, r3
 8022d98:	687b      	ldr	r3, [r7, #4]
 8022d9a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022d9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8022da2:	f04f 0201 	mov.w	r2, #1
 8022da6:	609a      	str	r2, [r3, #8]
 8022da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8022dac:	f103 0301 	add.w	r3, r3, #1
 8022db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022db4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8022db8:	681b      	ldr	r3, [r3, #0]
 8022dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8022dc2:	2b00      	cmp	r3, #0
 8022dc4:	d011      	beq.n	8022dea <d_print_comp+0xa66>
 8022dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8022dca:	685b      	ldr	r3, [r3, #4]
 8022dcc:	781b      	ldrb	r3, [r3, #0]
 8022dce:	2b17      	cmp	r3, #23
 8022dd0:	d0b1      	beq.n	8022d36 <d_print_comp+0x9b2>
 8022dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8022dd6:	685b      	ldr	r3, [r3, #4]
 8022dd8:	781b      	ldrb	r3, [r3, #0]
 8022dda:	2b18      	cmp	r3, #24
 8022ddc:	d0ab      	beq.n	8022d36 <d_print_comp+0x9b2>
 8022dde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8022de2:	685b      	ldr	r3, [r3, #4]
 8022de4:	781b      	ldrb	r3, [r3, #0]
 8022de6:	2b19      	cmp	r3, #25
 8022de8:	d0a5      	beq.n	8022d36 <d_print_comp+0x9b2>
 8022dea:	683b      	ldr	r3, [r7, #0]
 8022dec:	689b      	ldr	r3, [r3, #8]
 8022dee:	6878      	ldr	r0, [r7, #4]
 8022df0:	4619      	mov	r1, r3
 8022df2:	f7ff fac7 	bl	8022384 <d_print_comp>
 8022df6:	687b      	ldr	r3, [r7, #4]
 8022df8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8022dfc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022e00:	697b      	ldr	r3, [r7, #20]
 8022e02:	2b00      	cmp	r3, #0
 8022e04:	d014      	beq.n	8022e30 <d_print_comp+0xaac>
 8022e06:	e3bd      	b.n	8023584 <d_print_comp+0x1200>
 8022e08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8022e0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8022e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022e14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8022e18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022e1c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8022e20:	18d3      	adds	r3, r2, r3
 8022e22:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8022e26:	681b      	ldr	r3, [r3, #0]
 8022e28:	6878      	ldr	r0, [r7, #4]
 8022e2a:	4619      	mov	r1, r3
 8022e2c:	f000 fd18 	bl	8023860 <d_print_mod>
 8022e30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8022e34:	2b01      	cmp	r3, #1
 8022e36:	d8e7      	bhi.n	8022e08 <d_print_comp+0xa84>
 8022e38:	687b      	ldr	r3, [r7, #4]
 8022e3a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022e3e:	6878      	ldr	r0, [r7, #4]
 8022e40:	6839      	ldr	r1, [r7, #0]
 8022e42:	461a      	mov	r2, r3
 8022e44:	f000 fea0 	bl	8023b88 <d_print_array_type>
 8022e48:	e39c      	b.n	8023584 <d_print_comp+0x1200>
 8022e4a:	687b      	ldr	r3, [r7, #4]
 8022e4c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8022e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022e52:	687b      	ldr	r3, [r7, #4]
 8022e54:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8022e58:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022e5c:	683b      	ldr	r3, [r7, #0]
 8022e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8022e60:	f04f 0300 	mov.w	r3, #0
 8022e64:	657b      	str	r3, [r7, #84]	; 0x54
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8022e6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8022e6e:	683b      	ldr	r3, [r7, #0]
 8022e70:	689b      	ldr	r3, [r3, #8]
 8022e72:	6878      	ldr	r0, [r7, #4]
 8022e74:	4619      	mov	r1, r3
 8022e76:	f7ff fa85 	bl	8022384 <d_print_comp>
 8022e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	d103      	bne.n	8022e88 <d_print_comp+0xb04>
 8022e80:	6878      	ldr	r0, [r7, #4]
 8022e82:	6839      	ldr	r1, [r7, #0]
 8022e84:	f000 fcec 	bl	8023860 <d_print_mod>
 8022e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8022e8a:	687b      	ldr	r3, [r7, #4]
 8022e8c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8022e90:	e378      	b.n	8023584 <d_print_comp+0x1200>
 8022e92:	683b      	ldr	r3, [r7, #0]
 8022e94:	895b      	ldrh	r3, [r3, #10]
 8022e96:	2b00      	cmp	r3, #0
 8022e98:	d006      	beq.n	8022ea8 <d_print_comp+0xb24>
 8022e9a:	6878      	ldr	r0, [r7, #4]
 8022e9c:	f24e 61c4 	movw	r1, #59076	; 0xe6c4
 8022ea0:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022ea4:	f7ff f846 	bl	8021f34 <d_append_string>
 8022ea8:	683b      	ldr	r3, [r7, #0]
 8022eaa:	685b      	ldr	r3, [r3, #4]
 8022eac:	685a      	ldr	r2, [r3, #4]
 8022eae:	4ba4      	ldr	r3, [pc, #656]	; (8023140 <d_print_comp+0xdbc>)
 8022eb0:	429a      	cmp	r2, r3
 8022eb2:	d00a      	beq.n	8022eca <d_print_comp+0xb46>
 8022eb4:	683b      	ldr	r3, [r7, #0]
 8022eb6:	685b      	ldr	r3, [r3, #4]
 8022eb8:	6878      	ldr	r0, [r7, #4]
 8022eba:	4619      	mov	r1, r3
 8022ebc:	f7ff fa62 	bl	8022384 <d_print_comp>
 8022ec0:	6878      	ldr	r0, [r7, #4]
 8022ec2:	f04f 0120 	mov.w	r1, #32
 8022ec6:	f7fe fff5 	bl	8021eb4 <d_append_char>
 8022eca:	683b      	ldr	r3, [r7, #0]
 8022ecc:	891b      	ldrh	r3, [r3, #8]
 8022ece:	2b00      	cmp	r3, #0
 8022ed0:	d007      	beq.n	8022ee2 <d_print_comp+0xb5e>
 8022ed2:	6878      	ldr	r0, [r7, #4]
 8022ed4:	f24e 61cc 	movw	r1, #59084	; 0xe6cc
 8022ed8:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022edc:	f7ff f82a 	bl	8021f34 <d_append_string>
 8022ee0:	e350      	b.n	8023584 <d_print_comp+0x1200>
 8022ee2:	6878      	ldr	r0, [r7, #4]
 8022ee4:	f24e 61d4 	movw	r1, #59092	; 0xe6d4
 8022ee8:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022eec:	f7ff f822 	bl	8021f34 <d_append_string>
 8022ef0:	e348      	b.n	8023584 <d_print_comp+0x1200>
 8022ef2:	683b      	ldr	r3, [r7, #0]
 8022ef4:	685b      	ldr	r3, [r3, #4]
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	d005      	beq.n	8022f06 <d_print_comp+0xb82>
 8022efa:	683b      	ldr	r3, [r7, #0]
 8022efc:	685b      	ldr	r3, [r3, #4]
 8022efe:	6878      	ldr	r0, [r7, #4]
 8022f00:	4619      	mov	r1, r3
 8022f02:	f7ff fa3f 	bl	8022384 <d_print_comp>
 8022f06:	683b      	ldr	r3, [r7, #0]
 8022f08:	689b      	ldr	r3, [r3, #8]
 8022f0a:	2b00      	cmp	r3, #0
 8022f0c:	f000 8335 	beq.w	802357a <d_print_comp+0x11f6>
 8022f10:	687b      	ldr	r3, [r7, #4]
 8022f12:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8022f16:	2bfd      	cmp	r3, #253	; 0xfd
 8022f18:	d902      	bls.n	8022f20 <d_print_comp+0xb9c>
 8022f1a:	6878      	ldr	r0, [r7, #4]
 8022f1c:	f7fe ffa0 	bl	8021e60 <d_print_flush>
 8022f20:	6878      	ldr	r0, [r7, #4]
 8022f22:	f24e 61dc 	movw	r1, #59100	; 0xe6dc
 8022f26:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022f2a:	f7ff f803 	bl	8021f34 <d_append_string>
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8022f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8022f38:	687b      	ldr	r3, [r7, #4]
 8022f3a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8022f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8022f42:	683b      	ldr	r3, [r7, #0]
 8022f44:	689b      	ldr	r3, [r3, #8]
 8022f46:	6878      	ldr	r0, [r7, #4]
 8022f48:	4619      	mov	r1, r3
 8022f4a:	f7ff fa1b 	bl	8022384 <d_print_comp>
 8022f4e:	687b      	ldr	r3, [r7, #4]
 8022f50:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8022f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8022f58:	429a      	cmp	r2, r3
 8022f5a:	f040 830e 	bne.w	802357a <d_print_comp+0x11f6>
 8022f5e:	687b      	ldr	r3, [r7, #4]
 8022f60:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8022f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8022f68:	429a      	cmp	r2, r3
 8022f6a:	f040 8306 	bne.w	802357a <d_print_comp+0x11f6>
 8022f6e:	687b      	ldr	r3, [r7, #4]
 8022f70:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8022f74:	f1a3 0202 	sub.w	r2, r3, #2
 8022f78:	687b      	ldr	r3, [r7, #4]
 8022f7a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8022f7e:	e2fc      	b.n	802357a <d_print_comp+0x11f6>
 8022f80:	6878      	ldr	r0, [r7, #4]
 8022f82:	f24e 61e0 	movw	r1, #59104	; 0xe6e0
 8022f86:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022f8a:	f7fe ffd3 	bl	8021f34 <d_append_string>
 8022f8e:	683b      	ldr	r3, [r7, #0]
 8022f90:	685b      	ldr	r3, [r3, #4]
 8022f92:	685b      	ldr	r3, [r3, #4]
 8022f94:	781b      	ldrb	r3, [r3, #0]
 8022f96:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8022f9a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8022f9e:	2b60      	cmp	r3, #96	; 0x60
 8022fa0:	d908      	bls.n	8022fb4 <d_print_comp+0xc30>
 8022fa2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8022fa6:	2b7a      	cmp	r3, #122	; 0x7a
 8022fa8:	d804      	bhi.n	8022fb4 <d_print_comp+0xc30>
 8022faa:	6878      	ldr	r0, [r7, #4]
 8022fac:	f04f 0120 	mov.w	r1, #32
 8022fb0:	f7fe ff80 	bl	8021eb4 <d_append_char>
 8022fb4:	683b      	ldr	r3, [r7, #0]
 8022fb6:	685b      	ldr	r3, [r3, #4]
 8022fb8:	685a      	ldr	r2, [r3, #4]
 8022fba:	683b      	ldr	r3, [r7, #0]
 8022fbc:	685b      	ldr	r3, [r3, #4]
 8022fbe:	689b      	ldr	r3, [r3, #8]
 8022fc0:	6878      	ldr	r0, [r7, #4]
 8022fc2:	4611      	mov	r1, r2
 8022fc4:	461a      	mov	r2, r3
 8022fc6:	f7fe ff97 	bl	8021ef8 <d_append_buffer>
 8022fca:	e2db      	b.n	8023584 <d_print_comp+0x1200>
 8022fcc:	6878      	ldr	r0, [r7, #4]
 8022fce:	f24e 61ec 	movw	r1, #59116	; 0xe6ec
 8022fd2:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022fd6:	f7fe ffad 	bl	8021f34 <d_append_string>
 8022fda:	683b      	ldr	r3, [r7, #0]
 8022fdc:	689b      	ldr	r3, [r3, #8]
 8022fde:	6878      	ldr	r0, [r7, #4]
 8022fe0:	4619      	mov	r1, r3
 8022fe2:	f7ff f9cf 	bl	8022384 <d_print_comp>
 8022fe6:	e2cd      	b.n	8023584 <d_print_comp+0x1200>
 8022fe8:	6878      	ldr	r0, [r7, #4]
 8022fea:	f24e 61ec 	movw	r1, #59116	; 0xe6ec
 8022fee:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022ff2:	f7fe ff9f 	bl	8021f34 <d_append_string>
 8022ff6:	6878      	ldr	r0, [r7, #4]
 8022ff8:	6839      	ldr	r1, [r7, #0]
 8022ffa:	f000 fe47 	bl	8023c8c <d_print_cast>
 8022ffe:	e2c1      	b.n	8023584 <d_print_comp+0x1200>
 8023000:	683b      	ldr	r3, [r7, #0]
 8023002:	685b      	ldr	r3, [r3, #4]
 8023004:	781b      	ldrb	r3, [r3, #0]
 8023006:	2b2e      	cmp	r3, #46	; 0x2e
 8023008:	d006      	beq.n	8023018 <d_print_comp+0xc94>
 802300a:	683b      	ldr	r3, [r7, #0]
 802300c:	685b      	ldr	r3, [r3, #4]
 802300e:	6878      	ldr	r0, [r7, #4]
 8023010:	4619      	mov	r1, r3
 8023012:	f000 fe1d 	bl	8023c50 <d_print_expr_op>
 8023016:	e00f      	b.n	8023038 <d_print_comp+0xcb4>
 8023018:	6878      	ldr	r0, [r7, #4]
 802301a:	f04f 0128 	mov.w	r1, #40	; 0x28
 802301e:	f7fe ff49 	bl	8021eb4 <d_append_char>
 8023022:	683b      	ldr	r3, [r7, #0]
 8023024:	685b      	ldr	r3, [r3, #4]
 8023026:	6878      	ldr	r0, [r7, #4]
 8023028:	4619      	mov	r1, r3
 802302a:	f000 fe2f 	bl	8023c8c <d_print_cast>
 802302e:	6878      	ldr	r0, [r7, #4]
 8023030:	f04f 0129 	mov.w	r1, #41	; 0x29
 8023034:	f7fe ff3e 	bl	8021eb4 <d_append_char>
 8023038:	683b      	ldr	r3, [r7, #0]
 802303a:	689b      	ldr	r3, [r3, #8]
 802303c:	6878      	ldr	r0, [r7, #4]
 802303e:	4619      	mov	r1, r3
 8023040:	f7ff f974 	bl	802232c <d_print_subexpr>
 8023044:	e29e      	b.n	8023584 <d_print_comp+0x1200>
 8023046:	683b      	ldr	r3, [r7, #0]
 8023048:	689b      	ldr	r3, [r3, #8]
 802304a:	781b      	ldrb	r3, [r3, #0]
 802304c:	2b31      	cmp	r3, #49	; 0x31
 802304e:	d003      	beq.n	8023058 <d_print_comp+0xcd4>
 8023050:	6878      	ldr	r0, [r7, #4]
 8023052:	f7fe fee5 	bl	8021e20 <d_print_error>
 8023056:	e295      	b.n	8023584 <d_print_comp+0x1200>
 8023058:	683b      	ldr	r3, [r7, #0]
 802305a:	685b      	ldr	r3, [r3, #4]
 802305c:	781b      	ldrb	r3, [r3, #0]
 802305e:	2b2c      	cmp	r3, #44	; 0x2c
 8023060:	d111      	bne.n	8023086 <d_print_comp+0xd02>
 8023062:	683b      	ldr	r3, [r7, #0]
 8023064:	685b      	ldr	r3, [r3, #4]
 8023066:	685b      	ldr	r3, [r3, #4]
 8023068:	689b      	ldr	r3, [r3, #8]
 802306a:	2b01      	cmp	r3, #1
 802306c:	d10b      	bne.n	8023086 <d_print_comp+0xd02>
 802306e:	683b      	ldr	r3, [r7, #0]
 8023070:	685b      	ldr	r3, [r3, #4]
 8023072:	685b      	ldr	r3, [r3, #4]
 8023074:	685b      	ldr	r3, [r3, #4]
 8023076:	781b      	ldrb	r3, [r3, #0]
 8023078:	2b3e      	cmp	r3, #62	; 0x3e
 802307a:	d104      	bne.n	8023086 <d_print_comp+0xd02>
 802307c:	6878      	ldr	r0, [r7, #4]
 802307e:	f04f 0128 	mov.w	r1, #40	; 0x28
 8023082:	f7fe ff17 	bl	8021eb4 <d_append_char>
 8023086:	683b      	ldr	r3, [r7, #0]
 8023088:	689b      	ldr	r3, [r3, #8]
 802308a:	685b      	ldr	r3, [r3, #4]
 802308c:	6878      	ldr	r0, [r7, #4]
 802308e:	4619      	mov	r1, r3
 8023090:	f7ff f94c 	bl	802232c <d_print_subexpr>
 8023094:	683b      	ldr	r3, [r7, #0]
 8023096:	685b      	ldr	r3, [r3, #4]
 8023098:	685b      	ldr	r3, [r3, #4]
 802309a:	681b      	ldr	r3, [r3, #0]
 802309c:	4618      	mov	r0, r3
 802309e:	f64d 61ec 	movw	r1, #57068	; 0xdeec
 80230a2:	f6c0 0102 	movt	r1, #2050	; 0x802
 80230a6:	f003 faed 	bl	8026684 <strcmp>
 80230aa:	4603      	mov	r3, r0
 80230ac:	2b00      	cmp	r3, #0
 80230ae:	d111      	bne.n	80230d4 <d_print_comp+0xd50>
 80230b0:	6878      	ldr	r0, [r7, #4]
 80230b2:	f04f 015b 	mov.w	r1, #91	; 0x5b
 80230b6:	f7fe fefd 	bl	8021eb4 <d_append_char>
 80230ba:	683b      	ldr	r3, [r7, #0]
 80230bc:	689b      	ldr	r3, [r3, #8]
 80230be:	689b      	ldr	r3, [r3, #8]
 80230c0:	6878      	ldr	r0, [r7, #4]
 80230c2:	4619      	mov	r1, r3
 80230c4:	f7ff f95e 	bl	8022384 <d_print_comp>
 80230c8:	6878      	ldr	r0, [r7, #4]
 80230ca:	f04f 015d 	mov.w	r1, #93	; 0x5d
 80230ce:	f7fe fef1 	bl	8021eb4 <d_append_char>
 80230d2:	e01a      	b.n	802310a <d_print_comp+0xd86>
 80230d4:	683b      	ldr	r3, [r7, #0]
 80230d6:	685b      	ldr	r3, [r3, #4]
 80230d8:	685b      	ldr	r3, [r3, #4]
 80230da:	681b      	ldr	r3, [r3, #0]
 80230dc:	4618      	mov	r0, r3
 80230de:	f64d 6170 	movw	r1, #56944	; 0xde70
 80230e2:	f6c0 0102 	movt	r1, #2050	; 0x802
 80230e6:	f003 facd 	bl	8026684 <strcmp>
 80230ea:	4603      	mov	r3, r0
 80230ec:	2b00      	cmp	r3, #0
 80230ee:	d005      	beq.n	80230fc <d_print_comp+0xd78>
 80230f0:	683b      	ldr	r3, [r7, #0]
 80230f2:	685b      	ldr	r3, [r3, #4]
 80230f4:	6878      	ldr	r0, [r7, #4]
 80230f6:	4619      	mov	r1, r3
 80230f8:	f000 fdaa 	bl	8023c50 <d_print_expr_op>
 80230fc:	683b      	ldr	r3, [r7, #0]
 80230fe:	689b      	ldr	r3, [r3, #8]
 8023100:	689b      	ldr	r3, [r3, #8]
 8023102:	6878      	ldr	r0, [r7, #4]
 8023104:	4619      	mov	r1, r3
 8023106:	f7ff f911 	bl	802232c <d_print_subexpr>
 802310a:	683b      	ldr	r3, [r7, #0]
 802310c:	685b      	ldr	r3, [r3, #4]
 802310e:	781b      	ldrb	r3, [r3, #0]
 8023110:	2b2c      	cmp	r3, #44	; 0x2c
 8023112:	f040 8234 	bne.w	802357e <d_print_comp+0x11fa>
 8023116:	683b      	ldr	r3, [r7, #0]
 8023118:	685b      	ldr	r3, [r3, #4]
 802311a:	685b      	ldr	r3, [r3, #4]
 802311c:	689b      	ldr	r3, [r3, #8]
 802311e:	2b01      	cmp	r3, #1
 8023120:	f040 822d 	bne.w	802357e <d_print_comp+0x11fa>
 8023124:	683b      	ldr	r3, [r7, #0]
 8023126:	685b      	ldr	r3, [r3, #4]
 8023128:	685b      	ldr	r3, [r3, #4]
 802312a:	685b      	ldr	r3, [r3, #4]
 802312c:	781b      	ldrb	r3, [r3, #0]
 802312e:	2b3e      	cmp	r3, #62	; 0x3e
 8023130:	f040 8225 	bne.w	802357e <d_print_comp+0x11fa>
 8023134:	6878      	ldr	r0, [r7, #4]
 8023136:	f04f 0129 	mov.w	r1, #41	; 0x29
 802313a:	f7fe febb 	bl	8021eb4 <d_append_char>
 802313e:	e21e      	b.n	802357e <d_print_comp+0x11fa>
 8023140:	0802dc30 	.word	0x0802dc30
 8023144:	6878      	ldr	r0, [r7, #4]
 8023146:	f7fe fe6b 	bl	8021e20 <d_print_error>
 802314a:	e21b      	b.n	8023584 <d_print_comp+0x1200>
 802314c:	683b      	ldr	r3, [r7, #0]
 802314e:	689b      	ldr	r3, [r3, #8]
 8023150:	781b      	ldrb	r3, [r3, #0]
 8023152:	2b33      	cmp	r3, #51	; 0x33
 8023154:	d105      	bne.n	8023162 <d_print_comp+0xdde>
 8023156:	683b      	ldr	r3, [r7, #0]
 8023158:	689b      	ldr	r3, [r3, #8]
 802315a:	689b      	ldr	r3, [r3, #8]
 802315c:	781b      	ldrb	r3, [r3, #0]
 802315e:	2b34      	cmp	r3, #52	; 0x34
 8023160:	d003      	beq.n	802316a <d_print_comp+0xde6>
 8023162:	6878      	ldr	r0, [r7, #4]
 8023164:	f7fe fe5c 	bl	8021e20 <d_print_error>
 8023168:	e20c      	b.n	8023584 <d_print_comp+0x1200>
 802316a:	683b      	ldr	r3, [r7, #0]
 802316c:	689b      	ldr	r3, [r3, #8]
 802316e:	685b      	ldr	r3, [r3, #4]
 8023170:	6878      	ldr	r0, [r7, #4]
 8023172:	4619      	mov	r1, r3
 8023174:	f7ff f8da 	bl	802232c <d_print_subexpr>
 8023178:	683b      	ldr	r3, [r7, #0]
 802317a:	685b      	ldr	r3, [r3, #4]
 802317c:	6878      	ldr	r0, [r7, #4]
 802317e:	4619      	mov	r1, r3
 8023180:	f000 fd66 	bl	8023c50 <d_print_expr_op>
 8023184:	683b      	ldr	r3, [r7, #0]
 8023186:	689b      	ldr	r3, [r3, #8]
 8023188:	689b      	ldr	r3, [r3, #8]
 802318a:	685b      	ldr	r3, [r3, #4]
 802318c:	6878      	ldr	r0, [r7, #4]
 802318e:	4619      	mov	r1, r3
 8023190:	f7ff f8cc 	bl	802232c <d_print_subexpr>
 8023194:	6878      	ldr	r0, [r7, #4]
 8023196:	f24e 61f8 	movw	r1, #59128	; 0xe6f8
 802319a:	f6c0 0102 	movt	r1, #2050	; 0x802
 802319e:	f7fe fec9 	bl	8021f34 <d_append_string>
 80231a2:	683b      	ldr	r3, [r7, #0]
 80231a4:	689b      	ldr	r3, [r3, #8]
 80231a6:	689b      	ldr	r3, [r3, #8]
 80231a8:	689b      	ldr	r3, [r3, #8]
 80231aa:	6878      	ldr	r0, [r7, #4]
 80231ac:	4619      	mov	r1, r3
 80231ae:	f7ff f8bd 	bl	802232c <d_print_subexpr>
 80231b2:	e1e7      	b.n	8023584 <d_print_comp+0x1200>
 80231b4:	6878      	ldr	r0, [r7, #4]
 80231b6:	f7fe fe33 	bl	8021e20 <d_print_error>
 80231ba:	e1e3      	b.n	8023584 <d_print_comp+0x1200>
 80231bc:	f04f 0300 	mov.w	r3, #0
 80231c0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80231c4:	683b      	ldr	r3, [r7, #0]
 80231c6:	685b      	ldr	r3, [r3, #4]
 80231c8:	781b      	ldrb	r3, [r3, #0]
 80231ca:	2b23      	cmp	r3, #35	; 0x23
 80231cc:	f040 808a 	bne.w	80232e4 <d_print_comp+0xf60>
 80231d0:	683b      	ldr	r3, [r7, #0]
 80231d2:	685b      	ldr	r3, [r3, #4]
 80231d4:	685b      	ldr	r3, [r3, #4]
 80231d6:	7c1b      	ldrb	r3, [r3, #16]
 80231d8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80231dc:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80231e0:	2b01      	cmp	r3, #1
 80231e2:	db7a      	blt.n	80232da <d_print_comp+0xf56>
 80231e4:	2b06      	cmp	r3, #6
 80231e6:	dd02      	ble.n	80231ee <d_print_comp+0xe6a>
 80231e8:	2b07      	cmp	r3, #7
 80231ea:	d04d      	beq.n	8023288 <d_print_comp+0xf04>
 80231ec:	e075      	b.n	80232da <d_print_comp+0xf56>
 80231ee:	683b      	ldr	r3, [r7, #0]
 80231f0:	689b      	ldr	r3, [r3, #8]
 80231f2:	781b      	ldrb	r3, [r3, #0]
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	d172      	bne.n	80232de <d_print_comp+0xf5a>
 80231f8:	683b      	ldr	r3, [r7, #0]
 80231fa:	781b      	ldrb	r3, [r3, #0]
 80231fc:	2b36      	cmp	r3, #54	; 0x36
 80231fe:	d104      	bne.n	802320a <d_print_comp+0xe86>
 8023200:	6878      	ldr	r0, [r7, #4]
 8023202:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8023206:	f7fe fe55 	bl	8021eb4 <d_append_char>
 802320a:	683b      	ldr	r3, [r7, #0]
 802320c:	689b      	ldr	r3, [r3, #8]
 802320e:	6878      	ldr	r0, [r7, #4]
 8023210:	4619      	mov	r1, r3
 8023212:	f7ff f8b7 	bl	8022384 <d_print_comp>
 8023216:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 802321a:	f1a3 0302 	sub.w	r3, r3, #2
 802321e:	2b04      	cmp	r3, #4
 8023220:	d830      	bhi.n	8023284 <d_print_comp+0xf00>
 8023222:	a101      	add	r1, pc, #4	; (adr r1, 8023228 <d_print_comp+0xea4>)
 8023224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023228:	0802323d 	.word	0x0802323d
 802322c:	08023249 	.word	0x08023249
 8023230:	08023255 	.word	0x08023255
 8023234:	08023265 	.word	0x08023265
 8023238:	08023275 	.word	0x08023275
 802323c:	6878      	ldr	r0, [r7, #4]
 802323e:	f04f 0175 	mov.w	r1, #117	; 0x75
 8023242:	f7fe fe37 	bl	8021eb4 <d_append_char>
 8023246:	e01e      	b.n	8023286 <d_print_comp+0xf02>
 8023248:	6878      	ldr	r0, [r7, #4]
 802324a:	f04f 016c 	mov.w	r1, #108	; 0x6c
 802324e:	f7fe fe31 	bl	8021eb4 <d_append_char>
 8023252:	e018      	b.n	8023286 <d_print_comp+0xf02>
 8023254:	6878      	ldr	r0, [r7, #4]
 8023256:	f24e 61fc 	movw	r1, #59132	; 0xe6fc
 802325a:	f6c0 0102 	movt	r1, #2050	; 0x802
 802325e:	f7fe fe69 	bl	8021f34 <d_append_string>
 8023262:	e010      	b.n	8023286 <d_print_comp+0xf02>
 8023264:	6878      	ldr	r0, [r7, #4]
 8023266:	f24e 7100 	movw	r1, #59136	; 0xe700
 802326a:	f6c0 0102 	movt	r1, #2050	; 0x802
 802326e:	f7fe fe61 	bl	8021f34 <d_append_string>
 8023272:	e008      	b.n	8023286 <d_print_comp+0xf02>
 8023274:	6878      	ldr	r0, [r7, #4]
 8023276:	f24e 7104 	movw	r1, #59140	; 0xe704
 802327a:	f6c0 0102 	movt	r1, #2050	; 0x802
 802327e:	f7fe fe59 	bl	8021f34 <d_append_string>
 8023282:	e000      	b.n	8023286 <d_print_comp+0xf02>
 8023284:	bf00      	nop
 8023286:	e17d      	b.n	8023584 <d_print_comp+0x1200>
 8023288:	683b      	ldr	r3, [r7, #0]
 802328a:	689b      	ldr	r3, [r3, #8]
 802328c:	781b      	ldrb	r3, [r3, #0]
 802328e:	2b00      	cmp	r3, #0
 8023290:	d127      	bne.n	80232e2 <d_print_comp+0xf5e>
 8023292:	683b      	ldr	r3, [r7, #0]
 8023294:	689b      	ldr	r3, [r3, #8]
 8023296:	689b      	ldr	r3, [r3, #8]
 8023298:	2b01      	cmp	r3, #1
 802329a:	d122      	bne.n	80232e2 <d_print_comp+0xf5e>
 802329c:	683b      	ldr	r3, [r7, #0]
 802329e:	781b      	ldrb	r3, [r3, #0]
 80232a0:	2b35      	cmp	r3, #53	; 0x35
 80232a2:	d11e      	bne.n	80232e2 <d_print_comp+0xf5e>
 80232a4:	683b      	ldr	r3, [r7, #0]
 80232a6:	689b      	ldr	r3, [r3, #8]
 80232a8:	685b      	ldr	r3, [r3, #4]
 80232aa:	781b      	ldrb	r3, [r3, #0]
 80232ac:	2b30      	cmp	r3, #48	; 0x30
 80232ae:	d002      	beq.n	80232b6 <d_print_comp+0xf32>
 80232b0:	2b31      	cmp	r3, #49	; 0x31
 80232b2:	d008      	beq.n	80232c6 <d_print_comp+0xf42>
 80232b4:	e00f      	b.n	80232d6 <d_print_comp+0xf52>
 80232b6:	6878      	ldr	r0, [r7, #4]
 80232b8:	f24e 7108 	movw	r1, #59144	; 0xe708
 80232bc:	f6c0 0102 	movt	r1, #2050	; 0x802
 80232c0:	f7fe fe38 	bl	8021f34 <d_append_string>
 80232c4:	e15e      	b.n	8023584 <d_print_comp+0x1200>
 80232c6:	6878      	ldr	r0, [r7, #4]
 80232c8:	f24e 7110 	movw	r1, #59152	; 0xe710
 80232cc:	f6c0 0102 	movt	r1, #2050	; 0x802
 80232d0:	f7fe fe30 	bl	8021f34 <d_append_string>
 80232d4:	e156      	b.n	8023584 <d_print_comp+0x1200>
 80232d6:	bf00      	nop
 80232d8:	e003      	b.n	80232e2 <d_print_comp+0xf5e>
 80232da:	bf00      	nop
 80232dc:	e002      	b.n	80232e4 <d_print_comp+0xf60>
 80232de:	bf00      	nop
 80232e0:	e000      	b.n	80232e4 <d_print_comp+0xf60>
 80232e2:	bf00      	nop
 80232e4:	6878      	ldr	r0, [r7, #4]
 80232e6:	f04f 0128 	mov.w	r1, #40	; 0x28
 80232ea:	f7fe fde3 	bl	8021eb4 <d_append_char>
 80232ee:	683b      	ldr	r3, [r7, #0]
 80232f0:	685b      	ldr	r3, [r3, #4]
 80232f2:	6878      	ldr	r0, [r7, #4]
 80232f4:	4619      	mov	r1, r3
 80232f6:	f7ff f845 	bl	8022384 <d_print_comp>
 80232fa:	6878      	ldr	r0, [r7, #4]
 80232fc:	f04f 0129 	mov.w	r1, #41	; 0x29
 8023300:	f7fe fdd8 	bl	8021eb4 <d_append_char>
 8023304:	683b      	ldr	r3, [r7, #0]
 8023306:	781b      	ldrb	r3, [r3, #0]
 8023308:	2b36      	cmp	r3, #54	; 0x36
 802330a:	d104      	bne.n	8023316 <d_print_comp+0xf92>
 802330c:	6878      	ldr	r0, [r7, #4]
 802330e:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8023312:	f7fe fdcf 	bl	8021eb4 <d_append_char>
 8023316:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 802331a:	2b08      	cmp	r3, #8
 802331c:	d104      	bne.n	8023328 <d_print_comp+0xfa4>
 802331e:	6878      	ldr	r0, [r7, #4]
 8023320:	f04f 015b 	mov.w	r1, #91	; 0x5b
 8023324:	f7fe fdc6 	bl	8021eb4 <d_append_char>
 8023328:	683b      	ldr	r3, [r7, #0]
 802332a:	689b      	ldr	r3, [r3, #8]
 802332c:	6878      	ldr	r0, [r7, #4]
 802332e:	4619      	mov	r1, r3
 8023330:	f7ff f828 	bl	8022384 <d_print_comp>
 8023334:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8023338:	2b08      	cmp	r3, #8
 802333a:	f040 8122 	bne.w	8023582 <d_print_comp+0x11fe>
 802333e:	6878      	ldr	r0, [r7, #4]
 8023340:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8023344:	f7fe fdb6 	bl	8021eb4 <d_append_char>
 8023348:	e11b      	b.n	8023582 <d_print_comp+0x11fe>
 802334a:	683b      	ldr	r3, [r7, #0]
 802334c:	685b      	ldr	r3, [r3, #4]
 802334e:	6878      	ldr	r0, [r7, #4]
 8023350:	4619      	mov	r1, r3
 8023352:	f7fe fe01 	bl	8021f58 <d_append_num>
 8023356:	e115      	b.n	8023584 <d_print_comp+0x1200>
 8023358:	6878      	ldr	r0, [r7, #4]
 802335a:	f24e 7118 	movw	r1, #59160	; 0xe718
 802335e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023362:	f7fe fde7 	bl	8021f34 <d_append_string>
 8023366:	683b      	ldr	r3, [r7, #0]
 8023368:	685b      	ldr	r3, [r3, #4]
 802336a:	6878      	ldr	r0, [r7, #4]
 802336c:	4619      	mov	r1, r3
 802336e:	f7ff f809 	bl	8022384 <d_print_comp>
 8023372:	e107      	b.n	8023584 <d_print_comp+0x1200>
 8023374:	683b      	ldr	r3, [r7, #0]
 8023376:	685b      	ldr	r3, [r3, #4]
 8023378:	6878      	ldr	r0, [r7, #4]
 802337a:	4619      	mov	r1, r3
 802337c:	f7ff f802 	bl	8022384 <d_print_comp>
 8023380:	683b      	ldr	r3, [r7, #0]
 8023382:	689b      	ldr	r3, [r3, #8]
 8023384:	6878      	ldr	r0, [r7, #4]
 8023386:	4619      	mov	r1, r3
 8023388:	f7fe fffc 	bl	8022384 <d_print_comp>
 802338c:	e0fa      	b.n	8023584 <d_print_comp+0x1200>
 802338e:	683b      	ldr	r3, [r7, #0]
 8023390:	685b      	ldr	r3, [r3, #4]
 8023392:	b2db      	uxtb	r3, r3
 8023394:	6878      	ldr	r0, [r7, #4]
 8023396:	4619      	mov	r1, r3
 8023398:	f7fe fd8c 	bl	8021eb4 <d_append_char>
 802339c:	e0f2      	b.n	8023584 <d_print_comp+0x1200>
 802339e:	6878      	ldr	r0, [r7, #4]
 80233a0:	f24e 7128 	movw	r1, #59176	; 0xe728
 80233a4:	f6c0 0102 	movt	r1, #2050	; 0x802
 80233a8:	f7fe fdc4 	bl	8021f34 <d_append_string>
 80233ac:	683b      	ldr	r3, [r7, #0]
 80233ae:	685b      	ldr	r3, [r3, #4]
 80233b0:	6878      	ldr	r0, [r7, #4]
 80233b2:	4619      	mov	r1, r3
 80233b4:	f7fe ffe6 	bl	8022384 <d_print_comp>
 80233b8:	6878      	ldr	r0, [r7, #4]
 80233ba:	f04f 0129 	mov.w	r1, #41	; 0x29
 80233be:	f7fe fd79 	bl	8021eb4 <d_append_char>
 80233c2:	e0df      	b.n	8023584 <d_print_comp+0x1200>
 80233c4:	683b      	ldr	r3, [r7, #0]
 80233c6:	685b      	ldr	r3, [r3, #4]
 80233c8:	6878      	ldr	r0, [r7, #4]
 80233ca:	4619      	mov	r1, r3
 80233cc:	f7fe feaa 	bl	8022124 <d_find_pack>
 80233d0:	4603      	mov	r3, r0
 80233d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80233d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80233da:	2b00      	cmp	r3, #0
 80233dc:	d10d      	bne.n	80233fa <d_print_comp+0x1076>
 80233de:	683b      	ldr	r3, [r7, #0]
 80233e0:	685b      	ldr	r3, [r3, #4]
 80233e2:	6878      	ldr	r0, [r7, #4]
 80233e4:	4619      	mov	r1, r3
 80233e6:	f7fe ffa1 	bl	802232c <d_print_subexpr>
 80233ea:	6878      	ldr	r0, [r7, #4]
 80233ec:	f64d 3134 	movw	r1, #56116	; 0xdb34
 80233f0:	f6c0 0102 	movt	r1, #2050	; 0x802
 80233f4:	f7fe fd9e 	bl	8021f34 <d_append_string>
 80233f8:	e0c4      	b.n	8023584 <d_print_comp+0x1200>
 80233fa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80233fe:	f7fe ff73 	bl	80222e8 <d_pack_length>
 8023402:	4603      	mov	r3, r0
 8023404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023408:	683b      	ldr	r3, [r7, #0]
 802340a:	685b      	ldr	r3, [r3, #4]
 802340c:	603b      	str	r3, [r7, #0]
 802340e:	f04f 0300 	mov.w	r3, #0
 8023412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023416:	e01d      	b.n	8023454 <d_print_comp+0x10d0>
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802341e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8023422:	6878      	ldr	r0, [r7, #4]
 8023424:	6839      	ldr	r1, [r7, #0]
 8023426:	f7fe ffad 	bl	8022384 <d_print_comp>
 802342a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802342e:	f103 32ff 	add.w	r2, r3, #4294967295
 8023432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023436:	429a      	cmp	r2, r3
 8023438:	dd06      	ble.n	8023448 <d_print_comp+0x10c4>
 802343a:	6878      	ldr	r0, [r7, #4]
 802343c:	f24e 61dc 	movw	r1, #59100	; 0xe6dc
 8023440:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023444:	f7fe fd76 	bl	8021f34 <d_append_string>
 8023448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802344c:	f103 0301 	add.w	r3, r3, #1
 8023450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023454:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8023458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802345c:	429a      	cmp	r2, r3
 802345e:	dbdb      	blt.n	8023418 <d_print_comp+0x1094>
 8023460:	e090      	b.n	8023584 <d_print_comp+0x1200>
 8023462:	6878      	ldr	r0, [r7, #4]
 8023464:	f24e 7134 	movw	r1, #59188	; 0xe734
 8023468:	f6c0 0102 	movt	r1, #2050	; 0x802
 802346c:	f7fe fd62 	bl	8021f34 <d_append_string>
 8023470:	683b      	ldr	r3, [r7, #0]
 8023472:	685b      	ldr	r3, [r3, #4]
 8023474:	f103 0301 	add.w	r3, r3, #1
 8023478:	6878      	ldr	r0, [r7, #4]
 802347a:	4619      	mov	r1, r3
 802347c:	f7fe fd6c 	bl	8021f58 <d_append_num>
 8023480:	6878      	ldr	r0, [r7, #4]
 8023482:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8023486:	f7fe fd15 	bl	8021eb4 <d_append_char>
 802348a:	e07b      	b.n	8023584 <d_print_comp+0x1200>
 802348c:	6878      	ldr	r0, [r7, #4]
 802348e:	f24e 713c 	movw	r1, #59196	; 0xe73c
 8023492:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023496:	f7fe fd4d 	bl	8021f34 <d_append_string>
 802349a:	683b      	ldr	r3, [r7, #0]
 802349c:	685b      	ldr	r3, [r3, #4]
 802349e:	6878      	ldr	r0, [r7, #4]
 80234a0:	4619      	mov	r1, r3
 80234a2:	f7fe ff6f 	bl	8022384 <d_print_comp>
 80234a6:	e06d      	b.n	8023584 <d_print_comp+0x1200>
 80234a8:	6878      	ldr	r0, [r7, #4]
 80234aa:	f24e 715c 	movw	r1, #59228	; 0xe75c
 80234ae:	f6c0 0102 	movt	r1, #2050	; 0x802
 80234b2:	f7fe fd3f 	bl	8021f34 <d_append_string>
 80234b6:	683b      	ldr	r3, [r7, #0]
 80234b8:	685b      	ldr	r3, [r3, #4]
 80234ba:	6878      	ldr	r0, [r7, #4]
 80234bc:	4619      	mov	r1, r3
 80234be:	f7fe ff61 	bl	8022384 <d_print_comp>
 80234c2:	e05f      	b.n	8023584 <d_print_comp+0x1200>
 80234c4:	6878      	ldr	r0, [r7, #4]
 80234c6:	f24e 717c 	movw	r1, #59260	; 0xe77c
 80234ca:	f6c0 0102 	movt	r1, #2050	; 0x802
 80234ce:	f7fe fd31 	bl	8021f34 <d_append_string>
 80234d2:	683b      	ldr	r3, [r7, #0]
 80234d4:	685b      	ldr	r3, [r3, #4]
 80234d6:	6878      	ldr	r0, [r7, #4]
 80234d8:	4619      	mov	r1, r3
 80234da:	f7fe ff53 	bl	8022384 <d_print_comp>
 80234de:	6878      	ldr	r0, [r7, #4]
 80234e0:	f24e 7188 	movw	r1, #59272	; 0xe788
 80234e4:	f6c0 0102 	movt	r1, #2050	; 0x802
 80234e8:	f7fe fd24 	bl	8021f34 <d_append_string>
 80234ec:	683b      	ldr	r3, [r7, #0]
 80234ee:	689b      	ldr	r3, [r3, #8]
 80234f0:	f103 0301 	add.w	r3, r3, #1
 80234f4:	6878      	ldr	r0, [r7, #4]
 80234f6:	4619      	mov	r1, r3
 80234f8:	f7fe fd2e 	bl	8021f58 <d_append_num>
 80234fc:	6878      	ldr	r0, [r7, #4]
 80234fe:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8023502:	f7fe fcd7 	bl	8021eb4 <d_append_char>
 8023506:	e03d      	b.n	8023584 <d_print_comp+0x1200>
 8023508:	6878      	ldr	r0, [r7, #4]
 802350a:	f24e 718c 	movw	r1, #59276	; 0xe78c
 802350e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023512:	f7fe fd0f 	bl	8021f34 <d_append_string>
 8023516:	683b      	ldr	r3, [r7, #0]
 8023518:	685b      	ldr	r3, [r3, #4]
 802351a:	f103 0301 	add.w	r3, r3, #1
 802351e:	6878      	ldr	r0, [r7, #4]
 8023520:	4619      	mov	r1, r3
 8023522:	f7fe fd19 	bl	8021f58 <d_append_num>
 8023526:	6878      	ldr	r0, [r7, #4]
 8023528:	f04f 017d 	mov.w	r1, #125	; 0x7d
 802352c:	f7fe fcc2 	bl	8021eb4 <d_append_char>
 8023530:	e028      	b.n	8023584 <d_print_comp+0x1200>
 8023532:	683b      	ldr	r3, [r7, #0]
 8023534:	685b      	ldr	r3, [r3, #4]
 8023536:	6878      	ldr	r0, [r7, #4]
 8023538:	4619      	mov	r1, r3
 802353a:	f7fe ff23 	bl	8022384 <d_print_comp>
 802353e:	6878      	ldr	r0, [r7, #4]
 8023540:	f24e 719c 	movw	r1, #59292	; 0xe79c
 8023544:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023548:	f7fe fcf4 	bl	8021f34 <d_append_string>
 802354c:	683b      	ldr	r3, [r7, #0]
 802354e:	689b      	ldr	r3, [r3, #8]
 8023550:	6878      	ldr	r0, [r7, #4]
 8023552:	4619      	mov	r1, r3
 8023554:	f7fe ff16 	bl	8022384 <d_print_comp>
 8023558:	6878      	ldr	r0, [r7, #4]
 802355a:	f04f 015d 	mov.w	r1, #93	; 0x5d
 802355e:	f7fe fca9 	bl	8021eb4 <d_append_char>
 8023562:	e00f      	b.n	8023584 <d_print_comp+0x1200>
 8023564:	6878      	ldr	r0, [r7, #4]
 8023566:	f7fe fc5b 	bl	8021e20 <d_print_error>
 802356a:	bf00      	nop
 802356c:	e00a      	b.n	8023584 <d_print_comp+0x1200>
 802356e:	bf00      	nop
 8023570:	e008      	b.n	8023584 <d_print_comp+0x1200>
 8023572:	bf00      	nop
 8023574:	e006      	b.n	8023584 <d_print_comp+0x1200>
 8023576:	bf00      	nop
 8023578:	e004      	b.n	8023584 <d_print_comp+0x1200>
 802357a:	bf00      	nop
 802357c:	e002      	b.n	8023584 <d_print_comp+0x1200>
 802357e:	bf00      	nop
 8023580:	e000      	b.n	8023584 <d_print_comp+0x1200>
 8023582:	bf00      	nop
 8023584:	f107 07d4 	add.w	r7, r7, #212	; 0xd4
 8023588:	46bd      	mov	sp, r7
 802358a:	bd90      	pop	{r4, r7, pc}

0802358c <d_print_java_identifier>:
 802358c:	b580      	push	{r7, lr}
 802358e:	b08a      	sub	sp, #40	; 0x28
 8023590:	af00      	add	r7, sp, #0
 8023592:	60f8      	str	r0, [r7, #12]
 8023594:	60b9      	str	r1, [r7, #8]
 8023596:	607a      	str	r2, [r7, #4]
 8023598:	687b      	ldr	r3, [r7, #4]
 802359a:	68ba      	ldr	r2, [r7, #8]
 802359c:	18d3      	adds	r3, r2, r3
 802359e:	617b      	str	r3, [r7, #20]
 80235a0:	68bb      	ldr	r3, [r7, #8]
 80235a2:	627b      	str	r3, [r7, #36]	; 0x24
 80235a4:	e071      	b.n	802368a <d_print_java_identifier+0xfe>
 80235a6:	697a      	ldr	r2, [r7, #20]
 80235a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235aa:	1ad3      	subs	r3, r2, r3
 80235ac:	2b03      	cmp	r3, #3
 80235ae:	dd62      	ble.n	8023676 <d_print_java_identifier+0xea>
 80235b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235b2:	781b      	ldrb	r3, [r3, #0]
 80235b4:	2b5f      	cmp	r3, #95	; 0x5f
 80235b6:	d15e      	bne.n	8023676 <d_print_java_identifier+0xea>
 80235b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235ba:	f103 0301 	add.w	r3, r3, #1
 80235be:	781b      	ldrb	r3, [r3, #0]
 80235c0:	2b5f      	cmp	r3, #95	; 0x5f
 80235c2:	d158      	bne.n	8023676 <d_print_java_identifier+0xea>
 80235c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235c6:	f103 0302 	add.w	r3, r3, #2
 80235ca:	781b      	ldrb	r3, [r3, #0]
 80235cc:	2b55      	cmp	r3, #85	; 0x55
 80235ce:	d152      	bne.n	8023676 <d_print_java_identifier+0xea>
 80235d0:	f04f 0300 	mov.w	r3, #0
 80235d4:	623b      	str	r3, [r7, #32]
 80235d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235d8:	f103 0303 	add.w	r3, r3, #3
 80235dc:	61fb      	str	r3, [r7, #28]
 80235de:	e032      	b.n	8023646 <d_print_java_identifier+0xba>
 80235e0:	69fb      	ldr	r3, [r7, #28]
 80235e2:	781b      	ldrb	r3, [r3, #0]
 80235e4:	2b2f      	cmp	r3, #47	; 0x2f
 80235e6:	d909      	bls.n	80235fc <d_print_java_identifier+0x70>
 80235e8:	69fb      	ldr	r3, [r7, #28]
 80235ea:	781b      	ldrb	r3, [r3, #0]
 80235ec:	2b39      	cmp	r3, #57	; 0x39
 80235ee:	d805      	bhi.n	80235fc <d_print_java_identifier+0x70>
 80235f0:	69fb      	ldr	r3, [r7, #28]
 80235f2:	781b      	ldrb	r3, [r3, #0]
 80235f4:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80235f8:	61bb      	str	r3, [r7, #24]
 80235fa:	e01a      	b.n	8023632 <d_print_java_identifier+0xa6>
 80235fc:	69fb      	ldr	r3, [r7, #28]
 80235fe:	781b      	ldrb	r3, [r3, #0]
 8023600:	2b40      	cmp	r3, #64	; 0x40
 8023602:	d909      	bls.n	8023618 <d_print_java_identifier+0x8c>
 8023604:	69fb      	ldr	r3, [r7, #28]
 8023606:	781b      	ldrb	r3, [r3, #0]
 8023608:	2b46      	cmp	r3, #70	; 0x46
 802360a:	d805      	bhi.n	8023618 <d_print_java_identifier+0x8c>
 802360c:	69fb      	ldr	r3, [r7, #28]
 802360e:	781b      	ldrb	r3, [r3, #0]
 8023610:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 8023614:	61bb      	str	r3, [r7, #24]
 8023616:	e00c      	b.n	8023632 <d_print_java_identifier+0xa6>
 8023618:	69fb      	ldr	r3, [r7, #28]
 802361a:	781b      	ldrb	r3, [r3, #0]
 802361c:	2b60      	cmp	r3, #96	; 0x60
 802361e:	d916      	bls.n	802364e <d_print_java_identifier+0xc2>
 8023620:	69fb      	ldr	r3, [r7, #28]
 8023622:	781b      	ldrb	r3, [r3, #0]
 8023624:	2b66      	cmp	r3, #102	; 0x66
 8023626:	d812      	bhi.n	802364e <d_print_java_identifier+0xc2>
 8023628:	69fb      	ldr	r3, [r7, #28]
 802362a:	781b      	ldrb	r3, [r3, #0]
 802362c:	f1a3 0357 	sub.w	r3, r3, #87	; 0x57
 8023630:	61bb      	str	r3, [r7, #24]
 8023632:	6a3b      	ldr	r3, [r7, #32]
 8023634:	ea4f 1203 	mov.w	r2, r3, lsl #4
 8023638:	69bb      	ldr	r3, [r7, #24]
 802363a:	18d3      	adds	r3, r2, r3
 802363c:	623b      	str	r3, [r7, #32]
 802363e:	69fb      	ldr	r3, [r7, #28]
 8023640:	f103 0301 	add.w	r3, r3, #1
 8023644:	61fb      	str	r3, [r7, #28]
 8023646:	69fa      	ldr	r2, [r7, #28]
 8023648:	697b      	ldr	r3, [r7, #20]
 802364a:	429a      	cmp	r2, r3
 802364c:	d3c8      	bcc.n	80235e0 <d_print_java_identifier+0x54>
 802364e:	69fa      	ldr	r2, [r7, #28]
 8023650:	697b      	ldr	r3, [r7, #20]
 8023652:	429a      	cmp	r2, r3
 8023654:	d20f      	bcs.n	8023676 <d_print_java_identifier+0xea>
 8023656:	69fb      	ldr	r3, [r7, #28]
 8023658:	781b      	ldrb	r3, [r3, #0]
 802365a:	2b5f      	cmp	r3, #95	; 0x5f
 802365c:	d10b      	bne.n	8023676 <d_print_java_identifier+0xea>
 802365e:	6a3b      	ldr	r3, [r7, #32]
 8023660:	2bff      	cmp	r3, #255	; 0xff
 8023662:	d808      	bhi.n	8023676 <d_print_java_identifier+0xea>
 8023664:	6a3b      	ldr	r3, [r7, #32]
 8023666:	b2db      	uxtb	r3, r3
 8023668:	68f8      	ldr	r0, [r7, #12]
 802366a:	4619      	mov	r1, r3
 802366c:	f7fe fc22 	bl	8021eb4 <d_append_char>
 8023670:	69fb      	ldr	r3, [r7, #28]
 8023672:	627b      	str	r3, [r7, #36]	; 0x24
 8023674:	e005      	b.n	8023682 <d_print_java_identifier+0xf6>
 8023676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023678:	781b      	ldrb	r3, [r3, #0]
 802367a:	68f8      	ldr	r0, [r7, #12]
 802367c:	4619      	mov	r1, r3
 802367e:	f7fe fc19 	bl	8021eb4 <d_append_char>
 8023682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023684:	f103 0301 	add.w	r3, r3, #1
 8023688:	627b      	str	r3, [r7, #36]	; 0x24
 802368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802368c:	697b      	ldr	r3, [r7, #20]
 802368e:	429a      	cmp	r2, r3
 8023690:	d389      	bcc.n	80235a6 <d_print_java_identifier+0x1a>
 8023692:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8023696:	46bd      	mov	sp, r7
 8023698:	bd80      	pop	{r7, pc}
 802369a:	bf00      	nop

0802369c <d_print_mod_list>:
 802369c:	b580      	push	{r7, lr}
 802369e:	b088      	sub	sp, #32
 80236a0:	af00      	add	r7, sp, #0
 80236a2:	60f8      	str	r0, [r7, #12]
 80236a4:	60b9      	str	r1, [r7, #8]
 80236a6:	607a      	str	r2, [r7, #4]
 80236a8:	68bb      	ldr	r3, [r7, #8]
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	f000 80d2 	beq.w	8023854 <d_print_mod_list+0x1b8>
 80236b0:	68f8      	ldr	r0, [r7, #12]
 80236b2:	f7fe fbc3 	bl	8021e3c <d_print_saw_error>
 80236b6:	4603      	mov	r3, r0
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	f040 80cb 	bne.w	8023854 <d_print_mod_list+0x1b8>
 80236be:	68bb      	ldr	r3, [r7, #8]
 80236c0:	689b      	ldr	r3, [r3, #8]
 80236c2:	2b00      	cmp	r3, #0
 80236c4:	d111      	bne.n	80236ea <d_print_mod_list+0x4e>
 80236c6:	687b      	ldr	r3, [r7, #4]
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	d116      	bne.n	80236fa <d_print_mod_list+0x5e>
 80236cc:	68bb      	ldr	r3, [r7, #8]
 80236ce:	685b      	ldr	r3, [r3, #4]
 80236d0:	781b      	ldrb	r3, [r3, #0]
 80236d2:	2b1a      	cmp	r3, #26
 80236d4:	d009      	beq.n	80236ea <d_print_mod_list+0x4e>
 80236d6:	68bb      	ldr	r3, [r7, #8]
 80236d8:	685b      	ldr	r3, [r3, #4]
 80236da:	781b      	ldrb	r3, [r3, #0]
 80236dc:	2b1b      	cmp	r3, #27
 80236de:	d004      	beq.n	80236ea <d_print_mod_list+0x4e>
 80236e0:	68bb      	ldr	r3, [r7, #8]
 80236e2:	685b      	ldr	r3, [r3, #4]
 80236e4:	781b      	ldrb	r3, [r3, #0]
 80236e6:	2b1c      	cmp	r3, #28
 80236e8:	d107      	bne.n	80236fa <d_print_mod_list+0x5e>
 80236ea:	68bb      	ldr	r3, [r7, #8]
 80236ec:	681b      	ldr	r3, [r3, #0]
 80236ee:	68f8      	ldr	r0, [r7, #12]
 80236f0:	4619      	mov	r1, r3
 80236f2:	687a      	ldr	r2, [r7, #4]
 80236f4:	f7ff ffd2 	bl	802369c <d_print_mod_list>
 80236f8:	e0ad      	b.n	8023856 <d_print_mod_list+0x1ba>
 80236fa:	68bb      	ldr	r3, [r7, #8]
 80236fc:	f04f 0201 	mov.w	r2, #1
 8023700:	609a      	str	r2, [r3, #8]
 8023702:	68fb      	ldr	r3, [r7, #12]
 8023704:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8023708:	61bb      	str	r3, [r7, #24]
 802370a:	68bb      	ldr	r3, [r7, #8]
 802370c:	68da      	ldr	r2, [r3, #12]
 802370e:	68fb      	ldr	r3, [r7, #12]
 8023710:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8023714:	68bb      	ldr	r3, [r7, #8]
 8023716:	685b      	ldr	r3, [r3, #4]
 8023718:	781b      	ldrb	r3, [r3, #0]
 802371a:	2b25      	cmp	r3, #37	; 0x25
 802371c:	d10d      	bne.n	802373a <d_print_mod_list+0x9e>
 802371e:	68bb      	ldr	r3, [r7, #8]
 8023720:	685a      	ldr	r2, [r3, #4]
 8023722:	68bb      	ldr	r3, [r7, #8]
 8023724:	681b      	ldr	r3, [r3, #0]
 8023726:	68f8      	ldr	r0, [r7, #12]
 8023728:	4611      	mov	r1, r2
 802372a:	461a      	mov	r2, r3
 802372c:	f000 f982 	bl	8023a34 <d_print_function_type>
 8023730:	68fb      	ldr	r3, [r7, #12]
 8023732:	69ba      	ldr	r2, [r7, #24]
 8023734:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8023738:	e08d      	b.n	8023856 <d_print_mod_list+0x1ba>
 802373a:	68bb      	ldr	r3, [r7, #8]
 802373c:	685b      	ldr	r3, [r3, #4]
 802373e:	781b      	ldrb	r3, [r3, #0]
 8023740:	2b26      	cmp	r3, #38	; 0x26
 8023742:	d10d      	bne.n	8023760 <d_print_mod_list+0xc4>
 8023744:	68bb      	ldr	r3, [r7, #8]
 8023746:	685a      	ldr	r2, [r3, #4]
 8023748:	68bb      	ldr	r3, [r7, #8]
 802374a:	681b      	ldr	r3, [r3, #0]
 802374c:	68f8      	ldr	r0, [r7, #12]
 802374e:	4611      	mov	r1, r2
 8023750:	461a      	mov	r2, r3
 8023752:	f000 fa19 	bl	8023b88 <d_print_array_type>
 8023756:	68fb      	ldr	r3, [r7, #12]
 8023758:	69ba      	ldr	r2, [r7, #24]
 802375a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 802375e:	e07a      	b.n	8023856 <d_print_mod_list+0x1ba>
 8023760:	68bb      	ldr	r3, [r7, #8]
 8023762:	685b      	ldr	r3, [r3, #4]
 8023764:	781b      	ldrb	r3, [r3, #0]
 8023766:	2b02      	cmp	r3, #2
 8023768:	d162      	bne.n	8023830 <d_print_mod_list+0x194>
 802376a:	68fb      	ldr	r3, [r7, #12]
 802376c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8023770:	617b      	str	r3, [r7, #20]
 8023772:	68fb      	ldr	r3, [r7, #12]
 8023774:	f04f 0200 	mov.w	r2, #0
 8023778:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 802377c:	68bb      	ldr	r3, [r7, #8]
 802377e:	685b      	ldr	r3, [r3, #4]
 8023780:	685b      	ldr	r3, [r3, #4]
 8023782:	68f8      	ldr	r0, [r7, #12]
 8023784:	4619      	mov	r1, r3
 8023786:	f7fe fdfd 	bl	8022384 <d_print_comp>
 802378a:	68fb      	ldr	r3, [r7, #12]
 802378c:	697a      	ldr	r2, [r7, #20]
 802378e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8023792:	68fb      	ldr	r3, [r7, #12]
 8023794:	681b      	ldr	r3, [r3, #0]
 8023796:	f003 0304 	and.w	r3, r3, #4
 802379a:	2b00      	cmp	r3, #0
 802379c:	d107      	bne.n	80237ae <d_print_mod_list+0x112>
 802379e:	68f8      	ldr	r0, [r7, #12]
 80237a0:	f24e 51a8 	movw	r1, #58792	; 0xe5a8
 80237a4:	f6c0 0102 	movt	r1, #2050	; 0x802
 80237a8:	f7fe fbc4 	bl	8021f34 <d_append_string>
 80237ac:	e004      	b.n	80237b8 <d_print_mod_list+0x11c>
 80237ae:	68f8      	ldr	r0, [r7, #12]
 80237b0:	f04f 012e 	mov.w	r1, #46	; 0x2e
 80237b4:	f7fe fb7e 	bl	8021eb4 <d_append_char>
 80237b8:	68bb      	ldr	r3, [r7, #8]
 80237ba:	685b      	ldr	r3, [r3, #4]
 80237bc:	689b      	ldr	r3, [r3, #8]
 80237be:	61fb      	str	r3, [r7, #28]
 80237c0:	69fb      	ldr	r3, [r7, #28]
 80237c2:	781b      	ldrb	r3, [r3, #0]
 80237c4:	2b3f      	cmp	r3, #63	; 0x3f
 80237c6:	d11d      	bne.n	8023804 <d_print_mod_list+0x168>
 80237c8:	68f8      	ldr	r0, [r7, #12]
 80237ca:	f24e 71a8 	movw	r1, #59304	; 0xe7a8
 80237ce:	f6c0 0102 	movt	r1, #2050	; 0x802
 80237d2:	f7fe fbaf 	bl	8021f34 <d_append_string>
 80237d6:	69fb      	ldr	r3, [r7, #28]
 80237d8:	689b      	ldr	r3, [r3, #8]
 80237da:	f103 0301 	add.w	r3, r3, #1
 80237de:	68f8      	ldr	r0, [r7, #12]
 80237e0:	4619      	mov	r1, r3
 80237e2:	f7fe fbb9 	bl	8021f58 <d_append_num>
 80237e6:	68f8      	ldr	r0, [r7, #12]
 80237e8:	f24e 71b8 	movw	r1, #59320	; 0xe7b8
 80237ec:	f6c0 0102 	movt	r1, #2050	; 0x802
 80237f0:	f7fe fba0 	bl	8021f34 <d_append_string>
 80237f4:	69fb      	ldr	r3, [r7, #28]
 80237f6:	685b      	ldr	r3, [r3, #4]
 80237f8:	61fb      	str	r3, [r7, #28]
 80237fa:	e003      	b.n	8023804 <d_print_mod_list+0x168>
 80237fc:	69fb      	ldr	r3, [r7, #28]
 80237fe:	685b      	ldr	r3, [r3, #4]
 8023800:	61fb      	str	r3, [r7, #28]
 8023802:	e000      	b.n	8023806 <d_print_mod_list+0x16a>
 8023804:	bf00      	nop
 8023806:	69fb      	ldr	r3, [r7, #28]
 8023808:	781b      	ldrb	r3, [r3, #0]
 802380a:	2b1a      	cmp	r3, #26
 802380c:	d0f6      	beq.n	80237fc <d_print_mod_list+0x160>
 802380e:	69fb      	ldr	r3, [r7, #28]
 8023810:	781b      	ldrb	r3, [r3, #0]
 8023812:	2b1b      	cmp	r3, #27
 8023814:	d0f2      	beq.n	80237fc <d_print_mod_list+0x160>
 8023816:	69fb      	ldr	r3, [r7, #28]
 8023818:	781b      	ldrb	r3, [r3, #0]
 802381a:	2b1c      	cmp	r3, #28
 802381c:	d0ee      	beq.n	80237fc <d_print_mod_list+0x160>
 802381e:	68f8      	ldr	r0, [r7, #12]
 8023820:	69f9      	ldr	r1, [r7, #28]
 8023822:	f7fe fdaf 	bl	8022384 <d_print_comp>
 8023826:	68fb      	ldr	r3, [r7, #12]
 8023828:	69ba      	ldr	r2, [r7, #24]
 802382a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 802382e:	e012      	b.n	8023856 <d_print_mod_list+0x1ba>
 8023830:	68bb      	ldr	r3, [r7, #8]
 8023832:	685b      	ldr	r3, [r3, #4]
 8023834:	68f8      	ldr	r0, [r7, #12]
 8023836:	4619      	mov	r1, r3
 8023838:	f000 f812 	bl	8023860 <d_print_mod>
 802383c:	68fb      	ldr	r3, [r7, #12]
 802383e:	69ba      	ldr	r2, [r7, #24]
 8023840:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8023844:	68bb      	ldr	r3, [r7, #8]
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	68f8      	ldr	r0, [r7, #12]
 802384a:	4619      	mov	r1, r3
 802384c:	687a      	ldr	r2, [r7, #4]
 802384e:	f7ff ff25 	bl	802369c <d_print_mod_list>
 8023852:	e000      	b.n	8023856 <d_print_mod_list+0x1ba>
 8023854:	bf00      	nop
 8023856:	f107 0720 	add.w	r7, r7, #32
 802385a:	46bd      	mov	sp, r7
 802385c:	bd80      	pop	{r7, pc}
 802385e:	bf00      	nop

08023860 <d_print_mod>:
 8023860:	b580      	push	{r7, lr}
 8023862:	b082      	sub	sp, #8
 8023864:	af00      	add	r7, sp, #0
 8023866:	6078      	str	r0, [r7, #4]
 8023868:	6039      	str	r1, [r7, #0]
 802386a:	683b      	ldr	r3, [r7, #0]
 802386c:	781b      	ldrb	r3, [r3, #0]
 802386e:	f1a3 0303 	sub.w	r3, r3, #3
 8023872:	2b26      	cmp	r3, #38	; 0x26
 8023874:	f200 80d3 	bhi.w	8023a1e <d_print_mod+0x1be>
 8023878:	a201      	add	r2, pc, #4	; (adr r2, 8023880 <d_print_mod+0x20>)
 802387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802387e:	bf00      	nop
 8023880:	080239eb 	.word	0x080239eb
 8023884:	08023a1f 	.word	0x08023a1f
 8023888:	08023a1f 	.word	0x08023a1f
 802388c:	08023a1f 	.word	0x08023a1f
 8023890:	08023a1f 	.word	0x08023a1f
 8023894:	08023a1f 	.word	0x08023a1f
 8023898:	08023a1f 	.word	0x08023a1f
 802389c:	08023a1f 	.word	0x08023a1f
 80238a0:	08023a1f 	.word	0x08023a1f
 80238a4:	08023a1f 	.word	0x08023a1f
 80238a8:	08023a1f 	.word	0x08023a1f
 80238ac:	08023a1f 	.word	0x08023a1f
 80238b0:	08023a1f 	.word	0x08023a1f
 80238b4:	08023a1f 	.word	0x08023a1f
 80238b8:	08023a1f 	.word	0x08023a1f
 80238bc:	08023a1f 	.word	0x08023a1f
 80238c0:	08023a1f 	.word	0x08023a1f
 80238c4:	08023a1f 	.word	0x08023a1f
 80238c8:	08023a1f 	.word	0x08023a1f
 80238cc:	08023a1f 	.word	0x08023a1f
 80238d0:	0802391d 	.word	0x0802391d
 80238d4:	0802392d 	.word	0x0802392d
 80238d8:	0802393d 	.word	0x0802393d
 80238dc:	0802391d 	.word	0x0802391d
 80238e0:	0802392d 	.word	0x0802392d
 80238e4:	0802393d 	.word	0x0802393d
 80238e8:	0802394d 	.word	0x0802394d
 80238ec:	08023965 	.word	0x08023965
 80238f0:	0802397d 	.word	0x0802397d
 80238f4:	08023989 	.word	0x08023989
 80238f8:	08023999 	.word	0x08023999
 80238fc:	080239a9 	.word	0x080239a9
 8023900:	08023a1f 	.word	0x08023a1f
 8023904:	08023a1f 	.word	0x08023a1f
 8023908:	08023a1f 	.word	0x08023a1f
 802390c:	08023a1f 	.word	0x08023a1f
 8023910:	080239b9 	.word	0x080239b9
 8023914:	08023a1f 	.word	0x08023a1f
 8023918:	080239f9 	.word	0x080239f9
 802391c:	6878      	ldr	r0, [r7, #4]
 802391e:	f24e 71bc 	movw	r1, #59324	; 0xe7bc
 8023922:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023926:	f7fe fb05 	bl	8021f34 <d_append_string>
 802392a:	e07f      	b.n	8023a2c <d_print_mod+0x1cc>
 802392c:	6878      	ldr	r0, [r7, #4]
 802392e:	f24e 71c8 	movw	r1, #59336	; 0xe7c8
 8023932:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023936:	f7fe fafd 	bl	8021f34 <d_append_string>
 802393a:	e077      	b.n	8023a2c <d_print_mod+0x1cc>
 802393c:	6878      	ldr	r0, [r7, #4]
 802393e:	f24e 71d4 	movw	r1, #59348	; 0xe7d4
 8023942:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023946:	f7fe faf5 	bl	8021f34 <d_append_string>
 802394a:	e06f      	b.n	8023a2c <d_print_mod+0x1cc>
 802394c:	6878      	ldr	r0, [r7, #4]
 802394e:	f04f 0120 	mov.w	r1, #32
 8023952:	f7fe faaf 	bl	8021eb4 <d_append_char>
 8023956:	683b      	ldr	r3, [r7, #0]
 8023958:	689b      	ldr	r3, [r3, #8]
 802395a:	6878      	ldr	r0, [r7, #4]
 802395c:	4619      	mov	r1, r3
 802395e:	f7fe fd11 	bl	8022384 <d_print_comp>
 8023962:	e063      	b.n	8023a2c <d_print_mod+0x1cc>
 8023964:	687b      	ldr	r3, [r7, #4]
 8023966:	681b      	ldr	r3, [r3, #0]
 8023968:	f003 0304 	and.w	r3, r3, #4
 802396c:	2b00      	cmp	r3, #0
 802396e:	d15c      	bne.n	8023a2a <d_print_mod+0x1ca>
 8023970:	6878      	ldr	r0, [r7, #4]
 8023972:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8023976:	f7fe fa9d 	bl	8021eb4 <d_append_char>
 802397a:	e056      	b.n	8023a2a <d_print_mod+0x1ca>
 802397c:	6878      	ldr	r0, [r7, #4]
 802397e:	f04f 0126 	mov.w	r1, #38	; 0x26
 8023982:	f7fe fa97 	bl	8021eb4 <d_append_char>
 8023986:	e051      	b.n	8023a2c <d_print_mod+0x1cc>
 8023988:	6878      	ldr	r0, [r7, #4]
 802398a:	f64d 6160 	movw	r1, #56928	; 0xde60
 802398e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023992:	f7fe facf 	bl	8021f34 <d_append_string>
 8023996:	e049      	b.n	8023a2c <d_print_mod+0x1cc>
 8023998:	6878      	ldr	r0, [r7, #4]
 802399a:	f24e 71dc 	movw	r1, #59356	; 0xe7dc
 802399e:	f6c0 0102 	movt	r1, #2050	; 0x802
 80239a2:	f7fe fac7 	bl	8021f34 <d_append_string>
 80239a6:	e041      	b.n	8023a2c <d_print_mod+0x1cc>
 80239a8:	6878      	ldr	r0, [r7, #4]
 80239aa:	f24e 71e8 	movw	r1, #59368	; 0xe7e8
 80239ae:	f6c0 0102 	movt	r1, #2050	; 0x802
 80239b2:	f7fe fabf 	bl	8021f34 <d_append_string>
 80239b6:	e039      	b.n	8023a2c <d_print_mod+0x1cc>
 80239b8:	6878      	ldr	r0, [r7, #4]
 80239ba:	f7fe fae7 	bl	8021f8c <d_last_char>
 80239be:	4603      	mov	r3, r0
 80239c0:	2b28      	cmp	r3, #40	; 0x28
 80239c2:	d004      	beq.n	80239ce <d_print_mod+0x16e>
 80239c4:	6878      	ldr	r0, [r7, #4]
 80239c6:	f04f 0120 	mov.w	r1, #32
 80239ca:	f7fe fa73 	bl	8021eb4 <d_append_char>
 80239ce:	683b      	ldr	r3, [r7, #0]
 80239d0:	685b      	ldr	r3, [r3, #4]
 80239d2:	6878      	ldr	r0, [r7, #4]
 80239d4:	4619      	mov	r1, r3
 80239d6:	f7fe fcd5 	bl	8022384 <d_print_comp>
 80239da:	6878      	ldr	r0, [r7, #4]
 80239dc:	f24e 71f4 	movw	r1, #59380	; 0xe7f4
 80239e0:	f6c0 0102 	movt	r1, #2050	; 0x802
 80239e4:	f7fe faa6 	bl	8021f34 <d_append_string>
 80239e8:	e020      	b.n	8023a2c <d_print_mod+0x1cc>
 80239ea:	683b      	ldr	r3, [r7, #0]
 80239ec:	685b      	ldr	r3, [r3, #4]
 80239ee:	6878      	ldr	r0, [r7, #4]
 80239f0:	4619      	mov	r1, r3
 80239f2:	f7fe fcc7 	bl	8022384 <d_print_comp>
 80239f6:	e019      	b.n	8023a2c <d_print_mod+0x1cc>
 80239f8:	6878      	ldr	r0, [r7, #4]
 80239fa:	f24e 71f8 	movw	r1, #59384	; 0xe7f8
 80239fe:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023a02:	f7fe fa97 	bl	8021f34 <d_append_string>
 8023a06:	683b      	ldr	r3, [r7, #0]
 8023a08:	685b      	ldr	r3, [r3, #4]
 8023a0a:	6878      	ldr	r0, [r7, #4]
 8023a0c:	4619      	mov	r1, r3
 8023a0e:	f7fe fcb9 	bl	8022384 <d_print_comp>
 8023a12:	6878      	ldr	r0, [r7, #4]
 8023a14:	f04f 0129 	mov.w	r1, #41	; 0x29
 8023a18:	f7fe fa4c 	bl	8021eb4 <d_append_char>
 8023a1c:	e006      	b.n	8023a2c <d_print_mod+0x1cc>
 8023a1e:	6878      	ldr	r0, [r7, #4]
 8023a20:	6839      	ldr	r1, [r7, #0]
 8023a22:	f7fe fcaf 	bl	8022384 <d_print_comp>
 8023a26:	bf00      	nop
 8023a28:	e000      	b.n	8023a2c <d_print_mod+0x1cc>
 8023a2a:	bf00      	nop
 8023a2c:	f107 0708 	add.w	r7, r7, #8
 8023a30:	46bd      	mov	sp, r7
 8023a32:	bd80      	pop	{r7, pc}

08023a34 <d_print_function_type>:
 8023a34:	b580      	push	{r7, lr}
 8023a36:	b088      	sub	sp, #32
 8023a38:	af00      	add	r7, sp, #0
 8023a3a:	60f8      	str	r0, [r7, #12]
 8023a3c:	60b9      	str	r1, [r7, #8]
 8023a3e:	607a      	str	r2, [r7, #4]
 8023a40:	f04f 0300 	mov.w	r3, #0
 8023a44:	61fb      	str	r3, [r7, #28]
 8023a46:	f04f 0300 	mov.w	r3, #0
 8023a4a:	61bb      	str	r3, [r7, #24]
 8023a4c:	687b      	ldr	r3, [r7, #4]
 8023a4e:	617b      	str	r3, [r7, #20]
 8023a50:	e032      	b.n	8023ab8 <d_print_function_type+0x84>
 8023a52:	697b      	ldr	r3, [r7, #20]
 8023a54:	689b      	ldr	r3, [r3, #8]
 8023a56:	2b00      	cmp	r3, #0
 8023a58:	d132      	bne.n	8023ac0 <d_print_function_type+0x8c>
 8023a5a:	697b      	ldr	r3, [r7, #20]
 8023a5c:	685b      	ldr	r3, [r3, #4]
 8023a5e:	781b      	ldrb	r3, [r3, #0]
 8023a60:	f1a3 0317 	sub.w	r3, r3, #23
 8023a64:	2b10      	cmp	r3, #16
 8023a66:	d81e      	bhi.n	8023aa6 <d_print_function_type+0x72>
 8023a68:	f04f 0201 	mov.w	r2, #1
 8023a6c:	fa02 f203 	lsl.w	r2, r2, r3
 8023a70:	f640 4347 	movw	r3, #3143	; 0xc47
 8023a74:	f2c0 0301 	movt	r3, #1
 8023a78:	4013      	ands	r3, r2
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	d10c      	bne.n	8023a98 <d_print_function_type+0x64>
 8023a7e:	f402 7360 	and.w	r3, r2, #896	; 0x380
 8023a82:	2b00      	cmp	r3, #0
 8023a84:	d104      	bne.n	8023a90 <d_print_function_type+0x5c>
 8023a86:	f002 0338 	and.w	r3, r2, #56	; 0x38
 8023a8a:	2b00      	cmp	r3, #0
 8023a8c:	d10d      	bne.n	8023aaa <d_print_function_type+0x76>
 8023a8e:	e00a      	b.n	8023aa6 <d_print_function_type+0x72>
 8023a90:	f04f 0301 	mov.w	r3, #1
 8023a94:	61fb      	str	r3, [r7, #28]
 8023a96:	e009      	b.n	8023aac <d_print_function_type+0x78>
 8023a98:	f04f 0301 	mov.w	r3, #1
 8023a9c:	61bb      	str	r3, [r7, #24]
 8023a9e:	f04f 0301 	mov.w	r3, #1
 8023aa2:	61fb      	str	r3, [r7, #28]
 8023aa4:	e002      	b.n	8023aac <d_print_function_type+0x78>
 8023aa6:	bf00      	nop
 8023aa8:	e000      	b.n	8023aac <d_print_function_type+0x78>
 8023aaa:	bf00      	nop
 8023aac:	69fb      	ldr	r3, [r7, #28]
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	d108      	bne.n	8023ac4 <d_print_function_type+0x90>
 8023ab2:	697b      	ldr	r3, [r7, #20]
 8023ab4:	681b      	ldr	r3, [r3, #0]
 8023ab6:	617b      	str	r3, [r7, #20]
 8023ab8:	697b      	ldr	r3, [r7, #20]
 8023aba:	2b00      	cmp	r3, #0
 8023abc:	d1c9      	bne.n	8023a52 <d_print_function_type+0x1e>
 8023abe:	e002      	b.n	8023ac6 <d_print_function_type+0x92>
 8023ac0:	bf00      	nop
 8023ac2:	e000      	b.n	8023ac6 <d_print_function_type+0x92>
 8023ac4:	bf00      	nop
 8023ac6:	69fb      	ldr	r3, [r7, #28]
 8023ac8:	2b00      	cmp	r3, #0
 8023aca:	d024      	beq.n	8023b16 <d_print_function_type+0xe2>
 8023acc:	69bb      	ldr	r3, [r7, #24]
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	d10e      	bne.n	8023af0 <d_print_function_type+0xbc>
 8023ad2:	68f8      	ldr	r0, [r7, #12]
 8023ad4:	f7fe fa5a 	bl	8021f8c <d_last_char>
 8023ad8:	4603      	mov	r3, r0
 8023ada:	2b28      	cmp	r3, #40	; 0x28
 8023adc:	d008      	beq.n	8023af0 <d_print_function_type+0xbc>
 8023ade:	68f8      	ldr	r0, [r7, #12]
 8023ae0:	f7fe fa54 	bl	8021f8c <d_last_char>
 8023ae4:	4603      	mov	r3, r0
 8023ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8023ae8:	d002      	beq.n	8023af0 <d_print_function_type+0xbc>
 8023aea:	f04f 0301 	mov.w	r3, #1
 8023aee:	61bb      	str	r3, [r7, #24]
 8023af0:	69bb      	ldr	r3, [r7, #24]
 8023af2:	2b00      	cmp	r3, #0
 8023af4:	d00a      	beq.n	8023b0c <d_print_function_type+0xd8>
 8023af6:	68f8      	ldr	r0, [r7, #12]
 8023af8:	f7fe fa48 	bl	8021f8c <d_last_char>
 8023afc:	4603      	mov	r3, r0
 8023afe:	2b20      	cmp	r3, #32
 8023b00:	d004      	beq.n	8023b0c <d_print_function_type+0xd8>
 8023b02:	68f8      	ldr	r0, [r7, #12]
 8023b04:	f04f 0120 	mov.w	r1, #32
 8023b08:	f7fe f9d4 	bl	8021eb4 <d_append_char>
 8023b0c:	68f8      	ldr	r0, [r7, #12]
 8023b0e:	f04f 0128 	mov.w	r1, #40	; 0x28
 8023b12:	f7fe f9cf 	bl	8021eb4 <d_append_char>
 8023b16:	68fb      	ldr	r3, [r7, #12]
 8023b18:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8023b1c:	613b      	str	r3, [r7, #16]
 8023b1e:	68fb      	ldr	r3, [r7, #12]
 8023b20:	f04f 0200 	mov.w	r2, #0
 8023b24:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8023b28:	68f8      	ldr	r0, [r7, #12]
 8023b2a:	6879      	ldr	r1, [r7, #4]
 8023b2c:	f04f 0200 	mov.w	r2, #0
 8023b30:	f7ff fdb4 	bl	802369c <d_print_mod_list>
 8023b34:	69fb      	ldr	r3, [r7, #28]
 8023b36:	2b00      	cmp	r3, #0
 8023b38:	d004      	beq.n	8023b44 <d_print_function_type+0x110>
 8023b3a:	68f8      	ldr	r0, [r7, #12]
 8023b3c:	f04f 0129 	mov.w	r1, #41	; 0x29
 8023b40:	f7fe f9b8 	bl	8021eb4 <d_append_char>
 8023b44:	68f8      	ldr	r0, [r7, #12]
 8023b46:	f04f 0128 	mov.w	r1, #40	; 0x28
 8023b4a:	f7fe f9b3 	bl	8021eb4 <d_append_char>
 8023b4e:	68bb      	ldr	r3, [r7, #8]
 8023b50:	689b      	ldr	r3, [r3, #8]
 8023b52:	2b00      	cmp	r3, #0
 8023b54:	d005      	beq.n	8023b62 <d_print_function_type+0x12e>
 8023b56:	68bb      	ldr	r3, [r7, #8]
 8023b58:	689b      	ldr	r3, [r3, #8]
 8023b5a:	68f8      	ldr	r0, [r7, #12]
 8023b5c:	4619      	mov	r1, r3
 8023b5e:	f7fe fc11 	bl	8022384 <d_print_comp>
 8023b62:	68f8      	ldr	r0, [r7, #12]
 8023b64:	f04f 0129 	mov.w	r1, #41	; 0x29
 8023b68:	f7fe f9a4 	bl	8021eb4 <d_append_char>
 8023b6c:	68f8      	ldr	r0, [r7, #12]
 8023b6e:	6879      	ldr	r1, [r7, #4]
 8023b70:	f04f 0201 	mov.w	r2, #1
 8023b74:	f7ff fd92 	bl	802369c <d_print_mod_list>
 8023b78:	68fb      	ldr	r3, [r7, #12]
 8023b7a:	693a      	ldr	r2, [r7, #16]
 8023b7c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8023b80:	f107 0720 	add.w	r7, r7, #32
 8023b84:	46bd      	mov	sp, r7
 8023b86:	bd80      	pop	{r7, pc}

08023b88 <d_print_array_type>:
 8023b88:	b580      	push	{r7, lr}
 8023b8a:	b088      	sub	sp, #32
 8023b8c:	af00      	add	r7, sp, #0
 8023b8e:	60f8      	str	r0, [r7, #12]
 8023b90:	60b9      	str	r1, [r7, #8]
 8023b92:	607a      	str	r2, [r7, #4]
 8023b94:	f04f 0301 	mov.w	r3, #1
 8023b98:	61fb      	str	r3, [r7, #28]
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	2b00      	cmp	r3, #0
 8023b9e:	d037      	beq.n	8023c10 <d_print_array_type+0x88>
 8023ba0:	f04f 0300 	mov.w	r3, #0
 8023ba4:	61bb      	str	r3, [r7, #24]
 8023ba6:	687b      	ldr	r3, [r7, #4]
 8023ba8:	617b      	str	r3, [r7, #20]
 8023baa:	e016      	b.n	8023bda <d_print_array_type+0x52>
 8023bac:	697b      	ldr	r3, [r7, #20]
 8023bae:	689b      	ldr	r3, [r3, #8]
 8023bb0:	2b00      	cmp	r3, #0
 8023bb2:	d10f      	bne.n	8023bd4 <d_print_array_type+0x4c>
 8023bb4:	697b      	ldr	r3, [r7, #20]
 8023bb6:	685b      	ldr	r3, [r3, #4]
 8023bb8:	781b      	ldrb	r3, [r3, #0]
 8023bba:	2b26      	cmp	r3, #38	; 0x26
 8023bbc:	d103      	bne.n	8023bc6 <d_print_array_type+0x3e>
 8023bbe:	f04f 0300 	mov.w	r3, #0
 8023bc2:	61fb      	str	r3, [r7, #28]
 8023bc4:	e00c      	b.n	8023be0 <d_print_array_type+0x58>
 8023bc6:	f04f 0301 	mov.w	r3, #1
 8023bca:	61bb      	str	r3, [r7, #24]
 8023bcc:	f04f 0301 	mov.w	r3, #1
 8023bd0:	61fb      	str	r3, [r7, #28]
 8023bd2:	e005      	b.n	8023be0 <d_print_array_type+0x58>
 8023bd4:	697b      	ldr	r3, [r7, #20]
 8023bd6:	681b      	ldr	r3, [r3, #0]
 8023bd8:	617b      	str	r3, [r7, #20]
 8023bda:	697b      	ldr	r3, [r7, #20]
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	d1e5      	bne.n	8023bac <d_print_array_type+0x24>
 8023be0:	69bb      	ldr	r3, [r7, #24]
 8023be2:	2b00      	cmp	r3, #0
 8023be4:	d006      	beq.n	8023bf4 <d_print_array_type+0x6c>
 8023be6:	68f8      	ldr	r0, [r7, #12]
 8023be8:	f64e 0104 	movw	r1, #59396	; 0xe804
 8023bec:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023bf0:	f7fe f9a0 	bl	8021f34 <d_append_string>
 8023bf4:	68f8      	ldr	r0, [r7, #12]
 8023bf6:	6879      	ldr	r1, [r7, #4]
 8023bf8:	f04f 0200 	mov.w	r2, #0
 8023bfc:	f7ff fd4e 	bl	802369c <d_print_mod_list>
 8023c00:	69bb      	ldr	r3, [r7, #24]
 8023c02:	2b00      	cmp	r3, #0
 8023c04:	d004      	beq.n	8023c10 <d_print_array_type+0x88>
 8023c06:	68f8      	ldr	r0, [r7, #12]
 8023c08:	f04f 0129 	mov.w	r1, #41	; 0x29
 8023c0c:	f7fe f952 	bl	8021eb4 <d_append_char>
 8023c10:	69fb      	ldr	r3, [r7, #28]
 8023c12:	2b00      	cmp	r3, #0
 8023c14:	d004      	beq.n	8023c20 <d_print_array_type+0x98>
 8023c16:	68f8      	ldr	r0, [r7, #12]
 8023c18:	f04f 0120 	mov.w	r1, #32
 8023c1c:	f7fe f94a 	bl	8021eb4 <d_append_char>
 8023c20:	68f8      	ldr	r0, [r7, #12]
 8023c22:	f04f 015b 	mov.w	r1, #91	; 0x5b
 8023c26:	f7fe f945 	bl	8021eb4 <d_append_char>
 8023c2a:	68bb      	ldr	r3, [r7, #8]
 8023c2c:	685b      	ldr	r3, [r3, #4]
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	d005      	beq.n	8023c3e <d_print_array_type+0xb6>
 8023c32:	68bb      	ldr	r3, [r7, #8]
 8023c34:	685b      	ldr	r3, [r3, #4]
 8023c36:	68f8      	ldr	r0, [r7, #12]
 8023c38:	4619      	mov	r1, r3
 8023c3a:	f7fe fba3 	bl	8022384 <d_print_comp>
 8023c3e:	68f8      	ldr	r0, [r7, #12]
 8023c40:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8023c44:	f7fe f936 	bl	8021eb4 <d_append_char>
 8023c48:	f107 0720 	add.w	r7, r7, #32
 8023c4c:	46bd      	mov	sp, r7
 8023c4e:	bd80      	pop	{r7, pc}

08023c50 <d_print_expr_op>:
 8023c50:	b580      	push	{r7, lr}
 8023c52:	b082      	sub	sp, #8
 8023c54:	af00      	add	r7, sp, #0
 8023c56:	6078      	str	r0, [r7, #4]
 8023c58:	6039      	str	r1, [r7, #0]
 8023c5a:	683b      	ldr	r3, [r7, #0]
 8023c5c:	781b      	ldrb	r3, [r3, #0]
 8023c5e:	2b2c      	cmp	r3, #44	; 0x2c
 8023c60:	d10b      	bne.n	8023c7a <d_print_expr_op+0x2a>
 8023c62:	683b      	ldr	r3, [r7, #0]
 8023c64:	685b      	ldr	r3, [r3, #4]
 8023c66:	685a      	ldr	r2, [r3, #4]
 8023c68:	683b      	ldr	r3, [r7, #0]
 8023c6a:	685b      	ldr	r3, [r3, #4]
 8023c6c:	689b      	ldr	r3, [r3, #8]
 8023c6e:	6878      	ldr	r0, [r7, #4]
 8023c70:	4611      	mov	r1, r2
 8023c72:	461a      	mov	r2, r3
 8023c74:	f7fe f940 	bl	8021ef8 <d_append_buffer>
 8023c78:	e003      	b.n	8023c82 <d_print_expr_op+0x32>
 8023c7a:	6878      	ldr	r0, [r7, #4]
 8023c7c:	6839      	ldr	r1, [r7, #0]
 8023c7e:	f7fe fb81 	bl	8022384 <d_print_comp>
 8023c82:	f107 0708 	add.w	r7, r7, #8
 8023c86:	46bd      	mov	sp, r7
 8023c88:	bd80      	pop	{r7, pc}
 8023c8a:	bf00      	nop

08023c8c <d_print_cast>:
 8023c8c:	b580      	push	{r7, lr}
 8023c8e:	b086      	sub	sp, #24
 8023c90:	af00      	add	r7, sp, #0
 8023c92:	6078      	str	r0, [r7, #4]
 8023c94:	6039      	str	r1, [r7, #0]
 8023c96:	683b      	ldr	r3, [r7, #0]
 8023c98:	685b      	ldr	r3, [r3, #4]
 8023c9a:	781b      	ldrb	r3, [r3, #0]
 8023c9c:	2b04      	cmp	r3, #4
 8023c9e:	d006      	beq.n	8023cae <d_print_cast+0x22>
 8023ca0:	683b      	ldr	r3, [r7, #0]
 8023ca2:	685b      	ldr	r3, [r3, #4]
 8023ca4:	6878      	ldr	r0, [r7, #4]
 8023ca6:	4619      	mov	r1, r3
 8023ca8:	f7fe fb6c 	bl	8022384 <d_print_comp>
 8023cac:	e04a      	b.n	8023d44 <d_print_cast+0xb8>
 8023cae:	687b      	ldr	r3, [r7, #4]
 8023cb0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8023cb4:	617b      	str	r3, [r7, #20]
 8023cb6:	687b      	ldr	r3, [r7, #4]
 8023cb8:	f04f 0200 	mov.w	r2, #0
 8023cbc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8023cc0:	687b      	ldr	r3, [r7, #4]
 8023cc2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8023cc6:	60fb      	str	r3, [r7, #12]
 8023cc8:	687b      	ldr	r3, [r7, #4]
 8023cca:	f107 020c 	add.w	r2, r7, #12
 8023cce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8023cd2:	683b      	ldr	r3, [r7, #0]
 8023cd4:	685b      	ldr	r3, [r3, #4]
 8023cd6:	613b      	str	r3, [r7, #16]
 8023cd8:	683b      	ldr	r3, [r7, #0]
 8023cda:	685b      	ldr	r3, [r3, #4]
 8023cdc:	685b      	ldr	r3, [r3, #4]
 8023cde:	6878      	ldr	r0, [r7, #4]
 8023ce0:	4619      	mov	r1, r3
 8023ce2:	f7fe fb4f 	bl	8022384 <d_print_comp>
 8023ce6:	68fa      	ldr	r2, [r7, #12]
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8023cee:	6878      	ldr	r0, [r7, #4]
 8023cf0:	f7fe f94c 	bl	8021f8c <d_last_char>
 8023cf4:	4603      	mov	r3, r0
 8023cf6:	2b3c      	cmp	r3, #60	; 0x3c
 8023cf8:	d104      	bne.n	8023d04 <d_print_cast+0x78>
 8023cfa:	6878      	ldr	r0, [r7, #4]
 8023cfc:	f04f 0120 	mov.w	r1, #32
 8023d00:	f7fe f8d8 	bl	8021eb4 <d_append_char>
 8023d04:	6878      	ldr	r0, [r7, #4]
 8023d06:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8023d0a:	f7fe f8d3 	bl	8021eb4 <d_append_char>
 8023d0e:	683b      	ldr	r3, [r7, #0]
 8023d10:	685b      	ldr	r3, [r3, #4]
 8023d12:	689b      	ldr	r3, [r3, #8]
 8023d14:	6878      	ldr	r0, [r7, #4]
 8023d16:	4619      	mov	r1, r3
 8023d18:	f7fe fb34 	bl	8022384 <d_print_comp>
 8023d1c:	6878      	ldr	r0, [r7, #4]
 8023d1e:	f7fe f935 	bl	8021f8c <d_last_char>
 8023d22:	4603      	mov	r3, r0
 8023d24:	2b3e      	cmp	r3, #62	; 0x3e
 8023d26:	d104      	bne.n	8023d32 <d_print_cast+0xa6>
 8023d28:	6878      	ldr	r0, [r7, #4]
 8023d2a:	f04f 0120 	mov.w	r1, #32
 8023d2e:	f7fe f8c1 	bl	8021eb4 <d_append_char>
 8023d32:	6878      	ldr	r0, [r7, #4]
 8023d34:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8023d38:	f7fe f8bc 	bl	8021eb4 <d_append_char>
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	697a      	ldr	r2, [r7, #20]
 8023d40:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8023d44:	f107 0718 	add.w	r7, r7, #24
 8023d48:	46bd      	mov	sp, r7
 8023d4a:	bd80      	pop	{r7, pc}

08023d4c <d_init_info>:
 8023d4c:	b480      	push	{r7}
 8023d4e:	b085      	sub	sp, #20
 8023d50:	af00      	add	r7, sp, #0
 8023d52:	60f8      	str	r0, [r7, #12]
 8023d54:	60b9      	str	r1, [r7, #8]
 8023d56:	607a      	str	r2, [r7, #4]
 8023d58:	603b      	str	r3, [r7, #0]
 8023d5a:	683b      	ldr	r3, [r7, #0]
 8023d5c:	68fa      	ldr	r2, [r7, #12]
 8023d5e:	601a      	str	r2, [r3, #0]
 8023d60:	68fa      	ldr	r2, [r7, #12]
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	18d2      	adds	r2, r2, r3
 8023d66:	683b      	ldr	r3, [r7, #0]
 8023d68:	605a      	str	r2, [r3, #4]
 8023d6a:	683b      	ldr	r3, [r7, #0]
 8023d6c:	68ba      	ldr	r2, [r7, #8]
 8023d6e:	609a      	str	r2, [r3, #8]
 8023d70:	683b      	ldr	r3, [r7, #0]
 8023d72:	68fa      	ldr	r2, [r7, #12]
 8023d74:	60da      	str	r2, [r3, #12]
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023d7c:	461a      	mov	r2, r3
 8023d7e:	683b      	ldr	r3, [r7, #0]
 8023d80:	619a      	str	r2, [r3, #24]
 8023d82:	683b      	ldr	r3, [r7, #0]
 8023d84:	f04f 0200 	mov.w	r2, #0
 8023d88:	615a      	str	r2, [r3, #20]
 8023d8a:	687a      	ldr	r2, [r7, #4]
 8023d8c:	683b      	ldr	r3, [r7, #0]
 8023d8e:	625a      	str	r2, [r3, #36]	; 0x24
 8023d90:	683b      	ldr	r3, [r7, #0]
 8023d92:	f04f 0200 	mov.w	r2, #0
 8023d96:	621a      	str	r2, [r3, #32]
 8023d98:	683b      	ldr	r3, [r7, #0]
 8023d9a:	f04f 0200 	mov.w	r2, #0
 8023d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8023da0:	683b      	ldr	r3, [r7, #0]
 8023da2:	f04f 0200 	mov.w	r2, #0
 8023da6:	62da      	str	r2, [r3, #44]	; 0x2c
 8023da8:	683b      	ldr	r3, [r7, #0]
 8023daa:	f04f 0200 	mov.w	r2, #0
 8023dae:	631a      	str	r2, [r3, #48]	; 0x30
 8023db0:	f107 0714 	add.w	r7, r7, #20
 8023db4:	46bd      	mov	sp, r7
 8023db6:	bc80      	pop	{r7}
 8023db8:	4770      	bx	lr
 8023dba:	bf00      	nop

08023dbc <d_demangle_callback>:
 8023dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dc0:	b099      	sub	sp, #100	; 0x64
 8023dc2:	af00      	add	r7, sp, #0
 8023dc4:	60f8      	str	r0, [r7, #12]
 8023dc6:	60b9      	str	r1, [r7, #8]
 8023dc8:	607a      	str	r2, [r7, #4]
 8023dca:	603b      	str	r3, [r7, #0]
 8023dcc:	68fb      	ldr	r3, [r7, #12]
 8023dce:	781b      	ldrb	r3, [r3, #0]
 8023dd0:	2b5f      	cmp	r3, #95	; 0x5f
 8023dd2:	d10a      	bne.n	8023dea <d_demangle_callback+0x2e>
 8023dd4:	68fb      	ldr	r3, [r7, #12]
 8023dd6:	f103 0301 	add.w	r3, r3, #1
 8023dda:	781b      	ldrb	r3, [r3, #0]
 8023ddc:	2b5a      	cmp	r3, #90	; 0x5a
 8023dde:	d104      	bne.n	8023dea <d_demangle_callback+0x2e>
 8023de0:	f04f 0301 	mov.w	r3, #1
 8023de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023de8:	e049      	b.n	8023e7e <d_demangle_callback+0xc2>
 8023dea:	68f8      	ldr	r0, [r7, #12]
 8023dec:	f64d 6128 	movw	r1, #56872	; 0xde28
 8023df0:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023df4:	f04f 0208 	mov.w	r2, #8
 8023df8:	f002 fdc0 	bl	802697c <strncmp>
 8023dfc:	4603      	mov	r3, r0
 8023dfe:	2b00      	cmp	r3, #0
 8023e00:	d131      	bne.n	8023e66 <d_demangle_callback+0xaa>
 8023e02:	68fb      	ldr	r3, [r7, #12]
 8023e04:	f103 0308 	add.w	r3, r3, #8
 8023e08:	781b      	ldrb	r3, [r3, #0]
 8023e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8023e0c:	d00b      	beq.n	8023e26 <d_demangle_callback+0x6a>
 8023e0e:	68fb      	ldr	r3, [r7, #12]
 8023e10:	f103 0308 	add.w	r3, r3, #8
 8023e14:	781b      	ldrb	r3, [r3, #0]
 8023e16:	2b5f      	cmp	r3, #95	; 0x5f
 8023e18:	d005      	beq.n	8023e26 <d_demangle_callback+0x6a>
 8023e1a:	68fb      	ldr	r3, [r7, #12]
 8023e1c:	f103 0308 	add.w	r3, r3, #8
 8023e20:	781b      	ldrb	r3, [r3, #0]
 8023e22:	2b24      	cmp	r3, #36	; 0x24
 8023e24:	d11f      	bne.n	8023e66 <d_demangle_callback+0xaa>
 8023e26:	68fb      	ldr	r3, [r7, #12]
 8023e28:	f103 0309 	add.w	r3, r3, #9
 8023e2c:	781b      	ldrb	r3, [r3, #0]
 8023e2e:	2b44      	cmp	r3, #68	; 0x44
 8023e30:	d005      	beq.n	8023e3e <d_demangle_callback+0x82>
 8023e32:	68fb      	ldr	r3, [r7, #12]
 8023e34:	f103 0309 	add.w	r3, r3, #9
 8023e38:	781b      	ldrb	r3, [r3, #0]
 8023e3a:	2b49      	cmp	r3, #73	; 0x49
 8023e3c:	d113      	bne.n	8023e66 <d_demangle_callback+0xaa>
 8023e3e:	68fb      	ldr	r3, [r7, #12]
 8023e40:	f103 030a 	add.w	r3, r3, #10
 8023e44:	781b      	ldrb	r3, [r3, #0]
 8023e46:	2b5f      	cmp	r3, #95	; 0x5f
 8023e48:	d10d      	bne.n	8023e66 <d_demangle_callback+0xaa>
 8023e4a:	68fb      	ldr	r3, [r7, #12]
 8023e4c:	f103 0309 	add.w	r3, r3, #9
 8023e50:	781b      	ldrb	r3, [r3, #0]
 8023e52:	2b49      	cmp	r3, #73	; 0x49
 8023e54:	d102      	bne.n	8023e5c <d_demangle_callback+0xa0>
 8023e56:	f04f 0302 	mov.w	r3, #2
 8023e5a:	e001      	b.n	8023e60 <d_demangle_callback+0xa4>
 8023e5c:	f04f 0303 	mov.w	r3, #3
 8023e60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023e64:	e00b      	b.n	8023e7e <d_demangle_callback+0xc2>
 8023e66:	68bb      	ldr	r3, [r7, #8]
 8023e68:	f003 0310 	and.w	r3, r3, #16
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	d102      	bne.n	8023e76 <d_demangle_callback+0xba>
 8023e70:	f04f 0300 	mov.w	r3, #0
 8023e74:	e0f6      	b.n	8024064 <d_demangle_callback+0x2a8>
 8023e76:	f04f 0300 	mov.w	r3, #0
 8023e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023e7e:	68f8      	ldr	r0, [r7, #12]
 8023e80:	f002 fd4c 	bl	802691c <strlen>
 8023e84:	4602      	mov	r2, r0
 8023e86:	f107 0310 	add.w	r3, r7, #16
 8023e8a:	68f8      	ldr	r0, [r7, #12]
 8023e8c:	68b9      	ldr	r1, [r7, #8]
 8023e8e:	f7ff ff5d 	bl	8023d4c <d_init_info>
 8023e92:	466b      	mov	r3, sp
 8023e94:	461e      	mov	r6, r3
 8023e96:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8023e98:	f105 33ff 	add.w	r3, r5, #4294967295
 8023e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8023e9e:	462b      	mov	r3, r5
 8023ea0:	4618      	mov	r0, r3
 8023ea2:	f04f 0100 	mov.w	r1, #0
 8023ea6:	f04f 0360 	mov.w	r3, #96	; 0x60
 8023eaa:	fb03 f201 	mul.w	r2, r3, r1
 8023eae:	f04f 0300 	mov.w	r3, #0
 8023eb2:	fb03 f300 	mul.w	r3, r3, r0
 8023eb6:	18d4      	adds	r4, r2, r3
 8023eb8:	f04f 0360 	mov.w	r3, #96	; 0x60
 8023ebc:	fba0 2303 	umull	r2, r3, r0, r3
 8023ec0:	18e1      	adds	r1, r4, r3
 8023ec2:	460b      	mov	r3, r1
 8023ec4:	462a      	mov	r2, r5
 8023ec6:	4613      	mov	r3, r2
 8023ec8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023ecc:	189b      	adds	r3, r3, r2
 8023ece:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023ed2:	462b      	mov	r3, r5
 8023ed4:	4618      	mov	r0, r3
 8023ed6:	f04f 0100 	mov.w	r1, #0
 8023eda:	f04f 0360 	mov.w	r3, #96	; 0x60
 8023ede:	fb03 f201 	mul.w	r2, r3, r1
 8023ee2:	f04f 0300 	mov.w	r3, #0
 8023ee6:	fb03 f300 	mul.w	r3, r3, r0
 8023eea:	18d4      	adds	r4, r2, r3
 8023eec:	f04f 0360 	mov.w	r3, #96	; 0x60
 8023ef0:	fba0 2303 	umull	r2, r3, r0, r3
 8023ef4:	18e1      	adds	r1, r4, r3
 8023ef6:	460b      	mov	r3, r1
 8023ef8:	462a      	mov	r2, r5
 8023efa:	4613      	mov	r3, r2
 8023efc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023f00:	189b      	adds	r3, r3, r2
 8023f02:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023f06:	f103 0307 	add.w	r3, r3, #7
 8023f0a:	f103 0307 	add.w	r3, r3, #7
 8023f0e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8023f12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8023f16:	ebad 0d03 	sub.w	sp, sp, r3
 8023f1a:	466b      	mov	r3, sp
 8023f1c:	f103 0307 	add.w	r3, r3, #7
 8023f20:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8023f24:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8023f28:	653b      	str	r3, [r7, #80]	; 0x50
 8023f2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8023f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023f32:	4601      	mov	r1, r0
 8023f34:	460a      	mov	r2, r1
 8023f36:	f04f 0300 	mov.w	r3, #0
 8023f3a:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 8023f3e:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8023f42:	ea41 0b0b 	orr.w	fp, r1, fp
 8023f46:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8023f4a:	4601      	mov	r1, r0
 8023f4c:	460a      	mov	r2, r1
 8023f4e:	f04f 0300 	mov.w	r3, #0
 8023f52:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 8023f56:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8023f5a:	ea41 0909 	orr.w	r9, r1, r9
 8023f5e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8023f62:	4603      	mov	r3, r0
 8023f64:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023f68:	f103 0307 	add.w	r3, r3, #7
 8023f6c:	f103 0307 	add.w	r3, r3, #7
 8023f70:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8023f74:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8023f78:	ebad 0d03 	sub.w	sp, sp, r3
 8023f7c:	466b      	mov	r3, sp
 8023f7e:	f103 0307 	add.w	r3, r3, #7
 8023f82:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8023f86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8023f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8023f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023f8e:	623b      	str	r3, [r7, #32]
 8023f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023f94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023f98:	2b03      	cmp	r3, #3
 8023f9a:	d846      	bhi.n	802402a <d_demangle_callback+0x26e>
 8023f9c:	a201      	add	r2, pc, #4	; (adr r2, 8023fa4 <d_demangle_callback+0x1e8>)
 8023f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023fa2:	bf00      	nop
 8023fa4:	08023fb5 	.word	0x08023fb5
 8023fa8:	08023fc5 	.word	0x08023fc5
 8023fac:	08023fd9 	.word	0x08023fd9
 8023fb0:	08023fd9 	.word	0x08023fd9
 8023fb4:	f107 0310 	add.w	r3, r7, #16
 8023fb8:	4618      	mov	r0, r3
 8023fba:	f7fc f8b9 	bl	8020130 <d_type>
 8023fbe:	4603      	mov	r3, r0
 8023fc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8023fc2:	e032      	b.n	802402a <d_demangle_callback+0x26e>
 8023fc4:	f107 0310 	add.w	r3, r7, #16
 8023fc8:	4618      	mov	r0, r3
 8023fca:	f04f 0101 	mov.w	r1, #1
 8023fce:	f7fa ff79 	bl	801eec4 <d_mangled_name>
 8023fd2:	4603      	mov	r3, r0
 8023fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8023fd6:	e028      	b.n	802402a <d_demangle_callback+0x26e>
 8023fd8:	69fb      	ldr	r3, [r7, #28]
 8023fda:	f103 030b 	add.w	r3, r3, #11
 8023fde:	61fb      	str	r3, [r7, #28]
 8023fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023fe4:	2b02      	cmp	r3, #2
 8023fe6:	d102      	bne.n	8023fee <d_demangle_callback+0x232>
 8023fe8:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8023fec:	e001      	b.n	8023ff2 <d_demangle_callback+0x236>
 8023fee:	f04f 043d 	mov.w	r4, #61	; 0x3d
 8023ff2:	69fb      	ldr	r3, [r7, #28]
 8023ff4:	f107 0210 	add.w	r2, r7, #16
 8023ff8:	4610      	mov	r0, r2
 8023ffa:	4619      	mov	r1, r3
 8023ffc:	f7fa fe16 	bl	801ec2c <d_make_demangle_mangled_name>
 8024000:	4603      	mov	r3, r0
 8024002:	f107 0210 	add.w	r2, r7, #16
 8024006:	4610      	mov	r0, r2
 8024008:	4621      	mov	r1, r4
 802400a:	461a      	mov	r2, r3
 802400c:	f04f 0300 	mov.w	r3, #0
 8024010:	f7fa fd40 	bl	801ea94 <d_make_comp>
 8024014:	4603      	mov	r3, r0
 8024016:	65bb      	str	r3, [r7, #88]	; 0x58
 8024018:	69fc      	ldr	r4, [r7, #28]
 802401a:	69fb      	ldr	r3, [r7, #28]
 802401c:	4618      	mov	r0, r3
 802401e:	f002 fc7d 	bl	802691c <strlen>
 8024022:	4603      	mov	r3, r0
 8024024:	18e3      	adds	r3, r4, r3
 8024026:	61fb      	str	r3, [r7, #28]
 8024028:	bf00      	nop
 802402a:	68bb      	ldr	r3, [r7, #8]
 802402c:	f003 0301 	and.w	r3, r3, #1
 8024030:	b2db      	uxtb	r3, r3
 8024032:	2b00      	cmp	r3, #0
 8024034:	d006      	beq.n	8024044 <d_demangle_callback+0x288>
 8024036:	69fb      	ldr	r3, [r7, #28]
 8024038:	781b      	ldrb	r3, [r3, #0]
 802403a:	2b00      	cmp	r3, #0
 802403c:	d002      	beq.n	8024044 <d_demangle_callback+0x288>
 802403e:	f04f 0300 	mov.w	r3, #0
 8024042:	65bb      	str	r3, [r7, #88]	; 0x58
 8024044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024046:	2b00      	cmp	r3, #0
 8024048:	d007      	beq.n	802405a <d_demangle_callback+0x29e>
 802404a:	68b8      	ldr	r0, [r7, #8]
 802404c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802404e:	687a      	ldr	r2, [r7, #4]
 8024050:	683b      	ldr	r3, [r7, #0]
 8024052:	f7fd ffa9 	bl	8021fa8 <d_print_callback>
 8024056:	4603      	mov	r3, r0
 8024058:	e001      	b.n	802405e <d_demangle_callback+0x2a2>
 802405a:	f04f 0300 	mov.w	r3, #0
 802405e:	647b      	str	r3, [r7, #68]	; 0x44
 8024060:	46b5      	mov	sp, r6
 8024062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024064:	4618      	mov	r0, r3
 8024066:	f107 0764 	add.w	r7, r7, #100	; 0x64
 802406a:	46bd      	mov	sp, r7
 802406c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024070 <d_demangle>:
 8024070:	b580      	push	{r7, lr}
 8024072:	b08a      	sub	sp, #40	; 0x28
 8024074:	af00      	add	r7, sp, #0
 8024076:	60f8      	str	r0, [r7, #12]
 8024078:	60b9      	str	r1, [r7, #8]
 802407a:	607a      	str	r2, [r7, #4]
 802407c:	f107 0314 	add.w	r3, r7, #20
 8024080:	4618      	mov	r0, r3
 8024082:	f04f 0100 	mov.w	r1, #0
 8024086:	f7fd fddb 	bl	8021c40 <d_growable_string_init>
 802408a:	f107 0314 	add.w	r3, r7, #20
 802408e:	68f8      	ldr	r0, [r7, #12]
 8024090:	68b9      	ldr	r1, [r7, #8]
 8024092:	f641 5291 	movw	r2, #7569	; 0x1d91
 8024096:	f6c0 0202 	movt	r2, #2050	; 0x802
 802409a:	f7ff fe8f 	bl	8023dbc <d_demangle_callback>
 802409e:	4603      	mov	r3, r0
 80240a0:	627b      	str	r3, [r7, #36]	; 0x24
 80240a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80240a4:	2b00      	cmp	r3, #0
 80240a6:	d10a      	bne.n	80240be <d_demangle+0x4e>
 80240a8:	697b      	ldr	r3, [r7, #20]
 80240aa:	4618      	mov	r0, r3
 80240ac:	f001 fb38 	bl	8025720 <free>
 80240b0:	687b      	ldr	r3, [r7, #4]
 80240b2:	f04f 0200 	mov.w	r2, #0
 80240b6:	601a      	str	r2, [r3, #0]
 80240b8:	f04f 0300 	mov.w	r3, #0
 80240bc:	e009      	b.n	80240d2 <d_demangle+0x62>
 80240be:	6a3b      	ldr	r3, [r7, #32]
 80240c0:	2b00      	cmp	r3, #0
 80240c2:	d101      	bne.n	80240c8 <d_demangle+0x58>
 80240c4:	69fb      	ldr	r3, [r7, #28]
 80240c6:	e001      	b.n	80240cc <d_demangle+0x5c>
 80240c8:	f04f 0301 	mov.w	r3, #1
 80240cc:	687a      	ldr	r2, [r7, #4]
 80240ce:	6013      	str	r3, [r2, #0]
 80240d0:	697b      	ldr	r3, [r7, #20]
 80240d2:	4618      	mov	r0, r3
 80240d4:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80240d8:	46bd      	mov	sp, r7
 80240da:	bd80      	pop	{r7, pc}

080240dc <__cxa_demangle>:
 80240dc:	b580      	push	{r7, lr}
 80240de:	b086      	sub	sp, #24
 80240e0:	af00      	add	r7, sp, #0
 80240e2:	60f8      	str	r0, [r7, #12]
 80240e4:	60b9      	str	r1, [r7, #8]
 80240e6:	607a      	str	r2, [r7, #4]
 80240e8:	603b      	str	r3, [r7, #0]
 80240ea:	68fb      	ldr	r3, [r7, #12]
 80240ec:	2b00      	cmp	r3, #0
 80240ee:	d109      	bne.n	8024104 <__cxa_demangle+0x28>
 80240f0:	683b      	ldr	r3, [r7, #0]
 80240f2:	2b00      	cmp	r3, #0
 80240f4:	d003      	beq.n	80240fe <__cxa_demangle+0x22>
 80240f6:	683b      	ldr	r3, [r7, #0]
 80240f8:	f06f 0202 	mvn.w	r2, #2
 80240fc:	601a      	str	r2, [r3, #0]
 80240fe:	f04f 0300 	mov.w	r3, #0
 8024102:	e058      	b.n	80241b6 <__cxa_demangle+0xda>
 8024104:	68bb      	ldr	r3, [r7, #8]
 8024106:	2b00      	cmp	r3, #0
 8024108:	d00c      	beq.n	8024124 <__cxa_demangle+0x48>
 802410a:	687b      	ldr	r3, [r7, #4]
 802410c:	2b00      	cmp	r3, #0
 802410e:	d109      	bne.n	8024124 <__cxa_demangle+0x48>
 8024110:	683b      	ldr	r3, [r7, #0]
 8024112:	2b00      	cmp	r3, #0
 8024114:	d003      	beq.n	802411e <__cxa_demangle+0x42>
 8024116:	683b      	ldr	r3, [r7, #0]
 8024118:	f06f 0202 	mvn.w	r2, #2
 802411c:	601a      	str	r2, [r3, #0]
 802411e:	f04f 0300 	mov.w	r3, #0
 8024122:	e048      	b.n	80241b6 <__cxa_demangle+0xda>
 8024124:	f107 0310 	add.w	r3, r7, #16
 8024128:	68f8      	ldr	r0, [r7, #12]
 802412a:	f04f 0111 	mov.w	r1, #17
 802412e:	461a      	mov	r2, r3
 8024130:	f7ff ff9e 	bl	8024070 <d_demangle>
 8024134:	4603      	mov	r3, r0
 8024136:	617b      	str	r3, [r7, #20]
 8024138:	697b      	ldr	r3, [r7, #20]
 802413a:	2b00      	cmp	r3, #0
 802413c:	d111      	bne.n	8024162 <__cxa_demangle+0x86>
 802413e:	683b      	ldr	r3, [r7, #0]
 8024140:	2b00      	cmp	r3, #0
 8024142:	d00b      	beq.n	802415c <__cxa_demangle+0x80>
 8024144:	693b      	ldr	r3, [r7, #16]
 8024146:	2b01      	cmp	r3, #1
 8024148:	d104      	bne.n	8024154 <__cxa_demangle+0x78>
 802414a:	683b      	ldr	r3, [r7, #0]
 802414c:	f04f 32ff 	mov.w	r2, #4294967295
 8024150:	601a      	str	r2, [r3, #0]
 8024152:	e003      	b.n	802415c <__cxa_demangle+0x80>
 8024154:	683b      	ldr	r3, [r7, #0]
 8024156:	f06f 0201 	mvn.w	r2, #1
 802415a:	601a      	str	r2, [r3, #0]
 802415c:	f04f 0300 	mov.w	r3, #0
 8024160:	e029      	b.n	80241b6 <__cxa_demangle+0xda>
 8024162:	68bb      	ldr	r3, [r7, #8]
 8024164:	2b00      	cmp	r3, #0
 8024166:	d106      	bne.n	8024176 <__cxa_demangle+0x9a>
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	2b00      	cmp	r3, #0
 802416c:	d01b      	beq.n	80241a6 <__cxa_demangle+0xca>
 802416e:	693a      	ldr	r2, [r7, #16]
 8024170:	687b      	ldr	r3, [r7, #4]
 8024172:	601a      	str	r2, [r3, #0]
 8024174:	e017      	b.n	80241a6 <__cxa_demangle+0xca>
 8024176:	6978      	ldr	r0, [r7, #20]
 8024178:	f002 fbd0 	bl	802691c <strlen>
 802417c:	4602      	mov	r2, r0
 802417e:	687b      	ldr	r3, [r7, #4]
 8024180:	681b      	ldr	r3, [r3, #0]
 8024182:	429a      	cmp	r2, r3
 8024184:	d209      	bcs.n	802419a <__cxa_demangle+0xbe>
 8024186:	68b8      	ldr	r0, [r7, #8]
 8024188:	6979      	ldr	r1, [r7, #20]
 802418a:	f002 fb69 	bl	8026860 <strcpy>
 802418e:	6978      	ldr	r0, [r7, #20]
 8024190:	f001 fac6 	bl	8025720 <free>
 8024194:	68bb      	ldr	r3, [r7, #8]
 8024196:	617b      	str	r3, [r7, #20]
 8024198:	e005      	b.n	80241a6 <__cxa_demangle+0xca>
 802419a:	68b8      	ldr	r0, [r7, #8]
 802419c:	f001 fac0 	bl	8025720 <free>
 80241a0:	693a      	ldr	r2, [r7, #16]
 80241a2:	687b      	ldr	r3, [r7, #4]
 80241a4:	601a      	str	r2, [r3, #0]
 80241a6:	683b      	ldr	r3, [r7, #0]
 80241a8:	2b00      	cmp	r3, #0
 80241aa:	d003      	beq.n	80241b4 <__cxa_demangle+0xd8>
 80241ac:	683b      	ldr	r3, [r7, #0]
 80241ae:	f04f 0200 	mov.w	r2, #0
 80241b2:	601a      	str	r2, [r3, #0]
 80241b4:	697b      	ldr	r3, [r7, #20]
 80241b6:	4618      	mov	r0, r3
 80241b8:	f107 0718 	add.w	r7, r7, #24
 80241bc:	46bd      	mov	sp, r7
 80241be:	bd80      	pop	{r7, pc}

080241c0 <__gcclibcxx_demangle_callback>:
 80241c0:	b580      	push	{r7, lr}
 80241c2:	b086      	sub	sp, #24
 80241c4:	af00      	add	r7, sp, #0
 80241c6:	60f8      	str	r0, [r7, #12]
 80241c8:	60b9      	str	r1, [r7, #8]
 80241ca:	607a      	str	r2, [r7, #4]
 80241cc:	68fb      	ldr	r3, [r7, #12]
 80241ce:	2b00      	cmp	r3, #0
 80241d0:	d002      	beq.n	80241d8 <__gcclibcxx_demangle_callback+0x18>
 80241d2:	68bb      	ldr	r3, [r7, #8]
 80241d4:	2b00      	cmp	r3, #0
 80241d6:	d102      	bne.n	80241de <__gcclibcxx_demangle_callback+0x1e>
 80241d8:	f06f 0302 	mvn.w	r3, #2
 80241dc:	e010      	b.n	8024200 <__gcclibcxx_demangle_callback+0x40>
 80241de:	68f8      	ldr	r0, [r7, #12]
 80241e0:	f04f 0111 	mov.w	r1, #17
 80241e4:	68ba      	ldr	r2, [r7, #8]
 80241e6:	687b      	ldr	r3, [r7, #4]
 80241e8:	f7ff fde8 	bl	8023dbc <d_demangle_callback>
 80241ec:	4603      	mov	r3, r0
 80241ee:	617b      	str	r3, [r7, #20]
 80241f0:	697b      	ldr	r3, [r7, #20]
 80241f2:	2b00      	cmp	r3, #0
 80241f4:	d102      	bne.n	80241fc <__gcclibcxx_demangle_callback+0x3c>
 80241f6:	f06f 0301 	mvn.w	r3, #1
 80241fa:	e001      	b.n	8024200 <__gcclibcxx_demangle_callback+0x40>
 80241fc:	f04f 0300 	mov.w	r3, #0
 8024200:	4618      	mov	r0, r3
 8024202:	f107 0718 	add.w	r7, r7, #24
 8024206:	46bd      	mov	sp, r7
 8024208:	bd80      	pop	{r7, pc}
 802420a:	bf00      	nop

0802420c <_Unwind_decode_target2>:
 802420c:	6803      	ldr	r3, [r0, #0]
 802420e:	b103      	cbz	r3, 8024212 <_Unwind_decode_target2+0x6>
 8024210:	181b      	adds	r3, r3, r0
 8024212:	4618      	mov	r0, r3
 8024214:	4770      	bx	lr
 8024216:	bf00      	nop

08024218 <selfrel_offset31>:
 8024218:	6803      	ldr	r3, [r0, #0]
 802421a:	005a      	lsls	r2, r3, #1
 802421c:	bf4c      	ite	mi
 802421e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8024222:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8024226:	18c0      	adds	r0, r0, r3
 8024228:	4770      	bx	lr
 802422a:	bf00      	nop

0802422c <search_EIT_table>:
 802422c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024230:	4604      	mov	r4, r0
 8024232:	4691      	mov	r9, r2
 8024234:	460e      	mov	r6, r1
 8024236:	b301      	cbz	r1, 802427a <search_EIT_table+0x4e>
 8024238:	f101 3bff 	add.w	fp, r1, #4294967295
 802423c:	2700      	movs	r7, #0
 802423e:	46da      	mov	sl, fp
 8024240:	eb07 050a 	add.w	r5, r7, sl
 8024244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024248:	106d      	asrs	r5, r5, #1
 802424a:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 802424e:	4630      	mov	r0, r6
 8024250:	f7ff ffe2 	bl	8024218 <selfrel_offset31>
 8024254:	4680      	mov	r8, r0
 8024256:	1c68      	adds	r0, r5, #1
 8024258:	45ab      	cmp	fp, r5
 802425a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 802425e:	bf08      	it	eq
 8024260:	f04f 30ff 	moveq.w	r0, #4294967295
 8024264:	d002      	beq.n	802426c <search_EIT_table+0x40>
 8024266:	f7ff ffd7 	bl	8024218 <selfrel_offset31>
 802426a:	3801      	subs	r0, #1
 802426c:	45c8      	cmp	r8, r9
 802426e:	d907      	bls.n	8024280 <search_EIT_table+0x54>
 8024270:	42bd      	cmp	r5, r7
 8024272:	f105 3aff 	add.w	sl, r5, #4294967295
 8024276:	d1e3      	bne.n	8024240 <search_EIT_table+0x14>
 8024278:	2600      	movs	r6, #0
 802427a:	4630      	mov	r0, r6
 802427c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024280:	4548      	cmp	r0, r9
 8024282:	f105 0701 	add.w	r7, r5, #1
 8024286:	d3db      	bcc.n	8024240 <search_EIT_table+0x14>
 8024288:	4630      	mov	r0, r6
 802428a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802428e:	bf00      	nop

08024290 <get_eit_entry>:
 8024290:	4b2c      	ldr	r3, [pc, #176]	; (8024344 <get_eit_entry+0xb4>)
 8024292:	b530      	push	{r4, r5, lr}
 8024294:	4604      	mov	r4, r0
 8024296:	b083      	sub	sp, #12
 8024298:	1e8d      	subs	r5, r1, #2
 802429a:	2b00      	cmp	r3, #0
 802429c:	d04a      	beq.n	8024334 <get_eit_entry+0xa4>
 802429e:	4628      	mov	r0, r5
 80242a0:	a901      	add	r1, sp, #4
 80242a2:	f3af 8000 	nop.w
 80242a6:	4603      	mov	r3, r0
 80242a8:	2800      	cmp	r0, #0
 80242aa:	d023      	beq.n	80242f4 <get_eit_entry+0x64>
 80242ac:	462a      	mov	r2, r5
 80242ae:	4618      	mov	r0, r3
 80242b0:	9901      	ldr	r1, [sp, #4]
 80242b2:	f7ff ffbb 	bl	802422c <search_EIT_table>
 80242b6:	4605      	mov	r5, r0
 80242b8:	2800      	cmp	r0, #0
 80242ba:	d01e      	beq.n	80242fa <get_eit_entry+0x6a>
 80242bc:	f7ff ffac 	bl	8024218 <selfrel_offset31>
 80242c0:	686b      	ldr	r3, [r5, #4]
 80242c2:	2b01      	cmp	r3, #1
 80242c4:	64a0      	str	r0, [r4, #72]	; 0x48
 80242c6:	d011      	beq.n	80242ec <get_eit_entry+0x5c>
 80242c8:	1d28      	adds	r0, r5, #4
 80242ca:	2b00      	cmp	r3, #0
 80242cc:	db23      	blt.n	8024316 <get_eit_entry+0x86>
 80242ce:	f7ff ffa3 	bl	8024218 <selfrel_offset31>
 80242d2:	2300      	movs	r3, #0
 80242d4:	6523      	str	r3, [r4, #80]	; 0x50
 80242d6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80242d8:	6803      	ldr	r3, [r0, #0]
 80242da:	2b00      	cmp	r3, #0
 80242dc:	db10      	blt.n	8024300 <get_eit_entry+0x70>
 80242de:	f7ff ff9b 	bl	8024218 <selfrel_offset31>
 80242e2:	4603      	mov	r3, r0
 80242e4:	2000      	movs	r0, #0
 80242e6:	6123      	str	r3, [r4, #16]
 80242e8:	b003      	add	sp, #12
 80242ea:	bd30      	pop	{r4, r5, pc}
 80242ec:	2300      	movs	r3, #0
 80242ee:	2005      	movs	r0, #5
 80242f0:	6123      	str	r3, [r4, #16]
 80242f2:	e7f9      	b.n	80242e8 <get_eit_entry+0x58>
 80242f4:	6120      	str	r0, [r4, #16]
 80242f6:	2009      	movs	r0, #9
 80242f8:	e7f6      	b.n	80242e8 <get_eit_entry+0x58>
 80242fa:	6120      	str	r0, [r4, #16]
 80242fc:	2009      	movs	r0, #9
 80242fe:	e7f3      	b.n	80242e8 <get_eit_entry+0x58>
 8024300:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8024304:	b158      	cbz	r0, 802431e <get_eit_entry+0x8e>
 8024306:	2801      	cmp	r0, #1
 8024308:	d00c      	beq.n	8024324 <get_eit_entry+0x94>
 802430a:	2802      	cmp	r0, #2
 802430c:	d00e      	beq.n	802432c <get_eit_entry+0x9c>
 802430e:	2300      	movs	r3, #0
 8024310:	2009      	movs	r0, #9
 8024312:	6123      	str	r3, [r4, #16]
 8024314:	e7e8      	b.n	80242e8 <get_eit_entry+0x58>
 8024316:	2301      	movs	r3, #1
 8024318:	64e0      	str	r0, [r4, #76]	; 0x4c
 802431a:	6523      	str	r3, [r4, #80]	; 0x50
 802431c:	e7dc      	b.n	80242d8 <get_eit_entry+0x48>
 802431e:	4b0a      	ldr	r3, [pc, #40]	; (8024348 <get_eit_entry+0xb8>)
 8024320:	6123      	str	r3, [r4, #16]
 8024322:	e7e1      	b.n	80242e8 <get_eit_entry+0x58>
 8024324:	4b09      	ldr	r3, [pc, #36]	; (802434c <get_eit_entry+0xbc>)
 8024326:	2000      	movs	r0, #0
 8024328:	6123      	str	r3, [r4, #16]
 802432a:	e7dd      	b.n	80242e8 <get_eit_entry+0x58>
 802432c:	4b08      	ldr	r3, [pc, #32]	; (8024350 <get_eit_entry+0xc0>)
 802432e:	2000      	movs	r0, #0
 8024330:	6123      	str	r3, [r4, #16]
 8024332:	e7d9      	b.n	80242e8 <get_eit_entry+0x58>
 8024334:	4a07      	ldr	r2, [pc, #28]	; (8024354 <get_eit_entry+0xc4>)
 8024336:	4908      	ldr	r1, [pc, #32]	; (8024358 <get_eit_entry+0xc8>)
 8024338:	4613      	mov	r3, r2
 802433a:	1a8a      	subs	r2, r1, r2
 802433c:	10d2      	asrs	r2, r2, #3
 802433e:	9201      	str	r2, [sp, #4]
 8024340:	e7b4      	b.n	80242ac <get_eit_entry+0x1c>
 8024342:	bf00      	nop
 8024344:	00000000 	.word	0x00000000
 8024348:	08024831 	.word	0x08024831
 802434c:	0802482d 	.word	0x0802482d
 8024350:	08024829 	.word	0x08024829
 8024354:	0803603c 	.word	0x0803603c
 8024358:	08036244 	.word	0x08036244

0802435c <restore_non_core_regs>:
 802435c:	6803      	ldr	r3, [r0, #0]
 802435e:	b510      	push	{r4, lr}
 8024360:	4604      	mov	r4, r0
 8024362:	07d8      	lsls	r0, r3, #31
 8024364:	d406      	bmi.n	8024374 <restore_non_core_regs+0x18>
 8024366:	0799      	lsls	r1, r3, #30
 8024368:	f104 0048 	add.w	r0, r4, #72	; 0x48
 802436c:	d509      	bpl.n	8024382 <restore_non_core_regs+0x26>
 802436e:	f000 fc69 	bl	8024c44 <__gnu_Unwind_Restore_VFP_D>
 8024372:	6823      	ldr	r3, [r4, #0]
 8024374:	075a      	lsls	r2, r3, #29
 8024376:	d509      	bpl.n	802438c <restore_non_core_regs+0x30>
 8024378:	0718      	lsls	r0, r3, #28
 802437a:	d50e      	bpl.n	802439a <restore_non_core_regs+0x3e>
 802437c:	06d9      	lsls	r1, r3, #27
 802437e:	d513      	bpl.n	80243a8 <restore_non_core_regs+0x4c>
 8024380:	bd10      	pop	{r4, pc}
 8024382:	f000 fc57 	bl	8024c34 <__gnu_Unwind_Restore_VFP>
 8024386:	6823      	ldr	r3, [r4, #0]
 8024388:	075a      	lsls	r2, r3, #29
 802438a:	d4f5      	bmi.n	8024378 <restore_non_core_regs+0x1c>
 802438c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8024390:	f000 fc60 	bl	8024c54 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8024394:	6823      	ldr	r3, [r4, #0]
 8024396:	0718      	lsls	r0, r3, #28
 8024398:	d4f0      	bmi.n	802437c <restore_non_core_regs+0x20>
 802439a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 802439e:	f000 fc61 	bl	8024c64 <__gnu_Unwind_Restore_WMMXD>
 80243a2:	6823      	ldr	r3, [r4, #0]
 80243a4:	06d9      	lsls	r1, r3, #27
 80243a6:	d4eb      	bmi.n	8024380 <restore_non_core_regs+0x24>
 80243a8:	f504 700c 	add.w	r0, r4, #560	; 0x230
 80243ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80243b0:	f000 bc9c 	b.w	8024cec <__gnu_Unwind_Restore_WMMXC>

080243b4 <unwind_phase2_forced>:
 80243b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80243b8:	f101 0e04 	add.w	lr, r1, #4
 80243bc:	4605      	mov	r5, r0
 80243be:	4616      	mov	r6, r2
 80243c0:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80243c4:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 80243c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80243cc:	ac02      	add	r4, sp, #8
 80243ce:	1d27      	adds	r7, r4, #4
 80243d0:	f04f 0c00 	mov.w	ip, #0
 80243d4:	f8d5 a018 	ldr.w	sl, [r5, #24]
 80243d8:	4566      	cmp	r6, ip
 80243da:	bf14      	ite	ne
 80243dc:	260a      	movne	r6, #10
 80243de:	2609      	moveq	r6, #9
 80243e0:	46e0      	mov	r8, ip
 80243e2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80243e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80243e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80243ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80243ee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80243f0:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80243f4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80243f8:	4628      	mov	r0, r5
 80243fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80243fc:	f8c4 c000 	str.w	ip, [r4]
 8024400:	f7ff ff46 	bl	8024290 <get_eit_entry>
 8024404:	4607      	mov	r7, r0
 8024406:	b307      	cbz	r7, 802444a <unwind_phase2_forced+0x96>
 8024408:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802440a:	f046 0610 	orr.w	r6, r6, #16
 802440e:	2001      	movs	r0, #1
 8024410:	4631      	mov	r1, r6
 8024412:	462a      	mov	r2, r5
 8024414:	6463      	str	r3, [r4, #68]	; 0x44
 8024416:	462b      	mov	r3, r5
 8024418:	9400      	str	r4, [sp, #0]
 802441a:	f8cd a004 	str.w	sl, [sp, #4]
 802441e:	47c8      	blx	r9
 8024420:	2800      	cmp	r0, #0
 8024422:	d12c      	bne.n	802447e <unwind_phase2_forced+0xca>
 8024424:	2f00      	cmp	r7, #0
 8024426:	d12b      	bne.n	8024480 <unwind_phase2_forced+0xcc>
 8024428:	4620      	mov	r0, r4
 802442a:	a992      	add	r1, sp, #584	; 0x248
 802442c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8024430:	f001 fca4 	bl	8025d7c <memcpy>
 8024434:	f1b8 0f08 	cmp.w	r8, #8
 8024438:	d128      	bne.n	802448c <unwind_phase2_forced+0xd8>
 802443a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802443c:	4628      	mov	r0, r5
 802443e:	f7ff ff27 	bl	8024290 <get_eit_entry>
 8024442:	2609      	movs	r6, #9
 8024444:	4607      	mov	r7, r0
 8024446:	2f00      	cmp	r7, #0
 8024448:	d1de      	bne.n	8024408 <unwind_phase2_forced+0x54>
 802444a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802444c:	4621      	mov	r1, r4
 802444e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8024452:	a892      	add	r0, sp, #584	; 0x248
 8024454:	616b      	str	r3, [r5, #20]
 8024456:	f001 fc91 	bl	8025d7c <memcpy>
 802445a:	692b      	ldr	r3, [r5, #16]
 802445c:	4629      	mov	r1, r5
 802445e:	aa92      	add	r2, sp, #584	; 0x248
 8024460:	4630      	mov	r0, r6
 8024462:	4798      	blx	r3
 8024464:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8024466:	4631      	mov	r1, r6
 8024468:	462a      	mov	r2, r5
 802446a:	6463      	str	r3, [r4, #68]	; 0x44
 802446c:	462b      	mov	r3, r5
 802446e:	9400      	str	r4, [sp, #0]
 8024470:	f8cd a004 	str.w	sl, [sp, #4]
 8024474:	4680      	mov	r8, r0
 8024476:	2001      	movs	r0, #1
 8024478:	47c8      	blx	r9
 802447a:	2800      	cmp	r0, #0
 802447c:	d0d2      	beq.n	8024424 <unwind_phase2_forced+0x70>
 802447e:	2709      	movs	r7, #9
 8024480:	4638      	mov	r0, r7
 8024482:	b022      	add	sp, #136	; 0x88
 8024484:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8024488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802448c:	f1b8 0f07 	cmp.w	r8, #7
 8024490:	d1f5      	bne.n	802447e <unwind_phase2_forced+0xca>
 8024492:	1d20      	adds	r0, r4, #4
 8024494:	f000 fbc2 	bl	8024c1c <__restore_core_regs>

08024498 <unwind_phase2>:
 8024498:	b570      	push	{r4, r5, r6, lr}
 802449a:	4604      	mov	r4, r0
 802449c:	460d      	mov	r5, r1
 802449e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80244a0:	4620      	mov	r0, r4
 80244a2:	f7ff fef5 	bl	8024290 <get_eit_entry>
 80244a6:	b950      	cbnz	r0, 80244be <unwind_phase2+0x26>
 80244a8:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 80244aa:	2001      	movs	r0, #1
 80244ac:	6923      	ldr	r3, [r4, #16]
 80244ae:	4621      	mov	r1, r4
 80244b0:	462a      	mov	r2, r5
 80244b2:	6166      	str	r6, [r4, #20]
 80244b4:	4798      	blx	r3
 80244b6:	2808      	cmp	r0, #8
 80244b8:	d0f1      	beq.n	802449e <unwind_phase2+0x6>
 80244ba:	2807      	cmp	r0, #7
 80244bc:	d001      	beq.n	80244c2 <unwind_phase2+0x2a>
 80244be:	f000 fe6d 	bl	802519c <abort>
 80244c2:	1d28      	adds	r0, r5, #4
 80244c4:	f000 fbaa 	bl	8024c1c <__restore_core_regs>

080244c8 <_Unwind_VRS_Get>:
 80244c8:	b959      	cbnz	r1, 80244e2 <_Unwind_VRS_Get+0x1a>
 80244ca:	2a0f      	cmp	r2, #15
 80244cc:	bf94      	ite	ls
 80244ce:	2100      	movls	r1, #0
 80244d0:	2101      	movhi	r1, #1
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	bf0c      	ite	eq
 80244d6:	460b      	moveq	r3, r1
 80244d8:	f041 0301 	orrne.w	r3, r1, #1
 80244dc:	b133      	cbz	r3, 80244ec <_Unwind_VRS_Get+0x24>
 80244de:	2002      	movs	r0, #2
 80244e0:	4770      	bx	lr
 80244e2:	2904      	cmp	r1, #4
 80244e4:	bf8c      	ite	hi
 80244e6:	2002      	movhi	r0, #2
 80244e8:	2001      	movls	r0, #1
 80244ea:	4770      	bx	lr
 80244ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80244f0:	4618      	mov	r0, r3
 80244f2:	9b00      	ldr	r3, [sp, #0]
 80244f4:	6852      	ldr	r2, [r2, #4]
 80244f6:	601a      	str	r2, [r3, #0]
 80244f8:	4770      	bx	lr
 80244fa:	bf00      	nop

080244fc <_Unwind_GetGR>:
 80244fc:	b510      	push	{r4, lr}
 80244fe:	460a      	mov	r2, r1
 8024500:	b084      	sub	sp, #16
 8024502:	2100      	movs	r1, #0
 8024504:	460b      	mov	r3, r1
 8024506:	ac03      	add	r4, sp, #12
 8024508:	9400      	str	r4, [sp, #0]
 802450a:	f7ff ffdd 	bl	80244c8 <_Unwind_VRS_Get>
 802450e:	9803      	ldr	r0, [sp, #12]
 8024510:	b004      	add	sp, #16
 8024512:	bd10      	pop	{r4, pc}

08024514 <_Unwind_VRS_Set>:
 8024514:	b959      	cbnz	r1, 802452e <_Unwind_VRS_Set+0x1a>
 8024516:	2a0f      	cmp	r2, #15
 8024518:	bf94      	ite	ls
 802451a:	2100      	movls	r1, #0
 802451c:	2101      	movhi	r1, #1
 802451e:	2b00      	cmp	r3, #0
 8024520:	bf0c      	ite	eq
 8024522:	460b      	moveq	r3, r1
 8024524:	f041 0301 	orrne.w	r3, r1, #1
 8024528:	b133      	cbz	r3, 8024538 <_Unwind_VRS_Set+0x24>
 802452a:	2002      	movs	r0, #2
 802452c:	4770      	bx	lr
 802452e:	2904      	cmp	r1, #4
 8024530:	bf8c      	ite	hi
 8024532:	2002      	movhi	r0, #2
 8024534:	2001      	movls	r0, #1
 8024536:	4770      	bx	lr
 8024538:	9900      	ldr	r1, [sp, #0]
 802453a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802453e:	4618      	mov	r0, r3
 8024540:	6809      	ldr	r1, [r1, #0]
 8024542:	6051      	str	r1, [r2, #4]
 8024544:	4770      	bx	lr
 8024546:	bf00      	nop

08024548 <_Unwind_SetGR>:
 8024548:	b510      	push	{r4, lr}
 802454a:	b084      	sub	sp, #16
 802454c:	ab04      	add	r3, sp, #16
 802454e:	460c      	mov	r4, r1
 8024550:	2100      	movs	r1, #0
 8024552:	f843 2d04 	str.w	r2, [r3, #-4]!
 8024556:	4622      	mov	r2, r4
 8024558:	9300      	str	r3, [sp, #0]
 802455a:	460b      	mov	r3, r1
 802455c:	f7ff ffda 	bl	8024514 <_Unwind_VRS_Set>
 8024560:	b004      	add	sp, #16
 8024562:	bd10      	pop	{r4, pc}

08024564 <__gnu_unwind_pr_common>:
 8024564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024568:	461e      	mov	r6, r3
 802456a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 802456c:	4617      	mov	r7, r2
 802456e:	b089      	sub	sp, #36	; 0x24
 8024570:	460c      	mov	r4, r1
 8024572:	f000 0803 	and.w	r8, r0, #3
 8024576:	f000 0108 	and.w	r1, r0, #8
 802457a:	f853 2b04 	ldr.w	r2, [r3], #4
 802457e:	9102      	str	r1, [sp, #8]
 8024580:	9305      	str	r3, [sp, #20]
 8024582:	2e00      	cmp	r6, #0
 8024584:	f040 80df 	bne.w	8024746 <__gnu_unwind_pr_common+0x1e2>
 8024588:	0212      	lsls	r2, r2, #8
 802458a:	f88d 6019 	strb.w	r6, [sp, #25]
 802458e:	9204      	str	r2, [sp, #16]
 8024590:	2203      	movs	r2, #3
 8024592:	f88d 2018 	strb.w	r2, [sp, #24]
 8024596:	f1b8 0f02 	cmp.w	r8, #2
 802459a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802459c:	bf08      	it	eq
 802459e:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 80245a0:	f012 0201 	ands.w	r2, r2, #1
 80245a4:	bf02      	ittt	eq
 80245a6:	f104 0158 	addeq.w	r1, r4, #88	; 0x58
 80245aa:	9200      	streq	r2, [sp, #0]
 80245ac:	9101      	streq	r1, [sp, #4]
 80245ae:	f040 80d6 	bne.w	802475e <__gnu_unwind_pr_common+0x1fa>
 80245b2:	f8d3 9000 	ldr.w	r9, [r3]
 80245b6:	f1b9 0f00 	cmp.w	r9, #0
 80245ba:	d031      	beq.n	8024620 <__gnu_unwind_pr_common+0xbc>
 80245bc:	2e02      	cmp	r6, #2
 80245be:	f000 80bd 	beq.w	802473c <__gnu_unwind_pr_common+0x1d8>
 80245c2:	f8b3 9000 	ldrh.w	r9, [r3]
 80245c6:	1d1d      	adds	r5, r3, #4
 80245c8:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 80245cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80245ce:	210f      	movs	r1, #15
 80245d0:	f02b 0a01 	bic.w	sl, fp, #1
 80245d4:	4638      	mov	r0, r7
 80245d6:	449a      	add	sl, r3
 80245d8:	f7ff ff90 	bl	80244fc <_Unwind_GetGR>
 80245dc:	4582      	cmp	sl, r0
 80245de:	d839      	bhi.n	8024654 <__gnu_unwind_pr_common+0xf0>
 80245e0:	f029 0301 	bic.w	r3, r9, #1
 80245e4:	f00b 0b01 	and.w	fp, fp, #1
 80245e8:	449a      	add	sl, r3
 80245ea:	f009 0901 	and.w	r9, r9, #1
 80245ee:	4550      	cmp	r0, sl
 80245f0:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 80245f4:	bf2c      	ite	cs
 80245f6:	2000      	movcs	r0, #0
 80245f8:	2001      	movcc	r0, #1
 80245fa:	f1b9 0f01 	cmp.w	r9, #1
 80245fe:	d033      	beq.n	8024668 <__gnu_unwind_pr_common+0x104>
 8024600:	d255      	bcs.n	80246ae <__gnu_unwind_pr_common+0x14a>
 8024602:	f1b8 0f00 	cmp.w	r8, #0
 8024606:	bf0c      	ite	eq
 8024608:	2000      	moveq	r0, #0
 802460a:	f000 0001 	andne.w	r0, r0, #1
 802460e:	2800      	cmp	r0, #0
 8024610:	f040 80f0 	bne.w	80247f4 <__gnu_unwind_pr_common+0x290>
 8024614:	1d2b      	adds	r3, r5, #4
 8024616:	f8d3 9000 	ldr.w	r9, [r3]
 802461a:	f1b9 0f00 	cmp.w	r9, #0
 802461e:	d1cd      	bne.n	80245bc <__gnu_unwind_pr_common+0x58>
 8024620:	4638      	mov	r0, r7
 8024622:	a904      	add	r1, sp, #16
 8024624:	f000 fbfa 	bl	8024e1c <__gnu_unwind_execute>
 8024628:	2800      	cmp	r0, #0
 802462a:	d143      	bne.n	80246b4 <__gnu_unwind_pr_common+0x150>
 802462c:	9a00      	ldr	r2, [sp, #0]
 802462e:	2008      	movs	r0, #8
 8024630:	2a00      	cmp	r2, #0
 8024632:	d040      	beq.n	80246b6 <__gnu_unwind_pr_common+0x152>
 8024634:	210f      	movs	r1, #15
 8024636:	4638      	mov	r0, r7
 8024638:	f7ff ff60 	bl	80244fc <_Unwind_GetGR>
 802463c:	210e      	movs	r1, #14
 802463e:	4602      	mov	r2, r0
 8024640:	4638      	mov	r0, r7
 8024642:	f7ff ff81 	bl	8024548 <_Unwind_SetGR>
 8024646:	4638      	mov	r0, r7
 8024648:	210f      	movs	r1, #15
 802464a:	4a76      	ldr	r2, [pc, #472]	; (8024824 <__gnu_unwind_pr_common+0x2c0>)
 802464c:	f7ff ff7c 	bl	8024548 <_Unwind_SetGR>
 8024650:	2007      	movs	r0, #7
 8024652:	e030      	b.n	80246b6 <__gnu_unwind_pr_common+0x152>
 8024654:	f00b 0b01 	and.w	fp, fp, #1
 8024658:	f009 0901 	and.w	r9, r9, #1
 802465c:	2000      	movs	r0, #0
 802465e:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 8024662:	f1b9 0f01 	cmp.w	r9, #1
 8024666:	d1cb      	bne.n	8024600 <__gnu_unwind_pr_common+0x9c>
 8024668:	f1b8 0f00 	cmp.w	r8, #0
 802466c:	f040 8094 	bne.w	8024798 <__gnu_unwind_pr_common+0x234>
 8024670:	b1d0      	cbz	r0, 80246a8 <__gnu_unwind_pr_common+0x144>
 8024672:	686b      	ldr	r3, [r5, #4]
 8024674:	f8d5 9000 	ldr.w	r9, [r5]
 8024678:	1c9a      	adds	r2, r3, #2
 802467a:	d01b      	beq.n	80246b4 <__gnu_unwind_pr_common+0x150>
 802467c:	9901      	ldr	r1, [sp, #4]
 802467e:	3301      	adds	r3, #1
 8024680:	460a      	mov	r2, r1
 8024682:	9107      	str	r1, [sp, #28]
 8024684:	f000 80a4 	beq.w	80247d0 <__gnu_unwind_pr_common+0x26c>
 8024688:	1d28      	adds	r0, r5, #4
 802468a:	f7ff fdbf 	bl	802420c <_Unwind_decode_target2>
 802468e:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8024692:	ab07      	add	r3, sp, #28
 8024694:	4601      	mov	r1, r0
 8024696:	4620      	mov	r0, r4
 8024698:	f008 f8f6 	bl	802c888 <__cxa_type_match>
 802469c:	9a07      	ldr	r2, [sp, #28]
 802469e:	2800      	cmp	r0, #0
 80246a0:	f040 8096 	bne.w	80247d0 <__gnu_unwind_pr_common+0x26c>
 80246a4:	f8cd 801c 	str.w	r8, [sp, #28]
 80246a8:	f105 0308 	add.w	r3, r5, #8
 80246ac:	e781      	b.n	80245b2 <__gnu_unwind_pr_common+0x4e>
 80246ae:	f1b9 0f02 	cmp.w	r9, #2
 80246b2:	d003      	beq.n	80246bc <__gnu_unwind_pr_common+0x158>
 80246b4:	2009      	movs	r0, #9
 80246b6:	b009      	add	sp, #36	; 0x24
 80246b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246bc:	682b      	ldr	r3, [r5, #0]
 80246be:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 80246c2:	f1b8 0f00 	cmp.w	r8, #0
 80246c6:	d14d      	bne.n	8024764 <__gnu_unwind_pr_common+0x200>
 80246c8:	2800      	cmp	r0, #0
 80246ca:	d030      	beq.n	802472e <__gnu_unwind_pr_common+0x1ca>
 80246cc:	9902      	ldr	r1, [sp, #8]
 80246ce:	f1d1 0201 	rsbs	r2, r1, #1
 80246d2:	bf38      	it	cc
 80246d4:	2200      	movcc	r2, #0
 80246d6:	f1ba 0f00 	cmp.w	sl, #0
 80246da:	bf08      	it	eq
 80246dc:	f042 0201 	orreq.w	r2, r2, #1
 80246e0:	b32a      	cbz	r2, 802472e <__gnu_unwind_pr_common+0x1ca>
 80246e2:	f1ba 0f00 	cmp.w	sl, #0
 80246e6:	d07a      	beq.n	80247de <__gnu_unwind_pr_common+0x27a>
 80246e8:	f105 0904 	add.w	r9, r5, #4
 80246ec:	46c3      	mov	fp, r8
 80246ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80246f2:	46b0      	mov	r8, r6
 80246f4:	462e      	mov	r6, r5
 80246f6:	9d01      	ldr	r5, [sp, #4]
 80246f8:	e004      	b.n	8024704 <__gnu_unwind_pr_common+0x1a0>
 80246fa:	4553      	cmp	r3, sl
 80246fc:	f109 0904 	add.w	r9, r9, #4
 8024700:	469b      	mov	fp, r3
 8024702:	d06b      	beq.n	80247dc <__gnu_unwind_pr_common+0x278>
 8024704:	4648      	mov	r0, r9
 8024706:	9507      	str	r5, [sp, #28]
 8024708:	f7ff fd80 	bl	802420c <_Unwind_decode_target2>
 802470c:	ab07      	add	r3, sp, #28
 802470e:	2200      	movs	r2, #0
 8024710:	4601      	mov	r1, r0
 8024712:	4620      	mov	r0, r4
 8024714:	f008 f8b8 	bl	802c888 <__cxa_type_match>
 8024718:	f10b 0301 	add.w	r3, fp, #1
 802471c:	2800      	cmp	r0, #0
 802471e:	d0ec      	beq.n	80246fa <__gnu_unwind_pr_common+0x196>
 8024720:	45da      	cmp	sl, fp
 8024722:	4635      	mov	r5, r6
 8024724:	4646      	mov	r6, r8
 8024726:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802472a:	d058      	beq.n	80247de <__gnu_unwind_pr_common+0x27a>
 802472c:	682b      	ldr	r3, [r5, #0]
 802472e:	2b00      	cmp	r3, #0
 8024730:	db52      	blt.n	80247d8 <__gnu_unwind_pr_common+0x274>
 8024732:	f10a 0a01 	add.w	sl, sl, #1
 8024736:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 802473a:	e73a      	b.n	80245b2 <__gnu_unwind_pr_common+0x4e>
 802473c:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8024740:	f103 0508 	add.w	r5, r3, #8
 8024744:	e742      	b.n	80245cc <__gnu_unwind_pr_common+0x68>
 8024746:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802474a:	0412      	lsls	r2, r2, #16
 802474c:	f88d 1019 	strb.w	r1, [sp, #25]
 8024750:	9204      	str	r2, [sp, #16]
 8024752:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8024756:	2202      	movs	r2, #2
 8024758:	f88d 2018 	strb.w	r2, [sp, #24]
 802475c:	e71b      	b.n	8024596 <__gnu_unwind_pr_common+0x32>
 802475e:	2200      	movs	r2, #0
 8024760:	9200      	str	r2, [sp, #0]
 8024762:	e75d      	b.n	8024620 <__gnu_unwind_pr_common+0xbc>
 8024764:	210d      	movs	r1, #13
 8024766:	4638      	mov	r0, r7
 8024768:	f8d4 9020 	ldr.w	r9, [r4, #32]
 802476c:	f7ff fec6 	bl	80244fc <_Unwind_GetGR>
 8024770:	4581      	cmp	r9, r0
 8024772:	d1db      	bne.n	802472c <__gnu_unwind_pr_common+0x1c8>
 8024774:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024776:	429d      	cmp	r5, r3
 8024778:	d1d8      	bne.n	802472c <__gnu_unwind_pr_common+0x1c8>
 802477a:	2200      	movs	r2, #0
 802477c:	1d2b      	adds	r3, r5, #4
 802477e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8024780:	2204      	movs	r2, #4
 8024782:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
 8024786:	6322      	str	r2, [r4, #48]	; 0x30
 8024788:	6363      	str	r3, [r4, #52]	; 0x34
 802478a:	682a      	ldr	r2, [r5, #0]
 802478c:	2a00      	cmp	r2, #0
 802478e:	da44      	bge.n	802481a <__gnu_unwind_pr_common+0x2b6>
 8024790:	461d      	mov	r5, r3
 8024792:	2301      	movs	r3, #1
 8024794:	9300      	str	r3, [sp, #0]
 8024796:	e7cc      	b.n	8024732 <__gnu_unwind_pr_common+0x1ce>
 8024798:	210d      	movs	r1, #13
 802479a:	4638      	mov	r0, r7
 802479c:	f8d4 9020 	ldr.w	r9, [r4, #32]
 80247a0:	f7ff feac 	bl	80244fc <_Unwind_GetGR>
 80247a4:	4581      	cmp	r9, r0
 80247a6:	f47f af7f 	bne.w	80246a8 <__gnu_unwind_pr_common+0x144>
 80247aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80247ac:	429d      	cmp	r5, r3
 80247ae:	f47f af7b 	bne.w	80246a8 <__gnu_unwind_pr_common+0x144>
 80247b2:	4628      	mov	r0, r5
 80247b4:	f7ff fd30 	bl	8024218 <selfrel_offset31>
 80247b8:	210f      	movs	r1, #15
 80247ba:	4602      	mov	r2, r0
 80247bc:	4638      	mov	r0, r7
 80247be:	f7ff fec3 	bl	8024548 <_Unwind_SetGR>
 80247c2:	4638      	mov	r0, r7
 80247c4:	2100      	movs	r1, #0
 80247c6:	4622      	mov	r2, r4
 80247c8:	f7ff febe 	bl	8024548 <_Unwind_SetGR>
 80247cc:	2007      	movs	r0, #7
 80247ce:	e772      	b.n	80246b6 <__gnu_unwind_pr_common+0x152>
 80247d0:	b92a      	cbnz	r2, 80247de <__gnu_unwind_pr_common+0x27a>
 80247d2:	f105 0308 	add.w	r3, r5, #8
 80247d6:	e6ec      	b.n	80245b2 <__gnu_unwind_pr_common+0x4e>
 80247d8:	3504      	adds	r5, #4
 80247da:	e7aa      	b.n	8024732 <__gnu_unwind_pr_common+0x1ce>
 80247dc:	4635      	mov	r5, r6
 80247de:	4638      	mov	r0, r7
 80247e0:	210d      	movs	r1, #13
 80247e2:	f7ff fe8b 	bl	80244fc <_Unwind_GetGR>
 80247e6:	62a5      	str	r5, [r4, #40]	; 0x28
 80247e8:	4603      	mov	r3, r0
 80247ea:	6223      	str	r3, [r4, #32]
 80247ec:	9b07      	ldr	r3, [sp, #28]
 80247ee:	2006      	movs	r0, #6
 80247f0:	6263      	str	r3, [r4, #36]	; 0x24
 80247f2:	e760      	b.n	80246b6 <__gnu_unwind_pr_common+0x152>
 80247f4:	4628      	mov	r0, r5
 80247f6:	3504      	adds	r5, #4
 80247f8:	f7ff fd0e 	bl	8024218 <selfrel_offset31>
 80247fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80247fe:	4606      	mov	r6, r0
 8024800:	4620      	mov	r0, r4
 8024802:	f008 f8b3 	bl	802c96c <__cxa_begin_cleanup>
 8024806:	2800      	cmp	r0, #0
 8024808:	f43f af54 	beq.w	80246b4 <__gnu_unwind_pr_common+0x150>
 802480c:	4638      	mov	r0, r7
 802480e:	210f      	movs	r1, #15
 8024810:	4632      	mov	r2, r6
 8024812:	f7ff fe99 	bl	8024548 <_Unwind_SetGR>
 8024816:	2007      	movs	r0, #7
 8024818:	e74d      	b.n	80246b6 <__gnu_unwind_pr_common+0x152>
 802481a:	f10a 0001 	add.w	r0, sl, #1
 802481e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8024822:	e7c7      	b.n	80247b4 <__gnu_unwind_pr_common+0x250>
 8024824:	0802cab5 	.word	0x0802cab5

08024828 <__aeabi_unwind_cpp_pr2>:
 8024828:	2302      	movs	r3, #2
 802482a:	e69b      	b.n	8024564 <__gnu_unwind_pr_common>

0802482c <__aeabi_unwind_cpp_pr1>:
 802482c:	2301      	movs	r3, #1
 802482e:	e699      	b.n	8024564 <__gnu_unwind_pr_common>

08024830 <__aeabi_unwind_cpp_pr0>:
 8024830:	2300      	movs	r3, #0
 8024832:	e697      	b.n	8024564 <__gnu_unwind_pr_common>

08024834 <_Unwind_VRS_Pop>:
 8024834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024838:	4604      	mov	r4, r0
 802483a:	b0e8      	sub	sp, #416	; 0x1a0
 802483c:	2904      	cmp	r1, #4
 802483e:	d807      	bhi.n	8024850 <_Unwind_VRS_Pop+0x1c>
 8024840:	e8df f001 	tbb	[pc, r1]
 8024844:	034b4d33 	.word	0x034b4d33
 8024848:	0a          	.byte	0x0a
 8024849:	00          	.byte	0x00
 802484a:	2b03      	cmp	r3, #3
 802484c:	f000 80d8 	beq.w	8024a00 <_Unwind_VRS_Pop+0x1cc>
 8024850:	2002      	movs	r0, #2
 8024852:	b068      	add	sp, #416	; 0x1a0
 8024854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024858:	2a10      	cmp	r2, #16
 802485a:	bf94      	ite	ls
 802485c:	2100      	movls	r1, #0
 802485e:	2101      	movhi	r1, #1
 8024860:	2b00      	cmp	r3, #0
 8024862:	bf0c      	ite	eq
 8024864:	460b      	moveq	r3, r1
 8024866:	f041 0301 	orrne.w	r3, r1, #1
 802486a:	2b00      	cmp	r3, #0
 802486c:	d1f0      	bne.n	8024850 <_Unwind_VRS_Pop+0x1c>
 802486e:	6823      	ldr	r3, [r4, #0]
 8024870:	06d9      	lsls	r1, r3, #27
 8024872:	f100 80e7 	bmi.w	8024a44 <_Unwind_VRS_Pop+0x210>
 8024876:	ad64      	add	r5, sp, #400	; 0x190
 8024878:	9201      	str	r2, [sp, #4]
 802487a:	4628      	mov	r0, r5
 802487c:	2601      	movs	r6, #1
 802487e:	f000 fa3f 	bl	8024d00 <__gnu_Unwind_Save_WMMXC>
 8024882:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8024884:	9a01      	ldr	r2, [sp, #4]
 8024886:	2300      	movs	r3, #0
 8024888:	fa16 f103 	lsls.w	r1, r6, r3
 802488c:	4211      	tst	r1, r2
 802488e:	bf1c      	itt	ne
 8024890:	f850 1b04 	ldrne.w	r1, [r0], #4
 8024894:	f845 1023 	strne.w	r1, [r5, r3, lsl #2]
 8024898:	3301      	adds	r3, #1
 802489a:	2b04      	cmp	r3, #4
 802489c:	d1f4      	bne.n	8024888 <_Unwind_VRS_Pop+0x54>
 802489e:	63a0      	str	r0, [r4, #56]	; 0x38
 80248a0:	4628      	mov	r0, r5
 80248a2:	f000 fa23 	bl	8024cec <__gnu_Unwind_Restore_WMMXC>
 80248a6:	2000      	movs	r0, #0
 80248a8:	e7d3      	b.n	8024852 <_Unwind_VRS_Pop+0x1e>
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d1d0      	bne.n	8024850 <_Unwind_VRS_Pop+0x1c>
 80248ae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80248b0:	b292      	uxth	r2, r2
 80248b2:	2001      	movs	r0, #1
 80248b4:	fa10 f103 	lsls.w	r1, r0, r3
 80248b8:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 80248bc:	3301      	adds	r3, #1
 80248be:	4211      	tst	r1, r2
 80248c0:	bf1c      	itt	ne
 80248c2:	f856 1b04 	ldrne.w	r1, [r6], #4
 80248c6:	6069      	strne	r1, [r5, #4]
 80248c8:	2b10      	cmp	r3, #16
 80248ca:	d1f3      	bne.n	80248b4 <_Unwind_VRS_Pop+0x80>
 80248cc:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80248d0:	bf08      	it	eq
 80248d2:	63a6      	streq	r6, [r4, #56]	; 0x38
 80248d4:	d0bd      	beq.n	8024852 <_Unwind_VRS_Pop+0x1e>
 80248d6:	2000      	movs	r0, #0
 80248d8:	e7bb      	b.n	8024852 <_Unwind_VRS_Pop+0x1e>
 80248da:	2001      	movs	r0, #1
 80248dc:	e7b9      	b.n	8024852 <_Unwind_VRS_Pop+0x1e>
 80248de:	1f59      	subs	r1, r3, #5
 80248e0:	bf18      	it	ne
 80248e2:	2101      	movne	r1, #1
 80248e4:	2b01      	cmp	r3, #1
 80248e6:	bf0c      	ite	eq
 80248e8:	2000      	moveq	r0, #0
 80248ea:	f001 0001 	andne.w	r0, r1, #1
 80248ee:	2800      	cmp	r0, #0
 80248f0:	d1ae      	bne.n	8024850 <_Unwind_VRS_Pop+0x1c>
 80248f2:	0c15      	lsrs	r5, r2, #16
 80248f4:	b296      	uxth	r6, r2
 80248f6:	1972      	adds	r2, r6, r5
 80248f8:	2b01      	cmp	r3, #1
 80248fa:	bf14      	ite	ne
 80248fc:	2020      	movne	r0, #32
 80248fe:	2010      	moveq	r0, #16
 8024900:	4290      	cmp	r0, r2
 8024902:	d3a5      	bcc.n	8024850 <_Unwind_VRS_Pop+0x1c>
 8024904:	f1a3 0c01 	sub.w	ip, r3, #1
 8024908:	f1dc 0700 	rsbs	r7, ip, #0
 802490c:	eb47 070c 	adc.w	r7, r7, ip
 8024910:	2d0f      	cmp	r5, #15
 8024912:	bf94      	ite	ls
 8024914:	2000      	movls	r0, #0
 8024916:	2001      	movhi	r0, #1
 8024918:	4238      	tst	r0, r7
 802491a:	d199      	bne.n	8024850 <_Unwind_VRS_Pop+0x1c>
 802491c:	46b0      	mov	r8, r6
 802491e:	b928      	cbnz	r0, 802492c <_Unwind_VRS_Pop+0xf8>
 8024920:	2a10      	cmp	r2, #16
 8024922:	bf98      	it	ls
 8024924:	4680      	movls	r8, r0
 8024926:	d909      	bls.n	802493c <_Unwind_VRS_Pop+0x108>
 8024928:	f1a2 0810 	sub.w	r8, r2, #16
 802492c:	f1b8 0f00 	cmp.w	r8, #0
 8024930:	bf0c      	ite	eq
 8024932:	2100      	moveq	r1, #0
 8024934:	f001 0101 	andne.w	r1, r1, #1
 8024938:	2900      	cmp	r1, #0
 802493a:	d189      	bne.n	8024850 <_Unwind_VRS_Pop+0x1c>
 802493c:	2d0f      	cmp	r5, #15
 802493e:	d80f      	bhi.n	8024960 <_Unwind_VRS_Pop+0x12c>
 8024940:	6822      	ldr	r2, [r4, #0]
 8024942:	07d1      	lsls	r1, r2, #31
 8024944:	d50c      	bpl.n	8024960 <_Unwind_VRS_Pop+0x12c>
 8024946:	2b05      	cmp	r3, #5
 8024948:	f022 0101 	bic.w	r1, r2, #1
 802494c:	4620      	mov	r0, r4
 802494e:	6021      	str	r1, [r4, #0]
 8024950:	f000 80b0 	beq.w	8024ab4 <_Unwind_VRS_Pop+0x280>
 8024954:	f022 0203 	bic.w	r2, r2, #3
 8024958:	f840 2b48 	str.w	r2, [r0], #72
 802495c:	f000 f96e 	bl	8024c3c <__gnu_Unwind_Save_VFP>
 8024960:	f1b8 0f00 	cmp.w	r8, #0
 8024964:	d003      	beq.n	802496e <_Unwind_VRS_Pop+0x13a>
 8024966:	6823      	ldr	r3, [r4, #0]
 8024968:	075a      	lsls	r2, r3, #29
 802496a:	f100 8082 	bmi.w	8024a72 <_Unwind_VRS_Pop+0x23e>
 802496e:	2f00      	cmp	r7, #0
 8024970:	f040 8096 	bne.w	8024aa0 <_Unwind_VRS_Pop+0x26c>
 8024974:	2d0f      	cmp	r5, #15
 8024976:	d975      	bls.n	8024a64 <_Unwind_VRS_Pop+0x230>
 8024978:	f1b8 0f00 	cmp.w	r8, #0
 802497c:	d16c      	bne.n	8024a58 <_Unwind_VRS_Pop+0x224>
 802497e:	4633      	mov	r3, r6
 8024980:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8024982:	2b00      	cmp	r3, #0
 8024984:	4616      	mov	r6, r2
 8024986:	dd0f      	ble.n	80249a8 <_Unwind_VRS_Pop+0x174>
 8024988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 802498c:	ab02      	add	r3, sp, #8
 802498e:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
 8024992:	f10c 33ff 	add.w	r3, ip, #4294967295
 8024996:	f852 0b04 	ldr.w	r0, [r2], #4
 802499a:	3b01      	subs	r3, #1
 802499c:	f841 0b04 	str.w	r0, [r1], #4
 80249a0:	1c58      	adds	r0, r3, #1
 80249a2:	d1f8      	bne.n	8024996 <_Unwind_VRS_Pop+0x162>
 80249a4:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80249a8:	f1b8 0f00 	cmp.w	r8, #0
 80249ac:	d016      	beq.n	80249dc <_Unwind_VRS_Pop+0x1a8>
 80249ae:	2d10      	cmp	r5, #16
 80249b0:	bf2c      	ite	cs
 80249b2:	462a      	movcs	r2, r5
 80249b4:	2210      	movcc	r2, #16
 80249b6:	a868      	add	r0, sp, #416	; 0x1a0
 80249b8:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 80249bc:	4631      	mov	r1, r6
 80249be:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80249c2:	f10c 33ff 	add.w	r3, ip, #4294967295
 80249c6:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 80249ca:	f851 0b04 	ldr.w	r0, [r1], #4
 80249ce:	3b01      	subs	r3, #1
 80249d0:	f842 0b04 	str.w	r0, [r2], #4
 80249d4:	1c58      	adds	r0, r3, #1
 80249d6:	d1f8      	bne.n	80249ca <_Unwind_VRS_Pop+0x196>
 80249d8:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80249dc:	2f00      	cmp	r7, #0
 80249de:	d158      	bne.n	8024a92 <_Unwind_VRS_Pop+0x25e>
 80249e0:	2d0f      	cmp	r5, #15
 80249e2:	63a6      	str	r6, [r4, #56]	; 0x38
 80249e4:	d802      	bhi.n	80249ec <_Unwind_VRS_Pop+0x1b8>
 80249e6:	a802      	add	r0, sp, #8
 80249e8:	f000 f92c 	bl	8024c44 <__gnu_Unwind_Restore_VFP_D>
 80249ec:	4640      	mov	r0, r8
 80249ee:	f1b8 0f00 	cmp.w	r8, #0
 80249f2:	f43f af2e 	beq.w	8024852 <_Unwind_VRS_Pop+0x1e>
 80249f6:	a824      	add	r0, sp, #144	; 0x90
 80249f8:	f000 f92c 	bl	8024c54 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80249fc:	2000      	movs	r0, #0
 80249fe:	e728      	b.n	8024852 <_Unwind_VRS_Pop+0x1e>
 8024a00:	0c16      	lsrs	r6, r2, #16
 8024a02:	b295      	uxth	r5, r2
 8024a04:	19ab      	adds	r3, r5, r6
 8024a06:	2b10      	cmp	r3, #16
 8024a08:	f63f af22 	bhi.w	8024850 <_Unwind_VRS_Pop+0x1c>
 8024a0c:	6823      	ldr	r3, [r4, #0]
 8024a0e:	0718      	lsls	r0, r3, #28
 8024a10:	d437      	bmi.n	8024a82 <_Unwind_VRS_Pop+0x24e>
 8024a12:	a844      	add	r0, sp, #272	; 0x110
 8024a14:	006f      	lsls	r7, r5, #1
 8024a16:	f000 f947 	bl	8024ca8 <__gnu_Unwind_Save_WMMXD>
 8024a1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8024a1c:	4610      	mov	r0, r2
 8024a1e:	b15d      	cbz	r5, 8024a38 <_Unwind_VRS_Pop+0x204>
 8024a20:	ab44      	add	r3, sp, #272	; 0x110
 8024a22:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8024a26:	463b      	mov	r3, r7
 8024a28:	f852 1b04 	ldr.w	r1, [r2], #4
 8024a2c:	3b01      	subs	r3, #1
 8024a2e:	f846 1b04 	str.w	r1, [r6], #4
 8024a32:	d1f9      	bne.n	8024a28 <_Unwind_VRS_Pop+0x1f4>
 8024a34:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8024a38:	63a0      	str	r0, [r4, #56]	; 0x38
 8024a3a:	a844      	add	r0, sp, #272	; 0x110
 8024a3c:	f000 f912 	bl	8024c64 <__gnu_Unwind_Restore_WMMXD>
 8024a40:	2000      	movs	r0, #0
 8024a42:	e706      	b.n	8024852 <_Unwind_VRS_Pop+0x1e>
 8024a44:	f023 0310 	bic.w	r3, r3, #16
 8024a48:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8024a4c:	6023      	str	r3, [r4, #0]
 8024a4e:	9201      	str	r2, [sp, #4]
 8024a50:	f000 f956 	bl	8024d00 <__gnu_Unwind_Save_WMMXC>
 8024a54:	9a01      	ldr	r2, [sp, #4]
 8024a56:	e70e      	b.n	8024876 <_Unwind_VRS_Pop+0x42>
 8024a58:	a824      	add	r0, sp, #144	; 0x90
 8024a5a:	f000 f8ff 	bl	8024c5c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8024a5e:	f1c5 0310 	rsb	r3, r5, #16
 8024a62:	e78d      	b.n	8024980 <_Unwind_VRS_Pop+0x14c>
 8024a64:	a802      	add	r0, sp, #8
 8024a66:	f000 f8f1 	bl	8024c4c <__gnu_Unwind_Save_VFP_D>
 8024a6a:	f1b8 0f00 	cmp.w	r8, #0
 8024a6e:	d086      	beq.n	802497e <_Unwind_VRS_Pop+0x14a>
 8024a70:	e7f2      	b.n	8024a58 <_Unwind_VRS_Pop+0x224>
 8024a72:	4620      	mov	r0, r4
 8024a74:	f023 0304 	bic.w	r3, r3, #4
 8024a78:	f840 3bd0 	str.w	r3, [r0], #208
 8024a7c:	f000 f8ee 	bl	8024c5c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8024a80:	e775      	b.n	802496e <_Unwind_VRS_Pop+0x13a>
 8024a82:	f023 0308 	bic.w	r3, r3, #8
 8024a86:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8024a8a:	6023      	str	r3, [r4, #0]
 8024a8c:	f000 f90c 	bl	8024ca8 <__gnu_Unwind_Save_WMMXD>
 8024a90:	e7bf      	b.n	8024a12 <_Unwind_VRS_Pop+0x1de>
 8024a92:	a802      	add	r0, sp, #8
 8024a94:	3604      	adds	r6, #4
 8024a96:	63a6      	str	r6, [r4, #56]	; 0x38
 8024a98:	f000 f8cc 	bl	8024c34 <__gnu_Unwind_Restore_VFP>
 8024a9c:	2000      	movs	r0, #0
 8024a9e:	e6d8      	b.n	8024852 <_Unwind_VRS_Pop+0x1e>
 8024aa0:	a802      	add	r0, sp, #8
 8024aa2:	f000 f8cb 	bl	8024c3c <__gnu_Unwind_Save_VFP>
 8024aa6:	f1b8 0f00 	cmp.w	r8, #0
 8024aaa:	f43f af68 	beq.w	802497e <_Unwind_VRS_Pop+0x14a>
 8024aae:	f1c5 0310 	rsb	r3, r5, #16
 8024ab2:	e765      	b.n	8024980 <_Unwind_VRS_Pop+0x14c>
 8024ab4:	f041 0102 	orr.w	r1, r1, #2
 8024ab8:	f840 1b48 	str.w	r1, [r0], #72
 8024abc:	f000 f8c6 	bl	8024c4c <__gnu_Unwind_Save_VFP_D>
 8024ac0:	e74e      	b.n	8024960 <_Unwind_VRS_Pop+0x12c>
 8024ac2:	bf00      	nop

08024ac4 <_Unwind_GetCFA>:
 8024ac4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8024ac6:	4770      	bx	lr

08024ac8 <__gnu_Unwind_RaiseException>:
 8024ac8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8024aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024acc:	1d0f      	adds	r7, r1, #4
 8024ace:	640b      	str	r3, [r1, #64]	; 0x40
 8024ad0:	460d      	mov	r5, r1
 8024ad2:	4604      	mov	r4, r0
 8024ad4:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8024ad8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8024ada:	ae01      	add	r6, sp, #4
 8024adc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8024ade:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8024ae0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8024ae2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8024ae4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8024ae6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8024aea:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8024aee:	f04f 33ff 	mov.w	r3, #4294967295
 8024af2:	9300      	str	r3, [sp, #0]
 8024af4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8024af6:	4620      	mov	r0, r4
 8024af8:	f7ff fbca 	bl	8024290 <get_eit_entry>
 8024afc:	b958      	cbnz	r0, 8024b16 <__gnu_Unwind_RaiseException+0x4e>
 8024afe:	6923      	ldr	r3, [r4, #16]
 8024b00:	4621      	mov	r1, r4
 8024b02:	466a      	mov	r2, sp
 8024b04:	4798      	blx	r3
 8024b06:	2808      	cmp	r0, #8
 8024b08:	4606      	mov	r6, r0
 8024b0a:	d0f3      	beq.n	8024af4 <__gnu_Unwind_RaiseException+0x2c>
 8024b0c:	4668      	mov	r0, sp
 8024b0e:	f7ff fc25 	bl	802435c <restore_non_core_regs>
 8024b12:	2e06      	cmp	r6, #6
 8024b14:	d003      	beq.n	8024b1e <__gnu_Unwind_RaiseException+0x56>
 8024b16:	2009      	movs	r0, #9
 8024b18:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8024b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b1e:	4620      	mov	r0, r4
 8024b20:	4629      	mov	r1, r5
 8024b22:	f7ff fcb9 	bl	8024498 <unwind_phase2>
 8024b26:	bf00      	nop

08024b28 <__gnu_Unwind_ForcedUnwind>:
 8024b28:	b410      	push	{r4}
 8024b2a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8024b2c:	60c1      	str	r1, [r0, #12]
 8024b2e:	4619      	mov	r1, r3
 8024b30:	6182      	str	r2, [r0, #24]
 8024b32:	2200      	movs	r2, #0
 8024b34:	641c      	str	r4, [r3, #64]	; 0x40
 8024b36:	bc10      	pop	{r4}
 8024b38:	e43c      	b.n	80243b4 <unwind_phase2_forced>
 8024b3a:	bf00      	nop

08024b3c <__gnu_Unwind_Resume>:
 8024b3c:	6942      	ldr	r2, [r0, #20]
 8024b3e:	b538      	push	{r3, r4, r5, lr}
 8024b40:	4604      	mov	r4, r0
 8024b42:	68c3      	ldr	r3, [r0, #12]
 8024b44:	460d      	mov	r5, r1
 8024b46:	640a      	str	r2, [r1, #64]	; 0x40
 8024b48:	b123      	cbz	r3, 8024b54 <__gnu_Unwind_Resume+0x18>
 8024b4a:	2201      	movs	r2, #1
 8024b4c:	f7ff fc32 	bl	80243b4 <unwind_phase2_forced>
 8024b50:	f000 fb24 	bl	802519c <abort>
 8024b54:	6903      	ldr	r3, [r0, #16]
 8024b56:	4621      	mov	r1, r4
 8024b58:	2002      	movs	r0, #2
 8024b5a:	462a      	mov	r2, r5
 8024b5c:	4798      	blx	r3
 8024b5e:	2807      	cmp	r0, #7
 8024b60:	d003      	beq.n	8024b6a <__gnu_Unwind_Resume+0x2e>
 8024b62:	2808      	cmp	r0, #8
 8024b64:	d004      	beq.n	8024b70 <__gnu_Unwind_Resume+0x34>
 8024b66:	f000 fb19 	bl	802519c <abort>
 8024b6a:	1d28      	adds	r0, r5, #4
 8024b6c:	f000 f856 	bl	8024c1c <__restore_core_regs>
 8024b70:	4620      	mov	r0, r4
 8024b72:	4629      	mov	r1, r5
 8024b74:	f7ff fc90 	bl	8024498 <unwind_phase2>

08024b78 <__gnu_Unwind_Resume_or_Rethrow>:
 8024b78:	68c3      	ldr	r3, [r0, #12]
 8024b7a:	b11b      	cbz	r3, 8024b84 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8024b7c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8024b7e:	2200      	movs	r2, #0
 8024b80:	640b      	str	r3, [r1, #64]	; 0x40
 8024b82:	e417      	b.n	80243b4 <unwind_phase2_forced>
 8024b84:	e7a0      	b.n	8024ac8 <__gnu_Unwind_RaiseException>
 8024b86:	bf00      	nop

08024b88 <_Unwind_Complete>:
 8024b88:	4770      	bx	lr
 8024b8a:	bf00      	nop

08024b8c <_Unwind_DeleteException>:
 8024b8c:	b508      	push	{r3, lr}
 8024b8e:	4601      	mov	r1, r0
 8024b90:	6883      	ldr	r3, [r0, #8]
 8024b92:	b10b      	cbz	r3, 8024b98 <_Unwind_DeleteException+0xc>
 8024b94:	2001      	movs	r0, #1
 8024b96:	4798      	blx	r3
 8024b98:	bd08      	pop	{r3, pc}
 8024b9a:	bf00      	nop

08024b9c <__gnu_Unwind_Backtrace>:
 8024b9c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8024b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ba0:	1d17      	adds	r7, r2, #4
 8024ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8024ba4:	4605      	mov	r5, r0
 8024ba6:	460c      	mov	r4, r1
 8024ba8:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8024bac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8024bae:	ae01      	add	r6, sp, #4
 8024bb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8024bb2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8024bb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8024bb6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8024bb8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8024bba:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8024bbe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8024bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8024bc6:	9300      	str	r3, [sp, #0]
 8024bc8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8024bca:	a890      	add	r0, sp, #576	; 0x240
 8024bcc:	f7ff fb60 	bl	8024290 <get_eit_entry>
 8024bd0:	aa90      	add	r2, sp, #576	; 0x240
 8024bd2:	210c      	movs	r1, #12
 8024bd4:	4603      	mov	r3, r0
 8024bd6:	4668      	mov	r0, sp
 8024bd8:	2b00      	cmp	r3, #0
 8024bda:	d11d      	bne.n	8024c18 <__gnu_Unwind_Backtrace+0x7c>
 8024bdc:	f7ff fcb4 	bl	8024548 <_Unwind_SetGR>
 8024be0:	4621      	mov	r1, r4
 8024be2:	4668      	mov	r0, sp
 8024be4:	47a8      	blx	r5
 8024be6:	a990      	add	r1, sp, #576	; 0x240
 8024be8:	466a      	mov	r2, sp
 8024bea:	4603      	mov	r3, r0
 8024bec:	2008      	movs	r0, #8
 8024bee:	b99b      	cbnz	r3, 8024c18 <__gnu_Unwind_Backtrace+0x7c>
 8024bf0:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8024bf2:	4798      	blx	r3
 8024bf4:	1f43      	subs	r3, r0, #5
 8024bf6:	4606      	mov	r6, r0
 8024bf8:	bf18      	it	ne
 8024bfa:	2301      	movne	r3, #1
 8024bfc:	2809      	cmp	r0, #9
 8024bfe:	bf0c      	ite	eq
 8024c00:	2300      	moveq	r3, #0
 8024c02:	f003 0301 	andne.w	r3, r3, #1
 8024c06:	2b00      	cmp	r3, #0
 8024c08:	d1de      	bne.n	8024bc8 <__gnu_Unwind_Backtrace+0x2c>
 8024c0a:	4668      	mov	r0, sp
 8024c0c:	f7ff fba6 	bl	802435c <restore_non_core_regs>
 8024c10:	4630      	mov	r0, r6
 8024c12:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
 8024c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c18:	2609      	movs	r6, #9
 8024c1a:	e7f6      	b.n	8024c0a <__gnu_Unwind_Backtrace+0x6e>

08024c1c <__restore_core_regs>:
 8024c1c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8024c20:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8024c24:	469c      	mov	ip, r3
 8024c26:	46a6      	mov	lr, r4
 8024c28:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8024c2c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8024c30:	46e5      	mov	sp, ip
 8024c32:	bd00      	pop	{pc}

08024c34 <__gnu_Unwind_Restore_VFP>:
 8024c34:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8024c38:	4770      	bx	lr
 8024c3a:	bf00      	nop

08024c3c <__gnu_Unwind_Save_VFP>:
 8024c3c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8024c40:	4770      	bx	lr
 8024c42:	bf00      	nop

08024c44 <__gnu_Unwind_Restore_VFP_D>:
 8024c44:	ec90 0b20 	vldmia	r0, {d0-d15}
 8024c48:	4770      	bx	lr
 8024c4a:	bf00      	nop

08024c4c <__gnu_Unwind_Save_VFP_D>:
 8024c4c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8024c50:	4770      	bx	lr
 8024c52:	bf00      	nop

08024c54 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8024c54:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8024c58:	4770      	bx	lr
 8024c5a:	bf00      	nop

08024c5c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8024c5c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8024c60:	4770      	bx	lr
 8024c62:	bf00      	nop

08024c64 <__gnu_Unwind_Restore_WMMXD>:
 8024c64:	ecf0 0102 	ldfe	f0, [r0], #8
 8024c68:	ecf0 1102 	ldfe	f1, [r0], #8
 8024c6c:	ecf0 2102 	ldfe	f2, [r0], #8
 8024c70:	ecf0 3102 	ldfe	f3, [r0], #8
 8024c74:	ecf0 4102 	ldfe	f4, [r0], #8
 8024c78:	ecf0 5102 	ldfe	f5, [r0], #8
 8024c7c:	ecf0 6102 	ldfe	f6, [r0], #8
 8024c80:	ecf0 7102 	ldfe	f7, [r0], #8
 8024c84:	ecf0 8102 	ldfp	f0, [r0], #8
 8024c88:	ecf0 9102 	ldfp	f1, [r0], #8
 8024c8c:	ecf0 a102 	ldfp	f2, [r0], #8
 8024c90:	ecf0 b102 	ldfp	f3, [r0], #8
 8024c94:	ecf0 c102 	ldfp	f4, [r0], #8
 8024c98:	ecf0 d102 	ldfp	f5, [r0], #8
 8024c9c:	ecf0 e102 	ldfp	f6, [r0], #8
 8024ca0:	ecf0 f102 	ldfp	f7, [r0], #8
 8024ca4:	4770      	bx	lr
 8024ca6:	bf00      	nop

08024ca8 <__gnu_Unwind_Save_WMMXD>:
 8024ca8:	ece0 0102 	stfe	f0, [r0], #8
 8024cac:	ece0 1102 	stfe	f1, [r0], #8
 8024cb0:	ece0 2102 	stfe	f2, [r0], #8
 8024cb4:	ece0 3102 	stfe	f3, [r0], #8
 8024cb8:	ece0 4102 	stfe	f4, [r0], #8
 8024cbc:	ece0 5102 	stfe	f5, [r0], #8
 8024cc0:	ece0 6102 	stfe	f6, [r0], #8
 8024cc4:	ece0 7102 	stfe	f7, [r0], #8
 8024cc8:	ece0 8102 	stfp	f0, [r0], #8
 8024ccc:	ece0 9102 	stfp	f1, [r0], #8
 8024cd0:	ece0 a102 	stfp	f2, [r0], #8
 8024cd4:	ece0 b102 	stfp	f3, [r0], #8
 8024cd8:	ece0 c102 	stfp	f4, [r0], #8
 8024cdc:	ece0 d102 	stfp	f5, [r0], #8
 8024ce0:	ece0 e102 	stfp	f6, [r0], #8
 8024ce4:	ece0 f102 	stfp	f7, [r0], #8
 8024ce8:	4770      	bx	lr
 8024cea:	bf00      	nop

08024cec <__gnu_Unwind_Restore_WMMXC>:
 8024cec:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8024cf0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8024cf4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8024cf8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8024cfc:	4770      	bx	lr
 8024cfe:	bf00      	nop

08024d00 <__gnu_Unwind_Save_WMMXC>:
 8024d00:	fca0 8101 	stc2	1, cr8, [r0], #4
 8024d04:	fca0 9101 	stc2	1, cr9, [r0], #4
 8024d08:	fca0 a101 	stc2	1, cr10, [r0], #4
 8024d0c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8024d10:	4770      	bx	lr
 8024d12:	bf00      	nop

08024d14 <_Unwind_RaiseException>:
 8024d14:	46ec      	mov	ip, sp
 8024d16:	b500      	push	{lr}
 8024d18:	e92d 5000 	stmdb	sp!, {ip, lr}
 8024d1c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8024d20:	f04f 0300 	mov.w	r3, #0
 8024d24:	e92d 000c 	stmdb	sp!, {r2, r3}
 8024d28:	a901      	add	r1, sp, #4
 8024d2a:	f7ff fecd 	bl	8024ac8 <__gnu_Unwind_RaiseException>
 8024d2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8024d32:	b012      	add	sp, #72	; 0x48
 8024d34:	4770      	bx	lr
 8024d36:	bf00      	nop

08024d38 <_Unwind_Resume>:
 8024d38:	46ec      	mov	ip, sp
 8024d3a:	b500      	push	{lr}
 8024d3c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8024d40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8024d44:	f04f 0300 	mov.w	r3, #0
 8024d48:	e92d 000c 	stmdb	sp!, {r2, r3}
 8024d4c:	a901      	add	r1, sp, #4
 8024d4e:	f7ff fef5 	bl	8024b3c <__gnu_Unwind_Resume>
 8024d52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8024d56:	b012      	add	sp, #72	; 0x48
 8024d58:	4770      	bx	lr
 8024d5a:	bf00      	nop

08024d5c <_Unwind_Resume_or_Rethrow>:
 8024d5c:	46ec      	mov	ip, sp
 8024d5e:	b500      	push	{lr}
 8024d60:	e92d 5000 	stmdb	sp!, {ip, lr}
 8024d64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8024d68:	f04f 0300 	mov.w	r3, #0
 8024d6c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8024d70:	a901      	add	r1, sp, #4
 8024d72:	f7ff ff01 	bl	8024b78 <__gnu_Unwind_Resume_or_Rethrow>
 8024d76:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8024d7a:	b012      	add	sp, #72	; 0x48
 8024d7c:	4770      	bx	lr
 8024d7e:	bf00      	nop

08024d80 <_Unwind_ForcedUnwind>:
 8024d80:	46ec      	mov	ip, sp
 8024d82:	b500      	push	{lr}
 8024d84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8024d88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8024d8c:	f04f 0300 	mov.w	r3, #0
 8024d90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8024d94:	ab01      	add	r3, sp, #4
 8024d96:	f7ff fec7 	bl	8024b28 <__gnu_Unwind_ForcedUnwind>
 8024d9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8024d9e:	b012      	add	sp, #72	; 0x48
 8024da0:	4770      	bx	lr
 8024da2:	bf00      	nop

08024da4 <_Unwind_Backtrace>:
 8024da4:	46ec      	mov	ip, sp
 8024da6:	b500      	push	{lr}
 8024da8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8024dac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8024db0:	f04f 0300 	mov.w	r3, #0
 8024db4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8024db8:	aa01      	add	r2, sp, #4
 8024dba:	f7ff feef 	bl	8024b9c <__gnu_Unwind_Backtrace>
 8024dbe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8024dc2:	b012      	add	sp, #72	; 0x48
 8024dc4:	4770      	bx	lr
 8024dc6:	bf00      	nop

08024dc8 <next_unwind_byte>:
 8024dc8:	7a02      	ldrb	r2, [r0, #8]
 8024dca:	4603      	mov	r3, r0
 8024dcc:	b91a      	cbnz	r2, 8024dd6 <next_unwind_byte+0xe>
 8024dce:	7a42      	ldrb	r2, [r0, #9]
 8024dd0:	b942      	cbnz	r2, 8024de4 <next_unwind_byte+0x1c>
 8024dd2:	20b0      	movs	r0, #176	; 0xb0
 8024dd4:	4770      	bx	lr
 8024dd6:	6800      	ldr	r0, [r0, #0]
 8024dd8:	3a01      	subs	r2, #1
 8024dda:	721a      	strb	r2, [r3, #8]
 8024ddc:	0202      	lsls	r2, r0, #8
 8024dde:	0e00      	lsrs	r0, r0, #24
 8024de0:	601a      	str	r2, [r3, #0]
 8024de2:	4770      	bx	lr
 8024de4:	6841      	ldr	r1, [r0, #4]
 8024de6:	3a01      	subs	r2, #1
 8024de8:	7242      	strb	r2, [r0, #9]
 8024dea:	2203      	movs	r2, #3
 8024dec:	f851 0b04 	ldr.w	r0, [r1], #4
 8024df0:	721a      	strb	r2, [r3, #8]
 8024df2:	6059      	str	r1, [r3, #4]
 8024df4:	0202      	lsls	r2, r0, #8
 8024df6:	0e00      	lsrs	r0, r0, #24
 8024df8:	601a      	str	r2, [r3, #0]
 8024dfa:	4770      	bx	lr

08024dfc <_Unwind_GetGR.constprop.0>:
 8024dfc:	b510      	push	{r4, lr}
 8024dfe:	2100      	movs	r1, #0
 8024e00:	b084      	sub	sp, #16
 8024e02:	220c      	movs	r2, #12
 8024e04:	460b      	mov	r3, r1
 8024e06:	eb0d 0402 	add.w	r4, sp, r2
 8024e0a:	9400      	str	r4, [sp, #0]
 8024e0c:	f7ff fb5c 	bl	80244c8 <_Unwind_VRS_Get>
 8024e10:	9803      	ldr	r0, [sp, #12]
 8024e12:	b004      	add	sp, #16
 8024e14:	bd10      	pop	{r4, pc}
 8024e16:	bf00      	nop

08024e18 <unwind_UCB_from_context>:
 8024e18:	e7f0      	b.n	8024dfc <_Unwind_GetGR.constprop.0>
 8024e1a:	bf00      	nop

08024e1c <__gnu_unwind_execute>:
 8024e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024e20:	4606      	mov	r6, r0
 8024e22:	b085      	sub	sp, #20
 8024e24:	460d      	mov	r5, r1
 8024e26:	f04f 0900 	mov.w	r9, #0
 8024e2a:	f44f 677f 	mov.w	r7, #4080	; 0xff0
 8024e2e:	4628      	mov	r0, r5
 8024e30:	f7ff ffca 	bl	8024dc8 <next_unwind_byte>
 8024e34:	28b0      	cmp	r0, #176	; 0xb0
 8024e36:	4604      	mov	r4, r0
 8024e38:	f000 80c9 	beq.w	8024fce <__gnu_unwind_execute+0x1b2>
 8024e3c:	f010 0180 	ands.w	r1, r0, #128	; 0x80
 8024e40:	d021      	beq.n	8024e86 <__gnu_unwind_execute+0x6a>
 8024e42:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8024e46:	2b80      	cmp	r3, #128	; 0x80
 8024e48:	f000 8085 	beq.w	8024f56 <__gnu_unwind_execute+0x13a>
 8024e4c:	2b90      	cmp	r3, #144	; 0x90
 8024e4e:	d037      	beq.n	8024ec0 <__gnu_unwind_execute+0xa4>
 8024e50:	2ba0      	cmp	r3, #160	; 0xa0
 8024e52:	d054      	beq.n	8024efe <__gnu_unwind_execute+0xe2>
 8024e54:	2bb0      	cmp	r3, #176	; 0xb0
 8024e56:	d065      	beq.n	8024f24 <__gnu_unwind_execute+0x108>
 8024e58:	2bc0      	cmp	r3, #192	; 0xc0
 8024e5a:	f000 8094 	beq.w	8024f86 <__gnu_unwind_execute+0x16a>
 8024e5e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8024e62:	2bd0      	cmp	r3, #208	; 0xd0
 8024e64:	d10b      	bne.n	8024e7e <__gnu_unwind_execute+0x62>
 8024e66:	f000 0207 	and.w	r2, r0, #7
 8024e6a:	2101      	movs	r1, #1
 8024e6c:	3201      	adds	r2, #1
 8024e6e:	4630      	mov	r0, r6
 8024e70:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8024e74:	2305      	movs	r3, #5
 8024e76:	f7ff fcdd 	bl	8024834 <_Unwind_VRS_Pop>
 8024e7a:	2800      	cmp	r0, #0
 8024e7c:	d0d7      	beq.n	8024e2e <__gnu_unwind_execute+0x12>
 8024e7e:	2009      	movs	r0, #9
 8024e80:	b005      	add	sp, #20
 8024e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024e86:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8024e8a:	ab03      	add	r3, sp, #12
 8024e8c:	220d      	movs	r2, #13
 8024e8e:	9300      	str	r3, [sp, #0]
 8024e90:	4630      	mov	r0, r6
 8024e92:	460b      	mov	r3, r1
 8024e94:	f7ff fb18 	bl	80244c8 <_Unwind_VRS_Get>
 8024e98:	9b03      	ldr	r3, [sp, #12]
 8024e9a:	fa5f f888 	uxtb.w	r8, r8
 8024e9e:	0664      	lsls	r4, r4, #25
 8024ea0:	f108 0804 	add.w	r8, r8, #4
 8024ea4:	ac03      	add	r4, sp, #12
 8024ea6:	bf4c      	ite	mi
 8024ea8:	ebc8 0303 	rsbmi	r3, r8, r3
 8024eac:	4443      	addpl	r3, r8
 8024eae:	9400      	str	r4, [sp, #0]
 8024eb0:	9303      	str	r3, [sp, #12]
 8024eb2:	2100      	movs	r1, #0
 8024eb4:	4630      	mov	r0, r6
 8024eb6:	220d      	movs	r2, #13
 8024eb8:	460b      	mov	r3, r1
 8024eba:	f7ff fb2b 	bl	8024514 <_Unwind_VRS_Set>
 8024ebe:	e7b6      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 8024ec0:	f000 020f 	and.w	r2, r0, #15
 8024ec4:	f1a2 000d 	sub.w	r0, r2, #13
 8024ec8:	4244      	negs	r4, r0
 8024eca:	eb44 0400 	adc.w	r4, r4, r0
 8024ece:	2a0f      	cmp	r2, #15
 8024ed0:	bf14      	ite	ne
 8024ed2:	46a0      	movne	r8, r4
 8024ed4:	f044 0801 	orreq.w	r8, r4, #1
 8024ed8:	f1b8 0f00 	cmp.w	r8, #0
 8024edc:	d1cf      	bne.n	8024e7e <__gnu_unwind_execute+0x62>
 8024ede:	4641      	mov	r1, r8
 8024ee0:	4643      	mov	r3, r8
 8024ee2:	4630      	mov	r0, r6
 8024ee4:	ac03      	add	r4, sp, #12
 8024ee6:	9400      	str	r4, [sp, #0]
 8024ee8:	f7ff faee 	bl	80244c8 <_Unwind_VRS_Get>
 8024eec:	ab03      	add	r3, sp, #12
 8024eee:	4630      	mov	r0, r6
 8024ef0:	9300      	str	r3, [sp, #0]
 8024ef2:	4641      	mov	r1, r8
 8024ef4:	220d      	movs	r2, #13
 8024ef6:	4643      	mov	r3, r8
 8024ef8:	f7ff fb0c 	bl	8024514 <_Unwind_VRS_Set>
 8024efc:	e797      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 8024efe:	43c2      	mvns	r2, r0
 8024f00:	f002 0207 	and.w	r2, r2, #7
 8024f04:	fa57 f202 	asrs.w	r2, r7, r2
 8024f08:	0701      	lsls	r1, r0, #28
 8024f0a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8024f0e:	4630      	mov	r0, r6
 8024f10:	bf48      	it	mi
 8024f12:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8024f16:	2100      	movs	r1, #0
 8024f18:	460b      	mov	r3, r1
 8024f1a:	f7ff fc8b 	bl	8024834 <_Unwind_VRS_Pop>
 8024f1e:	2800      	cmp	r0, #0
 8024f20:	d1ad      	bne.n	8024e7e <__gnu_unwind_execute+0x62>
 8024f22:	e784      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 8024f24:	28b1      	cmp	r0, #177	; 0xb1
 8024f26:	d076      	beq.n	8025016 <__gnu_unwind_execute+0x1fa>
 8024f28:	28b2      	cmp	r0, #178	; 0xb2
 8024f2a:	f000 8087 	beq.w	802503c <__gnu_unwind_execute+0x220>
 8024f2e:	28b3      	cmp	r0, #179	; 0xb3
 8024f30:	f000 80aa 	beq.w	8025088 <__gnu_unwind_execute+0x26c>
 8024f34:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8024f38:	2bb4      	cmp	r3, #180	; 0xb4
 8024f3a:	d05e      	beq.n	8024ffa <__gnu_unwind_execute+0x1de>
 8024f3c:	f000 0207 	and.w	r2, r0, #7
 8024f40:	2101      	movs	r1, #1
 8024f42:	3201      	adds	r2, #1
 8024f44:	4630      	mov	r0, r6
 8024f46:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8024f4a:	460b      	mov	r3, r1
 8024f4c:	f7ff fc72 	bl	8024834 <_Unwind_VRS_Pop>
 8024f50:	2800      	cmp	r0, #0
 8024f52:	d194      	bne.n	8024e7e <__gnu_unwind_execute+0x62>
 8024f54:	e76b      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 8024f56:	4628      	mov	r0, r5
 8024f58:	0224      	lsls	r4, r4, #8
 8024f5a:	f7ff ff35 	bl	8024dc8 <next_unwind_byte>
 8024f5e:	4304      	orrs	r4, r0
 8024f60:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8024f64:	d08b      	beq.n	8024e7e <__gnu_unwind_execute+0x62>
 8024f66:	0522      	lsls	r2, r4, #20
 8024f68:	2100      	movs	r1, #0
 8024f6a:	4630      	mov	r0, r6
 8024f6c:	460b      	mov	r3, r1
 8024f6e:	0c12      	lsrs	r2, r2, #16
 8024f70:	0124      	lsls	r4, r4, #4
 8024f72:	f7ff fc5f 	bl	8024834 <_Unwind_VRS_Pop>
 8024f76:	2800      	cmp	r0, #0
 8024f78:	d181      	bne.n	8024e7e <__gnu_unwind_execute+0x62>
 8024f7a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8024f7e:	bf18      	it	ne
 8024f80:	f04f 0901 	movne.w	r9, #1
 8024f84:	e753      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 8024f86:	28c6      	cmp	r0, #198	; 0xc6
 8024f88:	f000 8091 	beq.w	80250ae <__gnu_unwind_execute+0x292>
 8024f8c:	28c7      	cmp	r0, #199	; 0xc7
 8024f8e:	f000 80a1 	beq.w	80250d4 <__gnu_unwind_execute+0x2b8>
 8024f92:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8024f96:	2bc0      	cmp	r3, #192	; 0xc0
 8024f98:	f000 80af 	beq.w	80250fa <__gnu_unwind_execute+0x2de>
 8024f9c:	28c8      	cmp	r0, #200	; 0xc8
 8024f9e:	f000 80ba 	beq.w	8025116 <__gnu_unwind_execute+0x2fa>
 8024fa2:	28c9      	cmp	r0, #201	; 0xc9
 8024fa4:	f47f af6b 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 8024fa8:	4628      	mov	r0, r5
 8024faa:	f7ff ff0d 	bl	8024dc8 <next_unwind_byte>
 8024fae:	2101      	movs	r1, #1
 8024fb0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8024fb4:	f000 030f 	and.w	r3, r0, #15
 8024fb8:	3301      	adds	r3, #1
 8024fba:	4630      	mov	r0, r6
 8024fbc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8024fc0:	2305      	movs	r3, #5
 8024fc2:	f7ff fc37 	bl	8024834 <_Unwind_VRS_Pop>
 8024fc6:	2800      	cmp	r0, #0
 8024fc8:	f47f af59 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 8024fcc:	e72f      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 8024fce:	2000      	movs	r0, #0
 8024fd0:	f1b9 0f00 	cmp.w	r9, #0
 8024fd4:	f47f af54 	bne.w	8024e80 <__gnu_unwind_execute+0x64>
 8024fd8:	4649      	mov	r1, r9
 8024fda:	220e      	movs	r2, #14
 8024fdc:	464b      	mov	r3, r9
 8024fde:	4630      	mov	r0, r6
 8024fe0:	ac03      	add	r4, sp, #12
 8024fe2:	9400      	str	r4, [sp, #0]
 8024fe4:	f7ff fa70 	bl	80244c8 <_Unwind_VRS_Get>
 8024fe8:	4630      	mov	r0, r6
 8024fea:	4649      	mov	r1, r9
 8024fec:	220f      	movs	r2, #15
 8024fee:	464b      	mov	r3, r9
 8024ff0:	9400      	str	r4, [sp, #0]
 8024ff2:	f7ff fa8f 	bl	8024514 <_Unwind_VRS_Set>
 8024ff6:	4648      	mov	r0, r9
 8024ff8:	e742      	b.n	8024e80 <__gnu_unwind_execute+0x64>
 8024ffa:	f000 0203 	and.w	r2, r0, #3
 8024ffe:	2102      	movs	r1, #2
 8025000:	3201      	adds	r2, #1
 8025002:	4630      	mov	r0, r6
 8025004:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8025008:	460b      	mov	r3, r1
 802500a:	f7ff fc13 	bl	8024834 <_Unwind_VRS_Pop>
 802500e:	2800      	cmp	r0, #0
 8025010:	f47f af35 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 8025014:	e70b      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 8025016:	4628      	mov	r0, r5
 8025018:	f7ff fed6 	bl	8024dc8 <next_unwind_byte>
 802501c:	4602      	mov	r2, r0
 802501e:	2800      	cmp	r0, #0
 8025020:	f43f af2d 	beq.w	8024e7e <__gnu_unwind_execute+0x62>
 8025024:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 8025028:	f47f af29 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 802502c:	4630      	mov	r0, r6
 802502e:	460b      	mov	r3, r1
 8025030:	f7ff fc00 	bl	8024834 <_Unwind_VRS_Pop>
 8025034:	2800      	cmp	r0, #0
 8025036:	f47f af22 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 802503a:	e6f8      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 802503c:	2100      	movs	r1, #0
 802503e:	220d      	movs	r2, #13
 8025040:	460b      	mov	r3, r1
 8025042:	4630      	mov	r0, r6
 8025044:	ac03      	add	r4, sp, #12
 8025046:	9400      	str	r4, [sp, #0]
 8025048:	f7ff fa3e 	bl	80244c8 <_Unwind_VRS_Get>
 802504c:	4628      	mov	r0, r5
 802504e:	f7ff febb 	bl	8024dc8 <next_unwind_byte>
 8025052:	2402      	movs	r4, #2
 8025054:	0602      	lsls	r2, r0, #24
 8025056:	d50b      	bpl.n	8025070 <__gnu_unwind_execute+0x254>
 8025058:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 802505c:	9a03      	ldr	r2, [sp, #12]
 802505e:	4628      	mov	r0, r5
 8025060:	40a3      	lsls	r3, r4
 8025062:	3407      	adds	r4, #7
 8025064:	18d3      	adds	r3, r2, r3
 8025066:	9303      	str	r3, [sp, #12]
 8025068:	f7ff feae 	bl	8024dc8 <next_unwind_byte>
 802506c:	0603      	lsls	r3, r0, #24
 802506e:	d4f3      	bmi.n	8025058 <__gnu_unwind_execute+0x23c>
 8025070:	ab03      	add	r3, sp, #12
 8025072:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8025076:	9300      	str	r3, [sp, #0]
 8025078:	9b03      	ldr	r3, [sp, #12]
 802507a:	fa10 f404 	lsls.w	r4, r0, r4
 802507e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8025082:	191b      	adds	r3, r3, r4
 8025084:	9303      	str	r3, [sp, #12]
 8025086:	e714      	b.n	8024eb2 <__gnu_unwind_execute+0x96>
 8025088:	4628      	mov	r0, r5
 802508a:	f7ff fe9d 	bl	8024dc8 <next_unwind_byte>
 802508e:	2101      	movs	r1, #1
 8025090:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8025094:	f000 030f 	and.w	r3, r0, #15
 8025098:	3301      	adds	r3, #1
 802509a:	4630      	mov	r0, r6
 802509c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80250a0:	460b      	mov	r3, r1
 80250a2:	f7ff fbc7 	bl	8024834 <_Unwind_VRS_Pop>
 80250a6:	2800      	cmp	r0, #0
 80250a8:	f47f aee9 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 80250ac:	e6bf      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 80250ae:	4628      	mov	r0, r5
 80250b0:	f7ff fe8a 	bl	8024dc8 <next_unwind_byte>
 80250b4:	2103      	movs	r1, #3
 80250b6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80250ba:	f000 030f 	and.w	r3, r0, #15
 80250be:	3301      	adds	r3, #1
 80250c0:	4630      	mov	r0, r6
 80250c2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80250c6:	460b      	mov	r3, r1
 80250c8:	f7ff fbb4 	bl	8024834 <_Unwind_VRS_Pop>
 80250cc:	2800      	cmp	r0, #0
 80250ce:	f47f aed6 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 80250d2:	e6ac      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 80250d4:	4628      	mov	r0, r5
 80250d6:	f7ff fe77 	bl	8024dc8 <next_unwind_byte>
 80250da:	4602      	mov	r2, r0
 80250dc:	2800      	cmp	r0, #0
 80250de:	f43f aece 	beq.w	8024e7e <__gnu_unwind_execute+0x62>
 80250e2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80250e6:	f47f aeca 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 80250ea:	4630      	mov	r0, r6
 80250ec:	2104      	movs	r1, #4
 80250ee:	f7ff fba1 	bl	8024834 <_Unwind_VRS_Pop>
 80250f2:	2800      	cmp	r0, #0
 80250f4:	f47f aec3 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 80250f8:	e699      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 80250fa:	f000 020f 	and.w	r2, r0, #15
 80250fe:	2103      	movs	r1, #3
 8025100:	3201      	adds	r2, #1
 8025102:	4630      	mov	r0, r6
 8025104:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8025108:	460b      	mov	r3, r1
 802510a:	f7ff fb93 	bl	8024834 <_Unwind_VRS_Pop>
 802510e:	2800      	cmp	r0, #0
 8025110:	f47f aeb5 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 8025114:	e68b      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 8025116:	4628      	mov	r0, r5
 8025118:	f7ff fe56 	bl	8024dc8 <next_unwind_byte>
 802511c:	2101      	movs	r1, #1
 802511e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8025122:	f000 030f 	and.w	r3, r0, #15
 8025126:	3210      	adds	r2, #16
 8025128:	3301      	adds	r3, #1
 802512a:	4630      	mov	r0, r6
 802512c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8025130:	2305      	movs	r3, #5
 8025132:	f7ff fb7f 	bl	8024834 <_Unwind_VRS_Pop>
 8025136:	2800      	cmp	r0, #0
 8025138:	f47f aea1 	bne.w	8024e7e <__gnu_unwind_execute+0x62>
 802513c:	e677      	b.n	8024e2e <__gnu_unwind_execute+0x12>
 802513e:	bf00      	nop

08025140 <__gnu_unwind_frame>:
 8025140:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8025142:	4608      	mov	r0, r1
 8025144:	b530      	push	{r4, r5, lr}
 8025146:	b085      	sub	sp, #20
 8025148:	685a      	ldr	r2, [r3, #4]
 802514a:	f103 0408 	add.w	r4, r3, #8
 802514e:	2503      	movs	r5, #3
 8025150:	f88d 500c 	strb.w	r5, [sp, #12]
 8025154:	79db      	ldrb	r3, [r3, #7]
 8025156:	a901      	add	r1, sp, #4
 8025158:	0212      	lsls	r2, r2, #8
 802515a:	9402      	str	r4, [sp, #8]
 802515c:	9201      	str	r2, [sp, #4]
 802515e:	f88d 300d 	strb.w	r3, [sp, #13]
 8025162:	f7ff fe5b 	bl	8024e1c <__gnu_unwind_execute>
 8025166:	b005      	add	sp, #20
 8025168:	bd30      	pop	{r4, r5, pc}
 802516a:	bf00      	nop

0802516c <_Unwind_GetRegionStart>:
 802516c:	b508      	push	{r3, lr}
 802516e:	f7ff fe53 	bl	8024e18 <unwind_UCB_from_context>
 8025172:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8025174:	bd08      	pop	{r3, pc}
 8025176:	bf00      	nop

08025178 <_Unwind_GetLanguageSpecificData>:
 8025178:	b508      	push	{r3, lr}
 802517a:	f7ff fe4d 	bl	8024e18 <unwind_UCB_from_context>
 802517e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8025180:	79d8      	ldrb	r0, [r3, #7]
 8025182:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8025186:	f103 0008 	add.w	r0, r3, #8
 802518a:	bd08      	pop	{r3, pc}

0802518c <_Unwind_GetDataRelBase>:
 802518c:	b508      	push	{r3, lr}
 802518e:	f000 f805 	bl	802519c <abort>
 8025192:	bf00      	nop

08025194 <_Unwind_GetTextRelBase>:
 8025194:	b508      	push	{r3, lr}
 8025196:	f000 f801 	bl	802519c <abort>
 802519a:	bf00      	nop

0802519c <abort>:
 802519c:	b508      	push	{r3, lr}
 802519e:	2006      	movs	r0, #6
 80251a0:	f001 f9e0 	bl	8026564 <raise>
 80251a4:	2001      	movs	r0, #1
 80251a6:	f7f9 f80d 	bl	801e1c4 <_exit>
 80251aa:	bf00      	nop

080251ac <__assert_func>:
 80251ac:	4604      	mov	r4, r0
 80251ae:	480a      	ldr	r0, [pc, #40]	; (80251d8 <__assert_func+0x2c>)
 80251b0:	b500      	push	{lr}
 80251b2:	b085      	sub	sp, #20
 80251b4:	6800      	ldr	r0, [r0, #0]
 80251b6:	4d09      	ldr	r5, [pc, #36]	; (80251dc <__assert_func+0x30>)
 80251b8:	68c0      	ldr	r0, [r0, #12]
 80251ba:	b14a      	cbz	r2, 80251d0 <__assert_func+0x24>
 80251bc:	e88d 0022 	stmia.w	sp, {r1, r5}
 80251c0:	9202      	str	r2, [sp, #8]
 80251c2:	461a      	mov	r2, r3
 80251c4:	4906      	ldr	r1, [pc, #24]	; (80251e0 <__assert_func+0x34>)
 80251c6:	4623      	mov	r3, r4
 80251c8:	f000 f82e 	bl	8025228 <fiprintf>
 80251cc:	f7ff ffe6 	bl	802519c <abort>
 80251d0:	4d04      	ldr	r5, [pc, #16]	; (80251e4 <__assert_func+0x38>)
 80251d2:	462a      	mov	r2, r5
 80251d4:	e7f2      	b.n	80251bc <__assert_func+0x10>
 80251d6:	bf00      	nop
 80251d8:	20000008 	.word	0x20000008
 80251dc:	08035e48 	.word	0x08035e48
 80251e0:	08035e58 	.word	0x08035e58
 80251e4:	08035e54 	.word	0x08035e54

080251e8 <__assert>:
 80251e8:	b508      	push	{r3, lr}
 80251ea:	4613      	mov	r3, r2
 80251ec:	2200      	movs	r2, #0
 80251ee:	f7ff ffdd 	bl	80251ac <__assert_func>
 80251f2:	bf00      	nop

080251f4 <__cxa_atexit>:
 80251f4:	b410      	push	{r4}
 80251f6:	460c      	mov	r4, r1
 80251f8:	4613      	mov	r3, r2
 80251fa:	4601      	mov	r1, r0
 80251fc:	4622      	mov	r2, r4
 80251fe:	2002      	movs	r0, #2
 8025200:	bc10      	pop	{r4}
 8025202:	f003 bc55 	b.w	8028ab0 <__register_exitproc>
 8025206:	bf00      	nop

08025208 <_fiprintf_r>:
 8025208:	b40c      	push	{r2, r3}
 802520a:	b510      	push	{r4, lr}
 802520c:	b082      	sub	sp, #8
 802520e:	ac04      	add	r4, sp, #16
 8025210:	f854 2b04 	ldr.w	r2, [r4], #4
 8025214:	4623      	mov	r3, r4
 8025216:	9401      	str	r4, [sp, #4]
 8025218:	f002 fe20 	bl	8027e5c <_vfiprintf_r>
 802521c:	b002      	add	sp, #8
 802521e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025222:	b002      	add	sp, #8
 8025224:	4770      	bx	lr
 8025226:	bf00      	nop

08025228 <fiprintf>:
 8025228:	b40e      	push	{r1, r2, r3}
 802522a:	f240 0308 	movw	r3, #8
 802522e:	b510      	push	{r4, lr}
 8025230:	b083      	sub	sp, #12
 8025232:	ac05      	add	r4, sp, #20
 8025234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8025238:	4601      	mov	r1, r0
 802523a:	f854 2b04 	ldr.w	r2, [r4], #4
 802523e:	6818      	ldr	r0, [r3, #0]
 8025240:	4623      	mov	r3, r4
 8025242:	9401      	str	r4, [sp, #4]
 8025244:	f002 fe0a 	bl	8027e5c <_vfiprintf_r>
 8025248:	b003      	add	sp, #12
 802524a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802524e:	b003      	add	sp, #12
 8025250:	4770      	bx	lr
 8025252:	bf00      	nop

08025254 <_fputc_r>:
 8025254:	b510      	push	{r4, lr}
 8025256:	4604      	mov	r4, r0
 8025258:	b082      	sub	sp, #8
 802525a:	b138      	cbz	r0, 802526c <_fputc_r+0x18>
 802525c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802525e:	b92b      	cbnz	r3, 802526c <_fputc_r+0x18>
 8025260:	9101      	str	r1, [sp, #4]
 8025262:	9200      	str	r2, [sp, #0]
 8025264:	f004 fdbe 	bl	8029de4 <__sinit>
 8025268:	9a00      	ldr	r2, [sp, #0]
 802526a:	9901      	ldr	r1, [sp, #4]
 802526c:	4620      	mov	r0, r4
 802526e:	b002      	add	sp, #8
 8025270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025274:	f000 be72 	b.w	8025f5c <_putc_r>

08025278 <fputc>:
 8025278:	b570      	push	{r4, r5, r6, lr}
 802527a:	4606      	mov	r6, r0
 802527c:	4c07      	ldr	r4, [pc, #28]	; (802529c <fputc+0x24>)
 802527e:	460d      	mov	r5, r1
 8025280:	6820      	ldr	r0, [r4, #0]
 8025282:	b120      	cbz	r0, 802528e <fputc+0x16>
 8025284:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8025286:	b913      	cbnz	r3, 802528e <fputc+0x16>
 8025288:	f004 fdac 	bl	8029de4 <__sinit>
 802528c:	6820      	ldr	r0, [r4, #0]
 802528e:	4631      	mov	r1, r6
 8025290:	462a      	mov	r2, r5
 8025292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025296:	f000 be61 	b.w	8025f5c <_putc_r>
 802529a:	bf00      	nop
 802529c:	20000008 	.word	0x20000008

080252a0 <_fputs_r>:
 80252a0:	b530      	push	{r4, r5, lr}
 80252a2:	b087      	sub	sp, #28
 80252a4:	4604      	mov	r4, r0
 80252a6:	4608      	mov	r0, r1
 80252a8:	4615      	mov	r5, r2
 80252aa:	9104      	str	r1, [sp, #16]
 80252ac:	f001 fb36 	bl	802691c <strlen>
 80252b0:	ab04      	add	r3, sp, #16
 80252b2:	9301      	str	r3, [sp, #4]
 80252b4:	2301      	movs	r3, #1
 80252b6:	9302      	str	r3, [sp, #8]
 80252b8:	9003      	str	r0, [sp, #12]
 80252ba:	9005      	str	r0, [sp, #20]
 80252bc:	b10c      	cbz	r4, 80252c2 <_fputs_r+0x22>
 80252be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80252c0:	b18b      	cbz	r3, 80252e6 <_fputs_r+0x46>
 80252c2:	89ab      	ldrh	r3, [r5, #12]
 80252c4:	4620      	mov	r0, r4
 80252c6:	4629      	mov	r1, r5
 80252c8:	049a      	lsls	r2, r3, #18
 80252ca:	bf5f      	itttt	pl
 80252cc:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80252d0:	81ab      	strhpl	r3, [r5, #12]
 80252d2:	6e6a      	ldrpl	r2, [r5, #100]	; 0x64
 80252d4:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 80252d8:	aa01      	add	r2, sp, #4
 80252da:	bf58      	it	pl
 80252dc:	666b      	strpl	r3, [r5, #100]	; 0x64
 80252de:	f000 f80f 	bl	8025300 <__sfvwrite_r>
 80252e2:	b007      	add	sp, #28
 80252e4:	bd30      	pop	{r4, r5, pc}
 80252e6:	4620      	mov	r0, r4
 80252e8:	f004 fd7c 	bl	8029de4 <__sinit>
 80252ec:	e7e9      	b.n	80252c2 <_fputs_r+0x22>
 80252ee:	bf00      	nop

080252f0 <fputs>:
 80252f0:	f240 0308 	movw	r3, #8
 80252f4:	460a      	mov	r2, r1
 80252f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80252fa:	4601      	mov	r1, r0
 80252fc:	6818      	ldr	r0, [r3, #0]
 80252fe:	e7cf      	b.n	80252a0 <_fputs_r>

08025300 <__sfvwrite_r>:
 8025300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025304:	b085      	sub	sp, #20
 8025306:	4690      	mov	r8, r2
 8025308:	460c      	mov	r4, r1
 802530a:	9001      	str	r0, [sp, #4]
 802530c:	6890      	ldr	r0, [r2, #8]
 802530e:	2800      	cmp	r0, #0
 8025310:	d04d      	beq.n	80253ae <__sfvwrite_r+0xae>
 8025312:	898b      	ldrh	r3, [r1, #12]
 8025314:	0719      	lsls	r1, r3, #28
 8025316:	d56b      	bpl.n	80253f0 <__sfvwrite_r+0xf0>
 8025318:	6922      	ldr	r2, [r4, #16]
 802531a:	2a00      	cmp	r2, #0
 802531c:	d068      	beq.n	80253f0 <__sfvwrite_r+0xf0>
 802531e:	f013 0b02 	ands.w	fp, r3, #2
 8025322:	f8d8 5000 	ldr.w	r5, [r8]
 8025326:	bf1c      	itt	ne
 8025328:	f04f 0900 	movne.w	r9, #0
 802532c:	464f      	movne	r7, r9
 802532e:	d145      	bne.n	80253bc <__sfvwrite_r+0xbc>
 8025330:	f013 0901 	ands.w	r9, r3, #1
 8025334:	bf1e      	ittt	ne
 8025336:	46dc      	movne	ip, fp
 8025338:	46da      	movne	sl, fp
 802533a:	465f      	movne	r7, fp
 802533c:	f000 80b5 	beq.w	80254aa <__sfvwrite_r+0x1aa>
 8025340:	2f00      	cmp	r7, #0
 8025342:	d065      	beq.n	8025410 <__sfvwrite_r+0x110>
 8025344:	f1bc 0f00 	cmp.w	ip, #0
 8025348:	f000 8083 	beq.w	8025452 <__sfvwrite_r+0x152>
 802534c:	6922      	ldr	r2, [r4, #16]
 802534e:	45bb      	cmp	fp, r7
 8025350:	bf34      	ite	cc
 8025352:	46d9      	movcc	r9, fp
 8025354:	46b9      	movcs	r9, r7
 8025356:	6820      	ldr	r0, [r4, #0]
 8025358:	6963      	ldr	r3, [r4, #20]
 802535a:	68a6      	ldr	r6, [r4, #8]
 802535c:	4290      	cmp	r0, r2
 802535e:	bf94      	ite	ls
 8025360:	2200      	movls	r2, #0
 8025362:	2201      	movhi	r2, #1
 8025364:	199e      	adds	r6, r3, r6
 8025366:	45b1      	cmp	r9, r6
 8025368:	bfd4      	ite	le
 802536a:	2200      	movle	r2, #0
 802536c:	f002 0201 	andgt.w	r2, r2, #1
 8025370:	2a00      	cmp	r2, #0
 8025372:	f040 8081 	bne.w	8025478 <__sfvwrite_r+0x178>
 8025376:	4599      	cmp	r9, r3
 8025378:	db51      	blt.n	802541e <__sfvwrite_r+0x11e>
 802537a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802537c:	4652      	mov	r2, sl
 802537e:	69e1      	ldr	r1, [r4, #28]
 8025380:	9801      	ldr	r0, [sp, #4]
 8025382:	f8cd c000 	str.w	ip, [sp]
 8025386:	47b0      	blx	r6
 8025388:	f8dd c000 	ldr.w	ip, [sp]
 802538c:	2800      	cmp	r0, #0
 802538e:	4606      	mov	r6, r0
 8025390:	f340 8084 	ble.w	802549c <__sfvwrite_r+0x19c>
 8025394:	ebbb 0b06 	subs.w	fp, fp, r6
 8025398:	d054      	beq.n	8025444 <__sfvwrite_r+0x144>
 802539a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802539e:	44b2      	add	sl, r6
 80253a0:	1bbf      	subs	r7, r7, r6
 80253a2:	1b9e      	subs	r6, r3, r6
 80253a4:	f8c8 6008 	str.w	r6, [r8, #8]
 80253a8:	2e00      	cmp	r6, #0
 80253aa:	d1c9      	bne.n	8025340 <__sfvwrite_r+0x40>
 80253ac:	4630      	mov	r0, r6
 80253ae:	b005      	add	sp, #20
 80253b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253b4:	f8d5 9000 	ldr.w	r9, [r5]
 80253b8:	686f      	ldr	r7, [r5, #4]
 80253ba:	3508      	adds	r5, #8
 80253bc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80253c0:	bf34      	ite	cc
 80253c2:	463b      	movcc	r3, r7
 80253c4:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 80253c8:	464a      	mov	r2, r9
 80253ca:	9801      	ldr	r0, [sp, #4]
 80253cc:	2f00      	cmp	r7, #0
 80253ce:	d0f1      	beq.n	80253b4 <__sfvwrite_r+0xb4>
 80253d0:	69e1      	ldr	r1, [r4, #28]
 80253d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80253d4:	47b0      	blx	r6
 80253d6:	2800      	cmp	r0, #0
 80253d8:	4481      	add	r9, r0
 80253da:	ebc0 0707 	rsb	r7, r0, r7
 80253de:	dd5d      	ble.n	802549c <__sfvwrite_r+0x19c>
 80253e0:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80253e4:	1a30      	subs	r0, r6, r0
 80253e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80253ea:	2800      	cmp	r0, #0
 80253ec:	d1e6      	bne.n	80253bc <__sfvwrite_r+0xbc>
 80253ee:	e7de      	b.n	80253ae <__sfvwrite_r+0xae>
 80253f0:	9801      	ldr	r0, [sp, #4]
 80253f2:	4621      	mov	r1, r4
 80253f4:	f003 fb00 	bl	80289f8 <__swsetup_r>
 80253f8:	89a3      	ldrh	r3, [r4, #12]
 80253fa:	2800      	cmp	r0, #0
 80253fc:	d08f      	beq.n	802531e <__sfvwrite_r+0x1e>
 80253fe:	9901      	ldr	r1, [sp, #4]
 8025400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025404:	f04f 30ff 	mov.w	r0, #4294967295
 8025408:	81a3      	strh	r3, [r4, #12]
 802540a:	2309      	movs	r3, #9
 802540c:	600b      	str	r3, [r1, #0]
 802540e:	e7ce      	b.n	80253ae <__sfvwrite_r+0xae>
 8025410:	f8d5 a000 	ldr.w	sl, [r5]
 8025414:	f04f 0c00 	mov.w	ip, #0
 8025418:	686f      	ldr	r7, [r5, #4]
 802541a:	3508      	adds	r5, #8
 802541c:	e790      	b.n	8025340 <__sfvwrite_r+0x40>
 802541e:	464a      	mov	r2, r9
 8025420:	4651      	mov	r1, sl
 8025422:	464e      	mov	r6, r9
 8025424:	f8cd c000 	str.w	ip, [sp]
 8025428:	f000 fcea 	bl	8025e00 <memmove>
 802542c:	68a2      	ldr	r2, [r4, #8]
 802542e:	6823      	ldr	r3, [r4, #0]
 8025430:	ebbb 0b06 	subs.w	fp, fp, r6
 8025434:	ebc9 0202 	rsb	r2, r9, r2
 8025438:	f8dd c000 	ldr.w	ip, [sp]
 802543c:	444b      	add	r3, r9
 802543e:	60a2      	str	r2, [r4, #8]
 8025440:	6023      	str	r3, [r4, #0]
 8025442:	d1aa      	bne.n	802539a <__sfvwrite_r+0x9a>
 8025444:	9801      	ldr	r0, [sp, #4]
 8025446:	4621      	mov	r1, r4
 8025448:	f004 fbaa 	bl	8029ba0 <_fflush_r>
 802544c:	bb30      	cbnz	r0, 802549c <__sfvwrite_r+0x19c>
 802544e:	46dc      	mov	ip, fp
 8025450:	e7a3      	b.n	802539a <__sfvwrite_r+0x9a>
 8025452:	4650      	mov	r0, sl
 8025454:	210a      	movs	r1, #10
 8025456:	463a      	mov	r2, r7
 8025458:	f107 0b01 	add.w	fp, r7, #1
 802545c:	f000 fc1a 	bl	8025c94 <memchr>
 8025460:	f04f 0c01 	mov.w	ip, #1
 8025464:	2800      	cmp	r0, #0
 8025466:	f43f af71 	beq.w	802534c <__sfvwrite_r+0x4c>
 802546a:	f100 0b01 	add.w	fp, r0, #1
 802546e:	f04f 0c01 	mov.w	ip, #1
 8025472:	ebca 0b0b 	rsb	fp, sl, fp
 8025476:	e769      	b.n	802534c <__sfvwrite_r+0x4c>
 8025478:	4651      	mov	r1, sl
 802547a:	4632      	mov	r2, r6
 802547c:	f8cd c000 	str.w	ip, [sp]
 8025480:	f000 fcbe 	bl	8025e00 <memmove>
 8025484:	6823      	ldr	r3, [r4, #0]
 8025486:	4621      	mov	r1, r4
 8025488:	9801      	ldr	r0, [sp, #4]
 802548a:	199b      	adds	r3, r3, r6
 802548c:	6023      	str	r3, [r4, #0]
 802548e:	f004 fb87 	bl	8029ba0 <_fflush_r>
 8025492:	f8dd c000 	ldr.w	ip, [sp]
 8025496:	2800      	cmp	r0, #0
 8025498:	f43f af7c 	beq.w	8025394 <__sfvwrite_r+0x94>
 802549c:	89a3      	ldrh	r3, [r4, #12]
 802549e:	f04f 30ff 	mov.w	r0, #4294967295
 80254a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80254a6:	81a3      	strh	r3, [r4, #12]
 80254a8:	e781      	b.n	80253ae <__sfvwrite_r+0xae>
 80254aa:	464e      	mov	r6, r9
 80254ac:	b326      	cbz	r6, 80254f8 <__sfvwrite_r+0x1f8>
 80254ae:	059a      	lsls	r2, r3, #22
 80254b0:	68a7      	ldr	r7, [r4, #8]
 80254b2:	d526      	bpl.n	8025502 <__sfvwrite_r+0x202>
 80254b4:	42be      	cmp	r6, r7
 80254b6:	46bb      	mov	fp, r7
 80254b8:	d246      	bcs.n	8025548 <__sfvwrite_r+0x248>
 80254ba:	6820      	ldr	r0, [r4, #0]
 80254bc:	4633      	mov	r3, r6
 80254be:	46b3      	mov	fp, r6
 80254c0:	46b2      	mov	sl, r6
 80254c2:	4637      	mov	r7, r6
 80254c4:	4649      	mov	r1, r9
 80254c6:	465a      	mov	r2, fp
 80254c8:	9300      	str	r3, [sp, #0]
 80254ca:	f000 fc99 	bl	8025e00 <memmove>
 80254ce:	9b00      	ldr	r3, [sp, #0]
 80254d0:	68a1      	ldr	r1, [r4, #8]
 80254d2:	6822      	ldr	r2, [r4, #0]
 80254d4:	1acb      	subs	r3, r1, r3
 80254d6:	60a3      	str	r3, [r4, #8]
 80254d8:	eb02 030b 	add.w	r3, r2, fp
 80254dc:	6023      	str	r3, [r4, #0]
 80254de:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80254e2:	1bc7      	subs	r7, r0, r7
 80254e4:	f8c8 7008 	str.w	r7, [r8, #8]
 80254e8:	2f00      	cmp	r7, #0
 80254ea:	d02b      	beq.n	8025544 <__sfvwrite_r+0x244>
 80254ec:	ebca 0606 	rsb	r6, sl, r6
 80254f0:	44d1      	add	r9, sl
 80254f2:	89a3      	ldrh	r3, [r4, #12]
 80254f4:	2e00      	cmp	r6, #0
 80254f6:	d1da      	bne.n	80254ae <__sfvwrite_r+0x1ae>
 80254f8:	f8d5 9000 	ldr.w	r9, [r5]
 80254fc:	686e      	ldr	r6, [r5, #4]
 80254fe:	3508      	adds	r5, #8
 8025500:	e7d4      	b.n	80254ac <__sfvwrite_r+0x1ac>
 8025502:	6923      	ldr	r3, [r4, #16]
 8025504:	46ba      	mov	sl, r7
 8025506:	6820      	ldr	r0, [r4, #0]
 8025508:	4298      	cmp	r0, r3
 802550a:	bf94      	ite	ls
 802550c:	2300      	movls	r3, #0
 802550e:	2301      	movhi	r3, #1
 8025510:	42b7      	cmp	r7, r6
 8025512:	bf2c      	ite	cs
 8025514:	2300      	movcs	r3, #0
 8025516:	f003 0301 	andcc.w	r3, r3, #1
 802551a:	2b00      	cmp	r3, #0
 802551c:	d129      	bne.n	8025572 <__sfvwrite_r+0x272>
 802551e:	6963      	ldr	r3, [r4, #20]
 8025520:	429e      	cmp	r6, r3
 8025522:	d319      	bcc.n	8025558 <__sfvwrite_r+0x258>
 8025524:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8025526:	464a      	mov	r2, r9
 8025528:	69e1      	ldr	r1, [r4, #28]
 802552a:	9801      	ldr	r0, [sp, #4]
 802552c:	47b8      	blx	r7
 802552e:	2800      	cmp	r0, #0
 8025530:	4607      	mov	r7, r0
 8025532:	ddb3      	ble.n	802549c <__sfvwrite_r+0x19c>
 8025534:	4682      	mov	sl, r0
 8025536:	f8d8 0008 	ldr.w	r0, [r8, #8]
 802553a:	1bc7      	subs	r7, r0, r7
 802553c:	f8c8 7008 	str.w	r7, [r8, #8]
 8025540:	2f00      	cmp	r7, #0
 8025542:	d1d3      	bne.n	80254ec <__sfvwrite_r+0x1ec>
 8025544:	4638      	mov	r0, r7
 8025546:	e732      	b.n	80253ae <__sfvwrite_r+0xae>
 8025548:	f413 6f90 	tst.w	r3, #1152	; 0x480
 802554c:	d11f      	bne.n	802558e <__sfvwrite_r+0x28e>
 802554e:	463b      	mov	r3, r7
 8025550:	6820      	ldr	r0, [r4, #0]
 8025552:	46b2      	mov	sl, r6
 8025554:	4637      	mov	r7, r6
 8025556:	e7b5      	b.n	80254c4 <__sfvwrite_r+0x1c4>
 8025558:	4632      	mov	r2, r6
 802555a:	4649      	mov	r1, r9
 802555c:	f000 fc50 	bl	8025e00 <memmove>
 8025560:	68a2      	ldr	r2, [r4, #8]
 8025562:	6823      	ldr	r3, [r4, #0]
 8025564:	4637      	mov	r7, r6
 8025566:	1b92      	subs	r2, r2, r6
 8025568:	46b2      	mov	sl, r6
 802556a:	199b      	adds	r3, r3, r6
 802556c:	60a2      	str	r2, [r4, #8]
 802556e:	6023      	str	r3, [r4, #0]
 8025570:	e7b5      	b.n	80254de <__sfvwrite_r+0x1de>
 8025572:	4649      	mov	r1, r9
 8025574:	463a      	mov	r2, r7
 8025576:	f000 fc43 	bl	8025e00 <memmove>
 802557a:	6823      	ldr	r3, [r4, #0]
 802557c:	9801      	ldr	r0, [sp, #4]
 802557e:	4621      	mov	r1, r4
 8025580:	19db      	adds	r3, r3, r7
 8025582:	6023      	str	r3, [r4, #0]
 8025584:	f004 fb0c 	bl	8029ba0 <_fflush_r>
 8025588:	2800      	cmp	r0, #0
 802558a:	d0a8      	beq.n	80254de <__sfvwrite_r+0x1de>
 802558c:	e786      	b.n	802549c <__sfvwrite_r+0x19c>
 802558e:	6962      	ldr	r2, [r4, #20]
 8025590:	6921      	ldr	r1, [r4, #16]
 8025592:	6820      	ldr	r0, [r4, #0]
 8025594:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8025598:	1a40      	subs	r0, r0, r1
 802559a:	9003      	str	r0, [sp, #12]
 802559c:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 80255a0:	3001      	adds	r0, #1
 80255a2:	1980      	adds	r0, r0, r6
 80255a4:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 80255a8:	4584      	cmp	ip, r0
 80255aa:	4662      	mov	r2, ip
 80255ac:	bf38      	it	cc
 80255ae:	4684      	movcc	ip, r0
 80255b0:	9801      	ldr	r0, [sp, #4]
 80255b2:	bf38      	it	cc
 80255b4:	4662      	movcc	r2, ip
 80255b6:	055b      	lsls	r3, r3, #21
 80255b8:	d527      	bpl.n	802560a <__sfvwrite_r+0x30a>
 80255ba:	4611      	mov	r1, r2
 80255bc:	f8cd c000 	str.w	ip, [sp]
 80255c0:	f000 f8b6 	bl	8025730 <_malloc_r>
 80255c4:	f8dd c000 	ldr.w	ip, [sp]
 80255c8:	9002      	str	r0, [sp, #8]
 80255ca:	2800      	cmp	r0, #0
 80255cc:	d02e      	beq.n	802562c <__sfvwrite_r+0x32c>
 80255ce:	6921      	ldr	r1, [r4, #16]
 80255d0:	9802      	ldr	r0, [sp, #8]
 80255d2:	9a03      	ldr	r2, [sp, #12]
 80255d4:	f8cd c000 	str.w	ip, [sp]
 80255d8:	f000 fbd0 	bl	8025d7c <memcpy>
 80255dc:	89a3      	ldrh	r3, [r4, #12]
 80255de:	f8dd c000 	ldr.w	ip, [sp]
 80255e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80255e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80255ea:	81a3      	strh	r3, [r4, #12]
 80255ec:	9902      	ldr	r1, [sp, #8]
 80255ee:	4633      	mov	r3, r6
 80255f0:	9a03      	ldr	r2, [sp, #12]
 80255f2:	46b3      	mov	fp, r6
 80255f4:	46b2      	mov	sl, r6
 80255f6:	4637      	mov	r7, r6
 80255f8:	1888      	adds	r0, r1, r2
 80255fa:	6121      	str	r1, [r4, #16]
 80255fc:	ebc2 020c 	rsb	r2, r2, ip
 8025600:	6020      	str	r0, [r4, #0]
 8025602:	f8c4 c014 	str.w	ip, [r4, #20]
 8025606:	60a2      	str	r2, [r4, #8]
 8025608:	e75c      	b.n	80254c4 <__sfvwrite_r+0x1c4>
 802560a:	f8cd c000 	str.w	ip, [sp]
 802560e:	f000 fd13 	bl	8026038 <_realloc_r>
 8025612:	f8dd c000 	ldr.w	ip, [sp]
 8025616:	9002      	str	r0, [sp, #8]
 8025618:	2800      	cmp	r0, #0
 802561a:	d1e7      	bne.n	80255ec <__sfvwrite_r+0x2ec>
 802561c:	6921      	ldr	r1, [r4, #16]
 802561e:	9801      	ldr	r0, [sp, #4]
 8025620:	f004 fd44 	bl	802a0ac <_free_r>
 8025624:	9901      	ldr	r1, [sp, #4]
 8025626:	230c      	movs	r3, #12
 8025628:	600b      	str	r3, [r1, #0]
 802562a:	e737      	b.n	802549c <__sfvwrite_r+0x19c>
 802562c:	9a01      	ldr	r2, [sp, #4]
 802562e:	230c      	movs	r3, #12
 8025630:	6013      	str	r3, [r2, #0]
 8025632:	e733      	b.n	802549c <__sfvwrite_r+0x19c>

08025634 <_fwrite_r>:
 8025634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025638:	b086      	sub	sp, #24
 802563a:	fb02 f603 	mul.w	r6, r2, r3
 802563e:	461d      	mov	r5, r3
 8025640:	4614      	mov	r4, r2
 8025642:	ab04      	add	r3, sp, #16
 8025644:	4607      	mov	r7, r0
 8025646:	9301      	str	r3, [sp, #4]
 8025648:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 802564c:	2301      	movs	r3, #1
 802564e:	9104      	str	r1, [sp, #16]
 8025650:	9302      	str	r3, [sp, #8]
 8025652:	9605      	str	r6, [sp, #20]
 8025654:	9603      	str	r6, [sp, #12]
 8025656:	b108      	cbz	r0, 802565c <_fwrite_r+0x28>
 8025658:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802565a:	b1f3      	cbz	r3, 802569a <_fwrite_r+0x66>
 802565c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8025660:	4638      	mov	r0, r7
 8025662:	4641      	mov	r1, r8
 8025664:	049a      	lsls	r2, r3, #18
 8025666:	bf5f      	itttt	pl
 8025668:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 802566c:	f8a8 300c 	strhpl.w	r3, [r8, #12]
 8025670:	f8d8 2064 	ldrpl.w	r2, [r8, #100]	; 0x64
 8025674:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 8025678:	aa01      	add	r2, sp, #4
 802567a:	bf58      	it	pl
 802567c:	f8c8 3064 	strpl.w	r3, [r8, #100]	; 0x64
 8025680:	f7ff fe3e 	bl	8025300 <__sfvwrite_r>
 8025684:	b128      	cbz	r0, 8025692 <_fwrite_r+0x5e>
 8025686:	9803      	ldr	r0, [sp, #12]
 8025688:	4621      	mov	r1, r4
 802568a:	1a30      	subs	r0, r6, r0
 802568c:	f006 f9c4 	bl	802ba18 <__aeabi_uidiv>
 8025690:	4605      	mov	r5, r0
 8025692:	4628      	mov	r0, r5
 8025694:	b006      	add	sp, #24
 8025696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802569a:	f004 fba3 	bl	8029de4 <__sinit>
 802569e:	e7dd      	b.n	802565c <_fwrite_r+0x28>

080256a0 <fwrite>:
 80256a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80256a2:	f240 0408 	movw	r4, #8
 80256a6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80256aa:	4686      	mov	lr, r0
 80256ac:	460f      	mov	r7, r1
 80256ae:	4616      	mov	r6, r2
 80256b0:	b083      	sub	sp, #12
 80256b2:	461d      	mov	r5, r3
 80256b4:	6820      	ldr	r0, [r4, #0]
 80256b6:	4671      	mov	r1, lr
 80256b8:	463a      	mov	r2, r7
 80256ba:	4633      	mov	r3, r6
 80256bc:	9500      	str	r5, [sp, #0]
 80256be:	f7ff ffb9 	bl	8025634 <_fwrite_r>
 80256c2:	b003      	add	sp, #12
 80256c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80256c6:	bf00      	nop

080256c8 <__libc_init_array>:
 80256c8:	b570      	push	{r4, r5, r6, lr}
 80256ca:	4d0d      	ldr	r5, [pc, #52]	; (8025700 <__libc_init_array+0x38>)
 80256cc:	4e0d      	ldr	r6, [pc, #52]	; (8025704 <__libc_init_array+0x3c>)
 80256ce:	1b76      	subs	r6, r6, r5
 80256d0:	10b6      	asrs	r6, r6, #2
 80256d2:	d006      	beq.n	80256e2 <__libc_init_array+0x1a>
 80256d4:	2400      	movs	r4, #0
 80256d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80256da:	3401      	adds	r4, #1
 80256dc:	4798      	blx	r3
 80256de:	42a6      	cmp	r6, r4
 80256e0:	d1f9      	bne.n	80256d6 <__libc_init_array+0xe>
 80256e2:	4d09      	ldr	r5, [pc, #36]	; (8025708 <__libc_init_array+0x40>)
 80256e4:	f010 fc02 	bl	8035eec <_init>
 80256e8:	4e08      	ldr	r6, [pc, #32]	; (802570c <__libc_init_array+0x44>)
 80256ea:	1b76      	subs	r6, r6, r5
 80256ec:	10b6      	asrs	r6, r6, #2
 80256ee:	d006      	beq.n	80256fe <__libc_init_array+0x36>
 80256f0:	2400      	movs	r4, #0
 80256f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80256f6:	3401      	adds	r4, #1
 80256f8:	4798      	blx	r3
 80256fa:	42a6      	cmp	r6, r4
 80256fc:	d1f9      	bne.n	80256f2 <__libc_init_array+0x2a>
 80256fe:	bd70      	pop	{r4, r5, r6, pc}
 8025700:	08036244 	.word	0x08036244
 8025704:	08036244 	.word	0x08036244
 8025708:	08036244 	.word	0x08036244
 802570c:	0803624c 	.word	0x0803624c

08025710 <malloc>:
 8025710:	f240 0308 	movw	r3, #8
 8025714:	4601      	mov	r1, r0
 8025716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802571a:	6818      	ldr	r0, [r3, #0]
 802571c:	f000 b808 	b.w	8025730 <_malloc_r>

08025720 <free>:
 8025720:	f240 0308 	movw	r3, #8
 8025724:	4601      	mov	r1, r0
 8025726:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802572a:	6818      	ldr	r0, [r3, #0]
 802572c:	f004 bcbe 	b.w	802a0ac <_free_r>

08025730 <_malloc_r>:
 8025730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025734:	f101 040b 	add.w	r4, r1, #11
 8025738:	2c16      	cmp	r4, #22
 802573a:	4605      	mov	r5, r0
 802573c:	d92c      	bls.n	8025798 <_malloc_r+0x68>
 802573e:	f024 0407 	bic.w	r4, r4, #7
 8025742:	0fe3      	lsrs	r3, r4, #31
 8025744:	428c      	cmp	r4, r1
 8025746:	bf2c      	ite	cs
 8025748:	4619      	movcs	r1, r3
 802574a:	f043 0101 	orrcc.w	r1, r3, #1
 802574e:	2900      	cmp	r1, #0
 8025750:	d12b      	bne.n	80257aa <_malloc_r+0x7a>
 8025752:	4628      	mov	r0, r5
 8025754:	f7f8 fe1a 	bl	801e38c <__malloc_lock>
 8025758:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 802575c:	d22b      	bcs.n	80257b6 <_malloc_r+0x86>
 802575e:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8025762:	4e7e      	ldr	r6, [pc, #504]	; (802595c <_malloc_r+0x22c>)
 8025764:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 8025768:	68d3      	ldr	r3, [r2, #12]
 802576a:	4293      	cmp	r3, r2
 802576c:	f000 822b 	beq.w	8025bc6 <_malloc_r+0x496>
 8025770:	685c      	ldr	r4, [r3, #4]
 8025772:	f103 0708 	add.w	r7, r3, #8
 8025776:	68da      	ldr	r2, [r3, #12]
 8025778:	4628      	mov	r0, r5
 802577a:	f024 0403 	bic.w	r4, r4, #3
 802577e:	6899      	ldr	r1, [r3, #8]
 8025780:	191b      	adds	r3, r3, r4
 8025782:	685c      	ldr	r4, [r3, #4]
 8025784:	60ca      	str	r2, [r1, #12]
 8025786:	f044 0401 	orr.w	r4, r4, #1
 802578a:	6091      	str	r1, [r2, #8]
 802578c:	605c      	str	r4, [r3, #4]
 802578e:	f7f8 fe07 	bl	801e3a0 <__malloc_unlock>
 8025792:	4638      	mov	r0, r7
 8025794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025798:	2300      	movs	r3, #0
 802579a:	2410      	movs	r4, #16
 802579c:	428c      	cmp	r4, r1
 802579e:	bf2c      	ite	cs
 80257a0:	4619      	movcs	r1, r3
 80257a2:	f043 0101 	orrcc.w	r1, r3, #1
 80257a6:	2900      	cmp	r1, #0
 80257a8:	d0d3      	beq.n	8025752 <_malloc_r+0x22>
 80257aa:	2700      	movs	r7, #0
 80257ac:	230c      	movs	r3, #12
 80257ae:	4638      	mov	r0, r7
 80257b0:	602b      	str	r3, [r5, #0]
 80257b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257b6:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 80257ba:	bf04      	itt	eq
 80257bc:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 80257c0:	ea4f 01cc 	moveq.w	r1, ip, lsl #3
 80257c4:	f040 8083 	bne.w	80258ce <_malloc_r+0x19e>
 80257c8:	4e64      	ldr	r6, [pc, #400]	; (802595c <_malloc_r+0x22c>)
 80257ca:	1871      	adds	r1, r6, r1
 80257cc:	68cf      	ldr	r7, [r1, #12]
 80257ce:	42b9      	cmp	r1, r7
 80257d0:	d106      	bne.n	80257e0 <_malloc_r+0xb0>
 80257d2:	e00d      	b.n	80257f0 <_malloc_r+0xc0>
 80257d4:	2a00      	cmp	r2, #0
 80257d6:	f280 816c 	bge.w	8025ab2 <_malloc_r+0x382>
 80257da:	68ff      	ldr	r7, [r7, #12]
 80257dc:	42b9      	cmp	r1, r7
 80257de:	d007      	beq.n	80257f0 <_malloc_r+0xc0>
 80257e0:	687b      	ldr	r3, [r7, #4]
 80257e2:	f023 0303 	bic.w	r3, r3, #3
 80257e6:	1b1a      	subs	r2, r3, r4
 80257e8:	2a0f      	cmp	r2, #15
 80257ea:	ddf3      	ble.n	80257d4 <_malloc_r+0xa4>
 80257ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80257f0:	f10c 0c01 	add.w	ip, ip, #1
 80257f4:	4859      	ldr	r0, [pc, #356]	; (802595c <_malloc_r+0x22c>)
 80257f6:	6937      	ldr	r7, [r6, #16]
 80257f8:	f100 0308 	add.w	r3, r0, #8
 80257fc:	429f      	cmp	r7, r3
 80257fe:	bf08      	it	eq
 8025800:	6841      	ldreq	r1, [r0, #4]
 8025802:	d024      	beq.n	802584e <_malloc_r+0x11e>
 8025804:	6879      	ldr	r1, [r7, #4]
 8025806:	f021 0103 	bic.w	r1, r1, #3
 802580a:	1b0a      	subs	r2, r1, r4
 802580c:	2a0f      	cmp	r2, #15
 802580e:	f300 81aa 	bgt.w	8025b66 <_malloc_r+0x436>
 8025812:	2a00      	cmp	r2, #0
 8025814:	6143      	str	r3, [r0, #20]
 8025816:	6103      	str	r3, [r0, #16]
 8025818:	f280 8093 	bge.w	8025942 <_malloc_r+0x212>
 802581c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8025820:	f080 8166 	bcs.w	8025af0 <_malloc_r+0x3c0>
 8025824:	08c9      	lsrs	r1, r1, #3
 8025826:	f04f 0e01 	mov.w	lr, #1
 802582a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 802582e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8025832:	1089      	asrs	r1, r1, #2
 8025834:	fa0e f101 	lsl.w	r1, lr, r1
 8025838:	60fa      	str	r2, [r7, #12]
 802583a:	f8d2 e008 	ldr.w	lr, [r2, #8]
 802583e:	ea41 0108 	orr.w	r1, r1, r8
 8025842:	6041      	str	r1, [r0, #4]
 8025844:	f8c7 e008 	str.w	lr, [r7, #8]
 8025848:	f8ce 700c 	str.w	r7, [lr, #12]
 802584c:	6097      	str	r7, [r2, #8]
 802584e:	2701      	movs	r7, #1
 8025850:	ea4f 02ac 	mov.w	r2, ip, asr #2
 8025854:	4097      	lsls	r7, r2
 8025856:	428f      	cmp	r7, r1
 8025858:	f200 8082 	bhi.w	8025960 <_malloc_r+0x230>
 802585c:	4239      	tst	r1, r7
 802585e:	d106      	bne.n	802586e <_malloc_r+0x13e>
 8025860:	f02c 0c03 	bic.w	ip, ip, #3
 8025864:	007f      	lsls	r7, r7, #1
 8025866:	f10c 0c04 	add.w	ip, ip, #4
 802586a:	4239      	tst	r1, r7
 802586c:	d0fa      	beq.n	8025864 <_malloc_r+0x134>
 802586e:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 8025872:	46e0      	mov	r8, ip
 8025874:	46ce      	mov	lr, r9
 8025876:	f8de 200c 	ldr.w	r2, [lr, #12]
 802587a:	4596      	cmp	lr, r2
 802587c:	d107      	bne.n	802588e <_malloc_r+0x15e>
 802587e:	e183      	b.n	8025b88 <_malloc_r+0x458>
 8025880:	2900      	cmp	r1, #0
 8025882:	f280 81aa 	bge.w	8025bda <_malloc_r+0x4aa>
 8025886:	68d2      	ldr	r2, [r2, #12]
 8025888:	4596      	cmp	lr, r2
 802588a:	f000 817d 	beq.w	8025b88 <_malloc_r+0x458>
 802588e:	6850      	ldr	r0, [r2, #4]
 8025890:	f020 0003 	bic.w	r0, r0, #3
 8025894:	1b01      	subs	r1, r0, r4
 8025896:	290f      	cmp	r1, #15
 8025898:	ddf2      	ble.n	8025880 <_malloc_r+0x150>
 802589a:	4617      	mov	r7, r2
 802589c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80258a0:	1910      	adds	r0, r2, r4
 80258a2:	f041 0801 	orr.w	r8, r1, #1
 80258a6:	f857 cf08 	ldr.w	ip, [r7, #8]!
 80258aa:	f044 0401 	orr.w	r4, r4, #1
 80258ae:	5041      	str	r1, [r0, r1]
 80258b0:	6054      	str	r4, [r2, #4]
 80258b2:	f8cc e00c 	str.w	lr, [ip, #12]
 80258b6:	f8ce c008 	str.w	ip, [lr, #8]
 80258ba:	6170      	str	r0, [r6, #20]
 80258bc:	6130      	str	r0, [r6, #16]
 80258be:	60c3      	str	r3, [r0, #12]
 80258c0:	6083      	str	r3, [r0, #8]
 80258c2:	f8c0 8004 	str.w	r8, [r0, #4]
 80258c6:	4628      	mov	r0, r5
 80258c8:	f7f8 fd6a 	bl	801e3a0 <__malloc_unlock>
 80258cc:	e761      	b.n	8025792 <_malloc_r+0x62>
 80258ce:	f1bc 0f04 	cmp.w	ip, #4
 80258d2:	bf9e      	ittt	ls
 80258d4:	ea4f 1c94 	movls.w	ip, r4, lsr #6
 80258d8:	f10c 0c38 	addls.w	ip, ip, #56	; 0x38
 80258dc:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80258e0:	f67f af72 	bls.w	80257c8 <_malloc_r+0x98>
 80258e4:	f1bc 0f14 	cmp.w	ip, #20
 80258e8:	bf9c      	itt	ls
 80258ea:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 80258ee:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80258f2:	f67f af69 	bls.w	80257c8 <_malloc_r+0x98>
 80258f6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 80258fa:	bf9e      	ittt	ls
 80258fc:	ea4f 3c14 	movls.w	ip, r4, lsr #12
 8025900:	f10c 0c6e 	addls.w	ip, ip, #110	; 0x6e
 8025904:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 8025908:	f67f af5e 	bls.w	80257c8 <_malloc_r+0x98>
 802590c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8025910:	bf9e      	ittt	ls
 8025912:	ea4f 3cd4 	movls.w	ip, r4, lsr #15
 8025916:	f10c 0c77 	addls.w	ip, ip, #119	; 0x77
 802591a:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 802591e:	f67f af53 	bls.w	80257c8 <_malloc_r+0x98>
 8025922:	f240 5354 	movw	r3, #1364	; 0x554
 8025926:	459c      	cmp	ip, r3
 8025928:	bf95      	itete	ls
 802592a:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 802592e:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8025932:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 8025936:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 802593a:	bf98      	it	ls
 802593c:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 8025940:	e742      	b.n	80257c8 <_malloc_r+0x98>
 8025942:	187b      	adds	r3, r7, r1
 8025944:	4628      	mov	r0, r5
 8025946:	3708      	adds	r7, #8
 8025948:	685a      	ldr	r2, [r3, #4]
 802594a:	f042 0201 	orr.w	r2, r2, #1
 802594e:	605a      	str	r2, [r3, #4]
 8025950:	f7f8 fd26 	bl	801e3a0 <__malloc_unlock>
 8025954:	4638      	mov	r0, r7
 8025956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802595a:	bf00      	nop
 802595c:	20000438 	.word	0x20000438
 8025960:	68b7      	ldr	r7, [r6, #8]
 8025962:	687b      	ldr	r3, [r7, #4]
 8025964:	f023 0803 	bic.w	r8, r3, #3
 8025968:	4544      	cmp	r4, r8
 802596a:	ebc4 0208 	rsb	r2, r4, r8
 802596e:	bf94      	ite	ls
 8025970:	2300      	movls	r3, #0
 8025972:	2301      	movhi	r3, #1
 8025974:	2a0f      	cmp	r2, #15
 8025976:	bfd8      	it	le
 8025978:	f043 0301 	orrle.w	r3, r3, #1
 802597c:	2b00      	cmp	r3, #0
 802597e:	f000 80a8 	beq.w	8025ad2 <_malloc_r+0x3a2>
 8025982:	4bb4      	ldr	r3, [pc, #720]	; (8025c54 <_malloc_r+0x524>)
 8025984:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8025c58 <_malloc_r+0x528>
 8025988:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 802598c:	f8da 3000 	ldr.w	r3, [sl]
 8025990:	3201      	adds	r2, #1
 8025992:	4423      	add	r3, r4
 8025994:	bf08      	it	eq
 8025996:	f103 0b10 	addeq.w	fp, r3, #16
 802599a:	d006      	beq.n	80259aa <_malloc_r+0x27a>
 802599c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80259a0:	330f      	adds	r3, #15
 80259a2:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 80259a6:	f023 0b1f 	bic.w	fp, r3, #31
 80259aa:	4628      	mov	r0, r5
 80259ac:	4659      	mov	r1, fp
 80259ae:	f7f8 fc83 	bl	801e2b8 <_sbrk_r>
 80259b2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80259b6:	4681      	mov	r9, r0
 80259b8:	f000 813b 	beq.w	8025c32 <_malloc_r+0x502>
 80259bc:	eb07 0208 	add.w	r2, r7, r8
 80259c0:	4282      	cmp	r2, r0
 80259c2:	f200 8119 	bhi.w	8025bf8 <_malloc_r+0x4c8>
 80259c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80259ca:	454a      	cmp	r2, r9
 80259cc:	445b      	add	r3, fp
 80259ce:	f8ca 3004 	str.w	r3, [sl, #4]
 80259d2:	f000 8133 	beq.w	8025c3c <_malloc_r+0x50c>
 80259d6:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 80259da:	4628      	mov	r0, r5
 80259dc:	3101      	adds	r1, #1
 80259de:	bf17      	itett	ne
 80259e0:	ebc2 0209 	rsbne	r2, r2, r9
 80259e4:	4b9b      	ldreq	r3, [pc, #620]	; (8025c54 <_malloc_r+0x524>)
 80259e6:	189b      	addne	r3, r3, r2
 80259e8:	f8ca 3004 	strne.w	r3, [sl, #4]
 80259ec:	bf08      	it	eq
 80259ee:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 80259f2:	f019 0307 	ands.w	r3, r9, #7
 80259f6:	bf1f      	itttt	ne
 80259f8:	f1c3 0208 	rsbne	r2, r3, #8
 80259fc:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8025a00:	4491      	addne	r9, r2
 8025a02:	f103 0208 	addne.w	r2, r3, #8
 8025a06:	eb09 030b 	add.w	r3, r9, fp
 8025a0a:	bf08      	it	eq
 8025a0c:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8025a10:	051b      	lsls	r3, r3, #20
 8025a12:	0d1b      	lsrs	r3, r3, #20
 8025a14:	ebc3 0b02 	rsb	fp, r3, r2
 8025a18:	4659      	mov	r1, fp
 8025a1a:	f7f8 fc4d 	bl	801e2b8 <_sbrk_r>
 8025a1e:	1c43      	adds	r3, r0, #1
 8025a20:	f000 8124 	beq.w	8025c6c <_malloc_r+0x53c>
 8025a24:	ebc9 0200 	rsb	r2, r9, r0
 8025a28:	445a      	add	r2, fp
 8025a2a:	f042 0201 	orr.w	r2, r2, #1
 8025a2e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8025a32:	42b7      	cmp	r7, r6
 8025a34:	f8c6 9008 	str.w	r9, [r6, #8]
 8025a38:	445b      	add	r3, fp
 8025a3a:	f8c9 2004 	str.w	r2, [r9, #4]
 8025a3e:	f8ca 3004 	str.w	r3, [sl, #4]
 8025a42:	d016      	beq.n	8025a72 <_malloc_r+0x342>
 8025a44:	f1b8 0f0f 	cmp.w	r8, #15
 8025a48:	f240 80ed 	bls.w	8025c26 <_malloc_r+0x4f6>
 8025a4c:	f1a8 020c 	sub.w	r2, r8, #12
 8025a50:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8025a54:	f022 0207 	bic.w	r2, r2, #7
 8025a58:	2005      	movs	r0, #5
 8025a5a:	18b9      	adds	r1, r7, r2
 8025a5c:	2a0f      	cmp	r2, #15
 8025a5e:	f00e 0e01 	and.w	lr, lr, #1
 8025a62:	ea42 0e0e 	orr.w	lr, r2, lr
 8025a66:	f8c7 e004 	str.w	lr, [r7, #4]
 8025a6a:	6048      	str	r0, [r1, #4]
 8025a6c:	6088      	str	r0, [r1, #8]
 8025a6e:	f200 80f5 	bhi.w	8025c5c <_malloc_r+0x52c>
 8025a72:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8025a76:	68b7      	ldr	r7, [r6, #8]
 8025a78:	4293      	cmp	r3, r2
 8025a7a:	bf84      	itt	hi
 8025a7c:	4a76      	ldrhi	r2, [pc, #472]	; (8025c58 <_malloc_r+0x528>)
 8025a7e:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8025a80:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8025a84:	4293      	cmp	r3, r2
 8025a86:	bf84      	itt	hi
 8025a88:	4a73      	ldrhi	r2, [pc, #460]	; (8025c58 <_malloc_r+0x528>)
 8025a8a:	6313      	strhi	r3, [r2, #48]	; 0x30
 8025a8c:	687b      	ldr	r3, [r7, #4]
 8025a8e:	f023 0303 	bic.w	r3, r3, #3
 8025a92:	429c      	cmp	r4, r3
 8025a94:	ebc4 0203 	rsb	r2, r4, r3
 8025a98:	bf94      	ite	ls
 8025a9a:	2300      	movls	r3, #0
 8025a9c:	2301      	movhi	r3, #1
 8025a9e:	2a0f      	cmp	r2, #15
 8025aa0:	bfd8      	it	le
 8025aa2:	f043 0301 	orrle.w	r3, r3, #1
 8025aa6:	b1a3      	cbz	r3, 8025ad2 <_malloc_r+0x3a2>
 8025aa8:	4628      	mov	r0, r5
 8025aaa:	2700      	movs	r7, #0
 8025aac:	f7f8 fc78 	bl	801e3a0 <__malloc_unlock>
 8025ab0:	e66f      	b.n	8025792 <_malloc_r+0x62>
 8025ab2:	18fb      	adds	r3, r7, r3
 8025ab4:	68fa      	ldr	r2, [r7, #12]
 8025ab6:	68b9      	ldr	r1, [r7, #8]
 8025ab8:	4628      	mov	r0, r5
 8025aba:	685c      	ldr	r4, [r3, #4]
 8025abc:	3708      	adds	r7, #8
 8025abe:	60ca      	str	r2, [r1, #12]
 8025ac0:	f044 0401 	orr.w	r4, r4, #1
 8025ac4:	6091      	str	r1, [r2, #8]
 8025ac6:	605c      	str	r4, [r3, #4]
 8025ac8:	f7f8 fc6a 	bl	801e3a0 <__malloc_unlock>
 8025acc:	4638      	mov	r0, r7
 8025ace:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ad2:	193b      	adds	r3, r7, r4
 8025ad4:	f042 0201 	orr.w	r2, r2, #1
 8025ad8:	4628      	mov	r0, r5
 8025ada:	f044 0401 	orr.w	r4, r4, #1
 8025ade:	60b3      	str	r3, [r6, #8]
 8025ae0:	607c      	str	r4, [r7, #4]
 8025ae2:	3708      	adds	r7, #8
 8025ae4:	605a      	str	r2, [r3, #4]
 8025ae6:	f7f8 fc5b 	bl	801e3a0 <__malloc_unlock>
 8025aea:	4638      	mov	r0, r7
 8025aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025af0:	0988      	lsrs	r0, r1, #6
 8025af2:	0a4a      	lsrs	r2, r1, #9
 8025af4:	3038      	adds	r0, #56	; 0x38
 8025af6:	2a04      	cmp	r2, #4
 8025af8:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 8025afc:	d91c      	bls.n	8025b38 <_malloc_r+0x408>
 8025afe:	2a14      	cmp	r2, #20
 8025b00:	bf9c      	itt	ls
 8025b02:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 8025b06:	ea4f 0ec0 	movls.w	lr, r0, lsl #3
 8025b0a:	d915      	bls.n	8025b38 <_malloc_r+0x408>
 8025b0c:	0b08      	lsrs	r0, r1, #12
 8025b0e:	306e      	adds	r0, #110	; 0x6e
 8025b10:	2a54      	cmp	r2, #84	; 0x54
 8025b12:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 8025b16:	d90f      	bls.n	8025b38 <_malloc_r+0x408>
 8025b18:	0bc8      	lsrs	r0, r1, #15
 8025b1a:	3077      	adds	r0, #119	; 0x77
 8025b1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8025b20:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 8025b24:	d908      	bls.n	8025b38 <_malloc_r+0x408>
 8025b26:	f240 5054 	movw	r0, #1364	; 0x554
 8025b2a:	4282      	cmp	r2, r0
 8025b2c:	f200 80a7 	bhi.w	8025c7e <_malloc_r+0x54e>
 8025b30:	0c88      	lsrs	r0, r1, #18
 8025b32:	307c      	adds	r0, #124	; 0x7c
 8025b34:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 8025b38:	44b6      	add	lr, r6
 8025b3a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8025c54 <_malloc_r+0x524>
 8025b3e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8025b42:	4572      	cmp	r2, lr
 8025b44:	d103      	bne.n	8025b4e <_malloc_r+0x41e>
 8025b46:	e060      	b.n	8025c0a <_malloc_r+0x4da>
 8025b48:	6892      	ldr	r2, [r2, #8]
 8025b4a:	4596      	cmp	lr, r2
 8025b4c:	d004      	beq.n	8025b58 <_malloc_r+0x428>
 8025b4e:	6850      	ldr	r0, [r2, #4]
 8025b50:	f020 0003 	bic.w	r0, r0, #3
 8025b54:	4281      	cmp	r1, r0
 8025b56:	d3f7      	bcc.n	8025b48 <_malloc_r+0x418>
 8025b58:	68d0      	ldr	r0, [r2, #12]
 8025b5a:	6871      	ldr	r1, [r6, #4]
 8025b5c:	60f8      	str	r0, [r7, #12]
 8025b5e:	60ba      	str	r2, [r7, #8]
 8025b60:	60d7      	str	r7, [r2, #12]
 8025b62:	6087      	str	r7, [r0, #8]
 8025b64:	e673      	b.n	802584e <_malloc_r+0x11e>
 8025b66:	1939      	adds	r1, r7, r4
 8025b68:	f042 0601 	orr.w	r6, r2, #1
 8025b6c:	6141      	str	r1, [r0, #20]
 8025b6e:	f044 0401 	orr.w	r4, r4, #1
 8025b72:	6101      	str	r1, [r0, #16]
 8025b74:	4628      	mov	r0, r5
 8025b76:	607c      	str	r4, [r7, #4]
 8025b78:	3708      	adds	r7, #8
 8025b7a:	60cb      	str	r3, [r1, #12]
 8025b7c:	608b      	str	r3, [r1, #8]
 8025b7e:	604e      	str	r6, [r1, #4]
 8025b80:	508a      	str	r2, [r1, r2]
 8025b82:	f7f8 fc0d 	bl	801e3a0 <__malloc_unlock>
 8025b86:	e604      	b.n	8025792 <_malloc_r+0x62>
 8025b88:	f108 0801 	add.w	r8, r8, #1
 8025b8c:	f10e 0e08 	add.w	lr, lr, #8
 8025b90:	f018 0f03 	tst.w	r8, #3
 8025b94:	f47f ae6f 	bne.w	8025876 <_malloc_r+0x146>
 8025b98:	464a      	mov	r2, r9
 8025b9a:	f01c 0f03 	tst.w	ip, #3
 8025b9e:	f1a2 0108 	sub.w	r1, r2, #8
 8025ba2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025ba6:	d065      	beq.n	8025c74 <_malloc_r+0x544>
 8025ba8:	6812      	ldr	r2, [r2, #0]
 8025baa:	428a      	cmp	r2, r1
 8025bac:	d0f5      	beq.n	8025b9a <_malloc_r+0x46a>
 8025bae:	6872      	ldr	r2, [r6, #4]
 8025bb0:	007f      	lsls	r7, r7, #1
 8025bb2:	4297      	cmp	r7, r2
 8025bb4:	f63f aed4 	bhi.w	8025960 <_malloc_r+0x230>
 8025bb8:	2f00      	cmp	r7, #0
 8025bba:	f43f aed1 	beq.w	8025960 <_malloc_r+0x230>
 8025bbe:	4217      	tst	r7, r2
 8025bc0:	d061      	beq.n	8025c86 <_malloc_r+0x556>
 8025bc2:	46c4      	mov	ip, r8
 8025bc4:	e653      	b.n	802586e <_malloc_r+0x13e>
 8025bc6:	f103 0208 	add.w	r2, r3, #8
 8025bca:	695b      	ldr	r3, [r3, #20]
 8025bcc:	429a      	cmp	r2, r3
 8025bce:	bf08      	it	eq
 8025bd0:	f10c 0c02 	addeq.w	ip, ip, #2
 8025bd4:	f43f ae0e 	beq.w	80257f4 <_malloc_r+0xc4>
 8025bd8:	e5ca      	b.n	8025770 <_malloc_r+0x40>
 8025bda:	4617      	mov	r7, r2
 8025bdc:	1810      	adds	r0, r2, r0
 8025bde:	68d3      	ldr	r3, [r2, #12]
 8025be0:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8025be4:	6841      	ldr	r1, [r0, #4]
 8025be6:	60d3      	str	r3, [r2, #12]
 8025be8:	f041 0101 	orr.w	r1, r1, #1
 8025bec:	609a      	str	r2, [r3, #8]
 8025bee:	6041      	str	r1, [r0, #4]
 8025bf0:	4628      	mov	r0, r5
 8025bf2:	f7f8 fbd5 	bl	801e3a0 <__malloc_unlock>
 8025bf6:	e5cc      	b.n	8025792 <_malloc_r+0x62>
 8025bf8:	42b7      	cmp	r7, r6
 8025bfa:	f43f aee4 	beq.w	80259c6 <_malloc_r+0x296>
 8025bfe:	4b15      	ldr	r3, [pc, #84]	; (8025c54 <_malloc_r+0x524>)
 8025c00:	689f      	ldr	r7, [r3, #8]
 8025c02:	687b      	ldr	r3, [r7, #4]
 8025c04:	f023 0303 	bic.w	r3, r3, #3
 8025c08:	e743      	b.n	8025a92 <_malloc_r+0x362>
 8025c0a:	f04f 0901 	mov.w	r9, #1
 8025c0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8025c12:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8025c16:	4610      	mov	r0, r2
 8025c18:	fa09 fe0e 	lsl.w	lr, r9, lr
 8025c1c:	ea4e 0101 	orr.w	r1, lr, r1
 8025c20:	f8c8 1004 	str.w	r1, [r8, #4]
 8025c24:	e79a      	b.n	8025b5c <_malloc_r+0x42c>
 8025c26:	2301      	movs	r3, #1
 8025c28:	464f      	mov	r7, r9
 8025c2a:	f8c9 3004 	str.w	r3, [r9, #4]
 8025c2e:	2300      	movs	r3, #0
 8025c30:	e72f      	b.n	8025a92 <_malloc_r+0x362>
 8025c32:	68b7      	ldr	r7, [r6, #8]
 8025c34:	687b      	ldr	r3, [r7, #4]
 8025c36:	f023 0303 	bic.w	r3, r3, #3
 8025c3a:	e72a      	b.n	8025a92 <_malloc_r+0x362>
 8025c3c:	0511      	lsls	r1, r2, #20
 8025c3e:	0d09      	lsrs	r1, r1, #20
 8025c40:	2900      	cmp	r1, #0
 8025c42:	f47f aec8 	bne.w	80259d6 <_malloc_r+0x2a6>
 8025c46:	68b2      	ldr	r2, [r6, #8]
 8025c48:	eb0b 0108 	add.w	r1, fp, r8
 8025c4c:	f041 0101 	orr.w	r1, r1, #1
 8025c50:	6051      	str	r1, [r2, #4]
 8025c52:	e70e      	b.n	8025a72 <_malloc_r+0x342>
 8025c54:	20000438 	.word	0x20000438
 8025c58:	200009d4 	.word	0x200009d4
 8025c5c:	f107 0108 	add.w	r1, r7, #8
 8025c60:	4628      	mov	r0, r5
 8025c62:	f004 fa23 	bl	802a0ac <_free_r>
 8025c66:	4b0a      	ldr	r3, [pc, #40]	; (8025c90 <_malloc_r+0x560>)
 8025c68:	685b      	ldr	r3, [r3, #4]
 8025c6a:	e702      	b.n	8025a72 <_malloc_r+0x342>
 8025c6c:	2201      	movs	r2, #1
 8025c6e:	f04f 0b00 	mov.w	fp, #0
 8025c72:	e6dc      	b.n	8025a2e <_malloc_r+0x2fe>
 8025c74:	6872      	ldr	r2, [r6, #4]
 8025c76:	ea22 0207 	bic.w	r2, r2, r7
 8025c7a:	6072      	str	r2, [r6, #4]
 8025c7c:	e798      	b.n	8025bb0 <_malloc_r+0x480>
 8025c7e:	f44f 7e7c 	mov.w	lr, #1008	; 0x3f0
 8025c82:	207e      	movs	r0, #126	; 0x7e
 8025c84:	e758      	b.n	8025b38 <_malloc_r+0x408>
 8025c86:	007f      	lsls	r7, r7, #1
 8025c88:	f108 0804 	add.w	r8, r8, #4
 8025c8c:	e797      	b.n	8025bbe <_malloc_r+0x48e>
 8025c8e:	bf00      	nop
 8025c90:	200009d4 	.word	0x200009d4

08025c94 <memchr>:
 8025c94:	0783      	lsls	r3, r0, #30
 8025c96:	b2c9      	uxtb	r1, r1
 8025c98:	b470      	push	{r4, r5, r6}
 8025c9a:	d012      	beq.n	8025cc2 <memchr+0x2e>
 8025c9c:	2a00      	cmp	r2, #0
 8025c9e:	d039      	beq.n	8025d14 <memchr+0x80>
 8025ca0:	7803      	ldrb	r3, [r0, #0]
 8025ca2:	428b      	cmp	r3, r1
 8025ca4:	d025      	beq.n	8025cf2 <memchr+0x5e>
 8025ca6:	4603      	mov	r3, r0
 8025ca8:	3a01      	subs	r2, #1
 8025caa:	e006      	b.n	8025cba <memchr+0x26>
 8025cac:	2a00      	cmp	r2, #0
 8025cae:	d031      	beq.n	8025d14 <memchr+0x80>
 8025cb0:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8025cb4:	3a01      	subs	r2, #1
 8025cb6:	428c      	cmp	r4, r1
 8025cb8:	d01b      	beq.n	8025cf2 <memchr+0x5e>
 8025cba:	3001      	adds	r0, #1
 8025cbc:	f010 0f03 	tst.w	r0, #3
 8025cc0:	d1f4      	bne.n	8025cac <memchr+0x18>
 8025cc2:	2a03      	cmp	r2, #3
 8025cc4:	bf84      	itt	hi
 8025cc6:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8025cca:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8025cce:	d812      	bhi.n	8025cf6 <memchr+0x62>
 8025cd0:	2a00      	cmp	r2, #0
 8025cd2:	d01f      	beq.n	8025d14 <memchr+0x80>
 8025cd4:	7803      	ldrb	r3, [r0, #0]
 8025cd6:	428b      	cmp	r3, r1
 8025cd8:	d00b      	beq.n	8025cf2 <memchr+0x5e>
 8025cda:	1c43      	adds	r3, r0, #1
 8025cdc:	1882      	adds	r2, r0, r2
 8025cde:	e003      	b.n	8025ce8 <memchr+0x54>
 8025ce0:	f813 4b01 	ldrb.w	r4, [r3], #1
 8025ce4:	428c      	cmp	r4, r1
 8025ce6:	d004      	beq.n	8025cf2 <memchr+0x5e>
 8025ce8:	4293      	cmp	r3, r2
 8025cea:	f100 0001 	add.w	r0, r0, #1
 8025cee:	d1f7      	bne.n	8025ce0 <memchr+0x4c>
 8025cf0:	2000      	movs	r0, #0
 8025cf2:	bc70      	pop	{r4, r5, r6}
 8025cf4:	4770      	bx	lr
 8025cf6:	4604      	mov	r4, r0
 8025cf8:	3004      	adds	r0, #4
 8025cfa:	6823      	ldr	r3, [r4, #0]
 8025cfc:	4073      	eors	r3, r6
 8025cfe:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8025d02:	ea25 0303 	bic.w	r3, r5, r3
 8025d06:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8025d0a:	d105      	bne.n	8025d18 <memchr+0x84>
 8025d0c:	3a04      	subs	r2, #4
 8025d0e:	2a03      	cmp	r2, #3
 8025d10:	d8f1      	bhi.n	8025cf6 <memchr+0x62>
 8025d12:	e7dd      	b.n	8025cd0 <memchr+0x3c>
 8025d14:	4610      	mov	r0, r2
 8025d16:	e7ec      	b.n	8025cf2 <memchr+0x5e>
 8025d18:	4620      	mov	r0, r4
 8025d1a:	e7d9      	b.n	8025cd0 <memchr+0x3c>

08025d1c <memcmp>:
 8025d1c:	2a03      	cmp	r2, #3
 8025d1e:	b470      	push	{r4, r5, r6}
 8025d20:	d926      	bls.n	8025d70 <memcmp+0x54>
 8025d22:	ea41 0500 	orr.w	r5, r1, r0
 8025d26:	4603      	mov	r3, r0
 8025d28:	07ad      	lsls	r5, r5, #30
 8025d2a:	460c      	mov	r4, r1
 8025d2c:	d013      	beq.n	8025d56 <memcmp+0x3a>
 8025d2e:	7805      	ldrb	r5, [r0, #0]
 8025d30:	3a01      	subs	r2, #1
 8025d32:	780c      	ldrb	r4, [r1, #0]
 8025d34:	2300      	movs	r3, #0
 8025d36:	42a5      	cmp	r5, r4
 8025d38:	d004      	beq.n	8025d44 <memcmp+0x28>
 8025d3a:	e01d      	b.n	8025d78 <memcmp+0x5c>
 8025d3c:	7865      	ldrb	r5, [r4, #1]
 8025d3e:	5ccc      	ldrb	r4, [r1, r3]
 8025d40:	42a5      	cmp	r5, r4
 8025d42:	d119      	bne.n	8025d78 <memcmp+0x5c>
 8025d44:	429a      	cmp	r2, r3
 8025d46:	eb00 0403 	add.w	r4, r0, r3
 8025d4a:	f103 0301 	add.w	r3, r3, #1
 8025d4e:	d1f5      	bne.n	8025d3c <memcmp+0x20>
 8025d50:	2000      	movs	r0, #0
 8025d52:	bc70      	pop	{r4, r5, r6}
 8025d54:	4770      	bx	lr
 8025d56:	4621      	mov	r1, r4
 8025d58:	4618      	mov	r0, r3
 8025d5a:	3404      	adds	r4, #4
 8025d5c:	3304      	adds	r3, #4
 8025d5e:	6806      	ldr	r6, [r0, #0]
 8025d60:	680d      	ldr	r5, [r1, #0]
 8025d62:	42ae      	cmp	r6, r5
 8025d64:	d104      	bne.n	8025d70 <memcmp+0x54>
 8025d66:	3a04      	subs	r2, #4
 8025d68:	2a03      	cmp	r2, #3
 8025d6a:	d8f4      	bhi.n	8025d56 <memcmp+0x3a>
 8025d6c:	4621      	mov	r1, r4
 8025d6e:	4618      	mov	r0, r3
 8025d70:	2a00      	cmp	r2, #0
 8025d72:	d1dc      	bne.n	8025d2e <memcmp+0x12>
 8025d74:	4610      	mov	r0, r2
 8025d76:	e7ec      	b.n	8025d52 <memcmp+0x36>
 8025d78:	1b28      	subs	r0, r5, r4
 8025d7a:	e7ea      	b.n	8025d52 <memcmp+0x36>

08025d7c <memcpy>:
 8025d7c:	2a0f      	cmp	r2, #15
 8025d7e:	b4f0      	push	{r4, r5, r6, r7}
 8025d80:	bf98      	it	ls
 8025d82:	4603      	movls	r3, r0
 8025d84:	d931      	bls.n	8025dea <memcpy+0x6e>
 8025d86:	ea41 0300 	orr.w	r3, r1, r0
 8025d8a:	079b      	lsls	r3, r3, #30
 8025d8c:	d136      	bne.n	8025dfc <memcpy+0x80>
 8025d8e:	460c      	mov	r4, r1
 8025d90:	4603      	mov	r3, r0
 8025d92:	4615      	mov	r5, r2
 8025d94:	6826      	ldr	r6, [r4, #0]
 8025d96:	3d10      	subs	r5, #16
 8025d98:	601e      	str	r6, [r3, #0]
 8025d9a:	6866      	ldr	r6, [r4, #4]
 8025d9c:	605e      	str	r6, [r3, #4]
 8025d9e:	68a6      	ldr	r6, [r4, #8]
 8025da0:	609e      	str	r6, [r3, #8]
 8025da2:	68e6      	ldr	r6, [r4, #12]
 8025da4:	3410      	adds	r4, #16
 8025da6:	60de      	str	r6, [r3, #12]
 8025da8:	3310      	adds	r3, #16
 8025daa:	2d0f      	cmp	r5, #15
 8025dac:	d8f2      	bhi.n	8025d94 <memcpy+0x18>
 8025dae:	f1a2 0410 	sub.w	r4, r2, #16
 8025db2:	f002 020f 	and.w	r2, r2, #15
 8025db6:	f024 040f 	bic.w	r4, r4, #15
 8025dba:	3410      	adds	r4, #16
 8025dbc:	2a03      	cmp	r2, #3
 8025dbe:	eb00 0304 	add.w	r3, r0, r4
 8025dc2:	4421      	add	r1, r4
 8025dc4:	d911      	bls.n	8025dea <memcpy+0x6e>
 8025dc6:	460e      	mov	r6, r1
 8025dc8:	461d      	mov	r5, r3
 8025dca:	4614      	mov	r4, r2
 8025dcc:	f856 7b04 	ldr.w	r7, [r6], #4
 8025dd0:	3c04      	subs	r4, #4
 8025dd2:	2c03      	cmp	r4, #3
 8025dd4:	f845 7b04 	str.w	r7, [r5], #4
 8025dd8:	d8f8      	bhi.n	8025dcc <memcpy+0x50>
 8025dda:	1f14      	subs	r4, r2, #4
 8025ddc:	f002 0203 	and.w	r2, r2, #3
 8025de0:	f024 0403 	bic.w	r4, r4, #3
 8025de4:	3404      	adds	r4, #4
 8025de6:	1909      	adds	r1, r1, r4
 8025de8:	191b      	adds	r3, r3, r4
 8025dea:	b12a      	cbz	r2, 8025df8 <memcpy+0x7c>
 8025dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025df0:	3a01      	subs	r2, #1
 8025df2:	f803 4b01 	strb.w	r4, [r3], #1
 8025df6:	d1f9      	bne.n	8025dec <memcpy+0x70>
 8025df8:	bcf0      	pop	{r4, r5, r6, r7}
 8025dfa:	4770      	bx	lr
 8025dfc:	4603      	mov	r3, r0
 8025dfe:	e7f5      	b.n	8025dec <memcpy+0x70>

08025e00 <memmove>:
 8025e00:	4288      	cmp	r0, r1
 8025e02:	b4f0      	push	{r4, r5, r6, r7}
 8025e04:	d912      	bls.n	8025e2c <memmove+0x2c>
 8025e06:	188d      	adds	r5, r1, r2
 8025e08:	42a8      	cmp	r0, r5
 8025e0a:	d20f      	bcs.n	8025e2c <memmove+0x2c>
 8025e0c:	b162      	cbz	r2, 8025e28 <memmove+0x28>
 8025e0e:	4613      	mov	r3, r2
 8025e10:	1882      	adds	r2, r0, r2
 8025e12:	4259      	negs	r1, r3
 8025e14:	186d      	adds	r5, r5, r1
 8025e16:	1852      	adds	r2, r2, r1
 8025e18:	18ec      	adds	r4, r5, r3
 8025e1a:	18d1      	adds	r1, r2, r3
 8025e1c:	3b01      	subs	r3, #1
 8025e1e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8025e22:	f801 4c01 	strb.w	r4, [r1, #-1]
 8025e26:	d1f7      	bne.n	8025e18 <memmove+0x18>
 8025e28:	bcf0      	pop	{r4, r5, r6, r7}
 8025e2a:	4770      	bx	lr
 8025e2c:	2a0f      	cmp	r2, #15
 8025e2e:	bf98      	it	ls
 8025e30:	4603      	movls	r3, r0
 8025e32:	d931      	bls.n	8025e98 <memmove+0x98>
 8025e34:	ea41 0300 	orr.w	r3, r1, r0
 8025e38:	079b      	lsls	r3, r3, #30
 8025e3a:	d13c      	bne.n	8025eb6 <memmove+0xb6>
 8025e3c:	460c      	mov	r4, r1
 8025e3e:	4603      	mov	r3, r0
 8025e40:	4615      	mov	r5, r2
 8025e42:	6826      	ldr	r6, [r4, #0]
 8025e44:	3d10      	subs	r5, #16
 8025e46:	601e      	str	r6, [r3, #0]
 8025e48:	6866      	ldr	r6, [r4, #4]
 8025e4a:	605e      	str	r6, [r3, #4]
 8025e4c:	68a6      	ldr	r6, [r4, #8]
 8025e4e:	609e      	str	r6, [r3, #8]
 8025e50:	68e6      	ldr	r6, [r4, #12]
 8025e52:	3410      	adds	r4, #16
 8025e54:	60de      	str	r6, [r3, #12]
 8025e56:	3310      	adds	r3, #16
 8025e58:	2d0f      	cmp	r5, #15
 8025e5a:	d8f2      	bhi.n	8025e42 <memmove+0x42>
 8025e5c:	f1a2 0410 	sub.w	r4, r2, #16
 8025e60:	f002 020f 	and.w	r2, r2, #15
 8025e64:	f024 040f 	bic.w	r4, r4, #15
 8025e68:	3410      	adds	r4, #16
 8025e6a:	2a03      	cmp	r2, #3
 8025e6c:	eb00 0304 	add.w	r3, r0, r4
 8025e70:	4421      	add	r1, r4
 8025e72:	d911      	bls.n	8025e98 <memmove+0x98>
 8025e74:	460e      	mov	r6, r1
 8025e76:	461d      	mov	r5, r3
 8025e78:	4614      	mov	r4, r2
 8025e7a:	f856 7b04 	ldr.w	r7, [r6], #4
 8025e7e:	3c04      	subs	r4, #4
 8025e80:	2c03      	cmp	r4, #3
 8025e82:	f845 7b04 	str.w	r7, [r5], #4
 8025e86:	d8f8      	bhi.n	8025e7a <memmove+0x7a>
 8025e88:	1f14      	subs	r4, r2, #4
 8025e8a:	f002 0203 	and.w	r2, r2, #3
 8025e8e:	f024 0403 	bic.w	r4, r4, #3
 8025e92:	3404      	adds	r4, #4
 8025e94:	1909      	adds	r1, r1, r4
 8025e96:	191b      	adds	r3, r3, r4
 8025e98:	2a00      	cmp	r2, #0
 8025e9a:	d0c5      	beq.n	8025e28 <memmove+0x28>
 8025e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025ea0:	3a01      	subs	r2, #1
 8025ea2:	f803 4b01 	strb.w	r4, [r3], #1
 8025ea6:	d0bf      	beq.n	8025e28 <memmove+0x28>
 8025ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025eac:	3a01      	subs	r2, #1
 8025eae:	f803 4b01 	strb.w	r4, [r3], #1
 8025eb2:	d1f3      	bne.n	8025e9c <memmove+0x9c>
 8025eb4:	e7b8      	b.n	8025e28 <memmove+0x28>
 8025eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025eba:	4603      	mov	r3, r0
 8025ebc:	3a01      	subs	r2, #1
 8025ebe:	f803 4b01 	strb.w	r4, [r3], #1
 8025ec2:	d1f1      	bne.n	8025ea8 <memmove+0xa8>
 8025ec4:	e7b0      	b.n	8025e28 <memmove+0x28>
 8025ec6:	bf00      	nop

08025ec8 <memset>:
 8025ec8:	f010 0f03 	tst.w	r0, #3
 8025ecc:	4603      	mov	r3, r0
 8025ece:	b470      	push	{r4, r5, r6}
 8025ed0:	d041      	beq.n	8025f56 <memset+0x8e>
 8025ed2:	2a00      	cmp	r2, #0
 8025ed4:	d03d      	beq.n	8025f52 <memset+0x8a>
 8025ed6:	b2ce      	uxtb	r6, r1
 8025ed8:	e001      	b.n	8025ede <memset+0x16>
 8025eda:	2a00      	cmp	r2, #0
 8025edc:	d039      	beq.n	8025f52 <memset+0x8a>
 8025ede:	f803 6b01 	strb.w	r6, [r3], #1
 8025ee2:	1e54      	subs	r4, r2, #1
 8025ee4:	f013 0f03 	tst.w	r3, #3
 8025ee8:	4622      	mov	r2, r4
 8025eea:	461d      	mov	r5, r3
 8025eec:	d1f5      	bne.n	8025eda <memset+0x12>
 8025eee:	2c03      	cmp	r4, #3
 8025ef0:	d929      	bls.n	8025f46 <memset+0x7e>
 8025ef2:	b2ca      	uxtb	r2, r1
 8025ef4:	2c0f      	cmp	r4, #15
 8025ef6:	bf84      	itt	hi
 8025ef8:	462b      	movhi	r3, r5
 8025efa:	4626      	movhi	r6, r4
 8025efc:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8025f00:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8025f04:	d911      	bls.n	8025f2a <memset+0x62>
 8025f06:	3e10      	subs	r6, #16
 8025f08:	601a      	str	r2, [r3, #0]
 8025f0a:	605a      	str	r2, [r3, #4]
 8025f0c:	609a      	str	r2, [r3, #8]
 8025f0e:	60da      	str	r2, [r3, #12]
 8025f10:	3310      	adds	r3, #16
 8025f12:	2e0f      	cmp	r6, #15
 8025f14:	d8f7      	bhi.n	8025f06 <memset+0x3e>
 8025f16:	f1a4 0310 	sub.w	r3, r4, #16
 8025f1a:	f004 040f 	and.w	r4, r4, #15
 8025f1e:	f023 030f 	bic.w	r3, r3, #15
 8025f22:	3310      	adds	r3, #16
 8025f24:	2c03      	cmp	r4, #3
 8025f26:	441d      	add	r5, r3
 8025f28:	d90d      	bls.n	8025f46 <memset+0x7e>
 8025f2a:	462e      	mov	r6, r5
 8025f2c:	4623      	mov	r3, r4
 8025f2e:	3b04      	subs	r3, #4
 8025f30:	f846 2b04 	str.w	r2, [r6], #4
 8025f34:	2b03      	cmp	r3, #3
 8025f36:	d8fa      	bhi.n	8025f2e <memset+0x66>
 8025f38:	1f23      	subs	r3, r4, #4
 8025f3a:	f004 0403 	and.w	r4, r4, #3
 8025f3e:	f023 0303 	bic.w	r3, r3, #3
 8025f42:	3304      	adds	r3, #4
 8025f44:	18ed      	adds	r5, r5, r3
 8025f46:	b2c9      	uxtb	r1, r1
 8025f48:	b11c      	cbz	r4, 8025f52 <memset+0x8a>
 8025f4a:	3c01      	subs	r4, #1
 8025f4c:	f805 1b01 	strb.w	r1, [r5], #1
 8025f50:	d1fb      	bne.n	8025f4a <memset+0x82>
 8025f52:	bc70      	pop	{r4, r5, r6}
 8025f54:	4770      	bx	lr
 8025f56:	4605      	mov	r5, r0
 8025f58:	4614      	mov	r4, r2
 8025f5a:	e7c8      	b.n	8025eee <memset+0x26>

08025f5c <_putc_r>:
 8025f5c:	b570      	push	{r4, r5, r6, lr}
 8025f5e:	4604      	mov	r4, r0
 8025f60:	460e      	mov	r6, r1
 8025f62:	4615      	mov	r5, r2
 8025f64:	b108      	cbz	r0, 8025f6a <_putc_r+0xe>
 8025f66:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8025f68:	b1c3      	cbz	r3, 8025f9c <_putc_r+0x40>
 8025f6a:	68ab      	ldr	r3, [r5, #8]
 8025f6c:	3b01      	subs	r3, #1
 8025f6e:	60ab      	str	r3, [r5, #8]
 8025f70:	2b00      	cmp	r3, #0
 8025f72:	db06      	blt.n	8025f82 <_putc_r+0x26>
 8025f74:	682b      	ldr	r3, [r5, #0]
 8025f76:	701e      	strb	r6, [r3, #0]
 8025f78:	682b      	ldr	r3, [r5, #0]
 8025f7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8025f7e:	602b      	str	r3, [r5, #0]
 8025f80:	bd70      	pop	{r4, r5, r6, pc}
 8025f82:	69aa      	ldr	r2, [r5, #24]
 8025f84:	4293      	cmp	r3, r2
 8025f86:	db0c      	blt.n	8025fa2 <_putc_r+0x46>
 8025f88:	682b      	ldr	r3, [r5, #0]
 8025f8a:	701e      	strb	r6, [r3, #0]
 8025f8c:	682b      	ldr	r3, [r5, #0]
 8025f8e:	7819      	ldrb	r1, [r3, #0]
 8025f90:	290a      	cmp	r1, #10
 8025f92:	d00d      	beq.n	8025fb0 <_putc_r+0x54>
 8025f94:	3301      	adds	r3, #1
 8025f96:	4608      	mov	r0, r1
 8025f98:	602b      	str	r3, [r5, #0]
 8025f9a:	bd70      	pop	{r4, r5, r6, pc}
 8025f9c:	f003 ff22 	bl	8029de4 <__sinit>
 8025fa0:	e7e3      	b.n	8025f6a <_putc_r+0xe>
 8025fa2:	4620      	mov	r0, r4
 8025fa4:	4631      	mov	r1, r6
 8025fa6:	462a      	mov	r2, r5
 8025fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025fac:	f002 bcc0 	b.w	8028930 <__swbuf_r>
 8025fb0:	4620      	mov	r0, r4
 8025fb2:	462a      	mov	r2, r5
 8025fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025fb8:	f002 bcba 	b.w	8028930 <__swbuf_r>

08025fbc <putc>:
 8025fbc:	b570      	push	{r4, r5, r6, lr}
 8025fbe:	4606      	mov	r6, r0
 8025fc0:	4d17      	ldr	r5, [pc, #92]	; (8026020 <putc+0x64>)
 8025fc2:	460c      	mov	r4, r1
 8025fc4:	6828      	ldr	r0, [r5, #0]
 8025fc6:	b108      	cbz	r0, 8025fcc <putc+0x10>
 8025fc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8025fca:	b1c3      	cbz	r3, 8025ffe <putc+0x42>
 8025fcc:	68a3      	ldr	r3, [r4, #8]
 8025fce:	3b01      	subs	r3, #1
 8025fd0:	60a3      	str	r3, [r4, #8]
 8025fd2:	2b00      	cmp	r3, #0
 8025fd4:	db06      	blt.n	8025fe4 <putc+0x28>
 8025fd6:	6823      	ldr	r3, [r4, #0]
 8025fd8:	701e      	strb	r6, [r3, #0]
 8025fda:	6823      	ldr	r3, [r4, #0]
 8025fdc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8025fe0:	6023      	str	r3, [r4, #0]
 8025fe2:	bd70      	pop	{r4, r5, r6, pc}
 8025fe4:	69a2      	ldr	r2, [r4, #24]
 8025fe6:	4293      	cmp	r3, r2
 8025fe8:	db0c      	blt.n	8026004 <putc+0x48>
 8025fea:	6823      	ldr	r3, [r4, #0]
 8025fec:	701e      	strb	r6, [r3, #0]
 8025fee:	6823      	ldr	r3, [r4, #0]
 8025ff0:	7819      	ldrb	r1, [r3, #0]
 8025ff2:	290a      	cmp	r1, #10
 8025ff4:	d00d      	beq.n	8026012 <putc+0x56>
 8025ff6:	3301      	adds	r3, #1
 8025ff8:	4608      	mov	r0, r1
 8025ffa:	6023      	str	r3, [r4, #0]
 8025ffc:	bd70      	pop	{r4, r5, r6, pc}
 8025ffe:	f003 fef1 	bl	8029de4 <__sinit>
 8026002:	e7e3      	b.n	8025fcc <putc+0x10>
 8026004:	6828      	ldr	r0, [r5, #0]
 8026006:	4631      	mov	r1, r6
 8026008:	4622      	mov	r2, r4
 802600a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802600e:	f002 bc8f 	b.w	8028930 <__swbuf_r>
 8026012:	6828      	ldr	r0, [r5, #0]
 8026014:	4622      	mov	r2, r4
 8026016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802601a:	f002 bc89 	b.w	8028930 <__swbuf_r>
 802601e:	bf00      	nop
 8026020:	20000008 	.word	0x20000008

08026024 <realloc>:
 8026024:	f240 0308 	movw	r3, #8
 8026028:	460a      	mov	r2, r1
 802602a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802602e:	4601      	mov	r1, r0
 8026030:	6818      	ldr	r0, [r3, #0]
 8026032:	f000 b801 	b.w	8026038 <_realloc_r>
 8026036:	bf00      	nop

08026038 <_realloc_r>:
 8026038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802603c:	460c      	mov	r4, r1
 802603e:	b083      	sub	sp, #12
 8026040:	4606      	mov	r6, r0
 8026042:	2900      	cmp	r1, #0
 8026044:	f000 8135 	beq.w	80262b2 <_realloc_r+0x27a>
 8026048:	9201      	str	r2, [sp, #4]
 802604a:	f7f8 f99f 	bl	801e38c <__malloc_lock>
 802604e:	9a01      	ldr	r2, [sp, #4]
 8026050:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8026054:	f102 050b 	add.w	r5, r2, #11
 8026058:	2d16      	cmp	r5, #22
 802605a:	f200 809d 	bhi.w	8026198 <_realloc_r+0x160>
 802605e:	2110      	movs	r1, #16
 8026060:	2700      	movs	r7, #0
 8026062:	460d      	mov	r5, r1
 8026064:	4295      	cmp	r5, r2
 8026066:	bf38      	it	cc
 8026068:	f047 0701 	orrcc.w	r7, r7, #1
 802606c:	2f00      	cmp	r7, #0
 802606e:	f040 8126 	bne.w	80262be <_realloc_r+0x286>
 8026072:	f020 0903 	bic.w	r9, r0, #3
 8026076:	f1a4 0a08 	sub.w	sl, r4, #8
 802607a:	4589      	cmp	r9, r1
 802607c:	bfa8      	it	ge
 802607e:	464f      	movge	r7, r9
 8026080:	da74      	bge.n	802616c <_realloc_r+0x134>
 8026082:	4ba1      	ldr	r3, [pc, #644]	; (8026308 <_realloc_r+0x2d0>)
 8026084:	eb0a 0e09 	add.w	lr, sl, r9
 8026088:	f8d3 b008 	ldr.w	fp, [r3, #8]
 802608c:	45f3      	cmp	fp, lr
 802608e:	f000 811a 	beq.w	80262c6 <_realloc_r+0x28e>
 8026092:	f8de c004 	ldr.w	ip, [lr, #4]
 8026096:	f02c 0801 	bic.w	r8, ip, #1
 802609a:	44f0      	add	r8, lr
 802609c:	f8d8 8004 	ldr.w	r8, [r8, #4]
 80260a0:	f018 0f01 	tst.w	r8, #1
 80260a4:	bf1c      	itt	ne
 80260a6:	46bc      	movne	ip, r7
 80260a8:	46e6      	movne	lr, ip
 80260aa:	d07a      	beq.n	80261a2 <_realloc_r+0x16a>
 80260ac:	07c0      	lsls	r0, r0, #31
 80260ae:	f100 809a 	bmi.w	80261e6 <_realloc_r+0x1ae>
 80260b2:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80260b6:	ebc0 080a 	rsb	r8, r0, sl
 80260ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80260be:	f020 0003 	bic.w	r0, r0, #3
 80260c2:	f1be 0f00 	cmp.w	lr, #0
 80260c6:	f000 80b6 	beq.w	8026236 <_realloc_r+0x1fe>
 80260ca:	45de      	cmp	lr, fp
 80260cc:	eb00 0b09 	add.w	fp, r0, r9
 80260d0:	f000 814d 	beq.w	802636e <_realloc_r+0x336>
 80260d4:	eb0c 070b 	add.w	r7, ip, fp
 80260d8:	42b9      	cmp	r1, r7
 80260da:	f300 80ae 	bgt.w	802623a <_realloc_r+0x202>
 80260de:	f8de 100c 	ldr.w	r1, [lr, #12]
 80260e2:	4643      	mov	r3, r8
 80260e4:	f8de 0008 	ldr.w	r0, [lr, #8]
 80260e8:	f1a9 0204 	sub.w	r2, r9, #4
 80260ec:	2a24      	cmp	r2, #36	; 0x24
 80260ee:	60c1      	str	r1, [r0, #12]
 80260f0:	6088      	str	r0, [r1, #8]
 80260f2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80260f6:	f853 0f08 	ldr.w	r0, [r3, #8]!
 80260fa:	60c1      	str	r1, [r0, #12]
 80260fc:	6088      	str	r0, [r1, #8]
 80260fe:	f200 8191 	bhi.w	8026424 <_realloc_r+0x3ec>
 8026102:	2a13      	cmp	r2, #19
 8026104:	bf9c      	itt	ls
 8026106:	461a      	movls	r2, r3
 8026108:	4621      	movls	r1, r4
 802610a:	d925      	bls.n	8026158 <_realloc_r+0x120>
 802610c:	6821      	ldr	r1, [r4, #0]
 802610e:	2a1b      	cmp	r2, #27
 8026110:	bf98      	it	ls
 8026112:	f108 0210 	addls.w	r2, r8, #16
 8026116:	f8c8 1008 	str.w	r1, [r8, #8]
 802611a:	6861      	ldr	r1, [r4, #4]
 802611c:	f8c8 100c 	str.w	r1, [r8, #12]
 8026120:	bf98      	it	ls
 8026122:	f104 0108 	addls.w	r1, r4, #8
 8026126:	d917      	bls.n	8026158 <_realloc_r+0x120>
 8026128:	68a1      	ldr	r1, [r4, #8]
 802612a:	2a24      	cmp	r2, #36	; 0x24
 802612c:	bf14      	ite	ne
 802612e:	f108 0218 	addne.w	r2, r8, #24
 8026132:	f108 0220 	addeq.w	r2, r8, #32
 8026136:	f8c8 1010 	str.w	r1, [r8, #16]
 802613a:	68e1      	ldr	r1, [r4, #12]
 802613c:	f8c8 1014 	str.w	r1, [r8, #20]
 8026140:	bf11      	iteee	ne
 8026142:	f104 0110 	addne.w	r1, r4, #16
 8026146:	6920      	ldreq	r0, [r4, #16]
 8026148:	f104 0118 	addeq.w	r1, r4, #24
 802614c:	f8c8 0018 	streq.w	r0, [r8, #24]
 8026150:	bf04      	itt	eq
 8026152:	6960      	ldreq	r0, [r4, #20]
 8026154:	f8c8 001c 	streq.w	r0, [r8, #28]
 8026158:	6808      	ldr	r0, [r1, #0]
 802615a:	461c      	mov	r4, r3
 802615c:	6010      	str	r0, [r2, #0]
 802615e:	46c2      	mov	sl, r8
 8026160:	684b      	ldr	r3, [r1, #4]
 8026162:	6053      	str	r3, [r2, #4]
 8026164:	688b      	ldr	r3, [r1, #8]
 8026166:	6093      	str	r3, [r2, #8]
 8026168:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802616c:	1b7b      	subs	r3, r7, r5
 802616e:	2b0f      	cmp	r3, #15
 8026170:	d825      	bhi.n	80261be <_realloc_r+0x186>
 8026172:	eb0a 0307 	add.w	r3, sl, r7
 8026176:	f000 0001 	and.w	r0, r0, #1
 802617a:	4307      	orrs	r7, r0
 802617c:	f8ca 7004 	str.w	r7, [sl, #4]
 8026180:	685a      	ldr	r2, [r3, #4]
 8026182:	f042 0201 	orr.w	r2, r2, #1
 8026186:	605a      	str	r2, [r3, #4]
 8026188:	4630      	mov	r0, r6
 802618a:	4627      	mov	r7, r4
 802618c:	f7f8 f908 	bl	801e3a0 <__malloc_unlock>
 8026190:	4638      	mov	r0, r7
 8026192:	b003      	add	sp, #12
 8026194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026198:	f025 0507 	bic.w	r5, r5, #7
 802619c:	4629      	mov	r1, r5
 802619e:	0fef      	lsrs	r7, r5, #31
 80261a0:	e760      	b.n	8026064 <_realloc_r+0x2c>
 80261a2:	f02c 0c03 	bic.w	ip, ip, #3
 80261a6:	eb0c 0709 	add.w	r7, ip, r9
 80261aa:	42b9      	cmp	r1, r7
 80261ac:	f73f af7e 	bgt.w	80260ac <_realloc_r+0x74>
 80261b0:	f8de 300c 	ldr.w	r3, [lr, #12]
 80261b4:	f8de 2008 	ldr.w	r2, [lr, #8]
 80261b8:	60d3      	str	r3, [r2, #12]
 80261ba:	609a      	str	r2, [r3, #8]
 80261bc:	e7d6      	b.n	802616c <_realloc_r+0x134>
 80261be:	eb0a 0105 	add.w	r1, sl, r5
 80261c2:	f000 0001 	and.w	r0, r0, #1
 80261c6:	18ca      	adds	r2, r1, r3
 80261c8:	4305      	orrs	r5, r0
 80261ca:	f043 0301 	orr.w	r3, r3, #1
 80261ce:	f8ca 5004 	str.w	r5, [sl, #4]
 80261d2:	604b      	str	r3, [r1, #4]
 80261d4:	4630      	mov	r0, r6
 80261d6:	6853      	ldr	r3, [r2, #4]
 80261d8:	3108      	adds	r1, #8
 80261da:	f043 0301 	orr.w	r3, r3, #1
 80261de:	6053      	str	r3, [r2, #4]
 80261e0:	f003 ff64 	bl	802a0ac <_free_r>
 80261e4:	e7d0      	b.n	8026188 <_realloc_r+0x150>
 80261e6:	4630      	mov	r0, r6
 80261e8:	4611      	mov	r1, r2
 80261ea:	f7ff faa1 	bl	8025730 <_malloc_r>
 80261ee:	4607      	mov	r7, r0
 80261f0:	b1e8      	cbz	r0, 802622e <_realloc_r+0x1f6>
 80261f2:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80261f6:	f1a7 0208 	sub.w	r2, r7, #8
 80261fa:	f020 0301 	bic.w	r3, r0, #1
 80261fe:	4453      	add	r3, sl
 8026200:	429a      	cmp	r2, r3
 8026202:	f000 8109 	beq.w	8026418 <_realloc_r+0x3e0>
 8026206:	f1a9 0204 	sub.w	r2, r9, #4
 802620a:	2a24      	cmp	r2, #36	; 0x24
 802620c:	f200 80aa 	bhi.w	8026364 <_realloc_r+0x32c>
 8026210:	2a13      	cmp	r2, #19
 8026212:	bf9c      	itt	ls
 8026214:	463b      	movls	r3, r7
 8026216:	4622      	movls	r2, r4
 8026218:	d878      	bhi.n	802630c <_realloc_r+0x2d4>
 802621a:	6811      	ldr	r1, [r2, #0]
 802621c:	6019      	str	r1, [r3, #0]
 802621e:	6851      	ldr	r1, [r2, #4]
 8026220:	6059      	str	r1, [r3, #4]
 8026222:	6892      	ldr	r2, [r2, #8]
 8026224:	609a      	str	r2, [r3, #8]
 8026226:	4630      	mov	r0, r6
 8026228:	4621      	mov	r1, r4
 802622a:	f003 ff3f 	bl	802a0ac <_free_r>
 802622e:	4630      	mov	r0, r6
 8026230:	f7f8 f8b6 	bl	801e3a0 <__malloc_unlock>
 8026234:	e7ac      	b.n	8026190 <_realloc_r+0x158>
 8026236:	eb00 0b09 	add.w	fp, r0, r9
 802623a:	4559      	cmp	r1, fp
 802623c:	dcd3      	bgt.n	80261e6 <_realloc_r+0x1ae>
 802623e:	4643      	mov	r3, r8
 8026240:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8026244:	f1a9 0204 	sub.w	r2, r9, #4
 8026248:	f853 0f08 	ldr.w	r0, [r3, #8]!
 802624c:	2a24      	cmp	r2, #36	; 0x24
 802624e:	60c1      	str	r1, [r0, #12]
 8026250:	6088      	str	r0, [r1, #8]
 8026252:	d87d      	bhi.n	8026350 <_realloc_r+0x318>
 8026254:	2a13      	cmp	r2, #19
 8026256:	bf9c      	itt	ls
 8026258:	461a      	movls	r2, r3
 802625a:	4621      	movls	r1, r4
 802625c:	d925      	bls.n	80262aa <_realloc_r+0x272>
 802625e:	6821      	ldr	r1, [r4, #0]
 8026260:	2a1b      	cmp	r2, #27
 8026262:	bf98      	it	ls
 8026264:	f108 0210 	addls.w	r2, r8, #16
 8026268:	f8c8 1008 	str.w	r1, [r8, #8]
 802626c:	6861      	ldr	r1, [r4, #4]
 802626e:	f8c8 100c 	str.w	r1, [r8, #12]
 8026272:	bf98      	it	ls
 8026274:	f104 0108 	addls.w	r1, r4, #8
 8026278:	d917      	bls.n	80262aa <_realloc_r+0x272>
 802627a:	68a1      	ldr	r1, [r4, #8]
 802627c:	2a24      	cmp	r2, #36	; 0x24
 802627e:	bf14      	ite	ne
 8026280:	f108 0218 	addne.w	r2, r8, #24
 8026284:	f108 0220 	addeq.w	r2, r8, #32
 8026288:	f8c8 1010 	str.w	r1, [r8, #16]
 802628c:	68e1      	ldr	r1, [r4, #12]
 802628e:	f8c8 1014 	str.w	r1, [r8, #20]
 8026292:	bf11      	iteee	ne
 8026294:	f104 0110 	addne.w	r1, r4, #16
 8026298:	6920      	ldreq	r0, [r4, #16]
 802629a:	f104 0118 	addeq.w	r1, r4, #24
 802629e:	f8c8 0018 	streq.w	r0, [r8, #24]
 80262a2:	bf04      	itt	eq
 80262a4:	6960      	ldreq	r0, [r4, #20]
 80262a6:	f8c8 001c 	streq.w	r0, [r8, #28]
 80262aa:	6808      	ldr	r0, [r1, #0]
 80262ac:	461c      	mov	r4, r3
 80262ae:	465f      	mov	r7, fp
 80262b0:	e754      	b.n	802615c <_realloc_r+0x124>
 80262b2:	4611      	mov	r1, r2
 80262b4:	b003      	add	sp, #12
 80262b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262ba:	f7ff ba39 	b.w	8025730 <_malloc_r>
 80262be:	230c      	movs	r3, #12
 80262c0:	2700      	movs	r7, #0
 80262c2:	6033      	str	r3, [r6, #0]
 80262c4:	e764      	b.n	8026190 <_realloc_r+0x158>
 80262c6:	f8db 7004 	ldr.w	r7, [fp, #4]
 80262ca:	f105 0e10 	add.w	lr, r5, #16
 80262ce:	f027 0c03 	bic.w	ip, r7, #3
 80262d2:	eb0c 0709 	add.w	r7, ip, r9
 80262d6:	4577      	cmp	r7, lr
 80262d8:	bfb8      	it	lt
 80262da:	46de      	movlt	lr, fp
 80262dc:	f6ff aee6 	blt.w	80260ac <_realloc_r+0x74>
 80262e0:	eb0a 0205 	add.w	r2, sl, r5
 80262e4:	1b79      	subs	r1, r7, r5
 80262e6:	f041 0101 	orr.w	r1, r1, #1
 80262ea:	609a      	str	r2, [r3, #8]
 80262ec:	6051      	str	r1, [r2, #4]
 80262ee:	4630      	mov	r0, r6
 80262f0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80262f4:	4627      	mov	r7, r4
 80262f6:	f001 0301 	and.w	r3, r1, #1
 80262fa:	431d      	orrs	r5, r3
 80262fc:	f844 5c04 	str.w	r5, [r4, #-4]
 8026300:	f7f8 f84e 	bl	801e3a0 <__malloc_unlock>
 8026304:	e744      	b.n	8026190 <_realloc_r+0x158>
 8026306:	bf00      	nop
 8026308:	20000438 	.word	0x20000438
 802630c:	6823      	ldr	r3, [r4, #0]
 802630e:	2a1b      	cmp	r2, #27
 8026310:	bf98      	it	ls
 8026312:	f104 0208 	addls.w	r2, r4, #8
 8026316:	603b      	str	r3, [r7, #0]
 8026318:	6863      	ldr	r3, [r4, #4]
 802631a:	607b      	str	r3, [r7, #4]
 802631c:	bf98      	it	ls
 802631e:	f107 0308 	addls.w	r3, r7, #8
 8026322:	f67f af7a 	bls.w	802621a <_realloc_r+0x1e2>
 8026326:	68a3      	ldr	r3, [r4, #8]
 8026328:	2a24      	cmp	r2, #36	; 0x24
 802632a:	bf14      	ite	ne
 802632c:	f104 0210 	addne.w	r2, r4, #16
 8026330:	f104 0218 	addeq.w	r2, r4, #24
 8026334:	60bb      	str	r3, [r7, #8]
 8026336:	68e3      	ldr	r3, [r4, #12]
 8026338:	60fb      	str	r3, [r7, #12]
 802633a:	bf11      	iteee	ne
 802633c:	f107 0310 	addne.w	r3, r7, #16
 8026340:	6921      	ldreq	r1, [r4, #16]
 8026342:	f107 0318 	addeq.w	r3, r7, #24
 8026346:	6139      	streq	r1, [r7, #16]
 8026348:	bf04      	itt	eq
 802634a:	6961      	ldreq	r1, [r4, #20]
 802634c:	6179      	streq	r1, [r7, #20]
 802634e:	e764      	b.n	802621a <_realloc_r+0x1e2>
 8026350:	4621      	mov	r1, r4
 8026352:	4618      	mov	r0, r3
 8026354:	461c      	mov	r4, r3
 8026356:	465f      	mov	r7, fp
 8026358:	f7ff fd52 	bl	8025e00 <memmove>
 802635c:	46c2      	mov	sl, r8
 802635e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026362:	e703      	b.n	802616c <_realloc_r+0x134>
 8026364:	4638      	mov	r0, r7
 8026366:	4621      	mov	r1, r4
 8026368:	f7ff fd4a 	bl	8025e00 <memmove>
 802636c:	e75b      	b.n	8026226 <_realloc_r+0x1ee>
 802636e:	f105 0010 	add.w	r0, r5, #16
 8026372:	44dc      	add	ip, fp
 8026374:	4584      	cmp	ip, r0
 8026376:	f6ff af60 	blt.w	802623a <_realloc_r+0x202>
 802637a:	4647      	mov	r7, r8
 802637c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8026380:	f1a9 0204 	sub.w	r2, r9, #4
 8026384:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8026388:	2a24      	cmp	r2, #36	; 0x24
 802638a:	60c1      	str	r1, [r0, #12]
 802638c:	6088      	str	r0, [r1, #8]
 802638e:	d852      	bhi.n	8026436 <_realloc_r+0x3fe>
 8026390:	2a13      	cmp	r2, #19
 8026392:	bf9c      	itt	ls
 8026394:	463a      	movls	r2, r7
 8026396:	4621      	movls	r1, r4
 8026398:	d925      	bls.n	80263e6 <_realloc_r+0x3ae>
 802639a:	6821      	ldr	r1, [r4, #0]
 802639c:	2a1b      	cmp	r2, #27
 802639e:	bf98      	it	ls
 80263a0:	f108 0210 	addls.w	r2, r8, #16
 80263a4:	f8c8 1008 	str.w	r1, [r8, #8]
 80263a8:	6861      	ldr	r1, [r4, #4]
 80263aa:	f8c8 100c 	str.w	r1, [r8, #12]
 80263ae:	bf98      	it	ls
 80263b0:	f104 0108 	addls.w	r1, r4, #8
 80263b4:	d917      	bls.n	80263e6 <_realloc_r+0x3ae>
 80263b6:	68a1      	ldr	r1, [r4, #8]
 80263b8:	2a24      	cmp	r2, #36	; 0x24
 80263ba:	bf14      	ite	ne
 80263bc:	f108 0218 	addne.w	r2, r8, #24
 80263c0:	f108 0220 	addeq.w	r2, r8, #32
 80263c4:	f8c8 1010 	str.w	r1, [r8, #16]
 80263c8:	68e1      	ldr	r1, [r4, #12]
 80263ca:	f8c8 1014 	str.w	r1, [r8, #20]
 80263ce:	bf11      	iteee	ne
 80263d0:	f104 0110 	addne.w	r1, r4, #16
 80263d4:	6920      	ldreq	r0, [r4, #16]
 80263d6:	f104 0118 	addeq.w	r1, r4, #24
 80263da:	f8c8 0018 	streq.w	r0, [r8, #24]
 80263de:	bf04      	itt	eq
 80263e0:	6960      	ldreq	r0, [r4, #20]
 80263e2:	f8c8 001c 	streq.w	r0, [r8, #28]
 80263e6:	6808      	ldr	r0, [r1, #0]
 80263e8:	6010      	str	r0, [r2, #0]
 80263ea:	6848      	ldr	r0, [r1, #4]
 80263ec:	6050      	str	r0, [r2, #4]
 80263ee:	6889      	ldr	r1, [r1, #8]
 80263f0:	6091      	str	r1, [r2, #8]
 80263f2:	eb08 0205 	add.w	r2, r8, r5
 80263f6:	ebc5 010c 	rsb	r1, r5, ip
 80263fa:	f041 0101 	orr.w	r1, r1, #1
 80263fe:	609a      	str	r2, [r3, #8]
 8026400:	6051      	str	r1, [r2, #4]
 8026402:	4630      	mov	r0, r6
 8026404:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026408:	f003 0301 	and.w	r3, r3, #1
 802640c:	431d      	orrs	r5, r3
 802640e:	f8c8 5004 	str.w	r5, [r8, #4]
 8026412:	f7f7 ffc5 	bl	801e3a0 <__malloc_unlock>
 8026416:	e6bb      	b.n	8026190 <_realloc_r+0x158>
 8026418:	f857 7c04 	ldr.w	r7, [r7, #-4]
 802641c:	f027 0703 	bic.w	r7, r7, #3
 8026420:	444f      	add	r7, r9
 8026422:	e6a3      	b.n	802616c <_realloc_r+0x134>
 8026424:	4621      	mov	r1, r4
 8026426:	4618      	mov	r0, r3
 8026428:	461c      	mov	r4, r3
 802642a:	46c2      	mov	sl, r8
 802642c:	f7ff fce8 	bl	8025e00 <memmove>
 8026430:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026434:	e69a      	b.n	802616c <_realloc_r+0x134>
 8026436:	4638      	mov	r0, r7
 8026438:	4621      	mov	r1, r4
 802643a:	e88d 1008 	stmia.w	sp, {r3, ip}
 802643e:	f7ff fcdf 	bl	8025e00 <memmove>
 8026442:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8026446:	e7d4      	b.n	80263f2 <_realloc_r+0x3ba>

08026448 <_init_signal_r>:
 8026448:	b538      	push	{r3, r4, r5, lr}
 802644a:	4604      	mov	r4, r0
 802644c:	f8d0 52dc 	ldr.w	r5, [r0, #732]	; 0x2dc
 8026450:	b10d      	cbz	r5, 8026456 <_init_signal_r+0xe>
 8026452:	2000      	movs	r0, #0
 8026454:	bd38      	pop	{r3, r4, r5, pc}
 8026456:	2180      	movs	r1, #128	; 0x80
 8026458:	f7ff f96a 	bl	8025730 <_malloc_r>
 802645c:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 8026460:	b148      	cbz	r0, 8026476 <_init_signal_r+0x2e>
 8026462:	462b      	mov	r3, r5
 8026464:	e001      	b.n	802646a <_init_signal_r+0x22>
 8026466:	f8d4 02dc 	ldr.w	r0, [r4, #732]	; 0x2dc
 802646a:	5143      	str	r3, [r0, r5]
 802646c:	3504      	adds	r5, #4
 802646e:	2d80      	cmp	r5, #128	; 0x80
 8026470:	d1f9      	bne.n	8026466 <_init_signal_r+0x1e>
 8026472:	2000      	movs	r0, #0
 8026474:	bd38      	pop	{r3, r4, r5, pc}
 8026476:	f04f 30ff 	mov.w	r0, #4294967295
 802647a:	bd38      	pop	{r3, r4, r5, pc}

0802647c <_signal_r>:
 802647c:	291f      	cmp	r1, #31
 802647e:	b510      	push	{r4, lr}
 8026480:	4604      	mov	r4, r0
 8026482:	b082      	sub	sp, #8
 8026484:	d808      	bhi.n	8026498 <_signal_r+0x1c>
 8026486:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 802648a:	b153      	cbz	r3, 80264a2 <_signal_r+0x26>
 802648c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8026490:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8026494:	b002      	add	sp, #8
 8026496:	bd10      	pop	{r4, pc}
 8026498:	2316      	movs	r3, #22
 802649a:	f04f 30ff 	mov.w	r0, #4294967295
 802649e:	6023      	str	r3, [r4, #0]
 80264a0:	e7f8      	b.n	8026494 <_signal_r+0x18>
 80264a2:	9101      	str	r1, [sp, #4]
 80264a4:	9200      	str	r2, [sp, #0]
 80264a6:	f7ff ffcf 	bl	8026448 <_init_signal_r>
 80264aa:	9901      	ldr	r1, [sp, #4]
 80264ac:	9a00      	ldr	r2, [sp, #0]
 80264ae:	b910      	cbnz	r0, 80264b6 <_signal_r+0x3a>
 80264b0:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 80264b4:	e7ea      	b.n	802648c <_signal_r+0x10>
 80264b6:	f04f 30ff 	mov.w	r0, #4294967295
 80264ba:	e7eb      	b.n	8026494 <_signal_r+0x18>

080264bc <_raise_r>:
 80264bc:	291f      	cmp	r1, #31
 80264be:	b538      	push	{r3, r4, r5, lr}
 80264c0:	460c      	mov	r4, r1
 80264c2:	4605      	mov	r5, r0
 80264c4:	d820      	bhi.n	8026508 <_raise_r+0x4c>
 80264c6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 80264ca:	b19a      	cbz	r2, 80264f4 <_raise_r+0x38>
 80264cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80264d0:	b183      	cbz	r3, 80264f4 <_raise_r+0x38>
 80264d2:	2b01      	cmp	r3, #1
 80264d4:	d00c      	beq.n	80264f0 <_raise_r+0x34>
 80264d6:	1c59      	adds	r1, r3, #1
 80264d8:	d006      	beq.n	80264e8 <_raise_r+0x2c>
 80264da:	2500      	movs	r5, #0
 80264dc:	4620      	mov	r0, r4
 80264de:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 80264e2:	4798      	blx	r3
 80264e4:	4628      	mov	r0, r5
 80264e6:	bd38      	pop	{r3, r4, r5, pc}
 80264e8:	2316      	movs	r3, #22
 80264ea:	2001      	movs	r0, #1
 80264ec:	602b      	str	r3, [r5, #0]
 80264ee:	bd38      	pop	{r3, r4, r5, pc}
 80264f0:	2000      	movs	r0, #0
 80264f2:	bd38      	pop	{r3, r4, r5, pc}
 80264f4:	4628      	mov	r0, r5
 80264f6:	f7f7 ff39 	bl	801e36c <_getpid_r>
 80264fa:	4622      	mov	r2, r4
 80264fc:	4601      	mov	r1, r0
 80264fe:	4628      	mov	r0, r5
 8026500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026504:	f7f7 bf20 	b.w	801e348 <_kill_r>
 8026508:	2316      	movs	r3, #22
 802650a:	f04f 30ff 	mov.w	r0, #4294967295
 802650e:	602b      	str	r3, [r5, #0]
 8026510:	bd38      	pop	{r3, r4, r5, pc}
 8026512:	bf00      	nop

08026514 <__sigtramp_r>:
 8026514:	291f      	cmp	r1, #31
 8026516:	b510      	push	{r4, lr}
 8026518:	4604      	mov	r4, r0
 802651a:	b082      	sub	sp, #8
 802651c:	d81e      	bhi.n	802655c <__sigtramp_r+0x48>
 802651e:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8026522:	b19a      	cbz	r2, 802654c <__sigtramp_r+0x38>
 8026524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026528:	2001      	movs	r0, #1
 802652a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 802652e:	b14b      	cbz	r3, 8026544 <__sigtramp_r+0x30>
 8026530:	1c58      	adds	r0, r3, #1
 8026532:	d009      	beq.n	8026548 <__sigtramp_r+0x34>
 8026534:	2003      	movs	r0, #3
 8026536:	2b01      	cmp	r3, #1
 8026538:	d004      	beq.n	8026544 <__sigtramp_r+0x30>
 802653a:	2400      	movs	r4, #0
 802653c:	4608      	mov	r0, r1
 802653e:	6014      	str	r4, [r2, #0]
 8026540:	4798      	blx	r3
 8026542:	4620      	mov	r0, r4
 8026544:	b002      	add	sp, #8
 8026546:	bd10      	pop	{r4, pc}
 8026548:	2002      	movs	r0, #2
 802654a:	e7fb      	b.n	8026544 <__sigtramp_r+0x30>
 802654c:	9101      	str	r1, [sp, #4]
 802654e:	f7ff ff7b 	bl	8026448 <_init_signal_r>
 8026552:	9901      	ldr	r1, [sp, #4]
 8026554:	b910      	cbnz	r0, 802655c <__sigtramp_r+0x48>
 8026556:	f8d4 22dc 	ldr.w	r2, [r4, #732]	; 0x2dc
 802655a:	e7e3      	b.n	8026524 <__sigtramp_r+0x10>
 802655c:	f04f 30ff 	mov.w	r0, #4294967295
 8026560:	e7f0      	b.n	8026544 <__sigtramp_r+0x30>
 8026562:	bf00      	nop

08026564 <raise>:
 8026564:	f240 0308 	movw	r3, #8
 8026568:	4601      	mov	r1, r0
 802656a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802656e:	6818      	ldr	r0, [r3, #0]
 8026570:	e7a4      	b.n	80264bc <_raise_r>
 8026572:	bf00      	nop

08026574 <signal>:
 8026574:	f240 0308 	movw	r3, #8
 8026578:	460a      	mov	r2, r1
 802657a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802657e:	4601      	mov	r1, r0
 8026580:	6818      	ldr	r0, [r3, #0]
 8026582:	e77b      	b.n	802647c <_signal_r>

08026584 <_init_signal>:
 8026584:	f240 0308 	movw	r3, #8
 8026588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802658c:	6818      	ldr	r0, [r3, #0]
 802658e:	e75b      	b.n	8026448 <_init_signal_r>

08026590 <__sigtramp>:
 8026590:	f240 0308 	movw	r3, #8
 8026594:	4601      	mov	r1, r0
 8026596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802659a:	6818      	ldr	r0, [r3, #0]
 802659c:	e7ba      	b.n	8026514 <__sigtramp_r>
 802659e:	bf00      	nop

080265a0 <_sprintf_r>:
 80265a0:	b40c      	push	{r2, r3}
 80265a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80265a4:	b09d      	sub	sp, #116	; 0x74
 80265a6:	ac22      	add	r4, sp, #136	; 0x88
 80265a8:	460e      	mov	r6, r1
 80265aa:	a901      	add	r1, sp, #4
 80265ac:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80265b0:	f854 2b04 	ldr.w	r2, [r4], #4
 80265b4:	f44f 7702 	mov.w	r7, #520	; 0x208
 80265b8:	9601      	str	r6, [sp, #4]
 80265ba:	4623      	mov	r3, r4
 80265bc:	9605      	str	r6, [sp, #20]
 80265be:	f8ad 7010 	strh.w	r7, [sp, #16]
 80265c2:	f04f 36ff 	mov.w	r6, #4294967295
 80265c6:	9503      	str	r5, [sp, #12]
 80265c8:	f8ad 6012 	strh.w	r6, [sp, #18]
 80265cc:	9506      	str	r5, [sp, #24]
 80265ce:	941b      	str	r4, [sp, #108]	; 0x6c
 80265d0:	f000 fa60 	bl	8026a94 <_svfprintf_r>
 80265d4:	9b01      	ldr	r3, [sp, #4]
 80265d6:	2200      	movs	r2, #0
 80265d8:	701a      	strb	r2, [r3, #0]
 80265da:	b01d      	add	sp, #116	; 0x74
 80265dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80265e0:	b002      	add	sp, #8
 80265e2:	4770      	bx	lr

080265e4 <sprintf>:
 80265e4:	b40e      	push	{r1, r2, r3}
 80265e6:	f240 0308 	movw	r3, #8
 80265ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80265ec:	b09c      	sub	sp, #112	; 0x70
 80265ee:	ac21      	add	r4, sp, #132	; 0x84
 80265f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80265f4:	4606      	mov	r6, r0
 80265f6:	a901      	add	r1, sp, #4
 80265f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80265fc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8026600:	6818      	ldr	r0, [r3, #0]
 8026602:	f44f 7702 	mov.w	r7, #520	; 0x208
 8026606:	4623      	mov	r3, r4
 8026608:	9601      	str	r6, [sp, #4]
 802660a:	9605      	str	r6, [sp, #20]
 802660c:	f04f 36ff 	mov.w	r6, #4294967295
 8026610:	f8ad 7010 	strh.w	r7, [sp, #16]
 8026614:	f8ad 6012 	strh.w	r6, [sp, #18]
 8026618:	9503      	str	r5, [sp, #12]
 802661a:	9506      	str	r5, [sp, #24]
 802661c:	941b      	str	r4, [sp, #108]	; 0x6c
 802661e:	f000 fa39 	bl	8026a94 <_svfprintf_r>
 8026622:	9b01      	ldr	r3, [sp, #4]
 8026624:	2200      	movs	r2, #0
 8026626:	701a      	strb	r2, [r3, #0]
 8026628:	b01c      	add	sp, #112	; 0x70
 802662a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802662e:	b003      	add	sp, #12
 8026630:	4770      	bx	lr
 8026632:	bf00      	nop

08026634 <strcat>:
 8026634:	b538      	push	{r3, r4, r5, lr}
 8026636:	0783      	lsls	r3, r0, #30
 8026638:	4604      	mov	r4, r0
 802663a:	d120      	bne.n	802667e <strcat+0x4a>
 802663c:	6803      	ldr	r3, [r0, #0]
 802663e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8026642:	ea22 0303 	bic.w	r3, r2, r3
 8026646:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 802664a:	bf04      	itt	eq
 802664c:	4602      	moveq	r2, r0
 802664e:	4600      	moveq	r0, r0
 8026650:	d115      	bne.n	802667e <strcat+0x4a>
 8026652:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8026656:	3004      	adds	r0, #4
 8026658:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 802665c:	ea25 0303 	bic.w	r3, r5, r3
 8026660:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8026664:	d0f5      	beq.n	8026652 <strcat+0x1e>
 8026666:	7803      	ldrb	r3, [r0, #0]
 8026668:	b12b      	cbz	r3, 8026676 <strcat+0x42>
 802666a:	4603      	mov	r3, r0
 802666c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8026670:	3001      	adds	r0, #1
 8026672:	2a00      	cmp	r2, #0
 8026674:	d1fa      	bne.n	802666c <strcat+0x38>
 8026676:	f000 f8f3 	bl	8026860 <strcpy>
 802667a:	4620      	mov	r0, r4
 802667c:	bd38      	pop	{r3, r4, r5, pc}
 802667e:	4620      	mov	r0, r4
 8026680:	e7f1      	b.n	8026666 <strcat+0x32>
 8026682:	bf00      	nop

08026684 <strcmp>:
 8026684:	ea80 0201 	eor.w	r2, r0, r1
 8026688:	f012 0f03 	tst.w	r2, #3
 802668c:	d13a      	bne.n	8026704 <strcmp_unaligned>
 802668e:	f010 0203 	ands.w	r2, r0, #3
 8026692:	f020 0003 	bic.w	r0, r0, #3
 8026696:	f021 0103 	bic.w	r1, r1, #3
 802669a:	f850 cb04 	ldr.w	ip, [r0], #4
 802669e:	bf08      	it	eq
 80266a0:	f851 3b04 	ldreq.w	r3, [r1], #4
 80266a4:	d00d      	beq.n	80266c2 <strcmp+0x3e>
 80266a6:	f082 0203 	eor.w	r2, r2, #3
 80266aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80266ae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80266b2:	fa23 f202 	lsr.w	r2, r3, r2
 80266b6:	f851 3b04 	ldr.w	r3, [r1], #4
 80266ba:	ea4c 0c02 	orr.w	ip, ip, r2
 80266be:	ea43 0302 	orr.w	r3, r3, r2
 80266c2:	bf00      	nop
 80266c4:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 80266c8:	459c      	cmp	ip, r3
 80266ca:	bf01      	itttt	eq
 80266cc:	ea22 020c 	biceq.w	r2, r2, ip
 80266d0:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 80266d4:	f850 cb04 	ldreq.w	ip, [r0], #4
 80266d8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80266dc:	d0f2      	beq.n	80266c4 <strcmp+0x40>
 80266de:	ea4f 600c 	mov.w	r0, ip, lsl #24
 80266e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80266e6:	2801      	cmp	r0, #1
 80266e8:	bf28      	it	cs
 80266ea:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80266ee:	bf08      	it	eq
 80266f0:	0a1b      	lsreq	r3, r3, #8
 80266f2:	d0f4      	beq.n	80266de <strcmp+0x5a>
 80266f4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80266f8:	ea4f 6010 	mov.w	r0, r0, lsr #24
 80266fc:	eba0 0003 	sub.w	r0, r0, r3
 8026700:	4770      	bx	lr
 8026702:	bf00      	nop

08026704 <strcmp_unaligned>:
 8026704:	f010 0f03 	tst.w	r0, #3
 8026708:	d00a      	beq.n	8026720 <strcmp_unaligned+0x1c>
 802670a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802670e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026712:	2a01      	cmp	r2, #1
 8026714:	bf28      	it	cs
 8026716:	429a      	cmpcs	r2, r3
 8026718:	d0f4      	beq.n	8026704 <strcmp_unaligned>
 802671a:	eba2 0003 	sub.w	r0, r2, r3
 802671e:	4770      	bx	lr
 8026720:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8026724:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8026728:	f04f 0201 	mov.w	r2, #1
 802672c:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8026730:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8026734:	f001 0c03 	and.w	ip, r1, #3
 8026738:	f021 0103 	bic.w	r1, r1, #3
 802673c:	f850 4b04 	ldr.w	r4, [r0], #4
 8026740:	f851 5b04 	ldr.w	r5, [r1], #4
 8026744:	f1bc 0f02 	cmp.w	ip, #2
 8026748:	d026      	beq.n	8026798 <strcmp_unaligned+0x94>
 802674a:	d84b      	bhi.n	80267e4 <strcmp_unaligned+0xe0>
 802674c:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8026750:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8026754:	eba4 0302 	sub.w	r3, r4, r2
 8026758:	ea23 0304 	bic.w	r3, r3, r4
 802675c:	d10d      	bne.n	802677a <strcmp_unaligned+0x76>
 802675e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8026762:	bf08      	it	eq
 8026764:	f851 5b04 	ldreq.w	r5, [r1], #4
 8026768:	d10a      	bne.n	8026780 <strcmp_unaligned+0x7c>
 802676a:	ea8c 0c04 	eor.w	ip, ip, r4
 802676e:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8026772:	d10c      	bne.n	802678e <strcmp_unaligned+0x8a>
 8026774:	f850 4b04 	ldr.w	r4, [r0], #4
 8026778:	e7e8      	b.n	802674c <strcmp_unaligned+0x48>
 802677a:	ea4f 2515 	mov.w	r5, r5, lsr #8
 802677e:	e05c      	b.n	802683a <strcmp_unaligned+0x136>
 8026780:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8026784:	d152      	bne.n	802682c <strcmp_unaligned+0x128>
 8026786:	780d      	ldrb	r5, [r1, #0]
 8026788:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 802678c:	e055      	b.n	802683a <strcmp_unaligned+0x136>
 802678e:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8026792:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8026796:	e050      	b.n	802683a <strcmp_unaligned+0x136>
 8026798:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 802679c:	eba4 0302 	sub.w	r3, r4, r2
 80267a0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80267a4:	ea23 0304 	bic.w	r3, r3, r4
 80267a8:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 80267ac:	d117      	bne.n	80267de <strcmp_unaligned+0xda>
 80267ae:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80267b2:	bf08      	it	eq
 80267b4:	f851 5b04 	ldreq.w	r5, [r1], #4
 80267b8:	d107      	bne.n	80267ca <strcmp_unaligned+0xc6>
 80267ba:	ea8c 0c04 	eor.w	ip, ip, r4
 80267be:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 80267c2:	d108      	bne.n	80267d6 <strcmp_unaligned+0xd2>
 80267c4:	f850 4b04 	ldr.w	r4, [r0], #4
 80267c8:	e7e6      	b.n	8026798 <strcmp_unaligned+0x94>
 80267ca:	041b      	lsls	r3, r3, #16
 80267cc:	d12e      	bne.n	802682c <strcmp_unaligned+0x128>
 80267ce:	880d      	ldrh	r5, [r1, #0]
 80267d0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80267d4:	e031      	b.n	802683a <strcmp_unaligned+0x136>
 80267d6:	ea4f 4505 	mov.w	r5, r5, lsl #16
 80267da:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80267de:	ea4f 4515 	mov.w	r5, r5, lsr #16
 80267e2:	e02a      	b.n	802683a <strcmp_unaligned+0x136>
 80267e4:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 80267e8:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 80267ec:	eba4 0302 	sub.w	r3, r4, r2
 80267f0:	ea23 0304 	bic.w	r3, r3, r4
 80267f4:	d10d      	bne.n	8026812 <strcmp_unaligned+0x10e>
 80267f6:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80267fa:	bf08      	it	eq
 80267fc:	f851 5b04 	ldreq.w	r5, [r1], #4
 8026800:	d10a      	bne.n	8026818 <strcmp_unaligned+0x114>
 8026802:	ea8c 0c04 	eor.w	ip, ip, r4
 8026806:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 802680a:	d10a      	bne.n	8026822 <strcmp_unaligned+0x11e>
 802680c:	f850 4b04 	ldr.w	r4, [r0], #4
 8026810:	e7e8      	b.n	80267e4 <strcmp_unaligned+0xe0>
 8026812:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8026816:	e010      	b.n	802683a <strcmp_unaligned+0x136>
 8026818:	f014 0fff 	tst.w	r4, #255	; 0xff
 802681c:	d006      	beq.n	802682c <strcmp_unaligned+0x128>
 802681e:	f851 5b04 	ldr.w	r5, [r1], #4
 8026822:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8026826:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 802682a:	e006      	b.n	802683a <strcmp_unaligned+0x136>
 802682c:	f04f 0000 	mov.w	r0, #0
 8026830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026834:	f85d 5b04 	ldr.w	r5, [sp], #4
 8026838:	4770      	bx	lr
 802683a:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 802683e:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8026842:	2801      	cmp	r0, #1
 8026844:	bf28      	it	cs
 8026846:	4290      	cmpcs	r0, r2
 8026848:	bf04      	itt	eq
 802684a:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 802684e:	0a2d      	lsreq	r5, r5, #8
 8026850:	d0f3      	beq.n	802683a <strcmp_unaligned+0x136>
 8026852:	eba2 0000 	sub.w	r0, r2, r0
 8026856:	f85d 4b04 	ldr.w	r4, [sp], #4
 802685a:	f85d 5b04 	ldr.w	r5, [sp], #4
 802685e:	4770      	bx	lr

08026860 <strcpy>:
 8026860:	ea80 0201 	eor.w	r2, r0, r1
 8026864:	4684      	mov	ip, r0
 8026866:	f012 0f03 	tst.w	r2, #3
 802686a:	d14f      	bne.n	802690c <strcpy+0xac>
 802686c:	f011 0f03 	tst.w	r1, #3
 8026870:	d132      	bne.n	80268d8 <strcpy+0x78>
 8026872:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8026876:	f011 0f04 	tst.w	r1, #4
 802687a:	f851 3b04 	ldr.w	r3, [r1], #4
 802687e:	d00b      	beq.n	8026898 <strcpy+0x38>
 8026880:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8026884:	439a      	bics	r2, r3
 8026886:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 802688a:	bf04      	itt	eq
 802688c:	f84c 3b04 	streq.w	r3, [ip], #4
 8026890:	f851 3b04 	ldreq.w	r3, [r1], #4
 8026894:	d116      	bne.n	80268c4 <strcpy+0x64>
 8026896:	bf00      	nop
 8026898:	f851 4b04 	ldr.w	r4, [r1], #4
 802689c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80268a0:	439a      	bics	r2, r3
 80268a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80268a6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80268aa:	d10b      	bne.n	80268c4 <strcpy+0x64>
 80268ac:	f84c 3b04 	str.w	r3, [ip], #4
 80268b0:	43a2      	bics	r2, r4
 80268b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80268b6:	bf04      	itt	eq
 80268b8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80268bc:	f84c 4b04 	streq.w	r4, [ip], #4
 80268c0:	d0ea      	beq.n	8026898 <strcpy+0x38>
 80268c2:	4623      	mov	r3, r4
 80268c4:	f80c 3b01 	strb.w	r3, [ip], #1
 80268c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80268cc:	ea4f 2333 	mov.w	r3, r3, ror #8
 80268d0:	d1f8      	bne.n	80268c4 <strcpy+0x64>
 80268d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80268d6:	4770      	bx	lr
 80268d8:	f011 0f01 	tst.w	r1, #1
 80268dc:	d006      	beq.n	80268ec <strcpy+0x8c>
 80268de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80268e2:	f80c 2b01 	strb.w	r2, [ip], #1
 80268e6:	2a00      	cmp	r2, #0
 80268e8:	bf08      	it	eq
 80268ea:	4770      	bxeq	lr
 80268ec:	f011 0f02 	tst.w	r1, #2
 80268f0:	d0bf      	beq.n	8026872 <strcpy+0x12>
 80268f2:	f831 2b02 	ldrh.w	r2, [r1], #2
 80268f6:	f012 0fff 	tst.w	r2, #255	; 0xff
 80268fa:	bf16      	itet	ne
 80268fc:	f82c 2b02 	strhne.w	r2, [ip], #2
 8026900:	f88c 2000 	strbeq.w	r2, [ip]
 8026904:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8026908:	d1b3      	bne.n	8026872 <strcpy+0x12>
 802690a:	4770      	bx	lr
 802690c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026910:	f80c 2b01 	strb.w	r2, [ip], #1
 8026914:	2a00      	cmp	r2, #0
 8026916:	d1f9      	bne.n	802690c <strcpy+0xac>
 8026918:	4770      	bx	lr
 802691a:	bf00      	nop

0802691c <strlen>:
 802691c:	f020 0103 	bic.w	r1, r0, #3
 8026920:	f010 0003 	ands.w	r0, r0, #3
 8026924:	f1c0 0000 	rsb	r0, r0, #0
 8026928:	f851 3b04 	ldr.w	r3, [r1], #4
 802692c:	f100 0c04 	add.w	ip, r0, #4
 8026930:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026934:	f06f 0200 	mvn.w	r2, #0
 8026938:	bf1c      	itt	ne
 802693a:	fa22 f20c 	lsrne.w	r2, r2, ip
 802693e:	4313      	orrne	r3, r2
 8026940:	f04f 0c01 	mov.w	ip, #1
 8026944:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8026948:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 802694c:	eba3 020c 	sub.w	r2, r3, ip
 8026950:	ea22 0203 	bic.w	r2, r2, r3
 8026954:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8026958:	bf04      	itt	eq
 802695a:	f851 3b04 	ldreq.w	r3, [r1], #4
 802695e:	3004      	addeq	r0, #4
 8026960:	d0f4      	beq.n	802694c <strlen+0x30>
 8026962:	f013 0fff 	tst.w	r3, #255	; 0xff
 8026966:	bf1f      	itttt	ne
 8026968:	3001      	addne	r0, #1
 802696a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 802696e:	3001      	addne	r0, #1
 8026970:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8026974:	bf18      	it	ne
 8026976:	3001      	addne	r0, #1
 8026978:	4770      	bx	lr
 802697a:	bf00      	nop

0802697c <strncmp>:
 802697c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8026980:	2a00      	cmp	r2, #0
 8026982:	d044      	beq.n	8026a0e <strncmp+0x92>
 8026984:	ea41 0300 	orr.w	r3, r1, r0
 8026988:	f013 0303 	ands.w	r3, r3, #3
 802698c:	d12c      	bne.n	80269e8 <strncmp+0x6c>
 802698e:	2a03      	cmp	r2, #3
 8026990:	d92a      	bls.n	80269e8 <strncmp+0x6c>
 8026992:	6804      	ldr	r4, [r0, #0]
 8026994:	680d      	ldr	r5, [r1, #0]
 8026996:	42ac      	cmp	r4, r5
 8026998:	d126      	bne.n	80269e8 <strncmp+0x6c>
 802699a:	3a04      	subs	r2, #4
 802699c:	d037      	beq.n	8026a0e <strncmp+0x92>
 802699e:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80269a2:	ea25 0404 	bic.w	r4, r5, r4
 80269a6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80269aa:	bf04      	itt	eq
 80269ac:	460c      	moveq	r4, r1
 80269ae:	4605      	moveq	r5, r0
 80269b0:	d011      	beq.n	80269d6 <strncmp+0x5a>
 80269b2:	e034      	b.n	8026a1e <strncmp+0xa2>
 80269b4:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80269b8:	4635      	mov	r5, r6
 80269ba:	f851 cf04 	ldr.w	ip, [r1, #4]!
 80269be:	463c      	mov	r4, r7
 80269c0:	f1a3 3801 	sub.w	r8, r3, #16843009	; 0x1010101
 80269c4:	4563      	cmp	r3, ip
 80269c6:	ea28 0803 	bic.w	r8, r8, r3
 80269ca:	d109      	bne.n	80269e0 <strncmp+0x64>
 80269cc:	3a04      	subs	r2, #4
 80269ce:	d01e      	beq.n	8026a0e <strncmp+0x92>
 80269d0:	f018 3f80 	tst.w	r8, #2155905152	; 0x80808080
 80269d4:	d119      	bne.n	8026a0a <strncmp+0x8e>
 80269d6:	1d2e      	adds	r6, r5, #4
 80269d8:	1d27      	adds	r7, r4, #4
 80269da:	2a03      	cmp	r2, #3
 80269dc:	d8ea      	bhi.n	80269b4 <strncmp+0x38>
 80269de:	b1d2      	cbz	r2, 8026a16 <strncmp+0x9a>
 80269e0:	3a01      	subs	r2, #1
 80269e2:	4639      	mov	r1, r7
 80269e4:	4630      	mov	r0, r6
 80269e6:	e000      	b.n	80269ea <strncmp+0x6e>
 80269e8:	3a01      	subs	r2, #1
 80269ea:	7803      	ldrb	r3, [r0, #0]
 80269ec:	780c      	ldrb	r4, [r1, #0]
 80269ee:	42a3      	cmp	r3, r4
 80269f0:	d113      	bne.n	8026a1a <strncmp+0x9e>
 80269f2:	b162      	cbz	r2, 8026a0e <strncmp+0x92>
 80269f4:	b19b      	cbz	r3, 8026a1e <strncmp+0xa2>
 80269f6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80269fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80269fe:	42a3      	cmp	r3, r4
 8026a00:	d10b      	bne.n	8026a1a <strncmp+0x9e>
 8026a02:	2a01      	cmp	r2, #1
 8026a04:	f102 32ff 	add.w	r2, r2, #4294967295
 8026a08:	d1f4      	bne.n	80269f4 <strncmp+0x78>
 8026a0a:	2000      	movs	r0, #0
 8026a0c:	e000      	b.n	8026a10 <strncmp+0x94>
 8026a0e:	4610      	mov	r0, r2
 8026a10:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8026a14:	4770      	bx	lr
 8026a16:	792b      	ldrb	r3, [r5, #4]
 8026a18:	7924      	ldrb	r4, [r4, #4]
 8026a1a:	1b18      	subs	r0, r3, r4
 8026a1c:	e7f8      	b.n	8026a10 <strncmp+0x94>
 8026a1e:	4618      	mov	r0, r3
 8026a20:	e7f6      	b.n	8026a10 <strncmp+0x94>
 8026a22:	bf00      	nop

08026a24 <strncpy>:
 8026a24:	ea41 0300 	orr.w	r3, r1, r0
 8026a28:	f013 0f03 	tst.w	r3, #3
 8026a2c:	460b      	mov	r3, r1
 8026a2e:	b470      	push	{r4, r5, r6}
 8026a30:	bf14      	ite	ne
 8026a32:	2500      	movne	r5, #0
 8026a34:	2501      	moveq	r5, #1
 8026a36:	2a03      	cmp	r2, #3
 8026a38:	bf94      	ite	ls
 8026a3a:	2500      	movls	r5, #0
 8026a3c:	f005 0501 	andhi.w	r5, r5, #1
 8026a40:	4604      	mov	r4, r0
 8026a42:	b17d      	cbz	r5, 8026a64 <strncpy+0x40>
 8026a44:	4619      	mov	r1, r3
 8026a46:	f853 5b04 	ldr.w	r5, [r3], #4
 8026a4a:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8026a4e:	ea26 0605 	bic.w	r6, r6, r5
 8026a52:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8026a56:	d105      	bne.n	8026a64 <strncpy+0x40>
 8026a58:	3a04      	subs	r2, #4
 8026a5a:	f844 5b04 	str.w	r5, [r4], #4
 8026a5e:	2a03      	cmp	r2, #3
 8026a60:	d8f0      	bhi.n	8026a44 <strncpy+0x20>
 8026a62:	4619      	mov	r1, r3
 8026a64:	b1a2      	cbz	r2, 8026a90 <strncpy+0x6c>
 8026a66:	780d      	ldrb	r5, [r1, #0]
 8026a68:	1e53      	subs	r3, r2, #1
 8026a6a:	f804 5b01 	strb.w	r5, [r4], #1
 8026a6e:	4622      	mov	r2, r4
 8026a70:	b145      	cbz	r5, 8026a84 <strncpy+0x60>
 8026a72:	b16b      	cbz	r3, 8026a90 <strncpy+0x6c>
 8026a74:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8026a78:	3b01      	subs	r3, #1
 8026a7a:	f802 5b01 	strb.w	r5, [r2], #1
 8026a7e:	4614      	mov	r4, r2
 8026a80:	2d00      	cmp	r5, #0
 8026a82:	d1f6      	bne.n	8026a72 <strncpy+0x4e>
 8026a84:	2200      	movs	r2, #0
 8026a86:	b11b      	cbz	r3, 8026a90 <strncpy+0x6c>
 8026a88:	3b01      	subs	r3, #1
 8026a8a:	f804 2b01 	strb.w	r2, [r4], #1
 8026a8e:	d1fb      	bne.n	8026a88 <strncpy+0x64>
 8026a90:	bc70      	pop	{r4, r5, r6}
 8026a92:	4770      	bx	lr

08026a94 <_svfprintf_r>:
 8026a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a98:	b0c9      	sub	sp, #292	; 0x124
 8026a9a:	468b      	mov	fp, r1
 8026a9c:	4692      	mov	sl, r2
 8026a9e:	9311      	str	r3, [sp, #68]	; 0x44
 8026aa0:	9010      	str	r0, [sp, #64]	; 0x40
 8026aa2:	f003 fc49 	bl	802a338 <_localeconv_r>
 8026aa6:	2300      	movs	r3, #0
 8026aa8:	2200      	movs	r2, #0
 8026aaa:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8026aae:	6800      	ldr	r0, [r0, #0]
 8026ab0:	9019      	str	r0, [sp, #100]	; 0x64
 8026ab2:	f7ff ff33 	bl	802691c <strlen>
 8026ab6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8026aba:	061d      	lsls	r5, r3, #24
 8026abc:	901a      	str	r0, [sp, #104]	; 0x68
 8026abe:	d504      	bpl.n	8026aca <_svfprintf_r+0x36>
 8026ac0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8026ac4:	2b00      	cmp	r3, #0
 8026ac6:	f001 801f 	beq.w	8027b08 <_svfprintf_r+0x1074>
 8026aca:	ad3d      	add	r5, sp, #244	; 0xf4
 8026acc:	9509      	str	r5, [sp, #36]	; 0x24
 8026ace:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8026ad2:	9508      	str	r5, [sp, #32]
 8026ad4:	f246 6567 	movw	r5, #26215	; 0x6667
 8026ad8:	9808      	ldr	r0, [sp, #32]
 8026ada:	f2c6 6566 	movt	r5, #26214	; 0x6666
 8026ade:	951e      	str	r5, [sp, #120]	; 0x78
 8026ae0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026ae2:	2300      	movs	r3, #0
 8026ae4:	ae23      	add	r6, sp, #140	; 0x8c
 8026ae6:	9312      	str	r3, [sp, #72]	; 0x48
 8026ae8:	1a2d      	subs	r5, r5, r0
 8026aea:	9521      	str	r5, [sp, #132]	; 0x84
 8026aec:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8026af0:	9320      	str	r3, [sp, #128]	; 0x80
 8026af2:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
 8026af6:	931f      	str	r3, [sp, #124]	; 0x7c
 8026af8:	930d      	str	r3, [sp, #52]	; 0x34
 8026afa:	951b      	str	r5, [sp, #108]	; 0x6c
 8026afc:	963d      	str	r6, [sp, #244]	; 0xf4
 8026afe:	933f      	str	r3, [sp, #252]	; 0xfc
 8026b00:	933e      	str	r3, [sp, #248]	; 0xf8
 8026b02:	f89a 3000 	ldrb.w	r3, [sl]
 8026b06:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8026b0a:	bf18      	it	ne
 8026b0c:	2201      	movne	r2, #1
 8026b0e:	2b00      	cmp	r3, #0
 8026b10:	bf0c      	ite	eq
 8026b12:	2300      	moveq	r3, #0
 8026b14:	f002 0301 	andne.w	r3, r2, #1
 8026b18:	2b00      	cmp	r3, #0
 8026b1a:	f000 80c6 	beq.w	8026caa <_svfprintf_r+0x216>
 8026b1e:	4652      	mov	r2, sl
 8026b20:	4657      	mov	r7, sl
 8026b22:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8026b26:	3701      	adds	r7, #1
 8026b28:	1c19      	adds	r1, r3, #0
 8026b2a:	bf18      	it	ne
 8026b2c:	2101      	movne	r1, #1
 8026b2e:	2b25      	cmp	r3, #37	; 0x25
 8026b30:	bf0c      	ite	eq
 8026b32:	2300      	moveq	r3, #0
 8026b34:	f001 0301 	andne.w	r3, r1, #1
 8026b38:	2b00      	cmp	r3, #0
 8026b3a:	d1f2      	bne.n	8026b22 <_svfprintf_r+0x8e>
 8026b3c:	ebb7 080a 	subs.w	r8, r7, sl
 8026b40:	d010      	beq.n	8026b64 <_svfprintf_r+0xd0>
 8026b42:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8026b44:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8026b46:	3401      	adds	r4, #1
 8026b48:	f8c6 a000 	str.w	sl, [r6]
 8026b4c:	2c07      	cmp	r4, #7
 8026b4e:	f8c6 8004 	str.w	r8, [r6, #4]
 8026b52:	4445      	add	r5, r8
 8026b54:	943e      	str	r4, [sp, #248]	; 0xf8
 8026b56:	953f      	str	r5, [sp, #252]	; 0xfc
 8026b58:	f300 808b 	bgt.w	8026c72 <_svfprintf_r+0x1de>
 8026b5c:	3608      	adds	r6, #8
 8026b5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026b60:	4445      	add	r5, r8
 8026b62:	950d      	str	r5, [sp, #52]	; 0x34
 8026b64:	783b      	ldrb	r3, [r7, #0]
 8026b66:	2b00      	cmp	r3, #0
 8026b68:	f000 808b 	beq.w	8026c82 <_svfprintf_r+0x1ee>
 8026b6c:	f107 0a01 	add.w	sl, r7, #1
 8026b70:	f04f 34ff 	mov.w	r4, #4294967295
 8026b74:	2720      	movs	r7, #32
 8026b76:	212b      	movs	r1, #43	; 0x2b
 8026b78:	2300      	movs	r3, #0
 8026b7a:	930c      	str	r3, [sp, #48]	; 0x30
 8026b7c:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8026b80:	930a      	str	r3, [sp, #40]	; 0x28
 8026b82:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8026b86:	f1a3 0220 	sub.w	r2, r3, #32
 8026b8a:	2a58      	cmp	r2, #88	; 0x58
 8026b8c:	f200 8147 	bhi.w	8026e1e <_svfprintf_r+0x38a>
 8026b90:	e8df f012 	tbh	[pc, r2, lsl #1]
 8026b94:	01450157 	.word	0x01450157
 8026b98:	02160145 	.word	0x02160145
 8026b9c:	01450145 	.word	0x01450145
 8026ba0:	01450145 	.word	0x01450145
 8026ba4:	01450145 	.word	0x01450145
 8026ba8:	008d005e 	.word	0x008d005e
 8026bac:	006a0145 	.word	0x006a0145
 8026bb0:	0145015f 	.word	0x0145015f
 8026bb4:	017f017a 	.word	0x017f017a
 8026bb8:	017f017f 	.word	0x017f017f
 8026bbc:	017f017f 	.word	0x017f017f
 8026bc0:	017f017f 	.word	0x017f017f
 8026bc4:	017f017f 	.word	0x017f017f
 8026bc8:	01450145 	.word	0x01450145
 8026bcc:	01450145 	.word	0x01450145
 8026bd0:	01450145 	.word	0x01450145
 8026bd4:	01450145 	.word	0x01450145
 8026bd8:	01450145 	.word	0x01450145
 8026bdc:	024d0192 	.word	0x024d0192
 8026be0:	024d0145 	.word	0x024d0145
 8026be4:	01450145 	.word	0x01450145
 8026be8:	01450145 	.word	0x01450145
 8026bec:	01450283 	.word	0x01450283
 8026bf0:	01d30145 	.word	0x01d30145
 8026bf4:	01450145 	.word	0x01450145
 8026bf8:	01450145 	.word	0x01450145
 8026bfc:	023c0145 	.word	0x023c0145
 8026c00:	01450145 	.word	0x01450145
 8026c04:	0145021b 	.word	0x0145021b
 8026c08:	01450145 	.word	0x01450145
 8026c0c:	01450145 	.word	0x01450145
 8026c10:	01450145 	.word	0x01450145
 8026c14:	01450145 	.word	0x01450145
 8026c18:	022b0145 	.word	0x022b0145
 8026c1c:	024d01f8 	.word	0x024d01f8
 8026c20:	024d024d 	.word	0x024d024d
 8026c24:	01f80211 	.word	0x01f80211
 8026c28:	01450145 	.word	0x01450145
 8026c2c:	01450059 	.word	0x01450059
 8026c30:	01e501c4 	.word	0x01e501c4
 8026c34:	00590288 	.word	0x00590288
 8026c38:	00900145 	.word	0x00900145
 8026c3c:	01040145 	.word	0x01040145
 8026c40:	01450145 	.word	0x01450145
 8026c44:	01a5      	.short	0x01a5
 8026c46:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026c48:	f045 0510 	orr.w	r5, r5, #16
 8026c4c:	950a      	str	r5, [sp, #40]	; 0x28
 8026c4e:	e798      	b.n	8026b82 <_svfprintf_r+0xee>
 8026c50:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026c52:	682d      	ldr	r5, [r5, #0]
 8026c54:	950c      	str	r5, [sp, #48]	; 0x30
 8026c56:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026c58:	1d2b      	adds	r3, r5, #4
 8026c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026c5c:	2d00      	cmp	r5, #0
 8026c5e:	f280 8241 	bge.w	80270e4 <_svfprintf_r+0x650>
 8026c62:	426d      	negs	r5, r5
 8026c64:	9311      	str	r3, [sp, #68]	; 0x44
 8026c66:	950c      	str	r5, [sp, #48]	; 0x30
 8026c68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026c6a:	f045 0504 	orr.w	r5, r5, #4
 8026c6e:	950a      	str	r5, [sp, #40]	; 0x28
 8026c70:	e787      	b.n	8026b82 <_svfprintf_r+0xee>
 8026c72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026c74:	4659      	mov	r1, fp
 8026c76:	aa3d      	add	r2, sp, #244	; 0xf4
 8026c78:	f004 f8d2 	bl	802ae20 <__ssprint_r>
 8026c7c:	b940      	cbnz	r0, 8026c90 <_svfprintf_r+0x1fc>
 8026c7e:	ae23      	add	r6, sp, #140	; 0x8c
 8026c80:	e76d      	b.n	8026b5e <_svfprintf_r+0xca>
 8026c82:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8026c84:	b123      	cbz	r3, 8026c90 <_svfprintf_r+0x1fc>
 8026c86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026c88:	4659      	mov	r1, fp
 8026c8a:	aa3d      	add	r2, sp, #244	; 0xf4
 8026c8c:	f004 f8c8 	bl	802ae20 <__ssprint_r>
 8026c90:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8026c94:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026c96:	f013 0f40 	tst.w	r3, #64	; 0x40
 8026c9a:	bf18      	it	ne
 8026c9c:	f04f 35ff 	movne.w	r5, #4294967295
 8026ca0:	950d      	str	r5, [sp, #52]	; 0x34
 8026ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026ca4:	b049      	add	sp, #292	; 0x124
 8026ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026caa:	4657      	mov	r7, sl
 8026cac:	e75a      	b.n	8026b64 <_svfprintf_r+0xd0>
 8026cae:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
 8026cb2:	e766      	b.n	8026b82 <_svfprintf_r+0xee>
 8026cb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026cb6:	2500      	movs	r5, #0
 8026cb8:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
 8026cbc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8026cbe:	6800      	ldr	r0, [r0, #0]
 8026cc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8026cc2:	1d0f      	adds	r7, r1, #4
 8026cc4:	9013      	str	r0, [sp, #76]	; 0x4c
 8026cc6:	2800      	cmp	r0, #0
 8026cc8:	f000 87af 	beq.w	8027c2a <_svfprintf_r+0x1196>
 8026ccc:	2c00      	cmp	r4, #0
 8026cce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026cd0:	f2c0 8767 	blt.w	8027ba2 <_svfprintf_r+0x110e>
 8026cd4:	4629      	mov	r1, r5
 8026cd6:	4622      	mov	r2, r4
 8026cd8:	f7fe ffdc 	bl	8025c94 <memchr>
 8026cdc:	2800      	cmp	r0, #0
 8026cde:	f000 87d3 	beq.w	8027c88 <_svfprintf_r+0x11f4>
 8026ce2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8026ce4:	9514      	str	r5, [sp, #80]	; 0x50
 8026ce6:	1a40      	subs	r0, r0, r1
 8026ce8:	900e      	str	r0, [sp, #56]	; 0x38
 8026cea:	42a0      	cmp	r0, r4
 8026cec:	f340 8608 	ble.w	8027900 <_svfprintf_r+0xe6c>
 8026cf0:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8026cf4:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8026cf8:	950b      	str	r5, [sp, #44]	; 0x2c
 8026cfa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026cfc:	9711      	str	r7, [sp, #68]	; 0x44
 8026cfe:	940e      	str	r4, [sp, #56]	; 0x38
 8026d00:	9518      	str	r5, [sp, #96]	; 0x60
 8026d02:	b113      	cbz	r3, 8026d0a <_svfprintf_r+0x276>
 8026d04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026d06:	3501      	adds	r5, #1
 8026d08:	950b      	str	r5, [sp, #44]	; 0x2c
 8026d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d0c:	f013 0302 	ands.w	r3, r3, #2
 8026d10:	9315      	str	r3, [sp, #84]	; 0x54
 8026d12:	d002      	beq.n	8026d1a <_svfprintf_r+0x286>
 8026d14:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026d16:	3502      	adds	r5, #2
 8026d18:	950b      	str	r5, [sp, #44]	; 0x2c
 8026d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d1c:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8026d20:	9316      	str	r3, [sp, #88]	; 0x58
 8026d22:	f040 81e1 	bne.w	80270e8 <_svfprintf_r+0x654>
 8026d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026d28:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026d2a:	1a2f      	subs	r7, r5, r0
 8026d2c:	2f00      	cmp	r7, #0
 8026d2e:	f340 81db 	ble.w	80270e8 <_svfprintf_r+0x654>
 8026d32:	2f10      	cmp	r7, #16
 8026d34:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8026d36:	f340 873b 	ble.w	8027bb0 <_svfprintf_r+0x111c>
 8026d3a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8026d3c:	f04f 0910 	mov.w	r9, #16
 8026d40:	f8df 8428 	ldr.w	r8, [pc, #1064]	; 802716c <_svfprintf_r+0x6d8>
 8026d44:	4623      	mov	r3, r4
 8026d46:	4644      	mov	r4, r8
 8026d48:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8026d4c:	e002      	b.n	8026d54 <_svfprintf_r+0x2c0>
 8026d4e:	3f10      	subs	r7, #16
 8026d50:	2f10      	cmp	r7, #16
 8026d52:	dd15      	ble.n	8026d80 <_svfprintf_r+0x2ec>
 8026d54:	3301      	adds	r3, #1
 8026d56:	e886 0210 	stmia.w	r6, {r4, r9}
 8026d5a:	3510      	adds	r5, #16
 8026d5c:	3608      	adds	r6, #8
 8026d5e:	2b07      	cmp	r3, #7
 8026d60:	933e      	str	r3, [sp, #248]	; 0xf8
 8026d62:	953f      	str	r5, [sp, #252]	; 0xfc
 8026d64:	ddf3      	ble.n	8026d4e <_svfprintf_r+0x2ba>
 8026d66:	4640      	mov	r0, r8
 8026d68:	4659      	mov	r1, fp
 8026d6a:	aa3d      	add	r2, sp, #244	; 0xf4
 8026d6c:	ae23      	add	r6, sp, #140	; 0x8c
 8026d6e:	f004 f857 	bl	802ae20 <__ssprint_r>
 8026d72:	2800      	cmp	r0, #0
 8026d74:	d18c      	bne.n	8026c90 <_svfprintf_r+0x1fc>
 8026d76:	3f10      	subs	r7, #16
 8026d78:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8026d7a:	2f10      	cmp	r7, #16
 8026d7c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8026d7e:	dce9      	bgt.n	8026d54 <_svfprintf_r+0x2c0>
 8026d80:	46a0      	mov	r8, r4
 8026d82:	461c      	mov	r4, r3
 8026d84:	3401      	adds	r4, #1
 8026d86:	f8c6 8000 	str.w	r8, [r6]
 8026d8a:	2c07      	cmp	r4, #7
 8026d8c:	6077      	str	r7, [r6, #4]
 8026d8e:	443d      	add	r5, r7
 8026d90:	943e      	str	r4, [sp, #248]	; 0xf8
 8026d92:	953f      	str	r5, [sp, #252]	; 0xfc
 8026d94:	f300 8434 	bgt.w	8027600 <_svfprintf_r+0xb6c>
 8026d98:	3608      	adds	r6, #8
 8026d9a:	e1a6      	b.n	80270ea <_svfprintf_r+0x656>
 8026d9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026d9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8026da0:	06ea      	lsls	r2, r5, #27
 8026da2:	f140 813c 	bpl.w	802701e <_svfprintf_r+0x58a>
 8026da6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026da8:	682b      	ldr	r3, [r5, #0]
 8026daa:	3504      	adds	r5, #4
 8026dac:	2201      	movs	r2, #1
 8026dae:	1c19      	adds	r1, r3, #0
 8026db0:	9511      	str	r5, [sp, #68]	; 0x44
 8026db2:	bf18      	it	ne
 8026db4:	2101      	movne	r1, #1
 8026db6:	2000      	movs	r0, #0
 8026db8:	f88d 011f 	strb.w	r0, [sp, #287]	; 0x11f
 8026dbc:	2c00      	cmp	r4, #0
 8026dbe:	bfa2      	ittt	ge
 8026dc0:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 8026dc2:	f025 0580 	bicge.w	r5, r5, #128	; 0x80
 8026dc6:	950a      	strge	r5, [sp, #40]	; 0x28
 8026dc8:	2c00      	cmp	r4, #0
 8026dca:	bf18      	it	ne
 8026dcc:	f041 0101 	orrne.w	r1, r1, #1
 8026dd0:	2900      	cmp	r1, #0
 8026dd2:	f000 82c8 	beq.w	8027366 <_svfprintf_r+0x8d2>
 8026dd6:	2a01      	cmp	r2, #1
 8026dd8:	f000 8406 	beq.w	80275e8 <_svfprintf_r+0xb54>
 8026ddc:	2a02      	cmp	r2, #2
 8026dde:	bf18      	it	ne
 8026de0:	aa3d      	addne	r2, sp, #244	; 0xf4
 8026de2:	d101      	bne.n	8026de8 <_svfprintf_r+0x354>
 8026de4:	e3f0      	b.n	80275c8 <_svfprintf_r+0xb34>
 8026de6:	4602      	mov	r2, r0
 8026de8:	f003 0107 	and.w	r1, r3, #7
 8026dec:	1e50      	subs	r0, r2, #1
 8026dee:	3130      	adds	r1, #48	; 0x30
 8026df0:	08db      	lsrs	r3, r3, #3
 8026df2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8026df6:	d1f6      	bne.n	8026de6 <_svfprintf_r+0x352>
 8026df8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026dfa:	9013      	str	r0, [sp, #76]	; 0x4c
 8026dfc:	07ed      	lsls	r5, r5, #31
 8026dfe:	f100 84f4 	bmi.w	80277ea <_svfprintf_r+0xd56>
 8026e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e04:	1a1b      	subs	r3, r3, r0
 8026e06:	930e      	str	r3, [sp, #56]	; 0x38
 8026e08:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026e0a:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8026e0e:	42a5      	cmp	r5, r4
 8026e10:	bfb8      	it	lt
 8026e12:	4625      	movlt	r5, r4
 8026e14:	9414      	str	r4, [sp, #80]	; 0x50
 8026e16:	950b      	str	r5, [sp, #44]	; 0x2c
 8026e18:	2500      	movs	r5, #0
 8026e1a:	9518      	str	r5, [sp, #96]	; 0x60
 8026e1c:	e771      	b.n	8026d02 <_svfprintf_r+0x26e>
 8026e1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8026e20:	2b00      	cmp	r3, #0
 8026e22:	f43f af2e 	beq.w	8026c82 <_svfprintf_r+0x1ee>
 8026e26:	2501      	movs	r5, #1
 8026e28:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
 8026e2c:	950b      	str	r5, [sp, #44]	; 0x2c
 8026e2e:	2300      	movs	r3, #0
 8026e30:	950e      	str	r5, [sp, #56]	; 0x38
 8026e32:	ad33      	add	r5, sp, #204	; 0xcc
 8026e34:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8026e38:	9513      	str	r5, [sp, #76]	; 0x4c
 8026e3a:	2300      	movs	r3, #0
 8026e3c:	9314      	str	r3, [sp, #80]	; 0x50
 8026e3e:	9318      	str	r3, [sp, #96]	; 0x60
 8026e40:	e763      	b.n	8026d0a <_svfprintf_r+0x276>
 8026e42:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8026e46:	2b00      	cmp	r3, #0
 8026e48:	f47f ae9b 	bne.w	8026b82 <_svfprintf_r+0xee>
 8026e4c:	f88d 711f 	strb.w	r7, [sp, #287]	; 0x11f
 8026e50:	e697      	b.n	8026b82 <_svfprintf_r+0xee>
 8026e52:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8026e56:	2b2a      	cmp	r3, #42	; 0x2a
 8026e58:	f000 813a 	beq.w	80270d0 <_svfprintf_r+0x63c>
 8026e5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8026e60:	2400      	movs	r4, #0
 8026e62:	2a09      	cmp	r2, #9
 8026e64:	f63f ae8f 	bhi.w	8026b86 <_svfprintf_r+0xf2>
 8026e68:	4650      	mov	r0, sl
 8026e6a:	2400      	movs	r4, #0
 8026e6c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8026e70:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8026e74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8026e78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8026e7c:	2a09      	cmp	r2, #9
 8026e7e:	4682      	mov	sl, r0
 8026e80:	d9f4      	bls.n	8026e6c <_svfprintf_r+0x3d8>
 8026e82:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8026e86:	e67e      	b.n	8026b86 <_svfprintf_r+0xf2>
 8026e88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026e8a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8026e8e:	950a      	str	r5, [sp, #40]	; 0x28
 8026e90:	e677      	b.n	8026b82 <_svfprintf_r+0xee>
 8026e92:	4650      	mov	r0, sl
 8026e94:	2200      	movs	r2, #0
 8026e96:	46b4      	mov	ip, r6
 8026e98:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8026e9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8026ea0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8026ea4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8026ea8:	4682      	mov	sl, r0
 8026eaa:	2d09      	cmp	r5, #9
 8026eac:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8026eb0:	d9f2      	bls.n	8026e98 <_svfprintf_r+0x404>
 8026eb2:	4666      	mov	r6, ip
 8026eb4:	920c      	str	r2, [sp, #48]	; 0x30
 8026eb6:	e666      	b.n	8026b86 <_svfprintf_r+0xf2>
 8026eb8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026eba:	9317      	str	r3, [sp, #92]	; 0x5c
 8026ebc:	f045 0510 	orr.w	r5, r5, #16
 8026ec0:	950a      	str	r5, [sp, #40]	; 0x28
 8026ec2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026ec4:	06e8      	lsls	r0, r5, #27
 8026ec6:	d561      	bpl.n	8026f8c <_svfprintf_r+0x4f8>
 8026ec8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026eca:	682b      	ldr	r3, [r5, #0]
 8026ecc:	3504      	adds	r5, #4
 8026ece:	9511      	str	r5, [sp, #68]	; 0x44
 8026ed0:	2b00      	cmp	r3, #0
 8026ed2:	db67      	blt.n	8026fa4 <_svfprintf_r+0x510>
 8026ed4:	bf0c      	ite	eq
 8026ed6:	2100      	moveq	r1, #0
 8026ed8:	2101      	movne	r1, #1
 8026eda:	2201      	movs	r2, #1
 8026edc:	e76e      	b.n	8026dbc <_svfprintf_r+0x328>
 8026ede:	4d9f      	ldr	r5, [pc, #636]	; (802715c <_svfprintf_r+0x6c8>)
 8026ee0:	9317      	str	r3, [sp, #92]	; 0x5c
 8026ee2:	9520      	str	r5, [sp, #128]	; 0x80
 8026ee4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026ee6:	06eb      	lsls	r3, r5, #27
 8026ee8:	d575      	bpl.n	8026fd6 <_svfprintf_r+0x542>
 8026eea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026eec:	682b      	ldr	r3, [r5, #0]
 8026eee:	3504      	adds	r5, #4
 8026ef0:	9511      	str	r5, [sp, #68]	; 0x44
 8026ef2:	1c19      	adds	r1, r3, #0
 8026ef4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026ef6:	bf18      	it	ne
 8026ef8:	2101      	movne	r1, #1
 8026efa:	2202      	movs	r2, #2
 8026efc:	420d      	tst	r5, r1
 8026efe:	f43f af5a 	beq.w	8026db6 <_svfprintf_r+0x322>
 8026f02:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8026f04:	2230      	movs	r2, #48	; 0x30
 8026f06:	2101      	movs	r1, #1
 8026f08:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 8026f0c:	2202      	movs	r2, #2
 8026f0e:	f88d 511d 	strb.w	r5, [sp, #285]	; 0x11d
 8026f12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026f14:	f045 0502 	orr.w	r5, r5, #2
 8026f18:	950a      	str	r5, [sp, #40]	; 0x28
 8026f1a:	e74c      	b.n	8026db6 <_svfprintf_r+0x322>
 8026f1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026f1e:	06e8      	lsls	r0, r5, #27
 8026f20:	f100 83a3 	bmi.w	802766a <_svfprintf_r+0xbd6>
 8026f24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026f26:	0669      	lsls	r1, r5, #25
 8026f28:	f140 839f 	bpl.w	802766a <_svfprintf_r+0xbd6>
 8026f2c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026f2e:	682b      	ldr	r3, [r5, #0]
 8026f30:	3504      	adds	r5, #4
 8026f32:	9511      	str	r5, [sp, #68]	; 0x44
 8026f34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026f36:	801d      	strh	r5, [r3, #0]
 8026f38:	e5e3      	b.n	8026b02 <_svfprintf_r+0x6e>
 8026f3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026f3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8026f3e:	f045 0510 	orr.w	r5, r5, #16
 8026f42:	950a      	str	r5, [sp, #40]	; 0x28
 8026f44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026f46:	f015 0110 	ands.w	r1, r5, #16
 8026f4a:	d00d      	beq.n	8026f68 <_svfprintf_r+0x4d4>
 8026f4c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026f4e:	2200      	movs	r2, #0
 8026f50:	682b      	ldr	r3, [r5, #0]
 8026f52:	3504      	adds	r5, #4
 8026f54:	9511      	str	r5, [sp, #68]	; 0x44
 8026f56:	1a99      	subs	r1, r3, r2
 8026f58:	bf18      	it	ne
 8026f5a:	2101      	movne	r1, #1
 8026f5c:	e72b      	b.n	8026db6 <_svfprintf_r+0x322>
 8026f5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026f60:	9317      	str	r3, [sp, #92]	; 0x5c
 8026f62:	f015 0110 	ands.w	r1, r5, #16
 8026f66:	d1f1      	bne.n	8026f4c <_svfprintf_r+0x4b8>
 8026f68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026f6a:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 8026f6e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026f70:	bf1a      	itte	ne
 8026f72:	460a      	movne	r2, r1
 8026f74:	882b      	ldrhne	r3, [r5, #0]
 8026f76:	682b      	ldreq	r3, [r5, #0]
 8026f78:	3504      	adds	r5, #4
 8026f7a:	9511      	str	r5, [sp, #68]	; 0x44
 8026f7c:	1c19      	adds	r1, r3, #0
 8026f7e:	bf18      	it	ne
 8026f80:	2101      	movne	r1, #1
 8026f82:	e718      	b.n	8026db6 <_svfprintf_r+0x322>
 8026f84:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026f86:	9317      	str	r3, [sp, #92]	; 0x5c
 8026f88:	06e8      	lsls	r0, r5, #27
 8026f8a:	d49d      	bmi.n	8026ec8 <_svfprintf_r+0x434>
 8026f8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026f8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026f92:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026f94:	bf0c      	ite	eq
 8026f96:	682b      	ldreq	r3, [r5, #0]
 8026f98:	f9b5 3000 	ldrshne.w	r3, [r5]
 8026f9c:	3504      	adds	r5, #4
 8026f9e:	9511      	str	r5, [sp, #68]	; 0x44
 8026fa0:	2b00      	cmp	r3, #0
 8026fa2:	da97      	bge.n	8026ed4 <_svfprintf_r+0x440>
 8026fa4:	425b      	negs	r3, r3
 8026fa6:	1c19      	adds	r1, r3, #0
 8026fa8:	bf18      	it	ne
 8026faa:	2101      	movne	r1, #1
 8026fac:	222d      	movs	r2, #45	; 0x2d
 8026fae:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8026fb2:	2201      	movs	r2, #1
 8026fb4:	e702      	b.n	8026dbc <_svfprintf_r+0x328>
 8026fb6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026fb8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8026fbc:	950a      	str	r5, [sp, #40]	; 0x28
 8026fbe:	e5e0      	b.n	8026b82 <_svfprintf_r+0xee>
 8026fc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026fc2:	f045 0501 	orr.w	r5, r5, #1
 8026fc6:	950a      	str	r5, [sp, #40]	; 0x28
 8026fc8:	e5db      	b.n	8026b82 <_svfprintf_r+0xee>
 8026fca:	4d65      	ldr	r5, [pc, #404]	; (8027160 <_svfprintf_r+0x6cc>)
 8026fcc:	9317      	str	r3, [sp, #92]	; 0x5c
 8026fce:	9520      	str	r5, [sp, #128]	; 0x80
 8026fd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026fd2:	06eb      	lsls	r3, r5, #27
 8026fd4:	d489      	bmi.n	8026eea <_svfprintf_r+0x456>
 8026fd6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026fd8:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026fdc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026fde:	bf0c      	ite	eq
 8026fe0:	682b      	ldreq	r3, [r5, #0]
 8026fe2:	882b      	ldrhne	r3, [r5, #0]
 8026fe4:	3504      	adds	r5, #4
 8026fe6:	9511      	str	r5, [sp, #68]	; 0x44
 8026fe8:	e783      	b.n	8026ef2 <_svfprintf_r+0x45e>
 8026fea:	9317      	str	r3, [sp, #92]	; 0x5c
 8026fec:	2501      	movs	r5, #1
 8026fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026ff0:	950b      	str	r5, [sp, #44]	; 0x2c
 8026ff2:	1d1d      	adds	r5, r3, #4
 8026ff4:	9511      	str	r5, [sp, #68]	; 0x44
 8026ff6:	681a      	ldr	r2, [r3, #0]
 8026ff8:	2501      	movs	r5, #1
 8026ffa:	2300      	movs	r3, #0
 8026ffc:	950e      	str	r5, [sp, #56]	; 0x38
 8026ffe:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8027002:	ad33      	add	r5, sp, #204	; 0xcc
 8027004:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
 8027008:	9513      	str	r5, [sp, #76]	; 0x4c
 802700a:	e716      	b.n	8026e3a <_svfprintf_r+0x3a6>
 802700c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802700e:	9317      	str	r3, [sp, #92]	; 0x5c
 8027010:	f045 0510 	orr.w	r5, r5, #16
 8027014:	950a      	str	r5, [sp, #40]	; 0x28
 8027016:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027018:	06ea      	lsls	r2, r5, #27
 802701a:	f53f aec4 	bmi.w	8026da6 <_svfprintf_r+0x312>
 802701e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027020:	f015 0f40 	tst.w	r5, #64	; 0x40
 8027024:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027026:	bf14      	ite	ne
 8027028:	882b      	ldrhne	r3, [r5, #0]
 802702a:	682b      	ldreq	r3, [r5, #0]
 802702c:	e6bd      	b.n	8026daa <_svfprintf_r+0x316>
 802702e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027030:	9317      	str	r3, [sp, #92]	; 0x5c
 8027032:	1deb      	adds	r3, r5, #7
 8027034:	f023 0307 	bic.w	r3, r3, #7
 8027038:	f103 0508 	add.w	r5, r3, #8
 802703c:	9511      	str	r5, [sp, #68]	; 0x44
 802703e:	f8d3 8000 	ldr.w	r8, [r3]
 8027042:	685f      	ldr	r7, [r3, #4]
 8027044:	4640      	mov	r0, r8
 8027046:	4642      	mov	r2, r8
 8027048:	4639      	mov	r1, r7
 802704a:	463b      	mov	r3, r7
 802704c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8027050:	f003 fe58 	bl	802ad04 <__fpclassifyd>
 8027054:	2801      	cmp	r0, #1
 8027056:	4640      	mov	r0, r8
 8027058:	f040 83d4 	bne.w	8027804 <_svfprintf_r+0xd70>
 802705c:	2300      	movs	r3, #0
 802705e:	2200      	movs	r2, #0
 8027060:	4639      	mov	r1, r7
 8027062:	f005 fa41 	bl	802c4e8 <__aeabi_dcmplt>
 8027066:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 802706a:	b110      	cbz	r0, 8027072 <_svfprintf_r+0x5de>
 802706c:	232d      	movs	r3, #45	; 0x2d
 802706e:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8027072:	2503      	movs	r5, #3
 8027074:	950b      	str	r5, [sp, #44]	; 0x2c
 8027076:	2500      	movs	r5, #0
 8027078:	9514      	str	r5, [sp, #80]	; 0x50
 802707a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802707c:	4a39      	ldr	r2, [pc, #228]	; (8027164 <_svfprintf_r+0x6d0>)
 802707e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8027082:	4939      	ldr	r1, [pc, #228]	; (8027168 <_svfprintf_r+0x6d4>)
 8027084:	950a      	str	r5, [sp, #40]	; 0x28
 8027086:	2503      	movs	r5, #3
 8027088:	950e      	str	r5, [sp, #56]	; 0x38
 802708a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802708c:	2d47      	cmp	r5, #71	; 0x47
 802708e:	bfd8      	it	le
 8027090:	4611      	movle	r1, r2
 8027092:	2500      	movs	r5, #0
 8027094:	9113      	str	r1, [sp, #76]	; 0x4c
 8027096:	9518      	str	r5, [sp, #96]	; 0x60
 8027098:	e633      	b.n	8026d02 <_svfprintf_r+0x26e>
 802709a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802709c:	f045 0508 	orr.w	r5, r5, #8
 80270a0:	950a      	str	r5, [sp, #40]	; 0x28
 80270a2:	e56e      	b.n	8026b82 <_svfprintf_r+0xee>
 80270a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80270a6:	2078      	movs	r0, #120	; 0x78
 80270a8:	2230      	movs	r2, #48	; 0x30
 80270aa:	9017      	str	r0, [sp, #92]	; 0x5c
 80270ac:	1d1d      	adds	r5, r3, #4
 80270ae:	9511      	str	r5, [sp, #68]	; 0x44
 80270b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80270b2:	681b      	ldr	r3, [r3, #0]
 80270b4:	f045 0502 	orr.w	r5, r5, #2
 80270b8:	950a      	str	r5, [sp, #40]	; 0x28
 80270ba:	4d28      	ldr	r5, [pc, #160]	; (802715c <_svfprintf_r+0x6c8>)
 80270bc:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 80270c0:	2202      	movs	r2, #2
 80270c2:	1c19      	adds	r1, r3, #0
 80270c4:	f88d 011d 	strb.w	r0, [sp, #285]	; 0x11d
 80270c8:	bf18      	it	ne
 80270ca:	2101      	movne	r1, #1
 80270cc:	9520      	str	r5, [sp, #128]	; 0x80
 80270ce:	e672      	b.n	8026db6 <_svfprintf_r+0x322>
 80270d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80270d2:	1d2b      	adds	r3, r5, #4
 80270d4:	682c      	ldr	r4, [r5, #0]
 80270d6:	2c00      	cmp	r4, #0
 80270d8:	bfbc      	itt	lt
 80270da:	9311      	strlt	r3, [sp, #68]	; 0x44
 80270dc:	f04f 34ff 	movlt.w	r4, #4294967295
 80270e0:	f6ff ad4f 	blt.w	8026b82 <_svfprintf_r+0xee>
 80270e4:	9311      	str	r3, [sp, #68]	; 0x44
 80270e6:	e54c      	b.n	8026b82 <_svfprintf_r+0xee>
 80270e8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80270ea:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80270ee:	b16b      	cbz	r3, 802710c <_svfprintf_r+0x678>
 80270f0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80270f2:	ab47      	add	r3, sp, #284	; 0x11c
 80270f4:	3303      	adds	r3, #3
 80270f6:	6033      	str	r3, [r6, #0]
 80270f8:	3401      	adds	r4, #1
 80270fa:	2301      	movs	r3, #1
 80270fc:	2c07      	cmp	r4, #7
 80270fe:	6073      	str	r3, [r6, #4]
 8027100:	441d      	add	r5, r3
 8027102:	943e      	str	r4, [sp, #248]	; 0xf8
 8027104:	953f      	str	r5, [sp, #252]	; 0xfc
 8027106:	f300 81f8 	bgt.w	80274fa <_svfprintf_r+0xa66>
 802710a:	3608      	adds	r6, #8
 802710c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802710e:	b163      	cbz	r3, 802712a <_svfprintf_r+0x696>
 8027110:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027112:	ab47      	add	r3, sp, #284	; 0x11c
 8027114:	6033      	str	r3, [r6, #0]
 8027116:	2302      	movs	r3, #2
 8027118:	3401      	adds	r4, #1
 802711a:	6073      	str	r3, [r6, #4]
 802711c:	2c07      	cmp	r4, #7
 802711e:	441d      	add	r5, r3
 8027120:	943e      	str	r4, [sp, #248]	; 0xf8
 8027122:	953f      	str	r5, [sp, #252]	; 0xfc
 8027124:	f300 81f4 	bgt.w	8027510 <_svfprintf_r+0xa7c>
 8027128:	3608      	adds	r6, #8
 802712a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802712c:	2b80      	cmp	r3, #128	; 0x80
 802712e:	f000 812e 	beq.w	802738e <_svfprintf_r+0x8fa>
 8027132:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027134:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027136:	1a1f      	subs	r7, r3, r0
 8027138:	2f00      	cmp	r7, #0
 802713a:	dd42      	ble.n	80271c2 <_svfprintf_r+0x72e>
 802713c:	2f10      	cmp	r7, #16
 802713e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027140:	bfd8      	it	le
 8027142:	f8df 802c 	ldrle.w	r8, [pc, #44]	; 8027170 <_svfprintf_r+0x6dc>
 8027146:	dd31      	ble.n	80271ac <_svfprintf_r+0x718>
 8027148:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8027170 <_svfprintf_r+0x6dc>
 802714c:	4623      	mov	r3, r4
 802714e:	f04f 0910 	mov.w	r9, #16
 8027152:	4644      	mov	r4, r8
 8027154:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8027158:	e00f      	b.n	802717a <_svfprintf_r+0x6e6>
 802715a:	bf00      	nop
 802715c:	08035eb0 	.word	0x08035eb0
 8027160:	08035e9c 	.word	0x08035e9c
 8027164:	08035e8c 	.word	0x08035e8c
 8027168:	08035e90 	.word	0x08035e90
 802716c:	0802e80c 	.word	0x0802e80c
 8027170:	0802e81c 	.word	0x0802e81c
 8027174:	3f10      	subs	r7, #16
 8027176:	2f10      	cmp	r7, #16
 8027178:	dd16      	ble.n	80271a8 <_svfprintf_r+0x714>
 802717a:	3301      	adds	r3, #1
 802717c:	e886 0210 	stmia.w	r6, {r4, r9}
 8027180:	3510      	adds	r5, #16
 8027182:	3608      	adds	r6, #8
 8027184:	2b07      	cmp	r3, #7
 8027186:	933e      	str	r3, [sp, #248]	; 0xf8
 8027188:	953f      	str	r5, [sp, #252]	; 0xfc
 802718a:	ddf3      	ble.n	8027174 <_svfprintf_r+0x6e0>
 802718c:	4640      	mov	r0, r8
 802718e:	4659      	mov	r1, fp
 8027190:	aa3d      	add	r2, sp, #244	; 0xf4
 8027192:	ae23      	add	r6, sp, #140	; 0x8c
 8027194:	f003 fe44 	bl	802ae20 <__ssprint_r>
 8027198:	2800      	cmp	r0, #0
 802719a:	f47f ad79 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 802719e:	3f10      	subs	r7, #16
 80271a0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80271a2:	2f10      	cmp	r7, #16
 80271a4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80271a6:	dce8      	bgt.n	802717a <_svfprintf_r+0x6e6>
 80271a8:	46a0      	mov	r8, r4
 80271aa:	461c      	mov	r4, r3
 80271ac:	3401      	adds	r4, #1
 80271ae:	f8c6 8000 	str.w	r8, [r6]
 80271b2:	2c07      	cmp	r4, #7
 80271b4:	6077      	str	r7, [r6, #4]
 80271b6:	443d      	add	r5, r7
 80271b8:	943e      	str	r4, [sp, #248]	; 0xf8
 80271ba:	953f      	str	r5, [sp, #252]	; 0xfc
 80271bc:	f300 8192 	bgt.w	80274e4 <_svfprintf_r+0xa50>
 80271c0:	3608      	adds	r6, #8
 80271c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80271c4:	05ca      	lsls	r2, r1, #23
 80271c6:	d475      	bmi.n	80272b4 <_svfprintf_r+0x820>
 80271c8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80271ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80271cc:	3401      	adds	r4, #1
 80271ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80271d0:	2c07      	cmp	r4, #7
 80271d2:	441d      	add	r5, r3
 80271d4:	6073      	str	r3, [r6, #4]
 80271d6:	6030      	str	r0, [r6, #0]
 80271d8:	953f      	str	r5, [sp, #252]	; 0xfc
 80271da:	943e      	str	r4, [sp, #248]	; 0xf8
 80271dc:	dc5f      	bgt.n	802729e <_svfprintf_r+0x80a>
 80271de:	3608      	adds	r6, #8
 80271e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80271e2:	074b      	lsls	r3, r1, #29
 80271e4:	d541      	bpl.n	802726a <_svfprintf_r+0x7d6>
 80271e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80271e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80271ea:	1ad7      	subs	r7, r2, r3
 80271ec:	2f00      	cmp	r7, #0
 80271ee:	dd3c      	ble.n	802726a <_svfprintf_r+0x7d6>
 80271f0:	2f10      	cmp	r7, #16
 80271f2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80271f4:	bfd8      	it	le
 80271f6:	f8df 8334 	ldrle.w	r8, [pc, #820]	; 802752c <_svfprintf_r+0xa98>
 80271fa:	dd24      	ble.n	8027246 <_svfprintf_r+0x7b2>
 80271fc:	f8df 832c 	ldr.w	r8, [pc, #812]	; 802752c <_svfprintf_r+0xa98>
 8027200:	4623      	mov	r3, r4
 8027202:	f04f 0910 	mov.w	r9, #16
 8027206:	4644      	mov	r4, r8
 8027208:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 802720c:	e002      	b.n	8027214 <_svfprintf_r+0x780>
 802720e:	3f10      	subs	r7, #16
 8027210:	2f10      	cmp	r7, #16
 8027212:	dd16      	ble.n	8027242 <_svfprintf_r+0x7ae>
 8027214:	3301      	adds	r3, #1
 8027216:	e886 0210 	stmia.w	r6, {r4, r9}
 802721a:	3510      	adds	r5, #16
 802721c:	3608      	adds	r6, #8
 802721e:	2b07      	cmp	r3, #7
 8027220:	933e      	str	r3, [sp, #248]	; 0xf8
 8027222:	953f      	str	r5, [sp, #252]	; 0xfc
 8027224:	ddf3      	ble.n	802720e <_svfprintf_r+0x77a>
 8027226:	4640      	mov	r0, r8
 8027228:	4659      	mov	r1, fp
 802722a:	aa3d      	add	r2, sp, #244	; 0xf4
 802722c:	ae23      	add	r6, sp, #140	; 0x8c
 802722e:	f003 fdf7 	bl	802ae20 <__ssprint_r>
 8027232:	2800      	cmp	r0, #0
 8027234:	f47f ad2c 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027238:	3f10      	subs	r7, #16
 802723a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802723c:	2f10      	cmp	r7, #16
 802723e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8027240:	dce8      	bgt.n	8027214 <_svfprintf_r+0x780>
 8027242:	46a0      	mov	r8, r4
 8027244:	461c      	mov	r4, r3
 8027246:	3401      	adds	r4, #1
 8027248:	f8c6 8000 	str.w	r8, [r6]
 802724c:	2c07      	cmp	r4, #7
 802724e:	6077      	str	r7, [r6, #4]
 8027250:	443d      	add	r5, r7
 8027252:	943e      	str	r4, [sp, #248]	; 0xf8
 8027254:	953f      	str	r5, [sp, #252]	; 0xfc
 8027256:	dd08      	ble.n	802726a <_svfprintf_r+0x7d6>
 8027258:	9810      	ldr	r0, [sp, #64]	; 0x40
 802725a:	4659      	mov	r1, fp
 802725c:	aa3d      	add	r2, sp, #244	; 0xf4
 802725e:	f003 fddf 	bl	802ae20 <__ssprint_r>
 8027262:	2800      	cmp	r0, #0
 8027264:	f47f ad14 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027268:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802726a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802726c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802726e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027270:	4291      	cmp	r1, r2
 8027272:	bfac      	ite	ge
 8027274:	1840      	addge	r0, r0, r1
 8027276:	1880      	addlt	r0, r0, r2
 8027278:	900d      	str	r0, [sp, #52]	; 0x34
 802727a:	2d00      	cmp	r5, #0
 802727c:	f040 8124 	bne.w	80274c8 <_svfprintf_r+0xa34>
 8027280:	2300      	movs	r3, #0
 8027282:	ae23      	add	r6, sp, #140	; 0x8c
 8027284:	933e      	str	r3, [sp, #248]	; 0xf8
 8027286:	e43c      	b.n	8026b02 <_svfprintf_r+0x6e>
 8027288:	46a0      	mov	r8, r4
 802728a:	461c      	mov	r4, r3
 802728c:	3401      	adds	r4, #1
 802728e:	f8c6 8000 	str.w	r8, [r6]
 8027292:	2c07      	cmp	r4, #7
 8027294:	6077      	str	r7, [r6, #4]
 8027296:	443d      	add	r5, r7
 8027298:	943e      	str	r4, [sp, #248]	; 0xf8
 802729a:	953f      	str	r5, [sp, #252]	; 0xfc
 802729c:	dd9f      	ble.n	80271de <_svfprintf_r+0x74a>
 802729e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80272a0:	4659      	mov	r1, fp
 80272a2:	aa3d      	add	r2, sp, #244	; 0xf4
 80272a4:	f003 fdbc 	bl	802ae20 <__ssprint_r>
 80272a8:	2800      	cmp	r0, #0
 80272aa:	f47f acf1 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 80272ae:	ae23      	add	r6, sp, #140	; 0x8c
 80272b0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80272b2:	e795      	b.n	80271e0 <_svfprintf_r+0x74c>
 80272b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80272b6:	2965      	cmp	r1, #101	; 0x65
 80272b8:	f340 80a6 	ble.w	8027408 <_svfprintf_r+0x974>
 80272bc:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80272c0:	2200      	movs	r2, #0
 80272c2:	2300      	movs	r3, #0
 80272c4:	f005 f906 	bl	802c4d4 <__aeabi_dcmpeq>
 80272c8:	2800      	cmp	r0, #0
 80272ca:	f000 8133 	beq.w	8027534 <_svfprintf_r+0xaa0>
 80272ce:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80272d0:	2301      	movs	r3, #1
 80272d2:	6073      	str	r3, [r6, #4]
 80272d4:	3501      	adds	r5, #1
 80272d6:	3401      	adds	r4, #1
 80272d8:	4b93      	ldr	r3, [pc, #588]	; (8027528 <_svfprintf_r+0xa94>)
 80272da:	2c07      	cmp	r4, #7
 80272dc:	6033      	str	r3, [r6, #0]
 80272de:	953f      	str	r5, [sp, #252]	; 0xfc
 80272e0:	943e      	str	r4, [sp, #248]	; 0xf8
 80272e2:	f300 82b8 	bgt.w	8027856 <_svfprintf_r+0xdc2>
 80272e6:	3608      	adds	r6, #8
 80272e8:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80272ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80272ec:	429a      	cmp	r2, r3
 80272ee:	dc03      	bgt.n	80272f8 <_svfprintf_r+0x864>
 80272f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80272f2:	07db      	lsls	r3, r3, #31
 80272f4:	f57f af74 	bpl.w	80271e0 <_svfprintf_r+0x74c>
 80272f8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80272fa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80272fc:	3401      	adds	r4, #1
 80272fe:	9919      	ldr	r1, [sp, #100]	; 0x64
 8027300:	2c07      	cmp	r4, #7
 8027302:	4405      	add	r5, r0
 8027304:	6070      	str	r0, [r6, #4]
 8027306:	6031      	str	r1, [r6, #0]
 8027308:	953f      	str	r5, [sp, #252]	; 0xfc
 802730a:	943e      	str	r4, [sp, #248]	; 0xf8
 802730c:	f300 8303 	bgt.w	8027916 <_svfprintf_r+0xe82>
 8027310:	3608      	adds	r6, #8
 8027312:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027314:	1e57      	subs	r7, r2, #1
 8027316:	2f00      	cmp	r7, #0
 8027318:	f77f af62 	ble.w	80271e0 <_svfprintf_r+0x74c>
 802731c:	2f10      	cmp	r7, #16
 802731e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027320:	f340 84e0 	ble.w	8027ce4 <_svfprintf_r+0x1250>
 8027324:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8027530 <_svfprintf_r+0xa9c>
 8027328:	4623      	mov	r3, r4
 802732a:	f04f 0910 	mov.w	r9, #16
 802732e:	4644      	mov	r4, r8
 8027330:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8027334:	e002      	b.n	802733c <_svfprintf_r+0x8a8>
 8027336:	3f10      	subs	r7, #16
 8027338:	2f10      	cmp	r7, #16
 802733a:	dda5      	ble.n	8027288 <_svfprintf_r+0x7f4>
 802733c:	3301      	adds	r3, #1
 802733e:	e886 0210 	stmia.w	r6, {r4, r9}
 8027342:	3510      	adds	r5, #16
 8027344:	3608      	adds	r6, #8
 8027346:	2b07      	cmp	r3, #7
 8027348:	933e      	str	r3, [sp, #248]	; 0xf8
 802734a:	953f      	str	r5, [sp, #252]	; 0xfc
 802734c:	ddf3      	ble.n	8027336 <_svfprintf_r+0x8a2>
 802734e:	4640      	mov	r0, r8
 8027350:	4659      	mov	r1, fp
 8027352:	aa3d      	add	r2, sp, #244	; 0xf4
 8027354:	ae23      	add	r6, sp, #140	; 0x8c
 8027356:	f003 fd63 	bl	802ae20 <__ssprint_r>
 802735a:	2800      	cmp	r0, #0
 802735c:	f47f ac98 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027360:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027362:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8027364:	e7e7      	b.n	8027336 <_svfprintf_r+0x8a2>
 8027366:	2a00      	cmp	r2, #0
 8027368:	f040 80b8 	bne.w	80274dc <_svfprintf_r+0xa48>
 802736c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802736e:	07e9      	lsls	r1, r5, #31
 8027370:	bf5e      	ittt	pl
 8027372:	920e      	strpl	r2, [sp, #56]	; 0x38
 8027374:	ad3d      	addpl	r5, sp, #244	; 0xf4
 8027376:	9513      	strpl	r5, [sp, #76]	; 0x4c
 8027378:	f57f ad46 	bpl.w	8026e08 <_svfprintf_r+0x374>
 802737c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802737e:	2330      	movs	r3, #48	; 0x30
 8027380:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8027384:	950e      	str	r5, [sp, #56]	; 0x38
 8027386:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 802738a:	9513      	str	r5, [sp, #76]	; 0x4c
 802738c:	e53c      	b.n	8026e08 <_svfprintf_r+0x374>
 802738e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027392:	1a47      	subs	r7, r0, r1
 8027394:	2f00      	cmp	r7, #0
 8027396:	f77f aecc 	ble.w	8027132 <_svfprintf_r+0x69e>
 802739a:	2f10      	cmp	r7, #16
 802739c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802739e:	bfd8      	it	le
 80273a0:	f8df 818c 	ldrle.w	r8, [pc, #396]	; 8027530 <_svfprintf_r+0xa9c>
 80273a4:	dd24      	ble.n	80273f0 <_svfprintf_r+0x95c>
 80273a6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8027530 <_svfprintf_r+0xa9c>
 80273aa:	4623      	mov	r3, r4
 80273ac:	f04f 0910 	mov.w	r9, #16
 80273b0:	4644      	mov	r4, r8
 80273b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80273b6:	e002      	b.n	80273be <_svfprintf_r+0x92a>
 80273b8:	3f10      	subs	r7, #16
 80273ba:	2f10      	cmp	r7, #16
 80273bc:	dd16      	ble.n	80273ec <_svfprintf_r+0x958>
 80273be:	3301      	adds	r3, #1
 80273c0:	e886 0210 	stmia.w	r6, {r4, r9}
 80273c4:	3510      	adds	r5, #16
 80273c6:	3608      	adds	r6, #8
 80273c8:	2b07      	cmp	r3, #7
 80273ca:	933e      	str	r3, [sp, #248]	; 0xf8
 80273cc:	953f      	str	r5, [sp, #252]	; 0xfc
 80273ce:	ddf3      	ble.n	80273b8 <_svfprintf_r+0x924>
 80273d0:	4640      	mov	r0, r8
 80273d2:	4659      	mov	r1, fp
 80273d4:	aa3d      	add	r2, sp, #244	; 0xf4
 80273d6:	ae23      	add	r6, sp, #140	; 0x8c
 80273d8:	f003 fd22 	bl	802ae20 <__ssprint_r>
 80273dc:	2800      	cmp	r0, #0
 80273de:	f47f ac57 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 80273e2:	3f10      	subs	r7, #16
 80273e4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80273e6:	2f10      	cmp	r7, #16
 80273e8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80273ea:	dce8      	bgt.n	80273be <_svfprintf_r+0x92a>
 80273ec:	46a0      	mov	r8, r4
 80273ee:	461c      	mov	r4, r3
 80273f0:	3401      	adds	r4, #1
 80273f2:	f8c6 8000 	str.w	r8, [r6]
 80273f6:	2c07      	cmp	r4, #7
 80273f8:	6077      	str	r7, [r6, #4]
 80273fa:	443d      	add	r5, r7
 80273fc:	943e      	str	r4, [sp, #248]	; 0xf8
 80273fe:	953f      	str	r5, [sp, #252]	; 0xfc
 8027400:	f300 81e8 	bgt.w	80277d4 <_svfprintf_r+0xd40>
 8027404:	3608      	adds	r6, #8
 8027406:	e694      	b.n	8027132 <_svfprintf_r+0x69e>
 8027408:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802740a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802740c:	2b01      	cmp	r3, #1
 802740e:	f340 8196 	ble.w	802773e <_svfprintf_r+0xcaa>
 8027412:	3401      	adds	r4, #1
 8027414:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8027416:	3501      	adds	r5, #1
 8027418:	2301      	movs	r3, #1
 802741a:	2c07      	cmp	r4, #7
 802741c:	6073      	str	r3, [r6, #4]
 802741e:	6031      	str	r1, [r6, #0]
 8027420:	953f      	str	r5, [sp, #252]	; 0xfc
 8027422:	943e      	str	r4, [sp, #248]	; 0xf8
 8027424:	f300 81a6 	bgt.w	8027774 <_svfprintf_r+0xce0>
 8027428:	3608      	adds	r6, #8
 802742a:	3401      	adds	r4, #1
 802742c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802742e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027430:	2c07      	cmp	r4, #7
 8027432:	441d      	add	r5, r3
 8027434:	6073      	str	r3, [r6, #4]
 8027436:	6032      	str	r2, [r6, #0]
 8027438:	943e      	str	r4, [sp, #248]	; 0xf8
 802743a:	953f      	str	r5, [sp, #252]	; 0xfc
 802743c:	f300 81a6 	bgt.w	802778c <_svfprintf_r+0xcf8>
 8027440:	3608      	adds	r6, #8
 8027442:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8027446:	2200      	movs	r2, #0
 8027448:	2300      	movs	r3, #0
 802744a:	f005 f843 	bl	802c4d4 <__aeabi_dcmpeq>
 802744e:	2800      	cmp	r0, #0
 8027450:	f040 80e1 	bne.w	8027616 <_svfprintf_r+0xb82>
 8027454:	9812      	ldr	r0, [sp, #72]	; 0x48
 8027456:	3401      	adds	r4, #1
 8027458:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802745a:	1e42      	subs	r2, r0, #1
 802745c:	6072      	str	r2, [r6, #4]
 802745e:	1c4b      	adds	r3, r1, #1
 8027460:	2c07      	cmp	r4, #7
 8027462:	6033      	str	r3, [r6, #0]
 8027464:	4415      	add	r5, r2
 8027466:	943e      	str	r4, [sp, #248]	; 0xf8
 8027468:	953f      	str	r5, [sp, #252]	; 0xfc
 802746a:	dc21      	bgt.n	80274b0 <_svfprintf_r+0xa1c>
 802746c:	3608      	adds	r6, #8
 802746e:	3401      	adds	r4, #1
 8027470:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027472:	2c07      	cmp	r4, #7
 8027474:	ab40      	add	r3, sp, #256	; 0x100
 8027476:	4405      	add	r5, r0
 8027478:	6033      	str	r3, [r6, #0]
 802747a:	6070      	str	r0, [r6, #4]
 802747c:	953f      	str	r5, [sp, #252]	; 0xfc
 802747e:	943e      	str	r4, [sp, #248]	; 0xf8
 8027480:	f77f aead 	ble.w	80271de <_svfprintf_r+0x74a>
 8027484:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027486:	4659      	mov	r1, fp
 8027488:	aa3d      	add	r2, sp, #244	; 0xf4
 802748a:	f003 fcc9 	bl	802ae20 <__ssprint_r>
 802748e:	2800      	cmp	r0, #0
 8027490:	f47f abfe 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027494:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027496:	ae23      	add	r6, sp, #140	; 0x8c
 8027498:	e6a2      	b.n	80271e0 <_svfprintf_r+0x74c>
 802749a:	46a0      	mov	r8, r4
 802749c:	461c      	mov	r4, r3
 802749e:	3401      	adds	r4, #1
 80274a0:	f8c6 8000 	str.w	r8, [r6]
 80274a4:	2c07      	cmp	r4, #7
 80274a6:	6077      	str	r7, [r6, #4]
 80274a8:	443d      	add	r5, r7
 80274aa:	943e      	str	r4, [sp, #248]	; 0xf8
 80274ac:	953f      	str	r5, [sp, #252]	; 0xfc
 80274ae:	dddd      	ble.n	802746c <_svfprintf_r+0x9d8>
 80274b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80274b2:	4659      	mov	r1, fp
 80274b4:	aa3d      	add	r2, sp, #244	; 0xf4
 80274b6:	f003 fcb3 	bl	802ae20 <__ssprint_r>
 80274ba:	2800      	cmp	r0, #0
 80274bc:	f47f abe8 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 80274c0:	ae23      	add	r6, sp, #140	; 0x8c
 80274c2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80274c4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80274c6:	e7d2      	b.n	802746e <_svfprintf_r+0x9da>
 80274c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80274ca:	4659      	mov	r1, fp
 80274cc:	aa3d      	add	r2, sp, #244	; 0xf4
 80274ce:	f003 fca7 	bl	802ae20 <__ssprint_r>
 80274d2:	2800      	cmp	r0, #0
 80274d4:	f43f aed4 	beq.w	8027280 <_svfprintf_r+0x7ec>
 80274d8:	f7ff bbda 	b.w	8026c90 <_svfprintf_r+0x1fc>
 80274dc:	ad3d      	add	r5, sp, #244	; 0xf4
 80274de:	910e      	str	r1, [sp, #56]	; 0x38
 80274e0:	9513      	str	r5, [sp, #76]	; 0x4c
 80274e2:	e491      	b.n	8026e08 <_svfprintf_r+0x374>
 80274e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80274e6:	4659      	mov	r1, fp
 80274e8:	aa3d      	add	r2, sp, #244	; 0xf4
 80274ea:	f003 fc99 	bl	802ae20 <__ssprint_r>
 80274ee:	2800      	cmp	r0, #0
 80274f0:	f47f abce 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 80274f4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80274f6:	ae23      	add	r6, sp, #140	; 0x8c
 80274f8:	e663      	b.n	80271c2 <_svfprintf_r+0x72e>
 80274fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80274fc:	4659      	mov	r1, fp
 80274fe:	aa3d      	add	r2, sp, #244	; 0xf4
 8027500:	f003 fc8e 	bl	802ae20 <__ssprint_r>
 8027504:	2800      	cmp	r0, #0
 8027506:	f47f abc3 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 802750a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802750c:	ae23      	add	r6, sp, #140	; 0x8c
 802750e:	e5fd      	b.n	802710c <_svfprintf_r+0x678>
 8027510:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027512:	4659      	mov	r1, fp
 8027514:	aa3d      	add	r2, sp, #244	; 0xf4
 8027516:	f003 fc83 	bl	802ae20 <__ssprint_r>
 802751a:	2800      	cmp	r0, #0
 802751c:	f47f abb8 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027520:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027522:	ae23      	add	r6, sp, #140	; 0x8c
 8027524:	e601      	b.n	802712a <_svfprintf_r+0x696>
 8027526:	bf00      	nop
 8027528:	08035ecc 	.word	0x08035ecc
 802752c:	0802e80c 	.word	0x0802e80c
 8027530:	0802e81c 	.word	0x0802e81c
 8027534:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8027536:	2f00      	cmp	r7, #0
 8027538:	f340 8198 	ble.w	802786c <_svfprintf_r+0xdd8>
 802753c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 802753e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027540:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027542:	428f      	cmp	r7, r1
 8027544:	bfa8      	it	ge
 8027546:	460f      	movge	r7, r1
 8027548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802754a:	2f00      	cmp	r7, #0
 802754c:	4403      	add	r3, r0
 802754e:	930e      	str	r3, [sp, #56]	; 0x38
 8027550:	dd0a      	ble.n	8027568 <_svfprintf_r+0xad4>
 8027552:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027554:	19ed      	adds	r5, r5, r7
 8027556:	6030      	str	r0, [r6, #0]
 8027558:	3401      	adds	r4, #1
 802755a:	6077      	str	r7, [r6, #4]
 802755c:	2c07      	cmp	r4, #7
 802755e:	953f      	str	r5, [sp, #252]	; 0xfc
 8027560:	943e      	str	r4, [sp, #248]	; 0xf8
 8027562:	f300 832a 	bgt.w	8027bba <_svfprintf_r+0x1126>
 8027566:	3608      	adds	r6, #8
 8027568:	9918      	ldr	r1, [sp, #96]	; 0x60
 802756a:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 802756e:	1bcf      	subs	r7, r1, r7
 8027570:	2f00      	cmp	r7, #0
 8027572:	f340 808c 	ble.w	802768e <_svfprintf_r+0xbfa>
 8027576:	2f10      	cmp	r7, #16
 8027578:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802757a:	bfd8      	it	le
 802757c:	f8df 8538 	ldrle.w	r8, [pc, #1336]	; 8027ab8 <_svfprintf_r+0x1024>
 8027580:	f340 815d 	ble.w	802783e <_svfprintf_r+0xdaa>
 8027584:	f8df 8530 	ldr.w	r8, [pc, #1328]	; 8027ab8 <_svfprintf_r+0x1024>
 8027588:	4623      	mov	r3, r4
 802758a:	f04f 0910 	mov.w	r9, #16
 802758e:	4644      	mov	r4, r8
 8027590:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8027594:	e003      	b.n	802759e <_svfprintf_r+0xb0a>
 8027596:	3f10      	subs	r7, #16
 8027598:	2f10      	cmp	r7, #16
 802759a:	f340 814e 	ble.w	802783a <_svfprintf_r+0xda6>
 802759e:	3301      	adds	r3, #1
 80275a0:	e886 0210 	stmia.w	r6, {r4, r9}
 80275a4:	3510      	adds	r5, #16
 80275a6:	3608      	adds	r6, #8
 80275a8:	2b07      	cmp	r3, #7
 80275aa:	933e      	str	r3, [sp, #248]	; 0xf8
 80275ac:	953f      	str	r5, [sp, #252]	; 0xfc
 80275ae:	ddf2      	ble.n	8027596 <_svfprintf_r+0xb02>
 80275b0:	4640      	mov	r0, r8
 80275b2:	4659      	mov	r1, fp
 80275b4:	aa3d      	add	r2, sp, #244	; 0xf4
 80275b6:	ae23      	add	r6, sp, #140	; 0x8c
 80275b8:	f003 fc32 	bl	802ae20 <__ssprint_r>
 80275bc:	2800      	cmp	r0, #0
 80275be:	f47f ab67 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 80275c2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80275c4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80275c6:	e7e6      	b.n	8027596 <_svfprintf_r+0xb02>
 80275c8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80275ca:	f10d 01f3 	add.w	r1, sp, #243	; 0xf3
 80275ce:	f003 000f 	and.w	r0, r3, #15
 80275d2:	460a      	mov	r2, r1
 80275d4:	3901      	subs	r1, #1
 80275d6:	091b      	lsrs	r3, r3, #4
 80275d8:	5c28      	ldrb	r0, [r5, r0]
 80275da:	7010      	strb	r0, [r2, #0]
 80275dc:	d1f7      	bne.n	80275ce <_svfprintf_r+0xb3a>
 80275de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80275e0:	9213      	str	r2, [sp, #76]	; 0x4c
 80275e2:	1aad      	subs	r5, r5, r2
 80275e4:	950e      	str	r5, [sp, #56]	; 0x38
 80275e6:	e40f      	b.n	8026e08 <_svfprintf_r+0x374>
 80275e8:	2b09      	cmp	r3, #9
 80275ea:	f200 80db 	bhi.w	80277a4 <_svfprintf_r+0xd10>
 80275ee:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80275f0:	3330      	adds	r3, #48	; 0x30
 80275f2:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 80275f6:	950e      	str	r5, [sp, #56]	; 0x38
 80275f8:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 80275fc:	9513      	str	r5, [sp, #76]	; 0x4c
 80275fe:	e403      	b.n	8026e08 <_svfprintf_r+0x374>
 8027600:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027602:	4659      	mov	r1, fp
 8027604:	aa3d      	add	r2, sp, #244	; 0xf4
 8027606:	f003 fc0b 	bl	802ae20 <__ssprint_r>
 802760a:	2800      	cmp	r0, #0
 802760c:	f47f ab40 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027610:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027612:	ae23      	add	r6, sp, #140	; 0x8c
 8027614:	e569      	b.n	80270ea <_svfprintf_r+0x656>
 8027616:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027618:	1e57      	subs	r7, r2, #1
 802761a:	2f00      	cmp	r7, #0
 802761c:	f77f af27 	ble.w	802746e <_svfprintf_r+0x9da>
 8027620:	2f10      	cmp	r7, #16
 8027622:	f8df 8494 	ldr.w	r8, [pc, #1172]	; 8027ab8 <_svfprintf_r+0x1024>
 8027626:	f77f af3a 	ble.w	802749e <_svfprintf_r+0xa0a>
 802762a:	4623      	mov	r3, r4
 802762c:	f04f 0910 	mov.w	r9, #16
 8027630:	4644      	mov	r4, r8
 8027632:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8027636:	e003      	b.n	8027640 <_svfprintf_r+0xbac>
 8027638:	3f10      	subs	r7, #16
 802763a:	2f10      	cmp	r7, #16
 802763c:	f77f af2d 	ble.w	802749a <_svfprintf_r+0xa06>
 8027640:	3301      	adds	r3, #1
 8027642:	e886 0210 	stmia.w	r6, {r4, r9}
 8027646:	3510      	adds	r5, #16
 8027648:	3608      	adds	r6, #8
 802764a:	2b07      	cmp	r3, #7
 802764c:	933e      	str	r3, [sp, #248]	; 0xf8
 802764e:	953f      	str	r5, [sp, #252]	; 0xfc
 8027650:	ddf2      	ble.n	8027638 <_svfprintf_r+0xba4>
 8027652:	4640      	mov	r0, r8
 8027654:	4659      	mov	r1, fp
 8027656:	aa3d      	add	r2, sp, #244	; 0xf4
 8027658:	ae23      	add	r6, sp, #140	; 0x8c
 802765a:	f003 fbe1 	bl	802ae20 <__ssprint_r>
 802765e:	2800      	cmp	r0, #0
 8027660:	f47f ab16 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027664:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027666:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8027668:	e7e6      	b.n	8027638 <_svfprintf_r+0xba4>
 802766a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802766c:	682b      	ldr	r3, [r5, #0]
 802766e:	3504      	adds	r5, #4
 8027670:	9511      	str	r5, [sp, #68]	; 0x44
 8027672:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027674:	601d      	str	r5, [r3, #0]
 8027676:	f7ff ba44 	b.w	8026b02 <_svfprintf_r+0x6e>
 802767a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802767c:	4659      	mov	r1, fp
 802767e:	aa3d      	add	r2, sp, #244	; 0xf4
 8027680:	f003 fbce 	bl	802ae20 <__ssprint_r>
 8027684:	2800      	cmp	r0, #0
 8027686:	f47f ab03 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 802768a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802768c:	ae23      	add	r6, sp, #140	; 0x8c
 802768e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8027690:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027692:	429a      	cmp	r2, r3
 8027694:	dc45      	bgt.n	8027722 <_svfprintf_r+0xc8e>
 8027696:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027698:	07c1      	lsls	r1, r0, #31
 802769a:	d442      	bmi.n	8027722 <_svfprintf_r+0xc8e>
 802769c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802769e:	9818      	ldr	r0, [sp, #96]	; 0x60
 80276a0:	180a      	adds	r2, r1, r0
 80276a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80276a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80276a6:	1ac3      	subs	r3, r0, r3
 80276a8:	1a8f      	subs	r7, r1, r2
 80276aa:	42bb      	cmp	r3, r7
 80276ac:	bfb8      	it	lt
 80276ae:	461f      	movlt	r7, r3
 80276b0:	2f00      	cmp	r7, #0
 80276b2:	dd0a      	ble.n	80276ca <_svfprintf_r+0xc36>
 80276b4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80276b6:	19ed      	adds	r5, r5, r7
 80276b8:	6032      	str	r2, [r6, #0]
 80276ba:	3401      	adds	r4, #1
 80276bc:	6077      	str	r7, [r6, #4]
 80276be:	2c07      	cmp	r4, #7
 80276c0:	953f      	str	r5, [sp, #252]	; 0xfc
 80276c2:	943e      	str	r4, [sp, #248]	; 0xf8
 80276c4:	f300 8284 	bgt.w	8027bd0 <_svfprintf_r+0x113c>
 80276c8:	3608      	adds	r6, #8
 80276ca:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80276ce:	1bdf      	subs	r7, r3, r7
 80276d0:	2f00      	cmp	r7, #0
 80276d2:	f77f ad85 	ble.w	80271e0 <_svfprintf_r+0x74c>
 80276d6:	2f10      	cmp	r7, #16
 80276d8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80276da:	f340 8303 	ble.w	8027ce4 <_svfprintf_r+0x1250>
 80276de:	f8df 83d8 	ldr.w	r8, [pc, #984]	; 8027ab8 <_svfprintf_r+0x1024>
 80276e2:	4623      	mov	r3, r4
 80276e4:	f04f 0910 	mov.w	r9, #16
 80276e8:	4644      	mov	r4, r8
 80276ea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80276ee:	e003      	b.n	80276f8 <_svfprintf_r+0xc64>
 80276f0:	3f10      	subs	r7, #16
 80276f2:	2f10      	cmp	r7, #16
 80276f4:	f77f adc8 	ble.w	8027288 <_svfprintf_r+0x7f4>
 80276f8:	3301      	adds	r3, #1
 80276fa:	e886 0210 	stmia.w	r6, {r4, r9}
 80276fe:	3510      	adds	r5, #16
 8027700:	3608      	adds	r6, #8
 8027702:	2b07      	cmp	r3, #7
 8027704:	933e      	str	r3, [sp, #248]	; 0xf8
 8027706:	953f      	str	r5, [sp, #252]	; 0xfc
 8027708:	ddf2      	ble.n	80276f0 <_svfprintf_r+0xc5c>
 802770a:	4640      	mov	r0, r8
 802770c:	4659      	mov	r1, fp
 802770e:	aa3d      	add	r2, sp, #244	; 0xf4
 8027710:	ae23      	add	r6, sp, #140	; 0x8c
 8027712:	f003 fb85 	bl	802ae20 <__ssprint_r>
 8027716:	2800      	cmp	r0, #0
 8027718:	f47f aaba 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 802771c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802771e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8027720:	e7e6      	b.n	80276f0 <_svfprintf_r+0xc5c>
 8027722:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027724:	991a      	ldr	r1, [sp, #104]	; 0x68
 8027726:	3401      	adds	r4, #1
 8027728:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802772a:	2c07      	cmp	r4, #7
 802772c:	440d      	add	r5, r1
 802772e:	6071      	str	r1, [r6, #4]
 8027730:	6032      	str	r2, [r6, #0]
 8027732:	953f      	str	r5, [sp, #252]	; 0xfc
 8027734:	943e      	str	r4, [sp, #248]	; 0xf8
 8027736:	f300 826c 	bgt.w	8027c12 <_svfprintf_r+0x117e>
 802773a:	3608      	adds	r6, #8
 802773c:	e7ae      	b.n	802769c <_svfprintf_r+0xc08>
 802773e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027740:	07c2      	lsls	r2, r0, #31
 8027742:	f53f ae66 	bmi.w	8027412 <_svfprintf_r+0x97e>
 8027746:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027748:	3401      	adds	r4, #1
 802774a:	3501      	adds	r5, #1
 802774c:	6033      	str	r3, [r6, #0]
 802774e:	2301      	movs	r3, #1
 8027750:	2c07      	cmp	r4, #7
 8027752:	6073      	str	r3, [r6, #4]
 8027754:	953f      	str	r5, [sp, #252]	; 0xfc
 8027756:	943e      	str	r4, [sp, #248]	; 0xf8
 8027758:	f77f ae88 	ble.w	802746c <_svfprintf_r+0x9d8>
 802775c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802775e:	4659      	mov	r1, fp
 8027760:	aa3d      	add	r2, sp, #244	; 0xf4
 8027762:	f003 fb5d 	bl	802ae20 <__ssprint_r>
 8027766:	2800      	cmp	r0, #0
 8027768:	f47f aa92 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 802776c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802776e:	ae23      	add	r6, sp, #140	; 0x8c
 8027770:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027772:	e67c      	b.n	802746e <_svfprintf_r+0x9da>
 8027774:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027776:	4659      	mov	r1, fp
 8027778:	aa3d      	add	r2, sp, #244	; 0xf4
 802777a:	f003 fb51 	bl	802ae20 <__ssprint_r>
 802777e:	2800      	cmp	r0, #0
 8027780:	f47f aa86 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027784:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027786:	ae23      	add	r6, sp, #140	; 0x8c
 8027788:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802778a:	e64e      	b.n	802742a <_svfprintf_r+0x996>
 802778c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802778e:	4659      	mov	r1, fp
 8027790:	aa3d      	add	r2, sp, #244	; 0xf4
 8027792:	f003 fb45 	bl	802ae20 <__ssprint_r>
 8027796:	2800      	cmp	r0, #0
 8027798:	f47f aa7a 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 802779c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 802779e:	ae23      	add	r6, sp, #140	; 0x8c
 80277a0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80277a2:	e64e      	b.n	8027442 <_svfprintf_r+0x9ae>
 80277a4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80277a6:	f10d 00f3 	add.w	r0, sp, #243	; 0xf3
 80277aa:	fba5 1203 	umull	r1, r2, r5, r3
 80277ae:	4601      	mov	r1, r0
 80277b0:	3801      	subs	r0, #1
 80277b2:	08d2      	lsrs	r2, r2, #3
 80277b4:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80277b8:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 80277bc:	4613      	mov	r3, r2
 80277be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80277c2:	700a      	strb	r2, [r1, #0]
 80277c4:	2b00      	cmp	r3, #0
 80277c6:	d1f0      	bne.n	80277aa <_svfprintf_r+0xd16>
 80277c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277ca:	9113      	str	r1, [sp, #76]	; 0x4c
 80277cc:	1a5b      	subs	r3, r3, r1
 80277ce:	930e      	str	r3, [sp, #56]	; 0x38
 80277d0:	f7ff bb1a 	b.w	8026e08 <_svfprintf_r+0x374>
 80277d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80277d6:	4659      	mov	r1, fp
 80277d8:	aa3d      	add	r2, sp, #244	; 0xf4
 80277da:	f003 fb21 	bl	802ae20 <__ssprint_r>
 80277de:	2800      	cmp	r0, #0
 80277e0:	f47f aa56 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 80277e4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80277e6:	ae23      	add	r6, sp, #140	; 0x8c
 80277e8:	e4a3      	b.n	8027132 <_svfprintf_r+0x69e>
 80277ea:	2930      	cmp	r1, #48	; 0x30
 80277ec:	f000 81fe 	beq.w	8027bec <_svfprintf_r+0x1158>
 80277f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277f2:	1e95      	subs	r5, r2, #2
 80277f4:	9513      	str	r5, [sp, #76]	; 0x4c
 80277f6:	1b5b      	subs	r3, r3, r5
 80277f8:	930e      	str	r3, [sp, #56]	; 0x38
 80277fa:	2330      	movs	r3, #48	; 0x30
 80277fc:	f802 3c02 	strb.w	r3, [r2, #-2]
 8027800:	f7ff bb02 	b.w	8026e08 <_svfprintf_r+0x374>
 8027804:	4639      	mov	r1, r7
 8027806:	f003 fa7d 	bl	802ad04 <__fpclassifyd>
 802780a:	2800      	cmp	r0, #0
 802780c:	f040 808e 	bne.w	802792c <_svfprintf_r+0xe98>
 8027810:	2503      	movs	r5, #3
 8027812:	950b      	str	r5, [sp, #44]	; 0x2c
 8027814:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027816:	4aa5      	ldr	r2, [pc, #660]	; (8027aac <_svfprintf_r+0x1018>)
 8027818:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 802781c:	49a4      	ldr	r1, [pc, #656]	; (8027ab0 <_svfprintf_r+0x101c>)
 802781e:	950a      	str	r5, [sp, #40]	; 0x28
 8027820:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027822:	9014      	str	r0, [sp, #80]	; 0x50
 8027824:	2d47      	cmp	r5, #71	; 0x47
 8027826:	bfd8      	it	le
 8027828:	4611      	movle	r1, r2
 802782a:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 802782e:	2503      	movs	r5, #3
 8027830:	9113      	str	r1, [sp, #76]	; 0x4c
 8027832:	950e      	str	r5, [sp, #56]	; 0x38
 8027834:	9018      	str	r0, [sp, #96]	; 0x60
 8027836:	f7ff ba64 	b.w	8026d02 <_svfprintf_r+0x26e>
 802783a:	46a0      	mov	r8, r4
 802783c:	461c      	mov	r4, r3
 802783e:	3401      	adds	r4, #1
 8027840:	f8c6 8000 	str.w	r8, [r6]
 8027844:	2c07      	cmp	r4, #7
 8027846:	6077      	str	r7, [r6, #4]
 8027848:	443d      	add	r5, r7
 802784a:	943e      	str	r4, [sp, #248]	; 0xf8
 802784c:	953f      	str	r5, [sp, #252]	; 0xfc
 802784e:	f73f af14 	bgt.w	802767a <_svfprintf_r+0xbe6>
 8027852:	3608      	adds	r6, #8
 8027854:	e71b      	b.n	802768e <_svfprintf_r+0xbfa>
 8027856:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027858:	4659      	mov	r1, fp
 802785a:	aa3d      	add	r2, sp, #244	; 0xf4
 802785c:	f003 fae0 	bl	802ae20 <__ssprint_r>
 8027860:	2800      	cmp	r0, #0
 8027862:	f47f aa15 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027866:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027868:	ae23      	add	r6, sp, #140	; 0x8c
 802786a:	e53d      	b.n	80272e8 <_svfprintf_r+0x854>
 802786c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802786e:	2301      	movs	r3, #1
 8027870:	6073      	str	r3, [r6, #4]
 8027872:	3501      	adds	r5, #1
 8027874:	3401      	adds	r4, #1
 8027876:	4b8f      	ldr	r3, [pc, #572]	; (8027ab4 <_svfprintf_r+0x1020>)
 8027878:	2c07      	cmp	r4, #7
 802787a:	6033      	str	r3, [r6, #0]
 802787c:	953f      	str	r5, [sp, #252]	; 0xfc
 802787e:	943e      	str	r4, [sp, #248]	; 0xf8
 8027880:	f300 8152 	bgt.w	8027b28 <_svfprintf_r+0x1094>
 8027884:	3608      	adds	r6, #8
 8027886:	b92f      	cbnz	r7, 8027894 <_svfprintf_r+0xe00>
 8027888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802788a:	b91b      	cbnz	r3, 8027894 <_svfprintf_r+0xe00>
 802788c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802788e:	07c0      	lsls	r0, r0, #31
 8027890:	f57f aca6 	bpl.w	80271e0 <_svfprintf_r+0x74c>
 8027894:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027896:	991a      	ldr	r1, [sp, #104]	; 0x68
 8027898:	3401      	adds	r4, #1
 802789a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802789c:	2c07      	cmp	r4, #7
 802789e:	440d      	add	r5, r1
 80278a0:	6071      	str	r1, [r6, #4]
 80278a2:	6032      	str	r2, [r6, #0]
 80278a4:	953f      	str	r5, [sp, #252]	; 0xfc
 80278a6:	943e      	str	r4, [sp, #248]	; 0xf8
 80278a8:	f300 81fb 	bgt.w	8027ca2 <_svfprintf_r+0x120e>
 80278ac:	3608      	adds	r6, #8
 80278ae:	427f      	negs	r7, r7
 80278b0:	2f00      	cmp	r7, #0
 80278b2:	f340 8169 	ble.w	8027b88 <_svfprintf_r+0x10f4>
 80278b6:	2f10      	cmp	r7, #16
 80278b8:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8027ab8 <_svfprintf_r+0x1024>
 80278bc:	f340 819e 	ble.w	8027bfc <_svfprintf_r+0x1168>
 80278c0:	4623      	mov	r3, r4
 80278c2:	f04f 0910 	mov.w	r9, #16
 80278c6:	4644      	mov	r4, r8
 80278c8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80278cc:	e003      	b.n	80278d6 <_svfprintf_r+0xe42>
 80278ce:	3f10      	subs	r7, #16
 80278d0:	2f10      	cmp	r7, #16
 80278d2:	f340 8191 	ble.w	8027bf8 <_svfprintf_r+0x1164>
 80278d6:	3301      	adds	r3, #1
 80278d8:	e886 0210 	stmia.w	r6, {r4, r9}
 80278dc:	3510      	adds	r5, #16
 80278de:	3608      	adds	r6, #8
 80278e0:	2b07      	cmp	r3, #7
 80278e2:	933e      	str	r3, [sp, #248]	; 0xf8
 80278e4:	953f      	str	r5, [sp, #252]	; 0xfc
 80278e6:	ddf2      	ble.n	80278ce <_svfprintf_r+0xe3a>
 80278e8:	4640      	mov	r0, r8
 80278ea:	4659      	mov	r1, fp
 80278ec:	aa3d      	add	r2, sp, #244	; 0xf4
 80278ee:	f003 fa97 	bl	802ae20 <__ssprint_r>
 80278f2:	2800      	cmp	r0, #0
 80278f4:	f47f a9cc 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 80278f8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80278fa:	ae23      	add	r6, sp, #140	; 0x8c
 80278fc:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80278fe:	e7e6      	b.n	80278ce <_svfprintf_r+0xe3a>
 8027900:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027902:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027906:	950b      	str	r5, [sp, #44]	; 0x2c
 8027908:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802790a:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 802790e:	9711      	str	r7, [sp, #68]	; 0x44
 8027910:	9518      	str	r5, [sp, #96]	; 0x60
 8027912:	f7ff b9f6 	b.w	8026d02 <_svfprintf_r+0x26e>
 8027916:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027918:	4659      	mov	r1, fp
 802791a:	aa3d      	add	r2, sp, #244	; 0xf4
 802791c:	f003 fa80 	bl	802ae20 <__ssprint_r>
 8027920:	2800      	cmp	r0, #0
 8027922:	f47f a9b5 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027926:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027928:	ae23      	add	r6, sp, #140	; 0x8c
 802792a:	e4f2      	b.n	8027312 <_svfprintf_r+0x87e>
 802792c:	1c61      	adds	r1, r4, #1
 802792e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027930:	f000 8106 	beq.w	8027b40 <_svfprintf_r+0x10ac>
 8027934:	f1a5 0967 	sub.w	r9, r5, #103	; 0x67
 8027938:	f1d9 0300 	rsbs	r3, r9, #0
 802793c:	eb43 0309 	adc.w	r3, r3, r9
 8027940:	2d47      	cmp	r5, #71	; 0x47
 8027942:	bf08      	it	eq
 8027944:	f043 0301 	orreq.w	r3, r3, #1
 8027948:	2b00      	cmp	r3, #0
 802794a:	f000 81a8 	beq.w	8027c9e <_svfprintf_r+0x120a>
 802794e:	2c00      	cmp	r4, #0
 8027950:	f000 81c5 	beq.w	8027cde <_svfprintf_r+0x124a>
 8027954:	2501      	movs	r5, #1
 8027956:	950b      	str	r5, [sp, #44]	; 0x2c
 8027958:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802795a:	2f00      	cmp	r7, #0
 802795c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8027960:	950a      	str	r5, [sp, #40]	; 0x28
 8027962:	f2c0 81ab 	blt.w	8027cbc <_svfprintf_r+0x1228>
 8027966:	2500      	movs	r5, #0
 8027968:	9514      	str	r5, [sp, #80]	; 0x50
 802796a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802796c:	46a1      	mov	r9, r4
 802796e:	f1a5 0c66 	sub.w	ip, r5, #102	; 0x66
 8027972:	f1dc 0500 	rsbs	r5, ip, #0
 8027976:	eb45 050c 	adc.w	r5, r5, ip
 802797a:	9515      	str	r5, [sp, #84]	; 0x54
 802797c:	46ac      	mov	ip, r5
 802797e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027980:	2303      	movs	r3, #3
 8027982:	2d46      	cmp	r5, #70	; 0x46
 8027984:	bf08      	it	eq
 8027986:	f04c 0c01 	orreq.w	ip, ip, #1
 802798a:	f1bc 0f00 	cmp.w	ip, #0
 802798e:	d10f      	bne.n	80279b0 <_svfprintf_r+0xf1c>
 8027990:	f1a5 0e65 	sub.w	lr, r5, #101	; 0x65
 8027994:	f1de 0300 	rsbs	r3, lr, #0
 8027998:	eb43 030e 	adc.w	r3, r3, lr
 802799c:	2d45      	cmp	r5, #69	; 0x45
 802799e:	bf08      	it	eq
 80279a0:	f043 0301 	orreq.w	r3, r3, #1
 80279a4:	2b00      	cmp	r3, #0
 80279a6:	f000 818e 	beq.w	8027cc6 <_svfprintf_r+0x1232>
 80279aa:	f104 0901 	add.w	r9, r4, #1
 80279ae:	2302      	movs	r3, #2
 80279b0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80279b4:	a944      	add	r1, sp, #272	; 0x110
 80279b6:	970f      	str	r7, [sp, #60]	; 0x3c
 80279b8:	9300      	str	r3, [sp, #0]
 80279ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80279bc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80279c0:	9102      	str	r1, [sp, #8]
 80279c2:	a945      	add	r1, sp, #276	; 0x114
 80279c4:	f8cd c01c 	str.w	ip, [sp, #28]
 80279c8:	9103      	str	r1, [sp, #12]
 80279ca:	a946      	add	r1, sp, #280	; 0x118
 80279cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80279d0:	9104      	str	r1, [sp, #16]
 80279d2:	f001 f967 	bl	8028ca4 <_dtoa_r>
 80279d6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80279d8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80279dc:	f1b5 0367 	subs.w	r3, r5, #103	; 0x67
 80279e0:	bf18      	it	ne
 80279e2:	2301      	movne	r3, #1
 80279e4:	2d47      	cmp	r5, #71	; 0x47
 80279e6:	bf0c      	ite	eq
 80279e8:	2300      	moveq	r3, #0
 80279ea:	f003 0301 	andne.w	r3, r3, #1
 80279ee:	9013      	str	r0, [sp, #76]	; 0x4c
 80279f0:	b923      	cbnz	r3, 80279fc <_svfprintf_r+0xf68>
 80279f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80279f4:	07ed      	lsls	r5, r5, #31
 80279f6:	bf58      	it	pl
 80279f8:	9d46      	ldrpl	r5, [sp, #280]	; 0x118
 80279fa:	d515      	bpl.n	8027a28 <_svfprintf_r+0xf94>
 80279fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80279fe:	eb00 0509 	add.w	r5, r0, r9
 8027a02:	f1bc 0f00 	cmp.w	ip, #0
 8027a06:	d005      	beq.n	8027a14 <_svfprintf_r+0xf80>
 8027a08:	7803      	ldrb	r3, [r0, #0]
 8027a0a:	2b30      	cmp	r3, #48	; 0x30
 8027a0c:	f000 80a4 	beq.w	8027b58 <_svfprintf_r+0x10c4>
 8027a10:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8027a12:	18ed      	adds	r5, r5, r3
 8027a14:	4640      	mov	r0, r8
 8027a16:	2200      	movs	r2, #0
 8027a18:	2300      	movs	r3, #0
 8027a1a:	4639      	mov	r1, r7
 8027a1c:	f004 fd5a 	bl	802c4d4 <__aeabi_dcmpeq>
 8027a20:	2800      	cmp	r0, #0
 8027a22:	f000 8124 	beq.w	8027c6e <_svfprintf_r+0x11da>
 8027a26:	9546      	str	r5, [sp, #280]	; 0x118
 8027a28:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8027a2a:	1a6d      	subs	r5, r5, r1
 8027a2c:	9512      	str	r5, [sp, #72]	; 0x48
 8027a2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027a30:	2d00      	cmp	r5, #0
 8027a32:	f000 8106 	beq.w	8027c42 <_svfprintf_r+0x11ae>
 8027a36:	9944      	ldr	r1, [sp, #272]	; 0x110
 8027a38:	1cc8      	adds	r0, r1, #3
 8027a3a:	db02      	blt.n	8027a42 <_svfprintf_r+0xfae>
 8027a3c:	428c      	cmp	r4, r1
 8027a3e:	f280 8107 	bge.w	8027c50 <_svfprintf_r+0x11bc>
 8027a42:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027a44:	3d02      	subs	r5, #2
 8027a46:	9517      	str	r5, [sp, #92]	; 0x5c
 8027a48:	3901      	subs	r1, #1
 8027a4a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027a4c:	2900      	cmp	r1, #0
 8027a4e:	9144      	str	r1, [sp, #272]	; 0x110
 8027a50:	f88d 5100 	strb.w	r5, [sp, #256]	; 0x100
 8027a54:	f2c0 8175 	blt.w	8027d42 <_svfprintf_r+0x12ae>
 8027a58:	232b      	movs	r3, #43	; 0x2b
 8027a5a:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 8027a5e:	2909      	cmp	r1, #9
 8027a60:	f340 8134 	ble.w	8027ccc <_svfprintf_r+0x1238>
 8027a64:	ad43      	add	r5, sp, #268	; 0x10c
 8027a66:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8027a68:	3503      	adds	r5, #3
 8027a6a:	4628      	mov	r0, r5
 8027a6c:	fb87 3201 	smull	r3, r2, r7, r1
 8027a70:	17cb      	asrs	r3, r1, #31
 8027a72:	4604      	mov	r4, r0
 8027a74:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8027a78:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8027a7c:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8027a80:	4619      	mov	r1, r3
 8027a82:	3230      	adds	r2, #48	; 0x30
 8027a84:	2b09      	cmp	r3, #9
 8027a86:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8027a8a:	dcef      	bgt.n	8027a6c <_svfprintf_r+0xfd8>
 8027a8c:	3130      	adds	r1, #48	; 0x30
 8027a8e:	4622      	mov	r2, r4
 8027a90:	b2c9      	uxtb	r1, r1
 8027a92:	f802 1d02 	strb.w	r1, [r2, #-2]!
 8027a96:	4295      	cmp	r5, r2
 8027a98:	bf98      	it	ls
 8027a9a:	f50d 7181 	addls.w	r1, sp, #258	; 0x102
 8027a9e:	d914      	bls.n	8027aca <_svfprintf_r+0x1036>
 8027aa0:	f50d 7381 	add.w	r3, sp, #258	; 0x102
 8027aa4:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
 8027aa8:	e00a      	b.n	8027ac0 <_svfprintf_r+0x102c>
 8027aaa:	bf00      	nop
 8027aac:	08035e94 	.word	0x08035e94
 8027ab0:	08035e98 	.word	0x08035e98
 8027ab4:	08035ecc 	.word	0x08035ecc
 8027ab8:	0802e81c 	.word	0x0802e81c
 8027abc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8027ac0:	4282      	cmp	r2, r0
 8027ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8027ac6:	4619      	mov	r1, r3
 8027ac8:	d1f8      	bne.n	8027abc <_svfprintf_r+0x1028>
 8027aca:	ab40      	add	r3, sp, #256	; 0x100
 8027acc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027ace:	1acb      	subs	r3, r1, r3
 8027ad0:	931f      	str	r3, [sp, #124]	; 0x7c
 8027ad2:	195d      	adds	r5, r3, r5
 8027ad4:	950e      	str	r5, [sp, #56]	; 0x38
 8027ad6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027ad8:	2d01      	cmp	r5, #1
 8027ada:	f340 8127 	ble.w	8027d2c <_svfprintf_r+0x1298>
 8027ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027ae0:	2500      	movs	r5, #0
 8027ae2:	9518      	str	r5, [sp, #96]	; 0x60
 8027ae4:	3301      	adds	r3, #1
 8027ae6:	930e      	str	r3, [sp, #56]	; 0x38
 8027ae8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027aec:	950b      	str	r5, [sp, #44]	; 0x2c
 8027aee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027af0:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8027af4:	2d00      	cmp	r5, #0
 8027af6:	f43f a904 	beq.w	8026d02 <_svfprintf_r+0x26e>
 8027afa:	2300      	movs	r3, #0
 8027afc:	9314      	str	r3, [sp, #80]	; 0x50
 8027afe:	232d      	movs	r3, #45	; 0x2d
 8027b00:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8027b04:	f7ff b8fe 	b.w	8026d04 <_svfprintf_r+0x270>
 8027b08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027b0a:	2140      	movs	r1, #64	; 0x40
 8027b0c:	f7fd fe10 	bl	8025730 <_malloc_r>
 8027b10:	f8cb 0000 	str.w	r0, [fp]
 8027b14:	f8cb 0010 	str.w	r0, [fp, #16]
 8027b18:	2800      	cmp	r0, #0
 8027b1a:	f000 8136 	beq.w	8027d8a <_svfprintf_r+0x12f6>
 8027b1e:	2340      	movs	r3, #64	; 0x40
 8027b20:	f8cb 3014 	str.w	r3, [fp, #20]
 8027b24:	f7fe bfd1 	b.w	8026aca <_svfprintf_r+0x36>
 8027b28:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027b2a:	4659      	mov	r1, fp
 8027b2c:	aa3d      	add	r2, sp, #244	; 0xf4
 8027b2e:	f003 f977 	bl	802ae20 <__ssprint_r>
 8027b32:	2800      	cmp	r0, #0
 8027b34:	f47f a8ac 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027b38:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8027b3a:	ae23      	add	r6, sp, #140	; 0x8c
 8027b3c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027b3e:	e6a2      	b.n	8027886 <_svfprintf_r+0xdf2>
 8027b40:	f1a5 0247 	sub.w	r2, r5, #71	; 0x47
 8027b44:	4253      	negs	r3, r2
 8027b46:	eb43 0302 	adc.w	r3, r3, r2
 8027b4a:	2406      	movs	r4, #6
 8027b4c:	2d67      	cmp	r5, #103	; 0x67
 8027b4e:	bf08      	it	eq
 8027b50:	f043 0301 	orreq.w	r3, r3, #1
 8027b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8027b56:	e6ff      	b.n	8027958 <_svfprintf_r+0xec4>
 8027b58:	4640      	mov	r0, r8
 8027b5a:	2200      	movs	r2, #0
 8027b5c:	2300      	movs	r3, #0
 8027b5e:	4639      	mov	r1, r7
 8027b60:	f004 fcb8 	bl	802c4d4 <__aeabi_dcmpeq>
 8027b64:	2800      	cmp	r0, #0
 8027b66:	f47f af53 	bne.w	8027a10 <_svfprintf_r+0xf7c>
 8027b6a:	f1c9 0301 	rsb	r3, r9, #1
 8027b6e:	9344      	str	r3, [sp, #272]	; 0x110
 8027b70:	e74f      	b.n	8027a12 <_svfprintf_r+0xf7e>
 8027b72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027b74:	4659      	mov	r1, fp
 8027b76:	aa3d      	add	r2, sp, #244	; 0xf4
 8027b78:	f003 f952 	bl	802ae20 <__ssprint_r>
 8027b7c:	2800      	cmp	r0, #0
 8027b7e:	f47f a887 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027b82:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027b84:	ae23      	add	r6, sp, #140	; 0x8c
 8027b86:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027b88:	3401      	adds	r4, #1
 8027b8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8027b8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027b8e:	2c07      	cmp	r4, #7
 8027b90:	4405      	add	r5, r0
 8027b92:	6070      	str	r0, [r6, #4]
 8027b94:	6033      	str	r3, [r6, #0]
 8027b96:	943e      	str	r4, [sp, #248]	; 0xf8
 8027b98:	953f      	str	r5, [sp, #252]	; 0xfc
 8027b9a:	f77f ab20 	ble.w	80271de <_svfprintf_r+0x74a>
 8027b9e:	f7ff bb7e 	b.w	802729e <_svfprintf_r+0x80a>
 8027ba2:	9514      	str	r5, [sp, #80]	; 0x50
 8027ba4:	f7fe feba 	bl	802691c <strlen>
 8027ba8:	900e      	str	r0, [sp, #56]	; 0x38
 8027baa:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8027bae:	e6aa      	b.n	8027906 <_svfprintf_r+0xe72>
 8027bb0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027bb2:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8027da0 <_svfprintf_r+0x130c>
 8027bb6:	f7ff b8e5 	b.w	8026d84 <_svfprintf_r+0x2f0>
 8027bba:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027bbc:	4659      	mov	r1, fp
 8027bbe:	aa3d      	add	r2, sp, #244	; 0xf4
 8027bc0:	f003 f92e 	bl	802ae20 <__ssprint_r>
 8027bc4:	2800      	cmp	r0, #0
 8027bc6:	f47f a863 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027bca:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027bcc:	ae23      	add	r6, sp, #140	; 0x8c
 8027bce:	e4cb      	b.n	8027568 <_svfprintf_r+0xad4>
 8027bd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027bd2:	4659      	mov	r1, fp
 8027bd4:	aa3d      	add	r2, sp, #244	; 0xf4
 8027bd6:	f003 f923 	bl	802ae20 <__ssprint_r>
 8027bda:	2800      	cmp	r0, #0
 8027bdc:	f47f a858 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027be0:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8027be2:	ae23      	add	r6, sp, #140	; 0x8c
 8027be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027be6:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027be8:	1ad3      	subs	r3, r2, r3
 8027bea:	e56e      	b.n	80276ca <_svfprintf_r+0xc36>
 8027bec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027bee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027bf0:	1a2d      	subs	r5, r5, r0
 8027bf2:	950e      	str	r5, [sp, #56]	; 0x38
 8027bf4:	f7ff b908 	b.w	8026e08 <_svfprintf_r+0x374>
 8027bf8:	46a0      	mov	r8, r4
 8027bfa:	461c      	mov	r4, r3
 8027bfc:	3401      	adds	r4, #1
 8027bfe:	f8c6 8000 	str.w	r8, [r6]
 8027c02:	2c07      	cmp	r4, #7
 8027c04:	6077      	str	r7, [r6, #4]
 8027c06:	443d      	add	r5, r7
 8027c08:	943e      	str	r4, [sp, #248]	; 0xf8
 8027c0a:	953f      	str	r5, [sp, #252]	; 0xfc
 8027c0c:	dcb1      	bgt.n	8027b72 <_svfprintf_r+0x10de>
 8027c0e:	3608      	adds	r6, #8
 8027c10:	e7ba      	b.n	8027b88 <_svfprintf_r+0x10f4>
 8027c12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027c14:	4659      	mov	r1, fp
 8027c16:	aa3d      	add	r2, sp, #244	; 0xf4
 8027c18:	f003 f902 	bl	802ae20 <__ssprint_r>
 8027c1c:	2800      	cmp	r0, #0
 8027c1e:	f47f a837 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027c22:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8027c24:	ae23      	add	r6, sp, #140	; 0x8c
 8027c26:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027c28:	e538      	b.n	802769c <_svfprintf_r+0xc08>
 8027c2a:	2c06      	cmp	r4, #6
 8027c2c:	bf28      	it	cs
 8027c2e:	2406      	movcs	r4, #6
 8027c30:	9711      	str	r7, [sp, #68]	; 0x44
 8027c32:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8027c36:	950b      	str	r5, [sp, #44]	; 0x2c
 8027c38:	4d58      	ldr	r5, [pc, #352]	; (8027d9c <_svfprintf_r+0x1308>)
 8027c3a:	940e      	str	r4, [sp, #56]	; 0x38
 8027c3c:	9513      	str	r5, [sp, #76]	; 0x4c
 8027c3e:	f7ff b8fc 	b.w	8026e3a <_svfprintf_r+0x3a6>
 8027c42:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027c44:	2d65      	cmp	r5, #101	; 0x65
 8027c46:	dd6f      	ble.n	8027d28 <_svfprintf_r+0x1294>
 8027c48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027c4a:	9944      	ldr	r1, [sp, #272]	; 0x110
 8027c4c:	2d00      	cmp	r5, #0
 8027c4e:	d15d      	bne.n	8027d0c <_svfprintf_r+0x1278>
 8027c50:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027c52:	428d      	cmp	r5, r1
 8027c54:	dc4a      	bgt.n	8027cec <_svfprintf_r+0x1258>
 8027c56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027c58:	07ed      	lsls	r5, r5, #31
 8027c5a:	d54f      	bpl.n	8027cfc <_svfprintf_r+0x1268>
 8027c5c:	1c4b      	adds	r3, r1, #1
 8027c5e:	2567      	movs	r5, #103	; 0x67
 8027c60:	930e      	str	r3, [sp, #56]	; 0x38
 8027c62:	9517      	str	r5, [sp, #92]	; 0x5c
 8027c64:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027c68:	9118      	str	r1, [sp, #96]	; 0x60
 8027c6a:	950b      	str	r5, [sp, #44]	; 0x2c
 8027c6c:	e73f      	b.n	8027aee <_svfprintf_r+0x105a>
 8027c6e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8027c70:	429d      	cmp	r5, r3
 8027c72:	bf98      	it	ls
 8027c74:	461d      	movls	r5, r3
 8027c76:	f67f aed7 	bls.w	8027a28 <_svfprintf_r+0xf94>
 8027c7a:	2230      	movs	r2, #48	; 0x30
 8027c7c:	f803 2b01 	strb.w	r2, [r3], #1
 8027c80:	42ab      	cmp	r3, r5
 8027c82:	9346      	str	r3, [sp, #280]	; 0x118
 8027c84:	d1fa      	bne.n	8027c7c <_svfprintf_r+0x11e8>
 8027c86:	e6cf      	b.n	8027a28 <_svfprintf_r+0xf94>
 8027c88:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8027c8c:	9014      	str	r0, [sp, #80]	; 0x50
 8027c8e:	950b      	str	r5, [sp, #44]	; 0x2c
 8027c90:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8027c94:	9711      	str	r7, [sp, #68]	; 0x44
 8027c96:	940e      	str	r4, [sp, #56]	; 0x38
 8027c98:	9018      	str	r0, [sp, #96]	; 0x60
 8027c9a:	f7ff b832 	b.w	8026d02 <_svfprintf_r+0x26e>
 8027c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027ca0:	e65a      	b.n	8027958 <_svfprintf_r+0xec4>
 8027ca2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027ca4:	4659      	mov	r1, fp
 8027ca6:	aa3d      	add	r2, sp, #244	; 0xf4
 8027ca8:	f003 f8ba 	bl	802ae20 <__ssprint_r>
 8027cac:	2800      	cmp	r0, #0
 8027cae:	f47e afef 	bne.w	8026c90 <_svfprintf_r+0x1fc>
 8027cb2:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8027cb4:	ae23      	add	r6, sp, #140	; 0x8c
 8027cb6:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8027cb8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027cba:	e5f8      	b.n	80278ae <_svfprintf_r+0xe1a>
 8027cbc:	252d      	movs	r5, #45	; 0x2d
 8027cbe:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8027cc2:	9514      	str	r5, [sp, #80]	; 0x50
 8027cc4:	e651      	b.n	802796a <_svfprintf_r+0xed6>
 8027cc6:	46a1      	mov	r9, r4
 8027cc8:	2302      	movs	r3, #2
 8027cca:	e671      	b.n	80279b0 <_svfprintf_r+0xf1c>
 8027ccc:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8027cd0:	2330      	movs	r3, #48	; 0x30
 8027cd2:	a941      	add	r1, sp, #260	; 0x104
 8027cd4:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
 8027cd8:	f88d 2103 	strb.w	r2, [sp, #259]	; 0x103
 8027cdc:	e6f5      	b.n	8027aca <_svfprintf_r+0x1036>
 8027cde:	2401      	movs	r4, #1
 8027ce0:	940b      	str	r4, [sp, #44]	; 0x2c
 8027ce2:	e639      	b.n	8027958 <_svfprintf_r+0xec4>
 8027ce4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8027da4 <_svfprintf_r+0x1310>
 8027ce8:	f7ff bad0 	b.w	802728c <_svfprintf_r+0x7f8>
 8027cec:	2900      	cmp	r1, #0
 8027cee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027cf0:	bfd4      	ite	le
 8027cf2:	f1c1 0302 	rsble	r3, r1, #2
 8027cf6:	2301      	movgt	r3, #1
 8027cf8:	195b      	adds	r3, r3, r5
 8027cfa:	e7b0      	b.n	8027c5e <_svfprintf_r+0x11ca>
 8027cfc:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 8027d00:	910e      	str	r1, [sp, #56]	; 0x38
 8027d02:	950b      	str	r5, [sp, #44]	; 0x2c
 8027d04:	2567      	movs	r5, #103	; 0x67
 8027d06:	9118      	str	r1, [sp, #96]	; 0x60
 8027d08:	9517      	str	r5, [sp, #92]	; 0x5c
 8027d0a:	e6f0      	b.n	8027aee <_svfprintf_r+0x105a>
 8027d0c:	2900      	cmp	r1, #0
 8027d0e:	dd27      	ble.n	8027d60 <_svfprintf_r+0x12cc>
 8027d10:	b9e4      	cbnz	r4, 8027d4c <_svfprintf_r+0x12b8>
 8027d12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027d14:	07ea      	lsls	r2, r5, #31
 8027d16:	d419      	bmi.n	8027d4c <_svfprintf_r+0x12b8>
 8027d18:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 8027d1c:	910e      	str	r1, [sp, #56]	; 0x38
 8027d1e:	950b      	str	r5, [sp, #44]	; 0x2c
 8027d20:	2566      	movs	r5, #102	; 0x66
 8027d22:	9118      	str	r1, [sp, #96]	; 0x60
 8027d24:	9517      	str	r5, [sp, #92]	; 0x5c
 8027d26:	e6e2      	b.n	8027aee <_svfprintf_r+0x105a>
 8027d28:	9944      	ldr	r1, [sp, #272]	; 0x110
 8027d2a:	e68d      	b.n	8027a48 <_svfprintf_r+0xfb4>
 8027d2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027d2e:	f015 0301 	ands.w	r3, r5, #1
 8027d32:	f47f aed4 	bne.w	8027ade <_svfprintf_r+0x104a>
 8027d36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027d38:	9318      	str	r3, [sp, #96]	; 0x60
 8027d3a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027d3e:	950b      	str	r5, [sp, #44]	; 0x2c
 8027d40:	e6d5      	b.n	8027aee <_svfprintf_r+0x105a>
 8027d42:	232d      	movs	r3, #45	; 0x2d
 8027d44:	4249      	negs	r1, r1
 8027d46:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 8027d4a:	e688      	b.n	8027a5e <_svfprintf_r+0xfca>
 8027d4c:	3401      	adds	r4, #1
 8027d4e:	2566      	movs	r5, #102	; 0x66
 8027d50:	190c      	adds	r4, r1, r4
 8027d52:	9517      	str	r5, [sp, #92]	; 0x5c
 8027d54:	940e      	str	r4, [sp, #56]	; 0x38
 8027d56:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8027d5a:	9118      	str	r1, [sp, #96]	; 0x60
 8027d5c:	950b      	str	r5, [sp, #44]	; 0x2c
 8027d5e:	e6c6      	b.n	8027aee <_svfprintf_r+0x105a>
 8027d60:	b914      	cbnz	r4, 8027d68 <_svfprintf_r+0x12d4>
 8027d62:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027d64:	07eb      	lsls	r3, r5, #31
 8027d66:	d508      	bpl.n	8027d7a <_svfprintf_r+0x12e6>
 8027d68:	3402      	adds	r4, #2
 8027d6a:	2566      	movs	r5, #102	; 0x66
 8027d6c:	940e      	str	r4, [sp, #56]	; 0x38
 8027d6e:	9517      	str	r5, [sp, #92]	; 0x5c
 8027d70:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8027d74:	9118      	str	r1, [sp, #96]	; 0x60
 8027d76:	950b      	str	r5, [sp, #44]	; 0x2c
 8027d78:	e6b9      	b.n	8027aee <_svfprintf_r+0x105a>
 8027d7a:	2501      	movs	r5, #1
 8027d7c:	9118      	str	r1, [sp, #96]	; 0x60
 8027d7e:	950b      	str	r5, [sp, #44]	; 0x2c
 8027d80:	2566      	movs	r5, #102	; 0x66
 8027d82:	9517      	str	r5, [sp, #92]	; 0x5c
 8027d84:	2501      	movs	r5, #1
 8027d86:	950e      	str	r5, [sp, #56]	; 0x38
 8027d88:	e6b1      	b.n	8027aee <_svfprintf_r+0x105a>
 8027d8a:	f04f 35ff 	mov.w	r5, #4294967295
 8027d8e:	950d      	str	r5, [sp, #52]	; 0x34
 8027d90:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027d92:	230c      	movs	r3, #12
 8027d94:	602b      	str	r3, [r5, #0]
 8027d96:	f7fe bf84 	b.w	8026ca2 <_svfprintf_r+0x20e>
 8027d9a:	bf00      	nop
 8027d9c:	08035ec4 	.word	0x08035ec4
 8027da0:	0802e80c 	.word	0x0802e80c
 8027da4:	0802e81c 	.word	0x0802e81c

08027da8 <write>:
 8027da8:	b430      	push	{r4, r5}
 8027daa:	f240 0408 	movw	r4, #8
 8027dae:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8027db2:	460d      	mov	r5, r1
 8027db4:	4613      	mov	r3, r2
 8027db6:	4601      	mov	r1, r0
 8027db8:	462a      	mov	r2, r5
 8027dba:	6820      	ldr	r0, [r4, #0]
 8027dbc:	bc30      	pop	{r4, r5}
 8027dbe:	f7f6 ba17 	b.w	801e1f0 <_write_r>
 8027dc2:	bf00      	nop

08027dc4 <toupper>:
 8027dc4:	4b04      	ldr	r3, [pc, #16]	; (8027dd8 <toupper+0x14>)
 8027dc6:	681b      	ldr	r3, [r3, #0]
 8027dc8:	181b      	adds	r3, r3, r0
 8027dca:	785b      	ldrb	r3, [r3, #1]
 8027dcc:	f003 0303 	and.w	r3, r3, #3
 8027dd0:	2b02      	cmp	r3, #2
 8027dd2:	bf08      	it	eq
 8027dd4:	3820      	subeq	r0, #32
 8027dd6:	4770      	bx	lr
 8027dd8:	20000848 	.word	0x20000848

08027ddc <__sprint_r>:
 8027ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027de0:	4680      	mov	r8, r0
 8027de2:	6890      	ldr	r0, [r2, #8]
 8027de4:	4691      	mov	r9, r2
 8027de6:	460e      	mov	r6, r1
 8027de8:	b348      	cbz	r0, 8027e3e <__sprint_r+0x62>
 8027dea:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8027dec:	049a      	lsls	r2, r3, #18
 8027dee:	d529      	bpl.n	8027e44 <__sprint_r+0x68>
 8027df0:	f8d9 3000 	ldr.w	r3, [r9]
 8027df4:	f103 0a08 	add.w	sl, r3, #8
 8027df8:	e91a 00a0 	ldmdb	sl, {r5, r7}
 8027dfc:	08bf      	lsrs	r7, r7, #2
 8027dfe:	b1af      	cbz	r7, 8027e2c <__sprint_r+0x50>
 8027e00:	2400      	movs	r4, #0
 8027e02:	e001      	b.n	8027e08 <__sprint_r+0x2c>
 8027e04:	42a7      	cmp	r7, r4
 8027e06:	d00f      	beq.n	8027e28 <__sprint_r+0x4c>
 8027e08:	f855 1b04 	ldr.w	r1, [r5], #4
 8027e0c:	4640      	mov	r0, r8
 8027e0e:	4632      	mov	r2, r6
 8027e10:	3401      	adds	r4, #1
 8027e12:	f002 f879 	bl	8029f08 <_fputwc_r>
 8027e16:	1c43      	adds	r3, r0, #1
 8027e18:	d1f4      	bne.n	8027e04 <__sprint_r+0x28>
 8027e1a:	2300      	movs	r3, #0
 8027e1c:	f8c9 3008 	str.w	r3, [r9, #8]
 8027e20:	f8c9 3004 	str.w	r3, [r9, #4]
 8027e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e28:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8027e2c:	eba0 0087 	sub.w	r0, r0, r7, lsl #2
 8027e30:	f10a 0a08 	add.w	sl, sl, #8
 8027e34:	f8c9 0008 	str.w	r0, [r9, #8]
 8027e38:	2800      	cmp	r0, #0
 8027e3a:	d1dd      	bne.n	8027df8 <__sprint_r+0x1c>
 8027e3c:	e7ed      	b.n	8027e1a <__sprint_r+0x3e>
 8027e3e:	6050      	str	r0, [r2, #4]
 8027e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e44:	4640      	mov	r0, r8
 8027e46:	464a      	mov	r2, r9
 8027e48:	f7fd fa5a 	bl	8025300 <__sfvwrite_r>
 8027e4c:	2300      	movs	r3, #0
 8027e4e:	f8c9 3008 	str.w	r3, [r9, #8]
 8027e52:	f8c9 3004 	str.w	r3, [r9, #4]
 8027e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e5a:	bf00      	nop

08027e5c <_vfiprintf_r>:
 8027e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e60:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8027e64:	b081      	sub	sp, #4
 8027e66:	4683      	mov	fp, r0
 8027e68:	460c      	mov	r4, r1
 8027e6a:	4617      	mov	r7, r2
 8027e6c:	9307      	str	r3, [sp, #28]
 8027e6e:	b118      	cbz	r0, 8027e78 <_vfiprintf_r+0x1c>
 8027e70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8027e72:	2b00      	cmp	r3, #0
 8027e74:	f000 845b 	beq.w	802872e <_vfiprintf_r+0x8d2>
 8027e78:	89a5      	ldrh	r5, [r4, #12]
 8027e7a:	b2ab      	uxth	r3, r5
 8027e7c:	0498      	lsls	r0, r3, #18
 8027e7e:	d407      	bmi.n	8027e90 <_vfiprintf_r+0x34>
 8027e80:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 8027e84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027e86:	81a5      	strh	r5, [r4, #12]
 8027e88:	b2ab      	uxth	r3, r5
 8027e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8027e8e:	6662      	str	r2, [r4, #100]	; 0x64
 8027e90:	0719      	lsls	r1, r3, #28
 8027e92:	f140 83c3 	bpl.w	802861c <_vfiprintf_r+0x7c0>
 8027e96:	6922      	ldr	r2, [r4, #16]
 8027e98:	2a00      	cmp	r2, #0
 8027e9a:	f000 83bf 	beq.w	802861c <_vfiprintf_r+0x7c0>
 8027e9e:	f003 031a 	and.w	r3, r3, #26
 8027ea2:	2b0a      	cmp	r3, #10
 8027ea4:	f000 83c8 	beq.w	8028638 <_vfiprintf_r+0x7dc>
 8027ea8:	f50d 65a2 	add.w	r5, sp, #1296	; 0x510
 8027eac:	9502      	str	r5, [sp, #8]
 8027eae:	f50d 65a0 	add.w	r5, sp, #1280	; 0x500
 8027eb2:	f50d 6a95 	add.w	sl, sp, #1192	; 0x4a8
 8027eb6:	350f      	adds	r5, #15
 8027eb8:	9501      	str	r5, [sp, #4]
 8027eba:	9802      	ldr	r0, [sp, #8]
 8027ebc:	4655      	mov	r5, sl
 8027ebe:	9901      	ldr	r1, [sp, #4]
 8027ec0:	46a1      	mov	r9, r4
 8027ec2:	f64c 42cd 	movw	r2, #52429	; 0xcccd
 8027ec6:	2300      	movs	r3, #0
 8027ec8:	1a40      	subs	r0, r0, r1
 8027eca:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
 8027ece:	930d      	str	r3, [sp, #52]	; 0x34
 8027ed0:	9305      	str	r3, [sp, #20]
 8027ed2:	900f      	str	r0, [sp, #60]	; 0x3c
 8027ed4:	920e      	str	r2, [sp, #56]	; 0x38
 8027ed6:	f8cd a510 	str.w	sl, [sp, #1296]	; 0x510
 8027eda:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
 8027ede:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8027ee2:	783b      	ldrb	r3, [r7, #0]
 8027ee4:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8027ee8:	bf18      	it	ne
 8027eea:	2201      	movne	r2, #1
 8027eec:	2b00      	cmp	r3, #0
 8027eee:	bf0c      	ite	eq
 8027ef0:	2300      	moveq	r3, #0
 8027ef2:	f002 0301 	andne.w	r3, r2, #1
 8027ef6:	2b00      	cmp	r3, #0
 8027ef8:	f000 8319 	beq.w	802852e <_vfiprintf_r+0x6d2>
 8027efc:	463a      	mov	r2, r7
 8027efe:	463c      	mov	r4, r7
 8027f00:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8027f04:	3401      	adds	r4, #1
 8027f06:	1c19      	adds	r1, r3, #0
 8027f08:	bf18      	it	ne
 8027f0a:	2101      	movne	r1, #1
 8027f0c:	2b25      	cmp	r3, #37	; 0x25
 8027f0e:	bf0c      	ite	eq
 8027f10:	2300      	moveq	r3, #0
 8027f12:	f001 0301 	andne.w	r3, r1, #1
 8027f16:	2b00      	cmp	r3, #0
 8027f18:	d1f2      	bne.n	8027f00 <_vfiprintf_r+0xa4>
 8027f1a:	1be6      	subs	r6, r4, r7
 8027f1c:	d012      	beq.n	8027f44 <_vfiprintf_r+0xe8>
 8027f1e:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8027f22:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8027f26:	3301      	adds	r3, #1
 8027f28:	602f      	str	r7, [r5, #0]
 8027f2a:	2b07      	cmp	r3, #7
 8027f2c:	4432      	add	r2, r6
 8027f2e:	606e      	str	r6, [r5, #4]
 8027f30:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8027f34:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8027f38:	f300 83c1 	bgt.w	80286be <_vfiprintf_r+0x862>
 8027f3c:	3508      	adds	r5, #8
 8027f3e:	9b05      	ldr	r3, [sp, #20]
 8027f40:	199b      	adds	r3, r3, r6
 8027f42:	9305      	str	r3, [sp, #20]
 8027f44:	7823      	ldrb	r3, [r4, #0]
 8027f46:	2b00      	cmp	r3, #0
 8027f48:	f000 84a8 	beq.w	802889c <_vfiprintf_r+0xa40>
 8027f4c:	2300      	movs	r3, #0
 8027f4e:	1c67      	adds	r7, r4, #1
 8027f50:	461a      	mov	r2, r3
 8027f52:	f04f 34ff 	mov.w	r4, #4294967295
 8027f56:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 8027f5a:	9308      	str	r3, [sp, #32]
 8027f5c:	9303      	str	r3, [sp, #12]
 8027f5e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8027f62:	f1a3 0120 	sub.w	r1, r3, #32
 8027f66:	2958      	cmp	r1, #88	; 0x58
 8027f68:	f200 81dd 	bhi.w	8028326 <_vfiprintf_r+0x4ca>
 8027f6c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8027f70:	01db01d7 	.word	0x01db01d7
 8027f74:	01d201db 	.word	0x01d201db
 8027f78:	01db01db 	.word	0x01db01db
 8027f7c:	01db01db 	.word	0x01db01db
 8027f80:	01db01db 	.word	0x01db01db
 8027f84:	020c00d8 	.word	0x020c00d8
 8027f88:	00e401db 	.word	0x00e401db
 8027f8c:	01db01f1 	.word	0x01db01f1
 8027f90:	017b01ec 	.word	0x017b01ec
 8027f94:	017b017b 	.word	0x017b017b
 8027f98:	017b017b 	.word	0x017b017b
 8027f9c:	017b017b 	.word	0x017b017b
 8027fa0:	017b017b 	.word	0x017b017b
 8027fa4:	01db01db 	.word	0x01db01db
 8027fa8:	01db01db 	.word	0x01db01db
 8027fac:	01db01db 	.word	0x01db01db
 8027fb0:	01db01db 	.word	0x01db01db
 8027fb4:	01db01db 	.word	0x01db01db
 8027fb8:	01db005e 	.word	0x01db005e
 8027fbc:	01db01db 	.word	0x01db01db
 8027fc0:	01db01db 	.word	0x01db01db
 8027fc4:	01db01db 	.word	0x01db01db
 8027fc8:	01db01db 	.word	0x01db01db
 8027fcc:	00b001db 	.word	0x00b001db
 8027fd0:	01db01db 	.word	0x01db01db
 8027fd4:	01db01db 	.word	0x01db01db
 8027fd8:	00c601db 	.word	0x00c601db
 8027fdc:	01db01db 	.word	0x01db01db
 8027fe0:	01db014a 	.word	0x01db014a
 8027fe4:	01db01db 	.word	0x01db01db
 8027fe8:	01db01db 	.word	0x01db01db
 8027fec:	01db01db 	.word	0x01db01db
 8027ff0:	01db01db 	.word	0x01db01db
 8027ff4:	00ee01db 	.word	0x00ee01db
 8027ff8:	01db0062 	.word	0x01db0062
 8027ffc:	01db01db 	.word	0x01db01db
 8028000:	006200e9 	.word	0x006200e9
 8028004:	01db01db 	.word	0x01db01db
 8028008:	01db0059 	.word	0x01db0059
 802800c:	00b4018c 	.word	0x00b4018c
 8028010:	00590166 	.word	0x00590166
 8028014:	01b401db 	.word	0x01b401db
 8028018:	00ca01db 	.word	0x00ca01db
 802801c:	01db01db 	.word	0x01db01db
 8028020:	019d      	.short	0x019d
 8028022:	9b03      	ldr	r3, [sp, #12]
 8028024:	f043 0310 	orr.w	r3, r3, #16
 8028028:	9303      	str	r3, [sp, #12]
 802802a:	e798      	b.n	8027f5e <_vfiprintf_r+0x102>
 802802c:	9b03      	ldr	r3, [sp, #12]
 802802e:	f043 0310 	orr.w	r3, r3, #16
 8028032:	9303      	str	r3, [sp, #12]
 8028034:	9b03      	ldr	r3, [sp, #12]
 8028036:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 802803a:	06d8      	lsls	r0, r3, #27
 802803c:	f140 83bf 	bpl.w	80287be <_vfiprintf_r+0x962>
 8028040:	9b07      	ldr	r3, [sp, #28]
 8028042:	681a      	ldr	r2, [r3, #0]
 8028044:	3304      	adds	r3, #4
 8028046:	9307      	str	r3, [sp, #28]
 8028048:	2a00      	cmp	r2, #0
 802804a:	f2c0 83c5 	blt.w	80287d8 <_vfiprintf_r+0x97c>
 802804e:	bf0c      	ite	eq
 8028050:	2100      	moveq	r1, #0
 8028052:	2101      	movne	r1, #1
 8028054:	2301      	movs	r3, #1
 8028056:	2c00      	cmp	r4, #0
 8028058:	bfa2      	ittt	ge
 802805a:	9803      	ldrge	r0, [sp, #12]
 802805c:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8028060:	9003      	strge	r0, [sp, #12]
 8028062:	2c00      	cmp	r4, #0
 8028064:	bf18      	it	ne
 8028066:	f041 0101 	orrne.w	r1, r1, #1
 802806a:	2900      	cmp	r1, #0
 802806c:	f000 8261 	beq.w	8028532 <_vfiprintf_r+0x6d6>
 8028070:	2b01      	cmp	r3, #1
 8028072:	f000 8365 	beq.w	8028740 <_vfiprintf_r+0x8e4>
 8028076:	2b02      	cmp	r3, #2
 8028078:	bf18      	it	ne
 802807a:	f50d 63a2 	addne.w	r3, sp, #1296	; 0x510
 802807e:	d101      	bne.n	8028084 <_vfiprintf_r+0x228>
 8028080:	e378      	b.n	8028774 <_vfiprintf_r+0x918>
 8028082:	4603      	mov	r3, r0
 8028084:	f002 0107 	and.w	r1, r2, #7
 8028088:	1e58      	subs	r0, r3, #1
 802808a:	3130      	adds	r1, #48	; 0x30
 802808c:	08d2      	lsrs	r2, r2, #3
 802808e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8028092:	d1f6      	bne.n	8028082 <_vfiprintf_r+0x226>
 8028094:	9a03      	ldr	r2, [sp, #12]
 8028096:	900a      	str	r0, [sp, #40]	; 0x28
 8028098:	07d2      	lsls	r2, r2, #31
 802809a:	f140 83d8 	bpl.w	802884e <_vfiprintf_r+0x9f2>
 802809e:	2930      	cmp	r1, #48	; 0x30
 80280a0:	f000 8425 	beq.w	80288ee <_vfiprintf_r+0xa92>
 80280a4:	9a02      	ldr	r2, [sp, #8]
 80280a6:	1e99      	subs	r1, r3, #2
 80280a8:	910a      	str	r1, [sp, #40]	; 0x28
 80280aa:	1a52      	subs	r2, r2, r1
 80280ac:	9206      	str	r2, [sp, #24]
 80280ae:	2230      	movs	r2, #48	; 0x30
 80280b0:	f803 2c02 	strb.w	r2, [r3, #-2]
 80280b4:	9409      	str	r4, [sp, #36]	; 0x24
 80280b6:	9806      	ldr	r0, [sp, #24]
 80280b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80280ba:	f89d 351f 	ldrb.w	r3, [sp, #1311]	; 0x51f
 80280be:	4288      	cmp	r0, r1
 80280c0:	bfb8      	it	lt
 80280c2:	4608      	movlt	r0, r1
 80280c4:	9004      	str	r0, [sp, #16]
 80280c6:	2b00      	cmp	r3, #0
 80280c8:	d051      	beq.n	802816e <_vfiprintf_r+0x312>
 80280ca:	3001      	adds	r0, #1
 80280cc:	9004      	str	r0, [sp, #16]
 80280ce:	e04e      	b.n	802816e <_vfiprintf_r+0x312>
 80280d0:	9b03      	ldr	r3, [sp, #12]
 80280d2:	f043 0310 	orr.w	r3, r3, #16
 80280d6:	9303      	str	r3, [sp, #12]
 80280d8:	9803      	ldr	r0, [sp, #12]
 80280da:	f010 0310 	ands.w	r3, r0, #16
 80280de:	f000 835a 	beq.w	8028796 <_vfiprintf_r+0x93a>
 80280e2:	9b07      	ldr	r3, [sp, #28]
 80280e4:	9807      	ldr	r0, [sp, #28]
 80280e6:	681a      	ldr	r2, [r3, #0]
 80280e8:	2300      	movs	r3, #0
 80280ea:	3004      	adds	r0, #4
 80280ec:	9007      	str	r0, [sp, #28]
 80280ee:	1ad1      	subs	r1, r2, r3
 80280f0:	bf18      	it	ne
 80280f2:	2101      	movne	r1, #1
 80280f4:	2000      	movs	r0, #0
 80280f6:	f88d 051f 	strb.w	r0, [sp, #1311]	; 0x51f
 80280fa:	e7ac      	b.n	8028056 <_vfiprintf_r+0x1fa>
 80280fc:	9b03      	ldr	r3, [sp, #12]
 80280fe:	f043 0310 	orr.w	r3, r3, #16
 8028102:	9303      	str	r3, [sp, #12]
 8028104:	9b03      	ldr	r3, [sp, #12]
 8028106:	06db      	lsls	r3, r3, #27
 8028108:	f140 8351 	bpl.w	80287ae <_vfiprintf_r+0x952>
 802810c:	9b07      	ldr	r3, [sp, #28]
 802810e:	681a      	ldr	r2, [r3, #0]
 8028110:	2301      	movs	r3, #1
 8028112:	9807      	ldr	r0, [sp, #28]
 8028114:	3004      	adds	r0, #4
 8028116:	1c11      	adds	r1, r2, #0
 8028118:	9007      	str	r0, [sp, #28]
 802811a:	bf18      	it	ne
 802811c:	2101      	movne	r1, #1
 802811e:	e7e9      	b.n	80280f4 <_vfiprintf_r+0x298>
 8028120:	9b07      	ldr	r3, [sp, #28]
 8028122:	9807      	ldr	r0, [sp, #28]
 8028124:	681b      	ldr	r3, [r3, #0]
 8028126:	9308      	str	r3, [sp, #32]
 8028128:	1d03      	adds	r3, r0, #4
 802812a:	9908      	ldr	r1, [sp, #32]
 802812c:	2900      	cmp	r1, #0
 802812e:	f280 8375 	bge.w	802881c <_vfiprintf_r+0x9c0>
 8028132:	4249      	negs	r1, r1
 8028134:	9307      	str	r3, [sp, #28]
 8028136:	9108      	str	r1, [sp, #32]
 8028138:	9b03      	ldr	r3, [sp, #12]
 802813a:	f043 0304 	orr.w	r3, r3, #4
 802813e:	9303      	str	r3, [sp, #12]
 8028140:	e70d      	b.n	8027f5e <_vfiprintf_r+0x102>
 8028142:	9b03      	ldr	r3, [sp, #12]
 8028144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028148:	9303      	str	r3, [sp, #12]
 802814a:	e708      	b.n	8027f5e <_vfiprintf_r+0x102>
 802814c:	9b07      	ldr	r3, [sp, #28]
 802814e:	2001      	movs	r0, #1
 8028150:	2200      	movs	r2, #0
 8028152:	9004      	str	r0, [sp, #16]
 8028154:	1d19      	adds	r1, r3, #4
 8028156:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 802815a:	681b      	ldr	r3, [r3, #0]
 802815c:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
 8028160:	9107      	str	r1, [sp, #28]
 8028162:	9006      	str	r0, [sp, #24]
 8028164:	920a      	str	r2, [sp, #40]	; 0x28
 8028166:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 802816a:	2300      	movs	r3, #0
 802816c:	9309      	str	r3, [sp, #36]	; 0x24
 802816e:	9b03      	ldr	r3, [sp, #12]
 8028170:	f013 0302 	ands.w	r3, r3, #2
 8028174:	930b      	str	r3, [sp, #44]	; 0x2c
 8028176:	d002      	beq.n	802817e <_vfiprintf_r+0x322>
 8028178:	9b04      	ldr	r3, [sp, #16]
 802817a:	3302      	adds	r3, #2
 802817c:	9304      	str	r3, [sp, #16]
 802817e:	9b03      	ldr	r3, [sp, #12]
 8028180:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8028184:	930c      	str	r3, [sp, #48]	; 0x30
 8028186:	f040 8101 	bne.w	802838c <_vfiprintf_r+0x530>
 802818a:	9b08      	ldr	r3, [sp, #32]
 802818c:	9804      	ldr	r0, [sp, #16]
 802818e:	1a1c      	subs	r4, r3, r0
 8028190:	2c00      	cmp	r4, #0
 8028192:	f340 80fb 	ble.w	802838c <_vfiprintf_r+0x530>
 8028196:	2c10      	cmp	r4, #16
 8028198:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 802819c:	f340 83a3 	ble.w	80288e6 <_vfiprintf_r+0xa8a>
 80281a0:	f04f 0810 	mov.w	r8, #16
 80281a4:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 80281a8:	4e95      	ldr	r6, [pc, #596]	; (8028400 <_vfiprintf_r+0x5a4>)
 80281aa:	e002      	b.n	80281b2 <_vfiprintf_r+0x356>
 80281ac:	3c10      	subs	r4, #16
 80281ae:	2c10      	cmp	r4, #16
 80281b0:	dd1b      	ble.n	80281ea <_vfiprintf_r+0x38e>
 80281b2:	3301      	adds	r3, #1
 80281b4:	3210      	adds	r2, #16
 80281b6:	e885 0140 	stmia.w	r5, {r6, r8}
 80281ba:	3508      	adds	r5, #8
 80281bc:	2b07      	cmp	r3, #7
 80281be:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80281c2:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80281c6:	ddf1      	ble.n	80281ac <_vfiprintf_r+0x350>
 80281c8:	4658      	mov	r0, fp
 80281ca:	4649      	mov	r1, r9
 80281cc:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 80281d0:	4655      	mov	r5, sl
 80281d2:	f7ff fe03 	bl	8027ddc <__sprint_r>
 80281d6:	2800      	cmp	r0, #0
 80281d8:	f040 81c8 	bne.w	802856c <_vfiprintf_r+0x710>
 80281dc:	3c10      	subs	r4, #16
 80281de:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 80281e2:	2c10      	cmp	r4, #16
 80281e4:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 80281e8:	dce3      	bgt.n	80281b2 <_vfiprintf_r+0x356>
 80281ea:	3301      	adds	r3, #1
 80281ec:	1912      	adds	r2, r2, r4
 80281ee:	2b07      	cmp	r3, #7
 80281f0:	602e      	str	r6, [r5, #0]
 80281f2:	606c      	str	r4, [r5, #4]
 80281f4:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80281f8:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80281fc:	f300 82f5 	bgt.w	80287ea <_vfiprintf_r+0x98e>
 8028200:	3508      	adds	r5, #8
 8028202:	e0c7      	b.n	8028394 <_vfiprintf_r+0x538>
 8028204:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8028208:	9a03      	ldr	r2, [sp, #12]
 802820a:	497e      	ldr	r1, [pc, #504]	; (8028404 <_vfiprintf_r+0x5a8>)
 802820c:	06d0      	lsls	r0, r2, #27
 802820e:	910d      	str	r1, [sp, #52]	; 0x34
 8028210:	d552      	bpl.n	80282b8 <_vfiprintf_r+0x45c>
 8028212:	9807      	ldr	r0, [sp, #28]
 8028214:	6802      	ldr	r2, [r0, #0]
 8028216:	3004      	adds	r0, #4
 8028218:	9007      	str	r0, [sp, #28]
 802821a:	1c11      	adds	r1, r2, #0
 802821c:	9803      	ldr	r0, [sp, #12]
 802821e:	bf18      	it	ne
 8028220:	2101      	movne	r1, #1
 8028222:	4208      	tst	r0, r1
 8028224:	d056      	beq.n	80282d4 <_vfiprintf_r+0x478>
 8028226:	f88d 351d 	strb.w	r3, [sp, #1309]	; 0x51d
 802822a:	f040 0002 	orr.w	r0, r0, #2
 802822e:	2330      	movs	r3, #48	; 0x30
 8028230:	9003      	str	r0, [sp, #12]
 8028232:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 8028236:	2101      	movs	r1, #1
 8028238:	2302      	movs	r3, #2
 802823a:	e75b      	b.n	80280f4 <_vfiprintf_r+0x298>
 802823c:	9b07      	ldr	r3, [sp, #28]
 802823e:	4872      	ldr	r0, [pc, #456]	; (8028408 <_vfiprintf_r+0x5ac>)
 8028240:	1d19      	adds	r1, r3, #4
 8028242:	9107      	str	r1, [sp, #28]
 8028244:	681a      	ldr	r2, [r3, #0]
 8028246:	2178      	movs	r1, #120	; 0x78
 8028248:	9b03      	ldr	r3, [sp, #12]
 802824a:	f88d 151d 	strb.w	r1, [sp, #1309]	; 0x51d
 802824e:	f043 0302 	orr.w	r3, r3, #2
 8028252:	9303      	str	r3, [sp, #12]
 8028254:	2330      	movs	r3, #48	; 0x30
 8028256:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 802825a:	2302      	movs	r3, #2
 802825c:	1c11      	adds	r1, r2, #0
 802825e:	bf18      	it	ne
 8028260:	2101      	movne	r1, #1
 8028262:	900d      	str	r0, [sp, #52]	; 0x34
 8028264:	e746      	b.n	80280f4 <_vfiprintf_r+0x298>
 8028266:	4638      	mov	r0, r7
 8028268:	2100      	movs	r1, #0
 802826a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 802826e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8028272:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8028276:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 802827a:	4607      	mov	r7, r0
 802827c:	2e09      	cmp	r6, #9
 802827e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8028282:	d9f2      	bls.n	802826a <_vfiprintf_r+0x40e>
 8028284:	9108      	str	r1, [sp, #32]
 8028286:	e66c      	b.n	8027f62 <_vfiprintf_r+0x106>
 8028288:	9b03      	ldr	r3, [sp, #12]
 802828a:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 802828e:	06d9      	lsls	r1, r3, #27
 8028290:	f100 82e1 	bmi.w	8028856 <_vfiprintf_r+0x9fa>
 8028294:	9b03      	ldr	r3, [sp, #12]
 8028296:	065a      	lsls	r2, r3, #25
 8028298:	f140 830d 	bpl.w	80288b6 <_vfiprintf_r+0xa5a>
 802829c:	9807      	ldr	r0, [sp, #28]
 802829e:	9905      	ldr	r1, [sp, #20]
 80282a0:	6803      	ldr	r3, [r0, #0]
 80282a2:	3004      	adds	r0, #4
 80282a4:	9007      	str	r0, [sp, #28]
 80282a6:	8019      	strh	r1, [r3, #0]
 80282a8:	e61b      	b.n	8027ee2 <_vfiprintf_r+0x86>
 80282aa:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 80282ae:	9a03      	ldr	r2, [sp, #12]
 80282b0:	4955      	ldr	r1, [pc, #340]	; (8028408 <_vfiprintf_r+0x5ac>)
 80282b2:	06d0      	lsls	r0, r2, #27
 80282b4:	910d      	str	r1, [sp, #52]	; 0x34
 80282b6:	d4ac      	bmi.n	8028212 <_vfiprintf_r+0x3b6>
 80282b8:	9903      	ldr	r1, [sp, #12]
 80282ba:	0649      	lsls	r1, r1, #25
 80282bc:	f140 82d6 	bpl.w	802886c <_vfiprintf_r+0xa10>
 80282c0:	9807      	ldr	r0, [sp, #28]
 80282c2:	8802      	ldrh	r2, [r0, #0]
 80282c4:	3004      	adds	r0, #4
 80282c6:	9007      	str	r0, [sp, #28]
 80282c8:	1c11      	adds	r1, r2, #0
 80282ca:	9803      	ldr	r0, [sp, #12]
 80282cc:	bf18      	it	ne
 80282ce:	2101      	movne	r1, #1
 80282d0:	4208      	tst	r0, r1
 80282d2:	d1a8      	bne.n	8028226 <_vfiprintf_r+0x3ca>
 80282d4:	2302      	movs	r3, #2
 80282d6:	e70d      	b.n	80280f4 <_vfiprintf_r+0x298>
 80282d8:	9b07      	ldr	r3, [sp, #28]
 80282da:	2600      	movs	r6, #0
 80282dc:	f88d 651f 	strb.w	r6, [sp, #1311]	; 0x51f
 80282e0:	1d19      	adds	r1, r3, #4
 80282e2:	9107      	str	r1, [sp, #28]
 80282e4:	681b      	ldr	r3, [r3, #0]
 80282e6:	930a      	str	r3, [sp, #40]	; 0x28
 80282e8:	2b00      	cmp	r3, #0
 80282ea:	f000 82f2 	beq.w	80288d2 <_vfiprintf_r+0xa76>
 80282ee:	2c00      	cmp	r4, #0
 80282f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80282f2:	f2c0 82e8 	blt.w	80288c6 <_vfiprintf_r+0xa6a>
 80282f6:	4631      	mov	r1, r6
 80282f8:	4622      	mov	r2, r4
 80282fa:	f7fd fccb 	bl	8025c94 <memchr>
 80282fe:	2800      	cmp	r0, #0
 8028300:	f000 82fb 	beq.w	80288fa <_vfiprintf_r+0xa9e>
 8028304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028306:	9609      	str	r6, [sp, #36]	; 0x24
 8028308:	1ac0      	subs	r0, r0, r3
 802830a:	9006      	str	r0, [sp, #24]
 802830c:	42a0      	cmp	r0, r4
 802830e:	bfc8      	it	gt
 8028310:	9406      	strgt	r4, [sp, #24]
 8028312:	e6d0      	b.n	80280b6 <_vfiprintf_r+0x25a>
 8028314:	9b03      	ldr	r3, [sp, #12]
 8028316:	f043 0301 	orr.w	r3, r3, #1
 802831a:	9303      	str	r3, [sp, #12]
 802831c:	e61f      	b.n	8027f5e <_vfiprintf_r+0x102>
 802831e:	2a00      	cmp	r2, #0
 8028320:	bf08      	it	eq
 8028322:	2220      	moveq	r2, #32
 8028324:	e61b      	b.n	8027f5e <_vfiprintf_r+0x102>
 8028326:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 802832a:	2b00      	cmp	r3, #0
 802832c:	f000 82b6 	beq.w	802889c <_vfiprintf_r+0xa40>
 8028330:	2001      	movs	r0, #1
 8028332:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 8028336:	9004      	str	r0, [sp, #16]
 8028338:	2300      	movs	r3, #0
 802833a:	9006      	str	r0, [sp, #24]
 802833c:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 8028340:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 8028344:	930a      	str	r3, [sp, #40]	; 0x28
 8028346:	e710      	b.n	802816a <_vfiprintf_r+0x30e>
 8028348:	9b03      	ldr	r3, [sp, #12]
 802834a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802834e:	9303      	str	r3, [sp, #12]
 8028350:	e605      	b.n	8027f5e <_vfiprintf_r+0x102>
 8028352:	f817 3b01 	ldrb.w	r3, [r7], #1
 8028356:	2b2a      	cmp	r3, #42	; 0x2a
 8028358:	f000 8256 	beq.w	8028808 <_vfiprintf_r+0x9ac>
 802835c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8028360:	2400      	movs	r4, #0
 8028362:	2909      	cmp	r1, #9
 8028364:	f63f adfd 	bhi.w	8027f62 <_vfiprintf_r+0x106>
 8028368:	4638      	mov	r0, r7
 802836a:	2400      	movs	r4, #0
 802836c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8028370:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8028374:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8028378:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802837c:	2909      	cmp	r1, #9
 802837e:	4607      	mov	r7, r0
 8028380:	d9f4      	bls.n	802836c <_vfiprintf_r+0x510>
 8028382:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8028386:	e5ec      	b.n	8027f62 <_vfiprintf_r+0x106>
 8028388:	222b      	movs	r2, #43	; 0x2b
 802838a:	e5e8      	b.n	8027f5e <_vfiprintf_r+0x102>
 802838c:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8028390:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8028394:	f89d 151f 	ldrb.w	r1, [sp, #1311]	; 0x51f
 8028398:	b179      	cbz	r1, 80283ba <_vfiprintf_r+0x55e>
 802839a:	3301      	adds	r3, #1
 802839c:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80283a0:	310f      	adds	r1, #15
 80283a2:	6029      	str	r1, [r5, #0]
 80283a4:	2101      	movs	r1, #1
 80283a6:	2b07      	cmp	r3, #7
 80283a8:	440a      	add	r2, r1
 80283aa:	6069      	str	r1, [r5, #4]
 80283ac:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80283b0:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80283b4:	f300 819d 	bgt.w	80286f2 <_vfiprintf_r+0x896>
 80283b8:	3508      	adds	r5, #8
 80283ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80283bc:	b179      	cbz	r1, 80283de <_vfiprintf_r+0x582>
 80283be:	3301      	adds	r3, #1
 80283c0:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80283c4:	310c      	adds	r1, #12
 80283c6:	6029      	str	r1, [r5, #0]
 80283c8:	2102      	movs	r1, #2
 80283ca:	2b07      	cmp	r3, #7
 80283cc:	440a      	add	r2, r1
 80283ce:	6069      	str	r1, [r5, #4]
 80283d0:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80283d4:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80283d8:	f300 819a 	bgt.w	8028710 <_vfiprintf_r+0x8b4>
 80283dc:	3508      	adds	r5, #8
 80283de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80283e0:	2880      	cmp	r0, #128	; 0x80
 80283e2:	f000 80d2 	beq.w	802858a <_vfiprintf_r+0x72e>
 80283e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80283e8:	9806      	ldr	r0, [sp, #24]
 80283ea:	1a0c      	subs	r4, r1, r0
 80283ec:	2c00      	cmp	r4, #0
 80283ee:	dd3a      	ble.n	8028466 <_vfiprintf_r+0x60a>
 80283f0:	2c10      	cmp	r4, #16
 80283f2:	4e06      	ldr	r6, [pc, #24]	; (802840c <_vfiprintf_r+0x5b0>)
 80283f4:	bfc8      	it	gt
 80283f6:	f04f 0810 	movgt.w	r8, #16
 80283fa:	dc0c      	bgt.n	8028416 <_vfiprintf_r+0x5ba>
 80283fc:	e027      	b.n	802844e <_vfiprintf_r+0x5f2>
 80283fe:	bf00      	nop
 8028400:	0802e82c 	.word	0x0802e82c
 8028404:	08035e9c 	.word	0x08035e9c
 8028408:	08035eb0 	.word	0x08035eb0
 802840c:	0802e83c 	.word	0x0802e83c
 8028410:	3c10      	subs	r4, #16
 8028412:	2c10      	cmp	r4, #16
 8028414:	dd1b      	ble.n	802844e <_vfiprintf_r+0x5f2>
 8028416:	3301      	adds	r3, #1
 8028418:	3210      	adds	r2, #16
 802841a:	e885 0140 	stmia.w	r5, {r6, r8}
 802841e:	3508      	adds	r5, #8
 8028420:	2b07      	cmp	r3, #7
 8028422:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8028426:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 802842a:	ddf1      	ble.n	8028410 <_vfiprintf_r+0x5b4>
 802842c:	4658      	mov	r0, fp
 802842e:	4649      	mov	r1, r9
 8028430:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8028434:	4655      	mov	r5, sl
 8028436:	f7ff fcd1 	bl	8027ddc <__sprint_r>
 802843a:	2800      	cmp	r0, #0
 802843c:	f040 8096 	bne.w	802856c <_vfiprintf_r+0x710>
 8028440:	3c10      	subs	r4, #16
 8028442:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8028446:	2c10      	cmp	r4, #16
 8028448:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 802844c:	dce3      	bgt.n	8028416 <_vfiprintf_r+0x5ba>
 802844e:	3301      	adds	r3, #1
 8028450:	1912      	adds	r2, r2, r4
 8028452:	2b07      	cmp	r3, #7
 8028454:	602e      	str	r6, [r5, #0]
 8028456:	606c      	str	r4, [r5, #4]
 8028458:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 802845c:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8028460:	f300 8138 	bgt.w	80286d4 <_vfiprintf_r+0x878>
 8028464:	3508      	adds	r5, #8
 8028466:	3301      	adds	r3, #1
 8028468:	990a      	ldr	r1, [sp, #40]	; 0x28
 802846a:	9806      	ldr	r0, [sp, #24]
 802846c:	2b07      	cmp	r3, #7
 802846e:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8028472:	6029      	str	r1, [r5, #0]
 8028474:	4402      	add	r2, r0
 8028476:	6068      	str	r0, [r5, #4]
 8028478:	bfd8      	it	le
 802847a:	f105 0108 	addle.w	r1, r5, #8
 802847e:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8028482:	f300 80ba 	bgt.w	80285fa <_vfiprintf_r+0x79e>
 8028486:	9b03      	ldr	r3, [sp, #12]
 8028488:	0758      	lsls	r0, r3, #29
 802848a:	d536      	bpl.n	80284fa <_vfiprintf_r+0x69e>
 802848c:	9d08      	ldr	r5, [sp, #32]
 802848e:	9b04      	ldr	r3, [sp, #16]
 8028490:	1aec      	subs	r4, r5, r3
 8028492:	2c00      	cmp	r4, #0
 8028494:	dd31      	ble.n	80284fa <_vfiprintf_r+0x69e>
 8028496:	2c10      	cmp	r4, #16
 8028498:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 802849c:	bfd8      	it	le
 802849e:	4ea6      	ldrle	r6, [pc, #664]	; (8028738 <_vfiprintf_r+0x8dc>)
 80284a0:	dd20      	ble.n	80284e4 <_vfiprintf_r+0x688>
 80284a2:	2510      	movs	r5, #16
 80284a4:	4ea4      	ldr	r6, [pc, #656]	; (8028738 <_vfiprintf_r+0x8dc>)
 80284a6:	e002      	b.n	80284ae <_vfiprintf_r+0x652>
 80284a8:	3c10      	subs	r4, #16
 80284aa:	2c10      	cmp	r4, #16
 80284ac:	dd1a      	ble.n	80284e4 <_vfiprintf_r+0x688>
 80284ae:	3301      	adds	r3, #1
 80284b0:	3210      	adds	r2, #16
 80284b2:	600e      	str	r6, [r1, #0]
 80284b4:	604d      	str	r5, [r1, #4]
 80284b6:	3108      	adds	r1, #8
 80284b8:	2b07      	cmp	r3, #7
 80284ba:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80284be:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80284c2:	ddf1      	ble.n	80284a8 <_vfiprintf_r+0x64c>
 80284c4:	4658      	mov	r0, fp
 80284c6:	4649      	mov	r1, r9
 80284c8:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 80284cc:	f7ff fc86 	bl	8027ddc <__sprint_r>
 80284d0:	2800      	cmp	r0, #0
 80284d2:	d14b      	bne.n	802856c <_vfiprintf_r+0x710>
 80284d4:	3c10      	subs	r4, #16
 80284d6:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 80284da:	2c10      	cmp	r4, #16
 80284dc:	4651      	mov	r1, sl
 80284de:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 80284e2:	dce4      	bgt.n	80284ae <_vfiprintf_r+0x652>
 80284e4:	3301      	adds	r3, #1
 80284e6:	18a2      	adds	r2, r4, r2
 80284e8:	2b07      	cmp	r3, #7
 80284ea:	600e      	str	r6, [r1, #0]
 80284ec:	604c      	str	r4, [r1, #4]
 80284ee:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80284f2:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80284f6:	f300 8194 	bgt.w	8028822 <_vfiprintf_r+0x9c6>
 80284fa:	9d05      	ldr	r5, [sp, #20]
 80284fc:	9b04      	ldr	r3, [sp, #16]
 80284fe:	9808      	ldr	r0, [sp, #32]
 8028500:	4283      	cmp	r3, r0
 8028502:	bfac      	ite	ge
 8028504:	18ed      	addge	r5, r5, r3
 8028506:	182d      	addlt	r5, r5, r0
 8028508:	9505      	str	r5, [sp, #20]
 802850a:	bb3a      	cbnz	r2, 802855c <_vfiprintf_r+0x700>
 802850c:	2300      	movs	r3, #0
 802850e:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8028512:	783b      	ldrb	r3, [r7, #0]
 8028514:	4655      	mov	r5, sl
 8028516:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 802851a:	bf18      	it	ne
 802851c:	2201      	movne	r2, #1
 802851e:	2b00      	cmp	r3, #0
 8028520:	bf0c      	ite	eq
 8028522:	2300      	moveq	r3, #0
 8028524:	f002 0301 	andne.w	r3, r2, #1
 8028528:	2b00      	cmp	r3, #0
 802852a:	f47f ace7 	bne.w	8027efc <_vfiprintf_r+0xa0>
 802852e:	463c      	mov	r4, r7
 8028530:	e508      	b.n	8027f44 <_vfiprintf_r+0xe8>
 8028532:	2b00      	cmp	r3, #0
 8028534:	d16d      	bne.n	8028612 <_vfiprintf_r+0x7b6>
 8028536:	9803      	ldr	r0, [sp, #12]
 8028538:	07c2      	lsls	r2, r0, #31
 802853a:	bf5e      	ittt	pl
 802853c:	9306      	strpl	r3, [sp, #24]
 802853e:	f50d 63a2 	addpl.w	r3, sp, #1296	; 0x510
 8028542:	930a      	strpl	r3, [sp, #40]	; 0x28
 8028544:	f57f adb6 	bpl.w	80280b4 <_vfiprintf_r+0x258>
 8028548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802854a:	9306      	str	r3, [sp, #24]
 802854c:	2330      	movs	r3, #48	; 0x30
 802854e:	f88d 350f 	strb.w	r3, [sp, #1295]	; 0x50f
 8028552:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8028556:	330f      	adds	r3, #15
 8028558:	930a      	str	r3, [sp, #40]	; 0x28
 802855a:	e5ab      	b.n	80280b4 <_vfiprintf_r+0x258>
 802855c:	4658      	mov	r0, fp
 802855e:	4649      	mov	r1, r9
 8028560:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8028564:	f7ff fc3a 	bl	8027ddc <__sprint_r>
 8028568:	2800      	cmp	r0, #0
 802856a:	d0cf      	beq.n	802850c <_vfiprintf_r+0x6b0>
 802856c:	464c      	mov	r4, r9
 802856e:	89a3      	ldrh	r3, [r4, #12]
 8028570:	f013 0f40 	tst.w	r3, #64	; 0x40
 8028574:	9b05      	ldr	r3, [sp, #20]
 8028576:	bf18      	it	ne
 8028578:	f04f 33ff 	movne.w	r3, #4294967295
 802857c:	9305      	str	r3, [sp, #20]
 802857e:	9805      	ldr	r0, [sp, #20]
 8028580:	b049      	add	sp, #292	; 0x124
 8028582:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8028586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802858a:	9908      	ldr	r1, [sp, #32]
 802858c:	9804      	ldr	r0, [sp, #16]
 802858e:	1a0c      	subs	r4, r1, r0
 8028590:	2c00      	cmp	r4, #0
 8028592:	f77f af28 	ble.w	80283e6 <_vfiprintf_r+0x58a>
 8028596:	2c10      	cmp	r4, #16
 8028598:	4e68      	ldr	r6, [pc, #416]	; (802873c <_vfiprintf_r+0x8e0>)
 802859a:	bfc8      	it	gt
 802859c:	f04f 0810 	movgt.w	r8, #16
 80285a0:	dc03      	bgt.n	80285aa <_vfiprintf_r+0x74e>
 80285a2:	e01d      	b.n	80285e0 <_vfiprintf_r+0x784>
 80285a4:	3c10      	subs	r4, #16
 80285a6:	2c10      	cmp	r4, #16
 80285a8:	dd1a      	ble.n	80285e0 <_vfiprintf_r+0x784>
 80285aa:	3301      	adds	r3, #1
 80285ac:	3210      	adds	r2, #16
 80285ae:	e885 0140 	stmia.w	r5, {r6, r8}
 80285b2:	3508      	adds	r5, #8
 80285b4:	2b07      	cmp	r3, #7
 80285b6:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80285ba:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80285be:	ddf1      	ble.n	80285a4 <_vfiprintf_r+0x748>
 80285c0:	4658      	mov	r0, fp
 80285c2:	4649      	mov	r1, r9
 80285c4:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 80285c8:	4655      	mov	r5, sl
 80285ca:	f7ff fc07 	bl	8027ddc <__sprint_r>
 80285ce:	2800      	cmp	r0, #0
 80285d0:	d1cc      	bne.n	802856c <_vfiprintf_r+0x710>
 80285d2:	3c10      	subs	r4, #16
 80285d4:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 80285d8:	2c10      	cmp	r4, #16
 80285da:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 80285de:	dce4      	bgt.n	80285aa <_vfiprintf_r+0x74e>
 80285e0:	3301      	adds	r3, #1
 80285e2:	1912      	adds	r2, r2, r4
 80285e4:	2b07      	cmp	r3, #7
 80285e6:	602e      	str	r6, [r5, #0]
 80285e8:	606c      	str	r4, [r5, #4]
 80285ea:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80285ee:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80285f2:	f300 8144 	bgt.w	802887e <_vfiprintf_r+0xa22>
 80285f6:	3508      	adds	r5, #8
 80285f8:	e6f5      	b.n	80283e6 <_vfiprintf_r+0x58a>
 80285fa:	4658      	mov	r0, fp
 80285fc:	4649      	mov	r1, r9
 80285fe:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8028602:	f7ff fbeb 	bl	8027ddc <__sprint_r>
 8028606:	2800      	cmp	r0, #0
 8028608:	d1b0      	bne.n	802856c <_vfiprintf_r+0x710>
 802860a:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 802860e:	4651      	mov	r1, sl
 8028610:	e739      	b.n	8028486 <_vfiprintf_r+0x62a>
 8028612:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8028616:	9106      	str	r1, [sp, #24]
 8028618:	930a      	str	r3, [sp, #40]	; 0x28
 802861a:	e54b      	b.n	80280b4 <_vfiprintf_r+0x258>
 802861c:	4658      	mov	r0, fp
 802861e:	4621      	mov	r1, r4
 8028620:	f000 f9ea 	bl	80289f8 <__swsetup_r>
 8028624:	2800      	cmp	r0, #0
 8028626:	f040 816c 	bne.w	8028902 <_vfiprintf_r+0xaa6>
 802862a:	89a5      	ldrh	r5, [r4, #12]
 802862c:	b2ab      	uxth	r3, r5
 802862e:	f003 031a 	and.w	r3, r3, #26
 8028632:	2b0a      	cmp	r3, #10
 8028634:	f47f ac38 	bne.w	8027ea8 <_vfiprintf_r+0x4c>
 8028638:	89e6      	ldrh	r6, [r4, #14]
 802863a:	0432      	lsls	r2, r6, #16
 802863c:	f53f ac34 	bmi.w	8027ea8 <_vfiprintf_r+0x4c>
 8028640:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
 8028644:	463a      	mov	r2, r7
 8028646:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 802864a:	4658      	mov	r0, fp
 802864c:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8028650:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 8028654:	9b07      	ldr	r3, [sp, #28]
 8028656:	f025 0502 	bic.w	r5, r5, #2
 802865a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 802865e:	f8ad 544c 	strh.w	r5, [sp, #1100]	; 0x44c
 8028662:	f8cd e4a4 	str.w	lr, [sp, #1188]	; 0x4a4
 8028666:	ad10      	add	r5, sp, #64	; 0x40
 8028668:	f8ad 644e 	strh.w	r6, [sp, #1102]	; 0x44e
 802866c:	f8cd 5440 	str.w	r5, [sp, #1088]	; 0x440
 8028670:	f8cd 5450 	str.w	r5, [sp, #1104]	; 0x450
 8028674:	2500      	movs	r5, #0
 8028676:	f8cd c45c 	str.w	ip, [sp, #1116]	; 0x45c
 802867a:	f8cd 8464 	str.w	r8, [sp, #1124]	; 0x464
 802867e:	f8cd 7448 	str.w	r7, [sp, #1096]	; 0x448
 8028682:	f8cd 7454 	str.w	r7, [sp, #1108]	; 0x454
 8028686:	f8cd 5458 	str.w	r5, [sp, #1112]	; 0x458
 802868a:	f7ff fbe7 	bl	8027e5c <_vfiprintf_r>
 802868e:	42a8      	cmp	r0, r5
 8028690:	9005      	str	r0, [sp, #20]
 8028692:	db0a      	blt.n	80286aa <_vfiprintf_r+0x84e>
 8028694:	4658      	mov	r0, fp
 8028696:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 802869a:	f001 fa81 	bl	8029ba0 <_fflush_r>
 802869e:	9b05      	ldr	r3, [sp, #20]
 80286a0:	42a8      	cmp	r0, r5
 80286a2:	bf18      	it	ne
 80286a4:	f04f 33ff 	movne.w	r3, #4294967295
 80286a8:	9305      	str	r3, [sp, #20]
 80286aa:	f8bd 344c 	ldrh.w	r3, [sp, #1100]	; 0x44c
 80286ae:	065b      	lsls	r3, r3, #25
 80286b0:	f57f af65 	bpl.w	802857e <_vfiprintf_r+0x722>
 80286b4:	89a3      	ldrh	r3, [r4, #12]
 80286b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80286ba:	81a3      	strh	r3, [r4, #12]
 80286bc:	e75f      	b.n	802857e <_vfiprintf_r+0x722>
 80286be:	4658      	mov	r0, fp
 80286c0:	4649      	mov	r1, r9
 80286c2:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 80286c6:	f7ff fb89 	bl	8027ddc <__sprint_r>
 80286ca:	2800      	cmp	r0, #0
 80286cc:	f47f af4e 	bne.w	802856c <_vfiprintf_r+0x710>
 80286d0:	4655      	mov	r5, sl
 80286d2:	e434      	b.n	8027f3e <_vfiprintf_r+0xe2>
 80286d4:	4658      	mov	r0, fp
 80286d6:	4649      	mov	r1, r9
 80286d8:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 80286dc:	f7ff fb7e 	bl	8027ddc <__sprint_r>
 80286e0:	2800      	cmp	r0, #0
 80286e2:	f47f af43 	bne.w	802856c <_vfiprintf_r+0x710>
 80286e6:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 80286ea:	4655      	mov	r5, sl
 80286ec:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 80286f0:	e6b9      	b.n	8028466 <_vfiprintf_r+0x60a>
 80286f2:	4658      	mov	r0, fp
 80286f4:	4649      	mov	r1, r9
 80286f6:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 80286fa:	f7ff fb6f 	bl	8027ddc <__sprint_r>
 80286fe:	2800      	cmp	r0, #0
 8028700:	f47f af34 	bne.w	802856c <_vfiprintf_r+0x710>
 8028704:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8028708:	4655      	mov	r5, sl
 802870a:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 802870e:	e654      	b.n	80283ba <_vfiprintf_r+0x55e>
 8028710:	4658      	mov	r0, fp
 8028712:	4649      	mov	r1, r9
 8028714:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8028718:	f7ff fb60 	bl	8027ddc <__sprint_r>
 802871c:	2800      	cmp	r0, #0
 802871e:	f47f af25 	bne.w	802856c <_vfiprintf_r+0x710>
 8028722:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8028726:	4655      	mov	r5, sl
 8028728:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 802872c:	e657      	b.n	80283de <_vfiprintf_r+0x582>
 802872e:	f001 fb59 	bl	8029de4 <__sinit>
 8028732:	f7ff bba1 	b.w	8027e78 <_vfiprintf_r+0x1c>
 8028736:	bf00      	nop
 8028738:	0802e82c 	.word	0x0802e82c
 802873c:	0802e83c 	.word	0x0802e83c
 8028740:	2a09      	cmp	r2, #9
 8028742:	d97a      	bls.n	802883a <_vfiprintf_r+0x9de>
 8028744:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
 8028748:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 802874c:	300f      	adds	r0, #15
 802874e:	fbac 1302 	umull	r1, r3, ip, r2
 8028752:	4601      	mov	r1, r0
 8028754:	3801      	subs	r0, #1
 8028756:	08db      	lsrs	r3, r3, #3
 8028758:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 802875c:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 8028760:	461a      	mov	r2, r3
 8028762:	3630      	adds	r6, #48	; 0x30
 8028764:	700e      	strb	r6, [r1, #0]
 8028766:	2b00      	cmp	r3, #0
 8028768:	d1f1      	bne.n	802874e <_vfiprintf_r+0x8f2>
 802876a:	9b02      	ldr	r3, [sp, #8]
 802876c:	910a      	str	r1, [sp, #40]	; 0x28
 802876e:	1a5b      	subs	r3, r3, r1
 8028770:	9306      	str	r3, [sp, #24]
 8028772:	e49f      	b.n	80280b4 <_vfiprintf_r+0x258>
 8028774:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8028778:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802877a:	330f      	adds	r3, #15
 802877c:	f002 000f 	and.w	r0, r2, #15
 8028780:	4619      	mov	r1, r3
 8028782:	3b01      	subs	r3, #1
 8028784:	0912      	lsrs	r2, r2, #4
 8028786:	5c30      	ldrb	r0, [r6, r0]
 8028788:	7008      	strb	r0, [r1, #0]
 802878a:	d1f7      	bne.n	802877c <_vfiprintf_r+0x920>
 802878c:	9b02      	ldr	r3, [sp, #8]
 802878e:	910a      	str	r1, [sp, #40]	; 0x28
 8028790:	1a5b      	subs	r3, r3, r1
 8028792:	9306      	str	r3, [sp, #24]
 8028794:	e48e      	b.n	80280b4 <_vfiprintf_r+0x258>
 8028796:	9a03      	ldr	r2, [sp, #12]
 8028798:	f012 0140 	ands.w	r1, r2, #64	; 0x40
 802879c:	d06b      	beq.n	8028876 <_vfiprintf_r+0xa1a>
 802879e:	9807      	ldr	r0, [sp, #28]
 80287a0:	8802      	ldrh	r2, [r0, #0]
 80287a2:	3004      	adds	r0, #4
 80287a4:	9007      	str	r0, [sp, #28]
 80287a6:	1c11      	adds	r1, r2, #0
 80287a8:	bf18      	it	ne
 80287aa:	2101      	movne	r1, #1
 80287ac:	e4a2      	b.n	80280f4 <_vfiprintf_r+0x298>
 80287ae:	9b03      	ldr	r3, [sp, #12]
 80287b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80287b4:	9b07      	ldr	r3, [sp, #28]
 80287b6:	d056      	beq.n	8028866 <_vfiprintf_r+0xa0a>
 80287b8:	881a      	ldrh	r2, [r3, #0]
 80287ba:	2301      	movs	r3, #1
 80287bc:	e4a9      	b.n	8028112 <_vfiprintf_r+0x2b6>
 80287be:	9b03      	ldr	r3, [sp, #12]
 80287c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80287c4:	9b07      	ldr	r3, [sp, #28]
 80287c6:	bf0c      	ite	eq
 80287c8:	681a      	ldreq	r2, [r3, #0]
 80287ca:	f9b3 2000 	ldrshne.w	r2, [r3]
 80287ce:	3304      	adds	r3, #4
 80287d0:	9307      	str	r3, [sp, #28]
 80287d2:	2a00      	cmp	r2, #0
 80287d4:	f6bf ac3b 	bge.w	802804e <_vfiprintf_r+0x1f2>
 80287d8:	4252      	negs	r2, r2
 80287da:	1c11      	adds	r1, r2, #0
 80287dc:	bf18      	it	ne
 80287de:	2101      	movne	r1, #1
 80287e0:	232d      	movs	r3, #45	; 0x2d
 80287e2:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 80287e6:	2301      	movs	r3, #1
 80287e8:	e435      	b.n	8028056 <_vfiprintf_r+0x1fa>
 80287ea:	4658      	mov	r0, fp
 80287ec:	4649      	mov	r1, r9
 80287ee:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 80287f2:	f7ff faf3 	bl	8027ddc <__sprint_r>
 80287f6:	2800      	cmp	r0, #0
 80287f8:	f47f aeb8 	bne.w	802856c <_vfiprintf_r+0x710>
 80287fc:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8028800:	4655      	mov	r5, sl
 8028802:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8028806:	e5c5      	b.n	8028394 <_vfiprintf_r+0x538>
 8028808:	9b07      	ldr	r3, [sp, #28]
 802880a:	681c      	ldr	r4, [r3, #0]
 802880c:	3304      	adds	r3, #4
 802880e:	2c00      	cmp	r4, #0
 8028810:	bfbc      	itt	lt
 8028812:	9307      	strlt	r3, [sp, #28]
 8028814:	f04f 34ff 	movlt.w	r4, #4294967295
 8028818:	f6ff aba1 	blt.w	8027f5e <_vfiprintf_r+0x102>
 802881c:	9307      	str	r3, [sp, #28]
 802881e:	f7ff bb9e 	b.w	8027f5e <_vfiprintf_r+0x102>
 8028822:	4658      	mov	r0, fp
 8028824:	4649      	mov	r1, r9
 8028826:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 802882a:	f7ff fad7 	bl	8027ddc <__sprint_r>
 802882e:	2800      	cmp	r0, #0
 8028830:	f47f ae9c 	bne.w	802856c <_vfiprintf_r+0x710>
 8028834:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8028838:	e65f      	b.n	80284fa <_vfiprintf_r+0x69e>
 802883a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802883c:	3230      	adds	r2, #48	; 0x30
 802883e:	f88d 250f 	strb.w	r2, [sp, #1295]	; 0x50f
 8028842:	9306      	str	r3, [sp, #24]
 8028844:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8028848:	330f      	adds	r3, #15
 802884a:	930a      	str	r3, [sp, #40]	; 0x28
 802884c:	e432      	b.n	80280b4 <_vfiprintf_r+0x258>
 802884e:	9b02      	ldr	r3, [sp, #8]
 8028850:	1a1b      	subs	r3, r3, r0
 8028852:	9306      	str	r3, [sp, #24]
 8028854:	e42e      	b.n	80280b4 <_vfiprintf_r+0x258>
 8028856:	9807      	ldr	r0, [sp, #28]
 8028858:	9905      	ldr	r1, [sp, #20]
 802885a:	6803      	ldr	r3, [r0, #0]
 802885c:	3004      	adds	r0, #4
 802885e:	9007      	str	r0, [sp, #28]
 8028860:	6019      	str	r1, [r3, #0]
 8028862:	f7ff bb3e 	b.w	8027ee2 <_vfiprintf_r+0x86>
 8028866:	681a      	ldr	r2, [r3, #0]
 8028868:	2301      	movs	r3, #1
 802886a:	e452      	b.n	8028112 <_vfiprintf_r+0x2b6>
 802886c:	9907      	ldr	r1, [sp, #28]
 802886e:	680a      	ldr	r2, [r1, #0]
 8028870:	3104      	adds	r1, #4
 8028872:	9107      	str	r1, [sp, #28]
 8028874:	e4d1      	b.n	802821a <_vfiprintf_r+0x3be>
 8028876:	9b07      	ldr	r3, [sp, #28]
 8028878:	681a      	ldr	r2, [r3, #0]
 802887a:	460b      	mov	r3, r1
 802887c:	e449      	b.n	8028112 <_vfiprintf_r+0x2b6>
 802887e:	4658      	mov	r0, fp
 8028880:	4649      	mov	r1, r9
 8028882:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8028886:	f7ff faa9 	bl	8027ddc <__sprint_r>
 802888a:	2800      	cmp	r0, #0
 802888c:	f47f ae6e 	bne.w	802856c <_vfiprintf_r+0x710>
 8028890:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8028894:	4655      	mov	r5, sl
 8028896:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 802889a:	e5a4      	b.n	80283e6 <_vfiprintf_r+0x58a>
 802889c:	f8dd 3518 	ldr.w	r3, [sp, #1304]	; 0x518
 80288a0:	464c      	mov	r4, r9
 80288a2:	2b00      	cmp	r3, #0
 80288a4:	f43f ae63 	beq.w	802856e <_vfiprintf_r+0x712>
 80288a8:	4658      	mov	r0, fp
 80288aa:	4649      	mov	r1, r9
 80288ac:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 80288b0:	f7ff fa94 	bl	8027ddc <__sprint_r>
 80288b4:	e65b      	b.n	802856e <_vfiprintf_r+0x712>
 80288b6:	9a07      	ldr	r2, [sp, #28]
 80288b8:	9805      	ldr	r0, [sp, #20]
 80288ba:	6813      	ldr	r3, [r2, #0]
 80288bc:	3204      	adds	r2, #4
 80288be:	9207      	str	r2, [sp, #28]
 80288c0:	6018      	str	r0, [r3, #0]
 80288c2:	f7ff bb0e 	b.w	8027ee2 <_vfiprintf_r+0x86>
 80288c6:	9609      	str	r6, [sp, #36]	; 0x24
 80288c8:	f7fe f828 	bl	802691c <strlen>
 80288cc:	9006      	str	r0, [sp, #24]
 80288ce:	f7ff bbf2 	b.w	80280b6 <_vfiprintf_r+0x25a>
 80288d2:	4b0e      	ldr	r3, [pc, #56]	; (802890c <_vfiprintf_r+0xab0>)
 80288d4:	2c06      	cmp	r4, #6
 80288d6:	bf28      	it	cs
 80288d8:	2406      	movcs	r4, #6
 80288da:	9406      	str	r4, [sp, #24]
 80288dc:	930a      	str	r3, [sp, #40]	; 0x28
 80288de:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80288e2:	9304      	str	r3, [sp, #16]
 80288e4:	e441      	b.n	802816a <_vfiprintf_r+0x30e>
 80288e6:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 80288ea:	4e09      	ldr	r6, [pc, #36]	; (8028910 <_vfiprintf_r+0xab4>)
 80288ec:	e47d      	b.n	80281ea <_vfiprintf_r+0x38e>
 80288ee:	9b02      	ldr	r3, [sp, #8]
 80288f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80288f2:	1a1b      	subs	r3, r3, r0
 80288f4:	9306      	str	r3, [sp, #24]
 80288f6:	f7ff bbdd 	b.w	80280b4 <_vfiprintf_r+0x258>
 80288fa:	9406      	str	r4, [sp, #24]
 80288fc:	9009      	str	r0, [sp, #36]	; 0x24
 80288fe:	f7ff bbda 	b.w	80280b6 <_vfiprintf_r+0x25a>
 8028902:	f04f 35ff 	mov.w	r5, #4294967295
 8028906:	9505      	str	r5, [sp, #20]
 8028908:	e639      	b.n	802857e <_vfiprintf_r+0x722>
 802890a:	bf00      	nop
 802890c:	08035ec4 	.word	0x08035ec4
 8028910:	0802e82c 	.word	0x0802e82c

08028914 <vfiprintf>:
 8028914:	b430      	push	{r4, r5}
 8028916:	f240 0408 	movw	r4, #8
 802891a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 802891e:	460d      	mov	r5, r1
 8028920:	4613      	mov	r3, r2
 8028922:	4601      	mov	r1, r0
 8028924:	462a      	mov	r2, r5
 8028926:	6820      	ldr	r0, [r4, #0]
 8028928:	bc30      	pop	{r4, r5}
 802892a:	f7ff ba97 	b.w	8027e5c <_vfiprintf_r>
 802892e:	bf00      	nop

08028930 <__swbuf_r>:
 8028930:	b570      	push	{r4, r5, r6, lr}
 8028932:	4604      	mov	r4, r0
 8028934:	460d      	mov	r5, r1
 8028936:	4616      	mov	r6, r2
 8028938:	b110      	cbz	r0, 8028940 <__swbuf_r+0x10>
 802893a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802893c:	2b00      	cmp	r3, #0
 802893e:	d044      	beq.n	80289ca <__swbuf_r+0x9a>
 8028940:	89b2      	ldrh	r2, [r6, #12]
 8028942:	69b1      	ldr	r1, [r6, #24]
 8028944:	b293      	uxth	r3, r2
 8028946:	60b1      	str	r1, [r6, #8]
 8028948:	0719      	lsls	r1, r3, #28
 802894a:	d52d      	bpl.n	80289a8 <__swbuf_r+0x78>
 802894c:	6931      	ldr	r1, [r6, #16]
 802894e:	2900      	cmp	r1, #0
 8028950:	d02a      	beq.n	80289a8 <__swbuf_r+0x78>
 8028952:	049b      	lsls	r3, r3, #18
 8028954:	bf5e      	ittt	pl
 8028956:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 802895a:	81b2      	strhpl	r2, [r6, #12]
 802895c:	6e73      	ldrpl	r3, [r6, #100]	; 0x64
 802895e:	6972      	ldr	r2, [r6, #20]
 8028960:	bf5c      	itt	pl
 8028962:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 8028966:	6673      	strpl	r3, [r6, #100]	; 0x64
 8028968:	6833      	ldr	r3, [r6, #0]
 802896a:	1a59      	subs	r1, r3, r1
 802896c:	4291      	cmp	r1, r2
 802896e:	da24      	bge.n	80289ba <__swbuf_r+0x8a>
 8028970:	3101      	adds	r1, #1
 8028972:	68b2      	ldr	r2, [r6, #8]
 8028974:	b2ed      	uxtb	r5, r5
 8028976:	3a01      	subs	r2, #1
 8028978:	60b2      	str	r2, [r6, #8]
 802897a:	f803 5b01 	strb.w	r5, [r3], #1
 802897e:	6972      	ldr	r2, [r6, #20]
 8028980:	6033      	str	r3, [r6, #0]
 8028982:	428a      	cmp	r2, r1
 8028984:	d006      	beq.n	8028994 <__swbuf_r+0x64>
 8028986:	89b3      	ldrh	r3, [r6, #12]
 8028988:	2d0a      	cmp	r5, #10
 802898a:	bf14      	ite	ne
 802898c:	2300      	movne	r3, #0
 802898e:	f003 0301 	andeq.w	r3, r3, #1
 8028992:	b13b      	cbz	r3, 80289a4 <__swbuf_r+0x74>
 8028994:	4620      	mov	r0, r4
 8028996:	4631      	mov	r1, r6
 8028998:	f001 f902 	bl	8029ba0 <_fflush_r>
 802899c:	2800      	cmp	r0, #0
 802899e:	bf18      	it	ne
 80289a0:	f04f 35ff 	movne.w	r5, #4294967295
 80289a4:	4628      	mov	r0, r5
 80289a6:	bd70      	pop	{r4, r5, r6, pc}
 80289a8:	4620      	mov	r0, r4
 80289aa:	4631      	mov	r1, r6
 80289ac:	f000 f824 	bl	80289f8 <__swsetup_r>
 80289b0:	b970      	cbnz	r0, 80289d0 <__swbuf_r+0xa0>
 80289b2:	89b2      	ldrh	r2, [r6, #12]
 80289b4:	6931      	ldr	r1, [r6, #16]
 80289b6:	b293      	uxth	r3, r2
 80289b8:	e7cb      	b.n	8028952 <__swbuf_r+0x22>
 80289ba:	4620      	mov	r0, r4
 80289bc:	4631      	mov	r1, r6
 80289be:	f001 f8ef 	bl	8029ba0 <_fflush_r>
 80289c2:	b970      	cbnz	r0, 80289e2 <__swbuf_r+0xb2>
 80289c4:	6833      	ldr	r3, [r6, #0]
 80289c6:	2101      	movs	r1, #1
 80289c8:	e7d3      	b.n	8028972 <__swbuf_r+0x42>
 80289ca:	f001 fa0b 	bl	8029de4 <__sinit>
 80289ce:	e7b7      	b.n	8028940 <__swbuf_r+0x10>
 80289d0:	89b3      	ldrh	r3, [r6, #12]
 80289d2:	f04f 35ff 	mov.w	r5, #4294967295
 80289d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80289da:	81b3      	strh	r3, [r6, #12]
 80289dc:	2309      	movs	r3, #9
 80289de:	6023      	str	r3, [r4, #0]
 80289e0:	e7e0      	b.n	80289a4 <__swbuf_r+0x74>
 80289e2:	f04f 35ff 	mov.w	r5, #4294967295
 80289e6:	e7dd      	b.n	80289a4 <__swbuf_r+0x74>

080289e8 <__swbuf>:
 80289e8:	f240 0308 	movw	r3, #8
 80289ec:	460a      	mov	r2, r1
 80289ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80289f2:	4601      	mov	r1, r0
 80289f4:	6818      	ldr	r0, [r3, #0]
 80289f6:	e79b      	b.n	8028930 <__swbuf_r>

080289f8 <__swsetup_r>:
 80289f8:	b538      	push	{r3, r4, r5, lr}
 80289fa:	4605      	mov	r5, r0
 80289fc:	4b2b      	ldr	r3, [pc, #172]	; (8028aac <__swsetup_r+0xb4>)
 80289fe:	460c      	mov	r4, r1
 8028a00:	6818      	ldr	r0, [r3, #0]
 8028a02:	b110      	cbz	r0, 8028a0a <__swsetup_r+0x12>
 8028a04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8028a06:	2b00      	cmp	r3, #0
 8028a08:	d03d      	beq.n	8028a86 <__swsetup_r+0x8e>
 8028a0a:	89a2      	ldrh	r2, [r4, #12]
 8028a0c:	b293      	uxth	r3, r2
 8028a0e:	0719      	lsls	r1, r3, #28
 8028a10:	bf48      	it	mi
 8028a12:	6921      	ldrmi	r1, [r4, #16]
 8028a14:	d41d      	bmi.n	8028a52 <__swsetup_r+0x5a>
 8028a16:	06d8      	lsls	r0, r3, #27
 8028a18:	d544      	bpl.n	8028aa4 <__swsetup_r+0xac>
 8028a1a:	0759      	lsls	r1, r3, #29
 8028a1c:	bf58      	it	pl
 8028a1e:	6921      	ldrpl	r1, [r4, #16]
 8028a20:	d513      	bpl.n	8028a4a <__swsetup_r+0x52>
 8028a22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8028a24:	b149      	cbz	r1, 8028a3a <__swsetup_r+0x42>
 8028a26:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8028a2a:	4299      	cmp	r1, r3
 8028a2c:	d003      	beq.n	8028a36 <__swsetup_r+0x3e>
 8028a2e:	4628      	mov	r0, r5
 8028a30:	f001 fb3c 	bl	802a0ac <_free_r>
 8028a34:	89a2      	ldrh	r2, [r4, #12]
 8028a36:	2300      	movs	r3, #0
 8028a38:	6323      	str	r3, [r4, #48]	; 0x30
 8028a3a:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8028a3e:	6921      	ldr	r1, [r4, #16]
 8028a40:	2300      	movs	r3, #0
 8028a42:	6063      	str	r3, [r4, #4]
 8028a44:	0412      	lsls	r2, r2, #16
 8028a46:	6021      	str	r1, [r4, #0]
 8028a48:	0c12      	lsrs	r2, r2, #16
 8028a4a:	f042 0308 	orr.w	r3, r2, #8
 8028a4e:	81a3      	strh	r3, [r4, #12]
 8028a50:	b29b      	uxth	r3, r3
 8028a52:	b1d9      	cbz	r1, 8028a8c <__swsetup_r+0x94>
 8028a54:	f013 0201 	ands.w	r2, r3, #1
 8028a58:	d007      	beq.n	8028a6a <__swsetup_r+0x72>
 8028a5a:	6963      	ldr	r3, [r4, #20]
 8028a5c:	2200      	movs	r2, #0
 8028a5e:	60a2      	str	r2, [r4, #8]
 8028a60:	425b      	negs	r3, r3
 8028a62:	61a3      	str	r3, [r4, #24]
 8028a64:	b139      	cbz	r1, 8028a76 <__swsetup_r+0x7e>
 8028a66:	2000      	movs	r0, #0
 8028a68:	bd38      	pop	{r3, r4, r5, pc}
 8028a6a:	079b      	lsls	r3, r3, #30
 8028a6c:	bf58      	it	pl
 8028a6e:	6962      	ldrpl	r2, [r4, #20]
 8028a70:	60a2      	str	r2, [r4, #8]
 8028a72:	2900      	cmp	r1, #0
 8028a74:	d1f7      	bne.n	8028a66 <__swsetup_r+0x6e>
 8028a76:	89a3      	ldrh	r3, [r4, #12]
 8028a78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8028a7c:	bf14      	ite	ne
 8028a7e:	f04f 30ff 	movne.w	r0, #4294967295
 8028a82:	2000      	moveq	r0, #0
 8028a84:	bd38      	pop	{r3, r4, r5, pc}
 8028a86:	f001 f9ad 	bl	8029de4 <__sinit>
 8028a8a:	e7be      	b.n	8028a0a <__swsetup_r+0x12>
 8028a8c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8028a90:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8028a94:	d0de      	beq.n	8028a54 <__swsetup_r+0x5c>
 8028a96:	4621      	mov	r1, r4
 8028a98:	4628      	mov	r0, r5
 8028a9a:	f001 fc5d 	bl	802a358 <__smakebuf_r>
 8028a9e:	89a3      	ldrh	r3, [r4, #12]
 8028aa0:	6921      	ldr	r1, [r4, #16]
 8028aa2:	e7d7      	b.n	8028a54 <__swsetup_r+0x5c>
 8028aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8028aa8:	bd38      	pop	{r3, r4, r5, pc}
 8028aaa:	bf00      	nop
 8028aac:	20000008 	.word	0x20000008

08028ab0 <__register_exitproc>:
 8028ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ab4:	4604      	mov	r4, r0
 8028ab6:	4828      	ldr	r0, [pc, #160]	; (8028b58 <__register_exitproc+0xa8>)
 8028ab8:	b084      	sub	sp, #16
 8028aba:	6805      	ldr	r5, [r0, #0]
 8028abc:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 8028ac0:	2e00      	cmp	r6, #0
 8028ac2:	d044      	beq.n	8028b4e <__register_exitproc+0x9e>
 8028ac4:	6870      	ldr	r0, [r6, #4]
 8028ac6:	281f      	cmp	r0, #31
 8028ac8:	dd1e      	ble.n	8028b08 <__register_exitproc+0x58>
 8028aca:	4824      	ldr	r0, [pc, #144]	; (8028b5c <__register_exitproc+0xac>)
 8028acc:	b910      	cbnz	r0, 8028ad4 <__register_exitproc+0x24>
 8028ace:	f04f 30ff 	mov.w	r0, #4294967295
 8028ad2:	e020      	b.n	8028b16 <__register_exitproc+0x66>
 8028ad4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8028ad8:	9103      	str	r1, [sp, #12]
 8028ada:	9202      	str	r2, [sp, #8]
 8028adc:	9301      	str	r3, [sp, #4]
 8028ade:	f7fc fe17 	bl	8025710 <malloc>
 8028ae2:	9903      	ldr	r1, [sp, #12]
 8028ae4:	9a02      	ldr	r2, [sp, #8]
 8028ae6:	9b01      	ldr	r3, [sp, #4]
 8028ae8:	4606      	mov	r6, r0
 8028aea:	2800      	cmp	r0, #0
 8028aec:	d0ef      	beq.n	8028ace <__register_exitproc+0x1e>
 8028aee:	f8d5 c148 	ldr.w	ip, [r5, #328]	; 0x148
 8028af2:	2700      	movs	r7, #0
 8028af4:	4638      	mov	r0, r7
 8028af6:	6077      	str	r7, [r6, #4]
 8028af8:	f8c6 c000 	str.w	ip, [r6]
 8028afc:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 8028b00:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
 8028b04:	f8c6 718c 	str.w	r7, [r6, #396]	; 0x18c
 8028b08:	b944      	cbnz	r4, 8028b1c <__register_exitproc+0x6c>
 8028b0a:	1c83      	adds	r3, r0, #2
 8028b0c:	1c42      	adds	r2, r0, #1
 8028b0e:	2000      	movs	r0, #0
 8028b10:	6072      	str	r2, [r6, #4]
 8028b12:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8028b16:	b004      	add	sp, #16
 8028b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028b1c:	2501      	movs	r5, #1
 8028b1e:	eb06 0880 	add.w	r8, r6, r0, lsl #2
 8028b22:	f8d6 c188 	ldr.w	ip, [r6, #392]	; 0x188
 8028b26:	4647      	mov	r7, r8
 8028b28:	4085      	lsls	r5, r0
 8028b2a:	2c02      	cmp	r4, #2
 8028b2c:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 8028b30:	bf08      	it	eq
 8028b32:	f8d6 318c 	ldreq.w	r3, [r6, #396]	; 0x18c
 8028b36:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 8028b3a:	ea4c 0205 	orr.w	r2, ip, r5
 8028b3e:	bf08      	it	eq
 8028b40:	431d      	orreq	r5, r3
 8028b42:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
 8028b46:	bf08      	it	eq
 8028b48:	f8c6 518c 	streq.w	r5, [r6, #396]	; 0x18c
 8028b4c:	e7dd      	b.n	8028b0a <__register_exitproc+0x5a>
 8028b4e:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8028b52:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 8028b56:	e7b5      	b.n	8028ac4 <__register_exitproc+0x14>
 8028b58:	0802e808 	.word	0x0802e808
 8028b5c:	08025711 	.word	0x08025711

08028b60 <quorem>:
 8028b60:	6903      	ldr	r3, [r0, #16]
 8028b62:	690a      	ldr	r2, [r1, #16]
 8028b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b68:	4680      	mov	r8, r0
 8028b6a:	b083      	sub	sp, #12
 8028b6c:	2000      	movs	r0, #0
 8028b6e:	429a      	cmp	r2, r3
 8028b70:	4689      	mov	r9, r1
 8028b72:	9200      	str	r2, [sp, #0]
 8028b74:	f300 8093 	bgt.w	8028c9e <quorem+0x13e>
 8028b78:	3203      	adds	r2, #3
 8028b7a:	9b00      	ldr	r3, [sp, #0]
 8028b7c:	f101 0514 	add.w	r5, r1, #20
 8028b80:	0092      	lsls	r2, r2, #2
 8028b82:	1e5c      	subs	r4, r3, #1
 8028b84:	f108 0314 	add.w	r3, r8, #20
 8028b88:	9301      	str	r3, [sp, #4]
 8028b8a:	188b      	adds	r3, r1, r2
 8028b8c:	4442      	add	r2, r8
 8028b8e:	1d1f      	adds	r7, r3, #4
 8028b90:	6859      	ldr	r1, [r3, #4]
 8028b92:	6850      	ldr	r0, [r2, #4]
 8028b94:	3101      	adds	r1, #1
 8028b96:	f002 ff3f 	bl	802ba18 <__aeabi_uidiv>
 8028b9a:	4606      	mov	r6, r0
 8028b9c:	2800      	cmp	r0, #0
 8028b9e:	d042      	beq.n	8028c26 <quorem+0xc6>
 8028ba0:	2000      	movs	r0, #0
 8028ba2:	9a01      	ldr	r2, [sp, #4]
 8028ba4:	462b      	mov	r3, r5
 8028ba6:	4686      	mov	lr, r0
 8028ba8:	f853 cb04 	ldr.w	ip, [r3], #4
 8028bac:	6811      	ldr	r1, [r2, #0]
 8028bae:	fa1f fb8c 	uxth.w	fp, ip
 8028bb2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8028bb6:	fa1f fa81 	uxth.w	sl, r1
 8028bba:	fb06 0b0b 	mla	fp, r6, fp, r0
 8028bbe:	44d6      	add	lr, sl
 8028bc0:	fb06 f00c 	mul.w	r0, r6, ip
 8028bc4:	eb00 401b 	add.w	r0, r0, fp, lsr #16
 8028bc8:	fa1f fb8b 	uxth.w	fp, fp
 8028bcc:	ebcb 0a0e 	rsb	sl, fp, lr
 8028bd0:	fa1f fe80 	uxth.w	lr, r0
 8028bd4:	0c00      	lsrs	r0, r0, #16
 8028bd6:	ebce 4e11 	rsb	lr, lr, r1, lsr #16
 8028bda:	429f      	cmp	r7, r3
 8028bdc:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
 8028be0:	fa1f fc8a 	uxth.w	ip, sl
 8028be4:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
 8028be8:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 8028bec:	f842 1b04 	str.w	r1, [r2], #4
 8028bf0:	d2da      	bcs.n	8028ba8 <quorem+0x48>
 8028bf2:	1d22      	adds	r2, r4, #4
 8028bf4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8028bf8:	6859      	ldr	r1, [r3, #4]
 8028bfa:	b9a1      	cbnz	r1, 8028c26 <quorem+0xc6>
 8028bfc:	9801      	ldr	r0, [sp, #4]
 8028bfe:	4298      	cmp	r0, r3
 8028c00:	d20f      	bcs.n	8028c22 <quorem+0xc2>
 8028c02:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8028c06:	b962      	cbnz	r2, 8028c22 <quorem+0xc2>
 8028c08:	9a00      	ldr	r2, [sp, #0]
 8028c0a:	1e91      	subs	r1, r2, #2
 8028c0c:	43c2      	mvns	r2, r0
 8028c0e:	18d2      	adds	r2, r2, r3
 8028c10:	eba1 0192 	sub.w	r1, r1, r2, lsr #2
 8028c14:	e002      	b.n	8028c1c <quorem+0xbc>
 8028c16:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8028c1a:	b912      	cbnz	r2, 8028c22 <quorem+0xc2>
 8028c1c:	3c01      	subs	r4, #1
 8028c1e:	428c      	cmp	r4, r1
 8028c20:	d1f9      	bne.n	8028c16 <quorem+0xb6>
 8028c22:	f8c8 4010 	str.w	r4, [r8, #16]
 8028c26:	4640      	mov	r0, r8
 8028c28:	4649      	mov	r1, r9
 8028c2a:	f001 fe61 	bl	802a8f0 <__mcmp>
 8028c2e:	2800      	cmp	r0, #0
 8028c30:	db34      	blt.n	8028c9c <quorem+0x13c>
 8028c32:	9b01      	ldr	r3, [sp, #4]
 8028c34:	3601      	adds	r6, #1
 8028c36:	f04f 0c00 	mov.w	ip, #0
 8028c3a:	f855 0b04 	ldr.w	r0, [r5], #4
 8028c3e:	6819      	ldr	r1, [r3, #0]
 8028c40:	fa1f f980 	uxth.w	r9, r0
 8028c44:	0c00      	lsrs	r0, r0, #16
 8028c46:	b28a      	uxth	r2, r1
 8028c48:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 8028c4c:	ebc9 0202 	rsb	r2, r9, r2
 8028c50:	42af      	cmp	r7, r5
 8028c52:	4494      	add	ip, r2
 8028c54:	eb01 422c 	add.w	r2, r1, ip, asr #16
 8028c58:	fa1f fc8c 	uxth.w	ip, ip
 8028c5c:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
 8028c60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8028c64:	f843 1b04 	str.w	r1, [r3], #4
 8028c68:	d2e7      	bcs.n	8028c3a <quorem+0xda>
 8028c6a:	1d22      	adds	r2, r4, #4
 8028c6c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8028c70:	6859      	ldr	r1, [r3, #4]
 8028c72:	b999      	cbnz	r1, 8028c9c <quorem+0x13c>
 8028c74:	9801      	ldr	r0, [sp, #4]
 8028c76:	4298      	cmp	r0, r3
 8028c78:	d20e      	bcs.n	8028c98 <quorem+0x138>
 8028c7a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8028c7e:	b95a      	cbnz	r2, 8028c98 <quorem+0x138>
 8028c80:	43c1      	mvns	r1, r0
 8028c82:	18c9      	adds	r1, r1, r3
 8028c84:	f021 0103 	bic.w	r1, r1, #3
 8028c88:	1a59      	subs	r1, r3, r1
 8028c8a:	e002      	b.n	8028c92 <quorem+0x132>
 8028c8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8028c90:	b912      	cbnz	r2, 8028c98 <quorem+0x138>
 8028c92:	3c01      	subs	r4, #1
 8028c94:	428b      	cmp	r3, r1
 8028c96:	d1f9      	bne.n	8028c8c <quorem+0x12c>
 8028c98:	f8c8 4010 	str.w	r4, [r8, #16]
 8028c9c:	4630      	mov	r0, r6
 8028c9e:	b003      	add	sp, #12
 8028ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028ca4 <_dtoa_r>:
 8028ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ca8:	4681      	mov	r9, r0
 8028caa:	b09d      	sub	sp, #116	; 0x74
 8028cac:	4619      	mov	r1, r3
 8028cae:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8028cb2:	4610      	mov	r0, r2
 8028cb4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8028cb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028cba:	b163      	cbz	r3, 8028cd6 <_dtoa_r+0x32>
 8028cbc:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8028cc0:	2501      	movs	r5, #1
 8028cc2:	4619      	mov	r1, r3
 8028cc4:	4648      	mov	r0, r9
 8028cc6:	4095      	lsls	r5, r2
 8028cc8:	609d      	str	r5, [r3, #8]
 8028cca:	605a      	str	r2, [r3, #4]
 8028ccc:	f001 fbdc 	bl	802a488 <_Bfree>
 8028cd0:	2300      	movs	r3, #0
 8028cd2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8028cd6:	9d03      	ldr	r5, [sp, #12]
 8028cd8:	2d00      	cmp	r5, #0
 8028cda:	f2c0 80e3 	blt.w	8028ea4 <_dtoa_r+0x200>
 8028cde:	2300      	movs	r3, #0
 8028ce0:	6023      	str	r3, [r4, #0]
 8028ce2:	2300      	movs	r3, #0
 8028ce4:	461a      	mov	r2, r3
 8028ce6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8028cea:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8028cee:	402b      	ands	r3, r5
 8028cf0:	4293      	cmp	r3, r2
 8028cf2:	f000 80c3 	beq.w	8028e7c <_dtoa_r+0x1d8>
 8028cf6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8028cfa:	2200      	movs	r2, #0
 8028cfc:	2300      	movs	r3, #0
 8028cfe:	2401      	movs	r4, #1
 8028d00:	4630      	mov	r0, r6
 8028d02:	4639      	mov	r1, r7
 8028d04:	f003 fbe6 	bl	802c4d4 <__aeabi_dcmpeq>
 8028d08:	b978      	cbnz	r0, 8028d2a <_dtoa_r+0x86>
 8028d0a:	f014 0fff 	tst.w	r4, #255	; 0xff
 8028d0e:	d110      	bne.n	8028d32 <_dtoa_r+0x8e>
 8028d10:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8028d12:	2301      	movs	r3, #1
 8028d14:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8028d16:	602b      	str	r3, [r5, #0]
 8028d18:	4d7b      	ldr	r5, [pc, #492]	; (8028f08 <_dtoa_r+0x264>)
 8028d1a:	b114      	cbz	r4, 8028d22 <_dtoa_r+0x7e>
 8028d1c:	4b7b      	ldr	r3, [pc, #492]	; (8028f0c <_dtoa_r+0x268>)
 8028d1e:	1e5d      	subs	r5, r3, #1
 8028d20:	6023      	str	r3, [r4, #0]
 8028d22:	4628      	mov	r0, r5
 8028d24:	b01d      	add	sp, #116	; 0x74
 8028d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d2a:	2400      	movs	r4, #0
 8028d2c:	f014 0fff 	tst.w	r4, #255	; 0xff
 8028d30:	d0ee      	beq.n	8028d10 <_dtoa_r+0x6c>
 8028d32:	463b      	mov	r3, r7
 8028d34:	4648      	mov	r0, r9
 8028d36:	4632      	mov	r2, r6
 8028d38:	a91b      	add	r1, sp, #108	; 0x6c
 8028d3a:	9100      	str	r1, [sp, #0]
 8028d3c:	a91a      	add	r1, sp, #104	; 0x68
 8028d3e:	9101      	str	r1, [sp, #4]
 8028d40:	f001 fee0 	bl	802ab04 <__d2b>
 8028d44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8028d48:	900f      	str	r0, [sp, #60]	; 0x3c
 8028d4a:	2b00      	cmp	r3, #0
 8028d4c:	f040 80b9 	bne.w	8028ec2 <_dtoa_r+0x21e>
 8028d50:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8028d52:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8028d56:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8028d58:	19be      	adds	r6, r7, r6
 8028d5a:	429e      	cmp	r6, r3
 8028d5c:	f2c0 82a2 	blt.w	80292a4 <_dtoa_r+0x600>
 8028d60:	9802      	ldr	r0, [sp, #8]
 8028d62:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8028d66:	f506 6282 	add.w	r2, r6, #1040	; 0x410
 8028d6a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8028d6e:	3202      	adds	r2, #2
 8028d70:	1b9b      	subs	r3, r3, r6
 8028d72:	fa30 f202 	lsrs.w	r2, r0, r2
 8028d76:	fa15 f303 	lsls.w	r3, r5, r3
 8028d7a:	ea43 0002 	orr.w	r0, r3, r2
 8028d7e:	f003 f8cb 	bl	802bf18 <__aeabi_ui2d>
 8028d82:	3e01      	subs	r6, #1
 8028d84:	2401      	movs	r4, #1
 8028d86:	9417      	str	r4, [sp, #92]	; 0x5c
 8028d88:	4602      	mov	r2, r0
 8028d8a:	460b      	mov	r3, r1
 8028d8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8028d90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028d92:	f1a5 75f8 	sub.w	r5, r5, #32505856	; 0x1f00000
 8028d96:	950d      	str	r5, [sp, #52]	; 0x34
 8028d98:	2300      	movs	r3, #0
 8028d9a:	2200      	movs	r2, #0
 8028d9c:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8028da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028da4:	f002 ff7a 	bl	802bc9c <__aeabi_dsub>
 8028da8:	a351      	add	r3, pc, #324	; (adr r3, 8028ef0 <_dtoa_r+0x24c>)
 8028daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028dae:	f003 f929 	bl	802c004 <__aeabi_dmul>
 8028db2:	a351      	add	r3, pc, #324	; (adr r3, 8028ef8 <_dtoa_r+0x254>)
 8028db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028db8:	f002 ff72 	bl	802bca0 <__adddf3>
 8028dbc:	4604      	mov	r4, r0
 8028dbe:	4630      	mov	r0, r6
 8028dc0:	460d      	mov	r5, r1
 8028dc2:	f003 f8b9 	bl	802bf38 <__aeabi_i2d>
 8028dc6:	a34e      	add	r3, pc, #312	; (adr r3, 8028f00 <_dtoa_r+0x25c>)
 8028dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028dcc:	f003 f91a 	bl	802c004 <__aeabi_dmul>
 8028dd0:	4602      	mov	r2, r0
 8028dd2:	460b      	mov	r3, r1
 8028dd4:	4620      	mov	r0, r4
 8028dd6:	4629      	mov	r1, r5
 8028dd8:	f002 ff62 	bl	802bca0 <__adddf3>
 8028ddc:	4604      	mov	r4, r0
 8028dde:	460d      	mov	r5, r1
 8028de0:	f003 fbaa 	bl	802c538 <__aeabi_d2iz>
 8028de4:	4629      	mov	r1, r5
 8028de6:	2200      	movs	r2, #0
 8028de8:	2300      	movs	r3, #0
 8028dea:	9006      	str	r0, [sp, #24]
 8028dec:	4620      	mov	r0, r4
 8028dee:	f003 fb7b 	bl	802c4e8 <__aeabi_dcmplt>
 8028df2:	b150      	cbz	r0, 8028e0a <_dtoa_r+0x166>
 8028df4:	9806      	ldr	r0, [sp, #24]
 8028df6:	f003 f89f 	bl	802bf38 <__aeabi_i2d>
 8028dfa:	4622      	mov	r2, r4
 8028dfc:	462b      	mov	r3, r5
 8028dfe:	f003 fb69 	bl	802c4d4 <__aeabi_dcmpeq>
 8028e02:	b910      	cbnz	r0, 8028e0a <_dtoa_r+0x166>
 8028e04:	9c06      	ldr	r4, [sp, #24]
 8028e06:	3c01      	subs	r4, #1
 8028e08:	9406      	str	r4, [sp, #24]
 8028e0a:	9d06      	ldr	r5, [sp, #24]
 8028e0c:	2d16      	cmp	r5, #22
 8028e0e:	f200 816a 	bhi.w	80290e6 <_dtoa_r+0x442>
 8028e12:	493f      	ldr	r1, [pc, #252]	; (8028f10 <_dtoa_r+0x26c>)
 8028e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028e18:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8028e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8028e20:	f003 fb80 	bl	802c524 <__aeabi_dcmpgt>
 8028e24:	2800      	cmp	r0, #0
 8028e26:	f000 8246 	beq.w	80292b6 <_dtoa_r+0x612>
 8028e2a:	9c06      	ldr	r4, [sp, #24]
 8028e2c:	2500      	movs	r5, #0
 8028e2e:	9515      	str	r5, [sp, #84]	; 0x54
 8028e30:	3c01      	subs	r4, #1
 8028e32:	9406      	str	r4, [sp, #24]
 8028e34:	1bbe      	subs	r6, r7, r6
 8028e36:	3e01      	subs	r6, #1
 8028e38:	f100 822f 	bmi.w	802929a <_dtoa_r+0x5f6>
 8028e3c:	2500      	movs	r5, #0
 8028e3e:	960b      	str	r6, [sp, #44]	; 0x2c
 8028e40:	9510      	str	r5, [sp, #64]	; 0x40
 8028e42:	9c06      	ldr	r4, [sp, #24]
 8028e44:	2c00      	cmp	r4, #0
 8028e46:	f2c0 821f 	blt.w	8029288 <_dtoa_r+0x5e4>
 8028e4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028e4c:	9414      	str	r4, [sp, #80]	; 0x50
 8028e4e:	192d      	adds	r5, r5, r4
 8028e50:	2400      	movs	r4, #0
 8028e52:	950b      	str	r5, [sp, #44]	; 0x2c
 8028e54:	9411      	str	r4, [sp, #68]	; 0x44
 8028e56:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8028e58:	2d09      	cmp	r5, #9
 8028e5a:	d85f      	bhi.n	8028f1c <_dtoa_r+0x278>
 8028e5c:	2401      	movs	r4, #1
 8028e5e:	2d05      	cmp	r5, #5
 8028e60:	dd02      	ble.n	8028e68 <_dtoa_r+0x1c4>
 8028e62:	2400      	movs	r4, #0
 8028e64:	3d04      	subs	r5, #4
 8028e66:	9526      	str	r5, [sp, #152]	; 0x98
 8028e68:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8028e6a:	1eab      	subs	r3, r5, #2
 8028e6c:	2b03      	cmp	r3, #3
 8028e6e:	d857      	bhi.n	8028f20 <_dtoa_r+0x27c>
 8028e70:	e8df f013 	tbh	[pc, r3, lsl #1]
 8028e74:	039a03af 	.word	0x039a03af
 8028e78:	03b20264 	.word	0x03b20264
 8028e7c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8028e7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8028e82:	9802      	ldr	r0, [sp, #8]
 8028e84:	6023      	str	r3, [r4, #0]
 8028e86:	b198      	cbz	r0, 8028eb0 <_dtoa_r+0x20c>
 8028e88:	4d22      	ldr	r5, [pc, #136]	; (8028f14 <_dtoa_r+0x270>)
 8028e8a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8028e8c:	2c00      	cmp	r4, #0
 8028e8e:	f43f af48 	beq.w	8028d22 <_dtoa_r+0x7e>
 8028e92:	78eb      	ldrb	r3, [r5, #3]
 8028e94:	2b00      	cmp	r3, #0
 8028e96:	f000 8124 	beq.w	80290e2 <_dtoa_r+0x43e>
 8028e9a:	f105 0308 	add.w	r3, r5, #8
 8028e9e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8028ea0:	6023      	str	r3, [r4, #0]
 8028ea2:	e73e      	b.n	8028d22 <_dtoa_r+0x7e>
 8028ea4:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8028ea8:	2301      	movs	r3, #1
 8028eaa:	9503      	str	r5, [sp, #12]
 8028eac:	6023      	str	r3, [r4, #0]
 8028eae:	e718      	b.n	8028ce2 <_dtoa_r+0x3e>
 8028eb0:	4b18      	ldr	r3, [pc, #96]	; (8028f14 <_dtoa_r+0x270>)
 8028eb2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8028eb6:	4a18      	ldr	r2, [pc, #96]	; (8028f18 <_dtoa_r+0x274>)
 8028eb8:	2d00      	cmp	r5, #0
 8028eba:	bf0c      	ite	eq
 8028ebc:	4615      	moveq	r5, r2
 8028ebe:	461d      	movne	r5, r3
 8028ec0:	e7e3      	b.n	8028e8a <_dtoa_r+0x1e6>
 8028ec2:	4639      	mov	r1, r7
 8028ec4:	4630      	mov	r0, r6
 8028ec6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8028eca:	f5a3 767e 	sub.w	r6, r3, #1016	; 0x3f8
 8028ece:	990d      	ldr	r1, [sp, #52]	; 0x34
 8028ed0:	2400      	movs	r4, #0
 8028ed2:	3e07      	subs	r6, #7
 8028ed4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8028ed6:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8028eda:	9417      	str	r4, [sp, #92]	; 0x5c
 8028edc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8028ee0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8028ee4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8028ee8:	930d      	str	r3, [sp, #52]	; 0x34
 8028eea:	e755      	b.n	8028d98 <_dtoa_r+0xf4>
 8028eec:	f3af 8000 	nop.w
 8028ef0:	636f4361 	.word	0x636f4361
 8028ef4:	3fd287a7 	.word	0x3fd287a7
 8028ef8:	8b60c8b3 	.word	0x8b60c8b3
 8028efc:	3fc68a28 	.word	0x3fc68a28
 8028f00:	509f79fb 	.word	0x509f79fb
 8028f04:	3fd34413 	.word	0x3fd34413
 8028f08:	08035ecc 	.word	0x08035ecc
 8028f0c:	08035ecd 	.word	0x08035ecd
 8028f10:	0802e960 	.word	0x0802e960
 8028f14:	08035edc 	.word	0x08035edc
 8028f18:	08035ed0 	.word	0x08035ed0
 8028f1c:	2400      	movs	r4, #0
 8028f1e:	9426      	str	r4, [sp, #152]	; 0x98
 8028f20:	2400      	movs	r4, #0
 8028f22:	4648      	mov	r0, r9
 8028f24:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8028f28:	4621      	mov	r1, r4
 8028f2a:	f04f 35ff 	mov.w	r5, #4294967295
 8028f2e:	950e      	str	r5, [sp, #56]	; 0x38
 8028f30:	f001 fa84 	bl	802a43c <_Balloc>
 8028f34:	2501      	movs	r5, #1
 8028f36:	9513      	str	r5, [sp, #76]	; 0x4c
 8028f38:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028f3a:	9427      	str	r4, [sp, #156]	; 0x9c
 8028f3c:	9516      	str	r5, [sp, #88]	; 0x58
 8028f3e:	900a      	str	r0, [sp, #40]	; 0x28
 8028f40:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8028f44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028f46:	9d06      	ldr	r5, [sp, #24]
 8028f48:	43dc      	mvns	r4, r3
 8028f4a:	0fe4      	lsrs	r4, r4, #31
 8028f4c:	2d0e      	cmp	r5, #14
 8028f4e:	bfcc      	ite	gt
 8028f50:	2400      	movgt	r4, #0
 8028f52:	f004 0401 	andle.w	r4, r4, #1
 8028f56:	2c00      	cmp	r4, #0
 8028f58:	f000 80ca 	beq.w	80290f0 <_dtoa_r+0x44c>
 8028f5c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8028f5e:	4b63      	ldr	r3, [pc, #396]	; (80290ec <_dtoa_r+0x448>)
 8028f60:	0fec      	lsrs	r4, r5, #31
 8028f62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028f64:	2d00      	cmp	r5, #0
 8028f66:	bfcc      	ite	gt
 8028f68:	2400      	movgt	r4, #0
 8028f6a:	f004 0401 	andle.w	r4, r4, #1
 8028f6e:	9d06      	ldr	r5, [sp, #24]
 8028f70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8028f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8028f7c:	2c00      	cmp	r4, #0
 8028f7e:	f040 81c2 	bne.w	8029306 <_dtoa_r+0x662>
 8028f82:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8028f86:	4602      	mov	r2, r0
 8028f88:	460b      	mov	r3, r1
 8028f8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028f8c:	4630      	mov	r0, r6
 8028f8e:	4639      	mov	r1, r7
 8028f90:	f003 f962 	bl	802c258 <__aeabi_ddiv>
 8028f94:	f003 fad0 	bl	802c538 <__aeabi_d2iz>
 8028f98:	4682      	mov	sl, r0
 8028f9a:	f002 ffcd 	bl	802bf38 <__aeabi_i2d>
 8028f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028fa2:	f003 f82f 	bl	802c004 <__aeabi_dmul>
 8028fa6:	460b      	mov	r3, r1
 8028fa8:	4602      	mov	r2, r0
 8028faa:	4639      	mov	r1, r7
 8028fac:	4630      	mov	r0, r6
 8028fae:	f002 fe75 	bl	802bc9c <__aeabi_dsub>
 8028fb2:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8028fb6:	f805 3b01 	strb.w	r3, [r5], #1
 8028fba:	46a8      	mov	r8, r5
 8028fbc:	9512      	str	r5, [sp, #72]	; 0x48
 8028fbe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028fc0:	2d01      	cmp	r5, #1
 8028fc2:	4606      	mov	r6, r0
 8028fc4:	460f      	mov	r7, r1
 8028fc6:	d052      	beq.n	802906e <_dtoa_r+0x3ca>
 8028fc8:	2300      	movs	r3, #0
 8028fca:	2200      	movs	r2, #0
 8028fcc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8028fd0:	f003 f818 	bl	802c004 <__aeabi_dmul>
 8028fd4:	2300      	movs	r3, #0
 8028fd6:	2200      	movs	r2, #0
 8028fd8:	4606      	mov	r6, r0
 8028fda:	460f      	mov	r7, r1
 8028fdc:	f003 fa7a 	bl	802c4d4 <__aeabi_dcmpeq>
 8028fe0:	2301      	movs	r3, #1
 8028fe2:	b100      	cbz	r0, 8028fe6 <_dtoa_r+0x342>
 8028fe4:	4623      	mov	r3, r4
 8028fe6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8028fea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028fec:	f000 85b6 	beq.w	8029b5c <_dtoa_r+0xeb8>
 8028ff0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028ff2:	1cac      	adds	r4, r5, #2
 8028ff4:	f8cd 9008 	str.w	r9, [sp, #8]
 8028ff8:	eb05 0b00 	add.w	fp, r5, r0
 8028ffc:	e00e      	b.n	802901c <_dtoa_r+0x378>
 8028ffe:	f003 f801 	bl	802c004 <__aeabi_dmul>
 8029002:	2200      	movs	r2, #0
 8029004:	2300      	movs	r3, #0
 8029006:	4606      	mov	r6, r0
 8029008:	460f      	mov	r7, r1
 802900a:	f003 fa63 	bl	802c4d4 <__aeabi_dcmpeq>
 802900e:	b108      	cbz	r0, 8029014 <_dtoa_r+0x370>
 8029010:	f04f 0800 	mov.w	r8, #0
 8029014:	f018 0fff 	tst.w	r8, #255	; 0xff
 8029018:	f000 845a 	beq.w	80298d0 <_dtoa_r+0xc2c>
 802901c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029020:	4630      	mov	r0, r6
 8029022:	4639      	mov	r1, r7
 8029024:	46a1      	mov	r9, r4
 8029026:	f003 f917 	bl	802c258 <__aeabi_ddiv>
 802902a:	f04f 0801 	mov.w	r8, #1
 802902e:	f003 fa83 	bl	802c538 <__aeabi_d2iz>
 8029032:	4682      	mov	sl, r0
 8029034:	f002 ff80 	bl	802bf38 <__aeabi_i2d>
 8029038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802903c:	f10a 0530 	add.w	r5, sl, #48	; 0x30
 8029040:	f002 ffe0 	bl	802c004 <__aeabi_dmul>
 8029044:	4602      	mov	r2, r0
 8029046:	460b      	mov	r3, r1
 8029048:	4630      	mov	r0, r6
 802904a:	4639      	mov	r1, r7
 802904c:	f002 fe26 	bl	802bc9c <__aeabi_dsub>
 8029050:	2300      	movs	r3, #0
 8029052:	2200      	movs	r2, #0
 8029054:	455c      	cmp	r4, fp
 8029056:	f804 5c01 	strb.w	r5, [r4, #-1]
 802905a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 802905e:	f104 0401 	add.w	r4, r4, #1
 8029062:	4606      	mov	r6, r0
 8029064:	460f      	mov	r7, r1
 8029066:	d1ca      	bne.n	8028ffe <_dtoa_r+0x35a>
 8029068:	46c8      	mov	r8, r9
 802906a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 802906e:	4632      	mov	r2, r6
 8029070:	463b      	mov	r3, r7
 8029072:	4630      	mov	r0, r6
 8029074:	4639      	mov	r1, r7
 8029076:	f002 fe13 	bl	802bca0 <__adddf3>
 802907a:	4604      	mov	r4, r0
 802907c:	460d      	mov	r5, r1
 802907e:	4622      	mov	r2, r4
 8029080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029084:	462b      	mov	r3, r5
 8029086:	f003 fa2f 	bl	802c4e8 <__aeabi_dcmplt>
 802908a:	b960      	cbnz	r0, 80290a6 <_dtoa_r+0x402>
 802908c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029090:	4622      	mov	r2, r4
 8029092:	462b      	mov	r3, r5
 8029094:	f003 fa1e 	bl	802c4d4 <__aeabi_dcmpeq>
 8029098:	2800      	cmp	r0, #0
 802909a:	f000 841c 	beq.w	80298d6 <_dtoa_r+0xc32>
 802909e:	f01a 0f01 	tst.w	sl, #1
 80290a2:	f000 8418 	beq.w	80298d6 <_dtoa_r+0xc32>
 80290a6:	9c06      	ldr	r4, [sp, #24]
 80290a8:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 80290ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80290ae:	9418      	str	r4, [sp, #96]	; 0x60
 80290b0:	4643      	mov	r3, r8
 80290b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80290b4:	e002      	b.n	80290bc <_dtoa_r+0x418>
 80290b6:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 80290ba:	3b01      	subs	r3, #1
 80290bc:	2e39      	cmp	r6, #57	; 0x39
 80290be:	461a      	mov	r2, r3
 80290c0:	f040 84d2 	bne.w	8029a68 <_dtoa_r+0xdc4>
 80290c4:	428b      	cmp	r3, r1
 80290c6:	d1f6      	bne.n	80290b6 <_dtoa_r+0x412>
 80290c8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80290ca:	2330      	movs	r3, #48	; 0x30
 80290cc:	920a      	str	r2, [sp, #40]	; 0x28
 80290ce:	2231      	movs	r2, #49	; 0x31
 80290d0:	3401      	adds	r4, #1
 80290d2:	9406      	str	r4, [sp, #24]
 80290d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80290d6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80290da:	4623      	mov	r3, r4
 80290dc:	f803 2c01 	strb.w	r2, [r3, #-1]
 80290e0:	e0c0      	b.n	8029264 <_dtoa_r+0x5c0>
 80290e2:	1ceb      	adds	r3, r5, #3
 80290e4:	e6db      	b.n	8028e9e <_dtoa_r+0x1fa>
 80290e6:	2401      	movs	r4, #1
 80290e8:	9415      	str	r4, [sp, #84]	; 0x54
 80290ea:	e6a3      	b.n	8028e34 <_dtoa_r+0x190>
 80290ec:	0802e960 	.word	0x0802e960
 80290f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80290f2:	2d00      	cmp	r5, #0
 80290f4:	f040 80e2 	bne.w	80292bc <_dtoa_r+0x618>
 80290f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80290fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80290fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8029100:	2d00      	cmp	r5, #0
 8029102:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029104:	bfd4      	ite	le
 8029106:	2300      	movle	r3, #0
 8029108:	2301      	movgt	r3, #1
 802910a:	2800      	cmp	r0, #0
 802910c:	bfd4      	ite	le
 802910e:	2300      	movle	r3, #0
 8029110:	f003 0301 	andgt.w	r3, r3, #1
 8029114:	b14b      	cbz	r3, 802912a <_dtoa_r+0x486>
 8029116:	4603      	mov	r3, r0
 8029118:	9910      	ldr	r1, [sp, #64]	; 0x40
 802911a:	42ab      	cmp	r3, r5
 802911c:	bfa8      	it	ge
 802911e:	462b      	movge	r3, r5
 8029120:	1aed      	subs	r5, r5, r3
 8029122:	1ac9      	subs	r1, r1, r3
 8029124:	1ac0      	subs	r0, r0, r3
 8029126:	9110      	str	r1, [sp, #64]	; 0x40
 8029128:	900b      	str	r0, [sp, #44]	; 0x2c
 802912a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802912c:	2a00      	cmp	r2, #0
 802912e:	dd1a      	ble.n	8029166 <_dtoa_r+0x4c2>
 8029130:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8029132:	2b00      	cmp	r3, #0
 8029134:	f000 8457 	beq.w	80299e6 <_dtoa_r+0xd42>
 8029138:	2c00      	cmp	r4, #0
 802913a:	dd10      	ble.n	802915e <_dtoa_r+0x4ba>
 802913c:	4651      	mov	r1, sl
 802913e:	4622      	mov	r2, r4
 8029140:	4648      	mov	r0, r9
 8029142:	f001 fb29 	bl	802a798 <__pow5mult>
 8029146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029148:	4682      	mov	sl, r0
 802914a:	4648      	mov	r0, r9
 802914c:	4651      	mov	r1, sl
 802914e:	f001 fa87 	bl	802a660 <__multiply>
 8029152:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029154:	4606      	mov	r6, r0
 8029156:	4648      	mov	r0, r9
 8029158:	f001 f996 	bl	802a488 <_Bfree>
 802915c:	960f      	str	r6, [sp, #60]	; 0x3c
 802915e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8029160:	1b02      	subs	r2, r0, r4
 8029162:	f040 8464 	bne.w	8029a2e <_dtoa_r+0xd8a>
 8029166:	2101      	movs	r1, #1
 8029168:	4648      	mov	r0, r9
 802916a:	f001 fa6f 	bl	802a64c <__i2b>
 802916e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8029170:	2900      	cmp	r1, #0
 8029172:	4604      	mov	r4, r0
 8029174:	dd05      	ble.n	8029182 <_dtoa_r+0x4de>
 8029176:	4621      	mov	r1, r4
 8029178:	4648      	mov	r0, r9
 802917a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802917c:	f001 fb0c 	bl	802a798 <__pow5mult>
 8029180:	4604      	mov	r4, r0
 8029182:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8029184:	2a01      	cmp	r2, #1
 8029186:	f340 822a 	ble.w	80295de <_dtoa_r+0x93a>
 802918a:	2600      	movs	r6, #0
 802918c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802918e:	2301      	movs	r3, #1
 8029190:	2a00      	cmp	r2, #0
 8029192:	f040 83a4 	bne.w	80298de <_dtoa_r+0xc3a>
 8029196:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029198:	181b      	adds	r3, r3, r0
 802919a:	f013 031f 	ands.w	r3, r3, #31
 802919e:	f000 8275 	beq.w	802968c <_dtoa_r+0x9e8>
 80291a2:	f1c3 0220 	rsb	r2, r3, #32
 80291a6:	2a04      	cmp	r2, #4
 80291a8:	f340 84f3 	ble.w	8029b92 <_dtoa_r+0xeee>
 80291ac:	f1c3 031c 	rsb	r3, r3, #28
 80291b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80291b2:	18ed      	adds	r5, r5, r3
 80291b4:	18c0      	adds	r0, r0, r3
 80291b6:	18c9      	adds	r1, r1, r3
 80291b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80291ba:	9110      	str	r1, [sp, #64]	; 0x40
 80291bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80291be:	2900      	cmp	r1, #0
 80291c0:	dd05      	ble.n	80291ce <_dtoa_r+0x52a>
 80291c2:	4648      	mov	r0, r9
 80291c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80291c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80291c8:	f001 fb32 	bl	802a830 <__lshift>
 80291cc:	900f      	str	r0, [sp, #60]	; 0x3c
 80291ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80291d0:	2a00      	cmp	r2, #0
 80291d2:	dd04      	ble.n	80291de <_dtoa_r+0x53a>
 80291d4:	4621      	mov	r1, r4
 80291d6:	4648      	mov	r0, r9
 80291d8:	f001 fb2a 	bl	802a830 <__lshift>
 80291dc:	4604      	mov	r4, r0
 80291de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80291e0:	2b00      	cmp	r3, #0
 80291e2:	f040 8385 	bne.w	80298f0 <_dtoa_r+0xc4c>
 80291e6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80291e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80291ea:	2802      	cmp	r0, #2
 80291ec:	bfd4      	ite	le
 80291ee:	2300      	movle	r3, #0
 80291f0:	2301      	movgt	r3, #1
 80291f2:	2900      	cmp	r1, #0
 80291f4:	bfcc      	ite	gt
 80291f6:	2300      	movgt	r3, #0
 80291f8:	f003 0301 	andle.w	r3, r3, #1
 80291fc:	2b00      	cmp	r3, #0
 80291fe:	f000 824e 	beq.w	802969e <_dtoa_r+0x9fa>
 8029202:	2900      	cmp	r1, #0
 8029204:	f040 8094 	bne.w	8029330 <_dtoa_r+0x68c>
 8029208:	2205      	movs	r2, #5
 802920a:	460b      	mov	r3, r1
 802920c:	4648      	mov	r0, r9
 802920e:	4621      	mov	r1, r4
 8029210:	f001 f944 	bl	802a49c <__multadd>
 8029214:	4604      	mov	r4, r0
 8029216:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8029218:	4621      	mov	r1, r4
 802921a:	f001 fb69 	bl	802a8f0 <__mcmp>
 802921e:	2800      	cmp	r0, #0
 8029220:	f340 8086 	ble.w	8029330 <_dtoa_r+0x68c>
 8029224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029226:	2700      	movs	r7, #0
 8029228:	9806      	ldr	r0, [sp, #24]
 802922a:	2231      	movs	r2, #49	; 0x31
 802922c:	461d      	mov	r5, r3
 802922e:	3001      	adds	r0, #1
 8029230:	f803 2b01 	strb.w	r2, [r3], #1
 8029234:	9006      	str	r0, [sp, #24]
 8029236:	930a      	str	r3, [sp, #40]	; 0x28
 8029238:	4648      	mov	r0, r9
 802923a:	4621      	mov	r1, r4
 802923c:	f001 f924 	bl	802a488 <_Bfree>
 8029240:	f1ba 0f00 	cmp.w	sl, #0
 8029244:	d00e      	beq.n	8029264 <_dtoa_r+0x5c0>
 8029246:	1c3b      	adds	r3, r7, #0
 8029248:	bf18      	it	ne
 802924a:	2301      	movne	r3, #1
 802924c:	4557      	cmp	r7, sl
 802924e:	bf0c      	ite	eq
 8029250:	2300      	moveq	r3, #0
 8029252:	f003 0301 	andne.w	r3, r3, #1
 8029256:	2b00      	cmp	r3, #0
 8029258:	f040 8213 	bne.w	8029682 <_dtoa_r+0x9de>
 802925c:	4648      	mov	r0, r9
 802925e:	4651      	mov	r1, sl
 8029260:	f001 f912 	bl	802a488 <_Bfree>
 8029264:	4648      	mov	r0, r9
 8029266:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029268:	f001 f90e 	bl	802a488 <_Bfree>
 802926c:	9c06      	ldr	r4, [sp, #24]
 802926e:	2200      	movs	r2, #0
 8029270:	1c63      	adds	r3, r4, #1
 8029272:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8029274:	7022      	strb	r2, [r4, #0]
 8029276:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8029278:	6023      	str	r3, [r4, #0]
 802927a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802927c:	2c00      	cmp	r4, #0
 802927e:	f43f ad50 	beq.w	8028d22 <_dtoa_r+0x7e>
 8029282:	980a      	ldr	r0, [sp, #40]	; 0x28
 8029284:	6020      	str	r0, [r4, #0]
 8029286:	e54c      	b.n	8028d22 <_dtoa_r+0x7e>
 8029288:	9c06      	ldr	r4, [sp, #24]
 802928a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802928c:	1b2d      	subs	r5, r5, r4
 802928e:	9510      	str	r5, [sp, #64]	; 0x40
 8029290:	4265      	negs	r5, r4
 8029292:	2400      	movs	r4, #0
 8029294:	9511      	str	r5, [sp, #68]	; 0x44
 8029296:	9414      	str	r4, [sp, #80]	; 0x50
 8029298:	e5dd      	b.n	8028e56 <_dtoa_r+0x1b2>
 802929a:	4276      	negs	r6, r6
 802929c:	2400      	movs	r4, #0
 802929e:	9610      	str	r6, [sp, #64]	; 0x40
 80292a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80292a2:	e5ce      	b.n	8028e42 <_dtoa_r+0x19e>
 80292a4:	f64f 32ee 	movw	r2, #64494	; 0xfbee
 80292a8:	9902      	ldr	r1, [sp, #8]
 80292aa:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 80292ae:	1b92      	subs	r2, r2, r6
 80292b0:	fa11 f002 	lsls.w	r0, r1, r2
 80292b4:	e563      	b.n	8028d7e <_dtoa_r+0xda>
 80292b6:	2500      	movs	r5, #0
 80292b8:	9515      	str	r5, [sp, #84]	; 0x54
 80292ba:	e5bb      	b.n	8028e34 <_dtoa_r+0x190>
 80292bc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80292be:	2d01      	cmp	r5, #1
 80292c0:	f340 83bf 	ble.w	8029a42 <_dtoa_r+0xd9e>
 80292c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80292c6:	1e6b      	subs	r3, r5, #1
 80292c8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80292ca:	429d      	cmp	r5, r3
 80292cc:	bfaf      	iteee	ge
 80292ce:	ebc3 0405 	rsbge	r4, r3, r5
 80292d2:	9d11      	ldrlt	r5, [sp, #68]	; 0x44
 80292d4:	9311      	strlt	r3, [sp, #68]	; 0x44
 80292d6:	ebc5 0203 	rsblt	r2, r5, r3
 80292da:	bfbe      	ittt	lt
 80292dc:	9d14      	ldrlt	r5, [sp, #80]	; 0x50
 80292de:	18ad      	addlt	r5, r5, r2
 80292e0:	9514      	strlt	r5, [sp, #80]	; 0x50
 80292e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80292e4:	2d00      	cmp	r5, #0
 80292e6:	f2c0 83c8 	blt.w	8029a7a <_dtoa_r+0xdd6>
 80292ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80292ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80292ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80292f0:	4648      	mov	r0, r9
 80292f2:	2101      	movs	r1, #1
 80292f4:	18d2      	adds	r2, r2, r3
 80292f6:	9210      	str	r2, [sp, #64]	; 0x40
 80292f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80292fa:	18d2      	adds	r2, r2, r3
 80292fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80292fe:	f001 f9a5 	bl	802a64c <__i2b>
 8029302:	4682      	mov	sl, r0
 8029304:	e6fc      	b.n	8029100 <_dtoa_r+0x45c>
 8029306:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8029308:	2c00      	cmp	r4, #0
 802930a:	f040 8397 	bne.w	8029a3c <_dtoa_r+0xd98>
 802930e:	2300      	movs	r3, #0
 8029310:	2200      	movs	r2, #0
 8029312:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8029316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802931a:	f002 fe73 	bl	802c004 <__aeabi_dmul>
 802931e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029322:	f003 f8f5 	bl	802c510 <__aeabi_dcmpge>
 8029326:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8029328:	46a2      	mov	sl, r4
 802932a:	2800      	cmp	r0, #0
 802932c:	f43f af7a 	beq.w	8029224 <_dtoa_r+0x580>
 8029330:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8029332:	2700      	movs	r7, #0
 8029334:	43ed      	mvns	r5, r5
 8029336:	9506      	str	r5, [sp, #24]
 8029338:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802933a:	e77d      	b.n	8029238 <_dtoa_r+0x594>
 802933c:	2501      	movs	r5, #1
 802933e:	9513      	str	r5, [sp, #76]	; 0x4c
 8029340:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8029342:	2d00      	cmp	r5, #0
 8029344:	f340 82ec 	ble.w	8029920 <_dtoa_r+0xc7c>
 8029348:	46ab      	mov	fp, r5
 802934a:	2d0e      	cmp	r5, #14
 802934c:	bf8c      	ite	hi
 802934e:	2400      	movhi	r4, #0
 8029350:	f004 0401 	andls.w	r4, r4, #1
 8029354:	9516      	str	r5, [sp, #88]	; 0x58
 8029356:	950e      	str	r5, [sp, #56]	; 0x38
 8029358:	2100      	movs	r1, #0
 802935a:	f1bb 0f17 	cmp.w	fp, #23
 802935e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8029362:	d90a      	bls.n	802937a <_dtoa_r+0x6d6>
 8029364:	2201      	movs	r2, #1
 8029366:	2304      	movs	r3, #4
 8029368:	005b      	lsls	r3, r3, #1
 802936a:	4611      	mov	r1, r2
 802936c:	f103 0014 	add.w	r0, r3, #20
 8029370:	3201      	adds	r2, #1
 8029372:	4558      	cmp	r0, fp
 8029374:	d9f8      	bls.n	8029368 <_dtoa_r+0x6c4>
 8029376:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 802937a:	4648      	mov	r0, r9
 802937c:	f001 f85e 	bl	802a43c <_Balloc>
 8029380:	900a      	str	r0, [sp, #40]	; 0x28
 8029382:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8029386:	2c00      	cmp	r4, #0
 8029388:	f43f addc 	beq.w	8028f44 <_dtoa_r+0x2a0>
 802938c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029390:	461d      	mov	r5, r3
 8029392:	4614      	mov	r4, r2
 8029394:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8029398:	9d06      	ldr	r5, [sp, #24]
 802939a:	2d00      	cmp	r5, #0
 802939c:	f340 820d 	ble.w	80297ba <_dtoa_r+0xb16>
 80293a0:	f005 020f 	and.w	r2, r5, #15
 80293a4:	4b9b      	ldr	r3, [pc, #620]	; (8029614 <_dtoa_r+0x970>)
 80293a6:	112c      	asrs	r4, r5, #4
 80293a8:	2602      	movs	r6, #2
 80293aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80293ae:	06e2      	lsls	r2, r4, #27
 80293b0:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80293b4:	d50b      	bpl.n	80293ce <_dtoa_r+0x72a>
 80293b6:	4b98      	ldr	r3, [pc, #608]	; (8029618 <_dtoa_r+0x974>)
 80293b8:	f004 040f 	and.w	r4, r4, #15
 80293bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80293c0:	2603      	movs	r6, #3
 80293c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80293c6:	f002 ff47 	bl	802c258 <__aeabi_ddiv>
 80293ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80293ce:	b174      	cbz	r4, 80293ee <_dtoa_r+0x74a>
 80293d0:	4d91      	ldr	r5, [pc, #580]	; (8029618 <_dtoa_r+0x974>)
 80293d2:	07e3      	lsls	r3, r4, #31
 80293d4:	4650      	mov	r0, sl
 80293d6:	4659      	mov	r1, fp
 80293d8:	d506      	bpl.n	80293e8 <_dtoa_r+0x744>
 80293da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80293de:	3601      	adds	r6, #1
 80293e0:	f002 fe10 	bl	802c004 <__aeabi_dmul>
 80293e4:	4682      	mov	sl, r0
 80293e6:	468b      	mov	fp, r1
 80293e8:	3508      	adds	r5, #8
 80293ea:	1064      	asrs	r4, r4, #1
 80293ec:	d1f1      	bne.n	80293d2 <_dtoa_r+0x72e>
 80293ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80293f2:	4652      	mov	r2, sl
 80293f4:	465b      	mov	r3, fp
 80293f6:	f002 ff2f 	bl	802c258 <__aeabi_ddiv>
 80293fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80293fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8029400:	2c00      	cmp	r4, #0
 8029402:	f000 810b 	beq.w	802961c <_dtoa_r+0x978>
 8029406:	2300      	movs	r3, #0
 8029408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802940c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8029410:	2200      	movs	r2, #0
 8029412:	f003 f869 	bl	802c4e8 <__aeabi_dcmplt>
 8029416:	2301      	movs	r3, #1
 8029418:	b900      	cbnz	r0, 802941c <_dtoa_r+0x778>
 802941a:	2300      	movs	r3, #0
 802941c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802941e:	2d00      	cmp	r5, #0
 8029420:	bfd4      	ite	le
 8029422:	2300      	movle	r3, #0
 8029424:	f003 0301 	andgt.w	r3, r3, #1
 8029428:	2b00      	cmp	r3, #0
 802942a:	f000 80f7 	beq.w	802961c <_dtoa_r+0x978>
 802942e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8029430:	2c00      	cmp	r4, #0
 8029432:	f340 81ad 	ble.w	8029790 <_dtoa_r+0xaec>
 8029436:	2300      	movs	r3, #0
 8029438:	2200      	movs	r2, #0
 802943a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 802943e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029442:	f002 fddf 	bl	802c004 <__aeabi_dmul>
 8029446:	9d06      	ldr	r5, [sp, #24]
 8029448:	3d01      	subs	r5, #1
 802944a:	9518      	str	r5, [sp, #96]	; 0x60
 802944c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802944e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029452:	1c70      	adds	r0, r6, #1
 8029454:	f002 fd70 	bl	802bf38 <__aeabi_i2d>
 8029458:	4602      	mov	r2, r0
 802945a:	460b      	mov	r3, r1
 802945c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029460:	f002 fdd0 	bl	802c004 <__aeabi_dmul>
 8029464:	2300      	movs	r3, #0
 8029466:	2200      	movs	r2, #0
 8029468:	f2c4 031c 	movt	r3, #16412	; 0x401c
 802946c:	f002 fc18 	bl	802bca0 <__adddf3>
 8029470:	4606      	mov	r6, r0
 8029472:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8029476:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8029478:	2c00      	cmp	r4, #0
 802947a:	f000 81cb 	beq.w	8029814 <_dtoa_r+0xb70>
 802947e:	4b65      	ldr	r3, [pc, #404]	; (8029614 <_dtoa_r+0x970>)
 8029480:	2100      	movs	r1, #0
 8029482:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8029484:	2000      	movs	r0, #0
 8029486:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802948a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 802948e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8029492:	9412      	str	r4, [sp, #72]	; 0x48
 8029494:	f002 fee0 	bl	802c258 <__aeabi_ddiv>
 8029498:	4632      	mov	r2, r6
 802949a:	463b      	mov	r3, r7
 802949c:	f002 fbfe 	bl	802bc9c <__aeabi_dsub>
 80294a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80294a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80294a8:	f003 f846 	bl	802c538 <__aeabi_d2iz>
 80294ac:	4604      	mov	r4, r0
 80294ae:	f002 fd43 	bl	802bf38 <__aeabi_i2d>
 80294b2:	3430      	adds	r4, #48	; 0x30
 80294b4:	b2e6      	uxtb	r6, r4
 80294b6:	4602      	mov	r2, r0
 80294b8:	460b      	mov	r3, r1
 80294ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80294be:	f002 fbed 	bl	802bc9c <__aeabi_dsub>
 80294c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80294c4:	f804 6b01 	strb.w	r6, [r4], #1
 80294c8:	9412      	str	r4, [sp, #72]	; 0x48
 80294ca:	4682      	mov	sl, r0
 80294cc:	468b      	mov	fp, r1
 80294ce:	4652      	mov	r2, sl
 80294d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80294d4:	465b      	mov	r3, fp
 80294d6:	f003 f825 	bl	802c524 <__aeabi_dcmpgt>
 80294da:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80294de:	2800      	cmp	r0, #0
 80294e0:	f040 8345 	bne.w	8029b6e <_dtoa_r+0xeca>
 80294e4:	2100      	movs	r1, #0
 80294e6:	4652      	mov	r2, sl
 80294e8:	465b      	mov	r3, fp
 80294ea:	2000      	movs	r0, #0
 80294ec:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80294f0:	f002 fbd4 	bl	802bc9c <__aeabi_dsub>
 80294f4:	4602      	mov	r2, r0
 80294f6:	460b      	mov	r3, r1
 80294f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80294fc:	f003 f812 	bl	802c524 <__aeabi_dcmpgt>
 8029500:	2800      	cmp	r0, #0
 8029502:	f040 82ae 	bne.w	8029a62 <_dtoa_r+0xdbe>
 8029506:	2d01      	cmp	r5, #1
 8029508:	f340 8142 	ble.w	8029790 <_dtoa_r+0xaec>
 802950c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802950e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8029510:	1965      	adds	r5, r4, r5
 8029512:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 8029516:	9502      	str	r5, [sp, #8]
 8029518:	e00c      	b.n	8029534 <_dtoa_r+0x890>
 802951a:	f002 fbbf 	bl	802bc9c <__aeabi_dsub>
 802951e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8029522:	f002 ffe1 	bl	802c4e8 <__aeabi_dcmplt>
 8029526:	2800      	cmp	r0, #0
 8029528:	f040 8298 	bne.w	8029a5c <_dtoa_r+0xdb8>
 802952c:	9d02      	ldr	r5, [sp, #8]
 802952e:	42af      	cmp	r7, r5
 8029530:	f000 812c 	beq.w	802978c <_dtoa_r+0xae8>
 8029534:	2300      	movs	r3, #0
 8029536:	2200      	movs	r2, #0
 8029538:	f2c4 0324 	movt	r3, #16420	; 0x4024
 802953c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8029540:	f002 fd60 	bl	802c004 <__aeabi_dmul>
 8029544:	2300      	movs	r3, #0
 8029546:	2200      	movs	r2, #0
 8029548:	f2c4 0324 	movt	r3, #16420	; 0x4024
 802954c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8029550:	4650      	mov	r0, sl
 8029552:	4659      	mov	r1, fp
 8029554:	f002 fd56 	bl	802c004 <__aeabi_dmul>
 8029558:	4689      	mov	r9, r1
 802955a:	4680      	mov	r8, r0
 802955c:	f002 ffec 	bl	802c538 <__aeabi_d2iz>
 8029560:	4604      	mov	r4, r0
 8029562:	f002 fce9 	bl	802bf38 <__aeabi_i2d>
 8029566:	3430      	adds	r4, #48	; 0x30
 8029568:	b2e6      	uxtb	r6, r4
 802956a:	4602      	mov	r2, r0
 802956c:	460b      	mov	r3, r1
 802956e:	4640      	mov	r0, r8
 8029570:	4649      	mov	r1, r9
 8029572:	f002 fb93 	bl	802bc9c <__aeabi_dsub>
 8029576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802957a:	f807 6b01 	strb.w	r6, [r7], #1
 802957e:	463d      	mov	r5, r7
 8029580:	468b      	mov	fp, r1
 8029582:	4682      	mov	sl, r0
 8029584:	f002 ffb0 	bl	802c4e8 <__aeabi_dcmplt>
 8029588:	2100      	movs	r1, #0
 802958a:	4652      	mov	r2, sl
 802958c:	465b      	mov	r3, fp
 802958e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8029592:	4604      	mov	r4, r0
 8029594:	2000      	movs	r0, #0
 8029596:	2c00      	cmp	r4, #0
 8029598:	d0bf      	beq.n	802951a <_dtoa_r+0x876>
 802959a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802959c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802959e:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 80295a2:	9406      	str	r4, [sp, #24]
 80295a4:	970a      	str	r7, [sp, #40]	; 0x28
 80295a6:	e65d      	b.n	8029264 <_dtoa_r+0x5c0>
 80295a8:	2500      	movs	r5, #0
 80295aa:	9513      	str	r5, [sp, #76]	; 0x4c
 80295ac:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80295ae:	9d06      	ldr	r5, [sp, #24]
 80295b0:	1945      	adds	r5, r0, r5
 80295b2:	9516      	str	r5, [sp, #88]	; 0x58
 80295b4:	f105 0b01 	add.w	fp, r5, #1
 80295b8:	f1bb 0f00 	cmp.w	fp, #0
 80295bc:	f340 81b9 	ble.w	8029932 <_dtoa_r+0xc8e>
 80295c0:	f1bb 0f0e 	cmp.w	fp, #14
 80295c4:	bf8c      	ite	hi
 80295c6:	2400      	movhi	r4, #0
 80295c8:	f004 0401 	andls.w	r4, r4, #1
 80295cc:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80295d0:	e6c2      	b.n	8029358 <_dtoa_r+0x6b4>
 80295d2:	2500      	movs	r5, #0
 80295d4:	9513      	str	r5, [sp, #76]	; 0x4c
 80295d6:	e6b3      	b.n	8029340 <_dtoa_r+0x69c>
 80295d8:	2501      	movs	r5, #1
 80295da:	9513      	str	r5, [sp, #76]	; 0x4c
 80295dc:	e7e6      	b.n	80295ac <_dtoa_r+0x908>
 80295de:	9b02      	ldr	r3, [sp, #8]
 80295e0:	2b00      	cmp	r3, #0
 80295e2:	f47f add2 	bne.w	802918a <_dtoa_r+0x4e6>
 80295e6:	9a03      	ldr	r2, [sp, #12]
 80295e8:	9e02      	ldr	r6, [sp, #8]
 80295ea:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80295ee:	2b00      	cmp	r3, #0
 80295f0:	f47f adcc 	bne.w	802918c <_dtoa_r+0x4e8>
 80295f4:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80295f8:	4013      	ands	r3, r2
 80295fa:	461e      	mov	r6, r3
 80295fc:	2b00      	cmp	r3, #0
 80295fe:	f43f adc5 	beq.w	802918c <_dtoa_r+0x4e8>
 8029602:	9810      	ldr	r0, [sp, #64]	; 0x40
 8029604:	2601      	movs	r6, #1
 8029606:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029608:	3001      	adds	r0, #1
 802960a:	9010      	str	r0, [sp, #64]	; 0x40
 802960c:	3101      	adds	r1, #1
 802960e:	910b      	str	r1, [sp, #44]	; 0x2c
 8029610:	e5bc      	b.n	802918c <_dtoa_r+0x4e8>
 8029612:	bf00      	nop
 8029614:	0802e960 	.word	0x0802e960
 8029618:	0802ea50 	.word	0x0802ea50
 802961c:	4630      	mov	r0, r6
 802961e:	f002 fc8b 	bl	802bf38 <__aeabi_i2d>
 8029622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029626:	f002 fced 	bl	802c004 <__aeabi_dmul>
 802962a:	2300      	movs	r3, #0
 802962c:	2200      	movs	r2, #0
 802962e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8029632:	f002 fb35 	bl	802bca0 <__adddf3>
 8029636:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029638:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 802963c:	4606      	mov	r6, r0
 802963e:	4627      	mov	r7, r4
 8029640:	2d00      	cmp	r5, #0
 8029642:	f040 80b6 	bne.w	80297b2 <_dtoa_r+0xb0e>
 8029646:	2300      	movs	r3, #0
 8029648:	2200      	movs	r2, #0
 802964a:	f2c4 0314 	movt	r3, #16404	; 0x4014
 802964e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029652:	f002 fb23 	bl	802bc9c <__aeabi_dsub>
 8029656:	4632      	mov	r2, r6
 8029658:	4623      	mov	r3, r4
 802965a:	4682      	mov	sl, r0
 802965c:	468b      	mov	fp, r1
 802965e:	f002 ff61 	bl	802c524 <__aeabi_dcmpgt>
 8029662:	2800      	cmp	r0, #0
 8029664:	f040 80d3 	bne.w	802980e <_dtoa_r+0xb6a>
 8029668:	4632      	mov	r2, r6
 802966a:	4650      	mov	r0, sl
 802966c:	4659      	mov	r1, fp
 802966e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8029672:	f002 ff39 	bl	802c4e8 <__aeabi_dcmplt>
 8029676:	2800      	cmp	r0, #0
 8029678:	f000 808a 	beq.w	8029790 <_dtoa_r+0xaec>
 802967c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802967e:	46a2      	mov	sl, r4
 8029680:	e656      	b.n	8029330 <_dtoa_r+0x68c>
 8029682:	4648      	mov	r0, r9
 8029684:	4639      	mov	r1, r7
 8029686:	f000 feff 	bl	802a488 <_Bfree>
 802968a:	e5e7      	b.n	802925c <_dtoa_r+0x5b8>
 802968c:	231c      	movs	r3, #28
 802968e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029690:	18ed      	adds	r5, r5, r3
 8029692:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029694:	18d2      	adds	r2, r2, r3
 8029696:	9210      	str	r2, [sp, #64]	; 0x40
 8029698:	18c0      	adds	r0, r0, r3
 802969a:	900b      	str	r0, [sp, #44]	; 0x2c
 802969c:	e58e      	b.n	80291bc <_dtoa_r+0x518>
 802969e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80296a0:	2900      	cmp	r1, #0
 80296a2:	f000 814e 	beq.w	8029942 <_dtoa_r+0xc9e>
 80296a6:	2d00      	cmp	r5, #0
 80296a8:	dd05      	ble.n	80296b6 <_dtoa_r+0xa12>
 80296aa:	4651      	mov	r1, sl
 80296ac:	4648      	mov	r0, r9
 80296ae:	462a      	mov	r2, r5
 80296b0:	f001 f8be 	bl	802a830 <__lshift>
 80296b4:	4682      	mov	sl, r0
 80296b6:	2e00      	cmp	r6, #0
 80296b8:	f040 820a 	bne.w	8029ad0 <_dtoa_r+0xe2c>
 80296bc:	4656      	mov	r6, sl
 80296be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80296c0:	4657      	mov	r7, sl
 80296c2:	f04f 0801 	mov.w	r8, #1
 80296c6:	9507      	str	r5, [sp, #28]
 80296c8:	9d02      	ldr	r5, [sp, #8]
 80296ca:	9402      	str	r4, [sp, #8]
 80296cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80296ce:	ea05 0508 	and.w	r5, r5, r8
 80296d2:	950c      	str	r5, [sp, #48]	; 0x30
 80296d4:	9902      	ldr	r1, [sp, #8]
 80296d6:	4620      	mov	r0, r4
 80296d8:	f7ff fa42 	bl	8028b60 <quorem>
 80296dc:	4639      	mov	r1, r7
 80296de:	f04f 0b01 	mov.w	fp, #1
 80296e2:	9008      	str	r0, [sp, #32]
 80296e4:	4620      	mov	r0, r4
 80296e6:	f001 f903 	bl	802a8f0 <__mcmp>
 80296ea:	9b08      	ldr	r3, [sp, #32]
 80296ec:	9902      	ldr	r1, [sp, #8]
 80296ee:	4632      	mov	r2, r6
 80296f0:	3330      	adds	r3, #48	; 0x30
 80296f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80296f4:	4605      	mov	r5, r0
 80296f6:	4648      	mov	r0, r9
 80296f8:	f001 f91a 	bl	802a930 <__mdiff>
 80296fc:	68c3      	ldr	r3, [r0, #12]
 80296fe:	4682      	mov	sl, r0
 8029700:	2b00      	cmp	r3, #0
 8029702:	d03d      	beq.n	8029780 <_dtoa_r+0xadc>
 8029704:	4648      	mov	r0, r9
 8029706:	4651      	mov	r1, sl
 8029708:	f000 febe 	bl	802a488 <_Bfree>
 802970c:	9826      	ldr	r0, [sp, #152]	; 0x98
 802970e:	ea5b 0000 	orrs.w	r0, fp, r0
 8029712:	d103      	bne.n	802971c <_dtoa_r+0xa78>
 8029714:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029716:	2900      	cmp	r1, #0
 8029718:	f000 8216 	beq.w	8029b48 <_dtoa_r+0xea4>
 802971c:	2d00      	cmp	r5, #0
 802971e:	f2c0 81b0 	blt.w	8029a82 <_dtoa_r+0xdde>
 8029722:	9826      	ldr	r0, [sp, #152]	; 0x98
 8029724:	4328      	orrs	r0, r5
 8029726:	d103      	bne.n	8029730 <_dtoa_r+0xa8c>
 8029728:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802972a:	2d00      	cmp	r5, #0
 802972c:	f000 81a9 	beq.w	8029a82 <_dtoa_r+0xdde>
 8029730:	f1bb 0f00 	cmp.w	fp, #0
 8029734:	f300 81f0 	bgt.w	8029b18 <_dtoa_r+0xe74>
 8029738:	990e      	ldr	r1, [sp, #56]	; 0x38
 802973a:	9807      	ldr	r0, [sp, #28]
 802973c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802973e:	4588      	cmp	r8, r1
 8029740:	f800 5b01 	strb.w	r5, [r0], #1
 8029744:	4605      	mov	r5, r0
 8029746:	9007      	str	r0, [sp, #28]
 8029748:	f000 81e0 	beq.w	8029b0c <_dtoa_r+0xe68>
 802974c:	4621      	mov	r1, r4
 802974e:	220a      	movs	r2, #10
 8029750:	2300      	movs	r3, #0
 8029752:	4648      	mov	r0, r9
 8029754:	f000 fea2 	bl	802a49c <__multadd>
 8029758:	42b7      	cmp	r7, r6
 802975a:	4604      	mov	r4, r0
 802975c:	d01e      	beq.n	802979c <_dtoa_r+0xaf8>
 802975e:	4639      	mov	r1, r7
 8029760:	220a      	movs	r2, #10
 8029762:	2300      	movs	r3, #0
 8029764:	4648      	mov	r0, r9
 8029766:	f000 fe99 	bl	802a49c <__multadd>
 802976a:	4631      	mov	r1, r6
 802976c:	220a      	movs	r2, #10
 802976e:	2300      	movs	r3, #0
 8029770:	f108 0801 	add.w	r8, r8, #1
 8029774:	4607      	mov	r7, r0
 8029776:	4648      	mov	r0, r9
 8029778:	f000 fe90 	bl	802a49c <__multadd>
 802977c:	4606      	mov	r6, r0
 802977e:	e7a9      	b.n	80296d4 <_dtoa_r+0xa30>
 8029780:	4620      	mov	r0, r4
 8029782:	4651      	mov	r1, sl
 8029784:	f001 f8b4 	bl	802a8f0 <__mcmp>
 8029788:	4683      	mov	fp, r0
 802978a:	e7bb      	b.n	8029704 <_dtoa_r+0xa60>
 802978c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8029790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8029794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029798:	f7ff bbd4 	b.w	8028f44 <_dtoa_r+0x2a0>
 802979c:	4639      	mov	r1, r7
 802979e:	4648      	mov	r0, r9
 80297a0:	220a      	movs	r2, #10
 80297a2:	2300      	movs	r3, #0
 80297a4:	f000 fe7a 	bl	802a49c <__multadd>
 80297a8:	f108 0801 	add.w	r8, r8, #1
 80297ac:	4607      	mov	r7, r0
 80297ae:	4606      	mov	r6, r0
 80297b0:	e790      	b.n	80296d4 <_dtoa_r+0xa30>
 80297b2:	9c06      	ldr	r4, [sp, #24]
 80297b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80297b6:	9418      	str	r4, [sp, #96]	; 0x60
 80297b8:	e65d      	b.n	8029476 <_dtoa_r+0x7d2>
 80297ba:	9d06      	ldr	r5, [sp, #24]
 80297bc:	426c      	negs	r4, r5
 80297be:	2c00      	cmp	r4, #0
 80297c0:	f000 810f 	beq.w	80299e2 <_dtoa_r+0xd3e>
 80297c4:	f004 020f 	and.w	r2, r4, #15
 80297c8:	4ba2      	ldr	r3, [pc, #648]	; (8029a54 <_dtoa_r+0xdb0>)
 80297ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80297ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80297d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80297d6:	f002 fc15 	bl	802c004 <__aeabi_dmul>
 80297da:	1124      	asrs	r4, r4, #4
 80297dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80297e0:	f000 80ff 	beq.w	80299e2 <_dtoa_r+0xd3e>
 80297e4:	4d9c      	ldr	r5, [pc, #624]	; (8029a58 <_dtoa_r+0xdb4>)
 80297e6:	2602      	movs	r6, #2
 80297e8:	4602      	mov	r2, r0
 80297ea:	460b      	mov	r3, r1
 80297ec:	07e7      	lsls	r7, r4, #31
 80297ee:	4610      	mov	r0, r2
 80297f0:	4619      	mov	r1, r3
 80297f2:	d506      	bpl.n	8029802 <_dtoa_r+0xb5e>
 80297f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80297f8:	3601      	adds	r6, #1
 80297fa:	f002 fc03 	bl	802c004 <__aeabi_dmul>
 80297fe:	4602      	mov	r2, r0
 8029800:	460b      	mov	r3, r1
 8029802:	3508      	adds	r5, #8
 8029804:	1064      	asrs	r4, r4, #1
 8029806:	d1f1      	bne.n	80297ec <_dtoa_r+0xb48>
 8029808:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802980c:	e5f7      	b.n	80293fe <_dtoa_r+0x75a>
 802980e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8029810:	46a2      	mov	sl, r4
 8029812:	e507      	b.n	8029224 <_dtoa_r+0x580>
 8029814:	f105 3aff 	add.w	sl, r5, #4294967295
 8029818:	498e      	ldr	r1, [pc, #568]	; (8029a54 <_dtoa_r+0xdb0>)
 802981a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802981c:	4632      	mov	r2, r6
 802981e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8029822:	463b      	mov	r3, r7
 8029824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8029828:	9412      	str	r4, [sp, #72]	; 0x48
 802982a:	f002 fbeb 	bl	802c004 <__aeabi_dmul>
 802982e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8029832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029836:	f002 fe7f 	bl	802c538 <__aeabi_d2iz>
 802983a:	4604      	mov	r4, r0
 802983c:	f002 fb7c 	bl	802bf38 <__aeabi_i2d>
 8029840:	460b      	mov	r3, r1
 8029842:	4602      	mov	r2, r0
 8029844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029848:	f002 fa28 	bl	802bc9c <__aeabi_dsub>
 802984c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8029850:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8029852:	2d01      	cmp	r5, #1
 8029854:	f804 3b01 	strb.w	r3, [r4], #1
 8029858:	46a0      	mov	r8, r4
 802985a:	9412      	str	r4, [sp, #72]	; 0x48
 802985c:	4606      	mov	r6, r0
 802985e:	460f      	mov	r7, r1
 8029860:	d020      	beq.n	80298a4 <_dtoa_r+0xc00>
 8029862:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8029864:	f104 38ff 	add.w	r8, r4, #4294967295
 8029868:	44a8      	add	r8, r5
 802986a:	2300      	movs	r3, #0
 802986c:	2200      	movs	r2, #0
 802986e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8029872:	f002 fbc7 	bl	802c004 <__aeabi_dmul>
 8029876:	460f      	mov	r7, r1
 8029878:	4606      	mov	r6, r0
 802987a:	f002 fe5d 	bl	802c538 <__aeabi_d2iz>
 802987e:	4605      	mov	r5, r0
 8029880:	f002 fb5a 	bl	802bf38 <__aeabi_i2d>
 8029884:	3530      	adds	r5, #48	; 0x30
 8029886:	4602      	mov	r2, r0
 8029888:	460b      	mov	r3, r1
 802988a:	4630      	mov	r0, r6
 802988c:	4639      	mov	r1, r7
 802988e:	f002 fa05 	bl	802bc9c <__aeabi_dsub>
 8029892:	f804 5f01 	strb.w	r5, [r4, #1]!
 8029896:	4544      	cmp	r4, r8
 8029898:	d1e7      	bne.n	802986a <_dtoa_r+0xbc6>
 802989a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802989c:	4606      	mov	r6, r0
 802989e:	460f      	mov	r7, r1
 80298a0:	eb05 080a 	add.w	r8, r5, sl
 80298a4:	2300      	movs	r3, #0
 80298a6:	2200      	movs	r2, #0
 80298a8:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80298ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80298b0:	f002 f9f6 	bl	802bca0 <__adddf3>
 80298b4:	4602      	mov	r2, r0
 80298b6:	460b      	mov	r3, r1
 80298b8:	4630      	mov	r0, r6
 80298ba:	4639      	mov	r1, r7
 80298bc:	f002 fe32 	bl	802c524 <__aeabi_dcmpgt>
 80298c0:	2800      	cmp	r0, #0
 80298c2:	f000 8098 	beq.w	80299f6 <_dtoa_r+0xd52>
 80298c6:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 80298ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80298cc:	f7ff bbf0 	b.w	80290b0 <_dtoa_r+0x40c>
 80298d0:	46c8      	mov	r8, r9
 80298d2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80298d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80298d8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80298dc:	e4c2      	b.n	8029264 <_dtoa_r+0x5c0>
 80298de:	6923      	ldr	r3, [r4, #16]
 80298e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80298e4:	6918      	ldr	r0, [r3, #16]
 80298e6:	f000 fe65 	bl	802a5b4 <__hi0bits>
 80298ea:	f1c0 0320 	rsb	r3, r0, #32
 80298ee:	e452      	b.n	8029196 <_dtoa_r+0x4f2>
 80298f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80298f2:	4621      	mov	r1, r4
 80298f4:	f000 fffc 	bl	802a8f0 <__mcmp>
 80298f8:	2800      	cmp	r0, #0
 80298fa:	f6bf ac74 	bge.w	80291e6 <_dtoa_r+0x542>
 80298fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029900:	4648      	mov	r0, r9
 8029902:	220a      	movs	r2, #10
 8029904:	2300      	movs	r3, #0
 8029906:	f000 fdc9 	bl	802a49c <__multadd>
 802990a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802990c:	900f      	str	r0, [sp, #60]	; 0x3c
 802990e:	9806      	ldr	r0, [sp, #24]
 8029910:	3801      	subs	r0, #1
 8029912:	9006      	str	r0, [sp, #24]
 8029914:	2900      	cmp	r1, #0
 8029916:	f040 8131 	bne.w	8029b7c <_dtoa_r+0xed8>
 802991a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802991c:	930e      	str	r3, [sp, #56]	; 0x38
 802991e:	e462      	b.n	80291e6 <_dtoa_r+0x542>
 8029920:	2301      	movs	r3, #1
 8029922:	9316      	str	r3, [sp, #88]	; 0x58
 8029924:	930e      	str	r3, [sp, #56]	; 0x38
 8029926:	9327      	str	r3, [sp, #156]	; 0x9c
 8029928:	2100      	movs	r1, #0
 802992a:	401c      	ands	r4, r3
 802992c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8029930:	e523      	b.n	802937a <_dtoa_r+0x6d6>
 8029932:	f1bb 0f0e 	cmp.w	fp, #14
 8029936:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 802993a:	bf8c      	ite	hi
 802993c:	2300      	movhi	r3, #0
 802993e:	2301      	movls	r3, #1
 8029940:	e7f2      	b.n	8029928 <_dtoa_r+0xc84>
 8029942:	46d3      	mov	fp, sl
 8029944:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029946:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8029948:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 802994c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802994e:	e002      	b.n	8029956 <_dtoa_r+0xcb2>
 8029950:	f000 fda4 	bl	802a49c <__multadd>
 8029954:	4606      	mov	r6, r0
 8029956:	4621      	mov	r1, r4
 8029958:	4630      	mov	r0, r6
 802995a:	f7ff f901 	bl	8028b60 <quorem>
 802995e:	220a      	movs	r2, #10
 8029960:	2300      	movs	r3, #0
 8029962:	4631      	mov	r1, r6
 8029964:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8029968:	f807 8005 	strb.w	r8, [r7, r5]
 802996c:	3501      	adds	r5, #1
 802996e:	4648      	mov	r0, r9
 8029970:	45aa      	cmp	sl, r5
 8029972:	dced      	bgt.n	8029950 <_dtoa_r+0xcac>
 8029974:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029976:	46da      	mov	sl, fp
 8029978:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802997a:	461f      	mov	r7, r3
 802997c:	960f      	str	r6, [sp, #60]	; 0x3c
 802997e:	2a01      	cmp	r2, #1
 8029980:	bfac      	ite	ge
 8029982:	18ad      	addge	r5, r5, r2
 8029984:	3501      	addlt	r5, #1
 8029986:	2201      	movs	r2, #1
 8029988:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802998a:	4648      	mov	r0, r9
 802998c:	f000 ff50 	bl	802a830 <__lshift>
 8029990:	4621      	mov	r1, r4
 8029992:	900f      	str	r0, [sp, #60]	; 0x3c
 8029994:	f000 ffac 	bl	802a8f0 <__mcmp>
 8029998:	2800      	cmp	r0, #0
 802999a:	dd16      	ble.n	80299ca <_dtoa_r+0xd26>
 802999c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80299a0:	462b      	mov	r3, r5
 80299a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80299a4:	1c69      	adds	r1, r5, #1
 80299a6:	e002      	b.n	80299ae <_dtoa_r+0xd0a>
 80299a8:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 80299ac:	3b01      	subs	r3, #1
 80299ae:	2a39      	cmp	r2, #57	; 0x39
 80299b0:	f040 8087 	bne.w	8029ac2 <_dtoa_r+0xe1e>
 80299b4:	428b      	cmp	r3, r1
 80299b6:	d1f7      	bne.n	80299a8 <_dtoa_r+0xd04>
 80299b8:	9806      	ldr	r0, [sp, #24]
 80299ba:	2231      	movs	r2, #49	; 0x31
 80299bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80299be:	3001      	adds	r0, #1
 80299c0:	9006      	str	r0, [sp, #24]
 80299c2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80299c6:	930a      	str	r3, [sp, #40]	; 0x28
 80299c8:	e436      	b.n	8029238 <_dtoa_r+0x594>
 80299ca:	d102      	bne.n	80299d2 <_dtoa_r+0xd2e>
 80299cc:	f018 0f01 	tst.w	r8, #1
 80299d0:	d1e4      	bne.n	802999c <_dtoa_r+0xcf8>
 80299d2:	462a      	mov	r2, r5
 80299d4:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 80299d8:	2b30      	cmp	r3, #48	; 0x30
 80299da:	d0fa      	beq.n	80299d2 <_dtoa_r+0xd2e>
 80299dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80299de:	920a      	str	r2, [sp, #40]	; 0x28
 80299e0:	e42a      	b.n	8029238 <_dtoa_r+0x594>
 80299e2:	2602      	movs	r6, #2
 80299e4:	e50b      	b.n	80293fe <_dtoa_r+0x75a>
 80299e6:	4648      	mov	r0, r9
 80299e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80299ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80299ec:	f000 fed4 	bl	802a798 <__pow5mult>
 80299f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80299f2:	f7ff bbb8 	b.w	8029166 <_dtoa_r+0x4c2>
 80299f6:	2100      	movs	r1, #0
 80299f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80299fc:	2000      	movs	r0, #0
 80299fe:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8029a02:	f002 f94b 	bl	802bc9c <__aeabi_dsub>
 8029a06:	4602      	mov	r2, r0
 8029a08:	460b      	mov	r3, r1
 8029a0a:	4630      	mov	r0, r6
 8029a0c:	4639      	mov	r1, r7
 8029a0e:	f002 fd6b 	bl	802c4e8 <__aeabi_dcmplt>
 8029a12:	2800      	cmp	r0, #0
 8029a14:	f43f aebc 	beq.w	8029790 <_dtoa_r+0xaec>
 8029a18:	4643      	mov	r3, r8
 8029a1a:	4619      	mov	r1, r3
 8029a1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8029a20:	2a30      	cmp	r2, #48	; 0x30
 8029a22:	d0fa      	beq.n	8029a1a <_dtoa_r+0xd76>
 8029a24:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8029a26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029a28:	910a      	str	r1, [sp, #40]	; 0x28
 8029a2a:	9406      	str	r4, [sp, #24]
 8029a2c:	e41a      	b.n	8029264 <_dtoa_r+0x5c0>
 8029a2e:	4648      	mov	r0, r9
 8029a30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029a32:	f000 feb1 	bl	802a798 <__pow5mult>
 8029a36:	900f      	str	r0, [sp, #60]	; 0x3c
 8029a38:	f7ff bb95 	b.w	8029166 <_dtoa_r+0x4c2>
 8029a3c:	2400      	movs	r4, #0
 8029a3e:	46a2      	mov	sl, r4
 8029a40:	e476      	b.n	8029330 <_dtoa_r+0x68c>
 8029a42:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8029a44:	2c00      	cmp	r4, #0
 8029a46:	d05a      	beq.n	8029afe <_dtoa_r+0xe5a>
 8029a48:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8029a4c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8029a4e:	3303      	adds	r3, #3
 8029a50:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029a52:	e44c      	b.n	80292ee <_dtoa_r+0x64a>
 8029a54:	0802e960 	.word	0x0802e960
 8029a58:	0802ea50 	.word	0x0802ea50
 8029a5c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8029a60:	46a8      	mov	r8, r5
 8029a62:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029a64:	f7ff bb24 	b.w	80290b0 <_dtoa_r+0x40c>
 8029a68:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8029a6a:	1c72      	adds	r2, r6, #1
 8029a6c:	930a      	str	r3, [sp, #40]	; 0x28
 8029a6e:	b2d2      	uxtb	r2, r2
 8029a70:	f803 2c01 	strb.w	r2, [r3, #-1]
 8029a74:	9406      	str	r4, [sp, #24]
 8029a76:	f7ff bbf5 	b.w	8029264 <_dtoa_r+0x5c0>
 8029a7a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8029a7c:	2300      	movs	r3, #0
 8029a7e:	1b45      	subs	r5, r0, r5
 8029a80:	e435      	b.n	80292ee <_dtoa_r+0x64a>
 8029a82:	f1bb 0f00 	cmp.w	fp, #0
 8029a86:	940f      	str	r4, [sp, #60]	; 0x3c
 8029a88:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8029a8c:	9c02      	ldr	r4, [sp, #8]
 8029a8e:	dd10      	ble.n	8029ab2 <_dtoa_r+0xe0e>
 8029a90:	2201      	movs	r2, #1
 8029a92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029a94:	4648      	mov	r0, r9
 8029a96:	f000 fecb 	bl	802a830 <__lshift>
 8029a9a:	4621      	mov	r1, r4
 8029a9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8029a9e:	f000 ff27 	bl	802a8f0 <__mcmp>
 8029aa2:	2800      	cmp	r0, #0
 8029aa4:	dd5e      	ble.n	8029b64 <_dtoa_r+0xec0>
 8029aa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8029aaa:	d046      	beq.n	8029b3a <_dtoa_r+0xe96>
 8029aac:	9b08      	ldr	r3, [sp, #32]
 8029aae:	f103 0831 	add.w	r8, r3, #49	; 0x31
 8029ab2:	9b07      	ldr	r3, [sp, #28]
 8029ab4:	46b2      	mov	sl, r6
 8029ab6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029ab8:	f803 8b01 	strb.w	r8, [r3], #1
 8029abc:	930a      	str	r3, [sp, #40]	; 0x28
 8029abe:	f7ff bbbb 	b.w	8029238 <_dtoa_r+0x594>
 8029ac2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029ac4:	3201      	adds	r2, #1
 8029ac6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8029aca:	930a      	str	r3, [sp, #40]	; 0x28
 8029acc:	f7ff bbb4 	b.w	8029238 <_dtoa_r+0x594>
 8029ad0:	f8da 1004 	ldr.w	r1, [sl, #4]
 8029ad4:	4648      	mov	r0, r9
 8029ad6:	f000 fcb1 	bl	802a43c <_Balloc>
 8029ada:	f8da 2010 	ldr.w	r2, [sl, #16]
 8029ade:	f10a 010c 	add.w	r1, sl, #12
 8029ae2:	3202      	adds	r2, #2
 8029ae4:	0092      	lsls	r2, r2, #2
 8029ae6:	4605      	mov	r5, r0
 8029ae8:	f100 000c 	add.w	r0, r0, #12
 8029aec:	f7fc f946 	bl	8025d7c <memcpy>
 8029af0:	4648      	mov	r0, r9
 8029af2:	4629      	mov	r1, r5
 8029af4:	2201      	movs	r2, #1
 8029af6:	f000 fe9b 	bl	802a830 <__lshift>
 8029afa:	4606      	mov	r6, r0
 8029afc:	e5df      	b.n	80296be <_dtoa_r+0xa1a>
 8029afe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8029b00:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8029b02:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029b04:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8029b08:	f7ff bbf1 	b.w	80292ee <_dtoa_r+0x64a>
 8029b0c:	940f      	str	r4, [sp, #60]	; 0x3c
 8029b0e:	46b2      	mov	sl, r6
 8029b10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8029b14:	9c02      	ldr	r4, [sp, #8]
 8029b16:	e736      	b.n	8029986 <_dtoa_r+0xce2>
 8029b18:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8029b1c:	940f      	str	r4, [sp, #60]	; 0x3c
 8029b1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8029b22:	9c02      	ldr	r4, [sp, #8]
 8029b24:	d009      	beq.n	8029b3a <_dtoa_r+0xe96>
 8029b26:	9b07      	ldr	r3, [sp, #28]
 8029b28:	f108 0801 	add.w	r8, r8, #1
 8029b2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029b2e:	46b2      	mov	sl, r6
 8029b30:	f803 8b01 	strb.w	r8, [r3], #1
 8029b34:	930a      	str	r3, [sp, #40]	; 0x28
 8029b36:	f7ff bb7f 	b.w	8029238 <_dtoa_r+0x594>
 8029b3a:	9d07      	ldr	r5, [sp, #28]
 8029b3c:	2339      	movs	r3, #57	; 0x39
 8029b3e:	46b2      	mov	sl, r6
 8029b40:	461a      	mov	r2, r3
 8029b42:	f805 3b01 	strb.w	r3, [r5], #1
 8029b46:	e72b      	b.n	80299a0 <_dtoa_r+0xcfc>
 8029b48:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8029b4c:	940f      	str	r4, [sp, #60]	; 0x3c
 8029b4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8029b52:	9c02      	ldr	r4, [sp, #8]
 8029b54:	d0f1      	beq.n	8029b3a <_dtoa_r+0xe96>
 8029b56:	2d00      	cmp	r5, #0
 8029b58:	dca8      	bgt.n	8029aac <_dtoa_r+0xe08>
 8029b5a:	e7aa      	b.n	8029ab2 <_dtoa_r+0xe0e>
 8029b5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8029b5e:	940a      	str	r4, [sp, #40]	; 0x28
 8029b60:	f7ff bb80 	b.w	8029264 <_dtoa_r+0x5c0>
 8029b64:	d1a5      	bne.n	8029ab2 <_dtoa_r+0xe0e>
 8029b66:	f018 0f01 	tst.w	r8, #1
 8029b6a:	d0a2      	beq.n	8029ab2 <_dtoa_r+0xe0e>
 8029b6c:	e79b      	b.n	8029aa6 <_dtoa_r+0xe02>
 8029b6e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8029b70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029b72:	9406      	str	r4, [sp, #24]
 8029b74:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8029b76:	940a      	str	r4, [sp, #40]	; 0x28
 8029b78:	f7ff bb74 	b.w	8029264 <_dtoa_r+0x5c0>
 8029b7c:	4651      	mov	r1, sl
 8029b7e:	220a      	movs	r2, #10
 8029b80:	4648      	mov	r0, r9
 8029b82:	2300      	movs	r3, #0
 8029b84:	f000 fc8a 	bl	802a49c <__multadd>
 8029b88:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8029b8a:	920e      	str	r2, [sp, #56]	; 0x38
 8029b8c:	4682      	mov	sl, r0
 8029b8e:	f7ff bb2a 	b.w	80291e6 <_dtoa_r+0x542>
 8029b92:	bf18      	it	ne
 8029b94:	f1c3 033c 	rsbne	r3, r3, #60	; 0x3c
 8029b98:	f43f ab10 	beq.w	80291bc <_dtoa_r+0x518>
 8029b9c:	e577      	b.n	802968e <_dtoa_r+0x9ea>
 8029b9e:	bf00      	nop

08029ba0 <_fflush_r>:
 8029ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029ba4:	4680      	mov	r8, r0
 8029ba6:	460c      	mov	r4, r1
 8029ba8:	b110      	cbz	r0, 8029bb0 <_fflush_r+0x10>
 8029baa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8029bac:	2b00      	cmp	r3, #0
 8029bae:	d066      	beq.n	8029c7e <_fflush_r+0xde>
 8029bb0:	89a6      	ldrh	r6, [r4, #12]
 8029bb2:	2e00      	cmp	r6, #0
 8029bb4:	d060      	beq.n	8029c78 <_fflush_r+0xd8>
 8029bb6:	b233      	sxth	r3, r6
 8029bb8:	f013 0008 	ands.w	r0, r3, #8
 8029bbc:	d01e      	beq.n	8029bfc <_fflush_r+0x5c>
 8029bbe:	6926      	ldr	r6, [r4, #16]
 8029bc0:	2e00      	cmp	r6, #0
 8029bc2:	f000 8088 	beq.w	8029cd6 <_fflush_r+0x136>
 8029bc6:	079b      	lsls	r3, r3, #30
 8029bc8:	6825      	ldr	r5, [r4, #0]
 8029bca:	6026      	str	r6, [r4, #0]
 8029bcc:	bf08      	it	eq
 8029bce:	6963      	ldreq	r3, [r4, #20]
 8029bd0:	ebc6 0505 	rsb	r5, r6, r5
 8029bd4:	bf18      	it	ne
 8029bd6:	2300      	movne	r3, #0
 8029bd8:	60a3      	str	r3, [r4, #8]
 8029bda:	e00a      	b.n	8029bf2 <_fflush_r+0x52>
 8029bdc:	4632      	mov	r2, r6
 8029bde:	462b      	mov	r3, r5
 8029be0:	69e1      	ldr	r1, [r4, #28]
 8029be2:	4640      	mov	r0, r8
 8029be4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8029be6:	47b8      	blx	r7
 8029be8:	2800      	cmp	r0, #0
 8029bea:	ebc0 0505 	rsb	r5, r0, r5
 8029bee:	4406      	add	r6, r0
 8029bf0:	dd65      	ble.n	8029cbe <_fflush_r+0x11e>
 8029bf2:	2d00      	cmp	r5, #0
 8029bf4:	dcf2      	bgt.n	8029bdc <_fflush_r+0x3c>
 8029bf6:	2000      	movs	r0, #0
 8029bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029bfc:	6862      	ldr	r2, [r4, #4]
 8029bfe:	f446 6300 	orr.w	r3, r6, #2048	; 0x800
 8029c02:	81a3      	strh	r3, [r4, #12]
 8029c04:	2a00      	cmp	r2, #0
 8029c06:	dd62      	ble.n	8029cce <_fflush_r+0x12e>
 8029c08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8029c0a:	2e00      	cmp	r6, #0
 8029c0c:	d063      	beq.n	8029cd6 <_fflush_r+0x136>
 8029c0e:	b29b      	uxth	r3, r3
 8029c10:	2200      	movs	r2, #0
 8029c12:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 8029c16:	f8d8 5000 	ldr.w	r5, [r8]
 8029c1a:	f8c8 2000 	str.w	r2, [r8]
 8029c1e:	bf18      	it	ne
 8029c20:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8029c22:	d033      	beq.n	8029c8c <_fflush_r+0xec>
 8029c24:	0759      	lsls	r1, r3, #29
 8029c26:	d505      	bpl.n	8029c34 <_fflush_r+0x94>
 8029c28:	6861      	ldr	r1, [r4, #4]
 8029c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8029c2c:	1a52      	subs	r2, r2, r1
 8029c2e:	b10b      	cbz	r3, 8029c34 <_fflush_r+0x94>
 8029c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029c32:	1ad2      	subs	r2, r2, r3
 8029c34:	2300      	movs	r3, #0
 8029c36:	69e1      	ldr	r1, [r4, #28]
 8029c38:	4640      	mov	r0, r8
 8029c3a:	47b0      	blx	r6
 8029c3c:	1c43      	adds	r3, r0, #1
 8029c3e:	d030      	beq.n	8029ca2 <_fflush_r+0x102>
 8029c40:	89a3      	ldrh	r3, [r4, #12]
 8029c42:	2100      	movs	r1, #0
 8029c44:	6922      	ldr	r2, [r4, #16]
 8029c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029c4a:	6061      	str	r1, [r4, #4]
 8029c4c:	041b      	lsls	r3, r3, #16
 8029c4e:	6022      	str	r2, [r4, #0]
 8029c50:	0c1b      	lsrs	r3, r3, #16
 8029c52:	81a3      	strh	r3, [r4, #12]
 8029c54:	04d9      	lsls	r1, r3, #19
 8029c56:	d415      	bmi.n	8029c84 <_fflush_r+0xe4>
 8029c58:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8029c5a:	f8c8 5000 	str.w	r5, [r8]
 8029c5e:	2900      	cmp	r1, #0
 8029c60:	d042      	beq.n	8029ce8 <_fflush_r+0x148>
 8029c62:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8029c66:	4299      	cmp	r1, r3
 8029c68:	d002      	beq.n	8029c70 <_fflush_r+0xd0>
 8029c6a:	4640      	mov	r0, r8
 8029c6c:	f000 fa1e 	bl	802a0ac <_free_r>
 8029c70:	2000      	movs	r0, #0
 8029c72:	6320      	str	r0, [r4, #48]	; 0x30
 8029c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029c78:	4630      	mov	r0, r6
 8029c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029c7e:	f000 f8b1 	bl	8029de4 <__sinit>
 8029c82:	e795      	b.n	8029bb0 <_fflush_r+0x10>
 8029c84:	1c42      	adds	r2, r0, #1
 8029c86:	d029      	beq.n	8029cdc <_fflush_r+0x13c>
 8029c88:	6520      	str	r0, [r4, #80]	; 0x50
 8029c8a:	e7e5      	b.n	8029c58 <_fflush_r+0xb8>
 8029c8c:	463a      	mov	r2, r7
 8029c8e:	2301      	movs	r3, #1
 8029c90:	69e1      	ldr	r1, [r4, #28]
 8029c92:	4640      	mov	r0, r8
 8029c94:	47b0      	blx	r6
 8029c96:	1c43      	adds	r3, r0, #1
 8029c98:	4602      	mov	r2, r0
 8029c9a:	d028      	beq.n	8029cee <_fflush_r+0x14e>
 8029c9c:	89a3      	ldrh	r3, [r4, #12]
 8029c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8029ca0:	e7c0      	b.n	8029c24 <_fflush_r+0x84>
 8029ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8029ca6:	2b00      	cmp	r3, #0
 8029ca8:	d0ca      	beq.n	8029c40 <_fflush_r+0xa0>
 8029caa:	2b1d      	cmp	r3, #29
 8029cac:	d0c8      	beq.n	8029c40 <_fflush_r+0xa0>
 8029cae:	2b16      	cmp	r3, #22
 8029cb0:	d0c6      	beq.n	8029c40 <_fflush_r+0xa0>
 8029cb2:	89a3      	ldrh	r3, [r4, #12]
 8029cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029cb8:	81a3      	strh	r3, [r4, #12]
 8029cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029cbe:	89a3      	ldrh	r3, [r4, #12]
 8029cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8029cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029cc8:	81a3      	strh	r3, [r4, #12]
 8029cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029cce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8029cd0:	2a00      	cmp	r2, #0
 8029cd2:	dc99      	bgt.n	8029c08 <_fflush_r+0x68>
 8029cd4:	e7d1      	b.n	8029c7a <_fflush_r+0xda>
 8029cd6:	4630      	mov	r0, r6
 8029cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8029ce0:	2b00      	cmp	r3, #0
 8029ce2:	d1b9      	bne.n	8029c58 <_fflush_r+0xb8>
 8029ce4:	6520      	str	r0, [r4, #80]	; 0x50
 8029ce6:	e7b7      	b.n	8029c58 <_fflush_r+0xb8>
 8029ce8:	4608      	mov	r0, r1
 8029cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029cee:	f8d8 3000 	ldr.w	r3, [r8]
 8029cf2:	2b00      	cmp	r3, #0
 8029cf4:	d0d2      	beq.n	8029c9c <_fflush_r+0xfc>
 8029cf6:	f1a3 001d 	sub.w	r0, r3, #29
 8029cfa:	4241      	negs	r1, r0
 8029cfc:	eb41 0100 	adc.w	r1, r1, r0
 8029d00:	2b16      	cmp	r3, #22
 8029d02:	bf14      	ite	ne
 8029d04:	460b      	movne	r3, r1
 8029d06:	f041 0301 	orreq.w	r3, r1, #1
 8029d0a:	b123      	cbz	r3, 8029d16 <_fflush_r+0x176>
 8029d0c:	f8c8 5000 	str.w	r5, [r8]
 8029d10:	4638      	mov	r0, r7
 8029d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029d16:	89a3      	ldrh	r3, [r4, #12]
 8029d18:	4610      	mov	r0, r2
 8029d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029d1e:	81a3      	strh	r3, [r4, #12]
 8029d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08029d24 <fflush>:
 8029d24:	4601      	mov	r1, r0
 8029d26:	b110      	cbz	r0, 8029d2e <fflush+0xa>
 8029d28:	4b03      	ldr	r3, [pc, #12]	; (8029d38 <fflush+0x14>)
 8029d2a:	6818      	ldr	r0, [r3, #0]
 8029d2c:	e738      	b.n	8029ba0 <_fflush_r>
 8029d2e:	4b03      	ldr	r3, [pc, #12]	; (8029d3c <fflush+0x18>)
 8029d30:	4903      	ldr	r1, [pc, #12]	; (8029d40 <fflush+0x1c>)
 8029d32:	6818      	ldr	r0, [r3, #0]
 8029d34:	f000 baa2 	b.w	802a27c <_fwalk_reent>
 8029d38:	20000008 	.word	0x20000008
 8029d3c:	0802e808 	.word	0x0802e808
 8029d40:	08029ba1 	.word	0x08029ba1

08029d44 <__fp_lock>:
 8029d44:	2000      	movs	r0, #0
 8029d46:	4770      	bx	lr

08029d48 <__fp_unlock>:
 8029d48:	2000      	movs	r0, #0
 8029d4a:	4770      	bx	lr

08029d4c <_cleanup_r>:
 8029d4c:	f64b 2105 	movw	r1, #47621	; 0xba05
 8029d50:	f6c0 0102 	movt	r1, #2050	; 0x802
 8029d54:	f000 ba6c 	b.w	802a230 <_fwalk>

08029d58 <std.isra.0>:
 8029d58:	b570      	push	{r4, r5, r6, lr}
 8029d5a:	4604      	mov	r4, r0
 8029d5c:	2300      	movs	r3, #0
 8029d5e:	460e      	mov	r6, r1
 8029d60:	4615      	mov	r5, r2
 8029d62:	6023      	str	r3, [r4, #0]
 8029d64:	6063      	str	r3, [r4, #4]
 8029d66:	4619      	mov	r1, r3
 8029d68:	60a3      	str	r3, [r4, #8]
 8029d6a:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 8029d6e:	6663      	str	r3, [r4, #100]	; 0x64
 8029d70:	2208      	movs	r2, #8
 8029d72:	6123      	str	r3, [r4, #16]
 8029d74:	6163      	str	r3, [r4, #20]
 8029d76:	61a3      	str	r3, [r4, #24]
 8029d78:	81a6      	strh	r6, [r4, #12]
 8029d7a:	81e5      	strh	r5, [r4, #14]
 8029d7c:	f7fc f8a4 	bl	8025ec8 <memset>
 8029d80:	f64a 5395 	movw	r3, #44437	; 0xad95
 8029d84:	f6c0 0302 	movt	r3, #2050	; 0x802
 8029d88:	6223      	str	r3, [r4, #32]
 8029d8a:	f64a 53bd 	movw	r3, #44477	; 0xadbd
 8029d8e:	61e4      	str	r4, [r4, #28]
 8029d90:	f6c0 0302 	movt	r3, #2050	; 0x802
 8029d94:	6263      	str	r3, [r4, #36]	; 0x24
 8029d96:	f64a 53f5 	movw	r3, #44533	; 0xadf5
 8029d9a:	f6c0 0302 	movt	r3, #2050	; 0x802
 8029d9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8029da0:	f64a 6319 	movw	r3, #44569	; 0xae19
 8029da4:	f6c0 0302 	movt	r3, #2050	; 0x802
 8029da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8029daa:	bd70      	pop	{r4, r5, r6, pc}

08029dac <__sfmoreglue>:
 8029dac:	b570      	push	{r4, r5, r6, lr}
 8029dae:	2568      	movs	r5, #104	; 0x68
 8029db0:	460e      	mov	r6, r1
 8029db2:	fb05 f501 	mul.w	r5, r5, r1
 8029db6:	f105 010c 	add.w	r1, r5, #12
 8029dba:	f7fb fcb9 	bl	8025730 <_malloc_r>
 8029dbe:	4604      	mov	r4, r0
 8029dc0:	b140      	cbz	r0, 8029dd4 <__sfmoreglue+0x28>
 8029dc2:	2100      	movs	r1, #0
 8029dc4:	f100 000c 	add.w	r0, r0, #12
 8029dc8:	e884 0042 	stmia.w	r4, {r1, r6}
 8029dcc:	462a      	mov	r2, r5
 8029dce:	60a0      	str	r0, [r4, #8]
 8029dd0:	f7fc f87a 	bl	8025ec8 <memset>
 8029dd4:	4620      	mov	r0, r4
 8029dd6:	bd70      	pop	{r4, r5, r6, pc}

08029dd8 <_cleanup>:
 8029dd8:	f64e 0308 	movw	r3, #59400	; 0xe808
 8029ddc:	f6c0 0302 	movt	r3, #2050	; 0x802
 8029de0:	6818      	ldr	r0, [r3, #0]
 8029de2:	e7b3      	b.n	8029d4c <_cleanup_r>

08029de4 <__sinit>:
 8029de4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8029de6:	b570      	push	{r4, r5, r6, lr}
 8029de8:	4604      	mov	r4, r0
 8029dea:	b103      	cbz	r3, 8029dee <__sinit+0xa>
 8029dec:	bd70      	pop	{r4, r5, r6, pc}
 8029dee:	4e0e      	ldr	r6, [pc, #56]	; (8029e28 <__sinit+0x44>)
 8029df0:	2501      	movs	r5, #1
 8029df2:	2104      	movs	r1, #4
 8029df4:	461a      	mov	r2, r3
 8029df6:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 8029dfa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8029dfe:	63e6      	str	r6, [r4, #60]	; 0x3c
 8029e00:	2603      	movs	r6, #3
 8029e02:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8029e06:	6840      	ldr	r0, [r0, #4]
 8029e08:	63a5      	str	r5, [r4, #56]	; 0x38
 8029e0a:	f8c4 62e4 	str.w	r6, [r4, #740]	; 0x2e4
 8029e0e:	f7ff ffa3 	bl	8029d58 <std.isra.0>
 8029e12:	68a0      	ldr	r0, [r4, #8]
 8029e14:	2109      	movs	r1, #9
 8029e16:	462a      	mov	r2, r5
 8029e18:	f7ff ff9e 	bl	8029d58 <std.isra.0>
 8029e1c:	68e0      	ldr	r0, [r4, #12]
 8029e1e:	2112      	movs	r1, #18
 8029e20:	2202      	movs	r2, #2
 8029e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029e26:	e797      	b.n	8029d58 <std.isra.0>
 8029e28:	08029d4d 	.word	0x08029d4d

08029e2c <__sfp>:
 8029e2c:	4b25      	ldr	r3, [pc, #148]	; (8029ec4 <__sfp+0x98>)
 8029e2e:	b570      	push	{r4, r5, r6, lr}
 8029e30:	4606      	mov	r6, r0
 8029e32:	681d      	ldr	r5, [r3, #0]
 8029e34:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8029e36:	2b00      	cmp	r3, #0
 8029e38:	d034      	beq.n	8029ea4 <__sfp+0x78>
 8029e3a:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 8029e3e:	686b      	ldr	r3, [r5, #4]
 8029e40:	68a9      	ldr	r1, [r5, #8]
 8029e42:	3b01      	subs	r3, #1
 8029e44:	d411      	bmi.n	8029e6a <__sfp+0x3e>
 8029e46:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8029e4a:	460c      	mov	r4, r1
 8029e4c:	b18a      	cbz	r2, 8029e72 <__sfp+0x46>
 8029e4e:	f101 0068 	add.w	r0, r1, #104	; 0x68
 8029e52:	e002      	b.n	8029e5a <__sfp+0x2e>
 8029e54:	f932 2c5c 	ldrsh.w	r2, [r2, #-92]
 8029e58:	b15a      	cbz	r2, 8029e72 <__sfp+0x46>
 8029e5a:	3b01      	subs	r3, #1
 8029e5c:	3468      	adds	r4, #104	; 0x68
 8029e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029e62:	ebc1 0204 	rsb	r2, r1, r4
 8029e66:	4402      	add	r2, r0
 8029e68:	d1f4      	bne.n	8029e54 <__sfp+0x28>
 8029e6a:	6828      	ldr	r0, [r5, #0]
 8029e6c:	b1f0      	cbz	r0, 8029eac <__sfp+0x80>
 8029e6e:	4605      	mov	r5, r0
 8029e70:	e7e5      	b.n	8029e3e <__sfp+0x12>
 8029e72:	2500      	movs	r5, #0
 8029e74:	f04f 33ff 	mov.w	r3, #4294967295
 8029e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029e7c:	81e3      	strh	r3, [r4, #14]
 8029e7e:	6665      	str	r5, [r4, #100]	; 0x64
 8029e80:	2301      	movs	r3, #1
 8029e82:	6025      	str	r5, [r4, #0]
 8029e84:	4629      	mov	r1, r5
 8029e86:	81a3      	strh	r3, [r4, #12]
 8029e88:	2208      	movs	r2, #8
 8029e8a:	60a5      	str	r5, [r4, #8]
 8029e8c:	6065      	str	r5, [r4, #4]
 8029e8e:	6125      	str	r5, [r4, #16]
 8029e90:	6165      	str	r5, [r4, #20]
 8029e92:	61a5      	str	r5, [r4, #24]
 8029e94:	f7fc f818 	bl	8025ec8 <memset>
 8029e98:	6325      	str	r5, [r4, #48]	; 0x30
 8029e9a:	6365      	str	r5, [r4, #52]	; 0x34
 8029e9c:	6465      	str	r5, [r4, #68]	; 0x44
 8029e9e:	64a5      	str	r5, [r4, #72]	; 0x48
 8029ea0:	4620      	mov	r0, r4
 8029ea2:	bd70      	pop	{r4, r5, r6, pc}
 8029ea4:	4628      	mov	r0, r5
 8029ea6:	f7ff ff9d 	bl	8029de4 <__sinit>
 8029eaa:	e7c6      	b.n	8029e3a <__sfp+0xe>
 8029eac:	4630      	mov	r0, r6
 8029eae:	2104      	movs	r1, #4
 8029eb0:	f7ff ff7c 	bl	8029dac <__sfmoreglue>
 8029eb4:	6028      	str	r0, [r5, #0]
 8029eb6:	2800      	cmp	r0, #0
 8029eb8:	d1d9      	bne.n	8029e6e <__sfp+0x42>
 8029eba:	230c      	movs	r3, #12
 8029ebc:	4604      	mov	r4, r0
 8029ebe:	6033      	str	r3, [r6, #0]
 8029ec0:	e7ee      	b.n	8029ea0 <__sfp+0x74>
 8029ec2:	bf00      	nop
 8029ec4:	0802e808 	.word	0x0802e808

08029ec8 <__sfp_lock_acquire>:
 8029ec8:	4770      	bx	lr
 8029eca:	bf00      	nop

08029ecc <__sfp_lock_release>:
 8029ecc:	4770      	bx	lr
 8029ece:	bf00      	nop

08029ed0 <__sinit_lock_acquire>:
 8029ed0:	4770      	bx	lr
 8029ed2:	bf00      	nop

08029ed4 <__sinit_lock_release>:
 8029ed4:	4770      	bx	lr
 8029ed6:	bf00      	nop

08029ed8 <__fp_lock_all>:
 8029ed8:	f240 0308 	movw	r3, #8
 8029edc:	f649 5145 	movw	r1, #40261	; 0x9d45
 8029ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8029ee4:	f6c0 0102 	movt	r1, #2050	; 0x802
 8029ee8:	6818      	ldr	r0, [r3, #0]
 8029eea:	f000 b9a1 	b.w	802a230 <_fwalk>
 8029eee:	bf00      	nop

08029ef0 <__fp_unlock_all>:
 8029ef0:	f240 0308 	movw	r3, #8
 8029ef4:	f649 5149 	movw	r1, #40265	; 0x9d49
 8029ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8029efc:	f6c0 0102 	movt	r1, #2050	; 0x802
 8029f00:	6818      	ldr	r0, [r3, #0]
 8029f02:	f000 b995 	b.w	802a230 <_fwalk>
 8029f06:	bf00      	nop

08029f08 <_fputwc_r>:
 8029f08:	8993      	ldrh	r3, [r2, #12]
 8029f0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029f0e:	4614      	mov	r4, r2
 8029f10:	049a      	lsls	r2, r3, #18
 8029f12:	b083      	sub	sp, #12
 8029f14:	bf5e      	ittt	pl
 8029f16:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8029f1a:	81a3      	strhpl	r3, [r4, #12]
 8029f1c:	6e62      	ldrpl	r2, [r4, #100]	; 0x64
 8029f1e:	4607      	mov	r7, r0
 8029f20:	460e      	mov	r6, r1
 8029f22:	bf5c      	itt	pl
 8029f24:	f442 5300 	orrpl.w	r3, r2, #8192	; 0x2000
 8029f28:	6663      	strpl	r3, [r4, #100]	; 0x64
 8029f2a:	f000 f9f9 	bl	802a320 <__locale_mb_cur_max>
 8029f2e:	2801      	cmp	r0, #1
 8029f30:	d04b      	beq.n	8029fca <_fputwc_r+0xc2>
 8029f32:	ad01      	add	r5, sp, #4
 8029f34:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8029f38:	4638      	mov	r0, r7
 8029f3a:	4629      	mov	r1, r5
 8029f3c:	4632      	mov	r2, r6
 8029f3e:	f001 fc6f 	bl	802b820 <_wcrtomb_r>
 8029f42:	f1b0 3fff 	cmp.w	r0, #4294967295
 8029f46:	4681      	mov	r9, r0
 8029f48:	d028      	beq.n	8029f9c <_fputwc_r+0x94>
 8029f4a:	2800      	cmp	r0, #0
 8029f4c:	d03b      	beq.n	8029fc6 <_fputwc_r+0xbe>
 8029f4e:	f04f 0800 	mov.w	r8, #0
 8029f52:	e00a      	b.n	8029f6a <_fputwc_r+0x62>
 8029f54:	6823      	ldr	r3, [r4, #0]
 8029f56:	f815 2008 	ldrb.w	r2, [r5, r8]
 8029f5a:	701a      	strb	r2, [r3, #0]
 8029f5c:	6823      	ldr	r3, [r4, #0]
 8029f5e:	3301      	adds	r3, #1
 8029f60:	6023      	str	r3, [r4, #0]
 8029f62:	f108 0801 	add.w	r8, r8, #1
 8029f66:	45c8      	cmp	r8, r9
 8029f68:	d22d      	bcs.n	8029fc6 <_fputwc_r+0xbe>
 8029f6a:	68a3      	ldr	r3, [r4, #8]
 8029f6c:	3b01      	subs	r3, #1
 8029f6e:	60a3      	str	r3, [r4, #8]
 8029f70:	2b00      	cmp	r3, #0
 8029f72:	daef      	bge.n	8029f54 <_fputwc_r+0x4c>
 8029f74:	69a2      	ldr	r2, [r4, #24]
 8029f76:	2000      	movs	r0, #0
 8029f78:	4293      	cmp	r3, r2
 8029f7a:	db16      	blt.n	8029faa <_fputwc_r+0xa2>
 8029f7c:	6823      	ldr	r3, [r4, #0]
 8029f7e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8029f82:	701a      	strb	r2, [r3, #0]
 8029f84:	6823      	ldr	r3, [r4, #0]
 8029f86:	1c5a      	adds	r2, r3, #1
 8029f88:	7819      	ldrb	r1, [r3, #0]
 8029f8a:	290a      	cmp	r1, #10
 8029f8c:	bf18      	it	ne
 8029f8e:	6022      	strne	r2, [r4, #0]
 8029f90:	d00d      	beq.n	8029fae <_fputwc_r+0xa6>
 8029f92:	2800      	cmp	r0, #0
 8029f94:	d0e5      	beq.n	8029f62 <_fputwc_r+0x5a>
 8029f96:	f04f 30ff 	mov.w	r0, #4294967295
 8029f9a:	e003      	b.n	8029fa4 <_fputwc_r+0x9c>
 8029f9c:	89a3      	ldrh	r3, [r4, #12]
 8029f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029fa2:	81a3      	strh	r3, [r4, #12]
 8029fa4:	b003      	add	sp, #12
 8029fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029faa:	f815 1008 	ldrb.w	r1, [r5, r8]
 8029fae:	4638      	mov	r0, r7
 8029fb0:	4622      	mov	r2, r4
 8029fb2:	f7fe fcbd 	bl	8028930 <__swbuf_r>
 8029fb6:	f1a0 33ff 	sub.w	r3, r0, #4294967295
 8029fba:	4258      	negs	r0, r3
 8029fbc:	eb40 0003 	adc.w	r0, r0, r3
 8029fc0:	2800      	cmp	r0, #0
 8029fc2:	d0ce      	beq.n	8029f62 <_fputwc_r+0x5a>
 8029fc4:	e7e7      	b.n	8029f96 <_fputwc_r+0x8e>
 8029fc6:	4630      	mov	r0, r6
 8029fc8:	e7ec      	b.n	8029fa4 <_fputwc_r+0x9c>
 8029fca:	1c33      	adds	r3, r6, #0
 8029fcc:	bf18      	it	ne
 8029fce:	2301      	movne	r3, #1
 8029fd0:	2eff      	cmp	r6, #255	; 0xff
 8029fd2:	bf8c      	ite	hi
 8029fd4:	2300      	movhi	r3, #0
 8029fd6:	f003 0301 	andls.w	r3, r3, #1
 8029fda:	2b00      	cmp	r3, #0
 8029fdc:	d0a9      	beq.n	8029f32 <_fputwc_r+0x2a>
 8029fde:	ad02      	add	r5, sp, #8
 8029fe0:	4681      	mov	r9, r0
 8029fe2:	f805 6d04 	strb.w	r6, [r5, #-4]!
 8029fe6:	e7b2      	b.n	8029f4e <_fputwc_r+0x46>

08029fe8 <fputwc>:
 8029fe8:	b570      	push	{r4, r5, r6, lr}
 8029fea:	4606      	mov	r6, r0
 8029fec:	4c06      	ldr	r4, [pc, #24]	; (802a008 <fputwc+0x20>)
 8029fee:	460d      	mov	r5, r1
 8029ff0:	6820      	ldr	r0, [r4, #0]
 8029ff2:	b120      	cbz	r0, 8029ffe <fputwc+0x16>
 8029ff4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8029ff6:	b913      	cbnz	r3, 8029ffe <fputwc+0x16>
 8029ff8:	f7ff fef4 	bl	8029de4 <__sinit>
 8029ffc:	6820      	ldr	r0, [r4, #0]
 8029ffe:	4631      	mov	r1, r6
 802a000:	462a      	mov	r2, r5
 802a002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a006:	e77f      	b.n	8029f08 <_fputwc_r>
 802a008:	20000008 	.word	0x20000008

0802a00c <_malloc_trim_r>:
 802a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a00e:	4604      	mov	r4, r0
 802a010:	4d23      	ldr	r5, [pc, #140]	; (802a0a0 <_malloc_trim_r+0x94>)
 802a012:	460f      	mov	r7, r1
 802a014:	f7f4 f9ba 	bl	801e38c <__malloc_lock>
 802a018:	4620      	mov	r0, r4
 802a01a:	68ab      	ldr	r3, [r5, #8]
 802a01c:	685e      	ldr	r6, [r3, #4]
 802a01e:	f026 0603 	bic.w	r6, r6, #3
 802a022:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 802a026:	330f      	adds	r3, #15
 802a028:	1bdf      	subs	r7, r3, r7
 802a02a:	0b3f      	lsrs	r7, r7, #12
 802a02c:	3f01      	subs	r7, #1
 802a02e:	033f      	lsls	r7, r7, #12
 802a030:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 802a034:	db1c      	blt.n	802a070 <_malloc_trim_r+0x64>
 802a036:	2100      	movs	r1, #0
 802a038:	f7f4 f93e 	bl	801e2b8 <_sbrk_r>
 802a03c:	68ab      	ldr	r3, [r5, #8]
 802a03e:	199b      	adds	r3, r3, r6
 802a040:	4298      	cmp	r0, r3
 802a042:	d019      	beq.n	802a078 <_malloc_trim_r+0x6c>
 802a044:	4620      	mov	r0, r4
 802a046:	f7f4 f9ab 	bl	801e3a0 <__malloc_unlock>
 802a04a:	2000      	movs	r0, #0
 802a04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a04e:	2100      	movs	r1, #0
 802a050:	4620      	mov	r0, r4
 802a052:	f7f4 f931 	bl	801e2b8 <_sbrk_r>
 802a056:	68ab      	ldr	r3, [r5, #8]
 802a058:	1ac2      	subs	r2, r0, r3
 802a05a:	2a0f      	cmp	r2, #15
 802a05c:	dd07      	ble.n	802a06e <_malloc_trim_r+0x62>
 802a05e:	f042 0201 	orr.w	r2, r2, #1
 802a062:	605a      	str	r2, [r3, #4]
 802a064:	4b0f      	ldr	r3, [pc, #60]	; (802a0a4 <_malloc_trim_r+0x98>)
 802a066:	681b      	ldr	r3, [r3, #0]
 802a068:	1ac0      	subs	r0, r0, r3
 802a06a:	4b0f      	ldr	r3, [pc, #60]	; (802a0a8 <_malloc_trim_r+0x9c>)
 802a06c:	6018      	str	r0, [r3, #0]
 802a06e:	4620      	mov	r0, r4
 802a070:	f7f4 f996 	bl	801e3a0 <__malloc_unlock>
 802a074:	2000      	movs	r0, #0
 802a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a078:	4279      	negs	r1, r7
 802a07a:	4620      	mov	r0, r4
 802a07c:	f7f4 f91c 	bl	801e2b8 <_sbrk_r>
 802a080:	3001      	adds	r0, #1
 802a082:	d0e4      	beq.n	802a04e <_malloc_trim_r+0x42>
 802a084:	4b08      	ldr	r3, [pc, #32]	; (802a0a8 <_malloc_trim_r+0x9c>)
 802a086:	1bf6      	subs	r6, r6, r7
 802a088:	68a9      	ldr	r1, [r5, #8]
 802a08a:	4620      	mov	r0, r4
 802a08c:	f046 0601 	orr.w	r6, r6, #1
 802a090:	681a      	ldr	r2, [r3, #0]
 802a092:	604e      	str	r6, [r1, #4]
 802a094:	1bd7      	subs	r7, r2, r7
 802a096:	601f      	str	r7, [r3, #0]
 802a098:	f7f4 f982 	bl	801e3a0 <__malloc_unlock>
 802a09c:	2001      	movs	r0, #1
 802a09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a0a0:	20000438 	.word	0x20000438
 802a0a4:	20000840 	.word	0x20000840
 802a0a8:	200009d8 	.word	0x200009d8

0802a0ac <_free_r>:
 802a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a0ae:	460d      	mov	r5, r1
 802a0b0:	4604      	mov	r4, r0
 802a0b2:	2900      	cmp	r1, #0
 802a0b4:	d06f      	beq.n	802a196 <_free_r+0xea>
 802a0b6:	f7f4 f969 	bl	801e38c <__malloc_lock>
 802a0ba:	4e59      	ldr	r6, [pc, #356]	; (802a220 <_free_r+0x174>)
 802a0bc:	f855 0c04 	ldr.w	r0, [r5, #-4]
 802a0c0:	f1a5 0108 	sub.w	r1, r5, #8
 802a0c4:	f020 0301 	bic.w	r3, r0, #1
 802a0c8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802a0cc:	18ca      	adds	r2, r1, r3
 802a0ce:	4594      	cmp	ip, r2
 802a0d0:	6857      	ldr	r7, [r2, #4]
 802a0d2:	f027 0703 	bic.w	r7, r7, #3
 802a0d6:	d07b      	beq.n	802a1d0 <_free_r+0x124>
 802a0d8:	f010 0001 	ands.w	r0, r0, #1
 802a0dc:	6057      	str	r7, [r2, #4]
 802a0de:	d04a      	beq.n	802a176 <_free_r+0xca>
 802a0e0:	2000      	movs	r0, #0
 802a0e2:	19d5      	adds	r5, r2, r7
 802a0e4:	686d      	ldr	r5, [r5, #4]
 802a0e6:	f015 0f01 	tst.w	r5, #1
 802a0ea:	d106      	bne.n	802a0fa <_free_r+0x4e>
 802a0ec:	19db      	adds	r3, r3, r7
 802a0ee:	6895      	ldr	r5, [r2, #8]
 802a0f0:	2800      	cmp	r0, #0
 802a0f2:	d061      	beq.n	802a1b8 <_free_r+0x10c>
 802a0f4:	68d2      	ldr	r2, [r2, #12]
 802a0f6:	60ea      	str	r2, [r5, #12]
 802a0f8:	6095      	str	r5, [r2, #8]
 802a0fa:	f043 0201 	orr.w	r2, r3, #1
 802a0fe:	50cb      	str	r3, [r1, r3]
 802a100:	604a      	str	r2, [r1, #4]
 802a102:	2800      	cmp	r0, #0
 802a104:	d132      	bne.n	802a16c <_free_r+0xc0>
 802a106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a10a:	d345      	bcc.n	802a198 <_free_r+0xec>
 802a10c:	099d      	lsrs	r5, r3, #6
 802a10e:	0a5a      	lsrs	r2, r3, #9
 802a110:	3538      	adds	r5, #56	; 0x38
 802a112:	00e8      	lsls	r0, r5, #3
 802a114:	2a04      	cmp	r2, #4
 802a116:	d916      	bls.n	802a146 <_free_r+0x9a>
 802a118:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 802a11c:	00e8      	lsls	r0, r5, #3
 802a11e:	2a14      	cmp	r2, #20
 802a120:	d911      	bls.n	802a146 <_free_r+0x9a>
 802a122:	0b1d      	lsrs	r5, r3, #12
 802a124:	356e      	adds	r5, #110	; 0x6e
 802a126:	00e8      	lsls	r0, r5, #3
 802a128:	2a54      	cmp	r2, #84	; 0x54
 802a12a:	d90c      	bls.n	802a146 <_free_r+0x9a>
 802a12c:	0bdd      	lsrs	r5, r3, #15
 802a12e:	3577      	adds	r5, #119	; 0x77
 802a130:	00e8      	lsls	r0, r5, #3
 802a132:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 802a136:	d906      	bls.n	802a146 <_free_r+0x9a>
 802a138:	f240 5054 	movw	r0, #1364	; 0x554
 802a13c:	4282      	cmp	r2, r0
 802a13e:	d86b      	bhi.n	802a218 <_free_r+0x16c>
 802a140:	0c9d      	lsrs	r5, r3, #18
 802a142:	357c      	adds	r5, #124	; 0x7c
 802a144:	00e8      	lsls	r0, r5, #3
 802a146:	1986      	adds	r6, r0, r6
 802a148:	4835      	ldr	r0, [pc, #212]	; (802a220 <_free_r+0x174>)
 802a14a:	68b2      	ldr	r2, [r6, #8]
 802a14c:	42b2      	cmp	r2, r6
 802a14e:	d103      	bne.n	802a158 <_free_r+0xac>
 802a150:	e059      	b.n	802a206 <_free_r+0x15a>
 802a152:	6892      	ldr	r2, [r2, #8]
 802a154:	4296      	cmp	r6, r2
 802a156:	d004      	beq.n	802a162 <_free_r+0xb6>
 802a158:	6850      	ldr	r0, [r2, #4]
 802a15a:	f020 0003 	bic.w	r0, r0, #3
 802a15e:	4283      	cmp	r3, r0
 802a160:	d3f7      	bcc.n	802a152 <_free_r+0xa6>
 802a162:	68d3      	ldr	r3, [r2, #12]
 802a164:	60cb      	str	r3, [r1, #12]
 802a166:	608a      	str	r2, [r1, #8]
 802a168:	60d1      	str	r1, [r2, #12]
 802a16a:	6099      	str	r1, [r3, #8]
 802a16c:	4620      	mov	r0, r4
 802a16e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802a172:	f7f4 b915 	b.w	801e3a0 <__malloc_unlock>
 802a176:	f855 5c08 	ldr.w	r5, [r5, #-8]
 802a17a:	f106 0c08 	add.w	ip, r6, #8
 802a17e:	1b49      	subs	r1, r1, r5
 802a180:	195b      	adds	r3, r3, r5
 802a182:	688d      	ldr	r5, [r1, #8]
 802a184:	4565      	cmp	r5, ip
 802a186:	d03c      	beq.n	802a202 <_free_r+0x156>
 802a188:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 802a18c:	f8c5 c00c 	str.w	ip, [r5, #12]
 802a190:	f8cc 5008 	str.w	r5, [ip, #8]
 802a194:	e7a5      	b.n	802a0e2 <_free_r+0x36>
 802a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a198:	08db      	lsrs	r3, r3, #3
 802a19a:	2001      	movs	r0, #1
 802a19c:	6875      	ldr	r5, [r6, #4]
 802a19e:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 802a1a2:	109b      	asrs	r3, r3, #2
 802a1a4:	fa10 f303 	lsls.w	r3, r0, r3
 802a1a8:	60ca      	str	r2, [r1, #12]
 802a1aa:	6890      	ldr	r0, [r2, #8]
 802a1ac:	432b      	orrs	r3, r5
 802a1ae:	6073      	str	r3, [r6, #4]
 802a1b0:	6088      	str	r0, [r1, #8]
 802a1b2:	60c1      	str	r1, [r0, #12]
 802a1b4:	6091      	str	r1, [r2, #8]
 802a1b6:	e7d9      	b.n	802a16c <_free_r+0xc0>
 802a1b8:	4f1a      	ldr	r7, [pc, #104]	; (802a224 <_free_r+0x178>)
 802a1ba:	42bd      	cmp	r5, r7
 802a1bc:	d19a      	bne.n	802a0f4 <_free_r+0x48>
 802a1be:	6171      	str	r1, [r6, #20]
 802a1c0:	f043 0201 	orr.w	r2, r3, #1
 802a1c4:	6131      	str	r1, [r6, #16]
 802a1c6:	60cd      	str	r5, [r1, #12]
 802a1c8:	608d      	str	r5, [r1, #8]
 802a1ca:	604a      	str	r2, [r1, #4]
 802a1cc:	50cb      	str	r3, [r1, r3]
 802a1ce:	e7cd      	b.n	802a16c <_free_r+0xc0>
 802a1d0:	07c2      	lsls	r2, r0, #31
 802a1d2:	443b      	add	r3, r7
 802a1d4:	d407      	bmi.n	802a1e6 <_free_r+0x13a>
 802a1d6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 802a1da:	1a89      	subs	r1, r1, r2
 802a1dc:	189b      	adds	r3, r3, r2
 802a1de:	6888      	ldr	r0, [r1, #8]
 802a1e0:	68ca      	ldr	r2, [r1, #12]
 802a1e2:	60c2      	str	r2, [r0, #12]
 802a1e4:	6090      	str	r0, [r2, #8]
 802a1e6:	f043 0201 	orr.w	r2, r3, #1
 802a1ea:	604a      	str	r2, [r1, #4]
 802a1ec:	4a0e      	ldr	r2, [pc, #56]	; (802a228 <_free_r+0x17c>)
 802a1ee:	60b1      	str	r1, [r6, #8]
 802a1f0:	6812      	ldr	r2, [r2, #0]
 802a1f2:	4293      	cmp	r3, r2
 802a1f4:	d3ba      	bcc.n	802a16c <_free_r+0xc0>
 802a1f6:	4b0d      	ldr	r3, [pc, #52]	; (802a22c <_free_r+0x180>)
 802a1f8:	4620      	mov	r0, r4
 802a1fa:	6819      	ldr	r1, [r3, #0]
 802a1fc:	f7ff ff06 	bl	802a00c <_malloc_trim_r>
 802a200:	e7b4      	b.n	802a16c <_free_r+0xc0>
 802a202:	2001      	movs	r0, #1
 802a204:	e76d      	b.n	802a0e2 <_free_r+0x36>
 802a206:	2701      	movs	r7, #1
 802a208:	6846      	ldr	r6, [r0, #4]
 802a20a:	10ad      	asrs	r5, r5, #2
 802a20c:	4613      	mov	r3, r2
 802a20e:	fa17 f505 	lsls.w	r5, r7, r5
 802a212:	4335      	orrs	r5, r6
 802a214:	6045      	str	r5, [r0, #4]
 802a216:	e7a5      	b.n	802a164 <_free_r+0xb8>
 802a218:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 802a21c:	257e      	movs	r5, #126	; 0x7e
 802a21e:	e792      	b.n	802a146 <_free_r+0x9a>
 802a220:	20000438 	.word	0x20000438
 802a224:	20000440 	.word	0x20000440
 802a228:	20000844 	.word	0x20000844
 802a22c:	200009d4 	.word	0x200009d4

0802a230 <_fwalk>:
 802a230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a234:	4606      	mov	r6, r0
 802a236:	4688      	mov	r8, r1
 802a238:	f7ff fe46 	bl	8029ec8 <__sfp_lock_acquire>
 802a23c:	f516 7638 	adds.w	r6, r6, #736	; 0x2e0
 802a240:	bf08      	it	eq
 802a242:	4637      	moveq	r7, r6
 802a244:	d015      	beq.n	802a272 <_fwalk+0x42>
 802a246:	2700      	movs	r7, #0
 802a248:	6875      	ldr	r5, [r6, #4]
 802a24a:	68b4      	ldr	r4, [r6, #8]
 802a24c:	3d01      	subs	r5, #1
 802a24e:	d40d      	bmi.n	802a26c <_fwalk+0x3c>
 802a250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a254:	3d01      	subs	r5, #1
 802a256:	b133      	cbz	r3, 802a266 <_fwalk+0x36>
 802a258:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802a25c:	4620      	mov	r0, r4
 802a25e:	3301      	adds	r3, #1
 802a260:	d001      	beq.n	802a266 <_fwalk+0x36>
 802a262:	47c0      	blx	r8
 802a264:	4307      	orrs	r7, r0
 802a266:	3468      	adds	r4, #104	; 0x68
 802a268:	1c6b      	adds	r3, r5, #1
 802a26a:	d1f1      	bne.n	802a250 <_fwalk+0x20>
 802a26c:	6836      	ldr	r6, [r6, #0]
 802a26e:	2e00      	cmp	r6, #0
 802a270:	d1ea      	bne.n	802a248 <_fwalk+0x18>
 802a272:	f7ff fe2b 	bl	8029ecc <__sfp_lock_release>
 802a276:	4638      	mov	r0, r7
 802a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802a27c <_fwalk_reent>:
 802a27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a280:	4607      	mov	r7, r0
 802a282:	4689      	mov	r9, r1
 802a284:	f7ff fe20 	bl	8029ec8 <__sfp_lock_acquire>
 802a288:	f517 7638 	adds.w	r6, r7, #736	; 0x2e0
 802a28c:	bf08      	it	eq
 802a28e:	46b0      	moveq	r8, r6
 802a290:	d018      	beq.n	802a2c4 <_fwalk_reent+0x48>
 802a292:	f04f 0800 	mov.w	r8, #0
 802a296:	6875      	ldr	r5, [r6, #4]
 802a298:	68b4      	ldr	r4, [r6, #8]
 802a29a:	3d01      	subs	r5, #1
 802a29c:	d40f      	bmi.n	802a2be <_fwalk_reent+0x42>
 802a29e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a2a2:	3d01      	subs	r5, #1
 802a2a4:	b143      	cbz	r3, 802a2b8 <_fwalk_reent+0x3c>
 802a2a6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802a2aa:	4621      	mov	r1, r4
 802a2ac:	4638      	mov	r0, r7
 802a2ae:	3301      	adds	r3, #1
 802a2b0:	d002      	beq.n	802a2b8 <_fwalk_reent+0x3c>
 802a2b2:	47c8      	blx	r9
 802a2b4:	ea48 0800 	orr.w	r8, r8, r0
 802a2b8:	3468      	adds	r4, #104	; 0x68
 802a2ba:	1c6a      	adds	r2, r5, #1
 802a2bc:	d1ef      	bne.n	802a29e <_fwalk_reent+0x22>
 802a2be:	6836      	ldr	r6, [r6, #0]
 802a2c0:	2e00      	cmp	r6, #0
 802a2c2:	d1e8      	bne.n	802a296 <_fwalk_reent+0x1a>
 802a2c4:	f7ff fe02 	bl	8029ecc <__sfp_lock_release>
 802a2c8:	4640      	mov	r0, r8
 802a2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a2ce:	bf00      	nop

0802a2d0 <_setlocale_r>:
 802a2d0:	b510      	push	{r4, lr}
 802a2d2:	4614      	mov	r4, r2
 802a2d4:	b122      	cbz	r2, 802a2e0 <_setlocale_r+0x10>
 802a2d6:	4610      	mov	r0, r2
 802a2d8:	490b      	ldr	r1, [pc, #44]	; (802a308 <_setlocale_r+0x38>)
 802a2da:	f7fc f9d3 	bl	8026684 <strcmp>
 802a2de:	b908      	cbnz	r0, 802a2e4 <_setlocale_r+0x14>
 802a2e0:	480a      	ldr	r0, [pc, #40]	; (802a30c <_setlocale_r+0x3c>)
 802a2e2:	bd10      	pop	{r4, pc}
 802a2e4:	4620      	mov	r0, r4
 802a2e6:	4909      	ldr	r1, [pc, #36]	; (802a30c <_setlocale_r+0x3c>)
 802a2e8:	f7fc f9cc 	bl	8026684 <strcmp>
 802a2ec:	b908      	cbnz	r0, 802a2f2 <_setlocale_r+0x22>
 802a2ee:	4807      	ldr	r0, [pc, #28]	; (802a30c <_setlocale_r+0x3c>)
 802a2f0:	bd10      	pop	{r4, pc}
 802a2f2:	4620      	mov	r0, r4
 802a2f4:	4906      	ldr	r1, [pc, #24]	; (802a310 <_setlocale_r+0x40>)
 802a2f6:	f7fc f9c5 	bl	8026684 <strcmp>
 802a2fa:	4b04      	ldr	r3, [pc, #16]	; (802a30c <_setlocale_r+0x3c>)
 802a2fc:	2800      	cmp	r0, #0
 802a2fe:	bf0c      	ite	eq
 802a300:	4618      	moveq	r0, r3
 802a302:	2000      	movne	r0, #0
 802a304:	bd10      	pop	{r4, pc}
 802a306:	bf00      	nop
 802a308:	08035ee0 	.word	0x08035ee0
 802a30c:	08035e88 	.word	0x08035e88
 802a310:	08035e54 	.word	0x08035e54

0802a314 <__locale_charset>:
 802a314:	f640 004c 	movw	r0, #2124	; 0x84c
 802a318:	f2c2 0000 	movt	r0, #8192	; 0x2000
 802a31c:	4770      	bx	lr
 802a31e:	bf00      	nop

0802a320 <__locale_mb_cur_max>:
 802a320:	f640 034c 	movw	r3, #2124	; 0x84c
 802a324:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802a328:	6a18      	ldr	r0, [r3, #32]
 802a32a:	4770      	bx	lr

0802a32c <__locale_msgcharset>:
 802a32c:	4800      	ldr	r0, [pc, #0]	; (802a330 <__locale_msgcharset+0x4>)
 802a32e:	4770      	bx	lr
 802a330:	20000870 	.word	0x20000870

0802a334 <__locale_cjk_lang>:
 802a334:	2000      	movs	r0, #0
 802a336:	4770      	bx	lr

0802a338 <_localeconv_r>:
 802a338:	4800      	ldr	r0, [pc, #0]	; (802a33c <_localeconv_r+0x4>)
 802a33a:	4770      	bx	lr
 802a33c:	20000890 	.word	0x20000890

0802a340 <setlocale>:
 802a340:	f240 0308 	movw	r3, #8
 802a344:	460a      	mov	r2, r1
 802a346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802a34a:	4601      	mov	r1, r0
 802a34c:	6818      	ldr	r0, [r3, #0]
 802a34e:	e7bf      	b.n	802a2d0 <_setlocale_r>

0802a350 <localeconv>:
 802a350:	4800      	ldr	r0, [pc, #0]	; (802a354 <localeconv+0x4>)
 802a352:	4770      	bx	lr
 802a354:	20000890 	.word	0x20000890

0802a358 <__smakebuf_r>:
 802a358:	898b      	ldrh	r3, [r1, #12]
 802a35a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a35c:	4605      	mov	r5, r0
 802a35e:	b29a      	uxth	r2, r3
 802a360:	b091      	sub	sp, #68	; 0x44
 802a362:	0790      	lsls	r0, r2, #30
 802a364:	460c      	mov	r4, r1
 802a366:	d439      	bmi.n	802a3dc <__smakebuf_r+0x84>
 802a368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a36c:	2900      	cmp	r1, #0
 802a36e:	db19      	blt.n	802a3a4 <__smakebuf_r+0x4c>
 802a370:	4628      	mov	r0, r5
 802a372:	aa01      	add	r2, sp, #4
 802a374:	f7f3 ff72 	bl	801e25c <_fstat_r>
 802a378:	2800      	cmp	r0, #0
 802a37a:	db11      	blt.n	802a3a0 <__smakebuf_r+0x48>
 802a37c:	9b02      	ldr	r3, [sp, #8]
 802a37e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 802a382:	f5a3 5100 	sub.w	r1, r3, #8192	; 0x2000
 802a386:	424f      	negs	r7, r1
 802a388:	eb47 0701 	adc.w	r7, r7, r1
 802a38c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802a390:	d037      	beq.n	802a402 <__smakebuf_r+0xaa>
 802a392:	89a3      	ldrh	r3, [r4, #12]
 802a394:	f44f 6680 	mov.w	r6, #1024	; 0x400
 802a398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802a39c:	81a3      	strh	r3, [r4, #12]
 802a39e:	e00b      	b.n	802a3b8 <__smakebuf_r+0x60>
 802a3a0:	89a3      	ldrh	r3, [r4, #12]
 802a3a2:	b29a      	uxth	r2, r3
 802a3a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 802a3a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802a3ac:	bf14      	ite	ne
 802a3ae:	2640      	movne	r6, #64	; 0x40
 802a3b0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 802a3b4:	2700      	movs	r7, #0
 802a3b6:	81a3      	strh	r3, [r4, #12]
 802a3b8:	4628      	mov	r0, r5
 802a3ba:	4631      	mov	r1, r6
 802a3bc:	f7fb f9b8 	bl	8025730 <_malloc_r>
 802a3c0:	89a3      	ldrh	r3, [r4, #12]
 802a3c2:	2800      	cmp	r0, #0
 802a3c4:	d029      	beq.n	802a41a <__smakebuf_r+0xc2>
 802a3c6:	4a1b      	ldr	r2, [pc, #108]	; (802a434 <__smakebuf_r+0xdc>)
 802a3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a3cc:	63ea      	str	r2, [r5, #60]	; 0x3c
 802a3ce:	6020      	str	r0, [r4, #0]
 802a3d0:	81a3      	strh	r3, [r4, #12]
 802a3d2:	6120      	str	r0, [r4, #16]
 802a3d4:	6166      	str	r6, [r4, #20]
 802a3d6:	b947      	cbnz	r7, 802a3ea <__smakebuf_r+0x92>
 802a3d8:	b011      	add	sp, #68	; 0x44
 802a3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a3dc:	f101 0343 	add.w	r3, r1, #67	; 0x43
 802a3e0:	600b      	str	r3, [r1, #0]
 802a3e2:	610b      	str	r3, [r1, #16]
 802a3e4:	2301      	movs	r3, #1
 802a3e6:	614b      	str	r3, [r1, #20]
 802a3e8:	e7f6      	b.n	802a3d8 <__smakebuf_r+0x80>
 802a3ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a3ee:	4628      	mov	r0, r5
 802a3f0:	f7f3 ff54 	bl	801e29c <_isatty_r>
 802a3f4:	2800      	cmp	r0, #0
 802a3f6:	d0ef      	beq.n	802a3d8 <__smakebuf_r+0x80>
 802a3f8:	89a3      	ldrh	r3, [r4, #12]
 802a3fa:	f043 0301 	orr.w	r3, r3, #1
 802a3fe:	81a3      	strh	r3, [r4, #12]
 802a400:	e7ea      	b.n	802a3d8 <__smakebuf_r+0x80>
 802a402:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802a404:	4b0c      	ldr	r3, [pc, #48]	; (802a438 <__smakebuf_r+0xe0>)
 802a406:	429a      	cmp	r2, r3
 802a408:	d1c3      	bne.n	802a392 <__smakebuf_r+0x3a>
 802a40a:	89a2      	ldrh	r2, [r4, #12]
 802a40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a410:	461e      	mov	r6, r3
 802a412:	64e3      	str	r3, [r4, #76]	; 0x4c
 802a414:	4313      	orrs	r3, r2
 802a416:	81a3      	strh	r3, [r4, #12]
 802a418:	e7ce      	b.n	802a3b8 <__smakebuf_r+0x60>
 802a41a:	059a      	lsls	r2, r3, #22
 802a41c:	d4dc      	bmi.n	802a3d8 <__smakebuf_r+0x80>
 802a41e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a422:	f043 0302 	orr.w	r3, r3, #2
 802a426:	6022      	str	r2, [r4, #0]
 802a428:	81a3      	strh	r3, [r4, #12]
 802a42a:	2301      	movs	r3, #1
 802a42c:	6122      	str	r2, [r4, #16]
 802a42e:	6163      	str	r3, [r4, #20]
 802a430:	e7d2      	b.n	802a3d8 <__smakebuf_r+0x80>
 802a432:	bf00      	nop
 802a434:	08029d4d 	.word	0x08029d4d
 802a438:	0802adf5 	.word	0x0802adf5

0802a43c <_Balloc>:
 802a43c:	b538      	push	{r3, r4, r5, lr}
 802a43e:	4605      	mov	r5, r0
 802a440:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802a442:	460c      	mov	r4, r1
 802a444:	b14b      	cbz	r3, 802a45a <_Balloc+0x1e>
 802a446:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802a44a:	b178      	cbz	r0, 802a46c <_Balloc+0x30>
 802a44c:	6802      	ldr	r2, [r0, #0]
 802a44e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 802a452:	2300      	movs	r3, #0
 802a454:	6103      	str	r3, [r0, #16]
 802a456:	60c3      	str	r3, [r0, #12]
 802a458:	bd38      	pop	{r3, r4, r5, pc}
 802a45a:	2104      	movs	r1, #4
 802a45c:	2221      	movs	r2, #33	; 0x21
 802a45e:	f001 fa5b 	bl	802b918 <_calloc_r>
 802a462:	4603      	mov	r3, r0
 802a464:	64e8      	str	r0, [r5, #76]	; 0x4c
 802a466:	2800      	cmp	r0, #0
 802a468:	d1ed      	bne.n	802a446 <_Balloc+0xa>
 802a46a:	bd38      	pop	{r3, r4, r5, pc}
 802a46c:	2301      	movs	r3, #1
 802a46e:	4628      	mov	r0, r5
 802a470:	4619      	mov	r1, r3
 802a472:	fa13 f504 	lsls.w	r5, r3, r4
 802a476:	1d6a      	adds	r2, r5, #5
 802a478:	0092      	lsls	r2, r2, #2
 802a47a:	f001 fa4d 	bl	802b918 <_calloc_r>
 802a47e:	2800      	cmp	r0, #0
 802a480:	d0f3      	beq.n	802a46a <_Balloc+0x2e>
 802a482:	6044      	str	r4, [r0, #4]
 802a484:	6085      	str	r5, [r0, #8]
 802a486:	e7e4      	b.n	802a452 <_Balloc+0x16>

0802a488 <_Bfree>:
 802a488:	b131      	cbz	r1, 802a498 <_Bfree+0x10>
 802a48a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802a48c:	684a      	ldr	r2, [r1, #4]
 802a48e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802a492:	6008      	str	r0, [r1, #0]
 802a494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802a498:	4770      	bx	lr
 802a49a:	bf00      	nop

0802a49c <__multadd>:
 802a49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a49e:	460c      	mov	r4, r1
 802a4a0:	4605      	mov	r5, r0
 802a4a2:	690e      	ldr	r6, [r1, #16]
 802a4a4:	f101 0014 	add.w	r0, r1, #20
 802a4a8:	b083      	sub	sp, #12
 802a4aa:	2100      	movs	r1, #0
 802a4ac:	6807      	ldr	r7, [r0, #0]
 802a4ae:	3101      	adds	r1, #1
 802a4b0:	fa1f fc87 	uxth.w	ip, r7
 802a4b4:	0c3f      	lsrs	r7, r7, #16
 802a4b6:	fb02 330c 	mla	r3, r2, ip, r3
 802a4ba:	fb02 f707 	mul.w	r7, r2, r7
 802a4be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802a4c2:	b29b      	uxth	r3, r3
 802a4c4:	eb03 4c07 	add.w	ip, r3, r7, lsl #16
 802a4c8:	0c3b      	lsrs	r3, r7, #16
 802a4ca:	428e      	cmp	r6, r1
 802a4cc:	f840 cb04 	str.w	ip, [r0], #4
 802a4d0:	dcec      	bgt.n	802a4ac <__multadd+0x10>
 802a4d2:	b13b      	cbz	r3, 802a4e4 <__multadd+0x48>
 802a4d4:	68a2      	ldr	r2, [r4, #8]
 802a4d6:	4296      	cmp	r6, r2
 802a4d8:	da07      	bge.n	802a4ea <__multadd+0x4e>
 802a4da:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 802a4de:	3601      	adds	r6, #1
 802a4e0:	6126      	str	r6, [r4, #16]
 802a4e2:	6153      	str	r3, [r2, #20]
 802a4e4:	4620      	mov	r0, r4
 802a4e6:	b003      	add	sp, #12
 802a4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a4ea:	6861      	ldr	r1, [r4, #4]
 802a4ec:	4628      	mov	r0, r5
 802a4ee:	9301      	str	r3, [sp, #4]
 802a4f0:	3101      	adds	r1, #1
 802a4f2:	f7ff ffa3 	bl	802a43c <_Balloc>
 802a4f6:	6922      	ldr	r2, [r4, #16]
 802a4f8:	f104 010c 	add.w	r1, r4, #12
 802a4fc:	3202      	adds	r2, #2
 802a4fe:	0092      	lsls	r2, r2, #2
 802a500:	4607      	mov	r7, r0
 802a502:	f100 000c 	add.w	r0, r0, #12
 802a506:	f7fb fc39 	bl	8025d7c <memcpy>
 802a50a:	6861      	ldr	r1, [r4, #4]
 802a50c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 802a50e:	9b01      	ldr	r3, [sp, #4]
 802a510:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 802a514:	6020      	str	r0, [r4, #0]
 802a516:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 802a51a:	463c      	mov	r4, r7
 802a51c:	e7dd      	b.n	802a4da <__multadd+0x3e>
 802a51e:	bf00      	nop

0802a520 <__s2b>:
 802a520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a524:	f648 6439 	movw	r4, #36409	; 0x8e39
 802a528:	461e      	mov	r6, r3
 802a52a:	f6c3 04e3 	movt	r4, #14563	; 0x38e3
 802a52e:	f103 0308 	add.w	r3, r3, #8
 802a532:	4688      	mov	r8, r1
 802a534:	4605      	mov	r5, r0
 802a536:	4617      	mov	r7, r2
 802a538:	fb84 1403 	smull	r1, r4, r4, r3
 802a53c:	17db      	asrs	r3, r3, #31
 802a53e:	2100      	movs	r1, #0
 802a540:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 802a544:	2b01      	cmp	r3, #1
 802a546:	dd05      	ble.n	802a554 <__s2b+0x34>
 802a548:	2201      	movs	r2, #1
 802a54a:	2100      	movs	r1, #0
 802a54c:	0052      	lsls	r2, r2, #1
 802a54e:	3101      	adds	r1, #1
 802a550:	4293      	cmp	r3, r2
 802a552:	dcfb      	bgt.n	802a54c <__s2b+0x2c>
 802a554:	4628      	mov	r0, r5
 802a556:	f7ff ff71 	bl	802a43c <_Balloc>
 802a55a:	9b08      	ldr	r3, [sp, #32]
 802a55c:	6143      	str	r3, [r0, #20]
 802a55e:	2301      	movs	r3, #1
 802a560:	2f09      	cmp	r7, #9
 802a562:	4601      	mov	r1, r0
 802a564:	6103      	str	r3, [r0, #16]
 802a566:	dd21      	ble.n	802a5ac <__s2b+0x8c>
 802a568:	f108 0909 	add.w	r9, r8, #9
 802a56c:	2409      	movs	r4, #9
 802a56e:	f818 3004 	ldrb.w	r3, [r8, r4]
 802a572:	220a      	movs	r2, #10
 802a574:	4628      	mov	r0, r5
 802a576:	3401      	adds	r4, #1
 802a578:	3b30      	subs	r3, #48	; 0x30
 802a57a:	f7ff ff8f 	bl	802a49c <__multadd>
 802a57e:	42bc      	cmp	r4, r7
 802a580:	4601      	mov	r1, r0
 802a582:	d1f4      	bne.n	802a56e <__s2b+0x4e>
 802a584:	eb09 0804 	add.w	r8, r9, r4
 802a588:	f1a8 0808 	sub.w	r8, r8, #8
 802a58c:	42a6      	cmp	r6, r4
 802a58e:	dd0a      	ble.n	802a5a6 <__s2b+0x86>
 802a590:	f818 3b01 	ldrb.w	r3, [r8], #1
 802a594:	220a      	movs	r2, #10
 802a596:	4628      	mov	r0, r5
 802a598:	3401      	adds	r4, #1
 802a59a:	3b30      	subs	r3, #48	; 0x30
 802a59c:	f7ff ff7e 	bl	802a49c <__multadd>
 802a5a0:	42b4      	cmp	r4, r6
 802a5a2:	4601      	mov	r1, r0
 802a5a4:	d1f4      	bne.n	802a590 <__s2b+0x70>
 802a5a6:	4608      	mov	r0, r1
 802a5a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a5ac:	f108 080a 	add.w	r8, r8, #10
 802a5b0:	2409      	movs	r4, #9
 802a5b2:	e7eb      	b.n	802a58c <__s2b+0x6c>

0802a5b4 <__hi0bits>:
 802a5b4:	4603      	mov	r3, r0
 802a5b6:	2000      	movs	r0, #0
 802a5b8:	0c1a      	lsrs	r2, r3, #16
 802a5ba:	d101      	bne.n	802a5c0 <__hi0bits+0xc>
 802a5bc:	041b      	lsls	r3, r3, #16
 802a5be:	2010      	movs	r0, #16
 802a5c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802a5c4:	d101      	bne.n	802a5ca <__hi0bits+0x16>
 802a5c6:	3008      	adds	r0, #8
 802a5c8:	021b      	lsls	r3, r3, #8
 802a5ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802a5ce:	d101      	bne.n	802a5d4 <__hi0bits+0x20>
 802a5d0:	3004      	adds	r0, #4
 802a5d2:	011b      	lsls	r3, r3, #4
 802a5d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 802a5d8:	d101      	bne.n	802a5de <__hi0bits+0x2a>
 802a5da:	3002      	adds	r0, #2
 802a5dc:	009b      	lsls	r3, r3, #2
 802a5de:	2b00      	cmp	r3, #0
 802a5e0:	db02      	blt.n	802a5e8 <__hi0bits+0x34>
 802a5e2:	005b      	lsls	r3, r3, #1
 802a5e4:	d401      	bmi.n	802a5ea <__hi0bits+0x36>
 802a5e6:	2020      	movs	r0, #32
 802a5e8:	4770      	bx	lr
 802a5ea:	3001      	adds	r0, #1
 802a5ec:	4770      	bx	lr
 802a5ee:	bf00      	nop

0802a5f0 <__lo0bits>:
 802a5f0:	6803      	ldr	r3, [r0, #0]
 802a5f2:	4602      	mov	r2, r0
 802a5f4:	f013 0007 	ands.w	r0, r3, #7
 802a5f8:	d007      	beq.n	802a60a <__lo0bits+0x1a>
 802a5fa:	07d9      	lsls	r1, r3, #31
 802a5fc:	d41f      	bmi.n	802a63e <__lo0bits+0x4e>
 802a5fe:	0798      	lsls	r0, r3, #30
 802a600:	d41f      	bmi.n	802a642 <__lo0bits+0x52>
 802a602:	089b      	lsrs	r3, r3, #2
 802a604:	2002      	movs	r0, #2
 802a606:	6013      	str	r3, [r2, #0]
 802a608:	4770      	bx	lr
 802a60a:	b299      	uxth	r1, r3
 802a60c:	b909      	cbnz	r1, 802a612 <__lo0bits+0x22>
 802a60e:	0c1b      	lsrs	r3, r3, #16
 802a610:	2010      	movs	r0, #16
 802a612:	f013 0fff 	tst.w	r3, #255	; 0xff
 802a616:	d101      	bne.n	802a61c <__lo0bits+0x2c>
 802a618:	3008      	adds	r0, #8
 802a61a:	0a1b      	lsrs	r3, r3, #8
 802a61c:	0719      	lsls	r1, r3, #28
 802a61e:	d101      	bne.n	802a624 <__lo0bits+0x34>
 802a620:	3004      	adds	r0, #4
 802a622:	091b      	lsrs	r3, r3, #4
 802a624:	0799      	lsls	r1, r3, #30
 802a626:	d101      	bne.n	802a62c <__lo0bits+0x3c>
 802a628:	3002      	adds	r0, #2
 802a62a:	089b      	lsrs	r3, r3, #2
 802a62c:	07d9      	lsls	r1, r3, #31
 802a62e:	d404      	bmi.n	802a63a <__lo0bits+0x4a>
 802a630:	085b      	lsrs	r3, r3, #1
 802a632:	d101      	bne.n	802a638 <__lo0bits+0x48>
 802a634:	2020      	movs	r0, #32
 802a636:	4770      	bx	lr
 802a638:	3001      	adds	r0, #1
 802a63a:	6013      	str	r3, [r2, #0]
 802a63c:	4770      	bx	lr
 802a63e:	2000      	movs	r0, #0
 802a640:	4770      	bx	lr
 802a642:	085b      	lsrs	r3, r3, #1
 802a644:	2001      	movs	r0, #1
 802a646:	6013      	str	r3, [r2, #0]
 802a648:	4770      	bx	lr
 802a64a:	bf00      	nop

0802a64c <__i2b>:
 802a64c:	b510      	push	{r4, lr}
 802a64e:	460c      	mov	r4, r1
 802a650:	2101      	movs	r1, #1
 802a652:	f7ff fef3 	bl	802a43c <_Balloc>
 802a656:	2301      	movs	r3, #1
 802a658:	6144      	str	r4, [r0, #20]
 802a65a:	6103      	str	r3, [r0, #16]
 802a65c:	bd10      	pop	{r4, pc}
 802a65e:	bf00      	nop

0802a660 <__multiply>:
 802a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a664:	460c      	mov	r4, r1
 802a666:	690d      	ldr	r5, [r1, #16]
 802a668:	b087      	sub	sp, #28
 802a66a:	6916      	ldr	r6, [r2, #16]
 802a66c:	4692      	mov	sl, r2
 802a66e:	42b5      	cmp	r5, r6
 802a670:	da04      	bge.n	802a67c <__multiply+0x1c>
 802a672:	462a      	mov	r2, r5
 802a674:	4654      	mov	r4, sl
 802a676:	4635      	mov	r5, r6
 802a678:	468a      	mov	sl, r1
 802a67a:	4616      	mov	r6, r2
 802a67c:	68a3      	ldr	r3, [r4, #8]
 802a67e:	eb05 0b06 	add.w	fp, r5, r6
 802a682:	6861      	ldr	r1, [r4, #4]
 802a684:	459b      	cmp	fp, r3
 802a686:	bfc8      	it	gt
 802a688:	3101      	addgt	r1, #1
 802a68a:	f7ff fed7 	bl	802a43c <_Balloc>
 802a68e:	f10b 0104 	add.w	r1, fp, #4
 802a692:	9105      	str	r1, [sp, #20]
 802a694:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 802a698:	f100 0914 	add.w	r9, r0, #20
 802a69c:	3304      	adds	r3, #4
 802a69e:	9003      	str	r0, [sp, #12]
 802a6a0:	4599      	cmp	r9, r3
 802a6a2:	9304      	str	r3, [sp, #16]
 802a6a4:	d206      	bcs.n	802a6b4 <__multiply+0x54>
 802a6a6:	9904      	ldr	r1, [sp, #16]
 802a6a8:	464b      	mov	r3, r9
 802a6aa:	2200      	movs	r2, #0
 802a6ac:	f843 2b04 	str.w	r2, [r3], #4
 802a6b0:	4299      	cmp	r1, r3
 802a6b2:	d8fb      	bhi.n	802a6ac <__multiply+0x4c>
 802a6b4:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 802a6b8:	f10a 0a14 	add.w	sl, sl, #20
 802a6bc:	3614      	adds	r6, #20
 802a6be:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 802a6c2:	3414      	adds	r4, #20
 802a6c4:	45b2      	cmp	sl, r6
 802a6c6:	9601      	str	r6, [sp, #4]
 802a6c8:	f105 0814 	add.w	r8, r5, #20
 802a6cc:	9402      	str	r4, [sp, #8]
 802a6ce:	d24a      	bcs.n	802a766 <__multiply+0x106>
 802a6d0:	f85a 5b04 	ldr.w	r5, [sl], #4
 802a6d4:	b2ac      	uxth	r4, r5
 802a6d6:	b1ec      	cbz	r4, 802a714 <__multiply+0xb4>
 802a6d8:	9a02      	ldr	r2, [sp, #8]
 802a6da:	464b      	mov	r3, r9
 802a6dc:	2500      	movs	r5, #0
 802a6de:	6818      	ldr	r0, [r3, #0]
 802a6e0:	461f      	mov	r7, r3
 802a6e2:	f852 1b04 	ldr.w	r1, [r2], #4
 802a6e6:	b286      	uxth	r6, r0
 802a6e8:	0c00      	lsrs	r0, r0, #16
 802a6ea:	1976      	adds	r6, r6, r5
 802a6ec:	fa1f fc81 	uxth.w	ip, r1
 802a6f0:	0c09      	lsrs	r1, r1, #16
 802a6f2:	fb04 660c 	mla	r6, r4, ip, r6
 802a6f6:	fb04 0001 	mla	r0, r4, r1, r0
 802a6fa:	eb00 4516 	add.w	r5, r0, r6, lsr #16
 802a6fe:	b2b6      	uxth	r6, r6
 802a700:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 802a704:	0c2d      	lsrs	r5, r5, #16
 802a706:	4590      	cmp	r8, r2
 802a708:	f843 6b04 	str.w	r6, [r3], #4
 802a70c:	d8e7      	bhi.n	802a6de <__multiply+0x7e>
 802a70e:	607d      	str	r5, [r7, #4]
 802a710:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 802a714:	0c2d      	lsrs	r5, r5, #16
 802a716:	d021      	beq.n	802a75c <__multiply+0xfc>
 802a718:	f8d9 1000 	ldr.w	r1, [r9]
 802a71c:	46cc      	mov	ip, r9
 802a71e:	9b02      	ldr	r3, [sp, #8]
 802a720:	464e      	mov	r6, r9
 802a722:	4608      	mov	r0, r1
 802a724:	2700      	movs	r7, #0
 802a726:	e000      	b.n	802a72a <__multiply+0xca>
 802a728:	4616      	mov	r6, r2
 802a72a:	881c      	ldrh	r4, [r3, #0]
 802a72c:	eb07 4710 	add.w	r7, r7, r0, lsr #16
 802a730:	4632      	mov	r2, r6
 802a732:	b289      	uxth	r1, r1
 802a734:	fb05 7704 	mla	r7, r5, r4, r7
 802a738:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 802a73c:	f842 1b04 	str.w	r1, [r2], #4
 802a740:	f853 1b04 	ldr.w	r1, [r3], #4
 802a744:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 802a748:	0c09      	lsrs	r1, r1, #16
 802a74a:	b284      	uxth	r4, r0
 802a74c:	fb05 4101 	mla	r1, r5, r1, r4
 802a750:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 802a754:	0c0f      	lsrs	r7, r1, #16
 802a756:	4598      	cmp	r8, r3
 802a758:	d8e6      	bhi.n	802a728 <__multiply+0xc8>
 802a75a:	6071      	str	r1, [r6, #4]
 802a75c:	9a01      	ldr	r2, [sp, #4]
 802a75e:	f109 0904 	add.w	r9, r9, #4
 802a762:	4552      	cmp	r2, sl
 802a764:	d8b4      	bhi.n	802a6d0 <__multiply+0x70>
 802a766:	f1bb 0f00 	cmp.w	fp, #0
 802a76a:	dd0e      	ble.n	802a78a <__multiply+0x12a>
 802a76c:	9905      	ldr	r1, [sp, #20]
 802a76e:	9a03      	ldr	r2, [sp, #12]
 802a770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a774:	b94b      	cbnz	r3, 802a78a <__multiply+0x12a>
 802a776:	9904      	ldr	r1, [sp, #16]
 802a778:	465a      	mov	r2, fp
 802a77a:	1f0b      	subs	r3, r1, #4
 802a77c:	e002      	b.n	802a784 <__multiply+0x124>
 802a77e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802a782:	b909      	cbnz	r1, 802a788 <__multiply+0x128>
 802a784:	3a01      	subs	r2, #1
 802a786:	d1fa      	bne.n	802a77e <__multiply+0x11e>
 802a788:	4693      	mov	fp, r2
 802a78a:	9a03      	ldr	r2, [sp, #12]
 802a78c:	4610      	mov	r0, r2
 802a78e:	f8c2 b010 	str.w	fp, [r2, #16]
 802a792:	b007      	add	sp, #28
 802a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a798 <__pow5mult>:
 802a798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a79c:	f012 0603 	ands.w	r6, r2, #3
 802a7a0:	4615      	mov	r5, r2
 802a7a2:	4604      	mov	r4, r0
 802a7a4:	4688      	mov	r8, r1
 802a7a6:	d12d      	bne.n	802a804 <__pow5mult+0x6c>
 802a7a8:	10ad      	asrs	r5, r5, #2
 802a7aa:	d01d      	beq.n	802a7e8 <__pow5mult+0x50>
 802a7ac:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 802a7ae:	b92f      	cbnz	r7, 802a7bc <__pow5mult+0x24>
 802a7b0:	e031      	b.n	802a816 <__pow5mult+0x7e>
 802a7b2:	106d      	asrs	r5, r5, #1
 802a7b4:	d018      	beq.n	802a7e8 <__pow5mult+0x50>
 802a7b6:	683e      	ldr	r6, [r7, #0]
 802a7b8:	b1ce      	cbz	r6, 802a7ee <__pow5mult+0x56>
 802a7ba:	4637      	mov	r7, r6
 802a7bc:	07e8      	lsls	r0, r5, #31
 802a7be:	d5f8      	bpl.n	802a7b2 <__pow5mult+0x1a>
 802a7c0:	4641      	mov	r1, r8
 802a7c2:	463a      	mov	r2, r7
 802a7c4:	4620      	mov	r0, r4
 802a7c6:	f7ff ff4b 	bl	802a660 <__multiply>
 802a7ca:	f1b8 0f00 	cmp.w	r8, #0
 802a7ce:	d017      	beq.n	802a800 <__pow5mult+0x68>
 802a7d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802a7d4:	106d      	asrs	r5, r5, #1
 802a7d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 802a7d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a7dc:	f8c8 1000 	str.w	r1, [r8]
 802a7e0:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 802a7e4:	4680      	mov	r8, r0
 802a7e6:	d1e6      	bne.n	802a7b6 <__pow5mult+0x1e>
 802a7e8:	4640      	mov	r0, r8
 802a7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a7ee:	4639      	mov	r1, r7
 802a7f0:	463a      	mov	r2, r7
 802a7f2:	4620      	mov	r0, r4
 802a7f4:	f7ff ff34 	bl	802a660 <__multiply>
 802a7f8:	6038      	str	r0, [r7, #0]
 802a7fa:	4607      	mov	r7, r0
 802a7fc:	6006      	str	r6, [r0, #0]
 802a7fe:	e7dd      	b.n	802a7bc <__pow5mult+0x24>
 802a800:	4680      	mov	r8, r0
 802a802:	e7d6      	b.n	802a7b2 <__pow5mult+0x1a>
 802a804:	4a09      	ldr	r2, [pc, #36]	; (802a82c <__pow5mult+0x94>)
 802a806:	3e01      	subs	r6, #1
 802a808:	2300      	movs	r3, #0
 802a80a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802a80e:	f7ff fe45 	bl	802a49c <__multadd>
 802a812:	4680      	mov	r8, r0
 802a814:	e7c8      	b.n	802a7a8 <__pow5mult+0x10>
 802a816:	4620      	mov	r0, r4
 802a818:	f240 2171 	movw	r1, #625	; 0x271
 802a81c:	f7ff ff16 	bl	802a64c <__i2b>
 802a820:	2300      	movs	r3, #0
 802a822:	64a0      	str	r0, [r4, #72]	; 0x48
 802a824:	4607      	mov	r7, r0
 802a826:	6003      	str	r3, [r0, #0]
 802a828:	e7c8      	b.n	802a7bc <__pow5mult+0x24>
 802a82a:	bf00      	nop
 802a82c:	0802e950 	.word	0x0802e950

0802a830 <__lshift>:
 802a830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a834:	4691      	mov	r9, r2
 802a836:	690a      	ldr	r2, [r1, #16]
 802a838:	460c      	mov	r4, r1
 802a83a:	ea4f 1769 	mov.w	r7, r9, asr #5
 802a83e:	688b      	ldr	r3, [r1, #8]
 802a840:	eb07 0b02 	add.w	fp, r7, r2
 802a844:	4606      	mov	r6, r0
 802a846:	f10b 0501 	add.w	r5, fp, #1
 802a84a:	6849      	ldr	r1, [r1, #4]
 802a84c:	429d      	cmp	r5, r3
 802a84e:	dd03      	ble.n	802a858 <__lshift+0x28>
 802a850:	005b      	lsls	r3, r3, #1
 802a852:	3101      	adds	r1, #1
 802a854:	429d      	cmp	r5, r3
 802a856:	dcfb      	bgt.n	802a850 <__lshift+0x20>
 802a858:	4630      	mov	r0, r6
 802a85a:	f7ff fdef 	bl	802a43c <_Balloc>
 802a85e:	2f00      	cmp	r7, #0
 802a860:	f100 0314 	add.w	r3, r0, #20
 802a864:	dd09      	ble.n	802a87a <__lshift+0x4a>
 802a866:	2200      	movs	r2, #0
 802a868:	4611      	mov	r1, r2
 802a86a:	3201      	adds	r2, #1
 802a86c:	f843 1b04 	str.w	r1, [r3], #4
 802a870:	42ba      	cmp	r2, r7
 802a872:	d1fa      	bne.n	802a86a <__lshift+0x3a>
 802a874:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 802a878:	3314      	adds	r3, #20
 802a87a:	6922      	ldr	r2, [r4, #16]
 802a87c:	f019 091f 	ands.w	r9, r9, #31
 802a880:	f104 0114 	add.w	r1, r4, #20
 802a884:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 802a888:	f10c 0c14 	add.w	ip, ip, #20
 802a88c:	d022      	beq.n	802a8d4 <__lshift+0xa4>
 802a88e:	f1c9 0a20 	rsb	sl, r9, #32
 802a892:	2200      	movs	r2, #0
 802a894:	e000      	b.n	802a898 <__lshift+0x68>
 802a896:	463b      	mov	r3, r7
 802a898:	f8d1 8000 	ldr.w	r8, [r1]
 802a89c:	461f      	mov	r7, r3
 802a89e:	fa08 f809 	lsl.w	r8, r8, r9
 802a8a2:	ea48 0202 	orr.w	r2, r8, r2
 802a8a6:	f847 2b04 	str.w	r2, [r7], #4
 802a8aa:	f851 2b04 	ldr.w	r2, [r1], #4
 802a8ae:	458c      	cmp	ip, r1
 802a8b0:	fa22 f20a 	lsr.w	r2, r2, sl
 802a8b4:	d8ef      	bhi.n	802a896 <__lshift+0x66>
 802a8b6:	605a      	str	r2, [r3, #4]
 802a8b8:	b10a      	cbz	r2, 802a8be <__lshift+0x8e>
 802a8ba:	f10b 0502 	add.w	r5, fp, #2
 802a8be:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 802a8c0:	3d01      	subs	r5, #1
 802a8c2:	6862      	ldr	r2, [r4, #4]
 802a8c4:	6105      	str	r5, [r0, #16]
 802a8c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a8ca:	6021      	str	r1, [r4, #0]
 802a8cc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802a8d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a8d4:	f851 2b04 	ldr.w	r2, [r1], #4
 802a8d8:	458c      	cmp	ip, r1
 802a8da:	f843 2b04 	str.w	r2, [r3], #4
 802a8de:	d9ee      	bls.n	802a8be <__lshift+0x8e>
 802a8e0:	f851 2b04 	ldr.w	r2, [r1], #4
 802a8e4:	458c      	cmp	ip, r1
 802a8e6:	f843 2b04 	str.w	r2, [r3], #4
 802a8ea:	d8f3      	bhi.n	802a8d4 <__lshift+0xa4>
 802a8ec:	e7e7      	b.n	802a8be <__lshift+0x8e>
 802a8ee:	bf00      	nop

0802a8f0 <__mcmp>:
 802a8f0:	4603      	mov	r3, r0
 802a8f2:	690a      	ldr	r2, [r1, #16]
 802a8f4:	6900      	ldr	r0, [r0, #16]
 802a8f6:	b430      	push	{r4, r5}
 802a8f8:	1a80      	subs	r0, r0, r2
 802a8fa:	d110      	bne.n	802a91e <__mcmp+0x2e>
 802a8fc:	3204      	adds	r2, #4
 802a8fe:	f103 0514 	add.w	r5, r3, #20
 802a902:	0092      	lsls	r2, r2, #2
 802a904:	189b      	adds	r3, r3, r2
 802a906:	1889      	adds	r1, r1, r2
 802a908:	3304      	adds	r3, #4
 802a90a:	3104      	adds	r1, #4
 802a90c:	f853 4c04 	ldr.w	r4, [r3, #-4]
 802a910:	3b04      	subs	r3, #4
 802a912:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802a916:	4294      	cmp	r4, r2
 802a918:	d103      	bne.n	802a922 <__mcmp+0x32>
 802a91a:	429d      	cmp	r5, r3
 802a91c:	d3f6      	bcc.n	802a90c <__mcmp+0x1c>
 802a91e:	bc30      	pop	{r4, r5}
 802a920:	4770      	bx	lr
 802a922:	bf38      	it	cc
 802a924:	f04f 30ff 	movcc.w	r0, #4294967295
 802a928:	d3f9      	bcc.n	802a91e <__mcmp+0x2e>
 802a92a:	2001      	movs	r0, #1
 802a92c:	e7f7      	b.n	802a91e <__mcmp+0x2e>
 802a92e:	bf00      	nop

0802a930 <__mdiff>:
 802a930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a934:	460c      	mov	r4, r1
 802a936:	4607      	mov	r7, r0
 802a938:	4611      	mov	r1, r2
 802a93a:	4620      	mov	r0, r4
 802a93c:	4615      	mov	r5, r2
 802a93e:	f7ff ffd7 	bl	802a8f0 <__mcmp>
 802a942:	2800      	cmp	r0, #0
 802a944:	4606      	mov	r6, r0
 802a946:	d05b      	beq.n	802aa00 <__mdiff+0xd0>
 802a948:	db55      	blt.n	802a9f6 <__mdiff+0xc6>
 802a94a:	2600      	movs	r6, #0
 802a94c:	6861      	ldr	r1, [r4, #4]
 802a94e:	4638      	mov	r0, r7
 802a950:	f7ff fd74 	bl	802a43c <_Balloc>
 802a954:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802a958:	692b      	ldr	r3, [r5, #16]
 802a95a:	f104 0c14 	add.w	ip, r4, #20
 802a95e:	f105 0914 	add.w	r9, r5, #20
 802a962:	2700      	movs	r7, #0
 802a964:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 802a968:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 802a96c:	3414      	adds	r4, #20
 802a96e:	3514      	adds	r5, #20
 802a970:	f100 0a14 	add.w	sl, r0, #20
 802a974:	60c6      	str	r6, [r0, #12]
 802a976:	f85c 6b04 	ldr.w	r6, [ip], #4
 802a97a:	4653      	mov	r3, sl
 802a97c:	f859 ab04 	ldr.w	sl, [r9], #4
 802a980:	4662      	mov	r2, ip
 802a982:	b2b1      	uxth	r1, r6
 802a984:	19c9      	adds	r1, r1, r7
 802a986:	fa1f fb8a 	uxth.w	fp, sl
 802a98a:	ebcb 0101 	rsb	r1, fp, r1
 802a98e:	ea4f 471a 	mov.w	r7, sl, lsr #16
 802a992:	ebc7 4716 	rsb	r7, r7, r6, lsr #16
 802a996:	eb07 4721 	add.w	r7, r7, r1, asr #16
 802a99a:	b289      	uxth	r1, r1
 802a99c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 802a9a0:	143f      	asrs	r7, r7, #16
 802a9a2:	454d      	cmp	r5, r9
 802a9a4:	f843 1b04 	str.w	r1, [r3], #4
 802a9a8:	469a      	mov	sl, r3
 802a9aa:	d8e4      	bhi.n	802a976 <__mdiff+0x46>
 802a9ac:	4564      	cmp	r4, ip
 802a9ae:	461e      	mov	r6, r3
 802a9b0:	d915      	bls.n	802a9de <__mdiff+0xae>
 802a9b2:	f852 5b04 	ldr.w	r5, [r2], #4
 802a9b6:	b2a9      	uxth	r1, r5
 802a9b8:	0c2d      	lsrs	r5, r5, #16
 802a9ba:	19cf      	adds	r7, r1, r7
 802a9bc:	eb05 4527 	add.w	r5, r5, r7, asr #16
 802a9c0:	b2bf      	uxth	r7, r7
 802a9c2:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 802a9c6:	142f      	asrs	r7, r5, #16
 802a9c8:	4294      	cmp	r4, r2
 802a9ca:	f843 1b04 	str.w	r1, [r3], #4
 802a9ce:	d8f0      	bhi.n	802a9b2 <__mdiff+0x82>
 802a9d0:	ea6f 030c 	mvn.w	r3, ip
 802a9d4:	191b      	adds	r3, r3, r4
 802a9d6:	f023 0303 	bic.w	r3, r3, #3
 802a9da:	3304      	adds	r3, #4
 802a9dc:	18f3      	adds	r3, r6, r3
 802a9de:	b931      	cbnz	r1, 802a9ee <__mdiff+0xbe>
 802a9e0:	3b04      	subs	r3, #4
 802a9e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802a9e6:	f108 38ff 	add.w	r8, r8, #4294967295
 802a9ea:	2a00      	cmp	r2, #0
 802a9ec:	d0f9      	beq.n	802a9e2 <__mdiff+0xb2>
 802a9ee:	f8c0 8010 	str.w	r8, [r0, #16]
 802a9f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a9f6:	4623      	mov	r3, r4
 802a9f8:	2601      	movs	r6, #1
 802a9fa:	462c      	mov	r4, r5
 802a9fc:	461d      	mov	r5, r3
 802a9fe:	e7a5      	b.n	802a94c <__mdiff+0x1c>
 802aa00:	4638      	mov	r0, r7
 802aa02:	4631      	mov	r1, r6
 802aa04:	f7ff fd1a 	bl	802a43c <_Balloc>
 802aa08:	2301      	movs	r3, #1
 802aa0a:	6146      	str	r6, [r0, #20]
 802aa0c:	6103      	str	r3, [r0, #16]
 802aa0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa12:	bf00      	nop

0802aa14 <__ulp>:
 802aa14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802aa18:	0d1b      	lsrs	r3, r3, #20
 802aa1a:	051b      	lsls	r3, r3, #20
 802aa1c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 802aa20:	2b00      	cmp	r3, #0
 802aa22:	dd02      	ble.n	802aa2a <__ulp+0x16>
 802aa24:	4619      	mov	r1, r3
 802aa26:	2000      	movs	r0, #0
 802aa28:	4770      	bx	lr
 802aa2a:	425b      	negs	r3, r3
 802aa2c:	2100      	movs	r1, #0
 802aa2e:	151b      	asrs	r3, r3, #20
 802aa30:	2b13      	cmp	r3, #19
 802aa32:	dd0b      	ble.n	802aa4c <__ulp+0x38>
 802aa34:	2b32      	cmp	r3, #50	; 0x32
 802aa36:	dd02      	ble.n	802aa3e <__ulp+0x2a>
 802aa38:	2301      	movs	r3, #1
 802aa3a:	4618      	mov	r0, r3
 802aa3c:	4770      	bx	lr
 802aa3e:	2201      	movs	r2, #1
 802aa40:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 802aa44:	fa12 f303 	lsls.w	r3, r2, r3
 802aa48:	4618      	mov	r0, r3
 802aa4a:	4770      	bx	lr
 802aa4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 802aa50:	2000      	movs	r0, #0
 802aa52:	fa52 f103 	asrs.w	r1, r2, r3
 802aa56:	4770      	bx	lr

0802aa58 <__b2d>:
 802aa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802aa5c:	f100 0614 	add.w	r6, r0, #20
 802aa60:	6904      	ldr	r4, [r0, #16]
 802aa62:	460f      	mov	r7, r1
 802aa64:	3404      	adds	r4, #4
 802aa66:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 802aa6a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802aa6e:	46a0      	mov	r8, r4
 802aa70:	4628      	mov	r0, r5
 802aa72:	f7ff fd9f 	bl	802a5b4 <__hi0bits>
 802aa76:	280a      	cmp	r0, #10
 802aa78:	f1c0 0320 	rsb	r3, r0, #32
 802aa7c:	603b      	str	r3, [r7, #0]
 802aa7e:	dc15      	bgt.n	802aaac <__b2d+0x54>
 802aa80:	f1c0 010b 	rsb	r1, r0, #11
 802aa84:	fa35 f701 	lsrs.w	r7, r5, r1
 802aa88:	42a6      	cmp	r6, r4
 802aa8a:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
 802aa8e:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
 802aa92:	d232      	bcs.n	802aafa <__b2d+0xa2>
 802aa94:	f854 4c04 	ldr.w	r4, [r4, #-4]
 802aa98:	fa34 f101 	lsrs.w	r1, r4, r1
 802aa9c:	3015      	adds	r0, #21
 802aa9e:	4085      	lsls	r5, r0
 802aaa0:	ea41 0205 	orr.w	r2, r1, r5
 802aaa4:	4610      	mov	r0, r2
 802aaa6:	4619      	mov	r1, r3
 802aaa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802aaac:	2100      	movs	r1, #0
 802aaae:	42a6      	cmp	r6, r4
 802aab0:	d202      	bcs.n	802aab8 <__b2d+0x60>
 802aab2:	f858 1c04 	ldr.w	r1, [r8, #-4]
 802aab6:	3c04      	subs	r4, #4
 802aab8:	f1b0 070b 	subs.w	r7, r0, #11
 802aabc:	bf02      	ittt	eq
 802aabe:	f045 557e 	orreq.w	r5, r5, #1065353216	; 0x3f800000
 802aac2:	460a      	moveq	r2, r1
 802aac4:	f445 03e0 	orreq.w	r3, r5, #7340032	; 0x700000
 802aac8:	d0ec      	beq.n	802aaa4 <__b2d+0x4c>
 802aaca:	40bd      	lsls	r5, r7
 802aacc:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 802aad0:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 802aad4:	42b4      	cmp	r4, r6
 802aad6:	fa21 fc00 	lsr.w	ip, r1, r0
 802aada:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 802aade:	ea45 030c 	orr.w	r3, r5, ip
 802aae2:	d90c      	bls.n	802aafe <__b2d+0xa6>
 802aae4:	f854 4c04 	ldr.w	r4, [r4, #-4]
 802aae8:	fa34 f000 	lsrs.w	r0, r4, r0
 802aaec:	40b9      	lsls	r1, r7
 802aaee:	ea40 0201 	orr.w	r2, r0, r1
 802aaf2:	4619      	mov	r1, r3
 802aaf4:	4610      	mov	r0, r2
 802aaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802aafa:	2100      	movs	r1, #0
 802aafc:	e7ce      	b.n	802aa9c <__b2d+0x44>
 802aafe:	2000      	movs	r0, #0
 802ab00:	e7f4      	b.n	802aaec <__b2d+0x94>
 802ab02:	bf00      	nop

0802ab04 <__d2b>:
 802ab04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802ab08:	b083      	sub	sp, #12
 802ab0a:	2101      	movs	r1, #1
 802ab0c:	461d      	mov	r5, r3
 802ab0e:	4614      	mov	r4, r2
 802ab10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802ab12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802ab14:	f7ff fc92 	bl	802a43c <_Balloc>
 802ab18:	f3c5 590a 	ubfx	r9, r5, #20, #11
 802ab1c:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 802ab20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802ab24:	9301      	str	r3, [sp, #4]
 802ab26:	4680      	mov	r8, r0
 802ab28:	f1b9 0f00 	cmp.w	r9, #0
 802ab2c:	d002      	beq.n	802ab34 <__d2b+0x30>
 802ab2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802ab32:	9301      	str	r3, [sp, #4]
 802ab34:	2c00      	cmp	r4, #0
 802ab36:	d026      	beq.n	802ab86 <__d2b+0x82>
 802ab38:	a802      	add	r0, sp, #8
 802ab3a:	f840 4d08 	str.w	r4, [r0, #-8]!
 802ab3e:	4668      	mov	r0, sp
 802ab40:	f7ff fd56 	bl	802a5f0 <__lo0bits>
 802ab44:	9b01      	ldr	r3, [sp, #4]
 802ab46:	2800      	cmp	r0, #0
 802ab48:	d135      	bne.n	802abb6 <__d2b+0xb2>
 802ab4a:	9a00      	ldr	r2, [sp, #0]
 802ab4c:	f8c8 2014 	str.w	r2, [r8, #20]
 802ab50:	2b00      	cmp	r3, #0
 802ab52:	bf0c      	ite	eq
 802ab54:	2401      	moveq	r4, #1
 802ab56:	2402      	movne	r4, #2
 802ab58:	f8c8 3018 	str.w	r3, [r8, #24]
 802ab5c:	f8c8 4010 	str.w	r4, [r8, #16]
 802ab60:	f1b9 0f00 	cmp.w	r9, #0
 802ab64:	d11d      	bne.n	802aba2 <__d2b+0x9e>
 802ab66:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 802ab6a:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
 802ab6e:	3802      	subs	r0, #2
 802ab70:	6038      	str	r0, [r7, #0]
 802ab72:	6918      	ldr	r0, [r3, #16]
 802ab74:	f7ff fd1e 	bl	802a5b4 <__hi0bits>
 802ab78:	ebc0 1444 	rsb	r4, r0, r4, lsl #5
 802ab7c:	6034      	str	r4, [r6, #0]
 802ab7e:	4640      	mov	r0, r8
 802ab80:	b003      	add	sp, #12
 802ab82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ab86:	a801      	add	r0, sp, #4
 802ab88:	f7ff fd32 	bl	802a5f0 <__lo0bits>
 802ab8c:	2301      	movs	r3, #1
 802ab8e:	461c      	mov	r4, r3
 802ab90:	f8c8 3010 	str.w	r3, [r8, #16]
 802ab94:	9b01      	ldr	r3, [sp, #4]
 802ab96:	f8c8 3014 	str.w	r3, [r8, #20]
 802ab9a:	3020      	adds	r0, #32
 802ab9c:	f1b9 0f00 	cmp.w	r9, #0
 802aba0:	d0e1      	beq.n	802ab66 <__d2b+0x62>
 802aba2:	f5a9 6986 	sub.w	r9, r9, #1072	; 0x430
 802aba6:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 802abaa:	f1a9 0903 	sub.w	r9, r9, #3
 802abae:	4448      	add	r0, r9
 802abb0:	6038      	str	r0, [r7, #0]
 802abb2:	6033      	str	r3, [r6, #0]
 802abb4:	e7e3      	b.n	802ab7e <__d2b+0x7a>
 802abb6:	f1c0 0220 	rsb	r2, r0, #32
 802abba:	9900      	ldr	r1, [sp, #0]
 802abbc:	fa13 f202 	lsls.w	r2, r3, r2
 802abc0:	40c3      	lsrs	r3, r0
 802abc2:	430a      	orrs	r2, r1
 802abc4:	9301      	str	r3, [sp, #4]
 802abc6:	f8c8 2014 	str.w	r2, [r8, #20]
 802abca:	e7c1      	b.n	802ab50 <__d2b+0x4c>

0802abcc <__ratio>:
 802abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802abd0:	b083      	sub	sp, #12
 802abd2:	460c      	mov	r4, r1
 802abd4:	4669      	mov	r1, sp
 802abd6:	4605      	mov	r5, r0
 802abd8:	f7ff ff3e 	bl	802aa58 <__b2d>
 802abdc:	460f      	mov	r7, r1
 802abde:	4606      	mov	r6, r0
 802abe0:	a901      	add	r1, sp, #4
 802abe2:	4620      	mov	r0, r4
 802abe4:	f7ff ff38 	bl	802aa58 <__b2d>
 802abe8:	46b9      	mov	r9, r7
 802abea:	46b0      	mov	r8, r6
 802abec:	460b      	mov	r3, r1
 802abee:	4602      	mov	r2, r0
 802abf0:	6929      	ldr	r1, [r5, #16]
 802abf2:	469b      	mov	fp, r3
 802abf4:	6920      	ldr	r0, [r4, #16]
 802abf6:	4692      	mov	sl, r2
 802abf8:	9c00      	ldr	r4, [sp, #0]
 802abfa:	1a09      	subs	r1, r1, r0
 802abfc:	9801      	ldr	r0, [sp, #4]
 802abfe:	1a20      	subs	r0, r4, r0
 802ac00:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 802ac04:	2900      	cmp	r1, #0
 802ac06:	bfc9      	itett	gt
 802ac08:	eb07 5901 	addgt.w	r9, r7, r1, lsl #20
 802ac0c:	eba3 5b01 	suble.w	fp, r3, r1, lsl #20
 802ac10:	4636      	movgt	r6, r6
 802ac12:	464f      	movgt	r7, r9
 802ac14:	bfdc      	itt	le
 802ac16:	4612      	movle	r2, r2
 802ac18:	465b      	movle	r3, fp
 802ac1a:	4630      	mov	r0, r6
 802ac1c:	4639      	mov	r1, r7
 802ac1e:	f001 fb1b 	bl	802c258 <__aeabi_ddiv>
 802ac22:	b003      	add	sp, #12
 802ac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802ac28 <_mprec_log10>:
 802ac28:	b510      	push	{r4, lr}
 802ac2a:	4604      	mov	r4, r0
 802ac2c:	2100      	movs	r1, #0
 802ac2e:	2000      	movs	r0, #0
 802ac30:	2c17      	cmp	r4, #23
 802ac32:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 802ac36:	dd08      	ble.n	802ac4a <_mprec_log10+0x22>
 802ac38:	2300      	movs	r3, #0
 802ac3a:	2200      	movs	r2, #0
 802ac3c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 802ac40:	f001 f9e0 	bl	802c004 <__aeabi_dmul>
 802ac44:	3c01      	subs	r4, #1
 802ac46:	d1f7      	bne.n	802ac38 <_mprec_log10+0x10>
 802ac48:	bd10      	pop	{r4, pc}
 802ac4a:	4b03      	ldr	r3, [pc, #12]	; (802ac58 <_mprec_log10+0x30>)
 802ac4c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802ac50:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 802ac54:	bd10      	pop	{r4, pc}
 802ac56:	bf00      	nop
 802ac58:	0802e950 	.word	0x0802e950

0802ac5c <__copybits>:
 802ac5c:	b470      	push	{r4, r5, r6}
 802ac5e:	3901      	subs	r1, #1
 802ac60:	6916      	ldr	r6, [r2, #16]
 802ac62:	f102 0314 	add.w	r3, r2, #20
 802ac66:	1149      	asrs	r1, r1, #5
 802ac68:	3101      	adds	r1, #1
 802ac6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802ac6e:	3614      	adds	r6, #20
 802ac70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802ac74:	42b3      	cmp	r3, r6
 802ac76:	d20c      	bcs.n	802ac92 <__copybits+0x36>
 802ac78:	4604      	mov	r4, r0
 802ac7a:	f853 5b04 	ldr.w	r5, [r3], #4
 802ac7e:	429e      	cmp	r6, r3
 802ac80:	f844 5b04 	str.w	r5, [r4], #4
 802ac84:	d8f9      	bhi.n	802ac7a <__copybits+0x1e>
 802ac86:	1ab3      	subs	r3, r6, r2
 802ac88:	3b15      	subs	r3, #21
 802ac8a:	f023 0303 	bic.w	r3, r3, #3
 802ac8e:	3304      	adds	r3, #4
 802ac90:	18c0      	adds	r0, r0, r3
 802ac92:	4281      	cmp	r1, r0
 802ac94:	d904      	bls.n	802aca0 <__copybits+0x44>
 802ac96:	2300      	movs	r3, #0
 802ac98:	f840 3b04 	str.w	r3, [r0], #4
 802ac9c:	4281      	cmp	r1, r0
 802ac9e:	d8fb      	bhi.n	802ac98 <__copybits+0x3c>
 802aca0:	bc70      	pop	{r4, r5, r6}
 802aca2:	4770      	bx	lr

0802aca4 <__any_on>:
 802aca4:	6902      	ldr	r2, [r0, #16]
 802aca6:	114b      	asrs	r3, r1, #5
 802aca8:	b410      	push	{r4}
 802acaa:	429a      	cmp	r2, r3
 802acac:	db01      	blt.n	802acb2 <__any_on+0xe>
 802acae:	461a      	mov	r2, r3
 802acb0:	dc18      	bgt.n	802ace4 <__any_on+0x40>
 802acb2:	3204      	adds	r2, #4
 802acb4:	f100 0114 	add.w	r1, r0, #20
 802acb8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 802acbc:	1d1c      	adds	r4, r3, #4
 802acbe:	42a1      	cmp	r1, r4
 802acc0:	d21d      	bcs.n	802acfe <__any_on+0x5a>
 802acc2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 802acc6:	b952      	cbnz	r2, 802acde <__any_on+0x3a>
 802acc8:	1a59      	subs	r1, r3, r1
 802acca:	3103      	adds	r1, #3
 802accc:	f021 0103 	bic.w	r1, r1, #3
 802acd0:	1a59      	subs	r1, r3, r1
 802acd2:	428b      	cmp	r3, r1
 802acd4:	d013      	beq.n	802acfe <__any_on+0x5a>
 802acd6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802acda:	2a00      	cmp	r2, #0
 802acdc:	d0f9      	beq.n	802acd2 <__any_on+0x2e>
 802acde:	2001      	movs	r0, #1
 802ace0:	bc10      	pop	{r4}
 802ace2:	4770      	bx	lr
 802ace4:	f011 011f 	ands.w	r1, r1, #31
 802ace8:	d0e3      	beq.n	802acb2 <__any_on+0xe>
 802acea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802acee:	695b      	ldr	r3, [r3, #20]
 802acf0:	fa33 f401 	lsrs.w	r4, r3, r1
 802acf4:	fa14 f101 	lsls.w	r1, r4, r1
 802acf8:	4299      	cmp	r1, r3
 802acfa:	d1f0      	bne.n	802acde <__any_on+0x3a>
 802acfc:	e7d9      	b.n	802acb2 <__any_on+0xe>
 802acfe:	2000      	movs	r0, #0
 802ad00:	e7ee      	b.n	802ace0 <__any_on+0x3c>
 802ad02:	bf00      	nop

0802ad04 <__fpclassifyd>:
 802ad04:	ea50 0201 	orrs.w	r2, r0, r1
 802ad08:	460b      	mov	r3, r1
 802ad0a:	b410      	push	{r4}
 802ad0c:	d102      	bne.n	802ad14 <__fpclassifyd+0x10>
 802ad0e:	2002      	movs	r0, #2
 802ad10:	bc10      	pop	{r4}
 802ad12:	4770      	bx	lr
 802ad14:	f1d0 0001 	rsbs	r0, r0, #1
 802ad18:	bf38      	it	cc
 802ad1a:	2000      	movcc	r0, #0
 802ad1c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 802ad20:	bf14      	ite	ne
 802ad22:	2200      	movne	r2, #0
 802ad24:	f000 0201 	andeq.w	r2, r0, #1
 802ad28:	2a00      	cmp	r2, #0
 802ad2a:	d1f0      	bne.n	802ad0e <__fpclassifyd+0xa>
 802ad2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802ad30:	f101 44fe 	add.w	r4, r1, #2130706432	; 0x7f000000
 802ad34:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 802ad38:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802ad3c:	4291      	cmp	r1, r2
 802ad3e:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
 802ad42:	bf8c      	ite	hi
 802ad44:	2100      	movhi	r1, #0
 802ad46:	2101      	movls	r1, #1
 802ad48:	4294      	cmp	r4, r2
 802ad4a:	bf8c      	ite	hi
 802ad4c:	460a      	movhi	r2, r1
 802ad4e:	f041 0201 	orrls.w	r2, r1, #1
 802ad52:	b10a      	cbz	r2, 802ad58 <__fpclassifyd+0x54>
 802ad54:	2004      	movs	r0, #4
 802ad56:	e7db      	b.n	802ad10 <__fpclassifyd+0xc>
 802ad58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802ad5c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802ad60:	bf2c      	ite	cs
 802ad62:	2200      	movcs	r2, #0
 802ad64:	2201      	movcc	r2, #1
 802ad66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802ad6a:	bf38      	it	cc
 802ad6c:	f042 0201 	orrcc.w	r2, r2, #1
 802ad70:	b10a      	cbz	r2, 802ad76 <__fpclassifyd+0x72>
 802ad72:	2003      	movs	r0, #3
 802ad74:	e7cc      	b.n	802ad10 <__fpclassifyd+0xc>
 802ad76:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 802ad7a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 802ad7e:	bf14      	ite	ne
 802ad80:	2100      	movne	r1, #0
 802ad82:	2101      	moveq	r1, #1
 802ad84:	4293      	cmp	r3, r2
 802ad86:	bf14      	ite	ne
 802ad88:	460b      	movne	r3, r1
 802ad8a:	f041 0301 	orreq.w	r3, r1, #1
 802ad8e:	4018      	ands	r0, r3
 802ad90:	e7be      	b.n	802ad10 <__fpclassifyd+0xc>
 802ad92:	bf00      	nop

0802ad94 <__sread>:
 802ad94:	b510      	push	{r4, lr}
 802ad96:	460c      	mov	r4, r1
 802ad98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ad9c:	f7f3 fa18 	bl	801e1d0 <_read_r>
 802ada0:	2800      	cmp	r0, #0
 802ada2:	bfab      	itete	ge
 802ada4:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 802ada6:	89a3      	ldrhlt	r3, [r4, #12]
 802ada8:	181b      	addge	r3, r3, r0
 802adaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802adae:	bfac      	ite	ge
 802adb0:	6523      	strge	r3, [r4, #80]	; 0x50
 802adb2:	81a3      	strhlt	r3, [r4, #12]
 802adb4:	bd10      	pop	{r4, pc}
 802adb6:	bf00      	nop

0802adb8 <__seofread>:
 802adb8:	2000      	movs	r0, #0
 802adba:	4770      	bx	lr

0802adbc <__swrite>:
 802adbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802adc0:	461e      	mov	r6, r3
 802adc2:	898b      	ldrh	r3, [r1, #12]
 802adc4:	4617      	mov	r7, r2
 802adc6:	460c      	mov	r4, r1
 802adc8:	4605      	mov	r5, r0
 802adca:	05da      	lsls	r2, r3, #23
 802adcc:	d506      	bpl.n	802addc <__swrite+0x20>
 802adce:	2302      	movs	r3, #2
 802add0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802add4:	2200      	movs	r2, #0
 802add6:	f7f3 fa1b 	bl	801e210 <_lseek_r>
 802adda:	89a3      	ldrh	r3, [r4, #12]
 802addc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ade0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ade4:	81a3      	strh	r3, [r4, #12]
 802ade6:	4628      	mov	r0, r5
 802ade8:	463a      	mov	r2, r7
 802adea:	4633      	mov	r3, r6
 802adec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802adf0:	f7f3 b9fe 	b.w	801e1f0 <_write_r>

0802adf4 <__sseek>:
 802adf4:	b510      	push	{r4, lr}
 802adf6:	460c      	mov	r4, r1
 802adf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802adfc:	f7f3 fa08 	bl	801e210 <_lseek_r>
 802ae00:	89a3      	ldrh	r3, [r4, #12]
 802ae02:	1c41      	adds	r1, r0, #1
 802ae04:	bf15      	itete	ne
 802ae06:	6520      	strne	r0, [r4, #80]	; 0x50
 802ae08:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ae0c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ae10:	81a3      	strheq	r3, [r4, #12]
 802ae12:	bf18      	it	ne
 802ae14:	81a3      	strhne	r3, [r4, #12]
 802ae16:	bd10      	pop	{r4, pc}

0802ae18 <__sclose>:
 802ae18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ae1c:	f7f3 ba0c 	b.w	801e238 <_close_r>

0802ae20 <__ssprint_r>:
 802ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ae24:	b085      	sub	sp, #20
 802ae26:	6894      	ldr	r4, [r2, #8]
 802ae28:	4691      	mov	r9, r2
 802ae2a:	9003      	str	r0, [sp, #12]
 802ae2c:	460d      	mov	r5, r1
 802ae2e:	6817      	ldr	r7, [r2, #0]
 802ae30:	2c00      	cmp	r4, #0
 802ae32:	d07a      	beq.n	802af2a <__ssprint_r+0x10a>
 802ae34:	f04f 0a00 	mov.w	sl, #0
 802ae38:	6808      	ldr	r0, [r1, #0]
 802ae3a:	688b      	ldr	r3, [r1, #8]
 802ae3c:	4654      	mov	r4, sl
 802ae3e:	2c00      	cmp	r4, #0
 802ae40:	d054      	beq.n	802aeec <__ssprint_r+0xcc>
 802ae42:	429c      	cmp	r4, r3
 802ae44:	461e      	mov	r6, r3
 802ae46:	4698      	mov	r8, r3
 802ae48:	bf3c      	itt	cc
 802ae4a:	4626      	movcc	r6, r4
 802ae4c:	46a0      	movcc	r8, r4
 802ae4e:	d33d      	bcc.n	802aecc <__ssprint_r+0xac>
 802ae50:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 802ae54:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 802ae58:	d038      	beq.n	802aecc <__ssprint_r+0xac>
 802ae5a:	696b      	ldr	r3, [r5, #20]
 802ae5c:	1c62      	adds	r2, r4, #1
 802ae5e:	6929      	ldr	r1, [r5, #16]
 802ae60:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 802ae64:	1a43      	subs	r3, r0, r1
 802ae66:	18d0      	adds	r0, r2, r3
 802ae68:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 802ae6c:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 802ae70:	4583      	cmp	fp, r0
 802ae72:	465a      	mov	r2, fp
 802ae74:	bf38      	it	cc
 802ae76:	4683      	movcc	fp, r0
 802ae78:	9803      	ldr	r0, [sp, #12]
 802ae7a:	bf38      	it	cc
 802ae7c:	465a      	movcc	r2, fp
 802ae7e:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 802ae82:	d038      	beq.n	802aef6 <__ssprint_r+0xd6>
 802ae84:	4611      	mov	r1, r2
 802ae86:	9301      	str	r3, [sp, #4]
 802ae88:	f7fa fc52 	bl	8025730 <_malloc_r>
 802ae8c:	9b01      	ldr	r3, [sp, #4]
 802ae8e:	4684      	mov	ip, r0
 802ae90:	2800      	cmp	r0, #0
 802ae92:	d03b      	beq.n	802af0c <__ssprint_r+0xec>
 802ae94:	6929      	ldr	r1, [r5, #16]
 802ae96:	461a      	mov	r2, r3
 802ae98:	9301      	str	r3, [sp, #4]
 802ae9a:	f8cd c008 	str.w	ip, [sp, #8]
 802ae9e:	f7fa ff6d 	bl	8025d7c <memcpy>
 802aea2:	89aa      	ldrh	r2, [r5, #12]
 802aea4:	9b01      	ldr	r3, [sp, #4]
 802aea6:	f8dd c008 	ldr.w	ip, [sp, #8]
 802aeaa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 802aeae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802aeb2:	81aa      	strh	r2, [r5, #12]
 802aeb4:	4626      	mov	r6, r4
 802aeb6:	46a0      	mov	r8, r4
 802aeb8:	eb0c 0003 	add.w	r0, ip, r3
 802aebc:	f8c5 c010 	str.w	ip, [r5, #16]
 802aec0:	ebc3 030b 	rsb	r3, r3, fp
 802aec4:	6028      	str	r0, [r5, #0]
 802aec6:	f8c5 b014 	str.w	fp, [r5, #20]
 802aeca:	60ab      	str	r3, [r5, #8]
 802aecc:	4642      	mov	r2, r8
 802aece:	4651      	mov	r1, sl
 802aed0:	f7fa ff96 	bl	8025e00 <memmove>
 802aed4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 802aed8:	68ab      	ldr	r3, [r5, #8]
 802aeda:	6828      	ldr	r0, [r5, #0]
 802aedc:	1b14      	subs	r4, r2, r4
 802aede:	1b9b      	subs	r3, r3, r6
 802aee0:	60ab      	str	r3, [r5, #8]
 802aee2:	4440      	add	r0, r8
 802aee4:	6028      	str	r0, [r5, #0]
 802aee6:	f8c9 4008 	str.w	r4, [r9, #8]
 802aeea:	b1f4      	cbz	r4, 802af2a <__ssprint_r+0x10a>
 802aeec:	f8d7 a000 	ldr.w	sl, [r7]
 802aef0:	687c      	ldr	r4, [r7, #4]
 802aef2:	3708      	adds	r7, #8
 802aef4:	e7a3      	b.n	802ae3e <__ssprint_r+0x1e>
 802aef6:	9301      	str	r3, [sp, #4]
 802aef8:	f7fb f89e 	bl	8026038 <_realloc_r>
 802aefc:	9b01      	ldr	r3, [sp, #4]
 802aefe:	4684      	mov	ip, r0
 802af00:	2800      	cmp	r0, #0
 802af02:	d1d7      	bne.n	802aeb4 <__ssprint_r+0x94>
 802af04:	6929      	ldr	r1, [r5, #16]
 802af06:	9803      	ldr	r0, [sp, #12]
 802af08:	f7ff f8d0 	bl	802a0ac <_free_r>
 802af0c:	9a03      	ldr	r2, [sp, #12]
 802af0e:	230c      	movs	r3, #12
 802af10:	f04f 30ff 	mov.w	r0, #4294967295
 802af14:	6013      	str	r3, [r2, #0]
 802af16:	2300      	movs	r3, #0
 802af18:	89aa      	ldrh	r2, [r5, #12]
 802af1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802af1e:	81aa      	strh	r2, [r5, #12]
 802af20:	f8c9 3008 	str.w	r3, [r9, #8]
 802af24:	f8c9 3004 	str.w	r3, [r9, #4]
 802af28:	e002      	b.n	802af30 <__ssprint_r+0x110>
 802af2a:	4620      	mov	r0, r4
 802af2c:	f8c9 4004 	str.w	r4, [r9, #4]
 802af30:	b005      	add	sp, #20
 802af32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af36:	bf00      	nop

0802af38 <_svfiprintf_r>:
 802af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af3c:	b0af      	sub	sp, #188	; 0xbc
 802af3e:	468a      	mov	sl, r1
 802af40:	9307      	str	r3, [sp, #28]
 802af42:	898b      	ldrh	r3, [r1, #12]
 802af44:	9003      	str	r0, [sp, #12]
 802af46:	061b      	lsls	r3, r3, #24
 802af48:	d503      	bpl.n	802af52 <_svfiprintf_r+0x1a>
 802af4a:	690b      	ldr	r3, [r1, #16]
 802af4c:	2b00      	cmp	r3, #0
 802af4e:	f000 8435 	beq.w	802b7bc <_svfiprintf_r+0x884>
 802af52:	4617      	mov	r7, r2
 802af54:	f10d 01a7 	add.w	r1, sp, #167	; 0xa7
 802af58:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 802af5c:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 802af60:	2300      	movs	r3, #0
 802af62:	9102      	str	r1, [sp, #8]
 802af64:	ac10      	add	r4, sp, #64	; 0x40
 802af66:	ebc1 0108 	rsb	r1, r1, r8
 802af6a:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
 802af6e:	930d      	str	r3, [sp, #52]	; 0x34
 802af70:	9306      	str	r3, [sp, #24]
 802af72:	910f      	str	r1, [sp, #60]	; 0x3c
 802af74:	900e      	str	r0, [sp, #56]	; 0x38
 802af76:	942a      	str	r4, [sp, #168]	; 0xa8
 802af78:	932c      	str	r3, [sp, #176]	; 0xb0
 802af7a:	932b      	str	r3, [sp, #172]	; 0xac
 802af7c:	783b      	ldrb	r3, [r7, #0]
 802af7e:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 802af82:	bf18      	it	ne
 802af84:	2201      	movne	r2, #1
 802af86:	2b00      	cmp	r3, #0
 802af88:	bf0c      	ite	eq
 802af8a:	2300      	moveq	r3, #0
 802af8c:	f002 0301 	andne.w	r3, r2, #1
 802af90:	2b00      	cmp	r3, #0
 802af92:	f000 82ef 	beq.w	802b574 <_svfiprintf_r+0x63c>
 802af96:	463a      	mov	r2, r7
 802af98:	463d      	mov	r5, r7
 802af9a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802af9e:	3501      	adds	r5, #1
 802afa0:	1c19      	adds	r1, r3, #0
 802afa2:	bf18      	it	ne
 802afa4:	2101      	movne	r1, #1
 802afa6:	2b25      	cmp	r3, #37	; 0x25
 802afa8:	bf0c      	ite	eq
 802afaa:	2300      	moveq	r3, #0
 802afac:	f001 0301 	andne.w	r3, r1, #1
 802afb0:	2b00      	cmp	r3, #0
 802afb2:	d1f2      	bne.n	802af9a <_svfiprintf_r+0x62>
 802afb4:	1bee      	subs	r6, r5, r7
 802afb6:	d00e      	beq.n	802afd6 <_svfiprintf_r+0x9e>
 802afb8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802afba:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802afbc:	3301      	adds	r3, #1
 802afbe:	6027      	str	r7, [r4, #0]
 802afc0:	2b07      	cmp	r3, #7
 802afc2:	4432      	add	r2, r6
 802afc4:	6066      	str	r6, [r4, #4]
 802afc6:	932b      	str	r3, [sp, #172]	; 0xac
 802afc8:	922c      	str	r2, [sp, #176]	; 0xb0
 802afca:	f300 8330 	bgt.w	802b62e <_svfiprintf_r+0x6f6>
 802afce:	3408      	adds	r4, #8
 802afd0:	9b06      	ldr	r3, [sp, #24]
 802afd2:	199b      	adds	r3, r3, r6
 802afd4:	9306      	str	r3, [sp, #24]
 802afd6:	782b      	ldrb	r3, [r5, #0]
 802afd8:	2b00      	cmp	r3, #0
 802afda:	f000 82cd 	beq.w	802b578 <_svfiprintf_r+0x640>
 802afde:	2300      	movs	r3, #0
 802afe0:	1c6f      	adds	r7, r5, #1
 802afe2:	461a      	mov	r2, r3
 802afe4:	f04f 35ff 	mov.w	r5, #4294967295
 802afe8:	469b      	mov	fp, r3
 802afea:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 802afee:	9308      	str	r3, [sp, #32]
 802aff0:	f817 3b01 	ldrb.w	r3, [r7], #1
 802aff4:	f1a3 0120 	sub.w	r1, r3, #32
 802aff8:	2958      	cmp	r1, #88	; 0x58
 802affa:	f200 81a1 	bhi.w	802b340 <_svfiprintf_r+0x408>
 802affe:	e8df f011 	tbh	[pc, r1, lsl #1]
 802b002:	019b      	.short	0x019b
 802b004:	019f019f 	.word	0x019f019f
 802b008:	019f01fe 	.word	0x019f01fe
 802b00c:	019f019f 	.word	0x019f019f
 802b010:	019f019f 	.word	0x019f019f
 802b014:	00f0019f 	.word	0x00f0019f
 802b018:	019f01fc 	.word	0x019f01fc
 802b01c:	01e100fc 	.word	0x01e100fc
 802b020:	01de019f 	.word	0x01de019f
 802b024:	01cd01cd 	.word	0x01cd01cd
 802b028:	01cd01cd 	.word	0x01cd01cd
 802b02c:	01cd01cd 	.word	0x01cd01cd
 802b030:	01cd01cd 	.word	0x01cd01cd
 802b034:	019f01cd 	.word	0x019f01cd
 802b038:	019f019f 	.word	0x019f019f
 802b03c:	019f019f 	.word	0x019f019f
 802b040:	019f019f 	.word	0x019f019f
 802b044:	019f019f 	.word	0x019f019f
 802b048:	005c019f 	.word	0x005c019f
 802b04c:	019f019f 	.word	0x019f019f
 802b050:	019f019f 	.word	0x019f019f
 802b054:	019f019f 	.word	0x019f019f
 802b058:	019f019f 	.word	0x019f019f
 802b05c:	019f019f 	.word	0x019f019f
 802b060:	019f009c 	.word	0x019f009c
 802b064:	019f019f 	.word	0x019f019f
 802b068:	019f019f 	.word	0x019f019f
 802b06c:	019f00dd 	.word	0x019f00dd
 802b070:	0152019f 	.word	0x0152019f
 802b074:	019f019f 	.word	0x019f019f
 802b078:	019f019f 	.word	0x019f019f
 802b07c:	019f019f 	.word	0x019f019f
 802b080:	019f019f 	.word	0x019f019f
 802b084:	019f019f 	.word	0x019f019f
 802b088:	005e0102 	.word	0x005e0102
 802b08c:	019f019f 	.word	0x019f019f
 802b090:	00ff019f 	.word	0x00ff019f
 802b094:	019f005e 	.word	0x019f005e
 802b098:	0059019f 	.word	0x0059019f
 802b09c:	0172019f 	.word	0x0172019f
 802b0a0:	0188009e 	.word	0x0188009e
 802b0a4:	019f0059 	.word	0x019f0059
 802b0a8:	019f01af 	.word	0x019f01af
 802b0ac:	019f00df 	.word	0x019f00df
 802b0b0:	0183019f 	.word	0x0183019f
 802b0b4:	f04b 0b10 	orr.w	fp, fp, #16
 802b0b8:	e79a      	b.n	802aff0 <_svfiprintf_r+0xb8>
 802b0ba:	f04b 0b10 	orr.w	fp, fp, #16
 802b0be:	f01b 0f10 	tst.w	fp, #16
 802b0c2:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 802b0c6:	9b07      	ldr	r3, [sp, #28]
 802b0c8:	d103      	bne.n	802b0d2 <_svfiprintf_r+0x19a>
 802b0ca:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802b0ce:	f040 8339 	bne.w	802b744 <_svfiprintf_r+0x80c>
 802b0d2:	681a      	ldr	r2, [r3, #0]
 802b0d4:	3304      	adds	r3, #4
 802b0d6:	9307      	str	r3, [sp, #28]
 802b0d8:	2a00      	cmp	r2, #0
 802b0da:	f2c0 833a 	blt.w	802b752 <_svfiprintf_r+0x81a>
 802b0de:	bf0c      	ite	eq
 802b0e0:	2100      	moveq	r1, #0
 802b0e2:	2101      	movne	r1, #1
 802b0e4:	2301      	movs	r3, #1
 802b0e6:	2d00      	cmp	r5, #0
 802b0e8:	bfa8      	it	ge
 802b0ea:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 802b0ee:	2d00      	cmp	r5, #0
 802b0f0:	bf18      	it	ne
 802b0f2:	f041 0101 	orrne.w	r1, r1, #1
 802b0f6:	2900      	cmp	r1, #0
 802b0f8:	d13b      	bne.n	802b172 <_svfiprintf_r+0x23a>
 802b0fa:	2b00      	cmp	r3, #0
 802b0fc:	f040 8293 	bne.w	802b626 <_svfiprintf_r+0x6ee>
 802b100:	f01b 0f01 	tst.w	fp, #1
 802b104:	bf04      	itt	eq
 802b106:	9305      	streq	r3, [sp, #20]
 802b108:	f8cd 8028 	streq.w	r8, [sp, #40]	; 0x28
 802b10c:	d007      	beq.n	802b11e <_svfiprintf_r+0x1e6>
 802b10e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b110:	9305      	str	r3, [sp, #20]
 802b112:	2330      	movs	r3, #48	; 0x30
 802b114:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 802b118:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 802b11c:	930a      	str	r3, [sp, #40]	; 0x28
 802b11e:	9509      	str	r5, [sp, #36]	; 0x24
 802b120:	9805      	ldr	r0, [sp, #20]
 802b122:	9909      	ldr	r1, [sp, #36]	; 0x24
 802b124:	f89d 30b7 	ldrb.w	r3, [sp, #183]	; 0xb7
 802b128:	4288      	cmp	r0, r1
 802b12a:	bfb8      	it	lt
 802b12c:	4608      	movlt	r0, r1
 802b12e:	9004      	str	r0, [sp, #16]
 802b130:	2b00      	cmp	r3, #0
 802b132:	d078      	beq.n	802b226 <_svfiprintf_r+0x2ee>
 802b134:	3001      	adds	r0, #1
 802b136:	9004      	str	r0, [sp, #16]
 802b138:	e075      	b.n	802b226 <_svfiprintf_r+0x2ee>
 802b13a:	f04b 0b10 	orr.w	fp, fp, #16
 802b13e:	f01b 0310 	ands.w	r3, fp, #16
 802b142:	f000 82c9 	beq.w	802b6d8 <_svfiprintf_r+0x7a0>
 802b146:	9b07      	ldr	r3, [sp, #28]
 802b148:	9807      	ldr	r0, [sp, #28]
 802b14a:	681a      	ldr	r2, [r3, #0]
 802b14c:	2300      	movs	r3, #0
 802b14e:	3004      	adds	r0, #4
 802b150:	9007      	str	r0, [sp, #28]
 802b152:	1ad1      	subs	r1, r2, r3
 802b154:	bf18      	it	ne
 802b156:	2101      	movne	r1, #1
 802b158:	2000      	movs	r0, #0
 802b15a:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 802b15e:	2d00      	cmp	r5, #0
 802b160:	bfa8      	it	ge
 802b162:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 802b166:	2d00      	cmp	r5, #0
 802b168:	bf18      	it	ne
 802b16a:	f041 0101 	orrne.w	r1, r1, #1
 802b16e:	2900      	cmp	r1, #0
 802b170:	d0c3      	beq.n	802b0fa <_svfiprintf_r+0x1c2>
 802b172:	2b01      	cmp	r3, #1
 802b174:	f000 8285 	beq.w	802b682 <_svfiprintf_r+0x74a>
 802b178:	2b02      	cmp	r3, #2
 802b17a:	bf18      	it	ne
 802b17c:	4643      	movne	r3, r8
 802b17e:	d101      	bne.n	802b184 <_svfiprintf_r+0x24c>
 802b180:	e298      	b.n	802b6b4 <_svfiprintf_r+0x77c>
 802b182:	4603      	mov	r3, r0
 802b184:	f002 0107 	and.w	r1, r2, #7
 802b188:	1e58      	subs	r0, r3, #1
 802b18a:	3130      	adds	r1, #48	; 0x30
 802b18c:	08d2      	lsrs	r2, r2, #3
 802b18e:	f803 1c01 	strb.w	r1, [r3, #-1]
 802b192:	d1f6      	bne.n	802b182 <_svfiprintf_r+0x24a>
 802b194:	f01b 0f01 	tst.w	fp, #1
 802b198:	900a      	str	r0, [sp, #40]	; 0x28
 802b19a:	bf04      	itt	eq
 802b19c:	ebc0 0308 	rsbeq	r3, r0, r8
 802b1a0:	9305      	streq	r3, [sp, #20]
 802b1a2:	d0bc      	beq.n	802b11e <_svfiprintf_r+0x1e6>
 802b1a4:	2930      	cmp	r1, #48	; 0x30
 802b1a6:	f000 831b 	beq.w	802b7e0 <_svfiprintf_r+0x8a8>
 802b1aa:	1e98      	subs	r0, r3, #2
 802b1ac:	2230      	movs	r2, #48	; 0x30
 802b1ae:	ebc0 0108 	rsb	r1, r0, r8
 802b1b2:	900a      	str	r0, [sp, #40]	; 0x28
 802b1b4:	9105      	str	r1, [sp, #20]
 802b1b6:	f803 2c02 	strb.w	r2, [r3, #-2]
 802b1ba:	e7b0      	b.n	802b11e <_svfiprintf_r+0x1e6>
 802b1bc:	f04b 0b10 	orr.w	fp, fp, #16
 802b1c0:	f01b 0f10 	tst.w	fp, #16
 802b1c4:	9b07      	ldr	r3, [sp, #28]
 802b1c6:	d103      	bne.n	802b1d0 <_svfiprintf_r+0x298>
 802b1c8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802b1cc:	f040 82da 	bne.w	802b784 <_svfiprintf_r+0x84c>
 802b1d0:	681a      	ldr	r2, [r3, #0]
 802b1d2:	2301      	movs	r3, #1
 802b1d4:	9807      	ldr	r0, [sp, #28]
 802b1d6:	3004      	adds	r0, #4
 802b1d8:	1c11      	adds	r1, r2, #0
 802b1da:	9007      	str	r0, [sp, #28]
 802b1dc:	bf18      	it	ne
 802b1de:	2101      	movne	r1, #1
 802b1e0:	e7ba      	b.n	802b158 <_svfiprintf_r+0x220>
 802b1e2:	9b07      	ldr	r3, [sp, #28]
 802b1e4:	9807      	ldr	r0, [sp, #28]
 802b1e6:	681b      	ldr	r3, [r3, #0]
 802b1e8:	9308      	str	r3, [sp, #32]
 802b1ea:	1d03      	adds	r3, r0, #4
 802b1ec:	9908      	ldr	r1, [sp, #32]
 802b1ee:	2900      	cmp	r1, #0
 802b1f0:	f280 8293 	bge.w	802b71a <_svfiprintf_r+0x7e2>
 802b1f4:	4249      	negs	r1, r1
 802b1f6:	9307      	str	r3, [sp, #28]
 802b1f8:	9108      	str	r1, [sp, #32]
 802b1fa:	f04b 0b04 	orr.w	fp, fp, #4
 802b1fe:	e6f7      	b.n	802aff0 <_svfiprintf_r+0xb8>
 802b200:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 802b204:	e6f4      	b.n	802aff0 <_svfiprintf_r+0xb8>
 802b206:	9b07      	ldr	r3, [sp, #28]
 802b208:	2001      	movs	r0, #1
 802b20a:	2200      	movs	r2, #0
 802b20c:	9004      	str	r0, [sp, #16]
 802b20e:	1d19      	adds	r1, r3, #4
 802b210:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 802b214:	681b      	ldr	r3, [r3, #0]
 802b216:	aa20      	add	r2, sp, #128	; 0x80
 802b218:	9107      	str	r1, [sp, #28]
 802b21a:	9005      	str	r0, [sp, #20]
 802b21c:	920a      	str	r2, [sp, #40]	; 0x28
 802b21e:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 802b222:	2300      	movs	r3, #0
 802b224:	9309      	str	r3, [sp, #36]	; 0x24
 802b226:	f01b 0302 	ands.w	r3, fp, #2
 802b22a:	930b      	str	r3, [sp, #44]	; 0x2c
 802b22c:	d002      	beq.n	802b234 <_svfiprintf_r+0x2fc>
 802b22e:	9b04      	ldr	r3, [sp, #16]
 802b230:	3302      	adds	r3, #2
 802b232:	9304      	str	r3, [sp, #16]
 802b234:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 802b238:	930c      	str	r3, [sp, #48]	; 0x30
 802b23a:	f040 80e3 	bne.w	802b404 <_svfiprintf_r+0x4cc>
 802b23e:	9b08      	ldr	r3, [sp, #32]
 802b240:	9804      	ldr	r0, [sp, #16]
 802b242:	1a1d      	subs	r5, r3, r0
 802b244:	2d00      	cmp	r5, #0
 802b246:	f340 80dd 	ble.w	802b404 <_svfiprintf_r+0x4cc>
 802b24a:	2d10      	cmp	r5, #16
 802b24c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b24e:	f340 82c4 	ble.w	802b7da <_svfiprintf_r+0x8a2>
 802b252:	f04f 0910 	mov.w	r9, #16
 802b256:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b258:	4ea4      	ldr	r6, [pc, #656]	; (802b4ec <_svfiprintf_r+0x5b4>)
 802b25a:	e002      	b.n	802b262 <_svfiprintf_r+0x32a>
 802b25c:	3d10      	subs	r5, #16
 802b25e:	2d10      	cmp	r5, #16
 802b260:	dd16      	ble.n	802b290 <_svfiprintf_r+0x358>
 802b262:	3301      	adds	r3, #1
 802b264:	3210      	adds	r2, #16
 802b266:	e884 0240 	stmia.w	r4, {r6, r9}
 802b26a:	3408      	adds	r4, #8
 802b26c:	2b07      	cmp	r3, #7
 802b26e:	932b      	str	r3, [sp, #172]	; 0xac
 802b270:	922c      	str	r2, [sp, #176]	; 0xb0
 802b272:	ddf3      	ble.n	802b25c <_svfiprintf_r+0x324>
 802b274:	9803      	ldr	r0, [sp, #12]
 802b276:	4651      	mov	r1, sl
 802b278:	4642      	mov	r2, r8
 802b27a:	ac10      	add	r4, sp, #64	; 0x40
 802b27c:	f7ff fdd0 	bl	802ae20 <__ssprint_r>
 802b280:	2800      	cmp	r0, #0
 802b282:	f040 8180 	bne.w	802b586 <_svfiprintf_r+0x64e>
 802b286:	3d10      	subs	r5, #16
 802b288:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b28a:	2d10      	cmp	r5, #16
 802b28c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b28e:	dce8      	bgt.n	802b262 <_svfiprintf_r+0x32a>
 802b290:	3301      	adds	r3, #1
 802b292:	1952      	adds	r2, r2, r5
 802b294:	2b07      	cmp	r3, #7
 802b296:	6026      	str	r6, [r4, #0]
 802b298:	6065      	str	r5, [r4, #4]
 802b29a:	932b      	str	r3, [sp, #172]	; 0xac
 802b29c:	922c      	str	r2, [sp, #176]	; 0xb0
 802b29e:	f300 8226 	bgt.w	802b6ee <_svfiprintf_r+0x7b6>
 802b2a2:	3408      	adds	r4, #8
 802b2a4:	e0b0      	b.n	802b408 <_svfiprintf_r+0x4d0>
 802b2a6:	4992      	ldr	r1, [pc, #584]	; (802b4f0 <_svfiprintf_r+0x5b8>)
 802b2a8:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 802b2ac:	910d      	str	r1, [sp, #52]	; 0x34
 802b2ae:	f01b 0f10 	tst.w	fp, #16
 802b2b2:	d103      	bne.n	802b2bc <_svfiprintf_r+0x384>
 802b2b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802b2b8:	f040 825f 	bne.w	802b77a <_svfiprintf_r+0x842>
 802b2bc:	9807      	ldr	r0, [sp, #28]
 802b2be:	6802      	ldr	r2, [r0, #0]
 802b2c0:	3004      	adds	r0, #4
 802b2c2:	9007      	str	r0, [sp, #28]
 802b2c4:	1c11      	adds	r1, r2, #0
 802b2c6:	bf18      	it	ne
 802b2c8:	2101      	movne	r1, #1
 802b2ca:	ea1b 0f01 	tst.w	fp, r1
 802b2ce:	f000 8201 	beq.w	802b6d4 <_svfiprintf_r+0x79c>
 802b2d2:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
 802b2d6:	f04b 0b02 	orr.w	fp, fp, #2
 802b2da:	2330      	movs	r3, #48	; 0x30
 802b2dc:	2101      	movs	r1, #1
 802b2de:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 802b2e2:	2302      	movs	r3, #2
 802b2e4:	e738      	b.n	802b158 <_svfiprintf_r+0x220>
 802b2e6:	f01b 0f10 	tst.w	fp, #16
 802b2ea:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 802b2ee:	f040 823d 	bne.w	802b76c <_svfiprintf_r+0x834>
 802b2f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802b2f6:	f000 8259 	beq.w	802b7ac <_svfiprintf_r+0x874>
 802b2fa:	9a07      	ldr	r2, [sp, #28]
 802b2fc:	9806      	ldr	r0, [sp, #24]
 802b2fe:	6813      	ldr	r3, [r2, #0]
 802b300:	3204      	adds	r2, #4
 802b302:	9207      	str	r2, [sp, #28]
 802b304:	8018      	strh	r0, [r3, #0]
 802b306:	e639      	b.n	802af7c <_svfiprintf_r+0x44>
 802b308:	497a      	ldr	r1, [pc, #488]	; (802b4f4 <_svfiprintf_r+0x5bc>)
 802b30a:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 802b30e:	910d      	str	r1, [sp, #52]	; 0x34
 802b310:	e7cd      	b.n	802b2ae <_svfiprintf_r+0x376>
 802b312:	9b07      	ldr	r3, [sp, #28]
 802b314:	f04b 0b02 	orr.w	fp, fp, #2
 802b318:	4876      	ldr	r0, [pc, #472]	; (802b4f4 <_svfiprintf_r+0x5bc>)
 802b31a:	1d19      	adds	r1, r3, #4
 802b31c:	9107      	str	r1, [sp, #28]
 802b31e:	681a      	ldr	r2, [r3, #0]
 802b320:	2178      	movs	r1, #120	; 0x78
 802b322:	2330      	movs	r3, #48	; 0x30
 802b324:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
 802b328:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 802b32c:	2302      	movs	r3, #2
 802b32e:	1c11      	adds	r1, r2, #0
 802b330:	900d      	str	r0, [sp, #52]	; 0x34
 802b332:	bf18      	it	ne
 802b334:	2101      	movne	r1, #1
 802b336:	e70f      	b.n	802b158 <_svfiprintf_r+0x220>
 802b338:	2a00      	cmp	r2, #0
 802b33a:	bf08      	it	eq
 802b33c:	2220      	moveq	r2, #32
 802b33e:	e657      	b.n	802aff0 <_svfiprintf_r+0xb8>
 802b340:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 802b344:	2b00      	cmp	r3, #0
 802b346:	f000 8117 	beq.w	802b578 <_svfiprintf_r+0x640>
 802b34a:	2001      	movs	r0, #1
 802b34c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 802b350:	9004      	str	r0, [sp, #16]
 802b352:	2300      	movs	r3, #0
 802b354:	9005      	str	r0, [sp, #20]
 802b356:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 802b35a:	ab20      	add	r3, sp, #128	; 0x80
 802b35c:	930a      	str	r3, [sp, #40]	; 0x28
 802b35e:	e760      	b.n	802b222 <_svfiprintf_r+0x2ea>
 802b360:	9b07      	ldr	r3, [sp, #28]
 802b362:	2600      	movs	r6, #0
 802b364:	f88d 60b7 	strb.w	r6, [sp, #183]	; 0xb7
 802b368:	1d19      	adds	r1, r3, #4
 802b36a:	9107      	str	r1, [sp, #28]
 802b36c:	681b      	ldr	r3, [r3, #0]
 802b36e:	930a      	str	r3, [sp, #40]	; 0x28
 802b370:	2b00      	cmp	r3, #0
 802b372:	f000 823a 	beq.w	802b7ea <_svfiprintf_r+0x8b2>
 802b376:	2d00      	cmp	r5, #0
 802b378:	980a      	ldr	r0, [sp, #40]	; 0x28
 802b37a:	f2c0 8206 	blt.w	802b78a <_svfiprintf_r+0x852>
 802b37e:	4631      	mov	r1, r6
 802b380:	462a      	mov	r2, r5
 802b382:	f7fa fc87 	bl	8025c94 <memchr>
 802b386:	2800      	cmp	r0, #0
 802b388:	f000 8239 	beq.w	802b7fe <_svfiprintf_r+0x8c6>
 802b38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b38e:	9609      	str	r6, [sp, #36]	; 0x24
 802b390:	1ac0      	subs	r0, r0, r3
 802b392:	9005      	str	r0, [sp, #20]
 802b394:	42a8      	cmp	r0, r5
 802b396:	bfc8      	it	gt
 802b398:	9505      	strgt	r5, [sp, #20]
 802b39a:	e6c1      	b.n	802b120 <_svfiprintf_r+0x1e8>
 802b39c:	4638      	mov	r0, r7
 802b39e:	2100      	movs	r1, #0
 802b3a0:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 802b3a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 802b3a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802b3ac:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 802b3b0:	4607      	mov	r7, r0
 802b3b2:	2e09      	cmp	r6, #9
 802b3b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 802b3b8:	d9f2      	bls.n	802b3a0 <_svfiprintf_r+0x468>
 802b3ba:	9108      	str	r1, [sp, #32]
 802b3bc:	e61a      	b.n	802aff4 <_svfiprintf_r+0xbc>
 802b3be:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 802b3c2:	e615      	b.n	802aff0 <_svfiprintf_r+0xb8>
 802b3c4:	f817 3b01 	ldrb.w	r3, [r7], #1
 802b3c8:	2b2a      	cmp	r3, #42	; 0x2a
 802b3ca:	f000 819c 	beq.w	802b706 <_svfiprintf_r+0x7ce>
 802b3ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802b3d2:	2500      	movs	r5, #0
 802b3d4:	2909      	cmp	r1, #9
 802b3d6:	f63f ae0d 	bhi.w	802aff4 <_svfiprintf_r+0xbc>
 802b3da:	4638      	mov	r0, r7
 802b3dc:	2500      	movs	r5, #0
 802b3de:	f810 3b01 	ldrb.w	r3, [r0], #1
 802b3e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 802b3e6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 802b3ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802b3ee:	2909      	cmp	r1, #9
 802b3f0:	4607      	mov	r7, r0
 802b3f2:	d9f4      	bls.n	802b3de <_svfiprintf_r+0x4a6>
 802b3f4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 802b3f8:	e5fc      	b.n	802aff4 <_svfiprintf_r+0xbc>
 802b3fa:	222b      	movs	r2, #43	; 0x2b
 802b3fc:	e5f8      	b.n	802aff0 <_svfiprintf_r+0xb8>
 802b3fe:	f04b 0b01 	orr.w	fp, fp, #1
 802b402:	e5f5      	b.n	802aff0 <_svfiprintf_r+0xb8>
 802b404:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b406:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b408:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
 802b40c:	b161      	cbz	r1, 802b428 <_svfiprintf_r+0x4f0>
 802b40e:	3301      	adds	r3, #1
 802b410:	f10d 01b7 	add.w	r1, sp, #183	; 0xb7
 802b414:	6021      	str	r1, [r4, #0]
 802b416:	2101      	movs	r1, #1
 802b418:	2b07      	cmp	r3, #7
 802b41a:	440a      	add	r2, r1
 802b41c:	6061      	str	r1, [r4, #4]
 802b41e:	932b      	str	r3, [sp, #172]	; 0xac
 802b420:	922c      	str	r2, [sp, #176]	; 0xb0
 802b422:	f300 8118 	bgt.w	802b656 <_svfiprintf_r+0x71e>
 802b426:	3408      	adds	r4, #8
 802b428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802b42a:	b159      	cbz	r1, 802b444 <_svfiprintf_r+0x50c>
 802b42c:	3301      	adds	r3, #1
 802b42e:	a92d      	add	r1, sp, #180	; 0xb4
 802b430:	6021      	str	r1, [r4, #0]
 802b432:	2102      	movs	r1, #2
 802b434:	2b07      	cmp	r3, #7
 802b436:	440a      	add	r2, r1
 802b438:	6061      	str	r1, [r4, #4]
 802b43a:	932b      	str	r3, [sp, #172]	; 0xac
 802b43c:	922c      	str	r2, [sp, #176]	; 0xb0
 802b43e:	f300 8115 	bgt.w	802b66c <_svfiprintf_r+0x734>
 802b442:	3408      	adds	r4, #8
 802b444:	980c      	ldr	r0, [sp, #48]	; 0x30
 802b446:	2880      	cmp	r0, #128	; 0x80
 802b448:	f000 80aa 	beq.w	802b5a0 <_svfiprintf_r+0x668>
 802b44c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802b44e:	9805      	ldr	r0, [sp, #20]
 802b450:	1a0d      	subs	r5, r1, r0
 802b452:	2d00      	cmp	r5, #0
 802b454:	dd29      	ble.n	802b4aa <_svfiprintf_r+0x572>
 802b456:	2d10      	cmp	r5, #16
 802b458:	4e27      	ldr	r6, [pc, #156]	; (802b4f8 <_svfiprintf_r+0x5c0>)
 802b45a:	bfc8      	it	gt
 802b45c:	f04f 0910 	movgt.w	r9, #16
 802b460:	dc03      	bgt.n	802b46a <_svfiprintf_r+0x532>
 802b462:	e018      	b.n	802b496 <_svfiprintf_r+0x55e>
 802b464:	3d10      	subs	r5, #16
 802b466:	2d10      	cmp	r5, #16
 802b468:	dd15      	ble.n	802b496 <_svfiprintf_r+0x55e>
 802b46a:	3301      	adds	r3, #1
 802b46c:	3210      	adds	r2, #16
 802b46e:	e884 0240 	stmia.w	r4, {r6, r9}
 802b472:	3408      	adds	r4, #8
 802b474:	2b07      	cmp	r3, #7
 802b476:	932b      	str	r3, [sp, #172]	; 0xac
 802b478:	922c      	str	r2, [sp, #176]	; 0xb0
 802b47a:	ddf3      	ble.n	802b464 <_svfiprintf_r+0x52c>
 802b47c:	9803      	ldr	r0, [sp, #12]
 802b47e:	4651      	mov	r1, sl
 802b480:	4642      	mov	r2, r8
 802b482:	ac10      	add	r4, sp, #64	; 0x40
 802b484:	f7ff fccc 	bl	802ae20 <__ssprint_r>
 802b488:	2800      	cmp	r0, #0
 802b48a:	d17c      	bne.n	802b586 <_svfiprintf_r+0x64e>
 802b48c:	3d10      	subs	r5, #16
 802b48e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b490:	2d10      	cmp	r5, #16
 802b492:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b494:	dce9      	bgt.n	802b46a <_svfiprintf_r+0x532>
 802b496:	3301      	adds	r3, #1
 802b498:	1952      	adds	r2, r2, r5
 802b49a:	2b07      	cmp	r3, #7
 802b49c:	6026      	str	r6, [r4, #0]
 802b49e:	6065      	str	r5, [r4, #4]
 802b4a0:	932b      	str	r3, [sp, #172]	; 0xac
 802b4a2:	922c      	str	r2, [sp, #176]	; 0xb0
 802b4a4:	f300 80cc 	bgt.w	802b640 <_svfiprintf_r+0x708>
 802b4a8:	3408      	adds	r4, #8
 802b4aa:	3301      	adds	r3, #1
 802b4ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 802b4ae:	9805      	ldr	r0, [sp, #20]
 802b4b0:	2b07      	cmp	r3, #7
 802b4b2:	932b      	str	r3, [sp, #172]	; 0xac
 802b4b4:	6021      	str	r1, [r4, #0]
 802b4b6:	4402      	add	r2, r0
 802b4b8:	6060      	str	r0, [r4, #4]
 802b4ba:	bfd8      	it	le
 802b4bc:	f104 0108 	addle.w	r1, r4, #8
 802b4c0:	922c      	str	r2, [sp, #176]	; 0xb0
 802b4c2:	f300 809e 	bgt.w	802b602 <_svfiprintf_r+0x6ca>
 802b4c6:	f01b 0f04 	tst.w	fp, #4
 802b4ca:	d039      	beq.n	802b540 <_svfiprintf_r+0x608>
 802b4cc:	9b08      	ldr	r3, [sp, #32]
 802b4ce:	9804      	ldr	r0, [sp, #16]
 802b4d0:	1a1d      	subs	r5, r3, r0
 802b4d2:	2d00      	cmp	r5, #0
 802b4d4:	dd34      	ble.n	802b540 <_svfiprintf_r+0x608>
 802b4d6:	2d10      	cmp	r5, #16
 802b4d8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b4da:	bfd8      	it	le
 802b4dc:	4e03      	ldrle	r6, [pc, #12]	; (802b4ec <_svfiprintf_r+0x5b4>)
 802b4de:	dd26      	ble.n	802b52e <_svfiprintf_r+0x5f6>
 802b4e0:	2410      	movs	r4, #16
 802b4e2:	4e02      	ldr	r6, [pc, #8]	; (802b4ec <_svfiprintf_r+0x5b4>)
 802b4e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 802b4e8:	e00b      	b.n	802b502 <_svfiprintf_r+0x5ca>
 802b4ea:	bf00      	nop
 802b4ec:	0802ea78 	.word	0x0802ea78
 802b4f0:	08035e9c 	.word	0x08035e9c
 802b4f4:	08035eb0 	.word	0x08035eb0
 802b4f8:	0802ea88 	.word	0x0802ea88
 802b4fc:	3d10      	subs	r5, #16
 802b4fe:	2d10      	cmp	r5, #16
 802b500:	dd15      	ble.n	802b52e <_svfiprintf_r+0x5f6>
 802b502:	3301      	adds	r3, #1
 802b504:	3210      	adds	r2, #16
 802b506:	600e      	str	r6, [r1, #0]
 802b508:	604c      	str	r4, [r1, #4]
 802b50a:	3108      	adds	r1, #8
 802b50c:	2b07      	cmp	r3, #7
 802b50e:	932b      	str	r3, [sp, #172]	; 0xac
 802b510:	922c      	str	r2, [sp, #176]	; 0xb0
 802b512:	ddf3      	ble.n	802b4fc <_svfiprintf_r+0x5c4>
 802b514:	4648      	mov	r0, r9
 802b516:	4651      	mov	r1, sl
 802b518:	4642      	mov	r2, r8
 802b51a:	f7ff fc81 	bl	802ae20 <__ssprint_r>
 802b51e:	2800      	cmp	r0, #0
 802b520:	d131      	bne.n	802b586 <_svfiprintf_r+0x64e>
 802b522:	3d10      	subs	r5, #16
 802b524:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b526:	2d10      	cmp	r5, #16
 802b528:	a910      	add	r1, sp, #64	; 0x40
 802b52a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b52c:	dce9      	bgt.n	802b502 <_svfiprintf_r+0x5ca>
 802b52e:	3301      	adds	r3, #1
 802b530:	18aa      	adds	r2, r5, r2
 802b532:	2b07      	cmp	r3, #7
 802b534:	600e      	str	r6, [r1, #0]
 802b536:	604d      	str	r5, [r1, #4]
 802b538:	932b      	str	r3, [sp, #172]	; 0xac
 802b53a:	922c      	str	r2, [sp, #176]	; 0xb0
 802b53c:	f300 80ef 	bgt.w	802b71e <_svfiprintf_r+0x7e6>
 802b540:	9b06      	ldr	r3, [sp, #24]
 802b542:	9804      	ldr	r0, [sp, #16]
 802b544:	9908      	ldr	r1, [sp, #32]
 802b546:	4288      	cmp	r0, r1
 802b548:	bfac      	ite	ge
 802b54a:	181b      	addge	r3, r3, r0
 802b54c:	185b      	addlt	r3, r3, r1
 802b54e:	9306      	str	r3, [sp, #24]
 802b550:	2a00      	cmp	r2, #0
 802b552:	d160      	bne.n	802b616 <_svfiprintf_r+0x6de>
 802b554:	2300      	movs	r3, #0
 802b556:	932b      	str	r3, [sp, #172]	; 0xac
 802b558:	783b      	ldrb	r3, [r7, #0]
 802b55a:	ac10      	add	r4, sp, #64	; 0x40
 802b55c:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 802b560:	bf18      	it	ne
 802b562:	2201      	movne	r2, #1
 802b564:	2b00      	cmp	r3, #0
 802b566:	bf0c      	ite	eq
 802b568:	2300      	moveq	r3, #0
 802b56a:	f002 0301 	andne.w	r3, r2, #1
 802b56e:	2b00      	cmp	r3, #0
 802b570:	f47f ad11 	bne.w	802af96 <_svfiprintf_r+0x5e>
 802b574:	463d      	mov	r5, r7
 802b576:	e52e      	b.n	802afd6 <_svfiprintf_r+0x9e>
 802b578:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b57a:	b123      	cbz	r3, 802b586 <_svfiprintf_r+0x64e>
 802b57c:	9803      	ldr	r0, [sp, #12]
 802b57e:	4651      	mov	r1, sl
 802b580:	aa2a      	add	r2, sp, #168	; 0xa8
 802b582:	f7ff fc4d 	bl	802ae20 <__ssprint_r>
 802b586:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802b58a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802b58e:	9b06      	ldr	r3, [sp, #24]
 802b590:	bf18      	it	ne
 802b592:	f04f 33ff 	movne.w	r3, #4294967295
 802b596:	9306      	str	r3, [sp, #24]
 802b598:	9806      	ldr	r0, [sp, #24]
 802b59a:	b02f      	add	sp, #188	; 0xbc
 802b59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b5a0:	9908      	ldr	r1, [sp, #32]
 802b5a2:	9804      	ldr	r0, [sp, #16]
 802b5a4:	1a0d      	subs	r5, r1, r0
 802b5a6:	2d00      	cmp	r5, #0
 802b5a8:	f77f af50 	ble.w	802b44c <_svfiprintf_r+0x514>
 802b5ac:	2d10      	cmp	r5, #16
 802b5ae:	4e99      	ldr	r6, [pc, #612]	; (802b814 <_svfiprintf_r+0x8dc>)
 802b5b0:	bfc8      	it	gt
 802b5b2:	f04f 0910 	movgt.w	r9, #16
 802b5b6:	dc03      	bgt.n	802b5c0 <_svfiprintf_r+0x688>
 802b5b8:	e018      	b.n	802b5ec <_svfiprintf_r+0x6b4>
 802b5ba:	3d10      	subs	r5, #16
 802b5bc:	2d10      	cmp	r5, #16
 802b5be:	dd15      	ble.n	802b5ec <_svfiprintf_r+0x6b4>
 802b5c0:	3301      	adds	r3, #1
 802b5c2:	3210      	adds	r2, #16
 802b5c4:	e884 0240 	stmia.w	r4, {r6, r9}
 802b5c8:	3408      	adds	r4, #8
 802b5ca:	2b07      	cmp	r3, #7
 802b5cc:	932b      	str	r3, [sp, #172]	; 0xac
 802b5ce:	922c      	str	r2, [sp, #176]	; 0xb0
 802b5d0:	ddf3      	ble.n	802b5ba <_svfiprintf_r+0x682>
 802b5d2:	9803      	ldr	r0, [sp, #12]
 802b5d4:	4651      	mov	r1, sl
 802b5d6:	4642      	mov	r2, r8
 802b5d8:	ac10      	add	r4, sp, #64	; 0x40
 802b5da:	f7ff fc21 	bl	802ae20 <__ssprint_r>
 802b5de:	2800      	cmp	r0, #0
 802b5e0:	d1d1      	bne.n	802b586 <_svfiprintf_r+0x64e>
 802b5e2:	3d10      	subs	r5, #16
 802b5e4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b5e6:	2d10      	cmp	r5, #16
 802b5e8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b5ea:	dce9      	bgt.n	802b5c0 <_svfiprintf_r+0x688>
 802b5ec:	3301      	adds	r3, #1
 802b5ee:	1952      	adds	r2, r2, r5
 802b5f0:	2b07      	cmp	r3, #7
 802b5f2:	6026      	str	r6, [r4, #0]
 802b5f4:	6065      	str	r5, [r4, #4]
 802b5f6:	932b      	str	r3, [sp, #172]	; 0xac
 802b5f8:	922c      	str	r2, [sp, #176]	; 0xb0
 802b5fa:	f300 80cb 	bgt.w	802b794 <_svfiprintf_r+0x85c>
 802b5fe:	3408      	adds	r4, #8
 802b600:	e724      	b.n	802b44c <_svfiprintf_r+0x514>
 802b602:	9803      	ldr	r0, [sp, #12]
 802b604:	4651      	mov	r1, sl
 802b606:	4642      	mov	r2, r8
 802b608:	f7ff fc0a 	bl	802ae20 <__ssprint_r>
 802b60c:	2800      	cmp	r0, #0
 802b60e:	d1ba      	bne.n	802b586 <_svfiprintf_r+0x64e>
 802b610:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b612:	a910      	add	r1, sp, #64	; 0x40
 802b614:	e757      	b.n	802b4c6 <_svfiprintf_r+0x58e>
 802b616:	9803      	ldr	r0, [sp, #12]
 802b618:	4651      	mov	r1, sl
 802b61a:	4642      	mov	r2, r8
 802b61c:	f7ff fc00 	bl	802ae20 <__ssprint_r>
 802b620:	2800      	cmp	r0, #0
 802b622:	d097      	beq.n	802b554 <_svfiprintf_r+0x61c>
 802b624:	e7af      	b.n	802b586 <_svfiprintf_r+0x64e>
 802b626:	9105      	str	r1, [sp, #20]
 802b628:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 802b62c:	e577      	b.n	802b11e <_svfiprintf_r+0x1e6>
 802b62e:	9803      	ldr	r0, [sp, #12]
 802b630:	4651      	mov	r1, sl
 802b632:	4642      	mov	r2, r8
 802b634:	f7ff fbf4 	bl	802ae20 <__ssprint_r>
 802b638:	2800      	cmp	r0, #0
 802b63a:	d1a4      	bne.n	802b586 <_svfiprintf_r+0x64e>
 802b63c:	ac10      	add	r4, sp, #64	; 0x40
 802b63e:	e4c7      	b.n	802afd0 <_svfiprintf_r+0x98>
 802b640:	9803      	ldr	r0, [sp, #12]
 802b642:	4651      	mov	r1, sl
 802b644:	4642      	mov	r2, r8
 802b646:	f7ff fbeb 	bl	802ae20 <__ssprint_r>
 802b64a:	2800      	cmp	r0, #0
 802b64c:	d19b      	bne.n	802b586 <_svfiprintf_r+0x64e>
 802b64e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b650:	ac10      	add	r4, sp, #64	; 0x40
 802b652:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b654:	e729      	b.n	802b4aa <_svfiprintf_r+0x572>
 802b656:	9803      	ldr	r0, [sp, #12]
 802b658:	4651      	mov	r1, sl
 802b65a:	4642      	mov	r2, r8
 802b65c:	f7ff fbe0 	bl	802ae20 <__ssprint_r>
 802b660:	2800      	cmp	r0, #0
 802b662:	d190      	bne.n	802b586 <_svfiprintf_r+0x64e>
 802b664:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b666:	ac10      	add	r4, sp, #64	; 0x40
 802b668:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b66a:	e6dd      	b.n	802b428 <_svfiprintf_r+0x4f0>
 802b66c:	9803      	ldr	r0, [sp, #12]
 802b66e:	4651      	mov	r1, sl
 802b670:	4642      	mov	r2, r8
 802b672:	f7ff fbd5 	bl	802ae20 <__ssprint_r>
 802b676:	2800      	cmp	r0, #0
 802b678:	d185      	bne.n	802b586 <_svfiprintf_r+0x64e>
 802b67a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b67c:	ac10      	add	r4, sp, #64	; 0x40
 802b67e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b680:	e6e0      	b.n	802b444 <_svfiprintf_r+0x50c>
 802b682:	2a09      	cmp	r2, #9
 802b684:	d955      	bls.n	802b732 <_svfiprintf_r+0x7fa>
 802b686:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 802b68a:	f10d 00a7 	add.w	r0, sp, #167	; 0xa7
 802b68e:	fbac 1302 	umull	r1, r3, ip, r2
 802b692:	4601      	mov	r1, r0
 802b694:	3801      	subs	r0, #1
 802b696:	08db      	lsrs	r3, r3, #3
 802b698:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 802b69c:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 802b6a0:	461a      	mov	r2, r3
 802b6a2:	3630      	adds	r6, #48	; 0x30
 802b6a4:	700e      	strb	r6, [r1, #0]
 802b6a6:	2b00      	cmp	r3, #0
 802b6a8:	d1f1      	bne.n	802b68e <_svfiprintf_r+0x756>
 802b6aa:	ebc1 0308 	rsb	r3, r1, r8
 802b6ae:	910a      	str	r1, [sp, #40]	; 0x28
 802b6b0:	9305      	str	r3, [sp, #20]
 802b6b2:	e534      	b.n	802b11e <_svfiprintf_r+0x1e6>
 802b6b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802b6b6:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 802b6ba:	f002 000f 	and.w	r0, r2, #15
 802b6be:	4619      	mov	r1, r3
 802b6c0:	3b01      	subs	r3, #1
 802b6c2:	0912      	lsrs	r2, r2, #4
 802b6c4:	5c30      	ldrb	r0, [r6, r0]
 802b6c6:	7008      	strb	r0, [r1, #0]
 802b6c8:	d1f7      	bne.n	802b6ba <_svfiprintf_r+0x782>
 802b6ca:	ebc1 0308 	rsb	r3, r1, r8
 802b6ce:	910a      	str	r1, [sp, #40]	; 0x28
 802b6d0:	9305      	str	r3, [sp, #20]
 802b6d2:	e524      	b.n	802b11e <_svfiprintf_r+0x1e6>
 802b6d4:	2302      	movs	r3, #2
 802b6d6:	e53f      	b.n	802b158 <_svfiprintf_r+0x220>
 802b6d8:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 802b6dc:	d042      	beq.n	802b764 <_svfiprintf_r+0x82c>
 802b6de:	9907      	ldr	r1, [sp, #28]
 802b6e0:	880a      	ldrh	r2, [r1, #0]
 802b6e2:	3104      	adds	r1, #4
 802b6e4:	9107      	str	r1, [sp, #28]
 802b6e6:	1c11      	adds	r1, r2, #0
 802b6e8:	bf18      	it	ne
 802b6ea:	2101      	movne	r1, #1
 802b6ec:	e534      	b.n	802b158 <_svfiprintf_r+0x220>
 802b6ee:	9803      	ldr	r0, [sp, #12]
 802b6f0:	4651      	mov	r1, sl
 802b6f2:	4642      	mov	r2, r8
 802b6f4:	f7ff fb94 	bl	802ae20 <__ssprint_r>
 802b6f8:	2800      	cmp	r0, #0
 802b6fa:	f47f af44 	bne.w	802b586 <_svfiprintf_r+0x64e>
 802b6fe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b700:	ac10      	add	r4, sp, #64	; 0x40
 802b702:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b704:	e680      	b.n	802b408 <_svfiprintf_r+0x4d0>
 802b706:	9b07      	ldr	r3, [sp, #28]
 802b708:	681d      	ldr	r5, [r3, #0]
 802b70a:	3304      	adds	r3, #4
 802b70c:	2d00      	cmp	r5, #0
 802b70e:	bfbc      	itt	lt
 802b710:	9307      	strlt	r3, [sp, #28]
 802b712:	f04f 35ff 	movlt.w	r5, #4294967295
 802b716:	f6ff ac6b 	blt.w	802aff0 <_svfiprintf_r+0xb8>
 802b71a:	9307      	str	r3, [sp, #28]
 802b71c:	e468      	b.n	802aff0 <_svfiprintf_r+0xb8>
 802b71e:	9803      	ldr	r0, [sp, #12]
 802b720:	4651      	mov	r1, sl
 802b722:	4642      	mov	r2, r8
 802b724:	f7ff fb7c 	bl	802ae20 <__ssprint_r>
 802b728:	2800      	cmp	r0, #0
 802b72a:	f47f af2c 	bne.w	802b586 <_svfiprintf_r+0x64e>
 802b72e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b730:	e706      	b.n	802b540 <_svfiprintf_r+0x608>
 802b732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b734:	3230      	adds	r2, #48	; 0x30
 802b736:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 802b73a:	9305      	str	r3, [sp, #20]
 802b73c:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 802b740:	930a      	str	r3, [sp, #40]	; 0x28
 802b742:	e4ec      	b.n	802b11e <_svfiprintf_r+0x1e6>
 802b744:	f9b3 2000 	ldrsh.w	r2, [r3]
 802b748:	3304      	adds	r3, #4
 802b74a:	9307      	str	r3, [sp, #28]
 802b74c:	2a00      	cmp	r2, #0
 802b74e:	f6bf acc6 	bge.w	802b0de <_svfiprintf_r+0x1a6>
 802b752:	4252      	negs	r2, r2
 802b754:	1c11      	adds	r1, r2, #0
 802b756:	bf18      	it	ne
 802b758:	2101      	movne	r1, #1
 802b75a:	232d      	movs	r3, #45	; 0x2d
 802b75c:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 802b760:	2301      	movs	r3, #1
 802b762:	e4fc      	b.n	802b15e <_svfiprintf_r+0x226>
 802b764:	9b07      	ldr	r3, [sp, #28]
 802b766:	681a      	ldr	r2, [r3, #0]
 802b768:	460b      	mov	r3, r1
 802b76a:	e533      	b.n	802b1d4 <_svfiprintf_r+0x29c>
 802b76c:	9807      	ldr	r0, [sp, #28]
 802b76e:	9906      	ldr	r1, [sp, #24]
 802b770:	6803      	ldr	r3, [r0, #0]
 802b772:	3004      	adds	r0, #4
 802b774:	9007      	str	r0, [sp, #28]
 802b776:	6019      	str	r1, [r3, #0]
 802b778:	e400      	b.n	802af7c <_svfiprintf_r+0x44>
 802b77a:	9907      	ldr	r1, [sp, #28]
 802b77c:	880a      	ldrh	r2, [r1, #0]
 802b77e:	3104      	adds	r1, #4
 802b780:	9107      	str	r1, [sp, #28]
 802b782:	e59f      	b.n	802b2c4 <_svfiprintf_r+0x38c>
 802b784:	881a      	ldrh	r2, [r3, #0]
 802b786:	2301      	movs	r3, #1
 802b788:	e524      	b.n	802b1d4 <_svfiprintf_r+0x29c>
 802b78a:	9609      	str	r6, [sp, #36]	; 0x24
 802b78c:	f7fb f8c6 	bl	802691c <strlen>
 802b790:	9005      	str	r0, [sp, #20]
 802b792:	e4c5      	b.n	802b120 <_svfiprintf_r+0x1e8>
 802b794:	9803      	ldr	r0, [sp, #12]
 802b796:	4651      	mov	r1, sl
 802b798:	4642      	mov	r2, r8
 802b79a:	f7ff fb41 	bl	802ae20 <__ssprint_r>
 802b79e:	2800      	cmp	r0, #0
 802b7a0:	f47f aef1 	bne.w	802b586 <_svfiprintf_r+0x64e>
 802b7a4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802b7a6:	ac10      	add	r4, sp, #64	; 0x40
 802b7a8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b7aa:	e64f      	b.n	802b44c <_svfiprintf_r+0x514>
 802b7ac:	9907      	ldr	r1, [sp, #28]
 802b7ae:	9a06      	ldr	r2, [sp, #24]
 802b7b0:	680b      	ldr	r3, [r1, #0]
 802b7b2:	3104      	adds	r1, #4
 802b7b4:	9107      	str	r1, [sp, #28]
 802b7b6:	601a      	str	r2, [r3, #0]
 802b7b8:	f7ff bbe0 	b.w	802af7c <_svfiprintf_r+0x44>
 802b7bc:	2140      	movs	r1, #64	; 0x40
 802b7be:	9201      	str	r2, [sp, #4]
 802b7c0:	f7f9 ffb6 	bl	8025730 <_malloc_r>
 802b7c4:	9a01      	ldr	r2, [sp, #4]
 802b7c6:	f8ca 0000 	str.w	r0, [sl]
 802b7ca:	f8ca 0010 	str.w	r0, [sl, #16]
 802b7ce:	b1c8      	cbz	r0, 802b804 <_svfiprintf_r+0x8cc>
 802b7d0:	2340      	movs	r3, #64	; 0x40
 802b7d2:	f8ca 3014 	str.w	r3, [sl, #20]
 802b7d6:	f7ff bbbc 	b.w	802af52 <_svfiprintf_r+0x1a>
 802b7da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b7dc:	4e0e      	ldr	r6, [pc, #56]	; (802b818 <_svfiprintf_r+0x8e0>)
 802b7de:	e557      	b.n	802b290 <_svfiprintf_r+0x358>
 802b7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b7e2:	ebc3 0308 	rsb	r3, r3, r8
 802b7e6:	9305      	str	r3, [sp, #20]
 802b7e8:	e499      	b.n	802b11e <_svfiprintf_r+0x1e6>
 802b7ea:	4b0c      	ldr	r3, [pc, #48]	; (802b81c <_svfiprintf_r+0x8e4>)
 802b7ec:	2d06      	cmp	r5, #6
 802b7ee:	bf28      	it	cs
 802b7f0:	2506      	movcs	r5, #6
 802b7f2:	9505      	str	r5, [sp, #20]
 802b7f4:	930a      	str	r3, [sp, #40]	; 0x28
 802b7f6:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 802b7fa:	9304      	str	r3, [sp, #16]
 802b7fc:	e511      	b.n	802b222 <_svfiprintf_r+0x2ea>
 802b7fe:	9505      	str	r5, [sp, #20]
 802b800:	9009      	str	r0, [sp, #36]	; 0x24
 802b802:	e48d      	b.n	802b120 <_svfiprintf_r+0x1e8>
 802b804:	9803      	ldr	r0, [sp, #12]
 802b806:	f04f 33ff 	mov.w	r3, #4294967295
 802b80a:	9306      	str	r3, [sp, #24]
 802b80c:	230c      	movs	r3, #12
 802b80e:	6003      	str	r3, [r0, #0]
 802b810:	e6c2      	b.n	802b598 <_svfiprintf_r+0x660>
 802b812:	bf00      	nop
 802b814:	0802ea88 	.word	0x0802ea88
 802b818:	0802ea78 	.word	0x0802ea78
 802b81c:	08035ec4 	.word	0x08035ec4

0802b820 <_wcrtomb_r>:
 802b820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b824:	461e      	mov	r6, r3
 802b826:	4b10      	ldr	r3, [pc, #64]	; (802b868 <_wcrtomb_r+0x48>)
 802b828:	b086      	sub	sp, #24
 802b82a:	460c      	mov	r4, r1
 802b82c:	4605      	mov	r5, r0
 802b82e:	4690      	mov	r8, r2
 802b830:	681f      	ldr	r7, [r3, #0]
 802b832:	b181      	cbz	r1, 802b856 <_wcrtomb_r+0x36>
 802b834:	f7fe fd6e 	bl	802a314 <__locale_charset>
 802b838:	9600      	str	r6, [sp, #0]
 802b83a:	4621      	mov	r1, r4
 802b83c:	4642      	mov	r2, r8
 802b83e:	4603      	mov	r3, r0
 802b840:	4628      	mov	r0, r5
 802b842:	47b8      	blx	r7
 802b844:	1c43      	adds	r3, r0, #1
 802b846:	d103      	bne.n	802b850 <_wcrtomb_r+0x30>
 802b848:	2300      	movs	r3, #0
 802b84a:	6033      	str	r3, [r6, #0]
 802b84c:	238a      	movs	r3, #138	; 0x8a
 802b84e:	602b      	str	r3, [r5, #0]
 802b850:	b006      	add	sp, #24
 802b852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b856:	f7fe fd5d 	bl	802a314 <__locale_charset>
 802b85a:	9600      	str	r6, [sp, #0]
 802b85c:	a903      	add	r1, sp, #12
 802b85e:	4622      	mov	r2, r4
 802b860:	4603      	mov	r3, r0
 802b862:	4628      	mov	r0, r5
 802b864:	47b8      	blx	r7
 802b866:	e7ed      	b.n	802b844 <_wcrtomb_r+0x24>
 802b868:	200008c8 	.word	0x200008c8

0802b86c <wcrtomb>:
 802b86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b870:	4607      	mov	r7, r0
 802b872:	b087      	sub	sp, #28
 802b874:	4688      	mov	r8, r1
 802b876:	4614      	mov	r4, r2
 802b878:	4d12      	ldr	r5, [pc, #72]	; (802b8c4 <wcrtomb+0x58>)
 802b87a:	b1a8      	cbz	r0, 802b8a8 <wcrtomb+0x3c>
 802b87c:	4b12      	ldr	r3, [pc, #72]	; (802b8c8 <wcrtomb+0x5c>)
 802b87e:	f8d5 9000 	ldr.w	r9, [r5]
 802b882:	681e      	ldr	r6, [r3, #0]
 802b884:	f7fe fd46 	bl	802a314 <__locale_charset>
 802b888:	9400      	str	r4, [sp, #0]
 802b88a:	4639      	mov	r1, r7
 802b88c:	4642      	mov	r2, r8
 802b88e:	4603      	mov	r3, r0
 802b890:	4648      	mov	r0, r9
 802b892:	47b0      	blx	r6
 802b894:	1c42      	adds	r2, r0, #1
 802b896:	d104      	bne.n	802b8a2 <wcrtomb+0x36>
 802b898:	682b      	ldr	r3, [r5, #0]
 802b89a:	2200      	movs	r2, #0
 802b89c:	6022      	str	r2, [r4, #0]
 802b89e:	228a      	movs	r2, #138	; 0x8a
 802b8a0:	601a      	str	r2, [r3, #0]
 802b8a2:	b007      	add	sp, #28
 802b8a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b8a8:	4b07      	ldr	r3, [pc, #28]	; (802b8c8 <wcrtomb+0x5c>)
 802b8aa:	f8d5 8000 	ldr.w	r8, [r5]
 802b8ae:	681e      	ldr	r6, [r3, #0]
 802b8b0:	f7fe fd30 	bl	802a314 <__locale_charset>
 802b8b4:	9400      	str	r4, [sp, #0]
 802b8b6:	a903      	add	r1, sp, #12
 802b8b8:	463a      	mov	r2, r7
 802b8ba:	4603      	mov	r3, r0
 802b8bc:	4640      	mov	r0, r8
 802b8be:	47b0      	blx	r6
 802b8c0:	e7e8      	b.n	802b894 <wcrtomb+0x28>
 802b8c2:	bf00      	nop
 802b8c4:	20000008 	.word	0x20000008
 802b8c8:	200008c8 	.word	0x200008c8

0802b8cc <__ascii_wctomb>:
 802b8cc:	4603      	mov	r3, r0
 802b8ce:	b121      	cbz	r1, 802b8da <__ascii_wctomb+0xe>
 802b8d0:	2aff      	cmp	r2, #255	; 0xff
 802b8d2:	d804      	bhi.n	802b8de <__ascii_wctomb+0x12>
 802b8d4:	700a      	strb	r2, [r1, #0]
 802b8d6:	2001      	movs	r0, #1
 802b8d8:	4770      	bx	lr
 802b8da:	4608      	mov	r0, r1
 802b8dc:	4770      	bx	lr
 802b8de:	228a      	movs	r2, #138	; 0x8a
 802b8e0:	f04f 30ff 	mov.w	r0, #4294967295
 802b8e4:	601a      	str	r2, [r3, #0]
 802b8e6:	4770      	bx	lr

0802b8e8 <_wctomb_r>:
 802b8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b8ec:	f640 04c8 	movw	r4, #2248	; 0x8c8
 802b8f0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 802b8f4:	b082      	sub	sp, #8
 802b8f6:	461e      	mov	r6, r3
 802b8f8:	4605      	mov	r5, r0
 802b8fa:	4688      	mov	r8, r1
 802b8fc:	4617      	mov	r7, r2
 802b8fe:	6824      	ldr	r4, [r4, #0]
 802b900:	f7fe fd08 	bl	802a314 <__locale_charset>
 802b904:	9600      	str	r6, [sp, #0]
 802b906:	4641      	mov	r1, r8
 802b908:	463a      	mov	r2, r7
 802b90a:	4603      	mov	r3, r0
 802b90c:	4628      	mov	r0, r5
 802b90e:	47a0      	blx	r4
 802b910:	b002      	add	sp, #8
 802b912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b916:	bf00      	nop

0802b918 <_calloc_r>:
 802b918:	b510      	push	{r4, lr}
 802b91a:	fb01 f102 	mul.w	r1, r1, r2
 802b91e:	f7f9 ff07 	bl	8025730 <_malloc_r>
 802b922:	4604      	mov	r4, r0
 802b924:	b308      	cbz	r0, 802b96a <_calloc_r+0x52>
 802b926:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802b92a:	f022 0203 	bic.w	r2, r2, #3
 802b92e:	3a04      	subs	r2, #4
 802b930:	2a24      	cmp	r2, #36	; 0x24
 802b932:	d81c      	bhi.n	802b96e <_calloc_r+0x56>
 802b934:	2a13      	cmp	r2, #19
 802b936:	bf98      	it	ls
 802b938:	4602      	movls	r2, r0
 802b93a:	d912      	bls.n	802b962 <_calloc_r+0x4a>
 802b93c:	2300      	movs	r3, #0
 802b93e:	2a1b      	cmp	r2, #27
 802b940:	6003      	str	r3, [r0, #0]
 802b942:	bf98      	it	ls
 802b944:	f100 0208 	addls.w	r2, r0, #8
 802b948:	6043      	str	r3, [r0, #4]
 802b94a:	d90a      	bls.n	802b962 <_calloc_r+0x4a>
 802b94c:	2a24      	cmp	r2, #36	; 0x24
 802b94e:	6083      	str	r3, [r0, #8]
 802b950:	bf14      	ite	ne
 802b952:	f100 0210 	addne.w	r2, r0, #16
 802b956:	f100 0218 	addeq.w	r2, r0, #24
 802b95a:	60c3      	str	r3, [r0, #12]
 802b95c:	bf04      	itt	eq
 802b95e:	6103      	streq	r3, [r0, #16]
 802b960:	6143      	streq	r3, [r0, #20]
 802b962:	2300      	movs	r3, #0
 802b964:	6013      	str	r3, [r2, #0]
 802b966:	6053      	str	r3, [r2, #4]
 802b968:	6093      	str	r3, [r2, #8]
 802b96a:	4620      	mov	r0, r4
 802b96c:	bd10      	pop	{r4, pc}
 802b96e:	2100      	movs	r1, #0
 802b970:	f7fa faaa 	bl	8025ec8 <memset>
 802b974:	4620      	mov	r0, r4
 802b976:	bd10      	pop	{r4, pc}

0802b978 <_fclose_r>:
 802b978:	b570      	push	{r4, r5, r6, lr}
 802b97a:	460c      	mov	r4, r1
 802b97c:	4605      	mov	r5, r0
 802b97e:	460e      	mov	r6, r1
 802b980:	2900      	cmp	r1, #0
 802b982:	d030      	beq.n	802b9e6 <_fclose_r+0x6e>
 802b984:	f7fe faa0 	bl	8029ec8 <__sfp_lock_acquire>
 802b988:	b115      	cbz	r5, 802b990 <_fclose_r+0x18>
 802b98a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802b98c:	2b00      	cmp	r3, #0
 802b98e:	d02c      	beq.n	802b9ea <_fclose_r+0x72>
 802b990:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 802b994:	b32e      	cbz	r6, 802b9e2 <_fclose_r+0x6a>
 802b996:	4628      	mov	r0, r5
 802b998:	4621      	mov	r1, r4
 802b99a:	f7fe f901 	bl	8029ba0 <_fflush_r>
 802b99e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802b9a0:	4606      	mov	r6, r0
 802b9a2:	b13b      	cbz	r3, 802b9b4 <_fclose_r+0x3c>
 802b9a4:	69e1      	ldr	r1, [r4, #28]
 802b9a6:	4628      	mov	r0, r5
 802b9a8:	4798      	blx	r3
 802b9aa:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 802b9ae:	bf28      	it	cs
 802b9b0:	f04f 36ff 	movcs.w	r6, #4294967295
 802b9b4:	89a3      	ldrh	r3, [r4, #12]
 802b9b6:	061b      	lsls	r3, r3, #24
 802b9b8:	d41f      	bmi.n	802b9fa <_fclose_r+0x82>
 802b9ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802b9bc:	b141      	cbz	r1, 802b9d0 <_fclose_r+0x58>
 802b9be:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802b9c2:	4299      	cmp	r1, r3
 802b9c4:	d002      	beq.n	802b9cc <_fclose_r+0x54>
 802b9c6:	4628      	mov	r0, r5
 802b9c8:	f7fe fb70 	bl	802a0ac <_free_r>
 802b9cc:	2300      	movs	r3, #0
 802b9ce:	6323      	str	r3, [r4, #48]	; 0x30
 802b9d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802b9d2:	b121      	cbz	r1, 802b9de <_fclose_r+0x66>
 802b9d4:	4628      	mov	r0, r5
 802b9d6:	f7fe fb69 	bl	802a0ac <_free_r>
 802b9da:	2300      	movs	r3, #0
 802b9dc:	6463      	str	r3, [r4, #68]	; 0x44
 802b9de:	2300      	movs	r3, #0
 802b9e0:	81a3      	strh	r3, [r4, #12]
 802b9e2:	f7fe fa73 	bl	8029ecc <__sfp_lock_release>
 802b9e6:	4630      	mov	r0, r6
 802b9e8:	bd70      	pop	{r4, r5, r6, pc}
 802b9ea:	4628      	mov	r0, r5
 802b9ec:	f7fe f9fa 	bl	8029de4 <__sinit>
 802b9f0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 802b9f4:	2e00      	cmp	r6, #0
 802b9f6:	d1ce      	bne.n	802b996 <_fclose_r+0x1e>
 802b9f8:	e7f3      	b.n	802b9e2 <_fclose_r+0x6a>
 802b9fa:	6921      	ldr	r1, [r4, #16]
 802b9fc:	4628      	mov	r0, r5
 802b9fe:	f7fe fb55 	bl	802a0ac <_free_r>
 802ba02:	e7da      	b.n	802b9ba <_fclose_r+0x42>

0802ba04 <fclose>:
 802ba04:	f240 0308 	movw	r3, #8
 802ba08:	4601      	mov	r1, r0
 802ba0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802ba0e:	6818      	ldr	r0, [r3, #0]
 802ba10:	e7b2      	b.n	802b978 <_fclose_r>
 802ba12:	bf00      	nop
 802ba14:	0000      	movs	r0, r0
	...

0802ba18 <__aeabi_uidiv>:
 802ba18:	1e4a      	subs	r2, r1, #1
 802ba1a:	bf08      	it	eq
 802ba1c:	4770      	bxeq	lr
 802ba1e:	f0c0 8124 	bcc.w	802bc6a <__aeabi_uidiv+0x252>
 802ba22:	4288      	cmp	r0, r1
 802ba24:	f240 8116 	bls.w	802bc54 <__aeabi_uidiv+0x23c>
 802ba28:	4211      	tst	r1, r2
 802ba2a:	f000 8117 	beq.w	802bc5c <__aeabi_uidiv+0x244>
 802ba2e:	fab0 f380 	clz	r3, r0
 802ba32:	fab1 f281 	clz	r2, r1
 802ba36:	eba2 0303 	sub.w	r3, r2, r3
 802ba3a:	f1c3 031f 	rsb	r3, r3, #31
 802ba3e:	a204      	add	r2, pc, #16	; (adr r2, 802ba50 <__aeabi_uidiv+0x38>)
 802ba40:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 802ba44:	f04f 0200 	mov.w	r2, #0
 802ba48:	469f      	mov	pc, r3
 802ba4a:	bf00      	nop
 802ba4c:	f3af 8000 	nop.w
 802ba50:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 802ba54:	bf00      	nop
 802ba56:	eb42 0202 	adc.w	r2, r2, r2
 802ba5a:	bf28      	it	cs
 802ba5c:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 802ba60:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 802ba64:	bf00      	nop
 802ba66:	eb42 0202 	adc.w	r2, r2, r2
 802ba6a:	bf28      	it	cs
 802ba6c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 802ba70:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 802ba74:	bf00      	nop
 802ba76:	eb42 0202 	adc.w	r2, r2, r2
 802ba7a:	bf28      	it	cs
 802ba7c:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 802ba80:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 802ba84:	bf00      	nop
 802ba86:	eb42 0202 	adc.w	r2, r2, r2
 802ba8a:	bf28      	it	cs
 802ba8c:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 802ba90:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 802ba94:	bf00      	nop
 802ba96:	eb42 0202 	adc.w	r2, r2, r2
 802ba9a:	bf28      	it	cs
 802ba9c:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 802baa0:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 802baa4:	bf00      	nop
 802baa6:	eb42 0202 	adc.w	r2, r2, r2
 802baaa:	bf28      	it	cs
 802baac:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 802bab0:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 802bab4:	bf00      	nop
 802bab6:	eb42 0202 	adc.w	r2, r2, r2
 802baba:	bf28      	it	cs
 802babc:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 802bac0:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 802bac4:	bf00      	nop
 802bac6:	eb42 0202 	adc.w	r2, r2, r2
 802baca:	bf28      	it	cs
 802bacc:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 802bad0:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 802bad4:	bf00      	nop
 802bad6:	eb42 0202 	adc.w	r2, r2, r2
 802bada:	bf28      	it	cs
 802badc:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 802bae0:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 802bae4:	bf00      	nop
 802bae6:	eb42 0202 	adc.w	r2, r2, r2
 802baea:	bf28      	it	cs
 802baec:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 802baf0:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 802baf4:	bf00      	nop
 802baf6:	eb42 0202 	adc.w	r2, r2, r2
 802bafa:	bf28      	it	cs
 802bafc:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 802bb00:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 802bb04:	bf00      	nop
 802bb06:	eb42 0202 	adc.w	r2, r2, r2
 802bb0a:	bf28      	it	cs
 802bb0c:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 802bb10:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 802bb14:	bf00      	nop
 802bb16:	eb42 0202 	adc.w	r2, r2, r2
 802bb1a:	bf28      	it	cs
 802bb1c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 802bb20:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 802bb24:	bf00      	nop
 802bb26:	eb42 0202 	adc.w	r2, r2, r2
 802bb2a:	bf28      	it	cs
 802bb2c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 802bb30:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 802bb34:	bf00      	nop
 802bb36:	eb42 0202 	adc.w	r2, r2, r2
 802bb3a:	bf28      	it	cs
 802bb3c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 802bb40:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 802bb44:	bf00      	nop
 802bb46:	eb42 0202 	adc.w	r2, r2, r2
 802bb4a:	bf28      	it	cs
 802bb4c:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 802bb50:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 802bb54:	bf00      	nop
 802bb56:	eb42 0202 	adc.w	r2, r2, r2
 802bb5a:	bf28      	it	cs
 802bb5c:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 802bb60:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 802bb64:	bf00      	nop
 802bb66:	eb42 0202 	adc.w	r2, r2, r2
 802bb6a:	bf28      	it	cs
 802bb6c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 802bb70:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 802bb74:	bf00      	nop
 802bb76:	eb42 0202 	adc.w	r2, r2, r2
 802bb7a:	bf28      	it	cs
 802bb7c:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 802bb80:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 802bb84:	bf00      	nop
 802bb86:	eb42 0202 	adc.w	r2, r2, r2
 802bb8a:	bf28      	it	cs
 802bb8c:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 802bb90:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 802bb94:	bf00      	nop
 802bb96:	eb42 0202 	adc.w	r2, r2, r2
 802bb9a:	bf28      	it	cs
 802bb9c:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 802bba0:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 802bba4:	bf00      	nop
 802bba6:	eb42 0202 	adc.w	r2, r2, r2
 802bbaa:	bf28      	it	cs
 802bbac:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 802bbb0:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 802bbb4:	bf00      	nop
 802bbb6:	eb42 0202 	adc.w	r2, r2, r2
 802bbba:	bf28      	it	cs
 802bbbc:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 802bbc0:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 802bbc4:	bf00      	nop
 802bbc6:	eb42 0202 	adc.w	r2, r2, r2
 802bbca:	bf28      	it	cs
 802bbcc:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 802bbd0:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 802bbd4:	bf00      	nop
 802bbd6:	eb42 0202 	adc.w	r2, r2, r2
 802bbda:	bf28      	it	cs
 802bbdc:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 802bbe0:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 802bbe4:	bf00      	nop
 802bbe6:	eb42 0202 	adc.w	r2, r2, r2
 802bbea:	bf28      	it	cs
 802bbec:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 802bbf0:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 802bbf4:	bf00      	nop
 802bbf6:	eb42 0202 	adc.w	r2, r2, r2
 802bbfa:	bf28      	it	cs
 802bbfc:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 802bc00:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 802bc04:	bf00      	nop
 802bc06:	eb42 0202 	adc.w	r2, r2, r2
 802bc0a:	bf28      	it	cs
 802bc0c:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 802bc10:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 802bc14:	bf00      	nop
 802bc16:	eb42 0202 	adc.w	r2, r2, r2
 802bc1a:	bf28      	it	cs
 802bc1c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 802bc20:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 802bc24:	bf00      	nop
 802bc26:	eb42 0202 	adc.w	r2, r2, r2
 802bc2a:	bf28      	it	cs
 802bc2c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 802bc30:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 802bc34:	bf00      	nop
 802bc36:	eb42 0202 	adc.w	r2, r2, r2
 802bc3a:	bf28      	it	cs
 802bc3c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 802bc40:	ebb0 0f01 	cmp.w	r0, r1
 802bc44:	bf00      	nop
 802bc46:	eb42 0202 	adc.w	r2, r2, r2
 802bc4a:	bf28      	it	cs
 802bc4c:	eba0 0001 	subcs.w	r0, r0, r1
 802bc50:	4610      	mov	r0, r2
 802bc52:	4770      	bx	lr
 802bc54:	bf0c      	ite	eq
 802bc56:	2001      	moveq	r0, #1
 802bc58:	2000      	movne	r0, #0
 802bc5a:	4770      	bx	lr
 802bc5c:	fab1 f281 	clz	r2, r1
 802bc60:	f1c2 021f 	rsb	r2, r2, #31
 802bc64:	fa20 f002 	lsr.w	r0, r0, r2
 802bc68:	4770      	bx	lr
 802bc6a:	b108      	cbz	r0, 802bc70 <__aeabi_uidiv+0x258>
 802bc6c:	f04f 30ff 	mov.w	r0, #4294967295
 802bc70:	f000 b80e 	b.w	802bc90 <__aeabi_idiv0>

0802bc74 <__aeabi_uidivmod>:
 802bc74:	2900      	cmp	r1, #0
 802bc76:	d0f8      	beq.n	802bc6a <__aeabi_uidiv+0x252>
 802bc78:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 802bc7c:	f7ff fecc 	bl	802ba18 <__aeabi_uidiv>
 802bc80:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 802bc84:	fb02 f300 	mul.w	r3, r2, r0
 802bc88:	eba1 0103 	sub.w	r1, r1, r3
 802bc8c:	4770      	bx	lr
 802bc8e:	bf00      	nop

0802bc90 <__aeabi_idiv0>:
 802bc90:	4770      	bx	lr
 802bc92:	bf00      	nop

0802bc94 <__aeabi_drsub>:
 802bc94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 802bc98:	e002      	b.n	802bca0 <__adddf3>
 802bc9a:	bf00      	nop

0802bc9c <__aeabi_dsub>:
 802bc9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802bca0 <__adddf3>:
 802bca0:	b530      	push	{r4, r5, lr}
 802bca2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 802bca6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 802bcaa:	ea94 0f05 	teq	r4, r5
 802bcae:	bf08      	it	eq
 802bcb0:	ea90 0f02 	teqeq	r0, r2
 802bcb4:	bf1f      	itttt	ne
 802bcb6:	ea54 0c00 	orrsne.w	ip, r4, r0
 802bcba:	ea55 0c02 	orrsne.w	ip, r5, r2
 802bcbe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802bcc2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 802bcc6:	f000 80e2 	beq.w	802be8e <__adddf3+0x1ee>
 802bcca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802bcce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802bcd2:	bfb8      	it	lt
 802bcd4:	426d      	neglt	r5, r5
 802bcd6:	dd0c      	ble.n	802bcf2 <__adddf3+0x52>
 802bcd8:	442c      	add	r4, r5
 802bcda:	ea80 0202 	eor.w	r2, r0, r2
 802bcde:	ea81 0303 	eor.w	r3, r1, r3
 802bce2:	ea82 0000 	eor.w	r0, r2, r0
 802bce6:	ea83 0101 	eor.w	r1, r3, r1
 802bcea:	ea80 0202 	eor.w	r2, r0, r2
 802bcee:	ea81 0303 	eor.w	r3, r1, r3
 802bcf2:	2d36      	cmp	r5, #54	; 0x36
 802bcf4:	bf88      	it	hi
 802bcf6:	bd30      	pophi	{r4, r5, pc}
 802bcf8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 802bcfc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802bd00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 802bd04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 802bd08:	d002      	beq.n	802bd10 <__adddf3+0x70>
 802bd0a:	4240      	negs	r0, r0
 802bd0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802bd10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 802bd14:	ea4f 3303 	mov.w	r3, r3, lsl #12
 802bd18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 802bd1c:	d002      	beq.n	802bd24 <__adddf3+0x84>
 802bd1e:	4252      	negs	r2, r2
 802bd20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 802bd24:	ea94 0f05 	teq	r4, r5
 802bd28:	f000 80a7 	beq.w	802be7a <__adddf3+0x1da>
 802bd2c:	f1a4 0401 	sub.w	r4, r4, #1
 802bd30:	f1d5 0e20 	rsbs	lr, r5, #32
 802bd34:	db0d      	blt.n	802bd52 <__adddf3+0xb2>
 802bd36:	fa02 fc0e 	lsl.w	ip, r2, lr
 802bd3a:	fa22 f205 	lsr.w	r2, r2, r5
 802bd3e:	1880      	adds	r0, r0, r2
 802bd40:	f141 0100 	adc.w	r1, r1, #0
 802bd44:	fa03 f20e 	lsl.w	r2, r3, lr
 802bd48:	1880      	adds	r0, r0, r2
 802bd4a:	fa43 f305 	asr.w	r3, r3, r5
 802bd4e:	4159      	adcs	r1, r3
 802bd50:	e00e      	b.n	802bd70 <__adddf3+0xd0>
 802bd52:	f1a5 0520 	sub.w	r5, r5, #32
 802bd56:	f10e 0e20 	add.w	lr, lr, #32
 802bd5a:	2a01      	cmp	r2, #1
 802bd5c:	fa03 fc0e 	lsl.w	ip, r3, lr
 802bd60:	bf28      	it	cs
 802bd62:	f04c 0c02 	orrcs.w	ip, ip, #2
 802bd66:	fa43 f305 	asr.w	r3, r3, r5
 802bd6a:	18c0      	adds	r0, r0, r3
 802bd6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802bd70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802bd74:	d507      	bpl.n	802bd86 <__adddf3+0xe6>
 802bd76:	f04f 0e00 	mov.w	lr, #0
 802bd7a:	f1dc 0c00 	rsbs	ip, ip, #0
 802bd7e:	eb7e 0000 	sbcs.w	r0, lr, r0
 802bd82:	eb6e 0101 	sbc.w	r1, lr, r1
 802bd86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802bd8a:	d31b      	bcc.n	802bdc4 <__adddf3+0x124>
 802bd8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802bd90:	d30c      	bcc.n	802bdac <__adddf3+0x10c>
 802bd92:	0849      	lsrs	r1, r1, #1
 802bd94:	ea5f 0030 	movs.w	r0, r0, rrx
 802bd98:	ea4f 0c3c 	mov.w	ip, ip, rrx
 802bd9c:	f104 0401 	add.w	r4, r4, #1
 802bda0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 802bda4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 802bda8:	f080 809a 	bcs.w	802bee0 <__adddf3+0x240>
 802bdac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802bdb0:	bf08      	it	eq
 802bdb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 802bdb6:	f150 0000 	adcs.w	r0, r0, #0
 802bdba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802bdbe:	ea41 0105 	orr.w	r1, r1, r5
 802bdc2:	bd30      	pop	{r4, r5, pc}
 802bdc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 802bdc8:	4140      	adcs	r0, r0
 802bdca:	eb41 0101 	adc.w	r1, r1, r1
 802bdce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802bdd2:	f1a4 0401 	sub.w	r4, r4, #1
 802bdd6:	d1e9      	bne.n	802bdac <__adddf3+0x10c>
 802bdd8:	f091 0f00 	teq	r1, #0
 802bddc:	bf04      	itt	eq
 802bdde:	4601      	moveq	r1, r0
 802bde0:	2000      	moveq	r0, #0
 802bde2:	fab1 f381 	clz	r3, r1
 802bde6:	bf08      	it	eq
 802bde8:	3320      	addeq	r3, #32
 802bdea:	f1a3 030b 	sub.w	r3, r3, #11
 802bdee:	f1b3 0220 	subs.w	r2, r3, #32
 802bdf2:	da0c      	bge.n	802be0e <__adddf3+0x16e>
 802bdf4:	320c      	adds	r2, #12
 802bdf6:	dd08      	ble.n	802be0a <__adddf3+0x16a>
 802bdf8:	f102 0c14 	add.w	ip, r2, #20
 802bdfc:	f1c2 020c 	rsb	r2, r2, #12
 802be00:	fa01 f00c 	lsl.w	r0, r1, ip
 802be04:	fa21 f102 	lsr.w	r1, r1, r2
 802be08:	e00c      	b.n	802be24 <__adddf3+0x184>
 802be0a:	f102 0214 	add.w	r2, r2, #20
 802be0e:	bfd8      	it	le
 802be10:	f1c2 0c20 	rsble	ip, r2, #32
 802be14:	fa01 f102 	lsl.w	r1, r1, r2
 802be18:	fa20 fc0c 	lsr.w	ip, r0, ip
 802be1c:	bfdc      	itt	le
 802be1e:	ea41 010c 	orrle.w	r1, r1, ip
 802be22:	4090      	lslle	r0, r2
 802be24:	1ae4      	subs	r4, r4, r3
 802be26:	bfa2      	ittt	ge
 802be28:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 802be2c:	4329      	orrge	r1, r5
 802be2e:	bd30      	popge	{r4, r5, pc}
 802be30:	ea6f 0404 	mvn.w	r4, r4
 802be34:	3c1f      	subs	r4, #31
 802be36:	da1c      	bge.n	802be72 <__adddf3+0x1d2>
 802be38:	340c      	adds	r4, #12
 802be3a:	dc0e      	bgt.n	802be5a <__adddf3+0x1ba>
 802be3c:	f104 0414 	add.w	r4, r4, #20
 802be40:	f1c4 0220 	rsb	r2, r4, #32
 802be44:	fa20 f004 	lsr.w	r0, r0, r4
 802be48:	fa01 f302 	lsl.w	r3, r1, r2
 802be4c:	ea40 0003 	orr.w	r0, r0, r3
 802be50:	fa21 f304 	lsr.w	r3, r1, r4
 802be54:	ea45 0103 	orr.w	r1, r5, r3
 802be58:	bd30      	pop	{r4, r5, pc}
 802be5a:	f1c4 040c 	rsb	r4, r4, #12
 802be5e:	f1c4 0220 	rsb	r2, r4, #32
 802be62:	fa20 f002 	lsr.w	r0, r0, r2
 802be66:	fa01 f304 	lsl.w	r3, r1, r4
 802be6a:	ea40 0003 	orr.w	r0, r0, r3
 802be6e:	4629      	mov	r1, r5
 802be70:	bd30      	pop	{r4, r5, pc}
 802be72:	fa21 f004 	lsr.w	r0, r1, r4
 802be76:	4629      	mov	r1, r5
 802be78:	bd30      	pop	{r4, r5, pc}
 802be7a:	f094 0f00 	teq	r4, #0
 802be7e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802be82:	bf06      	itte	eq
 802be84:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 802be88:	3401      	addeq	r4, #1
 802be8a:	3d01      	subne	r5, #1
 802be8c:	e74e      	b.n	802bd2c <__adddf3+0x8c>
 802be8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802be92:	bf18      	it	ne
 802be94:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 802be98:	d029      	beq.n	802beee <__adddf3+0x24e>
 802be9a:	ea94 0f05 	teq	r4, r5
 802be9e:	bf08      	it	eq
 802bea0:	ea90 0f02 	teqeq	r0, r2
 802bea4:	d005      	beq.n	802beb2 <__adddf3+0x212>
 802bea6:	ea54 0c00 	orrs.w	ip, r4, r0
 802beaa:	bf04      	itt	eq
 802beac:	4619      	moveq	r1, r3
 802beae:	4610      	moveq	r0, r2
 802beb0:	bd30      	pop	{r4, r5, pc}
 802beb2:	ea91 0f03 	teq	r1, r3
 802beb6:	bf1e      	ittt	ne
 802beb8:	2100      	movne	r1, #0
 802beba:	2000      	movne	r0, #0
 802bebc:	bd30      	popne	{r4, r5, pc}
 802bebe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802bec2:	d105      	bne.n	802bed0 <__adddf3+0x230>
 802bec4:	0040      	lsls	r0, r0, #1
 802bec6:	4149      	adcs	r1, r1
 802bec8:	bf28      	it	cs
 802beca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802bece:	bd30      	pop	{r4, r5, pc}
 802bed0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 802bed4:	bf3c      	itt	cc
 802bed6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 802beda:	bd30      	popcc	{r4, r5, pc}
 802bedc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802bee0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 802bee4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802bee8:	f04f 0000 	mov.w	r0, #0
 802beec:	bd30      	pop	{r4, r5, pc}
 802beee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802bef2:	bf1a      	itte	ne
 802bef4:	4619      	movne	r1, r3
 802bef6:	4610      	movne	r0, r2
 802bef8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 802befc:	bf1c      	itt	ne
 802befe:	460b      	movne	r3, r1
 802bf00:	4602      	movne	r2, r0
 802bf02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 802bf06:	bf06      	itte	eq
 802bf08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 802bf0c:	ea91 0f03 	teqeq	r1, r3
 802bf10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 802bf14:	bd30      	pop	{r4, r5, pc}
 802bf16:	bf00      	nop

0802bf18 <__aeabi_ui2d>:
 802bf18:	f090 0f00 	teq	r0, #0
 802bf1c:	bf04      	itt	eq
 802bf1e:	2100      	moveq	r1, #0
 802bf20:	4770      	bxeq	lr
 802bf22:	b530      	push	{r4, r5, lr}
 802bf24:	f44f 6480 	mov.w	r4, #1024	; 0x400
 802bf28:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802bf2c:	f04f 0500 	mov.w	r5, #0
 802bf30:	f04f 0100 	mov.w	r1, #0
 802bf34:	e750      	b.n	802bdd8 <__adddf3+0x138>
 802bf36:	bf00      	nop

0802bf38 <__aeabi_i2d>:
 802bf38:	f090 0f00 	teq	r0, #0
 802bf3c:	bf04      	itt	eq
 802bf3e:	2100      	moveq	r1, #0
 802bf40:	4770      	bxeq	lr
 802bf42:	b530      	push	{r4, r5, lr}
 802bf44:	f44f 6480 	mov.w	r4, #1024	; 0x400
 802bf48:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802bf4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802bf50:	bf48      	it	mi
 802bf52:	4240      	negmi	r0, r0
 802bf54:	f04f 0100 	mov.w	r1, #0
 802bf58:	e73e      	b.n	802bdd8 <__adddf3+0x138>
 802bf5a:	bf00      	nop

0802bf5c <__aeabi_f2d>:
 802bf5c:	0042      	lsls	r2, r0, #1
 802bf5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802bf62:	ea4f 0131 	mov.w	r1, r1, rrx
 802bf66:	ea4f 7002 	mov.w	r0, r2, lsl #28
 802bf6a:	bf1f      	itttt	ne
 802bf6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802bf70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 802bf74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 802bf78:	4770      	bxne	lr
 802bf7a:	f092 0f00 	teq	r2, #0
 802bf7e:	bf14      	ite	ne
 802bf80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 802bf84:	4770      	bxeq	lr
 802bf86:	b530      	push	{r4, r5, lr}
 802bf88:	f44f 7460 	mov.w	r4, #896	; 0x380
 802bf8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802bf90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802bf94:	e720      	b.n	802bdd8 <__adddf3+0x138>
 802bf96:	bf00      	nop

0802bf98 <__aeabi_ul2d>:
 802bf98:	ea50 0201 	orrs.w	r2, r0, r1
 802bf9c:	bf08      	it	eq
 802bf9e:	4770      	bxeq	lr
 802bfa0:	b530      	push	{r4, r5, lr}
 802bfa2:	f04f 0500 	mov.w	r5, #0
 802bfa6:	e00a      	b.n	802bfbe <__aeabi_l2d+0x16>

0802bfa8 <__aeabi_l2d>:
 802bfa8:	ea50 0201 	orrs.w	r2, r0, r1
 802bfac:	bf08      	it	eq
 802bfae:	4770      	bxeq	lr
 802bfb0:	b530      	push	{r4, r5, lr}
 802bfb2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802bfb6:	d502      	bpl.n	802bfbe <__aeabi_l2d+0x16>
 802bfb8:	4240      	negs	r0, r0
 802bfba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802bfbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 802bfc2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802bfc6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802bfca:	f43f aedc 	beq.w	802bd86 <__adddf3+0xe6>
 802bfce:	f04f 0203 	mov.w	r2, #3
 802bfd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802bfd6:	bf18      	it	ne
 802bfd8:	3203      	addne	r2, #3
 802bfda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802bfde:	bf18      	it	ne
 802bfe0:	3203      	addne	r2, #3
 802bfe2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802bfe6:	f1c2 0320 	rsb	r3, r2, #32
 802bfea:	fa00 fc03 	lsl.w	ip, r0, r3
 802bfee:	fa20 f002 	lsr.w	r0, r0, r2
 802bff2:	fa01 fe03 	lsl.w	lr, r1, r3
 802bff6:	ea40 000e 	orr.w	r0, r0, lr
 802bffa:	fa21 f102 	lsr.w	r1, r1, r2
 802bffe:	4414      	add	r4, r2
 802c000:	e6c1      	b.n	802bd86 <__adddf3+0xe6>
 802c002:	bf00      	nop

0802c004 <__aeabi_dmul>:
 802c004:	b570      	push	{r4, r5, r6, lr}
 802c006:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802c00a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 802c00e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802c012:	bf1d      	ittte	ne
 802c014:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802c018:	ea94 0f0c 	teqne	r4, ip
 802c01c:	ea95 0f0c 	teqne	r5, ip
 802c020:	f000 f8de 	bleq	802c1e0 <__aeabi_dmul+0x1dc>
 802c024:	442c      	add	r4, r5
 802c026:	ea81 0603 	eor.w	r6, r1, r3
 802c02a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 802c02e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 802c032:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802c036:	bf18      	it	ne
 802c038:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 802c03c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802c040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802c044:	d038      	beq.n	802c0b8 <__aeabi_dmul+0xb4>
 802c046:	fba0 ce02 	umull	ip, lr, r0, r2
 802c04a:	f04f 0500 	mov.w	r5, #0
 802c04e:	fbe1 e502 	umlal	lr, r5, r1, r2
 802c052:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802c056:	fbe0 e503 	umlal	lr, r5, r0, r3
 802c05a:	f04f 0600 	mov.w	r6, #0
 802c05e:	fbe1 5603 	umlal	r5, r6, r1, r3
 802c062:	f09c 0f00 	teq	ip, #0
 802c066:	bf18      	it	ne
 802c068:	f04e 0e01 	orrne.w	lr, lr, #1
 802c06c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 802c070:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 802c074:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802c078:	d204      	bcs.n	802c084 <__aeabi_dmul+0x80>
 802c07a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 802c07e:	416d      	adcs	r5, r5
 802c080:	eb46 0606 	adc.w	r6, r6, r6
 802c084:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802c088:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 802c08c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 802c090:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 802c094:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802c098:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802c09c:	bf88      	it	hi
 802c09e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 802c0a2:	d81e      	bhi.n	802c0e2 <__aeabi_dmul+0xde>
 802c0a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802c0a8:	bf08      	it	eq
 802c0aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 802c0ae:	f150 0000 	adcs.w	r0, r0, #0
 802c0b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802c0b6:	bd70      	pop	{r4, r5, r6, pc}
 802c0b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 802c0bc:	ea46 0101 	orr.w	r1, r6, r1
 802c0c0:	ea40 0002 	orr.w	r0, r0, r2
 802c0c4:	ea81 0103 	eor.w	r1, r1, r3
 802c0c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 802c0cc:	bfc2      	ittt	gt
 802c0ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 802c0d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802c0d6:	bd70      	popgt	{r4, r5, r6, pc}
 802c0d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802c0dc:	f04f 0e00 	mov.w	lr, #0
 802c0e0:	3c01      	subs	r4, #1
 802c0e2:	f300 80ab 	bgt.w	802c23c <__aeabi_dmul+0x238>
 802c0e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802c0ea:	bfde      	ittt	le
 802c0ec:	2000      	movle	r0, #0
 802c0ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 802c0f2:	bd70      	pople	{r4, r5, r6, pc}
 802c0f4:	f1c4 0400 	rsb	r4, r4, #0
 802c0f8:	3c20      	subs	r4, #32
 802c0fa:	da35      	bge.n	802c168 <__aeabi_dmul+0x164>
 802c0fc:	340c      	adds	r4, #12
 802c0fe:	dc1b      	bgt.n	802c138 <__aeabi_dmul+0x134>
 802c100:	f104 0414 	add.w	r4, r4, #20
 802c104:	f1c4 0520 	rsb	r5, r4, #32
 802c108:	fa00 f305 	lsl.w	r3, r0, r5
 802c10c:	fa20 f004 	lsr.w	r0, r0, r4
 802c110:	fa01 f205 	lsl.w	r2, r1, r5
 802c114:	ea40 0002 	orr.w	r0, r0, r2
 802c118:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 802c11c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802c120:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802c124:	fa21 f604 	lsr.w	r6, r1, r4
 802c128:	eb42 0106 	adc.w	r1, r2, r6
 802c12c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802c130:	bf08      	it	eq
 802c132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802c136:	bd70      	pop	{r4, r5, r6, pc}
 802c138:	f1c4 040c 	rsb	r4, r4, #12
 802c13c:	f1c4 0520 	rsb	r5, r4, #32
 802c140:	fa00 f304 	lsl.w	r3, r0, r4
 802c144:	fa20 f005 	lsr.w	r0, r0, r5
 802c148:	fa01 f204 	lsl.w	r2, r1, r4
 802c14c:	ea40 0002 	orr.w	r0, r0, r2
 802c150:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802c154:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802c158:	f141 0100 	adc.w	r1, r1, #0
 802c15c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802c160:	bf08      	it	eq
 802c162:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802c166:	bd70      	pop	{r4, r5, r6, pc}
 802c168:	f1c4 0520 	rsb	r5, r4, #32
 802c16c:	fa00 f205 	lsl.w	r2, r0, r5
 802c170:	ea4e 0e02 	orr.w	lr, lr, r2
 802c174:	fa20 f304 	lsr.w	r3, r0, r4
 802c178:	fa01 f205 	lsl.w	r2, r1, r5
 802c17c:	ea43 0302 	orr.w	r3, r3, r2
 802c180:	fa21 f004 	lsr.w	r0, r1, r4
 802c184:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802c188:	fa21 f204 	lsr.w	r2, r1, r4
 802c18c:	ea20 0002 	bic.w	r0, r0, r2
 802c190:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 802c194:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802c198:	bf08      	it	eq
 802c19a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802c19e:	bd70      	pop	{r4, r5, r6, pc}
 802c1a0:	f094 0f00 	teq	r4, #0
 802c1a4:	d10f      	bne.n	802c1c6 <__aeabi_dmul+0x1c2>
 802c1a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802c1aa:	0040      	lsls	r0, r0, #1
 802c1ac:	eb41 0101 	adc.w	r1, r1, r1
 802c1b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802c1b4:	bf08      	it	eq
 802c1b6:	3c01      	subeq	r4, #1
 802c1b8:	d0f7      	beq.n	802c1aa <__aeabi_dmul+0x1a6>
 802c1ba:	ea41 0106 	orr.w	r1, r1, r6
 802c1be:	f095 0f00 	teq	r5, #0
 802c1c2:	bf18      	it	ne
 802c1c4:	4770      	bxne	lr
 802c1c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802c1ca:	0052      	lsls	r2, r2, #1
 802c1cc:	eb43 0303 	adc.w	r3, r3, r3
 802c1d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 802c1d4:	bf08      	it	eq
 802c1d6:	3d01      	subeq	r5, #1
 802c1d8:	d0f7      	beq.n	802c1ca <__aeabi_dmul+0x1c6>
 802c1da:	ea43 0306 	orr.w	r3, r3, r6
 802c1de:	4770      	bx	lr
 802c1e0:	ea94 0f0c 	teq	r4, ip
 802c1e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802c1e8:	bf18      	it	ne
 802c1ea:	ea95 0f0c 	teqne	r5, ip
 802c1ee:	d00c      	beq.n	802c20a <__aeabi_dmul+0x206>
 802c1f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 802c1f4:	bf18      	it	ne
 802c1f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802c1fa:	d1d1      	bne.n	802c1a0 <__aeabi_dmul+0x19c>
 802c1fc:	ea81 0103 	eor.w	r1, r1, r3
 802c200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802c204:	f04f 0000 	mov.w	r0, #0
 802c208:	bd70      	pop	{r4, r5, r6, pc}
 802c20a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 802c20e:	bf06      	itte	eq
 802c210:	4610      	moveq	r0, r2
 802c212:	4619      	moveq	r1, r3
 802c214:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802c218:	d019      	beq.n	802c24e <__aeabi_dmul+0x24a>
 802c21a:	ea94 0f0c 	teq	r4, ip
 802c21e:	d102      	bne.n	802c226 <__aeabi_dmul+0x222>
 802c220:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 802c224:	d113      	bne.n	802c24e <__aeabi_dmul+0x24a>
 802c226:	ea95 0f0c 	teq	r5, ip
 802c22a:	d105      	bne.n	802c238 <__aeabi_dmul+0x234>
 802c22c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 802c230:	bf1c      	itt	ne
 802c232:	4610      	movne	r0, r2
 802c234:	4619      	movne	r1, r3
 802c236:	d10a      	bne.n	802c24e <__aeabi_dmul+0x24a>
 802c238:	ea81 0103 	eor.w	r1, r1, r3
 802c23c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802c240:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 802c244:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802c248:	f04f 0000 	mov.w	r0, #0
 802c24c:	bd70      	pop	{r4, r5, r6, pc}
 802c24e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 802c252:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802c256:	bd70      	pop	{r4, r5, r6, pc}

0802c258 <__aeabi_ddiv>:
 802c258:	b570      	push	{r4, r5, r6, lr}
 802c25a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802c25e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 802c262:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802c266:	bf1d      	ittte	ne
 802c268:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802c26c:	ea94 0f0c 	teqne	r4, ip
 802c270:	ea95 0f0c 	teqne	r5, ip
 802c274:	f000 f8a7 	bleq	802c3c6 <__aeabi_ddiv+0x16e>
 802c278:	eba4 0405 	sub.w	r4, r4, r5
 802c27c:	ea81 0e03 	eor.w	lr, r1, r3
 802c280:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 802c284:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802c288:	f000 8088 	beq.w	802c39c <__aeabi_ddiv+0x144>
 802c28c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 802c290:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 802c294:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802c298:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 802c29c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 802c2a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 802c2a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802c2a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 802c2ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 802c2b0:	429d      	cmp	r5, r3
 802c2b2:	bf08      	it	eq
 802c2b4:	4296      	cmpeq	r6, r2
 802c2b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802c2ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
 802c2be:	d202      	bcs.n	802c2c6 <__aeabi_ddiv+0x6e>
 802c2c0:	085b      	lsrs	r3, r3, #1
 802c2c2:	ea4f 0232 	mov.w	r2, r2, rrx
 802c2c6:	1ab6      	subs	r6, r6, r2
 802c2c8:	eb65 0503 	sbc.w	r5, r5, r3
 802c2cc:	085b      	lsrs	r3, r3, #1
 802c2ce:	ea4f 0232 	mov.w	r2, r2, rrx
 802c2d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802c2d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802c2da:	ebb6 0e02 	subs.w	lr, r6, r2
 802c2de:	eb75 0e03 	sbcs.w	lr, r5, r3
 802c2e2:	bf22      	ittt	cs
 802c2e4:	1ab6      	subcs	r6, r6, r2
 802c2e6:	4675      	movcs	r5, lr
 802c2e8:	ea40 000c 	orrcs.w	r0, r0, ip
 802c2ec:	085b      	lsrs	r3, r3, #1
 802c2ee:	ea4f 0232 	mov.w	r2, r2, rrx
 802c2f2:	ebb6 0e02 	subs.w	lr, r6, r2
 802c2f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 802c2fa:	bf22      	ittt	cs
 802c2fc:	1ab6      	subcs	r6, r6, r2
 802c2fe:	4675      	movcs	r5, lr
 802c300:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 802c304:	085b      	lsrs	r3, r3, #1
 802c306:	ea4f 0232 	mov.w	r2, r2, rrx
 802c30a:	ebb6 0e02 	subs.w	lr, r6, r2
 802c30e:	eb75 0e03 	sbcs.w	lr, r5, r3
 802c312:	bf22      	ittt	cs
 802c314:	1ab6      	subcs	r6, r6, r2
 802c316:	4675      	movcs	r5, lr
 802c318:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 802c31c:	085b      	lsrs	r3, r3, #1
 802c31e:	ea4f 0232 	mov.w	r2, r2, rrx
 802c322:	ebb6 0e02 	subs.w	lr, r6, r2
 802c326:	eb75 0e03 	sbcs.w	lr, r5, r3
 802c32a:	bf22      	ittt	cs
 802c32c:	1ab6      	subcs	r6, r6, r2
 802c32e:	4675      	movcs	r5, lr
 802c330:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 802c334:	ea55 0e06 	orrs.w	lr, r5, r6
 802c338:	d018      	beq.n	802c36c <__aeabi_ddiv+0x114>
 802c33a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 802c33e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 802c342:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802c346:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802c34a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 802c34e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 802c352:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802c356:	d1c0      	bne.n	802c2da <__aeabi_ddiv+0x82>
 802c358:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802c35c:	d10b      	bne.n	802c376 <__aeabi_ddiv+0x11e>
 802c35e:	ea41 0100 	orr.w	r1, r1, r0
 802c362:	f04f 0000 	mov.w	r0, #0
 802c366:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802c36a:	e7b6      	b.n	802c2da <__aeabi_ddiv+0x82>
 802c36c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802c370:	bf04      	itt	eq
 802c372:	4301      	orreq	r1, r0
 802c374:	2000      	moveq	r0, #0
 802c376:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802c37a:	bf88      	it	hi
 802c37c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 802c380:	f63f aeaf 	bhi.w	802c0e2 <__aeabi_dmul+0xde>
 802c384:	ebb5 0c03 	subs.w	ip, r5, r3
 802c388:	bf04      	itt	eq
 802c38a:	ebb6 0c02 	subseq.w	ip, r6, r2
 802c38e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 802c392:	f150 0000 	adcs.w	r0, r0, #0
 802c396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802c39a:	bd70      	pop	{r4, r5, r6, pc}
 802c39c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 802c3a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 802c3a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802c3a8:	bfc2      	ittt	gt
 802c3aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 802c3ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802c3b2:	bd70      	popgt	{r4, r5, r6, pc}
 802c3b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802c3b8:	f04f 0e00 	mov.w	lr, #0
 802c3bc:	3c01      	subs	r4, #1
 802c3be:	e690      	b.n	802c0e2 <__aeabi_dmul+0xde>
 802c3c0:	ea45 0e06 	orr.w	lr, r5, r6
 802c3c4:	e68d      	b.n	802c0e2 <__aeabi_dmul+0xde>
 802c3c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802c3ca:	ea94 0f0c 	teq	r4, ip
 802c3ce:	bf08      	it	eq
 802c3d0:	ea95 0f0c 	teqeq	r5, ip
 802c3d4:	f43f af3b 	beq.w	802c24e <__aeabi_dmul+0x24a>
 802c3d8:	ea94 0f0c 	teq	r4, ip
 802c3dc:	d10a      	bne.n	802c3f4 <__aeabi_ddiv+0x19c>
 802c3de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 802c3e2:	f47f af34 	bne.w	802c24e <__aeabi_dmul+0x24a>
 802c3e6:	ea95 0f0c 	teq	r5, ip
 802c3ea:	f47f af25 	bne.w	802c238 <__aeabi_dmul+0x234>
 802c3ee:	4610      	mov	r0, r2
 802c3f0:	4619      	mov	r1, r3
 802c3f2:	e72c      	b.n	802c24e <__aeabi_dmul+0x24a>
 802c3f4:	ea95 0f0c 	teq	r5, ip
 802c3f8:	d106      	bne.n	802c408 <__aeabi_ddiv+0x1b0>
 802c3fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 802c3fe:	f43f aefd 	beq.w	802c1fc <__aeabi_dmul+0x1f8>
 802c402:	4610      	mov	r0, r2
 802c404:	4619      	mov	r1, r3
 802c406:	e722      	b.n	802c24e <__aeabi_dmul+0x24a>
 802c408:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 802c40c:	bf18      	it	ne
 802c40e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802c412:	f47f aec5 	bne.w	802c1a0 <__aeabi_dmul+0x19c>
 802c416:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 802c41a:	f47f af0d 	bne.w	802c238 <__aeabi_dmul+0x234>
 802c41e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 802c422:	f47f aeeb 	bne.w	802c1fc <__aeabi_dmul+0x1f8>
 802c426:	e712      	b.n	802c24e <__aeabi_dmul+0x24a>

0802c428 <__gedf2>:
 802c428:	f04f 3cff 	mov.w	ip, #4294967295
 802c42c:	e006      	b.n	802c43c <__cmpdf2+0x4>
 802c42e:	bf00      	nop

0802c430 <__ledf2>:
 802c430:	f04f 0c01 	mov.w	ip, #1
 802c434:	e002      	b.n	802c43c <__cmpdf2+0x4>
 802c436:	bf00      	nop

0802c438 <__cmpdf2>:
 802c438:	f04f 0c01 	mov.w	ip, #1
 802c43c:	f84d cd04 	str.w	ip, [sp, #-4]!
 802c440:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 802c444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802c448:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 802c44c:	bf18      	it	ne
 802c44e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 802c452:	d01b      	beq.n	802c48c <__cmpdf2+0x54>
 802c454:	b001      	add	sp, #4
 802c456:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802c45a:	bf0c      	ite	eq
 802c45c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 802c460:	ea91 0f03 	teqne	r1, r3
 802c464:	bf02      	ittt	eq
 802c466:	ea90 0f02 	teqeq	r0, r2
 802c46a:	2000      	moveq	r0, #0
 802c46c:	4770      	bxeq	lr
 802c46e:	f110 0f00 	cmn.w	r0, #0
 802c472:	ea91 0f03 	teq	r1, r3
 802c476:	bf58      	it	pl
 802c478:	4299      	cmppl	r1, r3
 802c47a:	bf08      	it	eq
 802c47c:	4290      	cmpeq	r0, r2
 802c47e:	bf2c      	ite	cs
 802c480:	17d8      	asrcs	r0, r3, #31
 802c482:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802c486:	f040 0001 	orr.w	r0, r0, #1
 802c48a:	4770      	bx	lr
 802c48c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 802c490:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802c494:	d102      	bne.n	802c49c <__cmpdf2+0x64>
 802c496:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802c49a:	d107      	bne.n	802c4ac <__cmpdf2+0x74>
 802c49c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 802c4a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802c4a4:	d1d6      	bne.n	802c454 <__cmpdf2+0x1c>
 802c4a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802c4aa:	d0d3      	beq.n	802c454 <__cmpdf2+0x1c>
 802c4ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 802c4b0:	4770      	bx	lr
 802c4b2:	bf00      	nop

0802c4b4 <__aeabi_cdrcmple>:
 802c4b4:	4684      	mov	ip, r0
 802c4b6:	4610      	mov	r0, r2
 802c4b8:	4662      	mov	r2, ip
 802c4ba:	468c      	mov	ip, r1
 802c4bc:	4619      	mov	r1, r3
 802c4be:	4663      	mov	r3, ip
 802c4c0:	e000      	b.n	802c4c4 <__aeabi_cdcmpeq>
 802c4c2:	bf00      	nop

0802c4c4 <__aeabi_cdcmpeq>:
 802c4c4:	b501      	push	{r0, lr}
 802c4c6:	f7ff ffb7 	bl	802c438 <__cmpdf2>
 802c4ca:	2800      	cmp	r0, #0
 802c4cc:	bf48      	it	mi
 802c4ce:	f110 0f00 	cmnmi.w	r0, #0
 802c4d2:	bd01      	pop	{r0, pc}

0802c4d4 <__aeabi_dcmpeq>:
 802c4d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 802c4d8:	f7ff fff4 	bl	802c4c4 <__aeabi_cdcmpeq>
 802c4dc:	bf0c      	ite	eq
 802c4de:	2001      	moveq	r0, #1
 802c4e0:	2000      	movne	r0, #0
 802c4e2:	f85d fb08 	ldr.w	pc, [sp], #8
 802c4e6:	bf00      	nop

0802c4e8 <__aeabi_dcmplt>:
 802c4e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 802c4ec:	f7ff ffea 	bl	802c4c4 <__aeabi_cdcmpeq>
 802c4f0:	bf34      	ite	cc
 802c4f2:	2001      	movcc	r0, #1
 802c4f4:	2000      	movcs	r0, #0
 802c4f6:	f85d fb08 	ldr.w	pc, [sp], #8
 802c4fa:	bf00      	nop

0802c4fc <__aeabi_dcmple>:
 802c4fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 802c500:	f7ff ffe0 	bl	802c4c4 <__aeabi_cdcmpeq>
 802c504:	bf94      	ite	ls
 802c506:	2001      	movls	r0, #1
 802c508:	2000      	movhi	r0, #0
 802c50a:	f85d fb08 	ldr.w	pc, [sp], #8
 802c50e:	bf00      	nop

0802c510 <__aeabi_dcmpge>:
 802c510:	f84d ed08 	str.w	lr, [sp, #-8]!
 802c514:	f7ff ffce 	bl	802c4b4 <__aeabi_cdrcmple>
 802c518:	bf94      	ite	ls
 802c51a:	2001      	movls	r0, #1
 802c51c:	2000      	movhi	r0, #0
 802c51e:	f85d fb08 	ldr.w	pc, [sp], #8
 802c522:	bf00      	nop

0802c524 <__aeabi_dcmpgt>:
 802c524:	f84d ed08 	str.w	lr, [sp, #-8]!
 802c528:	f7ff ffc4 	bl	802c4b4 <__aeabi_cdrcmple>
 802c52c:	bf34      	ite	cc
 802c52e:	2001      	movcc	r0, #1
 802c530:	2000      	movcs	r0, #0
 802c532:	f85d fb08 	ldr.w	pc, [sp], #8
 802c536:	bf00      	nop

0802c538 <__aeabi_d2iz>:
 802c538:	ea4f 0241 	mov.w	r2, r1, lsl #1
 802c53c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 802c540:	d215      	bcs.n	802c56e <__aeabi_d2iz+0x36>
 802c542:	d511      	bpl.n	802c568 <__aeabi_d2iz+0x30>
 802c544:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 802c548:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 802c54c:	d912      	bls.n	802c574 <__aeabi_d2iz+0x3c>
 802c54e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 802c552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c556:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 802c55a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 802c55e:	fa23 f002 	lsr.w	r0, r3, r2
 802c562:	bf18      	it	ne
 802c564:	4240      	negne	r0, r0
 802c566:	4770      	bx	lr
 802c568:	f04f 0000 	mov.w	r0, #0
 802c56c:	4770      	bx	lr
 802c56e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 802c572:	d105      	bne.n	802c580 <__aeabi_d2iz+0x48>
 802c574:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 802c578:	bf08      	it	eq
 802c57a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 802c57e:	4770      	bx	lr
 802c580:	f04f 0000 	mov.w	r0, #0
 802c584:	4770      	bx	lr
 802c586:	bf00      	nop

0802c588 <_ZNK5CTask7IsValidEv>:
	vTaskAllocateMPURegions(m_handleTask, xRegions);
#endif
}

inline
bool CTask::IsValid() const{
 802c588:	b480      	push	{r7}
 802c58a:	b083      	sub	sp, #12
 802c58c:	af00      	add	r7, sp, #0
 802c58e:	6078      	str	r0, [r7, #4]
	return m_handleTask != NULL;
 802c590:	687b      	ldr	r3, [r7, #4]
 802c592:	685b      	ldr	r3, [r3, #4]
 802c594:	2b00      	cmp	r3, #0
 802c596:	bf0c      	ite	eq
 802c598:	2300      	moveq	r3, #0
 802c59a:	2301      	movne	r3, #1
 802c59c:	b2db      	uxtb	r3, r3
}
 802c59e:	4618      	mov	r0, r3
 802c5a0:	f107 070c 	add.w	r7, r7, #12
 802c5a4:	46bd      	mov	sp, r7
 802c5a6:	bc80      	pop	{r7}
 802c5a8:	4770      	bx	lr
 802c5aa:	bf00      	nop

0802c5ac <_ZN5CTask6DetachEv>:

inline
xGenericHandle CTask::Detach() {
 802c5ac:	b480      	push	{r7}
 802c5ae:	b085      	sub	sp, #20
 802c5b0:	af00      	add	r7, sp, #0
 802c5b2:	6078      	str	r0, [r7, #4]
	xTaskHandle res = m_handleTask;
 802c5b4:	687b      	ldr	r3, [r7, #4]
 802c5b6:	685b      	ldr	r3, [r3, #4]
 802c5b8:	60fb      	str	r3, [r7, #12]
	m_handleTask = NULL;
 802c5ba:	687b      	ldr	r3, [r7, #4]
 802c5bc:	f04f 0200 	mov.w	r2, #0
 802c5c0:	605a      	str	r2, [r3, #4]
	return res;
 802c5c2:	68fb      	ldr	r3, [r7, #12]
}
 802c5c4:	4618      	mov	r0, r3
 802c5c6:	f107 0714 	add.w	r7, r7, #20
 802c5ca:	46bd      	mov	sp, r7
 802c5cc:	bc80      	pop	{r7}
 802c5ce:	4770      	bx	lr

0802c5d0 <_ZN12AManagedTask8OnCreateEPKctm>:
	 * @param uxPriority specifies the task priority.
	 *
	 * @return pdTRUE if success, pdFALSE otherwise. If the method return pdFALSE the task creation process
	 * is stopped and no FreeRTOS resource are allocated.
	 */
	virtual portBASE_TYPE OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) { return pdTRUE; }
 802c5d0:	b480      	push	{r7}
 802c5d2:	b085      	sub	sp, #20
 802c5d4:	af00      	add	r7, sp, #0
 802c5d6:	60f8      	str	r0, [r7, #12]
 802c5d8:	60b9      	str	r1, [r7, #8]
 802c5da:	603b      	str	r3, [r7, #0]
 802c5dc:	4613      	mov	r3, r2
 802c5de:	80fb      	strh	r3, [r7, #6]
 802c5e0:	f04f 0301 	mov.w	r3, #1
 802c5e4:	4618      	mov	r0, r3
 802c5e6:	f107 0714 	add.w	r7, r7, #20
 802c5ea:	46bd      	mov	sp, r7
 802c5ec:	bc80      	pop	{r7}
 802c5ee:	4770      	bx	lr

0802c5f0 <_ZN5CTask13EnterCriticalEv>:
    inline static void Yeld() { taskYIELD(); }

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void EnterCritical() { taskENTER_CRITICAL(); }
 802c5f0:	b580      	push	{r7, lr}
 802c5f2:	af00      	add	r7, sp, #0
 802c5f4:	f7e9 fe9c 	bl	8016330 <vPortEnterCritical>
 802c5f8:	bd80      	pop	{r7, pc}
 802c5fa:	bf00      	nop

0802c5fc <_ZN5CTask12ExitCriticalEv>:

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void ExitCritical() { taskEXIT_CRITICAL(); }
 802c5fc:	b580      	push	{r7, lr}
 802c5fe:	af00      	add	r7, sp, #0
 802c600:	f7e9 feac 	bl	801635c <vPortExitCritical>
 802c604:	bd80      	pop	{r7, pc}
 802c606:	bf00      	nop

0802c608 <_ZN12AManagedTask12HardwareInitEv>:
	 * The framework calls this function before the scheduler start. The default implementation simply return true.
	 * Override this method to perform task specific hardware initialization that does not use FreeRTOS API.
	 *
	 * @return true if success, false otherwise.
	 */
	virtual bool HardwareInit() { return true; }
 802c608:	b480      	push	{r7}
 802c60a:	b083      	sub	sp, #12
 802c60c:	af00      	add	r7, sp, #0
 802c60e:	6078      	str	r0, [r7, #4]
 802c610:	f04f 0301 	mov.w	r3, #1
 802c614:	4618      	mov	r0, r3
 802c616:	f107 070c 	add.w	r7, r7, #12
 802c61a:	46bd      	mov	sp, r7
 802c61c:	bc80      	pop	{r7}
 802c61e:	4770      	bx	lr

0802c620 <_ZN9CFreeRTOS15SuspendAllTasksEv>:
	static void EndScheduler() { vTaskEndScheduler(); }

	/**
	 * \sa <a href="http://www.freertos.org/a00134.html">vTaskSuspendAll</a> FreeRTOS API function.
	 */
	static void SuspendAllTasks() { vTaskSuspendAll(); }
 802c620:	b580      	push	{r7, lr}
 802c622:	af00      	add	r7, sp, #0
 802c624:	f7ea ffd8 	bl	80175d8 <vTaskSuspendAll>
 802c628:	bd80      	pop	{r7, pc}
 802c62a:	bf00      	nop

0802c62c <_ZN9CFreeRTOS14ResumeAllTasksEv>:

	/**
	 * \sa <a href="http://www.freertos.org/a00135.html">xTaskResumeAll</a> FreeRTOS API function.
	 */
	static signed portBASE_TYPE ResumeAllTasks() { return xTaskResumeAll(); }
 802c62c:	b580      	push	{r7, lr}
 802c62e:	af00      	add	r7, sp, #0
 802c630:	f7ea ffe4 	bl	80175fc <xTaskResumeAll>
 802c634:	4603      	mov	r3, r0
 802c636:	4618      	mov	r0, r3
 802c638:	bd80      	pop	{r7, pc}
 802c63a:	bf00      	nop

0802c63c <_ZN12IFreeRTOSObjC1Ev>:
#ifndef IFREERTOSPROTOCOL_H_
#define IFREERTOSPROTOCOL_H_

typedef void *xGenericHandle;

class IFreeRTOSObj {
 802c63c:	b480      	push	{r7}
 802c63e:	b083      	sub	sp, #12
 802c640:	af00      	add	r7, sp, #0
 802c642:	6078      	str	r0, [r7, #4]
 802c644:	687b      	ldr	r3, [r7, #4]
 802c646:	4a04      	ldr	r2, [pc, #16]	; (802c658 <_ZN12IFreeRTOSObjC1Ev+0x1c>)
 802c648:	601a      	str	r2, [r3, #0]
 802c64a:	687b      	ldr	r3, [r7, #4]
 802c64c:	4618      	mov	r0, r3
 802c64e:	f107 070c 	add.w	r7, r7, #12
 802c652:	46bd      	mov	sp, r7
 802c654:	bc80      	pop	{r7}
 802c656:	4770      	bx	lr
 802c658:	08035928 	.word	0x08035928

0802c65c <_ZN12CFileHandler15GetUSBConnectedEv>:
/**
  * @brief  gets connected status from USB
  *
  * @retval true for connected and false for not
  */
inline bool CFileHandler::GetUSBConnected(){
 802c65c:	b580      	push	{r7, lr}
 802c65e:	b082      	sub	sp, #8
 802c660:	af00      	add	r7, sp, #0
 802c662:	6078      	str	r0, [r7, #4]
	return g_MSC.IsDeviceConnected();
 802c664:	f643 7098 	movw	r0, #16280	; 0x3f98
 802c668:	f2c2 0000 	movt	r0, #8192	; 0x2000
 802c66c:	f7ec f808 	bl	8018680 <_ZN16CUSB_MassStorage17IsDeviceConnectedEv>
 802c670:	4603      	mov	r3, r0
}
 802c672:	4618      	mov	r0, r3
 802c674:	f107 0708 	add.w	r7, r7, #8
 802c678:	46bd      	mov	sp, r7
 802c67a:	bd80      	pop	{r7, pc}

0802c67c <_ZN9CFreeRTOS14StartSchedulerEv>:
	~CFreeRTOS();

	/**
	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function.
	 */
	static void StartScheduler() { vTaskStartScheduler(); }
 802c67c:	b580      	push	{r7, lr}
 802c67e:	af00      	add	r7, sp, #0
 802c680:	f7ea ff5c 	bl	801753c <vTaskStartScheduler>
 802c684:	bd80      	pop	{r7, pc}
 802c686:	bf00      	nop

0802c688 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 802c688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802c68a:	e003      	b.n	802c694 <LoopCopyDataInit>

0802c68c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 802c68c:	4b0e      	ldr	r3, [pc, #56]	; (802c6c8 <LoopFillZerobss+0x20>)
  ldr  r3, [r3, r1]
 802c68e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 802c690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802c692:	3104      	adds	r1, #4

0802c694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 802c694:	480d      	ldr	r0, [pc, #52]	; (802c6cc <LoopFillZerobss+0x24>)
  ldr  r3, =_edata
 802c696:	4b0e      	ldr	r3, [pc, #56]	; (802c6d0 <LoopFillZerobss+0x28>)
  adds  r2, r0, r1
 802c698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802c69a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 802c69c:	d3f6      	bcc.n	802c68c <CopyDataInit>
  ldr  r2, =_sbss
 802c69e:	4a0d      	ldr	r2, [pc, #52]	; (802c6d4 <LoopFillZerobss+0x2c>)
  b  LoopFillZerobss
 802c6a0:	e002      	b.n	802c6a8 <LoopFillZerobss>

0802c6a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802c6a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 802c6a4:	f842 3b04 	str.w	r3, [r2], #4

0802c6a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 802c6a8:	4b0b      	ldr	r3, [pc, #44]	; (802c6d8 <LoopFillZerobss+0x30>)
  cmp  r2, r3
 802c6aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 802c6ac:	d3f9      	bcc.n	802c6a2 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 802c6ae:	480b      	ldr	r0, [pc, #44]	; (802c6dc <LoopFillZerobss+0x34>)
 ldr     r1,[r0]
 802c6b0:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 802c6b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 802c6b6:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802c6b8:	f7f1 fe7c 	bl	801e3b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802c6bc:	f7f9 f804 	bl	80256c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802c6c0:	f7f1 fc2a 	bl	801df18 <main>
  bx  lr    
 802c6c4:	4770      	bx	lr
 802c6c6:	0000      	.short	0x0000
 802c6c8:	08036250 	.word	0x08036250
 802c6cc:	20000000 	.word	0x20000000
 802c6d0:	200009b8 	.word	0x200009b8
 802c6d4:	200009b8 	.word	0x200009b8
 802c6d8:	2000ac30 	.word	0x2000ac30
 802c6dc:	e000ed88 	.word	0xe000ed88

0802c6e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802c6e0:	e7fe      	b.n	802c6e0 <ADC_IRQHandler>
	...

0802c6e4 <__aeabi_atexit>:
 802c6e4:	4603      	mov	r3, r0
 802c6e6:	4608      	mov	r0, r1
 802c6e8:	4619      	mov	r1, r3
 802c6ea:	f7f8 bd83 	b.w	80251f4 <__cxa_atexit>
 802c6ee:	bf00      	nop

0802c6f0 <_ZdlPv>:
 802c6f0:	b108      	cbz	r0, 802c6f6 <_ZdlPv+0x6>
 802c6f2:	f7f9 b815 	b.w	8025720 <free>
 802c6f6:	4770      	bx	lr

0802c6f8 <__cxa_pure_virtual>:
 802c6f8:	f645 2148 	movw	r1, #23112	; 0x5a48
 802c6fc:	221b      	movs	r2, #27
 802c6fe:	b508      	push	{r3, lr}
 802c700:	f6c0 0103 	movt	r1, #2051	; 0x803
 802c704:	2002      	movs	r0, #2
 802c706:	f7fb fb4f 	bl	8027da8 <write>
 802c70a:	f000 f815 	bl	802c738 <_ZSt9terminatev>
 802c70e:	bf00      	nop

0802c710 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802c710:	b508      	push	{r3, lr}
 802c712:	4780      	blx	r0
 802c714:	f7f8 fd42 	bl	802519c <abort>
 802c718:	f000 fa5a 	bl	802cbd0 <__cxa_begin_catch>
 802c71c:	f7f8 fd3e 	bl	802519c <abort>
 802c720:	460c      	mov	r4, r1
 802c722:	4605      	mov	r5, r0
 802c724:	f000 fa98 	bl	802cc58 <__cxa_end_catch>
 802c728:	3401      	adds	r4, #1
 802c72a:	d001      	beq.n	802c730 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 802c72c:	f000 f8a6 	bl	802c87c <__cxa_end_cleanup>
 802c730:	4628      	mov	r0, r5
 802c732:	f000 f9bf 	bl	802cab4 <__cxa_call_unexpected>
 802c736:	bf00      	nop

0802c738 <_ZSt9terminatev>:
 802c738:	b508      	push	{r3, lr}
 802c73a:	f640 13b0 	movw	r3, #2480	; 0x9b0
 802c73e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802c742:	6818      	ldr	r0, [r3, #0]
 802c744:	f7ff ffe4 	bl	802c710 <_ZN10__cxxabiv111__terminateEPFvvE>

0802c748 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 802c748:	b508      	push	{r3, lr}
 802c74a:	4780      	blx	r0
 802c74c:	f7ff fff4 	bl	802c738 <_ZSt9terminatev>

0802c750 <_ZSt10unexpectedv>:
 802c750:	b508      	push	{r3, lr}
 802c752:	f640 13b4 	movw	r3, #2484	; 0x9b4
 802c756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802c75a:	681b      	ldr	r3, [r3, #0]
 802c75c:	4798      	blx	r3
 802c75e:	f7ff ffeb 	bl	802c738 <_ZSt9terminatev>
 802c762:	bf00      	nop

0802c764 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 802c764:	4b3e      	ldr	r3, [pc, #248]	; (802c860 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 802c766:	b570      	push	{r4, r5, r6, lr}
 802c768:	b082      	sub	sp, #8
 802c76a:	781a      	ldrb	r2, [r3, #0]
 802c76c:	2a00      	cmp	r2, #0
 802c76e:	d135      	bne.n	802c7dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 802c770:	2401      	movs	r4, #1
 802c772:	701c      	strb	r4, [r3, #0]
 802c774:	f000 fe48 	bl	802d408 <__cxa_current_exception_type>
 802c778:	2800      	cmp	r0, #0
 802c77a:	d047      	beq.n	802c80c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa8>
 802c77c:	6845      	ldr	r5, [r0, #4]
 802c77e:	f04f 36ff 	mov.w	r6, #4294967295
 802c782:	782b      	ldrb	r3, [r5, #0]
 802c784:	2b2a      	cmp	r3, #42	; 0x2a
 802c786:	ab02      	add	r3, sp, #8
 802c788:	bf08      	it	eq
 802c78a:	192d      	addeq	r5, r5, r4
 802c78c:	2100      	movs	r1, #0
 802c78e:	460a      	mov	r2, r1
 802c790:	f843 6d04 	str.w	r6, [r3, #-4]!
 802c794:	4628      	mov	r0, r5
 802c796:	4c33      	ldr	r4, [pc, #204]	; (802c864 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 802c798:	f7f7 fca0 	bl	80240dc <__cxa_demangle>
 802c79c:	2101      	movs	r1, #1
 802c79e:	2230      	movs	r2, #48	; 0x30
 802c7a0:	6823      	ldr	r3, [r4, #0]
 802c7a2:	68db      	ldr	r3, [r3, #12]
 802c7a4:	4606      	mov	r6, r0
 802c7a6:	4830      	ldr	r0, [pc, #192]	; (802c868 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 802c7a8:	f7f8 ff7a 	bl	80256a0 <fwrite>
 802c7ac:	9b01      	ldr	r3, [sp, #4]
 802c7ae:	b17b      	cbz	r3, 802c7d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 802c7b0:	6823      	ldr	r3, [r4, #0]
 802c7b2:	4628      	mov	r0, r5
 802c7b4:	68d9      	ldr	r1, [r3, #12]
 802c7b6:	f7f8 fd9b 	bl	80252f0 <fputs>
 802c7ba:	6823      	ldr	r3, [r4, #0]
 802c7bc:	2101      	movs	r1, #1
 802c7be:	482b      	ldr	r0, [pc, #172]	; (802c86c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 802c7c0:	2202      	movs	r2, #2
 802c7c2:	68db      	ldr	r3, [r3, #12]
 802c7c4:	f7f8 ff6c 	bl	80256a0 <fwrite>
 802c7c8:	9b01      	ldr	r3, [sp, #4]
 802c7ca:	b18b      	cbz	r3, 802c7f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 802c7cc:	f000 fde4 	bl	802d398 <__cxa_rethrow>
 802c7d0:	6823      	ldr	r3, [r4, #0]
 802c7d2:	4630      	mov	r0, r6
 802c7d4:	68d9      	ldr	r1, [r3, #12]
 802c7d6:	f7f8 fd8b 	bl	80252f0 <fputs>
 802c7da:	e7ee      	b.n	802c7ba <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 802c7dc:	4b21      	ldr	r3, [pc, #132]	; (802c864 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 802c7de:	2101      	movs	r1, #1
 802c7e0:	221d      	movs	r2, #29
 802c7e2:	4823      	ldr	r0, [pc, #140]	; (802c870 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 802c7e4:	681b      	ldr	r3, [r3, #0]
 802c7e6:	68db      	ldr	r3, [r3, #12]
 802c7e8:	f7f8 ff5a 	bl	80256a0 <fwrite>
 802c7ec:	f7f8 fcd6 	bl	802519c <abort>
 802c7f0:	4630      	mov	r0, r6
 802c7f2:	f7f8 ff95 	bl	8025720 <free>
 802c7f6:	f000 fdcf 	bl	802d398 <__cxa_rethrow>
 802c7fa:	2901      	cmp	r1, #1
 802c7fc:	460e      	mov	r6, r1
 802c7fe:	d00f      	beq.n	802c820 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
 802c800:	f000 f9e6 	bl	802cbd0 <__cxa_begin_catch>
 802c804:	f000 fa28 	bl	802cc58 <__cxa_end_catch>
 802c808:	f7f8 fcc8 	bl	802519c <abort>
 802c80c:	4b15      	ldr	r3, [pc, #84]	; (802c864 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 802c80e:	4621      	mov	r1, r4
 802c810:	222d      	movs	r2, #45	; 0x2d
 802c812:	4818      	ldr	r0, [pc, #96]	; (802c874 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
 802c814:	681b      	ldr	r3, [r3, #0]
 802c816:	68db      	ldr	r3, [r3, #12]
 802c818:	f7f8 ff42 	bl	80256a0 <fwrite>
 802c81c:	f7f8 fcbe 	bl	802519c <abort>
 802c820:	f000 f9d6 	bl	802cbd0 <__cxa_begin_catch>
 802c824:	4603      	mov	r3, r0
 802c826:	681b      	ldr	r3, [r3, #0]
 802c828:	689b      	ldr	r3, [r3, #8]
 802c82a:	4798      	blx	r3
 802c82c:	6823      	ldr	r3, [r4, #0]
 802c82e:	4631      	mov	r1, r6
 802c830:	220b      	movs	r2, #11
 802c832:	68db      	ldr	r3, [r3, #12]
 802c834:	4605      	mov	r5, r0
 802c836:	4810      	ldr	r0, [pc, #64]	; (802c878 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
 802c838:	f7f8 ff32 	bl	80256a0 <fwrite>
 802c83c:	6823      	ldr	r3, [r4, #0]
 802c83e:	4628      	mov	r0, r5
 802c840:	68d9      	ldr	r1, [r3, #12]
 802c842:	f7f8 fd55 	bl	80252f0 <fputs>
 802c846:	6823      	ldr	r3, [r4, #0]
 802c848:	200a      	movs	r0, #10
 802c84a:	68d9      	ldr	r1, [r3, #12]
 802c84c:	f7f8 fd14 	bl	8025278 <fputc>
 802c850:	f000 fa02 	bl	802cc58 <__cxa_end_catch>
 802c854:	e7d8      	b.n	802c808 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 802c856:	f000 f9ff 	bl	802cc58 <__cxa_end_catch>
 802c85a:	f000 f80f 	bl	802c87c <__cxa_end_cleanup>
 802c85e:	bf00      	nop
 802c860:	20003fb0 	.word	0x20003fb0
 802c864:	20000008 	.word	0x20000008
 802c868:	08035a84 	.word	0x08035a84
 802c86c:	08035ab8 	.word	0x08035ab8
 802c870:	08035a64 	.word	0x08035a64
 802c874:	08035abc 	.word	0x08035abc
 802c878:	08035aec 	.word	0x08035aec

0802c87c <__cxa_end_cleanup>:
 802c87c:	b41e      	push	{r1, r2, r3, r4}
 802c87e:	f000 f8a9 	bl	802c9d4 <__gnu_end_cleanup>
 802c882:	bc1e      	pop	{r1, r2, r3, r4}
 802c884:	f7f8 fa58 	bl	8024d38 <_Unwind_Resume>

0802c888 <__cxa_type_match>:
 802c888:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c88a:	461e      	mov	r6, r3
 802c88c:	7803      	ldrb	r3, [r0, #0]
 802c88e:	b083      	sub	sp, #12
 802c890:	460d      	mov	r5, r1
 802c892:	2b47      	cmp	r3, #71	; 0x47
 802c894:	d02c      	beq.n	802c8f0 <__cxa_type_match+0x68>
 802c896:	4c31      	ldr	r4, [pc, #196]	; (802c95c <__cxa_type_match+0xd4>)
 802c898:	6823      	ldr	r3, [r4, #0]
 802c89a:	4620      	mov	r0, r4
 802c89c:	6832      	ldr	r2, [r6, #0]
 802c89e:	689b      	ldr	r3, [r3, #8]
 802c8a0:	9201      	str	r2, [sp, #4]
 802c8a2:	4798      	blx	r3
 802c8a4:	b110      	cbz	r0, 802c8ac <__cxa_type_match+0x24>
 802c8a6:	9b01      	ldr	r3, [sp, #4]
 802c8a8:	681b      	ldr	r3, [r3, #0]
 802c8aa:	9301      	str	r3, [sp, #4]
 802c8ac:	682f      	ldr	r7, [r5, #0]
 802c8ae:	4628      	mov	r0, r5
 802c8b0:	4621      	mov	r1, r4
 802c8b2:	aa01      	add	r2, sp, #4
 802c8b4:	2301      	movs	r3, #1
 802c8b6:	693f      	ldr	r7, [r7, #16]
 802c8b8:	47b8      	blx	r7
 802c8ba:	b1b8      	cbz	r0, 802c8ec <__cxa_type_match+0x64>
 802c8bc:	9b01      	ldr	r3, [sp, #4]
 802c8be:	4a28      	ldr	r2, [pc, #160]	; (802c960 <__cxa_type_match+0xd8>)
 802c8c0:	6033      	str	r3, [r6, #0]
 802c8c2:	6812      	ldr	r2, [r2, #0]
 802c8c4:	682b      	ldr	r3, [r5, #0]
 802c8c6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 802c8ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802c8ce:	f000 fea1 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802c8d2:	b150      	cbz	r0, 802c8ea <__cxa_type_match+0x62>
 802c8d4:	68eb      	ldr	r3, [r5, #12]
 802c8d6:	2b00      	cmp	r3, #0
 802c8d8:	d03e      	beq.n	802c958 <__cxa_type_match+0xd0>
 802c8da:	681b      	ldr	r3, [r3, #0]
 802c8dc:	4921      	ldr	r1, [pc, #132]	; (802c964 <__cxa_type_match+0xdc>)
 802c8de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802c8e2:	f000 fe97 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802c8e6:	2800      	cmp	r0, #0
 802c8e8:	d022      	beq.n	802c930 <__cxa_type_match+0xa8>
 802c8ea:	2001      	movs	r0, #1
 802c8ec:	b003      	add	sp, #12
 802c8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c8f0:	7843      	ldrb	r3, [r0, #1]
 802c8f2:	2b4e      	cmp	r3, #78	; 0x4e
 802c8f4:	d1cf      	bne.n	802c896 <__cxa_type_match+0xe>
 802c8f6:	7883      	ldrb	r3, [r0, #2]
 802c8f8:	2b55      	cmp	r3, #85	; 0x55
 802c8fa:	d1cc      	bne.n	802c896 <__cxa_type_match+0xe>
 802c8fc:	78c3      	ldrb	r3, [r0, #3]
 802c8fe:	2b43      	cmp	r3, #67	; 0x43
 802c900:	d1c9      	bne.n	802c896 <__cxa_type_match+0xe>
 802c902:	7903      	ldrb	r3, [r0, #4]
 802c904:	2b46      	cmp	r3, #70	; 0x46
 802c906:	d01c      	beq.n	802c942 <__cxa_type_match+0xba>
 802c908:	7903      	ldrb	r3, [r0, #4]
 802c90a:	2b43      	cmp	r3, #67	; 0x43
 802c90c:	d1c3      	bne.n	802c896 <__cxa_type_match+0xe>
 802c90e:	7943      	ldrb	r3, [r0, #5]
 802c910:	2b2b      	cmp	r3, #43	; 0x2b
 802c912:	d1c0      	bne.n	802c896 <__cxa_type_match+0xe>
 802c914:	7983      	ldrb	r3, [r0, #6]
 802c916:	2b2b      	cmp	r3, #43	; 0x2b
 802c918:	d1bd      	bne.n	802c896 <__cxa_type_match+0xe>
 802c91a:	79c3      	ldrb	r3, [r0, #7]
 802c91c:	2b01      	cmp	r3, #1
 802c91e:	d8ba      	bhi.n	802c896 <__cxa_type_match+0xe>
 802c920:	bf0a      	itet	eq
 802c922:	f850 3c20 	ldreq.w	r3, [r0, #-32]
 802c926:	f850 4c20 	ldrne.w	r4, [r0, #-32]
 802c92a:	f853 4c78 	ldreq.w	r4, [r3, #-120]
 802c92e:	e7b3      	b.n	802c898 <__cxa_type_match+0x10>
 802c930:	68e8      	ldr	r0, [r5, #12]
 802c932:	68e1      	ldr	r1, [r4, #12]
 802c934:	f000 fe6e 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802c938:	2800      	cmp	r0, #0
 802c93a:	bf0c      	ite	eq
 802c93c:	2002      	moveq	r0, #2
 802c93e:	2001      	movne	r0, #1
 802c940:	e7d4      	b.n	802c8ec <__cxa_type_match+0x64>
 802c942:	7943      	ldrb	r3, [r0, #5]
 802c944:	2b4f      	cmp	r3, #79	; 0x4f
 802c946:	d1df      	bne.n	802c908 <__cxa_type_match+0x80>
 802c948:	7983      	ldrb	r3, [r0, #6]
 802c94a:	2b52      	cmp	r3, #82	; 0x52
 802c94c:	d1dc      	bne.n	802c908 <__cxa_type_match+0x80>
 802c94e:	79c3      	ldrb	r3, [r0, #7]
 802c950:	4c05      	ldr	r4, [pc, #20]	; (802c968 <__cxa_type_match+0xe0>)
 802c952:	2b00      	cmp	r3, #0
 802c954:	d0a0      	beq.n	802c898 <__cxa_type_match+0x10>
 802c956:	e7d7      	b.n	802c908 <__cxa_type_match+0x80>
 802c958:	f000 f876 	bl	802ca48 <__cxa_bad_typeid>
 802c95c:	08035b7c 	.word	0x08035b7c
 802c960:	08035bdc 	.word	0x08035bdc
 802c964:	08035bec 	.word	0x08035bec
 802c968:	08035b10 	.word	0x08035b10

0802c96c <__cxa_begin_cleanup>:
 802c96c:	b510      	push	{r4, lr}
 802c96e:	4604      	mov	r4, r0
 802c970:	f000 f9ec 	bl	802cd4c <__cxa_get_globals>
 802c974:	f1a4 0220 	sub.w	r2, r4, #32
 802c978:	7823      	ldrb	r3, [r4, #0]
 802c97a:	2b47      	cmp	r3, #71	; 0x47
 802c97c:	d005      	beq.n	802c98a <__cxa_begin_cleanup+0x1e>
 802c97e:	6883      	ldr	r3, [r0, #8]
 802c980:	2b00      	cmp	r3, #0
 802c982:	d124      	bne.n	802c9ce <__cxa_begin_cleanup+0x62>
 802c984:	6082      	str	r2, [r0, #8]
 802c986:	2001      	movs	r0, #1
 802c988:	bd10      	pop	{r4, pc}
 802c98a:	7863      	ldrb	r3, [r4, #1]
 802c98c:	2b4e      	cmp	r3, #78	; 0x4e
 802c98e:	d1f6      	bne.n	802c97e <__cxa_begin_cleanup+0x12>
 802c990:	78a3      	ldrb	r3, [r4, #2]
 802c992:	2b55      	cmp	r3, #85	; 0x55
 802c994:	d1f3      	bne.n	802c97e <__cxa_begin_cleanup+0x12>
 802c996:	78e3      	ldrb	r3, [r4, #3]
 802c998:	2b43      	cmp	r3, #67	; 0x43
 802c99a:	d1f0      	bne.n	802c97e <__cxa_begin_cleanup+0x12>
 802c99c:	7923      	ldrb	r3, [r4, #4]
 802c99e:	2b43      	cmp	r3, #67	; 0x43
 802c9a0:	d1ed      	bne.n	802c97e <__cxa_begin_cleanup+0x12>
 802c9a2:	7963      	ldrb	r3, [r4, #5]
 802c9a4:	2b2b      	cmp	r3, #43	; 0x2b
 802c9a6:	d1ea      	bne.n	802c97e <__cxa_begin_cleanup+0x12>
 802c9a8:	79a3      	ldrb	r3, [r4, #6]
 802c9aa:	2b2b      	cmp	r3, #43	; 0x2b
 802c9ac:	d1e7      	bne.n	802c97e <__cxa_begin_cleanup+0x12>
 802c9ae:	79e3      	ldrb	r3, [r4, #7]
 802c9b0:	2b01      	cmp	r3, #1
 802c9b2:	d8e4      	bhi.n	802c97e <__cxa_begin_cleanup+0x12>
 802c9b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802c9b8:	3301      	adds	r3, #1
 802c9ba:	f844 3c04 	str.w	r3, [r4, #-4]
 802c9be:	2b01      	cmp	r3, #1
 802c9c0:	d1e1      	bne.n	802c986 <__cxa_begin_cleanup+0x1a>
 802c9c2:	6883      	ldr	r3, [r0, #8]
 802c9c4:	f844 3c08 	str.w	r3, [r4, #-8]
 802c9c8:	6082      	str	r2, [r0, #8]
 802c9ca:	2001      	movs	r0, #1
 802c9cc:	bd10      	pop	{r4, pc}
 802c9ce:	f7ff feb3 	bl	802c738 <_ZSt9terminatev>
 802c9d2:	bf00      	nop

0802c9d4 <__gnu_end_cleanup>:
 802c9d4:	b508      	push	{r3, lr}
 802c9d6:	f000 f9b9 	bl	802cd4c <__cxa_get_globals>
 802c9da:	6883      	ldr	r3, [r0, #8]
 802c9dc:	2b00      	cmp	r3, #0
 802c9de:	d030      	beq.n	802ca42 <__gnu_end_cleanup+0x6e>
 802c9e0:	f893 2020 	ldrb.w	r2, [r3, #32]
 802c9e4:	2a47      	cmp	r2, #71	; 0x47
 802c9e6:	d004      	beq.n	802c9f2 <__gnu_end_cleanup+0x1e>
 802c9e8:	2200      	movs	r2, #0
 802c9ea:	6082      	str	r2, [r0, #8]
 802c9ec:	f103 0020 	add.w	r0, r3, #32
 802c9f0:	bd08      	pop	{r3, pc}
 802c9f2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 802c9f6:	2a4e      	cmp	r2, #78	; 0x4e
 802c9f8:	d1f6      	bne.n	802c9e8 <__gnu_end_cleanup+0x14>
 802c9fa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 802c9fe:	2a55      	cmp	r2, #85	; 0x55
 802ca00:	d1f2      	bne.n	802c9e8 <__gnu_end_cleanup+0x14>
 802ca02:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 802ca06:	2a43      	cmp	r2, #67	; 0x43
 802ca08:	d1ee      	bne.n	802c9e8 <__gnu_end_cleanup+0x14>
 802ca0a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 802ca0e:	2a43      	cmp	r2, #67	; 0x43
 802ca10:	d1ea      	bne.n	802c9e8 <__gnu_end_cleanup+0x14>
 802ca12:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 802ca16:	2a2b      	cmp	r2, #43	; 0x2b
 802ca18:	d1e6      	bne.n	802c9e8 <__gnu_end_cleanup+0x14>
 802ca1a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 802ca1e:	2a2b      	cmp	r2, #43	; 0x2b
 802ca20:	d1e2      	bne.n	802c9e8 <__gnu_end_cleanup+0x14>
 802ca22:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 802ca26:	2a01      	cmp	r2, #1
 802ca28:	d8de      	bhi.n	802c9e8 <__gnu_end_cleanup+0x14>
 802ca2a:	69da      	ldr	r2, [r3, #28]
 802ca2c:	3a01      	subs	r2, #1
 802ca2e:	61da      	str	r2, [r3, #28]
 802ca30:	2a00      	cmp	r2, #0
 802ca32:	d1db      	bne.n	802c9ec <__gnu_end_cleanup+0x18>
 802ca34:	699a      	ldr	r2, [r3, #24]
 802ca36:	6082      	str	r2, [r0, #8]
 802ca38:	2200      	movs	r2, #0
 802ca3a:	f103 0020 	add.w	r0, r3, #32
 802ca3e:	619a      	str	r2, [r3, #24]
 802ca40:	bd08      	pop	{r3, pc}
 802ca42:	f7ff fe79 	bl	802c738 <_ZSt9terminatev>
 802ca46:	bf00      	nop

0802ca48 <__cxa_bad_typeid>:
 802ca48:	b508      	push	{r3, lr}
 802ca4a:	2004      	movs	r0, #4
 802ca4c:	f000 fe98 	bl	802d780 <__cxa_allocate_exception>
 802ca50:	4b05      	ldr	r3, [pc, #20]	; (802ca68 <__cxa_bad_typeid+0x20>)
 802ca52:	f645 5160 	movw	r1, #23904	; 0x5d60
 802ca56:	f24d 625d 	movw	r2, #54877	; 0xd65d
 802ca5a:	f6c0 0103 	movt	r1, #2051	; 0x803
 802ca5e:	f6c0 0202 	movt	r2, #2050	; 0x802
 802ca62:	6003      	str	r3, [r0, #0]
 802ca64:	f000 fc5c 	bl	802d320 <__cxa_throw>
 802ca68:	08035d50 	.word	0x08035d50

0802ca6c <__cxa_call_terminate>:
 802ca6c:	b510      	push	{r4, lr}
 802ca6e:	4604      	mov	r4, r0
 802ca70:	b120      	cbz	r0, 802ca7c <__cxa_call_terminate+0x10>
 802ca72:	f000 f8ad 	bl	802cbd0 <__cxa_begin_catch>
 802ca76:	7823      	ldrb	r3, [r4, #0]
 802ca78:	2b47      	cmp	r3, #71	; 0x47
 802ca7a:	d001      	beq.n	802ca80 <__cxa_call_terminate+0x14>
 802ca7c:	f7ff fe5c 	bl	802c738 <_ZSt9terminatev>
 802ca80:	7863      	ldrb	r3, [r4, #1]
 802ca82:	2b4e      	cmp	r3, #78	; 0x4e
 802ca84:	d1fa      	bne.n	802ca7c <__cxa_call_terminate+0x10>
 802ca86:	78a3      	ldrb	r3, [r4, #2]
 802ca88:	2b55      	cmp	r3, #85	; 0x55
 802ca8a:	d1f7      	bne.n	802ca7c <__cxa_call_terminate+0x10>
 802ca8c:	78e3      	ldrb	r3, [r4, #3]
 802ca8e:	2b43      	cmp	r3, #67	; 0x43
 802ca90:	d1f4      	bne.n	802ca7c <__cxa_call_terminate+0x10>
 802ca92:	7923      	ldrb	r3, [r4, #4]
 802ca94:	2b43      	cmp	r3, #67	; 0x43
 802ca96:	d1f1      	bne.n	802ca7c <__cxa_call_terminate+0x10>
 802ca98:	7963      	ldrb	r3, [r4, #5]
 802ca9a:	2b2b      	cmp	r3, #43	; 0x2b
 802ca9c:	d1ee      	bne.n	802ca7c <__cxa_call_terminate+0x10>
 802ca9e:	79a3      	ldrb	r3, [r4, #6]
 802caa0:	2b2b      	cmp	r3, #43	; 0x2b
 802caa2:	d1eb      	bne.n	802ca7c <__cxa_call_terminate+0x10>
 802caa4:	79e3      	ldrb	r3, [r4, #7]
 802caa6:	2b01      	cmp	r3, #1
 802caa8:	d8e8      	bhi.n	802ca7c <__cxa_call_terminate+0x10>
 802caaa:	f854 0c14 	ldr.w	r0, [r4, #-20]
 802caae:	f7ff fe2f 	bl	802c710 <_ZN10__cxxabiv111__terminateEPFvvE>
 802cab2:	bf00      	nop

0802cab4 <__cxa_call_unexpected>:
 802cab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cab8:	b085      	sub	sp, #20
 802caba:	7803      	ldrb	r3, [r0, #0]
 802cabc:	2b47      	cmp	r3, #71	; 0x47
 802cabe:	d010      	beq.n	802cae2 <__cxa_call_unexpected+0x2e>
 802cac0:	2400      	movs	r4, #0
 802cac2:	f04f 0801 	mov.w	r8, #1
 802cac6:	46a1      	mov	r9, r4
 802cac8:	4625      	mov	r5, r4
 802caca:	4626      	mov	r6, r4
 802cacc:	4627      	mov	r7, r4
 802cace:	f000 f87f 	bl	802cbd0 <__cxa_begin_catch>
 802cad2:	f1b8 0f00 	cmp.w	r8, #0
 802cad6:	d001      	beq.n	802cadc <__cxa_call_unexpected+0x28>
 802cad8:	f7ff fe3a 	bl	802c750 <_ZSt10unexpectedv>
 802cadc:	4648      	mov	r0, r9
 802cade:	f7ff fe33 	bl	802c748 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 802cae2:	7843      	ldrb	r3, [r0, #1]
 802cae4:	2b4e      	cmp	r3, #78	; 0x4e
 802cae6:	d1eb      	bne.n	802cac0 <__cxa_call_unexpected+0xc>
 802cae8:	7883      	ldrb	r3, [r0, #2]
 802caea:	2b55      	cmp	r3, #85	; 0x55
 802caec:	d1e8      	bne.n	802cac0 <__cxa_call_unexpected+0xc>
 802caee:	78c3      	ldrb	r3, [r0, #3]
 802caf0:	2b43      	cmp	r3, #67	; 0x43
 802caf2:	d1e5      	bne.n	802cac0 <__cxa_call_unexpected+0xc>
 802caf4:	7903      	ldrb	r3, [r0, #4]
 802caf6:	2b43      	cmp	r3, #67	; 0x43
 802caf8:	d1e2      	bne.n	802cac0 <__cxa_call_unexpected+0xc>
 802cafa:	7943      	ldrb	r3, [r0, #5]
 802cafc:	2b2b      	cmp	r3, #43	; 0x2b
 802cafe:	d1df      	bne.n	802cac0 <__cxa_call_unexpected+0xc>
 802cb00:	7983      	ldrb	r3, [r0, #6]
 802cb02:	2b2b      	cmp	r3, #43	; 0x2b
 802cb04:	d1dc      	bne.n	802cac0 <__cxa_call_unexpected+0xc>
 802cb06:	79c3      	ldrb	r3, [r0, #7]
 802cb08:	2b01      	cmp	r3, #1
 802cb0a:	d8d9      	bhi.n	802cac0 <__cxa_call_unexpected+0xc>
 802cb0c:	f850 9c18 	ldr.w	r9, [r0, #-24]
 802cb10:	f04f 0800 	mov.w	r8, #0
 802cb14:	f850 4c14 	ldr.w	r4, [r0, #-20]
 802cb18:	6a87      	ldr	r7, [r0, #40]	; 0x28
 802cb1a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 802cb1c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 802cb1e:	e7d6      	b.n	802cace <__cxa_call_unexpected+0x1a>
 802cb20:	f000 f856 	bl	802cbd0 <__cxa_begin_catch>
 802cb24:	f000 f90c 	bl	802cd40 <__cxa_get_globals_fast>
 802cb28:	6803      	ldr	r3, [r0, #0]
 802cb2a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 802cb2e:	2a01      	cmp	r2, #1
 802cb30:	bf18      	it	ne
 802cb32:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 802cb36:	d100      	bne.n	802cb3a <__cxa_call_unexpected+0x86>
 802cb38:	681a      	ldr	r2, [r3, #0]
 802cb3a:	f04f 0900 	mov.w	r9, #0
 802cb3e:	f10d 0a10 	add.w	sl, sp, #16
 802cb42:	46a8      	mov	r8, r5
 802cb44:	46cb      	mov	fp, r9
 802cb46:	f026 0603 	bic.w	r6, r6, #3
 802cb4a:	3320      	adds	r3, #32
 802cb4c:	9600      	str	r6, [sp, #0]
 802cb4e:	f84a 2d04 	str.w	r2, [sl, #-4]!
 802cb52:	9301      	str	r3, [sp, #4]
 802cb54:	455f      	cmp	r7, fp
 802cb56:	dd1e      	ble.n	802cb96 <__cxa_call_unexpected+0xe2>
 802cb58:	f8d8 5000 	ldr.w	r5, [r8]
 802cb5c:	b105      	cbz	r5, 802cb60 <__cxa_call_unexpected+0xac>
 802cb5e:	4445      	add	r5, r8
 802cb60:	9801      	ldr	r0, [sp, #4]
 802cb62:	4629      	mov	r1, r5
 802cb64:	2200      	movs	r2, #0
 802cb66:	4653      	mov	r3, sl
 802cb68:	f7ff fe8e 	bl	802c888 <__cxa_type_match>
 802cb6c:	4602      	mov	r2, r0
 802cb6e:	b9f0      	cbnz	r0, 802cbae <__cxa_call_unexpected+0xfa>
 802cb70:	682b      	ldr	r3, [r5, #0]
 802cb72:	4628      	mov	r0, r5
 802cb74:	4913      	ldr	r1, [pc, #76]	; (802cbc4 <__cxa_call_unexpected+0x110>)
 802cb76:	691e      	ldr	r6, [r3, #16]
 802cb78:	2301      	movs	r3, #1
 802cb7a:	47b0      	blx	r6
 802cb7c:	9b00      	ldr	r3, [sp, #0]
 802cb7e:	f10b 0b01 	add.w	fp, fp, #1
 802cb82:	2800      	cmp	r0, #0
 802cb84:	bf18      	it	ne
 802cb86:	f04f 0901 	movne.w	r9, #1
 802cb8a:	4498      	add	r8, r3
 802cb8c:	e7e2      	b.n	802cb54 <__cxa_call_unexpected+0xa0>
 802cb8e:	f000 f81f 	bl	802cbd0 <__cxa_begin_catch>
 802cb92:	f7ff fdd1 	bl	802c738 <_ZSt9terminatev>
 802cb96:	f1b9 0f00 	cmp.w	r9, #0
 802cb9a:	d010      	beq.n	802cbbe <__cxa_call_unexpected+0x10a>
 802cb9c:	2004      	movs	r0, #4
 802cb9e:	f000 fdef 	bl	802d780 <__cxa_allocate_exception>
 802cba2:	4b09      	ldr	r3, [pc, #36]	; (802cbc8 <__cxa_call_unexpected+0x114>)
 802cba4:	4907      	ldr	r1, [pc, #28]	; (802cbc4 <__cxa_call_unexpected+0x110>)
 802cba6:	4a09      	ldr	r2, [pc, #36]	; (802cbcc <__cxa_call_unexpected+0x118>)
 802cba8:	6003      	str	r3, [r0, #0]
 802cbaa:	f000 fbb9 	bl	802d320 <__cxa_throw>
 802cbae:	f000 fbf3 	bl	802d398 <__cxa_rethrow>
 802cbb2:	f000 f851 	bl	802cc58 <__cxa_end_catch>
 802cbb6:	f000 f84f 	bl	802cc58 <__cxa_end_catch>
 802cbba:	f7ff fe5f 	bl	802c87c <__cxa_end_cleanup>
 802cbbe:	4620      	mov	r0, r4
 802cbc0:	f7ff fda6 	bl	802c710 <_ZN10__cxxabiv111__terminateEPFvvE>
 802cbc4:	08035bd0 	.word	0x08035bd0
 802cbc8:	08035b90 	.word	0x08035b90
 802cbcc:	0802ccf5 	.word	0x0802ccf5

0802cbd0 <__cxa_begin_catch>:
 802cbd0:	b538      	push	{r3, r4, r5, lr}
 802cbd2:	4605      	mov	r5, r0
 802cbd4:	f000 f8ba 	bl	802cd4c <__cxa_get_globals>
 802cbd8:	f1a5 0320 	sub.w	r3, r5, #32
 802cbdc:	782a      	ldrb	r2, [r5, #0]
 802cbde:	2a47      	cmp	r2, #71	; 0x47
 802cbe0:	6804      	ldr	r4, [r0, #0]
 802cbe2:	d004      	beq.n	802cbee <__cxa_begin_catch+0x1e>
 802cbe4:	2c00      	cmp	r4, #0
 802cbe6:	d12f      	bne.n	802cc48 <__cxa_begin_catch+0x78>
 802cbe8:	6003      	str	r3, [r0, #0]
 802cbea:	4620      	mov	r0, r4
 802cbec:	bd38      	pop	{r3, r4, r5, pc}
 802cbee:	786a      	ldrb	r2, [r5, #1]
 802cbf0:	2a4e      	cmp	r2, #78	; 0x4e
 802cbf2:	d1f7      	bne.n	802cbe4 <__cxa_begin_catch+0x14>
 802cbf4:	78aa      	ldrb	r2, [r5, #2]
 802cbf6:	2a55      	cmp	r2, #85	; 0x55
 802cbf8:	d1f4      	bne.n	802cbe4 <__cxa_begin_catch+0x14>
 802cbfa:	78ea      	ldrb	r2, [r5, #3]
 802cbfc:	2a43      	cmp	r2, #67	; 0x43
 802cbfe:	d1f1      	bne.n	802cbe4 <__cxa_begin_catch+0x14>
 802cc00:	792a      	ldrb	r2, [r5, #4]
 802cc02:	2a43      	cmp	r2, #67	; 0x43
 802cc04:	d1ee      	bne.n	802cbe4 <__cxa_begin_catch+0x14>
 802cc06:	796a      	ldrb	r2, [r5, #5]
 802cc08:	2a2b      	cmp	r2, #43	; 0x2b
 802cc0a:	d1eb      	bne.n	802cbe4 <__cxa_begin_catch+0x14>
 802cc0c:	79aa      	ldrb	r2, [r5, #6]
 802cc0e:	2a2b      	cmp	r2, #43	; 0x2b
 802cc10:	d1e8      	bne.n	802cbe4 <__cxa_begin_catch+0x14>
 802cc12:	79ea      	ldrb	r2, [r5, #7]
 802cc14:	2a01      	cmp	r2, #1
 802cc16:	d8e5      	bhi.n	802cbe4 <__cxa_begin_catch+0x14>
 802cc18:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 802cc1c:	2900      	cmp	r1, #0
 802cc1e:	db10      	blt.n	802cc42 <__cxa_begin_catch+0x72>
 802cc20:	3101      	adds	r1, #1
 802cc22:	6842      	ldr	r2, [r0, #4]
 802cc24:	f845 1c0c 	str.w	r1, [r5, #-12]
 802cc28:	3a01      	subs	r2, #1
 802cc2a:	42a3      	cmp	r3, r4
 802cc2c:	6042      	str	r2, [r0, #4]
 802cc2e:	bf1c      	itt	ne
 802cc30:	f845 4c10 	strne.w	r4, [r5, #-16]
 802cc34:	6003      	strne	r3, [r0, #0]
 802cc36:	4628      	mov	r0, r5
 802cc38:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 802cc3a:	f7f7 ffa5 	bl	8024b88 <_Unwind_Complete>
 802cc3e:	4620      	mov	r0, r4
 802cc40:	bd38      	pop	{r3, r4, r5, pc}
 802cc42:	f1c1 0101 	rsb	r1, r1, #1
 802cc46:	e7ec      	b.n	802cc22 <__cxa_begin_catch+0x52>
 802cc48:	f7ff fd76 	bl	802c738 <_ZSt9terminatev>
 802cc4c:	3101      	adds	r1, #1
 802cc4e:	d001      	beq.n	802cc54 <__cxa_begin_catch+0x84>
 802cc50:	f7ff fe14 	bl	802c87c <__cxa_end_cleanup>
 802cc54:	f7ff ff2e 	bl	802cab4 <__cxa_call_unexpected>

0802cc58 <__cxa_end_catch>:
 802cc58:	b508      	push	{r3, lr}
 802cc5a:	f000 f871 	bl	802cd40 <__cxa_get_globals_fast>
 802cc5e:	6803      	ldr	r3, [r0, #0]
 802cc60:	4602      	mov	r2, r0
 802cc62:	2b00      	cmp	r3, #0
 802cc64:	d03f      	beq.n	802cce6 <__cxa_end_catch+0x8e>
 802cc66:	f893 1020 	ldrb.w	r1, [r3, #32]
 802cc6a:	2947      	cmp	r1, #71	; 0x47
 802cc6c:	d007      	beq.n	802cc7e <__cxa_end_catch+0x26>
 802cc6e:	f103 0020 	add.w	r0, r3, #32
 802cc72:	2300      	movs	r3, #0
 802cc74:	6013      	str	r3, [r2, #0]
 802cc76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802cc7a:	f7f7 bf87 	b.w	8024b8c <_Unwind_DeleteException>
 802cc7e:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 802cc82:	294e      	cmp	r1, #78	; 0x4e
 802cc84:	d1f3      	bne.n	802cc6e <__cxa_end_catch+0x16>
 802cc86:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 802cc8a:	2955      	cmp	r1, #85	; 0x55
 802cc8c:	d1ef      	bne.n	802cc6e <__cxa_end_catch+0x16>
 802cc8e:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 802cc92:	2943      	cmp	r1, #67	; 0x43
 802cc94:	d1eb      	bne.n	802cc6e <__cxa_end_catch+0x16>
 802cc96:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 802cc9a:	2943      	cmp	r1, #67	; 0x43
 802cc9c:	d1e7      	bne.n	802cc6e <__cxa_end_catch+0x16>
 802cc9e:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 802cca2:	292b      	cmp	r1, #43	; 0x2b
 802cca4:	d1e3      	bne.n	802cc6e <__cxa_end_catch+0x16>
 802cca6:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 802ccaa:	292b      	cmp	r1, #43	; 0x2b
 802ccac:	d1df      	bne.n	802cc6e <__cxa_end_catch+0x16>
 802ccae:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 802ccb2:	2901      	cmp	r1, #1
 802ccb4:	d8db      	bhi.n	802cc6e <__cxa_end_catch+0x16>
 802ccb6:	6959      	ldr	r1, [r3, #20]
 802ccb8:	2900      	cmp	r1, #0
 802ccba:	db05      	blt.n	802ccc8 <__cxa_end_catch+0x70>
 802ccbc:	3901      	subs	r1, #1
 802ccbe:	d008      	beq.n	802ccd2 <__cxa_end_catch+0x7a>
 802ccc0:	1c4a      	adds	r2, r1, #1
 802ccc2:	d00e      	beq.n	802cce2 <__cxa_end_catch+0x8a>
 802ccc4:	6159      	str	r1, [r3, #20]
 802ccc6:	bd08      	pop	{r3, pc}
 802ccc8:	3101      	adds	r1, #1
 802ccca:	d1fb      	bne.n	802ccc4 <__cxa_end_catch+0x6c>
 802cccc:	6918      	ldr	r0, [r3, #16]
 802ccce:	6010      	str	r0, [r2, #0]
 802ccd0:	e7f8      	b.n	802ccc4 <__cxa_end_catch+0x6c>
 802ccd2:	6919      	ldr	r1, [r3, #16]
 802ccd4:	f103 0020 	add.w	r0, r3, #32
 802ccd8:	6011      	str	r1, [r2, #0]
 802ccda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802ccde:	f7f7 bf55 	b.w	8024b8c <_Unwind_DeleteException>
 802cce2:	f7ff fd29 	bl	802c738 <_ZSt9terminatev>
 802cce6:	bd08      	pop	{r3, pc}

0802cce8 <_ZNSt9exceptionD1Ev>:
 802cce8:	4b01      	ldr	r3, [pc, #4]	; (802ccf0 <_ZNSt9exceptionD1Ev+0x8>)
 802ccea:	6003      	str	r3, [r0, #0]
 802ccec:	4770      	bx	lr
 802ccee:	bf00      	nop
 802ccf0:	08035b00 	.word	0x08035b00

0802ccf4 <_ZNSt13bad_exceptionD1Ev>:
 802ccf4:	4b01      	ldr	r3, [pc, #4]	; (802ccfc <_ZNSt13bad_exceptionD1Ev+0x8>)
 802ccf6:	6003      	str	r3, [r0, #0]
 802ccf8:	4770      	bx	lr
 802ccfa:	bf00      	nop
 802ccfc:	08035b00 	.word	0x08035b00

0802cd00 <_ZNKSt9exception4whatEv>:
 802cd00:	f645 3034 	movw	r0, #23348	; 0x5b34
 802cd04:	f6c0 0003 	movt	r0, #2051	; 0x803
 802cd08:	4770      	bx	lr
 802cd0a:	bf00      	nop

0802cd0c <_ZNKSt13bad_exception4whatEv>:
 802cd0c:	f645 3044 	movw	r0, #23364	; 0x5b44
 802cd10:	f6c0 0003 	movt	r0, #2051	; 0x803
 802cd14:	4770      	bx	lr
 802cd16:	bf00      	nop

0802cd18 <_ZNSt13bad_exceptionD0Ev>:
 802cd18:	4b03      	ldr	r3, [pc, #12]	; (802cd28 <_ZNSt13bad_exceptionD0Ev+0x10>)
 802cd1a:	b510      	push	{r4, lr}
 802cd1c:	4604      	mov	r4, r0
 802cd1e:	6003      	str	r3, [r0, #0]
 802cd20:	f7ff fce6 	bl	802c6f0 <_ZdlPv>
 802cd24:	4620      	mov	r0, r4
 802cd26:	bd10      	pop	{r4, pc}
 802cd28:	08035b00 	.word	0x08035b00

0802cd2c <_ZNSt9exceptionD0Ev>:
 802cd2c:	4b03      	ldr	r3, [pc, #12]	; (802cd3c <_ZNSt9exceptionD0Ev+0x10>)
 802cd2e:	b510      	push	{r4, lr}
 802cd30:	4604      	mov	r4, r0
 802cd32:	6003      	str	r3, [r0, #0]
 802cd34:	f7ff fcdc 	bl	802c6f0 <_ZdlPv>
 802cd38:	4620      	mov	r0, r4
 802cd3a:	bd10      	pop	{r4, pc}
 802cd3c:	08035b00 	.word	0x08035b00

0802cd40 <__cxa_get_globals_fast>:
 802cd40:	f643 70b4 	movw	r0, #16308	; 0x3fb4
 802cd44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 802cd48:	4770      	bx	lr
 802cd4a:	bf00      	nop

0802cd4c <__cxa_get_globals>:
 802cd4c:	f643 70b4 	movw	r0, #16308	; 0x3fb4
 802cd50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 802cd54:	4770      	bx	lr
 802cd56:	bf00      	nop

0802cd58 <_ZL12read_sleb128PKhPl>:
 802cd58:	2300      	movs	r3, #0
 802cd5a:	b470      	push	{r4, r5, r6}
 802cd5c:	461a      	mov	r2, r3
 802cd5e:	4604      	mov	r4, r0
 802cd60:	f814 5b01 	ldrb.w	r5, [r4], #1
 802cd64:	f005 067f 	and.w	r6, r5, #127	; 0x7f
 802cd68:	4620      	mov	r0, r4
 802cd6a:	4096      	lsls	r6, r2
 802cd6c:	3207      	adds	r2, #7
 802cd6e:	f015 0f80 	tst.w	r5, #128	; 0x80
 802cd72:	ea43 0306 	orr.w	r3, r3, r6
 802cd76:	d1f3      	bne.n	802cd60 <_ZL12read_sleb128PKhPl+0x8>
 802cd78:	2a1f      	cmp	r2, #31
 802cd7a:	d807      	bhi.n	802cd8c <_ZL12read_sleb128PKhPl+0x34>
 802cd7c:	f015 0f40 	tst.w	r5, #64	; 0x40
 802cd80:	d004      	beq.n	802cd8c <_ZL12read_sleb128PKhPl+0x34>
 802cd82:	f04f 34ff 	mov.w	r4, #4294967295
 802cd86:	fa14 f202 	lsls.w	r2, r4, r2
 802cd8a:	4313      	orrs	r3, r2
 802cd8c:	600b      	str	r3, [r1, #0]
 802cd8e:	bc70      	pop	{r4, r5, r6}
 802cd90:	4770      	bx	lr
 802cd92:	bf00      	nop

0802cd94 <_ZL28read_encoded_value_with_basehjPKhPj>:
 802cd94:	2850      	cmp	r0, #80	; 0x50
 802cd96:	b5f0      	push	{r4, r5, r6, r7, lr}
 802cd98:	4604      	mov	r4, r0
 802cd9a:	b085      	sub	sp, #20
 802cd9c:	460d      	mov	r5, r1
 802cd9e:	d053      	beq.n	802ce48 <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
 802cda0:	f000 010f 	and.w	r1, r0, #15
 802cda4:	290c      	cmp	r1, #12
 802cda6:	d837      	bhi.n	802ce18 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 802cda8:	e8df f001 	tbb	[pc, r1]
 802cdac:	07483807 	.word	0x07483807
 802cdb0:	36363620 	.word	0x36363620
 802cdb4:	07252c36 	.word	0x07252c36
 802cdb8:	20          	.byte	0x20
 802cdb9:	00          	.byte	0x00
 802cdba:	f892 c001 	ldrb.w	ip, [r2, #1]
 802cdbe:	1d10      	adds	r0, r2, #4
 802cdc0:	7811      	ldrb	r1, [r2, #0]
 802cdc2:	7897      	ldrb	r7, [r2, #2]
 802cdc4:	78d6      	ldrb	r6, [r2, #3]
 802cdc6:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 802cdca:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 802cdce:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 802cdd2:	b141      	cbz	r1, 802cde6 <_ZL28read_encoded_value_with_basehjPKhPj+0x52>
 802cdd4:	f004 0670 	and.w	r6, r4, #112	; 0x70
 802cdd8:	2e10      	cmp	r6, #16
 802cdda:	bf08      	it	eq
 802cddc:	4615      	moveq	r5, r2
 802cdde:	0622      	lsls	r2, r4, #24
 802cde0:	4429      	add	r1, r5
 802cde2:	bf48      	it	mi
 802cde4:	6809      	ldrmi	r1, [r1, #0]
 802cde6:	6019      	str	r1, [r3, #0]
 802cde8:	b005      	add	sp, #20
 802cdea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cdec:	f892 c001 	ldrb.w	ip, [r2, #1]
 802cdf0:	f102 0008 	add.w	r0, r2, #8
 802cdf4:	e7e4      	b.n	802cdc0 <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 802cdf6:	7856      	ldrb	r6, [r2, #1]
 802cdf8:	1c90      	adds	r0, r2, #2
 802cdfa:	7811      	ldrb	r1, [r2, #0]
 802cdfc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 802ce00:	b209      	sxth	r1, r1
 802ce02:	e7e6      	b.n	802cdd2 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 802ce04:	4610      	mov	r0, r2
 802ce06:	a903      	add	r1, sp, #12
 802ce08:	9201      	str	r2, [sp, #4]
 802ce0a:	9300      	str	r3, [sp, #0]
 802ce0c:	f7ff ffa4 	bl	802cd58 <_ZL12read_sleb128PKhPl>
 802ce10:	9903      	ldr	r1, [sp, #12]
 802ce12:	9a01      	ldr	r2, [sp, #4]
 802ce14:	9b00      	ldr	r3, [sp, #0]
 802ce16:	e7dc      	b.n	802cdd2 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 802ce18:	f7f8 f9c0 	bl	802519c <abort>
 802ce1c:	2100      	movs	r1, #0
 802ce1e:	4610      	mov	r0, r2
 802ce20:	460e      	mov	r6, r1
 802ce22:	f810 7b01 	ldrb.w	r7, [r0], #1
 802ce26:	f007 0c7f 	and.w	ip, r7, #127	; 0x7f
 802ce2a:	fa0c fc06 	lsl.w	ip, ip, r6
 802ce2e:	3607      	adds	r6, #7
 802ce30:	f017 0f80 	tst.w	r7, #128	; 0x80
 802ce34:	ea41 010c 	orr.w	r1, r1, ip
 802ce38:	d1f3      	bne.n	802ce22 <_ZL28read_encoded_value_with_basehjPKhPj+0x8e>
 802ce3a:	e7ca      	b.n	802cdd2 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 802ce3c:	7856      	ldrb	r6, [r2, #1]
 802ce3e:	1c90      	adds	r0, r2, #2
 802ce40:	7811      	ldrb	r1, [r2, #0]
 802ce42:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 802ce46:	e7c4      	b.n	802cdd2 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 802ce48:	1cd0      	adds	r0, r2, #3
 802ce4a:	f020 0003 	bic.w	r0, r0, #3
 802ce4e:	f850 1b04 	ldr.w	r1, [r0], #4
 802ce52:	e7c8      	b.n	802cde6 <_ZL28read_encoded_value_with_basehjPKhPj+0x52>

0802ce54 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 802ce54:	28ff      	cmp	r0, #255	; 0xff
 802ce56:	b508      	push	{r3, lr}
 802ce58:	d00d      	beq.n	802ce76 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 802ce5a:	f000 0370 	and.w	r3, r0, #112	; 0x70
 802ce5e:	2b20      	cmp	r3, #32
 802ce60:	d019      	beq.n	802ce96 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
 802ce62:	dd07      	ble.n	802ce74 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 802ce64:	2b40      	cmp	r3, #64	; 0x40
 802ce66:	d011      	beq.n	802ce8c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 802ce68:	2b50      	cmp	r3, #80	; 0x50
 802ce6a:	d004      	beq.n	802ce76 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 802ce6c:	2b30      	cmp	r3, #48	; 0x30
 802ce6e:	d008      	beq.n	802ce82 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 802ce70:	f7f8 f994 	bl	802519c <abort>
 802ce74:	b90b      	cbnz	r3, 802ce7a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 802ce76:	2000      	movs	r0, #0
 802ce78:	bd08      	pop	{r3, pc}
 802ce7a:	2b10      	cmp	r3, #16
 802ce7c:	d0fb      	beq.n	802ce76 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 802ce7e:	f7f8 f98d 	bl	802519c <abort>
 802ce82:	4608      	mov	r0, r1
 802ce84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802ce88:	f7f8 b980 	b.w	802518c <_Unwind_GetDataRelBase>
 802ce8c:	4608      	mov	r0, r1
 802ce8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802ce92:	f7f8 b96b 	b.w	802516c <_Unwind_GetRegionStart>
 802ce96:	4608      	mov	r0, r1
 802ce98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802ce9c:	f7f8 b97a 	b.w	8025194 <_Unwind_GetTextRelBase>

0802cea0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>:
 802cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cea2:	4605      	mov	r5, r0
 802cea4:	460e      	mov	r6, r1
 802cea6:	4614      	mov	r4, r2
 802cea8:	b10d      	cbz	r5, 802ceae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0xe>
 802ceaa:	f7f8 f95f 	bl	802516c <_Unwind_GetRegionStart>
 802ceae:	6020      	str	r0, [r4, #0]
 802ceb0:	f816 7b01 	ldrb.w	r7, [r6], #1
 802ceb4:	2fff      	cmp	r7, #255	; 0xff
 802ceb6:	bf08      	it	eq
 802ceb8:	6060      	streq	r0, [r4, #4]
 802ceba:	d00a      	beq.n	802ced2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x32>
 802cebc:	4629      	mov	r1, r5
 802cebe:	4638      	mov	r0, r7
 802cec0:	f7ff ffc8 	bl	802ce54 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 802cec4:	4632      	mov	r2, r6
 802cec6:	1d23      	adds	r3, r4, #4
 802cec8:	4601      	mov	r1, r0
 802ceca:	4638      	mov	r0, r7
 802cecc:	f7ff ff62 	bl	802cd94 <_ZL28read_encoded_value_with_basehjPKhPj>
 802ced0:	4606      	mov	r6, r0
 802ced2:	f816 3b01 	ldrb.w	r3, [r6], #1
 802ced6:	2bff      	cmp	r3, #255	; 0xff
 802ced8:	7523      	strb	r3, [r4, #20]
 802ceda:	d023      	beq.n	802cf24 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x84>
 802cedc:	2000      	movs	r0, #0
 802cede:	4602      	mov	r2, r0
 802cee0:	4633      	mov	r3, r6
 802cee2:	f813 1b01 	ldrb.w	r1, [r3], #1
 802cee6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 802ceea:	461e      	mov	r6, r3
 802ceec:	4095      	lsls	r5, r2
 802ceee:	3207      	adds	r2, #7
 802cef0:	0609      	lsls	r1, r1, #24
 802cef2:	ea40 0005 	orr.w	r0, r0, r5
 802cef6:	d4f3      	bmi.n	802cee0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x40>
 802cef8:	1818      	adds	r0, r3, r0
 802cefa:	60e0      	str	r0, [r4, #12]
 802cefc:	2100      	movs	r1, #0
 802cefe:	f816 2b01 	ldrb.w	r2, [r6], #1
 802cf02:	460b      	mov	r3, r1
 802cf04:	7562      	strb	r2, [r4, #21]
 802cf06:	4630      	mov	r0, r6
 802cf08:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cf0c:	f002 057f 	and.w	r5, r2, #127	; 0x7f
 802cf10:	4606      	mov	r6, r0
 802cf12:	409d      	lsls	r5, r3
 802cf14:	3307      	adds	r3, #7
 802cf16:	0612      	lsls	r2, r2, #24
 802cf18:	ea41 0105 	orr.w	r1, r1, r5
 802cf1c:	d4f3      	bmi.n	802cf06 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x66>
 802cf1e:	1841      	adds	r1, r0, r1
 802cf20:	6121      	str	r1, [r4, #16]
 802cf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cf24:	2300      	movs	r3, #0
 802cf26:	60e3      	str	r3, [r4, #12]
 802cf28:	e7e8      	b.n	802cefc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x5c>
 802cf2a:	bf00      	nop

0802cf2c <__gxx_personality_v0>:
 802cf2c:	f000 0303 	and.w	r3, r0, #3
 802cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cf34:	2400      	movs	r4, #0
 802cf36:	b093      	sub	sp, #76	; 0x4c
 802cf38:	2b01      	cmp	r3, #1
 802cf3a:	4688      	mov	r8, r1
 802cf3c:	4617      	mov	r7, r2
 802cf3e:	940b      	str	r4, [sp, #44]	; 0x2c
 802cf40:	f000 80b2 	beq.w	802d0a8 <__gxx_personality_v0+0x17c>
 802cf44:	2b02      	cmp	r3, #2
 802cf46:	f000 80a4 	beq.w	802d092 <__gxx_personality_v0+0x166>
 802cf4a:	f000 0608 	and.w	r6, r0, #8
 802cf4e:	f04f 0a01 	mov.w	sl, #1
 802cf52:	ad0e      	add	r5, sp, #56	; 0x38
 802cf54:	2b00      	cmp	r3, #0
 802cf56:	f040 8085 	bne.w	802d064 <__gxx_personality_v0+0x138>
 802cf5a:	2100      	movs	r1, #0
 802cf5c:	220c      	movs	r2, #12
 802cf5e:	460b      	mov	r3, r1
 802cf60:	4638      	mov	r0, r7
 802cf62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802cf66:	ea46 0a0a 	orr.w	sl, r6, sl
 802cf6a:	9500      	str	r5, [sp, #0]
 802cf6c:	f7f7 fad2 	bl	8024514 <_Unwind_VRS_Set>
 802cf70:	4638      	mov	r0, r7
 802cf72:	f7f8 f901 	bl	8025178 <_Unwind_GetLanguageSpecificData>
 802cf76:	4681      	mov	r9, r0
 802cf78:	2800      	cmp	r0, #0
 802cf7a:	f000 808a 	beq.w	802d092 <__gxx_personality_v0+0x166>
 802cf7e:	4601      	mov	r1, r0
 802cf80:	aa05      	add	r2, sp, #20
 802cf82:	4638      	mov	r0, r7
 802cf84:	f7ff ff8c 	bl	802cea0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 802cf88:	4639      	mov	r1, r7
 802cf8a:	4604      	mov	r4, r0
 802cf8c:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 802cf90:	f7ff ff60 	bl	802ce54 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 802cf94:	2100      	movs	r1, #0
 802cf96:	460b      	mov	r3, r1
 802cf98:	220f      	movs	r2, #15
 802cf9a:	9500      	str	r5, [sp, #0]
 802cf9c:	4606      	mov	r6, r0
 802cf9e:	4638      	mov	r0, r7
 802cfa0:	9607      	str	r6, [sp, #28]
 802cfa2:	f7f7 fa91 	bl	80244c8 <_Unwind_VRS_Get>
 802cfa6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802cfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cfaa:	f026 0601 	bic.w	r6, r6, #1
 802cfae:	3e01      	subs	r6, #1
 802cfb0:	429c      	cmp	r4, r3
 802cfb2:	d23a      	bcs.n	802d02a <__gxx_personality_v0+0xfe>
 802cfb4:	f89d b029 	ldrb.w	fp, [sp, #41]	; 0x29
 802cfb8:	2100      	movs	r1, #0
 802cfba:	4658      	mov	r0, fp
 802cfbc:	f7ff ff4a 	bl	802ce54 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 802cfc0:	4622      	mov	r2, r4
 802cfc2:	ab0c      	add	r3, sp, #48	; 0x30
 802cfc4:	4601      	mov	r1, r0
 802cfc6:	4658      	mov	r0, fp
 802cfc8:	f7ff fee4 	bl	802cd94 <_ZL28read_encoded_value_with_basehjPKhPj>
 802cfcc:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 802cfd0:	2100      	movs	r1, #0
 802cfd2:	4683      	mov	fp, r0
 802cfd4:	4620      	mov	r0, r4
 802cfd6:	f7ff ff3d 	bl	802ce54 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 802cfda:	465a      	mov	r2, fp
 802cfdc:	ab0d      	add	r3, sp, #52	; 0x34
 802cfde:	4601      	mov	r1, r0
 802cfe0:	4620      	mov	r0, r4
 802cfe2:	f7ff fed7 	bl	802cd94 <_ZL28read_encoded_value_with_basehjPKhPj>
 802cfe6:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 802cfea:	2100      	movs	r1, #0
 802cfec:	4683      	mov	fp, r0
 802cfee:	4620      	mov	r0, r4
 802cff0:	f7ff ff30 	bl	802ce54 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 802cff4:	462b      	mov	r3, r5
 802cff6:	465a      	mov	r2, fp
 802cff8:	4601      	mov	r1, r0
 802cffa:	4620      	mov	r0, r4
 802cffc:	f7ff feca 	bl	802cd94 <_ZL28read_encoded_value_with_basehjPKhPj>
 802d000:	2100      	movs	r1, #0
 802d002:	460b      	mov	r3, r1
 802d004:	4604      	mov	r4, r0
 802d006:	f814 2b01 	ldrb.w	r2, [r4], #1
 802d00a:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 802d00e:	4098      	lsls	r0, r3
 802d010:	3307      	adds	r3, #7
 802d012:	4301      	orrs	r1, r0
 802d014:	0610      	lsls	r0, r2, #24
 802d016:	d4f6      	bmi.n	802d006 <__gxx_personality_v0+0xda>
 802d018:	9b05      	ldr	r3, [sp, #20]
 802d01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802d01c:	18d3      	adds	r3, r2, r3
 802d01e:	429e      	cmp	r6, r3
 802d020:	d222      	bcs.n	802d068 <__gxx_personality_v0+0x13c>
 802d022:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802d024:	4623      	mov	r3, r4
 802d026:	429c      	cmp	r4, r3
 802d028:	d3c4      	bcc.n	802cfb4 <__gxx_personality_v0+0x88>
 802d02a:	2400      	movs	r4, #0
 802d02c:	2601      	movs	r6, #1
 802d02e:	46a3      	mov	fp, r4
 802d030:	f01a 0f01 	tst.w	sl, #1
 802d034:	d061      	beq.n	802d0fa <__gxx_personality_v0+0x1ce>
 802d036:	2e02      	cmp	r6, #2
 802d038:	d02b      	beq.n	802d092 <__gxx_personality_v0+0x166>
 802d03a:	2100      	movs	r1, #0
 802d03c:	4638      	mov	r0, r7
 802d03e:	460b      	mov	r3, r1
 802d040:	220d      	movs	r2, #13
 802d042:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802d044:	9500      	str	r5, [sp, #0]
 802d046:	f7f7 fa3f 	bl	80244c8 <_Unwind_VRS_Get>
 802d04a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802d04c:	2006      	movs	r0, #6
 802d04e:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
 802d052:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 802d056:	f8c8 3020 	str.w	r3, [r8, #32]
 802d05a:	f8c8 902c 	str.w	r9, [r8, #44]	; 0x2c
 802d05e:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
 802d062:	e01e      	b.n	802d0a2 <__gxx_personality_v0+0x176>
 802d064:	f7f8 f89a 	bl	802519c <abort>
 802d068:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802d06a:	189b      	adds	r3, r3, r2
 802d06c:	429e      	cmp	r6, r3
 802d06e:	d301      	bcc.n	802d074 <__gxx_personality_v0+0x148>
 802d070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d072:	e79d      	b.n	802cfb0 <__gxx_personality_v0+0x84>
 802d074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802d076:	469b      	mov	fp, r3
 802d078:	b113      	cbz	r3, 802d080 <__gxx_personality_v0+0x154>
 802d07a:	9a06      	ldr	r2, [sp, #24]
 802d07c:	eb03 0b02 	add.w	fp, r3, r2
 802d080:	4608      	mov	r0, r1
 802d082:	b111      	cbz	r1, 802d08a <__gxx_personality_v0+0x15e>
 802d084:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d086:	3901      	subs	r1, #1
 802d088:	1840      	adds	r0, r0, r1
 802d08a:	f1bb 0f00 	cmp.w	fp, #0
 802d08e:	f040 808c 	bne.w	802d1aa <__gxx_personality_v0+0x27e>
 802d092:	4640      	mov	r0, r8
 802d094:	4639      	mov	r1, r7
 802d096:	f7f8 f853 	bl	8025140 <__gnu_unwind_frame>
 802d09a:	2800      	cmp	r0, #0
 802d09c:	bf0c      	ite	eq
 802d09e:	2008      	moveq	r0, #8
 802d0a0:	2009      	movne	r0, #9
 802d0a2:	b013      	add	sp, #76	; 0x4c
 802d0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d0a8:	f010 0608 	ands.w	r6, r0, #8
 802d0ac:	bf18      	it	ne
 802d0ae:	ad0e      	addne	r5, sp, #56	; 0x38
 802d0b0:	d002      	beq.n	802d0b8 <__gxx_personality_v0+0x18c>
 802d0b2:	f04f 0a02 	mov.w	sl, #2
 802d0b6:	e750      	b.n	802cf5a <__gxx_personality_v0+0x2e>
 802d0b8:	4610      	mov	r0, r2
 802d0ba:	4633      	mov	r3, r6
 802d0bc:	220d      	movs	r2, #13
 802d0be:	4631      	mov	r1, r6
 802d0c0:	f8d8 4020 	ldr.w	r4, [r8, #32]
 802d0c4:	ad0e      	add	r5, sp, #56	; 0x38
 802d0c6:	9500      	str	r5, [sp, #0]
 802d0c8:	f7f7 f9fe 	bl	80244c8 <_Unwind_VRS_Get>
 802d0cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802d0ce:	429c      	cmp	r4, r3
 802d0d0:	d1ef      	bne.n	802d0b2 <__gxx_personality_v0+0x186>
 802d0d2:	f108 0428 	add.w	r4, r8, #40	; 0x28
 802d0d6:	4631      	mov	r1, r6
 802d0d8:	4633      	mov	r3, r6
 802d0da:	4638      	mov	r0, r7
 802d0dc:	220c      	movs	r2, #12
 802d0de:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802d0e2:	9500      	str	r5, [sp, #0]
 802d0e4:	f7f7 fa16 	bl	8024514 <_Unwind_VRS_Set>
 802d0e8:	e894 0a10 	ldmia.w	r4, {r4, r9, fp}
 802d0ec:	2603      	movs	r6, #3
 802d0ee:	f1bb 0f00 	cmp.w	fp, #0
 802d0f2:	d13a      	bne.n	802d16a <__gxx_personality_v0+0x23e>
 802d0f4:	4640      	mov	r0, r8
 802d0f6:	f7ff fcb9 	bl	802ca6c <__cxa_call_terminate>
 802d0fa:	f01a 0f08 	tst.w	sl, #8
 802d0fe:	d032      	beq.n	802d166 <__gxx_personality_v0+0x23a>
 802d100:	2e01      	cmp	r6, #1
 802d102:	f000 80e3 	beq.w	802d2cc <__gxx_personality_v0+0x3a0>
 802d106:	2c00      	cmp	r4, #0
 802d108:	f2c0 80e2 	blt.w	802d2d0 <__gxx_personality_v0+0x3a4>
 802d10c:	2100      	movs	r1, #0
 802d10e:	4638      	mov	r0, r7
 802d110:	460a      	mov	r2, r1
 802d112:	460b      	mov	r3, r1
 802d114:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802d118:	9500      	str	r5, [sp, #0]
 802d11a:	f7f7 f9fb 	bl	8024514 <_Unwind_VRS_Set>
 802d11e:	2100      	movs	r1, #0
 802d120:	2201      	movs	r2, #1
 802d122:	460b      	mov	r3, r1
 802d124:	4638      	mov	r0, r7
 802d126:	940e      	str	r4, [sp, #56]	; 0x38
 802d128:	9500      	str	r5, [sp, #0]
 802d12a:	f7f7 f9f3 	bl	8024514 <_Unwind_VRS_Set>
 802d12e:	2100      	movs	r1, #0
 802d130:	220f      	movs	r2, #15
 802d132:	460b      	mov	r3, r1
 802d134:	4638      	mov	r0, r7
 802d136:	9500      	str	r5, [sp, #0]
 802d138:	f7f7 f9c6 	bl	80244c8 <_Unwind_VRS_Get>
 802d13c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802d13e:	2100      	movs	r1, #0
 802d140:	220f      	movs	r2, #15
 802d142:	4638      	mov	r0, r7
 802d144:	f003 0301 	and.w	r3, r3, #1
 802d148:	9500      	str	r5, [sp, #0]
 802d14a:	ea4b 0303 	orr.w	r3, fp, r3
 802d14e:	930e      	str	r3, [sp, #56]	; 0x38
 802d150:	460b      	mov	r3, r1
 802d152:	f7f7 f9df 	bl	8024514 <_Unwind_VRS_Set>
 802d156:	2007      	movs	r0, #7
 802d158:	2e02      	cmp	r6, #2
 802d15a:	d1a2      	bne.n	802d0a2 <__gxx_personality_v0+0x176>
 802d15c:	4640      	mov	r0, r8
 802d15e:	f7ff fc05 	bl	802c96c <__cxa_begin_cleanup>
 802d162:	2007      	movs	r0, #7
 802d164:	e79d      	b.n	802d0a2 <__gxx_personality_v0+0x176>
 802d166:	2e01      	cmp	r6, #1
 802d168:	d0c4      	beq.n	802d0f4 <__gxx_personality_v0+0x1c8>
 802d16a:	2c00      	cmp	r4, #0
 802d16c:	dace      	bge.n	802d10c <__gxx_personality_v0+0x1e0>
 802d16e:	aa05      	add	r2, sp, #20
 802d170:	4638      	mov	r0, r7
 802d172:	4649      	mov	r1, r9
 802d174:	f7ff fe94 	bl	802cea0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 802d178:	9b08      	ldr	r3, [sp, #32]
 802d17a:	43e2      	mvns	r2, r4
 802d17c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 802d180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802d184:	b133      	cbz	r3, 802d194 <__gxx_personality_v0+0x268>
 802d186:	4602      	mov	r2, r0
 802d188:	2300      	movs	r3, #0
 802d18a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 802d18e:	3301      	adds	r3, #1
 802d190:	2900      	cmp	r1, #0
 802d192:	d1fa      	bne.n	802d18a <__gxx_personality_v0+0x25e>
 802d194:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 802d198:	2300      	movs	r3, #0
 802d19a:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 802d19e:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 802d1a2:	2304      	movs	r3, #4
 802d1a4:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 802d1a8:	e7b0      	b.n	802d10c <__gxx_personality_v0+0x1e0>
 802d1aa:	2800      	cmp	r0, #0
 802d1ac:	f000 8089 	beq.w	802d2c2 <__gxx_personality_v0+0x396>
 802d1b0:	f01a 0208 	ands.w	r2, sl, #8
 802d1b4:	9203      	str	r2, [sp, #12]
 802d1b6:	d07a      	beq.n	802d2ae <__gxx_personality_v0+0x382>
 802d1b8:	2347      	movs	r3, #71	; 0x47
 802d1ba:	f888 3000 	strb.w	r3, [r8]
 802d1be:	234e      	movs	r3, #78	; 0x4e
 802d1c0:	f888 3001 	strb.w	r3, [r8, #1]
 802d1c4:	2355      	movs	r3, #85	; 0x55
 802d1c6:	f888 3002 	strb.w	r3, [r8, #2]
 802d1ca:	2343      	movs	r3, #67	; 0x43
 802d1cc:	f888 3003 	strb.w	r3, [r8, #3]
 802d1d0:	2346      	movs	r3, #70	; 0x46
 802d1d2:	f888 3004 	strb.w	r3, [r8, #4]
 802d1d6:	234f      	movs	r3, #79	; 0x4f
 802d1d8:	f888 3005 	strb.w	r3, [r8, #5]
 802d1dc:	2352      	movs	r3, #82	; 0x52
 802d1de:	f888 3006 	strb.w	r3, [r8, #6]
 802d1e2:	2300      	movs	r3, #0
 802d1e4:	f888 3007 	strb.w	r3, [r8, #7]
 802d1e8:	2300      	movs	r3, #0
 802d1ea:	9302      	str	r3, [sp, #8]
 802d1ec:	463b      	mov	r3, r7
 802d1ee:	4647      	mov	r7, r8
 802d1f0:	4698      	mov	r8, r3
 802d1f2:	a90f      	add	r1, sp, #60	; 0x3c
 802d1f4:	f7ff fdb0 	bl	802cd58 <_ZL12read_sleb128PKhPl>
 802d1f8:	a910      	add	r1, sp, #64	; 0x40
 802d1fa:	4606      	mov	r6, r0
 802d1fc:	f7ff fdac 	bl	802cd58 <_ZL12read_sleb128PKhPl>
 802d200:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802d202:	2c00      	cmp	r4, #0
 802d204:	4623      	mov	r3, r4
 802d206:	d014      	beq.n	802d232 <__gxx_personality_v0+0x306>
 802d208:	dd1e      	ble.n	802d248 <__gxx_personality_v0+0x31c>
 802d20a:	9b08      	ldr	r3, [sp, #32]
 802d20c:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 802d210:	6819      	ldr	r1, [r3, #0]
 802d212:	b1a9      	cbz	r1, 802d240 <__gxx_personality_v0+0x314>
 802d214:	18c9      	adds	r1, r1, r3
 802d216:	d013      	beq.n	802d240 <__gxx_personality_v0+0x314>
 802d218:	b16f      	cbz	r7, 802d236 <__gxx_personality_v0+0x30a>
 802d21a:	4638      	mov	r0, r7
 802d21c:	2200      	movs	r2, #0
 802d21e:	ab0b      	add	r3, sp, #44	; 0x2c
 802d220:	f7ff fb32 	bl	802c888 <__cxa_type_match>
 802d224:	b138      	cbz	r0, 802d236 <__gxx_personality_v0+0x30a>
 802d226:	4643      	mov	r3, r8
 802d228:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802d22a:	46b8      	mov	r8, r7
 802d22c:	461f      	mov	r7, r3
 802d22e:	2603      	movs	r6, #3
 802d230:	e6fe      	b.n	802d030 <__gxx_personality_v0+0x104>
 802d232:	2301      	movs	r3, #1
 802d234:	9302      	str	r3, [sp, #8]
 802d236:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802d238:	2c00      	cmp	r4, #0
 802d23a:	d029      	beq.n	802d290 <__gxx_personality_v0+0x364>
 802d23c:	1930      	adds	r0, r6, r4
 802d23e:	e7d8      	b.n	802d1f2 <__gxx_personality_v0+0x2c6>
 802d240:	4643      	mov	r3, r8
 802d242:	46b8      	mov	r8, r7
 802d244:	461f      	mov	r7, r3
 802d246:	e7f2      	b.n	802d22e <__gxx_personality_v0+0x302>
 802d248:	b1bf      	cbz	r7, 802d27a <__gxx_personality_v0+0x34e>
 802d24a:	9a03      	ldr	r2, [sp, #12]
 802d24c:	b9aa      	cbnz	r2, 802d27a <__gxx_personality_v0+0x34e>
 802d24e:	9a08      	ldr	r2, [sp, #32]
 802d250:	43e1      	mvns	r1, r4
 802d252:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 802d256:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 802d25a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802d25c:	9211      	str	r2, [sp, #68]	; 0x44
 802d25e:	b919      	cbnz	r1, 802d268 <__gxx_personality_v0+0x33c>
 802d260:	e011      	b.n	802d286 <__gxx_personality_v0+0x35a>
 802d262:	f854 1f04 	ldr.w	r1, [r4, #4]!
 802d266:	b1e1      	cbz	r1, 802d2a2 <__gxx_personality_v0+0x376>
 802d268:	1861      	adds	r1, r4, r1
 802d26a:	4638      	mov	r0, r7
 802d26c:	2200      	movs	r2, #0
 802d26e:	ab11      	add	r3, sp, #68	; 0x44
 802d270:	f7ff fb0a 	bl	802c888 <__cxa_type_match>
 802d274:	2800      	cmp	r0, #0
 802d276:	d0f4      	beq.n	802d262 <__gxx_personality_v0+0x336>
 802d278:	e7dd      	b.n	802d236 <__gxx_personality_v0+0x30a>
 802d27a:	9a08      	ldr	r2, [sp, #32]
 802d27c:	43d9      	mvns	r1, r3
 802d27e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802d282:	2a00      	cmp	r2, #0
 802d284:	d1d7      	bne.n	802d236 <__gxx_personality_v0+0x30a>
 802d286:	4642      	mov	r2, r8
 802d288:	461c      	mov	r4, r3
 802d28a:	46b8      	mov	r8, r7
 802d28c:	4617      	mov	r7, r2
 802d28e:	e7ce      	b.n	802d22e <__gxx_personality_v0+0x302>
 802d290:	9a02      	ldr	r2, [sp, #8]
 802d292:	4643      	mov	r3, r8
 802d294:	46b8      	mov	r8, r7
 802d296:	461f      	mov	r7, r3
 802d298:	2a00      	cmp	r2, #0
 802d29a:	f43f aefa 	beq.w	802d092 <__gxx_personality_v0+0x166>
 802d29e:	2602      	movs	r6, #2
 802d2a0:	e6c6      	b.n	802d030 <__gxx_personality_v0+0x104>
 802d2a2:	4643      	mov	r3, r8
 802d2a4:	46b8      	mov	r8, r7
 802d2a6:	461f      	mov	r7, r3
 802d2a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802d2aa:	461c      	mov	r4, r3
 802d2ac:	e7bf      	b.n	802d22e <__gxx_personality_v0+0x302>
 802d2ae:	f898 3007 	ldrb.w	r3, [r8, #7]
 802d2b2:	2b01      	cmp	r3, #1
 802d2b4:	bf14      	ite	ne
 802d2b6:	f108 0358 	addne.w	r3, r8, #88	; 0x58
 802d2ba:	f858 3c20 	ldreq.w	r3, [r8, #-32]
 802d2be:	930b      	str	r3, [sp, #44]	; 0x2c
 802d2c0:	e792      	b.n	802d1e8 <__gxx_personality_v0+0x2bc>
 802d2c2:	4604      	mov	r4, r0
 802d2c4:	2602      	movs	r6, #2
 802d2c6:	e6b3      	b.n	802d030 <__gxx_personality_v0+0x104>
 802d2c8:	f7ff fc82 	bl	802cbd0 <__cxa_begin_catch>
 802d2cc:	f7ff fa34 	bl	802c738 <_ZSt9terminatev>
 802d2d0:	f7ff fa3e 	bl	802c750 <_ZSt10unexpectedv>

0802d2d4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 802d2d4:	2801      	cmp	r0, #1
 802d2d6:	b510      	push	{r4, lr}
 802d2d8:	d81d      	bhi.n	802d316 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 802d2da:	f04f 32ff 	mov.w	r2, #4294967295
 802d2de:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 802d2e2:	f3bf 8f5f 	dmb	sy
 802d2e6:	e853 0f00 	ldrex	r0, [r3]
 802d2ea:	4410      	add	r0, r2
 802d2ec:	e843 0400 	strex	r4, r0, [r3]
 802d2f0:	f094 0f00 	teq	r4, #0
 802d2f4:	d1f7      	bne.n	802d2e6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x12>
 802d2f6:	f3bf 8f5f 	dmb	sy
 802d2fa:	b958      	cbnz	r0, 802d314 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x40>
 802d2fc:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 802d300:	f101 0458 	add.w	r4, r1, #88	; 0x58
 802d304:	b10b      	cbz	r3, 802d30a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x36>
 802d306:	4620      	mov	r0, r4
 802d308:	4798      	blx	r3
 802d30a:	4620      	mov	r0, r4
 802d30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d310:	f000 ba68 	b.w	802d7e4 <__cxa_free_exception>
 802d314:	bd10      	pop	{r4, pc}
 802d316:	f851 0c14 	ldr.w	r0, [r1, #-20]
 802d31a:	f7ff f9f9 	bl	802c710 <_ZN10__cxxabiv111__terminateEPFvvE>
 802d31e:	bf00      	nop

0802d320 <__cxa_throw>:
 802d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d322:	f640 13b0 	movw	r3, #2480	; 0x9b0
 802d326:	f640 14b4 	movw	r4, #2484	; 0x9b4
 802d32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802d32e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 802d332:	2743      	movs	r7, #67	; 0x43
 802d334:	681b      	ldr	r3, [r3, #0]
 802d336:	262b      	movs	r6, #43	; 0x2b
 802d338:	6825      	ldr	r5, [r4, #0]
 802d33a:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
 802d33e:	f840 1c78 	str.w	r1, [r0, #-120]
 802d342:	2101      	movs	r1, #1
 802d344:	f840 3c6c 	str.w	r3, [r0, #-108]
 802d348:	f24d 23d5 	movw	r3, #53973	; 0xd2d5
 802d34c:	f840 1c80 	str.w	r1, [r0, #-128]
 802d350:	f6c0 0302 	movt	r3, #2050	; 0x802
 802d354:	f840 2c74 	str.w	r2, [r0, #-116]
 802d358:	f840 3c50 	str.w	r3, [r0, #-80]
 802d35c:	2347      	movs	r3, #71	; 0x47
 802d35e:	f840 5c70 	str.w	r5, [r0, #-112]
 802d362:	f800 3c58 	strb.w	r3, [r0, #-88]
 802d366:	234e      	movs	r3, #78	; 0x4e
 802d368:	f800 7c55 	strb.w	r7, [r0, #-85]
 802d36c:	f800 3c57 	strb.w	r3, [r0, #-87]
 802d370:	2355      	movs	r3, #85	; 0x55
 802d372:	f800 7c54 	strb.w	r7, [r0, #-84]
 802d376:	f800 3c56 	strb.w	r3, [r0, #-86]
 802d37a:	2300      	movs	r3, #0
 802d37c:	f800 6c53 	strb.w	r6, [r0, #-83]
 802d380:	f800 3c51 	strb.w	r3, [r0, #-81]
 802d384:	f800 6c52 	strb.w	r6, [r0, #-82]
 802d388:	4620      	mov	r0, r4
 802d38a:	f7f7 fcc3 	bl	8024d14 <_Unwind_RaiseException>
 802d38e:	4620      	mov	r0, r4
 802d390:	f7ff fc1e 	bl	802cbd0 <__cxa_begin_catch>
 802d394:	f7ff f9d0 	bl	802c738 <_ZSt9terminatev>

0802d398 <__cxa_rethrow>:
 802d398:	b510      	push	{r4, lr}
 802d39a:	f7ff fcd7 	bl	802cd4c <__cxa_get_globals>
 802d39e:	6843      	ldr	r3, [r0, #4]
 802d3a0:	6804      	ldr	r4, [r0, #0]
 802d3a2:	3301      	adds	r3, #1
 802d3a4:	6043      	str	r3, [r0, #4]
 802d3a6:	b164      	cbz	r4, 802d3c2 <__cxa_rethrow+0x2a>
 802d3a8:	f894 3020 	ldrb.w	r3, [r4, #32]
 802d3ac:	2b47      	cmp	r3, #71	; 0x47
 802d3ae:	d00a      	beq.n	802d3c6 <__cxa_rethrow+0x2e>
 802d3b0:	2300      	movs	r3, #0
 802d3b2:	6003      	str	r3, [r0, #0]
 802d3b4:	3420      	adds	r4, #32
 802d3b6:	4620      	mov	r0, r4
 802d3b8:	f7f7 fcd0 	bl	8024d5c <_Unwind_Resume_or_Rethrow>
 802d3bc:	4620      	mov	r0, r4
 802d3be:	f7ff fc07 	bl	802cbd0 <__cxa_begin_catch>
 802d3c2:	f7ff f9b9 	bl	802c738 <_ZSt9terminatev>
 802d3c6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 802d3ca:	2b4e      	cmp	r3, #78	; 0x4e
 802d3cc:	d1f0      	bne.n	802d3b0 <__cxa_rethrow+0x18>
 802d3ce:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 802d3d2:	2b55      	cmp	r3, #85	; 0x55
 802d3d4:	d1ec      	bne.n	802d3b0 <__cxa_rethrow+0x18>
 802d3d6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 802d3da:	2b43      	cmp	r3, #67	; 0x43
 802d3dc:	d1e8      	bne.n	802d3b0 <__cxa_rethrow+0x18>
 802d3de:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 802d3e2:	2b43      	cmp	r3, #67	; 0x43
 802d3e4:	d1e4      	bne.n	802d3b0 <__cxa_rethrow+0x18>
 802d3e6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 802d3ea:	2b2b      	cmp	r3, #43	; 0x2b
 802d3ec:	d1e0      	bne.n	802d3b0 <__cxa_rethrow+0x18>
 802d3ee:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 802d3f2:	2b2b      	cmp	r3, #43	; 0x2b
 802d3f4:	d1dc      	bne.n	802d3b0 <__cxa_rethrow+0x18>
 802d3f6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 802d3fa:	2b01      	cmp	r3, #1
 802d3fc:	d8d8      	bhi.n	802d3b0 <__cxa_rethrow+0x18>
 802d3fe:	6963      	ldr	r3, [r4, #20]
 802d400:	425b      	negs	r3, r3
 802d402:	6163      	str	r3, [r4, #20]
 802d404:	e7d6      	b.n	802d3b4 <__cxa_rethrow+0x1c>
 802d406:	bf00      	nop

0802d408 <__cxa_current_exception_type>:
 802d408:	b508      	push	{r3, lr}
 802d40a:	f7ff fc9f 	bl	802cd4c <__cxa_get_globals>
 802d40e:	6800      	ldr	r0, [r0, #0]
 802d410:	b130      	cbz	r0, 802d420 <__cxa_current_exception_type+0x18>
 802d412:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 802d416:	2b01      	cmp	r3, #1
 802d418:	bf04      	itt	eq
 802d41a:	6800      	ldreq	r0, [r0, #0]
 802d41c:	3878      	subeq	r0, #120	; 0x78
 802d41e:	6800      	ldr	r0, [r0, #0]
 802d420:	bd08      	pop	{r3, pc}
 802d422:	bf00      	nop

0802d424 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 802d424:	4b03      	ldr	r3, [pc, #12]	; (802d434 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 802d426:	b510      	push	{r4, lr}
 802d428:	4604      	mov	r4, r0
 802d42a:	6003      	str	r3, [r0, #0]
 802d42c:	f000 f8dc 	bl	802d5e8 <_ZNSt9type_infoD1Ev>
 802d430:	4620      	mov	r0, r4
 802d432:	bd10      	pop	{r4, pc}
 802d434:	08035c38 	.word	0x08035c38

0802d438 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 802d438:	4b05      	ldr	r3, [pc, #20]	; (802d450 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
 802d43a:	b510      	push	{r4, lr}
 802d43c:	4604      	mov	r4, r0
 802d43e:	6003      	str	r3, [r0, #0]
 802d440:	f000 f8d2 	bl	802d5e8 <_ZNSt9type_infoD1Ev>
 802d444:	4620      	mov	r0, r4
 802d446:	f7ff f953 	bl	802c6f0 <_ZdlPv>
 802d44a:	4620      	mov	r0, r4
 802d44c:	bd10      	pop	{r4, pc}
 802d44e:	bf00      	nop
 802d450:	08035c38 	.word	0x08035c38

0802d454 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 802d454:	2001      	movs	r0, #1
 802d456:	4770      	bx	lr

0802d458 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 802d458:	4b03      	ldr	r3, [pc, #12]	; (802d468 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 802d45a:	b510      	push	{r4, lr}
 802d45c:	4604      	mov	r4, r0
 802d45e:	6003      	str	r3, [r0, #0]
 802d460:	f000 f9e4 	bl	802d82c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 802d464:	4620      	mov	r0, r4
 802d466:	bd10      	pop	{r4, pc}
 802d468:	08035c88 	.word	0x08035c88

0802d46c <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 802d46c:	4b05      	ldr	r3, [pc, #20]	; (802d484 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
 802d46e:	b510      	push	{r4, lr}
 802d470:	4604      	mov	r4, r0
 802d472:	6003      	str	r3, [r0, #0]
 802d474:	f000 f9da 	bl	802d82c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 802d478:	4620      	mov	r0, r4
 802d47a:	f7ff f939 	bl	802c6f0 <_ZdlPv>
 802d47e:	4620      	mov	r0, r4
 802d480:	bd10      	pop	{r4, pc}
 802d482:	bf00      	nop
 802d484:	08035c88 	.word	0x08035c88

0802d488 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 802d488:	2b01      	cmp	r3, #1
 802d48a:	b530      	push	{r4, r5, lr}
 802d48c:	4604      	mov	r4, r0
 802d48e:	b083      	sub	sp, #12
 802d490:	460d      	mov	r5, r1
 802d492:	d908      	bls.n	802d4a6 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
 802d494:	68e4      	ldr	r4, [r4, #12]
 802d496:	3302      	adds	r3, #2
 802d498:	68e9      	ldr	r1, [r5, #12]
 802d49a:	4620      	mov	r0, r4
 802d49c:	6824      	ldr	r4, [r4, #0]
 802d49e:	6924      	ldr	r4, [r4, #16]
 802d4a0:	47a0      	blx	r4
 802d4a2:	b003      	add	sp, #12
 802d4a4:	bd30      	pop	{r4, r5, pc}
 802d4a6:	68c0      	ldr	r0, [r0, #12]
 802d4a8:	4908      	ldr	r1, [pc, #32]	; (802d4cc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
 802d4aa:	9201      	str	r2, [sp, #4]
 802d4ac:	9300      	str	r3, [sp, #0]
 802d4ae:	f000 f8b1 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d4b2:	9a01      	ldr	r2, [sp, #4]
 802d4b4:	9b00      	ldr	r3, [sp, #0]
 802d4b6:	2800      	cmp	r0, #0
 802d4b8:	d0ec      	beq.n	802d494 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0xc>
 802d4ba:	68eb      	ldr	r3, [r5, #12]
 802d4bc:	4618      	mov	r0, r3
 802d4be:	681b      	ldr	r3, [r3, #0]
 802d4c0:	68db      	ldr	r3, [r3, #12]
 802d4c2:	4798      	blx	r3
 802d4c4:	f080 0001 	eor.w	r0, r0, #1
 802d4c8:	b2c0      	uxtb	r0, r0
 802d4ca:	e7ea      	b.n	802d4a2 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 802d4cc:	08035bec 	.word	0x08035bec

0802d4d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 802d4d0:	4b03      	ldr	r3, [pc, #12]	; (802d4e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 802d4d2:	b510      	push	{r4, lr}
 802d4d4:	4604      	mov	r4, r0
 802d4d6:	6003      	str	r3, [r0, #0]
 802d4d8:	f000 f908 	bl	802d6ec <_ZN10__cxxabiv117__class_type_infoD1Ev>
 802d4dc:	4620      	mov	r0, r4
 802d4de:	bd10      	pop	{r4, pc}
 802d4e0:	08035cb0 	.word	0x08035cb0

0802d4e4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 802d4e4:	4b05      	ldr	r3, [pc, #20]	; (802d4fc <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 802d4e6:	b510      	push	{r4, lr}
 802d4e8:	4604      	mov	r4, r0
 802d4ea:	6003      	str	r3, [r0, #0]
 802d4ec:	f000 f8fe 	bl	802d6ec <_ZN10__cxxabiv117__class_type_infoD1Ev>
 802d4f0:	4620      	mov	r0, r4
 802d4f2:	f7ff f8fd 	bl	802c6f0 <_ZdlPv>
 802d4f6:	4620      	mov	r0, r4
 802d4f8:	bd10      	pop	{r4, pc}
 802d4fa:	bf00      	nop
 802d4fc:	08035cb0 	.word	0x08035cb0

0802d500 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 802d500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d502:	4607      	mov	r7, r0
 802d504:	460e      	mov	r6, r1
 802d506:	4615      	mov	r5, r2
 802d508:	461c      	mov	r4, r3
 802d50a:	f000 f8e1 	bl	802d6d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 802d50e:	b108      	cbz	r0, 802d514 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>
 802d510:	2001      	movs	r0, #1
 802d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d514:	68bf      	ldr	r7, [r7, #8]
 802d516:	4623      	mov	r3, r4
 802d518:	4631      	mov	r1, r6
 802d51a:	462a      	mov	r2, r5
 802d51c:	4638      	mov	r0, r7
 802d51e:	683c      	ldr	r4, [r7, #0]
 802d520:	69a4      	ldr	r4, [r4, #24]
 802d522:	47a0      	blx	r4
 802d524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d526:	bf00      	nop

0802d528 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 802d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d52c:	b087      	sub	sp, #28
 802d52e:	4689      	mov	r9, r1
 802d530:	4619      	mov	r1, r3
 802d532:	4698      	mov	r8, r3
 802d534:	4607      	mov	r7, r0
 802d536:	4692      	mov	sl, r2
 802d538:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802d53a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 802d53e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802d540:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802d542:	f000 f867 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d546:	4603      	mov	r3, r0
 802d548:	b168      	cbz	r0, 802d566 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e>
 802d54a:	f1b9 0f00 	cmp.w	r9, #0
 802d54e:	6025      	str	r5, [r4, #0]
 802d550:	f884 a004 	strb.w	sl, [r4, #4]
 802d554:	db18      	blt.n	802d588 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x60>
 802d556:	444d      	add	r5, r9
 802d558:	2000      	movs	r0, #0
 802d55a:	42ae      	cmp	r6, r5
 802d55c:	bf14      	ite	ne
 802d55e:	2601      	movne	r6, #1
 802d560:	2606      	moveq	r6, #6
 802d562:	71a6      	strb	r6, [r4, #6]
 802d564:	e00d      	b.n	802d582 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 802d566:	42b5      	cmp	r5, r6
 802d568:	d015      	beq.n	802d596 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 802d56a:	68bf      	ldr	r7, [r7, #8]
 802d56c:	4649      	mov	r1, r9
 802d56e:	4652      	mov	r2, sl
 802d570:	4643      	mov	r3, r8
 802d572:	4638      	mov	r0, r7
 802d574:	683f      	ldr	r7, [r7, #0]
 802d576:	9602      	str	r6, [sp, #8]
 802d578:	9403      	str	r4, [sp, #12]
 802d57a:	e88d 0820 	stmia.w	sp, {r5, fp}
 802d57e:	69fc      	ldr	r4, [r7, #28]
 802d580:	47a0      	blx	r4
 802d582:	b007      	add	sp, #28
 802d584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d588:	2000      	movs	r0, #0
 802d58a:	f119 0f02 	cmn.w	r9, #2
 802d58e:	d1f8      	bne.n	802d582 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 802d590:	2301      	movs	r3, #1
 802d592:	71a3      	strb	r3, [r4, #6]
 802d594:	e7f5      	b.n	802d582 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 802d596:	4638      	mov	r0, r7
 802d598:	4659      	mov	r1, fp
 802d59a:	9305      	str	r3, [sp, #20]
 802d59c:	f000 f83a 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d5a0:	9b05      	ldr	r3, [sp, #20]
 802d5a2:	2800      	cmp	r0, #0
 802d5a4:	d0e1      	beq.n	802d56a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 802d5a6:	f884 a005 	strb.w	sl, [r4, #5]
 802d5aa:	4618      	mov	r0, r3
 802d5ac:	e7e9      	b.n	802d582 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 802d5ae:	bf00      	nop

0802d5b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 802d5b0:	b570      	push	{r4, r5, r6, lr}
 802d5b2:	b084      	sub	sp, #16
 802d5b4:	4605      	mov	r5, r0
 802d5b6:	460e      	mov	r6, r1
 802d5b8:	9c08      	ldr	r4, [sp, #32]
 802d5ba:	4294      	cmp	r4, r2
 802d5bc:	d008      	beq.n	802d5d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x20>
 802d5be:	68ad      	ldr	r5, [r5, #8]
 802d5c0:	4631      	mov	r1, r6
 802d5c2:	4628      	mov	r0, r5
 802d5c4:	682d      	ldr	r5, [r5, #0]
 802d5c6:	9400      	str	r4, [sp, #0]
 802d5c8:	6a2c      	ldr	r4, [r5, #32]
 802d5ca:	47a0      	blx	r4
 802d5cc:	b004      	add	sp, #16
 802d5ce:	bd70      	pop	{r4, r5, r6, pc}
 802d5d0:	4619      	mov	r1, r3
 802d5d2:	9203      	str	r2, [sp, #12]
 802d5d4:	9302      	str	r3, [sp, #8]
 802d5d6:	f000 f81d 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d5da:	9a03      	ldr	r2, [sp, #12]
 802d5dc:	9b02      	ldr	r3, [sp, #8]
 802d5de:	2800      	cmp	r0, #0
 802d5e0:	d0ed      	beq.n	802d5be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 802d5e2:	2006      	movs	r0, #6
 802d5e4:	e7f2      	b.n	802d5cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 802d5e6:	bf00      	nop

0802d5e8 <_ZNSt9type_infoD1Ev>:
 802d5e8:	4b01      	ldr	r3, [pc, #4]	; (802d5f0 <_ZNSt9type_infoD1Ev+0x8>)
 802d5ea:	6003      	str	r3, [r0, #0]
 802d5ec:	4770      	bx	lr
 802d5ee:	bf00      	nop
 802d5f0:	08035d30 	.word	0x08035d30

0802d5f4 <_ZNKSt9type_info14__is_pointer_pEv>:
 802d5f4:	2000      	movs	r0, #0
 802d5f6:	4770      	bx	lr

0802d5f8 <_ZNKSt9type_info15__is_function_pEv>:
 802d5f8:	2000      	movs	r0, #0
 802d5fa:	4770      	bx	lr

0802d5fc <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 802d5fc:	2000      	movs	r0, #0
 802d5fe:	4770      	bx	lr

0802d600 <_ZNSt9type_infoD0Ev>:
 802d600:	4b03      	ldr	r3, [pc, #12]	; (802d610 <_ZNSt9type_infoD0Ev+0x10>)
 802d602:	b510      	push	{r4, lr}
 802d604:	4604      	mov	r4, r0
 802d606:	6003      	str	r3, [r0, #0]
 802d608:	f7ff f872 	bl	802c6f0 <_ZdlPv>
 802d60c:	4620      	mov	r0, r4
 802d60e:	bd10      	pop	{r4, pc}
 802d610:	08035d30 	.word	0x08035d30

0802d614 <_ZNKSt9type_infoeqERKS_>:
 802d614:	4281      	cmp	r1, r0
 802d616:	b508      	push	{r3, lr}
 802d618:	d016      	beq.n	802d648 <_ZNKSt9type_infoeqERKS_+0x34>
 802d61a:	6840      	ldr	r0, [r0, #4]
 802d61c:	7803      	ldrb	r3, [r0, #0]
 802d61e:	2b2a      	cmp	r3, #42	; 0x2a
 802d620:	d00b      	beq.n	802d63a <_ZNKSt9type_infoeqERKS_+0x26>
 802d622:	6849      	ldr	r1, [r1, #4]
 802d624:	780b      	ldrb	r3, [r1, #0]
 802d626:	2b2a      	cmp	r3, #42	; 0x2a
 802d628:	bf08      	it	eq
 802d62a:	3101      	addeq	r1, #1
 802d62c:	f7f9 f82a 	bl	8026684 <strcmp>
 802d630:	f1d0 0001 	rsbs	r0, r0, #1
 802d634:	bf38      	it	cc
 802d636:	2000      	movcc	r0, #0
 802d638:	bd08      	pop	{r3, pc}
 802d63a:	7843      	ldrb	r3, [r0, #1]
 802d63c:	2b2a      	cmp	r3, #42	; 0x2a
 802d63e:	d101      	bne.n	802d644 <_ZNKSt9type_infoeqERKS_+0x30>
 802d640:	2000      	movs	r0, #0
 802d642:	bd08      	pop	{r3, pc}
 802d644:	3001      	adds	r0, #1
 802d646:	e7ec      	b.n	802d622 <_ZNKSt9type_infoeqERKS_+0xe>
 802d648:	2001      	movs	r0, #1
 802d64a:	bd08      	pop	{r3, pc}

0802d64c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 802d64c:	f7ff bfe2 	b.w	802d614 <_ZNKSt9type_infoeqERKS_>

0802d650 <_ZNKSt10bad_typeid4whatEv>:
 802d650:	f645 506c 	movw	r0, #23916	; 0x5d6c
 802d654:	f6c0 0003 	movt	r0, #2051	; 0x803
 802d658:	4770      	bx	lr
 802d65a:	bf00      	nop

0802d65c <_ZNSt10bad_typeidD1Ev>:
 802d65c:	4b03      	ldr	r3, [pc, #12]	; (802d66c <_ZNSt10bad_typeidD1Ev+0x10>)
 802d65e:	b510      	push	{r4, lr}
 802d660:	4604      	mov	r4, r0
 802d662:	6003      	str	r3, [r0, #0]
 802d664:	f7ff fb40 	bl	802cce8 <_ZNSt9exceptionD1Ev>
 802d668:	4620      	mov	r0, r4
 802d66a:	bd10      	pop	{r4, pc}
 802d66c:	08035d50 	.word	0x08035d50

0802d670 <_ZNSt10bad_typeidD0Ev>:
 802d670:	4b05      	ldr	r3, [pc, #20]	; (802d688 <_ZNSt10bad_typeidD0Ev+0x18>)
 802d672:	b510      	push	{r4, lr}
 802d674:	4604      	mov	r4, r0
 802d676:	6003      	str	r3, [r0, #0]
 802d678:	f7ff fb36 	bl	802cce8 <_ZNSt9exceptionD1Ev>
 802d67c:	4620      	mov	r0, r4
 802d67e:	f7ff f837 	bl	802c6f0 <_ZdlPv>
 802d682:	4620      	mov	r0, r4
 802d684:	bd10      	pop	{r4, pc}
 802d686:	bf00      	nop
 802d688:	08035d50 	.word	0x08035d50

0802d68c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 802d68c:	b570      	push	{r4, r5, r6, lr}
 802d68e:	b084      	sub	sp, #16
 802d690:	6806      	ldr	r6, [r0, #0]
 802d692:	2400      	movs	r4, #0
 802d694:	2310      	movs	r3, #16
 802d696:	4615      	mov	r5, r2
 802d698:	9302      	str	r3, [sp, #8]
 802d69a:	466b      	mov	r3, sp
 802d69c:	6812      	ldr	r2, [r2, #0]
 802d69e:	9400      	str	r4, [sp, #0]
 802d6a0:	f88d 4004 	strb.w	r4, [sp, #4]
 802d6a4:	9403      	str	r4, [sp, #12]
 802d6a6:	69b6      	ldr	r6, [r6, #24]
 802d6a8:	47b0      	blx	r6
 802d6aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 802d6ae:	f003 0306 	and.w	r3, r3, #6
 802d6b2:	2b06      	cmp	r3, #6
 802d6b4:	bf18      	it	ne
 802d6b6:	4620      	movne	r0, r4
 802d6b8:	d102      	bne.n	802d6c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x34>
 802d6ba:	9b00      	ldr	r3, [sp, #0]
 802d6bc:	2001      	movs	r0, #1
 802d6be:	602b      	str	r3, [r5, #0]
 802d6c0:	b004      	add	sp, #16
 802d6c2:	bd70      	pop	{r4, r5, r6, pc}

0802d6c4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 802d6c4:	9800      	ldr	r0, [sp, #0]
 802d6c6:	4290      	cmp	r0, r2
 802d6c8:	bf14      	ite	ne
 802d6ca:	2001      	movne	r0, #1
 802d6cc:	2006      	moveq	r0, #6
 802d6ce:	4770      	bx	lr

0802d6d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 802d6d0:	b538      	push	{r3, r4, r5, lr}
 802d6d2:	4614      	mov	r4, r2
 802d6d4:	461d      	mov	r5, r3
 802d6d6:	f7ff ff9d 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d6da:	b128      	cbz	r0, 802d6e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x18>
 802d6dc:	2001      	movs	r0, #1
 802d6de:	2308      	movs	r3, #8
 802d6e0:	602c      	str	r4, [r5, #0]
 802d6e2:	60eb      	str	r3, [r5, #12]
 802d6e4:	2306      	movs	r3, #6
 802d6e6:	712b      	strb	r3, [r5, #4]
 802d6e8:	bd38      	pop	{r3, r4, r5, pc}
 802d6ea:	bf00      	nop

0802d6ec <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 802d6ec:	4b03      	ldr	r3, [pc, #12]	; (802d6fc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 802d6ee:	b510      	push	{r4, lr}
 802d6f0:	4604      	mov	r4, r0
 802d6f2:	6003      	str	r3, [r0, #0]
 802d6f4:	f7ff ff78 	bl	802d5e8 <_ZNSt9type_infoD1Ev>
 802d6f8:	4620      	mov	r0, r4
 802d6fa:	bd10      	pop	{r4, pc}
 802d6fc:	08035d98 	.word	0x08035d98

0802d700 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 802d700:	4b05      	ldr	r3, [pc, #20]	; (802d718 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 802d702:	b510      	push	{r4, lr}
 802d704:	4604      	mov	r4, r0
 802d706:	6003      	str	r3, [r0, #0]
 802d708:	f7ff ff6e 	bl	802d5e8 <_ZNSt9type_infoD1Ev>
 802d70c:	4620      	mov	r0, r4
 802d70e:	f7fe ffef 	bl	802c6f0 <_ZdlPv>
 802d712:	4620      	mov	r0, r4
 802d714:	bd10      	pop	{r4, pc}
 802d716:	bf00      	nop
 802d718:	08035d98 	.word	0x08035d98

0802d71c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 802d71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d71e:	b083      	sub	sp, #12
 802d720:	4616      	mov	r6, r2
 802d722:	4605      	mov	r5, r0
 802d724:	9c08      	ldr	r4, [sp, #32]
 802d726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802d728:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802d72a:	4294      	cmp	r4, r2
 802d72c:	d00b      	beq.n	802d746 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 802d72e:	4628      	mov	r0, r5
 802d730:	4619      	mov	r1, r3
 802d732:	f7ff ff6f 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d736:	b118      	cbz	r0, 802d740 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 802d738:	2301      	movs	r3, #1
 802d73a:	603c      	str	r4, [r7, #0]
 802d73c:	713e      	strb	r6, [r7, #4]
 802d73e:	71bb      	strb	r3, [r7, #6]
 802d740:	2000      	movs	r0, #0
 802d742:	b003      	add	sp, #12
 802d744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d746:	9909      	ldr	r1, [sp, #36]	; 0x24
 802d748:	9301      	str	r3, [sp, #4]
 802d74a:	f7ff ff63 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d74e:	9b01      	ldr	r3, [sp, #4]
 802d750:	2800      	cmp	r0, #0
 802d752:	d0ec      	beq.n	802d72e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
 802d754:	717e      	strb	r6, [r7, #5]
 802d756:	e7f3      	b.n	802d740 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>

0802d758 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 802d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d75a:	4605      	mov	r5, r0
 802d75c:	460c      	mov	r4, r1
 802d75e:	4616      	mov	r6, r2
 802d760:	461f      	mov	r7, r3
 802d762:	f7ff ff57 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d766:	b948      	cbnz	r0, 802d77c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x24>
 802d768:	2f03      	cmp	r7, #3
 802d76a:	d900      	bls.n	802d76e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 802d76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d76e:	6823      	ldr	r3, [r4, #0]
 802d770:	4620      	mov	r0, r4
 802d772:	4629      	mov	r1, r5
 802d774:	4632      	mov	r2, r6
 802d776:	695b      	ldr	r3, [r3, #20]
 802d778:	4798      	blx	r3
 802d77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d77c:	2001      	movs	r0, #1
 802d77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802d780 <__cxa_allocate_exception>:
 802d780:	b538      	push	{r3, r4, r5, lr}
 802d782:	f100 0580 	add.w	r5, r0, #128	; 0x80
 802d786:	4628      	mov	r0, r5
 802d788:	f7f7 ffc2 	bl	8025710 <malloc>
 802d78c:	4604      	mov	r4, r0
 802d78e:	b168      	cbz	r0, 802d7ac <__cxa_allocate_exception+0x2c>
 802d790:	f7ff fadc 	bl	802cd4c <__cxa_get_globals>
 802d794:	2100      	movs	r1, #0
 802d796:	2280      	movs	r2, #128	; 0x80
 802d798:	4603      	mov	r3, r0
 802d79a:	4620      	mov	r0, r4
 802d79c:	685d      	ldr	r5, [r3, #4]
 802d79e:	3501      	adds	r5, #1
 802d7a0:	605d      	str	r5, [r3, #4]
 802d7a2:	f7f8 fb91 	bl	8025ec8 <memset>
 802d7a6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 802d7aa:	bd38      	pop	{r3, r4, r5, pc}
 802d7ac:	4a0b      	ldr	r2, [pc, #44]	; (802d7dc <__cxa_allocate_exception+0x5c>)
 802d7ae:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 802d7b2:	6811      	ldr	r1, [r2, #0]
 802d7b4:	bf98      	it	ls
 802d7b6:	460b      	movls	r3, r1
 802d7b8:	d805      	bhi.n	802d7c6 <__cxa_allocate_exception+0x46>
 802d7ba:	07d8      	lsls	r0, r3, #31
 802d7bc:	d505      	bpl.n	802d7ca <__cxa_allocate_exception+0x4a>
 802d7be:	3401      	adds	r4, #1
 802d7c0:	085b      	lsrs	r3, r3, #1
 802d7c2:	2c04      	cmp	r4, #4
 802d7c4:	d1f9      	bne.n	802d7ba <__cxa_allocate_exception+0x3a>
 802d7c6:	f7fe ffb7 	bl	802c738 <_ZSt9terminatev>
 802d7ca:	2301      	movs	r3, #1
 802d7cc:	4804      	ldr	r0, [pc, #16]	; (802d7e0 <__cxa_allocate_exception+0x60>)
 802d7ce:	40a3      	lsls	r3, r4
 802d7d0:	eb00 2444 	add.w	r4, r0, r4, lsl #9
 802d7d4:	4319      	orrs	r1, r3
 802d7d6:	6011      	str	r1, [r2, #0]
 802d7d8:	e7da      	b.n	802d790 <__cxa_allocate_exception+0x10>
 802d7da:	bf00      	nop
 802d7dc:	20003fc0 	.word	0x20003fc0
 802d7e0:	20003fc8 	.word	0x20003fc8

0802d7e4 <__cxa_free_exception>:
 802d7e4:	4b0a      	ldr	r3, [pc, #40]	; (802d810 <__cxa_free_exception+0x2c>)
 802d7e6:	4298      	cmp	r0, r3
 802d7e8:	d30e      	bcc.n	802d808 <__cxa_free_exception+0x24>
 802d7ea:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 802d7ee:	4290      	cmp	r0, r2
 802d7f0:	d20a      	bcs.n	802d808 <__cxa_free_exception+0x24>
 802d7f2:	4a08      	ldr	r2, [pc, #32]	; (802d814 <__cxa_free_exception+0x30>)
 802d7f4:	1ac3      	subs	r3, r0, r3
 802d7f6:	2001      	movs	r0, #1
 802d7f8:	0a5b      	lsrs	r3, r3, #9
 802d7fa:	6811      	ldr	r1, [r2, #0]
 802d7fc:	fa10 f303 	lsls.w	r3, r0, r3
 802d800:	ea21 0303 	bic.w	r3, r1, r3
 802d804:	6013      	str	r3, [r2, #0]
 802d806:	4770      	bx	lr
 802d808:	3880      	subs	r0, #128	; 0x80
 802d80a:	f7f7 bf89 	b.w	8025720 <free>
 802d80e:	bf00      	nop
 802d810:	20003fc8 	.word	0x20003fc8
 802d814:	20003fc0 	.word	0x20003fc0

0802d818 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 802d818:	b510      	push	{r4, lr}
 802d81a:	3302      	adds	r3, #2
 802d81c:	68c4      	ldr	r4, [r0, #12]
 802d81e:	68c9      	ldr	r1, [r1, #12]
 802d820:	4620      	mov	r0, r4
 802d822:	6824      	ldr	r4, [r4, #0]
 802d824:	6924      	ldr	r4, [r4, #16]
 802d826:	47a0      	blx	r4
 802d828:	bd10      	pop	{r4, pc}
 802d82a:	bf00      	nop

0802d82c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 802d82c:	4b03      	ldr	r3, [pc, #12]	; (802d83c <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 802d82e:	b510      	push	{r4, lr}
 802d830:	4604      	mov	r4, r0
 802d832:	6003      	str	r3, [r0, #0]
 802d834:	f7ff fed8 	bl	802d5e8 <_ZNSt9type_infoD1Ev>
 802d838:	4620      	mov	r0, r4
 802d83a:	bd10      	pop	{r4, pc}
 802d83c:	08035e28 	.word	0x08035e28

0802d840 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 802d840:	4b05      	ldr	r3, [pc, #20]	; (802d858 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
 802d842:	b510      	push	{r4, lr}
 802d844:	4604      	mov	r4, r0
 802d846:	6003      	str	r3, [r0, #0]
 802d848:	f7ff fece 	bl	802d5e8 <_ZNSt9type_infoD1Ev>
 802d84c:	4620      	mov	r0, r4
 802d84e:	f7fe ff4f 	bl	802c6f0 <_ZdlPv>
 802d852:	4620      	mov	r0, r4
 802d854:	bd10      	pop	{r4, pc}
 802d856:	bf00      	nop
 802d858:	08035e28 	.word	0x08035e28

0802d85c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 802d85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d860:	4605      	mov	r5, r0
 802d862:	460c      	mov	r4, r1
 802d864:	4617      	mov	r7, r2
 802d866:	461e      	mov	r6, r3
 802d868:	f7ff fed4 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d86c:	4680      	mov	r8, r0
 802d86e:	2800      	cmp	r0, #0
 802d870:	d125      	bne.n	802d8be <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x62>
 802d872:	682b      	ldr	r3, [r5, #0]
 802d874:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802d878:	2c00      	cmp	r4, #0
 802d87a:	d023      	beq.n	802d8c4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x68>
 802d87c:	6823      	ldr	r3, [r4, #0]
 802d87e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 802d882:	f7ff fec7 	bl	802d614 <_ZNKSt9type_infoeqERKS_>
 802d886:	b1a8      	cbz	r0, 802d8b4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 802d888:	f016 0001 	ands.w	r0, r6, #1
 802d88c:	d015      	beq.n	802d8ba <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5e>
 802d88e:	68ab      	ldr	r3, [r5, #8]
 802d890:	68a2      	ldr	r2, [r4, #8]
 802d892:	439a      	bics	r2, r3
 802d894:	d110      	bne.n	802d8b8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
 802d896:	f8d5 e000 	ldr.w	lr, [r5]
 802d89a:	07db      	lsls	r3, r3, #31
 802d89c:	bf58      	it	pl
 802d89e:	f026 0601 	bicpl.w	r6, r6, #1
 802d8a2:	4621      	mov	r1, r4
 802d8a4:	4628      	mov	r0, r5
 802d8a6:	463a      	mov	r2, r7
 802d8a8:	4633      	mov	r3, r6
 802d8aa:	f8de 4018 	ldr.w	r4, [lr, #24]
 802d8ae:	47a0      	blx	r4
 802d8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d8b8:	4640      	mov	r0, r8
 802d8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d8be:	2001      	movs	r0, #1
 802d8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d8c4:	f7ff f8c0 	bl	802ca48 <__cxa_bad_typeid>
 802d8c8:	00412f4e 	.word	0x00412f4e
 802d8cc:	72746e49 	.word	0x72746e49
 802d8d0:	6375646f 	.word	0x6375646f
 802d8d4:	20676e69 	.word	0x20676e69
 802d8d8:	6a6f7250 	.word	0x6a6f7250
 802d8dc:	3a746365 	.word	0x3a746365
 802d8e0:	00000000 	.word	0x00000000
 802d8e4:	6e756854 	.word	0x6e756854
 802d8e8:	43726564 	.word	0x43726564
 802d8ec:	72657972 	.word	0x72657972
 802d8f0:	00000000 	.word	0x00000000
 802d8f4:	313a3132 	.word	0x313a3132
 802d8f8:	00000034 	.word	0x00000034
 802d8fc:	202e7246 	.word	0x202e7246
 802d900:	302e3432 	.word	0x302e3432
 802d904:	32312e32 	.word	0x32312e32
 802d908:	00000000 	.word	0x00000000
 802d90c:	65766544 	.word	0x65766544
 802d910:	6d706f6c 	.word	0x6d706f6c
 802d914:	20746e65 	.word	0x20746e65
 802d918:	70206e69 	.word	0x70206e69
 802d91c:	72676f72 	.word	0x72676f72
 802d920:	00737365 	.word	0x00737365
 802d924:	75323025 	.word	0x75323025
 802d928:	00000000 	.word	0x00000000
 802d92c:	462f2e2e 	.word	0x462f2e2e
 802d930:	52656572 	.word	0x52656572
 802d934:	5f534f54 	.word	0x5f534f54
 802d938:	532f4345 	.word	0x532f4345
 802d93c:	6372756f 	.word	0x6372756f
 802d940:	54432f65 	.word	0x54432f65
 802d944:	2e6b7361 	.word	0x2e6b7361
 802d948:	00707063 	.word	0x00707063
 802d94c:	646e6168 	.word	0x646e6168
 802d950:	2120656c 	.word	0x2120656c
 802d954:	554e203d 	.word	0x554e203d
 802d958:	00004c4c 	.word	0x00004c4c
 802d95c:	454c4449 	.word	0x454c4449
 802d960:	00000000 	.word	0x00000000
 802d964:	00000a0d 	.word	0x00000a0d
 802d968:	20207525 	.word	0x20207525
 802d96c:	20206325 	.word	0x20206325
 802d970:	36312d25 	.word	0x36312d25
 802d974:	20202073 	.word	0x20202073
 802d978:	20202020 	.word	0x20202020
 802d97c:	30202020 	.word	0x30202020
 802d980:	30202020 	.word	0x30202020
 802d984:	20202525 	.word	0x20202525
 802d988:	0d753525 	.word	0x0d753525
 802d98c:	0000000a 	.word	0x0000000a
 802d990:	20207525 	.word	0x20207525
 802d994:	20206325 	.word	0x20206325
 802d998:	36312d25 	.word	0x36312d25
 802d99c:	31252073 	.word	0x31252073
 802d9a0:	25207530 	.word	0x25207530
 802d9a4:	25257533 	.word	0x25257533
 802d9a8:	35252020 	.word	0x35252020
 802d9ac:	000a0d75 	.word	0x000a0d75
 802d9b0:	20207525 	.word	0x20207525
 802d9b4:	20206325 	.word	0x20206325
 802d9b8:	36312d25 	.word	0x36312d25
 802d9bc:	31252073 	.word	0x31252073
 802d9c0:	20207530 	.word	0x20207530
 802d9c4:	2525313c 	.word	0x2525313c
 802d9c8:	35252020 	.word	0x35252020
 802d9cc:	000a0d75 	.word	0x000a0d75
 802d9d0:	2b2a2220 	.word	0x2b2a2220
 802d9d4:	5d3d5b2c 	.word	0x5d3d5b2c
 802d9d8:	00007f7c 	.word	0x00007f7c
 802d9dc:	4e204f4e 	.word	0x4e204f4e
 802d9e0:	20454d41 	.word	0x20454d41
 802d9e4:	46202020 	.word	0x46202020
 802d9e8:	20205441 	.word	0x20205441
 802d9ec:	00202020 	.word	0x00202020
 802d9f0:	4e204f4e 	.word	0x4e204f4e
 802d9f4:	20454d41 	.word	0x20454d41
 802d9f8:	46202020 	.word	0x46202020
 802d9fc:	32335441 	.word	0x32335441
 802da00:	00202020 	.word	0x00202020
 802da04:	2064654c 	.word	0x2064654c
 802da08:	72616548 	.word	0x72616548
 802da0c:	61656274 	.word	0x61656274
 802da10:	00000074 	.word	0x00000074
 802da14:	20425355 	.word	0x20425355
 802da18:	7373614d 	.word	0x7373614d
 802da1c:	726f7473 	.word	0x726f7473
 802da20:	00656761 	.word	0x00656761
 802da24:	656c6946 	.word	0x656c6946
 802da28:	646e6148 	.word	0x646e6148
 802da2c:	0072656c 	.word	0x0072656c
 802da30:	6e676973 	.word	0x6e676973
 802da34:	63206465 	.word	0x63206465
 802da38:	00726168 	.word	0x00726168
 802da3c:	6c6f6f62 	.word	0x6c6f6f62
 802da40:	00000000 	.word	0x00000000
 802da44:	6c6f6f62 	.word	0x6c6f6f62
 802da48:	006e6165 	.word	0x006e6165
 802da4c:	72616863 	.word	0x72616863
 802da50:	00000000 	.word	0x00000000
 802da54:	65747962 	.word	0x65747962
 802da58:	00000000 	.word	0x00000000
 802da5c:	62756f64 	.word	0x62756f64
 802da60:	0000656c 	.word	0x0000656c
 802da64:	676e6f6c 	.word	0x676e6f6c
 802da68:	756f6420 	.word	0x756f6420
 802da6c:	00656c62 	.word	0x00656c62
 802da70:	616f6c66 	.word	0x616f6c66
 802da74:	00000074 	.word	0x00000074
 802da78:	6c665f5f 	.word	0x6c665f5f
 802da7c:	3174616f 	.word	0x3174616f
 802da80:	00003832 	.word	0x00003832
 802da84:	69736e75 	.word	0x69736e75
 802da88:	64656e67 	.word	0x64656e67
 802da8c:	61686320 	.word	0x61686320
 802da90:	00000072 	.word	0x00000072
 802da94:	00746e69 	.word	0x00746e69
 802da98:	69736e75 	.word	0x69736e75
 802da9c:	64656e67 	.word	0x64656e67
 802daa0:	746e6920 	.word	0x746e6920
 802daa4:	00000000 	.word	0x00000000
 802daa8:	69736e75 	.word	0x69736e75
 802daac:	64656e67 	.word	0x64656e67
 802dab0:	00000000 	.word	0x00000000
 802dab4:	676e6f6c 	.word	0x676e6f6c
 802dab8:	00000000 	.word	0x00000000
 802dabc:	69736e75 	.word	0x69736e75
 802dac0:	64656e67 	.word	0x64656e67
 802dac4:	6e6f6c20 	.word	0x6e6f6c20
 802dac8:	00000067 	.word	0x00000067
 802dacc:	6e695f5f 	.word	0x6e695f5f
 802dad0:	38323174 	.word	0x38323174
 802dad4:	00000000 	.word	0x00000000
 802dad8:	69736e75 	.word	0x69736e75
 802dadc:	64656e67 	.word	0x64656e67
 802dae0:	695f5f20 	.word	0x695f5f20
 802dae4:	3231746e 	.word	0x3231746e
 802dae8:	00000038 	.word	0x00000038
 802daec:	726f6873 	.word	0x726f6873
 802daf0:	00000074 	.word	0x00000074
 802daf4:	69736e75 	.word	0x69736e75
 802daf8:	64656e67 	.word	0x64656e67
 802dafc:	6f687320 	.word	0x6f687320
 802db00:	00007472 	.word	0x00007472
 802db04:	64696f76 	.word	0x64696f76
 802db08:	00000000 	.word	0x00000000
 802db0c:	61686377 	.word	0x61686377
 802db10:	00745f72 	.word	0x00745f72
 802db14:	676e6f6c 	.word	0x676e6f6c
 802db18:	6e6f6c20 	.word	0x6e6f6c20
 802db1c:	00000067 	.word	0x00000067
 802db20:	69736e75 	.word	0x69736e75
 802db24:	64656e67 	.word	0x64656e67
 802db28:	6e6f6c20 	.word	0x6e6f6c20
 802db2c:	6f6c2067 	.word	0x6f6c2067
 802db30:	0000676e 	.word	0x0000676e
 802db34:	002e2e2e 	.word	0x002e2e2e
 802db38:	69636564 	.word	0x69636564
 802db3c:	336c616d 	.word	0x336c616d
 802db40:	00000032 	.word	0x00000032
 802db44:	69636564 	.word	0x69636564
 802db48:	366c616d 	.word	0x366c616d
 802db4c:	00000034 	.word	0x00000034
 802db50:	69636564 	.word	0x69636564
 802db54:	316c616d 	.word	0x316c616d
 802db58:	00003832 	.word	0x00003832
 802db5c:	666c6168 	.word	0x666c6168
 802db60:	00000000 	.word	0x00000000
 802db64:	72616863 	.word	0x72616863
 802db68:	745f3631 	.word	0x745f3631
 802db6c:	00000000 	.word	0x00000000
 802db70:	72616863 	.word	0x72616863
 802db74:	745f3233 	.word	0x745f3233
 802db78:	00000000 	.word	0x00000000
 802db7c:	6c636564 	.word	0x6c636564
 802db80:	65707974 	.word	0x65707974
 802db84:	6c756e28 	.word	0x6c756e28
 802db88:	7274706c 	.word	0x7274706c
 802db8c:	00000029 	.word	0x00000029

0802db90 <cplus_demangle_builtin_types>:
 802db90:	0802da30 0000000b 0802da30 0000000b     0.......0.......
 802dba0:	00000000 0802da3c 00000004 0802da44     ....<.......D...
 802dbb0:	00000007 00000007 0802da4c 00000004     ........L.......
 802dbc0:	0802da54 00000004 00000000 0802da5c     T...........\...
 802dbd0:	00000006 0802da5c 00000006 00000008     ....\...........
 802dbe0:	0802da64 0000000b 0802da64 0000000b     d.......d.......
 802dbf0:	00000008 0802da70 00000005 0802da70     ....p.......p...
 802dc00:	00000005 00000008 0802da78 0000000a     ........x.......
 802dc10:	0802da78 0000000a 00000008 0802da84     x...............
 802dc20:	0000000d 0802da84 0000000d 00000000     ................
 802dc30:	0802da94 00000003 0802da94 00000003     ................
 802dc40:	00000001 0802da98 0000000c 0802daa8     ................
 802dc50:	00000008 00000002 00000000 00000000     ................
	...
 802dc6c:	0802dab4 00000004 0802dab4 00000004     ................
 802dc7c:	00000003 0802dabc 0000000d 0802dabc     ................
 802dc8c:	0000000d 00000004 0802dacc 00000008     ................
 802dc9c:	0802dacc 00000008 00000000 0802dad8     ................
 802dcac:	00000011 0802dad8 00000011 00000000     ................
	...
 802dcf8:	0802daec 00000005 0802daec 00000005     ................
 802dd08:	00000000 0802daf4 0000000e 0802daf4     ................
 802dd18:	0000000e 00000000 00000000 00000000     ................
	...
 802dd34:	0802db04 00000004 0802db04 00000004     ................
 802dd44:	00000009 0802db0c 00000007 0802da4c     ............L...
 802dd54:	00000004 00000000 0802db14 00000009     ................
 802dd64:	0802dab4 00000004 00000005 0802db20     ............ ...
 802dd74:	00000012 0802db20 00000012 00000006     .... ...........
 802dd84:	0802db34 00000003 0802db34 00000003     4.......4.......
 802dd94:	00000000 0802db38 00000009 0802db38     ....8.......8...
 802dda4:	00000009 00000000 0802db44 00000009     ........D.......
 802ddb4:	0802db44 00000009 00000000 0802db50     D...........P...
 802ddc4:	0000000a 0802db50 0000000a 00000000     ....P...........
 802ddd4:	0802db5c 00000004 0802db5c 00000004     \.......\.......
 802dde4:	00000008 0802db64 00000008 0802db64     ....d.......d...
 802ddf4:	00000008 00000000 0802db70 00000008     ........p.......
 802de04:	0802db70 00000008 00000000 0802db7c     p...........|...
 802de14:	00000011 0802db7c 00000011 00000000     ....|...........
 802de24:	00647473 4f4c475f 5f4c4142 00000000     std._GLOBAL_....
 802de34:	6f6e6128 6f6d796e 6e207375 73656d61     (anonymous names
 802de44:	65636170 00000029 00004e61 00003d26     pace)...aN..&=..
 802de54:	00005361 0000003d 00006161 00002626     aS..=...aa..&&..
 802de64:	00006461 00000026 00006e61 00006c63     ad..&...an..cl..
 802de74:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
 802de84:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
 802de94:	656c6564 5d5b6574 00000000 00006564     delete[]....de..
 802dea4:	0000002a 00006c64 656c6564 00006574     *...dl..delete..
 802deb4:	00007464 0000002e 00007664 0000002f     dt......dv../...
 802dec4:	00004f65 00003d5e 00006f65 0000005e     eO..^=..eo..^...
 802ded4:	00007165 00003d3d 00006567 00003d3e     eq..==..ge..>=..
 802dee4:	00007467 0000003e 00007869 00005d5b     gt..>...ix..[]..
 802def4:	0000536c 003d3c3c 0000656c 00003d3c     lS..<<=.le..<=..
 802df04:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
 802df14:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
 802df24:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
 802df34:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
 802df44:	0000656e 00003d21 0000676e 0000746e     ne..!=..ng..nt..
 802df54:	00000021 0000776e 0077656e 0000526f     !...nw..new.oR..
 802df64:	00003d7c 00006f6f 00007c7c 0000726f     |=..oo..||..or..
 802df74:	0000007c 00004c70 00003d2b 00006c70     |...pL..+=..pl..
 802df84:	0000002b 00006d70 002a3e2d 00007070     +...pm..->*.pp..
 802df94:	00002b2b 00007370 00007470 00003e2d     ++..ps..pt..->..
 802dfa4:	00007571 0000003f 00004d72 00003d25     qu..?...rM..%=..
 802dfb4:	00005372 003d3e3e 00006d72 00000025     rS..>>=.rm..%...
 802dfc4:	00007372 00003e3e 00007473 657a6973     rs..>>..st..size
 802dfd4:	0020666f 00007a73 00007461 67696c61     of .sz..at..alig
 802dfe4:	20666f6e 00000000 00007a61              nof ....az..

0802dff0 <cplus_demangle_operators>:
 802dff0:	0802de4c 0802de50 00000002 00000002     L...P...........
 802e000:	0802de54 0802de58 00000001 00000002     T...X...........
 802e010:	0802de5c 0802de60 00000002 00000002     \...`...........
 802e020:	0802de64 0802de68 00000001 00000001     d...h...........
 802e030:	0802de6c 0802de68 00000001 00000002     l...h...........
 802e040:	0802de70 0802de74 00000002 00000002     p...t...........
 802e050:	0802de78 0802de7c 00000001 00000002     x...|...........
 802e060:	0802de80 0802de84 00000001 00000001     ................
 802e070:	0802de88 0802de8c 00000002 00000002     ................
 802e080:	0802de90 0802de94 00000008 00000001     ................
 802e090:	0802dea0 0802dea4 00000001 00000001     ................
 802e0a0:	0802dea8 0802deac 00000006 00000001     ................
 802e0b0:	0802deb4 0802deb8 00000001 00000002     ................
 802e0c0:	0802debc 0802dec0 00000001 00000002     ................
 802e0d0:	0802dec4 0802dec8 00000002 00000002     ................
 802e0e0:	0802decc 0802ded0 00000001 00000002     ................
 802e0f0:	0802ded4 0802ded8 00000002 00000002     ................
 802e100:	0802dedc 0802dee0 00000002 00000002     ................
 802e110:	0802dee4 0802dee8 00000001 00000002     ................
 802e120:	0802deec 0802def0 00000002 00000002     ................
 802e130:	0802def4 0802def8 00000003 00000002     ................
 802e140:	0802defc 0802df00 00000002 00000002     ................
 802e150:	0802df04 0802df08 00000002 00000002     ................
 802e160:	0802df0c 0802df10 00000001 00000002     ................
 802e170:	0802df14 0802df18 00000002 00000002     ................
 802e180:	0802df1c 0802df20 00000002 00000002     .... ...........
 802e190:	0802df24 0802df28 00000001 00000002     $...(...........
 802e1a0:	0802df2c 0802dea4 00000001 00000002     ,...............
 802e1b0:	0802df30 0802df34 00000002 00000001     0...4...........
 802e1c0:	0802df38 0802df3c 00000005 00000001     8...<...........
 802e1d0:	0802df44 0802df48 00000002 00000002     D...H...........
 802e1e0:	0802df4c 0802df28 00000001 00000001     L...(...........
 802e1f0:	0802df50 0802df54 00000001 00000001     P...T...........
 802e200:	0802df58 0802df5c 00000003 00000001     X...\...........
 802e210:	0802df60 0802df64 00000002 00000002     `...d...........
 802e220:	0802df68 0802df6c 00000002 00000002     h...l...........
 802e230:	0802df70 0802df74 00000001 00000002     p...t...........
 802e240:	0802df78 0802df7c 00000002 00000002     x...|...........
 802e250:	0802df80 0802df84 00000001 00000002     ................
 802e260:	0802df88 0802df8c 00000003 00000002     ................
 802e270:	0802df90 0802df94 00000002 00000001     ................
 802e280:	0802df98 0802df84 00000001 00000001     ................
 802e290:	0802df9c 0802dfa0 00000002 00000002     ................
 802e2a0:	0802dfa4 0802dfa8 00000001 00000003     ................
 802e2b0:	0802dfac 0802dfb0 00000002 00000002     ................
 802e2c0:	0802dfb4 0802dfb8 00000003 00000002     ................
 802e2d0:	0802dfbc 0802dfc0 00000001 00000002     ................
 802e2e0:	0802dfc4 0802dfc8 00000002 00000002     ................
 802e2f0:	0802dfcc 0802dfd0 00000007 00000001     ................
 802e300:	0802dfd8 0802dfd0 00000007 00000001     ................
 802e310:	0802dfdc 0802dfe0 00000008 00000001     ................
 802e320:	0802dfec 0802dfe0 00000008 00000001     ................
	...
 802e340:	69727473 6c20676e 72657469 00006c61     string literal..
 802e350:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
 802e360:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
 802e370:	7361623a 735f6369 6e697274 00000067     :basic_string...
 802e380:	69736162 74735f63 676e6972 00000000     basic_string....
 802e390:	3a647473 7274733a 00676e69 3a647473     std::string.std:
 802e3a0:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
 802e3b0:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
 802e3c0:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
 802e3d0:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
 802e3e0:	00003e20 3a647473 7473693a 6d616572      >..std::istream
 802e3f0:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
 802e400:	65727473 633c6d61 2c726168 64747320     stream<char, std
 802e410:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
 802e420:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
 802e430:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
 802e440:	6d616572 00000000 3a647473 7361623a     ream....std::bas
 802e450:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
 802e460:	64747320 68633a3a 745f7261 74696172      std::char_trait
 802e470:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
 802e480:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
 802e490:	736f693a 61657274 0000006d 3a647473     :iostream...std:
 802e4a0:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
 802e4b0:	72616863 7473202c 633a3a64 5f726168     char, std::char_
 802e4c0:	69617274 633c7374 3e726168 00003e20     traits<char> >..
 802e4d0:	69736162 6f695f63 65727473 00006d61     basic_iostream..

0802e4e0 <standard_subs>:
 802e4e0:	00000074 0802de24 00000003 0802de24     t...$.......$...
 802e4f0:	00000003 00000000 00000000 00000061     ............a...
 802e500:	0802e350 0000000e 0802e350 0000000e     P.......P.......
 802e510:	0802e360 00000009 00000062 0802e36c     `.......b...l...
 802e520:	00000011 0802e36c 00000011 0802e380     ....l...........
 802e530:	0000000c 00000073 0802e390 0000000b     ....s...........
 802e540:	0802e39c 00000046 0802e380 0000000c     ....F...........
 802e550:	00000069 0802e3e4 0000000c 0802e3f4     i...............
 802e560:	00000031 0802e428 0000000d 0000006f     1...(.......o...
 802e570:	0802e438 0000000c 0802e448 00000031     8.......H...1...
 802e580:	0802e47c 0000000d 00000064 0802e48c     |.......d.......
 802e590:	0000000d 0802e49c 00000032 0802e4d0     ........2.......
 802e5a0:	0000000e 00646c25 00003a3a 7272414a     ....%ld.::..JArr
 802e5b0:	00007961 62617476 6620656c 0020726f     ay..vtable for .
 802e5c0:	20545456 20726f66 00000000 736e6f63     VTT for ....cons
 802e5d0:	63757274 6e6f6974 61747620 20656c62     truction vtable 
 802e5e0:	20726f66 00000000 2d6e692d 00000000     for ....-in-....
 802e5f0:	65707974 6f666e69 726f6620 00000020     typeinfo for ...
 802e600:	65707974 6f666e69 6d616e20 6f662065     typeinfo name fo
 802e610:	00002072 65707974 6f666e69 206e6620     r ..typeinfo fn 
 802e620:	20726f66 00000000 2d6e6f6e 74726976     for ....non-virt
 802e630:	206c6175 6e756874 6f74206b 00000020     ual thunk to ...
 802e640:	74726976 206c6175 6e756874 6f74206b     virtual thunk to
 802e650:	00000020 61766f63 6e616972 65722074      ...covariant re
 802e660:	6e727574 75687420 74206b6e 0000206f     turn thunk to ..
 802e670:	6176616a 616c4320 66207373 0020726f     java Class for .
 802e680:	72617567 61762064 62616972 6620656c     guard variable f
 802e690:	0020726f 65666572 636e6572 65742065     or .reference te
 802e6a0:	726f706d 20797261 20726f66 00000000     mporary for ....
 802e6b0:	64646968 61206e65 7361696c 726f6620     hidden alias for
 802e6c0:	00000020 7461535f 00000020 6363415f      ..._Sat ..._Acc
 802e6d0:	00006d75 6172465f 00007463 0000202c     um.._Fract.., ..
 802e6e0:	7265706f 726f7461 00000000 7265706f     operator....oper
 802e6f0:	726f7461 00000020 00203a20 00006c75     ator ... : .ul..
 802e700:	00006c6c 006c6c75 736c6166 00000065     ll..ull.false...
 802e710:	65757274 00000000 6176616a 73657220     true....java res
 802e720:	6372756f 00002065 6c636564 65707974     ource ..decltype
 802e730:	00002820 7261707b 0000236d 626f6c67      (..{parm#..glob
 802e740:	63206c61 74736e6f 74637572 2073726f     al constructors 
 802e750:	6579656b 6f742064 00000020 626f6c67     keyed to ...glob
 802e760:	64206c61 72747365 6f746375 6b207372     al destructors k
 802e770:	64657965 206f7420 00000000 6d616c7b     eyed to ....{lam
 802e780:	28616462 00000000 00002329 6e6e757b     bda(....)#..{unn
 802e790:	64656d61 70797420 00002365 6c635b20     amed type#.. [cl
 802e7a0:	20656e6f 00000000 6665647b 746c7561     one ....{default
 802e7b0:	67726120 00000023 003a3a7d 73657220      arg#...}::. res
 802e7c0:	63697274 00000074 6c6f7620 6c697461     trict... volatil
 802e7d0:	00000065 6e6f6320 00007473 706d6f63     e... const..comp
 802e7e0:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
 802e7f0:	00002079 002a3a3a 765f5f20 6f746365     y ..::*. __vecto
 802e800:	00002872 00002820                       r(.. (..

0802e808 <_global_impure_ptr>:
 802e808:	20000010                                ... 

0802e80c <blanks.3927>:
 802e80c:	20202020 20202020 20202020 20202020                     

0802e81c <zeroes.3928>:
 802e81c:	30303030 30303030 30303030 30303030     0000000000000000

0802e82c <blanks.3885>:
 802e82c:	20202020 20202020 20202020 20202020                     

0802e83c <zeroes.3886>:
 802e83c:	30303030 30303030 30303030 30303030     0000000000000000

0802e84c <_ctype_>:
 802e84c:	20202000 20202020 28282020 20282828     .         ((((( 
 802e85c:	20202020 20202020 20202020 20202020                     
 802e86c:	10108820 10101010 10101010 10101010      ...............
 802e87c:	04040410 04040404 10040404 10101010     ................
 802e88c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 802e89c:	01010101 01010101 01010101 10101010     ................
 802e8ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
 802e8bc:	02020202 02020202 02020202 10101010     ................
 802e8cc:	00000020 00000000 00000000 00000000      ...............
	...

0802e950 <p05.2449>:
 802e950:	00000005 00000019 0000007d 00000000     ........}.......

0802e960 <__mprec_tens>:
 802e960:	00000000 3ff00000 00000000 40240000     .......?......$@
 802e970:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 802e980:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 802e990:	00000000 412e8480 00000000 416312d0     .......A......cA
 802e9a0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 802e9b0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 802e9c0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 802e9d0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 802e9e0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 802e9f0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 802ea00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 802ea10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 802ea20:	79d99db4 44ea7843                       ...yCx.D

0802ea28 <__mprec_tinytens>:
 802ea28:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 802ea38:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 802ea48:	64ac6f43 0ac80628                       Co.d(...

0802ea50 <__mprec_bigtens>:
 802ea50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 802ea60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 802ea70:	7f73bf3c 75154fdd                       <.s..O.u

0802ea78 <blanks.3871>:
 802ea78:	20202020 20202020 20202020 20202020                     

0802ea88 <zeroes.3872>:
 802ea88:	30303030 30303030 30303030 30303030     0000000000000000

0802ea98 <GPIO_PIN>:
 802ea98:	20001000 80004000                       ... .@..

0802eaa0 <GPIO_CLK>:
 802eaa0:	00000008 00000008 00000008 00000008     ................

0802eab0 <BUTTON_PIN>:
 802eab0:	00000001                                ....

0802eab4 <BUTTON_CLK>:
 802eab4:	00000001                                ....

0802eab8 <BUTTON_EXTI_LINE>:
 802eab8:	00000001                                ....

0802eabc <BUTTON_PORT_SOURCE>:
 802eabc:	00000000                                ....

0802eac0 <BUTTON_PIN_SOURCE>:
 802eac0:	00000000                                ....

0802eac4 <BUTTON_IRQn>:
 802eac4:	00000006                                ....

0802eac8 <_ZTV6CMenue>:
	...
 802ead0:	0802c589 08016125 0802c5ad 0800bb61     ....%a......a...
 802eae0:	0800bb99 0800bbb9 0800bbd1 0802c5d1     ................

0802eaf0 <_ZL12c_FontNative>:
	...

0802eb08 <dcttab>:
 802eb08:	4013c251 518522fb 404f4672 40b345bd     Q..@.".QrFO@.E.@
 802eb18:	6d0b20cf 42e13c10 41fa2d6d 41d95790     . .m.<.Bm-.A.W.A
 802eb28:	48919f44 43f93421 5efc8d96 52cb0e63     D..H!4.C...^c..R
 802eb38:	46cc1bc4 4ad81a97 64e2402e 4a9d9cf0     ...F...J.@.d...J
 802eb48:	7c7d1db3 43e224a9 4fae3711 6b6fcf26     ..}|.$.C.7.O&.ok
 802eb58:	6e3c92c1 56601ea7 5f4cf6eb 519e4e04     ..<n..`V..L_.N.Q
 802eb68:	4140fb46 52036742 4545e9ef 4cf8de88     F.@ABg.R..EE...L
 802eb78:	73326bbf 539eba45 bebf04ba adfc98be     .k2sE..S........
 802eb88:	4545e9ef b3072178 8ccd9441 539eba45     ..EEx!..A...E..S
 802eb98:	4140fb46 52036742 4545e9ef 4cf8de88     F.@ABg.R..EE...L
 802eba8:	73326bbf 539eba45 bebf04ba adfc98be     .k2sE..S........
 802ebb8:	4545e9ef b3072178 8ccd9441 539eba45     ..EEx!..A...E..S

0802ebc8 <preTab>:
	...
 802ebd0:	01000000 02010101 03030302 00000002     ................

0802ebe0 <pow14>:
 802ebe0:	7fffffff 6ba27e65 5a82799a 4c1bf829     ....e~.k.y.Z)..L

0802ebf0 <pow43_14>:
 802ebf0:	00000000 10000000 285145f3 453a5cdb     .........EQ(.\:E
 802ec00:	0cb2ff53 111989d6 15ce31c8 1ac7f203     S........1......
 802ec10:	20000000 257106b9 2b16b4a3 30ed74b4     ... ..q%...+.t.0
 802ec20:	36f23fa5 3d227bd3 437be656 49fc823c     .?.6.{"=V.{C<..I
 802ec30:	00000000 0d744fcd 21e71f26 3a36abd9     .....Ot.&..!..6:
 802ec40:	0aadc084 0e610e6e 12560c1d 168523cf     ....n.a...V..#..
 802ec50:	1ae89f99 1f7c03a4 243bae49 29249c67     ......|.I.;$g.$)
 802ec60:	2e34420f 33686f85 38bf3dff 3e370182     .B4..oh3.=.8..7>
 802ec70:	00000000 0b504f33 1c823e07 30f39a55     ....3OP..>..U..0
 802ec80:	08facd62 0c176319 0f6b3522 12efe2ad     b....c.."5k.....
 802ec90:	16a09e66 1a79a317 1e77e301 2298d5b4     f.....y...w...."
 802eca0:	26da56fc 2b3a902a 2fb7e7e7 3450f650     .V.&*.:+.../P.P4
 802ecb0:	00000000 09837f05 17f910d7 2929c7a9     ..............))
 802ecc0:	078d0dfa 0a2ae661 0cf73154 0fec91cb     ....a.*.T1......
 802ecd0:	1306fe0a 16434a6c 199ee595 1d17ae3d     ....lJC.....=...
 802ece0:	20abd76a 2459d551 28204fbb 2bfe1808     j.. Q.Y$.O (...+

0802ecf0 <pow43>:
 802ecf0:	1428a2fa 15db1bd6 1796302c 19598d85     ..(.....,0....Y.
 802ed00:	1b24e8bb 1cf7fcfa 1ed28af2 20b4582a     ..$.........*X. 
 802ed10:	229d2e6e 248cdb55 26832fda 28800000     n.."U..$./.&...(
 802ed20:	2a832287 2c8c70a8 2e9bc5d8 30b0ff99     .".*.p.,.......0
 802ed30:	32cbfd4a 34eca001 3712ca62 393e6088     J..2...4b..7.`>9
 802ed40:	3b6f47e0 3da56717 3fe0a5fc 4220ed72     .Go;.g.=...?r. B
 802ed50:	44662758 46b03e7c 48ff1e87 4b52b3f3     X'fD|>.F...H..RK
 802ed60:	4daaebfd 5007b497 5268fc62 54ceb29c     ...M...Pb.hR...T
 802ed70:	5738c721 59a72a59 5c19cd35 5e90a129     !.8WY*.Y5..\)..^
 802ed80:	610b9821 638aa47f 660db90f 6894c90b     !..a...c...f...h
 802ed90:	6b1fc80c 6daeaa0d 70416360 72d7e8b0     ...k...m`cAp...r
 802eda0:	75722ef9 78102b85 7ab1d3ec 7d571e09     ..ru.+.x...z..W}

0802edb0 <poly43lo>:
 802edb0:	29a0bda9 b02e4828 5957aa1b 236c498d     ...)(H....WY.Il#
 802edc0:	ff581859                                Y.X.

0802edc4 <poly43hi>:
 802edc4:	10852163 d333f6a4 46e9408b 27c2cef0     c!....3..@.F...'
 802edd4:	fef577b4                                .w..

0802edd8 <pow2exp>:
 802edd8:	0000000e 0000000d 0000000b 0000000a     ................
 802ede8:	00000009 00000007 00000006 00000005     ................

0802edf8 <pow2frac>:
 802edf8:	6597fa94 50a28be6 7fffffff 6597fa94     ...e...P.......e
 802ee08:	50a28be6 7fffffff 6597fa94 50a28be6     ...P.......e...P

0802ee18 <xmp3_huffTable>:
 802ee18:	3112f003 20113101 10002011 10001000     ...1.1. . ......
 802ee28:	f0061000 62016222 52125212 51225122     ...."b.b.R.R"Q"Q
 802ee38:	50215021 31123112 31123112 31123112     !P!P.1.1.1.1.1.1
 802ee48:	31123112 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802ee58:	31013101 30113011 30113011 30113011     .1.1.0.0.0.0.0.0
 802ee68:	30113011 10001000 10001000 10001000     .0.0............
 802ee78:	10001000 10001000 10001000 10001000     ................
 802ee88:	10001000 10001000 10001000 10001000     ................
 802ee98:	10001000 10001000 10001000 10001000     ................
 802eea8:	10001000 6222f006 52126201 51225212     ......"b.b.R.R"Q
 802eeb8:	50215122 30115021 30113011 30113011     "Q!P!P.0.0.0.0.0
 802eec8:	30113011 21123011 21122112 21122112     .0.0.0.!.!.!.!.!
 802eed8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802eee8:	21122112 21012112 21012101 21012101     .!.!.!.!.!.!.!.!
 802eef8:	21012101 21012101 21012101 21012101     .!.!.!.!.!.!.!.!
 802ef08:	21012101 20002101 20002000 20002000     .!.!.!. . . . . 
 802ef18:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802ef28:	20002000 f0082000 83228332 72327232     . . . ..2.".2r2r
 802ef38:	61326132 61326132 73127312 73017301     2a2a2a2a.s.s.s.s
 802ef48:	70317031 72227222 62126212 62126212     1p1p"r"r.b.b.b.b
 802ef58:	61226122 61226122 62016201 62016201     "a"a"a"a.b.b.b.b
 802ef68:	60216021 60216021 31123112 31123112     !`!`!`!`.1.1.1.1
 802ef78:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 802ef88:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 802ef98:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 802efa8:	31123112 31123112 31013101 31013101     .1.1.1.1.1.1.1.1
 802efb8:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802efc8:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802efd8:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802efe8:	31013101 31013101 30113011 30113011     .1.1.1.1.0.0.0.0
 802eff8:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f008:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f018:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f028:	30113011 30113011 10001000 10001000     .0.0.0.0........
 802f038:	10001000 10001000 10001000 10001000     ................
 802f048:	10001000 10001000 10001000 10001000     ................
 802f058:	10001000 10001000 10001000 10001000     ................
 802f068:	10001000 10001000 10001000 10001000     ................
 802f078:	10001000 10001000 10001000 10001000     ................
 802f088:	10001000 10001000 10001000 10001000     ................
 802f098:	10001000 10001000 10001000 10001000     ................
 802f0a8:	10001000 10001000 10001000 10001000     ................
 802f0b8:	10001000 10001000 10001000 10001000     ................
 802f0c8:	10001000 10001000 10001000 10001000     ................
 802f0d8:	10001000 10001000 10001000 10001000     ................
 802f0e8:	10001000 10001000 10001000 10001000     ................
 802f0f8:	10001000 10001000 10001000 10001000     ................
 802f108:	10001000 10001000 10001000 10001000     ................
 802f118:	10001000 10001000 10001000 10001000     ................
 802f128:	10001000 10001000 7332f007 63227301     ..........2s.s"c
 802f138:	62326322 60316232 53126031 53125312     "c2b2b1`1`.S.S.S
 802f148:	51325312 51325132 52225132 52225222     .S2Q2Q2Q2Q"R"R"R
 802f158:	52015222 52015201 42125201 42124212     "R.R.R.R.R.B.B.B
 802f168:	42124212 42124212 41224212 41224122     .B.B.B.B.B"A"A"A
 802f178:	41224122 41224122 40214122 40214021     "A"A"A"A"A!@!@!@
 802f188:	40214021 40214021 31014021 31013101     !@!@!@!@!@.1.1.1
 802f198:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f1a8:	31013101 31013101 21123101 21122112     .1.1.1.1.1.!.!.!
 802f1b8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f1c8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f1d8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f1e8:	21122112 21122112 30112112 30113011     .!.!.!.!.!.0.0.0
 802f1f8:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f208:	30113011 30113011 30003011 30003000     .0.0.0.0.0.0.0.0
 802f218:	30003000 30003000 30003000 30003000     .0.0.0.0.0.0.0.0
 802f228:	30003000 30003000 f0063000 00520041     .0.0.0.0.0..A.R.
 802f238:	0060005b 00680063 6212006b 51225122     [.`.c.h.k..b"Q"Q
 802f248:	60216201 41124112 41124112 31013101     .b!`.A.A.A.A.1.1
 802f258:	31013101 31013101 31013101 30113011     .1.1.1.1.1.1.0.0
 802f268:	30113011 30113011 30113011 10001000     .0.0.0.0.0.0....
 802f278:	10001000 10001000 10001000 10001000     ................
 802f288:	10001000 10001000 10001000 10001000     ................
 802f298:	10001000 10001000 10001000 10001000     ................
 802f2a8:	10001000 10001000 10001000 4552f004     ..............RE
 802f2b8:	44524542 35324352 34423532 35223442     BERDRC2525B4B4"5
 802f2c8:	32523522 25123252 25122512 f0032512     "5R2R2.%.%.%.%..
 802f2d8:	21522152 34323501 20512051 33323342     R!R!.524Q Q B323
 802f2e8:	2422f002 14122242 f0011412 10411142     .."$B"......B.A.
 802f2f8:	2401f002 22322322 f0012301 11321312     ...$"#2".#....2.
 802f308:	1031f001 f0081222 010a0101 8512010f     ..1."...........
 802f318:	01128152 84220115 84128242 71427142     R.....".B...BqBq
 802f328:	80418401 82328322 81328312 80318301     ..A.".2...2...1.
 802f338:	62226222 62226222 62016201 62016201     "b"b"b"b.b.b.b.b
 802f348:	60216021 60216021 42124212 42124212     !`!`!`!`.B.B.B.B
 802f358:	42124212 42124212 42124212 42124212     .B.B.B.B.B.B.B.B
 802f368:	42124212 42124212 41224122 41224122     .B.B.B.B"A"A"A"A
 802f378:	41224122 41224122 41224122 41224122     "A"A"A"A"A"A"A"A
 802f388:	41224122 41224122 21122112 21122112     "A"A"A"A.!.!.!.!
 802f398:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f3a8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f3b8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f3c8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f3d8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f3e8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f3f8:	21122112 21122112 21122112 21122112     .!.!.!.!.!.!.!.!
 802f408:	21122112 21122112 31013101 31013101     .!.!.!.!.1.1.1.1
 802f418:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f428:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f438:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f448:	31013101 31013101 30113011 30113011     .1.1.1.1.0.0.0.0
 802f458:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f468:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f478:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f488:	30113011 30113011 20002000 20002000     .0.0.0.0. . . . 
 802f498:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802f4a8:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802f4b8:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802f4c8:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802f4d8:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802f4e8:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802f4f8:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802f508:	20002000 20002000 3552f003 25423452     . . . . ..R5R4B%
 802f518:	13522542 13521352 f0021352 24422532     B%R.R.R.R...2%B$
 802f528:	15221522 1252f001 f0011501 13421432     "."...R.....2.B.
 802f538:	1051f001 f0061332 004a0041 0052004f     ..Q.2...A.J.O.R.
 802f548:	005a0057 61426412 62326322 53125312     W.Z..dBa"c2b.S.S
 802f558:	51325132 60316301 52225222 52015201     2Q2Q.c1`"R"R.R.R
 802f568:	42124212 42124212 41224122 41224122     .B.B.B.B"A"A"A"A
 802f578:	40214021 40214021 31123112 31123112     !@!@!@!@.1.1.1.1
 802f588:	31123112 31123112 31013101 31013101     .1.1.1.1.1.1.1.1
 802f598:	31013101 31013101 30113011 30113011     .1.1.1.1.0.0.0.0
 802f5a8:	30113011 30113011 30003000 30003000     .0.0.0.0.0.0.0.0
 802f5b8:	30003000 30003000 3552f003 25323542     .0.0.0.0..R5B52%
 802f5c8:	23522532 34522352 f0023501 25222442     2%R#R#R4.5..B$"%
 802f5d8:	25122252 1152f001 f0021432 13421342     R".%..R.2...B.B.
 802f5e8:	24012051 1422f001 f0011242 10411332     Q .$..".B...2.A.
 802f5f8:	0101f008 010f010a 011b0118 01250120     ............ .%.
 802f608:	81728712 012d012a 86120132 80618162     ..r.*.-.2...b.a.
 802f618:	013a0137 8412013d 80418142 82328322     7.:.=...B.A.".2.
 802f628:	73128301 71327312 70317132 72227031     ...s.s2q2q1p1p"r
 802f638:	62127222 62126212 61226212 61226122     "r.b.b.b.b"a"a"a
 802f648:	62016122 62016201 60216201 60216021     "a.b.b.b.b!`!`!`
 802f658:	41126021 41124112 41124112 41124112     !`.A.A.A.A.A.A.A
 802f668:	41124112 41124112 41124112 41124112     .A.A.A.A.A.A.A.A
 802f678:	31014112 31013101 31013101 31013101     .A.1.1.1.1.1.1.1
 802f688:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f698:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f6a8:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f6b8:	30113101 30113011 30113011 30113011     .1.0.0.0.0.0.0.0
 802f6c8:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f6d8:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f6e8:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f6f8:	10003011 10001000 10001000 10001000     .0..............
 802f708:	10001000 10001000 10001000 10001000     ................
 802f718:	10001000 10001000 10001000 10001000     ................
 802f728:	10001000 10001000 10001000 10001000     ................
 802f738:	10001000 10001000 10001000 10001000     ................
 802f748:	10001000 10001000 10001000 10001000     ................
 802f758:	10001000 10001000 10001000 10001000     ................
 802f768:	10001000 10001000 10001000 10001000     ................
 802f778:	10001000 10001000 10001000 10001000     ................
 802f788:	10001000 10001000 10001000 10001000     ................
 802f798:	10001000 10001000 10001000 10001000     ................
 802f7a8:	10001000 10001000 10001000 10001000     ................
 802f7b8:	10001000 10001000 10001000 10001000     ................
 802f7c8:	10001000 10001000 10001000 10001000     ................
 802f7d8:	10001000 10001000 10001000 10001000     ................
 802f7e8:	10001000 10001000 10001000 10001000     ................
 802f7f8:	f0031000 37623772 37523672 36623572     ....r7b7r6R7r5b6
 802f808:	27422742 2472f002 25622652 f0032732     B'B'..r$R&b%2'..
 802f818:	23722372 26422642 34523552 23622362     r#r#B&B&R5R4b#b#
 802f828:	1722f001 f0021272 27012462 10711071     ..".r...b$.'q.q.
 802f838:	1262f002 25421262 f0022532 16011601     ..b.b.B%2%......
 802f848:	24422352 1632f001 f0021622 22522522     R#B$..2."..."%R"
 802f858:	15121512 1152f002 24321152 f0012342     ......R.R.2$B#..
 802f868:	10511501 1422f001 f0011242 14011332     ..Q...".B...2...
 802f878:	0101f008 010f0106 01170114 82728722     ............".r.
 802f888:	7172011c 87127172 86328071 80618362     ..rqrq..q.2.b.a.
 802f898:	0122011f 72628512 86227262 76128601     .."...brbr"....v
 802f8a8:	71627612 81527162 80518432 84220125     .vbqbqR.2.Q.%.".
 802f8b8:	84128242 84018142 73228041 72327322     B...B...A."s"s2r
 802f8c8:	63127232 63126312 61326312 61326132     2r.c.c.c.c2a2a2a
 802f8d8:	73016132 70317301 62227031 62226222     2a.s.s1p1p"b"b"b
 802f8e8:	51226222 51225122 51225122 51225122     "b"Q"Q"Q"Q"Q"Q"Q
 802f8f8:	42125122 42124212 42124212 42124212     "Q.B.B.B.B.B.B.B
 802f908:	42124212 42124212 42124212 42124212     .B.B.B.B.B.B.B.B
 802f918:	52014212 52015201 52015201 52015201     .B.R.R.R.R.R.R.R
 802f928:	50215201 50215021 50215021 50215021     .R!P!P!P!P!P!P!P
 802f938:	31125021 31123112 31123112 31123112     !P.1.1.1.1.1.1.1
 802f948:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 802f958:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 802f968:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 802f978:	31013112 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f988:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f998:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f9a8:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802f9b8:	30113101 30113011 30113011 30113011     .1.0.0.0.0.0.0.0
 802f9c8:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f9d8:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f9e8:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802f9f8:	20003011 20002000 20002000 20002000     .0. . . . . . . 
 802fa08:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802fa18:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802fa28:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802fa38:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802fa48:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802fa58:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802fa68:	20002000 20002000 20002000 20002000     . . . . . . . . 
 802fa78:	f0022000 27622772 25722672 2662f003     . ..r'b'r&r%..b&
 802fa88:	27422662 24722742 37522472 f0023552     b&B'B'r$r$R7R5..
 802fa98:	25622652 17321732 1372f001 f0021642     R&b%2.2...r.B...
 802faa8:	24522542 23522532 1462f001 f0011701     B%R$2%R#..b.....
 802fab8:	15221442 1252f001 f0011501 13321342     B."...R.....B.2.
 802fac8:	0081f007 008f008a 00970092 009d009a     ................
 802fad8:	00a500a2 762200a8 71627262 00b000ad     ......"vbrbq....
 802fae8:	751200b3 74327152 00b67342 72427422     ...uRq2tBs.."tBr
 802faf8:	63327412 61426332 63226142 62326322     .t2c2cBaBa"c"c2b
 802fb08:	70416232 60317301 53126031 53125312     2bAp.s1`1`.S.S.S
 802fb18:	51325312 51325132 52225132 52225222     .S2Q2Q2Q2Q"R"R"R
 802fb28:	42125222 42124212 42124212 42124212     "R.B.B.B.B.B.B.B
 802fb38:	41224212 41224122 41224122 41224122     .B"A"A"A"A"A"A"A
 802fb48:	52014122 52015201 50215201 50215021     "A.R.R.R.R!P!P!P
 802fb58:	40005021 40004000 40004000 40004000     !P.@.@.@.@.@.@.@
 802fb68:	31124000 31123112 31123112 31123112     .@.1.1.1.1.1.1.1
 802fb78:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 802fb88:	31013112 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802fb98:	31013101 31013101 31013101 31013101     .1.1.1.1.1.1.1.1
 802fba8:	30113101 30113011 30113011 30113011     .1.0.0.0.0.0.0.0
 802fbb8:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 802fbc8:	f0033011 37623772 26722672 27522752     .0..r7b7r&r&R'R'
 802fbd8:	25722572 2662f002 24722742 f0012562     r%r%..b&B'r$b%..
 802fbe8:	17321652 2372f002 17222552 f0011722     R.2...r#R%"."...
 802fbf8:	16421272 1462f001 f0021712 11721172     r.B...b.....r.r.
 802fc08:	20712701 1632f001 f0011362 14521542     .'q ..2.b...B.R.
 802fc18:	1442f002 26011442 f0012501 10611612     ..B.B..&.%....a.
 802fc28:	1532f001 f0011352 12521522 1051f001     ..2.R...".R...Q.
 802fc38:	f0061401 00820041 00e400c3 01160105     ....A...........
 802fc48:	0130011f 013e0139 01460143 61226212     ..0.9.>.C.F..b"a
 802fc58:	60216201 41124112 41124112 41014101     .b!`.A.A.A.A.A.A
 802fc68:	41014101 30113011 30113011 30113011     .A.A.0.0.0.0.0.0
 802fc78:	30113011 10001000 10001000 10001000     .0.0............
 802fc88:	10001000 10001000 10001000 10001000     ................
 802fc98:	10001000 10001000 10001000 10001000     ................
 802fca8:	10001000 10001000 10001000 10001000     ................
 802fcb8:	10001000 0108f006 011a0111 012c0123     ............#.,.
 802fcc8:	01360131 0144013f 014c0147 01560151     1.6.?.D.G.L.Q.V.
 802fcd8:	6f12015b 60f161f2 01630160 62e20166     [..o.a.``.c.f..b
 802fce8:	6e120169 016c61e2 0172016f 01780175     i..n.al.o.r.u.x.
 802fcf8:	66c2017b 017e6d32 62d26d22 67b26d12     {..f2m~."m.b.m.g
 802fd08:	01840181 018763c2 51d26b42 6d0151d2     .....c..Bk.Q.Q.m
 802fd18:	6a8260d1 6c4268a2 6b6264c2 5c3266b2     .`.j.hBl.dbk.f2\
 802fd28:	5c225c32 52c25c22 5b5252c2 65b25b52     2\"\"\.R.RR[R[.e
 802fd38:	5c126982 f0065c12 51c251c2 6c016892     .i.\.\...Q.Q.h.l
 802fd48:	50c150c1 6a6264b2 697266a2 5b325b32     .P.P.dbj.fri2[2[
 802fd58:	53b253b2 6a526882 5b225b22 696265a2     .S.S.hRj"["[.ebi
 802fd68:	54a254a2 67826872 54925492 66726772     .T.Trh.g.T.Trgrf
 802fd78:	42b242b2 42b242b2 4b124b12 4b124b12     .B.B.B.B.K.K.K.K
 802fd88:	41b241b2 41b241b2 5b015b01 50b150b1     .A.A.A.A.[.[.P.P
 802fd98:	56925692 5a425a42 5a325a32 53a253a2     .V.VBZBZ2Z2Z.S.S
 802fda8:	59525952 55925592 4a224a22 4a224a22     RYRY.U.U"J"J"J"J
 802fdb8:	42a242a2 42a242a2 4a12f005 41a24a12     .B.B.B.B...J.J.A
 802fdc8:	5a0141a2 40a15862 568240a1 43925942     .A.ZbX.@.@.VBY.C
 802fdd8:	59324392 55825852 49225762 42924922     .C2YRX.UbW"I"I.B
 802fde8:	57524292 48325572 43824832 56624382     .BRWrU2H2H.C.CbV
 802fdf8:	54725742 55625652 f0055372 39123912     BWrTRVbUrS...9.9
 802fe08:	39123912 31923192 31923192 49014901     .9.9.1.1.1.1.I.I
 802fe18:	40914091 48424842 44824482 42724272     .@.@BHBH.D.DrBrB
 802fe28:	54625642 38223822 38223822 32823282     BVbT"8"8"8"8.2.2
 802fe38:	32823282 38123812 38123812 4732f004     .2.2.8.8.8.8..2G
 802fe48:	37124722 31723712 45523172 40714701     "G.7.7r1r1RE.Gq@
 802fe58:	43624632 44524542 42624622 f0034532     2FbCBERD"FbB2E..
 802fe68:	21822182 30813801 31623612 30613601     .!.!.8.0.6b1.6a0
 802fe78:	4352f004 35224442 32523522 35013252     ..RCBD"5"5R2R2.5
 802fe88:	25123501 25122512 21522512 21522152     .5.%.%.%.%R!R!R!
 802fe98:	f0032152 33423432 34223051 33323242     R!..24B3Q0"4B223
 802fea8:	24122412 1142f002 24011142 f0022041     .$.$..B.B..$A ..
 802feb8:	22322322 13121312 1132f001 f0011301     "#2"......2.....
 802fec8:	12221031 0082f003 008e008b 00940091     1.".............
 802fed8:	3ce20097 f0033dd2 3eb20093 3f923be2     ...<.=.....>.;.?
 802fee8:	3ae239f2 3bd23db2 3f82f003 3cc238f2     .9.:.=.;...?.8.<
 802fef8:	3e82008d 27f20090 f00327f2 2ad22ad2     ...>...'.'...*.*
 802ff08:	3cb23da2 36f23bc2 2f622f62 28e2f002     .=.<.;.6b/b/...(
 802ff18:	2d922f52 f00229d2 27e225f2 2bb22ca2     R/.-.)...%.'.,.+
 802ff28:	2f42f003 24f22f42 3ac224f2 23f236e2     ..B/B/.$.$.:.6.#
 802ff38:	f00223f2 1f321f32 28d22d82 1f22f001     .#..2.2..-.(..".
 802ff48:	f00212f2 2c922e62 1f011f01 29c2f002     ....b..,.......)
 802ff58:	1ba22e52 f0021ba2 27d22d72 1e421e42     R.......r-.'B.B.
 802ff68:	28c2f002 1e3226d2 f0021e32 19b219b2     ...(.&2.2.......
 802ff78:	2aa22b92 1ab2f001 f00115e2 1c8214e2     .+.*............
 802ff88:	1d62f001 f00113e2 1e011e22 10e1f001     ..b.....".......
 802ff98:	f0011d52 1c7215d2 17c2f001 f0011d42     R.....r.....B...
 802ffa8:	18b21b82 14d2f001 f0011a92 1c6219a2     ..............b.
 802ffb8:	13d2f001 f0011b72 15c21c52 1992f001     ....r...R.......
 802ffc8:	f0011a72 179217a2 0023f003 2de23df2     r.........#..=.-
 802ffd8:	1ff22de2 1ff21ff2 f0011ff2 1fd21fe2     .-..............
 802ffe8:	1ee2f001 f0011fc2 1fb21ed2 1bf2f001     ................
 802fff8:	f0021ec2 1cd21cd2 29e22fa2 1af2f001     ........./.)....
 8030008:	f0011dc2 1e921ea2 1f72f001 f0011e72     ..........r.r...
 8030018:	1cf21ef2 0101f008 01430122 01650154     ........".C.T.e.
 8030028:	017f0176 01990188 01ab01a2 01bd01b4     v...............
 8030038:	01cb01c2 01d901d4 01e301de 01ed01e8     ................
 8030048:	01f701f2 020101fc 02070204 020f020a     ................
 8030058:	02150212 021d021a 81920220 02260223     ........ ...#.&.
 8030068:	022c0229 8822022f 88128282 02328182     ).,./.".......2.
 8030078:	02380235 8722023b 84628272 85528712     5.8.;.".r.b...R.
 8030088:	023e8172 83628632 84528542 82628622     r.>.2.b.B.R.".b.
 8030098:	02418612 71628532 83527162 75228442     ..A.2.bqbqR.B."u
 80300a8:	72527522 75127252 71527512 85017152     "uRrRr.u.uRqRq..
 80300b8:	74328051 73427432 74227342 72427422     Q.2t2tBsBs"t"tBr
 80300c8:	73327242 61427332 61426142 74126142     Br2s2sBaBaBaBa.t
 80300d8:	74017412 63227401 63226322 62326322     .t.t.t"c"c"c"c2b
 80300e8:	62326232 70416232 73017041 63127301     2b2b2bApAp.s.s.c
 80300f8:	63126312 61326312 61326132 60316132     .c.c.c2a2a2a2a1`
 8030108:	60316031 52226031 52225222 52225222     1`1`1`"R"R"R"R"R
 8030118:	52225222 52125222 52125212 52125212     "R"R"R.R.R.R.R.R
 8030128:	52125212 51225212 51225122 51225122     .R.R.R"Q"Q"Q"Q"Q
 8030138:	51225122 52015122 52015201 52015201     "Q"Q"Q.R.R.R.R.R
 8030148:	52015201 50215201 50215021 50215021     .R.R.R!P!P!P!P!P
 8030158:	50215021 31125021 31123112 31123112     !P!P!P.1.1.1.1.1
 8030168:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 8030178:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 8030188:	31123112 31123112 31123112 31123112     .1.1.1.1.1.1.1.1
 8030198:	31123112 41013112 41014101 41014101     .1.1.1.A.A.A.A.A
 80301a8:	41014101 41014101 41014101 41014101     .A.A.A.A.A.A.A.A
 80301b8:	41014101 40114101 40114011 40114011     .A.A.A.@.@.@.@.@
 80301c8:	40114011 40114011 40114011 40114011     .@.@.@.@.@.@.@.@
 80301d8:	40114011 30004011 30003000 30003000     .@.@.@.0.0.0.0.0
 80301e8:	30003000 30003000 30003000 30003000     .0.0.0.0.0.0.0.0
 80301f8:	30003000 30003000 30003000 30003000     .0.0.0.0.0.0.0.0
 8030208:	30003000 30003000 30003000 30003000     .0.0.0.0.0.0.0.0
 8030218:	30003000 f0053000 5fe25ff2 5fd25ef2     .0.0.0..._._.^._
 8030228:	4ee24ee2 5fc25df2 5ed25cf2 5fb25de2     .N.N.]._.\.^.]._
 8030238:	4bf24bf2 5ce25ec2 4dd24dd2 4fa24fa2     .K.K.^.\.M.M.O.O
 8030248:	4af24af2 4eb24eb2 4be24be2 4dc24dc2     .J.J.N.N.K.K.M.M
 8030258:	4cd24cd2 4f924f92 49f2f005 4ae249f2     .L.L.O.O...I.I.J
 8030268:	4db24ae2 4bd24db2 4f824bd2 48f24f82     .J.M.M.K.K.O.O.H
 8030278:	4cc248f2 4e924cc2 49e24e92 4f7249e2     .H.L.L.N.N.I.IrO
 8030288:	47f24f72 4da247f2 4ad24da2 4cb24ad2     rO.G.G.M.M.J.J.L
 8030298:	4f624cb2 5ea24f62 f0045f01 3bc23bc2     .LbObO.^._...;.;
 80302a8:	36f236f2 48e24e82 4d924f52 35f235f2     .6.6.N.HRO.M.5.5
 80302b8:	3e723e72 37e237e2 3ca23ca2 3ac2f004     r>r>.7.7.<.<...:
 80302c8:	3bb23ac2 49d23bb2 3f424d82 34f23f42     .:.;.;.I.MB?B?.4
 80302d8:	3f3234f2 33f23f32 38d233f2 f00438d2     .42?2?.3.3.8.8..
 80302e8:	36e236e2 3f223f22 32f232f2 40f14e62     .6.6"?"?.2.2bN.@
 80302f8:	3f123f12 31f231f2 3c923c92 39c239c2     .?.?.1.1.<.<.9.9
 8030308:	3e52f003 3ab23ba2 3d7235e2 3e4237d2     ..R>.;.:.5r=.7B>
 8030318:	f00334e2 38c23c82 3d623e32 33e236d2     .4...<.82>b=.6.3
 8030328:	39b23b92 3e22f004 3aa23e22 32e23aa2     .;.9..">">.:.:.2
 8030338:	3e1232e2 31e23e12 4e0131e2 3d5240e1     .2.>.>.1.1.N.@R=
 8030348:	35d23d52 f00335d2 37c23c72 3b823d42     R=.5.5..r<.7B=.;
 8030358:	24d224d2 3a9238b2 39a2f003 36c23c62     .$.$.8.:...9b<.6
 8030368:	23d23d32 22d223d2 f00322d2 3d013d22     2=.#.#.".".."=.=
 8030378:	2d122d12 2b722b72 27b227b2 21d2f003     .-.-r+r+.'.'...!
 8030388:	3c5221d2 25c230d1 2a8225c2 f0022a82     .!R<.0.%.%.*.*..
 8030398:	2c4228a2 2b6224c2 26b2f003 399226b2     .(B,.$b+...&.&.9
 80303a8:	2c323c01 23c22c32 f00323c2 2a722a72     .<2,2,.#.#..r*r*
 80303b8:	27a227a2 26a226a2 3b0130c1 12c2f002     .'.'.&.&.0.;....
 80303c8:	2c2212c2 f0022b52 2c1225b2 28922982     ..",R+...%.,.).(
 80303d8:	21c2f002 24b22b42 f0022a62 29722b32     ...!B+.$b*..2+r)
 80303e8:	13b213b2 2792f002 2b222882 f0022a52     .......'.("+R*..
 80303f8:	12b212b2 2b1225a2 11b2f002 20b111b2     .....%.+....... 
 8030408:	f0022962 2a422692 287224a2 2782f002     b)...&B*.$r(...'
 8030418:	13a22a32 f00113a2 15921952 1a22f001     2*......R.....".
 8030428:	f00112a2 11a21a12 2a01f002 186220a1     ...........*. b.
 8030438:	f0011862 19421682 1492f001 f0021932     b.....B.....2...
 8030448:	13921392 29012772 1852f001 f0011582     ....r'.)..R.....
 8030458:	17621922 1672f001 f0011292 10911912     ".b...r.........
 8030468:	1842f001 f0011482 15721752 1832f001     ..B.....R.r...2.
 8030478:	f0011382 17421662 1472f001 f0011801     ....b.B...r.....
 8030488:	16521081 1562f001 f0011732 16421372     ..R...b.2...r.B.
 8030498:	1701f001 f0011071 10611601 0101f008     ....q.....a.....
 80304a8:	0113010a 01188ff2 0120011d 013182f2     .......... ...1.
 80304b8:	81f28f12 01450134 01670156 01890178     ....4.E.V.g.x...
 80304c8:	01a3019a 01b501ac 01c701be 01d901d0     ................
 80304d8:	01e301de 01eb01e6 815201f0 01f601f3     ..........R.....
 80304e8:	01fc01f9 81428412 832201ff 73128232     ......B...".2..s
 80304f8:	71327312 83017132 72228031 62127222     .s2q2q..1."r"r.b
 8030508:	62126212 61226212 61226122 62016122     .b.b.b"a"a"a"a.b
 8030518:	62016201 60216201 60216021 41126021     .b.b.b!`!`!`!`.A
 8030528:	41124112 41124112 41124112 41124112     .A.A.A.A.A.A.A.A
 8030538:	41124112 41124112 41124112 41014112     .A.A.A.A.A.A.A.A
 8030548:	41014101 41014101 41014101 41014101     .A.A.A.A.A.A.A.A
 8030558:	41014101 41014101 41014101 30114101     .A.A.A.A.A.A.A.0
 8030568:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 8030578:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 8030588:	30113011 30113011 30113011 30113011     .0.0.0.0.0.0.0.0
 8030598:	30113011 30113011 30113011 10003011     .0.0.0.0.0.0.0..
 80305a8:	10001000 10001000 10001000 10001000     ................
 80305b8:	10001000 10001000 10001000 10001000     ................
 80305c8:	10001000 10001000 10001000 10001000     ................
 80305d8:	10001000 10001000 10001000 10001000     ................
 80305e8:	10001000 10001000 10001000 10001000     ................
 80305f8:	10001000 10001000 10001000 10001000     ................
 8030608:	10001000 10001000 10001000 10001000     ................
 8030618:	10001000 10001000 10001000 10001000     ................
 8030628:	10001000 10001000 10001000 10001000     ................
 8030638:	10001000 10001000 10001000 10001000     ................
 8030648:	10001000 10001000 10001000 10001000     ................
 8030658:	10001000 10001000 10001000 10001000     ................
 8030668:	10001000 10001000 10001000 10001000     ................
 8030678:	10001000 10001000 10001000 10001000     ................
 8030688:	10001000 10001000 10001000 10001000     ................
 8030698:	10001000 10001000 10001000 f0031000     ................
 80306a8:	3ef23fe2 3df23fd2 3cf23fc2 3bf23fb2     .?.>.?.=.?.<.?.;
 80306b8:	2fa2f003 3af22fa2 39f23f92 2f8238f2     ..././.:.?.9.8./
 80306c8:	f0022f82 27f22f72 26f22f62 2f52f002     ./..r/.'b/.&..R/
 80306d8:	1f4225f2 f0011f42 13f214f2 10f1f004     .%B.B...........
 80306e8:	10f110f1 10f110f1 10f110f1 2f3210f1     ..............2/
 80306f8:	2f322f32 00e22f32 00fc00f3 f0010105     2/2/2/..........
 8030708:	1f011f22 00faf004 010400ff 010c0109     "...............
 8030718:	01160111 011e0119 01280123 012d43e2     ........#.(..C-.
 8030728:	01330130 f0040136 012b0128 4d01012e     0.3.6...(.+....M
 8030738:	01340131 4c320137 4c12013a 013d40c1     1.4.7.2L:..L.@=.
 8030748:	32e232e2 4e124e22 43d2f004 42d24d22     .2.2"N.N...C"M.B
 8030758:	4b3241d2 3d12012f 44c23d12 43c24b62     .A2K/..=.=.DbK.C
 8030768:	3c2247a2 42c23c22 f00445b2 4c0141c2     .G"<"<.B.E...A.L
 8030778:	44b24b42 46a24a62 33b233b2 45a24a52     BK.DbJ.F.3.3RJ.E
 8030788:	3b223b22 32b232b2 3b123b12 31b2f004     ";";.2.2.;.;...1
 8030798:	4b0131b2 496240b1 4a424692 487244a2     .1.K.@bI.FBJ.DrH
 80307a8:	33a24782 4a3233a2 3a224952 f0043a22     .G.3.32JRI":":..
 80307b8:	48624592 31a231a2 47724682 34923492     .EbH.1.1.FrG.4.4
 80307c8:	47524942 37623762 22a222a2 22a222a2     BIRGb7b7."."."."
 80307d8:	2a12f003 3a012a12 393230a1 38523392     ...*.*.:.029.3R8
 80307e8:	f0033582 29222922 22922292 39013672     .5..")")."."r6.9
 80307f8:	29122912 2192f003 30912192 34823842     .).)...!.!.0B8.4
 8030808:	38323572 f0033382 38223662 22822282     r528.3..b6"8."."
 8030818:	34723742 28122812 2182f003 20812182     B7r4.(.(...!.!. 
 8030828:	38012081 27323652 f0032732 23722372     . .8R62'2'..r#r#
 8030838:	36423562 27222722 22722272 3462f003     b5B6"'"'r"r"..b4
 8030848:	27013552 17122701 17121712 f0021712     R5.'.'..........
 8030858:	11721172 26322071 2362f002 24522542     r.r.q 2&..b#B%R$
 8030868:	f0012622 16121262 1162f002 26011162     "&..b.....b.b..&
 8030878:	f0022061 13521352 24422532 1522f001     a ..R.R.2%B$..".
 8030888:	f0011252 15011512 1432f001 f0011342     R.........2.B...
 8030898:	14221051 1242f001 f0011332 10411401     Q."...B.2.....A.
 80308a8:	4ec2f004 3ed20086 39e23ed2 4ae239e2     ...N...>.>.9.9.J
 80308b8:	2ee249d2 2ee22ee2 3de22ee2 3be23de2     .I.........=.=.;
 80308c8:	f0033be2 2eb22eb2 2dc22dc2 3bd23cd2     .;.......-.-.<.;
 80308d8:	2ea22ea2 2cc2f003 3da22cc2 3e723ad2     .......,.,.=.:r>
 80308e8:	2ac23ca2 f0032ac2 3d7239c2 2e522e52     .<.*.*...9r=R.R.
 80308f8:	1db21db2 1db21db2 1e92f002 2cb21e92     ...............,
 8030908:	f0022bc2 28e22e82 27e22d92 2bb2f002     .+.....(.-.'...+
 8030918:	28d22d82 f0012e62 1c9216e2 2ba2f002     .-.(b..........+
 8030928:	25e22ab2 f00227d2 1e421e42 2c8224e2     .*.%.'..B.B..$.,
 8030938:	18c2f001 f0021e32 1d621d62 2b9226d2     ....2...b.b..&.+
 8030948:	29b2f002 11e22aa2 f00211e2 14d214d2     ...).*..........
 8030958:	29a228b2 1b72f002 27b21b72 f00120d1     .(.)..r.r..'. ..
 8030968:	10e11e01 1d52f001 f00115d2 17c21c72     ......R.....r...
 8030978:	1d42f001 f0011b82 1c621a92 16c2f001     ..B.......b.....
 8030988:	f0011d32 15c21c52 1a82f001 f00118a2     2...R...........
 8030998:	1c421992 16b2f001 f0011a72 19821b52     ..B.....r...R...
 80309a8:	1892f001 f0011972 18821792 1ce2f001     ....r...........
 80309b8:	f0091dd2 8fe28fe2 8ef28ef2 8fd28fd2     ................
 80309c8:	8df28df2 8fc28fc2 8cf28cf2 8fb28fb2     ................
 80309d8:	8bf28bf2 7af27af2 7af27af2 8fa28fa2     .....z.z.z.z....
 80309e8:	8f928f92 79f279f2 79f279f2 78f278f2     .....y.y.y.y.x.x
 80309f8:	78f278f2 8f828f82 8f728f72 77f277f2     .x.x....r.r..w.w
 8030a08:	77f277f2 7f627f62 7f627f62 76f276f2     .w.wb.b.b.b..v.v
 8030a18:	76f276f2 7f527f52 7f527f52 75f275f2     .v.vR.R.R.R..u.u
 8030a28:	75f275f2 7f427f42 7f427f42 74f274f2     .u.uB.B.B.B..t.t
 8030a38:	74f274f2 7f327f32 7f327f32 73f273f2     .t.t2.2.2.2..s.s
 8030a48:	73f273f2 7f227f22 7f227f22 72f272f2     .s.s"."."."..r.r
 8030a58:	72f272f2 71f271f2 71f271f2 8f128f12     .r.r.q.q.q.q....
 8030a68:	80f180f1 02019f01 020b0206 02150210     ................
 8030a78:	021f021a 4ff24ff2 4ff24ff2 4ff24ff2     .....O.O.O.O.O.O
 8030a88:	4ff24ff2 4ff24ff2 4ff24ff2 4ff24ff2     .O.O.O.O.O.O.O.O
 8030a98:	4ff24ff2 4ff24ff2 4ff24ff2 4ff24ff2     .O.O.O.O.O.O.O.O
 8030aa8:	4ff24ff2 4ff24ff2 4ff24ff2 4ff24ff2     .O.O.O.O.O.O.O.O
 8030ab8:	4ff24ff2 02290224 02370232 023f023a     .O.O$.).2.7.:.?.
 8030ac8:	02450242 024d024a 02530250 02590256     B.E.J.M.P.S.V.Y.
 8030ad8:	025f025c 02650262 026b0268 0271026e     \._.b.e.h.k.n.q.
 8030ae8:	02770274 027d027a 02830280 028b0288     t.w.z.}.........
 8030af8:	0291028e 02970294 029f029a 02a494b2     ................
 8030b08:	02aa02a7 988293b2 92b202af 02b502b2     ................
 8030b18:	94a29692 978202b8 93a29a32 95929952     ........2...R...
 8030b28:	92a29a22 986291a2 97729682 94929942     ".....b...r.B...
 8030b38:	93929932 95829852 97629922 92929672     2...R...".b.r...
 8030b48:	91929912 94829842 95729752 93829832     ....B...R.r.2...
 8030b58:	98229662 98129282 94729742 02bb9182     b.".....B.r.....
 8030b68:	95629652 02be9712 83728372 97229732     R.b.....r.r.2.".
 8030b78:	82728272 86428642 84628462 85528552     r.r.B.B.b.b.R.R.
 8030b88:	81728172 86328632 83628362 85428542     r.r.2.2.b.b.B.B.
 8030b98:	84528452 86228622 82628262 86128612     R.R.".".b.b.....
 8030ba8:	81628162 90619601 85328532 83528352     b.b...a.2.2.R.R.
 8030bb8:	84428442 85228522 82528252 85128512     B.B.".".R.R.....
 8030bc8:	90519501 71527152 71527152 84328432     ..Q.RqRqRqRq2.2.
 8030bd8:	83428342 74227422 74227422 72427242     B.B."t"t"t"tBrBr
 8030be8:	72427242 73327332 73327332 74127412     BrBr2s2s2s2s.t.t
 8030bf8:	74127412 71427142 71427142 84018401     .t.tBqBqBqBq....
 8030c08:	80418041 73227322 73227322 72327232     A.A."s"s"s"s2r2r
 8030c18:	72327232 63126312 63126312 63126312     2r2r.c.c.c.c.c.c
 8030c28:	63126312 61326132 61326132 61326132     .c.c2a2a2a2a2a2a
 8030c38:	61326132 73017301 73017301 70317031     2a2a.s.s.s.s1p1p
 8030c48:	70317031 62226222 62226222 62226222     1p1p"b"b"b"b"b"b
 8030c58:	62226222 52125212 52125212 52125212     "b"b.R.R.R.R.R.R
 8030c68:	52125212 52125212 52125212 52125212     .R.R.R.R.R.R.R.R
 8030c78:	52125212 51225122 51225122 51225122     .R.R"Q"Q"Q"Q"Q"Q
 8030c88:	51225122 51225122 51225122 51225122     "Q"Q"Q"Q"Q"Q"Q"Q
 8030c98:	51225122 62016201 62016201 62016201     "Q"Q.b.b.b.b.b.b
 8030ca8:	62016201 60216021 60216021 60216021     .b.b!`!`!`!`!`!`
 8030cb8:	60216021 41124112 41124112 41124112     !`!`.A.A.A.A.A.A
 8030cc8:	41124112 41124112 41124112 41124112     .A.A.A.A.A.A.A.A
 8030cd8:	41124112 41124112 41124112 41124112     .A.A.A.A.A.A.A.A
 8030ce8:	41124112 41124112 41124112 41124112     .A.A.A.A.A.A.A.A
 8030cf8:	41124112 41014101 41014101 41014101     .A.A.A.A.A.A.A.A
 8030d08:	41014101 41014101 41014101 41014101     .A.A.A.A.A.A.A.A
 8030d18:	41014101 41014101 41014101 41014101     .A.A.A.A.A.A.A.A
 8030d28:	41014101 41014101 41014101 41014101     .A.A.A.A.A.A.A.A
 8030d38:	41014101 40114011 40114011 40114011     .A.A.@.@.@.@.@.@
 8030d48:	40114011 40114011 40114011 40114011     .@.@.@.@.@.@.@.@
 8030d58:	40114011 40114011 40114011 40114011     .@.@.@.@.@.@.@.@
 8030d68:	40114011 40114011 40114011 40114011     .@.@.@.@.@.@.@.@
 8030d78:	40114011 40004000 40004000 40004000     .@.@.@.@.@.@.@.@
 8030d88:	40004000 40004000 40004000 40004000     .@.@.@.@.@.@.@.@
 8030d98:	40004000 40004000 40004000 40004000     .@.@.@.@.@.@.@.@
 8030da8:	40004000 40004000 40004000 40004000     .@.@.@.@.@.@.@.@
 8030db8:	40004000 2ee2f002 2de22ed2 f0022ec2     .@.@.......-....
 8030dc8:	2dd22ce2 2be22eb2 2dc2f002 2ea22cd2     .,.-...+...-.,..
 8030dd8:	f0022ae2 2bd22db2 2e922cc2 29e2f002     .*...-.+.,.....)
 8030de8:	2ad22da2 f0022cb2 2e822bc2 2d9228e2     .-.*.,...+...(.-
 8030df8:	29d2f002 27e22e72 f0022ca2 2bb22ac2     ...)r..'.,...*.+
 8030e08:	28d22d82 3e01f003 2d0130e1 16e22d01     .-.(...>.0.-.-..
 8030e18:	16e216e2 f00216e2 2c922e62 19c219c2     ........b..,....
 8030e28:	1e52f001 f0021ab2 15e215e2 2d722ba2     ..R..........+r-
 8030e38:	17d2f001 f00114e2 18c21c82 2e42f002     ..............B.
 8030e48:	1e322e22 f0011e32 16d21d62 13e2f001     ".2.2...b.......
 8030e58:	f0011b92 1aa219b2 12e2f001 f0011e12     ................
 8030e68:	1d5211e2 15d2f001 f0011c72 1d4217c2     ..R.....r.....B.
 8030e78:	1b82f001 f00118b2 1a9214d2 19a2f001     ................
 8030e88:	f0011c62 1d3216c2 13d2f001 f0011d22     b.....2....."...
 8030e98:	1d1212d2 1b72f001 f00117b2 1c5211d2     ......r.......R.
 8030ea8:	15c2f001 f0011a82 199218a2 1c42f001     ..............B.
 8030eb8:	f00114c2 16b21b62 20d1f002 1c322c01     ....b...... .,2.
 8030ec8:	f0011c32 1a7213c2 17a2f001 f0011c22     2.....r....."...
 8030ed8:	1b5212c2 15b2f001 f0011c12 18921982     ..R.............
 8030ee8:	11c2f001 f0021b42 2b0120c1 1b321b32     ....B.... .+2.2.
 8030ef8:	20b1f002 1a122a01 f0011a12 16a21a62     ... .*......b...
 8030f08:	1972f001 f0021792 290120a1 10911091     ..r...... .)....
 8030f18:	1b22f001 f0011a52 1b1215a2 11b2f001     ..".R...........
 8030f28:	f0011962 18721a42 1801f001 f0011081     b...B.r.........
 8030f38:	10711701                                ..q.

08030f3c <xmp3_huffTabOffset>:
	...
 8030f44:	00000009 0000004a 00000000 0000008b     ....J...........
 8030f54:	0000018c 0000020d 0000027b 00000393     ........{.......
 8030f64:	000003f0 00000530 00000658 00000711     ....0...X.......
 8030f74:	00000000 00000902 00000b46 00000b46     ........F...F...
 8030f84:	00000b46 00000b46 00000b46 00000b46     F...F...F...F...
 8030f94:	00000b46 00000b46 00000dd1 00000dd1     F...F...........
 8030fa4:	00000dd1 00000dd1 00000dd1 00000dd1     ................
 8030fb4:	00000dd1 00000dd1                       ........

08030fbc <xmp3_huffTabLookup>:
	...
 8030fc8:	00000001 00000000 00000001 00000000     ................
 8030fd8:	00000001 00000000 00000006 00000000     ................
 8030fe8:	00000001 00000000 00000001 00000000     ................
 8030ff8:	00000002 00000000 00000002 00000000     ................
 8031008:	00000002 00000000 00000002 00000000     ................
 8031018:	00000002 00000000 00000002 00000000     ................
 8031028:	00000002 00000000 00000006 00000000     ................
 8031038:	00000002 00000001 00000003 00000002     ................
 8031048:	00000003 00000003 00000003 00000004     ................
 8031058:	00000003 00000006 00000003 00000008     ................
 8031068:	00000003 0000000a 00000003 0000000d     ................
 8031078:	00000003 00000004 00000003 00000005     ................
 8031088:	00000003 00000006 00000003 00000007     ................
 8031098:	00000003 00000008 00000003 00000009     ................
 80310a8:	00000003 0000000b 00000003 0000000d     ................
 80310b8:	00000003                                ....

080310bc <xmp3_quadTable>:
 80310bc:	6e6d6f6b 59596567 53535656 5c5c5a5a     komngeYYVVSSZZ\\
 80310cc:	42424242 41414141 44444444 48484848     BBBBAAAADDDDHHHH
 80310dc:	10101010 10101010 10101010 10101010     ................
 80310ec:	10101010 10101010 10101010 10101010     ................
 80310fc:	4c4d4e4f 48494a4b 44454647 40414243     ONMLKJIHGFEDCBA@

0803110c <xmp3_quadTabOffset>:
 803110c:	00000000 00000040                       ....@...

08031114 <xmp3_quadTabMaxBits>:
 8031114:	00000006 00000004                       ........

0803111c <c9_0>:
 803111c:	6ed9eba1                                ...n

08031120 <c9_1>:
 8031120:	620dbe8b                                ...b

08031124 <c9_2>:
 8031124:	163a1a7e                                ~.:.

08031128 <c9_3>:
 8031128:	5246dd49                                I.FR

0803112c <c9_4>:
 803112c:	7e0e2e32                                2..~

08031130 <c18>:
 8031130:	7f834ed0 7ba3751d 7401e4c1 68d9f964     .N...u.{...td..h
 8031140:	5a82799a 496af3e2 36185aee 2120fb83     .y.Z..jI.Z.6.. !
 8031150:	0b27eb5c                                \.'.

08031154 <fastWin36>:
 8031154:	42aace8b c2e92724 47311c28 c95f619a     ...B$'..(.1G.a_.
 8031164:	4a868feb d0859d8c 4c913b51 d8243ea0     ...J....Q;.L.>$.
 8031174:	4d413ccc e0000000 4c913b51 e7dbc161     .<AM....Q;.La...
 8031184:	4a868feb ef7a6275 47311c28 f6a09e67     ...Jubz.(.1Gg...
 8031194:	42aace8b fd16d8dd                       ...B....

0803119c <c3_0>:
 803119c:	6ed9eba1                                ...n

080311a0 <c6>:
 80311a0:	7ba3751d 5a82799a 2120fb83              .u.{.y.Z.. !

080311ac <SFLenTab>:
 80311ac:	01000000 03000200 01010003 03010201     ................
 80311bc:	02020102 01030302 03030203 03040204     ................

080311cc <NRTab>:
 80311cc:	05050506 03030303 03030306 03070506     ................
 80311dc:	02040303 02040306 00000a0b 00000606     ................
 80311ec:	00060306 00070707 00040404 00040506     ................
 80311fc:	03060606 02030304 02030406 00050808     ................
 803120c:	00030405 00030606                       ........

08031214 <xmp3_imdctWin>:
 8031214:	02aace8b 07311c28 0a868fec 0c913b52     ....(.1.....R;..
 8031224:	0d413ccd 0c913b52 0a868fec 07311c28     .<A.R;......(.1.
 8031234:	02aace8b fd16d8dd f6a09e66 ef7a6275     ........f...ubz.
 8031244:	e7dbc161 e0000000 d8243e9f d0859d8b     a........>$.....
 8031254:	c95f619a c2e92723 bd553175 b8cee3d8     .a_.#'..u1U.....
 8031264:	b5797014 b36ec4ae b2bec333 b36ec4ae     .py...n.3.....n.
 8031274:	b5797014 b8cee3d8 bd553175 c2e92723     .py.....u1U.#'..
 8031284:	c95f619a d0859d8b d8243e9f e0000000     .a_......>$.....
 8031294:	e7dbc161 ef7a6275 f6a09e66 fd16d8dd     a...ubz.f.......
 80312a4:	02aace8b 07311c28 0a868fec 0c913b52     ....(.1.....R;..
 80312b4:	0d413ccd 0c913b52 0a868fec 07311c28     .<A.R;......(.1.
 80312c4:	02aace8b fd16d8dd f6a09e66 ef7a6275     ........f...ubz.
 80312d4:	e7dbc161 e0000000 d8243e9f d0859d8b     a........>$.....
 80312e4:	c95f619a c2e92723 bd44ef14 b831a052     .a_.#'....D.R.1.
 80312f4:	b3aa3837 afb789a4 ac6145bb a9adecdc     78.......Ea.....
 8031304:	a864491f ad1868f0 b8431f49 c8f42236     .Id..h..I.C.6"..
 8031314:	dda8e6b1 f47755dc 00000000 00000000     .....Uw.........
	...
 8031334:	07311c28 0d413ccd 07311c28 f6a09e66     (.1..<A.(.1.f...
 8031344:	e0000000 c95f619a b8cee3d8 b2bec333     .....a_.....3...
 8031354:	b8cee3d8 c95f619a e0000000 f6a09e66     .....a_.....f...
	...
 80313dc:	028e9709 04855ec0 026743a1 fcde2c10     .....^...Cg..,..
 80313ec:	f515dc82 ec93e53b e4c880f8 dd5d0b08     ....;.........].
 80313fc:	d63510b7 cf5e834a c8e6b562 c2da4105     ..5.J.^.b....A..
 803140c:	bd553175 b8cee3d8 b5797014 b36ec4ae     u1U......py...n.
 803141c:	b2bec333 b36ec4ae b5797014 b8cee3d8     3.....n..py.....
 803142c:	bd553175 c2e92723 c95f619a d0859d8b     u1U.#'...a_.....
 803143c:	d8243e9f e0000000 e7dbc161 ef7a6275     .>$.....a...ubz.
 803144c:	f6a09e66 fd16d8dd                       f.......

08031454 <xmp3_ISFMpeg1>:
 8031454:	00000000 0d8658ba 176cf5d0 20000000     .....X....l.... 
 8031464:	28930a2f 3279a745 40000000 00000000     /..(E.y2...@....
 8031474:	13207f5c 2120fb83 2d413ccc 39617e16     \. ... !.<A-.~a9
 8031484:	4761fa3d 5a827999                       =.aG.y.Z

0803148c <xmp3_ISFMpeg2>:
 803148c:	40000000 35d13f32 2d413ccc 260dfc14     ...@2?.5.<A-...&
 803149c:	1fffffff 1ae89f99 16a09e66 1306fe0a     ........f.......
 80314ac:	0fffffff 0d744fcc 0b504f33 09837f05     .....Ot.3OP.....
 80314bc:	07ffffff 06ba27e6 05a82799 04c1bf82     .....'...'......
 80314cc:	5a827999 4c1bf827 3fffffff 35d13f32     .y.Z'..L...?2?.5
 80314dc:	2d413ccc 260dfc13 1fffffff 1ae89f99     .<A-...&........
 80314ec:	16a09e66 1306fe09 0fffffff 0d744fcc     f............Ot.
 80314fc:	0b504f33 09837f04 07ffffff 06ba27e6     3OP..........'..
 803150c:	40000000 2d413ccc 20000000 16a09e66     ...@.<A-... f...
 803151c:	10000000 0b504f33 08000000 05a82799     ....3OP......'..
 803152c:	04000000 02d413cc 02000000 016a09e6     ..............j.
 803153c:	01000000 00b504f3 00800000 005a8279     ............y.Z.
 803154c:	5a827999 3fffffff 2d413ccc 1fffffff     .y.Z...?.<A-....
 803155c:	16a09e66 0fffffff 0b504f33 07ffffff     f.......3OP.....
 803156c:	05a82799 03ffffff 02d413cc 01ffffff     .'..............
 803157c:	016a09e6 00ffffff 00b504f3 007fffff     ..j.............

0803158c <xmp3_ISFIIP>:
 803158c:	40000000 00000000 40000000 40000000     ...@.......@...@

0803159c <xmp3_csa>:
 803159c:	6dc253f0 be2500aa 70dcebe4 c39e4949     .S.m..%....pII..
 80315ac:	798d6e73 d7e33f4a 7ddd40a7 e8b71176     sn.yJ?...@.}v...
 80315bc:	7f6d20b7 f3e4fe2f 7fe47e40 fac1a3c7     . m./...@~......
 80315cc:	7ffcb263 fe2ebdc6 7fffc694 ff86c25d     c...........]...

080315dc <xmp3_polyCoef>:
 80315dc:	00000000 00000074 00000354 0000072c     ....t...T...,...
 80315ec:	00001fd4 00005084 000066b8 000249c4     .....P...f...I..
 80315fc:	00049478 fffdb63c 000066b8 ffffaf7c     x...<....f..|...
 803160c:	00001fd4 fffff8d4 00000354 ffffff8c     ........T.......
 803161c:	fffffffc 00000068 00000368 00000644     ....h...h...D...
 803162c:	00001f40 00004ad0 00005d1c 00022ce0     @....J...]...,..
 803163c:	000493c0 fffd9960 00006f78 ffffa9cc     ....`...xo......
 803164c:	0000203c fffff7e4 00000340 ffffff84     < ......@.......
 803165c:	fffffffc 00000060 00000378 0000056c     ....`...x...l...
 803166c:	00001e80 00004524 000052a0 00020ffc     ....$E...R......
 803167c:	000491a0 fffd7ca0 00007760 ffffa424     .....|..`w..$...
 803168c:	00002080 fffff6ec 00000328 ffffff74     . ......(...t...
 803169c:	fffffffc 00000054 00000384 00000498     ....T...........
 80316ac:	00001d94 00003f7c 00004744 0001f32c     ....|?..DG..,...
 80316bc:	00048e18 fffd6008 00007e70 ffff9e8c     .....`..p~......
 80316cc:	0000209c fffff5ec 00000310 ffffff68     . ..........h...
 80316dc:	fffffffc 0000004c 0000038c 000003d0     ....L...........
 80316ec:	00001c78 000039e4 00003b00 0001d680     x....9...;......
 80316fc:	00048924 fffd43ac 000084b0 ffff990c     $....C..........
 803170c:	00002094 fffff4e4 000002f8 ffffff5c     . ..........\...
 803171c:	fffffffc 00000044 00000390 00000314     ....D...........
 803172c:	00001b2c 0000345c 00002ddc 0001ba04     ,...\4...-......
 803173c:	000482d0 fffd279c 00008a20 ffff93a4     .....'.. .......
 803174c:	0000206c fffff3d4 000002dc ffffff4c     l ..........L...
 803175c:	fffffffc 00000040 00000390 00000264     ....@.......d...
 803176c:	000019b0 00002ef0 00001fd4 00019dc8     ................
 803177c:	00047b1c fffd0be8 00008ecc ffff8e64     .{..........d...
 803178c:	00002024 fffff2c0 000002c0 ffffff3c     $ ..........<...
 803179c:	fffffff8 00000038 0000038c 000001bc     ....8...........
 80317ac:	000017fc 0000299c 000010e8 000181d8     .....)..........
 80317bc:	0004720c fffcf09c 000092b4 ffff894c     .r..........L...
 80317cc:	00001fc0 fffff1a4 000002a4 ffffff2c     ............,...
 80317dc:	fffffff8 00000034 00000380 00000120     ....4....... ...
 80317ec:	00001618 00002468 00000118 00016644     ....h$......Df..
 80317fc:	000467a4 fffcd5cc 000095e0 ffff8468     .g..........h...
 803180c:	00001f44 fffff084 00000284 ffffff18     D...............
 803181c:	fffffff8 0000002c 00000374 00000090     ....,...t.......
 803182c:	00001400 00001f58 fffff068 00014b14     ....X...h....K..
 803183c:	00045bf0 fffcbb88 00009858 ffff7fbc     .[......X.......
 803184c:	00001ea8 ffffef60 00000268 ffffff04     ....`...h.......
 803185c:	fffffff8 00000028 0000035c 00000008     ....(...\.......
 803186c:	000011ac 00001a70 ffffded8 00013058     ....p.......X0..
 803187c:	00044ef8 fffca1d8 00009a1c ffff7b54     .N..........T{..
 803188c:	00001dfc ffffee3c 0000024c fffffef0     ....<...L.......
 803189c:	fffffff4 00000024 00000340 ffffff8c     ....$...@.......
 80318ac:	00000f28 000015b0 ffffcc70 0001161c     (.......p.......
 80318bc:	000440bc fffc88d8 00009b3c ffff7734     .@......<...4w..
 80318cc:	00001d38 ffffed18 0000022c fffffedc     8.......,.......
 80318dc:	fffffff4 00000020 00000320 ffffff1c     .... ... .......
 80318ec:	00000c68 0000111c ffffb92c 0000fc6c     h.......,...l...
 80318fc:	00043150 fffc708c 00009bb8 ffff7368     P1...p......hs..
 803190c:	00001c64 ffffebf4 00000210 fffffec4     d...............
 803191c:	fffffff0 0000001c 000002f4 fffffeb4     ................
 803192c:	00000974 00000cb8 ffffa518 0000e350     t...........P...
 803193c:	000420b4 fffc5908 00009b9c ffff6ff4     . ...Y.......o..
 803194c:	00001b7c ffffead0 000001f4 fffffeac     |...............
 803195c:	fffffff0 0000001c 000002c4 fffffe58     ............X...
 803196c:	00000648 00000884 ffff9038 0000cad0     H.......8.......
 803197c:	00040ef8 fffc425c 00009af0 ffff6ce0     ....\B.......l..
 803198c:	00001a88 ffffe9b0 000001d4 fffffe94     ................
 803199c:	ffffffec 00000018 0000028c fffffe04     ................
 80319ac:	000002e4 00000480 ffff7a90 0000b2fc     .........z......
 80319bc:	0003fc28 fffc2c90 000099b8 ffff6a3c     (....,......<j..
 80319cc:	00001988 ffffe898 000001bc fffffe7c     ............|...
 80319dc:	000001a0 0000187c 000097fc 0003e84c     ....|.......L...
 80319ec:	ffff6424 ffffff4c 00000248 ffffffec     $d..L...H.......

080319fc <xmp3_samplerateTab>:
 80319fc:	0000ac44 0000bb80 00007d00 00005622     D........}.."V..
 8031a0c:	00005dc0 00003e80 00002b11 00002ee0     .]...>...+......
 8031a1c:	00001f40                                @...

08031a20 <xmp3_bitrateTab>:
 8031a20:	00200000 00600040 00a00080 00e000c0     .. .@.`.........
 8031a30:	01200100 01600140 01a00180 000001c0     .. .@.`.........
 8031a40:	00300020 00400038 00600050 00800070      .0.8.@.P.`.p...
 8031a50:	00c000a0 010000e0 01800140 00200000     ........@..... .
 8031a60:	00300028 00400038 00600050 00800070     (.0.8.@.P.`.p...
 8031a70:	00c000a0 010000e0 00000140 00300020     ........@... .0.
 8031a80:	00400038 00600050 00800070 00a00090     8.@.P.`.p.......
 8031a90:	00c000b0 010000e0 00080000 00180010     ................
 8031aa0:	00280020 00380030 00500040 00700060      .(.0.8.@.P.`.p.
 8031ab0:	00900080 000000a0 00100008 00200018     .............. .
 8031ac0:	00300028 00400038 00600050 00800070     (.0.8.@.P.`.p...
 8031ad0:	00a00090 00200000 00380030 00500040     ...... .0.8.@.P.
 8031ae0:	00700060 00900080 00b000a0 00e000c0     `.p.............
 8031af0:	00000100 00100008 00200018 00300028     .......... .(.0.
 8031b00:	00400038 00600050 00800070 00a00090     8.@.P.`.p.......
 8031b10:	00080000 00180010 00280020 00380030     ........ .(.0.8.
 8031b20:	00500040 00700060 00900080 000000a0     @.P.`.p.........

08031b30 <xmp3_samplesPerFrameTab>:
 8031b30:	04800180 01800480 02400480 04800180     ..........@.....
 8031b40:	00000240                                @...

08031b44 <xmp3_sideBytesTab>:
 8031b44:	00200011 00110009 00110009              .. .........

08031b50 <xmp3_slotTab>:
 8031b50:	00680000 009c0082 00d000b6 01390105     ..h...........9.
 8031b60:	01a1016d 0272020a 034302db 00000414     m.....r...C.....
 8031b70:	00780060 00a80090 00f000c0 01500120     `.x......... .P.
 8031b80:	01e00180 02a00240 03c00300 00900000     ....@...........
 8031b90:	00d800b4 012000fc 01b00168 024001f8     ...... .h.....@.
 8031ba0:	036002d0 048003f0 000005a0 0034001a     ..`...........4.
 8031bb0:	0068004e 009c0082 00d000b6 01390105     N.h...........9.
 8031bc0:	01a1016d 020a01d6 00180000 00480030     m...........0.H.
 8031bd0:	00780060 00a80090 00f000c0 01500120     `.x......... .P.
 8031be0:	01b00180 000001e0 00480024 0090006c     ........$.H.l...
 8031bf0:	00d800b4 012000fc 01b00168 024001f8     ...... .h.....@.
 8031c00:	02d00288 00340000 009c0068 010500d0     ......4.h.......
 8031c10:	016d0139 020a01a1 02db0272 03ac0343     9.m.....r...C...
 8031c20:	00000414 00600030 00c00090 012000f0     ....0.`....... .
 8031c30:	01800150 024001e0 030002a0 03c00360     P.....@.....`...
 8031c40:	00480000 00d80090 01680120 01f801b0     ..H..... .h.....
 8031c50:	02d00240 03f00360 05100480 000005a0     @...`...........

08031c60 <xmp3_sfBandTable>:
 8031c60:	00040000 000c0008 00140010 001e0018     ................
 8031c70:	002c0024 003e0034 005a004a 0086006e     $.,.4.>.J.Z.n...
 8031c80:	00c400a2 012000ee 01a20156 00000240     ...... .V...@...
 8031c90:	00080004 0010000c 001e0016 00340028     ............(.4.
 8031ca0:	00540042 0088006a 000000c0 00080004     B.T.j...........
 8031cb0:	0010000c 00180014 0024001e 0032002a     ..........$.*.2.
 8031cc0:	0048003c 006a0058 009c0080 00e600be     <.H.X.j.........
 8031cd0:	014a0114 02400180 00040000 000c0008     ..J...@.........
 8031ce0:	00160010 0026001c 00400032 00640050     ......&.2.@.P.d.
 8031cf0:	00c0007e 00040000 000c0008 00140010     ~...............
 8031d00:	001e0018 002c0024 00420036 00660052     ....$.,.6.B.R.f.
 8031d10:	009c007e 00f000c2 016c0128 022601c0     ~.......(.l...&.
 8031d20:	00000240 00080004 0010000c 001e0016     @...............
 8031d30:	003a002a 0068004e 00b4008a 000000c0     *.:.N.h.........
 8031d40:	000c0006 00180012 0024001e 0036002c     ..........$.,.6.
 8031d50:	00500042 00740060 00a8008c 00ee00c8     B.P.`.t.........
 8031d60:	0150011c 01d0018c 0240020a 00040000     ..P.......@.....
 8031d70:	000c0008 00180012 002a0020 004a0038     ........ .*.8.J.
 8031d80:	00840064 00c000ae 00060000 0012000c     d...............
 8031d90:	001e0018 002c0024 00420036 00600050     ....$.,.6.B.P.`.
 8031da0:	00880072 00c200a2 011600e8 018a014c     r...........L...
 8031db0:	021c01d0 00000240 00080004 0012000c     ....@...........
 8031dc0:	0024001a 003e0030 00680050 00b40088     ..$.0.>.P.h.....
 8031dd0:	000000c0 000c0006 00180012 0024001e     ..............$.
 8031de0:	0036002c 00500042 00740060 00a8008c     ,.6.B.P.`.t.....
 8031df0:	00ee00c8 0150011c 01d0018c 0240020a     ......P.......@.
 8031e00:	00040000 000c0008 001a0012 00300024     ............$.0.
 8031e10:	0050003e 00860068 00c000ae 00060000     >.P.h...........
 8031e20:	0012000c 001e0018 002c0024 00420036     ........$.,.6.B.
 8031e30:	00600050 008c0074 00c800a8 011c00ee     P.`.t...........
 8031e40:	018c0150 020a01d0 00000240 00080004     P.......@.......
 8031e50:	0012000c 0024001a 003e0030 00680050     ......$.0.>.P.h.
 8031e60:	00ae0086 000000c0 000c0006 00180012     ................
 8031e70:	0024001e 0036002c 00500042 00740060     ..$.,.6.B.P.`.t.
 8031e80:	00a8008c 00ee00c8 0150011c 01d0018c     ..........P.....
 8031e90:	0240020a 00040000 000c0008 001a0012     ..@.............
 8031ea0:	00300024 0050003e 00860068 00c000ae     $.0.>.P.h.......
 8031eb0:	000c0000 00240018 003c0030 00580048     ......$.0.<.H.X.
 8031ec0:	0084006c 00c000a0 011800e8 01900150     l...........P...
 8031ed0:	023601dc 023a0238 023e023c 00000240     ..6.8.:.<.>.@...
 8031ee0:	00100008 00240018 00480034 007c0060     ......$.4.H.`.|.
 8031ef0:	00a200a0 00a600a4 000000c0 00000000     ................

08031f00 <_ZTV11CGraphicLCD>:
	...
 8031f08:	0802c6f9 0802c6f9 0802c6f9 0802c6f9     ................
 8031f18:	0802c6f9 0802c6f9 0802c6f9 0802c6f9     ................
 8031f28:	0802c6f9 08014a5d 08014a91 00000000     ....]J...J......

08031f38 <_ZTV13CT6963CDriver>:
	...
 8031f40:	08014d91 080150ad 080151fd 08015545     .M...P...Q..EU..
 8031f50:	08015689 080156e9 08014e89 0801586d     .V...V...N..mX..
 8031f60:	08014b65 08014b0d 08014b45 0802c6f9     eK...K..EK......
 8031f70:	0802c6f9 0802c6f9 0802c6f9 0802c6f9     ................

08031f80 <_ZTV21CT6963_GPIO_Interface>:
	...
 8031f88:	08014d91 080150ad 080151fd 08015545     .M...P...Q..EU..
 8031f98:	08015689 080156e9 08014e89 0801586d     .V...V...N..mX..
 8031fa8:	08014b65 08015969 080159a1 08015a7d     eK..iY...Y..}Z..
 8031fb8:	08015b3d 08015b75 08015c21 08015ced     =[..u[..!\...\..

08031fc8 <c_FontSansSerif12>:
 8031fc8:	00000000 00000012 08031fe0 08032b20     ............ +..
 8031fd8:	08032c20 08032c7c                        ,..|,..

08031fe0 <_ZL35Microsoft_Sans_Serif__12_char_table>:
	...
 8031ff4:	001c0000 00220022 00410041 00410041     ....".".A.A.A.A.
 8032004:	00410041 00220022 0000001c 00000000     A.A.".".........
 8032014:	00000000 10107010 10101010 10101010     .....p..........
	...
 803202c:	0022001c 00010041 00020001 00080004     ..".A...........
 803203c:	00200010 007f0040 00000000 00000000     .. .@...........
 803204c:	00000000 0022001c 00010041 000c0002     ......".A.......
 803205c:	00010002 00410001 001c0022 00000000     ......A.".......
	...
 8032074:	00060002 000a0006 00120012 00420022     ............".B.
 8032084:	0002007f 00020002 00000000 00000000     ................
 8032094:	00000000 0040007f 00400040 0062005c     ......@.@.@.\.b.
 80320a4:	00010001 00410001 001c0022 00000000     ......A.".......
	...
 80320bc:	0022001c 00400041 0062005c 00410041     ..".A.@.\.b.A.A.
 80320cc:	00410041 001c0022 00000000 00000000     A.A."...........
 80320dc:	00000000 0001007f 00020001 00020002     ................
 80320ec:	00040004 00080004 00080008 00000000     ................
	...
 8032104:	0022001c 00410041 001c0022 00410022     ..".A.A."...".A.
 8032114:	00410041 001c0022 00000000 00000000     A.A."...........
 8032124:	00000000 0022001c 00410041 00410041     ......".A.A.A.A.
 8032134:	001d0023 00410001 001c0022 00000000     #.....A.".......
	...
 803214c:	00020002 00050005 80088008 c01f4010     .............@..
 803215c:	20202020 10401040 00000000 00000000         @.@.........
 803216c:	00000000 0041007e 80408040 007e0041     ....~.A.@.@.A.~.
 803217c:	80400041 80408040 007e0041 00000000     A.@.@.@.A.~.....
	...
 8032194:	c030000f 20404020 00400040 00400040     ..0. @@ @.@.@.@.
 80321a4:	40202040 000fc030 00000000 00000000     @  @0...........
 80321b4:	00000000 8041007e 40408040 40404040     ....~.A.@.@@@@@@
 80321c4:	40404040 80404040 007e8041 00000000     @@@@@@@.A.~.....
	...
 80321dc:	0040807f 00400040 007f0040 00400040     ..@.@.@.@...@.@.
 80321ec:	00400040 807f0040 00000000 00000000     @.@.@...........
 80321fc:	00000000 0040807f 00400040 007f0040     ......@.@.@.@...
 803220c:	00400040 00400040 00400040 00000000     @.@.@.@.@.@.....
	...
 8032224:	c030000f 20404020 00400040 2040e041     ..0. @@ @.@.A.@ 
 8032234:	60202040 200fe030 00000000 00000000     @  `0.. ........
 8032244:	00000000 80408040 80408040 807f8040     ....@.@.@.@.@...
 8032254:	80408040 80408040 80408040 00000000     @.@.@.@.@.@.....
 8032264:	00000000 40400000 40404040 40404040     ......@@@@@@@@@@
 8032274:	00004040 00000000 02020202 02020202     @@..............
 8032284:	3c424242 00000000 00000000 00420041     BBB<........A.B.
 8032294:	00480044 00600050 00480050 00420044     D.H.P.`.P.H.D.B.
 80322a4:	80400041 00000000 00000000 00000000     A.@.............
 80322b4:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 80322c4:	00400040 007f0040 00000000 00000000     @.@.@...........
 80322d4:	00000000 40404040 c060c060 40514051     ....@@@@`.`.Q@Q@
 80322e4:	404a404a 40444044 40404040 00000000     J@J@D@D@@@@@....
	...
 80322fc:	00610041 00510061 00490051 00450049     A.a.a.Q.Q.I.I.E.
 803230c:	00430045 00410043 00000000 00000000     E.C.C.A.........
 803231c:	00000000 c030000f 20404020 20402040     ......0. @@ @ @ 
 803232c:	20402040 40202040 000fc030 00000000     @ @ @  @0.......
	...
 8032344:	0041007e 80408040 00418040 0040007e     ~.A.@.@.@.A.~.@.
 8032354:	00400040 00400040 00000000 00000000     @.@.@.@.........
 8032364:	00000000 c030000f 20404020 20402040     ......0. @@ @ @ 
 8032374:	20402040 40212042 400fc030 00002000     @ @ B !@0..@. ..
	...
 803238c:	0041007e 80408040 00418040 0041007e     ~.A.@.@.@.A.~.A.
 803239c:	80408040 40408040 00000000 00000000     @.@.@.@@........
 80323ac:	00000000 8020001f 00404040 001f0020     ...... .@@@. ...
 80323bc:	40008000 40404000 001f8020 00000000     ...@.@@@ .......
	...
 80323d4:	0004c07f 00040004 00040004 00040004     ................
 80323e4:	00040004 00040004 00000000 00000000     ................
 80323f4:	00000000 80408040 80408040 80408040     ....@.@.@.@.@.@.
 8032404:	80408040 80408040 001e0021 00000000     @.@.@.@.!.......
	...
 803241c:	10401040 20202020 40104010 80088008     @.@.    .@.@....
 803242c:	00050005 00020002 00000000 00000000     ................
 803243c:	00000000 01400000 00814000 20008220     ......@..@.. .. 
 803244c:	42210082 00441100 0a004411 280a0028     ..!B..D..D..(..(
 803245c:	00100400 04001004 00000010 00000000     ................
	...
 8032474:	10400000 40102020 00058008 00020002     ..@.  .@........
 8032484:	80080005 20204010 00001040 00000000     .....@  @.......
 8032494:	00000000 10400000 40102020 00058008     ......@.  .@....
 80324a4:	00020002 00020002 00020002 00000002     ................
	...
 80324bc:	807f0000 00018000 00020002 00080004     ................
 80324cc:	00100010 00400020 0000807f 00000000     .... .@.........
	...
 80324e8:	0041003e 00010001 0041003f 00410041     >.A.....?.A.A.A.
 80324f8:	0000803e 00000000 00000000 00400000     >.............@.
 8032508:	00400040 0062005c 00410041 00410041     @.@.\.b.A.A.A.A.
 8032518:	00620041 0000005c 00000000 00000000     A.b.\...........
	...
 8032530:	0022001c 00400041 00400040 00220041     ..".A.@.@.@.A.".
 8032540:	0000001c 00000000 00000000 00010000     ................
 8032550:	00010001 0023001d 00410041 00410041     ......#.A.A.A.A.
 8032560:	00230041 0000001d 00000000 00000000     A.#.............
	...
 8032578:	0022001c 00410041 0040007f 00220041     ..".A.A...@.A.".
 8032588:	0000001c 00000000 00000000 7c10100c     ...............|
 8032598:	10101010 10101010 00000000 00000000     ................
 80325a8:	00000000 001d0000 00410023 00410041     ........#.A.A.A.
 80325b8:	00410041 001d0023 00010001 003c0002     A.A.#.........<.
 80325c8:	00000000 00400040 005c0040 00410062     ....@.@.@.\.b.A.
 80325d8:	00410041 00410041 00410041 00000000     A.A.A.A.A.A.....
 80325e8:	00000000 00400000 40404000 40404040     ......@..@@@@@@@
 80325f8:	00004040 00000000 20000020 20202020     @@...... ..     
 8032608:	20202020 40202020 00000000 00400040            @....@.@.
 8032618:	00420040 00480044 00700050 00440048     @.B.D.H.P.p.H.D.
 8032628:	00410042 00000000 00000000 40400000     B.A...........@@
 8032638:	40404040 40404040 00004040 00000000     @@@@@@@@@@......
	...
 8032650:	2065c058 10421042 10421042 10421042     X.e B.B.B.B.B.B.
 8032660:	00001042 00000000 00000000 00000000     B...............
 8032670:	00000000 0062005c 00410041 00410041     ....\.b.A.A.A.A.
 8032680:	00410041 00000041 00000000 00000000     A.A.A...........
	...
 8032698:	0022001c 00410041 00410041 00220041     ..".A.A.A.A.A.".
 80326a8:	0000001c 00000000 00000000 00000000     ................
 80326b8:	00000000 0062005c 00410041 00410041     ....\.b.A.A.A.A.
 80326c8:	00620041 0040005c 00400040 00000040     A.b.\.@.@.@.@...
	...
 80326e0:	0023001d 00410041 00410041 00230041     ..#.A.A.A.A.A.#.
 80326f0:	0001001d 00010001 00000001 58000000     ...............X
 8032700:	40404060 40404040 00000000 00000000     `@@@@@@@........
 8032710:	40423c00 02023c40 00003c42 00000000     .<B@@<..B<......
 8032720:	7c101010 10101010 08101010 00000000     ...|............
	...
 8032738:	00410000 00410041 00410041 00410041     ..A.A.A.A.A.A.A.
 8032748:	001d0023 00000000 00000000 00000000     #...............
 8032758:	00000000 00410000 00220041 00140022     ......A.A."."...
 8032768:	00080014 00080008 00000000 00000000     ................
	...
 8032780:	10420000 10421042 20252025 c018a028     ..B.B.B.% % (...
 8032790:	40104010 00000000 00000000 00000000     .@.@............
 80327a0:	00000000 00410000 00220022 00080014     ......A.".".....
 80327b0:	00220014 00410022 00000000 00000000     ..".".A.........
	...
 80327c8:	00410000 00220041 00140022 00080014     ..A.A.".".......
 80327d8:	00080008 00100010 00600010 00000000     ..........`.....
 80327e8:	04027e00 20101008 00007e40 00000000     .~..... @~......
	...
 8032800:	40000000 00000000 00000000 00000000     ...@............
 8032810:	00000000 20202000 00000040 00000000     .....   @.......
 8032820:	00000020 20000000 00402020 00000000      ......   @.....
 8032830:	00400000 00000000 00004000 00000000     ..@......@......
 8032840:	00000000 78000000 00000000 00000000     .......x........
	...
 8032870:	0000c07f 00000000 00000000 00080000     ................
 8032880:	00080008 0008007f 00080008 00000000     ................
	...
 8032898:	54100000 00282838 00000000 00000000     ...T8((.........
 80328a8:	00000000 80080000 80088008 0011c03f     ............?...
 80328b8:	00110011 807f0011 00220022 00000022     ........"."."...
	...
 80328d4:	00000022 0022001c 00410041 00410041     ".....".A.A.A.A.
 80328e4:	00220041 0000001c 00000000 00000000     A.".............
 80328f4:	00000000 00000012 0041003e 00010001     ........>.A.....
 8032904:	0041003f 00410041 0000803e 00000000     ?.A.A.A.>.......
	...
 803291c:	00000022 00410041 00410041 00410041     "...A.A.A.A.A.A.
 803292c:	00230041 0000001d 00000000 00090000     A.#.............
 803293c:	000f0000 4020c030 20402040 20402040     ....0. @@ @ @ @ 
 803294c:	20402040 c0304020 0000000f 00000000     @ @  @0.........
 803295c:	80080000 00020000 00050002 80080005     ................
 803296c:	40108008 2020c01f 10402020 00001040     ...@..    @.@...
 803297c:	00000000 00120000 80400000 80408040     ..........@.@.@.
 803298c:	80408040 80408040 80408040 00218040     @.@.@.@.@.@.@.!.
 803299c:	0000001e 00000000 00000000 001c0000     ................
 80329ac:	00410022 00010001 00040002 00080008     ".A.............
 80329bc:	00000000 00000008 00000000 00000000     ................
 80329cc:	40404040 40404040 40000040 00000000     @@@@@@@@@..@....
 80329dc:	48300000 00003048 00000000 00000000     ..0HH0..........
 80329ec:	00000000 00442810 00000000 00000000     .....(D.........
 80329fc:	00000000 08080000 10101010 20202020     ............    
 8032a0c:	00004040 00000000 20202010 40404040     @@.......   @@@@
 8032a1c:	40404040 10202020 20400000 10102020     @@@@   ...@   ..
 8032a2c:	10101010 20201010 00004020 001c0000     ......   @......
 8032a3c:	00220022 00140022 00240018 40412042     ".".".....$.B A@
 8032a4c:	40218040 0000201e 00000000 00000000     @.!@. ..........
 8032a5c:	20380000 40444044 00458044 70020039     ..8 D@D@D.E.9..p
 8032a6c:	88048802 88088808 00007010 00000000     .........p......
 8032a7c:	00000000 001c0008 0049002a 00280048     ........*.I.H.(.
 8032a8c:	000a001c 00090009 002a0049 0008001c     ........I.*.....
	...
 8032aa4:	e0030000 0410180c 2226e421 22482244     ........!.&"D"H"
 8032ab4:	42484248 cc484448 00207027 e0071018     HBHBHDH.'p .....
 8032ac4:	00000000 40404040 40404040 40404040     ....@@@@@@@@@@@@
 8032ad4:	40404040 00000000 00000000 00030000     @@@@............
 8032ae4:	0030000c 00300040 0003000c 00000000     ..0.@.0.........
	...
 8032b04:	00600000 00060018 00060001 00600018     ..`...........`.
	...

08032b20 <_ZL38Microsoft_Sans_Serif__12_mapping_table>:
	...
 8032b40:	47004f00 00555657 45465453 523f4340     .O.GWVU.STFE@C?R
 8032b50:	04030201 08070605 41420a09 4e5b005a     ..........BAZ.[N
 8032b60:	0d0c0b58 11100f0e 15141312 19181716     X...............
 8032b70:	1d1c1b1a 21201f1e 00242322 44510000     ...... !"#$...QD
 8032b80:	27262500 2b2a2928 2f2e2d2c 33323130     .%&'()*+,-./0123
 8032b90:	37363534 3b3a3938 003e3d3c 00000059     456789:;<=>.Y...
	...
 8032bd0:	00000050 00000000 00000000 00000000     P...............
 8032be0:	00000000 0000004c 00000000 00000000     ....L...........
 8032bf0:	00000000 004b0000 00000000 0000004d     ......K.....M...
 8032c00:	00000000 00000049 00000000 00000000     ....I...........
 8032c10:	00000000 00480000 00000000 0000004a     ......H.....J...

08032c20 <_ZL36Microsoft_Sans_Serif__12_width_table>:
 8032c20:	09050905 09090909 0d090909 0a0b0c0a     ................
 8032c30:	030a0c0a 0b090a08 0c0a0c09 0a0b0b0b     ................
 8032c40:	0d0d110d 09090a0a 09070909 09040309     ................
 8032c50:	09090d03 08060909 0d090907 03080909     ................
 8032c60:	06030404 0b07090b 0c090a09 03090a0d     ................
 8032c70:	05060706 090e0c05 09090310              ............

08032c7c <_ZL37Microsoft_Sans_Serif__12_offset_table>:
 8032c7c:	00000000 00000012 00000036 00000048     ........6...H...
 8032c8c:	0000006c 00000090 000000b4 000000d8     l...............
 8032c9c:	000000fc 00000120 00000144 00000168     .... ...D...h...
 8032cac:	0000018c 000001b0 000001d4 000001f8     ................
 8032cbc:	0000021c 00000240 00000264 00000288     ....@...d.......
 8032ccc:	0000029a 000002ac 000002d0 000002f4     ................
 8032cdc:	00000318 0000033c 00000360 00000384     ....<...`.......
 8032cec:	000003a8 000003cc 000003f0 00000414     ................
 8032cfc:	00000438 0000045c 00000492 000004b6     8...\...........
 8032d0c:	000004da 000004fe 00000522 00000546     ........"...F...
 8032d1c:	0000056a 0000058e 000005b2 000005c4     j...............
 8032d2c:	000005e8 0000060c 0000061e 00000630     ............0...
 8032d3c:	00000654 00000666 0000068a 000006ae     T...f...........
 8032d4c:	000006d2 000006f6 0000071a 0000072c     ............,...
 8032d5c:	0000073e 00000750 00000774 00000798     >...P...t.......
 8032d6c:	000007bc 000007e0 00000804 00000816     ................
 8032d7c:	00000828 0000083a 0000084c 0000085e     (...:...L...^...
 8032d8c:	00000870 00000894 000008b8 000008ca     p...............
 8032d9c:	000008ee 00000912 00000936 0000095a     ........6...Z...
 8032dac:	0000097e 000009a2 000009c6 000009ea     ~...............
 8032dbc:	000009fc 00000a0e 00000a20 00000a32     ........ ...2...
 8032dcc:	00000a44 00000a56 00000a7a 00000a9e     D...V...z.......
 8032ddc:	00000ac2 00000ae6 00000af8 00000b1c     ................

08032dec <c_FontSansSerif26>:
 8032dec:	00000000 00000028 08032e04 0803562c     ....(.......,V..
 8032dfc:	0803572c 08035788                       ,W...W..

08032e04 <_ZL35Microsoft_Sans_Serif__26_char_table>:
	...
 8032e68:	00f80700 1f00fc0f 3f3f00fe 000f3c00     ..........??.<..
 8032e78:	78800f7c 07788007 80077880 70800778     |..x..x..x..x..p
 8032e88:	03708003 80037080 70800370 07788003     ..p..p..p..p..x.
 8032e98:	80077880 78800778 0f7c8007 000f3c80     .x..x..x..|..<..
 8032ea8:	1f003f3f fc0f00fe 00f80700 00000000     ??..............
	...
 8032ed8:	c0010000 c003c001 c01fc007 c07fc07f     ................
 8032ee8:	c001c07d c001c001 c001c001 c001c001     }...............
 8032ef8:	c001c001 c001c001 c001c001 c001c001     ................
 8032f08:	c001c001 00000000 00000000 00000000     ................
	...
 8032f30:	00fe0300 1f00ff0f 9f1f80ff c0073ec0     .............>..
 8032f40:	38c0033c 0100c001 c00300c0 00c00300     <..8............
 8032f50:	0700c003 000f0080 00003e00 f800007c     .........>..|...
 8032f60:	00f00300 0f00e007 001f0080 00003e00     .............>..
 8032f70:	7f00003c ff7fc0ff c0ff7fc0 00000000     <...............
	...
 8032fa8:	00f80700 3f00fc1f 3f3e00fe 000f7800     .......?..>?.x..
 8032fb8:	70000778 0f000007 000f0000 01007e00     x..p.........~..
 8032fc8:	fc0100fc 00fe0100 00003f00 0700800f     .........?......
 8032fd8:	80030080 70800300 07788007 800f7c80     .......p..x..|..
 8032fe8:	3f003f3f fe1f00ff 00f80700 00000000     ??.?............
	...
 8033020:	001c0000 00003c00 7c00007c 00fc0000     .....<..|..|....
 8033030:	0100fc01 9c0300dc 009c0700 0e001c07     ................
 8033040:	1c1e001c 001c1c00 78001c38 1c70001c     ........8..x..p.
 8033050:	80ff7f00 7f80ff7f 1c0080ff 001c0000     ................
 8033060:	00001c00 1c00001c 001c0000 00000000     ................
	...
 8033098:	00ff1f00 3f00ff3f 003c00ff 00003c00     ....?..?..<..<..
 80330a8:	3c00003c 003c0000 00f83f00 3f00fe3f     <..<..<..?..?..?
 80330b8:	3f3f00ff 800f3c00 00800700 03008007     ..??.<..........
 80330c8:	80030080 70800300 07788007 800f7c80     .......p..x..|..
 80330d8:	3f003f3f fc1f00fe 00f80700 00000000     ??.?............
	...
 8033110:	00fc0300 1f00fe0f 9f1f00ff 80073e80     .............>..
 8033120:	7c80073c 00780000 00007800 7f00f87b     <..|..x..x..{...
 8033130:	ff7f00fe 003f7f00 78800f7c 07708007     ......?.|..x..p.
 8033140:	80037880 78800378 077c8007 800f3c80     .x..x..x..|..<..
 8033150:	1f003f3f fe0f00ff 00f80700 00000000     ??..............
	...
 8033188:	80ff7f00 7f80ff7f 070080ff 000f0080     ................
 8033198:	00000f00 1e00000f 001e0000 00003c00     .............<..
 80331a8:	7800003c 00780000 00007800 f00000f0     <..x..x..x......
 80331b8:	00e00100 0300e001 c00300c0 00c00300     ................
 80331c8:	07008007 000f0080 00000f00 00000000     ................
	...
 8033200:	00f80700 1f00fc0f 3f3f00fe 000f3c00     ..........??.<..
 8033210:	38000f3c 0f3c0007 000f3c00 1f001f3e     <..8..<..<..>...
 8033220:	fc0f00fe 00f80700 3f00fe1f 1f7e00ff     ...........?..~.
 8033230:	80077880 70800778 07788003 80077880     .x..x..p..x..x..
 8033240:	3f803f7f fe1f00ff 00f80700 00000000     .?.?............
	...
 8033278:	00f80700 3f00fc1f 3f3f00fe 000f7c00     .......?..??.|..
 8033288:	78800f78 07708007 80077080 78800378     x..x..p..p..x..x
 8033298:	0f7c8007 803f3f80 1f80ff3f f70780ff     ..|..??.?.......
 80332a8:	80070080 00800700 0f78800f 001f7800     ..........x..x..
 80332b8:	3f007e7e fc1f00fe 00f00f00 00000000     ~~.?............
	...
 80332f8:	00003e00 00007e00 00007e00 00007f00     .>...~...~......
 8033308:	0000f700 0080e700 0080e700 0080e301     ................
 8033318:	00c0c301 00c0c103 00e0c103 00e08103     ................
 8033328:	00e08007 00f08007 00f00007 00f8ff0f     ................
 8033338:	00f8ff0f 00f8ff1f 003c001e 003c001e     ..........<...<.
 8033348:	001e003c 001e003c 001e0038 000f0078     <...<...8...x...
 8033358:	000f0078 00000000 00000000 00000000     x...............
	...
 8033390:	00fe7f00 7f00ff7f 1f7080ff c00370c0     ..........p..p..
 80333a0:	70c00370 0370c001 c00370c0 7f801f70     p..p..p..p..p...
 80333b0:	ff7f00ff 80ff7f00 70c00f70 0170e003     ........p..p..p.
 80333c0:	e00070e0 70e00070 0170e000 e00370e0     .p..p..p..p..p..
 80333d0:	7fc00f70 ff7fc0ff 00fe7f80 00000000     p...............
	...
 8033408:	80ff0100 0fe0ff03 e31ff0ff f8001ff8     ................
 8033418:	3c3c003e 00783c00 0000781c 78000078     >.<<.<x..x..x..x
 8033428:	00700000 00007000 78000070 00780000     ..p..p..p..x..x.
 8033438:	00007800 3c1c0078 003e3c00 f8001f3c     .x..x..<.<>.<...
 8033448:	0ff8e31f ff03f0ff 80ff01e0 00000000     ................
	...
 8033480:	00fc7f00 7f80ff7f 1f70c0ff f00370e0     ..........p..p..
 8033490:	70f00070 0070f000 78007078 70780070     p..p..p.xp.xp.xp
 80334a0:	00703800 38007038 70380070 00707800     .8p.8p.8p.8p.xp.
 80334b0:	78007078 70780070 0170f000 f00370f0     xp.xp.xp..p..p..
 80334c0:	7fe01f70 ff7fc0ff 00fc7f80 00000000     p...............
	...
 80334f8:	c0ff7f00 7fc0ff7f 0070c0ff 00007000     ..........p..p..
 8033508:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 8033518:	ff7f0000 80ff7f80 7080ff7f 00700000     ...........p..p.
 8033528:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 8033538:	7f000070 ff7fe0ff e0ff7fe0 00000000     p...............
	...
 8033570:	80ff7f00 7f80ff7f 007080ff 00007000     ..........p..p..
 8033580:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 8033590:	fe7f0000 00fe7f00 7000fe7f 00700000     ...........p..p.
 80335a0:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 80335b0:	70000070 00700000 00007000 00000000     p..p..p..p......
	...
 80335f0:	00c0ff00 00f0ff03 00fcff07 00fee10f     ................
 8033600:	003e801f 001f003e 000f003c 0007007c     ..>.>...<...|...
 8033610:	00000078 00000078 00000078 00000070     x...x...x...p...
 8033620:	00ff0370 00ff0370 00ff0378 00070078     p...p...x...x...
 8033630:	00070078 00070078 000f003c 000f003e     x...x...<...>...
 8033640:	003f001f 00ffe10f 00ffff07 00f7ff03     ..?.............
 8033650:	00c7ff00 00000000 00000000 00000000     ................
	...
 8033688:	70007000 70700070 00707000 70007070     .p.pp.pp.pp.pp.p
 8033698:	70700070 00707000 70007070 7f700070     p.pp.pp.pp.pp.p.
 80336a8:	ff7ff0ff f0ff7ff0 70700070 00707000     ........p.pp.pp.
 80336b8:	70007070 70700070 00707000 70007070     pp.pp.pp.pp.pp.p
 80336c8:	70700070 00707000 70007070 00000000     p.pp.pp.pp.p....
	...
 80336f0:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 8033700:	70707070 70707070 70707070 00000000     pppppppppppp....
	...
 8033720:	0e000000 0e000e00 0e000e00 0e000e00     ................
 8033730:	0e000e00 0e000e00 0e000e00 0e000e00     ................
 8033740:	0e000e00 0e700e70 1e781e78 fc3f7e7e     ....p.p.x.x.~~?.
 8033750:	f00ff81f 00000000 00000000 00000000     ................
	...
 8033778:	f8007000 70e00170 0770c003 000f7080     .p..p..p..p..p..
 8033788:	70001e70 7870003c 00f07000 7300e071     p..p<.px.p..q..s
 8033798:	f07700e0 00f07f00 7c00787e 3e78003c     ..w.....~x.|<.x>
 80337a8:	001e7800 70000f70 0770800f c00370c0     .x..p..p..p..p..
 80337b8:	70e00170 0070f001 780070f0 00000000     p..p..p..p.x....
	...
 80337f0:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 8033800:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 8033810:	00700000 00007000 70000070 00700000     ..p..p..p..p..p.
 8033820:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 8033830:	7f000070 ff7f00ff 00ff7f00 00000000     p...............
	...
 8033870:	001f007c 003f007e 003f007e 003f007e     |...~.?.~.?.~.?.
 8033880:	007f007f 007f007f 007f007f 00f78077     ............w...
 8033890:	00f78077 00f78077 00e7c173 00e7c173     w...w...s...s...
 80338a0:	00e7c173 00c7e371 00c7e371 00c7e371     s...q...q...q...
 80338b0:	0087f770 0087f770 0087f770 00077f70     p...p...p...p...
 80338c0:	00077f70 00077f70 00073e70 00073e70     p...p...p>..p>..
 80338d0:	00073e70 00000000 00000000 00000000     p>..............
	...
 8033908:	70007800 7c70007c 007e7000 70007f70     .x.p|.p|.p~.p..p
 8033918:	7f70007f c0777080 70c07370 7170e073     ..p..pw.ps.ps.pq
 8033928:	f07070e0 70f87070 70707870 3e70703c     .pp.pp.ppxpp<pp>
 8033938:	701e7070 70701f70 0770f00f f00770f0     pp.pp.pp..p..p..
 8033948:	70f00370 0170f001 f00070f0 00000000     p..p..p..p......
	...
 8033988:	0080ff00 00e0ff03 00f0ff07 00f8e30f     ................
 8033998:	007c001f 003e003e 001e003c 000f0078     ..|.>.>.<...x...
 80339a8:	000f0078 000f0078 000f0078 00070070     x...x...x...p...
 80339b8:	00070070 00070070 000f0078 000f0078     p...p...x...x...
 80339c8:	000f0078 000f0078 001e003c 003e003e     x...x...<...>.>.
 80339d8:	007c001f 00f8e30f 00f0ff07 00e0ff03     ..|.............
 80339e8:	0080ff00 00000000 00000000 00000000     ................
	...
 8033a20:	00ff7f00 7f80ff7f 0f70c0ff e00170e0     ..........p..p..
 8033a30:	70e00170 0070e000 e00070e0 70e00170     p..p..p..p..p..p
 8033a40:	0f70e003 c0ff7fc0 7f80ff7f 007000fe     ..p...........p.
 8033a50:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 8033a60:	70000070 00700000 00007000 00000000     p..p..p..p......
	...
 8033aa0:	0080ff00 00e0ff03 00f0ff07 00f8e30f     ................
 8033ab0:	007c001f 003e003e 001e003c 000f0078     ..|.>.>.<...x...
 8033ac0:	000f0078 000f0078 000f0078 00070070     x...x...x...p...
 8033ad0:	00070070 00070070 000f0078 000f0078     p...p...x...x...
 8033ae0:	000f0078 001f0178 00de033c 00fe073e     x...x...<...>...
 8033af0:	00fc031f 00f8e30f 00fcff07 00feff03     ................
 8033b00:	009fff00 000f0000 00060000 00000000     ................
	...
 8033b38:	80ff7f00 7fc0ff7f 0770e0ff f00070f0     ..........p..p..
 8033b48:	70f00070 00707000 f0007070 70f00070     p..p.pp.pp..p..p
 8033b58:	ff7fe007 c0ff7fe0 7000ff7f 0770801f     ...........p..p.
 8033b68:	c00370c0 70e00170 0070e001 f00070e0     .p..p..p..p..p..
 8033b78:	70f00070 00707800 78007078 00000000     p..p.xp.xp.x....
	...
 8033bb0:	00fe0300 1f00ff0f 8f3f80ff e0033cc0     ..........?..<..
 8033bc0:	38e0013c 003ce001 00003ee0 1f00803f     <..8..<..>..?...
 8033bd0:	ff0f00f8 c0ff0300 00e07f00 0100f007     ................
 8033be0:	f00000f0 78700070 00787000 f0017ef0     ....p.px.px..~..
 8033bf0:	1fe0873f ff0fe0ff 00ff03c0 00000000     ?...............
	...
 8033c28:	f0ff7f00 7ff0ff7f 7000f0ff 00700000     ...........p..p.
 8033c38:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 8033c48:	70000070 00700000 00007000 70000070     p..p..p..p..p..p
 8033c58:	00700000 00007000 70000070 00700000     ..p..p..p..p..p.
 8033c68:	00007000 70000070 00700000 00000000     .p..p..p..p.....
	...
 8033ca0:	70007000 70700070 00707000 70007070     .p.pp.pp.pp.pp.p
 8033cb0:	70700070 00707000 70007070 70700070     p.pp.pp.pp.pp.pp
 8033cc0:	00707000 70007070 70700070 00707000     .pp.pp.pp.pp.pp.
 8033cd0:	f0007870 78f00078 0078f000 f0017cf0     px..x..x..x..|..
 8033ce0:	1fe08f3f ff0fc0ff 00ff0780 00000000     ?...............
	...
 8033d20:	000f0078 000f0078 001e003c 001e003c     x...x...<...<...
 8033d30:	001e003c 003c001e 003c001e 0038000e     <.....<...<...8.
 8033d40:	0078000f 0078000f 00700007 00f08007     ..x...x...p.....
 8033d50:	00f08007 00e0c103 00e0c103 00c0c101     ................
 8033d60:	00c0e301 00c0e301 0080e300 0080f700     ................
 8033d70:	00007700 00007f00 00007f00 00003e00     .w...........>..
 8033d80:	00003e00 00000000 00000000 00000000     .>..............
	...
 8033dc4:	78000000 c003e000 03f00178 f00178c0     ...x....x....x..
 8033dd4:	0138c003 3c8003f0 8007f803 07b8033c     ..8....<....<...
 8033de4:	b8033c80 071c8007 1e0007bc 000f1c07     .<..............
 8033df4:	0f1c071e 1e0f0e00 0e0e000e 0f000e0e     ................
 8033e04:	001e0e0e 1e0f1e0f 071c0700 1c07001c     ................
 8033e14:	07001c07 003c079c b803b803 03b80300     ......<.........
 8033e24:	f80300b8 0300f803 00f803f8 f001f001     ................
 8033e34:	01f00100 f00100f0 0000f001 00e000e0     ................
	...
 8033e88:	001e003c 003c001e 007c001f 00f8800f     <.....<...|.....
 8033e98:	00f08007 00e0c103 00e0e303 00c0e301     ................
 8033ea8:	0080f700 00007f00 00007f00 00003e00     .............>..
 8033eb8:	00003e00 00007f00 0080ff00 0080f700     .>..............
 8033ec8:	00c0e301 00e0c103 00f0c107 00f08007     ................
 8033ed8:	0078000f 007c001f 003e003e 001e003c     ..x...|.>.>.<...
 8033ee8:	000f0078 00000000 00000000 00000000     x...............
	...
 8033f28:	000f0078 001e003c 003e003e 003c001e     x...<...>.>...<.
 8033f38:	0078000f 00f8800f 00f08007 00e0c103     ..x.............
 8033f48:	00e0e303 00c0e301 0080f700 0080ff00     ................
 8033f58:	00007f00 00003e00 00001c00 00001c00     .....>..........
 8033f68:	00001c00 00001c00 00001c00 00001c00     ................
 8033f78:	00001c00 00001c00 00001c00 00001c00     ................
 8033f88:	00001c00 00000000 00000000 00000000     ................
	...
 8033fc0:	c0ff3f00 3fc0ff3f 0300c0ff c00700c0     .?..?..?........
 8033fd0:	00800f00 1e00000f 003e0000 00007c00     ..........>..|..
 8033fe0:	f8000078 00f00100 0300e003 c00700c0     x...............
 8033ff0:	00800f00 1e00000f 003e0000 00007c00     ..........>..|..
 8034000:	7f000078 ff7fc0ff c0ff7fc0 00000000     x...............
	...
 8034048:	07000000 fe1f00f8 00ff1f00 3c001f3f     ............?..<
 8034058:	0738000f 00070000 1f00ff07 ff3f00ff     ..8...........?.
 8034068:	00877f00 7800077c 0f700007 001f7800     ....|..x..p..x..
 8034078:	7f007f7c ff3f00ff 00f71f00 00000000     |.....?.........
	...
 80340b0:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 80340c0:	73000070 fc7f00f8 00fe7f00 7c003e7f     p..s.........>.|
 80340d0:	0f78001f 000f7000 70000f70 07700007     ..x..p..p..p..p.
 80340e0:	00077000 70000f70 0f70000f 001e7800     .p..p..p..p..x..
 80340f0:	7f003e7e f87f00fc 00f07f00 00000000     ~>..............
	...
 8034138:	07000000 fe0f00fc 00ff1f00 3c801f3f     ............?..<
 8034148:	03788007 00007880 70000078 00700000     ..x..x..x..p..p.
 8034158:	00007000 78000078 03780000 80073c80     .p..x..x..x..<..
 8034168:	1f801f3f fe0f00ff 00fc0700 00000000     ?...............
	...
 80341a0:	00070000 00000700 07000007 00070000     ................
 80341b0:	07000700 ff0f00f7 00ff1f00 3c003f3e     ............>?.<
 80341c0:	0778000f 00077800 70000778 07700007     ..x..x..x..p..p.
 80341d0:	00077000 78000778 0f780007 001f7c00     .p..x..x..x..|..
 80341e0:	3f007f3e ff1f00ff 00f70f00 00000000     >..?............
	...
 8034228:	07000000 fc0f00f8 00fe1f00 3c003f3f     ............??.<
 8034238:	0778000f 80077880 7f800778 ff7f80ff     ..x..x..x.......
 8034248:	80ff7f80 78000070 03780000 80073c80     ....p..x..x..<..
 8034258:	1f801f3f fe0f00ff 00fc0700 00000000     ?...............
	...
 8034288:	e0070000 e00fe00f 000e000f c07f000e     ................
 8034298:	c07fc07f 000e000e 000e000e 000e000e     ................
 80342a8:	000e000e 000e000e 000e000e 000e000e     ................
 80342b8:	000e000e 00000000 00000000 00000000     ................
	...
 80342f0:	07000000 ff0f00ff 00ff1f00 3c003f3e     ............>?.<
 8034300:	0778000f 00077800 70000778 07700007     ..x..x..x..p..p.
 8034310:	00077000 78000778 0f780007 001f7c00     .p..x..x..x..|..
 8034320:	3f007f3e ff1f00ff 00e70f00 00000f00     >..?............
 8034330:	0f3c000f 003e3e00 1f00fe3f f80f00fc     ..<..>>.?.......
	...
 8034350:	00700000 00700070 00700070 f8730070     ..p.p.p.p.p.p.s.
 8034360:	fe7ffc7f 1e7c3e7f 0e701e78 0e700e70     .....>|.x.p.p.p.
 8034370:	0e700e70 0e700e70 0e700e70 0e700e70     p.p.p.p.p.p.p.p.
 8034380:	0e700e70 00000000 00000000 00000000     p.p.............
	...
 8034398:	70000000 00007070 70707000 70707070     ...ppp...ppppppp
 80343a8:	70707070 70707070 70707070 00000000     pppppppppppp....
	...
 80343c8:	00070000 00070007 00000000 00070000     ................
 80343d8:	00070007 00070007 00070007 00070007     ................
 80343e8:	00070007 00070007 00070007 00070007     ................
 80343f8:	00070007 00070007 004f000f 007e007f     ..........O...~.
 8034408:	0000007c 00000000 00000000 00000000     |...............
	...
 8034420:	00007000 70000070 00700000 00007000     .p..p..p..p..p..
 8034430:	70000070 7c70003e 00f87000 7100f071     p..p>.p|.p..q..q
 8034440:	c07300e0 00807700 7f00807f c07f00c0     ..s..w..........
 8034450:	00e07900 7000f079 787000f0 007c7000     .y..y..p..px.p|.
 8034460:	70003c70 1f70001e 000f7000 00000000     p<.p..p..p......
	...
 8034488:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 8034498:	70707070 70707070 70707070 00000000     pppppppppppp....
	...
 80344e0:	007ff873 80fffc7f c0ffff7f c0e73f7f     s............?..
 80344f0:	c0831f7c c0031f78 c0010e70 c0010e70     |...x...p...p...
 8034500:	c0010e70 c0010e70 c0010e70 c0010e70     p...p...p...p...
 8034510:	c0010e70 c0010e70 c0010e70 c0010e70     p...p...p...p...
 8034520:	c0010e70 c0010e70 c0010e70 00000000     p...p...p.......
	...
 8034564:	f8730000 fe7ffc7f 1e7c3e7f 0e701e78     ..s......>|.x.p.
 8034574:	0e700e70 0e700e70 0e700e70 0e700e70     p.p.p.p.p.p.p.p.
 8034584:	0e700e70 0e700e70 00000000 00000000     p.p.p.p.........
	...
 80345c0:	07000000 fc0f00f8 00fe1f00 7c003f3f     ............??.|
 80345d0:	0778800f 80077880 70800778 03708003     ..x..x..x..p..p.
 80345e0:	80037080 78800778 07788007 800f7c80     .p..x..x..x..|..
 80345f0:	1f003f3f fc0f00fe 00f80700 00000000     ??..............
	...
 8034638:	77000000 fc7f00f8 00fe7f00 7c003e7f     ...w.........>.|
 8034648:	0f78001f 000f7000 70000f70 07700007     ..x..p..p..p..p.
 8034658:	00077000 70000f70 0f70000f 001e7800     .p..p..p..p..x..
 8034668:	7f003e7e f87f00fc 00f07700 70000070     ~>.......w..p..p
 8034678:	00700000 00007000 70000070 00700000     ..p..p..p..p..p.
	...
 80346b0:	07000000 ff0f00ff 00ff1f00 3c003f3e     ............>?.<
 80346c0:	0778000f 00077800 70000778 07700007     ..x..x..x..p..p.
 80346d0:	00077000 78000778 0f780007 001f7c00     .p..x..x..x..|..
 80346e0:	3f007f3e ff1f00ff 00e70f00 00000700     >..?............
 80346f0:	07000007 00070000 00000700 07000007     ................
	...
 803471c:	c0730000 c07fc07f 0078007e 00700078     ..s.....~.x.x.p.
 803472c:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 803473c:	00700070 00700070 00000000 00000000     p.p.p.p.........
	...
 8034778:	0f000000 fc3f00f8 00fe7f00 78003e7e     ......?.....~>.x
 8034788:	0078001e 00007c00 3f00c07f fe1f00f8     ..x..|.....?....
 8034798:	00ff0300 00003f00 0770000f 000f7800     .....?....p..x..
 80347a8:	3f003f7e fc1f00fe 00f80f00 00000000     ~?.?............
	...
 80347dc:	001c001c 001c001c 807f001c 807f807f     ................
 80347ec:	001c001c 001c001c 001c001c 001c001c     ................
 80347fc:	001c001c 001c001c 801f001e 800f801f     ................
	...
 8034834:	0e700000 0e700e70 0e700e70 0e700e70     ..p.p.p.p.p.p.p.
 8034844:	0e700e70 0e700e70 0e700e70 3e781e78     p.p.p.p.p.p.x.x>
 8034854:	fe7ffe7c ce1ffe3f 00000000 00000000     |...?...........
	...
 8034890:	78000000 0378c003 800338c0 3c80073c     ...x..x..8..<..<
 80348a0:	071c8007 000f1e00 0e000f1e 1e0f000e     ................
 80348b0:	001e0f00 07001c07 b80300bc 00f80300     ................
 80348c0:	0100f803 f00100f0 00f00100 00000000     ................
	...
 8034918:	80071e78 80071e78 80073f78 00073f38     x...x...x?..8?..
 8034928:	00073f38 000f3f3c 008f7f3c 008e7f1c     8?..<?..<.......
 8034938:	008e731c 009e731e 00def30e 00dcf30e     .s...s..........
 8034948:	00dce10e 00fce10f 00f8e107 00f8e107     ................
 8034958:	00f8c007 00f8c007 00f0c003 00000000     ................
	...
 80349a8:	3c000000 0f3e8007 000f1e80 07001e0f     ...<..>.........
 80349b8:	bc0700bc 00f80300 0100f001 f00100f0     ................
 80349c8:	00f80300 0700f803 1e0f00bc 001e0f00     ................
 80349d8:	3c000f1e 077c8007 c00378c0 00000000     ...<..|..x......
	...
 8034a20:	78000000 0378c003 800338c0 3c80073c     ...x..x..8..<..<
 8034a30:	071c8007 000f1e00 0e000f1e 1e0f000e     ................
 8034a40:	001e0f00 07001c07 b80300bc 00f80300     ................
 8034a50:	0100f803 f00100f0 00f00100 0100e001     ................
 8034a60:	c00300e0 00c02f00 3f00803f 003e0000     ...../..?..?..>.
	...
 8034a98:	3f000000 ff3f00ff 00ff3f00 00001f00     ...?..?..?......
 8034aa8:	3c00001e 00780000 0100f800 e00300f0     ...<..x.........
 8034ab8:	00c00700 0f00800f 001e0000 00003c00     .............<..
 8034ac8:	7f00007c ff7f80ff 80ff7f80 00000000     |...............
	...
 8034b08:	70707070 00000000 00000000 00000000     pppp............
	...
 8034b30:	70707070 60707030 00000000 00000000     pppp0pp`........
	...
 8034b48:	70700000 00007070 00000000 00000000     ..pppp..........
 8034b58:	70707070 60707030 00000000 00000000     pppp0pp`........
	...
 8034b70:	70700000 00007070 00000000 00000000     ..pppp..........
 8034b80:	70707070 00000000 00000000 00000000     pppp............
	...
 8034bb4:	e07f0000 e07fe07f 00000000 00000000     ................
	...
 8034c48:	7ff0ff7f 0000f0ff 00000000 00000000     ................
	...
 8034c74:	00e00000 0000e000 e00000e0 00e00000     ................
 8034c84:	0000e000 ff7f00e0 c0ff7fc0 00c0ff7f     ................
 8034c94:	e00000e0 00e00000 0000e000 e00000e0     ................
 8034ca4:	00e00000 00000000 00000000 00000000     ................
	...
 8034cd8:	00070000 00070007 f07f7077 800ff07f     ........wp......
 8034ce8:	c01dc01f c018e03d 00000000 00000000     ....=...........
	...
 8034d30:	00cf0100 0300cf03 cf0300cf 00ce0300     ................
 8034d40:	07009e03 ff3f009e 80ff3f80 0f80ff3f     ......?..?..?...
 8034d50:	3c0f003c 003c0f00 0f003c0f 781e0038     <..<..<..<..8..x
 8034d60:	00ff7f00 7f00ff7f 781e00ff 00f01c00     ...........x....
 8034d70:	3c00f03c f03c00f0 00f03c00 00000000     <..<..<..<......
	...
 8034da8:	001c0700 07001c07 1c07001c 00000000     ................
 8034db8:	07000000 fc0f00f8 00fe1f00 7c003f3f     ............??.|
 8034dc8:	0778800f 80077880 70800778 03708003     ..x..x..x..p..p.
 8034dd8:	80037080 78800778 07788007 800f7c80     .p..x..x..x..|..
 8034de8:	1f003f3f fc0f00fe 00f80700 00000000     ??..............
	...
 8034e20:	001c0700 07001c07 1c07001c 00000000     ................
 8034e30:	07000000 fe1f00f8 00ff1f00 3c001f3f     ............?..<
 8034e40:	0738000f 00070000 1f00ff07 ff3f00ff     ..8...........?.
 8034e50:	00877f00 7800077c 0f700007 001f7800     ....|..x..p..x..
 8034e60:	7f007f7c ff3f00ff 00f71f00 00000000     |.....?.........
	...
 8034e90:	380e0000 380e380e 0000380e 0e700000     ...8.8.8.8....p.
 8034ea0:	0e700e70 0e700e70 0e700e70 0e700e70     p.p.p.p.p.p.p.p.
 8034eb0:	0e700e70 0e700e70 3e781e78 fe7ffe7c     p.p.p.p.x.x>|...
 8034ec0:	ce1ffe3f 00000000 00000000 00000000     ?...............
	...
 8034ed8:	0080e300 0080e300 0080e300 0080e300     ................
	...
 8034ef0:	0080ff00 00e0ff03 00f0ff07 00f8e30f     ................
 8034f00:	007c001f 003e003e 001e003c 000f0078     ..|.>.>.<...x...
 8034f10:	000f0078 000f0078 000f0078 00070070     x...x...x...p...
 8034f20:	00070070 00070070 000f0078 000f0078     p...p...x...x...
 8034f30:	000f0078 000f0078 001e003c 003e003e     x...x...<...>.>.
 8034f40:	007c001f 00f8e30f 00f0ff07 00e0ff03     ..|.............
 8034f50:	0080ff00 00000000 00000000 00000000     ................
	...
 8034f78:	0080e300 0080e300 0080e300 0080e300     ................
	...
 8034f90:	00003e00 00007e00 00007e00 00007f00     .>...~...~......
 8034fa0:	0000f700 0080e700 0080e700 0080e301     ................
 8034fb0:	00c0c301 00c0c103 00e0c103 00e08103     ................
 8034fc0:	00e08007 00f08007 00f00007 00f8ff0f     ................
 8034fd0:	00f8ff0f 00f8ff1f 003c001e 003c001e     ..........<...<.
 8034fe0:	001e003c 001e003c 001e0038 000f0078     <...<...8...x...
 8034ff0:	000f0078 00000000 00000000 00000000     x...............
	...
 8035014:	03000000 8e03008e 008e0300 00008e03     ................
 8035024:	00000000 70007000 70700070 00707000     .....p.pp.pp.pp.
 8035034:	70007070 70700070 00707000 70007070     pp.pp.pp.pp.pp.p
 8035044:	70700070 00707000 70007070 70700070     p.pp.pp.pp.pp.pp
 8035054:	00707000 f0007870 78f00078 0078f000     .pp.px..x..x..x.
 8035064:	f0017cf0 1fe08f3f ff0fc0ff 00ff0780     .|..?...........
	...
 80350a0:	00f80700 3f00fc1f 3f3e00fe 000f7c00     .......?..>?.|..
 80350b0:	78000f78 07000007 000f0000 00001f00     x..x............
 80350c0:	7c00003e 00f80000 0100f001 e00100e0     >..|............
 80350d0:	00c00100 0000c001 00000000 00000000     ................
 80350e0:	0100c001 c00100c0 00c00100 00000000     ................
	...
 8035108:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 8035118:	70707070 00000070 70707070 00000000     ppppp...pppp....
	...
 8035138:	001f0000 c07b803f c060c071 c07bc071     ....?.{.q.`.q.{.
 8035148:	001f803f 00000000 00000000 00000000     ?...............
	...
 8035188:	c0030000 e007c003 f00ff00f 781e781e     .............x.x
 8035198:	3c3c3c3c 1e781e78 00000000 00000000     <<<<x.x.........
	...
 80351d8:	e0000000 e000e000 c001c001 8003c001     ................
 80351e8:	80038003 00070007 00060007 000e000e     ................
 80351f8:	001c000e 001c001c 00380038 00700038     ........8.8.8.p.
 8035208:	00700070 00000000 00000000 00000000     p.p.............
	...
 8035228:	80030000 00078007 000e000e 001c001e     ................
 8035238:	003c003c 00780038 00780078 00700078     <.<.8.x.x.x.x.p.
 8035248:	00700070 00780070 00780078 00380078     p.p.p.x.x.x.x.8.
 8035258:	003c003c 001e001c 000e000e 80070007     <.<.............
 8035268:	00008003 00000000 00000000 00000000     ................
 8035278:	00700000 00380078 001c001c 000e001e     ..p.x.8.........
 8035288:	000f000f 80070007 80078007 80038007     ................
 8035298:	80038003 80078003 80078007 00078007     ................
 80352a8:	000f000f 001e000e 001c001c 00780038     ............8.x.
 80352b8:	00000070 00000000 00000000 00000000     p...............
	...
 80352d0:	00f80300 0f00fc07 be0f00fe 001e0f00     ................
 80352e0:	0f000e0e 1e0f000e 00be0700 0300fc07     ................
 80352f0:	f00f00f8 00f01f00 3ce0f83f 3f78e07c     ........?..<|.x?
 8035300:	e01f78e0 78e01f70 0778e00f e0077cc0     .x..p..x..x..|..
 8035310:	3fe03f3e fe1ff0ff 60f807f0 00000000     >?.?.......`....
	...
 8035350:	000ec01f 001ee03f 001ce03d 0038f078     ....?...=...x.8.
 8035360:	0038f078 00707070 00f07070 00e07070     x.8.ppp.pp..pp..
 8035370:	00c0f178 00c0f178 0080e33d 0080e33f     x...x...=...?...
 8035380:	c01fc71f e03f0e00 e03d0e00 f0781c00     ......?...=...x.
 8035390:	f0781c00 70703800 70707800 70707000     ..x..8pp.xpp.ppp
 80353a0:	f078e000 f078e000 e03dc001 e03fc003     ..x...x...=...?.
 80353b0:	c01f8003 00000000 00000000 00000000     ................
	...
 80353e0:	0000c000 c00000c0 00f80700 1f00fe0f     ................
 80353f0:	ff3f00fe 00cf3c00 3800c73c c03800c0     ..?..<..<..8..8.
 8035400:	00c03c00 1f00c03e fc0f00e0 00fe0700     .<..>...........
 8035410:	0000ff01 c70080df 80c70080 7880c370     ............p..x
 8035420:	c77880c3 80c77c80 3f00ff3f fe1f00ff     ..x..|..?..?....
 8035430:	00f80700 0000c000 c00000c0 00000000     ................
	...
 8035470:	0000fe0f c0ff7f00 1fff0000 f00100e0     ................
 8035480:	0300f001 007800e0 3c008007 00000f00     ......x....<....
 8035490:	071e001e 1e009eff 008fff1f 8fff3f3c     ............<?..
 80354a0:	3f7e3c00 f878008f 7800070f 00070ff0     .<~?..x....x....
 80354b0:	070ff078 0fe07900 e0710007 71000f0e     x....y....q....q
 80354c0:	000f1ee0 0f1ec071 1ec07100 e079001f     ....q....q....y.
 80354d0:	79001e3e 003e7ce0 fcfef979 ffff7800     >..y.|>.y....x..
 80354e0:	7f3c00f8 3c00f0df 00c09f3f 0000001e     ..<....<?.......
 80354f0:	00000f00 c00f0000 07000000 000000e0     ................
 8035500:	c007ff01 ff7f0000 1f0000c0 000080ff     ................
	...
 8035518:	70000000 70707070 70707070 70707070     ...ppppppppppppp
 8035528:	70707070 70707070 70707070 70707070     pppppppppppppppp
 8035538:	00707070 00000000 00000000 00000000     ppp.............
	...
 803555c:	00030000 00000f00 ff00003f 00fc0300     ........?.......
 803556c:	7f00f01f 007e00c0 00007c00 7f00007e     ......~..|..~...
 803557c:	f01f00c0 00fc0300 0000ff00 0f00003f     ............?...
 803558c:	00030000 00000000 00000000 00000000     ................
	...
 80355d4:	00006000 7e000078 807f0000 00e01f00     .`..x..~........
 80355e4:	0100fc07 3f0000ff 001f0000 01003f00     .......?.....?..
 80355f4:	fc0700ff 00e01f00 7e00807f 00780000     ...........~..x.
 8035604:	00006000 00000000 00000000 00000000     .`..............
	...

0803562c <_ZL38Microsoft_Sans_Serif__26_mapping_table>:
	...
 803564c:	47004f00 00555657 45465453 523f4340     .O.GWVU.STFE@C?R
 803565c:	04030201 08070605 41420a09 4e5b005a     ..........BAZ.[N
 803566c:	0d0c0b58 11100f0e 15141312 19181716     X...............
 803567c:	1d1c1b1a 21201f1e 00242322 44510000     ...... !"#$...QD
 803568c:	27262500 2b2a2928 2f2e2d2c 33323130     .%&'()*+,-./0123
 803569c:	37363534 3b3a3938 003e3d3c 00000059     456789:;<=>.Y...
	...
 80356dc:	00000050 00000000 00000000 00000000     P...............
 80356ec:	00000000 0000004c 00000000 00000000     ....L...........
 80356fc:	00000000 004b0000 00000000 0000004d     ......K.....M...
 803570c:	00000000 00000049 00000000 00000000     ....I...........
 803571c:	00000000 00480000 00000000 0000004a     ......H.....J...

0803572c <_ZL36Microsoft_Sans_Serif__26_width_table>:
 803572c:	130b120b 12121212 19121212 14161714     ................
 803573c:	05151912 19111610 19141915 15151516     ................
 803574c:	19192319 12111113 110c1211 11090510     .#..............
 803575c:	12101b05 110b1111 1a13100a 05121313     ................
 803576c:	0c050505 120d1315 19101112 05111519     ................
 803577c:	0a0c100b 121d150a 11110521              ........!...

08035788 <_ZL37Microsoft_Sans_Serif__26_offset_table>:
 8035788:	00000000 00000050 000000c8 00000118     ....P...........
 8035798:	00000190 00000208 00000280 000002f8     ................
 80357a8:	00000370 000003e8 00000460 000004d8     p.......`.......
 80357b8:	00000578 000005f0 00000668 000006e0     x.......h.......
 80357c8:	00000758 000007d0 00000870 000008e8     X.......p.......
 80357d8:	00000910 00000960 000009d8 00000a50     ....`.......P...
 80357e8:	00000af0 00000b68 00000c08 00000c80     ....h...........
 80357f8:	00000d20 00000d98 00000e10 00000e88      ...............
 8035808:	00000f00 00000fa0 00001068 00001108     ........h.......
 8035818:	000011a8 00001220 00001298 00001310     .... ...........
 8035828:	00001388 00001400 00001478 000014c8     ........x.......
 8035838:	00001540 00001590 000015b8 00001608     @...............
 8035848:	00001680 000016a8 00001748 00001798     ........H.......
 8035858:	00001810 00001888 00001900 00001950     ............P...
 8035868:	000019c8 00001a18 00001a68 00001ae0     ........h.......
 8035878:	00001b80 00001bf8 00001c70 00001ce8     ........p.......
 8035888:	00001d10 00001d38 00001d60 00001d88     ....8...`.......
 8035898:	00001dd8 00001e50 00001ec8 00001f18     ....P...........
 80358a8:	00001f90 00002008 00002080 000020d0     ..... ... ... ..
 80358b8:	00002170 00002210 00002288 00002300     p!..."..."...#..
 80358c8:	00002328 00002378 000023c8 00002418     (#..x#...#...$..
 80358d8:	00002468 000024b8 00002530 000025d0     h$...$..0%...%..
 80358e8:	00002648 00002710 00002738 000027b0     H&...'..8'...'..

080358f8 <_ZTV12AManagedTask>:
	...
 8035900:	0802c589 08016125 0802c5ad 08015e09     ....%a.......^..
 8035910:	08015e49 0802c609 0802c6f9 0802c5d1     I^..............

08035920 <_ZTV12IFreeRTOSObj>:
	...
 8035928:	0802c6f9 0802c6f9 0802c6f9 00000000     ................

08035938 <_ZTV5CTask>:
	...
 8035940:	0802c589 08016125 0802c5ad 080160c1     ....%a.......`..
 8035950:	08016105 00000000                       .a......

08035958 <_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__>:
 8035958:	74726976 206c6175 64696f76 61544320     virtual void CTa
 8035968:	3a3a6b73 61747441 78286863 656e6547     sk::Attach(xGene
 8035978:	48636972 6c646e61 00002965 00000000     ricHandle)......

08035988 <_ZTV16CUSB_MassStorage>:
	...
 8035990:	0802c589 08016125 0802c5ad 080185c9     ....%a..........
 80359a0:	08018601 08018621 08018661 0802c5d1     ....!...a.......

080359b0 <sstbl.1840>:
 80359b0:	001f4000 000fa000 0007d000 0003e800     .@..............
 80359c0:	0001f400 0000fa00 00007d00 00003e80     .........}...>..
 80359d0:	00001f40 00000fa0 00000000              @...........

080359dc <cstbl.1841>:
 80359dc:	40008000 10002000 40000800 10002000     ...@. .....@. ..
 80359ec:	04000800 00000200                       ........

080359f4 <fatstr.1639>:
 80359f4:	00544146                                FAT.

080359f8 <_ZTV12CFileHandler>:
	...
 8035a00:	0802c589 08016125 0802c5ad 0801d06d     ....%a......m...
 8035a10:	0801d0a5 0801d0c5 0801d1d1 0802c5d1     ................

08035a20 <_ZTV24CLedHeartBeatSTM32F4Disc>:
	...
 8035a28:	0802c589 08016125 0802c5ad 0801dda1     ....%a..........
 8035a38:	0801ddd9 0801ddf9 0801de31 0802c5d1     ........1.......
 8035a48:	65727570 72697620 6c617574 74656d20     pure virtual met
 8035a58:	20646f68 6c6c6163 000a6465 6d726574     hod called..term
 8035a68:	74616e69 61632065 64656c6c 63657220     inate called rec
 8035a78:	69737275 796c6576 0000000a 6d726574     ursively....term
 8035a88:	74616e69 61632065 64656c6c 74666120     inate called aft
 8035a98:	74207265 776f7268 20676e69 69206e61     er throwing an i
 8035aa8:	6174736e 2065636e 2720666f 00000000     nstance of '....
 8035ab8:	00000a27 6d726574 74616e69 61632065     '...terminate ca
 8035ac8:	64656c6c 74697720 74756f68 206e6120     lled without an 
 8035ad8:	69746361 65206576 70656378 6e6f6974     active exception
 8035ae8:	0000000a 68772020 29287461 0020203a     ....  what():  .

08035af8 <_ZTVSt9exception>:
 8035af8:	00000000 08035b18 0802cce9 0802cd2d     .....[......-...
 8035b08:	0802cd01 00000000                       ........

08035b10 <_ZTIN10__cxxabiv115__forced_unwindE>:
 8035b10:	08035d98 08035bb0                       .]...[..

08035b18 <_ZTISt9exception>:
 8035b18:	08035d98 08035ba0                       .]...[..

08035b20 <_ZTSSt13bad_exception>:
 8035b20:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
 8035b30:	0000006e 3a647473 6378653a 69747065     n...std::excepti
 8035b40:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
 8035b50:	69747065 00006e6f                       eption..

08035b58 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
 8035b58:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 8035b68:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
 8035b78:	00456e6f                                onE.

08035b7c <_ZTIN10__cxxabiv119__foreign_exceptionE>:
 8035b7c:	08035d98 08035b58 00000000              .]..X[......

08035b88 <_ZTVSt13bad_exception>:
 8035b88:	00000000 08035bd0 0802ccf5 0802cd19     .....[..........
 8035b98:	0802cd0d 00000000                       ........

08035ba0 <_ZTSSt9exception>:
 8035ba0:	65397453 70656378 6e6f6974 00000000     St9exception....

08035bb0 <_ZTSN10__cxxabiv115__forced_unwindE>:
 8035bb0:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
 8035bc0:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

08035bd0 <_ZTISt13bad_exception>:
 8035bd0:	08035cb0 08035b20 08035b18              .\.. [...[..

08035bdc <_ZTIPv>:
 8035bdc:	08035c88 08035bf4 00000000 08035bec     .\...[.......[..

08035bec <_ZTIv>:
 8035bec:	08035c38 08035bf8                       8\...[..

08035bf4 <_ZTSPv>:
 8035bf4:	00007650                                Pv..

08035bf8 <_ZTSv>:
 8035bf8:	00000076                                v...

08035bfc <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
 8035bfc:	08035cb0 08035c08 08035d0c              .\...\...]..

08035c08 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
 8035c08:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
 8035c18:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
 8035c28:	6e695f65 00456f66                       e_infoE.

08035c30 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
 8035c30:	00000000 08035bfc 0802d425 0802d439     .....[..%...9...
 8035c40:	0802d5f5 0802d5f9 0802d64d 0802d5fd     ........M.......

08035c50 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
 8035c50:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 8035c60:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
 8035c70:	00456f66                                foE.

08035c74 <_ZTIN10__cxxabiv119__pointer_type_infoE>:
 8035c74:	08035cb0 08035c50 08035df0              .\..P\...]..

08035c80 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
 8035c80:	00000000 08035c74 0802d459 0802d46d     ....t\..Y...m...
 8035c90:	0802d455 0802d5f9 0802d85d 0802d5fd     U.......].......
 8035ca0:	0802d489 00000000                       ........

08035ca8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 8035ca8:	00000000 08035cd8 0802d4d1 0802d4e5     .....\..........
 8035cb8:	0802d5f5 0802d5f9 0802d759 0802d68d     ........Y.......
 8035cc8:	0802d501 0802d529 0802d5b1 00000000     ....)...........

08035cd8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 8035cd8:	08035cb0 08035ce4 08035dc0              .\...\...]..

08035ce4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 8035ce4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 8035cf4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 8035d04:	456f666e 00000000                       nfoE....

08035d0c <_ZTISt9type_info>:
 8035d0c:	08035d98 08035d14                       .]...]..

08035d14 <_ZTSSt9type_info>:
 8035d14:	74397453 5f657079 6f666e69 00000000     St9type_info....
 8035d24:	00000000                                ....

08035d28 <_ZTVSt9type_info>:
 8035d28:	00000000 08035d0c 0802d5e9 0802d601     .....]..........
 8035d38:	0802d5f5 0802d5f9 0802d64d 0802d5fd     ........M.......

08035d48 <_ZTVSt10bad_typeid>:
 8035d48:	00000000 08035d60 0802d65d 0802d671     ....`]..]...q...
 8035d58:	0802d651 00000000                       Q.......

08035d60 <_ZTISt10bad_typeid>:
 8035d60:	08035cb0 08035d7c 08035b18 3a647473     .\..|]...[..std:
 8035d70:	6461623a 7079745f 00646965              :bad_typeid.

08035d7c <_ZTSSt10bad_typeid>:
 8035d7c:	30317453 5f646162 65707974 00006469     St10bad_typeid..
 8035d8c:	00000000                                ....

08035d90 <_ZTVN10__cxxabiv117__class_type_infoE>:
 8035d90:	00000000 08035dc0 0802d6ed 0802d701     .....]..........
 8035da0:	0802d5f5 0802d5f9 0802d759 0802d68d     ........Y.......
 8035db0:	0802d6d1 0802d71d 0802d6c5 00000000     ................

08035dc0 <_ZTIN10__cxxabiv117__class_type_infoE>:
 8035dc0:	08035cb0 08035dcc 08035d0c              .\...]...]..

08035dcc <_ZTSN10__cxxabiv117__class_type_infoE>:
 8035dcc:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 8035ddc:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 8035dec:	00000045                                E...

08035df0 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
 8035df0:	08035cb0 08035dfc 08035d0c              .\...]...]..

08035dfc <_ZTSN10__cxxabiv117__pbase_type_infoE>:
 8035dfc:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 8035e0c:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
 8035e1c:	00000045                                E...

08035e20 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
 8035e20:	00000000 08035df0 0802d82d 0802d841     .....]..-...A...
 8035e30:	0802d5f5 0802d5f9 0802d85d 0802d5fd     ........].......
 8035e40:	0802d819 00000000 7566202c 6974636e     ........, functi
 8035e50:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
 8035e60:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
 8035e70:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
 8035e80:	25732564 00000a73 00000043 00464e49     d%s%s...C...INF.
 8035e90:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
 8035ea0:	37363534 42413938 46454443 00000000     456789ABCDEF....
 8035eb0:	33323130 37363534 62613938 66656463     0123456789abcdef
 8035ec0:	00000000 6c756e28 0000296c 00000030     ....(null)..0...
 8035ed0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8035ee0:	49534f50 00000058 0000002e              POSIX.......

08035eec <_init>:
 8035eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035eee:	bf00      	nop
 8035ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035ef2:	bc08      	pop	{r3}
 8035ef4:	469e      	mov	lr, r3
 8035ef6:	4770      	bx	lr

08035ef8 <_fini>:
 8035ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035efa:	bf00      	nop
 8035efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035efe:	bc08      	pop	{r3}
 8035f00:	469e      	mov	lr, r3
 8035f02:	4770      	bx	lr
