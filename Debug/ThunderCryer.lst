
ThunderCryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028b58  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000144  08028ce0  08028ce0  00030ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000220  08028e24  08028e24  00030e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08029044  08029044  00031044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802904c  0802904c  0003104c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000094c  20000000  08029050  00038000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .jcr          00000004  2000094c  0802999c  0003894c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000ce4  20000950  080299a0  00038950  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  20001634  080299a0  00039634  2**0
                  ALLOC
 10 .ARM.attributes 00000033  00000000  00000000  00038950  2**0
                  CONTENTS, READONLY
 11 .debug_line   00025665  00000000  00000000  00038983  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000476df  00000000  00000000  0005dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ef9f  00000000  00000000  000a56c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002f88  00000000  00000000  000b4668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003148  00000000  00000000  000b75f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000011  00000000  00000000  000ba738  2**0
                  CONTENTS, READONLY
 17 .debug_loc    0001f5e9  00000000  00000000  000ba749  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 014df27e  00000000  00000000  000d9d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000fc93  00000000  00000000  015b8fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000949c  00000000  00000000  015c8c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000950 	.word	0x20000950
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08028cc4 	.word	0x08028cc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08028cc4 	.word	0x08028cc4
 80001d0:	20000954 	.word	0x20000954
 80001d4:	2000094c 	.word	0x2000094c
 80001d8:	00000000 	.word	0x00000000

080001dc <_mainCRTStartup>:
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <_mainCRTStartup+0x58>)
 80001de:	2b00      	cmp	r3, #0
 80001e0:	bf08      	it	eq
 80001e2:	4b13      	ldreq	r3, [pc, #76]	; (8000230 <_mainCRTStartup+0x54>)
 80001e4:	469d      	mov	sp, r3
 80001e6:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001ea:	f04f 0100 	mov.w	r1, #0
 80001ee:	468b      	mov	fp, r1
 80001f0:	460f      	mov	r7, r1
 80001f2:	4813      	ldr	r0, [pc, #76]	; (8000240 <_mainCRTStartup+0x64>)
 80001f4:	4a13      	ldr	r2, [pc, #76]	; (8000244 <_mainCRTStartup+0x68>)
 80001f6:	eba2 0200 	sub.w	r2, r2, r0
 80001fa:	f007 fb37 	bl	800786c <memset>
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <_mainCRTStartup+0x5c>)
 8000200:	2b00      	cmp	r3, #0
 8000202:	d000      	beq.n	8000206 <_mainCRTStartup+0x2a>
 8000204:	4798      	blx	r3
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <_mainCRTStartup+0x60>)
 8000208:	2b00      	cmp	r3, #0
 800020a:	d000      	beq.n	800020e <_mainCRTStartup+0x32>
 800020c:	4798      	blx	r3
 800020e:	f04f 0000 	mov.w	r0, #0
 8000212:	f04f 0100 	mov.w	r1, #0
 8000216:	4604      	mov	r4, r0
 8000218:	460d      	mov	r5, r1
 800021a:	480b      	ldr	r0, [pc, #44]	; (8000248 <_mainCRTStartup+0x6c>)
 800021c:	f006 fc90 	bl	8006b40 <atexit>
 8000220:	f006 ff24 	bl	800706c <__libc_init_array>
 8000224:	4620      	mov	r0, r4
 8000226:	4629      	mov	r1, r5
 8000228:	f023 ff34 	bl	8024094 <main>
 800022c:	f006 fc98 	bl	8006b60 <exit>
 8000230:	00080000 	.word	0x00080000
	...
 8000240:	20000950 	.word	0x20000950
 8000244:	20001634 	.word	0x20001634
 8000248:	08006b81 	.word	0x08006b81
 800024c:	08029050 	.word	0x08029050
 8000250:	20000000 	.word	0x20000000
 8000254:	2000094c 	.word	0x2000094c
 8000258:	20000950 	.word	0x20000950
 800025c:	20001634 	.word	0x20001634

08000260 <d_fill_name>:
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d005      	beq.n	800027e <d_fill_name+0x1e>
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d002      	beq.n	800027e <d_fill_name+0x1e>
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d102      	bne.n	8000284 <d_fill_name+0x24>
 800027e:	f04f 0300 	mov.w	r3, #0
 8000282:	e00b      	b.n	800029c <d_fill_name+0x3c>
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	f04f 0200 	mov.w	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	f04f 0301 	mov.w	r3, #1
 800029c:	4618      	mov	r0, r3
 800029e:	f107 0714 	add.w	r7, r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <d_fill_extended_operator>:
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	60f8      	str	r0, [r7, #12]
 80002b0:	60b9      	str	r1, [r7, #8]
 80002b2:	607a      	str	r2, [r7, #4]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d005      	beq.n	80002c6 <d_fill_extended_operator+0x1e>
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db02      	blt.n	80002c6 <d_fill_extended_operator+0x1e>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d102      	bne.n	80002cc <d_fill_extended_operator+0x24>
 80002c6:	f04f 0300 	mov.w	r3, #0
 80002ca:	e00b      	b.n	80002e4 <d_fill_extended_operator+0x3c>
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	f04f 022d 	mov.w	r2, #45	; 0x2d
 80002d2:	701a      	strb	r2, [r3, #0]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	f04f 0301 	mov.w	r3, #1
 80002e4:	4618      	mov	r0, r3
 80002e6:	f107 0714 	add.w	r7, r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <d_fill_ctor>:
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	460b      	mov	r3, r1
 80002fa:	607a      	str	r2, [r7, #4]
 80002fc:	72fb      	strb	r3, [r7, #11]
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d008      	beq.n	8000316 <d_fill_ctor+0x26>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d005      	beq.n	8000316 <d_fill_ctor+0x26>
 800030a:	7afb      	ldrb	r3, [r7, #11]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d002      	beq.n	8000316 <d_fill_ctor+0x26>
 8000310:	7afb      	ldrb	r3, [r7, #11]
 8000312:	2b03      	cmp	r3, #3
 8000314:	d902      	bls.n	800031c <d_fill_ctor+0x2c>
 8000316:	f04f 0300 	mov.w	r3, #0
 800031a:	e00b      	b.n	8000334 <d_fill_ctor+0x44>
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f04f 0207 	mov.w	r2, #7
 8000322:	701a      	strb	r2, [r3, #0]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	7afa      	ldrb	r2, [r7, #11]
 8000328:	711a      	strb	r2, [r3, #4]
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	f04f 0301 	mov.w	r3, #1
 8000334:	4618      	mov	r0, r3
 8000336:	f107 0714 	add.w	r7, r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <d_fill_dtor>:
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	460b      	mov	r3, r1
 800034a:	607a      	str	r2, [r7, #4]
 800034c:	72fb      	strb	r3, [r7, #11]
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <d_fill_dtor+0x26>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d005      	beq.n	8000366 <d_fill_dtor+0x26>
 800035a:	7afb      	ldrb	r3, [r7, #11]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <d_fill_dtor+0x26>
 8000360:	7afb      	ldrb	r3, [r7, #11]
 8000362:	2b03      	cmp	r3, #3
 8000364:	d902      	bls.n	800036c <d_fill_dtor+0x2c>
 8000366:	f04f 0300 	mov.w	r3, #0
 800036a:	e00b      	b.n	8000384 <d_fill_dtor+0x44>
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f04f 0208 	mov.w	r2, #8
 8000372:	701a      	strb	r2, [r3, #0]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	7afa      	ldrb	r2, [r7, #11]
 8000378:	711a      	strb	r2, [r3, #4]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	f04f 0301 	mov.w	r3, #1
 8000384:	4618      	mov	r0, r3
 8000386:	f107 0714 	add.w	r7, r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <d_make_empty>:
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	db02      	blt.n	80003aa <d_make_empty+0x1a>
 80003a4:	f04f 0300 	mov.w	r3, #0
 80003a8:	e013      	b.n	80003d2 <d_make_empty+0x42>
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	6919      	ldr	r1, [r3, #16]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	461a      	mov	r2, r3
 80003b4:	4613      	mov	r3, r2
 80003b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80003ba:	189b      	adds	r3, r3, r2
 80003bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80003c0:	18cb      	adds	r3, r1, r3
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f103 0201 	add.w	r2, r3, #1
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f107 0714 	add.w	r7, r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <d_make_comp>:
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	607a      	str	r2, [r7, #4]
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	460b      	mov	r3, r1
 80003ee:	72fb      	strb	r3, [r7, #11]
 80003f0:	7afb      	ldrb	r3, [r7, #11]
 80003f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80003f6:	2b41      	cmp	r3, #65	; 0x41
 80003f8:	f200 809d 	bhi.w	8000536 <d_make_comp+0x156>
 80003fc:	a201      	add	r2, pc, #4	; (adr r2, 8000404 <d_make_comp+0x24>)
 80003fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000402:	bf00      	nop
 8000404:	0800050d 	.word	0x0800050d
 8000408:	0800050d 	.word	0x0800050d
 800040c:	0800050d 	.word	0x0800050d
 8000410:	0800050d 	.word	0x0800050d
 8000414:	08000537 	.word	0x08000537
 8000418:	08000537 	.word	0x08000537
 800041c:	08000537 	.word	0x08000537
 8000420:	08000537 	.word	0x08000537
 8000424:	0800051f 	.word	0x0800051f
 8000428:	0800051f 	.word	0x0800051f
 800042c:	0800050d 	.word	0x0800050d
 8000430:	0800051f 	.word	0x0800051f
 8000434:	0800051f 	.word	0x0800051f
 8000438:	0800051f 	.word	0x0800051f
 800043c:	0800051f 	.word	0x0800051f
 8000440:	0800051f 	.word	0x0800051f
 8000444:	0800051f 	.word	0x0800051f
 8000448:	0800051f 	.word	0x0800051f
 800044c:	0800051f 	.word	0x0800051f
 8000450:	0800051f 	.word	0x0800051f
 8000454:	0800051f 	.word	0x0800051f
 8000458:	08000537 	.word	0x08000537
 800045c:	0800053d 	.word	0x0800053d
 8000460:	0800053d 	.word	0x0800053d
 8000464:	0800053d 	.word	0x0800053d
 8000468:	0800053d 	.word	0x0800053d
 800046c:	0800053d 	.word	0x0800053d
 8000470:	0800053d 	.word	0x0800053d
 8000474:	0800050d 	.word	0x0800050d
 8000478:	0800051f 	.word	0x0800051f
 800047c:	0800051f 	.word	0x0800051f
 8000480:	0800051f 	.word	0x0800051f
 8000484:	0800051f 	.word	0x0800051f
 8000488:	0800051f 	.word	0x0800051f
 800048c:	08000537 	.word	0x08000537
 8000490:	0800051f 	.word	0x0800051f
 8000494:	0800053d 	.word	0x0800053d
 8000498:	0800052b 	.word	0x0800052b
 800049c:	0800050d 	.word	0x0800050d
 80004a0:	08000537 	.word	0x08000537
 80004a4:	0800050d 	.word	0x0800050d
 80004a8:	0800053d 	.word	0x0800053d
 80004ac:	0800053d 	.word	0x0800053d
 80004b0:	08000537 	.word	0x08000537
 80004b4:	08000537 	.word	0x08000537
 80004b8:	0800051f 	.word	0x0800051f
 80004bc:	0800050d 	.word	0x0800050d
 80004c0:	0800050d 	.word	0x0800050d
 80004c4:	0800050d 	.word	0x0800050d
 80004c8:	0800050d 	.word	0x0800050d
 80004cc:	0800050d 	.word	0x0800050d
 80004d0:	0800050d 	.word	0x0800050d
 80004d4:	0800050d 	.word	0x0800050d
 80004d8:	0800050d 	.word	0x0800050d
 80004dc:	0800051f 	.word	0x0800051f
 80004e0:	0800050d 	.word	0x0800050d
 80004e4:	08000537 	.word	0x08000537
 80004e8:	08000537 	.word	0x08000537
 80004ec:	0800051f 	.word	0x0800051f
 80004f0:	0800051f 	.word	0x0800051f
 80004f4:	0800051f 	.word	0x0800051f
 80004f8:	08000537 	.word	0x08000537
 80004fc:	08000537 	.word	0x08000537
 8000500:	08000537 	.word	0x08000537
 8000504:	0800051f 	.word	0x0800051f
 8000508:	0800050d 	.word	0x0800050d
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d002      	beq.n	8000518 <d_make_comp+0x138>
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d113      	bne.n	8000540 <d_make_comp+0x160>
 8000518:	f04f 0300 	mov.w	r3, #0
 800051c:	e027      	b.n	800056e <d_make_comp+0x18e>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d10f      	bne.n	8000544 <d_make_comp+0x164>
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e021      	b.n	800056e <d_make_comp+0x18e>
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10b      	bne.n	8000548 <d_make_comp+0x168>
 8000530:	f04f 0300 	mov.w	r3, #0
 8000534:	e01b      	b.n	800056e <d_make_comp+0x18e>
 8000536:	f04f 0300 	mov.w	r3, #0
 800053a:	e018      	b.n	800056e <d_make_comp+0x18e>
 800053c:	bf00      	nop
 800053e:	e004      	b.n	800054a <d_make_comp+0x16a>
 8000540:	bf00      	nop
 8000542:	e002      	b.n	800054a <d_make_comp+0x16a>
 8000544:	bf00      	nop
 8000546:	e000      	b.n	800054a <d_make_comp+0x16a>
 8000548:	bf00      	nop
 800054a:	68f8      	ldr	r0, [r7, #12]
 800054c:	f7ff ff20 	bl	8000390 <d_make_empty>
 8000550:	4603      	mov	r3, r0
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d008      	beq.n	800056c <d_make_comp+0x18c>
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	7afa      	ldrb	r2, [r7, #11]
 800055e:	701a      	strb	r2, [r3, #0]
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	4618      	mov	r0, r3
 8000570:	f107 0718 	add.w	r7, r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <d_make_demangle_mangled_name>:
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b5f      	cmp	r3, #95	; 0x5f
 800058a:	d106      	bne.n	800059a <d_make_demangle_mangled_name+0x22>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	f103 0301 	add.w	r3, r3, #1
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b5a      	cmp	r3, #90	; 0x5a
 8000598:	d00a      	beq.n	80005b0 <d_make_demangle_mangled_name+0x38>
 800059a:	6838      	ldr	r0, [r7, #0]
 800059c:	f007 fe90 	bl	80082c0 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	6839      	ldr	r1, [r7, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	f000 f814 	bl	80005d4 <d_make_name>
 80005ac:	4603      	mov	r3, r0
 80005ae:	e00b      	b.n	80005c8 <d_make_demangle_mangled_name+0x50>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	f103 0202 	add.w	r2, r3, #2
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f04f 0100 	mov.w	r1, #0
 80005c2:	f000 fa4d 	bl	8000a60 <d_encoding>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f107 0708 	add.w	r7, r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop

080005d4 <d_make_name>:
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f7ff fed5 	bl	8000390 <d_make_empty>
 80005e6:	4603      	mov	r3, r0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	6978      	ldr	r0, [r7, #20]
 80005ec:	68b9      	ldr	r1, [r7, #8]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	f7ff fe36 	bl	8000260 <d_fill_name>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <d_make_name+0x2c>
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	e000      	b.n	8000602 <d_make_name+0x2e>
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	4618      	mov	r0, r3
 8000604:	f107 0718 	add.w	r7, r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <d_make_builtin_type>:
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <d_make_builtin_type+0x16>
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	e00f      	b.n	8000642 <d_make_builtin_type+0x36>
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff feb4 	bl	8000390 <d_make_empty>
 8000628:	4603      	mov	r3, r0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d006      	beq.n	8000640 <d_make_builtin_type+0x34>
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f04f 0223 	mov.w	r2, #35	; 0x23
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4618      	mov	r0, r3
 8000644:	f107 0710 	add.w	r7, r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <d_make_operator>:
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff fe9a 	bl	8000390 <d_make_empty>
 800065c:	4603      	mov	r3, r0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d006      	beq.n	8000674 <d_make_operator+0x28>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f04f 022c 	mov.w	r2, #44	; 0x2c
 800066c:	701a      	strb	r2, [r3, #0]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4618      	mov	r0, r3
 8000678:	f107 0710 	add.w	r7, r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <d_make_extended_operator>:
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f7ff fe7f 	bl	8000390 <d_make_empty>
 8000692:	4603      	mov	r3, r0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	6978      	ldr	r0, [r7, #20]
 8000698:	68b9      	ldr	r1, [r7, #8]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	f7ff fe04 	bl	80002a8 <d_fill_extended_operator>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <d_make_extended_operator+0x2c>
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e000      	b.n	80006ae <d_make_extended_operator+0x2e>
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f107 0718 	add.w	r7, r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <d_make_default_arg>:
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f7ff fe63 	bl	8000390 <d_make_empty>
 80006ca:	4603      	mov	r3, r0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d009      	beq.n	80006e8 <d_make_default_arg+0x30>
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f04f 023f 	mov.w	r2, #63	; 0x3f
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f107 0718 	add.w	r7, r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <d_make_ctor>:
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	460b      	mov	r3, r1
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	72fb      	strb	r3, [r7, #11]
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f7ff fe44 	bl	8000390 <d_make_empty>
 8000708:	4603      	mov	r3, r0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	7afb      	ldrb	r3, [r7, #11]
 800070e:	6978      	ldr	r0, [r7, #20]
 8000710:	4619      	mov	r1, r3
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	f7ff fdec 	bl	80002f0 <d_fill_ctor>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <d_make_ctor+0x30>
 800071e:	f04f 0300 	mov.w	r3, #0
 8000722:	e000      	b.n	8000726 <d_make_ctor+0x32>
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4618      	mov	r0, r3
 8000728:	f107 0718 	add.w	r7, r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <d_make_dtor>:
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	460b      	mov	r3, r1
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	72fb      	strb	r3, [r7, #11]
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f7ff fe26 	bl	8000390 <d_make_empty>
 8000744:	4603      	mov	r3, r0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	7afb      	ldrb	r3, [r7, #11]
 800074a:	6978      	ldr	r0, [r7, #20]
 800074c:	4619      	mov	r1, r3
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	f7ff fdf6 	bl	8000340 <d_fill_dtor>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d102      	bne.n	8000760 <d_make_dtor+0x30>
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	e000      	b.n	8000762 <d_make_dtor+0x32>
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4618      	mov	r0, r3
 8000764:	f107 0718 	add.w	r7, r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <d_make_template_param>:
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fe0a 	bl	8000390 <d_make_empty>
 800077c:	4603      	mov	r3, r0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d006      	beq.n	8000794 <d_make_template_param+0x28>
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f04f 0205 	mov.w	r2, #5
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4618      	mov	r0, r3
 8000798:	f107 0710 	add.w	r7, r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <d_make_function_param>:
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fdf0 	bl	8000390 <d_make_empty>
 80007b0:	4603      	mov	r3, r0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d006      	beq.n	80007c8 <d_make_function_param+0x28>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f04f 0206 	mov.w	r2, #6
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f107 0710 	add.w	r7, r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <d_make_sub>:
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f7ff fdd5 	bl	8000390 <d_make_empty>
 80007e6:	4603      	mov	r3, r0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d009      	beq.n	8000804 <d_make_sub+0x30>
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	f04f 0216 	mov.w	r2, #22
 80007f6:	701a      	strb	r2, [r3, #0]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	4618      	mov	r0, r3
 8000808:	f107 0718 	add.w	r7, r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <d_mangled_name>:
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b5f      	cmp	r3, #95	; 0x5f
 8000822:	d108      	bne.n	8000836 <d_mangled_name+0x26>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	f103 0201 	add.w	r2, r3, #1
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e001      	b.n	800083a <d_mangled_name+0x2a>
 8000836:	f04f 0301 	mov.w	r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	d005      	beq.n	800084a <d_mangled_name+0x3a>
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <d_mangled_name+0x3a>
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	e054      	b.n	80008f4 <d_mangled_name+0xe4>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b5a      	cmp	r3, #90	; 0x5a
 8000852:	d108      	bne.n	8000866 <d_mangled_name+0x56>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	f103 0201 	add.w	r2, r3, #1
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	f04f 0300 	mov.w	r3, #0
 8000864:	e001      	b.n	800086a <d_mangled_name+0x5a>
 8000866:	f04f 0301 	mov.w	r3, #1
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <d_mangled_name+0x64>
 800086e:	f04f 0300 	mov.w	r3, #0
 8000872:	e03f      	b.n	80008f4 <d_mangled_name+0xe4>
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	f000 f8f2 	bl	8000a60 <d_encoding>
 800087c:	4603      	mov	r3, r0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d035      	beq.n	80008f2 <d_mangled_name+0xe2>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d02e      	beq.n	80008f2 <d_mangled_name+0xe2>
 8000894:	e005      	b.n	80008a2 <d_mangled_name+0x92>
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	68f9      	ldr	r1, [r7, #12]
 800089a:	f002 fcbb 	bl	8003214 <d_clone_suffix>
 800089e:	4603      	mov	r3, r0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b2e      	cmp	r3, #46	; 0x2e
 80008aa:	d122      	bne.n	80008f2 <d_mangled_name+0xe2>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	f103 0301 	add.w	r3, r3, #1
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b60      	cmp	r3, #96	; 0x60
 80008b8:	d906      	bls.n	80008c8 <d_mangled_name+0xb8>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	f103 0301 	add.w	r3, r3, #1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b7a      	cmp	r3, #122	; 0x7a
 80008c6:	d9e6      	bls.n	8000896 <d_mangled_name+0x86>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	f103 0301 	add.w	r3, r3, #1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b5f      	cmp	r3, #95	; 0x5f
 80008d4:	d0df      	beq.n	8000896 <d_mangled_name+0x86>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f103 0301 	add.w	r3, r3, #1
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b2f      	cmp	r3, #47	; 0x2f
 80008e2:	d906      	bls.n	80008f2 <d_mangled_name+0xe2>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	f103 0301 	add.w	r3, r3, #1
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b39      	cmp	r3, #57	; 0x39
 80008f0:	d9d1      	bls.n	8000896 <d_mangled_name+0x86>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f107 0710 	add.w	r7, r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop

08000900 <has_return_type>:
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d102      	bne.n	8000914 <has_return_type+0x14>
 800090e:	f04f 0300 	mov.w	r3, #0
 8000912:	e01d      	b.n	8000950 <has_return_type+0x50>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b04      	cmp	r3, #4
 800091a:	d008      	beq.n	800092e <has_return_type+0x2e>
 800091c:	2b04      	cmp	r3, #4
 800091e:	db03      	blt.n	8000928 <has_return_type+0x28>
 8000920:	f1a3 031a 	sub.w	r3, r3, #26
 8000924:	2b02      	cmp	r3, #2
 8000926:	d90d      	bls.n	8000944 <has_return_type+0x44>
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e010      	b.n	8000950 <has_return_type+0x50>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f812 	bl	800095c <is_ctor_dtor_or_conversion>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2300      	movne	r3, #0
 8000940:	2301      	moveq	r3, #1
 8000942:	e005      	b.n	8000950 <has_return_type+0x50>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ffd9 	bl	8000900 <has_return_type>
 800094e:	4603      	mov	r3, r0
 8000950:	4618      	mov	r0, r3
 8000952:	f107 0708 	add.w	r7, r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop

0800095c <is_ctor_dtor_or_conversion>:
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d102      	bne.n	8000970 <is_ctor_dtor_or_conversion+0x14>
 800096a:	f04f 0300 	mov.w	r3, #0
 800096e:	e071      	b.n	8000a54 <is_ctor_dtor_or_conversion+0xf8>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	f103 33ff 	add.w	r3, r3, #4294967295
 8000978:	2b2d      	cmp	r3, #45	; 0x2d
 800097a:	d85f      	bhi.n	8000a3c <is_ctor_dtor_or_conversion+0xe0>
 800097c:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <is_ctor_dtor_or_conversion+0x28>)
 800097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000982:	bf00      	nop
 8000984:	08000a43 	.word	0x08000a43
 8000988:	08000a43 	.word	0x08000a43
 800098c:	08000a3d 	.word	0x08000a3d
 8000990:	08000a3d 	.word	0x08000a3d
 8000994:	08000a3d 	.word	0x08000a3d
 8000998:	08000a3d 	.word	0x08000a3d
 800099c:	08000a51 	.word	0x08000a51
 80009a0:	08000a51 	.word	0x08000a51
 80009a4:	08000a3d 	.word	0x08000a3d
 80009a8:	08000a3d 	.word	0x08000a3d
 80009ac:	08000a3d 	.word	0x08000a3d
 80009b0:	08000a3d 	.word	0x08000a3d
 80009b4:	08000a3d 	.word	0x08000a3d
 80009b8:	08000a3d 	.word	0x08000a3d
 80009bc:	08000a3d 	.word	0x08000a3d
 80009c0:	08000a3d 	.word	0x08000a3d
 80009c4:	08000a3d 	.word	0x08000a3d
 80009c8:	08000a3d 	.word	0x08000a3d
 80009cc:	08000a3d 	.word	0x08000a3d
 80009d0:	08000a3d 	.word	0x08000a3d
 80009d4:	08000a3d 	.word	0x08000a3d
 80009d8:	08000a3d 	.word	0x08000a3d
 80009dc:	08000a3d 	.word	0x08000a3d
 80009e0:	08000a3d 	.word	0x08000a3d
 80009e4:	08000a3d 	.word	0x08000a3d
 80009e8:	08000a3d 	.word	0x08000a3d
 80009ec:	08000a3d 	.word	0x08000a3d
 80009f0:	08000a3d 	.word	0x08000a3d
 80009f4:	08000a3d 	.word	0x08000a3d
 80009f8:	08000a3d 	.word	0x08000a3d
 80009fc:	08000a3d 	.word	0x08000a3d
 8000a00:	08000a3d 	.word	0x08000a3d
 8000a04:	08000a3d 	.word	0x08000a3d
 8000a08:	08000a3d 	.word	0x08000a3d
 8000a0c:	08000a3d 	.word	0x08000a3d
 8000a10:	08000a3d 	.word	0x08000a3d
 8000a14:	08000a3d 	.word	0x08000a3d
 8000a18:	08000a3d 	.word	0x08000a3d
 8000a1c:	08000a3d 	.word	0x08000a3d
 8000a20:	08000a3d 	.word	0x08000a3d
 8000a24:	08000a3d 	.word	0x08000a3d
 8000a28:	08000a3d 	.word	0x08000a3d
 8000a2c:	08000a3d 	.word	0x08000a3d
 8000a30:	08000a3d 	.word	0x08000a3d
 8000a34:	08000a3d 	.word	0x08000a3d
 8000a38:	08000a51 	.word	0x08000a51
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	e008      	b.n	8000a54 <is_ctor_dtor_or_conversion+0xf8>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff88 	bl	800095c <is_ctor_dtor_or_conversion>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	e001      	b.n	8000a54 <is_ctor_dtor_or_conversion+0xf8>
 8000a50:	f04f 0301 	mov.w	r3, #1
 8000a54:	4618      	mov	r0, r3
 8000a56:	f107 0708 	add.w	r7, r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop

08000a60 <d_encoding>:
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	2b47      	cmp	r3, #71	; 0x47
 8000a76:	d002      	beq.n	8000a7e <d_encoding+0x1e>
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b54      	cmp	r3, #84	; 0x54
 8000a7c:	d104      	bne.n	8000a88 <d_encoding+0x28>
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 fd1c 	bl	80014bc <d_special_name>
 8000a84:	4603      	mov	r3, r0
 8000a86:	e05b      	b.n	8000b40 <d_encoding+0xe0>
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f85f 	bl	8000b4c <d_name>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d034      	beq.n	8000b02 <d_encoding+0xa2>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d031      	beq.n	8000b02 <d_encoding+0xa2>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d12b      	bne.n	8000b02 <d_encoding+0xa2>
 8000aaa:	e002      	b.n	8000ab2 <d_encoding+0x52>
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b1a      	cmp	r3, #26
 8000ab8:	d0f8      	beq.n	8000aac <d_encoding+0x4c>
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b1b      	cmp	r3, #27
 8000ac0:	d0f4      	beq.n	8000aac <d_encoding+0x4c>
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b1c      	cmp	r3, #28
 8000ac8:	d0f0      	beq.n	8000aac <d_encoding+0x4c>
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d115      	bne.n	8000afe <d_encoding+0x9e>
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	e002      	b.n	8000ae0 <d_encoding+0x80>
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b1a      	cmp	r3, #26
 8000ae6:	d0f8      	beq.n	8000ada <d_encoding+0x7a>
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b1b      	cmp	r3, #27
 8000aee:	d0f4      	beq.n	8000ada <d_encoding+0x7a>
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b1c      	cmp	r3, #28
 8000af6:	d0f0      	beq.n	8000ada <d_encoding+0x7a>
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	e01e      	b.n	8000b40 <d_encoding+0xe0>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d005      	beq.n	8000b1c <d_encoding+0xbc>
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <d_encoding+0xbc>
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	2b45      	cmp	r3, #69	; 0x45
 8000b1a:	d101      	bne.n	8000b20 <d_encoding+0xc0>
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	e00f      	b.n	8000b40 <d_encoding+0xe0>
 8000b20:	6978      	ldr	r0, [r7, #20]
 8000b22:	f7ff feed 	bl	8000900 <has_return_type>
 8000b26:	4603      	mov	r3, r0
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f001 fc7e 	bl	800242c <d_bare_function_type>
 8000b30:	4603      	mov	r3, r0
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f04f 0103 	mov.w	r1, #3
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	f7ff fc51 	bl	80003e0 <d_make_comp>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f107 0718 	add.w	r7, r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop

08000b4c <d_name>:
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
 8000b62:	2b0e      	cmp	r3, #14
 8000b64:	f200 8088 	bhi.w	8000c78 <d_name+0x12c>
 8000b68:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <d_name+0x24>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000bc1 	.word	0x08000bc1
 8000b74:	08000c79 	.word	0x08000c79
 8000b78:	08000bad 	.word	0x08000bad
 8000b7c:	08000c79 	.word	0x08000c79
 8000b80:	08000c79 	.word	0x08000c79
 8000b84:	08000c79 	.word	0x08000c79
 8000b88:	08000c79 	.word	0x08000c79
 8000b8c:	08000bcb 	.word	0x08000bcb
 8000b90:	08000c79 	.word	0x08000c79
 8000b94:	08000bc1 	.word	0x08000bc1
 8000b98:	08000c79 	.word	0x08000c79
 8000b9c:	08000c79 	.word	0x08000c79
 8000ba0:	08000c79 	.word	0x08000c79
 8000ba4:	08000c79 	.word	0x08000c79
 8000ba8:	08000bb7 	.word	0x08000bb7
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 f889 	bl	8000cc4 <d_nested_name>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	e081      	b.n	8000cba <d_name+0x16e>
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f002 f990 	bl	8002edc <d_local_name>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	e07c      	b.n	8000cba <d_name+0x16e>
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f96b 	bl	8000e9c <d_unqualified_name>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	e077      	b.n	8000cba <d_name+0x16e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	f103 0301 	add.w	r3, r3, #1
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b74      	cmp	r3, #116	; 0x74
 8000bd6:	d00a      	beq.n	8000bee <d_name+0xa2>
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f04f 0100 	mov.w	r1, #0
 8000bde:	f002 fbbd 	bl	800335c <d_substitution>
 8000be2:	4603      	mov	r3, r0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	f04f 0301 	mov.w	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	e024      	b.n	8000c38 <d_name+0xec>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	f103 0202 	add.w	r2, r3, #2
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f246 3168 	movw	r1, #25448	; 0x6368
 8000c00:	f6c0 0102 	movt	r1, #2050	; 0x802
 8000c04:	f04f 0203 	mov.w	r2, #3
 8000c08:	f7ff fce4 	bl	80005d4 <d_make_name>
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f944 	bl	8000e9c <d_unqualified_name>
 8000c14:	4603      	mov	r3, r0
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f04f 0101 	mov.w	r1, #1
 8000c1c:	4622      	mov	r2, r4
 8000c1e:	f7ff fbdf 	bl	80003e0 <d_make_comp>
 8000c22:	4603      	mov	r3, r0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f103 0203 	add.w	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b49      	cmp	r3, #73	; 0x49
 8000c40:	d118      	bne.n	8000c74 <d_name+0x128>
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d109      	bne.n	8000c5c <d_name+0x110>
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	6979      	ldr	r1, [r7, #20]
 8000c4c:	f002 fb5a 	bl	8003304 <d_add_substitution>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <d_name+0x110>
 8000c56:	f04f 0300 	mov.w	r3, #0
 8000c5a:	e02e      	b.n	8000cba <d_name+0x16e>
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f001 fdc3 	bl	80027e8 <d_template_args>
 8000c62:	4603      	mov	r3, r0
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f04f 0104 	mov.w	r1, #4
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	f7ff fbb8 	bl	80003e0 <d_make_comp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	e020      	b.n	8000cba <d_name+0x16e>
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f90f 	bl	8000e9c <d_unqualified_name>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b49      	cmp	r3, #73	; 0x49
 8000c8a:	d115      	bne.n	8000cb8 <d_name+0x16c>
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	6979      	ldr	r1, [r7, #20]
 8000c90:	f002 fb38 	bl	8003304 <d_add_substitution>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <d_name+0x154>
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	e00c      	b.n	8000cba <d_name+0x16e>
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f001 fda1 	bl	80027e8 <d_template_args>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f04f 0104 	mov.w	r1, #4
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	f7ff fb96 	bl	80003e0 <d_make_comp>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f107 071c 	add.w	r7, r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}

08000cc4 <d_nested_name>:
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8000cd4:	d108      	bne.n	8000ce8 <d_nested_name+0x24>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	f103 0201 	add.w	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	e001      	b.n	8000cec <d_nested_name+0x28>
 8000ce8:	f04f 0301 	mov.w	r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <d_nested_name+0x32>
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e032      	b.n	8000d5c <d_nested_name+0x98>
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f04f 0201 	mov.w	r2, #1
 8000d02:	f001 fa77 	bl	80021f4 <d_cv_qualifiers>
 8000d06:	4603      	mov	r3, r0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <d_nested_name+0x52>
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e022      	b.n	8000d5c <d_nested_name+0x98>
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f826 	bl	8000d68 <d_prefix>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <d_nested_name+0x6c>
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	e015      	b.n	8000d5c <d_nested_name+0x98>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b45      	cmp	r3, #69	; 0x45
 8000d38:	d108      	bne.n	8000d4c <d_nested_name+0x88>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	f103 0201 	add.w	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	e001      	b.n	8000d50 <d_nested_name+0x8c>
 8000d4c:	f04f 0301 	mov.w	r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <d_nested_name+0x96>
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e000      	b.n	8000d5c <d_nested_name+0x98>
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f107 0710 	add.w	r7, r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop

08000d68 <d_prefix>:
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e000      	b.n	8000d7a <d_prefix+0x12>
 8000d78:	bf00      	nop
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	72fb      	strb	r3, [r7, #11]
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <d_prefix+0x26>
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e081      	b.n	8000e92 <d_prefix+0x12a>
 8000d8e:	f04f 0301 	mov.w	r3, #1
 8000d92:	74fb      	strb	r3, [r7, #19]
 8000d94:	7afb      	ldrb	r3, [r7, #11]
 8000d96:	2b2f      	cmp	r3, #47	; 0x2f
 8000d98:	d902      	bls.n	8000da0 <d_prefix+0x38>
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
 8000d9c:	2b39      	cmp	r3, #57	; 0x39
 8000d9e:	d911      	bls.n	8000dc4 <d_prefix+0x5c>
 8000da0:	7afb      	ldrb	r3, [r7, #11]
 8000da2:	2b60      	cmp	r3, #96	; 0x60
 8000da4:	d902      	bls.n	8000dac <d_prefix+0x44>
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	2b7a      	cmp	r3, #122	; 0x7a
 8000daa:	d90b      	bls.n	8000dc4 <d_prefix+0x5c>
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	2b43      	cmp	r3, #67	; 0x43
 8000db0:	d008      	beq.n	8000dc4 <d_prefix+0x5c>
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	2b44      	cmp	r3, #68	; 0x44
 8000db6:	d005      	beq.n	8000dc4 <d_prefix+0x5c>
 8000db8:	7afb      	ldrb	r3, [r7, #11]
 8000dba:	2b55      	cmp	r3, #85	; 0x55
 8000dbc:	d002      	beq.n	8000dc4 <d_prefix+0x5c>
 8000dbe:	7afb      	ldrb	r3, [r7, #11]
 8000dc0:	2b4c      	cmp	r3, #76	; 0x4c
 8000dc2:	d105      	bne.n	8000dd0 <d_prefix+0x68>
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 f869 	bl	8000e9c <d_unqualified_name>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e03e      	b.n	8000e4e <d_prefix+0xe6>
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	2b53      	cmp	r3, #83	; 0x53
 8000dd4:	d107      	bne.n	8000de6 <d_prefix+0x7e>
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f04f 0101 	mov.w	r1, #1
 8000ddc:	f002 fabe 	bl	800335c <d_substitution>
 8000de0:	4603      	mov	r3, r0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	e033      	b.n	8000e4e <d_prefix+0xe6>
 8000de6:	7afb      	ldrb	r3, [r7, #11]
 8000de8:	2b49      	cmp	r3, #73	; 0x49
 8000dea:	d10e      	bne.n	8000e0a <d_prefix+0xa2>
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <d_prefix+0x90>
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	e04c      	b.n	8000e92 <d_prefix+0x12a>
 8000df8:	f04f 0304 	mov.w	r3, #4
 8000dfc:	74fb      	strb	r3, [r7, #19]
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f001 fcf2 	bl	80027e8 <d_template_args>
 8000e04:	4603      	mov	r3, r0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	e021      	b.n	8000e4e <d_prefix+0xe6>
 8000e0a:	7afb      	ldrb	r3, [r7, #11]
 8000e0c:	2b54      	cmp	r3, #84	; 0x54
 8000e0e:	d105      	bne.n	8000e1c <d_prefix+0xb4>
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f001 fcb5 	bl	8002780 <d_template_param>
 8000e16:	4603      	mov	r3, r0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e018      	b.n	8000e4e <d_prefix+0xe6>
 8000e1c:	7afb      	ldrb	r3, [r7, #11]
 8000e1e:	2b45      	cmp	r3, #69	; 0x45
 8000e20:	d101      	bne.n	8000e26 <d_prefix+0xbe>
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	e035      	b.n	8000e92 <d_prefix+0x12a>
 8000e26:	7afb      	ldrb	r3, [r7, #11]
 8000e28:	2b4d      	cmp	r3, #77	; 0x4d
 8000e2a:	d10d      	bne.n	8000e48 <d_prefix+0xe0>
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <d_prefix+0xd0>
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	e02c      	b.n	8000e92 <d_prefix+0x12a>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	f103 0201 	add.w	r2, r3, #1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	bf00      	nop
 8000e46:	e797      	b.n	8000d78 <d_prefix+0x10>
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	e021      	b.n	8000e92 <d_prefix+0x12a>
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <d_prefix+0xf2>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e008      	b.n	8000e6c <d_prefix+0x104>
 8000e5a:	7cfb      	ldrb	r3, [r7, #19]
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f7ff fabc 	bl	80003e0 <d_make_comp>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	7afb      	ldrb	r3, [r7, #11]
 8000e6e:	2b53      	cmp	r3, #83	; 0x53
 8000e70:	d082      	beq.n	8000d78 <d_prefix+0x10>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b45      	cmp	r3, #69	; 0x45
 8000e7a:	f43f af7d 	beq.w	8000d78 <d_prefix+0x10>
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	6979      	ldr	r1, [r7, #20]
 8000e82:	f002 fa3f 	bl	8003304 <d_add_substitution>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f47f af75 	bne.w	8000d78 <d_prefix+0x10>
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f107 0718 	add.w	r7, r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <d_unqualified_name>:
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	75fb      	strb	r3, [r7, #23]
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	2b2f      	cmp	r3, #47	; 0x2f
 8000eb0:	d907      	bls.n	8000ec2 <d_unqualified_name+0x26>
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
 8000eb4:	2b39      	cmp	r3, #57	; 0x39
 8000eb6:	d804      	bhi.n	8000ec2 <d_unqualified_name+0x26>
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f86d 	bl	8000f98 <d_source_name>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e065      	b.n	8000f8e <d_unqualified_name+0xf2>
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	2b60      	cmp	r3, #96	; 0x60
 8000ec6:	d91c      	bls.n	8000f02 <d_unqualified_name+0x66>
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	2b7a      	cmp	r3, #122	; 0x7a
 8000ecc:	d819      	bhi.n	8000f02 <d_unqualified_name+0x66>
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f956 	bl	8001180 <d_operator_name>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00f      	beq.n	8000efe <d_unqualified_name+0x62>
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ee4:	d10b      	bne.n	8000efe <d_unqualified_name+0x62>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	461a      	mov	r2, r3
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	18d3      	adds	r3, r2, r3
 8000ef4:	f103 0307 	add.w	r3, r3, #7
 8000ef8:	461a      	mov	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	631a      	str	r2, [r3, #48]	; 0x30
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	e045      	b.n	8000f8e <d_unqualified_name+0xf2>
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
 8000f04:	2b43      	cmp	r3, #67	; 0x43
 8000f06:	d002      	beq.n	8000f0e <d_unqualified_name+0x72>
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b44      	cmp	r3, #68	; 0x44
 8000f0c:	d104      	bne.n	8000f18 <d_unqualified_name+0x7c>
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 fd2e 	bl	8001970 <d_ctor_dtor_name>
 8000f14:	4603      	mov	r3, r0
 8000f16:	e03a      	b.n	8000f8e <d_unqualified_name+0xf2>
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	2b4c      	cmp	r3, #76	; 0x4c
 8000f1c:	d11b      	bne.n	8000f56 <d_unqualified_name+0xba>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f103 0201 	add.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f834 	bl	8000f98 <d_source_name>
 8000f30:	4603      	mov	r3, r0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <d_unqualified_name+0xa4>
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	e026      	b.n	8000f8e <d_unqualified_name+0xf2>
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f002 f86f 	bl	8003024 <d_discriminator>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <d_unqualified_name+0xb6>
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	e01d      	b.n	8000f8e <d_unqualified_name+0xf2>
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	e01b      	b.n	8000f8e <d_unqualified_name+0xf2>
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	2b55      	cmp	r3, #85	; 0x55
 8000f5a:	d116      	bne.n	8000f8a <d_unqualified_name+0xee>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f103 0301 	add.w	r3, r3, #1
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b6c      	cmp	r3, #108	; 0x6c
 8000f68:	d002      	beq.n	8000f70 <d_unqualified_name+0xd4>
 8000f6a:	2b74      	cmp	r3, #116	; 0x74
 8000f6c:	d005      	beq.n	8000f7a <d_unqualified_name+0xde>
 8000f6e:	e009      	b.n	8000f84 <d_unqualified_name+0xe8>
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f002 f87b 	bl	800306c <d_lambda>
 8000f76:	4603      	mov	r3, r0
 8000f78:	e009      	b.n	8000f8e <d_unqualified_name+0xf2>
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f002 f8f2 	bl	8003164 <d_unnamed_type>
 8000f80:	4603      	mov	r3, r0
 8000f82:	e004      	b.n	8000f8e <d_unqualified_name+0xf2>
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	e001      	b.n	8000f8e <d_unqualified_name+0xf2>
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f107 0718 	add.w	r7, r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <d_source_name>:
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f817 	bl	8000fd4 <d_number>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	dc02      	bgt.n	8000fb6 <d_source_name+0x1e>
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e009      	b.n	8000fca <d_source_name+0x32>
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	68f9      	ldr	r1, [r7, #12]
 8000fba:	f000 f871 	bl	80010a0 <d_identifier>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f107 0710 	add.w	r7, r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <d_number>:
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	74fb      	strb	r3, [r7, #19]
 8000fea:	7cfb      	ldrb	r3, [r7, #19]
 8000fec:	2b6e      	cmp	r3, #110	; 0x6e
 8000fee:	d10c      	bne.n	800100a <d_number+0x36>
 8000ff0:	f04f 0301 	mov.w	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	f103 0201 	add.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	74fb      	strb	r3, [r7, #19]
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	7cfb      	ldrb	r3, [r7, #19]
 8001012:	2b2f      	cmp	r3, #47	; 0x2f
 8001014:	d902      	bls.n	800101c <d_number+0x48>
 8001016:	7cfb      	ldrb	r3, [r7, #19]
 8001018:	2b39      	cmp	r3, #57	; 0x39
 800101a:	d90d      	bls.n	8001038 <d_number+0x64>
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <d_number+0x56>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1c3 0300 	rsb	r3, r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4618      	mov	r0, r3
 800102e:	f107 071c 	add.w	r7, r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4613      	mov	r3, r2
 800103c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001040:	189b      	adds	r3, r3, r2
 8001042:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001046:	461a      	mov	r2, r3
 8001048:	7cfb      	ldrb	r3, [r7, #19]
 800104a:	18d3      	adds	r3, r2, r3
 800104c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f103 0201 	add.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	74fb      	strb	r3, [r7, #19]
 8001066:	e7d3      	b.n	8001010 <d_number+0x3c>

08001068 <d_number_component>:
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff f98d 	bl	8000390 <d_make_empty>
 8001076:	4603      	mov	r3, r0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d009      	beq.n	8001094 <d_number_component+0x2c>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f04f 023a 	mov.w	r2, #58	; 0x3a
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffa3 	bl	8000fd4 <d_number>
 800108e:	4602      	mov	r2, r0
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4618      	mov	r0, r3
 8001098:	f107 0710 	add.w	r7, r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <d_identifier>:
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	461a      	mov	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	1ad2      	subs	r2, r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <d_identifier+0x26>
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	e056      	b.n	8001174 <d_identifier+0xd4>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	18d2      	adds	r2, r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00a      	beq.n	80010f4 <d_identifier+0x54>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b24      	cmp	r3, #36	; 0x24
 80010e6:	d105      	bne.n	80010f4 <d_identifier+0x54>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f103 0201 	add.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b09      	cmp	r3, #9
 80010f8:	dd36      	ble.n	8001168 <d_identifier+0xc8>
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f246 316c 	movw	r1, #25452	; 0x636c
 8001100:	f6c0 0102 	movt	r1, #2050	; 0x802
 8001104:	f04f 0208 	mov.w	r2, #8
 8001108:	f006 fada 	bl	80076c0 <memcmp>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d12a      	bne.n	8001168 <d_identifier+0xc8>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f103 0308 	add.w	r3, r3, #8
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b2e      	cmp	r3, #46	; 0x2e
 8001120:	d007      	beq.n	8001132 <d_identifier+0x92>
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b5f      	cmp	r3, #95	; 0x5f
 8001128:	d003      	beq.n	8001132 <d_identifier+0x92>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b24      	cmp	r3, #36	; 0x24
 8001130:	d11a      	bne.n	8001168 <d_identifier+0xc8>
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f103 0301 	add.w	r3, r3, #1
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b4e      	cmp	r3, #78	; 0x4e
 800113c:	d114      	bne.n	8001168 <d_identifier+0xc8>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	461a      	mov	r2, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f103 0316 	add.w	r3, r3, #22
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	631a      	str	r2, [r3, #48]	; 0x30
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f246 3178 	movw	r1, #25464	; 0x6378
 8001158:	f6c0 0102 	movt	r1, #2050	; 0x802
 800115c:	f04f 0215 	mov.w	r2, #21
 8001160:	f7ff fa38 	bl	80005d4 <d_make_name>
 8001164:	4603      	mov	r3, r0
 8001166:	e005      	b.n	8001174 <d_identifier+0xd4>
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	f7ff fa31 	bl	80005d4 <d_make_name>
 8001172:	4603      	mov	r3, r0
 8001174:	4618      	mov	r0, r3
 8001176:	f107 0710 	add.w	r7, r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop

08001180 <d_operator_name>:
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <d_operator_name+0x22>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	7813      	ldrb	r3, [r2, #0]
 8001198:	f102 0101 	add.w	r1, r2, #1
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	60d1      	str	r1, [r2, #12]
 80011a0:	e001      	b.n	80011a6 <d_operator_name+0x26>
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	75fb      	strb	r3, [r7, #23]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <d_operator_name+0x42>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	7813      	ldrb	r3, [r2, #0]
 80011b8:	f102 0101 	add.w	r1, r2, #1
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	60d1      	str	r1, [r2, #12]
 80011c0:	e001      	b.n	80011c6 <d_operator_name+0x46>
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	75bb      	strb	r3, [r7, #22]
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	2b76      	cmp	r3, #118	; 0x76
 80011cc:	d113      	bne.n	80011f6 <d_operator_name+0x76>
 80011ce:	7dbb      	ldrb	r3, [r7, #22]
 80011d0:	2b2f      	cmp	r3, #47	; 0x2f
 80011d2:	d910      	bls.n	80011f6 <d_operator_name+0x76>
 80011d4:	7dbb      	ldrb	r3, [r7, #22]
 80011d6:	2b39      	cmp	r3, #57	; 0x39
 80011d8:	d80d      	bhi.n	80011f6 <d_operator_name+0x76>
 80011da:	7dbb      	ldrb	r3, [r7, #22]
 80011dc:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fed9 	bl	8000f98 <d_source_name>
 80011e6:	4603      	mov	r3, r0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	4621      	mov	r1, r4
 80011ec:	461a      	mov	r2, r3
 80011ee:	f7ff fa47 	bl	8000680 <d_make_extended_operator>
 80011f2:	4603      	mov	r3, r0
 80011f4:	e065      	b.n	80012c2 <d_operator_name+0x142>
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
 80011f8:	2b63      	cmp	r3, #99	; 0x63
 80011fa:	d110      	bne.n	800121e <d_operator_name+0x9e>
 80011fc:	7dbb      	ldrb	r3, [r7, #22]
 80011fe:	2b76      	cmp	r3, #118	; 0x76
 8001200:	d10d      	bne.n	800121e <d_operator_name+0x9e>
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fc3a 	bl	8001a7c <d_type>
 8001208:	4603      	mov	r3, r0
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8001210:	461a      	mov	r2, r3
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	f7ff f8e3 	bl	80003e0 <d_make_comp>
 800121a:	4603      	mov	r3, r0
 800121c:	e051      	b.n	80012c2 <d_operator_name+0x142>
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	f04f 0334 	mov.w	r3, #52	; 0x34
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	e000      	b.n	800122e <d_operator_name+0xae>
 800122c:	bf00      	nop
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	ea4f 0363 	mov.w	r3, r3, asr #1
 800123e:	461a      	mov	r2, r3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	ea4f 1203 	mov.w	r2, r3, lsl #4
 800124c:	f246 5334 	movw	r3, #25908	; 0x6534
 8001250:	f6c0 0302 	movt	r3, #2050	; 0x802
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	7dfa      	ldrb	r2, [r7, #23]
 8001260:	429a      	cmp	r2, r3
 8001262:	d10d      	bne.n	8001280 <d_operator_name+0x100>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f103 0301 	add.w	r3, r3, #1
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	7dba      	ldrb	r2, [r7, #22]
 8001270:	429a      	cmp	r2, r3
 8001272:	d105      	bne.n	8001280 <d_operator_name+0x100>
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	68f9      	ldr	r1, [r7, #12]
 8001278:	f7ff f9e8 	bl	800064c <d_make_operator>
 800127c:	4603      	mov	r3, r0
 800127e:	e020      	b.n	80012c2 <d_operator_name+0x142>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	7dfa      	ldrb	r2, [r7, #23]
 8001288:	429a      	cmp	r2, r3
 800128a:	d30d      	bcc.n	80012a8 <d_operator_name+0x128>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	7dfa      	ldrb	r2, [r7, #23]
 8001294:	429a      	cmp	r2, r3
 8001296:	d10a      	bne.n	80012ae <d_operator_name+0x12e>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f103 0301 	add.w	r3, r3, #1
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	7dba      	ldrb	r2, [r7, #22]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d202      	bcs.n	80012ae <d_operator_name+0x12e>
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	e003      	b.n	80012b6 <d_operator_name+0x136>
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	f103 0301 	add.w	r3, r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d1b6      	bne.n	800122c <d_operator_name+0xac>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}

080012cc <d_make_character>:
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff f85a 	bl	8000390 <d_make_empty>
 80012dc:	4603      	mov	r3, r0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <d_make_character+0x28>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f04f 0239 	mov.w	r2, #57	; 0x39
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f107 0710 	add.w	r7, r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <d_java_resource>:
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fe5d 	bl	8000fd4 <d_number>
 800131a:	4603      	mov	r3, r0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b01      	cmp	r3, #1
 8001322:	dc02      	bgt.n	800132a <d_java_resource+0x2a>
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e0c2      	b.n	80014b0 <d_java_resource+0x1b0>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00d      	beq.n	8001350 <d_java_resource+0x50>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	2a5f      	cmp	r2, #95	; 0x5f
 800133c:	bf0c      	ite	eq
 800133e:	2200      	moveq	r2, #0
 8001340:	2201      	movne	r2, #1
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	f103 0101 	add.w	r1, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60d9      	str	r1, [r3, #12]
 800134c:	2a00      	cmp	r2, #0
 800134e:	d002      	beq.n	8001356 <d_java_resource+0x56>
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e0ac      	b.n	80014b0 <d_java_resource+0x1b0>
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f103 33ff 	add.w	r3, r3, #4294967295
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	e092      	b.n	8001492 <d_java_resource+0x192>
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <d_java_resource+0x82>
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e096      	b.n	80014b0 <d_java_resource+0x1b0>
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b24      	cmp	r3, #36	; 0x24
 8001386:	d142      	bne.n	800140e <d_java_resource+0x10e>
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f103 0301 	add.w	r3, r3, #1
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	18d3      	adds	r3, r2, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	f102 0201 	add.w	r2, r2, #1
 800139e:	613a      	str	r2, [r7, #16]
 80013a0:	2b53      	cmp	r3, #83	; 0x53
 80013a2:	d004      	beq.n	80013ae <d_java_resource+0xae>
 80013a4:	2b5f      	cmp	r3, #95	; 0x5f
 80013a6:	d006      	beq.n	80013b6 <d_java_resource+0xb6>
 80013a8:	2b24      	cmp	r3, #36	; 0x24
 80013aa:	d008      	beq.n	80013be <d_java_resource+0xbe>
 80013ac:	e00b      	b.n	80013c6 <d_java_resource+0xc6>
 80013ae:	f04f 032f 	mov.w	r3, #47	; 0x2f
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e00a      	b.n	80013cc <d_java_resource+0xcc>
 80013b6:	f04f 032e 	mov.w	r3, #46	; 0x2e
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e006      	b.n	80013cc <d_java_resource+0xcc>
 80013be:	f04f 0324 	mov.w	r3, #36	; 0x24
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e002      	b.n	80013cc <d_java_resource+0xcc>
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	e071      	b.n	80014b0 <d_java_resource+0x1b0>
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff ff7b 	bl	80012cc <d_make_character>
 80013d6:	4603      	mov	r3, r0
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	18d2      	adds	r2, r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d133      	bne.n	8001468 <d_java_resource+0x168>
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e054      	b.n	80014b0 <d_java_resource+0x1b0>
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f103 0301 	add.w	r3, r3, #1
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	429a      	cmp	r2, r3
 8001414:	da0b      	bge.n	800142e <d_java_resource+0x12e>
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	18d3      	adds	r3, r2, r3
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <d_java_resource+0x12e>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b24      	cmp	r3, #36	; 0x24
 800142c:	d1eb      	bne.n	8001406 <d_java_resource+0x106>
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	f7ff f8ce 	bl	80005d4 <d_make_name>
 8001438:	4603      	mov	r3, r0
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	18d2      	adds	r2, r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <d_java_resource+0x168>
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e023      	b.n	80014b0 <d_java_resource+0x1b0>
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <d_java_resource+0x174>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e00e      	b.n	8001492 <d_java_resource+0x192>
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f04f 0138 	mov.w	r1, #56	; 0x38
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	f7fe ffaf 	bl	80003e0 <d_make_comp>
 8001482:	4603      	mov	r3, r0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <d_java_resource+0x192>
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e00e      	b.n	80014b0 <d_java_resource+0x1b0>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f73f af69 	bgt.w	800136c <d_java_resource+0x6c>
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f04f 0137 	mov.w	r1, #55	; 0x37
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f7fe ff9b 	bl	80003e0 <d_make_comp>
 80014aa:	4603      	mov	r3, r0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f107 0720 	add.w	r7, r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop

080014bc <d_special_name>:
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f103 0214 	add.w	r2, r3, #20
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b54      	cmp	r3, #84	; 0x54
 80014d8:	d108      	bne.n	80014ec <d_special_name+0x30>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f103 0201 	add.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	f04f 0301 	mov.w	r3, #1
 80014ea:	e001      	b.n	80014f0 <d_special_name+0x34>
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 8177 	beq.w	80017e4 <d_special_name+0x328>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <d_special_name+0x54>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	7813      	ldrb	r3, [r2, #0]
 8001506:	f102 0101 	add.w	r1, r2, #1
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	60d1      	str	r1, [r2, #12]
 800150e:	e001      	b.n	8001514 <d_special_name+0x58>
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f1a3 0343 	sub.w	r3, r3, #67	; 0x43
 8001518:	2b33      	cmp	r3, #51	; 0x33
 800151a:	f200 8160 	bhi.w	80017de <d_special_name+0x322>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <d_special_name+0x68>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	08001735 	.word	0x08001735
 8001528:	080017df 	.word	0x080017df
 800152c:	080017df 	.word	0x080017df
 8001530:	080017a7 	.word	0x080017a7
 8001534:	080017df 	.word	0x080017df
 8001538:	080017df 	.word	0x080017df
 800153c:	08001645 	.word	0x08001645
 8001540:	080017c3 	.word	0x080017c3
 8001544:	080017df 	.word	0x080017df
 8001548:	080017df 	.word	0x080017df
 800154c:	080017df 	.word	0x080017df
 8001550:	080017df 	.word	0x080017df
 8001554:	080017df 	.word	0x080017df
 8001558:	080017df 	.word	0x080017df
 800155c:	080017df 	.word	0x080017df
 8001560:	080017df 	.word	0x080017df
 8001564:	08001661 	.word	0x08001661
 8001568:	0800161d 	.word	0x0800161d
 800156c:	080017df 	.word	0x080017df
 8001570:	080015f5 	.word	0x080015f5
 8001574:	080017df 	.word	0x080017df
 8001578:	080017df 	.word	0x080017df
 800157c:	080017df 	.word	0x080017df
 8001580:	080017df 	.word	0x080017df
 8001584:	080017df 	.word	0x080017df
 8001588:	080017df 	.word	0x080017df
 800158c:	080017df 	.word	0x080017df
 8001590:	080017df 	.word	0x080017df
 8001594:	080017df 	.word	0x080017df
 8001598:	080017df 	.word	0x080017df
 800159c:	080017df 	.word	0x080017df
 80015a0:	080017df 	.word	0x080017df
 80015a4:	080016e9 	.word	0x080016e9
 80015a8:	080017df 	.word	0x080017df
 80015ac:	080017df 	.word	0x080017df
 80015b0:	080017df 	.word	0x080017df
 80015b4:	080017df 	.word	0x080017df
 80015b8:	0800167d 	.word	0x0800167d
 80015bc:	080017df 	.word	0x080017df
 80015c0:	080017df 	.word	0x080017df
 80015c4:	080017df 	.word	0x080017df
 80015c8:	080017df 	.word	0x080017df
 80015cc:	080017df 	.word	0x080017df
 80015d0:	080017df 	.word	0x080017df
 80015d4:	080017df 	.word	0x080017df
 80015d8:	080017df 	.word	0x080017df
 80015dc:	080017df 	.word	0x080017df
 80015e0:	080017df 	.word	0x080017df
 80015e4:	080017df 	.word	0x080017df
 80015e8:	080017df 	.word	0x080017df
 80015ec:	080017df 	.word	0x080017df
 80015f0:	080016b3 	.word	0x080016b3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f1a3 0205 	sub.w	r2, r3, #5
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fa3b 	bl	8001a7c <d_type>
 8001606:	4603      	mov	r3, r0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f04f 0109 	mov.w	r1, #9
 800160e:	461a      	mov	r2, r3
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	f7fe fee4 	bl	80003e0 <d_make_comp>
 8001618:	4603      	mov	r3, r0
 800161a:	e146      	b.n	80018aa <d_special_name+0x3ee>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	f1a3 020a 	sub.w	r2, r3, #10
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fa27 	bl	8001a7c <d_type>
 800162e:	4603      	mov	r3, r0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f04f 010a 	mov.w	r1, #10
 8001636:	461a      	mov	r2, r3
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	f7fe fed0 	bl	80003e0 <d_make_comp>
 8001640:	4603      	mov	r3, r0
 8001642:	e132      	b.n	80018aa <d_special_name+0x3ee>
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fa19 	bl	8001a7c <d_type>
 800164a:	4603      	mov	r3, r0
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f04f 010c 	mov.w	r1, #12
 8001652:	461a      	mov	r2, r3
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	f7fe fec2 	bl	80003e0 <d_make_comp>
 800165c:	4603      	mov	r3, r0
 800165e:	e124      	b.n	80018aa <d_special_name+0x3ee>
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 fa0b 	bl	8001a7c <d_type>
 8001666:	4603      	mov	r3, r0
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f04f 010d 	mov.w	r1, #13
 800166e:	461a      	mov	r2, r3
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	f7fe feb4 	bl	80003e0 <d_make_comp>
 8001678:	4603      	mov	r3, r0
 800167a:	e116      	b.n	80018aa <d_special_name+0x3ee>
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f04f 0168 	mov.w	r1, #104	; 0x68
 8001682:	f000 f917 	bl	80018b4 <d_call_offset>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <d_special_name+0x1d6>
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e10b      	b.n	80018aa <d_special_name+0x3ee>
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	f7ff f9e2 	bl	8000a60 <d_encoding>
 800169c:	4603      	mov	r3, r0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f04f 010f 	mov.w	r1, #15
 80016a4:	461a      	mov	r2, r3
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	f7fe fe99 	bl	80003e0 <d_make_comp>
 80016ae:	4603      	mov	r3, r0
 80016b0:	e0fb      	b.n	80018aa <d_special_name+0x3ee>
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f04f 0176 	mov.w	r1, #118	; 0x76
 80016b8:	f000 f8fc 	bl	80018b4 <d_call_offset>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <d_special_name+0x20c>
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	e0f0      	b.n	80018aa <d_special_name+0x3ee>
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	f7ff f9c7 	bl	8000a60 <d_encoding>
 80016d2:	4603      	mov	r3, r0
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f04f 0110 	mov.w	r1, #16
 80016da:	461a      	mov	r2, r3
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f7fe fe7e 	bl	80003e0 <d_make_comp>
 80016e4:	4603      	mov	r3, r0
 80016e6:	e0e0      	b.n	80018aa <d_special_name+0x3ee>
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	f000 f8e1 	bl	80018b4 <d_call_offset>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <d_special_name+0x242>
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e0d5      	b.n	80018aa <d_special_name+0x3ee>
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	f000 f8d6 	bl	80018b4 <d_call_offset>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <d_special_name+0x258>
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e0ca      	b.n	80018aa <d_special_name+0x3ee>
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	f7ff f9a1 	bl	8000a60 <d_encoding>
 800171e:	4603      	mov	r3, r0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f04f 0111 	mov.w	r1, #17
 8001726:	461a      	mov	r2, r3
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	f7fe fe58 	bl	80003e0 <d_make_comp>
 8001730:	4603      	mov	r3, r0
 8001732:	e0ba      	b.n	80018aa <d_special_name+0x3ee>
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f9a1 	bl	8001a7c <d_type>
 800173a:	4603      	mov	r3, r0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fc48 	bl	8000fd4 <d_number>
 8001744:	4603      	mov	r3, r0
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	da02      	bge.n	8001754 <d_special_name+0x298>
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e0aa      	b.n	80018aa <d_special_name+0x3ee>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b5f      	cmp	r3, #95	; 0x5f
 800175c:	d108      	bne.n	8001770 <d_special_name+0x2b4>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f103 0201 	add.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e001      	b.n	8001774 <d_special_name+0x2b8>
 8001770:	f04f 0301 	mov.w	r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <d_special_name+0x2c2>
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e095      	b.n	80018aa <d_special_name+0x3ee>
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f97c 	bl	8001a7c <d_type>
 8001784:	4603      	mov	r3, r0
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	f103 0205 	add.w	r2, r3, #5
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f04f 010b 	mov.w	r1, #11
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f7fe fe1f 	bl	80003e0 <d_make_comp>
 80017a2:	4603      	mov	r3, r0
 80017a4:	e081      	b.n	80018aa <d_special_name+0x3ee>
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f968 	bl	8001a7c <d_type>
 80017ac:	4603      	mov	r3, r0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f04f 010e 	mov.w	r1, #14
 80017b4:	461a      	mov	r2, r3
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	f7fe fe11 	bl	80003e0 <d_make_comp>
 80017be:	4603      	mov	r3, r0
 80017c0:	e073      	b.n	80018aa <d_special_name+0x3ee>
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f95a 	bl	8001a7c <d_type>
 80017c8:	4603      	mov	r3, r0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f04f 0112 	mov.w	r1, #18
 80017d0:	461a      	mov	r2, r3
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	f7fe fe03 	bl	80003e0 <d_make_comp>
 80017da:	4603      	mov	r3, r0
 80017dc:	e065      	b.n	80018aa <d_special_name+0x3ee>
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e062      	b.n	80018aa <d_special_name+0x3ee>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b47      	cmp	r3, #71	; 0x47
 80017ec:	d108      	bne.n	8001800 <d_special_name+0x344>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f103 0201 	add.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	f04f 0301 	mov.w	r3, #1
 80017fe:	e001      	b.n	8001804 <d_special_name+0x348>
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d04e      	beq.n	80018a6 <d_special_name+0x3ea>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <d_special_name+0x366>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	7813      	ldrb	r3, [r2, #0]
 8001818:	f102 0101 	add.w	r1, r2, #1
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	60d1      	str	r1, [r2, #12]
 8001820:	e001      	b.n	8001826 <d_special_name+0x36a>
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	2b52      	cmp	r3, #82	; 0x52
 8001828:	d017      	beq.n	800185a <d_special_name+0x39e>
 800182a:	2b52      	cmp	r3, #82	; 0x52
 800182c:	dc02      	bgt.n	8001834 <d_special_name+0x378>
 800182e:	2b41      	cmp	r3, #65	; 0x41
 8001830:	d021      	beq.n	8001876 <d_special_name+0x3ba>
 8001832:	e035      	b.n	80018a0 <d_special_name+0x3e4>
 8001834:	2b56      	cmp	r3, #86	; 0x56
 8001836:	d002      	beq.n	800183e <d_special_name+0x382>
 8001838:	2b72      	cmp	r3, #114	; 0x72
 800183a:	d02c      	beq.n	8001896 <d_special_name+0x3da>
 800183c:	e030      	b.n	80018a0 <d_special_name+0x3e4>
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff f984 	bl	8000b4c <d_name>
 8001844:	4603      	mov	r3, r0
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f04f 0113 	mov.w	r1, #19
 800184c:	461a      	mov	r2, r3
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	f7fe fdc5 	bl	80003e0 <d_make_comp>
 8001856:	4603      	mov	r3, r0
 8001858:	e027      	b.n	80018aa <d_special_name+0x3ee>
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff f976 	bl	8000b4c <d_name>
 8001860:	4603      	mov	r3, r0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f04f 0114 	mov.w	r1, #20
 8001868:	461a      	mov	r2, r3
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f7fe fdb7 	bl	80003e0 <d_make_comp>
 8001872:	4603      	mov	r3, r0
 8001874:	e019      	b.n	80018aa <d_special_name+0x3ee>
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	f7ff f8f0 	bl	8000a60 <d_encoding>
 8001880:	4603      	mov	r3, r0
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f04f 0115 	mov.w	r1, #21
 8001888:	461a      	mov	r2, r3
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	f7fe fda7 	bl	80003e0 <d_make_comp>
 8001892:	4603      	mov	r3, r0
 8001894:	e009      	b.n	80018aa <d_special_name+0x3ee>
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fd32 	bl	8001300 <d_java_resource>
 800189c:	4603      	mov	r3, r0
 800189e:	e004      	b.n	80018aa <d_special_name+0x3ee>
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e001      	b.n	80018aa <d_special_name+0x3ee>
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f107 0718 	add.w	r7, r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <d_call_offset>:
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10f      	bne.n	80018e4 <d_call_offset+0x30>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <d_call_offset+0x2a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	7813      	ldrb	r3, [r2, #0]
 80018d4:	f102 0101 	add.w	r1, r2, #1
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	60d1      	str	r1, [r2, #12]
 80018dc:	e001      	b.n	80018e2 <d_call_offset+0x2e>
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b68      	cmp	r3, #104	; 0x68
 80018e8:	d103      	bne.n	80018f2 <d_call_offset+0x3e>
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fb72 	bl	8000fd4 <d_number>
 80018f0:	e021      	b.n	8001936 <d_call_offset+0x82>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2b76      	cmp	r3, #118	; 0x76
 80018f6:	d11b      	bne.n	8001930 <d_call_offset+0x7c>
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff fb6b 	bl	8000fd4 <d_number>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b5f      	cmp	r3, #95	; 0x5f
 8001906:	d108      	bne.n	800191a <d_call_offset+0x66>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f103 0201 	add.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e001      	b.n	800191e <d_call_offset+0x6a>
 800191a:	f04f 0301 	mov.w	r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <d_call_offset+0x74>
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e01d      	b.n	8001964 <d_call_offset+0xb0>
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fb53 	bl	8000fd4 <d_number>
 800192e:	e002      	b.n	8001936 <d_call_offset+0x82>
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e016      	b.n	8001964 <d_call_offset+0xb0>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b5f      	cmp	r3, #95	; 0x5f
 800193e:	d108      	bne.n	8001952 <d_call_offset+0x9e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f103 0201 	add.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e001      	b.n	8001956 <d_call_offset+0xa2>
 8001952:	f04f 0301 	mov.w	r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <d_call_offset+0xac>
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e001      	b.n	8001964 <d_call_offset+0xb0>
 8001960:	f04f 0301 	mov.w	r3, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f107 0708 	add.w	r7, r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop

08001970 <d_ctor_dtor_name>:
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01a      	beq.n	80019b6 <d_ctor_dtor_name+0x46>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d108      	bne.n	800199c <d_ctor_dtor_name+0x2c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	18d2      	adds	r2, r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
 800199a:	e00c      	b.n	80019b6 <d_ctor_dtor_name+0x46>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b16      	cmp	r3, #22
 80019a4:	d107      	bne.n	80019b6 <d_ctor_dtor_name+0x46>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	18d2      	adds	r2, r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	631a      	str	r2, [r3, #48]	; 0x30
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b43      	cmp	r3, #67	; 0x43
 80019be:	d002      	beq.n	80019c6 <d_ctor_dtor_name+0x56>
 80019c0:	2b44      	cmp	r3, #68	; 0x44
 80019c2:	d02a      	beq.n	8001a1a <d_ctor_dtor_name+0xaa>
 80019c4:	e053      	b.n	8001a6e <d_ctor_dtor_name+0xfe>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f103 0301 	add.w	r3, r3, #1
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b32      	cmp	r3, #50	; 0x32
 80019d2:	d007      	beq.n	80019e4 <d_ctor_dtor_name+0x74>
 80019d4:	2b33      	cmp	r3, #51	; 0x33
 80019d6:	d009      	beq.n	80019ec <d_ctor_dtor_name+0x7c>
 80019d8:	2b31      	cmp	r3, #49	; 0x31
 80019da:	d10b      	bne.n	80019f4 <d_ctor_dtor_name+0x84>
 80019dc:	f04f 0301 	mov.w	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	e00a      	b.n	80019fa <d_ctor_dtor_name+0x8a>
 80019e4:	f04f 0302 	mov.w	r3, #2
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e006      	b.n	80019fa <d_ctor_dtor_name+0x8a>
 80019ec:	f04f 0303 	mov.w	r3, #3
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e002      	b.n	80019fa <d_ctor_dtor_name+0x8a>
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e03b      	b.n	8001a72 <d_ctor_dtor_name+0x102>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f103 0202 	add.w	r2, r3, #2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	f7fe fe6f 	bl	80006f4 <d_make_ctor>
 8001a16:	4603      	mov	r3, r0
 8001a18:	e02b      	b.n	8001a72 <d_ctor_dtor_name+0x102>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f103 0301 	add.w	r3, r3, #1
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b31      	cmp	r3, #49	; 0x31
 8001a26:	d007      	beq.n	8001a38 <d_ctor_dtor_name+0xc8>
 8001a28:	2b32      	cmp	r3, #50	; 0x32
 8001a2a:	d009      	beq.n	8001a40 <d_ctor_dtor_name+0xd0>
 8001a2c:	2b30      	cmp	r3, #48	; 0x30
 8001a2e:	d10b      	bne.n	8001a48 <d_ctor_dtor_name+0xd8>
 8001a30:	f04f 0301 	mov.w	r3, #1
 8001a34:	73bb      	strb	r3, [r7, #14]
 8001a36:	e00a      	b.n	8001a4e <d_ctor_dtor_name+0xde>
 8001a38:	f04f 0302 	mov.w	r3, #2
 8001a3c:	73bb      	strb	r3, [r7, #14]
 8001a3e:	e006      	b.n	8001a4e <d_ctor_dtor_name+0xde>
 8001a40:	f04f 0303 	mov.w	r3, #3
 8001a44:	73bb      	strb	r3, [r7, #14]
 8001a46:	e002      	b.n	8001a4e <d_ctor_dtor_name+0xde>
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e011      	b.n	8001a72 <d_ctor_dtor_name+0x102>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f103 0202 	add.w	r2, r3, #2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	7bba      	ldrb	r2, [r7, #14]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	f7fe fe63 	bl	8000730 <d_make_dtor>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	e001      	b.n	8001a72 <d_ctor_dtor_name+0x102>
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f107 0710 	add.w	r7, r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <d_type>:
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	74fb      	strb	r3, [r7, #19]
 8001a8c:	7cfb      	ldrb	r3, [r7, #19]
 8001a8e:	2b72      	cmp	r3, #114	; 0x72
 8001a90:	d005      	beq.n	8001a9e <d_type+0x22>
 8001a92:	7cfb      	ldrb	r3, [r7, #19]
 8001a94:	2b56      	cmp	r3, #86	; 0x56
 8001a96:	d002      	beq.n	8001a9e <d_type+0x22>
 8001a98:	7cfb      	ldrb	r3, [r7, #19]
 8001a9a:	2b4b      	cmp	r3, #75	; 0x4b
 8001a9c:	d126      	bne.n	8001aec <d_type+0x70>
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f000 fba3 	bl	80021f4 <d_cv_qualifiers>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <d_type+0x42>
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e386      	b.n	80021cc <d_type+0x750>
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffdc 	bl	8001a7c <d_type>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <d_type+0x66>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f001 fc14 	bl	8003304 <d_add_substitution>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <d_type+0x6c>
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e371      	b.n	80021cc <d_type+0x750>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	e36f      	b.n	80021cc <d_type+0x750>
 8001aec:	f04f 0301 	mov.w	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	7cfb      	ldrb	r3, [r7, #19]
 8001af4:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8001af8:	2b4a      	cmp	r3, #74	; 0x4a
 8001afa:	f200 8352 	bhi.w	80021a2 <d_type+0x726>
 8001afe:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <d_type+0x88>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001cb7 	.word	0x08001cb7
 8001b08:	08001cb7 	.word	0x08001cb7
 8001b0c:	08001cb7 	.word	0x08001cb7
 8001b10:	08001cb7 	.word	0x08001cb7
 8001b14:	08001cb7 	.word	0x08001cb7
 8001b18:	08001cb7 	.word	0x08001cb7
 8001b1c:	08001cb7 	.word	0x08001cb7
 8001b20:	08001cb7 	.word	0x08001cb7
 8001b24:	08001cb7 	.word	0x08001cb7
 8001b28:	08001cb7 	.word	0x08001cb7
 8001b2c:	080021a3 	.word	0x080021a3
 8001b30:	080021a3 	.word	0x080021a3
 8001b34:	080021a3 	.word	0x080021a3
 8001b38:	080021a3 	.word	0x080021a3
 8001b3c:	080021a3 	.word	0x080021a3
 8001b40:	080021a3 	.word	0x080021a3
 8001b44:	080021a3 	.word	0x080021a3
 8001b48:	08001cc3 	.word	0x08001cc3
 8001b4c:	080021a3 	.word	0x080021a3
 8001b50:	08001e29 	.word	0x08001e29
 8001b54:	08001ead 	.word	0x08001ead
 8001b58:	080021a3 	.word	0x080021a3
 8001b5c:	08001cab 	.word	0x08001cab
 8001b60:	08001e53 	.word	0x08001e53
 8001b64:	080021a3 	.word	0x080021a3
 8001b68:	080021a3 	.word	0x080021a3
 8001b6c:	080021a3 	.word	0x080021a3
 8001b70:	080021a3 	.word	0x080021a3
 8001b74:	080021a3 	.word	0x080021a3
 8001b78:	08001ccf 	.word	0x08001ccf
 8001b7c:	08001cb7 	.word	0x08001cb7
 8001b80:	08001dab 	.word	0x08001dab
 8001b84:	08001dd5 	.word	0x08001dd5
 8001b88:	080021a3 	.word	0x080021a3
 8001b8c:	08001dff 	.word	0x08001dff
 8001b90:	08001d23 	.word	0x08001d23
 8001b94:	08001cdb 	.word	0x08001cdb
 8001b98:	08001e7d 	.word	0x08001e7d
 8001b9c:	080021a3 	.word	0x080021a3
 8001ba0:	080021a3 	.word	0x080021a3
 8001ba4:	080021a3 	.word	0x080021a3
 8001ba8:	080021a3 	.word	0x080021a3
 8001bac:	08001cb7 	.word	0x08001cb7
 8001bb0:	080021a3 	.word	0x080021a3
 8001bb4:	080021a3 	.word	0x080021a3
 8001bb8:	080021a3 	.word	0x080021a3
 8001bbc:	080021a3 	.word	0x080021a3
 8001bc0:	080021a3 	.word	0x080021a3
 8001bc4:	080021a3 	.word	0x080021a3
 8001bc8:	08001c31 	.word	0x08001c31
 8001bcc:	08001c31 	.word	0x08001c31
 8001bd0:	08001c31 	.word	0x08001c31
 8001bd4:	08001c31 	.word	0x08001c31
 8001bd8:	08001c31 	.word	0x08001c31
 8001bdc:	08001c31 	.word	0x08001c31
 8001be0:	08001c31 	.word	0x08001c31
 8001be4:	08001c31 	.word	0x08001c31
 8001be8:	08001c31 	.word	0x08001c31
 8001bec:	08001c31 	.word	0x08001c31
 8001bf0:	080021a3 	.word	0x080021a3
 8001bf4:	08001c31 	.word	0x08001c31
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c31 	.word	0x08001c31
 8001c00:	08001c31 	.word	0x08001c31
 8001c04:	080021a3 	.word	0x080021a3
 8001c08:	080021a3 	.word	0x080021a3
 8001c0c:	080021a3 	.word	0x080021a3
 8001c10:	08001c31 	.word	0x08001c31
 8001c14:	08001c31 	.word	0x08001c31
 8001c18:	08001c81 	.word	0x08001c81
 8001c1c:	08001c31 	.word	0x08001c31
 8001c20:	08001c31 	.word	0x08001c31
 8001c24:	08001c31 	.word	0x08001c31
 8001c28:	08001c31 	.word	0x08001c31
 8001c2c:	08001c31 	.word	0x08001c31
 8001c30:	7cfa      	ldrb	r2, [r7, #19]
 8001c32:	4613      	mov	r3, r2
 8001c34:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001c38:	189b      	adds	r3, r3, r2
 8001c3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001c3e:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 8001c42:	f1a2 0204 	sub.w	r2, r2, #4
 8001c46:	f246 03d4 	movw	r3, #24788	; 0x60d4
 8001c4a:	f6c0 0302 	movt	r3, #2050	; 0x802
 8001c4e:	18d3      	adds	r3, r2, r3
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe fcda 	bl	800060c <d_make_builtin_type>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	18d2      	adds	r2, r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f103 0201 	add.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	e296      	b.n	80021ae <d_type+0x732>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f103 0201 	add.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff f983 	bl	8000f98 <d_source_name>
 8001c92:	4603      	mov	r3, r0
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f04f 0124 	mov.w	r1, #36	; 0x24
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	f7fe fb9e 	bl	80003e0 <d_make_comp>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	e281      	b.n	80021ae <d_type+0x732>
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fb16 	bl	80022dc <d_function_type>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	e27b      	b.n	80021ae <d_type+0x732>
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fbf6 	bl	80024a8 <d_class_enum_type>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	e275      	b.n	80021ae <d_type+0x732>
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fbfe 	bl	80024c4 <d_array_type>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	e26f      	b.n	80021ae <d_type+0x732>
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fcc0 	bl	8002654 <d_pointer_to_member_type>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	e269      	b.n	80021ae <d_type+0x732>
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fd50 	bl	8002780 <d_template_param>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b49      	cmp	r3, #73	; 0x49
 8001cec:	f040 825c 	bne.w	80021a8 <d_type+0x72c>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f001 fb05 	bl	8003304 <d_add_substitution>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <d_type+0x28a>
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	e262      	b.n	80021cc <d_type+0x750>
 8001d06:	68bc      	ldr	r4, [r7, #8]
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fd6d 	bl	80027e8 <d_template_args>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f04f 0104 	mov.w	r1, #4
 8001d16:	4622      	mov	r2, r4
 8001d18:	f7fe fb62 	bl	80003e0 <d_make_comp>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	e242      	b.n	80021a8 <d_type+0x72c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	74bb      	strb	r3, [r7, #18]
 8001d2a:	7cbb      	ldrb	r3, [r7, #18]
 8001d2c:	2b2f      	cmp	r3, #47	; 0x2f
 8001d2e:	d902      	bls.n	8001d36 <d_type+0x2ba>
 8001d30:	7cbb      	ldrb	r3, [r7, #18]
 8001d32:	2b39      	cmp	r3, #57	; 0x39
 8001d34:	d908      	bls.n	8001d48 <d_type+0x2cc>
 8001d36:	7cbb      	ldrb	r3, [r7, #18]
 8001d38:	2b5f      	cmp	r3, #95	; 0x5f
 8001d3a:	d005      	beq.n	8001d48 <d_type+0x2cc>
 8001d3c:	7cbb      	ldrb	r3, [r7, #18]
 8001d3e:	2b40      	cmp	r3, #64	; 0x40
 8001d40:	d920      	bls.n	8001d84 <d_type+0x308>
 8001d42:	7cbb      	ldrb	r3, [r7, #18]
 8001d44:	2b5a      	cmp	r3, #90	; 0x5a
 8001d46:	d81d      	bhi.n	8001d84 <d_type+0x308>
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f04f 0100 	mov.w	r1, #0
 8001d4e:	f001 fb05 	bl	800335c <d_substitution>
 8001d52:	4603      	mov	r3, r0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b49      	cmp	r3, #73	; 0x49
 8001d5e:	d10d      	bne.n	8001d7c <d_type+0x300>
 8001d60:	68bc      	ldr	r4, [r7, #8]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fd40 	bl	80027e8 <d_template_args>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f04f 0104 	mov.w	r1, #4
 8001d70:	4622      	mov	r2, r4
 8001d72:	f7fe fb35 	bl	80003e0 <d_make_comp>
 8001d76:	4603      	mov	r3, r0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	e015      	b.n	8001da8 <d_type+0x32c>
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e011      	b.n	8001da8 <d_type+0x32c>
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fb8f 	bl	80024a8 <d_class_enum_type>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 820b 	beq.w	80021ac <d_type+0x730>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b16      	cmp	r3, #22
 8001d9c:	f040 8206 	bne.w	80021ac <d_type+0x730>
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e201      	b.n	80021ac <d_type+0x730>
 8001da8:	e200      	b.n	80021ac <d_type+0x730>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f103 0201 	add.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fe60 	bl	8001a7c <d_type>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f04f 0120 	mov.w	r1, #32
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f7fe fb09 	bl	80003e0 <d_make_comp>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	e1ec      	b.n	80021ae <d_type+0x732>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f103 0201 	add.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fe4b 	bl	8001a7c <d_type>
 8001de6:	4603      	mov	r3, r0
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f04f 011e 	mov.w	r1, #30
 8001dee:	461a      	mov	r2, r3
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f7fe faf4 	bl	80003e0 <d_make_comp>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	e1d7      	b.n	80021ae <d_type+0x732>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f103 0201 	add.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fe36 	bl	8001a7c <d_type>
 8001e10:	4603      	mov	r3, r0
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f04f 011f 	mov.w	r1, #31
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	f7fe fadf 	bl	80003e0 <d_make_comp>
 8001e22:	4603      	mov	r3, r0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	e1c2      	b.n	80021ae <d_type+0x732>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f103 0201 	add.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fe21 	bl	8001a7c <d_type>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f04f 0121 	mov.w	r1, #33	; 0x21
 8001e42:	461a      	mov	r2, r3
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	f7fe faca 	bl	80003e0 <d_make_comp>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	e1ad      	b.n	80021ae <d_type+0x732>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f103 0201 	add.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fe0c 	bl	8001a7c <d_type>
 8001e64:	4603      	mov	r3, r0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f04f 0122 	mov.w	r1, #34	; 0x22
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	f7fe fab5 	bl	80003e0 <d_make_comp>
 8001e76:	4603      	mov	r3, r0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	e198      	b.n	80021ae <d_type+0x732>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f103 0201 	add.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff f885 	bl	8000f98 <d_source_name>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fdf2 	bl	8001a7c <d_type>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f04f 011d 	mov.w	r1, #29
 8001ea2:	f7fe fa9d 	bl	80003e0 <d_make_comp>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	e180      	b.n	80021ae <d_type+0x732>
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f103 0201 	add.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <d_type+0x45c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	7813      	ldrb	r3, [r2, #0]
 8001ece:	f102 0101 	add.w	r1, r2, #1
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	60d1      	str	r1, [r2, #12]
 8001ed6:	e001      	b.n	8001edc <d_type+0x460>
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	74fb      	strb	r3, [r7, #19]
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	f1a3 0346 	sub.w	r3, r3, #70	; 0x46
 8001ee4:	2b30      	cmp	r3, #48	; 0x30
 8001ee6:	f200 8157 	bhi.w	8002198 <d_type+0x71c>
 8001eea:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <d_type+0x474>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	080020db 	.word	0x080020db
 8001ef4:	08002199 	.word	0x08002199
 8001ef8:	08002199 	.word	0x08002199
 8001efc:	08002199 	.word	0x08002199
 8001f00:	08002199 	.word	0x08002199
 8001f04:	08002199 	.word	0x08002199
 8001f08:	08002199 	.word	0x08002199
 8001f0c:	08002199 	.word	0x08002199
 8001f10:	08002199 	.word	0x08002199
 8001f14:	08002199 	.word	0x08002199
 8001f18:	08002199 	.word	0x08002199
 8001f1c:	08002199 	.word	0x08002199
 8001f20:	08002199 	.word	0x08002199
 8001f24:	08002199 	.word	0x08002199
 8001f28:	08001fb5 	.word	0x08001fb5
 8001f2c:	08002199 	.word	0x08002199
 8001f30:	08002199 	.word	0x08002199
 8001f34:	08002199 	.word	0x08002199
 8001f38:	08002199 	.word	0x08002199
 8001f3c:	08002199 	.word	0x08002199
 8001f40:	08002199 	.word	0x08002199
 8001f44:	08002199 	.word	0x08002199
 8001f48:	08002199 	.word	0x08002199
 8001f4c:	08002199 	.word	0x08002199
 8001f50:	08002199 	.word	0x08002199
 8001f54:	08002199 	.word	0x08002199
 8001f58:	08002199 	.word	0x08002199
 8001f5c:	08002199 	.word	0x08002199
 8001f60:	08002199 	.word	0x08002199
 8001f64:	08002199 	.word	0x08002199
 8001f68:	08002045 	.word	0x08002045
 8001f6c:	08002063 	.word	0x08002063
 8001f70:	08002027 	.word	0x08002027
 8001f74:	08002199 	.word	0x08002199
 8001f78:	08002081 	.word	0x08002081
 8001f7c:	080020bd 	.word	0x080020bd
 8001f80:	08002199 	.word	0x08002199
 8001f84:	08002199 	.word	0x08002199
 8001f88:	08002199 	.word	0x08002199
 8001f8c:	08002199 	.word	0x08002199
 8001f90:	0800217b 	.word	0x0800217b
 8001f94:	08002199 	.word	0x08002199
 8001f98:	08002009 	.word	0x08002009
 8001f9c:	08002199 	.word	0x08002199
 8001fa0:	08002199 	.word	0x08002199
 8001fa4:	0800209f 	.word	0x0800209f
 8001fa8:	08001fb5 	.word	0x08001fb5
 8001fac:	08002199 	.word	0x08002199
 8001fb0:	0800216f 	.word	0x0800216f
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fd23 	bl	8002a00 <d_expression>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f04f 013b 	mov.w	r1, #59	; 0x3b
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	f7fe fa0a 	bl	80003e0 <d_make_comp>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80e3 	beq.w	800219e <d_type+0x722>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00e      	beq.n	8002000 <d_type+0x584>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	2a45      	cmp	r2, #69	; 0x45
 8001fea:	bf0c      	ite	eq
 8001fec:	2200      	moveq	r2, #0
 8001fee:	2201      	movne	r2, #1
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f103 0101 	add.w	r1, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60d9      	str	r1, [r3, #12]
 8001ffa:	2a00      	cmp	r2, #0
 8001ffc:	f000 80cf 	beq.w	800219e <d_type+0x722>
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	e0ca      	b.n	800219e <d_type+0x722>
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fd37 	bl	8001a7c <d_type>
 800200e:	4603      	mov	r3, r0
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f04f 0141 	mov.w	r1, #65	; 0x41
 8002016:	461a      	mov	r2, r3
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	f7fe f9e0 	bl	80003e0 <d_make_comp>
 8002020:	4603      	mov	r3, r0
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	e0bc      	b.n	80021a0 <d_type+0x724>
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	496b      	ldr	r1, [pc, #428]	; (80021d8 <d_type+0x75c>)
 800202a:	f7fe faef 	bl	800060c <d_make_builtin_type>
 800202e:	4603      	mov	r3, r0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	18d2      	adds	r2, r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
 8002042:	e0ad      	b.n	80021a0 <d_type+0x724>
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4965      	ldr	r1, [pc, #404]	; (80021dc <d_type+0x760>)
 8002048:	f7fe fae0 	bl	800060c <d_make_builtin_type>
 800204c:	4603      	mov	r3, r0
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	18d2      	adds	r2, r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
 8002060:	e09e      	b.n	80021a0 <d_type+0x724>
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	495e      	ldr	r1, [pc, #376]	; (80021e0 <d_type+0x764>)
 8002066:	f7fe fad1 	bl	800060c <d_make_builtin_type>
 800206a:	4603      	mov	r3, r0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	18d2      	adds	r2, r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
 800207e:	e08f      	b.n	80021a0 <d_type+0x724>
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4958      	ldr	r1, [pc, #352]	; (80021e4 <d_type+0x768>)
 8002084:	f7fe fac2 	bl	800060c <d_make_builtin_type>
 8002088:	4603      	mov	r3, r0
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	18d2      	adds	r2, r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
 800209c:	e080      	b.n	80021a0 <d_type+0x724>
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4951      	ldr	r1, [pc, #324]	; (80021e8 <d_type+0x76c>)
 80020a2:	f7fe fab3 	bl	800060c <d_make_builtin_type>
 80020a6:	4603      	mov	r3, r0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	18d2      	adds	r2, r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
 80020ba:	e071      	b.n	80021a0 <d_type+0x724>
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	494b      	ldr	r1, [pc, #300]	; (80021ec <d_type+0x770>)
 80020c0:	f7fe faa4 	bl	800060c <d_make_builtin_type>
 80020c4:	4603      	mov	r3, r0
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	18d2      	adds	r2, r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
 80020d8:	e062      	b.n	80021a0 <d_type+0x724>
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe f958 	bl	8000390 <d_make_empty>
 80020e0:	4603      	mov	r3, r0
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f04f 0228 	mov.w	r2, #40	; 0x28
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68d2      	ldr	r2, [r2, #12]
 80020f2:	7812      	ldrb	r2, [r2, #0]
 80020f4:	2a2f      	cmp	r2, #47	; 0x2f
 80020f6:	d907      	bls.n	8002108 <d_type+0x68c>
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68d2      	ldr	r2, [r2, #12]
 80020fc:	7812      	ldrb	r2, [r2, #0]
 80020fe:	2a39      	cmp	r2, #57	; 0x39
 8002100:	d802      	bhi.n	8002108 <d_type+0x68c>
 8002102:	f04f 0201 	mov.w	r2, #1
 8002106:	e001      	b.n	800210c <d_type+0x690>
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	b292      	uxth	r2, r2
 800210e:	811a      	strh	r2, [r3, #8]
 8002110:	891b      	ldrh	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <d_type+0x6a0>
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe ff5c 	bl	8000fd4 <d_number>
 800211c:	68bc      	ldr	r4, [r7, #8]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fcac 	bl	8001a7c <d_type>
 8002124:	4603      	mov	r3, r0
 8002126:	6063      	str	r3, [r4, #4]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <d_type+0x6ba>
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e04a      	b.n	80021cc <d_type+0x750>
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe ff4c 	bl	8000fd4 <d_number>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <d_type+0x6da>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	7813      	ldrb	r3, [r2, #0]
 800214c:	f102 0101 	add.w	r1, r2, #1
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	60d1      	str	r1, [r2, #12]
 8002154:	e001      	b.n	800215a <d_type+0x6de>
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	74fb      	strb	r3, [r7, #19]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	7cfa      	ldrb	r2, [r7, #19]
 8002160:	2a73      	cmp	r2, #115	; 0x73
 8002162:	bf14      	ite	ne
 8002164:	2200      	movne	r2, #0
 8002166:	2201      	moveq	r2, #1
 8002168:	b292      	uxth	r2, r2
 800216a:	815a      	strh	r2, [r3, #10]
 800216c:	e018      	b.n	80021a0 <d_type+0x724>
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa28 	bl	80025c4 <d_vector_type>
 8002174:	4603      	mov	r3, r0
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	e012      	b.n	80021a0 <d_type+0x724>
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	491c      	ldr	r1, [pc, #112]	; (80021f0 <d_type+0x774>)
 800217e:	f7fe fa45 	bl	800060c <d_make_builtin_type>
 8002182:	4603      	mov	r3, r0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	18d2      	adds	r2, r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
 8002196:	e003      	b.n	80021a0 <d_type+0x724>
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e016      	b.n	80021cc <d_type+0x750>
 800219e:	bf00      	nop
 80021a0:	e005      	b.n	80021ae <d_type+0x732>
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e011      	b.n	80021cc <d_type+0x750>
 80021a8:	bf00      	nop
 80021aa:	e000      	b.n	80021ae <d_type+0x732>
 80021ac:	bf00      	nop
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <d_type+0x74e>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f001 f8a3 	bl	8003304 <d_add_substitution>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <d_type+0x74e>
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e000      	b.n	80021cc <d_type+0x750>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f107 071c 	add.w	r7, r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd90      	pop	{r4, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	080262dc 	.word	0x080262dc
 80021dc:	080262f0 	.word	0x080262f0
 80021e0:	08026304 	.word	0x08026304
 80021e4:	08026318 	.word	0x08026318
 80021e8:	0802632c 	.word	0x0802632c
 80021ec:	08026340 	.word	0x08026340
 80021f0:	08026354 	.word	0x08026354

080021f4 <d_cv_qualifiers>:
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	75fb      	strb	r3, [r7, #23]
 8002208:	e059      	b.n	80022be <d_cv_qualifiers+0xca>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f103 0201 	add.w	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	2b72      	cmp	r3, #114	; 0x72
 800221a:	d110      	bne.n	800223e <d_cv_qualifiers+0x4a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <d_cv_qualifiers+0x34>
 8002222:	f04f 031a 	mov.w	r3, #26
 8002226:	e001      	b.n	800222c <d_cv_qualifiers+0x38>
 8002228:	f04f 0317 	mov.w	r3, #23
 800222c:	75bb      	strb	r3, [r7, #22]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f103 0309 	add.w	r3, r3, #9
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
 800223c:	e023      	b.n	8002286 <d_cv_qualifiers+0x92>
 800223e:	7dfb      	ldrb	r3, [r7, #23]
 8002240:	2b56      	cmp	r3, #86	; 0x56
 8002242:	d110      	bne.n	8002266 <d_cv_qualifiers+0x72>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <d_cv_qualifiers+0x5c>
 800224a:	f04f 031b 	mov.w	r3, #27
 800224e:	e001      	b.n	8002254 <d_cv_qualifiers+0x60>
 8002250:	f04f 0318 	mov.w	r3, #24
 8002254:	75bb      	strb	r3, [r7, #22]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f103 0309 	add.w	r3, r3, #9
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
 8002264:	e00f      	b.n	8002286 <d_cv_qualifiers+0x92>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <d_cv_qualifiers+0x7e>
 800226c:	f04f 031c 	mov.w	r3, #28
 8002270:	e001      	b.n	8002276 <d_cv_qualifiers+0x82>
 8002272:	f04f 0319 	mov.w	r3, #25
 8002276:	75bb      	strb	r3, [r7, #22]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f103 0306 	add.w	r3, r3, #6
 8002280:	461a      	mov	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
 8002286:	7dbb      	ldrb	r3, [r7, #22]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	4619      	mov	r1, r3
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	f7fe f8a4 	bl	80003e0 <d_make_comp>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <d_cv_qualifiers+0xb8>
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	e012      	b.n	80022d2 <d_cv_qualifiers+0xde>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f103 0304 	add.w	r3, r3, #4
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	75fb      	strb	r3, [r7, #23]
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b72      	cmp	r3, #114	; 0x72
 80022c2:	d0a2      	beq.n	800220a <d_cv_qualifiers+0x16>
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b56      	cmp	r3, #86	; 0x56
 80022c8:	d09f      	beq.n	800220a <d_cv_qualifiers+0x16>
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	2b4b      	cmp	r3, #75	; 0x4b
 80022ce:	d09c      	beq.n	800220a <d_cv_qualifiers+0x16>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f107 0718 	add.w	r7, r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <d_function_type>:
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b46      	cmp	r3, #70	; 0x46
 80022ec:	d108      	bne.n	8002300 <d_function_type+0x24>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f103 0201 	add.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e001      	b.n	8002304 <d_function_type+0x28>
 8002300:	f04f 0301 	mov.w	r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <d_function_type+0x32>
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e027      	b.n	800235e <d_function_type+0x82>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b59      	cmp	r3, #89	; 0x59
 8002316:	d105      	bne.n	8002324 <d_function_type+0x48>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f103 0201 	add.w	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f04f 0101 	mov.w	r1, #1
 800232a:	f000 f87f 	bl	800242c <d_bare_function_type>
 800232e:	4603      	mov	r3, r0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b45      	cmp	r3, #69	; 0x45
 800233a:	d108      	bne.n	800234e <d_function_type+0x72>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f103 0201 	add.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e001      	b.n	8002352 <d_function_type+0x76>
 800234e:	f04f 0301 	mov.w	r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <d_function_type+0x80>
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	e000      	b.n	800235e <d_function_type+0x82>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4618      	mov	r0, r3
 8002360:	f107 0710 	add.w	r7, r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <d_parmlist>:
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	74fb      	strb	r3, [r7, #19]
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d028      	beq.n	80023dc <d_parmlist+0x74>
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	2b45      	cmp	r3, #69	; 0x45
 800238e:	d025      	beq.n	80023dc <d_parmlist+0x74>
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b2e      	cmp	r3, #46	; 0x2e
 8002394:	d022      	beq.n	80023dc <d_parmlist+0x74>
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fb70 	bl	8001a7c <d_type>
 800239c:	4603      	mov	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <d_parmlist+0x44>
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	e03a      	b.n	8002422 <d_parmlist+0xba>
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f04f 012a 	mov.w	r1, #42	; 0x2a
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	f7fe f812 	bl	80003e0 <d_make_comp>
 80023bc:	4602      	mov	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <d_parmlist+0x68>
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e028      	b.n	8002422 <d_parmlist+0xba>
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f103 0308 	add.w	r3, r3, #8
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	e7cf      	b.n	800237c <d_parmlist+0x14>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <d_parmlist+0x80>
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	e01c      	b.n	8002422 <d_parmlist+0xba>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d117      	bne.n	8002420 <d_parmlist+0xb8>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b23      	cmp	r3, #35	; 0x23
 80023f8:	d112      	bne.n	8002420 <d_parmlist+0xb8>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	7c1b      	ldrb	r3, [r3, #16]
 8002402:	2b09      	cmp	r3, #9
 8002404:	d10c      	bne.n	8002420 <d_parmlist+0xb8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	1ad2      	subs	r2, r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4618      	mov	r0, r3
 8002424:	f107 0718 	add.w	r7, r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <d_bare_function_type>:
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	74fb      	strb	r3, [r7, #19]
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b4a      	cmp	r3, #74	; 0x4a
 8002442:	d108      	bne.n	8002456 <d_bare_function_type+0x2a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f103 0201 	add.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	f04f 0301 	mov.w	r3, #1
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <d_bare_function_type+0x46>
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff fb0d 	bl	8001a7c <d_type>
 8002462:	4603      	mov	r3, r0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <d_bare_function_type+0x4c>
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e015      	b.n	800249e <d_bare_function_type+0x72>
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff75 	bl	8002368 <d_parmlist>
 800247e:	4603      	mov	r3, r0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <d_bare_function_type+0x62>
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e007      	b.n	800249e <d_bare_function_type+0x72>
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f04f 0125 	mov.w	r1, #37	; 0x25
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f7fd ffa2 	bl	80003e0 <d_make_comp>
 800249c:	4603      	mov	r3, r0
 800249e:	4618      	mov	r0, r3
 80024a0:	f107 0718 	add.w	r7, r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <d_class_enum_type>:
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fb4b 	bl	8000b4c <d_name>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f107 0708 	add.w	r7, r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop

080024c4 <d_array_type>:
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b41      	cmp	r3, #65	; 0x41
 80024d4:	d108      	bne.n	80024e8 <d_array_type+0x24>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f103 0201 	add.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e001      	b.n	80024ec <d_array_type+0x28>
 80024e8:	f04f 0301 	mov.w	r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <d_array_type+0x32>
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e061      	b.n	80025ba <d_array_type+0xf6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	74fb      	strb	r3, [r7, #19]
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	2b5f      	cmp	r3, #95	; 0x5f
 8002502:	d103      	bne.n	800250c <d_array_type+0x48>
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e036      	b.n	800257a <d_array_type+0xb6>
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	2b2f      	cmp	r3, #47	; 0x2f
 8002510:	d927      	bls.n	8002562 <d_array_type+0x9e>
 8002512:	7cfb      	ldrb	r3, [r7, #19]
 8002514:	2b39      	cmp	r3, #57	; 0x39
 8002516:	d824      	bhi.n	8002562 <d_array_type+0x9e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f103 0201 	add.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	74fb      	strb	r3, [r7, #19]
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b2f      	cmp	r3, #47	; 0x2f
 8002536:	d902      	bls.n	800253e <d_array_type+0x7a>
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b39      	cmp	r3, #57	; 0x39
 800253c:	d9ef      	bls.n	800251e <d_array_type+0x5a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	461a      	mov	r2, r3
 800254e:	f7fe f841 	bl	80005d4 <d_make_name>
 8002552:	4603      	mov	r3, r0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10d      	bne.n	8002578 <d_array_type+0xb4>
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e02b      	b.n	80025ba <d_array_type+0xf6>
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa4c 	bl	8002a00 <d_expression>
 8002568:	4603      	mov	r3, r0
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d103      	bne.n	800257a <d_array_type+0xb6>
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e020      	b.n	80025ba <d_array_type+0xf6>
 8002578:	bf00      	nop
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b5f      	cmp	r3, #95	; 0x5f
 8002582:	d108      	bne.n	8002596 <d_array_type+0xd2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f103 0201 	add.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e001      	b.n	800259a <d_array_type+0xd6>
 8002596:	f04f 0301 	mov.w	r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <d_array_type+0xe0>
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e00a      	b.n	80025ba <d_array_type+0xf6>
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff fa69 	bl	8001a7c <d_type>
 80025aa:	4603      	mov	r3, r0
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f04f 0126 	mov.w	r1, #38	; 0x26
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	f7fd ff14 	bl	80003e0 <d_make_comp>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f107 0718 	add.w	r7, r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <d_vector_type>:
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	72fb      	strb	r3, [r7, #11]
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	2b5f      	cmp	r3, #95	; 0x5f
 80025d8:	d10b      	bne.n	80025f2 <d_vector_type+0x2e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f103 0201 	add.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fa0a 	bl	8002a00 <d_expression>
 80025ec:	4603      	mov	r3, r0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e004      	b.n	80025fc <d_vector_type+0x38>
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fd38 	bl	8001068 <d_number_component>
 80025f8:	4603      	mov	r3, r0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <d_vector_type+0x44>
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e01f      	b.n	8002648 <d_vector_type+0x84>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b5f      	cmp	r3, #95	; 0x5f
 8002610:	d108      	bne.n	8002624 <d_vector_type+0x60>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f103 0201 	add.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e001      	b.n	8002628 <d_vector_type+0x64>
 8002624:	f04f 0301 	mov.w	r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <d_vector_type+0x6e>
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e00a      	b.n	8002648 <d_vector_type+0x84>
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fa22 	bl	8001a7c <d_type>
 8002638:	4603      	mov	r3, r0
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f04f 0129 	mov.w	r1, #41	; 0x29
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	f7fd fecd 	bl	80003e0 <d_make_comp>
 8002646:	4603      	mov	r3, r0
 8002648:	4618      	mov	r0, r3
 800264a:	f107 0710 	add.w	r7, r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop

08002654 <d_pointer_to_member_type>:
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b4d      	cmp	r3, #77	; 0x4d
 8002664:	d108      	bne.n	8002678 <d_pointer_to_member_type+0x24>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f103 0201 	add.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	e001      	b.n	800267c <d_pointer_to_member_type+0x28>
 8002678:	f04f 0301 	mov.w	r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <d_pointer_to_member_type+0x32>
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e03e      	b.n	8002704 <d_pointer_to_member_type+0xb0>
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff f9f8 	bl	8001a7c <d_type>
 800268c:	4603      	mov	r3, r0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4619      	mov	r1, r3
 8002698:	f04f 0201 	mov.w	r2, #1
 800269c:	f7ff fdaa 	bl	80021f4 <d_cv_qualifiers>
 80026a0:	4603      	mov	r3, r0
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <d_pointer_to_member_type+0x5c>
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e029      	b.n	8002704 <d_pointer_to_member_type+0xb0>
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff f9e3 	bl	8001a7c <d_type>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <d_pointer_to_member_type+0x76>
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e01c      	b.n	8002704 <d_pointer_to_member_type+0xb0>
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d00f      	beq.n	80026f4 <d_pointer_to_member_type+0xa0>
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b25      	cmp	r3, #37	; 0x25
 80026dc:	d00a      	beq.n	80026f4 <d_pointer_to_member_type+0xa0>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4619      	mov	r1, r3
 80026e4:	f000 fe0e 	bl	8003304 <d_add_substitution>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <d_pointer_to_member_type+0xa0>
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	e007      	b.n	8002704 <d_pointer_to_member_type+0xb0>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f04f 0127 	mov.w	r1, #39	; 0x27
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	f7fd fe6f 	bl	80003e0 <d_make_comp>
 8002702:	4603      	mov	r3, r0
 8002704:	4618      	mov	r0, r3
 8002706:	f107 0718 	add.w	r7, r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop

08002710 <d_compact_number>:
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b5f      	cmp	r3, #95	; 0x5f
 8002720:	d103      	bne.n	800272a <d_compact_number+0x1a>
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e00e      	b.n	8002748 <d_compact_number+0x38>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b6e      	cmp	r3, #110	; 0x6e
 8002732:	d102      	bne.n	800273a <d_compact_number+0x2a>
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	e01c      	b.n	8002774 <d_compact_number+0x64>
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe fc4a 	bl	8000fd4 <d_number>
 8002740:	4603      	mov	r3, r0
 8002742:	f103 0301 	add.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b5f      	cmp	r3, #95	; 0x5f
 8002750:	d108      	bne.n	8002764 <d_compact_number+0x54>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f103 0201 	add.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e001      	b.n	8002768 <d_compact_number+0x58>
 8002764:	f04f 0301 	mov.w	r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <d_compact_number+0x62>
 800276c:	f04f 33ff 	mov.w	r3, #4294967295
 8002770:	e000      	b.n	8002774 <d_compact_number+0x64>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4618      	mov	r0, r3
 8002776:	f107 0710 	add.w	r7, r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop

08002780 <d_template_param>:
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b54      	cmp	r3, #84	; 0x54
 8002790:	d108      	bne.n	80027a4 <d_template_param+0x24>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f103 0201 	add.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e001      	b.n	80027a8 <d_template_param+0x28>
 80027a4:	f04f 0301 	mov.w	r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <d_template_param+0x32>
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e015      	b.n	80027de <d_template_param+0x5e>
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ffac 	bl	8002710 <d_compact_number>
 80027b8:	4603      	mov	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da02      	bge.n	80027c8 <d_template_param+0x48>
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e00a      	b.n	80027de <d_template_param+0x5e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f103 0201 	add.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	68f9      	ldr	r1, [r7, #12]
 80027d8:	f7fd ffc8 	bl	800076c <d_make_template_param>
 80027dc:	4603      	mov	r3, r0
 80027de:	4618      	mov	r0, r3
 80027e0:	f107 0710 	add.w	r7, r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <d_template_args>:
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b49      	cmp	r3, #73	; 0x49
 80027fe:	d108      	bne.n	8002812 <d_template_args+0x2a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f103 0201 	add.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e001      	b.n	8002816 <d_template_args+0x2e>
 8002812:	f04f 0301 	mov.w	r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <d_template_args+0x38>
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e04f      	b.n	80028c0 <d_template_args+0xd8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b45      	cmp	r3, #69	; 0x45
 8002828:	d110      	bne.n	800284c <d_template_args+0x64>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f103 0201 	add.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f04f 012b 	mov.w	r1, #43	; 0x2b
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	f7fd fdcc 	bl	80003e0 <d_make_comp>
 8002848:	4603      	mov	r3, r0
 800284a:	e039      	b.n	80028c0 <d_template_args+0xd8>
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	f107 0308 	add.w	r3, r7, #8
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e000      	b.n	800285c <d_template_args+0x74>
 800285a:	bf00      	nop
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f835 	bl	80028cc <d_template_arg>
 8002862:	4603      	mov	r3, r0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <d_template_args+0x8a>
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	e026      	b.n	80028c0 <d_template_args+0xd8>
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f04f 012b 	mov.w	r1, #43	; 0x2b
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f7fd fdaf 	bl	80003e0 <d_make_comp>
 8002882:	4602      	mov	r2, r0
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <d_template_args+0xae>
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e014      	b.n	80028c0 <d_template_args+0xd8>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f103 0308 	add.w	r3, r3, #8
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b45      	cmp	r3, #69	; 0x45
 80028a8:	d1d7      	bne.n	800285a <d_template_args+0x72>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f103 0201 	add.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	bf00      	nop
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f107 0718 	add.w	r7, r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop

080028cc <d_template_arg>:
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b4c      	cmp	r3, #76	; 0x4c
 80028dc:	d026      	beq.n	800292c <d_template_arg+0x60>
 80028de:	2b58      	cmp	r3, #88	; 0x58
 80028e0:	d002      	beq.n	80028e8 <d_template_arg+0x1c>
 80028e2:	2b49      	cmp	r3, #73	; 0x49
 80028e4:	d027      	beq.n	8002936 <d_template_arg+0x6a>
 80028e6:	e02b      	b.n	8002940 <d_template_arg+0x74>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f103 0201 	add.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	60da      	str	r2, [r3, #12]
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f883 	bl	8002a00 <d_expression>
 80028fa:	4603      	mov	r3, r0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b45      	cmp	r3, #69	; 0x45
 8002906:	d108      	bne.n	800291a <d_template_arg+0x4e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f103 0201 	add.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e001      	b.n	800291e <d_template_arg+0x52>
 800291a:	f04f 0301 	mov.w	r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <d_template_arg+0x5c>
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e00f      	b.n	8002948 <d_template_arg+0x7c>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	e00d      	b.n	8002948 <d_template_arg+0x7c>
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fa37 	bl	8002da0 <d_expr_primary>
 8002932:	4603      	mov	r3, r0
 8002934:	e008      	b.n	8002948 <d_template_arg+0x7c>
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ff56 	bl	80027e8 <d_template_args>
 800293c:	4603      	mov	r3, r0
 800293e:	e003      	b.n	8002948 <d_template_arg+0x7c>
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff f89b 	bl	8001a7c <d_type>
 8002946:	4603      	mov	r3, r0
 8002948:	4618      	mov	r0, r3
 800294a:	f107 0710 	add.w	r7, r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop

08002954 <d_exprlist>:
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b45      	cmp	r3, #69	; 0x45
 8002970:	d111      	bne.n	8002996 <d_exprlist+0x42>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f103 0201 	add.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f04f 012a 	mov.w	r1, #42	; 0x2a
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	f7fd fd28 	bl	80003e0 <d_make_comp>
 8002990:	4603      	mov	r3, r0
 8002992:	e02f      	b.n	80029f4 <d_exprlist+0xa0>
 8002994:	bf00      	nop
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f832 	bl	8002a00 <d_expression>
 800299c:	4603      	mov	r3, r0
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d102      	bne.n	80029ac <d_exprlist+0x58>
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e023      	b.n	80029f4 <d_exprlist+0xa0>
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f04f 012a 	mov.w	r1, #42	; 0x2a
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f7fd fd12 	bl	80003e0 <d_make_comp>
 80029bc:	4602      	mov	r2, r0
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <d_exprlist+0x7c>
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e011      	b.n	80029f4 <d_exprlist+0xa0>
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f103 0308 	add.w	r3, r3, #8
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b45      	cmp	r3, #69	; 0x45
 80029e2:	d1d7      	bne.n	8002994 <d_exprlist+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f103 0201 	add.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
 80029f0:	bf00      	nop
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f107 0718 	add.w	r7, r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop

08002a00 <d_expression>:
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b090      	sub	sp, #64	; 0x40
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002a12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a16:	2b4c      	cmp	r3, #76	; 0x4c
 8002a18:	d104      	bne.n	8002a24 <d_expression+0x24>
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f9c0 	bl	8002da0 <d_expr_primary>
 8002a20:	4603      	mov	r3, r0
 8002a22:	e1b8      	b.n	8002d96 <d_expression+0x396>
 8002a24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a28:	2b54      	cmp	r3, #84	; 0x54
 8002a2a:	d104      	bne.n	8002a36 <d_expression+0x36>
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fea7 	bl	8002780 <d_template_param>
 8002a32:	4603      	mov	r3, r0
 8002a34:	e1af      	b.n	8002d96 <d_expression+0x396>
 8002a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a3a:	2b73      	cmp	r3, #115	; 0x73
 8002a3c:	d137      	bne.n	8002aae <d_expression+0xae>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f103 0301 	add.w	r3, r3, #1
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b72      	cmp	r3, #114	; 0x72
 8002a4a:	d130      	bne.n	8002aae <d_expression+0xae>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f103 0202 	add.w	r2, r3, #2
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff f80f 	bl	8001a7c <d_type>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fa1a 	bl	8000e9c <d_unqualified_name>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b49      	cmp	r3, #73	; 0x49
 8002a74:	d008      	beq.n	8002a88 <d_expression+0x88>
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f04f 0101 	mov.w	r1, #1
 8002a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	f7fd fcae 	bl	80003e0 <d_make_comp>
 8002a84:	4603      	mov	r3, r0
 8002a86:	e186      	b.n	8002d96 <d_expression+0x396>
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fead 	bl	80027e8 <d_template_args>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f04f 0104 	mov.w	r1, #4
 8002a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a98:	f7fd fca2 	bl	80003e0 <d_make_comp>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f04f 0101 	mov.w	r1, #1
 8002aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa6:	f7fd fc9b 	bl	80003e0 <d_make_comp>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	e173      	b.n	8002d96 <d_expression+0x396>
 8002aae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab2:	2b73      	cmp	r3, #115	; 0x73
 8002ab4:	d11a      	bne.n	8002aec <d_expression+0xec>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f103 0301 	add.w	r3, r3, #1
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d113      	bne.n	8002aec <d_expression+0xec>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f103 0202 	add.w	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff95 	bl	8002a00 <d_expression>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f04f 0141 	mov.w	r1, #65	; 0x41
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	f7fd fc7c 	bl	80003e0 <d_make_comp>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	e154      	b.n	8002d96 <d_expression+0x396>
 8002aec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002af0:	2b66      	cmp	r3, #102	; 0x66
 8002af2:	d11d      	bne.n	8002b30 <d_expression+0x130>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f103 0301 	add.w	r3, r3, #1
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b70      	cmp	r3, #112	; 0x70
 8002b00:	d116      	bne.n	8002b30 <d_expression+0x130>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f103 0202 	add.w	r2, r3, #2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fdfe 	bl	8002710 <d_compact_number>
 8002b14:	4603      	mov	r3, r0
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	da02      	bge.n	8002b24 <d_expression+0x124>
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e138      	b.n	8002d96 <d_expression+0x396>
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b28:	f7fd fe3a 	bl	80007a0 <d_make_function_param>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	e132      	b.n	8002d96 <d_expression+0x396>
 8002b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b34:	2b2f      	cmp	r3, #47	; 0x2f
 8002b36:	d903      	bls.n	8002b40 <d_expression+0x140>
 8002b38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b3c:	2b39      	cmp	r3, #57	; 0x39
 8002b3e:	d90a      	bls.n	8002b56 <d_expression+0x156>
 8002b40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b44:	2b6f      	cmp	r3, #111	; 0x6f
 8002b46:	d12e      	bne.n	8002ba6 <d_expression+0x1a6>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f103 0301 	add.w	r3, r3, #1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b6e      	cmp	r3, #110	; 0x6e
 8002b54:	d127      	bne.n	8002ba6 <d_expression+0x1a6>
 8002b56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b5a:	2b6f      	cmp	r3, #111	; 0x6f
 8002b5c:	d105      	bne.n	8002b6a <d_expression+0x16a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f103 0202 	add.w	r2, r3, #2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe f996 	bl	8000e9c <d_unqualified_name>
 8002b70:	4603      	mov	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d102      	bne.n	8002b80 <d_expression+0x180>
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e10a      	b.n	8002d96 <d_expression+0x396>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b49      	cmp	r3, #73	; 0x49
 8002b88:	d10b      	bne.n	8002ba2 <d_expression+0x1a2>
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff fe2c 	bl	80027e8 <d_template_args>
 8002b90:	4603      	mov	r3, r0
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f04f 0104 	mov.w	r1, #4
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	f7fd fc21 	bl	80003e0 <d_make_comp>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	e0f9      	b.n	8002d96 <d_expression+0x396>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	e0f7      	b.n	8002d96 <d_expression+0x396>
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe faea 	bl	8001180 <d_operator_name>
 8002bac:	4603      	mov	r3, r0
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <d_expression+0x1bc>
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e0ec      	b.n	8002d96 <d_expression+0x396>
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b2c      	cmp	r3, #44	; 0x2c
 8002bc2:	d109      	bne.n	8002bd8 <d_expression+0x1d8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f1a3 0302 	sub.w	r3, r3, #2
 8002bd2:	18d2      	adds	r2, r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b2c      	cmp	r3, #44	; 0x2c
 8002bde:	d118      	bne.n	8002c12 <d_expression+0x212>
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f246 5110 	movw	r1, #25872	; 0x6510
 8002bec:	f6c0 0102 	movt	r1, #2050	; 0x802
 8002bf0:	f005 fa1a 	bl	8008028 <strcmp>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10b      	bne.n	8002c12 <d_expression+0x212>
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe ff3e 	bl	8001a7c <d_type>
 8002c00:	4603      	mov	r3, r0
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	f7fd fbe9 	bl	80003e0 <d_make_comp>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	e0c1      	b.n	8002d96 <d_expression+0x396>
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b2d      	cmp	r3, #45	; 0x2d
 8002c18:	d00b      	beq.n	8002c32 <d_expression+0x232>
 8002c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c1c:	d00d      	beq.n	8002c3a <d_expression+0x23a>
 8002c1e:	2b2c      	cmp	r3, #44	; 0x2c
 8002c20:	d002      	beq.n	8002c28 <d_expression+0x228>
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e0b6      	b.n	8002d96 <d_expression+0x396>
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c30:	e007      	b.n	8002c42 <d_expression+0x242>
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c38:	e003      	b.n	8002c42 <d_expression+0x242>
 8002c3a:	f04f 0301 	mov.w	r3, #1
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c40:	bf00      	nop
 8002c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d027      	beq.n	8002c98 <d_expression+0x298>
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d07e      	beq.n	8002d4a <d_expression+0x34a>
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f040 80a0 	bne.w	8002d92 <d_expression+0x392>
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b2e      	cmp	r3, #46	; 0x2e
 8002c58:	d110      	bne.n	8002c7c <d_expression+0x27c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b5f      	cmp	r3, #95	; 0x5f
 8002c62:	d10b      	bne.n	8002c7c <d_expression+0x27c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f103 0201 	add.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fe6f 	bl	8002954 <d_exprlist>
 8002c76:	4603      	mov	r3, r0
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c7a:	e004      	b.n	8002c86 <d_expression+0x286>
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff febf 	bl	8002a00 <d_expression>
 8002c82:	4603      	mov	r3, r0
 8002c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	f7fd fba6 	bl	80003e0 <d_make_comp>
 8002c94:	4603      	mov	r3, r0
 8002c96:	e07e      	b.n	8002d96 <d_expression+0x396>
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fead 	bl	8002a00 <d_expression>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	69f8      	ldr	r0, [r7, #28]
 8002cac:	f246 31b4 	movw	r1, #25524	; 0x63b4
 8002cb0:	f6c0 0102 	movt	r1, #2050	; 0x802
 8002cb4:	f005 f9b8 	bl	8008028 <strcmp>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <d_expression+0x2ca>
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fe48 	bl	8002954 <d_exprlist>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc8:	e02f      	b.n	8002d2a <d_expression+0x32a>
 8002cca:	69f8      	ldr	r0, [r7, #28]
 8002ccc:	f246 31f8 	movw	r1, #25592	; 0x63f8
 8002cd0:	f6c0 0102 	movt	r1, #2050	; 0x802
 8002cd4:	f005 f9a8 	bl	8008028 <strcmp>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <d_expression+0x2f2>
 8002cde:	69f8      	ldr	r0, [r7, #28]
 8002ce0:	f246 41e0 	movw	r1, #25824	; 0x64e0
 8002ce4:	f6c0 0102 	movt	r1, #2050	; 0x802
 8002ce8:	f005 f99e 	bl	8008028 <strcmp>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d116      	bne.n	8002d20 <d_expression+0x320>
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe f8d2 	bl	8000e9c <d_unqualified_name>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b49      	cmp	r3, #73	; 0x49
 8002d04:	d111      	bne.n	8002d2a <d_expression+0x32a>
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fd6e 	bl	80027e8 <d_template_args>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f04f 0104 	mov.w	r1, #4
 8002d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d16:	f7fd fb63 	bl	80003e0 <d_make_comp>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1e:	e004      	b.n	8002d2a <d_expression+0x32a>
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff fe6d 	bl	8002a00 <d_expression>
 8002d26:	4603      	mov	r3, r0
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f04f 0131 	mov.w	r1, #49	; 0x31
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d34:	f7fd fb54 	bl	80003e0 <d_make_comp>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f04f 0130 	mov.w	r1, #48	; 0x30
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	f7fd fb4d 	bl	80003e0 <d_make_comp>
 8002d46:	4603      	mov	r3, r0
 8002d48:	e025      	b.n	8002d96 <d_expression+0x396>
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fe58 	bl	8002a00 <d_expression>
 8002d50:	4603      	mov	r3, r0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff fe53 	bl	8002a00 <d_expression>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff fe4e 	bl	8002a00 <d_expression>
 8002d64:	4603      	mov	r3, r0
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f04f 0134 	mov.w	r1, #52	; 0x34
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	f7fd fb37 	bl	80003e0 <d_make_comp>
 8002d72:	4603      	mov	r3, r0
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f04f 0133 	mov.w	r1, #51	; 0x33
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	f7fd fb30 	bl	80003e0 <d_make_comp>
 8002d80:	4603      	mov	r3, r0
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f04f 0132 	mov.w	r1, #50	; 0x32
 8002d88:	6a3a      	ldr	r2, [r7, #32]
 8002d8a:	f7fd fb29 	bl	80003e0 <d_make_comp>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	e001      	b.n	8002d96 <d_expression+0x396>
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <d_expr_primary>:
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b4c      	cmp	r3, #76	; 0x4c
 8002db0:	d108      	bne.n	8002dc4 <d_expr_primary+0x24>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f103 0201 	add.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e001      	b.n	8002dc8 <d_expr_primary+0x28>
 8002dc4:	f04f 0301 	mov.w	r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <d_expr_primary+0x32>
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e07e      	b.n	8002ed0 <d_expr_primary+0x130>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b5f      	cmp	r3, #95	; 0x5f
 8002dda:	d004      	beq.n	8002de6 <d_expr_primary+0x46>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b5a      	cmp	r3, #90	; 0x5a
 8002de4:	d107      	bne.n	8002df6 <d_expr_primary+0x56>
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f04f 0100 	mov.w	r1, #0
 8002dec:	f7fd fd10 	bl	8000810 <d_mangled_name>
 8002df0:	4603      	mov	r3, r0
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e056      	b.n	8002ea4 <d_expr_primary+0x104>
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fe40 	bl	8001a7c <d_type>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d102      	bne.n	8002e0c <d_expr_primary+0x6c>
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e061      	b.n	8002ed0 <d_expr_primary+0x130>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b23      	cmp	r3, #35	; 0x23
 8002e12:	d10c      	bne.n	8002e2e <d_expr_primary+0x8e>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	7c1b      	ldrb	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <d_expr_primary+0x8e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	1ad2      	subs	r2, r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e2e:	f04f 0335 	mov.w	r3, #53	; 0x35
 8002e32:	74fb      	strb	r3, [r7, #19]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b6e      	cmp	r3, #110	; 0x6e
 8002e3c:	d108      	bne.n	8002e50 <d_expr_primary+0xb0>
 8002e3e:	f04f 0336 	mov.w	r3, #54	; 0x36
 8002e42:	74fb      	strb	r3, [r7, #19]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f103 0201 	add.w	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	e00d      	b.n	8002e74 <d_expr_primary+0xd4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <d_expr_primary+0xc8>
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e033      	b.n	8002ed0 <d_expr_primary+0x130>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f103 0201 	add.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b45      	cmp	r3, #69	; 0x45
 8002e7c:	d1ec      	bne.n	8002e58 <d_expr_primary+0xb8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f7fd fba1 	bl	80005d4 <d_make_name>
 8002e92:	4603      	mov	r3, r0
 8002e94:	7cfa      	ldrb	r2, [r7, #19]
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	f7fd faa0 	bl	80003e0 <d_make_comp>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b45      	cmp	r3, #69	; 0x45
 8002eac:	d108      	bne.n	8002ec0 <d_expr_primary+0x120>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f103 0201 	add.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e001      	b.n	8002ec4 <d_expr_primary+0x124>
 8002ec0:	f04f 0301 	mov.w	r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <d_expr_primary+0x12e>
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <d_expr_primary+0x130>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f107 0718 	add.w	r7, r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop

08002edc <d_local_name>:
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b5a      	cmp	r3, #90	; 0x5a
 8002eec:	d108      	bne.n	8002f00 <d_local_name+0x24>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f103 0201 	add.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e001      	b.n	8002f04 <d_local_name+0x28>
 8002f00:	f04f 0301 	mov.w	r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <d_local_name+0x32>
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e084      	b.n	8003018 <d_local_name+0x13c>
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	f7fd fda4 	bl	8000a60 <d_encoding>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b45      	cmp	r3, #69	; 0x45
 8002f24:	d108      	bne.n	8002f38 <d_local_name+0x5c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f103 0201 	add.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e001      	b.n	8002f3c <d_local_name+0x60>
 8002f38:	f04f 0301 	mov.w	r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <d_local_name+0x6a>
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e068      	b.n	8003018 <d_local_name+0x13c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b73      	cmp	r3, #115	; 0x73
 8002f4e:	d120      	bne.n	8002f92 <d_local_name+0xb6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f103 0201 	add.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f861 	bl	8003024 <d_discriminator>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <d_local_name+0x92>
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e054      	b.n	8003018 <d_local_name+0x13c>
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f646 0184 	movw	r1, #26756	; 0x6884
 8002f74:	f6c0 0102 	movt	r1, #2050	; 0x802
 8002f78:	f04f 020e 	mov.w	r2, #14
 8002f7c:	f7fd fb2a 	bl	80005d4 <d_make_name>
 8002f80:	4603      	mov	r3, r0
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f04f 0102 	mov.w	r1, #2
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	f7fd fa29 	bl	80003e0 <d_make_comp>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	e042      	b.n	8003018 <d_local_name+0x13c>
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d110      	bne.n	8002fc4 <d_local_name+0xe8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f103 0201 	add.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff fbae 	bl	8002710 <d_compact_number>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	da02      	bge.n	8002fc4 <d_local_name+0xe8>
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e029      	b.n	8003018 <d_local_name+0x13c>
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fd fdc1 	bl	8000b4c <d_name>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00f      	beq.n	8002ff4 <d_local_name+0x118>
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8002fda:	d00a      	beq.n	8002ff2 <d_local_name+0x116>
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d008      	beq.n	8002ff2 <d_local_name+0x116>
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f81f 	bl	8003024 <d_discriminator>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d103      	bne.n	8002ff4 <d_local_name+0x118>
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e012      	b.n	8003018 <d_local_name+0x13c>
 8002ff2:	bf00      	nop
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db06      	blt.n	8003008 <d_local_name+0x12c>
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	6939      	ldr	r1, [r7, #16]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	f7fd fb5a 	bl	80006b8 <d_make_default_arg>
 8003004:	4603      	mov	r3, r0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f04f 0102 	mov.w	r1, #2
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f7fd f9e5 	bl	80003e0 <d_make_comp>
 8003016:	4603      	mov	r3, r0
 8003018:	4618      	mov	r0, r3
 800301a:	f107 0718 	add.w	r7, r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop

08003024 <d_discriminator>:
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b5f      	cmp	r3, #95	; 0x5f
 8003034:	d002      	beq.n	800303c <d_discriminator+0x18>
 8003036:	f04f 0301 	mov.w	r3, #1
 800303a:	e012      	b.n	8003062 <d_discriminator+0x3e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f103 0201 	add.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60da      	str	r2, [r3, #12]
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7fd ffc3 	bl	8000fd4 <d_number>
 800304e:	4603      	mov	r3, r0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	da02      	bge.n	800305e <d_discriminator+0x3a>
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	e001      	b.n	8003062 <d_discriminator+0x3e>
 800305e:	f04f 0301 	mov.w	r3, #1
 8003062:	4618      	mov	r0, r3
 8003064:	f107 0710 	add.w	r7, r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <d_lambda>:
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b55      	cmp	r3, #85	; 0x55
 800307c:	d108      	bne.n	8003090 <d_lambda+0x24>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f103 0201 	add.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e001      	b.n	8003094 <d_lambda+0x28>
 8003090:	f04f 0301 	mov.w	r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <d_lambda+0x32>
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e05c      	b.n	8003158 <d_lambda+0xec>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b6c      	cmp	r3, #108	; 0x6c
 80030a6:	d108      	bne.n	80030ba <d_lambda+0x4e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f103 0201 	add.w	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e001      	b.n	80030be <d_lambda+0x52>
 80030ba:	f04f 0301 	mov.w	r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <d_lambda+0x5c>
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e047      	b.n	8003158 <d_lambda+0xec>
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff f94d 	bl	8002368 <d_parmlist>
 80030ce:	4603      	mov	r3, r0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <d_lambda+0x72>
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e03c      	b.n	8003158 <d_lambda+0xec>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b45      	cmp	r3, #69	; 0x45
 80030e6:	d108      	bne.n	80030fa <d_lambda+0x8e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f103 0201 	add.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e001      	b.n	80030fe <d_lambda+0x92>
 80030fa:	f04f 0301 	mov.w	r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <d_lambda+0x9c>
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e027      	b.n	8003158 <d_lambda+0xec>
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fb01 	bl	8002710 <d_compact_number>
 800310e:	4603      	mov	r3, r0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	da02      	bge.n	800311e <d_lambda+0xb2>
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e01c      	b.n	8003158 <d_lambda+0xec>
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd f936 	bl	8000390 <d_make_empty>
 8003124:	4603      	mov	r3, r0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <d_lambda+0xd6>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f04f 023e 	mov.w	r2, #62	; 0x3e
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	68f9      	ldr	r1, [r7, #12]
 8003146:	f000 f8dd 	bl	8003304 <d_add_substitution>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <d_lambda+0xea>
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e000      	b.n	8003158 <d_lambda+0xec>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	f107 0718 	add.w	r7, r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop

08003164 <d_unnamed_type>:
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b55      	cmp	r3, #85	; 0x55
 8003174:	d108      	bne.n	8003188 <d_unnamed_type+0x24>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f103 0201 	add.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	e001      	b.n	800318c <d_unnamed_type+0x28>
 8003188:	f04f 0301 	mov.w	r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <d_unnamed_type+0x32>
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e039      	b.n	800320a <d_unnamed_type+0xa6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b74      	cmp	r3, #116	; 0x74
 800319e:	d108      	bne.n	80031b2 <d_unnamed_type+0x4e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f103 0201 	add.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e001      	b.n	80031b6 <d_unnamed_type+0x52>
 80031b2:	f04f 0301 	mov.w	r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <d_unnamed_type+0x5c>
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	e024      	b.n	800320a <d_unnamed_type+0xa6>
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff faa5 	bl	8002710 <d_compact_number>
 80031c6:	4603      	mov	r3, r0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	da02      	bge.n	80031d6 <d_unnamed_type+0x72>
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e019      	b.n	800320a <d_unnamed_type+0xa6>
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd f8da 	bl	8000390 <d_make_empty>
 80031dc:	4603      	mov	r3, r0
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <d_unnamed_type+0x90>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f04f 0240 	mov.w	r2, #64	; 0x40
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	f000 f884 	bl	8003304 <d_add_substitution>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <d_unnamed_type+0xa4>
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e000      	b.n	800320a <d_unnamed_type+0xa6>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4618      	mov	r0, r3
 800320c:	f107 0710 	add.w	r7, r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <d_clone_suffix>:
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b2e      	cmp	r3, #46	; 0x2e
 800322e:	d139      	bne.n	80032a4 <d_clone_suffix+0x90>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f103 0301 	add.w	r3, r3, #1
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b60      	cmp	r3, #96	; 0x60
 800323a:	d905      	bls.n	8003248 <d_clone_suffix+0x34>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f103 0301 	add.w	r3, r3, #1
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b7a      	cmp	r3, #122	; 0x7a
 8003246:	d905      	bls.n	8003254 <d_clone_suffix+0x40>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f103 0301 	add.w	r3, r3, #1
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b5f      	cmp	r3, #95	; 0x5f
 8003252:	d127      	bne.n	80032a4 <d_clone_suffix+0x90>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f103 0302 	add.w	r3, r3, #2
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e003      	b.n	8003266 <d_clone_suffix+0x52>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f103 0301 	add.w	r3, r3, #1
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b60      	cmp	r3, #96	; 0x60
 800326c:	d903      	bls.n	8003276 <d_clone_suffix+0x62>
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b7a      	cmp	r3, #122	; 0x7a
 8003274:	d9f3      	bls.n	800325e <d_clone_suffix+0x4a>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b5f      	cmp	r3, #95	; 0x5f
 800327c:	d0ef      	beq.n	800325e <d_clone_suffix+0x4a>
 800327e:	e011      	b.n	80032a4 <d_clone_suffix+0x90>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f103 0302 	add.w	r3, r3, #2
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e003      	b.n	8003292 <d_clone_suffix+0x7e>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f103 0301 	add.w	r3, r3, #1
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b2f      	cmp	r3, #47	; 0x2f
 8003298:	d905      	bls.n	80032a6 <d_clone_suffix+0x92>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b39      	cmp	r3, #57	; 0x39
 80032a0:	d9f3      	bls.n	800328a <d_clone_suffix+0x76>
 80032a2:	e000      	b.n	80032a6 <d_clone_suffix+0x92>
 80032a4:	bf00      	nop
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b2e      	cmp	r3, #46	; 0x2e
 80032ac:	d10b      	bne.n	80032c6 <d_clone_suffix+0xb2>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f103 0301 	add.w	r3, r3, #1
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b2f      	cmp	r3, #47	; 0x2f
 80032b8:	d905      	bls.n	80032c6 <d_clone_suffix+0xb2>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f103 0301 	add.w	r3, r3, #1
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b39      	cmp	r3, #57	; 0x39
 80032c4:	d9dc      	bls.n	8003280 <d_clone_suffix+0x6c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	6979      	ldr	r1, [r7, #20]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1acb      	subs	r3, r1, r3
 80032d0:	18d2      	adds	r2, r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	461a      	mov	r2, r3
 80032e2:	f7fd f977 	bl	80005d4 <d_make_name>
 80032e6:	4603      	mov	r3, r0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f04f 0142 	mov.w	r1, #66	; 0x42
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f7fd f874 	bl	80003e0 <d_make_comp>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f107 0718 	add.w	r7, r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <d_add_substitution>:
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <d_add_substitution+0x16>
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e019      	b.n	800334e <d_add_substitution+0x4a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	429a      	cmp	r2, r3
 8003324:	db02      	blt.n	800332c <d_add_substitution+0x28>
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	e010      	b.n	800334e <d_add_substitution+0x4a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003338:	18d3      	adds	r3, r2, r3
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f103 0201 	add.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	621a      	str	r2, [r3, #32]
 800334a:	f04f 0301 	mov.w	r3, #1
 800334e:	4618      	mov	r0, r3
 8003350:	f107 070c 	add.w	r7, r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop

0800335c <d_substitution>:
 800335c:	b580      	push	{r7, lr}
 800335e:	b08c      	sub	sp, #48	; 0x30
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b53      	cmp	r3, #83	; 0x53
 800336e:	d108      	bne.n	8003382 <d_substitution+0x26>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f103 0201 	add.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e001      	b.n	8003386 <d_substitution+0x2a>
 8003382:	f04f 0301 	mov.w	r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <d_substitution+0x34>
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e0f6      	b.n	800357e <d_substitution+0x222>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <d_substitution+0x4e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	7813      	ldrb	r3, [r2, #0]
 80033a0:	f102 0101 	add.w	r1, r2, #1
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	60d1      	str	r1, [r2, #12]
 80033a8:	e001      	b.n	80033ae <d_substitution+0x52>
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80033b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033b6:	2b5f      	cmp	r3, #95	; 0x5f
 80033b8:	d00f      	beq.n	80033da <d_substitution+0x7e>
 80033ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033be:	2b2f      	cmp	r3, #47	; 0x2f
 80033c0:	d903      	bls.n	80033ca <d_substitution+0x6e>
 80033c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033c6:	2b39      	cmp	r3, #57	; 0x39
 80033c8:	d907      	bls.n	80033da <d_substitution+0x7e>
 80033ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d974      	bls.n	80034bc <d_substitution+0x160>
 80033d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033d6:	2b5a      	cmp	r3, #90	; 0x5a
 80033d8:	d870      	bhi.n	80034bc <d_substitution+0x160>
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033e4:	2b5f      	cmp	r3, #95	; 0x5f
 80033e6:	d052      	beq.n	800348e <d_substitution+0x132>
 80033e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033ec:	2b2f      	cmp	r3, #47	; 0x2f
 80033ee:	d912      	bls.n	8003416 <d_substitution+0xba>
 80033f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033f4:	2b39      	cmp	r3, #57	; 0x39
 80033f6:	d80e      	bhi.n	8003416 <d_substitution+0xba>
 80033f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033fa:	4613      	mov	r3, r2
 80033fc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003400:	189b      	adds	r3, r3, r2
 8003402:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003406:	461a      	mov	r2, r3
 8003408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800340c:	18d3      	adds	r3, r2, r3
 800340e:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	e019      	b.n	800344a <d_substitution+0xee>
 8003416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d912      	bls.n	8003444 <d_substitution+0xe8>
 800341e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003422:	2b5a      	cmp	r3, #90	; 0x5a
 8003424:	d80e      	bhi.n	8003444 <d_substitution+0xe8>
 8003426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003428:	4613      	mov	r3, r2
 800342a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800342e:	189b      	adds	r3, r3, r2
 8003430:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003434:	461a      	mov	r2, r3
 8003436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800343a:	18d3      	adds	r3, r2, r3
 800343c:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	e002      	b.n	800344a <d_substitution+0xee>
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e099      	b.n	800357e <d_substitution+0x222>
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	429a      	cmp	r2, r3
 8003450:	d202      	bcs.n	8003458 <d_substitution+0xfc>
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e092      	b.n	800357e <d_substitution+0x222>
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <d_substitution+0x11a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	7813      	ldrb	r3, [r2, #0]
 800346c:	f102 0101 	add.w	r1, r2, #1
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	60d1      	str	r1, [r2, #12]
 8003474:	e001      	b.n	800347a <d_substitution+0x11e>
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800347e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003482:	2b5f      	cmp	r3, #95	; 0x5f
 8003484:	d1b0      	bne.n	80033e8 <d_substitution+0x8c>
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	f103 0301 	add.w	r3, r3, #1
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	461a      	mov	r2, r3
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	429a      	cmp	r2, r3
 8003498:	d802      	bhi.n	80034a0 <d_substitution+0x144>
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e06e      	b.n	800357e <d_substitution+0x222>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	f103 0201 	add.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80034b6:	18d3      	adds	r3, r2, r3
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	e060      	b.n	800357e <d_substitution+0x222>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf0c      	ite	eq
 80034c8:	2300      	moveq	r3, #0
 80034ca:	2301      	movne	r3, #1
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10f      	bne.n	80034f4 <d_substitution+0x198>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <d_substitution+0x198>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	74fb      	strb	r3, [r7, #19]
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	2b43      	cmp	r3, #67	; 0x43
 80034e6:	d002      	beq.n	80034ee <d_substitution+0x192>
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b44      	cmp	r3, #68	; 0x44
 80034ec:	d102      	bne.n	80034f4 <d_substitution+0x198>
 80034ee:	f04f 0301 	mov.w	r3, #1
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <d_substitution+0x22c>)
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f646 2324 	movw	r3, #27172	; 0x6a24
 80034fc:	f6c0 0302 	movt	r3, #2050	; 0x802
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	e036      	b.n	8003572 <d_substitution+0x216>
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800350c:	429a      	cmp	r2, r3
 800350e:	d12c      	bne.n	800356a <d_substitution+0x20e>
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <d_substitution+0x1d4>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	f7fd f955 	bl	80007d4 <d_make_sub>
 800352a:	4602      	mov	r2, r0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d006      	beq.n	8003544 <d_substitution+0x1e8>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	e005      	b.n	8003550 <d_substitution+0x1f4>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	18d2      	adds	r2, r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	f7fd f937 	bl	80007d4 <d_make_sub>
 8003566:	4603      	mov	r3, r0
 8003568:	e009      	b.n	800357e <d_substitution+0x222>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f103 031c 	add.w	r3, r3, #28
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	429a      	cmp	r2, r3
 8003578:	d3c4      	bcc.n	8003504 <d_substitution+0x1a8>
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	08026ae8 	.word	0x08026ae8

0800358c <d_growable_string_init>:
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <d_growable_string_init+0x38>
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	f000 f804 	bl	80035cc <d_growable_string_resize>
 80035c4:	f107 0708 	add.w	r7, r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <d_growable_string_resize>:
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d13a      	bne.n	8003654 <d_growable_string_resize+0x88>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <d_growable_string_resize+0x20>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	e001      	b.n	80035f0 <d_growable_string_resize+0x24>
 80035ec:	f04f 0302 	mov.w	r3, #2
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e003      	b.n	80035fc <d_growable_string_resize+0x30>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d3f7      	bcc.n	80035f4 <d_growable_string_resize+0x28>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	68f9      	ldr	r1, [r7, #12]
 800360c:	f004 f9dc 	bl	80079c8 <realloc>
 8003610:	4603      	mov	r3, r0
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d115      	bne.n	8003646 <d_growable_string_resize+0x7a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f003 fd50 	bl	80070c4 <free>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f04f 0201 	mov.w	r2, #1
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	e007      	b.n	8003656 <d_growable_string_resize+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	609a      	str	r2, [r3, #8]
 8003652:	e000      	b.n	8003656 <d_growable_string_resize+0x8a>
 8003654:	bf00      	nop
 8003656:	f107 0710 	add.w	r7, r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop

08003660 <d_growable_string_append_buffer>:
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	18d3      	adds	r3, r2, r3
 8003674:	f103 0301 	add.w	r3, r3, #1
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	d203      	bcs.n	800368c <d_growable_string_append_buffer+0x2c>
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	6979      	ldr	r1, [r7, #20]
 8003688:	f7ff ffa0 	bl	80035cc <d_growable_string_resize>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11e      	bne.n	80036d2 <d_growable_string_append_buffer+0x72>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	18d2      	adds	r2, r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4611      	mov	r1, r2
 80036a2:	461a      	mov	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4608      	mov	r0, r1
 80036a8:	4611      	mov	r1, r2
 80036aa:	461a      	mov	r2, r3
 80036ac:	f004 f838 	bl	8007720 <memcpy>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	18cb      	adds	r3, r1, r3
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	18d2      	adds	r2, r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	e000      	b.n	80036d4 <d_growable_string_append_buffer+0x74>
 80036d2:	bf00      	nop
 80036d4:	f107 0718 	add.w	r7, r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <d_growable_string_callback_adapter>:
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	6978      	ldr	r0, [r7, #20]
 80036ee:	68f9      	ldr	r1, [r7, #12]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	f7ff ffb5 	bl	8003660 <d_growable_string_append_buffer>
 80036f6:	f107 0718 	add.w	r7, r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop

08003700 <d_print_init>:
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8003760:	f107 0714 	add.w	r7, r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop

0800376c <d_print_error>:
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f04f 0201 	mov.w	r2, #1
 800377a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 800377e:	f107 070c 	add.w	r7, r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <d_print_saw_error>:
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf0c      	ite	eq
 800379a:	2300      	moveq	r3, #0
 800379c:	2301      	movne	r3, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f107 070c 	add.w	r7, r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop

080037ac <d_print_flush>:
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	18d3      	adds	r3, r2, r3
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	711a      	strb	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	f102 0004 	add.w	r0, r2, #4
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 80037dc:	4798      	blx	r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80037ee:	f103 0201 	add.w	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80037f8:	f107 0708 	add.w	r7, r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <d_append_char>:
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003812:	2bff      	cmp	r3, #255	; 0xff
 8003814:	d102      	bne.n	800381c <d_append_char+0x1c>
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ffc8 	bl	80037ac <d_print_flush>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	78f9      	ldrb	r1, [r7, #3]
 8003828:	7111      	strb	r1, [r2, #4]
 800382a:	f103 0201 	add.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 800383c:	f107 0708 	add.w	r7, r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <d_append_buffer>:
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e00b      	b.n	8003870 <d_append_buffer+0x2c>
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	18d3      	adds	r3, r2, r3
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	4619      	mov	r1, r3
 8003864:	f7ff ffcc 	bl	8003800 <d_append_char>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f103 0301 	add.w	r3, r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d3ef      	bcc.n	8003858 <d_append_buffer+0x14>
 8003878:	f107 0718 	add.w	r7, r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <d_append_string>:
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	6838      	ldr	r0, [r7, #0]
 800388c:	f004 fd18 	bl	80082c0 <strlen>
 8003890:	4603      	mov	r3, r0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	6839      	ldr	r1, [r7, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	f7ff ffd4 	bl	8003844 <d_append_buffer>
 800389c:	f107 0708 	add.w	r7, r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <d_append_num>:
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	f107 030c 	add.w	r3, r7, #12
 80038b2:	4618      	mov	r0, r3
 80038b4:	f646 21e8 	movw	r1, #27368	; 0x6ae8
 80038b8:	f6c0 0102 	movt	r1, #2050	; 0x802
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	f004 fb63 	bl	8007f88 <sprintf>
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4619      	mov	r1, r3
 80038ca:	f7ff ffd9 	bl	8003880 <d_append_string>
 80038ce:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop

080038d8 <d_last_char>:
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80038e6:	4618      	mov	r0, r3
 80038e8:	f107 070c 	add.w	r7, r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop

080038f4 <d_print_callback>:
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b0cf      	sub	sp, #316	; 0x13c
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	f107 040c 	add.w	r4, r7, #12
 80038fe:	6020      	str	r0, [r4, #0]
 8003900:	f107 0008 	add.w	r0, r7, #8
 8003904:	6001      	str	r1, [r0, #0]
 8003906:	f107 0104 	add.w	r1, r7, #4
 800390a:	600a      	str	r2, [r1, #0]
 800390c:	463a      	mov	r2, r7
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	f107 0010 	add.w	r0, r7, #16
 8003914:	f107 010c 	add.w	r1, r7, #12
 8003918:	f107 0204 	add.w	r2, r7, #4
 800391c:	463b      	mov	r3, r7
 800391e:	6809      	ldr	r1, [r1, #0]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f7ff feec 	bl	8003700 <d_print_init>
 8003928:	f107 0210 	add.w	r2, r7, #16
 800392c:	f107 0308 	add.w	r3, r7, #8
 8003930:	4610      	mov	r0, r2
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	f000 f9cc 	bl	8003cd0 <d_print_comp>
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff35 	bl	80037ac <d_print_flush>
 8003942:	f107 0310 	add.w	r3, r7, #16
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff1e 	bl	8003788 <d_print_saw_error>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	bf14      	ite	ne
 8003952:	2300      	movne	r3, #0
 8003954:	2301      	moveq	r3, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800395c:	46bd      	mov	sp, r7
 800395e:	bd90      	pop	{r4, r7, pc}

08003960 <d_print>:
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f107 0210 	add.w	r2, r7, #16
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	f7ff fe08 	bl	800358c <d_growable_string_init>
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	f243 62dd 	movw	r2, #14045	; 0x36dd
 8003988:	f6c0 0200 	movt	r2, #2048	; 0x800
 800398c:	f7ff ffb2 	bl	80038f4 <d_print_callback>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <d_print+0x4c>
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4618      	mov	r0, r3
 800399a:	f003 fb93 	bl	80070c4 <free>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e009      	b.n	80039c0 <d_print+0x60>
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <d_print+0x56>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	e001      	b.n	80039ba <d_print+0x5a>
 80039b6:	f04f 0301 	mov.w	r3, #1
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f107 0720 	add.w	r7, r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop

080039cc <d_index_template_argument>:
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e010      	b.n	80039fe <d_index_template_argument+0x32>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b2b      	cmp	r3, #43	; 0x2b
 80039e2:	d002      	beq.n	80039ea <d_index_template_argument+0x1e>
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e019      	b.n	8003a1e <d_index_template_argument+0x52>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dd0a      	ble.n	8003a06 <d_index_template_argument+0x3a>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1eb      	bne.n	80039dc <d_index_template_argument+0x10>
 8003a04:	e000      	b.n	8003a08 <d_index_template_argument+0x3c>
 8003a06:	bf00      	nop
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <d_index_template_argument+0x48>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <d_index_template_argument+0x4e>
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e001      	b.n	8003a1e <d_index_template_argument+0x52>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f107 0714 	add.w	r7, r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop

08003a2c <d_lookup_template_argument>:
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <d_lookup_template_argument+0x20>
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fe93 	bl	800376c <d_print_error>
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e00b      	b.n	8003a64 <d_lookup_template_argument+0x38>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f7ff ffb5 	bl	80039cc <d_index_template_argument>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f107 0708 	add.w	r7, r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop

08003a70 <d_find_pack>:
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <d_find_pack+0x16>
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e0d0      	b.n	8003c28 <d_find_pack+0x1b8>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b41      	cmp	r3, #65	; 0x41
 8003a8c:	f200 80b8 	bhi.w	8003c00 <d_find_pack+0x190>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <d_find_pack+0x28>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003bcb 	.word	0x08003bcb
 8003a9c:	08003c01 	.word	0x08003c01
 8003aa0:	08003c01 	.word	0x08003c01
 8003aa4:	08003c01 	.word	0x08003c01
 8003aa8:	08003c01 	.word	0x08003c01
 8003aac:	08003ba1 	.word	0x08003ba1
 8003ab0:	08003bcb 	.word	0x08003bcb
 8003ab4:	08003be1 	.word	0x08003be1
 8003ab8:	08003bf1 	.word	0x08003bf1
 8003abc:	08003c01 	.word	0x08003c01
 8003ac0:	08003c01 	.word	0x08003c01
 8003ac4:	08003c01 	.word	0x08003c01
 8003ac8:	08003c01 	.word	0x08003c01
 8003acc:	08003c01 	.word	0x08003c01
 8003ad0:	08003c01 	.word	0x08003c01
 8003ad4:	08003c01 	.word	0x08003c01
 8003ad8:	08003c01 	.word	0x08003c01
 8003adc:	08003c01 	.word	0x08003c01
 8003ae0:	08003c01 	.word	0x08003c01
 8003ae4:	08003c01 	.word	0x08003c01
 8003ae8:	08003c01 	.word	0x08003c01
 8003aec:	08003c01 	.word	0x08003c01
 8003af0:	08003bcb 	.word	0x08003bcb
 8003af4:	08003c01 	.word	0x08003c01
 8003af8:	08003c01 	.word	0x08003c01
 8003afc:	08003c01 	.word	0x08003c01
 8003b00:	08003c01 	.word	0x08003c01
 8003b04:	08003c01 	.word	0x08003c01
 8003b08:	08003c01 	.word	0x08003c01
 8003b0c:	08003c01 	.word	0x08003c01
 8003b10:	08003c01 	.word	0x08003c01
 8003b14:	08003c01 	.word	0x08003c01
 8003b18:	08003c01 	.word	0x08003c01
 8003b1c:	08003c01 	.word	0x08003c01
 8003b20:	08003c01 	.word	0x08003c01
 8003b24:	08003bcb 	.word	0x08003bcb
 8003b28:	08003c01 	.word	0x08003c01
 8003b2c:	08003c01 	.word	0x08003c01
 8003b30:	08003c01 	.word	0x08003c01
 8003b34:	08003c01 	.word	0x08003c01
 8003b38:	08003c01 	.word	0x08003c01
 8003b3c:	08003c01 	.word	0x08003c01
 8003b40:	08003c01 	.word	0x08003c01
 8003b44:	08003c01 	.word	0x08003c01
 8003b48:	08003bcb 	.word	0x08003bcb
 8003b4c:	08003bd1 	.word	0x08003bd1
 8003b50:	08003c01 	.word	0x08003c01
 8003b54:	08003c01 	.word	0x08003c01
 8003b58:	08003c01 	.word	0x08003c01
 8003b5c:	08003c01 	.word	0x08003c01
 8003b60:	08003c01 	.word	0x08003c01
 8003b64:	08003c01 	.word	0x08003c01
 8003b68:	08003c01 	.word	0x08003c01
 8003b6c:	08003c01 	.word	0x08003c01
 8003b70:	08003c01 	.word	0x08003c01
 8003b74:	08003c01 	.word	0x08003c01
 8003b78:	08003c01 	.word	0x08003c01
 8003b7c:	08003bcb 	.word	0x08003bcb
 8003b80:	08003c01 	.word	0x08003c01
 8003b84:	08003c01 	.word	0x08003c01
 8003b88:	08003c01 	.word	0x08003c01
 8003b8c:	08003c01 	.word	0x08003c01
 8003b90:	08003bcb 	.word	0x08003bcb
 8003b94:	08003c01 	.word	0x08003c01
 8003b98:	08003c01 	.word	0x08003c01
 8003b9c:	08003bc5 	.word	0x08003bc5
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	6839      	ldr	r1, [r7, #0]
 8003ba4:	f7ff ff42 	bl	8003a2c <d_lookup_template_argument>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <d_find_pack+0x14e>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b2b      	cmp	r3, #43	; 0x2b
 8003bb8:	d101      	bne.n	8003bbe <d_find_pack+0x14e>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	e034      	b.n	8003c28 <d_find_pack+0x1b8>
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e031      	b.n	8003c28 <d_find_pack+0x1b8>
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e02e      	b.n	8003c28 <d_find_pack+0x1b8>
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e02b      	b.n	8003c28 <d_find_pack+0x1b8>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f7ff ff4a 	bl	8003a70 <d_find_pack>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	e023      	b.n	8003c28 <d_find_pack+0x1b8>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4619      	mov	r1, r3
 8003be8:	f7ff ff42 	bl	8003a70 <d_find_pack>
 8003bec:	4603      	mov	r3, r0
 8003bee:	e01b      	b.n	8003c28 <d_find_pack+0x1b8>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f7ff ff3a 	bl	8003a70 <d_find_pack>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	e013      	b.n	8003c28 <d_find_pack+0x1b8>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4619      	mov	r1, r3
 8003c08:	f7ff ff32 	bl	8003a70 <d_find_pack>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <d_find_pack+0x1aa>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	e006      	b.n	8003c28 <d_find_pack+0x1b8>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7ff ff25 	bl	8003a70 <d_find_pack>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f107 0710 	add.w	r7, r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop

08003c34 <d_pack_length>:
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e006      	b.n	8003c52 <d_pack_length+0x1e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f103 0301 	add.w	r3, r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <d_pack_length+0x34>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b2b      	cmp	r3, #43	; 0x2b
 8003c5e:	d103      	bne.n	8003c68 <d_pack_length+0x34>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ed      	bne.n	8003c44 <d_pack_length+0x10>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f107 0714 	add.w	r7, r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <d_print_subexpr>:
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <d_print_subexpr+0x20>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b06      	cmp	r3, #6
 8003c96:	d102      	bne.n	8003c9e <d_print_subexpr+0x26>
 8003c98:	f04f 0301 	mov.w	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <d_print_subexpr+0x36>
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f04f 0128 	mov.w	r1, #40	; 0x28
 8003caa:	f7ff fda9 	bl	8003800 <d_append_char>
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	f000 f80d 	bl	8003cd0 <d_print_comp>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <d_print_subexpr+0x4e>
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f04f 0129 	mov.w	r1, #41	; 0x29
 8003cc2:	f7ff fd9d 	bl	8003800 <d_append_char>
 8003cc6:	f107 0710 	add.w	r7, r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop

08003cd0 <d_print_comp>:
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b0b5      	sub	sp, #212	; 0xd4
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <d_print_comp+0x1a>
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fd43 	bl	800376c <d_print_error>
 8003ce6:	f001 b8f3 	b.w	8004ed0 <d_print_comp+0x1200>
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fd4c 	bl	8003788 <d_print_saw_error>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f041 80e1 	bne.w	8004eba <d_print_comp+0x11ea>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b42      	cmp	r3, #66	; 0x42
 8003cfe:	f201 80d7 	bhi.w	8004eb0 <d_print_comp+0x11e0>
 8003d02:	a101      	add	r1, pc, #4	; (adr r1, 8003d08 <d_print_comp+0x38>)
 8003d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d08:	08003e15 	.word	0x08003e15
 8003d0c:	08003e4d 	.word	0x08003e4d
 8003d10:	08003e4d 	.word	0x08003e4d
 8003d14:	08003e8f 	.word	0x08003e8f
 8003d18:	0800416f 	.word	0x0800416f
 8003d1c:	08004249 	.word	0x08004249
 8003d20:	08004daf 	.word	0x08004daf
 8003d24:	080042bf 	.word	0x080042bf
 8003d28:	080042cf 	.word	0x080042cf
 8003d2c:	080042e9 	.word	0x080042e9
 8003d30:	08004307 	.word	0x08004307
 8003d34:	08004325 	.word	0x08004325
 8003d38:	0800435d 	.word	0x0800435d
 8003d3c:	0800437b 	.word	0x0800437b
 8003d40:	08004399 	.word	0x08004399
 8003d44:	080043b7 	.word	0x080043b7
 8003d48:	080043d5 	.word	0x080043d5
 8003d4c:	080043f3 	.word	0x080043f3
 8003d50:	08004411 	.word	0x08004411
 8003d54:	0800442f 	.word	0x0800442f
 8003d58:	0800444d 	.word	0x0800444d
 8003d5c:	0800446b 	.word	0x0800446b
 8003d60:	08004489 	.word	0x08004489
 8003d64:	0800449f 	.word	0x0800449f
 8003d68:	0800449f 	.word	0x0800449f
 8003d6c:	0800449f 	.word	0x0800449f
 8003d70:	0800450f 	.word	0x0800450f
 8003d74:	0800450f 	.word	0x0800450f
 8003d78:	0800450f 	.word	0x0800450f
 8003d7c:	0800450f 	.word	0x0800450f
 8003d80:	0800450f 	.word	0x0800450f
 8003d84:	0800450f 	.word	0x0800450f
 8003d88:	0800450f 	.word	0x0800450f
 8003d8c:	0800450f 	.word	0x0800450f
 8003d90:	0800450f 	.word	0x0800450f
 8003d94:	08004559 	.word	0x08004559
 8003d98:	08004599 	.word	0x08004599
 8003d9c:	080045a9 	.word	0x080045a9
 8003da0:	08004645 	.word	0x08004645
 8003da4:	08004797 	.word	0x08004797
 8003da8:	080047df 	.word	0x080047df
 8003dac:	08004797 	.word	0x08004797
 8003db0:	0800483f 	.word	0x0800483f
 8003db4:	0800483f 	.word	0x0800483f
 8003db8:	080048cd 	.word	0x080048cd
 8003dbc:	08004919 	.word	0x08004919
 8003dc0:	08004935 	.word	0x08004935
 8003dc4:	0800494d 	.word	0x0800494d
 8003dc8:	08004993 	.word	0x08004993
 8003dcc:	08004a91 	.word	0x08004a91
 8003dd0:	08004a99 	.word	0x08004a99
 8003dd4:	08004b01 	.word	0x08004b01
 8003dd8:	08004b01 	.word	0x08004b01
 8003ddc:	08004b09 	.word	0x08004b09
 8003de0:	08004b09 	.word	0x08004b09
 8003de4:	08004ca5 	.word	0x08004ca5
 8003de8:	08004cc1 	.word	0x08004cc1
 8003dec:	08004cdb 	.word	0x08004cdb
 8003df0:	08004c97 	.word	0x08004c97
 8003df4:	08004ceb 	.word	0x08004ceb
 8003df8:	08004dd9 	.word	0x08004dd9
 8003dfc:	08004df5 	.word	0x08004df5
 8003e00:	08004e11 	.word	0x08004e11
 8003e04:	08004eb1 	.word	0x08004eb1
 8003e08:	08004e55 	.word	0x08004e55
 8003e0c:	08004d11 	.word	0x08004d11
 8003e10:	08004e7f 	.word	0x08004e7f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <d_print_comp+0x166>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f7ff fd09 	bl	8003844 <d_append_buffer>
 8003e32:	f001 b84d 	b.w	8004ed0 <d_print_comp+0x1200>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4611      	mov	r1, r2
 8003e42:	461a      	mov	r2, r3
 8003e44:	f001 f848 	bl	8004ed8 <d_print_java_identifier>
 8003e48:	f001 b842 	b.w	8004ed0 <d_print_comp+0x1200>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4619      	mov	r1, r3
 8003e54:	f7ff ff3c 	bl	8003cd0 <d_print_comp>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d107      	bne.n	8003e74 <d_print_comp+0x1a4>
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f646 21ec 	movw	r1, #27372	; 0x6aec
 8003e6a:	f6c0 0102 	movt	r1, #2050	; 0x802
 8003e6e:	f7ff fd07 	bl	8003880 <d_append_string>
 8003e72:	e004      	b.n	8003e7e <d_print_comp+0x1ae>
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8003e7a:	f7ff fcc1 	bl	8003800 <d_append_char>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4619      	mov	r1, r3
 8003e86:	f7ff ff23 	bl	8003cd0 <d_print_comp>
 8003e8a:	f001 b821 	b.w	8004ed0 <d_print_comp+0x1200>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003eb2:	e05e      	b.n	8003f72 <d_print_comp+0x2a2>
 8003eb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d904      	bls.n	8003ec6 <d_print_comp+0x1f6>
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fc55 	bl	800376c <d_print_error>
 8003ec2:	f001 b805 	b.w	8004ed0 <d_print_comp+0x1200>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8003ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ed0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003ed4:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003ed8:	18cb      	adds	r3, r1, r3
 8003eda:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ee4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003ee8:	f107 020c 	add.w	r2, r7, #12
 8003eec:	18d2      	adds	r2, r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8003ef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ef8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003efc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8003f06:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f10:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003f14:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003f18:	18cb      	adds	r3, r1, r3
 8003f1a:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003f2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f2e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003f32:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003f36:	18cb      	adds	r3, r1, r3
 8003f38:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f42:	f103 0301 	add.w	r3, r3, #1
 8003f46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b1a      	cmp	r3, #26
 8003f52:	d009      	beq.n	8003f68 <d_print_comp+0x298>
 8003f54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b1b      	cmp	r3, #27
 8003f5c:	d004      	beq.n	8003f68 <d_print_comp+0x298>
 8003f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b1c      	cmp	r3, #28
 8003f66:	d109      	bne.n	8003f7c <d_print_comp+0x2ac>
 8003f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d19c      	bne.n	8003eb4 <d_print_comp+0x1e4>
 8003f7a:	e000      	b.n	8003f7e <d_print_comp+0x2ae>
 8003f7c:	bf00      	nop
 8003f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <d_print_comp+0x2c0>
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff fbf0 	bl	800376c <d_print_error>
 8003f8c:	f000 bfa0 	b.w	8004ed0 <d_print_comp+0x1200>
 8003f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d10c      	bne.n	8003fb4 <d_print_comp+0x2e4>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003fa8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8003fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	f040 8097 	bne.w	80040ee <d_print_comp+0x41e>
 8003fc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b3f      	cmp	r3, #63	; 0x3f
 8003fd2:	d17a      	bne.n	80040ca <d_print_comp+0x3fa>
 8003fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fde:	e074      	b.n	80040ca <d_print_comp+0x3fa>
 8003fe0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d904      	bls.n	8003ff2 <d_print_comp+0x322>
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fbbf 	bl	800376c <d_print_error>
 8003fee:	f000 bf6f 	b.w	8004ed0 <d_print_comp+0x1200>
 8003ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ff6:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ffa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ffe:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004002:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004006:	188a      	adds	r2, r1, r2
 8004008:	f1a2 02c4 	sub.w	r2, r2, #196	; 0xc4
 800400c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004010:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004014:	18cb      	adds	r3, r1, r3
 8004016:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 800401a:	4614      	mov	r4, r2
 800401c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800401e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004026:	f103 33ff 	add.w	r3, r3, #4294967295
 800402a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800402e:	f107 020c 	add.w	r2, r7, #12
 8004032:	18d2      	adds	r2, r2, r3
 8004034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004038:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800403c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004040:	18cb      	adds	r3, r1, r3
 8004042:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800404c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004050:	f107 020c 	add.w	r2, r7, #12
 8004054:	18d2      	adds	r2, r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800405c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004060:	f103 33ff 	add.w	r3, r3, #4294967295
 8004064:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004068:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800406c:	18d3      	adds	r3, r2, r3
 800406e:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8004072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800407c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004080:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004084:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004088:	18cb      	adds	r3, r1, r3
 800408a:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004098:	f103 33ff 	add.w	r3, r3, #4294967295
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 80040a2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80040a6:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80040aa:	18cb      	adds	r3, r1, r3
 80040ac:	f1a3 03b8 	sub.w	r3, r3, #184	; 0xb8
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040b6:	f103 0301 	add.w	r3, r3, #1
 80040ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040c8:	e000      	b.n	80040cc <d_print_comp+0x3fc>
 80040ca:	bf00      	nop
 80040cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b1a      	cmp	r3, #26
 80040d4:	d084      	beq.n	8003fe0 <d_print_comp+0x310>
 80040d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b1b      	cmp	r3, #27
 80040de:	f43f af7f 	beq.w	8003fe0 <d_print_comp+0x310>
 80040e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b1c      	cmp	r3, #28
 80040ea:	f43f af79 	beq.w	8003fe0 <d_print_comp+0x310>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	4619      	mov	r1, r3
 80040f6:	f7ff fdeb 	bl	8003cd0 <d_print_comp>
 80040fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d129      	bne.n	8004158 <d_print_comp+0x488>
 8004104:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800410c:	e024      	b.n	8004158 <d_print_comp+0x488>
 800410e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004112:	f103 33ff 	add.w	r3, r3, #4294967295
 8004116:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800411a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800411e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004122:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004126:	18d3      	adds	r3, r2, r3
 8004128:	f1a3 03bc 	sub.w	r3, r3, #188	; 0xbc
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d112      	bne.n	8004158 <d_print_comp+0x488>
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f04f 0120 	mov.w	r1, #32
 8004138:	f7ff fb62 	bl	8003800 <d_append_char>
 800413c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004140:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004144:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004148:	18cb      	adds	r3, r1, r3
 800414a:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4619      	mov	r1, r3
 8004154:	f001 f82a 	bl	80051ac <d_print_mod>
 8004158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1d6      	bne.n	800410e <d_print_comp+0x43e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004166:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800416a:	f000 beb1 	b.w	8004ed0 <d_print_comp+0x1200>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d026      	beq.n	80041e4 <d_print_comp+0x514>
 8004196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d121      	bne.n	80041e4 <d_print_comp+0x514>
 80041a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d11c      	bne.n	80041e4 <d_print_comp+0x514>
 80041aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f646 21f0 	movw	r1, #27376	; 0x6af0
 80041b6:	f6c0 0102 	movt	r1, #2050	; 0x802
 80041ba:	f04f 0206 	mov.w	r2, #6
 80041be:	f004 f8af 	bl	8008320 <strncmp>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10d      	bne.n	80041e4 <d_print_comp+0x514>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4619      	mov	r1, r3
 80041d0:	f7ff fd7e 	bl	8003cd0 <d_print_comp>
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f246 4134 	movw	r1, #25652	; 0x6434
 80041da:	f6c0 0102 	movt	r1, #2050	; 0x802
 80041de:	f7ff fb4f 	bl	8003880 <d_append_string>
 80041e2:	e02a      	b.n	800423a <d_print_comp+0x56a>
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80041ea:	f7ff fd71 	bl	8003cd0 <d_print_comp>
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fb72 	bl	80038d8 <d_last_char>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b3c      	cmp	r3, #60	; 0x3c
 80041f8:	d104      	bne.n	8004204 <d_print_comp+0x534>
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f04f 0120 	mov.w	r1, #32
 8004200:	f7ff fafe 	bl	8003800 <d_append_char>
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800420a:	f7ff faf9 	bl	8003800 <d_append_char>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4619      	mov	r1, r3
 8004216:	f7ff fd5b 	bl	8003cd0 <d_print_comp>
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff fb5c 	bl	80038d8 <d_last_char>
 8004220:	4603      	mov	r3, r0
 8004222:	2b3e      	cmp	r3, #62	; 0x3e
 8004224:	d104      	bne.n	8004230 <d_print_comp+0x560>
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f04f 0120 	mov.w	r1, #32
 800422c:	f7ff fae8 	bl	8003800 <d_append_char>
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8004236:	f7ff fae3 	bl	8003800 <d_append_char>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004240:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004244:	f000 be44 	b.w	8004ed0 <d_print_comp+0x1200>
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	6839      	ldr	r1, [r7, #0]
 800424c:	f7ff fbee 	bl	8003a2c <d_lookup_template_argument>
 8004250:	4603      	mov	r3, r0
 8004252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00f      	beq.n	800427e <d_print_comp+0x5ae>
 800425e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b2b      	cmp	r3, #43	; 0x2b
 8004266:	d10a      	bne.n	800427e <d_print_comp+0x5ae>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800426e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004272:	4619      	mov	r1, r3
 8004274:	f7ff fbaa 	bl	80039cc <d_index_template_argument>
 8004278:	4603      	mov	r3, r0
 800427a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800427e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <d_print_comp+0x5c0>
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fa70 	bl	800376c <d_print_error>
 800428c:	f000 be20 	b.w	8004ed0 <d_print_comp+0x1200>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800429a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80042ac:	f7ff fd10 	bl	8003cd0 <d_print_comp>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80042b6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80042ba:	f000 be09 	b.w	8004ed0 <d_print_comp+0x1200>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4619      	mov	r1, r3
 80042c6:	f7ff fd03 	bl	8003cd0 <d_print_comp>
 80042ca:	f000 be01 	b.w	8004ed0 <d_print_comp+0x1200>
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f04f 017e 	mov.w	r1, #126	; 0x7e
 80042d4:	f7ff fa94 	bl	8003800 <d_append_char>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4619      	mov	r1, r3
 80042e0:	f7ff fcf6 	bl	8003cd0 <d_print_comp>
 80042e4:	f000 bdf4 	b.w	8004ed0 <d_print_comp+0x1200>
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f646 21f8 	movw	r1, #27384	; 0x6af8
 80042ee:	f6c0 0102 	movt	r1, #2050	; 0x802
 80042f2:	f7ff fac5 	bl	8003880 <d_append_string>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7ff fce7 	bl	8003cd0 <d_print_comp>
 8004302:	f000 bde5 	b.w	8004ed0 <d_print_comp+0x1200>
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f646 3104 	movw	r1, #27396	; 0x6b04
 800430c:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004310:	f7ff fab6 	bl	8003880 <d_append_string>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4619      	mov	r1, r3
 800431c:	f7ff fcd8 	bl	8003cd0 <d_print_comp>
 8004320:	f000 bdd6 	b.w	8004ed0 <d_print_comp+0x1200>
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f646 3110 	movw	r1, #27408	; 0x6b10
 800432a:	f6c0 0102 	movt	r1, #2050	; 0x802
 800432e:	f7ff faa7 	bl	8003880 <d_append_string>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4619      	mov	r1, r3
 800433a:	f7ff fcc9 	bl	8003cd0 <d_print_comp>
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f646 312c 	movw	r1, #27436	; 0x6b2c
 8004344:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004348:	f7ff fa9a 	bl	8003880 <d_append_string>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4619      	mov	r1, r3
 8004354:	f7ff fcbc 	bl	8003cd0 <d_print_comp>
 8004358:	f000 bdba 	b.w	8004ed0 <d_print_comp+0x1200>
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f646 3134 	movw	r1, #27444	; 0x6b34
 8004362:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004366:	f7ff fa8b 	bl	8003880 <d_append_string>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4619      	mov	r1, r3
 8004372:	f7ff fcad 	bl	8003cd0 <d_print_comp>
 8004376:	f000 bdab 	b.w	8004ed0 <d_print_comp+0x1200>
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f646 3144 	movw	r1, #27460	; 0x6b44
 8004380:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004384:	f7ff fa7c 	bl	8003880 <d_append_string>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4619      	mov	r1, r3
 8004390:	f7ff fc9e 	bl	8003cd0 <d_print_comp>
 8004394:	f000 bd9c 	b.w	8004ed0 <d_print_comp+0x1200>
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f646 3158 	movw	r1, #27480	; 0x6b58
 800439e:	f6c0 0102 	movt	r1, #2050	; 0x802
 80043a2:	f7ff fa6d 	bl	8003880 <d_append_string>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4619      	mov	r1, r3
 80043ae:	f7ff fc8f 	bl	8003cd0 <d_print_comp>
 80043b2:	f000 bd8d 	b.w	8004ed0 <d_print_comp+0x1200>
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f646 316c 	movw	r1, #27500	; 0x6b6c
 80043bc:	f6c0 0102 	movt	r1, #2050	; 0x802
 80043c0:	f7ff fa5e 	bl	8003880 <d_append_string>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4619      	mov	r1, r3
 80043cc:	f7ff fc80 	bl	8003cd0 <d_print_comp>
 80043d0:	f000 bd7e 	b.w	8004ed0 <d_print_comp+0x1200>
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f646 3184 	movw	r1, #27524	; 0x6b84
 80043da:	f6c0 0102 	movt	r1, #2050	; 0x802
 80043de:	f7ff fa4f 	bl	8003880 <d_append_string>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4619      	mov	r1, r3
 80043ea:	f7ff fc71 	bl	8003cd0 <d_print_comp>
 80043ee:	f000 bd6f 	b.w	8004ed0 <d_print_comp+0x1200>
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f646 3198 	movw	r1, #27544	; 0x6b98
 80043f8:	f6c0 0102 	movt	r1, #2050	; 0x802
 80043fc:	f7ff fa40 	bl	8003880 <d_append_string>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4619      	mov	r1, r3
 8004408:	f7ff fc62 	bl	8003cd0 <d_print_comp>
 800440c:	f000 bd60 	b.w	8004ed0 <d_print_comp+0x1200>
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f646 31b4 	movw	r1, #27572	; 0x6bb4
 8004416:	f6c0 0102 	movt	r1, #2050	; 0x802
 800441a:	f7ff fa31 	bl	8003880 <d_append_string>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4619      	mov	r1, r3
 8004426:	f7ff fc53 	bl	8003cd0 <d_print_comp>
 800442a:	f000 bd51 	b.w	8004ed0 <d_print_comp+0x1200>
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f646 31c4 	movw	r1, #27588	; 0x6bc4
 8004434:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004438:	f7ff fa22 	bl	8003880 <d_append_string>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4619      	mov	r1, r3
 8004444:	f7ff fc44 	bl	8003cd0 <d_print_comp>
 8004448:	f000 bd42 	b.w	8004ed0 <d_print_comp+0x1200>
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f646 31d8 	movw	r1, #27608	; 0x6bd8
 8004452:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004456:	f7ff fa13 	bl	8003880 <d_append_string>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4619      	mov	r1, r3
 8004462:	f7ff fc35 	bl	8003cd0 <d_print_comp>
 8004466:	f000 bd33 	b.w	8004ed0 <d_print_comp+0x1200>
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f646 31f4 	movw	r1, #27636	; 0x6bf4
 8004470:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004474:	f7ff fa04 	bl	8003880 <d_append_string>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4619      	mov	r1, r3
 8004480:	f7ff fc26 	bl	8003cd0 <d_print_comp>
 8004484:	f000 bd24 	b.w	8004ed0 <d_print_comp+0x1200>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4611      	mov	r1, r2
 8004494:	461a      	mov	r2, r3
 8004496:	f7ff f9d5 	bl	8003844 <d_append_buffer>
 800449a:	f000 bd19 	b.w	8004ed0 <d_print_comp+0x1200>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80044a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80044a8:	e02b      	b.n	8004502 <d_print_comp+0x832>
 80044aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d121      	bne.n	80044f8 <d_print_comp+0x828>
 80044b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b17      	cmp	r3, #23
 80044be:	d00b      	beq.n	80044d8 <d_print_comp+0x808>
 80044c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b18      	cmp	r3, #24
 80044ca:	d005      	beq.n	80044d8 <d_print_comp+0x808>
 80044cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b19      	cmp	r3, #25
 80044d6:	d119      	bne.n	800450c <d_print_comp+0x83c>
 80044d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d107      	bne.n	80044f8 <d_print_comp+0x828>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7ff fbee 	bl	8003cd0 <d_print_comp>
 80044f4:	f000 bcec 	b.w	8004ed0 <d_print_comp+0x1200>
 80044f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004502:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1cf      	bne.n	80044aa <d_print_comp+0x7da>
 800450a:	e000      	b.n	800450e <d_print_comp+0x83e>
 800450c:	bf00      	nop
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004514:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800451c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	673b      	str	r3, [r7, #112]	; 0x70
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	677b      	str	r3, [r7, #116]	; 0x74
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004530:	67bb      	str	r3, [r7, #120]	; 0x78
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	4619      	mov	r1, r3
 800453a:	f7ff fbc9 	bl	8003cd0 <d_print_comp>
 800453e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <d_print_comp+0x87c>
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	6839      	ldr	r1, [r7, #0]
 8004548:	f000 fe30 	bl	80051ac <d_print_mod>
 800454c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004554:	f000 bcbc 	b.w	8004ed0 <d_print_comp+0x1200>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10c      	bne.n	800457e <d_print_comp+0x8ae>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	f7ff f965 	bl	8003844 <d_append_buffer>
 800457a:	f000 bca9 	b.w	8004ed0 <d_print_comp+0x1200>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4611      	mov	r1, r2
 800458e:	461a      	mov	r2, r3
 8004590:	f7ff f958 	bl	8003844 <d_append_buffer>
 8004594:	f000 bc9c 	b.w	8004ed0 <d_print_comp+0x1200>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4619      	mov	r1, r3
 80045a0:	f7ff fb96 	bl	8003cd0 <d_print_comp>
 80045a4:	f000 bc94 	b.w	8004ed0 <d_print_comp+0x1200>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <d_print_comp+0x8f4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	f000 fede 	bl	8005380 <d_print_function_type>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02a      	beq.n	8004622 <d_print_comp+0x952>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80045d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	663b      	str	r3, [r7, #96]	; 0x60
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	667b      	str	r3, [r7, #100]	; 0x64
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80045ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4619      	mov	r1, r3
 80045f8:	f7ff fb6a 	bl	8003cd0 <d_print_comp>
 80045fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 8459 	bne.w	8004ebe <d_print_comp+0x11ee>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <d_print_comp+0x952>
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f04f 0120 	mov.w	r1, #32
 800461e:	f7ff f8ef 	bl	8003800 <d_append_char>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8449 	bne.w	8004ec2 <d_print_comp+0x11f2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	6839      	ldr	r1, [r7, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f000 fea0 	bl	8005380 <d_print_function_type>
 8004640:	f000 bc3f 	b.w	8004ec2 <d_print_comp+0x11f2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800464a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800464e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f107 020c 	add.w	r2, r7, #12
 800465a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	f04f 0301 	mov.w	r3, #1
 8004674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004680:	e043      	b.n	800470a <d_print_comp+0xa3a>
 8004682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d139      	bne.n	8004700 <d_print_comp+0xa30>
 800468c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004690:	2b03      	cmp	r3, #3
 8004692:	d904      	bls.n	800469e <d_print_comp+0x9ce>
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff f869 	bl	800376c <d_print_error>
 800469a:	f000 bc19 	b.w	8004ed0 <d_print_comp+0x1200>
 800469e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046a2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80046a6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
 80046b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046b4:	4614      	mov	r4, r2
 80046b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80046c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046c6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80046ca:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80046ce:	18cb      	adds	r3, r1, r3
 80046d0:	f1a3 03c4 	sub.w	r3, r3, #196	; 0xc4
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046da:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80046de:	f107 020c 	add.w	r2, r7, #12
 80046e2:	18d2      	adds	r2, r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80046ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046ee:	f04f 0201 	mov.w	r2, #1
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046f8:	f103 0301 	add.w	r3, r3, #1
 80046fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004700:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800470a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d011      	beq.n	8004736 <d_print_comp+0xa66>
 8004712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b17      	cmp	r3, #23
 800471c:	d0b1      	beq.n	8004682 <d_print_comp+0x9b2>
 800471e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b18      	cmp	r3, #24
 8004728:	d0ab      	beq.n	8004682 <d_print_comp+0x9b2>
 800472a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b19      	cmp	r3, #25
 8004734:	d0a5      	beq.n	8004682 <d_print_comp+0x9b2>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	4619      	mov	r1, r3
 800473e:	f7ff fac7 	bl	8003cd0 <d_print_comp>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004748:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d014      	beq.n	800477c <d_print_comp+0xaac>
 8004752:	e3bd      	b.n	8004ed0 <d_print_comp+0x1200>
 8004754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004758:	f103 33ff 	add.w	r3, r3, #4294967295
 800475c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004760:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004764:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004768:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800476c:	18d3      	adds	r3, r2, r3
 800476e:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4619      	mov	r1, r3
 8004778:	f000 fd18 	bl	80051ac <d_print_mod>
 800477c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004780:	2b01      	cmp	r3, #1
 8004782:	d8e7      	bhi.n	8004754 <d_print_comp+0xa84>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	6839      	ldr	r1, [r7, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f000 fea0 	bl	80054d4 <d_print_array_type>
 8004794:	e39c      	b.n	8004ed0 <d_print_comp+0x1200>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800479c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80047a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	653b      	str	r3, [r7, #80]	; 0x50
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	657b      	str	r3, [r7, #84]	; 0x54
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80047b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4619      	mov	r1, r3
 80047c2:	f7ff fa85 	bl	8003cd0 <d_print_comp>
 80047c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <d_print_comp+0xb04>
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	6839      	ldr	r1, [r7, #0]
 80047d0:	f000 fcec 	bl	80051ac <d_print_mod>
 80047d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80047dc:	e378      	b.n	8004ed0 <d_print_comp+0x1200>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	895b      	ldrh	r3, [r3, #10]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d006      	beq.n	80047f4 <d_print_comp+0xb24>
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f646 4108 	movw	r1, #27656	; 0x6c08
 80047ec:	f6c0 0102 	movt	r1, #2050	; 0x802
 80047f0:	f7ff f846 	bl	8003880 <d_append_string>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4ba4      	ldr	r3, [pc, #656]	; (8004a8c <d_print_comp+0xdbc>)
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d00a      	beq.n	8004816 <d_print_comp+0xb46>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4619      	mov	r1, r3
 8004808:	f7ff fa62 	bl	8003cd0 <d_print_comp>
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f04f 0120 	mov.w	r1, #32
 8004812:	f7fe fff5 	bl	8003800 <d_append_char>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	891b      	ldrh	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <d_print_comp+0xb5e>
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f646 4110 	movw	r1, #27664	; 0x6c10
 8004824:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004828:	f7ff f82a 	bl	8003880 <d_append_string>
 800482c:	e350      	b.n	8004ed0 <d_print_comp+0x1200>
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f646 4118 	movw	r1, #27672	; 0x6c18
 8004834:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004838:	f7ff f822 	bl	8003880 <d_append_string>
 800483c:	e348      	b.n	8004ed0 <d_print_comp+0x1200>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <d_print_comp+0xb82>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4619      	mov	r1, r3
 800484e:	f7ff fa3f 	bl	8003cd0 <d_print_comp>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8335 	beq.w	8004ec6 <d_print_comp+0x11f6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004862:	2bfd      	cmp	r3, #253	; 0xfd
 8004864:	d902      	bls.n	800486c <d_print_comp+0xb9c>
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fe ffa0 	bl	80037ac <d_print_flush>
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f646 4120 	movw	r1, #27680	; 0x6c20
 8004872:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004876:	f7ff f803 	bl	8003880 <d_append_string>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800488a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	4619      	mov	r1, r3
 8004896:	f7ff fa1b 	bl	8003cd0 <d_print_comp>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80048a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048a4:	429a      	cmp	r2, r3
 80048a6:	f040 830e 	bne.w	8004ec6 <d_print_comp+0x11f6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80048b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80048b4:	429a      	cmp	r2, r3
 80048b6:	f040 8306 	bne.w	8004ec6 <d_print_comp+0x11f6>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80048c0:	f1a3 0202 	sub.w	r2, r3, #2
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80048ca:	e2fc      	b.n	8004ec6 <d_print_comp+0x11f6>
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f646 4124 	movw	r1, #27684	; 0x6c24
 80048d2:	f6c0 0102 	movt	r1, #2050	; 0x802
 80048d6:	f7fe ffd3 	bl	8003880 <d_append_string>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80048e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80048ea:	2b60      	cmp	r3, #96	; 0x60
 80048ec:	d908      	bls.n	8004900 <d_print_comp+0xc30>
 80048ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80048f2:	2b7a      	cmp	r3, #122	; 0x7a
 80048f4:	d804      	bhi.n	8004900 <d_print_comp+0xc30>
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f04f 0120 	mov.w	r1, #32
 80048fc:	f7fe ff80 	bl	8003800 <d_append_char>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	4611      	mov	r1, r2
 8004910:	461a      	mov	r2, r3
 8004912:	f7fe ff97 	bl	8003844 <d_append_buffer>
 8004916:	e2db      	b.n	8004ed0 <d_print_comp+0x1200>
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f646 4130 	movw	r1, #27696	; 0x6c30
 800491e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004922:	f7fe ffad 	bl	8003880 <d_append_string>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4619      	mov	r1, r3
 800492e:	f7ff f9cf 	bl	8003cd0 <d_print_comp>
 8004932:	e2cd      	b.n	8004ed0 <d_print_comp+0x1200>
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f646 4130 	movw	r1, #27696	; 0x6c30
 800493a:	f6c0 0102 	movt	r1, #2050	; 0x802
 800493e:	f7fe ff9f 	bl	8003880 <d_append_string>
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	f000 fe47 	bl	80055d8 <d_print_cast>
 800494a:	e2c1      	b.n	8004ed0 <d_print_comp+0x1200>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b2e      	cmp	r3, #46	; 0x2e
 8004954:	d006      	beq.n	8004964 <d_print_comp+0xc94>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4619      	mov	r1, r3
 800495e:	f000 fe1d 	bl	800559c <d_print_expr_op>
 8004962:	e00f      	b.n	8004984 <d_print_comp+0xcb4>
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f04f 0128 	mov.w	r1, #40	; 0x28
 800496a:	f7fe ff49 	bl	8003800 <d_append_char>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4619      	mov	r1, r3
 8004976:	f000 fe2f 	bl	80055d8 <d_print_cast>
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004980:	f7fe ff3e 	bl	8003800 <d_append_char>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4619      	mov	r1, r3
 800498c:	f7ff f974 	bl	8003c78 <d_print_subexpr>
 8004990:	e29e      	b.n	8004ed0 <d_print_comp+0x1200>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b31      	cmp	r3, #49	; 0x31
 800499a:	d003      	beq.n	80049a4 <d_print_comp+0xcd4>
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fe fee5 	bl	800376c <d_print_error>
 80049a2:	e295      	b.n	8004ed0 <d_print_comp+0x1200>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b2c      	cmp	r3, #44	; 0x2c
 80049ac:	d111      	bne.n	80049d2 <d_print_comp+0xd02>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10b      	bne.n	80049d2 <d_print_comp+0xd02>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b3e      	cmp	r3, #62	; 0x3e
 80049c6:	d104      	bne.n	80049d2 <d_print_comp+0xd02>
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f04f 0128 	mov.w	r1, #40	; 0x28
 80049ce:	f7fe ff17 	bl	8003800 <d_append_char>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4619      	mov	r1, r3
 80049dc:	f7ff f94c 	bl	8003c78 <d_print_subexpr>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f246 4130 	movw	r1, #25648	; 0x6430
 80049ee:	f6c0 0102 	movt	r1, #2050	; 0x802
 80049f2:	f003 fb19 	bl	8008028 <strcmp>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d111      	bne.n	8004a20 <d_print_comp+0xd50>
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f04f 015b 	mov.w	r1, #91	; 0x5b
 8004a02:	f7fe fefd 	bl	8003800 <d_append_char>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f7ff f95e 	bl	8003cd0 <d_print_comp>
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8004a1a:	f7fe fef1 	bl	8003800 <d_append_char>
 8004a1e:	e01a      	b.n	8004a56 <d_print_comp+0xd86>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f246 31b4 	movw	r1, #25524	; 0x63b4
 8004a2e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004a32:	f003 faf9 	bl	8008028 <strcmp>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <d_print_comp+0xd78>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	4619      	mov	r1, r3
 8004a44:	f000 fdaa 	bl	800559c <d_print_expr_op>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f7ff f911 	bl	8003c78 <d_print_subexpr>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b2c      	cmp	r3, #44	; 0x2c
 8004a5e:	f040 8234 	bne.w	8004eca <d_print_comp+0x11fa>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	f040 822d 	bne.w	8004eca <d_print_comp+0x11fa>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a7c:	f040 8225 	bne.w	8004eca <d_print_comp+0x11fa>
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004a86:	f7fe febb 	bl	8003800 <d_append_char>
 8004a8a:	e21e      	b.n	8004eca <d_print_comp+0x11fa>
 8004a8c:	08026174 	.word	0x08026174
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7fe fe6b 	bl	800376c <d_print_error>
 8004a96:	e21b      	b.n	8004ed0 <d_print_comp+0x1200>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b33      	cmp	r3, #51	; 0x33
 8004aa0:	d105      	bne.n	8004aae <d_print_comp+0xdde>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b34      	cmp	r3, #52	; 0x34
 8004aac:	d003      	beq.n	8004ab6 <d_print_comp+0xde6>
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fe fe5c 	bl	800376c <d_print_error>
 8004ab4:	e20c      	b.n	8004ed0 <d_print_comp+0x1200>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f7ff f8da 	bl	8003c78 <d_print_subexpr>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4619      	mov	r1, r3
 8004acc:	f000 fd66 	bl	800559c <d_print_expr_op>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4619      	mov	r1, r3
 8004adc:	f7ff f8cc 	bl	8003c78 <d_print_subexpr>
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f646 413c 	movw	r1, #27708	; 0x6c3c
 8004ae6:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004aea:	f7fe fec9 	bl	8003880 <d_append_string>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4619      	mov	r1, r3
 8004afa:	f7ff f8bd 	bl	8003c78 <d_print_subexpr>
 8004afe:	e1e7      	b.n	8004ed0 <d_print_comp+0x1200>
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fe fe33 	bl	800376c <d_print_error>
 8004b06:	e1e3      	b.n	8004ed0 <d_print_comp+0x1200>
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b23      	cmp	r3, #35	; 0x23
 8004b18:	f040 808a 	bne.w	8004c30 <d_print_comp+0xf60>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	7c1b      	ldrb	r3, [r3, #16]
 8004b24:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8004b28:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	db7a      	blt.n	8004c26 <d_print_comp+0xf56>
 8004b30:	2b06      	cmp	r3, #6
 8004b32:	dd02      	ble.n	8004b3a <d_print_comp+0xe6a>
 8004b34:	2b07      	cmp	r3, #7
 8004b36:	d04d      	beq.n	8004bd4 <d_print_comp+0xf04>
 8004b38:	e075      	b.n	8004c26 <d_print_comp+0xf56>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d172      	bne.n	8004c2a <d_print_comp+0xf5a>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b36      	cmp	r3, #54	; 0x36
 8004b4a:	d104      	bne.n	8004b56 <d_print_comp+0xe86>
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8004b52:	f7fe fe55 	bl	8003800 <d_append_char>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	f7ff f8b7 	bl	8003cd0 <d_print_comp>
 8004b62:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004b66:	f1a3 0302 	sub.w	r3, r3, #2
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d830      	bhi.n	8004bd0 <d_print_comp+0xf00>
 8004b6e:	a101      	add	r1, pc, #4	; (adr r1, 8004b74 <d_print_comp+0xea4>)
 8004b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b74:	08004b89 	.word	0x08004b89
 8004b78:	08004b95 	.word	0x08004b95
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004bb1 	.word	0x08004bb1
 8004b84:	08004bc1 	.word	0x08004bc1
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f04f 0175 	mov.w	r1, #117	; 0x75
 8004b8e:	f7fe fe37 	bl	8003800 <d_append_char>
 8004b92:	e01e      	b.n	8004bd2 <d_print_comp+0xf02>
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f04f 016c 	mov.w	r1, #108	; 0x6c
 8004b9a:	f7fe fe31 	bl	8003800 <d_append_char>
 8004b9e:	e018      	b.n	8004bd2 <d_print_comp+0xf02>
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f646 4140 	movw	r1, #27712	; 0x6c40
 8004ba6:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004baa:	f7fe fe69 	bl	8003880 <d_append_string>
 8004bae:	e010      	b.n	8004bd2 <d_print_comp+0xf02>
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f646 4144 	movw	r1, #27716	; 0x6c44
 8004bb6:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004bba:	f7fe fe61 	bl	8003880 <d_append_string>
 8004bbe:	e008      	b.n	8004bd2 <d_print_comp+0xf02>
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f646 4148 	movw	r1, #27720	; 0x6c48
 8004bc6:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004bca:	f7fe fe59 	bl	8003880 <d_append_string>
 8004bce:	e000      	b.n	8004bd2 <d_print_comp+0xf02>
 8004bd0:	bf00      	nop
 8004bd2:	e17d      	b.n	8004ed0 <d_print_comp+0x1200>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d127      	bne.n	8004c2e <d_print_comp+0xf5e>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d122      	bne.n	8004c2e <d_print_comp+0xf5e>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b35      	cmp	r3, #53	; 0x35
 8004bee:	d11e      	bne.n	8004c2e <d_print_comp+0xf5e>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b30      	cmp	r3, #48	; 0x30
 8004bfa:	d002      	beq.n	8004c02 <d_print_comp+0xf32>
 8004bfc:	2b31      	cmp	r3, #49	; 0x31
 8004bfe:	d008      	beq.n	8004c12 <d_print_comp+0xf42>
 8004c00:	e00f      	b.n	8004c22 <d_print_comp+0xf52>
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f646 414c 	movw	r1, #27724	; 0x6c4c
 8004c08:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004c0c:	f7fe fe38 	bl	8003880 <d_append_string>
 8004c10:	e15e      	b.n	8004ed0 <d_print_comp+0x1200>
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f646 4154 	movw	r1, #27732	; 0x6c54
 8004c18:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004c1c:	f7fe fe30 	bl	8003880 <d_append_string>
 8004c20:	e156      	b.n	8004ed0 <d_print_comp+0x1200>
 8004c22:	bf00      	nop
 8004c24:	e003      	b.n	8004c2e <d_print_comp+0xf5e>
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <d_print_comp+0xf60>
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <d_print_comp+0xf60>
 8004c2e:	bf00      	nop
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f04f 0128 	mov.w	r1, #40	; 0x28
 8004c36:	f7fe fde3 	bl	8003800 <d_append_char>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4619      	mov	r1, r3
 8004c42:	f7ff f845 	bl	8003cd0 <d_print_comp>
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004c4c:	f7fe fdd8 	bl	8003800 <d_append_char>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b36      	cmp	r3, #54	; 0x36
 8004c56:	d104      	bne.n	8004c62 <d_print_comp+0xf92>
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f04f 012d 	mov.w	r1, #45	; 0x2d
 8004c5e:	f7fe fdcf 	bl	8003800 <d_append_char>
 8004c62:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d104      	bne.n	8004c74 <d_print_comp+0xfa4>
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f04f 015b 	mov.w	r1, #91	; 0x5b
 8004c70:	f7fe fdc6 	bl	8003800 <d_append_char>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	f7ff f828 	bl	8003cd0 <d_print_comp>
 8004c80:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	f040 8122 	bne.w	8004ece <d_print_comp+0x11fe>
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8004c90:	f7fe fdb6 	bl	8003800 <d_append_char>
 8004c94:	e11b      	b.n	8004ece <d_print_comp+0x11fe>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f7fe fe01 	bl	80038a4 <d_append_num>
 8004ca2:	e115      	b.n	8004ed0 <d_print_comp+0x1200>
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f646 415c 	movw	r1, #27740	; 0x6c5c
 8004caa:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004cae:	f7fe fde7 	bl	8003880 <d_append_string>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f7ff f809 	bl	8003cd0 <d_print_comp>
 8004cbe:	e107      	b.n	8004ed0 <d_print_comp+0x1200>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f7ff f802 	bl	8003cd0 <d_print_comp>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f7fe fffc 	bl	8003cd0 <d_print_comp>
 8004cd8:	e0fa      	b.n	8004ed0 <d_print_comp+0x1200>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f7fe fd8c 	bl	8003800 <d_append_char>
 8004ce8:	e0f2      	b.n	8004ed0 <d_print_comp+0x1200>
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f646 416c 	movw	r1, #27756	; 0x6c6c
 8004cf0:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004cf4:	f7fe fdc4 	bl	8003880 <d_append_string>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f7fe ffe6 	bl	8003cd0 <d_print_comp>
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f04f 0129 	mov.w	r1, #41	; 0x29
 8004d0a:	f7fe fd79 	bl	8003800 <d_append_char>
 8004d0e:	e0df      	b.n	8004ed0 <d_print_comp+0x1200>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4619      	mov	r1, r3
 8004d18:	f7fe feaa 	bl	8003a70 <d_find_pack>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <d_print_comp+0x1076>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4619      	mov	r1, r3
 8004d32:	f7fe ffa1 	bl	8003c78 <d_print_subexpr>
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f246 0178 	movw	r1, #24696	; 0x6078
 8004d3c:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004d40:	f7fe fd9e 	bl	8003880 <d_append_string>
 8004d44:	e0c4      	b.n	8004ed0 <d_print_comp+0x1200>
 8004d46:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004d4a:	f7fe ff73 	bl	8003c34 <d_pack_length>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	603b      	str	r3, [r7, #0]
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d62:	e01d      	b.n	8004da0 <d_print_comp+0x10d0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d6a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	6839      	ldr	r1, [r7, #0]
 8004d72:	f7fe ffad 	bl	8003cd0 <d_print_comp>
 8004d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d7a:	f103 32ff 	add.w	r2, r3, #4294967295
 8004d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d82:	429a      	cmp	r2, r3
 8004d84:	dd06      	ble.n	8004d94 <d_print_comp+0x10c4>
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f646 4120 	movw	r1, #27680	; 0x6c20
 8004d8c:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004d90:	f7fe fd76 	bl	8003880 <d_append_string>
 8004d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d98:	f103 0301 	add.w	r3, r3, #1
 8004d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004da0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004da8:	429a      	cmp	r2, r3
 8004daa:	dbdb      	blt.n	8004d64 <d_print_comp+0x1094>
 8004dac:	e090      	b.n	8004ed0 <d_print_comp+0x1200>
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f646 4178 	movw	r1, #27768	; 0x6c78
 8004db4:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004db8:	f7fe fd62 	bl	8003880 <d_append_string>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f103 0301 	add.w	r3, r3, #1
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f7fe fd6c 	bl	80038a4 <d_append_num>
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8004dd2:	f7fe fd15 	bl	8003800 <d_append_char>
 8004dd6:	e07b      	b.n	8004ed0 <d_print_comp+0x1200>
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f646 4180 	movw	r1, #27776	; 0x6c80
 8004dde:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004de2:	f7fe fd4d 	bl	8003880 <d_append_string>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4619      	mov	r1, r3
 8004dee:	f7fe ff6f 	bl	8003cd0 <d_print_comp>
 8004df2:	e06d      	b.n	8004ed0 <d_print_comp+0x1200>
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f646 41a0 	movw	r1, #27808	; 0x6ca0
 8004dfa:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004dfe:	f7fe fd3f 	bl	8003880 <d_append_string>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f7fe ff61 	bl	8003cd0 <d_print_comp>
 8004e0e:	e05f      	b.n	8004ed0 <d_print_comp+0x1200>
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f646 41c0 	movw	r1, #27840	; 0x6cc0
 8004e16:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004e1a:	f7fe fd31 	bl	8003880 <d_append_string>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4619      	mov	r1, r3
 8004e26:	f7fe ff53 	bl	8003cd0 <d_print_comp>
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f646 41cc 	movw	r1, #27852	; 0x6ccc
 8004e30:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004e34:	f7fe fd24 	bl	8003880 <d_append_string>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f103 0301 	add.w	r3, r3, #1
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f7fe fd2e 	bl	80038a4 <d_append_num>
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8004e4e:	f7fe fcd7 	bl	8003800 <d_append_char>
 8004e52:	e03d      	b.n	8004ed0 <d_print_comp+0x1200>
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f646 41d0 	movw	r1, #27856	; 0x6cd0
 8004e5a:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004e5e:	f7fe fd0f 	bl	8003880 <d_append_string>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f103 0301 	add.w	r3, r3, #1
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f7fe fd19 	bl	80038a4 <d_append_num>
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f04f 017d 	mov.w	r1, #125	; 0x7d
 8004e78:	f7fe fcc2 	bl	8003800 <d_append_char>
 8004e7c:	e028      	b.n	8004ed0 <d_print_comp+0x1200>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	4619      	mov	r1, r3
 8004e86:	f7fe ff23 	bl	8003cd0 <d_print_comp>
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f646 41e0 	movw	r1, #27872	; 0x6ce0
 8004e90:	f6c0 0102 	movt	r1, #2050	; 0x802
 8004e94:	f7fe fcf4 	bl	8003880 <d_append_string>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f7fe ff16 	bl	8003cd0 <d_print_comp>
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8004eaa:	f7fe fca9 	bl	8003800 <d_append_char>
 8004eae:	e00f      	b.n	8004ed0 <d_print_comp+0x1200>
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fe fc5b 	bl	800376c <d_print_error>
 8004eb6:	bf00      	nop
 8004eb8:	e00a      	b.n	8004ed0 <d_print_comp+0x1200>
 8004eba:	bf00      	nop
 8004ebc:	e008      	b.n	8004ed0 <d_print_comp+0x1200>
 8004ebe:	bf00      	nop
 8004ec0:	e006      	b.n	8004ed0 <d_print_comp+0x1200>
 8004ec2:	bf00      	nop
 8004ec4:	e004      	b.n	8004ed0 <d_print_comp+0x1200>
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <d_print_comp+0x1200>
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <d_print_comp+0x1200>
 8004ece:	bf00      	nop
 8004ed0:	f107 07d4 	add.w	r7, r7, #212	; 0xd4
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd90      	pop	{r4, r7, pc}

08004ed8 <d_print_java_identifier>:
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	18d3      	adds	r3, r2, r3
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef0:	e071      	b.n	8004fd6 <d_print_java_identifier+0xfe>
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	dd62      	ble.n	8004fc2 <d_print_java_identifier+0xea>
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b5f      	cmp	r3, #95	; 0x5f
 8004f02:	d15e      	bne.n	8004fc2 <d_print_java_identifier+0xea>
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	f103 0301 	add.w	r3, r3, #1
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b5f      	cmp	r3, #95	; 0x5f
 8004f0e:	d158      	bne.n	8004fc2 <d_print_java_identifier+0xea>
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	f103 0302 	add.w	r3, r3, #2
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b55      	cmp	r3, #85	; 0x55
 8004f1a:	d152      	bne.n	8004fc2 <d_print_java_identifier+0xea>
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	f103 0303 	add.w	r3, r3, #3
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	e032      	b.n	8004f92 <d_print_java_identifier+0xba>
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b2f      	cmp	r3, #47	; 0x2f
 8004f32:	d909      	bls.n	8004f48 <d_print_java_identifier+0x70>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b39      	cmp	r3, #57	; 0x39
 8004f3a:	d805      	bhi.n	8004f48 <d_print_java_identifier+0x70>
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	e01a      	b.n	8004f7e <d_print_java_identifier+0xa6>
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d909      	bls.n	8004f64 <d_print_java_identifier+0x8c>
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b46      	cmp	r3, #70	; 0x46
 8004f56:	d805      	bhi.n	8004f64 <d_print_java_identifier+0x8c>
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	e00c      	b.n	8004f7e <d_print_java_identifier+0xa6>
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d916      	bls.n	8004f9a <d_print_java_identifier+0xc2>
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b66      	cmp	r3, #102	; 0x66
 8004f72:	d812      	bhi.n	8004f9a <d_print_java_identifier+0xc2>
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f1a3 0357 	sub.w	r3, r3, #87	; 0x57
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	ea4f 1203 	mov.w	r2, r3, lsl #4
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	18d3      	adds	r3, r2, r3
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f103 0301 	add.w	r3, r3, #1
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3c8      	bcc.n	8004f2c <d_print_java_identifier+0x54>
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d20f      	bcs.n	8004fc2 <d_print_java_identifier+0xea>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b5f      	cmp	r3, #95	; 0x5f
 8004fa8:	d10b      	bne.n	8004fc2 <d_print_java_identifier+0xea>
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2bff      	cmp	r3, #255	; 0xff
 8004fae:	d808      	bhi.n	8004fc2 <d_print_java_identifier+0xea>
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f7fe fc22 	bl	8003800 <d_append_char>
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	e005      	b.n	8004fce <d_print_java_identifier+0xf6>
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f7fe fc19 	bl	8003800 <d_append_char>
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	f103 0301 	add.w	r3, r3, #1
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d389      	bcc.n	8004ef2 <d_print_java_identifier+0x1a>
 8004fde:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop

08004fe8 <d_print_mod_list>:
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80d2 	beq.w	80051a0 <d_print_mod_list+0x1b8>
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7fe fbc3 	bl	8003788 <d_print_saw_error>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 80cb 	bne.w	80051a0 <d_print_mod_list+0x1b8>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d111      	bne.n	8005036 <d_print_mod_list+0x4e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d116      	bne.n	8005046 <d_print_mod_list+0x5e>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b1a      	cmp	r3, #26
 8005020:	d009      	beq.n	8005036 <d_print_mod_list+0x4e>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b1b      	cmp	r3, #27
 800502a:	d004      	beq.n	8005036 <d_print_mod_list+0x4e>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b1c      	cmp	r3, #28
 8005034:	d107      	bne.n	8005046 <d_print_mod_list+0x5e>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	4619      	mov	r1, r3
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	f7ff ffd2 	bl	8004fe8 <d_print_mod_list>
 8005044:	e0ad      	b.n	80051a2 <d_print_mod_list+0x1ba>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f04f 0201 	mov.w	r2, #1
 800504c:	609a      	str	r2, [r3, #8]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b25      	cmp	r3, #37	; 0x25
 8005068:	d10d      	bne.n	8005086 <d_print_mod_list+0x9e>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	4611      	mov	r1, r2
 8005076:	461a      	mov	r2, r3
 8005078:	f000 f982 	bl	8005380 <d_print_function_type>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005084:	e08d      	b.n	80051a2 <d_print_mod_list+0x1ba>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b26      	cmp	r3, #38	; 0x26
 800508e:	d10d      	bne.n	80050ac <d_print_mod_list+0xc4>
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	f000 fa19 	bl	80054d4 <d_print_array_type>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80050aa:	e07a      	b.n	80051a2 <d_print_mod_list+0x1ba>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d162      	bne.n	800517c <d_print_mod_list+0x194>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fe fdfd 	bl	8003cd0 <d_print_comp>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d107      	bne.n	80050fa <d_print_mod_list+0x112>
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f646 21ec 	movw	r1, #27372	; 0x6aec
 80050f0:	f6c0 0102 	movt	r1, #2050	; 0x802
 80050f4:	f7fe fbc4 	bl	8003880 <d_append_string>
 80050f8:	e004      	b.n	8005104 <d_print_mod_list+0x11c>
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8005100:	f7fe fb7e 	bl	8003800 <d_append_char>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b3f      	cmp	r3, #63	; 0x3f
 8005112:	d11d      	bne.n	8005150 <d_print_mod_list+0x168>
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f646 41ec 	movw	r1, #27884	; 0x6cec
 800511a:	f6c0 0102 	movt	r1, #2050	; 0x802
 800511e:	f7fe fbaf 	bl	8003880 <d_append_string>
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f103 0301 	add.w	r3, r3, #1
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	4619      	mov	r1, r3
 800512e:	f7fe fbb9 	bl	80038a4 <d_append_num>
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f646 41fc 	movw	r1, #27900	; 0x6cfc
 8005138:	f6c0 0102 	movt	r1, #2050	; 0x802
 800513c:	f7fe fba0 	bl	8003880 <d_append_string>
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	e003      	b.n	8005150 <d_print_mod_list+0x168>
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	e000      	b.n	8005152 <d_print_mod_list+0x16a>
 8005150:	bf00      	nop
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b1a      	cmp	r3, #26
 8005158:	d0f6      	beq.n	8005148 <d_print_mod_list+0x160>
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b1b      	cmp	r3, #27
 8005160:	d0f2      	beq.n	8005148 <d_print_mod_list+0x160>
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b1c      	cmp	r3, #28
 8005168:	d0ee      	beq.n	8005148 <d_print_mod_list+0x160>
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	69f9      	ldr	r1, [r7, #28]
 800516e:	f7fe fdaf 	bl	8003cd0 <d_print_comp>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800517a:	e012      	b.n	80051a2 <d_print_mod_list+0x1ba>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	4619      	mov	r1, r3
 8005184:	f000 f812 	bl	80051ac <d_print_mod>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	4619      	mov	r1, r3
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	f7ff ff25 	bl	8004fe8 <d_print_mod_list>
 800519e:	e000      	b.n	80051a2 <d_print_mod_list+0x1ba>
 80051a0:	bf00      	nop
 80051a2:	f107 0720 	add.w	r7, r7, #32
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop

080051ac <d_print_mod>:
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	f1a3 0303 	sub.w	r3, r3, #3
 80051be:	2b26      	cmp	r3, #38	; 0x26
 80051c0:	f200 80d3 	bhi.w	800536a <d_print_mod+0x1be>
 80051c4:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <d_print_mod+0x20>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	08005337 	.word	0x08005337
 80051d0:	0800536b 	.word	0x0800536b
 80051d4:	0800536b 	.word	0x0800536b
 80051d8:	0800536b 	.word	0x0800536b
 80051dc:	0800536b 	.word	0x0800536b
 80051e0:	0800536b 	.word	0x0800536b
 80051e4:	0800536b 	.word	0x0800536b
 80051e8:	0800536b 	.word	0x0800536b
 80051ec:	0800536b 	.word	0x0800536b
 80051f0:	0800536b 	.word	0x0800536b
 80051f4:	0800536b 	.word	0x0800536b
 80051f8:	0800536b 	.word	0x0800536b
 80051fc:	0800536b 	.word	0x0800536b
 8005200:	0800536b 	.word	0x0800536b
 8005204:	0800536b 	.word	0x0800536b
 8005208:	0800536b 	.word	0x0800536b
 800520c:	0800536b 	.word	0x0800536b
 8005210:	0800536b 	.word	0x0800536b
 8005214:	0800536b 	.word	0x0800536b
 8005218:	0800536b 	.word	0x0800536b
 800521c:	08005269 	.word	0x08005269
 8005220:	08005279 	.word	0x08005279
 8005224:	08005289 	.word	0x08005289
 8005228:	08005269 	.word	0x08005269
 800522c:	08005279 	.word	0x08005279
 8005230:	08005289 	.word	0x08005289
 8005234:	08005299 	.word	0x08005299
 8005238:	080052b1 	.word	0x080052b1
 800523c:	080052c9 	.word	0x080052c9
 8005240:	080052d5 	.word	0x080052d5
 8005244:	080052e5 	.word	0x080052e5
 8005248:	080052f5 	.word	0x080052f5
 800524c:	0800536b 	.word	0x0800536b
 8005250:	0800536b 	.word	0x0800536b
 8005254:	0800536b 	.word	0x0800536b
 8005258:	0800536b 	.word	0x0800536b
 800525c:	08005305 	.word	0x08005305
 8005260:	0800536b 	.word	0x0800536b
 8005264:	08005345 	.word	0x08005345
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f646 5100 	movw	r1, #27904	; 0x6d00
 800526e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8005272:	f7fe fb05 	bl	8003880 <d_append_string>
 8005276:	e07f      	b.n	8005378 <d_print_mod+0x1cc>
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f646 510c 	movw	r1, #27916	; 0x6d0c
 800527e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8005282:	f7fe fafd 	bl	8003880 <d_append_string>
 8005286:	e077      	b.n	8005378 <d_print_mod+0x1cc>
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f646 5118 	movw	r1, #27928	; 0x6d18
 800528e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8005292:	f7fe faf5 	bl	8003880 <d_append_string>
 8005296:	e06f      	b.n	8005378 <d_print_mod+0x1cc>
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f04f 0120 	mov.w	r1, #32
 800529e:	f7fe faaf 	bl	8003800 <d_append_char>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4619      	mov	r1, r3
 80052aa:	f7fe fd11 	bl	8003cd0 <d_print_comp>
 80052ae:	e063      	b.n	8005378 <d_print_mod+0x1cc>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d15c      	bne.n	8005376 <d_print_mod+0x1ca>
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f04f 012a 	mov.w	r1, #42	; 0x2a
 80052c2:	f7fe fa9d 	bl	8003800 <d_append_char>
 80052c6:	e056      	b.n	8005376 <d_print_mod+0x1ca>
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f04f 0126 	mov.w	r1, #38	; 0x26
 80052ce:	f7fe fa97 	bl	8003800 <d_append_char>
 80052d2:	e051      	b.n	8005378 <d_print_mod+0x1cc>
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f246 31a4 	movw	r1, #25508	; 0x63a4
 80052da:	f6c0 0102 	movt	r1, #2050	; 0x802
 80052de:	f7fe facf 	bl	8003880 <d_append_string>
 80052e2:	e049      	b.n	8005378 <d_print_mod+0x1cc>
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f646 5120 	movw	r1, #27936	; 0x6d20
 80052ea:	f6c0 0102 	movt	r1, #2050	; 0x802
 80052ee:	f7fe fac7 	bl	8003880 <d_append_string>
 80052f2:	e041      	b.n	8005378 <d_print_mod+0x1cc>
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f646 512c 	movw	r1, #27948	; 0x6d2c
 80052fa:	f6c0 0102 	movt	r1, #2050	; 0x802
 80052fe:	f7fe fabf 	bl	8003880 <d_append_string>
 8005302:	e039      	b.n	8005378 <d_print_mod+0x1cc>
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fe fae7 	bl	80038d8 <d_last_char>
 800530a:	4603      	mov	r3, r0
 800530c:	2b28      	cmp	r3, #40	; 0x28
 800530e:	d004      	beq.n	800531a <d_print_mod+0x16e>
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f04f 0120 	mov.w	r1, #32
 8005316:	f7fe fa73 	bl	8003800 <d_append_char>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	4619      	mov	r1, r3
 8005322:	f7fe fcd5 	bl	8003cd0 <d_print_comp>
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f646 5138 	movw	r1, #27960	; 0x6d38
 800532c:	f6c0 0102 	movt	r1, #2050	; 0x802
 8005330:	f7fe faa6 	bl	8003880 <d_append_string>
 8005334:	e020      	b.n	8005378 <d_print_mod+0x1cc>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4619      	mov	r1, r3
 800533e:	f7fe fcc7 	bl	8003cd0 <d_print_comp>
 8005342:	e019      	b.n	8005378 <d_print_mod+0x1cc>
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f646 513c 	movw	r1, #27964	; 0x6d3c
 800534a:	f6c0 0102 	movt	r1, #2050	; 0x802
 800534e:	f7fe fa97 	bl	8003880 <d_append_string>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4619      	mov	r1, r3
 800535a:	f7fe fcb9 	bl	8003cd0 <d_print_comp>
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f04f 0129 	mov.w	r1, #41	; 0x29
 8005364:	f7fe fa4c 	bl	8003800 <d_append_char>
 8005368:	e006      	b.n	8005378 <d_print_mod+0x1cc>
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	f7fe fcaf 	bl	8003cd0 <d_print_comp>
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <d_print_mod+0x1cc>
 8005376:	bf00      	nop
 8005378:	f107 0708 	add.w	r7, r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <d_print_function_type>:
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e032      	b.n	8005404 <d_print_function_type+0x84>
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d132      	bne.n	800540c <d_print_function_type+0x8c>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	f1a3 0317 	sub.w	r3, r3, #23
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d81e      	bhi.n	80053f2 <d_print_function_type+0x72>
 80053b4:	f04f 0201 	mov.w	r2, #1
 80053b8:	fa02 f203 	lsl.w	r2, r2, r3
 80053bc:	f640 4347 	movw	r3, #3143	; 0xc47
 80053c0:	f2c0 0301 	movt	r3, #1
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10c      	bne.n	80053e4 <d_print_function_type+0x64>
 80053ca:	f402 7360 	and.w	r3, r2, #896	; 0x380
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <d_print_function_type+0x5c>
 80053d2:	f002 0338 	and.w	r3, r2, #56	; 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10d      	bne.n	80053f6 <d_print_function_type+0x76>
 80053da:	e00a      	b.n	80053f2 <d_print_function_type+0x72>
 80053dc:	f04f 0301 	mov.w	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	e009      	b.n	80053f8 <d_print_function_type+0x78>
 80053e4:	f04f 0301 	mov.w	r3, #1
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	f04f 0301 	mov.w	r3, #1
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	e002      	b.n	80053f8 <d_print_function_type+0x78>
 80053f2:	bf00      	nop
 80053f4:	e000      	b.n	80053f8 <d_print_function_type+0x78>
 80053f6:	bf00      	nop
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d108      	bne.n	8005410 <d_print_function_type+0x90>
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1c9      	bne.n	800539e <d_print_function_type+0x1e>
 800540a:	e002      	b.n	8005412 <d_print_function_type+0x92>
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <d_print_function_type+0x92>
 8005410:	bf00      	nop
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d024      	beq.n	8005462 <d_print_function_type+0xe2>
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10e      	bne.n	800543c <d_print_function_type+0xbc>
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7fe fa5a 	bl	80038d8 <d_last_char>
 8005424:	4603      	mov	r3, r0
 8005426:	2b28      	cmp	r3, #40	; 0x28
 8005428:	d008      	beq.n	800543c <d_print_function_type+0xbc>
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7fe fa54 	bl	80038d8 <d_last_char>
 8005430:	4603      	mov	r3, r0
 8005432:	2b2a      	cmp	r3, #42	; 0x2a
 8005434:	d002      	beq.n	800543c <d_print_function_type+0xbc>
 8005436:	f04f 0301 	mov.w	r3, #1
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <d_print_function_type+0xd8>
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7fe fa48 	bl	80038d8 <d_last_char>
 8005448:	4603      	mov	r3, r0
 800544a:	2b20      	cmp	r3, #32
 800544c:	d004      	beq.n	8005458 <d_print_function_type+0xd8>
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f04f 0120 	mov.w	r1, #32
 8005454:	f7fe f9d4 	bl	8003800 <d_append_char>
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f04f 0128 	mov.w	r1, #40	; 0x28
 800545e:	f7fe f9cf 	bl	8003800 <d_append_char>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f7ff fdb4 	bl	8004fe8 <d_print_mod_list>
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <d_print_function_type+0x110>
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f04f 0129 	mov.w	r1, #41	; 0x29
 800548c:	f7fe f9b8 	bl	8003800 <d_append_char>
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f04f 0128 	mov.w	r1, #40	; 0x28
 8005496:	f7fe f9b3 	bl	8003800 <d_append_char>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <d_print_function_type+0x12e>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fe fc11 	bl	8003cd0 <d_print_comp>
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f04f 0129 	mov.w	r1, #41	; 0x29
 80054b4:	f7fe f9a4 	bl	8003800 <d_append_char>
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	f04f 0201 	mov.w	r2, #1
 80054c0:	f7ff fd92 	bl	8004fe8 <d_print_mod_list>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80054cc:	f107 0720 	add.w	r7, r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <d_print_array_type>:
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	f04f 0301 	mov.w	r3, #1
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d037      	beq.n	800555c <d_print_array_type+0x88>
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e016      	b.n	8005526 <d_print_array_type+0x52>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10f      	bne.n	8005520 <d_print_array_type+0x4c>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b26      	cmp	r3, #38	; 0x26
 8005508:	d103      	bne.n	8005512 <d_print_array_type+0x3e>
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e00c      	b.n	800552c <d_print_array_type+0x58>
 8005512:	f04f 0301 	mov.w	r3, #1
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	f04f 0301 	mov.w	r3, #1
 800551c:	61fb      	str	r3, [r7, #28]
 800551e:	e005      	b.n	800552c <d_print_array_type+0x58>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e5      	bne.n	80054f8 <d_print_array_type+0x24>
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <d_print_array_type+0x6c>
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f646 5148 	movw	r1, #27976	; 0x6d48
 8005538:	f6c0 0102 	movt	r1, #2050	; 0x802
 800553c:	f7fe f9a0 	bl	8003880 <d_append_string>
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f7ff fd4e 	bl	8004fe8 <d_print_mod_list>
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <d_print_array_type+0x88>
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f04f 0129 	mov.w	r1, #41	; 0x29
 8005558:	f7fe f952 	bl	8003800 <d_append_char>
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <d_print_array_type+0x98>
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f04f 0120 	mov.w	r1, #32
 8005568:	f7fe f94a 	bl	8003800 <d_append_char>
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f04f 015b 	mov.w	r1, #91	; 0x5b
 8005572:	f7fe f945 	bl	8003800 <d_append_char>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <d_print_array_type+0xb6>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	4619      	mov	r1, r3
 8005586:	f7fe fba3 	bl	8003cd0 <d_print_comp>
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f04f 015d 	mov.w	r1, #93	; 0x5d
 8005590:	f7fe f936 	bl	8003800 <d_append_char>
 8005594:	f107 0720 	add.w	r7, r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <d_print_expr_op>:
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b2c      	cmp	r3, #44	; 0x2c
 80055ac:	d10b      	bne.n	80055c6 <d_print_expr_op+0x2a>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	4611      	mov	r1, r2
 80055be:	461a      	mov	r2, r3
 80055c0:	f7fe f940 	bl	8003844 <d_append_buffer>
 80055c4:	e003      	b.n	80055ce <d_print_expr_op+0x32>
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	f7fe fb81 	bl	8003cd0 <d_print_comp>
 80055ce:	f107 0708 	add.w	r7, r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop

080055d8 <d_print_cast>:
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d006      	beq.n	80055fa <d_print_cast+0x22>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4619      	mov	r1, r3
 80055f4:	f7fe fb6c 	bl	8003cd0 <d_print_comp>
 80055f8:	e04a      	b.n	8005690 <d_print_cast+0xb8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f107 020c 	add.w	r2, r7, #12
 800561a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	4619      	mov	r1, r3
 800562e:	f7fe fb4f 	bl	8003cd0 <d_print_comp>
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fe f94c 	bl	80038d8 <d_last_char>
 8005640:	4603      	mov	r3, r0
 8005642:	2b3c      	cmp	r3, #60	; 0x3c
 8005644:	d104      	bne.n	8005650 <d_print_cast+0x78>
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f04f 0120 	mov.w	r1, #32
 800564c:	f7fe f8d8 	bl	8003800 <d_append_char>
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8005656:	f7fe f8d3 	bl	8003800 <d_append_char>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4619      	mov	r1, r3
 8005664:	f7fe fb34 	bl	8003cd0 <d_print_comp>
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fe f935 	bl	80038d8 <d_last_char>
 800566e:	4603      	mov	r3, r0
 8005670:	2b3e      	cmp	r3, #62	; 0x3e
 8005672:	d104      	bne.n	800567e <d_print_cast+0xa6>
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f04f 0120 	mov.w	r1, #32
 800567a:	f7fe f8c1 	bl	8003800 <d_append_char>
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8005684:	f7fe f8bc 	bl	8003800 <d_append_char>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005690:	f107 0718 	add.w	r7, r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <d_init_info>:
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	18d2      	adds	r2, r2, r3
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	60da      	str	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056c8:	461a      	mov	r2, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	619a      	str	r2, [r3, #24]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	615a      	str	r2, [r3, #20]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	621a      	str	r2, [r3, #32]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	629a      	str	r2, [r3, #40]	; 0x28
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
 80056fc:	f107 0714 	add.w	r7, r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <d_demangle_callback>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	b099      	sub	sp, #100	; 0x64
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b5f      	cmp	r3, #95	; 0x5f
 800571e:	d10a      	bne.n	8005736 <d_demangle_callback+0x2e>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f103 0301 	add.w	r3, r3, #1
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b5a      	cmp	r3, #90	; 0x5a
 800572a:	d104      	bne.n	8005736 <d_demangle_callback+0x2e>
 800572c:	f04f 0301 	mov.w	r3, #1
 8005730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005734:	e049      	b.n	80057ca <d_demangle_callback+0xc2>
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f246 316c 	movw	r1, #25452	; 0x636c
 800573c:	f6c0 0102 	movt	r1, #2050	; 0x802
 8005740:	f04f 0208 	mov.w	r2, #8
 8005744:	f002 fdec 	bl	8008320 <strncmp>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d131      	bne.n	80057b2 <d_demangle_callback+0xaa>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f103 0308 	add.w	r3, r3, #8
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b2e      	cmp	r3, #46	; 0x2e
 8005758:	d00b      	beq.n	8005772 <d_demangle_callback+0x6a>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f103 0308 	add.w	r3, r3, #8
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b5f      	cmp	r3, #95	; 0x5f
 8005764:	d005      	beq.n	8005772 <d_demangle_callback+0x6a>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f103 0308 	add.w	r3, r3, #8
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b24      	cmp	r3, #36	; 0x24
 8005770:	d11f      	bne.n	80057b2 <d_demangle_callback+0xaa>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f103 0309 	add.w	r3, r3, #9
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b44      	cmp	r3, #68	; 0x44
 800577c:	d005      	beq.n	800578a <d_demangle_callback+0x82>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f103 0309 	add.w	r3, r3, #9
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b49      	cmp	r3, #73	; 0x49
 8005788:	d113      	bne.n	80057b2 <d_demangle_callback+0xaa>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f103 030a 	add.w	r3, r3, #10
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b5f      	cmp	r3, #95	; 0x5f
 8005794:	d10d      	bne.n	80057b2 <d_demangle_callback+0xaa>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f103 0309 	add.w	r3, r3, #9
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b49      	cmp	r3, #73	; 0x49
 80057a0:	d102      	bne.n	80057a8 <d_demangle_callback+0xa0>
 80057a2:	f04f 0302 	mov.w	r3, #2
 80057a6:	e001      	b.n	80057ac <d_demangle_callback+0xa4>
 80057a8:	f04f 0303 	mov.w	r3, #3
 80057ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80057b0:	e00b      	b.n	80057ca <d_demangle_callback+0xc2>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <d_demangle_callback+0xba>
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	e0f6      	b.n	80059b0 <d_demangle_callback+0x2a8>
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f002 fd78 	bl	80082c0 <strlen>
 80057d0:	4602      	mov	r2, r0
 80057d2:	f107 0310 	add.w	r3, r7, #16
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	f7ff ff5d 	bl	8005698 <d_init_info>
 80057de:	466b      	mov	r3, sp
 80057e0:	461e      	mov	r6, r3
 80057e2:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80057e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80057e8:	657b      	str	r3, [r7, #84]	; 0x54
 80057ea:	462b      	mov	r3, r5
 80057ec:	4618      	mov	r0, r3
 80057ee:	f04f 0100 	mov.w	r1, #0
 80057f2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80057f6:	fb03 f201 	mul.w	r2, r3, r1
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	fb03 f300 	mul.w	r3, r3, r0
 8005802:	18d4      	adds	r4, r2, r3
 8005804:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005808:	fba0 2303 	umull	r2, r3, r0, r3
 800580c:	18e1      	adds	r1, r4, r3
 800580e:	460b      	mov	r3, r1
 8005810:	462a      	mov	r2, r5
 8005812:	4613      	mov	r3, r2
 8005814:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005818:	189b      	adds	r3, r3, r2
 800581a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800581e:	462b      	mov	r3, r5
 8005820:	4618      	mov	r0, r3
 8005822:	f04f 0100 	mov.w	r1, #0
 8005826:	f04f 0360 	mov.w	r3, #96	; 0x60
 800582a:	fb03 f201 	mul.w	r2, r3, r1
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	fb03 f300 	mul.w	r3, r3, r0
 8005836:	18d4      	adds	r4, r2, r3
 8005838:	f04f 0360 	mov.w	r3, #96	; 0x60
 800583c:	fba0 2303 	umull	r2, r3, r0, r3
 8005840:	18e1      	adds	r1, r4, r3
 8005842:	460b      	mov	r3, r1
 8005844:	462a      	mov	r2, r5
 8005846:	4613      	mov	r3, r2
 8005848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800584c:	189b      	adds	r3, r3, r2
 800584e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005852:	f103 0307 	add.w	r3, r3, #7
 8005856:	f103 0307 	add.w	r3, r3, #7
 800585a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800585e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005862:	ebad 0d03 	sub.w	sp, sp, r3
 8005866:	466b      	mov	r3, sp
 8005868:	f103 0307 	add.w	r3, r3, #7
 800586c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005870:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005874:	653b      	str	r3, [r7, #80]	; 0x50
 8005876:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005878:	f100 33ff 	add.w	r3, r0, #4294967295
 800587c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800587e:	4601      	mov	r1, r0
 8005880:	460a      	mov	r2, r1
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 800588a:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800588e:	ea41 0b0b 	orr.w	fp, r1, fp
 8005892:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005896:	4601      	mov	r1, r0
 8005898:	460a      	mov	r2, r1
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	ea4f 61d2 	mov.w	r1, r2, lsr #27
 80058a2:	ea4f 1943 	mov.w	r9, r3, lsl #5
 80058a6:	ea41 0909 	orr.w	r9, r1, r9
 80058aa:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80058ae:	4603      	mov	r3, r0
 80058b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80058b4:	f103 0307 	add.w	r3, r3, #7
 80058b8:	f103 0307 	add.w	r3, r3, #7
 80058bc:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80058c0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80058c4:	ebad 0d03 	sub.w	sp, sp, r3
 80058c8:	466b      	mov	r3, sp
 80058ca:	f103 0307 	add.w	r3, r3, #7
 80058ce:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80058d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80058d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058da:	623b      	str	r3, [r7, #32]
 80058dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d846      	bhi.n	8005976 <d_demangle_callback+0x26e>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <d_demangle_callback+0x1e8>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005901 	.word	0x08005901
 80058f4:	08005911 	.word	0x08005911
 80058f8:	08005925 	.word	0x08005925
 80058fc:	08005925 	.word	0x08005925
 8005900:	f107 0310 	add.w	r3, r7, #16
 8005904:	4618      	mov	r0, r3
 8005906:	f7fc f8b9 	bl	8001a7c <d_type>
 800590a:	4603      	mov	r3, r0
 800590c:	65bb      	str	r3, [r7, #88]	; 0x58
 800590e:	e032      	b.n	8005976 <d_demangle_callback+0x26e>
 8005910:	f107 0310 	add.w	r3, r7, #16
 8005914:	4618      	mov	r0, r3
 8005916:	f04f 0101 	mov.w	r1, #1
 800591a:	f7fa ff79 	bl	8000810 <d_mangled_name>
 800591e:	4603      	mov	r3, r0
 8005920:	65bb      	str	r3, [r7, #88]	; 0x58
 8005922:	e028      	b.n	8005976 <d_demangle_callback+0x26e>
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f103 030b 	add.w	r3, r3, #11
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005930:	2b02      	cmp	r3, #2
 8005932:	d102      	bne.n	800593a <d_demangle_callback+0x232>
 8005934:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8005938:	e001      	b.n	800593e <d_demangle_callback+0x236>
 800593a:	f04f 043d 	mov.w	r4, #61	; 0x3d
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f107 0210 	add.w	r2, r7, #16
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	f7fa fe16 	bl	8000578 <d_make_demangle_mangled_name>
 800594c:	4603      	mov	r3, r0
 800594e:	f107 0210 	add.w	r2, r7, #16
 8005952:	4610      	mov	r0, r2
 8005954:	4621      	mov	r1, r4
 8005956:	461a      	mov	r2, r3
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	f7fa fd40 	bl	80003e0 <d_make_comp>
 8005960:	4603      	mov	r3, r0
 8005962:	65bb      	str	r3, [r7, #88]	; 0x58
 8005964:	69fc      	ldr	r4, [r7, #28]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4618      	mov	r0, r3
 800596a:	f002 fca9 	bl	80082c0 <strlen>
 800596e:	4603      	mov	r3, r0
 8005970:	18e3      	adds	r3, r4, r3
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	bf00      	nop
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d006      	beq.n	8005990 <d_demangle_callback+0x288>
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <d_demangle_callback+0x288>
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <d_demangle_callback+0x29e>
 8005996:	68b8      	ldr	r0, [r7, #8]
 8005998:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	f7fd ffa9 	bl	80038f4 <d_print_callback>
 80059a2:	4603      	mov	r3, r0
 80059a4:	e001      	b.n	80059aa <d_demangle_callback+0x2a2>
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	647b      	str	r3, [r7, #68]	; 0x44
 80059ac:	46b5      	mov	sp, r6
 80059ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b0:	4618      	mov	r0, r3
 80059b2:	f107 0764 	add.w	r7, r7, #100	; 0x64
 80059b6:	46bd      	mov	sp, r7
 80059b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059bc <d_demangle>:
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08a      	sub	sp, #40	; 0x28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	f107 0314 	add.w	r3, r7, #20
 80059cc:	4618      	mov	r0, r3
 80059ce:	f04f 0100 	mov.w	r1, #0
 80059d2:	f7fd fddb 	bl	800358c <d_growable_string_init>
 80059d6:	f107 0314 	add.w	r3, r7, #20
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	f243 62dd 	movw	r2, #14045	; 0x36dd
 80059e2:	f6c0 0200 	movt	r2, #2048	; 0x800
 80059e6:	f7ff fe8f 	bl	8005708 <d_demangle_callback>
 80059ea:	4603      	mov	r3, r0
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <d_demangle+0x4e>
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 fb64 	bl	80070c4 <free>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e009      	b.n	8005a1e <d_demangle+0x62>
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <d_demangle+0x58>
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	e001      	b.n	8005a18 <d_demangle+0x5c>
 8005a14:	f04f 0301 	mov.w	r3, #1
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <__cxa_demangle>:
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <__cxa_demangle+0x28>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <__cxa_demangle+0x22>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	f06f 0202 	mvn.w	r2, #2
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e058      	b.n	8005b02 <__cxa_demangle+0xda>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <__cxa_demangle+0x48>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <__cxa_demangle+0x48>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <__cxa_demangle+0x42>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	f06f 0202 	mvn.w	r2, #2
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	e048      	b.n	8005b02 <__cxa_demangle+0xda>
 8005a70:	f107 0310 	add.w	r3, r7, #16
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f04f 0111 	mov.w	r1, #17
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f7ff ff9e 	bl	80059bc <d_demangle>
 8005a80:	4603      	mov	r3, r0
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d111      	bne.n	8005aae <__cxa_demangle+0x86>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <__cxa_demangle+0x80>
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d104      	bne.n	8005aa0 <__cxa_demangle+0x78>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e003      	b.n	8005aa8 <__cxa_demangle+0x80>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f06f 0201 	mvn.w	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e029      	b.n	8005b02 <__cxa_demangle+0xda>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d106      	bne.n	8005ac2 <__cxa_demangle+0x9a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01b      	beq.n	8005af2 <__cxa_demangle+0xca>
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e017      	b.n	8005af2 <__cxa_demangle+0xca>
 8005ac2:	6978      	ldr	r0, [r7, #20]
 8005ac4:	f002 fbfc 	bl	80082c0 <strlen>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d209      	bcs.n	8005ae6 <__cxa_demangle+0xbe>
 8005ad2:	68b8      	ldr	r0, [r7, #8]
 8005ad4:	6979      	ldr	r1, [r7, #20]
 8005ad6:	f002 fb95 	bl	8008204 <strcpy>
 8005ada:	6978      	ldr	r0, [r7, #20]
 8005adc:	f001 faf2 	bl	80070c4 <free>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e005      	b.n	8005af2 <__cxa_demangle+0xca>
 8005ae6:	68b8      	ldr	r0, [r7, #8]
 8005ae8:	f001 faec 	bl	80070c4 <free>
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <__cxa_demangle+0xd8>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f107 0718 	add.w	r7, r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <__gcclibcxx_demangle_callback>:
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <__gcclibcxx_demangle_callback+0x18>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <__gcclibcxx_demangle_callback+0x1e>
 8005b24:	f06f 0302 	mvn.w	r3, #2
 8005b28:	e010      	b.n	8005b4c <__gcclibcxx_demangle_callback+0x40>
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f04f 0111 	mov.w	r1, #17
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f7ff fde8 	bl	8005708 <d_demangle_callback>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <__gcclibcxx_demangle_callback+0x3c>
 8005b42:	f06f 0301 	mvn.w	r3, #1
 8005b46:	e001      	b.n	8005b4c <__gcclibcxx_demangle_callback+0x40>
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f107 0718 	add.w	r7, r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop

08005b58 <_Unwind_decode_target2>:
 8005b58:	6803      	ldr	r3, [r0, #0]
 8005b5a:	b103      	cbz	r3, 8005b5e <_Unwind_decode_target2+0x6>
 8005b5c:	181b      	adds	r3, r3, r0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop

08005b64 <selfrel_offset31>:
 8005b64:	6803      	ldr	r3, [r0, #0]
 8005b66:	005a      	lsls	r2, r3, #1
 8005b68:	bf4c      	ite	mi
 8005b6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005b6e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	18c0      	adds	r0, r0, r3
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop

08005b78 <search_EIT_table>:
 8005b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	4691      	mov	r9, r2
 8005b80:	460e      	mov	r6, r1
 8005b82:	b301      	cbz	r1, 8005bc6 <search_EIT_table+0x4e>
 8005b84:	f101 3bff 	add.w	fp, r1, #4294967295
 8005b88:	2700      	movs	r7, #0
 8005b8a:	46da      	mov	sl, fp
 8005b8c:	eb07 050a 	add.w	r5, r7, sl
 8005b90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b94:	106d      	asrs	r5, r5, #1
 8005b96:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7ff ffe2 	bl	8005b64 <selfrel_offset31>
 8005ba0:	4680      	mov	r8, r0
 8005ba2:	1c68      	adds	r0, r5, #1
 8005ba4:	45ab      	cmp	fp, r5
 8005ba6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8005baa:	bf08      	it	eq
 8005bac:	f04f 30ff 	moveq.w	r0, #4294967295
 8005bb0:	d002      	beq.n	8005bb8 <search_EIT_table+0x40>
 8005bb2:	f7ff ffd7 	bl	8005b64 <selfrel_offset31>
 8005bb6:	3801      	subs	r0, #1
 8005bb8:	45c8      	cmp	r8, r9
 8005bba:	d907      	bls.n	8005bcc <search_EIT_table+0x54>
 8005bbc:	42bd      	cmp	r5, r7
 8005bbe:	f105 3aff 	add.w	sl, r5, #4294967295
 8005bc2:	d1e3      	bne.n	8005b8c <search_EIT_table+0x14>
 8005bc4:	2600      	movs	r6, #0
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bcc:	4548      	cmp	r0, r9
 8005bce:	f105 0701 	add.w	r7, r5, #1
 8005bd2:	d3db      	bcc.n	8005b8c <search_EIT_table+0x14>
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bda:	bf00      	nop

08005bdc <get_eit_entry>:
 8005bdc:	4b2c      	ldr	r3, [pc, #176]	; (8005c90 <get_eit_entry+0xb4>)
 8005bde:	b530      	push	{r4, r5, lr}
 8005be0:	4604      	mov	r4, r0
 8005be2:	b083      	sub	sp, #12
 8005be4:	1e8d      	subs	r5, r1, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d04a      	beq.n	8005c80 <get_eit_entry+0xa4>
 8005bea:	4628      	mov	r0, r5
 8005bec:	a901      	add	r1, sp, #4
 8005bee:	f3af 8000 	nop.w
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d023      	beq.n	8005c40 <get_eit_entry+0x64>
 8005bf8:	462a      	mov	r2, r5
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	9901      	ldr	r1, [sp, #4]
 8005bfe:	f7ff ffbb 	bl	8005b78 <search_EIT_table>
 8005c02:	4605      	mov	r5, r0
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d01e      	beq.n	8005c46 <get_eit_entry+0x6a>
 8005c08:	f7ff ffac 	bl	8005b64 <selfrel_offset31>
 8005c0c:	686b      	ldr	r3, [r5, #4]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	64a0      	str	r0, [r4, #72]	; 0x48
 8005c12:	d011      	beq.n	8005c38 <get_eit_entry+0x5c>
 8005c14:	1d28      	adds	r0, r5, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	db23      	blt.n	8005c62 <get_eit_entry+0x86>
 8005c1a:	f7ff ffa3 	bl	8005b64 <selfrel_offset31>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	6523      	str	r3, [r4, #80]	; 0x50
 8005c22:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	db10      	blt.n	8005c4c <get_eit_entry+0x70>
 8005c2a:	f7ff ff9b 	bl	8005b64 <selfrel_offset31>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2000      	movs	r0, #0
 8005c32:	6123      	str	r3, [r4, #16]
 8005c34:	b003      	add	sp, #12
 8005c36:	bd30      	pop	{r4, r5, pc}
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2005      	movs	r0, #5
 8005c3c:	6123      	str	r3, [r4, #16]
 8005c3e:	e7f9      	b.n	8005c34 <get_eit_entry+0x58>
 8005c40:	6120      	str	r0, [r4, #16]
 8005c42:	2009      	movs	r0, #9
 8005c44:	e7f6      	b.n	8005c34 <get_eit_entry+0x58>
 8005c46:	6120      	str	r0, [r4, #16]
 8005c48:	2009      	movs	r0, #9
 8005c4a:	e7f3      	b.n	8005c34 <get_eit_entry+0x58>
 8005c4c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005c50:	b158      	cbz	r0, 8005c6a <get_eit_entry+0x8e>
 8005c52:	2801      	cmp	r0, #1
 8005c54:	d00c      	beq.n	8005c70 <get_eit_entry+0x94>
 8005c56:	2802      	cmp	r0, #2
 8005c58:	d00e      	beq.n	8005c78 <get_eit_entry+0x9c>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2009      	movs	r0, #9
 8005c5e:	6123      	str	r3, [r4, #16]
 8005c60:	e7e8      	b.n	8005c34 <get_eit_entry+0x58>
 8005c62:	2301      	movs	r3, #1
 8005c64:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005c66:	6523      	str	r3, [r4, #80]	; 0x50
 8005c68:	e7dc      	b.n	8005c24 <get_eit_entry+0x48>
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <get_eit_entry+0xb8>)
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	e7e1      	b.n	8005c34 <get_eit_entry+0x58>
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <get_eit_entry+0xbc>)
 8005c72:	2000      	movs	r0, #0
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	e7dd      	b.n	8005c34 <get_eit_entry+0x58>
 8005c78:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <get_eit_entry+0xc0>)
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	6123      	str	r3, [r4, #16]
 8005c7e:	e7d9      	b.n	8005c34 <get_eit_entry+0x58>
 8005c80:	4a07      	ldr	r2, [pc, #28]	; (8005ca0 <get_eit_entry+0xc4>)
 8005c82:	4908      	ldr	r1, [pc, #32]	; (8005ca4 <get_eit_entry+0xc8>)
 8005c84:	4613      	mov	r3, r2
 8005c86:	1a8a      	subs	r2, r1, r2
 8005c88:	10d2      	asrs	r2, r2, #3
 8005c8a:	9201      	str	r2, [sp, #4]
 8005c8c:	e7b4      	b.n	8005bf8 <get_eit_entry+0x1c>
 8005c8e:	bf00      	nop
 8005c90:	00000000 	.word	0x00000000
 8005c94:	0800617d 	.word	0x0800617d
 8005c98:	08006179 	.word	0x08006179
 8005c9c:	08006175 	.word	0x08006175
 8005ca0:	08028e24 	.word	0x08028e24
 8005ca4:	08029044 	.word	0x08029044

08005ca8 <restore_non_core_regs>:
 8005ca8:	6803      	ldr	r3, [r0, #0]
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
 8005cae:	07d8      	lsls	r0, r3, #31
 8005cb0:	d406      	bmi.n	8005cc0 <restore_non_core_regs+0x18>
 8005cb2:	0799      	lsls	r1, r3, #30
 8005cb4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8005cb8:	d509      	bpl.n	8005cce <restore_non_core_regs+0x26>
 8005cba:	f000 fc69 	bl	8006590 <__gnu_Unwind_Restore_VFP_D>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	075a      	lsls	r2, r3, #29
 8005cc2:	d509      	bpl.n	8005cd8 <restore_non_core_regs+0x30>
 8005cc4:	0718      	lsls	r0, r3, #28
 8005cc6:	d50e      	bpl.n	8005ce6 <restore_non_core_regs+0x3e>
 8005cc8:	06d9      	lsls	r1, r3, #27
 8005cca:	d513      	bpl.n	8005cf4 <restore_non_core_regs+0x4c>
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	f000 fc57 	bl	8006580 <__gnu_Unwind_Restore_VFP>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	075a      	lsls	r2, r3, #29
 8005cd6:	d4f5      	bmi.n	8005cc4 <restore_non_core_regs+0x1c>
 8005cd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005cdc:	f000 fc60 	bl	80065a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	0718      	lsls	r0, r3, #28
 8005ce4:	d4f0      	bmi.n	8005cc8 <restore_non_core_regs+0x20>
 8005ce6:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8005cea:	f000 fc61 	bl	80065b0 <__gnu_Unwind_Restore_WMMXD>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	06d9      	lsls	r1, r3, #27
 8005cf2:	d4eb      	bmi.n	8005ccc <restore_non_core_regs+0x24>
 8005cf4:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8005cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cfc:	f000 bc9c 	b.w	8006638 <__gnu_Unwind_Restore_WMMXC>

08005d00 <unwind_phase2_forced>:
 8005d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	f101 0e04 	add.w	lr, r1, #4
 8005d08:	4605      	mov	r5, r0
 8005d0a:	4616      	mov	r6, r2
 8005d0c:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8005d10:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8005d14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005d18:	ac02      	add	r4, sp, #8
 8005d1a:	1d27      	adds	r7, r4, #4
 8005d1c:	f04f 0c00 	mov.w	ip, #0
 8005d20:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8005d24:	4566      	cmp	r6, ip
 8005d26:	bf14      	ite	ne
 8005d28:	260a      	movne	r6, #10
 8005d2a:	2609      	moveq	r6, #9
 8005d2c:	46e0      	mov	r8, ip
 8005d2e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005d30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005d34:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005d36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005d3a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005d3c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8005d40:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8005d44:	4628      	mov	r0, r5
 8005d46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d48:	f8c4 c000 	str.w	ip, [r4]
 8005d4c:	f7ff ff46 	bl	8005bdc <get_eit_entry>
 8005d50:	4607      	mov	r7, r0
 8005d52:	b307      	cbz	r7, 8005d96 <unwind_phase2_forced+0x96>
 8005d54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d56:	f046 0610 	orr.w	r6, r6, #16
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	462a      	mov	r2, r5
 8005d60:	6463      	str	r3, [r4, #68]	; 0x44
 8005d62:	462b      	mov	r3, r5
 8005d64:	9400      	str	r4, [sp, #0]
 8005d66:	f8cd a004 	str.w	sl, [sp, #4]
 8005d6a:	47c8      	blx	r9
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d12c      	bne.n	8005dca <unwind_phase2_forced+0xca>
 8005d70:	2f00      	cmp	r7, #0
 8005d72:	d12b      	bne.n	8005dcc <unwind_phase2_forced+0xcc>
 8005d74:	4620      	mov	r0, r4
 8005d76:	a992      	add	r1, sp, #584	; 0x248
 8005d78:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005d7c:	f001 fcd0 	bl	8007720 <memcpy>
 8005d80:	f1b8 0f08 	cmp.w	r8, #8
 8005d84:	d128      	bne.n	8005dd8 <unwind_phase2_forced+0xd8>
 8005d86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f7ff ff27 	bl	8005bdc <get_eit_entry>
 8005d8e:	2609      	movs	r6, #9
 8005d90:	4607      	mov	r7, r0
 8005d92:	2f00      	cmp	r7, #0
 8005d94:	d1de      	bne.n	8005d54 <unwind_phase2_forced+0x54>
 8005d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d98:	4621      	mov	r1, r4
 8005d9a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005d9e:	a892      	add	r0, sp, #584	; 0x248
 8005da0:	616b      	str	r3, [r5, #20]
 8005da2:	f001 fcbd 	bl	8007720 <memcpy>
 8005da6:	692b      	ldr	r3, [r5, #16]
 8005da8:	4629      	mov	r1, r5
 8005daa:	aa92      	add	r2, sp, #584	; 0x248
 8005dac:	4630      	mov	r0, r6
 8005dae:	4798      	blx	r3
 8005db0:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8005db2:	4631      	mov	r1, r6
 8005db4:	462a      	mov	r2, r5
 8005db6:	6463      	str	r3, [r4, #68]	; 0x44
 8005db8:	462b      	mov	r3, r5
 8005dba:	9400      	str	r4, [sp, #0]
 8005dbc:	f8cd a004 	str.w	sl, [sp, #4]
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	2001      	movs	r0, #1
 8005dc4:	47c8      	blx	r9
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d0d2      	beq.n	8005d70 <unwind_phase2_forced+0x70>
 8005dca:	2709      	movs	r7, #9
 8005dcc:	4638      	mov	r0, r7
 8005dce:	b022      	add	sp, #136	; 0x88
 8005dd0:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8005dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd8:	f1b8 0f07 	cmp.w	r8, #7
 8005ddc:	d1f5      	bne.n	8005dca <unwind_phase2_forced+0xca>
 8005dde:	1d20      	adds	r0, r4, #4
 8005de0:	f000 fbc2 	bl	8006568 <__restore_core_regs>

08005de4 <unwind_phase2>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	4604      	mov	r4, r0
 8005de8:	460d      	mov	r5, r1
 8005dea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005dec:	4620      	mov	r0, r4
 8005dee:	f7ff fef5 	bl	8005bdc <get_eit_entry>
 8005df2:	b950      	cbnz	r0, 8005e0a <unwind_phase2+0x26>
 8005df4:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8005df6:	2001      	movs	r0, #1
 8005df8:	6923      	ldr	r3, [r4, #16]
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	6166      	str	r6, [r4, #20]
 8005e00:	4798      	blx	r3
 8005e02:	2808      	cmp	r0, #8
 8005e04:	d0f1      	beq.n	8005dea <unwind_phase2+0x6>
 8005e06:	2807      	cmp	r0, #7
 8005e08:	d001      	beq.n	8005e0e <unwind_phase2+0x2a>
 8005e0a:	f000 fe6d 	bl	8006ae8 <abort>
 8005e0e:	1d28      	adds	r0, r5, #4
 8005e10:	f000 fbaa 	bl	8006568 <__restore_core_regs>

08005e14 <_Unwind_VRS_Get>:
 8005e14:	b959      	cbnz	r1, 8005e2e <_Unwind_VRS_Get+0x1a>
 8005e16:	2a0f      	cmp	r2, #15
 8005e18:	bf94      	ite	ls
 8005e1a:	2100      	movls	r1, #0
 8005e1c:	2101      	movhi	r1, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bf0c      	ite	eq
 8005e22:	460b      	moveq	r3, r1
 8005e24:	f041 0301 	orrne.w	r3, r1, #1
 8005e28:	b133      	cbz	r3, 8005e38 <_Unwind_VRS_Get+0x24>
 8005e2a:	2002      	movs	r0, #2
 8005e2c:	4770      	bx	lr
 8005e2e:	2904      	cmp	r1, #4
 8005e30:	bf8c      	ite	hi
 8005e32:	2002      	movhi	r0, #2
 8005e34:	2001      	movls	r0, #1
 8005e36:	4770      	bx	lr
 8005e38:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	9b00      	ldr	r3, [sp, #0]
 8005e40:	6852      	ldr	r2, [r2, #4]
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop

08005e48 <_Unwind_GetGR>:
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	460a      	mov	r2, r1
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	2100      	movs	r1, #0
 8005e50:	460b      	mov	r3, r1
 8005e52:	ac03      	add	r4, sp, #12
 8005e54:	9400      	str	r4, [sp, #0]
 8005e56:	f7ff ffdd 	bl	8005e14 <_Unwind_VRS_Get>
 8005e5a:	9803      	ldr	r0, [sp, #12]
 8005e5c:	b004      	add	sp, #16
 8005e5e:	bd10      	pop	{r4, pc}

08005e60 <_Unwind_VRS_Set>:
 8005e60:	b959      	cbnz	r1, 8005e7a <_Unwind_VRS_Set+0x1a>
 8005e62:	2a0f      	cmp	r2, #15
 8005e64:	bf94      	ite	ls
 8005e66:	2100      	movls	r1, #0
 8005e68:	2101      	movhi	r1, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bf0c      	ite	eq
 8005e6e:	460b      	moveq	r3, r1
 8005e70:	f041 0301 	orrne.w	r3, r1, #1
 8005e74:	b133      	cbz	r3, 8005e84 <_Unwind_VRS_Set+0x24>
 8005e76:	2002      	movs	r0, #2
 8005e78:	4770      	bx	lr
 8005e7a:	2904      	cmp	r1, #4
 8005e7c:	bf8c      	ite	hi
 8005e7e:	2002      	movhi	r0, #2
 8005e80:	2001      	movls	r0, #1
 8005e82:	4770      	bx	lr
 8005e84:	9900      	ldr	r1, [sp, #0]
 8005e86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	6809      	ldr	r1, [r1, #0]
 8005e8e:	6051      	str	r1, [r2, #4]
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <_Unwind_SetGR>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	ab04      	add	r3, sp, #16
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	f7ff ffda 	bl	8005e60 <_Unwind_VRS_Set>
 8005eac:	b004      	add	sp, #16
 8005eae:	bd10      	pop	{r4, pc}

08005eb0 <__gnu_unwind_pr_common>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	461e      	mov	r6, r3
 8005eb6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8005eb8:	4617      	mov	r7, r2
 8005eba:	b089      	sub	sp, #36	; 0x24
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	f000 0803 	and.w	r8, r0, #3
 8005ec2:	f000 0108 	and.w	r1, r0, #8
 8005ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eca:	9102      	str	r1, [sp, #8]
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	f040 80df 	bne.w	8006092 <__gnu_unwind_pr_common+0x1e2>
 8005ed4:	0212      	lsls	r2, r2, #8
 8005ed6:	f88d 6019 	strb.w	r6, [sp, #25]
 8005eda:	9204      	str	r2, [sp, #16]
 8005edc:	2203      	movs	r2, #3
 8005ede:	f88d 2018 	strb.w	r2, [sp, #24]
 8005ee2:	f1b8 0f02 	cmp.w	r8, #2
 8005ee6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005ee8:	bf08      	it	eq
 8005eea:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 8005eec:	f012 0201 	ands.w	r2, r2, #1
 8005ef0:	bf02      	ittt	eq
 8005ef2:	f104 0158 	addeq.w	r1, r4, #88	; 0x58
 8005ef6:	9200      	streq	r2, [sp, #0]
 8005ef8:	9101      	streq	r1, [sp, #4]
 8005efa:	f040 80d6 	bne.w	80060aa <__gnu_unwind_pr_common+0x1fa>
 8005efe:	f8d3 9000 	ldr.w	r9, [r3]
 8005f02:	f1b9 0f00 	cmp.w	r9, #0
 8005f06:	d031      	beq.n	8005f6c <__gnu_unwind_pr_common+0xbc>
 8005f08:	2e02      	cmp	r6, #2
 8005f0a:	f000 80bd 	beq.w	8006088 <__gnu_unwind_pr_common+0x1d8>
 8005f0e:	f8b3 9000 	ldrh.w	r9, [r3]
 8005f12:	1d1d      	adds	r5, r3, #4
 8005f14:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8005f18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005f1a:	210f      	movs	r1, #15
 8005f1c:	f02b 0a01 	bic.w	sl, fp, #1
 8005f20:	4638      	mov	r0, r7
 8005f22:	449a      	add	sl, r3
 8005f24:	f7ff ff90 	bl	8005e48 <_Unwind_GetGR>
 8005f28:	4582      	cmp	sl, r0
 8005f2a:	d839      	bhi.n	8005fa0 <__gnu_unwind_pr_common+0xf0>
 8005f2c:	f029 0301 	bic.w	r3, r9, #1
 8005f30:	f00b 0b01 	and.w	fp, fp, #1
 8005f34:	449a      	add	sl, r3
 8005f36:	f009 0901 	and.w	r9, r9, #1
 8005f3a:	4550      	cmp	r0, sl
 8005f3c:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 8005f40:	bf2c      	ite	cs
 8005f42:	2000      	movcs	r0, #0
 8005f44:	2001      	movcc	r0, #1
 8005f46:	f1b9 0f01 	cmp.w	r9, #1
 8005f4a:	d033      	beq.n	8005fb4 <__gnu_unwind_pr_common+0x104>
 8005f4c:	d255      	bcs.n	8005ffa <__gnu_unwind_pr_common+0x14a>
 8005f4e:	f1b8 0f00 	cmp.w	r8, #0
 8005f52:	bf0c      	ite	eq
 8005f54:	2000      	moveq	r0, #0
 8005f56:	f000 0001 	andne.w	r0, r0, #1
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	f040 80f0 	bne.w	8006140 <__gnu_unwind_pr_common+0x290>
 8005f60:	1d2b      	adds	r3, r5, #4
 8005f62:	f8d3 9000 	ldr.w	r9, [r3]
 8005f66:	f1b9 0f00 	cmp.w	r9, #0
 8005f6a:	d1cd      	bne.n	8005f08 <__gnu_unwind_pr_common+0x58>
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	a904      	add	r1, sp, #16
 8005f70:	f000 fbfa 	bl	8006768 <__gnu_unwind_execute>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d143      	bne.n	8006000 <__gnu_unwind_pr_common+0x150>
 8005f78:	9a00      	ldr	r2, [sp, #0]
 8005f7a:	2008      	movs	r0, #8
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	d040      	beq.n	8006002 <__gnu_unwind_pr_common+0x152>
 8005f80:	210f      	movs	r1, #15
 8005f82:	4638      	mov	r0, r7
 8005f84:	f7ff ff60 	bl	8005e48 <_Unwind_GetGR>
 8005f88:	210e      	movs	r1, #14
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f7ff ff81 	bl	8005e94 <_Unwind_SetGR>
 8005f92:	4638      	mov	r0, r7
 8005f94:	210f      	movs	r1, #15
 8005f96:	4a76      	ldr	r2, [pc, #472]	; (8006170 <__gnu_unwind_pr_common+0x2c0>)
 8005f98:	f7ff ff7c 	bl	8005e94 <_Unwind_SetGR>
 8005f9c:	2007      	movs	r0, #7
 8005f9e:	e030      	b.n	8006002 <__gnu_unwind_pr_common+0x152>
 8005fa0:	f00b 0b01 	and.w	fp, fp, #1
 8005fa4:	f009 0901 	and.w	r9, r9, #1
 8005fa8:	2000      	movs	r0, #0
 8005faa:	ea49 094b 	orr.w	r9, r9, fp, lsl #1
 8005fae:	f1b9 0f01 	cmp.w	r9, #1
 8005fb2:	d1cb      	bne.n	8005f4c <__gnu_unwind_pr_common+0x9c>
 8005fb4:	f1b8 0f00 	cmp.w	r8, #0
 8005fb8:	f040 8094 	bne.w	80060e4 <__gnu_unwind_pr_common+0x234>
 8005fbc:	b1d0      	cbz	r0, 8005ff4 <__gnu_unwind_pr_common+0x144>
 8005fbe:	686b      	ldr	r3, [r5, #4]
 8005fc0:	f8d5 9000 	ldr.w	r9, [r5]
 8005fc4:	1c9a      	adds	r2, r3, #2
 8005fc6:	d01b      	beq.n	8006000 <__gnu_unwind_pr_common+0x150>
 8005fc8:	9901      	ldr	r1, [sp, #4]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	460a      	mov	r2, r1
 8005fce:	9107      	str	r1, [sp, #28]
 8005fd0:	f000 80a4 	beq.w	800611c <__gnu_unwind_pr_common+0x26c>
 8005fd4:	1d28      	adds	r0, r5, #4
 8005fd6:	f7ff fdbf 	bl	8005b58 <_Unwind_decode_target2>
 8005fda:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8005fde:	ab07      	add	r3, sp, #28
 8005fe0:	4601      	mov	r1, r0
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f01e fe00 	bl	8024be8 <__cxa_type_match>
 8005fe8:	9a07      	ldr	r2, [sp, #28]
 8005fea:	2800      	cmp	r0, #0
 8005fec:	f040 8096 	bne.w	800611c <__gnu_unwind_pr_common+0x26c>
 8005ff0:	f8cd 801c 	str.w	r8, [sp, #28]
 8005ff4:	f105 0308 	add.w	r3, r5, #8
 8005ff8:	e781      	b.n	8005efe <__gnu_unwind_pr_common+0x4e>
 8005ffa:	f1b9 0f02 	cmp.w	r9, #2
 8005ffe:	d003      	beq.n	8006008 <__gnu_unwind_pr_common+0x158>
 8006000:	2009      	movs	r0, #9
 8006002:	b009      	add	sp, #36	; 0x24
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	d14d      	bne.n	80060b0 <__gnu_unwind_pr_common+0x200>
 8006014:	2800      	cmp	r0, #0
 8006016:	d030      	beq.n	800607a <__gnu_unwind_pr_common+0x1ca>
 8006018:	9902      	ldr	r1, [sp, #8]
 800601a:	f1d1 0201 	rsbs	r2, r1, #1
 800601e:	bf38      	it	cc
 8006020:	2200      	movcc	r2, #0
 8006022:	f1ba 0f00 	cmp.w	sl, #0
 8006026:	bf08      	it	eq
 8006028:	f042 0201 	orreq.w	r2, r2, #1
 800602c:	b32a      	cbz	r2, 800607a <__gnu_unwind_pr_common+0x1ca>
 800602e:	f1ba 0f00 	cmp.w	sl, #0
 8006032:	d07a      	beq.n	800612a <__gnu_unwind_pr_common+0x27a>
 8006034:	f105 0904 	add.w	r9, r5, #4
 8006038:	46c3      	mov	fp, r8
 800603a:	f8cd 800c 	str.w	r8, [sp, #12]
 800603e:	46b0      	mov	r8, r6
 8006040:	462e      	mov	r6, r5
 8006042:	9d01      	ldr	r5, [sp, #4]
 8006044:	e004      	b.n	8006050 <__gnu_unwind_pr_common+0x1a0>
 8006046:	4553      	cmp	r3, sl
 8006048:	f109 0904 	add.w	r9, r9, #4
 800604c:	469b      	mov	fp, r3
 800604e:	d06b      	beq.n	8006128 <__gnu_unwind_pr_common+0x278>
 8006050:	4648      	mov	r0, r9
 8006052:	9507      	str	r5, [sp, #28]
 8006054:	f7ff fd80 	bl	8005b58 <_Unwind_decode_target2>
 8006058:	ab07      	add	r3, sp, #28
 800605a:	2200      	movs	r2, #0
 800605c:	4601      	mov	r1, r0
 800605e:	4620      	mov	r0, r4
 8006060:	f01e fdc2 	bl	8024be8 <__cxa_type_match>
 8006064:	f10b 0301 	add.w	r3, fp, #1
 8006068:	2800      	cmp	r0, #0
 800606a:	d0ec      	beq.n	8006046 <__gnu_unwind_pr_common+0x196>
 800606c:	45da      	cmp	sl, fp
 800606e:	4635      	mov	r5, r6
 8006070:	4646      	mov	r6, r8
 8006072:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006076:	d058      	beq.n	800612a <__gnu_unwind_pr_common+0x27a>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	db52      	blt.n	8006124 <__gnu_unwind_pr_common+0x274>
 800607e:	f10a 0a01 	add.w	sl, sl, #1
 8006082:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 8006086:	e73a      	b.n	8005efe <__gnu_unwind_pr_common+0x4e>
 8006088:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800608c:	f103 0508 	add.w	r5, r3, #8
 8006090:	e742      	b.n	8005f18 <__gnu_unwind_pr_common+0x68>
 8006092:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8006096:	0412      	lsls	r2, r2, #16
 8006098:	f88d 1019 	strb.w	r1, [sp, #25]
 800609c:	9204      	str	r2, [sp, #16]
 800609e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80060a2:	2202      	movs	r2, #2
 80060a4:	f88d 2018 	strb.w	r2, [sp, #24]
 80060a8:	e71b      	b.n	8005ee2 <__gnu_unwind_pr_common+0x32>
 80060aa:	2200      	movs	r2, #0
 80060ac:	9200      	str	r2, [sp, #0]
 80060ae:	e75d      	b.n	8005f6c <__gnu_unwind_pr_common+0xbc>
 80060b0:	210d      	movs	r1, #13
 80060b2:	4638      	mov	r0, r7
 80060b4:	f8d4 9020 	ldr.w	r9, [r4, #32]
 80060b8:	f7ff fec6 	bl	8005e48 <_Unwind_GetGR>
 80060bc:	4581      	cmp	r9, r0
 80060be:	d1db      	bne.n	8006078 <__gnu_unwind_pr_common+0x1c8>
 80060c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80060c2:	429d      	cmp	r5, r3
 80060c4:	d1d8      	bne.n	8006078 <__gnu_unwind_pr_common+0x1c8>
 80060c6:	2200      	movs	r2, #0
 80060c8:	1d2b      	adds	r3, r5, #4
 80060ca:	62e2      	str	r2, [r4, #44]	; 0x2c
 80060cc:	2204      	movs	r2, #4
 80060ce:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
 80060d2:	6322      	str	r2, [r4, #48]	; 0x30
 80060d4:	6363      	str	r3, [r4, #52]	; 0x34
 80060d6:	682a      	ldr	r2, [r5, #0]
 80060d8:	2a00      	cmp	r2, #0
 80060da:	da44      	bge.n	8006166 <__gnu_unwind_pr_common+0x2b6>
 80060dc:	461d      	mov	r5, r3
 80060de:	2301      	movs	r3, #1
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	e7cc      	b.n	800607e <__gnu_unwind_pr_common+0x1ce>
 80060e4:	210d      	movs	r1, #13
 80060e6:	4638      	mov	r0, r7
 80060e8:	f8d4 9020 	ldr.w	r9, [r4, #32]
 80060ec:	f7ff feac 	bl	8005e48 <_Unwind_GetGR>
 80060f0:	4581      	cmp	r9, r0
 80060f2:	f47f af7f 	bne.w	8005ff4 <__gnu_unwind_pr_common+0x144>
 80060f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80060f8:	429d      	cmp	r5, r3
 80060fa:	f47f af7b 	bne.w	8005ff4 <__gnu_unwind_pr_common+0x144>
 80060fe:	4628      	mov	r0, r5
 8006100:	f7ff fd30 	bl	8005b64 <selfrel_offset31>
 8006104:	210f      	movs	r1, #15
 8006106:	4602      	mov	r2, r0
 8006108:	4638      	mov	r0, r7
 800610a:	f7ff fec3 	bl	8005e94 <_Unwind_SetGR>
 800610e:	4638      	mov	r0, r7
 8006110:	2100      	movs	r1, #0
 8006112:	4622      	mov	r2, r4
 8006114:	f7ff febe 	bl	8005e94 <_Unwind_SetGR>
 8006118:	2007      	movs	r0, #7
 800611a:	e772      	b.n	8006002 <__gnu_unwind_pr_common+0x152>
 800611c:	b92a      	cbnz	r2, 800612a <__gnu_unwind_pr_common+0x27a>
 800611e:	f105 0308 	add.w	r3, r5, #8
 8006122:	e6ec      	b.n	8005efe <__gnu_unwind_pr_common+0x4e>
 8006124:	3504      	adds	r5, #4
 8006126:	e7aa      	b.n	800607e <__gnu_unwind_pr_common+0x1ce>
 8006128:	4635      	mov	r5, r6
 800612a:	4638      	mov	r0, r7
 800612c:	210d      	movs	r1, #13
 800612e:	f7ff fe8b 	bl	8005e48 <_Unwind_GetGR>
 8006132:	62a5      	str	r5, [r4, #40]	; 0x28
 8006134:	4603      	mov	r3, r0
 8006136:	6223      	str	r3, [r4, #32]
 8006138:	9b07      	ldr	r3, [sp, #28]
 800613a:	2006      	movs	r0, #6
 800613c:	6263      	str	r3, [r4, #36]	; 0x24
 800613e:	e760      	b.n	8006002 <__gnu_unwind_pr_common+0x152>
 8006140:	4628      	mov	r0, r5
 8006142:	3504      	adds	r5, #4
 8006144:	f7ff fd0e 	bl	8005b64 <selfrel_offset31>
 8006148:	63a5      	str	r5, [r4, #56]	; 0x38
 800614a:	4606      	mov	r6, r0
 800614c:	4620      	mov	r0, r4
 800614e:	f01e fdbd 	bl	8024ccc <__cxa_begin_cleanup>
 8006152:	2800      	cmp	r0, #0
 8006154:	f43f af54 	beq.w	8006000 <__gnu_unwind_pr_common+0x150>
 8006158:	4638      	mov	r0, r7
 800615a:	210f      	movs	r1, #15
 800615c:	4632      	mov	r2, r6
 800615e:	f7ff fe99 	bl	8005e94 <_Unwind_SetGR>
 8006162:	2007      	movs	r0, #7
 8006164:	e74d      	b.n	8006002 <__gnu_unwind_pr_common+0x152>
 8006166:	f10a 0001 	add.w	r0, sl, #1
 800616a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800616e:	e7c7      	b.n	8006100 <__gnu_unwind_pr_common+0x250>
 8006170:	08024e39 	.word	0x08024e39

08006174 <__aeabi_unwind_cpp_pr2>:
 8006174:	2302      	movs	r3, #2
 8006176:	e69b      	b.n	8005eb0 <__gnu_unwind_pr_common>

08006178 <__aeabi_unwind_cpp_pr1>:
 8006178:	2301      	movs	r3, #1
 800617a:	e699      	b.n	8005eb0 <__gnu_unwind_pr_common>

0800617c <__aeabi_unwind_cpp_pr0>:
 800617c:	2300      	movs	r3, #0
 800617e:	e697      	b.n	8005eb0 <__gnu_unwind_pr_common>

08006180 <_Unwind_VRS_Pop>:
 8006180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006184:	4604      	mov	r4, r0
 8006186:	b0e8      	sub	sp, #416	; 0x1a0
 8006188:	2904      	cmp	r1, #4
 800618a:	d807      	bhi.n	800619c <_Unwind_VRS_Pop+0x1c>
 800618c:	e8df f001 	tbb	[pc, r1]
 8006190:	034b4d33 	.word	0x034b4d33
 8006194:	0a          	.byte	0x0a
 8006195:	00          	.byte	0x00
 8006196:	2b03      	cmp	r3, #3
 8006198:	f000 80d8 	beq.w	800634c <_Unwind_VRS_Pop+0x1cc>
 800619c:	2002      	movs	r0, #2
 800619e:	b068      	add	sp, #416	; 0x1a0
 80061a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a4:	2a10      	cmp	r2, #16
 80061a6:	bf94      	ite	ls
 80061a8:	2100      	movls	r1, #0
 80061aa:	2101      	movhi	r1, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf0c      	ite	eq
 80061b0:	460b      	moveq	r3, r1
 80061b2:	f041 0301 	orrne.w	r3, r1, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f0      	bne.n	800619c <_Unwind_VRS_Pop+0x1c>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	06d9      	lsls	r1, r3, #27
 80061be:	f100 80e7 	bmi.w	8006390 <_Unwind_VRS_Pop+0x210>
 80061c2:	ad64      	add	r5, sp, #400	; 0x190
 80061c4:	9201      	str	r2, [sp, #4]
 80061c6:	4628      	mov	r0, r5
 80061c8:	2601      	movs	r6, #1
 80061ca:	f000 fa3f 	bl	800664c <__gnu_Unwind_Save_WMMXC>
 80061ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80061d0:	9a01      	ldr	r2, [sp, #4]
 80061d2:	2300      	movs	r3, #0
 80061d4:	fa16 f103 	lsls.w	r1, r6, r3
 80061d8:	4211      	tst	r1, r2
 80061da:	bf1c      	itt	ne
 80061dc:	f850 1b04 	ldrne.w	r1, [r0], #4
 80061e0:	f845 1023 	strne.w	r1, [r5, r3, lsl #2]
 80061e4:	3301      	adds	r3, #1
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d1f4      	bne.n	80061d4 <_Unwind_VRS_Pop+0x54>
 80061ea:	63a0      	str	r0, [r4, #56]	; 0x38
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 fa23 	bl	8006638 <__gnu_Unwind_Restore_WMMXC>
 80061f2:	2000      	movs	r0, #0
 80061f4:	e7d3      	b.n	800619e <_Unwind_VRS_Pop+0x1e>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1d0      	bne.n	800619c <_Unwind_VRS_Pop+0x1c>
 80061fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80061fc:	b292      	uxth	r2, r2
 80061fe:	2001      	movs	r0, #1
 8006200:	fa10 f103 	lsls.w	r1, r0, r3
 8006204:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8006208:	3301      	adds	r3, #1
 800620a:	4211      	tst	r1, r2
 800620c:	bf1c      	itt	ne
 800620e:	f856 1b04 	ldrne.w	r1, [r6], #4
 8006212:	6069      	strne	r1, [r5, #4]
 8006214:	2b10      	cmp	r3, #16
 8006216:	d1f3      	bne.n	8006200 <_Unwind_VRS_Pop+0x80>
 8006218:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800621c:	bf08      	it	eq
 800621e:	63a6      	streq	r6, [r4, #56]	; 0x38
 8006220:	d0bd      	beq.n	800619e <_Unwind_VRS_Pop+0x1e>
 8006222:	2000      	movs	r0, #0
 8006224:	e7bb      	b.n	800619e <_Unwind_VRS_Pop+0x1e>
 8006226:	2001      	movs	r0, #1
 8006228:	e7b9      	b.n	800619e <_Unwind_VRS_Pop+0x1e>
 800622a:	1f59      	subs	r1, r3, #5
 800622c:	bf18      	it	ne
 800622e:	2101      	movne	r1, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	bf0c      	ite	eq
 8006234:	2000      	moveq	r0, #0
 8006236:	f001 0001 	andne.w	r0, r1, #1
 800623a:	2800      	cmp	r0, #0
 800623c:	d1ae      	bne.n	800619c <_Unwind_VRS_Pop+0x1c>
 800623e:	0c15      	lsrs	r5, r2, #16
 8006240:	b296      	uxth	r6, r2
 8006242:	1972      	adds	r2, r6, r5
 8006244:	2b01      	cmp	r3, #1
 8006246:	bf14      	ite	ne
 8006248:	2020      	movne	r0, #32
 800624a:	2010      	moveq	r0, #16
 800624c:	4290      	cmp	r0, r2
 800624e:	d3a5      	bcc.n	800619c <_Unwind_VRS_Pop+0x1c>
 8006250:	f1a3 0c01 	sub.w	ip, r3, #1
 8006254:	f1dc 0700 	rsbs	r7, ip, #0
 8006258:	eb47 070c 	adc.w	r7, r7, ip
 800625c:	2d0f      	cmp	r5, #15
 800625e:	bf94      	ite	ls
 8006260:	2000      	movls	r0, #0
 8006262:	2001      	movhi	r0, #1
 8006264:	4238      	tst	r0, r7
 8006266:	d199      	bne.n	800619c <_Unwind_VRS_Pop+0x1c>
 8006268:	46b0      	mov	r8, r6
 800626a:	b928      	cbnz	r0, 8006278 <_Unwind_VRS_Pop+0xf8>
 800626c:	2a10      	cmp	r2, #16
 800626e:	bf98      	it	ls
 8006270:	4680      	movls	r8, r0
 8006272:	d909      	bls.n	8006288 <_Unwind_VRS_Pop+0x108>
 8006274:	f1a2 0810 	sub.w	r8, r2, #16
 8006278:	f1b8 0f00 	cmp.w	r8, #0
 800627c:	bf0c      	ite	eq
 800627e:	2100      	moveq	r1, #0
 8006280:	f001 0101 	andne.w	r1, r1, #1
 8006284:	2900      	cmp	r1, #0
 8006286:	d189      	bne.n	800619c <_Unwind_VRS_Pop+0x1c>
 8006288:	2d0f      	cmp	r5, #15
 800628a:	d80f      	bhi.n	80062ac <_Unwind_VRS_Pop+0x12c>
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	07d1      	lsls	r1, r2, #31
 8006290:	d50c      	bpl.n	80062ac <_Unwind_VRS_Pop+0x12c>
 8006292:	2b05      	cmp	r3, #5
 8006294:	f022 0101 	bic.w	r1, r2, #1
 8006298:	4620      	mov	r0, r4
 800629a:	6021      	str	r1, [r4, #0]
 800629c:	f000 80b0 	beq.w	8006400 <_Unwind_VRS_Pop+0x280>
 80062a0:	f022 0203 	bic.w	r2, r2, #3
 80062a4:	f840 2b48 	str.w	r2, [r0], #72
 80062a8:	f000 f96e 	bl	8006588 <__gnu_Unwind_Save_VFP>
 80062ac:	f1b8 0f00 	cmp.w	r8, #0
 80062b0:	d003      	beq.n	80062ba <_Unwind_VRS_Pop+0x13a>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	075a      	lsls	r2, r3, #29
 80062b6:	f100 8082 	bmi.w	80063be <_Unwind_VRS_Pop+0x23e>
 80062ba:	2f00      	cmp	r7, #0
 80062bc:	f040 8096 	bne.w	80063ec <_Unwind_VRS_Pop+0x26c>
 80062c0:	2d0f      	cmp	r5, #15
 80062c2:	d975      	bls.n	80063b0 <_Unwind_VRS_Pop+0x230>
 80062c4:	f1b8 0f00 	cmp.w	r8, #0
 80062c8:	d16c      	bne.n	80063a4 <_Unwind_VRS_Pop+0x224>
 80062ca:	4633      	mov	r3, r6
 80062cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	4616      	mov	r6, r2
 80062d2:	dd0f      	ble.n	80062f4 <_Unwind_VRS_Pop+0x174>
 80062d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80062d8:	ab02      	add	r3, sp, #8
 80062da:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
 80062de:	f10c 33ff 	add.w	r3, ip, #4294967295
 80062e2:	f852 0b04 	ldr.w	r0, [r2], #4
 80062e6:	3b01      	subs	r3, #1
 80062e8:	f841 0b04 	str.w	r0, [r1], #4
 80062ec:	1c58      	adds	r0, r3, #1
 80062ee:	d1f8      	bne.n	80062e2 <_Unwind_VRS_Pop+0x162>
 80062f0:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80062f4:	f1b8 0f00 	cmp.w	r8, #0
 80062f8:	d016      	beq.n	8006328 <_Unwind_VRS_Pop+0x1a8>
 80062fa:	2d10      	cmp	r5, #16
 80062fc:	bf2c      	ite	cs
 80062fe:	462a      	movcs	r2, r5
 8006300:	2210      	movcc	r2, #16
 8006302:	a868      	add	r0, sp, #416	; 0x1a0
 8006304:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8006308:	4631      	mov	r1, r6
 800630a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800630e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8006312:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8006316:	f851 0b04 	ldr.w	r0, [r1], #4
 800631a:	3b01      	subs	r3, #1
 800631c:	f842 0b04 	str.w	r0, [r2], #4
 8006320:	1c58      	adds	r0, r3, #1
 8006322:	d1f8      	bne.n	8006316 <_Unwind_VRS_Pop+0x196>
 8006324:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8006328:	2f00      	cmp	r7, #0
 800632a:	d158      	bne.n	80063de <_Unwind_VRS_Pop+0x25e>
 800632c:	2d0f      	cmp	r5, #15
 800632e:	63a6      	str	r6, [r4, #56]	; 0x38
 8006330:	d802      	bhi.n	8006338 <_Unwind_VRS_Pop+0x1b8>
 8006332:	a802      	add	r0, sp, #8
 8006334:	f000 f92c 	bl	8006590 <__gnu_Unwind_Restore_VFP_D>
 8006338:	4640      	mov	r0, r8
 800633a:	f1b8 0f00 	cmp.w	r8, #0
 800633e:	f43f af2e 	beq.w	800619e <_Unwind_VRS_Pop+0x1e>
 8006342:	a824      	add	r0, sp, #144	; 0x90
 8006344:	f000 f92c 	bl	80065a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8006348:	2000      	movs	r0, #0
 800634a:	e728      	b.n	800619e <_Unwind_VRS_Pop+0x1e>
 800634c:	0c16      	lsrs	r6, r2, #16
 800634e:	b295      	uxth	r5, r2
 8006350:	19ab      	adds	r3, r5, r6
 8006352:	2b10      	cmp	r3, #16
 8006354:	f63f af22 	bhi.w	800619c <_Unwind_VRS_Pop+0x1c>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	0718      	lsls	r0, r3, #28
 800635c:	d437      	bmi.n	80063ce <_Unwind_VRS_Pop+0x24e>
 800635e:	a844      	add	r0, sp, #272	; 0x110
 8006360:	006f      	lsls	r7, r5, #1
 8006362:	f000 f947 	bl	80065f4 <__gnu_Unwind_Save_WMMXD>
 8006366:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006368:	4610      	mov	r0, r2
 800636a:	b15d      	cbz	r5, 8006384 <_Unwind_VRS_Pop+0x204>
 800636c:	ab44      	add	r3, sp, #272	; 0x110
 800636e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006372:	463b      	mov	r3, r7
 8006374:	f852 1b04 	ldr.w	r1, [r2], #4
 8006378:	3b01      	subs	r3, #1
 800637a:	f846 1b04 	str.w	r1, [r6], #4
 800637e:	d1f9      	bne.n	8006374 <_Unwind_VRS_Pop+0x1f4>
 8006380:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8006384:	63a0      	str	r0, [r4, #56]	; 0x38
 8006386:	a844      	add	r0, sp, #272	; 0x110
 8006388:	f000 f912 	bl	80065b0 <__gnu_Unwind_Restore_WMMXD>
 800638c:	2000      	movs	r0, #0
 800638e:	e706      	b.n	800619e <_Unwind_VRS_Pop+0x1e>
 8006390:	f023 0310 	bic.w	r3, r3, #16
 8006394:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	9201      	str	r2, [sp, #4]
 800639c:	f000 f956 	bl	800664c <__gnu_Unwind_Save_WMMXC>
 80063a0:	9a01      	ldr	r2, [sp, #4]
 80063a2:	e70e      	b.n	80061c2 <_Unwind_VRS_Pop+0x42>
 80063a4:	a824      	add	r0, sp, #144	; 0x90
 80063a6:	f000 f8ff 	bl	80065a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80063aa:	f1c5 0310 	rsb	r3, r5, #16
 80063ae:	e78d      	b.n	80062cc <_Unwind_VRS_Pop+0x14c>
 80063b0:	a802      	add	r0, sp, #8
 80063b2:	f000 f8f1 	bl	8006598 <__gnu_Unwind_Save_VFP_D>
 80063b6:	f1b8 0f00 	cmp.w	r8, #0
 80063ba:	d086      	beq.n	80062ca <_Unwind_VRS_Pop+0x14a>
 80063bc:	e7f2      	b.n	80063a4 <_Unwind_VRS_Pop+0x224>
 80063be:	4620      	mov	r0, r4
 80063c0:	f023 0304 	bic.w	r3, r3, #4
 80063c4:	f840 3bd0 	str.w	r3, [r0], #208
 80063c8:	f000 f8ee 	bl	80065a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80063cc:	e775      	b.n	80062ba <_Unwind_VRS_Pop+0x13a>
 80063ce:	f023 0308 	bic.w	r3, r3, #8
 80063d2:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	f000 f90c 	bl	80065f4 <__gnu_Unwind_Save_WMMXD>
 80063dc:	e7bf      	b.n	800635e <_Unwind_VRS_Pop+0x1de>
 80063de:	a802      	add	r0, sp, #8
 80063e0:	3604      	adds	r6, #4
 80063e2:	63a6      	str	r6, [r4, #56]	; 0x38
 80063e4:	f000 f8cc 	bl	8006580 <__gnu_Unwind_Restore_VFP>
 80063e8:	2000      	movs	r0, #0
 80063ea:	e6d8      	b.n	800619e <_Unwind_VRS_Pop+0x1e>
 80063ec:	a802      	add	r0, sp, #8
 80063ee:	f000 f8cb 	bl	8006588 <__gnu_Unwind_Save_VFP>
 80063f2:	f1b8 0f00 	cmp.w	r8, #0
 80063f6:	f43f af68 	beq.w	80062ca <_Unwind_VRS_Pop+0x14a>
 80063fa:	f1c5 0310 	rsb	r3, r5, #16
 80063fe:	e765      	b.n	80062cc <_Unwind_VRS_Pop+0x14c>
 8006400:	f041 0102 	orr.w	r1, r1, #2
 8006404:	f840 1b48 	str.w	r1, [r0], #72
 8006408:	f000 f8c6 	bl	8006598 <__gnu_Unwind_Save_VFP_D>
 800640c:	e74e      	b.n	80062ac <_Unwind_VRS_Pop+0x12c>
 800640e:	bf00      	nop

08006410 <_Unwind_GetCFA>:
 8006410:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8006412:	4770      	bx	lr

08006414 <__gnu_Unwind_RaiseException>:
 8006414:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006418:	1d0f      	adds	r7, r1, #4
 800641a:	640b      	str	r3, [r1, #64]	; 0x40
 800641c:	460d      	mov	r5, r1
 800641e:	4604      	mov	r4, r0
 8006420:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8006424:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006426:	ae01      	add	r6, sp, #4
 8006428:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800642a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800642c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800642e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006430:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006432:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8006436:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006442:	4620      	mov	r0, r4
 8006444:	f7ff fbca 	bl	8005bdc <get_eit_entry>
 8006448:	b958      	cbnz	r0, 8006462 <__gnu_Unwind_RaiseException+0x4e>
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	4621      	mov	r1, r4
 800644e:	466a      	mov	r2, sp
 8006450:	4798      	blx	r3
 8006452:	2808      	cmp	r0, #8
 8006454:	4606      	mov	r6, r0
 8006456:	d0f3      	beq.n	8006440 <__gnu_Unwind_RaiseException+0x2c>
 8006458:	4668      	mov	r0, sp
 800645a:	f7ff fc25 	bl	8005ca8 <restore_non_core_regs>
 800645e:	2e06      	cmp	r6, #6
 8006460:	d003      	beq.n	800646a <__gnu_Unwind_RaiseException+0x56>
 8006462:	2009      	movs	r0, #9
 8006464:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8006468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800646a:	4620      	mov	r0, r4
 800646c:	4629      	mov	r1, r5
 800646e:	f7ff fcb9 	bl	8005de4 <unwind_phase2>
 8006472:	bf00      	nop

08006474 <__gnu_Unwind_ForcedUnwind>:
 8006474:	b410      	push	{r4}
 8006476:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8006478:	60c1      	str	r1, [r0, #12]
 800647a:	4619      	mov	r1, r3
 800647c:	6182      	str	r2, [r0, #24]
 800647e:	2200      	movs	r2, #0
 8006480:	641c      	str	r4, [r3, #64]	; 0x40
 8006482:	bc10      	pop	{r4}
 8006484:	e43c      	b.n	8005d00 <unwind_phase2_forced>
 8006486:	bf00      	nop

08006488 <__gnu_Unwind_Resume>:
 8006488:	6942      	ldr	r2, [r0, #20]
 800648a:	b538      	push	{r3, r4, r5, lr}
 800648c:	4604      	mov	r4, r0
 800648e:	68c3      	ldr	r3, [r0, #12]
 8006490:	460d      	mov	r5, r1
 8006492:	640a      	str	r2, [r1, #64]	; 0x40
 8006494:	b123      	cbz	r3, 80064a0 <__gnu_Unwind_Resume+0x18>
 8006496:	2201      	movs	r2, #1
 8006498:	f7ff fc32 	bl	8005d00 <unwind_phase2_forced>
 800649c:	f000 fb24 	bl	8006ae8 <abort>
 80064a0:	6903      	ldr	r3, [r0, #16]
 80064a2:	4621      	mov	r1, r4
 80064a4:	2002      	movs	r0, #2
 80064a6:	462a      	mov	r2, r5
 80064a8:	4798      	blx	r3
 80064aa:	2807      	cmp	r0, #7
 80064ac:	d003      	beq.n	80064b6 <__gnu_Unwind_Resume+0x2e>
 80064ae:	2808      	cmp	r0, #8
 80064b0:	d004      	beq.n	80064bc <__gnu_Unwind_Resume+0x34>
 80064b2:	f000 fb19 	bl	8006ae8 <abort>
 80064b6:	1d28      	adds	r0, r5, #4
 80064b8:	f000 f856 	bl	8006568 <__restore_core_regs>
 80064bc:	4620      	mov	r0, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	f7ff fc90 	bl	8005de4 <unwind_phase2>

080064c4 <__gnu_Unwind_Resume_or_Rethrow>:
 80064c4:	68c3      	ldr	r3, [r0, #12]
 80064c6:	b11b      	cbz	r3, 80064d0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80064c8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80064ca:	2200      	movs	r2, #0
 80064cc:	640b      	str	r3, [r1, #64]	; 0x40
 80064ce:	e417      	b.n	8005d00 <unwind_phase2_forced>
 80064d0:	e7a0      	b.n	8006414 <__gnu_Unwind_RaiseException>
 80064d2:	bf00      	nop

080064d4 <_Unwind_Complete>:
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop

080064d8 <_Unwind_DeleteException>:
 80064d8:	b508      	push	{r3, lr}
 80064da:	4601      	mov	r1, r0
 80064dc:	6883      	ldr	r3, [r0, #8]
 80064de:	b10b      	cbz	r3, 80064e4 <_Unwind_DeleteException+0xc>
 80064e0:	2001      	movs	r0, #1
 80064e2:	4798      	blx	r3
 80064e4:	bd08      	pop	{r3, pc}
 80064e6:	bf00      	nop

080064e8 <__gnu_Unwind_Backtrace>:
 80064e8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80064ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ec:	1d17      	adds	r7, r2, #4
 80064ee:	6413      	str	r3, [r2, #64]	; 0x40
 80064f0:	4605      	mov	r5, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 80064f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80064fa:	ae01      	add	r6, sp, #4
 80064fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80064fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006500:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006502:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006504:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006506:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800650a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006516:	a890      	add	r0, sp, #576	; 0x240
 8006518:	f7ff fb60 	bl	8005bdc <get_eit_entry>
 800651c:	aa90      	add	r2, sp, #576	; 0x240
 800651e:	210c      	movs	r1, #12
 8006520:	4603      	mov	r3, r0
 8006522:	4668      	mov	r0, sp
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11d      	bne.n	8006564 <__gnu_Unwind_Backtrace+0x7c>
 8006528:	f7ff fcb4 	bl	8005e94 <_Unwind_SetGR>
 800652c:	4621      	mov	r1, r4
 800652e:	4668      	mov	r0, sp
 8006530:	47a8      	blx	r5
 8006532:	a990      	add	r1, sp, #576	; 0x240
 8006534:	466a      	mov	r2, sp
 8006536:	4603      	mov	r3, r0
 8006538:	2008      	movs	r0, #8
 800653a:	b99b      	cbnz	r3, 8006564 <__gnu_Unwind_Backtrace+0x7c>
 800653c:	9b94      	ldr	r3, [sp, #592]	; 0x250
 800653e:	4798      	blx	r3
 8006540:	1f43      	subs	r3, r0, #5
 8006542:	4606      	mov	r6, r0
 8006544:	bf18      	it	ne
 8006546:	2301      	movne	r3, #1
 8006548:	2809      	cmp	r0, #9
 800654a:	bf0c      	ite	eq
 800654c:	2300      	moveq	r3, #0
 800654e:	f003 0301 	andne.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1de      	bne.n	8006514 <__gnu_Unwind_Backtrace+0x2c>
 8006556:	4668      	mov	r0, sp
 8006558:	f7ff fba6 	bl	8005ca8 <restore_non_core_regs>
 800655c:	4630      	mov	r0, r6
 800655e:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
 8006562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006564:	2609      	movs	r6, #9
 8006566:	e7f6      	b.n	8006556 <__gnu_Unwind_Backtrace+0x6e>

08006568 <__restore_core_regs>:
 8006568:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800656c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8006570:	469c      	mov	ip, r3
 8006572:	46a6      	mov	lr, r4
 8006574:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8006578:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800657c:	46e5      	mov	sp, ip
 800657e:	bd00      	pop	{pc}

08006580 <__gnu_Unwind_Restore_VFP>:
 8006580:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop

08006588 <__gnu_Unwind_Save_VFP>:
 8006588:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop

08006590 <__gnu_Unwind_Restore_VFP_D>:
 8006590:	ec90 0b20 	vldmia	r0, {d0-d15}
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop

08006598 <__gnu_Unwind_Save_VFP_D>:
 8006598:	ec80 0b20 	vstmia	r0, {d0-d15}
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop

080065a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80065a0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop

080065a8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80065a8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop

080065b0 <__gnu_Unwind_Restore_WMMXD>:
 80065b0:	ecf0 0102 	ldfe	f0, [r0], #8
 80065b4:	ecf0 1102 	ldfe	f1, [r0], #8
 80065b8:	ecf0 2102 	ldfe	f2, [r0], #8
 80065bc:	ecf0 3102 	ldfe	f3, [r0], #8
 80065c0:	ecf0 4102 	ldfe	f4, [r0], #8
 80065c4:	ecf0 5102 	ldfe	f5, [r0], #8
 80065c8:	ecf0 6102 	ldfe	f6, [r0], #8
 80065cc:	ecf0 7102 	ldfe	f7, [r0], #8
 80065d0:	ecf0 8102 	ldfp	f0, [r0], #8
 80065d4:	ecf0 9102 	ldfp	f1, [r0], #8
 80065d8:	ecf0 a102 	ldfp	f2, [r0], #8
 80065dc:	ecf0 b102 	ldfp	f3, [r0], #8
 80065e0:	ecf0 c102 	ldfp	f4, [r0], #8
 80065e4:	ecf0 d102 	ldfp	f5, [r0], #8
 80065e8:	ecf0 e102 	ldfp	f6, [r0], #8
 80065ec:	ecf0 f102 	ldfp	f7, [r0], #8
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop

080065f4 <__gnu_Unwind_Save_WMMXD>:
 80065f4:	ece0 0102 	stfe	f0, [r0], #8
 80065f8:	ece0 1102 	stfe	f1, [r0], #8
 80065fc:	ece0 2102 	stfe	f2, [r0], #8
 8006600:	ece0 3102 	stfe	f3, [r0], #8
 8006604:	ece0 4102 	stfe	f4, [r0], #8
 8006608:	ece0 5102 	stfe	f5, [r0], #8
 800660c:	ece0 6102 	stfe	f6, [r0], #8
 8006610:	ece0 7102 	stfe	f7, [r0], #8
 8006614:	ece0 8102 	stfp	f0, [r0], #8
 8006618:	ece0 9102 	stfp	f1, [r0], #8
 800661c:	ece0 a102 	stfp	f2, [r0], #8
 8006620:	ece0 b102 	stfp	f3, [r0], #8
 8006624:	ece0 c102 	stfp	f4, [r0], #8
 8006628:	ece0 d102 	stfp	f5, [r0], #8
 800662c:	ece0 e102 	stfp	f6, [r0], #8
 8006630:	ece0 f102 	stfp	f7, [r0], #8
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop

08006638 <__gnu_Unwind_Restore_WMMXC>:
 8006638:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800663c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8006640:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8006644:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop

0800664c <__gnu_Unwind_Save_WMMXC>:
 800664c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8006650:	fca0 9101 	stc2	1, cr9, [r0], #4
 8006654:	fca0 a101 	stc2	1, cr10, [r0], #4
 8006658:	fca0 b101 	stc2	1, cr11, [r0], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop

08006660 <_Unwind_RaiseException>:
 8006660:	46ec      	mov	ip, sp
 8006662:	b500      	push	{lr}
 8006664:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006668:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006674:	a901      	add	r1, sp, #4
 8006676:	f7ff fecd 	bl	8006414 <__gnu_Unwind_RaiseException>
 800667a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800667e:	b012      	add	sp, #72	; 0x48
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop

08006684 <_Unwind_Resume>:
 8006684:	46ec      	mov	ip, sp
 8006686:	b500      	push	{lr}
 8006688:	e92d 5000 	stmdb	sp!, {ip, lr}
 800668c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006698:	a901      	add	r1, sp, #4
 800669a:	f7ff fef5 	bl	8006488 <__gnu_Unwind_Resume>
 800669e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80066a2:	b012      	add	sp, #72	; 0x48
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <_Unwind_Resume_or_Rethrow>:
 80066a8:	46ec      	mov	ip, sp
 80066aa:	b500      	push	{lr}
 80066ac:	e92d 5000 	stmdb	sp!, {ip, lr}
 80066b0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80066bc:	a901      	add	r1, sp, #4
 80066be:	f7ff ff01 	bl	80064c4 <__gnu_Unwind_Resume_or_Rethrow>
 80066c2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80066c6:	b012      	add	sp, #72	; 0x48
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop

080066cc <_Unwind_ForcedUnwind>:
 80066cc:	46ec      	mov	ip, sp
 80066ce:	b500      	push	{lr}
 80066d0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80066d4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80066e0:	ab01      	add	r3, sp, #4
 80066e2:	f7ff fec7 	bl	8006474 <__gnu_Unwind_ForcedUnwind>
 80066e6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80066ea:	b012      	add	sp, #72	; 0x48
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop

080066f0 <_Unwind_Backtrace>:
 80066f0:	46ec      	mov	ip, sp
 80066f2:	b500      	push	{lr}
 80066f4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80066f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006704:	aa01      	add	r2, sp, #4
 8006706:	f7ff feef 	bl	80064e8 <__gnu_Unwind_Backtrace>
 800670a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800670e:	b012      	add	sp, #72	; 0x48
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop

08006714 <next_unwind_byte>:
 8006714:	7a02      	ldrb	r2, [r0, #8]
 8006716:	4603      	mov	r3, r0
 8006718:	b91a      	cbnz	r2, 8006722 <next_unwind_byte+0xe>
 800671a:	7a42      	ldrb	r2, [r0, #9]
 800671c:	b942      	cbnz	r2, 8006730 <next_unwind_byte+0x1c>
 800671e:	20b0      	movs	r0, #176	; 0xb0
 8006720:	4770      	bx	lr
 8006722:	6800      	ldr	r0, [r0, #0]
 8006724:	3a01      	subs	r2, #1
 8006726:	721a      	strb	r2, [r3, #8]
 8006728:	0202      	lsls	r2, r0, #8
 800672a:	0e00      	lsrs	r0, r0, #24
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	4770      	bx	lr
 8006730:	6841      	ldr	r1, [r0, #4]
 8006732:	3a01      	subs	r2, #1
 8006734:	7242      	strb	r2, [r0, #9]
 8006736:	2203      	movs	r2, #3
 8006738:	f851 0b04 	ldr.w	r0, [r1], #4
 800673c:	721a      	strb	r2, [r3, #8]
 800673e:	6059      	str	r1, [r3, #4]
 8006740:	0202      	lsls	r2, r0, #8
 8006742:	0e00      	lsrs	r0, r0, #24
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	4770      	bx	lr

08006748 <_Unwind_GetGR.constprop.0>:
 8006748:	b510      	push	{r4, lr}
 800674a:	2100      	movs	r1, #0
 800674c:	b084      	sub	sp, #16
 800674e:	220c      	movs	r2, #12
 8006750:	460b      	mov	r3, r1
 8006752:	eb0d 0402 	add.w	r4, sp, r2
 8006756:	9400      	str	r4, [sp, #0]
 8006758:	f7ff fb5c 	bl	8005e14 <_Unwind_VRS_Get>
 800675c:	9803      	ldr	r0, [sp, #12]
 800675e:	b004      	add	sp, #16
 8006760:	bd10      	pop	{r4, pc}
 8006762:	bf00      	nop

08006764 <unwind_UCB_from_context>:
 8006764:	e7f0      	b.n	8006748 <_Unwind_GetGR.constprop.0>
 8006766:	bf00      	nop

08006768 <__gnu_unwind_execute>:
 8006768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800676c:	4606      	mov	r6, r0
 800676e:	b085      	sub	sp, #20
 8006770:	460d      	mov	r5, r1
 8006772:	f04f 0900 	mov.w	r9, #0
 8006776:	f44f 677f 	mov.w	r7, #4080	; 0xff0
 800677a:	4628      	mov	r0, r5
 800677c:	f7ff ffca 	bl	8006714 <next_unwind_byte>
 8006780:	28b0      	cmp	r0, #176	; 0xb0
 8006782:	4604      	mov	r4, r0
 8006784:	f000 80c9 	beq.w	800691a <__gnu_unwind_execute+0x1b2>
 8006788:	f010 0180 	ands.w	r1, r0, #128	; 0x80
 800678c:	d021      	beq.n	80067d2 <__gnu_unwind_execute+0x6a>
 800678e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	f000 8085 	beq.w	80068a2 <__gnu_unwind_execute+0x13a>
 8006798:	2b90      	cmp	r3, #144	; 0x90
 800679a:	d037      	beq.n	800680c <__gnu_unwind_execute+0xa4>
 800679c:	2ba0      	cmp	r3, #160	; 0xa0
 800679e:	d054      	beq.n	800684a <__gnu_unwind_execute+0xe2>
 80067a0:	2bb0      	cmp	r3, #176	; 0xb0
 80067a2:	d065      	beq.n	8006870 <__gnu_unwind_execute+0x108>
 80067a4:	2bc0      	cmp	r3, #192	; 0xc0
 80067a6:	f000 8094 	beq.w	80068d2 <__gnu_unwind_execute+0x16a>
 80067aa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80067ae:	2bd0      	cmp	r3, #208	; 0xd0
 80067b0:	d10b      	bne.n	80067ca <__gnu_unwind_execute+0x62>
 80067b2:	f000 0207 	and.w	r2, r0, #7
 80067b6:	2101      	movs	r1, #1
 80067b8:	3201      	adds	r2, #1
 80067ba:	4630      	mov	r0, r6
 80067bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80067c0:	2305      	movs	r3, #5
 80067c2:	f7ff fcdd 	bl	8006180 <_Unwind_VRS_Pop>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d0d7      	beq.n	800677a <__gnu_unwind_execute+0x12>
 80067ca:	2009      	movs	r0, #9
 80067cc:	b005      	add	sp, #20
 80067ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067d2:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80067d6:	ab03      	add	r3, sp, #12
 80067d8:	220d      	movs	r2, #13
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	4630      	mov	r0, r6
 80067de:	460b      	mov	r3, r1
 80067e0:	f7ff fb18 	bl	8005e14 <_Unwind_VRS_Get>
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	fa5f f888 	uxtb.w	r8, r8
 80067ea:	0664      	lsls	r4, r4, #25
 80067ec:	f108 0804 	add.w	r8, r8, #4
 80067f0:	ac03      	add	r4, sp, #12
 80067f2:	bf4c      	ite	mi
 80067f4:	ebc8 0303 	rsbmi	r3, r8, r3
 80067f8:	4443      	addpl	r3, r8
 80067fa:	9400      	str	r4, [sp, #0]
 80067fc:	9303      	str	r3, [sp, #12]
 80067fe:	2100      	movs	r1, #0
 8006800:	4630      	mov	r0, r6
 8006802:	220d      	movs	r2, #13
 8006804:	460b      	mov	r3, r1
 8006806:	f7ff fb2b 	bl	8005e60 <_Unwind_VRS_Set>
 800680a:	e7b6      	b.n	800677a <__gnu_unwind_execute+0x12>
 800680c:	f000 020f 	and.w	r2, r0, #15
 8006810:	f1a2 000d 	sub.w	r0, r2, #13
 8006814:	4244      	negs	r4, r0
 8006816:	eb44 0400 	adc.w	r4, r4, r0
 800681a:	2a0f      	cmp	r2, #15
 800681c:	bf14      	ite	ne
 800681e:	46a0      	movne	r8, r4
 8006820:	f044 0801 	orreq.w	r8, r4, #1
 8006824:	f1b8 0f00 	cmp.w	r8, #0
 8006828:	d1cf      	bne.n	80067ca <__gnu_unwind_execute+0x62>
 800682a:	4641      	mov	r1, r8
 800682c:	4643      	mov	r3, r8
 800682e:	4630      	mov	r0, r6
 8006830:	ac03      	add	r4, sp, #12
 8006832:	9400      	str	r4, [sp, #0]
 8006834:	f7ff faee 	bl	8005e14 <_Unwind_VRS_Get>
 8006838:	ab03      	add	r3, sp, #12
 800683a:	4630      	mov	r0, r6
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4641      	mov	r1, r8
 8006840:	220d      	movs	r2, #13
 8006842:	4643      	mov	r3, r8
 8006844:	f7ff fb0c 	bl	8005e60 <_Unwind_VRS_Set>
 8006848:	e797      	b.n	800677a <__gnu_unwind_execute+0x12>
 800684a:	43c2      	mvns	r2, r0
 800684c:	f002 0207 	and.w	r2, r2, #7
 8006850:	fa57 f202 	asrs.w	r2, r7, r2
 8006854:	0701      	lsls	r1, r0, #28
 8006856:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800685a:	4630      	mov	r0, r6
 800685c:	bf48      	it	mi
 800685e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8006862:	2100      	movs	r1, #0
 8006864:	460b      	mov	r3, r1
 8006866:	f7ff fc8b 	bl	8006180 <_Unwind_VRS_Pop>
 800686a:	2800      	cmp	r0, #0
 800686c:	d1ad      	bne.n	80067ca <__gnu_unwind_execute+0x62>
 800686e:	e784      	b.n	800677a <__gnu_unwind_execute+0x12>
 8006870:	28b1      	cmp	r0, #177	; 0xb1
 8006872:	d076      	beq.n	8006962 <__gnu_unwind_execute+0x1fa>
 8006874:	28b2      	cmp	r0, #178	; 0xb2
 8006876:	f000 8087 	beq.w	8006988 <__gnu_unwind_execute+0x220>
 800687a:	28b3      	cmp	r0, #179	; 0xb3
 800687c:	f000 80aa 	beq.w	80069d4 <__gnu_unwind_execute+0x26c>
 8006880:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8006884:	2bb4      	cmp	r3, #180	; 0xb4
 8006886:	d05e      	beq.n	8006946 <__gnu_unwind_execute+0x1de>
 8006888:	f000 0207 	and.w	r2, r0, #7
 800688c:	2101      	movs	r1, #1
 800688e:	3201      	adds	r2, #1
 8006890:	4630      	mov	r0, r6
 8006892:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006896:	460b      	mov	r3, r1
 8006898:	f7ff fc72 	bl	8006180 <_Unwind_VRS_Pop>
 800689c:	2800      	cmp	r0, #0
 800689e:	d194      	bne.n	80067ca <__gnu_unwind_execute+0x62>
 80068a0:	e76b      	b.n	800677a <__gnu_unwind_execute+0x12>
 80068a2:	4628      	mov	r0, r5
 80068a4:	0224      	lsls	r4, r4, #8
 80068a6:	f7ff ff35 	bl	8006714 <next_unwind_byte>
 80068aa:	4304      	orrs	r4, r0
 80068ac:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80068b0:	d08b      	beq.n	80067ca <__gnu_unwind_execute+0x62>
 80068b2:	0522      	lsls	r2, r4, #20
 80068b4:	2100      	movs	r1, #0
 80068b6:	4630      	mov	r0, r6
 80068b8:	460b      	mov	r3, r1
 80068ba:	0c12      	lsrs	r2, r2, #16
 80068bc:	0124      	lsls	r4, r4, #4
 80068be:	f7ff fc5f 	bl	8006180 <_Unwind_VRS_Pop>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d181      	bne.n	80067ca <__gnu_unwind_execute+0x62>
 80068c6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80068ca:	bf18      	it	ne
 80068cc:	f04f 0901 	movne.w	r9, #1
 80068d0:	e753      	b.n	800677a <__gnu_unwind_execute+0x12>
 80068d2:	28c6      	cmp	r0, #198	; 0xc6
 80068d4:	f000 8091 	beq.w	80069fa <__gnu_unwind_execute+0x292>
 80068d8:	28c7      	cmp	r0, #199	; 0xc7
 80068da:	f000 80a1 	beq.w	8006a20 <__gnu_unwind_execute+0x2b8>
 80068de:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80068e2:	2bc0      	cmp	r3, #192	; 0xc0
 80068e4:	f000 80af 	beq.w	8006a46 <__gnu_unwind_execute+0x2de>
 80068e8:	28c8      	cmp	r0, #200	; 0xc8
 80068ea:	f000 80ba 	beq.w	8006a62 <__gnu_unwind_execute+0x2fa>
 80068ee:	28c9      	cmp	r0, #201	; 0xc9
 80068f0:	f47f af6b 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 80068f4:	4628      	mov	r0, r5
 80068f6:	f7ff ff0d 	bl	8006714 <next_unwind_byte>
 80068fa:	2101      	movs	r1, #1
 80068fc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006900:	f000 030f 	and.w	r3, r0, #15
 8006904:	3301      	adds	r3, #1
 8006906:	4630      	mov	r0, r6
 8006908:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800690c:	2305      	movs	r3, #5
 800690e:	f7ff fc37 	bl	8006180 <_Unwind_VRS_Pop>
 8006912:	2800      	cmp	r0, #0
 8006914:	f47f af59 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 8006918:	e72f      	b.n	800677a <__gnu_unwind_execute+0x12>
 800691a:	2000      	movs	r0, #0
 800691c:	f1b9 0f00 	cmp.w	r9, #0
 8006920:	f47f af54 	bne.w	80067cc <__gnu_unwind_execute+0x64>
 8006924:	4649      	mov	r1, r9
 8006926:	220e      	movs	r2, #14
 8006928:	464b      	mov	r3, r9
 800692a:	4630      	mov	r0, r6
 800692c:	ac03      	add	r4, sp, #12
 800692e:	9400      	str	r4, [sp, #0]
 8006930:	f7ff fa70 	bl	8005e14 <_Unwind_VRS_Get>
 8006934:	4630      	mov	r0, r6
 8006936:	4649      	mov	r1, r9
 8006938:	220f      	movs	r2, #15
 800693a:	464b      	mov	r3, r9
 800693c:	9400      	str	r4, [sp, #0]
 800693e:	f7ff fa8f 	bl	8005e60 <_Unwind_VRS_Set>
 8006942:	4648      	mov	r0, r9
 8006944:	e742      	b.n	80067cc <__gnu_unwind_execute+0x64>
 8006946:	f000 0203 	and.w	r2, r0, #3
 800694a:	2102      	movs	r1, #2
 800694c:	3201      	adds	r2, #1
 800694e:	4630      	mov	r0, r6
 8006950:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006954:	460b      	mov	r3, r1
 8006956:	f7ff fc13 	bl	8006180 <_Unwind_VRS_Pop>
 800695a:	2800      	cmp	r0, #0
 800695c:	f47f af35 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 8006960:	e70b      	b.n	800677a <__gnu_unwind_execute+0x12>
 8006962:	4628      	mov	r0, r5
 8006964:	f7ff fed6 	bl	8006714 <next_unwind_byte>
 8006968:	4602      	mov	r2, r0
 800696a:	2800      	cmp	r0, #0
 800696c:	f43f af2d 	beq.w	80067ca <__gnu_unwind_execute+0x62>
 8006970:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 8006974:	f47f af29 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 8006978:	4630      	mov	r0, r6
 800697a:	460b      	mov	r3, r1
 800697c:	f7ff fc00 	bl	8006180 <_Unwind_VRS_Pop>
 8006980:	2800      	cmp	r0, #0
 8006982:	f47f af22 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 8006986:	e6f8      	b.n	800677a <__gnu_unwind_execute+0x12>
 8006988:	2100      	movs	r1, #0
 800698a:	220d      	movs	r2, #13
 800698c:	460b      	mov	r3, r1
 800698e:	4630      	mov	r0, r6
 8006990:	ac03      	add	r4, sp, #12
 8006992:	9400      	str	r4, [sp, #0]
 8006994:	f7ff fa3e 	bl	8005e14 <_Unwind_VRS_Get>
 8006998:	4628      	mov	r0, r5
 800699a:	f7ff febb 	bl	8006714 <next_unwind_byte>
 800699e:	2402      	movs	r4, #2
 80069a0:	0602      	lsls	r2, r0, #24
 80069a2:	d50b      	bpl.n	80069bc <__gnu_unwind_execute+0x254>
 80069a4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80069a8:	9a03      	ldr	r2, [sp, #12]
 80069aa:	4628      	mov	r0, r5
 80069ac:	40a3      	lsls	r3, r4
 80069ae:	3407      	adds	r4, #7
 80069b0:	18d3      	adds	r3, r2, r3
 80069b2:	9303      	str	r3, [sp, #12]
 80069b4:	f7ff feae 	bl	8006714 <next_unwind_byte>
 80069b8:	0603      	lsls	r3, r0, #24
 80069ba:	d4f3      	bmi.n	80069a4 <__gnu_unwind_execute+0x23c>
 80069bc:	ab03      	add	r3, sp, #12
 80069be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	fa10 f404 	lsls.w	r4, r0, r4
 80069ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80069ce:	191b      	adds	r3, r3, r4
 80069d0:	9303      	str	r3, [sp, #12]
 80069d2:	e714      	b.n	80067fe <__gnu_unwind_execute+0x96>
 80069d4:	4628      	mov	r0, r5
 80069d6:	f7ff fe9d 	bl	8006714 <next_unwind_byte>
 80069da:	2101      	movs	r1, #1
 80069dc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80069e0:	f000 030f 	and.w	r3, r0, #15
 80069e4:	3301      	adds	r3, #1
 80069e6:	4630      	mov	r0, r6
 80069e8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80069ec:	460b      	mov	r3, r1
 80069ee:	f7ff fbc7 	bl	8006180 <_Unwind_VRS_Pop>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f47f aee9 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 80069f8:	e6bf      	b.n	800677a <__gnu_unwind_execute+0x12>
 80069fa:	4628      	mov	r0, r5
 80069fc:	f7ff fe8a 	bl	8006714 <next_unwind_byte>
 8006a00:	2103      	movs	r1, #3
 8006a02:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006a06:	f000 030f 	and.w	r3, r0, #15
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006a12:	460b      	mov	r3, r1
 8006a14:	f7ff fbb4 	bl	8006180 <_Unwind_VRS_Pop>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	f47f aed6 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 8006a1e:	e6ac      	b.n	800677a <__gnu_unwind_execute+0x12>
 8006a20:	4628      	mov	r0, r5
 8006a22:	f7ff fe77 	bl	8006714 <next_unwind_byte>
 8006a26:	4602      	mov	r2, r0
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f43f aece 	beq.w	80067ca <__gnu_unwind_execute+0x62>
 8006a2e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8006a32:	f47f aeca 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 8006a36:	4630      	mov	r0, r6
 8006a38:	2104      	movs	r1, #4
 8006a3a:	f7ff fba1 	bl	8006180 <_Unwind_VRS_Pop>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f47f aec3 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 8006a44:	e699      	b.n	800677a <__gnu_unwind_execute+0x12>
 8006a46:	f000 020f 	and.w	r2, r0, #15
 8006a4a:	2103      	movs	r1, #3
 8006a4c:	3201      	adds	r2, #1
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8006a54:	460b      	mov	r3, r1
 8006a56:	f7ff fb93 	bl	8006180 <_Unwind_VRS_Pop>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	f47f aeb5 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 8006a60:	e68b      	b.n	800677a <__gnu_unwind_execute+0x12>
 8006a62:	4628      	mov	r0, r5
 8006a64:	f7ff fe56 	bl	8006714 <next_unwind_byte>
 8006a68:	2101      	movs	r1, #1
 8006a6a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006a6e:	f000 030f 	and.w	r3, r0, #15
 8006a72:	3210      	adds	r2, #16
 8006a74:	3301      	adds	r3, #1
 8006a76:	4630      	mov	r0, r6
 8006a78:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006a7c:	2305      	movs	r3, #5
 8006a7e:	f7ff fb7f 	bl	8006180 <_Unwind_VRS_Pop>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f47f aea1 	bne.w	80067ca <__gnu_unwind_execute+0x62>
 8006a88:	e677      	b.n	800677a <__gnu_unwind_execute+0x12>
 8006a8a:	bf00      	nop

08006a8c <__gnu_unwind_frame>:
 8006a8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006a8e:	4608      	mov	r0, r1
 8006a90:	b530      	push	{r4, r5, lr}
 8006a92:	b085      	sub	sp, #20
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	f103 0408 	add.w	r4, r3, #8
 8006a9a:	2503      	movs	r5, #3
 8006a9c:	f88d 500c 	strb.w	r5, [sp, #12]
 8006aa0:	79db      	ldrb	r3, [r3, #7]
 8006aa2:	a901      	add	r1, sp, #4
 8006aa4:	0212      	lsls	r2, r2, #8
 8006aa6:	9402      	str	r4, [sp, #8]
 8006aa8:	9201      	str	r2, [sp, #4]
 8006aaa:	f88d 300d 	strb.w	r3, [sp, #13]
 8006aae:	f7ff fe5b 	bl	8006768 <__gnu_unwind_execute>
 8006ab2:	b005      	add	sp, #20
 8006ab4:	bd30      	pop	{r4, r5, pc}
 8006ab6:	bf00      	nop

08006ab8 <_Unwind_GetRegionStart>:
 8006ab8:	b508      	push	{r3, lr}
 8006aba:	f7ff fe53 	bl	8006764 <unwind_UCB_from_context>
 8006abe:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8006ac0:	bd08      	pop	{r3, pc}
 8006ac2:	bf00      	nop

08006ac4 <_Unwind_GetLanguageSpecificData>:
 8006ac4:	b508      	push	{r3, lr}
 8006ac6:	f7ff fe4d 	bl	8006764 <unwind_UCB_from_context>
 8006aca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006acc:	79d8      	ldrb	r0, [r3, #7]
 8006ace:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006ad2:	f103 0008 	add.w	r0, r3, #8
 8006ad6:	bd08      	pop	{r3, pc}

08006ad8 <_Unwind_GetDataRelBase>:
 8006ad8:	b508      	push	{r3, lr}
 8006ada:	f000 f805 	bl	8006ae8 <abort>
 8006ade:	bf00      	nop

08006ae0 <_Unwind_GetTextRelBase>:
 8006ae0:	b508      	push	{r3, lr}
 8006ae2:	f000 f801 	bl	8006ae8 <abort>
 8006ae6:	bf00      	nop

08006ae8 <abort>:
 8006ae8:	b508      	push	{r3, lr}
 8006aea:	2006      	movs	r0, #6
 8006aec:	f001 fa0c 	bl	8007f08 <raise>
 8006af0:	2001      	movs	r0, #1
 8006af2:	f01d fbef 	bl	80242d4 <_exit>
 8006af6:	bf00      	nop

08006af8 <__assert_func>:
 8006af8:	4604      	mov	r4, r0
 8006afa:	480a      	ldr	r0, [pc, #40]	; (8006b24 <__assert_func+0x2c>)
 8006afc:	b500      	push	{lr}
 8006afe:	b085      	sub	sp, #20
 8006b00:	6800      	ldr	r0, [r0, #0]
 8006b02:	4d09      	ldr	r5, [pc, #36]	; (8006b28 <__assert_func+0x30>)
 8006b04:	68c0      	ldr	r0, [r0, #12]
 8006b06:	b14a      	cbz	r2, 8006b1c <__assert_func+0x24>
 8006b08:	e88d 0022 	stmia.w	sp, {r1, r5}
 8006b0c:	9202      	str	r2, [sp, #8]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4906      	ldr	r1, [pc, #24]	; (8006b2c <__assert_func+0x34>)
 8006b12:	4623      	mov	r3, r4
 8006b14:	f000 f85a 	bl	8006bcc <fiprintf>
 8006b18:	f7ff ffe6 	bl	8006ae8 <abort>
 8006b1c:	4d04      	ldr	r5, [pc, #16]	; (8006b30 <__assert_func+0x38>)
 8006b1e:	462a      	mov	r2, r5
 8006b20:	e7f2      	b.n	8006b08 <__assert_func+0x10>
 8006b22:	bf00      	nop
 8006b24:	20000008 	.word	0x20000008
 8006b28:	08028c20 	.word	0x08028c20
 8006b2c:	08028c30 	.word	0x08028c30
 8006b30:	08028c2c 	.word	0x08028c2c

08006b34 <__assert>:
 8006b34:	b508      	push	{r3, lr}
 8006b36:	4613      	mov	r3, r2
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f7ff ffdd 	bl	8006af8 <__assert_func>
 8006b3e:	bf00      	nop

08006b40 <atexit>:
 8006b40:	4601      	mov	r1, r0
 8006b42:	2000      	movs	r0, #0
 8006b44:	4602      	mov	r2, r0
 8006b46:	4603      	mov	r3, r0
 8006b48:	f003 bc78 	b.w	800a43c <__register_exitproc>

08006b4c <__cxa_atexit>:
 8006b4c:	b410      	push	{r4}
 8006b4e:	460c      	mov	r4, r1
 8006b50:	4613      	mov	r3, r2
 8006b52:	4601      	mov	r1, r0
 8006b54:	4622      	mov	r2, r4
 8006b56:	2002      	movs	r0, #2
 8006b58:	bc10      	pop	{r4}
 8006b5a:	f003 bc6f 	b.w	800a43c <__register_exitproc>
 8006b5e:	bf00      	nop

08006b60 <exit>:
 8006b60:	b508      	push	{r3, lr}
 8006b62:	2100      	movs	r1, #0
 8006b64:	4604      	mov	r4, r0
 8006b66:	f003 fcc1 	bl	800a4ec <__call_exitprocs>
 8006b6a:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <exit+0x1c>)
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006b70:	b103      	cbz	r3, 8006b74 <exit+0x14>
 8006b72:	4798      	blx	r3
 8006b74:	4620      	mov	r0, r4
 8006b76:	f01d fbad 	bl	80242d4 <_exit>
 8006b7a:	bf00      	nop
 8006b7c:	08026d4c 	.word	0x08026d4c

08006b80 <__libc_fini_array>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d08      	ldr	r5, [pc, #32]	; (8006ba4 <__libc_fini_array+0x24>)
 8006b84:	4c08      	ldr	r4, [pc, #32]	; (8006ba8 <__libc_fini_array+0x28>)
 8006b86:	1b64      	subs	r4, r4, r5
 8006b88:	10a4      	asrs	r4, r4, #2
 8006b8a:	d006      	beq.n	8006b9a <__libc_fini_array+0x1a>
 8006b8c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8006b90:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006b94:	4798      	blx	r3
 8006b96:	3c01      	subs	r4, #1
 8006b98:	d1fa      	bne.n	8006b90 <__libc_fini_array+0x10>
 8006b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b9e:	f022 b899 	b.w	8028cd4 <_fini>
 8006ba2:	bf00      	nop
 8006ba4:	0802904c 	.word	0x0802904c
 8006ba8:	08029050 	.word	0x08029050

08006bac <_fiprintf_r>:
 8006bac:	b40c      	push	{r2, r3}
 8006bae:	b510      	push	{r4, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	ac04      	add	r4, sp, #16
 8006bb4:	f854 2b04 	ldr.w	r2, [r4], #4
 8006bb8:	4623      	mov	r3, r4
 8006bba:	9401      	str	r4, [sp, #4]
 8006bbc:	f002 fe14 	bl	80097e8 <_vfiprintf_r>
 8006bc0:	b002      	add	sp, #8
 8006bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc6:	b002      	add	sp, #8
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop

08006bcc <fiprintf>:
 8006bcc:	b40e      	push	{r1, r2, r3}
 8006bce:	f240 0308 	movw	r3, #8
 8006bd2:	b510      	push	{r4, lr}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	ac05      	add	r4, sp, #20
 8006bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006bdc:	4601      	mov	r1, r0
 8006bde:	f854 2b04 	ldr.w	r2, [r4], #4
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	4623      	mov	r3, r4
 8006be6:	9401      	str	r4, [sp, #4]
 8006be8:	f002 fdfe 	bl	80097e8 <_vfiprintf_r>
 8006bec:	b003      	add	sp, #12
 8006bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf2:	b003      	add	sp, #12
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop

08006bf8 <_fputc_r>:
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	b138      	cbz	r0, 8006c10 <_fputc_r+0x18>
 8006c00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006c02:	b92b      	cbnz	r3, 8006c10 <_fputc_r+0x18>
 8006c04:	9101      	str	r1, [sp, #4]
 8006c06:	9200      	str	r2, [sp, #0]
 8006c08:	f004 fe20 	bl	800b84c <__sinit>
 8006c0c:	9a00      	ldr	r2, [sp, #0]
 8006c0e:	9901      	ldr	r1, [sp, #4]
 8006c10:	4620      	mov	r0, r4
 8006c12:	b002      	add	sp, #8
 8006c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c18:	f000 be72 	b.w	8007900 <_putc_r>

08006c1c <fputc>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	4606      	mov	r6, r0
 8006c20:	4c07      	ldr	r4, [pc, #28]	; (8006c40 <fputc+0x24>)
 8006c22:	460d      	mov	r5, r1
 8006c24:	6820      	ldr	r0, [r4, #0]
 8006c26:	b120      	cbz	r0, 8006c32 <fputc+0x16>
 8006c28:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006c2a:	b913      	cbnz	r3, 8006c32 <fputc+0x16>
 8006c2c:	f004 fe0e 	bl	800b84c <__sinit>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	4631      	mov	r1, r6
 8006c34:	462a      	mov	r2, r5
 8006c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c3a:	f000 be61 	b.w	8007900 <_putc_r>
 8006c3e:	bf00      	nop
 8006c40:	20000008 	.word	0x20000008

08006c44 <_fputs_r>:
 8006c44:	b530      	push	{r4, r5, lr}
 8006c46:	b087      	sub	sp, #28
 8006c48:	4604      	mov	r4, r0
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4615      	mov	r5, r2
 8006c4e:	9104      	str	r1, [sp, #16]
 8006c50:	f001 fb36 	bl	80082c0 <strlen>
 8006c54:	ab04      	add	r3, sp, #16
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	2301      	movs	r3, #1
 8006c5a:	9302      	str	r3, [sp, #8]
 8006c5c:	9003      	str	r0, [sp, #12]
 8006c5e:	9005      	str	r0, [sp, #20]
 8006c60:	b10c      	cbz	r4, 8006c66 <_fputs_r+0x22>
 8006c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c64:	b18b      	cbz	r3, 8006c8a <_fputs_r+0x46>
 8006c66:	89ab      	ldrh	r3, [r5, #12]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	049a      	lsls	r2, r3, #18
 8006c6e:	bf5f      	itttt	pl
 8006c70:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8006c74:	81ab      	strhpl	r3, [r5, #12]
 8006c76:	6e6a      	ldrpl	r2, [r5, #100]	; 0x64
 8006c78:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 8006c7c:	aa01      	add	r2, sp, #4
 8006c7e:	bf58      	it	pl
 8006c80:	666b      	strpl	r3, [r5, #100]	; 0x64
 8006c82:	f000 f80f 	bl	8006ca4 <__sfvwrite_r>
 8006c86:	b007      	add	sp, #28
 8006c88:	bd30      	pop	{r4, r5, pc}
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f004 fdde 	bl	800b84c <__sinit>
 8006c90:	e7e9      	b.n	8006c66 <_fputs_r+0x22>
 8006c92:	bf00      	nop

08006c94 <fputs>:
 8006c94:	f240 0308 	movw	r3, #8
 8006c98:	460a      	mov	r2, r1
 8006c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	e7cf      	b.n	8006c44 <_fputs_r>

08006ca4 <__sfvwrite_r>:
 8006ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	4690      	mov	r8, r2
 8006cac:	460c      	mov	r4, r1
 8006cae:	9001      	str	r0, [sp, #4]
 8006cb0:	6890      	ldr	r0, [r2, #8]
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d04d      	beq.n	8006d52 <__sfvwrite_r+0xae>
 8006cb6:	898b      	ldrh	r3, [r1, #12]
 8006cb8:	0719      	lsls	r1, r3, #28
 8006cba:	d56b      	bpl.n	8006d94 <__sfvwrite_r+0xf0>
 8006cbc:	6922      	ldr	r2, [r4, #16]
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	d068      	beq.n	8006d94 <__sfvwrite_r+0xf0>
 8006cc2:	f013 0b02 	ands.w	fp, r3, #2
 8006cc6:	f8d8 5000 	ldr.w	r5, [r8]
 8006cca:	bf1c      	itt	ne
 8006ccc:	f04f 0900 	movne.w	r9, #0
 8006cd0:	464f      	movne	r7, r9
 8006cd2:	d145      	bne.n	8006d60 <__sfvwrite_r+0xbc>
 8006cd4:	f013 0901 	ands.w	r9, r3, #1
 8006cd8:	bf1e      	ittt	ne
 8006cda:	46dc      	movne	ip, fp
 8006cdc:	46da      	movne	sl, fp
 8006cde:	465f      	movne	r7, fp
 8006ce0:	f000 80b5 	beq.w	8006e4e <__sfvwrite_r+0x1aa>
 8006ce4:	2f00      	cmp	r7, #0
 8006ce6:	d065      	beq.n	8006db4 <__sfvwrite_r+0x110>
 8006ce8:	f1bc 0f00 	cmp.w	ip, #0
 8006cec:	f000 8083 	beq.w	8006df6 <__sfvwrite_r+0x152>
 8006cf0:	6922      	ldr	r2, [r4, #16]
 8006cf2:	45bb      	cmp	fp, r7
 8006cf4:	bf34      	ite	cc
 8006cf6:	46d9      	movcc	r9, fp
 8006cf8:	46b9      	movcs	r9, r7
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	6963      	ldr	r3, [r4, #20]
 8006cfe:	68a6      	ldr	r6, [r4, #8]
 8006d00:	4290      	cmp	r0, r2
 8006d02:	bf94      	ite	ls
 8006d04:	2200      	movls	r2, #0
 8006d06:	2201      	movhi	r2, #1
 8006d08:	199e      	adds	r6, r3, r6
 8006d0a:	45b1      	cmp	r9, r6
 8006d0c:	bfd4      	ite	le
 8006d0e:	2200      	movle	r2, #0
 8006d10:	f002 0201 	andgt.w	r2, r2, #1
 8006d14:	2a00      	cmp	r2, #0
 8006d16:	f040 8081 	bne.w	8006e1c <__sfvwrite_r+0x178>
 8006d1a:	4599      	cmp	r9, r3
 8006d1c:	db51      	blt.n	8006dc2 <__sfvwrite_r+0x11e>
 8006d1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d20:	4652      	mov	r2, sl
 8006d22:	69e1      	ldr	r1, [r4, #28]
 8006d24:	9801      	ldr	r0, [sp, #4]
 8006d26:	f8cd c000 	str.w	ip, [sp]
 8006d2a:	47b0      	blx	r6
 8006d2c:	f8dd c000 	ldr.w	ip, [sp]
 8006d30:	2800      	cmp	r0, #0
 8006d32:	4606      	mov	r6, r0
 8006d34:	f340 8084 	ble.w	8006e40 <__sfvwrite_r+0x19c>
 8006d38:	ebbb 0b06 	subs.w	fp, fp, r6
 8006d3c:	d054      	beq.n	8006de8 <__sfvwrite_r+0x144>
 8006d3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d42:	44b2      	add	sl, r6
 8006d44:	1bbf      	subs	r7, r7, r6
 8006d46:	1b9e      	subs	r6, r3, r6
 8006d48:	f8c8 6008 	str.w	r6, [r8, #8]
 8006d4c:	2e00      	cmp	r6, #0
 8006d4e:	d1c9      	bne.n	8006ce4 <__sfvwrite_r+0x40>
 8006d50:	4630      	mov	r0, r6
 8006d52:	b005      	add	sp, #20
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d58:	f8d5 9000 	ldr.w	r9, [r5]
 8006d5c:	686f      	ldr	r7, [r5, #4]
 8006d5e:	3508      	adds	r5, #8
 8006d60:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8006d64:	bf34      	ite	cc
 8006d66:	463b      	movcc	r3, r7
 8006d68:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8006d6c:	464a      	mov	r2, r9
 8006d6e:	9801      	ldr	r0, [sp, #4]
 8006d70:	2f00      	cmp	r7, #0
 8006d72:	d0f1      	beq.n	8006d58 <__sfvwrite_r+0xb4>
 8006d74:	69e1      	ldr	r1, [r4, #28]
 8006d76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d78:	47b0      	blx	r6
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	4481      	add	r9, r0
 8006d7e:	ebc0 0707 	rsb	r7, r0, r7
 8006d82:	dd5d      	ble.n	8006e40 <__sfvwrite_r+0x19c>
 8006d84:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8006d88:	1a30      	subs	r0, r6, r0
 8006d8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d1e6      	bne.n	8006d60 <__sfvwrite_r+0xbc>
 8006d92:	e7de      	b.n	8006d52 <__sfvwrite_r+0xae>
 8006d94:	9801      	ldr	r0, [sp, #4]
 8006d96:	4621      	mov	r1, r4
 8006d98:	f003 faf4 	bl	800a384 <__swsetup_r>
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d08f      	beq.n	8006cc2 <__sfvwrite_r+0x1e>
 8006da2:	9901      	ldr	r1, [sp, #4]
 8006da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	2309      	movs	r3, #9
 8006db0:	600b      	str	r3, [r1, #0]
 8006db2:	e7ce      	b.n	8006d52 <__sfvwrite_r+0xae>
 8006db4:	f8d5 a000 	ldr.w	sl, [r5]
 8006db8:	f04f 0c00 	mov.w	ip, #0
 8006dbc:	686f      	ldr	r7, [r5, #4]
 8006dbe:	3508      	adds	r5, #8
 8006dc0:	e790      	b.n	8006ce4 <__sfvwrite_r+0x40>
 8006dc2:	464a      	mov	r2, r9
 8006dc4:	4651      	mov	r1, sl
 8006dc6:	464e      	mov	r6, r9
 8006dc8:	f8cd c000 	str.w	ip, [sp]
 8006dcc:	f000 fcea 	bl	80077a4 <memmove>
 8006dd0:	68a2      	ldr	r2, [r4, #8]
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	ebbb 0b06 	subs.w	fp, fp, r6
 8006dd8:	ebc9 0202 	rsb	r2, r9, r2
 8006ddc:	f8dd c000 	ldr.w	ip, [sp]
 8006de0:	444b      	add	r3, r9
 8006de2:	60a2      	str	r2, [r4, #8]
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	d1aa      	bne.n	8006d3e <__sfvwrite_r+0x9a>
 8006de8:	9801      	ldr	r0, [sp, #4]
 8006dea:	4621      	mov	r1, r4
 8006dec:	f004 fc0c 	bl	800b608 <_fflush_r>
 8006df0:	bb30      	cbnz	r0, 8006e40 <__sfvwrite_r+0x19c>
 8006df2:	46dc      	mov	ip, fp
 8006df4:	e7a3      	b.n	8006d3e <__sfvwrite_r+0x9a>
 8006df6:	4650      	mov	r0, sl
 8006df8:	210a      	movs	r1, #10
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	f107 0b01 	add.w	fp, r7, #1
 8006e00:	f000 fc1a 	bl	8007638 <memchr>
 8006e04:	f04f 0c01 	mov.w	ip, #1
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f43f af71 	beq.w	8006cf0 <__sfvwrite_r+0x4c>
 8006e0e:	f100 0b01 	add.w	fp, r0, #1
 8006e12:	f04f 0c01 	mov.w	ip, #1
 8006e16:	ebca 0b0b 	rsb	fp, sl, fp
 8006e1a:	e769      	b.n	8006cf0 <__sfvwrite_r+0x4c>
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	4632      	mov	r2, r6
 8006e20:	f8cd c000 	str.w	ip, [sp]
 8006e24:	f000 fcbe 	bl	80077a4 <memmove>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	9801      	ldr	r0, [sp, #4]
 8006e2e:	199b      	adds	r3, r3, r6
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	f004 fbe9 	bl	800b608 <_fflush_r>
 8006e36:	f8dd c000 	ldr.w	ip, [sp]
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f43f af7c 	beq.w	8006d38 <__sfvwrite_r+0x94>
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	f04f 30ff 	mov.w	r0, #4294967295
 8006e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	e781      	b.n	8006d52 <__sfvwrite_r+0xae>
 8006e4e:	464e      	mov	r6, r9
 8006e50:	b326      	cbz	r6, 8006e9c <__sfvwrite_r+0x1f8>
 8006e52:	059a      	lsls	r2, r3, #22
 8006e54:	68a7      	ldr	r7, [r4, #8]
 8006e56:	d526      	bpl.n	8006ea6 <__sfvwrite_r+0x202>
 8006e58:	42be      	cmp	r6, r7
 8006e5a:	46bb      	mov	fp, r7
 8006e5c:	d246      	bcs.n	8006eec <__sfvwrite_r+0x248>
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	4633      	mov	r3, r6
 8006e62:	46b3      	mov	fp, r6
 8006e64:	46b2      	mov	sl, r6
 8006e66:	4637      	mov	r7, r6
 8006e68:	4649      	mov	r1, r9
 8006e6a:	465a      	mov	r2, fp
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	f000 fc99 	bl	80077a4 <memmove>
 8006e72:	9b00      	ldr	r3, [sp, #0]
 8006e74:	68a1      	ldr	r1, [r4, #8]
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	1acb      	subs	r3, r1, r3
 8006e7a:	60a3      	str	r3, [r4, #8]
 8006e7c:	eb02 030b 	add.w	r3, r2, fp
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006e86:	1bc7      	subs	r7, r0, r7
 8006e88:	f8c8 7008 	str.w	r7, [r8, #8]
 8006e8c:	2f00      	cmp	r7, #0
 8006e8e:	d02b      	beq.n	8006ee8 <__sfvwrite_r+0x244>
 8006e90:	ebca 0606 	rsb	r6, sl, r6
 8006e94:	44d1      	add	r9, sl
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	2e00      	cmp	r6, #0
 8006e9a:	d1da      	bne.n	8006e52 <__sfvwrite_r+0x1ae>
 8006e9c:	f8d5 9000 	ldr.w	r9, [r5]
 8006ea0:	686e      	ldr	r6, [r5, #4]
 8006ea2:	3508      	adds	r5, #8
 8006ea4:	e7d4      	b.n	8006e50 <__sfvwrite_r+0x1ac>
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	46ba      	mov	sl, r7
 8006eaa:	6820      	ldr	r0, [r4, #0]
 8006eac:	4298      	cmp	r0, r3
 8006eae:	bf94      	ite	ls
 8006eb0:	2300      	movls	r3, #0
 8006eb2:	2301      	movhi	r3, #1
 8006eb4:	42b7      	cmp	r7, r6
 8006eb6:	bf2c      	ite	cs
 8006eb8:	2300      	movcs	r3, #0
 8006eba:	f003 0301 	andcc.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d129      	bne.n	8006f16 <__sfvwrite_r+0x272>
 8006ec2:	6963      	ldr	r3, [r4, #20]
 8006ec4:	429e      	cmp	r6, r3
 8006ec6:	d319      	bcc.n	8006efc <__sfvwrite_r+0x258>
 8006ec8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006eca:	464a      	mov	r2, r9
 8006ecc:	69e1      	ldr	r1, [r4, #28]
 8006ece:	9801      	ldr	r0, [sp, #4]
 8006ed0:	47b8      	blx	r7
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	ddb3      	ble.n	8006e40 <__sfvwrite_r+0x19c>
 8006ed8:	4682      	mov	sl, r0
 8006eda:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006ede:	1bc7      	subs	r7, r0, r7
 8006ee0:	f8c8 7008 	str.w	r7, [r8, #8]
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	d1d3      	bne.n	8006e90 <__sfvwrite_r+0x1ec>
 8006ee8:	4638      	mov	r0, r7
 8006eea:	e732      	b.n	8006d52 <__sfvwrite_r+0xae>
 8006eec:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006ef0:	d11f      	bne.n	8006f32 <__sfvwrite_r+0x28e>
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	6820      	ldr	r0, [r4, #0]
 8006ef6:	46b2      	mov	sl, r6
 8006ef8:	4637      	mov	r7, r6
 8006efa:	e7b5      	b.n	8006e68 <__sfvwrite_r+0x1c4>
 8006efc:	4632      	mov	r2, r6
 8006efe:	4649      	mov	r1, r9
 8006f00:	f000 fc50 	bl	80077a4 <memmove>
 8006f04:	68a2      	ldr	r2, [r4, #8]
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	4637      	mov	r7, r6
 8006f0a:	1b92      	subs	r2, r2, r6
 8006f0c:	46b2      	mov	sl, r6
 8006f0e:	199b      	adds	r3, r3, r6
 8006f10:	60a2      	str	r2, [r4, #8]
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	e7b5      	b.n	8006e82 <__sfvwrite_r+0x1de>
 8006f16:	4649      	mov	r1, r9
 8006f18:	463a      	mov	r2, r7
 8006f1a:	f000 fc43 	bl	80077a4 <memmove>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	9801      	ldr	r0, [sp, #4]
 8006f22:	4621      	mov	r1, r4
 8006f24:	19db      	adds	r3, r3, r7
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	f004 fb6e 	bl	800b608 <_fflush_r>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d0a8      	beq.n	8006e82 <__sfvwrite_r+0x1de>
 8006f30:	e786      	b.n	8006e40 <__sfvwrite_r+0x19c>
 8006f32:	6962      	ldr	r2, [r4, #20]
 8006f34:	6921      	ldr	r1, [r4, #16]
 8006f36:	6820      	ldr	r0, [r4, #0]
 8006f38:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8006f3c:	1a40      	subs	r0, r0, r1
 8006f3e:	9003      	str	r0, [sp, #12]
 8006f40:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 8006f44:	3001      	adds	r0, #1
 8006f46:	1980      	adds	r0, r0, r6
 8006f48:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8006f4c:	4584      	cmp	ip, r0
 8006f4e:	4662      	mov	r2, ip
 8006f50:	bf38      	it	cc
 8006f52:	4684      	movcc	ip, r0
 8006f54:	9801      	ldr	r0, [sp, #4]
 8006f56:	bf38      	it	cc
 8006f58:	4662      	movcc	r2, ip
 8006f5a:	055b      	lsls	r3, r3, #21
 8006f5c:	d527      	bpl.n	8006fae <__sfvwrite_r+0x30a>
 8006f5e:	4611      	mov	r1, r2
 8006f60:	f8cd c000 	str.w	ip, [sp]
 8006f64:	f000 f8b6 	bl	80070d4 <_malloc_r>
 8006f68:	f8dd c000 	ldr.w	ip, [sp]
 8006f6c:	9002      	str	r0, [sp, #8]
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d02e      	beq.n	8006fd0 <__sfvwrite_r+0x32c>
 8006f72:	6921      	ldr	r1, [r4, #16]
 8006f74:	9802      	ldr	r0, [sp, #8]
 8006f76:	9a03      	ldr	r2, [sp, #12]
 8006f78:	f8cd c000 	str.w	ip, [sp]
 8006f7c:	f000 fbd0 	bl	8007720 <memcpy>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	f8dd c000 	ldr.w	ip, [sp]
 8006f86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8e:	81a3      	strh	r3, [r4, #12]
 8006f90:	9902      	ldr	r1, [sp, #8]
 8006f92:	4633      	mov	r3, r6
 8006f94:	9a03      	ldr	r2, [sp, #12]
 8006f96:	46b3      	mov	fp, r6
 8006f98:	46b2      	mov	sl, r6
 8006f9a:	4637      	mov	r7, r6
 8006f9c:	1888      	adds	r0, r1, r2
 8006f9e:	6121      	str	r1, [r4, #16]
 8006fa0:	ebc2 020c 	rsb	r2, r2, ip
 8006fa4:	6020      	str	r0, [r4, #0]
 8006fa6:	f8c4 c014 	str.w	ip, [r4, #20]
 8006faa:	60a2      	str	r2, [r4, #8]
 8006fac:	e75c      	b.n	8006e68 <__sfvwrite_r+0x1c4>
 8006fae:	f8cd c000 	str.w	ip, [sp]
 8006fb2:	f000 fd13 	bl	80079dc <_realloc_r>
 8006fb6:	f8dd c000 	ldr.w	ip, [sp]
 8006fba:	9002      	str	r0, [sp, #8]
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d1e7      	bne.n	8006f90 <__sfvwrite_r+0x2ec>
 8006fc0:	6921      	ldr	r1, [r4, #16]
 8006fc2:	9801      	ldr	r0, [sp, #4]
 8006fc4:	f004 fda6 	bl	800bb14 <_free_r>
 8006fc8:	9901      	ldr	r1, [sp, #4]
 8006fca:	230c      	movs	r3, #12
 8006fcc:	600b      	str	r3, [r1, #0]
 8006fce:	e737      	b.n	8006e40 <__sfvwrite_r+0x19c>
 8006fd0:	9a01      	ldr	r2, [sp, #4]
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	e733      	b.n	8006e40 <__sfvwrite_r+0x19c>

08006fd8 <_fwrite_r>:
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	b086      	sub	sp, #24
 8006fde:	fb02 f603 	mul.w	r6, r2, r3
 8006fe2:	461d      	mov	r5, r3
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	ab04      	add	r3, sp, #16
 8006fe8:	4607      	mov	r7, r0
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	9104      	str	r1, [sp, #16]
 8006ff4:	9302      	str	r3, [sp, #8]
 8006ff6:	9605      	str	r6, [sp, #20]
 8006ff8:	9603      	str	r6, [sp, #12]
 8006ffa:	b108      	cbz	r0, 8007000 <_fwrite_r+0x28>
 8006ffc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006ffe:	b1f3      	cbz	r3, 800703e <_fwrite_r+0x66>
 8007000:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007004:	4638      	mov	r0, r7
 8007006:	4641      	mov	r1, r8
 8007008:	049a      	lsls	r2, r3, #18
 800700a:	bf5f      	itttt	pl
 800700c:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8007010:	f8a8 300c 	strhpl.w	r3, [r8, #12]
 8007014:	f8d8 2064 	ldrpl.w	r2, [r8, #100]	; 0x64
 8007018:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
 800701c:	aa01      	add	r2, sp, #4
 800701e:	bf58      	it	pl
 8007020:	f8c8 3064 	strpl.w	r3, [r8, #100]	; 0x64
 8007024:	f7ff fe3e 	bl	8006ca4 <__sfvwrite_r>
 8007028:	b128      	cbz	r0, 8007036 <_fwrite_r+0x5e>
 800702a:	9803      	ldr	r0, [sp, #12]
 800702c:	4621      	mov	r1, r4
 800702e:	1a30      	subs	r0, r6, r0
 8007030:	f006 fa26 	bl	800d480 <__aeabi_uidiv>
 8007034:	4605      	mov	r5, r0
 8007036:	4628      	mov	r0, r5
 8007038:	b006      	add	sp, #24
 800703a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703e:	f004 fc05 	bl	800b84c <__sinit>
 8007042:	e7dd      	b.n	8007000 <_fwrite_r+0x28>

08007044 <fwrite>:
 8007044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007046:	f240 0408 	movw	r4, #8
 800704a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800704e:	4686      	mov	lr, r0
 8007050:	460f      	mov	r7, r1
 8007052:	4616      	mov	r6, r2
 8007054:	b083      	sub	sp, #12
 8007056:	461d      	mov	r5, r3
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	4671      	mov	r1, lr
 800705c:	463a      	mov	r2, r7
 800705e:	4633      	mov	r3, r6
 8007060:	9500      	str	r5, [sp, #0]
 8007062:	f7ff ffb9 	bl	8006fd8 <_fwrite_r>
 8007066:	b003      	add	sp, #12
 8007068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706a:	bf00      	nop

0800706c <__libc_init_array>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4d0d      	ldr	r5, [pc, #52]	; (80070a4 <__libc_init_array+0x38>)
 8007070:	4e0d      	ldr	r6, [pc, #52]	; (80070a8 <__libc_init_array+0x3c>)
 8007072:	1b76      	subs	r6, r6, r5
 8007074:	10b6      	asrs	r6, r6, #2
 8007076:	d006      	beq.n	8007086 <__libc_init_array+0x1a>
 8007078:	2400      	movs	r4, #0
 800707a:	f855 3b04 	ldr.w	r3, [r5], #4
 800707e:	3401      	adds	r4, #1
 8007080:	4798      	blx	r3
 8007082:	42a6      	cmp	r6, r4
 8007084:	d1f9      	bne.n	800707a <__libc_init_array+0xe>
 8007086:	4d09      	ldr	r5, [pc, #36]	; (80070ac <__libc_init_array+0x40>)
 8007088:	f021 fe1e 	bl	8028cc8 <_init>
 800708c:	4e08      	ldr	r6, [pc, #32]	; (80070b0 <__libc_init_array+0x44>)
 800708e:	1b76      	subs	r6, r6, r5
 8007090:	10b6      	asrs	r6, r6, #2
 8007092:	d006      	beq.n	80070a2 <__libc_init_array+0x36>
 8007094:	2400      	movs	r4, #0
 8007096:	f855 3b04 	ldr.w	r3, [r5], #4
 800709a:	3401      	adds	r4, #1
 800709c:	4798      	blx	r3
 800709e:	42a6      	cmp	r6, r4
 80070a0:	d1f9      	bne.n	8007096 <__libc_init_array+0x2a>
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	08029044 	.word	0x08029044
 80070a8:	08029044 	.word	0x08029044
 80070ac:	08029044 	.word	0x08029044
 80070b0:	0802904c 	.word	0x0802904c

080070b4 <malloc>:
 80070b4:	f240 0308 	movw	r3, #8
 80070b8:	4601      	mov	r1, r0
 80070ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	f000 b808 	b.w	80070d4 <_malloc_r>

080070c4 <free>:
 80070c4:	f240 0308 	movw	r3, #8
 80070c8:	4601      	mov	r1, r0
 80070ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	f004 bd20 	b.w	800bb14 <_free_r>

080070d4 <_malloc_r>:
 80070d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d8:	f101 040b 	add.w	r4, r1, #11
 80070dc:	2c16      	cmp	r4, #22
 80070de:	4605      	mov	r5, r0
 80070e0:	d92c      	bls.n	800713c <_malloc_r+0x68>
 80070e2:	f024 0407 	bic.w	r4, r4, #7
 80070e6:	0fe3      	lsrs	r3, r4, #31
 80070e8:	428c      	cmp	r4, r1
 80070ea:	bf2c      	ite	cs
 80070ec:	4619      	movcs	r1, r3
 80070ee:	f043 0101 	orrcc.w	r1, r3, #1
 80070f2:	2900      	cmp	r1, #0
 80070f4:	d12b      	bne.n	800714e <_malloc_r+0x7a>
 80070f6:	4628      	mov	r0, r5
 80070f8:	f01d f9d0 	bl	802449c <__malloc_lock>
 80070fc:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007100:	d22b      	bcs.n	800715a <_malloc_r+0x86>
 8007102:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8007106:	4e7e      	ldr	r6, [pc, #504]	; (8007300 <_malloc_r+0x22c>)
 8007108:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 800710c:	68d3      	ldr	r3, [r2, #12]
 800710e:	4293      	cmp	r3, r2
 8007110:	f000 822b 	beq.w	800756a <_malloc_r+0x496>
 8007114:	685c      	ldr	r4, [r3, #4]
 8007116:	f103 0708 	add.w	r7, r3, #8
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	4628      	mov	r0, r5
 800711e:	f024 0403 	bic.w	r4, r4, #3
 8007122:	6899      	ldr	r1, [r3, #8]
 8007124:	191b      	adds	r3, r3, r4
 8007126:	685c      	ldr	r4, [r3, #4]
 8007128:	60ca      	str	r2, [r1, #12]
 800712a:	f044 0401 	orr.w	r4, r4, #1
 800712e:	6091      	str	r1, [r2, #8]
 8007130:	605c      	str	r4, [r3, #4]
 8007132:	f01d f9bd 	bl	80244b0 <__malloc_unlock>
 8007136:	4638      	mov	r0, r7
 8007138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713c:	2300      	movs	r3, #0
 800713e:	2410      	movs	r4, #16
 8007140:	428c      	cmp	r4, r1
 8007142:	bf2c      	ite	cs
 8007144:	4619      	movcs	r1, r3
 8007146:	f043 0101 	orrcc.w	r1, r3, #1
 800714a:	2900      	cmp	r1, #0
 800714c:	d0d3      	beq.n	80070f6 <_malloc_r+0x22>
 800714e:	2700      	movs	r7, #0
 8007150:	230c      	movs	r3, #12
 8007152:	4638      	mov	r0, r7
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715a:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 800715e:	bf04      	itt	eq
 8007160:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 8007164:	ea4f 01cc 	moveq.w	r1, ip, lsl #3
 8007168:	f040 8083 	bne.w	8007272 <_malloc_r+0x19e>
 800716c:	4e64      	ldr	r6, [pc, #400]	; (8007300 <_malloc_r+0x22c>)
 800716e:	1871      	adds	r1, r6, r1
 8007170:	68cf      	ldr	r7, [r1, #12]
 8007172:	42b9      	cmp	r1, r7
 8007174:	d106      	bne.n	8007184 <_malloc_r+0xb0>
 8007176:	e00d      	b.n	8007194 <_malloc_r+0xc0>
 8007178:	2a00      	cmp	r2, #0
 800717a:	f280 816c 	bge.w	8007456 <_malloc_r+0x382>
 800717e:	68ff      	ldr	r7, [r7, #12]
 8007180:	42b9      	cmp	r1, r7
 8007182:	d007      	beq.n	8007194 <_malloc_r+0xc0>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f023 0303 	bic.w	r3, r3, #3
 800718a:	1b1a      	subs	r2, r3, r4
 800718c:	2a0f      	cmp	r2, #15
 800718e:	ddf3      	ble.n	8007178 <_malloc_r+0xa4>
 8007190:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007194:	f10c 0c01 	add.w	ip, ip, #1
 8007198:	4859      	ldr	r0, [pc, #356]	; (8007300 <_malloc_r+0x22c>)
 800719a:	6937      	ldr	r7, [r6, #16]
 800719c:	f100 0308 	add.w	r3, r0, #8
 80071a0:	429f      	cmp	r7, r3
 80071a2:	bf08      	it	eq
 80071a4:	6841      	ldreq	r1, [r0, #4]
 80071a6:	d024      	beq.n	80071f2 <_malloc_r+0x11e>
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	f021 0103 	bic.w	r1, r1, #3
 80071ae:	1b0a      	subs	r2, r1, r4
 80071b0:	2a0f      	cmp	r2, #15
 80071b2:	f300 81aa 	bgt.w	800750a <_malloc_r+0x436>
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	6143      	str	r3, [r0, #20]
 80071ba:	6103      	str	r3, [r0, #16]
 80071bc:	f280 8093 	bge.w	80072e6 <_malloc_r+0x212>
 80071c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80071c4:	f080 8166 	bcs.w	8007494 <_malloc_r+0x3c0>
 80071c8:	08c9      	lsrs	r1, r1, #3
 80071ca:	f04f 0e01 	mov.w	lr, #1
 80071ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80071d2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80071d6:	1089      	asrs	r1, r1, #2
 80071d8:	fa0e f101 	lsl.w	r1, lr, r1
 80071dc:	60fa      	str	r2, [r7, #12]
 80071de:	f8d2 e008 	ldr.w	lr, [r2, #8]
 80071e2:	ea41 0108 	orr.w	r1, r1, r8
 80071e6:	6041      	str	r1, [r0, #4]
 80071e8:	f8c7 e008 	str.w	lr, [r7, #8]
 80071ec:	f8ce 700c 	str.w	r7, [lr, #12]
 80071f0:	6097      	str	r7, [r2, #8]
 80071f2:	2701      	movs	r7, #1
 80071f4:	ea4f 02ac 	mov.w	r2, ip, asr #2
 80071f8:	4097      	lsls	r7, r2
 80071fa:	428f      	cmp	r7, r1
 80071fc:	f200 8082 	bhi.w	8007304 <_malloc_r+0x230>
 8007200:	4239      	tst	r1, r7
 8007202:	d106      	bne.n	8007212 <_malloc_r+0x13e>
 8007204:	f02c 0c03 	bic.w	ip, ip, #3
 8007208:	007f      	lsls	r7, r7, #1
 800720a:	f10c 0c04 	add.w	ip, ip, #4
 800720e:	4239      	tst	r1, r7
 8007210:	d0fa      	beq.n	8007208 <_malloc_r+0x134>
 8007212:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 8007216:	46e0      	mov	r8, ip
 8007218:	46ce      	mov	lr, r9
 800721a:	f8de 200c 	ldr.w	r2, [lr, #12]
 800721e:	4596      	cmp	lr, r2
 8007220:	d107      	bne.n	8007232 <_malloc_r+0x15e>
 8007222:	e183      	b.n	800752c <_malloc_r+0x458>
 8007224:	2900      	cmp	r1, #0
 8007226:	f280 81aa 	bge.w	800757e <_malloc_r+0x4aa>
 800722a:	68d2      	ldr	r2, [r2, #12]
 800722c:	4596      	cmp	lr, r2
 800722e:	f000 817d 	beq.w	800752c <_malloc_r+0x458>
 8007232:	6850      	ldr	r0, [r2, #4]
 8007234:	f020 0003 	bic.w	r0, r0, #3
 8007238:	1b01      	subs	r1, r0, r4
 800723a:	290f      	cmp	r1, #15
 800723c:	ddf2      	ble.n	8007224 <_malloc_r+0x150>
 800723e:	4617      	mov	r7, r2
 8007240:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8007244:	1910      	adds	r0, r2, r4
 8007246:	f041 0801 	orr.w	r8, r1, #1
 800724a:	f857 cf08 	ldr.w	ip, [r7, #8]!
 800724e:	f044 0401 	orr.w	r4, r4, #1
 8007252:	5041      	str	r1, [r0, r1]
 8007254:	6054      	str	r4, [r2, #4]
 8007256:	f8cc e00c 	str.w	lr, [ip, #12]
 800725a:	f8ce c008 	str.w	ip, [lr, #8]
 800725e:	6170      	str	r0, [r6, #20]
 8007260:	6130      	str	r0, [r6, #16]
 8007262:	60c3      	str	r3, [r0, #12]
 8007264:	6083      	str	r3, [r0, #8]
 8007266:	f8c0 8004 	str.w	r8, [r0, #4]
 800726a:	4628      	mov	r0, r5
 800726c:	f01d f920 	bl	80244b0 <__malloc_unlock>
 8007270:	e761      	b.n	8007136 <_malloc_r+0x62>
 8007272:	f1bc 0f04 	cmp.w	ip, #4
 8007276:	bf9e      	ittt	ls
 8007278:	ea4f 1c94 	movls.w	ip, r4, lsr #6
 800727c:	f10c 0c38 	addls.w	ip, ip, #56	; 0x38
 8007280:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 8007284:	f67f af72 	bls.w	800716c <_malloc_r+0x98>
 8007288:	f1bc 0f14 	cmp.w	ip, #20
 800728c:	bf9c      	itt	ls
 800728e:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8007292:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 8007296:	f67f af69 	bls.w	800716c <_malloc_r+0x98>
 800729a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800729e:	bf9e      	ittt	ls
 80072a0:	ea4f 3c14 	movls.w	ip, r4, lsr #12
 80072a4:	f10c 0c6e 	addls.w	ip, ip, #110	; 0x6e
 80072a8:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80072ac:	f67f af5e 	bls.w	800716c <_malloc_r+0x98>
 80072b0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80072b4:	bf9e      	ittt	ls
 80072b6:	ea4f 3cd4 	movls.w	ip, r4, lsr #15
 80072ba:	f10c 0c77 	addls.w	ip, ip, #119	; 0x77
 80072be:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80072c2:	f67f af53 	bls.w	800716c <_malloc_r+0x98>
 80072c6:	f240 5354 	movw	r3, #1364	; 0x554
 80072ca:	459c      	cmp	ip, r3
 80072cc:	bf95      	itete	ls
 80072ce:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 80072d2:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 80072d6:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 80072da:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 80072de:	bf98      	it	ls
 80072e0:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80072e4:	e742      	b.n	800716c <_malloc_r+0x98>
 80072e6:	187b      	adds	r3, r7, r1
 80072e8:	4628      	mov	r0, r5
 80072ea:	3708      	adds	r7, #8
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	605a      	str	r2, [r3, #4]
 80072f4:	f01d f8dc 	bl	80244b0 <__malloc_unlock>
 80072f8:	4638      	mov	r0, r7
 80072fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fe:	bf00      	nop
 8007300:	20000438 	.word	0x20000438
 8007304:	68b7      	ldr	r7, [r6, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f023 0803 	bic.w	r8, r3, #3
 800730c:	4544      	cmp	r4, r8
 800730e:	ebc4 0208 	rsb	r2, r4, r8
 8007312:	bf94      	ite	ls
 8007314:	2300      	movls	r3, #0
 8007316:	2301      	movhi	r3, #1
 8007318:	2a0f      	cmp	r2, #15
 800731a:	bfd8      	it	le
 800731c:	f043 0301 	orrle.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80a8 	beq.w	8007476 <_malloc_r+0x3a2>
 8007326:	4bb4      	ldr	r3, [pc, #720]	; (80075f8 <_malloc_r+0x524>)
 8007328:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80075fc <_malloc_r+0x528>
 800732c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007330:	f8da 3000 	ldr.w	r3, [sl]
 8007334:	3201      	adds	r2, #1
 8007336:	4423      	add	r3, r4
 8007338:	bf08      	it	eq
 800733a:	f103 0b10 	addeq.w	fp, r3, #16
 800733e:	d006      	beq.n	800734e <_malloc_r+0x27a>
 8007340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007344:	330f      	adds	r3, #15
 8007346:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 800734a:	f023 0b1f 	bic.w	fp, r3, #31
 800734e:	4628      	mov	r0, r5
 8007350:	4659      	mov	r1, fp
 8007352:	f01d f839 	bl	80243c8 <_sbrk_r>
 8007356:	f1b0 3fff 	cmp.w	r0, #4294967295
 800735a:	4681      	mov	r9, r0
 800735c:	f000 813b 	beq.w	80075d6 <_malloc_r+0x502>
 8007360:	eb07 0208 	add.w	r2, r7, r8
 8007364:	4282      	cmp	r2, r0
 8007366:	f200 8119 	bhi.w	800759c <_malloc_r+0x4c8>
 800736a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800736e:	454a      	cmp	r2, r9
 8007370:	445b      	add	r3, fp
 8007372:	f8ca 3004 	str.w	r3, [sl, #4]
 8007376:	f000 8133 	beq.w	80075e0 <_malloc_r+0x50c>
 800737a:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 800737e:	4628      	mov	r0, r5
 8007380:	3101      	adds	r1, #1
 8007382:	bf17      	itett	ne
 8007384:	ebc2 0209 	rsbne	r2, r2, r9
 8007388:	4b9b      	ldreq	r3, [pc, #620]	; (80075f8 <_malloc_r+0x524>)
 800738a:	189b      	addne	r3, r3, r2
 800738c:	f8ca 3004 	strne.w	r3, [sl, #4]
 8007390:	bf08      	it	eq
 8007392:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 8007396:	f019 0307 	ands.w	r3, r9, #7
 800739a:	bf1f      	itttt	ne
 800739c:	f1c3 0208 	rsbne	r2, r3, #8
 80073a0:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 80073a4:	4491      	addne	r9, r2
 80073a6:	f103 0208 	addne.w	r2, r3, #8
 80073aa:	eb09 030b 	add.w	r3, r9, fp
 80073ae:	bf08      	it	eq
 80073b0:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 80073b4:	051b      	lsls	r3, r3, #20
 80073b6:	0d1b      	lsrs	r3, r3, #20
 80073b8:	ebc3 0b02 	rsb	fp, r3, r2
 80073bc:	4659      	mov	r1, fp
 80073be:	f01d f803 	bl	80243c8 <_sbrk_r>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	f000 8124 	beq.w	8007610 <_malloc_r+0x53c>
 80073c8:	ebc9 0200 	rsb	r2, r9, r0
 80073cc:	445a      	add	r2, fp
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80073d6:	42b7      	cmp	r7, r6
 80073d8:	f8c6 9008 	str.w	r9, [r6, #8]
 80073dc:	445b      	add	r3, fp
 80073de:	f8c9 2004 	str.w	r2, [r9, #4]
 80073e2:	f8ca 3004 	str.w	r3, [sl, #4]
 80073e6:	d016      	beq.n	8007416 <_malloc_r+0x342>
 80073e8:	f1b8 0f0f 	cmp.w	r8, #15
 80073ec:	f240 80ed 	bls.w	80075ca <_malloc_r+0x4f6>
 80073f0:	f1a8 020c 	sub.w	r2, r8, #12
 80073f4:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80073f8:	f022 0207 	bic.w	r2, r2, #7
 80073fc:	2005      	movs	r0, #5
 80073fe:	18b9      	adds	r1, r7, r2
 8007400:	2a0f      	cmp	r2, #15
 8007402:	f00e 0e01 	and.w	lr, lr, #1
 8007406:	ea42 0e0e 	orr.w	lr, r2, lr
 800740a:	f8c7 e004 	str.w	lr, [r7, #4]
 800740e:	6048      	str	r0, [r1, #4]
 8007410:	6088      	str	r0, [r1, #8]
 8007412:	f200 80f5 	bhi.w	8007600 <_malloc_r+0x52c>
 8007416:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800741a:	68b7      	ldr	r7, [r6, #8]
 800741c:	4293      	cmp	r3, r2
 800741e:	bf84      	itt	hi
 8007420:	4a76      	ldrhi	r2, [pc, #472]	; (80075fc <_malloc_r+0x528>)
 8007422:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8007424:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8007428:	4293      	cmp	r3, r2
 800742a:	bf84      	itt	hi
 800742c:	4a73      	ldrhi	r2, [pc, #460]	; (80075fc <_malloc_r+0x528>)
 800742e:	6313      	strhi	r3, [r2, #48]	; 0x30
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f023 0303 	bic.w	r3, r3, #3
 8007436:	429c      	cmp	r4, r3
 8007438:	ebc4 0203 	rsb	r2, r4, r3
 800743c:	bf94      	ite	ls
 800743e:	2300      	movls	r3, #0
 8007440:	2301      	movhi	r3, #1
 8007442:	2a0f      	cmp	r2, #15
 8007444:	bfd8      	it	le
 8007446:	f043 0301 	orrle.w	r3, r3, #1
 800744a:	b1a3      	cbz	r3, 8007476 <_malloc_r+0x3a2>
 800744c:	4628      	mov	r0, r5
 800744e:	2700      	movs	r7, #0
 8007450:	f01d f82e 	bl	80244b0 <__malloc_unlock>
 8007454:	e66f      	b.n	8007136 <_malloc_r+0x62>
 8007456:	18fb      	adds	r3, r7, r3
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	4628      	mov	r0, r5
 800745e:	685c      	ldr	r4, [r3, #4]
 8007460:	3708      	adds	r7, #8
 8007462:	60ca      	str	r2, [r1, #12]
 8007464:	f044 0401 	orr.w	r4, r4, #1
 8007468:	6091      	str	r1, [r2, #8]
 800746a:	605c      	str	r4, [r3, #4]
 800746c:	f01d f820 	bl	80244b0 <__malloc_unlock>
 8007470:	4638      	mov	r0, r7
 8007472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007476:	193b      	adds	r3, r7, r4
 8007478:	f042 0201 	orr.w	r2, r2, #1
 800747c:	4628      	mov	r0, r5
 800747e:	f044 0401 	orr.w	r4, r4, #1
 8007482:	60b3      	str	r3, [r6, #8]
 8007484:	607c      	str	r4, [r7, #4]
 8007486:	3708      	adds	r7, #8
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	f01d f811 	bl	80244b0 <__malloc_unlock>
 800748e:	4638      	mov	r0, r7
 8007490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007494:	0988      	lsrs	r0, r1, #6
 8007496:	0a4a      	lsrs	r2, r1, #9
 8007498:	3038      	adds	r0, #56	; 0x38
 800749a:	2a04      	cmp	r2, #4
 800749c:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80074a0:	d91c      	bls.n	80074dc <_malloc_r+0x408>
 80074a2:	2a14      	cmp	r2, #20
 80074a4:	bf9c      	itt	ls
 80074a6:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 80074aa:	ea4f 0ec0 	movls.w	lr, r0, lsl #3
 80074ae:	d915      	bls.n	80074dc <_malloc_r+0x408>
 80074b0:	0b08      	lsrs	r0, r1, #12
 80074b2:	306e      	adds	r0, #110	; 0x6e
 80074b4:	2a54      	cmp	r2, #84	; 0x54
 80074b6:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80074ba:	d90f      	bls.n	80074dc <_malloc_r+0x408>
 80074bc:	0bc8      	lsrs	r0, r1, #15
 80074be:	3077      	adds	r0, #119	; 0x77
 80074c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80074c4:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80074c8:	d908      	bls.n	80074dc <_malloc_r+0x408>
 80074ca:	f240 5054 	movw	r0, #1364	; 0x554
 80074ce:	4282      	cmp	r2, r0
 80074d0:	f200 80a7 	bhi.w	8007622 <_malloc_r+0x54e>
 80074d4:	0c88      	lsrs	r0, r1, #18
 80074d6:	307c      	adds	r0, #124	; 0x7c
 80074d8:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80074dc:	44b6      	add	lr, r6
 80074de:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80075f8 <_malloc_r+0x524>
 80074e2:	f8de 2008 	ldr.w	r2, [lr, #8]
 80074e6:	4572      	cmp	r2, lr
 80074e8:	d103      	bne.n	80074f2 <_malloc_r+0x41e>
 80074ea:	e060      	b.n	80075ae <_malloc_r+0x4da>
 80074ec:	6892      	ldr	r2, [r2, #8]
 80074ee:	4596      	cmp	lr, r2
 80074f0:	d004      	beq.n	80074fc <_malloc_r+0x428>
 80074f2:	6850      	ldr	r0, [r2, #4]
 80074f4:	f020 0003 	bic.w	r0, r0, #3
 80074f8:	4281      	cmp	r1, r0
 80074fa:	d3f7      	bcc.n	80074ec <_malloc_r+0x418>
 80074fc:	68d0      	ldr	r0, [r2, #12]
 80074fe:	6871      	ldr	r1, [r6, #4]
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60ba      	str	r2, [r7, #8]
 8007504:	60d7      	str	r7, [r2, #12]
 8007506:	6087      	str	r7, [r0, #8]
 8007508:	e673      	b.n	80071f2 <_malloc_r+0x11e>
 800750a:	1939      	adds	r1, r7, r4
 800750c:	f042 0601 	orr.w	r6, r2, #1
 8007510:	6141      	str	r1, [r0, #20]
 8007512:	f044 0401 	orr.w	r4, r4, #1
 8007516:	6101      	str	r1, [r0, #16]
 8007518:	4628      	mov	r0, r5
 800751a:	607c      	str	r4, [r7, #4]
 800751c:	3708      	adds	r7, #8
 800751e:	60cb      	str	r3, [r1, #12]
 8007520:	608b      	str	r3, [r1, #8]
 8007522:	604e      	str	r6, [r1, #4]
 8007524:	508a      	str	r2, [r1, r2]
 8007526:	f01c ffc3 	bl	80244b0 <__malloc_unlock>
 800752a:	e604      	b.n	8007136 <_malloc_r+0x62>
 800752c:	f108 0801 	add.w	r8, r8, #1
 8007530:	f10e 0e08 	add.w	lr, lr, #8
 8007534:	f018 0f03 	tst.w	r8, #3
 8007538:	f47f ae6f 	bne.w	800721a <_malloc_r+0x146>
 800753c:	464a      	mov	r2, r9
 800753e:	f01c 0f03 	tst.w	ip, #3
 8007542:	f1a2 0108 	sub.w	r1, r2, #8
 8007546:	f10c 3cff 	add.w	ip, ip, #4294967295
 800754a:	d065      	beq.n	8007618 <_malloc_r+0x544>
 800754c:	6812      	ldr	r2, [r2, #0]
 800754e:	428a      	cmp	r2, r1
 8007550:	d0f5      	beq.n	800753e <_malloc_r+0x46a>
 8007552:	6872      	ldr	r2, [r6, #4]
 8007554:	007f      	lsls	r7, r7, #1
 8007556:	4297      	cmp	r7, r2
 8007558:	f63f aed4 	bhi.w	8007304 <_malloc_r+0x230>
 800755c:	2f00      	cmp	r7, #0
 800755e:	f43f aed1 	beq.w	8007304 <_malloc_r+0x230>
 8007562:	4217      	tst	r7, r2
 8007564:	d061      	beq.n	800762a <_malloc_r+0x556>
 8007566:	46c4      	mov	ip, r8
 8007568:	e653      	b.n	8007212 <_malloc_r+0x13e>
 800756a:	f103 0208 	add.w	r2, r3, #8
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	429a      	cmp	r2, r3
 8007572:	bf08      	it	eq
 8007574:	f10c 0c02 	addeq.w	ip, ip, #2
 8007578:	f43f ae0e 	beq.w	8007198 <_malloc_r+0xc4>
 800757c:	e5ca      	b.n	8007114 <_malloc_r+0x40>
 800757e:	4617      	mov	r7, r2
 8007580:	1810      	adds	r0, r2, r0
 8007582:	68d3      	ldr	r3, [r2, #12]
 8007584:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8007588:	6841      	ldr	r1, [r0, #4]
 800758a:	60d3      	str	r3, [r2, #12]
 800758c:	f041 0101 	orr.w	r1, r1, #1
 8007590:	609a      	str	r2, [r3, #8]
 8007592:	6041      	str	r1, [r0, #4]
 8007594:	4628      	mov	r0, r5
 8007596:	f01c ff8b 	bl	80244b0 <__malloc_unlock>
 800759a:	e5cc      	b.n	8007136 <_malloc_r+0x62>
 800759c:	42b7      	cmp	r7, r6
 800759e:	f43f aee4 	beq.w	800736a <_malloc_r+0x296>
 80075a2:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <_malloc_r+0x524>)
 80075a4:	689f      	ldr	r7, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f023 0303 	bic.w	r3, r3, #3
 80075ac:	e743      	b.n	8007436 <_malloc_r+0x362>
 80075ae:	f04f 0901 	mov.w	r9, #1
 80075b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075b6:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80075ba:	4610      	mov	r0, r2
 80075bc:	fa09 fe0e 	lsl.w	lr, r9, lr
 80075c0:	ea4e 0101 	orr.w	r1, lr, r1
 80075c4:	f8c8 1004 	str.w	r1, [r8, #4]
 80075c8:	e79a      	b.n	8007500 <_malloc_r+0x42c>
 80075ca:	2301      	movs	r3, #1
 80075cc:	464f      	mov	r7, r9
 80075ce:	f8c9 3004 	str.w	r3, [r9, #4]
 80075d2:	2300      	movs	r3, #0
 80075d4:	e72f      	b.n	8007436 <_malloc_r+0x362>
 80075d6:	68b7      	ldr	r7, [r6, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	e72a      	b.n	8007436 <_malloc_r+0x362>
 80075e0:	0511      	lsls	r1, r2, #20
 80075e2:	0d09      	lsrs	r1, r1, #20
 80075e4:	2900      	cmp	r1, #0
 80075e6:	f47f aec8 	bne.w	800737a <_malloc_r+0x2a6>
 80075ea:	68b2      	ldr	r2, [r6, #8]
 80075ec:	eb0b 0108 	add.w	r1, fp, r8
 80075f0:	f041 0101 	orr.w	r1, r1, #1
 80075f4:	6051      	str	r1, [r2, #4]
 80075f6:	e70e      	b.n	8007416 <_malloc_r+0x342>
 80075f8:	20000438 	.word	0x20000438
 80075fc:	2000096c 	.word	0x2000096c
 8007600:	f107 0108 	add.w	r1, r7, #8
 8007604:	4628      	mov	r0, r5
 8007606:	f004 fa85 	bl	800bb14 <_free_r>
 800760a:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <_malloc_r+0x560>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	e702      	b.n	8007416 <_malloc_r+0x342>
 8007610:	2201      	movs	r2, #1
 8007612:	f04f 0b00 	mov.w	fp, #0
 8007616:	e6dc      	b.n	80073d2 <_malloc_r+0x2fe>
 8007618:	6872      	ldr	r2, [r6, #4]
 800761a:	ea22 0207 	bic.w	r2, r2, r7
 800761e:	6072      	str	r2, [r6, #4]
 8007620:	e798      	b.n	8007554 <_malloc_r+0x480>
 8007622:	f44f 7e7c 	mov.w	lr, #1008	; 0x3f0
 8007626:	207e      	movs	r0, #126	; 0x7e
 8007628:	e758      	b.n	80074dc <_malloc_r+0x408>
 800762a:	007f      	lsls	r7, r7, #1
 800762c:	f108 0804 	add.w	r8, r8, #4
 8007630:	e797      	b.n	8007562 <_malloc_r+0x48e>
 8007632:	bf00      	nop
 8007634:	2000096c 	.word	0x2000096c

08007638 <memchr>:
 8007638:	0783      	lsls	r3, r0, #30
 800763a:	b2c9      	uxtb	r1, r1
 800763c:	b470      	push	{r4, r5, r6}
 800763e:	d012      	beq.n	8007666 <memchr+0x2e>
 8007640:	2a00      	cmp	r2, #0
 8007642:	d039      	beq.n	80076b8 <memchr+0x80>
 8007644:	7803      	ldrb	r3, [r0, #0]
 8007646:	428b      	cmp	r3, r1
 8007648:	d025      	beq.n	8007696 <memchr+0x5e>
 800764a:	4603      	mov	r3, r0
 800764c:	3a01      	subs	r2, #1
 800764e:	e006      	b.n	800765e <memchr+0x26>
 8007650:	2a00      	cmp	r2, #0
 8007652:	d031      	beq.n	80076b8 <memchr+0x80>
 8007654:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007658:	3a01      	subs	r2, #1
 800765a:	428c      	cmp	r4, r1
 800765c:	d01b      	beq.n	8007696 <memchr+0x5e>
 800765e:	3001      	adds	r0, #1
 8007660:	f010 0f03 	tst.w	r0, #3
 8007664:	d1f4      	bne.n	8007650 <memchr+0x18>
 8007666:	2a03      	cmp	r2, #3
 8007668:	bf84      	itt	hi
 800766a:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 800766e:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8007672:	d812      	bhi.n	800769a <memchr+0x62>
 8007674:	2a00      	cmp	r2, #0
 8007676:	d01f      	beq.n	80076b8 <memchr+0x80>
 8007678:	7803      	ldrb	r3, [r0, #0]
 800767a:	428b      	cmp	r3, r1
 800767c:	d00b      	beq.n	8007696 <memchr+0x5e>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	1882      	adds	r2, r0, r2
 8007682:	e003      	b.n	800768c <memchr+0x54>
 8007684:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007688:	428c      	cmp	r4, r1
 800768a:	d004      	beq.n	8007696 <memchr+0x5e>
 800768c:	4293      	cmp	r3, r2
 800768e:	f100 0001 	add.w	r0, r0, #1
 8007692:	d1f7      	bne.n	8007684 <memchr+0x4c>
 8007694:	2000      	movs	r0, #0
 8007696:	bc70      	pop	{r4, r5, r6}
 8007698:	4770      	bx	lr
 800769a:	4604      	mov	r4, r0
 800769c:	3004      	adds	r0, #4
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	4073      	eors	r3, r6
 80076a2:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80076a6:	ea25 0303 	bic.w	r3, r5, r3
 80076aa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80076ae:	d105      	bne.n	80076bc <memchr+0x84>
 80076b0:	3a04      	subs	r2, #4
 80076b2:	2a03      	cmp	r2, #3
 80076b4:	d8f1      	bhi.n	800769a <memchr+0x62>
 80076b6:	e7dd      	b.n	8007674 <memchr+0x3c>
 80076b8:	4610      	mov	r0, r2
 80076ba:	e7ec      	b.n	8007696 <memchr+0x5e>
 80076bc:	4620      	mov	r0, r4
 80076be:	e7d9      	b.n	8007674 <memchr+0x3c>

080076c0 <memcmp>:
 80076c0:	2a03      	cmp	r2, #3
 80076c2:	b470      	push	{r4, r5, r6}
 80076c4:	d926      	bls.n	8007714 <memcmp+0x54>
 80076c6:	ea41 0500 	orr.w	r5, r1, r0
 80076ca:	4603      	mov	r3, r0
 80076cc:	07ad      	lsls	r5, r5, #30
 80076ce:	460c      	mov	r4, r1
 80076d0:	d013      	beq.n	80076fa <memcmp+0x3a>
 80076d2:	7805      	ldrb	r5, [r0, #0]
 80076d4:	3a01      	subs	r2, #1
 80076d6:	780c      	ldrb	r4, [r1, #0]
 80076d8:	2300      	movs	r3, #0
 80076da:	42a5      	cmp	r5, r4
 80076dc:	d004      	beq.n	80076e8 <memcmp+0x28>
 80076de:	e01d      	b.n	800771c <memcmp+0x5c>
 80076e0:	7865      	ldrb	r5, [r4, #1]
 80076e2:	5ccc      	ldrb	r4, [r1, r3]
 80076e4:	42a5      	cmp	r5, r4
 80076e6:	d119      	bne.n	800771c <memcmp+0x5c>
 80076e8:	429a      	cmp	r2, r3
 80076ea:	eb00 0403 	add.w	r4, r0, r3
 80076ee:	f103 0301 	add.w	r3, r3, #1
 80076f2:	d1f5      	bne.n	80076e0 <memcmp+0x20>
 80076f4:	2000      	movs	r0, #0
 80076f6:	bc70      	pop	{r4, r5, r6}
 80076f8:	4770      	bx	lr
 80076fa:	4621      	mov	r1, r4
 80076fc:	4618      	mov	r0, r3
 80076fe:	3404      	adds	r4, #4
 8007700:	3304      	adds	r3, #4
 8007702:	6806      	ldr	r6, [r0, #0]
 8007704:	680d      	ldr	r5, [r1, #0]
 8007706:	42ae      	cmp	r6, r5
 8007708:	d104      	bne.n	8007714 <memcmp+0x54>
 800770a:	3a04      	subs	r2, #4
 800770c:	2a03      	cmp	r2, #3
 800770e:	d8f4      	bhi.n	80076fa <memcmp+0x3a>
 8007710:	4621      	mov	r1, r4
 8007712:	4618      	mov	r0, r3
 8007714:	2a00      	cmp	r2, #0
 8007716:	d1dc      	bne.n	80076d2 <memcmp+0x12>
 8007718:	4610      	mov	r0, r2
 800771a:	e7ec      	b.n	80076f6 <memcmp+0x36>
 800771c:	1b28      	subs	r0, r5, r4
 800771e:	e7ea      	b.n	80076f6 <memcmp+0x36>

08007720 <memcpy>:
 8007720:	2a0f      	cmp	r2, #15
 8007722:	b4f0      	push	{r4, r5, r6, r7}
 8007724:	bf98      	it	ls
 8007726:	4603      	movls	r3, r0
 8007728:	d931      	bls.n	800778e <memcpy+0x6e>
 800772a:	ea41 0300 	orr.w	r3, r1, r0
 800772e:	079b      	lsls	r3, r3, #30
 8007730:	d136      	bne.n	80077a0 <memcpy+0x80>
 8007732:	460c      	mov	r4, r1
 8007734:	4603      	mov	r3, r0
 8007736:	4615      	mov	r5, r2
 8007738:	6826      	ldr	r6, [r4, #0]
 800773a:	3d10      	subs	r5, #16
 800773c:	601e      	str	r6, [r3, #0]
 800773e:	6866      	ldr	r6, [r4, #4]
 8007740:	605e      	str	r6, [r3, #4]
 8007742:	68a6      	ldr	r6, [r4, #8]
 8007744:	609e      	str	r6, [r3, #8]
 8007746:	68e6      	ldr	r6, [r4, #12]
 8007748:	3410      	adds	r4, #16
 800774a:	60de      	str	r6, [r3, #12]
 800774c:	3310      	adds	r3, #16
 800774e:	2d0f      	cmp	r5, #15
 8007750:	d8f2      	bhi.n	8007738 <memcpy+0x18>
 8007752:	f1a2 0410 	sub.w	r4, r2, #16
 8007756:	f002 020f 	and.w	r2, r2, #15
 800775a:	f024 040f 	bic.w	r4, r4, #15
 800775e:	3410      	adds	r4, #16
 8007760:	2a03      	cmp	r2, #3
 8007762:	eb00 0304 	add.w	r3, r0, r4
 8007766:	4421      	add	r1, r4
 8007768:	d911      	bls.n	800778e <memcpy+0x6e>
 800776a:	460e      	mov	r6, r1
 800776c:	461d      	mov	r5, r3
 800776e:	4614      	mov	r4, r2
 8007770:	f856 7b04 	ldr.w	r7, [r6], #4
 8007774:	3c04      	subs	r4, #4
 8007776:	2c03      	cmp	r4, #3
 8007778:	f845 7b04 	str.w	r7, [r5], #4
 800777c:	d8f8      	bhi.n	8007770 <memcpy+0x50>
 800777e:	1f14      	subs	r4, r2, #4
 8007780:	f002 0203 	and.w	r2, r2, #3
 8007784:	f024 0403 	bic.w	r4, r4, #3
 8007788:	3404      	adds	r4, #4
 800778a:	1909      	adds	r1, r1, r4
 800778c:	191b      	adds	r3, r3, r4
 800778e:	b12a      	cbz	r2, 800779c <memcpy+0x7c>
 8007790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007794:	3a01      	subs	r2, #1
 8007796:	f803 4b01 	strb.w	r4, [r3], #1
 800779a:	d1f9      	bne.n	8007790 <memcpy+0x70>
 800779c:	bcf0      	pop	{r4, r5, r6, r7}
 800779e:	4770      	bx	lr
 80077a0:	4603      	mov	r3, r0
 80077a2:	e7f5      	b.n	8007790 <memcpy+0x70>

080077a4 <memmove>:
 80077a4:	4288      	cmp	r0, r1
 80077a6:	b4f0      	push	{r4, r5, r6, r7}
 80077a8:	d912      	bls.n	80077d0 <memmove+0x2c>
 80077aa:	188d      	adds	r5, r1, r2
 80077ac:	42a8      	cmp	r0, r5
 80077ae:	d20f      	bcs.n	80077d0 <memmove+0x2c>
 80077b0:	b162      	cbz	r2, 80077cc <memmove+0x28>
 80077b2:	4613      	mov	r3, r2
 80077b4:	1882      	adds	r2, r0, r2
 80077b6:	4259      	negs	r1, r3
 80077b8:	186d      	adds	r5, r5, r1
 80077ba:	1852      	adds	r2, r2, r1
 80077bc:	18ec      	adds	r4, r5, r3
 80077be:	18d1      	adds	r1, r2, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80077c6:	f801 4c01 	strb.w	r4, [r1, #-1]
 80077ca:	d1f7      	bne.n	80077bc <memmove+0x18>
 80077cc:	bcf0      	pop	{r4, r5, r6, r7}
 80077ce:	4770      	bx	lr
 80077d0:	2a0f      	cmp	r2, #15
 80077d2:	bf98      	it	ls
 80077d4:	4603      	movls	r3, r0
 80077d6:	d931      	bls.n	800783c <memmove+0x98>
 80077d8:	ea41 0300 	orr.w	r3, r1, r0
 80077dc:	079b      	lsls	r3, r3, #30
 80077de:	d13c      	bne.n	800785a <memmove+0xb6>
 80077e0:	460c      	mov	r4, r1
 80077e2:	4603      	mov	r3, r0
 80077e4:	4615      	mov	r5, r2
 80077e6:	6826      	ldr	r6, [r4, #0]
 80077e8:	3d10      	subs	r5, #16
 80077ea:	601e      	str	r6, [r3, #0]
 80077ec:	6866      	ldr	r6, [r4, #4]
 80077ee:	605e      	str	r6, [r3, #4]
 80077f0:	68a6      	ldr	r6, [r4, #8]
 80077f2:	609e      	str	r6, [r3, #8]
 80077f4:	68e6      	ldr	r6, [r4, #12]
 80077f6:	3410      	adds	r4, #16
 80077f8:	60de      	str	r6, [r3, #12]
 80077fa:	3310      	adds	r3, #16
 80077fc:	2d0f      	cmp	r5, #15
 80077fe:	d8f2      	bhi.n	80077e6 <memmove+0x42>
 8007800:	f1a2 0410 	sub.w	r4, r2, #16
 8007804:	f002 020f 	and.w	r2, r2, #15
 8007808:	f024 040f 	bic.w	r4, r4, #15
 800780c:	3410      	adds	r4, #16
 800780e:	2a03      	cmp	r2, #3
 8007810:	eb00 0304 	add.w	r3, r0, r4
 8007814:	4421      	add	r1, r4
 8007816:	d911      	bls.n	800783c <memmove+0x98>
 8007818:	460e      	mov	r6, r1
 800781a:	461d      	mov	r5, r3
 800781c:	4614      	mov	r4, r2
 800781e:	f856 7b04 	ldr.w	r7, [r6], #4
 8007822:	3c04      	subs	r4, #4
 8007824:	2c03      	cmp	r4, #3
 8007826:	f845 7b04 	str.w	r7, [r5], #4
 800782a:	d8f8      	bhi.n	800781e <memmove+0x7a>
 800782c:	1f14      	subs	r4, r2, #4
 800782e:	f002 0203 	and.w	r2, r2, #3
 8007832:	f024 0403 	bic.w	r4, r4, #3
 8007836:	3404      	adds	r4, #4
 8007838:	1909      	adds	r1, r1, r4
 800783a:	191b      	adds	r3, r3, r4
 800783c:	2a00      	cmp	r2, #0
 800783e:	d0c5      	beq.n	80077cc <memmove+0x28>
 8007840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007844:	3a01      	subs	r2, #1
 8007846:	f803 4b01 	strb.w	r4, [r3], #1
 800784a:	d0bf      	beq.n	80077cc <memmove+0x28>
 800784c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007850:	3a01      	subs	r2, #1
 8007852:	f803 4b01 	strb.w	r4, [r3], #1
 8007856:	d1f3      	bne.n	8007840 <memmove+0x9c>
 8007858:	e7b8      	b.n	80077cc <memmove+0x28>
 800785a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785e:	4603      	mov	r3, r0
 8007860:	3a01      	subs	r2, #1
 8007862:	f803 4b01 	strb.w	r4, [r3], #1
 8007866:	d1f1      	bne.n	800784c <memmove+0xa8>
 8007868:	e7b0      	b.n	80077cc <memmove+0x28>
 800786a:	bf00      	nop

0800786c <memset>:
 800786c:	f010 0f03 	tst.w	r0, #3
 8007870:	4603      	mov	r3, r0
 8007872:	b470      	push	{r4, r5, r6}
 8007874:	d041      	beq.n	80078fa <memset+0x8e>
 8007876:	2a00      	cmp	r2, #0
 8007878:	d03d      	beq.n	80078f6 <memset+0x8a>
 800787a:	b2ce      	uxtb	r6, r1
 800787c:	e001      	b.n	8007882 <memset+0x16>
 800787e:	2a00      	cmp	r2, #0
 8007880:	d039      	beq.n	80078f6 <memset+0x8a>
 8007882:	f803 6b01 	strb.w	r6, [r3], #1
 8007886:	1e54      	subs	r4, r2, #1
 8007888:	f013 0f03 	tst.w	r3, #3
 800788c:	4622      	mov	r2, r4
 800788e:	461d      	mov	r5, r3
 8007890:	d1f5      	bne.n	800787e <memset+0x12>
 8007892:	2c03      	cmp	r4, #3
 8007894:	d929      	bls.n	80078ea <memset+0x7e>
 8007896:	b2ca      	uxtb	r2, r1
 8007898:	2c0f      	cmp	r4, #15
 800789a:	bf84      	itt	hi
 800789c:	462b      	movhi	r3, r5
 800789e:	4626      	movhi	r6, r4
 80078a0:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 80078a4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80078a8:	d911      	bls.n	80078ce <memset+0x62>
 80078aa:	3e10      	subs	r6, #16
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	605a      	str	r2, [r3, #4]
 80078b0:	609a      	str	r2, [r3, #8]
 80078b2:	60da      	str	r2, [r3, #12]
 80078b4:	3310      	adds	r3, #16
 80078b6:	2e0f      	cmp	r6, #15
 80078b8:	d8f7      	bhi.n	80078aa <memset+0x3e>
 80078ba:	f1a4 0310 	sub.w	r3, r4, #16
 80078be:	f004 040f 	and.w	r4, r4, #15
 80078c2:	f023 030f 	bic.w	r3, r3, #15
 80078c6:	3310      	adds	r3, #16
 80078c8:	2c03      	cmp	r4, #3
 80078ca:	441d      	add	r5, r3
 80078cc:	d90d      	bls.n	80078ea <memset+0x7e>
 80078ce:	462e      	mov	r6, r5
 80078d0:	4623      	mov	r3, r4
 80078d2:	3b04      	subs	r3, #4
 80078d4:	f846 2b04 	str.w	r2, [r6], #4
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d8fa      	bhi.n	80078d2 <memset+0x66>
 80078dc:	1f23      	subs	r3, r4, #4
 80078de:	f004 0403 	and.w	r4, r4, #3
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	3304      	adds	r3, #4
 80078e8:	18ed      	adds	r5, r5, r3
 80078ea:	b2c9      	uxtb	r1, r1
 80078ec:	b11c      	cbz	r4, 80078f6 <memset+0x8a>
 80078ee:	3c01      	subs	r4, #1
 80078f0:	f805 1b01 	strb.w	r1, [r5], #1
 80078f4:	d1fb      	bne.n	80078ee <memset+0x82>
 80078f6:	bc70      	pop	{r4, r5, r6}
 80078f8:	4770      	bx	lr
 80078fa:	4605      	mov	r5, r0
 80078fc:	4614      	mov	r4, r2
 80078fe:	e7c8      	b.n	8007892 <memset+0x26>

08007900 <_putc_r>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	4604      	mov	r4, r0
 8007904:	460e      	mov	r6, r1
 8007906:	4615      	mov	r5, r2
 8007908:	b108      	cbz	r0, 800790e <_putc_r+0xe>
 800790a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800790c:	b1c3      	cbz	r3, 8007940 <_putc_r+0x40>
 800790e:	68ab      	ldr	r3, [r5, #8]
 8007910:	3b01      	subs	r3, #1
 8007912:	60ab      	str	r3, [r5, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	db06      	blt.n	8007926 <_putc_r+0x26>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	701e      	strb	r6, [r3, #0]
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007922:	602b      	str	r3, [r5, #0]
 8007924:	bd70      	pop	{r4, r5, r6, pc}
 8007926:	69aa      	ldr	r2, [r5, #24]
 8007928:	4293      	cmp	r3, r2
 800792a:	db0c      	blt.n	8007946 <_putc_r+0x46>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	701e      	strb	r6, [r3, #0]
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	7819      	ldrb	r1, [r3, #0]
 8007934:	290a      	cmp	r1, #10
 8007936:	d00d      	beq.n	8007954 <_putc_r+0x54>
 8007938:	3301      	adds	r3, #1
 800793a:	4608      	mov	r0, r1
 800793c:	602b      	str	r3, [r5, #0]
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	f003 ff84 	bl	800b84c <__sinit>
 8007944:	e7e3      	b.n	800790e <_putc_r+0xe>
 8007946:	4620      	mov	r0, r4
 8007948:	4631      	mov	r1, r6
 800794a:	462a      	mov	r2, r5
 800794c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007950:	f002 bcb4 	b.w	800a2bc <__swbuf_r>
 8007954:	4620      	mov	r0, r4
 8007956:	462a      	mov	r2, r5
 8007958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800795c:	f002 bcae 	b.w	800a2bc <__swbuf_r>

08007960 <putc>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	4606      	mov	r6, r0
 8007964:	4d17      	ldr	r5, [pc, #92]	; (80079c4 <putc+0x64>)
 8007966:	460c      	mov	r4, r1
 8007968:	6828      	ldr	r0, [r5, #0]
 800796a:	b108      	cbz	r0, 8007970 <putc+0x10>
 800796c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800796e:	b1c3      	cbz	r3, 80079a2 <putc+0x42>
 8007970:	68a3      	ldr	r3, [r4, #8]
 8007972:	3b01      	subs	r3, #1
 8007974:	60a3      	str	r3, [r4, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	db06      	blt.n	8007988 <putc+0x28>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	701e      	strb	r6, [r3, #0]
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	bd70      	pop	{r4, r5, r6, pc}
 8007988:	69a2      	ldr	r2, [r4, #24]
 800798a:	4293      	cmp	r3, r2
 800798c:	db0c      	blt.n	80079a8 <putc+0x48>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	701e      	strb	r6, [r3, #0]
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	7819      	ldrb	r1, [r3, #0]
 8007996:	290a      	cmp	r1, #10
 8007998:	d00d      	beq.n	80079b6 <putc+0x56>
 800799a:	3301      	adds	r3, #1
 800799c:	4608      	mov	r0, r1
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
 80079a2:	f003 ff53 	bl	800b84c <__sinit>
 80079a6:	e7e3      	b.n	8007970 <putc+0x10>
 80079a8:	6828      	ldr	r0, [r5, #0]
 80079aa:	4631      	mov	r1, r6
 80079ac:	4622      	mov	r2, r4
 80079ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80079b2:	f002 bc83 	b.w	800a2bc <__swbuf_r>
 80079b6:	6828      	ldr	r0, [r5, #0]
 80079b8:	4622      	mov	r2, r4
 80079ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80079be:	f002 bc7d 	b.w	800a2bc <__swbuf_r>
 80079c2:	bf00      	nop
 80079c4:	20000008 	.word	0x20000008

080079c8 <realloc>:
 80079c8:	f240 0308 	movw	r3, #8
 80079cc:	460a      	mov	r2, r1
 80079ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80079d2:	4601      	mov	r1, r0
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	f000 b801 	b.w	80079dc <_realloc_r>
 80079da:	bf00      	nop

080079dc <_realloc_r>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	460c      	mov	r4, r1
 80079e2:	b083      	sub	sp, #12
 80079e4:	4606      	mov	r6, r0
 80079e6:	2900      	cmp	r1, #0
 80079e8:	f000 8135 	beq.w	8007c56 <_realloc_r+0x27a>
 80079ec:	9201      	str	r2, [sp, #4]
 80079ee:	f01c fd55 	bl	802449c <__malloc_lock>
 80079f2:	9a01      	ldr	r2, [sp, #4]
 80079f4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80079f8:	f102 050b 	add.w	r5, r2, #11
 80079fc:	2d16      	cmp	r5, #22
 80079fe:	f200 809d 	bhi.w	8007b3c <_realloc_r+0x160>
 8007a02:	2110      	movs	r1, #16
 8007a04:	2700      	movs	r7, #0
 8007a06:	460d      	mov	r5, r1
 8007a08:	4295      	cmp	r5, r2
 8007a0a:	bf38      	it	cc
 8007a0c:	f047 0701 	orrcc.w	r7, r7, #1
 8007a10:	2f00      	cmp	r7, #0
 8007a12:	f040 8126 	bne.w	8007c62 <_realloc_r+0x286>
 8007a16:	f020 0903 	bic.w	r9, r0, #3
 8007a1a:	f1a4 0a08 	sub.w	sl, r4, #8
 8007a1e:	4589      	cmp	r9, r1
 8007a20:	bfa8      	it	ge
 8007a22:	464f      	movge	r7, r9
 8007a24:	da74      	bge.n	8007b10 <_realloc_r+0x134>
 8007a26:	4ba1      	ldr	r3, [pc, #644]	; (8007cac <_realloc_r+0x2d0>)
 8007a28:	eb0a 0e09 	add.w	lr, sl, r9
 8007a2c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8007a30:	45f3      	cmp	fp, lr
 8007a32:	f000 811a 	beq.w	8007c6a <_realloc_r+0x28e>
 8007a36:	f8de c004 	ldr.w	ip, [lr, #4]
 8007a3a:	f02c 0801 	bic.w	r8, ip, #1
 8007a3e:	44f0      	add	r8, lr
 8007a40:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8007a44:	f018 0f01 	tst.w	r8, #1
 8007a48:	bf1c      	itt	ne
 8007a4a:	46bc      	movne	ip, r7
 8007a4c:	46e6      	movne	lr, ip
 8007a4e:	d07a      	beq.n	8007b46 <_realloc_r+0x16a>
 8007a50:	07c0      	lsls	r0, r0, #31
 8007a52:	f100 809a 	bmi.w	8007b8a <_realloc_r+0x1ae>
 8007a56:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8007a5a:	ebc0 080a 	rsb	r8, r0, sl
 8007a5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a62:	f020 0003 	bic.w	r0, r0, #3
 8007a66:	f1be 0f00 	cmp.w	lr, #0
 8007a6a:	f000 80b6 	beq.w	8007bda <_realloc_r+0x1fe>
 8007a6e:	45de      	cmp	lr, fp
 8007a70:	eb00 0b09 	add.w	fp, r0, r9
 8007a74:	f000 814d 	beq.w	8007d12 <_realloc_r+0x336>
 8007a78:	eb0c 070b 	add.w	r7, ip, fp
 8007a7c:	42b9      	cmp	r1, r7
 8007a7e:	f300 80ae 	bgt.w	8007bde <_realloc_r+0x202>
 8007a82:	f8de 100c 	ldr.w	r1, [lr, #12]
 8007a86:	4643      	mov	r3, r8
 8007a88:	f8de 0008 	ldr.w	r0, [lr, #8]
 8007a8c:	f1a9 0204 	sub.w	r2, r9, #4
 8007a90:	2a24      	cmp	r2, #36	; 0x24
 8007a92:	60c1      	str	r1, [r0, #12]
 8007a94:	6088      	str	r0, [r1, #8]
 8007a96:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007a9a:	f853 0f08 	ldr.w	r0, [r3, #8]!
 8007a9e:	60c1      	str	r1, [r0, #12]
 8007aa0:	6088      	str	r0, [r1, #8]
 8007aa2:	f200 8191 	bhi.w	8007dc8 <_realloc_r+0x3ec>
 8007aa6:	2a13      	cmp	r2, #19
 8007aa8:	bf9c      	itt	ls
 8007aaa:	461a      	movls	r2, r3
 8007aac:	4621      	movls	r1, r4
 8007aae:	d925      	bls.n	8007afc <_realloc_r+0x120>
 8007ab0:	6821      	ldr	r1, [r4, #0]
 8007ab2:	2a1b      	cmp	r2, #27
 8007ab4:	bf98      	it	ls
 8007ab6:	f108 0210 	addls.w	r2, r8, #16
 8007aba:	f8c8 1008 	str.w	r1, [r8, #8]
 8007abe:	6861      	ldr	r1, [r4, #4]
 8007ac0:	f8c8 100c 	str.w	r1, [r8, #12]
 8007ac4:	bf98      	it	ls
 8007ac6:	f104 0108 	addls.w	r1, r4, #8
 8007aca:	d917      	bls.n	8007afc <_realloc_r+0x120>
 8007acc:	68a1      	ldr	r1, [r4, #8]
 8007ace:	2a24      	cmp	r2, #36	; 0x24
 8007ad0:	bf14      	ite	ne
 8007ad2:	f108 0218 	addne.w	r2, r8, #24
 8007ad6:	f108 0220 	addeq.w	r2, r8, #32
 8007ada:	f8c8 1010 	str.w	r1, [r8, #16]
 8007ade:	68e1      	ldr	r1, [r4, #12]
 8007ae0:	f8c8 1014 	str.w	r1, [r8, #20]
 8007ae4:	bf11      	iteee	ne
 8007ae6:	f104 0110 	addne.w	r1, r4, #16
 8007aea:	6920      	ldreq	r0, [r4, #16]
 8007aec:	f104 0118 	addeq.w	r1, r4, #24
 8007af0:	f8c8 0018 	streq.w	r0, [r8, #24]
 8007af4:	bf04      	itt	eq
 8007af6:	6960      	ldreq	r0, [r4, #20]
 8007af8:	f8c8 001c 	streq.w	r0, [r8, #28]
 8007afc:	6808      	ldr	r0, [r1, #0]
 8007afe:	461c      	mov	r4, r3
 8007b00:	6010      	str	r0, [r2, #0]
 8007b02:	46c2      	mov	sl, r8
 8007b04:	684b      	ldr	r3, [r1, #4]
 8007b06:	6053      	str	r3, [r2, #4]
 8007b08:	688b      	ldr	r3, [r1, #8]
 8007b0a:	6093      	str	r3, [r2, #8]
 8007b0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007b10:	1b7b      	subs	r3, r7, r5
 8007b12:	2b0f      	cmp	r3, #15
 8007b14:	d825      	bhi.n	8007b62 <_realloc_r+0x186>
 8007b16:	eb0a 0307 	add.w	r3, sl, r7
 8007b1a:	f000 0001 	and.w	r0, r0, #1
 8007b1e:	4307      	orrs	r7, r0
 8007b20:	f8ca 7004 	str.w	r7, [sl, #4]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	f042 0201 	orr.w	r2, r2, #1
 8007b2a:	605a      	str	r2, [r3, #4]
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	4627      	mov	r7, r4
 8007b30:	f01c fcbe 	bl	80244b0 <__malloc_unlock>
 8007b34:	4638      	mov	r0, r7
 8007b36:	b003      	add	sp, #12
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	f025 0507 	bic.w	r5, r5, #7
 8007b40:	4629      	mov	r1, r5
 8007b42:	0fef      	lsrs	r7, r5, #31
 8007b44:	e760      	b.n	8007a08 <_realloc_r+0x2c>
 8007b46:	f02c 0c03 	bic.w	ip, ip, #3
 8007b4a:	eb0c 0709 	add.w	r7, ip, r9
 8007b4e:	42b9      	cmp	r1, r7
 8007b50:	f73f af7e 	bgt.w	8007a50 <_realloc_r+0x74>
 8007b54:	f8de 300c 	ldr.w	r3, [lr, #12]
 8007b58:	f8de 2008 	ldr.w	r2, [lr, #8]
 8007b5c:	60d3      	str	r3, [r2, #12]
 8007b5e:	609a      	str	r2, [r3, #8]
 8007b60:	e7d6      	b.n	8007b10 <_realloc_r+0x134>
 8007b62:	eb0a 0105 	add.w	r1, sl, r5
 8007b66:	f000 0001 	and.w	r0, r0, #1
 8007b6a:	18ca      	adds	r2, r1, r3
 8007b6c:	4305      	orrs	r5, r0
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	f8ca 5004 	str.w	r5, [sl, #4]
 8007b76:	604b      	str	r3, [r1, #4]
 8007b78:	4630      	mov	r0, r6
 8007b7a:	6853      	ldr	r3, [r2, #4]
 8007b7c:	3108      	adds	r1, #8
 8007b7e:	f043 0301 	orr.w	r3, r3, #1
 8007b82:	6053      	str	r3, [r2, #4]
 8007b84:	f003 ffc6 	bl	800bb14 <_free_r>
 8007b88:	e7d0      	b.n	8007b2c <_realloc_r+0x150>
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	f7ff faa1 	bl	80070d4 <_malloc_r>
 8007b92:	4607      	mov	r7, r0
 8007b94:	b1e8      	cbz	r0, 8007bd2 <_realloc_r+0x1f6>
 8007b96:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8007b9a:	f1a7 0208 	sub.w	r2, r7, #8
 8007b9e:	f020 0301 	bic.w	r3, r0, #1
 8007ba2:	4453      	add	r3, sl
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	f000 8109 	beq.w	8007dbc <_realloc_r+0x3e0>
 8007baa:	f1a9 0204 	sub.w	r2, r9, #4
 8007bae:	2a24      	cmp	r2, #36	; 0x24
 8007bb0:	f200 80aa 	bhi.w	8007d08 <_realloc_r+0x32c>
 8007bb4:	2a13      	cmp	r2, #19
 8007bb6:	bf9c      	itt	ls
 8007bb8:	463b      	movls	r3, r7
 8007bba:	4622      	movls	r2, r4
 8007bbc:	d878      	bhi.n	8007cb0 <_realloc_r+0x2d4>
 8007bbe:	6811      	ldr	r1, [r2, #0]
 8007bc0:	6019      	str	r1, [r3, #0]
 8007bc2:	6851      	ldr	r1, [r2, #4]
 8007bc4:	6059      	str	r1, [r3, #4]
 8007bc6:	6892      	ldr	r2, [r2, #8]
 8007bc8:	609a      	str	r2, [r3, #8]
 8007bca:	4630      	mov	r0, r6
 8007bcc:	4621      	mov	r1, r4
 8007bce:	f003 ffa1 	bl	800bb14 <_free_r>
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f01c fc6c 	bl	80244b0 <__malloc_unlock>
 8007bd8:	e7ac      	b.n	8007b34 <_realloc_r+0x158>
 8007bda:	eb00 0b09 	add.w	fp, r0, r9
 8007bde:	4559      	cmp	r1, fp
 8007be0:	dcd3      	bgt.n	8007b8a <_realloc_r+0x1ae>
 8007be2:	4643      	mov	r3, r8
 8007be4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007be8:	f1a9 0204 	sub.w	r2, r9, #4
 8007bec:	f853 0f08 	ldr.w	r0, [r3, #8]!
 8007bf0:	2a24      	cmp	r2, #36	; 0x24
 8007bf2:	60c1      	str	r1, [r0, #12]
 8007bf4:	6088      	str	r0, [r1, #8]
 8007bf6:	d87d      	bhi.n	8007cf4 <_realloc_r+0x318>
 8007bf8:	2a13      	cmp	r2, #19
 8007bfa:	bf9c      	itt	ls
 8007bfc:	461a      	movls	r2, r3
 8007bfe:	4621      	movls	r1, r4
 8007c00:	d925      	bls.n	8007c4e <_realloc_r+0x272>
 8007c02:	6821      	ldr	r1, [r4, #0]
 8007c04:	2a1b      	cmp	r2, #27
 8007c06:	bf98      	it	ls
 8007c08:	f108 0210 	addls.w	r2, r8, #16
 8007c0c:	f8c8 1008 	str.w	r1, [r8, #8]
 8007c10:	6861      	ldr	r1, [r4, #4]
 8007c12:	f8c8 100c 	str.w	r1, [r8, #12]
 8007c16:	bf98      	it	ls
 8007c18:	f104 0108 	addls.w	r1, r4, #8
 8007c1c:	d917      	bls.n	8007c4e <_realloc_r+0x272>
 8007c1e:	68a1      	ldr	r1, [r4, #8]
 8007c20:	2a24      	cmp	r2, #36	; 0x24
 8007c22:	bf14      	ite	ne
 8007c24:	f108 0218 	addne.w	r2, r8, #24
 8007c28:	f108 0220 	addeq.w	r2, r8, #32
 8007c2c:	f8c8 1010 	str.w	r1, [r8, #16]
 8007c30:	68e1      	ldr	r1, [r4, #12]
 8007c32:	f8c8 1014 	str.w	r1, [r8, #20]
 8007c36:	bf11      	iteee	ne
 8007c38:	f104 0110 	addne.w	r1, r4, #16
 8007c3c:	6920      	ldreq	r0, [r4, #16]
 8007c3e:	f104 0118 	addeq.w	r1, r4, #24
 8007c42:	f8c8 0018 	streq.w	r0, [r8, #24]
 8007c46:	bf04      	itt	eq
 8007c48:	6960      	ldreq	r0, [r4, #20]
 8007c4a:	f8c8 001c 	streq.w	r0, [r8, #28]
 8007c4e:	6808      	ldr	r0, [r1, #0]
 8007c50:	461c      	mov	r4, r3
 8007c52:	465f      	mov	r7, fp
 8007c54:	e754      	b.n	8007b00 <_realloc_r+0x124>
 8007c56:	4611      	mov	r1, r2
 8007c58:	b003      	add	sp, #12
 8007c5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5e:	f7ff ba39 	b.w	80070d4 <_malloc_r>
 8007c62:	230c      	movs	r3, #12
 8007c64:	2700      	movs	r7, #0
 8007c66:	6033      	str	r3, [r6, #0]
 8007c68:	e764      	b.n	8007b34 <_realloc_r+0x158>
 8007c6a:	f8db 7004 	ldr.w	r7, [fp, #4]
 8007c6e:	f105 0e10 	add.w	lr, r5, #16
 8007c72:	f027 0c03 	bic.w	ip, r7, #3
 8007c76:	eb0c 0709 	add.w	r7, ip, r9
 8007c7a:	4577      	cmp	r7, lr
 8007c7c:	bfb8      	it	lt
 8007c7e:	46de      	movlt	lr, fp
 8007c80:	f6ff aee6 	blt.w	8007a50 <_realloc_r+0x74>
 8007c84:	eb0a 0205 	add.w	r2, sl, r5
 8007c88:	1b79      	subs	r1, r7, r5
 8007c8a:	f041 0101 	orr.w	r1, r1, #1
 8007c8e:	609a      	str	r2, [r3, #8]
 8007c90:	6051      	str	r1, [r2, #4]
 8007c92:	4630      	mov	r0, r6
 8007c94:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007c98:	4627      	mov	r7, r4
 8007c9a:	f001 0301 	and.w	r3, r1, #1
 8007c9e:	431d      	orrs	r5, r3
 8007ca0:	f844 5c04 	str.w	r5, [r4, #-4]
 8007ca4:	f01c fc04 	bl	80244b0 <__malloc_unlock>
 8007ca8:	e744      	b.n	8007b34 <_realloc_r+0x158>
 8007caa:	bf00      	nop
 8007cac:	20000438 	.word	0x20000438
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	2a1b      	cmp	r2, #27
 8007cb4:	bf98      	it	ls
 8007cb6:	f104 0208 	addls.w	r2, r4, #8
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	607b      	str	r3, [r7, #4]
 8007cc0:	bf98      	it	ls
 8007cc2:	f107 0308 	addls.w	r3, r7, #8
 8007cc6:	f67f af7a 	bls.w	8007bbe <_realloc_r+0x1e2>
 8007cca:	68a3      	ldr	r3, [r4, #8]
 8007ccc:	2a24      	cmp	r2, #36	; 0x24
 8007cce:	bf14      	ite	ne
 8007cd0:	f104 0210 	addne.w	r2, r4, #16
 8007cd4:	f104 0218 	addeq.w	r2, r4, #24
 8007cd8:	60bb      	str	r3, [r7, #8]
 8007cda:	68e3      	ldr	r3, [r4, #12]
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	bf11      	iteee	ne
 8007ce0:	f107 0310 	addne.w	r3, r7, #16
 8007ce4:	6921      	ldreq	r1, [r4, #16]
 8007ce6:	f107 0318 	addeq.w	r3, r7, #24
 8007cea:	6139      	streq	r1, [r7, #16]
 8007cec:	bf04      	itt	eq
 8007cee:	6961      	ldreq	r1, [r4, #20]
 8007cf0:	6179      	streq	r1, [r7, #20]
 8007cf2:	e764      	b.n	8007bbe <_realloc_r+0x1e2>
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	461c      	mov	r4, r3
 8007cfa:	465f      	mov	r7, fp
 8007cfc:	f7ff fd52 	bl	80077a4 <memmove>
 8007d00:	46c2      	mov	sl, r8
 8007d02:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d06:	e703      	b.n	8007b10 <_realloc_r+0x134>
 8007d08:	4638      	mov	r0, r7
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	f7ff fd4a 	bl	80077a4 <memmove>
 8007d10:	e75b      	b.n	8007bca <_realloc_r+0x1ee>
 8007d12:	f105 0010 	add.w	r0, r5, #16
 8007d16:	44dc      	add	ip, fp
 8007d18:	4584      	cmp	ip, r0
 8007d1a:	f6ff af60 	blt.w	8007bde <_realloc_r+0x202>
 8007d1e:	4647      	mov	r7, r8
 8007d20:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007d24:	f1a9 0204 	sub.w	r2, r9, #4
 8007d28:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007d2c:	2a24      	cmp	r2, #36	; 0x24
 8007d2e:	60c1      	str	r1, [r0, #12]
 8007d30:	6088      	str	r0, [r1, #8]
 8007d32:	d852      	bhi.n	8007dda <_realloc_r+0x3fe>
 8007d34:	2a13      	cmp	r2, #19
 8007d36:	bf9c      	itt	ls
 8007d38:	463a      	movls	r2, r7
 8007d3a:	4621      	movls	r1, r4
 8007d3c:	d925      	bls.n	8007d8a <_realloc_r+0x3ae>
 8007d3e:	6821      	ldr	r1, [r4, #0]
 8007d40:	2a1b      	cmp	r2, #27
 8007d42:	bf98      	it	ls
 8007d44:	f108 0210 	addls.w	r2, r8, #16
 8007d48:	f8c8 1008 	str.w	r1, [r8, #8]
 8007d4c:	6861      	ldr	r1, [r4, #4]
 8007d4e:	f8c8 100c 	str.w	r1, [r8, #12]
 8007d52:	bf98      	it	ls
 8007d54:	f104 0108 	addls.w	r1, r4, #8
 8007d58:	d917      	bls.n	8007d8a <_realloc_r+0x3ae>
 8007d5a:	68a1      	ldr	r1, [r4, #8]
 8007d5c:	2a24      	cmp	r2, #36	; 0x24
 8007d5e:	bf14      	ite	ne
 8007d60:	f108 0218 	addne.w	r2, r8, #24
 8007d64:	f108 0220 	addeq.w	r2, r8, #32
 8007d68:	f8c8 1010 	str.w	r1, [r8, #16]
 8007d6c:	68e1      	ldr	r1, [r4, #12]
 8007d6e:	f8c8 1014 	str.w	r1, [r8, #20]
 8007d72:	bf11      	iteee	ne
 8007d74:	f104 0110 	addne.w	r1, r4, #16
 8007d78:	6920      	ldreq	r0, [r4, #16]
 8007d7a:	f104 0118 	addeq.w	r1, r4, #24
 8007d7e:	f8c8 0018 	streq.w	r0, [r8, #24]
 8007d82:	bf04      	itt	eq
 8007d84:	6960      	ldreq	r0, [r4, #20]
 8007d86:	f8c8 001c 	streq.w	r0, [r8, #28]
 8007d8a:	6808      	ldr	r0, [r1, #0]
 8007d8c:	6010      	str	r0, [r2, #0]
 8007d8e:	6848      	ldr	r0, [r1, #4]
 8007d90:	6050      	str	r0, [r2, #4]
 8007d92:	6889      	ldr	r1, [r1, #8]
 8007d94:	6091      	str	r1, [r2, #8]
 8007d96:	eb08 0205 	add.w	r2, r8, r5
 8007d9a:	ebc5 010c 	rsb	r1, r5, ip
 8007d9e:	f041 0101 	orr.w	r1, r1, #1
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	6051      	str	r1, [r2, #4]
 8007da6:	4630      	mov	r0, r6
 8007da8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	431d      	orrs	r5, r3
 8007db2:	f8c8 5004 	str.w	r5, [r8, #4]
 8007db6:	f01c fb7b 	bl	80244b0 <__malloc_unlock>
 8007dba:	e6bb      	b.n	8007b34 <_realloc_r+0x158>
 8007dbc:	f857 7c04 	ldr.w	r7, [r7, #-4]
 8007dc0:	f027 0703 	bic.w	r7, r7, #3
 8007dc4:	444f      	add	r7, r9
 8007dc6:	e6a3      	b.n	8007b10 <_realloc_r+0x134>
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4618      	mov	r0, r3
 8007dcc:	461c      	mov	r4, r3
 8007dce:	46c2      	mov	sl, r8
 8007dd0:	f7ff fce8 	bl	80077a4 <memmove>
 8007dd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007dd8:	e69a      	b.n	8007b10 <_realloc_r+0x134>
 8007dda:	4638      	mov	r0, r7
 8007ddc:	4621      	mov	r1, r4
 8007dde:	e88d 1008 	stmia.w	sp, {r3, ip}
 8007de2:	f7ff fcdf 	bl	80077a4 <memmove>
 8007de6:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8007dea:	e7d4      	b.n	8007d96 <_realloc_r+0x3ba>

08007dec <_init_signal_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4604      	mov	r4, r0
 8007df0:	f8d0 52dc 	ldr.w	r5, [r0, #732]	; 0x2dc
 8007df4:	b10d      	cbz	r5, 8007dfa <_init_signal_r+0xe>
 8007df6:	2000      	movs	r0, #0
 8007df8:	bd38      	pop	{r3, r4, r5, pc}
 8007dfa:	2180      	movs	r1, #128	; 0x80
 8007dfc:	f7ff f96a 	bl	80070d4 <_malloc_r>
 8007e00:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 8007e04:	b148      	cbz	r0, 8007e1a <_init_signal_r+0x2e>
 8007e06:	462b      	mov	r3, r5
 8007e08:	e001      	b.n	8007e0e <_init_signal_r+0x22>
 8007e0a:	f8d4 02dc 	ldr.w	r0, [r4, #732]	; 0x2dc
 8007e0e:	5143      	str	r3, [r0, r5]
 8007e10:	3504      	adds	r5, #4
 8007e12:	2d80      	cmp	r5, #128	; 0x80
 8007e14:	d1f9      	bne.n	8007e0a <_init_signal_r+0x1e>
 8007e16:	2000      	movs	r0, #0
 8007e18:	bd38      	pop	{r3, r4, r5, pc}
 8007e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}

08007e20 <_signal_r>:
 8007e20:	291f      	cmp	r1, #31
 8007e22:	b510      	push	{r4, lr}
 8007e24:	4604      	mov	r4, r0
 8007e26:	b082      	sub	sp, #8
 8007e28:	d808      	bhi.n	8007e3c <_signal_r+0x1c>
 8007e2a:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8007e2e:	b153      	cbz	r3, 8007e46 <_signal_r+0x26>
 8007e30:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007e34:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007e38:	b002      	add	sp, #8
 8007e3a:	bd10      	pop	{r4, pc}
 8007e3c:	2316      	movs	r3, #22
 8007e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e42:	6023      	str	r3, [r4, #0]
 8007e44:	e7f8      	b.n	8007e38 <_signal_r+0x18>
 8007e46:	9101      	str	r1, [sp, #4]
 8007e48:	9200      	str	r2, [sp, #0]
 8007e4a:	f7ff ffcf 	bl	8007dec <_init_signal_r>
 8007e4e:	9901      	ldr	r1, [sp, #4]
 8007e50:	9a00      	ldr	r2, [sp, #0]
 8007e52:	b910      	cbnz	r0, 8007e5a <_signal_r+0x3a>
 8007e54:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 8007e58:	e7ea      	b.n	8007e30 <_signal_r+0x10>
 8007e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5e:	e7eb      	b.n	8007e38 <_signal_r+0x18>

08007e60 <_raise_r>:
 8007e60:	291f      	cmp	r1, #31
 8007e62:	b538      	push	{r3, r4, r5, lr}
 8007e64:	460c      	mov	r4, r1
 8007e66:	4605      	mov	r5, r0
 8007e68:	d820      	bhi.n	8007eac <_raise_r+0x4c>
 8007e6a:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8007e6e:	b19a      	cbz	r2, 8007e98 <_raise_r+0x38>
 8007e70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e74:	b183      	cbz	r3, 8007e98 <_raise_r+0x38>
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d00c      	beq.n	8007e94 <_raise_r+0x34>
 8007e7a:	1c59      	adds	r1, r3, #1
 8007e7c:	d006      	beq.n	8007e8c <_raise_r+0x2c>
 8007e7e:	2500      	movs	r5, #0
 8007e80:	4620      	mov	r0, r4
 8007e82:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8007e86:	4798      	blx	r3
 8007e88:	4628      	mov	r0, r5
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	2316      	movs	r3, #22
 8007e8e:	2001      	movs	r0, #1
 8007e90:	602b      	str	r3, [r5, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	2000      	movs	r0, #0
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f01c faef 	bl	802447c <_getpid_r>
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	4601      	mov	r1, r0
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea8:	f01c bad6 	b.w	8024458 <_kill_r>
 8007eac:	2316      	movs	r3, #22
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	bd38      	pop	{r3, r4, r5, pc}
 8007eb6:	bf00      	nop

08007eb8 <__sigtramp_r>:
 8007eb8:	291f      	cmp	r1, #31
 8007eba:	b510      	push	{r4, lr}
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	d81e      	bhi.n	8007f00 <__sigtramp_r+0x48>
 8007ec2:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8007ec6:	b19a      	cbz	r2, 8007ef0 <__sigtramp_r+0x38>
 8007ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ecc:	2001      	movs	r0, #1
 8007ece:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007ed2:	b14b      	cbz	r3, 8007ee8 <__sigtramp_r+0x30>
 8007ed4:	1c58      	adds	r0, r3, #1
 8007ed6:	d009      	beq.n	8007eec <__sigtramp_r+0x34>
 8007ed8:	2003      	movs	r0, #3
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d004      	beq.n	8007ee8 <__sigtramp_r+0x30>
 8007ede:	2400      	movs	r4, #0
 8007ee0:	4608      	mov	r0, r1
 8007ee2:	6014      	str	r4, [r2, #0]
 8007ee4:	4798      	blx	r3
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	b002      	add	sp, #8
 8007eea:	bd10      	pop	{r4, pc}
 8007eec:	2002      	movs	r0, #2
 8007eee:	e7fb      	b.n	8007ee8 <__sigtramp_r+0x30>
 8007ef0:	9101      	str	r1, [sp, #4]
 8007ef2:	f7ff ff7b 	bl	8007dec <_init_signal_r>
 8007ef6:	9901      	ldr	r1, [sp, #4]
 8007ef8:	b910      	cbnz	r0, 8007f00 <__sigtramp_r+0x48>
 8007efa:	f8d4 22dc 	ldr.w	r2, [r4, #732]	; 0x2dc
 8007efe:	e7e3      	b.n	8007ec8 <__sigtramp_r+0x10>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	e7f0      	b.n	8007ee8 <__sigtramp_r+0x30>
 8007f06:	bf00      	nop

08007f08 <raise>:
 8007f08:	f240 0308 	movw	r3, #8
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	e7a4      	b.n	8007e60 <_raise_r>
 8007f16:	bf00      	nop

08007f18 <signal>:
 8007f18:	f240 0308 	movw	r3, #8
 8007f1c:	460a      	mov	r2, r1
 8007f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f22:	4601      	mov	r1, r0
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	e77b      	b.n	8007e20 <_signal_r>

08007f28 <_init_signal>:
 8007f28:	f240 0308 	movw	r3, #8
 8007f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	e75b      	b.n	8007dec <_init_signal_r>

08007f34 <__sigtramp>:
 8007f34:	f240 0308 	movw	r3, #8
 8007f38:	4601      	mov	r1, r0
 8007f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	e7ba      	b.n	8007eb8 <__sigtramp_r>
 8007f42:	bf00      	nop

08007f44 <_sprintf_r>:
 8007f44:	b40c      	push	{r2, r3}
 8007f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f48:	b09d      	sub	sp, #116	; 0x74
 8007f4a:	ac22      	add	r4, sp, #136	; 0x88
 8007f4c:	460e      	mov	r6, r1
 8007f4e:	a901      	add	r1, sp, #4
 8007f50:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007f54:	f854 2b04 	ldr.w	r2, [r4], #4
 8007f58:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007f5c:	9601      	str	r6, [sp, #4]
 8007f5e:	4623      	mov	r3, r4
 8007f60:	9605      	str	r6, [sp, #20]
 8007f62:	f8ad 7010 	strh.w	r7, [sp, #16]
 8007f66:	f04f 36ff 	mov.w	r6, #4294967295
 8007f6a:	9503      	str	r5, [sp, #12]
 8007f6c:	f8ad 6012 	strh.w	r6, [sp, #18]
 8007f70:	9506      	str	r5, [sp, #24]
 8007f72:	941b      	str	r4, [sp, #108]	; 0x6c
 8007f74:	f000 fa60 	bl	8008438 <_svfprintf_r>
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	b01d      	add	sp, #116	; 0x74
 8007f80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007f84:	b002      	add	sp, #8
 8007f86:	4770      	bx	lr

08007f88 <sprintf>:
 8007f88:	b40e      	push	{r1, r2, r3}
 8007f8a:	f240 0308 	movw	r3, #8
 8007f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f90:	b09c      	sub	sp, #112	; 0x70
 8007f92:	ac21      	add	r4, sp, #132	; 0x84
 8007f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f98:	4606      	mov	r6, r0
 8007f9a:	a901      	add	r1, sp, #4
 8007f9c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007fa0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007faa:	4623      	mov	r3, r4
 8007fac:	9601      	str	r6, [sp, #4]
 8007fae:	9605      	str	r6, [sp, #20]
 8007fb0:	f04f 36ff 	mov.w	r6, #4294967295
 8007fb4:	f8ad 7010 	strh.w	r7, [sp, #16]
 8007fb8:	f8ad 6012 	strh.w	r6, [sp, #18]
 8007fbc:	9503      	str	r5, [sp, #12]
 8007fbe:	9506      	str	r5, [sp, #24]
 8007fc0:	941b      	str	r4, [sp, #108]	; 0x6c
 8007fc2:	f000 fa39 	bl	8008438 <_svfprintf_r>
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	b01c      	add	sp, #112	; 0x70
 8007fce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007fd2:	b003      	add	sp, #12
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop

08007fd8 <strcat>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	0783      	lsls	r3, r0, #30
 8007fdc:	4604      	mov	r4, r0
 8007fde:	d120      	bne.n	8008022 <strcat+0x4a>
 8007fe0:	6803      	ldr	r3, [r0, #0]
 8007fe2:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8007fe6:	ea22 0303 	bic.w	r3, r2, r3
 8007fea:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8007fee:	bf04      	itt	eq
 8007ff0:	4602      	moveq	r2, r0
 8007ff2:	4600      	moveq	r0, r0
 8007ff4:	d115      	bne.n	8008022 <strcat+0x4a>
 8007ff6:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8007ffa:	3004      	adds	r0, #4
 8007ffc:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8008000:	ea25 0303 	bic.w	r3, r5, r3
 8008004:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008008:	d0f5      	beq.n	8007ff6 <strcat+0x1e>
 800800a:	7803      	ldrb	r3, [r0, #0]
 800800c:	b12b      	cbz	r3, 800801a <strcat+0x42>
 800800e:	4603      	mov	r3, r0
 8008010:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008014:	3001      	adds	r0, #1
 8008016:	2a00      	cmp	r2, #0
 8008018:	d1fa      	bne.n	8008010 <strcat+0x38>
 800801a:	f000 f8f3 	bl	8008204 <strcpy>
 800801e:	4620      	mov	r0, r4
 8008020:	bd38      	pop	{r3, r4, r5, pc}
 8008022:	4620      	mov	r0, r4
 8008024:	e7f1      	b.n	800800a <strcat+0x32>
 8008026:	bf00      	nop

08008028 <strcmp>:
 8008028:	ea80 0201 	eor.w	r2, r0, r1
 800802c:	f012 0f03 	tst.w	r2, #3
 8008030:	d13a      	bne.n	80080a8 <strcmp_unaligned>
 8008032:	f010 0203 	ands.w	r2, r0, #3
 8008036:	f020 0003 	bic.w	r0, r0, #3
 800803a:	f021 0103 	bic.w	r1, r1, #3
 800803e:	f850 cb04 	ldr.w	ip, [r0], #4
 8008042:	bf08      	it	eq
 8008044:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008048:	d00d      	beq.n	8008066 <strcmp+0x3e>
 800804a:	f082 0203 	eor.w	r2, r2, #3
 800804e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008052:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008056:	fa23 f202 	lsr.w	r2, r3, r2
 800805a:	f851 3b04 	ldr.w	r3, [r1], #4
 800805e:	ea4c 0c02 	orr.w	ip, ip, r2
 8008062:	ea43 0302 	orr.w	r3, r3, r2
 8008066:	bf00      	nop
 8008068:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800806c:	459c      	cmp	ip, r3
 800806e:	bf01      	itttt	eq
 8008070:	ea22 020c 	biceq.w	r2, r2, ip
 8008074:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8008078:	f850 cb04 	ldreq.w	ip, [r0], #4
 800807c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008080:	d0f2      	beq.n	8008068 <strcmp+0x40>
 8008082:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8008086:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800808a:	2801      	cmp	r0, #1
 800808c:	bf28      	it	cs
 800808e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8008092:	bf08      	it	eq
 8008094:	0a1b      	lsreq	r3, r3, #8
 8008096:	d0f4      	beq.n	8008082 <strcmp+0x5a>
 8008098:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800809c:	ea4f 6010 	mov.w	r0, r0, lsr #24
 80080a0:	eba0 0003 	sub.w	r0, r0, r3
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop

080080a8 <strcmp_unaligned>:
 80080a8:	f010 0f03 	tst.w	r0, #3
 80080ac:	d00a      	beq.n	80080c4 <strcmp_unaligned+0x1c>
 80080ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b6:	2a01      	cmp	r2, #1
 80080b8:	bf28      	it	cs
 80080ba:	429a      	cmpcs	r2, r3
 80080bc:	d0f4      	beq.n	80080a8 <strcmp_unaligned>
 80080be:	eba2 0003 	sub.w	r0, r2, r3
 80080c2:	4770      	bx	lr
 80080c4:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80080c8:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80080cc:	f04f 0201 	mov.w	r2, #1
 80080d0:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 80080d4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80080d8:	f001 0c03 	and.w	ip, r1, #3
 80080dc:	f021 0103 	bic.w	r1, r1, #3
 80080e0:	f850 4b04 	ldr.w	r4, [r0], #4
 80080e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80080e8:	f1bc 0f02 	cmp.w	ip, #2
 80080ec:	d026      	beq.n	800813c <strcmp_unaligned+0x94>
 80080ee:	d84b      	bhi.n	8008188 <strcmp_unaligned+0xe0>
 80080f0:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 80080f4:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 80080f8:	eba4 0302 	sub.w	r3, r4, r2
 80080fc:	ea23 0304 	bic.w	r3, r3, r4
 8008100:	d10d      	bne.n	800811e <strcmp_unaligned+0x76>
 8008102:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8008106:	bf08      	it	eq
 8008108:	f851 5b04 	ldreq.w	r5, [r1], #4
 800810c:	d10a      	bne.n	8008124 <strcmp_unaligned+0x7c>
 800810e:	ea8c 0c04 	eor.w	ip, ip, r4
 8008112:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8008116:	d10c      	bne.n	8008132 <strcmp_unaligned+0x8a>
 8008118:	f850 4b04 	ldr.w	r4, [r0], #4
 800811c:	e7e8      	b.n	80080f0 <strcmp_unaligned+0x48>
 800811e:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8008122:	e05c      	b.n	80081de <strcmp_unaligned+0x136>
 8008124:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8008128:	d152      	bne.n	80081d0 <strcmp_unaligned+0x128>
 800812a:	780d      	ldrb	r5, [r1, #0]
 800812c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8008130:	e055      	b.n	80081de <strcmp_unaligned+0x136>
 8008132:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8008136:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800813a:	e050      	b.n	80081de <strcmp_unaligned+0x136>
 800813c:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8008140:	eba4 0302 	sub.w	r3, r4, r2
 8008144:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008148:	ea23 0304 	bic.w	r3, r3, r4
 800814c:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8008150:	d117      	bne.n	8008182 <strcmp_unaligned+0xda>
 8008152:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8008156:	bf08      	it	eq
 8008158:	f851 5b04 	ldreq.w	r5, [r1], #4
 800815c:	d107      	bne.n	800816e <strcmp_unaligned+0xc6>
 800815e:	ea8c 0c04 	eor.w	ip, ip, r4
 8008162:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8008166:	d108      	bne.n	800817a <strcmp_unaligned+0xd2>
 8008168:	f850 4b04 	ldr.w	r4, [r0], #4
 800816c:	e7e6      	b.n	800813c <strcmp_unaligned+0x94>
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	d12e      	bne.n	80081d0 <strcmp_unaligned+0x128>
 8008172:	880d      	ldrh	r5, [r1, #0]
 8008174:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008178:	e031      	b.n	80081de <strcmp_unaligned+0x136>
 800817a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800817e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008182:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8008186:	e02a      	b.n	80081de <strcmp_unaligned+0x136>
 8008188:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 800818c:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8008190:	eba4 0302 	sub.w	r3, r4, r2
 8008194:	ea23 0304 	bic.w	r3, r3, r4
 8008198:	d10d      	bne.n	80081b6 <strcmp_unaligned+0x10e>
 800819a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800819e:	bf08      	it	eq
 80081a0:	f851 5b04 	ldreq.w	r5, [r1], #4
 80081a4:	d10a      	bne.n	80081bc <strcmp_unaligned+0x114>
 80081a6:	ea8c 0c04 	eor.w	ip, ip, r4
 80081aa:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 80081ae:	d10a      	bne.n	80081c6 <strcmp_unaligned+0x11e>
 80081b0:	f850 4b04 	ldr.w	r4, [r0], #4
 80081b4:	e7e8      	b.n	8008188 <strcmp_unaligned+0xe0>
 80081b6:	ea4f 6515 	mov.w	r5, r5, lsr #24
 80081ba:	e010      	b.n	80081de <strcmp_unaligned+0x136>
 80081bc:	f014 0fff 	tst.w	r4, #255	; 0xff
 80081c0:	d006      	beq.n	80081d0 <strcmp_unaligned+0x128>
 80081c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80081c6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80081ca:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80081ce:	e006      	b.n	80081de <strcmp_unaligned+0x136>
 80081d0:	f04f 0000 	mov.w	r0, #0
 80081d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081d8:	f85d 5b04 	ldr.w	r5, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 80081e2:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 80081e6:	2801      	cmp	r0, #1
 80081e8:	bf28      	it	cs
 80081ea:	4290      	cmpcs	r0, r2
 80081ec:	bf04      	itt	eq
 80081ee:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 80081f2:	0a2d      	lsreq	r5, r5, #8
 80081f4:	d0f3      	beq.n	80081de <strcmp_unaligned+0x136>
 80081f6:	eba2 0000 	sub.w	r0, r2, r0
 80081fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081fe:	f85d 5b04 	ldr.w	r5, [sp], #4
 8008202:	4770      	bx	lr

08008204 <strcpy>:
 8008204:	ea80 0201 	eor.w	r2, r0, r1
 8008208:	4684      	mov	ip, r0
 800820a:	f012 0f03 	tst.w	r2, #3
 800820e:	d14f      	bne.n	80082b0 <strcpy+0xac>
 8008210:	f011 0f03 	tst.w	r1, #3
 8008214:	d132      	bne.n	800827c <strcpy+0x78>
 8008216:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800821a:	f011 0f04 	tst.w	r1, #4
 800821e:	f851 3b04 	ldr.w	r3, [r1], #4
 8008222:	d00b      	beq.n	800823c <strcpy+0x38>
 8008224:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8008228:	439a      	bics	r2, r3
 800822a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800822e:	bf04      	itt	eq
 8008230:	f84c 3b04 	streq.w	r3, [ip], #4
 8008234:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008238:	d116      	bne.n	8008268 <strcpy+0x64>
 800823a:	bf00      	nop
 800823c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008240:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8008244:	439a      	bics	r2, r3
 8008246:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800824a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800824e:	d10b      	bne.n	8008268 <strcpy+0x64>
 8008250:	f84c 3b04 	str.w	r3, [ip], #4
 8008254:	43a2      	bics	r2, r4
 8008256:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800825a:	bf04      	itt	eq
 800825c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008260:	f84c 4b04 	streq.w	r4, [ip], #4
 8008264:	d0ea      	beq.n	800823c <strcpy+0x38>
 8008266:	4623      	mov	r3, r4
 8008268:	f80c 3b01 	strb.w	r3, [ip], #1
 800826c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008270:	ea4f 2333 	mov.w	r3, r3, ror #8
 8008274:	d1f8      	bne.n	8008268 <strcpy+0x64>
 8008276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	f011 0f01 	tst.w	r1, #1
 8008280:	d006      	beq.n	8008290 <strcpy+0x8c>
 8008282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008286:	f80c 2b01 	strb.w	r2, [ip], #1
 800828a:	2a00      	cmp	r2, #0
 800828c:	bf08      	it	eq
 800828e:	4770      	bxeq	lr
 8008290:	f011 0f02 	tst.w	r1, #2
 8008294:	d0bf      	beq.n	8008216 <strcpy+0x12>
 8008296:	f831 2b02 	ldrh.w	r2, [r1], #2
 800829a:	f012 0fff 	tst.w	r2, #255	; 0xff
 800829e:	bf16      	itet	ne
 80082a0:	f82c 2b02 	strhne.w	r2, [ip], #2
 80082a4:	f88c 2000 	strbeq.w	r2, [ip]
 80082a8:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80082ac:	d1b3      	bne.n	8008216 <strcpy+0x12>
 80082ae:	4770      	bx	lr
 80082b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082b4:	f80c 2b01 	strb.w	r2, [ip], #1
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	d1f9      	bne.n	80082b0 <strcpy+0xac>
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop

080082c0 <strlen>:
 80082c0:	f020 0103 	bic.w	r1, r0, #3
 80082c4:	f010 0003 	ands.w	r0, r0, #3
 80082c8:	f1c0 0000 	rsb	r0, r0, #0
 80082cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80082d0:	f100 0c04 	add.w	ip, r0, #4
 80082d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80082d8:	f06f 0200 	mvn.w	r2, #0
 80082dc:	bf1c      	itt	ne
 80082de:	fa22 f20c 	lsrne.w	r2, r2, ip
 80082e2:	4313      	orrne	r3, r2
 80082e4:	f04f 0c01 	mov.w	ip, #1
 80082e8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80082ec:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80082f0:	eba3 020c 	sub.w	r2, r3, ip
 80082f4:	ea22 0203 	bic.w	r2, r2, r3
 80082f8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80082fc:	bf04      	itt	eq
 80082fe:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008302:	3004      	addeq	r0, #4
 8008304:	d0f4      	beq.n	80082f0 <strlen+0x30>
 8008306:	f013 0fff 	tst.w	r3, #255	; 0xff
 800830a:	bf1f      	itttt	ne
 800830c:	3001      	addne	r0, #1
 800830e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8008312:	3001      	addne	r0, #1
 8008314:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8008318:	bf18      	it	ne
 800831a:	3001      	addne	r0, #1
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop

08008320 <strncmp>:
 8008320:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8008324:	2a00      	cmp	r2, #0
 8008326:	d044      	beq.n	80083b2 <strncmp+0x92>
 8008328:	ea41 0300 	orr.w	r3, r1, r0
 800832c:	f013 0303 	ands.w	r3, r3, #3
 8008330:	d12c      	bne.n	800838c <strncmp+0x6c>
 8008332:	2a03      	cmp	r2, #3
 8008334:	d92a      	bls.n	800838c <strncmp+0x6c>
 8008336:	6804      	ldr	r4, [r0, #0]
 8008338:	680d      	ldr	r5, [r1, #0]
 800833a:	42ac      	cmp	r4, r5
 800833c:	d126      	bne.n	800838c <strncmp+0x6c>
 800833e:	3a04      	subs	r2, #4
 8008340:	d037      	beq.n	80083b2 <strncmp+0x92>
 8008342:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8008346:	ea25 0404 	bic.w	r4, r5, r4
 800834a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800834e:	bf04      	itt	eq
 8008350:	460c      	moveq	r4, r1
 8008352:	4605      	moveq	r5, r0
 8008354:	d011      	beq.n	800837a <strncmp+0x5a>
 8008356:	e034      	b.n	80083c2 <strncmp+0xa2>
 8008358:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800835c:	4635      	mov	r5, r6
 800835e:	f851 cf04 	ldr.w	ip, [r1, #4]!
 8008362:	463c      	mov	r4, r7
 8008364:	f1a3 3801 	sub.w	r8, r3, #16843009	; 0x1010101
 8008368:	4563      	cmp	r3, ip
 800836a:	ea28 0803 	bic.w	r8, r8, r3
 800836e:	d109      	bne.n	8008384 <strncmp+0x64>
 8008370:	3a04      	subs	r2, #4
 8008372:	d01e      	beq.n	80083b2 <strncmp+0x92>
 8008374:	f018 3f80 	tst.w	r8, #2155905152	; 0x80808080
 8008378:	d119      	bne.n	80083ae <strncmp+0x8e>
 800837a:	1d2e      	adds	r6, r5, #4
 800837c:	1d27      	adds	r7, r4, #4
 800837e:	2a03      	cmp	r2, #3
 8008380:	d8ea      	bhi.n	8008358 <strncmp+0x38>
 8008382:	b1d2      	cbz	r2, 80083ba <strncmp+0x9a>
 8008384:	3a01      	subs	r2, #1
 8008386:	4639      	mov	r1, r7
 8008388:	4630      	mov	r0, r6
 800838a:	e000      	b.n	800838e <strncmp+0x6e>
 800838c:	3a01      	subs	r2, #1
 800838e:	7803      	ldrb	r3, [r0, #0]
 8008390:	780c      	ldrb	r4, [r1, #0]
 8008392:	42a3      	cmp	r3, r4
 8008394:	d113      	bne.n	80083be <strncmp+0x9e>
 8008396:	b162      	cbz	r2, 80083b2 <strncmp+0x92>
 8008398:	b19b      	cbz	r3, 80083c2 <strncmp+0xa2>
 800839a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800839e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	d10b      	bne.n	80083be <strncmp+0x9e>
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	f102 32ff 	add.w	r2, r2, #4294967295
 80083ac:	d1f4      	bne.n	8008398 <strncmp+0x78>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e000      	b.n	80083b4 <strncmp+0x94>
 80083b2:	4610      	mov	r0, r2
 80083b4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80083b8:	4770      	bx	lr
 80083ba:	792b      	ldrb	r3, [r5, #4]
 80083bc:	7924      	ldrb	r4, [r4, #4]
 80083be:	1b18      	subs	r0, r3, r4
 80083c0:	e7f8      	b.n	80083b4 <strncmp+0x94>
 80083c2:	4618      	mov	r0, r3
 80083c4:	e7f6      	b.n	80083b4 <strncmp+0x94>
 80083c6:	bf00      	nop

080083c8 <strncpy>:
 80083c8:	ea41 0300 	orr.w	r3, r1, r0
 80083cc:	f013 0f03 	tst.w	r3, #3
 80083d0:	460b      	mov	r3, r1
 80083d2:	b470      	push	{r4, r5, r6}
 80083d4:	bf14      	ite	ne
 80083d6:	2500      	movne	r5, #0
 80083d8:	2501      	moveq	r5, #1
 80083da:	2a03      	cmp	r2, #3
 80083dc:	bf94      	ite	ls
 80083de:	2500      	movls	r5, #0
 80083e0:	f005 0501 	andhi.w	r5, r5, #1
 80083e4:	4604      	mov	r4, r0
 80083e6:	b17d      	cbz	r5, 8008408 <strncpy+0x40>
 80083e8:	4619      	mov	r1, r3
 80083ea:	f853 5b04 	ldr.w	r5, [r3], #4
 80083ee:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 80083f2:	ea26 0605 	bic.w	r6, r6, r5
 80083f6:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80083fa:	d105      	bne.n	8008408 <strncpy+0x40>
 80083fc:	3a04      	subs	r2, #4
 80083fe:	f844 5b04 	str.w	r5, [r4], #4
 8008402:	2a03      	cmp	r2, #3
 8008404:	d8f0      	bhi.n	80083e8 <strncpy+0x20>
 8008406:	4619      	mov	r1, r3
 8008408:	b1a2      	cbz	r2, 8008434 <strncpy+0x6c>
 800840a:	780d      	ldrb	r5, [r1, #0]
 800840c:	1e53      	subs	r3, r2, #1
 800840e:	f804 5b01 	strb.w	r5, [r4], #1
 8008412:	4622      	mov	r2, r4
 8008414:	b145      	cbz	r5, 8008428 <strncpy+0x60>
 8008416:	b16b      	cbz	r3, 8008434 <strncpy+0x6c>
 8008418:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800841c:	3b01      	subs	r3, #1
 800841e:	f802 5b01 	strb.w	r5, [r2], #1
 8008422:	4614      	mov	r4, r2
 8008424:	2d00      	cmp	r5, #0
 8008426:	d1f6      	bne.n	8008416 <strncpy+0x4e>
 8008428:	2200      	movs	r2, #0
 800842a:	b11b      	cbz	r3, 8008434 <strncpy+0x6c>
 800842c:	3b01      	subs	r3, #1
 800842e:	f804 2b01 	strb.w	r2, [r4], #1
 8008432:	d1fb      	bne.n	800842c <strncpy+0x64>
 8008434:	bc70      	pop	{r4, r5, r6}
 8008436:	4770      	bx	lr

08008438 <_svfprintf_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b0c9      	sub	sp, #292	; 0x124
 800843e:	468b      	mov	fp, r1
 8008440:	4692      	mov	sl, r2
 8008442:	9311      	str	r3, [sp, #68]	; 0x44
 8008444:	9010      	str	r0, [sp, #64]	; 0x40
 8008446:	f003 fcab 	bl	800bda0 <_localeconv_r>
 800844a:	2300      	movs	r3, #0
 800844c:	2200      	movs	r2, #0
 800844e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8008452:	6800      	ldr	r0, [r0, #0]
 8008454:	9019      	str	r0, [sp, #100]	; 0x64
 8008456:	f7ff ff33 	bl	80082c0 <strlen>
 800845a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800845e:	061d      	lsls	r5, r3, #24
 8008460:	901a      	str	r0, [sp, #104]	; 0x68
 8008462:	d504      	bpl.n	800846e <_svfprintf_r+0x36>
 8008464:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f001 801f 	beq.w	80094ac <_svfprintf_r+0x1074>
 800846e:	ad3d      	add	r5, sp, #244	; 0xf4
 8008470:	9509      	str	r5, [sp, #36]	; 0x24
 8008472:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8008476:	9508      	str	r5, [sp, #32]
 8008478:	f246 6567 	movw	r5, #26215	; 0x6667
 800847c:	9808      	ldr	r0, [sp, #32]
 800847e:	f2c6 6566 	movt	r5, #26214	; 0x6666
 8008482:	951e      	str	r5, [sp, #120]	; 0x78
 8008484:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008486:	2300      	movs	r3, #0
 8008488:	ae23      	add	r6, sp, #140	; 0x8c
 800848a:	9312      	str	r3, [sp, #72]	; 0x48
 800848c:	1a2d      	subs	r5, r5, r0
 800848e:	9521      	str	r5, [sp, #132]	; 0x84
 8008490:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8008494:	9320      	str	r3, [sp, #128]	; 0x80
 8008496:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
 800849a:	931f      	str	r3, [sp, #124]	; 0x7c
 800849c:	930d      	str	r3, [sp, #52]	; 0x34
 800849e:	951b      	str	r5, [sp, #108]	; 0x6c
 80084a0:	963d      	str	r6, [sp, #244]	; 0xf4
 80084a2:	933f      	str	r3, [sp, #252]	; 0xfc
 80084a4:	933e      	str	r3, [sp, #248]	; 0xf8
 80084a6:	f89a 3000 	ldrb.w	r3, [sl]
 80084aa:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 80084ae:	bf18      	it	ne
 80084b0:	2201      	movne	r2, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	bf0c      	ite	eq
 80084b6:	2300      	moveq	r3, #0
 80084b8:	f002 0301 	andne.w	r3, r2, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80c6 	beq.w	800864e <_svfprintf_r+0x216>
 80084c2:	4652      	mov	r2, sl
 80084c4:	4657      	mov	r7, sl
 80084c6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80084ca:	3701      	adds	r7, #1
 80084cc:	1c19      	adds	r1, r3, #0
 80084ce:	bf18      	it	ne
 80084d0:	2101      	movne	r1, #1
 80084d2:	2b25      	cmp	r3, #37	; 0x25
 80084d4:	bf0c      	ite	eq
 80084d6:	2300      	moveq	r3, #0
 80084d8:	f001 0301 	andne.w	r3, r1, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1f2      	bne.n	80084c6 <_svfprintf_r+0x8e>
 80084e0:	ebb7 080a 	subs.w	r8, r7, sl
 80084e4:	d010      	beq.n	8008508 <_svfprintf_r+0xd0>
 80084e6:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80084e8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80084ea:	3401      	adds	r4, #1
 80084ec:	f8c6 a000 	str.w	sl, [r6]
 80084f0:	2c07      	cmp	r4, #7
 80084f2:	f8c6 8004 	str.w	r8, [r6, #4]
 80084f6:	4445      	add	r5, r8
 80084f8:	943e      	str	r4, [sp, #248]	; 0xf8
 80084fa:	953f      	str	r5, [sp, #252]	; 0xfc
 80084fc:	f300 808b 	bgt.w	8008616 <_svfprintf_r+0x1de>
 8008500:	3608      	adds	r6, #8
 8008502:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008504:	4445      	add	r5, r8
 8008506:	950d      	str	r5, [sp, #52]	; 0x34
 8008508:	783b      	ldrb	r3, [r7, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 808b 	beq.w	8008626 <_svfprintf_r+0x1ee>
 8008510:	f107 0a01 	add.w	sl, r7, #1
 8008514:	f04f 34ff 	mov.w	r4, #4294967295
 8008518:	2720      	movs	r7, #32
 800851a:	212b      	movs	r1, #43	; 0x2b
 800851c:	2300      	movs	r3, #0
 800851e:	930c      	str	r3, [sp, #48]	; 0x30
 8008520:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8008524:	930a      	str	r3, [sp, #40]	; 0x28
 8008526:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800852a:	f1a3 0220 	sub.w	r2, r3, #32
 800852e:	2a58      	cmp	r2, #88	; 0x58
 8008530:	f200 8147 	bhi.w	80087c2 <_svfprintf_r+0x38a>
 8008534:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008538:	01450157 	.word	0x01450157
 800853c:	02160145 	.word	0x02160145
 8008540:	01450145 	.word	0x01450145
 8008544:	01450145 	.word	0x01450145
 8008548:	01450145 	.word	0x01450145
 800854c:	008d005e 	.word	0x008d005e
 8008550:	006a0145 	.word	0x006a0145
 8008554:	0145015f 	.word	0x0145015f
 8008558:	017f017a 	.word	0x017f017a
 800855c:	017f017f 	.word	0x017f017f
 8008560:	017f017f 	.word	0x017f017f
 8008564:	017f017f 	.word	0x017f017f
 8008568:	017f017f 	.word	0x017f017f
 800856c:	01450145 	.word	0x01450145
 8008570:	01450145 	.word	0x01450145
 8008574:	01450145 	.word	0x01450145
 8008578:	01450145 	.word	0x01450145
 800857c:	01450145 	.word	0x01450145
 8008580:	024d0192 	.word	0x024d0192
 8008584:	024d0145 	.word	0x024d0145
 8008588:	01450145 	.word	0x01450145
 800858c:	01450145 	.word	0x01450145
 8008590:	01450283 	.word	0x01450283
 8008594:	01d30145 	.word	0x01d30145
 8008598:	01450145 	.word	0x01450145
 800859c:	01450145 	.word	0x01450145
 80085a0:	023c0145 	.word	0x023c0145
 80085a4:	01450145 	.word	0x01450145
 80085a8:	0145021b 	.word	0x0145021b
 80085ac:	01450145 	.word	0x01450145
 80085b0:	01450145 	.word	0x01450145
 80085b4:	01450145 	.word	0x01450145
 80085b8:	01450145 	.word	0x01450145
 80085bc:	022b0145 	.word	0x022b0145
 80085c0:	024d01f8 	.word	0x024d01f8
 80085c4:	024d024d 	.word	0x024d024d
 80085c8:	01f80211 	.word	0x01f80211
 80085cc:	01450145 	.word	0x01450145
 80085d0:	01450059 	.word	0x01450059
 80085d4:	01e501c4 	.word	0x01e501c4
 80085d8:	00590288 	.word	0x00590288
 80085dc:	00900145 	.word	0x00900145
 80085e0:	01040145 	.word	0x01040145
 80085e4:	01450145 	.word	0x01450145
 80085e8:	01a5      	.short	0x01a5
 80085ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80085ec:	f045 0510 	orr.w	r5, r5, #16
 80085f0:	950a      	str	r5, [sp, #40]	; 0x28
 80085f2:	e798      	b.n	8008526 <_svfprintf_r+0xee>
 80085f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80085f6:	682d      	ldr	r5, [r5, #0]
 80085f8:	950c      	str	r5, [sp, #48]	; 0x30
 80085fa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80085fc:	1d2b      	adds	r3, r5, #4
 80085fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008600:	2d00      	cmp	r5, #0
 8008602:	f280 8241 	bge.w	8008a88 <_svfprintf_r+0x650>
 8008606:	426d      	negs	r5, r5
 8008608:	9311      	str	r3, [sp, #68]	; 0x44
 800860a:	950c      	str	r5, [sp, #48]	; 0x30
 800860c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800860e:	f045 0504 	orr.w	r5, r5, #4
 8008612:	950a      	str	r5, [sp, #40]	; 0x28
 8008614:	e787      	b.n	8008526 <_svfprintf_r+0xee>
 8008616:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008618:	4659      	mov	r1, fp
 800861a:	aa3d      	add	r2, sp, #244	; 0xf4
 800861c:	f004 f934 	bl	800c888 <__ssprint_r>
 8008620:	b940      	cbnz	r0, 8008634 <_svfprintf_r+0x1fc>
 8008622:	ae23      	add	r6, sp, #140	; 0x8c
 8008624:	e76d      	b.n	8008502 <_svfprintf_r+0xca>
 8008626:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8008628:	b123      	cbz	r3, 8008634 <_svfprintf_r+0x1fc>
 800862a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800862c:	4659      	mov	r1, fp
 800862e:	aa3d      	add	r2, sp, #244	; 0xf4
 8008630:	f004 f92a 	bl	800c888 <__ssprint_r>
 8008634:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008638:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800863a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800863e:	bf18      	it	ne
 8008640:	f04f 35ff 	movne.w	r5, #4294967295
 8008644:	950d      	str	r5, [sp, #52]	; 0x34
 8008646:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008648:	b049      	add	sp, #292	; 0x124
 800864a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864e:	4657      	mov	r7, sl
 8008650:	e75a      	b.n	8008508 <_svfprintf_r+0xd0>
 8008652:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
 8008656:	e766      	b.n	8008526 <_svfprintf_r+0xee>
 8008658:	9811      	ldr	r0, [sp, #68]	; 0x44
 800865a:	2500      	movs	r5, #0
 800865c:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
 8008660:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008662:	6800      	ldr	r0, [r0, #0]
 8008664:	9317      	str	r3, [sp, #92]	; 0x5c
 8008666:	1d0f      	adds	r7, r1, #4
 8008668:	9013      	str	r0, [sp, #76]	; 0x4c
 800866a:	2800      	cmp	r0, #0
 800866c:	f000 87af 	beq.w	80095ce <_svfprintf_r+0x1196>
 8008670:	2c00      	cmp	r4, #0
 8008672:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008674:	f2c0 8767 	blt.w	8009546 <_svfprintf_r+0x110e>
 8008678:	4629      	mov	r1, r5
 800867a:	4622      	mov	r2, r4
 800867c:	f7fe ffdc 	bl	8007638 <memchr>
 8008680:	2800      	cmp	r0, #0
 8008682:	f000 87d3 	beq.w	800962c <_svfprintf_r+0x11f4>
 8008686:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008688:	9514      	str	r5, [sp, #80]	; 0x50
 800868a:	1a40      	subs	r0, r0, r1
 800868c:	900e      	str	r0, [sp, #56]	; 0x38
 800868e:	42a0      	cmp	r0, r4
 8008690:	f340 8608 	ble.w	80092a4 <_svfprintf_r+0xe6c>
 8008694:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8008698:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 800869c:	950b      	str	r5, [sp, #44]	; 0x2c
 800869e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80086a0:	9711      	str	r7, [sp, #68]	; 0x44
 80086a2:	940e      	str	r4, [sp, #56]	; 0x38
 80086a4:	9518      	str	r5, [sp, #96]	; 0x60
 80086a6:	b113      	cbz	r3, 80086ae <_svfprintf_r+0x276>
 80086a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80086aa:	3501      	adds	r5, #1
 80086ac:	950b      	str	r5, [sp, #44]	; 0x2c
 80086ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b0:	f013 0302 	ands.w	r3, r3, #2
 80086b4:	9315      	str	r3, [sp, #84]	; 0x54
 80086b6:	d002      	beq.n	80086be <_svfprintf_r+0x286>
 80086b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80086ba:	3502      	adds	r5, #2
 80086bc:	950b      	str	r5, [sp, #44]	; 0x2c
 80086be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c0:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80086c4:	9316      	str	r3, [sp, #88]	; 0x58
 80086c6:	f040 81e1 	bne.w	8008a8c <_svfprintf_r+0x654>
 80086ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80086ce:	1a2f      	subs	r7, r5, r0
 80086d0:	2f00      	cmp	r7, #0
 80086d2:	f340 81db 	ble.w	8008a8c <_svfprintf_r+0x654>
 80086d6:	2f10      	cmp	r7, #16
 80086d8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80086da:	f340 873b 	ble.w	8009554 <_svfprintf_r+0x111c>
 80086de:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80086e0:	f04f 0910 	mov.w	r9, #16
 80086e4:	f8df 8428 	ldr.w	r8, [pc, #1064]	; 8008b10 <_svfprintf_r+0x6d8>
 80086e8:	4623      	mov	r3, r4
 80086ea:	4644      	mov	r4, r8
 80086ec:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80086f0:	e002      	b.n	80086f8 <_svfprintf_r+0x2c0>
 80086f2:	3f10      	subs	r7, #16
 80086f4:	2f10      	cmp	r7, #16
 80086f6:	dd15      	ble.n	8008724 <_svfprintf_r+0x2ec>
 80086f8:	3301      	adds	r3, #1
 80086fa:	e886 0210 	stmia.w	r6, {r4, r9}
 80086fe:	3510      	adds	r5, #16
 8008700:	3608      	adds	r6, #8
 8008702:	2b07      	cmp	r3, #7
 8008704:	933e      	str	r3, [sp, #248]	; 0xf8
 8008706:	953f      	str	r5, [sp, #252]	; 0xfc
 8008708:	ddf3      	ble.n	80086f2 <_svfprintf_r+0x2ba>
 800870a:	4640      	mov	r0, r8
 800870c:	4659      	mov	r1, fp
 800870e:	aa3d      	add	r2, sp, #244	; 0xf4
 8008710:	ae23      	add	r6, sp, #140	; 0x8c
 8008712:	f004 f8b9 	bl	800c888 <__ssprint_r>
 8008716:	2800      	cmp	r0, #0
 8008718:	d18c      	bne.n	8008634 <_svfprintf_r+0x1fc>
 800871a:	3f10      	subs	r7, #16
 800871c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800871e:	2f10      	cmp	r7, #16
 8008720:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008722:	dce9      	bgt.n	80086f8 <_svfprintf_r+0x2c0>
 8008724:	46a0      	mov	r8, r4
 8008726:	461c      	mov	r4, r3
 8008728:	3401      	adds	r4, #1
 800872a:	f8c6 8000 	str.w	r8, [r6]
 800872e:	2c07      	cmp	r4, #7
 8008730:	6077      	str	r7, [r6, #4]
 8008732:	443d      	add	r5, r7
 8008734:	943e      	str	r4, [sp, #248]	; 0xf8
 8008736:	953f      	str	r5, [sp, #252]	; 0xfc
 8008738:	f300 8434 	bgt.w	8008fa4 <_svfprintf_r+0xb6c>
 800873c:	3608      	adds	r6, #8
 800873e:	e1a6      	b.n	8008a8e <_svfprintf_r+0x656>
 8008740:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008742:	9317      	str	r3, [sp, #92]	; 0x5c
 8008744:	06ea      	lsls	r2, r5, #27
 8008746:	f140 813c 	bpl.w	80089c2 <_svfprintf_r+0x58a>
 800874a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	3504      	adds	r5, #4
 8008750:	2201      	movs	r2, #1
 8008752:	1c19      	adds	r1, r3, #0
 8008754:	9511      	str	r5, [sp, #68]	; 0x44
 8008756:	bf18      	it	ne
 8008758:	2101      	movne	r1, #1
 800875a:	2000      	movs	r0, #0
 800875c:	f88d 011f 	strb.w	r0, [sp, #287]	; 0x11f
 8008760:	2c00      	cmp	r4, #0
 8008762:	bfa2      	ittt	ge
 8008764:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 8008766:	f025 0580 	bicge.w	r5, r5, #128	; 0x80
 800876a:	950a      	strge	r5, [sp, #40]	; 0x28
 800876c:	2c00      	cmp	r4, #0
 800876e:	bf18      	it	ne
 8008770:	f041 0101 	orrne.w	r1, r1, #1
 8008774:	2900      	cmp	r1, #0
 8008776:	f000 82c8 	beq.w	8008d0a <_svfprintf_r+0x8d2>
 800877a:	2a01      	cmp	r2, #1
 800877c:	f000 8406 	beq.w	8008f8c <_svfprintf_r+0xb54>
 8008780:	2a02      	cmp	r2, #2
 8008782:	bf18      	it	ne
 8008784:	aa3d      	addne	r2, sp, #244	; 0xf4
 8008786:	d101      	bne.n	800878c <_svfprintf_r+0x354>
 8008788:	e3f0      	b.n	8008f6c <_svfprintf_r+0xb34>
 800878a:	4602      	mov	r2, r0
 800878c:	f003 0107 	and.w	r1, r3, #7
 8008790:	1e50      	subs	r0, r2, #1
 8008792:	3130      	adds	r1, #48	; 0x30
 8008794:	08db      	lsrs	r3, r3, #3
 8008796:	f802 1c01 	strb.w	r1, [r2, #-1]
 800879a:	d1f6      	bne.n	800878a <_svfprintf_r+0x352>
 800879c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800879e:	9013      	str	r0, [sp, #76]	; 0x4c
 80087a0:	07ed      	lsls	r5, r5, #31
 80087a2:	f100 84f4 	bmi.w	800918e <_svfprintf_r+0xd56>
 80087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a8:	1a1b      	subs	r3, r3, r0
 80087aa:	930e      	str	r3, [sp, #56]	; 0x38
 80087ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80087ae:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80087b2:	42a5      	cmp	r5, r4
 80087b4:	bfb8      	it	lt
 80087b6:	4625      	movlt	r5, r4
 80087b8:	9414      	str	r4, [sp, #80]	; 0x50
 80087ba:	950b      	str	r5, [sp, #44]	; 0x2c
 80087bc:	2500      	movs	r5, #0
 80087be:	9518      	str	r5, [sp, #96]	; 0x60
 80087c0:	e771      	b.n	80086a6 <_svfprintf_r+0x26e>
 80087c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f43f af2e 	beq.w	8008626 <_svfprintf_r+0x1ee>
 80087ca:	2501      	movs	r5, #1
 80087cc:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
 80087d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80087d2:	2300      	movs	r3, #0
 80087d4:	950e      	str	r5, [sp, #56]	; 0x38
 80087d6:	ad33      	add	r5, sp, #204	; 0xcc
 80087d8:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80087dc:	9513      	str	r5, [sp, #76]	; 0x4c
 80087de:	2300      	movs	r3, #0
 80087e0:	9314      	str	r3, [sp, #80]	; 0x50
 80087e2:	9318      	str	r3, [sp, #96]	; 0x60
 80087e4:	e763      	b.n	80086ae <_svfprintf_r+0x276>
 80087e6:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f47f ae9b 	bne.w	8008526 <_svfprintf_r+0xee>
 80087f0:	f88d 711f 	strb.w	r7, [sp, #287]	; 0x11f
 80087f4:	e697      	b.n	8008526 <_svfprintf_r+0xee>
 80087f6:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80087fa:	2b2a      	cmp	r3, #42	; 0x2a
 80087fc:	f000 813a 	beq.w	8008a74 <_svfprintf_r+0x63c>
 8008800:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008804:	2400      	movs	r4, #0
 8008806:	2a09      	cmp	r2, #9
 8008808:	f63f ae8f 	bhi.w	800852a <_svfprintf_r+0xf2>
 800880c:	4650      	mov	r0, sl
 800880e:	2400      	movs	r4, #0
 8008810:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008814:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008818:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800881c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008820:	2a09      	cmp	r2, #9
 8008822:	4682      	mov	sl, r0
 8008824:	d9f4      	bls.n	8008810 <_svfprintf_r+0x3d8>
 8008826:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800882a:	e67e      	b.n	800852a <_svfprintf_r+0xf2>
 800882c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800882e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008832:	950a      	str	r5, [sp, #40]	; 0x28
 8008834:	e677      	b.n	8008526 <_svfprintf_r+0xee>
 8008836:	4650      	mov	r0, sl
 8008838:	2200      	movs	r2, #0
 800883a:	46b4      	mov	ip, r6
 800883c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008840:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008844:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008848:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800884c:	4682      	mov	sl, r0
 800884e:	2d09      	cmp	r5, #9
 8008850:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8008854:	d9f2      	bls.n	800883c <_svfprintf_r+0x404>
 8008856:	4666      	mov	r6, ip
 8008858:	920c      	str	r2, [sp, #48]	; 0x30
 800885a:	e666      	b.n	800852a <_svfprintf_r+0xf2>
 800885c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800885e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008860:	f045 0510 	orr.w	r5, r5, #16
 8008864:	950a      	str	r5, [sp, #40]	; 0x28
 8008866:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008868:	06e8      	lsls	r0, r5, #27
 800886a:	d561      	bpl.n	8008930 <_svfprintf_r+0x4f8>
 800886c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800886e:	682b      	ldr	r3, [r5, #0]
 8008870:	3504      	adds	r5, #4
 8008872:	9511      	str	r5, [sp, #68]	; 0x44
 8008874:	2b00      	cmp	r3, #0
 8008876:	db67      	blt.n	8008948 <_svfprintf_r+0x510>
 8008878:	bf0c      	ite	eq
 800887a:	2100      	moveq	r1, #0
 800887c:	2101      	movne	r1, #1
 800887e:	2201      	movs	r2, #1
 8008880:	e76e      	b.n	8008760 <_svfprintf_r+0x328>
 8008882:	4d9f      	ldr	r5, [pc, #636]	; (8008b00 <_svfprintf_r+0x6c8>)
 8008884:	9317      	str	r3, [sp, #92]	; 0x5c
 8008886:	9520      	str	r5, [sp, #128]	; 0x80
 8008888:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800888a:	06eb      	lsls	r3, r5, #27
 800888c:	d575      	bpl.n	800897a <_svfprintf_r+0x542>
 800888e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	3504      	adds	r5, #4
 8008894:	9511      	str	r5, [sp, #68]	; 0x44
 8008896:	1c19      	adds	r1, r3, #0
 8008898:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800889a:	bf18      	it	ne
 800889c:	2101      	movne	r1, #1
 800889e:	2202      	movs	r2, #2
 80088a0:	420d      	tst	r5, r1
 80088a2:	f43f af5a 	beq.w	800875a <_svfprintf_r+0x322>
 80088a6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80088a8:	2230      	movs	r2, #48	; 0x30
 80088aa:	2101      	movs	r1, #1
 80088ac:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 80088b0:	2202      	movs	r2, #2
 80088b2:	f88d 511d 	strb.w	r5, [sp, #285]	; 0x11d
 80088b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088b8:	f045 0502 	orr.w	r5, r5, #2
 80088bc:	950a      	str	r5, [sp, #40]	; 0x28
 80088be:	e74c      	b.n	800875a <_svfprintf_r+0x322>
 80088c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088c2:	06e8      	lsls	r0, r5, #27
 80088c4:	f100 83a3 	bmi.w	800900e <_svfprintf_r+0xbd6>
 80088c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088ca:	0669      	lsls	r1, r5, #25
 80088cc:	f140 839f 	bpl.w	800900e <_svfprintf_r+0xbd6>
 80088d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80088d2:	682b      	ldr	r3, [r5, #0]
 80088d4:	3504      	adds	r5, #4
 80088d6:	9511      	str	r5, [sp, #68]	; 0x44
 80088d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80088da:	801d      	strh	r5, [r3, #0]
 80088dc:	e5e3      	b.n	80084a6 <_svfprintf_r+0x6e>
 80088de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80088e2:	f045 0510 	orr.w	r5, r5, #16
 80088e6:	950a      	str	r5, [sp, #40]	; 0x28
 80088e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088ea:	f015 0110 	ands.w	r1, r5, #16
 80088ee:	d00d      	beq.n	800890c <_svfprintf_r+0x4d4>
 80088f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80088f2:	2200      	movs	r2, #0
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	3504      	adds	r5, #4
 80088f8:	9511      	str	r5, [sp, #68]	; 0x44
 80088fa:	1a99      	subs	r1, r3, r2
 80088fc:	bf18      	it	ne
 80088fe:	2101      	movne	r1, #1
 8008900:	e72b      	b.n	800875a <_svfprintf_r+0x322>
 8008902:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008904:	9317      	str	r3, [sp, #92]	; 0x5c
 8008906:	f015 0110 	ands.w	r1, r5, #16
 800890a:	d1f1      	bne.n	80088f0 <_svfprintf_r+0x4b8>
 800890c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800890e:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 8008912:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008914:	bf1a      	itte	ne
 8008916:	460a      	movne	r2, r1
 8008918:	882b      	ldrhne	r3, [r5, #0]
 800891a:	682b      	ldreq	r3, [r5, #0]
 800891c:	3504      	adds	r5, #4
 800891e:	9511      	str	r5, [sp, #68]	; 0x44
 8008920:	1c19      	adds	r1, r3, #0
 8008922:	bf18      	it	ne
 8008924:	2101      	movne	r1, #1
 8008926:	e718      	b.n	800875a <_svfprintf_r+0x322>
 8008928:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800892a:	9317      	str	r3, [sp, #92]	; 0x5c
 800892c:	06e8      	lsls	r0, r5, #27
 800892e:	d49d      	bmi.n	800886c <_svfprintf_r+0x434>
 8008930:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008932:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008936:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008938:	bf0c      	ite	eq
 800893a:	682b      	ldreq	r3, [r5, #0]
 800893c:	f9b5 3000 	ldrshne.w	r3, [r5]
 8008940:	3504      	adds	r5, #4
 8008942:	9511      	str	r5, [sp, #68]	; 0x44
 8008944:	2b00      	cmp	r3, #0
 8008946:	da97      	bge.n	8008878 <_svfprintf_r+0x440>
 8008948:	425b      	negs	r3, r3
 800894a:	1c19      	adds	r1, r3, #0
 800894c:	bf18      	it	ne
 800894e:	2101      	movne	r1, #1
 8008950:	222d      	movs	r2, #45	; 0x2d
 8008952:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8008956:	2201      	movs	r2, #1
 8008958:	e702      	b.n	8008760 <_svfprintf_r+0x328>
 800895a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800895c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8008960:	950a      	str	r5, [sp, #40]	; 0x28
 8008962:	e5e0      	b.n	8008526 <_svfprintf_r+0xee>
 8008964:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008966:	f045 0501 	orr.w	r5, r5, #1
 800896a:	950a      	str	r5, [sp, #40]	; 0x28
 800896c:	e5db      	b.n	8008526 <_svfprintf_r+0xee>
 800896e:	4d65      	ldr	r5, [pc, #404]	; (8008b04 <_svfprintf_r+0x6cc>)
 8008970:	9317      	str	r3, [sp, #92]	; 0x5c
 8008972:	9520      	str	r5, [sp, #128]	; 0x80
 8008974:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008976:	06eb      	lsls	r3, r5, #27
 8008978:	d489      	bmi.n	800888e <_svfprintf_r+0x456>
 800897a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800897c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008980:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008982:	bf0c      	ite	eq
 8008984:	682b      	ldreq	r3, [r5, #0]
 8008986:	882b      	ldrhne	r3, [r5, #0]
 8008988:	3504      	adds	r5, #4
 800898a:	9511      	str	r5, [sp, #68]	; 0x44
 800898c:	e783      	b.n	8008896 <_svfprintf_r+0x45e>
 800898e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008990:	2501      	movs	r5, #1
 8008992:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008994:	950b      	str	r5, [sp, #44]	; 0x2c
 8008996:	1d1d      	adds	r5, r3, #4
 8008998:	9511      	str	r5, [sp, #68]	; 0x44
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	2501      	movs	r5, #1
 800899e:	2300      	movs	r3, #0
 80089a0:	950e      	str	r5, [sp, #56]	; 0x38
 80089a2:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80089a6:	ad33      	add	r5, sp, #204	; 0xcc
 80089a8:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
 80089ac:	9513      	str	r5, [sp, #76]	; 0x4c
 80089ae:	e716      	b.n	80087de <_svfprintf_r+0x3a6>
 80089b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80089b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80089b4:	f045 0510 	orr.w	r5, r5, #16
 80089b8:	950a      	str	r5, [sp, #40]	; 0x28
 80089ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80089bc:	06ea      	lsls	r2, r5, #27
 80089be:	f53f aec4 	bmi.w	800874a <_svfprintf_r+0x312>
 80089c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80089c4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089c8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80089ca:	bf14      	ite	ne
 80089cc:	882b      	ldrhne	r3, [r5, #0]
 80089ce:	682b      	ldreq	r3, [r5, #0]
 80089d0:	e6bd      	b.n	800874e <_svfprintf_r+0x316>
 80089d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80089d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80089d6:	1deb      	adds	r3, r5, #7
 80089d8:	f023 0307 	bic.w	r3, r3, #7
 80089dc:	f103 0508 	add.w	r5, r3, #8
 80089e0:	9511      	str	r5, [sp, #68]	; 0x44
 80089e2:	f8d3 8000 	ldr.w	r8, [r3]
 80089e6:	685f      	ldr	r7, [r3, #4]
 80089e8:	4640      	mov	r0, r8
 80089ea:	4642      	mov	r2, r8
 80089ec:	4639      	mov	r1, r7
 80089ee:	463b      	mov	r3, r7
 80089f0:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80089f4:	f003 feba 	bl	800c76c <__fpclassifyd>
 80089f8:	2801      	cmp	r0, #1
 80089fa:	4640      	mov	r0, r8
 80089fc:	f040 83d4 	bne.w	80091a8 <_svfprintf_r+0xd70>
 8008a00:	2300      	movs	r3, #0
 8008a02:	2200      	movs	r2, #0
 8008a04:	4639      	mov	r1, r7
 8008a06:	f005 faa3 	bl	800df50 <__aeabi_dcmplt>
 8008a0a:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8008a0e:	b110      	cbz	r0, 8008a16 <_svfprintf_r+0x5de>
 8008a10:	232d      	movs	r3, #45	; 0x2d
 8008a12:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8008a16:	2503      	movs	r5, #3
 8008a18:	950b      	str	r5, [sp, #44]	; 0x2c
 8008a1a:	2500      	movs	r5, #0
 8008a1c:	9514      	str	r5, [sp, #80]	; 0x50
 8008a1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a20:	4a39      	ldr	r2, [pc, #228]	; (8008b08 <_svfprintf_r+0x6d0>)
 8008a22:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8008a26:	4939      	ldr	r1, [pc, #228]	; (8008b0c <_svfprintf_r+0x6d4>)
 8008a28:	950a      	str	r5, [sp, #40]	; 0x28
 8008a2a:	2503      	movs	r5, #3
 8008a2c:	950e      	str	r5, [sp, #56]	; 0x38
 8008a2e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008a30:	2d47      	cmp	r5, #71	; 0x47
 8008a32:	bfd8      	it	le
 8008a34:	4611      	movle	r1, r2
 8008a36:	2500      	movs	r5, #0
 8008a38:	9113      	str	r1, [sp, #76]	; 0x4c
 8008a3a:	9518      	str	r5, [sp, #96]	; 0x60
 8008a3c:	e633      	b.n	80086a6 <_svfprintf_r+0x26e>
 8008a3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a40:	f045 0508 	orr.w	r5, r5, #8
 8008a44:	950a      	str	r5, [sp, #40]	; 0x28
 8008a46:	e56e      	b.n	8008526 <_svfprintf_r+0xee>
 8008a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a4a:	2078      	movs	r0, #120	; 0x78
 8008a4c:	2230      	movs	r2, #48	; 0x30
 8008a4e:	9017      	str	r0, [sp, #92]	; 0x5c
 8008a50:	1d1d      	adds	r5, r3, #4
 8008a52:	9511      	str	r5, [sp, #68]	; 0x44
 8008a54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f045 0502 	orr.w	r5, r5, #2
 8008a5c:	950a      	str	r5, [sp, #40]	; 0x28
 8008a5e:	4d28      	ldr	r5, [pc, #160]	; (8008b00 <_svfprintf_r+0x6c8>)
 8008a60:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
 8008a64:	2202      	movs	r2, #2
 8008a66:	1c19      	adds	r1, r3, #0
 8008a68:	f88d 011d 	strb.w	r0, [sp, #285]	; 0x11d
 8008a6c:	bf18      	it	ne
 8008a6e:	2101      	movne	r1, #1
 8008a70:	9520      	str	r5, [sp, #128]	; 0x80
 8008a72:	e672      	b.n	800875a <_svfprintf_r+0x322>
 8008a74:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008a76:	1d2b      	adds	r3, r5, #4
 8008a78:	682c      	ldr	r4, [r5, #0]
 8008a7a:	2c00      	cmp	r4, #0
 8008a7c:	bfbc      	itt	lt
 8008a7e:	9311      	strlt	r3, [sp, #68]	; 0x44
 8008a80:	f04f 34ff 	movlt.w	r4, #4294967295
 8008a84:	f6ff ad4f 	blt.w	8008526 <_svfprintf_r+0xee>
 8008a88:	9311      	str	r3, [sp, #68]	; 0x44
 8008a8a:	e54c      	b.n	8008526 <_svfprintf_r+0xee>
 8008a8c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008a8e:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8008a92:	b16b      	cbz	r3, 8008ab0 <_svfprintf_r+0x678>
 8008a94:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008a96:	ab47      	add	r3, sp, #284	; 0x11c
 8008a98:	3303      	adds	r3, #3
 8008a9a:	6033      	str	r3, [r6, #0]
 8008a9c:	3401      	adds	r4, #1
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	2c07      	cmp	r4, #7
 8008aa2:	6073      	str	r3, [r6, #4]
 8008aa4:	441d      	add	r5, r3
 8008aa6:	943e      	str	r4, [sp, #248]	; 0xf8
 8008aa8:	953f      	str	r5, [sp, #252]	; 0xfc
 8008aaa:	f300 81f8 	bgt.w	8008e9e <_svfprintf_r+0xa66>
 8008aae:	3608      	adds	r6, #8
 8008ab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ab2:	b163      	cbz	r3, 8008ace <_svfprintf_r+0x696>
 8008ab4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008ab6:	ab47      	add	r3, sp, #284	; 0x11c
 8008ab8:	6033      	str	r3, [r6, #0]
 8008aba:	2302      	movs	r3, #2
 8008abc:	3401      	adds	r4, #1
 8008abe:	6073      	str	r3, [r6, #4]
 8008ac0:	2c07      	cmp	r4, #7
 8008ac2:	441d      	add	r5, r3
 8008ac4:	943e      	str	r4, [sp, #248]	; 0xf8
 8008ac6:	953f      	str	r5, [sp, #252]	; 0xfc
 8008ac8:	f300 81f4 	bgt.w	8008eb4 <_svfprintf_r+0xa7c>
 8008acc:	3608      	adds	r6, #8
 8008ace:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ad0:	2b80      	cmp	r3, #128	; 0x80
 8008ad2:	f000 812e 	beq.w	8008d32 <_svfprintf_r+0x8fa>
 8008ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ad8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008ada:	1a1f      	subs	r7, r3, r0
 8008adc:	2f00      	cmp	r7, #0
 8008ade:	dd42      	ble.n	8008b66 <_svfprintf_r+0x72e>
 8008ae0:	2f10      	cmp	r7, #16
 8008ae2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008ae4:	bfd8      	it	le
 8008ae6:	f8df 802c 	ldrle.w	r8, [pc, #44]	; 8008b14 <_svfprintf_r+0x6dc>
 8008aea:	dd31      	ble.n	8008b50 <_svfprintf_r+0x718>
 8008aec:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8008b14 <_svfprintf_r+0x6dc>
 8008af0:	4623      	mov	r3, r4
 8008af2:	f04f 0910 	mov.w	r9, #16
 8008af6:	4644      	mov	r4, r8
 8008af8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008afc:	e00f      	b.n	8008b1e <_svfprintf_r+0x6e6>
 8008afe:	bf00      	nop
 8008b00:	08028c88 	.word	0x08028c88
 8008b04:	08028c74 	.word	0x08028c74
 8008b08:	08028c64 	.word	0x08028c64
 8008b0c:	08028c68 	.word	0x08028c68
 8008b10:	08026d50 	.word	0x08026d50
 8008b14:	08026d60 	.word	0x08026d60
 8008b18:	3f10      	subs	r7, #16
 8008b1a:	2f10      	cmp	r7, #16
 8008b1c:	dd16      	ble.n	8008b4c <_svfprintf_r+0x714>
 8008b1e:	3301      	adds	r3, #1
 8008b20:	e886 0210 	stmia.w	r6, {r4, r9}
 8008b24:	3510      	adds	r5, #16
 8008b26:	3608      	adds	r6, #8
 8008b28:	2b07      	cmp	r3, #7
 8008b2a:	933e      	str	r3, [sp, #248]	; 0xf8
 8008b2c:	953f      	str	r5, [sp, #252]	; 0xfc
 8008b2e:	ddf3      	ble.n	8008b18 <_svfprintf_r+0x6e0>
 8008b30:	4640      	mov	r0, r8
 8008b32:	4659      	mov	r1, fp
 8008b34:	aa3d      	add	r2, sp, #244	; 0xf4
 8008b36:	ae23      	add	r6, sp, #140	; 0x8c
 8008b38:	f003 fea6 	bl	800c888 <__ssprint_r>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	f47f ad79 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008b42:	3f10      	subs	r7, #16
 8008b44:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008b46:	2f10      	cmp	r7, #16
 8008b48:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008b4a:	dce8      	bgt.n	8008b1e <_svfprintf_r+0x6e6>
 8008b4c:	46a0      	mov	r8, r4
 8008b4e:	461c      	mov	r4, r3
 8008b50:	3401      	adds	r4, #1
 8008b52:	f8c6 8000 	str.w	r8, [r6]
 8008b56:	2c07      	cmp	r4, #7
 8008b58:	6077      	str	r7, [r6, #4]
 8008b5a:	443d      	add	r5, r7
 8008b5c:	943e      	str	r4, [sp, #248]	; 0xf8
 8008b5e:	953f      	str	r5, [sp, #252]	; 0xfc
 8008b60:	f300 8192 	bgt.w	8008e88 <_svfprintf_r+0xa50>
 8008b64:	3608      	adds	r6, #8
 8008b66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b68:	05ca      	lsls	r2, r1, #23
 8008b6a:	d475      	bmi.n	8008c58 <_svfprintf_r+0x820>
 8008b6c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b70:	3401      	adds	r4, #1
 8008b72:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008b74:	2c07      	cmp	r4, #7
 8008b76:	441d      	add	r5, r3
 8008b78:	6073      	str	r3, [r6, #4]
 8008b7a:	6030      	str	r0, [r6, #0]
 8008b7c:	953f      	str	r5, [sp, #252]	; 0xfc
 8008b7e:	943e      	str	r4, [sp, #248]	; 0xf8
 8008b80:	dc5f      	bgt.n	8008c42 <_svfprintf_r+0x80a>
 8008b82:	3608      	adds	r6, #8
 8008b84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b86:	074b      	lsls	r3, r1, #29
 8008b88:	d541      	bpl.n	8008c0e <_svfprintf_r+0x7d6>
 8008b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b8e:	1ad7      	subs	r7, r2, r3
 8008b90:	2f00      	cmp	r7, #0
 8008b92:	dd3c      	ble.n	8008c0e <_svfprintf_r+0x7d6>
 8008b94:	2f10      	cmp	r7, #16
 8008b96:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008b98:	bfd8      	it	le
 8008b9a:	f8df 8334 	ldrle.w	r8, [pc, #820]	; 8008ed0 <_svfprintf_r+0xa98>
 8008b9e:	dd24      	ble.n	8008bea <_svfprintf_r+0x7b2>
 8008ba0:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8008ed0 <_svfprintf_r+0xa98>
 8008ba4:	4623      	mov	r3, r4
 8008ba6:	f04f 0910 	mov.w	r9, #16
 8008baa:	4644      	mov	r4, r8
 8008bac:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008bb0:	e002      	b.n	8008bb8 <_svfprintf_r+0x780>
 8008bb2:	3f10      	subs	r7, #16
 8008bb4:	2f10      	cmp	r7, #16
 8008bb6:	dd16      	ble.n	8008be6 <_svfprintf_r+0x7ae>
 8008bb8:	3301      	adds	r3, #1
 8008bba:	e886 0210 	stmia.w	r6, {r4, r9}
 8008bbe:	3510      	adds	r5, #16
 8008bc0:	3608      	adds	r6, #8
 8008bc2:	2b07      	cmp	r3, #7
 8008bc4:	933e      	str	r3, [sp, #248]	; 0xf8
 8008bc6:	953f      	str	r5, [sp, #252]	; 0xfc
 8008bc8:	ddf3      	ble.n	8008bb2 <_svfprintf_r+0x77a>
 8008bca:	4640      	mov	r0, r8
 8008bcc:	4659      	mov	r1, fp
 8008bce:	aa3d      	add	r2, sp, #244	; 0xf4
 8008bd0:	ae23      	add	r6, sp, #140	; 0x8c
 8008bd2:	f003 fe59 	bl	800c888 <__ssprint_r>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f47f ad2c 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008bdc:	3f10      	subs	r7, #16
 8008bde:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008be0:	2f10      	cmp	r7, #16
 8008be2:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008be4:	dce8      	bgt.n	8008bb8 <_svfprintf_r+0x780>
 8008be6:	46a0      	mov	r8, r4
 8008be8:	461c      	mov	r4, r3
 8008bea:	3401      	adds	r4, #1
 8008bec:	f8c6 8000 	str.w	r8, [r6]
 8008bf0:	2c07      	cmp	r4, #7
 8008bf2:	6077      	str	r7, [r6, #4]
 8008bf4:	443d      	add	r5, r7
 8008bf6:	943e      	str	r4, [sp, #248]	; 0xf8
 8008bf8:	953f      	str	r5, [sp, #252]	; 0xfc
 8008bfa:	dd08      	ble.n	8008c0e <_svfprintf_r+0x7d6>
 8008bfc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008bfe:	4659      	mov	r1, fp
 8008c00:	aa3d      	add	r2, sp, #244	; 0xf4
 8008c02:	f003 fe41 	bl	800c888 <__ssprint_r>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f47f ad14 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008c0c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008c0e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c14:	4291      	cmp	r1, r2
 8008c16:	bfac      	ite	ge
 8008c18:	1840      	addge	r0, r0, r1
 8008c1a:	1880      	addlt	r0, r0, r2
 8008c1c:	900d      	str	r0, [sp, #52]	; 0x34
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	f040 8124 	bne.w	8008e6c <_svfprintf_r+0xa34>
 8008c24:	2300      	movs	r3, #0
 8008c26:	ae23      	add	r6, sp, #140	; 0x8c
 8008c28:	933e      	str	r3, [sp, #248]	; 0xf8
 8008c2a:	e43c      	b.n	80084a6 <_svfprintf_r+0x6e>
 8008c2c:	46a0      	mov	r8, r4
 8008c2e:	461c      	mov	r4, r3
 8008c30:	3401      	adds	r4, #1
 8008c32:	f8c6 8000 	str.w	r8, [r6]
 8008c36:	2c07      	cmp	r4, #7
 8008c38:	6077      	str	r7, [r6, #4]
 8008c3a:	443d      	add	r5, r7
 8008c3c:	943e      	str	r4, [sp, #248]	; 0xf8
 8008c3e:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c40:	dd9f      	ble.n	8008b82 <_svfprintf_r+0x74a>
 8008c42:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c44:	4659      	mov	r1, fp
 8008c46:	aa3d      	add	r2, sp, #244	; 0xf4
 8008c48:	f003 fe1e 	bl	800c888 <__ssprint_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	f47f acf1 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008c52:	ae23      	add	r6, sp, #140	; 0x8c
 8008c54:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008c56:	e795      	b.n	8008b84 <_svfprintf_r+0x74c>
 8008c58:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008c5a:	2965      	cmp	r1, #101	; 0x65
 8008c5c:	f340 80a6 	ble.w	8008dac <_svfprintf_r+0x974>
 8008c60:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8008c64:	2200      	movs	r2, #0
 8008c66:	2300      	movs	r3, #0
 8008c68:	f005 f968 	bl	800df3c <__aeabi_dcmpeq>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f000 8133 	beq.w	8008ed8 <_svfprintf_r+0xaa0>
 8008c72:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008c74:	2301      	movs	r3, #1
 8008c76:	6073      	str	r3, [r6, #4]
 8008c78:	3501      	adds	r5, #1
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	4b93      	ldr	r3, [pc, #588]	; (8008ecc <_svfprintf_r+0xa94>)
 8008c7e:	2c07      	cmp	r4, #7
 8008c80:	6033      	str	r3, [r6, #0]
 8008c82:	953f      	str	r5, [sp, #252]	; 0xfc
 8008c84:	943e      	str	r4, [sp, #248]	; 0xf8
 8008c86:	f300 82b8 	bgt.w	80091fa <_svfprintf_r+0xdc2>
 8008c8a:	3608      	adds	r6, #8
 8008c8c:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8008c8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c90:	429a      	cmp	r2, r3
 8008c92:	dc03      	bgt.n	8008c9c <_svfprintf_r+0x864>
 8008c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c96:	07db      	lsls	r3, r3, #31
 8008c98:	f57f af74 	bpl.w	8008b84 <_svfprintf_r+0x74c>
 8008c9c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008c9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008ca0:	3401      	adds	r4, #1
 8008ca2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008ca4:	2c07      	cmp	r4, #7
 8008ca6:	4405      	add	r5, r0
 8008ca8:	6070      	str	r0, [r6, #4]
 8008caa:	6031      	str	r1, [r6, #0]
 8008cac:	953f      	str	r5, [sp, #252]	; 0xfc
 8008cae:	943e      	str	r4, [sp, #248]	; 0xf8
 8008cb0:	f300 8303 	bgt.w	80092ba <_svfprintf_r+0xe82>
 8008cb4:	3608      	adds	r6, #8
 8008cb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cb8:	1e57      	subs	r7, r2, #1
 8008cba:	2f00      	cmp	r7, #0
 8008cbc:	f77f af62 	ble.w	8008b84 <_svfprintf_r+0x74c>
 8008cc0:	2f10      	cmp	r7, #16
 8008cc2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008cc4:	f340 84e0 	ble.w	8009688 <_svfprintf_r+0x1250>
 8008cc8:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8008ed4 <_svfprintf_r+0xa9c>
 8008ccc:	4623      	mov	r3, r4
 8008cce:	f04f 0910 	mov.w	r9, #16
 8008cd2:	4644      	mov	r4, r8
 8008cd4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008cd8:	e002      	b.n	8008ce0 <_svfprintf_r+0x8a8>
 8008cda:	3f10      	subs	r7, #16
 8008cdc:	2f10      	cmp	r7, #16
 8008cde:	dda5      	ble.n	8008c2c <_svfprintf_r+0x7f4>
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	e886 0210 	stmia.w	r6, {r4, r9}
 8008ce6:	3510      	adds	r5, #16
 8008ce8:	3608      	adds	r6, #8
 8008cea:	2b07      	cmp	r3, #7
 8008cec:	933e      	str	r3, [sp, #248]	; 0xf8
 8008cee:	953f      	str	r5, [sp, #252]	; 0xfc
 8008cf0:	ddf3      	ble.n	8008cda <_svfprintf_r+0x8a2>
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	aa3d      	add	r2, sp, #244	; 0xf4
 8008cf8:	ae23      	add	r6, sp, #140	; 0x8c
 8008cfa:	f003 fdc5 	bl	800c888 <__ssprint_r>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	f47f ac98 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008d04:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008d06:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008d08:	e7e7      	b.n	8008cda <_svfprintf_r+0x8a2>
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	f040 80b8 	bne.w	8008e80 <_svfprintf_r+0xa48>
 8008d10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008d12:	07e9      	lsls	r1, r5, #31
 8008d14:	bf5e      	ittt	pl
 8008d16:	920e      	strpl	r2, [sp, #56]	; 0x38
 8008d18:	ad3d      	addpl	r5, sp, #244	; 0xf4
 8008d1a:	9513      	strpl	r5, [sp, #76]	; 0x4c
 8008d1c:	f57f ad46 	bpl.w	80087ac <_svfprintf_r+0x374>
 8008d20:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008d22:	2330      	movs	r3, #48	; 0x30
 8008d24:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8008d28:	950e      	str	r5, [sp, #56]	; 0x38
 8008d2a:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8008d2e:	9513      	str	r5, [sp, #76]	; 0x4c
 8008d30:	e53c      	b.n	80087ac <_svfprintf_r+0x374>
 8008d32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d36:	1a47      	subs	r7, r0, r1
 8008d38:	2f00      	cmp	r7, #0
 8008d3a:	f77f aecc 	ble.w	8008ad6 <_svfprintf_r+0x69e>
 8008d3e:	2f10      	cmp	r7, #16
 8008d40:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008d42:	bfd8      	it	le
 8008d44:	f8df 818c 	ldrle.w	r8, [pc, #396]	; 8008ed4 <_svfprintf_r+0xa9c>
 8008d48:	dd24      	ble.n	8008d94 <_svfprintf_r+0x95c>
 8008d4a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8008ed4 <_svfprintf_r+0xa9c>
 8008d4e:	4623      	mov	r3, r4
 8008d50:	f04f 0910 	mov.w	r9, #16
 8008d54:	4644      	mov	r4, r8
 8008d56:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008d5a:	e002      	b.n	8008d62 <_svfprintf_r+0x92a>
 8008d5c:	3f10      	subs	r7, #16
 8008d5e:	2f10      	cmp	r7, #16
 8008d60:	dd16      	ble.n	8008d90 <_svfprintf_r+0x958>
 8008d62:	3301      	adds	r3, #1
 8008d64:	e886 0210 	stmia.w	r6, {r4, r9}
 8008d68:	3510      	adds	r5, #16
 8008d6a:	3608      	adds	r6, #8
 8008d6c:	2b07      	cmp	r3, #7
 8008d6e:	933e      	str	r3, [sp, #248]	; 0xf8
 8008d70:	953f      	str	r5, [sp, #252]	; 0xfc
 8008d72:	ddf3      	ble.n	8008d5c <_svfprintf_r+0x924>
 8008d74:	4640      	mov	r0, r8
 8008d76:	4659      	mov	r1, fp
 8008d78:	aa3d      	add	r2, sp, #244	; 0xf4
 8008d7a:	ae23      	add	r6, sp, #140	; 0x8c
 8008d7c:	f003 fd84 	bl	800c888 <__ssprint_r>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	f47f ac57 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008d86:	3f10      	subs	r7, #16
 8008d88:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008d8a:	2f10      	cmp	r7, #16
 8008d8c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008d8e:	dce8      	bgt.n	8008d62 <_svfprintf_r+0x92a>
 8008d90:	46a0      	mov	r8, r4
 8008d92:	461c      	mov	r4, r3
 8008d94:	3401      	adds	r4, #1
 8008d96:	f8c6 8000 	str.w	r8, [r6]
 8008d9a:	2c07      	cmp	r4, #7
 8008d9c:	6077      	str	r7, [r6, #4]
 8008d9e:	443d      	add	r5, r7
 8008da0:	943e      	str	r4, [sp, #248]	; 0xf8
 8008da2:	953f      	str	r5, [sp, #252]	; 0xfc
 8008da4:	f300 81e8 	bgt.w	8009178 <_svfprintf_r+0xd40>
 8008da8:	3608      	adds	r6, #8
 8008daa:	e694      	b.n	8008ad6 <_svfprintf_r+0x69e>
 8008dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dae:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	f340 8196 	ble.w	80090e2 <_svfprintf_r+0xcaa>
 8008db6:	3401      	adds	r4, #1
 8008db8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008dba:	3501      	adds	r5, #1
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	2c07      	cmp	r4, #7
 8008dc0:	6073      	str	r3, [r6, #4]
 8008dc2:	6031      	str	r1, [r6, #0]
 8008dc4:	953f      	str	r5, [sp, #252]	; 0xfc
 8008dc6:	943e      	str	r4, [sp, #248]	; 0xf8
 8008dc8:	f300 81a6 	bgt.w	8009118 <_svfprintf_r+0xce0>
 8008dcc:	3608      	adds	r6, #8
 8008dce:	3401      	adds	r4, #1
 8008dd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008dd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008dd4:	2c07      	cmp	r4, #7
 8008dd6:	441d      	add	r5, r3
 8008dd8:	6073      	str	r3, [r6, #4]
 8008dda:	6032      	str	r2, [r6, #0]
 8008ddc:	943e      	str	r4, [sp, #248]	; 0xf8
 8008dde:	953f      	str	r5, [sp, #252]	; 0xfc
 8008de0:	f300 81a6 	bgt.w	8009130 <_svfprintf_r+0xcf8>
 8008de4:	3608      	adds	r6, #8
 8008de6:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8008dea:	2200      	movs	r2, #0
 8008dec:	2300      	movs	r3, #0
 8008dee:	f005 f8a5 	bl	800df3c <__aeabi_dcmpeq>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f040 80e1 	bne.w	8008fba <_svfprintf_r+0xb82>
 8008df8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008dfa:	3401      	adds	r4, #1
 8008dfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008dfe:	1e42      	subs	r2, r0, #1
 8008e00:	6072      	str	r2, [r6, #4]
 8008e02:	1c4b      	adds	r3, r1, #1
 8008e04:	2c07      	cmp	r4, #7
 8008e06:	6033      	str	r3, [r6, #0]
 8008e08:	4415      	add	r5, r2
 8008e0a:	943e      	str	r4, [sp, #248]	; 0xf8
 8008e0c:	953f      	str	r5, [sp, #252]	; 0xfc
 8008e0e:	dc21      	bgt.n	8008e54 <_svfprintf_r+0xa1c>
 8008e10:	3608      	adds	r6, #8
 8008e12:	3401      	adds	r4, #1
 8008e14:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008e16:	2c07      	cmp	r4, #7
 8008e18:	ab40      	add	r3, sp, #256	; 0x100
 8008e1a:	4405      	add	r5, r0
 8008e1c:	6033      	str	r3, [r6, #0]
 8008e1e:	6070      	str	r0, [r6, #4]
 8008e20:	953f      	str	r5, [sp, #252]	; 0xfc
 8008e22:	943e      	str	r4, [sp, #248]	; 0xf8
 8008e24:	f77f aead 	ble.w	8008b82 <_svfprintf_r+0x74a>
 8008e28:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e2a:	4659      	mov	r1, fp
 8008e2c:	aa3d      	add	r2, sp, #244	; 0xf4
 8008e2e:	f003 fd2b 	bl	800c888 <__ssprint_r>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f47f abfe 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008e38:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008e3a:	ae23      	add	r6, sp, #140	; 0x8c
 8008e3c:	e6a2      	b.n	8008b84 <_svfprintf_r+0x74c>
 8008e3e:	46a0      	mov	r8, r4
 8008e40:	461c      	mov	r4, r3
 8008e42:	3401      	adds	r4, #1
 8008e44:	f8c6 8000 	str.w	r8, [r6]
 8008e48:	2c07      	cmp	r4, #7
 8008e4a:	6077      	str	r7, [r6, #4]
 8008e4c:	443d      	add	r5, r7
 8008e4e:	943e      	str	r4, [sp, #248]	; 0xf8
 8008e50:	953f      	str	r5, [sp, #252]	; 0xfc
 8008e52:	dddd      	ble.n	8008e10 <_svfprintf_r+0x9d8>
 8008e54:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e56:	4659      	mov	r1, fp
 8008e58:	aa3d      	add	r2, sp, #244	; 0xf4
 8008e5a:	f003 fd15 	bl	800c888 <__ssprint_r>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	f47f abe8 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008e64:	ae23      	add	r6, sp, #140	; 0x8c
 8008e66:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008e68:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008e6a:	e7d2      	b.n	8008e12 <_svfprintf_r+0x9da>
 8008e6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e6e:	4659      	mov	r1, fp
 8008e70:	aa3d      	add	r2, sp, #244	; 0xf4
 8008e72:	f003 fd09 	bl	800c888 <__ssprint_r>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f43f aed4 	beq.w	8008c24 <_svfprintf_r+0x7ec>
 8008e7c:	f7ff bbda 	b.w	8008634 <_svfprintf_r+0x1fc>
 8008e80:	ad3d      	add	r5, sp, #244	; 0xf4
 8008e82:	910e      	str	r1, [sp, #56]	; 0x38
 8008e84:	9513      	str	r5, [sp, #76]	; 0x4c
 8008e86:	e491      	b.n	80087ac <_svfprintf_r+0x374>
 8008e88:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e8a:	4659      	mov	r1, fp
 8008e8c:	aa3d      	add	r2, sp, #244	; 0xf4
 8008e8e:	f003 fcfb 	bl	800c888 <__ssprint_r>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f47f abce 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008e98:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008e9a:	ae23      	add	r6, sp, #140	; 0x8c
 8008e9c:	e663      	b.n	8008b66 <_svfprintf_r+0x72e>
 8008e9e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ea0:	4659      	mov	r1, fp
 8008ea2:	aa3d      	add	r2, sp, #244	; 0xf4
 8008ea4:	f003 fcf0 	bl	800c888 <__ssprint_r>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	f47f abc3 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008eae:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008eb0:	ae23      	add	r6, sp, #140	; 0x8c
 8008eb2:	e5fd      	b.n	8008ab0 <_svfprintf_r+0x678>
 8008eb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008eb6:	4659      	mov	r1, fp
 8008eb8:	aa3d      	add	r2, sp, #244	; 0xf4
 8008eba:	f003 fce5 	bl	800c888 <__ssprint_r>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f47f abb8 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008ec4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008ec6:	ae23      	add	r6, sp, #140	; 0x8c
 8008ec8:	e601      	b.n	8008ace <_svfprintf_r+0x696>
 8008eca:	bf00      	nop
 8008ecc:	08028ca4 	.word	0x08028ca4
 8008ed0:	08026d50 	.word	0x08026d50
 8008ed4:	08026d60 	.word	0x08026d60
 8008ed8:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8008eda:	2f00      	cmp	r7, #0
 8008edc:	f340 8198 	ble.w	8009210 <_svfprintf_r+0xdd8>
 8008ee0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008ee2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ee4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008ee6:	428f      	cmp	r7, r1
 8008ee8:	bfa8      	it	ge
 8008eea:	460f      	movge	r7, r1
 8008eec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eee:	2f00      	cmp	r7, #0
 8008ef0:	4403      	add	r3, r0
 8008ef2:	930e      	str	r3, [sp, #56]	; 0x38
 8008ef4:	dd0a      	ble.n	8008f0c <_svfprintf_r+0xad4>
 8008ef6:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008ef8:	19ed      	adds	r5, r5, r7
 8008efa:	6030      	str	r0, [r6, #0]
 8008efc:	3401      	adds	r4, #1
 8008efe:	6077      	str	r7, [r6, #4]
 8008f00:	2c07      	cmp	r4, #7
 8008f02:	953f      	str	r5, [sp, #252]	; 0xfc
 8008f04:	943e      	str	r4, [sp, #248]	; 0xf8
 8008f06:	f300 832a 	bgt.w	800955e <_svfprintf_r+0x1126>
 8008f0a:	3608      	adds	r6, #8
 8008f0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f0e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8008f12:	1bcf      	subs	r7, r1, r7
 8008f14:	2f00      	cmp	r7, #0
 8008f16:	f340 808c 	ble.w	8009032 <_svfprintf_r+0xbfa>
 8008f1a:	2f10      	cmp	r7, #16
 8008f1c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8008f1e:	bfd8      	it	le
 8008f20:	f8df 8538 	ldrle.w	r8, [pc, #1336]	; 800945c <_svfprintf_r+0x1024>
 8008f24:	f340 815d 	ble.w	80091e2 <_svfprintf_r+0xdaa>
 8008f28:	f8df 8530 	ldr.w	r8, [pc, #1328]	; 800945c <_svfprintf_r+0x1024>
 8008f2c:	4623      	mov	r3, r4
 8008f2e:	f04f 0910 	mov.w	r9, #16
 8008f32:	4644      	mov	r4, r8
 8008f34:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008f38:	e003      	b.n	8008f42 <_svfprintf_r+0xb0a>
 8008f3a:	3f10      	subs	r7, #16
 8008f3c:	2f10      	cmp	r7, #16
 8008f3e:	f340 814e 	ble.w	80091de <_svfprintf_r+0xda6>
 8008f42:	3301      	adds	r3, #1
 8008f44:	e886 0210 	stmia.w	r6, {r4, r9}
 8008f48:	3510      	adds	r5, #16
 8008f4a:	3608      	adds	r6, #8
 8008f4c:	2b07      	cmp	r3, #7
 8008f4e:	933e      	str	r3, [sp, #248]	; 0xf8
 8008f50:	953f      	str	r5, [sp, #252]	; 0xfc
 8008f52:	ddf2      	ble.n	8008f3a <_svfprintf_r+0xb02>
 8008f54:	4640      	mov	r0, r8
 8008f56:	4659      	mov	r1, fp
 8008f58:	aa3d      	add	r2, sp, #244	; 0xf4
 8008f5a:	ae23      	add	r6, sp, #140	; 0x8c
 8008f5c:	f003 fc94 	bl	800c888 <__ssprint_r>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	f47f ab67 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008f66:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008f68:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008f6a:	e7e6      	b.n	8008f3a <_svfprintf_r+0xb02>
 8008f6c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008f6e:	f10d 01f3 	add.w	r1, sp, #243	; 0xf3
 8008f72:	f003 000f 	and.w	r0, r3, #15
 8008f76:	460a      	mov	r2, r1
 8008f78:	3901      	subs	r1, #1
 8008f7a:	091b      	lsrs	r3, r3, #4
 8008f7c:	5c28      	ldrb	r0, [r5, r0]
 8008f7e:	7010      	strb	r0, [r2, #0]
 8008f80:	d1f7      	bne.n	8008f72 <_svfprintf_r+0xb3a>
 8008f82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f84:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f86:	1aad      	subs	r5, r5, r2
 8008f88:	950e      	str	r5, [sp, #56]	; 0x38
 8008f8a:	e40f      	b.n	80087ac <_svfprintf_r+0x374>
 8008f8c:	2b09      	cmp	r3, #9
 8008f8e:	f200 80db 	bhi.w	8009148 <_svfprintf_r+0xd10>
 8008f92:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008f94:	3330      	adds	r3, #48	; 0x30
 8008f96:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8008f9a:	950e      	str	r5, [sp, #56]	; 0x38
 8008f9c:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8008fa0:	9513      	str	r5, [sp, #76]	; 0x4c
 8008fa2:	e403      	b.n	80087ac <_svfprintf_r+0x374>
 8008fa4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008fa6:	4659      	mov	r1, fp
 8008fa8:	aa3d      	add	r2, sp, #244	; 0xf4
 8008faa:	f003 fc6d 	bl	800c888 <__ssprint_r>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f47f ab40 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8008fb4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8008fb6:	ae23      	add	r6, sp, #140	; 0x8c
 8008fb8:	e569      	b.n	8008a8e <_svfprintf_r+0x656>
 8008fba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fbc:	1e57      	subs	r7, r2, #1
 8008fbe:	2f00      	cmp	r7, #0
 8008fc0:	f77f af27 	ble.w	8008e12 <_svfprintf_r+0x9da>
 8008fc4:	2f10      	cmp	r7, #16
 8008fc6:	f8df 8494 	ldr.w	r8, [pc, #1172]	; 800945c <_svfprintf_r+0x1024>
 8008fca:	f77f af3a 	ble.w	8008e42 <_svfprintf_r+0xa0a>
 8008fce:	4623      	mov	r3, r4
 8008fd0:	f04f 0910 	mov.w	r9, #16
 8008fd4:	4644      	mov	r4, r8
 8008fd6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008fda:	e003      	b.n	8008fe4 <_svfprintf_r+0xbac>
 8008fdc:	3f10      	subs	r7, #16
 8008fde:	2f10      	cmp	r7, #16
 8008fe0:	f77f af2d 	ble.w	8008e3e <_svfprintf_r+0xa06>
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	e886 0210 	stmia.w	r6, {r4, r9}
 8008fea:	3510      	adds	r5, #16
 8008fec:	3608      	adds	r6, #8
 8008fee:	2b07      	cmp	r3, #7
 8008ff0:	933e      	str	r3, [sp, #248]	; 0xf8
 8008ff2:	953f      	str	r5, [sp, #252]	; 0xfc
 8008ff4:	ddf2      	ble.n	8008fdc <_svfprintf_r+0xba4>
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	4659      	mov	r1, fp
 8008ffa:	aa3d      	add	r2, sp, #244	; 0xf4
 8008ffc:	ae23      	add	r6, sp, #140	; 0x8c
 8008ffe:	f003 fc43 	bl	800c888 <__ssprint_r>
 8009002:	2800      	cmp	r0, #0
 8009004:	f47f ab16 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8009008:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800900a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800900c:	e7e6      	b.n	8008fdc <_svfprintf_r+0xba4>
 800900e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	3504      	adds	r5, #4
 8009014:	9511      	str	r5, [sp, #68]	; 0x44
 8009016:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009018:	601d      	str	r5, [r3, #0]
 800901a:	f7ff ba44 	b.w	80084a6 <_svfprintf_r+0x6e>
 800901e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009020:	4659      	mov	r1, fp
 8009022:	aa3d      	add	r2, sp, #244	; 0xf4
 8009024:	f003 fc30 	bl	800c888 <__ssprint_r>
 8009028:	2800      	cmp	r0, #0
 800902a:	f47f ab03 	bne.w	8008634 <_svfprintf_r+0x1fc>
 800902e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009030:	ae23      	add	r6, sp, #140	; 0x8c
 8009032:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8009034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009036:	429a      	cmp	r2, r3
 8009038:	dc45      	bgt.n	80090c6 <_svfprintf_r+0xc8e>
 800903a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800903c:	07c1      	lsls	r1, r0, #31
 800903e:	d442      	bmi.n	80090c6 <_svfprintf_r+0xc8e>
 8009040:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009042:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009044:	180a      	adds	r2, r1, r0
 8009046:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009048:	990e      	ldr	r1, [sp, #56]	; 0x38
 800904a:	1ac3      	subs	r3, r0, r3
 800904c:	1a8f      	subs	r7, r1, r2
 800904e:	42bb      	cmp	r3, r7
 8009050:	bfb8      	it	lt
 8009052:	461f      	movlt	r7, r3
 8009054:	2f00      	cmp	r7, #0
 8009056:	dd0a      	ble.n	800906e <_svfprintf_r+0xc36>
 8009058:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800905a:	19ed      	adds	r5, r5, r7
 800905c:	6032      	str	r2, [r6, #0]
 800905e:	3401      	adds	r4, #1
 8009060:	6077      	str	r7, [r6, #4]
 8009062:	2c07      	cmp	r4, #7
 8009064:	953f      	str	r5, [sp, #252]	; 0xfc
 8009066:	943e      	str	r4, [sp, #248]	; 0xf8
 8009068:	f300 8284 	bgt.w	8009574 <_svfprintf_r+0x113c>
 800906c:	3608      	adds	r6, #8
 800906e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8009072:	1bdf      	subs	r7, r3, r7
 8009074:	2f00      	cmp	r7, #0
 8009076:	f77f ad85 	ble.w	8008b84 <_svfprintf_r+0x74c>
 800907a:	2f10      	cmp	r7, #16
 800907c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800907e:	f340 8303 	ble.w	8009688 <_svfprintf_r+0x1250>
 8009082:	f8df 83d8 	ldr.w	r8, [pc, #984]	; 800945c <_svfprintf_r+0x1024>
 8009086:	4623      	mov	r3, r4
 8009088:	f04f 0910 	mov.w	r9, #16
 800908c:	4644      	mov	r4, r8
 800908e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8009092:	e003      	b.n	800909c <_svfprintf_r+0xc64>
 8009094:	3f10      	subs	r7, #16
 8009096:	2f10      	cmp	r7, #16
 8009098:	f77f adc8 	ble.w	8008c2c <_svfprintf_r+0x7f4>
 800909c:	3301      	adds	r3, #1
 800909e:	e886 0210 	stmia.w	r6, {r4, r9}
 80090a2:	3510      	adds	r5, #16
 80090a4:	3608      	adds	r6, #8
 80090a6:	2b07      	cmp	r3, #7
 80090a8:	933e      	str	r3, [sp, #248]	; 0xf8
 80090aa:	953f      	str	r5, [sp, #252]	; 0xfc
 80090ac:	ddf2      	ble.n	8009094 <_svfprintf_r+0xc5c>
 80090ae:	4640      	mov	r0, r8
 80090b0:	4659      	mov	r1, fp
 80090b2:	aa3d      	add	r2, sp, #244	; 0xf4
 80090b4:	ae23      	add	r6, sp, #140	; 0x8c
 80090b6:	f003 fbe7 	bl	800c888 <__ssprint_r>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f47f aaba 	bne.w	8008634 <_svfprintf_r+0x1fc>
 80090c0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80090c2:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80090c4:	e7e6      	b.n	8009094 <_svfprintf_r+0xc5c>
 80090c6:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80090c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090ca:	3401      	adds	r4, #1
 80090cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090ce:	2c07      	cmp	r4, #7
 80090d0:	440d      	add	r5, r1
 80090d2:	6071      	str	r1, [r6, #4]
 80090d4:	6032      	str	r2, [r6, #0]
 80090d6:	953f      	str	r5, [sp, #252]	; 0xfc
 80090d8:	943e      	str	r4, [sp, #248]	; 0xf8
 80090da:	f300 826c 	bgt.w	80095b6 <_svfprintf_r+0x117e>
 80090de:	3608      	adds	r6, #8
 80090e0:	e7ae      	b.n	8009040 <_svfprintf_r+0xc08>
 80090e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80090e4:	07c2      	lsls	r2, r0, #31
 80090e6:	f53f ae66 	bmi.w	8008db6 <_svfprintf_r+0x97e>
 80090ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090ec:	3401      	adds	r4, #1
 80090ee:	3501      	adds	r5, #1
 80090f0:	6033      	str	r3, [r6, #0]
 80090f2:	2301      	movs	r3, #1
 80090f4:	2c07      	cmp	r4, #7
 80090f6:	6073      	str	r3, [r6, #4]
 80090f8:	953f      	str	r5, [sp, #252]	; 0xfc
 80090fa:	943e      	str	r4, [sp, #248]	; 0xf8
 80090fc:	f77f ae88 	ble.w	8008e10 <_svfprintf_r+0x9d8>
 8009100:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009102:	4659      	mov	r1, fp
 8009104:	aa3d      	add	r2, sp, #244	; 0xf4
 8009106:	f003 fbbf 	bl	800c888 <__ssprint_r>
 800910a:	2800      	cmp	r0, #0
 800910c:	f47f aa92 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8009110:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009112:	ae23      	add	r6, sp, #140	; 0x8c
 8009114:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8009116:	e67c      	b.n	8008e12 <_svfprintf_r+0x9da>
 8009118:	9810      	ldr	r0, [sp, #64]	; 0x40
 800911a:	4659      	mov	r1, fp
 800911c:	aa3d      	add	r2, sp, #244	; 0xf4
 800911e:	f003 fbb3 	bl	800c888 <__ssprint_r>
 8009122:	2800      	cmp	r0, #0
 8009124:	f47f aa86 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8009128:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800912a:	ae23      	add	r6, sp, #140	; 0x8c
 800912c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800912e:	e64e      	b.n	8008dce <_svfprintf_r+0x996>
 8009130:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009132:	4659      	mov	r1, fp
 8009134:	aa3d      	add	r2, sp, #244	; 0xf4
 8009136:	f003 fba7 	bl	800c888 <__ssprint_r>
 800913a:	2800      	cmp	r0, #0
 800913c:	f47f aa7a 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8009140:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009142:	ae23      	add	r6, sp, #140	; 0x8c
 8009144:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8009146:	e64e      	b.n	8008de6 <_svfprintf_r+0x9ae>
 8009148:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800914a:	f10d 00f3 	add.w	r0, sp, #243	; 0xf3
 800914e:	fba5 1203 	umull	r1, r2, r5, r3
 8009152:	4601      	mov	r1, r0
 8009154:	3801      	subs	r0, #1
 8009156:	08d2      	lsrs	r2, r2, #3
 8009158:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 800915c:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 8009160:	4613      	mov	r3, r2
 8009162:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009166:	700a      	strb	r2, [r1, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1f0      	bne.n	800914e <_svfprintf_r+0xd16>
 800916c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916e:	9113      	str	r1, [sp, #76]	; 0x4c
 8009170:	1a5b      	subs	r3, r3, r1
 8009172:	930e      	str	r3, [sp, #56]	; 0x38
 8009174:	f7ff bb1a 	b.w	80087ac <_svfprintf_r+0x374>
 8009178:	9810      	ldr	r0, [sp, #64]	; 0x40
 800917a:	4659      	mov	r1, fp
 800917c:	aa3d      	add	r2, sp, #244	; 0xf4
 800917e:	f003 fb83 	bl	800c888 <__ssprint_r>
 8009182:	2800      	cmp	r0, #0
 8009184:	f47f aa56 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8009188:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800918a:	ae23      	add	r6, sp, #140	; 0x8c
 800918c:	e4a3      	b.n	8008ad6 <_svfprintf_r+0x69e>
 800918e:	2930      	cmp	r1, #48	; 0x30
 8009190:	f000 81fe 	beq.w	8009590 <_svfprintf_r+0x1158>
 8009194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009196:	1e95      	subs	r5, r2, #2
 8009198:	9513      	str	r5, [sp, #76]	; 0x4c
 800919a:	1b5b      	subs	r3, r3, r5
 800919c:	930e      	str	r3, [sp, #56]	; 0x38
 800919e:	2330      	movs	r3, #48	; 0x30
 80091a0:	f802 3c02 	strb.w	r3, [r2, #-2]
 80091a4:	f7ff bb02 	b.w	80087ac <_svfprintf_r+0x374>
 80091a8:	4639      	mov	r1, r7
 80091aa:	f003 fadf 	bl	800c76c <__fpclassifyd>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	f040 808e 	bne.w	80092d0 <_svfprintf_r+0xe98>
 80091b4:	2503      	movs	r5, #3
 80091b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80091b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80091ba:	4aa5      	ldr	r2, [pc, #660]	; (8009450 <_svfprintf_r+0x1018>)
 80091bc:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80091c0:	49a4      	ldr	r1, [pc, #656]	; (8009454 <_svfprintf_r+0x101c>)
 80091c2:	950a      	str	r5, [sp, #40]	; 0x28
 80091c4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80091c6:	9014      	str	r0, [sp, #80]	; 0x50
 80091c8:	2d47      	cmp	r5, #71	; 0x47
 80091ca:	bfd8      	it	le
 80091cc:	4611      	movle	r1, r2
 80091ce:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80091d2:	2503      	movs	r5, #3
 80091d4:	9113      	str	r1, [sp, #76]	; 0x4c
 80091d6:	950e      	str	r5, [sp, #56]	; 0x38
 80091d8:	9018      	str	r0, [sp, #96]	; 0x60
 80091da:	f7ff ba64 	b.w	80086a6 <_svfprintf_r+0x26e>
 80091de:	46a0      	mov	r8, r4
 80091e0:	461c      	mov	r4, r3
 80091e2:	3401      	adds	r4, #1
 80091e4:	f8c6 8000 	str.w	r8, [r6]
 80091e8:	2c07      	cmp	r4, #7
 80091ea:	6077      	str	r7, [r6, #4]
 80091ec:	443d      	add	r5, r7
 80091ee:	943e      	str	r4, [sp, #248]	; 0xf8
 80091f0:	953f      	str	r5, [sp, #252]	; 0xfc
 80091f2:	f73f af14 	bgt.w	800901e <_svfprintf_r+0xbe6>
 80091f6:	3608      	adds	r6, #8
 80091f8:	e71b      	b.n	8009032 <_svfprintf_r+0xbfa>
 80091fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80091fc:	4659      	mov	r1, fp
 80091fe:	aa3d      	add	r2, sp, #244	; 0xf4
 8009200:	f003 fb42 	bl	800c888 <__ssprint_r>
 8009204:	2800      	cmp	r0, #0
 8009206:	f47f aa15 	bne.w	8008634 <_svfprintf_r+0x1fc>
 800920a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800920c:	ae23      	add	r6, sp, #140	; 0x8c
 800920e:	e53d      	b.n	8008c8c <_svfprintf_r+0x854>
 8009210:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8009212:	2301      	movs	r3, #1
 8009214:	6073      	str	r3, [r6, #4]
 8009216:	3501      	adds	r5, #1
 8009218:	3401      	adds	r4, #1
 800921a:	4b8f      	ldr	r3, [pc, #572]	; (8009458 <_svfprintf_r+0x1020>)
 800921c:	2c07      	cmp	r4, #7
 800921e:	6033      	str	r3, [r6, #0]
 8009220:	953f      	str	r5, [sp, #252]	; 0xfc
 8009222:	943e      	str	r4, [sp, #248]	; 0xf8
 8009224:	f300 8152 	bgt.w	80094cc <_svfprintf_r+0x1094>
 8009228:	3608      	adds	r6, #8
 800922a:	b92f      	cbnz	r7, 8009238 <_svfprintf_r+0xe00>
 800922c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800922e:	b91b      	cbnz	r3, 8009238 <_svfprintf_r+0xe00>
 8009230:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009232:	07c0      	lsls	r0, r0, #31
 8009234:	f57f aca6 	bpl.w	8008b84 <_svfprintf_r+0x74c>
 8009238:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800923a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800923c:	3401      	adds	r4, #1
 800923e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009240:	2c07      	cmp	r4, #7
 8009242:	440d      	add	r5, r1
 8009244:	6071      	str	r1, [r6, #4]
 8009246:	6032      	str	r2, [r6, #0]
 8009248:	953f      	str	r5, [sp, #252]	; 0xfc
 800924a:	943e      	str	r4, [sp, #248]	; 0xf8
 800924c:	f300 81fb 	bgt.w	8009646 <_svfprintf_r+0x120e>
 8009250:	3608      	adds	r6, #8
 8009252:	427f      	negs	r7, r7
 8009254:	2f00      	cmp	r7, #0
 8009256:	f340 8169 	ble.w	800952c <_svfprintf_r+0x10f4>
 800925a:	2f10      	cmp	r7, #16
 800925c:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800945c <_svfprintf_r+0x1024>
 8009260:	f340 819e 	ble.w	80095a0 <_svfprintf_r+0x1168>
 8009264:	4623      	mov	r3, r4
 8009266:	f04f 0910 	mov.w	r9, #16
 800926a:	4644      	mov	r4, r8
 800926c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8009270:	e003      	b.n	800927a <_svfprintf_r+0xe42>
 8009272:	3f10      	subs	r7, #16
 8009274:	2f10      	cmp	r7, #16
 8009276:	f340 8191 	ble.w	800959c <_svfprintf_r+0x1164>
 800927a:	3301      	adds	r3, #1
 800927c:	e886 0210 	stmia.w	r6, {r4, r9}
 8009280:	3510      	adds	r5, #16
 8009282:	3608      	adds	r6, #8
 8009284:	2b07      	cmp	r3, #7
 8009286:	933e      	str	r3, [sp, #248]	; 0xf8
 8009288:	953f      	str	r5, [sp, #252]	; 0xfc
 800928a:	ddf2      	ble.n	8009272 <_svfprintf_r+0xe3a>
 800928c:	4640      	mov	r0, r8
 800928e:	4659      	mov	r1, fp
 8009290:	aa3d      	add	r2, sp, #244	; 0xf4
 8009292:	f003 faf9 	bl	800c888 <__ssprint_r>
 8009296:	2800      	cmp	r0, #0
 8009298:	f47f a9cc 	bne.w	8008634 <_svfprintf_r+0x1fc>
 800929c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800929e:	ae23      	add	r6, sp, #140	; 0x8c
 80092a0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80092a2:	e7e6      	b.n	8009272 <_svfprintf_r+0xe3a>
 80092a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80092a6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80092aa:	950b      	str	r5, [sp, #44]	; 0x2c
 80092ac:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80092ae:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80092b2:	9711      	str	r7, [sp, #68]	; 0x44
 80092b4:	9518      	str	r5, [sp, #96]	; 0x60
 80092b6:	f7ff b9f6 	b.w	80086a6 <_svfprintf_r+0x26e>
 80092ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80092bc:	4659      	mov	r1, fp
 80092be:	aa3d      	add	r2, sp, #244	; 0xf4
 80092c0:	f003 fae2 	bl	800c888 <__ssprint_r>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	f47f a9b5 	bne.w	8008634 <_svfprintf_r+0x1fc>
 80092ca:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80092cc:	ae23      	add	r6, sp, #140	; 0x8c
 80092ce:	e4f2      	b.n	8008cb6 <_svfprintf_r+0x87e>
 80092d0:	1c61      	adds	r1, r4, #1
 80092d2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80092d4:	f000 8106 	beq.w	80094e4 <_svfprintf_r+0x10ac>
 80092d8:	f1a5 0967 	sub.w	r9, r5, #103	; 0x67
 80092dc:	f1d9 0300 	rsbs	r3, r9, #0
 80092e0:	eb43 0309 	adc.w	r3, r3, r9
 80092e4:	2d47      	cmp	r5, #71	; 0x47
 80092e6:	bf08      	it	eq
 80092e8:	f043 0301 	orreq.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 81a8 	beq.w	8009642 <_svfprintf_r+0x120a>
 80092f2:	2c00      	cmp	r4, #0
 80092f4:	f000 81c5 	beq.w	8009682 <_svfprintf_r+0x124a>
 80092f8:	2501      	movs	r5, #1
 80092fa:	950b      	str	r5, [sp, #44]	; 0x2c
 80092fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80092fe:	2f00      	cmp	r7, #0
 8009300:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8009304:	950a      	str	r5, [sp, #40]	; 0x28
 8009306:	f2c0 81ab 	blt.w	8009660 <_svfprintf_r+0x1228>
 800930a:	2500      	movs	r5, #0
 800930c:	9514      	str	r5, [sp, #80]	; 0x50
 800930e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009310:	46a1      	mov	r9, r4
 8009312:	f1a5 0c66 	sub.w	ip, r5, #102	; 0x66
 8009316:	f1dc 0500 	rsbs	r5, ip, #0
 800931a:	eb45 050c 	adc.w	r5, r5, ip
 800931e:	9515      	str	r5, [sp, #84]	; 0x54
 8009320:	46ac      	mov	ip, r5
 8009322:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009324:	2303      	movs	r3, #3
 8009326:	2d46      	cmp	r5, #70	; 0x46
 8009328:	bf08      	it	eq
 800932a:	f04c 0c01 	orreq.w	ip, ip, #1
 800932e:	f1bc 0f00 	cmp.w	ip, #0
 8009332:	d10f      	bne.n	8009354 <_svfprintf_r+0xf1c>
 8009334:	f1a5 0e65 	sub.w	lr, r5, #101	; 0x65
 8009338:	f1de 0300 	rsbs	r3, lr, #0
 800933c:	eb43 030e 	adc.w	r3, r3, lr
 8009340:	2d45      	cmp	r5, #69	; 0x45
 8009342:	bf08      	it	eq
 8009344:	f043 0301 	orreq.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 818e 	beq.w	800966a <_svfprintf_r+0x1232>
 800934e:	f104 0901 	add.w	r9, r4, #1
 8009352:	2302      	movs	r3, #2
 8009354:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009358:	a944      	add	r1, sp, #272	; 0x110
 800935a:	970f      	str	r7, [sp, #60]	; 0x3c
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009360:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009364:	9102      	str	r1, [sp, #8]
 8009366:	a945      	add	r1, sp, #276	; 0x114
 8009368:	f8cd c01c 	str.w	ip, [sp, #28]
 800936c:	9103      	str	r1, [sp, #12]
 800936e:	a946      	add	r1, sp, #280	; 0x118
 8009370:	f8cd 9004 	str.w	r9, [sp, #4]
 8009374:	9104      	str	r1, [sp, #16]
 8009376:	f001 f9c9 	bl	800a70c <_dtoa_r>
 800937a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800937c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8009380:	f1b5 0367 	subs.w	r3, r5, #103	; 0x67
 8009384:	bf18      	it	ne
 8009386:	2301      	movne	r3, #1
 8009388:	2d47      	cmp	r5, #71	; 0x47
 800938a:	bf0c      	ite	eq
 800938c:	2300      	moveq	r3, #0
 800938e:	f003 0301 	andne.w	r3, r3, #1
 8009392:	9013      	str	r0, [sp, #76]	; 0x4c
 8009394:	b923      	cbnz	r3, 80093a0 <_svfprintf_r+0xf68>
 8009396:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009398:	07ed      	lsls	r5, r5, #31
 800939a:	bf58      	it	pl
 800939c:	9d46      	ldrpl	r5, [sp, #280]	; 0x118
 800939e:	d515      	bpl.n	80093cc <_svfprintf_r+0xf94>
 80093a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80093a2:	eb00 0509 	add.w	r5, r0, r9
 80093a6:	f1bc 0f00 	cmp.w	ip, #0
 80093aa:	d005      	beq.n	80093b8 <_svfprintf_r+0xf80>
 80093ac:	7803      	ldrb	r3, [r0, #0]
 80093ae:	2b30      	cmp	r3, #48	; 0x30
 80093b0:	f000 80a4 	beq.w	80094fc <_svfprintf_r+0x10c4>
 80093b4:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80093b6:	18ed      	adds	r5, r5, r3
 80093b8:	4640      	mov	r0, r8
 80093ba:	2200      	movs	r2, #0
 80093bc:	2300      	movs	r3, #0
 80093be:	4639      	mov	r1, r7
 80093c0:	f004 fdbc 	bl	800df3c <__aeabi_dcmpeq>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	f000 8124 	beq.w	8009612 <_svfprintf_r+0x11da>
 80093ca:	9546      	str	r5, [sp, #280]	; 0x118
 80093cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80093ce:	1a6d      	subs	r5, r5, r1
 80093d0:	9512      	str	r5, [sp, #72]	; 0x48
 80093d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80093d4:	2d00      	cmp	r5, #0
 80093d6:	f000 8106 	beq.w	80095e6 <_svfprintf_r+0x11ae>
 80093da:	9944      	ldr	r1, [sp, #272]	; 0x110
 80093dc:	1cc8      	adds	r0, r1, #3
 80093de:	db02      	blt.n	80093e6 <_svfprintf_r+0xfae>
 80093e0:	428c      	cmp	r4, r1
 80093e2:	f280 8107 	bge.w	80095f4 <_svfprintf_r+0x11bc>
 80093e6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80093e8:	3d02      	subs	r5, #2
 80093ea:	9517      	str	r5, [sp, #92]	; 0x5c
 80093ec:	3901      	subs	r1, #1
 80093ee:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80093f0:	2900      	cmp	r1, #0
 80093f2:	9144      	str	r1, [sp, #272]	; 0x110
 80093f4:	f88d 5100 	strb.w	r5, [sp, #256]	; 0x100
 80093f8:	f2c0 8175 	blt.w	80096e6 <_svfprintf_r+0x12ae>
 80093fc:	232b      	movs	r3, #43	; 0x2b
 80093fe:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 8009402:	2909      	cmp	r1, #9
 8009404:	f340 8134 	ble.w	8009670 <_svfprintf_r+0x1238>
 8009408:	ad43      	add	r5, sp, #268	; 0x10c
 800940a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800940c:	3503      	adds	r5, #3
 800940e:	4628      	mov	r0, r5
 8009410:	fb87 3201 	smull	r3, r2, r7, r1
 8009414:	17cb      	asrs	r3, r1, #31
 8009416:	4604      	mov	r4, r0
 8009418:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800941c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009420:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8009424:	4619      	mov	r1, r3
 8009426:	3230      	adds	r2, #48	; 0x30
 8009428:	2b09      	cmp	r3, #9
 800942a:	f800 2d01 	strb.w	r2, [r0, #-1]!
 800942e:	dcef      	bgt.n	8009410 <_svfprintf_r+0xfd8>
 8009430:	3130      	adds	r1, #48	; 0x30
 8009432:	4622      	mov	r2, r4
 8009434:	b2c9      	uxtb	r1, r1
 8009436:	f802 1d02 	strb.w	r1, [r2, #-2]!
 800943a:	4295      	cmp	r5, r2
 800943c:	bf98      	it	ls
 800943e:	f50d 7181 	addls.w	r1, sp, #258	; 0x102
 8009442:	d914      	bls.n	800946e <_svfprintf_r+0x1036>
 8009444:	f50d 7381 	add.w	r3, sp, #258	; 0x102
 8009448:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
 800944c:	e00a      	b.n	8009464 <_svfprintf_r+0x102c>
 800944e:	bf00      	nop
 8009450:	08028c6c 	.word	0x08028c6c
 8009454:	08028c70 	.word	0x08028c70
 8009458:	08028ca4 	.word	0x08028ca4
 800945c:	08026d60 	.word	0x08026d60
 8009460:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009464:	4282      	cmp	r2, r0
 8009466:	f803 1b01 	strb.w	r1, [r3], #1
 800946a:	4619      	mov	r1, r3
 800946c:	d1f8      	bne.n	8009460 <_svfprintf_r+0x1028>
 800946e:	ab40      	add	r3, sp, #256	; 0x100
 8009470:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009472:	1acb      	subs	r3, r1, r3
 8009474:	931f      	str	r3, [sp, #124]	; 0x7c
 8009476:	195d      	adds	r5, r3, r5
 8009478:	950e      	str	r5, [sp, #56]	; 0x38
 800947a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800947c:	2d01      	cmp	r5, #1
 800947e:	f340 8127 	ble.w	80096d0 <_svfprintf_r+0x1298>
 8009482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009484:	2500      	movs	r5, #0
 8009486:	9518      	str	r5, [sp, #96]	; 0x60
 8009488:	3301      	adds	r3, #1
 800948a:	930e      	str	r3, [sp, #56]	; 0x38
 800948c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8009490:	950b      	str	r5, [sp, #44]	; 0x2c
 8009492:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009494:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8009498:	2d00      	cmp	r5, #0
 800949a:	f43f a904 	beq.w	80086a6 <_svfprintf_r+0x26e>
 800949e:	2300      	movs	r3, #0
 80094a0:	9314      	str	r3, [sp, #80]	; 0x50
 80094a2:	232d      	movs	r3, #45	; 0x2d
 80094a4:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80094a8:	f7ff b8fe 	b.w	80086a8 <_svfprintf_r+0x270>
 80094ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80094ae:	2140      	movs	r1, #64	; 0x40
 80094b0:	f7fd fe10 	bl	80070d4 <_malloc_r>
 80094b4:	f8cb 0000 	str.w	r0, [fp]
 80094b8:	f8cb 0010 	str.w	r0, [fp, #16]
 80094bc:	2800      	cmp	r0, #0
 80094be:	f000 8136 	beq.w	800972e <_svfprintf_r+0x12f6>
 80094c2:	2340      	movs	r3, #64	; 0x40
 80094c4:	f8cb 3014 	str.w	r3, [fp, #20]
 80094c8:	f7fe bfd1 	b.w	800846e <_svfprintf_r+0x36>
 80094cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80094ce:	4659      	mov	r1, fp
 80094d0:	aa3d      	add	r2, sp, #244	; 0xf4
 80094d2:	f003 f9d9 	bl	800c888 <__ssprint_r>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f47f a8ac 	bne.w	8008634 <_svfprintf_r+0x1fc>
 80094dc:	9f44      	ldr	r7, [sp, #272]	; 0x110
 80094de:	ae23      	add	r6, sp, #140	; 0x8c
 80094e0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80094e2:	e6a2      	b.n	800922a <_svfprintf_r+0xdf2>
 80094e4:	f1a5 0247 	sub.w	r2, r5, #71	; 0x47
 80094e8:	4253      	negs	r3, r2
 80094ea:	eb43 0302 	adc.w	r3, r3, r2
 80094ee:	2406      	movs	r4, #6
 80094f0:	2d67      	cmp	r5, #103	; 0x67
 80094f2:	bf08      	it	eq
 80094f4:	f043 0301 	orreq.w	r3, r3, #1
 80094f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80094fa:	e6ff      	b.n	80092fc <_svfprintf_r+0xec4>
 80094fc:	4640      	mov	r0, r8
 80094fe:	2200      	movs	r2, #0
 8009500:	2300      	movs	r3, #0
 8009502:	4639      	mov	r1, r7
 8009504:	f004 fd1a 	bl	800df3c <__aeabi_dcmpeq>
 8009508:	2800      	cmp	r0, #0
 800950a:	f47f af53 	bne.w	80093b4 <_svfprintf_r+0xf7c>
 800950e:	f1c9 0301 	rsb	r3, r9, #1
 8009512:	9344      	str	r3, [sp, #272]	; 0x110
 8009514:	e74f      	b.n	80093b6 <_svfprintf_r+0xf7e>
 8009516:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009518:	4659      	mov	r1, fp
 800951a:	aa3d      	add	r2, sp, #244	; 0xf4
 800951c:	f003 f9b4 	bl	800c888 <__ssprint_r>
 8009520:	2800      	cmp	r0, #0
 8009522:	f47f a887 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8009526:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009528:	ae23      	add	r6, sp, #140	; 0x8c
 800952a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800952c:	3401      	adds	r4, #1
 800952e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009530:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009532:	2c07      	cmp	r4, #7
 8009534:	4405      	add	r5, r0
 8009536:	6070      	str	r0, [r6, #4]
 8009538:	6033      	str	r3, [r6, #0]
 800953a:	943e      	str	r4, [sp, #248]	; 0xf8
 800953c:	953f      	str	r5, [sp, #252]	; 0xfc
 800953e:	f77f ab20 	ble.w	8008b82 <_svfprintf_r+0x74a>
 8009542:	f7ff bb7e 	b.w	8008c42 <_svfprintf_r+0x80a>
 8009546:	9514      	str	r5, [sp, #80]	; 0x50
 8009548:	f7fe feba 	bl	80082c0 <strlen>
 800954c:	900e      	str	r0, [sp, #56]	; 0x38
 800954e:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8009552:	e6aa      	b.n	80092aa <_svfprintf_r+0xe72>
 8009554:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8009556:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8009744 <_svfprintf_r+0x130c>
 800955a:	f7ff b8e5 	b.w	8008728 <_svfprintf_r+0x2f0>
 800955e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009560:	4659      	mov	r1, fp
 8009562:	aa3d      	add	r2, sp, #244	; 0xf4
 8009564:	f003 f990 	bl	800c888 <__ssprint_r>
 8009568:	2800      	cmp	r0, #0
 800956a:	f47f a863 	bne.w	8008634 <_svfprintf_r+0x1fc>
 800956e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009570:	ae23      	add	r6, sp, #140	; 0x8c
 8009572:	e4cb      	b.n	8008f0c <_svfprintf_r+0xad4>
 8009574:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009576:	4659      	mov	r1, fp
 8009578:	aa3d      	add	r2, sp, #244	; 0xf4
 800957a:	f003 f985 	bl	800c888 <__ssprint_r>
 800957e:	2800      	cmp	r0, #0
 8009580:	f47f a858 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8009584:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8009586:	ae23      	add	r6, sp, #140	; 0x8c
 8009588:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800958a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	e56e      	b.n	800906e <_svfprintf_r+0xc36>
 8009590:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009592:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009594:	1a2d      	subs	r5, r5, r0
 8009596:	950e      	str	r5, [sp, #56]	; 0x38
 8009598:	f7ff b908 	b.w	80087ac <_svfprintf_r+0x374>
 800959c:	46a0      	mov	r8, r4
 800959e:	461c      	mov	r4, r3
 80095a0:	3401      	adds	r4, #1
 80095a2:	f8c6 8000 	str.w	r8, [r6]
 80095a6:	2c07      	cmp	r4, #7
 80095a8:	6077      	str	r7, [r6, #4]
 80095aa:	443d      	add	r5, r7
 80095ac:	943e      	str	r4, [sp, #248]	; 0xf8
 80095ae:	953f      	str	r5, [sp, #252]	; 0xfc
 80095b0:	dcb1      	bgt.n	8009516 <_svfprintf_r+0x10de>
 80095b2:	3608      	adds	r6, #8
 80095b4:	e7ba      	b.n	800952c <_svfprintf_r+0x10f4>
 80095b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80095b8:	4659      	mov	r1, fp
 80095ba:	aa3d      	add	r2, sp, #244	; 0xf4
 80095bc:	f003 f964 	bl	800c888 <__ssprint_r>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f47f a837 	bne.w	8008634 <_svfprintf_r+0x1fc>
 80095c6:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80095c8:	ae23      	add	r6, sp, #140	; 0x8c
 80095ca:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 80095cc:	e538      	b.n	8009040 <_svfprintf_r+0xc08>
 80095ce:	2c06      	cmp	r4, #6
 80095d0:	bf28      	it	cs
 80095d2:	2406      	movcs	r4, #6
 80095d4:	9711      	str	r7, [sp, #68]	; 0x44
 80095d6:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80095da:	950b      	str	r5, [sp, #44]	; 0x2c
 80095dc:	4d58      	ldr	r5, [pc, #352]	; (8009740 <_svfprintf_r+0x1308>)
 80095de:	940e      	str	r4, [sp, #56]	; 0x38
 80095e0:	9513      	str	r5, [sp, #76]	; 0x4c
 80095e2:	f7ff b8fc 	b.w	80087de <_svfprintf_r+0x3a6>
 80095e6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80095e8:	2d65      	cmp	r5, #101	; 0x65
 80095ea:	dd6f      	ble.n	80096cc <_svfprintf_r+0x1294>
 80095ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80095ee:	9944      	ldr	r1, [sp, #272]	; 0x110
 80095f0:	2d00      	cmp	r5, #0
 80095f2:	d15d      	bne.n	80096b0 <_svfprintf_r+0x1278>
 80095f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80095f6:	428d      	cmp	r5, r1
 80095f8:	dc4a      	bgt.n	8009690 <_svfprintf_r+0x1258>
 80095fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80095fc:	07ed      	lsls	r5, r5, #31
 80095fe:	d54f      	bpl.n	80096a0 <_svfprintf_r+0x1268>
 8009600:	1c4b      	adds	r3, r1, #1
 8009602:	2567      	movs	r5, #103	; 0x67
 8009604:	930e      	str	r3, [sp, #56]	; 0x38
 8009606:	9517      	str	r5, [sp, #92]	; 0x5c
 8009608:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 800960c:	9118      	str	r1, [sp, #96]	; 0x60
 800960e:	950b      	str	r5, [sp, #44]	; 0x2c
 8009610:	e73f      	b.n	8009492 <_svfprintf_r+0x105a>
 8009612:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8009614:	429d      	cmp	r5, r3
 8009616:	bf98      	it	ls
 8009618:	461d      	movls	r5, r3
 800961a:	f67f aed7 	bls.w	80093cc <_svfprintf_r+0xf94>
 800961e:	2230      	movs	r2, #48	; 0x30
 8009620:	f803 2b01 	strb.w	r2, [r3], #1
 8009624:	42ab      	cmp	r3, r5
 8009626:	9346      	str	r3, [sp, #280]	; 0x118
 8009628:	d1fa      	bne.n	8009620 <_svfprintf_r+0x11e8>
 800962a:	e6cf      	b.n	80093cc <_svfprintf_r+0xf94>
 800962c:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8009630:	9014      	str	r0, [sp, #80]	; 0x50
 8009632:	950b      	str	r5, [sp, #44]	; 0x2c
 8009634:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8009638:	9711      	str	r7, [sp, #68]	; 0x44
 800963a:	940e      	str	r4, [sp, #56]	; 0x38
 800963c:	9018      	str	r0, [sp, #96]	; 0x60
 800963e:	f7ff b832 	b.w	80086a6 <_svfprintf_r+0x26e>
 8009642:	930b      	str	r3, [sp, #44]	; 0x2c
 8009644:	e65a      	b.n	80092fc <_svfprintf_r+0xec4>
 8009646:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009648:	4659      	mov	r1, fp
 800964a:	aa3d      	add	r2, sp, #244	; 0xf4
 800964c:	f003 f91c 	bl	800c888 <__ssprint_r>
 8009650:	2800      	cmp	r0, #0
 8009652:	f47e afef 	bne.w	8008634 <_svfprintf_r+0x1fc>
 8009656:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8009658:	ae23      	add	r6, sp, #140	; 0x8c
 800965a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800965c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 800965e:	e5f8      	b.n	8009252 <_svfprintf_r+0xe1a>
 8009660:	252d      	movs	r5, #45	; 0x2d
 8009662:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009666:	9514      	str	r5, [sp, #80]	; 0x50
 8009668:	e651      	b.n	800930e <_svfprintf_r+0xed6>
 800966a:	46a1      	mov	r9, r4
 800966c:	2302      	movs	r3, #2
 800966e:	e671      	b.n	8009354 <_svfprintf_r+0xf1c>
 8009670:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8009674:	2330      	movs	r3, #48	; 0x30
 8009676:	a941      	add	r1, sp, #260	; 0x104
 8009678:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
 800967c:	f88d 2103 	strb.w	r2, [sp, #259]	; 0x103
 8009680:	e6f5      	b.n	800946e <_svfprintf_r+0x1036>
 8009682:	2401      	movs	r4, #1
 8009684:	940b      	str	r4, [sp, #44]	; 0x2c
 8009686:	e639      	b.n	80092fc <_svfprintf_r+0xec4>
 8009688:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8009748 <_svfprintf_r+0x1310>
 800968c:	f7ff bad0 	b.w	8008c30 <_svfprintf_r+0x7f8>
 8009690:	2900      	cmp	r1, #0
 8009692:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009694:	bfd4      	ite	le
 8009696:	f1c1 0302 	rsble	r3, r1, #2
 800969a:	2301      	movgt	r3, #1
 800969c:	195b      	adds	r3, r3, r5
 800969e:	e7b0      	b.n	8009602 <_svfprintf_r+0x11ca>
 80096a0:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 80096a4:	910e      	str	r1, [sp, #56]	; 0x38
 80096a6:	950b      	str	r5, [sp, #44]	; 0x2c
 80096a8:	2567      	movs	r5, #103	; 0x67
 80096aa:	9118      	str	r1, [sp, #96]	; 0x60
 80096ac:	9517      	str	r5, [sp, #92]	; 0x5c
 80096ae:	e6f0      	b.n	8009492 <_svfprintf_r+0x105a>
 80096b0:	2900      	cmp	r1, #0
 80096b2:	dd27      	ble.n	8009704 <_svfprintf_r+0x12cc>
 80096b4:	b9e4      	cbnz	r4, 80096f0 <_svfprintf_r+0x12b8>
 80096b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80096b8:	07ea      	lsls	r2, r5, #31
 80096ba:	d419      	bmi.n	80096f0 <_svfprintf_r+0x12b8>
 80096bc:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 80096c0:	910e      	str	r1, [sp, #56]	; 0x38
 80096c2:	950b      	str	r5, [sp, #44]	; 0x2c
 80096c4:	2566      	movs	r5, #102	; 0x66
 80096c6:	9118      	str	r1, [sp, #96]	; 0x60
 80096c8:	9517      	str	r5, [sp, #92]	; 0x5c
 80096ca:	e6e2      	b.n	8009492 <_svfprintf_r+0x105a>
 80096cc:	9944      	ldr	r1, [sp, #272]	; 0x110
 80096ce:	e68d      	b.n	80093ec <_svfprintf_r+0xfb4>
 80096d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80096d2:	f015 0301 	ands.w	r3, r5, #1
 80096d6:	f47f aed4 	bne.w	8009482 <_svfprintf_r+0x104a>
 80096da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80096dc:	9318      	str	r3, [sp, #96]	; 0x60
 80096de:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80096e2:	950b      	str	r5, [sp, #44]	; 0x2c
 80096e4:	e6d5      	b.n	8009492 <_svfprintf_r+0x105a>
 80096e6:	232d      	movs	r3, #45	; 0x2d
 80096e8:	4249      	negs	r1, r1
 80096ea:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
 80096ee:	e688      	b.n	8009402 <_svfprintf_r+0xfca>
 80096f0:	3401      	adds	r4, #1
 80096f2:	2566      	movs	r5, #102	; 0x66
 80096f4:	190c      	adds	r4, r1, r4
 80096f6:	9517      	str	r5, [sp, #92]	; 0x5c
 80096f8:	940e      	str	r4, [sp, #56]	; 0x38
 80096fa:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80096fe:	9118      	str	r1, [sp, #96]	; 0x60
 8009700:	950b      	str	r5, [sp, #44]	; 0x2c
 8009702:	e6c6      	b.n	8009492 <_svfprintf_r+0x105a>
 8009704:	b914      	cbnz	r4, 800970c <_svfprintf_r+0x12d4>
 8009706:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009708:	07eb      	lsls	r3, r5, #31
 800970a:	d508      	bpl.n	800971e <_svfprintf_r+0x12e6>
 800970c:	3402      	adds	r4, #2
 800970e:	2566      	movs	r5, #102	; 0x66
 8009710:	940e      	str	r4, [sp, #56]	; 0x38
 8009712:	9517      	str	r5, [sp, #92]	; 0x5c
 8009714:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8009718:	9118      	str	r1, [sp, #96]	; 0x60
 800971a:	950b      	str	r5, [sp, #44]	; 0x2c
 800971c:	e6b9      	b.n	8009492 <_svfprintf_r+0x105a>
 800971e:	2501      	movs	r5, #1
 8009720:	9118      	str	r1, [sp, #96]	; 0x60
 8009722:	950b      	str	r5, [sp, #44]	; 0x2c
 8009724:	2566      	movs	r5, #102	; 0x66
 8009726:	9517      	str	r5, [sp, #92]	; 0x5c
 8009728:	2501      	movs	r5, #1
 800972a:	950e      	str	r5, [sp, #56]	; 0x38
 800972c:	e6b1      	b.n	8009492 <_svfprintf_r+0x105a>
 800972e:	f04f 35ff 	mov.w	r5, #4294967295
 8009732:	950d      	str	r5, [sp, #52]	; 0x34
 8009734:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009736:	230c      	movs	r3, #12
 8009738:	602b      	str	r3, [r5, #0]
 800973a:	f7fe bf84 	b.w	8008646 <_svfprintf_r+0x20e>
 800973e:	bf00      	nop
 8009740:	08028c9c 	.word	0x08028c9c
 8009744:	08026d50 	.word	0x08026d50
 8009748:	08026d60 	.word	0x08026d60

0800974c <write>:
 800974c:	b430      	push	{r4, r5}
 800974e:	f240 0408 	movw	r4, #8
 8009752:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8009756:	460d      	mov	r5, r1
 8009758:	4613      	mov	r3, r2
 800975a:	4601      	mov	r1, r0
 800975c:	462a      	mov	r2, r5
 800975e:	6820      	ldr	r0, [r4, #0]
 8009760:	bc30      	pop	{r4, r5}
 8009762:	f01a bdcd 	b.w	8024300 <_write_r>
 8009766:	bf00      	nop

08009768 <__sprint_r>:
 8009768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	4680      	mov	r8, r0
 800976e:	6890      	ldr	r0, [r2, #8]
 8009770:	4691      	mov	r9, r2
 8009772:	460e      	mov	r6, r1
 8009774:	b348      	cbz	r0, 80097ca <__sprint_r+0x62>
 8009776:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009778:	049a      	lsls	r2, r3, #18
 800977a:	d529      	bpl.n	80097d0 <__sprint_r+0x68>
 800977c:	f8d9 3000 	ldr.w	r3, [r9]
 8009780:	f103 0a08 	add.w	sl, r3, #8
 8009784:	e91a 00a0 	ldmdb	sl, {r5, r7}
 8009788:	08bf      	lsrs	r7, r7, #2
 800978a:	b1af      	cbz	r7, 80097b8 <__sprint_r+0x50>
 800978c:	2400      	movs	r4, #0
 800978e:	e001      	b.n	8009794 <__sprint_r+0x2c>
 8009790:	42a7      	cmp	r7, r4
 8009792:	d00f      	beq.n	80097b4 <__sprint_r+0x4c>
 8009794:	f855 1b04 	ldr.w	r1, [r5], #4
 8009798:	4640      	mov	r0, r8
 800979a:	4632      	mov	r2, r6
 800979c:	3401      	adds	r4, #1
 800979e:	f002 f8e7 	bl	800b970 <_fputwc_r>
 80097a2:	1c43      	adds	r3, r0, #1
 80097a4:	d1f4      	bne.n	8009790 <__sprint_r+0x28>
 80097a6:	2300      	movs	r3, #0
 80097a8:	f8c9 3008 	str.w	r3, [r9, #8]
 80097ac:	f8c9 3004 	str.w	r3, [r9, #4]
 80097b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80097b8:	eba0 0087 	sub.w	r0, r0, r7, lsl #2
 80097bc:	f10a 0a08 	add.w	sl, sl, #8
 80097c0:	f8c9 0008 	str.w	r0, [r9, #8]
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1dd      	bne.n	8009784 <__sprint_r+0x1c>
 80097c8:	e7ed      	b.n	80097a6 <__sprint_r+0x3e>
 80097ca:	6050      	str	r0, [r2, #4]
 80097cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d0:	4640      	mov	r0, r8
 80097d2:	464a      	mov	r2, r9
 80097d4:	f7fd fa66 	bl	8006ca4 <__sfvwrite_r>
 80097d8:	2300      	movs	r3, #0
 80097da:	f8c9 3008 	str.w	r3, [r9, #8]
 80097de:	f8c9 3004 	str.w	r3, [r9, #4]
 80097e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e6:	bf00      	nop

080097e8 <_vfiprintf_r>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80097f0:	b081      	sub	sp, #4
 80097f2:	4683      	mov	fp, r0
 80097f4:	460c      	mov	r4, r1
 80097f6:	4617      	mov	r7, r2
 80097f8:	9307      	str	r3, [sp, #28]
 80097fa:	b118      	cbz	r0, 8009804 <_vfiprintf_r+0x1c>
 80097fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 845b 	beq.w	800a0ba <_vfiprintf_r+0x8d2>
 8009804:	89a5      	ldrh	r5, [r4, #12]
 8009806:	b2ab      	uxth	r3, r5
 8009808:	0498      	lsls	r0, r3, #18
 800980a:	d407      	bmi.n	800981c <_vfiprintf_r+0x34>
 800980c:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 8009810:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009812:	81a5      	strh	r5, [r4, #12]
 8009814:	b2ab      	uxth	r3, r5
 8009816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800981a:	6662      	str	r2, [r4, #100]	; 0x64
 800981c:	0719      	lsls	r1, r3, #28
 800981e:	f140 83c3 	bpl.w	8009fa8 <_vfiprintf_r+0x7c0>
 8009822:	6922      	ldr	r2, [r4, #16]
 8009824:	2a00      	cmp	r2, #0
 8009826:	f000 83bf 	beq.w	8009fa8 <_vfiprintf_r+0x7c0>
 800982a:	f003 031a 	and.w	r3, r3, #26
 800982e:	2b0a      	cmp	r3, #10
 8009830:	f000 83c8 	beq.w	8009fc4 <_vfiprintf_r+0x7dc>
 8009834:	f50d 65a2 	add.w	r5, sp, #1296	; 0x510
 8009838:	9502      	str	r5, [sp, #8]
 800983a:	f50d 65a0 	add.w	r5, sp, #1280	; 0x500
 800983e:	f50d 6a95 	add.w	sl, sp, #1192	; 0x4a8
 8009842:	350f      	adds	r5, #15
 8009844:	9501      	str	r5, [sp, #4]
 8009846:	9802      	ldr	r0, [sp, #8]
 8009848:	4655      	mov	r5, sl
 800984a:	9901      	ldr	r1, [sp, #4]
 800984c:	46a1      	mov	r9, r4
 800984e:	f64c 42cd 	movw	r2, #52429	; 0xcccd
 8009852:	2300      	movs	r3, #0
 8009854:	1a40      	subs	r0, r0, r1
 8009856:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
 800985a:	930d      	str	r3, [sp, #52]	; 0x34
 800985c:	9305      	str	r3, [sp, #20]
 800985e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009860:	920e      	str	r2, [sp, #56]	; 0x38
 8009862:	f8cd a510 	str.w	sl, [sp, #1296]	; 0x510
 8009866:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
 800986a:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800986e:	783b      	ldrb	r3, [r7, #0]
 8009870:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8009874:	bf18      	it	ne
 8009876:	2201      	movne	r2, #1
 8009878:	2b00      	cmp	r3, #0
 800987a:	bf0c      	ite	eq
 800987c:	2300      	moveq	r3, #0
 800987e:	f002 0301 	andne.w	r3, r2, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 8319 	beq.w	8009eba <_vfiprintf_r+0x6d2>
 8009888:	463a      	mov	r2, r7
 800988a:	463c      	mov	r4, r7
 800988c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009890:	3401      	adds	r4, #1
 8009892:	1c19      	adds	r1, r3, #0
 8009894:	bf18      	it	ne
 8009896:	2101      	movne	r1, #1
 8009898:	2b25      	cmp	r3, #37	; 0x25
 800989a:	bf0c      	ite	eq
 800989c:	2300      	moveq	r3, #0
 800989e:	f001 0301 	andne.w	r3, r1, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1f2      	bne.n	800988c <_vfiprintf_r+0xa4>
 80098a6:	1be6      	subs	r6, r4, r7
 80098a8:	d012      	beq.n	80098d0 <_vfiprintf_r+0xe8>
 80098aa:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 80098ae:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 80098b2:	3301      	adds	r3, #1
 80098b4:	602f      	str	r7, [r5, #0]
 80098b6:	2b07      	cmp	r3, #7
 80098b8:	4432      	add	r2, r6
 80098ba:	606e      	str	r6, [r5, #4]
 80098bc:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 80098c0:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 80098c4:	f300 83c1 	bgt.w	800a04a <_vfiprintf_r+0x862>
 80098c8:	3508      	adds	r5, #8
 80098ca:	9b05      	ldr	r3, [sp, #20]
 80098cc:	199b      	adds	r3, r3, r6
 80098ce:	9305      	str	r3, [sp, #20]
 80098d0:	7823      	ldrb	r3, [r4, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 84a8 	beq.w	800a228 <_vfiprintf_r+0xa40>
 80098d8:	2300      	movs	r3, #0
 80098da:	1c67      	adds	r7, r4, #1
 80098dc:	461a      	mov	r2, r3
 80098de:	f04f 34ff 	mov.w	r4, #4294967295
 80098e2:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 80098e6:	9308      	str	r3, [sp, #32]
 80098e8:	9303      	str	r3, [sp, #12]
 80098ea:	f817 3b01 	ldrb.w	r3, [r7], #1
 80098ee:	f1a3 0120 	sub.w	r1, r3, #32
 80098f2:	2958      	cmp	r1, #88	; 0x58
 80098f4:	f200 81dd 	bhi.w	8009cb2 <_vfiprintf_r+0x4ca>
 80098f8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80098fc:	01db01d7 	.word	0x01db01d7
 8009900:	01d201db 	.word	0x01d201db
 8009904:	01db01db 	.word	0x01db01db
 8009908:	01db01db 	.word	0x01db01db
 800990c:	01db01db 	.word	0x01db01db
 8009910:	020c00d8 	.word	0x020c00d8
 8009914:	00e401db 	.word	0x00e401db
 8009918:	01db01f1 	.word	0x01db01f1
 800991c:	017b01ec 	.word	0x017b01ec
 8009920:	017b017b 	.word	0x017b017b
 8009924:	017b017b 	.word	0x017b017b
 8009928:	017b017b 	.word	0x017b017b
 800992c:	017b017b 	.word	0x017b017b
 8009930:	01db01db 	.word	0x01db01db
 8009934:	01db01db 	.word	0x01db01db
 8009938:	01db01db 	.word	0x01db01db
 800993c:	01db01db 	.word	0x01db01db
 8009940:	01db01db 	.word	0x01db01db
 8009944:	01db005e 	.word	0x01db005e
 8009948:	01db01db 	.word	0x01db01db
 800994c:	01db01db 	.word	0x01db01db
 8009950:	01db01db 	.word	0x01db01db
 8009954:	01db01db 	.word	0x01db01db
 8009958:	00b001db 	.word	0x00b001db
 800995c:	01db01db 	.word	0x01db01db
 8009960:	01db01db 	.word	0x01db01db
 8009964:	00c601db 	.word	0x00c601db
 8009968:	01db01db 	.word	0x01db01db
 800996c:	01db014a 	.word	0x01db014a
 8009970:	01db01db 	.word	0x01db01db
 8009974:	01db01db 	.word	0x01db01db
 8009978:	01db01db 	.word	0x01db01db
 800997c:	01db01db 	.word	0x01db01db
 8009980:	00ee01db 	.word	0x00ee01db
 8009984:	01db0062 	.word	0x01db0062
 8009988:	01db01db 	.word	0x01db01db
 800998c:	006200e9 	.word	0x006200e9
 8009990:	01db01db 	.word	0x01db01db
 8009994:	01db0059 	.word	0x01db0059
 8009998:	00b4018c 	.word	0x00b4018c
 800999c:	00590166 	.word	0x00590166
 80099a0:	01b401db 	.word	0x01b401db
 80099a4:	00ca01db 	.word	0x00ca01db
 80099a8:	01db01db 	.word	0x01db01db
 80099ac:	019d      	.short	0x019d
 80099ae:	9b03      	ldr	r3, [sp, #12]
 80099b0:	f043 0310 	orr.w	r3, r3, #16
 80099b4:	9303      	str	r3, [sp, #12]
 80099b6:	e798      	b.n	80098ea <_vfiprintf_r+0x102>
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	f043 0310 	orr.w	r3, r3, #16
 80099be:	9303      	str	r3, [sp, #12]
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 80099c6:	06d8      	lsls	r0, r3, #27
 80099c8:	f140 83bf 	bpl.w	800a14a <_vfiprintf_r+0x962>
 80099cc:	9b07      	ldr	r3, [sp, #28]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	3304      	adds	r3, #4
 80099d2:	9307      	str	r3, [sp, #28]
 80099d4:	2a00      	cmp	r2, #0
 80099d6:	f2c0 83c5 	blt.w	800a164 <_vfiprintf_r+0x97c>
 80099da:	bf0c      	ite	eq
 80099dc:	2100      	moveq	r1, #0
 80099de:	2101      	movne	r1, #1
 80099e0:	2301      	movs	r3, #1
 80099e2:	2c00      	cmp	r4, #0
 80099e4:	bfa2      	ittt	ge
 80099e6:	9803      	ldrge	r0, [sp, #12]
 80099e8:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 80099ec:	9003      	strge	r0, [sp, #12]
 80099ee:	2c00      	cmp	r4, #0
 80099f0:	bf18      	it	ne
 80099f2:	f041 0101 	orrne.w	r1, r1, #1
 80099f6:	2900      	cmp	r1, #0
 80099f8:	f000 8261 	beq.w	8009ebe <_vfiprintf_r+0x6d6>
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	f000 8365 	beq.w	800a0cc <_vfiprintf_r+0x8e4>
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	bf18      	it	ne
 8009a06:	f50d 63a2 	addne.w	r3, sp, #1296	; 0x510
 8009a0a:	d101      	bne.n	8009a10 <_vfiprintf_r+0x228>
 8009a0c:	e378      	b.n	800a100 <_vfiprintf_r+0x918>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	f002 0107 	and.w	r1, r2, #7
 8009a14:	1e58      	subs	r0, r3, #1
 8009a16:	3130      	adds	r1, #48	; 0x30
 8009a18:	08d2      	lsrs	r2, r2, #3
 8009a1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a1e:	d1f6      	bne.n	8009a0e <_vfiprintf_r+0x226>
 8009a20:	9a03      	ldr	r2, [sp, #12]
 8009a22:	900a      	str	r0, [sp, #40]	; 0x28
 8009a24:	07d2      	lsls	r2, r2, #31
 8009a26:	f140 83d8 	bpl.w	800a1da <_vfiprintf_r+0x9f2>
 8009a2a:	2930      	cmp	r1, #48	; 0x30
 8009a2c:	f000 8425 	beq.w	800a27a <_vfiprintf_r+0xa92>
 8009a30:	9a02      	ldr	r2, [sp, #8]
 8009a32:	1e99      	subs	r1, r3, #2
 8009a34:	910a      	str	r1, [sp, #40]	; 0x28
 8009a36:	1a52      	subs	r2, r2, r1
 8009a38:	9206      	str	r2, [sp, #24]
 8009a3a:	2230      	movs	r2, #48	; 0x30
 8009a3c:	f803 2c02 	strb.w	r2, [r3, #-2]
 8009a40:	9409      	str	r4, [sp, #36]	; 0x24
 8009a42:	9806      	ldr	r0, [sp, #24]
 8009a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a46:	f89d 351f 	ldrb.w	r3, [sp, #1311]	; 0x51f
 8009a4a:	4288      	cmp	r0, r1
 8009a4c:	bfb8      	it	lt
 8009a4e:	4608      	movlt	r0, r1
 8009a50:	9004      	str	r0, [sp, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d051      	beq.n	8009afa <_vfiprintf_r+0x312>
 8009a56:	3001      	adds	r0, #1
 8009a58:	9004      	str	r0, [sp, #16]
 8009a5a:	e04e      	b.n	8009afa <_vfiprintf_r+0x312>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	f043 0310 	orr.w	r3, r3, #16
 8009a62:	9303      	str	r3, [sp, #12]
 8009a64:	9803      	ldr	r0, [sp, #12]
 8009a66:	f010 0310 	ands.w	r3, r0, #16
 8009a6a:	f000 835a 	beq.w	800a122 <_vfiprintf_r+0x93a>
 8009a6e:	9b07      	ldr	r3, [sp, #28]
 8009a70:	9807      	ldr	r0, [sp, #28]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	2300      	movs	r3, #0
 8009a76:	3004      	adds	r0, #4
 8009a78:	9007      	str	r0, [sp, #28]
 8009a7a:	1ad1      	subs	r1, r2, r3
 8009a7c:	bf18      	it	ne
 8009a7e:	2101      	movne	r1, #1
 8009a80:	2000      	movs	r0, #0
 8009a82:	f88d 051f 	strb.w	r0, [sp, #1311]	; 0x51f
 8009a86:	e7ac      	b.n	80099e2 <_vfiprintf_r+0x1fa>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	f043 0310 	orr.w	r3, r3, #16
 8009a8e:	9303      	str	r3, [sp, #12]
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	06db      	lsls	r3, r3, #27
 8009a94:	f140 8351 	bpl.w	800a13a <_vfiprintf_r+0x952>
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	9807      	ldr	r0, [sp, #28]
 8009aa0:	3004      	adds	r0, #4
 8009aa2:	1c11      	adds	r1, r2, #0
 8009aa4:	9007      	str	r0, [sp, #28]
 8009aa6:	bf18      	it	ne
 8009aa8:	2101      	movne	r1, #1
 8009aaa:	e7e9      	b.n	8009a80 <_vfiprintf_r+0x298>
 8009aac:	9b07      	ldr	r3, [sp, #28]
 8009aae:	9807      	ldr	r0, [sp, #28]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	9308      	str	r3, [sp, #32]
 8009ab4:	1d03      	adds	r3, r0, #4
 8009ab6:	9908      	ldr	r1, [sp, #32]
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	f280 8375 	bge.w	800a1a8 <_vfiprintf_r+0x9c0>
 8009abe:	4249      	negs	r1, r1
 8009ac0:	9307      	str	r3, [sp, #28]
 8009ac2:	9108      	str	r1, [sp, #32]
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	f043 0304 	orr.w	r3, r3, #4
 8009aca:	9303      	str	r3, [sp, #12]
 8009acc:	e70d      	b.n	80098ea <_vfiprintf_r+0x102>
 8009ace:	9b03      	ldr	r3, [sp, #12]
 8009ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad4:	9303      	str	r3, [sp, #12]
 8009ad6:	e708      	b.n	80098ea <_vfiprintf_r+0x102>
 8009ad8:	9b07      	ldr	r3, [sp, #28]
 8009ada:	2001      	movs	r0, #1
 8009adc:	2200      	movs	r2, #0
 8009ade:	9004      	str	r0, [sp, #16]
 8009ae0:	1d19      	adds	r1, r3, #4
 8009ae2:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
 8009aec:	9107      	str	r1, [sp, #28]
 8009aee:	9006      	str	r0, [sp, #24]
 8009af0:	920a      	str	r2, [sp, #40]	; 0x28
 8009af2:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 8009af6:	2300      	movs	r3, #0
 8009af8:	9309      	str	r3, [sp, #36]	; 0x24
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	f013 0302 	ands.w	r3, r3, #2
 8009b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b02:	d002      	beq.n	8009b0a <_vfiprintf_r+0x322>
 8009b04:	9b04      	ldr	r3, [sp, #16]
 8009b06:	3302      	adds	r3, #2
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9b03      	ldr	r3, [sp, #12]
 8009b0c:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8009b10:	930c      	str	r3, [sp, #48]	; 0x30
 8009b12:	f040 8101 	bne.w	8009d18 <_vfiprintf_r+0x530>
 8009b16:	9b08      	ldr	r3, [sp, #32]
 8009b18:	9804      	ldr	r0, [sp, #16]
 8009b1a:	1a1c      	subs	r4, r3, r0
 8009b1c:	2c00      	cmp	r4, #0
 8009b1e:	f340 80fb 	ble.w	8009d18 <_vfiprintf_r+0x530>
 8009b22:	2c10      	cmp	r4, #16
 8009b24:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009b28:	f340 83a3 	ble.w	800a272 <_vfiprintf_r+0xa8a>
 8009b2c:	f04f 0810 	mov.w	r8, #16
 8009b30:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009b34:	4e95      	ldr	r6, [pc, #596]	; (8009d8c <_vfiprintf_r+0x5a4>)
 8009b36:	e002      	b.n	8009b3e <_vfiprintf_r+0x356>
 8009b38:	3c10      	subs	r4, #16
 8009b3a:	2c10      	cmp	r4, #16
 8009b3c:	dd1b      	ble.n	8009b76 <_vfiprintf_r+0x38e>
 8009b3e:	3301      	adds	r3, #1
 8009b40:	3210      	adds	r2, #16
 8009b42:	e885 0140 	stmia.w	r5, {r6, r8}
 8009b46:	3508      	adds	r5, #8
 8009b48:	2b07      	cmp	r3, #7
 8009b4a:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009b4e:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009b52:	ddf1      	ble.n	8009b38 <_vfiprintf_r+0x350>
 8009b54:	4658      	mov	r0, fp
 8009b56:	4649      	mov	r1, r9
 8009b58:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009b5c:	4655      	mov	r5, sl
 8009b5e:	f7ff fe03 	bl	8009768 <__sprint_r>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	f040 81c8 	bne.w	8009ef8 <_vfiprintf_r+0x710>
 8009b68:	3c10      	subs	r4, #16
 8009b6a:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009b6e:	2c10      	cmp	r4, #16
 8009b70:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009b74:	dce3      	bgt.n	8009b3e <_vfiprintf_r+0x356>
 8009b76:	3301      	adds	r3, #1
 8009b78:	1912      	adds	r2, r2, r4
 8009b7a:	2b07      	cmp	r3, #7
 8009b7c:	602e      	str	r6, [r5, #0]
 8009b7e:	606c      	str	r4, [r5, #4]
 8009b80:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009b84:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009b88:	f300 82f5 	bgt.w	800a176 <_vfiprintf_r+0x98e>
 8009b8c:	3508      	adds	r5, #8
 8009b8e:	e0c7      	b.n	8009d20 <_vfiprintf_r+0x538>
 8009b90:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009b94:	9a03      	ldr	r2, [sp, #12]
 8009b96:	497e      	ldr	r1, [pc, #504]	; (8009d90 <_vfiprintf_r+0x5a8>)
 8009b98:	06d0      	lsls	r0, r2, #27
 8009b9a:	910d      	str	r1, [sp, #52]	; 0x34
 8009b9c:	d552      	bpl.n	8009c44 <_vfiprintf_r+0x45c>
 8009b9e:	9807      	ldr	r0, [sp, #28]
 8009ba0:	6802      	ldr	r2, [r0, #0]
 8009ba2:	3004      	adds	r0, #4
 8009ba4:	9007      	str	r0, [sp, #28]
 8009ba6:	1c11      	adds	r1, r2, #0
 8009ba8:	9803      	ldr	r0, [sp, #12]
 8009baa:	bf18      	it	ne
 8009bac:	2101      	movne	r1, #1
 8009bae:	4208      	tst	r0, r1
 8009bb0:	d056      	beq.n	8009c60 <_vfiprintf_r+0x478>
 8009bb2:	f88d 351d 	strb.w	r3, [sp, #1309]	; 0x51d
 8009bb6:	f040 0002 	orr.w	r0, r0, #2
 8009bba:	2330      	movs	r3, #48	; 0x30
 8009bbc:	9003      	str	r0, [sp, #12]
 8009bbe:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e75b      	b.n	8009a80 <_vfiprintf_r+0x298>
 8009bc8:	9b07      	ldr	r3, [sp, #28]
 8009bca:	4872      	ldr	r0, [pc, #456]	; (8009d94 <_vfiprintf_r+0x5ac>)
 8009bcc:	1d19      	adds	r1, r3, #4
 8009bce:	9107      	str	r1, [sp, #28]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	2178      	movs	r1, #120	; 0x78
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	f88d 151d 	strb.w	r1, [sp, #1309]	; 0x51d
 8009bda:	f043 0302 	orr.w	r3, r3, #2
 8009bde:	9303      	str	r3, [sp, #12]
 8009be0:	2330      	movs	r3, #48	; 0x30
 8009be2:	f88d 351c 	strb.w	r3, [sp, #1308]	; 0x51c
 8009be6:	2302      	movs	r3, #2
 8009be8:	1c11      	adds	r1, r2, #0
 8009bea:	bf18      	it	ne
 8009bec:	2101      	movne	r1, #1
 8009bee:	900d      	str	r0, [sp, #52]	; 0x34
 8009bf0:	e746      	b.n	8009a80 <_vfiprintf_r+0x298>
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009bfa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009bfe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009c02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009c06:	4607      	mov	r7, r0
 8009c08:	2e09      	cmp	r6, #9
 8009c0a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009c0e:	d9f2      	bls.n	8009bf6 <_vfiprintf_r+0x40e>
 8009c10:	9108      	str	r1, [sp, #32]
 8009c12:	e66c      	b.n	80098ee <_vfiprintf_r+0x106>
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009c1a:	06d9      	lsls	r1, r3, #27
 8009c1c:	f100 82e1 	bmi.w	800a1e2 <_vfiprintf_r+0x9fa>
 8009c20:	9b03      	ldr	r3, [sp, #12]
 8009c22:	065a      	lsls	r2, r3, #25
 8009c24:	f140 830d 	bpl.w	800a242 <_vfiprintf_r+0xa5a>
 8009c28:	9807      	ldr	r0, [sp, #28]
 8009c2a:	9905      	ldr	r1, [sp, #20]
 8009c2c:	6803      	ldr	r3, [r0, #0]
 8009c2e:	3004      	adds	r0, #4
 8009c30:	9007      	str	r0, [sp, #28]
 8009c32:	8019      	strh	r1, [r3, #0]
 8009c34:	e61b      	b.n	800986e <_vfiprintf_r+0x86>
 8009c36:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009c3a:	9a03      	ldr	r2, [sp, #12]
 8009c3c:	4955      	ldr	r1, [pc, #340]	; (8009d94 <_vfiprintf_r+0x5ac>)
 8009c3e:	06d0      	lsls	r0, r2, #27
 8009c40:	910d      	str	r1, [sp, #52]	; 0x34
 8009c42:	d4ac      	bmi.n	8009b9e <_vfiprintf_r+0x3b6>
 8009c44:	9903      	ldr	r1, [sp, #12]
 8009c46:	0649      	lsls	r1, r1, #25
 8009c48:	f140 82d6 	bpl.w	800a1f8 <_vfiprintf_r+0xa10>
 8009c4c:	9807      	ldr	r0, [sp, #28]
 8009c4e:	8802      	ldrh	r2, [r0, #0]
 8009c50:	3004      	adds	r0, #4
 8009c52:	9007      	str	r0, [sp, #28]
 8009c54:	1c11      	adds	r1, r2, #0
 8009c56:	9803      	ldr	r0, [sp, #12]
 8009c58:	bf18      	it	ne
 8009c5a:	2101      	movne	r1, #1
 8009c5c:	4208      	tst	r0, r1
 8009c5e:	d1a8      	bne.n	8009bb2 <_vfiprintf_r+0x3ca>
 8009c60:	2302      	movs	r3, #2
 8009c62:	e70d      	b.n	8009a80 <_vfiprintf_r+0x298>
 8009c64:	9b07      	ldr	r3, [sp, #28]
 8009c66:	2600      	movs	r6, #0
 8009c68:	f88d 651f 	strb.w	r6, [sp, #1311]	; 0x51f
 8009c6c:	1d19      	adds	r1, r3, #4
 8009c6e:	9107      	str	r1, [sp, #28]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	930a      	str	r3, [sp, #40]	; 0x28
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 82f2 	beq.w	800a25e <_vfiprintf_r+0xa76>
 8009c7a:	2c00      	cmp	r4, #0
 8009c7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c7e:	f2c0 82e8 	blt.w	800a252 <_vfiprintf_r+0xa6a>
 8009c82:	4631      	mov	r1, r6
 8009c84:	4622      	mov	r2, r4
 8009c86:	f7fd fcd7 	bl	8007638 <memchr>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	f000 82fb 	beq.w	800a286 <_vfiprintf_r+0xa9e>
 8009c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c92:	9609      	str	r6, [sp, #36]	; 0x24
 8009c94:	1ac0      	subs	r0, r0, r3
 8009c96:	9006      	str	r0, [sp, #24]
 8009c98:	42a0      	cmp	r0, r4
 8009c9a:	bfc8      	it	gt
 8009c9c:	9406      	strgt	r4, [sp, #24]
 8009c9e:	e6d0      	b.n	8009a42 <_vfiprintf_r+0x25a>
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	f043 0301 	orr.w	r3, r3, #1
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	e61f      	b.n	80098ea <_vfiprintf_r+0x102>
 8009caa:	2a00      	cmp	r2, #0
 8009cac:	bf08      	it	eq
 8009cae:	2220      	moveq	r2, #32
 8009cb0:	e61b      	b.n	80098ea <_vfiprintf_r+0x102>
 8009cb2:	f88d 251f 	strb.w	r2, [sp, #1311]	; 0x51f
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 82b6 	beq.w	800a228 <_vfiprintf_r+0xa40>
 8009cbc:	2001      	movs	r0, #1
 8009cbe:	f88d 34e8 	strb.w	r3, [sp, #1256]	; 0x4e8
 8009cc2:	9004      	str	r0, [sp, #16]
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	9006      	str	r0, [sp, #24]
 8009cc8:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 8009ccc:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 8009cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd2:	e710      	b.n	8009af6 <_vfiprintf_r+0x30e>
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cda:	9303      	str	r3, [sp, #12]
 8009cdc:	e605      	b.n	80098ea <_vfiprintf_r+0x102>
 8009cde:	f817 3b01 	ldrb.w	r3, [r7], #1
 8009ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce4:	f000 8256 	beq.w	800a194 <_vfiprintf_r+0x9ac>
 8009ce8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009cec:	2400      	movs	r4, #0
 8009cee:	2909      	cmp	r1, #9
 8009cf0:	f63f adfd 	bhi.w	80098ee <_vfiprintf_r+0x106>
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	2400      	movs	r4, #0
 8009cf8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009cfc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009d00:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8009d04:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009d08:	2909      	cmp	r1, #9
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	d9f4      	bls.n	8009cf8 <_vfiprintf_r+0x510>
 8009d0e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009d12:	e5ec      	b.n	80098ee <_vfiprintf_r+0x106>
 8009d14:	222b      	movs	r2, #43	; 0x2b
 8009d16:	e5e8      	b.n	80098ea <_vfiprintf_r+0x102>
 8009d18:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009d1c:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009d20:	f89d 151f 	ldrb.w	r1, [sp, #1311]	; 0x51f
 8009d24:	b179      	cbz	r1, 8009d46 <_vfiprintf_r+0x55e>
 8009d26:	3301      	adds	r3, #1
 8009d28:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8009d2c:	310f      	adds	r1, #15
 8009d2e:	6029      	str	r1, [r5, #0]
 8009d30:	2101      	movs	r1, #1
 8009d32:	2b07      	cmp	r3, #7
 8009d34:	440a      	add	r2, r1
 8009d36:	6069      	str	r1, [r5, #4]
 8009d38:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009d3c:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009d40:	f300 819d 	bgt.w	800a07e <_vfiprintf_r+0x896>
 8009d44:	3508      	adds	r5, #8
 8009d46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d48:	b179      	cbz	r1, 8009d6a <_vfiprintf_r+0x582>
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8009d50:	310c      	adds	r1, #12
 8009d52:	6029      	str	r1, [r5, #0]
 8009d54:	2102      	movs	r1, #2
 8009d56:	2b07      	cmp	r3, #7
 8009d58:	440a      	add	r2, r1
 8009d5a:	6069      	str	r1, [r5, #4]
 8009d5c:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009d60:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009d64:	f300 819a 	bgt.w	800a09c <_vfiprintf_r+0x8b4>
 8009d68:	3508      	adds	r5, #8
 8009d6a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d6c:	2880      	cmp	r0, #128	; 0x80
 8009d6e:	f000 80d2 	beq.w	8009f16 <_vfiprintf_r+0x72e>
 8009d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d74:	9806      	ldr	r0, [sp, #24]
 8009d76:	1a0c      	subs	r4, r1, r0
 8009d78:	2c00      	cmp	r4, #0
 8009d7a:	dd3a      	ble.n	8009df2 <_vfiprintf_r+0x60a>
 8009d7c:	2c10      	cmp	r4, #16
 8009d7e:	4e06      	ldr	r6, [pc, #24]	; (8009d98 <_vfiprintf_r+0x5b0>)
 8009d80:	bfc8      	it	gt
 8009d82:	f04f 0810 	movgt.w	r8, #16
 8009d86:	dc0c      	bgt.n	8009da2 <_vfiprintf_r+0x5ba>
 8009d88:	e027      	b.n	8009dda <_vfiprintf_r+0x5f2>
 8009d8a:	bf00      	nop
 8009d8c:	08026d70 	.word	0x08026d70
 8009d90:	08028c74 	.word	0x08028c74
 8009d94:	08028c88 	.word	0x08028c88
 8009d98:	08026d80 	.word	0x08026d80
 8009d9c:	3c10      	subs	r4, #16
 8009d9e:	2c10      	cmp	r4, #16
 8009da0:	dd1b      	ble.n	8009dda <_vfiprintf_r+0x5f2>
 8009da2:	3301      	adds	r3, #1
 8009da4:	3210      	adds	r2, #16
 8009da6:	e885 0140 	stmia.w	r5, {r6, r8}
 8009daa:	3508      	adds	r5, #8
 8009dac:	2b07      	cmp	r3, #7
 8009dae:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009db2:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009db6:	ddf1      	ble.n	8009d9c <_vfiprintf_r+0x5b4>
 8009db8:	4658      	mov	r0, fp
 8009dba:	4649      	mov	r1, r9
 8009dbc:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009dc0:	4655      	mov	r5, sl
 8009dc2:	f7ff fcd1 	bl	8009768 <__sprint_r>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f040 8096 	bne.w	8009ef8 <_vfiprintf_r+0x710>
 8009dcc:	3c10      	subs	r4, #16
 8009dce:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009dd2:	2c10      	cmp	r4, #16
 8009dd4:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009dd8:	dce3      	bgt.n	8009da2 <_vfiprintf_r+0x5ba>
 8009dda:	3301      	adds	r3, #1
 8009ddc:	1912      	adds	r2, r2, r4
 8009dde:	2b07      	cmp	r3, #7
 8009de0:	602e      	str	r6, [r5, #0]
 8009de2:	606c      	str	r4, [r5, #4]
 8009de4:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009de8:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009dec:	f300 8138 	bgt.w	800a060 <_vfiprintf_r+0x878>
 8009df0:	3508      	adds	r5, #8
 8009df2:	3301      	adds	r3, #1
 8009df4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009df6:	9806      	ldr	r0, [sp, #24]
 8009df8:	2b07      	cmp	r3, #7
 8009dfa:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009dfe:	6029      	str	r1, [r5, #0]
 8009e00:	4402      	add	r2, r0
 8009e02:	6068      	str	r0, [r5, #4]
 8009e04:	bfd8      	it	le
 8009e06:	f105 0108 	addle.w	r1, r5, #8
 8009e0a:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009e0e:	f300 80ba 	bgt.w	8009f86 <_vfiprintf_r+0x79e>
 8009e12:	9b03      	ldr	r3, [sp, #12]
 8009e14:	0758      	lsls	r0, r3, #29
 8009e16:	d536      	bpl.n	8009e86 <_vfiprintf_r+0x69e>
 8009e18:	9d08      	ldr	r5, [sp, #32]
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	1aec      	subs	r4, r5, r3
 8009e1e:	2c00      	cmp	r4, #0
 8009e20:	dd31      	ble.n	8009e86 <_vfiprintf_r+0x69e>
 8009e22:	2c10      	cmp	r4, #16
 8009e24:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009e28:	bfd8      	it	le
 8009e2a:	4ea6      	ldrle	r6, [pc, #664]	; (800a0c4 <_vfiprintf_r+0x8dc>)
 8009e2c:	dd20      	ble.n	8009e70 <_vfiprintf_r+0x688>
 8009e2e:	2510      	movs	r5, #16
 8009e30:	4ea4      	ldr	r6, [pc, #656]	; (800a0c4 <_vfiprintf_r+0x8dc>)
 8009e32:	e002      	b.n	8009e3a <_vfiprintf_r+0x652>
 8009e34:	3c10      	subs	r4, #16
 8009e36:	2c10      	cmp	r4, #16
 8009e38:	dd1a      	ble.n	8009e70 <_vfiprintf_r+0x688>
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	3210      	adds	r2, #16
 8009e3e:	600e      	str	r6, [r1, #0]
 8009e40:	604d      	str	r5, [r1, #4]
 8009e42:	3108      	adds	r1, #8
 8009e44:	2b07      	cmp	r3, #7
 8009e46:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009e4a:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009e4e:	ddf1      	ble.n	8009e34 <_vfiprintf_r+0x64c>
 8009e50:	4658      	mov	r0, fp
 8009e52:	4649      	mov	r1, r9
 8009e54:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009e58:	f7ff fc86 	bl	8009768 <__sprint_r>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d14b      	bne.n	8009ef8 <_vfiprintf_r+0x710>
 8009e60:	3c10      	subs	r4, #16
 8009e62:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009e66:	2c10      	cmp	r4, #16
 8009e68:	4651      	mov	r1, sl
 8009e6a:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009e6e:	dce4      	bgt.n	8009e3a <_vfiprintf_r+0x652>
 8009e70:	3301      	adds	r3, #1
 8009e72:	18a2      	adds	r2, r4, r2
 8009e74:	2b07      	cmp	r3, #7
 8009e76:	600e      	str	r6, [r1, #0]
 8009e78:	604c      	str	r4, [r1, #4]
 8009e7a:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009e7e:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009e82:	f300 8194 	bgt.w	800a1ae <_vfiprintf_r+0x9c6>
 8009e86:	9d05      	ldr	r5, [sp, #20]
 8009e88:	9b04      	ldr	r3, [sp, #16]
 8009e8a:	9808      	ldr	r0, [sp, #32]
 8009e8c:	4283      	cmp	r3, r0
 8009e8e:	bfac      	ite	ge
 8009e90:	18ed      	addge	r5, r5, r3
 8009e92:	182d      	addlt	r5, r5, r0
 8009e94:	9505      	str	r5, [sp, #20]
 8009e96:	bb3a      	cbnz	r2, 8009ee8 <_vfiprintf_r+0x700>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009e9e:	783b      	ldrb	r3, [r7, #0]
 8009ea0:	4655      	mov	r5, sl
 8009ea2:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8009ea6:	bf18      	it	ne
 8009ea8:	2201      	movne	r2, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	bf0c      	ite	eq
 8009eae:	2300      	moveq	r3, #0
 8009eb0:	f002 0301 	andne.w	r3, r2, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f47f ace7 	bne.w	8009888 <_vfiprintf_r+0xa0>
 8009eba:	463c      	mov	r4, r7
 8009ebc:	e508      	b.n	80098d0 <_vfiprintf_r+0xe8>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d16d      	bne.n	8009f9e <_vfiprintf_r+0x7b6>
 8009ec2:	9803      	ldr	r0, [sp, #12]
 8009ec4:	07c2      	lsls	r2, r0, #31
 8009ec6:	bf5e      	ittt	pl
 8009ec8:	9306      	strpl	r3, [sp, #24]
 8009eca:	f50d 63a2 	addpl.w	r3, sp, #1296	; 0x510
 8009ece:	930a      	strpl	r3, [sp, #40]	; 0x28
 8009ed0:	f57f adb6 	bpl.w	8009a40 <_vfiprintf_r+0x258>
 8009ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ed6:	9306      	str	r3, [sp, #24]
 8009ed8:	2330      	movs	r3, #48	; 0x30
 8009eda:	f88d 350f 	strb.w	r3, [sp, #1295]	; 0x50f
 8009ede:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8009ee2:	330f      	adds	r3, #15
 8009ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee6:	e5ab      	b.n	8009a40 <_vfiprintf_r+0x258>
 8009ee8:	4658      	mov	r0, fp
 8009eea:	4649      	mov	r1, r9
 8009eec:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009ef0:	f7ff fc3a 	bl	8009768 <__sprint_r>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d0cf      	beq.n	8009e98 <_vfiprintf_r+0x6b0>
 8009ef8:	464c      	mov	r4, r9
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f00:	9b05      	ldr	r3, [sp, #20]
 8009f02:	bf18      	it	ne
 8009f04:	f04f 33ff 	movne.w	r3, #4294967295
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	9805      	ldr	r0, [sp, #20]
 8009f0c:	b049      	add	sp, #292	; 0x124
 8009f0e:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8009f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f16:	9908      	ldr	r1, [sp, #32]
 8009f18:	9804      	ldr	r0, [sp, #16]
 8009f1a:	1a0c      	subs	r4, r1, r0
 8009f1c:	2c00      	cmp	r4, #0
 8009f1e:	f77f af28 	ble.w	8009d72 <_vfiprintf_r+0x58a>
 8009f22:	2c10      	cmp	r4, #16
 8009f24:	4e68      	ldr	r6, [pc, #416]	; (800a0c8 <_vfiprintf_r+0x8e0>)
 8009f26:	bfc8      	it	gt
 8009f28:	f04f 0810 	movgt.w	r8, #16
 8009f2c:	dc03      	bgt.n	8009f36 <_vfiprintf_r+0x74e>
 8009f2e:	e01d      	b.n	8009f6c <_vfiprintf_r+0x784>
 8009f30:	3c10      	subs	r4, #16
 8009f32:	2c10      	cmp	r4, #16
 8009f34:	dd1a      	ble.n	8009f6c <_vfiprintf_r+0x784>
 8009f36:	3301      	adds	r3, #1
 8009f38:	3210      	adds	r2, #16
 8009f3a:	e885 0140 	stmia.w	r5, {r6, r8}
 8009f3e:	3508      	adds	r5, #8
 8009f40:	2b07      	cmp	r3, #7
 8009f42:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009f46:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009f4a:	ddf1      	ble.n	8009f30 <_vfiprintf_r+0x748>
 8009f4c:	4658      	mov	r0, fp
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009f54:	4655      	mov	r5, sl
 8009f56:	f7ff fc07 	bl	8009768 <__sprint_r>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d1cc      	bne.n	8009ef8 <_vfiprintf_r+0x710>
 8009f5e:	3c10      	subs	r4, #16
 8009f60:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009f64:	2c10      	cmp	r4, #16
 8009f66:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 8009f6a:	dce4      	bgt.n	8009f36 <_vfiprintf_r+0x74e>
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	1912      	adds	r2, r2, r4
 8009f70:	2b07      	cmp	r3, #7
 8009f72:	602e      	str	r6, [r5, #0]
 8009f74:	606c      	str	r4, [r5, #4]
 8009f76:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 8009f7a:	f8cd 2518 	str.w	r2, [sp, #1304]	; 0x518
 8009f7e:	f300 8144 	bgt.w	800a20a <_vfiprintf_r+0xa22>
 8009f82:	3508      	adds	r5, #8
 8009f84:	e6f5      	b.n	8009d72 <_vfiprintf_r+0x58a>
 8009f86:	4658      	mov	r0, fp
 8009f88:	4649      	mov	r1, r9
 8009f8a:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8009f8e:	f7ff fbeb 	bl	8009768 <__sprint_r>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d1b0      	bne.n	8009ef8 <_vfiprintf_r+0x710>
 8009f96:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 8009f9a:	4651      	mov	r1, sl
 8009f9c:	e739      	b.n	8009e12 <_vfiprintf_r+0x62a>
 8009f9e:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8009fa2:	9106      	str	r1, [sp, #24]
 8009fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8009fa6:	e54b      	b.n	8009a40 <_vfiprintf_r+0x258>
 8009fa8:	4658      	mov	r0, fp
 8009faa:	4621      	mov	r1, r4
 8009fac:	f000 f9ea 	bl	800a384 <__swsetup_r>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f040 816c 	bne.w	800a28e <_vfiprintf_r+0xaa6>
 8009fb6:	89a5      	ldrh	r5, [r4, #12]
 8009fb8:	b2ab      	uxth	r3, r5
 8009fba:	f003 031a 	and.w	r3, r3, #26
 8009fbe:	2b0a      	cmp	r3, #10
 8009fc0:	f47f ac38 	bne.w	8009834 <_vfiprintf_r+0x4c>
 8009fc4:	89e6      	ldrh	r6, [r4, #14]
 8009fc6:	0432      	lsls	r2, r6, #16
 8009fc8:	f53f ac34 	bmi.w	8009834 <_vfiprintf_r+0x4c>
 8009fcc:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
 8009fd0:	463a      	mov	r2, r7
 8009fd2:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8009fd6:	4658      	mov	r0, fp
 8009fd8:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8009fdc:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 8009fe0:	9b07      	ldr	r3, [sp, #28]
 8009fe2:	f025 0502 	bic.w	r5, r5, #2
 8009fe6:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8009fea:	f8ad 544c 	strh.w	r5, [sp, #1100]	; 0x44c
 8009fee:	f8cd e4a4 	str.w	lr, [sp, #1188]	; 0x4a4
 8009ff2:	ad10      	add	r5, sp, #64	; 0x40
 8009ff4:	f8ad 644e 	strh.w	r6, [sp, #1102]	; 0x44e
 8009ff8:	f8cd 5440 	str.w	r5, [sp, #1088]	; 0x440
 8009ffc:	f8cd 5450 	str.w	r5, [sp, #1104]	; 0x450
 800a000:	2500      	movs	r5, #0
 800a002:	f8cd c45c 	str.w	ip, [sp, #1116]	; 0x45c
 800a006:	f8cd 8464 	str.w	r8, [sp, #1124]	; 0x464
 800a00a:	f8cd 7448 	str.w	r7, [sp, #1096]	; 0x448
 800a00e:	f8cd 7454 	str.w	r7, [sp, #1108]	; 0x454
 800a012:	f8cd 5458 	str.w	r5, [sp, #1112]	; 0x458
 800a016:	f7ff fbe7 	bl	80097e8 <_vfiprintf_r>
 800a01a:	42a8      	cmp	r0, r5
 800a01c:	9005      	str	r0, [sp, #20]
 800a01e:	db0a      	blt.n	800a036 <_vfiprintf_r+0x84e>
 800a020:	4658      	mov	r0, fp
 800a022:	f50d 6188 	add.w	r1, sp, #1088	; 0x440
 800a026:	f001 faef 	bl	800b608 <_fflush_r>
 800a02a:	9b05      	ldr	r3, [sp, #20]
 800a02c:	42a8      	cmp	r0, r5
 800a02e:	bf18      	it	ne
 800a030:	f04f 33ff 	movne.w	r3, #4294967295
 800a034:	9305      	str	r3, [sp, #20]
 800a036:	f8bd 344c 	ldrh.w	r3, [sp, #1100]	; 0x44c
 800a03a:	065b      	lsls	r3, r3, #25
 800a03c:	f57f af65 	bpl.w	8009f0a <_vfiprintf_r+0x722>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	e75f      	b.n	8009f0a <_vfiprintf_r+0x722>
 800a04a:	4658      	mov	r0, fp
 800a04c:	4649      	mov	r1, r9
 800a04e:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a052:	f7ff fb89 	bl	8009768 <__sprint_r>
 800a056:	2800      	cmp	r0, #0
 800a058:	f47f af4e 	bne.w	8009ef8 <_vfiprintf_r+0x710>
 800a05c:	4655      	mov	r5, sl
 800a05e:	e434      	b.n	80098ca <_vfiprintf_r+0xe2>
 800a060:	4658      	mov	r0, fp
 800a062:	4649      	mov	r1, r9
 800a064:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a068:	f7ff fb7e 	bl	8009768 <__sprint_r>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f47f af43 	bne.w	8009ef8 <_vfiprintf_r+0x710>
 800a072:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a076:	4655      	mov	r5, sl
 800a078:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a07c:	e6b9      	b.n	8009df2 <_vfiprintf_r+0x60a>
 800a07e:	4658      	mov	r0, fp
 800a080:	4649      	mov	r1, r9
 800a082:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a086:	f7ff fb6f 	bl	8009768 <__sprint_r>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	f47f af34 	bne.w	8009ef8 <_vfiprintf_r+0x710>
 800a090:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a094:	4655      	mov	r5, sl
 800a096:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a09a:	e654      	b.n	8009d46 <_vfiprintf_r+0x55e>
 800a09c:	4658      	mov	r0, fp
 800a09e:	4649      	mov	r1, r9
 800a0a0:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a0a4:	f7ff fb60 	bl	8009768 <__sprint_r>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	f47f af25 	bne.w	8009ef8 <_vfiprintf_r+0x710>
 800a0ae:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a0b2:	4655      	mov	r5, sl
 800a0b4:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a0b8:	e657      	b.n	8009d6a <_vfiprintf_r+0x582>
 800a0ba:	f001 fbc7 	bl	800b84c <__sinit>
 800a0be:	f7ff bba1 	b.w	8009804 <_vfiprintf_r+0x1c>
 800a0c2:	bf00      	nop
 800a0c4:	08026d70 	.word	0x08026d70
 800a0c8:	08026d80 	.word	0x08026d80
 800a0cc:	2a09      	cmp	r2, #9
 800a0ce:	d97a      	bls.n	800a1c6 <_vfiprintf_r+0x9de>
 800a0d0:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
 800a0d4:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800a0d8:	300f      	adds	r0, #15
 800a0da:	fbac 1302 	umull	r1, r3, ip, r2
 800a0de:	4601      	mov	r1, r0
 800a0e0:	3801      	subs	r0, #1
 800a0e2:	08db      	lsrs	r3, r3, #3
 800a0e4:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 800a0e8:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	3630      	adds	r6, #48	; 0x30
 800a0f0:	700e      	strb	r6, [r1, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f1      	bne.n	800a0da <_vfiprintf_r+0x8f2>
 800a0f6:	9b02      	ldr	r3, [sp, #8]
 800a0f8:	910a      	str	r1, [sp, #40]	; 0x28
 800a0fa:	1a5b      	subs	r3, r3, r1
 800a0fc:	9306      	str	r3, [sp, #24]
 800a0fe:	e49f      	b.n	8009a40 <_vfiprintf_r+0x258>
 800a100:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800a104:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a106:	330f      	adds	r3, #15
 800a108:	f002 000f 	and.w	r0, r2, #15
 800a10c:	4619      	mov	r1, r3
 800a10e:	3b01      	subs	r3, #1
 800a110:	0912      	lsrs	r2, r2, #4
 800a112:	5c30      	ldrb	r0, [r6, r0]
 800a114:	7008      	strb	r0, [r1, #0]
 800a116:	d1f7      	bne.n	800a108 <_vfiprintf_r+0x920>
 800a118:	9b02      	ldr	r3, [sp, #8]
 800a11a:	910a      	str	r1, [sp, #40]	; 0x28
 800a11c:	1a5b      	subs	r3, r3, r1
 800a11e:	9306      	str	r3, [sp, #24]
 800a120:	e48e      	b.n	8009a40 <_vfiprintf_r+0x258>
 800a122:	9a03      	ldr	r2, [sp, #12]
 800a124:	f012 0140 	ands.w	r1, r2, #64	; 0x40
 800a128:	d06b      	beq.n	800a202 <_vfiprintf_r+0xa1a>
 800a12a:	9807      	ldr	r0, [sp, #28]
 800a12c:	8802      	ldrh	r2, [r0, #0]
 800a12e:	3004      	adds	r0, #4
 800a130:	9007      	str	r0, [sp, #28]
 800a132:	1c11      	adds	r1, r2, #0
 800a134:	bf18      	it	ne
 800a136:	2101      	movne	r1, #1
 800a138:	e4a2      	b.n	8009a80 <_vfiprintf_r+0x298>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a140:	9b07      	ldr	r3, [sp, #28]
 800a142:	d056      	beq.n	800a1f2 <_vfiprintf_r+0xa0a>
 800a144:	881a      	ldrh	r2, [r3, #0]
 800a146:	2301      	movs	r3, #1
 800a148:	e4a9      	b.n	8009a9e <_vfiprintf_r+0x2b6>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a150:	9b07      	ldr	r3, [sp, #28]
 800a152:	bf0c      	ite	eq
 800a154:	681a      	ldreq	r2, [r3, #0]
 800a156:	f9b3 2000 	ldrshne.w	r2, [r3]
 800a15a:	3304      	adds	r3, #4
 800a15c:	9307      	str	r3, [sp, #28]
 800a15e:	2a00      	cmp	r2, #0
 800a160:	f6bf ac3b 	bge.w	80099da <_vfiprintf_r+0x1f2>
 800a164:	4252      	negs	r2, r2
 800a166:	1c11      	adds	r1, r2, #0
 800a168:	bf18      	it	ne
 800a16a:	2101      	movne	r1, #1
 800a16c:	232d      	movs	r3, #45	; 0x2d
 800a16e:	f88d 351f 	strb.w	r3, [sp, #1311]	; 0x51f
 800a172:	2301      	movs	r3, #1
 800a174:	e435      	b.n	80099e2 <_vfiprintf_r+0x1fa>
 800a176:	4658      	mov	r0, fp
 800a178:	4649      	mov	r1, r9
 800a17a:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a17e:	f7ff faf3 	bl	8009768 <__sprint_r>
 800a182:	2800      	cmp	r0, #0
 800a184:	f47f aeb8 	bne.w	8009ef8 <_vfiprintf_r+0x710>
 800a188:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a18c:	4655      	mov	r5, sl
 800a18e:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a192:	e5c5      	b.n	8009d20 <_vfiprintf_r+0x538>
 800a194:	9b07      	ldr	r3, [sp, #28]
 800a196:	681c      	ldr	r4, [r3, #0]
 800a198:	3304      	adds	r3, #4
 800a19a:	2c00      	cmp	r4, #0
 800a19c:	bfbc      	itt	lt
 800a19e:	9307      	strlt	r3, [sp, #28]
 800a1a0:	f04f 34ff 	movlt.w	r4, #4294967295
 800a1a4:	f6ff aba1 	blt.w	80098ea <_vfiprintf_r+0x102>
 800a1a8:	9307      	str	r3, [sp, #28]
 800a1aa:	f7ff bb9e 	b.w	80098ea <_vfiprintf_r+0x102>
 800a1ae:	4658      	mov	r0, fp
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a1b6:	f7ff fad7 	bl	8009768 <__sprint_r>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f47f ae9c 	bne.w	8009ef8 <_vfiprintf_r+0x710>
 800a1c0:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a1c4:	e65f      	b.n	8009e86 <_vfiprintf_r+0x69e>
 800a1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1c8:	3230      	adds	r2, #48	; 0x30
 800a1ca:	f88d 250f 	strb.w	r2, [sp, #1295]	; 0x50f
 800a1ce:	9306      	str	r3, [sp, #24]
 800a1d0:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800a1d4:	330f      	adds	r3, #15
 800a1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1d8:	e432      	b.n	8009a40 <_vfiprintf_r+0x258>
 800a1da:	9b02      	ldr	r3, [sp, #8]
 800a1dc:	1a1b      	subs	r3, r3, r0
 800a1de:	9306      	str	r3, [sp, #24]
 800a1e0:	e42e      	b.n	8009a40 <_vfiprintf_r+0x258>
 800a1e2:	9807      	ldr	r0, [sp, #28]
 800a1e4:	9905      	ldr	r1, [sp, #20]
 800a1e6:	6803      	ldr	r3, [r0, #0]
 800a1e8:	3004      	adds	r0, #4
 800a1ea:	9007      	str	r0, [sp, #28]
 800a1ec:	6019      	str	r1, [r3, #0]
 800a1ee:	f7ff bb3e 	b.w	800986e <_vfiprintf_r+0x86>
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e452      	b.n	8009a9e <_vfiprintf_r+0x2b6>
 800a1f8:	9907      	ldr	r1, [sp, #28]
 800a1fa:	680a      	ldr	r2, [r1, #0]
 800a1fc:	3104      	adds	r1, #4
 800a1fe:	9107      	str	r1, [sp, #28]
 800a200:	e4d1      	b.n	8009ba6 <_vfiprintf_r+0x3be>
 800a202:	9b07      	ldr	r3, [sp, #28]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	460b      	mov	r3, r1
 800a208:	e449      	b.n	8009a9e <_vfiprintf_r+0x2b6>
 800a20a:	4658      	mov	r0, fp
 800a20c:	4649      	mov	r1, r9
 800a20e:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a212:	f7ff faa9 	bl	8009768 <__sprint_r>
 800a216:	2800      	cmp	r0, #0
 800a218:	f47f ae6e 	bne.w	8009ef8 <_vfiprintf_r+0x710>
 800a21c:	f8dd 2518 	ldr.w	r2, [sp, #1304]	; 0x518
 800a220:	4655      	mov	r5, sl
 800a222:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a226:	e5a4      	b.n	8009d72 <_vfiprintf_r+0x58a>
 800a228:	f8dd 3518 	ldr.w	r3, [sp, #1304]	; 0x518
 800a22c:	464c      	mov	r4, r9
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f43f ae63 	beq.w	8009efa <_vfiprintf_r+0x712>
 800a234:	4658      	mov	r0, fp
 800a236:	4649      	mov	r1, r9
 800a238:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800a23c:	f7ff fa94 	bl	8009768 <__sprint_r>
 800a240:	e65b      	b.n	8009efa <_vfiprintf_r+0x712>
 800a242:	9a07      	ldr	r2, [sp, #28]
 800a244:	9805      	ldr	r0, [sp, #20]
 800a246:	6813      	ldr	r3, [r2, #0]
 800a248:	3204      	adds	r2, #4
 800a24a:	9207      	str	r2, [sp, #28]
 800a24c:	6018      	str	r0, [r3, #0]
 800a24e:	f7ff bb0e 	b.w	800986e <_vfiprintf_r+0x86>
 800a252:	9609      	str	r6, [sp, #36]	; 0x24
 800a254:	f7fe f834 	bl	80082c0 <strlen>
 800a258:	9006      	str	r0, [sp, #24]
 800a25a:	f7ff bbf2 	b.w	8009a42 <_vfiprintf_r+0x25a>
 800a25e:	4b0e      	ldr	r3, [pc, #56]	; (800a298 <_vfiprintf_r+0xab0>)
 800a260:	2c06      	cmp	r4, #6
 800a262:	bf28      	it	cs
 800a264:	2406      	movcs	r4, #6
 800a266:	9406      	str	r4, [sp, #24]
 800a268:	930a      	str	r3, [sp, #40]	; 0x28
 800a26a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800a26e:	9304      	str	r3, [sp, #16]
 800a270:	e441      	b.n	8009af6 <_vfiprintf_r+0x30e>
 800a272:	f8dd 3514 	ldr.w	r3, [sp, #1300]	; 0x514
 800a276:	4e09      	ldr	r6, [pc, #36]	; (800a29c <_vfiprintf_r+0xab4>)
 800a278:	e47d      	b.n	8009b76 <_vfiprintf_r+0x38e>
 800a27a:	9b02      	ldr	r3, [sp, #8]
 800a27c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a27e:	1a1b      	subs	r3, r3, r0
 800a280:	9306      	str	r3, [sp, #24]
 800a282:	f7ff bbdd 	b.w	8009a40 <_vfiprintf_r+0x258>
 800a286:	9406      	str	r4, [sp, #24]
 800a288:	9009      	str	r0, [sp, #36]	; 0x24
 800a28a:	f7ff bbda 	b.w	8009a42 <_vfiprintf_r+0x25a>
 800a28e:	f04f 35ff 	mov.w	r5, #4294967295
 800a292:	9505      	str	r5, [sp, #20]
 800a294:	e639      	b.n	8009f0a <_vfiprintf_r+0x722>
 800a296:	bf00      	nop
 800a298:	08028c9c 	.word	0x08028c9c
 800a29c:	08026d70 	.word	0x08026d70

0800a2a0 <vfiprintf>:
 800a2a0:	b430      	push	{r4, r5}
 800a2a2:	f240 0408 	movw	r4, #8
 800a2a6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	462a      	mov	r2, r5
 800a2b2:	6820      	ldr	r0, [r4, #0]
 800a2b4:	bc30      	pop	{r4, r5}
 800a2b6:	f7ff ba97 	b.w	80097e8 <_vfiprintf_r>
 800a2ba:	bf00      	nop

0800a2bc <__swbuf_r>:
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	4604      	mov	r4, r0
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	4616      	mov	r6, r2
 800a2c4:	b110      	cbz	r0, 800a2cc <__swbuf_r+0x10>
 800a2c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d044      	beq.n	800a356 <__swbuf_r+0x9a>
 800a2cc:	89b2      	ldrh	r2, [r6, #12]
 800a2ce:	69b1      	ldr	r1, [r6, #24]
 800a2d0:	b293      	uxth	r3, r2
 800a2d2:	60b1      	str	r1, [r6, #8]
 800a2d4:	0719      	lsls	r1, r3, #28
 800a2d6:	d52d      	bpl.n	800a334 <__swbuf_r+0x78>
 800a2d8:	6931      	ldr	r1, [r6, #16]
 800a2da:	2900      	cmp	r1, #0
 800a2dc:	d02a      	beq.n	800a334 <__swbuf_r+0x78>
 800a2de:	049b      	lsls	r3, r3, #18
 800a2e0:	bf5e      	ittt	pl
 800a2e2:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800a2e6:	81b2      	strhpl	r2, [r6, #12]
 800a2e8:	6e73      	ldrpl	r3, [r6, #100]	; 0x64
 800a2ea:	6972      	ldr	r2, [r6, #20]
 800a2ec:	bf5c      	itt	pl
 800a2ee:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 800a2f2:	6673      	strpl	r3, [r6, #100]	; 0x64
 800a2f4:	6833      	ldr	r3, [r6, #0]
 800a2f6:	1a59      	subs	r1, r3, r1
 800a2f8:	4291      	cmp	r1, r2
 800a2fa:	da24      	bge.n	800a346 <__swbuf_r+0x8a>
 800a2fc:	3101      	adds	r1, #1
 800a2fe:	68b2      	ldr	r2, [r6, #8]
 800a300:	b2ed      	uxtb	r5, r5
 800a302:	3a01      	subs	r2, #1
 800a304:	60b2      	str	r2, [r6, #8]
 800a306:	f803 5b01 	strb.w	r5, [r3], #1
 800a30a:	6972      	ldr	r2, [r6, #20]
 800a30c:	6033      	str	r3, [r6, #0]
 800a30e:	428a      	cmp	r2, r1
 800a310:	d006      	beq.n	800a320 <__swbuf_r+0x64>
 800a312:	89b3      	ldrh	r3, [r6, #12]
 800a314:	2d0a      	cmp	r5, #10
 800a316:	bf14      	ite	ne
 800a318:	2300      	movne	r3, #0
 800a31a:	f003 0301 	andeq.w	r3, r3, #1
 800a31e:	b13b      	cbz	r3, 800a330 <__swbuf_r+0x74>
 800a320:	4620      	mov	r0, r4
 800a322:	4631      	mov	r1, r6
 800a324:	f001 f970 	bl	800b608 <_fflush_r>
 800a328:	2800      	cmp	r0, #0
 800a32a:	bf18      	it	ne
 800a32c:	f04f 35ff 	movne.w	r5, #4294967295
 800a330:	4628      	mov	r0, r5
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	4620      	mov	r0, r4
 800a336:	4631      	mov	r1, r6
 800a338:	f000 f824 	bl	800a384 <__swsetup_r>
 800a33c:	b970      	cbnz	r0, 800a35c <__swbuf_r+0xa0>
 800a33e:	89b2      	ldrh	r2, [r6, #12]
 800a340:	6931      	ldr	r1, [r6, #16]
 800a342:	b293      	uxth	r3, r2
 800a344:	e7cb      	b.n	800a2de <__swbuf_r+0x22>
 800a346:	4620      	mov	r0, r4
 800a348:	4631      	mov	r1, r6
 800a34a:	f001 f95d 	bl	800b608 <_fflush_r>
 800a34e:	b970      	cbnz	r0, 800a36e <__swbuf_r+0xb2>
 800a350:	6833      	ldr	r3, [r6, #0]
 800a352:	2101      	movs	r1, #1
 800a354:	e7d3      	b.n	800a2fe <__swbuf_r+0x42>
 800a356:	f001 fa79 	bl	800b84c <__sinit>
 800a35a:	e7b7      	b.n	800a2cc <__swbuf_r+0x10>
 800a35c:	89b3      	ldrh	r3, [r6, #12]
 800a35e:	f04f 35ff 	mov.w	r5, #4294967295
 800a362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a366:	81b3      	strh	r3, [r6, #12]
 800a368:	2309      	movs	r3, #9
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	e7e0      	b.n	800a330 <__swbuf_r+0x74>
 800a36e:	f04f 35ff 	mov.w	r5, #4294967295
 800a372:	e7dd      	b.n	800a330 <__swbuf_r+0x74>

0800a374 <__swbuf>:
 800a374:	f240 0308 	movw	r3, #8
 800a378:	460a      	mov	r2, r1
 800a37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a37e:	4601      	mov	r1, r0
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	e79b      	b.n	800a2bc <__swbuf_r>

0800a384 <__swsetup_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4605      	mov	r5, r0
 800a388:	4b2b      	ldr	r3, [pc, #172]	; (800a438 <__swsetup_r+0xb4>)
 800a38a:	460c      	mov	r4, r1
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	b110      	cbz	r0, 800a396 <__swsetup_r+0x12>
 800a390:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a392:	2b00      	cmp	r3, #0
 800a394:	d03d      	beq.n	800a412 <__swsetup_r+0x8e>
 800a396:	89a2      	ldrh	r2, [r4, #12]
 800a398:	b293      	uxth	r3, r2
 800a39a:	0719      	lsls	r1, r3, #28
 800a39c:	bf48      	it	mi
 800a39e:	6921      	ldrmi	r1, [r4, #16]
 800a3a0:	d41d      	bmi.n	800a3de <__swsetup_r+0x5a>
 800a3a2:	06d8      	lsls	r0, r3, #27
 800a3a4:	d544      	bpl.n	800a430 <__swsetup_r+0xac>
 800a3a6:	0759      	lsls	r1, r3, #29
 800a3a8:	bf58      	it	pl
 800a3aa:	6921      	ldrpl	r1, [r4, #16]
 800a3ac:	d513      	bpl.n	800a3d6 <__swsetup_r+0x52>
 800a3ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a3b0:	b149      	cbz	r1, 800a3c6 <__swsetup_r+0x42>
 800a3b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a3b6:	4299      	cmp	r1, r3
 800a3b8:	d003      	beq.n	800a3c2 <__swsetup_r+0x3e>
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f001 fbaa 	bl	800bb14 <_free_r>
 800a3c0:	89a2      	ldrh	r2, [r4, #12]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	6323      	str	r3, [r4, #48]	; 0x30
 800a3c6:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800a3ca:	6921      	ldr	r1, [r4, #16]
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	6063      	str	r3, [r4, #4]
 800a3d0:	0412      	lsls	r2, r2, #16
 800a3d2:	6021      	str	r1, [r4, #0]
 800a3d4:	0c12      	lsrs	r2, r2, #16
 800a3d6:	f042 0308 	orr.w	r3, r2, #8
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	b1d9      	cbz	r1, 800a418 <__swsetup_r+0x94>
 800a3e0:	f013 0201 	ands.w	r2, r3, #1
 800a3e4:	d007      	beq.n	800a3f6 <__swsetup_r+0x72>
 800a3e6:	6963      	ldr	r3, [r4, #20]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	60a2      	str	r2, [r4, #8]
 800a3ec:	425b      	negs	r3, r3
 800a3ee:	61a3      	str	r3, [r4, #24]
 800a3f0:	b139      	cbz	r1, 800a402 <__swsetup_r+0x7e>
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	bd38      	pop	{r3, r4, r5, pc}
 800a3f6:	079b      	lsls	r3, r3, #30
 800a3f8:	bf58      	it	pl
 800a3fa:	6962      	ldrpl	r2, [r4, #20]
 800a3fc:	60a2      	str	r2, [r4, #8]
 800a3fe:	2900      	cmp	r1, #0
 800a400:	d1f7      	bne.n	800a3f2 <__swsetup_r+0x6e>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a408:	bf14      	ite	ne
 800a40a:	f04f 30ff 	movne.w	r0, #4294967295
 800a40e:	2000      	moveq	r0, #0
 800a410:	bd38      	pop	{r3, r4, r5, pc}
 800a412:	f001 fa1b 	bl	800b84c <__sinit>
 800a416:	e7be      	b.n	800a396 <__swsetup_r+0x12>
 800a418:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800a41c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a420:	d0de      	beq.n	800a3e0 <__swsetup_r+0x5c>
 800a422:	4621      	mov	r1, r4
 800a424:	4628      	mov	r0, r5
 800a426:	f001 fccb 	bl	800bdc0 <__smakebuf_r>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	6921      	ldr	r1, [r4, #16]
 800a42e:	e7d7      	b.n	800a3e0 <__swsetup_r+0x5c>
 800a430:	f04f 30ff 	mov.w	r0, #4294967295
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	bf00      	nop
 800a438:	20000008 	.word	0x20000008

0800a43c <__register_exitproc>:
 800a43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a440:	4604      	mov	r4, r0
 800a442:	4828      	ldr	r0, [pc, #160]	; (800a4e4 <__register_exitproc+0xa8>)
 800a444:	b084      	sub	sp, #16
 800a446:	6805      	ldr	r5, [r0, #0]
 800a448:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 800a44c:	2e00      	cmp	r6, #0
 800a44e:	d044      	beq.n	800a4da <__register_exitproc+0x9e>
 800a450:	6870      	ldr	r0, [r6, #4]
 800a452:	281f      	cmp	r0, #31
 800a454:	dd1e      	ble.n	800a494 <__register_exitproc+0x58>
 800a456:	4824      	ldr	r0, [pc, #144]	; (800a4e8 <__register_exitproc+0xac>)
 800a458:	b910      	cbnz	r0, 800a460 <__register_exitproc+0x24>
 800a45a:	f04f 30ff 	mov.w	r0, #4294967295
 800a45e:	e020      	b.n	800a4a2 <__register_exitproc+0x66>
 800a460:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a464:	9103      	str	r1, [sp, #12]
 800a466:	9202      	str	r2, [sp, #8]
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	f7fc fe23 	bl	80070b4 <malloc>
 800a46e:	9903      	ldr	r1, [sp, #12]
 800a470:	9a02      	ldr	r2, [sp, #8]
 800a472:	9b01      	ldr	r3, [sp, #4]
 800a474:	4606      	mov	r6, r0
 800a476:	2800      	cmp	r0, #0
 800a478:	d0ef      	beq.n	800a45a <__register_exitproc+0x1e>
 800a47a:	f8d5 c148 	ldr.w	ip, [r5, #328]	; 0x148
 800a47e:	2700      	movs	r7, #0
 800a480:	4638      	mov	r0, r7
 800a482:	6077      	str	r7, [r6, #4]
 800a484:	f8c6 c000 	str.w	ip, [r6]
 800a488:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 800a48c:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
 800a490:	f8c6 718c 	str.w	r7, [r6, #396]	; 0x18c
 800a494:	b944      	cbnz	r4, 800a4a8 <__register_exitproc+0x6c>
 800a496:	1c83      	adds	r3, r0, #2
 800a498:	1c42      	adds	r2, r0, #1
 800a49a:	2000      	movs	r0, #0
 800a49c:	6072      	str	r2, [r6, #4]
 800a49e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800a4a2:	b004      	add	sp, #16
 800a4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a8:	2501      	movs	r5, #1
 800a4aa:	eb06 0880 	add.w	r8, r6, r0, lsl #2
 800a4ae:	f8d6 c188 	ldr.w	ip, [r6, #392]	; 0x188
 800a4b2:	4647      	mov	r7, r8
 800a4b4:	4085      	lsls	r5, r0
 800a4b6:	2c02      	cmp	r4, #2
 800a4b8:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 800a4bc:	bf08      	it	eq
 800a4be:	f8d6 318c 	ldreq.w	r3, [r6, #396]	; 0x18c
 800a4c2:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800a4c6:	ea4c 0205 	orr.w	r2, ip, r5
 800a4ca:	bf08      	it	eq
 800a4cc:	431d      	orreq	r5, r3
 800a4ce:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
 800a4d2:	bf08      	it	eq
 800a4d4:	f8c6 518c 	streq.w	r5, [r6, #396]	; 0x18c
 800a4d8:	e7dd      	b.n	800a496 <__register_exitproc+0x5a>
 800a4da:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800a4de:	f8c5 6148 	str.w	r6, [r5, #328]	; 0x148
 800a4e2:	e7b5      	b.n	800a450 <__register_exitproc+0x14>
 800a4e4:	08026d4c 	.word	0x08026d4c
 800a4e8:	080070b5 	.word	0x080070b5

0800a4ec <__call_exitprocs>:
 800a4ec:	4b34      	ldr	r3, [pc, #208]	; (800a5c0 <__call_exitprocs+0xd4>)
 800a4ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f2:	460e      	mov	r6, r1
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	f04f 0b01 	mov.w	fp, #1
 800a4fc:	9001      	str	r0, [sp, #4]
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	9b00      	ldr	r3, [sp, #0]
 800a502:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 800a506:	b1bf      	cbz	r7, 800a538 <__call_exitprocs+0x4c>
 800a508:	f503 79a4 	add.w	r9, r3, #328	; 0x148
 800a50c:	687d      	ldr	r5, [r7, #4]
 800a50e:	1e6c      	subs	r4, r5, #1
 800a510:	d40c      	bmi.n	800a52c <__call_exitprocs+0x40>
 800a512:	351f      	adds	r5, #31
 800a514:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 800a518:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 800a51c:	b17e      	cbz	r6, 800a53e <__call_exitprocs+0x52>
 800a51e:	682b      	ldr	r3, [r5, #0]
 800a520:	42b3      	cmp	r3, r6
 800a522:	d00c      	beq.n	800a53e <__call_exitprocs+0x52>
 800a524:	3c01      	subs	r4, #1
 800a526:	3d04      	subs	r5, #4
 800a528:	1c63      	adds	r3, r4, #1
 800a52a:	d1f7      	bne.n	800a51c <__call_exitprocs+0x30>
 800a52c:	f247 03c5 	movw	r3, #28869	; 0x70c5
 800a530:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a534:	2b00      	cmp	r3, #0
 800a536:	d130      	bne.n	800a59a <__call_exitprocs+0xae>
 800a538:	b003      	add	sp, #12
 800a53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	ebca 0205 	rsb	r2, sl, r5
 800a544:	18ba      	adds	r2, r7, r2
 800a546:	3901      	subs	r1, #1
 800a548:	42a1      	cmp	r1, r4
 800a54a:	f852 3c78 	ldr.w	r3, [r2, #-120]
 800a54e:	bf08      	it	eq
 800a550:	607c      	streq	r4, [r7, #4]
 800a552:	d002      	beq.n	800a55a <__call_exitprocs+0x6e>
 800a554:	2100      	movs	r1, #0
 800a556:	f842 1c78 	str.w	r1, [r2, #-120]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0e2      	beq.n	800a524 <__call_exitprocs+0x38>
 800a55e:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 800a562:	fa0b f204 	lsl.w	r2, fp, r4
 800a566:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800a56a:	420a      	tst	r2, r1
 800a56c:	d00f      	beq.n	800a58e <__call_exitprocs+0xa2>
 800a56e:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800a572:	420a      	tst	r2, r1
 800a574:	d10d      	bne.n	800a592 <__call_exitprocs+0xa6>
 800a576:	f855 1c80 	ldr.w	r1, [r5, #-128]
 800a57a:	9801      	ldr	r0, [sp, #4]
 800a57c:	4798      	blx	r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4543      	cmp	r3, r8
 800a582:	d1bd      	bne.n	800a500 <__call_exitprocs+0x14>
 800a584:	f8d9 3000 	ldr.w	r3, [r9]
 800a588:	42bb      	cmp	r3, r7
 800a58a:	d0cb      	beq.n	800a524 <__call_exitprocs+0x38>
 800a58c:	e7b8      	b.n	800a500 <__call_exitprocs+0x14>
 800a58e:	4798      	blx	r3
 800a590:	e7f5      	b.n	800a57e <__call_exitprocs+0x92>
 800a592:	f855 0c80 	ldr.w	r0, [r5, #-128]
 800a596:	4798      	blx	r3
 800a598:	e7f1      	b.n	800a57e <__call_exitprocs+0x92>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	b95b      	cbnz	r3, 800a5b6 <__call_exitprocs+0xca>
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	b153      	cbz	r3, 800a5b8 <__call_exitprocs+0xcc>
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	f8c9 3000 	str.w	r3, [r9]
 800a5a8:	f7fc fd8c 	bl	80070c4 <free>
 800a5ac:	f8d9 7000 	ldr.w	r7, [r9]
 800a5b0:	2f00      	cmp	r7, #0
 800a5b2:	d1ab      	bne.n	800a50c <__call_exitprocs+0x20>
 800a5b4:	e7c0      	b.n	800a538 <__call_exitprocs+0x4c>
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	46b9      	mov	r9, r7
 800a5ba:	461f      	mov	r7, r3
 800a5bc:	e7f8      	b.n	800a5b0 <__call_exitprocs+0xc4>
 800a5be:	bf00      	nop
 800a5c0:	08026d4c 	.word	0x08026d4c
 800a5c4:	00000000 	.word	0x00000000

0800a5c8 <quorem>:
 800a5c8:	6903      	ldr	r3, [r0, #16]
 800a5ca:	690a      	ldr	r2, [r1, #16]
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	4680      	mov	r8, r0
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	4689      	mov	r9, r1
 800a5da:	9200      	str	r2, [sp, #0]
 800a5dc:	f300 8093 	bgt.w	800a706 <quorem+0x13e>
 800a5e0:	3203      	adds	r2, #3
 800a5e2:	9b00      	ldr	r3, [sp, #0]
 800a5e4:	f101 0514 	add.w	r5, r1, #20
 800a5e8:	0092      	lsls	r2, r2, #2
 800a5ea:	1e5c      	subs	r4, r3, #1
 800a5ec:	f108 0314 	add.w	r3, r8, #20
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	188b      	adds	r3, r1, r2
 800a5f4:	4442      	add	r2, r8
 800a5f6:	1d1f      	adds	r7, r3, #4
 800a5f8:	6859      	ldr	r1, [r3, #4]
 800a5fa:	6850      	ldr	r0, [r2, #4]
 800a5fc:	3101      	adds	r1, #1
 800a5fe:	f002 ff3f 	bl	800d480 <__aeabi_uidiv>
 800a602:	4606      	mov	r6, r0
 800a604:	2800      	cmp	r0, #0
 800a606:	d042      	beq.n	800a68e <quorem+0xc6>
 800a608:	2000      	movs	r0, #0
 800a60a:	9a01      	ldr	r2, [sp, #4]
 800a60c:	462b      	mov	r3, r5
 800a60e:	4686      	mov	lr, r0
 800a610:	f853 cb04 	ldr.w	ip, [r3], #4
 800a614:	6811      	ldr	r1, [r2, #0]
 800a616:	fa1f fb8c 	uxth.w	fp, ip
 800a61a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a61e:	fa1f fa81 	uxth.w	sl, r1
 800a622:	fb06 0b0b 	mla	fp, r6, fp, r0
 800a626:	44d6      	add	lr, sl
 800a628:	fb06 f00c 	mul.w	r0, r6, ip
 800a62c:	eb00 401b 	add.w	r0, r0, fp, lsr #16
 800a630:	fa1f fb8b 	uxth.w	fp, fp
 800a634:	ebcb 0a0e 	rsb	sl, fp, lr
 800a638:	fa1f fe80 	uxth.w	lr, r0
 800a63c:	0c00      	lsrs	r0, r0, #16
 800a63e:	ebce 4e11 	rsb	lr, lr, r1, lsr #16
 800a642:	429f      	cmp	r7, r3
 800a644:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
 800a648:	fa1f fc8a 	uxth.w	ip, sl
 800a64c:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
 800a650:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800a654:	f842 1b04 	str.w	r1, [r2], #4
 800a658:	d2da      	bcs.n	800a610 <quorem+0x48>
 800a65a:	1d22      	adds	r2, r4, #4
 800a65c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800a660:	6859      	ldr	r1, [r3, #4]
 800a662:	b9a1      	cbnz	r1, 800a68e <quorem+0xc6>
 800a664:	9801      	ldr	r0, [sp, #4]
 800a666:	4298      	cmp	r0, r3
 800a668:	d20f      	bcs.n	800a68a <quorem+0xc2>
 800a66a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a66e:	b962      	cbnz	r2, 800a68a <quorem+0xc2>
 800a670:	9a00      	ldr	r2, [sp, #0]
 800a672:	1e91      	subs	r1, r2, #2
 800a674:	43c2      	mvns	r2, r0
 800a676:	18d2      	adds	r2, r2, r3
 800a678:	eba1 0192 	sub.w	r1, r1, r2, lsr #2
 800a67c:	e002      	b.n	800a684 <quorem+0xbc>
 800a67e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a682:	b912      	cbnz	r2, 800a68a <quorem+0xc2>
 800a684:	3c01      	subs	r4, #1
 800a686:	428c      	cmp	r4, r1
 800a688:	d1f9      	bne.n	800a67e <quorem+0xb6>
 800a68a:	f8c8 4010 	str.w	r4, [r8, #16]
 800a68e:	4640      	mov	r0, r8
 800a690:	4649      	mov	r1, r9
 800a692:	f001 fe61 	bl	800c358 <__mcmp>
 800a696:	2800      	cmp	r0, #0
 800a698:	db34      	blt.n	800a704 <quorem+0x13c>
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	3601      	adds	r6, #1
 800a69e:	f04f 0c00 	mov.w	ip, #0
 800a6a2:	f855 0b04 	ldr.w	r0, [r5], #4
 800a6a6:	6819      	ldr	r1, [r3, #0]
 800a6a8:	fa1f f980 	uxth.w	r9, r0
 800a6ac:	0c00      	lsrs	r0, r0, #16
 800a6ae:	b28a      	uxth	r2, r1
 800a6b0:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 800a6b4:	ebc9 0202 	rsb	r2, r9, r2
 800a6b8:	42af      	cmp	r7, r5
 800a6ba:	4494      	add	ip, r2
 800a6bc:	eb01 422c 	add.w	r2, r1, ip, asr #16
 800a6c0:	fa1f fc8c 	uxth.w	ip, ip
 800a6c4:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
 800a6c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6cc:	f843 1b04 	str.w	r1, [r3], #4
 800a6d0:	d2e7      	bcs.n	800a6a2 <quorem+0xda>
 800a6d2:	1d22      	adds	r2, r4, #4
 800a6d4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800a6d8:	6859      	ldr	r1, [r3, #4]
 800a6da:	b999      	cbnz	r1, 800a704 <quorem+0x13c>
 800a6dc:	9801      	ldr	r0, [sp, #4]
 800a6de:	4298      	cmp	r0, r3
 800a6e0:	d20e      	bcs.n	800a700 <quorem+0x138>
 800a6e2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a6e6:	b95a      	cbnz	r2, 800a700 <quorem+0x138>
 800a6e8:	43c1      	mvns	r1, r0
 800a6ea:	18c9      	adds	r1, r1, r3
 800a6ec:	f021 0103 	bic.w	r1, r1, #3
 800a6f0:	1a59      	subs	r1, r3, r1
 800a6f2:	e002      	b.n	800a6fa <quorem+0x132>
 800a6f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a6f8:	b912      	cbnz	r2, 800a700 <quorem+0x138>
 800a6fa:	3c01      	subs	r4, #1
 800a6fc:	428b      	cmp	r3, r1
 800a6fe:	d1f9      	bne.n	800a6f4 <quorem+0x12c>
 800a700:	f8c8 4010 	str.w	r4, [r8, #16]
 800a704:	4630      	mov	r0, r6
 800a706:	b003      	add	sp, #12
 800a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a70c <_dtoa_r>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	4681      	mov	r9, r0
 800a712:	b09d      	sub	sp, #116	; 0x74
 800a714:	4619      	mov	r1, r3
 800a716:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800a71a:	4610      	mov	r0, r2
 800a71c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800a71e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a722:	b163      	cbz	r3, 800a73e <_dtoa_r+0x32>
 800a724:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 800a728:	2501      	movs	r5, #1
 800a72a:	4619      	mov	r1, r3
 800a72c:	4648      	mov	r0, r9
 800a72e:	4095      	lsls	r5, r2
 800a730:	609d      	str	r5, [r3, #8]
 800a732:	605a      	str	r2, [r3, #4]
 800a734:	f001 fbdc 	bl	800bef0 <_Bfree>
 800a738:	2300      	movs	r3, #0
 800a73a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800a73e:	9d03      	ldr	r5, [sp, #12]
 800a740:	2d00      	cmp	r5, #0
 800a742:	f2c0 80e3 	blt.w	800a90c <_dtoa_r+0x200>
 800a746:	2300      	movs	r3, #0
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	2300      	movs	r3, #0
 800a74c:	461a      	mov	r2, r3
 800a74e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800a752:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800a756:	402b      	ands	r3, r5
 800a758:	4293      	cmp	r3, r2
 800a75a:	f000 80c3 	beq.w	800a8e4 <_dtoa_r+0x1d8>
 800a75e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a762:	2200      	movs	r2, #0
 800a764:	2300      	movs	r3, #0
 800a766:	2401      	movs	r4, #1
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f003 fbe6 	bl	800df3c <__aeabi_dcmpeq>
 800a770:	b978      	cbnz	r0, 800a792 <_dtoa_r+0x86>
 800a772:	f014 0fff 	tst.w	r4, #255	; 0xff
 800a776:	d110      	bne.n	800a79a <_dtoa_r+0x8e>
 800a778:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800a77a:	2301      	movs	r3, #1
 800a77c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	4d7b      	ldr	r5, [pc, #492]	; (800a970 <_dtoa_r+0x264>)
 800a782:	b114      	cbz	r4, 800a78a <_dtoa_r+0x7e>
 800a784:	4b7b      	ldr	r3, [pc, #492]	; (800a974 <_dtoa_r+0x268>)
 800a786:	1e5d      	subs	r5, r3, #1
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	4628      	mov	r0, r5
 800a78c:	b01d      	add	sp, #116	; 0x74
 800a78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a792:	2400      	movs	r4, #0
 800a794:	f014 0fff 	tst.w	r4, #255	; 0xff
 800a798:	d0ee      	beq.n	800a778 <_dtoa_r+0x6c>
 800a79a:	463b      	mov	r3, r7
 800a79c:	4648      	mov	r0, r9
 800a79e:	4632      	mov	r2, r6
 800a7a0:	a91b      	add	r1, sp, #108	; 0x6c
 800a7a2:	9100      	str	r1, [sp, #0]
 800a7a4:	a91a      	add	r1, sp, #104	; 0x68
 800a7a6:	9101      	str	r1, [sp, #4]
 800a7a8:	f001 fee0 	bl	800c56c <__d2b>
 800a7ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a7b0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f040 80b9 	bne.w	800a92a <_dtoa_r+0x21e>
 800a7b8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a7ba:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800a7be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a7c0:	19be      	adds	r6, r7, r6
 800a7c2:	429e      	cmp	r6, r3
 800a7c4:	f2c0 82a2 	blt.w	800ad0c <_dtoa_r+0x600>
 800a7c8:	9802      	ldr	r0, [sp, #8]
 800a7ca:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 800a7ce:	f506 6282 	add.w	r2, r6, #1040	; 0x410
 800a7d2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800a7d6:	3202      	adds	r2, #2
 800a7d8:	1b9b      	subs	r3, r3, r6
 800a7da:	fa30 f202 	lsrs.w	r2, r0, r2
 800a7de:	fa15 f303 	lsls.w	r3, r5, r3
 800a7e2:	ea43 0002 	orr.w	r0, r3, r2
 800a7e6:	f003 f8cb 	bl	800d980 <__aeabi_ui2d>
 800a7ea:	3e01      	subs	r6, #1
 800a7ec:	2401      	movs	r4, #1
 800a7ee:	9417      	str	r4, [sp, #92]	; 0x5c
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a7f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a7fa:	f1a5 75f8 	sub.w	r5, r5, #32505856	; 0x1f00000
 800a7fe:	950d      	str	r5, [sp, #52]	; 0x34
 800a800:	2300      	movs	r3, #0
 800a802:	2200      	movs	r2, #0
 800a804:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800a808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a80c:	f002 ff7a 	bl	800d704 <__aeabi_dsub>
 800a810:	a351      	add	r3, pc, #324	; (adr r3, 800a958 <_dtoa_r+0x24c>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f003 f929 	bl	800da6c <__aeabi_dmul>
 800a81a:	a351      	add	r3, pc, #324	; (adr r3, 800a960 <_dtoa_r+0x254>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f002 ff72 	bl	800d708 <__adddf3>
 800a824:	4604      	mov	r4, r0
 800a826:	4630      	mov	r0, r6
 800a828:	460d      	mov	r5, r1
 800a82a:	f003 f8b9 	bl	800d9a0 <__aeabi_i2d>
 800a82e:	a34e      	add	r3, pc, #312	; (adr r3, 800a968 <_dtoa_r+0x25c>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	f003 f91a 	bl	800da6c <__aeabi_dmul>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4620      	mov	r0, r4
 800a83e:	4629      	mov	r1, r5
 800a840:	f002 ff62 	bl	800d708 <__adddf3>
 800a844:	4604      	mov	r4, r0
 800a846:	460d      	mov	r5, r1
 800a848:	f003 fbaa 	bl	800dfa0 <__aeabi_d2iz>
 800a84c:	4629      	mov	r1, r5
 800a84e:	2200      	movs	r2, #0
 800a850:	2300      	movs	r3, #0
 800a852:	9006      	str	r0, [sp, #24]
 800a854:	4620      	mov	r0, r4
 800a856:	f003 fb7b 	bl	800df50 <__aeabi_dcmplt>
 800a85a:	b150      	cbz	r0, 800a872 <_dtoa_r+0x166>
 800a85c:	9806      	ldr	r0, [sp, #24]
 800a85e:	f003 f89f 	bl	800d9a0 <__aeabi_i2d>
 800a862:	4622      	mov	r2, r4
 800a864:	462b      	mov	r3, r5
 800a866:	f003 fb69 	bl	800df3c <__aeabi_dcmpeq>
 800a86a:	b910      	cbnz	r0, 800a872 <_dtoa_r+0x166>
 800a86c:	9c06      	ldr	r4, [sp, #24]
 800a86e:	3c01      	subs	r4, #1
 800a870:	9406      	str	r4, [sp, #24]
 800a872:	9d06      	ldr	r5, [sp, #24]
 800a874:	2d16      	cmp	r5, #22
 800a876:	f200 816a 	bhi.w	800ab4e <_dtoa_r+0x442>
 800a87a:	493f      	ldr	r1, [pc, #252]	; (800a978 <_dtoa_r+0x26c>)
 800a87c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a880:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a884:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a888:	f003 fb80 	bl	800df8c <__aeabi_dcmpgt>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f000 8246 	beq.w	800ad1e <_dtoa_r+0x612>
 800a892:	9c06      	ldr	r4, [sp, #24]
 800a894:	2500      	movs	r5, #0
 800a896:	9515      	str	r5, [sp, #84]	; 0x54
 800a898:	3c01      	subs	r4, #1
 800a89a:	9406      	str	r4, [sp, #24]
 800a89c:	1bbe      	subs	r6, r7, r6
 800a89e:	3e01      	subs	r6, #1
 800a8a0:	f100 822f 	bmi.w	800ad02 <_dtoa_r+0x5f6>
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	960b      	str	r6, [sp, #44]	; 0x2c
 800a8a8:	9510      	str	r5, [sp, #64]	; 0x40
 800a8aa:	9c06      	ldr	r4, [sp, #24]
 800a8ac:	2c00      	cmp	r4, #0
 800a8ae:	f2c0 821f 	blt.w	800acf0 <_dtoa_r+0x5e4>
 800a8b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a8b4:	9414      	str	r4, [sp, #80]	; 0x50
 800a8b6:	192d      	adds	r5, r5, r4
 800a8b8:	2400      	movs	r4, #0
 800a8ba:	950b      	str	r5, [sp, #44]	; 0x2c
 800a8bc:	9411      	str	r4, [sp, #68]	; 0x44
 800a8be:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a8c0:	2d09      	cmp	r5, #9
 800a8c2:	d85f      	bhi.n	800a984 <_dtoa_r+0x278>
 800a8c4:	2401      	movs	r4, #1
 800a8c6:	2d05      	cmp	r5, #5
 800a8c8:	dd02      	ble.n	800a8d0 <_dtoa_r+0x1c4>
 800a8ca:	2400      	movs	r4, #0
 800a8cc:	3d04      	subs	r5, #4
 800a8ce:	9526      	str	r5, [sp, #152]	; 0x98
 800a8d0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a8d2:	1eab      	subs	r3, r5, #2
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d857      	bhi.n	800a988 <_dtoa_r+0x27c>
 800a8d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a8dc:	039a03af 	.word	0x039a03af
 800a8e0:	03b20264 	.word	0x03b20264
 800a8e4:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800a8e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8ea:	9802      	ldr	r0, [sp, #8]
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	b198      	cbz	r0, 800a918 <_dtoa_r+0x20c>
 800a8f0:	4d22      	ldr	r5, [pc, #136]	; (800a97c <_dtoa_r+0x270>)
 800a8f2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a8f4:	2c00      	cmp	r4, #0
 800a8f6:	f43f af48 	beq.w	800a78a <_dtoa_r+0x7e>
 800a8fa:	78eb      	ldrb	r3, [r5, #3]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 8124 	beq.w	800ab4a <_dtoa_r+0x43e>
 800a902:	f105 0308 	add.w	r3, r5, #8
 800a906:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	e73e      	b.n	800a78a <_dtoa_r+0x7e>
 800a90c:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800a910:	2301      	movs	r3, #1
 800a912:	9503      	str	r5, [sp, #12]
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	e718      	b.n	800a74a <_dtoa_r+0x3e>
 800a918:	4b18      	ldr	r3, [pc, #96]	; (800a97c <_dtoa_r+0x270>)
 800a91a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a91e:	4a18      	ldr	r2, [pc, #96]	; (800a980 <_dtoa_r+0x274>)
 800a920:	2d00      	cmp	r5, #0
 800a922:	bf0c      	ite	eq
 800a924:	4615      	moveq	r5, r2
 800a926:	461d      	movne	r5, r3
 800a928:	e7e3      	b.n	800a8f2 <_dtoa_r+0x1e6>
 800a92a:	4639      	mov	r1, r7
 800a92c:	4630      	mov	r0, r6
 800a92e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a932:	f5a3 767e 	sub.w	r6, r3, #1016	; 0x3f8
 800a936:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a938:	2400      	movs	r4, #0
 800a93a:	3e07      	subs	r6, #7
 800a93c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a93e:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 800a942:	9417      	str	r4, [sp, #92]	; 0x5c
 800a944:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a948:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a94c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a950:	930d      	str	r3, [sp, #52]	; 0x34
 800a952:	e755      	b.n	800a800 <_dtoa_r+0xf4>
 800a954:	f3af 8000 	nop.w
 800a958:	636f4361 	.word	0x636f4361
 800a95c:	3fd287a7 	.word	0x3fd287a7
 800a960:	8b60c8b3 	.word	0x8b60c8b3
 800a964:	3fc68a28 	.word	0x3fc68a28
 800a968:	509f79fb 	.word	0x509f79fb
 800a96c:	3fd34413 	.word	0x3fd34413
 800a970:	08028ca4 	.word	0x08028ca4
 800a974:	08028ca5 	.word	0x08028ca5
 800a978:	08026da0 	.word	0x08026da0
 800a97c:	08028cb4 	.word	0x08028cb4
 800a980:	08028ca8 	.word	0x08028ca8
 800a984:	2400      	movs	r4, #0
 800a986:	9426      	str	r4, [sp, #152]	; 0x98
 800a988:	2400      	movs	r4, #0
 800a98a:	4648      	mov	r0, r9
 800a98c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800a990:	4621      	mov	r1, r4
 800a992:	f04f 35ff 	mov.w	r5, #4294967295
 800a996:	950e      	str	r5, [sp, #56]	; 0x38
 800a998:	f001 fa84 	bl	800bea4 <_Balloc>
 800a99c:	2501      	movs	r5, #1
 800a99e:	9513      	str	r5, [sp, #76]	; 0x4c
 800a9a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a9a2:	9427      	str	r4, [sp, #156]	; 0x9c
 800a9a4:	9516      	str	r5, [sp, #88]	; 0x58
 800a9a6:	900a      	str	r0, [sp, #40]	; 0x28
 800a9a8:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800a9ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9ae:	9d06      	ldr	r5, [sp, #24]
 800a9b0:	43dc      	mvns	r4, r3
 800a9b2:	0fe4      	lsrs	r4, r4, #31
 800a9b4:	2d0e      	cmp	r5, #14
 800a9b6:	bfcc      	ite	gt
 800a9b8:	2400      	movgt	r4, #0
 800a9ba:	f004 0401 	andle.w	r4, r4, #1
 800a9be:	2c00      	cmp	r4, #0
 800a9c0:	f000 80ca 	beq.w	800ab58 <_dtoa_r+0x44c>
 800a9c4:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800a9c6:	4b63      	ldr	r3, [pc, #396]	; (800ab54 <_dtoa_r+0x448>)
 800a9c8:	0fec      	lsrs	r4, r5, #31
 800a9ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	bfcc      	ite	gt
 800a9d0:	2400      	movgt	r4, #0
 800a9d2:	f004 0401 	andle.w	r4, r4, #1
 800a9d6:	9d06      	ldr	r5, [sp, #24]
 800a9d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a9dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9e4:	2c00      	cmp	r4, #0
 800a9e6:	f040 81c2 	bne.w	800ad6e <_dtoa_r+0x662>
 800a9ea:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	f003 f962 	bl	800dcc0 <__aeabi_ddiv>
 800a9fc:	f003 fad0 	bl	800dfa0 <__aeabi_d2iz>
 800aa00:	4682      	mov	sl, r0
 800aa02:	f002 ffcd 	bl	800d9a0 <__aeabi_i2d>
 800aa06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa0a:	f003 f82f 	bl	800da6c <__aeabi_dmul>
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4602      	mov	r2, r0
 800aa12:	4639      	mov	r1, r7
 800aa14:	4630      	mov	r0, r6
 800aa16:	f002 fe75 	bl	800d704 <__aeabi_dsub>
 800aa1a:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800aa1e:	f805 3b01 	strb.w	r3, [r5], #1
 800aa22:	46a8      	mov	r8, r5
 800aa24:	9512      	str	r5, [sp, #72]	; 0x48
 800aa26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aa28:	2d01      	cmp	r5, #1
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460f      	mov	r7, r1
 800aa2e:	d052      	beq.n	800aad6 <_dtoa_r+0x3ca>
 800aa30:	2300      	movs	r3, #0
 800aa32:	2200      	movs	r2, #0
 800aa34:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800aa38:	f003 f818 	bl	800da6c <__aeabi_dmul>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	2200      	movs	r2, #0
 800aa40:	4606      	mov	r6, r0
 800aa42:	460f      	mov	r7, r1
 800aa44:	f003 fa7a 	bl	800df3c <__aeabi_dcmpeq>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	b100      	cbz	r0, 800aa4e <_dtoa_r+0x342>
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aa52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800aa54:	f000 85b6 	beq.w	800b5c4 <_dtoa_r+0xeb8>
 800aa58:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aa5a:	1cac      	adds	r4, r5, #2
 800aa5c:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa60:	eb05 0b00 	add.w	fp, r5, r0
 800aa64:	e00e      	b.n	800aa84 <_dtoa_r+0x378>
 800aa66:	f003 f801 	bl	800da6c <__aeabi_dmul>
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	4606      	mov	r6, r0
 800aa70:	460f      	mov	r7, r1
 800aa72:	f003 fa63 	bl	800df3c <__aeabi_dcmpeq>
 800aa76:	b108      	cbz	r0, 800aa7c <_dtoa_r+0x370>
 800aa78:	f04f 0800 	mov.w	r8, #0
 800aa7c:	f018 0fff 	tst.w	r8, #255	; 0xff
 800aa80:	f000 845a 	beq.w	800b338 <_dtoa_r+0xc2c>
 800aa84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	46a1      	mov	r9, r4
 800aa8e:	f003 f917 	bl	800dcc0 <__aeabi_ddiv>
 800aa92:	f04f 0801 	mov.w	r8, #1
 800aa96:	f003 fa83 	bl	800dfa0 <__aeabi_d2iz>
 800aa9a:	4682      	mov	sl, r0
 800aa9c:	f002 ff80 	bl	800d9a0 <__aeabi_i2d>
 800aaa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaa4:	f10a 0530 	add.w	r5, sl, #48	; 0x30
 800aaa8:	f002 ffe0 	bl	800da6c <__aeabi_dmul>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4630      	mov	r0, r6
 800aab2:	4639      	mov	r1, r7
 800aab4:	f002 fe26 	bl	800d704 <__aeabi_dsub>
 800aab8:	2300      	movs	r3, #0
 800aaba:	2200      	movs	r2, #0
 800aabc:	455c      	cmp	r4, fp
 800aabe:	f804 5c01 	strb.w	r5, [r4, #-1]
 800aac2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800aac6:	f104 0401 	add.w	r4, r4, #1
 800aaca:	4606      	mov	r6, r0
 800aacc:	460f      	mov	r7, r1
 800aace:	d1ca      	bne.n	800aa66 <_dtoa_r+0x35a>
 800aad0:	46c8      	mov	r8, r9
 800aad2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800aad6:	4632      	mov	r2, r6
 800aad8:	463b      	mov	r3, r7
 800aada:	4630      	mov	r0, r6
 800aadc:	4639      	mov	r1, r7
 800aade:	f002 fe13 	bl	800d708 <__adddf3>
 800aae2:	4604      	mov	r4, r0
 800aae4:	460d      	mov	r5, r1
 800aae6:	4622      	mov	r2, r4
 800aae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaec:	462b      	mov	r3, r5
 800aaee:	f003 fa2f 	bl	800df50 <__aeabi_dcmplt>
 800aaf2:	b960      	cbnz	r0, 800ab0e <_dtoa_r+0x402>
 800aaf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaf8:	4622      	mov	r2, r4
 800aafa:	462b      	mov	r3, r5
 800aafc:	f003 fa1e 	bl	800df3c <__aeabi_dcmpeq>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	f000 841c 	beq.w	800b33e <_dtoa_r+0xc32>
 800ab06:	f01a 0f01 	tst.w	sl, #1
 800ab0a:	f000 8418 	beq.w	800b33e <_dtoa_r+0xc32>
 800ab0e:	9c06      	ldr	r4, [sp, #24]
 800ab10:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800ab14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ab16:	9418      	str	r4, [sp, #96]	; 0x60
 800ab18:	4643      	mov	r3, r8
 800ab1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ab1c:	e002      	b.n	800ab24 <_dtoa_r+0x418>
 800ab1e:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	2e39      	cmp	r6, #57	; 0x39
 800ab26:	461a      	mov	r2, r3
 800ab28:	f040 84d2 	bne.w	800b4d0 <_dtoa_r+0xdc4>
 800ab2c:	428b      	cmp	r3, r1
 800ab2e:	d1f6      	bne.n	800ab1e <_dtoa_r+0x412>
 800ab30:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ab32:	2330      	movs	r3, #48	; 0x30
 800ab34:	920a      	str	r2, [sp, #40]	; 0x28
 800ab36:	2231      	movs	r2, #49	; 0x31
 800ab38:	3401      	adds	r4, #1
 800ab3a:	9406      	str	r4, [sp, #24]
 800ab3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800ab3e:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ab42:	4623      	mov	r3, r4
 800ab44:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ab48:	e0c0      	b.n	800accc <_dtoa_r+0x5c0>
 800ab4a:	1ceb      	adds	r3, r5, #3
 800ab4c:	e6db      	b.n	800a906 <_dtoa_r+0x1fa>
 800ab4e:	2401      	movs	r4, #1
 800ab50:	9415      	str	r4, [sp, #84]	; 0x54
 800ab52:	e6a3      	b.n	800a89c <_dtoa_r+0x190>
 800ab54:	08026da0 	.word	0x08026da0
 800ab58:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	f040 80e2 	bne.w	800ad24 <_dtoa_r+0x618>
 800ab60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ab62:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ab64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ab68:	2d00      	cmp	r5, #0
 800ab6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab6c:	bfd4      	ite	le
 800ab6e:	2300      	movle	r3, #0
 800ab70:	2301      	movgt	r3, #1
 800ab72:	2800      	cmp	r0, #0
 800ab74:	bfd4      	ite	le
 800ab76:	2300      	movle	r3, #0
 800ab78:	f003 0301 	andgt.w	r3, r3, #1
 800ab7c:	b14b      	cbz	r3, 800ab92 <_dtoa_r+0x486>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ab82:	42ab      	cmp	r3, r5
 800ab84:	bfa8      	it	ge
 800ab86:	462b      	movge	r3, r5
 800ab88:	1aed      	subs	r5, r5, r3
 800ab8a:	1ac9      	subs	r1, r1, r3
 800ab8c:	1ac0      	subs	r0, r0, r3
 800ab8e:	9110      	str	r1, [sp, #64]	; 0x40
 800ab90:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab94:	2a00      	cmp	r2, #0
 800ab96:	dd1a      	ble.n	800abce <_dtoa_r+0x4c2>
 800ab98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f000 8457 	beq.w	800b44e <_dtoa_r+0xd42>
 800aba0:	2c00      	cmp	r4, #0
 800aba2:	dd10      	ble.n	800abc6 <_dtoa_r+0x4ba>
 800aba4:	4651      	mov	r1, sl
 800aba6:	4622      	mov	r2, r4
 800aba8:	4648      	mov	r0, r9
 800abaa:	f001 fb29 	bl	800c200 <__pow5mult>
 800abae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abb0:	4682      	mov	sl, r0
 800abb2:	4648      	mov	r0, r9
 800abb4:	4651      	mov	r1, sl
 800abb6:	f001 fa87 	bl	800c0c8 <__multiply>
 800abba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800abbc:	4606      	mov	r6, r0
 800abbe:	4648      	mov	r0, r9
 800abc0:	f001 f996 	bl	800bef0 <_Bfree>
 800abc4:	960f      	str	r6, [sp, #60]	; 0x3c
 800abc6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800abc8:	1b02      	subs	r2, r0, r4
 800abca:	f040 8464 	bne.w	800b496 <_dtoa_r+0xd8a>
 800abce:	2101      	movs	r1, #1
 800abd0:	4648      	mov	r0, r9
 800abd2:	f001 fa6f 	bl	800c0b4 <__i2b>
 800abd6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800abd8:	2900      	cmp	r1, #0
 800abda:	4604      	mov	r4, r0
 800abdc:	dd05      	ble.n	800abea <_dtoa_r+0x4de>
 800abde:	4621      	mov	r1, r4
 800abe0:	4648      	mov	r0, r9
 800abe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abe4:	f001 fb0c 	bl	800c200 <__pow5mult>
 800abe8:	4604      	mov	r4, r0
 800abea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abec:	2a01      	cmp	r2, #1
 800abee:	f340 822a 	ble.w	800b046 <_dtoa_r+0x93a>
 800abf2:	2600      	movs	r6, #0
 800abf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abf6:	2301      	movs	r3, #1
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	f040 83a4 	bne.w	800b346 <_dtoa_r+0xc3a>
 800abfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ac00:	181b      	adds	r3, r3, r0
 800ac02:	f013 031f 	ands.w	r3, r3, #31
 800ac06:	f000 8275 	beq.w	800b0f4 <_dtoa_r+0x9e8>
 800ac0a:	f1c3 0220 	rsb	r2, r3, #32
 800ac0e:	2a04      	cmp	r2, #4
 800ac10:	f340 84f3 	ble.w	800b5fa <_dtoa_r+0xeee>
 800ac14:	f1c3 031c 	rsb	r3, r3, #28
 800ac18:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ac1a:	18ed      	adds	r5, r5, r3
 800ac1c:	18c0      	adds	r0, r0, r3
 800ac1e:	18c9      	adds	r1, r1, r3
 800ac20:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac22:	9110      	str	r1, [sp, #64]	; 0x40
 800ac24:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ac26:	2900      	cmp	r1, #0
 800ac28:	dd05      	ble.n	800ac36 <_dtoa_r+0x52a>
 800ac2a:	4648      	mov	r0, r9
 800ac2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac30:	f001 fb32 	bl	800c298 <__lshift>
 800ac34:	900f      	str	r0, [sp, #60]	; 0x3c
 800ac36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	dd04      	ble.n	800ac46 <_dtoa_r+0x53a>
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4648      	mov	r0, r9
 800ac40:	f001 fb2a 	bl	800c298 <__lshift>
 800ac44:	4604      	mov	r4, r0
 800ac46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f040 8385 	bne.w	800b358 <_dtoa_r+0xc4c>
 800ac4e:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ac50:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac52:	2802      	cmp	r0, #2
 800ac54:	bfd4      	ite	le
 800ac56:	2300      	movle	r3, #0
 800ac58:	2301      	movgt	r3, #1
 800ac5a:	2900      	cmp	r1, #0
 800ac5c:	bfcc      	ite	gt
 800ac5e:	2300      	movgt	r3, #0
 800ac60:	f003 0301 	andle.w	r3, r3, #1
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 824e 	beq.w	800b106 <_dtoa_r+0x9fa>
 800ac6a:	2900      	cmp	r1, #0
 800ac6c:	f040 8094 	bne.w	800ad98 <_dtoa_r+0x68c>
 800ac70:	2205      	movs	r2, #5
 800ac72:	460b      	mov	r3, r1
 800ac74:	4648      	mov	r0, r9
 800ac76:	4621      	mov	r1, r4
 800ac78:	f001 f944 	bl	800bf04 <__multadd>
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ac80:	4621      	mov	r1, r4
 800ac82:	f001 fb69 	bl	800c358 <__mcmp>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	f340 8086 	ble.w	800ad98 <_dtoa_r+0x68c>
 800ac8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac8e:	2700      	movs	r7, #0
 800ac90:	9806      	ldr	r0, [sp, #24]
 800ac92:	2231      	movs	r2, #49	; 0x31
 800ac94:	461d      	mov	r5, r3
 800ac96:	3001      	adds	r0, #1
 800ac98:	f803 2b01 	strb.w	r2, [r3], #1
 800ac9c:	9006      	str	r0, [sp, #24]
 800ac9e:	930a      	str	r3, [sp, #40]	; 0x28
 800aca0:	4648      	mov	r0, r9
 800aca2:	4621      	mov	r1, r4
 800aca4:	f001 f924 	bl	800bef0 <_Bfree>
 800aca8:	f1ba 0f00 	cmp.w	sl, #0
 800acac:	d00e      	beq.n	800accc <_dtoa_r+0x5c0>
 800acae:	1c3b      	adds	r3, r7, #0
 800acb0:	bf18      	it	ne
 800acb2:	2301      	movne	r3, #1
 800acb4:	4557      	cmp	r7, sl
 800acb6:	bf0c      	ite	eq
 800acb8:	2300      	moveq	r3, #0
 800acba:	f003 0301 	andne.w	r3, r3, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f040 8213 	bne.w	800b0ea <_dtoa_r+0x9de>
 800acc4:	4648      	mov	r0, r9
 800acc6:	4651      	mov	r1, sl
 800acc8:	f001 f912 	bl	800bef0 <_Bfree>
 800accc:	4648      	mov	r0, r9
 800acce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800acd0:	f001 f90e 	bl	800bef0 <_Bfree>
 800acd4:	9c06      	ldr	r4, [sp, #24]
 800acd6:	2200      	movs	r2, #0
 800acd8:	1c63      	adds	r3, r4, #1
 800acda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acdc:	7022      	strb	r2, [r4, #0]
 800acde:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800ace4:	2c00      	cmp	r4, #0
 800ace6:	f43f ad50 	beq.w	800a78a <_dtoa_r+0x7e>
 800acea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800acec:	6020      	str	r0, [r4, #0]
 800acee:	e54c      	b.n	800a78a <_dtoa_r+0x7e>
 800acf0:	9c06      	ldr	r4, [sp, #24]
 800acf2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800acf4:	1b2d      	subs	r5, r5, r4
 800acf6:	9510      	str	r5, [sp, #64]	; 0x40
 800acf8:	4265      	negs	r5, r4
 800acfa:	2400      	movs	r4, #0
 800acfc:	9511      	str	r5, [sp, #68]	; 0x44
 800acfe:	9414      	str	r4, [sp, #80]	; 0x50
 800ad00:	e5dd      	b.n	800a8be <_dtoa_r+0x1b2>
 800ad02:	4276      	negs	r6, r6
 800ad04:	2400      	movs	r4, #0
 800ad06:	9610      	str	r6, [sp, #64]	; 0x40
 800ad08:	940b      	str	r4, [sp, #44]	; 0x2c
 800ad0a:	e5ce      	b.n	800a8aa <_dtoa_r+0x19e>
 800ad0c:	f64f 32ee 	movw	r2, #64494	; 0xfbee
 800ad10:	9902      	ldr	r1, [sp, #8]
 800ad12:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 800ad16:	1b92      	subs	r2, r2, r6
 800ad18:	fa11 f002 	lsls.w	r0, r1, r2
 800ad1c:	e563      	b.n	800a7e6 <_dtoa_r+0xda>
 800ad1e:	2500      	movs	r5, #0
 800ad20:	9515      	str	r5, [sp, #84]	; 0x54
 800ad22:	e5bb      	b.n	800a89c <_dtoa_r+0x190>
 800ad24:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800ad26:	2d01      	cmp	r5, #1
 800ad28:	f340 83bf 	ble.w	800b4aa <_dtoa_r+0xd9e>
 800ad2c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ad2e:	1e6b      	subs	r3, r5, #1
 800ad30:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ad32:	429d      	cmp	r5, r3
 800ad34:	bfaf      	iteee	ge
 800ad36:	ebc3 0405 	rsbge	r4, r3, r5
 800ad3a:	9d11      	ldrlt	r5, [sp, #68]	; 0x44
 800ad3c:	9311      	strlt	r3, [sp, #68]	; 0x44
 800ad3e:	ebc5 0203 	rsblt	r2, r5, r3
 800ad42:	bfbe      	ittt	lt
 800ad44:	9d14      	ldrlt	r5, [sp, #80]	; 0x50
 800ad46:	18ad      	addlt	r5, r5, r2
 800ad48:	9514      	strlt	r5, [sp, #80]	; 0x50
 800ad4a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ad4c:	2d00      	cmp	r5, #0
 800ad4e:	f2c0 83c8 	blt.w	800b4e2 <_dtoa_r+0xdd6>
 800ad52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ad54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad58:	4648      	mov	r0, r9
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	18d2      	adds	r2, r2, r3
 800ad5e:	9210      	str	r2, [sp, #64]	; 0x40
 800ad60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad62:	18d2      	adds	r2, r2, r3
 800ad64:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad66:	f001 f9a5 	bl	800c0b4 <__i2b>
 800ad6a:	4682      	mov	sl, r0
 800ad6c:	e6fc      	b.n	800ab68 <_dtoa_r+0x45c>
 800ad6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ad70:	2c00      	cmp	r4, #0
 800ad72:	f040 8397 	bne.w	800b4a4 <_dtoa_r+0xd98>
 800ad76:	2300      	movs	r3, #0
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800ad7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad82:	f002 fe73 	bl	800da6c <__aeabi_dmul>
 800ad86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad8a:	f003 f8f5 	bl	800df78 <__aeabi_dcmpge>
 800ad8e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ad90:	46a2      	mov	sl, r4
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f43f af7a 	beq.w	800ac8c <_dtoa_r+0x580>
 800ad98:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800ad9a:	2700      	movs	r7, #0
 800ad9c:	43ed      	mvns	r5, r5
 800ad9e:	9506      	str	r5, [sp, #24]
 800ada0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ada2:	e77d      	b.n	800aca0 <_dtoa_r+0x594>
 800ada4:	2501      	movs	r5, #1
 800ada6:	9513      	str	r5, [sp, #76]	; 0x4c
 800ada8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800adaa:	2d00      	cmp	r5, #0
 800adac:	f340 82ec 	ble.w	800b388 <_dtoa_r+0xc7c>
 800adb0:	46ab      	mov	fp, r5
 800adb2:	2d0e      	cmp	r5, #14
 800adb4:	bf8c      	ite	hi
 800adb6:	2400      	movhi	r4, #0
 800adb8:	f004 0401 	andls.w	r4, r4, #1
 800adbc:	9516      	str	r5, [sp, #88]	; 0x58
 800adbe:	950e      	str	r5, [sp, #56]	; 0x38
 800adc0:	2100      	movs	r1, #0
 800adc2:	f1bb 0f17 	cmp.w	fp, #23
 800adc6:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800adca:	d90a      	bls.n	800ade2 <_dtoa_r+0x6d6>
 800adcc:	2201      	movs	r2, #1
 800adce:	2304      	movs	r3, #4
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	4611      	mov	r1, r2
 800add4:	f103 0014 	add.w	r0, r3, #20
 800add8:	3201      	adds	r2, #1
 800adda:	4558      	cmp	r0, fp
 800addc:	d9f8      	bls.n	800add0 <_dtoa_r+0x6c4>
 800adde:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800ade2:	4648      	mov	r0, r9
 800ade4:	f001 f85e 	bl	800bea4 <_Balloc>
 800ade8:	900a      	str	r0, [sp, #40]	; 0x28
 800adea:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800adee:	2c00      	cmp	r4, #0
 800adf0:	f43f addc 	beq.w	800a9ac <_dtoa_r+0x2a0>
 800adf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adf8:	461d      	mov	r5, r3
 800adfa:	4614      	mov	r4, r2
 800adfc:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800ae00:	9d06      	ldr	r5, [sp, #24]
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	f340 820d 	ble.w	800b222 <_dtoa_r+0xb16>
 800ae08:	f005 020f 	and.w	r2, r5, #15
 800ae0c:	4b9b      	ldr	r3, [pc, #620]	; (800b07c <_dtoa_r+0x970>)
 800ae0e:	112c      	asrs	r4, r5, #4
 800ae10:	2602      	movs	r6, #2
 800ae12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae16:	06e2      	lsls	r2, r4, #27
 800ae18:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800ae1c:	d50b      	bpl.n	800ae36 <_dtoa_r+0x72a>
 800ae1e:	4b98      	ldr	r3, [pc, #608]	; (800b080 <_dtoa_r+0x974>)
 800ae20:	f004 040f 	and.w	r4, r4, #15
 800ae24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae28:	2603      	movs	r6, #3
 800ae2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae2e:	f002 ff47 	bl	800dcc0 <__aeabi_ddiv>
 800ae32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae36:	b174      	cbz	r4, 800ae56 <_dtoa_r+0x74a>
 800ae38:	4d91      	ldr	r5, [pc, #580]	; (800b080 <_dtoa_r+0x974>)
 800ae3a:	07e3      	lsls	r3, r4, #31
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	4659      	mov	r1, fp
 800ae40:	d506      	bpl.n	800ae50 <_dtoa_r+0x744>
 800ae42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae46:	3601      	adds	r6, #1
 800ae48:	f002 fe10 	bl	800da6c <__aeabi_dmul>
 800ae4c:	4682      	mov	sl, r0
 800ae4e:	468b      	mov	fp, r1
 800ae50:	3508      	adds	r5, #8
 800ae52:	1064      	asrs	r4, r4, #1
 800ae54:	d1f1      	bne.n	800ae3a <_dtoa_r+0x72e>
 800ae56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae5a:	4652      	mov	r2, sl
 800ae5c:	465b      	mov	r3, fp
 800ae5e:	f002 ff2f 	bl	800dcc0 <__aeabi_ddiv>
 800ae62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae66:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	f000 810b 	beq.w	800b084 <_dtoa_r+0x978>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae74:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f003 f869 	bl	800df50 <__aeabi_dcmplt>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	b900      	cbnz	r0, 800ae84 <_dtoa_r+0x778>
 800ae82:	2300      	movs	r3, #0
 800ae84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ae86:	2d00      	cmp	r5, #0
 800ae88:	bfd4      	ite	le
 800ae8a:	2300      	movle	r3, #0
 800ae8c:	f003 0301 	andgt.w	r3, r3, #1
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 80f7 	beq.w	800b084 <_dtoa_r+0x978>
 800ae96:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800ae98:	2c00      	cmp	r4, #0
 800ae9a:	f340 81ad 	ble.w	800b1f8 <_dtoa_r+0xaec>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	2200      	movs	r2, #0
 800aea2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800aea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeaa:	f002 fddf 	bl	800da6c <__aeabi_dmul>
 800aeae:	9d06      	ldr	r5, [sp, #24]
 800aeb0:	3d01      	subs	r5, #1
 800aeb2:	9518      	str	r5, [sp, #96]	; 0x60
 800aeb4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800aeb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeba:	1c70      	adds	r0, r6, #1
 800aebc:	f002 fd70 	bl	800d9a0 <__aeabi_i2d>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aec8:	f002 fdd0 	bl	800da6c <__aeabi_dmul>
 800aecc:	2300      	movs	r3, #0
 800aece:	2200      	movs	r2, #0
 800aed0:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800aed4:	f002 fc18 	bl	800d708 <__adddf3>
 800aed8:	4606      	mov	r6, r0
 800aeda:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800aede:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800aee0:	2c00      	cmp	r4, #0
 800aee2:	f000 81cb 	beq.w	800b27c <_dtoa_r+0xb70>
 800aee6:	4b65      	ldr	r3, [pc, #404]	; (800b07c <_dtoa_r+0x970>)
 800aee8:	2100      	movs	r1, #0
 800aeea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aeec:	2000      	movs	r0, #0
 800aeee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aef2:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800aef6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aefa:	9412      	str	r4, [sp, #72]	; 0x48
 800aefc:	f002 fee0 	bl	800dcc0 <__aeabi_ddiv>
 800af00:	4632      	mov	r2, r6
 800af02:	463b      	mov	r3, r7
 800af04:	f002 fbfe 	bl	800d704 <__aeabi_dsub>
 800af08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af10:	f003 f846 	bl	800dfa0 <__aeabi_d2iz>
 800af14:	4604      	mov	r4, r0
 800af16:	f002 fd43 	bl	800d9a0 <__aeabi_i2d>
 800af1a:	3430      	adds	r4, #48	; 0x30
 800af1c:	b2e6      	uxtb	r6, r4
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af26:	f002 fbed 	bl	800d704 <__aeabi_dsub>
 800af2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800af2c:	f804 6b01 	strb.w	r6, [r4], #1
 800af30:	9412      	str	r4, [sp, #72]	; 0x48
 800af32:	4682      	mov	sl, r0
 800af34:	468b      	mov	fp, r1
 800af36:	4652      	mov	r2, sl
 800af38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af3c:	465b      	mov	r3, fp
 800af3e:	f003 f825 	bl	800df8c <__aeabi_dcmpgt>
 800af42:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800af46:	2800      	cmp	r0, #0
 800af48:	f040 8345 	bne.w	800b5d6 <_dtoa_r+0xeca>
 800af4c:	2100      	movs	r1, #0
 800af4e:	4652      	mov	r2, sl
 800af50:	465b      	mov	r3, fp
 800af52:	2000      	movs	r0, #0
 800af54:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800af58:	f002 fbd4 	bl	800d704 <__aeabi_dsub>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af64:	f003 f812 	bl	800df8c <__aeabi_dcmpgt>
 800af68:	2800      	cmp	r0, #0
 800af6a:	f040 82ae 	bne.w	800b4ca <_dtoa_r+0xdbe>
 800af6e:	2d01      	cmp	r5, #1
 800af70:	f340 8142 	ble.w	800b1f8 <_dtoa_r+0xaec>
 800af74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af76:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800af78:	1965      	adds	r5, r4, r5
 800af7a:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800af7e:	9502      	str	r5, [sp, #8]
 800af80:	e00c      	b.n	800af9c <_dtoa_r+0x890>
 800af82:	f002 fbbf 	bl	800d704 <__aeabi_dsub>
 800af86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800af8a:	f002 ffe1 	bl	800df50 <__aeabi_dcmplt>
 800af8e:	2800      	cmp	r0, #0
 800af90:	f040 8298 	bne.w	800b4c4 <_dtoa_r+0xdb8>
 800af94:	9d02      	ldr	r5, [sp, #8]
 800af96:	42af      	cmp	r7, r5
 800af98:	f000 812c 	beq.w	800b1f4 <_dtoa_r+0xae8>
 800af9c:	2300      	movs	r3, #0
 800af9e:	2200      	movs	r2, #0
 800afa0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800afa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800afa8:	f002 fd60 	bl	800da6c <__aeabi_dmul>
 800afac:	2300      	movs	r3, #0
 800afae:	2200      	movs	r2, #0
 800afb0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800afb4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afb8:	4650      	mov	r0, sl
 800afba:	4659      	mov	r1, fp
 800afbc:	f002 fd56 	bl	800da6c <__aeabi_dmul>
 800afc0:	4689      	mov	r9, r1
 800afc2:	4680      	mov	r8, r0
 800afc4:	f002 ffec 	bl	800dfa0 <__aeabi_d2iz>
 800afc8:	4604      	mov	r4, r0
 800afca:	f002 fce9 	bl	800d9a0 <__aeabi_i2d>
 800afce:	3430      	adds	r4, #48	; 0x30
 800afd0:	b2e6      	uxtb	r6, r4
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4640      	mov	r0, r8
 800afd8:	4649      	mov	r1, r9
 800afda:	f002 fb93 	bl	800d704 <__aeabi_dsub>
 800afde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800afe2:	f807 6b01 	strb.w	r6, [r7], #1
 800afe6:	463d      	mov	r5, r7
 800afe8:	468b      	mov	fp, r1
 800afea:	4682      	mov	sl, r0
 800afec:	f002 ffb0 	bl	800df50 <__aeabi_dcmplt>
 800aff0:	2100      	movs	r1, #0
 800aff2:	4652      	mov	r2, sl
 800aff4:	465b      	mov	r3, fp
 800aff6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800affa:	4604      	mov	r4, r0
 800affc:	2000      	movs	r0, #0
 800affe:	2c00      	cmp	r4, #0
 800b000:	d0bf      	beq.n	800af82 <_dtoa_r+0x876>
 800b002:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b004:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b006:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800b00a:	9406      	str	r4, [sp, #24]
 800b00c:	970a      	str	r7, [sp, #40]	; 0x28
 800b00e:	e65d      	b.n	800accc <_dtoa_r+0x5c0>
 800b010:	2500      	movs	r5, #0
 800b012:	9513      	str	r5, [sp, #76]	; 0x4c
 800b014:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800b016:	9d06      	ldr	r5, [sp, #24]
 800b018:	1945      	adds	r5, r0, r5
 800b01a:	9516      	str	r5, [sp, #88]	; 0x58
 800b01c:	f105 0b01 	add.w	fp, r5, #1
 800b020:	f1bb 0f00 	cmp.w	fp, #0
 800b024:	f340 81b9 	ble.w	800b39a <_dtoa_r+0xc8e>
 800b028:	f1bb 0f0e 	cmp.w	fp, #14
 800b02c:	bf8c      	ite	hi
 800b02e:	2400      	movhi	r4, #0
 800b030:	f004 0401 	andls.w	r4, r4, #1
 800b034:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b038:	e6c2      	b.n	800adc0 <_dtoa_r+0x6b4>
 800b03a:	2500      	movs	r5, #0
 800b03c:	9513      	str	r5, [sp, #76]	; 0x4c
 800b03e:	e6b3      	b.n	800ada8 <_dtoa_r+0x69c>
 800b040:	2501      	movs	r5, #1
 800b042:	9513      	str	r5, [sp, #76]	; 0x4c
 800b044:	e7e6      	b.n	800b014 <_dtoa_r+0x908>
 800b046:	9b02      	ldr	r3, [sp, #8]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f47f add2 	bne.w	800abf2 <_dtoa_r+0x4e6>
 800b04e:	9a03      	ldr	r2, [sp, #12]
 800b050:	9e02      	ldr	r6, [sp, #8]
 800b052:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800b056:	2b00      	cmp	r3, #0
 800b058:	f47f adcc 	bne.w	800abf4 <_dtoa_r+0x4e8>
 800b05c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800b060:	4013      	ands	r3, r2
 800b062:	461e      	mov	r6, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	f43f adc5 	beq.w	800abf4 <_dtoa_r+0x4e8>
 800b06a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b06c:	2601      	movs	r6, #1
 800b06e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b070:	3001      	adds	r0, #1
 800b072:	9010      	str	r0, [sp, #64]	; 0x40
 800b074:	3101      	adds	r1, #1
 800b076:	910b      	str	r1, [sp, #44]	; 0x2c
 800b078:	e5bc      	b.n	800abf4 <_dtoa_r+0x4e8>
 800b07a:	bf00      	nop
 800b07c:	08026da0 	.word	0x08026da0
 800b080:	08026e90 	.word	0x08026e90
 800b084:	4630      	mov	r0, r6
 800b086:	f002 fc8b 	bl	800d9a0 <__aeabi_i2d>
 800b08a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b08e:	f002 fced 	bl	800da6c <__aeabi_dmul>
 800b092:	2300      	movs	r3, #0
 800b094:	2200      	movs	r2, #0
 800b096:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800b09a:	f002 fb35 	bl	800d708 <__adddf3>
 800b09e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b0a0:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	4627      	mov	r7, r4
 800b0a8:	2d00      	cmp	r5, #0
 800b0aa:	f040 80b6 	bne.w	800b21a <_dtoa_r+0xb0e>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800b0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ba:	f002 fb23 	bl	800d704 <__aeabi_dsub>
 800b0be:	4632      	mov	r2, r6
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	4682      	mov	sl, r0
 800b0c4:	468b      	mov	fp, r1
 800b0c6:	f002 ff61 	bl	800df8c <__aeabi_dcmpgt>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f040 80d3 	bne.w	800b276 <_dtoa_r+0xb6a>
 800b0d0:	4632      	mov	r2, r6
 800b0d2:	4650      	mov	r0, sl
 800b0d4:	4659      	mov	r1, fp
 800b0d6:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800b0da:	f002 ff39 	bl	800df50 <__aeabi_dcmplt>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f000 808a 	beq.w	800b1f8 <_dtoa_r+0xaec>
 800b0e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b0e6:	46a2      	mov	sl, r4
 800b0e8:	e656      	b.n	800ad98 <_dtoa_r+0x68c>
 800b0ea:	4648      	mov	r0, r9
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	f000 feff 	bl	800bef0 <_Bfree>
 800b0f2:	e5e7      	b.n	800acc4 <_dtoa_r+0x5b8>
 800b0f4:	231c      	movs	r3, #28
 800b0f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0f8:	18ed      	adds	r5, r5, r3
 800b0fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b0fc:	18d2      	adds	r2, r2, r3
 800b0fe:	9210      	str	r2, [sp, #64]	; 0x40
 800b100:	18c0      	adds	r0, r0, r3
 800b102:	900b      	str	r0, [sp, #44]	; 0x2c
 800b104:	e58e      	b.n	800ac24 <_dtoa_r+0x518>
 800b106:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b108:	2900      	cmp	r1, #0
 800b10a:	f000 814e 	beq.w	800b3aa <_dtoa_r+0xc9e>
 800b10e:	2d00      	cmp	r5, #0
 800b110:	dd05      	ble.n	800b11e <_dtoa_r+0xa12>
 800b112:	4651      	mov	r1, sl
 800b114:	4648      	mov	r0, r9
 800b116:	462a      	mov	r2, r5
 800b118:	f001 f8be 	bl	800c298 <__lshift>
 800b11c:	4682      	mov	sl, r0
 800b11e:	2e00      	cmp	r6, #0
 800b120:	f040 820a 	bne.w	800b538 <_dtoa_r+0xe2c>
 800b124:	4656      	mov	r6, sl
 800b126:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b128:	4657      	mov	r7, sl
 800b12a:	f04f 0801 	mov.w	r8, #1
 800b12e:	9507      	str	r5, [sp, #28]
 800b130:	9d02      	ldr	r5, [sp, #8]
 800b132:	9402      	str	r4, [sp, #8]
 800b134:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b136:	ea05 0508 	and.w	r5, r5, r8
 800b13a:	950c      	str	r5, [sp, #48]	; 0x30
 800b13c:	9902      	ldr	r1, [sp, #8]
 800b13e:	4620      	mov	r0, r4
 800b140:	f7ff fa42 	bl	800a5c8 <quorem>
 800b144:	4639      	mov	r1, r7
 800b146:	f04f 0b01 	mov.w	fp, #1
 800b14a:	9008      	str	r0, [sp, #32]
 800b14c:	4620      	mov	r0, r4
 800b14e:	f001 f903 	bl	800c358 <__mcmp>
 800b152:	9b08      	ldr	r3, [sp, #32]
 800b154:	9902      	ldr	r1, [sp, #8]
 800b156:	4632      	mov	r2, r6
 800b158:	3330      	adds	r3, #48	; 0x30
 800b15a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b15c:	4605      	mov	r5, r0
 800b15e:	4648      	mov	r0, r9
 800b160:	f001 f91a 	bl	800c398 <__mdiff>
 800b164:	68c3      	ldr	r3, [r0, #12]
 800b166:	4682      	mov	sl, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d03d      	beq.n	800b1e8 <_dtoa_r+0xadc>
 800b16c:	4648      	mov	r0, r9
 800b16e:	4651      	mov	r1, sl
 800b170:	f000 febe 	bl	800bef0 <_Bfree>
 800b174:	9826      	ldr	r0, [sp, #152]	; 0x98
 800b176:	ea5b 0000 	orrs.w	r0, fp, r0
 800b17a:	d103      	bne.n	800b184 <_dtoa_r+0xa78>
 800b17c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b17e:	2900      	cmp	r1, #0
 800b180:	f000 8216 	beq.w	800b5b0 <_dtoa_r+0xea4>
 800b184:	2d00      	cmp	r5, #0
 800b186:	f2c0 81b0 	blt.w	800b4ea <_dtoa_r+0xdde>
 800b18a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800b18c:	4328      	orrs	r0, r5
 800b18e:	d103      	bne.n	800b198 <_dtoa_r+0xa8c>
 800b190:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b192:	2d00      	cmp	r5, #0
 800b194:	f000 81a9 	beq.w	800b4ea <_dtoa_r+0xdde>
 800b198:	f1bb 0f00 	cmp.w	fp, #0
 800b19c:	f300 81f0 	bgt.w	800b580 <_dtoa_r+0xe74>
 800b1a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b1a2:	9807      	ldr	r0, [sp, #28]
 800b1a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b1a6:	4588      	cmp	r8, r1
 800b1a8:	f800 5b01 	strb.w	r5, [r0], #1
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	9007      	str	r0, [sp, #28]
 800b1b0:	f000 81e0 	beq.w	800b574 <_dtoa_r+0xe68>
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	220a      	movs	r2, #10
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4648      	mov	r0, r9
 800b1bc:	f000 fea2 	bl	800bf04 <__multadd>
 800b1c0:	42b7      	cmp	r7, r6
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	d01e      	beq.n	800b204 <_dtoa_r+0xaf8>
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	220a      	movs	r2, #10
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4648      	mov	r0, r9
 800b1ce:	f000 fe99 	bl	800bf04 <__multadd>
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	220a      	movs	r2, #10
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f108 0801 	add.w	r8, r8, #1
 800b1dc:	4607      	mov	r7, r0
 800b1de:	4648      	mov	r0, r9
 800b1e0:	f000 fe90 	bl	800bf04 <__multadd>
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	e7a9      	b.n	800b13c <_dtoa_r+0xa30>
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	4651      	mov	r1, sl
 800b1ec:	f001 f8b4 	bl	800c358 <__mcmp>
 800b1f0:	4683      	mov	fp, r0
 800b1f2:	e7bb      	b.n	800b16c <_dtoa_r+0xa60>
 800b1f4:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800b1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b200:	f7ff bbd4 	b.w	800a9ac <_dtoa_r+0x2a0>
 800b204:	4639      	mov	r1, r7
 800b206:	4648      	mov	r0, r9
 800b208:	220a      	movs	r2, #10
 800b20a:	2300      	movs	r3, #0
 800b20c:	f000 fe7a 	bl	800bf04 <__multadd>
 800b210:	f108 0801 	add.w	r8, r8, #1
 800b214:	4607      	mov	r7, r0
 800b216:	4606      	mov	r6, r0
 800b218:	e790      	b.n	800b13c <_dtoa_r+0xa30>
 800b21a:	9c06      	ldr	r4, [sp, #24]
 800b21c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b21e:	9418      	str	r4, [sp, #96]	; 0x60
 800b220:	e65d      	b.n	800aede <_dtoa_r+0x7d2>
 800b222:	9d06      	ldr	r5, [sp, #24]
 800b224:	426c      	negs	r4, r5
 800b226:	2c00      	cmp	r4, #0
 800b228:	f000 810f 	beq.w	800b44a <_dtoa_r+0xd3e>
 800b22c:	f004 020f 	and.w	r2, r4, #15
 800b230:	4ba2      	ldr	r3, [pc, #648]	; (800b4bc <_dtoa_r+0xdb0>)
 800b232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	f002 fc15 	bl	800da6c <__aeabi_dmul>
 800b242:	1124      	asrs	r4, r4, #4
 800b244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b248:	f000 80ff 	beq.w	800b44a <_dtoa_r+0xd3e>
 800b24c:	4d9c      	ldr	r5, [pc, #624]	; (800b4c0 <_dtoa_r+0xdb4>)
 800b24e:	2602      	movs	r6, #2
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	07e7      	lsls	r7, r4, #31
 800b256:	4610      	mov	r0, r2
 800b258:	4619      	mov	r1, r3
 800b25a:	d506      	bpl.n	800b26a <_dtoa_r+0xb5e>
 800b25c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b260:	3601      	adds	r6, #1
 800b262:	f002 fc03 	bl	800da6c <__aeabi_dmul>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	3508      	adds	r5, #8
 800b26c:	1064      	asrs	r4, r4, #1
 800b26e:	d1f1      	bne.n	800b254 <_dtoa_r+0xb48>
 800b270:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b274:	e5f7      	b.n	800ae66 <_dtoa_r+0x75a>
 800b276:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b278:	46a2      	mov	sl, r4
 800b27a:	e507      	b.n	800ac8c <_dtoa_r+0x580>
 800b27c:	f105 3aff 	add.w	sl, r5, #4294967295
 800b280:	498e      	ldr	r1, [pc, #568]	; (800b4bc <_dtoa_r+0xdb0>)
 800b282:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b284:	4632      	mov	r2, r6
 800b286:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b28a:	463b      	mov	r3, r7
 800b28c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b290:	9412      	str	r4, [sp, #72]	; 0x48
 800b292:	f002 fbeb 	bl	800da6c <__aeabi_dmul>
 800b296:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29e:	f002 fe7f 	bl	800dfa0 <__aeabi_d2iz>
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	f002 fb7c 	bl	800d9a0 <__aeabi_i2d>
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2b0:	f002 fa28 	bl	800d704 <__aeabi_dsub>
 800b2b4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800b2b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b2ba:	2d01      	cmp	r5, #1
 800b2bc:	f804 3b01 	strb.w	r3, [r4], #1
 800b2c0:	46a0      	mov	r8, r4
 800b2c2:	9412      	str	r4, [sp, #72]	; 0x48
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	460f      	mov	r7, r1
 800b2c8:	d020      	beq.n	800b30c <_dtoa_r+0xc00>
 800b2ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2cc:	f104 38ff 	add.w	r8, r4, #4294967295
 800b2d0:	44a8      	add	r8, r5
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b2da:	f002 fbc7 	bl	800da6c <__aeabi_dmul>
 800b2de:	460f      	mov	r7, r1
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	f002 fe5d 	bl	800dfa0 <__aeabi_d2iz>
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	f002 fb5a 	bl	800d9a0 <__aeabi_i2d>
 800b2ec:	3530      	adds	r5, #48	; 0x30
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	f002 fa05 	bl	800d704 <__aeabi_dsub>
 800b2fa:	f804 5f01 	strb.w	r5, [r4, #1]!
 800b2fe:	4544      	cmp	r4, r8
 800b300:	d1e7      	bne.n	800b2d2 <_dtoa_r+0xbc6>
 800b302:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	eb05 080a 	add.w	r8, r5, sl
 800b30c:	2300      	movs	r3, #0
 800b30e:	2200      	movs	r2, #0
 800b310:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b314:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b318:	f002 f9f6 	bl	800d708 <__adddf3>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f002 fe32 	bl	800df8c <__aeabi_dcmpgt>
 800b328:	2800      	cmp	r0, #0
 800b32a:	f000 8098 	beq.w	800b45e <_dtoa_r+0xd52>
 800b32e:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800b332:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b334:	f7ff bbf0 	b.w	800ab18 <_dtoa_r+0x40c>
 800b338:	46c8      	mov	r8, r9
 800b33a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b33e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b340:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b344:	e4c2      	b.n	800accc <_dtoa_r+0x5c0>
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b34c:	6918      	ldr	r0, [r3, #16]
 800b34e:	f000 fe65 	bl	800c01c <__hi0bits>
 800b352:	f1c0 0320 	rsb	r3, r0, #32
 800b356:	e452      	b.n	800abfe <_dtoa_r+0x4f2>
 800b358:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b35a:	4621      	mov	r1, r4
 800b35c:	f000 fffc 	bl	800c358 <__mcmp>
 800b360:	2800      	cmp	r0, #0
 800b362:	f6bf ac74 	bge.w	800ac4e <_dtoa_r+0x542>
 800b366:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b368:	4648      	mov	r0, r9
 800b36a:	220a      	movs	r2, #10
 800b36c:	2300      	movs	r3, #0
 800b36e:	f000 fdc9 	bl	800bf04 <__multadd>
 800b372:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b374:	900f      	str	r0, [sp, #60]	; 0x3c
 800b376:	9806      	ldr	r0, [sp, #24]
 800b378:	3801      	subs	r0, #1
 800b37a:	9006      	str	r0, [sp, #24]
 800b37c:	2900      	cmp	r1, #0
 800b37e:	f040 8131 	bne.w	800b5e4 <_dtoa_r+0xed8>
 800b382:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b384:	930e      	str	r3, [sp, #56]	; 0x38
 800b386:	e462      	b.n	800ac4e <_dtoa_r+0x542>
 800b388:	2301      	movs	r3, #1
 800b38a:	9316      	str	r3, [sp, #88]	; 0x58
 800b38c:	930e      	str	r3, [sp, #56]	; 0x38
 800b38e:	9327      	str	r3, [sp, #156]	; 0x9c
 800b390:	2100      	movs	r1, #0
 800b392:	401c      	ands	r4, r3
 800b394:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b398:	e523      	b.n	800ade2 <_dtoa_r+0x6d6>
 800b39a:	f1bb 0f0e 	cmp.w	fp, #14
 800b39e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b3a2:	bf8c      	ite	hi
 800b3a4:	2300      	movhi	r3, #0
 800b3a6:	2301      	movls	r3, #1
 800b3a8:	e7f2      	b.n	800b390 <_dtoa_r+0xc84>
 800b3aa:	46d3      	mov	fp, sl
 800b3ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800b3ae:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800b3b0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800b3b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b3b6:	e002      	b.n	800b3be <_dtoa_r+0xcb2>
 800b3b8:	f000 fda4 	bl	800bf04 <__multadd>
 800b3bc:	4606      	mov	r6, r0
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7ff f901 	bl	800a5c8 <quorem>
 800b3c6:	220a      	movs	r2, #10
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b3d0:	f807 8005 	strb.w	r8, [r7, r5]
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	4648      	mov	r0, r9
 800b3d8:	45aa      	cmp	sl, r5
 800b3da:	dced      	bgt.n	800b3b8 <_dtoa_r+0xcac>
 800b3dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b3de:	46da      	mov	sl, fp
 800b3e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3e2:	461f      	mov	r7, r3
 800b3e4:	960f      	str	r6, [sp, #60]	; 0x3c
 800b3e6:	2a01      	cmp	r2, #1
 800b3e8:	bfac      	ite	ge
 800b3ea:	18ad      	addge	r5, r5, r2
 800b3ec:	3501      	addlt	r5, #1
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b3f2:	4648      	mov	r0, r9
 800b3f4:	f000 ff50 	bl	800c298 <__lshift>
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	900f      	str	r0, [sp, #60]	; 0x3c
 800b3fc:	f000 ffac 	bl	800c358 <__mcmp>
 800b400:	2800      	cmp	r0, #0
 800b402:	dd16      	ble.n	800b432 <_dtoa_r+0xd26>
 800b404:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b408:	462b      	mov	r3, r5
 800b40a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b40c:	1c69      	adds	r1, r5, #1
 800b40e:	e002      	b.n	800b416 <_dtoa_r+0xd0a>
 800b410:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800b414:	3b01      	subs	r3, #1
 800b416:	2a39      	cmp	r2, #57	; 0x39
 800b418:	f040 8087 	bne.w	800b52a <_dtoa_r+0xe1e>
 800b41c:	428b      	cmp	r3, r1
 800b41e:	d1f7      	bne.n	800b410 <_dtoa_r+0xd04>
 800b420:	9806      	ldr	r0, [sp, #24]
 800b422:	2231      	movs	r2, #49	; 0x31
 800b424:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b426:	3001      	adds	r0, #1
 800b428:	9006      	str	r0, [sp, #24]
 800b42a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b42e:	930a      	str	r3, [sp, #40]	; 0x28
 800b430:	e436      	b.n	800aca0 <_dtoa_r+0x594>
 800b432:	d102      	bne.n	800b43a <_dtoa_r+0xd2e>
 800b434:	f018 0f01 	tst.w	r8, #1
 800b438:	d1e4      	bne.n	800b404 <_dtoa_r+0xcf8>
 800b43a:	462a      	mov	r2, r5
 800b43c:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 800b440:	2b30      	cmp	r3, #48	; 0x30
 800b442:	d0fa      	beq.n	800b43a <_dtoa_r+0xd2e>
 800b444:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b446:	920a      	str	r2, [sp, #40]	; 0x28
 800b448:	e42a      	b.n	800aca0 <_dtoa_r+0x594>
 800b44a:	2602      	movs	r6, #2
 800b44c:	e50b      	b.n	800ae66 <_dtoa_r+0x75a>
 800b44e:	4648      	mov	r0, r9
 800b450:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b452:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b454:	f000 fed4 	bl	800c200 <__pow5mult>
 800b458:	900f      	str	r0, [sp, #60]	; 0x3c
 800b45a:	f7ff bbb8 	b.w	800abce <_dtoa_r+0x4c2>
 800b45e:	2100      	movs	r1, #0
 800b460:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b464:	2000      	movs	r0, #0
 800b466:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800b46a:	f002 f94b 	bl	800d704 <__aeabi_dsub>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	4630      	mov	r0, r6
 800b474:	4639      	mov	r1, r7
 800b476:	f002 fd6b 	bl	800df50 <__aeabi_dcmplt>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	f43f aebc 	beq.w	800b1f8 <_dtoa_r+0xaec>
 800b480:	4643      	mov	r3, r8
 800b482:	4619      	mov	r1, r3
 800b484:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b488:	2a30      	cmp	r2, #48	; 0x30
 800b48a:	d0fa      	beq.n	800b482 <_dtoa_r+0xd76>
 800b48c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b48e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b490:	910a      	str	r1, [sp, #40]	; 0x28
 800b492:	9406      	str	r4, [sp, #24]
 800b494:	e41a      	b.n	800accc <_dtoa_r+0x5c0>
 800b496:	4648      	mov	r0, r9
 800b498:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b49a:	f000 feb1 	bl	800c200 <__pow5mult>
 800b49e:	900f      	str	r0, [sp, #60]	; 0x3c
 800b4a0:	f7ff bb95 	b.w	800abce <_dtoa_r+0x4c2>
 800b4a4:	2400      	movs	r4, #0
 800b4a6:	46a2      	mov	sl, r4
 800b4a8:	e476      	b.n	800ad98 <_dtoa_r+0x68c>
 800b4aa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800b4ac:	2c00      	cmp	r4, #0
 800b4ae:	d05a      	beq.n	800b566 <_dtoa_r+0xe5a>
 800b4b0:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800b4b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b4b6:	3303      	adds	r3, #3
 800b4b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b4ba:	e44c      	b.n	800ad56 <_dtoa_r+0x64a>
 800b4bc:	08026da0 	.word	0x08026da0
 800b4c0:	08026e90 	.word	0x08026e90
 800b4c4:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800b4c8:	46a8      	mov	r8, r5
 800b4ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b4cc:	f7ff bb24 	b.w	800ab18 <_dtoa_r+0x40c>
 800b4d0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b4d2:	1c72      	adds	r2, r6, #1
 800b4d4:	930a      	str	r3, [sp, #40]	; 0x28
 800b4d6:	b2d2      	uxtb	r2, r2
 800b4d8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b4dc:	9406      	str	r4, [sp, #24]
 800b4de:	f7ff bbf5 	b.w	800accc <_dtoa_r+0x5c0>
 800b4e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	1b45      	subs	r5, r0, r5
 800b4e8:	e435      	b.n	800ad56 <_dtoa_r+0x64a>
 800b4ea:	f1bb 0f00 	cmp.w	fp, #0
 800b4ee:	940f      	str	r4, [sp, #60]	; 0x3c
 800b4f0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b4f4:	9c02      	ldr	r4, [sp, #8]
 800b4f6:	dd10      	ble.n	800b51a <_dtoa_r+0xe0e>
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b4fc:	4648      	mov	r0, r9
 800b4fe:	f000 fecb 	bl	800c298 <__lshift>
 800b502:	4621      	mov	r1, r4
 800b504:	900f      	str	r0, [sp, #60]	; 0x3c
 800b506:	f000 ff27 	bl	800c358 <__mcmp>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	dd5e      	ble.n	800b5cc <_dtoa_r+0xec0>
 800b50e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b512:	d046      	beq.n	800b5a2 <_dtoa_r+0xe96>
 800b514:	9b08      	ldr	r3, [sp, #32]
 800b516:	f103 0831 	add.w	r8, r3, #49	; 0x31
 800b51a:	9b07      	ldr	r3, [sp, #28]
 800b51c:	46b2      	mov	sl, r6
 800b51e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b520:	f803 8b01 	strb.w	r8, [r3], #1
 800b524:	930a      	str	r3, [sp, #40]	; 0x28
 800b526:	f7ff bbbb 	b.w	800aca0 <_dtoa_r+0x594>
 800b52a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b52c:	3201      	adds	r2, #1
 800b52e:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b532:	930a      	str	r3, [sp, #40]	; 0x28
 800b534:	f7ff bbb4 	b.w	800aca0 <_dtoa_r+0x594>
 800b538:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b53c:	4648      	mov	r0, r9
 800b53e:	f000 fcb1 	bl	800bea4 <_Balloc>
 800b542:	f8da 2010 	ldr.w	r2, [sl, #16]
 800b546:	f10a 010c 	add.w	r1, sl, #12
 800b54a:	3202      	adds	r2, #2
 800b54c:	0092      	lsls	r2, r2, #2
 800b54e:	4605      	mov	r5, r0
 800b550:	f100 000c 	add.w	r0, r0, #12
 800b554:	f7fc f8e4 	bl	8007720 <memcpy>
 800b558:	4648      	mov	r0, r9
 800b55a:	4629      	mov	r1, r5
 800b55c:	2201      	movs	r2, #1
 800b55e:	f000 fe9b 	bl	800c298 <__lshift>
 800b562:	4606      	mov	r6, r0
 800b564:	e5df      	b.n	800b126 <_dtoa_r+0xa1a>
 800b566:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b568:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b56a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b56c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b570:	f7ff bbf1 	b.w	800ad56 <_dtoa_r+0x64a>
 800b574:	940f      	str	r4, [sp, #60]	; 0x3c
 800b576:	46b2      	mov	sl, r6
 800b578:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b57c:	9c02      	ldr	r4, [sp, #8]
 800b57e:	e736      	b.n	800b3ee <_dtoa_r+0xce2>
 800b580:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b584:	940f      	str	r4, [sp, #60]	; 0x3c
 800b586:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b58a:	9c02      	ldr	r4, [sp, #8]
 800b58c:	d009      	beq.n	800b5a2 <_dtoa_r+0xe96>
 800b58e:	9b07      	ldr	r3, [sp, #28]
 800b590:	f108 0801 	add.w	r8, r8, #1
 800b594:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b596:	46b2      	mov	sl, r6
 800b598:	f803 8b01 	strb.w	r8, [r3], #1
 800b59c:	930a      	str	r3, [sp, #40]	; 0x28
 800b59e:	f7ff bb7f 	b.w	800aca0 <_dtoa_r+0x594>
 800b5a2:	9d07      	ldr	r5, [sp, #28]
 800b5a4:	2339      	movs	r3, #57	; 0x39
 800b5a6:	46b2      	mov	sl, r6
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	f805 3b01 	strb.w	r3, [r5], #1
 800b5ae:	e72b      	b.n	800b408 <_dtoa_r+0xcfc>
 800b5b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b5b4:	940f      	str	r4, [sp, #60]	; 0x3c
 800b5b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b5ba:	9c02      	ldr	r4, [sp, #8]
 800b5bc:	d0f1      	beq.n	800b5a2 <_dtoa_r+0xe96>
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	dca8      	bgt.n	800b514 <_dtoa_r+0xe08>
 800b5c2:	e7aa      	b.n	800b51a <_dtoa_r+0xe0e>
 800b5c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b5c6:	940a      	str	r4, [sp, #40]	; 0x28
 800b5c8:	f7ff bb80 	b.w	800accc <_dtoa_r+0x5c0>
 800b5cc:	d1a5      	bne.n	800b51a <_dtoa_r+0xe0e>
 800b5ce:	f018 0f01 	tst.w	r8, #1
 800b5d2:	d0a2      	beq.n	800b51a <_dtoa_r+0xe0e>
 800b5d4:	e79b      	b.n	800b50e <_dtoa_r+0xe02>
 800b5d6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b5d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b5da:	9406      	str	r4, [sp, #24]
 800b5dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b5de:	940a      	str	r4, [sp, #40]	; 0x28
 800b5e0:	f7ff bb74 	b.w	800accc <_dtoa_r+0x5c0>
 800b5e4:	4651      	mov	r1, sl
 800b5e6:	220a      	movs	r2, #10
 800b5e8:	4648      	mov	r0, r9
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f000 fc8a 	bl	800bf04 <__multadd>
 800b5f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b5f2:	920e      	str	r2, [sp, #56]	; 0x38
 800b5f4:	4682      	mov	sl, r0
 800b5f6:	f7ff bb2a 	b.w	800ac4e <_dtoa_r+0x542>
 800b5fa:	bf18      	it	ne
 800b5fc:	f1c3 033c 	rsbne	r3, r3, #60	; 0x3c
 800b600:	f43f ab10 	beq.w	800ac24 <_dtoa_r+0x518>
 800b604:	e577      	b.n	800b0f6 <_dtoa_r+0x9ea>
 800b606:	bf00      	nop

0800b608 <_fflush_r>:
 800b608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60c:	4680      	mov	r8, r0
 800b60e:	460c      	mov	r4, r1
 800b610:	b110      	cbz	r0, 800b618 <_fflush_r+0x10>
 800b612:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b614:	2b00      	cmp	r3, #0
 800b616:	d066      	beq.n	800b6e6 <_fflush_r+0xde>
 800b618:	89a6      	ldrh	r6, [r4, #12]
 800b61a:	2e00      	cmp	r6, #0
 800b61c:	d060      	beq.n	800b6e0 <_fflush_r+0xd8>
 800b61e:	b233      	sxth	r3, r6
 800b620:	f013 0008 	ands.w	r0, r3, #8
 800b624:	d01e      	beq.n	800b664 <_fflush_r+0x5c>
 800b626:	6926      	ldr	r6, [r4, #16]
 800b628:	2e00      	cmp	r6, #0
 800b62a:	f000 8088 	beq.w	800b73e <_fflush_r+0x136>
 800b62e:	079b      	lsls	r3, r3, #30
 800b630:	6825      	ldr	r5, [r4, #0]
 800b632:	6026      	str	r6, [r4, #0]
 800b634:	bf08      	it	eq
 800b636:	6963      	ldreq	r3, [r4, #20]
 800b638:	ebc6 0505 	rsb	r5, r6, r5
 800b63c:	bf18      	it	ne
 800b63e:	2300      	movne	r3, #0
 800b640:	60a3      	str	r3, [r4, #8]
 800b642:	e00a      	b.n	800b65a <_fflush_r+0x52>
 800b644:	4632      	mov	r2, r6
 800b646:	462b      	mov	r3, r5
 800b648:	69e1      	ldr	r1, [r4, #28]
 800b64a:	4640      	mov	r0, r8
 800b64c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800b64e:	47b8      	blx	r7
 800b650:	2800      	cmp	r0, #0
 800b652:	ebc0 0505 	rsb	r5, r0, r5
 800b656:	4406      	add	r6, r0
 800b658:	dd65      	ble.n	800b726 <_fflush_r+0x11e>
 800b65a:	2d00      	cmp	r5, #0
 800b65c:	dcf2      	bgt.n	800b644 <_fflush_r+0x3c>
 800b65e:	2000      	movs	r0, #0
 800b660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b664:	6862      	ldr	r2, [r4, #4]
 800b666:	f446 6300 	orr.w	r3, r6, #2048	; 0x800
 800b66a:	81a3      	strh	r3, [r4, #12]
 800b66c:	2a00      	cmp	r2, #0
 800b66e:	dd62      	ble.n	800b736 <_fflush_r+0x12e>
 800b670:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b672:	2e00      	cmp	r6, #0
 800b674:	d063      	beq.n	800b73e <_fflush_r+0x136>
 800b676:	b29b      	uxth	r3, r3
 800b678:	2200      	movs	r2, #0
 800b67a:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 800b67e:	f8d8 5000 	ldr.w	r5, [r8]
 800b682:	f8c8 2000 	str.w	r2, [r8]
 800b686:	bf18      	it	ne
 800b688:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800b68a:	d033      	beq.n	800b6f4 <_fflush_r+0xec>
 800b68c:	0759      	lsls	r1, r3, #29
 800b68e:	d505      	bpl.n	800b69c <_fflush_r+0x94>
 800b690:	6861      	ldr	r1, [r4, #4]
 800b692:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b694:	1a52      	subs	r2, r2, r1
 800b696:	b10b      	cbz	r3, 800b69c <_fflush_r+0x94>
 800b698:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b69a:	1ad2      	subs	r2, r2, r3
 800b69c:	2300      	movs	r3, #0
 800b69e:	69e1      	ldr	r1, [r4, #28]
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	47b0      	blx	r6
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d030      	beq.n	800b70a <_fflush_r+0x102>
 800b6a8:	89a3      	ldrh	r3, [r4, #12]
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6b2:	6061      	str	r1, [r4, #4]
 800b6b4:	041b      	lsls	r3, r3, #16
 800b6b6:	6022      	str	r2, [r4, #0]
 800b6b8:	0c1b      	lsrs	r3, r3, #16
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	04d9      	lsls	r1, r3, #19
 800b6be:	d415      	bmi.n	800b6ec <_fflush_r+0xe4>
 800b6c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b6c2:	f8c8 5000 	str.w	r5, [r8]
 800b6c6:	2900      	cmp	r1, #0
 800b6c8:	d042      	beq.n	800b750 <_fflush_r+0x148>
 800b6ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b6ce:	4299      	cmp	r1, r3
 800b6d0:	d002      	beq.n	800b6d8 <_fflush_r+0xd0>
 800b6d2:	4640      	mov	r0, r8
 800b6d4:	f000 fa1e 	bl	800bb14 <_free_r>
 800b6d8:	2000      	movs	r0, #0
 800b6da:	6320      	str	r0, [r4, #48]	; 0x30
 800b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e6:	f000 f8b1 	bl	800b84c <__sinit>
 800b6ea:	e795      	b.n	800b618 <_fflush_r+0x10>
 800b6ec:	1c42      	adds	r2, r0, #1
 800b6ee:	d029      	beq.n	800b744 <_fflush_r+0x13c>
 800b6f0:	6520      	str	r0, [r4, #80]	; 0x50
 800b6f2:	e7e5      	b.n	800b6c0 <_fflush_r+0xb8>
 800b6f4:	463a      	mov	r2, r7
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	69e1      	ldr	r1, [r4, #28]
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	47b0      	blx	r6
 800b6fe:	1c43      	adds	r3, r0, #1
 800b700:	4602      	mov	r2, r0
 800b702:	d028      	beq.n	800b756 <_fflush_r+0x14e>
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b708:	e7c0      	b.n	800b68c <_fflush_r+0x84>
 800b70a:	f8d8 3000 	ldr.w	r3, [r8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d0ca      	beq.n	800b6a8 <_fflush_r+0xa0>
 800b712:	2b1d      	cmp	r3, #29
 800b714:	d0c8      	beq.n	800b6a8 <_fflush_r+0xa0>
 800b716:	2b16      	cmp	r3, #22
 800b718:	d0c6      	beq.n	800b6a8 <_fflush_r+0xa0>
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b720:	81a3      	strh	r3, [r4, #12]
 800b722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	f04f 30ff 	mov.w	r0, #4294967295
 800b72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b730:	81a3      	strh	r3, [r4, #12]
 800b732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b736:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b738:	2a00      	cmp	r2, #0
 800b73a:	dc99      	bgt.n	800b670 <_fflush_r+0x68>
 800b73c:	e7d1      	b.n	800b6e2 <_fflush_r+0xda>
 800b73e:	4630      	mov	r0, r6
 800b740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b744:	f8d8 3000 	ldr.w	r3, [r8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1b9      	bne.n	800b6c0 <_fflush_r+0xb8>
 800b74c:	6520      	str	r0, [r4, #80]	; 0x50
 800b74e:	e7b7      	b.n	800b6c0 <_fflush_r+0xb8>
 800b750:	4608      	mov	r0, r1
 800b752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b756:	f8d8 3000 	ldr.w	r3, [r8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d0d2      	beq.n	800b704 <_fflush_r+0xfc>
 800b75e:	f1a3 001d 	sub.w	r0, r3, #29
 800b762:	4241      	negs	r1, r0
 800b764:	eb41 0100 	adc.w	r1, r1, r0
 800b768:	2b16      	cmp	r3, #22
 800b76a:	bf14      	ite	ne
 800b76c:	460b      	movne	r3, r1
 800b76e:	f041 0301 	orreq.w	r3, r1, #1
 800b772:	b123      	cbz	r3, 800b77e <_fflush_r+0x176>
 800b774:	f8c8 5000 	str.w	r5, [r8]
 800b778:	4638      	mov	r0, r7
 800b77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	4610      	mov	r0, r2
 800b782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b78c <fflush>:
 800b78c:	4601      	mov	r1, r0
 800b78e:	b110      	cbz	r0, 800b796 <fflush+0xa>
 800b790:	4b03      	ldr	r3, [pc, #12]	; (800b7a0 <fflush+0x14>)
 800b792:	6818      	ldr	r0, [r3, #0]
 800b794:	e738      	b.n	800b608 <_fflush_r>
 800b796:	4b03      	ldr	r3, [pc, #12]	; (800b7a4 <fflush+0x18>)
 800b798:	4903      	ldr	r1, [pc, #12]	; (800b7a8 <fflush+0x1c>)
 800b79a:	6818      	ldr	r0, [r3, #0]
 800b79c:	f000 baa2 	b.w	800bce4 <_fwalk_reent>
 800b7a0:	20000008 	.word	0x20000008
 800b7a4:	08026d4c 	.word	0x08026d4c
 800b7a8:	0800b609 	.word	0x0800b609

0800b7ac <__fp_lock>:
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	4770      	bx	lr

0800b7b0 <__fp_unlock>:
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	4770      	bx	lr

0800b7b4 <_cleanup_r>:
 800b7b4:	f24d 416d 	movw	r1, #54381	; 0xd46d
 800b7b8:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b7bc:	f000 ba6c 	b.w	800bc98 <_fwalk>

0800b7c0 <std.isra.0>:
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	460e      	mov	r6, r1
 800b7c8:	4615      	mov	r5, r2
 800b7ca:	6023      	str	r3, [r4, #0]
 800b7cc:	6063      	str	r3, [r4, #4]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	60a3      	str	r3, [r4, #8]
 800b7d2:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 800b7d6:	6663      	str	r3, [r4, #100]	; 0x64
 800b7d8:	2208      	movs	r2, #8
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	6163      	str	r3, [r4, #20]
 800b7de:	61a3      	str	r3, [r4, #24]
 800b7e0:	81a6      	strh	r6, [r4, #12]
 800b7e2:	81e5      	strh	r5, [r4, #14]
 800b7e4:	f7fc f842 	bl	800786c <memset>
 800b7e8:	f24c 73fd 	movw	r3, #51197	; 0xc7fd
 800b7ec:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b7f0:	6223      	str	r3, [r4, #32]
 800b7f2:	f64c 0325 	movw	r3, #51237	; 0xc825
 800b7f6:	61e4      	str	r4, [r4, #28]
 800b7f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b7fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b7fe:	f64c 035d 	movw	r3, #51293	; 0xc85d
 800b802:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b806:	62a3      	str	r3, [r4, #40]	; 0x28
 800b808:	f64c 0381 	movw	r3, #51329	; 0xc881
 800b80c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b810:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b812:	bd70      	pop	{r4, r5, r6, pc}

0800b814 <__sfmoreglue>:
 800b814:	b570      	push	{r4, r5, r6, lr}
 800b816:	2568      	movs	r5, #104	; 0x68
 800b818:	460e      	mov	r6, r1
 800b81a:	fb05 f501 	mul.w	r5, r5, r1
 800b81e:	f105 010c 	add.w	r1, r5, #12
 800b822:	f7fb fc57 	bl	80070d4 <_malloc_r>
 800b826:	4604      	mov	r4, r0
 800b828:	b140      	cbz	r0, 800b83c <__sfmoreglue+0x28>
 800b82a:	2100      	movs	r1, #0
 800b82c:	f100 000c 	add.w	r0, r0, #12
 800b830:	e884 0042 	stmia.w	r4, {r1, r6}
 800b834:	462a      	mov	r2, r5
 800b836:	60a0      	str	r0, [r4, #8]
 800b838:	f7fc f818 	bl	800786c <memset>
 800b83c:	4620      	mov	r0, r4
 800b83e:	bd70      	pop	{r4, r5, r6, pc}

0800b840 <_cleanup>:
 800b840:	f646 534c 	movw	r3, #27980	; 0x6d4c
 800b844:	f6c0 0302 	movt	r3, #2050	; 0x802
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	e7b3      	b.n	800b7b4 <_cleanup_r>

0800b84c <__sinit>:
 800b84c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b84e:	b570      	push	{r4, r5, r6, lr}
 800b850:	4604      	mov	r4, r0
 800b852:	b103      	cbz	r3, 800b856 <__sinit+0xa>
 800b854:	bd70      	pop	{r4, r5, r6, pc}
 800b856:	4e0e      	ldr	r6, [pc, #56]	; (800b890 <__sinit+0x44>)
 800b858:	2501      	movs	r5, #1
 800b85a:	2104      	movs	r1, #4
 800b85c:	461a      	mov	r2, r3
 800b85e:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 800b862:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800b866:	63e6      	str	r6, [r4, #60]	; 0x3c
 800b868:	2603      	movs	r6, #3
 800b86a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800b86e:	6840      	ldr	r0, [r0, #4]
 800b870:	63a5      	str	r5, [r4, #56]	; 0x38
 800b872:	f8c4 62e4 	str.w	r6, [r4, #740]	; 0x2e4
 800b876:	f7ff ffa3 	bl	800b7c0 <std.isra.0>
 800b87a:	68a0      	ldr	r0, [r4, #8]
 800b87c:	2109      	movs	r1, #9
 800b87e:	462a      	mov	r2, r5
 800b880:	f7ff ff9e 	bl	800b7c0 <std.isra.0>
 800b884:	68e0      	ldr	r0, [r4, #12]
 800b886:	2112      	movs	r1, #18
 800b888:	2202      	movs	r2, #2
 800b88a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b88e:	e797      	b.n	800b7c0 <std.isra.0>
 800b890:	0800b7b5 	.word	0x0800b7b5

0800b894 <__sfp>:
 800b894:	4b25      	ldr	r3, [pc, #148]	; (800b92c <__sfp+0x98>)
 800b896:	b570      	push	{r4, r5, r6, lr}
 800b898:	4606      	mov	r6, r0
 800b89a:	681d      	ldr	r5, [r3, #0]
 800b89c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d034      	beq.n	800b90c <__sfp+0x78>
 800b8a2:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800b8a6:	686b      	ldr	r3, [r5, #4]
 800b8a8:	68a9      	ldr	r1, [r5, #8]
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	d411      	bmi.n	800b8d2 <__sfp+0x3e>
 800b8ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	b18a      	cbz	r2, 800b8da <__sfp+0x46>
 800b8b6:	f101 0068 	add.w	r0, r1, #104	; 0x68
 800b8ba:	e002      	b.n	800b8c2 <__sfp+0x2e>
 800b8bc:	f932 2c5c 	ldrsh.w	r2, [r2, #-92]
 800b8c0:	b15a      	cbz	r2, 800b8da <__sfp+0x46>
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	3468      	adds	r4, #104	; 0x68
 800b8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ca:	ebc1 0204 	rsb	r2, r1, r4
 800b8ce:	4402      	add	r2, r0
 800b8d0:	d1f4      	bne.n	800b8bc <__sfp+0x28>
 800b8d2:	6828      	ldr	r0, [r5, #0]
 800b8d4:	b1f0      	cbz	r0, 800b914 <__sfp+0x80>
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	e7e5      	b.n	800b8a6 <__sfp+0x12>
 800b8da:	2500      	movs	r5, #0
 800b8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8e4:	81e3      	strh	r3, [r4, #14]
 800b8e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	6025      	str	r5, [r4, #0]
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	81a3      	strh	r3, [r4, #12]
 800b8f0:	2208      	movs	r2, #8
 800b8f2:	60a5      	str	r5, [r4, #8]
 800b8f4:	6065      	str	r5, [r4, #4]
 800b8f6:	6125      	str	r5, [r4, #16]
 800b8f8:	6165      	str	r5, [r4, #20]
 800b8fa:	61a5      	str	r5, [r4, #24]
 800b8fc:	f7fb ffb6 	bl	800786c <memset>
 800b900:	6325      	str	r5, [r4, #48]	; 0x30
 800b902:	6365      	str	r5, [r4, #52]	; 0x34
 800b904:	6465      	str	r5, [r4, #68]	; 0x44
 800b906:	64a5      	str	r5, [r4, #72]	; 0x48
 800b908:	4620      	mov	r0, r4
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	4628      	mov	r0, r5
 800b90e:	f7ff ff9d 	bl	800b84c <__sinit>
 800b912:	e7c6      	b.n	800b8a2 <__sfp+0xe>
 800b914:	4630      	mov	r0, r6
 800b916:	2104      	movs	r1, #4
 800b918:	f7ff ff7c 	bl	800b814 <__sfmoreglue>
 800b91c:	6028      	str	r0, [r5, #0]
 800b91e:	2800      	cmp	r0, #0
 800b920:	d1d9      	bne.n	800b8d6 <__sfp+0x42>
 800b922:	230c      	movs	r3, #12
 800b924:	4604      	mov	r4, r0
 800b926:	6033      	str	r3, [r6, #0]
 800b928:	e7ee      	b.n	800b908 <__sfp+0x74>
 800b92a:	bf00      	nop
 800b92c:	08026d4c 	.word	0x08026d4c

0800b930 <__sfp_lock_acquire>:
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop

0800b934 <__sfp_lock_release>:
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop

0800b938 <__sinit_lock_acquire>:
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop

0800b93c <__sinit_lock_release>:
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop

0800b940 <__fp_lock_all>:
 800b940:	f240 0308 	movw	r3, #8
 800b944:	f24b 71ad 	movw	r1, #47021	; 0xb7ad
 800b948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b94c:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b950:	6818      	ldr	r0, [r3, #0]
 800b952:	f000 b9a1 	b.w	800bc98 <_fwalk>
 800b956:	bf00      	nop

0800b958 <__fp_unlock_all>:
 800b958:	f240 0308 	movw	r3, #8
 800b95c:	f24b 71b1 	movw	r1, #47025	; 0xb7b1
 800b960:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b964:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	f000 b995 	b.w	800bc98 <_fwalk>
 800b96e:	bf00      	nop

0800b970 <_fputwc_r>:
 800b970:	8993      	ldrh	r3, [r2, #12]
 800b972:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b976:	4614      	mov	r4, r2
 800b978:	049a      	lsls	r2, r3, #18
 800b97a:	b083      	sub	sp, #12
 800b97c:	bf5e      	ittt	pl
 800b97e:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 800b982:	81a3      	strhpl	r3, [r4, #12]
 800b984:	6e62      	ldrpl	r2, [r4, #100]	; 0x64
 800b986:	4607      	mov	r7, r0
 800b988:	460e      	mov	r6, r1
 800b98a:	bf5c      	itt	pl
 800b98c:	f442 5300 	orrpl.w	r3, r2, #8192	; 0x2000
 800b990:	6663      	strpl	r3, [r4, #100]	; 0x64
 800b992:	f000 f9f9 	bl	800bd88 <__locale_mb_cur_max>
 800b996:	2801      	cmp	r0, #1
 800b998:	d04b      	beq.n	800ba32 <_fputwc_r+0xc2>
 800b99a:	ad01      	add	r5, sp, #4
 800b99c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	f001 fc6f 	bl	800d288 <_wcrtomb_r>
 800b9aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b9ae:	4681      	mov	r9, r0
 800b9b0:	d028      	beq.n	800ba04 <_fputwc_r+0x94>
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d03b      	beq.n	800ba2e <_fputwc_r+0xbe>
 800b9b6:	f04f 0800 	mov.w	r8, #0
 800b9ba:	e00a      	b.n	800b9d2 <_fputwc_r+0x62>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	f815 2008 	ldrb.w	r2, [r5, r8]
 800b9c2:	701a      	strb	r2, [r3, #0]
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	f108 0801 	add.w	r8, r8, #1
 800b9ce:	45c8      	cmp	r8, r9
 800b9d0:	d22d      	bcs.n	800ba2e <_fputwc_r+0xbe>
 800b9d2:	68a3      	ldr	r3, [r4, #8]
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	60a3      	str	r3, [r4, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	daef      	bge.n	800b9bc <_fputwc_r+0x4c>
 800b9dc:	69a2      	ldr	r2, [r4, #24]
 800b9de:	2000      	movs	r0, #0
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	db16      	blt.n	800ba12 <_fputwc_r+0xa2>
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	f815 2008 	ldrb.w	r2, [r5, r8]
 800b9ea:	701a      	strb	r2, [r3, #0]
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	7819      	ldrb	r1, [r3, #0]
 800b9f2:	290a      	cmp	r1, #10
 800b9f4:	bf18      	it	ne
 800b9f6:	6022      	strne	r2, [r4, #0]
 800b9f8:	d00d      	beq.n	800ba16 <_fputwc_r+0xa6>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d0e5      	beq.n	800b9ca <_fputwc_r+0x5a>
 800b9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ba02:	e003      	b.n	800ba0c <_fputwc_r+0x9c>
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba0a:	81a3      	strh	r3, [r4, #12]
 800ba0c:	b003      	add	sp, #12
 800ba0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba12:	f815 1008 	ldrb.w	r1, [r5, r8]
 800ba16:	4638      	mov	r0, r7
 800ba18:	4622      	mov	r2, r4
 800ba1a:	f7fe fc4f 	bl	800a2bc <__swbuf_r>
 800ba1e:	f1a0 33ff 	sub.w	r3, r0, #4294967295
 800ba22:	4258      	negs	r0, r3
 800ba24:	eb40 0003 	adc.w	r0, r0, r3
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d0ce      	beq.n	800b9ca <_fputwc_r+0x5a>
 800ba2c:	e7e7      	b.n	800b9fe <_fputwc_r+0x8e>
 800ba2e:	4630      	mov	r0, r6
 800ba30:	e7ec      	b.n	800ba0c <_fputwc_r+0x9c>
 800ba32:	1c33      	adds	r3, r6, #0
 800ba34:	bf18      	it	ne
 800ba36:	2301      	movne	r3, #1
 800ba38:	2eff      	cmp	r6, #255	; 0xff
 800ba3a:	bf8c      	ite	hi
 800ba3c:	2300      	movhi	r3, #0
 800ba3e:	f003 0301 	andls.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0a9      	beq.n	800b99a <_fputwc_r+0x2a>
 800ba46:	ad02      	add	r5, sp, #8
 800ba48:	4681      	mov	r9, r0
 800ba4a:	f805 6d04 	strb.w	r6, [r5, #-4]!
 800ba4e:	e7b2      	b.n	800b9b6 <_fputwc_r+0x46>

0800ba50 <fputwc>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	4606      	mov	r6, r0
 800ba54:	4c06      	ldr	r4, [pc, #24]	; (800ba70 <fputwc+0x20>)
 800ba56:	460d      	mov	r5, r1
 800ba58:	6820      	ldr	r0, [r4, #0]
 800ba5a:	b120      	cbz	r0, 800ba66 <fputwc+0x16>
 800ba5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba5e:	b913      	cbnz	r3, 800ba66 <fputwc+0x16>
 800ba60:	f7ff fef4 	bl	800b84c <__sinit>
 800ba64:	6820      	ldr	r0, [r4, #0]
 800ba66:	4631      	mov	r1, r6
 800ba68:	462a      	mov	r2, r5
 800ba6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba6e:	e77f      	b.n	800b970 <_fputwc_r>
 800ba70:	20000008 	.word	0x20000008

0800ba74 <_malloc_trim_r>:
 800ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba76:	4604      	mov	r4, r0
 800ba78:	4d23      	ldr	r5, [pc, #140]	; (800bb08 <_malloc_trim_r+0x94>)
 800ba7a:	460f      	mov	r7, r1
 800ba7c:	f018 fd0e 	bl	802449c <__malloc_lock>
 800ba80:	4620      	mov	r0, r4
 800ba82:	68ab      	ldr	r3, [r5, #8]
 800ba84:	685e      	ldr	r6, [r3, #4]
 800ba86:	f026 0603 	bic.w	r6, r6, #3
 800ba8a:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 800ba8e:	330f      	adds	r3, #15
 800ba90:	1bdf      	subs	r7, r3, r7
 800ba92:	0b3f      	lsrs	r7, r7, #12
 800ba94:	3f01      	subs	r7, #1
 800ba96:	033f      	lsls	r7, r7, #12
 800ba98:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800ba9c:	db1c      	blt.n	800bad8 <_malloc_trim_r+0x64>
 800ba9e:	2100      	movs	r1, #0
 800baa0:	f018 fc92 	bl	80243c8 <_sbrk_r>
 800baa4:	68ab      	ldr	r3, [r5, #8]
 800baa6:	199b      	adds	r3, r3, r6
 800baa8:	4298      	cmp	r0, r3
 800baaa:	d019      	beq.n	800bae0 <_malloc_trim_r+0x6c>
 800baac:	4620      	mov	r0, r4
 800baae:	f018 fcff 	bl	80244b0 <__malloc_unlock>
 800bab2:	2000      	movs	r0, #0
 800bab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bab6:	2100      	movs	r1, #0
 800bab8:	4620      	mov	r0, r4
 800baba:	f018 fc85 	bl	80243c8 <_sbrk_r>
 800babe:	68ab      	ldr	r3, [r5, #8]
 800bac0:	1ac2      	subs	r2, r0, r3
 800bac2:	2a0f      	cmp	r2, #15
 800bac4:	dd07      	ble.n	800bad6 <_malloc_trim_r+0x62>
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	605a      	str	r2, [r3, #4]
 800bacc:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <_malloc_trim_r+0x98>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	1ac0      	subs	r0, r0, r3
 800bad2:	4b0f      	ldr	r3, [pc, #60]	; (800bb10 <_malloc_trim_r+0x9c>)
 800bad4:	6018      	str	r0, [r3, #0]
 800bad6:	4620      	mov	r0, r4
 800bad8:	f018 fcea 	bl	80244b0 <__malloc_unlock>
 800badc:	2000      	movs	r0, #0
 800bade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bae0:	4279      	negs	r1, r7
 800bae2:	4620      	mov	r0, r4
 800bae4:	f018 fc70 	bl	80243c8 <_sbrk_r>
 800bae8:	3001      	adds	r0, #1
 800baea:	d0e4      	beq.n	800bab6 <_malloc_trim_r+0x42>
 800baec:	4b08      	ldr	r3, [pc, #32]	; (800bb10 <_malloc_trim_r+0x9c>)
 800baee:	1bf6      	subs	r6, r6, r7
 800baf0:	68a9      	ldr	r1, [r5, #8]
 800baf2:	4620      	mov	r0, r4
 800baf4:	f046 0601 	orr.w	r6, r6, #1
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	604e      	str	r6, [r1, #4]
 800bafc:	1bd7      	subs	r7, r2, r7
 800bafe:	601f      	str	r7, [r3, #0]
 800bb00:	f018 fcd6 	bl	80244b0 <__malloc_unlock>
 800bb04:	2001      	movs	r0, #1
 800bb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb08:	20000438 	.word	0x20000438
 800bb0c:	20000840 	.word	0x20000840
 800bb10:	20000970 	.word	0x20000970

0800bb14 <_free_r>:
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	460d      	mov	r5, r1
 800bb18:	4604      	mov	r4, r0
 800bb1a:	2900      	cmp	r1, #0
 800bb1c:	d06f      	beq.n	800bbfe <_free_r+0xea>
 800bb1e:	f018 fcbd 	bl	802449c <__malloc_lock>
 800bb22:	4e59      	ldr	r6, [pc, #356]	; (800bc88 <_free_r+0x174>)
 800bb24:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800bb28:	f1a5 0108 	sub.w	r1, r5, #8
 800bb2c:	f020 0301 	bic.w	r3, r0, #1
 800bb30:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800bb34:	18ca      	adds	r2, r1, r3
 800bb36:	4594      	cmp	ip, r2
 800bb38:	6857      	ldr	r7, [r2, #4]
 800bb3a:	f027 0703 	bic.w	r7, r7, #3
 800bb3e:	d07b      	beq.n	800bc38 <_free_r+0x124>
 800bb40:	f010 0001 	ands.w	r0, r0, #1
 800bb44:	6057      	str	r7, [r2, #4]
 800bb46:	d04a      	beq.n	800bbde <_free_r+0xca>
 800bb48:	2000      	movs	r0, #0
 800bb4a:	19d5      	adds	r5, r2, r7
 800bb4c:	686d      	ldr	r5, [r5, #4]
 800bb4e:	f015 0f01 	tst.w	r5, #1
 800bb52:	d106      	bne.n	800bb62 <_free_r+0x4e>
 800bb54:	19db      	adds	r3, r3, r7
 800bb56:	6895      	ldr	r5, [r2, #8]
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d061      	beq.n	800bc20 <_free_r+0x10c>
 800bb5c:	68d2      	ldr	r2, [r2, #12]
 800bb5e:	60ea      	str	r2, [r5, #12]
 800bb60:	6095      	str	r5, [r2, #8]
 800bb62:	f043 0201 	orr.w	r2, r3, #1
 800bb66:	50cb      	str	r3, [r1, r3]
 800bb68:	604a      	str	r2, [r1, #4]
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d132      	bne.n	800bbd4 <_free_r+0xc0>
 800bb6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb72:	d345      	bcc.n	800bc00 <_free_r+0xec>
 800bb74:	099d      	lsrs	r5, r3, #6
 800bb76:	0a5a      	lsrs	r2, r3, #9
 800bb78:	3538      	adds	r5, #56	; 0x38
 800bb7a:	00e8      	lsls	r0, r5, #3
 800bb7c:	2a04      	cmp	r2, #4
 800bb7e:	d916      	bls.n	800bbae <_free_r+0x9a>
 800bb80:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800bb84:	00e8      	lsls	r0, r5, #3
 800bb86:	2a14      	cmp	r2, #20
 800bb88:	d911      	bls.n	800bbae <_free_r+0x9a>
 800bb8a:	0b1d      	lsrs	r5, r3, #12
 800bb8c:	356e      	adds	r5, #110	; 0x6e
 800bb8e:	00e8      	lsls	r0, r5, #3
 800bb90:	2a54      	cmp	r2, #84	; 0x54
 800bb92:	d90c      	bls.n	800bbae <_free_r+0x9a>
 800bb94:	0bdd      	lsrs	r5, r3, #15
 800bb96:	3577      	adds	r5, #119	; 0x77
 800bb98:	00e8      	lsls	r0, r5, #3
 800bb9a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800bb9e:	d906      	bls.n	800bbae <_free_r+0x9a>
 800bba0:	f240 5054 	movw	r0, #1364	; 0x554
 800bba4:	4282      	cmp	r2, r0
 800bba6:	d86b      	bhi.n	800bc80 <_free_r+0x16c>
 800bba8:	0c9d      	lsrs	r5, r3, #18
 800bbaa:	357c      	adds	r5, #124	; 0x7c
 800bbac:	00e8      	lsls	r0, r5, #3
 800bbae:	1986      	adds	r6, r0, r6
 800bbb0:	4835      	ldr	r0, [pc, #212]	; (800bc88 <_free_r+0x174>)
 800bbb2:	68b2      	ldr	r2, [r6, #8]
 800bbb4:	42b2      	cmp	r2, r6
 800bbb6:	d103      	bne.n	800bbc0 <_free_r+0xac>
 800bbb8:	e059      	b.n	800bc6e <_free_r+0x15a>
 800bbba:	6892      	ldr	r2, [r2, #8]
 800bbbc:	4296      	cmp	r6, r2
 800bbbe:	d004      	beq.n	800bbca <_free_r+0xb6>
 800bbc0:	6850      	ldr	r0, [r2, #4]
 800bbc2:	f020 0003 	bic.w	r0, r0, #3
 800bbc6:	4283      	cmp	r3, r0
 800bbc8:	d3f7      	bcc.n	800bbba <_free_r+0xa6>
 800bbca:	68d3      	ldr	r3, [r2, #12]
 800bbcc:	60cb      	str	r3, [r1, #12]
 800bbce:	608a      	str	r2, [r1, #8]
 800bbd0:	60d1      	str	r1, [r2, #12]
 800bbd2:	6099      	str	r1, [r3, #8]
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bbda:	f018 bc69 	b.w	80244b0 <__malloc_unlock>
 800bbde:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800bbe2:	f106 0c08 	add.w	ip, r6, #8
 800bbe6:	1b49      	subs	r1, r1, r5
 800bbe8:	195b      	adds	r3, r3, r5
 800bbea:	688d      	ldr	r5, [r1, #8]
 800bbec:	4565      	cmp	r5, ip
 800bbee:	d03c      	beq.n	800bc6a <_free_r+0x156>
 800bbf0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800bbf4:	f8c5 c00c 	str.w	ip, [r5, #12]
 800bbf8:	f8cc 5008 	str.w	r5, [ip, #8]
 800bbfc:	e7a5      	b.n	800bb4a <_free_r+0x36>
 800bbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc00:	08db      	lsrs	r3, r3, #3
 800bc02:	2001      	movs	r0, #1
 800bc04:	6875      	ldr	r5, [r6, #4]
 800bc06:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800bc0a:	109b      	asrs	r3, r3, #2
 800bc0c:	fa10 f303 	lsls.w	r3, r0, r3
 800bc10:	60ca      	str	r2, [r1, #12]
 800bc12:	6890      	ldr	r0, [r2, #8]
 800bc14:	432b      	orrs	r3, r5
 800bc16:	6073      	str	r3, [r6, #4]
 800bc18:	6088      	str	r0, [r1, #8]
 800bc1a:	60c1      	str	r1, [r0, #12]
 800bc1c:	6091      	str	r1, [r2, #8]
 800bc1e:	e7d9      	b.n	800bbd4 <_free_r+0xc0>
 800bc20:	4f1a      	ldr	r7, [pc, #104]	; (800bc8c <_free_r+0x178>)
 800bc22:	42bd      	cmp	r5, r7
 800bc24:	d19a      	bne.n	800bb5c <_free_r+0x48>
 800bc26:	6171      	str	r1, [r6, #20]
 800bc28:	f043 0201 	orr.w	r2, r3, #1
 800bc2c:	6131      	str	r1, [r6, #16]
 800bc2e:	60cd      	str	r5, [r1, #12]
 800bc30:	608d      	str	r5, [r1, #8]
 800bc32:	604a      	str	r2, [r1, #4]
 800bc34:	50cb      	str	r3, [r1, r3]
 800bc36:	e7cd      	b.n	800bbd4 <_free_r+0xc0>
 800bc38:	07c2      	lsls	r2, r0, #31
 800bc3a:	443b      	add	r3, r7
 800bc3c:	d407      	bmi.n	800bc4e <_free_r+0x13a>
 800bc3e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800bc42:	1a89      	subs	r1, r1, r2
 800bc44:	189b      	adds	r3, r3, r2
 800bc46:	6888      	ldr	r0, [r1, #8]
 800bc48:	68ca      	ldr	r2, [r1, #12]
 800bc4a:	60c2      	str	r2, [r0, #12]
 800bc4c:	6090      	str	r0, [r2, #8]
 800bc4e:	f043 0201 	orr.w	r2, r3, #1
 800bc52:	604a      	str	r2, [r1, #4]
 800bc54:	4a0e      	ldr	r2, [pc, #56]	; (800bc90 <_free_r+0x17c>)
 800bc56:	60b1      	str	r1, [r6, #8]
 800bc58:	6812      	ldr	r2, [r2, #0]
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d3ba      	bcc.n	800bbd4 <_free_r+0xc0>
 800bc5e:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <_free_r+0x180>)
 800bc60:	4620      	mov	r0, r4
 800bc62:	6819      	ldr	r1, [r3, #0]
 800bc64:	f7ff ff06 	bl	800ba74 <_malloc_trim_r>
 800bc68:	e7b4      	b.n	800bbd4 <_free_r+0xc0>
 800bc6a:	2001      	movs	r0, #1
 800bc6c:	e76d      	b.n	800bb4a <_free_r+0x36>
 800bc6e:	2701      	movs	r7, #1
 800bc70:	6846      	ldr	r6, [r0, #4]
 800bc72:	10ad      	asrs	r5, r5, #2
 800bc74:	4613      	mov	r3, r2
 800bc76:	fa17 f505 	lsls.w	r5, r7, r5
 800bc7a:	4335      	orrs	r5, r6
 800bc7c:	6045      	str	r5, [r0, #4]
 800bc7e:	e7a5      	b.n	800bbcc <_free_r+0xb8>
 800bc80:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 800bc84:	257e      	movs	r5, #126	; 0x7e
 800bc86:	e792      	b.n	800bbae <_free_r+0x9a>
 800bc88:	20000438 	.word	0x20000438
 800bc8c:	20000440 	.word	0x20000440
 800bc90:	20000844 	.word	0x20000844
 800bc94:	2000096c 	.word	0x2000096c

0800bc98 <_fwalk>:
 800bc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	4688      	mov	r8, r1
 800bca0:	f7ff fe46 	bl	800b930 <__sfp_lock_acquire>
 800bca4:	f516 7638 	adds.w	r6, r6, #736	; 0x2e0
 800bca8:	bf08      	it	eq
 800bcaa:	4637      	moveq	r7, r6
 800bcac:	d015      	beq.n	800bcda <_fwalk+0x42>
 800bcae:	2700      	movs	r7, #0
 800bcb0:	6875      	ldr	r5, [r6, #4]
 800bcb2:	68b4      	ldr	r4, [r6, #8]
 800bcb4:	3d01      	subs	r5, #1
 800bcb6:	d40d      	bmi.n	800bcd4 <_fwalk+0x3c>
 800bcb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcbc:	3d01      	subs	r5, #1
 800bcbe:	b133      	cbz	r3, 800bcce <_fwalk+0x36>
 800bcc0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	d001      	beq.n	800bcce <_fwalk+0x36>
 800bcca:	47c0      	blx	r8
 800bccc:	4307      	orrs	r7, r0
 800bcce:	3468      	adds	r4, #104	; 0x68
 800bcd0:	1c6b      	adds	r3, r5, #1
 800bcd2:	d1f1      	bne.n	800bcb8 <_fwalk+0x20>
 800bcd4:	6836      	ldr	r6, [r6, #0]
 800bcd6:	2e00      	cmp	r6, #0
 800bcd8:	d1ea      	bne.n	800bcb0 <_fwalk+0x18>
 800bcda:	f7ff fe2b 	bl	800b934 <__sfp_lock_release>
 800bcde:	4638      	mov	r0, r7
 800bce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bce4 <_fwalk_reent>:
 800bce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce8:	4607      	mov	r7, r0
 800bcea:	4689      	mov	r9, r1
 800bcec:	f7ff fe20 	bl	800b930 <__sfp_lock_acquire>
 800bcf0:	f517 7638 	adds.w	r6, r7, #736	; 0x2e0
 800bcf4:	bf08      	it	eq
 800bcf6:	46b0      	moveq	r8, r6
 800bcf8:	d018      	beq.n	800bd2c <_fwalk_reent+0x48>
 800bcfa:	f04f 0800 	mov.w	r8, #0
 800bcfe:	6875      	ldr	r5, [r6, #4]
 800bd00:	68b4      	ldr	r4, [r6, #8]
 800bd02:	3d01      	subs	r5, #1
 800bd04:	d40f      	bmi.n	800bd26 <_fwalk_reent+0x42>
 800bd06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd0a:	3d01      	subs	r5, #1
 800bd0c:	b143      	cbz	r3, 800bd20 <_fwalk_reent+0x3c>
 800bd0e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800bd12:	4621      	mov	r1, r4
 800bd14:	4638      	mov	r0, r7
 800bd16:	3301      	adds	r3, #1
 800bd18:	d002      	beq.n	800bd20 <_fwalk_reent+0x3c>
 800bd1a:	47c8      	blx	r9
 800bd1c:	ea48 0800 	orr.w	r8, r8, r0
 800bd20:	3468      	adds	r4, #104	; 0x68
 800bd22:	1c6a      	adds	r2, r5, #1
 800bd24:	d1ef      	bne.n	800bd06 <_fwalk_reent+0x22>
 800bd26:	6836      	ldr	r6, [r6, #0]
 800bd28:	2e00      	cmp	r6, #0
 800bd2a:	d1e8      	bne.n	800bcfe <_fwalk_reent+0x1a>
 800bd2c:	f7ff fe02 	bl	800b934 <__sfp_lock_release>
 800bd30:	4640      	mov	r0, r8
 800bd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd36:	bf00      	nop

0800bd38 <_setlocale_r>:
 800bd38:	b510      	push	{r4, lr}
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	b122      	cbz	r2, 800bd48 <_setlocale_r+0x10>
 800bd3e:	4610      	mov	r0, r2
 800bd40:	490b      	ldr	r1, [pc, #44]	; (800bd70 <_setlocale_r+0x38>)
 800bd42:	f7fc f971 	bl	8008028 <strcmp>
 800bd46:	b908      	cbnz	r0, 800bd4c <_setlocale_r+0x14>
 800bd48:	480a      	ldr	r0, [pc, #40]	; (800bd74 <_setlocale_r+0x3c>)
 800bd4a:	bd10      	pop	{r4, pc}
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	4909      	ldr	r1, [pc, #36]	; (800bd74 <_setlocale_r+0x3c>)
 800bd50:	f7fc f96a 	bl	8008028 <strcmp>
 800bd54:	b908      	cbnz	r0, 800bd5a <_setlocale_r+0x22>
 800bd56:	4807      	ldr	r0, [pc, #28]	; (800bd74 <_setlocale_r+0x3c>)
 800bd58:	bd10      	pop	{r4, pc}
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	4906      	ldr	r1, [pc, #24]	; (800bd78 <_setlocale_r+0x40>)
 800bd5e:	f7fc f963 	bl	8008028 <strcmp>
 800bd62:	4b04      	ldr	r3, [pc, #16]	; (800bd74 <_setlocale_r+0x3c>)
 800bd64:	2800      	cmp	r0, #0
 800bd66:	bf0c      	ite	eq
 800bd68:	4618      	moveq	r0, r3
 800bd6a:	2000      	movne	r0, #0
 800bd6c:	bd10      	pop	{r4, pc}
 800bd6e:	bf00      	nop
 800bd70:	08028cb8 	.word	0x08028cb8
 800bd74:	08028c60 	.word	0x08028c60
 800bd78:	08028c2c 	.word	0x08028c2c

0800bd7c <__locale_charset>:
 800bd7c:	f640 0048 	movw	r0, #2120	; 0x848
 800bd80:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop

0800bd88 <__locale_mb_cur_max>:
 800bd88:	f640 0348 	movw	r3, #2120	; 0x848
 800bd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd90:	6a18      	ldr	r0, [r3, #32]
 800bd92:	4770      	bx	lr

0800bd94 <__locale_msgcharset>:
 800bd94:	4800      	ldr	r0, [pc, #0]	; (800bd98 <__locale_msgcharset+0x4>)
 800bd96:	4770      	bx	lr
 800bd98:	2000086c 	.word	0x2000086c

0800bd9c <__locale_cjk_lang>:
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	4770      	bx	lr

0800bda0 <_localeconv_r>:
 800bda0:	4800      	ldr	r0, [pc, #0]	; (800bda4 <_localeconv_r+0x4>)
 800bda2:	4770      	bx	lr
 800bda4:	2000088c 	.word	0x2000088c

0800bda8 <setlocale>:
 800bda8:	f240 0308 	movw	r3, #8
 800bdac:	460a      	mov	r2, r1
 800bdae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bdb2:	4601      	mov	r1, r0
 800bdb4:	6818      	ldr	r0, [r3, #0]
 800bdb6:	e7bf      	b.n	800bd38 <_setlocale_r>

0800bdb8 <localeconv>:
 800bdb8:	4800      	ldr	r0, [pc, #0]	; (800bdbc <localeconv+0x4>)
 800bdba:	4770      	bx	lr
 800bdbc:	2000088c 	.word	0x2000088c

0800bdc0 <__smakebuf_r>:
 800bdc0:	898b      	ldrh	r3, [r1, #12]
 800bdc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	b091      	sub	sp, #68	; 0x44
 800bdca:	0790      	lsls	r0, r2, #30
 800bdcc:	460c      	mov	r4, r1
 800bdce:	d439      	bmi.n	800be44 <__smakebuf_r+0x84>
 800bdd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd4:	2900      	cmp	r1, #0
 800bdd6:	db19      	blt.n	800be0c <__smakebuf_r+0x4c>
 800bdd8:	4628      	mov	r0, r5
 800bdda:	aa01      	add	r2, sp, #4
 800bddc:	f018 fac6 	bl	802436c <_fstat_r>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	db11      	blt.n	800be08 <__smakebuf_r+0x48>
 800bde4:	9b02      	ldr	r3, [sp, #8]
 800bde6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bdea:	f5a3 5100 	sub.w	r1, r3, #8192	; 0x2000
 800bdee:	424f      	negs	r7, r1
 800bdf0:	eb47 0701 	adc.w	r7, r7, r1
 800bdf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdf8:	d037      	beq.n	800be6a <__smakebuf_r+0xaa>
 800bdfa:	89a3      	ldrh	r3, [r4, #12]
 800bdfc:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800be00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	e00b      	b.n	800be20 <__smakebuf_r+0x60>
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800be10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be14:	bf14      	ite	ne
 800be16:	2640      	movne	r6, #64	; 0x40
 800be18:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800be1c:	2700      	movs	r7, #0
 800be1e:	81a3      	strh	r3, [r4, #12]
 800be20:	4628      	mov	r0, r5
 800be22:	4631      	mov	r1, r6
 800be24:	f7fb f956 	bl	80070d4 <_malloc_r>
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d029      	beq.n	800be82 <__smakebuf_r+0xc2>
 800be2e:	4a1b      	ldr	r2, [pc, #108]	; (800be9c <__smakebuf_r+0xdc>)
 800be30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be34:	63ea      	str	r2, [r5, #60]	; 0x3c
 800be36:	6020      	str	r0, [r4, #0]
 800be38:	81a3      	strh	r3, [r4, #12]
 800be3a:	6120      	str	r0, [r4, #16]
 800be3c:	6166      	str	r6, [r4, #20]
 800be3e:	b947      	cbnz	r7, 800be52 <__smakebuf_r+0x92>
 800be40:	b011      	add	sp, #68	; 0x44
 800be42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be44:	f101 0343 	add.w	r3, r1, #67	; 0x43
 800be48:	600b      	str	r3, [r1, #0]
 800be4a:	610b      	str	r3, [r1, #16]
 800be4c:	2301      	movs	r3, #1
 800be4e:	614b      	str	r3, [r1, #20]
 800be50:	e7f6      	b.n	800be40 <__smakebuf_r+0x80>
 800be52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be56:	4628      	mov	r0, r5
 800be58:	f018 faa8 	bl	80243ac <_isatty_r>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d0ef      	beq.n	800be40 <__smakebuf_r+0x80>
 800be60:	89a3      	ldrh	r3, [r4, #12]
 800be62:	f043 0301 	orr.w	r3, r3, #1
 800be66:	81a3      	strh	r3, [r4, #12]
 800be68:	e7ea      	b.n	800be40 <__smakebuf_r+0x80>
 800be6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800be6c:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <__smakebuf_r+0xe0>)
 800be6e:	429a      	cmp	r2, r3
 800be70:	d1c3      	bne.n	800bdfa <__smakebuf_r+0x3a>
 800be72:	89a2      	ldrh	r2, [r4, #12]
 800be74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be78:	461e      	mov	r6, r3
 800be7a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800be7c:	4313      	orrs	r3, r2
 800be7e:	81a3      	strh	r3, [r4, #12]
 800be80:	e7ce      	b.n	800be20 <__smakebuf_r+0x60>
 800be82:	059a      	lsls	r2, r3, #22
 800be84:	d4dc      	bmi.n	800be40 <__smakebuf_r+0x80>
 800be86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be8a:	f043 0302 	orr.w	r3, r3, #2
 800be8e:	6022      	str	r2, [r4, #0]
 800be90:	81a3      	strh	r3, [r4, #12]
 800be92:	2301      	movs	r3, #1
 800be94:	6122      	str	r2, [r4, #16]
 800be96:	6163      	str	r3, [r4, #20]
 800be98:	e7d2      	b.n	800be40 <__smakebuf_r+0x80>
 800be9a:	bf00      	nop
 800be9c:	0800b7b5 	.word	0x0800b7b5
 800bea0:	0800c85d 	.word	0x0800c85d

0800bea4 <_Balloc>:
 800bea4:	b538      	push	{r3, r4, r5, lr}
 800bea6:	4605      	mov	r5, r0
 800bea8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800beaa:	460c      	mov	r4, r1
 800beac:	b14b      	cbz	r3, 800bec2 <_Balloc+0x1e>
 800beae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800beb2:	b178      	cbz	r0, 800bed4 <_Balloc+0x30>
 800beb4:	6802      	ldr	r2, [r0, #0]
 800beb6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800beba:	2300      	movs	r3, #0
 800bebc:	6103      	str	r3, [r0, #16]
 800bebe:	60c3      	str	r3, [r0, #12]
 800bec0:	bd38      	pop	{r3, r4, r5, pc}
 800bec2:	2104      	movs	r1, #4
 800bec4:	2221      	movs	r2, #33	; 0x21
 800bec6:	f001 fa5b 	bl	800d380 <_calloc_r>
 800beca:	4603      	mov	r3, r0
 800becc:	64e8      	str	r0, [r5, #76]	; 0x4c
 800bece:	2800      	cmp	r0, #0
 800bed0:	d1ed      	bne.n	800beae <_Balloc+0xa>
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	2301      	movs	r3, #1
 800bed6:	4628      	mov	r0, r5
 800bed8:	4619      	mov	r1, r3
 800beda:	fa13 f504 	lsls.w	r5, r3, r4
 800bede:	1d6a      	adds	r2, r5, #5
 800bee0:	0092      	lsls	r2, r2, #2
 800bee2:	f001 fa4d 	bl	800d380 <_calloc_r>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d0f3      	beq.n	800bed2 <_Balloc+0x2e>
 800beea:	6044      	str	r4, [r0, #4]
 800beec:	6085      	str	r5, [r0, #8]
 800beee:	e7e4      	b.n	800beba <_Balloc+0x16>

0800bef0 <_Bfree>:
 800bef0:	b131      	cbz	r1, 800bf00 <_Bfree+0x10>
 800bef2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bef4:	684a      	ldr	r2, [r1, #4]
 800bef6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800befa:	6008      	str	r0, [r1, #0]
 800befc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop

0800bf04 <__multadd>:
 800bf04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf06:	460c      	mov	r4, r1
 800bf08:	4605      	mov	r5, r0
 800bf0a:	690e      	ldr	r6, [r1, #16]
 800bf0c:	f101 0014 	add.w	r0, r1, #20
 800bf10:	b083      	sub	sp, #12
 800bf12:	2100      	movs	r1, #0
 800bf14:	6807      	ldr	r7, [r0, #0]
 800bf16:	3101      	adds	r1, #1
 800bf18:	fa1f fc87 	uxth.w	ip, r7
 800bf1c:	0c3f      	lsrs	r7, r7, #16
 800bf1e:	fb02 330c 	mla	r3, r2, ip, r3
 800bf22:	fb02 f707 	mul.w	r7, r2, r7
 800bf26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	eb03 4c07 	add.w	ip, r3, r7, lsl #16
 800bf30:	0c3b      	lsrs	r3, r7, #16
 800bf32:	428e      	cmp	r6, r1
 800bf34:	f840 cb04 	str.w	ip, [r0], #4
 800bf38:	dcec      	bgt.n	800bf14 <__multadd+0x10>
 800bf3a:	b13b      	cbz	r3, 800bf4c <__multadd+0x48>
 800bf3c:	68a2      	ldr	r2, [r4, #8]
 800bf3e:	4296      	cmp	r6, r2
 800bf40:	da07      	bge.n	800bf52 <__multadd+0x4e>
 800bf42:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 800bf46:	3601      	adds	r6, #1
 800bf48:	6126      	str	r6, [r4, #16]
 800bf4a:	6153      	str	r3, [r2, #20]
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	b003      	add	sp, #12
 800bf50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf52:	6861      	ldr	r1, [r4, #4]
 800bf54:	4628      	mov	r0, r5
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	3101      	adds	r1, #1
 800bf5a:	f7ff ffa3 	bl	800bea4 <_Balloc>
 800bf5e:	6922      	ldr	r2, [r4, #16]
 800bf60:	f104 010c 	add.w	r1, r4, #12
 800bf64:	3202      	adds	r2, #2
 800bf66:	0092      	lsls	r2, r2, #2
 800bf68:	4607      	mov	r7, r0
 800bf6a:	f100 000c 	add.w	r0, r0, #12
 800bf6e:	f7fb fbd7 	bl	8007720 <memcpy>
 800bf72:	6861      	ldr	r1, [r4, #4]
 800bf74:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800bf76:	9b01      	ldr	r3, [sp, #4]
 800bf78:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800bf7c:	6020      	str	r0, [r4, #0]
 800bf7e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 800bf82:	463c      	mov	r4, r7
 800bf84:	e7dd      	b.n	800bf42 <__multadd+0x3e>
 800bf86:	bf00      	nop

0800bf88 <__s2b>:
 800bf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	f648 6439 	movw	r4, #36409	; 0x8e39
 800bf90:	461e      	mov	r6, r3
 800bf92:	f6c3 04e3 	movt	r4, #14563	; 0x38e3
 800bf96:	f103 0308 	add.w	r3, r3, #8
 800bf9a:	4688      	mov	r8, r1
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	4617      	mov	r7, r2
 800bfa0:	fb84 1403 	smull	r1, r4, r4, r3
 800bfa4:	17db      	asrs	r3, r3, #31
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	dd05      	ble.n	800bfbc <__s2b+0x34>
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	0052      	lsls	r2, r2, #1
 800bfb6:	3101      	adds	r1, #1
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	dcfb      	bgt.n	800bfb4 <__s2b+0x2c>
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f7ff ff71 	bl	800bea4 <_Balloc>
 800bfc2:	9b08      	ldr	r3, [sp, #32]
 800bfc4:	6143      	str	r3, [r0, #20]
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	2f09      	cmp	r7, #9
 800bfca:	4601      	mov	r1, r0
 800bfcc:	6103      	str	r3, [r0, #16]
 800bfce:	dd21      	ble.n	800c014 <__s2b+0x8c>
 800bfd0:	f108 0909 	add.w	r9, r8, #9
 800bfd4:	2409      	movs	r4, #9
 800bfd6:	f818 3004 	ldrb.w	r3, [r8, r4]
 800bfda:	220a      	movs	r2, #10
 800bfdc:	4628      	mov	r0, r5
 800bfde:	3401      	adds	r4, #1
 800bfe0:	3b30      	subs	r3, #48	; 0x30
 800bfe2:	f7ff ff8f 	bl	800bf04 <__multadd>
 800bfe6:	42bc      	cmp	r4, r7
 800bfe8:	4601      	mov	r1, r0
 800bfea:	d1f4      	bne.n	800bfd6 <__s2b+0x4e>
 800bfec:	eb09 0804 	add.w	r8, r9, r4
 800bff0:	f1a8 0808 	sub.w	r8, r8, #8
 800bff4:	42a6      	cmp	r6, r4
 800bff6:	dd0a      	ble.n	800c00e <__s2b+0x86>
 800bff8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bffc:	220a      	movs	r2, #10
 800bffe:	4628      	mov	r0, r5
 800c000:	3401      	adds	r4, #1
 800c002:	3b30      	subs	r3, #48	; 0x30
 800c004:	f7ff ff7e 	bl	800bf04 <__multadd>
 800c008:	42b4      	cmp	r4, r6
 800c00a:	4601      	mov	r1, r0
 800c00c:	d1f4      	bne.n	800bff8 <__s2b+0x70>
 800c00e:	4608      	mov	r0, r1
 800c010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c014:	f108 080a 	add.w	r8, r8, #10
 800c018:	2409      	movs	r4, #9
 800c01a:	e7eb      	b.n	800bff4 <__s2b+0x6c>

0800c01c <__hi0bits>:
 800c01c:	4603      	mov	r3, r0
 800c01e:	2000      	movs	r0, #0
 800c020:	0c1a      	lsrs	r2, r3, #16
 800c022:	d101      	bne.n	800c028 <__hi0bits+0xc>
 800c024:	041b      	lsls	r3, r3, #16
 800c026:	2010      	movs	r0, #16
 800c028:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c02c:	d101      	bne.n	800c032 <__hi0bits+0x16>
 800c02e:	3008      	adds	r0, #8
 800c030:	021b      	lsls	r3, r3, #8
 800c032:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c036:	d101      	bne.n	800c03c <__hi0bits+0x20>
 800c038:	3004      	adds	r0, #4
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c040:	d101      	bne.n	800c046 <__hi0bits+0x2a>
 800c042:	3002      	adds	r0, #2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	2b00      	cmp	r3, #0
 800c048:	db02      	blt.n	800c050 <__hi0bits+0x34>
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	d401      	bmi.n	800c052 <__hi0bits+0x36>
 800c04e:	2020      	movs	r0, #32
 800c050:	4770      	bx	lr
 800c052:	3001      	adds	r0, #1
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop

0800c058 <__lo0bits>:
 800c058:	6803      	ldr	r3, [r0, #0]
 800c05a:	4602      	mov	r2, r0
 800c05c:	f013 0007 	ands.w	r0, r3, #7
 800c060:	d007      	beq.n	800c072 <__lo0bits+0x1a>
 800c062:	07d9      	lsls	r1, r3, #31
 800c064:	d41f      	bmi.n	800c0a6 <__lo0bits+0x4e>
 800c066:	0798      	lsls	r0, r3, #30
 800c068:	d41f      	bmi.n	800c0aa <__lo0bits+0x52>
 800c06a:	089b      	lsrs	r3, r3, #2
 800c06c:	2002      	movs	r0, #2
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	4770      	bx	lr
 800c072:	b299      	uxth	r1, r3
 800c074:	b909      	cbnz	r1, 800c07a <__lo0bits+0x22>
 800c076:	0c1b      	lsrs	r3, r3, #16
 800c078:	2010      	movs	r0, #16
 800c07a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c07e:	d101      	bne.n	800c084 <__lo0bits+0x2c>
 800c080:	3008      	adds	r0, #8
 800c082:	0a1b      	lsrs	r3, r3, #8
 800c084:	0719      	lsls	r1, r3, #28
 800c086:	d101      	bne.n	800c08c <__lo0bits+0x34>
 800c088:	3004      	adds	r0, #4
 800c08a:	091b      	lsrs	r3, r3, #4
 800c08c:	0799      	lsls	r1, r3, #30
 800c08e:	d101      	bne.n	800c094 <__lo0bits+0x3c>
 800c090:	3002      	adds	r0, #2
 800c092:	089b      	lsrs	r3, r3, #2
 800c094:	07d9      	lsls	r1, r3, #31
 800c096:	d404      	bmi.n	800c0a2 <__lo0bits+0x4a>
 800c098:	085b      	lsrs	r3, r3, #1
 800c09a:	d101      	bne.n	800c0a0 <__lo0bits+0x48>
 800c09c:	2020      	movs	r0, #32
 800c09e:	4770      	bx	lr
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	6013      	str	r3, [r2, #0]
 800c0a4:	4770      	bx	lr
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	4770      	bx	lr
 800c0aa:	085b      	lsrs	r3, r3, #1
 800c0ac:	2001      	movs	r0, #1
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop

0800c0b4 <__i2b>:
 800c0b4:	b510      	push	{r4, lr}
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	f7ff fef3 	bl	800bea4 <_Balloc>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	6144      	str	r4, [r0, #20]
 800c0c2:	6103      	str	r3, [r0, #16]
 800c0c4:	bd10      	pop	{r4, pc}
 800c0c6:	bf00      	nop

0800c0c8 <__multiply>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	690d      	ldr	r5, [r1, #16]
 800c0d0:	b087      	sub	sp, #28
 800c0d2:	6916      	ldr	r6, [r2, #16]
 800c0d4:	4692      	mov	sl, r2
 800c0d6:	42b5      	cmp	r5, r6
 800c0d8:	da04      	bge.n	800c0e4 <__multiply+0x1c>
 800c0da:	462a      	mov	r2, r5
 800c0dc:	4654      	mov	r4, sl
 800c0de:	4635      	mov	r5, r6
 800c0e0:	468a      	mov	sl, r1
 800c0e2:	4616      	mov	r6, r2
 800c0e4:	68a3      	ldr	r3, [r4, #8]
 800c0e6:	eb05 0b06 	add.w	fp, r5, r6
 800c0ea:	6861      	ldr	r1, [r4, #4]
 800c0ec:	459b      	cmp	fp, r3
 800c0ee:	bfc8      	it	gt
 800c0f0:	3101      	addgt	r1, #1
 800c0f2:	f7ff fed7 	bl	800bea4 <_Balloc>
 800c0f6:	f10b 0104 	add.w	r1, fp, #4
 800c0fa:	9105      	str	r1, [sp, #20]
 800c0fc:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800c100:	f100 0914 	add.w	r9, r0, #20
 800c104:	3304      	adds	r3, #4
 800c106:	9003      	str	r0, [sp, #12]
 800c108:	4599      	cmp	r9, r3
 800c10a:	9304      	str	r3, [sp, #16]
 800c10c:	d206      	bcs.n	800c11c <__multiply+0x54>
 800c10e:	9904      	ldr	r1, [sp, #16]
 800c110:	464b      	mov	r3, r9
 800c112:	2200      	movs	r2, #0
 800c114:	f843 2b04 	str.w	r2, [r3], #4
 800c118:	4299      	cmp	r1, r3
 800c11a:	d8fb      	bhi.n	800c114 <__multiply+0x4c>
 800c11c:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800c120:	f10a 0a14 	add.w	sl, sl, #20
 800c124:	3614      	adds	r6, #20
 800c126:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c12a:	3414      	adds	r4, #20
 800c12c:	45b2      	cmp	sl, r6
 800c12e:	9601      	str	r6, [sp, #4]
 800c130:	f105 0814 	add.w	r8, r5, #20
 800c134:	9402      	str	r4, [sp, #8]
 800c136:	d24a      	bcs.n	800c1ce <__multiply+0x106>
 800c138:	f85a 5b04 	ldr.w	r5, [sl], #4
 800c13c:	b2ac      	uxth	r4, r5
 800c13e:	b1ec      	cbz	r4, 800c17c <__multiply+0xb4>
 800c140:	9a02      	ldr	r2, [sp, #8]
 800c142:	464b      	mov	r3, r9
 800c144:	2500      	movs	r5, #0
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	461f      	mov	r7, r3
 800c14a:	f852 1b04 	ldr.w	r1, [r2], #4
 800c14e:	b286      	uxth	r6, r0
 800c150:	0c00      	lsrs	r0, r0, #16
 800c152:	1976      	adds	r6, r6, r5
 800c154:	fa1f fc81 	uxth.w	ip, r1
 800c158:	0c09      	lsrs	r1, r1, #16
 800c15a:	fb04 660c 	mla	r6, r4, ip, r6
 800c15e:	fb04 0001 	mla	r0, r4, r1, r0
 800c162:	eb00 4516 	add.w	r5, r0, r6, lsr #16
 800c166:	b2b6      	uxth	r6, r6
 800c168:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800c16c:	0c2d      	lsrs	r5, r5, #16
 800c16e:	4590      	cmp	r8, r2
 800c170:	f843 6b04 	str.w	r6, [r3], #4
 800c174:	d8e7      	bhi.n	800c146 <__multiply+0x7e>
 800c176:	607d      	str	r5, [r7, #4]
 800c178:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 800c17c:	0c2d      	lsrs	r5, r5, #16
 800c17e:	d021      	beq.n	800c1c4 <__multiply+0xfc>
 800c180:	f8d9 1000 	ldr.w	r1, [r9]
 800c184:	46cc      	mov	ip, r9
 800c186:	9b02      	ldr	r3, [sp, #8]
 800c188:	464e      	mov	r6, r9
 800c18a:	4608      	mov	r0, r1
 800c18c:	2700      	movs	r7, #0
 800c18e:	e000      	b.n	800c192 <__multiply+0xca>
 800c190:	4616      	mov	r6, r2
 800c192:	881c      	ldrh	r4, [r3, #0]
 800c194:	eb07 4710 	add.w	r7, r7, r0, lsr #16
 800c198:	4632      	mov	r2, r6
 800c19a:	b289      	uxth	r1, r1
 800c19c:	fb05 7704 	mla	r7, r5, r4, r7
 800c1a0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800c1a4:	f842 1b04 	str.w	r1, [r2], #4
 800c1a8:	f853 1b04 	ldr.w	r1, [r3], #4
 800c1ac:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 800c1b0:	0c09      	lsrs	r1, r1, #16
 800c1b2:	b284      	uxth	r4, r0
 800c1b4:	fb05 4101 	mla	r1, r5, r1, r4
 800c1b8:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 800c1bc:	0c0f      	lsrs	r7, r1, #16
 800c1be:	4598      	cmp	r8, r3
 800c1c0:	d8e6      	bhi.n	800c190 <__multiply+0xc8>
 800c1c2:	6071      	str	r1, [r6, #4]
 800c1c4:	9a01      	ldr	r2, [sp, #4]
 800c1c6:	f109 0904 	add.w	r9, r9, #4
 800c1ca:	4552      	cmp	r2, sl
 800c1cc:	d8b4      	bhi.n	800c138 <__multiply+0x70>
 800c1ce:	f1bb 0f00 	cmp.w	fp, #0
 800c1d2:	dd0e      	ble.n	800c1f2 <__multiply+0x12a>
 800c1d4:	9905      	ldr	r1, [sp, #20]
 800c1d6:	9a03      	ldr	r2, [sp, #12]
 800c1d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1dc:	b94b      	cbnz	r3, 800c1f2 <__multiply+0x12a>
 800c1de:	9904      	ldr	r1, [sp, #16]
 800c1e0:	465a      	mov	r2, fp
 800c1e2:	1f0b      	subs	r3, r1, #4
 800c1e4:	e002      	b.n	800c1ec <__multiply+0x124>
 800c1e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1ea:	b909      	cbnz	r1, 800c1f0 <__multiply+0x128>
 800c1ec:	3a01      	subs	r2, #1
 800c1ee:	d1fa      	bne.n	800c1e6 <__multiply+0x11e>
 800c1f0:	4693      	mov	fp, r2
 800c1f2:	9a03      	ldr	r2, [sp, #12]
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	f8c2 b010 	str.w	fp, [r2, #16]
 800c1fa:	b007      	add	sp, #28
 800c1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c200 <__pow5mult>:
 800c200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c204:	f012 0603 	ands.w	r6, r2, #3
 800c208:	4615      	mov	r5, r2
 800c20a:	4604      	mov	r4, r0
 800c20c:	4688      	mov	r8, r1
 800c20e:	d12d      	bne.n	800c26c <__pow5mult+0x6c>
 800c210:	10ad      	asrs	r5, r5, #2
 800c212:	d01d      	beq.n	800c250 <__pow5mult+0x50>
 800c214:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800c216:	b92f      	cbnz	r7, 800c224 <__pow5mult+0x24>
 800c218:	e031      	b.n	800c27e <__pow5mult+0x7e>
 800c21a:	106d      	asrs	r5, r5, #1
 800c21c:	d018      	beq.n	800c250 <__pow5mult+0x50>
 800c21e:	683e      	ldr	r6, [r7, #0]
 800c220:	b1ce      	cbz	r6, 800c256 <__pow5mult+0x56>
 800c222:	4637      	mov	r7, r6
 800c224:	07e8      	lsls	r0, r5, #31
 800c226:	d5f8      	bpl.n	800c21a <__pow5mult+0x1a>
 800c228:	4641      	mov	r1, r8
 800c22a:	463a      	mov	r2, r7
 800c22c:	4620      	mov	r0, r4
 800c22e:	f7ff ff4b 	bl	800c0c8 <__multiply>
 800c232:	f1b8 0f00 	cmp.w	r8, #0
 800c236:	d017      	beq.n	800c268 <__pow5mult+0x68>
 800c238:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c23c:	106d      	asrs	r5, r5, #1
 800c23e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c244:	f8c8 1000 	str.w	r1, [r8]
 800c248:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 800c24c:	4680      	mov	r8, r0
 800c24e:	d1e6      	bne.n	800c21e <__pow5mult+0x1e>
 800c250:	4640      	mov	r0, r8
 800c252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c256:	4639      	mov	r1, r7
 800c258:	463a      	mov	r2, r7
 800c25a:	4620      	mov	r0, r4
 800c25c:	f7ff ff34 	bl	800c0c8 <__multiply>
 800c260:	6038      	str	r0, [r7, #0]
 800c262:	4607      	mov	r7, r0
 800c264:	6006      	str	r6, [r0, #0]
 800c266:	e7dd      	b.n	800c224 <__pow5mult+0x24>
 800c268:	4680      	mov	r8, r0
 800c26a:	e7d6      	b.n	800c21a <__pow5mult+0x1a>
 800c26c:	4a09      	ldr	r2, [pc, #36]	; (800c294 <__pow5mult+0x94>)
 800c26e:	3e01      	subs	r6, #1
 800c270:	2300      	movs	r3, #0
 800c272:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 800c276:	f7ff fe45 	bl	800bf04 <__multadd>
 800c27a:	4680      	mov	r8, r0
 800c27c:	e7c8      	b.n	800c210 <__pow5mult+0x10>
 800c27e:	4620      	mov	r0, r4
 800c280:	f240 2171 	movw	r1, #625	; 0x271
 800c284:	f7ff ff16 	bl	800c0b4 <__i2b>
 800c288:	2300      	movs	r3, #0
 800c28a:	64a0      	str	r0, [r4, #72]	; 0x48
 800c28c:	4607      	mov	r7, r0
 800c28e:	6003      	str	r3, [r0, #0]
 800c290:	e7c8      	b.n	800c224 <__pow5mult+0x24>
 800c292:	bf00      	nop
 800c294:	08026d90 	.word	0x08026d90

0800c298 <__lshift>:
 800c298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29c:	4691      	mov	r9, r2
 800c29e:	690a      	ldr	r2, [r1, #16]
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	ea4f 1769 	mov.w	r7, r9, asr #5
 800c2a6:	688b      	ldr	r3, [r1, #8]
 800c2a8:	eb07 0b02 	add.w	fp, r7, r2
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	f10b 0501 	add.w	r5, fp, #1
 800c2b2:	6849      	ldr	r1, [r1, #4]
 800c2b4:	429d      	cmp	r5, r3
 800c2b6:	dd03      	ble.n	800c2c0 <__lshift+0x28>
 800c2b8:	005b      	lsls	r3, r3, #1
 800c2ba:	3101      	adds	r1, #1
 800c2bc:	429d      	cmp	r5, r3
 800c2be:	dcfb      	bgt.n	800c2b8 <__lshift+0x20>
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f7ff fdef 	bl	800bea4 <_Balloc>
 800c2c6:	2f00      	cmp	r7, #0
 800c2c8:	f100 0314 	add.w	r3, r0, #20
 800c2cc:	dd09      	ble.n	800c2e2 <__lshift+0x4a>
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	3201      	adds	r2, #1
 800c2d4:	f843 1b04 	str.w	r1, [r3], #4
 800c2d8:	42ba      	cmp	r2, r7
 800c2da:	d1fa      	bne.n	800c2d2 <__lshift+0x3a>
 800c2dc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800c2e0:	3314      	adds	r3, #20
 800c2e2:	6922      	ldr	r2, [r4, #16]
 800c2e4:	f019 091f 	ands.w	r9, r9, #31
 800c2e8:	f104 0114 	add.w	r1, r4, #20
 800c2ec:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800c2f0:	f10c 0c14 	add.w	ip, ip, #20
 800c2f4:	d022      	beq.n	800c33c <__lshift+0xa4>
 800c2f6:	f1c9 0a20 	rsb	sl, r9, #32
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	e000      	b.n	800c300 <__lshift+0x68>
 800c2fe:	463b      	mov	r3, r7
 800c300:	f8d1 8000 	ldr.w	r8, [r1]
 800c304:	461f      	mov	r7, r3
 800c306:	fa08 f809 	lsl.w	r8, r8, r9
 800c30a:	ea48 0202 	orr.w	r2, r8, r2
 800c30e:	f847 2b04 	str.w	r2, [r7], #4
 800c312:	f851 2b04 	ldr.w	r2, [r1], #4
 800c316:	458c      	cmp	ip, r1
 800c318:	fa22 f20a 	lsr.w	r2, r2, sl
 800c31c:	d8ef      	bhi.n	800c2fe <__lshift+0x66>
 800c31e:	605a      	str	r2, [r3, #4]
 800c320:	b10a      	cbz	r2, 800c326 <__lshift+0x8e>
 800c322:	f10b 0502 	add.w	r5, fp, #2
 800c326:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800c328:	3d01      	subs	r5, #1
 800c32a:	6862      	ldr	r2, [r4, #4]
 800c32c:	6105      	str	r5, [r0, #16]
 800c32e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c332:	6021      	str	r1, [r4, #0]
 800c334:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33c:	f851 2b04 	ldr.w	r2, [r1], #4
 800c340:	458c      	cmp	ip, r1
 800c342:	f843 2b04 	str.w	r2, [r3], #4
 800c346:	d9ee      	bls.n	800c326 <__lshift+0x8e>
 800c348:	f851 2b04 	ldr.w	r2, [r1], #4
 800c34c:	458c      	cmp	ip, r1
 800c34e:	f843 2b04 	str.w	r2, [r3], #4
 800c352:	d8f3      	bhi.n	800c33c <__lshift+0xa4>
 800c354:	e7e7      	b.n	800c326 <__lshift+0x8e>
 800c356:	bf00      	nop

0800c358 <__mcmp>:
 800c358:	4603      	mov	r3, r0
 800c35a:	690a      	ldr	r2, [r1, #16]
 800c35c:	6900      	ldr	r0, [r0, #16]
 800c35e:	b430      	push	{r4, r5}
 800c360:	1a80      	subs	r0, r0, r2
 800c362:	d110      	bne.n	800c386 <__mcmp+0x2e>
 800c364:	3204      	adds	r2, #4
 800c366:	f103 0514 	add.w	r5, r3, #20
 800c36a:	0092      	lsls	r2, r2, #2
 800c36c:	189b      	adds	r3, r3, r2
 800c36e:	1889      	adds	r1, r1, r2
 800c370:	3304      	adds	r3, #4
 800c372:	3104      	adds	r1, #4
 800c374:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800c378:	3b04      	subs	r3, #4
 800c37a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c37e:	4294      	cmp	r4, r2
 800c380:	d103      	bne.n	800c38a <__mcmp+0x32>
 800c382:	429d      	cmp	r5, r3
 800c384:	d3f6      	bcc.n	800c374 <__mcmp+0x1c>
 800c386:	bc30      	pop	{r4, r5}
 800c388:	4770      	bx	lr
 800c38a:	bf38      	it	cc
 800c38c:	f04f 30ff 	movcc.w	r0, #4294967295
 800c390:	d3f9      	bcc.n	800c386 <__mcmp+0x2e>
 800c392:	2001      	movs	r0, #1
 800c394:	e7f7      	b.n	800c386 <__mcmp+0x2e>
 800c396:	bf00      	nop

0800c398 <__mdiff>:
 800c398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	460c      	mov	r4, r1
 800c39e:	4607      	mov	r7, r0
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	4615      	mov	r5, r2
 800c3a6:	f7ff ffd7 	bl	800c358 <__mcmp>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	d05b      	beq.n	800c468 <__mdiff+0xd0>
 800c3b0:	db55      	blt.n	800c45e <__mdiff+0xc6>
 800c3b2:	2600      	movs	r6, #0
 800c3b4:	6861      	ldr	r1, [r4, #4]
 800c3b6:	4638      	mov	r0, r7
 800c3b8:	f7ff fd74 	bl	800bea4 <_Balloc>
 800c3bc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800c3c0:	692b      	ldr	r3, [r5, #16]
 800c3c2:	f104 0c14 	add.w	ip, r4, #20
 800c3c6:	f105 0914 	add.w	r9, r5, #20
 800c3ca:	2700      	movs	r7, #0
 800c3cc:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800c3d0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800c3d4:	3414      	adds	r4, #20
 800c3d6:	3514      	adds	r5, #20
 800c3d8:	f100 0a14 	add.w	sl, r0, #20
 800c3dc:	60c6      	str	r6, [r0, #12]
 800c3de:	f85c 6b04 	ldr.w	r6, [ip], #4
 800c3e2:	4653      	mov	r3, sl
 800c3e4:	f859 ab04 	ldr.w	sl, [r9], #4
 800c3e8:	4662      	mov	r2, ip
 800c3ea:	b2b1      	uxth	r1, r6
 800c3ec:	19c9      	adds	r1, r1, r7
 800c3ee:	fa1f fb8a 	uxth.w	fp, sl
 800c3f2:	ebcb 0101 	rsb	r1, fp, r1
 800c3f6:	ea4f 471a 	mov.w	r7, sl, lsr #16
 800c3fa:	ebc7 4716 	rsb	r7, r7, r6, lsr #16
 800c3fe:	eb07 4721 	add.w	r7, r7, r1, asr #16
 800c402:	b289      	uxth	r1, r1
 800c404:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800c408:	143f      	asrs	r7, r7, #16
 800c40a:	454d      	cmp	r5, r9
 800c40c:	f843 1b04 	str.w	r1, [r3], #4
 800c410:	469a      	mov	sl, r3
 800c412:	d8e4      	bhi.n	800c3de <__mdiff+0x46>
 800c414:	4564      	cmp	r4, ip
 800c416:	461e      	mov	r6, r3
 800c418:	d915      	bls.n	800c446 <__mdiff+0xae>
 800c41a:	f852 5b04 	ldr.w	r5, [r2], #4
 800c41e:	b2a9      	uxth	r1, r5
 800c420:	0c2d      	lsrs	r5, r5, #16
 800c422:	19cf      	adds	r7, r1, r7
 800c424:	eb05 4527 	add.w	r5, r5, r7, asr #16
 800c428:	b2bf      	uxth	r7, r7
 800c42a:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800c42e:	142f      	asrs	r7, r5, #16
 800c430:	4294      	cmp	r4, r2
 800c432:	f843 1b04 	str.w	r1, [r3], #4
 800c436:	d8f0      	bhi.n	800c41a <__mdiff+0x82>
 800c438:	ea6f 030c 	mvn.w	r3, ip
 800c43c:	191b      	adds	r3, r3, r4
 800c43e:	f023 0303 	bic.w	r3, r3, #3
 800c442:	3304      	adds	r3, #4
 800c444:	18f3      	adds	r3, r6, r3
 800c446:	b931      	cbnz	r1, 800c456 <__mdiff+0xbe>
 800c448:	3b04      	subs	r3, #4
 800c44a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c44e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c452:	2a00      	cmp	r2, #0
 800c454:	d0f9      	beq.n	800c44a <__mdiff+0xb2>
 800c456:	f8c0 8010 	str.w	r8, [r0, #16]
 800c45a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45e:	4623      	mov	r3, r4
 800c460:	2601      	movs	r6, #1
 800c462:	462c      	mov	r4, r5
 800c464:	461d      	mov	r5, r3
 800c466:	e7a5      	b.n	800c3b4 <__mdiff+0x1c>
 800c468:	4638      	mov	r0, r7
 800c46a:	4631      	mov	r1, r6
 800c46c:	f7ff fd1a 	bl	800bea4 <_Balloc>
 800c470:	2301      	movs	r3, #1
 800c472:	6146      	str	r6, [r0, #20]
 800c474:	6103      	str	r3, [r0, #16]
 800c476:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47a:	bf00      	nop

0800c47c <__ulp>:
 800c47c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c480:	0d1b      	lsrs	r3, r3, #20
 800c482:	051b      	lsls	r3, r3, #20
 800c484:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c488:	2b00      	cmp	r3, #0
 800c48a:	dd02      	ble.n	800c492 <__ulp+0x16>
 800c48c:	4619      	mov	r1, r3
 800c48e:	2000      	movs	r0, #0
 800c490:	4770      	bx	lr
 800c492:	425b      	negs	r3, r3
 800c494:	2100      	movs	r1, #0
 800c496:	151b      	asrs	r3, r3, #20
 800c498:	2b13      	cmp	r3, #19
 800c49a:	dd0b      	ble.n	800c4b4 <__ulp+0x38>
 800c49c:	2b32      	cmp	r3, #50	; 0x32
 800c49e:	dd02      	ble.n	800c4a6 <__ulp+0x2a>
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	4770      	bx	lr
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800c4ac:	fa12 f303 	lsls.w	r3, r2, r3
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	4770      	bx	lr
 800c4b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	fa52 f103 	asrs.w	r1, r2, r3
 800c4be:	4770      	bx	lr

0800c4c0 <__b2d>:
 800c4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c4:	f100 0614 	add.w	r6, r0, #20
 800c4c8:	6904      	ldr	r4, [r0, #16]
 800c4ca:	460f      	mov	r7, r1
 800c4cc:	3404      	adds	r4, #4
 800c4ce:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800c4d2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800c4d6:	46a0      	mov	r8, r4
 800c4d8:	4628      	mov	r0, r5
 800c4da:	f7ff fd9f 	bl	800c01c <__hi0bits>
 800c4de:	280a      	cmp	r0, #10
 800c4e0:	f1c0 0320 	rsb	r3, r0, #32
 800c4e4:	603b      	str	r3, [r7, #0]
 800c4e6:	dc15      	bgt.n	800c514 <__b2d+0x54>
 800c4e8:	f1c0 010b 	rsb	r1, r0, #11
 800c4ec:	fa35 f701 	lsrs.w	r7, r5, r1
 800c4f0:	42a6      	cmp	r6, r4
 800c4f2:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
 800c4f6:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
 800c4fa:	d232      	bcs.n	800c562 <__b2d+0xa2>
 800c4fc:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800c500:	fa34 f101 	lsrs.w	r1, r4, r1
 800c504:	3015      	adds	r0, #21
 800c506:	4085      	lsls	r5, r0
 800c508:	ea41 0205 	orr.w	r2, r1, r5
 800c50c:	4610      	mov	r0, r2
 800c50e:	4619      	mov	r1, r3
 800c510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c514:	2100      	movs	r1, #0
 800c516:	42a6      	cmp	r6, r4
 800c518:	d202      	bcs.n	800c520 <__b2d+0x60>
 800c51a:	f858 1c04 	ldr.w	r1, [r8, #-4]
 800c51e:	3c04      	subs	r4, #4
 800c520:	f1b0 070b 	subs.w	r7, r0, #11
 800c524:	bf02      	ittt	eq
 800c526:	f045 557e 	orreq.w	r5, r5, #1065353216	; 0x3f800000
 800c52a:	460a      	moveq	r2, r1
 800c52c:	f445 03e0 	orreq.w	r3, r5, #7340032	; 0x700000
 800c530:	d0ec      	beq.n	800c50c <__b2d+0x4c>
 800c532:	40bd      	lsls	r5, r7
 800c534:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800c538:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 800c53c:	42b4      	cmp	r4, r6
 800c53e:	fa21 fc00 	lsr.w	ip, r1, r0
 800c542:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 800c546:	ea45 030c 	orr.w	r3, r5, ip
 800c54a:	d90c      	bls.n	800c566 <__b2d+0xa6>
 800c54c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800c550:	fa34 f000 	lsrs.w	r0, r4, r0
 800c554:	40b9      	lsls	r1, r7
 800c556:	ea40 0201 	orr.w	r2, r0, r1
 800c55a:	4619      	mov	r1, r3
 800c55c:	4610      	mov	r0, r2
 800c55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c562:	2100      	movs	r1, #0
 800c564:	e7ce      	b.n	800c504 <__b2d+0x44>
 800c566:	2000      	movs	r0, #0
 800c568:	e7f4      	b.n	800c554 <__b2d+0x94>
 800c56a:	bf00      	nop

0800c56c <__d2b>:
 800c56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c570:	b083      	sub	sp, #12
 800c572:	2101      	movs	r1, #1
 800c574:	461d      	mov	r5, r3
 800c576:	4614      	mov	r4, r2
 800c578:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c57a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c57c:	f7ff fc92 	bl	800bea4 <_Balloc>
 800c580:	f3c5 590a 	ubfx	r9, r5, #20, #11
 800c584:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 800c588:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c58c:	9301      	str	r3, [sp, #4]
 800c58e:	4680      	mov	r8, r0
 800c590:	f1b9 0f00 	cmp.w	r9, #0
 800c594:	d002      	beq.n	800c59c <__d2b+0x30>
 800c596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	2c00      	cmp	r4, #0
 800c59e:	d026      	beq.n	800c5ee <__d2b+0x82>
 800c5a0:	a802      	add	r0, sp, #8
 800c5a2:	f840 4d08 	str.w	r4, [r0, #-8]!
 800c5a6:	4668      	mov	r0, sp
 800c5a8:	f7ff fd56 	bl	800c058 <__lo0bits>
 800c5ac:	9b01      	ldr	r3, [sp, #4]
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d135      	bne.n	800c61e <__d2b+0xb2>
 800c5b2:	9a00      	ldr	r2, [sp, #0]
 800c5b4:	f8c8 2014 	str.w	r2, [r8, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	bf0c      	ite	eq
 800c5bc:	2401      	moveq	r4, #1
 800c5be:	2402      	movne	r4, #2
 800c5c0:	f8c8 3018 	str.w	r3, [r8, #24]
 800c5c4:	f8c8 4010 	str.w	r4, [r8, #16]
 800c5c8:	f1b9 0f00 	cmp.w	r9, #0
 800c5cc:	d11d      	bne.n	800c60a <__d2b+0x9e>
 800c5ce:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800c5d2:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
 800c5d6:	3802      	subs	r0, #2
 800c5d8:	6038      	str	r0, [r7, #0]
 800c5da:	6918      	ldr	r0, [r3, #16]
 800c5dc:	f7ff fd1e 	bl	800c01c <__hi0bits>
 800c5e0:	ebc0 1444 	rsb	r4, r0, r4, lsl #5
 800c5e4:	6034      	str	r4, [r6, #0]
 800c5e6:	4640      	mov	r0, r8
 800c5e8:	b003      	add	sp, #12
 800c5ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ee:	a801      	add	r0, sp, #4
 800c5f0:	f7ff fd32 	bl	800c058 <__lo0bits>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	461c      	mov	r4, r3
 800c5f8:	f8c8 3010 	str.w	r3, [r8, #16]
 800c5fc:	9b01      	ldr	r3, [sp, #4]
 800c5fe:	f8c8 3014 	str.w	r3, [r8, #20]
 800c602:	3020      	adds	r0, #32
 800c604:	f1b9 0f00 	cmp.w	r9, #0
 800c608:	d0e1      	beq.n	800c5ce <__d2b+0x62>
 800c60a:	f5a9 6986 	sub.w	r9, r9, #1072	; 0x430
 800c60e:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 800c612:	f1a9 0903 	sub.w	r9, r9, #3
 800c616:	4448      	add	r0, r9
 800c618:	6038      	str	r0, [r7, #0]
 800c61a:	6033      	str	r3, [r6, #0]
 800c61c:	e7e3      	b.n	800c5e6 <__d2b+0x7a>
 800c61e:	f1c0 0220 	rsb	r2, r0, #32
 800c622:	9900      	ldr	r1, [sp, #0]
 800c624:	fa13 f202 	lsls.w	r2, r3, r2
 800c628:	40c3      	lsrs	r3, r0
 800c62a:	430a      	orrs	r2, r1
 800c62c:	9301      	str	r3, [sp, #4]
 800c62e:	f8c8 2014 	str.w	r2, [r8, #20]
 800c632:	e7c1      	b.n	800c5b8 <__d2b+0x4c>

0800c634 <__ratio>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	b083      	sub	sp, #12
 800c63a:	460c      	mov	r4, r1
 800c63c:	4669      	mov	r1, sp
 800c63e:	4605      	mov	r5, r0
 800c640:	f7ff ff3e 	bl	800c4c0 <__b2d>
 800c644:	460f      	mov	r7, r1
 800c646:	4606      	mov	r6, r0
 800c648:	a901      	add	r1, sp, #4
 800c64a:	4620      	mov	r0, r4
 800c64c:	f7ff ff38 	bl	800c4c0 <__b2d>
 800c650:	46b9      	mov	r9, r7
 800c652:	46b0      	mov	r8, r6
 800c654:	460b      	mov	r3, r1
 800c656:	4602      	mov	r2, r0
 800c658:	6929      	ldr	r1, [r5, #16]
 800c65a:	469b      	mov	fp, r3
 800c65c:	6920      	ldr	r0, [r4, #16]
 800c65e:	4692      	mov	sl, r2
 800c660:	9c00      	ldr	r4, [sp, #0]
 800c662:	1a09      	subs	r1, r1, r0
 800c664:	9801      	ldr	r0, [sp, #4]
 800c666:	1a20      	subs	r0, r4, r0
 800c668:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800c66c:	2900      	cmp	r1, #0
 800c66e:	bfc9      	itett	gt
 800c670:	eb07 5901 	addgt.w	r9, r7, r1, lsl #20
 800c674:	eba3 5b01 	suble.w	fp, r3, r1, lsl #20
 800c678:	4636      	movgt	r6, r6
 800c67a:	464f      	movgt	r7, r9
 800c67c:	bfdc      	itt	le
 800c67e:	4612      	movle	r2, r2
 800c680:	465b      	movle	r3, fp
 800c682:	4630      	mov	r0, r6
 800c684:	4639      	mov	r1, r7
 800c686:	f001 fb1b 	bl	800dcc0 <__aeabi_ddiv>
 800c68a:	b003      	add	sp, #12
 800c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c690 <_mprec_log10>:
 800c690:	b510      	push	{r4, lr}
 800c692:	4604      	mov	r4, r0
 800c694:	2100      	movs	r1, #0
 800c696:	2000      	movs	r0, #0
 800c698:	2c17      	cmp	r4, #23
 800c69a:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c69e:	dd08      	ble.n	800c6b2 <_mprec_log10+0x22>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800c6a8:	f001 f9e0 	bl	800da6c <__aeabi_dmul>
 800c6ac:	3c01      	subs	r4, #1
 800c6ae:	d1f7      	bne.n	800c6a0 <_mprec_log10+0x10>
 800c6b0:	bd10      	pop	{r4, pc}
 800c6b2:	4b03      	ldr	r3, [pc, #12]	; (800c6c0 <_mprec_log10+0x30>)
 800c6b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c6b8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800c6bc:	bd10      	pop	{r4, pc}
 800c6be:	bf00      	nop
 800c6c0:	08026d90 	.word	0x08026d90

0800c6c4 <__copybits>:
 800c6c4:	b470      	push	{r4, r5, r6}
 800c6c6:	3901      	subs	r1, #1
 800c6c8:	6916      	ldr	r6, [r2, #16]
 800c6ca:	f102 0314 	add.w	r3, r2, #20
 800c6ce:	1149      	asrs	r1, r1, #5
 800c6d0:	3101      	adds	r1, #1
 800c6d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c6d6:	3614      	adds	r6, #20
 800c6d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c6dc:	42b3      	cmp	r3, r6
 800c6de:	d20c      	bcs.n	800c6fa <__copybits+0x36>
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6e6:	429e      	cmp	r6, r3
 800c6e8:	f844 5b04 	str.w	r5, [r4], #4
 800c6ec:	d8f9      	bhi.n	800c6e2 <__copybits+0x1e>
 800c6ee:	1ab3      	subs	r3, r6, r2
 800c6f0:	3b15      	subs	r3, #21
 800c6f2:	f023 0303 	bic.w	r3, r3, #3
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	18c0      	adds	r0, r0, r3
 800c6fa:	4281      	cmp	r1, r0
 800c6fc:	d904      	bls.n	800c708 <__copybits+0x44>
 800c6fe:	2300      	movs	r3, #0
 800c700:	f840 3b04 	str.w	r3, [r0], #4
 800c704:	4281      	cmp	r1, r0
 800c706:	d8fb      	bhi.n	800c700 <__copybits+0x3c>
 800c708:	bc70      	pop	{r4, r5, r6}
 800c70a:	4770      	bx	lr

0800c70c <__any_on>:
 800c70c:	6902      	ldr	r2, [r0, #16]
 800c70e:	114b      	asrs	r3, r1, #5
 800c710:	b410      	push	{r4}
 800c712:	429a      	cmp	r2, r3
 800c714:	db01      	blt.n	800c71a <__any_on+0xe>
 800c716:	461a      	mov	r2, r3
 800c718:	dc18      	bgt.n	800c74c <__any_on+0x40>
 800c71a:	3204      	adds	r2, #4
 800c71c:	f100 0114 	add.w	r1, r0, #20
 800c720:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800c724:	1d1c      	adds	r4, r3, #4
 800c726:	42a1      	cmp	r1, r4
 800c728:	d21d      	bcs.n	800c766 <__any_on+0x5a>
 800c72a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c72e:	b952      	cbnz	r2, 800c746 <__any_on+0x3a>
 800c730:	1a59      	subs	r1, r3, r1
 800c732:	3103      	adds	r1, #3
 800c734:	f021 0103 	bic.w	r1, r1, #3
 800c738:	1a59      	subs	r1, r3, r1
 800c73a:	428b      	cmp	r3, r1
 800c73c:	d013      	beq.n	800c766 <__any_on+0x5a>
 800c73e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c742:	2a00      	cmp	r2, #0
 800c744:	d0f9      	beq.n	800c73a <__any_on+0x2e>
 800c746:	2001      	movs	r0, #1
 800c748:	bc10      	pop	{r4}
 800c74a:	4770      	bx	lr
 800c74c:	f011 011f 	ands.w	r1, r1, #31
 800c750:	d0e3      	beq.n	800c71a <__any_on+0xe>
 800c752:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c756:	695b      	ldr	r3, [r3, #20]
 800c758:	fa33 f401 	lsrs.w	r4, r3, r1
 800c75c:	fa14 f101 	lsls.w	r1, r4, r1
 800c760:	4299      	cmp	r1, r3
 800c762:	d1f0      	bne.n	800c746 <__any_on+0x3a>
 800c764:	e7d9      	b.n	800c71a <__any_on+0xe>
 800c766:	2000      	movs	r0, #0
 800c768:	e7ee      	b.n	800c748 <__any_on+0x3c>
 800c76a:	bf00      	nop

0800c76c <__fpclassifyd>:
 800c76c:	ea50 0201 	orrs.w	r2, r0, r1
 800c770:	460b      	mov	r3, r1
 800c772:	b410      	push	{r4}
 800c774:	d102      	bne.n	800c77c <__fpclassifyd+0x10>
 800c776:	2002      	movs	r0, #2
 800c778:	bc10      	pop	{r4}
 800c77a:	4770      	bx	lr
 800c77c:	f1d0 0001 	rsbs	r0, r0, #1
 800c780:	bf38      	it	cc
 800c782:	2000      	movcc	r0, #0
 800c784:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800c788:	bf14      	ite	ne
 800c78a:	2200      	movne	r2, #0
 800c78c:	f000 0201 	andeq.w	r2, r0, #1
 800c790:	2a00      	cmp	r2, #0
 800c792:	d1f0      	bne.n	800c776 <__fpclassifyd+0xa>
 800c794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c798:	f101 44fe 	add.w	r4, r1, #2130706432	; 0x7f000000
 800c79c:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800c7a0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c7a4:	4291      	cmp	r1, r2
 800c7a6:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
 800c7aa:	bf8c      	ite	hi
 800c7ac:	2100      	movhi	r1, #0
 800c7ae:	2101      	movls	r1, #1
 800c7b0:	4294      	cmp	r4, r2
 800c7b2:	bf8c      	ite	hi
 800c7b4:	460a      	movhi	r2, r1
 800c7b6:	f041 0201 	orrls.w	r2, r1, #1
 800c7ba:	b10a      	cbz	r2, 800c7c0 <__fpclassifyd+0x54>
 800c7bc:	2004      	movs	r0, #4
 800c7be:	e7db      	b.n	800c778 <__fpclassifyd+0xc>
 800c7c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7c4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7c8:	bf2c      	ite	cs
 800c7ca:	2200      	movcs	r2, #0
 800c7cc:	2201      	movcc	r2, #1
 800c7ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c7d2:	bf38      	it	cc
 800c7d4:	f042 0201 	orrcc.w	r2, r2, #1
 800c7d8:	b10a      	cbz	r2, 800c7de <__fpclassifyd+0x72>
 800c7da:	2003      	movs	r0, #3
 800c7dc:	e7cc      	b.n	800c778 <__fpclassifyd+0xc>
 800c7de:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800c7e2:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800c7e6:	bf14      	ite	ne
 800c7e8:	2100      	movne	r1, #0
 800c7ea:	2101      	moveq	r1, #1
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	bf14      	ite	ne
 800c7f0:	460b      	movne	r3, r1
 800c7f2:	f041 0301 	orreq.w	r3, r1, #1
 800c7f6:	4018      	ands	r0, r3
 800c7f8:	e7be      	b.n	800c778 <__fpclassifyd+0xc>
 800c7fa:	bf00      	nop

0800c7fc <__sread>:
 800c7fc:	b510      	push	{r4, lr}
 800c7fe:	460c      	mov	r4, r1
 800c800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c804:	f017 fd6c 	bl	80242e0 <_read_r>
 800c808:	2800      	cmp	r0, #0
 800c80a:	bfab      	itete	ge
 800c80c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800c80e:	89a3      	ldrhlt	r3, [r4, #12]
 800c810:	181b      	addge	r3, r3, r0
 800c812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c816:	bfac      	ite	ge
 800c818:	6523      	strge	r3, [r4, #80]	; 0x50
 800c81a:	81a3      	strhlt	r3, [r4, #12]
 800c81c:	bd10      	pop	{r4, pc}
 800c81e:	bf00      	nop

0800c820 <__seofread>:
 800c820:	2000      	movs	r0, #0
 800c822:	4770      	bx	lr

0800c824 <__swrite>:
 800c824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c828:	461e      	mov	r6, r3
 800c82a:	898b      	ldrh	r3, [r1, #12]
 800c82c:	4617      	mov	r7, r2
 800c82e:	460c      	mov	r4, r1
 800c830:	4605      	mov	r5, r0
 800c832:	05da      	lsls	r2, r3, #23
 800c834:	d506      	bpl.n	800c844 <__swrite+0x20>
 800c836:	2302      	movs	r3, #2
 800c838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f017 fd6f 	bl	8024320 <_lseek_r>
 800c842:	89a3      	ldrh	r3, [r4, #12]
 800c844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c84c:	81a3      	strh	r3, [r4, #12]
 800c84e:	4628      	mov	r0, r5
 800c850:	463a      	mov	r2, r7
 800c852:	4633      	mov	r3, r6
 800c854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c858:	f017 bd52 	b.w	8024300 <_write_r>

0800c85c <__sseek>:
 800c85c:	b510      	push	{r4, lr}
 800c85e:	460c      	mov	r4, r1
 800c860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c864:	f017 fd5c 	bl	8024320 <_lseek_r>
 800c868:	89a3      	ldrh	r3, [r4, #12]
 800c86a:	1c41      	adds	r1, r0, #1
 800c86c:	bf15      	itete	ne
 800c86e:	6520      	strne	r0, [r4, #80]	; 0x50
 800c870:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c874:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c878:	81a3      	strheq	r3, [r4, #12]
 800c87a:	bf18      	it	ne
 800c87c:	81a3      	strhne	r3, [r4, #12]
 800c87e:	bd10      	pop	{r4, pc}

0800c880 <__sclose>:
 800c880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c884:	f017 bd60 	b.w	8024348 <_close_r>

0800c888 <__ssprint_r>:
 800c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88c:	b085      	sub	sp, #20
 800c88e:	6894      	ldr	r4, [r2, #8]
 800c890:	4691      	mov	r9, r2
 800c892:	9003      	str	r0, [sp, #12]
 800c894:	460d      	mov	r5, r1
 800c896:	6817      	ldr	r7, [r2, #0]
 800c898:	2c00      	cmp	r4, #0
 800c89a:	d07a      	beq.n	800c992 <__ssprint_r+0x10a>
 800c89c:	f04f 0a00 	mov.w	sl, #0
 800c8a0:	6808      	ldr	r0, [r1, #0]
 800c8a2:	688b      	ldr	r3, [r1, #8]
 800c8a4:	4654      	mov	r4, sl
 800c8a6:	2c00      	cmp	r4, #0
 800c8a8:	d054      	beq.n	800c954 <__ssprint_r+0xcc>
 800c8aa:	429c      	cmp	r4, r3
 800c8ac:	461e      	mov	r6, r3
 800c8ae:	4698      	mov	r8, r3
 800c8b0:	bf3c      	itt	cc
 800c8b2:	4626      	movcc	r6, r4
 800c8b4:	46a0      	movcc	r8, r4
 800c8b6:	d33d      	bcc.n	800c934 <__ssprint_r+0xac>
 800c8b8:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 800c8bc:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 800c8c0:	d038      	beq.n	800c934 <__ssprint_r+0xac>
 800c8c2:	696b      	ldr	r3, [r5, #20]
 800c8c4:	1c62      	adds	r2, r4, #1
 800c8c6:	6929      	ldr	r1, [r5, #16]
 800c8c8:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800c8cc:	1a43      	subs	r3, r0, r1
 800c8ce:	18d0      	adds	r0, r2, r3
 800c8d0:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 800c8d4:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 800c8d8:	4583      	cmp	fp, r0
 800c8da:	465a      	mov	r2, fp
 800c8dc:	bf38      	it	cc
 800c8de:	4683      	movcc	fp, r0
 800c8e0:	9803      	ldr	r0, [sp, #12]
 800c8e2:	bf38      	it	cc
 800c8e4:	465a      	movcc	r2, fp
 800c8e6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 800c8ea:	d038      	beq.n	800c95e <__ssprint_r+0xd6>
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	9301      	str	r3, [sp, #4]
 800c8f0:	f7fa fbf0 	bl	80070d4 <_malloc_r>
 800c8f4:	9b01      	ldr	r3, [sp, #4]
 800c8f6:	4684      	mov	ip, r0
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d03b      	beq.n	800c974 <__ssprint_r+0xec>
 800c8fc:	6929      	ldr	r1, [r5, #16]
 800c8fe:	461a      	mov	r2, r3
 800c900:	9301      	str	r3, [sp, #4]
 800c902:	f8cd c008 	str.w	ip, [sp, #8]
 800c906:	f7fa ff0b 	bl	8007720 <memcpy>
 800c90a:	89aa      	ldrh	r2, [r5, #12]
 800c90c:	9b01      	ldr	r3, [sp, #4]
 800c90e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c912:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c916:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c91a:	81aa      	strh	r2, [r5, #12]
 800c91c:	4626      	mov	r6, r4
 800c91e:	46a0      	mov	r8, r4
 800c920:	eb0c 0003 	add.w	r0, ip, r3
 800c924:	f8c5 c010 	str.w	ip, [r5, #16]
 800c928:	ebc3 030b 	rsb	r3, r3, fp
 800c92c:	6028      	str	r0, [r5, #0]
 800c92e:	f8c5 b014 	str.w	fp, [r5, #20]
 800c932:	60ab      	str	r3, [r5, #8]
 800c934:	4642      	mov	r2, r8
 800c936:	4651      	mov	r1, sl
 800c938:	f7fa ff34 	bl	80077a4 <memmove>
 800c93c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c940:	68ab      	ldr	r3, [r5, #8]
 800c942:	6828      	ldr	r0, [r5, #0]
 800c944:	1b14      	subs	r4, r2, r4
 800c946:	1b9b      	subs	r3, r3, r6
 800c948:	60ab      	str	r3, [r5, #8]
 800c94a:	4440      	add	r0, r8
 800c94c:	6028      	str	r0, [r5, #0]
 800c94e:	f8c9 4008 	str.w	r4, [r9, #8]
 800c952:	b1f4      	cbz	r4, 800c992 <__ssprint_r+0x10a>
 800c954:	f8d7 a000 	ldr.w	sl, [r7]
 800c958:	687c      	ldr	r4, [r7, #4]
 800c95a:	3708      	adds	r7, #8
 800c95c:	e7a3      	b.n	800c8a6 <__ssprint_r+0x1e>
 800c95e:	9301      	str	r3, [sp, #4]
 800c960:	f7fb f83c 	bl	80079dc <_realloc_r>
 800c964:	9b01      	ldr	r3, [sp, #4]
 800c966:	4684      	mov	ip, r0
 800c968:	2800      	cmp	r0, #0
 800c96a:	d1d7      	bne.n	800c91c <__ssprint_r+0x94>
 800c96c:	6929      	ldr	r1, [r5, #16]
 800c96e:	9803      	ldr	r0, [sp, #12]
 800c970:	f7ff f8d0 	bl	800bb14 <_free_r>
 800c974:	9a03      	ldr	r2, [sp, #12]
 800c976:	230c      	movs	r3, #12
 800c978:	f04f 30ff 	mov.w	r0, #4294967295
 800c97c:	6013      	str	r3, [r2, #0]
 800c97e:	2300      	movs	r3, #0
 800c980:	89aa      	ldrh	r2, [r5, #12]
 800c982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c986:	81aa      	strh	r2, [r5, #12]
 800c988:	f8c9 3008 	str.w	r3, [r9, #8]
 800c98c:	f8c9 3004 	str.w	r3, [r9, #4]
 800c990:	e002      	b.n	800c998 <__ssprint_r+0x110>
 800c992:	4620      	mov	r0, r4
 800c994:	f8c9 4004 	str.w	r4, [r9, #4]
 800c998:	b005      	add	sp, #20
 800c99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99e:	bf00      	nop

0800c9a0 <_svfiprintf_r>:
 800c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a4:	b0af      	sub	sp, #188	; 0xbc
 800c9a6:	468a      	mov	sl, r1
 800c9a8:	9307      	str	r3, [sp, #28]
 800c9aa:	898b      	ldrh	r3, [r1, #12]
 800c9ac:	9003      	str	r0, [sp, #12]
 800c9ae:	061b      	lsls	r3, r3, #24
 800c9b0:	d503      	bpl.n	800c9ba <_svfiprintf_r+0x1a>
 800c9b2:	690b      	ldr	r3, [r1, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 8435 	beq.w	800d224 <_svfiprintf_r+0x884>
 800c9ba:	4617      	mov	r7, r2
 800c9bc:	f10d 01a7 	add.w	r1, sp, #167	; 0xa7
 800c9c0:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800c9c4:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	9102      	str	r1, [sp, #8]
 800c9cc:	ac10      	add	r4, sp, #64	; 0x40
 800c9ce:	ebc1 0108 	rsb	r1, r1, r8
 800c9d2:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
 800c9d6:	930d      	str	r3, [sp, #52]	; 0x34
 800c9d8:	9306      	str	r3, [sp, #24]
 800c9da:	910f      	str	r1, [sp, #60]	; 0x3c
 800c9dc:	900e      	str	r0, [sp, #56]	; 0x38
 800c9de:	942a      	str	r4, [sp, #168]	; 0xa8
 800c9e0:	932c      	str	r3, [sp, #176]	; 0xb0
 800c9e2:	932b      	str	r3, [sp, #172]	; 0xac
 800c9e4:	783b      	ldrb	r3, [r7, #0]
 800c9e6:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 800c9ea:	bf18      	it	ne
 800c9ec:	2201      	movne	r2, #1
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	bf0c      	ite	eq
 800c9f2:	2300      	moveq	r3, #0
 800c9f4:	f002 0301 	andne.w	r3, r2, #1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 82ef 	beq.w	800cfdc <_svfiprintf_r+0x63c>
 800c9fe:	463a      	mov	r2, r7
 800ca00:	463d      	mov	r5, r7
 800ca02:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ca06:	3501      	adds	r5, #1
 800ca08:	1c19      	adds	r1, r3, #0
 800ca0a:	bf18      	it	ne
 800ca0c:	2101      	movne	r1, #1
 800ca0e:	2b25      	cmp	r3, #37	; 0x25
 800ca10:	bf0c      	ite	eq
 800ca12:	2300      	moveq	r3, #0
 800ca14:	f001 0301 	andne.w	r3, r1, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1f2      	bne.n	800ca02 <_svfiprintf_r+0x62>
 800ca1c:	1bee      	subs	r6, r5, r7
 800ca1e:	d00e      	beq.n	800ca3e <_svfiprintf_r+0x9e>
 800ca20:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ca22:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ca24:	3301      	adds	r3, #1
 800ca26:	6027      	str	r7, [r4, #0]
 800ca28:	2b07      	cmp	r3, #7
 800ca2a:	4432      	add	r2, r6
 800ca2c:	6066      	str	r6, [r4, #4]
 800ca2e:	932b      	str	r3, [sp, #172]	; 0xac
 800ca30:	922c      	str	r2, [sp, #176]	; 0xb0
 800ca32:	f300 8330 	bgt.w	800d096 <_svfiprintf_r+0x6f6>
 800ca36:	3408      	adds	r4, #8
 800ca38:	9b06      	ldr	r3, [sp, #24]
 800ca3a:	199b      	adds	r3, r3, r6
 800ca3c:	9306      	str	r3, [sp, #24]
 800ca3e:	782b      	ldrb	r3, [r5, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 82cd 	beq.w	800cfe0 <_svfiprintf_r+0x640>
 800ca46:	2300      	movs	r3, #0
 800ca48:	1c6f      	adds	r7, r5, #1
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f04f 35ff 	mov.w	r5, #4294967295
 800ca50:	469b      	mov	fp, r3
 800ca52:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 800ca56:	9308      	str	r3, [sp, #32]
 800ca58:	f817 3b01 	ldrb.w	r3, [r7], #1
 800ca5c:	f1a3 0120 	sub.w	r1, r3, #32
 800ca60:	2958      	cmp	r1, #88	; 0x58
 800ca62:	f200 81a1 	bhi.w	800cda8 <_svfiprintf_r+0x408>
 800ca66:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ca6a:	019b      	.short	0x019b
 800ca6c:	019f019f 	.word	0x019f019f
 800ca70:	019f01fe 	.word	0x019f01fe
 800ca74:	019f019f 	.word	0x019f019f
 800ca78:	019f019f 	.word	0x019f019f
 800ca7c:	00f0019f 	.word	0x00f0019f
 800ca80:	019f01fc 	.word	0x019f01fc
 800ca84:	01e100fc 	.word	0x01e100fc
 800ca88:	01de019f 	.word	0x01de019f
 800ca8c:	01cd01cd 	.word	0x01cd01cd
 800ca90:	01cd01cd 	.word	0x01cd01cd
 800ca94:	01cd01cd 	.word	0x01cd01cd
 800ca98:	01cd01cd 	.word	0x01cd01cd
 800ca9c:	019f01cd 	.word	0x019f01cd
 800caa0:	019f019f 	.word	0x019f019f
 800caa4:	019f019f 	.word	0x019f019f
 800caa8:	019f019f 	.word	0x019f019f
 800caac:	019f019f 	.word	0x019f019f
 800cab0:	005c019f 	.word	0x005c019f
 800cab4:	019f019f 	.word	0x019f019f
 800cab8:	019f019f 	.word	0x019f019f
 800cabc:	019f019f 	.word	0x019f019f
 800cac0:	019f019f 	.word	0x019f019f
 800cac4:	019f019f 	.word	0x019f019f
 800cac8:	019f009c 	.word	0x019f009c
 800cacc:	019f019f 	.word	0x019f019f
 800cad0:	019f019f 	.word	0x019f019f
 800cad4:	019f00dd 	.word	0x019f00dd
 800cad8:	0152019f 	.word	0x0152019f
 800cadc:	019f019f 	.word	0x019f019f
 800cae0:	019f019f 	.word	0x019f019f
 800cae4:	019f019f 	.word	0x019f019f
 800cae8:	019f019f 	.word	0x019f019f
 800caec:	019f019f 	.word	0x019f019f
 800caf0:	005e0102 	.word	0x005e0102
 800caf4:	019f019f 	.word	0x019f019f
 800caf8:	00ff019f 	.word	0x00ff019f
 800cafc:	019f005e 	.word	0x019f005e
 800cb00:	0059019f 	.word	0x0059019f
 800cb04:	0172019f 	.word	0x0172019f
 800cb08:	0188009e 	.word	0x0188009e
 800cb0c:	019f0059 	.word	0x019f0059
 800cb10:	019f01af 	.word	0x019f01af
 800cb14:	019f00df 	.word	0x019f00df
 800cb18:	0183019f 	.word	0x0183019f
 800cb1c:	f04b 0b10 	orr.w	fp, fp, #16
 800cb20:	e79a      	b.n	800ca58 <_svfiprintf_r+0xb8>
 800cb22:	f04b 0b10 	orr.w	fp, fp, #16
 800cb26:	f01b 0f10 	tst.w	fp, #16
 800cb2a:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cb2e:	9b07      	ldr	r3, [sp, #28]
 800cb30:	d103      	bne.n	800cb3a <_svfiprintf_r+0x19a>
 800cb32:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800cb36:	f040 8339 	bne.w	800d1ac <_svfiprintf_r+0x80c>
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	9307      	str	r3, [sp, #28]
 800cb40:	2a00      	cmp	r2, #0
 800cb42:	f2c0 833a 	blt.w	800d1ba <_svfiprintf_r+0x81a>
 800cb46:	bf0c      	ite	eq
 800cb48:	2100      	moveq	r1, #0
 800cb4a:	2101      	movne	r1, #1
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	2d00      	cmp	r5, #0
 800cb50:	bfa8      	it	ge
 800cb52:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800cb56:	2d00      	cmp	r5, #0
 800cb58:	bf18      	it	ne
 800cb5a:	f041 0101 	orrne.w	r1, r1, #1
 800cb5e:	2900      	cmp	r1, #0
 800cb60:	d13b      	bne.n	800cbda <_svfiprintf_r+0x23a>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f040 8293 	bne.w	800d08e <_svfiprintf_r+0x6ee>
 800cb68:	f01b 0f01 	tst.w	fp, #1
 800cb6c:	bf04      	itt	eq
 800cb6e:	9305      	streq	r3, [sp, #20]
 800cb70:	f8cd 8028 	streq.w	r8, [sp, #40]	; 0x28
 800cb74:	d007      	beq.n	800cb86 <_svfiprintf_r+0x1e6>
 800cb76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb78:	9305      	str	r3, [sp, #20]
 800cb7a:	2330      	movs	r3, #48	; 0x30
 800cb7c:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 800cb80:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800cb84:	930a      	str	r3, [sp, #40]	; 0x28
 800cb86:	9509      	str	r5, [sp, #36]	; 0x24
 800cb88:	9805      	ldr	r0, [sp, #20]
 800cb8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb8c:	f89d 30b7 	ldrb.w	r3, [sp, #183]	; 0xb7
 800cb90:	4288      	cmp	r0, r1
 800cb92:	bfb8      	it	lt
 800cb94:	4608      	movlt	r0, r1
 800cb96:	9004      	str	r0, [sp, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d078      	beq.n	800cc8e <_svfiprintf_r+0x2ee>
 800cb9c:	3001      	adds	r0, #1
 800cb9e:	9004      	str	r0, [sp, #16]
 800cba0:	e075      	b.n	800cc8e <_svfiprintf_r+0x2ee>
 800cba2:	f04b 0b10 	orr.w	fp, fp, #16
 800cba6:	f01b 0310 	ands.w	r3, fp, #16
 800cbaa:	f000 82c9 	beq.w	800d140 <_svfiprintf_r+0x7a0>
 800cbae:	9b07      	ldr	r3, [sp, #28]
 800cbb0:	9807      	ldr	r0, [sp, #28]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	3004      	adds	r0, #4
 800cbb8:	9007      	str	r0, [sp, #28]
 800cbba:	1ad1      	subs	r1, r2, r3
 800cbbc:	bf18      	it	ne
 800cbbe:	2101      	movne	r1, #1
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 800cbc6:	2d00      	cmp	r5, #0
 800cbc8:	bfa8      	it	ge
 800cbca:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800cbce:	2d00      	cmp	r5, #0
 800cbd0:	bf18      	it	ne
 800cbd2:	f041 0101 	orrne.w	r1, r1, #1
 800cbd6:	2900      	cmp	r1, #0
 800cbd8:	d0c3      	beq.n	800cb62 <_svfiprintf_r+0x1c2>
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	f000 8285 	beq.w	800d0ea <_svfiprintf_r+0x74a>
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	bf18      	it	ne
 800cbe4:	4643      	movne	r3, r8
 800cbe6:	d101      	bne.n	800cbec <_svfiprintf_r+0x24c>
 800cbe8:	e298      	b.n	800d11c <_svfiprintf_r+0x77c>
 800cbea:	4603      	mov	r3, r0
 800cbec:	f002 0107 	and.w	r1, r2, #7
 800cbf0:	1e58      	subs	r0, r3, #1
 800cbf2:	3130      	adds	r1, #48	; 0x30
 800cbf4:	08d2      	lsrs	r2, r2, #3
 800cbf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cbfa:	d1f6      	bne.n	800cbea <_svfiprintf_r+0x24a>
 800cbfc:	f01b 0f01 	tst.w	fp, #1
 800cc00:	900a      	str	r0, [sp, #40]	; 0x28
 800cc02:	bf04      	itt	eq
 800cc04:	ebc0 0308 	rsbeq	r3, r0, r8
 800cc08:	9305      	streq	r3, [sp, #20]
 800cc0a:	d0bc      	beq.n	800cb86 <_svfiprintf_r+0x1e6>
 800cc0c:	2930      	cmp	r1, #48	; 0x30
 800cc0e:	f000 831b 	beq.w	800d248 <_svfiprintf_r+0x8a8>
 800cc12:	1e98      	subs	r0, r3, #2
 800cc14:	2230      	movs	r2, #48	; 0x30
 800cc16:	ebc0 0108 	rsb	r1, r0, r8
 800cc1a:	900a      	str	r0, [sp, #40]	; 0x28
 800cc1c:	9105      	str	r1, [sp, #20]
 800cc1e:	f803 2c02 	strb.w	r2, [r3, #-2]
 800cc22:	e7b0      	b.n	800cb86 <_svfiprintf_r+0x1e6>
 800cc24:	f04b 0b10 	orr.w	fp, fp, #16
 800cc28:	f01b 0f10 	tst.w	fp, #16
 800cc2c:	9b07      	ldr	r3, [sp, #28]
 800cc2e:	d103      	bne.n	800cc38 <_svfiprintf_r+0x298>
 800cc30:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800cc34:	f040 82da 	bne.w	800d1ec <_svfiprintf_r+0x84c>
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	9807      	ldr	r0, [sp, #28]
 800cc3e:	3004      	adds	r0, #4
 800cc40:	1c11      	adds	r1, r2, #0
 800cc42:	9007      	str	r0, [sp, #28]
 800cc44:	bf18      	it	ne
 800cc46:	2101      	movne	r1, #1
 800cc48:	e7ba      	b.n	800cbc0 <_svfiprintf_r+0x220>
 800cc4a:	9b07      	ldr	r3, [sp, #28]
 800cc4c:	9807      	ldr	r0, [sp, #28]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	9308      	str	r3, [sp, #32]
 800cc52:	1d03      	adds	r3, r0, #4
 800cc54:	9908      	ldr	r1, [sp, #32]
 800cc56:	2900      	cmp	r1, #0
 800cc58:	f280 8293 	bge.w	800d182 <_svfiprintf_r+0x7e2>
 800cc5c:	4249      	negs	r1, r1
 800cc5e:	9307      	str	r3, [sp, #28]
 800cc60:	9108      	str	r1, [sp, #32]
 800cc62:	f04b 0b04 	orr.w	fp, fp, #4
 800cc66:	e6f7      	b.n	800ca58 <_svfiprintf_r+0xb8>
 800cc68:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800cc6c:	e6f4      	b.n	800ca58 <_svfiprintf_r+0xb8>
 800cc6e:	9b07      	ldr	r3, [sp, #28]
 800cc70:	2001      	movs	r0, #1
 800cc72:	2200      	movs	r2, #0
 800cc74:	9004      	str	r0, [sp, #16]
 800cc76:	1d19      	adds	r1, r3, #4
 800cc78:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	aa20      	add	r2, sp, #128	; 0x80
 800cc80:	9107      	str	r1, [sp, #28]
 800cc82:	9005      	str	r0, [sp, #20]
 800cc84:	920a      	str	r2, [sp, #40]	; 0x28
 800cc86:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc8e:	f01b 0302 	ands.w	r3, fp, #2
 800cc92:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc94:	d002      	beq.n	800cc9c <_svfiprintf_r+0x2fc>
 800cc96:	9b04      	ldr	r3, [sp, #16]
 800cc98:	3302      	adds	r3, #2
 800cc9a:	9304      	str	r3, [sp, #16]
 800cc9c:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800cca0:	930c      	str	r3, [sp, #48]	; 0x30
 800cca2:	f040 80e3 	bne.w	800ce6c <_svfiprintf_r+0x4cc>
 800cca6:	9b08      	ldr	r3, [sp, #32]
 800cca8:	9804      	ldr	r0, [sp, #16]
 800ccaa:	1a1d      	subs	r5, r3, r0
 800ccac:	2d00      	cmp	r5, #0
 800ccae:	f340 80dd 	ble.w	800ce6c <_svfiprintf_r+0x4cc>
 800ccb2:	2d10      	cmp	r5, #16
 800ccb4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ccb6:	f340 82c4 	ble.w	800d242 <_svfiprintf_r+0x8a2>
 800ccba:	f04f 0910 	mov.w	r9, #16
 800ccbe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ccc0:	4ea4      	ldr	r6, [pc, #656]	; (800cf54 <_svfiprintf_r+0x5b4>)
 800ccc2:	e002      	b.n	800ccca <_svfiprintf_r+0x32a>
 800ccc4:	3d10      	subs	r5, #16
 800ccc6:	2d10      	cmp	r5, #16
 800ccc8:	dd16      	ble.n	800ccf8 <_svfiprintf_r+0x358>
 800ccca:	3301      	adds	r3, #1
 800cccc:	3210      	adds	r2, #16
 800ccce:	e884 0240 	stmia.w	r4, {r6, r9}
 800ccd2:	3408      	adds	r4, #8
 800ccd4:	2b07      	cmp	r3, #7
 800ccd6:	932b      	str	r3, [sp, #172]	; 0xac
 800ccd8:	922c      	str	r2, [sp, #176]	; 0xb0
 800ccda:	ddf3      	ble.n	800ccc4 <_svfiprintf_r+0x324>
 800ccdc:	9803      	ldr	r0, [sp, #12]
 800ccde:	4651      	mov	r1, sl
 800cce0:	4642      	mov	r2, r8
 800cce2:	ac10      	add	r4, sp, #64	; 0x40
 800cce4:	f7ff fdd0 	bl	800c888 <__ssprint_r>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	f040 8180 	bne.w	800cfee <_svfiprintf_r+0x64e>
 800ccee:	3d10      	subs	r5, #16
 800ccf0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ccf2:	2d10      	cmp	r5, #16
 800ccf4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ccf6:	dce8      	bgt.n	800ccca <_svfiprintf_r+0x32a>
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	1952      	adds	r2, r2, r5
 800ccfc:	2b07      	cmp	r3, #7
 800ccfe:	6026      	str	r6, [r4, #0]
 800cd00:	6065      	str	r5, [r4, #4]
 800cd02:	932b      	str	r3, [sp, #172]	; 0xac
 800cd04:	922c      	str	r2, [sp, #176]	; 0xb0
 800cd06:	f300 8226 	bgt.w	800d156 <_svfiprintf_r+0x7b6>
 800cd0a:	3408      	adds	r4, #8
 800cd0c:	e0b0      	b.n	800ce70 <_svfiprintf_r+0x4d0>
 800cd0e:	4992      	ldr	r1, [pc, #584]	; (800cf58 <_svfiprintf_r+0x5b8>)
 800cd10:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cd14:	910d      	str	r1, [sp, #52]	; 0x34
 800cd16:	f01b 0f10 	tst.w	fp, #16
 800cd1a:	d103      	bne.n	800cd24 <_svfiprintf_r+0x384>
 800cd1c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800cd20:	f040 825f 	bne.w	800d1e2 <_svfiprintf_r+0x842>
 800cd24:	9807      	ldr	r0, [sp, #28]
 800cd26:	6802      	ldr	r2, [r0, #0]
 800cd28:	3004      	adds	r0, #4
 800cd2a:	9007      	str	r0, [sp, #28]
 800cd2c:	1c11      	adds	r1, r2, #0
 800cd2e:	bf18      	it	ne
 800cd30:	2101      	movne	r1, #1
 800cd32:	ea1b 0f01 	tst.w	fp, r1
 800cd36:	f000 8201 	beq.w	800d13c <_svfiprintf_r+0x79c>
 800cd3a:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
 800cd3e:	f04b 0b02 	orr.w	fp, fp, #2
 800cd42:	2330      	movs	r3, #48	; 0x30
 800cd44:	2101      	movs	r1, #1
 800cd46:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	e738      	b.n	800cbc0 <_svfiprintf_r+0x220>
 800cd4e:	f01b 0f10 	tst.w	fp, #16
 800cd52:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cd56:	f040 823d 	bne.w	800d1d4 <_svfiprintf_r+0x834>
 800cd5a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800cd5e:	f000 8259 	beq.w	800d214 <_svfiprintf_r+0x874>
 800cd62:	9a07      	ldr	r2, [sp, #28]
 800cd64:	9806      	ldr	r0, [sp, #24]
 800cd66:	6813      	ldr	r3, [r2, #0]
 800cd68:	3204      	adds	r2, #4
 800cd6a:	9207      	str	r2, [sp, #28]
 800cd6c:	8018      	strh	r0, [r3, #0]
 800cd6e:	e639      	b.n	800c9e4 <_svfiprintf_r+0x44>
 800cd70:	497a      	ldr	r1, [pc, #488]	; (800cf5c <_svfiprintf_r+0x5bc>)
 800cd72:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cd76:	910d      	str	r1, [sp, #52]	; 0x34
 800cd78:	e7cd      	b.n	800cd16 <_svfiprintf_r+0x376>
 800cd7a:	9b07      	ldr	r3, [sp, #28]
 800cd7c:	f04b 0b02 	orr.w	fp, fp, #2
 800cd80:	4876      	ldr	r0, [pc, #472]	; (800cf5c <_svfiprintf_r+0x5bc>)
 800cd82:	1d19      	adds	r1, r3, #4
 800cd84:	9107      	str	r1, [sp, #28]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	2178      	movs	r1, #120	; 0x78
 800cd8a:	2330      	movs	r3, #48	; 0x30
 800cd8c:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
 800cd90:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 800cd94:	2302      	movs	r3, #2
 800cd96:	1c11      	adds	r1, r2, #0
 800cd98:	900d      	str	r0, [sp, #52]	; 0x34
 800cd9a:	bf18      	it	ne
 800cd9c:	2101      	movne	r1, #1
 800cd9e:	e70f      	b.n	800cbc0 <_svfiprintf_r+0x220>
 800cda0:	2a00      	cmp	r2, #0
 800cda2:	bf08      	it	eq
 800cda4:	2220      	moveq	r2, #32
 800cda6:	e657      	b.n	800ca58 <_svfiprintf_r+0xb8>
 800cda8:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 8117 	beq.w	800cfe0 <_svfiprintf_r+0x640>
 800cdb2:	2001      	movs	r0, #1
 800cdb4:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800cdb8:	9004      	str	r0, [sp, #16]
 800cdba:	2300      	movs	r3, #0
 800cdbc:	9005      	str	r0, [sp, #20]
 800cdbe:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 800cdc2:	ab20      	add	r3, sp, #128	; 0x80
 800cdc4:	930a      	str	r3, [sp, #40]	; 0x28
 800cdc6:	e760      	b.n	800cc8a <_svfiprintf_r+0x2ea>
 800cdc8:	9b07      	ldr	r3, [sp, #28]
 800cdca:	2600      	movs	r6, #0
 800cdcc:	f88d 60b7 	strb.w	r6, [sp, #183]	; 0xb7
 800cdd0:	1d19      	adds	r1, r3, #4
 800cdd2:	9107      	str	r1, [sp, #28]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	930a      	str	r3, [sp, #40]	; 0x28
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f000 823a 	beq.w	800d252 <_svfiprintf_r+0x8b2>
 800cdde:	2d00      	cmp	r5, #0
 800cde0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cde2:	f2c0 8206 	blt.w	800d1f2 <_svfiprintf_r+0x852>
 800cde6:	4631      	mov	r1, r6
 800cde8:	462a      	mov	r2, r5
 800cdea:	f7fa fc25 	bl	8007638 <memchr>
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	f000 8239 	beq.w	800d266 <_svfiprintf_r+0x8c6>
 800cdf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf6:	9609      	str	r6, [sp, #36]	; 0x24
 800cdf8:	1ac0      	subs	r0, r0, r3
 800cdfa:	9005      	str	r0, [sp, #20]
 800cdfc:	42a8      	cmp	r0, r5
 800cdfe:	bfc8      	it	gt
 800ce00:	9505      	strgt	r5, [sp, #20]
 800ce02:	e6c1      	b.n	800cb88 <_svfiprintf_r+0x1e8>
 800ce04:	4638      	mov	r0, r7
 800ce06:	2100      	movs	r1, #0
 800ce08:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800ce0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ce10:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ce14:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ce18:	4607      	mov	r7, r0
 800ce1a:	2e09      	cmp	r6, #9
 800ce1c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ce20:	d9f2      	bls.n	800ce08 <_svfiprintf_r+0x468>
 800ce22:	9108      	str	r1, [sp, #32]
 800ce24:	e61a      	b.n	800ca5c <_svfiprintf_r+0xbc>
 800ce26:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800ce2a:	e615      	b.n	800ca58 <_svfiprintf_r+0xb8>
 800ce2c:	f817 3b01 	ldrb.w	r3, [r7], #1
 800ce30:	2b2a      	cmp	r3, #42	; 0x2a
 800ce32:	f000 819c 	beq.w	800d16e <_svfiprintf_r+0x7ce>
 800ce36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ce3a:	2500      	movs	r5, #0
 800ce3c:	2909      	cmp	r1, #9
 800ce3e:	f63f ae0d 	bhi.w	800ca5c <_svfiprintf_r+0xbc>
 800ce42:	4638      	mov	r0, r7
 800ce44:	2500      	movs	r5, #0
 800ce46:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ce4a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ce4e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800ce52:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ce56:	2909      	cmp	r1, #9
 800ce58:	4607      	mov	r7, r0
 800ce5a:	d9f4      	bls.n	800ce46 <_svfiprintf_r+0x4a6>
 800ce5c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800ce60:	e5fc      	b.n	800ca5c <_svfiprintf_r+0xbc>
 800ce62:	222b      	movs	r2, #43	; 0x2b
 800ce64:	e5f8      	b.n	800ca58 <_svfiprintf_r+0xb8>
 800ce66:	f04b 0b01 	orr.w	fp, fp, #1
 800ce6a:	e5f5      	b.n	800ca58 <_svfiprintf_r+0xb8>
 800ce6c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ce6e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ce70:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
 800ce74:	b161      	cbz	r1, 800ce90 <_svfiprintf_r+0x4f0>
 800ce76:	3301      	adds	r3, #1
 800ce78:	f10d 01b7 	add.w	r1, sp, #183	; 0xb7
 800ce7c:	6021      	str	r1, [r4, #0]
 800ce7e:	2101      	movs	r1, #1
 800ce80:	2b07      	cmp	r3, #7
 800ce82:	440a      	add	r2, r1
 800ce84:	6061      	str	r1, [r4, #4]
 800ce86:	932b      	str	r3, [sp, #172]	; 0xac
 800ce88:	922c      	str	r2, [sp, #176]	; 0xb0
 800ce8a:	f300 8118 	bgt.w	800d0be <_svfiprintf_r+0x71e>
 800ce8e:	3408      	adds	r4, #8
 800ce90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce92:	b159      	cbz	r1, 800ceac <_svfiprintf_r+0x50c>
 800ce94:	3301      	adds	r3, #1
 800ce96:	a92d      	add	r1, sp, #180	; 0xb4
 800ce98:	6021      	str	r1, [r4, #0]
 800ce9a:	2102      	movs	r1, #2
 800ce9c:	2b07      	cmp	r3, #7
 800ce9e:	440a      	add	r2, r1
 800cea0:	6061      	str	r1, [r4, #4]
 800cea2:	932b      	str	r3, [sp, #172]	; 0xac
 800cea4:	922c      	str	r2, [sp, #176]	; 0xb0
 800cea6:	f300 8115 	bgt.w	800d0d4 <_svfiprintf_r+0x734>
 800ceaa:	3408      	adds	r4, #8
 800ceac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ceae:	2880      	cmp	r0, #128	; 0x80
 800ceb0:	f000 80aa 	beq.w	800d008 <_svfiprintf_r+0x668>
 800ceb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ceb6:	9805      	ldr	r0, [sp, #20]
 800ceb8:	1a0d      	subs	r5, r1, r0
 800ceba:	2d00      	cmp	r5, #0
 800cebc:	dd29      	ble.n	800cf12 <_svfiprintf_r+0x572>
 800cebe:	2d10      	cmp	r5, #16
 800cec0:	4e27      	ldr	r6, [pc, #156]	; (800cf60 <_svfiprintf_r+0x5c0>)
 800cec2:	bfc8      	it	gt
 800cec4:	f04f 0910 	movgt.w	r9, #16
 800cec8:	dc03      	bgt.n	800ced2 <_svfiprintf_r+0x532>
 800ceca:	e018      	b.n	800cefe <_svfiprintf_r+0x55e>
 800cecc:	3d10      	subs	r5, #16
 800cece:	2d10      	cmp	r5, #16
 800ced0:	dd15      	ble.n	800cefe <_svfiprintf_r+0x55e>
 800ced2:	3301      	adds	r3, #1
 800ced4:	3210      	adds	r2, #16
 800ced6:	e884 0240 	stmia.w	r4, {r6, r9}
 800ceda:	3408      	adds	r4, #8
 800cedc:	2b07      	cmp	r3, #7
 800cede:	932b      	str	r3, [sp, #172]	; 0xac
 800cee0:	922c      	str	r2, [sp, #176]	; 0xb0
 800cee2:	ddf3      	ble.n	800cecc <_svfiprintf_r+0x52c>
 800cee4:	9803      	ldr	r0, [sp, #12]
 800cee6:	4651      	mov	r1, sl
 800cee8:	4642      	mov	r2, r8
 800ceea:	ac10      	add	r4, sp, #64	; 0x40
 800ceec:	f7ff fccc 	bl	800c888 <__ssprint_r>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d17c      	bne.n	800cfee <_svfiprintf_r+0x64e>
 800cef4:	3d10      	subs	r5, #16
 800cef6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cef8:	2d10      	cmp	r5, #16
 800cefa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cefc:	dce9      	bgt.n	800ced2 <_svfiprintf_r+0x532>
 800cefe:	3301      	adds	r3, #1
 800cf00:	1952      	adds	r2, r2, r5
 800cf02:	2b07      	cmp	r3, #7
 800cf04:	6026      	str	r6, [r4, #0]
 800cf06:	6065      	str	r5, [r4, #4]
 800cf08:	932b      	str	r3, [sp, #172]	; 0xac
 800cf0a:	922c      	str	r2, [sp, #176]	; 0xb0
 800cf0c:	f300 80cc 	bgt.w	800d0a8 <_svfiprintf_r+0x708>
 800cf10:	3408      	adds	r4, #8
 800cf12:	3301      	adds	r3, #1
 800cf14:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cf16:	9805      	ldr	r0, [sp, #20]
 800cf18:	2b07      	cmp	r3, #7
 800cf1a:	932b      	str	r3, [sp, #172]	; 0xac
 800cf1c:	6021      	str	r1, [r4, #0]
 800cf1e:	4402      	add	r2, r0
 800cf20:	6060      	str	r0, [r4, #4]
 800cf22:	bfd8      	it	le
 800cf24:	f104 0108 	addle.w	r1, r4, #8
 800cf28:	922c      	str	r2, [sp, #176]	; 0xb0
 800cf2a:	f300 809e 	bgt.w	800d06a <_svfiprintf_r+0x6ca>
 800cf2e:	f01b 0f04 	tst.w	fp, #4
 800cf32:	d039      	beq.n	800cfa8 <_svfiprintf_r+0x608>
 800cf34:	9b08      	ldr	r3, [sp, #32]
 800cf36:	9804      	ldr	r0, [sp, #16]
 800cf38:	1a1d      	subs	r5, r3, r0
 800cf3a:	2d00      	cmp	r5, #0
 800cf3c:	dd34      	ble.n	800cfa8 <_svfiprintf_r+0x608>
 800cf3e:	2d10      	cmp	r5, #16
 800cf40:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cf42:	bfd8      	it	le
 800cf44:	4e03      	ldrle	r6, [pc, #12]	; (800cf54 <_svfiprintf_r+0x5b4>)
 800cf46:	dd26      	ble.n	800cf96 <_svfiprintf_r+0x5f6>
 800cf48:	2410      	movs	r4, #16
 800cf4a:	4e02      	ldr	r6, [pc, #8]	; (800cf54 <_svfiprintf_r+0x5b4>)
 800cf4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cf50:	e00b      	b.n	800cf6a <_svfiprintf_r+0x5ca>
 800cf52:	bf00      	nop
 800cf54:	08026eb8 	.word	0x08026eb8
 800cf58:	08028c74 	.word	0x08028c74
 800cf5c:	08028c88 	.word	0x08028c88
 800cf60:	08026ec8 	.word	0x08026ec8
 800cf64:	3d10      	subs	r5, #16
 800cf66:	2d10      	cmp	r5, #16
 800cf68:	dd15      	ble.n	800cf96 <_svfiprintf_r+0x5f6>
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	3210      	adds	r2, #16
 800cf6e:	600e      	str	r6, [r1, #0]
 800cf70:	604c      	str	r4, [r1, #4]
 800cf72:	3108      	adds	r1, #8
 800cf74:	2b07      	cmp	r3, #7
 800cf76:	932b      	str	r3, [sp, #172]	; 0xac
 800cf78:	922c      	str	r2, [sp, #176]	; 0xb0
 800cf7a:	ddf3      	ble.n	800cf64 <_svfiprintf_r+0x5c4>
 800cf7c:	4648      	mov	r0, r9
 800cf7e:	4651      	mov	r1, sl
 800cf80:	4642      	mov	r2, r8
 800cf82:	f7ff fc81 	bl	800c888 <__ssprint_r>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d131      	bne.n	800cfee <_svfiprintf_r+0x64e>
 800cf8a:	3d10      	subs	r5, #16
 800cf8c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800cf8e:	2d10      	cmp	r5, #16
 800cf90:	a910      	add	r1, sp, #64	; 0x40
 800cf92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cf94:	dce9      	bgt.n	800cf6a <_svfiprintf_r+0x5ca>
 800cf96:	3301      	adds	r3, #1
 800cf98:	18aa      	adds	r2, r5, r2
 800cf9a:	2b07      	cmp	r3, #7
 800cf9c:	600e      	str	r6, [r1, #0]
 800cf9e:	604d      	str	r5, [r1, #4]
 800cfa0:	932b      	str	r3, [sp, #172]	; 0xac
 800cfa2:	922c      	str	r2, [sp, #176]	; 0xb0
 800cfa4:	f300 80ef 	bgt.w	800d186 <_svfiprintf_r+0x7e6>
 800cfa8:	9b06      	ldr	r3, [sp, #24]
 800cfaa:	9804      	ldr	r0, [sp, #16]
 800cfac:	9908      	ldr	r1, [sp, #32]
 800cfae:	4288      	cmp	r0, r1
 800cfb0:	bfac      	ite	ge
 800cfb2:	181b      	addge	r3, r3, r0
 800cfb4:	185b      	addlt	r3, r3, r1
 800cfb6:	9306      	str	r3, [sp, #24]
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	d160      	bne.n	800d07e <_svfiprintf_r+0x6de>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	932b      	str	r3, [sp, #172]	; 0xac
 800cfc0:	783b      	ldrb	r3, [r7, #0]
 800cfc2:	ac10      	add	r4, sp, #64	; 0x40
 800cfc4:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 800cfc8:	bf18      	it	ne
 800cfca:	2201      	movne	r2, #1
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	bf0c      	ite	eq
 800cfd0:	2300      	moveq	r3, #0
 800cfd2:	f002 0301 	andne.w	r3, r2, #1
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f47f ad11 	bne.w	800c9fe <_svfiprintf_r+0x5e>
 800cfdc:	463d      	mov	r5, r7
 800cfde:	e52e      	b.n	800ca3e <_svfiprintf_r+0x9e>
 800cfe0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800cfe2:	b123      	cbz	r3, 800cfee <_svfiprintf_r+0x64e>
 800cfe4:	9803      	ldr	r0, [sp, #12]
 800cfe6:	4651      	mov	r1, sl
 800cfe8:	aa2a      	add	r2, sp, #168	; 0xa8
 800cfea:	f7ff fc4d 	bl	800c888 <__ssprint_r>
 800cfee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800cff2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cff6:	9b06      	ldr	r3, [sp, #24]
 800cff8:	bf18      	it	ne
 800cffa:	f04f 33ff 	movne.w	r3, #4294967295
 800cffe:	9306      	str	r3, [sp, #24]
 800d000:	9806      	ldr	r0, [sp, #24]
 800d002:	b02f      	add	sp, #188	; 0xbc
 800d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d008:	9908      	ldr	r1, [sp, #32]
 800d00a:	9804      	ldr	r0, [sp, #16]
 800d00c:	1a0d      	subs	r5, r1, r0
 800d00e:	2d00      	cmp	r5, #0
 800d010:	f77f af50 	ble.w	800ceb4 <_svfiprintf_r+0x514>
 800d014:	2d10      	cmp	r5, #16
 800d016:	4e99      	ldr	r6, [pc, #612]	; (800d27c <_svfiprintf_r+0x8dc>)
 800d018:	bfc8      	it	gt
 800d01a:	f04f 0910 	movgt.w	r9, #16
 800d01e:	dc03      	bgt.n	800d028 <_svfiprintf_r+0x688>
 800d020:	e018      	b.n	800d054 <_svfiprintf_r+0x6b4>
 800d022:	3d10      	subs	r5, #16
 800d024:	2d10      	cmp	r5, #16
 800d026:	dd15      	ble.n	800d054 <_svfiprintf_r+0x6b4>
 800d028:	3301      	adds	r3, #1
 800d02a:	3210      	adds	r2, #16
 800d02c:	e884 0240 	stmia.w	r4, {r6, r9}
 800d030:	3408      	adds	r4, #8
 800d032:	2b07      	cmp	r3, #7
 800d034:	932b      	str	r3, [sp, #172]	; 0xac
 800d036:	922c      	str	r2, [sp, #176]	; 0xb0
 800d038:	ddf3      	ble.n	800d022 <_svfiprintf_r+0x682>
 800d03a:	9803      	ldr	r0, [sp, #12]
 800d03c:	4651      	mov	r1, sl
 800d03e:	4642      	mov	r2, r8
 800d040:	ac10      	add	r4, sp, #64	; 0x40
 800d042:	f7ff fc21 	bl	800c888 <__ssprint_r>
 800d046:	2800      	cmp	r0, #0
 800d048:	d1d1      	bne.n	800cfee <_svfiprintf_r+0x64e>
 800d04a:	3d10      	subs	r5, #16
 800d04c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d04e:	2d10      	cmp	r5, #16
 800d050:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d052:	dce9      	bgt.n	800d028 <_svfiprintf_r+0x688>
 800d054:	3301      	adds	r3, #1
 800d056:	1952      	adds	r2, r2, r5
 800d058:	2b07      	cmp	r3, #7
 800d05a:	6026      	str	r6, [r4, #0]
 800d05c:	6065      	str	r5, [r4, #4]
 800d05e:	932b      	str	r3, [sp, #172]	; 0xac
 800d060:	922c      	str	r2, [sp, #176]	; 0xb0
 800d062:	f300 80cb 	bgt.w	800d1fc <_svfiprintf_r+0x85c>
 800d066:	3408      	adds	r4, #8
 800d068:	e724      	b.n	800ceb4 <_svfiprintf_r+0x514>
 800d06a:	9803      	ldr	r0, [sp, #12]
 800d06c:	4651      	mov	r1, sl
 800d06e:	4642      	mov	r2, r8
 800d070:	f7ff fc0a 	bl	800c888 <__ssprint_r>
 800d074:	2800      	cmp	r0, #0
 800d076:	d1ba      	bne.n	800cfee <_svfiprintf_r+0x64e>
 800d078:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d07a:	a910      	add	r1, sp, #64	; 0x40
 800d07c:	e757      	b.n	800cf2e <_svfiprintf_r+0x58e>
 800d07e:	9803      	ldr	r0, [sp, #12]
 800d080:	4651      	mov	r1, sl
 800d082:	4642      	mov	r2, r8
 800d084:	f7ff fc00 	bl	800c888 <__ssprint_r>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d097      	beq.n	800cfbc <_svfiprintf_r+0x61c>
 800d08c:	e7af      	b.n	800cfee <_svfiprintf_r+0x64e>
 800d08e:	9105      	str	r1, [sp, #20]
 800d090:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d094:	e577      	b.n	800cb86 <_svfiprintf_r+0x1e6>
 800d096:	9803      	ldr	r0, [sp, #12]
 800d098:	4651      	mov	r1, sl
 800d09a:	4642      	mov	r2, r8
 800d09c:	f7ff fbf4 	bl	800c888 <__ssprint_r>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d1a4      	bne.n	800cfee <_svfiprintf_r+0x64e>
 800d0a4:	ac10      	add	r4, sp, #64	; 0x40
 800d0a6:	e4c7      	b.n	800ca38 <_svfiprintf_r+0x98>
 800d0a8:	9803      	ldr	r0, [sp, #12]
 800d0aa:	4651      	mov	r1, sl
 800d0ac:	4642      	mov	r2, r8
 800d0ae:	f7ff fbeb 	bl	800c888 <__ssprint_r>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d19b      	bne.n	800cfee <_svfiprintf_r+0x64e>
 800d0b6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d0b8:	ac10      	add	r4, sp, #64	; 0x40
 800d0ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d0bc:	e729      	b.n	800cf12 <_svfiprintf_r+0x572>
 800d0be:	9803      	ldr	r0, [sp, #12]
 800d0c0:	4651      	mov	r1, sl
 800d0c2:	4642      	mov	r2, r8
 800d0c4:	f7ff fbe0 	bl	800c888 <__ssprint_r>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d190      	bne.n	800cfee <_svfiprintf_r+0x64e>
 800d0cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d0ce:	ac10      	add	r4, sp, #64	; 0x40
 800d0d0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d0d2:	e6dd      	b.n	800ce90 <_svfiprintf_r+0x4f0>
 800d0d4:	9803      	ldr	r0, [sp, #12]
 800d0d6:	4651      	mov	r1, sl
 800d0d8:	4642      	mov	r2, r8
 800d0da:	f7ff fbd5 	bl	800c888 <__ssprint_r>
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	d185      	bne.n	800cfee <_svfiprintf_r+0x64e>
 800d0e2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d0e4:	ac10      	add	r4, sp, #64	; 0x40
 800d0e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d0e8:	e6e0      	b.n	800ceac <_svfiprintf_r+0x50c>
 800d0ea:	2a09      	cmp	r2, #9
 800d0ec:	d955      	bls.n	800d19a <_svfiprintf_r+0x7fa>
 800d0ee:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800d0f2:	f10d 00a7 	add.w	r0, sp, #167	; 0xa7
 800d0f6:	fbac 1302 	umull	r1, r3, ip, r2
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	3801      	subs	r0, #1
 800d0fe:	08db      	lsrs	r3, r3, #3
 800d100:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 800d104:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 800d108:	461a      	mov	r2, r3
 800d10a:	3630      	adds	r6, #48	; 0x30
 800d10c:	700e      	strb	r6, [r1, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1f1      	bne.n	800d0f6 <_svfiprintf_r+0x756>
 800d112:	ebc1 0308 	rsb	r3, r1, r8
 800d116:	910a      	str	r1, [sp, #40]	; 0x28
 800d118:	9305      	str	r3, [sp, #20]
 800d11a:	e534      	b.n	800cb86 <_svfiprintf_r+0x1e6>
 800d11c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d11e:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800d122:	f002 000f 	and.w	r0, r2, #15
 800d126:	4619      	mov	r1, r3
 800d128:	3b01      	subs	r3, #1
 800d12a:	0912      	lsrs	r2, r2, #4
 800d12c:	5c30      	ldrb	r0, [r6, r0]
 800d12e:	7008      	strb	r0, [r1, #0]
 800d130:	d1f7      	bne.n	800d122 <_svfiprintf_r+0x782>
 800d132:	ebc1 0308 	rsb	r3, r1, r8
 800d136:	910a      	str	r1, [sp, #40]	; 0x28
 800d138:	9305      	str	r3, [sp, #20]
 800d13a:	e524      	b.n	800cb86 <_svfiprintf_r+0x1e6>
 800d13c:	2302      	movs	r3, #2
 800d13e:	e53f      	b.n	800cbc0 <_svfiprintf_r+0x220>
 800d140:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800d144:	d042      	beq.n	800d1cc <_svfiprintf_r+0x82c>
 800d146:	9907      	ldr	r1, [sp, #28]
 800d148:	880a      	ldrh	r2, [r1, #0]
 800d14a:	3104      	adds	r1, #4
 800d14c:	9107      	str	r1, [sp, #28]
 800d14e:	1c11      	adds	r1, r2, #0
 800d150:	bf18      	it	ne
 800d152:	2101      	movne	r1, #1
 800d154:	e534      	b.n	800cbc0 <_svfiprintf_r+0x220>
 800d156:	9803      	ldr	r0, [sp, #12]
 800d158:	4651      	mov	r1, sl
 800d15a:	4642      	mov	r2, r8
 800d15c:	f7ff fb94 	bl	800c888 <__ssprint_r>
 800d160:	2800      	cmp	r0, #0
 800d162:	f47f af44 	bne.w	800cfee <_svfiprintf_r+0x64e>
 800d166:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d168:	ac10      	add	r4, sp, #64	; 0x40
 800d16a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d16c:	e680      	b.n	800ce70 <_svfiprintf_r+0x4d0>
 800d16e:	9b07      	ldr	r3, [sp, #28]
 800d170:	681d      	ldr	r5, [r3, #0]
 800d172:	3304      	adds	r3, #4
 800d174:	2d00      	cmp	r5, #0
 800d176:	bfbc      	itt	lt
 800d178:	9307      	strlt	r3, [sp, #28]
 800d17a:	f04f 35ff 	movlt.w	r5, #4294967295
 800d17e:	f6ff ac6b 	blt.w	800ca58 <_svfiprintf_r+0xb8>
 800d182:	9307      	str	r3, [sp, #28]
 800d184:	e468      	b.n	800ca58 <_svfiprintf_r+0xb8>
 800d186:	9803      	ldr	r0, [sp, #12]
 800d188:	4651      	mov	r1, sl
 800d18a:	4642      	mov	r2, r8
 800d18c:	f7ff fb7c 	bl	800c888 <__ssprint_r>
 800d190:	2800      	cmp	r0, #0
 800d192:	f47f af2c 	bne.w	800cfee <_svfiprintf_r+0x64e>
 800d196:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d198:	e706      	b.n	800cfa8 <_svfiprintf_r+0x608>
 800d19a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d19c:	3230      	adds	r2, #48	; 0x30
 800d19e:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 800d1a2:	9305      	str	r3, [sp, #20]
 800d1a4:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800d1a8:	930a      	str	r3, [sp, #40]	; 0x28
 800d1aa:	e4ec      	b.n	800cb86 <_svfiprintf_r+0x1e6>
 800d1ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	9307      	str	r3, [sp, #28]
 800d1b4:	2a00      	cmp	r2, #0
 800d1b6:	f6bf acc6 	bge.w	800cb46 <_svfiprintf_r+0x1a6>
 800d1ba:	4252      	negs	r2, r2
 800d1bc:	1c11      	adds	r1, r2, #0
 800d1be:	bf18      	it	ne
 800d1c0:	2101      	movne	r1, #1
 800d1c2:	232d      	movs	r3, #45	; 0x2d
 800d1c4:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e4fc      	b.n	800cbc6 <_svfiprintf_r+0x226>
 800d1cc:	9b07      	ldr	r3, [sp, #28]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	e533      	b.n	800cc3c <_svfiprintf_r+0x29c>
 800d1d4:	9807      	ldr	r0, [sp, #28]
 800d1d6:	9906      	ldr	r1, [sp, #24]
 800d1d8:	6803      	ldr	r3, [r0, #0]
 800d1da:	3004      	adds	r0, #4
 800d1dc:	9007      	str	r0, [sp, #28]
 800d1de:	6019      	str	r1, [r3, #0]
 800d1e0:	e400      	b.n	800c9e4 <_svfiprintf_r+0x44>
 800d1e2:	9907      	ldr	r1, [sp, #28]
 800d1e4:	880a      	ldrh	r2, [r1, #0]
 800d1e6:	3104      	adds	r1, #4
 800d1e8:	9107      	str	r1, [sp, #28]
 800d1ea:	e59f      	b.n	800cd2c <_svfiprintf_r+0x38c>
 800d1ec:	881a      	ldrh	r2, [r3, #0]
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e524      	b.n	800cc3c <_svfiprintf_r+0x29c>
 800d1f2:	9609      	str	r6, [sp, #36]	; 0x24
 800d1f4:	f7fb f864 	bl	80082c0 <strlen>
 800d1f8:	9005      	str	r0, [sp, #20]
 800d1fa:	e4c5      	b.n	800cb88 <_svfiprintf_r+0x1e8>
 800d1fc:	9803      	ldr	r0, [sp, #12]
 800d1fe:	4651      	mov	r1, sl
 800d200:	4642      	mov	r2, r8
 800d202:	f7ff fb41 	bl	800c888 <__ssprint_r>
 800d206:	2800      	cmp	r0, #0
 800d208:	f47f aef1 	bne.w	800cfee <_svfiprintf_r+0x64e>
 800d20c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d20e:	ac10      	add	r4, sp, #64	; 0x40
 800d210:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d212:	e64f      	b.n	800ceb4 <_svfiprintf_r+0x514>
 800d214:	9907      	ldr	r1, [sp, #28]
 800d216:	9a06      	ldr	r2, [sp, #24]
 800d218:	680b      	ldr	r3, [r1, #0]
 800d21a:	3104      	adds	r1, #4
 800d21c:	9107      	str	r1, [sp, #28]
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	f7ff bbe0 	b.w	800c9e4 <_svfiprintf_r+0x44>
 800d224:	2140      	movs	r1, #64	; 0x40
 800d226:	9201      	str	r2, [sp, #4]
 800d228:	f7f9 ff54 	bl	80070d4 <_malloc_r>
 800d22c:	9a01      	ldr	r2, [sp, #4]
 800d22e:	f8ca 0000 	str.w	r0, [sl]
 800d232:	f8ca 0010 	str.w	r0, [sl, #16]
 800d236:	b1c8      	cbz	r0, 800d26c <_svfiprintf_r+0x8cc>
 800d238:	2340      	movs	r3, #64	; 0x40
 800d23a:	f8ca 3014 	str.w	r3, [sl, #20]
 800d23e:	f7ff bbbc 	b.w	800c9ba <_svfiprintf_r+0x1a>
 800d242:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d244:	4e0e      	ldr	r6, [pc, #56]	; (800d280 <_svfiprintf_r+0x8e0>)
 800d246:	e557      	b.n	800ccf8 <_svfiprintf_r+0x358>
 800d248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d24a:	ebc3 0308 	rsb	r3, r3, r8
 800d24e:	9305      	str	r3, [sp, #20]
 800d250:	e499      	b.n	800cb86 <_svfiprintf_r+0x1e6>
 800d252:	4b0c      	ldr	r3, [pc, #48]	; (800d284 <_svfiprintf_r+0x8e4>)
 800d254:	2d06      	cmp	r5, #6
 800d256:	bf28      	it	cs
 800d258:	2506      	movcs	r5, #6
 800d25a:	9505      	str	r5, [sp, #20]
 800d25c:	930a      	str	r3, [sp, #40]	; 0x28
 800d25e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	e511      	b.n	800cc8a <_svfiprintf_r+0x2ea>
 800d266:	9505      	str	r5, [sp, #20]
 800d268:	9009      	str	r0, [sp, #36]	; 0x24
 800d26a:	e48d      	b.n	800cb88 <_svfiprintf_r+0x1e8>
 800d26c:	9803      	ldr	r0, [sp, #12]
 800d26e:	f04f 33ff 	mov.w	r3, #4294967295
 800d272:	9306      	str	r3, [sp, #24]
 800d274:	230c      	movs	r3, #12
 800d276:	6003      	str	r3, [r0, #0]
 800d278:	e6c2      	b.n	800d000 <_svfiprintf_r+0x660>
 800d27a:	bf00      	nop
 800d27c:	08026ec8 	.word	0x08026ec8
 800d280:	08026eb8 	.word	0x08026eb8
 800d284:	08028c9c 	.word	0x08028c9c

0800d288 <_wcrtomb_r>:
 800d288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d28c:	461e      	mov	r6, r3
 800d28e:	4b10      	ldr	r3, [pc, #64]	; (800d2d0 <_wcrtomb_r+0x48>)
 800d290:	b086      	sub	sp, #24
 800d292:	460c      	mov	r4, r1
 800d294:	4605      	mov	r5, r0
 800d296:	4690      	mov	r8, r2
 800d298:	681f      	ldr	r7, [r3, #0]
 800d29a:	b181      	cbz	r1, 800d2be <_wcrtomb_r+0x36>
 800d29c:	f7fe fd6e 	bl	800bd7c <__locale_charset>
 800d2a0:	9600      	str	r6, [sp, #0]
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	4642      	mov	r2, r8
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	47b8      	blx	r7
 800d2ac:	1c43      	adds	r3, r0, #1
 800d2ae:	d103      	bne.n	800d2b8 <_wcrtomb_r+0x30>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	6033      	str	r3, [r6, #0]
 800d2b4:	238a      	movs	r3, #138	; 0x8a
 800d2b6:	602b      	str	r3, [r5, #0]
 800d2b8:	b006      	add	sp, #24
 800d2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2be:	f7fe fd5d 	bl	800bd7c <__locale_charset>
 800d2c2:	9600      	str	r6, [sp, #0]
 800d2c4:	a903      	add	r1, sp, #12
 800d2c6:	4622      	mov	r2, r4
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	47b8      	blx	r7
 800d2ce:	e7ed      	b.n	800d2ac <_wcrtomb_r+0x24>
 800d2d0:	200008c4 	.word	0x200008c4

0800d2d4 <wcrtomb>:
 800d2d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2d8:	4607      	mov	r7, r0
 800d2da:	b087      	sub	sp, #28
 800d2dc:	4688      	mov	r8, r1
 800d2de:	4614      	mov	r4, r2
 800d2e0:	4d12      	ldr	r5, [pc, #72]	; (800d32c <wcrtomb+0x58>)
 800d2e2:	b1a8      	cbz	r0, 800d310 <wcrtomb+0x3c>
 800d2e4:	4b12      	ldr	r3, [pc, #72]	; (800d330 <wcrtomb+0x5c>)
 800d2e6:	f8d5 9000 	ldr.w	r9, [r5]
 800d2ea:	681e      	ldr	r6, [r3, #0]
 800d2ec:	f7fe fd46 	bl	800bd7c <__locale_charset>
 800d2f0:	9400      	str	r4, [sp, #0]
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	4642      	mov	r2, r8
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	4648      	mov	r0, r9
 800d2fa:	47b0      	blx	r6
 800d2fc:	1c42      	adds	r2, r0, #1
 800d2fe:	d104      	bne.n	800d30a <wcrtomb+0x36>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	2200      	movs	r2, #0
 800d304:	6022      	str	r2, [r4, #0]
 800d306:	228a      	movs	r2, #138	; 0x8a
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	b007      	add	sp, #28
 800d30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d310:	4b07      	ldr	r3, [pc, #28]	; (800d330 <wcrtomb+0x5c>)
 800d312:	f8d5 8000 	ldr.w	r8, [r5]
 800d316:	681e      	ldr	r6, [r3, #0]
 800d318:	f7fe fd30 	bl	800bd7c <__locale_charset>
 800d31c:	9400      	str	r4, [sp, #0]
 800d31e:	a903      	add	r1, sp, #12
 800d320:	463a      	mov	r2, r7
 800d322:	4603      	mov	r3, r0
 800d324:	4640      	mov	r0, r8
 800d326:	47b0      	blx	r6
 800d328:	e7e8      	b.n	800d2fc <wcrtomb+0x28>
 800d32a:	bf00      	nop
 800d32c:	20000008 	.word	0x20000008
 800d330:	200008c4 	.word	0x200008c4

0800d334 <__ascii_wctomb>:
 800d334:	4603      	mov	r3, r0
 800d336:	b121      	cbz	r1, 800d342 <__ascii_wctomb+0xe>
 800d338:	2aff      	cmp	r2, #255	; 0xff
 800d33a:	d804      	bhi.n	800d346 <__ascii_wctomb+0x12>
 800d33c:	700a      	strb	r2, [r1, #0]
 800d33e:	2001      	movs	r0, #1
 800d340:	4770      	bx	lr
 800d342:	4608      	mov	r0, r1
 800d344:	4770      	bx	lr
 800d346:	228a      	movs	r2, #138	; 0x8a
 800d348:	f04f 30ff 	mov.w	r0, #4294967295
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	4770      	bx	lr

0800d350 <_wctomb_r>:
 800d350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d354:	f640 04c4 	movw	r4, #2244	; 0x8c4
 800d358:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800d35c:	b082      	sub	sp, #8
 800d35e:	461e      	mov	r6, r3
 800d360:	4605      	mov	r5, r0
 800d362:	4688      	mov	r8, r1
 800d364:	4617      	mov	r7, r2
 800d366:	6824      	ldr	r4, [r4, #0]
 800d368:	f7fe fd08 	bl	800bd7c <__locale_charset>
 800d36c:	9600      	str	r6, [sp, #0]
 800d36e:	4641      	mov	r1, r8
 800d370:	463a      	mov	r2, r7
 800d372:	4603      	mov	r3, r0
 800d374:	4628      	mov	r0, r5
 800d376:	47a0      	blx	r4
 800d378:	b002      	add	sp, #8
 800d37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d37e:	bf00      	nop

0800d380 <_calloc_r>:
 800d380:	b510      	push	{r4, lr}
 800d382:	fb01 f102 	mul.w	r1, r1, r2
 800d386:	f7f9 fea5 	bl	80070d4 <_malloc_r>
 800d38a:	4604      	mov	r4, r0
 800d38c:	b308      	cbz	r0, 800d3d2 <_calloc_r+0x52>
 800d38e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d392:	f022 0203 	bic.w	r2, r2, #3
 800d396:	3a04      	subs	r2, #4
 800d398:	2a24      	cmp	r2, #36	; 0x24
 800d39a:	d81c      	bhi.n	800d3d6 <_calloc_r+0x56>
 800d39c:	2a13      	cmp	r2, #19
 800d39e:	bf98      	it	ls
 800d3a0:	4602      	movls	r2, r0
 800d3a2:	d912      	bls.n	800d3ca <_calloc_r+0x4a>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	2a1b      	cmp	r2, #27
 800d3a8:	6003      	str	r3, [r0, #0]
 800d3aa:	bf98      	it	ls
 800d3ac:	f100 0208 	addls.w	r2, r0, #8
 800d3b0:	6043      	str	r3, [r0, #4]
 800d3b2:	d90a      	bls.n	800d3ca <_calloc_r+0x4a>
 800d3b4:	2a24      	cmp	r2, #36	; 0x24
 800d3b6:	6083      	str	r3, [r0, #8]
 800d3b8:	bf14      	ite	ne
 800d3ba:	f100 0210 	addne.w	r2, r0, #16
 800d3be:	f100 0218 	addeq.w	r2, r0, #24
 800d3c2:	60c3      	str	r3, [r0, #12]
 800d3c4:	bf04      	itt	eq
 800d3c6:	6103      	streq	r3, [r0, #16]
 800d3c8:	6143      	streq	r3, [r0, #20]
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	6013      	str	r3, [r2, #0]
 800d3ce:	6053      	str	r3, [r2, #4]
 800d3d0:	6093      	str	r3, [r2, #8]
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	bd10      	pop	{r4, pc}
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	f7fa fa48 	bl	800786c <memset>
 800d3dc:	4620      	mov	r0, r4
 800d3de:	bd10      	pop	{r4, pc}

0800d3e0 <_fclose_r>:
 800d3e0:	b570      	push	{r4, r5, r6, lr}
 800d3e2:	460c      	mov	r4, r1
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	460e      	mov	r6, r1
 800d3e8:	2900      	cmp	r1, #0
 800d3ea:	d030      	beq.n	800d44e <_fclose_r+0x6e>
 800d3ec:	f7fe faa0 	bl	800b930 <__sfp_lock_acquire>
 800d3f0:	b115      	cbz	r5, 800d3f8 <_fclose_r+0x18>
 800d3f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d02c      	beq.n	800d452 <_fclose_r+0x72>
 800d3f8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800d3fc:	b32e      	cbz	r6, 800d44a <_fclose_r+0x6a>
 800d3fe:	4628      	mov	r0, r5
 800d400:	4621      	mov	r1, r4
 800d402:	f7fe f901 	bl	800b608 <_fflush_r>
 800d406:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d408:	4606      	mov	r6, r0
 800d40a:	b13b      	cbz	r3, 800d41c <_fclose_r+0x3c>
 800d40c:	69e1      	ldr	r1, [r4, #28]
 800d40e:	4628      	mov	r0, r5
 800d410:	4798      	blx	r3
 800d412:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 800d416:	bf28      	it	cs
 800d418:	f04f 36ff 	movcs.w	r6, #4294967295
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	061b      	lsls	r3, r3, #24
 800d420:	d41f      	bmi.n	800d462 <_fclose_r+0x82>
 800d422:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d424:	b141      	cbz	r1, 800d438 <_fclose_r+0x58>
 800d426:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d42a:	4299      	cmp	r1, r3
 800d42c:	d002      	beq.n	800d434 <_fclose_r+0x54>
 800d42e:	4628      	mov	r0, r5
 800d430:	f7fe fb70 	bl	800bb14 <_free_r>
 800d434:	2300      	movs	r3, #0
 800d436:	6323      	str	r3, [r4, #48]	; 0x30
 800d438:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d43a:	b121      	cbz	r1, 800d446 <_fclose_r+0x66>
 800d43c:	4628      	mov	r0, r5
 800d43e:	f7fe fb69 	bl	800bb14 <_free_r>
 800d442:	2300      	movs	r3, #0
 800d444:	6463      	str	r3, [r4, #68]	; 0x44
 800d446:	2300      	movs	r3, #0
 800d448:	81a3      	strh	r3, [r4, #12]
 800d44a:	f7fe fa73 	bl	800b934 <__sfp_lock_release>
 800d44e:	4630      	mov	r0, r6
 800d450:	bd70      	pop	{r4, r5, r6, pc}
 800d452:	4628      	mov	r0, r5
 800d454:	f7fe f9fa 	bl	800b84c <__sinit>
 800d458:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800d45c:	2e00      	cmp	r6, #0
 800d45e:	d1ce      	bne.n	800d3fe <_fclose_r+0x1e>
 800d460:	e7f3      	b.n	800d44a <_fclose_r+0x6a>
 800d462:	6921      	ldr	r1, [r4, #16]
 800d464:	4628      	mov	r0, r5
 800d466:	f7fe fb55 	bl	800bb14 <_free_r>
 800d46a:	e7da      	b.n	800d422 <_fclose_r+0x42>

0800d46c <fclose>:
 800d46c:	f240 0308 	movw	r3, #8
 800d470:	4601      	mov	r1, r0
 800d472:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d476:	6818      	ldr	r0, [r3, #0]
 800d478:	e7b2      	b.n	800d3e0 <_fclose_r>
 800d47a:	bf00      	nop
 800d47c:	0000      	movs	r0, r0
	...

0800d480 <__aeabi_uidiv>:
 800d480:	1e4a      	subs	r2, r1, #1
 800d482:	bf08      	it	eq
 800d484:	4770      	bxeq	lr
 800d486:	f0c0 8124 	bcc.w	800d6d2 <__aeabi_uidiv+0x252>
 800d48a:	4288      	cmp	r0, r1
 800d48c:	f240 8116 	bls.w	800d6bc <__aeabi_uidiv+0x23c>
 800d490:	4211      	tst	r1, r2
 800d492:	f000 8117 	beq.w	800d6c4 <__aeabi_uidiv+0x244>
 800d496:	fab0 f380 	clz	r3, r0
 800d49a:	fab1 f281 	clz	r2, r1
 800d49e:	eba2 0303 	sub.w	r3, r2, r3
 800d4a2:	f1c3 031f 	rsb	r3, r3, #31
 800d4a6:	a204      	add	r2, pc, #16	; (adr r2, 800d4b8 <__aeabi_uidiv+0x38>)
 800d4a8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800d4ac:	f04f 0200 	mov.w	r2, #0
 800d4b0:	469f      	mov	pc, r3
 800d4b2:	bf00      	nop
 800d4b4:	f3af 8000 	nop.w
 800d4b8:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 800d4bc:	bf00      	nop
 800d4be:	eb42 0202 	adc.w	r2, r2, r2
 800d4c2:	bf28      	it	cs
 800d4c4:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 800d4c8:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 800d4cc:	bf00      	nop
 800d4ce:	eb42 0202 	adc.w	r2, r2, r2
 800d4d2:	bf28      	it	cs
 800d4d4:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 800d4d8:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 800d4dc:	bf00      	nop
 800d4de:	eb42 0202 	adc.w	r2, r2, r2
 800d4e2:	bf28      	it	cs
 800d4e4:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 800d4e8:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 800d4ec:	bf00      	nop
 800d4ee:	eb42 0202 	adc.w	r2, r2, r2
 800d4f2:	bf28      	it	cs
 800d4f4:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 800d4f8:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 800d4fc:	bf00      	nop
 800d4fe:	eb42 0202 	adc.w	r2, r2, r2
 800d502:	bf28      	it	cs
 800d504:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 800d508:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 800d50c:	bf00      	nop
 800d50e:	eb42 0202 	adc.w	r2, r2, r2
 800d512:	bf28      	it	cs
 800d514:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 800d518:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 800d51c:	bf00      	nop
 800d51e:	eb42 0202 	adc.w	r2, r2, r2
 800d522:	bf28      	it	cs
 800d524:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 800d528:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 800d52c:	bf00      	nop
 800d52e:	eb42 0202 	adc.w	r2, r2, r2
 800d532:	bf28      	it	cs
 800d534:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 800d538:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 800d53c:	bf00      	nop
 800d53e:	eb42 0202 	adc.w	r2, r2, r2
 800d542:	bf28      	it	cs
 800d544:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 800d548:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 800d54c:	bf00      	nop
 800d54e:	eb42 0202 	adc.w	r2, r2, r2
 800d552:	bf28      	it	cs
 800d554:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 800d558:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 800d55c:	bf00      	nop
 800d55e:	eb42 0202 	adc.w	r2, r2, r2
 800d562:	bf28      	it	cs
 800d564:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 800d568:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 800d56c:	bf00      	nop
 800d56e:	eb42 0202 	adc.w	r2, r2, r2
 800d572:	bf28      	it	cs
 800d574:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 800d578:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 800d57c:	bf00      	nop
 800d57e:	eb42 0202 	adc.w	r2, r2, r2
 800d582:	bf28      	it	cs
 800d584:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 800d588:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 800d58c:	bf00      	nop
 800d58e:	eb42 0202 	adc.w	r2, r2, r2
 800d592:	bf28      	it	cs
 800d594:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 800d598:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 800d59c:	bf00      	nop
 800d59e:	eb42 0202 	adc.w	r2, r2, r2
 800d5a2:	bf28      	it	cs
 800d5a4:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 800d5a8:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 800d5ac:	bf00      	nop
 800d5ae:	eb42 0202 	adc.w	r2, r2, r2
 800d5b2:	bf28      	it	cs
 800d5b4:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 800d5b8:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 800d5bc:	bf00      	nop
 800d5be:	eb42 0202 	adc.w	r2, r2, r2
 800d5c2:	bf28      	it	cs
 800d5c4:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 800d5c8:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 800d5cc:	bf00      	nop
 800d5ce:	eb42 0202 	adc.w	r2, r2, r2
 800d5d2:	bf28      	it	cs
 800d5d4:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 800d5d8:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 800d5dc:	bf00      	nop
 800d5de:	eb42 0202 	adc.w	r2, r2, r2
 800d5e2:	bf28      	it	cs
 800d5e4:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 800d5e8:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 800d5ec:	bf00      	nop
 800d5ee:	eb42 0202 	adc.w	r2, r2, r2
 800d5f2:	bf28      	it	cs
 800d5f4:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 800d5f8:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 800d5fc:	bf00      	nop
 800d5fe:	eb42 0202 	adc.w	r2, r2, r2
 800d602:	bf28      	it	cs
 800d604:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 800d608:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 800d60c:	bf00      	nop
 800d60e:	eb42 0202 	adc.w	r2, r2, r2
 800d612:	bf28      	it	cs
 800d614:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 800d618:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 800d61c:	bf00      	nop
 800d61e:	eb42 0202 	adc.w	r2, r2, r2
 800d622:	bf28      	it	cs
 800d624:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 800d628:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 800d62c:	bf00      	nop
 800d62e:	eb42 0202 	adc.w	r2, r2, r2
 800d632:	bf28      	it	cs
 800d634:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 800d638:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 800d63c:	bf00      	nop
 800d63e:	eb42 0202 	adc.w	r2, r2, r2
 800d642:	bf28      	it	cs
 800d644:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 800d648:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 800d64c:	bf00      	nop
 800d64e:	eb42 0202 	adc.w	r2, r2, r2
 800d652:	bf28      	it	cs
 800d654:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 800d658:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 800d65c:	bf00      	nop
 800d65e:	eb42 0202 	adc.w	r2, r2, r2
 800d662:	bf28      	it	cs
 800d664:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 800d668:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 800d66c:	bf00      	nop
 800d66e:	eb42 0202 	adc.w	r2, r2, r2
 800d672:	bf28      	it	cs
 800d674:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 800d678:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 800d67c:	bf00      	nop
 800d67e:	eb42 0202 	adc.w	r2, r2, r2
 800d682:	bf28      	it	cs
 800d684:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 800d688:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 800d68c:	bf00      	nop
 800d68e:	eb42 0202 	adc.w	r2, r2, r2
 800d692:	bf28      	it	cs
 800d694:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 800d698:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 800d69c:	bf00      	nop
 800d69e:	eb42 0202 	adc.w	r2, r2, r2
 800d6a2:	bf28      	it	cs
 800d6a4:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 800d6a8:	ebb0 0f01 	cmp.w	r0, r1
 800d6ac:	bf00      	nop
 800d6ae:	eb42 0202 	adc.w	r2, r2, r2
 800d6b2:	bf28      	it	cs
 800d6b4:	eba0 0001 	subcs.w	r0, r0, r1
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	4770      	bx	lr
 800d6bc:	bf0c      	ite	eq
 800d6be:	2001      	moveq	r0, #1
 800d6c0:	2000      	movne	r0, #0
 800d6c2:	4770      	bx	lr
 800d6c4:	fab1 f281 	clz	r2, r1
 800d6c8:	f1c2 021f 	rsb	r2, r2, #31
 800d6cc:	fa20 f002 	lsr.w	r0, r0, r2
 800d6d0:	4770      	bx	lr
 800d6d2:	b108      	cbz	r0, 800d6d8 <__aeabi_uidiv+0x258>
 800d6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d8:	f000 b80e 	b.w	800d6f8 <__aeabi_idiv0>

0800d6dc <__aeabi_uidivmod>:
 800d6dc:	2900      	cmp	r1, #0
 800d6de:	d0f8      	beq.n	800d6d2 <__aeabi_uidiv+0x252>
 800d6e0:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 800d6e4:	f7ff fecc 	bl	800d480 <__aeabi_uidiv>
 800d6e8:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 800d6ec:	fb02 f300 	mul.w	r3, r2, r0
 800d6f0:	eba1 0103 	sub.w	r1, r1, r3
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop

0800d6f8 <__aeabi_idiv0>:
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop

0800d6fc <__aeabi_drsub>:
 800d6fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800d700:	e002      	b.n	800d708 <__adddf3>
 800d702:	bf00      	nop

0800d704 <__aeabi_dsub>:
 800d704:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800d708 <__adddf3>:
 800d708:	b530      	push	{r4, r5, lr}
 800d70a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800d70e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d712:	ea94 0f05 	teq	r4, r5
 800d716:	bf08      	it	eq
 800d718:	ea90 0f02 	teqeq	r0, r2
 800d71c:	bf1f      	itttt	ne
 800d71e:	ea54 0c00 	orrsne.w	ip, r4, r0
 800d722:	ea55 0c02 	orrsne.w	ip, r5, r2
 800d726:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800d72a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d72e:	f000 80e2 	beq.w	800d8f6 <__adddf3+0x1ee>
 800d732:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800d736:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800d73a:	bfb8      	it	lt
 800d73c:	426d      	neglt	r5, r5
 800d73e:	dd0c      	ble.n	800d75a <__adddf3+0x52>
 800d740:	442c      	add	r4, r5
 800d742:	ea80 0202 	eor.w	r2, r0, r2
 800d746:	ea81 0303 	eor.w	r3, r1, r3
 800d74a:	ea82 0000 	eor.w	r0, r2, r0
 800d74e:	ea83 0101 	eor.w	r1, r3, r1
 800d752:	ea80 0202 	eor.w	r2, r0, r2
 800d756:	ea81 0303 	eor.w	r3, r1, r3
 800d75a:	2d36      	cmp	r5, #54	; 0x36
 800d75c:	bf88      	it	hi
 800d75e:	bd30      	pophi	{r4, r5, pc}
 800d760:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d768:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800d76c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800d770:	d002      	beq.n	800d778 <__adddf3+0x70>
 800d772:	4240      	negs	r0, r0
 800d774:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d778:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800d77c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d780:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800d784:	d002      	beq.n	800d78c <__adddf3+0x84>
 800d786:	4252      	negs	r2, r2
 800d788:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d78c:	ea94 0f05 	teq	r4, r5
 800d790:	f000 80a7 	beq.w	800d8e2 <__adddf3+0x1da>
 800d794:	f1a4 0401 	sub.w	r4, r4, #1
 800d798:	f1d5 0e20 	rsbs	lr, r5, #32
 800d79c:	db0d      	blt.n	800d7ba <__adddf3+0xb2>
 800d79e:	fa02 fc0e 	lsl.w	ip, r2, lr
 800d7a2:	fa22 f205 	lsr.w	r2, r2, r5
 800d7a6:	1880      	adds	r0, r0, r2
 800d7a8:	f141 0100 	adc.w	r1, r1, #0
 800d7ac:	fa03 f20e 	lsl.w	r2, r3, lr
 800d7b0:	1880      	adds	r0, r0, r2
 800d7b2:	fa43 f305 	asr.w	r3, r3, r5
 800d7b6:	4159      	adcs	r1, r3
 800d7b8:	e00e      	b.n	800d7d8 <__adddf3+0xd0>
 800d7ba:	f1a5 0520 	sub.w	r5, r5, #32
 800d7be:	f10e 0e20 	add.w	lr, lr, #32
 800d7c2:	2a01      	cmp	r2, #1
 800d7c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 800d7c8:	bf28      	it	cs
 800d7ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 800d7ce:	fa43 f305 	asr.w	r3, r3, r5
 800d7d2:	18c0      	adds	r0, r0, r3
 800d7d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800d7d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d7dc:	d507      	bpl.n	800d7ee <__adddf3+0xe6>
 800d7de:	f04f 0e00 	mov.w	lr, #0
 800d7e2:	f1dc 0c00 	rsbs	ip, ip, #0
 800d7e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 800d7ea:	eb6e 0101 	sbc.w	r1, lr, r1
 800d7ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d7f2:	d31b      	bcc.n	800d82c <__adddf3+0x124>
 800d7f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800d7f8:	d30c      	bcc.n	800d814 <__adddf3+0x10c>
 800d7fa:	0849      	lsrs	r1, r1, #1
 800d7fc:	ea5f 0030 	movs.w	r0, r0, rrx
 800d800:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800d804:	f104 0401 	add.w	r4, r4, #1
 800d808:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800d80c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800d810:	f080 809a 	bcs.w	800d948 <__adddf3+0x240>
 800d814:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800d818:	bf08      	it	eq
 800d81a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800d81e:	f150 0000 	adcs.w	r0, r0, #0
 800d822:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d826:	ea41 0105 	orr.w	r1, r1, r5
 800d82a:	bd30      	pop	{r4, r5, pc}
 800d82c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800d830:	4140      	adcs	r0, r0
 800d832:	eb41 0101 	adc.w	r1, r1, r1
 800d836:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d83a:	f1a4 0401 	sub.w	r4, r4, #1
 800d83e:	d1e9      	bne.n	800d814 <__adddf3+0x10c>
 800d840:	f091 0f00 	teq	r1, #0
 800d844:	bf04      	itt	eq
 800d846:	4601      	moveq	r1, r0
 800d848:	2000      	moveq	r0, #0
 800d84a:	fab1 f381 	clz	r3, r1
 800d84e:	bf08      	it	eq
 800d850:	3320      	addeq	r3, #32
 800d852:	f1a3 030b 	sub.w	r3, r3, #11
 800d856:	f1b3 0220 	subs.w	r2, r3, #32
 800d85a:	da0c      	bge.n	800d876 <__adddf3+0x16e>
 800d85c:	320c      	adds	r2, #12
 800d85e:	dd08      	ble.n	800d872 <__adddf3+0x16a>
 800d860:	f102 0c14 	add.w	ip, r2, #20
 800d864:	f1c2 020c 	rsb	r2, r2, #12
 800d868:	fa01 f00c 	lsl.w	r0, r1, ip
 800d86c:	fa21 f102 	lsr.w	r1, r1, r2
 800d870:	e00c      	b.n	800d88c <__adddf3+0x184>
 800d872:	f102 0214 	add.w	r2, r2, #20
 800d876:	bfd8      	it	le
 800d878:	f1c2 0c20 	rsble	ip, r2, #32
 800d87c:	fa01 f102 	lsl.w	r1, r1, r2
 800d880:	fa20 fc0c 	lsr.w	ip, r0, ip
 800d884:	bfdc      	itt	le
 800d886:	ea41 010c 	orrle.w	r1, r1, ip
 800d88a:	4090      	lslle	r0, r2
 800d88c:	1ae4      	subs	r4, r4, r3
 800d88e:	bfa2      	ittt	ge
 800d890:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800d894:	4329      	orrge	r1, r5
 800d896:	bd30      	popge	{r4, r5, pc}
 800d898:	ea6f 0404 	mvn.w	r4, r4
 800d89c:	3c1f      	subs	r4, #31
 800d89e:	da1c      	bge.n	800d8da <__adddf3+0x1d2>
 800d8a0:	340c      	adds	r4, #12
 800d8a2:	dc0e      	bgt.n	800d8c2 <__adddf3+0x1ba>
 800d8a4:	f104 0414 	add.w	r4, r4, #20
 800d8a8:	f1c4 0220 	rsb	r2, r4, #32
 800d8ac:	fa20 f004 	lsr.w	r0, r0, r4
 800d8b0:	fa01 f302 	lsl.w	r3, r1, r2
 800d8b4:	ea40 0003 	orr.w	r0, r0, r3
 800d8b8:	fa21 f304 	lsr.w	r3, r1, r4
 800d8bc:	ea45 0103 	orr.w	r1, r5, r3
 800d8c0:	bd30      	pop	{r4, r5, pc}
 800d8c2:	f1c4 040c 	rsb	r4, r4, #12
 800d8c6:	f1c4 0220 	rsb	r2, r4, #32
 800d8ca:	fa20 f002 	lsr.w	r0, r0, r2
 800d8ce:	fa01 f304 	lsl.w	r3, r1, r4
 800d8d2:	ea40 0003 	orr.w	r0, r0, r3
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	bd30      	pop	{r4, r5, pc}
 800d8da:	fa21 f004 	lsr.w	r0, r1, r4
 800d8de:	4629      	mov	r1, r5
 800d8e0:	bd30      	pop	{r4, r5, pc}
 800d8e2:	f094 0f00 	teq	r4, #0
 800d8e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800d8ea:	bf06      	itte	eq
 800d8ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800d8f0:	3401      	addeq	r4, #1
 800d8f2:	3d01      	subne	r5, #1
 800d8f4:	e74e      	b.n	800d794 <__adddf3+0x8c>
 800d8f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d8fa:	bf18      	it	ne
 800d8fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d900:	d029      	beq.n	800d956 <__adddf3+0x24e>
 800d902:	ea94 0f05 	teq	r4, r5
 800d906:	bf08      	it	eq
 800d908:	ea90 0f02 	teqeq	r0, r2
 800d90c:	d005      	beq.n	800d91a <__adddf3+0x212>
 800d90e:	ea54 0c00 	orrs.w	ip, r4, r0
 800d912:	bf04      	itt	eq
 800d914:	4619      	moveq	r1, r3
 800d916:	4610      	moveq	r0, r2
 800d918:	bd30      	pop	{r4, r5, pc}
 800d91a:	ea91 0f03 	teq	r1, r3
 800d91e:	bf1e      	ittt	ne
 800d920:	2100      	movne	r1, #0
 800d922:	2000      	movne	r0, #0
 800d924:	bd30      	popne	{r4, r5, pc}
 800d926:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800d92a:	d105      	bne.n	800d938 <__adddf3+0x230>
 800d92c:	0040      	lsls	r0, r0, #1
 800d92e:	4149      	adcs	r1, r1
 800d930:	bf28      	it	cs
 800d932:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800d936:	bd30      	pop	{r4, r5, pc}
 800d938:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800d93c:	bf3c      	itt	cc
 800d93e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800d942:	bd30      	popcc	{r4, r5, pc}
 800d944:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d948:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800d94c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d950:	f04f 0000 	mov.w	r0, #0
 800d954:	bd30      	pop	{r4, r5, pc}
 800d956:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d95a:	bf1a      	itte	ne
 800d95c:	4619      	movne	r1, r3
 800d95e:	4610      	movne	r0, r2
 800d960:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800d964:	bf1c      	itt	ne
 800d966:	460b      	movne	r3, r1
 800d968:	4602      	movne	r2, r0
 800d96a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800d96e:	bf06      	itte	eq
 800d970:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800d974:	ea91 0f03 	teqeq	r1, r3
 800d978:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800d97c:	bd30      	pop	{r4, r5, pc}
 800d97e:	bf00      	nop

0800d980 <__aeabi_ui2d>:
 800d980:	f090 0f00 	teq	r0, #0
 800d984:	bf04      	itt	eq
 800d986:	2100      	moveq	r1, #0
 800d988:	4770      	bxeq	lr
 800d98a:	b530      	push	{r4, r5, lr}
 800d98c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d990:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d994:	f04f 0500 	mov.w	r5, #0
 800d998:	f04f 0100 	mov.w	r1, #0
 800d99c:	e750      	b.n	800d840 <__adddf3+0x138>
 800d99e:	bf00      	nop

0800d9a0 <__aeabi_i2d>:
 800d9a0:	f090 0f00 	teq	r0, #0
 800d9a4:	bf04      	itt	eq
 800d9a6:	2100      	moveq	r1, #0
 800d9a8:	4770      	bxeq	lr
 800d9aa:	b530      	push	{r4, r5, lr}
 800d9ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d9b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d9b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800d9b8:	bf48      	it	mi
 800d9ba:	4240      	negmi	r0, r0
 800d9bc:	f04f 0100 	mov.w	r1, #0
 800d9c0:	e73e      	b.n	800d840 <__adddf3+0x138>
 800d9c2:	bf00      	nop

0800d9c4 <__aeabi_f2d>:
 800d9c4:	0042      	lsls	r2, r0, #1
 800d9c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800d9ca:	ea4f 0131 	mov.w	r1, r1, rrx
 800d9ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800d9d2:	bf1f      	itttt	ne
 800d9d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800d9d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800d9dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800d9e0:	4770      	bxne	lr
 800d9e2:	f092 0f00 	teq	r2, #0
 800d9e6:	bf14      	ite	ne
 800d9e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800d9ec:	4770      	bxeq	lr
 800d9ee:	b530      	push	{r4, r5, lr}
 800d9f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 800d9f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d9f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d9fc:	e720      	b.n	800d840 <__adddf3+0x138>
 800d9fe:	bf00      	nop

0800da00 <__aeabi_ul2d>:
 800da00:	ea50 0201 	orrs.w	r2, r0, r1
 800da04:	bf08      	it	eq
 800da06:	4770      	bxeq	lr
 800da08:	b530      	push	{r4, r5, lr}
 800da0a:	f04f 0500 	mov.w	r5, #0
 800da0e:	e00a      	b.n	800da26 <__aeabi_l2d+0x16>

0800da10 <__aeabi_l2d>:
 800da10:	ea50 0201 	orrs.w	r2, r0, r1
 800da14:	bf08      	it	eq
 800da16:	4770      	bxeq	lr
 800da18:	b530      	push	{r4, r5, lr}
 800da1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800da1e:	d502      	bpl.n	800da26 <__aeabi_l2d+0x16>
 800da20:	4240      	negs	r0, r0
 800da22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800da26:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800da2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800da2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800da32:	f43f aedc 	beq.w	800d7ee <__adddf3+0xe6>
 800da36:	f04f 0203 	mov.w	r2, #3
 800da3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800da3e:	bf18      	it	ne
 800da40:	3203      	addne	r2, #3
 800da42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800da46:	bf18      	it	ne
 800da48:	3203      	addne	r2, #3
 800da4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800da4e:	f1c2 0320 	rsb	r3, r2, #32
 800da52:	fa00 fc03 	lsl.w	ip, r0, r3
 800da56:	fa20 f002 	lsr.w	r0, r0, r2
 800da5a:	fa01 fe03 	lsl.w	lr, r1, r3
 800da5e:	ea40 000e 	orr.w	r0, r0, lr
 800da62:	fa21 f102 	lsr.w	r1, r1, r2
 800da66:	4414      	add	r4, r2
 800da68:	e6c1      	b.n	800d7ee <__adddf3+0xe6>
 800da6a:	bf00      	nop

0800da6c <__aeabi_dmul>:
 800da6c:	b570      	push	{r4, r5, r6, lr}
 800da6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800da72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800da76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800da7a:	bf1d      	ittte	ne
 800da7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800da80:	ea94 0f0c 	teqne	r4, ip
 800da84:	ea95 0f0c 	teqne	r5, ip
 800da88:	f000 f8de 	bleq	800dc48 <__aeabi_dmul+0x1dc>
 800da8c:	442c      	add	r4, r5
 800da8e:	ea81 0603 	eor.w	r6, r1, r3
 800da92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800da96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800da9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800da9e:	bf18      	it	ne
 800daa0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800daa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800daa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800daac:	d038      	beq.n	800db20 <__aeabi_dmul+0xb4>
 800daae:	fba0 ce02 	umull	ip, lr, r0, r2
 800dab2:	f04f 0500 	mov.w	r5, #0
 800dab6:	fbe1 e502 	umlal	lr, r5, r1, r2
 800daba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800dabe:	fbe0 e503 	umlal	lr, r5, r0, r3
 800dac2:	f04f 0600 	mov.w	r6, #0
 800dac6:	fbe1 5603 	umlal	r5, r6, r1, r3
 800daca:	f09c 0f00 	teq	ip, #0
 800dace:	bf18      	it	ne
 800dad0:	f04e 0e01 	orrne.w	lr, lr, #1
 800dad4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800dad8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800dadc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800dae0:	d204      	bcs.n	800daec <__aeabi_dmul+0x80>
 800dae2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800dae6:	416d      	adcs	r5, r5
 800dae8:	eb46 0606 	adc.w	r6, r6, r6
 800daec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800daf0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800daf4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800daf8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800dafc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800db00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800db04:	bf88      	it	hi
 800db06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800db0a:	d81e      	bhi.n	800db4a <__aeabi_dmul+0xde>
 800db0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800db10:	bf08      	it	eq
 800db12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800db16:	f150 0000 	adcs.w	r0, r0, #0
 800db1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800db1e:	bd70      	pop	{r4, r5, r6, pc}
 800db20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800db24:	ea46 0101 	orr.w	r1, r6, r1
 800db28:	ea40 0002 	orr.w	r0, r0, r2
 800db2c:	ea81 0103 	eor.w	r1, r1, r3
 800db30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800db34:	bfc2      	ittt	gt
 800db36:	ebd4 050c 	rsbsgt	r5, r4, ip
 800db3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800db3e:	bd70      	popgt	{r4, r5, r6, pc}
 800db40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800db44:	f04f 0e00 	mov.w	lr, #0
 800db48:	3c01      	subs	r4, #1
 800db4a:	f300 80ab 	bgt.w	800dca4 <__aeabi_dmul+0x238>
 800db4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800db52:	bfde      	ittt	le
 800db54:	2000      	movle	r0, #0
 800db56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800db5a:	bd70      	pople	{r4, r5, r6, pc}
 800db5c:	f1c4 0400 	rsb	r4, r4, #0
 800db60:	3c20      	subs	r4, #32
 800db62:	da35      	bge.n	800dbd0 <__aeabi_dmul+0x164>
 800db64:	340c      	adds	r4, #12
 800db66:	dc1b      	bgt.n	800dba0 <__aeabi_dmul+0x134>
 800db68:	f104 0414 	add.w	r4, r4, #20
 800db6c:	f1c4 0520 	rsb	r5, r4, #32
 800db70:	fa00 f305 	lsl.w	r3, r0, r5
 800db74:	fa20 f004 	lsr.w	r0, r0, r4
 800db78:	fa01 f205 	lsl.w	r2, r1, r5
 800db7c:	ea40 0002 	orr.w	r0, r0, r2
 800db80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800db84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800db88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800db8c:	fa21 f604 	lsr.w	r6, r1, r4
 800db90:	eb42 0106 	adc.w	r1, r2, r6
 800db94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800db98:	bf08      	it	eq
 800db9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800db9e:	bd70      	pop	{r4, r5, r6, pc}
 800dba0:	f1c4 040c 	rsb	r4, r4, #12
 800dba4:	f1c4 0520 	rsb	r5, r4, #32
 800dba8:	fa00 f304 	lsl.w	r3, r0, r4
 800dbac:	fa20 f005 	lsr.w	r0, r0, r5
 800dbb0:	fa01 f204 	lsl.w	r2, r1, r4
 800dbb4:	ea40 0002 	orr.w	r0, r0, r2
 800dbb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800dbbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800dbc0:	f141 0100 	adc.w	r1, r1, #0
 800dbc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800dbc8:	bf08      	it	eq
 800dbca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800dbce:	bd70      	pop	{r4, r5, r6, pc}
 800dbd0:	f1c4 0520 	rsb	r5, r4, #32
 800dbd4:	fa00 f205 	lsl.w	r2, r0, r5
 800dbd8:	ea4e 0e02 	orr.w	lr, lr, r2
 800dbdc:	fa20 f304 	lsr.w	r3, r0, r4
 800dbe0:	fa01 f205 	lsl.w	r2, r1, r5
 800dbe4:	ea43 0302 	orr.w	r3, r3, r2
 800dbe8:	fa21 f004 	lsr.w	r0, r1, r4
 800dbec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800dbf0:	fa21 f204 	lsr.w	r2, r1, r4
 800dbf4:	ea20 0002 	bic.w	r0, r0, r2
 800dbf8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800dbfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800dc00:	bf08      	it	eq
 800dc02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800dc06:	bd70      	pop	{r4, r5, r6, pc}
 800dc08:	f094 0f00 	teq	r4, #0
 800dc0c:	d10f      	bne.n	800dc2e <__aeabi_dmul+0x1c2>
 800dc0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800dc12:	0040      	lsls	r0, r0, #1
 800dc14:	eb41 0101 	adc.w	r1, r1, r1
 800dc18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800dc1c:	bf08      	it	eq
 800dc1e:	3c01      	subeq	r4, #1
 800dc20:	d0f7      	beq.n	800dc12 <__aeabi_dmul+0x1a6>
 800dc22:	ea41 0106 	orr.w	r1, r1, r6
 800dc26:	f095 0f00 	teq	r5, #0
 800dc2a:	bf18      	it	ne
 800dc2c:	4770      	bxne	lr
 800dc2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800dc32:	0052      	lsls	r2, r2, #1
 800dc34:	eb43 0303 	adc.w	r3, r3, r3
 800dc38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800dc3c:	bf08      	it	eq
 800dc3e:	3d01      	subeq	r5, #1
 800dc40:	d0f7      	beq.n	800dc32 <__aeabi_dmul+0x1c6>
 800dc42:	ea43 0306 	orr.w	r3, r3, r6
 800dc46:	4770      	bx	lr
 800dc48:	ea94 0f0c 	teq	r4, ip
 800dc4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800dc50:	bf18      	it	ne
 800dc52:	ea95 0f0c 	teqne	r5, ip
 800dc56:	d00c      	beq.n	800dc72 <__aeabi_dmul+0x206>
 800dc58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800dc5c:	bf18      	it	ne
 800dc5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800dc62:	d1d1      	bne.n	800dc08 <__aeabi_dmul+0x19c>
 800dc64:	ea81 0103 	eor.w	r1, r1, r3
 800dc68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800dc6c:	f04f 0000 	mov.w	r0, #0
 800dc70:	bd70      	pop	{r4, r5, r6, pc}
 800dc72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800dc76:	bf06      	itte	eq
 800dc78:	4610      	moveq	r0, r2
 800dc7a:	4619      	moveq	r1, r3
 800dc7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800dc80:	d019      	beq.n	800dcb6 <__aeabi_dmul+0x24a>
 800dc82:	ea94 0f0c 	teq	r4, ip
 800dc86:	d102      	bne.n	800dc8e <__aeabi_dmul+0x222>
 800dc88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800dc8c:	d113      	bne.n	800dcb6 <__aeabi_dmul+0x24a>
 800dc8e:	ea95 0f0c 	teq	r5, ip
 800dc92:	d105      	bne.n	800dca0 <__aeabi_dmul+0x234>
 800dc94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800dc98:	bf1c      	itt	ne
 800dc9a:	4610      	movne	r0, r2
 800dc9c:	4619      	movne	r1, r3
 800dc9e:	d10a      	bne.n	800dcb6 <__aeabi_dmul+0x24a>
 800dca0:	ea81 0103 	eor.w	r1, r1, r3
 800dca4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800dca8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800dcac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dcb0:	f04f 0000 	mov.w	r0, #0
 800dcb4:	bd70      	pop	{r4, r5, r6, pc}
 800dcb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800dcba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}

0800dcc0 <__aeabi_ddiv>:
 800dcc0:	b570      	push	{r4, r5, r6, lr}
 800dcc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800dcc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800dcca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800dcce:	bf1d      	ittte	ne
 800dcd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800dcd4:	ea94 0f0c 	teqne	r4, ip
 800dcd8:	ea95 0f0c 	teqne	r5, ip
 800dcdc:	f000 f8a7 	bleq	800de2e <__aeabi_ddiv+0x16e>
 800dce0:	eba4 0405 	sub.w	r4, r4, r5
 800dce4:	ea81 0e03 	eor.w	lr, r1, r3
 800dce8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800dcec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800dcf0:	f000 8088 	beq.w	800de04 <__aeabi_ddiv+0x144>
 800dcf4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800dcf8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800dcfc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800dd00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800dd04:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800dd08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800dd0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800dd10:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800dd14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800dd18:	429d      	cmp	r5, r3
 800dd1a:	bf08      	it	eq
 800dd1c:	4296      	cmpeq	r6, r2
 800dd1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800dd22:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800dd26:	d202      	bcs.n	800dd2e <__aeabi_ddiv+0x6e>
 800dd28:	085b      	lsrs	r3, r3, #1
 800dd2a:	ea4f 0232 	mov.w	r2, r2, rrx
 800dd2e:	1ab6      	subs	r6, r6, r2
 800dd30:	eb65 0503 	sbc.w	r5, r5, r3
 800dd34:	085b      	lsrs	r3, r3, #1
 800dd36:	ea4f 0232 	mov.w	r2, r2, rrx
 800dd3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dd3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800dd42:	ebb6 0e02 	subs.w	lr, r6, r2
 800dd46:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dd4a:	bf22      	ittt	cs
 800dd4c:	1ab6      	subcs	r6, r6, r2
 800dd4e:	4675      	movcs	r5, lr
 800dd50:	ea40 000c 	orrcs.w	r0, r0, ip
 800dd54:	085b      	lsrs	r3, r3, #1
 800dd56:	ea4f 0232 	mov.w	r2, r2, rrx
 800dd5a:	ebb6 0e02 	subs.w	lr, r6, r2
 800dd5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dd62:	bf22      	ittt	cs
 800dd64:	1ab6      	subcs	r6, r6, r2
 800dd66:	4675      	movcs	r5, lr
 800dd68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800dd6c:	085b      	lsrs	r3, r3, #1
 800dd6e:	ea4f 0232 	mov.w	r2, r2, rrx
 800dd72:	ebb6 0e02 	subs.w	lr, r6, r2
 800dd76:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dd7a:	bf22      	ittt	cs
 800dd7c:	1ab6      	subcs	r6, r6, r2
 800dd7e:	4675      	movcs	r5, lr
 800dd80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800dd84:	085b      	lsrs	r3, r3, #1
 800dd86:	ea4f 0232 	mov.w	r2, r2, rrx
 800dd8a:	ebb6 0e02 	subs.w	lr, r6, r2
 800dd8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dd92:	bf22      	ittt	cs
 800dd94:	1ab6      	subcs	r6, r6, r2
 800dd96:	4675      	movcs	r5, lr
 800dd98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800dd9c:	ea55 0e06 	orrs.w	lr, r5, r6
 800dda0:	d018      	beq.n	800ddd4 <__aeabi_ddiv+0x114>
 800dda2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800dda6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800ddaa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800ddae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ddb2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800ddb6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ddba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800ddbe:	d1c0      	bne.n	800dd42 <__aeabi_ddiv+0x82>
 800ddc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ddc4:	d10b      	bne.n	800ddde <__aeabi_ddiv+0x11e>
 800ddc6:	ea41 0100 	orr.w	r1, r1, r0
 800ddca:	f04f 0000 	mov.w	r0, #0
 800ddce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800ddd2:	e7b6      	b.n	800dd42 <__aeabi_ddiv+0x82>
 800ddd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ddd8:	bf04      	itt	eq
 800ddda:	4301      	orreq	r1, r0
 800dddc:	2000      	moveq	r0, #0
 800ddde:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800dde2:	bf88      	it	hi
 800dde4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800dde8:	f63f aeaf 	bhi.w	800db4a <__aeabi_dmul+0xde>
 800ddec:	ebb5 0c03 	subs.w	ip, r5, r3
 800ddf0:	bf04      	itt	eq
 800ddf2:	ebb6 0c02 	subseq.w	ip, r6, r2
 800ddf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800ddfa:	f150 0000 	adcs.w	r0, r0, #0
 800ddfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800de02:	bd70      	pop	{r4, r5, r6, pc}
 800de04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800de08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800de0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800de10:	bfc2      	ittt	gt
 800de12:	ebd4 050c 	rsbsgt	r5, r4, ip
 800de16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800de1a:	bd70      	popgt	{r4, r5, r6, pc}
 800de1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800de20:	f04f 0e00 	mov.w	lr, #0
 800de24:	3c01      	subs	r4, #1
 800de26:	e690      	b.n	800db4a <__aeabi_dmul+0xde>
 800de28:	ea45 0e06 	orr.w	lr, r5, r6
 800de2c:	e68d      	b.n	800db4a <__aeabi_dmul+0xde>
 800de2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800de32:	ea94 0f0c 	teq	r4, ip
 800de36:	bf08      	it	eq
 800de38:	ea95 0f0c 	teqeq	r5, ip
 800de3c:	f43f af3b 	beq.w	800dcb6 <__aeabi_dmul+0x24a>
 800de40:	ea94 0f0c 	teq	r4, ip
 800de44:	d10a      	bne.n	800de5c <__aeabi_ddiv+0x19c>
 800de46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800de4a:	f47f af34 	bne.w	800dcb6 <__aeabi_dmul+0x24a>
 800de4e:	ea95 0f0c 	teq	r5, ip
 800de52:	f47f af25 	bne.w	800dca0 <__aeabi_dmul+0x234>
 800de56:	4610      	mov	r0, r2
 800de58:	4619      	mov	r1, r3
 800de5a:	e72c      	b.n	800dcb6 <__aeabi_dmul+0x24a>
 800de5c:	ea95 0f0c 	teq	r5, ip
 800de60:	d106      	bne.n	800de70 <__aeabi_ddiv+0x1b0>
 800de62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800de66:	f43f aefd 	beq.w	800dc64 <__aeabi_dmul+0x1f8>
 800de6a:	4610      	mov	r0, r2
 800de6c:	4619      	mov	r1, r3
 800de6e:	e722      	b.n	800dcb6 <__aeabi_dmul+0x24a>
 800de70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800de74:	bf18      	it	ne
 800de76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800de7a:	f47f aec5 	bne.w	800dc08 <__aeabi_dmul+0x19c>
 800de7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800de82:	f47f af0d 	bne.w	800dca0 <__aeabi_dmul+0x234>
 800de86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800de8a:	f47f aeeb 	bne.w	800dc64 <__aeabi_dmul+0x1f8>
 800de8e:	e712      	b.n	800dcb6 <__aeabi_dmul+0x24a>

0800de90 <__gedf2>:
 800de90:	f04f 3cff 	mov.w	ip, #4294967295
 800de94:	e006      	b.n	800dea4 <__cmpdf2+0x4>
 800de96:	bf00      	nop

0800de98 <__ledf2>:
 800de98:	f04f 0c01 	mov.w	ip, #1
 800de9c:	e002      	b.n	800dea4 <__cmpdf2+0x4>
 800de9e:	bf00      	nop

0800dea0 <__cmpdf2>:
 800dea0:	f04f 0c01 	mov.w	ip, #1
 800dea4:	f84d cd04 	str.w	ip, [sp, #-4]!
 800dea8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800deac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800deb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800deb4:	bf18      	it	ne
 800deb6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800deba:	d01b      	beq.n	800def4 <__cmpdf2+0x54>
 800debc:	b001      	add	sp, #4
 800debe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800dec2:	bf0c      	ite	eq
 800dec4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800dec8:	ea91 0f03 	teqne	r1, r3
 800decc:	bf02      	ittt	eq
 800dece:	ea90 0f02 	teqeq	r0, r2
 800ded2:	2000      	moveq	r0, #0
 800ded4:	4770      	bxeq	lr
 800ded6:	f110 0f00 	cmn.w	r0, #0
 800deda:	ea91 0f03 	teq	r1, r3
 800dede:	bf58      	it	pl
 800dee0:	4299      	cmppl	r1, r3
 800dee2:	bf08      	it	eq
 800dee4:	4290      	cmpeq	r0, r2
 800dee6:	bf2c      	ite	cs
 800dee8:	17d8      	asrcs	r0, r3, #31
 800deea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800deee:	f040 0001 	orr.w	r0, r0, #1
 800def2:	4770      	bx	lr
 800def4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800def8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800defc:	d102      	bne.n	800df04 <__cmpdf2+0x64>
 800defe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800df02:	d107      	bne.n	800df14 <__cmpdf2+0x74>
 800df04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800df08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800df0c:	d1d6      	bne.n	800debc <__cmpdf2+0x1c>
 800df0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800df12:	d0d3      	beq.n	800debc <__cmpdf2+0x1c>
 800df14:	f85d 0b04 	ldr.w	r0, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop

0800df1c <__aeabi_cdrcmple>:
 800df1c:	4684      	mov	ip, r0
 800df1e:	4610      	mov	r0, r2
 800df20:	4662      	mov	r2, ip
 800df22:	468c      	mov	ip, r1
 800df24:	4619      	mov	r1, r3
 800df26:	4663      	mov	r3, ip
 800df28:	e000      	b.n	800df2c <__aeabi_cdcmpeq>
 800df2a:	bf00      	nop

0800df2c <__aeabi_cdcmpeq>:
 800df2c:	b501      	push	{r0, lr}
 800df2e:	f7ff ffb7 	bl	800dea0 <__cmpdf2>
 800df32:	2800      	cmp	r0, #0
 800df34:	bf48      	it	mi
 800df36:	f110 0f00 	cmnmi.w	r0, #0
 800df3a:	bd01      	pop	{r0, pc}

0800df3c <__aeabi_dcmpeq>:
 800df3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800df40:	f7ff fff4 	bl	800df2c <__aeabi_cdcmpeq>
 800df44:	bf0c      	ite	eq
 800df46:	2001      	moveq	r0, #1
 800df48:	2000      	movne	r0, #0
 800df4a:	f85d fb08 	ldr.w	pc, [sp], #8
 800df4e:	bf00      	nop

0800df50 <__aeabi_dcmplt>:
 800df50:	f84d ed08 	str.w	lr, [sp, #-8]!
 800df54:	f7ff ffea 	bl	800df2c <__aeabi_cdcmpeq>
 800df58:	bf34      	ite	cc
 800df5a:	2001      	movcc	r0, #1
 800df5c:	2000      	movcs	r0, #0
 800df5e:	f85d fb08 	ldr.w	pc, [sp], #8
 800df62:	bf00      	nop

0800df64 <__aeabi_dcmple>:
 800df64:	f84d ed08 	str.w	lr, [sp, #-8]!
 800df68:	f7ff ffe0 	bl	800df2c <__aeabi_cdcmpeq>
 800df6c:	bf94      	ite	ls
 800df6e:	2001      	movls	r0, #1
 800df70:	2000      	movhi	r0, #0
 800df72:	f85d fb08 	ldr.w	pc, [sp], #8
 800df76:	bf00      	nop

0800df78 <__aeabi_dcmpge>:
 800df78:	f84d ed08 	str.w	lr, [sp, #-8]!
 800df7c:	f7ff ffce 	bl	800df1c <__aeabi_cdrcmple>
 800df80:	bf94      	ite	ls
 800df82:	2001      	movls	r0, #1
 800df84:	2000      	movhi	r0, #0
 800df86:	f85d fb08 	ldr.w	pc, [sp], #8
 800df8a:	bf00      	nop

0800df8c <__aeabi_dcmpgt>:
 800df8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800df90:	f7ff ffc4 	bl	800df1c <__aeabi_cdrcmple>
 800df94:	bf34      	ite	cc
 800df96:	2001      	movcc	r0, #1
 800df98:	2000      	movcs	r0, #0
 800df9a:	f85d fb08 	ldr.w	pc, [sp], #8
 800df9e:	bf00      	nop

0800dfa0 <__aeabi_d2iz>:
 800dfa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800dfa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800dfa8:	d215      	bcs.n	800dfd6 <__aeabi_d2iz+0x36>
 800dfaa:	d511      	bpl.n	800dfd0 <__aeabi_d2iz+0x30>
 800dfac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800dfb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800dfb4:	d912      	bls.n	800dfdc <__aeabi_d2iz+0x3c>
 800dfb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800dfba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800dfc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800dfc6:	fa23 f002 	lsr.w	r0, r3, r2
 800dfca:	bf18      	it	ne
 800dfcc:	4240      	negne	r0, r0
 800dfce:	4770      	bx	lr
 800dfd0:	f04f 0000 	mov.w	r0, #0
 800dfd4:	4770      	bx	lr
 800dfd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800dfda:	d105      	bne.n	800dfe8 <__aeabi_d2iz+0x48>
 800dfdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800dfe0:	bf08      	it	eq
 800dfe2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800dfe6:	4770      	bx	lr
 800dfe8:	f04f 0000 	mov.w	r0, #0
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop

0800dff0 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800dff8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800dffc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 800e006:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800e00a:	60da      	str	r2, [r3, #12]
}
 800e00c:	f107 070c 	add.w	r7, r7, #12
 800e010:	46bd      	mov	sp, r7
 800e012:	bc80      	pop	{r7}
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop

0800e018 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800e020:	f04f 0300 	mov.w	r3, #0
 800e024:	73fb      	strb	r3, [r7, #15]
 800e026:	f04f 0300 	mov.w	r3, #0
 800e02a:	73bb      	strb	r3, [r7, #14]
 800e02c:	f04f 030f 	mov.w	r3, #15
 800e030:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	78db      	ldrb	r3, [r3, #3]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d045      	beq.n	800e0c6 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800e03a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800e03e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	ea6f 0303 	mvn.w	r3, r3
 800e048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e04c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800e050:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800e052:	7bfb      	ldrb	r3, [r7, #15]
 800e054:	f1c3 0304 	rsb	r3, r3, #4
 800e058:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800e05a:	7b7a      	ldrb	r2, [r7, #13]
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	fa42 f303 	asr.w	r3, r2, r3
 800e062:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	785b      	ldrb	r3, [r3, #1]
 800e068:	461a      	mov	r2, r3
 800e06a:	7bbb      	ldrb	r3, [r7, #14]
 800e06c:	fa02 f303 	lsl.w	r3, r2, r3
 800e070:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	789a      	ldrb	r2, [r3, #2]
 800e076:	7b7b      	ldrb	r3, [r7, #13]
 800e078:	4013      	ands	r3, r2
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
 800e07e:	4313      	orrs	r3, r2
 800e080:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800e082:	7bfb      	ldrb	r3, [r7, #15]
 800e084:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e088:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800e08a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800e08e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	7812      	ldrb	r2, [r2, #0]
 800e096:	189b      	adds	r3, r3, r2
 800e098:	7bfa      	ldrb	r2, [r7, #15]
 800e09a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800e09e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800e0a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	7812      	ldrb	r2, [r2, #0]
 800e0aa:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800e0ae:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800e0b0:	6879      	ldr	r1, [r7, #4]
 800e0b2:	7809      	ldrb	r1, [r1, #0]
 800e0b4:	f001 011f 	and.w	r1, r1, #31
 800e0b8:	f04f 0001 	mov.w	r0, #1
 800e0bc:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800e0c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e0c4:	e014      	b.n	800e0f0 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800e0c6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800e0ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	7812      	ldrb	r2, [r2, #0]
 800e0d2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800e0d6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800e0d8:	6879      	ldr	r1, [r7, #4]
 800e0da:	7809      	ldrb	r1, [r1, #0]
 800e0dc:	f001 011f 	and.w	r1, r1, #31
 800e0e0:	f04f 0001 	mov.w	r0, #1
 800e0e4:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800e0e8:	f102 0220 	add.w	r2, r2, #32
 800e0ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800e0f0:	f107 0714 	add.w	r7, r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bc80      	pop	{r7}
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop

0800e0fc <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800e106:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800e10a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e10e:	683a      	ldr	r2, [r7, #0]
 800e110:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800e114:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800e118:	6879      	ldr	r1, [r7, #4]
 800e11a:	430a      	orrs	r2, r1
 800e11c:	609a      	str	r2, [r3, #8]
}
 800e11e:	f107 070c 	add.w	r7, r7, #12
 800e122:	46bd      	mov	sp, r7
 800e124:	bc80      	pop	{r7}
 800e126:	4770      	bx	lr

0800e128 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	4602      	mov	r2, r0
 800e130:	460b      	mov	r3, r1
 800e132:	71fa      	strb	r2, [r7, #7]
 800e134:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800e136:	79bb      	ldrb	r3, [r7, #6]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00d      	beq.n	800e158 <NVIC_SystemLPConfig+0x30>
  {
    SCB->SCR |= LowPowerMode;
 800e13c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800e140:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e144:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800e148:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800e14c:	6912      	ldr	r2, [r2, #16]
 800e14e:	4611      	mov	r1, r2
 800e150:	79fa      	ldrb	r2, [r7, #7]
 800e152:	430a      	orrs	r2, r1
 800e154:	611a      	str	r2, [r3, #16]
 800e156:	e00e      	b.n	800e176 <NVIC_SystemLPConfig+0x4e>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800e158:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800e15c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e160:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800e164:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800e168:	6912      	ldr	r2, [r2, #16]
 800e16a:	4611      	mov	r1, r2
 800e16c:	79fa      	ldrb	r2, [r7, #7]
 800e16e:	ea6f 0202 	mvn.w	r2, r2
 800e172:	400a      	ands	r2, r1
 800e174:	611a      	str	r2, [r3, #16]
  }
}
 800e176:	f107 070c 	add.w	r7, r7, #12
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bc80      	pop	{r7}
 800e17e:	4770      	bx	lr

0800e180 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2b04      	cmp	r3, #4
 800e18c:	d10c      	bne.n	800e1a8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800e18e:	f24e 0310 	movw	r3, #57360	; 0xe010
 800e192:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e196:	f24e 0210 	movw	r2, #57360	; 0xe010
 800e19a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800e19e:	6812      	ldr	r2, [r2, #0]
 800e1a0:	f042 0204 	orr.w	r2, r2, #4
 800e1a4:	601a      	str	r2, [r3, #0]
 800e1a6:	e00b      	b.n	800e1c0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800e1a8:	f24e 0310 	movw	r3, #57360	; 0xe010
 800e1ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800e1b0:	f24e 0210 	movw	r2, #57360	; 0xe010
 800e1b4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800e1b8:	6812      	ldr	r2, [r2, #0]
 800e1ba:	f022 0204 	bic.w	r2, r2, #4
 800e1be:	601a      	str	r2, [r3, #0]
  }
}
 800e1c0:	f107 070c 	add.w	r7, r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bc80      	pop	{r7}
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop

0800e1cc <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 800e1d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e1d4:	f04f 0101 	mov.w	r1, #1
 800e1d8:	f009 f8ec 	bl	80173b4 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800e1dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e1e0:	f04f 0100 	mov.w	r1, #0
 800e1e4:	f009 f8e6 	bl	80173b4 <RCC_APB2PeriphResetCmd>
}
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop

0800e1ec <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800e1f6:	f04f 0300 	mov.w	r3, #0
 800e1fa:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800e1fc:	f04f 0300 	mov.w	r3, #0
 800e200:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800e20e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e212:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	791b      	ldrb	r3, [r3, #4]
 800e218:	ea4f 2203 	mov.w	r2, r3, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800e220:	4313      	orrs	r3, r2
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	4313      	orrs	r3, r2
 800e226:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 800e23a:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
 800e23e:	4013      	ands	r3, r2
 800e240:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800e24a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800e250:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	795b      	ldrb	r3, [r3, #5]
 800e256:	ea4f 0343 	mov.w	r3, r3, lsl #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800e25a:	4313      	orrs	r3, r2
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	4313      	orrs	r3, r2
 800e260:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26c:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e274:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	7d1b      	ldrb	r3, [r3, #20]
 800e27a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e27e:	b2da      	uxtb	r2, r3
 800e280:	7afb      	ldrb	r3, [r7, #11]
 800e282:	4313      	orrs	r3, r2
 800e284:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800e286:	7afb      	ldrb	r3, [r7, #11]
 800e288:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	4313      	orrs	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e298:	f107 0714 	add.w	r7, r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bc80      	pop	{r7}
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop

0800e2a4 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f04f 0200 	mov.w	r2, #0
 800e2b2:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f04f 0200 	mov.w	r2, #0
 800e2ba:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f04f 0200 	mov.w	r2, #0
 800e2c2:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f04f 0200 	mov.w	r2, #0
 800e2ca:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f04f 0200 	mov.w	r2, #0
 800e2d2:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f04f 0200 	mov.w	r2, #0
 800e2da:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f04f 0201 	mov.w	r2, #1
 800e2e2:	751a      	strb	r2, [r3, #20]
}
 800e2e4:	f107 070c 	add.w	r7, r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bc80      	pop	{r7}
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop

0800e2f0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800e2f8:	f04f 0300 	mov.w	r3, #0
 800e2fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800e2fe:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800e302:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800e310:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 800e314:	4013      	ands	r3, r2
 800e316:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800e320:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800e326:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800e32c:	4313      	orrs	r3, r2
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	4313      	orrs	r3, r2
 800e332:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800e334:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800e338:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	605a      	str	r2, [r3, #4]
}
 800e340:	f107 0714 	add.w	r7, r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	bc80      	pop	{r7}
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop

0800e34c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f04f 0200 	mov.w	r2, #0
 800e35a:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f04f 0200 	mov.w	r2, #0
 800e362:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f04f 0200 	mov.w	r2, #0
 800e36a:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f04f 0200 	mov.w	r2, #0
 800e372:	60da      	str	r2, [r3, #12]
}
 800e374:	f107 070c 	add.w	r7, r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	bc80      	pop	{r7}
 800e37c:	4770      	bx	lr
 800e37e:	bf00      	nop

0800e380 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	460b      	mov	r3, r1
 800e38a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e38c:	78fb      	ldrb	r3, [r7, #3]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d006      	beq.n	800e3a0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	f043 0201 	orr.w	r2, r3, #1
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	609a      	str	r2, [r3, #8]
 800e39e:	e005      	b.n	800e3ac <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	f023 0201 	bic.w	r2, r3, #1
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	609a      	str	r2, [r3, #8]
  }
}
 800e3ac:	f107 070c 	add.w	r7, r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bc80      	pop	{r7}
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop

0800e3b8 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e3c2:	f04f 0300 	mov.w	r3, #0
 800e3c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800e3d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3d8:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	605a      	str	r2, [r3, #4]
}
 800e3e8:	f107 0714 	add.w	r7, r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bc80      	pop	{r7}
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop

0800e3f4 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	460a      	mov	r2, r1
 800e400:	807a      	strh	r2, [r7, #2]
 800e402:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800e404:	887a      	ldrh	r2, [r7, #2]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800e40a:	883a      	ldrh	r2, [r7, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e410:	f107 070c 	add.w	r7, r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	bc80      	pop	{r7}
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop

0800e41c <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b085      	sub	sp, #20
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	460b      	mov	r3, r1
 800e426:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800e428:	f04f 0300 	mov.w	r3, #0
 800e42c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f023 031f 	bic.w	r3, r3, #31
 800e43a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800e43c:	78fb      	ldrb	r3, [r7, #3]
 800e43e:	68fa      	ldr	r2, [r7, #12]
 800e440:	4313      	orrs	r3, r2
 800e442:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	605a      	str	r2, [r3, #4]
}
 800e44a:	f107 0714 	add.w	r7, r7, #20
 800e44e:	46bd      	mov	sp, r7
 800e450:	bc80      	pop	{r7}
 800e452:	4770      	bx	lr

0800e454 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	4603      	mov	r3, r0
 800e45c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e45e:	79fb      	ldrb	r3, [r7, #7]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00c      	beq.n	800e47e <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 800e464:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800e468:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e46c:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800e470:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800e474:	6852      	ldr	r2, [r2, #4]
 800e476:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e47a:	605a      	str	r2, [r3, #4]
 800e47c:	e00b      	b.n	800e496 <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800e47e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800e482:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e486:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800e48a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800e48e:	6852      	ldr	r2, [r2, #4]
 800e490:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e494:	605a      	str	r2, [r3, #4]
  }
}
 800e496:	f107 070c 	add.w	r7, r7, #12
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bc80      	pop	{r7}
 800e49e:	4770      	bx	lr

0800e4a0 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e4aa:	79fb      	ldrb	r3, [r7, #7]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00c      	beq.n	800e4ca <ADC_VBATCmd+0x2a>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 800e4b0:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800e4b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e4b8:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800e4bc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800e4c0:	6852      	ldr	r2, [r2, #4]
 800e4c2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800e4c6:	605a      	str	r2, [r3, #4]
 800e4c8:	e00b      	b.n	800e4e2 <ADC_VBATCmd+0x42>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 800e4ca:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800e4ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e4d2:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800e4d6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800e4da:	6852      	ldr	r2, [r2, #4]
 800e4dc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800e4e0:	605a      	str	r2, [r3, #4]
  }
}
 800e4e2:	f107 070c 	add.w	r7, r7, #12
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bc80      	pop	{r7}
 800e4ea:	4770      	bx	lr

0800e4ec <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	70f9      	strb	r1, [r7, #3]
 800e4f6:	70ba      	strb	r2, [r7, #2]
 800e4f8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800e4fa:	f04f 0300 	mov.w	r3, #0
 800e4fe:	60fb      	str	r3, [r7, #12]
 800e500:	f04f 0300 	mov.w	r3, #0
 800e504:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800e506:	78fb      	ldrb	r3, [r7, #3]
 800e508:	2b09      	cmp	r3, #9
 800e50a:	d927      	bls.n	800e55c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800e512:	78fa      	ldrb	r2, [r7, #3]
 800e514:	4613      	mov	r3, r2
 800e516:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e51a:	189b      	adds	r3, r3, r2
 800e51c:	f1a3 031e 	sub.w	r3, r3, #30
 800e520:	f04f 0207 	mov.w	r2, #7
 800e524:	fa02 f303 	lsl.w	r3, r2, r3
 800e528:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	ea6f 0303 	mvn.w	r3, r3
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	4013      	ands	r3, r2
 800e534:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800e536:	7879      	ldrb	r1, [r7, #1]
 800e538:	78fa      	ldrb	r2, [r7, #3]
 800e53a:	4613      	mov	r3, r2
 800e53c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e540:	189b      	adds	r3, r3, r2
 800e542:	f1a3 031e 	sub.w	r3, r3, #30
 800e546:	fa01 f303 	lsl.w	r3, r1, r3
 800e54a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800e54c:	68fa      	ldr	r2, [r7, #12]
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	4313      	orrs	r3, r2
 800e552:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	60da      	str	r2, [r3, #12]
 800e55a:	e022      	b.n	800e5a2 <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	691b      	ldr	r3, [r3, #16]
 800e560:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800e562:	78fa      	ldrb	r2, [r7, #3]
 800e564:	4613      	mov	r3, r2
 800e566:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e56a:	189b      	adds	r3, r3, r2
 800e56c:	f04f 0207 	mov.w	r2, #7
 800e570:	fa02 f303 	lsl.w	r3, r2, r3
 800e574:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	ea6f 0303 	mvn.w	r3, r3
 800e57c:	68fa      	ldr	r2, [r7, #12]
 800e57e:	4013      	ands	r3, r2
 800e580:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800e582:	7879      	ldrb	r1, [r7, #1]
 800e584:	78fa      	ldrb	r2, [r7, #3]
 800e586:	4613      	mov	r3, r2
 800e588:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e58c:	189b      	adds	r3, r3, r2
 800e58e:	fa01 f303 	lsl.w	r3, r1, r3
 800e592:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	4313      	orrs	r3, r2
 800e59a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	68fa      	ldr	r2, [r7, #12]
 800e5a0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800e5a2:	78bb      	ldrb	r3, [r7, #2]
 800e5a4:	2b06      	cmp	r3, #6
 800e5a6:	d827      	bhi.n	800e5f8 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ac:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800e5ae:	78bb      	ldrb	r3, [r7, #2]
 800e5b0:	f103 32ff 	add.w	r2, r3, #4294967295
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e5ba:	189b      	adds	r3, r3, r2
 800e5bc:	f04f 021f 	mov.w	r2, #31
 800e5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e5c4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	ea6f 0303 	mvn.w	r3, r3
 800e5cc:	68fa      	ldr	r2, [r7, #12]
 800e5ce:	4013      	ands	r3, r2
 800e5d0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800e5d2:	78f9      	ldrb	r1, [r7, #3]
 800e5d4:	78bb      	ldrb	r3, [r7, #2]
 800e5d6:	f103 32ff 	add.w	r2, r3, #4294967295
 800e5da:	4613      	mov	r3, r2
 800e5dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e5e0:	189b      	adds	r3, r3, r2
 800e5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800e5e6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	635a      	str	r2, [r3, #52]	; 0x34
 800e5f6:	e051      	b.n	800e69c <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 800e5f8:	78bb      	ldrb	r3, [r7, #2]
 800e5fa:	2b0c      	cmp	r3, #12
 800e5fc:	d827      	bhi.n	800e64e <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e602:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800e604:	78ba      	ldrb	r2, [r7, #2]
 800e606:	4613      	mov	r3, r2
 800e608:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e60c:	189b      	adds	r3, r3, r2
 800e60e:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 800e612:	f04f 021f 	mov.w	r2, #31
 800e616:	fa02 f303 	lsl.w	r3, r2, r3
 800e61a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	ea6f 0303 	mvn.w	r3, r3
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	4013      	ands	r3, r2
 800e626:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800e628:	78f9      	ldrb	r1, [r7, #3]
 800e62a:	78ba      	ldrb	r2, [r7, #2]
 800e62c:	4613      	mov	r3, r2
 800e62e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e632:	189b      	adds	r3, r3, r2
 800e634:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 800e638:	fa01 f303 	lsl.w	r3, r1, r3
 800e63c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	4313      	orrs	r3, r2
 800e644:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	631a      	str	r2, [r3, #48]	; 0x30
 800e64c:	e026      	b.n	800e69c <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e652:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800e654:	78ba      	ldrb	r2, [r7, #2]
 800e656:	4613      	mov	r3, r2
 800e658:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e65c:	189b      	adds	r3, r3, r2
 800e65e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 800e662:	f04f 021f 	mov.w	r2, #31
 800e666:	fa02 f303 	lsl.w	r3, r2, r3
 800e66a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	ea6f 0303 	mvn.w	r3, r3
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	4013      	ands	r3, r2
 800e676:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800e678:	78f9      	ldrb	r1, [r7, #3]
 800e67a:	78ba      	ldrb	r2, [r7, #2]
 800e67c:	4613      	mov	r3, r2
 800e67e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e682:	189b      	adds	r3, r3, r2
 800e684:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 800e688:	fa01 f303 	lsl.w	r3, r1, r3
 800e68c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	4313      	orrs	r3, r2
 800e694:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e69c:	f107 0714 	add.w	r7, r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bc80      	pop	{r7}
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop

0800e6a8 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	609a      	str	r2, [r3, #8]
}
 800e6bc:	f107 070c 	add.w	r7, r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bc80      	pop	{r7}
 800e6c4:	4770      	bx	lr
 800e6c6:	bf00      	nop

0800e6c8 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b085      	sub	sp, #20
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800e6d0:	f04f 0300 	mov.w	r3, #0
 800e6d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d003      	beq.n	800e6ea <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 800e6e2:	f04f 0301 	mov.w	r3, #1
 800e6e6:	73fb      	strb	r3, [r7, #15]
 800e6e8:	e002      	b.n	800e6f0 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 800e6ea:	f04f 0300 	mov.w	r3, #0
 800e6ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 800e6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f107 0714 	add.w	r7, r7, #20
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bc80      	pop	{r7}
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop

0800e700 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	460b      	mov	r3, r1
 800e70a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e70c:	78fb      	ldrb	r3, [r7, #3]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d006      	beq.n	800e720 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	609a      	str	r2, [r3, #8]
 800e71e:	e005      	b.n	800e72c <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	609a      	str	r2, [r3, #8]
  }
}
 800e72c:	f107 070c 	add.w	r7, r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	bc80      	pop	{r7}
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop

0800e738 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	460b      	mov	r3, r1
 800e742:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e744:	78fb      	ldrb	r3, [r7, #3]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d006      	beq.n	800e758 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	f043 0202 	orr.w	r2, r3, #2
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	609a      	str	r2, [r3, #8]
 800e756:	e005      	b.n	800e764 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	689b      	ldr	r3, [r3, #8]
 800e75c:	f023 0202 	bic.w	r2, r3, #2
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	609a      	str	r2, [r3, #8]
  }
}
 800e764:	f107 070c 	add.w	r7, r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	bc80      	pop	{r7}
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop

0800e770 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	460b      	mov	r3, r1
 800e77a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800e77c:	f04f 0300 	mov.w	r3, #0
 800e780:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800e782:	f04f 0300 	mov.w	r3, #0
 800e786:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e794:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 800e796:	78fb      	ldrb	r3, [r7, #3]
 800e798:	f103 33ff 	add.w	r3, r3, #4294967295
 800e79c:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	ea4f 3343 	mov.w	r3, r3, lsl #13
 800e7a4:	68fa      	ldr	r2, [r7, #12]
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	605a      	str	r2, [r3, #4]
}
 800e7b0:	f107 0714 	add.w	r7, r7, #20
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bc80      	pop	{r7}
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop

0800e7bc <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e7c8:	78fb      	ldrb	r3, [r7, #3]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d006      	beq.n	800e7dc <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	605a      	str	r2, [r3, #4]
 800e7da:	e005      	b.n	800e7e8 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	605a      	str	r2, [r3, #4]
  }
}
 800e7e8:	f107 070c 	add.w	r7, r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bc80      	pop	{r7}
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop

0800e7f4 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e800:	b29b      	uxth	r3, r3
}
 800e802:	4618      	mov	r0, r3
 800e804:	f107 070c 	add.w	r7, r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	bc80      	pop	{r7}
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop

0800e810 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 800e810:	b480      	push	{r7}
 800e812:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 800e814:	f242 3308 	movw	r3, #8968	; 0x2308
 800e818:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e81c:	681b      	ldr	r3, [r3, #0]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	46bd      	mov	sp, r7
 800e822:	bc80      	pop	{r7}
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop

0800e828 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	460b      	mov	r3, r1
 800e832:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e834:	78fb      	ldrb	r3, [r7, #3]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d006      	beq.n	800e848 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	609a      	str	r2, [r3, #8]
 800e846:	e005      	b.n	800e854 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	609a      	str	r2, [r3, #8]
  }
}
 800e854:	f107 070c 	add.w	r7, r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	bc80      	pop	{r7}
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop

0800e860 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	460b      	mov	r3, r1
 800e86a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e86c:	78fb      	ldrb	r3, [r7, #3]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d006      	beq.n	800e880 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	609a      	str	r2, [r3, #8]
 800e87e:	e005      	b.n	800e88c <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	609a      	str	r2, [r3, #8]
  }
}
 800e88c:	f107 070c 	add.w	r7, r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	bc80      	pop	{r7}
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop

0800e898 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	4603      	mov	r3, r0
 800e8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e8a2:	79fb      	ldrb	r3, [r7, #7]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d00c      	beq.n	800e8c2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 800e8a8:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800e8ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e8b0:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800e8b4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800e8b8:	6852      	ldr	r2, [r2, #4]
 800e8ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8be:	605a      	str	r2, [r3, #4]
 800e8c0:	e00b      	b.n	800e8da <ADC_MultiModeDMARequestAfterLastTransferCmd+0x42>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 800e8c2:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800e8c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e8ca:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800e8ce:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800e8d2:	6852      	ldr	r2, [r2, #4]
 800e8d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e8d8:	605a      	str	r2, [r3, #4]
  }
}
 800e8da:	f107 070c 	add.w	r7, r7, #12
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bc80      	pop	{r7}
 800e8e2:	4770      	bx	lr

0800e8e4 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	70f9      	strb	r1, [r7, #3]
 800e8ee:	70ba      	strb	r2, [r7, #2]
 800e8f0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 800e8f2:	f04f 0300 	mov.w	r3, #0
 800e8f6:	617b      	str	r3, [r7, #20]
 800e8f8:	f04f 0300 	mov.w	r3, #0
 800e8fc:	613b      	str	r3, [r7, #16]
 800e8fe:	f04f 0300 	mov.w	r3, #0
 800e902:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800e904:	78fb      	ldrb	r3, [r7, #3]
 800e906:	2b09      	cmp	r3, #9
 800e908:	d927      	bls.n	800e95a <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 800e910:	78fa      	ldrb	r2, [r7, #3]
 800e912:	4613      	mov	r3, r2
 800e914:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e918:	189b      	adds	r3, r3, r2
 800e91a:	f1a3 031e 	sub.w	r3, r3, #30
 800e91e:	f04f 0207 	mov.w	r2, #7
 800e922:	fa02 f303 	lsl.w	r3, r2, r3
 800e926:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	ea6f 0303 	mvn.w	r3, r3
 800e92e:	697a      	ldr	r2, [r7, #20]
 800e930:	4013      	ands	r3, r2
 800e932:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 800e934:	7879      	ldrb	r1, [r7, #1]
 800e936:	78fa      	ldrb	r2, [r7, #3]
 800e938:	4613      	mov	r3, r2
 800e93a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e93e:	189b      	adds	r3, r3, r2
 800e940:	f1a3 031e 	sub.w	r3, r3, #30
 800e944:	fa01 f303 	lsl.w	r3, r1, r3
 800e948:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800e94a:	697a      	ldr	r2, [r7, #20]
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	4313      	orrs	r3, r2
 800e950:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	697a      	ldr	r2, [r7, #20]
 800e956:	60da      	str	r2, [r3, #12]
 800e958:	e022      	b.n	800e9a0 <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	691b      	ldr	r3, [r3, #16]
 800e95e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800e960:	78fa      	ldrb	r2, [r7, #3]
 800e962:	4613      	mov	r3, r2
 800e964:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e968:	189b      	adds	r3, r3, r2
 800e96a:	f04f 0207 	mov.w	r2, #7
 800e96e:	fa02 f303 	lsl.w	r3, r2, r3
 800e972:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	ea6f 0303 	mvn.w	r3, r3
 800e97a:	697a      	ldr	r2, [r7, #20]
 800e97c:	4013      	ands	r3, r2
 800e97e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800e980:	7879      	ldrb	r1, [r7, #1]
 800e982:	78fa      	ldrb	r2, [r7, #3]
 800e984:	4613      	mov	r3, r2
 800e986:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e98a:	189b      	adds	r3, r3, r2
 800e98c:	fa01 f303 	lsl.w	r3, r1, r3
 800e990:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	4313      	orrs	r3, r2
 800e998:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	697a      	ldr	r2, [r7, #20]
 800e99e:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a4:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e9ac:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800e9b0:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	ea6f 0303 	mvn.w	r3, r3
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	78bb      	ldrb	r3, [r7, #2]
 800e9be:	18d3      	adds	r3, r2, r3
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	f103 0303 	add.w	r3, r3, #3
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e9d0:	189b      	adds	r3, r3, r2
 800e9d2:	f04f 021f 	mov.w	r2, #31
 800e9d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e9da:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	ea6f 0303 	mvn.w	r3, r3
 800e9e2:	697a      	ldr	r2, [r7, #20]
 800e9e4:	4013      	ands	r3, r2
 800e9e6:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800e9e8:	78f9      	ldrb	r1, [r7, #3]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	ea6f 0303 	mvn.w	r3, r3
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	78bb      	ldrb	r3, [r7, #2]
 800e9f6:	18d3      	adds	r3, r2, r3
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	f103 0303 	add.w	r3, r3, #3
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	461a      	mov	r2, r3
 800ea02:	4613      	mov	r3, r2
 800ea04:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ea08:	189b      	adds	r3, r3, r2
 800ea0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ea0e:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 800ea10:	697a      	ldr	r2, [r7, #20]
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	4313      	orrs	r3, r2
 800ea16:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	697a      	ldr	r2, [r7, #20]
 800ea1c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ea1e:	f107 071c 	add.w	r7, r7, #28
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bc80      	pop	{r7}
 800ea26:	4770      	bx	lr

0800ea28 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b085      	sub	sp, #20
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	460b      	mov	r3, r1
 800ea32:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800ea34:	f04f 0300 	mov.w	r3, #0
 800ea38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800ea3a:	f04f 0300 	mov.w	r3, #0
 800ea3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea44:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ea4c:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 800ea4e:	78fb      	ldrb	r3, [r7, #3]
 800ea50:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea54:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	68fa      	ldr	r2, [r7, #12]
 800ea66:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ea68:	f107 0714 	add.w	r7, r7, #20
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bc80      	pop	{r7}
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop

0800ea74 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	460a      	mov	r2, r1
 800ea80:	70fa      	strb	r2, [r7, #3]
 800ea82:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 800ea84:	f04f 0300 	mov.w	r3, #0
 800ea88:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 800ea8e:	78fa      	ldrb	r2, [r7, #3]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	18d3      	adds	r3, r2, r3
 800ea94:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	883a      	ldrh	r2, [r7, #0]
 800ea9a:	601a      	str	r2, [r3, #0]
}
 800ea9c:	f107 0714 	add.w	r7, r7, #20
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bc80      	pop	{r7}
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop

0800eaa8 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eab2:	f04f 0300 	mov.w	r3, #0
 800eab6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800eac4:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	4313      	orrs	r3, r2
 800eacc:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	609a      	str	r2, [r3, #8]
}
 800ead4:	f107 0714 	add.w	r7, r7, #20
 800ead8:	46bd      	mov	sp, r7
 800eada:	bc80      	pop	{r7}
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop

0800eae0 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eaea:	f04f 0300 	mov.w	r3, #0
 800eaee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800eafc:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 800eafe:	68fa      	ldr	r2, [r7, #12]
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	4313      	orrs	r3, r2
 800eb04:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	68fa      	ldr	r2, [r7, #12]
 800eb0a:	609a      	str	r2, [r3, #8]
}
 800eb0c:	f107 0714 	add.w	r7, r7, #20
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bc80      	pop	{r7}
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop

0800eb18 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	609a      	str	r2, [r3, #8]
}
 800eb2c:	f107 070c 	add.w	r7, r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bc80      	pop	{r7}
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop

0800eb38 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800eb40:	f04f 0300 	mov.w	r3, #0
 800eb44:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	689b      	ldr	r3, [r3, #8]
 800eb4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d003      	beq.n	800eb5a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 800eb52:	f04f 0301 	mov.w	r3, #1
 800eb56:	73fb      	strb	r3, [r7, #15]
 800eb58:	e002      	b.n	800eb60 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 800eb5a:	f04f 0300 	mov.w	r3, #0
 800eb5e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 800eb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	f107 0714 	add.w	r7, r7, #20
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bc80      	pop	{r7}
 800eb6c:	4770      	bx	lr
 800eb6e:	bf00      	nop

0800eb70 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800eb7c:	78fb      	ldrb	r3, [r7, #3]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d006      	beq.n	800eb90 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	605a      	str	r2, [r3, #4]
 800eb8e:	e005      	b.n	800eb9c <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	605a      	str	r2, [r3, #4]
  }
}
 800eb9c:	f107 070c 	add.w	r7, r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bc80      	pop	{r7}
 800eba4:	4770      	bx	lr
 800eba6:	bf00      	nop

0800eba8 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ebb4:	78fb      	ldrb	r3, [r7, #3]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d006      	beq.n	800ebc8 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	605a      	str	r2, [r3, #4]
 800ebc6:	e005      	b.n	800ebd4 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	605a      	str	r2, [r3, #4]
  }
}
 800ebd4:	f107 070c 	add.w	r7, r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bc80      	pop	{r7}
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop

0800ebe0 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800ebec:	f04f 0300 	mov.w	r3, #0
 800ebf0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 800ebf6:	78fa      	ldrb	r2, [r7, #3]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	18d3      	adds	r3, r2, r3
 800ebfc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800ec00:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	b29b      	uxth	r3, r3
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f107 0714 	add.w	r7, r7, #20
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bc80      	pop	{r7}
 800ec12:	4770      	bx	lr

0800ec14 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	460a      	mov	r2, r1
 800ec20:	807a      	strh	r2, [r7, #2]
 800ec22:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 800ec24:	f04f 0300 	mov.w	r3, #0
 800ec28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 800ec2a:	887b      	ldrh	r3, [r7, #2]
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f04f 0201 	mov.w	r2, #1
 800ec36:	fa02 f303 	lsl.w	r3, r2, r3
 800ec3a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 800ec3c:	787b      	ldrb	r3, [r7, #1]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d007      	beq.n	800ec52 <ADC_ITConfig+0x3e>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	461a      	mov	r2, r3
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	431a      	orrs	r2, r3
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	605a      	str	r2, [r3, #4]
 800ec50:	e008      	b.n	800ec64 <ADC_ITConfig+0x50>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	461a      	mov	r2, r3
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	ea6f 0303 	mvn.w	r3, r3
 800ec5e:	401a      	ands	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	605a      	str	r2, [r3, #4]
  }
}
 800ec64:	f107 0714 	add.w	r7, r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bc80      	pop	{r7}
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop

0800ec70 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 800ec7c:	f04f 0300 	mov.w	r3, #0
 800ec80:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	461a      	mov	r2, r3
 800ec88:	78fb      	ldrb	r3, [r7, #3]
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d003      	beq.n	800ec98 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800ec90:	f04f 0301 	mov.w	r3, #1
 800ec94:	73fb      	strb	r3, [r7, #15]
 800ec96:	e002      	b.n	800ec9e <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800ec98:	f04f 0300 	mov.w	r3, #0
 800ec9c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	f107 0714 	add.w	r7, r7, #20
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bc80      	pop	{r7}
 800ecaa:	4770      	bx	lr

0800ecac <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 800ecb8:	78fb      	ldrb	r3, [r7, #3]
 800ecba:	ea6f 0203 	mvn.w	r2, r3
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	601a      	str	r2, [r3, #0]
}
 800ecc2:	f107 070c 	add.w	r7, r7, #12
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bc80      	pop	{r7}
 800ecca:	4770      	bx	lr

0800eccc <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b087      	sub	sp, #28
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 800ecd8:	f04f 0300 	mov.w	r3, #0
 800ecdc:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 800ecde:	f04f 0300 	mov.w	r3, #0
 800ece2:	613b      	str	r3, [r7, #16]
 800ece4:	f04f 0300 	mov.w	r3, #0
 800ece8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 800ecea:	887b      	ldrh	r3, [r7, #2]
 800ecec:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	887b      	ldrh	r3, [r7, #2]
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	f04f 0101 	mov.w	r1, #1
 800ed02:	fa01 f303 	lsl.w	r3, r1, r3
 800ed06:	4013      	ands	r3, r2
 800ed08:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	4013      	ands	r3, r2
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d006      	beq.n	800ed26 <ADC_GetITStatus+0x5a>
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d003      	beq.n	800ed26 <ADC_GetITStatus+0x5a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 800ed1e:	f04f 0301 	mov.w	r3, #1
 800ed22:	75fb      	strb	r3, [r7, #23]
 800ed24:	e002      	b.n	800ed2c <ADC_GetITStatus+0x60>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 800ed26:	f04f 0300 	mov.w	r3, #0
 800ed2a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 800ed2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f107 071c 	add.w	r7, r7, #28
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bc80      	pop	{r7}
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop

0800ed3c <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b085      	sub	sp, #20
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	460b      	mov	r3, r1
 800ed46:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 800ed48:	f04f 0300 	mov.w	r3, #0
 800ed4c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 800ed4e:	887b      	ldrh	r3, [r7, #2]
 800ed50:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
 800ed5a:	ea6f 0203 	mvn.w	r2, r3
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	601a      	str	r2, [r3, #0]
}                    
 800ed62:	f107 0714 	add.w	r7, r7, #20
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bc80      	pop	{r7}
 800ed6a:	4770      	bx	lr

0800ed6c <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800ed7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d10c      	bne.n	800ed9c <CAN_DeInit+0x30>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 800ed82:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800ed86:	f04f 0101 	mov.w	r1, #1
 800ed8a:	f008 fae7 	bl	801735c <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 800ed8e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800ed92:	f04f 0100 	mov.w	r1, #0
 800ed96:	f008 fae1 	bl	801735c <RCC_APB1PeriphResetCmd>
 800ed9a:	e00b      	b.n	800edb4 <CAN_DeInit+0x48>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 800ed9c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800eda0:	f04f 0101 	mov.w	r1, #1
 800eda4:	f008 fada 	bl	801735c <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 800eda8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800edac:	f04f 0100 	mov.w	r1, #0
 800edb0:	f008 fad4 	bl	801735c <RCC_APB1PeriphResetCmd>
  }
}
 800edb4:	f107 0708 	add.w	r7, r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 800edc6:	f04f 0300 	mov.w	r3, #0
 800edca:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 800edcc:	f04f 0300 	mov.w	r3, #0
 800edd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f023 0202 	bic.w	r2, r3, #2
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f043 0201 	orr.w	r2, r3, #1
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800edea:	e003      	b.n	800edf4 <CAN_Init+0x38>
  {
    wait_ack++;
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	f103 0301 	add.w	r3, r3, #1
 800edf2:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	f003 0301 	and.w	r3, r3, #1
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d104      	bne.n	800ee0a <CAN_Init+0x4e>
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d1f0      	bne.n	800edec <CAN_Init+0x30>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	f003 0301 	and.w	r3, r3, #1
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d103      	bne.n	800ee1e <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
 800ee16:	f04f 0300 	mov.w	r3, #0
 800ee1a:	73fb      	strb	r3, [r7, #15]
 800ee1c:	e0a7      	b.n	800ef6e <CAN_Init+0x1b2>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	799b      	ldrb	r3, [r3, #6]
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	d106      	bne.n	800ee34 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	601a      	str	r2, [r3, #0]
 800ee32:	e005      	b.n	800ee40 <CAN_Init+0x84>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	79db      	ldrb	r3, [r3, #7]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d106      	bne.n	800ee56 <CAN_Init+0x9a>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	601a      	str	r2, [r3, #0]
 800ee54:	e005      	b.n	800ee62 <CAN_Init+0xa6>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	7a1b      	ldrb	r3, [r3, #8]
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d106      	bne.n	800ee78 <CAN_Init+0xbc>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f043 0220 	orr.w	r2, r3, #32
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	601a      	str	r2, [r3, #0]
 800ee76:	e005      	b.n	800ee84 <CAN_Init+0xc8>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f023 0220 	bic.w	r2, r3, #32
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	7a5b      	ldrb	r3, [r3, #9]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d106      	bne.n	800ee9a <CAN_Init+0xde>
    {
      CANx->MCR |= CAN_MCR_NART;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f043 0210 	orr.w	r2, r3, #16
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	601a      	str	r2, [r3, #0]
 800ee98:	e005      	b.n	800eea6 <CAN_Init+0xea>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f023 0210 	bic.w	r2, r3, #16
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	7a9b      	ldrb	r3, [r3, #10]
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d106      	bne.n	800eebc <CAN_Init+0x100>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f043 0208 	orr.w	r2, r3, #8
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	e005      	b.n	800eec8 <CAN_Init+0x10c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f023 0208 	bic.w	r2, r3, #8
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	7adb      	ldrb	r3, [r3, #11]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d106      	bne.n	800eede <CAN_Init+0x122>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f043 0204 	orr.w	r2, r3, #4
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	601a      	str	r2, [r3, #0]
 800eedc:	e005      	b.n	800eeea <CAN_Init+0x12e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f023 0204 	bic.w	r2, r3, #4
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	789b      	ldrb	r3, [r3, #2]
 800eeee:	ea4f 7283 	mov.w	r2, r3, lsl #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	78db      	ldrb	r3, [r3, #3]
 800eef6:	ea4f 6303 	mov.w	r3, r3, lsl #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800eefa:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	791b      	ldrb	r3, [r3, #4]
 800ef00:	ea4f 4303 	mov.w	r3, r3, lsl #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800ef04:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	795b      	ldrb	r3, [r3, #5]
 800ef0a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800ef0e:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	f103 33ff 	add.w	r3, r3, #4294967295

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800ef18:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f023 0201 	bic.w	r2, r3, #1
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 800ef2a:	f04f 0300 	mov.w	r3, #0
 800ef2e:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800ef30:	e003      	b.n	800ef3a <CAN_Init+0x17e>
   {
     wait_ack++;
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	f103 0301 	add.w	r3, r3, #1
 800ef38:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	f003 0301 	and.w	r3, r3, #1
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d004      	beq.n	800ef52 <CAN_Init+0x196>
 800ef48:	68ba      	ldr	r2, [r7, #8]
 800ef4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d1ef      	bne.n	800ef32 <CAN_Init+0x176>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	f003 0301 	and.w	r3, r3, #1
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d003      	beq.n	800ef68 <CAN_Init+0x1ac>
    {
      InitStatus = CAN_InitStatus_Failed;
 800ef60:	f04f 0300 	mov.w	r3, #0
 800ef64:	73fb      	strb	r3, [r7, #15]
 800ef66:	e002      	b.n	800ef6e <CAN_Init+0x1b2>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 800ef68:	f04f 0301 	mov.w	r3, #1
 800ef6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	f107 0714 	add.w	r7, r7, #20
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bc80      	pop	{r7}
 800ef7a:	4770      	bx	lr

0800ef7c <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b085      	sub	sp, #20
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 800ef84:	f04f 0300 	mov.w	r3, #0
 800ef88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	7a9b      	ldrb	r3, [r3, #10]
 800ef8e:	f04f 0201 	mov.w	r2, #1
 800ef92:	fa02 f303 	lsl.w	r3, r2, r3
 800ef96:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800ef98:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800ef9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800efa0:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800efa4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800efa8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800efac:	f042 0201 	orr.w	r2, r2, #1
 800efb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 800efb4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800efb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800efbc:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800efc0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800efc4:	f8d2 221c 	ldr.w	r2, [r2, #540]	; 0x21c
 800efc8:	4611      	mov	r1, r2
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	ea6f 0202 	mvn.w	r2, r2
 800efd0:	400a      	ands	r2, r1
 800efd2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	7b1b      	ldrb	r3, [r3, #12]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d134      	bne.n	800f048 <CAN_FilterInit+0xcc>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 800efde:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800efe2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800efe6:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800efea:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800efee:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 800eff2:	4611      	mov	r1, r2
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	ea6f 0202 	mvn.w	r2, r2
 800effa:	400a      	ands	r2, r1
 800effc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800f000:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f004:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800f00c:	6879      	ldr	r1, [r7, #4]
 800f00e:	88c9      	ldrh	r1, [r1, #6]
 800f010:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 800f014:	6879      	ldr	r1, [r7, #4]
 800f016:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800f018:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800f01a:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800f01e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800f022:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f026:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800f02e:	6879      	ldr	r1, [r7, #4]
 800f030:	8889      	ldrh	r1, [r1, #4]
 800f032:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 800f036:	6879      	ldr	r1, [r7, #4]
 800f038:	8809      	ldrh	r1, [r1, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800f03a:	4301      	orrs	r1, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800f03c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800f040:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f044:	18d3      	adds	r3, r2, r3
 800f046:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7b1b      	ldrb	r3, [r3, #12]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d132      	bne.n	800f0b6 <CAN_FilterInit+0x13a>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800f050:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f054:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f058:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f05c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f060:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 800f064:	4611      	mov	r1, r2
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	430a      	orrs	r2, r1
 800f06a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800f06e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f072:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800f07a:	6879      	ldr	r1, [r7, #4]
 800f07c:	8809      	ldrh	r1, [r1, #0]
 800f07e:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 800f082:	6879      	ldr	r1, [r7, #4]
 800f084:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800f086:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800f088:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800f08c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800f090:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f094:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800f09c:	6879      	ldr	r1, [r7, #4]
 800f09e:	8889      	ldrh	r1, [r1, #4]
 800f0a0:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 800f0a4:	6879      	ldr	r1, [r7, #4]
 800f0a6:	88c9      	ldrh	r1, [r1, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800f0a8:	4301      	orrs	r1, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800f0aa:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800f0ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f0b2:	18d3      	adds	r3, r2, r3
 800f0b4:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	7adb      	ldrb	r3, [r3, #11]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d111      	bne.n	800f0e2 <CAN_FilterInit+0x166>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 800f0be:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f0c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f0c6:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f0ca:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f0ce:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	ea6f 0202 	mvn.w	r2, r2
 800f0da:	400a      	ands	r2, r1
 800f0dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800f0e0:	e00e      	b.n	800f100 <CAN_FilterInit+0x184>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 800f0e2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f0e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f0ea:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f0ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f0f2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800f0f6:	4611      	mov	r1, r2
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	891b      	ldrh	r3, [r3, #8]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d110      	bne.n	800f12a <CAN_FilterInit+0x1ae>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 800f108:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f10c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f110:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f114:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f118:	f8d2 2214 	ldr.w	r2, [r2, #532]	; 0x214
 800f11c:	4611      	mov	r1, r2
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	ea6f 0202 	mvn.w	r2, r2
 800f124:	400a      	ands	r2, r1
 800f126:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	891b      	ldrh	r3, [r3, #8]
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d10e      	bne.n	800f150 <CAN_FilterInit+0x1d4>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800f132:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f136:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f13a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f13e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f142:	f8d2 2214 	ldr.w	r2, [r2, #532]	; 0x214
 800f146:	4611      	mov	r1, r2
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	430a      	orrs	r2, r1
 800f14c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	7b5b      	ldrb	r3, [r3, #13]
 800f154:	2b01      	cmp	r3, #1
 800f156:	d10e      	bne.n	800f176 <CAN_FilterInit+0x1fa>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 800f158:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f15c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f160:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f164:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f168:	f8d2 221c 	ldr.w	r2, [r2, #540]	; 0x21c
 800f16c:	4611      	mov	r1, r2
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	430a      	orrs	r2, r1
 800f172:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 800f176:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f17a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f17e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f182:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f186:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800f18a:	f022 0201 	bic.w	r2, r2, #1
 800f18e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800f192:	f107 0714 	add.w	r7, r7, #20
 800f196:	46bd      	mov	sp, r7
 800f198:	bc80      	pop	{r7}
 800f19a:	4770      	bx	lr

0800f19c <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f04f 0200 	mov.w	r2, #0
 800f1aa:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f04f 0200 	mov.w	r2, #0
 800f1b2:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f04f 0200 	mov.w	r2, #0
 800f1ba:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f04f 0200 	mov.w	r2, #0
 800f1c2:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f04f 0200 	mov.w	r2, #0
 800f1ca:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f04f 0200 	mov.w	r2, #0
 800f1d2:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f04f 0200 	mov.w	r2, #0
 800f1da:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f04f 0200 	mov.w	r2, #0
 800f1e2:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f04f 0203 	mov.w	r2, #3
 800f1ea:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f04f 0202 	mov.w	r2, #2
 800f1f2:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f04f 0201 	mov.w	r2, #1
 800f1fa:	801a      	strh	r2, [r3, #0]
}
 800f1fc:	f107 070c 	add.w	r7, r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	bc80      	pop	{r7}
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop

0800f208 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	4603      	mov	r3, r0
 800f210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800f212:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f216:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f21a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f21e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f222:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800f226:	f042 0201 	orr.w	r2, r2, #1
 800f22a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 800f22e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f232:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f236:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f23a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f23e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800f242:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800f246:	f022 020e 	bic.w	r2, r2, #14
 800f24a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 800f24e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f252:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f256:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f25a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f25e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800f262:	4611      	mov	r1, r2
 800f264:	79fa      	ldrb	r2, [r7, #7]
 800f266:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800f26a:	430a      	orrs	r2, r1
 800f26c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 800f270:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f274:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f278:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800f27c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f280:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800f284:	f022 0201 	bic.w	r2, r2, #1
 800f288:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800f28c:	f107 070c 	add.w	r7, r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	bc80      	pop	{r7}
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop

0800f298 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f2a4:	78fb      	ldrb	r3, [r7, #3]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d006      	beq.n	800f2b8 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	601a      	str	r2, [r3, #0]
 800f2b6:	e005      	b.n	800f2c4 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	601a      	str	r2, [r3, #0]
  }
}
 800f2c4:	f107 070c 	add.w	r7, r7, #12
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bc80      	pop	{r7}
 800f2cc:	4770      	bx	lr
 800f2ce:	bf00      	nop

0800f2d0 <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f2dc:	78fb      	ldrb	r3, [r7, #3]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d01e      	beq.n	800f320 <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800f2f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800f304:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800f314:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 800f31e:	e01d      	b.n	800f35c <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800f332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800f342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800f352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 800f35c:	f107 070c 	add.w	r7, r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	bc80      	pop	{r7}
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop

0800f368 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 800f368:	b480      	push	{r7}
 800f36a:	b085      	sub	sp, #20
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 800f372:	f04f 0300 	mov.w	r3, #0
 800f376:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f380:	2b00      	cmp	r3, #0
 800f382:	d003      	beq.n	800f38c <CAN_Transmit+0x24>
  {
    transmit_mailbox = 0;
 800f384:	f04f 0300 	mov.w	r3, #0
 800f388:	73fb      	strb	r3, [r7, #15]
 800f38a:	e016      	b.n	800f3ba <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f394:	2b00      	cmp	r3, #0
 800f396:	d003      	beq.n	800f3a0 <CAN_Transmit+0x38>
  {
    transmit_mailbox = 1;
 800f398:	f04f 0301 	mov.w	r3, #1
 800f39c:	73fb      	strb	r3, [r7, #15]
 800f39e:	e00c      	b.n	800f3ba <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	689b      	ldr	r3, [r3, #8]
 800f3a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d003      	beq.n	800f3b4 <CAN_Transmit+0x4c>
  {
    transmit_mailbox = 2;
 800f3ac:	f04f 0302 	mov.w	r3, #2
 800f3b0:	73fb      	strb	r3, [r7, #15]
 800f3b2:	e002      	b.n	800f3ba <CAN_Transmit+0x52>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 800f3b4:	f04f 0304 	mov.w	r3, #4
 800f3b8:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
 800f3bc:	2b04      	cmp	r3, #4
 800f3be:	f000 80bd 	beq.w	800f53c <CAN_Transmit+0x1d4>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 800f3c2:	7bfb      	ldrb	r3, [r7, #15]
 800f3c4:	7bfa      	ldrb	r2, [r7, #15]
 800f3c6:	6879      	ldr	r1, [r7, #4]
 800f3c8:	f102 0218 	add.w	r2, r2, #24
 800f3cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800f3d0:	188a      	adds	r2, r1, r2
 800f3d2:	6812      	ldr	r2, [r2, #0]
 800f3d4:	f002 0201 	and.w	r2, r2, #1
 800f3d8:	6879      	ldr	r1, [r7, #4]
 800f3da:	f103 0318 	add.w	r3, r3, #24
 800f3de:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f3e2:	18cb      	adds	r3, r1, r3
 800f3e4:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	7a1b      	ldrb	r3, [r3, #8]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d119      	bne.n	800f422 <CAN_Transmit+0xba>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800f3ee:	7bfb      	ldrb	r3, [r7, #15]
 800f3f0:	7bfa      	ldrb	r2, [r7, #15]
 800f3f2:	6879      	ldr	r1, [r7, #4]
 800f3f4:	f102 0218 	add.w	r2, r2, #24
 800f3f8:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800f3fc:	188a      	adds	r2, r1, r2
 800f3fe:	6812      	ldr	r2, [r2, #0]
 800f400:	4611      	mov	r1, r2
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	6812      	ldr	r2, [r2, #0]
 800f406:	ea4f 5042 	mov.w	r0, r2, lsl #21
                                                  TxMessage->RTR);
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800f40e:	4302      	orrs	r2, r0
 800f410:	430a      	orrs	r2, r1
 800f412:	6879      	ldr	r1, [r7, #4]
 800f414:	f103 0318 	add.w	r3, r3, #24
 800f418:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f41c:	18cb      	adds	r3, r1, r3
 800f41e:	601a      	str	r2, [r3, #0]
 800f420:	e01b      	b.n	800f45a <CAN_Transmit+0xf2>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800f422:	7bfb      	ldrb	r3, [r7, #15]
 800f424:	7bfa      	ldrb	r2, [r7, #15]
 800f426:	6879      	ldr	r1, [r7, #4]
 800f428:	f102 0218 	add.w	r2, r2, #24
 800f42c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800f430:	188a      	adds	r2, r1, r2
 800f432:	6812      	ldr	r2, [r2, #0]
 800f434:	4611      	mov	r1, r2
 800f436:	683a      	ldr	r2, [r7, #0]
 800f438:	6852      	ldr	r2, [r2, #4]
 800f43a:	ea4f 00c2 	mov.w	r0, r2, lsl #3
                                                  TxMessage->IDE | \
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800f442:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 800f444:	683a      	ldr	r2, [r7, #0]
 800f446:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 800f448:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800f44a:	430a      	orrs	r2, r1
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	f103 0318 	add.w	r3, r3, #24
 800f452:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f456:	18cb      	adds	r3, r1, r3
 800f458:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	7a9b      	ldrb	r3, [r3, #10]
 800f45e:	f003 030f 	and.w	r3, r3, #15
 800f462:	b2da      	uxtb	r2, r3
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	7bfa      	ldrb	r2, [r7, #15]
 800f46c:	6879      	ldr	r1, [r7, #4]
 800f46e:	f102 0218 	add.w	r2, r2, #24
 800f472:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800f476:	188a      	adds	r2, r1, r2
 800f478:	6852      	ldr	r2, [r2, #4]
 800f47a:	f022 020f 	bic.w	r2, r2, #15
 800f47e:	6879      	ldr	r1, [r7, #4]
 800f480:	f103 0318 	add.w	r3, r3, #24
 800f484:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f488:	18cb      	adds	r3, r1, r3
 800f48a:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 800f48c:	7bfb      	ldrb	r3, [r7, #15]
 800f48e:	7bfa      	ldrb	r2, [r7, #15]
 800f490:	6879      	ldr	r1, [r7, #4]
 800f492:	f102 0218 	add.w	r2, r2, #24
 800f496:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800f49a:	188a      	adds	r2, r1, r2
 800f49c:	6852      	ldr	r2, [r2, #4]
 800f49e:	4611      	mov	r1, r2
 800f4a0:	683a      	ldr	r2, [r7, #0]
 800f4a2:	7a92      	ldrb	r2, [r2, #10]
 800f4a4:	430a      	orrs	r2, r1
 800f4a6:	6879      	ldr	r1, [r7, #4]
 800f4a8:	f103 0318 	add.w	r3, r3, #24
 800f4ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f4b0:	18cb      	adds	r3, r1, r3
 800f4b2:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
 800f4b6:	683a      	ldr	r2, [r7, #0]
 800f4b8:	7b92      	ldrb	r2, [r2, #14]
 800f4ba:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	7b52      	ldrb	r2, [r2, #13]
 800f4c2:	ea4f 4202 	mov.w	r2, r2, lsl #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800f4c6:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	7b12      	ldrb	r2, [r2, #12]
 800f4cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800f4d0:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 800f4d2:	683a      	ldr	r2, [r7, #0]
 800f4d4:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800f4d6:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800f4d8:	6879      	ldr	r1, [r7, #4]
 800f4da:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f4de:	18cb      	adds	r3, r1, r3
 800f4e0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800f4e4:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800f4e6:	7bfb      	ldrb	r3, [r7, #15]
 800f4e8:	683a      	ldr	r2, [r7, #0]
 800f4ea:	7c92      	ldrb	r2, [r2, #18]
 800f4ec:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800f4f0:	683a      	ldr	r2, [r7, #0]
 800f4f2:	7c52      	ldrb	r2, [r2, #17]
 800f4f4:	ea4f 4202 	mov.w	r2, r2, lsl #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800f4f8:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800f4fa:	683a      	ldr	r2, [r7, #0]
 800f4fc:	7c12      	ldrb	r2, [r2, #16]
 800f4fe:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800f502:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 800f504:	683a      	ldr	r2, [r7, #0]
 800f506:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800f508:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800f50a:	6879      	ldr	r1, [r7, #4]
 800f50c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f510:	18cb      	adds	r3, r1, r3
 800f512:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800f516:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	7bfa      	ldrb	r2, [r7, #15]
 800f51c:	6879      	ldr	r1, [r7, #4]
 800f51e:	f102 0218 	add.w	r2, r2, #24
 800f522:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800f526:	188a      	adds	r2, r1, r2
 800f528:	6812      	ldr	r2, [r2, #0]
 800f52a:	f042 0201 	orr.w	r2, r2, #1
 800f52e:	6879      	ldr	r1, [r7, #4]
 800f530:	f103 0318 	add.w	r3, r3, #24
 800f534:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f538:	18cb      	adds	r3, r1, r3
 800f53a:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 800f53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	f107 0714 	add.w	r7, r7, #20
 800f544:	46bd      	mov	sp, r7
 800f546:	bc80      	pop	{r7}
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop

0800f54c <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	460b      	mov	r3, r1
 800f556:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 800f558:	f04f 0300 	mov.w	r3, #0
 800f55c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 800f55e:	78fb      	ldrb	r3, [r7, #3]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d00d      	beq.n	800f580 <CAN_TransmitStatus+0x34>
 800f564:	2b02      	cmp	r3, #2
 800f566:	d015      	beq.n	800f594 <CAN_TransmitStatus+0x48>
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d11d      	bne.n	800f5a8 <CAN_TransmitStatus+0x5c>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	461a      	mov	r2, r3
 800f572:	f04f 0303 	mov.w	r3, #3
 800f576:	f2c0 4300 	movt	r3, #1024	; 0x400
 800f57a:	4013      	ands	r3, r2
 800f57c:	60fb      	str	r3, [r7, #12]
      break;
 800f57e:	e017      	b.n	800f5b0 <CAN_TransmitStatus+0x64>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	461a      	mov	r2, r3
 800f586:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f58a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800f58e:	4013      	ands	r3, r2
 800f590:	60fb      	str	r3, [r7, #12]
      break;
 800f592:	e00d      	b.n	800f5b0 <CAN_TransmitStatus+0x64>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	689b      	ldr	r3, [r3, #8]
 800f598:	461a      	mov	r2, r3
 800f59a:	f04f 0300 	mov.w	r3, #0
 800f59e:	f2c1 0303 	movt	r3, #4099	; 0x1003
 800f5a2:	4013      	ands	r3, r2
 800f5a4:	60fb      	str	r3, [r7, #12]
      break;
 800f5a6:	e003      	b.n	800f5b0 <CAN_TransmitStatus+0x64>
    default:
      state = CAN_TxStatus_Failed;
 800f5a8:	f04f 0300 	mov.w	r3, #0
 800f5ac:	60fb      	str	r3, [r7, #12]
      break;
 800f5ae:	bf00      	nop
  }
  switch (state)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f5b6:	f6c0 0200 	movt	r2, #2048	; 0x800
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d02f      	beq.n	800f61e <CAN_TransmitStatus+0xd2>
 800f5be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f5c2:	f6c0 0200 	movt	r2, #2048	; 0x800
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d80e      	bhi.n	800f5e8 <CAN_TransmitStatus+0x9c>
 800f5ca:	f04f 0201 	mov.w	r2, #1
 800f5ce:	f2c0 4200 	movt	r2, #1024	; 0x400
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d01f      	beq.n	800f616 <CAN_TransmitStatus+0xca>
 800f5d6:	f04f 0203 	mov.w	r2, #3
 800f5da:	f2c0 4200 	movt	r2, #1024	; 0x400
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d025      	beq.n	800f62e <CAN_TransmitStatus+0xe2>
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d013      	beq.n	800f60e <CAN_TransmitStatus+0xc2>
 800f5e6:	e02e      	b.n	800f646 <CAN_TransmitStatus+0xfa>
 800f5e8:	f04f 0200 	mov.w	r2, #0
 800f5ec:	f2c1 0201 	movt	r2, #4097	; 0x1001
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d018      	beq.n	800f626 <CAN_TransmitStatus+0xda>
 800f5f4:	f04f 0200 	mov.w	r2, #0
 800f5f8:	f2c1 0203 	movt	r2, #4099	; 0x1003
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d01e      	beq.n	800f63e <CAN_TransmitStatus+0xf2>
 800f600:	f44f 7240 	mov.w	r2, #768	; 0x300
 800f604:	f6c0 0200 	movt	r2, #2048	; 0x800
 800f608:	4293      	cmp	r3, r2
 800f60a:	d014      	beq.n	800f636 <CAN_TransmitStatus+0xea>
 800f60c:	e01b      	b.n	800f646 <CAN_TransmitStatus+0xfa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 800f60e:	f04f 0302 	mov.w	r3, #2
 800f612:	60fb      	str	r3, [r7, #12]
      break;
 800f614:	e01b      	b.n	800f64e <CAN_TransmitStatus+0x102>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 800f616:	f04f 0300 	mov.w	r3, #0
 800f61a:	60fb      	str	r3, [r7, #12]
      break;
 800f61c:	e017      	b.n	800f64e <CAN_TransmitStatus+0x102>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 800f61e:	f04f 0300 	mov.w	r3, #0
 800f622:	60fb      	str	r3, [r7, #12]
      break;
 800f624:	e013      	b.n	800f64e <CAN_TransmitStatus+0x102>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 800f626:	f04f 0300 	mov.w	r3, #0
 800f62a:	60fb      	str	r3, [r7, #12]
      break;
 800f62c:	e00f      	b.n	800f64e <CAN_TransmitStatus+0x102>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 800f62e:	f04f 0301 	mov.w	r3, #1
 800f632:	60fb      	str	r3, [r7, #12]
      break;
 800f634:	e00b      	b.n	800f64e <CAN_TransmitStatus+0x102>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 800f636:	f04f 0301 	mov.w	r3, #1
 800f63a:	60fb      	str	r3, [r7, #12]
      break;
 800f63c:	e007      	b.n	800f64e <CAN_TransmitStatus+0x102>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 800f63e:	f04f 0301 	mov.w	r3, #1
 800f642:	60fb      	str	r3, [r7, #12]
      break;
 800f644:	e003      	b.n	800f64e <CAN_TransmitStatus+0x102>
    default: state = CAN_TxStatus_Failed;
 800f646:	f04f 0300 	mov.w	r3, #0
 800f64a:	60fb      	str	r3, [r7, #12]
      break;
 800f64c:	bf00      	nop
  }
  return (uint8_t) state;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	b2db      	uxtb	r3, r3
}
 800f652:	4618      	mov	r0, r3
 800f654:	f107 0714 	add.w	r7, r7, #20
 800f658:	46bd      	mov	sp, r7
 800f65a:	bc80      	pop	{r7}
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop

0800f660 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	460b      	mov	r3, r1
 800f66a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 800f66c:	78fb      	ldrb	r3, [r7, #3]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d00a      	beq.n	800f688 <CAN_CancelTransmit+0x28>
 800f672:	2b02      	cmp	r3, #2
 800f674:	d00f      	beq.n	800f696 <CAN_CancelTransmit+0x36>
 800f676:	2b00      	cmp	r3, #0
 800f678:	d114      	bne.n	800f6a4 <CAN_CancelTransmit+0x44>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	609a      	str	r2, [r3, #8]
      break;
 800f686:	e00e      	b.n	800f6a6 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	689b      	ldr	r3, [r3, #8]
 800f68c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	609a      	str	r2, [r3, #8]
      break;
 800f694:	e007      	b.n	800f6a6 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	689b      	ldr	r3, [r3, #8]
 800f69a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	609a      	str	r2, [r3, #8]
      break;
 800f6a2:	e000      	b.n	800f6a6 <CAN_CancelTransmit+0x46>
    default:
      break;
 800f6a4:	bf00      	nop
  }
}
 800f6a6:	f107 070c 	add.w	r7, r7, #12
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bc80      	pop	{r7}
 800f6ae:	4770      	bx	lr

0800f6b0 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	607a      	str	r2, [r7, #4]
 800f6bc:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800f6be:	7afb      	ldrb	r3, [r7, #11]
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	f103 031b 	add.w	r3, r3, #27
 800f6c6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f6ca:	18d3      	adds	r3, r2, r3
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	f003 0304 	and.w	r3, r3, #4
 800f6d4:	b2da      	uxtb	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	7a1b      	ldrb	r3, [r3, #8]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d10c      	bne.n	800f6fc <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 800f6e2:	7afb      	ldrb	r3, [r7, #11]
 800f6e4:	68fa      	ldr	r2, [r7, #12]
 800f6e6:	f103 031b 	add.w	r3, r3, #27
 800f6ea:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f6ee:	18d3      	adds	r3, r2, r3
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	ea4f 5253 	mov.w	r2, r3, lsr #21
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	e00b      	b.n	800f714 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800f6fc:	7afb      	ldrb	r3, [r7, #11]
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	f103 031b 	add.w	r3, r3, #27
 800f704:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f708:	18d3      	adds	r3, r2, r3
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800f714:	7afb      	ldrb	r3, [r7, #11]
 800f716:	68fa      	ldr	r2, [r7, #12]
 800f718:	f103 031b 	add.w	r3, r3, #27
 800f71c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f720:	18d3      	adds	r3, r2, r3
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	b2db      	uxtb	r3, r3
 800f726:	f003 0302 	and.w	r3, r3, #2
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 800f730:	7afb      	ldrb	r3, [r7, #11]
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	f103 031b 	add.w	r3, r3, #27
 800f738:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f73c:	18d3      	adds	r3, r2, r3
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	b2db      	uxtb	r3, r3
 800f742:	f003 030f 	and.w	r3, r3, #15
 800f746:	b2da      	uxtb	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 800f74c:	7afb      	ldrb	r3, [r7, #11]
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	f103 031b 	add.w	r3, r3, #27
 800f754:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f758:	18d3      	adds	r3, r2, r3
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800f760:	b2da      	uxtb	r2, r3
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 800f766:	7afb      	ldrb	r3, [r7, #11]
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f76e:	18d3      	adds	r3, r2, r3
 800f770:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	b2da      	uxtb	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 800f77c:	7afb      	ldrb	r3, [r7, #11]
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f784:	18d3      	adds	r3, r2, r3
 800f786:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800f790:	b2da      	uxtb	r2, r3
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800f796:	7afb      	ldrb	r3, [r7, #11]
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f79e:	18d3      	adds	r3, r2, r3
 800f7a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 800f7b0:	7afb      	ldrb	r3, [r7, #11]
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f7b8:	18d3      	adds	r3, r2, r3
 800f7ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 800f7ca:	7afb      	ldrb	r3, [r7, #11]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f7d2:	18d3      	adds	r3, r2, r3
 800f7d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	b2da      	uxtb	r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 800f7e0:	7afb      	ldrb	r3, [r7, #11]
 800f7e2:	68fa      	ldr	r2, [r7, #12]
 800f7e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f7e8:	18d3      	adds	r3, r2, r3
 800f7ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800f7f4:	b2da      	uxtb	r2, r3
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 800f7fa:	7afb      	ldrb	r3, [r7, #11]
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f802:	18d3      	adds	r3, r2, r3
 800f804:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 800f814:	7afb      	ldrb	r3, [r7, #11]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f81c:	18d3      	adds	r3, r2, r3
 800f81e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800f82e:	7afb      	ldrb	r3, [r7, #11]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d106      	bne.n	800f842 <CAN_Receive+0x192>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	f043 0220 	orr.w	r2, r3, #32
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	60da      	str	r2, [r3, #12]
 800f840:	e005      	b.n	800f84e <CAN_Receive+0x19e>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	691b      	ldr	r3, [r3, #16]
 800f846:	f043 0220 	orr.w	r2, r3, #32
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	611a      	str	r2, [r3, #16]
  }
}
 800f84e:	f107 0714 	add.w	r7, r7, #20
 800f852:	46bd      	mov	sp, r7
 800f854:	bc80      	pop	{r7}
 800f856:	4770      	bx	lr

0800f858 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	460b      	mov	r3, r1
 800f862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800f864:	78fb      	ldrb	r3, [r7, #3]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d106      	bne.n	800f878 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	f043 0220 	orr.w	r2, r3, #32
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	60da      	str	r2, [r3, #12]
 800f876:	e005      	b.n	800f884 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	f043 0220 	orr.w	r2, r3, #32
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	611a      	str	r2, [r3, #16]
  }
}
 800f884:	f107 070c 	add.w	r7, r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	bc80      	pop	{r7}
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop

0800f890 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 800f89c:	f04f 0300 	mov.w	r3, #0
 800f8a0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 800f8a2:	78fb      	ldrb	r3, [r7, #3]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d106      	bne.n	800f8b6 <CAN_MessagePending+0x26>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	f003 0303 	and.w	r3, r3, #3
 800f8b2:	73fb      	strb	r3, [r7, #15]
 800f8b4:	e00c      	b.n	800f8d0 <CAN_MessagePending+0x40>
  }
  else if (FIFONumber == CAN_FIFO1)
 800f8b6:	78fb      	ldrb	r3, [r7, #3]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d106      	bne.n	800f8ca <CAN_MessagePending+0x3a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	691b      	ldr	r3, [r3, #16]
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	f003 0303 	and.w	r3, r3, #3
 800f8c6:	73fb      	strb	r3, [r7, #15]
 800f8c8:	e002      	b.n	800f8d0 <CAN_MessagePending+0x40>
  }
  else
  {
    message_pending = 0;
 800f8ca:	f04f 0300 	mov.w	r3, #0
 800f8ce:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 800f8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f107 0714 	add.w	r7, r7, #20
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bc80      	pop	{r7}
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop

0800f8e0 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 800f8ec:	f04f 0300 	mov.w	r3, #0
 800f8f0:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 800f8f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 800f8f8:	78fb      	ldrb	r3, [r7, #3]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d123      	bne.n	800f946 <CAN_OperatingModeRequest+0x66>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f023 0303 	bic.w	r3, r3, #3
 800f906:	f043 0201 	orr.w	r2, r3, #1
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 800f90e:	e003      	b.n	800f918 <CAN_OperatingModeRequest+0x38>
    {
      timeout--;
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	f103 33ff 	add.w	r3, r3, #4294967295
 800f916:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	f003 0303 	and.w	r3, r3, #3
 800f920:	2b01      	cmp	r3, #1
 800f922:	d002      	beq.n	800f92a <CAN_OperatingModeRequest+0x4a>
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d1f2      	bne.n	800f910 <CAN_OperatingModeRequest+0x30>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	f003 0303 	and.w	r3, r3, #3
 800f932:	2b01      	cmp	r3, #1
 800f934:	d003      	beq.n	800f93e <CAN_OperatingModeRequest+0x5e>
    {
      status = CAN_ModeStatus_Failed;
 800f936:	f04f 0300 	mov.w	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]
 800f93c:	e052      	b.n	800f9e4 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800f93e:	f04f 0301 	mov.w	r3, #1
 800f942:	73fb      	strb	r3, [r7, #15]
 800f944:	e04e      	b.n	800f9e4 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 800f946:	78fb      	ldrb	r3, [r7, #3]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d121      	bne.n	800f990 <CAN_OperatingModeRequest+0xb0>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f023 0203 	bic.w	r2, r3, #3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 800f958:	e003      	b.n	800f962 <CAN_OperatingModeRequest+0x82>
    {
      timeout--;
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	f103 33ff 	add.w	r3, r3, #4294967295
 800f960:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	f003 0303 	and.w	r3, r3, #3
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d002      	beq.n	800f974 <CAN_OperatingModeRequest+0x94>
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d1f2      	bne.n	800f95a <CAN_OperatingModeRequest+0x7a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	f003 0303 	and.w	r3, r3, #3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d003      	beq.n	800f988 <CAN_OperatingModeRequest+0xa8>
    {
      status = CAN_ModeStatus_Failed;
 800f980:	f04f 0300 	mov.w	r3, #0
 800f984:	73fb      	strb	r3, [r7, #15]
 800f986:	e02d      	b.n	800f9e4 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800f988:	f04f 0301 	mov.w	r3, #1
 800f98c:	73fb      	strb	r3, [r7, #15]
 800f98e:	e029      	b.n	800f9e4 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 800f990:	78fb      	ldrb	r3, [r7, #3]
 800f992:	2b02      	cmp	r3, #2
 800f994:	d123      	bne.n	800f9de <CAN_OperatingModeRequest+0xfe>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f023 0303 	bic.w	r3, r3, #3
 800f99e:	f043 0202 	orr.w	r2, r3, #2
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800f9a6:	e003      	b.n	800f9b0 <CAN_OperatingModeRequest+0xd0>
    {
      timeout--;
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800f9ae:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	f003 0303 	and.w	r3, r3, #3
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d002      	beq.n	800f9c2 <CAN_OperatingModeRequest+0xe2>
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d1f2      	bne.n	800f9a8 <CAN_OperatingModeRequest+0xc8>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	f003 0303 	and.w	r3, r3, #3
 800f9ca:	2b02      	cmp	r3, #2
 800f9cc:	d003      	beq.n	800f9d6 <CAN_OperatingModeRequest+0xf6>
    {
      status = CAN_ModeStatus_Failed;
 800f9ce:	f04f 0300 	mov.w	r3, #0
 800f9d2:	73fb      	strb	r3, [r7, #15]
 800f9d4:	e006      	b.n	800f9e4 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800f9d6:	f04f 0301 	mov.w	r3, #1
 800f9da:	73fb      	strb	r3, [r7, #15]
 800f9dc:	e002      	b.n	800f9e4 <CAN_OperatingModeRequest+0x104>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 800f9de:	f04f 0300 	mov.w	r3, #0
 800f9e2:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f107 0714 	add.w	r7, r7, #20
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bc80      	pop	{r7}
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop

0800f9f4 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 800f9fc:	f04f 0300 	mov.w	r3, #0
 800fa00:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f023 0303 	bic.w	r3, r3, #3
 800fa0a:	f043 0202 	orr.w	r2, r3, #2
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	f003 0303 	and.w	r3, r3, #3
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d102      	bne.n	800fa24 <CAN_Sleep+0x30>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 800fa1e:	f04f 0301 	mov.w	r3, #1
 800fa22:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	f107 0714 	add.w	r7, r7, #20
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bc80      	pop	{r7}
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop

0800fa34 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b085      	sub	sp, #20
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 800fa3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa40:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 800fa42:	f04f 0300 	mov.w	r3, #0
 800fa46:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f023 0202 	bic.w	r2, r3, #2
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 800fa54:	e003      	b.n	800fa5e <CAN_WakeUp+0x2a>
  {
   wait_slak--;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa5c:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	f003 0302 	and.w	r3, r3, #2
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d002      	beq.n	800fa70 <CAN_WakeUp+0x3c>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1f2      	bne.n	800fa56 <CAN_WakeUp+0x22>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	f003 0302 	and.w	r3, r3, #2
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d102      	bne.n	800fa82 <CAN_WakeUp+0x4e>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 800fa7c:	f04f 0301 	mov.w	r3, #1
 800fa80:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 800fa82:	7afb      	ldrb	r3, [r7, #11]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	f107 0714 	add.w	r7, r7, #20
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bc80      	pop	{r7}
 800fa8e:	4770      	bx	lr

0800fa90 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b085      	sub	sp, #20
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 800fa98:	f04f 0300 	mov.w	r3, #0
 800fa9c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800faa8:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 800faaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800faac:	4618      	mov	r0, r3
 800faae:	f107 0714 	add.w	r7, r7, #20
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bc80      	pop	{r7}
 800fab6:	4770      	bx	lr

0800fab8 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800fac0:	f04f 0300 	mov.w	r3, #0
 800fac4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	699b      	ldr	r3, [r3, #24]
 800faca:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800face:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 800fad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	f107 0714 	add.w	r7, r7, #20
 800fad8:	46bd      	mov	sp, r7
 800fada:	bc80      	pop	{r7}
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop

0800fae0 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b085      	sub	sp, #20
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800fae8:	f04f 0300 	mov.w	r3, #0
 800faec:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	699b      	ldr	r3, [r3, #24]
 800faf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800faf6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800fafa:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 800fafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	f107 0714 	add.w	r7, r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bc80      	pop	{r7}
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop

0800fb0c <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	4613      	mov	r3, r2
 800fb18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fb1a:	79fb      	ldrb	r3, [r7, #7]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d007      	beq.n	800fb30 <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	695b      	ldr	r3, [r3, #20]
 800fb24:	461a      	mov	r2, r3
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	431a      	orrs	r2, r3
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	615a      	str	r2, [r3, #20]
 800fb2e:	e008      	b.n	800fb42 <CAN_ITConfig+0x36>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	695b      	ldr	r3, [r3, #20]
 800fb34:	461a      	mov	r2, r3
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	ea6f 0303 	mvn.w	r3, r3
 800fb3c:	401a      	ands	r2, r3
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	615a      	str	r2, [r3, #20]
  }
}
 800fb42:	f107 0714 	add.w	r7, r7, #20
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bc80      	pop	{r7}
 800fb4a:	4770      	bx	lr

0800fb4c <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b085      	sub	sp, #20
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800fb56:	f04f 0300 	mov.w	r3, #0
 800fb5a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d012      	beq.n	800fb8c <CAN_GetFlagStatus+0x40>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	699b      	ldr	r3, [r3, #24]
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	4013      	ands	r3, r2
 800fb70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d003      	beq.n	800fb84 <CAN_GetFlagStatus+0x38>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800fb7c:	f04f 0301 	mov.w	r3, #1
 800fb80:	73fb      	strb	r3, [r7, #15]
 800fb82:	e05d      	b.n	800fc40 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800fb84:	f04f 0300 	mov.w	r3, #0
 800fb88:	73fb      	strb	r3, [r7, #15]
 800fb8a:	e059      	b.n	800fc40 <CAN_GetFlagStatus+0xf4>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d012      	beq.n	800fbbc <CAN_GetFlagStatus+0x70>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	4013      	ands	r3, r2
 800fba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fba4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d003      	beq.n	800fbb4 <CAN_GetFlagStatus+0x68>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800fbac:	f04f 0301 	mov.w	r3, #1
 800fbb0:	73fb      	strb	r3, [r7, #15]
 800fbb2:	e045      	b.n	800fc40 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800fbb4:	f04f 0300 	mov.w	r3, #0
 800fbb8:	73fb      	strb	r3, [r7, #15]
 800fbba:	e041      	b.n	800fc40 <CAN_GetFlagStatus+0xf4>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d012      	beq.n	800fbec <CAN_GetFlagStatus+0xa0>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	4013      	ands	r3, r2
 800fbd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fbd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d003      	beq.n	800fbe4 <CAN_GetFlagStatus+0x98>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800fbdc:	f04f 0301 	mov.w	r3, #1
 800fbe0:	73fb      	strb	r3, [r7, #15]
 800fbe2:	e02d      	b.n	800fc40 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800fbe4:	f04f 0300 	mov.w	r3, #0
 800fbe8:	73fb      	strb	r3, [r7, #15]
 800fbea:	e029      	b.n	800fc40 <CAN_GetFlagStatus+0xf4>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d012      	beq.n	800fc1c <CAN_GetFlagStatus+0xd0>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	4013      	ands	r3, r2
 800fc00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d003      	beq.n	800fc14 <CAN_GetFlagStatus+0xc8>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800fc0c:	f04f 0301 	mov.w	r3, #1
 800fc10:	73fb      	strb	r3, [r7, #15]
 800fc12:	e015      	b.n	800fc40 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800fc14:	f04f 0300 	mov.w	r3, #0
 800fc18:	73fb      	strb	r3, [r7, #15]
 800fc1a:	e011      	b.n	800fc40 <CAN_GetFlagStatus+0xf4>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	461a      	mov	r2, r3
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	4013      	ands	r3, r2
 800fc26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d003      	beq.n	800fc3a <CAN_GetFlagStatus+0xee>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800fc32:	f04f 0301 	mov.w	r3, #1
 800fc36:	73fb      	strb	r3, [r7, #15]
 800fc38:	e002      	b.n	800fc40 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800fc3a:	f04f 0300 	mov.w	r3, #0
 800fc3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 800fc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	f107 0714 	add.w	r7, r7, #20
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bc80      	pop	{r7}
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop

0800fc50 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b085      	sub	sp, #20
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 800fc5a:	f04f 0300 	mov.w	r3, #0
 800fc5e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 800fc60:	683a      	ldr	r2, [r7, #0]
 800fc62:	f04f 0370 	mov.w	r3, #112	; 0x70
 800fc66:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d104      	bne.n	800fc78 <CAN_ClearFlag+0x28>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f04f 0200 	mov.w	r2, #0
 800fc74:	619a      	str	r2, [r3, #24]
 800fc76:	e023      	b.n	800fcc0 <CAN_ClearFlag+0x70>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc82:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d003      	beq.n	800fc96 <CAN_ClearFlag+0x46>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	60da      	str	r2, [r3, #12]
 800fc94:	e014      	b.n	800fcc0 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d003      	beq.n	800fca8 <CAN_ClearFlag+0x58>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	611a      	str	r2, [r3, #16]
 800fca6:	e00b      	b.n	800fcc0 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d003      	beq.n	800fcba <CAN_ClearFlag+0x6a>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	609a      	str	r2, [r3, #8]
 800fcb8:	e002      	b.n	800fcc0 <CAN_ClearFlag+0x70>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	605a      	str	r2, [r3, #4]
    }
  }
}
 800fcc0:	f107 0714 	add.w	r7, r7, #20
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bc80      	pop	{r7}
 800fcc8:	4770      	bx	lr
 800fcca:	bf00      	nop

0800fccc <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 800fcd6:	f04f 0300 	mov.w	r3, #0
 800fcda:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	695b      	ldr	r3, [r3, #20]
 800fce0:	461a      	mov	r2, r3
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	4013      	ands	r3, r2
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f000 80c4 	beq.w	800fe74 <CAN_GetITStatus+0x1a8>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	2b40      	cmp	r3, #64	; 0x40
 800fcf0:	d06b      	beq.n	800fdca <CAN_GetITStatus+0xfe>
 800fcf2:	2b40      	cmp	r3, #64	; 0x40
 800fcf4:	d80f      	bhi.n	800fd16 <CAN_GetITStatus+0x4a>
 800fcf6:	2b04      	cmp	r3, #4
 800fcf8:	d03f      	beq.n	800fd7a <CAN_GetITStatus+0xae>
 800fcfa:	2b04      	cmp	r3, #4
 800fcfc:	d804      	bhi.n	800fd08 <CAN_GetITStatus+0x3c>
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d025      	beq.n	800fd4e <CAN_GetITStatus+0x82>
 800fd02:	2b02      	cmp	r3, #2
 800fd04:	d02f      	beq.n	800fd66 <CAN_GetITStatus+0x9a>
 800fd06:	e0b1      	b.n	800fe6c <CAN_GetITStatus+0x1a0>
 800fd08:	2b10      	cmp	r3, #16
 800fd0a:	d04a      	beq.n	800fda2 <CAN_GetITStatus+0xd6>
 800fd0c:	2b20      	cmp	r3, #32
 800fd0e:	d052      	beq.n	800fdb6 <CAN_GetITStatus+0xea>
 800fd10:	2b08      	cmp	r3, #8
 800fd12:	d03c      	beq.n	800fd8e <CAN_GetITStatus+0xc2>
 800fd14:	e0aa      	b.n	800fe6c <CAN_GetITStatus+0x1a0>
 800fd16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd1a:	f000 8092 	beq.w	800fe42 <CAN_GetITStatus+0x176>
 800fd1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd22:	d809      	bhi.n	800fd38 <CAN_GetITStatus+0x6c>
 800fd24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd28:	d077      	beq.n	800fe1a <CAN_GetITStatus+0x14e>
 800fd2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd2e:	d07e      	beq.n	800fe2e <CAN_GetITStatus+0x162>
 800fd30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd34:	d067      	beq.n	800fe06 <CAN_GetITStatus+0x13a>
 800fd36:	e099      	b.n	800fe6c <CAN_GetITStatus+0x1a0>
 800fd38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd3c:	d04f      	beq.n	800fdde <CAN_GetITStatus+0x112>
 800fd3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd42:	d056      	beq.n	800fdf2 <CAN_GetITStatus+0x126>
 800fd44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd48:	f000 8085 	beq.w	800fe56 <CAN_GetITStatus+0x18a>
 800fd4c:	e08e      	b.n	800fe6c <CAN_GetITStatus+0x1a0>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	4618      	mov	r0, r3
 800fd54:	f240 1101 	movw	r1, #257	; 0x101
 800fd58:	f2c0 0101 	movt	r1, #1
 800fd5c:	f000 f912 	bl	800ff84 <CheckITStatus>
 800fd60:	4603      	mov	r3, r0
 800fd62:	73fb      	strb	r3, [r7, #15]
        break;
 800fd64:	e089      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f04f 0103 	mov.w	r1, #3
 800fd70:	f000 f908 	bl	800ff84 <CheckITStatus>
 800fd74:	4603      	mov	r3, r0
 800fd76:	73fb      	strb	r3, [r7, #15]
        break;
 800fd78:	e07f      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f04f 0108 	mov.w	r1, #8
 800fd84:	f000 f8fe 	bl	800ff84 <CheckITStatus>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	73fb      	strb	r3, [r7, #15]
        break;
 800fd8c:	e075      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f04f 0110 	mov.w	r1, #16
 800fd98:	f000 f8f4 	bl	800ff84 <CheckITStatus>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	73fb      	strb	r3, [r7, #15]
        break;
 800fda0:	e06b      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f04f 0103 	mov.w	r1, #3
 800fdac:	f000 f8ea 	bl	800ff84 <CheckITStatus>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	73fb      	strb	r3, [r7, #15]
        break;
 800fdb4:	e061      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	691b      	ldr	r3, [r3, #16]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f04f 0108 	mov.w	r1, #8
 800fdc0:	f000 f8e0 	bl	800ff84 <CheckITStatus>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	73fb      	strb	r3, [r7, #15]
        break;
 800fdc8:	e057      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	691b      	ldr	r3, [r3, #16]
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f04f 0110 	mov.w	r1, #16
 800fdd4:	f000 f8d6 	bl	800ff84 <CheckITStatus>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	73fb      	strb	r3, [r7, #15]
        break;
 800fddc:	e04d      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	4618      	mov	r0, r3
 800fde4:	f04f 0108 	mov.w	r1, #8
 800fde8:	f000 f8cc 	bl	800ff84 <CheckITStatus>
 800fdec:	4603      	mov	r3, r0
 800fdee:	73fb      	strb	r3, [r7, #15]
        break;
 800fdf0:	e043      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f04f 0110 	mov.w	r1, #16
 800fdfc:	f000 f8c2 	bl	800ff84 <CheckITStatus>
 800fe00:	4603      	mov	r3, r0
 800fe02:	73fb      	strb	r3, [r7, #15]
        break;
 800fe04:	e039      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	699b      	ldr	r3, [r3, #24]
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f04f 0101 	mov.w	r1, #1
 800fe10:	f000 f8b8 	bl	800ff84 <CheckITStatus>
 800fe14:	4603      	mov	r3, r0
 800fe16:	73fb      	strb	r3, [r7, #15]
        break;
 800fe18:	e02f      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	699b      	ldr	r3, [r3, #24]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f04f 0102 	mov.w	r1, #2
 800fe24:	f000 f8ae 	bl	800ff84 <CheckITStatus>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73fb      	strb	r3, [r7, #15]
        break;
 800fe2c:	e025      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	699b      	ldr	r3, [r3, #24]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f04f 0104 	mov.w	r1, #4
 800fe38:	f000 f8a4 	bl	800ff84 <CheckITStatus>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	73fb      	strb	r3, [r7, #15]
        break;
 800fe40:	e01b      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	699b      	ldr	r3, [r3, #24]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f04f 0170 	mov.w	r1, #112	; 0x70
 800fe4c:	f000 f89a 	bl	800ff84 <CheckITStatus>
 800fe50:	4603      	mov	r3, r0
 800fe52:	73fb      	strb	r3, [r7, #15]
        break;
 800fe54:	e011      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f04f 0104 	mov.w	r1, #4
 800fe60:	f000 f890 	bl	800ff84 <CheckITStatus>
 800fe64:	4603      	mov	r3, r0
 800fe66:	73fb      	strb	r3, [r7, #15]
        break;
 800fe68:	bf00      	nop
 800fe6a:	e006      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 800fe6c:	f04f 0300 	mov.w	r3, #0
 800fe70:	73fb      	strb	r3, [r7, #15]
        break;
 800fe72:	e002      	b.n	800fe7a <CAN_GetITStatus+0x1ae>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 800fe74:	f04f 0300 	mov.w	r3, #0
 800fe78:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 800fe7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f107 0710 	add.w	r7, r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop

0800fe88 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe98:	d04c      	beq.n	800ff34 <CAN_ClearITPendingBit+0xac>
 800fe9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe9e:	d80d      	bhi.n	800febc <CAN_ClearITPendingBit+0x34>
 800fea0:	2b08      	cmp	r3, #8
 800fea2:	d02e      	beq.n	800ff02 <CAN_ClearITPendingBit+0x7a>
 800fea4:	2b08      	cmp	r3, #8
 800fea6:	d804      	bhi.n	800feb2 <CAN_ClearITPendingBit+0x2a>
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d01e      	beq.n	800feea <CAN_ClearITPendingBit+0x62>
 800feac:	2b04      	cmp	r3, #4
 800feae:	d023      	beq.n	800fef8 <CAN_ClearITPendingBit+0x70>
 800feb0:	e061      	b.n	800ff76 <CAN_ClearITPendingBit+0xee>
 800feb2:	2b20      	cmp	r3, #32
 800feb4:	d02a      	beq.n	800ff0c <CAN_ClearITPendingBit+0x84>
 800feb6:	2b40      	cmp	r3, #64	; 0x40
 800feb8:	d02d      	beq.n	800ff16 <CAN_ClearITPendingBit+0x8e>
 800feba:	e05c      	b.n	800ff76 <CAN_ClearITPendingBit+0xee>
 800febc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fec0:	d047      	beq.n	800ff52 <CAN_ClearITPendingBit+0xca>
 800fec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fec6:	d806      	bhi.n	800fed6 <CAN_ClearITPendingBit+0x4e>
 800fec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fecc:	d037      	beq.n	800ff3e <CAN_ClearITPendingBit+0xb6>
 800fece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fed2:	d039      	beq.n	800ff48 <CAN_ClearITPendingBit+0xc0>
 800fed4:	e04f      	b.n	800ff76 <CAN_ClearITPendingBit+0xee>
 800fed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800feda:	d021      	beq.n	800ff20 <CAN_ClearITPendingBit+0x98>
 800fedc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fee0:	d023      	beq.n	800ff2a <CAN_ClearITPendingBit+0xa2>
 800fee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fee6:	d03d      	beq.n	800ff64 <CAN_ClearITPendingBit+0xdc>
 800fee8:	e045      	b.n	800ff76 <CAN_ClearITPendingBit+0xee>
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	f240 1301 	movw	r3, #257	; 0x101
 800fef0:	f2c0 0301 	movt	r3, #1
 800fef4:	6093      	str	r3, [r2, #8]
      break;
 800fef6:	e03f      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f04f 0208 	mov.w	r2, #8
 800fefe:	60da      	str	r2, [r3, #12]
      break;
 800ff00:	e03a      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f04f 0210 	mov.w	r2, #16
 800ff08:	60da      	str	r2, [r3, #12]
      break;
 800ff0a:	e035      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f04f 0208 	mov.w	r2, #8
 800ff12:	611a      	str	r2, [r3, #16]
      break;
 800ff14:	e030      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f04f 0210 	mov.w	r2, #16
 800ff1c:	611a      	str	r2, [r3, #16]
      break;
 800ff1e:	e02b      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f04f 0208 	mov.w	r2, #8
 800ff26:	605a      	str	r2, [r3, #4]
      break;
 800ff28:	e026      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f04f 0210 	mov.w	r2, #16
 800ff30:	605a      	str	r2, [r3, #4]
      break;
 800ff32:	e021      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f04f 0204 	mov.w	r2, #4
 800ff3a:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 800ff3c:	e01c      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f04f 0204 	mov.w	r2, #4
 800ff44:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 800ff46:	e017      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f04f 0204 	mov.w	r2, #4
 800ff4e:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 800ff50:	e012      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f04f 0200 	mov.w	r2, #0
 800ff58:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f04f 0204 	mov.w	r2, #4
 800ff60:	605a      	str	r2, [r3, #4]
      break;
 800ff62:	e009      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f04f 0200 	mov.w	r2, #0
 800ff6a:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f04f 0204 	mov.w	r2, #4
 800ff72:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 800ff74:	e000      	b.n	800ff78 <CAN_ClearITPendingBit+0xf0>
    default:
       break;
 800ff76:	bf00      	nop
   }
}
 800ff78:	f107 070c 	add.w	r7, r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bc80      	pop	{r7}
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop

0800ff84 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 800ff84:	b480      	push	{r7}
 800ff86:	b085      	sub	sp, #20
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 800ff8e:	f04f 0300 	mov.w	r3, #0
 800ff92:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	4013      	ands	r3, r2
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d003      	beq.n	800ffa6 <CheckITStatus+0x22>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 800ff9e:	f04f 0301 	mov.w	r3, #1
 800ffa2:	73fb      	strb	r3, [r7, #15]
 800ffa4:	e002      	b.n	800ffac <CheckITStatus+0x28>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800ffa6:	f04f 0300 	mov.w	r3, #0
 800ffaa:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 800ffac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f107 0714 	add.w	r7, r7, #20
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bc80      	pop	{r7}
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop

0800ffbc <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 800ffc0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ffc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ffc8:	f04f 0201 	mov.w	r2, #1
 800ffcc:	609a      	str	r2, [r3, #8]
}
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bc80      	pop	{r7}
 800ffd2:	4770      	bx	lr

0800ffd4 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 800ffdc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ffe0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 800ffe8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ffec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fff0:	681b      	ldr	r3, [r3, #0]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	f107 070c 	add.w	r7, r7, #12
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bc80      	pop	{r7}
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop

08010000 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 801000a:	f04f 0300 	mov.w	r3, #0
 801000e:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8010010:	f04f 0300 	mov.w	r3, #0
 8010014:	60fb      	str	r3, [r7, #12]
 8010016:	e00e      	b.n	8010036 <CRC_CalcBlockCRC+0x36>
  {
    CRC->DR = pBuffer[index];
 8010018:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801001c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010020:	68fa      	ldr	r2, [r7, #12]
 8010022:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8010026:	6879      	ldr	r1, [r7, #4]
 8010028:	188a      	adds	r2, r1, r2
 801002a:	6812      	ldr	r2, [r2, #0]
 801002c:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f103 0301 	add.w	r3, r3, #1
 8010034:	60fb      	str	r3, [r7, #12]
 8010036:	68fa      	ldr	r2, [r7, #12]
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	429a      	cmp	r2, r3
 801003c:	d3ec      	bcc.n	8010018 <CRC_CalcBlockCRC+0x18>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 801003e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8010042:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010046:	681b      	ldr	r3, [r3, #0]
}
 8010048:	4618      	mov	r0, r3
 801004a:	f107 0714 	add.w	r7, r7, #20
 801004e:	46bd      	mov	sp, r7
 8010050:	bc80      	pop	{r7}
 8010052:	4770      	bx	lr

08010054 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8010054:	b480      	push	{r7}
 8010056:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8010058:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801005c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010060:	681b      	ldr	r3, [r3, #0]
}
 8010062:	4618      	mov	r0, r3
 8010064:	46bd      	mov	sp, r7
 8010066:	bc80      	pop	{r7}
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop

0801006c <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	4603      	mov	r3, r0
 8010074:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8010076:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801007a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801007e:	79fa      	ldrb	r2, [r7, #7]
 8010080:	711a      	strb	r2, [r3, #4]
}
 8010082:	f107 070c 	add.w	r7, r7, #12
 8010086:	46bd      	mov	sp, r7
 8010088:	bc80      	pop	{r7}
 801008a:	4770      	bx	lr

0801008c <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 801008c:	b480      	push	{r7}
 801008e:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8010090:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8010094:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010098:	791b      	ldrb	r3, [r3, #4]
 801009a:	b2db      	uxtb	r3, r3
}
 801009c:	4618      	mov	r0, r3
 801009e:	46bd      	mov	sp, r7
 80100a0:	bc80      	pop	{r7}
 80100a2:	4770      	bx	lr

080100a4 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 80100a8:	f04f 0010 	mov.w	r0, #16
 80100ac:	f04f 0101 	mov.w	r1, #1
 80100b0:	f007 f8fc 	bl	80172ac <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 80100b4:	f04f 0010 	mov.w	r0, #16
 80100b8:	f04f 0100 	mov.w	r1, #0
 80100bc:	f007 f8f6 	bl	80172ac <RCC_AHB2PeriphResetCmd>
}
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop

080100c4 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 80100cc:	f04f 0300 	mov.w	r3, #0
 80100d0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80100d4:	f04f 0200 	mov.w	r2, #0
 80100d8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80100dc:	6812      	ldr	r2, [r2, #0]
 80100de:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80100e2:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 80100e4:	f04f 0300 	mov.w	r3, #0
 80100e8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80100ec:	f04f 0200 	mov.w	r2, #0
 80100f0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80100f4:	6812      	ldr	r2, [r2, #0]
 80100f6:	4611      	mov	r1, r2
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	8852      	ldrh	r2, [r2, #2]
 80100fc:	430a      	orrs	r2, r1
 80100fe:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8010100:	f04f 0300 	mov.w	r3, #0
 8010104:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010108:	f04f 0200 	mov.w	r2, #0
 801010c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8010110:	6812      	ldr	r2, [r2, #0]
 8010112:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010116:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8010118:	f04f 0300 	mov.w	r3, #0
 801011c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010120:	f04f 0200 	mov.w	r2, #0
 8010124:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8010128:	6812      	ldr	r2, [r2, #0]
 801012a:	4611      	mov	r1, r2
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	8892      	ldrh	r2, [r2, #4]
 8010130:	430a      	orrs	r2, r1
 8010132:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	885b      	ldrh	r3, [r3, #2]
 8010138:	2b20      	cmp	r3, #32
 801013a:	d00b      	beq.n	8010154 <CRYP_Init+0x90>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	885b      	ldrh	r3, [r3, #2]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8010140:	2b28      	cmp	r3, #40	; 0x28
 8010142:	d007      	beq.n	8010154 <CRYP_Init+0x90>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8010148:	2b30      	cmp	r3, #48	; 0x30
 801014a:	d003      	beq.n	8010154 <CRYP_Init+0x90>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8010150:	2b38      	cmp	r3, #56	; 0x38
 8010152:	d119      	bne.n	8010188 <CRYP_Init+0xc4>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8010154:	f04f 0300 	mov.w	r3, #0
 8010158:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801015c:	f04f 0200 	mov.w	r2, #0
 8010160:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8010164:	6812      	ldr	r2, [r2, #0]
 8010166:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801016a:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 801016c:	f04f 0300 	mov.w	r3, #0
 8010170:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010174:	f04f 0200 	mov.w	r2, #0
 8010178:	f2c5 0206 	movt	r2, #20486	; 0x5006
 801017c:	6812      	ldr	r2, [r2, #0]
 801017e:	4611      	mov	r1, r2
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	88d2      	ldrh	r2, [r2, #6]
 8010184:	430a      	orrs	r2, r1
 8010186:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8010188:	f04f 0300 	mov.w	r3, #0
 801018c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010190:	f04f 0200 	mov.w	r2, #0
 8010194:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8010198:	6812      	ldr	r2, [r2, #0]
 801019a:	f022 0204 	bic.w	r2, r2, #4
 801019e:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 80101a0:	f04f 0300 	mov.w	r3, #0
 80101a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80101a8:	f04f 0200 	mov.w	r2, #0
 80101ac:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80101b0:	6812      	ldr	r2, [r2, #0]
 80101b2:	4611      	mov	r1, r2
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	8812      	ldrh	r2, [r2, #0]
 80101b8:	430a      	orrs	r2, r1
 80101ba:	601a      	str	r2, [r3, #0]
}
 80101bc:	f107 070c 	add.w	r7, r7, #12
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bc80      	pop	{r7}
 80101c4:	4770      	bx	lr
 80101c6:	bf00      	nop

080101c8 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f04f 0200 	mov.w	r2, #0
 80101d6:	801a      	strh	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f04f 0200 	mov.w	r2, #0
 80101de:	805a      	strh	r2, [r3, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f04f 0200 	mov.w	r2, #0
 80101e6:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f04f 0200 	mov.w	r2, #0
 80101ee:	80da      	strh	r2, [r3, #6]
}
 80101f0:	f107 070c 	add.w	r7, r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bc80      	pop	{r7}
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop

080101fc <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8010204:	f04f 0300 	mov.w	r3, #0
 8010208:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	6812      	ldr	r2, [r2, #0]
 8010210:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8010212:	f04f 0300 	mov.w	r3, #0
 8010216:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	6852      	ldr	r2, [r2, #4]
 801021e:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8010220:	f04f 0300 	mov.w	r3, #0
 8010224:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	6892      	ldr	r2, [r2, #8]
 801022c:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 801022e:	f04f 0300 	mov.w	r3, #0
 8010232:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	68d2      	ldr	r2, [r2, #12]
 801023a:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 801023c:	f04f 0300 	mov.w	r3, #0
 8010240:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	6912      	ldr	r2, [r2, #16]
 8010248:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 801024a:	f04f 0300 	mov.w	r3, #0
 801024e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	6952      	ldr	r2, [r2, #20]
 8010256:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8010258:	f04f 0300 	mov.w	r3, #0
 801025c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	6992      	ldr	r2, [r2, #24]
 8010264:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8010266:	f04f 0300 	mov.w	r3, #0
 801026a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	69d2      	ldr	r2, [r2, #28]
 8010272:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8010274:	f107 070c 	add.w	r7, r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	bc80      	pop	{r7}
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f04f 0200 	mov.w	r2, #0
 801028e:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f04f 0200 	mov.w	r2, #0
 8010296:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f04f 0200 	mov.w	r2, #0
 801029e:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f04f 0200 	mov.w	r2, #0
 80102a6:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f04f 0200 	mov.w	r2, #0
 80102ae:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f04f 0200 	mov.w	r2, #0
 80102b6:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f04f 0200 	mov.w	r2, #0
 80102be:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f04f 0200 	mov.w	r2, #0
 80102c6:	61da      	str	r2, [r3, #28]
}
 80102c8:	f107 070c 	add.w	r7, r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bc80      	pop	{r7}
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop

080102d4 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 80102dc:	f04f 0300 	mov.w	r3, #0
 80102e0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	6812      	ldr	r2, [r2, #0]
 80102e8:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 80102ea:	f04f 0300 	mov.w	r3, #0
 80102ee:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80102f2:	687a      	ldr	r2, [r7, #4]
 80102f4:	6852      	ldr	r2, [r2, #4]
 80102f6:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 80102f8:	f04f 0300 	mov.w	r3, #0
 80102fc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	6892      	ldr	r2, [r2, #8]
 8010304:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8010306:	f04f 0300 	mov.w	r3, #0
 801030a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	68d2      	ldr	r2, [r2, #12]
 8010312:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8010314:	f107 070c 	add.w	r7, r7, #12
 8010318:	46bd      	mov	sp, r7
 801031a:	bc80      	pop	{r7}
 801031c:	4770      	bx	lr
 801031e:	bf00      	nop

08010320 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f04f 0200 	mov.w	r2, #0
 801032e:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f04f 0200 	mov.w	r2, #0
 8010336:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f04f 0200 	mov.w	r2, #0
 801033e:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f04f 0200 	mov.w	r2, #0
 8010346:	60da      	str	r2, [r3, #12]
}
 8010348:	f107 070c 	add.w	r7, r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	bc80      	pop	{r7}
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop

08010354 <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 8010354:	b480      	push	{r7}
 8010356:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8010358:	f04f 0300 	mov.w	r3, #0
 801035c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010360:	f04f 0200 	mov.w	r2, #0
 8010364:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8010368:	6812      	ldr	r2, [r2, #0]
 801036a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801036e:	601a      	str	r2, [r3, #0]
}
 8010370:	46bd      	mov	sp, r7
 8010372:	bc80      	pop	{r7}
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop

08010378 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 8010378:	b480      	push	{r7}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
 801037e:	4603      	mov	r3, r0
 8010380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d00c      	beq.n	80103a2 <CRYP_Cmd+0x2a>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8010388:	f04f 0300 	mov.w	r3, #0
 801038c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010390:	f04f 0200 	mov.w	r2, #0
 8010394:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8010398:	6812      	ldr	r2, [r2, #0]
 801039a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801039e:	601a      	str	r2, [r3, #0]
 80103a0:	e00b      	b.n	80103ba <CRYP_Cmd+0x42>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 80103a2:	f04f 0300 	mov.w	r3, #0
 80103a6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80103aa:	f04f 0200 	mov.w	r2, #0
 80103ae:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80103b2:	6812      	ldr	r2, [r2, #0]
 80103b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80103b8:	601a      	str	r2, [r3, #0]
  }
}
 80103ba:	f107 070c 	add.w	r7, r7, #12
 80103be:	46bd      	mov	sp, r7
 80103c0:	bc80      	pop	{r7}
 80103c2:	4770      	bx	lr

080103c4 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 80103cc:	f04f 0300 	mov.w	r3, #0
 80103d0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80103d4:	687a      	ldr	r2, [r7, #4]
 80103d6:	609a      	str	r2, [r3, #8]
}
 80103d8:	f107 070c 	add.w	r7, r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	bc80      	pop	{r7}
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop

080103e4 <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 80103e4:	b480      	push	{r7}
 80103e6:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 80103e8:	f04f 0300 	mov.w	r3, #0
 80103ec:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80103f0:	68db      	ldr	r3, [r3, #12]
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bc80      	pop	{r7}
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop

080103fc <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b087      	sub	sp, #28
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8010406:	f04f 0300 	mov.w	r3, #0
 801040a:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 801040c:	f04f 0300 	mov.w	r3, #0
 8010410:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 8010412:	f04f 0300 	mov.w	r3, #0
 8010416:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8010418:	f04f 0300 	mov.w	r3, #0
 801041c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010420:	f04f 0200 	mov.w	r2, #0
 8010424:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8010428:	6912      	ldr	r2, [r2, #16]
 801042a:	f022 0201 	bic.w	r2, r2, #1
 801042e:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8010430:	f04f 0300 	mov.w	r3, #0
 8010434:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f003 0308 	and.w	r3, r3, #8
 801043e:	2b00      	cmp	r3, #0
 8010440:	d003      	beq.n	801044a <CRYP_SaveContext+0x4e>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8010442:	f04f 0311 	mov.w	r3, #17
 8010446:	617b      	str	r3, [r7, #20]
 8010448:	e002      	b.n	8010450 <CRYP_SaveContext+0x54>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 801044a:	f04f 0315 	mov.w	r3, #21
 801044e:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8010450:	f04f 0300 	mov.w	r3, #0
 8010454:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	461a      	mov	r2, r3
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	4013      	ands	r3, r2
 8010460:	60fb      	str	r3, [r7, #12]
    timeout++;
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	f103 0301 	add.w	r3, r3, #1
 8010468:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 801046a:	68ba      	ldr	r2, [r7, #8]
 801046c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010470:	429a      	cmp	r2, r3
 8010472:	d002      	beq.n	801047a <CRYP_SaveContext+0x7e>
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2b01      	cmp	r3, #1
 8010478:	d1ea      	bne.n	8010450 <CRYP_SaveContext+0x54>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 801047a:	f04f 0300 	mov.w	r3, #0
 801047e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	461a      	mov	r2, r3
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	4013      	ands	r3, r2
 801048a:	2b01      	cmp	r3, #1
 801048c:	d003      	beq.n	8010496 <CRYP_SaveContext+0x9a>
  {
    status = ERROR;
 801048e:	f04f 0300 	mov.w	r3, #0
 8010492:	74fb      	strb	r3, [r7, #19]
 8010494:	e063      	b.n	801055e <CRYP_SaveContext+0x162>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8010496:	f04f 0300 	mov.w	r3, #0
 801049a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801049e:	f04f 0200 	mov.w	r2, #0
 80104a2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80104a6:	6912      	ldr	r2, [r2, #16]
 80104a8:	f022 0202 	bic.w	r2, r2, #2
 80104ac:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 80104ae:	f04f 0300 	mov.w	r3, #0
 80104b2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80104b6:	f04f 0200 	mov.w	r2, #0
 80104ba:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80104be:	6812      	ldr	r2, [r2, #0]
 80104c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80104c4:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 80104c6:	f04f 0300 	mov.w	r3, #0
 80104ca:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f403 727f 	and.w	r2, r3, #1020	; 0x3fc
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	601a      	str	r2, [r3, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 80104d8:	f04f 0300 	mov.w	r3, #0
 80104dc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80104e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104e2:	461a      	mov	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 80104e8:	f04f 0300 	mov.w	r3, #0
 80104ec:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80104f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104f2:	461a      	mov	r2, r3
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 80104f8:	f04f 0300 	mov.w	r3, #0
 80104fc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010502:	461a      	mov	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8010508:	f04f 0300 	mov.w	r3, #0
 801050c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010512:	461a      	mov	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	685a      	ldr	r2, [r3, #4]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	689a      	ldr	r2, [r3, #8]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	68da      	ldr	r2, [r3, #12]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	691a      	ldr	r2, [r3, #16]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	695a      	ldr	r2, [r3, #20]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	699a      	ldr	r2, [r3, #24]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	69da      	ldr	r2, [r3, #28]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	631a      	str	r2, [r3, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8010558:	f04f 0301 	mov.w	r3, #1
 801055c:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 801055e:	7cfb      	ldrb	r3, [r7, #19]
}
 8010560:	4618      	mov	r0, r3
 8010562:	f107 071c 	add.w	r7, r7, #28
 8010566:	46bd      	mov	sp, r7
 8010568:	bc80      	pop	{r7}
 801056a:	4770      	bx	lr

0801056c <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 8010574:	f04f 0300 	mov.w	r3, #0
 8010578:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	6812      	ldr	r2, [r2, #0]
 8010580:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8010582:	f04f 0300 	mov.w	r3, #0
 8010586:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	6952      	ldr	r2, [r2, #20]
 801058e:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 8010590:	f04f 0300 	mov.w	r3, #0
 8010594:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	6992      	ldr	r2, [r2, #24]
 801059c:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 801059e:	f04f 0300 	mov.w	r3, #0
 80105a2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	69d2      	ldr	r2, [r2, #28]
 80105aa:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 80105ac:	f04f 0300 	mov.w	r3, #0
 80105b0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	6a12      	ldr	r2, [r2, #32]
 80105b8:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 80105ba:	f04f 0300 	mov.w	r3, #0
 80105be:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80105c6:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 80105c8:	f04f 0300 	mov.w	r3, #0
 80105cc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80105d4:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 80105d6:	f04f 0300 	mov.w	r3, #0
 80105da:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80105e2:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 80105e4:	f04f 0300 	mov.w	r3, #0
 80105e8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80105f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 80105f2:	f04f 0300 	mov.w	r3, #0
 80105f6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	6852      	ldr	r2, [r2, #4]
 80105fe:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 8010600:	f04f 0300 	mov.w	r3, #0
 8010604:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	6892      	ldr	r2, [r2, #8]
 801060c:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 801060e:	f04f 0300 	mov.w	r3, #0
 8010612:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	68d2      	ldr	r2, [r2, #12]
 801061a:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 801061c:	f04f 0300 	mov.w	r3, #0
 8010620:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	6912      	ldr	r2, [r2, #16]
 8010628:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 801062a:	f04f 0300 	mov.w	r3, #0
 801062e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010632:	f04f 0200 	mov.w	r2, #0
 8010636:	f2c5 0206 	movt	r2, #20486	; 0x5006
 801063a:	6812      	ldr	r2, [r2, #0]
 801063c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010640:	601a      	str	r2, [r3, #0]
}
 8010642:	f107 070c 	add.w	r7, r7, #12
 8010646:	46bd      	mov	sp, r7
 8010648:	bc80      	pop	{r7}
 801064a:	4770      	bx	lr

0801064c <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	71fa      	strb	r2, [r7, #7]
 8010658:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801065a:	79bb      	ldrb	r3, [r7, #6]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00d      	beq.n	801067c <CRYP_DMACmd+0x30>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8010660:	f04f 0300 	mov.w	r3, #0
 8010664:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010668:	f04f 0200 	mov.w	r2, #0
 801066c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8010670:	6912      	ldr	r2, [r2, #16]
 8010672:	4611      	mov	r1, r2
 8010674:	79fa      	ldrb	r2, [r7, #7]
 8010676:	430a      	orrs	r2, r1
 8010678:	611a      	str	r2, [r3, #16]
 801067a:	e00f      	b.n	801069c <CRYP_DMACmd+0x50>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 801067c:	f04f 0300 	mov.w	r3, #0
 8010680:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8010684:	f04f 0200 	mov.w	r2, #0
 8010688:	f2c5 0206 	movt	r2, #20486	; 0x5006
 801068c:	6912      	ldr	r2, [r2, #16]
 801068e:	4611      	mov	r1, r2
 8010690:	79fa      	ldrb	r2, [r7, #7]
 8010692:	ea6f 0202 	mvn.w	r2, r2
 8010696:	b2d2      	uxtb	r2, r2
 8010698:	400a      	ands	r2, r1
 801069a:	611a      	str	r2, [r3, #16]
  }
}
 801069c:	f107 070c 	add.w	r7, r7, #12
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bc80      	pop	{r7}
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop

080106a8 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	71fa      	strb	r2, [r7, #7]
 80106b4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80106b6:	79bb      	ldrb	r3, [r7, #6]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00d      	beq.n	80106d8 <CRYP_ITConfig+0x30>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 80106bc:	f04f 0300 	mov.w	r3, #0
 80106c0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80106c4:	f04f 0200 	mov.w	r2, #0
 80106c8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80106cc:	6952      	ldr	r2, [r2, #20]
 80106ce:	4611      	mov	r1, r2
 80106d0:	79fa      	ldrb	r2, [r7, #7]
 80106d2:	430a      	orrs	r2, r1
 80106d4:	615a      	str	r2, [r3, #20]
 80106d6:	e00f      	b.n	80106f8 <CRYP_ITConfig+0x50>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 80106d8:	f04f 0300 	mov.w	r3, #0
 80106dc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80106e0:	f04f 0200 	mov.w	r2, #0
 80106e4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80106e8:	6952      	ldr	r2, [r2, #20]
 80106ea:	4611      	mov	r1, r2
 80106ec:	79fa      	ldrb	r2, [r7, #7]
 80106ee:	ea6f 0202 	mvn.w	r2, r2
 80106f2:	b2d2      	uxtb	r2, r2
 80106f4:	400a      	ands	r2, r1
 80106f6:	615a      	str	r2, [r3, #20]
  }
}
 80106f8:	f107 070c 	add.w	r7, r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bc80      	pop	{r7}
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop

08010704 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
 801070a:	4603      	mov	r3, r0
 801070c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 801070e:	f04f 0300 	mov.w	r3, #0
 8010712:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8010714:	f04f 0300 	mov.w	r3, #0
 8010718:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801071c:	69db      	ldr	r3, [r3, #28]
 801071e:	461a      	mov	r2, r3
 8010720:	79fb      	ldrb	r3, [r7, #7]
 8010722:	4013      	ands	r3, r2
 8010724:	2b00      	cmp	r3, #0
 8010726:	d003      	beq.n	8010730 <CRYP_GetITStatus+0x2c>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8010728:	f04f 0301 	mov.w	r3, #1
 801072c:	73fb      	strb	r3, [r7, #15]
 801072e:	e002      	b.n	8010736 <CRYP_GetITStatus+0x32>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 8010730:	f04f 0300 	mov.w	r3, #0
 8010734:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 8010736:	7bfb      	ldrb	r3, [r7, #15]
}
 8010738:	4618      	mov	r0, r3
 801073a:	f107 0714 	add.w	r7, r7, #20
 801073e:	46bd      	mov	sp, r7
 8010740:	bc80      	pop	{r7}
 8010742:	4770      	bx	lr

08010744 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 8010744:	b480      	push	{r7}
 8010746:	b085      	sub	sp, #20
 8010748:	af00      	add	r7, sp, #0
 801074a:	4603      	mov	r3, r0
 801074c:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 801074e:	f04f 0300 	mov.w	r3, #0
 8010752:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8010754:	f04f 0300 	mov.w	r3, #0
 8010758:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 801075a:	79fb      	ldrb	r3, [r7, #7]
 801075c:	f003 0320 	and.w	r3, r3, #32
 8010760:	2b00      	cmp	r3, #0
 8010762:	d006      	beq.n	8010772 <CRYP_GetFlagStatus+0x2e>
  {
    tempreg = CRYP->RISR;
 8010764:	f04f 0300 	mov.w	r3, #0
 8010768:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801076c:	699b      	ldr	r3, [r3, #24]
 801076e:	60bb      	str	r3, [r7, #8]
 8010770:	e005      	b.n	801077e <CRYP_GetFlagStatus+0x3a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8010772:	f04f 0300 	mov.w	r3, #0
 8010776:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 801077e:	79fa      	ldrb	r2, [r7, #7]
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	4013      	ands	r3, r2
 8010784:	2b00      	cmp	r3, #0
 8010786:	d003      	beq.n	8010790 <CRYP_GetFlagStatus+0x4c>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8010788:	f04f 0301 	mov.w	r3, #1
 801078c:	73fb      	strb	r3, [r7, #15]
 801078e:	e002      	b.n	8010796 <CRYP_GetFlagStatus+0x52>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 8010790:	f04f 0300 	mov.w	r3, #0
 8010794:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8010796:	7bfb      	ldrb	r3, [r7, #15]
}
 8010798:	4618      	mov	r0, r3
 801079a:	f107 0714 	add.w	r7, r7, #20
 801079e:	46bd      	mov	sp, r7
 80107a0:	bc80      	pop	{r7}
 80107a2:	4770      	bx	lr

080107a4 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 80107a4:	b590      	push	{r4, r7, lr}
 80107a6:	b0bb      	sub	sp, #236	; 0xec
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60b9      	str	r1, [r7, #8]
 80107ac:	607b      	str	r3, [r7, #4]
 80107ae:	4603      	mov	r3, r0
 80107b0:	73fb      	strb	r3, [r7, #15]
 80107b2:	4613      	mov	r3, r2
 80107b4:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80107b6:	f04f 0300 	mov.w	r3, #0
 80107ba:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80107bc:	f04f 0300 	mov.w	r3, #0
 80107c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  ErrorStatus status = SUCCESS;
 80107c4:	f04f 0301 	mov.w	r3, #1
 80107c8:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  uint32_t keyaddr    = (uint32_t)Key;
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint32_t inputaddr  = (uint32_t)Input;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t outputaddr = (uint32_t)Output;
 80107d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80107dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t i = 0;
 80107e0:	f04f 0300 	mov.w	r3, #0
 80107e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80107e8:	f107 0318 	add.w	r3, r7, #24
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7ff fd47 	bl	8010280 <CRYP_KeyStructInit>

  switch(Keysize)
 80107f2:	89bb      	ldrh	r3, [r7, #12]
 80107f4:	2bc0      	cmp	r3, #192	; 0xc0
 80107f6:	d050      	beq.n	801089a <CRYP_AES_ECB+0xf6>
 80107f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107fc:	f000 80bd 	beq.w	801097a <CRYP_AES_ECB+0x1d6>
 8010800:	2b80      	cmp	r3, #128	; 0x80
 8010802:	f040 8130 	bne.w	8010a66 <CRYP_AES_ECB+0x2c2>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8010806:	f04f 0300 	mov.w	r3, #0
 801080a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 801080c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801081a:	ba1c      	rev	r4, r3
 801081c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
  return(result);
 8010820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010824:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8010826:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801082a:	f103 0304 	add.w	r3, r3, #4
 801082e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8010832:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801083c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010840:	ba1c      	rev	r4, r3
 8010842:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
  return(result);
 8010846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801084a:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 801084c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010850:	f103 0304 	add.w	r3, r3, #4
 8010854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8010858:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010862:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010866:	ba1c      	rev	r4, r3
 8010868:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
  return(result);
 801086c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010870:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8010872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010876:	f103 0304 	add.w	r3, r3, #4
 801087a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 801087e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801088c:	ba1c      	rev	r4, r3
 801088e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
  return(result);
 8010892:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010896:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8010898:	e0e6      	b.n	8010a68 <CRYP_AES_ECB+0x2c4>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 801089a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801089e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80108a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80108aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80108ae:	ba1c      	rev	r4, r3
 80108b0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
  return(result);
 80108b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108b8:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 80108ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108be:	f103 0304 	add.w	r3, r3, #4
 80108c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80108c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80108d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80108d4:	ba1c      	rev	r4, r3
 80108d6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
  return(result);
 80108da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80108de:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80108e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108e4:	f103 0304 	add.w	r3, r3, #4
 80108e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80108ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80108f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80108fa:	ba1c      	rev	r4, r3
 80108fc:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
  return(result);
 8010900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010904:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8010906:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801090a:	f103 0304 	add.w	r3, r3, #4
 801090e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8010912:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801091c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010920:	ba1c      	rev	r4, r3
 8010922:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
  return(result);
 8010926:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801092a:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 801092c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010930:	f103 0304 	add.w	r3, r3, #4
 8010934:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8010938:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010946:	ba1c      	rev	r4, r3
 8010948:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
  return(result);
 801094c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010950:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8010952:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010956:	f103 0304 	add.w	r3, r3, #4
 801095a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 801095e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801096c:	ba1c      	rev	r4, r3
 801096e:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
  return(result);
 8010972:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010976:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8010978:	e076      	b.n	8010a68 <CRYP_AES_ECB+0x2c4>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 801097a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801097e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8010980:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	67fb      	str	r3, [r7, #124]	; 0x7c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801098a:	ba1c      	rev	r4, r3
 801098c:	67bc      	str	r4, [r7, #120]	; 0x78
  return(result);
 801098e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010990:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8010992:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010996:	f103 0304 	add.w	r3, r3, #4
 801099a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 801099e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	677b      	str	r3, [r7, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80109a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109a8:	ba1c      	rev	r4, r3
 80109aa:	673c      	str	r4, [r7, #112]	; 0x70
  return(result);
 80109ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80109ae:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 80109b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80109b4:	f103 0304 	add.w	r3, r3, #4
 80109b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80109bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80109c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109c6:	ba1c      	rev	r4, r3
 80109c8:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 80109ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109cc:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 80109ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80109d2:	f103 0304 	add.w	r3, r3, #4
 80109d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80109da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80109e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109e4:	ba1c      	rev	r4, r3
 80109e6:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 80109e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109ea:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80109ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80109f0:	f103 0304 	add.w	r3, r3, #4
 80109f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80109f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a02:	ba1c      	rev	r4, r3
 8010a04:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8010a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a08:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8010a0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010a0e:	f103 0304 	add.w	r3, r3, #4
 8010a12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8010a16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a20:	ba1c      	rev	r4, r3
 8010a22:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 8010a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8010a28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010a2c:	f103 0304 	add.w	r3, r3, #4
 8010a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8010a34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a3e:	ba1c      	rev	r4, r3
 8010a40:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8010a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a44:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8010a46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010a4a:	f103 0304 	add.w	r3, r3, #4
 8010a4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8010a52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a5c:	ba1c      	rev	r4, r3
 8010a5e:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8010a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a62:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8010a64:	e000      	b.n	8010a68 <CRYP_AES_ECB+0x2c4>
    default:
    break;
 8010a66:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8010a68:	7bfb      	ldrb	r3, [r7, #15]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d138      	bne.n	8010ae0 <CRYP_AES_ECB+0x33c>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8010a6e:	f7ff fc71 	bl	8010354 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8010a72:	f04f 0304 	mov.w	r3, #4
 8010a76:	873b      	strh	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8010a78:	f04f 0338 	mov.w	r3, #56	; 0x38
 8010a7c:	877b      	strh	r3, [r7, #58]	; 0x3a
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8010a7e:	f04f 0300 	mov.w	r3, #0
 8010a82:	87bb      	strh	r3, [r7, #60]	; 0x3c
    CRYP_Init(&AES_CRYP_InitStructure);
 8010a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7ff fb1b 	bl	80100c4 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8010a8e:	f107 0318 	add.w	r3, r7, #24
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7ff fbb2 	bl	80101fc <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8010a98:	f04f 0001 	mov.w	r0, #1
 8010a9c:	f7ff fc6c 	bl	8010378 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8010aa0:	f04f 0010 	mov.w	r0, #16
 8010aa4:	f7ff fe4e 	bl	8010744 <CRYP_GetFlagStatus>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	f103 0301 	add.w	r3, r3, #1
 8010ab4:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010abc:	d003      	beq.n	8010ac6 <CRYP_AES_ECB+0x322>
 8010abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d1ec      	bne.n	8010aa0 <CRYP_AES_ECB+0x2fc>

    if (busystatus != RESET)
 8010ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d004      	beq.n	8010ad8 <CRYP_AES_ECB+0x334>
   {
       status = ERROR;
 8010ace:	f04f 0300 	mov.w	r3, #0
 8010ad2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8010ad6:	e00b      	b.n	8010af0 <CRYP_AES_ECB+0x34c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8010ad8:	f04f 0304 	mov.w	r3, #4
 8010adc:	873b      	strh	r3, [r7, #56]	; 0x38
 8010ade:	e007      	b.n	8010af0 <CRYP_AES_ECB+0x34c>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8010ae0:	f107 0318 	add.w	r3, r7, #24
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff fb89 	bl	80101fc <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8010aea:	f04f 0300 	mov.w	r3, #0
 8010aee:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8010af0:	f04f 0320 	mov.w	r3, #32
 8010af4:	877b      	strh	r3, [r7, #58]	; 0x3a
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8010af6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8010afa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&AES_CRYP_InitStructure);
 8010afc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7ff fadf 	bl	80100c4 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8010b06:	f7ff fc25 	bl	8010354 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8010b0a:	f04f 0001 	mov.w	r0, #1
 8010b0e:	f7ff fc33 	bl	8010378 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8010b12:	f04f 0300 	mov.w	r3, #0
 8010b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010b1a:	e084      	b.n	8010c26 <CRYP_AES_ECB+0x482>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8010b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff fc4e 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8010b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b2c:	f103 0304 	add.w	r3, r3, #4
 8010b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8010b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7ff fc42 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8010b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b44:	f103 0304 	add.w	r3, r3, #4
 8010b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8010b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff fc36 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8010b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b5c:	f103 0304 	add.w	r3, r3, #4
 8010b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8010b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7ff fc2a 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8010b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b74:	f103 0304 	add.w	r3, r3, #4
 8010b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Wait until the complete message has been processed */
    counter = 0;
 8010b7c:	f04f 0300 	mov.w	r3, #0
 8010b80:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8010b82:	f04f 0010 	mov.w	r0, #16
 8010b86:	f7ff fddd 	bl	8010744 <CRYP_GetFlagStatus>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	f103 0301 	add.w	r3, r3, #1
 8010b96:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b9e:	d003      	beq.n	8010ba8 <CRYP_AES_ECB+0x404>
 8010ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d1ec      	bne.n	8010b82 <CRYP_AES_ECB+0x3de>

    if (busystatus != RESET)
 8010ba8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d004      	beq.n	8010bba <CRYP_AES_ECB+0x416>
   {
       status = ERROR;
 8010bb0:	f04f 0300 	mov.w	r3, #0
 8010bb4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8010bb8:	e02f      	b.n	8010c1a <CRYP_AES_ECB+0x476>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8010bba:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8010bbe:	f7ff fc11 	bl	80103e4 <CRYP_DataOut>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8010bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010bca:	f103 0304 	add.w	r3, r3, #4
 8010bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8010bd2:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8010bd6:	f7ff fc05 	bl	80103e4 <CRYP_DataOut>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8010bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010be2:	f103 0304 	add.w	r3, r3, #4
 8010be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8010bea:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8010bee:	f7ff fbf9 	bl	80103e4 <CRYP_DataOut>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8010bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010bfa:	f103 0304 	add.w	r3, r3, #4
 8010bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8010c02:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8010c06:	f7ff fbed 	bl	80103e4 <CRYP_DataOut>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8010c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c12:	f103 0304 	add.w	r3, r3, #4
 8010c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8010c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c1e:	f103 0310 	add.w	r3, r3, #16
 8010c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010c26:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8010c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d204      	bcs.n	8010c3c <CRYP_AES_ECB+0x498>
 8010c32:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	f47f af70 	bne.w	8010b1c <CRYP_AES_ECB+0x378>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8010c3c:	f04f 0000 	mov.w	r0, #0
 8010c40:	f7ff fb9a 	bl	8010378 <CRYP_Cmd>

  return status; 
 8010c44:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f107 07ec 	add.w	r7, r7, #236	; 0xec
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd90      	pop	{r4, r7, pc}
 8010c52:	bf00      	nop

08010c54 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8010c54:	b590      	push	{r4, r7, lr}
 8010c56:	b0c7      	sub	sp, #284	; 0x11c
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	f107 0408 	add.w	r4, r7, #8
 8010c5e:	6021      	str	r1, [r4, #0]
 8010c60:	f107 0104 	add.w	r1, r7, #4
 8010c64:	600a      	str	r2, [r1, #0]
 8010c66:	461a      	mov	r2, r3
 8010c68:	f107 0310 	add.w	r3, r7, #16
 8010c6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c70:	4601      	mov	r1, r0
 8010c72:	7019      	strb	r1, [r3, #0]
 8010c74:	f107 030c 	add.w	r3, r7, #12
 8010c78:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8010c7a:	f107 0310 	add.w	r3, r7, #16
 8010c7e:	f04f 0200 	mov.w	r2, #0
 8010c82:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8010c84:	f04f 0300 	mov.w	r3, #0
 8010c88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 8010c8c:	f04f 0301 	mov.w	r3, #1
 8010c90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8010c94:	f107 0304 	add.w	r3, r7, #4
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 8010c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010ca2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8010ca6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010caa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8010cae:	f107 0308 	add.w	r3, r7, #8
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8010cb8:	f04f 0300 	mov.w	r3, #0
 8010cbc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8010cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7ff fadb 	bl	8010280 <CRYP_KeyStructInit>

  switch(Keysize)
 8010cca:	f107 030c 	add.w	r3, r7, #12
 8010cce:	881b      	ldrh	r3, [r3, #0]
 8010cd0:	2bc0      	cmp	r3, #192	; 0xc0
 8010cd2:	d051      	beq.n	8010d78 <CRYP_AES_CBC+0x124>
 8010cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cd8:	f000 80bf 	beq.w	8010e5a <CRYP_AES_CBC+0x206>
 8010cdc:	2b80      	cmp	r3, #128	; 0x80
 8010cde:	f040 8149 	bne.w	8010f74 <CRYP_AES_CBC+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8010ce2:	f04f 0300 	mov.w	r3, #0
 8010ce6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8010cea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010cf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010cf8:	ba1c      	rev	r4, r3
 8010cfa:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 8010cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d02:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8010d04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d08:	f103 0304 	add.w	r3, r3, #4
 8010d0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8010d10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010d1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010d1e:	ba1c      	rev	r4, r3
 8010d20:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 8010d24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010d28:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8010d2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d2e:	f103 0304 	add.w	r3, r3, #4
 8010d32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8010d36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010d40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010d44:	ba1c      	rev	r4, r3
 8010d46:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 8010d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8010d50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d54:	f103 0304 	add.w	r3, r3, #4
 8010d58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8010d5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d6a:	ba1c      	rev	r4, r3
 8010d6c:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 8010d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d74:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8010d76:	e0fe      	b.n	8010f76 <CRYP_AES_CBC+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8010d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8010d80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d8e:	ba1c      	rev	r4, r3
 8010d90:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8010d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8010d9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d9e:	f103 0304 	add.w	r3, r3, #4
 8010da2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8010da6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010db0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010db4:	ba1c      	rev	r4, r3
 8010db6:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 8010dba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010dbe:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8010dc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010dc4:	f103 0304 	add.w	r3, r3, #4
 8010dc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8010dcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dda:	ba1c      	rev	r4, r3
 8010ddc:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8010de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010de4:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8010de6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010dea:	f103 0304 	add.w	r3, r3, #4
 8010dee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8010df2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010e00:	ba1c      	rev	r4, r3
 8010e02:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 8010e06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010e0a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8010e0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e10:	f103 0304 	add.w	r3, r3, #4
 8010e14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8010e18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010e26:	ba1c      	rev	r4, r3
 8010e28:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 8010e2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8010e32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e36:	f103 0304 	add.w	r3, r3, #4
 8010e3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8010e3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010e4c:	ba1c      	rev	r4, r3
 8010e4e:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 8010e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010e56:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8010e58:	e08d      	b.n	8010f76 <CRYP_AES_CBC+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8010e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8010e62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010e70:	ba1c      	rev	r4, r3
 8010e72:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 8010e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010e7a:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8010e7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e80:	f103 0304 	add.w	r3, r3, #4
 8010e84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8010e88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010e96:	ba1c      	rev	r4, r3
 8010e98:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8010e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8010ea2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010ea6:	f103 0304 	add.w	r3, r3, #4
 8010eaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8010eae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ebc:	ba1c      	rev	r4, r3
 8010ebe:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8010ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8010ec8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010ecc:	f103 0304 	add.w	r3, r3, #4
 8010ed0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8010ed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ee2:	ba1c      	rev	r4, r3
 8010ee4:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 8010ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010eec:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8010eee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010ef2:	f103 0304 	add.w	r3, r3, #4
 8010ef6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8010efa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f08:	ba1c      	rev	r4, r3
 8010f0a:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 8010f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f12:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8010f14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010f18:	f103 0304 	add.w	r3, r3, #4
 8010f1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8010f20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010f2e:	ba1c      	rev	r4, r3
 8010f30:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8010f32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f34:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8010f36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010f3a:	f103 0304 	add.w	r3, r3, #4
 8010f3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8010f42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f4c:	ba1c      	rev	r4, r3
 8010f4e:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8010f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f52:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8010f54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010f58:	f103 0304 	add.w	r3, r3, #4
 8010f5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8010f60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f6a:	ba1c      	rev	r4, r3
 8010f6c:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8010f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f70:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8010f72:	e000      	b.n	8010f76 <CRYP_AES_CBC+0x322>
    default:
    break;
 8010f74:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8010f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010f7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f80:	ba1c      	rev	r4, r3
 8010f82:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8010f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f86:	461a      	mov	r2, r3
 8010f88:	f107 0314 	add.w	r3, r7, #20
 8010f8c:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8010f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f92:	f103 0304 	add.w	r3, r3, #4
 8010f96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8010f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010fa4:	ba1c      	rev	r4, r3
 8010fa6:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8010fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010faa:	461a      	mov	r2, r3
 8010fac:	f107 0314 	add.w	r3, r7, #20
 8010fb0:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8010fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010fb6:	f103 0304 	add.w	r3, r3, #4
 8010fba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8010fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fc8:	ba1c      	rev	r4, r3
 8010fca:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8010fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fce:	461a      	mov	r2, r3
 8010fd0:	f107 0314 	add.w	r3, r7, #20
 8010fd4:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8010fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010fda:	f103 0304 	add.w	r3, r3, #4
 8010fde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8010fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8010fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fec:	ba1c      	rev	r4, r3
 8010fee:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8010ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	f107 0314 	add.w	r3, r7, #20
 8010ff8:	60da      	str	r2, [r3, #12]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8010ffa:	f107 0310 	add.w	r3, r7, #16
 8010ffe:	f103 33ff 	add.w	r3, r3, #4294967295
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d142      	bne.n	801108e <CRYP_AES_CBC+0x43a>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8011008:	f7ff f9a4 	bl	8010354 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 801100c:	f04f 0304 	mov.w	r3, #4
 8011010:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8011014:	f04f 0338 	mov.w	r3, #56	; 0x38
 8011018:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 801101c:	f04f 0300 	mov.w	r3, #0
 8011020:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    CRYP_Init(&AES_CRYP_InitStructure);
 8011024:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011028:	4618      	mov	r0, r3
 801102a:	f7ff f84b 	bl	80100c4 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 801102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011032:	4618      	mov	r0, r3
 8011034:	f7ff f8e2 	bl	80101fc <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8011038:	f04f 0001 	mov.w	r0, #1
 801103c:	f7ff f99c 	bl	8010378 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8011040:	f04f 0010 	mov.w	r0, #16
 8011044:	f7ff fb7e 	bl	8010744 <CRYP_GetFlagStatus>
 8011048:	4603      	mov	r3, r0
 801104a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 801104e:	f107 0310 	add.w	r3, r7, #16
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f103 0201 	add.w	r2, r3, #1
 8011058:	f107 0310 	add.w	r3, r7, #16
 801105c:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 801105e:	f107 0310 	add.w	r3, r7, #16
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011068:	d003      	beq.n	8011072 <CRYP_AES_CBC+0x41e>
 801106a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801106e:	2b00      	cmp	r3, #0
 8011070:	d1e6      	bne.n	8011040 <CRYP_AES_CBC+0x3ec>

    if (busystatus != RESET)
 8011072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011076:	2b00      	cmp	r3, #0
 8011078:	d004      	beq.n	8011084 <CRYP_AES_CBC+0x430>
   {
       status = ERROR;
 801107a:	f04f 0300 	mov.w	r3, #0
 801107e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8011082:	e00d      	b.n	80110a0 <CRYP_AES_CBC+0x44c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8011084:	f04f 0304 	mov.w	r3, #4
 8011088:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801108c:	e008      	b.n	80110a0 <CRYP_AES_CBC+0x44c>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 801108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011092:	4618      	mov	r0, r3
 8011094:	f7ff f8b2 	bl	80101fc <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8011098:	f04f 0300 	mov.w	r3, #0
 801109c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 80110a0:	f04f 0328 	mov.w	r3, #40	; 0x28
 80110a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80110a8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80110ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 80110b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7ff f805 	bl	80100c4 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80110ba:	f107 0314 	add.w	r3, r7, #20
 80110be:	4618      	mov	r0, r3
 80110c0:	f7ff f908 	bl	80102d4 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80110c4:	f7ff f946 	bl	8010354 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80110c8:	f04f 0001 	mov.w	r0, #1
 80110cc:	f7ff f954 	bl	8010378 <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80110d0:	f04f 0300 	mov.w	r3, #0
 80110d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80110d8:	e08c      	b.n	80111f4 <CRYP_AES_CBC+0x5a0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80110da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7ff f96f 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 80110e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80110ea:	f103 0304 	add.w	r3, r3, #4
 80110ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80110f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7ff f963 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 80110fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011102:	f103 0304 	add.w	r3, r3, #4
 8011106:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 801110a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	4618      	mov	r0, r3
 8011112:	f7ff f957 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8011116:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801111a:	f103 0304 	add.w	r3, r3, #4
 801111e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8011122:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4618      	mov	r0, r3
 801112a:	f7ff f94b 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 801112e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011132:	f103 0304 	add.w	r3, r3, #4
 8011136:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 801113a:	f107 0310 	add.w	r3, r7, #16
 801113e:	f04f 0200 	mov.w	r2, #0
 8011142:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8011144:	f04f 0010 	mov.w	r0, #16
 8011148:	f7ff fafc 	bl	8010744 <CRYP_GetFlagStatus>
 801114c:	4603      	mov	r3, r0
 801114e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8011152:	f107 0310 	add.w	r3, r7, #16
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	f103 0201 	add.w	r2, r3, #1
 801115c:	f107 0310 	add.w	r3, r7, #16
 8011160:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8011162:	f107 0310 	add.w	r3, r7, #16
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801116c:	d003      	beq.n	8011176 <CRYP_AES_CBC+0x522>
 801116e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1e6      	bne.n	8011144 <CRYP_AES_CBC+0x4f0>

    if (busystatus != RESET)
 8011176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801117a:	2b00      	cmp	r3, #0
 801117c:	d004      	beq.n	8011188 <CRYP_AES_CBC+0x534>
   {
       status = ERROR;
 801117e:	f04f 0300 	mov.w	r3, #0
 8011182:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8011186:	e02f      	b.n	80111e8 <CRYP_AES_CBC+0x594>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8011188:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 801118c:	f7ff f92a 	bl	80103e4 <CRYP_DataOut>
 8011190:	4603      	mov	r3, r0
 8011192:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011198:	f103 0304 	add.w	r3, r3, #4
 801119c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80111a0:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80111a4:	f7ff f91e 	bl	80103e4 <CRYP_DataOut>
 80111a8:	4603      	mov	r3, r0
 80111aa:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80111ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80111b0:	f103 0304 	add.w	r3, r3, #4
 80111b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80111b8:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80111bc:	f7ff f912 	bl	80103e4 <CRYP_DataOut>
 80111c0:	4603      	mov	r3, r0
 80111c2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80111c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80111c8:	f103 0304 	add.w	r3, r3, #4
 80111cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80111d0:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80111d4:	f7ff f906 	bl	80103e4 <CRYP_DataOut>
 80111d8:	4603      	mov	r3, r0
 80111da:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80111dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80111e0:	f103 0304 	add.w	r3, r3, #4
 80111e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80111e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80111ec:	f103 0310 	add.w	r3, r3, #16
 80111f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80111f4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80111f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d204      	bcs.n	801120a <CRYP_AES_CBC+0x5b6>
 8011200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011204:	2b00      	cmp	r3, #0
 8011206:	f47f af68 	bne.w	80110da <CRYP_AES_CBC+0x486>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 801120a:	f04f 0000 	mov.w	r0, #0
 801120e:	f7ff f8b3 	bl	8010378 <CRYP_Cmd>

  return status;
 8011212:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8011216:	4618      	mov	r0, r3
 8011218:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 801121c:	46bd      	mov	sp, r7
 801121e:	bd90      	pop	{r4, r7, pc}

08011220 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8011220:	b590      	push	{r4, r7, lr}
 8011222:	b0c7      	sub	sp, #284	; 0x11c
 8011224:	af00      	add	r7, sp, #0
 8011226:	f107 0408 	add.w	r4, r7, #8
 801122a:	6021      	str	r1, [r4, #0]
 801122c:	f107 0104 	add.w	r1, r7, #4
 8011230:	600a      	str	r2, [r1, #0]
 8011232:	461a      	mov	r2, r3
 8011234:	f107 0310 	add.w	r3, r7, #16
 8011238:	f103 33ff 	add.w	r3, r3, #4294967295
 801123c:	4601      	mov	r1, r0
 801123e:	7019      	strb	r1, [r3, #0]
 8011240:	f107 030c 	add.w	r3, r7, #12
 8011244:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8011246:	f107 0310 	add.w	r3, r7, #16
 801124a:	f04f 0200 	mov.w	r2, #0
 801124e:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8011250:	f04f 0300 	mov.w	r3, #0
 8011254:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 8011258:	f04f 0301 	mov.w	r3, #1
 801125c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8011260:	f107 0304 	add.w	r3, r7, #4
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 801126a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801126e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8011272:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011276:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 801127a:	f107 0308 	add.w	r3, r7, #8
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8011284:	f04f 0300 	mov.w	r3, #0
 8011288:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 801128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011290:	4618      	mov	r0, r3
 8011292:	f7fe fff5 	bl	8010280 <CRYP_KeyStructInit>

  switch(Keysize)
 8011296:	f107 030c 	add.w	r3, r7, #12
 801129a:	881b      	ldrh	r3, [r3, #0]
 801129c:	2bc0      	cmp	r3, #192	; 0xc0
 801129e:	d051      	beq.n	8011344 <CRYP_AES_CTR+0x124>
 80112a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112a4:	f000 80bf 	beq.w	8011426 <CRYP_AES_CTR+0x206>
 80112a8:	2b80      	cmp	r3, #128	; 0x80
 80112aa:	f040 8149 	bne.w	8011540 <CRYP_AES_CTR+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80112ae:	f04f 0300 	mov.w	r3, #0
 80112b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80112b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80112c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80112c4:	ba1c      	rev	r4, r3
 80112c6:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 80112ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80112ce:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80112d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80112d4:	f103 0304 	add.w	r3, r3, #4
 80112d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80112dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80112e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80112ea:	ba1c      	rev	r4, r3
 80112ec:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 80112f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80112f4:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80112f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80112fa:	f103 0304 	add.w	r3, r3, #4
 80112fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8011302:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801130c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011310:	ba1c      	rev	r4, r3
 8011312:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 8011316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801131a:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 801131c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011320:	f103 0304 	add.w	r3, r3, #4
 8011324:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8011328:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011336:	ba1c      	rev	r4, r3
 8011338:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 801133c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011340:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8011342:	e0fe      	b.n	8011542 <CRYP_AES_CTR+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8011344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011348:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 801134c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801135a:	ba1c      	rev	r4, r3
 801135c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8011360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011364:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8011366:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801136a:	f103 0304 	add.w	r3, r3, #4
 801136e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8011372:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801137c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011380:	ba1c      	rev	r4, r3
 8011382:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 8011386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801138a:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 801138c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011390:	f103 0304 	add.w	r3, r3, #4
 8011394:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8011398:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80113a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80113a6:	ba1c      	rev	r4, r3
 80113a8:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 80113ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80113b0:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80113b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80113b6:	f103 0304 	add.w	r3, r3, #4
 80113ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80113be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80113c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80113cc:	ba1c      	rev	r4, r3
 80113ce:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 80113d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80113d6:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80113d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80113dc:	f103 0304 	add.w	r3, r3, #4
 80113e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80113e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80113ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80113f2:	ba1c      	rev	r4, r3
 80113f4:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 80113f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80113fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80113fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011402:	f103 0304 	add.w	r3, r3, #4
 8011406:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 801140a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011418:	ba1c      	rev	r4, r3
 801141a:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 801141e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011422:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8011424:	e08d      	b.n	8011542 <CRYP_AES_CTR+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8011426:	f44f 7300 	mov.w	r3, #512	; 0x200
 801142a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 801142e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801143c:	ba1c      	rev	r4, r3
 801143e:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 8011442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011446:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8011448:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801144c:	f103 0304 	add.w	r3, r3, #4
 8011450:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8011454:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801145e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011462:	ba1c      	rev	r4, r3
 8011464:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8011468:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801146c:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 801146e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011472:	f103 0304 	add.w	r3, r3, #4
 8011476:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 801147a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011484:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011488:	ba1c      	rev	r4, r3
 801148a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 801148e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011492:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8011494:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011498:	f103 0304 	add.w	r3, r3, #4
 801149c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80114a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80114aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80114ae:	ba1c      	rev	r4, r3
 80114b0:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 80114b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80114b8:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80114ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114be:	f103 0304 	add.w	r3, r3, #4
 80114c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80114c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80114d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80114d4:	ba1c      	rev	r4, r3
 80114d6:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 80114da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80114de:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80114e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114e4:	f103 0304 	add.w	r3, r3, #4
 80114e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80114ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80114f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80114fa:	ba1c      	rev	r4, r3
 80114fc:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 80114fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011500:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8011502:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011506:	f103 0304 	add.w	r3, r3, #4
 801150a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 801150e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011518:	ba1c      	rev	r4, r3
 801151a:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 801151c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801151e:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8011520:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011524:	f103 0304 	add.w	r3, r3, #4
 8011528:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 801152c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011536:	ba1c      	rev	r4, r3
 8011538:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 801153a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801153c:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 801153e:	e000      	b.n	8011542 <CRYP_AES_CTR+0x322>
    default:
    break;
 8011540:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8011542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801154a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801154c:	ba1c      	rev	r4, r3
 801154e:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8011550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011552:	461a      	mov	r2, r3
 8011554:	f107 0314 	add.w	r3, r7, #20
 8011558:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 801155a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801155e:	f103 0304 	add.w	r3, r3, #4
 8011562:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8011566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801156e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011570:	ba1c      	rev	r4, r3
 8011572:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8011574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011576:	461a      	mov	r2, r3
 8011578:	f107 0314 	add.w	r3, r7, #20
 801157c:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 801157e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011582:	f103 0304 	add.w	r3, r3, #4
 8011586:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 801158a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011594:	ba1c      	rev	r4, r3
 8011596:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8011598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801159a:	461a      	mov	r2, r3
 801159c:	f107 0314 	add.w	r3, r7, #20
 80115a0:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 80115a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80115a6:	f103 0304 	add.w	r3, r3, #4
 80115aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 80115ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80115b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b8:	ba1c      	rev	r4, r3
 80115ba:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 80115bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115be:	461a      	mov	r2, r3
 80115c0:	f107 0314 	add.w	r3, r7, #20
 80115c4:	60da      	str	r2, [r3, #12]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80115c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7fe fe16 	bl	80101fc <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80115d0:	f107 0310 	add.w	r3, r7, #16
 80115d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d104      	bne.n	80115e8 <CRYP_AES_CTR+0x3c8>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80115de:	f04f 0304 	mov.w	r3, #4
 80115e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80115e6:	e003      	b.n	80115f0 <CRYP_AES_CTR+0x3d0>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80115e8:	f04f 0300 	mov.w	r3, #0
 80115ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 80115f0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80115f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80115f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80115fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8011600:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011604:	4618      	mov	r0, r3
 8011606:	f7fe fd5d 	bl	80100c4 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 801160a:	f107 0314 	add.w	r3, r7, #20
 801160e:	4618      	mov	r0, r3
 8011610:	f7fe fe60 	bl	80102d4 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8011614:	f7fe fe9e 	bl	8010354 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8011618:	f04f 0001 	mov.w	r0, #1
 801161c:	f7fe feac 	bl	8010378 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8011620:	f04f 0300 	mov.w	r3, #0
 8011624:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8011628:	e08c      	b.n	8011744 <CRYP_AES_CTR+0x524>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 801162a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	4618      	mov	r0, r3
 8011632:	f7fe fec7 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8011636:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801163a:	f103 0304 	add.w	r3, r3, #4
 801163e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8011642:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	4618      	mov	r0, r3
 801164a:	f7fe febb 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 801164e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011652:	f103 0304 	add.w	r3, r3, #4
 8011656:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 801165a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4618      	mov	r0, r3
 8011662:	f7fe feaf 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8011666:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801166a:	f103 0304 	add.w	r3, r3, #4
 801166e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8011672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4618      	mov	r0, r3
 801167a:	f7fe fea3 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 801167e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011682:	f103 0304 	add.w	r3, r3, #4
 8011686:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 801168a:	f107 0310 	add.w	r3, r7, #16
 801168e:	f04f 0200 	mov.w	r2, #0
 8011692:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8011694:	f04f 0010 	mov.w	r0, #16
 8011698:	f7ff f854 	bl	8010744 <CRYP_GetFlagStatus>
 801169c:	4603      	mov	r3, r0
 801169e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 80116a2:	f107 0310 	add.w	r3, r7, #16
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f103 0201 	add.w	r2, r3, #1
 80116ac:	f107 0310 	add.w	r3, r7, #16
 80116b0:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80116b2:	f107 0310 	add.w	r3, r7, #16
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116bc:	d003      	beq.n	80116c6 <CRYP_AES_CTR+0x4a6>
 80116be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1e6      	bne.n	8011694 <CRYP_AES_CTR+0x474>

    if (busystatus != RESET)
 80116c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d004      	beq.n	80116d8 <CRYP_AES_CTR+0x4b8>
   {
       status = ERROR;
 80116ce:	f04f 0300 	mov.w	r3, #0
 80116d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80116d6:	e02f      	b.n	8011738 <CRYP_AES_CTR+0x518>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80116d8:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80116dc:	f7fe fe82 	bl	80103e4 <CRYP_DataOut>
 80116e0:	4603      	mov	r3, r0
 80116e2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80116e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80116e8:	f103 0304 	add.w	r3, r3, #4
 80116ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80116f0:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80116f4:	f7fe fe76 	bl	80103e4 <CRYP_DataOut>
 80116f8:	4603      	mov	r3, r0
 80116fa:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80116fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011700:	f103 0304 	add.w	r3, r3, #4
 8011704:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8011708:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 801170c:	f7fe fe6a 	bl	80103e4 <CRYP_DataOut>
 8011710:	4603      	mov	r3, r0
 8011712:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011718:	f103 0304 	add.w	r3, r3, #4
 801171c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8011720:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8011724:	f7fe fe5e 	bl	80103e4 <CRYP_DataOut>
 8011728:	4603      	mov	r3, r0
 801172a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 801172c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011730:	f103 0304 	add.w	r3, r3, #4
 8011734:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8011738:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801173c:	f103 0310 	add.w	r3, r3, #16
 8011740:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8011744:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8011748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801174c:	429a      	cmp	r2, r3
 801174e:	d204      	bcs.n	801175a <CRYP_AES_CTR+0x53a>
 8011750:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011754:	2b00      	cmp	r3, #0
 8011756:	f47f af68 	bne.w	801162a <CRYP_AES_CTR+0x40a>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 801175a:	f04f 0000 	mov.w	r0, #0
 801175e:	f7fe fe0b 	bl	8010378 <CRYP_Cmd>

  return status;
 8011762:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8011766:	4618      	mov	r0, r3
 8011768:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 801176c:	46bd      	mov	sp, r7
 801176e:	bd90      	pop	{r4, r7, pc}

08011770 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8011770:	b590      	push	{r4, r7, lr}
 8011772:	b09b      	sub	sp, #108	; 0x6c
 8011774:	af00      	add	r7, sp, #0
 8011776:	60b9      	str	r1, [r7, #8]
 8011778:	607a      	str	r2, [r7, #4]
 801177a:	603b      	str	r3, [r7, #0]
 801177c:	4603      	mov	r3, r0
 801177e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8011780:	f04f 0300 	mov.w	r3, #0
 8011784:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8011786:	f04f 0300 	mov.w	r3, #0
 801178a:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 801178c:	f04f 0301 	mov.w	r3, #1
 8011790:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 801179c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801179e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 80117a0:	f04f 0300 	mov.w	r3, #0
 80117a4:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80117a6:	f107 0318 	add.w	r3, r7, #24
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fe fd68 	bl	8010280 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d103      	bne.n	80117be <CRYP_DES_ECB+0x4e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80117b6:	f04f 0300 	mov.w	r3, #0
 80117ba:	873b      	strh	r3, [r7, #56]	; 0x38
 80117bc:	e002      	b.n	80117c4 <CRYP_DES_ECB+0x54>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80117be:	f04f 0304 	mov.w	r3, #4
 80117c2:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 80117c4:	f04f 0310 	mov.w	r3, #16
 80117c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80117ca:	f04f 0380 	mov.w	r3, #128	; 0x80
 80117ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&DES_CRYP_InitStructure);
 80117d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7fe fc75 	bl	80100c4 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80117da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80117e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117e2:	ba1c      	rev	r4, r3
 80117e4:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 80117e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117e8:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 80117ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ec:	f103 0304 	add.w	r3, r3, #4
 80117f0:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80117f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80117f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117fa:	ba1c      	rev	r4, r3
 80117fc:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 80117fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011800:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8011802:	f107 0318 	add.w	r3, r7, #24
 8011806:	4618      	mov	r0, r3
 8011808:	f7fe fcf8 	bl	80101fc <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 801180c:	f7fe fda2 	bl	8010354 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8011810:	f04f 0001 	mov.w	r0, #1
 8011814:	f7fe fdb0 	bl	8010378 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8011818:	f04f 0300 	mov.w	r3, #0
 801181c:	65bb      	str	r3, [r7, #88]	; 0x58
 801181e:	e043      	b.n	80118a8 <CRYP_DES_ECB+0x138>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8011820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4618      	mov	r0, r3
 8011826:	f7fe fdcd 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 801182a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801182c:	f103 0304 	add.w	r3, r3, #4
 8011830:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8011832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	4618      	mov	r0, r3
 8011838:	f7fe fdc4 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 801183c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801183e:	f103 0304 	add.w	r3, r3, #4
 8011842:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 8011844:	f04f 0300 	mov.w	r3, #0
 8011848:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 801184a:	f04f 0010 	mov.w	r0, #16
 801184e:	f7fe ff79 	bl	8010744 <CRYP_GetFlagStatus>
 8011852:	4603      	mov	r3, r0
 8011854:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	f103 0301 	add.w	r3, r3, #1
 801185c:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011864:	d002      	beq.n	801186c <CRYP_DES_ECB+0xfc>
 8011866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1ee      	bne.n	801184a <CRYP_DES_ECB+0xda>

    if (busystatus != RESET)
 801186c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801186e:	2b00      	cmp	r3, #0
 8011870:	d004      	beq.n	801187c <CRYP_DES_ECB+0x10c>
   {
       status = ERROR;
 8011872:	f04f 0300 	mov.w	r3, #0
 8011876:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801187a:	e011      	b.n	80118a0 <CRYP_DES_ECB+0x130>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 801187c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801187e:	f7fe fdb1 	bl	80103e4 <CRYP_DataOut>
 8011882:	4603      	mov	r3, r0
 8011884:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011888:	f103 0304 	add.w	r3, r3, #4
 801188c:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 801188e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8011890:	f7fe fda8 	bl	80103e4 <CRYP_DataOut>
 8011894:	4603      	mov	r3, r0
 8011896:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801189a:	f103 0304 	add.w	r3, r3, #4
 801189e:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80118a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118a2:	f103 0308 	add.w	r3, r3, #8
 80118a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80118a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d203      	bcs.n	80118b8 <CRYP_DES_ECB+0x148>
 80118b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d1b3      	bne.n	8011820 <CRYP_DES_ECB+0xb0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80118b8:	f04f 0000 	mov.w	r0, #0
 80118bc:	f7fe fd5c 	bl	8010378 <CRYP_Cmd>

  return status; 
 80118c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd90      	pop	{r4, r7, pc}
 80118ce:	bf00      	nop

080118d0 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80118d0:	b590      	push	{r4, r7, lr}
 80118d2:	b0a3      	sub	sp, #140	; 0x8c
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60b9      	str	r1, [r7, #8]
 80118d8:	607a      	str	r2, [r7, #4]
 80118da:	603b      	str	r3, [r7, #0]
 80118dc:	4603      	mov	r3, r0
 80118de:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80118e0:	f04f 0300 	mov.w	r3, #0
 80118e4:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80118e6:	f04f 0300 	mov.w	r3, #0
 80118ea:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 80118ec:	f04f 0301 	mov.w	r3, #1
 80118f0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 80118fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011902:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 8011908:	f04f 0300 	mov.w	r3, #0
 801190c:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 801190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011912:	4618      	mov	r0, r3
 8011914:	f7fe fcb4 	bl	8010280 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 8011918:	7bfb      	ldrb	r3, [r7, #15]
 801191a:	2b01      	cmp	r3, #1
 801191c:	d104      	bne.n	8011928 <CRYP_DES_CBC+0x58>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 801191e:	f04f 0300 	mov.w	r3, #0
 8011922:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011926:	e003      	b.n	8011930 <CRYP_DES_CBC+0x60>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8011928:	f04f 0304 	mov.w	r3, #4
 801192c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 8011930:	f04f 0318 	mov.w	r3, #24
 8011934:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8011938:	f04f 0380 	mov.w	r3, #128	; 0x80
 801193c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&DES_CRYP_InitStructure);
 8011940:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011944:	4618      	mov	r0, r3
 8011946:	f7fe fbbd 	bl	80100c4 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 801194a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011952:	ba1c      	rev	r4, r3
 8011954:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8011956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011958:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 801195a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801195c:	f103 0304 	add.w	r3, r3, #4
 8011960:	673b      	str	r3, [r7, #112]	; 0x70
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8011962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801196a:	ba1c      	rev	r4, r3
 801196c:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 801196e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011970:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8011972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011976:	4618      	mov	r0, r3
 8011978:	f7fe fc40 	bl	80101fc <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 801197c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011984:	ba1c      	rev	r4, r3
 8011986:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8011988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801198a:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 801198c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801198e:	f103 0304 	add.w	r3, r3, #4
 8011992:	66fb      	str	r3, [r7, #108]	; 0x6c
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8011994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801199a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801199c:	ba1c      	rev	r4, r3
 801199e:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 80119a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119a2:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 80119a4:	f107 0314 	add.w	r3, r7, #20
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7fe fc93 	bl	80102d4 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80119ae:	f7fe fcd1 	bl	8010354 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80119b2:	f04f 0001 	mov.w	r0, #1
 80119b6:	f7fe fcdf 	bl	8010378 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80119ba:	f04f 0300 	mov.w	r3, #0
 80119be:	67bb      	str	r3, [r7, #120]	; 0x78
 80119c0:	e049      	b.n	8011a56 <CRYP_DES_CBC+0x186>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80119c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fe fcfb 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 80119ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80119d2:	f103 0304 	add.w	r3, r3, #4
 80119d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80119da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7fe fcef 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 80119e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80119ea:	f103 0304 	add.w	r3, r3, #4
 80119ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 80119f2:	f04f 0300 	mov.w	r3, #0
 80119f6:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80119f8:	f04f 0010 	mov.w	r0, #16
 80119fc:	f7fe fea2 	bl	8010744 <CRYP_GetFlagStatus>
 8011a00:	4603      	mov	r3, r0
 8011a02:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	f103 0301 	add.w	r3, r3, #1
 8011a0a:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a12:	d002      	beq.n	8011a1a <CRYP_DES_CBC+0x14a>
 8011a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d1ee      	bne.n	80119f8 <CRYP_DES_CBC+0x128>

    if (busystatus != RESET)
 8011a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d004      	beq.n	8011a2a <CRYP_DES_CBC+0x15a>
   {
       status = ERROR;
 8011a20:	f04f 0300 	mov.w	r3, #0
 8011a24:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8011a28:	e011      	b.n	8011a4e <CRYP_DES_CBC+0x17e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8011a2a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8011a2c:	f7fe fcda 	bl	80103e4 <CRYP_DataOut>
 8011a30:	4603      	mov	r3, r0
 8011a32:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011a34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011a36:	f103 0304 	add.w	r3, r3, #4
 8011a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8011a3c:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8011a3e:	f7fe fcd1 	bl	80103e4 <CRYP_DataOut>
 8011a42:	4603      	mov	r3, r0
 8011a44:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011a48:	f103 0304 	add.w	r3, r3, #4
 8011a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8011a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a50:	f103 0308 	add.w	r3, r3, #8
 8011a54:	67bb      	str	r3, [r7, #120]	; 0x78
 8011a56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d203      	bcs.n	8011a68 <CRYP_DES_CBC+0x198>
 8011a60:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d1ac      	bne.n	80119c2 <CRYP_DES_CBC+0xf2>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8011a68:	f04f 0000 	mov.w	r0, #0
 8011a6c:	f7fe fc84 	bl	8010378 <CRYP_Cmd>

  return status; 
 8011a70:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd90      	pop	{r4, r7, pc}
 8011a7e:	bf00      	nop

08011a80 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8011a80:	b590      	push	{r4, r7, lr}
 8011a82:	b0a3      	sub	sp, #140	; 0x8c
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60b9      	str	r1, [r7, #8]
 8011a88:	607a      	str	r2, [r7, #4]
 8011a8a:	603b      	str	r3, [r7, #0]
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8011a90:	f04f 0300 	mov.w	r3, #0
 8011a94:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8011a96:	f04f 0300 	mov.w	r3, #0
 8011a9a:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8011a9c:	f04f 0301 	mov.w	r3, #1
 8011aa0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 8011aae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t i = 0;
 8011ab4:	f04f 0300 	mov.w	r3, #0
 8011ab8:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8011aba:	f107 0318 	add.w	r3, r7, #24
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7fe fbde 	bl	8010280 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8011ac4:	7bfb      	ldrb	r3, [r7, #15]
 8011ac6:	2b01      	cmp	r3, #1
 8011ac8:	d103      	bne.n	8011ad2 <CRYP_TDES_ECB+0x52>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8011aca:	f04f 0300 	mov.w	r3, #0
 8011ace:	873b      	strh	r3, [r7, #56]	; 0x38
 8011ad0:	e002      	b.n	8011ad8 <CRYP_TDES_ECB+0x58>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8011ad2:	f04f 0304 	mov.w	r3, #4
 8011ad6:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8011ad8:	f04f 0300 	mov.w	r3, #0
 8011adc:	877b      	strh	r3, [r7, #58]	; 0x3a
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8011ade:	f04f 0380 	mov.w	r3, #128	; 0x80
 8011ae2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&TDES_CRYP_InitStructure);
 8011ae4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7fe faeb 	bl	80100c4 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8011aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011af6:	ba1c      	rev	r4, r3
 8011af8:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 8011afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011afc:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8011afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b00:	f103 0304 	add.w	r3, r3, #4
 8011b04:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8011b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b0e:	ba1c      	rev	r4, r3
 8011b10:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 8011b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b14:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8011b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b18:	f103 0304 	add.w	r3, r3, #4
 8011b1c:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8011b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b26:	ba1c      	rev	r4, r3
 8011b28:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8011b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 8011b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b30:	f103 0304 	add.w	r3, r3, #4
 8011b34:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8011b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b3e:	ba1c      	rev	r4, r3
 8011b40:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 8011b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8011b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b48:	f103 0304 	add.w	r3, r3, #4
 8011b4c:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8011b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b56:	ba1c      	rev	r4, r3
 8011b58:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8011b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b5c:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8011b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b60:	f103 0304 	add.w	r3, r3, #4
 8011b64:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8011b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b6e:	ba1c      	rev	r4, r3
 8011b70:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8011b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b74:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8011b76:	f107 0318 	add.w	r3, r7, #24
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7fe fb3e 	bl	80101fc <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8011b80:	f7fe fbe8 	bl	8010354 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8011b84:	f04f 0001 	mov.w	r0, #1
 8011b88:	f7fe fbf6 	bl	8010378 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8011b8c:	f04f 0300 	mov.w	r3, #0
 8011b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8011b92:	e049      	b.n	8011c28 <CRYP_TDES_ECB+0x1a8>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8011b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fe fc12 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8011ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ba4:	f103 0304 	add.w	r3, r3, #4
 8011ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8011bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fe fc06 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8011bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011bbc:	f103 0304 	add.w	r3, r3, #4
 8011bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8011bc4:	f04f 0300 	mov.w	r3, #0
 8011bc8:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8011bca:	f04f 0010 	mov.w	r0, #16
 8011bce:	f7fe fdb9 	bl	8010744 <CRYP_GetFlagStatus>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	f103 0301 	add.w	r3, r3, #1
 8011bdc:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011be4:	d002      	beq.n	8011bec <CRYP_TDES_ECB+0x16c>
 8011be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d1ee      	bne.n	8011bca <CRYP_TDES_ECB+0x14a>

    if (busystatus != RESET)
 8011bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d004      	beq.n	8011bfc <CRYP_TDES_ECB+0x17c>
    {
       status = ERROR;
 8011bf2:	f04f 0300 	mov.w	r3, #0
 8011bf6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8011bfa:	e011      	b.n	8011c20 <CRYP_TDES_ECB+0x1a0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8011bfc:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8011bfe:	f7fe fbf1 	bl	80103e4 <CRYP_DataOut>
 8011c02:	4603      	mov	r3, r0
 8011c04:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011c06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011c08:	f103 0304 	add.w	r3, r3, #4
 8011c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8011c0e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8011c10:	f7fe fbe8 	bl	80103e4 <CRYP_DataOut>
 8011c14:	4603      	mov	r3, r0
 8011c16:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011c1a:	f103 0304 	add.w	r3, r3, #4
 8011c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8011c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c22:	f103 0308 	add.w	r3, r3, #8
 8011c26:	67bb      	str	r3, [r7, #120]	; 0x78
 8011c28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d203      	bcs.n	8011c38 <CRYP_TDES_ECB+0x1b8>
 8011c30:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d1ad      	bne.n	8011b94 <CRYP_TDES_ECB+0x114>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8011c38:	f04f 0000 	mov.w	r0, #0
 8011c3c:	f7fe fb9c 	bl	8010378 <CRYP_Cmd>

  return status; 
 8011c40:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd90      	pop	{r4, r7, pc}
 8011c4e:	bf00      	nop

08011c50 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8011c50:	b590      	push	{r4, r7, lr}
 8011c52:	b0ab      	sub	sp, #172	; 0xac
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	60b9      	str	r1, [r7, #8]
 8011c58:	607a      	str	r2, [r7, #4]
 8011c5a:	603b      	str	r3, [r7, #0]
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8011c60:	f04f 0300 	mov.w	r3, #0
 8011c64:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8011c66:	f04f 0300 	mov.w	r3, #0
 8011c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 8011c6e:	f04f 0301 	mov.w	r3, #1
 8011c72:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8011c82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t i = 0;
 8011c90:	f04f 0300 	mov.w	r3, #0
 8011c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8011c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7fe faef 	bl	8010280 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8011ca2:	7bfb      	ldrb	r3, [r7, #15]
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d104      	bne.n	8011cb2 <CRYP_TDES_CBC+0x62>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8011ca8:	f04f 0300 	mov.w	r3, #0
 8011cac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011cb0:	e003      	b.n	8011cba <CRYP_TDES_CBC+0x6a>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8011cb2:	f04f 0304 	mov.w	r3, #4
 8011cb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8011cba:	f04f 0308 	mov.w	r3, #8
 8011cbe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8011cc2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8011cc6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  CRYP_Init(&TDES_CRYP_InitStructure);
 8011cca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fe f9f8 	bl	80100c4 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8011cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011ce2:	ba1c      	rev	r4, r3
 8011ce4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 8011ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8011cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011cf2:	f103 0304 	add.w	r3, r3, #4
 8011cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8011cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d08:	ba1c      	rev	r4, r3
 8011d0a:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8011d0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d0e:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8011d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d14:	f103 0304 	add.w	r3, r3, #4
 8011d18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8011d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d26:	ba1c      	rev	r4, r3
 8011d28:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8011d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d2c:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8011d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d32:	f103 0304 	add.w	r3, r3, #4
 8011d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8011d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d44:	ba1c      	rev	r4, r3
 8011d46:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8011d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8011d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d50:	f103 0304 	add.w	r3, r3, #4
 8011d54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8011d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d62:	ba1c      	rev	r4, r3
 8011d64:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8011d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 8011d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d6e:	f103 0304 	add.w	r3, r3, #4
 8011d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8011d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d80:	ba1c      	rev	r4, r3
 8011d82:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8011d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d86:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8011d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fe fa35 	bl	80101fc <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8011d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d9c:	ba1c      	rev	r4, r3
 8011d9e:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8011da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011da2:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8011da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011da8:	f103 0304 	add.w	r3, r3, #4
 8011dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8011db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8011db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dba:	ba1c      	rev	r4, r3
 8011dbc:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8011dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dc0:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8011dc2:	f107 0314 	add.w	r3, r7, #20
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7fe fa84 	bl	80102d4 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8011dcc:	f7fe fac2 	bl	8010354 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8011dd0:	f04f 0001 	mov.w	r0, #1
 8011dd4:	f7fe fad0 	bl	8010378 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8011dd8:	f04f 0300 	mov.w	r3, #0
 8011ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011de0:	e054      	b.n	8011e8c <CRYP_TDES_CBC+0x23c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8011de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fe faeb 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8011dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011df2:	f103 0304 	add.w	r3, r3, #4
 8011df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8011dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7fe fadf 	bl	80103c4 <CRYP_DataIn>
    inputaddr+=4;
 8011e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011e0a:	f103 0304 	add.w	r3, r3, #4
 8011e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 8011e12:	f04f 0300 	mov.w	r3, #0
 8011e16:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8011e18:	f04f 0010 	mov.w	r0, #16
 8011e1c:	f7fe fc92 	bl	8010744 <CRYP_GetFlagStatus>
 8011e20:	4603      	mov	r3, r0
 8011e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	f103 0301 	add.w	r3, r3, #1
 8011e2c:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e34:	d003      	beq.n	8011e3e <CRYP_TDES_CBC+0x1ee>
 8011e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d1ec      	bne.n	8011e18 <CRYP_TDES_CBC+0x1c8>

    if (busystatus != RESET)
 8011e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d004      	beq.n	8011e50 <CRYP_TDES_CBC+0x200>
   {
       status = ERROR;
 8011e46:	f04f 0300 	mov.w	r3, #0
 8011e4a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8011e4e:	e017      	b.n	8011e80 <CRYP_TDES_CBC+0x230>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8011e50:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8011e54:	f7fe fac6 	bl	80103e4 <CRYP_DataOut>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011e60:	f103 0304 	add.w	r3, r3, #4
 8011e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8011e68:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8011e6c:	f7fe faba 	bl	80103e4 <CRYP_DataOut>
 8011e70:	4603      	mov	r3, r0
 8011e72:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8011e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011e78:	f103 0304 	add.w	r3, r3, #4
 8011e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8011e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e84:	f103 0308 	add.w	r3, r3, #8
 8011e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011e8c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011e90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d203      	bcs.n	8011ea0 <CRYP_TDES_CBC+0x250>
 8011e98:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d1a0      	bne.n	8011de2 <CRYP_TDES_CBC+0x192>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8011ea0:	f04f 0000 	mov.w	r0, #0
 8011ea4:	f7fe fa68 	bl	8010378 <CRYP_Cmd>

  return status; 
 8011ea8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	f107 07ac 	add.w	r7, r7, #172	; 0xac
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd90      	pop	{r4, r7, pc}
 8011eb6:	bf00      	nop

08011eb8 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8011ebc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8011ec0:	f04f 0101 	mov.w	r1, #1
 8011ec4:	f005 fa4a 	bl	801735c <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8011ec8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8011ecc:	f04f 0100 	mov.w	r1, #0
 8011ed0:	f005 fa44 	bl	801735c <RCC_APB1PeriphResetCmd>
}
 8011ed4:	bd80      	pop	{r7, pc}
 8011ed6:	bf00      	nop

08011ed8 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b085      	sub	sp, #20
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8011ee2:	f04f 0300 	mov.w	r3, #0
 8011ee6:	60fb      	str	r3, [r7, #12]
 8011ee8:	f04f 0300 	mov.w	r3, #0
 8011eec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8011eee:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8011ef2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8011f00:	fa02 f303 	lsl.w	r3, r2, r3
 8011f04:	ea6f 0303 	mvn.w	r3, r3
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	681a      	ldr	r2, [r3, #0]
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8011f1c:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8011f22:	4313      	orrs	r3, r2
 8011f24:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	68ba      	ldr	r2, [r7, #8]
 8011f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f2e:	68fa      	ldr	r2, [r7, #12]
 8011f30:	4313      	orrs	r3, r2
 8011f32:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8011f34:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8011f38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011f3c:	68fa      	ldr	r2, [r7, #12]
 8011f3e:	601a      	str	r2, [r3, #0]
}
 8011f40:	f107 0714 	add.w	r7, r7, #20
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bc80      	pop	{r7}
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop

08011f4c <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b083      	sub	sp, #12
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f04f 0200 	mov.w	r2, #0
 8011f5a:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f04f 0200 	mov.w	r2, #0
 8011f62:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f04f 0200 	mov.w	r2, #0
 8011f6a:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f04f 0200 	mov.w	r2, #0
 8011f72:	60da      	str	r2, [r3, #12]
}
 8011f74:	f107 070c 	add.w	r7, r7, #12
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bc80      	pop	{r7}
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop

08011f80 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	460b      	mov	r3, r1
 8011f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011f8c:	78fb      	ldrb	r3, [r7, #3]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d011      	beq.n	8011fb6 <DAC_Cmd+0x36>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8011f92:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8011f96:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011f9a:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8011f9e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8011fa2:	6812      	ldr	r2, [r2, #0]
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	f04f 0001 	mov.w	r0, #1
 8011fac:	fa00 f202 	lsl.w	r2, r0, r2
 8011fb0:	430a      	orrs	r2, r1
 8011fb2:	601a      	str	r2, [r3, #0]
 8011fb4:	e012      	b.n	8011fdc <DAC_Cmd+0x5c>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8011fb6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8011fba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011fbe:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8011fc2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8011fc6:	6812      	ldr	r2, [r2, #0]
 8011fc8:	4611      	mov	r1, r2
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	f04f 0001 	mov.w	r0, #1
 8011fd0:	fa00 f202 	lsl.w	r2, r0, r2
 8011fd4:	ea6f 0202 	mvn.w	r2, r2
 8011fd8:	400a      	ands	r2, r1
 8011fda:	601a      	str	r2, [r3, #0]
  }
}
 8011fdc:	f107 070c 	add.w	r7, r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bc80      	pop	{r7}
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop

08011fe8 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	460b      	mov	r3, r1
 8011ff2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011ff4:	78fb      	ldrb	r3, [r7, #3]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d013      	beq.n	8012022 <DAC_SoftwareTriggerCmd+0x3a>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8011ffa:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8011ffe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8012002:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8012006:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801200a:	6852      	ldr	r2, [r2, #4]
 801200c:	4611      	mov	r1, r2
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8012014:	f04f 0001 	mov.w	r0, #1
 8012018:	fa00 f202 	lsl.w	r2, r0, r2
 801201c:	430a      	orrs	r2, r1
 801201e:	605a      	str	r2, [r3, #4]
 8012020:	e014      	b.n	801204c <DAC_SoftwareTriggerCmd+0x64>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8012022:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8012026:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801202a:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 801202e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8012032:	6852      	ldr	r2, [r2, #4]
 8012034:	4611      	mov	r1, r2
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	ea4f 1212 	mov.w	r2, r2, lsr #4
 801203c:	f04f 0001 	mov.w	r0, #1
 8012040:	fa00 f202 	lsl.w	r2, r0, r2
 8012044:	ea6f 0202 	mvn.w	r2, r2
 8012048:	400a      	ands	r2, r1
 801204a:	605a      	str	r2, [r3, #4]
  }
}
 801204c:	f107 070c 	add.w	r7, r7, #12
 8012050:	46bd      	mov	sp, r7
 8012052:	bc80      	pop	{r7}
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop

08012058 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	4603      	mov	r3, r0
 8012060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012062:	79fb      	ldrb	r3, [r7, #7]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00c      	beq.n	8012082 <DAC_DualSoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8012068:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 801206c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8012070:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8012074:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8012078:	6852      	ldr	r2, [r2, #4]
 801207a:	f042 0203 	orr.w	r2, r2, #3
 801207e:	605a      	str	r2, [r3, #4]
 8012080:	e00b      	b.n	801209a <DAC_DualSoftwareTriggerCmd+0x42>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8012082:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8012086:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801208a:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 801208e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8012092:	6852      	ldr	r2, [r2, #4]
 8012094:	f022 0203 	bic.w	r2, r2, #3
 8012098:	605a      	str	r2, [r3, #4]
  }
}
 801209a:	f107 070c 	add.w	r7, r7, #12
 801209e:	46bd      	mov	sp, r7
 80120a0:	bc80      	pop	{r7}
 80120a2:	4770      	bx	lr

080120a4 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	4613      	mov	r3, r2
 80120b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80120b2:	79fb      	ldrb	r3, [r7, #7]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d010      	beq.n	80120da <DAC_WaveGenerationCmd+0x36>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 80120b8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80120bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80120c0:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80120c4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80120c8:	6812      	ldr	r2, [r2, #0]
 80120ca:	4611      	mov	r1, r2
 80120cc:	68fa      	ldr	r2, [r7, #12]
 80120ce:	68b8      	ldr	r0, [r7, #8]
 80120d0:	fa00 f202 	lsl.w	r2, r0, r2
 80120d4:	430a      	orrs	r2, r1
 80120d6:	601a      	str	r2, [r3, #0]
 80120d8:	e011      	b.n	80120fe <DAC_WaveGenerationCmd+0x5a>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 80120da:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80120de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80120e2:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80120e6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80120ea:	6812      	ldr	r2, [r2, #0]
 80120ec:	4611      	mov	r1, r2
 80120ee:	68fa      	ldr	r2, [r7, #12]
 80120f0:	68b8      	ldr	r0, [r7, #8]
 80120f2:	fa00 f202 	lsl.w	r2, r0, r2
 80120f6:	ea6f 0202 	mvn.w	r2, r2
 80120fa:	400a      	ands	r2, r1
 80120fc:	601a      	str	r2, [r3, #0]
  }
}
 80120fe:	f107 0714 	add.w	r7, r7, #20
 8012102:	46bd      	mov	sp, r7
 8012104:	bc80      	pop	{r7}
 8012106:	4770      	bx	lr

08012108 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8012108:	b480      	push	{r7}
 801210a:	b085      	sub	sp, #20
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	460b      	mov	r3, r1
 8012112:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8012114:	f04f 0300 	mov.w	r3, #0
 8012118:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 801211a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 801211e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8012122:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	18d3      	adds	r3, r2, r3
 801212a:	f103 0308 	add.w	r3, r3, #8
 801212e:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	887a      	ldrh	r2, [r7, #2]
 8012134:	601a      	str	r2, [r3, #0]
}
 8012136:	f107 0714 	add.w	r7, r7, #20
 801213a:	46bd      	mov	sp, r7
 801213c:	bc80      	pop	{r7}
 801213e:	4770      	bx	lr

08012140 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8012140:	b480      	push	{r7}
 8012142:	b085      	sub	sp, #20
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	460b      	mov	r3, r1
 801214a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 801214c:	f04f 0300 	mov.w	r3, #0
 8012150:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8012152:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8012156:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801215a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 801215c:	68fa      	ldr	r2, [r7, #12]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	18d3      	adds	r3, r2, r3
 8012162:	f103 0314 	add.w	r3, r3, #20
 8012166:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	887a      	ldrh	r2, [r7, #2]
 801216c:	601a      	str	r2, [r3, #0]
}
 801216e:	f107 0714 	add.w	r7, r7, #20
 8012172:	46bd      	mov	sp, r7
 8012174:	bc80      	pop	{r7}
 8012176:	4770      	bx	lr

08012178 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	4613      	mov	r3, r2
 8012182:	460a      	mov	r2, r1
 8012184:	807a      	strh	r2, [r7, #2]
 8012186:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8012188:	f04f 0300 	mov.w	r3, #0
 801218c:	60fb      	str	r3, [r7, #12]
 801218e:	f04f 0300 	mov.w	r3, #0
 8012192:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2b08      	cmp	r3, #8
 8012198:	d106      	bne.n	80121a8 <DAC_SetDualChannelData+0x30>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 801219a:	887b      	ldrh	r3, [r7, #2]
 801219c:	ea4f 2203 	mov.w	r2, r3, lsl #8
 80121a0:	883b      	ldrh	r3, [r7, #0]
 80121a2:	4313      	orrs	r3, r2
 80121a4:	60fb      	str	r3, [r7, #12]
 80121a6:	e005      	b.n	80121b4 <DAC_SetDualChannelData+0x3c>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 80121a8:	887b      	ldrh	r3, [r7, #2]
 80121aa:	ea4f 4203 	mov.w	r2, r3, lsl #16
 80121ae:	883b      	ldrh	r3, [r7, #0]
 80121b0:	4313      	orrs	r3, r2
 80121b2:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 80121b4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80121b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80121bc:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	18d3      	adds	r3, r2, r3
 80121c4:	f103 0320 	add.w	r3, r3, #32
 80121c8:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	68fa      	ldr	r2, [r7, #12]
 80121ce:	601a      	str	r2, [r3, #0]
}
 80121d0:	f107 0714 	add.w	r7, r7, #20
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bc80      	pop	{r7}
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop

080121dc <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 80121dc:	b480      	push	{r7}
 80121de:	b085      	sub	sp, #20
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 80121e4:	f04f 0300 	mov.w	r3, #0
 80121e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 80121ea:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80121ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80121f2:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	ea4f 0293 	mov.w	r2, r3, lsr #2
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	18d3      	adds	r3, r2, r3
 80121fe:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8012202:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	b29b      	uxth	r3, r3
}
 801220a:	4618      	mov	r0, r3
 801220c:	f107 0714 	add.w	r7, r7, #20
 8012210:	46bd      	mov	sp, r7
 8012212:	bc80      	pop	{r7}
 8012214:	4770      	bx	lr
 8012216:	bf00      	nop

08012218 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8012218:	b480      	push	{r7}
 801221a:	b083      	sub	sp, #12
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	460b      	mov	r3, r1
 8012222:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012224:	78fb      	ldrb	r3, [r7, #3]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d011      	beq.n	801224e <DAC_DMACmd+0x36>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 801222a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 801222e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8012232:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8012236:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801223a:	6812      	ldr	r2, [r2, #0]
 801223c:	4611      	mov	r1, r2
 801223e:	687a      	ldr	r2, [r7, #4]
 8012240:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012244:	fa00 f202 	lsl.w	r2, r0, r2
 8012248:	430a      	orrs	r2, r1
 801224a:	601a      	str	r2, [r3, #0]
 801224c:	e012      	b.n	8012274 <DAC_DMACmd+0x5c>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 801224e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8012252:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8012256:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 801225a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801225e:	6812      	ldr	r2, [r2, #0]
 8012260:	4611      	mov	r1, r2
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012268:	fa00 f202 	lsl.w	r2, r0, r2
 801226c:	ea6f 0202 	mvn.w	r2, r2
 8012270:	400a      	ands	r2, r1
 8012272:	601a      	str	r2, [r3, #0]
  }
}
 8012274:	f107 070c 	add.w	r7, r7, #12
 8012278:	46bd      	mov	sp, r7
 801227a:	bc80      	pop	{r7}
 801227c:	4770      	bx	lr
 801227e:	bf00      	nop

08012280 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8012280:	b480      	push	{r7}
 8012282:	b085      	sub	sp, #20
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	4613      	mov	r3, r2
 801228c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 801228e:	79fb      	ldrb	r3, [r7, #7]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d010      	beq.n	80122b6 <DAC_ITConfig+0x36>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8012294:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8012298:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801229c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80122a0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80122a4:	6812      	ldr	r2, [r2, #0]
 80122a6:	4611      	mov	r1, r2
 80122a8:	68fa      	ldr	r2, [r7, #12]
 80122aa:	68b8      	ldr	r0, [r7, #8]
 80122ac:	fa00 f202 	lsl.w	r2, r0, r2
 80122b0:	430a      	orrs	r2, r1
 80122b2:	601a      	str	r2, [r3, #0]
 80122b4:	e011      	b.n	80122da <DAC_ITConfig+0x5a>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 80122b6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80122ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80122be:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80122c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80122c6:	6812      	ldr	r2, [r2, #0]
 80122c8:	4611      	mov	r1, r2
 80122ca:	68fa      	ldr	r2, [r7, #12]
 80122cc:	68b8      	ldr	r0, [r7, #8]
 80122ce:	fa00 f202 	lsl.w	r2, r0, r2
 80122d2:	ea6f 0202 	mvn.w	r2, r2
 80122d6:	400a      	ands	r2, r1
 80122d8:	601a      	str	r2, [r3, #0]
  }
}
 80122da:	f107 0714 	add.w	r7, r7, #20
 80122de:	46bd      	mov	sp, r7
 80122e0:	bc80      	pop	{r7}
 80122e2:	4770      	bx	lr

080122e4 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b085      	sub	sp, #20
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80122ee:	f04f 0300 	mov.w	r3, #0
 80122f2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 80122f4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80122f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80122fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122fe:	461a      	mov	r2, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6839      	ldr	r1, [r7, #0]
 8012304:	fa01 f303 	lsl.w	r3, r1, r3
 8012308:	4013      	ands	r3, r2
 801230a:	2b00      	cmp	r3, #0
 801230c:	d003      	beq.n	8012316 <DAC_GetFlagStatus+0x32>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 801230e:	f04f 0301 	mov.w	r3, #1
 8012312:	73fb      	strb	r3, [r7, #15]
 8012314:	e002      	b.n	801231c <DAC_GetFlagStatus+0x38>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8012316:	f04f 0300 	mov.w	r3, #0
 801231a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 801231c:	7bfb      	ldrb	r3, [r7, #15]
}
 801231e:	4618      	mov	r0, r3
 8012320:	f107 0714 	add.w	r7, r7, #20
 8012324:	46bd      	mov	sp, r7
 8012326:	bc80      	pop	{r7}
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop

0801232c <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8012336:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 801233a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801233e:	687a      	ldr	r2, [r7, #4]
 8012340:	6839      	ldr	r1, [r7, #0]
 8012342:	fa01 f202 	lsl.w	r2, r1, r2
 8012346:	635a      	str	r2, [r3, #52]	; 0x34
}
 8012348:	f107 070c 	add.w	r7, r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	bc80      	pop	{r7}
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop

08012354 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8012354:	b480      	push	{r7}
 8012356:	b085      	sub	sp, #20
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 801235e:	f04f 0300 	mov.w	r3, #0
 8012362:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8012364:	f04f 0300 	mov.w	r3, #0
 8012368:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 801236a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 801236e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	461a      	mov	r2, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6839      	ldr	r1, [r7, #0]
 801237a:	fa01 f303 	lsl.w	r3, r1, r3
 801237e:	4013      	ands	r3, r2
 8012380:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8012382:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8012386:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801238c:	461a      	mov	r2, r3
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6839      	ldr	r1, [r7, #0]
 8012392:	fa01 f303 	lsl.w	r3, r1, r3
 8012396:	4013      	ands	r3, r2
 8012398:	2b00      	cmp	r3, #0
 801239a:	d006      	beq.n	80123aa <DAC_GetITStatus+0x56>
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d003      	beq.n	80123aa <DAC_GetITStatus+0x56>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 80123a2:	f04f 0301 	mov.w	r3, #1
 80123a6:	73fb      	strb	r3, [r7, #15]
 80123a8:	e002      	b.n	80123b0 <DAC_GetITStatus+0x5c>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 80123aa:	f04f 0300 	mov.w	r3, #0
 80123ae:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 80123b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	f107 0714 	add.w	r7, r7, #20
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bc80      	pop	{r7}
 80123bc:	4770      	bx	lr
 80123be:	bf00      	nop

080123c0 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 80123c0:	b480      	push	{r7}
 80123c2:	b083      	sub	sp, #12
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 80123ca:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80123ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	6839      	ldr	r1, [r7, #0]
 80123d6:	fa01 f202 	lsl.w	r2, r1, r2
 80123da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80123dc:	f107 070c 	add.w	r7, r7, #12
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bc80      	pop	{r7}
 80123e4:	4770      	bx	lr
 80123e6:	bf00      	nop

080123e8 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 80123e8:	b480      	push	{r7}
 80123ea:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 80123ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80123f0:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bc80      	pop	{r7}
 8012400:	4770      	bx	lr
 8012402:	bf00      	nop

08012404 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 8012404:	b480      	push	{r7}
 8012406:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8012408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801240c:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8012416:	ea4f 5313 	mov.w	r3, r3, lsr #20
}
 801241a:	4618      	mov	r0, r3
 801241c:	46bd      	mov	sp, r7
 801241e:	bc80      	pop	{r7}
 8012420:	4770      	bx	lr
 8012422:	bf00      	nop

08012424 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8012424:	b480      	push	{r7}
 8012426:	b083      	sub	sp, #12
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	460b      	mov	r3, r1
 801242e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012430:	78fb      	ldrb	r3, [r7, #3]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d00d      	beq.n	8012452 <DBGMCU_Config+0x2e>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8012436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801243a:	f2ce 0304 	movt	r3, #57348	; 0xe004
 801243e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012442:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8012446:	6852      	ldr	r2, [r2, #4]
 8012448:	4611      	mov	r1, r2
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	430a      	orrs	r2, r1
 801244e:	605a      	str	r2, [r3, #4]
 8012450:	e00e      	b.n	8012470 <DBGMCU_Config+0x4c>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8012452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012456:	f2ce 0304 	movt	r3, #57348	; 0xe004
 801245a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801245e:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8012462:	6852      	ldr	r2, [r2, #4]
 8012464:	4611      	mov	r1, r2
 8012466:	687a      	ldr	r2, [r7, #4]
 8012468:	ea6f 0202 	mvn.w	r2, r2
 801246c:	400a      	ands	r2, r1
 801246e:	605a      	str	r2, [r3, #4]
  }
}
 8012470:	f107 070c 	add.w	r7, r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	bc80      	pop	{r7}
 8012478:	4770      	bx	lr
 801247a:	bf00      	nop

0801247c <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 801247c:	b480      	push	{r7}
 801247e:	b083      	sub	sp, #12
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	460b      	mov	r3, r1
 8012486:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012488:	78fb      	ldrb	r3, [r7, #3]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d00d      	beq.n	80124aa <DBGMCU_APB1PeriphConfig+0x2e>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 801248e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012492:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8012496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801249a:	f2ce 0204 	movt	r2, #57348	; 0xe004
 801249e:	6892      	ldr	r2, [r2, #8]
 80124a0:	4611      	mov	r1, r2
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	430a      	orrs	r2, r1
 80124a6:	609a      	str	r2, [r3, #8]
 80124a8:	e00e      	b.n	80124c8 <DBGMCU_APB1PeriphConfig+0x4c>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 80124aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80124ae:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80124b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80124b6:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80124ba:	6892      	ldr	r2, [r2, #8]
 80124bc:	4611      	mov	r1, r2
 80124be:	687a      	ldr	r2, [r7, #4]
 80124c0:	ea6f 0202 	mvn.w	r2, r2
 80124c4:	400a      	ands	r2, r1
 80124c6:	609a      	str	r2, [r3, #8]
  }
}
 80124c8:	f107 070c 	add.w	r7, r7, #12
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bc80      	pop	{r7}
 80124d0:	4770      	bx	lr
 80124d2:	bf00      	nop

080124d4 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b083      	sub	sp, #12
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	460b      	mov	r3, r1
 80124de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80124e0:	78fb      	ldrb	r3, [r7, #3]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d00d      	beq.n	8012502 <DBGMCU_APB2PeriphConfig+0x2e>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 80124e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80124ea:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80124ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80124f2:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80124f6:	68d2      	ldr	r2, [r2, #12]
 80124f8:	4611      	mov	r1, r2
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	430a      	orrs	r2, r1
 80124fe:	60da      	str	r2, [r3, #12]
 8012500:	e00e      	b.n	8012520 <DBGMCU_APB2PeriphConfig+0x4c>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8012502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012506:	f2ce 0304 	movt	r3, #57348	; 0xe004
 801250a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801250e:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8012512:	68d2      	ldr	r2, [r2, #12]
 8012514:	4611      	mov	r1, r2
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	ea6f 0202 	mvn.w	r2, r2
 801251c:	400a      	ands	r2, r1
 801251e:	60da      	str	r2, [r3, #12]
  }
}
 8012520:	f107 070c 	add.w	r7, r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	bc80      	pop	{r7}
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop

0801252c <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 801252c:	b480      	push	{r7}
 801252e:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 8012530:	f04f 0300 	mov.w	r3, #0
 8012534:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012538:	f04f 0200 	mov.w	r2, #0
 801253c:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 801253e:	f04f 0300 	mov.w	r3, #0
 8012542:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012546:	f04f 0200 	mov.w	r2, #0
 801254a:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 801254c:	f04f 0300 	mov.w	r3, #0
 8012550:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012554:	f04f 021f 	mov.w	r2, #31
 8012558:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 801255a:	f04f 0300 	mov.w	r3, #0
 801255e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012562:	f04f 0200 	mov.w	r2, #0
 8012566:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8012568:	f04f 0300 	mov.w	r3, #0
 801256c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012570:	f04f 0200 	mov.w	r2, #0
 8012574:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8012576:	f04f 0300 	mov.w	r3, #0
 801257a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 801257e:	f04f 0200 	mov.w	r2, #0
 8012582:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8012584:	f04f 0300 	mov.w	r3, #0
 8012588:	f2c5 0305 	movt	r3, #20485	; 0x5005
 801258c:	f04f 0200 	mov.w	r2, #0
 8012590:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012592:	46bd      	mov	sp, r7
 8012594:	bc80      	pop	{r7}
 8012596:	4770      	bx	lr

08012598 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8012598:	b480      	push	{r7}
 801259a:	b085      	sub	sp, #20
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 80125a0:	f04f 0300 	mov.w	r3, #0
 80125a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 80125a6:	f04f 0300 	mov.w	r3, #0
 80125aa:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80125ae:	f04f 0200 	mov.w	r2, #0
 80125b2:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80125b6:	6812      	ldr	r2, [r2, #0]
 80125b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80125bc:	f022 0201 	bic.w	r2, r2, #1
 80125c0:	601a      	str	r2, [r3, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 80125c2:	f04f 0300 	mov.w	r3, #0
 80125c6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 80125d4:	f023 0312 	bic.w	r3, r3, #18
 80125d8:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 80125e2:	4313      	orrs	r3, r2
 80125e4:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 80125ea:	4313      	orrs	r3, r2
 80125ec:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 80125f2:	4313      	orrs	r3, r2
 80125f4:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80125fa:	4313      	orrs	r3, r2
 80125fc:	b29a      	uxth	r2, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	895b      	ldrh	r3, [r3, #10]
 8012602:	4313      	orrs	r3, r2
 8012604:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 801260a:	4313      	orrs	r3, r2
 801260c:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 801260e:	68fa      	ldr	r2, [r7, #12]
 8012610:	4313      	orrs	r3, r2
 8012612:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8012614:	f04f 0300 	mov.w	r3, #0
 8012618:	f2c5 0305 	movt	r3, #20485	; 0x5005
 801261c:	68fa      	ldr	r2, [r7, #12]
 801261e:	601a      	str	r2, [r3, #0]
}
 8012620:	f107 0714 	add.w	r7, r7, #20
 8012624:	46bd      	mov	sp, r7
 8012626:	bc80      	pop	{r7}
 8012628:	4770      	bx	lr
 801262a:	bf00      	nop

0801262c <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 801262c:	b480      	push	{r7}
 801262e:	b083      	sub	sp, #12
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f04f 0200 	mov.w	r2, #0
 801263a:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f04f 0200 	mov.w	r2, #0
 8012642:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f04f 0200 	mov.w	r2, #0
 801264a:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f04f 0200 	mov.w	r2, #0
 8012652:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f04f 0200 	mov.w	r2, #0
 801265a:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f04f 0200 	mov.w	r2, #0
 8012662:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f04f 0200 	mov.w	r2, #0
 801266a:	819a      	strh	r2, [r3, #12]
}
 801266c:	f107 070c 	add.w	r7, r7, #12
 8012670:	46bd      	mov	sp, r7
 8012672:	bc80      	pop	{r7}
 8012674:	4770      	bx	lr
 8012676:	bf00      	nop

08012678 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8012680:	f04f 0300 	mov.w	r3, #0
 8012684:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	8852      	ldrh	r2, [r2, #2]
 801268c:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 801268e:	687a      	ldr	r2, [r7, #4]
 8012690:	8812      	ldrh	r2, [r2, #0]
 8012692:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8012696:	430a      	orrs	r2, r1
 8012698:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 801269a:	f04f 0300 	mov.w	r3, #0
 801269e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80126a2:	687a      	ldr	r2, [r7, #4]
 80126a4:	88d2      	ldrh	r2, [r2, #6]
 80126a6:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 80126a8:	687a      	ldr	r2, [r7, #4]
 80126aa:	8892      	ldrh	r2, [r2, #4]
 80126ac:	ea4f 4202 	mov.w	r2, r2, lsl #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 80126b0:	430a      	orrs	r2, r1
 80126b2:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 80126b4:	f107 070c 	add.w	r7, r7, #12
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bc80      	pop	{r7}
 80126bc:	4770      	bx	lr
 80126be:	bf00      	nop

080126c0 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 80126c0:	b480      	push	{r7}
 80126c2:	b083      	sub	sp, #12
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	4603      	mov	r3, r0
 80126c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80126ca:	79fb      	ldrb	r3, [r7, #7]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d00c      	beq.n	80126ea <DCMI_CROPCmd+0x2a>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 80126d0:	f04f 0300 	mov.w	r3, #0
 80126d4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80126d8:	f04f 0200 	mov.w	r2, #0
 80126dc:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80126e0:	6812      	ldr	r2, [r2, #0]
 80126e2:	f042 0204 	orr.w	r2, r2, #4
 80126e6:	601a      	str	r2, [r3, #0]
 80126e8:	e00b      	b.n	8012702 <DCMI_CROPCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 80126ea:	f04f 0300 	mov.w	r3, #0
 80126ee:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80126f2:	f04f 0200 	mov.w	r2, #0
 80126f6:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80126fa:	6812      	ldr	r2, [r2, #0]
 80126fc:	f022 0204 	bic.w	r2, r2, #4
 8012700:	601a      	str	r2, [r3, #0]
  }
}
 8012702:	f107 070c 	add.w	r7, r7, #12
 8012706:	46bd      	mov	sp, r7
 8012708:	bc80      	pop	{r7}
 801270a:	4770      	bx	lr

0801270c <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8012714:	f04f 0300 	mov.w	r3, #0
 8012718:	f2c5 0305 	movt	r3, #20485	; 0x5005
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	7812      	ldrb	r2, [r2, #0]
 8012720:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8012722:	687a      	ldr	r2, [r7, #4]
 8012724:	7852      	ldrb	r2, [r2, #1]
 8012726:	ea4f 2202 	mov.w	r2, r2, lsl #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 801272a:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	7892      	ldrb	r2, [r2, #2]
 8012730:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8012734:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	78d2      	ldrb	r2, [r2, #3]
 801273a:	ea4f 6202 	mov.w	r2, r2, lsl #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 801273e:	430a      	orrs	r2, r1
 8012740:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 8012742:	f107 070c 	add.w	r7, r7, #12
 8012746:	46bd      	mov	sp, r7
 8012748:	bc80      	pop	{r7}
 801274a:	4770      	bx	lr

0801274c <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	4603      	mov	r3, r0
 8012754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8012756:	79fb      	ldrb	r3, [r7, #7]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d00c      	beq.n	8012776 <DCMI_JPEGCmd+0x2a>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 801275c:	f04f 0300 	mov.w	r3, #0
 8012760:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012764:	f04f 0200 	mov.w	r2, #0
 8012768:	f2c5 0205 	movt	r2, #20485	; 0x5005
 801276c:	6812      	ldr	r2, [r2, #0]
 801276e:	f042 0208 	orr.w	r2, r2, #8
 8012772:	601a      	str	r2, [r3, #0]
 8012774:	e00b      	b.n	801278e <DCMI_JPEGCmd+0x42>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8012776:	f04f 0300 	mov.w	r3, #0
 801277a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 801277e:	f04f 0200 	mov.w	r2, #0
 8012782:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8012786:	6812      	ldr	r2, [r2, #0]
 8012788:	f022 0208 	bic.w	r2, r2, #8
 801278c:	601a      	str	r2, [r3, #0]
  }
}
 801278e:	f107 070c 	add.w	r7, r7, #12
 8012792:	46bd      	mov	sp, r7
 8012794:	bc80      	pop	{r7}
 8012796:	4770      	bx	lr

08012798 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8012798:	b480      	push	{r7}
 801279a:	b083      	sub	sp, #12
 801279c:	af00      	add	r7, sp, #0
 801279e:	4603      	mov	r3, r0
 80127a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80127a2:	79fb      	ldrb	r3, [r7, #7]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d00c      	beq.n	80127c2 <DCMI_Cmd+0x2a>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 80127a8:	f04f 0300 	mov.w	r3, #0
 80127ac:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80127b0:	f04f 0200 	mov.w	r2, #0
 80127b4:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80127b8:	6812      	ldr	r2, [r2, #0]
 80127ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80127be:	601a      	str	r2, [r3, #0]
 80127c0:	e00b      	b.n	80127da <DCMI_Cmd+0x42>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 80127c2:	f04f 0300 	mov.w	r3, #0
 80127c6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80127ca:	f04f 0200 	mov.w	r2, #0
 80127ce:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80127d2:	6812      	ldr	r2, [r2, #0]
 80127d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80127d8:	601a      	str	r2, [r3, #0]
  }
}
 80127da:	f107 070c 	add.w	r7, r7, #12
 80127de:	46bd      	mov	sp, r7
 80127e0:	bc80      	pop	{r7}
 80127e2:	4770      	bx	lr

080127e4 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	4603      	mov	r3, r0
 80127ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80127ee:	79fb      	ldrb	r3, [r7, #7]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d00c      	beq.n	801280e <DCMI_CaptureCmd+0x2a>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 80127f4:	f04f 0300 	mov.w	r3, #0
 80127f8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80127fc:	f04f 0200 	mov.w	r2, #0
 8012800:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8012804:	6812      	ldr	r2, [r2, #0]
 8012806:	f042 0201 	orr.w	r2, r2, #1
 801280a:	601a      	str	r2, [r3, #0]
 801280c:	e00b      	b.n	8012826 <DCMI_CaptureCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 801280e:	f04f 0300 	mov.w	r3, #0
 8012812:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012816:	f04f 0200 	mov.w	r2, #0
 801281a:	f2c5 0205 	movt	r2, #20485	; 0x5005
 801281e:	6812      	ldr	r2, [r2, #0]
 8012820:	f022 0201 	bic.w	r2, r2, #1
 8012824:	601a      	str	r2, [r3, #0]
  }
}
 8012826:	f107 070c 	add.w	r7, r7, #12
 801282a:	46bd      	mov	sp, r7
 801282c:	bc80      	pop	{r7}
 801282e:	4770      	bx	lr

08012830 <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 8012830:	b480      	push	{r7}
 8012832:	af00      	add	r7, sp, #0
  return DCMI->DR;
 8012834:	f04f 0300 	mov.w	r3, #0
 8012838:	f2c5 0305 	movt	r3, #20485	; 0x5005
 801283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801283e:	4618      	mov	r0, r3
 8012840:	46bd      	mov	sp, r7
 8012842:	bc80      	pop	{r7}
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop

08012848 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 8012848:	b480      	push	{r7}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	4602      	mov	r2, r0
 8012850:	460b      	mov	r3, r1
 8012852:	80fa      	strh	r2, [r7, #6]
 8012854:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012856:	797b      	ldrb	r3, [r7, #5]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00d      	beq.n	8012878 <DCMI_ITConfig+0x30>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 801285c:	f04f 0300 	mov.w	r3, #0
 8012860:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012864:	f04f 0200 	mov.w	r2, #0
 8012868:	f2c5 0205 	movt	r2, #20485	; 0x5005
 801286c:	68d2      	ldr	r2, [r2, #12]
 801286e:	4611      	mov	r1, r2
 8012870:	88fa      	ldrh	r2, [r7, #6]
 8012872:	430a      	orrs	r2, r1
 8012874:	60da      	str	r2, [r3, #12]
 8012876:	e00f      	b.n	8012898 <DCMI_ITConfig+0x50>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8012878:	f04f 0300 	mov.w	r3, #0
 801287c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012880:	f04f 0200 	mov.w	r2, #0
 8012884:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8012888:	68d2      	ldr	r2, [r2, #12]
 801288a:	4611      	mov	r1, r2
 801288c:	88fa      	ldrh	r2, [r7, #6]
 801288e:	ea6f 0202 	mvn.w	r2, r2
 8012892:	b292      	uxth	r2, r2
 8012894:	400a      	ands	r2, r1
 8012896:	60da      	str	r2, [r3, #12]
  }  
}
 8012898:	f107 070c 	add.w	r7, r7, #12
 801289c:	46bd      	mov	sp, r7
 801289e:	bc80      	pop	{r7}
 80128a0:	4770      	bx	lr
 80128a2:	bf00      	nop

080128a4 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 80128a4:	b480      	push	{r7}
 80128a6:	b087      	sub	sp, #28
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	4603      	mov	r3, r0
 80128ac:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80128ae:	f04f 0300 	mov.w	r3, #0
 80128b2:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 80128b4:	f04f 0300 	mov.w	r3, #0
 80128b8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 80128ba:	88fb      	ldrh	r3, [r7, #6]
 80128bc:	ea4f 3313 	mov.w	r3, r3, lsr #12
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x01) /* The FLAG is in RISR register */
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d106      	bne.n	80128d8 <DCMI_GetFlagStatus+0x34>
  {
    tempreg= DCMI->RISR;
 80128ca:	f04f 0300 	mov.w	r3, #0
 80128ce:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80128d2:	689b      	ldr	r3, [r3, #8]
 80128d4:	613b      	str	r3, [r7, #16]
 80128d6:	e00f      	b.n	80128f8 <DCMI_GetFlagStatus+0x54>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b02      	cmp	r3, #2
 80128dc:	d106      	bne.n	80128ec <DCMI_GetFlagStatus+0x48>
  {
    tempreg = DCMI->SR;
 80128de:	f04f 0300 	mov.w	r3, #0
 80128e2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	613b      	str	r3, [r7, #16]
 80128ea:	e005      	b.n	80128f8 <DCMI_GetFlagStatus+0x54>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 80128ec:	f04f 0300 	mov.w	r3, #0
 80128f0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80128f4:	691b      	ldr	r3, [r3, #16]
 80128f6:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 80128f8:	88fa      	ldrh	r2, [r7, #6]
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	4013      	ands	r3, r2
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d003      	beq.n	801290a <DCMI_GetFlagStatus+0x66>
  {
    bitstatus = SET;
 8012902:	f04f 0301 	mov.w	r3, #1
 8012906:	75fb      	strb	r3, [r7, #23]
 8012908:	e002      	b.n	8012910 <DCMI_GetFlagStatus+0x6c>
  }
  else
  {
    bitstatus = RESET;
 801290a:	f04f 0300 	mov.w	r3, #0
 801290e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8012910:	7dfb      	ldrb	r3, [r7, #23]
}
 8012912:	4618      	mov	r0, r3
 8012914:	f107 071c 	add.w	r7, r7, #28
 8012918:	46bd      	mov	sp, r7
 801291a:	bc80      	pop	{r7}
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop

08012920 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8012920:	b480      	push	{r7}
 8012922:	b083      	sub	sp, #12
 8012924:	af00      	add	r7, sp, #0
 8012926:	4603      	mov	r3, r0
 8012928:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 801292a:	f04f 0300 	mov.w	r3, #0
 801292e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8012932:	88fa      	ldrh	r2, [r7, #6]
 8012934:	615a      	str	r2, [r3, #20]
}
 8012936:	f107 070c 	add.w	r7, r7, #12
 801293a:	46bd      	mov	sp, r7
 801293c:	bc80      	pop	{r7}
 801293e:	4770      	bx	lr

08012940 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 8012940:	b480      	push	{r7}
 8012942:	b085      	sub	sp, #20
 8012944:	af00      	add	r7, sp, #0
 8012946:	4603      	mov	r3, r0
 8012948:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 801294a:	f04f 0300 	mov.w	r3, #0
 801294e:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 8012950:	f04f 0300 	mov.w	r3, #0
 8012954:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8012956:	f04f 0300 	mov.w	r3, #0
 801295a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 801295e:	691b      	ldr	r3, [r3, #16]
 8012960:	461a      	mov	r2, r3
 8012962:	88fb      	ldrh	r3, [r7, #6]
 8012964:	4013      	ands	r3, r2
 8012966:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d003      	beq.n	8012976 <DCMI_GetITStatus+0x36>
  {
    bitstatus = SET;
 801296e:	f04f 0301 	mov.w	r3, #1
 8012972:	73fb      	strb	r3, [r7, #15]
 8012974:	e002      	b.n	801297c <DCMI_GetITStatus+0x3c>
  }
  else
  {
    bitstatus = RESET;
 8012976:	f04f 0300 	mov.w	r3, #0
 801297a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801297c:	7bfb      	ldrb	r3, [r7, #15]
}
 801297e:	4618      	mov	r0, r3
 8012980:	f107 0714 	add.w	r7, r7, #20
 8012984:	46bd      	mov	sp, r7
 8012986:	bc80      	pop	{r7}
 8012988:	4770      	bx	lr
 801298a:	bf00      	nop

0801298c <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 801298c:	b480      	push	{r7}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	4603      	mov	r3, r0
 8012994:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8012996:	f04f 0300 	mov.w	r3, #0
 801299a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 801299e:	88fa      	ldrh	r2, [r7, #6]
 80129a0:	615a      	str	r2, [r3, #20]
}
 80129a2:	f107 070c 	add.w	r7, r7, #12
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bc80      	pop	{r7}
 80129aa:	4770      	bx	lr

080129ac <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f023 0201 	bic.w	r2, r3, #1
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f04f 0200 	mov.w	r2, #0
 80129c6:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f04f 0200 	mov.w	r2, #0
 80129ce:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f04f 0200 	mov.w	r2, #0
 80129d6:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f04f 0200 	mov.w	r2, #0
 80129de:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f04f 0200 	mov.w	r2, #0
 80129e6:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f04f 0221 	mov.w	r2, #33	; 0x21
 80129ee:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	f246 0310 	movw	r3, #24592	; 0x6010
 80129f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d107      	bne.n	8012a0e <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80129fe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012a02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a06:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8012a0a:	609a      	str	r2, [r3, #8]
 8012a0c:	e0eb      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8012a0e:	687a      	ldr	r2, [r7, #4]
 8012a10:	f246 0328 	movw	r3, #24616	; 0x6028
 8012a14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d107      	bne.n	8012a2c <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8012a1c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012a20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a24:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8012a28:	609a      	str	r2, [r3, #8]
 8012a2a:	e0dc      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	f246 0340 	movw	r3, #24640	; 0x6040
 8012a32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d107      	bne.n	8012a4a <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8012a3a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012a3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a42:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8012a46:	609a      	str	r2, [r3, #8]
 8012a48:	e0cd      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	f246 0358 	movw	r3, #24664	; 0x6058
 8012a50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d107      	bne.n	8012a68 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8012a58:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012a5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a60:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8012a64:	609a      	str	r2, [r3, #8]
 8012a66:	e0be      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	f246 0370 	movw	r3, #24688	; 0x6070
 8012a6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d109      	bne.n	8012a8a <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8012a76:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012a7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a7e:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8012a82:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8012a86:	60da      	str	r2, [r3, #12]
 8012a88:	e0ad      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8012a8a:	687a      	ldr	r2, [r7, #4]
 8012a8c:	f246 0388 	movw	r3, #24712	; 0x6088
 8012a90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d109      	bne.n	8012aac <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8012a98:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012a9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012aa0:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8012aa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8012aa8:	60da      	str	r2, [r3, #12]
 8012aaa:	e09c      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8012ab2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d109      	bne.n	8012ace <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8012aba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012abe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012ac2:	f04f 0200 	mov.w	r2, #0
 8012ac6:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8012aca:	60da      	str	r2, [r3, #12]
 8012acc:	e08b      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8012ace:	687a      	ldr	r2, [r7, #4]
 8012ad0:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8012ad4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d107      	bne.n	8012aec <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8012adc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012ae4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8012ae8:	60da      	str	r2, [r3, #12]
 8012aea:	e07c      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	f246 4310 	movw	r3, #25616	; 0x6410
 8012af2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d107      	bne.n	8012b0a <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8012afa:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012afe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b02:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8012b06:	609a      	str	r2, [r3, #8]
 8012b08:	e06d      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	f246 4328 	movw	r3, #25640	; 0x6428
 8012b10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d107      	bne.n	8012b28 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8012b18:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012b1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b20:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8012b24:	609a      	str	r2, [r3, #8]
 8012b26:	e05e      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	f246 4340 	movw	r3, #25664	; 0x6440
 8012b2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d107      	bne.n	8012b46 <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8012b36:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012b3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b3e:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8012b42:	609a      	str	r2, [r3, #8]
 8012b44:	e04f      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8012b46:	687a      	ldr	r2, [r7, #4]
 8012b48:	f246 4358 	movw	r3, #25688	; 0x6458
 8012b4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d107      	bne.n	8012b64 <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8012b54:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012b58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b5c:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8012b60:	609a      	str	r2, [r3, #8]
 8012b62:	e040      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	f246 4370 	movw	r3, #25712	; 0x6470
 8012b6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d109      	bne.n	8012b86 <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8012b72:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012b76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b7a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8012b7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8012b82:	60da      	str	r2, [r3, #12]
 8012b84:	e02f      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8012b86:	687a      	ldr	r2, [r7, #4]
 8012b88:	f246 4388 	movw	r3, #25736	; 0x6488
 8012b8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d109      	bne.n	8012ba8 <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8012b94:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012b98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012b9c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8012ba0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8012ba4:	60da      	str	r2, [r3, #12]
 8012ba6:	e01e      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8012ba8:	687a      	ldr	r2, [r7, #4]
 8012baa:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8012bae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d109      	bne.n	8012bca <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8012bb6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012bba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012bbe:	f04f 0200 	mov.w	r2, #0
 8012bc2:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8012bc6:	60da      	str	r2, [r3, #12]
 8012bc8:	e00d      	b.n	8012be6 <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8012bca:	687a      	ldr	r2, [r7, #4]
 8012bcc:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8012bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d106      	bne.n	8012be6 <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8012bd8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012bdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012be0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8012be4:	60da      	str	r2, [r3, #12]
    }
  }
}
 8012be6:	f107 070c 	add.w	r7, r7, #12
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bc80      	pop	{r7}
 8012bee:	4770      	bx	lr

08012bf0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b085      	sub	sp, #20
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
 8012bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012bfa:	f04f 0300 	mov.w	r3, #0
 8012bfe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012c06:	68fa      	ldr	r2, [r7, #12]
 8012c08:	f248 033f 	movw	r3, #32831	; 0x803f
 8012c0c:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 8012c10:	4013      	ands	r3, r2
 8012c12:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8012c22:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	699b      	ldr	r3, [r3, #24]
 8012c28:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8012c2e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	6a1b      	ldr	r3, [r3, #32]
 8012c34:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8012c3a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c40:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8012c46:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c4c:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8012c4e:	68fa      	ldr	r2, [r7, #12]
 8012c50:	4313      	orrs	r3, r2
 8012c52:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	68fa      	ldr	r2, [r7, #12]
 8012c58:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	695b      	ldr	r3, [r3, #20]
 8012c5e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	f023 0307 	bic.w	r3, r3, #7
 8012c66:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c70:	4313      	orrs	r3, r2
 8012c72:	68fa      	ldr	r2, [r7, #12]
 8012c74:	4313      	orrs	r3, r2
 8012c76:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	68fa      	ldr	r2, [r7, #12]
 8012c7c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	691a      	ldr	r2, [r3, #16]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	685a      	ldr	r2, [r3, #4]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	689a      	ldr	r2, [r3, #8]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	60da      	str	r2, [r3, #12]
}
 8012c96:	f107 0714 	add.w	r7, r7, #20
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bc80      	pop	{r7}
 8012c9e:	4770      	bx	lr

08012ca0 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b083      	sub	sp, #12
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f04f 0200 	mov.w	r2, #0
 8012cae:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f04f 0200 	mov.w	r2, #0
 8012cb6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f04f 0200 	mov.w	r2, #0
 8012cbe:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f04f 0200 	mov.w	r2, #0
 8012cc6:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f04f 0200 	mov.w	r2, #0
 8012cce:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f04f 0200 	mov.w	r2, #0
 8012cd6:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f04f 0200 	mov.w	r2, #0
 8012cde:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f04f 0200 	mov.w	r2, #0
 8012ce6:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f04f 0200 	mov.w	r2, #0
 8012cee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f04f 0200 	mov.w	r2, #0
 8012cf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f04f 0200 	mov.w	r2, #0
 8012cfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f04f 0200 	mov.w	r2, #0
 8012d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f04f 0200 	mov.w	r2, #0
 8012d0e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f04f 0200 	mov.w	r2, #0
 8012d16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f04f 0200 	mov.w	r2, #0
 8012d1e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8012d20:	f107 070c 	add.w	r7, r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bc80      	pop	{r7}
 8012d28:	4770      	bx	lr
 8012d2a:	bf00      	nop

08012d2c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b083      	sub	sp, #12
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	460b      	mov	r3, r1
 8012d36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012d38:	78fb      	ldrb	r3, [r7, #3]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d006      	beq.n	8012d4c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	f043 0201 	orr.w	r2, r3, #1
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	601a      	str	r2, [r3, #0]
 8012d4a:	e005      	b.n	8012d58 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	f023 0201 	bic.w	r2, r3, #1
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	601a      	str	r2, [r3, #0]
  }
}
 8012d58:	f107 070c 	add.w	r7, r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bc80      	pop	{r7}
 8012d60:	4770      	bx	lr
 8012d62:	bf00      	nop

08012d64 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d006      	beq.n	8012d82 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	601a      	str	r2, [r3, #0]
 8012d80:	e005      	b.n	8012d8e <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	601a      	str	r2, [r3, #0]
  }
}
 8012d8e:	f107 070c 	add.w	r7, r7, #12
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bc80      	pop	{r7}
 8012d96:	4770      	bx	lr

08012d98 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b083      	sub	sp, #12
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d006      	beq.n	8012db6 <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	f043 0220 	orr.w	r2, r3, #32
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	601a      	str	r2, [r3, #0]
 8012db4:	e005      	b.n	8012dc2 <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f023 0220 	bic.w	r2, r3, #32
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	601a      	str	r2, [r3, #0]
  }
}
 8012dc2:	f107 070c 	add.w	r7, r7, #12
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bc80      	pop	{r7}
 8012dca:	4770      	bx	lr

08012dcc <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8012dd8:	887a      	ldrh	r2, [r7, #2]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	605a      	str	r2, [r3, #4]
}
 8012dde:	f107 070c 	add.w	r7, r7, #12
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bc80      	pop	{r7}
 8012de6:	4770      	bx	lr

08012de8 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	b29b      	uxth	r3, r3
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	f107 070c 	add.w	r7, r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bc80      	pop	{r7}
 8012e00:	4770      	bx	lr
 8012e02:	bf00      	nop

08012e04 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8012e04:	b480      	push	{r7}
 8012e06:	b085      	sub	sp, #20
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d006      	beq.n	8012e24 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	601a      	str	r2, [r3, #0]
 8012e22:	e005      	b.n	8012e30 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	68ba      	ldr	r2, [r7, #8]
 8012e34:	611a      	str	r2, [r3, #16]
}
 8012e36:	f107 0714 	add.w	r7, r7, #20
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bc80      	pop	{r7}
 8012e3e:	4770      	bx	lr

08012e40 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	460b      	mov	r3, r1
 8012e4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8012e4c:	78fb      	ldrb	r3, [r7, #3]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d006      	beq.n	8012e60 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	601a      	str	r2, [r3, #0]
 8012e5e:	e005      	b.n	8012e6c <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	601a      	str	r2, [r3, #0]
  }
}
 8012e6c:	f107 070c 	add.w	r7, r7, #12
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bc80      	pop	{r7}
 8012e74:	4770      	bx	lr
 8012e76:	bf00      	nop

08012e78 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b085      	sub	sp, #20
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	60f8      	str	r0, [r7, #12]
 8012e80:	60b9      	str	r1, [r7, #8]
 8012e82:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d003      	beq.n	8012e92 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	68ba      	ldr	r2, [r7, #8]
 8012e8e:	611a      	str	r2, [r3, #16]
 8012e90:	e002      	b.n	8012e98 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	68ba      	ldr	r2, [r7, #8]
 8012e96:	60da      	str	r2, [r3, #12]
  }
}
 8012e98:	f107 0714 	add.w	r7, r7, #20
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bc80      	pop	{r7}
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop

08012ea4 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b085      	sub	sp, #20
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8012eac:	f04f 0300 	mov.w	r3, #0
 8012eb0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d003      	beq.n	8012ec6 <DMA_GetCurrentMemoryTarget+0x22>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8012ebe:	f04f 0301 	mov.w	r3, #1
 8012ec2:	60fb      	str	r3, [r7, #12]
 8012ec4:	e002      	b.n	8012ecc <DMA_GetCurrentMemoryTarget+0x28>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8012ec6:	f04f 0300 	mov.w	r3, #0
 8012eca:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f107 0714 	add.w	r7, r7, #20
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bc80      	pop	{r7}
 8012ed8:	4770      	bx	lr
 8012eda:	bf00      	nop

08012edc <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8012ee4:	f04f 0300 	mov.w	r3, #0
 8012ee8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f003 0301 	and.w	r3, r3, #1
 8012ef2:	b2db      	uxtb	r3, r3
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d003      	beq.n	8012f00 <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8012ef8:	f04f 0301 	mov.w	r3, #1
 8012efc:	73fb      	strb	r3, [r7, #15]
 8012efe:	e002      	b.n	8012f06 <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8012f00:	f04f 0300 	mov.w	r3, #0
 8012f04:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8012f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f107 0714 	add.w	r7, r7, #20
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bc80      	pop	{r7}
 8012f12:	4770      	bx	lr

08012f14 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b085      	sub	sp, #20
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8012f1c:	f04f 0300 	mov.w	r3, #0
 8012f20:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	695b      	ldr	r3, [r3, #20]
 8012f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012f2a:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f107 0714 	add.w	r7, r7, #20
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bc80      	pop	{r7}
 8012f38:	4770      	bx	lr
 8012f3a:	bf00      	nop

08012f3c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b087      	sub	sp, #28
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8012f46:	f04f 0300 	mov.w	r3, #0
 8012f4a:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8012f4c:	f04f 0300 	mov.w	r3, #0
 8012f50:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	f246 430f 	movw	r3, #25615	; 0x640f
 8012f58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d805      	bhi.n	8012f6c <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8012f60:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012f64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012f68:	613b      	str	r3, [r7, #16]
 8012f6a:	e004      	b.n	8012f76 <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8012f6c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012f70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012f74:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d003      	beq.n	8012f88 <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	60fb      	str	r3, [r7, #12]
 8012f86:	e002      	b.n	8012f8e <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8012f8e:	68fa      	ldr	r2, [r7, #12]
 8012f90:	f640 737d 	movw	r3, #3965	; 0xf7d
 8012f94:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8012f98:	4013      	ands	r3, r2
 8012f9a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8012f9c:	68fa      	ldr	r2, [r7, #12]
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	4013      	ands	r3, r2
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d003      	beq.n	8012fae <DMA_GetFlagStatus+0x72>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8012fa6:	f04f 0301 	mov.w	r3, #1
 8012faa:	75fb      	strb	r3, [r7, #23]
 8012fac:	e002      	b.n	8012fb4 <DMA_GetFlagStatus+0x78>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8012fae:	f04f 0300 	mov.w	r3, #0
 8012fb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8012fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f107 071c 	add.w	r7, r7, #28
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bc80      	pop	{r7}
 8012fc0:	4770      	bx	lr
 8012fc2:	bf00      	nop

08012fc4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	f246 430f 	movw	r3, #25615	; 0x640f
 8012fd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d805      	bhi.n	8012fe8 <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8012fdc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012fe0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012fe4:	60fb      	str	r3, [r7, #12]
 8012fe6:	e004      	b.n	8012ff2 <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8012fe8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8012fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8012ff0:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d008      	beq.n	801300e <DMA_ClearFlag+0x4a>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8012ffc:	683a      	ldr	r2, [r7, #0]
 8012ffe:	f640 737d 	movw	r3, #3965	; 0xf7d
 8013002:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8013006:	4013      	ands	r3, r2
 8013008:	68fa      	ldr	r2, [r7, #12]
 801300a:	60d3      	str	r3, [r2, #12]
 801300c:	e007      	b.n	801301e <DMA_ClearFlag+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 801300e:	683a      	ldr	r2, [r7, #0]
 8013010:	f640 737d 	movw	r3, #3965	; 0xf7d
 8013014:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8013018:	4013      	ands	r3, r2
 801301a:	68fa      	ldr	r2, [r7, #12]
 801301c:	6093      	str	r3, [r2, #8]
  }    
}
 801301e:	f107 0714 	add.w	r7, r7, #20
 8013022:	46bd      	mov	sp, r7
 8013024:	bc80      	pop	{r7}
 8013026:	4770      	bx	lr

08013028 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8013028:	b480      	push	{r7}
 801302a:	b085      	sub	sp, #20
 801302c:	af00      	add	r7, sp, #0
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	4613      	mov	r3, r2
 8013034:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801303c:	2b00      	cmp	r3, #0
 801303e:	d00f      	beq.n	8013060 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8013040:	79fb      	ldrb	r3, [r7, #7]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d006      	beq.n	8013054 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	695b      	ldr	r3, [r3, #20]
 801304a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	615a      	str	r2, [r3, #20]
 8013052:	e005      	b.n	8013060 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	695b      	ldr	r3, [r3, #20]
 8013058:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	2b80      	cmp	r3, #128	; 0x80
 8013064:	d017      	beq.n	8013096 <DMA_ITConfig+0x6e>
  {
    if (NewState != DISABLE)
 8013066:	79fb      	ldrb	r3, [r7, #7]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d009      	beq.n	8013080 <DMA_ITConfig+0x58>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	461a      	mov	r2, r3
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	f003 031e 	and.w	r3, r3, #30
 8013078:	431a      	orrs	r2, r3
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	601a      	str	r2, [r3, #0]
 801307e:	e00a      	b.n	8013096 <DMA_ITConfig+0x6e>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	461a      	mov	r2, r3
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	f003 031e 	and.w	r3, r3, #30
 801308c:	ea6f 0303 	mvn.w	r3, r3
 8013090:	401a      	ands	r2, r3
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8013096:	f107 0714 	add.w	r7, r7, #20
 801309a:	46bd      	mov	sp, r7
 801309c:	bc80      	pop	{r7}
 801309e:	4770      	bx	lr

080130a0 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80130a0:	b480      	push	{r7}
 80130a2:	b087      	sub	sp, #28
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80130aa:	f04f 0300 	mov.w	r3, #0
 80130ae:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80130b0:	f04f 0300 	mov.w	r3, #0
 80130b4:	60fb      	str	r3, [r7, #12]
 80130b6:	f04f 0300 	mov.w	r3, #0
 80130ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80130bc:	687a      	ldr	r2, [r7, #4]
 80130be:	f246 430f 	movw	r3, #25615	; 0x640f
 80130c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d805      	bhi.n	80130d6 <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80130ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80130ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80130d2:	613b      	str	r3, [r7, #16]
 80130d4:	e004      	b.n	80130e0 <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80130d6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80130da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80130de:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80130e0:	683a      	ldr	r2, [r7, #0]
 80130e2:	f640 733c 	movw	r3, #3900	; 0xf3c
 80130e6:	f6c0 733c 	movt	r3, #3900	; 0xf3c
 80130ea:	4013      	ands	r3, r2
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d00c      	beq.n	801310a <DMA_GetITStatus+0x6a>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80130f6:	f003 031e 	and.w	r3, r3, #30
 80130fa:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	461a      	mov	r2, r3
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	4013      	ands	r3, r2
 8013106:	60bb      	str	r3, [r7, #8]
 8013108:	e004      	b.n	8013114 <DMA_GetITStatus+0x74>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	695b      	ldr	r3, [r3, #20]
 801310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013112:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801311a:	2b00      	cmp	r3, #0
 801311c:	d003      	beq.n	8013126 <DMA_GetITStatus+0x86>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	60fb      	str	r3, [r7, #12]
 8013124:	e002      	b.n	801312c <DMA_GetITStatus+0x8c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 801312c:	68fa      	ldr	r2, [r7, #12]
 801312e:	f640 737d 	movw	r3, #3965	; 0xf7d
 8013132:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8013136:	4013      	ands	r3, r2
 8013138:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 801313a:	68fa      	ldr	r2, [r7, #12]
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	4013      	ands	r3, r2
 8013140:	2b00      	cmp	r3, #0
 8013142:	d006      	beq.n	8013152 <DMA_GetITStatus+0xb2>
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d003      	beq.n	8013152 <DMA_GetITStatus+0xb2>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 801314a:	f04f 0301 	mov.w	r3, #1
 801314e:	75fb      	strb	r3, [r7, #23]
 8013150:	e002      	b.n	8013158 <DMA_GetITStatus+0xb8>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8013152:	f04f 0300 	mov.w	r3, #0
 8013156:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8013158:	7dfb      	ldrb	r3, [r7, #23]
}
 801315a:	4618      	mov	r0, r3
 801315c:	f107 071c 	add.w	r7, r7, #28
 8013160:	46bd      	mov	sp, r7
 8013162:	bc80      	pop	{r7}
 8013164:	4770      	bx	lr
 8013166:	bf00      	nop

08013168 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8013168:	b480      	push	{r7}
 801316a:	b085      	sub	sp, #20
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	f246 430f 	movw	r3, #25615	; 0x640f
 8013178:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801317c:	429a      	cmp	r2, r3
 801317e:	d805      	bhi.n	801318c <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8013180:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013184:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013188:	60fb      	str	r3, [r7, #12]
 801318a:	e004      	b.n	8013196 <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 801318c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8013190:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013194:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801319c:	2b00      	cmp	r3, #0
 801319e:	d008      	beq.n	80131b2 <DMA_ClearITPendingBit+0x4a>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80131a0:	683a      	ldr	r2, [r7, #0]
 80131a2:	f640 737d 	movw	r3, #3965	; 0xf7d
 80131a6:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 80131aa:	4013      	ands	r3, r2
 80131ac:	68fa      	ldr	r2, [r7, #12]
 80131ae:	60d3      	str	r3, [r2, #12]
 80131b0:	e007      	b.n	80131c2 <DMA_ClearITPendingBit+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80131b2:	683a      	ldr	r2, [r7, #0]
 80131b4:	f640 737d 	movw	r3, #3965	; 0xf7d
 80131b8:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 80131bc:	4013      	ands	r3, r2
 80131be:	68fa      	ldr	r2, [r7, #12]
 80131c0:	6093      	str	r3, [r2, #8]
  }   
}
 80131c2:	f107 0714 	add.w	r7, r7, #20
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bc80      	pop	{r7}
 80131ca:	4770      	bx	lr

080131cc <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 80131cc:	b480      	push	{r7}
 80131ce:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 80131d0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80131d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80131d8:	f04f 0200 	mov.w	r2, #0
 80131dc:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80131de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80131e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80131e6:	f04f 0200 	mov.w	r2, #0
 80131ea:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 80131ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80131f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80131f4:	f04f 0200 	mov.w	r2, #0
 80131f8:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80131fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80131fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013202:	f04f 0200 	mov.w	r2, #0
 8013206:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8013208:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801320c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013214:	f2c0 027f 	movt	r2, #127	; 0x7f
 8013218:	615a      	str	r2, [r3, #20]
}
 801321a:	46bd      	mov	sp, r7
 801321c:	bc80      	pop	{r7}
 801321e:	4770      	bx	lr

08013220 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8013220:	b480      	push	{r7}
 8013222:	b085      	sub	sp, #20
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8013228:	f04f 0300 	mov.w	r3, #0
 801322c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 801322e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013232:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013236:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	799b      	ldrb	r3, [r3, #6]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d07e      	beq.n	801333e <EXTI_Init+0x11e>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8013240:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013244:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013248:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 801324c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8013250:	6812      	ldr	r2, [r2, #0]
 8013252:	4611      	mov	r1, r2
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	6812      	ldr	r2, [r2, #0]
 8013258:	ea6f 0202 	mvn.w	r2, r2
 801325c:	400a      	ands	r2, r1
 801325e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8013260:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013264:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013268:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 801326c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8013270:	6852      	ldr	r2, [r2, #4]
 8013272:	4611      	mov	r1, r2
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	6812      	ldr	r2, [r2, #0]
 8013278:	ea6f 0202 	mvn.w	r2, r2
 801327c:	400a      	ands	r2, r1
 801327e:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	791b      	ldrb	r3, [r3, #4]
 8013284:	68fa      	ldr	r2, [r7, #12]
 8013286:	18d3      	adds	r3, r2, r3
 8013288:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	6811      	ldr	r1, [r2, #0]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	6812      	ldr	r2, [r2, #0]
 8013294:	430a      	orrs	r2, r1
 8013296:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8013298:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801329c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80132a0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80132a4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80132a8:	6892      	ldr	r2, [r2, #8]
 80132aa:	4611      	mov	r1, r2
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	6812      	ldr	r2, [r2, #0]
 80132b0:	ea6f 0202 	mvn.w	r2, r2
 80132b4:	400a      	ands	r2, r1
 80132b6:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80132b8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80132bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80132c0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80132c4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80132c8:	68d2      	ldr	r2, [r2, #12]
 80132ca:	4611      	mov	r1, r2
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	6812      	ldr	r2, [r2, #0]
 80132d0:	ea6f 0202 	mvn.w	r2, r2
 80132d4:	400a      	ands	r2, r1
 80132d6:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	795b      	ldrb	r3, [r3, #5]
 80132dc:	2b10      	cmp	r3, #16
 80132de:	d11c      	bne.n	801331a <EXTI_Init+0xfa>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80132e0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80132e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80132e8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80132ec:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80132f0:	6892      	ldr	r2, [r2, #8]
 80132f2:	4611      	mov	r1, r2
 80132f4:	687a      	ldr	r2, [r7, #4]
 80132f6:	6812      	ldr	r2, [r2, #0]
 80132f8:	430a      	orrs	r2, r1
 80132fa:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80132fc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013300:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013304:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013308:	f2c4 0201 	movt	r2, #16385	; 0x4001
 801330c:	68d2      	ldr	r2, [r2, #12]
 801330e:	4611      	mov	r1, r2
 8013310:	687a      	ldr	r2, [r7, #4]
 8013312:	6812      	ldr	r2, [r2, #0]
 8013314:	430a      	orrs	r2, r1
 8013316:	60da      	str	r2, [r3, #12]
 8013318:	e01f      	b.n	801335a <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 801331a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801331e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013322:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	795b      	ldrb	r3, [r3, #5]
 8013328:	68fa      	ldr	r2, [r7, #12]
 801332a:	18d3      	adds	r3, r2, r3
 801332c:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	68fa      	ldr	r2, [r7, #12]
 8013332:	6811      	ldr	r1, [r2, #0]
 8013334:	687a      	ldr	r2, [r7, #4]
 8013336:	6812      	ldr	r2, [r2, #0]
 8013338:	430a      	orrs	r2, r1
 801333a:	601a      	str	r2, [r3, #0]
 801333c:	e00d      	b.n	801335a <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	791b      	ldrb	r3, [r3, #4]
 8013342:	68fa      	ldr	r2, [r7, #12]
 8013344:	18d3      	adds	r3, r2, r3
 8013346:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	68fa      	ldr	r2, [r7, #12]
 801334c:	6811      	ldr	r1, [r2, #0]
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	6812      	ldr	r2, [r2, #0]
 8013352:	ea6f 0202 	mvn.w	r2, r2
 8013356:	400a      	ands	r2, r1
 8013358:	601a      	str	r2, [r3, #0]
  }
}
 801335a:	f107 0714 	add.w	r7, r7, #20
 801335e:	46bd      	mov	sp, r7
 8013360:	bc80      	pop	{r7}
 8013362:	4770      	bx	lr

08013364 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8013364:	b480      	push	{r7}
 8013366:	b083      	sub	sp, #12
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f04f 0200 	mov.w	r2, #0
 8013372:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f04f 0200 	mov.w	r2, #0
 801337a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f04f 020c 	mov.w	r2, #12
 8013382:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f04f 0200 	mov.w	r2, #0
 801338a:	719a      	strb	r2, [r3, #6]
}
 801338c:	f107 070c 	add.w	r7, r7, #12
 8013390:	46bd      	mov	sp, r7
 8013392:	bc80      	pop	{r7}
 8013394:	4770      	bx	lr
 8013396:	bf00      	nop

08013398 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8013398:	b480      	push	{r7}
 801339a:	b083      	sub	sp, #12
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 80133a0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80133a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80133a8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80133ac:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80133b0:	6912      	ldr	r2, [r2, #16]
 80133b2:	4611      	mov	r1, r2
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	430a      	orrs	r2, r1
 80133b8:	611a      	str	r2, [r3, #16]
}
 80133ba:	f107 070c 	add.w	r7, r7, #12
 80133be:	46bd      	mov	sp, r7
 80133c0:	bc80      	pop	{r7}
 80133c2:	4770      	bx	lr

080133c4 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 80133c4:	b480      	push	{r7}
 80133c6:	b085      	sub	sp, #20
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80133cc:	f04f 0300 	mov.w	r3, #0
 80133d0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80133d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80133d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80133da:	695b      	ldr	r3, [r3, #20]
 80133dc:	461a      	mov	r2, r3
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	4013      	ands	r3, r2
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d003      	beq.n	80133ee <EXTI_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80133e6:	f04f 0301 	mov.w	r3, #1
 80133ea:	73fb      	strb	r3, [r7, #15]
 80133ec:	e002      	b.n	80133f4 <EXTI_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 80133ee:	f04f 0300 	mov.w	r3, #0
 80133f2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80133f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	f107 0714 	add.w	r7, r7, #20
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bc80      	pop	{r7}
 8013400:	4770      	bx	lr
 8013402:	bf00      	nop

08013404 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8013404:	b480      	push	{r7}
 8013406:	b083      	sub	sp, #12
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 801340c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013410:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	615a      	str	r2, [r3, #20]
}
 8013418:	f107 070c 	add.w	r7, r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	bc80      	pop	{r7}
 8013420:	4770      	bx	lr
 8013422:	bf00      	nop

08013424 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8013424:	b480      	push	{r7}
 8013426:	b085      	sub	sp, #20
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 801342c:	f04f 0300 	mov.w	r3, #0
 8013430:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8013432:	f04f 0300 	mov.w	r3, #0
 8013436:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8013438:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801343c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	461a      	mov	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	4013      	ands	r3, r2
 8013448:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 801344a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801344e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013452:	695b      	ldr	r3, [r3, #20]
 8013454:	461a      	mov	r2, r3
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	4013      	ands	r3, r2
 801345a:	2b00      	cmp	r3, #0
 801345c:	d006      	beq.n	801346c <EXTI_GetITStatus+0x48>
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d003      	beq.n	801346c <EXTI_GetITStatus+0x48>
  {
    bitstatus = SET;
 8013464:	f04f 0301 	mov.w	r3, #1
 8013468:	73fb      	strb	r3, [r7, #15]
 801346a:	e002      	b.n	8013472 <EXTI_GetITStatus+0x4e>
  }
  else
  {
    bitstatus = RESET;
 801346c:	f04f 0300 	mov.w	r3, #0
 8013470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013472:	7bfb      	ldrb	r3, [r7, #15]
}
 8013474:	4618      	mov	r0, r3
 8013476:	f107 0714 	add.w	r7, r7, #20
 801347a:	46bd      	mov	sp, r7
 801347c:	bc80      	pop	{r7}
 801347e:	4770      	bx	lr

08013480 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8013480:	b480      	push	{r7}
 8013482:	b083      	sub	sp, #12
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8013488:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801348c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8013490:	687a      	ldr	r2, [r7, #4]
 8013492:	615a      	str	r2, [r3, #20]
}
 8013494:	f107 070c 	add.w	r7, r7, #12
 8013498:	46bd      	mov	sp, r7
 801349a:	bc80      	pop	{r7}
 801349c:	4770      	bx	lr
 801349e:	bf00      	nop

080134a0 <FLASH_SetLatency>:
  *            @arg FLASH_Latency_6: FLASH Six Latency cycles
  *            @arg FLASH_Latency_7: FLASH Seven Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 80134a8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80134ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	b2d2      	uxtb	r2, r2
 80134b4:	701a      	strb	r2, [r3, #0]
}
 80134b6:	f107 070c 	add.w	r7, r7, #12
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bc80      	pop	{r7}
 80134be:	4770      	bx	lr

080134c0 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	4603      	mov	r3, r0
 80134c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 80134ca:	79fb      	ldrb	r3, [r7, #7]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d00c      	beq.n	80134ea <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80134d0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80134d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80134d8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80134dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80134e0:	6812      	ldr	r2, [r2, #0]
 80134e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80134e6:	601a      	str	r2, [r3, #0]
 80134e8:	e00b      	b.n	8013502 <FLASH_PrefetchBufferCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 80134ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80134ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80134f2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80134f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80134fa:	6812      	ldr	r2, [r2, #0]
 80134fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013500:	601a      	str	r2, [r3, #0]
  }
}
 8013502:	f107 070c 	add.w	r7, r7, #12
 8013506:	46bd      	mov	sp, r7
 8013508:	bc80      	pop	{r7}
 801350a:	4770      	bx	lr

0801350c <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	4603      	mov	r3, r0
 8013514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8013516:	79fb      	ldrb	r3, [r7, #7]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d00c      	beq.n	8013536 <FLASH_InstructionCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 801351c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013520:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013524:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013528:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801352c:	6812      	ldr	r2, [r2, #0]
 801352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013532:	601a      	str	r2, [r3, #0]
 8013534:	e00b      	b.n	801354e <FLASH_InstructionCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8013536:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801353a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801353e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013542:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013546:	6812      	ldr	r2, [r2, #0]
 8013548:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801354c:	601a      	str	r2, [r3, #0]
  }
}
 801354e:	f107 070c 	add.w	r7, r7, #12
 8013552:	46bd      	mov	sp, r7
 8013554:	bc80      	pop	{r7}
 8013556:	4770      	bx	lr

08013558 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8013558:	b480      	push	{r7}
 801355a:	b083      	sub	sp, #12
 801355c:	af00      	add	r7, sp, #0
 801355e:	4603      	mov	r3, r0
 8013560:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8013562:	79fb      	ldrb	r3, [r7, #7]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d00c      	beq.n	8013582 <FLASH_DataCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8013568:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801356c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013570:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013574:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013578:	6812      	ldr	r2, [r2, #0]
 801357a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801357e:	601a      	str	r2, [r3, #0]
 8013580:	e00b      	b.n	801359a <FLASH_DataCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8013582:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013586:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801358a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 801358e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013592:	6812      	ldr	r2, [r2, #0]
 8013594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013598:	601a      	str	r2, [r3, #0]
  }
}
 801359a:	f107 070c 	add.w	r7, r7, #12
 801359e:	46bd      	mov	sp, r7
 80135a0:	bc80      	pop	{r7}
 80135a2:	4770      	bx	lr

080135a4 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 80135a4:	b480      	push	{r7}
 80135a6:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 80135a8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80135ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80135b0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80135b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80135b8:	6812      	ldr	r2, [r2, #0]
 80135ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80135be:	601a      	str	r2, [r3, #0]
}
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bc80      	pop	{r7}
 80135c4:	4770      	bx	lr
 80135c6:	bf00      	nop

080135c8 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 80135c8:	b480      	push	{r7}
 80135ca:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 80135cc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80135d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80135d4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80135d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80135dc:	6812      	ldr	r2, [r2, #0]
 80135de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80135e2:	601a      	str	r2, [r3, #0]
}
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bc80      	pop	{r7}
 80135e8:	4770      	bx	lr
 80135ea:	bf00      	nop

080135ec <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 80135ec:	b480      	push	{r7}
 80135ee:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80135f0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80135f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80135f8:	691b      	ldr	r3, [r3, #16]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	da11      	bge.n	8013622 <FLASH_Unlock+0x36>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80135fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013602:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013606:	f240 1223 	movw	r2, #291	; 0x123
 801360a:	f2c4 5267 	movt	r2, #17767	; 0x4567
 801360e:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8013610:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013614:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013618:	f648 12ab 	movw	r2, #35243	; 0x89ab
 801361c:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8013620:	605a      	str	r2, [r3, #4]
  }  
}
 8013622:	46bd      	mov	sp, r7
 8013624:	bc80      	pop	{r7}
 8013626:	4770      	bx	lr

08013628 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8013628:	b480      	push	{r7}
 801362a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 801362c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013630:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013634:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013638:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801363c:	6912      	ldr	r2, [r2, #16]
 801363e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8013642:	611a      	str	r2, [r3, #16]
}
 8013644:	46bd      	mov	sp, r7
 8013646:	bc80      	pop	{r7}
 8013648:	4770      	bx	lr
 801364a:	bf00      	nop

0801364c <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	460b      	mov	r3, r1
 8013656:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8013658:	f04f 0300 	mov.w	r3, #0
 801365c:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 801365e:	f04f 0308 	mov.w	r3, #8
 8013662:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8013664:	78fb      	ldrb	r3, [r7, #3]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d103      	bne.n	8013672 <FLASH_EraseSector+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 801366a:	f04f 0300 	mov.w	r3, #0
 801366e:	60fb      	str	r3, [r7, #12]
 8013670:	e010      	b.n	8013694 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8013672:	78fb      	ldrb	r3, [r7, #3]
 8013674:	2b01      	cmp	r3, #1
 8013676:	d103      	bne.n	8013680 <FLASH_EraseSector+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8013678:	f44f 7380 	mov.w	r3, #256	; 0x100
 801367c:	60fb      	str	r3, [r7, #12]
 801367e:	e009      	b.n	8013694 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8013680:	78fb      	ldrb	r3, [r7, #3]
 8013682:	2b02      	cmp	r3, #2
 8013684:	d103      	bne.n	801368e <FLASH_EraseSector+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8013686:	f44f 7300 	mov.w	r3, #512	; 0x200
 801368a:	60fb      	str	r3, [r7, #12]
 801368c:	e002      	b.n	8013694 <FLASH_EraseSector+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801368e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013692:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8013694:	f000 fbf4 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013698:	4603      	mov	r3, r0
 801369a:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 801369c:	7afb      	ldrb	r3, [r7, #11]
 801369e:	2b08      	cmp	r3, #8
 80136a0:	d15b      	bne.n	801375a <FLASH_EraseSector+0x10e>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80136a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80136a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80136aa:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80136ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80136b2:	6912      	ldr	r2, [r2, #16]
 80136b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80136b8:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 80136ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80136be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80136c2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80136c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80136ca:	6912      	ldr	r2, [r2, #16]
 80136cc:	4611      	mov	r1, r2
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	430a      	orrs	r2, r1
 80136d2:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 80136d4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80136d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80136dc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80136e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80136e4:	6912      	ldr	r2, [r2, #16]
 80136e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80136ea:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80136ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80136f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80136f4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80136f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80136fc:	6912      	ldr	r2, [r2, #16]
 80136fe:	4611      	mov	r1, r2
 8013700:	687a      	ldr	r2, [r7, #4]
 8013702:	430a      	orrs	r2, r1
 8013704:	f042 0202 	orr.w	r2, r2, #2
 8013708:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 801370a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801370e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013712:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013716:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801371a:	6912      	ldr	r2, [r2, #16]
 801371c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8013720:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8013722:	f000 fbad 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013726:	4603      	mov	r3, r0
 8013728:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 801372a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801372e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013732:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013736:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801373a:	6912      	ldr	r2, [r2, #16]
 801373c:	f022 0202 	bic.w	r2, r2, #2
 8013740:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 8013742:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013746:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801374a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 801374e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013752:	6912      	ldr	r2, [r2, #16]
 8013754:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8013758:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 801375a:	7afb      	ldrb	r3, [r7, #11]
}
 801375c:	4618      	mov	r0, r3
 801375e:	f107 0710 	add.w	r7, r7, #16
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop

08013768 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af00      	add	r7, sp, #0
 801376e:	4603      	mov	r3, r0
 8013770:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8013772:	f04f 0300 	mov.w	r3, #0
 8013776:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8013778:	f04f 0308 	mov.w	r3, #8
 801377c:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 801377e:	f000 fb7f 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013782:	4603      	mov	r3, r0
 8013784:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8013786:	79fb      	ldrb	r3, [r7, #7]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d103      	bne.n	8013794 <FLASH_EraseAllSectors+0x2c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 801378c:	f04f 0300 	mov.w	r3, #0
 8013790:	60fb      	str	r3, [r7, #12]
 8013792:	e010      	b.n	80137b6 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_2)
 8013794:	79fb      	ldrb	r3, [r7, #7]
 8013796:	2b01      	cmp	r3, #1
 8013798:	d103      	bne.n	80137a2 <FLASH_EraseAllSectors+0x3a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801379a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801379e:	60fb      	str	r3, [r7, #12]
 80137a0:	e009      	b.n	80137b6 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_3)
 80137a2:	79fb      	ldrb	r3, [r7, #7]
 80137a4:	2b02      	cmp	r3, #2
 80137a6:	d103      	bne.n	80137b0 <FLASH_EraseAllSectors+0x48>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80137a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137ac:	60fb      	str	r3, [r7, #12]
 80137ae:	e002      	b.n	80137b6 <FLASH_EraseAllSectors+0x4e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80137b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80137b4:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 80137b6:	7afb      	ldrb	r3, [r7, #11]
 80137b8:	2b08      	cmp	r3, #8
 80137ba:	d140      	bne.n	801383e <FLASH_EraseAllSectors+0xd6>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 80137bc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80137c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80137c4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80137c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80137cc:	6912      	ldr	r2, [r2, #16]
 80137ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80137d2:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 80137d4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80137d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80137dc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80137e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80137e4:	6912      	ldr	r2, [r2, #16]
 80137e6:	4611      	mov	r1, r2
 80137e8:	68fa      	ldr	r2, [r7, #12]
 80137ea:	430a      	orrs	r2, r1
 80137ec:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER;
 80137ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80137f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80137f6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80137fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80137fe:	6912      	ldr	r2, [r2, #16]
 8013800:	f042 0204 	orr.w	r2, r2, #4
 8013804:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8013806:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801380a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801380e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013812:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013816:	6912      	ldr	r2, [r2, #16]
 8013818:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801381c:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 801381e:	f000 fb2f 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013822:	4603      	mov	r3, r0
 8013824:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 8013826:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801382a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801382e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013832:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013836:	6912      	ldr	r2, [r2, #16]
 8013838:	f022 0204 	bic.w	r2, r2, #4
 801383c:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 801383e:	7afb      	ldrb	r3, [r7, #11]
}
 8013840:	4618      	mov	r0, r3
 8013842:	f107 0710 	add.w	r7, r7, #16
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}
 801384a:	bf00      	nop

0801384c <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b086      	sub	sp, #24
 8013850:	af00      	add	r7, sp, #0
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8013858:	f04f 0308 	mov.w	r3, #8
 801385c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 801385e:	f000 fb0f 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013862:	4603      	mov	r3, r0
 8013864:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 8013866:	7dfb      	ldrb	r3, [r7, #23]
 8013868:	2b08      	cmp	r3, #8
 801386a:	d138      	bne.n	80138de <FLASH_ProgramDoubleWord+0x92>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 801386c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013870:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013874:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013878:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801387c:	6912      	ldr	r2, [r2, #16]
 801387e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013882:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8013884:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013888:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801388c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013890:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013894:	6912      	ldr	r2, [r2, #16]
 8013896:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801389a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 801389c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80138a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80138a4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80138a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80138ac:	6912      	ldr	r2, [r2, #16]
 80138ae:	f042 0201 	orr.w	r2, r2, #1
 80138b2:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 80138b4:	68f9      	ldr	r1, [r7, #12]
 80138b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80138ba:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80138be:	f000 fadf 	bl	8013e80 <FLASH_WaitForLastOperation>
 80138c2:	4603      	mov	r3, r0
 80138c4:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80138c6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80138ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80138ce:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80138d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80138d6:	6912      	ldr	r2, [r2, #16]
 80138d8:	f022 0201 	bic.w	r2, r2, #1
 80138dc:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 80138de:	7dfb      	ldrb	r3, [r7, #23]
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	f107 0718 	add.w	r7, r7, #24
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop

080138ec <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b084      	sub	sp, #16
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
 80138f4:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 80138f6:	f04f 0308 	mov.w	r3, #8
 80138fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80138fc:	f000 fac0 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013900:	4603      	mov	r3, r0
 8013902:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8013904:	7bfb      	ldrb	r3, [r7, #15]
 8013906:	2b08      	cmp	r3, #8
 8013908:	d136      	bne.n	8013978 <FLASH_ProgramWord+0x8c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 801390a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801390e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013912:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013916:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801391a:	6912      	ldr	r2, [r2, #16]
 801391c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013920:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8013922:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013926:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801392a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 801392e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013932:	6912      	ldr	r2, [r2, #16]
 8013934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013938:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 801393a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801393e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013942:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013946:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801394a:	6912      	ldr	r2, [r2, #16]
 801394c:	f042 0201 	orr.w	r2, r2, #1
 8013950:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	683a      	ldr	r2, [r7, #0]
 8013956:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8013958:	f000 fa92 	bl	8013e80 <FLASH_WaitForLastOperation>
 801395c:	4603      	mov	r3, r0
 801395e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8013960:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013964:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013968:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 801396c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013970:	6912      	ldr	r2, [r2, #16]
 8013972:	f022 0201 	bic.w	r2, r2, #1
 8013976:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8013978:	7bfb      	ldrb	r3, [r7, #15]
}
 801397a:	4618      	mov	r0, r3
 801397c:	f107 0710 	add.w	r7, r7, #16
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	460b      	mov	r3, r1
 801398e:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8013990:	f04f 0308 	mov.w	r3, #8
 8013994:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8013996:	f000 fa73 	bl	8013e80 <FLASH_WaitForLastOperation>
 801399a:	4603      	mov	r3, r0
 801399c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 801399e:	7bfb      	ldrb	r3, [r7, #15]
 80139a0:	2b08      	cmp	r3, #8
 80139a2:	d136      	bne.n	8013a12 <FLASH_ProgramHalfWord+0x8e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80139a4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80139a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80139ac:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80139b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80139b4:	6912      	ldr	r2, [r2, #16]
 80139b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80139ba:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80139bc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80139c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80139c4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80139c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80139cc:	6912      	ldr	r2, [r2, #16]
 80139ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80139d2:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 80139d4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80139d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80139dc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80139e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80139e4:	6912      	ldr	r2, [r2, #16]
 80139e6:	f042 0201 	orr.w	r2, r2, #1
 80139ea:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	887a      	ldrh	r2, [r7, #2]
 80139f0:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80139f2:	f000 fa45 	bl	8013e80 <FLASH_WaitForLastOperation>
 80139f6:	4603      	mov	r3, r0
 80139f8:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80139fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80139fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013a02:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013a06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013a0a:	6912      	ldr	r2, [r2, #16]
 8013a0c:	f022 0201 	bic.w	r2, r2, #1
 8013a10:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8013a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	f107 0710 	add.w	r7, r7, #16
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop

08013a20 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b084      	sub	sp, #16
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	460b      	mov	r3, r1
 8013a2a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8013a2c:	f04f 0308 	mov.w	r3, #8
 8013a30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8013a32:	f000 fa25 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013a36:	4603      	mov	r3, r0
 8013a38:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8013a3a:	7bfb      	ldrb	r3, [r7, #15]
 8013a3c:	2b08      	cmp	r3, #8
 8013a3e:	d134      	bne.n	8013aaa <FLASH_ProgramByte+0x8a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8013a40:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013a44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013a48:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013a4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013a50:	6912      	ldr	r2, [r2, #16]
 8013a52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013a56:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8013a58:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013a5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013a60:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013a64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013a68:	6912      	ldr	r2, [r2, #16]
 8013a6a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8013a6c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013a70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013a74:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013a78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013a7c:	6912      	ldr	r2, [r2, #16]
 8013a7e:	f042 0201 	orr.w	r2, r2, #1
 8013a82:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	78fa      	ldrb	r2, [r7, #3]
 8013a88:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8013a8a:	f000 f9f9 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8013a92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013a96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013a9a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013a9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013aa2:	6912      	ldr	r2, [r2, #16]
 8013aa4:	f022 0201 	bic.w	r2, r2, #1
 8013aa8:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 8013aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	f107 0710 	add.w	r7, r7, #16
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop

08013ab8 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 8013ab8:	b480      	push	{r7}
 8013aba:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8013abc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013ac0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013ac4:	695b      	ldr	r3, [r3, #20]
 8013ac6:	f003 0301 	and.w	r3, r3, #1
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d011      	beq.n	8013af4 <FLASH_OB_Unlock+0x3c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8013ad0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013ad4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013ad8:	f642 223b 	movw	r2, #10811	; 0x2a3b
 8013adc:	f6c0 0219 	movt	r2, #2073	; 0x819
 8013ae0:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8013ae2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013ae6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013aea:	f646 627f 	movw	r2, #28287	; 0x6e7f
 8013aee:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
 8013af2:	609a      	str	r2, [r3, #8]
  }  
}
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bc80      	pop	{r7}
 8013af8:	4770      	bx	lr
 8013afa:	bf00      	nop

08013afc <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8013afc:	b480      	push	{r7}
 8013afe:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8013b00:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013b08:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013b0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013b10:	6952      	ldr	r2, [r2, #20]
 8013b12:	f042 0201 	orr.w	r2, r2, #1
 8013b16:	615a      	str	r2, [r3, #20]
}
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bc80      	pop	{r7}
 8013b1c:	4770      	bx	lr
 8013b1e:	bf00      	nop

08013b20 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b084      	sub	sp, #16
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	460b      	mov	r3, r1
 8013b2a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8013b2c:	f04f 0308 	mov.w	r3, #8
 8013b30:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8013b32:	f000 f9a5 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013b36:	4603      	mov	r3, r0
 8013b38:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8013b3a:	7bfb      	ldrb	r3, [r7, #15]
 8013b3c:	2b08      	cmp	r3, #8
 8013b3e:	d124      	bne.n	8013b8a <FLASH_OB_WRPConfig+0x6a>
  { 
    if(NewState != DISABLE)
 8013b40:	78fb      	ldrb	r3, [r7, #3]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d012      	beq.n	8013b6c <FLASH_OB_WRPConfig+0x4c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8013b46:	f643 4316 	movw	r3, #15382	; 0x3c16
 8013b4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013b4e:	f643 4216 	movw	r2, #15382	; 0x3c16
 8013b52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013b56:	8812      	ldrh	r2, [r2, #0]
 8013b58:	b291      	uxth	r1, r2
 8013b5a:	687a      	ldr	r2, [r7, #4]
 8013b5c:	b292      	uxth	r2, r2
 8013b5e:	ea6f 0202 	mvn.w	r2, r2
 8013b62:	b292      	uxth	r2, r2
 8013b64:	400a      	ands	r2, r1
 8013b66:	b292      	uxth	r2, r2
 8013b68:	801a      	strh	r2, [r3, #0]
 8013b6a:	e00e      	b.n	8013b8a <FLASH_OB_WRPConfig+0x6a>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8013b6c:	f643 4316 	movw	r3, #15382	; 0x3c16
 8013b70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013b74:	f643 4216 	movw	r2, #15382	; 0x3c16
 8013b78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013b7c:	8812      	ldrh	r2, [r2, #0]
 8013b7e:	b291      	uxth	r1, r2
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	b292      	uxth	r2, r2
 8013b84:	430a      	orrs	r2, r1
 8013b86:	b292      	uxth	r2, r2
 8013b88:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8013b8a:	f107 0710 	add.w	r7, r7, #16
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop

08013b94 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b084      	sub	sp, #16
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 8013b9e:	f04f 0308 	mov.w	r3, #8
 8013ba2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 8013ba4:	f000 f96c 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8013bac:	7bfb      	ldrb	r3, [r7, #15]
 8013bae:	2b08      	cmp	r3, #8
 8013bb0:	d105      	bne.n	8013bbe <FLASH_OB_RDPConfig+0x2a>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8013bb2:	f643 4315 	movw	r3, #15381	; 0x3c15
 8013bb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013bba:	79fa      	ldrb	r2, [r7, #7]
 8013bbc:	701a      	strb	r2, [r3, #0]

  }
}
 8013bbe:	f107 0710 	add.w	r7, r7, #16
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
 8013bc6:	bf00      	nop

08013bc8 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b084      	sub	sp, #16
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	4613      	mov	r3, r2
 8013bd0:	4602      	mov	r2, r0
 8013bd2:	71fa      	strb	r2, [r7, #7]
 8013bd4:	460a      	mov	r2, r1
 8013bd6:	71ba      	strb	r2, [r7, #6]
 8013bd8:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8013bda:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8013bde:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 8013be0:	f04f 0308 	mov.w	r3, #8
 8013be4:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8013be6:	f000 f94b 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013bea:	4603      	mov	r3, r0
 8013bec:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 8013bee:	7bbb      	ldrb	r3, [r7, #14]
 8013bf0:	2b08      	cmp	r3, #8
 8013bf2:	d117      	bne.n	8013c24 <FLASH_OB_UserConfig+0x5c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8013bf4:	f643 4314 	movw	r3, #15380	; 0x3c14
 8013bf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	f003 030f 	and.w	r3, r3, #15
 8013c04:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8013c06:	f643 4314 	movw	r3, #15380	; 0x3c14
 8013c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013c0e:	79b9      	ldrb	r1, [r7, #6]
 8013c10:	7bfa      	ldrb	r2, [r7, #15]
 8013c12:	430a      	orrs	r2, r1
 8013c14:	b2d1      	uxtb	r1, r2
 8013c16:	797a      	ldrb	r2, [r7, #5]
 8013c18:	430a      	orrs	r2, r1
 8013c1a:	b2d1      	uxtb	r1, r2
 8013c1c:	79fa      	ldrb	r2, [r7, #7]
 8013c1e:	430a      	orrs	r2, r1
 8013c20:	b2d2      	uxtb	r2, r2
 8013c22:	701a      	strb	r2, [r3, #0]
  }  
}
 8013c24:	f107 0710 	add.w	r7, r7, #16
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	4603      	mov	r3, r0
 8013c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8013c36:	f643 4314 	movw	r3, #15380	; 0x3c14
 8013c3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013c3e:	f643 4214 	movw	r2, #15380	; 0x3c14
 8013c42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013c46:	7812      	ldrb	r2, [r2, #0]
 8013c48:	b2d2      	uxtb	r2, r2
 8013c4a:	f022 020c 	bic.w	r2, r2, #12
 8013c4e:	b2d2      	uxtb	r2, r2
 8013c50:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 8013c52:	f643 4314 	movw	r3, #15380	; 0x3c14
 8013c56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013c5a:	f643 4214 	movw	r2, #15380	; 0x3c14
 8013c5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013c62:	7812      	ldrb	r2, [r2, #0]
 8013c64:	b2d1      	uxtb	r1, r2
 8013c66:	79fa      	ldrb	r2, [r7, #7]
 8013c68:	430a      	orrs	r2, r1
 8013c6a:	b2d2      	uxtb	r2, r2
 8013c6c:	701a      	strb	r2, [r3, #0]

}
 8013c6e:	f107 070c 	add.w	r7, r7, #12
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bc80      	pop	{r7}
 8013c76:	4770      	bx	lr

08013c78 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 8013c7e:	f04f 0308 	mov.w	r3, #8
 8013c82:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8013c84:	f643 4314 	movw	r3, #15380	; 0x3c14
 8013c88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013c8c:	f643 4214 	movw	r2, #15380	; 0x3c14
 8013c90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013c94:	7812      	ldrb	r2, [r2, #0]
 8013c96:	b2d2      	uxtb	r2, r2
 8013c98:	f042 0202 	orr.w	r2, r2, #2
 8013c9c:	b2d2      	uxtb	r2, r2
 8013c9e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8013ca0:	f000 f8ee 	bl	8013e80 <FLASH_WaitForLastOperation>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	71fb      	strb	r3, [r7, #7]

  return status;
 8013ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	f107 0708 	add.w	r7, r7, #8
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8013cb8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013cbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013cc0:	695b      	ldr	r3, [r3, #20]
 8013cc2:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8013cc6:	b2db      	uxtb	r3, r3
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bc80      	pop	{r7}
 8013cce:	4770      	bx	lr

08013cd0 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 8013cd0:	b480      	push	{r7}
 8013cd2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8013cd4:	f643 4316 	movw	r3, #15382	; 0x3c16
 8013cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013cdc:	881b      	ldrh	r3, [r3, #0]
 8013cde:	b29b      	uxth	r3, r3
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bc80      	pop	{r7}
 8013ce6:	4770      	bx	lr

08013ce8 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b083      	sub	sp, #12
 8013cec:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 8013cee:	f04f 0300 	mov.w	r3, #0
 8013cf2:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8013cf4:	f643 4315 	movw	r3, #15381	; 0x3c15
 8013cf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	2baa      	cmp	r3, #170	; 0xaa
 8013d02:	d003      	beq.n	8013d0c <FLASH_OB_GetRDP+0x24>
  {
    readstatus = SET;
 8013d04:	f04f 0301 	mov.w	r3, #1
 8013d08:	71fb      	strb	r3, [r7, #7]
 8013d0a:	e002      	b.n	8013d12 <FLASH_OB_GetRDP+0x2a>
  }
  else
  {
    readstatus = RESET;
 8013d0c:	f04f 0300 	mov.w	r3, #0
 8013d10:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 8013d12:	79fb      	ldrb	r3, [r7, #7]
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	f107 070c 	add.w	r7, r7, #12
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bc80      	pop	{r7}
 8013d1e:	4770      	bx	lr

08013d20 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 8013d20:	b480      	push	{r7}
 8013d22:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8013d24:	f643 4314 	movw	r3, #15380	; 0x3c14
 8013d28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	f003 030c 	and.w	r3, r3, #12
 8013d34:	b2db      	uxtb	r3, r3
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bc80      	pop	{r7}
 8013d3c:	4770      	bx	lr
 8013d3e:	bf00      	nop

08013d40 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	460b      	mov	r3, r1
 8013d4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8013d4c:	78fb      	ldrb	r3, [r7, #3]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d00d      	beq.n	8013d6e <FLASH_ITConfig+0x2e>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8013d52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013d56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013d5a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013d5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013d62:	6912      	ldr	r2, [r2, #16]
 8013d64:	4611      	mov	r1, r2
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	430a      	orrs	r2, r1
 8013d6a:	611a      	str	r2, [r3, #16]
 8013d6c:	e00e      	b.n	8013d8c <FLASH_ITConfig+0x4c>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8013d6e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013d72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013d76:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8013d7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013d7e:	6912      	ldr	r2, [r2, #16]
 8013d80:	4611      	mov	r1, r2
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	ea6f 0202 	mvn.w	r2, r2
 8013d88:	400a      	ands	r2, r1
 8013d8a:	611a      	str	r2, [r3, #16]
  }
}
 8013d8c:	f107 070c 	add.w	r7, r7, #12
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bc80      	pop	{r7}
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop

08013d98 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8013d98:	b480      	push	{r7}
 8013d9a:	b085      	sub	sp, #20
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8013da0:	f04f 0300 	mov.w	r3, #0
 8013da4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8013da6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013daa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	461a      	mov	r2, r3
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4013      	ands	r3, r2
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d003      	beq.n	8013dc2 <FLASH_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8013dba:	f04f 0301 	mov.w	r3, #1
 8013dbe:	73fb      	strb	r3, [r7, #15]
 8013dc0:	e002      	b.n	8013dc8 <FLASH_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8013dc2:	f04f 0300 	mov.w	r3, #0
 8013dc6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8013dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f107 0714 	add.w	r7, r7, #20
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bc80      	pop	{r7}
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop

08013dd8 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b083      	sub	sp, #12
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8013de0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013de4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013de8:	687a      	ldr	r2, [r7, #4]
 8013dea:	60da      	str	r2, [r3, #12]
}
 8013dec:	f107 070c 	add.w	r7, r7, #12
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bc80      	pop	{r7}
 8013df4:	4770      	bx	lr
 8013df6:	bf00      	nop

08013df8 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b083      	sub	sp, #12
 8013dfc:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8013dfe:	f04f 0308 	mov.w	r3, #8
 8013e02:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8013e04:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013e08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013e0c:	68db      	ldr	r3, [r3, #12]
 8013e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d003      	beq.n	8013e1e <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
 8013e16:	f04f 0301 	mov.w	r3, #1
 8013e1a:	71fb      	strb	r3, [r7, #7]
 8013e1c:	e029      	b.n	8013e72 <FLASH_GetStatus+0x7a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8013e1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013e22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013e26:	68db      	ldr	r3, [r3, #12]
 8013e28:	f003 0310 	and.w	r3, r3, #16
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d003      	beq.n	8013e38 <FLASH_GetStatus+0x40>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8013e30:	f04f 0305 	mov.w	r3, #5
 8013e34:	71fb      	strb	r3, [r7, #7]
 8013e36:	e01c      	b.n	8013e72 <FLASH_GetStatus+0x7a>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8013e38:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013e3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013e40:	68db      	ldr	r3, [r3, #12]
 8013e42:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d003      	beq.n	8013e52 <FLASH_GetStatus+0x5a>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8013e4a:	f04f 0306 	mov.w	r3, #6
 8013e4e:	71fb      	strb	r3, [r7, #7]
 8013e50:	e00f      	b.n	8013e72 <FLASH_GetStatus+0x7a>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8013e52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013e56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013e5a:	68db      	ldr	r3, [r3, #12]
 8013e5c:	f003 0302 	and.w	r3, r3, #2
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d003      	beq.n	8013e6c <FLASH_GetStatus+0x74>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8013e64:	f04f 0307 	mov.w	r3, #7
 8013e68:	71fb      	strb	r3, [r7, #7]
 8013e6a:	e002      	b.n	8013e72 <FLASH_GetStatus+0x7a>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 8013e6c:	f04f 0308 	mov.w	r3, #8
 8013e70:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8013e72:	79fb      	ldrb	r3, [r7, #7]
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	f107 070c 	add.w	r7, r7, #12
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bc80      	pop	{r7}
 8013e7e:	4770      	bx	lr

08013e80 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8013e86:	f04f 0308 	mov.w	r3, #8
 8013e8a:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8013e8c:	f7ff ffb4 	bl	8013df8 <FLASH_GetStatus>
 8013e90:	4603      	mov	r3, r0
 8013e92:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8013e94:	e003      	b.n	8013e9e <FLASH_WaitForLastOperation+0x1e>
  {
    status = FLASH_GetStatus();
 8013e96:	f7ff ffaf 	bl	8013df8 <FLASH_GetStatus>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8013e9e:	79fb      	ldrb	r3, [r7, #7]
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	2b01      	cmp	r3, #1
 8013ea4:	d0f7      	beq.n	8013e96 <FLASH_WaitForLastOperation+0x16>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8013ea6:	79fb      	ldrb	r3, [r7, #7]
 8013ea8:	b2db      	uxtb	r3, r3
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f107 0708 	add.w	r7, r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	b083      	sub	sp, #12
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d107      	bne.n	8013ed2 <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8013ec2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	f243 01db 	movw	r1, #12507	; 0x30db
 8013ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013ed0:	e006      	b.n	8013ee0 <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 8013ed2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8013edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8013ee0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8013ee4:	687a      	ldr	r2, [r7, #4]
 8013ee6:	f102 0201 	add.w	r2, r2, #1
 8013eea:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8013ef2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8013ef6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8013f04:	f107 070c 	add.w	r7, r7, #12
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bc80      	pop	{r7}
 8013f0c:	4770      	bx	lr
 8013f0e:	bf00      	nop

08013f10 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8013f10:	b480      	push	{r7}
 8013f12:	b083      	sub	sp, #12
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8013f18:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8013f1c:	687a      	ldr	r2, [r7, #4]
 8013f1e:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8013f20:	6879      	ldr	r1, [r7, #4]
 8013f22:	6848      	ldr	r0, [r1, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8013f24:	6879      	ldr	r1, [r7, #4]
 8013f26:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8013f28:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8013f2a:	6879      	ldr	r1, [r7, #4]
 8013f2c:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8013f2e:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8013f30:	6879      	ldr	r1, [r7, #4]
 8013f32:	6909      	ldr	r1, [r1, #16]
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8013f34:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8013f36:	6879      	ldr	r1, [r7, #4]
 8013f38:	6949      	ldr	r1, [r1, #20]
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8013f3a:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8013f3c:	6879      	ldr	r1, [r7, #4]
 8013f3e:	6989      	ldr	r1, [r1, #24]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8013f40:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8013f42:	6879      	ldr	r1, [r7, #4]
 8013f44:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8013f46:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8013f48:	6879      	ldr	r1, [r7, #4]
 8013f4a:	6a09      	ldr	r1, [r1, #32]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8013f4c:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8013f4e:	6879      	ldr	r1, [r7, #4]
 8013f50:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8013f52:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8013f54:	6879      	ldr	r1, [r7, #4]
 8013f56:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8013f58:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8013f5a:	6879      	ldr	r1, [r7, #4]
 8013f5c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8013f5e:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 8013f60:	6879      	ldr	r1, [r7, #4]
 8013f62:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8013f64:	4301      	orrs	r1, r0
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8013f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	689b      	ldr	r3, [r3, #8]
 8013f6e:	2b08      	cmp	r3, #8
 8013f70:	d10d      	bne.n	8013f8e <FSMC_NORSRAMInit+0x7e>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8013f72:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	6812      	ldr	r2, [r2, #0]
 8013f7a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	6800      	ldr	r0, [r0, #0]
 8013f82:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013f86:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8013f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8013f8e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	6812      	ldr	r2, [r2, #0]
 8013f96:	f102 0201 	add.w	r2, r2, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8013f9a:	6879      	ldr	r1, [r7, #4]
 8013f9c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013f9e:	6808      	ldr	r0, [r1, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8013fa0:	6879      	ldr	r1, [r7, #4]
 8013fa2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013fa4:	6849      	ldr	r1, [r1, #4]
 8013fa6:	ea4f 1101 	mov.w	r1, r1, lsl #4
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8013faa:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8013fac:	6879      	ldr	r1, [r7, #4]
 8013fae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013fb0:	6889      	ldr	r1, [r1, #8]
 8013fb2:	ea4f 2101 	mov.w	r1, r1, lsl #8
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8013fb6:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8013fb8:	6879      	ldr	r1, [r7, #4]
 8013fba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013fbc:	68c9      	ldr	r1, [r1, #12]
 8013fbe:	ea4f 4101 	mov.w	r1, r1, lsl #16
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8013fc2:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8013fc4:	6879      	ldr	r1, [r7, #4]
 8013fc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013fc8:	6909      	ldr	r1, [r1, #16]
 8013fca:	ea4f 5101 	mov.w	r1, r1, lsl #20
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8013fce:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8013fd0:	6879      	ldr	r1, [r7, #4]
 8013fd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013fd4:	6949      	ldr	r1, [r1, #20]
 8013fd6:	ea4f 6101 	mov.w	r1, r1, lsl #24
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8013fda:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 8013fdc:	6879      	ldr	r1, [r7, #4]
 8013fde:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013fe0:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8013fe2:	4301      	orrs	r1, r0
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8013fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013ff0:	d127      	bne.n	8014042 <FSMC_NORSRAMInit+0x132>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8013ff2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8013ff6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	6812      	ldr	r2, [r2, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8013ffe:	6879      	ldr	r1, [r7, #4]
 8014000:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014002:	6808      	ldr	r0, [r1, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8014004:	6879      	ldr	r1, [r7, #4]
 8014006:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014008:	6849      	ldr	r1, [r1, #4]
 801400a:	ea4f 1101 	mov.w	r1, r1, lsl #4
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 801400e:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8014010:	6879      	ldr	r1, [r7, #4]
 8014012:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014014:	6889      	ldr	r1, [r1, #8]
 8014016:	ea4f 2101 	mov.w	r1, r1, lsl #8
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 801401a:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 801401c:	6879      	ldr	r1, [r7, #4]
 801401e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014020:	6909      	ldr	r1, [r1, #16]
 8014022:	ea4f 5101 	mov.w	r1, r1, lsl #20
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8014026:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8014028:	6879      	ldr	r1, [r7, #4]
 801402a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801402c:	6949      	ldr	r1, [r1, #20]
 801402e:	ea4f 6101 	mov.w	r1, r1, lsl #24
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8014032:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 8014034:	6879      	ldr	r1, [r7, #4]
 8014036:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014038:	6989      	ldr	r1, [r1, #24]
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 801403a:	4301      	orrs	r1, r0
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 801403c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014040:	e009      	b.n	8014056 <FSMC_NORSRAMInit+0x146>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8014042:	f44f 7382 	mov.w	r3, #260	; 0x104
 8014046:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801404a:	687a      	ldr	r2, [r7, #4]
 801404c:	6812      	ldr	r2, [r2, #0]
 801404e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8014052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8014056:	f107 070c 	add.w	r7, r7, #12
 801405a:	46bd      	mov	sp, r7
 801405c:	bc80      	pop	{r7}
 801405e:	4770      	bx	lr

08014060 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8014060:	b480      	push	{r7}
 8014062:	b083      	sub	sp, #12
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f04f 0200 	mov.w	r2, #0
 801406e:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f04f 0202 	mov.w	r2, #2
 8014076:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f04f 0200 	mov.w	r2, #0
 801407e:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f04f 0200 	mov.w	r2, #0
 8014086:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f04f 0200 	mov.w	r2, #0
 801408e:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f04f 0200 	mov.w	r2, #0
 8014096:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f04f 0200 	mov.w	r2, #0
 801409e:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f04f 0200 	mov.w	r2, #0
 80140a6:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f04f 0200 	mov.w	r2, #0
 80140ae:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80140b6:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80140be:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f04f 0200 	mov.w	r2, #0
 80140c6:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f04f 0200 	mov.w	r2, #0
 80140ce:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140d4:	f04f 020f 	mov.w	r2, #15
 80140d8:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140de:	f04f 020f 	mov.w	r2, #15
 80140e2:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140e8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80140ec:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140f2:	f04f 020f 	mov.w	r2, #15
 80140f6:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140fc:	f04f 020f 	mov.w	r2, #15
 8014100:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014106:	f04f 020f 	mov.w	r2, #15
 801410a:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014110:	f04f 0200 	mov.w	r2, #0
 8014114:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801411a:	f04f 020f 	mov.w	r2, #15
 801411e:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014124:	f04f 020f 	mov.w	r2, #15
 8014128:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801412e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8014132:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014138:	f04f 020f 	mov.w	r2, #15
 801413c:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014142:	f04f 020f 	mov.w	r2, #15
 8014146:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801414c:	f04f 020f 	mov.w	r2, #15
 8014150:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014156:	f04f 0200 	mov.w	r2, #0
 801415a:	619a      	str	r2, [r3, #24]
}
 801415c:	f107 070c 	add.w	r7, r7, #12
 8014160:	46bd      	mov	sp, r7
 8014162:	bc80      	pop	{r7}
 8014164:	4770      	bx	lr
 8014166:	bf00      	nop

08014168 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8014168:	b480      	push	{r7}
 801416a:	b083      	sub	sp, #12
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	460b      	mov	r3, r1
 8014172:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014174:	78fb      	ldrb	r3, [r7, #3]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00c      	beq.n	8014194 <FSMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 801417a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 801417e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8014182:	6879      	ldr	r1, [r7, #4]
 8014184:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014188:	f042 0101 	orr.w	r1, r2, #1
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014192:	e00f      	b.n	80141b4 <FSMC_NORSRAMCmd+0x4c>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8014194:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8014198:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 801419c:	6879      	ldr	r1, [r7, #4]
 801419e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141a2:	4619      	mov	r1, r3
 80141a4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80141a8:	f2c0 030f 	movt	r3, #15
 80141ac:	400b      	ands	r3, r1
 80141ae:	6879      	ldr	r1, [r7, #4]
 80141b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 80141b4:	f107 070c 	add.w	r7, r7, #12
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bc80      	pop	{r7}
 80141bc:	4770      	bx	lr
 80141be:	bf00      	nop

080141c0 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2b10      	cmp	r3, #16
 80141cc:	d11c      	bne.n	8014208 <FSMC_NANDDeInit+0x48>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 80141ce:	f04f 0360 	mov.w	r3, #96	; 0x60
 80141d2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80141d6:	f04f 0218 	mov.w	r2, #24
 80141da:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 80141dc:	f04f 0360 	mov.w	r3, #96	; 0x60
 80141e0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80141e4:	f04f 0240 	mov.w	r2, #64	; 0x40
 80141e8:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 80141ea:	f04f 0360 	mov.w	r3, #96	; 0x60
 80141ee:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80141f2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80141f6:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 80141f8:	f04f 0360 	mov.w	r3, #96	; 0x60
 80141fc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014200:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8014204:	60da      	str	r2, [r3, #12]
 8014206:	e01b      	b.n	8014240 <FSMC_NANDDeInit+0x80>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8014208:	f04f 0380 	mov.w	r3, #128	; 0x80
 801420c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014210:	f04f 0218 	mov.w	r2, #24
 8014214:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8014216:	f04f 0380 	mov.w	r3, #128	; 0x80
 801421a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801421e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8014222:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8014224:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014228:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801422c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8014230:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8014232:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014236:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801423a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801423e:	60da      	str	r2, [r3, #12]
  }  
}
 8014240:	f107 070c 	add.w	r7, r7, #12
 8014244:	46bd      	mov	sp, r7
 8014246:	bc80      	pop	{r7}
 8014248:	4770      	bx	lr
 801424a:	bf00      	nop

0801424c <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 801424c:	b480      	push	{r7}
 801424e:	b087      	sub	sp, #28
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8014254:	f04f 0300 	mov.w	r3, #0
 8014258:	617b      	str	r3, [r7, #20]
 801425a:	f04f 0300 	mov.w	r3, #0
 801425e:	613b      	str	r3, [r7, #16]
 8014260:	f04f 0300 	mov.w	r3, #0
 8014264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 801426e:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8014274:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 801427a:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	695b      	ldr	r3, [r3, #20]
 8014280:	ea4f 2343 	mov.w	r3, r3, lsl #9
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8014284:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	699b      	ldr	r3, [r3, #24]
 801428a:	ea4f 3343 	mov.w	r3, r3, lsl #13
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 801428e:	4313      	orrs	r3, r2
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8014290:	f043 0308 	orr.w	r3, r3, #8
 8014294:	617b      	str	r3, [r7, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	69db      	ldr	r3, [r3, #28]
 801429a:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	69db      	ldr	r3, [r3, #28]
 80142a0:	685b      	ldr	r3, [r3, #4]
 80142a2:	ea4f 2303 	mov.w	r3, r3, lsl #8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80142a6:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	69db      	ldr	r3, [r3, #28]
 80142ac:	689b      	ldr	r3, [r3, #8]
 80142ae:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80142b2:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	69db      	ldr	r3, [r3, #28]
 80142b8:	68db      	ldr	r3, [r3, #12]
 80142ba:	ea4f 6303 	mov.w	r3, r3, lsl #24
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80142be:	4313      	orrs	r3, r2
 80142c0:	613b      	str	r3, [r7, #16]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6a1b      	ldr	r3, [r3, #32]
 80142c6:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6a1b      	ldr	r3, [r3, #32]
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	ea4f 2303 	mov.w	r3, r3, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80142d2:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6a1b      	ldr	r3, [r3, #32]
 80142d8:	689b      	ldr	r3, [r3, #8]
 80142da:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80142de:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6a1b      	ldr	r3, [r3, #32]
 80142e4:	68db      	ldr	r3, [r3, #12]
 80142e6:	ea4f 6303 	mov.w	r3, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80142ea:	4313      	orrs	r3, r2
 80142ec:	60fb      	str	r3, [r7, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	2b10      	cmp	r3, #16
 80142f4:	d112      	bne.n	801431c <FSMC_NANDInit+0xd0>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 80142f6:	f04f 0360 	mov.w	r3, #96	; 0x60
 80142fa:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80142fe:	697a      	ldr	r2, [r7, #20]
 8014300:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8014302:	f04f 0360 	mov.w	r3, #96	; 0x60
 8014306:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801430a:	693a      	ldr	r2, [r7, #16]
 801430c:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 801430e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8014312:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014316:	68fa      	ldr	r2, [r7, #12]
 8014318:	60da      	str	r2, [r3, #12]
 801431a:	e011      	b.n	8014340 <FSMC_NANDInit+0xf4>
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 801431c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014320:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014324:	697a      	ldr	r2, [r7, #20]
 8014326:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8014328:	f04f 0380 	mov.w	r3, #128	; 0x80
 801432c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014330:	693a      	ldr	r2, [r7, #16]
 8014332:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8014334:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014338:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801433c:	68fa      	ldr	r2, [r7, #12]
 801433e:	60da      	str	r2, [r3, #12]
  }
}
 8014340:	f107 071c 	add.w	r7, r7, #28
 8014344:	46bd      	mov	sp, r7
 8014346:	bc80      	pop	{r7}
 8014348:	4770      	bx	lr
 801434a:	bf00      	nop

0801434c <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f04f 0210 	mov.w	r2, #16
 801435a:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f04f 0200 	mov.w	r2, #0
 8014362:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f04f 0200 	mov.w	r2, #0
 801436a:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f04f 0200 	mov.w	r2, #0
 8014372:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f04f 0200 	mov.w	r2, #0
 801437a:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f04f 0200 	mov.w	r2, #0
 8014382:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f04f 0200 	mov.w	r2, #0
 801438a:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	69db      	ldr	r3, [r3, #28]
 8014390:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8014394:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	69db      	ldr	r3, [r3, #28]
 801439a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 801439e:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	69db      	ldr	r3, [r3, #28]
 80143a4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80143a8:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	69db      	ldr	r3, [r3, #28]
 80143ae:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80143b2:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	6a1b      	ldr	r3, [r3, #32]
 80143b8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80143bc:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	6a1b      	ldr	r3, [r3, #32]
 80143c2:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80143c6:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	6a1b      	ldr	r3, [r3, #32]
 80143cc:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80143d0:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6a1b      	ldr	r3, [r3, #32]
 80143d6:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80143da:	60da      	str	r2, [r3, #12]
}
 80143dc:	f107 070c 	add.w	r7, r7, #12
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bc80      	pop	{r7}
 80143e4:	4770      	bx	lr
 80143e6:	bf00      	nop

080143e8 <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 80143e8:	b480      	push	{r7}
 80143ea:	b083      	sub	sp, #12
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	460b      	mov	r3, r1
 80143f2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80143f4:	78fb      	ldrb	r3, [r7, #3]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d01c      	beq.n	8014434 <FSMC_NANDCmd+0x4c>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2b10      	cmp	r3, #16
 80143fe:	d10c      	bne.n	801441a <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8014400:	f04f 0360 	mov.w	r3, #96	; 0x60
 8014404:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014408:	f04f 0260 	mov.w	r2, #96	; 0x60
 801440c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014410:	6812      	ldr	r2, [r2, #0]
 8014412:	f042 0204 	orr.w	r2, r2, #4
 8014416:	601a      	str	r2, [r3, #0]
 8014418:	e030      	b.n	801447c <FSMC_NANDCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 801441a:	f04f 0380 	mov.w	r3, #128	; 0x80
 801441e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014422:	f04f 0280 	mov.w	r2, #128	; 0x80
 8014426:	f2ca 0200 	movt	r2, #40960	; 0xa000
 801442a:	6812      	ldr	r2, [r2, #0]
 801442c:	f042 0204 	orr.w	r2, r2, #4
 8014430:	601a      	str	r2, [r3, #0]
 8014432:	e023      	b.n	801447c <FSMC_NANDCmd+0x94>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b10      	cmp	r3, #16
 8014438:	d110      	bne.n	801445c <FSMC_NANDCmd+0x74>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 801443a:	f04f 0260 	mov.w	r2, #96	; 0x60
 801443e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014442:	f04f 0360 	mov.w	r3, #96	; 0x60
 8014446:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4619      	mov	r1, r3
 801444e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8014452:	f2c0 030f 	movt	r3, #15
 8014456:	400b      	ands	r3, r1
 8014458:	6013      	str	r3, [r2, #0]
 801445a:	e00f      	b.n	801447c <FSMC_NANDCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 801445c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8014460:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014464:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014468:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	4619      	mov	r1, r3
 8014470:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8014474:	f2c0 030f 	movt	r3, #15
 8014478:	400b      	ands	r3, r1
 801447a:	6013      	str	r3, [r2, #0]
    }
  }
}
 801447c:	f107 070c 	add.w	r7, r7, #12
 8014480:	46bd      	mov	sp, r7
 8014482:	bc80      	pop	{r7}
 8014484:	4770      	bx	lr
 8014486:	bf00      	nop

08014488 <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8014488:	b480      	push	{r7}
 801448a:	b083      	sub	sp, #12
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	460b      	mov	r3, r1
 8014492:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014494:	78fb      	ldrb	r3, [r7, #3]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d01c      	beq.n	80144d4 <FSMC_NANDECCCmd+0x4c>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2b10      	cmp	r3, #16
 801449e:	d10c      	bne.n	80144ba <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 80144a0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80144a4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80144a8:	f04f 0260 	mov.w	r2, #96	; 0x60
 80144ac:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80144b0:	6812      	ldr	r2, [r2, #0]
 80144b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80144b6:	601a      	str	r2, [r3, #0]
 80144b8:	e030      	b.n	801451c <FSMC_NANDECCCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 80144ba:	f04f 0380 	mov.w	r3, #128	; 0x80
 80144be:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80144c2:	f04f 0280 	mov.w	r2, #128	; 0x80
 80144c6:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80144ca:	6812      	ldr	r2, [r2, #0]
 80144cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80144d0:	601a      	str	r2, [r3, #0]
 80144d2:	e023      	b.n	801451c <FSMC_NANDECCCmd+0x94>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2b10      	cmp	r3, #16
 80144d8:	d110      	bne.n	80144fc <FSMC_NANDECCCmd+0x74>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 80144da:	f04f 0260 	mov.w	r2, #96	; 0x60
 80144de:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80144e2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80144e6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	4619      	mov	r1, r3
 80144ee:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80144f2:	f2c0 030f 	movt	r3, #15
 80144f6:	400b      	ands	r3, r1
 80144f8:	6013      	str	r3, [r2, #0]
 80144fa:	e00f      	b.n	801451c <FSMC_NANDECCCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 80144fc:	f04f 0280 	mov.w	r2, #128	; 0x80
 8014500:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014504:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014508:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	4619      	mov	r1, r3
 8014510:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8014514:	f2c0 030f 	movt	r3, #15
 8014518:	400b      	ands	r3, r1
 801451a:	6013      	str	r3, [r2, #0]
    }
  }
}
 801451c:	f107 070c 	add.w	r7, r7, #12
 8014520:	46bd      	mov	sp, r7
 8014522:	bc80      	pop	{r7}
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop

08014528 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 8014528:	b480      	push	{r7}
 801452a:	b085      	sub	sp, #20
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8014530:	f04f 0300 	mov.w	r3, #0
 8014534:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2b10      	cmp	r3, #16
 801453a:	d106      	bne.n	801454a <FSMC_GetECC+0x22>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 801453c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8014540:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014544:	695b      	ldr	r3, [r3, #20]
 8014546:	60fb      	str	r3, [r7, #12]
 8014548:	e005      	b.n	8014556 <FSMC_GetECC+0x2e>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 801454a:	f04f 0380 	mov.w	r3, #128	; 0x80
 801454e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014552:	695b      	ldr	r3, [r3, #20]
 8014554:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8014556:	68fb      	ldr	r3, [r7, #12]
}
 8014558:	4618      	mov	r0, r3
 801455a:	f107 0714 	add.w	r7, r7, #20
 801455e:	46bd      	mov	sp, r7
 8014560:	bc80      	pop	{r7}
 8014562:	4770      	bx	lr

08014564 <FSMC_PCCARDDeInit>:
  * @brief  Deinitializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 8014564:	b480      	push	{r7}
 8014566:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8014568:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801456c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014570:	f04f 0218 	mov.w	r2, #24
 8014574:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8014576:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801457a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801457e:	f04f 0200 	mov.w	r2, #0
 8014582:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8014584:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014588:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801458c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8014590:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8014592:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014596:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801459a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801459e:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 80145a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80145a4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80145a8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80145ac:	611a      	str	r2, [r3, #16]
}
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bc80      	pop	{r7}
 80145b2:	4770      	bx	lr

080145b4 <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 80145b4:	b480      	push	{r7}
 80145b6:	b083      	sub	sp, #12
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 80145bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80145c0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	6811      	ldr	r1, [r2, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 80145c8:	687a      	ldr	r2, [r7, #4]
 80145ca:	6852      	ldr	r2, [r2, #4]
 80145cc:	ea4f 2242 	mov.w	r2, r2, lsl #9
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 80145d0:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	6892      	ldr	r2, [r2, #8]
 80145d6:	ea4f 3242 	mov.w	r2, r2, lsl #13
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 80145da:	430a      	orrs	r2, r1
 80145dc:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 80145e0:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80145e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80145e6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80145ea:	687a      	ldr	r2, [r7, #4]
 80145ec:	68d2      	ldr	r2, [r2, #12]
 80145ee:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80145f0:	687a      	ldr	r2, [r7, #4]
 80145f2:	68d2      	ldr	r2, [r2, #12]
 80145f4:	6852      	ldr	r2, [r2, #4]
 80145f6:	ea4f 2202 	mov.w	r2, r2, lsl #8
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80145fa:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80145fc:	687a      	ldr	r2, [r7, #4]
 80145fe:	68d2      	ldr	r2, [r2, #12]
 8014600:	6892      	ldr	r2, [r2, #8]
 8014602:	ea4f 4202 	mov.w	r2, r2, lsl #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8014606:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8014608:	687a      	ldr	r2, [r7, #4]
 801460a:	68d2      	ldr	r2, [r2, #12]
 801460c:	68d2      	ldr	r2, [r2, #12]
 801460e:	ea4f 6202 	mov.w	r2, r2, lsl #24
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8014612:	430a      	orrs	r2, r1
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8014614:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8014616:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801461a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801461e:	687a      	ldr	r2, [r7, #4]
 8014620:	6912      	ldr	r2, [r2, #16]
 8014622:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	6912      	ldr	r2, [r2, #16]
 8014628:	6852      	ldr	r2, [r2, #4]
 801462a:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 801462e:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	6912      	ldr	r2, [r2, #16]
 8014634:	6892      	ldr	r2, [r2, #8]
 8014636:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 801463a:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 801463c:	687a      	ldr	r2, [r7, #4]
 801463e:	6912      	ldr	r2, [r2, #16]
 8014640:	68d2      	ldr	r2, [r2, #12]
 8014642:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8014646:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8014648:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 801464a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801464e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014652:	687a      	ldr	r2, [r7, #4]
 8014654:	6952      	ldr	r2, [r2, #20]
 8014656:	6811      	ldr	r1, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8014658:	687a      	ldr	r2, [r7, #4]
 801465a:	6952      	ldr	r2, [r2, #20]
 801465c:	6852      	ldr	r2, [r2, #4]
 801465e:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8014662:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8014664:	687a      	ldr	r2, [r7, #4]
 8014666:	6952      	ldr	r2, [r2, #20]
 8014668:	6892      	ldr	r2, [r2, #8]
 801466a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 801466e:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8014670:	687a      	ldr	r2, [r7, #4]
 8014672:	6952      	ldr	r2, [r2, #20]
 8014674:	68d2      	ldr	r2, [r2, #12]
 8014676:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 801467a:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 801467c:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 801467e:	f107 070c 	add.w	r7, r7, #12
 8014682:	46bd      	mov	sp, r7
 8014684:	bc80      	pop	{r7}
 8014686:	4770      	bx	lr

08014688 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8014688:	b480      	push	{r7}
 801468a:	b083      	sub	sp, #12
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f04f 0200 	mov.w	r2, #0
 8014696:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f04f 0200 	mov.w	r2, #0
 801469e:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f04f 0200 	mov.w	r2, #0
 80146a6:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80146b0:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80146ba:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80146c4:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	68db      	ldr	r3, [r3, #12]
 80146ca:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80146ce:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	691b      	ldr	r3, [r3, #16]
 80146d4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80146d8:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	691b      	ldr	r3, [r3, #16]
 80146de:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80146e2:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	691b      	ldr	r3, [r3, #16]
 80146e8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80146ec:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	691b      	ldr	r3, [r3, #16]
 80146f2:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80146f6:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	695b      	ldr	r3, [r3, #20]
 80146fc:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8014700:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	695b      	ldr	r3, [r3, #20]
 8014706:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 801470a:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	695b      	ldr	r3, [r3, #20]
 8014710:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8014714:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	695b      	ldr	r3, [r3, #20]
 801471a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 801471e:	60da      	str	r2, [r3, #12]
}
 8014720:	f107 070c 	add.w	r7, r7, #12
 8014724:	46bd      	mov	sp, r7
 8014726:	bc80      	pop	{r7}
 8014728:	4770      	bx	lr
 801472a:	bf00      	nop

0801472c <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 801472c:	b480      	push	{r7}
 801472e:	b083      	sub	sp, #12
 8014730:	af00      	add	r7, sp, #0
 8014732:	4603      	mov	r3, r0
 8014734:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014736:	79fb      	ldrb	r3, [r7, #7]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00c      	beq.n	8014756 <FSMC_PCCARDCmd+0x2a>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 801473c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014740:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014744:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8014748:	f2ca 0200 	movt	r2, #40960	; 0xa000
 801474c:	6812      	ldr	r2, [r2, #0]
 801474e:	f042 0204 	orr.w	r2, r2, #4
 8014752:	601a      	str	r2, [r3, #0]
 8014754:	e00f      	b.n	8014776 <FSMC_PCCARDCmd+0x4a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8014756:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 801475a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 801475e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014762:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	4619      	mov	r1, r3
 801476a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 801476e:	f2c0 030f 	movt	r3, #15
 8014772:	400b      	ands	r3, r1
 8014774:	6013      	str	r3, [r2, #0]
  }
}
 8014776:	f107 070c 	add.w	r7, r7, #12
 801477a:	46bd      	mov	sp, r7
 801477c:	bc80      	pop	{r7}
 801477e:	4770      	bx	lr

08014780 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 8014780:	b480      	push	{r7}
 8014782:	b085      	sub	sp, #20
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	4613      	mov	r3, r2
 801478c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801478e:	79fb      	ldrb	r3, [r7, #7]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d030      	beq.n	80147f6 <FSMC_ITConfig+0x76>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2b10      	cmp	r3, #16
 8014798:	d10d      	bne.n	80147b6 <FSMC_ITConfig+0x36>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 801479a:	f04f 0360 	mov.w	r3, #96	; 0x60
 801479e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80147a2:	f04f 0260 	mov.w	r2, #96	; 0x60
 80147a6:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80147aa:	6852      	ldr	r2, [r2, #4]
 80147ac:	4611      	mov	r1, r2
 80147ae:	68ba      	ldr	r2, [r7, #8]
 80147b0:	430a      	orrs	r2, r1
 80147b2:	605a      	str	r2, [r3, #4]
 80147b4:	e055      	b.n	8014862 <FSMC_ITConfig+0xe2>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147bc:	d10d      	bne.n	80147da <FSMC_ITConfig+0x5a>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 80147be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80147c2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80147c6:	f04f 0280 	mov.w	r2, #128	; 0x80
 80147ca:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80147ce:	6852      	ldr	r2, [r2, #4]
 80147d0:	4611      	mov	r1, r2
 80147d2:	68ba      	ldr	r2, [r7, #8]
 80147d4:	430a      	orrs	r2, r1
 80147d6:	605a      	str	r2, [r3, #4]
 80147d8:	e043      	b.n	8014862 <FSMC_ITConfig+0xe2>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 80147da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80147de:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80147e2:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 80147e6:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80147ea:	6852      	ldr	r2, [r2, #4]
 80147ec:	4611      	mov	r1, r2
 80147ee:	68ba      	ldr	r2, [r7, #8]
 80147f0:	430a      	orrs	r2, r1
 80147f2:	605a      	str	r2, [r3, #4]
 80147f4:	e035      	b.n	8014862 <FSMC_ITConfig+0xe2>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2b10      	cmp	r3, #16
 80147fa:	d10f      	bne.n	801481c <FSMC_ITConfig+0x9c>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 80147fc:	f04f 0360 	mov.w	r3, #96	; 0x60
 8014800:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014804:	f04f 0260 	mov.w	r2, #96	; 0x60
 8014808:	f2ca 0200 	movt	r2, #40960	; 0xa000
 801480c:	6852      	ldr	r2, [r2, #4]
 801480e:	4611      	mov	r1, r2
 8014810:	68ba      	ldr	r2, [r7, #8]
 8014812:	ea6f 0202 	mvn.w	r2, r2
 8014816:	400a      	ands	r2, r1
 8014818:	605a      	str	r2, [r3, #4]
 801481a:	e022      	b.n	8014862 <FSMC_ITConfig+0xe2>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014822:	d10f      	bne.n	8014844 <FSMC_ITConfig+0xc4>
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8014824:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014828:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801482c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8014830:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014834:	6852      	ldr	r2, [r2, #4]
 8014836:	4611      	mov	r1, r2
 8014838:	68ba      	ldr	r2, [r7, #8]
 801483a:	ea6f 0202 	mvn.w	r2, r2
 801483e:	400a      	ands	r2, r1
 8014840:	605a      	str	r2, [r3, #4]
 8014842:	e00e      	b.n	8014862 <FSMC_ITConfig+0xe2>
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8014844:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014848:	f2ca 0300 	movt	r3, #40960	; 0xa000
 801484c:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8014850:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014854:	6852      	ldr	r2, [r2, #4]
 8014856:	4611      	mov	r1, r2
 8014858:	68ba      	ldr	r2, [r7, #8]
 801485a:	ea6f 0202 	mvn.w	r2, r2
 801485e:	400a      	ands	r2, r1
 8014860:	605a      	str	r2, [r3, #4]
    }
  }
}
 8014862:	f107 0714 	add.w	r7, r7, #20
 8014866:	46bd      	mov	sp, r7
 8014868:	bc80      	pop	{r7}
 801486a:	4770      	bx	lr

0801486c <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 801486c:	b480      	push	{r7}
 801486e:	b085      	sub	sp, #20
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8014876:	f04f 0300 	mov.w	r3, #0
 801487a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 801487c:	f04f 0300 	mov.w	r3, #0
 8014880:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2b10      	cmp	r3, #16
 8014886:	d106      	bne.n	8014896 <FSMC_GetFlagStatus+0x2a>
  {
    tmpsr = FSMC_Bank2->SR2;
 8014888:	f04f 0360 	mov.w	r3, #96	; 0x60
 801488c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	60bb      	str	r3, [r7, #8]
 8014894:	e010      	b.n	80148b8 <FSMC_GetFlagStatus+0x4c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801489c:	d106      	bne.n	80148ac <FSMC_GetFlagStatus+0x40>
  {
    tmpsr = FSMC_Bank3->SR3;
 801489e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80148a2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	60bb      	str	r3, [r7, #8]
 80148aa:	e005      	b.n	80148b8 <FSMC_GetFlagStatus+0x4c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80148ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80148b0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80148b4:	685b      	ldr	r3, [r3, #4]
 80148b6:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 80148b8:	68ba      	ldr	r2, [r7, #8]
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	4013      	ands	r3, r2
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d003      	beq.n	80148ca <FSMC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80148c2:	f04f 0301 	mov.w	r3, #1
 80148c6:	73fb      	strb	r3, [r7, #15]
 80148c8:	e002      	b.n	80148d0 <FSMC_GetFlagStatus+0x64>
  }
  else
  {
    bitstatus = RESET;
 80148ca:	f04f 0300 	mov.w	r3, #0
 80148ce:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80148d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	f107 0714 	add.w	r7, r7, #20
 80148d8:	46bd      	mov	sp, r7
 80148da:	bc80      	pop	{r7}
 80148dc:	4770      	bx	lr
 80148de:	bf00      	nop

080148e0 <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 80148e0:	b480      	push	{r7}
 80148e2:	b083      	sub	sp, #12
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2b10      	cmp	r3, #16
 80148ee:	d10f      	bne.n	8014910 <FSMC_ClearFlag+0x30>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 80148f0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80148f4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80148f8:	f04f 0260 	mov.w	r2, #96	; 0x60
 80148fc:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014900:	6852      	ldr	r2, [r2, #4]
 8014902:	4611      	mov	r1, r2
 8014904:	683a      	ldr	r2, [r7, #0]
 8014906:	ea6f 0202 	mvn.w	r2, r2
 801490a:	400a      	ands	r2, r1
 801490c:	605a      	str	r2, [r3, #4]
 801490e:	e022      	b.n	8014956 <FSMC_ClearFlag+0x76>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014916:	d10f      	bne.n	8014938 <FSMC_ClearFlag+0x58>
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8014918:	f04f 0380 	mov.w	r3, #128	; 0x80
 801491c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014920:	f04f 0280 	mov.w	r2, #128	; 0x80
 8014924:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014928:	6852      	ldr	r2, [r2, #4]
 801492a:	4611      	mov	r1, r2
 801492c:	683a      	ldr	r2, [r7, #0]
 801492e:	ea6f 0202 	mvn.w	r2, r2
 8014932:	400a      	ands	r2, r1
 8014934:	605a      	str	r2, [r3, #4]
 8014936:	e00e      	b.n	8014956 <FSMC_ClearFlag+0x76>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8014938:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801493c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014940:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8014944:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014948:	6852      	ldr	r2, [r2, #4]
 801494a:	4611      	mov	r1, r2
 801494c:	683a      	ldr	r2, [r7, #0]
 801494e:	ea6f 0202 	mvn.w	r2, r2
 8014952:	400a      	ands	r2, r1
 8014954:	605a      	str	r2, [r3, #4]
  }
}
 8014956:	f107 070c 	add.w	r7, r7, #12
 801495a:	46bd      	mov	sp, r7
 801495c:	bc80      	pop	{r7}
 801495e:	4770      	bx	lr

08014960 <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 8014960:	b480      	push	{r7}
 8014962:	b087      	sub	sp, #28
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 801496a:	f04f 0300 	mov.w	r3, #0
 801496e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 8014970:	f04f 0300 	mov.w	r3, #0
 8014974:	613b      	str	r3, [r7, #16]
 8014976:	f04f 0300 	mov.w	r3, #0
 801497a:	60fb      	str	r3, [r7, #12]
 801497c:	f04f 0300 	mov.w	r3, #0
 8014980:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	2b10      	cmp	r3, #16
 8014986:	d106      	bne.n	8014996 <FSMC_GetITStatus+0x36>
  {
    tmpsr = FSMC_Bank2->SR2;
 8014988:	f04f 0360 	mov.w	r3, #96	; 0x60
 801498c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	613b      	str	r3, [r7, #16]
 8014994:	e010      	b.n	80149b8 <FSMC_GetITStatus+0x58>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801499c:	d106      	bne.n	80149ac <FSMC_GetITStatus+0x4c>
  {
    tmpsr = FSMC_Bank3->SR3;
 801499e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80149a2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	613b      	str	r3, [r7, #16]
 80149aa:	e005      	b.n	80149b8 <FSMC_GetITStatus+0x58>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80149ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80149b0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80149b4:	685b      	ldr	r3, [r3, #4]
 80149b6:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 80149b8:	693a      	ldr	r2, [r7, #16]
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	4013      	ands	r3, r2
 80149be:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	4013      	ands	r3, r2
 80149ca:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d006      	beq.n	80149e0 <FSMC_GetITStatus+0x80>
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d003      	beq.n	80149e0 <FSMC_GetITStatus+0x80>
  {
    bitstatus = SET;
 80149d8:	f04f 0301 	mov.w	r3, #1
 80149dc:	75fb      	strb	r3, [r7, #23]
 80149de:	e002      	b.n	80149e6 <FSMC_GetITStatus+0x86>
  }
  else
  {
    bitstatus = RESET;
 80149e0:	f04f 0300 	mov.w	r3, #0
 80149e4:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 80149e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	f107 071c 	add.w	r7, r7, #28
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bc80      	pop	{r7}
 80149f2:	4770      	bx	lr

080149f4 <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 80149f4:	b480      	push	{r7}
 80149f6:	b083      	sub	sp, #12
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2b10      	cmp	r3, #16
 8014a02:	d111      	bne.n	8014a28 <FSMC_ClearITPendingBit+0x34>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 8014a04:	f04f 0360 	mov.w	r3, #96	; 0x60
 8014a08:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014a0c:	f04f 0260 	mov.w	r2, #96	; 0x60
 8014a10:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014a14:	6852      	ldr	r2, [r2, #4]
 8014a16:	4611      	mov	r1, r2
 8014a18:	683a      	ldr	r2, [r7, #0]
 8014a1a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8014a1e:	ea6f 0202 	mvn.w	r2, r2
 8014a22:	400a      	ands	r2, r1
 8014a24:	605a      	str	r2, [r3, #4]
 8014a26:	e026      	b.n	8014a76 <FSMC_ClearITPendingBit+0x82>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a2e:	d111      	bne.n	8014a54 <FSMC_ClearITPendingBit+0x60>
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8014a30:	f04f 0380 	mov.w	r3, #128	; 0x80
 8014a34:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014a38:	f04f 0280 	mov.w	r2, #128	; 0x80
 8014a3c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014a40:	6852      	ldr	r2, [r2, #4]
 8014a42:	4611      	mov	r1, r2
 8014a44:	683a      	ldr	r2, [r7, #0]
 8014a46:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8014a4a:	ea6f 0202 	mvn.w	r2, r2
 8014a4e:	400a      	ands	r2, r1
 8014a50:	605a      	str	r2, [r3, #4]
 8014a52:	e010      	b.n	8014a76 <FSMC_ClearITPendingBit+0x82>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8014a54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014a58:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8014a5c:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8014a60:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8014a64:	6852      	ldr	r2, [r2, #4]
 8014a66:	4611      	mov	r1, r2
 8014a68:	683a      	ldr	r2, [r7, #0]
 8014a6a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8014a6e:	ea6f 0202 	mvn.w	r2, r2
 8014a72:	400a      	ands	r2, r1
 8014a74:	605a      	str	r2, [r3, #4]
  }
}
 8014a76:	f107 070c 	add.w	r7, r7, #12
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bc80      	pop	{r7}
 8014a7e:	4770      	bx	lr

08014a80 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8014a88:	687a      	ldr	r2, [r7, #4]
 8014a8a:	f04f 0300 	mov.w	r3, #0
 8014a8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d10c      	bne.n	8014ab0 <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8014a96:	f04f 0001 	mov.w	r0, #1
 8014a9a:	f04f 0101 	mov.w	r1, #1
 8014a9e:	f002 fbd9 	bl	8017254 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8014aa2:	f04f 0001 	mov.w	r0, #1
 8014aa6:	f04f 0100 	mov.w	r1, #0
 8014aaa:	f002 fbd3 	bl	8017254 <RCC_AHB1PeriphResetCmd>
 8014aae:	e09e      	b.n	8014bee <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 8014ab0:	687a      	ldr	r2, [r7, #4]
 8014ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d10c      	bne.n	8014ad8 <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8014abe:	f04f 0002 	mov.w	r0, #2
 8014ac2:	f04f 0101 	mov.w	r1, #1
 8014ac6:	f002 fbc5 	bl	8017254 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8014aca:	f04f 0002 	mov.w	r0, #2
 8014ace:	f04f 0100 	mov.w	r1, #0
 8014ad2:	f002 fbbf 	bl	8017254 <RCC_AHB1PeriphResetCmd>
 8014ad6:	e08a      	b.n	8014bee <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ade:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d10c      	bne.n	8014b00 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8014ae6:	f04f 0004 	mov.w	r0, #4
 8014aea:	f04f 0101 	mov.w	r1, #1
 8014aee:	f002 fbb1 	bl	8017254 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8014af2:	f04f 0004 	mov.w	r0, #4
 8014af6:	f04f 0100 	mov.w	r1, #0
 8014afa:	f002 fbab 	bl	8017254 <RCC_AHB1PeriphResetCmd>
 8014afe:	e076      	b.n	8014bee <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 8014b00:	687a      	ldr	r2, [r7, #4]
 8014b02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8014b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	d10c      	bne.n	8014b28 <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8014b0e:	f04f 0008 	mov.w	r0, #8
 8014b12:	f04f 0101 	mov.w	r1, #1
 8014b16:	f002 fb9d 	bl	8017254 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8014b1a:	f04f 0008 	mov.w	r0, #8
 8014b1e:	f04f 0100 	mov.w	r1, #0
 8014b22:	f002 fb97 	bl	8017254 <RCC_AHB1PeriphResetCmd>
 8014b26:	e062      	b.n	8014bee <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 8014b28:	687a      	ldr	r2, [r7, #4]
 8014b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014b2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d10c      	bne.n	8014b50 <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8014b36:	f04f 0010 	mov.w	r0, #16
 8014b3a:	f04f 0101 	mov.w	r1, #1
 8014b3e:	f002 fb89 	bl	8017254 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8014b42:	f04f 0010 	mov.w	r0, #16
 8014b46:	f04f 0100 	mov.w	r1, #0
 8014b4a:	f002 fb83 	bl	8017254 <RCC_AHB1PeriphResetCmd>
 8014b4e:	e04e      	b.n	8014bee <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8014b50:	687a      	ldr	r2, [r7, #4]
 8014b52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8014b56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	d10c      	bne.n	8014b78 <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8014b5e:	f04f 0020 	mov.w	r0, #32
 8014b62:	f04f 0101 	mov.w	r1, #1
 8014b66:	f002 fb75 	bl	8017254 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8014b6a:	f04f 0020 	mov.w	r0, #32
 8014b6e:	f04f 0100 	mov.w	r1, #0
 8014b72:	f002 fb6f 	bl	8017254 <RCC_AHB1PeriphResetCmd>
 8014b76:	e03a      	b.n	8014bee <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014b7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d10c      	bne.n	8014ba0 <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8014b86:	f04f 0040 	mov.w	r0, #64	; 0x40
 8014b8a:	f04f 0101 	mov.w	r1, #1
 8014b8e:	f002 fb61 	bl	8017254 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8014b92:	f04f 0040 	mov.w	r0, #64	; 0x40
 8014b96:	f04f 0100 	mov.w	r1, #0
 8014b9a:	f002 fb5b 	bl	8017254 <RCC_AHB1PeriphResetCmd>
 8014b9e:	e026      	b.n	8014bee <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 8014ba0:	687a      	ldr	r2, [r7, #4]
 8014ba2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014ba6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014baa:	429a      	cmp	r2, r3
 8014bac:	d10c      	bne.n	8014bc8 <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8014bae:	f04f 0080 	mov.w	r0, #128	; 0x80
 8014bb2:	f04f 0101 	mov.w	r1, #1
 8014bb6:	f002 fb4d 	bl	8017254 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8014bba:	f04f 0080 	mov.w	r0, #128	; 0x80
 8014bbe:	f04f 0100 	mov.w	r1, #0
 8014bc2:	f002 fb47 	bl	8017254 <RCC_AHB1PeriphResetCmd>
 8014bc6:	e012      	b.n	8014bee <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014bce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d10b      	bne.n	8014bee <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8014bd6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014bda:	f04f 0101 	mov.w	r1, #1
 8014bde:	f002 fb39 	bl	8017254 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8014be2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014be6:	f04f 0100 	mov.w	r1, #0
 8014bea:	f002 fb33 	bl	8017254 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8014bee:	f107 0708 	add.w	r7, r7, #8
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop

08014bf8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	b087      	sub	sp, #28
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8014c02:	f04f 0300 	mov.w	r3, #0
 8014c06:	617b      	str	r3, [r7, #20]
 8014c08:	f04f 0300 	mov.w	r3, #0
 8014c0c:	613b      	str	r3, [r7, #16]
 8014c0e:	f04f 0300 	mov.w	r3, #0
 8014c12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8014c14:	f04f 0300 	mov.w	r3, #0
 8014c18:	617b      	str	r3, [r7, #20]
 8014c1a:	e08e      	b.n	8014d3a <GPIO_Init+0x142>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	f04f 0201 	mov.w	r2, #1
 8014c22:	fa02 f303 	lsl.w	r3, r2, r3
 8014c26:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	681a      	ldr	r2, [r3, #0]
 8014c2c:	693b      	ldr	r3, [r7, #16]
 8014c2e:	4013      	ands	r3, r2
 8014c30:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8014c32:	68fa      	ldr	r2, [r7, #12]
 8014c34:	693b      	ldr	r3, [r7, #16]
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d17b      	bne.n	8014d32 <GPIO_Init+0x13a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	461a      	mov	r2, r3
 8014c40:	697b      	ldr	r3, [r7, #20]
 8014c42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014c46:	f04f 0103 	mov.w	r1, #3
 8014c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8014c4e:	ea6f 0303 	mvn.w	r3, r3
 8014c52:	401a      	ands	r2, r3
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	791b      	ldrb	r3, [r3, #4]
 8014c62:	4619      	mov	r1, r3
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8014c6e:	431a      	orrs	r2, r3
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	791b      	ldrb	r3, [r3, #4]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d003      	beq.n	8014c84 <GPIO_Init+0x8c>
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	791b      	ldrb	r3, [r3, #4]
 8014c80:	2b02      	cmp	r3, #2
 8014c82:	d138      	bne.n	8014cf6 <GPIO_Init+0xfe>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	689b      	ldr	r3, [r3, #8]
 8014c88:	461a      	mov	r2, r3
 8014c8a:	697b      	ldr	r3, [r7, #20]
 8014c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014c90:	f04f 0103 	mov.w	r1, #3
 8014c94:	fa01 f303 	lsl.w	r3, r1, r3
 8014c98:	ea6f 0303 	mvn.w	r3, r3
 8014c9c:	401a      	ands	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	689b      	ldr	r3, [r3, #8]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	795b      	ldrb	r3, [r3, #5]
 8014cac:	4619      	mov	r1, r3
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8014cb8:	431a      	orrs	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	697b      	ldr	r3, [r7, #20]
 8014cc6:	b29b      	uxth	r3, r3
 8014cc8:	f04f 0101 	mov.w	r1, #1
 8014ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8014cd0:	ea6f 0303 	mvn.w	r3, r3
 8014cd4:	401a      	ands	r2, r3
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	461a      	mov	r2, r3
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	799b      	ldrb	r3, [r3, #6]
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	b29b      	uxth	r3, r3
 8014cea:	fa01 f303 	lsl.w	r3, r1, r3
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	431a      	orrs	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	b29b      	uxth	r3, r3
 8014d00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014d04:	f04f 0103 	mov.w	r1, #3
 8014d08:	fa01 f303 	lsl.w	r3, r1, r3
 8014d0c:	ea6f 0303 	mvn.w	r3, r3
 8014d10:	401a      	ands	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	79db      	ldrb	r3, [r3, #7]
 8014d20:	4619      	mov	r1, r3
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014d28:	fa01 f303 	lsl.w	r3, r1, r3
 8014d2c:	431a      	orrs	r2, r3
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	f103 0301 	add.w	r3, r3, #1
 8014d38:	617b      	str	r3, [r7, #20]
 8014d3a:	697b      	ldr	r3, [r7, #20]
 8014d3c:	2b0f      	cmp	r3, #15
 8014d3e:	f67f af6d 	bls.w	8014c1c <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8014d42:	f107 071c 	add.w	r7, r7, #28
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bc80      	pop	{r7}
 8014d4a:	4770      	bx	lr

08014d4c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f04f 0200 	mov.w	r2, #0
 8014d62:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f04f 0200 	mov.w	r2, #0
 8014d6a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f04f 0200 	mov.w	r2, #0
 8014d72:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f04f 0200 	mov.w	r2, #0
 8014d7a:	71da      	strb	r2, [r3, #7]
}
 8014d7c:	f107 070c 	add.w	r7, r7, #12
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bc80      	pop	{r7}
 8014d84:	4770      	bx	lr
 8014d86:	bf00      	nop

08014d88 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014d88:	b480      	push	{r7}
 8014d8a:	b085      	sub	sp, #20
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	460b      	mov	r3, r1
 8014d92:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8014d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014d98:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8014d9a:	887a      	ldrh	r2, [r7, #2]
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	4313      	orrs	r3, r2
 8014da0:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8014da2:	68fa      	ldr	r2, [r7, #12]
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8014da8:	887a      	ldrh	r2, [r7, #2]
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8014dae:	68fa      	ldr	r2, [r7, #12]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	69db      	ldr	r3, [r3, #28]
 8014db8:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	69db      	ldr	r3, [r3, #28]
 8014dbe:	60fb      	str	r3, [r7, #12]
}
 8014dc0:	f107 0714 	add.w	r7, r7, #20
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bc80      	pop	{r7}
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop

08014dcc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014dcc:	b480      	push	{r7}
 8014dce:	b085      	sub	sp, #20
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8014dd8:	f04f 0300 	mov.w	r3, #0
 8014ddc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	691b      	ldr	r3, [r3, #16]
 8014de2:	461a      	mov	r2, r3
 8014de4:	887b      	ldrh	r3, [r7, #2]
 8014de6:	4013      	ands	r3, r2
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d003      	beq.n	8014df4 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 8014dec:	f04f 0301 	mov.w	r3, #1
 8014df0:	73fb      	strb	r3, [r7, #15]
 8014df2:	e002      	b.n	8014dfa <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8014df4:	f04f 0300 	mov.w	r3, #0
 8014df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8014dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f107 0714 	add.w	r7, r7, #20
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bc80      	pop	{r7}
 8014e06:	4770      	bx	lr

08014e08 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b083      	sub	sp, #12
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	b29b      	uxth	r3, r3
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	f107 070c 	add.w	r7, r7, #12
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bc80      	pop	{r7}
 8014e20:	4770      	bx	lr
 8014e22:	bf00      	nop

08014e24 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014e24:	b480      	push	{r7}
 8014e26:	b085      	sub	sp, #20
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	460b      	mov	r3, r1
 8014e2e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8014e30:	f04f 0300 	mov.w	r3, #0
 8014e34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	695b      	ldr	r3, [r3, #20]
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	887b      	ldrh	r3, [r7, #2]
 8014e3e:	4013      	ands	r3, r2
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d003      	beq.n	8014e4c <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 8014e44:	f04f 0301 	mov.w	r3, #1
 8014e48:	73fb      	strb	r3, [r7, #15]
 8014e4a:	e002      	b.n	8014e52 <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8014e4c:	f04f 0300 	mov.w	r3, #0
 8014e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8014e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	f107 0714 	add.w	r7, r7, #20
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bc80      	pop	{r7}
 8014e5e:	4770      	bx	lr

08014e60 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8014e60:	b480      	push	{r7}
 8014e62:	b083      	sub	sp, #12
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	695b      	ldr	r3, [r3, #20]
 8014e6c:	b29b      	uxth	r3, r3
}
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f107 070c 	add.w	r7, r7, #12
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bc80      	pop	{r7}
 8014e78:	4770      	bx	lr
 8014e7a:	bf00      	nop

08014e7c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	b083      	sub	sp, #12
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	460b      	mov	r3, r1
 8014e86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	887a      	ldrh	r2, [r7, #2]
 8014e8c:	831a      	strh	r2, [r3, #24]
}
 8014e8e:	f107 070c 	add.w	r7, r7, #12
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bc80      	pop	{r7}
 8014e96:	4770      	bx	lr

08014e98 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b083      	sub	sp, #12
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
 8014ea0:	460b      	mov	r3, r1
 8014ea2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	887a      	ldrh	r2, [r7, #2]
 8014ea8:	835a      	strh	r2, [r3, #26]
}
 8014eaa:	f107 070c 	add.w	r7, r7, #12
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bc80      	pop	{r7}
 8014eb2:	4770      	bx	lr

08014eb4 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b083      	sub	sp, #12
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	460a      	mov	r2, r1
 8014ec0:	807a      	strh	r2, [r7, #2]
 8014ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8014ec4:	787b      	ldrb	r3, [r7, #1]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d003      	beq.n	8014ed2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	887a      	ldrh	r2, [r7, #2]
 8014ece:	831a      	strh	r2, [r3, #24]
 8014ed0:	e002      	b.n	8014ed8 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	887a      	ldrh	r2, [r7, #2]
 8014ed6:	835a      	strh	r2, [r3, #26]
  }
}
 8014ed8:	f107 070c 	add.w	r7, r7, #12
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bc80      	pop	{r7}
 8014ee0:	4770      	bx	lr
 8014ee2:	bf00      	nop

08014ee4 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b083      	sub	sp, #12
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	460b      	mov	r3, r1
 8014eee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8014ef0:	887a      	ldrh	r2, [r7, #2]
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	615a      	str	r2, [r3, #20]
}
 8014ef6:	f107 070c 	add.w	r7, r7, #12
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bc80      	pop	{r7}
 8014efe:	4770      	bx	lr

08014f00 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014f00:	b480      	push	{r7}
 8014f02:	b083      	sub	sp, #12
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	460b      	mov	r3, r1
 8014f0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	695b      	ldr	r3, [r3, #20]
 8014f10:	461a      	mov	r2, r3
 8014f12:	887b      	ldrh	r3, [r7, #2]
 8014f14:	405a      	eors	r2, r3
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	615a      	str	r2, [r3, #20]
}
 8014f1a:	f107 070c 	add.w	r7, r7, #12
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bc80      	pop	{r7}
 8014f22:	4770      	bx	lr

08014f24 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8014f24:	b480      	push	{r7}
 8014f26:	b085      	sub	sp, #20
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
 8014f2c:	4613      	mov	r3, r2
 8014f2e:	460a      	mov	r2, r1
 8014f30:	807a      	strh	r2, [r7, #2]
 8014f32:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8014f34:	f04f 0300 	mov.w	r3, #0
 8014f38:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8014f3a:	f04f 0300 	mov.w	r3, #0
 8014f3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014f40:	787a      	ldrb	r2, [r7, #1]
 8014f42:	887b      	ldrh	r3, [r7, #2]
 8014f44:	f003 0307 	and.w	r3, r3, #7
 8014f48:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8014f50:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014f52:	887b      	ldrh	r3, [r7, #2]
 8014f54:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	887b      	ldrh	r3, [r7, #2]
 8014f5e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014f62:	b29b      	uxth	r3, r3
 8014f64:	4619      	mov	r1, r3
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f101 0108 	add.w	r1, r1, #8
 8014f6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f70:	4619      	mov	r1, r3
 8014f72:	887b      	ldrh	r3, [r7, #2]
 8014f74:	f003 0307 	and.w	r3, r3, #7
 8014f78:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8014f7c:	f04f 000f 	mov.w	r0, #15
 8014f80:	fa00 f303 	lsl.w	r3, r0, r3
 8014f84:	ea6f 0303 	mvn.w	r3, r3
 8014f88:	4019      	ands	r1, r3
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f102 0208 	add.w	r2, r2, #8
 8014f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8014f94:	887b      	ldrh	r3, [r7, #2]
 8014f96:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	461a      	mov	r2, r3
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	f102 0208 	add.w	r2, r2, #8
 8014fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fa8:	461a      	mov	r2, r3
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	4313      	orrs	r3, r2
 8014fae:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8014fb0:	887b      	ldrh	r3, [r7, #2]
 8014fb2:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	461a      	mov	r2, r3
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f102 0208 	add.w	r2, r2, #8
 8014fc0:	68b9      	ldr	r1, [r7, #8]
 8014fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8014fc6:	f107 0714 	add.w	r7, r7, #20
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bc80      	pop	{r7}
 8014fce:	4770      	bx	lr

08014fd0 <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 8014fd4:	f04f 0020 	mov.w	r0, #32
 8014fd8:	f04f 0101 	mov.w	r1, #1
 8014fdc:	f002 f966 	bl	80172ac <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8014fe0:	f04f 0020 	mov.w	r0, #32
 8014fe4:	f04f 0100 	mov.w	r1, #0
 8014fe8:	f002 f960 	bl	80172ac <RCC_AHB2PeriphResetCmd>
}
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	bf00      	nop

08014ff0 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8014ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ffc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015004:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8015008:	6812      	ldr	r2, [r2, #0]
 801500a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 801500e:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8015010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015014:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801501c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8015020:	6812      	ldr	r2, [r2, #0]
 8015022:	4611      	mov	r1, r2
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 8015028:	687a      	ldr	r2, [r7, #4]
 801502a:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 801502c:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 801502e:	687a      	ldr	r2, [r7, #4]
 8015030:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 8015032:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8015034:	430a      	orrs	r2, r1
 8015036:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	2b40      	cmp	r3, #64	; 0x40
 801503e:	d119      	bne.n	8015074 <HASH_Init+0x84>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8015040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015044:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801504c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8015050:	6812      	ldr	r2, [r2, #0]
 8015052:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8015056:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8015058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801505c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015064:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8015068:	6812      	ldr	r2, [r2, #0]
 801506a:	4611      	mov	r1, r2
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	68d2      	ldr	r2, [r2, #12]
 8015070:	430a      	orrs	r2, r1
 8015072:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8015074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015078:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801507c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015080:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8015084:	6812      	ldr	r2, [r2, #0]
 8015086:	f042 0204 	orr.w	r2, r2, #4
 801508a:	601a      	str	r2, [r3, #0]
}
 801508c:	f107 070c 	add.w	r7, r7, #12
 8015090:	46bd      	mov	sp, r7
 8015092:	bc80      	pop	{r7}
 8015094:	4770      	bx	lr
 8015096:	bf00      	nop

08015098 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 8015098:	b480      	push	{r7}
 801509a:	b083      	sub	sp, #12
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f04f 0200 	mov.w	r2, #0
 80150a6:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f04f 0200 	mov.w	r2, #0
 80150ae:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f04f 0200 	mov.w	r2, #0
 80150b6:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f04f 0200 	mov.w	r2, #0
 80150be:	60da      	str	r2, [r3, #12]
}
 80150c0:	f107 070c 	add.w	r7, r7, #12
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bc80      	pop	{r7}
 80150c8:	4770      	bx	lr
 80150ca:	bf00      	nop

080150cc <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 80150cc:	b480      	push	{r7}
 80150ce:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 80150d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80150d4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80150d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80150dc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80150e0:	6812      	ldr	r2, [r2, #0]
 80150e2:	f042 0204 	orr.w	r2, r2, #4
 80150e6:	601a      	str	r2, [r3, #0]
}
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bc80      	pop	{r7}
 80150ec:	4770      	bx	lr
 80150ee:	bf00      	nop

080150f0 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b083      	sub	sp, #12
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	4603      	mov	r3, r0
 80150f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 80150fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80150fe:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015106:	f2c5 0206 	movt	r2, #20486	; 0x5006
 801510a:	6892      	ldr	r2, [r2, #8]
 801510c:	f022 021f 	bic.w	r2, r2, #31
 8015110:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 8015112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015116:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801511a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801511e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8015122:	6892      	ldr	r2, [r2, #8]
 8015124:	4611      	mov	r1, r2
 8015126:	88fa      	ldrh	r2, [r7, #6]
 8015128:	430a      	orrs	r2, r1
 801512a:	609a      	str	r2, [r3, #8]
}
 801512c:	f107 070c 	add.w	r7, r7, #12
 8015130:	46bd      	mov	sp, r7
 8015132:	bc80      	pop	{r7}
 8015134:	4770      	bx	lr
 8015136:	bf00      	nop

08015138 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8015140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015144:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	605a      	str	r2, [r3, #4]
}
 801514c:	f107 070c 	add.w	r7, r7, #12
 8015150:	46bd      	mov	sp, r7
 8015152:	bc80      	pop	{r7}
 8015154:	4770      	bx	lr
 8015156:	bf00      	nop

08015158 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 8015158:	b480      	push	{r7}
 801515a:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 801515c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015160:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801516a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801516e:	b2db      	uxtb	r3, r3
}
 8015170:	4618      	mov	r0, r3
 8015172:	46bd      	mov	sp, r7
 8015174:	bc80      	pop	{r7}
 8015176:	4770      	bx	lr

08015178 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 8015178:	b480      	push	{r7}
 801517a:	b083      	sub	sp, #12
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8015180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015184:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015188:	68db      	ldr	r3, [r3, #12]
 801518a:	461a      	mov	r2, r3
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8015190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015194:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015198:	691b      	ldr	r3, [r3, #16]
 801519a:	461a      	mov	r2, r3
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 80151a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80151a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80151a8:	695b      	ldr	r3, [r3, #20]
 80151aa:	461a      	mov	r2, r3
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 80151b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80151b4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80151b8:	699b      	ldr	r3, [r3, #24]
 80151ba:	461a      	mov	r2, r3
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 80151c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80151c4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80151c8:	69db      	ldr	r3, [r3, #28]
 80151ca:	461a      	mov	r2, r3
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	611a      	str	r2, [r3, #16]
}
 80151d0:	f107 070c 	add.w	r7, r7, #12
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bc80      	pop	{r7}
 80151d8:	4770      	bx	lr
 80151da:	bf00      	nop

080151dc <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 80151dc:	b480      	push	{r7}
 80151de:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 80151e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80151e4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80151e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80151ec:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80151f0:	6892      	ldr	r2, [r2, #8]
 80151f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80151f6:	609a      	str	r2, [r3, #8]
}
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bc80      	pop	{r7}
 80151fc:	4770      	bx	lr
 80151fe:	bf00      	nop

08015200 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 8015200:	b480      	push	{r7}
 8015202:	b085      	sub	sp, #20
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8015208:	f04f 0300 	mov.w	r3, #0
 801520c:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 801520e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015212:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015216:	6a1b      	ldr	r3, [r3, #32]
 8015218:	461a      	mov	r2, r3
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 801521e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015222:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	461a      	mov	r2, r3
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 801522e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015232:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	461a      	mov	r2, r3
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	609a      	str	r2, [r3, #8]
  for(i=0; i<=50;i++)
 801523e:	f04f 0300 	mov.w	r3, #0
 8015242:	73fb      	strb	r3, [r7, #15]
 8015244:	e015      	b.n	8015272 <HASH_SaveContext+0x72>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 8015246:	7bf8      	ldrb	r0, [r7, #15]
 8015248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801524c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015250:	7bfa      	ldrb	r2, [r7, #15]
 8015252:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8015256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801525a:	461a      	mov	r2, r3
 801525c:	6879      	ldr	r1, [r7, #4]
 801525e:	f100 0302 	add.w	r3, r0, #2
 8015262:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8015266:	18cb      	adds	r3, r1, r3
 8015268:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 801526a:	7bfb      	ldrb	r3, [r7, #15]
 801526c:	f103 0301 	add.w	r3, r3, #1
 8015270:	73fb      	strb	r3, [r7, #15]
 8015272:	7bfb      	ldrb	r3, [r7, #15]
 8015274:	2b32      	cmp	r3, #50	; 0x32
 8015276:	d9e6      	bls.n	8015246 <HASH_SaveContext+0x46>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 8015278:	f107 0714 	add.w	r7, r7, #20
 801527c:	46bd      	mov	sp, r7
 801527e:	bc80      	pop	{r7}
 8015280:	4770      	bx	lr
 8015282:	bf00      	nop

08015284 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8015284:	b480      	push	{r7}
 8015286:	b085      	sub	sp, #20
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 801528c:	f04f 0300 	mov.w	r3, #0
 8015290:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8015292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015296:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	6812      	ldr	r2, [r2, #0]
 801529e:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 80152a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	6852      	ldr	r2, [r2, #4]
 80152ac:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 80152ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152b2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	6892      	ldr	r2, [r2, #8]
 80152ba:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 80152bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152c0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80152c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80152c8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80152cc:	6812      	ldr	r2, [r2, #0]
 80152ce:	f042 0204 	orr.w	r2, r2, #4
 80152d2:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 80152d4:	f04f 0300 	mov.w	r3, #0
 80152d8:	73fb      	strb	r3, [r7, #15]
 80152da:	e014      	b.n	8015306 <HASH_RestoreContext+0x82>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 80152dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152e0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80152e4:	7bf8      	ldrb	r0, [r7, #15]
 80152e6:	7bfa      	ldrb	r2, [r7, #15]
 80152e8:	6879      	ldr	r1, [r7, #4]
 80152ea:	f102 0202 	add.w	r2, r2, #2
 80152ee:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80152f2:	188a      	adds	r2, r1, r2
 80152f4:	6851      	ldr	r1, [r2, #4]
 80152f6:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 80152fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 80152fe:	7bfb      	ldrb	r3, [r7, #15]
 8015300:	f103 0301 	add.w	r3, r3, #1
 8015304:	73fb      	strb	r3, [r7, #15]
 8015306:	7bfb      	ldrb	r3, [r7, #15]
 8015308:	2b32      	cmp	r3, #50	; 0x32
 801530a:	d9e7      	bls.n	80152dc <HASH_RestoreContext+0x58>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 801530c:	f107 0714 	add.w	r7, r7, #20
 8015310:	46bd      	mov	sp, r7
 8015312:	bc80      	pop	{r7}
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop

08015318 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	4603      	mov	r3, r0
 8015320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8015322:	79fb      	ldrb	r3, [r7, #7]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d00c      	beq.n	8015342 <HASH_DMACmd+0x2a>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8015328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801532c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015334:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8015338:	6812      	ldr	r2, [r2, #0]
 801533a:	f042 0208 	orr.w	r2, r2, #8
 801533e:	601a      	str	r2, [r3, #0]
 8015340:	e00b      	b.n	801535a <HASH_DMACmd+0x42>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 8015342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015346:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801534a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801534e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8015352:	6812      	ldr	r2, [r2, #0]
 8015354:	f022 0208 	bic.w	r2, r2, #8
 8015358:	601a      	str	r2, [r3, #0]
  }
}
 801535a:	f107 070c 	add.w	r7, r7, #12
 801535e:	46bd      	mov	sp, r7
 8015360:	bc80      	pop	{r7}
 8015362:	4770      	bx	lr

08015364 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 8015364:	b480      	push	{r7}
 8015366:	b083      	sub	sp, #12
 8015368:	af00      	add	r7, sp, #0
 801536a:	4602      	mov	r2, r0
 801536c:	460b      	mov	r3, r1
 801536e:	71fa      	strb	r2, [r7, #7]
 8015370:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8015372:	79bb      	ldrb	r3, [r7, #6]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d00d      	beq.n	8015394 <HASH_ITConfig+0x30>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8015378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801537c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015384:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8015388:	6a12      	ldr	r2, [r2, #32]
 801538a:	4611      	mov	r1, r2
 801538c:	79fa      	ldrb	r2, [r7, #7]
 801538e:	430a      	orrs	r2, r1
 8015390:	621a      	str	r2, [r3, #32]
 8015392:	e00f      	b.n	80153b4 <HASH_ITConfig+0x50>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8015394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015398:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801539c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80153a0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80153a4:	6a12      	ldr	r2, [r2, #32]
 80153a6:	4611      	mov	r1, r2
 80153a8:	79fa      	ldrb	r2, [r7, #7]
 80153aa:	ea6f 0202 	mvn.w	r2, r2
 80153ae:	b2d2      	uxtb	r2, r2
 80153b0:	400a      	ands	r2, r1
 80153b2:	621a      	str	r2, [r3, #32]
  }
}
 80153b4:	f107 070c 	add.w	r7, r7, #12
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bc80      	pop	{r7}
 80153bc:	4770      	bx	lr
 80153be:	bf00      	nop

080153c0 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 80153c0:	b480      	push	{r7}
 80153c2:	b085      	sub	sp, #20
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	4603      	mov	r3, r0
 80153c8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80153ca:	f04f 0300 	mov.w	r3, #0
 80153ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80153d0:	f04f 0300 	mov.w	r3, #0
 80153d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 80153d6:	88fb      	ldrh	r3, [r7, #6]
 80153d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d006      	beq.n	80153ee <HASH_GetFlagStatus+0x2e>
  {
    tempreg = HASH->CR;
 80153e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153e4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	60bb      	str	r3, [r7, #8]
 80153ec:	e005      	b.n	80153fa <HASH_GetFlagStatus+0x3a>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 80153ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153f2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80153f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
 80153fa:	88fa      	ldrh	r2, [r7, #6]
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	4013      	ands	r3, r2
 8015400:	2b00      	cmp	r3, #0
 8015402:	d003      	beq.n	801540c <HASH_GetFlagStatus+0x4c>
  {
    /* HASH is set */
    bitstatus = SET;
 8015404:	f04f 0301 	mov.w	r3, #1
 8015408:	73fb      	strb	r3, [r7, #15]
 801540a:	e002      	b.n	8015412 <HASH_GetFlagStatus+0x52>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 801540c:	f04f 0300 	mov.w	r3, #0
 8015410:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 8015412:	7bfb      	ldrb	r3, [r7, #15]
}
 8015414:	4618      	mov	r0, r3
 8015416:	f107 0714 	add.w	r7, r7, #20
 801541a:	46bd      	mov	sp, r7
 801541c:	bc80      	pop	{r7}
 801541e:	4770      	bx	lr

08015420 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint16_t HASH_FLAG)
{
 8015420:	b480      	push	{r7}
 8015422:	b083      	sub	sp, #12
 8015424:	af00      	add	r7, sp, #0
 8015426:	4603      	mov	r3, r0
 8015428:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 801542a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801542e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015432:	88fa      	ldrh	r2, [r7, #6]
 8015434:	ea6f 0202 	mvn.w	r2, r2
 8015438:	625a      	str	r2, [r3, #36]	; 0x24
}
 801543a:	f107 070c 	add.w	r7, r7, #12
 801543e:	46bd      	mov	sp, r7
 8015440:	bc80      	pop	{r7}
 8015442:	4770      	bx	lr

08015444 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint8_t HASH_IT)
{
 8015444:	b480      	push	{r7}
 8015446:	b085      	sub	sp, #20
 8015448:	af00      	add	r7, sp, #0
 801544a:	4603      	mov	r3, r0
 801544c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 801544e:	f04f 0300 	mov.w	r3, #0
 8015452:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8015454:	f04f 0300 	mov.w	r3, #0
 8015458:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 801545a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801545e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8015462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015464:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8015466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801546a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801546e:	6a1b      	ldr	r3, [r3, #32]
 8015470:	461a      	mov	r2, r3
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	401a      	ands	r2, r3
 8015476:	79fb      	ldrb	r3, [r7, #7]
 8015478:	4013      	ands	r3, r2
 801547a:	2b00      	cmp	r3, #0
 801547c:	d003      	beq.n	8015486 <HASH_GetITStatus+0x42>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 801547e:	f04f 0301 	mov.w	r3, #1
 8015482:	73fb      	strb	r3, [r7, #15]
 8015484:	e002      	b.n	801548c <HASH_GetITStatus+0x48>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 8015486:	f04f 0300 	mov.w	r3, #0
 801548a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 801548c:	7bfb      	ldrb	r3, [r7, #15]
}
 801548e:	4618      	mov	r0, r3
 8015490:	f107 0714 	add.w	r7, r7, #20
 8015494:	46bd      	mov	sp, r7
 8015496:	bc80      	pop	{r7}
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop

0801549c <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint8_t HASH_IT)
{
 801549c:	b480      	push	{r7}
 801549e:	b083      	sub	sp, #12
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	4603      	mov	r3, r0
 80154a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 80154a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80154aa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80154ae:	79fa      	ldrb	r2, [r7, #7]
 80154b0:	ea6f 0202 	mvn.w	r2, r2
 80154b4:	b2d2      	uxtb	r2, r2
 80154b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80154b8:	f107 070c 	add.w	r7, r7, #12
 80154bc:	46bd      	mov	sp, r7
 80154be:	bc80      	pop	{r7}
 80154c0:	4770      	bx	lr
 80154c2:	bf00      	nop

080154c4 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 80154c4:	b590      	push	{r4, r7, lr}
 80154c6:	b09d      	sub	sp, #116	; 0x74
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80154d0:	f04f 0300 	mov.w	r3, #0
 80154d4:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 80154d6:	f04f 0300 	mov.w	r3, #0
 80154da:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 80154dc:	f04f 0300 	mov.w	r3, #0
 80154e0:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80154e2:	f04f 0300 	mov.w	r3, #0
 80154e6:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 80154e8:	f04f 0301 	mov.w	r3, #1
 80154ec:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80154f8:	68bb      	ldr	r3, [r7, #8]
 80154fa:	b29b      	uxth	r3, r3
 80154fc:	f003 0303 	and.w	r3, r3, #3
 8015500:	b29b      	uxth	r3, r3
 8015502:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8015506:	b29b      	uxth	r3, r3
 8015508:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 801550a:	f7ff fd61 	bl	8014fd0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 801550e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8015512:	62fb      	str	r3, [r7, #44]	; 0x2c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8015514:	f04f 0300 	mov.w	r3, #0
 8015518:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 801551a:	f04f 0320 	mov.w	r3, #32
 801551e:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&MD5_HASH_InitStructure);
 8015520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015524:	4618      	mov	r0, r3
 8015526:	f7ff fd63 	bl	8014ff0 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 801552a:	8afb      	ldrh	r3, [r7, #22]
 801552c:	b29b      	uxth	r3, r3
 801552e:	4618      	mov	r0, r3
 8015530:	f7ff fdde 	bl	80150f0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8015534:	f04f 0300 	mov.w	r3, #0
 8015538:	66fb      	str	r3, [r7, #108]	; 0x6c
 801553a:	e00c      	b.n	8015556 <HASH_MD5+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 801553c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	4618      	mov	r0, r3
 8015542:	f7ff fdf9 	bl	8015138 <HASH_DataIn>
    inputaddr+=4;
 8015546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015548:	f103 0304 	add.w	r3, r3, #4
 801554c:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 801554e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015550:	f103 0304 	add.w	r3, r3, #4
 8015554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015556:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	429a      	cmp	r2, r3
 801555c:	d3ee      	bcc.n	801553c <HASH_MD5+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 801555e:	f7ff fe3d 	bl	80151dc <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8015562:	f04f 0008 	mov.w	r0, #8
 8015566:	f7ff ff2b 	bl	80153c0 <HASH_GetFlagStatus>
 801556a:	4603      	mov	r3, r0
 801556c:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	f103 0301 	add.w	r3, r3, #1
 8015574:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8015576:	693b      	ldr	r3, [r7, #16]
 8015578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801557c:	d002      	beq.n	8015584 <HASH_MD5+0xc0>
 801557e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015580:	2b00      	cmp	r3, #0
 8015582:	d1ee      	bne.n	8015562 <HASH_MD5+0x9e>

  if (busystatus != RESET)
 8015584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015586:	2b00      	cmp	r3, #0
 8015588:	d004      	beq.n	8015594 <HASH_MD5+0xd0>
  {
     status = ERROR;
 801558a:	f04f 0300 	mov.w	r3, #0
 801558e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8015592:	e030      	b.n	80155f6 <HASH_MD5+0x132>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 8015594:	f107 0318 	add.w	r3, r7, #24
 8015598:	4618      	mov	r0, r3
 801559a:	f7ff fded 	bl	8015178 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 801559e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155a0:	69ba      	ldr	r2, [r7, #24]
 80155a2:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80155a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80155a6:	ba14      	rev	r4, r2
 80155a8:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 80155aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80155ac:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 80155ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155b0:	f103 0304 	add.w	r3, r3, #4
 80155b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 80155b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155b8:	69fa      	ldr	r2, [r7, #28]
 80155ba:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80155bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80155be:	ba14      	rev	r4, r2
 80155c0:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 80155c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80155c4:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 80155c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155c8:	f103 0304 	add.w	r3, r3, #4
 80155cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 80155ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155d0:	6a3a      	ldr	r2, [r7, #32]
 80155d2:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80155d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80155d6:	ba14      	rev	r4, r2
 80155d8:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 80155da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80155dc:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 80155de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155e0:	f103 0304 	add.w	r3, r3, #4
 80155e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 80155e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80155ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155ee:	ba14      	rev	r4, r2
 80155f0:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 80155f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80155f4:	601a      	str	r2, [r3, #0]
  }
  return status; 
 80155f6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 80155fa:	4618      	mov	r0, r3
 80155fc:	f107 0774 	add.w	r7, r7, #116	; 0x74
 8015600:	46bd      	mov	sp, r7
 8015602:	bd90      	pop	{r4, r7, pc}

08015604 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8015604:	b590      	push	{r4, r7, lr}
 8015606:	b09f      	sub	sp, #124	; 0x7c
 8015608:	af00      	add	r7, sp, #0
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	60b9      	str	r1, [r7, #8]
 801560e:	607a      	str	r2, [r7, #4]
 8015610:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8015612:	f04f 0300 	mov.w	r3, #0
 8015616:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 8015618:	f04f 0300 	mov.w	r3, #0
 801561c:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 801561e:	f04f 0300 	mov.w	r3, #0
 8015622:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 8015624:	f04f 0300 	mov.w	r3, #0
 8015628:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 801562a:	f04f 0300 	mov.w	r3, #0
 801562e:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 8015630:	f04f 0301 	mov.w	r3, #1
 8015634:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 8015640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015644:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	b29b      	uxth	r3, r3
 801564a:	f003 0303 	and.w	r3, r3, #3
 801564e:	b29b      	uxth	r3, r3
 8015650:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8015654:	b29b      	uxth	r3, r3
 8015656:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	b29b      	uxth	r3, r3
 801565c:	f003 0303 	and.w	r3, r3, #3
 8015660:	b29b      	uxth	r3, r3
 8015662:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8015666:	b29b      	uxth	r3, r3
 8015668:	833b      	strh	r3, [r7, #24]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 801566a:	f7ff fcb1 	bl	8014fd0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 801566e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8015672:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8015674:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015678:	637b      	str	r3, [r7, #52]	; 0x34
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 801567a:	f04f 0320 	mov.w	r3, #32
 801567e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	2b40      	cmp	r3, #64	; 0x40
 8015684:	d903      	bls.n	801568e <HMAC_MD5+0x8a>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8015686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801568c:	e002      	b.n	8015694 <HMAC_MD5+0x90>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 801568e:	f04f 0300 	mov.w	r3, #0
 8015692:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8015694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015698:	4618      	mov	r0, r3
 801569a:	f7ff fca9 	bl	8014ff0 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 801569e:	8b3b      	ldrh	r3, [r7, #24]
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7ff fd24 	bl	80150f0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80156a8:	f04f 0300 	mov.w	r3, #0
 80156ac:	677b      	str	r3, [r7, #116]	; 0x74
 80156ae:	e00c      	b.n	80156ca <HMAC_MD5+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 80156b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	4618      	mov	r0, r3
 80156b6:	f7ff fd3f 	bl	8015138 <HASH_DataIn>
    keyaddr+=4;
 80156ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156bc:	f103 0304 	add.w	r3, r3, #4
 80156c0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80156c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80156c4:	f103 0304 	add.w	r3, r3, #4
 80156c8:	677b      	str	r3, [r7, #116]	; 0x74
 80156ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d3ee      	bcc.n	80156b0 <HMAC_MD5+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 80156d2:	f7ff fd83 	bl	80151dc <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80156d6:	f04f 0008 	mov.w	r0, #8
 80156da:	f7ff fe71 	bl	80153c0 <HASH_GetFlagStatus>
 80156de:	4603      	mov	r3, r0
 80156e0:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	f103 0301 	add.w	r3, r3, #1
 80156e8:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80156f0:	d002      	beq.n	80156f8 <HMAC_MD5+0xf4>
 80156f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d1ee      	bne.n	80156d6 <HMAC_MD5+0xd2>

  if (busystatus != RESET)
 80156f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d004      	beq.n	8015708 <HMAC_MD5+0x104>
  {
     status = ERROR;
 80156fe:	f04f 0300 	mov.w	r3, #0
 8015702:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8015706:	e0a2      	b.n	801584e <HMAC_MD5+0x24a>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8015708:	8b7b      	ldrh	r3, [r7, #26]
 801570a:	b29b      	uxth	r3, r3
 801570c:	4618      	mov	r0, r3
 801570e:	f7ff fcef 	bl	80150f0 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8015712:	f04f 0300 	mov.w	r3, #0
 8015716:	677b      	str	r3, [r7, #116]	; 0x74
 8015718:	e00c      	b.n	8015734 <HMAC_MD5+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 801571a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	4618      	mov	r0, r3
 8015720:	f7ff fd0a 	bl	8015138 <HASH_DataIn>
      inputaddr+=4;
 8015724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015726:	f103 0304 	add.w	r3, r3, #4
 801572a:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 801572c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801572e:	f103 0304 	add.w	r3, r3, #4
 8015732:	677b      	str	r3, [r7, #116]	; 0x74
 8015734:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	429a      	cmp	r2, r3
 801573a:	d3ee      	bcc.n	801571a <HMAC_MD5+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 801573c:	f7ff fd4e 	bl	80151dc <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 8015740:	f04f 0300 	mov.w	r3, #0
 8015744:	617b      	str	r3, [r7, #20]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8015746:	f04f 0008 	mov.w	r0, #8
 801574a:	f7ff fe39 	bl	80153c0 <HASH_GetFlagStatus>
 801574e:	4603      	mov	r3, r0
 8015750:	667b      	str	r3, [r7, #100]	; 0x64
       counter++;
 8015752:	697b      	ldr	r3, [r7, #20]
 8015754:	f103 0301 	add.w	r3, r3, #1
 8015758:	617b      	str	r3, [r7, #20]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015760:	d002      	beq.n	8015768 <HMAC_MD5+0x164>
 8015762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015764:	2b00      	cmp	r3, #0
 8015766:	d1ee      	bne.n	8015746 <HMAC_MD5+0x142>

    if (busystatus != RESET)
 8015768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801576a:	2b00      	cmp	r3, #0
 801576c:	d004      	beq.n	8015778 <HMAC_MD5+0x174>
    {
      status = ERROR;
 801576e:	f04f 0300 	mov.w	r3, #0
 8015772:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8015776:	e06a      	b.n	801584e <HMAC_MD5+0x24a>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8015778:	8b3b      	ldrh	r3, [r7, #24]
 801577a:	b29b      	uxth	r3, r3
 801577c:	4618      	mov	r0, r3
 801577e:	f7ff fcb7 	bl	80150f0 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 8015786:	f04f 0300 	mov.w	r3, #0
 801578a:	677b      	str	r3, [r7, #116]	; 0x74
 801578c:	e00c      	b.n	80157a8 <HMAC_MD5+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 801578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	4618      	mov	r0, r3
 8015794:	f7ff fcd0 	bl	8015138 <HASH_DataIn>
        keyaddr+=4;
 8015798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801579a:	f103 0304 	add.w	r3, r3, #4
 801579e:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80157a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80157a2:	f103 0304 	add.w	r3, r3, #4
 80157a6:	677b      	str	r3, [r7, #116]	; 0x74
 80157a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d3ee      	bcc.n	801578e <HMAC_MD5+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 80157b0:	f7ff fd14 	bl	80151dc <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 80157b4:	f04f 0300 	mov.w	r3, #0
 80157b8:	617b      	str	r3, [r7, #20]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80157ba:	f04f 0008 	mov.w	r0, #8
 80157be:	f7ff fdff 	bl	80153c0 <HASH_GetFlagStatus>
 80157c2:	4603      	mov	r3, r0
 80157c4:	667b      	str	r3, [r7, #100]	; 0x64
          counter++;
 80157c6:	697b      	ldr	r3, [r7, #20]
 80157c8:	f103 0301 	add.w	r3, r3, #1
 80157cc:	617b      	str	r3, [r7, #20]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157d4:	d002      	beq.n	80157dc <HMAC_MD5+0x1d8>
 80157d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d1ee      	bne.n	80157ba <HMAC_MD5+0x1b6>

      if (busystatus != RESET)
 80157dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d004      	beq.n	80157ec <HMAC_MD5+0x1e8>
      {
         status = ERROR;
 80157e2:	f04f 0300 	mov.w	r3, #0
 80157e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80157ea:	e030      	b.n	801584e <HMAC_MD5+0x24a>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 80157ec:	f107 031c 	add.w	r3, r7, #28
 80157f0:	4618      	mov	r0, r3
 80157f2:	f7ff fcc1 	bl	8015178 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 80157f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80157f8:	69fa      	ldr	r2, [r7, #28]
 80157fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80157fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80157fe:	ba14      	rev	r4, r2
 8015800:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8015802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015804:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8015806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015808:	f103 0304 	add.w	r3, r3, #4
 801580c:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 801580e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015810:	6a3a      	ldr	r2, [r7, #32]
 8015812:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8015814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015816:	ba14      	rev	r4, r2
 8015818:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 801581a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801581c:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 801581e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015820:	f103 0304 	add.w	r3, r3, #4
 8015824:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8015826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801582a:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801582c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801582e:	ba14      	rev	r4, r2
 8015830:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8015832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015834:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8015836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015838:	f103 0304 	add.w	r3, r3, #4
 801583c:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 801583e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015842:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8015844:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015846:	ba14      	rev	r4, r2
 8015848:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 801584a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801584c:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 801584e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8015852:	4618      	mov	r0, r3
 8015854:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 8015858:	46bd      	mov	sp, r7
 801585a:	bd90      	pop	{r4, r7, pc}

0801585c <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 801585c:	b590      	push	{r4, r7, lr}
 801585e:	b09f      	sub	sp, #124	; 0x7c
 8015860:	af00      	add	r7, sp, #0
 8015862:	60f8      	str	r0, [r7, #12]
 8015864:	60b9      	str	r1, [r7, #8]
 8015866:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8015868:	f04f 0300 	mov.w	r3, #0
 801586c:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 801586e:	f04f 0300 	mov.w	r3, #0
 8015872:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 8015874:	f04f 0300 	mov.w	r3, #0
 8015878:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 801587a:	f04f 0300 	mov.w	r3, #0
 801587e:	66bb      	str	r3, [r7, #104]	; 0x68
  ErrorStatus status = SUCCESS;
 8015880:	f04f 0301 	mov.w	r3, #1
 8015884:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t inputaddr  = (uint32_t)Input;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t outputaddr = (uint32_t)Output;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	667b      	str	r3, [r7, #100]	; 0x64

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8015890:	68bb      	ldr	r3, [r7, #8]
 8015892:	b29b      	uxth	r3, r3
 8015894:	f003 0303 	and.w	r3, r3, #3
 8015898:	b29b      	uxth	r3, r3
 801589a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801589e:	b29b      	uxth	r3, r3
 80158a0:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 80158a2:	f7ff fb95 	bl	8014fd0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 80158a6:	f04f 0300 	mov.w	r3, #0
 80158aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 80158ac:	f04f 0300 	mov.w	r3, #0
 80158b0:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80158b2:	f04f 0320 	mov.w	r3, #32
 80158b6:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&SHA1_HASH_InitStructure);
 80158b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80158bc:	4618      	mov	r0, r3
 80158be:	f7ff fb97 	bl	8014ff0 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80158c2:	8afb      	ldrh	r3, [r7, #22]
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7ff fc12 	bl	80150f0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80158cc:	f04f 0300 	mov.w	r3, #0
 80158d0:	677b      	str	r3, [r7, #116]	; 0x74
 80158d2:	e00c      	b.n	80158ee <HASH_SHA1+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80158d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	4618      	mov	r0, r3
 80158da:	f7ff fc2d 	bl	8015138 <HASH_DataIn>
    inputaddr+=4;
 80158de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80158e0:	f103 0304 	add.w	r3, r3, #4
 80158e4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80158e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80158e8:	f103 0304 	add.w	r3, r3, #4
 80158ec:	677b      	str	r3, [r7, #116]	; 0x74
 80158ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d3ee      	bcc.n	80158d4 <HASH_SHA1+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 80158f6:	f7ff fc71 	bl	80151dc <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80158fa:	f04f 0008 	mov.w	r0, #8
 80158fe:	f7ff fd5f 	bl	80153c0 <HASH_GetFlagStatus>
 8015902:	4603      	mov	r3, r0
 8015904:	66bb      	str	r3, [r7, #104]	; 0x68
    counter++;
 8015906:	693b      	ldr	r3, [r7, #16]
 8015908:	f103 0301 	add.w	r3, r3, #1
 801590c:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015914:	d002      	beq.n	801591c <HASH_SHA1+0xc0>
 8015916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015918:	2b00      	cmp	r3, #0
 801591a:	d1ee      	bne.n	80158fa <HASH_SHA1+0x9e>

  if (busystatus != RESET)
 801591c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801591e:	2b00      	cmp	r3, #0
 8015920:	d004      	beq.n	801592c <HASH_SHA1+0xd0>
  {
     status = ERROR;
 8015922:	f04f 0300 	mov.w	r3, #0
 8015926:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 801592a:	e03c      	b.n	80159a6 <HASH_SHA1+0x14a>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 801592c:	f107 0318 	add.w	r3, r7, #24
 8015930:	4618      	mov	r0, r3
 8015932:	f7ff fc21 	bl	8015178 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8015936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015938:	69ba      	ldr	r2, [r7, #24]
 801593a:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801593c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801593e:	ba14      	rev	r4, r2
 8015940:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8015942:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015944:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8015946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015948:	f103 0304 	add.w	r3, r3, #4
 801594c:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 801594e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015950:	69fa      	ldr	r2, [r7, #28]
 8015952:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8015954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015956:	ba14      	rev	r4, r2
 8015958:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 801595a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801595c:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 801595e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015960:	f103 0304 	add.w	r3, r3, #4
 8015964:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8015966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015968:	6a3a      	ldr	r2, [r7, #32]
 801596a:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801596c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801596e:	ba14      	rev	r4, r2
 8015970:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8015972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015974:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8015976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015978:	f103 0304 	add.w	r3, r3, #4
 801597c:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 801597e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015982:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8015984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015986:	ba14      	rev	r4, r2
 8015988:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 801598a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801598c:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 801598e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015990:	f103 0304 	add.w	r3, r3, #4
 8015994:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8015996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801599a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 801599c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801599e:	ba14      	rev	r4, r2
 80159a0:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 80159a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80159a4:	601a      	str	r2, [r3, #0]
  }
  return status;
 80159a6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd90      	pop	{r4, r7, pc}

080159b4 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 80159b4:	b590      	push	{r4, r7, lr}
 80159b6:	b0a1      	sub	sp, #132	; 0x84
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	60f8      	str	r0, [r7, #12]
 80159bc:	60b9      	str	r1, [r7, #8]
 80159be:	607a      	str	r2, [r7, #4]
 80159c0:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80159c2:	f04f 0300 	mov.w	r3, #0
 80159c6:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 80159c8:	f04f 0300 	mov.w	r3, #0
 80159cc:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 80159ce:	f04f 0300 	mov.w	r3, #0
 80159d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 80159d4:	f04f 0300 	mov.w	r3, #0
 80159d8:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80159da:	f04f 0300 	mov.w	r3, #0
 80159de:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 80159e0:	f04f 0301 	mov.w	r3, #1
 80159e4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t keyaddr    = (uint32_t)Key;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t inputaddr  = (uint32_t)Input;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 80159f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80159f4:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	f003 0303 	and.w	r3, r3, #3
 80159fe:	b29b      	uxth	r3, r3
 8015a00:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8015a04:	b29b      	uxth	r3, r3
 8015a06:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	b29b      	uxth	r3, r3
 8015a0c:	f003 0303 	and.w	r3, r3, #3
 8015a10:	b29b      	uxth	r3, r3
 8015a12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8015a1a:	f7ff fad9 	bl	8014fd0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8015a1e:	f04f 0300 	mov.w	r3, #0
 8015a22:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8015a24:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015a28:	637b      	str	r3, [r7, #52]	; 0x34
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8015a2a:	f04f 0320 	mov.w	r3, #32
 8015a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	2b40      	cmp	r3, #64	; 0x40
 8015a34:	d903      	bls.n	8015a3e <HMAC_SHA1+0x8a>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8015a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015a3c:	e002      	b.n	8015a44 <HMAC_SHA1+0x90>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8015a3e:	f04f 0300 	mov.w	r3, #0
 8015a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8015a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7ff fad1 	bl	8014ff0 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8015a4e:	8b3b      	ldrh	r3, [r7, #24]
 8015a50:	b29b      	uxth	r3, r3
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7ff fb4c 	bl	80150f0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8015a58:	f04f 0300 	mov.w	r3, #0
 8015a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015a5e:	e00c      	b.n	8015a7a <HMAC_SHA1+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8015a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7ff fb67 	bl	8015138 <HASH_DataIn>
    keyaddr+=4;
 8015a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a6c:	f103 0304 	add.w	r3, r3, #4
 8015a70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8015a72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a74:	f103 0304 	add.w	r3, r3, #4
 8015a78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015a7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	429a      	cmp	r2, r3
 8015a80:	d3ee      	bcc.n	8015a60 <HMAC_SHA1+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8015a82:	f7ff fbab 	bl	80151dc <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8015a86:	f04f 0008 	mov.w	r0, #8
 8015a8a:	f7ff fc99 	bl	80153c0 <HASH_GetFlagStatus>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	66fb      	str	r3, [r7, #108]	; 0x6c
    counter++;
 8015a92:	697b      	ldr	r3, [r7, #20]
 8015a94:	f103 0301 	add.w	r3, r3, #1
 8015a98:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8015a9a:	697b      	ldr	r3, [r7, #20]
 8015a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015aa0:	d002      	beq.n	8015aa8 <HMAC_SHA1+0xf4>
 8015aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d1ee      	bne.n	8015a86 <HMAC_SHA1+0xd2>

  if (busystatus != RESET)
 8015aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d004      	beq.n	8015ab8 <HMAC_SHA1+0x104>
  {
     status = ERROR;
 8015aae:	f04f 0300 	mov.w	r3, #0
 8015ab2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8015ab6:	e0ae      	b.n	8015c16 <HMAC_SHA1+0x262>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8015ab8:	8b7b      	ldrh	r3, [r7, #26]
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7ff fb17 	bl	80150f0 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8015ac2:	f04f 0300 	mov.w	r3, #0
 8015ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015ac8:	e00c      	b.n	8015ae4 <HMAC_SHA1+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8015aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7ff fb32 	bl	8015138 <HASH_DataIn>
      inputaddr+=4;
 8015ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015ad6:	f103 0304 	add.w	r3, r3, #4
 8015ada:	673b      	str	r3, [r7, #112]	; 0x70
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8015adc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015ade:	f103 0304 	add.w	r3, r3, #4
 8015ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015ae4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d3ee      	bcc.n	8015aca <HMAC_SHA1+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8015aec:	f7ff fb76 	bl	80151dc <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 8015af0:	f04f 0300 	mov.w	r3, #0
 8015af4:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8015af6:	f04f 0008 	mov.w	r0, #8
 8015afa:	f7ff fc61 	bl	80153c0 <HASH_GetFlagStatus>
 8015afe:	4603      	mov	r3, r0
 8015b00:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 8015b02:	697b      	ldr	r3, [r7, #20]
 8015b04:	f103 0301 	add.w	r3, r3, #1
 8015b08:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b10:	d002      	beq.n	8015b18 <HMAC_SHA1+0x164>
 8015b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d1ee      	bne.n	8015af6 <HMAC_SHA1+0x142>

    if (busystatus != RESET)
 8015b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d004      	beq.n	8015b28 <HMAC_SHA1+0x174>
    {
      status = ERROR;
 8015b1e:	f04f 0300 	mov.w	r3, #0
 8015b22:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8015b26:	e076      	b.n	8015c16 <HMAC_SHA1+0x262>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8015b28:	8b3b      	ldrh	r3, [r7, #24]
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7ff fadf 	bl	80150f0 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	677b      	str	r3, [r7, #116]	; 0x74
      for(i=0; i<Keylen; i+=4)
 8015b36:	f04f 0300 	mov.w	r3, #0
 8015b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015b3c:	e00c      	b.n	8015b58 <HMAC_SHA1+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8015b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7ff faf8 	bl	8015138 <HASH_DataIn>
        keyaddr+=4;
 8015b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015b4a:	f103 0304 	add.w	r3, r3, #4
 8015b4e:	677b      	str	r3, [r7, #116]	; 0x74
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8015b50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015b52:	f103 0304 	add.w	r3, r3, #4
 8015b56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015b58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d3ee      	bcc.n	8015b3e <HMAC_SHA1+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 8015b60:	f7ff fb3c 	bl	80151dc <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 8015b64:	f04f 0300 	mov.w	r3, #0
 8015b68:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8015b6a:	f04f 0008 	mov.w	r0, #8
 8015b6e:	f7ff fc27 	bl	80153c0 <HASH_GetFlagStatus>
 8015b72:	4603      	mov	r3, r0
 8015b74:	66fb      	str	r3, [r7, #108]	; 0x6c
        counter++;
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	f103 0301 	add.w	r3, r3, #1
 8015b7c:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8015b7e:	697b      	ldr	r3, [r7, #20]
 8015b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b84:	d002      	beq.n	8015b8c <HMAC_SHA1+0x1d8>
 8015b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d1ee      	bne.n	8015b6a <HMAC_SHA1+0x1b6>

      if (busystatus != RESET)
 8015b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d004      	beq.n	8015b9c <HMAC_SHA1+0x1e8>
      {
        status = ERROR;
 8015b92:	f04f 0300 	mov.w	r3, #0
 8015b96:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8015b9a:	e03c      	b.n	8015c16 <HMAC_SHA1+0x262>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 8015b9c:	f107 031c 	add.w	r3, r7, #28
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7ff fae9 	bl	8015178 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8015ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015ba8:	69fa      	ldr	r2, [r7, #28]
 8015baa:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8015bac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015bae:	ba14      	rev	r4, r2
 8015bb0:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 8015bb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015bb4:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8015bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bb8:	f103 0304 	add.w	r3, r3, #4
 8015bbc:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8015bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bc0:	6a3a      	ldr	r2, [r7, #32]
 8015bc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8015bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015bc6:	ba14      	rev	r4, r2
 8015bc8:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8015bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015bcc:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8015bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bd0:	f103 0304 	add.w	r3, r3, #4
 8015bd4:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8015bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bda:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8015bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015bde:	ba14      	rev	r4, r2
 8015be0:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 8015be2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015be4:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8015be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015be8:	f103 0304 	add.w	r3, r3, #4
 8015bec:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8015bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015bf2:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8015bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015bf6:	ba14      	rev	r4, r2
 8015bf8:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8015bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015bfc:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8015bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c00:	f103 0304 	add.w	r3, r3, #4
 8015c04:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8015c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c0a:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8015c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c0e:	ba14      	rev	r4, r2
 8015c10:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8015c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c14:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 8015c16:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f107 0784 	add.w	r7, r7, #132	; 0x84
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd90      	pop	{r4, r7, pc}

08015c24 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b082      	sub	sp, #8
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8015c2c:	687a      	ldr	r2, [r7, #4]
 8015c2e:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8015c32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d10c      	bne.n	8015c54 <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8015c3a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8015c3e:	f04f 0101 	mov.w	r1, #1
 8015c42:	f001 fb8b 	bl	801735c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8015c46:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8015c4a:	f04f 0100 	mov.w	r1, #0
 8015c4e:	f001 fb85 	bl	801735c <RCC_APB1PeriphResetCmd>
 8015c52:	e026      	b.n	8015ca2 <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 8015c54:	687a      	ldr	r2, [r7, #4]
 8015c56:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8015c5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8015c5e:	429a      	cmp	r2, r3
 8015c60:	d10c      	bne.n	8015c7c <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8015c62:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8015c66:	f04f 0101 	mov.w	r1, #1
 8015c6a:	f001 fb77 	bl	801735c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8015c6e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8015c72:	f04f 0100 	mov.w	r1, #0
 8015c76:	f001 fb71 	bl	801735c <RCC_APB1PeriphResetCmd>
 8015c7a:	e012      	b.n	8015ca2 <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8015c82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8015c86:	429a      	cmp	r2, r3
 8015c88:	d10b      	bne.n	8015ca2 <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8015c8a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8015c8e:	f04f 0101 	mov.w	r1, #1
 8015c92:	f001 fb63 	bl	801735c <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8015c96:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8015c9a:	f04f 0100 	mov.w	r1, #0
 8015c9e:	f001 fb5d 	bl	801735c <RCC_APB1PeriphResetCmd>
    }
  }
}
 8015ca2:	f107 0708 	add.w	r7, r7, #8
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}
 8015caa:	bf00      	nop

08015cac <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b08a      	sub	sp, #40	; 0x28
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8015cb6:	f04f 0300 	mov.w	r3, #0
 8015cba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015cbc:	f04f 0300 	mov.w	r3, #0
 8015cc0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8015cc2:	f04f 0304 	mov.w	r3, #4
 8015cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8015cc8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8015ccc:	f2c0 037a 	movt	r3, #122	; 0x7a
 8015cd0:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	889b      	ldrh	r3, [r3, #4]
 8015cd6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8015cd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015cda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8015cde:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8015ce0:	f107 030c 	add.w	r3, r7, #12
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f001 f885 	bl	8016df4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8015cea:	697b      	ldr	r3, [r7, #20]
 8015cec:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8015cee:	69fa      	ldr	r2, [r7, #28]
 8015cf0:	f64d 6383 	movw	r3, #56963	; 0xde83
 8015cf4:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8015cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8015cfc:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8015d00:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8015d02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d06:	4313      	orrs	r3, r2
 8015d08:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015d0e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	881b      	ldrh	r3, [r3, #0]
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	f023 0301 	bic.w	r3, r3, #1
 8015d1a:	b29a      	uxth	r2, r3
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8015d20:	f04f 0300 	mov.w	r3, #0
 8015d24:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	681a      	ldr	r2, [r3, #0]
 8015d2a:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8015d2e:	f2c0 0301 	movt	r3, #1
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d818      	bhi.n	8015d68 <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015d3e:	69fa      	ldr	r2, [r7, #28]
 8015d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d44:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8015d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d48:	2b03      	cmp	r3, #3
 8015d4a:	d802      	bhi.n	8015d52 <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8015d4c:	f04f 0304 	mov.w	r3, #4
 8015d50:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8015d52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015d54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d56:	4313      	orrs	r3, r2
 8015d58:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8015d5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d5c:	f103 0301 	add.w	r3, r3, #1
 8015d60:	b29a      	uxth	r2, r3
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	841a      	strh	r2, [r3, #32]
 8015d66:	e04b      	b.n	8015e00 <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	88da      	ldrh	r2, [r3, #6]
 8015d6c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d10a      	bne.n	8015d8a <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	681a      	ldr	r2, [r3, #0]
 8015d78:	4613      	mov	r3, r2
 8015d7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015d7e:	189b      	adds	r3, r3, r2
 8015d80:	69fa      	ldr	r2, [r7, #28]
 8015d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8015d88:	e010      	b.n	8015dac <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	681a      	ldr	r2, [r3, #0]
 8015d8e:	4613      	mov	r3, r2
 8015d90:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8015d94:	189b      	adds	r3, r3, r2
 8015d96:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8015d9a:	189b      	adds	r3, r3, r2
 8015d9c:	69fa      	ldr	r2, [r7, #28]
 8015d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015da2:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8015da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015daa:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8015dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dae:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8015db2:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d103      	bne.n	8015dc2 <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8015dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dbc:	f043 0301 	orr.w	r3, r3, #1
 8015dc0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8015dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015dc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015dc6:	4313      	orrs	r3, r2
 8015dc8:	b29b      	uxth	r3, r3
 8015dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8015dd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015dd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015dda:	fb02 f203 	mul.w	r2, r2, r3
 8015dde:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8015de2:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8015de6:	fb83 1302 	smull	r1, r3, r3, r2
 8015dea:	ea4f 11a3 	mov.w	r1, r3, asr #6
 8015dee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8015df2:	1acb      	subs	r3, r1, r3
 8015df4:	b29b      	uxth	r3, r3
 8015df6:	f103 0301 	add.w	r3, r3, #1
 8015dfa:	b29a      	uxth	r2, r3
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e04:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	881b      	ldrh	r3, [r3, #0]
 8015e0a:	b29b      	uxth	r3, r3
 8015e0c:	f043 0301 	orr.w	r3, r3, #1
 8015e10:	b29a      	uxth	r2, r3
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	881b      	ldrh	r3, [r3, #0]
 8015e1a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8015e1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015e22:	f023 030a 	bic.w	r3, r3, #10
 8015e26:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	889a      	ldrh	r2, [r3, #4]
 8015e2c:	683b      	ldr	r3, [r7, #0]
 8015e2e:	895b      	ldrh	r3, [r3, #10]
 8015e30:	4313      	orrs	r3, r2
 8015e32:	b29a      	uxth	r2, r3
 8015e34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e36:	4313      	orrs	r3, r2
 8015e38:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e3e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	899a      	ldrh	r2, [r3, #12]
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	891b      	ldrh	r3, [r3, #8]
 8015e48:	4313      	orrs	r3, r2
 8015e4a:	b29a      	uxth	r2, r3
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	811a      	strh	r2, [r3, #8]
}
 8015e50:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}

08015e58 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8015e58:	b480      	push	{r7}
 8015e5a:	b083      	sub	sp, #12
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8015e66:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f04f 0200 	mov.w	r2, #0
 8015e6e:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8015e76:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f04f 0200 	mov.w	r2, #0
 8015e7e:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f04f 0200 	mov.w	r2, #0
 8015e86:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015e8e:	819a      	strh	r2, [r3, #12]
}
 8015e90:	f107 070c 	add.w	r7, r7, #12
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bc80      	pop	{r7}
 8015e98:	4770      	bx	lr
 8015e9a:	bf00      	nop

08015e9c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8015e9c:	b480      	push	{r7}
 8015e9e:	b083      	sub	sp, #12
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8015ea8:	78fb      	ldrb	r3, [r7, #3]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d008      	beq.n	8015ec0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	881b      	ldrh	r3, [r3, #0]
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	f043 0301 	orr.w	r3, r3, #1
 8015eb8:	b29a      	uxth	r2, r3
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	801a      	strh	r2, [r3, #0]
 8015ebe:	e007      	b.n	8015ed0 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	881b      	ldrh	r3, [r3, #0]
 8015ec4:	b29b      	uxth	r3, r3
 8015ec6:	f023 0301 	bic.w	r3, r3, #1
 8015eca:	b29a      	uxth	r2, r3
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	801a      	strh	r2, [r3, #0]
  }
}
 8015ed0:	f107 070c 	add.w	r7, r7, #12
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bc80      	pop	{r7}
 8015ed8:	4770      	bx	lr
 8015eda:	bf00      	nop

08015edc <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8015edc:	b480      	push	{r7}
 8015ede:	b083      	sub	sp, #12
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	460b      	mov	r3, r1
 8015ee6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8015ee8:	78fb      	ldrb	r3, [r7, #3]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d008      	beq.n	8015f00 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	881b      	ldrh	r3, [r3, #0]
 8015ef2:	b29b      	uxth	r3, r3
 8015ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ef8:	b29a      	uxth	r2, r3
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	801a      	strh	r2, [r3, #0]
 8015efe:	e007      	b.n	8015f10 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	881b      	ldrh	r3, [r3, #0]
 8015f04:	b29b      	uxth	r3, r3
 8015f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f0a:	b29a      	uxth	r2, r3
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	801a      	strh	r2, [r3, #0]
  }
}
 8015f10:	f107 070c 	add.w	r7, r7, #12
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bc80      	pop	{r7}
 8015f18:	4770      	bx	lr
 8015f1a:	bf00      	nop

08015f1c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8015f1c:	b480      	push	{r7}
 8015f1e:	b083      	sub	sp, #12
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	460b      	mov	r3, r1
 8015f26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8015f28:	78fb      	ldrb	r3, [r7, #3]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d008      	beq.n	8015f40 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	881b      	ldrh	r3, [r3, #0]
 8015f32:	b29b      	uxth	r3, r3
 8015f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015f38:	b29a      	uxth	r2, r3
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	801a      	strh	r2, [r3, #0]
 8015f3e:	e007      	b.n	8015f50 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	881b      	ldrh	r3, [r3, #0]
 8015f44:	b29b      	uxth	r3, r3
 8015f46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015f4a:	b29a      	uxth	r2, r3
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	801a      	strh	r2, [r3, #0]
  }
}
 8015f50:	f107 070c 	add.w	r7, r7, #12
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bc80      	pop	{r7}
 8015f58:	4770      	bx	lr
 8015f5a:	bf00      	nop

08015f5c <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	b083      	sub	sp, #12
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
 8015f64:	4613      	mov	r3, r2
 8015f66:	460a      	mov	r2, r1
 8015f68:	70fa      	strb	r2, [r7, #3]
 8015f6a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8015f6c:	78bb      	ldrb	r3, [r7, #2]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d004      	beq.n	8015f7c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8015f72:	78fb      	ldrb	r3, [r7, #3]
 8015f74:	f043 0301 	orr.w	r3, r3, #1
 8015f78:	70fb      	strb	r3, [r7, #3]
 8015f7a:	e003      	b.n	8015f84 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8015f7c:	78fb      	ldrb	r3, [r7, #3]
 8015f7e:	f023 0301 	bic.w	r3, r3, #1
 8015f82:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8015f84:	78fb      	ldrb	r3, [r7, #3]
 8015f86:	b29a      	uxth	r2, r3
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	821a      	strh	r2, [r3, #16]
}
 8015f8c:	f107 070c 	add.w	r7, r7, #12
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bc80      	pop	{r7}
 8015f94:	4770      	bx	lr
 8015f96:	bf00      	nop

08015f98 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b083      	sub	sp, #12
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	460b      	mov	r3, r1
 8015fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8015fa4:	78fb      	ldrb	r3, [r7, #3]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d008      	beq.n	8015fbc <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	881b      	ldrh	r3, [r3, #0]
 8015fae:	b29b      	uxth	r3, r3
 8015fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015fb4:	b29a      	uxth	r2, r3
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	801a      	strh	r2, [r3, #0]
 8015fba:	e007      	b.n	8015fcc <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	881b      	ldrh	r3, [r3, #0]
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015fc6:	b29a      	uxth	r2, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	801a      	strh	r2, [r3, #0]
  }
}
 8015fcc:	f107 070c 	add.w	r7, r7, #12
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bc80      	pop	{r7}
 8015fd4:	4770      	bx	lr
 8015fd6:	bf00      	nop

08015fd8 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8015fd8:	b480      	push	{r7}
 8015fda:	b085      	sub	sp, #20
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
 8015fe0:	460b      	mov	r3, r1
 8015fe2:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8015fe4:	f04f 0300 	mov.w	r3, #0
 8015fe8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	899b      	ldrh	r3, [r3, #12]
 8015fee:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8015ff0:	89fb      	ldrh	r3, [r7, #14]
 8015ff2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8015ff6:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8015ff8:	78fb      	ldrb	r3, [r7, #3]
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8016000:	b29a      	uxth	r2, r3
 8016002:	89fb      	ldrh	r3, [r7, #14]
 8016004:	4313      	orrs	r3, r2
 8016006:	b29b      	uxth	r3, r3
 8016008:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	89fa      	ldrh	r2, [r7, #14]
 801600e:	819a      	strh	r2, [r3, #12]
}
 8016010:	f107 0714 	add.w	r7, r7, #20
 8016014:	46bd      	mov	sp, r7
 8016016:	bc80      	pop	{r7}
 8016018:	4770      	bx	lr
 801601a:	bf00      	nop

0801601c <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 801601c:	b480      	push	{r7}
 801601e:	b083      	sub	sp, #12
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
 8016024:	460b      	mov	r3, r1
 8016026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8016028:	78fb      	ldrb	r3, [r7, #3]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d008      	beq.n	8016040 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	899b      	ldrh	r3, [r3, #12]
 8016032:	b29b      	uxth	r3, r3
 8016034:	f043 0301 	orr.w	r3, r3, #1
 8016038:	b29a      	uxth	r2, r3
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	819a      	strh	r2, [r3, #12]
 801603e:	e007      	b.n	8016050 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	899b      	ldrh	r3, [r3, #12]
 8016044:	b29b      	uxth	r3, r3
 8016046:	f023 0301 	bic.w	r3, r3, #1
 801604a:	b29a      	uxth	r2, r3
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	819a      	strh	r2, [r3, #12]
  }
}
 8016050:	f107 070c 	add.w	r7, r7, #12
 8016054:	46bd      	mov	sp, r7
 8016056:	bc80      	pop	{r7}
 8016058:	4770      	bx	lr
 801605a:	bf00      	nop

0801605c <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 801605c:	b480      	push	{r7}
 801605e:	b083      	sub	sp, #12
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
 8016064:	460b      	mov	r3, r1
 8016066:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8016068:	78fb      	ldrb	r3, [r7, #3]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d008      	beq.n	8016080 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	881b      	ldrh	r3, [r3, #0]
 8016072:	b29b      	uxth	r3, r3
 8016074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016078:	b29a      	uxth	r2, r3
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	801a      	strh	r2, [r3, #0]
 801607e:	e007      	b.n	8016090 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	881b      	ldrh	r3, [r3, #0]
 8016084:	b29b      	uxth	r3, r3
 8016086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801608a:	b29a      	uxth	r2, r3
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	801a      	strh	r2, [r3, #0]
  }
}
 8016090:	f107 070c 	add.w	r7, r7, #12
 8016094:	46bd      	mov	sp, r7
 8016096:	bc80      	pop	{r7}
 8016098:	4770      	bx	lr
 801609a:	bf00      	nop

0801609c <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 801609c:	b480      	push	{r7}
 801609e:	b083      	sub	sp, #12
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
 80160a4:	460b      	mov	r3, r1
 80160a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80160a8:	78fb      	ldrb	r3, [r7, #3]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d00a      	beq.n	80160c4 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	881b      	ldrh	r3, [r3, #0]
 80160b2:	b29b      	uxth	r3, r3
 80160b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80160b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80160bc:	b29a      	uxth	r2, r3
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	801a      	strh	r2, [r3, #0]
 80160c2:	e009      	b.n	80160d8 <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	881b      	ldrh	r3, [r3, #0]
 80160c8:	b29b      	uxth	r3, r3
 80160ca:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80160ce:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80160d2:	b29a      	uxth	r2, r3
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	801a      	strh	r2, [r3, #0]
  }
}
 80160d8:	f107 070c 	add.w	r7, r7, #12
 80160dc:	46bd      	mov	sp, r7
 80160de:	bc80      	pop	{r7}
 80160e0:	4770      	bx	lr
 80160e2:	bf00      	nop

080160e4 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80160e4:	b480      	push	{r7}
 80160e6:	b083      	sub	sp, #12
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
 80160ec:	460b      	mov	r3, r1
 80160ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80160f0:	78fb      	ldrb	r3, [r7, #3]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d108      	bne.n	8016108 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	881b      	ldrh	r3, [r3, #0]
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016100:	b29a      	uxth	r2, r3
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	801a      	strh	r2, [r3, #0]
 8016106:	e007      	b.n	8016118 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	881b      	ldrh	r3, [r3, #0]
 801610c:	b29b      	uxth	r3, r3
 801610e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016112:	b29a      	uxth	r2, r3
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	801a      	strh	r2, [r3, #0]
  }
}
 8016118:	f107 070c 	add.w	r7, r7, #12
 801611c:	46bd      	mov	sp, r7
 801611e:	bc80      	pop	{r7}
 8016120:	4770      	bx	lr
 8016122:	bf00      	nop

08016124 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8016124:	b480      	push	{r7}
 8016126:	b083      	sub	sp, #12
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	460b      	mov	r3, r1
 801612e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8016130:	887b      	ldrh	r3, [r7, #2]
 8016132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016136:	d008      	beq.n	801614a <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	8b9b      	ldrh	r3, [r3, #28]
 801613c:	b29b      	uxth	r3, r3
 801613e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016142:	b29a      	uxth	r2, r3
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	839a      	strh	r2, [r3, #28]
 8016148:	e007      	b.n	801615a <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	8b9b      	ldrh	r3, [r3, #28]
 801614e:	b29b      	uxth	r3, r3
 8016150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016154:	b29a      	uxth	r2, r3
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	839a      	strh	r2, [r3, #28]
  }
}
 801615a:	f107 070c 	add.w	r7, r7, #12
 801615e:	46bd      	mov	sp, r7
 8016160:	bc80      	pop	{r7}
 8016162:	4770      	bx	lr

08016164 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8016164:	b480      	push	{r7}
 8016166:	b083      	sub	sp, #12
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	460b      	mov	r3, r1
 801616e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8016170:	887b      	ldrh	r3, [r7, #2]
 8016172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016176:	d108      	bne.n	801618a <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	881b      	ldrh	r3, [r3, #0]
 801617c:	b29b      	uxth	r3, r3
 801617e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016182:	b29a      	uxth	r2, r3
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	801a      	strh	r2, [r3, #0]
 8016188:	e007      	b.n	801619a <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	881b      	ldrh	r3, [r3, #0]
 801618e:	b29b      	uxth	r3, r3
 8016190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016194:	b29a      	uxth	r2, r3
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	801a      	strh	r2, [r3, #0]
  }
}
 801619a:	f107 070c 	add.w	r7, r7, #12
 801619e:	46bd      	mov	sp, r7
 80161a0:	bc80      	pop	{r7}
 80161a2:	4770      	bx	lr

080161a4 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 80161a4:	b480      	push	{r7}
 80161a6:	b083      	sub	sp, #12
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	460b      	mov	r3, r1
 80161ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80161b0:	887b      	ldrh	r3, [r7, #2]
 80161b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80161b6:	d108      	bne.n	80161ca <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	881b      	ldrh	r3, [r3, #0]
 80161bc:	b29b      	uxth	r3, r3
 80161be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80161c2:	b29a      	uxth	r2, r3
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	801a      	strh	r2, [r3, #0]
 80161c8:	e007      	b.n	80161da <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	881b      	ldrh	r3, [r3, #0]
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80161d4:	b29a      	uxth	r2, r3
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	801a      	strh	r2, [r3, #0]
  }
}
 80161da:	f107 070c 	add.w	r7, r7, #12
 80161de:	46bd      	mov	sp, r7
 80161e0:	bc80      	pop	{r7}
 80161e2:	4770      	bx	lr

080161e4 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80161e4:	b480      	push	{r7}
 80161e6:	b083      	sub	sp, #12
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	460b      	mov	r3, r1
 80161ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80161f0:	78fb      	ldrb	r3, [r7, #3]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d008      	beq.n	8016208 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	881b      	ldrh	r3, [r3, #0]
 80161fa:	b29b      	uxth	r3, r3
 80161fc:	f043 0310 	orr.w	r3, r3, #16
 8016200:	b29a      	uxth	r2, r3
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	801a      	strh	r2, [r3, #0]
 8016206:	e007      	b.n	8016218 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	881b      	ldrh	r3, [r3, #0]
 801620c:	b29b      	uxth	r3, r3
 801620e:	f023 0310 	bic.w	r3, r3, #16
 8016212:	b29a      	uxth	r2, r3
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	801a      	strh	r2, [r3, #0]
  }
}
 8016218:	f107 070c 	add.w	r7, r7, #12
 801621c:	46bd      	mov	sp, r7
 801621e:	bc80      	pop	{r7}
 8016220:	4770      	bx	lr
 8016222:	bf00      	nop

08016224 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8016224:	b480      	push	{r7}
 8016226:	b083      	sub	sp, #12
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	460b      	mov	r3, r1
 801622e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8016230:	78fb      	ldrb	r3, [r7, #3]
 8016232:	b29a      	uxth	r2, r3
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	821a      	strh	r2, [r3, #16]
}
 8016238:	f107 070c 	add.w	r7, r7, #12
 801623c:	46bd      	mov	sp, r7
 801623e:	bc80      	pop	{r7}
 8016240:	4770      	bx	lr
 8016242:	bf00      	nop

08016244 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8016244:	b480      	push	{r7}
 8016246:	b083      	sub	sp, #12
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	8a1b      	ldrh	r3, [r3, #16]
 8016250:	b29b      	uxth	r3, r3
 8016252:	b2db      	uxtb	r3, r3
}
 8016254:	4618      	mov	r0, r3
 8016256:	f107 070c 	add.w	r7, r7, #12
 801625a:	46bd      	mov	sp, r7
 801625c:	bc80      	pop	{r7}
 801625e:	4770      	bx	lr

08016260 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8016260:	b480      	push	{r7}
 8016262:	b083      	sub	sp, #12
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
 8016268:	460b      	mov	r3, r1
 801626a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801626c:	78fb      	ldrb	r3, [r7, #3]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d008      	beq.n	8016284 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	881b      	ldrh	r3, [r3, #0]
 8016276:	b29b      	uxth	r3, r3
 8016278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801627c:	b29a      	uxth	r2, r3
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	801a      	strh	r2, [r3, #0]
 8016282:	e007      	b.n	8016294 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	881b      	ldrh	r3, [r3, #0]
 8016288:	b29b      	uxth	r3, r3
 801628a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801628e:	b29a      	uxth	r2, r3
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	801a      	strh	r2, [r3, #0]
  }
}
 8016294:	f107 070c 	add.w	r7, r7, #12
 8016298:	46bd      	mov	sp, r7
 801629a:	bc80      	pop	{r7}
 801629c:	4770      	bx	lr
 801629e:	bf00      	nop

080162a0 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 80162a0:	b480      	push	{r7}
 80162a2:	b083      	sub	sp, #12
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
 80162a8:	460b      	mov	r3, r1
 80162aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80162ac:	887b      	ldrh	r3, [r7, #2]
 80162ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80162b2:	d108      	bne.n	80162c6 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	881b      	ldrh	r3, [r3, #0]
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80162be:	b29a      	uxth	r2, r3
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	801a      	strh	r2, [r3, #0]
 80162c4:	e007      	b.n	80162d6 <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	881b      	ldrh	r3, [r3, #0]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80162d0:	b29a      	uxth	r2, r3
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	801a      	strh	r2, [r3, #0]
  }
}
 80162d6:	f107 070c 	add.w	r7, r7, #12
 80162da:	46bd      	mov	sp, r7
 80162dc:	bc80      	pop	{r7}
 80162de:	4770      	bx	lr

080162e0 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80162e0:	b480      	push	{r7}
 80162e2:	b083      	sub	sp, #12
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	460b      	mov	r3, r1
 80162ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80162ec:	78fb      	ldrb	r3, [r7, #3]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d008      	beq.n	8016304 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	881b      	ldrh	r3, [r3, #0]
 80162f6:	b29b      	uxth	r3, r3
 80162f8:	f043 0320 	orr.w	r3, r3, #32
 80162fc:	b29a      	uxth	r2, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	801a      	strh	r2, [r3, #0]
 8016302:	e007      	b.n	8016314 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	881b      	ldrh	r3, [r3, #0]
 8016308:	b29b      	uxth	r3, r3
 801630a:	f023 0320 	bic.w	r3, r3, #32
 801630e:	b29a      	uxth	r2, r3
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	801a      	strh	r2, [r3, #0]
  }
}
 8016314:	f107 070c 	add.w	r7, r7, #12
 8016318:	46bd      	mov	sp, r7
 801631a:	bc80      	pop	{r7}
 801631c:	4770      	bx	lr
 801631e:	bf00      	nop

08016320 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8016320:	b480      	push	{r7}
 8016322:	b083      	sub	sp, #12
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	8b1b      	ldrh	r3, [r3, #24]
 801632c:	b29b      	uxth	r3, r3
 801632e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8016332:	b29b      	uxth	r3, r3
 8016334:	b2db      	uxtb	r3, r3
}
 8016336:	4618      	mov	r0, r3
 8016338:	f107 070c 	add.w	r7, r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	bc80      	pop	{r7}
 8016340:	4770      	bx	lr
 8016342:	bf00      	nop

08016344 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8016344:	b480      	push	{r7}
 8016346:	b083      	sub	sp, #12
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	460b      	mov	r3, r1
 801634e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8016350:	78fb      	ldrb	r3, [r7, #3]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d008      	beq.n	8016368 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	889b      	ldrh	r3, [r3, #4]
 801635a:	b29b      	uxth	r3, r3
 801635c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016360:	b29a      	uxth	r2, r3
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	809a      	strh	r2, [r3, #4]
 8016366:	e007      	b.n	8016378 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	889b      	ldrh	r3, [r3, #4]
 801636c:	b29b      	uxth	r3, r3
 801636e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016372:	b29a      	uxth	r2, r3
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	809a      	strh	r2, [r3, #4]
  }
}
 8016378:	f107 070c 	add.w	r7, r7, #12
 801637c:	46bd      	mov	sp, r7
 801637e:	bc80      	pop	{r7}
 8016380:	4770      	bx	lr
 8016382:	bf00      	nop

08016384 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8016384:	b480      	push	{r7}
 8016386:	b083      	sub	sp, #12
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	460b      	mov	r3, r1
 801638e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8016390:	78fb      	ldrb	r3, [r7, #3]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d008      	beq.n	80163a8 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	889b      	ldrh	r3, [r3, #4]
 801639a:	b29b      	uxth	r3, r3
 801639c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80163a0:	b29a      	uxth	r2, r3
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	809a      	strh	r2, [r3, #4]
 80163a6:	e007      	b.n	80163b8 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	889b      	ldrh	r3, [r3, #4]
 80163ac:	b29b      	uxth	r3, r3
 80163ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80163b2:	b29a      	uxth	r2, r3
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	809a      	strh	r2, [r3, #4]
  }
}
 80163b8:	f107 070c 	add.w	r7, r7, #12
 80163bc:	46bd      	mov	sp, r7
 80163be:	bc80      	pop	{r7}
 80163c0:	4770      	bx	lr
 80163c2:	bf00      	nop

080163c4 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80163c4:	b480      	push	{r7}
 80163c6:	b085      	sub	sp, #20
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	460b      	mov	r3, r1
 80163ce:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 80163d0:	f04f 0300 	mov.w	r3, #0
 80163d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 80163da:	78fa      	ldrb	r2, [r7, #3]
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	18d3      	adds	r3, r2, r3
 80163e0:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	881b      	ldrh	r3, [r3, #0]
 80163e6:	b29b      	uxth	r3, r3
}
 80163e8:	4618      	mov	r0, r3
 80163ea:	f107 0714 	add.w	r7, r7, #20
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bc80      	pop	{r7}
 80163f2:	4770      	bx	lr

080163f4 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80163f4:	b480      	push	{r7}
 80163f6:	b083      	sub	sp, #12
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
 80163fc:	4613      	mov	r3, r2
 80163fe:	460a      	mov	r2, r1
 8016400:	807a      	strh	r2, [r7, #2]
 8016402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8016404:	787b      	ldrb	r3, [r7, #1]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d008      	beq.n	801641c <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	889b      	ldrh	r3, [r3, #4]
 801640e:	b29a      	uxth	r2, r3
 8016410:	887b      	ldrh	r3, [r7, #2]
 8016412:	4313      	orrs	r3, r2
 8016414:	b29a      	uxth	r2, r3
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	809a      	strh	r2, [r3, #4]
 801641a:	e00a      	b.n	8016432 <I2C_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	889b      	ldrh	r3, [r3, #4]
 8016420:	b29a      	uxth	r2, r3
 8016422:	887b      	ldrh	r3, [r7, #2]
 8016424:	ea6f 0303 	mvn.w	r3, r3
 8016428:	b29b      	uxth	r3, r3
 801642a:	4013      	ands	r3, r2
 801642c:	b29a      	uxth	r2, r3
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	809a      	strh	r2, [r3, #4]
  }
}
 8016432:	f107 070c 	add.w	r7, r7, #12
 8016436:	46bd      	mov	sp, r7
 8016438:	bc80      	pop	{r7}
 801643a:	4770      	bx	lr

0801643c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 801643c:	b480      	push	{r7}
 801643e:	b087      	sub	sp, #28
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8016446:	f04f 0300 	mov.w	r3, #0
 801644a:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 801644c:	f04f 0300 	mov.w	r3, #0
 8016450:	60fb      	str	r3, [r7, #12]
 8016452:	f04f 0300 	mov.w	r3, #0
 8016456:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8016458:	f04f 0300 	mov.w	r3, #0
 801645c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	8a9b      	ldrh	r3, [r3, #20]
 8016462:	b29b      	uxth	r3, r3
 8016464:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	8b1b      	ldrh	r3, [r3, #24]
 801646a:	b29b      	uxth	r3, r3
 801646c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8016474:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8016476:	68fa      	ldr	r2, [r7, #12]
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	4313      	orrs	r3, r2
 801647c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016480:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8016482:	693a      	ldr	r2, [r7, #16]
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	401a      	ands	r2, r3
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	429a      	cmp	r2, r3
 801648c:	d103      	bne.n	8016496 <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 801648e:	f04f 0301 	mov.w	r3, #1
 8016492:	75fb      	strb	r3, [r7, #23]
 8016494:	e002      	b.n	801649c <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8016496:	f04f 0300 	mov.w	r3, #0
 801649a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 801649c:	7dfb      	ldrb	r3, [r7, #23]
}
 801649e:	4618      	mov	r0, r3
 80164a0:	f107 071c 	add.w	r7, r7, #28
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bc80      	pop	{r7}
 80164a8:	4770      	bx	lr
 80164aa:	bf00      	nop

080164ac <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 80164ac:	b480      	push	{r7}
 80164ae:	b087      	sub	sp, #28
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 80164b4:	f04f 0300 	mov.w	r3, #0
 80164b8:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 80164ba:	f04f 0300 	mov.w	r3, #0
 80164be:	613b      	str	r3, [r7, #16]
 80164c0:	f04f 0300 	mov.w	r3, #0
 80164c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	8a9b      	ldrh	r3, [r3, #20]
 80164ca:	b29b      	uxth	r3, r3
 80164cc:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	8b1b      	ldrh	r3, [r3, #24]
 80164d2:	b29b      	uxth	r3, r3
 80164d4:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80164dc:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80164de:	693a      	ldr	r2, [r7, #16]
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	4313      	orrs	r3, r2
 80164e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80164e8:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 80164ea:	697b      	ldr	r3, [r7, #20]
}
 80164ec:	4618      	mov	r0, r3
 80164ee:	f107 071c 	add.w	r7, r7, #28
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bc80      	pop	{r7}
 80164f6:	4770      	bx	lr

080164f8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80164f8:	b480      	push	{r7}
 80164fa:	b087      	sub	sp, #28
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
 8016500:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8016502:	f04f 0300 	mov.w	r3, #0
 8016506:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8016508:	f04f 0300 	mov.w	r3, #0
 801650c:	613b      	str	r3, [r7, #16]
 801650e:	f04f 0300 	mov.w	r3, #0
 8016512:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	ea4f 7313 	mov.w	r3, r3, lsr #28
 801651e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8016520:	683b      	ldr	r3, [r7, #0]
 8016522:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016526:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d004      	beq.n	8016538 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	f103 0314 	add.w	r3, r3, #20
 8016534:	60fb      	str	r3, [r7, #12]
 8016536:	e007      	b.n	8016548 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8016538:	683b      	ldr	r3, [r7, #0]
 801653a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801653e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	f103 0318 	add.w	r3, r3, #24
 8016546:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	681a      	ldr	r2, [r3, #0]
 801654c:	683b      	ldr	r3, [r7, #0]
 801654e:	4013      	ands	r3, r2
 8016550:	2b00      	cmp	r3, #0
 8016552:	d003      	beq.n	801655c <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8016554:	f04f 0301 	mov.w	r3, #1
 8016558:	75fb      	strb	r3, [r7, #23]
 801655a:	e002      	b.n	8016562 <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 801655c:	f04f 0300 	mov.w	r3, #0
 8016560:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8016562:	7dfb      	ldrb	r3, [r7, #23]
}
 8016564:	4618      	mov	r0, r3
 8016566:	f107 071c 	add.w	r7, r7, #28
 801656a:	46bd      	mov	sp, r7
 801656c:	bc80      	pop	{r7}
 801656e:	4770      	bx	lr

08016570 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8016570:	b480      	push	{r7}
 8016572:	b085      	sub	sp, #20
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 801657a:	f04f 0300 	mov.w	r3, #0
 801657e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016586:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	b29b      	uxth	r3, r3
 801658c:	ea6f 0303 	mvn.w	r3, r3
 8016590:	b29a      	uxth	r2, r3
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	829a      	strh	r2, [r3, #20]
}
 8016596:	f107 0714 	add.w	r7, r7, #20
 801659a:	46bd      	mov	sp, r7
 801659c:	bc80      	pop	{r7}
 801659e:	4770      	bx	lr

080165a0 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80165a0:	b480      	push	{r7}
 80165a2:	b085      	sub	sp, #20
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80165aa:	f04f 0300 	mov.w	r3, #0
 80165ae:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80165b0:	f04f 0300 	mov.w	r3, #0
 80165b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80165bc:	ea4f 4213 	mov.w	r2, r3, lsr #16
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	889b      	ldrh	r3, [r3, #4]
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	4013      	ands	r3, r2
 80165c8:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80165d0:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	8a9b      	ldrh	r3, [r3, #20]
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	461a      	mov	r2, r3
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	4013      	ands	r3, r2
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d006      	beq.n	80165f0 <I2C_GetITStatus+0x50>
 80165e2:	68bb      	ldr	r3, [r7, #8]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d003      	beq.n	80165f0 <I2C_GetITStatus+0x50>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80165e8:	f04f 0301 	mov.w	r3, #1
 80165ec:	73fb      	strb	r3, [r7, #15]
 80165ee:	e002      	b.n	80165f6 <I2C_GetITStatus+0x56>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 80165f0:	f04f 0300 	mov.w	r3, #0
 80165f4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 80165f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	f107 0714 	add.w	r7, r7, #20
 80165fe:	46bd      	mov	sp, r7
 8016600:	bc80      	pop	{r7}
 8016602:	4770      	bx	lr

08016604 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8016604:	b480      	push	{r7}
 8016606:	b085      	sub	sp, #20
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 801660e:	f04f 0300 	mov.w	r3, #0
 8016612:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801661a:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	b29b      	uxth	r3, r3
 8016620:	ea6f 0303 	mvn.w	r3, r3
 8016624:	b29a      	uxth	r2, r3
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	829a      	strh	r2, [r3, #20]
}
 801662a:	f107 0714 	add.w	r7, r7, #20
 801662e:	46bd      	mov	sp, r7
 8016630:	bc80      	pop	{r7}
 8016632:	4770      	bx	lr

08016634 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8016634:	b480      	push	{r7}
 8016636:	b083      	sub	sp, #12
 8016638:	af00      	add	r7, sp, #0
 801663a:	4603      	mov	r3, r0
 801663c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 801663e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8016642:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8016646:	88fa      	ldrh	r2, [r7, #6]
 8016648:	601a      	str	r2, [r3, #0]
}
 801664a:	f107 070c 	add.w	r7, r7, #12
 801664e:	46bd      	mov	sp, r7
 8016650:	bc80      	pop	{r7}
 8016652:	4770      	bx	lr

08016654 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8016654:	b480      	push	{r7}
 8016656:	b083      	sub	sp, #12
 8016658:	af00      	add	r7, sp, #0
 801665a:	4603      	mov	r3, r0
 801665c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 801665e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8016662:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8016666:	79fa      	ldrb	r2, [r7, #7]
 8016668:	605a      	str	r2, [r3, #4]
}
 801666a:	f107 070c 	add.w	r7, r7, #12
 801666e:	46bd      	mov	sp, r7
 8016670:	bc80      	pop	{r7}
 8016672:	4770      	bx	lr

08016674 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8016674:	b480      	push	{r7}
 8016676:	b083      	sub	sp, #12
 8016678:	af00      	add	r7, sp, #0
 801667a:	4603      	mov	r3, r0
 801667c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 801667e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8016682:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8016686:	88fa      	ldrh	r2, [r7, #6]
 8016688:	609a      	str	r2, [r3, #8]
}
 801668a:	f107 070c 	add.w	r7, r7, #12
 801668e:	46bd      	mov	sp, r7
 8016690:	bc80      	pop	{r7}
 8016692:	4770      	bx	lr

08016694 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 8016694:	b480      	push	{r7}
 8016696:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 8016698:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801669c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80166a0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80166a4:	601a      	str	r2, [r3, #0]
}
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bc80      	pop	{r7}
 80166aa:	4770      	bx	lr

080166ac <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 80166ac:	b480      	push	{r7}
 80166ae:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 80166b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80166b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80166b8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80166bc:	601a      	str	r2, [r3, #0]
}
 80166be:	46bd      	mov	sp, r7
 80166c0:	bc80      	pop	{r7}
 80166c2:	4770      	bx	lr

080166c4 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 80166c4:	b480      	push	{r7}
 80166c6:	b085      	sub	sp, #20
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	4603      	mov	r3, r0
 80166cc:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80166ce:	f04f 0300 	mov.w	r3, #0
 80166d2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 80166d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80166d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80166dc:	68db      	ldr	r3, [r3, #12]
 80166de:	461a      	mov	r2, r3
 80166e0:	88fb      	ldrh	r3, [r7, #6]
 80166e2:	4013      	ands	r3, r2
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d003      	beq.n	80166f0 <IWDG_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
 80166e8:	f04f 0301 	mov.w	r3, #1
 80166ec:	73fb      	strb	r3, [r7, #15]
 80166ee:	e002      	b.n	80166f6 <IWDG_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 80166f0:	f04f 0300 	mov.w	r3, #0
 80166f4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80166f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	f107 0714 	add.w	r7, r7, #20
 80166fe:	46bd      	mov	sp, r7
 8016700:	bc80      	pop	{r7}
 8016702:	4770      	bx	lr

08016704 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8016708:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801670c:	f04f 0101 	mov.w	r1, #1
 8016710:	f000 fe24 	bl	801735c <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8016714:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8016718:	f04f 0100 	mov.w	r1, #0
 801671c:	f000 fe1e 	bl	801735c <RCC_APB1PeriphResetCmd>
}
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop

08016724 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8016724:	b480      	push	{r7}
 8016726:	b083      	sub	sp, #12
 8016728:	af00      	add	r7, sp, #0
 801672a:	4603      	mov	r3, r0
 801672c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 801672e:	f04f 0320 	mov.w	r3, #32
 8016732:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8016736:	79fa      	ldrb	r2, [r7, #7]
 8016738:	601a      	str	r2, [r3, #0]
}
 801673a:	f107 070c 	add.w	r7, r7, #12
 801673e:	46bd      	mov	sp, r7
 8016740:	bc80      	pop	{r7}
 8016742:	4770      	bx	lr

08016744 <PWR_PVDLevelConfig>:
  *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
  * @note   Refer to the electrical characteristics of you device datasheet for more details. 
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8016744:	b480      	push	{r7}
 8016746:	b085      	sub	sp, #20
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 801674c:	f04f 0300 	mov.w	r3, #0
 8016750:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8016752:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8016756:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8016764:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8016766:	68fa      	ldr	r2, [r7, #12]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	4313      	orrs	r3, r2
 801676c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 801676e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8016772:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8016776:	68fa      	ldr	r2, [r7, #12]
 8016778:	601a      	str	r2, [r3, #0]
}
 801677a:	f107 0714 	add.w	r7, r7, #20
 801677e:	46bd      	mov	sp, r7
 8016780:	bc80      	pop	{r7}
 8016782:	4770      	bx	lr

08016784 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8016784:	b480      	push	{r7}
 8016786:	b083      	sub	sp, #12
 8016788:	af00      	add	r7, sp, #0
 801678a:	4603      	mov	r3, r0
 801678c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 801678e:	f04f 0310 	mov.w	r3, #16
 8016792:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8016796:	79fa      	ldrb	r2, [r7, #7]
 8016798:	601a      	str	r2, [r3, #0]
}
 801679a:	f107 070c 	add.w	r7, r7, #12
 801679e:	46bd      	mov	sp, r7
 80167a0:	bc80      	pop	{r7}
 80167a2:	4770      	bx	lr

080167a4 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 80167a4:	b480      	push	{r7}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	4603      	mov	r3, r0
 80167ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 80167ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80167b2:	f2c4 230e 	movt	r3, #16910	; 0x420e
 80167b6:	79fa      	ldrb	r2, [r7, #7]
 80167b8:	601a      	str	r2, [r3, #0]
}
 80167ba:	f107 070c 	add.w	r7, r7, #12
 80167be:	46bd      	mov	sp, r7
 80167c0:	bc80      	pop	{r7}
 80167c2:	4770      	bx	lr

080167c4 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 80167c4:	b480      	push	{r7}
 80167c6:	b083      	sub	sp, #12
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	4603      	mov	r3, r0
 80167cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 80167ce:	f04f 03a4 	mov.w	r3, #164	; 0xa4
 80167d2:	f2c4 230e 	movt	r3, #16910	; 0x420e
 80167d6:	79fa      	ldrb	r2, [r7, #7]
 80167d8:	601a      	str	r2, [r3, #0]
}
 80167da:	f107 070c 	add.w	r7, r7, #12
 80167de:	46bd      	mov	sp, r7
 80167e0:	bc80      	pop	{r7}
 80167e2:	4770      	bx	lr

080167e4 <PWR_HighPerformanceModeCmd>:
  * @param  NewState: new state of the performance mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_HighPerformanceModeCmd(FunctionalState NewState)
{
 80167e4:	b480      	push	{r7}
 80167e6:	b083      	sub	sp, #12
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	4603      	mov	r3, r0
 80167ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PMODE_BB = (uint32_t)NewState;
 80167ee:	f04f 0338 	mov.w	r3, #56	; 0x38
 80167f2:	f2c4 230e 	movt	r3, #16910	; 0x420e
 80167f6:	79fa      	ldrb	r2, [r7, #7]
 80167f8:	601a      	str	r2, [r3, #0]
}
 80167fa:	f107 070c 	add.w	r7, r7, #12
 80167fe:	46bd      	mov	sp, r7
 8016800:	bc80      	pop	{r7}
 8016802:	4770      	bx	lr

08016804 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 8016804:	b480      	push	{r7}
 8016806:	b083      	sub	sp, #12
 8016808:	af00      	add	r7, sp, #0
 801680a:	4603      	mov	r3, r0
 801680c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 801680e:	f04f 0324 	mov.w	r3, #36	; 0x24
 8016812:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8016816:	79fa      	ldrb	r2, [r7, #7]
 8016818:	601a      	str	r2, [r3, #0]
}
 801681a:	f107 070c 	add.w	r7, r7, #12
 801681e:	46bd      	mov	sp, r7
 8016820:	bc80      	pop	{r7}
 8016822:	4770      	bx	lr

08016824 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8016824:	b480      	push	{r7}
 8016826:	b085      	sub	sp, #20
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	460b      	mov	r3, r1
 801682e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8016830:	f04f 0300 	mov.w	r3, #0
 8016834:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8016836:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 801683a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	f023 0303 	bic.w	r3, r3, #3
 8016848:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 801684a:	68fa      	ldr	r2, [r7, #12]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	4313      	orrs	r3, r2
 8016850:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8016852:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8016856:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801685a:	68fa      	ldr	r2, [r7, #12]
 801685c:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 801685e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8016862:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8016866:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 801686a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 801686e:	6912      	ldr	r2, [r2, #16]
 8016870:	f042 0204 	orr.w	r2, r2, #4
 8016874:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8016876:	78fb      	ldrb	r3, [r7, #3]
 8016878:	2b01      	cmp	r3, #1
 801687a:	d101      	bne.n	8016880 <PWR_EnterSTOPMode+0x5c>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 801687c:	bf30      	wfi
 801687e:	e000      	b.n	8016882 <PWR_EnterSTOPMode+0x5e>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8016880:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8016882:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8016886:	f2ce 0300 	movt	r3, #57344	; 0xe000
 801688a:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 801688e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8016892:	6912      	ldr	r2, [r2, #16]
 8016894:	f022 0204 	bic.w	r2, r2, #4
 8016898:	611a      	str	r2, [r3, #16]
}
 801689a:	f107 0714 	add.w	r7, r7, #20
 801689e:	46bd      	mov	sp, r7
 80168a0:	bc80      	pop	{r7}
 80168a2:	4770      	bx	lr

080168a4 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 80168a4:	b480      	push	{r7}
 80168a6:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 80168a8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80168ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80168b0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80168b4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80168b8:	6812      	ldr	r2, [r2, #0]
 80168ba:	f042 0204 	orr.w	r2, r2, #4
 80168be:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80168c0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80168c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80168c8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80168cc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80168d0:	6812      	ldr	r2, [r2, #0]
 80168d2:	f042 0202 	orr.w	r2, r2, #2
 80168d6:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80168d8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80168dc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80168e0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80168e4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80168e8:	6912      	ldr	r2, [r2, #16]
 80168ea:	f042 0204 	orr.w	r2, r2, #4
 80168ee:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80168f0:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bc80      	pop	{r7}
 80168f6:	4770      	bx	lr

080168f8 <PWR_GetFlagStatus>:
  *                  or power reset.  
  *            @arg PWR_FLAG_REGRDY: Main regulator ready flag. 
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 80168f8:	b480      	push	{r7}
 80168fa:	b085      	sub	sp, #20
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8016900:	f04f 0300 	mov.w	r3, #0
 8016904:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8016906:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 801690a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801690e:	685b      	ldr	r3, [r3, #4]
 8016910:	461a      	mov	r2, r3
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	4013      	ands	r3, r2
 8016916:	2b00      	cmp	r3, #0
 8016918:	d003      	beq.n	8016922 <PWR_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 801691a:	f04f 0301 	mov.w	r3, #1
 801691e:	73fb      	strb	r3, [r7, #15]
 8016920:	e002      	b.n	8016928 <PWR_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8016922:	f04f 0300 	mov.w	r3, #0
 8016926:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8016928:	7bfb      	ldrb	r3, [r7, #15]
}
 801692a:	4618      	mov	r0, r3
 801692c:	f107 0714 	add.w	r7, r7, #20
 8016930:	46bd      	mov	sp, r7
 8016932:	bc80      	pop	{r7}
 8016934:	4770      	bx	lr
 8016936:	bf00      	nop

08016938 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 8016938:	b480      	push	{r7}
 801693a:	b083      	sub	sp, #12
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8016940:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8016944:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8016948:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 801694c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8016950:	6812      	ldr	r2, [r2, #0]
 8016952:	4611      	mov	r1, r2
 8016954:	687a      	ldr	r2, [r7, #4]
 8016956:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801695a:	430a      	orrs	r2, r1
 801695c:	601a      	str	r2, [r3, #0]
}
 801695e:	f107 070c 	add.w	r7, r7, #12
 8016962:	46bd      	mov	sp, r7
 8016964:	bc80      	pop	{r7}
 8016966:	4770      	bx	lr

08016968 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8016968:	b480      	push	{r7}
 801696a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801696c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016970:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016974:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8016978:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801697c:	6812      	ldr	r2, [r2, #0]
 801697e:	f042 0201 	orr.w	r2, r2, #1
 8016982:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8016984:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016988:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801698c:	f04f 0200 	mov.w	r2, #0
 8016990:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8016992:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016996:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801699a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801699e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80169a2:	6812      	ldr	r2, [r2, #0]
 80169a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80169a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80169ac:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80169ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80169b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80169b6:	f243 0210 	movw	r2, #12304	; 0x3010
 80169ba:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80169be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80169c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80169c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80169c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80169cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80169d0:	6812      	ldr	r2, [r2, #0]
 80169d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80169d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80169d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80169dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80169e0:	f04f 0200 	mov.w	r2, #0
 80169e4:	60da      	str	r2, [r3, #12]
}
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bc80      	pop	{r7}
 80169ea:	4770      	bx	lr

080169ec <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80169ec:	b480      	push	{r7}
 80169ee:	b083      	sub	sp, #12
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	4603      	mov	r3, r0
 80169f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80169f6:	f643 0302 	movw	r3, #14338	; 0x3802
 80169fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80169fe:	f04f 0200 	mov.w	r2, #0
 8016a02:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8016a04:	f643 0302 	movw	r3, #14338	; 0x3802
 8016a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016a0c:	79fa      	ldrb	r2, [r7, #7]
 8016a0e:	701a      	strb	r2, [r3, #0]
}
 8016a10:	f107 070c 	add.w	r7, r7, #12
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bc80      	pop	{r7}
 8016a18:	4770      	bx	lr
 8016a1a:	bf00      	nop

08016a1c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8016a22:	f04f 0300 	mov.w	r3, #0
 8016a26:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8016a28:	f04f 0300 	mov.w	r3, #0
 8016a2c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8016a2e:	f04f 0300 	mov.w	r3, #0
 8016a32:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8016a34:	f04f 0031 	mov.w	r0, #49	; 0x31
 8016a38:	f000 fdf4 	bl	8017624 <RCC_GetFlagStatus>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	f103 0301 	add.w	r3, r3, #1
 8016a46:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8016a4e:	d002      	beq.n	8016a56 <RCC_WaitForHSEStartUp+0x3a>
 8016a50:	79bb      	ldrb	r3, [r7, #6]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d0ee      	beq.n	8016a34 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8016a56:	f04f 0031 	mov.w	r0, #49	; 0x31
 8016a5a:	f000 fde3 	bl	8017624 <RCC_GetFlagStatus>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d003      	beq.n	8016a6c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8016a64:	f04f 0301 	mov.w	r3, #1
 8016a68:	71fb      	strb	r3, [r7, #7]
 8016a6a:	e002      	b.n	8016a72 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8016a6c:	f04f 0300 	mov.w	r3, #0
 8016a70:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8016a72:	79fb      	ldrb	r3, [r7, #7]
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	f107 0708 	add.w	r7, r7, #8
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bd80      	pop	{r7, pc}
 8016a7e:	bf00      	nop

08016a80 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8016a80:	b480      	push	{r7}
 8016a82:	b085      	sub	sp, #20
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	4603      	mov	r3, r0
 8016a88:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8016a8a:	f04f 0300 	mov.w	r3, #0
 8016a8e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8016a90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016a94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8016aa2:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8016aa4:	79fb      	ldrb	r3, [r7, #7]
 8016aa6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8016aaa:	68fa      	ldr	r2, [r7, #12]
 8016aac:	4313      	orrs	r3, r2
 8016aae:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8016ab0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016ab4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016ab8:	68fa      	ldr	r2, [r7, #12]
 8016aba:	601a      	str	r2, [r3, #0]
}
 8016abc:	f107 0714 	add.w	r7, r7, #20
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bc80      	pop	{r7}
 8016ac4:	4770      	bx	lr
 8016ac6:	bf00      	nop

08016ac8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8016ac8:	b480      	push	{r7}
 8016aca:	b083      	sub	sp, #12
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	4603      	mov	r3, r0
 8016ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8016ad2:	f04f 0300 	mov.w	r3, #0
 8016ad6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8016ada:	79fa      	ldrb	r2, [r7, #7]
 8016adc:	601a      	str	r2, [r3, #0]
}
 8016ade:	f107 070c 	add.w	r7, r7, #12
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bc80      	pop	{r7}
 8016ae6:	4770      	bx	lr

08016ae8 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8016ae8:	b480      	push	{r7}
 8016aea:	b083      	sub	sp, #12
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	4603      	mov	r3, r0
 8016af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8016af2:	f643 0370 	movw	r3, #14448	; 0x3870
 8016af6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016afa:	f04f 0200 	mov.w	r2, #0
 8016afe:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8016b00:	f643 0370 	movw	r3, #14448	; 0x3870
 8016b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016b08:	f04f 0200 	mov.w	r2, #0
 8016b0c:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8016b0e:	79fb      	ldrb	r3, [r7, #7]
 8016b10:	2b01      	cmp	r3, #1
 8016b12:	d002      	beq.n	8016b1a <RCC_LSEConfig+0x32>
 8016b14:	2b04      	cmp	r3, #4
 8016b16:	d008      	beq.n	8016b2a <RCC_LSEConfig+0x42>
 8016b18:	e00f      	b.n	8016b3a <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8016b1a:	f643 0370 	movw	r3, #14448	; 0x3870
 8016b1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016b22:	f04f 0201 	mov.w	r2, #1
 8016b26:	701a      	strb	r2, [r3, #0]
      break;
 8016b28:	e008      	b.n	8016b3c <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8016b2a:	f643 0370 	movw	r3, #14448	; 0x3870
 8016b2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016b32:	f04f 0205 	mov.w	r2, #5
 8016b36:	701a      	strb	r2, [r3, #0]
      break;
 8016b38:	e000      	b.n	8016b3c <RCC_LSEConfig+0x54>
    default:
      break;
 8016b3a:	bf00      	nop
  }
}
 8016b3c:	f107 070c 	add.w	r7, r7, #12
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bc80      	pop	{r7}
 8016b44:	4770      	bx	lr
 8016b46:	bf00      	nop

08016b48 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b083      	sub	sp, #12
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	4603      	mov	r3, r0
 8016b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8016b52:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8016b56:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8016b5a:	79fa      	ldrb	r2, [r7, #7]
 8016b5c:	601a      	str	r2, [r3, #0]
}
 8016b5e:	f107 070c 	add.w	r7, r7, #12
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bc80      	pop	{r7}
 8016b66:	4770      	bx	lr

08016b68 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b085      	sub	sp, #20
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
 8016b74:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8016b76:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016b7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016b7e:	687a      	ldr	r2, [r7, #4]
 8016b80:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8016b84:	68ba      	ldr	r2, [r7, #8]
 8016b86:	4311      	orrs	r1, r2
 8016b88:	683a      	ldr	r2, [r7, #0]
 8016b8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8016b8e:	f102 32ff 	add.w	r2, r2, #4294967295
 8016b92:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8016b96:	4311      	orrs	r1, r2
 8016b98:	68fa      	ldr	r2, [r7, #12]
 8016b9a:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8016b9c:	69ba      	ldr	r2, [r7, #24]
 8016b9e:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8016ba2:	430a      	orrs	r2, r1
 8016ba4:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8016ba6:	f107 0714 	add.w	r7, r7, #20
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bc80      	pop	{r7}
 8016bae:	4770      	bx	lr

08016bb0 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8016bb0:	b480      	push	{r7}
 8016bb2:	b083      	sub	sp, #12
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8016bba:	f04f 0360 	mov.w	r3, #96	; 0x60
 8016bbe:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8016bc2:	79fa      	ldrb	r2, [r7, #7]
 8016bc4:	601a      	str	r2, [r3, #0]
}
 8016bc6:	f107 070c 	add.w	r7, r7, #12
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bc80      	pop	{r7}
 8016bce:	4770      	bx	lr

08016bd0 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8016bd0:	b480      	push	{r7}
 8016bd2:	b083      	sub	sp, #12
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	6078      	str	r0, [r7, #4]
 8016bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8016bda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016bde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016be2:	687a      	ldr	r2, [r7, #4]
 8016be4:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8016be8:	683a      	ldr	r2, [r7, #0]
 8016bea:	ea4f 7202 	mov.w	r2, r2, lsl #28
 8016bee:	430a      	orrs	r2, r1
 8016bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8016bf4:	f107 070c 	add.w	r7, r7, #12
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bc80      	pop	{r7}
 8016bfc:	4770      	bx	lr
 8016bfe:	bf00      	nop

08016c00 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8016c00:	b480      	push	{r7}
 8016c02:	b083      	sub	sp, #12
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	4603      	mov	r3, r0
 8016c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8016c0a:	f04f 0368 	mov.w	r3, #104	; 0x68
 8016c0e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8016c12:	79fa      	ldrb	r2, [r7, #7]
 8016c14:	601a      	str	r2, [r3, #0]
}
 8016c16:	f107 070c 	add.w	r7, r7, #12
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bc80      	pop	{r7}
 8016c1e:	4770      	bx	lr

08016c20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8016c20:	b480      	push	{r7}
 8016c22:	b083      	sub	sp, #12
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	4603      	mov	r3, r0
 8016c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8016c2a:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8016c2e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8016c32:	79fa      	ldrb	r2, [r7, #7]
 8016c34:	601a      	str	r2, [r3, #0]
}
 8016c36:	f107 070c 	add.w	r7, r7, #12
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bc80      	pop	{r7}
 8016c3e:	4770      	bx	lr

08016c40 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8016c40:	b480      	push	{r7}
 8016c42:	b085      	sub	sp, #20
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
 8016c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8016c4a:	f04f 0300 	mov.w	r3, #0
 8016c4e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8016c50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016c54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016c58:	689b      	ldr	r3, [r3, #8]
 8016c5a:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8016c62:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8016c64:	687a      	ldr	r2, [r7, #4]
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	4313      	orrs	r3, r2
 8016c6a:	68fa      	ldr	r2, [r7, #12]
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8016c70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016c74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016c78:	68fa      	ldr	r2, [r7, #12]
 8016c7a:	609a      	str	r2, [r3, #8]
}
 8016c7c:	f107 0714 	add.w	r7, r7, #20
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bc80      	pop	{r7}
 8016c84:	4770      	bx	lr
 8016c86:	bf00      	nop

08016c88 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8016c88:	b480      	push	{r7}
 8016c8a:	b085      	sub	sp, #20
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
 8016c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8016c92:	f04f 0300 	mov.w	r3, #0
 8016c96:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8016c98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016c9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016ca0:	689b      	ldr	r3, [r3, #8]
 8016ca2:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8016caa:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	683b      	ldr	r3, [r7, #0]
 8016cb0:	4313      	orrs	r3, r2
 8016cb2:	68fa      	ldr	r2, [r7, #12]
 8016cb4:	4313      	orrs	r3, r2
 8016cb6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8016cb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016cbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016cc0:	68fa      	ldr	r2, [r7, #12]
 8016cc2:	609a      	str	r2, [r3, #8]
}
 8016cc4:	f107 0714 	add.w	r7, r7, #20
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bc80      	pop	{r7}
 8016ccc:	4770      	bx	lr
 8016cce:	bf00      	nop

08016cd0 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8016cd0:	b480      	push	{r7}
 8016cd2:	b085      	sub	sp, #20
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8016cd8:	f04f 0300 	mov.w	r3, #0
 8016cdc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8016cde:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016ce2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016ce6:	689b      	ldr	r3, [r3, #8]
 8016ce8:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	f023 0303 	bic.w	r3, r3, #3
 8016cf0:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8016cf2:	68fa      	ldr	r2, [r7, #12]
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	4313      	orrs	r3, r2
 8016cf8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8016cfa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016d02:	68fa      	ldr	r2, [r7, #12]
 8016d04:	609a      	str	r2, [r3, #8]
}
 8016d06:	f107 0714 	add.w	r7, r7, #20
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bc80      	pop	{r7}
 8016d0e:	4770      	bx	lr

08016d10 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8016d10:	b480      	push	{r7}
 8016d12:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8016d14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016d18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016d1c:	689b      	ldr	r3, [r3, #8]
 8016d1e:	b2db      	uxtb	r3, r3
 8016d20:	f003 030c 	and.w	r3, r3, #12
 8016d24:	b2db      	uxtb	r3, r3
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bc80      	pop	{r7}
 8016d2c:	4770      	bx	lr
 8016d2e:	bf00      	nop

08016d30 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8016d30:	b480      	push	{r7}
 8016d32:	b085      	sub	sp, #20
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8016d38:	f04f 0300 	mov.w	r3, #0
 8016d3c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8016d3e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016d42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016d46:	689b      	ldr	r3, [r3, #8]
 8016d48:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016d50:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8016d52:	68fa      	ldr	r2, [r7, #12]
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	4313      	orrs	r3, r2
 8016d58:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8016d5a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016d5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016d62:	68fa      	ldr	r2, [r7, #12]
 8016d64:	609a      	str	r2, [r3, #8]
}
 8016d66:	f107 0714 	add.w	r7, r7, #20
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bc80      	pop	{r7}
 8016d6e:	4770      	bx	lr

08016d70 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8016d70:	b480      	push	{r7}
 8016d72:	b085      	sub	sp, #20
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8016d78:	f04f 0300 	mov.w	r3, #0
 8016d7c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8016d7e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016d82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016d86:	689b      	ldr	r3, [r3, #8]
 8016d88:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8016d90:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8016d92:	68fa      	ldr	r2, [r7, #12]
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	4313      	orrs	r3, r2
 8016d98:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8016d9a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016d9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016da2:	68fa      	ldr	r2, [r7, #12]
 8016da4:	609a      	str	r2, [r3, #8]
}
 8016da6:	f107 0714 	add.w	r7, r7, #20
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bc80      	pop	{r7}
 8016dae:	4770      	bx	lr

08016db0 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8016db0:	b480      	push	{r7}
 8016db2:	b085      	sub	sp, #20
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8016db8:	f04f 0300 	mov.w	r3, #0
 8016dbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8016dbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016dc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016dc6:	689b      	ldr	r3, [r3, #8]
 8016dc8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8016dd0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8016dd8:	68fa      	ldr	r2, [r7, #12]
 8016dda:	4313      	orrs	r3, r2
 8016ddc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8016dde:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016de2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016de6:	68fa      	ldr	r2, [r7, #12]
 8016de8:	609a      	str	r2, [r3, #8]
}
 8016dea:	f107 0714 	add.w	r7, r7, #20
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bc80      	pop	{r7}
 8016df2:	4770      	bx	lr

08016df4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8016df4:	b480      	push	{r7}
 8016df6:	b089      	sub	sp, #36	; 0x24
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8016dfc:	f04f 0300 	mov.w	r3, #0
 8016e00:	61bb      	str	r3, [r7, #24]
 8016e02:	f04f 0300 	mov.w	r3, #0
 8016e06:	617b      	str	r3, [r7, #20]
 8016e08:	f04f 0300 	mov.w	r3, #0
 8016e0c:	61fb      	str	r3, [r7, #28]
 8016e0e:	f04f 0302 	mov.w	r3, #2
 8016e12:	613b      	str	r3, [r7, #16]
 8016e14:	f04f 0300 	mov.w	r3, #0
 8016e18:	60fb      	str	r3, [r7, #12]
 8016e1a:	f04f 0302 	mov.w	r3, #2
 8016e1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8016e20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016e24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016e28:	689b      	ldr	r3, [r3, #8]
 8016e2a:	f003 030c 	and.w	r3, r3, #12
 8016e2e:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8016e30:	69bb      	ldr	r3, [r7, #24]
 8016e32:	2b04      	cmp	r3, #4
 8016e34:	d00a      	beq.n	8016e4c <RCC_GetClocksFreq+0x58>
 8016e36:	2b08      	cmp	r3, #8
 8016e38:	d00f      	beq.n	8016e5a <RCC_GetClocksFreq+0x66>
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d162      	bne.n	8016f04 <RCC_GetClocksFreq+0x110>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8016e3e:	687a      	ldr	r2, [r7, #4]
 8016e40:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8016e44:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8016e48:	6013      	str	r3, [r2, #0]
      break;
 8016e4a:	e062      	b.n	8016f12 <RCC_GetClocksFreq+0x11e>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8016e4c:	687a      	ldr	r2, [r7, #4]
 8016e4e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8016e52:	f2c0 037a 	movt	r3, #122	; 0x7a
 8016e56:	6013      	str	r3, [r2, #0]
      break;
 8016e58:	e05b      	b.n	8016f12 <RCC_GetClocksFreq+0x11e>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8016e5a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016e5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016e62:	685b      	ldr	r3, [r3, #4]
 8016e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016e68:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8016e6c:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016e6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016e72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016e7c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d015      	beq.n	8016eb0 <RCC_GetClocksFreq+0xbc>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8016e84:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8016e88:	f2c0 037a 	movt	r3, #122	; 0x7a
 8016e8c:	68ba      	ldr	r2, [r7, #8]
 8016e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8016e92:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016e96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016e9a:	685b      	ldr	r3, [r3, #4]
 8016e9c:	4619      	mov	r1, r3
 8016e9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8016ea2:	400b      	ands	r3, r1
 8016ea4:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8016ea8:	fb03 f302 	mul.w	r3, r3, r2
 8016eac:	61fb      	str	r3, [r7, #28]
 8016eae:	e014      	b.n	8016eda <RCC_GetClocksFreq+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8016eb0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8016eb4:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8016eb8:	68ba      	ldr	r2, [r7, #8]
 8016eba:	fbb3 f2f2 	udiv	r2, r3, r2
 8016ebe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016ec2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	4619      	mov	r1, r3
 8016eca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8016ece:	400b      	ands	r3, r1
 8016ed0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8016ed4:	fb03 f302 	mul.w	r3, r3, r2
 8016ed8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8016eda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016ede:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016ee2:	685b      	ldr	r3, [r3, #4]
 8016ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016ee8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8016eec:	f103 0301 	add.w	r3, r3, #1
 8016ef0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016ef4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8016ef6:	69fa      	ldr	r2, [r7, #28]
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	601a      	str	r2, [r3, #0]
      break;
 8016f02:	e006      	b.n	8016f12 <RCC_GetClocksFreq+0x11e>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8016f04:	687a      	ldr	r2, [r7, #4]
 8016f06:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8016f0a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8016f0e:	6013      	str	r3, [r2, #0]
      break;
 8016f10:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8016f12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016f16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016f1a:	689b      	ldr	r3, [r3, #8]
 8016f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f20:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8016f22:	69bb      	ldr	r3, [r7, #24]
 8016f24:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8016f28:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8016f2a:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8016f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f32:	69ba      	ldr	r2, [r7, #24]
 8016f34:	189b      	adds	r3, r3, r2
 8016f36:	781b      	ldrb	r3, [r3, #0]
 8016f38:	b2db      	uxtb	r3, r3
 8016f3a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	681a      	ldr	r2, [r3, #0]
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	fa22 f203 	lsr.w	r2, r2, r3
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8016f4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016f52:	689b      	ldr	r3, [r3, #8]
 8016f54:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8016f58:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8016f5a:	69bb      	ldr	r3, [r7, #24]
 8016f5c:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8016f60:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8016f62:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8016f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016f6a:	69ba      	ldr	r2, [r7, #24]
 8016f6c:	189b      	adds	r3, r3, r2
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	685a      	ldr	r2, [r3, #4]
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	fa22 f203 	lsr.w	r2, r2, r3
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8016f82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016f86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016f8a:	689b      	ldr	r3, [r3, #8]
 8016f8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8016f90:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8016f92:	69bb      	ldr	r3, [r7, #24]
 8016f94:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8016f98:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8016f9a:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8016f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8016fa2:	69ba      	ldr	r2, [r7, #24]
 8016fa4:	189b      	adds	r3, r3, r2
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	685a      	ldr	r2, [r3, #4]
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	fa22 f203 	lsr.w	r2, r2, r3
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	60da      	str	r2, [r3, #12]
}
 8016fba:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bc80      	pop	{r7}
 8016fc2:	4770      	bx	lr

08016fc4 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8016fc4:	b480      	push	{r7}
 8016fc6:	b085      	sub	sp, #20
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8016fcc:	f04f 0300 	mov.w	r3, #0
 8016fd0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016fdc:	d117      	bne.n	801700e <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8016fde:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8016fe2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8016fe6:	689b      	ldr	r3, [r3, #8]
 8016fe8:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8016ff0:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016ffc:	68fa      	ldr	r2, [r7, #12]
 8016ffe:	4313      	orrs	r3, r2
 8017000:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8017002:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017006:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801700a:	68fa      	ldr	r2, [r7, #12]
 801700c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 801700e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017012:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017016:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801701a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801701e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8017020:	4611      	mov	r1, r2
 8017022:	687a      	ldr	r2, [r7, #4]
 8017024:	ea4f 5202 	mov.w	r2, r2, lsl #20
 8017028:	ea4f 5212 	mov.w	r2, r2, lsr #20
 801702c:	430a      	orrs	r2, r1
 801702e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8017030:	f107 0714 	add.w	r7, r7, #20
 8017034:	46bd      	mov	sp, r7
 8017036:	bc80      	pop	{r7}
 8017038:	4770      	bx	lr
 801703a:	bf00      	nop

0801703c <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 801703c:	b480      	push	{r7}
 801703e:	b083      	sub	sp, #12
 8017040:	af00      	add	r7, sp, #0
 8017042:	4603      	mov	r3, r0
 8017044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8017046:	f640 633c 	movw	r3, #3644	; 0xe3c
 801704a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 801704e:	79fa      	ldrb	r2, [r7, #7]
 8017050:	601a      	str	r2, [r3, #0]
}
 8017052:	f107 070c 	add.w	r7, r7, #12
 8017056:	46bd      	mov	sp, r7
 8017058:	bc80      	pop	{r7}
 801705a:	4770      	bx	lr

0801705c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 801705c:	b480      	push	{r7}
 801705e:	b083      	sub	sp, #12
 8017060:	af00      	add	r7, sp, #0
 8017062:	4603      	mov	r3, r0
 8017064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8017066:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 801706a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 801706e:	79fa      	ldrb	r2, [r7, #7]
 8017070:	601a      	str	r2, [r3, #0]
}
 8017072:	f107 070c 	add.w	r7, r7, #12
 8017076:	46bd      	mov	sp, r7
 8017078:	bc80      	pop	{r7}
 801707a:	4770      	bx	lr

0801707c <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 801707c:	b480      	push	{r7}
 801707e:	b083      	sub	sp, #12
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8017084:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8017088:	f2c4 2347 	movt	r3, #16967	; 0x4247
 801708c:	687a      	ldr	r2, [r7, #4]
 801708e:	601a      	str	r2, [r3, #0]
}
 8017090:	f107 070c 	add.w	r7, r7, #12
 8017094:	46bd      	mov	sp, r7
 8017096:	bc80      	pop	{r7}
 8017098:	4770      	bx	lr
 801709a:	bf00      	nop

0801709c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 801709c:	b480      	push	{r7}
 801709e:	b083      	sub	sp, #12
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	460b      	mov	r3, r1
 80170a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80170a8:	78fb      	ldrb	r3, [r7, #3]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d00d      	beq.n	80170ca <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80170ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80170b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80170b6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80170ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80170be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80170c0:	4611      	mov	r1, r2
 80170c2:	687a      	ldr	r2, [r7, #4]
 80170c4:	430a      	orrs	r2, r1
 80170c6:	631a      	str	r2, [r3, #48]	; 0x30
 80170c8:	e00e      	b.n	80170e8 <RCC_AHB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80170ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80170ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80170d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80170d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80170da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80170dc:	4611      	mov	r1, r2
 80170de:	687a      	ldr	r2, [r7, #4]
 80170e0:	ea6f 0202 	mvn.w	r2, r2
 80170e4:	400a      	ands	r2, r1
 80170e6:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80170e8:	f107 070c 	add.w	r7, r7, #12
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bc80      	pop	{r7}
 80170f0:	4770      	bx	lr
 80170f2:	bf00      	nop

080170f4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80170f4:	b480      	push	{r7}
 80170f6:	b083      	sub	sp, #12
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	460b      	mov	r3, r1
 80170fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8017100:	78fb      	ldrb	r3, [r7, #3]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d00d      	beq.n	8017122 <RCC_AHB2PeriphClockCmd+0x2e>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8017106:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801710a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801710e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8017112:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017116:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017118:	4611      	mov	r1, r2
 801711a:	687a      	ldr	r2, [r7, #4]
 801711c:	430a      	orrs	r2, r1
 801711e:	635a      	str	r2, [r3, #52]	; 0x34
 8017120:	e00e      	b.n	8017140 <RCC_AHB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8017122:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017126:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801712a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801712e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017132:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017134:	4611      	mov	r1, r2
 8017136:	687a      	ldr	r2, [r7, #4]
 8017138:	ea6f 0202 	mvn.w	r2, r2
 801713c:	400a      	ands	r2, r1
 801713e:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8017140:	f107 070c 	add.w	r7, r7, #12
 8017144:	46bd      	mov	sp, r7
 8017146:	bc80      	pop	{r7}
 8017148:	4770      	bx	lr
 801714a:	bf00      	nop

0801714c <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 801714c:	b480      	push	{r7}
 801714e:	b083      	sub	sp, #12
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
 8017154:	460b      	mov	r3, r1
 8017156:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8017158:	78fb      	ldrb	r3, [r7, #3]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d00d      	beq.n	801717a <RCC_AHB3PeriphClockCmd+0x2e>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 801715e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017162:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017166:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801716a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801716e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017170:	4611      	mov	r1, r2
 8017172:	687a      	ldr	r2, [r7, #4]
 8017174:	430a      	orrs	r2, r1
 8017176:	639a      	str	r2, [r3, #56]	; 0x38
 8017178:	e00e      	b.n	8017198 <RCC_AHB3PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 801717a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801717e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017182:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8017186:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801718a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801718c:	4611      	mov	r1, r2
 801718e:	687a      	ldr	r2, [r7, #4]
 8017190:	ea6f 0202 	mvn.w	r2, r2
 8017194:	400a      	ands	r2, r1
 8017196:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8017198:	f107 070c 	add.w	r7, r7, #12
 801719c:	46bd      	mov	sp, r7
 801719e:	bc80      	pop	{r7}
 80171a0:	4770      	bx	lr
 80171a2:	bf00      	nop

080171a4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80171a4:	b480      	push	{r7}
 80171a6:	b083      	sub	sp, #12
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	460b      	mov	r3, r1
 80171ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80171b0:	78fb      	ldrb	r3, [r7, #3]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d00d      	beq.n	80171d2 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80171b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80171ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80171be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80171c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80171c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80171c8:	4611      	mov	r1, r2
 80171ca:	687a      	ldr	r2, [r7, #4]
 80171cc:	430a      	orrs	r2, r1
 80171ce:	641a      	str	r2, [r3, #64]	; 0x40
 80171d0:	e00e      	b.n	80171f0 <RCC_APB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80171d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80171d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80171da:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80171de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80171e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80171e4:	4611      	mov	r1, r2
 80171e6:	687a      	ldr	r2, [r7, #4]
 80171e8:	ea6f 0202 	mvn.w	r2, r2
 80171ec:	400a      	ands	r2, r1
 80171ee:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80171f0:	f107 070c 	add.w	r7, r7, #12
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bc80      	pop	{r7}
 80171f8:	4770      	bx	lr
 80171fa:	bf00      	nop

080171fc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80171fc:	b480      	push	{r7}
 80171fe:	b083      	sub	sp, #12
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
 8017204:	460b      	mov	r3, r1
 8017206:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8017208:	78fb      	ldrb	r3, [r7, #3]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d00d      	beq.n	801722a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 801720e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017212:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017216:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801721a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801721e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8017220:	4611      	mov	r1, r2
 8017222:	687a      	ldr	r2, [r7, #4]
 8017224:	430a      	orrs	r2, r1
 8017226:	645a      	str	r2, [r3, #68]	; 0x44
 8017228:	e00e      	b.n	8017248 <RCC_APB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 801722a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801722e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017232:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8017236:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801723a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801723c:	4611      	mov	r1, r2
 801723e:	687a      	ldr	r2, [r7, #4]
 8017240:	ea6f 0202 	mvn.w	r2, r2
 8017244:	400a      	ands	r2, r1
 8017246:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8017248:	f107 070c 	add.w	r7, r7, #12
 801724c:	46bd      	mov	sp, r7
 801724e:	bc80      	pop	{r7}
 8017250:	4770      	bx	lr
 8017252:	bf00      	nop

08017254 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8017254:	b480      	push	{r7}
 8017256:	b083      	sub	sp, #12
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	460b      	mov	r3, r1
 801725e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8017260:	78fb      	ldrb	r3, [r7, #3]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d00d      	beq.n	8017282 <RCC_AHB1PeriphResetCmd+0x2e>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8017266:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801726a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801726e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8017272:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017276:	6912      	ldr	r2, [r2, #16]
 8017278:	4611      	mov	r1, r2
 801727a:	687a      	ldr	r2, [r7, #4]
 801727c:	430a      	orrs	r2, r1
 801727e:	611a      	str	r2, [r3, #16]
 8017280:	e00e      	b.n	80172a0 <RCC_AHB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8017282:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017286:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801728a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801728e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017292:	6912      	ldr	r2, [r2, #16]
 8017294:	4611      	mov	r1, r2
 8017296:	687a      	ldr	r2, [r7, #4]
 8017298:	ea6f 0202 	mvn.w	r2, r2
 801729c:	400a      	ands	r2, r1
 801729e:	611a      	str	r2, [r3, #16]
  }
}
 80172a0:	f107 070c 	add.w	r7, r7, #12
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bc80      	pop	{r7}
 80172a8:	4770      	bx	lr
 80172aa:	bf00      	nop

080172ac <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80172ac:	b480      	push	{r7}
 80172ae:	b083      	sub	sp, #12
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	460b      	mov	r3, r1
 80172b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80172b8:	78fb      	ldrb	r3, [r7, #3]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d00d      	beq.n	80172da <RCC_AHB2PeriphResetCmd+0x2e>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80172be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80172c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80172c6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80172ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80172ce:	6952      	ldr	r2, [r2, #20]
 80172d0:	4611      	mov	r1, r2
 80172d2:	687a      	ldr	r2, [r7, #4]
 80172d4:	430a      	orrs	r2, r1
 80172d6:	615a      	str	r2, [r3, #20]
 80172d8:	e00e      	b.n	80172f8 <RCC_AHB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80172da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80172de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80172e2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80172e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80172ea:	6952      	ldr	r2, [r2, #20]
 80172ec:	4611      	mov	r1, r2
 80172ee:	687a      	ldr	r2, [r7, #4]
 80172f0:	ea6f 0202 	mvn.w	r2, r2
 80172f4:	400a      	ands	r2, r1
 80172f6:	615a      	str	r2, [r3, #20]
  }
}
 80172f8:	f107 070c 	add.w	r7, r7, #12
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bc80      	pop	{r7}
 8017300:	4770      	bx	lr
 8017302:	bf00      	nop

08017304 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8017304:	b480      	push	{r7}
 8017306:	b083      	sub	sp, #12
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	460b      	mov	r3, r1
 801730e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8017310:	78fb      	ldrb	r3, [r7, #3]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d00d      	beq.n	8017332 <RCC_AHB3PeriphResetCmd+0x2e>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8017316:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801731a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801731e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8017322:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017326:	6992      	ldr	r2, [r2, #24]
 8017328:	4611      	mov	r1, r2
 801732a:	687a      	ldr	r2, [r7, #4]
 801732c:	430a      	orrs	r2, r1
 801732e:	619a      	str	r2, [r3, #24]
 8017330:	e00e      	b.n	8017350 <RCC_AHB3PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8017332:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017336:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801733a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801733e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017342:	6992      	ldr	r2, [r2, #24]
 8017344:	4611      	mov	r1, r2
 8017346:	687a      	ldr	r2, [r7, #4]
 8017348:	ea6f 0202 	mvn.w	r2, r2
 801734c:	400a      	ands	r2, r1
 801734e:	619a      	str	r2, [r3, #24]
  }
}
 8017350:	f107 070c 	add.w	r7, r7, #12
 8017354:	46bd      	mov	sp, r7
 8017356:	bc80      	pop	{r7}
 8017358:	4770      	bx	lr
 801735a:	bf00      	nop

0801735c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 801735c:	b480      	push	{r7}
 801735e:	b083      	sub	sp, #12
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
 8017364:	460b      	mov	r3, r1
 8017366:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8017368:	78fb      	ldrb	r3, [r7, #3]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d00d      	beq.n	801738a <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 801736e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017372:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017376:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801737a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801737e:	6a12      	ldr	r2, [r2, #32]
 8017380:	4611      	mov	r1, r2
 8017382:	687a      	ldr	r2, [r7, #4]
 8017384:	430a      	orrs	r2, r1
 8017386:	621a      	str	r2, [r3, #32]
 8017388:	e00e      	b.n	80173a8 <RCC_APB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 801738a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801738e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017392:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8017396:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801739a:	6a12      	ldr	r2, [r2, #32]
 801739c:	4611      	mov	r1, r2
 801739e:	687a      	ldr	r2, [r7, #4]
 80173a0:	ea6f 0202 	mvn.w	r2, r2
 80173a4:	400a      	ands	r2, r1
 80173a6:	621a      	str	r2, [r3, #32]
  }
}
 80173a8:	f107 070c 	add.w	r7, r7, #12
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bc80      	pop	{r7}
 80173b0:	4770      	bx	lr
 80173b2:	bf00      	nop

080173b4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80173b4:	b480      	push	{r7}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	460b      	mov	r3, r1
 80173be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80173c0:	78fb      	ldrb	r3, [r7, #3]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d00d      	beq.n	80173e2 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80173c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80173ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80173ce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80173d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80173d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80173d8:	4611      	mov	r1, r2
 80173da:	687a      	ldr	r2, [r7, #4]
 80173dc:	430a      	orrs	r2, r1
 80173de:	625a      	str	r2, [r3, #36]	; 0x24
 80173e0:	e00e      	b.n	8017400 <RCC_APB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80173e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80173e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80173ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80173ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80173f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80173f4:	4611      	mov	r1, r2
 80173f6:	687a      	ldr	r2, [r7, #4]
 80173f8:	ea6f 0202 	mvn.w	r2, r2
 80173fc:	400a      	ands	r2, r1
 80173fe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8017400:	f107 070c 	add.w	r7, r7, #12
 8017404:	46bd      	mov	sp, r7
 8017406:	bc80      	pop	{r7}
 8017408:	4770      	bx	lr
 801740a:	bf00      	nop

0801740c <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 801740c:	b480      	push	{r7}
 801740e:	b083      	sub	sp, #12
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	460b      	mov	r3, r1
 8017416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8017418:	78fb      	ldrb	r3, [r7, #3]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d00d      	beq.n	801743a <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 801741e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017422:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017426:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801742a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801742e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8017430:	4611      	mov	r1, r2
 8017432:	687a      	ldr	r2, [r7, #4]
 8017434:	430a      	orrs	r2, r1
 8017436:	651a      	str	r2, [r3, #80]	; 0x50
 8017438:	e00e      	b.n	8017458 <RCC_AHB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 801743a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801743e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017442:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8017446:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801744a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801744c:	4611      	mov	r1, r2
 801744e:	687a      	ldr	r2, [r7, #4]
 8017450:	ea6f 0202 	mvn.w	r2, r2
 8017454:	400a      	ands	r2, r1
 8017456:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8017458:	f107 070c 	add.w	r7, r7, #12
 801745c:	46bd      	mov	sp, r7
 801745e:	bc80      	pop	{r7}
 8017460:	4770      	bx	lr
 8017462:	bf00      	nop

08017464 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8017464:	b480      	push	{r7}
 8017466:	b083      	sub	sp, #12
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	460b      	mov	r3, r1
 801746e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8017470:	78fb      	ldrb	r3, [r7, #3]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d00d      	beq.n	8017492 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8017476:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801747a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801747e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8017482:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017486:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8017488:	4611      	mov	r1, r2
 801748a:	687a      	ldr	r2, [r7, #4]
 801748c:	430a      	orrs	r2, r1
 801748e:	655a      	str	r2, [r3, #84]	; 0x54
 8017490:	e00e      	b.n	80174b0 <RCC_AHB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8017492:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017496:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801749a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801749e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80174a2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80174a4:	4611      	mov	r1, r2
 80174a6:	687a      	ldr	r2, [r7, #4]
 80174a8:	ea6f 0202 	mvn.w	r2, r2
 80174ac:	400a      	ands	r2, r1
 80174ae:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 80174b0:	f107 070c 	add.w	r7, r7, #12
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bc80      	pop	{r7}
 80174b8:	4770      	bx	lr
 80174ba:	bf00      	nop

080174bc <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80174bc:	b480      	push	{r7}
 80174be:	b083      	sub	sp, #12
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	460b      	mov	r3, r1
 80174c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80174c8:	78fb      	ldrb	r3, [r7, #3]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d00d      	beq.n	80174ea <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80174ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80174d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80174d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80174da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80174de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80174e0:	4611      	mov	r1, r2
 80174e2:	687a      	ldr	r2, [r7, #4]
 80174e4:	430a      	orrs	r2, r1
 80174e6:	659a      	str	r2, [r3, #88]	; 0x58
 80174e8:	e00e      	b.n	8017508 <RCC_AHB3PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 80174ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80174ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80174f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80174f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80174fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80174fc:	4611      	mov	r1, r2
 80174fe:	687a      	ldr	r2, [r7, #4]
 8017500:	ea6f 0202 	mvn.w	r2, r2
 8017504:	400a      	ands	r2, r1
 8017506:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8017508:	f107 070c 	add.w	r7, r7, #12
 801750c:	46bd      	mov	sp, r7
 801750e:	bc80      	pop	{r7}
 8017510:	4770      	bx	lr
 8017512:	bf00      	nop

08017514 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
 801751c:	460b      	mov	r3, r1
 801751e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8017520:	78fb      	ldrb	r3, [r7, #3]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d00d      	beq.n	8017542 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8017526:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801752a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801752e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8017532:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017536:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8017538:	4611      	mov	r1, r2
 801753a:	687a      	ldr	r2, [r7, #4]
 801753c:	430a      	orrs	r2, r1
 801753e:	661a      	str	r2, [r3, #96]	; 0x60
 8017540:	e00e      	b.n	8017560 <RCC_APB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8017542:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017546:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801754a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801754e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017552:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8017554:	4611      	mov	r1, r2
 8017556:	687a      	ldr	r2, [r7, #4]
 8017558:	ea6f 0202 	mvn.w	r2, r2
 801755c:	400a      	ands	r2, r1
 801755e:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8017560:	f107 070c 	add.w	r7, r7, #12
 8017564:	46bd      	mov	sp, r7
 8017566:	bc80      	pop	{r7}
 8017568:	4770      	bx	lr
 801756a:	bf00      	nop

0801756c <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 801756c:	b480      	push	{r7}
 801756e:	b083      	sub	sp, #12
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
 8017574:	460b      	mov	r3, r1
 8017576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8017578:	78fb      	ldrb	r3, [r7, #3]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d00d      	beq.n	801759a <RCC_APB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 801757e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017582:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017586:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801758a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801758e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8017590:	4611      	mov	r1, r2
 8017592:	687a      	ldr	r2, [r7, #4]
 8017594:	430a      	orrs	r2, r1
 8017596:	665a      	str	r2, [r3, #100]	; 0x64
 8017598:	e00e      	b.n	80175b8 <RCC_APB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 801759a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801759e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80175a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80175a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80175aa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80175ac:	4611      	mov	r1, r2
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	ea6f 0202 	mvn.w	r2, r2
 80175b4:	400a      	ands	r2, r1
 80175b6:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 80175b8:	f107 070c 	add.w	r7, r7, #12
 80175bc:	46bd      	mov	sp, r7
 80175be:	bc80      	pop	{r7}
 80175c0:	4770      	bx	lr
 80175c2:	bf00      	nop

080175c4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80175c4:	b480      	push	{r7}
 80175c6:	b083      	sub	sp, #12
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	4602      	mov	r2, r0
 80175cc:	460b      	mov	r3, r1
 80175ce:	71fa      	strb	r2, [r7, #7]
 80175d0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80175d2:	79bb      	ldrb	r3, [r7, #6]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d00e      	beq.n	80175f6 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80175d8:	f643 030d 	movw	r3, #14349	; 0x380d
 80175dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80175e0:	f643 020d 	movw	r2, #14349	; 0x380d
 80175e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80175e8:	7812      	ldrb	r2, [r2, #0]
 80175ea:	b2d1      	uxtb	r1, r2
 80175ec:	79fa      	ldrb	r2, [r7, #7]
 80175ee:	430a      	orrs	r2, r1
 80175f0:	b2d2      	uxtb	r2, r2
 80175f2:	701a      	strb	r2, [r3, #0]
 80175f4:	e010      	b.n	8017618 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80175f6:	f643 030d 	movw	r3, #14349	; 0x380d
 80175fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80175fe:	f643 020d 	movw	r2, #14349	; 0x380d
 8017602:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8017606:	7812      	ldrb	r2, [r2, #0]
 8017608:	b2d1      	uxtb	r1, r2
 801760a:	79fa      	ldrb	r2, [r7, #7]
 801760c:	ea6f 0202 	mvn.w	r2, r2
 8017610:	b2d2      	uxtb	r2, r2
 8017612:	400a      	ands	r2, r1
 8017614:	b2d2      	uxtb	r2, r2
 8017616:	701a      	strb	r2, [r3, #0]
  }
}
 8017618:	f107 070c 	add.w	r7, r7, #12
 801761c:	46bd      	mov	sp, r7
 801761e:	bc80      	pop	{r7}
 8017620:	4770      	bx	lr
 8017622:	bf00      	nop

08017624 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8017624:	b480      	push	{r7}
 8017626:	b087      	sub	sp, #28
 8017628:	af00      	add	r7, sp, #0
 801762a:	4603      	mov	r3, r0
 801762c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 801762e:	f04f 0300 	mov.w	r3, #0
 8017632:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8017634:	f04f 0300 	mov.w	r3, #0
 8017638:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 801763a:	f04f 0300 	mov.w	r3, #0
 801763e:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8017640:	79fb      	ldrb	r3, [r7, #7]
 8017642:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8017646:	b2db      	uxtb	r3, r3
 8017648:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	2b01      	cmp	r3, #1
 801764e:	d106      	bne.n	801765e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8017650:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017654:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	617b      	str	r3, [r7, #20]
 801765c:	e00f      	b.n	801767e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	2b02      	cmp	r3, #2
 8017662:	d106      	bne.n	8017672 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8017664:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017668:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801766c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801766e:	617b      	str	r3, [r7, #20]
 8017670:	e005      	b.n	801767e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8017672:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8017676:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801767a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801767c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 801767e:	79fb      	ldrb	r3, [r7, #7]
 8017680:	f003 031f 	and.w	r3, r3, #31
 8017684:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	697a      	ldr	r2, [r7, #20]
 801768a:	fa22 f303 	lsr.w	r3, r2, r3
 801768e:	f003 0301 	and.w	r3, r3, #1
 8017692:	b2db      	uxtb	r3, r3
 8017694:	2b00      	cmp	r3, #0
 8017696:	d003      	beq.n	80176a0 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 8017698:	f04f 0301 	mov.w	r3, #1
 801769c:	74fb      	strb	r3, [r7, #19]
 801769e:	e002      	b.n	80176a6 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 80176a0:	f04f 0300 	mov.w	r3, #0
 80176a4:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80176a6:	7cfb      	ldrb	r3, [r7, #19]
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	f107 071c 	add.w	r7, r7, #28
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bc80      	pop	{r7}
 80176b2:	4770      	bx	lr

080176b4 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80176b4:	b480      	push	{r7}
 80176b6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80176b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80176bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80176c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80176c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80176c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80176ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80176ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bc80      	pop	{r7}
 80176d4:	4770      	bx	lr
 80176d6:	bf00      	nop

080176d8 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80176d8:	b480      	push	{r7}
 80176da:	b085      	sub	sp, #20
 80176dc:	af00      	add	r7, sp, #0
 80176de:	4603      	mov	r3, r0
 80176e0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80176e2:	f04f 0300 	mov.w	r3, #0
 80176e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80176e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80176ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80176f0:	68db      	ldr	r3, [r3, #12]
 80176f2:	461a      	mov	r2, r3
 80176f4:	79fb      	ldrb	r3, [r7, #7]
 80176f6:	4013      	ands	r3, r2
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d003      	beq.n	8017704 <RCC_GetITStatus+0x2c>
  {
    bitstatus = SET;
 80176fc:	f04f 0301 	mov.w	r3, #1
 8017700:	73fb      	strb	r3, [r7, #15]
 8017702:	e002      	b.n	801770a <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 8017704:	f04f 0300 	mov.w	r3, #0
 8017708:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 801770a:	7bfb      	ldrb	r3, [r7, #15]
}
 801770c:	4618      	mov	r0, r3
 801770e:	f107 0714 	add.w	r7, r7, #20
 8017712:	46bd      	mov	sp, r7
 8017714:	bc80      	pop	{r7}
 8017716:	4770      	bx	lr

08017718 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8017718:	b480      	push	{r7}
 801771a:	b083      	sub	sp, #12
 801771c:	af00      	add	r7, sp, #0
 801771e:	4603      	mov	r3, r0
 8017720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8017722:	f643 030e 	movw	r3, #14350	; 0x380e
 8017726:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801772a:	79fa      	ldrb	r2, [r7, #7]
 801772c:	701a      	strb	r2, [r3, #0]
}
 801772e:	f107 070c 	add.w	r7, r7, #12
 8017732:	46bd      	mov	sp, r7
 8017734:	bc80      	pop	{r7}
 8017736:	4770      	bx	lr

08017738 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 801773c:	f04f 0040 	mov.w	r0, #64	; 0x40
 8017740:	f04f 0101 	mov.w	r1, #1
 8017744:	f7ff fdb2 	bl	80172ac <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8017748:	f04f 0040 	mov.w	r0, #64	; 0x40
 801774c:	f04f 0100 	mov.w	r1, #0
 8017750:	f7ff fdac 	bl	80172ac <RCC_AHB2PeriphResetCmd>
}
 8017754:	bd80      	pop	{r7, pc}
 8017756:	bf00      	nop

08017758 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8017758:	b480      	push	{r7}
 801775a:	b083      	sub	sp, #12
 801775c:	af00      	add	r7, sp, #0
 801775e:	4603      	mov	r3, r0
 8017760:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8017762:	79fb      	ldrb	r3, [r7, #7]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d00c      	beq.n	8017782 <RNG_Cmd+0x2a>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8017768:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801776c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8017770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017774:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8017778:	6812      	ldr	r2, [r2, #0]
 801777a:	f042 0204 	orr.w	r2, r2, #4
 801777e:	601a      	str	r2, [r3, #0]
 8017780:	e00b      	b.n	801779a <RNG_Cmd+0x42>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8017782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017786:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801778a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801778e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8017792:	6812      	ldr	r2, [r2, #0]
 8017794:	f022 0204 	bic.w	r2, r2, #4
 8017798:	601a      	str	r2, [r3, #0]
  }
}
 801779a:	f107 070c 	add.w	r7, r7, #12
 801779e:	46bd      	mov	sp, r7
 80177a0:	bc80      	pop	{r7}
 80177a2:	4770      	bx	lr

080177a4 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 80177a4:	b480      	push	{r7}
 80177a6:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 80177a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177ac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80177b0:	689b      	ldr	r3, [r3, #8]
}
 80177b2:	4618      	mov	r0, r3
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bc80      	pop	{r7}
 80177b8:	4770      	bx	lr
 80177ba:	bf00      	nop

080177bc <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 80177bc:	b480      	push	{r7}
 80177be:	b083      	sub	sp, #12
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	4603      	mov	r3, r0
 80177c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80177c6:	79fb      	ldrb	r3, [r7, #7]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d00c      	beq.n	80177e6 <RNG_ITConfig+0x2a>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 80177cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177d0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80177d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80177d8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80177dc:	6812      	ldr	r2, [r2, #0]
 80177de:	f042 0208 	orr.w	r2, r2, #8
 80177e2:	601a      	str	r2, [r3, #0]
 80177e4:	e00b      	b.n	80177fe <RNG_ITConfig+0x42>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 80177e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177ea:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80177ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80177f2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80177f6:	6812      	ldr	r2, [r2, #0]
 80177f8:	f022 0208 	bic.w	r2, r2, #8
 80177fc:	601a      	str	r2, [r3, #0]
  }
}
 80177fe:	f107 070c 	add.w	r7, r7, #12
 8017802:	46bd      	mov	sp, r7
 8017804:	bc80      	pop	{r7}
 8017806:	4770      	bx	lr

08017808 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8017808:	b480      	push	{r7}
 801780a:	b085      	sub	sp, #20
 801780c:	af00      	add	r7, sp, #0
 801780e:	4603      	mov	r3, r0
 8017810:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8017812:	f04f 0300 	mov.w	r3, #0
 8017816:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8017818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801781c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8017820:	685b      	ldr	r3, [r3, #4]
 8017822:	461a      	mov	r2, r3
 8017824:	79fb      	ldrb	r3, [r7, #7]
 8017826:	4013      	ands	r3, r2
 8017828:	2b00      	cmp	r3, #0
 801782a:	d003      	beq.n	8017834 <RNG_GetFlagStatus+0x2c>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 801782c:	f04f 0301 	mov.w	r3, #1
 8017830:	73fb      	strb	r3, [r7, #15]
 8017832:	e002      	b.n	801783a <RNG_GetFlagStatus+0x32>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 8017834:	f04f 0300 	mov.w	r3, #0
 8017838:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 801783a:	7bfb      	ldrb	r3, [r7, #15]
}
 801783c:	4618      	mov	r0, r3
 801783e:	f107 0714 	add.w	r7, r7, #20
 8017842:	46bd      	mov	sp, r7
 8017844:	bc80      	pop	{r7}
 8017846:	4770      	bx	lr

08017848 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 8017848:	b480      	push	{r7}
 801784a:	b083      	sub	sp, #12
 801784c:	af00      	add	r7, sp, #0
 801784e:	4603      	mov	r3, r0
 8017850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8017852:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017856:	f2c5 0306 	movt	r3, #20486	; 0x5006
 801785a:	79fa      	ldrb	r2, [r7, #7]
 801785c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8017860:	ea6f 0202 	mvn.w	r2, r2
 8017864:	605a      	str	r2, [r3, #4]
}
 8017866:	f107 070c 	add.w	r7, r7, #12
 801786a:	46bd      	mov	sp, r7
 801786c:	bc80      	pop	{r7}
 801786e:	4770      	bx	lr

08017870 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 8017870:	b480      	push	{r7}
 8017872:	b085      	sub	sp, #20
 8017874:	af00      	add	r7, sp, #0
 8017876:	4603      	mov	r3, r0
 8017878:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 801787a:	f04f 0300 	mov.w	r3, #0
 801787e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8017880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017884:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8017888:	685b      	ldr	r3, [r3, #4]
 801788a:	461a      	mov	r2, r3
 801788c:	79fb      	ldrb	r3, [r7, #7]
 801788e:	4013      	ands	r3, r2
 8017890:	2b00      	cmp	r3, #0
 8017892:	d003      	beq.n	801789c <RNG_GetITStatus+0x2c>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8017894:	f04f 0301 	mov.w	r3, #1
 8017898:	73fb      	strb	r3, [r7, #15]
 801789a:	e002      	b.n	80178a2 <RNG_GetITStatus+0x32>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 801789c:	f04f 0300 	mov.w	r3, #0
 80178a0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 80178a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80178a4:	4618      	mov	r0, r3
 80178a6:	f107 0714 	add.w	r7, r7, #20
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bc80      	pop	{r7}
 80178ae:	4770      	bx	lr

080178b0 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 80178b0:	b480      	push	{r7}
 80178b2:	b083      	sub	sp, #12
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	4603      	mov	r3, r0
 80178b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 80178ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80178be:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80178c2:	79fa      	ldrb	r2, [r7, #7]
 80178c4:	ea6f 0202 	mvn.w	r2, r2
 80178c8:	b2d2      	uxtb	r2, r2
 80178ca:	605a      	str	r2, [r3, #4]
}
 80178cc:	f107 070c 	add.w	r7, r7, #12
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bc80      	pop	{r7}
 80178d4:	4770      	bx	lr
 80178d6:	bf00      	nop

080178d8 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b084      	sub	sp, #16
 80178dc:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 80178de:	f04f 0300 	mov.w	r3, #0
 80178e2:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 80178e4:	f04f 0300 	mov.w	r3, #0
 80178e8:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80178ea:	f04f 0300 	mov.w	r3, #0
 80178ee:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80178f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80178f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80178f8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 80178fc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80178fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017902:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017906:	f04f 0253 	mov.w	r2, #83	; 0x53
 801790a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801790c:	f000 f936 	bl	8017b7c <RTC_EnterInitMode>
 8017910:	4603      	mov	r3, r0
 8017912:	2b00      	cmp	r3, #0
 8017914:	d103      	bne.n	801791e <RTC_DeInit+0x46>
  {
    status = ERROR;
 8017916:	f04f 0300 	mov.w	r3, #0
 801791a:	73fb      	strb	r3, [r7, #15]
 801791c:	e084      	b.n	8017a28 <RTC_DeInit+0x150>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 801791e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017922:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017926:	f04f 0200 	mov.w	r2, #0
 801792a:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 801792c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017930:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017934:	f242 1201 	movw	r2, #8449	; 0x2101
 8017938:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 801793a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801793e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017942:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017946:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801794a:	6892      	ldr	r2, [r2, #8]
 801794c:	f002 0207 	and.w	r2, r2, #7
 8017950:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8017952:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017956:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801795a:	68db      	ldr	r3, [r3, #12]
 801795c:	f003 0304 	and.w	r3, r3, #4
 8017960:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	f103 0301 	add.w	r3, r3, #1
 8017968:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017970:	d002      	beq.n	8017978 <RTC_DeInit+0xa0>
 8017972:	68bb      	ldr	r3, [r7, #8]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d0ec      	beq.n	8017952 <RTC_DeInit+0x7a>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8017978:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801797c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017980:	68db      	ldr	r3, [r3, #12]
 8017982:	f003 0304 	and.w	r3, r3, #4
 8017986:	2b00      	cmp	r3, #0
 8017988:	d103      	bne.n	8017992 <RTC_DeInit+0xba>
    {
      status = ERROR;
 801798a:	f04f 0300 	mov.w	r3, #0
 801798e:	73fb      	strb	r3, [r7, #15]
 8017990:	e04a      	b.n	8017a28 <RTC_DeInit+0x150>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8017992:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017996:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801799a:	689b      	ldr	r3, [r3, #8]
 801799c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80179a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80179a4:	f04f 0200 	mov.w	r2, #0
 80179a8:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 80179aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80179ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80179b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80179b6:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 80179b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80179bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80179c0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80179c4:	f2c0 027f 	movt	r2, #127	; 0x7f
 80179c8:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 80179ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80179ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80179d2:	f04f 0200 	mov.w	r2, #0
 80179d6:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 80179d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80179dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80179e0:	f04f 0200 	mov.w	r2, #0
 80179e4:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 80179e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80179ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80179ee:	f04f 0200 	mov.w	r2, #0
 80179f2:	621a      	str	r2, [r3, #32]
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 80179f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80179f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80179fc:	f04f 0200 	mov.w	r2, #0
 8017a00:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 8017a02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017a06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017a0a:	f04f 0200 	mov.w	r2, #0
 8017a0e:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 8017a10:	f000 f910 	bl	8017c34 <RTC_WaitForSynchro>
 8017a14:	4603      	mov	r3, r0
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d103      	bne.n	8017a22 <RTC_DeInit+0x14a>
      {
        status = ERROR;
 8017a1a:	f04f 0300 	mov.w	r3, #0
 8017a1e:	73fb      	strb	r3, [r7, #15]
 8017a20:	e002      	b.n	8017a28 <RTC_DeInit+0x150>
      }
      else
      {
        status = SUCCESS;      
 8017a22:	f04f 0301 	mov.w	r3, #1
 8017a26:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8017a28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017a2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017a30:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8017a34:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8017a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f107 0710 	add.w	r7, r7, #16
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}
 8017a42:	bf00      	nop

08017a44 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b084      	sub	sp, #16
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8017a4c:	f04f 0300 	mov.w	r3, #0
 8017a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8017a52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017a56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017a5a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8017a5e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8017a60:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017a64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017a68:	f04f 0253 	mov.w	r2, #83	; 0x53
 8017a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8017a6e:	f000 f885 	bl	8017b7c <RTC_EnterInitMode>
 8017a72:	4603      	mov	r3, r0
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d103      	bne.n	8017a80 <RTC_Init+0x3c>
  {
    status = ERROR;
 8017a78:	f04f 0300 	mov.w	r3, #0
 8017a7c:	73fb      	strb	r3, [r7, #15]
 8017a7e:	e035      	b.n	8017aec <RTC_Init+0xa8>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8017a80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017a84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017a88:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017a8c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017a90:	6892      	ldr	r2, [r2, #8]
 8017a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017a96:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8017a98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017a9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017aa0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017aa4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017aa8:	6892      	ldr	r2, [r2, #8]
 8017aaa:	4611      	mov	r1, r2
 8017aac:	687a      	ldr	r2, [r7, #4]
 8017aae:	6812      	ldr	r2, [r2, #0]
 8017ab0:	430a      	orrs	r2, r1
 8017ab2:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8017ab4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017ab8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017abc:	687a      	ldr	r2, [r7, #4]
 8017abe:	6892      	ldr	r2, [r2, #8]
 8017ac0:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8017ac2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017ac6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017aca:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017ace:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017ad2:	6912      	ldr	r2, [r2, #16]
 8017ad4:	4611      	mov	r1, r2
 8017ad6:	687a      	ldr	r2, [r7, #4]
 8017ad8:	6852      	ldr	r2, [r2, #4]
 8017ada:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8017ade:	430a      	orrs	r2, r1
 8017ae0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8017ae2:	f000 f895 	bl	8017c10 <RTC_ExitInitMode>

    status = SUCCESS;    
 8017ae6:	f04f 0301 	mov.w	r3, #1
 8017aea:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8017aec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017af0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017af4:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8017af8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8017afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	f107 0710 	add.w	r7, r7, #16
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}
 8017b06:	bf00      	nop

08017b08 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 8017b08:	b480      	push	{r7}
 8017b0a:	b083      	sub	sp, #12
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f04f 0200 	mov.w	r2, #0
 8017b16:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	f04f 027f 	mov.w	r2, #127	; 0x7f
 8017b1e:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8017b26:	609a      	str	r2, [r3, #8]
}
 8017b28:	f107 070c 	add.w	r7, r7, #12
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bc80      	pop	{r7}
 8017b30:	4770      	bx	lr
 8017b32:	bf00      	nop

08017b34 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 8017b34:	b480      	push	{r7}
 8017b36:	b083      	sub	sp, #12
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8017b3e:	79fb      	ldrb	r3, [r7, #7]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d007      	beq.n	8017b54 <RTC_WriteProtectionCmd+0x20>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8017b44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017b48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017b4c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8017b50:	625a      	str	r2, [r3, #36]	; 0x24
 8017b52:	e00d      	b.n	8017b70 <RTC_WriteProtectionCmd+0x3c>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 8017b54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017b58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017b5c:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8017b60:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8017b62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017b66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017b6a:	f04f 0253 	mov.w	r2, #83	; 0x53
 8017b6e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8017b70:	f107 070c 	add.w	r7, r7, #12
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bc80      	pop	{r7}
 8017b78:	4770      	bx	lr
 8017b7a:	bf00      	nop

08017b7c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8017b7c:	b480      	push	{r7}
 8017b7e:	b085      	sub	sp, #20
 8017b80:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 8017b82:	f04f 0300 	mov.w	r3, #0
 8017b86:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8017b88:	f04f 0300 	mov.w	r3, #0
 8017b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 8017b8e:	f04f 0300 	mov.w	r3, #0
 8017b92:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8017b94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017b98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017b9c:	68db      	ldr	r3, [r3, #12]
 8017b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d12a      	bne.n	8017bfc <RTC_EnterInitMode+0x80>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8017ba6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017baa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017bae:	f04f 32ff 	mov.w	r2, #4294967295
 8017bb2:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8017bb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017bb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017bbc:	68db      	ldr	r3, [r3, #12]
 8017bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017bc2:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	f103 0301 	add.w	r3, r3, #1
 8017bca:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017bd2:	d002      	beq.n	8017bda <RTC_EnterInitMode+0x5e>
 8017bd4:	68bb      	ldr	r3, [r7, #8]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d0ec      	beq.n	8017bb4 <RTC_EnterInitMode+0x38>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8017bda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017bde:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017be2:	68db      	ldr	r3, [r3, #12]
 8017be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d003      	beq.n	8017bf4 <RTC_EnterInitMode+0x78>
    {
      status = SUCCESS;
 8017bec:	f04f 0301 	mov.w	r3, #1
 8017bf0:	73fb      	strb	r3, [r7, #15]
 8017bf2:	e006      	b.n	8017c02 <RTC_EnterInitMode+0x86>
    }
    else
    {
      status = ERROR;
 8017bf4:	f04f 0300 	mov.w	r3, #0
 8017bf8:	73fb      	strb	r3, [r7, #15]
 8017bfa:	e002      	b.n	8017c02 <RTC_EnterInitMode+0x86>
    }        
  }
  else
  {
    status = SUCCESS;  
 8017bfc:	f04f 0301 	mov.w	r3, #1
 8017c00:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 8017c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	f107 0714 	add.w	r7, r7, #20
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bc80      	pop	{r7}
 8017c0e:	4770      	bx	lr

08017c10 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 8017c10:	b480      	push	{r7}
 8017c12:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8017c14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017c18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017c1c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017c20:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017c24:	68d2      	ldr	r2, [r2, #12]
 8017c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017c2a:	60da      	str	r2, [r3, #12]
}
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bc80      	pop	{r7}
 8017c30:	4770      	bx	lr
 8017c32:	bf00      	nop

08017c34 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8017c34:	b480      	push	{r7}
 8017c36:	b085      	sub	sp, #20
 8017c38:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 8017c3a:	f04f 0300 	mov.w	r3, #0
 8017c3e:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8017c40:	f04f 0300 	mov.w	r3, #0
 8017c44:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 8017c46:	f04f 0300 	mov.w	r3, #0
 8017c4a:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8017c4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017c50:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017c54:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8017c58:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8017c5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017c5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017c62:	f04f 0253 	mov.w	r2, #83	; 0x53
 8017c66:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8017c68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017c6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017c70:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017c74:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017c78:	68d2      	ldr	r2, [r2, #12]
 8017c7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8017c7e:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8017c80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017c84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017c88:	68db      	ldr	r3, [r3, #12]
 8017c8a:	f003 0320 	and.w	r3, r3, #32
 8017c8e:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f103 0301 	add.w	r3, r3, #1
 8017c96:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017c9e:	d002      	beq.n	8017ca6 <RTC_WaitForSynchro+0x72>
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d0ec      	beq.n	8017c80 <RTC_WaitForSynchro+0x4c>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8017ca6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017caa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017cae:	68db      	ldr	r3, [r3, #12]
 8017cb0:	f003 0320 	and.w	r3, r3, #32
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d003      	beq.n	8017cc0 <RTC_WaitForSynchro+0x8c>
  {
    status = SUCCESS;
 8017cb8:	f04f 0301 	mov.w	r3, #1
 8017cbc:	73fb      	strb	r3, [r7, #15]
 8017cbe:	e002      	b.n	8017cc6 <RTC_WaitForSynchro+0x92>
  }
  else
  {
    status = ERROR;
 8017cc0:	f04f 0300 	mov.w	r3, #0
 8017cc4:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8017cc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017cca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017cce:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8017cd2:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 8017cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f107 0714 	add.w	r7, r7, #20
 8017cdc:	46bd      	mov	sp, r7
 8017cde:	bc80      	pop	{r7}
 8017ce0:	4770      	bx	lr
 8017ce2:	bf00      	nop

08017ce4 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b084      	sub	sp, #16
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	4603      	mov	r3, r0
 8017cec:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8017cee:	f04f 0300 	mov.w	r3, #0
 8017cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8017cf4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017cf8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017cfc:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8017d00:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8017d02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017d06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017d0a:	f04f 0253 	mov.w	r2, #83	; 0x53
 8017d0e:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8017d10:	f7ff ff34 	bl	8017b7c <RTC_EnterInitMode>
 8017d14:	4603      	mov	r3, r0
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d103      	bne.n	8017d22 <RTC_RefClockCmd+0x3e>
  {
    status = ERROR;
 8017d1a:	f04f 0300 	mov.w	r3, #0
 8017d1e:	73fb      	strb	r3, [r7, #15]
 8017d20:	e020      	b.n	8017d64 <RTC_RefClockCmd+0x80>
  } 
  else
  {  
    if (NewState != DISABLE)
 8017d22:	79fb      	ldrb	r3, [r7, #7]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d00c      	beq.n	8017d42 <RTC_RefClockCmd+0x5e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8017d28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017d2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017d30:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017d34:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017d38:	6892      	ldr	r2, [r2, #8]
 8017d3a:	f042 0210 	orr.w	r2, r2, #16
 8017d3e:	609a      	str	r2, [r3, #8]
 8017d40:	e00b      	b.n	8017d5a <RTC_RefClockCmd+0x76>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 8017d42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017d46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017d4a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017d4e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017d52:	6892      	ldr	r2, [r2, #8]
 8017d54:	f022 0210 	bic.w	r2, r2, #16
 8017d58:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8017d5a:	f7ff ff59 	bl	8017c10 <RTC_ExitInitMode>
    
    status = SUCCESS;
 8017d5e:	f04f 0301 	mov.w	r3, #1
 8017d62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8017d64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017d68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017d6c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8017d70:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 8017d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d74:	4618      	mov	r0, r3
 8017d76:	f107 0710 	add.w	r7, r7, #16
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd80      	pop	{r7, pc}
 8017d7e:	bf00      	nop

08017d80 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 8017d80:	b480      	push	{r7}
 8017d82:	b083      	sub	sp, #12
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	4603      	mov	r3, r0
 8017d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8017d8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017d8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017d92:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8017d96:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8017d98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017d9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017da0:	f04f 0253 	mov.w	r2, #83	; 0x53
 8017da4:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8017da6:	79fb      	ldrb	r3, [r7, #7]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d00c      	beq.n	8017dc6 <RTC_BypassShadowCmd+0x46>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8017dac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017db0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017db4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017db8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017dbc:	6892      	ldr	r2, [r2, #8]
 8017dbe:	f042 0220 	orr.w	r2, r2, #32
 8017dc2:	609a      	str	r2, [r3, #8]
 8017dc4:	e00b      	b.n	8017dde <RTC_BypassShadowCmd+0x5e>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8017dc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017dca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017dce:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017dd2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017dd6:	6892      	ldr	r2, [r2, #8]
 8017dd8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8017ddc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8017dde:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017de2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017de6:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8017dea:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017dec:	f107 070c 	add.w	r7, r7, #12
 8017df0:	46bd      	mov	sp, r7
 8017df2:	bc80      	pop	{r7}
 8017df4:	4770      	bx	lr
 8017df6:	bf00      	nop

08017df8 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8017df8:	b590      	push	{r4, r7, lr}
 8017dfa:	b085      	sub	sp, #20
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
 8017e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8017e02:	f04f 0300 	mov.w	r3, #0
 8017e06:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8017e08:	f04f 0300 	mov.w	r3, #0
 8017e0c:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d10d      	bne.n	8017e30 <RTC_SetTime+0x38>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8017e14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017e18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017e1c:	689b      	ldr	r3, [r3, #8]
 8017e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d119      	bne.n	8017e5a <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	f04f 0200 	mov.w	r2, #0
 8017e2c:	70da      	strb	r2, [r3, #3]
 8017e2e:	e014      	b.n	8017e5a <RTC_SetTime+0x62>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8017e30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017e34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017e38:	689b      	ldr	r3, [r3, #8]
 8017e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d007      	beq.n	8017e52 <RTC_SetTime+0x5a>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8017e42:	683b      	ldr	r3, [r7, #0]
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	4618      	mov	r0, r3
 8017e48:	f001 fb36 	bl	80194b8 <RTC_Bcd2ToByte>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	60fb      	str	r3, [r7, #12]
 8017e50:	e003      	b.n	8017e5a <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	f04f 0200 	mov.w	r2, #0
 8017e58:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d012      	beq.n	8017e86 <RTC_SetTime+0x8e>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	781b      	ldrb	r3, [r3, #0]
 8017e64:	ea4f 4203 	mov.w	r2, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8017e68:	683b      	ldr	r3, [r7, #0]
 8017e6a:	785b      	ldrb	r3, [r3, #1]
 8017e6c:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8017e70:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8017e76:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	78db      	ldrb	r3, [r3, #3]
 8017e7c:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8017e80:	4313      	orrs	r3, r2
 8017e82:	60fb      	str	r3, [r7, #12]
 8017e84:	e01e      	b.n	8017ec4 <RTC_SetTime+0xcc>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8017e86:	683b      	ldr	r3, [r7, #0]
 8017e88:	781b      	ldrb	r3, [r3, #0]
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f001 faf2 	bl	8019474 <RTC_ByteToBcd2>
 8017e90:	4603      	mov	r3, r0
 8017e92:	ea4f 4403 	mov.w	r4, r3, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8017e96:	683b      	ldr	r3, [r7, #0]
 8017e98:	785b      	ldrb	r3, [r3, #1]
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f001 faea 	bl	8019474 <RTC_ByteToBcd2>
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	ea4f 2303 	mov.w	r3, r3, lsl #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8017ea6:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8017ea8:	683b      	ldr	r3, [r7, #0]
 8017eaa:	789b      	ldrb	r3, [r3, #2]
 8017eac:	4618      	mov	r0, r3
 8017eae:	f001 fae1 	bl	8019474 <RTC_ByteToBcd2>
 8017eb2:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8017eb4:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8017eb8:	683b      	ldr	r3, [r7, #0]
 8017eba:	78db      	ldrb	r3, [r3, #3]
 8017ebc:	ea4f 4303 	mov.w	r3, r3, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8017ec0:	4313      	orrs	r3, r2
 8017ec2:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8017ec4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017ec8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017ecc:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8017ed0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8017ed2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017ed6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017eda:	f04f 0253 	mov.w	r2, #83	; 0x53
 8017ede:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8017ee0:	f7ff fe4c 	bl	8017b7c <RTC_EnterInitMode>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d103      	bne.n	8017ef2 <RTC_SetTime+0xfa>
  {
    status = ERROR;
 8017eea:	f04f 0300 	mov.w	r3, #0
 8017eee:	72fb      	strb	r3, [r7, #11]
 8017ef0:	e018      	b.n	8017f24 <RTC_SetTime+0x12c>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8017ef2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017ef6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8017efa:	68f9      	ldr	r1, [r7, #12]
 8017efc:	f647 737f 	movw	r3, #32639	; 0x7f7f
 8017f00:	f2c0 037f 	movt	r3, #127	; 0x7f
 8017f04:	400b      	ands	r3, r1
 8017f06:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8017f08:	f7ff fe82 	bl	8017c10 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 8017f0c:	f7ff fe92 	bl	8017c34 <RTC_WaitForSynchro>
 8017f10:	4603      	mov	r3, r0
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d103      	bne.n	8017f1e <RTC_SetTime+0x126>
    {
      status = ERROR;
 8017f16:	f04f 0300 	mov.w	r3, #0
 8017f1a:	72fb      	strb	r3, [r7, #11]
 8017f1c:	e002      	b.n	8017f24 <RTC_SetTime+0x12c>
    }
    else
    {
      status = SUCCESS;
 8017f1e:	f04f 0301 	mov.w	r3, #1
 8017f22:	72fb      	strb	r3, [r7, #11]
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8017f24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017f28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017f2c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8017f30:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 8017f32:	7afb      	ldrb	r3, [r7, #11]
}
 8017f34:	4618      	mov	r0, r3
 8017f36:	f107 0714 	add.w	r7, r7, #20
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd90      	pop	{r4, r7, pc}
 8017f3e:	bf00      	nop

08017f40 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 8017f40:	b480      	push	{r7}
 8017f42:	b083      	sub	sp, #12
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f04f 0200 	mov.w	r2, #0
 8017f4e:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	f04f 0200 	mov.w	r2, #0
 8017f56:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f04f 0200 	mov.w	r2, #0
 8017f5e:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	f04f 0200 	mov.w	r2, #0
 8017f66:	709a      	strb	r2, [r3, #2]
}
 8017f68:	f107 070c 	add.w	r7, r7, #12
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bc80      	pop	{r7}
 8017f70:	4770      	bx	lr
 8017f72:	bf00      	nop

08017f74 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b084      	sub	sp, #16
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
 8017f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8017f7e:	f04f 0300 	mov.w	r3, #0
 8017f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8017f84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8017f88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	461a      	mov	r2, r3
 8017f90:	f647 737f 	movw	r3, #32639	; 0x7f7f
 8017f94:	f2c0 037f 	movt	r3, #127	; 0x7f
 8017f98:	4013      	ands	r3, r2
 8017f9a:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8017fa2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8017fa6:	b2da      	uxtb	r2, r3
 8017fa8:	683b      	ldr	r3, [r7, #0]
 8017faa:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8017fb2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8017fb6:	b2da      	uxtb	r2, r3
 8017fb8:	683b      	ldr	r3, [r7, #0]
 8017fba:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	b2db      	uxtb	r3, r3
 8017fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017fc4:	b2da      	uxtb	r2, r3
 8017fc6:	683b      	ldr	r3, [r7, #0]
 8017fc8:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017fd0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8017fd4:	b2da      	uxtb	r2, r3
 8017fd6:	683b      	ldr	r3, [r7, #0]
 8017fd8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d11a      	bne.n	8018016 <RTC_GetTime+0xa2>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	781b      	ldrb	r3, [r3, #0]
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f001 fa67 	bl	80194b8 <RTC_Bcd2ToByte>
 8017fea:	4603      	mov	r3, r0
 8017fec:	461a      	mov	r2, r3
 8017fee:	683b      	ldr	r3, [r7, #0]
 8017ff0:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	785b      	ldrb	r3, [r3, #1]
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f001 fa5e 	bl	80194b8 <RTC_Bcd2ToByte>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	461a      	mov	r2, r3
 8018000:	683b      	ldr	r3, [r7, #0]
 8018002:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8018004:	683b      	ldr	r3, [r7, #0]
 8018006:	789b      	ldrb	r3, [r3, #2]
 8018008:	4618      	mov	r0, r3
 801800a:	f001 fa55 	bl	80194b8 <RTC_Bcd2ToByte>
 801800e:	4603      	mov	r3, r0
 8018010:	461a      	mov	r2, r3
 8018012:	683b      	ldr	r3, [r7, #0]
 8018014:	709a      	strb	r2, [r3, #2]
  }
}
 8018016:	f107 0710 	add.w	r7, r7, #16
 801801a:	46bd      	mov	sp, r7
 801801c:	bd80      	pop	{r7, pc}
 801801e:	bf00      	nop

08018020 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Subseconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 8018020:	b480      	push	{r7}
 8018022:	b083      	sub	sp, #12
 8018024:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 8018026:	f04f 0300 	mov.w	r3, #0
 801802a:	607b      	str	r3, [r7, #4]
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 801802c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018030:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018036:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 8018038:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801803c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018040:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 8018042:	687b      	ldr	r3, [r7, #4]
}
 8018044:	4618      	mov	r0, r3
 8018046:	f107 070c 	add.w	r7, r7, #12
 801804a:	46bd      	mov	sp, r7
 801804c:	bc80      	pop	{r7}
 801804e:	4770      	bx	lr

08018050 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8018050:	b590      	push	{r4, r7, lr}
 8018052:	b085      	sub	sp, #20
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801805a:	f04f 0300 	mov.w	r3, #0
 801805e:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8018060:	f04f 0300 	mov.w	r3, #0
 8018064:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d10f      	bne.n	801808c <RTC_SetDate+0x3c>
 801806c:	683b      	ldr	r3, [r7, #0]
 801806e:	785b      	ldrb	r3, [r3, #1]
 8018070:	f003 0310 	and.w	r3, r3, #16
 8018074:	2b00      	cmp	r3, #0
 8018076:	d009      	beq.n	801808c <RTC_SetDate+0x3c>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8018078:	683b      	ldr	r3, [r7, #0]
 801807a:	785b      	ldrb	r3, [r3, #1]
 801807c:	f023 0310 	bic.w	r3, r3, #16
 8018080:	b2db      	uxtb	r3, r3
 8018082:	f103 030a 	add.w	r3, r3, #10
 8018086:	b2da      	uxtb	r2, r3
 8018088:	683b      	ldr	r3, [r7, #0]
 801808a:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d00d      	beq.n	80180ae <RTC_SetDate+0x5e>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8018092:	683b      	ldr	r3, [r7, #0]
 8018094:	785b      	ldrb	r3, [r3, #1]
 8018096:	4618      	mov	r0, r3
 8018098:	f001 fa0e 	bl	80194b8 <RTC_Bcd2ToByte>
 801809c:	4603      	mov	r3, r0
 801809e:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 80180a0:	683b      	ldr	r3, [r7, #0]
 80180a2:	789b      	ldrb	r3, [r3, #2]
 80180a4:	4618      	mov	r0, r3
 80180a6:	f001 fa07 	bl	80194b8 <RTC_Bcd2ToByte>
 80180aa:	4603      	mov	r3, r0
 80180ac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d012      	beq.n	80180da <RTC_SetDate+0x8a>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80180b4:	683b      	ldr	r3, [r7, #0]
 80180b6:	78db      	ldrb	r3, [r3, #3]
 80180b8:	ea4f 4203 	mov.w	r2, r3, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80180bc:	683b      	ldr	r3, [r7, #0]
 80180be:	785b      	ldrb	r3, [r3, #1]
 80180c0:	ea4f 2303 	mov.w	r3, r3, lsl #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80180c4:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 80180c6:	683b      	ldr	r3, [r7, #0]
 80180c8:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80180ca:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 80180cc:	683b      	ldr	r3, [r7, #0]
 80180ce:	781b      	ldrb	r3, [r3, #0]
 80180d0:	ea4f 3343 	mov.w	r3, r3, lsl #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80180d4:	4313      	orrs	r3, r2
 80180d6:	60fb      	str	r3, [r7, #12]
 80180d8:	e01e      	b.n	8018118 <RTC_SetDate+0xc8>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	78db      	ldrb	r3, [r3, #3]
 80180de:	4618      	mov	r0, r3
 80180e0:	f001 f9c8 	bl	8019474 <RTC_ByteToBcd2>
 80180e4:	4603      	mov	r3, r0
 80180e6:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80180ea:	683b      	ldr	r3, [r7, #0]
 80180ec:	785b      	ldrb	r3, [r3, #1]
 80180ee:	4618      	mov	r0, r3
 80180f0:	f001 f9c0 	bl	8019474 <RTC_ByteToBcd2>
 80180f4:	4603      	mov	r3, r0
 80180f6:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80180fa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 80180fc:	683b      	ldr	r3, [r7, #0]
 80180fe:	789b      	ldrb	r3, [r3, #2]
 8018100:	4618      	mov	r0, r3
 8018102:	f001 f9b7 	bl	8019474 <RTC_ByteToBcd2>
 8018106:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8018108:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 801810c:	683b      	ldr	r3, [r7, #0]
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	ea4f 3343 	mov.w	r3, r3, lsl #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8018114:	4313      	orrs	r3, r2
 8018116:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018118:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801811c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018120:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8018124:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8018126:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801812a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801812e:	f04f 0253 	mov.w	r2, #83	; 0x53
 8018132:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8018134:	f7ff fd22 	bl	8017b7c <RTC_EnterInitMode>
 8018138:	4603      	mov	r3, r0
 801813a:	2b00      	cmp	r3, #0
 801813c:	d103      	bne.n	8018146 <RTC_SetDate+0xf6>
  {
    status = ERROR;
 801813e:	f04f 0300 	mov.w	r3, #0
 8018142:	72fb      	strb	r3, [r7, #11]
 8018144:	e017      	b.n	8018176 <RTC_SetDate+0x126>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 8018146:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801814a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801814e:	68fa      	ldr	r2, [r7, #12]
 8018150:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8018154:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8018158:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 801815a:	f7ff fd59 	bl	8017c10 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 801815e:	f7ff fd69 	bl	8017c34 <RTC_WaitForSynchro>
 8018162:	4603      	mov	r3, r0
 8018164:	2b00      	cmp	r3, #0
 8018166:	d103      	bne.n	8018170 <RTC_SetDate+0x120>
    {
      status = ERROR;
 8018168:	f04f 0300 	mov.w	r3, #0
 801816c:	72fb      	strb	r3, [r7, #11]
 801816e:	e002      	b.n	8018176 <RTC_SetDate+0x126>
    }
    else
    {
      status = SUCCESS;
 8018170:	f04f 0301 	mov.w	r3, #1
 8018174:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8018176:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801817a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801817e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018182:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8018184:	7afb      	ldrb	r3, [r7, #11]
}
 8018186:	4618      	mov	r0, r3
 8018188:	f107 0714 	add.w	r7, r7, #20
 801818c:	46bd      	mov	sp, r7
 801818e:	bd90      	pop	{r4, r7, pc}

08018190 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 8018190:	b480      	push	{r7}
 8018192:	b083      	sub	sp, #12
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f04f 0201 	mov.w	r2, #1
 801819e:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	f04f 0201 	mov.w	r2, #1
 80181a6:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	f04f 0201 	mov.w	r2, #1
 80181ae:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	f04f 0200 	mov.w	r2, #0
 80181b6:	70da      	strb	r2, [r3, #3]
}
 80181b8:	f107 070c 	add.w	r7, r7, #12
 80181bc:	46bd      	mov	sp, r7
 80181be:	bc80      	pop	{r7}
 80181c0:	4770      	bx	lr
 80181c2:	bf00      	nop

080181c4 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b084      	sub	sp, #16
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80181ce:	f04f 0300 	mov.w	r3, #0
 80181d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 80181d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80181d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80181dc:	685b      	ldr	r3, [r3, #4]
 80181de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80181e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80181e6:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80181ee:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80181f2:	b2da      	uxtb	r2, r3
 80181f4:	683b      	ldr	r3, [r7, #0]
 80181f6:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80181fe:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8018202:	b2da      	uxtb	r2, r3
 8018204:	683b      	ldr	r3, [r7, #0]
 8018206:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	b2db      	uxtb	r3, r3
 801820c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018210:	b2da      	uxtb	r2, r3
 8018212:	683b      	ldr	r3, [r7, #0]
 8018214:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801821c:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8018220:	b2da      	uxtb	r2, r3
 8018222:	683b      	ldr	r3, [r7, #0]
 8018224:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d11e      	bne.n	801826a <RTC_GetDate+0xa6>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	78db      	ldrb	r3, [r3, #3]
 8018230:	4618      	mov	r0, r3
 8018232:	f001 f941 	bl	80194b8 <RTC_Bcd2ToByte>
 8018236:	4603      	mov	r3, r0
 8018238:	461a      	mov	r2, r3
 801823a:	683b      	ldr	r3, [r7, #0]
 801823c:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	785b      	ldrb	r3, [r3, #1]
 8018242:	4618      	mov	r0, r3
 8018244:	f001 f938 	bl	80194b8 <RTC_Bcd2ToByte>
 8018248:	4603      	mov	r3, r0
 801824a:	461a      	mov	r2, r3
 801824c:	683b      	ldr	r3, [r7, #0]
 801824e:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	789b      	ldrb	r3, [r3, #2]
 8018254:	4618      	mov	r0, r3
 8018256:	f001 f92f 	bl	80194b8 <RTC_Bcd2ToByte>
 801825a:	4603      	mov	r3, r0
 801825c:	461a      	mov	r2, r3
 801825e:	683b      	ldr	r3, [r7, #0]
 8018260:	709a      	strb	r2, [r3, #2]
    RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 8018262:	683b      	ldr	r3, [r7, #0]
 8018264:	781a      	ldrb	r2, [r3, #0]
 8018266:	683b      	ldr	r3, [r7, #0]
 8018268:	701a      	strb	r2, [r3, #0]
  }
}
 801826a:	f107 0710 	add.w	r7, r7, #16
 801826e:	46bd      	mov	sp, r7
 8018270:	bd80      	pop	{r7, pc}
 8018272:	bf00      	nop

08018274 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8018274:	b590      	push	{r4, r7, lr}
 8018276:	b087      	sub	sp, #28
 8018278:	af00      	add	r7, sp, #0
 801827a:	60f8      	str	r0, [r7, #12]
 801827c:	60b9      	str	r1, [r7, #8]
 801827e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8018280:	f04f 0300 	mov.w	r3, #0
 8018284:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d10d      	bne.n	80182a8 <RTC_SetAlarm+0x34>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801828c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018290:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018294:	689b      	ldr	r3, [r3, #8]
 8018296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801829a:	2b00      	cmp	r3, #0
 801829c:	d12c      	bne.n	80182f8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	f04f 0200 	mov.w	r2, #0
 80182a4:	70da      	strb	r2, [r3, #3]
 80182a6:	e027      	b.n	80182f8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80182a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80182ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80182b0:	689b      	ldr	r3, [r3, #8]
 80182b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d007      	beq.n	80182ca <RTC_SetAlarm+0x56>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	781b      	ldrb	r3, [r3, #0]
 80182be:	4618      	mov	r0, r3
 80182c0:	f001 f8fa 	bl	80194b8 <RTC_Bcd2ToByte>
 80182c4:	4603      	mov	r3, r0
 80182c6:	617b      	str	r3, [r7, #20]
 80182c8:	e003      	b.n	80182d2 <RTC_SetAlarm+0x5e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	f04f 0200 	mov.w	r2, #0
 80182d0:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	689b      	ldr	r3, [r3, #8]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d107      	bne.n	80182ea <RTC_SetAlarm+0x76>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	7b1b      	ldrb	r3, [r3, #12]
 80182de:	4618      	mov	r0, r3
 80182e0:	f001 f8ea 	bl	80194b8 <RTC_Bcd2ToByte>
 80182e4:	4603      	mov	r3, r0
 80182e6:	617b      	str	r3, [r7, #20]
 80182e8:	e006      	b.n	80182f8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	7b1b      	ldrb	r3, [r3, #12]
 80182ee:	4618      	mov	r0, r3
 80182f0:	f001 f8e2 	bl	80194b8 <RTC_Bcd2ToByte>
 80182f4:	4603      	mov	r3, r0
 80182f6:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d01d      	beq.n	801833a <RTC_SetAlarm+0xc6>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	781b      	ldrb	r3, [r3, #0]
 8018302:	ea4f 4203 	mov.w	r2, r3, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	785b      	ldrb	r3, [r3, #1]
 801830a:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 801830e:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8018314:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	78db      	ldrb	r3, [r3, #3]
 801831a:	ea4f 4303 	mov.w	r3, r3, lsl #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 801831e:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	7b1b      	ldrb	r3, [r3, #12]
 8018324:	ea4f 6303 	mov.w	r3, r3, lsl #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8018328:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 801832e:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8018334:	4313      	orrs	r3, r2
 8018336:	617b      	str	r3, [r7, #20]
 8018338:	e02f      	b.n	801839a <RTC_SetAlarm+0x126>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	781b      	ldrb	r3, [r3, #0]
 801833e:	4618      	mov	r0, r3
 8018340:	f001 f898 	bl	8019474 <RTC_ByteToBcd2>
 8018344:	4603      	mov	r3, r0
 8018346:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	785b      	ldrb	r3, [r3, #1]
 801834e:	4618      	mov	r0, r3
 8018350:	f001 f890 	bl	8019474 <RTC_ByteToBcd2>
 8018354:	4603      	mov	r3, r0
 8018356:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 801835a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	789b      	ldrb	r3, [r3, #2]
 8018360:	4618      	mov	r0, r3
 8018362:	f001 f887 	bl	8019474 <RTC_ByteToBcd2>
 8018366:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8018368:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	78db      	ldrb	r3, [r3, #3]
 8018370:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8018374:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	7b1b      	ldrb	r3, [r3, #12]
 801837c:	4618      	mov	r0, r3
 801837e:	f001 f879 	bl	8019474 <RTC_ByteToBcd2>
 8018382:	4603      	mov	r3, r0
 8018384:	ea4f 6303 	mov.w	r3, r3, lsl #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8018388:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8018390:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8018396:	4313      	orrs	r3, r2
 8018398:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801839a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801839e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80183a2:	f04f 02ca 	mov.w	r2, #202	; 0xca
 80183a6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80183a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80183ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80183b0:	f04f 0253 	mov.w	r2, #83	; 0x53
 80183b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 80183b6:	68bb      	ldr	r3, [r7, #8]
 80183b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80183bc:	d106      	bne.n	80183cc <RTC_SetAlarm+0x158>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 80183be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80183c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80183c6:	697a      	ldr	r2, [r7, #20]
 80183c8:	61da      	str	r2, [r3, #28]
 80183ca:	e005      	b.n	80183d8 <RTC_SetAlarm+0x164>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 80183cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80183d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80183d4:	697a      	ldr	r2, [r7, #20]
 80183d6:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 80183d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80183dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80183e0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80183e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80183e6:	f107 071c 	add.w	r7, r7, #28
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd90      	pop	{r4, r7, pc}
 80183ee:	bf00      	nop

080183f0 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80183f0:	b480      	push	{r7}
 80183f2:	b083      	sub	sp, #12
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	f04f 0200 	mov.w	r2, #0
 80183fe:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	f04f 0200 	mov.w	r2, #0
 8018406:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	f04f 0200 	mov.w	r2, #0
 801840e:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	f04f 0200 	mov.w	r2, #0
 8018416:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f04f 0200 	mov.w	r2, #0
 801841e:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	f04f 0201 	mov.w	r2, #1
 8018426:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	f04f 0200 	mov.w	r2, #0
 801842e:	605a      	str	r2, [r3, #4]
}
 8018430:	f107 070c 	add.w	r7, r7, #12
 8018434:	46bd      	mov	sp, r7
 8018436:	bc80      	pop	{r7}
 8018438:	4770      	bx	lr
 801843a:	bf00      	nop

0801843c <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 801843c:	b580      	push	{r7, lr}
 801843e:	b086      	sub	sp, #24
 8018440:	af00      	add	r7, sp, #0
 8018442:	60f8      	str	r0, [r7, #12]
 8018444:	60b9      	str	r1, [r7, #8]
 8018446:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8018448:	f04f 0300 	mov.w	r3, #0
 801844c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 801844e:	68bb      	ldr	r3, [r7, #8]
 8018450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018454:	d106      	bne.n	8018464 <RTC_GetAlarm+0x28>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 8018456:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801845a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801845e:	69db      	ldr	r3, [r3, #28]
 8018460:	617b      	str	r3, [r7, #20]
 8018462:	e005      	b.n	8018470 <RTC_GetAlarm+0x34>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 8018464:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018468:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801846c:	6a1b      	ldr	r3, [r3, #32]
 801846e:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8018470:	697b      	ldr	r3, [r7, #20]
 8018472:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8018476:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801847a:	b2da      	uxtb	r2, r3
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8018486:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801848a:	b2da      	uxtb	r2, r3
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	b2db      	uxtb	r3, r3
 8018494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018498:	b2da      	uxtb	r2, r3
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80184a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80184a8:	b2da      	uxtb	r2, r3
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 80184ae:	697b      	ldr	r3, [r7, #20]
 80184b0:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80184b4:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80184b8:	b2da      	uxtb	r2, r3
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80184be:	697b      	ldr	r3, [r7, #20]
 80184c0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 80184c8:	697b      	ldr	r3, [r7, #20]
 80184ca:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d123      	bne.n	8018520 <RTC_GetAlarm+0xe4>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	781b      	ldrb	r3, [r3, #0]
 80184dc:	4618      	mov	r0, r3
 80184de:	f000 ffeb 	bl	80194b8 <RTC_Bcd2ToByte>
 80184e2:	4603      	mov	r3, r0
 80184e4:	461a      	mov	r2, r3
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	785b      	ldrb	r3, [r3, #1]
 80184ee:	4618      	mov	r0, r3
 80184f0:	f000 ffe2 	bl	80194b8 <RTC_Bcd2ToByte>
 80184f4:	4603      	mov	r3, r0
 80184f6:	461a      	mov	r2, r3
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	789b      	ldrb	r3, [r3, #2]
 8018500:	4618      	mov	r0, r3
 8018502:	f000 ffd9 	bl	80194b8 <RTC_Bcd2ToByte>
 8018506:	4603      	mov	r3, r0
 8018508:	461a      	mov	r2, r3
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	7b1b      	ldrb	r3, [r3, #12]
 8018512:	4618      	mov	r0, r3
 8018514:	f000 ffd0 	bl	80194b8 <RTC_Bcd2ToByte>
 8018518:	4603      	mov	r3, r0
 801851a:	461a      	mov	r2, r3
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	731a      	strb	r2, [r3, #12]
  }  
}
 8018520:	f107 0718 	add.w	r7, r7, #24
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8018528:	b480      	push	{r7}
 801852a:	b087      	sub	sp, #28
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
 8018530:	460b      	mov	r3, r1
 8018532:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 8018534:	f04f 0300 	mov.w	r3, #0
 8018538:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 801853a:	f04f 0300 	mov.w	r3, #0
 801853e:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8018540:	f04f 0300 	mov.w	r3, #0
 8018544:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018546:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801854a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801854e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8018552:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8018554:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018558:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801855c:	f04f 0253 	mov.w	r2, #83	; 0x53
 8018560:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8018562:	78fb      	ldrb	r3, [r7, #3]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d010      	beq.n	801858a <RTC_AlarmCmd+0x62>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8018568:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801856c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018570:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018574:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018578:	6892      	ldr	r2, [r2, #8]
 801857a:	4611      	mov	r1, r2
 801857c:	687a      	ldr	r2, [r7, #4]
 801857e:	430a      	orrs	r2, r1
 8018580:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 8018582:	f04f 0301 	mov.w	r3, #1
 8018586:	75fb      	strb	r3, [r7, #23]
 8018588:	e037      	b.n	80185fa <RTC_AlarmCmd+0xd2>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 801858a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801858e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018592:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018596:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801859a:	6892      	ldr	r2, [r2, #8]
 801859c:	4611      	mov	r1, r2
 801859e:	687a      	ldr	r2, [r7, #4]
 80185a0:	ea6f 0202 	mvn.w	r2, r2
 80185a4:	400a      	ands	r2, r1
 80185a6:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 80185a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80185ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80185b0:	68db      	ldr	r3, [r3, #12]
 80185b2:	461a      	mov	r2, r3
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80185ba:	4013      	ands	r3, r2
 80185bc:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	f103 0301 	add.w	r3, r3, #1
 80185c4:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80185cc:	d002      	beq.n	80185d4 <RTC_AlarmCmd+0xac>
 80185ce:	693b      	ldr	r3, [r7, #16]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d0e9      	beq.n	80185a8 <RTC_AlarmCmd+0x80>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 80185d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80185d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80185dc:	68db      	ldr	r3, [r3, #12]
 80185de:	461a      	mov	r2, r3
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80185e6:	4013      	ands	r3, r2
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d103      	bne.n	80185f4 <RTC_AlarmCmd+0xcc>
    {
      status = ERROR;
 80185ec:	f04f 0300 	mov.w	r3, #0
 80185f0:	75fb      	strb	r3, [r7, #23]
 80185f2:	e002      	b.n	80185fa <RTC_AlarmCmd+0xd2>
    } 
    else
    {
      status = SUCCESS;
 80185f4:	f04f 0301 	mov.w	r3, #1
 80185f8:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80185fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80185fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018602:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018606:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8018608:	7dfb      	ldrb	r3, [r7, #23]
}
 801860a:	4618      	mov	r0, r3
 801860c:	f107 071c 	add.w	r7, r7, #28
 8018610:	46bd      	mov	sp, r7
 8018612:	bc80      	pop	{r7}
 8018614:	4770      	bx	lr
 8018616:	bf00      	nop

08018618 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 8018618:	b480      	push	{r7}
 801861a:	b087      	sub	sp, #28
 801861c:	af00      	add	r7, sp, #0
 801861e:	60f8      	str	r0, [r7, #12]
 8018620:	60b9      	str	r1, [r7, #8]
 8018622:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8018624:	f04f 0300 	mov.w	r3, #0
 8018628:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801862a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801862e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018632:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8018636:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8018638:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801863c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018640:	f04f 0253 	mov.w	r2, #83	; 0x53
 8018644:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 8018646:	68ba      	ldr	r2, [r7, #8]
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	4313      	orrs	r3, r2
 801864c:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018654:	d106      	bne.n	8018664 <RTC_AlarmSubSecondConfig+0x4c>
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 8018656:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801865a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801865e:	697a      	ldr	r2, [r7, #20]
 8018660:	645a      	str	r2, [r3, #68]	; 0x44
 8018662:	e005      	b.n	8018670 <RTC_AlarmSubSecondConfig+0x58>
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 8018664:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018668:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801866c:	697a      	ldr	r2, [r7, #20]
 801866e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8018670:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018674:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018678:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801867c:	625a      	str	r2, [r3, #36]	; 0x24

}
 801867e:	f107 071c 	add.w	r7, r7, #28
 8018682:	46bd      	mov	sp, r7
 8018684:	bc80      	pop	{r7}
 8018686:	4770      	bx	lr

08018688 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Subseconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 8018688:	b480      	push	{r7}
 801868a:	b085      	sub	sp, #20
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8018690:	f04f 0300 	mov.w	r3, #0
 8018694:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801869c:	d10a      	bne.n	80186b4 <RTC_GetAlarmSubSecond+0x2c>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 801869e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80186a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80186a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186a8:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80186ac:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80186b0:	60fb      	str	r3, [r7, #12]
 80186b2:	e009      	b.n	80186c8 <RTC_GetAlarmSubSecond+0x40>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80186b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80186b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80186bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80186be:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80186c2:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80186c6:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 80186c8:	68fb      	ldr	r3, [r7, #12]
}
 80186ca:	4618      	mov	r0, r3
 80186cc:	f107 0714 	add.w	r7, r7, #20
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bc80      	pop	{r7}
 80186d4:	4770      	bx	lr
 80186d6:	bf00      	nop

080186d8 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 80186d8:	b480      	push	{r7}
 80186da:	b083      	sub	sp, #12
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80186e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80186e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80186e8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 80186ec:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80186ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80186f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80186f6:	f04f 0253 	mov.w	r2, #83	; 0x53
 80186fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80186fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018700:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018704:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018708:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801870c:	6892      	ldr	r2, [r2, #8]
 801870e:	f022 0207 	bic.w	r2, r2, #7
 8018712:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 8018714:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018718:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801871c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018720:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018724:	6892      	ldr	r2, [r2, #8]
 8018726:	4611      	mov	r1, r2
 8018728:	687a      	ldr	r2, [r7, #4]
 801872a:	430a      	orrs	r2, r1
 801872c:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 801872e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018732:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018736:	f04f 02ff 	mov.w	r2, #255	; 0xff
 801873a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801873c:	f107 070c 	add.w	r7, r7, #12
 8018740:	46bd      	mov	sp, r7
 8018742:	bc80      	pop	{r7}
 8018744:	4770      	bx	lr
 8018746:	bf00      	nop

08018748 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 8018748:	b480      	push	{r7}
 801874a:	b083      	sub	sp, #12
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018750:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018754:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018758:	f04f 02ca 	mov.w	r2, #202	; 0xca
 801875c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801875e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018762:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018766:	f04f 0253 	mov.w	r2, #83	; 0x53
 801876a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 801876c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018770:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018774:	687a      	ldr	r2, [r7, #4]
 8018776:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8018778:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801877c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018780:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018784:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018786:	f107 070c 	add.w	r7, r7, #12
 801878a:	46bd      	mov	sp, r7
 801878c:	bc80      	pop	{r7}
 801878e:	4770      	bx	lr

08018790 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 8018790:	b480      	push	{r7}
 8018792:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8018794:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018798:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801879c:	695b      	ldr	r3, [r3, #20]
 801879e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80187a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 80187a6:	4618      	mov	r0, r3
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bc80      	pop	{r7}
 80187ac:	4770      	bx	lr
 80187ae:	bf00      	nop

080187b0 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 80187b0:	b480      	push	{r7}
 80187b2:	b087      	sub	sp, #28
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	4603      	mov	r3, r0
 80187b8:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 80187ba:	f04f 0300 	mov.w	r3, #0
 80187be:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 80187c0:	f04f 0300 	mov.w	r3, #0
 80187c4:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 80187c6:	f04f 0300 	mov.w	r3, #0
 80187ca:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80187cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80187d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80187d4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 80187d8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80187da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80187de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80187e2:	f04f 0253 	mov.w	r2, #83	; 0x53
 80187e6:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 80187e8:	79fb      	ldrb	r3, [r7, #7]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d00f      	beq.n	801880e <RTC_WakeUpCmd+0x5e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 80187ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80187f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80187f6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80187fa:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80187fe:	6892      	ldr	r2, [r2, #8]
 8018800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018804:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 8018806:	f04f 0301 	mov.w	r3, #1
 801880a:	75fb      	strb	r3, [r7, #23]
 801880c:	e02e      	b.n	801886c <RTC_WakeUpCmd+0xbc>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 801880e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018812:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018816:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801881a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801881e:	6892      	ldr	r2, [r2, #8]
 8018820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018824:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8018826:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801882a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801882e:	68db      	ldr	r3, [r3, #12]
 8018830:	f003 0304 	and.w	r3, r3, #4
 8018834:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	f103 0301 	add.w	r3, r3, #1
 801883c:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018844:	d002      	beq.n	801884c <RTC_WakeUpCmd+0x9c>
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d0ec      	beq.n	8018826 <RTC_WakeUpCmd+0x76>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 801884c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018850:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018854:	68db      	ldr	r3, [r3, #12]
 8018856:	f003 0304 	and.w	r3, r3, #4
 801885a:	2b00      	cmp	r3, #0
 801885c:	d103      	bne.n	8018866 <RTC_WakeUpCmd+0xb6>
    {
      status = ERROR;
 801885e:	f04f 0300 	mov.w	r3, #0
 8018862:	75fb      	strb	r3, [r7, #23]
 8018864:	e002      	b.n	801886c <RTC_WakeUpCmd+0xbc>
    }
    else
    {
      status = SUCCESS;
 8018866:	f04f 0301 	mov.w	r3, #1
 801886a:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 801886c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018870:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018874:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018878:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 801887a:	7dfb      	ldrb	r3, [r7, #23]
}
 801887c:	4618      	mov	r0, r3
 801887e:	f107 071c 	add.w	r7, r7, #28
 8018882:	46bd      	mov	sp, r7
 8018884:	bc80      	pop	{r7}
 8018886:	4770      	bx	lr

08018888 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 8018888:	b480      	push	{r7}
 801888a:	b083      	sub	sp, #12
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
 8018890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018892:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018896:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801889a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 801889e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80188a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80188a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80188a8:	f04f 0253 	mov.w	r2, #83	; 0x53
 80188ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 80188ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80188b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80188b6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80188ba:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80188be:	6892      	ldr	r2, [r2, #8]
 80188c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80188c4:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 80188c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80188ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80188ce:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80188d2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80188d6:	6892      	ldr	r2, [r2, #8]
 80188d8:	4611      	mov	r1, r2
 80188da:	6878      	ldr	r0, [r7, #4]
 80188dc:	683a      	ldr	r2, [r7, #0]
 80188de:	4302      	orrs	r2, r0
 80188e0:	430a      	orrs	r2, r1
 80188e2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80188e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80188e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80188ec:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80188f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80188f2:	f107 070c 	add.w	r7, r7, #12
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bc80      	pop	{r7}
 80188fa:	4770      	bx	lr

080188fc <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 80188fc:	b480      	push	{r7}
 80188fe:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 8018900:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018904:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018908:	689b      	ldr	r3, [r3, #8]
 801890a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 801890e:	4618      	mov	r0, r3
 8018910:	46bd      	mov	sp, r7
 8018912:	bc80      	pop	{r7}
 8018914:	4770      	bx	lr
 8018916:	bf00      	nop

08018918 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 8018918:	b480      	push	{r7}
 801891a:	b083      	sub	sp, #12
 801891c:	af00      	add	r7, sp, #0
 801891e:	6078      	str	r0, [r7, #4]
 8018920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018922:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018926:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801892a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 801892e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8018930:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018934:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018938:	f04f 0253 	mov.w	r2, #83	; 0x53
 801893c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 801893e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018942:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018946:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801894a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801894e:	6892      	ldr	r2, [r2, #8]
 8018950:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8018954:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8018956:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801895a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801895e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018962:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018966:	6892      	ldr	r2, [r2, #8]
 8018968:	4611      	mov	r1, r2
 801896a:	6878      	ldr	r0, [r7, #4]
 801896c:	683a      	ldr	r2, [r7, #0]
 801896e:	4302      	orrs	r2, r0
 8018970:	430a      	orrs	r2, r1
 8018972:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8018974:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018978:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801897c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018980:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018982:	f107 070c 	add.w	r7, r7, #12
 8018986:	46bd      	mov	sp, r7
 8018988:	bc80      	pop	{r7}
 801898a:	4770      	bx	lr

0801898c <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b084      	sub	sp, #16
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
 8018994:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8018996:	f04f 0300 	mov.w	r3, #0
 801899a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801899c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80189a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80189a4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 80189a8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80189aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80189ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80189b2:	f04f 0253 	mov.w	r2, #83	; 0x53
 80189b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80189b8:	f7ff f8e0 	bl	8017b7c <RTC_EnterInitMode>
 80189bc:	4603      	mov	r3, r0
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d103      	bne.n	80189ca <RTC_CoarseCalibConfig+0x3e>
  {
    status = ERROR;
 80189c2:	f04f 0300 	mov.w	r3, #0
 80189c6:	73fb      	strb	r3, [r7, #15]
 80189c8:	e00c      	b.n	80189e4 <RTC_CoarseCalibConfig+0x58>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 80189ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80189ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80189d2:	6879      	ldr	r1, [r7, #4]
 80189d4:	683a      	ldr	r2, [r7, #0]
 80189d6:	430a      	orrs	r2, r1
 80189d8:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 80189da:	f7ff f919 	bl	8017c10 <RTC_ExitInitMode>
    
    status = SUCCESS;
 80189de:	f04f 0301 	mov.w	r3, #1
 80189e2:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80189e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80189e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80189ec:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80189f0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80189f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	f107 0710 	add.w	r7, r7, #16
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop

08018a00 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b084      	sub	sp, #16
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	4603      	mov	r3, r0
 8018a08:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8018a0a:	f04f 0300 	mov.w	r3, #0
 8018a0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018a10:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018a14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018a18:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8018a1c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8018a1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018a22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018a26:	f04f 0253 	mov.w	r2, #83	; 0x53
 8018a2a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8018a2c:	f7ff f8a6 	bl	8017b7c <RTC_EnterInitMode>
 8018a30:	4603      	mov	r3, r0
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d103      	bne.n	8018a3e <RTC_CoarseCalibCmd+0x3e>
  {
    status =  ERROR;
 8018a36:	f04f 0300 	mov.w	r3, #0
 8018a3a:	73fb      	strb	r3, [r7, #15]
 8018a3c:	e020      	b.n	8018a80 <RTC_CoarseCalibCmd+0x80>
  }
  else
  {
    if (NewState != DISABLE)
 8018a3e:	79fb      	ldrb	r3, [r7, #7]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d00c      	beq.n	8018a5e <RTC_CoarseCalibCmd+0x5e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8018a44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018a48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018a4c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018a50:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018a54:	6892      	ldr	r2, [r2, #8]
 8018a56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018a5a:	609a      	str	r2, [r3, #8]
 8018a5c:	e00b      	b.n	8018a76 <RTC_CoarseCalibCmd+0x76>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8018a5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018a62:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018a66:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018a6a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018a6e:	6892      	ldr	r2, [r2, #8]
 8018a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018a74:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8018a76:	f7ff f8cb 	bl	8017c10 <RTC_ExitInitMode>
    
    status = SUCCESS;
 8018a7a:	f04f 0301 	mov.w	r3, #1
 8018a7e:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8018a80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018a84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018a88:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018a8c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8018a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	f107 0710 	add.w	r7, r7, #16
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop

08018a9c <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 8018a9c:	b480      	push	{r7}
 8018a9e:	b083      	sub	sp, #12
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018aa6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018aaa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018aae:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8018ab2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8018ab4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018ab8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018abc:	f04f 0253 	mov.w	r2, #83	; 0x53
 8018ac0:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8018ac2:	79fb      	ldrb	r3, [r7, #7]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d00c      	beq.n	8018ae2 <RTC_CalibOutputCmd+0x46>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8018ac8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018acc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018ad0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018ad4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018ad8:	6892      	ldr	r2, [r2, #8]
 8018ada:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8018ade:	609a      	str	r2, [r3, #8]
 8018ae0:	e00b      	b.n	8018afa <RTC_CalibOutputCmd+0x5e>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8018ae2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018ae6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018aea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018aee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018af2:	6892      	ldr	r2, [r2, #8]
 8018af4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8018af8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8018afa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018afe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018b02:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018b06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018b08:	f107 070c 	add.w	r7, r7, #12
 8018b0c:	46bd      	mov	sp, r7
 8018b0e:	bc80      	pop	{r7}
 8018b10:	4770      	bx	lr
 8018b12:	bf00      	nop

08018b14 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 8018b14:	b480      	push	{r7}
 8018b16:	b083      	sub	sp, #12
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018b1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018b20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018b24:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8018b28:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8018b2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018b2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018b32:	f04f 0253 	mov.w	r2, #83	; 0x53
 8018b36:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8018b38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018b3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018b40:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018b44:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018b48:	6892      	ldr	r2, [r2, #8]
 8018b4a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8018b4e:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8018b50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018b54:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018b58:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018b5c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018b60:	6892      	ldr	r2, [r2, #8]
 8018b62:	4611      	mov	r1, r2
 8018b64:	687a      	ldr	r2, [r7, #4]
 8018b66:	430a      	orrs	r2, r1
 8018b68:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8018b6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018b6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018b72:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018b76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018b78:	f107 070c 	add.w	r7, r7, #12
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bc80      	pop	{r7}
 8018b80:	4770      	bx	lr
 8018b82:	bf00      	nop

08018b84 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8018b84:	b480      	push	{r7}
 8018b86:	b087      	sub	sp, #28
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	60f8      	str	r0, [r7, #12]
 8018b8c:	60b9      	str	r1, [r7, #8]
 8018b8e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8018b90:	f04f 0300 	mov.w	r3, #0
 8018b94:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 8018b96:	f04f 0300 	mov.w	r3, #0
 8018b9a:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018b9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018ba0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018ba4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8018ba8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8018baa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018bae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018bb2:	f04f 0253 	mov.w	r2, #83	; 0x53
 8018bb6:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8018bb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018bbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018bc0:	68db      	ldr	r3, [r3, #12]
 8018bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d011      	beq.n	8018bee <RTC_SmoothCalibConfig+0x6a>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8018bca:	e003      	b.n	8018bd4 <RTC_SmoothCalibConfig+0x50>
    {
      recalpfcount++;
 8018bcc:	693b      	ldr	r3, [r7, #16]
 8018bce:	f103 0301 	add.w	r3, r3, #1
 8018bd2:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8018bd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018bd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018bdc:	68db      	ldr	r3, [r3, #12]
 8018bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d003      	beq.n	8018bee <RTC_SmoothCalibConfig+0x6a>
 8018be6:	693b      	ldr	r3, [r7, #16]
 8018be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018bec:	d1ee      	bne.n	8018bcc <RTC_SmoothCalibConfig+0x48>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8018bee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018bf2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018bf6:	68db      	ldr	r3, [r3, #12]
 8018bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d10d      	bne.n	8018c1c <RTC_SmoothCalibConfig+0x98>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8018c00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018c04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018c08:	68f9      	ldr	r1, [r7, #12]
 8018c0a:	68ba      	ldr	r2, [r7, #8]
 8018c0c:	4311      	orrs	r1, r2
 8018c0e:	687a      	ldr	r2, [r7, #4]
 8018c10:	430a      	orrs	r2, r1
 8018c12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 8018c14:	f04f 0301 	mov.w	r3, #1
 8018c18:	75fb      	strb	r3, [r7, #23]
 8018c1a:	e002      	b.n	8018c22 <RTC_SmoothCalibConfig+0x9e>
  }
  else
  {
    status = ERROR;
 8018c1c:	f04f 0300 	mov.w	r3, #0
 8018c20:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8018c22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018c26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018c2a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018c2e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 8018c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	f107 071c 	add.w	r7, r7, #28
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bc80      	pop	{r7}
 8018c3c:	4770      	bx	lr
 8018c3e:	bf00      	nop

08018c40 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 8018c40:	b480      	push	{r7}
 8018c42:	b085      	sub	sp, #20
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
 8018c48:	460b      	mov	r3, r1
 8018c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8018c4c:	f04f 0300 	mov.w	r3, #0
 8018c50:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8018c52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018c56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018c5a:	689b      	ldr	r3, [r3, #8]
 8018c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018c60:	f023 0308 	bic.w	r3, r3, #8
 8018c64:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 8018c66:	78fb      	ldrb	r3, [r7, #3]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d006      	beq.n	8018c7a <RTC_TimeStampCmd+0x3a>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 8018c6c:	687a      	ldr	r2, [r7, #4]
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	4313      	orrs	r3, r2
 8018c72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018c76:	60fb      	str	r3, [r7, #12]
 8018c78:	e003      	b.n	8018c82 <RTC_TimeStampCmd+0x42>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8018c7a:	68fa      	ldr	r2, [r7, #12]
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	4313      	orrs	r3, r2
 8018c80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8018c82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018c86:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018c8a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8018c8e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8018c90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018c94:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018c98:	f04f 0253 	mov.w	r2, #83	; 0x53
 8018c9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 8018c9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018ca2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018ca6:	68fa      	ldr	r2, [r7, #12]
 8018ca8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8018caa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018cae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018cb2:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8018cb6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018cb8:	f107 0714 	add.w	r7, r7, #20
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bc80      	pop	{r7}
 8018cc0:	4770      	bx	lr
 8018cc2:	bf00      	nop

08018cc4 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b086      	sub	sp, #24
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	60f8      	str	r0, [r7, #12]
 8018ccc:	60b9      	str	r1, [r7, #8]
 8018cce:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 8018cd0:	f04f 0300 	mov.w	r3, #0
 8018cd4:	617b      	str	r3, [r7, #20]
 8018cd6:	f04f 0300 	mov.w	r3, #0
 8018cda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8018cdc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018ce0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ce6:	461a      	mov	r2, r3
 8018ce8:	f647 737f 	movw	r3, #32639	; 0x7f7f
 8018cec:	f2c0 037f 	movt	r3, #127	; 0x7f
 8018cf0:	4013      	ands	r3, r2
 8018cf2:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8018cf4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018cf8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018cfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018d02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8018d06:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8018d08:	697b      	ldr	r3, [r7, #20]
 8018d0a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8018d0e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8018d12:	b2da      	uxtb	r2, r3
 8018d14:	68bb      	ldr	r3, [r7, #8]
 8018d16:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8018d1e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8018d22:	b2da      	uxtb	r2, r3
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	b2db      	uxtb	r3, r3
 8018d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018d30:	b2da      	uxtb	r2, r3
 8018d32:	68bb      	ldr	r3, [r7, #8]
 8018d34:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8018d36:	697b      	ldr	r3, [r7, #20]
 8018d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018d3c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8018d40:	b2da      	uxtb	r2, r3
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	f04f 0200 	mov.w	r2, #0
 8018d4c:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8018d4e:	693b      	ldr	r3, [r7, #16]
 8018d50:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8018d54:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8018d58:	b2da      	uxtb	r2, r3
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8018d5e:	693b      	ldr	r3, [r7, #16]
 8018d60:	b2db      	uxtb	r3, r3
 8018d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018d66:	b2da      	uxtb	r2, r3
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8018d6c:	693b      	ldr	r3, [r7, #16]
 8018d6e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8018d72:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8018d76:	b2da      	uxtb	r2, r3
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d135      	bne.n	8018dee <RTC_GetTimeStamp+0x12a>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8018d82:	68bb      	ldr	r3, [r7, #8]
 8018d84:	781b      	ldrb	r3, [r3, #0]
 8018d86:	4618      	mov	r0, r3
 8018d88:	f000 fb96 	bl	80194b8 <RTC_Bcd2ToByte>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	461a      	mov	r2, r3
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 8018d94:	68bb      	ldr	r3, [r7, #8]
 8018d96:	785b      	ldrb	r3, [r3, #1]
 8018d98:	4618      	mov	r0, r3
 8018d9a:	f000 fb8d 	bl	80194b8 <RTC_Bcd2ToByte>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	461a      	mov	r2, r3
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8018da6:	68bb      	ldr	r3, [r7, #8]
 8018da8:	789b      	ldrb	r3, [r3, #2]
 8018daa:	4618      	mov	r0, r3
 8018dac:	f000 fb84 	bl	80194b8 <RTC_Bcd2ToByte>
 8018db0:	4603      	mov	r3, r0
 8018db2:	461a      	mov	r2, r3
 8018db4:	68bb      	ldr	r3, [r7, #8]
 8018db6:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	785b      	ldrb	r3, [r3, #1]
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f000 fb7b 	bl	80194b8 <RTC_Bcd2ToByte>
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	461a      	mov	r2, r3
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	789b      	ldrb	r3, [r3, #2]
 8018dce:	4618      	mov	r0, r3
 8018dd0:	f000 fb72 	bl	80194b8 <RTC_Bcd2ToByte>
 8018dd4:	4603      	mov	r3, r0
 8018dd6:	461a      	mov	r2, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	781b      	ldrb	r3, [r3, #0]
 8018de0:	4618      	mov	r0, r3
 8018de2:	f000 fb69 	bl	80194b8 <RTC_Bcd2ToByte>
 8018de6:	4603      	mov	r3, r0
 8018de8:	461a      	mov	r2, r3
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	701a      	strb	r2, [r3, #0]
  }
}
 8018dee:	f107 0718 	add.w	r7, r7, #24
 8018df2:	46bd      	mov	sp, r7
 8018df4:	bd80      	pop	{r7, pc}
 8018df6:	bf00      	nop

08018df8 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Subseconds value.
  * @param  None
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 8018df8:	b480      	push	{r7}
 8018dfa:	af00      	add	r7, sp, #0
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 8018dfc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018e00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8018e06:	4618      	mov	r0, r3
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	bc80      	pop	{r7}
 8018e0c:	4770      	bx	lr
 8018e0e:	bf00      	nop

08018e10 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8018e10:	b480      	push	{r7}
 8018e12:	b083      	sub	sp, #12
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d111      	bne.n	8018e44 <RTC_TamperTriggerConfig+0x34>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8018e20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018e24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018e28:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018e2c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018e30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018e32:	4611      	mov	r1, r2
 8018e34:	687a      	ldr	r2, [r7, #4]
 8018e36:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018e3a:	ea6f 0202 	mvn.w	r2, r2
 8018e3e:	400a      	ands	r2, r1
 8018e40:	641a      	str	r2, [r3, #64]	; 0x40
 8018e42:	e00e      	b.n	8018e62 <RTC_TamperTriggerConfig+0x52>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8018e44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018e48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018e4c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018e50:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018e54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018e56:	4611      	mov	r1, r2
 8018e58:	687a      	ldr	r2, [r7, #4]
 8018e5a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018e5e:	430a      	orrs	r2, r1
 8018e60:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 8018e62:	f107 070c 	add.w	r7, r7, #12
 8018e66:	46bd      	mov	sp, r7
 8018e68:	bc80      	pop	{r7}
 8018e6a:	4770      	bx	lr

08018e6c <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 8018e6c:	b480      	push	{r7}
 8018e6e:	b083      	sub	sp, #12
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
 8018e74:	460b      	mov	r3, r1
 8018e76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8018e78:	78fb      	ldrb	r3, [r7, #3]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d00d      	beq.n	8018e9a <RTC_TamperCmd+0x2e>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8018e7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018e82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018e86:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018e8a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018e8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018e90:	4611      	mov	r1, r2
 8018e92:	687a      	ldr	r2, [r7, #4]
 8018e94:	430a      	orrs	r2, r1
 8018e96:	641a      	str	r2, [r3, #64]	; 0x40
 8018e98:	e00e      	b.n	8018eb8 <RTC_TamperCmd+0x4c>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 8018e9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018e9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018ea2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018ea6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018eaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018eac:	4611      	mov	r1, r2
 8018eae:	687a      	ldr	r2, [r7, #4]
 8018eb0:	ea6f 0202 	mvn.w	r2, r2
 8018eb4:	400a      	ands	r2, r1
 8018eb6:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 8018eb8:	f107 070c 	add.w	r7, r7, #12
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	bc80      	pop	{r7}
 8018ec0:	4770      	bx	lr
 8018ec2:	bf00      	nop

08018ec4 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 8018ec4:	b480      	push	{r7}
 8018ec6:	b083      	sub	sp, #12
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 8018ecc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018ed0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018ed4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018ed8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018edc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018ede:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8018ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 8018ee4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018ee8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018eec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018ef0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018ef4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018ef6:	4611      	mov	r1, r2
 8018ef8:	687a      	ldr	r2, [r7, #4]
 8018efa:	430a      	orrs	r2, r1
 8018efc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8018efe:	f107 070c 	add.w	r7, r7, #12
 8018f02:	46bd      	mov	sp, r7
 8018f04:	bc80      	pop	{r7}
 8018f06:	4770      	bx	lr

08018f08 <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 8018f08:	b480      	push	{r7}
 8018f0a:	b083      	sub	sp, #12
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 8018f10:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018f14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018f18:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018f1c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018f20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018f22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 8018f28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018f2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018f30:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018f34:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018f38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018f3a:	4611      	mov	r1, r2
 8018f3c:	687a      	ldr	r2, [r7, #4]
 8018f3e:	430a      	orrs	r2, r1
 8018f40:	641a      	str	r2, [r3, #64]	; 0x40
}
 8018f42:	f107 070c 	add.w	r7, r7, #12
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bc80      	pop	{r7}
 8018f4a:	4770      	bx	lr

08018f4c <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 8018f4c:	b480      	push	{r7}
 8018f4e:	b083      	sub	sp, #12
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8018f54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018f58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018f5c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018f60:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018f64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018f66:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8018f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8018f6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018f70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018f74:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018f78:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018f7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018f7e:	4611      	mov	r1, r2
 8018f80:	687a      	ldr	r2, [r7, #4]
 8018f82:	430a      	orrs	r2, r1
 8018f84:	641a      	str	r2, [r3, #64]	; 0x40
}
 8018f86:	f107 070c 	add.w	r7, r7, #12
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bc80      	pop	{r7}
 8018f8e:	4770      	bx	lr

08018f90 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 8018f90:	b480      	push	{r7}
 8018f92:	b083      	sub	sp, #12
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	4603      	mov	r3, r0
 8018f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 8018f9a:	79fb      	ldrb	r3, [r7, #7]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d00c      	beq.n	8018fba <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8018fa0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018fa4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018fa8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018fac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018fb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018fb6:	641a      	str	r2, [r3, #64]	; 0x40
 8018fb8:	e00b      	b.n	8018fd2 <RTC_TimeStampOnTamperDetectionCmd+0x42>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 8018fba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018fbe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018fc2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018fc6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018fca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018fd0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8018fd2:	f107 070c 	add.w	r7, r7, #12
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bc80      	pop	{r7}
 8018fda:	4770      	bx	lr

08018fdc <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 8018fdc:	b480      	push	{r7}
 8018fde:	b083      	sub	sp, #12
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 8018fe6:	79fb      	ldrb	r3, [r7, #7]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d00c      	beq.n	8019006 <RTC_TamperPullUpCmd+0x2a>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 8018fec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8018ff0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8018ff4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8018ff8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8018ffc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8018ffe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8019002:	641a      	str	r2, [r3, #64]	; 0x40
 8019004:	e00b      	b.n	801901e <RTC_TamperPullUpCmd+0x42>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 8019006:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801900a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801900e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8019012:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8019016:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8019018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801901c:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 801901e:	f107 070c 	add.w	r7, r7, #12
 8019022:	46bd      	mov	sp, r7
 8019024:	bc80      	pop	{r7}
 8019026:	4770      	bx	lr

08019028 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 8019028:	b480      	push	{r7}
 801902a:	b085      	sub	sp, #20
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
 8019030:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8019032:	f04f 0300 	mov.w	r3, #0
 8019036:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8019038:	f642 0350 	movw	r3, #10320	; 0x2850
 801903c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019040:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	18d3      	adds	r3, r2, r3
 801904c:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	683a      	ldr	r2, [r7, #0]
 8019052:	601a      	str	r2, [r3, #0]
}
 8019054:	f107 0714 	add.w	r7, r7, #20
 8019058:	46bd      	mov	sp, r7
 801905a:	bc80      	pop	{r7}
 801905c:	4770      	bx	lr
 801905e:	bf00      	nop

08019060 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 8019060:	b480      	push	{r7}
 8019062:	b085      	sub	sp, #20
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8019068:	f04f 0300 	mov.w	r3, #0
 801906c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 801906e:	f642 0350 	movw	r3, #10320	; 0x2850
 8019072:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019076:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	18d3      	adds	r3, r2, r3
 8019082:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	681b      	ldr	r3, [r3, #0]
}
 8019088:	4618      	mov	r0, r3
 801908a:	f107 0714 	add.w	r7, r7, #20
 801908e:	46bd      	mov	sp, r7
 8019090:	bc80      	pop	{r7}
 8019092:	4770      	bx	lr

08019094 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 8019094:	b480      	push	{r7}
 8019096:	b083      	sub	sp, #12
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 801909c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80190a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80190a4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80190a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80190ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80190ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80190b2:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 80190b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80190b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80190bc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80190c0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80190c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80190c6:	4611      	mov	r1, r2
 80190c8:	687a      	ldr	r2, [r7, #4]
 80190ca:	430a      	orrs	r2, r1
 80190cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80190ce:	f107 070c 	add.w	r7, r7, #12
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bc80      	pop	{r7}
 80190d6:	4770      	bx	lr

080190d8 <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 80190d8:	b480      	push	{r7}
 80190da:	b083      	sub	sp, #12
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 80190e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80190e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80190e8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80190ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80190f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80190f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80190f6:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 80190f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80190fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019100:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8019104:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8019108:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801910a:	4611      	mov	r1, r2
 801910c:	687a      	ldr	r2, [r7, #4]
 801910e:	430a      	orrs	r2, r1
 8019110:	641a      	str	r2, [r3, #64]	; 0x40
}
 8019112:	f107 070c 	add.w	r7, r7, #12
 8019116:	46bd      	mov	sp, r7
 8019118:	bc80      	pop	{r7}
 801911a:	4770      	bx	lr

0801911c <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 801911c:	b480      	push	{r7}
 801911e:	b083      	sub	sp, #12
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 8019124:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019128:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801912c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8019130:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8019134:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8019136:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801913a:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 801913c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019140:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019144:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8019148:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801914c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801914e:	4611      	mov	r1, r2
 8019150:	687a      	ldr	r2, [r7, #4]
 8019152:	430a      	orrs	r2, r1
 8019154:	641a      	str	r2, [r3, #64]	; 0x40
}
 8019156:	f107 070c 	add.w	r7, r7, #12
 801915a:	46bd      	mov	sp, r7
 801915c:	bc80      	pop	{r7}
 801915e:	4770      	bx	lr

08019160 <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b084      	sub	sp, #16
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
 8019168:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801916a:	f04f 0300 	mov.w	r3, #0
 801916e:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 8019170:	f04f 0300 	mov.w	r3, #0
 8019174:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8019176:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801917a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801917e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8019182:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8019184:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019188:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801918c:	f04f 0253 	mov.w	r2, #83	; 0x53
 8019190:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 8019192:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019196:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801919a:	68db      	ldr	r3, [r3, #12]
 801919c:	f003 0308 	and.w	r3, r3, #8
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d011      	beq.n	80191c8 <RTC_SynchroShiftConfig+0x68>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 80191a4:	e003      	b.n	80191ae <RTC_SynchroShiftConfig+0x4e>
    {
      shpfcount++;
 80191a6:	68bb      	ldr	r3, [r7, #8]
 80191a8:	f103 0301 	add.w	r3, r3, #1
 80191ac:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 80191ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80191b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80191b6:	68db      	ldr	r3, [r3, #12]
 80191b8:	f003 0308 	and.w	r3, r3, #8
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d003      	beq.n	80191c8 <RTC_SynchroShiftConfig+0x68>
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80191c6:	d1ee      	bne.n	80191a6 <RTC_SynchroShiftConfig+0x46>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 80191c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80191cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80191d0:	68db      	ldr	r3, [r3, #12]
 80191d2:	f003 0308 	and.w	r3, r3, #8
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d121      	bne.n	801921e <RTC_SynchroShiftConfig+0xbe>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 80191da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80191de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80191e2:	689b      	ldr	r3, [r3, #8]
 80191e4:	f003 0310 	and.w	r3, r3, #16
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d114      	bne.n	8019216 <RTC_SynchroShiftConfig+0xb6>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 80191ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80191f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80191f4:	6839      	ldr	r1, [r7, #0]
 80191f6:	687a      	ldr	r2, [r7, #4]
 80191f8:	430a      	orrs	r2, r1
 80191fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 80191fc:	f7fe fd1a 	bl	8017c34 <RTC_WaitForSynchro>
 8019200:	4603      	mov	r3, r0
 8019202:	2b00      	cmp	r3, #0
 8019204:	d103      	bne.n	801920e <RTC_SynchroShiftConfig+0xae>
      {
        status = ERROR;
 8019206:	f04f 0300 	mov.w	r3, #0
 801920a:	73fb      	strb	r3, [r7, #15]
 801920c:	e00a      	b.n	8019224 <RTC_SynchroShiftConfig+0xc4>
      }
      else
      {
        status = SUCCESS;
 801920e:	f04f 0301 	mov.w	r3, #1
 8019212:	73fb      	strb	r3, [r7, #15]
 8019214:	e006      	b.n	8019224 <RTC_SynchroShiftConfig+0xc4>
      }
    }
    else
    {
      status = ERROR;
 8019216:	f04f 0300 	mov.w	r3, #0
 801921a:	73fb      	strb	r3, [r7, #15]
 801921c:	e002      	b.n	8019224 <RTC_SynchroShiftConfig+0xc4>
    }
  }
  else
  {
    status = ERROR;
 801921e:	f04f 0300 	mov.w	r3, #0
 8019222:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8019224:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019228:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801922c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8019230:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 8019232:	7bfb      	ldrb	r3, [r7, #15]
}
 8019234:	4618      	mov	r0, r3
 8019236:	f107 0710 	add.w	r7, r7, #16
 801923a:	46bd      	mov	sp, r7
 801923c:	bd80      	pop	{r7, pc}
 801923e:	bf00      	nop

08019240 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 8019240:	b480      	push	{r7}
 8019242:	b083      	sub	sp, #12
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
 8019248:	460b      	mov	r3, r1
 801924a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801924c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019250:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019254:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8019258:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801925a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801925e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019262:	f04f 0253 	mov.w	r2, #83	; 0x53
 8019266:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8019268:	78fb      	ldrb	r3, [r7, #3]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d01e      	beq.n	80192ac <RTC_ITConfig+0x6c>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 801926e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019272:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019276:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801927a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801927e:	6892      	ldr	r2, [r2, #8]
 8019280:	4611      	mov	r1, r2
 8019282:	687a      	ldr	r2, [r7, #4]
 8019284:	f022 0204 	bic.w	r2, r2, #4
 8019288:	430a      	orrs	r2, r1
 801928a:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 801928c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019290:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019294:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8019298:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801929c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801929e:	4611      	mov	r1, r2
 80192a0:	687a      	ldr	r2, [r7, #4]
 80192a2:	f002 0204 	and.w	r2, r2, #4
 80192a6:	430a      	orrs	r2, r1
 80192a8:	641a      	str	r2, [r3, #64]	; 0x40
 80192aa:	e021      	b.n	80192f0 <RTC_ITConfig+0xb0>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 80192ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80192b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80192b4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80192b8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80192bc:	6892      	ldr	r2, [r2, #8]
 80192be:	4611      	mov	r1, r2
 80192c0:	687a      	ldr	r2, [r7, #4]
 80192c2:	f022 0204 	bic.w	r2, r2, #4
 80192c6:	ea6f 0202 	mvn.w	r2, r2
 80192ca:	400a      	ands	r2, r1
 80192cc:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 80192ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80192d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80192d6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80192da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80192de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80192e0:	4611      	mov	r1, r2
 80192e2:	687a      	ldr	r2, [r7, #4]
 80192e4:	f002 0204 	and.w	r2, r2, #4
 80192e8:	ea6f 0202 	mvn.w	r2, r2
 80192ec:	400a      	ands	r2, r1
 80192ee:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80192f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80192f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80192f8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80192fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80192fe:	f107 070c 	add.w	r7, r7, #12
 8019302:	46bd      	mov	sp, r7
 8019304:	bc80      	pop	{r7}
 8019306:	4770      	bx	lr

08019308 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 8019308:	b480      	push	{r7}
 801930a:	b085      	sub	sp, #20
 801930c:	af00      	add	r7, sp, #0
 801930e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8019310:	f04f 0300 	mov.w	r3, #0
 8019314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8019316:	f04f 0300 	mov.w	r3, #0
 801931a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 801931c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019320:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019324:	68db      	ldr	r3, [r3, #12]
 8019326:	461a      	mov	r2, r3
 8019328:	f643 7377 	movw	r3, #16247	; 0x3f77
 801932c:	4013      	ands	r3, r2
 801932e:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 8019330:	68ba      	ldr	r2, [r7, #8]
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	4013      	ands	r3, r2
 8019336:	2b00      	cmp	r3, #0
 8019338:	d003      	beq.n	8019342 <RTC_GetFlagStatus+0x3a>
  {
    bitstatus = SET;
 801933a:	f04f 0301 	mov.w	r3, #1
 801933e:	73fb      	strb	r3, [r7, #15]
 8019340:	e002      	b.n	8019348 <RTC_GetFlagStatus+0x40>
  }
  else
  {
    bitstatus = RESET;
 8019342:	f04f 0300 	mov.w	r3, #0
 8019346:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019348:	7bfb      	ldrb	r3, [r7, #15]
}
 801934a:	4618      	mov	r0, r3
 801934c:	f107 0714 	add.w	r7, r7, #20
 8019350:	46bd      	mov	sp, r7
 8019352:	bc80      	pop	{r7}
 8019354:	4770      	bx	lr
 8019356:	bf00      	nop

08019358 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 8019358:	b480      	push	{r7}
 801935a:	b083      	sub	sp, #12
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 8019360:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019364:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019368:	687a      	ldr	r2, [r7, #4]
 801936a:	ea4f 4202 	mov.w	r2, r2, lsl #16
 801936e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8019372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019376:	ea6f 0102 	mvn.w	r1, r2
 801937a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801937e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8019382:	68d2      	ldr	r2, [r2, #12]
 8019384:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8019388:	430a      	orrs	r2, r1
 801938a:	60da      	str	r2, [r3, #12]
}
 801938c:	f107 070c 	add.w	r7, r7, #12
 8019390:	46bd      	mov	sp, r7
 8019392:	bc80      	pop	{r7}
 8019394:	4770      	bx	lr
 8019396:	bf00      	nop

08019398 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8019398:	b480      	push	{r7}
 801939a:	b087      	sub	sp, #28
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80193a0:	f04f 0300 	mov.w	r3, #0
 80193a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 80193a6:	f04f 0300 	mov.w	r3, #0
 80193aa:	613b      	str	r3, [r7, #16]
 80193ac:	f04f 0300 	mov.w	r3, #0
 80193b0:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 80193b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80193b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80193ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193bc:	f003 0304 	and.w	r3, r3, #4
 80193c0:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 80193c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80193c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80193ca:	689b      	ldr	r3, [r3, #8]
 80193cc:	461a      	mov	r2, r3
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	401a      	ands	r2, r3
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	ea4f 31d3 	mov.w	r1, r3, lsr #15
 80193d8:	693b      	ldr	r3, [r7, #16]
 80193da:	400b      	ands	r3, r1
 80193dc:	4313      	orrs	r3, r2
 80193de:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 80193e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80193e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80193e8:	68db      	ldr	r3, [r3, #12]
 80193ea:	461a      	mov	r2, r3
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80193f2:	4013      	ands	r3, r2
 80193f4:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d00a      	beq.n	8019412 <RTC_GetITStatus+0x7a>
 80193fc:	693b      	ldr	r3, [r7, #16]
 80193fe:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8019402:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8019406:	2b00      	cmp	r3, #0
 8019408:	d003      	beq.n	8019412 <RTC_GetITStatus+0x7a>
  {
    bitstatus = SET;
 801940a:	f04f 0301 	mov.w	r3, #1
 801940e:	75fb      	strb	r3, [r7, #23]
 8019410:	e002      	b.n	8019418 <RTC_GetITStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 8019412:	f04f 0300 	mov.w	r3, #0
 8019416:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 8019418:	7dfb      	ldrb	r3, [r7, #23]
}
 801941a:	4618      	mov	r0, r3
 801941c:	f107 071c 	add.w	r7, r7, #28
 8019420:	46bd      	mov	sp, r7
 8019422:	bc80      	pop	{r7}
 8019424:	4770      	bx	lr
 8019426:	bf00      	nop

08019428 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 8019428:	b480      	push	{r7}
 801942a:	b085      	sub	sp, #20
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8019430:	f04f 0300 	mov.w	r3, #0
 8019434:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801943c:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 801943e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019442:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019446:	68fa      	ldr	r2, [r7, #12]
 8019448:	ea4f 4202 	mov.w	r2, r2, lsl #16
 801944c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8019450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019454:	ea6f 0102 	mvn.w	r1, r2
 8019458:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801945c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8019460:	68d2      	ldr	r2, [r2, #12]
 8019462:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8019466:	430a      	orrs	r2, r1
 8019468:	60da      	str	r2, [r3, #12]
}
 801946a:	f107 0714 	add.w	r7, r7, #20
 801946e:	46bd      	mov	sp, r7
 8019470:	bc80      	pop	{r7}
 8019472:	4770      	bx	lr

08019474 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8019474:	b480      	push	{r7}
 8019476:	b085      	sub	sp, #20
 8019478:	af00      	add	r7, sp, #0
 801947a:	4603      	mov	r3, r0
 801947c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 801947e:	f04f 0300 	mov.w	r3, #0
 8019482:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 8019484:	e007      	b.n	8019496 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8019486:	7bfb      	ldrb	r3, [r7, #15]
 8019488:	f103 0301 	add.w	r3, r3, #1
 801948c:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 801948e:	79fb      	ldrb	r3, [r7, #7]
 8019490:	f1a3 030a 	sub.w	r3, r3, #10
 8019494:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8019496:	79fb      	ldrb	r3, [r7, #7]
 8019498:	2b09      	cmp	r3, #9
 801949a:	d8f4      	bhi.n	8019486 <RTC_ByteToBcd2+0x12>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 801949c:	7bfb      	ldrb	r3, [r7, #15]
 801949e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80194a2:	b2da      	uxtb	r2, r3
 80194a4:	79fb      	ldrb	r3, [r7, #7]
 80194a6:	4313      	orrs	r3, r2
 80194a8:	b2db      	uxtb	r3, r3
}
 80194aa:	4618      	mov	r0, r3
 80194ac:	f107 0714 	add.w	r7, r7, #20
 80194b0:	46bd      	mov	sp, r7
 80194b2:	bc80      	pop	{r7}
 80194b4:	4770      	bx	lr
 80194b6:	bf00      	nop

080194b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80194b8:	b480      	push	{r7}
 80194ba:	b085      	sub	sp, #20
 80194bc:	af00      	add	r7, sp, #0
 80194be:	4603      	mov	r3, r0
 80194c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 80194c2:	f04f 0300 	mov.w	r3, #0
 80194c6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80194c8:	79fb      	ldrb	r3, [r7, #7]
 80194ca:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80194ce:	b2db      	uxtb	r3, r3
 80194d0:	461a      	mov	r2, r3
 80194d2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80194d6:	18d3      	adds	r3, r2, r3
 80194d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80194dc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 80194de:	79fb      	ldrb	r3, [r7, #7]
 80194e0:	f003 030f 	and.w	r3, r3, #15
 80194e4:	b2da      	uxtb	r2, r3
 80194e6:	7bfb      	ldrb	r3, [r7, #15]
 80194e8:	18d3      	adds	r3, r2, r3
 80194ea:	b2db      	uxtb	r3, r3
}
 80194ec:	4618      	mov	r0, r3
 80194ee:	f107 0714 	add.w	r7, r7, #20
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bc80      	pop	{r7}
 80194f6:	4770      	bx	lr

080194f8 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 80194fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019500:	f04f 0101 	mov.w	r1, #1
 8019504:	f7fd ff56 	bl	80173b4 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8019508:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801950c:	f04f 0100 	mov.w	r1, #0
 8019510:	f7fd ff50 	bl	80173b4 <RCC_APB2PeriphResetCmd>
}
 8019514:	bd80      	pop	{r7, pc}
 8019516:	bf00      	nop

08019518 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8019518:	b480      	push	{r7}
 801951a:	b085      	sub	sp, #20
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8019520:	f04f 0300 	mov.w	r3, #0
 8019524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8019526:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801952a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801952e:	685b      	ldr	r3, [r3, #4]
 8019530:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
 8019538:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801953c:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	7d1b      	ldrb	r3, [r3, #20]
 8019542:	461a      	mov	r2, r3
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	689b      	ldr	r3, [r3, #8]
 8019548:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 801954e:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	68db      	ldr	r3, [r3, #12]
 8019554:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 801955a:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	691b      	ldr	r3, [r3, #16]
 8019560:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8019562:	68fa      	ldr	r2, [r7, #12]
 8019564:	4313      	orrs	r3, r2
 8019566:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8019568:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801956c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019570:	68fa      	ldr	r2, [r7, #12]
 8019572:	605a      	str	r2, [r3, #4]
}
 8019574:	f107 0714 	add.w	r7, r7, #20
 8019578:	46bd      	mov	sp, r7
 801957a:	bc80      	pop	{r7}
 801957c:	4770      	bx	lr
 801957e:	bf00      	nop

08019580 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8019580:	b480      	push	{r7}
 8019582:	b083      	sub	sp, #12
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	f04f 0200 	mov.w	r2, #0
 801958e:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	f04f 0200 	mov.w	r2, #0
 8019596:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	f04f 0200 	mov.w	r2, #0
 801959e:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	f04f 0200 	mov.w	r2, #0
 80195a6:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	f04f 0200 	mov.w	r2, #0
 80195ae:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	f04f 0200 	mov.w	r2, #0
 80195b6:	611a      	str	r2, [r3, #16]
}
 80195b8:	f107 070c 	add.w	r7, r7, #12
 80195bc:	46bd      	mov	sp, r7
 80195be:	bc80      	pop	{r7}
 80195c0:	4770      	bx	lr
 80195c2:	bf00      	nop

080195c4 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 80195c4:	b480      	push	{r7}
 80195c6:	b083      	sub	sp, #12
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	4603      	mov	r3, r0
 80195cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 80195ce:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80195d2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 80195d6:	79fa      	ldrb	r2, [r7, #7]
 80195d8:	601a      	str	r2, [r3, #0]
}
 80195da:	f107 070c 	add.w	r7, r7, #12
 80195de:	46bd      	mov	sp, r7
 80195e0:	bc80      	pop	{r7}
 80195e2:	4770      	bx	lr

080195e4 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 80195e4:	b480      	push	{r7}
 80195e6:	b083      	sub	sp, #12
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 80195ec:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80195f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80195f4:	687a      	ldr	r2, [r7, #4]
 80195f6:	601a      	str	r2, [r3, #0]
}
 80195f8:	f107 070c 	add.w	r7, r7, #12
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bc80      	pop	{r7}
 8019600:	4770      	bx	lr
 8019602:	bf00      	nop

08019604 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 8019604:	b480      	push	{r7}
 8019606:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8019608:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801960c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	f003 0303 	and.w	r3, r3, #3
}
 8019616:	4618      	mov	r0, r3
 8019618:	46bd      	mov	sp, r7
 801961a:	bc80      	pop	{r7}
 801961c:	4770      	bx	lr
 801961e:	bf00      	nop

08019620 <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8019620:	b480      	push	{r7}
 8019622:	b085      	sub	sp, #20
 8019624:	af00      	add	r7, sp, #0
 8019626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8019628:	f04f 0300 	mov.w	r3, #0
 801962c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 801962e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019632:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019636:	687a      	ldr	r2, [r7, #4]
 8019638:	6812      	ldr	r2, [r2, #0]
 801963a:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 801963c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019640:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019644:	68db      	ldr	r3, [r3, #12]
 8019646:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801964e:	f023 030f 	bic.w	r3, r3, #15
 8019652:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	685a      	ldr	r2, [r3, #4]
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	689b      	ldr	r3, [r3, #8]
 801965c:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	68db      	ldr	r3, [r3, #12]
 8019662:	431a      	orrs	r2, r3
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	691b      	ldr	r3, [r3, #16]
 8019668:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 801966a:	68fa      	ldr	r2, [r7, #12]
 801966c:	4313      	orrs	r3, r2
 801966e:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8019670:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019674:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019678:	68fa      	ldr	r2, [r7, #12]
 801967a:	60da      	str	r2, [r3, #12]
}
 801967c:	f107 0714 	add.w	r7, r7, #20
 8019680:	46bd      	mov	sp, r7
 8019682:	bc80      	pop	{r7}
 8019684:	4770      	bx	lr
 8019686:	bf00      	nop

08019688 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 8019688:	b480      	push	{r7}
 801968a:	b083      	sub	sp, #12
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	f04f 0200 	mov.w	r2, #0
 8019696:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	f04f 0200 	mov.w	r2, #0
 801969e:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	f04f 0200 	mov.w	r2, #0
 80196a6:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	f04f 0200 	mov.w	r2, #0
 80196ae:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f04f 0200 	mov.w	r2, #0
 80196b6:	611a      	str	r2, [r3, #16]
}
 80196b8:	f107 070c 	add.w	r7, r7, #12
 80196bc:	46bd      	mov	sp, r7
 80196be:	bc80      	pop	{r7}
 80196c0:	4770      	bx	lr
 80196c2:	bf00      	nop

080196c4 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 80196c4:	b480      	push	{r7}
 80196c6:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 80196c8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80196cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80196d0:	691b      	ldr	r3, [r3, #16]
 80196d2:	b2db      	uxtb	r3, r3
}
 80196d4:	4618      	mov	r0, r3
 80196d6:	46bd      	mov	sp, r7
 80196d8:	bc80      	pop	{r7}
 80196da:	4770      	bx	lr

080196dc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 80196dc:	b480      	push	{r7}
 80196de:	b085      	sub	sp, #20
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 80196e4:	f04f 0300 	mov.w	r3, #0
 80196e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 80196ea:	687a      	ldr	r2, [r7, #4]
 80196ec:	f642 4314 	movw	r3, #11284	; 0x2c14
 80196f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80196f4:	18d3      	adds	r3, r2, r3
 80196f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	681b      	ldr	r3, [r3, #0]
}
 80196fc:	4618      	mov	r0, r3
 80196fe:	f107 0714 	add.w	r7, r7, #20
 8019702:	46bd      	mov	sp, r7
 8019704:	bc80      	pop	{r7}
 8019706:	4770      	bx	lr

08019708 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8019708:	b480      	push	{r7}
 801970a:	b085      	sub	sp, #20
 801970c:	af00      	add	r7, sp, #0
 801970e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8019710:	f04f 0300 	mov.w	r3, #0
 8019714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8019716:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801971a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801971e:	687a      	ldr	r2, [r7, #4]
 8019720:	6812      	ldr	r2, [r2, #0]
 8019722:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8019724:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019728:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801972c:	687a      	ldr	r2, [r7, #4]
 801972e:	6852      	ldr	r2, [r2, #4]
 8019730:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8019732:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019736:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801973c:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8019744:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	689a      	ldr	r2, [r3, #8]
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	68db      	ldr	r3, [r3, #12]
 801974e:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	691b      	ldr	r3, [r3, #16]
 8019754:	431a      	orrs	r2, r3
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	695b      	ldr	r3, [r3, #20]
 801975a:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 801975c:	68fa      	ldr	r2, [r7, #12]
 801975e:	4313      	orrs	r3, r2
 8019760:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8019762:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019766:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801976a:	68fa      	ldr	r2, [r7, #12]
 801976c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801976e:	f107 0714 	add.w	r7, r7, #20
 8019772:	46bd      	mov	sp, r7
 8019774:	bc80      	pop	{r7}
 8019776:	4770      	bx	lr

08019778 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8019778:	b480      	push	{r7}
 801977a:	b083      	sub	sp, #12
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	f04f 32ff 	mov.w	r2, #4294967295
 8019786:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	f04f 0200 	mov.w	r2, #0
 801978e:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	f04f 0200 	mov.w	r2, #0
 8019796:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	f04f 0200 	mov.w	r2, #0
 801979e:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	f04f 0200 	mov.w	r2, #0
 80197a6:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	f04f 0200 	mov.w	r2, #0
 80197ae:	615a      	str	r2, [r3, #20]
}
 80197b0:	f107 070c 	add.w	r7, r7, #12
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bc80      	pop	{r7}
 80197b8:	4770      	bx	lr
 80197ba:	bf00      	nop

080197bc <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 80197bc:	b480      	push	{r7}
 80197be:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 80197c0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80197c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80197c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80197ca:	4618      	mov	r0, r3
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bc80      	pop	{r7}
 80197d0:	4770      	bx	lr
 80197d2:	bf00      	nop

080197d4 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 80197d4:	b480      	push	{r7}
 80197d6:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 80197d8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80197dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80197e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bc80      	pop	{r7}
 80197ea:	4770      	bx	lr

080197ec <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 80197ec:	b480      	push	{r7}
 80197ee:	b083      	sub	sp, #12
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 80197f4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80197f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80197fc:	687a      	ldr	r2, [r7, #4]
 80197fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8019802:	f107 070c 	add.w	r7, r7, #12
 8019806:	46bd      	mov	sp, r7
 8019808:	bc80      	pop	{r7}
 801980a:	4770      	bx	lr

0801980c <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 801980c:	b480      	push	{r7}
 801980e:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 8019810:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019814:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 801981a:	4618      	mov	r0, r3
 801981c:	46bd      	mov	sp, r7
 801981e:	bc80      	pop	{r7}
 8019820:	4770      	bx	lr
 8019822:	bf00      	nop

08019824 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 8019824:	b480      	push	{r7}
 8019826:	b083      	sub	sp, #12
 8019828:	af00      	add	r7, sp, #0
 801982a:	4603      	mov	r3, r0
 801982c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 801982e:	f248 53a0 	movw	r3, #34208	; 0x85a0
 8019832:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8019836:	79fa      	ldrb	r2, [r7, #7]
 8019838:	601a      	str	r2, [r3, #0]
}
 801983a:	f107 070c 	add.w	r7, r7, #12
 801983e:	46bd      	mov	sp, r7
 8019840:	bc80      	pop	{r7}
 8019842:	4770      	bx	lr

08019844 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 8019844:	b480      	push	{r7}
 8019846:	b083      	sub	sp, #12
 8019848:	af00      	add	r7, sp, #0
 801984a:	4603      	mov	r3, r0
 801984c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 801984e:	f248 53a4 	movw	r3, #34212	; 0x85a4
 8019852:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8019856:	79fa      	ldrb	r2, [r7, #7]
 8019858:	601a      	str	r2, [r3, #0]
}
 801985a:	f107 070c 	add.w	r7, r7, #12
 801985e:	46bd      	mov	sp, r7
 8019860:	bc80      	pop	{r7}
 8019862:	4770      	bx	lr

08019864 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 8019864:	b480      	push	{r7}
 8019866:	b083      	sub	sp, #12
 8019868:	af00      	add	r7, sp, #0
 801986a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 801986c:	f248 53a8 	movw	r3, #34216	; 0x85a8
 8019870:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8019874:	687a      	ldr	r2, [r7, #4]
 8019876:	601a      	str	r2, [r3, #0]
}
 8019878:	f107 070c 	add.w	r7, r7, #12
 801987c:	46bd      	mov	sp, r7
 801987e:	bc80      	pop	{r7}
 8019880:	4770      	bx	lr
 8019882:	bf00      	nop

08019884 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 8019884:	b480      	push	{r7}
 8019886:	b083      	sub	sp, #12
 8019888:	af00      	add	r7, sp, #0
 801988a:	4603      	mov	r3, r0
 801988c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 801988e:	f248 53ac 	movw	r3, #34220	; 0x85ac
 8019892:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8019896:	79fa      	ldrb	r2, [r7, #7]
 8019898:	601a      	str	r2, [r3, #0]
}
 801989a:	f107 070c 	add.w	r7, r7, #12
 801989e:	46bd      	mov	sp, r7
 80198a0:	bc80      	pop	{r7}
 80198a2:	4770      	bx	lr

080198a4 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 80198a4:	b480      	push	{r7}
 80198a6:	b083      	sub	sp, #12
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	4603      	mov	r3, r0
 80198ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 80198ae:	f248 13ac 	movw	r3, #33196	; 0x81ac
 80198b2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 80198b6:	79fa      	ldrb	r2, [r7, #7]
 80198b8:	601a      	str	r2, [r3, #0]
}
 80198ba:	f107 070c 	add.w	r7, r7, #12
 80198be:	46bd      	mov	sp, r7
 80198c0:	bc80      	pop	{r7}
 80198c2:	4770      	bx	lr

080198c4 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 80198c4:	b480      	push	{r7}
 80198c6:	b083      	sub	sp, #12
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	4603      	mov	r3, r0
 80198cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 80198ce:	f248 13b0 	movw	r3, #33200	; 0x81b0
 80198d2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 80198d6:	79fa      	ldrb	r2, [r7, #7]
 80198d8:	601a      	str	r2, [r3, #0]
}
 80198da:	f107 070c 	add.w	r7, r7, #12
 80198de:	46bd      	mov	sp, r7
 80198e0:	bc80      	pop	{r7}
 80198e2:	4770      	bx	lr

080198e4 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 80198e4:	b480      	push	{r7}
 80198e6:	b083      	sub	sp, #12
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	4603      	mov	r3, r0
 80198ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 80198ee:	f248 13b4 	movw	r3, #33204	; 0x81b4
 80198f2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 80198f6:	79fa      	ldrb	r2, [r7, #7]
 80198f8:	f002 0201 	and.w	r2, r2, #1
 80198fc:	2a00      	cmp	r2, #0
 80198fe:	bf14      	ite	ne
 8019900:	2200      	movne	r2, #0
 8019902:	2201      	moveq	r2, #1
 8019904:	601a      	str	r2, [r3, #0]
}
 8019906:	f107 070c 	add.w	r7, r7, #12
 801990a:	46bd      	mov	sp, r7
 801990c:	bc80      	pop	{r7}
 801990e:	4770      	bx	lr

08019910 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 8019910:	b480      	push	{r7}
 8019912:	b083      	sub	sp, #12
 8019914:	af00      	add	r7, sp, #0
 8019916:	4603      	mov	r3, r0
 8019918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 801991a:	f248 13b8 	movw	r3, #33208	; 0x81b8
 801991e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8019922:	79fa      	ldrb	r2, [r7, #7]
 8019924:	601a      	str	r2, [r3, #0]
}
 8019926:	f107 070c 	add.w	r7, r7, #12
 801992a:	46bd      	mov	sp, r7
 801992c:	bc80      	pop	{r7}
 801992e:	4770      	bx	lr

08019930 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 8019930:	b480      	push	{r7}
 8019932:	b083      	sub	sp, #12
 8019934:	af00      	add	r7, sp, #0
 8019936:	4603      	mov	r3, r0
 8019938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 801993a:	f248 538c 	movw	r3, #34188	; 0x858c
 801993e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8019942:	79fa      	ldrb	r2, [r7, #7]
 8019944:	601a      	str	r2, [r3, #0]
}
 8019946:	f107 070c 	add.w	r7, r7, #12
 801994a:	46bd      	mov	sp, r7
 801994c:	bc80      	pop	{r7}
 801994e:	4770      	bx	lr

08019950 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8019950:	b480      	push	{r7}
 8019952:	b083      	sub	sp, #12
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
 8019958:	460b      	mov	r3, r1
 801995a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801995c:	78fb      	ldrb	r3, [r7, #3]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d00d      	beq.n	801997e <SDIO_ITConfig+0x2e>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8019962:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019966:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801996a:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 801996e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8019972:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8019974:	4611      	mov	r1, r2
 8019976:	687a      	ldr	r2, [r7, #4]
 8019978:	430a      	orrs	r2, r1
 801997a:	63da      	str	r2, [r3, #60]	; 0x3c
 801997c:	e00e      	b.n	801999c <SDIO_ITConfig+0x4c>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 801997e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019982:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019986:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 801998a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 801998e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8019990:	4611      	mov	r1, r2
 8019992:	687a      	ldr	r2, [r7, #4]
 8019994:	ea6f 0202 	mvn.w	r2, r2
 8019998:	400a      	ands	r2, r1
 801999a:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 801999c:	f107 070c 	add.w	r7, r7, #12
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bc80      	pop	{r7}
 80199a4:	4770      	bx	lr
 80199a6:	bf00      	nop

080199a8 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 80199a8:	b480      	push	{r7}
 80199aa:	b085      	sub	sp, #20
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80199b0:	f04f 0300 	mov.w	r3, #0
 80199b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 80199b6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80199ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80199be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199c0:	461a      	mov	r2, r3
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	4013      	ands	r3, r2
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d003      	beq.n	80199d2 <SDIO_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80199ca:	f04f 0301 	mov.w	r3, #1
 80199ce:	73fb      	strb	r3, [r7, #15]
 80199d0:	e002      	b.n	80199d8 <SDIO_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 80199d2:	f04f 0300 	mov.w	r3, #0
 80199d6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80199d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80199da:	4618      	mov	r0, r3
 80199dc:	f107 0714 	add.w	r7, r7, #20
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bc80      	pop	{r7}
 80199e4:	4770      	bx	lr
 80199e6:	bf00      	nop

080199e8 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 80199e8:	b480      	push	{r7}
 80199ea:	b083      	sub	sp, #12
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 80199f0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80199f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80199f8:	687a      	ldr	r2, [r7, #4]
 80199fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80199fc:	f107 070c 	add.w	r7, r7, #12
 8019a00:	46bd      	mov	sp, r7
 8019a02:	bc80      	pop	{r7}
 8019a04:	4770      	bx	lr
 8019a06:	bf00      	nop

08019a08 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 8019a08:	b480      	push	{r7}
 8019a0a:	b085      	sub	sp, #20
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8019a10:	f04f 0300 	mov.w	r3, #0
 8019a14:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8019a16:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019a1a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a20:	461a      	mov	r2, r3
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	4013      	ands	r3, r2
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d003      	beq.n	8019a32 <SDIO_GetITStatus+0x2a>
  {
    bitstatus = SET;
 8019a2a:	f04f 0301 	mov.w	r3, #1
 8019a2e:	73fb      	strb	r3, [r7, #15]
 8019a30:	e002      	b.n	8019a38 <SDIO_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8019a32:	f04f 0300 	mov.w	r3, #0
 8019a36:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f107 0714 	add.w	r7, r7, #20
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bc80      	pop	{r7}
 8019a44:	4770      	bx	lr
 8019a46:	bf00      	nop

08019a48 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 8019a48:	b480      	push	{r7}
 8019a4a:	b083      	sub	sp, #12
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8019a50:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8019a54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019a58:	687a      	ldr	r2, [r7, #4]
 8019a5a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8019a5c:	f107 070c 	add.w	r7, r7, #12
 8019a60:	46bd      	mov	sp, r7
 8019a62:	bc80      	pop	{r7}
 8019a64:	4770      	bx	lr
 8019a66:	bf00      	nop

08019a68 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b082      	sub	sp, #8
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8019a70:	687a      	ldr	r2, [r7, #4]
 8019a72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8019a76:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8019a7a:	429a      	cmp	r2, r3
 8019a7c:	d10c      	bne.n	8019a98 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8019a7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8019a82:	f04f 0101 	mov.w	r1, #1
 8019a86:	f7fd fc95 	bl	80173b4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8019a8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8019a8e:	f04f 0100 	mov.w	r1, #0
 8019a92:	f7fd fc8f 	bl	80173b4 <RCC_APB2PeriphResetCmd>
 8019a96:	e026      	b.n	8019ae6 <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 8019a98:	687a      	ldr	r2, [r7, #4]
 8019a9a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8019a9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019aa2:	429a      	cmp	r2, r3
 8019aa4:	d10c      	bne.n	8019ac0 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8019aa6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8019aaa:	f04f 0101 	mov.w	r1, #1
 8019aae:	f7fd fc55 	bl	801735c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8019ab2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8019ab6:	f04f 0100 	mov.w	r1, #0
 8019aba:	f7fd fc4f 	bl	801735c <RCC_APB1PeriphResetCmd>
 8019abe:	e012      	b.n	8019ae6 <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 8019ac0:	687a      	ldr	r2, [r7, #4]
 8019ac2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019ac6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d10b      	bne.n	8019ae6 <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8019ace:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8019ad2:	f04f 0101 	mov.w	r1, #1
 8019ad6:	f7fd fc41 	bl	801735c <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8019ada:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8019ade:	f04f 0100 	mov.w	r1, #0
 8019ae2:	f7fd fc3b 	bl	801735c <RCC_APB1PeriphResetCmd>
    }
  }
}
 8019ae6:	f107 0708 	add.w	r7, r7, #8
 8019aea:	46bd      	mov	sp, r7
 8019aec:	bd80      	pop	{r7, pc}
 8019aee:	bf00      	nop

08019af0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8019af0:	b480      	push	{r7}
 8019af2:	b085      	sub	sp, #20
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
 8019af8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8019afa:	f04f 0300 	mov.w	r3, #0
 8019afe:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	881b      	ldrh	r3, [r3, #0]
 8019b04:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8019b06:	89fb      	ldrh	r3, [r7, #14]
 8019b08:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8019b0c:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8019b0e:	683b      	ldr	r3, [r7, #0]
 8019b10:	881a      	ldrh	r2, [r3, #0]
 8019b12:	683b      	ldr	r3, [r7, #0]
 8019b14:	885b      	ldrh	r3, [r3, #2]
 8019b16:	4313      	orrs	r3, r2
 8019b18:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8019b1e:	4313      	orrs	r3, r2
 8019b20:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8019b22:	683b      	ldr	r3, [r7, #0]
 8019b24:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8019b26:	4313      	orrs	r3, r2
 8019b28:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8019b2e:	4313      	orrs	r3, r2
 8019b30:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8019b32:	683b      	ldr	r3, [r7, #0]
 8019b34:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8019b36:	4313      	orrs	r3, r2
 8019b38:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8019b3e:	4313      	orrs	r3, r2
 8019b40:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8019b42:	683b      	ldr	r3, [r7, #0]
 8019b44:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8019b46:	4313      	orrs	r3, r2
 8019b48:	b29a      	uxth	r2, r3
 8019b4a:	89fb      	ldrh	r3, [r7, #14]
 8019b4c:	4313      	orrs	r3, r2
 8019b4e:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	89fa      	ldrh	r2, [r7, #14]
 8019b54:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	8b9b      	ldrh	r3, [r3, #28]
 8019b5a:	b29b      	uxth	r3, r3
 8019b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019b60:	b29a      	uxth	r2, r3
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8019b66:	683b      	ldr	r3, [r7, #0]
 8019b68:	8a1a      	ldrh	r2, [r3, #16]
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	821a      	strh	r2, [r3, #16]
}
 8019b6e:	f107 0714 	add.w	r7, r7, #20
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bc80      	pop	{r7}
 8019b76:	4770      	bx	lr

08019b78 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8019b78:	b480      	push	{r7}
 8019b7a:	b08b      	sub	sp, #44	; 0x2c
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	6078      	str	r0, [r7, #4]
 8019b80:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8019b82:	f04f 0300 	mov.w	r3, #0
 8019b86:	837b      	strh	r3, [r7, #26]
 8019b88:	f04f 0302 	mov.w	r3, #2
 8019b8c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8019b8e:	f04f 0300 	mov.w	r3, #0
 8019b92:	84bb      	strh	r3, [r7, #36]	; 0x24
 8019b94:	f04f 0301 	mov.w	r3, #1
 8019b98:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8019b9a:	f04f 0300 	mov.w	r3, #0
 8019b9e:	61fb      	str	r3, [r7, #28]
 8019ba0:	f04f 0300 	mov.w	r3, #0
 8019ba4:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8019ba6:	f04f 0300 	mov.w	r3, #0
 8019baa:	613b      	str	r3, [r7, #16]
 8019bac:	f04f 0300 	mov.w	r3, #0
 8019bb0:	60fb      	str	r3, [r7, #12]
 8019bb2:	f04f 0300 	mov.w	r3, #0
 8019bb6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	8b9b      	ldrh	r3, [r3, #28]
 8019bbc:	b29b      	uxth	r3, r3
 8019bbe:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 8019bc2:	f023 031f 	bic.w	r3, r3, #31
 8019bc6:	b29a      	uxth	r2, r3
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	f04f 0202 	mov.w	r2, #2
 8019bd2:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	8b9b      	ldrh	r3, [r3, #28]
 8019bd8:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8019bda:	683b      	ldr	r3, [r7, #0]
 8019bdc:	689b      	ldr	r3, [r3, #8]
 8019bde:	2b02      	cmp	r3, #2
 8019be0:	d106      	bne.n	8019bf0 <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 8019be2:	f04f 0300 	mov.w	r3, #0
 8019be6:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 8019be8:	f04f 0302 	mov.w	r3, #2
 8019bec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8019bee:	e09b      	b.n	8019d28 <I2S_Init+0x1b0>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	889b      	ldrh	r3, [r3, #4]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d103      	bne.n	8019c00 <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8019bf8:	f04f 0301 	mov.w	r3, #1
 8019bfc:	847b      	strh	r3, [r7, #34]	; 0x22
 8019bfe:	e002      	b.n	8019c06 <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8019c00:	f04f 0302 	mov.w	r3, #2
 8019c04:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8019c06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8019c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8019c0e:	689b      	ldr	r3, [r3, #8]
 8019c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d00b      	beq.n	8019c30 <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8019c18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8019c1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8019c20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8019c24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8019c28:	6892      	ldr	r2, [r2, #8]
 8019c2a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8019c2e:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8019c30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8019c34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8019c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8019c42:	4013      	ands	r3, r2
 8019c44:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8019c48:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8019c4c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8019c50:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8019c52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8019c56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8019c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019c5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8019c62:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8019c66:	f003 0307 	and.w	r3, r3, #7
 8019c6a:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8019c6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8019c70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8019c74:	685b      	ldr	r3, [r3, #4]
 8019c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019c7a:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8019c7c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8019c80:	f2c0 037a 	movt	r3, #122	; 0x7a
 8019c84:	693a      	ldr	r2, [r7, #16]
 8019c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8019c8a:	68fa      	ldr	r2, [r7, #12]
 8019c8c:	fb02 f203 	mul.w	r2, r2, r3
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c96:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8019c98:	683b      	ldr	r3, [r7, #0]
 8019c9a:	88db      	ldrh	r3, [r3, #6]
 8019c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ca0:	d113      	bne.n	8019cca <I2S_Init+0x152>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8019ca2:	697b      	ldr	r3, [r7, #20]
 8019ca4:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8019ca8:	4613      	mov	r3, r2
 8019caa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019cae:	189b      	adds	r3, r3, r2
 8019cb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019cb4:	461a      	mov	r2, r3
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	689b      	ldr	r3, [r3, #8]
 8019cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cbe:	b29b      	uxth	r3, r3
 8019cc0:	f103 0305 	add.w	r3, r3, #5
 8019cc4:	b29b      	uxth	r3, r3
 8019cc6:	61fb      	str	r3, [r7, #28]
 8019cc8:	e015      	b.n	8019cf6 <I2S_Init+0x17e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8019cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ccc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8019cd0:	697a      	ldr	r2, [r7, #20]
 8019cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8019cd6:	4613      	mov	r3, r2
 8019cd8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8019cdc:	189b      	adds	r3, r3, r2
 8019cde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019ce2:	461a      	mov	r2, r3
 8019ce4:	683b      	ldr	r3, [r7, #0]
 8019ce6:	689b      	ldr	r3, [r3, #8]
 8019ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	f103 0305 	add.w	r3, r3, #5
 8019cf2:	b29b      	uxth	r3, r3
 8019cf4:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8019cf6:	69fa      	ldr	r2, [r7, #28]
 8019cf8:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8019cfc:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8019d00:	fba3 1302 	umull	r1, r3, r3, r2
 8019d04:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8019d08:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8019d0a:	69fb      	ldr	r3, [r7, #28]
 8019d0c:	b29b      	uxth	r3, r3
 8019d0e:	f003 0301 	and.w	r3, r3, #1
 8019d12:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8019d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d16:	69fa      	ldr	r2, [r7, #28]
 8019d18:	1ad3      	subs	r3, r2, r3
 8019d1a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8019d1e:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8019d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d22:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8019d26:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8019d28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019d2a:	2b01      	cmp	r3, #1
 8019d2c:	d902      	bls.n	8019d34 <I2S_Init+0x1bc>
 8019d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019d30:	2bff      	cmp	r3, #255	; 0xff
 8019d32:	d905      	bls.n	8019d40 <I2S_Init+0x1c8>
  {
    /* Set the default values */
    i2sdiv = 2;
 8019d34:	f04f 0302 	mov.w	r3, #2
 8019d38:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8019d3a:	f04f 0300 	mov.w	r3, #0
 8019d3e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	88da      	ldrh	r2, [r3, #6]
 8019d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d46:	4313      	orrs	r3, r2
 8019d48:	b29a      	uxth	r2, r3
 8019d4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019d4c:	4313      	orrs	r3, r2
 8019d4e:	b29a      	uxth	r2, r3
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8019d54:	683b      	ldr	r3, [r7, #0]
 8019d56:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8019d58:	683b      	ldr	r3, [r7, #0]
 8019d5a:	8859      	ldrh	r1, [r3, #2]
 8019d5c:	683b      	ldr	r3, [r7, #0]
 8019d5e:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8019d60:	683b      	ldr	r3, [r7, #0]
 8019d62:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8019d64:	4303      	orrs	r3, r0
 8019d66:	b29b      	uxth	r3, r3
 8019d68:	430b      	orrs	r3, r1
 8019d6a:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8019d6c:	4313      	orrs	r3, r2
 8019d6e:	b29a      	uxth	r2, r3
 8019d70:	8b7b      	ldrh	r3, [r7, #26]
 8019d72:	4313      	orrs	r3, r2
 8019d74:	b29b      	uxth	r3, r3
 8019d76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019d7a:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	8b7a      	ldrh	r2, [r7, #26]
 8019d80:	839a      	strh	r2, [r3, #28]
}
 8019d82:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8019d86:	46bd      	mov	sp, r7
 8019d88:	bc80      	pop	{r7}
 8019d8a:	4770      	bx	lr

08019d8c <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8019d8c:	b480      	push	{r7}
 8019d8e:	b083      	sub	sp, #12
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f04f 0200 	mov.w	r2, #0
 8019d9a:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	f04f 0200 	mov.w	r2, #0
 8019da2:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	f04f 0200 	mov.w	r2, #0
 8019daa:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	f04f 0200 	mov.w	r2, #0
 8019db2:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	f04f 0200 	mov.w	r2, #0
 8019dba:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	f04f 0200 	mov.w	r2, #0
 8019dc2:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	f04f 0200 	mov.w	r2, #0
 8019dca:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	f04f 0200 	mov.w	r2, #0
 8019dd2:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	f04f 0207 	mov.w	r2, #7
 8019dda:	821a      	strh	r2, [r3, #16]
}
 8019ddc:	f107 070c 	add.w	r7, r7, #12
 8019de0:	46bd      	mov	sp, r7
 8019de2:	bc80      	pop	{r7}
 8019de4:	4770      	bx	lr
 8019de6:	bf00      	nop

08019de8 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 8019de8:	b480      	push	{r7}
 8019dea:	b083      	sub	sp, #12
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	f04f 0200 	mov.w	r2, #0
 8019df6:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	f04f 0200 	mov.w	r2, #0
 8019dfe:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	f04f 0200 	mov.w	r2, #0
 8019e06:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	f04f 0200 	mov.w	r2, #0
 8019e0e:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	f04f 0202 	mov.w	r2, #2
 8019e16:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	f04f 0200 	mov.w	r2, #0
 8019e1e:	819a      	strh	r2, [r3, #12]
}
 8019e20:	f107 070c 	add.w	r7, r7, #12
 8019e24:	46bd      	mov	sp, r7
 8019e26:	bc80      	pop	{r7}
 8019e28:	4770      	bx	lr
 8019e2a:	bf00      	nop

08019e2c <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8019e2c:	b480      	push	{r7}
 8019e2e:	b083      	sub	sp, #12
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
 8019e34:	460b      	mov	r3, r1
 8019e36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8019e38:	78fb      	ldrb	r3, [r7, #3]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d008      	beq.n	8019e50 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	881b      	ldrh	r3, [r3, #0]
 8019e42:	b29b      	uxth	r3, r3
 8019e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e48:	b29a      	uxth	r2, r3
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	801a      	strh	r2, [r3, #0]
 8019e4e:	e007      	b.n	8019e60 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	881b      	ldrh	r3, [r3, #0]
 8019e54:	b29b      	uxth	r3, r3
 8019e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019e5a:	b29a      	uxth	r2, r3
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	801a      	strh	r2, [r3, #0]
  }
}
 8019e60:	f107 070c 	add.w	r7, r7, #12
 8019e64:	46bd      	mov	sp, r7
 8019e66:	bc80      	pop	{r7}
 8019e68:	4770      	bx	lr
 8019e6a:	bf00      	nop

08019e6c <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8019e6c:	b480      	push	{r7}
 8019e6e:	b083      	sub	sp, #12
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
 8019e74:	460b      	mov	r3, r1
 8019e76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8019e78:	78fb      	ldrb	r3, [r7, #3]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d008      	beq.n	8019e90 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	8b9b      	ldrh	r3, [r3, #28]
 8019e82:	b29b      	uxth	r3, r3
 8019e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019e88:	b29a      	uxth	r2, r3
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	839a      	strh	r2, [r3, #28]
 8019e8e:	e007      	b.n	8019ea0 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	8b9b      	ldrh	r3, [r3, #28]
 8019e94:	b29b      	uxth	r3, r3
 8019e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019e9a:	b29a      	uxth	r2, r3
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	839a      	strh	r2, [r3, #28]
  }
}
 8019ea0:	f107 070c 	add.w	r7, r7, #12
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bc80      	pop	{r7}
 8019ea8:	4770      	bx	lr
 8019eaa:	bf00      	nop

08019eac <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8019eac:	b480      	push	{r7}
 8019eae:	b083      	sub	sp, #12
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
 8019eb4:	460b      	mov	r3, r1
 8019eb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	881b      	ldrh	r3, [r3, #0]
 8019ebc:	b29b      	uxth	r3, r3
 8019ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019ec2:	b29a      	uxth	r2, r3
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	881b      	ldrh	r3, [r3, #0]
 8019ecc:	b29a      	uxth	r2, r3
 8019ece:	887b      	ldrh	r3, [r7, #2]
 8019ed0:	4313      	orrs	r3, r2
 8019ed2:	b29a      	uxth	r2, r3
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	801a      	strh	r2, [r3, #0]
}
 8019ed8:	f107 070c 	add.w	r7, r7, #12
 8019edc:	46bd      	mov	sp, r7
 8019ede:	bc80      	pop	{r7}
 8019ee0:	4770      	bx	lr
 8019ee2:	bf00      	nop

08019ee4 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 8019ee4:	b480      	push	{r7}
 8019ee6:	b083      	sub	sp, #12
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
 8019eec:	460b      	mov	r3, r1
 8019eee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8019ef0:	887b      	ldrh	r3, [r7, #2]
 8019ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019ef6:	d108      	bne.n	8019f0a <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	881b      	ldrh	r3, [r3, #0]
 8019efc:	b29b      	uxth	r3, r3
 8019efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019f02:	b29a      	uxth	r2, r3
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	801a      	strh	r2, [r3, #0]
 8019f08:	e007      	b.n	8019f1a <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	881b      	ldrh	r3, [r3, #0]
 8019f0e:	b29b      	uxth	r3, r3
 8019f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019f14:	b29a      	uxth	r2, r3
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	801a      	strh	r2, [r3, #0]
  }
}
 8019f1a:	f107 070c 	add.w	r7, r7, #12
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	bc80      	pop	{r7}
 8019f22:	4770      	bx	lr

08019f24 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 8019f24:	b480      	push	{r7}
 8019f26:	b083      	sub	sp, #12
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
 8019f2c:	460b      	mov	r3, r1
 8019f2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8019f30:	887a      	ldrh	r2, [r7, #2]
 8019f32:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019f36:	429a      	cmp	r2, r3
 8019f38:	d008      	beq.n	8019f4c <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	881b      	ldrh	r3, [r3, #0]
 8019f3e:	b29b      	uxth	r3, r3
 8019f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019f44:	b29a      	uxth	r2, r3
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	801a      	strh	r2, [r3, #0]
 8019f4a:	e007      	b.n	8019f5c <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	881b      	ldrh	r3, [r3, #0]
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019f56:	b29a      	uxth	r2, r3
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	801a      	strh	r2, [r3, #0]
  }
}
 8019f5c:	f107 070c 	add.w	r7, r7, #12
 8019f60:	46bd      	mov	sp, r7
 8019f62:	bc80      	pop	{r7}
 8019f64:	4770      	bx	lr
 8019f66:	bf00      	nop

08019f68 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8019f68:	b480      	push	{r7}
 8019f6a:	b083      	sub	sp, #12
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	460b      	mov	r3, r1
 8019f72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8019f74:	78fb      	ldrb	r3, [r7, #3]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d008      	beq.n	8019f8c <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	889b      	ldrh	r3, [r3, #4]
 8019f7e:	b29b      	uxth	r3, r3
 8019f80:	f043 0304 	orr.w	r3, r3, #4
 8019f84:	b29a      	uxth	r2, r3
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	809a      	strh	r2, [r3, #4]
 8019f8a:	e007      	b.n	8019f9c <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	889b      	ldrh	r3, [r3, #4]
 8019f90:	b29b      	uxth	r3, r3
 8019f92:	f023 0304 	bic.w	r3, r3, #4
 8019f96:	b29a      	uxth	r2, r3
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	809a      	strh	r2, [r3, #4]
  }
}
 8019f9c:	f107 070c 	add.w	r7, r7, #12
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bc80      	pop	{r7}
 8019fa4:	4770      	bx	lr
 8019fa6:	bf00      	nop

08019fa8 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8019fa8:	b480      	push	{r7}
 8019faa:	b083      	sub	sp, #12
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
 8019fb0:	460b      	mov	r3, r1
 8019fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8019fb4:	78fb      	ldrb	r3, [r7, #3]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d008      	beq.n	8019fcc <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	889b      	ldrh	r3, [r3, #4]
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	f043 0310 	orr.w	r3, r3, #16
 8019fc4:	b29a      	uxth	r2, r3
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	809a      	strh	r2, [r3, #4]
 8019fca:	e007      	b.n	8019fdc <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	889b      	ldrh	r3, [r3, #4]
 8019fd0:	b29b      	uxth	r3, r3
 8019fd2:	f023 0310 	bic.w	r3, r3, #16
 8019fd6:	b29a      	uxth	r2, r3
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	809a      	strh	r2, [r3, #4]
  }
}
 8019fdc:	f107 070c 	add.w	r7, r7, #12
 8019fe0:	46bd      	mov	sp, r7
 8019fe2:	bc80      	pop	{r7}
 8019fe4:	4770      	bx	lr
 8019fe6:	bf00      	nop

08019fe8 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8019fe8:	b480      	push	{r7}
 8019fea:	b085      	sub	sp, #20
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	6078      	str	r0, [r7, #4]
 8019ff0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 8019ff2:	f04f 0300 	mov.w	r3, #0
 8019ff6:	81bb      	strh	r3, [r7, #12]
 8019ff8:	f04f 0300 	mov.w	r3, #0
 8019ffc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	8b9b      	ldrh	r3, [r3, #28]
 801a002:	b29b      	uxth	r3, r3
 801a004:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 801a008:	f023 031f 	bic.w	r3, r3, #31
 801a00c:	b29a      	uxth	r2, r3
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	f04f 0202 	mov.w	r2, #2
 801a018:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	8b9b      	ldrh	r3, [r3, #28]
 801a01e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	881b      	ldrh	r3, [r3, #0]
 801a024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a028:	d003      	beq.n	801a032 <I2S_FullDuplexConfig+0x4a>
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	881b      	ldrh	r3, [r3, #0]
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d103      	bne.n	801a03a <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 801a032:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a036:	81fb      	strh	r3, [r7, #14]
 801a038:	e00c      	b.n	801a054 <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 801a03a:	683b      	ldr	r3, [r7, #0]
 801a03c:	881b      	ldrh	r3, [r3, #0]
 801a03e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a042:	d004      	beq.n	801a04e <I2S_FullDuplexConfig+0x66>
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	881b      	ldrh	r3, [r3, #0]
 801a048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a04c:	d102      	bne.n	801a054 <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 801a04e:	f04f 0300 	mov.w	r3, #0
 801a052:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 801a054:	683b      	ldr	r3, [r7, #0]
 801a056:	885a      	ldrh	r2, [r3, #2]
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 801a05c:	683b      	ldr	r3, [r7, #0]
 801a05e:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 801a060:	430b      	orrs	r3, r1
 801a062:	b29b      	uxth	r3, r3
 801a064:	4313      	orrs	r3, r2
 801a066:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 801a068:	89fb      	ldrh	r3, [r7, #14]
 801a06a:	4313      	orrs	r3, r2
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	89bb      	ldrh	r3, [r7, #12]
 801a070:	4313      	orrs	r3, r2
 801a072:	b29b      	uxth	r3, r3
 801a074:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a078:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	89ba      	ldrh	r2, [r7, #12]
 801a07e:	839a      	strh	r2, [r3, #28]
}
 801a080:	f107 0714 	add.w	r7, r7, #20
 801a084:	46bd      	mov	sp, r7
 801a086:	bc80      	pop	{r7}
 801a088:	4770      	bx	lr
 801a08a:	bf00      	nop

0801a08c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 801a08c:	b480      	push	{r7}
 801a08e:	b083      	sub	sp, #12
 801a090:	af00      	add	r7, sp, #0
 801a092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	899b      	ldrh	r3, [r3, #12]
 801a098:	b29b      	uxth	r3, r3
}
 801a09a:	4618      	mov	r0, r3
 801a09c:	f107 070c 	add.w	r7, r7, #12
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	bc80      	pop	{r7}
 801a0a4:	4770      	bx	lr
 801a0a6:	bf00      	nop

0801a0a8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 801a0a8:	b480      	push	{r7}
 801a0aa:	b083      	sub	sp, #12
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
 801a0b0:	460b      	mov	r3, r1
 801a0b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	887a      	ldrh	r2, [r7, #2]
 801a0b8:	819a      	strh	r2, [r3, #12]
}
 801a0ba:	f107 070c 	add.w	r7, r7, #12
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	bc80      	pop	{r7}
 801a0c2:	4770      	bx	lr

0801a0c4 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 801a0c4:	b480      	push	{r7}
 801a0c6:	b083      	sub	sp, #12
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
 801a0cc:	460b      	mov	r3, r1
 801a0ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801a0d0:	78fb      	ldrb	r3, [r7, #3]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d008      	beq.n	801a0e8 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	881b      	ldrh	r3, [r3, #0]
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a0e0:	b29a      	uxth	r2, r3
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	801a      	strh	r2, [r3, #0]
 801a0e6:	e007      	b.n	801a0f8 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	881b      	ldrh	r3, [r3, #0]
 801a0ec:	b29b      	uxth	r3, r3
 801a0ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a0f2:	b29a      	uxth	r2, r3
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	801a      	strh	r2, [r3, #0]
  }
}
 801a0f8:	f107 070c 	add.w	r7, r7, #12
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bc80      	pop	{r7}
 801a100:	4770      	bx	lr
 801a102:	bf00      	nop

0801a104 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 801a104:	b480      	push	{r7}
 801a106:	b083      	sub	sp, #12
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	881b      	ldrh	r3, [r3, #0]
 801a110:	b29b      	uxth	r3, r3
 801a112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801a116:	b29a      	uxth	r2, r3
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	801a      	strh	r2, [r3, #0]
}
 801a11c:	f107 070c 	add.w	r7, r7, #12
 801a120:	46bd      	mov	sp, r7
 801a122:	bc80      	pop	{r7}
 801a124:	4770      	bx	lr
 801a126:	bf00      	nop

0801a128 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 801a128:	b480      	push	{r7}
 801a12a:	b085      	sub	sp, #20
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	6078      	str	r0, [r7, #4]
 801a130:	460b      	mov	r3, r1
 801a132:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 801a134:	f04f 0300 	mov.w	r3, #0
 801a138:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 801a13a:	78fb      	ldrb	r3, [r7, #3]
 801a13c:	2b01      	cmp	r3, #1
 801a13e:	d003      	beq.n	801a148 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	8b1b      	ldrh	r3, [r3, #24]
 801a144:	81fb      	strh	r3, [r7, #14]
 801a146:	e002      	b.n	801a14e <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	8a9b      	ldrh	r3, [r3, #20]
 801a14c:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 801a14e:	89fb      	ldrh	r3, [r7, #14]
}
 801a150:	4618      	mov	r0, r3
 801a152:	f107 0714 	add.w	r7, r7, #20
 801a156:	46bd      	mov	sp, r7
 801a158:	bc80      	pop	{r7}
 801a15a:	4770      	bx	lr

0801a15c <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 801a15c:	b480      	push	{r7}
 801a15e:	b083      	sub	sp, #12
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	8a1b      	ldrh	r3, [r3, #16]
 801a168:	b29b      	uxth	r3, r3
}
 801a16a:	4618      	mov	r0, r3
 801a16c:	f107 070c 	add.w	r7, r7, #12
 801a170:	46bd      	mov	sp, r7
 801a172:	bc80      	pop	{r7}
 801a174:	4770      	bx	lr
 801a176:	bf00      	nop

0801a178 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 801a178:	b480      	push	{r7}
 801a17a:	b083      	sub	sp, #12
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
 801a180:	4613      	mov	r3, r2
 801a182:	460a      	mov	r2, r1
 801a184:	807a      	strh	r2, [r7, #2]
 801a186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 801a188:	787b      	ldrb	r3, [r7, #1]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d008      	beq.n	801a1a0 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	889b      	ldrh	r3, [r3, #4]
 801a192:	b29a      	uxth	r2, r3
 801a194:	887b      	ldrh	r3, [r7, #2]
 801a196:	4313      	orrs	r3, r2
 801a198:	b29a      	uxth	r2, r3
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	809a      	strh	r2, [r3, #4]
 801a19e:	e00a      	b.n	801a1b6 <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	889b      	ldrh	r3, [r3, #4]
 801a1a4:	b29a      	uxth	r2, r3
 801a1a6:	887b      	ldrh	r3, [r7, #2]
 801a1a8:	ea6f 0303 	mvn.w	r3, r3
 801a1ac:	b29b      	uxth	r3, r3
 801a1ae:	4013      	ands	r3, r2
 801a1b0:	b29a      	uxth	r2, r3
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	809a      	strh	r2, [r3, #4]
  }
}
 801a1b6:	f107 070c 	add.w	r7, r7, #12
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	bc80      	pop	{r7}
 801a1be:	4770      	bx	lr

0801a1c0 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 801a1c0:	b480      	push	{r7}
 801a1c2:	b085      	sub	sp, #20
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
 801a1c8:	4613      	mov	r3, r2
 801a1ca:	460a      	mov	r2, r1
 801a1cc:	70fa      	strb	r2, [r7, #3]
 801a1ce:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 801a1d0:	f04f 0300 	mov.w	r3, #0
 801a1d4:	81fb      	strh	r3, [r7, #14]
 801a1d6:	f04f 0300 	mov.w	r3, #0
 801a1da:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 801a1dc:	78fb      	ldrb	r3, [r7, #3]
 801a1de:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801a1e2:	b2db      	uxtb	r3, r3
 801a1e4:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 801a1e6:	89fb      	ldrh	r3, [r7, #14]
 801a1e8:	f04f 0201 	mov.w	r2, #1
 801a1ec:	fa02 f303 	lsl.w	r3, r2, r3
 801a1f0:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 801a1f2:	78bb      	ldrb	r3, [r7, #2]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d008      	beq.n	801a20a <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	889b      	ldrh	r3, [r3, #4]
 801a1fc:	b29a      	uxth	r2, r3
 801a1fe:	89bb      	ldrh	r3, [r7, #12]
 801a200:	4313      	orrs	r3, r2
 801a202:	b29a      	uxth	r2, r3
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	809a      	strh	r2, [r3, #4]
 801a208:	e00a      	b.n	801a220 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	889b      	ldrh	r3, [r3, #4]
 801a20e:	b29a      	uxth	r2, r3
 801a210:	89bb      	ldrh	r3, [r7, #12]
 801a212:	ea6f 0303 	mvn.w	r3, r3
 801a216:	b29b      	uxth	r3, r3
 801a218:	4013      	ands	r3, r2
 801a21a:	b29a      	uxth	r2, r3
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	809a      	strh	r2, [r3, #4]
  }
}
 801a220:	f107 0714 	add.w	r7, r7, #20
 801a224:	46bd      	mov	sp, r7
 801a226:	bc80      	pop	{r7}
 801a228:	4770      	bx	lr
 801a22a:	bf00      	nop

0801a22c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 801a22c:	b480      	push	{r7}
 801a22e:	b085      	sub	sp, #20
 801a230:	af00      	add	r7, sp, #0
 801a232:	6078      	str	r0, [r7, #4]
 801a234:	460b      	mov	r3, r1
 801a236:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 801a238:	f04f 0300 	mov.w	r3, #0
 801a23c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	891b      	ldrh	r3, [r3, #8]
 801a242:	b29a      	uxth	r2, r3
 801a244:	887b      	ldrh	r3, [r7, #2]
 801a246:	4013      	ands	r3, r2
 801a248:	b29b      	uxth	r3, r3
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d003      	beq.n	801a256 <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 801a24e:	f04f 0301 	mov.w	r3, #1
 801a252:	73fb      	strb	r3, [r7, #15]
 801a254:	e002      	b.n	801a25c <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 801a256:	f04f 0300 	mov.w	r3, #0
 801a25a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 801a25c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a25e:	4618      	mov	r0, r3
 801a260:	f107 0714 	add.w	r7, r7, #20
 801a264:	46bd      	mov	sp, r7
 801a266:	bc80      	pop	{r7}
 801a268:	4770      	bx	lr
 801a26a:	bf00      	nop

0801a26c <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 801a26c:	b480      	push	{r7}
 801a26e:	b083      	sub	sp, #12
 801a270:	af00      	add	r7, sp, #0
 801a272:	6078      	str	r0, [r7, #4]
 801a274:	460b      	mov	r3, r1
 801a276:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 801a278:	887b      	ldrh	r3, [r7, #2]
 801a27a:	ea6f 0303 	mvn.w	r3, r3
 801a27e:	b29a      	uxth	r2, r3
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	811a      	strh	r2, [r3, #8]
}
 801a284:	f107 070c 	add.w	r7, r7, #12
 801a288:	46bd      	mov	sp, r7
 801a28a:	bc80      	pop	{r7}
 801a28c:	4770      	bx	lr
 801a28e:	bf00      	nop

0801a290 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 801a290:	b480      	push	{r7}
 801a292:	b085      	sub	sp, #20
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
 801a298:	460b      	mov	r3, r1
 801a29a:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 801a29c:	f04f 0300 	mov.w	r3, #0
 801a2a0:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 801a2a2:	f04f 0300 	mov.w	r3, #0
 801a2a6:	81bb      	strh	r3, [r7, #12]
 801a2a8:	f04f 0300 	mov.w	r3, #0
 801a2ac:	817b      	strh	r3, [r7, #10]
 801a2ae:	f04f 0300 	mov.w	r3, #0
 801a2b2:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 801a2b4:	78fb      	ldrb	r3, [r7, #3]
 801a2b6:	f003 030f 	and.w	r3, r3, #15
 801a2ba:	f04f 0201 	mov.w	r2, #1
 801a2be:	fa02 f303 	lsl.w	r3, r2, r3
 801a2c2:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 801a2c4:	78fb      	ldrb	r3, [r7, #3]
 801a2c6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801a2ca:	b2db      	uxtb	r3, r3
 801a2cc:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 801a2ce:	897b      	ldrh	r3, [r7, #10]
 801a2d0:	f04f 0201 	mov.w	r2, #1
 801a2d4:	fa02 f303 	lsl.w	r3, r2, r3
 801a2d8:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	889b      	ldrh	r3, [r3, #4]
 801a2de:	b29a      	uxth	r2, r3
 801a2e0:	897b      	ldrh	r3, [r7, #10]
 801a2e2:	4013      	ands	r3, r2
 801a2e4:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	891b      	ldrh	r3, [r3, #8]
 801a2ea:	b29a      	uxth	r2, r3
 801a2ec:	89bb      	ldrh	r3, [r7, #12]
 801a2ee:	4013      	ands	r3, r2
 801a2f0:	b29b      	uxth	r3, r3
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d006      	beq.n	801a304 <SPI_I2S_GetITStatus+0x74>
 801a2f6:	893b      	ldrh	r3, [r7, #8]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d003      	beq.n	801a304 <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 801a2fc:	f04f 0301 	mov.w	r3, #1
 801a300:	73fb      	strb	r3, [r7, #15]
 801a302:	e002      	b.n	801a30a <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 801a304:	f04f 0300 	mov.w	r3, #0
 801a308:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 801a30a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a30c:	4618      	mov	r0, r3
 801a30e:	f107 0714 	add.w	r7, r7, #20
 801a312:	46bd      	mov	sp, r7
 801a314:	bc80      	pop	{r7}
 801a316:	4770      	bx	lr

0801a318 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 801a318:	b480      	push	{r7}
 801a31a:	b085      	sub	sp, #20
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
 801a320:	460b      	mov	r3, r1
 801a322:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 801a324:	f04f 0300 	mov.w	r3, #0
 801a328:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 801a32a:	78fb      	ldrb	r3, [r7, #3]
 801a32c:	f003 030f 	and.w	r3, r3, #15
 801a330:	f04f 0201 	mov.w	r2, #1
 801a334:	fa02 f303 	lsl.w	r3, r2, r3
 801a338:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 801a33a:	89fb      	ldrh	r3, [r7, #14]
 801a33c:	ea6f 0303 	mvn.w	r3, r3
 801a340:	b29a      	uxth	r2, r3
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	811a      	strh	r2, [r3, #8]
}
 801a346:	f107 0714 	add.w	r7, r7, #20
 801a34a:	46bd      	mov	sp, r7
 801a34c:	bc80      	pop	{r7}
 801a34e:	4770      	bx	lr

0801a350 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 801a350:	b580      	push	{r7, lr}
 801a352:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 801a354:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801a358:	f04f 0101 	mov.w	r1, #1
 801a35c:	f7fd f82a 	bl	80173b4 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 801a360:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801a364:	f04f 0100 	mov.w	r1, #0
 801a368:	f7fd f824 	bl	80173b4 <RCC_APB2PeriphResetCmd>
}
 801a36c:	bd80      	pop	{r7, pc}
 801a36e:	bf00      	nop

0801a370 <SYSCFG_MemoryRemapConfig>:
  *         registers. 
  *        
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 801a370:	b480      	push	{r7}
 801a372:	b083      	sub	sp, #12
 801a374:	af00      	add	r7, sp, #0
 801a376:	4603      	mov	r3, r0
 801a378:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 801a37a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801a37e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a382:	79fa      	ldrb	r2, [r7, #7]
 801a384:	601a      	str	r2, [r3, #0]
}
 801a386:	f107 070c 	add.w	r7, r7, #12
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bc80      	pop	{r7}
 801a38e:	4770      	bx	lr

0801a390 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 801a390:	b490      	push	{r4, r7}
 801a392:	b084      	sub	sp, #16
 801a394:	af00      	add	r7, sp, #0
 801a396:	4602      	mov	r2, r0
 801a398:	460b      	mov	r3, r1
 801a39a:	71fa      	strb	r2, [r7, #7]
 801a39c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 801a39e:	f04f 0300 	mov.w	r3, #0
 801a3a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 801a3a4:	79bb      	ldrb	r3, [r7, #6]
 801a3a6:	f003 0303 	and.w	r3, r3, #3
 801a3aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801a3ae:	f04f 020f 	mov.w	r2, #15
 801a3b2:	fa02 f303 	lsl.w	r3, r2, r3
 801a3b6:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 801a3b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801a3bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a3c0:	79ba      	ldrb	r2, [r7, #6]
 801a3c2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a3c6:	b2d2      	uxtb	r2, r2
 801a3c8:	4610      	mov	r0, r2
 801a3ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801a3ce:	f2c4 0201 	movt	r2, #16385	; 0x4001
 801a3d2:	79b9      	ldrb	r1, [r7, #6]
 801a3d4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a3d8:	b2c9      	uxtb	r1, r1
 801a3da:	f101 0102 	add.w	r1, r1, #2
 801a3de:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801a3e2:	4611      	mov	r1, r2
 801a3e4:	68fa      	ldr	r2, [r7, #12]
 801a3e6:	ea6f 0202 	mvn.w	r2, r2
 801a3ea:	4011      	ands	r1, r2
 801a3ec:	f100 0202 	add.w	r2, r0, #2
 801a3f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 801a3f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801a3f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a3fc:	79ba      	ldrb	r2, [r7, #6]
 801a3fe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a402:	b2d2      	uxtb	r2, r2
 801a404:	4610      	mov	r0, r2
 801a406:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801a40a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 801a40e:	79b9      	ldrb	r1, [r7, #6]
 801a410:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a414:	b2c9      	uxtb	r1, r1
 801a416:	f101 0102 	add.w	r1, r1, #2
 801a41a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801a41e:	4611      	mov	r1, r2
 801a420:	79fc      	ldrb	r4, [r7, #7]
 801a422:	79ba      	ldrb	r2, [r7, #6]
 801a424:	f002 0203 	and.w	r2, r2, #3
 801a428:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801a42c:	fa04 f202 	lsl.w	r2, r4, r2
 801a430:	4311      	orrs	r1, r2
 801a432:	f100 0202 	add.w	r2, r0, #2
 801a436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 801a43a:	f107 0710 	add.w	r7, r7, #16
 801a43e:	46bd      	mov	sp, r7
 801a440:	bc90      	pop	{r4, r7}
 801a442:	4770      	bx	lr

0801a444 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 801a444:	b480      	push	{r7}
 801a446:	b083      	sub	sp, #12
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 801a44c:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 801a450:	f2c4 2327 	movt	r3, #16935	; 0x4227
 801a454:	687a      	ldr	r2, [r7, #4]
 801a456:	601a      	str	r2, [r3, #0]
}
 801a458:	f107 070c 	add.w	r7, r7, #12
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bc80      	pop	{r7}
 801a460:	4770      	bx	lr
 801a462:	bf00      	nop

0801a464 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 801a464:	b480      	push	{r7}
 801a466:	b083      	sub	sp, #12
 801a468:	af00      	add	r7, sp, #0
 801a46a:	4603      	mov	r3, r0
 801a46c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 801a46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a472:	f2c4 2327 	movt	r3, #16935	; 0x4227
 801a476:	79fa      	ldrb	r2, [r7, #7]
 801a478:	601a      	str	r2, [r3, #0]
}
 801a47a:	f107 070c 	add.w	r7, r7, #12
 801a47e:	46bd      	mov	sp, r7
 801a480:	bc80      	pop	{r7}
 801a482:	4770      	bx	lr

0801a484 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 801a484:	b480      	push	{r7}
 801a486:	b083      	sub	sp, #12
 801a488:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 801a48a:	f04f 0300 	mov.w	r3, #0
 801a48e:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 801a490:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801a494:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a498:	6a1b      	ldr	r3, [r3, #32]
 801a49a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d003      	beq.n	801a4aa <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 801a4a2:	f04f 0301 	mov.w	r3, #1
 801a4a6:	71fb      	strb	r3, [r7, #7]
 801a4a8:	e002      	b.n	801a4b0 <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 801a4aa:	f04f 0300 	mov.w	r3, #0
 801a4ae:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 801a4b0:	79fb      	ldrb	r3, [r7, #7]
}
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f107 070c 	add.w	r7, r7, #12
 801a4b8:	46bd      	mov	sp, r7
 801a4ba:	bc80      	pop	{r7}
 801a4bc:	4770      	bx	lr
 801a4be:	bf00      	nop

0801a4c0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b082      	sub	sp, #8
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 801a4c8:	687a      	ldr	r2, [r7, #4]
 801a4ca:	f04f 0300 	mov.w	r3, #0
 801a4ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a4d2:	429a      	cmp	r2, r3
 801a4d4:	d10c      	bne.n	801a4f0 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 801a4d6:	f04f 0001 	mov.w	r0, #1
 801a4da:	f04f 0101 	mov.w	r1, #1
 801a4de:	f7fc ff69 	bl	80173b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 801a4e2:	f04f 0001 	mov.w	r0, #1
 801a4e6:	f04f 0100 	mov.w	r1, #0
 801a4ea:	f7fc ff63 	bl	80173b4 <RCC_APB2PeriphResetCmd>
 801a4ee:	e0ff      	b.n	801a6f0 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a4f6:	d10c      	bne.n	801a512 <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 801a4f8:	f04f 0001 	mov.w	r0, #1
 801a4fc:	f04f 0101 	mov.w	r1, #1
 801a500:	f7fc ff2c 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 801a504:	f04f 0001 	mov.w	r0, #1
 801a508:	f04f 0100 	mov.w	r1, #0
 801a50c:	f7fc ff26 	bl	801735c <RCC_APB1PeriphResetCmd>
 801a510:	e0ee      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 801a512:	687a      	ldr	r2, [r7, #4]
 801a514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a518:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a51c:	429a      	cmp	r2, r3
 801a51e:	d10c      	bne.n	801a53a <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 801a520:	f04f 0002 	mov.w	r0, #2
 801a524:	f04f 0101 	mov.w	r1, #1
 801a528:	f7fc ff18 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 801a52c:	f04f 0002 	mov.w	r0, #2
 801a530:	f04f 0100 	mov.w	r1, #0
 801a534:	f7fc ff12 	bl	801735c <RCC_APB1PeriphResetCmd>
 801a538:	e0da      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 801a53a:	687a      	ldr	r2, [r7, #4]
 801a53c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a540:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a544:	429a      	cmp	r2, r3
 801a546:	d10c      	bne.n	801a562 <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 801a548:	f04f 0004 	mov.w	r0, #4
 801a54c:	f04f 0101 	mov.w	r1, #1
 801a550:	f7fc ff04 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 801a554:	f04f 0004 	mov.w	r0, #4
 801a558:	f04f 0100 	mov.w	r1, #0
 801a55c:	f7fc fefe 	bl	801735c <RCC_APB1PeriphResetCmd>
 801a560:	e0c6      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 801a562:	687a      	ldr	r2, [r7, #4]
 801a564:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801a568:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a56c:	429a      	cmp	r2, r3
 801a56e:	d10c      	bne.n	801a58a <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 801a570:	f04f 0008 	mov.w	r0, #8
 801a574:	f04f 0101 	mov.w	r1, #1
 801a578:	f7fc fef0 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 801a57c:	f04f 0008 	mov.w	r0, #8
 801a580:	f04f 0100 	mov.w	r1, #0
 801a584:	f7fc feea 	bl	801735c <RCC_APB1PeriphResetCmd>
 801a588:	e0b2      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 801a58a:	687a      	ldr	r2, [r7, #4]
 801a58c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a590:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a594:	429a      	cmp	r2, r3
 801a596:	d10c      	bne.n	801a5b2 <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 801a598:	f04f 0010 	mov.w	r0, #16
 801a59c:	f04f 0101 	mov.w	r1, #1
 801a5a0:	f7fc fedc 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 801a5a4:	f04f 0010 	mov.w	r0, #16
 801a5a8:	f04f 0100 	mov.w	r1, #0
 801a5ac:	f7fc fed6 	bl	801735c <RCC_APB1PeriphResetCmd>
 801a5b0:	e09e      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 801a5b2:	687a      	ldr	r2, [r7, #4]
 801a5b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801a5b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a5bc:	429a      	cmp	r2, r3
 801a5be:	d10c      	bne.n	801a5da <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 801a5c0:	f04f 0020 	mov.w	r0, #32
 801a5c4:	f04f 0101 	mov.w	r1, #1
 801a5c8:	f7fc fec8 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 801a5cc:	f04f 0020 	mov.w	r0, #32
 801a5d0:	f04f 0100 	mov.w	r1, #0
 801a5d4:	f7fc fec2 	bl	801735c <RCC_APB1PeriphResetCmd>
 801a5d8:	e08a      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 801a5da:	687a      	ldr	r2, [r7, #4]
 801a5dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a5e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a5e4:	429a      	cmp	r2, r3
 801a5e6:	d10c      	bne.n	801a602 <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 801a5e8:	f04f 0002 	mov.w	r0, #2
 801a5ec:	f04f 0101 	mov.w	r1, #1
 801a5f0:	f7fc fee0 	bl	80173b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 801a5f4:	f04f 0002 	mov.w	r0, #2
 801a5f8:	f04f 0100 	mov.w	r1, #0
 801a5fc:	f7fc feda 	bl	80173b4 <RCC_APB2PeriphResetCmd>
 801a600:	e076      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 801a602:	687a      	ldr	r2, [r7, #4]
 801a604:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a608:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a60c:	429a      	cmp	r2, r3
 801a60e:	d10c      	bne.n	801a62a <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 801a610:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801a614:	f04f 0101 	mov.w	r1, #1
 801a618:	f7fc fecc 	bl	80173b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 801a61c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801a620:	f04f 0100 	mov.w	r1, #0
 801a624:	f7fc fec6 	bl	80173b4 <RCC_APB2PeriphResetCmd>
 801a628:	e062      	b.n	801a6f0 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 801a62a:	687a      	ldr	r2, [r7, #4]
 801a62c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 801a630:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a634:	429a      	cmp	r2, r3
 801a636:	d10c      	bne.n	801a652 <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 801a638:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801a63c:	f04f 0101 	mov.w	r1, #1
 801a640:	f7fc feb8 	bl	80173b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 801a644:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801a648:	f04f 0100 	mov.w	r1, #0
 801a64c:	f7fc feb2 	bl	80173b4 <RCC_APB2PeriphResetCmd>
 801a650:	e04e      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 801a652:	687a      	ldr	r2, [r7, #4]
 801a654:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 801a658:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a65c:	429a      	cmp	r2, r3
 801a65e:	d10c      	bne.n	801a67a <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 801a660:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801a664:	f04f 0101 	mov.w	r1, #1
 801a668:	f7fc fea4 	bl	80173b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 801a66c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801a670:	f04f 0100 	mov.w	r1, #0
 801a674:	f7fc fe9e 	bl	80173b4 <RCC_APB2PeriphResetCmd>
 801a678:	e03a      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 801a67a:	687a      	ldr	r2, [r7, #4]
 801a67c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a680:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a684:	429a      	cmp	r2, r3
 801a686:	d10c      	bne.n	801a6a2 <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 801a688:	f04f 0040 	mov.w	r0, #64	; 0x40
 801a68c:	f04f 0101 	mov.w	r1, #1
 801a690:	f7fc fe64 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 801a694:	f04f 0040 	mov.w	r0, #64	; 0x40
 801a698:	f04f 0100 	mov.w	r1, #0
 801a69c:	f7fc fe5e 	bl	801735c <RCC_APB1PeriphResetCmd>
 801a6a0:	e026      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 801a6a2:	687a      	ldr	r2, [r7, #4]
 801a6a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801a6a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a6ac:	429a      	cmp	r2, r3
 801a6ae:	d10c      	bne.n	801a6ca <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 801a6b0:	f04f 0080 	mov.w	r0, #128	; 0x80
 801a6b4:	f04f 0101 	mov.w	r1, #1
 801a6b8:	f7fc fe50 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 801a6bc:	f04f 0080 	mov.w	r0, #128	; 0x80
 801a6c0:	f04f 0100 	mov.w	r1, #0
 801a6c4:	f7fc fe4a 	bl	801735c <RCC_APB1PeriphResetCmd>
 801a6c8:	e012      	b.n	801a6f0 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 801a6ca:	687a      	ldr	r2, [r7, #4]
 801a6cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a6d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a6d4:	429a      	cmp	r2, r3
 801a6d6:	d10b      	bne.n	801a6f0 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 801a6d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a6dc:	f04f 0101 	mov.w	r1, #1
 801a6e0:	f7fc fe3c 	bl	801735c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 801a6e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a6e8:	f04f 0100 	mov.w	r1, #0
 801a6ec:	f7fc fe36 	bl	801735c <RCC_APB1PeriphResetCmd>
    }   
  }
}
 801a6f0:	f107 0708 	add.w	r7, r7, #8
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	bd80      	pop	{r7, pc}

0801a6f8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 801a6f8:	b480      	push	{r7}
 801a6fa:	b085      	sub	sp, #20
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	6078      	str	r0, [r7, #4]
 801a700:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 801a702:	f04f 0300 	mov.w	r3, #0
 801a706:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	881b      	ldrh	r3, [r3, #0]
 801a70c:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 801a70e:	687a      	ldr	r2, [r7, #4]
 801a710:	f04f 0300 	mov.w	r3, #0
 801a714:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a718:	429a      	cmp	r2, r3
 801a71a:	d01f      	beq.n	801a75c <TIM_TimeBaseInit+0x64>
 801a71c:	687a      	ldr	r2, [r7, #4]
 801a71e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a722:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a726:	429a      	cmp	r2, r3
 801a728:	d018      	beq.n	801a75c <TIM_TimeBaseInit+0x64>
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a730:	d014      	beq.n	801a75c <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 801a732:	687a      	ldr	r2, [r7, #4]
 801a734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a738:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a73c:	429a      	cmp	r2, r3
 801a73e:	d00d      	beq.n	801a75c <TIM_TimeBaseInit+0x64>
 801a740:	687a      	ldr	r2, [r7, #4]
 801a742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a746:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a74a:	429a      	cmp	r2, r3
 801a74c:	d006      	beq.n	801a75c <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 801a74e:	687a      	ldr	r2, [r7, #4]
 801a750:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801a754:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a758:	429a      	cmp	r2, r3
 801a75a:	d108      	bne.n	801a76e <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 801a75c:	89fb      	ldrh	r3, [r7, #14]
 801a75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a762:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 801a764:	683b      	ldr	r3, [r7, #0]
 801a766:	885a      	ldrh	r2, [r3, #2]
 801a768:	89fb      	ldrh	r3, [r7, #14]
 801a76a:	4313      	orrs	r3, r2
 801a76c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 801a76e:	687a      	ldr	r2, [r7, #4]
 801a770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a774:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a778:	429a      	cmp	r2, r3
 801a77a:	d00f      	beq.n	801a79c <TIM_TimeBaseInit+0xa4>
 801a77c:	687a      	ldr	r2, [r7, #4]
 801a77e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801a782:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801a786:	429a      	cmp	r2, r3
 801a788:	d008      	beq.n	801a79c <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 801a78a:	89fb      	ldrh	r3, [r7, #14]
 801a78c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a790:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 801a792:	683b      	ldr	r3, [r7, #0]
 801a794:	891a      	ldrh	r2, [r3, #8]
 801a796:	89fb      	ldrh	r3, [r7, #14]
 801a798:	4313      	orrs	r3, r2
 801a79a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	89fa      	ldrh	r2, [r7, #14]
 801a7a0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 801a7a2:	683b      	ldr	r3, [r7, #0]
 801a7a4:	685a      	ldr	r2, [r3, #4]
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 801a7aa:	683b      	ldr	r3, [r7, #0]
 801a7ac:	881a      	ldrh	r2, [r3, #0]
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 801a7b2:	687a      	ldr	r2, [r7, #4]
 801a7b4:	f04f 0300 	mov.w	r3, #0
 801a7b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	d006      	beq.n	801a7ce <TIM_TimeBaseInit+0xd6>
 801a7c0:	687a      	ldr	r2, [r7, #4]
 801a7c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a7c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801a7ca:	429a      	cmp	r2, r3
 801a7cc:	d104      	bne.n	801a7d8 <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	7a9b      	ldrb	r3, [r3, #10]
 801a7d2:	461a      	mov	r2, r3
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	f04f 0201 	mov.w	r2, #1
 801a7de:	829a      	strh	r2, [r3, #20]
}
 801a7e0:	f107 0714 	add.w	r7, r7, #20
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	bc80      	pop	{r7}
 801a7e8:	4770      	bx	lr
 801a7ea:	bf00      	nop

0801a7ec <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 801a7ec:	b480      	push	{r7}
 801a7ee:	b083      	sub	sp, #12
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 801a7fa:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	f04f 0200 	mov.w	r2, #0
 801a802:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	f04f 0200 	mov.w	r2, #0
 801a80a:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	f04f 0200 	mov.w	r2, #0
 801a812:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	f04f 0200 	mov.w	r2, #0
 801a81a:	729a      	strb	r2, [r3, #10]
}
 801a81c:	f107 070c 	add.w	r7, r7, #12
 801a820:	46bd      	mov	sp, r7
 801a822:	bc80      	pop	{r7}
 801a824:	4770      	bx	lr
 801a826:	bf00      	nop

0801a828 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 801a828:	b480      	push	{r7}
 801a82a:	b083      	sub	sp, #12
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
 801a830:	4613      	mov	r3, r2
 801a832:	460a      	mov	r2, r1
 801a834:	807a      	strh	r2, [r7, #2]
 801a836:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	887a      	ldrh	r2, [r7, #2]
 801a83c:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	883a      	ldrh	r2, [r7, #0]
 801a842:	829a      	strh	r2, [r3, #20]
}
 801a844:	f107 070c 	add.w	r7, r7, #12
 801a848:	46bd      	mov	sp, r7
 801a84a:	bc80      	pop	{r7}
 801a84c:	4770      	bx	lr
 801a84e:	bf00      	nop

0801a850 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 801a850:	b480      	push	{r7}
 801a852:	b085      	sub	sp, #20
 801a854:	af00      	add	r7, sp, #0
 801a856:	6078      	str	r0, [r7, #4]
 801a858:	460b      	mov	r3, r1
 801a85a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 801a85c:	f04f 0300 	mov.w	r3, #0
 801a860:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	881b      	ldrh	r3, [r3, #0]
 801a866:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a868:	89fb      	ldrh	r3, [r7, #14]
 801a86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a86e:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 801a870:	89fa      	ldrh	r2, [r7, #14]
 801a872:	887b      	ldrh	r3, [r7, #2]
 801a874:	4313      	orrs	r3, r2
 801a876:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	89fa      	ldrh	r2, [r7, #14]
 801a87c:	801a      	strh	r2, [r3, #0]
}
 801a87e:	f107 0714 	add.w	r7, r7, #20
 801a882:	46bd      	mov	sp, r7
 801a884:	bc80      	pop	{r7}
 801a886:	4770      	bx	lr

0801a888 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 801a888:	b480      	push	{r7}
 801a88a:	b083      	sub	sp, #12
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	6078      	str	r0, [r7, #4]
 801a890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	683a      	ldr	r2, [r7, #0]
 801a896:	625a      	str	r2, [r3, #36]	; 0x24
}
 801a898:	f107 070c 	add.w	r7, r7, #12
 801a89c:	46bd      	mov	sp, r7
 801a89e:	bc80      	pop	{r7}
 801a8a0:	4770      	bx	lr
 801a8a2:	bf00      	nop

0801a8a4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 801a8a4:	b480      	push	{r7}
 801a8a6:	b083      	sub	sp, #12
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
 801a8ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	683a      	ldr	r2, [r7, #0]
 801a8b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801a8b4:	f107 070c 	add.w	r7, r7, #12
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bc80      	pop	{r7}
 801a8bc:	4770      	bx	lr
 801a8be:	bf00      	nop

0801a8c0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 801a8c0:	b480      	push	{r7}
 801a8c2:	b083      	sub	sp, #12
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	f107 070c 	add.w	r7, r7, #12
 801a8d2:	46bd      	mov	sp, r7
 801a8d4:	bc80      	pop	{r7}
 801a8d6:	4770      	bx	lr

0801a8d8 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 801a8d8:	b480      	push	{r7}
 801a8da:	b083      	sub	sp, #12
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a8e4:	b29b      	uxth	r3, r3
}
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	f107 070c 	add.w	r7, r7, #12
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bc80      	pop	{r7}
 801a8f0:	4770      	bx	lr
 801a8f2:	bf00      	nop

0801a8f4 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801a8f4:	b480      	push	{r7}
 801a8f6:	b083      	sub	sp, #12
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
 801a8fc:	460b      	mov	r3, r1
 801a8fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801a900:	78fb      	ldrb	r3, [r7, #3]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d008      	beq.n	801a918 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	881b      	ldrh	r3, [r3, #0]
 801a90a:	b29b      	uxth	r3, r3
 801a90c:	f043 0302 	orr.w	r3, r3, #2
 801a910:	b29a      	uxth	r2, r3
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	801a      	strh	r2, [r3, #0]
 801a916:	e007      	b.n	801a928 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	881b      	ldrh	r3, [r3, #0]
 801a91c:	b29b      	uxth	r3, r3
 801a91e:	f023 0302 	bic.w	r3, r3, #2
 801a922:	b29a      	uxth	r2, r3
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	801a      	strh	r2, [r3, #0]
  }
}
 801a928:	f107 070c 	add.w	r7, r7, #12
 801a92c:	46bd      	mov	sp, r7
 801a92e:	bc80      	pop	{r7}
 801a930:	4770      	bx	lr
 801a932:	bf00      	nop

0801a934 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 801a934:	b480      	push	{r7}
 801a936:	b083      	sub	sp, #12
 801a938:	af00      	add	r7, sp, #0
 801a93a:	6078      	str	r0, [r7, #4]
 801a93c:	460b      	mov	r3, r1
 801a93e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 801a940:	887b      	ldrh	r3, [r7, #2]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d008      	beq.n	801a958 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	881b      	ldrh	r3, [r3, #0]
 801a94a:	b29b      	uxth	r3, r3
 801a94c:	f043 0304 	orr.w	r3, r3, #4
 801a950:	b29a      	uxth	r2, r3
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	801a      	strh	r2, [r3, #0]
 801a956:	e007      	b.n	801a968 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	881b      	ldrh	r3, [r3, #0]
 801a95c:	b29b      	uxth	r3, r3
 801a95e:	f023 0304 	bic.w	r3, r3, #4
 801a962:	b29a      	uxth	r2, r3
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	801a      	strh	r2, [r3, #0]
  }
}
 801a968:	f107 070c 	add.w	r7, r7, #12
 801a96c:	46bd      	mov	sp, r7
 801a96e:	bc80      	pop	{r7}
 801a970:	4770      	bx	lr
 801a972:	bf00      	nop

0801a974 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801a974:	b480      	push	{r7}
 801a976:	b083      	sub	sp, #12
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
 801a97c:	460b      	mov	r3, r1
 801a97e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801a980:	78fb      	ldrb	r3, [r7, #3]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d008      	beq.n	801a998 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	881b      	ldrh	r3, [r3, #0]
 801a98a:	b29b      	uxth	r3, r3
 801a98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a990:	b29a      	uxth	r2, r3
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	801a      	strh	r2, [r3, #0]
 801a996:	e007      	b.n	801a9a8 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	881b      	ldrh	r3, [r3, #0]
 801a99c:	b29b      	uxth	r3, r3
 801a99e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a9a2:	b29a      	uxth	r2, r3
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	801a      	strh	r2, [r3, #0]
  }
}
 801a9a8:	f107 070c 	add.w	r7, r7, #12
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	bc80      	pop	{r7}
 801a9b0:	4770      	bx	lr
 801a9b2:	bf00      	nop

0801a9b4 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 801a9b4:	b480      	push	{r7}
 801a9b6:	b083      	sub	sp, #12
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	6078      	str	r0, [r7, #4]
 801a9bc:	460b      	mov	r3, r1
 801a9be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	881b      	ldrh	r3, [r3, #0]
 801a9c4:	b29b      	uxth	r3, r3
 801a9c6:	f023 0308 	bic.w	r3, r3, #8
 801a9ca:	b29a      	uxth	r2, r3
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	881b      	ldrh	r3, [r3, #0]
 801a9d4:	b29a      	uxth	r2, r3
 801a9d6:	887b      	ldrh	r3, [r7, #2]
 801a9d8:	4313      	orrs	r3, r2
 801a9da:	b29a      	uxth	r2, r3
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	801a      	strh	r2, [r3, #0]
}
 801a9e0:	f107 070c 	add.w	r7, r7, #12
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	bc80      	pop	{r7}
 801a9e8:	4770      	bx	lr
 801a9ea:	bf00      	nop

0801a9ec <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 801a9ec:	b480      	push	{r7}
 801a9ee:	b083      	sub	sp, #12
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	6078      	str	r0, [r7, #4]
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	881b      	ldrh	r3, [r3, #0]
 801a9fc:	b29b      	uxth	r3, r3
 801a9fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801aa02:	b29a      	uxth	r2, r3
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	881b      	ldrh	r3, [r3, #0]
 801aa0c:	b29a      	uxth	r2, r3
 801aa0e:	887b      	ldrh	r3, [r7, #2]
 801aa10:	4313      	orrs	r3, r2
 801aa12:	b29a      	uxth	r2, r3
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	801a      	strh	r2, [r3, #0]
}
 801aa18:	f107 070c 	add.w	r7, r7, #12
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	bc80      	pop	{r7}
 801aa20:	4770      	bx	lr
 801aa22:	bf00      	nop

0801aa24 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801aa24:	b480      	push	{r7}
 801aa26:	b083      	sub	sp, #12
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
 801aa2c:	460b      	mov	r3, r1
 801aa2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801aa30:	78fb      	ldrb	r3, [r7, #3]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d008      	beq.n	801aa48 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	881b      	ldrh	r3, [r3, #0]
 801aa3a:	b29b      	uxth	r3, r3
 801aa3c:	f043 0301 	orr.w	r3, r3, #1
 801aa40:	b29a      	uxth	r2, r3
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	801a      	strh	r2, [r3, #0]
 801aa46:	e007      	b.n	801aa58 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	881b      	ldrh	r3, [r3, #0]
 801aa4c:	b29b      	uxth	r3, r3
 801aa4e:	f023 0301 	bic.w	r3, r3, #1
 801aa52:	b29a      	uxth	r2, r3
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	801a      	strh	r2, [r3, #0]
  }
}
 801aa58:	f107 070c 	add.w	r7, r7, #12
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	bc80      	pop	{r7}
 801aa60:	4770      	bx	lr
 801aa62:	bf00      	nop

0801aa64 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801aa64:	b480      	push	{r7}
 801aa66:	b085      	sub	sp, #20
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
 801aa6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801aa6e:	f04f 0300 	mov.w	r3, #0
 801aa72:	817b      	strh	r3, [r7, #10]
 801aa74:	f04f 0300 	mov.w	r3, #0
 801aa78:	81fb      	strh	r3, [r7, #14]
 801aa7a:	f04f 0300 	mov.w	r3, #0
 801aa7e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	8c1b      	ldrh	r3, [r3, #32]
 801aa84:	b29b      	uxth	r3, r3
 801aa86:	f023 0301 	bic.w	r3, r3, #1
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	8c1b      	ldrh	r3, [r3, #32]
 801aa94:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	889b      	ldrh	r3, [r3, #4]
 801aa9a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	8b1b      	ldrh	r3, [r3, #24]
 801aaa0:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 801aaa2:	897b      	ldrh	r3, [r7, #10]
 801aaa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aaa8:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 801aaaa:	897b      	ldrh	r3, [r7, #10]
 801aaac:	f023 0303 	bic.w	r3, r3, #3
 801aab0:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801aab2:	683b      	ldr	r3, [r7, #0]
 801aab4:	881a      	ldrh	r2, [r3, #0]
 801aab6:	897b      	ldrh	r3, [r7, #10]
 801aab8:	4313      	orrs	r3, r2
 801aaba:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 801aabc:	89fb      	ldrh	r3, [r7, #14]
 801aabe:	f023 0302 	bic.w	r3, r3, #2
 801aac2:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 801aac4:	683b      	ldr	r3, [r7, #0]
 801aac6:	899a      	ldrh	r2, [r3, #12]
 801aac8:	89fb      	ldrh	r3, [r7, #14]
 801aaca:	4313      	orrs	r3, r2
 801aacc:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 801aace:	683b      	ldr	r3, [r7, #0]
 801aad0:	885a      	ldrh	r2, [r3, #2]
 801aad2:	89fb      	ldrh	r3, [r7, #14]
 801aad4:	4313      	orrs	r3, r2
 801aad6:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801aad8:	687a      	ldr	r2, [r7, #4]
 801aada:	f04f 0300 	mov.w	r3, #0
 801aade:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801aae2:	429a      	cmp	r2, r3
 801aae4:	d006      	beq.n	801aaf4 <TIM_OC1Init+0x90>
 801aae6:	687a      	ldr	r2, [r7, #4]
 801aae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aaec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d123      	bne.n	801ab3c <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 801aaf4:	89fb      	ldrh	r3, [r7, #14]
 801aaf6:	f023 0308 	bic.w	r3, r3, #8
 801aafa:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 801aafc:	683b      	ldr	r3, [r7, #0]
 801aafe:	89da      	ldrh	r2, [r3, #14]
 801ab00:	89fb      	ldrh	r3, [r7, #14]
 801ab02:	4313      	orrs	r3, r2
 801ab04:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 801ab06:	89fb      	ldrh	r3, [r7, #14]
 801ab08:	f023 0304 	bic.w	r3, r3, #4
 801ab0c:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 801ab0e:	683b      	ldr	r3, [r7, #0]
 801ab10:	889a      	ldrh	r2, [r3, #4]
 801ab12:	89fb      	ldrh	r3, [r7, #14]
 801ab14:	4313      	orrs	r3, r2
 801ab16:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 801ab18:	89bb      	ldrh	r3, [r7, #12]
 801ab1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ab1e:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 801ab20:	89bb      	ldrh	r3, [r7, #12]
 801ab22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ab26:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 801ab28:	683b      	ldr	r3, [r7, #0]
 801ab2a:	8a1a      	ldrh	r2, [r3, #16]
 801ab2c:	89bb      	ldrh	r3, [r7, #12]
 801ab2e:	4313      	orrs	r3, r2
 801ab30:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 801ab32:	683b      	ldr	r3, [r7, #0]
 801ab34:	8a5a      	ldrh	r2, [r3, #18]
 801ab36:	89bb      	ldrh	r3, [r7, #12]
 801ab38:	4313      	orrs	r3, r2
 801ab3a:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	89ba      	ldrh	r2, [r7, #12]
 801ab40:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	897a      	ldrh	r2, [r7, #10]
 801ab46:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 801ab48:	683b      	ldr	r3, [r7, #0]
 801ab4a:	689a      	ldr	r2, [r3, #8]
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	89fa      	ldrh	r2, [r7, #14]
 801ab54:	841a      	strh	r2, [r3, #32]
}
 801ab56:	f107 0714 	add.w	r7, r7, #20
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bc80      	pop	{r7}
 801ab5e:	4770      	bx	lr

0801ab60 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801ab60:	b480      	push	{r7}
 801ab62:	b085      	sub	sp, #20
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	6078      	str	r0, [r7, #4]
 801ab68:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801ab6a:	f04f 0300 	mov.w	r3, #0
 801ab6e:	817b      	strh	r3, [r7, #10]
 801ab70:	f04f 0300 	mov.w	r3, #0
 801ab74:	81fb      	strh	r3, [r7, #14]
 801ab76:	f04f 0300 	mov.w	r3, #0
 801ab7a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	8c1b      	ldrh	r3, [r3, #32]
 801ab80:	b29b      	uxth	r3, r3
 801ab82:	f023 0310 	bic.w	r3, r3, #16
 801ab86:	b29a      	uxth	r2, r3
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	8c1b      	ldrh	r3, [r3, #32]
 801ab90:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	889b      	ldrh	r3, [r3, #4]
 801ab96:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	8b1b      	ldrh	r3, [r3, #24]
 801ab9c:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 801ab9e:	897b      	ldrh	r3, [r7, #10]
 801aba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801aba4:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 801aba6:	897b      	ldrh	r3, [r7, #10]
 801aba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801abac:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801abae:	683b      	ldr	r3, [r7, #0]
 801abb0:	881b      	ldrh	r3, [r3, #0]
 801abb2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801abb6:	b29a      	uxth	r2, r3
 801abb8:	897b      	ldrh	r3, [r7, #10]
 801abba:	4313      	orrs	r3, r2
 801abbc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 801abbe:	89fb      	ldrh	r3, [r7, #14]
 801abc0:	f023 0320 	bic.w	r3, r3, #32
 801abc4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 801abc6:	683b      	ldr	r3, [r7, #0]
 801abc8:	899b      	ldrh	r3, [r3, #12]
 801abca:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801abce:	b29a      	uxth	r2, r3
 801abd0:	89fb      	ldrh	r3, [r7, #14]
 801abd2:	4313      	orrs	r3, r2
 801abd4:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801abd6:	683b      	ldr	r3, [r7, #0]
 801abd8:	885b      	ldrh	r3, [r3, #2]
 801abda:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801abde:	b29a      	uxth	r2, r3
 801abe0:	89fb      	ldrh	r3, [r7, #14]
 801abe2:	4313      	orrs	r3, r2
 801abe4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801abe6:	687a      	ldr	r2, [r7, #4]
 801abe8:	f04f 0300 	mov.w	r3, #0
 801abec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801abf0:	429a      	cmp	r2, r3
 801abf2:	d006      	beq.n	801ac02 <TIM_OC2Init+0xa2>
 801abf4:	687a      	ldr	r2, [r7, #4]
 801abf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801abfa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801abfe:	429a      	cmp	r2, r3
 801ac00:	d12f      	bne.n	801ac62 <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 801ac02:	89fb      	ldrh	r3, [r7, #14]
 801ac04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ac08:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	89db      	ldrh	r3, [r3, #14]
 801ac0e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801ac12:	b29a      	uxth	r2, r3
 801ac14:	89fb      	ldrh	r3, [r7, #14]
 801ac16:	4313      	orrs	r3, r2
 801ac18:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 801ac1a:	89fb      	ldrh	r3, [r7, #14]
 801ac1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ac20:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 801ac22:	683b      	ldr	r3, [r7, #0]
 801ac24:	889b      	ldrh	r3, [r3, #4]
 801ac26:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801ac2a:	b29a      	uxth	r2, r3
 801ac2c:	89fb      	ldrh	r3, [r7, #14]
 801ac2e:	4313      	orrs	r3, r2
 801ac30:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 801ac32:	89bb      	ldrh	r3, [r7, #12]
 801ac34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ac38:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 801ac3a:	89bb      	ldrh	r3, [r7, #12]
 801ac3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ac40:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 801ac42:	683b      	ldr	r3, [r7, #0]
 801ac44:	8a1b      	ldrh	r3, [r3, #16]
 801ac46:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801ac4a:	b29a      	uxth	r2, r3
 801ac4c:	89bb      	ldrh	r3, [r7, #12]
 801ac4e:	4313      	orrs	r3, r2
 801ac50:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 801ac52:	683b      	ldr	r3, [r7, #0]
 801ac54:	8a5b      	ldrh	r3, [r3, #18]
 801ac56:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801ac5a:	b29a      	uxth	r2, r3
 801ac5c:	89bb      	ldrh	r3, [r7, #12]
 801ac5e:	4313      	orrs	r3, r2
 801ac60:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	89ba      	ldrh	r2, [r7, #12]
 801ac66:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	897a      	ldrh	r2, [r7, #10]
 801ac6c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 801ac6e:	683b      	ldr	r3, [r7, #0]
 801ac70:	689a      	ldr	r2, [r3, #8]
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	89fa      	ldrh	r2, [r7, #14]
 801ac7a:	841a      	strh	r2, [r3, #32]
}
 801ac7c:	f107 0714 	add.w	r7, r7, #20
 801ac80:	46bd      	mov	sp, r7
 801ac82:	bc80      	pop	{r7}
 801ac84:	4770      	bx	lr
 801ac86:	bf00      	nop

0801ac88 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801ac88:	b480      	push	{r7}
 801ac8a:	b085      	sub	sp, #20
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
 801ac90:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801ac92:	f04f 0300 	mov.w	r3, #0
 801ac96:	817b      	strh	r3, [r7, #10]
 801ac98:	f04f 0300 	mov.w	r3, #0
 801ac9c:	81fb      	strh	r3, [r7, #14]
 801ac9e:	f04f 0300 	mov.w	r3, #0
 801aca2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	8c1b      	ldrh	r3, [r3, #32]
 801aca8:	b29b      	uxth	r3, r3
 801acaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801acae:	b29a      	uxth	r2, r3
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	8c1b      	ldrh	r3, [r3, #32]
 801acb8:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	889b      	ldrh	r3, [r3, #4]
 801acbe:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	8b9b      	ldrh	r3, [r3, #28]
 801acc4:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 801acc6:	897b      	ldrh	r3, [r7, #10]
 801acc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801accc:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 801acce:	897b      	ldrh	r3, [r7, #10]
 801acd0:	f023 0303 	bic.w	r3, r3, #3
 801acd4:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801acd6:	683b      	ldr	r3, [r7, #0]
 801acd8:	881a      	ldrh	r2, [r3, #0]
 801acda:	897b      	ldrh	r3, [r7, #10]
 801acdc:	4313      	orrs	r3, r2
 801acde:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 801ace0:	89fb      	ldrh	r3, [r7, #14]
 801ace2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ace6:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 801ace8:	683b      	ldr	r3, [r7, #0]
 801acea:	899b      	ldrh	r3, [r3, #12]
 801acec:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801acf0:	b29a      	uxth	r2, r3
 801acf2:	89fb      	ldrh	r3, [r7, #14]
 801acf4:	4313      	orrs	r3, r2
 801acf6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 801acf8:	683b      	ldr	r3, [r7, #0]
 801acfa:	885b      	ldrh	r3, [r3, #2]
 801acfc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801ad00:	b29a      	uxth	r2, r3
 801ad02:	89fb      	ldrh	r3, [r7, #14]
 801ad04:	4313      	orrs	r3, r2
 801ad06:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801ad08:	687a      	ldr	r2, [r7, #4]
 801ad0a:	f04f 0300 	mov.w	r3, #0
 801ad0e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d006      	beq.n	801ad24 <TIM_OC3Init+0x9c>
 801ad16:	687a      	ldr	r2, [r7, #4]
 801ad18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801ad20:	429a      	cmp	r2, r3
 801ad22:	d12f      	bne.n	801ad84 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 801ad24:	89fb      	ldrh	r3, [r7, #14]
 801ad26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ad2a:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 801ad2c:	683b      	ldr	r3, [r7, #0]
 801ad2e:	89db      	ldrh	r3, [r3, #14]
 801ad30:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801ad34:	b29a      	uxth	r2, r3
 801ad36:	89fb      	ldrh	r3, [r7, #14]
 801ad38:	4313      	orrs	r3, r2
 801ad3a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 801ad3c:	89fb      	ldrh	r3, [r7, #14]
 801ad3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ad42:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 801ad44:	683b      	ldr	r3, [r7, #0]
 801ad46:	889b      	ldrh	r3, [r3, #4]
 801ad48:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801ad4c:	b29a      	uxth	r2, r3
 801ad4e:	89fb      	ldrh	r3, [r7, #14]
 801ad50:	4313      	orrs	r3, r2
 801ad52:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 801ad54:	89bb      	ldrh	r3, [r7, #12]
 801ad56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad5a:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 801ad5c:	89bb      	ldrh	r3, [r7, #12]
 801ad5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ad62:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 801ad64:	683b      	ldr	r3, [r7, #0]
 801ad66:	8a1b      	ldrh	r3, [r3, #16]
 801ad68:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801ad6c:	b29a      	uxth	r2, r3
 801ad6e:	89bb      	ldrh	r3, [r7, #12]
 801ad70:	4313      	orrs	r3, r2
 801ad72:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 801ad74:	683b      	ldr	r3, [r7, #0]
 801ad76:	8a5b      	ldrh	r3, [r3, #18]
 801ad78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801ad7c:	b29a      	uxth	r2, r3
 801ad7e:	89bb      	ldrh	r3, [r7, #12]
 801ad80:	4313      	orrs	r3, r2
 801ad82:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	89ba      	ldrh	r2, [r7, #12]
 801ad88:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	897a      	ldrh	r2, [r7, #10]
 801ad8e:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 801ad90:	683b      	ldr	r3, [r7, #0]
 801ad92:	689a      	ldr	r2, [r3, #8]
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	89fa      	ldrh	r2, [r7, #14]
 801ad9c:	841a      	strh	r2, [r3, #32]
}
 801ad9e:	f107 0714 	add.w	r7, r7, #20
 801ada2:	46bd      	mov	sp, r7
 801ada4:	bc80      	pop	{r7}
 801ada6:	4770      	bx	lr

0801ada8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801ada8:	b480      	push	{r7}
 801adaa:	b085      	sub	sp, #20
 801adac:	af00      	add	r7, sp, #0
 801adae:	6078      	str	r0, [r7, #4]
 801adb0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801adb2:	f04f 0300 	mov.w	r3, #0
 801adb6:	81bb      	strh	r3, [r7, #12]
 801adb8:	f04f 0300 	mov.w	r3, #0
 801adbc:	817b      	strh	r3, [r7, #10]
 801adbe:	f04f 0300 	mov.w	r3, #0
 801adc2:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	8c1b      	ldrh	r3, [r3, #32]
 801adc8:	b29b      	uxth	r3, r3
 801adca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801adce:	b29a      	uxth	r2, r3
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	8c1b      	ldrh	r3, [r3, #32]
 801add8:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	889b      	ldrh	r3, [r3, #4]
 801adde:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	8b9b      	ldrh	r3, [r3, #28]
 801ade4:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 801ade6:	89bb      	ldrh	r3, [r7, #12]
 801ade8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801adec:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 801adee:	89bb      	ldrh	r3, [r7, #12]
 801adf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801adf4:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801adf6:	683b      	ldr	r3, [r7, #0]
 801adf8:	881b      	ldrh	r3, [r3, #0]
 801adfa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801adfe:	b29a      	uxth	r2, r3
 801ae00:	89bb      	ldrh	r3, [r7, #12]
 801ae02:	4313      	orrs	r3, r2
 801ae04:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 801ae06:	897b      	ldrh	r3, [r7, #10]
 801ae08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ae0c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 801ae0e:	683b      	ldr	r3, [r7, #0]
 801ae10:	899b      	ldrh	r3, [r3, #12]
 801ae12:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801ae16:	b29a      	uxth	r2, r3
 801ae18:	897b      	ldrh	r3, [r7, #10]
 801ae1a:	4313      	orrs	r3, r2
 801ae1c:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 801ae1e:	683b      	ldr	r3, [r7, #0]
 801ae20:	885b      	ldrh	r3, [r3, #2]
 801ae22:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801ae26:	b29a      	uxth	r2, r3
 801ae28:	897b      	ldrh	r3, [r7, #10]
 801ae2a:	4313      	orrs	r3, r2
 801ae2c:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801ae2e:	687a      	ldr	r2, [r7, #4]
 801ae30:	f04f 0300 	mov.w	r3, #0
 801ae34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801ae38:	429a      	cmp	r2, r3
 801ae3a:	d006      	beq.n	801ae4a <TIM_OC4Init+0xa2>
 801ae3c:	687a      	ldr	r2, [r7, #4]
 801ae3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ae42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801ae46:	429a      	cmp	r2, r3
 801ae48:	d10b      	bne.n	801ae62 <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 801ae4a:	89fb      	ldrh	r3, [r7, #14]
 801ae4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ae50:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 801ae52:	683b      	ldr	r3, [r7, #0]
 801ae54:	8a1b      	ldrh	r3, [r3, #16]
 801ae56:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801ae5a:	b29a      	uxth	r2, r3
 801ae5c:	89fb      	ldrh	r3, [r7, #14]
 801ae5e:	4313      	orrs	r3, r2
 801ae60:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	89fa      	ldrh	r2, [r7, #14]
 801ae66:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	89ba      	ldrh	r2, [r7, #12]
 801ae6c:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 801ae6e:	683b      	ldr	r3, [r7, #0]
 801ae70:	689a      	ldr	r2, [r3, #8]
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	897a      	ldrh	r2, [r7, #10]
 801ae7a:	841a      	strh	r2, [r3, #32]
}
 801ae7c:	f107 0714 	add.w	r7, r7, #20
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bc80      	pop	{r7}
 801ae84:	4770      	bx	lr
 801ae86:	bf00      	nop

0801ae88 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801ae88:	b480      	push	{r7}
 801ae8a:	b083      	sub	sp, #12
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	f04f 0200 	mov.w	r2, #0
 801ae96:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	f04f 0200 	mov.w	r2, #0
 801ae9e:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	f04f 0200 	mov.w	r2, #0
 801aea6:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	f04f 0200 	mov.w	r2, #0
 801aeae:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	f04f 0200 	mov.w	r2, #0
 801aeb6:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	f04f 0200 	mov.w	r2, #0
 801aebe:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	f04f 0200 	mov.w	r2, #0
 801aec6:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	f04f 0200 	mov.w	r2, #0
 801aece:	825a      	strh	r2, [r3, #18]
}
 801aed0:	f107 070c 	add.w	r7, r7, #12
 801aed4:	46bd      	mov	sp, r7
 801aed6:	bc80      	pop	{r7}
 801aed8:	4770      	bx	lr
 801aeda:	bf00      	nop

0801aedc <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 801aedc:	b480      	push	{r7}
 801aede:	b085      	sub	sp, #20
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	6078      	str	r0, [r7, #4]
 801aee4:	4613      	mov	r3, r2
 801aee6:	460a      	mov	r2, r1
 801aee8:	807a      	strh	r2, [r7, #2]
 801aeea:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 801aeec:	f04f 0300 	mov.w	r3, #0
 801aef0:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 801aef2:	f04f 0300 	mov.w	r3, #0
 801aef6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	f103 0318 	add.w	r3, r3, #24
 801af02:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 801af04:	887b      	ldrh	r3, [r7, #2]
 801af06:	f04f 0201 	mov.w	r2, #1
 801af0a:	fa02 f303 	lsl.w	r3, r2, r3
 801af0e:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	8c1b      	ldrh	r3, [r3, #32]
 801af14:	b29a      	uxth	r2, r3
 801af16:	897b      	ldrh	r3, [r7, #10]
 801af18:	ea6f 0303 	mvn.w	r3, r3
 801af1c:	b29b      	uxth	r3, r3
 801af1e:	4013      	ands	r3, r2
 801af20:	b29a      	uxth	r2, r3
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 801af26:	887b      	ldrh	r3, [r7, #2]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d002      	beq.n	801af32 <TIM_SelectOCxM+0x56>
 801af2c:	887b      	ldrh	r3, [r7, #2]
 801af2e:	2b08      	cmp	r3, #8
 801af30:	d114      	bne.n	801af5c <TIM_SelectOCxM+0x80>
  {
    tmp += (TIM_Channel>>1);
 801af32:	887b      	ldrh	r3, [r7, #2]
 801af34:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801af38:	b29b      	uxth	r3, r3
 801af3a:	68fa      	ldr	r2, [r7, #12]
 801af3c:	18d3      	adds	r3, r2, r3
 801af3e:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 801af40:	68fa      	ldr	r2, [r7, #12]
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	6819      	ldr	r1, [r3, #0]
 801af46:	f64f 738f 	movw	r3, #65423	; 0xff8f
 801af4a:	400b      	ands	r3, r1
 801af4c:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	68fa      	ldr	r2, [r7, #12]
 801af52:	6811      	ldr	r1, [r2, #0]
 801af54:	883a      	ldrh	r2, [r7, #0]
 801af56:	430a      	orrs	r2, r1
 801af58:	601a      	str	r2, [r3, #0]
 801af5a:	e019      	b.n	801af90 <TIM_SelectOCxM+0xb4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 801af5c:	887b      	ldrh	r3, [r7, #2]
 801af5e:	f1a3 0304 	sub.w	r3, r3, #4
 801af62:	b29b      	uxth	r3, r3
 801af64:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801af68:	b29b      	uxth	r3, r3
 801af6a:	68fa      	ldr	r2, [r7, #12]
 801af6c:	18d3      	adds	r3, r2, r3
 801af6e:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 801af70:	68fa      	ldr	r2, [r7, #12]
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	6819      	ldr	r1, [r3, #0]
 801af76:	f648 73ff 	movw	r3, #36863	; 0x8fff
 801af7a:	400b      	ands	r3, r1
 801af7c:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	68fa      	ldr	r2, [r7, #12]
 801af82:	6811      	ldr	r1, [r2, #0]
 801af84:	883a      	ldrh	r2, [r7, #0]
 801af86:	ea4f 2202 	mov.w	r2, r2, lsl #8
 801af8a:	b292      	uxth	r2, r2
 801af8c:	430a      	orrs	r2, r1
 801af8e:	601a      	str	r2, [r3, #0]
  }
}
 801af90:	f107 0714 	add.w	r7, r7, #20
 801af94:	46bd      	mov	sp, r7
 801af96:	bc80      	pop	{r7}
 801af98:	4770      	bx	lr
 801af9a:	bf00      	nop

0801af9c <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 801af9c:	b480      	push	{r7}
 801af9e:	b083      	sub	sp, #12
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	6078      	str	r0, [r7, #4]
 801afa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	683a      	ldr	r2, [r7, #0]
 801afaa:	635a      	str	r2, [r3, #52]	; 0x34
}
 801afac:	f107 070c 	add.w	r7, r7, #12
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bc80      	pop	{r7}
 801afb4:	4770      	bx	lr
 801afb6:	bf00      	nop

0801afb8 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 801afb8:	b480      	push	{r7}
 801afba:	b083      	sub	sp, #12
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	683a      	ldr	r2, [r7, #0]
 801afc6:	639a      	str	r2, [r3, #56]	; 0x38
}
 801afc8:	f107 070c 	add.w	r7, r7, #12
 801afcc:	46bd      	mov	sp, r7
 801afce:	bc80      	pop	{r7}
 801afd0:	4770      	bx	lr
 801afd2:	bf00      	nop

0801afd4 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 801afd4:	b480      	push	{r7}
 801afd6:	b083      	sub	sp, #12
 801afd8:	af00      	add	r7, sp, #0
 801afda:	6078      	str	r0, [r7, #4]
 801afdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	683a      	ldr	r2, [r7, #0]
 801afe2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801afe4:	f107 070c 	add.w	r7, r7, #12
 801afe8:	46bd      	mov	sp, r7
 801afea:	bc80      	pop	{r7}
 801afec:	4770      	bx	lr
 801afee:	bf00      	nop

0801aff0 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 801aff0:	b480      	push	{r7}
 801aff2:	b083      	sub	sp, #12
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
 801aff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	683a      	ldr	r2, [r7, #0]
 801affe:	641a      	str	r2, [r3, #64]	; 0x40
}
 801b000:	f107 070c 	add.w	r7, r7, #12
 801b004:	46bd      	mov	sp, r7
 801b006:	bc80      	pop	{r7}
 801b008:	4770      	bx	lr
 801b00a:	bf00      	nop

0801b00c <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801b00c:	b480      	push	{r7}
 801b00e:	b085      	sub	sp, #20
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
 801b014:	460b      	mov	r3, r1
 801b016:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801b018:	f04f 0300 	mov.w	r3, #0
 801b01c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	8b1b      	ldrh	r3, [r3, #24]
 801b022:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 801b024:	89fb      	ldrh	r3, [r7, #14]
 801b026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b02a:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 801b02c:	89fa      	ldrh	r2, [r7, #14]
 801b02e:	887b      	ldrh	r3, [r7, #2]
 801b030:	4313      	orrs	r3, r2
 801b032:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	89fa      	ldrh	r2, [r7, #14]
 801b038:	831a      	strh	r2, [r3, #24]
}
 801b03a:	f107 0714 	add.w	r7, r7, #20
 801b03e:	46bd      	mov	sp, r7
 801b040:	bc80      	pop	{r7}
 801b042:	4770      	bx	lr

0801b044 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801b044:	b480      	push	{r7}
 801b046:	b085      	sub	sp, #20
 801b048:	af00      	add	r7, sp, #0
 801b04a:	6078      	str	r0, [r7, #4]
 801b04c:	460b      	mov	r3, r1
 801b04e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801b050:	f04f 0300 	mov.w	r3, #0
 801b054:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	8b1b      	ldrh	r3, [r3, #24]
 801b05a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 801b05c:	89fb      	ldrh	r3, [r7, #14]
 801b05e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b062:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 801b064:	887b      	ldrh	r3, [r7, #2]
 801b066:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b06a:	b29a      	uxth	r2, r3
 801b06c:	89fb      	ldrh	r3, [r7, #14]
 801b06e:	4313      	orrs	r3, r2
 801b070:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	89fa      	ldrh	r2, [r7, #14]
 801b076:	831a      	strh	r2, [r3, #24]
}
 801b078:	f107 0714 	add.w	r7, r7, #20
 801b07c:	46bd      	mov	sp, r7
 801b07e:	bc80      	pop	{r7}
 801b080:	4770      	bx	lr
 801b082:	bf00      	nop

0801b084 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801b084:	b480      	push	{r7}
 801b086:	b085      	sub	sp, #20
 801b088:	af00      	add	r7, sp, #0
 801b08a:	6078      	str	r0, [r7, #4]
 801b08c:	460b      	mov	r3, r1
 801b08e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801b090:	f04f 0300 	mov.w	r3, #0
 801b094:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	8b9b      	ldrh	r3, [r3, #28]
 801b09a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 801b09c:	89fb      	ldrh	r3, [r7, #14]
 801b09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b0a2:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 801b0a4:	89fa      	ldrh	r2, [r7, #14]
 801b0a6:	887b      	ldrh	r3, [r7, #2]
 801b0a8:	4313      	orrs	r3, r2
 801b0aa:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	89fa      	ldrh	r2, [r7, #14]
 801b0b0:	839a      	strh	r2, [r3, #28]
}
 801b0b2:	f107 0714 	add.w	r7, r7, #20
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bc80      	pop	{r7}
 801b0ba:	4770      	bx	lr

0801b0bc <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 801b0bc:	b480      	push	{r7}
 801b0be:	b085      	sub	sp, #20
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
 801b0c4:	460b      	mov	r3, r1
 801b0c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801b0c8:	f04f 0300 	mov.w	r3, #0
 801b0cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	8b9b      	ldrh	r3, [r3, #28]
 801b0d2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 801b0d4:	89fb      	ldrh	r3, [r7, #14]
 801b0d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b0da:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 801b0dc:	887b      	ldrh	r3, [r7, #2]
 801b0de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b0e2:	b29a      	uxth	r2, r3
 801b0e4:	89fb      	ldrh	r3, [r7, #14]
 801b0e6:	4313      	orrs	r3, r2
 801b0e8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	89fa      	ldrh	r2, [r7, #14]
 801b0ee:	839a      	strh	r2, [r3, #28]
}
 801b0f0:	f107 0714 	add.w	r7, r7, #20
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bc80      	pop	{r7}
 801b0f8:	4770      	bx	lr
 801b0fa:	bf00      	nop

0801b0fc <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801b0fc:	b480      	push	{r7}
 801b0fe:	b085      	sub	sp, #20
 801b100:	af00      	add	r7, sp, #0
 801b102:	6078      	str	r0, [r7, #4]
 801b104:	460b      	mov	r3, r1
 801b106:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801b108:	f04f 0300 	mov.w	r3, #0
 801b10c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	8b1b      	ldrh	r3, [r3, #24]
 801b112:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 801b114:	89fb      	ldrh	r3, [r7, #14]
 801b116:	f023 0308 	bic.w	r3, r3, #8
 801b11a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 801b11c:	89fa      	ldrh	r2, [r7, #14]
 801b11e:	887b      	ldrh	r3, [r7, #2]
 801b120:	4313      	orrs	r3, r2
 801b122:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	89fa      	ldrh	r2, [r7, #14]
 801b128:	831a      	strh	r2, [r3, #24]
}
 801b12a:	f107 0714 	add.w	r7, r7, #20
 801b12e:	46bd      	mov	sp, r7
 801b130:	bc80      	pop	{r7}
 801b132:	4770      	bx	lr

0801b134 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801b134:	b480      	push	{r7}
 801b136:	b085      	sub	sp, #20
 801b138:	af00      	add	r7, sp, #0
 801b13a:	6078      	str	r0, [r7, #4]
 801b13c:	460b      	mov	r3, r1
 801b13e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801b140:	f04f 0300 	mov.w	r3, #0
 801b144:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	8b1b      	ldrh	r3, [r3, #24]
 801b14a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 801b14c:	89fb      	ldrh	r3, [r7, #14]
 801b14e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b152:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 801b154:	887b      	ldrh	r3, [r7, #2]
 801b156:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b15a:	b29a      	uxth	r2, r3
 801b15c:	89fb      	ldrh	r3, [r7, #14]
 801b15e:	4313      	orrs	r3, r2
 801b160:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	89fa      	ldrh	r2, [r7, #14]
 801b166:	831a      	strh	r2, [r3, #24]
}
 801b168:	f107 0714 	add.w	r7, r7, #20
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bc80      	pop	{r7}
 801b170:	4770      	bx	lr
 801b172:	bf00      	nop

0801b174 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801b174:	b480      	push	{r7}
 801b176:	b085      	sub	sp, #20
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
 801b17c:	460b      	mov	r3, r1
 801b17e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801b180:	f04f 0300 	mov.w	r3, #0
 801b184:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	8b9b      	ldrh	r3, [r3, #28]
 801b18a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 801b18c:	89fb      	ldrh	r3, [r7, #14]
 801b18e:	f023 0308 	bic.w	r3, r3, #8
 801b192:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 801b194:	89fa      	ldrh	r2, [r7, #14]
 801b196:	887b      	ldrh	r3, [r7, #2]
 801b198:	4313      	orrs	r3, r2
 801b19a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	89fa      	ldrh	r2, [r7, #14]
 801b1a0:	839a      	strh	r2, [r3, #28]
}
 801b1a2:	f107 0714 	add.w	r7, r7, #20
 801b1a6:	46bd      	mov	sp, r7
 801b1a8:	bc80      	pop	{r7}
 801b1aa:	4770      	bx	lr

0801b1ac <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 801b1ac:	b480      	push	{r7}
 801b1ae:	b085      	sub	sp, #20
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	6078      	str	r0, [r7, #4]
 801b1b4:	460b      	mov	r3, r1
 801b1b6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801b1b8:	f04f 0300 	mov.w	r3, #0
 801b1bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	8b9b      	ldrh	r3, [r3, #28]
 801b1c2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 801b1c4:	89fb      	ldrh	r3, [r7, #14]
 801b1c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b1ca:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 801b1cc:	887b      	ldrh	r3, [r7, #2]
 801b1ce:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b1d2:	b29a      	uxth	r2, r3
 801b1d4:	89fb      	ldrh	r3, [r7, #14]
 801b1d6:	4313      	orrs	r3, r2
 801b1d8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	89fa      	ldrh	r2, [r7, #14]
 801b1de:	839a      	strh	r2, [r3, #28]
}
 801b1e0:	f107 0714 	add.w	r7, r7, #20
 801b1e4:	46bd      	mov	sp, r7
 801b1e6:	bc80      	pop	{r7}
 801b1e8:	4770      	bx	lr
 801b1ea:	bf00      	nop

0801b1ec <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801b1ec:	b480      	push	{r7}
 801b1ee:	b085      	sub	sp, #20
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
 801b1f4:	460b      	mov	r3, r1
 801b1f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801b1f8:	f04f 0300 	mov.w	r3, #0
 801b1fc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	8b1b      	ldrh	r3, [r3, #24]
 801b202:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 801b204:	89fb      	ldrh	r3, [r7, #14]
 801b206:	f023 0304 	bic.w	r3, r3, #4
 801b20a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 801b20c:	89fa      	ldrh	r2, [r7, #14]
 801b20e:	887b      	ldrh	r3, [r7, #2]
 801b210:	4313      	orrs	r3, r2
 801b212:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	89fa      	ldrh	r2, [r7, #14]
 801b218:	831a      	strh	r2, [r3, #24]
}
 801b21a:	f107 0714 	add.w	r7, r7, #20
 801b21e:	46bd      	mov	sp, r7
 801b220:	bc80      	pop	{r7}
 801b222:	4770      	bx	lr

0801b224 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801b224:	b480      	push	{r7}
 801b226:	b085      	sub	sp, #20
 801b228:	af00      	add	r7, sp, #0
 801b22a:	6078      	str	r0, [r7, #4]
 801b22c:	460b      	mov	r3, r1
 801b22e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801b230:	f04f 0300 	mov.w	r3, #0
 801b234:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	8b1b      	ldrh	r3, [r3, #24]
 801b23a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 801b23c:	89fb      	ldrh	r3, [r7, #14]
 801b23e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b242:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 801b244:	887b      	ldrh	r3, [r7, #2]
 801b246:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b24a:	b29a      	uxth	r2, r3
 801b24c:	89fb      	ldrh	r3, [r7, #14]
 801b24e:	4313      	orrs	r3, r2
 801b250:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	89fa      	ldrh	r2, [r7, #14]
 801b256:	831a      	strh	r2, [r3, #24]
}
 801b258:	f107 0714 	add.w	r7, r7, #20
 801b25c:	46bd      	mov	sp, r7
 801b25e:	bc80      	pop	{r7}
 801b260:	4770      	bx	lr
 801b262:	bf00      	nop

0801b264 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801b264:	b480      	push	{r7}
 801b266:	b085      	sub	sp, #20
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
 801b26c:	460b      	mov	r3, r1
 801b26e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801b270:	f04f 0300 	mov.w	r3, #0
 801b274:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	8b9b      	ldrh	r3, [r3, #28]
 801b27a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 801b27c:	89fb      	ldrh	r3, [r7, #14]
 801b27e:	f023 0304 	bic.w	r3, r3, #4
 801b282:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 801b284:	89fa      	ldrh	r2, [r7, #14]
 801b286:	887b      	ldrh	r3, [r7, #2]
 801b288:	4313      	orrs	r3, r2
 801b28a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	89fa      	ldrh	r2, [r7, #14]
 801b290:	839a      	strh	r2, [r3, #28]
}
 801b292:	f107 0714 	add.w	r7, r7, #20
 801b296:	46bd      	mov	sp, r7
 801b298:	bc80      	pop	{r7}
 801b29a:	4770      	bx	lr

0801b29c <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801b29c:	b480      	push	{r7}
 801b29e:	b085      	sub	sp, #20
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]
 801b2a4:	460b      	mov	r3, r1
 801b2a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801b2a8:	f04f 0300 	mov.w	r3, #0
 801b2ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	8b9b      	ldrh	r3, [r3, #28]
 801b2b2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 801b2b4:	89fb      	ldrh	r3, [r7, #14]
 801b2b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b2ba:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 801b2bc:	887b      	ldrh	r3, [r7, #2]
 801b2be:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b2c2:	b29a      	uxth	r2, r3
 801b2c4:	89fb      	ldrh	r3, [r7, #14]
 801b2c6:	4313      	orrs	r3, r2
 801b2c8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	89fa      	ldrh	r2, [r7, #14]
 801b2ce:	839a      	strh	r2, [r3, #28]
}
 801b2d0:	f107 0714 	add.w	r7, r7, #20
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	bc80      	pop	{r7}
 801b2d8:	4770      	bx	lr
 801b2da:	bf00      	nop

0801b2dc <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801b2dc:	b480      	push	{r7}
 801b2de:	b085      	sub	sp, #20
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	6078      	str	r0, [r7, #4]
 801b2e4:	460b      	mov	r3, r1
 801b2e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801b2e8:	f04f 0300 	mov.w	r3, #0
 801b2ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	8b1b      	ldrh	r3, [r3, #24]
 801b2f2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 801b2f4:	89fb      	ldrh	r3, [r7, #14]
 801b2f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b2fa:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 801b2fc:	89fa      	ldrh	r2, [r7, #14]
 801b2fe:	887b      	ldrh	r3, [r7, #2]
 801b300:	4313      	orrs	r3, r2
 801b302:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	89fa      	ldrh	r2, [r7, #14]
 801b308:	831a      	strh	r2, [r3, #24]
}
 801b30a:	f107 0714 	add.w	r7, r7, #20
 801b30e:	46bd      	mov	sp, r7
 801b310:	bc80      	pop	{r7}
 801b312:	4770      	bx	lr

0801b314 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801b314:	b480      	push	{r7}
 801b316:	b085      	sub	sp, #20
 801b318:	af00      	add	r7, sp, #0
 801b31a:	6078      	str	r0, [r7, #4]
 801b31c:	460b      	mov	r3, r1
 801b31e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801b320:	f04f 0300 	mov.w	r3, #0
 801b324:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	8b1b      	ldrh	r3, [r3, #24]
 801b32a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 801b32c:	89fb      	ldrh	r3, [r7, #14]
 801b32e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 801b332:	ea4f 4353 	mov.w	r3, r3, lsr #17
 801b336:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 801b338:	887b      	ldrh	r3, [r7, #2]
 801b33a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b33e:	b29a      	uxth	r2, r3
 801b340:	89fb      	ldrh	r3, [r7, #14]
 801b342:	4313      	orrs	r3, r2
 801b344:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	89fa      	ldrh	r2, [r7, #14]
 801b34a:	831a      	strh	r2, [r3, #24]
}
 801b34c:	f107 0714 	add.w	r7, r7, #20
 801b350:	46bd      	mov	sp, r7
 801b352:	bc80      	pop	{r7}
 801b354:	4770      	bx	lr
 801b356:	bf00      	nop

0801b358 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801b358:	b480      	push	{r7}
 801b35a:	b085      	sub	sp, #20
 801b35c:	af00      	add	r7, sp, #0
 801b35e:	6078      	str	r0, [r7, #4]
 801b360:	460b      	mov	r3, r1
 801b362:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801b364:	f04f 0300 	mov.w	r3, #0
 801b368:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	8b9b      	ldrh	r3, [r3, #28]
 801b36e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 801b370:	89fb      	ldrh	r3, [r7, #14]
 801b372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b376:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 801b378:	89fa      	ldrh	r2, [r7, #14]
 801b37a:	887b      	ldrh	r3, [r7, #2]
 801b37c:	4313      	orrs	r3, r2
 801b37e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	89fa      	ldrh	r2, [r7, #14]
 801b384:	839a      	strh	r2, [r3, #28]
}
 801b386:	f107 0714 	add.w	r7, r7, #20
 801b38a:	46bd      	mov	sp, r7
 801b38c:	bc80      	pop	{r7}
 801b38e:	4770      	bx	lr

0801b390 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801b390:	b480      	push	{r7}
 801b392:	b085      	sub	sp, #20
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
 801b398:	460b      	mov	r3, r1
 801b39a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801b39c:	f04f 0300 	mov.w	r3, #0
 801b3a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	8b9b      	ldrh	r3, [r3, #28]
 801b3a6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 801b3a8:	89fb      	ldrh	r3, [r7, #14]
 801b3aa:	ea4f 4343 	mov.w	r3, r3, lsl #17
 801b3ae:	ea4f 4353 	mov.w	r3, r3, lsr #17
 801b3b2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 801b3b4:	887b      	ldrh	r3, [r7, #2]
 801b3b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b3ba:	b29a      	uxth	r2, r3
 801b3bc:	89fb      	ldrh	r3, [r7, #14]
 801b3be:	4313      	orrs	r3, r2
 801b3c0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	89fa      	ldrh	r2, [r7, #14]
 801b3c6:	839a      	strh	r2, [r3, #28]
}
 801b3c8:	f107 0714 	add.w	r7, r7, #20
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	bc80      	pop	{r7}
 801b3d0:	4770      	bx	lr
 801b3d2:	bf00      	nop

0801b3d4 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801b3d4:	b480      	push	{r7}
 801b3d6:	b085      	sub	sp, #20
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
 801b3dc:	460b      	mov	r3, r1
 801b3de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801b3e0:	f04f 0300 	mov.w	r3, #0
 801b3e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	8c1b      	ldrh	r3, [r3, #32]
 801b3ea:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 801b3ec:	89fb      	ldrh	r3, [r7, #14]
 801b3ee:	f023 0302 	bic.w	r3, r3, #2
 801b3f2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 801b3f4:	89fa      	ldrh	r2, [r7, #14]
 801b3f6:	887b      	ldrh	r3, [r7, #2]
 801b3f8:	4313      	orrs	r3, r2
 801b3fa:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	89fa      	ldrh	r2, [r7, #14]
 801b400:	841a      	strh	r2, [r3, #32]
}
 801b402:	f107 0714 	add.w	r7, r7, #20
 801b406:	46bd      	mov	sp, r7
 801b408:	bc80      	pop	{r7}
 801b40a:	4770      	bx	lr

0801b40c <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 801b40c:	b480      	push	{r7}
 801b40e:	b085      	sub	sp, #20
 801b410:	af00      	add	r7, sp, #0
 801b412:	6078      	str	r0, [r7, #4]
 801b414:	460b      	mov	r3, r1
 801b416:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801b418:	f04f 0300 	mov.w	r3, #0
 801b41c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	8c1b      	ldrh	r3, [r3, #32]
 801b422:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 801b424:	89fb      	ldrh	r3, [r7, #14]
 801b426:	f023 0308 	bic.w	r3, r3, #8
 801b42a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 801b42c:	89fa      	ldrh	r2, [r7, #14]
 801b42e:	887b      	ldrh	r3, [r7, #2]
 801b430:	4313      	orrs	r3, r2
 801b432:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	89fa      	ldrh	r2, [r7, #14]
 801b438:	841a      	strh	r2, [r3, #32]
}
 801b43a:	f107 0714 	add.w	r7, r7, #20
 801b43e:	46bd      	mov	sp, r7
 801b440:	bc80      	pop	{r7}
 801b442:	4770      	bx	lr

0801b444 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801b444:	b480      	push	{r7}
 801b446:	b085      	sub	sp, #20
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
 801b44c:	460b      	mov	r3, r1
 801b44e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801b450:	f04f 0300 	mov.w	r3, #0
 801b454:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	8c1b      	ldrh	r3, [r3, #32]
 801b45a:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 801b45c:	89fb      	ldrh	r3, [r7, #14]
 801b45e:	f023 0320 	bic.w	r3, r3, #32
 801b462:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 801b464:	887b      	ldrh	r3, [r7, #2]
 801b466:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801b46a:	b29a      	uxth	r2, r3
 801b46c:	89fb      	ldrh	r3, [r7, #14]
 801b46e:	4313      	orrs	r3, r2
 801b470:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	89fa      	ldrh	r2, [r7, #14]
 801b476:	841a      	strh	r2, [r3, #32]
}
 801b478:	f107 0714 	add.w	r7, r7, #20
 801b47c:	46bd      	mov	sp, r7
 801b47e:	bc80      	pop	{r7}
 801b480:	4770      	bx	lr
 801b482:	bf00      	nop

0801b484 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 801b484:	b480      	push	{r7}
 801b486:	b085      	sub	sp, #20
 801b488:	af00      	add	r7, sp, #0
 801b48a:	6078      	str	r0, [r7, #4]
 801b48c:	460b      	mov	r3, r1
 801b48e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801b490:	f04f 0300 	mov.w	r3, #0
 801b494:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	8c1b      	ldrh	r3, [r3, #32]
 801b49a:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 801b49c:	89fb      	ldrh	r3, [r7, #14]
 801b49e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b4a2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 801b4a4:	887b      	ldrh	r3, [r7, #2]
 801b4a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801b4aa:	b29a      	uxth	r2, r3
 801b4ac:	89fb      	ldrh	r3, [r7, #14]
 801b4ae:	4313      	orrs	r3, r2
 801b4b0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	89fa      	ldrh	r2, [r7, #14]
 801b4b6:	841a      	strh	r2, [r3, #32]
}
 801b4b8:	f107 0714 	add.w	r7, r7, #20
 801b4bc:	46bd      	mov	sp, r7
 801b4be:	bc80      	pop	{r7}
 801b4c0:	4770      	bx	lr
 801b4c2:	bf00      	nop

0801b4c4 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801b4c4:	b480      	push	{r7}
 801b4c6:	b085      	sub	sp, #20
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
 801b4cc:	460b      	mov	r3, r1
 801b4ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801b4d0:	f04f 0300 	mov.w	r3, #0
 801b4d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	8c1b      	ldrh	r3, [r3, #32]
 801b4da:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 801b4dc:	89fb      	ldrh	r3, [r7, #14]
 801b4de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b4e2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 801b4e4:	887b      	ldrh	r3, [r7, #2]
 801b4e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b4ea:	b29a      	uxth	r2, r3
 801b4ec:	89fb      	ldrh	r3, [r7, #14]
 801b4ee:	4313      	orrs	r3, r2
 801b4f0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	89fa      	ldrh	r2, [r7, #14]
 801b4f6:	841a      	strh	r2, [r3, #32]
}
 801b4f8:	f107 0714 	add.w	r7, r7, #20
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	bc80      	pop	{r7}
 801b500:	4770      	bx	lr
 801b502:	bf00      	nop

0801b504 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 801b504:	b480      	push	{r7}
 801b506:	b085      	sub	sp, #20
 801b508:	af00      	add	r7, sp, #0
 801b50a:	6078      	str	r0, [r7, #4]
 801b50c:	460b      	mov	r3, r1
 801b50e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801b510:	f04f 0300 	mov.w	r3, #0
 801b514:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	8c1b      	ldrh	r3, [r3, #32]
 801b51a:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 801b51c:	89fb      	ldrh	r3, [r7, #14]
 801b51e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b522:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 801b524:	887b      	ldrh	r3, [r7, #2]
 801b526:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b52a:	b29a      	uxth	r2, r3
 801b52c:	89fb      	ldrh	r3, [r7, #14]
 801b52e:	4313      	orrs	r3, r2
 801b530:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	89fa      	ldrh	r2, [r7, #14]
 801b536:	841a      	strh	r2, [r3, #32]
}
 801b538:	f107 0714 	add.w	r7, r7, #20
 801b53c:	46bd      	mov	sp, r7
 801b53e:	bc80      	pop	{r7}
 801b540:	4770      	bx	lr
 801b542:	bf00      	nop

0801b544 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 801b544:	b480      	push	{r7}
 801b546:	b085      	sub	sp, #20
 801b548:	af00      	add	r7, sp, #0
 801b54a:	6078      	str	r0, [r7, #4]
 801b54c:	460b      	mov	r3, r1
 801b54e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801b550:	f04f 0300 	mov.w	r3, #0
 801b554:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	8c1b      	ldrh	r3, [r3, #32]
 801b55a:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 801b55c:	89fb      	ldrh	r3, [r7, #14]
 801b55e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b562:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 801b564:	887b      	ldrh	r3, [r7, #2]
 801b566:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801b56a:	b29a      	uxth	r2, r3
 801b56c:	89fb      	ldrh	r3, [r7, #14]
 801b56e:	4313      	orrs	r3, r2
 801b570:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	89fa      	ldrh	r2, [r7, #14]
 801b576:	841a      	strh	r2, [r3, #32]
}
 801b578:	f107 0714 	add.w	r7, r7, #20
 801b57c:	46bd      	mov	sp, r7
 801b57e:	bc80      	pop	{r7}
 801b580:	4770      	bx	lr
 801b582:	bf00      	nop

0801b584 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 801b584:	b480      	push	{r7}
 801b586:	b085      	sub	sp, #20
 801b588:	af00      	add	r7, sp, #0
 801b58a:	6078      	str	r0, [r7, #4]
 801b58c:	4613      	mov	r3, r2
 801b58e:	460a      	mov	r2, r1
 801b590:	807a      	strh	r2, [r7, #2]
 801b592:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 801b594:	f04f 0300 	mov.w	r3, #0
 801b598:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 801b59a:	887b      	ldrh	r3, [r7, #2]
 801b59c:	f04f 0201 	mov.w	r2, #1
 801b5a0:	fa02 f303 	lsl.w	r3, r2, r3
 801b5a4:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	8c1b      	ldrh	r3, [r3, #32]
 801b5aa:	b29a      	uxth	r2, r3
 801b5ac:	89fb      	ldrh	r3, [r7, #14]
 801b5ae:	ea6f 0303 	mvn.w	r3, r3
 801b5b2:	b29b      	uxth	r3, r3
 801b5b4:	4013      	ands	r3, r2
 801b5b6:	b29a      	uxth	r2, r3
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	8c1b      	ldrh	r3, [r3, #32]
 801b5c0:	b29a      	uxth	r2, r3
 801b5c2:	8839      	ldrh	r1, [r7, #0]
 801b5c4:	887b      	ldrh	r3, [r7, #2]
 801b5c6:	fa01 f303 	lsl.w	r3, r1, r3
 801b5ca:	b29b      	uxth	r3, r3
 801b5cc:	4313      	orrs	r3, r2
 801b5ce:	b29a      	uxth	r2, r3
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	841a      	strh	r2, [r3, #32]
}
 801b5d4:	f107 0714 	add.w	r7, r7, #20
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bc80      	pop	{r7}
 801b5dc:	4770      	bx	lr
 801b5de:	bf00      	nop

0801b5e0 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 801b5e0:	b480      	push	{r7}
 801b5e2:	b085      	sub	sp, #20
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
 801b5e8:	4613      	mov	r3, r2
 801b5ea:	460a      	mov	r2, r1
 801b5ec:	807a      	strh	r2, [r7, #2]
 801b5ee:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 801b5f0:	f04f 0300 	mov.w	r3, #0
 801b5f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 801b5f6:	887b      	ldrh	r3, [r7, #2]
 801b5f8:	f04f 0204 	mov.w	r2, #4
 801b5fc:	fa02 f303 	lsl.w	r3, r2, r3
 801b600:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	8c1b      	ldrh	r3, [r3, #32]
 801b606:	b29a      	uxth	r2, r3
 801b608:	89fb      	ldrh	r3, [r7, #14]
 801b60a:	ea6f 0303 	mvn.w	r3, r3
 801b60e:	b29b      	uxth	r3, r3
 801b610:	4013      	ands	r3, r2
 801b612:	b29a      	uxth	r2, r3
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	8c1b      	ldrh	r3, [r3, #32]
 801b61c:	b29a      	uxth	r2, r3
 801b61e:	8839      	ldrh	r1, [r7, #0]
 801b620:	887b      	ldrh	r3, [r7, #2]
 801b622:	fa01 f303 	lsl.w	r3, r1, r3
 801b626:	b29b      	uxth	r3, r3
 801b628:	4313      	orrs	r3, r2
 801b62a:	b29a      	uxth	r2, r3
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	841a      	strh	r2, [r3, #32]
}
 801b630:	f107 0714 	add.w	r7, r7, #20
 801b634:	46bd      	mov	sp, r7
 801b636:	bc80      	pop	{r7}
 801b638:	4770      	bx	lr
 801b63a:	bf00      	nop

0801b63c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 801b63c:	b580      	push	{r7, lr}
 801b63e:	b082      	sub	sp, #8
 801b640:	af00      	add	r7, sp, #0
 801b642:	6078      	str	r0, [r7, #4]
 801b644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	881b      	ldrh	r3, [r3, #0]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d10f      	bne.n	801b66e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801b64e:	683b      	ldr	r3, [r7, #0]
 801b650:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801b652:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801b654:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801b656:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801b658:	891b      	ldrh	r3, [r3, #8]
 801b65a:	6878      	ldr	r0, [r7, #4]
 801b65c:	f000 fcc4 	bl	801bfe8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801b660:	683b      	ldr	r3, [r7, #0]
 801b662:	88db      	ldrh	r3, [r3, #6]
 801b664:	6878      	ldr	r0, [r7, #4]
 801b666:	4619      	mov	r1, r3
 801b668:	f000 f8ec 	bl	801b844 <TIM_SetIC1Prescaler>
 801b66c:	e036      	b.n	801b6dc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	881b      	ldrh	r3, [r3, #0]
 801b672:	2b04      	cmp	r3, #4
 801b674:	d10f      	bne.n	801b696 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801b676:	683b      	ldr	r3, [r7, #0]
 801b678:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801b67a:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801b67c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801b67e:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801b680:	891b      	ldrh	r3, [r3, #8]
 801b682:	6878      	ldr	r0, [r7, #4]
 801b684:	f000 fcf0 	bl	801c068 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801b688:	683b      	ldr	r3, [r7, #0]
 801b68a:	88db      	ldrh	r3, [r3, #6]
 801b68c:	6878      	ldr	r0, [r7, #4]
 801b68e:	4619      	mov	r1, r3
 801b690:	f000 f8f4 	bl	801b87c <TIM_SetIC2Prescaler>
 801b694:	e022      	b.n	801b6dc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 801b696:	683b      	ldr	r3, [r7, #0]
 801b698:	881b      	ldrh	r3, [r3, #0]
 801b69a:	2b08      	cmp	r3, #8
 801b69c:	d10f      	bne.n	801b6be <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 801b69e:	683b      	ldr	r3, [r7, #0]
 801b6a0:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801b6a2:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 801b6a4:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801b6a6:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 801b6a8:	891b      	ldrh	r3, [r3, #8]
 801b6aa:	6878      	ldr	r0, [r7, #4]
 801b6ac:	f000 fd2a 	bl	801c104 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801b6b0:	683b      	ldr	r3, [r7, #0]
 801b6b2:	88db      	ldrh	r3, [r3, #6]
 801b6b4:	6878      	ldr	r0, [r7, #4]
 801b6b6:	4619      	mov	r1, r3
 801b6b8:	f000 f8fe 	bl	801b8b8 <TIM_SetIC3Prescaler>
 801b6bc:	e00e      	b.n	801b6dc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801b6be:	683b      	ldr	r3, [r7, #0]
 801b6c0:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801b6c2:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801b6c4:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801b6c6:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801b6c8:	891b      	ldrh	r3, [r3, #8]
 801b6ca:	6878      	ldr	r0, [r7, #4]
 801b6cc:	f000 fd60 	bl	801c190 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801b6d0:	683b      	ldr	r3, [r7, #0]
 801b6d2:	88db      	ldrh	r3, [r3, #6]
 801b6d4:	6878      	ldr	r0, [r7, #4]
 801b6d6:	4619      	mov	r1, r3
 801b6d8:	f000 f90a 	bl	801b8f0 <TIM_SetIC4Prescaler>
  }
}
 801b6dc:	f107 0708 	add.w	r7, r7, #8
 801b6e0:	46bd      	mov	sp, r7
 801b6e2:	bd80      	pop	{r7, pc}

0801b6e4 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 801b6e4:	b480      	push	{r7}
 801b6e6:	b083      	sub	sp, #12
 801b6e8:	af00      	add	r7, sp, #0
 801b6ea:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	f04f 0200 	mov.w	r2, #0
 801b6f2:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	f04f 0200 	mov.w	r2, #0
 801b6fa:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	f04f 0201 	mov.w	r2, #1
 801b702:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	f04f 0200 	mov.w	r2, #0
 801b70a:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	f04f 0200 	mov.w	r2, #0
 801b712:	811a      	strh	r2, [r3, #8]
}
 801b714:	f107 070c 	add.w	r7, r7, #12
 801b718:	46bd      	mov	sp, r7
 801b71a:	bc80      	pop	{r7}
 801b71c:	4770      	bx	lr
 801b71e:	bf00      	nop

0801b720 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 801b720:	b580      	push	{r7, lr}
 801b722:	b084      	sub	sp, #16
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
 801b728:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 801b72a:	f04f 0300 	mov.w	r3, #0
 801b72e:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 801b730:	f04f 0301 	mov.w	r3, #1
 801b734:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 801b736:	683b      	ldr	r3, [r7, #0]
 801b738:	885b      	ldrh	r3, [r3, #2]
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d103      	bne.n	801b746 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 801b73e:	f04f 0302 	mov.w	r3, #2
 801b742:	81fb      	strh	r3, [r7, #14]
 801b744:	e002      	b.n	801b74c <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 801b746:	f04f 0300 	mov.w	r3, #0
 801b74a:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	889b      	ldrh	r3, [r3, #4]
 801b750:	2b01      	cmp	r3, #1
 801b752:	d103      	bne.n	801b75c <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 801b754:	f04f 0302 	mov.w	r3, #2
 801b758:	81bb      	strh	r3, [r7, #12]
 801b75a:	e002      	b.n	801b762 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 801b75c:	f04f 0301 	mov.w	r3, #1
 801b760:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 801b762:	683b      	ldr	r3, [r7, #0]
 801b764:	881b      	ldrh	r3, [r3, #0]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d11c      	bne.n	801b7a4 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	8859      	ldrh	r1, [r3, #2]
 801b76e:	683b      	ldr	r3, [r7, #0]
 801b770:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 801b772:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801b774:	891b      	ldrh	r3, [r3, #8]
 801b776:	6878      	ldr	r0, [r7, #4]
 801b778:	f000 fc36 	bl	801bfe8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	88db      	ldrh	r3, [r3, #6]
 801b780:	6878      	ldr	r0, [r7, #4]
 801b782:	4619      	mov	r1, r3
 801b784:	f000 f85e 	bl	801b844 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 801b788:	683b      	ldr	r3, [r7, #0]
 801b78a:	891b      	ldrh	r3, [r3, #8]
 801b78c:	89f9      	ldrh	r1, [r7, #14]
 801b78e:	89ba      	ldrh	r2, [r7, #12]
 801b790:	6878      	ldr	r0, [r7, #4]
 801b792:	f000 fc69 	bl	801c068 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801b796:	683b      	ldr	r3, [r7, #0]
 801b798:	88db      	ldrh	r3, [r3, #6]
 801b79a:	6878      	ldr	r0, [r7, #4]
 801b79c:	4619      	mov	r1, r3
 801b79e:	f000 f86d 	bl	801b87c <TIM_SetIC2Prescaler>
 801b7a2:	e01b      	b.n	801b7dc <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801b7a4:	683b      	ldr	r3, [r7, #0]
 801b7a6:	8859      	ldrh	r1, [r3, #2]
 801b7a8:	683b      	ldr	r3, [r7, #0]
 801b7aa:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 801b7ac:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801b7ae:	891b      	ldrh	r3, [r3, #8]
 801b7b0:	6878      	ldr	r0, [r7, #4]
 801b7b2:	f000 fc59 	bl	801c068 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801b7b6:	683b      	ldr	r3, [r7, #0]
 801b7b8:	88db      	ldrh	r3, [r3, #6]
 801b7ba:	6878      	ldr	r0, [r7, #4]
 801b7bc:	4619      	mov	r1, r3
 801b7be:	f000 f85d 	bl	801b87c <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 801b7c2:	683b      	ldr	r3, [r7, #0]
 801b7c4:	891b      	ldrh	r3, [r3, #8]
 801b7c6:	89f9      	ldrh	r1, [r7, #14]
 801b7c8:	89ba      	ldrh	r2, [r7, #12]
 801b7ca:	6878      	ldr	r0, [r7, #4]
 801b7cc:	f000 fc0c 	bl	801bfe8 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801b7d0:	683b      	ldr	r3, [r7, #0]
 801b7d2:	88db      	ldrh	r3, [r3, #6]
 801b7d4:	6878      	ldr	r0, [r7, #4]
 801b7d6:	4619      	mov	r1, r3
 801b7d8:	f000 f834 	bl	801b844 <TIM_SetIC1Prescaler>
  }
}
 801b7dc:	f107 0710 	add.w	r7, r7, #16
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	bd80      	pop	{r7, pc}

0801b7e4 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 801b7e4:	b480      	push	{r7}
 801b7e6:	b083      	sub	sp, #12
 801b7e8:	af00      	add	r7, sp, #0
 801b7ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	f107 070c 	add.w	r7, r7, #12
 801b7f6:	46bd      	mov	sp, r7
 801b7f8:	bc80      	pop	{r7}
 801b7fa:	4770      	bx	lr

0801b7fc <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 801b7fc:	b480      	push	{r7}
 801b7fe:	b083      	sub	sp, #12
 801b800:	af00      	add	r7, sp, #0
 801b802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 801b808:	4618      	mov	r0, r3
 801b80a:	f107 070c 	add.w	r7, r7, #12
 801b80e:	46bd      	mov	sp, r7
 801b810:	bc80      	pop	{r7}
 801b812:	4770      	bx	lr

0801b814 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 801b814:	b480      	push	{r7}
 801b816:	b083      	sub	sp, #12
 801b818:	af00      	add	r7, sp, #0
 801b81a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 801b820:	4618      	mov	r0, r3
 801b822:	f107 070c 	add.w	r7, r7, #12
 801b826:	46bd      	mov	sp, r7
 801b828:	bc80      	pop	{r7}
 801b82a:	4770      	bx	lr

0801b82c <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 801b82c:	b480      	push	{r7}
 801b82e:	b083      	sub	sp, #12
 801b830:	af00      	add	r7, sp, #0
 801b832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801b838:	4618      	mov	r0, r3
 801b83a:	f107 070c 	add.w	r7, r7, #12
 801b83e:	46bd      	mov	sp, r7
 801b840:	bc80      	pop	{r7}
 801b842:	4770      	bx	lr

0801b844 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 801b844:	b480      	push	{r7}
 801b846:	b083      	sub	sp, #12
 801b848:	af00      	add	r7, sp, #0
 801b84a:	6078      	str	r0, [r7, #4]
 801b84c:	460b      	mov	r3, r1
 801b84e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	8b1b      	ldrh	r3, [r3, #24]
 801b854:	b29b      	uxth	r3, r3
 801b856:	f023 030c 	bic.w	r3, r3, #12
 801b85a:	b29a      	uxth	r2, r3
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	8b1b      	ldrh	r3, [r3, #24]
 801b864:	b29a      	uxth	r2, r3
 801b866:	887b      	ldrh	r3, [r7, #2]
 801b868:	4313      	orrs	r3, r2
 801b86a:	b29a      	uxth	r2, r3
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	831a      	strh	r2, [r3, #24]
}
 801b870:	f107 070c 	add.w	r7, r7, #12
 801b874:	46bd      	mov	sp, r7
 801b876:	bc80      	pop	{r7}
 801b878:	4770      	bx	lr
 801b87a:	bf00      	nop

0801b87c <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 801b87c:	b480      	push	{r7}
 801b87e:	b083      	sub	sp, #12
 801b880:	af00      	add	r7, sp, #0
 801b882:	6078      	str	r0, [r7, #4]
 801b884:	460b      	mov	r3, r1
 801b886:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	8b1b      	ldrh	r3, [r3, #24]
 801b88c:	b29b      	uxth	r3, r3
 801b88e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801b892:	b29a      	uxth	r2, r3
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	8b1b      	ldrh	r3, [r3, #24]
 801b89c:	b29a      	uxth	r2, r3
 801b89e:	887b      	ldrh	r3, [r7, #2]
 801b8a0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b8a4:	b29b      	uxth	r3, r3
 801b8a6:	4313      	orrs	r3, r2
 801b8a8:	b29a      	uxth	r2, r3
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	831a      	strh	r2, [r3, #24]
}
 801b8ae:	f107 070c 	add.w	r7, r7, #12
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	bc80      	pop	{r7}
 801b8b6:	4770      	bx	lr

0801b8b8 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 801b8b8:	b480      	push	{r7}
 801b8ba:	b083      	sub	sp, #12
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	6078      	str	r0, [r7, #4]
 801b8c0:	460b      	mov	r3, r1
 801b8c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	8b9b      	ldrh	r3, [r3, #28]
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	f023 030c 	bic.w	r3, r3, #12
 801b8ce:	b29a      	uxth	r2, r3
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	8b9b      	ldrh	r3, [r3, #28]
 801b8d8:	b29a      	uxth	r2, r3
 801b8da:	887b      	ldrh	r3, [r7, #2]
 801b8dc:	4313      	orrs	r3, r2
 801b8de:	b29a      	uxth	r2, r3
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	839a      	strh	r2, [r3, #28]
}
 801b8e4:	f107 070c 	add.w	r7, r7, #12
 801b8e8:	46bd      	mov	sp, r7
 801b8ea:	bc80      	pop	{r7}
 801b8ec:	4770      	bx	lr
 801b8ee:	bf00      	nop

0801b8f0 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 801b8f0:	b480      	push	{r7}
 801b8f2:	b083      	sub	sp, #12
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
 801b8f8:	460b      	mov	r3, r1
 801b8fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	8b9b      	ldrh	r3, [r3, #28]
 801b900:	b29b      	uxth	r3, r3
 801b902:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801b906:	b29a      	uxth	r2, r3
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	8b9b      	ldrh	r3, [r3, #28]
 801b910:	b29a      	uxth	r2, r3
 801b912:	887b      	ldrh	r3, [r7, #2]
 801b914:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801b918:	b29b      	uxth	r3, r3
 801b91a:	4313      	orrs	r3, r2
 801b91c:	b29a      	uxth	r2, r3
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	839a      	strh	r2, [r3, #28]
}
 801b922:	f107 070c 	add.w	r7, r7, #12
 801b926:	46bd      	mov	sp, r7
 801b928:	bc80      	pop	{r7}
 801b92a:	4770      	bx	lr

0801b92c <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 801b92c:	b480      	push	{r7}
 801b92e:	b083      	sub	sp, #12
 801b930:	af00      	add	r7, sp, #0
 801b932:	6078      	str	r0, [r7, #4]
 801b934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801b936:	683b      	ldr	r3, [r7, #0]
 801b938:	881a      	ldrh	r2, [r3, #0]
 801b93a:	683b      	ldr	r3, [r7, #0]
 801b93c:	885b      	ldrh	r3, [r3, #2]
 801b93e:	4313      	orrs	r3, r2
 801b940:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 801b942:	683b      	ldr	r3, [r7, #0]
 801b944:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801b946:	4313      	orrs	r3, r2
 801b948:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 801b94a:	683b      	ldr	r3, [r7, #0]
 801b94c:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801b94e:	4313      	orrs	r3, r2
 801b950:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 801b952:	683b      	ldr	r3, [r7, #0]
 801b954:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801b956:	4313      	orrs	r3, r2
 801b958:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 801b95a:	683b      	ldr	r3, [r7, #0]
 801b95c:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801b95e:	4313      	orrs	r3, r2
 801b960:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 801b962:	683b      	ldr	r3, [r7, #0]
 801b964:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801b966:	4313      	orrs	r3, r2
 801b968:	b29a      	uxth	r2, r3
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 801b970:	f107 070c 	add.w	r7, r7, #12
 801b974:	46bd      	mov	sp, r7
 801b976:	bc80      	pop	{r7}
 801b978:	4770      	bx	lr
 801b97a:	bf00      	nop

0801b97c <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 801b97c:	b480      	push	{r7}
 801b97e:	b083      	sub	sp, #12
 801b980:	af00      	add	r7, sp, #0
 801b982:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	f04f 0200 	mov.w	r2, #0
 801b98a:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	f04f 0200 	mov.w	r2, #0
 801b992:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	f04f 0200 	mov.w	r2, #0
 801b99a:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	f04f 0200 	mov.w	r2, #0
 801b9a2:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	f04f 0200 	mov.w	r2, #0
 801b9aa:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	f04f 0200 	mov.w	r2, #0
 801b9b2:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	f04f 0200 	mov.w	r2, #0
 801b9ba:	819a      	strh	r2, [r3, #12]
}
 801b9bc:	f107 070c 	add.w	r7, r7, #12
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	bc80      	pop	{r7}
 801b9c4:	4770      	bx	lr
 801b9c6:	bf00      	nop

0801b9c8 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801b9c8:	b480      	push	{r7}
 801b9ca:	b083      	sub	sp, #12
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
 801b9d0:	460b      	mov	r3, r1
 801b9d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801b9d4:	78fb      	ldrb	r3, [r7, #3]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d00c      	beq.n	801b9f4 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801b9e0:	b29b      	uxth	r3, r3
 801b9e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801b9e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801b9ea:	b29a      	uxth	r2, r3
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 801b9f2:	e00b      	b.n	801ba0c <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801b9fa:	b29b      	uxth	r3, r3
 801b9fc:	ea4f 4343 	mov.w	r3, r3, lsl #17
 801ba00:	ea4f 4353 	mov.w	r3, r3, lsr #17
 801ba04:	b29a      	uxth	r2, r3
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 801ba0c:	f107 070c 	add.w	r7, r7, #12
 801ba10:	46bd      	mov	sp, r7
 801ba12:	bc80      	pop	{r7}
 801ba14:	4770      	bx	lr
 801ba16:	bf00      	nop

0801ba18 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801ba18:	b480      	push	{r7}
 801ba1a:	b083      	sub	sp, #12
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
 801ba20:	460b      	mov	r3, r1
 801ba22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801ba24:	78fb      	ldrb	r3, [r7, #3]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d008      	beq.n	801ba3c <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	889b      	ldrh	r3, [r3, #4]
 801ba2e:	b29b      	uxth	r3, r3
 801ba30:	f043 0304 	orr.w	r3, r3, #4
 801ba34:	b29a      	uxth	r2, r3
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	809a      	strh	r2, [r3, #4]
 801ba3a:	e007      	b.n	801ba4c <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	889b      	ldrh	r3, [r3, #4]
 801ba40:	b29b      	uxth	r3, r3
 801ba42:	f023 0304 	bic.w	r3, r3, #4
 801ba46:	b29a      	uxth	r2, r3
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	809a      	strh	r2, [r3, #4]
  }
}
 801ba4c:	f107 070c 	add.w	r7, r7, #12
 801ba50:	46bd      	mov	sp, r7
 801ba52:	bc80      	pop	{r7}
 801ba54:	4770      	bx	lr
 801ba56:	bf00      	nop

0801ba58 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 801ba58:	b480      	push	{r7}
 801ba5a:	b083      	sub	sp, #12
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
 801ba60:	460b      	mov	r3, r1
 801ba62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801ba64:	78fb      	ldrb	r3, [r7, #3]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d008      	beq.n	801ba7c <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	889b      	ldrh	r3, [r3, #4]
 801ba6e:	b29b      	uxth	r3, r3
 801ba70:	f043 0301 	orr.w	r3, r3, #1
 801ba74:	b29a      	uxth	r2, r3
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	809a      	strh	r2, [r3, #4]
 801ba7a:	e007      	b.n	801ba8c <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	889b      	ldrh	r3, [r3, #4]
 801ba80:	b29b      	uxth	r3, r3
 801ba82:	f023 0301 	bic.w	r3, r3, #1
 801ba86:	b29a      	uxth	r2, r3
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	809a      	strh	r2, [r3, #4]
  }
}
 801ba8c:	f107 070c 	add.w	r7, r7, #12
 801ba90:	46bd      	mov	sp, r7
 801ba92:	bc80      	pop	{r7}
 801ba94:	4770      	bx	lr
 801ba96:	bf00      	nop

0801ba98 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 801ba98:	b480      	push	{r7}
 801ba9a:	b083      	sub	sp, #12
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	6078      	str	r0, [r7, #4]
 801baa0:	4613      	mov	r3, r2
 801baa2:	460a      	mov	r2, r1
 801baa4:	807a      	strh	r2, [r7, #2]
 801baa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801baa8:	787b      	ldrb	r3, [r7, #1]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d008      	beq.n	801bac0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	899b      	ldrh	r3, [r3, #12]
 801bab2:	b29a      	uxth	r2, r3
 801bab4:	887b      	ldrh	r3, [r7, #2]
 801bab6:	4313      	orrs	r3, r2
 801bab8:	b29a      	uxth	r2, r3
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	819a      	strh	r2, [r3, #12]
 801babe:	e00a      	b.n	801bad6 <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	899b      	ldrh	r3, [r3, #12]
 801bac4:	b29a      	uxth	r2, r3
 801bac6:	887b      	ldrh	r3, [r7, #2]
 801bac8:	ea6f 0303 	mvn.w	r3, r3
 801bacc:	b29b      	uxth	r3, r3
 801bace:	4013      	ands	r3, r2
 801bad0:	b29a      	uxth	r2, r3
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	819a      	strh	r2, [r3, #12]
  }
}
 801bad6:	f107 070c 	add.w	r7, r7, #12
 801bada:	46bd      	mov	sp, r7
 801badc:	bc80      	pop	{r7}
 801bade:	4770      	bx	lr

0801bae0 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 801bae0:	b480      	push	{r7}
 801bae2:	b083      	sub	sp, #12
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
 801bae8:	460b      	mov	r3, r1
 801baea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	887a      	ldrh	r2, [r7, #2]
 801baf0:	829a      	strh	r2, [r3, #20]
}
 801baf2:	f107 070c 	add.w	r7, r7, #12
 801baf6:	46bd      	mov	sp, r7
 801baf8:	bc80      	pop	{r7}
 801bafa:	4770      	bx	lr

0801bafc <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 801bafc:	b480      	push	{r7}
 801bafe:	b085      	sub	sp, #20
 801bb00:	af00      	add	r7, sp, #0
 801bb02:	6078      	str	r0, [r7, #4]
 801bb04:	460b      	mov	r3, r1
 801bb06:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 801bb08:	f04f 0300 	mov.w	r3, #0
 801bb0c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	8a1b      	ldrh	r3, [r3, #16]
 801bb12:	b29a      	uxth	r2, r3
 801bb14:	887b      	ldrh	r3, [r7, #2]
 801bb16:	4013      	ands	r3, r2
 801bb18:	b29b      	uxth	r3, r3
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d003      	beq.n	801bb26 <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 801bb1e:	f04f 0301 	mov.w	r3, #1
 801bb22:	73fb      	strb	r3, [r7, #15]
 801bb24:	e002      	b.n	801bb2c <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 801bb26:	f04f 0300 	mov.w	r3, #0
 801bb2a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801bb2c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb2e:	4618      	mov	r0, r3
 801bb30:	f107 0714 	add.w	r7, r7, #20
 801bb34:	46bd      	mov	sp, r7
 801bb36:	bc80      	pop	{r7}
 801bb38:	4770      	bx	lr
 801bb3a:	bf00      	nop

0801bb3c <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 801bb3c:	b480      	push	{r7}
 801bb3e:	b083      	sub	sp, #12
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	6078      	str	r0, [r7, #4]
 801bb44:	460b      	mov	r3, r1
 801bb46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 801bb48:	887b      	ldrh	r3, [r7, #2]
 801bb4a:	ea6f 0303 	mvn.w	r3, r3
 801bb4e:	b29a      	uxth	r2, r3
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	821a      	strh	r2, [r3, #16]
}
 801bb54:	f107 070c 	add.w	r7, r7, #12
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	bc80      	pop	{r7}
 801bb5c:	4770      	bx	lr
 801bb5e:	bf00      	nop

0801bb60 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 801bb60:	b480      	push	{r7}
 801bb62:	b085      	sub	sp, #20
 801bb64:	af00      	add	r7, sp, #0
 801bb66:	6078      	str	r0, [r7, #4]
 801bb68:	460b      	mov	r3, r1
 801bb6a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 801bb6c:	f04f 0300 	mov.w	r3, #0
 801bb70:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 801bb72:	f04f 0300 	mov.w	r3, #0
 801bb76:	81bb      	strh	r3, [r7, #12]
 801bb78:	f04f 0300 	mov.w	r3, #0
 801bb7c:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	8a1b      	ldrh	r3, [r3, #16]
 801bb82:	b29a      	uxth	r2, r3
 801bb84:	887b      	ldrh	r3, [r7, #2]
 801bb86:	4013      	ands	r3, r2
 801bb88:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	899b      	ldrh	r3, [r3, #12]
 801bb8e:	b29a      	uxth	r2, r3
 801bb90:	887b      	ldrh	r3, [r7, #2]
 801bb92:	4013      	ands	r3, r2
 801bb94:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 801bb96:	89bb      	ldrh	r3, [r7, #12]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d006      	beq.n	801bbaa <TIM_GetITStatus+0x4a>
 801bb9c:	897b      	ldrh	r3, [r7, #10]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d003      	beq.n	801bbaa <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 801bba2:	f04f 0301 	mov.w	r3, #1
 801bba6:	73fb      	strb	r3, [r7, #15]
 801bba8:	e002      	b.n	801bbb0 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 801bbaa:	f04f 0300 	mov.w	r3, #0
 801bbae:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801bbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	f107 0714 	add.w	r7, r7, #20
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	bc80      	pop	{r7}
 801bbbc:	4770      	bx	lr
 801bbbe:	bf00      	nop

0801bbc0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 801bbc0:	b480      	push	{r7}
 801bbc2:	b083      	sub	sp, #12
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	6078      	str	r0, [r7, #4]
 801bbc8:	460b      	mov	r3, r1
 801bbca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 801bbcc:	887b      	ldrh	r3, [r7, #2]
 801bbce:	ea6f 0303 	mvn.w	r3, r3
 801bbd2:	b29a      	uxth	r2, r3
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	821a      	strh	r2, [r3, #16]
}
 801bbd8:	f107 070c 	add.w	r7, r7, #12
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bc80      	pop	{r7}
 801bbe0:	4770      	bx	lr
 801bbe2:	bf00      	nop

0801bbe4 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 801bbe4:	b480      	push	{r7}
 801bbe6:	b083      	sub	sp, #12
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	6078      	str	r0, [r7, #4]
 801bbec:	4613      	mov	r3, r2
 801bbee:	460a      	mov	r2, r1
 801bbf0:	807a      	strh	r2, [r7, #2]
 801bbf2:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 801bbf4:	887a      	ldrh	r2, [r7, #2]
 801bbf6:	883b      	ldrh	r3, [r7, #0]
 801bbf8:	4313      	orrs	r3, r2
 801bbfa:	b29a      	uxth	r2, r3
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 801bc02:	f107 070c 	add.w	r7, r7, #12
 801bc06:	46bd      	mov	sp, r7
 801bc08:	bc80      	pop	{r7}
 801bc0a:	4770      	bx	lr

0801bc0c <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 801bc0c:	b480      	push	{r7}
 801bc0e:	b083      	sub	sp, #12
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	6078      	str	r0, [r7, #4]
 801bc14:	4613      	mov	r3, r2
 801bc16:	460a      	mov	r2, r1
 801bc18:	807a      	strh	r2, [r7, #2]
 801bc1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801bc1c:	787b      	ldrb	r3, [r7, #1]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d008      	beq.n	801bc34 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	899b      	ldrh	r3, [r3, #12]
 801bc26:	b29a      	uxth	r2, r3
 801bc28:	887b      	ldrh	r3, [r7, #2]
 801bc2a:	4313      	orrs	r3, r2
 801bc2c:	b29a      	uxth	r2, r3
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	819a      	strh	r2, [r3, #12]
 801bc32:	e00a      	b.n	801bc4a <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	899b      	ldrh	r3, [r3, #12]
 801bc38:	b29a      	uxth	r2, r3
 801bc3a:	887b      	ldrh	r3, [r7, #2]
 801bc3c:	ea6f 0303 	mvn.w	r3, r3
 801bc40:	b29b      	uxth	r3, r3
 801bc42:	4013      	ands	r3, r2
 801bc44:	b29a      	uxth	r2, r3
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	819a      	strh	r2, [r3, #12]
  }
}
 801bc4a:	f107 070c 	add.w	r7, r7, #12
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	bc80      	pop	{r7}
 801bc52:	4770      	bx	lr

0801bc54 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801bc54:	b480      	push	{r7}
 801bc56:	b083      	sub	sp, #12
 801bc58:	af00      	add	r7, sp, #0
 801bc5a:	6078      	str	r0, [r7, #4]
 801bc5c:	460b      	mov	r3, r1
 801bc5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801bc60:	78fb      	ldrb	r3, [r7, #3]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d008      	beq.n	801bc78 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	889b      	ldrh	r3, [r3, #4]
 801bc6a:	b29b      	uxth	r3, r3
 801bc6c:	f043 0308 	orr.w	r3, r3, #8
 801bc70:	b29a      	uxth	r2, r3
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	809a      	strh	r2, [r3, #4]
 801bc76:	e007      	b.n	801bc88 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	889b      	ldrh	r3, [r3, #4]
 801bc7c:	b29b      	uxth	r3, r3
 801bc7e:	f023 0308 	bic.w	r3, r3, #8
 801bc82:	b29a      	uxth	r2, r3
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	809a      	strh	r2, [r3, #4]
  }
}
 801bc88:	f107 070c 	add.w	r7, r7, #12
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	bc80      	pop	{r7}
 801bc90:	4770      	bx	lr
 801bc92:	bf00      	nop

0801bc94 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 801bc94:	b480      	push	{r7}
 801bc96:	b083      	sub	sp, #12
 801bc98:	af00      	add	r7, sp, #0
 801bc9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	891b      	ldrh	r3, [r3, #8]
 801bca0:	b29b      	uxth	r3, r3
 801bca2:	f023 0307 	bic.w	r3, r3, #7
 801bca6:	b29a      	uxth	r2, r3
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	811a      	strh	r2, [r3, #8]
}
 801bcac:	f107 070c 	add.w	r7, r7, #12
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	bc80      	pop	{r7}
 801bcb4:	4770      	bx	lr
 801bcb6:	bf00      	nop

0801bcb8 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b082      	sub	sp, #8
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6078      	str	r0, [r7, #4]
 801bcc0:	460b      	mov	r3, r1
 801bcc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 801bcc4:	887b      	ldrh	r3, [r7, #2]
 801bcc6:	6878      	ldr	r0, [r7, #4]
 801bcc8:	4619      	mov	r1, r3
 801bcca:	f000 f87d 	bl	801bdc8 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	891b      	ldrh	r3, [r3, #8]
 801bcd2:	b29b      	uxth	r3, r3
 801bcd4:	f043 0307 	orr.w	r3, r3, #7
 801bcd8:	b29a      	uxth	r2, r3
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	811a      	strh	r2, [r3, #8]
}
 801bcde:	f107 0708 	add.w	r7, r7, #8
 801bce2:	46bd      	mov	sp, r7
 801bce4:	bd80      	pop	{r7, pc}
 801bce6:	bf00      	nop

0801bce8 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b084      	sub	sp, #16
 801bcec:	af00      	add	r7, sp, #0
 801bcee:	60f8      	str	r0, [r7, #12]
 801bcf0:	8179      	strh	r1, [r7, #10]
 801bcf2:	813a      	strh	r2, [r7, #8]
 801bcf4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 801bcf6:	897b      	ldrh	r3, [r7, #10]
 801bcf8:	2b60      	cmp	r3, #96	; 0x60
 801bcfa:	d108      	bne.n	801bd0e <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 801bcfc:	893a      	ldrh	r2, [r7, #8]
 801bcfe:	88fb      	ldrh	r3, [r7, #6]
 801bd00:	68f8      	ldr	r0, [r7, #12]
 801bd02:	4611      	mov	r1, r2
 801bd04:	f04f 0201 	mov.w	r2, #1
 801bd08:	f000 f9ae 	bl	801c068 <TI2_Config>
 801bd0c:	e007      	b.n	801bd1e <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 801bd0e:	893a      	ldrh	r2, [r7, #8]
 801bd10:	88fb      	ldrh	r3, [r7, #6]
 801bd12:	68f8      	ldr	r0, [r7, #12]
 801bd14:	4611      	mov	r1, r2
 801bd16:	f04f 0201 	mov.w	r2, #1
 801bd1a:	f000 f965 	bl	801bfe8 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 801bd1e:	897b      	ldrh	r3, [r7, #10]
 801bd20:	68f8      	ldr	r0, [r7, #12]
 801bd22:	4619      	mov	r1, r3
 801bd24:	f000 f850 	bl	801bdc8 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	891b      	ldrh	r3, [r3, #8]
 801bd2c:	b29b      	uxth	r3, r3
 801bd2e:	f043 0307 	orr.w	r3, r3, #7
 801bd32:	b29a      	uxth	r2, r3
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	811a      	strh	r2, [r3, #8]
}
 801bd38:	f107 0710 	add.w	r7, r7, #16
 801bd3c:	46bd      	mov	sp, r7
 801bd3e:	bd80      	pop	{r7, pc}

0801bd40 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 801bd40:	b580      	push	{r7, lr}
 801bd42:	b086      	sub	sp, #24
 801bd44:	af00      	add	r7, sp, #0
 801bd46:	60f8      	str	r0, [r7, #12]
 801bd48:	8179      	strh	r1, [r7, #10]
 801bd4a:	813a      	strh	r2, [r7, #8]
 801bd4c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801bd4e:	f04f 0300 	mov.w	r3, #0
 801bd52:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 801bd54:	8979      	ldrh	r1, [r7, #10]
 801bd56:	893a      	ldrh	r2, [r7, #8]
 801bd58:	88fb      	ldrh	r3, [r7, #6]
 801bd5a:	68f8      	ldr	r0, [r7, #12]
 801bd5c:	f000 f8a4 	bl	801bea8 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	891b      	ldrh	r3, [r3, #8]
 801bd64:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 801bd66:	8afb      	ldrh	r3, [r7, #22]
 801bd68:	f023 0307 	bic.w	r3, r3, #7
 801bd6c:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 801bd6e:	8afb      	ldrh	r3, [r7, #22]
 801bd70:	f043 0307 	orr.w	r3, r3, #7
 801bd74:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 801bd76:	8afb      	ldrh	r3, [r7, #22]
 801bd78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bd7c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 801bd7e:	8afb      	ldrh	r3, [r7, #22]
 801bd80:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801bd84:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	8afa      	ldrh	r2, [r7, #22]
 801bd8a:	811a      	strh	r2, [r3, #8]
}
 801bd8c:	f107 0718 	add.w	r7, r7, #24
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}

0801bd94 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b084      	sub	sp, #16
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	60f8      	str	r0, [r7, #12]
 801bd9c:	8179      	strh	r1, [r7, #10]
 801bd9e:	813a      	strh	r2, [r7, #8]
 801bda0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 801bda2:	8979      	ldrh	r1, [r7, #10]
 801bda4:	893a      	ldrh	r2, [r7, #8]
 801bda6:	88fb      	ldrh	r3, [r7, #6]
 801bda8:	68f8      	ldr	r0, [r7, #12]
 801bdaa:	f000 f87d 	bl	801bea8 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	891b      	ldrh	r3, [r3, #8]
 801bdb2:	b29b      	uxth	r3, r3
 801bdb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bdb8:	b29a      	uxth	r2, r3
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	811a      	strh	r2, [r3, #8]
}
 801bdbe:	f107 0710 	add.w	r7, r7, #16
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	bd80      	pop	{r7, pc}
 801bdc6:	bf00      	nop

0801bdc8 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 801bdc8:	b480      	push	{r7}
 801bdca:	b085      	sub	sp, #20
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
 801bdd0:	460b      	mov	r3, r1
 801bdd2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 801bdd4:	f04f 0300 	mov.w	r3, #0
 801bdd8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	891b      	ldrh	r3, [r3, #8]
 801bdde:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 801bde0:	89fb      	ldrh	r3, [r7, #14]
 801bde2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bde6:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 801bde8:	89fa      	ldrh	r2, [r7, #14]
 801bdea:	887b      	ldrh	r3, [r7, #2]
 801bdec:	4313      	orrs	r3, r2
 801bdee:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	89fa      	ldrh	r2, [r7, #14]
 801bdf4:	811a      	strh	r2, [r3, #8]
}
 801bdf6:	f107 0714 	add.w	r7, r7, #20
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bc80      	pop	{r7}
 801bdfe:	4770      	bx	lr

0801be00 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 801be00:	b480      	push	{r7}
 801be02:	b083      	sub	sp, #12
 801be04:	af00      	add	r7, sp, #0
 801be06:	6078      	str	r0, [r7, #4]
 801be08:	460b      	mov	r3, r1
 801be0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	889b      	ldrh	r3, [r3, #4]
 801be10:	b29b      	uxth	r3, r3
 801be12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801be16:	b29a      	uxth	r2, r3
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	889b      	ldrh	r3, [r3, #4]
 801be20:	b29a      	uxth	r2, r3
 801be22:	887b      	ldrh	r3, [r7, #2]
 801be24:	4313      	orrs	r3, r2
 801be26:	b29a      	uxth	r2, r3
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	809a      	strh	r2, [r3, #4]
}
 801be2c:	f107 070c 	add.w	r7, r7, #12
 801be30:	46bd      	mov	sp, r7
 801be32:	bc80      	pop	{r7}
 801be34:	4770      	bx	lr
 801be36:	bf00      	nop

0801be38 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 801be38:	b480      	push	{r7}
 801be3a:	b083      	sub	sp, #12
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	6078      	str	r0, [r7, #4]
 801be40:	460b      	mov	r3, r1
 801be42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	891b      	ldrh	r3, [r3, #8]
 801be48:	b29b      	uxth	r3, r3
 801be4a:	f023 0307 	bic.w	r3, r3, #7
 801be4e:	b29a      	uxth	r2, r3
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	891b      	ldrh	r3, [r3, #8]
 801be58:	b29a      	uxth	r2, r3
 801be5a:	887b      	ldrh	r3, [r7, #2]
 801be5c:	4313      	orrs	r3, r2
 801be5e:	b29a      	uxth	r2, r3
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	811a      	strh	r2, [r3, #8]
}
 801be64:	f107 070c 	add.w	r7, r7, #12
 801be68:	46bd      	mov	sp, r7
 801be6a:	bc80      	pop	{r7}
 801be6c:	4770      	bx	lr
 801be6e:	bf00      	nop

0801be70 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 801be70:	b480      	push	{r7}
 801be72:	b083      	sub	sp, #12
 801be74:	af00      	add	r7, sp, #0
 801be76:	6078      	str	r0, [r7, #4]
 801be78:	460b      	mov	r3, r1
 801be7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	891b      	ldrh	r3, [r3, #8]
 801be80:	b29b      	uxth	r3, r3
 801be82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801be86:	b29a      	uxth	r2, r3
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	891b      	ldrh	r3, [r3, #8]
 801be90:	b29a      	uxth	r2, r3
 801be92:	887b      	ldrh	r3, [r7, #2]
 801be94:	4313      	orrs	r3, r2
 801be96:	b29a      	uxth	r2, r3
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	811a      	strh	r2, [r3, #8]
}
 801be9c:	f107 070c 	add.w	r7, r7, #12
 801bea0:	46bd      	mov	sp, r7
 801bea2:	bc80      	pop	{r7}
 801bea4:	4770      	bx	lr
 801bea6:	bf00      	nop

0801bea8 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 801bea8:	b480      	push	{r7}
 801beaa:	b087      	sub	sp, #28
 801beac:	af00      	add	r7, sp, #0
 801beae:	60f8      	str	r0, [r7, #12]
 801beb0:	8179      	strh	r1, [r7, #10]
 801beb2:	813a      	strh	r2, [r7, #8]
 801beb4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801beb6:	f04f 0300 	mov.w	r3, #0
 801beba:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	891b      	ldrh	r3, [r3, #8]
 801bec0:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 801bec2:	8afb      	ldrh	r3, [r7, #22]
 801bec4:	b2db      	uxtb	r3, r3
 801bec6:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 801bec8:	88fb      	ldrh	r3, [r7, #6]
 801beca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801bece:	b29a      	uxth	r2, r3
 801bed0:	893b      	ldrh	r3, [r7, #8]
 801bed2:	4313      	orrs	r3, r2
 801bed4:	b29a      	uxth	r2, r3
 801bed6:	897b      	ldrh	r3, [r7, #10]
 801bed8:	4313      	orrs	r3, r2
 801beda:	b29a      	uxth	r2, r3
 801bedc:	8afb      	ldrh	r3, [r7, #22]
 801bede:	4313      	orrs	r3, r2
 801bee0:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	8afa      	ldrh	r2, [r7, #22]
 801bee6:	811a      	strh	r2, [r3, #8]
}
 801bee8:	f107 071c 	add.w	r7, r7, #28
 801beec:	46bd      	mov	sp, r7
 801beee:	bc80      	pop	{r7}
 801bef0:	4770      	bx	lr
 801bef2:	bf00      	nop

0801bef4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 801bef4:	b480      	push	{r7}
 801bef6:	b087      	sub	sp, #28
 801bef8:	af00      	add	r7, sp, #0
 801befa:	60f8      	str	r0, [r7, #12]
 801befc:	8179      	strh	r1, [r7, #10]
 801befe:	813a      	strh	r2, [r7, #8]
 801bf00:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801bf02:	f04f 0300 	mov.w	r3, #0
 801bf06:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 801bf08:	f04f 0300 	mov.w	r3, #0
 801bf0c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 801bf0e:	f04f 0300 	mov.w	r3, #0
 801bf12:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	891b      	ldrh	r3, [r3, #8]
 801bf18:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	8b1b      	ldrh	r3, [r3, #24]
 801bf1e:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	8c1b      	ldrh	r3, [r3, #32]
 801bf24:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 801bf26:	8afb      	ldrh	r3, [r7, #22]
 801bf28:	f023 0307 	bic.w	r3, r3, #7
 801bf2c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 801bf2e:	8afa      	ldrh	r2, [r7, #22]
 801bf30:	897b      	ldrh	r3, [r7, #10]
 801bf32:	4313      	orrs	r3, r2
 801bf34:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 801bf36:	8abb      	ldrh	r3, [r7, #20]
 801bf38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bf3c:	f023 0303 	bic.w	r3, r3, #3
 801bf40:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 801bf42:	8abb      	ldrh	r3, [r7, #20]
 801bf44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bf48:	f043 0301 	orr.w	r3, r3, #1
 801bf4c:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 801bf4e:	8a7b      	ldrh	r3, [r7, #18]
 801bf50:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801bf54:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 801bf56:	88fb      	ldrh	r3, [r7, #6]
 801bf58:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801bf5c:	b29a      	uxth	r2, r3
 801bf5e:	893b      	ldrh	r3, [r7, #8]
 801bf60:	4313      	orrs	r3, r2
 801bf62:	b29a      	uxth	r2, r3
 801bf64:	8a7b      	ldrh	r3, [r7, #18]
 801bf66:	4313      	orrs	r3, r2
 801bf68:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	8afa      	ldrh	r2, [r7, #22]
 801bf6e:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801bf70:	68fb      	ldr	r3, [r7, #12]
 801bf72:	8aba      	ldrh	r2, [r7, #20]
 801bf74:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bf76:	68fb      	ldr	r3, [r7, #12]
 801bf78:	8a7a      	ldrh	r2, [r7, #18]
 801bf7a:	841a      	strh	r2, [r3, #32]
}
 801bf7c:	f107 071c 	add.w	r7, r7, #28
 801bf80:	46bd      	mov	sp, r7
 801bf82:	bc80      	pop	{r7}
 801bf84:	4770      	bx	lr
 801bf86:	bf00      	nop

0801bf88 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801bf88:	b480      	push	{r7}
 801bf8a:	b083      	sub	sp, #12
 801bf8c:	af00      	add	r7, sp, #0
 801bf8e:	6078      	str	r0, [r7, #4]
 801bf90:	460b      	mov	r3, r1
 801bf92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801bf94:	78fb      	ldrb	r3, [r7, #3]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d008      	beq.n	801bfac <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	889b      	ldrh	r3, [r3, #4]
 801bf9e:	b29b      	uxth	r3, r3
 801bfa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bfa4:	b29a      	uxth	r2, r3
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	809a      	strh	r2, [r3, #4]
 801bfaa:	e007      	b.n	801bfbc <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	889b      	ldrh	r3, [r3, #4]
 801bfb0:	b29b      	uxth	r3, r3
 801bfb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bfb6:	b29a      	uxth	r2, r3
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	809a      	strh	r2, [r3, #4]
  }
}
 801bfbc:	f107 070c 	add.w	r7, r7, #12
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bc80      	pop	{r7}
 801bfc4:	4770      	bx	lr
 801bfc6:	bf00      	nop

0801bfc8 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 801bfc8:	b480      	push	{r7}
 801bfca:	b083      	sub	sp, #12
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	6078      	str	r0, [r7, #4]
 801bfd0:	460b      	mov	r3, r1
 801bfd2:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	887a      	ldrh	r2, [r7, #2]
 801bfd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 801bfdc:	f107 070c 	add.w	r7, r7, #12
 801bfe0:	46bd      	mov	sp, r7
 801bfe2:	bc80      	pop	{r7}
 801bfe4:	4770      	bx	lr
 801bfe6:	bf00      	nop

0801bfe8 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801bfe8:	b480      	push	{r7}
 801bfea:	b087      	sub	sp, #28
 801bfec:	af00      	add	r7, sp, #0
 801bfee:	60f8      	str	r0, [r7, #12]
 801bff0:	8179      	strh	r1, [r7, #10]
 801bff2:	813a      	strh	r2, [r7, #8]
 801bff4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 801bff6:	f04f 0300 	mov.w	r3, #0
 801bffa:	82fb      	strh	r3, [r7, #22]
 801bffc:	f04f 0300 	mov.w	r3, #0
 801c000:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	8c1b      	ldrh	r3, [r3, #32]
 801c006:	b29b      	uxth	r3, r3
 801c008:	f023 0301 	bic.w	r3, r3, #1
 801c00c:	b29a      	uxth	r2, r3
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	8b1b      	ldrh	r3, [r3, #24]
 801c016:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801c018:	68fb      	ldr	r3, [r7, #12]
 801c01a:	8c1b      	ldrh	r3, [r3, #32]
 801c01c:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 801c01e:	8afb      	ldrh	r3, [r7, #22]
 801c020:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 801c024:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 801c026:	88fb      	ldrh	r3, [r7, #6]
 801c028:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c02c:	b29a      	uxth	r2, r3
 801c02e:	893b      	ldrh	r3, [r7, #8]
 801c030:	4313      	orrs	r3, r2
 801c032:	b29a      	uxth	r2, r3
 801c034:	8afb      	ldrh	r3, [r7, #22]
 801c036:	4313      	orrs	r3, r2
 801c038:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801c03a:	8abb      	ldrh	r3, [r7, #20]
 801c03c:	f023 030a 	bic.w	r3, r3, #10
 801c040:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 801c042:	897a      	ldrh	r2, [r7, #10]
 801c044:	8abb      	ldrh	r3, [r7, #20]
 801c046:	4313      	orrs	r3, r2
 801c048:	b29b      	uxth	r3, r3
 801c04a:	f043 0301 	orr.w	r3, r3, #1
 801c04e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801c050:	68fb      	ldr	r3, [r7, #12]
 801c052:	8afa      	ldrh	r2, [r7, #22]
 801c054:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	8aba      	ldrh	r2, [r7, #20]
 801c05a:	841a      	strh	r2, [r3, #32]
}
 801c05c:	f107 071c 	add.w	r7, r7, #28
 801c060:	46bd      	mov	sp, r7
 801c062:	bc80      	pop	{r7}
 801c064:	4770      	bx	lr
 801c066:	bf00      	nop

0801c068 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801c068:	b480      	push	{r7}
 801c06a:	b087      	sub	sp, #28
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	60f8      	str	r0, [r7, #12]
 801c070:	8179      	strh	r1, [r7, #10]
 801c072:	813a      	strh	r2, [r7, #8]
 801c074:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 801c076:	f04f 0300 	mov.w	r3, #0
 801c07a:	82fb      	strh	r3, [r7, #22]
 801c07c:	f04f 0300 	mov.w	r3, #0
 801c080:	82bb      	strh	r3, [r7, #20]
 801c082:	f04f 0300 	mov.w	r3, #0
 801c086:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	8c1b      	ldrh	r3, [r3, #32]
 801c08c:	b29b      	uxth	r3, r3
 801c08e:	f023 0310 	bic.w	r3, r3, #16
 801c092:	b29a      	uxth	r2, r3
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	8b1b      	ldrh	r3, [r3, #24]
 801c09c:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	8c1b      	ldrh	r3, [r3, #32]
 801c0a2:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 801c0a4:	897b      	ldrh	r3, [r7, #10]
 801c0a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c0aa:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 801c0ac:	8afb      	ldrh	r3, [r7, #22]
 801c0ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c0b2:	ea4f 5303 	mov.w	r3, r3, lsl #20
 801c0b6:	ea4f 5313 	mov.w	r3, r3, lsr #20
 801c0ba:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 801c0bc:	88fb      	ldrh	r3, [r7, #6]
 801c0be:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801c0c2:	b29a      	uxth	r2, r3
 801c0c4:	8afb      	ldrh	r3, [r7, #22]
 801c0c6:	4313      	orrs	r3, r2
 801c0c8:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 801c0ca:	893b      	ldrh	r3, [r7, #8]
 801c0cc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c0d0:	b29a      	uxth	r2, r3
 801c0d2:	8afb      	ldrh	r3, [r7, #22]
 801c0d4:	4313      	orrs	r3, r2
 801c0d6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801c0d8:	8abb      	ldrh	r3, [r7, #20]
 801c0da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801c0de:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 801c0e0:	8a7a      	ldrh	r2, [r7, #18]
 801c0e2:	8abb      	ldrh	r3, [r7, #20]
 801c0e4:	4313      	orrs	r3, r2
 801c0e6:	b29b      	uxth	r3, r3
 801c0e8:	f043 0310 	orr.w	r3, r3, #16
 801c0ec:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	8afa      	ldrh	r2, [r7, #22]
 801c0f2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801c0f4:	68fb      	ldr	r3, [r7, #12]
 801c0f6:	8aba      	ldrh	r2, [r7, #20]
 801c0f8:	841a      	strh	r2, [r3, #32]
}
 801c0fa:	f107 071c 	add.w	r7, r7, #28
 801c0fe:	46bd      	mov	sp, r7
 801c100:	bc80      	pop	{r7}
 801c102:	4770      	bx	lr

0801c104 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801c104:	b480      	push	{r7}
 801c106:	b087      	sub	sp, #28
 801c108:	af00      	add	r7, sp, #0
 801c10a:	60f8      	str	r0, [r7, #12]
 801c10c:	8179      	strh	r1, [r7, #10]
 801c10e:	813a      	strh	r2, [r7, #8]
 801c110:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 801c112:	f04f 0300 	mov.w	r3, #0
 801c116:	82fb      	strh	r3, [r7, #22]
 801c118:	f04f 0300 	mov.w	r3, #0
 801c11c:	82bb      	strh	r3, [r7, #20]
 801c11e:	f04f 0300 	mov.w	r3, #0
 801c122:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	8c1b      	ldrh	r3, [r3, #32]
 801c128:	b29b      	uxth	r3, r3
 801c12a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c12e:	b29a      	uxth	r2, r3
 801c130:	68fb      	ldr	r3, [r7, #12]
 801c132:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	8b9b      	ldrh	r3, [r3, #28]
 801c138:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	8c1b      	ldrh	r3, [r3, #32]
 801c13e:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 801c140:	897b      	ldrh	r3, [r7, #10]
 801c142:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c146:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 801c148:	8afb      	ldrh	r3, [r7, #22]
 801c14a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 801c14e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 801c150:	88fb      	ldrh	r3, [r7, #6]
 801c152:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c156:	b29a      	uxth	r2, r3
 801c158:	893b      	ldrh	r3, [r7, #8]
 801c15a:	4313      	orrs	r3, r2
 801c15c:	b29a      	uxth	r2, r3
 801c15e:	8afb      	ldrh	r3, [r7, #22]
 801c160:	4313      	orrs	r3, r2
 801c162:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801c164:	8abb      	ldrh	r3, [r7, #20]
 801c166:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801c16a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 801c16c:	8a7a      	ldrh	r2, [r7, #18]
 801c16e:	8abb      	ldrh	r3, [r7, #20]
 801c170:	4313      	orrs	r3, r2
 801c172:	b29b      	uxth	r3, r3
 801c174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c178:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801c17a:	68fb      	ldr	r3, [r7, #12]
 801c17c:	8afa      	ldrh	r2, [r7, #22]
 801c17e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	8aba      	ldrh	r2, [r7, #20]
 801c184:	841a      	strh	r2, [r3, #32]
}
 801c186:	f107 071c 	add.w	r7, r7, #28
 801c18a:	46bd      	mov	sp, r7
 801c18c:	bc80      	pop	{r7}
 801c18e:	4770      	bx	lr

0801c190 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801c190:	b480      	push	{r7}
 801c192:	b087      	sub	sp, #28
 801c194:	af00      	add	r7, sp, #0
 801c196:	60f8      	str	r0, [r7, #12]
 801c198:	8179      	strh	r1, [r7, #10]
 801c19a:	813a      	strh	r2, [r7, #8]
 801c19c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 801c19e:	f04f 0300 	mov.w	r3, #0
 801c1a2:	82fb      	strh	r3, [r7, #22]
 801c1a4:	f04f 0300 	mov.w	r3, #0
 801c1a8:	82bb      	strh	r3, [r7, #20]
 801c1aa:	f04f 0300 	mov.w	r3, #0
 801c1ae:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	8c1b      	ldrh	r3, [r3, #32]
 801c1b4:	b29b      	uxth	r3, r3
 801c1b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c1ba:	b29a      	uxth	r2, r3
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	8b9b      	ldrh	r3, [r3, #28]
 801c1c4:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801c1c6:	68fb      	ldr	r3, [r7, #12]
 801c1c8:	8c1b      	ldrh	r3, [r3, #32]
 801c1ca:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 801c1cc:	897b      	ldrh	r3, [r7, #10]
 801c1ce:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801c1d2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 801c1d4:	8afb      	ldrh	r3, [r7, #22]
 801c1d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c1da:	ea4f 5303 	mov.w	r3, r3, lsl #20
 801c1de:	ea4f 5313 	mov.w	r3, r3, lsr #20
 801c1e2:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 801c1e4:	893b      	ldrh	r3, [r7, #8]
 801c1e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c1ea:	b29a      	uxth	r2, r3
 801c1ec:	8afb      	ldrh	r3, [r7, #22]
 801c1ee:	4313      	orrs	r3, r2
 801c1f0:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 801c1f2:	88fb      	ldrh	r3, [r7, #6]
 801c1f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801c1f8:	b29a      	uxth	r2, r3
 801c1fa:	8afb      	ldrh	r3, [r7, #22]
 801c1fc:	4313      	orrs	r3, r2
 801c1fe:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801c200:	8abb      	ldrh	r3, [r7, #20]
 801c202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c206:	ea4f 4343 	mov.w	r3, r3, lsl #17
 801c20a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 801c20e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 801c210:	8a7a      	ldrh	r2, [r7, #18]
 801c212:	8abb      	ldrh	r3, [r7, #20]
 801c214:	4313      	orrs	r3, r2
 801c216:	b29b      	uxth	r3, r3
 801c218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801c21c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	8afa      	ldrh	r2, [r7, #22]
 801c222:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	8aba      	ldrh	r2, [r7, #20]
 801c228:	841a      	strh	r2, [r3, #32]
}
 801c22a:	f107 071c 	add.w	r7, r7, #28
 801c22e:	46bd      	mov	sp, r7
 801c230:	bc80      	pop	{r7}
 801c232:	4770      	bx	lr

0801c234 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 801c234:	b580      	push	{r7, lr}
 801c236:	b082      	sub	sp, #8
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 801c23c:	687a      	ldr	r2, [r7, #4]
 801c23e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801c242:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c246:	429a      	cmp	r2, r3
 801c248:	d10c      	bne.n	801c264 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 801c24a:	f04f 0010 	mov.w	r0, #16
 801c24e:	f04f 0101 	mov.w	r1, #1
 801c252:	f7fb f8af 	bl	80173b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 801c256:	f04f 0010 	mov.w	r0, #16
 801c25a:	f04f 0100 	mov.w	r1, #0
 801c25e:	f7fb f8a9 	bl	80173b4 <RCC_APB2PeriphResetCmd>
 801c262:	e062      	b.n	801c32a <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 801c264:	687a      	ldr	r2, [r7, #4]
 801c266:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 801c26a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801c26e:	429a      	cmp	r2, r3
 801c270:	d10c      	bne.n	801c28c <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 801c272:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801c276:	f04f 0101 	mov.w	r1, #1
 801c27a:	f7fb f86f 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 801c27e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801c282:	f04f 0100 	mov.w	r1, #0
 801c286:	f7fb f869 	bl	801735c <RCC_APB1PeriphResetCmd>
 801c28a:	e04e      	b.n	801c32a <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 801c28c:	687a      	ldr	r2, [r7, #4]
 801c28e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 801c292:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801c296:	429a      	cmp	r2, r3
 801c298:	d10c      	bne.n	801c2b4 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 801c29a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801c29e:	f04f 0101 	mov.w	r1, #1
 801c2a2:	f7fb f85b 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 801c2a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801c2aa:	f04f 0100 	mov.w	r1, #0
 801c2ae:	f7fb f855 	bl	801735c <RCC_APB1PeriphResetCmd>
 801c2b2:	e03a      	b.n	801c32a <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 801c2b4:	687a      	ldr	r2, [r7, #4]
 801c2b6:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 801c2ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801c2be:	429a      	cmp	r2, r3
 801c2c0:	d10c      	bne.n	801c2dc <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 801c2c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801c2c6:	f04f 0101 	mov.w	r1, #1
 801c2ca:	f7fb f847 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 801c2ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801c2d2:	f04f 0100 	mov.w	r1, #0
 801c2d6:	f7fb f841 	bl	801735c <RCC_APB1PeriphResetCmd>
 801c2da:	e026      	b.n	801c32a <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 801c2dc:	687a      	ldr	r2, [r7, #4]
 801c2de:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 801c2e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801c2e6:	429a      	cmp	r2, r3
 801c2e8:	d10c      	bne.n	801c304 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 801c2ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801c2ee:	f04f 0101 	mov.w	r1, #1
 801c2f2:	f7fb f833 	bl	801735c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 801c2f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801c2fa:	f04f 0100 	mov.w	r1, #0
 801c2fe:	f7fb f82d 	bl	801735c <RCC_APB1PeriphResetCmd>
 801c302:	e012      	b.n	801c32a <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 801c304:	687a      	ldr	r2, [r7, #4]
 801c306:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801c30a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c30e:	429a      	cmp	r2, r3
 801c310:	d10b      	bne.n	801c32a <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 801c312:	f04f 0020 	mov.w	r0, #32
 801c316:	f04f 0101 	mov.w	r1, #1
 801c31a:	f7fb f84b 	bl	80173b4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 801c31e:	f04f 0020 	mov.w	r0, #32
 801c322:	f04f 0100 	mov.w	r1, #0
 801c326:	f7fb f845 	bl	80173b4 <RCC_APB2PeriphResetCmd>
    }
  }
}
 801c32a:	f107 0708 	add.w	r7, r7, #8
 801c32e:	46bd      	mov	sp, r7
 801c330:	bd80      	pop	{r7, pc}
 801c332:	bf00      	nop

0801c334 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b08a      	sub	sp, #40	; 0x28
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
 801c33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 801c33e:	f04f 0300 	mov.w	r3, #0
 801c342:	627b      	str	r3, [r7, #36]	; 0x24
 801c344:	f04f 0300 	mov.w	r3, #0
 801c348:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 801c34a:	f04f 0300 	mov.w	r3, #0
 801c34e:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 801c350:	f04f 0300 	mov.w	r3, #0
 801c354:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	8a1b      	ldrh	r3, [r3, #16]
 801c35a:	b29b      	uxth	r3, r3
 801c35c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 801c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c360:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801c364:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 801c366:	683b      	ldr	r3, [r7, #0]
 801c368:	88db      	ldrh	r3, [r3, #6]
 801c36a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c36c:	4313      	orrs	r3, r2
 801c36e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 801c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c372:	b29a      	uxth	r2, r3
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	899b      	ldrh	r3, [r3, #12]
 801c37c:	b29b      	uxth	r3, r3
 801c37e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 801c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c382:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 801c386:	f023 030c 	bic.w	r3, r3, #12
 801c38a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 801c38c:	683b      	ldr	r3, [r7, #0]
 801c38e:	889a      	ldrh	r2, [r3, #4]
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	891b      	ldrh	r3, [r3, #8]
 801c394:	4313      	orrs	r3, r2
 801c396:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 801c398:	683b      	ldr	r3, [r7, #0]
 801c39a:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 801c39c:	4313      	orrs	r3, r2
 801c39e:	b29b      	uxth	r3, r3
 801c3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3a2:	4313      	orrs	r3, r2
 801c3a4:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 801c3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3a8:	b29a      	uxth	r2, r3
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	8a9b      	ldrh	r3, [r3, #20]
 801c3b2:	b29b      	uxth	r3, r3
 801c3b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 801c3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c3bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 801c3be:	683b      	ldr	r3, [r7, #0]
 801c3c0:	899b      	ldrh	r3, [r3, #12]
 801c3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3c4:	4313      	orrs	r3, r2
 801c3c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 801c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3ca:	b29a      	uxth	r2, r3
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 801c3d0:	f107 0308 	add.w	r3, r7, #8
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	f7fa fd0d 	bl	8016df4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 801c3da:	687a      	ldr	r2, [r7, #4]
 801c3dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801c3e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c3e4:	429a      	cmp	r2, r3
 801c3e6:	d006      	beq.n	801c3f6 <USART_Init+0xc2>
 801c3e8:	687a      	ldr	r2, [r7, #4]
 801c3ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801c3ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801c3f2:	429a      	cmp	r2, r3
 801c3f4:	d102      	bne.n	801c3fc <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 801c3f6:	697b      	ldr	r3, [r7, #20]
 801c3f8:	623b      	str	r3, [r7, #32]
 801c3fa:	e001      	b.n	801c400 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 801c3fc:	693b      	ldr	r3, [r7, #16]
 801c3fe:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	899b      	ldrh	r3, [r3, #12]
 801c404:	b29b      	uxth	r3, r3
 801c406:	b29b      	uxth	r3, r3
 801c408:	b21b      	sxth	r3, r3
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	da0f      	bge.n	801c42e <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 801c40e:	6a3a      	ldr	r2, [r7, #32]
 801c410:	4613      	mov	r3, r2
 801c412:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801c416:	189b      	adds	r3, r3, r2
 801c418:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801c41c:	189a      	adds	r2, r3, r2
 801c41e:	683b      	ldr	r3, [r7, #0]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c426:	fbb2 f3f3 	udiv	r3, r2, r3
 801c42a:	61fb      	str	r3, [r7, #28]
 801c42c:	e00e      	b.n	801c44c <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 801c42e:	6a3a      	ldr	r2, [r7, #32]
 801c430:	4613      	mov	r3, r2
 801c432:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801c436:	189b      	adds	r3, r3, r2
 801c438:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801c43c:	189a      	adds	r2, r3, r2
 801c43e:	683b      	ldr	r3, [r7, #0]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801c446:	fbb2 f3f3 	udiv	r3, r2, r3
 801c44a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 801c44c:	69fa      	ldr	r2, [r7, #28]
 801c44e:	f248 531f 	movw	r3, #34079	; 0x851f
 801c452:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 801c456:	fba3 1302 	umull	r1, r3, r3, r2
 801c45a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801c45e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c462:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 801c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c466:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801c46a:	f04f 0264 	mov.w	r2, #100	; 0x64
 801c46e:	fb02 f303 	mul.w	r3, r2, r3
 801c472:	69fa      	ldr	r2, [r7, #28]
 801c474:	1ad3      	subs	r3, r2, r3
 801c476:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	899b      	ldrh	r3, [r3, #12]
 801c47c:	b29b      	uxth	r3, r3
 801c47e:	b29b      	uxth	r3, r3
 801c480:	b21b      	sxth	r3, r3
 801c482:	2b00      	cmp	r3, #0
 801c484:	da12      	bge.n	801c4ac <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 801c486:	69bb      	ldr	r3, [r7, #24]
 801c488:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801c48c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801c490:	f248 531f 	movw	r3, #34079	; 0x851f
 801c494:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 801c498:	fba3 1302 	umull	r1, r3, r3, r2
 801c49c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801c4a0:	f003 0307 	and.w	r3, r3, #7
 801c4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c4a6:	4313      	orrs	r3, r2
 801c4a8:	627b      	str	r3, [r7, #36]	; 0x24
 801c4aa:	e011      	b.n	801c4d0 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 801c4ac:	69bb      	ldr	r3, [r7, #24]
 801c4ae:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c4b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801c4b6:	f248 531f 	movw	r3, #34079	; 0x851f
 801c4ba:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 801c4be:	fba3 1302 	umull	r1, r3, r3, r2
 801c4c2:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801c4c6:	f003 030f 	and.w	r3, r3, #15
 801c4ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c4cc:	4313      	orrs	r3, r2
 801c4ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 801c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4d2:	b29a      	uxth	r2, r3
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	811a      	strh	r2, [r3, #8]
}
 801c4d8:	f107 0728 	add.w	r7, r7, #40	; 0x28
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	bd80      	pop	{r7, pc}

0801c4e0 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 801c4e0:	b480      	push	{r7}
 801c4e2:	b083      	sub	sp, #12
 801c4e4:	af00      	add	r7, sp, #0
 801c4e6:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801c4ee:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	f04f 0200 	mov.w	r2, #0
 801c4f6:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	f04f 0200 	mov.w	r2, #0
 801c4fe:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	f04f 0200 	mov.w	r2, #0
 801c506:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	f04f 020c 	mov.w	r2, #12
 801c50e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	f04f 0200 	mov.w	r2, #0
 801c516:	819a      	strh	r2, [r3, #12]
}
 801c518:	f107 070c 	add.w	r7, r7, #12
 801c51c:	46bd      	mov	sp, r7
 801c51e:	bc80      	pop	{r7}
 801c520:	4770      	bx	lr
 801c522:	bf00      	nop

0801c524 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 801c524:	b480      	push	{r7}
 801c526:	b085      	sub	sp, #20
 801c528:	af00      	add	r7, sp, #0
 801c52a:	6078      	str	r0, [r7, #4]
 801c52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 801c52e:	f04f 0300 	mov.w	r3, #0
 801c532:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	8a1b      	ldrh	r3, [r3, #16]
 801c538:	b29b      	uxth	r3, r3
 801c53a:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801c542:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801c544:	683b      	ldr	r3, [r7, #0]
 801c546:	881a      	ldrh	r2, [r3, #0]
 801c548:	683b      	ldr	r3, [r7, #0]
 801c54a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 801c54c:	4313      	orrs	r3, r2
 801c54e:	b29a      	uxth	r2, r3
 801c550:	683b      	ldr	r3, [r7, #0]
 801c552:	889b      	ldrh	r3, [r3, #4]
 801c554:	4313      	orrs	r3, r2
 801c556:	b29a      	uxth	r2, r3
 801c558:	683b      	ldr	r3, [r7, #0]
 801c55a:	88db      	ldrh	r3, [r3, #6]
 801c55c:	4313      	orrs	r3, r2
 801c55e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801c560:	68fa      	ldr	r2, [r7, #12]
 801c562:	4313      	orrs	r3, r2
 801c564:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	b29a      	uxth	r2, r3
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	821a      	strh	r2, [r3, #16]
}
 801c56e:	f107 0714 	add.w	r7, r7, #20
 801c572:	46bd      	mov	sp, r7
 801c574:	bc80      	pop	{r7}
 801c576:	4770      	bx	lr

0801c578 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 801c578:	b480      	push	{r7}
 801c57a:	b083      	sub	sp, #12
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	f04f 0200 	mov.w	r2, #0
 801c586:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	f04f 0200 	mov.w	r2, #0
 801c58e:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	f04f 0200 	mov.w	r2, #0
 801c596:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	f04f 0200 	mov.w	r2, #0
 801c59e:	80da      	strh	r2, [r3, #6]
}
 801c5a0:	f107 070c 	add.w	r7, r7, #12
 801c5a4:	46bd      	mov	sp, r7
 801c5a6:	bc80      	pop	{r7}
 801c5a8:	4770      	bx	lr
 801c5aa:	bf00      	nop

0801c5ac <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801c5ac:	b480      	push	{r7}
 801c5ae:	b083      	sub	sp, #12
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	6078      	str	r0, [r7, #4]
 801c5b4:	460b      	mov	r3, r1
 801c5b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801c5b8:	78fb      	ldrb	r3, [r7, #3]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d008      	beq.n	801c5d0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	899b      	ldrh	r3, [r3, #12]
 801c5c2:	b29b      	uxth	r3, r3
 801c5c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c5c8:	b29a      	uxth	r2, r3
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	819a      	strh	r2, [r3, #12]
 801c5ce:	e007      	b.n	801c5e0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	899b      	ldrh	r3, [r3, #12]
 801c5d4:	b29b      	uxth	r3, r3
 801c5d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c5da:	b29a      	uxth	r2, r3
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	819a      	strh	r2, [r3, #12]
  }
}
 801c5e0:	f107 070c 	add.w	r7, r7, #12
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	bc80      	pop	{r7}
 801c5e8:	4770      	bx	lr
 801c5ea:	bf00      	nop

0801c5ec <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 801c5ec:	b480      	push	{r7}
 801c5ee:	b083      	sub	sp, #12
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	6078      	str	r0, [r7, #4]
 801c5f4:	460b      	mov	r3, r1
 801c5f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	8b1b      	ldrh	r3, [r3, #24]
 801c5fc:	b29b      	uxth	r3, r3
 801c5fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801c602:	b29a      	uxth	r2, r3
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	8b1b      	ldrh	r3, [r3, #24]
 801c60c:	b29a      	uxth	r2, r3
 801c60e:	78fb      	ldrb	r3, [r7, #3]
 801c610:	b29b      	uxth	r3, r3
 801c612:	4313      	orrs	r3, r2
 801c614:	b29a      	uxth	r2, r3
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	831a      	strh	r2, [r3, #24]
}
 801c61a:	f107 070c 	add.w	r7, r7, #12
 801c61e:	46bd      	mov	sp, r7
 801c620:	bc80      	pop	{r7}
 801c622:	4770      	bx	lr

0801c624 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801c624:	b480      	push	{r7}
 801c626:	b083      	sub	sp, #12
 801c628:	af00      	add	r7, sp, #0
 801c62a:	6078      	str	r0, [r7, #4]
 801c62c:	460b      	mov	r3, r1
 801c62e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801c630:	78fb      	ldrb	r3, [r7, #3]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d00a      	beq.n	801c64c <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	899b      	ldrh	r3, [r3, #12]
 801c63a:	b29b      	uxth	r3, r3
 801c63c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801c640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801c644:	b29a      	uxth	r2, r3
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	819a      	strh	r2, [r3, #12]
 801c64a:	e009      	b.n	801c660 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	899b      	ldrh	r3, [r3, #12]
 801c650:	b29b      	uxth	r3, r3
 801c652:	ea4f 4343 	mov.w	r3, r3, lsl #17
 801c656:	ea4f 4353 	mov.w	r3, r3, lsr #17
 801c65a:	b29a      	uxth	r2, r3
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	819a      	strh	r2, [r3, #12]
  }
}  
 801c660:	f107 070c 	add.w	r7, r7, #12
 801c664:	46bd      	mov	sp, r7
 801c666:	bc80      	pop	{r7}
 801c668:	4770      	bx	lr
 801c66a:	bf00      	nop

0801c66c <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801c66c:	b480      	push	{r7}
 801c66e:	b083      	sub	sp, #12
 801c670:	af00      	add	r7, sp, #0
 801c672:	6078      	str	r0, [r7, #4]
 801c674:	460b      	mov	r3, r1
 801c676:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801c678:	78fb      	ldrb	r3, [r7, #3]
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d008      	beq.n	801c690 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	8a9b      	ldrh	r3, [r3, #20]
 801c682:	b29b      	uxth	r3, r3
 801c684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c688:	b29a      	uxth	r2, r3
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	829a      	strh	r2, [r3, #20]
 801c68e:	e007      	b.n	801c6a0 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	8a9b      	ldrh	r3, [r3, #20]
 801c694:	b29b      	uxth	r3, r3
 801c696:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c69a:	b29a      	uxth	r2, r3
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	829a      	strh	r2, [r3, #20]
  }
}
 801c6a0:	f107 070c 	add.w	r7, r7, #12
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	bc80      	pop	{r7}
 801c6a8:	4770      	bx	lr
 801c6aa:	bf00      	nop

0801c6ac <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 801c6ac:	b480      	push	{r7}
 801c6ae:	b083      	sub	sp, #12
 801c6b0:	af00      	add	r7, sp, #0
 801c6b2:	6078      	str	r0, [r7, #4]
 801c6b4:	460b      	mov	r3, r1
 801c6b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 801c6b8:	887b      	ldrh	r3, [r7, #2]
 801c6ba:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801c6be:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801c6c2:	b29a      	uxth	r2, r3
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	809a      	strh	r2, [r3, #4]
}
 801c6c8:	f107 070c 	add.w	r7, r7, #12
 801c6cc:	46bd      	mov	sp, r7
 801c6ce:	bc80      	pop	{r7}
 801c6d0:	4770      	bx	lr
 801c6d2:	bf00      	nop

0801c6d4 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 801c6d4:	b480      	push	{r7}
 801c6d6:	b083      	sub	sp, #12
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	889b      	ldrh	r3, [r3, #4]
 801c6e0:	b29b      	uxth	r3, r3
 801c6e2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801c6e6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801c6ea:	b29b      	uxth	r3, r3
}
 801c6ec:	4618      	mov	r0, r3
 801c6ee:	f107 070c 	add.w	r7, r7, #12
 801c6f2:	46bd      	mov	sp, r7
 801c6f4:	bc80      	pop	{r7}
 801c6f6:	4770      	bx	lr

0801c6f8 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 801c6f8:	b480      	push	{r7}
 801c6fa:	b083      	sub	sp, #12
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	6078      	str	r0, [r7, #4]
 801c700:	460b      	mov	r3, r1
 801c702:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	8a1b      	ldrh	r3, [r3, #16]
 801c708:	b29b      	uxth	r3, r3
 801c70a:	f023 030f 	bic.w	r3, r3, #15
 801c70e:	b29a      	uxth	r2, r3
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	8a1b      	ldrh	r3, [r3, #16]
 801c718:	b29a      	uxth	r2, r3
 801c71a:	78fb      	ldrb	r3, [r7, #3]
 801c71c:	b29b      	uxth	r3, r3
 801c71e:	4313      	orrs	r3, r2
 801c720:	b29a      	uxth	r2, r3
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	821a      	strh	r2, [r3, #16]
}
 801c726:	f107 070c 	add.w	r7, r7, #12
 801c72a:	46bd      	mov	sp, r7
 801c72c:	bc80      	pop	{r7}
 801c72e:	4770      	bx	lr

0801c730 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801c730:	b480      	push	{r7}
 801c732:	b083      	sub	sp, #12
 801c734:	af00      	add	r7, sp, #0
 801c736:	6078      	str	r0, [r7, #4]
 801c738:	460b      	mov	r3, r1
 801c73a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 801c73c:	78fb      	ldrb	r3, [r7, #3]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d008      	beq.n	801c754 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	899b      	ldrh	r3, [r3, #12]
 801c746:	b29b      	uxth	r3, r3
 801c748:	f043 0302 	orr.w	r3, r3, #2
 801c74c:	b29a      	uxth	r2, r3
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	819a      	strh	r2, [r3, #12]
 801c752:	e007      	b.n	801c764 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	899b      	ldrh	r3, [r3, #12]
 801c758:	b29b      	uxth	r3, r3
 801c75a:	f023 0302 	bic.w	r3, r3, #2
 801c75e:	b29a      	uxth	r2, r3
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	819a      	strh	r2, [r3, #12]
  }
}
 801c764:	f107 070c 	add.w	r7, r7, #12
 801c768:	46bd      	mov	sp, r7
 801c76a:	bc80      	pop	{r7}
 801c76c:	4770      	bx	lr
 801c76e:	bf00      	nop

0801c770 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 801c770:	b480      	push	{r7}
 801c772:	b083      	sub	sp, #12
 801c774:	af00      	add	r7, sp, #0
 801c776:	6078      	str	r0, [r7, #4]
 801c778:	460b      	mov	r3, r1
 801c77a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	899b      	ldrh	r3, [r3, #12]
 801c780:	b29b      	uxth	r3, r3
 801c782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c786:	b29a      	uxth	r2, r3
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	899b      	ldrh	r3, [r3, #12]
 801c790:	b29a      	uxth	r2, r3
 801c792:	887b      	ldrh	r3, [r7, #2]
 801c794:	4313      	orrs	r3, r2
 801c796:	b29a      	uxth	r2, r3
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	819a      	strh	r2, [r3, #12]
}
 801c79c:	f107 070c 	add.w	r7, r7, #12
 801c7a0:	46bd      	mov	sp, r7
 801c7a2:	bc80      	pop	{r7}
 801c7a4:	4770      	bx	lr
 801c7a6:	bf00      	nop

0801c7a8 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 801c7a8:	b480      	push	{r7}
 801c7aa:	b083      	sub	sp, #12
 801c7ac:	af00      	add	r7, sp, #0
 801c7ae:	6078      	str	r0, [r7, #4]
 801c7b0:	460b      	mov	r3, r1
 801c7b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	8a1b      	ldrh	r3, [r3, #16]
 801c7b8:	b29b      	uxth	r3, r3
 801c7ba:	f023 0320 	bic.w	r3, r3, #32
 801c7be:	b29a      	uxth	r2, r3
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	8a1b      	ldrh	r3, [r3, #16]
 801c7c8:	b29a      	uxth	r2, r3
 801c7ca:	887b      	ldrh	r3, [r7, #2]
 801c7cc:	4313      	orrs	r3, r2
 801c7ce:	b29a      	uxth	r2, r3
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	821a      	strh	r2, [r3, #16]
}
 801c7d4:	f107 070c 	add.w	r7, r7, #12
 801c7d8:	46bd      	mov	sp, r7
 801c7da:	bc80      	pop	{r7}
 801c7dc:	4770      	bx	lr
 801c7de:	bf00      	nop

0801c7e0 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801c7e0:	b480      	push	{r7}
 801c7e2:	b083      	sub	sp, #12
 801c7e4:	af00      	add	r7, sp, #0
 801c7e6:	6078      	str	r0, [r7, #4]
 801c7e8:	460b      	mov	r3, r1
 801c7ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801c7ec:	78fb      	ldrb	r3, [r7, #3]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d008      	beq.n	801c804 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	8a1b      	ldrh	r3, [r3, #16]
 801c7f6:	b29b      	uxth	r3, r3
 801c7f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c7fc:	b29a      	uxth	r2, r3
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	821a      	strh	r2, [r3, #16]
 801c802:	e007      	b.n	801c814 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	8a1b      	ldrh	r3, [r3, #16]
 801c808:	b29b      	uxth	r3, r3
 801c80a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801c80e:	b29a      	uxth	r2, r3
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	821a      	strh	r2, [r3, #16]
  }
}
 801c814:	f107 070c 	add.w	r7, r7, #12
 801c818:	46bd      	mov	sp, r7
 801c81a:	bc80      	pop	{r7}
 801c81c:	4770      	bx	lr
 801c81e:	bf00      	nop

0801c820 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 801c820:	b480      	push	{r7}
 801c822:	b083      	sub	sp, #12
 801c824:	af00      	add	r7, sp, #0
 801c826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	899b      	ldrh	r3, [r3, #12]
 801c82c:	b29b      	uxth	r3, r3
 801c82e:	f043 0301 	orr.w	r3, r3, #1
 801c832:	b29a      	uxth	r2, r3
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	819a      	strh	r2, [r3, #12]
}
 801c838:	f107 070c 	add.w	r7, r7, #12
 801c83c:	46bd      	mov	sp, r7
 801c83e:	bc80      	pop	{r7}
 801c840:	4770      	bx	lr
 801c842:	bf00      	nop

0801c844 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801c844:	b480      	push	{r7}
 801c846:	b083      	sub	sp, #12
 801c848:	af00      	add	r7, sp, #0
 801c84a:	6078      	str	r0, [r7, #4]
 801c84c:	460b      	mov	r3, r1
 801c84e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801c850:	78fb      	ldrb	r3, [r7, #3]
 801c852:	2b00      	cmp	r3, #0
 801c854:	d008      	beq.n	801c868 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	8a9b      	ldrh	r3, [r3, #20]
 801c85a:	b29b      	uxth	r3, r3
 801c85c:	f043 0308 	orr.w	r3, r3, #8
 801c860:	b29a      	uxth	r2, r3
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	829a      	strh	r2, [r3, #20]
 801c866:	e007      	b.n	801c878 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	8a9b      	ldrh	r3, [r3, #20]
 801c86c:	b29b      	uxth	r3, r3
 801c86e:	f023 0308 	bic.w	r3, r3, #8
 801c872:	b29a      	uxth	r2, r3
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	829a      	strh	r2, [r3, #20]
  }
}
 801c878:	f107 070c 	add.w	r7, r7, #12
 801c87c:	46bd      	mov	sp, r7
 801c87e:	bc80      	pop	{r7}
 801c880:	4770      	bx	lr
 801c882:	bf00      	nop

0801c884 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 801c884:	b480      	push	{r7}
 801c886:	b083      	sub	sp, #12
 801c888:	af00      	add	r7, sp, #0
 801c88a:	6078      	str	r0, [r7, #4]
 801c88c:	460b      	mov	r3, r1
 801c88e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	8b1b      	ldrh	r3, [r3, #24]
 801c894:	b29b      	uxth	r3, r3
 801c896:	b2db      	uxtb	r3, r3
 801c898:	b29a      	uxth	r2, r3
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	8b1b      	ldrh	r3, [r3, #24]
 801c8a2:	b29a      	uxth	r2, r3
 801c8a4:	78fb      	ldrb	r3, [r7, #3]
 801c8a6:	b29b      	uxth	r3, r3
 801c8a8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801c8ac:	b29b      	uxth	r3, r3
 801c8ae:	4313      	orrs	r3, r2
 801c8b0:	b29a      	uxth	r2, r3
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	831a      	strh	r2, [r3, #24]
}
 801c8b6:	f107 070c 	add.w	r7, r7, #12
 801c8ba:	46bd      	mov	sp, r7
 801c8bc:	bc80      	pop	{r7}
 801c8be:	4770      	bx	lr

0801c8c0 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801c8c0:	b480      	push	{r7}
 801c8c2:	b083      	sub	sp, #12
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
 801c8c8:	460b      	mov	r3, r1
 801c8ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801c8cc:	78fb      	ldrb	r3, [r7, #3]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d008      	beq.n	801c8e4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	8a9b      	ldrh	r3, [r3, #20]
 801c8d6:	b29b      	uxth	r3, r3
 801c8d8:	f043 0320 	orr.w	r3, r3, #32
 801c8dc:	b29a      	uxth	r2, r3
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	829a      	strh	r2, [r3, #20]
 801c8e2:	e007      	b.n	801c8f4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	8a9b      	ldrh	r3, [r3, #20]
 801c8e8:	b29b      	uxth	r3, r3
 801c8ea:	f023 0320 	bic.w	r3, r3, #32
 801c8ee:	b29a      	uxth	r2, r3
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	829a      	strh	r2, [r3, #20]
  }
}
 801c8f4:	f107 070c 	add.w	r7, r7, #12
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	bc80      	pop	{r7}
 801c8fc:	4770      	bx	lr
 801c8fe:	bf00      	nop

0801c900 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801c900:	b480      	push	{r7}
 801c902:	b083      	sub	sp, #12
 801c904:	af00      	add	r7, sp, #0
 801c906:	6078      	str	r0, [r7, #4]
 801c908:	460b      	mov	r3, r1
 801c90a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801c90c:	78fb      	ldrb	r3, [r7, #3]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d008      	beq.n	801c924 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	8a9b      	ldrh	r3, [r3, #20]
 801c916:	b29b      	uxth	r3, r3
 801c918:	f043 0310 	orr.w	r3, r3, #16
 801c91c:	b29a      	uxth	r2, r3
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	829a      	strh	r2, [r3, #20]
 801c922:	e007      	b.n	801c934 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	8a9b      	ldrh	r3, [r3, #20]
 801c928:	b29b      	uxth	r3, r3
 801c92a:	f023 0310 	bic.w	r3, r3, #16
 801c92e:	b29a      	uxth	r2, r3
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	829a      	strh	r2, [r3, #20]
  }
}
 801c934:	f107 070c 	add.w	r7, r7, #12
 801c938:	46bd      	mov	sp, r7
 801c93a:	bc80      	pop	{r7}
 801c93c:	4770      	bx	lr
 801c93e:	bf00      	nop

0801c940 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 801c940:	b480      	push	{r7}
 801c942:	b083      	sub	sp, #12
 801c944:	af00      	add	r7, sp, #0
 801c946:	6078      	str	r0, [r7, #4]
 801c948:	460b      	mov	r3, r1
 801c94a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	8a9b      	ldrh	r3, [r3, #20]
 801c950:	b29b      	uxth	r3, r3
 801c952:	f023 0304 	bic.w	r3, r3, #4
 801c956:	b29a      	uxth	r2, r3
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	8a9b      	ldrh	r3, [r3, #20]
 801c960:	b29a      	uxth	r2, r3
 801c962:	887b      	ldrh	r3, [r7, #2]
 801c964:	4313      	orrs	r3, r2
 801c966:	b29a      	uxth	r2, r3
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	829a      	strh	r2, [r3, #20]
}
 801c96c:	f107 070c 	add.w	r7, r7, #12
 801c970:	46bd      	mov	sp, r7
 801c972:	bc80      	pop	{r7}
 801c974:	4770      	bx	lr
 801c976:	bf00      	nop

0801c978 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801c978:	b480      	push	{r7}
 801c97a:	b083      	sub	sp, #12
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
 801c980:	460b      	mov	r3, r1
 801c982:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 801c984:	78fb      	ldrb	r3, [r7, #3]
 801c986:	2b00      	cmp	r3, #0
 801c988:	d008      	beq.n	801c99c <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	8a9b      	ldrh	r3, [r3, #20]
 801c98e:	b29b      	uxth	r3, r3
 801c990:	f043 0302 	orr.w	r3, r3, #2
 801c994:	b29a      	uxth	r2, r3
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	829a      	strh	r2, [r3, #20]
 801c99a:	e007      	b.n	801c9ac <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	8a9b      	ldrh	r3, [r3, #20]
 801c9a0:	b29b      	uxth	r3, r3
 801c9a2:	f023 0302 	bic.w	r3, r3, #2
 801c9a6:	b29a      	uxth	r2, r3
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	829a      	strh	r2, [r3, #20]
  }
}
 801c9ac:	f107 070c 	add.w	r7, r7, #12
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	bc80      	pop	{r7}
 801c9b4:	4770      	bx	lr
 801c9b6:	bf00      	nop

0801c9b8 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 801c9b8:	b480      	push	{r7}
 801c9ba:	b083      	sub	sp, #12
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
 801c9c0:	4613      	mov	r3, r2
 801c9c2:	460a      	mov	r2, r1
 801c9c4:	807a      	strh	r2, [r7, #2]
 801c9c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 801c9c8:	787b      	ldrb	r3, [r7, #1]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d008      	beq.n	801c9e0 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	8a9b      	ldrh	r3, [r3, #20]
 801c9d2:	b29a      	uxth	r2, r3
 801c9d4:	887b      	ldrh	r3, [r7, #2]
 801c9d6:	4313      	orrs	r3, r2
 801c9d8:	b29a      	uxth	r2, r3
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	829a      	strh	r2, [r3, #20]
 801c9de:	e00a      	b.n	801c9f6 <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	8a9b      	ldrh	r3, [r3, #20]
 801c9e4:	b29a      	uxth	r2, r3
 801c9e6:	887b      	ldrh	r3, [r7, #2]
 801c9e8:	ea6f 0303 	mvn.w	r3, r3
 801c9ec:	b29b      	uxth	r3, r3
 801c9ee:	4013      	ands	r3, r2
 801c9f0:	b29a      	uxth	r2, r3
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	829a      	strh	r2, [r3, #20]
  }
}
 801c9f6:	f107 070c 	add.w	r7, r7, #12
 801c9fa:	46bd      	mov	sp, r7
 801c9fc:	bc80      	pop	{r7}
 801c9fe:	4770      	bx	lr

0801ca00 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 801ca00:	b480      	push	{r7}
 801ca02:	b087      	sub	sp, #28
 801ca04:	af00      	add	r7, sp, #0
 801ca06:	6078      	str	r0, [r7, #4]
 801ca08:	4613      	mov	r3, r2
 801ca0a:	460a      	mov	r2, r1
 801ca0c:	807a      	strh	r2, [r7, #2]
 801ca0e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 801ca10:	f04f 0300 	mov.w	r3, #0
 801ca14:	613b      	str	r3, [r7, #16]
 801ca16:	f04f 0300 	mov.w	r3, #0
 801ca1a:	60fb      	str	r3, [r7, #12]
 801ca1c:	f04f 0300 	mov.w	r3, #0
 801ca20:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 801ca22:	f04f 0300 	mov.w	r3, #0
 801ca26:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 801ca2c:	887b      	ldrh	r3, [r7, #2]
 801ca2e:	b2db      	uxtb	r3, r3
 801ca30:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801ca34:	b2db      	uxtb	r3, r3
 801ca36:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 801ca38:	887b      	ldrh	r3, [r7, #2]
 801ca3a:	f003 031f 	and.w	r3, r3, #31
 801ca3e:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 801ca40:	68fb      	ldr	r3, [r7, #12]
 801ca42:	f04f 0201 	mov.w	r2, #1
 801ca46:	fa02 f303 	lsl.w	r3, r2, r3
 801ca4a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 801ca4c:	693b      	ldr	r3, [r7, #16]
 801ca4e:	2b01      	cmp	r3, #1
 801ca50:	d104      	bne.n	801ca5c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 801ca52:	697b      	ldr	r3, [r7, #20]
 801ca54:	f103 030c 	add.w	r3, r3, #12
 801ca58:	617b      	str	r3, [r7, #20]
 801ca5a:	e00b      	b.n	801ca74 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 801ca5c:	693b      	ldr	r3, [r7, #16]
 801ca5e:	2b02      	cmp	r3, #2
 801ca60:	d104      	bne.n	801ca6c <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 801ca62:	697b      	ldr	r3, [r7, #20]
 801ca64:	f103 0310 	add.w	r3, r3, #16
 801ca68:	617b      	str	r3, [r7, #20]
 801ca6a:	e003      	b.n	801ca74 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 801ca6c:	697b      	ldr	r3, [r7, #20]
 801ca6e:	f103 0314 	add.w	r3, r3, #20
 801ca72:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 801ca74:	787b      	ldrb	r3, [r7, #1]
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d006      	beq.n	801ca88 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 801ca7a:	697b      	ldr	r3, [r7, #20]
 801ca7c:	697a      	ldr	r2, [r7, #20]
 801ca7e:	6811      	ldr	r1, [r2, #0]
 801ca80:	68ba      	ldr	r2, [r7, #8]
 801ca82:	430a      	orrs	r2, r1
 801ca84:	601a      	str	r2, [r3, #0]
 801ca86:	e007      	b.n	801ca98 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 801ca88:	697b      	ldr	r3, [r7, #20]
 801ca8a:	697a      	ldr	r2, [r7, #20]
 801ca8c:	6811      	ldr	r1, [r2, #0]
 801ca8e:	68ba      	ldr	r2, [r7, #8]
 801ca90:	ea6f 0202 	mvn.w	r2, r2
 801ca94:	400a      	ands	r2, r1
 801ca96:	601a      	str	r2, [r3, #0]
  }
}
 801ca98:	f107 071c 	add.w	r7, r7, #28
 801ca9c:	46bd      	mov	sp, r7
 801ca9e:	bc80      	pop	{r7}
 801caa0:	4770      	bx	lr
 801caa2:	bf00      	nop

0801caa4 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 801caa4:	b480      	push	{r7}
 801caa6:	b085      	sub	sp, #20
 801caa8:	af00      	add	r7, sp, #0
 801caaa:	6078      	str	r0, [r7, #4]
 801caac:	460b      	mov	r3, r1
 801caae:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 801cab0:	f04f 0300 	mov.w	r3, #0
 801cab4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	881b      	ldrh	r3, [r3, #0]
 801caba:	b29a      	uxth	r2, r3
 801cabc:	887b      	ldrh	r3, [r7, #2]
 801cabe:	4013      	ands	r3, r2
 801cac0:	b29b      	uxth	r3, r3
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d003      	beq.n	801cace <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 801cac6:	f04f 0301 	mov.w	r3, #1
 801caca:	73fb      	strb	r3, [r7, #15]
 801cacc:	e002      	b.n	801cad4 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 801cace:	f04f 0300 	mov.w	r3, #0
 801cad2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801cad4:	7bfb      	ldrb	r3, [r7, #15]
}
 801cad6:	4618      	mov	r0, r3
 801cad8:	f107 0714 	add.w	r7, r7, #20
 801cadc:	46bd      	mov	sp, r7
 801cade:	bc80      	pop	{r7}
 801cae0:	4770      	bx	lr
 801cae2:	bf00      	nop

0801cae4 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 801cae4:	b480      	push	{r7}
 801cae6:	b083      	sub	sp, #12
 801cae8:	af00      	add	r7, sp, #0
 801caea:	6078      	str	r0, [r7, #4]
 801caec:	460b      	mov	r3, r1
 801caee:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 801caf0:	887b      	ldrh	r3, [r7, #2]
 801caf2:	ea6f 0303 	mvn.w	r3, r3
 801caf6:	b29a      	uxth	r2, r3
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	801a      	strh	r2, [r3, #0]
}
 801cafc:	f107 070c 	add.w	r7, r7, #12
 801cb00:	46bd      	mov	sp, r7
 801cb02:	bc80      	pop	{r7}
 801cb04:	4770      	bx	lr
 801cb06:	bf00      	nop

0801cb08 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 801cb08:	b480      	push	{r7}
 801cb0a:	b087      	sub	sp, #28
 801cb0c:	af00      	add	r7, sp, #0
 801cb0e:	6078      	str	r0, [r7, #4]
 801cb10:	460b      	mov	r3, r1
 801cb12:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 801cb14:	f04f 0300 	mov.w	r3, #0
 801cb18:	60fb      	str	r3, [r7, #12]
 801cb1a:	f04f 0300 	mov.w	r3, #0
 801cb1e:	617b      	str	r3, [r7, #20]
 801cb20:	f04f 0300 	mov.w	r3, #0
 801cb24:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 801cb26:	f04f 0300 	mov.w	r3, #0
 801cb2a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 801cb2c:	887b      	ldrh	r3, [r7, #2]
 801cb2e:	b2db      	uxtb	r3, r3
 801cb30:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801cb34:	b2db      	uxtb	r3, r3
 801cb36:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 801cb38:	887b      	ldrh	r3, [r7, #2]
 801cb3a:	f003 031f 	and.w	r3, r3, #31
 801cb3e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 801cb40:	697b      	ldr	r3, [r7, #20]
 801cb42:	f04f 0201 	mov.w	r2, #1
 801cb46:	fa02 f303 	lsl.w	r3, r2, r3
 801cb4a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 801cb4c:	68bb      	ldr	r3, [r7, #8]
 801cb4e:	2b01      	cmp	r3, #1
 801cb50:	d106      	bne.n	801cb60 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	899b      	ldrh	r3, [r3, #12]
 801cb56:	b29b      	uxth	r3, r3
 801cb58:	697a      	ldr	r2, [r7, #20]
 801cb5a:	4013      	ands	r3, r2
 801cb5c:	617b      	str	r3, [r7, #20]
 801cb5e:	e00f      	b.n	801cb80 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 801cb60:	68bb      	ldr	r3, [r7, #8]
 801cb62:	2b02      	cmp	r3, #2
 801cb64:	d106      	bne.n	801cb74 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	8a1b      	ldrh	r3, [r3, #16]
 801cb6a:	b29b      	uxth	r3, r3
 801cb6c:	697a      	ldr	r2, [r7, #20]
 801cb6e:	4013      	ands	r3, r2
 801cb70:	617b      	str	r3, [r7, #20]
 801cb72:	e005      	b.n	801cb80 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	8a9b      	ldrh	r3, [r3, #20]
 801cb78:	b29b      	uxth	r3, r3
 801cb7a:	697a      	ldr	r2, [r7, #20]
 801cb7c:	4013      	ands	r3, r2
 801cb7e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 801cb80:	887b      	ldrh	r3, [r7, #2]
 801cb82:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801cb86:	b29b      	uxth	r3, r3
 801cb88:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	f04f 0201 	mov.w	r2, #1
 801cb90:	fa02 f303 	lsl.w	r3, r2, r3
 801cb94:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	881b      	ldrh	r3, [r3, #0]
 801cb9a:	b29b      	uxth	r3, r3
 801cb9c:	68fa      	ldr	r2, [r7, #12]
 801cb9e:	4013      	ands	r3, r2
 801cba0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 801cba2:	697b      	ldr	r3, [r7, #20]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d006      	beq.n	801cbb6 <USART_GetITStatus+0xae>
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d003      	beq.n	801cbb6 <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 801cbae:	f04f 0301 	mov.w	r3, #1
 801cbb2:	74fb      	strb	r3, [r7, #19]
 801cbb4:	e002      	b.n	801cbbc <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 801cbb6:	f04f 0300 	mov.w	r3, #0
 801cbba:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 801cbbc:	7cfb      	ldrb	r3, [r7, #19]
}
 801cbbe:	4618      	mov	r0, r3
 801cbc0:	f107 071c 	add.w	r7, r7, #28
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	bc80      	pop	{r7}
 801cbc8:	4770      	bx	lr
 801cbca:	bf00      	nop

0801cbcc <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 801cbcc:	b480      	push	{r7}
 801cbce:	b085      	sub	sp, #20
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	6078      	str	r0, [r7, #4]
 801cbd4:	460b      	mov	r3, r1
 801cbd6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 801cbd8:	f04f 0300 	mov.w	r3, #0
 801cbdc:	81fb      	strh	r3, [r7, #14]
 801cbde:	f04f 0300 	mov.w	r3, #0
 801cbe2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 801cbe4:	887b      	ldrh	r3, [r7, #2]
 801cbe6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801cbea:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 801cbec:	89fb      	ldrh	r3, [r7, #14]
 801cbee:	f04f 0201 	mov.w	r2, #1
 801cbf2:	fa02 f303 	lsl.w	r3, r2, r3
 801cbf6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 801cbf8:	89bb      	ldrh	r3, [r7, #12]
 801cbfa:	ea6f 0303 	mvn.w	r3, r3
 801cbfe:	b29a      	uxth	r2, r3
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	801a      	strh	r2, [r3, #0]
}
 801cc04:	f107 0714 	add.w	r7, r7, #20
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	bc80      	pop	{r7}
 801cc0c:	4770      	bx	lr
 801cc0e:	bf00      	nop

0801cc10 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 801cc10:	b580      	push	{r7, lr}
 801cc12:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 801cc14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801cc18:	f04f 0101 	mov.w	r1, #1
 801cc1c:	f7fa fb9e 	bl	801735c <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 801cc20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801cc24:	f04f 0100 	mov.w	r1, #0
 801cc28:	f7fa fb98 	bl	801735c <RCC_APB1PeriphResetCmd>
}
 801cc2c:	bd80      	pop	{r7, pc}
 801cc2e:	bf00      	nop

0801cc30 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 801cc30:	b480      	push	{r7}
 801cc32:	b085      	sub	sp, #20
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 801cc38:	f04f 0300 	mov.w	r3, #0
 801cc3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 801cc3e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801cc42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801cc46:	685b      	ldr	r3, [r3, #4]
 801cc48:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 801cc4c:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 801cc4e:	68fa      	ldr	r2, [r7, #12]
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	4313      	orrs	r3, r2
 801cc54:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 801cc56:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801cc5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801cc5e:	68fa      	ldr	r2, [r7, #12]
 801cc60:	605a      	str	r2, [r3, #4]
}
 801cc62:	f107 0714 	add.w	r7, r7, #20
 801cc66:	46bd      	mov	sp, r7
 801cc68:	bc80      	pop	{r7}
 801cc6a:	4770      	bx	lr

0801cc6c <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 801cc6c:	b480      	push	{r7}
 801cc6e:	b085      	sub	sp, #20
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	4603      	mov	r3, r0
 801cc74:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 801cc76:	f04f 0300 	mov.w	r3, #0
 801cc7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 801cc7c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801cc80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801cc84:	685b      	ldr	r3, [r3, #4]
 801cc86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801cc8a:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 801cc8c:	79fb      	ldrb	r3, [r7, #7]
 801cc8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	4313      	orrs	r3, r2
 801cc96:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 801cc98:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801cc9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801cca0:	68fa      	ldr	r2, [r7, #12]
 801cca2:	605a      	str	r2, [r3, #4]
}
 801cca4:	f107 0714 	add.w	r7, r7, #20
 801cca8:	46bd      	mov	sp, r7
 801ccaa:	bc80      	pop	{r7}
 801ccac:	4770      	bx	lr
 801ccae:	bf00      	nop

0801ccb0 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 801ccb0:	b480      	push	{r7}
 801ccb2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 801ccb4:	f248 03a4 	movw	r3, #32932	; 0x80a4
 801ccb8:	f2c4 2305 	movt	r3, #16901	; 0x4205
 801ccbc:	f04f 0201 	mov.w	r2, #1
 801ccc0:	601a      	str	r2, [r3, #0]
}
 801ccc2:	46bd      	mov	sp, r7
 801ccc4:	bc80      	pop	{r7}
 801ccc6:	4770      	bx	lr

0801ccc8 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 801ccc8:	b480      	push	{r7}
 801ccca:	b083      	sub	sp, #12
 801cccc:	af00      	add	r7, sp, #0
 801ccce:	4603      	mov	r3, r0
 801ccd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 801ccd2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801ccd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801ccda:	79fa      	ldrb	r2, [r7, #7]
 801ccdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cce0:	601a      	str	r2, [r3, #0]
}
 801cce2:	f107 070c 	add.w	r7, r7, #12
 801cce6:	46bd      	mov	sp, r7
 801cce8:	bc80      	pop	{r7}
 801ccea:	4770      	bx	lr

0801ccec <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 801ccec:	b480      	push	{r7}
 801ccee:	b083      	sub	sp, #12
 801ccf0:	af00      	add	r7, sp, #0
 801ccf2:	4603      	mov	r3, r0
 801ccf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 801ccf6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801ccfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801ccfe:	79fa      	ldrb	r2, [r7, #7]
 801cd00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801cd04:	b2d2      	uxtb	r2, r2
 801cd06:	601a      	str	r2, [r3, #0]
}
 801cd08:	f107 070c 	add.w	r7, r7, #12
 801cd0c:	46bd      	mov	sp, r7
 801cd0e:	bc80      	pop	{r7}
 801cd10:	4770      	bx	lr
 801cd12:	bf00      	nop

0801cd14 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 801cd14:	b480      	push	{r7}
 801cd16:	b083      	sub	sp, #12
 801cd18:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 801cd1a:	f04f 0300 	mov.w	r3, #0
 801cd1e:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 801cd20:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801cd24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801cd28:	689b      	ldr	r3, [r3, #8]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d003      	beq.n	801cd36 <WWDG_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 801cd2e:	f04f 0301 	mov.w	r3, #1
 801cd32:	71fb      	strb	r3, [r7, #7]
 801cd34:	e002      	b.n	801cd3c <WWDG_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 801cd36:	f04f 0300 	mov.w	r3, #0
 801cd3a:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 801cd3c:	79fb      	ldrb	r3, [r7, #7]
}
 801cd3e:	4618      	mov	r0, r3
 801cd40:	f107 070c 	add.w	r7, r7, #12
 801cd44:	46bd      	mov	sp, r7
 801cd46:	bc80      	pop	{r7}
 801cd48:	4770      	bx	lr
 801cd4a:	bf00      	nop

0801cd4c <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 801cd4c:	b480      	push	{r7}
 801cd4e:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 801cd50:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801cd54:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801cd58:	f04f 0200 	mov.w	r2, #0
 801cd5c:	609a      	str	r2, [r3, #8]
}
 801cd5e:	46bd      	mov	sp, r7
 801cd60:	bc80      	pop	{r7}
 801cd62:	4770      	bx	lr

0801cd64 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b084      	sub	sp, #16
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	4603      	mov	r3, r0
 801cd6c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 801cd6e:	79fa      	ldrb	r2, [r7, #7]
 801cd70:	f646 63e0 	movw	r3, #28384	; 0x6ee0
 801cd74:	f6c0 0302 	movt	r3, #2050	; 0x802
 801cd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	f04f 0101 	mov.w	r1, #1
 801cd82:	f7fa f98b 	bl	801709c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 801cd86:	79fa      	ldrb	r2, [r7, #7]
 801cd88:	f646 63d8 	movw	r3, #28376	; 0x6ed8
 801cd8c:	f6c0 0302 	movt	r3, #2050	; 0x802
 801cd90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801cd94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801cd96:	f04f 0301 	mov.w	r3, #1
 801cd9a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801cd9c:	f04f 0300 	mov.w	r3, #0
 801cda0:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 801cda2:	f04f 0301 	mov.w	r3, #1
 801cda6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801cda8:	f04f 0302 	mov.w	r3, #2
 801cdac:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 801cdae:	79fa      	ldrb	r2, [r7, #7]
 801cdb0:	f640 03d8 	movw	r3, #2264	; 0x8d8
 801cdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801cdb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cdbc:	f107 0308 	add.w	r3, r7, #8
 801cdc0:	4610      	mov	r0, r2
 801cdc2:	4619      	mov	r1, r3
 801cdc4:	f7f7 ff18 	bl	8014bf8 <GPIO_Init>
}
 801cdc8:	f107 0710 	add.w	r7, r7, #16
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd80      	pop	{r7, pc}

0801cdd0 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 801cdd0:	b480      	push	{r7}
 801cdd2:	b083      	sub	sp, #12
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 801cdda:	79fa      	ldrb	r2, [r7, #7]
 801cddc:	f640 03d8 	movw	r3, #2264	; 0x8d8
 801cde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801cde4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cde8:	79f9      	ldrb	r1, [r7, #7]
 801cdea:	f646 63d8 	movw	r3, #28376	; 0x6ed8
 801cdee:	f6c0 0302 	movt	r3, #2050	; 0x802
 801cdf2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801cdf6:	8313      	strh	r3, [r2, #24]
}
 801cdf8:	f107 070c 	add.w	r7, r7, #12
 801cdfc:	46bd      	mov	sp, r7
 801cdfe:	bc80      	pop	{r7}
 801ce00:	4770      	bx	lr
 801ce02:	bf00      	nop

0801ce04 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 801ce04:	b480      	push	{r7}
 801ce06:	b083      	sub	sp, #12
 801ce08:	af00      	add	r7, sp, #0
 801ce0a:	4603      	mov	r3, r0
 801ce0c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 801ce0e:	79fa      	ldrb	r2, [r7, #7]
 801ce10:	f640 03d8 	movw	r3, #2264	; 0x8d8
 801ce14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ce18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ce1c:	79f9      	ldrb	r1, [r7, #7]
 801ce1e:	f646 63d8 	movw	r3, #28376	; 0x6ed8
 801ce22:	f6c0 0302 	movt	r3, #2050	; 0x802
 801ce26:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801ce2a:	8353      	strh	r3, [r2, #26]
}
 801ce2c:	f107 070c 	add.w	r7, r7, #12
 801ce30:	46bd      	mov	sp, r7
 801ce32:	bc80      	pop	{r7}
 801ce34:	4770      	bx	lr
 801ce36:	bf00      	nop

0801ce38 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 801ce38:	b480      	push	{r7}
 801ce3a:	b083      	sub	sp, #12
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	4603      	mov	r3, r0
 801ce40:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 801ce42:	79fa      	ldrb	r2, [r7, #7]
 801ce44:	f640 03d8 	movw	r3, #2264	; 0x8d8
 801ce48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ce4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ce50:	79f9      	ldrb	r1, [r7, #7]
 801ce52:	f640 03d8 	movw	r3, #2264	; 0x8d8
 801ce56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ce5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ce5e:	695b      	ldr	r3, [r3, #20]
 801ce60:	4619      	mov	r1, r3
 801ce62:	79f8      	ldrb	r0, [r7, #7]
 801ce64:	f646 63d8 	movw	r3, #28376	; 0x6ed8
 801ce68:	f6c0 0302 	movt	r3, #2050	; 0x802
 801ce6c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 801ce70:	404b      	eors	r3, r1
 801ce72:	6153      	str	r3, [r2, #20]
}
 801ce74:	f107 070c 	add.w	r7, r7, #12
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	bc80      	pop	{r7}
 801ce7c:	4770      	bx	lr
 801ce7e:	bf00      	nop

0801ce80 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b088      	sub	sp, #32
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	4602      	mov	r2, r0
 801ce88:	460b      	mov	r3, r1
 801ce8a:	71fa      	strb	r2, [r7, #7]
 801ce8c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 801ce8e:	79fa      	ldrb	r2, [r7, #7]
 801ce90:	f646 63f4 	movw	r3, #28404	; 0x6ef4
 801ce94:	f6c0 0302 	movt	r3, #2050	; 0x802
 801ce98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ce9c:	4618      	mov	r0, r3
 801ce9e:	f04f 0101 	mov.w	r1, #1
 801cea2:	f7fa f8fb 	bl	801709c <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 801cea6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801ceaa:	f04f 0101 	mov.w	r1, #1
 801ceae:	f7fa f9a5 	bl	80171fc <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801ceb2:	f04f 0300 	mov.w	r3, #0
 801ceb6:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801ceb8:	f04f 0300 	mov.w	r3, #0
 801cebc:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 801cebe:	79fa      	ldrb	r2, [r7, #7]
 801cec0:	f646 63f0 	movw	r3, #28400	; 0x6ef0
 801cec4:	f6c0 0302 	movt	r3, #2050	; 0x802
 801cec8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801cecc:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 801cece:	79fa      	ldrb	r2, [r7, #7]
 801ced0:	f640 03e8 	movw	r3, #2280	; 0x8e8
 801ced4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ced8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cedc:	f107 0318 	add.w	r3, r7, #24
 801cee0:	4610      	mov	r0, r2
 801cee2:	4619      	mov	r1, r3
 801cee4:	f7f7 fe88 	bl	8014bf8 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 801cee8:	79bb      	ldrb	r3, [r7, #6]
 801ceea:	2b01      	cmp	r3, #1
 801ceec:	d13a      	bne.n	801cf64 <STM_EVAL_PBInit+0xe4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 801ceee:	79fa      	ldrb	r2, [r7, #7]
 801cef0:	f646 63fc 	movw	r3, #28412	; 0x6efc
 801cef4:	f6c0 0302 	movt	r3, #2050	; 0x802
 801cef8:	5c9a      	ldrb	r2, [r3, r2]
 801cefa:	79f9      	ldrb	r1, [r7, #7]
 801cefc:	f646 7300 	movw	r3, #28416	; 0x6f00
 801cf00:	f6c0 0302 	movt	r3, #2050	; 0x802
 801cf04:	5c5b      	ldrb	r3, [r3, r1]
 801cf06:	4610      	mov	r0, r2
 801cf08:	4619      	mov	r1, r3
 801cf0a:	f7fd fa41 	bl	801a390 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 801cf0e:	79fa      	ldrb	r2, [r7, #7]
 801cf10:	f646 63f8 	movw	r3, #28408	; 0x6ef8
 801cf14:	f6c0 0302 	movt	r3, #2050	; 0x802
 801cf18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801cf1c:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 801cf1e:	f04f 0300 	mov.w	r3, #0
 801cf22:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 801cf24:	f04f 0308 	mov.w	r3, #8
 801cf28:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 801cf2a:	f04f 0301 	mov.w	r3, #1
 801cf2e:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 801cf30:	f107 0310 	add.w	r3, r7, #16
 801cf34:	4618      	mov	r0, r3
 801cf36:	f7f6 f973 	bl	8013220 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 801cf3a:	79fa      	ldrb	r2, [r7, #7]
 801cf3c:	f646 7304 	movw	r3, #28420	; 0x6f04
 801cf40:	f6c0 0302 	movt	r3, #2050	; 0x802
 801cf44:	5c9b      	ldrb	r3, [r3, r2]
 801cf46:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 801cf48:	f04f 030f 	mov.w	r3, #15
 801cf4c:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 801cf4e:	f04f 030f 	mov.w	r3, #15
 801cf52:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 801cf54:	f04f 0301 	mov.w	r3, #1
 801cf58:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 801cf5a:	f107 030c 	add.w	r3, r7, #12
 801cf5e:	4618      	mov	r0, r3
 801cf60:	f7f1 f85a 	bl	800e018 <NVIC_Init>
  }
}
 801cf64:	f107 0720 	add.w	r7, r7, #32
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	bd80      	pop	{r7, pc}

0801cf6c <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 801cf6c:	b580      	push	{r7, lr}
 801cf6e:	b082      	sub	sp, #8
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	4603      	mov	r3, r0
 801cf74:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 801cf76:	79fa      	ldrb	r2, [r7, #7]
 801cf78:	f640 03e8 	movw	r3, #2280	; 0x8e8
 801cf7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801cf80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cf84:	79f9      	ldrb	r1, [r7, #7]
 801cf86:	f646 63f0 	movw	r3, #28400	; 0x6ef0
 801cf8a:	f6c0 0302 	movt	r3, #2050	; 0x802
 801cf8e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801cf92:	4610      	mov	r0, r2
 801cf94:	4619      	mov	r1, r3
 801cf96:	f7f7 ff19 	bl	8014dcc <GPIO_ReadInputDataBit>
 801cf9a:	4603      	mov	r3, r0
}
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f107 0708 	add.w	r7, r7, #8
 801cfa2:	46bd      	mov	sp, r7
 801cfa4:	bd80      	pop	{r7, pc}
 801cfa6:	bf00      	nop

0801cfa8 <EVAL_AUDIO_SetAudioInterface>:
  * @brief  Set the current audio interface (I2S or DAC).
  * @param  Interface: AUDIO_INTERFACE_I2S or AUDIO_INTERFACE_DAC
  * @retval None
  */
void EVAL_AUDIO_SetAudioInterface(uint32_t Interface)
{    
 801cfa8:	b480      	push	{r7}
 801cfaa:	b083      	sub	sp, #12
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	6078      	str	r0, [r7, #4]
  CurrAudioInterface = Interface;
 801cfb0:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801cfb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801cfb8:	687a      	ldr	r2, [r7, #4]
 801cfba:	601a      	str	r2, [r3, #0]
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 801cfbc:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801cfc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	2b01      	cmp	r3, #1
 801cfc8:	d14a      	bne.n	801d060 <EVAL_AUDIO_SetAudioInterface+0xb8>
  {
    /* DMA Stream definitions */
    AUDIO_MAL_DMA_CLOCK    = AUDIO_I2S_DMA_CLOCK;
 801cfca:	f640 03fc 	movw	r3, #2300	; 0x8fc
 801cfce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801cfd2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801cfd6:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_STREAM   = AUDIO_I2S_DMA_STREAM;        
 801cfd8:	f640 1300 	movw	r3, #2304	; 0x900
 801cfdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801cfe0:	f246 02b8 	movw	r2, #24760	; 0x60b8
 801cfe4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801cfe8:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_DREG     = AUDIO_I2S_DMA_DREG;
 801cfea:	f640 1304 	movw	r3, #2308	; 0x904
 801cfee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801cff2:	f643 420c 	movw	r2, #15372	; 0x3c0c
 801cff6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801cffa:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_CHANNEL  = AUDIO_I2S_DMA_CHANNEL;
 801cffc:	f640 13b0 	movw	r3, #2480	; 0x9b0
 801d000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d004:	f04f 0200 	mov.w	r2, #0
 801d008:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_IRQ      = AUDIO_I2S_DMA_IRQ  ;
 801d00a:	f640 1308 	movw	r3, #2312	; 0x908
 801d00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d012:	f04f 022f 	mov.w	r2, #47	; 0x2f
 801d016:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_TC  = AUDIO_I2S_DMA_FLAG_TC;
 801d018:	f640 130c 	movw	r3, #2316	; 0x90c
 801d01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d020:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
 801d024:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_HT  = AUDIO_I2S_DMA_FLAG_HT;
 801d026:	f640 1310 	movw	r3, #2320	; 0x910
 801d02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d02e:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 801d032:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_FE  = AUDIO_I2S_DMA_FLAG_FE;
 801d034:	f640 1314 	movw	r3, #2324	; 0x914
 801d038:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d03c:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
 801d040:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_TE  = AUDIO_I2S_DMA_FLAG_TE;
 801d042:	f640 1318 	movw	r3, #2328	; 0x918
 801d046:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d04a:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
 801d04e:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_DME = AUDIO_I2S_DMA_FLAG_DME;
 801d050:	f640 131c 	movw	r3, #2332	; 0x91c
 801d054:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d058:	f04f 5204 	mov.w	r2, #553648128	; 0x21000000
 801d05c:	601a      	str	r2, [r3, #0]
 801d05e:	e056      	b.n	801d10e <EVAL_AUDIO_SetAudioInterface+0x166>
  }
  else if (Interface == AUDIO_INTERFACE_DAC)
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	2b02      	cmp	r3, #2
 801d064:	d153      	bne.n	801d10e <EVAL_AUDIO_SetAudioInterface+0x166>
  {
    /* DMA Stream definitions */
    AUDIO_MAL_DMA_CLOCK    = AUDIO_DAC_DMA_CLOCK;
 801d066:	f640 03fc 	movw	r3, #2300	; 0x8fc
 801d06a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d06e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801d072:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_STREAM   = AUDIO_DAC_DMA_STREAM;        
 801d074:	f640 1300 	movw	r3, #2304	; 0x900
 801d078:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d07c:	f246 0210 	movw	r2, #24592	; 0x6010
 801d080:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801d084:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_DREG     = AUDIO_DAC_DMA_DREG;
 801d086:	f640 1304 	movw	r3, #2308	; 0x904
 801d08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d08e:	f247 420c 	movw	r2, #29708	; 0x740c
 801d092:	f2c4 0200 	movt	r2, #16384	; 0x4000
 801d096:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_CHANNEL  = AUDIO_DAC_DMA_CHANNEL;
 801d098:	f640 13b0 	movw	r3, #2480	; 0x9b0
 801d09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d0a0:	f04f 0200 	mov.w	r2, #0
 801d0a4:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_IRQ      = AUDIO_DAC_DMA_IRQ  ;
 801d0a6:	f640 1308 	movw	r3, #2312	; 0x908
 801d0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d0ae:	f04f 020b 	mov.w	r2, #11
 801d0b2:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_TC  = AUDIO_DAC_DMA_FLAG_TC;
 801d0b4:	f640 130c 	movw	r3, #2316	; 0x90c
 801d0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d0bc:	f04f 0220 	mov.w	r2, #32
 801d0c0:	f2c1 0200 	movt	r2, #4096	; 0x1000
 801d0c4:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_HT  = AUDIO_DAC_DMA_FLAG_HT;
 801d0c6:	f640 1310 	movw	r3, #2320	; 0x910
 801d0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d0ce:	f04f 0210 	mov.w	r2, #16
 801d0d2:	f2c1 0200 	movt	r2, #4096	; 0x1000
 801d0d6:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_FE  = AUDIO_DAC_DMA_FLAG_FE;
 801d0d8:	f640 1314 	movw	r3, #2324	; 0x914
 801d0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d0e0:	f04f 0201 	mov.w	r2, #1
 801d0e4:	f2c1 0280 	movt	r2, #4224	; 0x1080
 801d0e8:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_TE  = AUDIO_DAC_DMA_FLAG_TE;
 801d0ea:	f640 1318 	movw	r3, #2328	; 0x918
 801d0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d0f2:	f04f 0208 	mov.w	r2, #8
 801d0f6:	f2c1 0200 	movt	r2, #4096	; 0x1000
 801d0fa:	601a      	str	r2, [r3, #0]
    AUDIO_MAL_DMA_FLAG_DME = AUDIO_DAC_DMA_FLAG_DME;    
 801d0fc:	f640 131c 	movw	r3, #2332	; 0x91c
 801d100:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d104:	f04f 0204 	mov.w	r2, #4
 801d108:	f2c1 0280 	movt	r2, #4224	; 0x1080
 801d10c:	601a      	str	r2, [r3, #0]
  }
}
 801d10e:	f107 070c 	add.w	r7, r7, #12
 801d112:	46bd      	mov	sp, r7
 801d114:	bc80      	pop	{r7}
 801d116:	4770      	bx	lr

0801d118 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 801d118:	b580      	push	{r7, lr}
 801d11a:	b082      	sub	sp, #8
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	460b      	mov	r3, r1
 801d120:	603a      	str	r2, [r7, #0]
 801d122:	4602      	mov	r2, r0
 801d124:	80fa      	strh	r2, [r7, #6]
 801d126:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 801d128:	797b      	ldrb	r3, [r7, #5]
 801d12a:	2b64      	cmp	r3, #100	; 0x64
 801d12c:	d811      	bhi.n	801d152 <EVAL_AUDIO_Init+0x3a>
 801d12e:	797a      	ldrb	r2, [r7, #5]
 801d130:	4613      	mov	r3, r2
 801d132:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801d136:	1a9a      	subs	r2, r3, r2
 801d138:	f248 531f 	movw	r3, #34079	; 0x851f
 801d13c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 801d140:	fb83 1302 	smull	r1, r3, r3, r2
 801d144:	ea4f 1163 	mov.w	r1, r3, asr #5
 801d148:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d14c:	1acb      	subs	r3, r1, r3
 801d14e:	b2db      	uxtb	r3, r3
 801d150:	e001      	b.n	801d156 <EVAL_AUDIO_Init+0x3e>
 801d152:	f04f 0364 	mov.w	r3, #100	; 0x64
 801d156:	88fa      	ldrh	r2, [r7, #6]
 801d158:	4610      	mov	r0, r2
 801d15a:	4619      	mov	r1, r3
 801d15c:	683a      	ldr	r2, [r7, #0]
 801d15e:	f000 f9c7 	bl	801d4f0 <Codec_Init>
 801d162:	4603      	mov	r3, r0
 801d164:	2b00      	cmp	r3, #0
 801d166:	d002      	beq.n	801d16e <EVAL_AUDIO_Init+0x56>
  {
    return 1;                
 801d168:	f04f 0301 	mov.w	r3, #1
 801d16c:	e003      	b.n	801d176 <EVAL_AUDIO_Init+0x5e>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 801d16e:	f001 f88f 	bl	801e290 <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 801d172:	f04f 0300 	mov.w	r3, #0
  }
}
 801d176:	4618      	mov	r0, r3
 801d178:	f107 0708 	add.w	r7, r7, #8
 801d17c:	46bd      	mov	sp, r7
 801d17e:	bd80      	pop	{r7, pc}

0801d180 <EVAL_AUDIO_DeInit>:
  *         by EVAL_AUDIO_Init() function). 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_DeInit(void)
{ 
 801d180:	b580      	push	{r7, lr}
 801d182:	af00      	add	r7, sp, #0
  /* DeInitialize the Media layer */
  Audio_MAL_DeInit();
 801d184:	f001 f97a 	bl	801e47c <Audio_MAL_DeInit>
  
  /* DeInitialize Codec */  
  Codec_DeInit();  
 801d188:	f000 fa86 	bl	801d698 <Codec_DeInit>
  
  return 0;
 801d18c:	f04f 0300 	mov.w	r3, #0
}
 801d190:	4618      	mov	r0, r3
 801d192:	bd80      	pop	{r7, pc}

0801d194 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b082      	sub	sp, #8
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
 801d19c:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 801d19e:	f640 03ec 	movw	r3, #2284	; 0x8ec
 801d1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d1a6:	683a      	ldr	r2, [r7, #0]
 801d1a8:	601a      	str	r2, [r3, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 801d1aa:	f000 fa93 	bl	801d6d4 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size/4)));
 801d1ae:	687a      	ldr	r2, [r7, #4]
 801d1b0:	6839      	ldr	r1, [r7, #0]
 801d1b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d1b6:	f2c0 0303 	movt	r3, #3
 801d1ba:	4299      	cmp	r1, r3
 801d1bc:	d803      	bhi.n	801d1c6 <EVAL_AUDIO_Play+0x32>
 801d1be:	683b      	ldr	r3, [r7, #0]
 801d1c0:	ea4f 0393 	mov.w	r3, r3, lsr #2
 801d1c4:	e001      	b.n	801d1ca <EVAL_AUDIO_Play+0x36>
 801d1c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d1ca:	4610      	mov	r0, r2
 801d1cc:	4619      	mov	r1, r3
 801d1ce:	f001 f983 	bl	801e4d8 <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = (Size/2) - DMA_MAX(AudioTotalSize);
 801d1d2:	683b      	ldr	r3, [r7, #0]
 801d1d4:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801d1d8:	f640 03ec 	movw	r3, #2284	; 0x8ec
 801d1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d1e0:	6819      	ldr	r1, [r3, #0]
 801d1e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d1e6:	4299      	cmp	r1, r3
 801d1e8:	bf38      	it	cc
 801d1ea:	460b      	movcc	r3, r1
 801d1ec:	1ad2      	subs	r2, r2, r3
 801d1ee:	f640 03f0 	movw	r3, #2288	; 0x8f0
 801d1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d1f6:	601a      	str	r2, [r3, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 801d1f8:	f640 03ec 	movw	r3, #2284	; 0x8ec
 801d1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d200:	681a      	ldr	r2, [r3, #0]
 801d202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d206:	429a      	cmp	r2, r3
 801d208:	bf38      	it	cc
 801d20a:	4613      	movcc	r3, r2
 801d20c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d210:	687a      	ldr	r2, [r7, #4]
 801d212:	18d2      	adds	r2, r2, r3
 801d214:	f241 53b4 	movw	r3, #5556	; 0x15b4
 801d218:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d21c:	601a      	str	r2, [r3, #0]
  
  return 0;
 801d21e:	f04f 0300 	mov.w	r3, #0
}
 801d222:	4618      	mov	r0, r3
 801d224:	f107 0708 	add.w	r7, r7, #8
 801d228:	46bd      	mov	sp, r7
 801d22a:	bd80      	pop	{r7, pc}

0801d22c <EVAL_AUDIO_PauseResume>:
  * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
  *         from 0) to resume. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_PauseResume(uint32_t Cmd)
{    
 801d22c:	b580      	push	{r7, lr}
 801d22e:	b082      	sub	sp, #8
 801d230:	af00      	add	r7, sp, #0
 801d232:	6078      	str	r0, [r7, #4]
  /* Call the Audio Codec Pause/Resume function */
  if (Codec_PauseResume(Cmd) != 0)
 801d234:	6878      	ldr	r0, [r7, #4]
 801d236:	f000 fa55 	bl	801d6e4 <Codec_PauseResume>
 801d23a:	4603      	mov	r3, r0
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d002      	beq.n	801d246 <EVAL_AUDIO_PauseResume+0x1a>
  {
    return 1;
 801d240:	f04f 0301 	mov.w	r3, #1
 801d244:	e006      	b.n	801d254 <EVAL_AUDIO_PauseResume+0x28>
  }
  else
  {
    /* Call the Media layer pause/resume function */
    Audio_MAL_PauseResume(Cmd, 0);
 801d246:	6878      	ldr	r0, [r7, #4]
 801d248:	f04f 0100 	mov.w	r1, #0
 801d24c:	f001 f9ae 	bl	801e5ac <Audio_MAL_PauseResume>
    
    /* Return 0 if all operations are OK */
    return 0;
 801d250:	f04f 0300 	mov.w	r3, #0
  }
}
 801d254:	4618      	mov	r0, r3
 801d256:	f107 0708 	add.w	r7, r7, #8
 801d25a:	46bd      	mov	sp, r7
 801d25c:	bd80      	pop	{r7, pc}
 801d25e:	bf00      	nop

0801d260 <EVAL_AUDIO_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Stop(uint32_t Option)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b082      	sub	sp, #8
 801d264:	af00      	add	r7, sp, #0
 801d266:	6078      	str	r0, [r7, #4]
  /* Call Audio Codec Stop function */
  if (Codec_Stop(Option) != 0)
 801d268:	6878      	ldr	r0, [r7, #4]
 801d26a:	f000 fa7f 	bl	801d76c <Codec_Stop>
 801d26e:	4603      	mov	r3, r0
 801d270:	2b00      	cmp	r3, #0
 801d272:	d002      	beq.n	801d27a <EVAL_AUDIO_Stop+0x1a>
  {
    return 1;
 801d274:	f04f 0301 	mov.w	r3, #1
 801d278:	e00d      	b.n	801d296 <EVAL_AUDIO_Stop+0x36>
  }
  else
  {
    /* Call Media layer Stop function */
    Audio_MAL_Stop();
 801d27a:	f001 f9df 	bl	801e63c <Audio_MAL_Stop>
    
    /* Update the remaining data number */
    AudioRemSize = AudioTotalSize;    
 801d27e:	f640 03ec 	movw	r3, #2284	; 0x8ec
 801d282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d286:	681a      	ldr	r2, [r3, #0]
 801d288:	f640 03f0 	movw	r3, #2288	; 0x8f0
 801d28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d290:	601a      	str	r2, [r3, #0]
    
    /* Return 0 when all operations are correctly done */
    return 0;
 801d292:	f04f 0300 	mov.w	r3, #0
  }
}
 801d296:	4618      	mov	r0, r3
 801d298:	f107 0708 	add.w	r7, r7, #8
 801d29c:	46bd      	mov	sp, r7
 801d29e:	bd80      	pop	{r7, pc}

0801d2a0 <EVAL_AUDIO_VolumeCtl>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_VolumeCtl(uint8_t Volume)
{
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	b082      	sub	sp, #8
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	4603      	mov	r3, r0
 801d2a8:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  return (Codec_VolumeCtrl(VOLUME_CONVERT(Volume)));
 801d2aa:	79fb      	ldrb	r3, [r7, #7]
 801d2ac:	2b64      	cmp	r3, #100	; 0x64
 801d2ae:	d811      	bhi.n	801d2d4 <EVAL_AUDIO_VolumeCtl+0x34>
 801d2b0:	79fa      	ldrb	r2, [r7, #7]
 801d2b2:	4613      	mov	r3, r2
 801d2b4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801d2b8:	1a9a      	subs	r2, r3, r2
 801d2ba:	f248 531f 	movw	r3, #34079	; 0x851f
 801d2be:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 801d2c2:	fb83 1302 	smull	r1, r3, r3, r2
 801d2c6:	ea4f 1163 	mov.w	r1, r3, asr #5
 801d2ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d2ce:	1acb      	subs	r3, r1, r3
 801d2d0:	b2db      	uxtb	r3, r3
 801d2d2:	e001      	b.n	801d2d8 <EVAL_AUDIO_VolumeCtl+0x38>
 801d2d4:	f04f 0364 	mov.w	r3, #100	; 0x64
 801d2d8:	4618      	mov	r0, r3
 801d2da:	f000 fa7f 	bl	801d7dc <Codec_VolumeCtrl>
 801d2de:	4603      	mov	r3, r0
}
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	f107 0708 	add.w	r7, r7, #8
 801d2e6:	46bd      	mov	sp, r7
 801d2e8:	bd80      	pop	{r7, pc}
 801d2ea:	bf00      	nop

0801d2ec <EVAL_AUDIO_Mute>:
  * @param  Command: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to 
  *         unmute the codec and restore previous volume level.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Mute(uint32_t Cmd)
{ 
 801d2ec:	b580      	push	{r7, lr}
 801d2ee:	b082      	sub	sp, #8
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	6078      	str	r0, [r7, #4]
  /* Call the Codec Mute function */
  return (Codec_Mute(Cmd));
 801d2f4:	6878      	ldr	r0, [r7, #4]
 801d2f6:	f000 fab7 	bl	801d868 <Codec_Mute>
 801d2fa:	4603      	mov	r3, r0
}
 801d2fc:	4618      	mov	r0, r3
 801d2fe:	f107 0708 	add.w	r7, r7, #8
 801d302:	46bd      	mov	sp, r7
 801d304:	bd80      	pop	{r7, pc}
 801d306:	bf00      	nop

0801d308 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 801d308:	b580      	push	{r7, lr}
 801d30a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 801d30c:	f640 1300 	movw	r3, #2304	; 0x900
 801d310:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d314:	681a      	ldr	r2, [r3, #0]
 801d316:	f640 130c 	movw	r3, #2316	; 0x90c
 801d31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	4610      	mov	r0, r2
 801d322:	4619      	mov	r1, r3
 801d324:	f7f5 fe0a 	bl	8012f3c <DMA_GetFlagStatus>
 801d328:	4603      	mov	r3, r0
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	f000 80ab 	beq.w	801d486 <Audio_MAL_IRQHandler+0x17e>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 801d330:	f640 03f0 	movw	r3, #2288	; 0x8f0
 801d334:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	f000 8081 	beq.w	801d442 <Audio_MAL_IRQHandler+0x13a>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 801d340:	bf00      	nop
 801d342:	f640 1300 	movw	r3, #2304	; 0x900
 801d346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	4618      	mov	r0, r3
 801d34e:	f7f5 fdc5 	bl	8012edc <DMA_GetCmdStatus>
 801d352:	4603      	mov	r3, r0
 801d354:	2b00      	cmp	r3, #0
 801d356:	d1f4      	bne.n	801d342 <Audio_MAL_IRQHandler+0x3a>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 801d358:	f640 1300 	movw	r3, #2304	; 0x900
 801d35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d360:	681a      	ldr	r2, [r3, #0]
 801d362:	f640 130c 	movw	r3, #2316	; 0x90c
 801d366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	4610      	mov	r0, r2
 801d36e:	4619      	mov	r1, r3
 801d370:	f7f5 fe28 	bl	8012fc4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 801d374:	f241 53b4 	movw	r3, #5556	; 0x15b4
 801d378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	461a      	mov	r2, r3
 801d380:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801d384:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d388:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 801d38a:	f640 03f0 	movw	r3, #2288	; 0x8f0
 801d38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d392:	681a      	ldr	r2, [r3, #0]
 801d394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d398:	429a      	cmp	r2, r3
 801d39a:	bf28      	it	cs
 801d39c:	461a      	movcs	r2, r3
 801d39e:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801d3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d3a6:	611a      	str	r2, [r3, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 801d3a8:	f640 1300 	movw	r3, #2304	; 0x900
 801d3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	f241 51f4 	movw	r1, #5620	; 0x15f4
 801d3b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801d3bc:	f7f5 fc18 	bl	8012bf0 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 801d3c0:	f640 1300 	movw	r3, #2304	; 0x900
 801d3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	f04f 0101 	mov.w	r1, #1
 801d3d0:	f7f5 fcac 	bl	8012d2c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 801d3d4:	f241 53b4 	movw	r3, #5556	; 0x15b4
 801d3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d3dc:	681a      	ldr	r2, [r3, #0]
 801d3de:	f640 03f0 	movw	r3, #2288	; 0x8f0
 801d3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d3e6:	6819      	ldr	r1, [r3, #0]
 801d3e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d3ec:	4299      	cmp	r1, r3
 801d3ee:	bf38      	it	cc
 801d3f0:	460b      	movcc	r3, r1
 801d3f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d3f6:	18d2      	adds	r2, r2, r3
 801d3f8:	f241 53b4 	movw	r3, #5556	; 0x15b4
 801d3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d400:	601a      	str	r2, [r3, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 801d402:	f640 03f0 	movw	r3, #2288	; 0x8f0
 801d406:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d40a:	681a      	ldr	r2, [r3, #0]
 801d40c:	f640 03f0 	movw	r3, #2288	; 0x8f0
 801d410:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d414:	6819      	ldr	r1, [r3, #0]
 801d416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d41a:	4299      	cmp	r1, r3
 801d41c:	bf38      	it	cc
 801d41e:	460b      	movcc	r3, r1
 801d420:	1ad2      	subs	r2, r2, r3
 801d422:	f640 03f0 	movw	r3, #2288	; 0x8f0
 801d426:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d42a:	601a      	str	r2, [r3, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 801d42c:	f640 1300 	movw	r3, #2304	; 0x900
 801d430:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	4618      	mov	r0, r3
 801d438:	f04f 0101 	mov.w	r1, #1
 801d43c:	f7f5 fc76 	bl	8012d2c <DMA_Cmd>
 801d440:	e021      	b.n	801d486 <Audio_MAL_IRQHandler+0x17e>
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 801d442:	f640 1300 	movw	r3, #2304	; 0x900
 801d446:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	4618      	mov	r0, r3
 801d44e:	f04f 0100 	mov.w	r1, #0
 801d452:	f7f5 fc6b 	bl	8012d2c <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 801d456:	f640 1300 	movw	r3, #2304	; 0x900
 801d45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d45e:	681a      	ldr	r2, [r3, #0]
 801d460:	f640 130c 	movw	r3, #2316	; 0x90c
 801d464:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	4610      	mov	r0, r2
 801d46c:	4619      	mov	r1, r3
 801d46e:	f7f5 fda9 	bl	8012fc4 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 801d472:	f241 53b4 	movw	r3, #5556	; 0x15b4
 801d476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	4618      	mov	r0, r3
 801d47e:	f04f 0100 	mov.w	r1, #0
 801d482:	f006 fe4f 	bl	8024124 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 801d486:	bd80      	pop	{r7, pc}

0801d488 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 801d488:	b580      	push	{r7, lr}
 801d48a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 801d48c:	f7ff ff3c 	bl	801d308 <Audio_MAL_IRQHandler>
}
 801d490:	bd80      	pop	{r7, pc}
 801d492:	bf00      	nop

0801d494 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 801d494:	b580      	push	{r7, lr}
 801d496:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 801d498:	f7ff ff36 	bl	801d308 <Audio_MAL_IRQHandler>
}
 801d49c:	bd80      	pop	{r7, pc}
 801d49e:	bf00      	nop

0801d4a0 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 801d4a0:	b580      	push	{r7, lr}
 801d4a2:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 801d4a4:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801d4a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801d4ac:	f04f 0102 	mov.w	r1, #2
 801d4b0:	f7fc febc 	bl	801a22c <SPI_I2S_GetFlagStatus>
 801d4b4:	4603      	mov	r3, r0
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	d018      	beq.n	801d4ec <SPI3_IRQHandler+0x4c>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 801d4ba:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801d4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d4c2:	681b      	ldr	r3, [r3, #0]
 801d4c4:	2b02      	cmp	r3, #2
 801d4c6:	d107      	bne.n	801d4d8 <SPI3_IRQHandler+0x38>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 801d4c8:	f006 fe24 	bl	8024114 <EVAL_AUDIO_GetSampleCallBack>
 801d4cc:	4603      	mov	r3, r0
 801d4ce:	f04f 0004 	mov.w	r0, #4
 801d4d2:	4619      	mov	r1, r3
 801d4d4:	f7f4 fe18 	bl	8012108 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 801d4d8:	f006 fe1c 	bl	8024114 <EVAL_AUDIO_GetSampleCallBack>
 801d4dc:	4603      	mov	r3, r0
 801d4de:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801d4e2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801d4e6:	4619      	mov	r1, r3
 801d4e8:	f7fc fdde 	bl	801a0a8 <SPI_I2S_SendData>
  }
}
 801d4ec:	bd80      	pop	{r7, pc}
 801d4ee:	bf00      	nop

0801d4f0 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b084      	sub	sp, #16
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	460b      	mov	r3, r1
 801d4f8:	603a      	str	r2, [r7, #0]
 801d4fa:	4602      	mov	r2, r0
 801d4fc:	80fa      	strh	r2, [r7, #6]
 801d4fe:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 801d500:	f04f 0300 	mov.w	r3, #0
 801d504:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 801d506:	f000 fd7f 	bl	801e008 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 801d50a:	f000 f9d7 	bl	801d8bc <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 801d50e:	f000 fcd3 	bl	801deb8 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 801d512:	f04f 0002 	mov.w	r0, #2
 801d516:	f04f 0101 	mov.w	r1, #1
 801d51a:	f000 f9eb 	bl	801d8f4 <Codec_WriteRegister>
 801d51e:	4603      	mov	r3, r0
 801d520:	68fa      	ldr	r2, [r7, #12]
 801d522:	18d3      	adds	r3, r2, r3
 801d524:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 801d526:	f04f 0004 	mov.w	r0, #4
 801d52a:	f04f 01af 	mov.w	r1, #175	; 0xaf
 801d52e:	f000 f9e1 	bl	801d8f4 <Codec_WriteRegister>
 801d532:	4603      	mov	r3, r0
 801d534:	68fa      	ldr	r2, [r7, #12]
 801d536:	18d3      	adds	r3, r2, r3
 801d538:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 801d53a:	f640 13ac 	movw	r3, #2476	; 0x9ac
 801d53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d542:	f04f 02af 	mov.w	r2, #175	; 0xaf
 801d546:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 801d548:	f04f 0005 	mov.w	r0, #5
 801d54c:	f04f 0181 	mov.w	r1, #129	; 0x81
 801d550:	f000 f9d0 	bl	801d8f4 <Codec_WriteRegister>
 801d554:	4603      	mov	r3, r0
 801d556:	68fa      	ldr	r2, [r7, #12]
 801d558:	18d3      	adds	r3, r2, r3
 801d55a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 801d55c:	f04f 0006 	mov.w	r0, #6
 801d560:	f04f 0104 	mov.w	r1, #4
 801d564:	f000 f9c6 	bl	801d8f4 <Codec_WriteRegister>
 801d568:	4603      	mov	r3, r0
 801d56a:	68fa      	ldr	r2, [r7, #12]
 801d56c:	18d3      	adds	r3, r2, r3
 801d56e:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 801d570:	797b      	ldrb	r3, [r7, #5]
 801d572:	4618      	mov	r0, r3
 801d574:	f000 f932 	bl	801d7dc <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 801d578:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801d57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	2b02      	cmp	r3, #2
 801d584:	d131      	bne.n	801d5ea <Codec_Init+0xfa>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 801d586:	f04f 0008 	mov.w	r0, #8
 801d58a:	f04f 0101 	mov.w	r1, #1
 801d58e:	f000 f9b1 	bl	801d8f4 <Codec_WriteRegister>
 801d592:	4603      	mov	r3, r0
 801d594:	68fa      	ldr	r2, [r7, #12]
 801d596:	18d3      	adds	r3, r2, r3
 801d598:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 801d59a:	f04f 0009 	mov.w	r0, #9
 801d59e:	f04f 0101 	mov.w	r1, #1
 801d5a2:	f000 f9a7 	bl	801d8f4 <Codec_WriteRegister>
 801d5a6:	4603      	mov	r3, r0
 801d5a8:	68fa      	ldr	r2, [r7, #12]
 801d5aa:	18d3      	adds	r3, r2, r3
 801d5ac:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 801d5ae:	f04f 000e 	mov.w	r0, #14
 801d5b2:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 801d5b6:	f000 f99d 	bl	801d8f4 <Codec_WriteRegister>
 801d5ba:	4603      	mov	r3, r0
 801d5bc:	68fa      	ldr	r2, [r7, #12]
 801d5be:	18d3      	adds	r3, r2, r3
 801d5c0:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 801d5c2:	f04f 0014 	mov.w	r0, #20
 801d5c6:	f04f 0100 	mov.w	r1, #0
 801d5ca:	f000 f993 	bl	801d8f4 <Codec_WriteRegister>
 801d5ce:	4603      	mov	r3, r0
 801d5d0:	68fa      	ldr	r2, [r7, #12]
 801d5d2:	18d3      	adds	r3, r2, r3
 801d5d4:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 801d5d6:	f04f 0015 	mov.w	r0, #21
 801d5da:	f04f 0100 	mov.w	r1, #0
 801d5de:	f000 f989 	bl	801d8f4 <Codec_WriteRegister>
 801d5e2:	4603      	mov	r3, r0
 801d5e4:	68fa      	ldr	r2, [r7, #12]
 801d5e6:	18d3      	adds	r3, r2, r3
 801d5e8:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 801d5ea:	f04f 0002 	mov.w	r0, #2
 801d5ee:	f04f 019e 	mov.w	r1, #158	; 0x9e
 801d5f2:	f000 f97f 	bl	801d8f4 <Codec_WriteRegister>
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	68fa      	ldr	r2, [r7, #12]
 801d5fa:	18d3      	adds	r3, r2, r3
 801d5fc:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 801d5fe:	f04f 000a 	mov.w	r0, #10
 801d602:	f04f 0100 	mov.w	r1, #0
 801d606:	f000 f975 	bl	801d8f4 <Codec_WriteRegister>
 801d60a:	4603      	mov	r3, r0
 801d60c:	68fa      	ldr	r2, [r7, #12]
 801d60e:	18d3      	adds	r3, r2, r3
 801d610:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 801d612:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801d616:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	2b02      	cmp	r3, #2
 801d61e:	d009      	beq.n	801d634 <Codec_Init+0x144>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 801d620:	f04f 000e 	mov.w	r0, #14
 801d624:	f04f 0104 	mov.w	r1, #4
 801d628:	f000 f964 	bl	801d8f4 <Codec_WriteRegister>
 801d62c:	4603      	mov	r3, r0
 801d62e:	68fa      	ldr	r2, [r7, #12]
 801d630:	18d3      	adds	r3, r2, r3
 801d632:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 801d634:	f04f 0027 	mov.w	r0, #39	; 0x27
 801d638:	f04f 0100 	mov.w	r1, #0
 801d63c:	f000 f95a 	bl	801d8f4 <Codec_WriteRegister>
 801d640:	4603      	mov	r3, r0
 801d642:	68fa      	ldr	r2, [r7, #12]
 801d644:	18d3      	adds	r3, r2, r3
 801d646:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 801d648:	f04f 001f 	mov.w	r0, #31
 801d64c:	f04f 010f 	mov.w	r1, #15
 801d650:	f000 f950 	bl	801d8f4 <Codec_WriteRegister>
 801d654:	4603      	mov	r3, r0
 801d656:	68fa      	ldr	r2, [r7, #12]
 801d658:	18d3      	adds	r3, r2, r3
 801d65a:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 801d65c:	f04f 001a 	mov.w	r0, #26
 801d660:	f04f 010a 	mov.w	r1, #10
 801d664:	f000 f946 	bl	801d8f4 <Codec_WriteRegister>
 801d668:	4603      	mov	r3, r0
 801d66a:	68fa      	ldr	r2, [r7, #12]
 801d66c:	18d3      	adds	r3, r2, r3
 801d66e:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 801d670:	f04f 001b 	mov.w	r0, #27
 801d674:	f04f 010a 	mov.w	r1, #10
 801d678:	f000 f93c 	bl	801d8f4 <Codec_WriteRegister>
 801d67c:	4603      	mov	r3, r0
 801d67e:	68fa      	ldr	r2, [r7, #12]
 801d680:	18d3      	adds	r3, r2, r3
 801d682:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 801d684:	6838      	ldr	r0, [r7, #0]
 801d686:	f000 fc55 	bl	801df34 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 801d68a:	68fb      	ldr	r3, [r7, #12]
}
 801d68c:	4618      	mov	r0, r3
 801d68e:	f107 0710 	add.w	r7, r7, #16
 801d692:	46bd      	mov	sp, r7
 801d694:	bd80      	pop	{r7, pc}
 801d696:	bf00      	nop

0801d698 <Codec_DeInit>:
  *         resources.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_DeInit(void)
{
 801d698:	b580      	push	{r7, lr}
 801d69a:	b082      	sub	sp, #8
 801d69c:	af00      	add	r7, sp, #0
  uint32_t counter = 0; 
 801d69e:	f04f 0300 	mov.w	r3, #0
 801d6a2:	607b      	str	r3, [r7, #4]

  /* Reset the Codec Registers */
  Codec_Reset();  
 801d6a4:	f000 f90a 	bl	801d8bc <Codec_Reset>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);    
 801d6a8:	f04f 0002 	mov.w	r0, #2
 801d6ac:	f04f 0101 	mov.w	r1, #1
 801d6b0:	f000 f920 	bl	801d8f4 <Codec_WriteRegister>
 801d6b4:	4603      	mov	r3, r0
 801d6b6:	687a      	ldr	r2, [r7, #4]
 801d6b8:	18d3      	adds	r3, r2, r3
 801d6ba:	607b      	str	r3, [r7, #4]
  
  /* Deinitialize all use GPIOs */
  Codec_GPIO_DeInit();
 801d6bc:	f000 fd7a 	bl	801e1b4 <Codec_GPIO_DeInit>

  /* Disable the Codec control interface */
  Codec_CtrlInterface_DeInit();
 801d6c0:	f000 fc32 	bl	801df28 <Codec_CtrlInterface_DeInit>
  
  /* Deinitialize the Codec audio interface (I2S) */
  Codec_AudioInterface_DeInit(); 
 801d6c4:	f000 fc88 	bl	801dfd8 <Codec_AudioInterface_DeInit>
  
  /* Return communication control value */
  return counter;  
 801d6c8:	687b      	ldr	r3, [r7, #4]
}
 801d6ca:	4618      	mov	r0, r3
 801d6cc:	f107 0708 	add.w	r7, r7, #8
 801d6d0:	46bd      	mov	sp, r7
 801d6d2:	bd80      	pop	{r7, pc}

0801d6d4 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 801d6d4:	b480      	push	{r7}
 801d6d6:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 801d6d8:	f04f 0300 	mov.w	r3, #0
}
 801d6dc:	4618      	mov	r0, r3
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	bc80      	pop	{r7}
 801d6e2:	4770      	bx	lr

0801d6e4 <Codec_PauseResume>:
  * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
  *         from 0) to resume. 
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_PauseResume(uint32_t Cmd)
{
 801d6e4:	b580      	push	{r7, lr}
 801d6e6:	b084      	sub	sp, #16
 801d6e8:	af00      	add	r7, sp, #0
 801d6ea:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;   
 801d6ec:	f04f 0300 	mov.w	r3, #0
 801d6f0:	60fb      	str	r3, [r7, #12]
  
  /* Pause the audio file playing */
  if (Cmd == AUDIO_PAUSE)
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	d112      	bne.n	801d71e <Codec_PauseResume+0x3a>
  { 
    /* Mute the output first */
    counter += Codec_Mute(AUDIO_MUTE_ON);
 801d6f8:	f04f 0001 	mov.w	r0, #1
 801d6fc:	f000 f8b4 	bl	801d868 <Codec_Mute>
 801d700:	4603      	mov	r3, r0
 801d702:	68fa      	ldr	r2, [r7, #12]
 801d704:	18d3      	adds	r3, r2, r3
 801d706:	60fb      	str	r3, [r7, #12]

    /* Put the Codec in Power save mode */    
    counter += Codec_WriteRegister(0x02, 0x01);    
 801d708:	f04f 0002 	mov.w	r0, #2
 801d70c:	f04f 0101 	mov.w	r1, #1
 801d710:	f000 f8f0 	bl	801d8f4 <Codec_WriteRegister>
 801d714:	4603      	mov	r3, r0
 801d716:	68fa      	ldr	r2, [r7, #12]
 801d718:	18d3      	adds	r3, r2, r3
 801d71a:	60fb      	str	r3, [r7, #12]
 801d71c:	e020      	b.n	801d760 <Codec_PauseResume+0x7c>
  }
  else /* AUDIO_RESUME */
  {
    /* Unmute the output first */
    counter += Codec_Mute(AUDIO_MUTE_OFF);
 801d71e:	f04f 0000 	mov.w	r0, #0
 801d722:	f000 f8a1 	bl	801d868 <Codec_Mute>
 801d726:	4603      	mov	r3, r0
 801d728:	68fa      	ldr	r2, [r7, #12]
 801d72a:	18d3      	adds	r3, r2, r3
 801d72c:	60fb      	str	r3, [r7, #12]
    
    counter += Codec_WriteRegister(0x04, OutputDev);
 801d72e:	f640 13ac 	movw	r3, #2476	; 0x9ac
 801d732:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d736:	781b      	ldrb	r3, [r3, #0]
 801d738:	b2db      	uxtb	r3, r3
 801d73a:	f04f 0004 	mov.w	r0, #4
 801d73e:	4619      	mov	r1, r3
 801d740:	f000 f8d8 	bl	801d8f4 <Codec_WriteRegister>
 801d744:	4603      	mov	r3, r0
 801d746:	68fa      	ldr	r2, [r7, #12]
 801d748:	18d3      	adds	r3, r2, r3
 801d74a:	60fb      	str	r3, [r7, #12]
    
    /* Exit the Power save mode */
    counter += Codec_WriteRegister(0x02, 0x9E); 
 801d74c:	f04f 0002 	mov.w	r0, #2
 801d750:	f04f 019e 	mov.w	r1, #158	; 0x9e
 801d754:	f000 f8ce 	bl	801d8f4 <Codec_WriteRegister>
 801d758:	4603      	mov	r3, r0
 801d75a:	68fa      	ldr	r2, [r7, #12]
 801d75c:	18d3      	adds	r3, r2, r3
 801d75e:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 801d760:	68fb      	ldr	r3, [r7, #12]
}
 801d762:	4618      	mov	r0, r3
 801d764:	f107 0710 	add.w	r7, r7, #16
 801d768:	46bd      	mov	sp, r7
 801d76a:	bd80      	pop	{r7, pc}

0801d76c <Codec_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Stop(uint32_t CodecPdwnMode)
{
 801d76c:	b580      	push	{r7, lr}
 801d76e:	b084      	sub	sp, #16
 801d770:	af00      	add	r7, sp, #0
 801d772:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;   
 801d774:	f04f 0300 	mov.w	r3, #0
 801d778:	60fb      	str	r3, [r7, #12]

  /* Mute the output first */
  Codec_Mute(AUDIO_MUTE_ON);
 801d77a:	f04f 0001 	mov.w	r0, #1
 801d77e:	f000 f873 	bl	801d868 <Codec_Mute>
  
  if (CodecPdwnMode == CODEC_PDWN_SW)
 801d782:	687b      	ldr	r3, [r7, #4]
 801d784:	2b02      	cmp	r3, #2
 801d786:	d10a      	bne.n	801d79e <Codec_Stop+0x32>
  {    
    /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
    counter += Codec_WriteRegister(0x02, 0x9F);
 801d788:	f04f 0002 	mov.w	r0, #2
 801d78c:	f04f 019f 	mov.w	r1, #159	; 0x9f
 801d790:	f000 f8b0 	bl	801d8f4 <Codec_WriteRegister>
 801d794:	4603      	mov	r3, r0
 801d796:	68fa      	ldr	r2, [r7, #12]
 801d798:	18d3      	adds	r3, r2, r3
 801d79a:	60fb      	str	r3, [r7, #12]
 801d79c:	e017      	b.n	801d7ce <Codec_Stop+0x62>
  }
  else /* CODEC_PDWN_HW */
  { 
    /* Power down the DAC components */
    counter += Codec_WriteRegister(0x02, 0x9F);
 801d79e:	f04f 0002 	mov.w	r0, #2
 801d7a2:	f04f 019f 	mov.w	r1, #159	; 0x9f
 801d7a6:	f000 f8a5 	bl	801d8f4 <Codec_WriteRegister>
 801d7aa:	4603      	mov	r3, r0
 801d7ac:	68fa      	ldr	r2, [r7, #12]
 801d7ae:	18d3      	adds	r3, r2, r3
 801d7b0:	60fb      	str	r3, [r7, #12]
    
    /* Wait at least 100us */
    Delay(0xFFF);
 801d7b2:	f640 70ff 	movw	r0, #4095	; 0xfff
 801d7b6:	f000 fd59 	bl	801e26c <Delay>
    
    /* Reset The pin */
    GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 801d7ba:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801d7be:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801d7c2:	f04f 0110 	mov.w	r1, #16
 801d7c6:	f04f 0200 	mov.w	r2, #0
 801d7ca:	f7f7 fb73 	bl	8014eb4 <GPIO_WriteBit>
  }
  
  return counter;    
 801d7ce:	68fb      	ldr	r3, [r7, #12]
}
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	f107 0710 	add.w	r7, r7, #16
 801d7d6:	46bd      	mov	sp, r7
 801d7d8:	bd80      	pop	{r7, pc}
 801d7da:	bf00      	nop

0801d7dc <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 801d7dc:	b580      	push	{r7, lr}
 801d7de:	b084      	sub	sp, #16
 801d7e0:	af00      	add	r7, sp, #0
 801d7e2:	4603      	mov	r3, r0
 801d7e4:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 801d7e6:	f04f 0300 	mov.w	r3, #0
 801d7ea:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 801d7ec:	79fb      	ldrb	r3, [r7, #7]
 801d7ee:	2be6      	cmp	r3, #230	; 0xe6
 801d7f0:	d91a      	bls.n	801d828 <Codec_VolumeCtrl+0x4c>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 801d7f2:	79fb      	ldrb	r3, [r7, #7]
 801d7f4:	f103 0319 	add.w	r3, r3, #25
 801d7f8:	b2db      	uxtb	r3, r3
 801d7fa:	f04f 0020 	mov.w	r0, #32
 801d7fe:	4619      	mov	r1, r3
 801d800:	f000 f878 	bl	801d8f4 <Codec_WriteRegister>
 801d804:	4603      	mov	r3, r0
 801d806:	68fa      	ldr	r2, [r7, #12]
 801d808:	18d3      	adds	r3, r2, r3
 801d80a:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 801d80c:	79fb      	ldrb	r3, [r7, #7]
 801d80e:	f103 0319 	add.w	r3, r3, #25
 801d812:	b2db      	uxtb	r3, r3
 801d814:	f04f 0021 	mov.w	r0, #33	; 0x21
 801d818:	4619      	mov	r1, r3
 801d81a:	f000 f86b 	bl	801d8f4 <Codec_WriteRegister>
 801d81e:	4603      	mov	r3, r0
 801d820:	68fa      	ldr	r2, [r7, #12]
 801d822:	18d3      	adds	r3, r2, r3
 801d824:	60fb      	str	r3, [r7, #12]
 801d826:	e019      	b.n	801d85c <Codec_VolumeCtrl+0x80>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 801d828:	79fb      	ldrb	r3, [r7, #7]
 801d82a:	f103 0319 	add.w	r3, r3, #25
 801d82e:	b2db      	uxtb	r3, r3
 801d830:	f04f 0020 	mov.w	r0, #32
 801d834:	4619      	mov	r1, r3
 801d836:	f000 f85d 	bl	801d8f4 <Codec_WriteRegister>
 801d83a:	4603      	mov	r3, r0
 801d83c:	68fa      	ldr	r2, [r7, #12]
 801d83e:	18d3      	adds	r3, r2, r3
 801d840:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 801d842:	79fb      	ldrb	r3, [r7, #7]
 801d844:	f103 0319 	add.w	r3, r3, #25
 801d848:	b2db      	uxtb	r3, r3
 801d84a:	f04f 0021 	mov.w	r0, #33	; 0x21
 801d84e:	4619      	mov	r1, r3
 801d850:	f000 f850 	bl	801d8f4 <Codec_WriteRegister>
 801d854:	4603      	mov	r3, r0
 801d856:	68fa      	ldr	r2, [r7, #12]
 801d858:	18d3      	adds	r3, r2, r3
 801d85a:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 801d85c:	68fb      	ldr	r3, [r7, #12]
}
 801d85e:	4618      	mov	r0, r3
 801d860:	f107 0710 	add.w	r7, r7, #16
 801d864:	46bd      	mov	sp, r7
 801d866:	bd80      	pop	{r7, pc}

0801d868 <Codec_Mute>:
  * @param  Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Mute(uint32_t Cmd)
{
 801d868:	b580      	push	{r7, lr}
 801d86a:	b084      	sub	sp, #16
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;  
 801d870:	f04f 0300 	mov.w	r3, #0
 801d874:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if (Cmd == AUDIO_MUTE_ON)
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	2b01      	cmp	r3, #1
 801d87a:	d10a      	bne.n	801d892 <Codec_Mute+0x2a>
  {
    counter += Codec_WriteRegister(0x04, 0xFF);
 801d87c:	f04f 0004 	mov.w	r0, #4
 801d880:	f04f 01ff 	mov.w	r1, #255	; 0xff
 801d884:	f000 f836 	bl	801d8f4 <Codec_WriteRegister>
 801d888:	4603      	mov	r3, r0
 801d88a:	68fa      	ldr	r2, [r7, #12]
 801d88c:	18d3      	adds	r3, r2, r3
 801d88e:	60fb      	str	r3, [r7, #12]
 801d890:	e00e      	b.n	801d8b0 <Codec_Mute+0x48>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += Codec_WriteRegister(0x04, OutputDev);
 801d892:	f640 13ac 	movw	r3, #2476	; 0x9ac
 801d896:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d89a:	781b      	ldrb	r3, [r3, #0]
 801d89c:	b2db      	uxtb	r3, r3
 801d89e:	f04f 0004 	mov.w	r0, #4
 801d8a2:	4619      	mov	r1, r3
 801d8a4:	f000 f826 	bl	801d8f4 <Codec_WriteRegister>
 801d8a8:	4603      	mov	r3, r0
 801d8aa:	68fa      	ldr	r2, [r7, #12]
 801d8ac:	18d3      	adds	r3, r2, r3
 801d8ae:	60fb      	str	r3, [r7, #12]
  }
  
  return counter; 
 801d8b0:	68fb      	ldr	r3, [r7, #12]
}
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	f107 0710 	add.w	r7, r7, #16
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	bd80      	pop	{r7, pc}

0801d8bc <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 801d8bc:	b580      	push	{r7, lr}
 801d8be:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 801d8c0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801d8c4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801d8c8:	f04f 0110 	mov.w	r1, #16
 801d8cc:	f04f 0200 	mov.w	r2, #0
 801d8d0:	f7f7 faf0 	bl	8014eb4 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 801d8d4:	f644 70ff 	movw	r0, #20479	; 0x4fff
 801d8d8:	f000 fcc8 	bl	801e26c <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 801d8dc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801d8e0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801d8e4:	f04f 0110 	mov.w	r1, #16
 801d8e8:	f04f 0201 	mov.w	r2, #1
 801d8ec:	f7f7 fae2 	bl	8014eb4 <GPIO_WriteBit>
}
 801d8f0:	bd80      	pop	{r7, pc}
 801d8f2:	bf00      	nop

0801d8f4 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 801d8f4:	b580      	push	{r7, lr}
 801d8f6:	b084      	sub	sp, #16
 801d8f8:	af00      	add	r7, sp, #0
 801d8fa:	4602      	mov	r2, r0
 801d8fc:	460b      	mov	r3, r1
 801d8fe:	71fa      	strb	r2, [r7, #7]
 801d900:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 801d902:	f04f 0300 	mov.w	r3, #0
 801d906:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 801d908:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801d90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d910:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 801d914:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 801d916:	e016      	b.n	801d946 <Codec_WriteRegister+0x52>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801d918:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801d91c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	2b00      	cmp	r3, #0
 801d924:	bf14      	ite	ne
 801d926:	2200      	movne	r2, #0
 801d928:	2201      	moveq	r2, #1
 801d92a:	b2d2      	uxtb	r2, r2
 801d92c:	f103 31ff 	add.w	r1, r3, #4294967295
 801d930:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801d934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d938:	6019      	str	r1, [r3, #0]
 801d93a:	2a00      	cmp	r2, #0
 801d93c:	d003      	beq.n	801d946 <Codec_WriteRegister+0x52>
 801d93e:	f006 fc0f 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801d942:	4603      	mov	r3, r0
 801d944:	e0ee      	b.n	801db24 <Codec_WriteRegister+0x230>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 801d946:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801d94a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801d94e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801d952:	f7f8 fdd1 	bl	80164f8 <I2C_GetFlagStatus>
 801d956:	4603      	mov	r3, r0
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d1dd      	bne.n	801d918 <Codec_WriteRegister+0x24>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 801d95c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801d960:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801d964:	f04f 0101 	mov.w	r1, #1
 801d968:	f7f8 fab8 	bl	8015edc <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801d96c:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801d970:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d978:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 801d97a:	e016      	b.n	801d9aa <Codec_WriteRegister+0xb6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801d97c:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801d980:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	2b00      	cmp	r3, #0
 801d988:	bf14      	ite	ne
 801d98a:	2200      	movne	r2, #0
 801d98c:	2201      	moveq	r2, #1
 801d98e:	b2d2      	uxtb	r2, r2
 801d990:	f103 31ff 	add.w	r1, r3, #4294967295
 801d994:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801d998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d99c:	6019      	str	r1, [r3, #0]
 801d99e:	2a00      	cmp	r2, #0
 801d9a0:	d003      	beq.n	801d9aa <Codec_WriteRegister+0xb6>
 801d9a2:	f006 fbdd 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801d9a6:	4603      	mov	r3, r0
 801d9a8:	e0bc      	b.n	801db24 <Codec_WriteRegister+0x230>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 801d9aa:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801d9ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801d9b2:	f04f 0101 	mov.w	r1, #1
 801d9b6:	f2c0 0103 	movt	r1, #3
 801d9ba:	f7f8 fd3f 	bl	801643c <I2C_CheckEvent>
 801d9be:	4603      	mov	r3, r0
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d0db      	beq.n	801d97c <Codec_WriteRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 801d9c4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801d9c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801d9cc:	f04f 0194 	mov.w	r1, #148	; 0x94
 801d9d0:	f04f 0200 	mov.w	r2, #0
 801d9d4:	f7f8 fac2 	bl	8015f5c <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801d9d8:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801d9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d9e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d9e4:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 801d9e6:	e016      	b.n	801da16 <Codec_WriteRegister+0x122>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801d9e8:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801d9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	bf14      	ite	ne
 801d9f6:	2200      	movne	r2, #0
 801d9f8:	2201      	moveq	r2, #1
 801d9fa:	b2d2      	uxtb	r2, r2
 801d9fc:	f103 31ff 	add.w	r1, r3, #4294967295
 801da00:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801da04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801da08:	6019      	str	r1, [r3, #0]
 801da0a:	2a00      	cmp	r2, #0
 801da0c:	d003      	beq.n	801da16 <Codec_WriteRegister+0x122>
 801da0e:	f006 fba7 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801da12:	4603      	mov	r3, r0
 801da14:	e086      	b.n	801db24 <Codec_WriteRegister+0x230>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 801da16:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801da1a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801da1e:	f04f 0182 	mov.w	r1, #130	; 0x82
 801da22:	f2c0 0107 	movt	r1, #7
 801da26:	f7f8 fd09 	bl	801643c <I2C_CheckEvent>
 801da2a:	4603      	mov	r3, r0
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d0db      	beq.n	801d9e8 <Codec_WriteRegister+0xf4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 801da30:	79fb      	ldrb	r3, [r7, #7]
 801da32:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801da36:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801da3a:	4619      	mov	r1, r3
 801da3c:	f7f8 fbf2 	bl	8016224 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801da40:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801da44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801da48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801da4c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 801da4e:	e016      	b.n	801da7e <Codec_WriteRegister+0x18a>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801da50:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801da54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801da58:	681b      	ldr	r3, [r3, #0]
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	bf14      	ite	ne
 801da5e:	2200      	movne	r2, #0
 801da60:	2201      	moveq	r2, #1
 801da62:	b2d2      	uxtb	r2, r2
 801da64:	f103 31ff 	add.w	r1, r3, #4294967295
 801da68:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801da6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801da70:	6019      	str	r1, [r3, #0]
 801da72:	2a00      	cmp	r2, #0
 801da74:	d003      	beq.n	801da7e <Codec_WriteRegister+0x18a>
 801da76:	f006 fb73 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801da7a:	4603      	mov	r3, r0
 801da7c:	e052      	b.n	801db24 <Codec_WriteRegister+0x230>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 801da7e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801da82:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801da86:	f04f 0180 	mov.w	r1, #128	; 0x80
 801da8a:	f2c0 0107 	movt	r1, #7
 801da8e:	f7f8 fcd5 	bl	801643c <I2C_CheckEvent>
 801da92:	4603      	mov	r3, r0
 801da94:	2b00      	cmp	r3, #0
 801da96:	d0db      	beq.n	801da50 <Codec_WriteRegister+0x15c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 801da98:	79bb      	ldrb	r3, [r7, #6]
 801da9a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801da9e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801daa2:	4619      	mov	r1, r3
 801daa4:	f7f8 fbbe 	bl	8016224 <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 801daa8:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801daac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dab0:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 801dab4:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 801dab6:	e014      	b.n	801dae2 <Codec_WriteRegister+0x1ee>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 801dab8:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dac0:	681b      	ldr	r3, [r3, #0]
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	bf14      	ite	ne
 801dac6:	2200      	movne	r2, #0
 801dac8:	2201      	moveq	r2, #1
 801daca:	b2d2      	uxtb	r2, r2
 801dacc:	f103 31ff 	add.w	r1, r3, #4294967295
 801dad0:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dad8:	6019      	str	r1, [r3, #0]
 801dada:	2a00      	cmp	r2, #0
 801dadc:	d001      	beq.n	801dae2 <Codec_WriteRegister+0x1ee>
 801dade:	f006 fb3f 	bl	8024160 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 801dae2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dae6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801daea:	f04f 0104 	mov.w	r1, #4
 801daee:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801daf2:	f7f8 fd01 	bl	80164f8 <I2C_GetFlagStatus>
 801daf6:	4603      	mov	r3, r0
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d0dd      	beq.n	801dab8 <Codec_WriteRegister+0x1c4>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 801dafc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801db00:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801db04:	f04f 0101 	mov.w	r1, #1
 801db08:	f7f8 fa08 	bl	8015f1c <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 801db0c:	79fb      	ldrb	r3, [r7, #7]
 801db0e:	4618      	mov	r0, r3
 801db10:	f000 f80e 	bl	801db30 <Codec_ReadRegister>
 801db14:	4602      	mov	r2, r0
 801db16:	79bb      	ldrb	r3, [r7, #6]
 801db18:	429a      	cmp	r2, r3
 801db1a:	bf0c      	ite	eq
 801db1c:	2300      	moveq	r3, #0
 801db1e:	2301      	movne	r3, #1
 801db20:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 801db22:	68fb      	ldr	r3, [r7, #12]
}
 801db24:	4618      	mov	r0, r3
 801db26:	f107 0710 	add.w	r7, r7, #16
 801db2a:	46bd      	mov	sp, r7
 801db2c:	bd80      	pop	{r7, pc}
 801db2e:	bf00      	nop

0801db30 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 801db30:	b580      	push	{r7, lr}
 801db32:	b084      	sub	sp, #16
 801db34:	af00      	add	r7, sp, #0
 801db36:	4603      	mov	r3, r0
 801db38:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 801db3a:	f04f 0300 	mov.w	r3, #0
 801db3e:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 801db40:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801db44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801db48:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 801db4c:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 801db4e:	e016      	b.n	801db7e <Codec_ReadRegister+0x4e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801db50:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801db54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801db58:	681b      	ldr	r3, [r3, #0]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	bf14      	ite	ne
 801db5e:	2200      	movne	r2, #0
 801db60:	2201      	moveq	r2, #1
 801db62:	b2d2      	uxtb	r2, r2
 801db64:	f103 31ff 	add.w	r1, r3, #4294967295
 801db68:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801db6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801db70:	6019      	str	r1, [r3, #0]
 801db72:	2a00      	cmp	r2, #0
 801db74:	d003      	beq.n	801db7e <Codec_ReadRegister+0x4e>
 801db76:	f006 faf3 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801db7a:	4603      	mov	r3, r0
 801db7c:	e197      	b.n	801deae <Codec_ReadRegister+0x37e>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 801db7e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801db82:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801db86:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801db8a:	f7f8 fcb5 	bl	80164f8 <I2C_GetFlagStatus>
 801db8e:	4603      	mov	r3, r0
 801db90:	2b00      	cmp	r3, #0
 801db92:	d1dd      	bne.n	801db50 <Codec_ReadRegister+0x20>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 801db94:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801db98:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801db9c:	f04f 0101 	mov.w	r1, #1
 801dba0:	f7f8 f99c 	bl	8015edc <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801dba4:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dbac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801dbb0:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 801dbb2:	e016      	b.n	801dbe2 <Codec_ReadRegister+0xb2>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801dbb4:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	bf14      	ite	ne
 801dbc2:	2200      	movne	r2, #0
 801dbc4:	2201      	moveq	r2, #1
 801dbc6:	b2d2      	uxtb	r2, r2
 801dbc8:	f103 31ff 	add.w	r1, r3, #4294967295
 801dbcc:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dbd4:	6019      	str	r1, [r3, #0]
 801dbd6:	2a00      	cmp	r2, #0
 801dbd8:	d003      	beq.n	801dbe2 <Codec_ReadRegister+0xb2>
 801dbda:	f006 fac1 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801dbde:	4603      	mov	r3, r0
 801dbe0:	e165      	b.n	801deae <Codec_ReadRegister+0x37e>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 801dbe2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dbe6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dbea:	f04f 0101 	mov.w	r1, #1
 801dbee:	f2c0 0103 	movt	r1, #3
 801dbf2:	f7f8 fc23 	bl	801643c <I2C_CheckEvent>
 801dbf6:	4603      	mov	r3, r0
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	d0db      	beq.n	801dbb4 <Codec_ReadRegister+0x84>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 801dbfc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dc00:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dc04:	f04f 0194 	mov.w	r1, #148	; 0x94
 801dc08:	f04f 0200 	mov.w	r2, #0
 801dc0c:	f7f8 f9a6 	bl	8015f5c <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801dc10:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dc18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801dc1c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 801dc1e:	e016      	b.n	801dc4e <Codec_ReadRegister+0x11e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801dc20:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dc24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	bf14      	ite	ne
 801dc2e:	2200      	movne	r2, #0
 801dc30:	2201      	moveq	r2, #1
 801dc32:	b2d2      	uxtb	r2, r2
 801dc34:	f103 31ff 	add.w	r1, r3, #4294967295
 801dc38:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dc40:	6019      	str	r1, [r3, #0]
 801dc42:	2a00      	cmp	r2, #0
 801dc44:	d003      	beq.n	801dc4e <Codec_ReadRegister+0x11e>
 801dc46:	f006 fa8b 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801dc4a:	4603      	mov	r3, r0
 801dc4c:	e12f      	b.n	801deae <Codec_ReadRegister+0x37e>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 801dc4e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dc52:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dc56:	f04f 0182 	mov.w	r1, #130	; 0x82
 801dc5a:	f2c0 0107 	movt	r1, #7
 801dc5e:	f7f8 fbed 	bl	801643c <I2C_CheckEvent>
 801dc62:	4603      	mov	r3, r0
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d0db      	beq.n	801dc20 <Codec_ReadRegister+0xf0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 801dc68:	79fb      	ldrb	r3, [r7, #7]
 801dc6a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dc6e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dc72:	4619      	mov	r1, r3
 801dc74:	f7f8 fad6 	bl	8016224 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801dc78:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dc7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dc80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801dc84:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 801dc86:	e016      	b.n	801dcb6 <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801dc88:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	bf14      	ite	ne
 801dc96:	2200      	movne	r2, #0
 801dc98:	2201      	moveq	r2, #1
 801dc9a:	b2d2      	uxtb	r2, r2
 801dc9c:	f103 31ff 	add.w	r1, r3, #4294967295
 801dca0:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dca8:	6019      	str	r1, [r3, #0]
 801dcaa:	2a00      	cmp	r2, #0
 801dcac:	d003      	beq.n	801dcb6 <Codec_ReadRegister+0x186>
 801dcae:	f006 fa57 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801dcb2:	4603      	mov	r3, r0
 801dcb4:	e0fb      	b.n	801deae <Codec_ReadRegister+0x37e>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 801dcb6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dcba:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dcbe:	f04f 0104 	mov.w	r1, #4
 801dcc2:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801dcc6:	f7f8 fc17 	bl	80164f8 <I2C_GetFlagStatus>
 801dcca:	4603      	mov	r3, r0
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	d0db      	beq.n	801dc88 <Codec_ReadRegister+0x158>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 801dcd0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dcd4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dcd8:	f04f 0101 	mov.w	r1, #1
 801dcdc:	f7f8 f8fe 	bl	8015edc <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801dce0:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801dcec:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 801dcee:	e016      	b.n	801dd1e <Codec_ReadRegister+0x1ee>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801dcf0:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dcf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	bf14      	ite	ne
 801dcfe:	2200      	movne	r2, #0
 801dd00:	2201      	moveq	r2, #1
 801dd02:	b2d2      	uxtb	r2, r2
 801dd04:	f103 31ff 	add.w	r1, r3, #4294967295
 801dd08:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dd0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dd10:	6019      	str	r1, [r3, #0]
 801dd12:	2a00      	cmp	r2, #0
 801dd14:	d003      	beq.n	801dd1e <Codec_ReadRegister+0x1ee>
 801dd16:	f006 fa23 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801dd1a:	4603      	mov	r3, r0
 801dd1c:	e0c7      	b.n	801deae <Codec_ReadRegister+0x37e>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 801dd1e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dd22:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dd26:	f04f 0101 	mov.w	r1, #1
 801dd2a:	f2c0 0103 	movt	r1, #3
 801dd2e:	f7f8 fb85 	bl	801643c <I2C_CheckEvent>
 801dd32:	4603      	mov	r3, r0
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d0db      	beq.n	801dcf0 <Codec_ReadRegister+0x1c0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 801dd38:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dd3c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dd40:	f04f 0194 	mov.w	r1, #148	; 0x94
 801dd44:	f04f 0201 	mov.w	r2, #1
 801dd48:	f7f8 f908 	bl	8015f5c <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801dd4c:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dd54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801dd58:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 801dd5a:	e016      	b.n	801dd8a <Codec_ReadRegister+0x25a>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801dd5c:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dd60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	bf14      	ite	ne
 801dd6a:	2200      	movne	r2, #0
 801dd6c:	2201      	moveq	r2, #1
 801dd6e:	b2d2      	uxtb	r2, r2
 801dd70:	f103 31ff 	add.w	r1, r3, #4294967295
 801dd74:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dd78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dd7c:	6019      	str	r1, [r3, #0]
 801dd7e:	2a00      	cmp	r2, #0
 801dd80:	d003      	beq.n	801dd8a <Codec_ReadRegister+0x25a>
 801dd82:	f006 f9ed 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801dd86:	4603      	mov	r3, r0
 801dd88:	e091      	b.n	801deae <Codec_ReadRegister+0x37e>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 801dd8a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dd8e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dd92:	f04f 0102 	mov.w	r1, #2
 801dd96:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801dd9a:	f7f8 fbad 	bl	80164f8 <I2C_GetFlagStatus>
 801dd9e:	4603      	mov	r3, r0
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d0db      	beq.n	801dd5c <Codec_ReadRegister+0x22c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 801dda4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dda8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801ddac:	f04f 0100 	mov.w	r1, #0
 801ddb0:	f7f8 f8f2 	bl	8015f98 <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 801ddb4:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 801ddb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801ddbc:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 801ddbe:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801ddc2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801ddc6:	f04f 0101 	mov.w	r1, #1
 801ddca:	f7f8 f8a7 	bl	8015f1c <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801ddce:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801ddd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ddd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ddda:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 801dddc:	e016      	b.n	801de0c <Codec_ReadRegister+0x2dc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801ddde:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801dde2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	bf14      	ite	ne
 801ddec:	2200      	movne	r2, #0
 801ddee:	2201      	moveq	r2, #1
 801ddf0:	b2d2      	uxtb	r2, r2
 801ddf2:	f103 31ff 	add.w	r1, r3, #4294967295
 801ddf6:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801ddfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ddfe:	6019      	str	r1, [r3, #0]
 801de00:	2a00      	cmp	r2, #0
 801de02:	d003      	beq.n	801de0c <Codec_ReadRegister+0x2dc>
 801de04:	f006 f9ac 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801de08:	4603      	mov	r3, r0
 801de0a:	e050      	b.n	801deae <Codec_ReadRegister+0x37e>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 801de0c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801de10:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801de14:	f04f 0140 	mov.w	r1, #64	; 0x40
 801de18:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801de1c:	f7f8 fb6c 	bl	80164f8 <I2C_GetFlagStatus>
 801de20:	4603      	mov	r3, r0
 801de22:	2b00      	cmp	r3, #0
 801de24:	d0db      	beq.n	801ddde <Codec_ReadRegister+0x2ae>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 801de26:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801de2a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801de2e:	f7f8 fa09 	bl	8016244 <I2C_ReceiveData>
 801de32:	4603      	mov	r3, r0
 801de34:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 801de36:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801de3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801de3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801de42:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 801de44:	e016      	b.n	801de74 <Codec_ReadRegister+0x344>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 801de46:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801de4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	2b00      	cmp	r3, #0
 801de52:	bf14      	ite	ne
 801de54:	2200      	movne	r2, #0
 801de56:	2201      	moveq	r2, #1
 801de58:	b2d2      	uxtb	r2, r2
 801de5a:	f103 31ff 	add.w	r1, r3, #4294967295
 801de5e:	f640 03f4 	movw	r3, #2292	; 0x8f4
 801de62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801de66:	6019      	str	r1, [r3, #0]
 801de68:	2a00      	cmp	r2, #0
 801de6a:	d003      	beq.n	801de74 <Codec_ReadRegister+0x344>
 801de6c:	f006 f978 	bl	8024160 <Codec_TIMEOUT_UserCallback>
 801de70:	4603      	mov	r3, r0
 801de72:	e01c      	b.n	801deae <Codec_ReadRegister+0x37e>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 801de74:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 801de78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801de7c:	881b      	ldrh	r3, [r3, #0]
 801de7e:	b29b      	uxth	r3, r3
 801de80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801de84:	2b00      	cmp	r3, #0
 801de86:	d1de      	bne.n	801de46 <Codec_ReadRegister+0x316>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 801de88:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801de8c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801de90:	f04f 0101 	mov.w	r1, #1
 801de94:	f7f8 f880 	bl	8015f98 <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 801de98:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801de9c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801dea4:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801dea8:	f7f8 fb62 	bl	8016570 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 801deac:	68fb      	ldr	r3, [r7, #12]
}
 801deae:	4618      	mov	r0, r3
 801deb0:	f107 0710 	add.w	r7, r7, #16
 801deb4:	46bd      	mov	sp, r7
 801deb6:	bd80      	pop	{r7, pc}

0801deb8 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 801deb8:	b580      	push	{r7, lr}
 801deba:	b084      	sub	sp, #16
 801debc:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 801debe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801dec2:	f04f 0101 	mov.w	r1, #1
 801dec6:	f7f9 f96d 	bl	80171a4 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 801deca:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801dece:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801ded2:	f7f7 fea7 	bl	8015c24 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 801ded6:	f04f 0300 	mov.w	r3, #0
 801deda:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 801dedc:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 801dee0:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 801dee2:	f04f 0333 	mov.w	r3, #51	; 0x33
 801dee6:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 801dee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801deec:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 801deee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801def2:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 801def4:	f248 63a0 	movw	r3, #34464	; 0x86a0
 801def8:	f2c0 0301 	movt	r3, #1
 801defc:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 801defe:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801df02:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801df06:	f04f 0101 	mov.w	r1, #1
 801df0a:	f7f7 ffc7 	bl	8015e9c <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 801df0e:	463b      	mov	r3, r7
 801df10:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801df14:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801df18:	4619      	mov	r1, r3
 801df1a:	f7f7 fec7 	bl	8015cac <I2C_Init>
}
 801df1e:	f107 0710 	add.w	r7, r7, #16
 801df22:	46bd      	mov	sp, r7
 801df24:	bd80      	pop	{r7, pc}
 801df26:	bf00      	nop

0801df28 <Codec_CtrlInterface_DeInit>:
  *         may be used by other modules.
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_DeInit(void)
{
 801df28:	b480      	push	{r7}
 801df2a:	af00      	add	r7, sp, #0
  /* Disable the I2C peripheral */ /* This step is not done here because 
     the I2C interface can be used by other modules */
  /* I2C_DeInit(CODEC_I2C); */
}
 801df2c:	46bd      	mov	sp, r7
 801df2e:	bc80      	pop	{r7}
 801df30:	4770      	bx	lr
 801df32:	bf00      	nop

0801df34 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 801df34:	b580      	push	{r7, lr}
 801df36:	b08a      	sub	sp, #40	; 0x28
 801df38:	af00      	add	r7, sp, #0
 801df3a:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 801df3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801df40:	f04f 0101 	mov.w	r1, #1
 801df44:	f7f9 f92e 	bl	80171a4 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 801df48:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801df4c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801df50:	f7fb fd8a 	bl	8019a68 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 801df58:	f04f 0300 	mov.w	r3, #0
 801df5c:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 801df5e:	f04f 0300 	mov.w	r3, #0
 801df62:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 801df64:	f04f 0300 	mov.w	r3, #0
 801df68:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 801df6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801df6e:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 801df70:	f44f 7300 	mov.w	r3, #512	; 0x200
 801df74:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 801df76:	f107 0318 	add.w	r3, r7, #24
 801df7a:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801df7e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801df82:	4619      	mov	r1, r3
 801df84:	f7fb fdf8 	bl	8019b78 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 801df88:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801df8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	2b02      	cmp	r3, #2
 801df94:	d11b      	bne.n	801dfce <Codec_AudioInterface_Init+0x9a>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 801df96:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801df9a:	f04f 0101 	mov.w	r1, #1
 801df9e:	f7f9 f901 	bl	80171a4 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 801dfa2:	f04f 0300 	mov.w	r3, #0
 801dfa6:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 801dfa8:	f04f 0300 	mov.w	r3, #0
 801dfac:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 801dfae:	f04f 0300 	mov.w	r3, #0
 801dfb2:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 801dfb4:	f107 0308 	add.w	r3, r7, #8
 801dfb8:	f04f 0000 	mov.w	r0, #0
 801dfbc:	4619      	mov	r1, r3
 801dfbe:	f7f3 ff8b 	bl	8011ed8 <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 801dfc2:	f04f 0000 	mov.w	r0, #0
 801dfc6:	f04f 0101 	mov.w	r1, #1
 801dfca:	f7f3 ffd9 	bl	8011f80 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 801dfce:	f107 0728 	add.w	r7, r7, #40	; 0x28
 801dfd2:	46bd      	mov	sp, r7
 801dfd4:	bd80      	pop	{r7, pc}
 801dfd6:	bf00      	nop

0801dfd8 <Codec_AudioInterface_DeInit>:
  * @brief  Restores the Audio Codec audio interface to its default state.
  * @param  None
  * @retval None
  */
static void Codec_AudioInterface_DeInit(void)
{
 801dfd8:	b580      	push	{r7, lr}
 801dfda:	af00      	add	r7, sp, #0
  /* Disable the CODEC_I2S peripheral (in case it hasn't already been disabled) */
  I2S_Cmd(CODEC_I2S, DISABLE);
 801dfdc:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801dfe0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dfe4:	f04f 0100 	mov.w	r1, #0
 801dfe8:	f7fb ff40 	bl	8019e6c <I2S_Cmd>
  
  /* Deinitialize the CODEC_I2S peripheral */
  SPI_I2S_DeInit(CODEC_I2S);
 801dfec:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801dff0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801dff4:	f7fb fd38 	bl	8019a68 <SPI_I2S_DeInit>
  
  /* Disable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, DISABLE); 
 801dff8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801dffc:	f04f 0100 	mov.w	r1, #0
 801e000:	f7f9 f8d0 	bl	80171a4 <RCC_APB1PeriphClockCmd>
}
 801e004:	bd80      	pop	{r7, pc}
 801e006:	bf00      	nop

0801e008 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 801e008:	b580      	push	{r7, lr}
 801e00a:	b082      	sub	sp, #8
 801e00c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 801e00e:	f04f 0008 	mov.w	r0, #8
 801e012:	f04f 0101 	mov.w	r1, #1
 801e016:	f7f9 f841 	bl	801709c <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 801e01a:	f04f 0310 	mov.w	r3, #16
 801e01e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801e020:	f04f 0301 	mov.w	r3, #1
 801e024:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801e026:	f04f 0302 	mov.w	r3, #2
 801e02a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801e02c:	f04f 0300 	mov.w	r3, #0
 801e030:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801e032:	f04f 0300 	mov.w	r3, #0
 801e036:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 801e038:	463b      	mov	r3, r7
 801e03a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801e03e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e042:	4619      	mov	r1, r3
 801e044:	f7f6 fdd8 	bl	8014bf8 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 801e048:	f04f 0007 	mov.w	r0, #7
 801e04c:	f04f 0101 	mov.w	r1, #1
 801e050:	f7f9 f824 	bl	801709c <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 801e054:	f44f 7310 	mov.w	r3, #576	; 0x240
 801e058:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801e05a:	f04f 0302 	mov.w	r3, #2
 801e05e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801e060:	f04f 0302 	mov.w	r3, #2
 801e064:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 801e066:	f04f 0301 	mov.w	r3, #1
 801e06a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801e06c:	f04f 0300 	mov.w	r3, #0
 801e070:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 801e072:	463b      	mov	r3, r7
 801e074:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801e078:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e07c:	4619      	mov	r1, r3
 801e07e:	f7f6 fdbb 	bl	8014bf8 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 801e082:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801e086:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e08a:	f04f 0106 	mov.w	r1, #6
 801e08e:	f04f 0204 	mov.w	r2, #4
 801e092:	f7f6 ff47 	bl	8014f24 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 801e096:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801e09a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e09e:	f04f 0109 	mov.w	r1, #9
 801e0a2:	f04f 0204 	mov.w	r2, #4
 801e0a6:	f7f6 ff3d 	bl	8014f24 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 801e0aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e0ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801e0b0:	f04f 0302 	mov.w	r3, #2
 801e0b4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801e0b6:	f04f 0302 	mov.w	r3, #2
 801e0ba:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801e0bc:	f04f 0300 	mov.w	r3, #0
 801e0c0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801e0c2:	f04f 0300 	mov.w	r3, #0
 801e0c6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 801e0c8:	463b      	mov	r3, r7
 801e0ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e0ce:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e0d2:	4619      	mov	r1, r3
 801e0d4:	f7f6 fd90 	bl	8014bf8 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 801e0d8:	f04f 0000 	mov.w	r0, #0
 801e0dc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e0e0:	f04f 0104 	mov.w	r1, #4
 801e0e4:	f04f 0206 	mov.w	r2, #6
 801e0e8:	f7f6 ff1c 	bl	8014f24 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 801e0ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e0f0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e0f4:	f04f 010a 	mov.w	r1, #10
 801e0f8:	f04f 0206 	mov.w	r2, #6
 801e0fc:	f7f6 ff12 	bl	8014f24 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 801e100:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801e104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e108:	681b      	ldr	r3, [r3, #0]
 801e10a:	2b02      	cmp	r3, #2
 801e10c:	d015      	beq.n	801e13a <Codec_GPIO_Init+0x132>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 801e10e:	f04f 0310 	mov.w	r3, #16
 801e112:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 801e114:	463b      	mov	r3, r7
 801e116:	f04f 0000 	mov.w	r0, #0
 801e11a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e11e:	4619      	mov	r1, r3
 801e120:	f7f6 fd6a 	bl	8014bf8 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 801e124:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e128:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e12c:	f04f 010c 	mov.w	r1, #12
 801e130:	f04f 0206 	mov.w	r2, #6
 801e134:	f7f6 fef6 	bl	8014f24 <GPIO_PinAFConfig>
 801e138:	e016      	b.n	801e168 <Codec_GPIO_Init+0x160>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 801e13a:	f04f 0001 	mov.w	r0, #1
 801e13e:	f04f 0101 	mov.w	r1, #1
 801e142:	f7f8 ffab 	bl	801709c <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 801e146:	f04f 0310 	mov.w	r3, #16
 801e14a:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 801e14c:	f04f 0303 	mov.w	r3, #3
 801e150:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801e152:	f04f 0300 	mov.w	r3, #0
 801e156:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 801e158:	463b      	mov	r3, r7
 801e15a:	f04f 0000 	mov.w	r0, #0
 801e15e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e162:	4619      	mov	r1, r3
 801e164:	f7f6 fd48 	bl	8014bf8 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 801e168:	f04f 0380 	mov.w	r3, #128	; 0x80
 801e16c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801e16e:	f04f 0302 	mov.w	r3, #2
 801e172:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801e174:	f04f 0302 	mov.w	r3, #2
 801e178:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801e17a:	f04f 0300 	mov.w	r3, #0
 801e17e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801e180:	f04f 0300 	mov.w	r3, #0
 801e184:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 801e186:	463b      	mov	r3, r7
 801e188:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e18c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e190:	4619      	mov	r1, r3
 801e192:	f7f6 fd31 	bl	8014bf8 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 801e196:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e19a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e19e:	f04f 0107 	mov.w	r1, #7
 801e1a2:	f04f 0206 	mov.w	r2, #6
 801e1a6:	f7f6 febd 	bl	8014f24 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 801e1aa:	f107 0708 	add.w	r7, r7, #8
 801e1ae:	46bd      	mov	sp, r7
 801e1b0:	bd80      	pop	{r7, pc}
 801e1b2:	bf00      	nop

0801e1b4 <Codec_GPIO_DeInit>:
  * @brief  Restores the IOs used by the Audio Codec interface to their default state.
  * @param  None
  * @retval None
  */
static void Codec_GPIO_DeInit(void)
{
 801e1b4:	b580      	push	{r7, lr}
 801e1b6:	b082      	sub	sp, #8
 801e1b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Deinitialize all the GPIOs used by the driver */
  GPIO_InitStructure.GPIO_Pin =  CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN;
 801e1ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e1be:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801e1c0:	f04f 0300 	mov.w	r3, #0
 801e1c4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 801e1c6:	f04f 0300 	mov.w	r3, #0
 801e1ca:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801e1cc:	f04f 0300 	mov.w	r3, #0
 801e1d0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801e1d2:	f04f 0300 	mov.w	r3, #0
 801e1d6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);  
 801e1d8:	463b      	mov	r3, r7
 801e1da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e1de:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e1e2:	4619      	mov	r1, r3
 801e1e4:	f7f6 fd08 	bl	8014bf8 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 801e1e8:	f04f 0310 	mov.w	r3, #16
 801e1ec:	603b      	str	r3, [r7, #0]
  GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 801e1ee:	463b      	mov	r3, r7
 801e1f0:	f04f 0000 	mov.w	r0, #0
 801e1f4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e1f8:	4619      	mov	r1, r3
 801e1fa:	f7f6 fcfd 	bl	8014bf8 <GPIO_Init>
     
  /* Disconnect pins from I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, 0x00);  
 801e1fe:	f04f 0000 	mov.w	r0, #0
 801e202:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e206:	f04f 0104 	mov.w	r1, #4
 801e20a:	f04f 0200 	mov.w	r2, #0
 801e20e:	f7f6 fe89 	bl	8014f24 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, 0x00);
 801e212:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e216:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e21a:	f04f 010a 	mov.w	r1, #10
 801e21e:	f04f 0200 	mov.w	r2, #0
 801e222:	f7f6 fe7f 	bl	8014f24 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, 0x00);  
 801e226:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e22a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e22e:	f04f 010c 	mov.w	r1, #12
 801e232:	f04f 0200 	mov.w	r2, #0
 801e236:	f7f6 fe75 	bl	8014f24 <GPIO_PinAFConfig>
  
#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins deinitialization: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 801e23a:	f04f 0380 	mov.w	r3, #128	; 0x80
 801e23e:	603b      	str	r3, [r7, #0]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 801e240:	463b      	mov	r3, r7
 801e242:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e246:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e24a:	4619      	mov	r1, r3
 801e24c:	f7f6 fcd4 	bl	8014bf8 <GPIO_Init>
  /* Disconnect pins from I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 801e250:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e254:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e258:	f04f 0107 	mov.w	r1, #7
 801e25c:	f04f 0206 	mov.w	r2, #6
 801e260:	f7f6 fe60 	bl	8014f24 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */    
}
 801e264:	f107 0708 	add.w	r7, r7, #8
 801e268:	46bd      	mov	sp, r7
 801e26a:	bd80      	pop	{r7, pc}

0801e26c <Delay>:
  * @brief  Inserts a delay time (not accurate timing).
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void Delay( __IO uint32_t nCount)
{
 801e26c:	b480      	push	{r7}
 801e26e:	b083      	sub	sp, #12
 801e270:	af00      	add	r7, sp, #0
 801e272:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 801e274:	e003      	b.n	801e27e <Delay+0x12>
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	f103 33ff 	add.w	r3, r3, #4294967295
 801e27c:	607b      	str	r3, [r7, #4]
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	2b00      	cmp	r3, #0
 801e282:	d1f8      	bne.n	801e276 <Delay+0xa>
}
 801e284:	f107 070c 	add.w	r7, r7, #12
 801e288:	46bd      	mov	sp, r7
 801e28a:	bc80      	pop	{r7}
 801e28c:	4770      	bx	lr
 801e28e:	bf00      	nop

0801e290 <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 801e290:	b580      	push	{r7, lr}
 801e292:	b082      	sub	sp, #8
 801e294:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 801e296:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801e29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	2b01      	cmp	r3, #1
 801e2a2:	f040 80b8 	bne.w	801e416 <Audio_MAL_Init+0x186>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 801e2a6:	f640 03fc 	movw	r3, #2300	; 0x8fc
 801e2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	4618      	mov	r0, r3
 801e2b2:	f04f 0101 	mov.w	r1, #1
 801e2b6:	f7f8 fef1 	bl	801709c <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 801e2ba:	f640 1300 	movw	r3, #2304	; 0x900
 801e2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	f04f 0100 	mov.w	r1, #0
 801e2ca:	f7f4 fd2f 	bl	8012d2c <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 801e2ce:	f640 1300 	movw	r3, #2304	; 0x900
 801e2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	4618      	mov	r0, r3
 801e2da:	f7f4 fb67 	bl	80129ac <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 801e2de:	f640 13b0 	movw	r3, #2480	; 0x9b0
 801e2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e2e6:	681a      	ldr	r2, [r3, #0]
 801e2e8:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e2f0:	601a      	str	r2, [r3, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 801e2f2:	f640 1304 	movw	r3, #2308	; 0x904
 801e2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e2fa:	681a      	ldr	r2, [r3, #0]
 801e2fc:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e304:	605a      	str	r2, [r3, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 801e306:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e30e:	f04f 0200 	mov.w	r2, #0
 801e312:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 801e314:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e318:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e31c:	f04f 0240 	mov.w	r2, #64	; 0x40
 801e320:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 801e322:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e326:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e32a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e32e:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 801e330:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e334:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e338:	f04f 0200 	mov.w	r2, #0
 801e33c:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801e33e:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e342:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e34a:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 801e34c:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e350:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e358:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 801e35a:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e35e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801e366:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 801e368:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e370:	f04f 0200 	mov.w	r2, #0
 801e374:	625a      	str	r2, [r3, #36]	; 0x24
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 801e376:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e37e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801e382:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 801e384:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e388:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e38c:	f04f 0200 	mov.w	r2, #0
 801e390:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 801e392:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e396:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e39a:	f04f 0200 	mov.w	r2, #0
 801e39e:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 801e3a0:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e3a8:	f04f 0200 	mov.w	r2, #0
 801e3ac:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 801e3ae:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e3b6:	f04f 0200 	mov.w	r2, #0
 801e3ba:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 801e3bc:	f640 1300 	movw	r3, #2304	; 0x900
 801e3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e3c4:	681b      	ldr	r3, [r3, #0]
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	f241 51f4 	movw	r1, #5620	; 0x15f4
 801e3cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801e3d0:	f7f4 fc0e 	bl	8012bf0 <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 801e3d4:	f640 1300 	movw	r3, #2304	; 0x900
 801e3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e3dc:	681b      	ldr	r3, [r3, #0]
 801e3de:	4618      	mov	r0, r3
 801e3e0:	f04f 0110 	mov.w	r1, #16
 801e3e4:	f04f 0201 	mov.w	r2, #1
 801e3e8:	f7f4 fe1e 	bl	8013028 <DMA_ITConfig>
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 801e3ec:	f640 1308 	movw	r3, #2312	; 0x908
 801e3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	b2db      	uxtb	r3, r3
 801e3f8:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 801e3fa:	f04f 0300 	mov.w	r3, #0
 801e3fe:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 801e400:	f04f 0300 	mov.w	r3, #0
 801e404:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 801e406:	f04f 0301 	mov.w	r3, #1
 801e40a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 801e40c:	f107 0304 	add.w	r3, r7, #4
 801e410:	4618      	mov	r0, r3
 801e412:	f7ef fe01 	bl	800e018 <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 801e416:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801e41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	2b01      	cmp	r3, #1
 801e422:	d10a      	bne.n	801e43a <Audio_MAL_Init+0x1aa>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 801e424:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801e428:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801e42c:	f04f 0102 	mov.w	r1, #2
 801e430:	f04f 0201 	mov.w	r2, #1
 801e434:	f7fb fea0 	bl	801a178 <SPI_I2S_DMACmd>
 801e438:	e01c      	b.n	801e474 <Audio_MAL_Init+0x1e4>
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 801e43a:	f000 f935 	bl	801e6a8 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 801e43e:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801e442:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801e446:	f04f 0171 	mov.w	r1, #113	; 0x71
 801e44a:	f04f 0201 	mov.w	r2, #1
 801e44e:	f7fb feb7 	bl	801a1c0 <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 801e452:	f04f 0333 	mov.w	r3, #51	; 0x33
 801e456:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 801e458:	f04f 0300 	mov.w	r3, #0
 801e45c:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 801e45e:	f04f 0300 	mov.w	r3, #0
 801e462:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 801e464:	f04f 0301 	mov.w	r3, #1
 801e468:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 801e46a:	f107 0304 	add.w	r3, r7, #4
 801e46e:	4618      	mov	r0, r3
 801e470:	f7ef fdd2 	bl	800e018 <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 801e474:	f107 0708 	add.w	r7, r7, #8
 801e478:	46bd      	mov	sp, r7
 801e47a:	bd80      	pop	{r7, pc}

0801e47c <Audio_MAL_DeInit>:
  * @brief  Restore default state of the used Media.
  * @param  None
  * @retval None
  */
static void Audio_MAL_DeInit(void)  
{   
 801e47c:	b580      	push	{r7, lr}
 801e47e:	b082      	sub	sp, #8
 801e480:	af00      	add	r7, sp, #0
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;  
  
  /* Deinitialize the NVIC interrupt for the I2S DMA Stream */
  NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 801e482:	f640 1308 	movw	r3, #2312	; 0x908
 801e486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	b2db      	uxtb	r3, r3
 801e48e:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 801e490:	f04f 0300 	mov.w	r3, #0
 801e494:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 801e496:	f04f 0300 	mov.w	r3, #0
 801e49a:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 801e49c:	f04f 0300 	mov.w	r3, #0
 801e4a0:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);  
 801e4a2:	f107 0304 	add.w	r3, r7, #4
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	f7ef fdb6 	bl	800e018 <NVIC_Init>
#endif 
  
  /* Disable the DMA stream before the deinit */
  DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 801e4ac:	f640 1300 	movw	r3, #2304	; 0x900
 801e4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	4618      	mov	r0, r3
 801e4b8:	f04f 0100 	mov.w	r1, #0
 801e4bc:	f7f4 fc36 	bl	8012d2c <DMA_Cmd>
  
  /* Dinitialize the DMA Stream */
  DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 801e4c0:	f640 1300 	movw	r3, #2304	; 0x900
 801e4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e4c8:	681b      	ldr	r3, [r3, #0]
 801e4ca:	4618      	mov	r0, r3
 801e4cc:	f7f4 fa6e 	bl	80129ac <DMA_DeInit>
  
  /* 
     The DMA clock is not disabled, since it can be used by other streams 
                                                                          */ 
}
 801e4d0:	f107 0708 	add.w	r7, r7, #8
 801e4d4:	46bd      	mov	sp, r7
 801e4d6:	bd80      	pop	{r7, pc}

0801e4d8 <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 801e4d8:	b580      	push	{r7, lr}
 801e4da:	b082      	sub	sp, #8
 801e4dc:	af00      	add	r7, sp, #0
 801e4de:	6078      	str	r0, [r7, #4]
 801e4e0:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 801e4e2:	f640 03f8 	movw	r3, #2296	; 0x8f8
 801e4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	2b01      	cmp	r3, #1
 801e4ee:	d124      	bne.n	801e53a <Audio_MAL_Play+0x62>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 801e4f0:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e4f8:	687a      	ldr	r2, [r7, #4]
 801e4fa:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size/2;
 801e4fc:	683b      	ldr	r3, [r7, #0]
 801e4fe:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801e502:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e506:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e50a:	611a      	str	r2, [r3, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 801e50c:	f640 1300 	movw	r3, #2304	; 0x900
 801e510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	4618      	mov	r0, r3
 801e518:	f241 51f4 	movw	r1, #5620	; 0x15f4
 801e51c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801e520:	f7f4 fb66 	bl	8012bf0 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 801e524:	f640 1300 	movw	r3, #2304	; 0x900
 801e528:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	4618      	mov	r0, r3
 801e530:	f04f 0101 	mov.w	r1, #1
 801e534:	f7f4 fbfa 	bl	8012d2c <DMA_Cmd>
 801e538:	e021      	b.n	801e57e <Audio_MAL_Play+0xa6>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 801e53a:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e542:	687a      	ldr	r2, [r7, #4]
 801e544:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 801e546:	f241 53f4 	movw	r3, #5620	; 0x15f4
 801e54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e54e:	683a      	ldr	r2, [r7, #0]
 801e550:	611a      	str	r2, [r3, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 801e552:	f640 1300 	movw	r3, #2304	; 0x900
 801e556:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	4618      	mov	r0, r3
 801e55e:	f241 51f4 	movw	r1, #5620	; 0x15f4
 801e562:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801e566:	f7f4 fb43 	bl	8012bf0 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 801e56a:	f640 1300 	movw	r3, #2304	; 0x900
 801e56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	4618      	mov	r0, r3
 801e576:	f04f 0101 	mov.w	r1, #1
 801e57a:	f7f4 fbd7 	bl	8012d2c <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 801e57e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801e582:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801e586:	8b9b      	ldrh	r3, [r3, #28]
 801e588:	b29b      	uxth	r3, r3
 801e58a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d107      	bne.n	801e5a2 <Audio_MAL_Play+0xca>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 801e592:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801e596:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801e59a:	f04f 0101 	mov.w	r1, #1
 801e59e:	f7fb fc65 	bl	8019e6c <I2S_Cmd>
  }
}
 801e5a2:	f107 0708 	add.w	r7, r7, #8
 801e5a6:	46bd      	mov	sp, r7
 801e5a8:	bd80      	pop	{r7, pc}
 801e5aa:	bf00      	nop

0801e5ac <Audio_MAL_PauseResume>:
  *              from 0) to resume. 
  * @param  Addr: Address from/at which the audio stream should resume/pause.
  * @retval None
  */
static void Audio_MAL_PauseResume(uint32_t Cmd, uint32_t Addr)
{
 801e5ac:	b580      	push	{r7, lr}
 801e5ae:	b082      	sub	sp, #8
 801e5b0:	af00      	add	r7, sp, #0
 801e5b2:	6078      	str	r0, [r7, #4]
 801e5b4:	6039      	str	r1, [r7, #0]
  /* Pause the audio file playing */
  if (Cmd == AUDIO_PAUSE)
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d114      	bne.n	801e5e6 <Audio_MAL_PauseResume+0x3a>
  {   
    /* Disable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, DISABLE);
 801e5bc:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801e5c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801e5c4:	f04f 0102 	mov.w	r1, #2
 801e5c8:	f04f 0200 	mov.w	r2, #0
 801e5cc:	f7fb fdd4 	bl	801a178 <SPI_I2S_DMACmd>
    /* Pause the I2S DMA Stream 
        Note. For the STM32F40x devices, the DMA implements a pause feature, 
              by disabling the stream, all configuration is preserved and data 
              transfer is paused till the next enable of the stream.
              This feature is not available on STM32F40x devices. */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 801e5d0:	f640 1300 	movw	r3, #2304	; 0x900
 801e5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e5d8:	681b      	ldr	r3, [r3, #0]
 801e5da:	4618      	mov	r0, r3
 801e5dc:	f04f 0100 	mov.w	r1, #0
 801e5e0:	f7f4 fba4 	bl	8012d2c <DMA_Cmd>
 801e5e4:	e025      	b.n	801e632 <Audio_MAL_PauseResume+0x86>
  }
  else /* AUDIO_RESUME */
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);
 801e5e6:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801e5ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801e5ee:	f04f 0102 	mov.w	r1, #2
 801e5f2:	f04f 0201 	mov.w	r2, #1
 801e5f6:	f7fb fdbf 	bl	801a178 <SPI_I2S_DMACmd>
    /* Resume the I2S DMA Stream 
        Note. For the STM32F40x devices, the DMA implements a pause feature, 
              by disabling the stream, all configuration is preserved and data 
              transfer is paused till the next enable of the stream.
              This feature is not available on STM32F40x devices. */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 801e5fa:	f640 1300 	movw	r3, #2304	; 0x900
 801e5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	4618      	mov	r0, r3
 801e606:	f04f 0101 	mov.w	r1, #1
 801e60a:	f7f4 fb8f 	bl	8012d2c <DMA_Cmd>
    
    /* If the I2S peripheral is still not enabled, enable it */
    if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 801e60e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801e612:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801e616:	8b9b      	ldrh	r3, [r3, #28]
 801e618:	b29b      	uxth	r3, r3
 801e61a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801e61e:	2b00      	cmp	r3, #0
 801e620:	d107      	bne.n	801e632 <Audio_MAL_PauseResume+0x86>
    {
      I2S_Cmd(CODEC_I2S, ENABLE);
 801e622:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801e626:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801e62a:	f04f 0101 	mov.w	r1, #1
 801e62e:	f7fb fc1d 	bl	8019e6c <I2S_Cmd>
    }    
  } 
}
 801e632:	f107 0708 	add.w	r7, r7, #8
 801e636:	46bd      	mov	sp, r7
 801e638:	bd80      	pop	{r7, pc}
 801e63a:	bf00      	nop

0801e63c <Audio_MAL_Stop>:
  * @brief  Stops audio stream playing on the used Media.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Stop(void)
{   
 801e63c:	b580      	push	{r7, lr}
 801e63e:	af00      	add	r7, sp, #0
  /* Stop the Transfer on the I2S side: Stop and disable the DMA stream */
  DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 801e640:	f640 1300 	movw	r3, #2304	; 0x900
 801e644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	4618      	mov	r0, r3
 801e64c:	f04f 0100 	mov.w	r1, #0
 801e650:	f7f4 fb6c 	bl	8012d2c <DMA_Cmd>

  /* Clear all the DMA flags for the next transfer */
  DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC |AUDIO_MAL_DMA_FLAG_HT | \
 801e654:	f640 1300 	movw	r3, #2304	; 0x900
 801e658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e65c:	681a      	ldr	r2, [r3, #0]
 801e65e:	f640 130c 	movw	r3, #2316	; 0x90c
 801e662:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e666:	6819      	ldr	r1, [r3, #0]
 801e668:	f640 1310 	movw	r3, #2320	; 0x910
 801e66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e670:	681b      	ldr	r3, [r3, #0]
 801e672:	4319      	orrs	r1, r3
 801e674:	f640 1314 	movw	r3, #2324	; 0x914
 801e678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e67c:	681b      	ldr	r3, [r3, #0]
 801e67e:	4319      	orrs	r1, r3
 801e680:	f640 1318 	movw	r3, #2328	; 0x918
 801e684:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	430b      	orrs	r3, r1
 801e68c:	4610      	mov	r0, r2
 801e68e:	4619      	mov	r1, r3
 801e690:	f7f4 fc98 	bl	8012fc4 <DMA_ClearFlag>
  /*  
           The I2S DMA requests are not disabled here.
                                                            */
  
  /* In all modes, disable the I2S peripheral */
  I2S_Cmd(CODEC_I2S, DISABLE);
 801e694:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 801e698:	f2c4 0000 	movt	r0, #16384	; 0x4000
 801e69c:	f04f 0100 	mov.w	r1, #0
 801e6a0:	f7fb fbe4 	bl	8019e6c <I2S_Cmd>
}
 801e6a4:	bd80      	pop	{r7, pc}
 801e6a6:	bf00      	nop

0801e6a8 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 801e6a8:	b580      	push	{r7, lr}
 801e6aa:	b086      	sub	sp, #24
 801e6ac:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 801e6ae:	f04f 0001 	mov.w	r0, #1
 801e6b2:	f2c0 0020 	movt	r0, #32
 801e6b6:	f04f 0101 	mov.w	r1, #1
 801e6ba:	f7f8 fcef 	bl	801709c <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 801e6be:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801e6c2:	f04f 0101 	mov.w	r1, #1
 801e6c6:	f7f8 fd6d 	bl	80171a4 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 801e6ca:	f04f 0310 	mov.w	r3, #16
 801e6ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 801e6d0:	f04f 0303 	mov.w	r3, #3
 801e6d4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801e6d6:	f04f 0300 	mov.w	r3, #0
 801e6da:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 801e6dc:	463b      	mov	r3, r7
 801e6de:	f04f 0000 	mov.w	r0, #0
 801e6e2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e6e6:	4619      	mov	r1, r3
 801e6e8:	f7f6 fa86 	bl	8014bf8 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 801e6ec:	f04f 0300 	mov.w	r3, #0
 801e6f0:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 801e6f2:	f04f 0300 	mov.w	r3, #0
 801e6f6:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 801e6f8:	f04f 0300 	mov.w	r3, #0
 801e6fc:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 801e6fe:	f107 0308 	add.w	r3, r7, #8
 801e702:	f04f 0000 	mov.w	r0, #0
 801e706:	4619      	mov	r1, r3
 801e708:	f7f3 fbe6 	bl	8011ed8 <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 801e70c:	f04f 0000 	mov.w	r0, #0
 801e710:	f04f 0101 	mov.w	r1, #1
 801e714:	f7f3 fc34 	bl	8011f80 <DAC_Cmd>
}
 801e718:	f107 0718 	add.w	r7, r7, #24
 801e71c:	46bd      	mov	sp, r7
 801e71e:	bd80      	pop	{r7, pc}

0801e720 <LIS302DL_Init>:
  * @param  LIS302DL_Config_Struct: pointer to a LIS302DL_Config_TypeDef structure 
  *         that contains the configuration setting for the LIS302DL.
  * @retval None
  */
void LIS302DL_Init(LIS302DL_InitTypeDef *LIS302DL_InitStruct)
{
 801e720:	b580      	push	{r7, lr}
 801e722:	b084      	sub	sp, #16
 801e724:	af00      	add	r7, sp, #0
 801e726:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 801e728:	f04f 0300 	mov.w	r3, #0
 801e72c:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
 801e72e:	f000 f9ed 	bl	801eb0c <LIS302DL_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	785a      	ldrb	r2, [r3, #1]
 801e736:	687b      	ldr	r3, [r7, #4]
 801e738:	781b      	ldrb	r3, [r3, #0]
 801e73a:	4313      	orrs	r3, r2
 801e73c:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 801e742:	4313      	orrs	r3, r2
 801e744:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	791b      	ldrb	r3, [r3, #4]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 801e74a:	4313      	orrs	r3, r2
 801e74c:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 801e752:	4313      	orrs	r3, r2
 801e754:	b2db      	uxtb	r3, r3
 801e756:	73fb      	strb	r3, [r7, #15]
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 801e758:	f107 030f 	add.w	r3, r7, #15
 801e75c:	4618      	mov	r0, r3
 801e75e:	f04f 0120 	mov.w	r1, #32
 801e762:	f04f 0201 	mov.w	r2, #1
 801e766:	f000 f8ed 	bl	801e944 <LIS302DL_Write>
}
 801e76a:	f107 0710 	add.w	r7, r7, #16
 801e76e:	46bd      	mov	sp, r7
 801e770:	bd80      	pop	{r7, pc}
 801e772:	bf00      	nop

0801e774 <LIS302DL_FilterConfig>:
  * @param  LIS302DL_Filter_ConfigTypeDef: pointer to a LIS302DL_FilterConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Filter.
  * @retval None
  */
void LIS302DL_FilterConfig(LIS302DL_FilterConfigTypeDef *LIS302DL_FilterConfigStruct)
{
 801e774:	b580      	push	{r7, lr}
 801e776:	b084      	sub	sp, #16
 801e778:	af00      	add	r7, sp, #0
 801e77a:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 801e77c:	f04f 0300 	mov.w	r3, #0
 801e780:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  LIS302DL_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 801e782:	f107 030f 	add.w	r3, r7, #15
 801e786:	4618      	mov	r0, r3
 801e788:	f04f 0121 	mov.w	r1, #33	; 0x21
 801e78c:	f04f 0201 	mov.w	r2, #1
 801e790:	f000 f910 	bl	801e9b4 <LIS302DL_Read>
  
  /* Clear high pass filter cut-off level, interrupt and data selection bits*/
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 801e794:	7bfb      	ldrb	r3, [r7, #15]
 801e796:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 801e79a:	b2db      	uxtb	r3, r3
 801e79c:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
  /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
  ctrl |= (uint8_t)(LIS302DL_FilterConfigStruct->HighPassFilter_Data_Selection | \
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	781a      	ldrb	r2, [r3, #0]
                    LIS302DL_FilterConfigStruct->HighPassFilter_CutOff_Frequency | \
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	785b      	ldrb	r3, [r3, #1]
  /* Clear high pass filter cut-off level, interrupt and data selection bits*/
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
  /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
  ctrl |= (uint8_t)(LIS302DL_FilterConfigStruct->HighPassFilter_Data_Selection | \
 801e7a6:	4313      	orrs	r3, r2
 801e7a8:	b2da      	uxtb	r2, r3
                    LIS302DL_FilterConfigStruct->HighPassFilter_CutOff_Frequency | \
                    LIS302DL_FilterConfigStruct->HighPassFilter_Interrupt);
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	789b      	ldrb	r3, [r3, #2]
  /* Clear high pass filter cut-off level, interrupt and data selection bits*/
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
  /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
  ctrl |= (uint8_t)(LIS302DL_FilterConfigStruct->HighPassFilter_Data_Selection | \
 801e7ae:	4313      	orrs	r3, r2
 801e7b0:	b2da      	uxtb	r2, r3
 801e7b2:	7bfb      	ldrb	r3, [r7, #15]
 801e7b4:	4313      	orrs	r3, r2
 801e7b6:	b2db      	uxtb	r3, r3
 801e7b8:	73fb      	strb	r3, [r7, #15]
                    LIS302DL_FilterConfigStruct->HighPassFilter_CutOff_Frequency | \
                    LIS302DL_FilterConfigStruct->HighPassFilter_Interrupt);
  
  /* Write value to MEMS CTRL_REG2 register */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 801e7ba:	f107 030f 	add.w	r3, r7, #15
 801e7be:	4618      	mov	r0, r3
 801e7c0:	f04f 0121 	mov.w	r1, #33	; 0x21
 801e7c4:	f04f 0201 	mov.w	r2, #1
 801e7c8:	f000 f8bc 	bl	801e944 <LIS302DL_Write>
}
 801e7cc:	f107 0710 	add.w	r7, r7, #16
 801e7d0:	46bd      	mov	sp, r7
 801e7d2:	bd80      	pop	{r7, pc}

0801e7d4 <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 801e7d4:	b580      	push	{r7, lr}
 801e7d6:	b084      	sub	sp, #16
 801e7d8:	af00      	add	r7, sp, #0
 801e7da:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 801e7dc:	f04f 0300 	mov.w	r3, #0
 801e7e0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 801e7e2:	f107 030f 	add.w	r3, r7, #15
 801e7e6:	4618      	mov	r0, r3
 801e7e8:	f04f 0138 	mov.w	r1, #56	; 0x38
 801e7ec:	f04f 0201 	mov.w	r2, #1
 801e7f0:	f000 f8e0 	bl	801e9b4 <LIS302DL_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	785b      	ldrb	r3, [r3, #1]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 801e7fc:	4313      	orrs	r3, r2
 801e7fe:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 801e800:	687b      	ldr	r3, [r7, #4]
 801e802:	789b      	ldrb	r3, [r3, #2]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 801e804:	4313      	orrs	r3, r2
 801e806:	b2db      	uxtb	r3, r3
 801e808:	73fb      	strb	r3, [r7, #15]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
  
  /* Write value to MEMS CLICK_CFG register */
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 801e80a:	f107 030f 	add.w	r3, r7, #15
 801e80e:	4618      	mov	r0, r3
 801e810:	f04f 0138 	mov.w	r1, #56	; 0x38
 801e814:	f04f 0201 	mov.w	r2, #1
 801e818:	f000 f894 	bl	801e944 <LIS302DL_Write>
}
 801e81c:	f107 0710 	add.w	r7, r7, #16
 801e820:	46bd      	mov	sp, r7
 801e822:	bd80      	pop	{r7, pc}

0801e824 <LIS302DL_LowpowerCmd>:
  *     @arg LIS302DL_LOWPOWERMODE_POWERDOWN: Power down mode
  *     @arg LIS302DL_LOWPOWERMODE_ACTIVE: Active mode  
  * @retval None
  */
void LIS302DL_LowpowerCmd(uint8_t LowPowerMode)
{
 801e824:	b580      	push	{r7, lr}
 801e826:	b084      	sub	sp, #16
 801e828:	af00      	add	r7, sp, #0
 801e82a:	4603      	mov	r3, r0
 801e82c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG1 register */
  LIS302DL_Read(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 801e82e:	f107 030f 	add.w	r3, r7, #15
 801e832:	4618      	mov	r0, r3
 801e834:	f04f 0120 	mov.w	r1, #32
 801e838:	f04f 0201 	mov.w	r2, #1
 801e83c:	f000 f8ba 	bl	801e9b4 <LIS302DL_Read>
  
  /* Set new low power mode configuration */
  tmpreg &= (uint8_t)~LIS302DL_LOWPOWERMODE_ACTIVE;
 801e840:	7bfb      	ldrb	r3, [r7, #15]
 801e842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e846:	b2db      	uxtb	r3, r3
 801e848:	73fb      	strb	r3, [r7, #15]
  tmpreg |= LowPowerMode;
 801e84a:	7bfa      	ldrb	r2, [r7, #15]
 801e84c:	79fb      	ldrb	r3, [r7, #7]
 801e84e:	4313      	orrs	r3, r2
 801e850:	b2db      	uxtb	r3, r3
 801e852:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 801e854:	f107 030f 	add.w	r3, r7, #15
 801e858:	4618      	mov	r0, r3
 801e85a:	f04f 0120 	mov.w	r1, #32
 801e85e:	f04f 0201 	mov.w	r2, #1
 801e862:	f000 f86f 	bl	801e944 <LIS302DL_Write>
}
 801e866:	f107 0710 	add.w	r7, r7, #16
 801e86a:	46bd      	mov	sp, r7
 801e86c:	bd80      	pop	{r7, pc}
 801e86e:	bf00      	nop

0801e870 <LIS302DL_DataRateCmd>:
  *     @arg LIS302DL_DATARATE_100: 100 Hz output data rate 
  *     @arg LIS302DL_DATARATE_400: 400 Hz output data rate    
  * @retval None
  */
void LIS302DL_DataRateCmd(uint8_t DataRateValue)
{
 801e870:	b580      	push	{r7, lr}
 801e872:	b084      	sub	sp, #16
 801e874:	af00      	add	r7, sp, #0
 801e876:	4603      	mov	r3, r0
 801e878:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG1 register */
  LIS302DL_Read(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 801e87a:	f107 030f 	add.w	r3, r7, #15
 801e87e:	4618      	mov	r0, r3
 801e880:	f04f 0120 	mov.w	r1, #32
 801e884:	f04f 0201 	mov.w	r2, #1
 801e888:	f000 f894 	bl	801e9b4 <LIS302DL_Read>
  
  /* Set new Data rate configuration */
  tmpreg &= (uint8_t)~LIS302DL_DATARATE_400;
 801e88c:	7bfb      	ldrb	r3, [r7, #15]
 801e88e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e892:	b2db      	uxtb	r3, r3
 801e894:	73fb      	strb	r3, [r7, #15]
  tmpreg |= DataRateValue;
 801e896:	7bfa      	ldrb	r2, [r7, #15]
 801e898:	79fb      	ldrb	r3, [r7, #7]
 801e89a:	4313      	orrs	r3, r2
 801e89c:	b2db      	uxtb	r3, r3
 801e89e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 801e8a0:	f107 030f 	add.w	r3, r7, #15
 801e8a4:	4618      	mov	r0, r3
 801e8a6:	f04f 0120 	mov.w	r1, #32
 801e8aa:	f04f 0201 	mov.w	r2, #1
 801e8ae:	f000 f849 	bl	801e944 <LIS302DL_Write>
}
 801e8b2:	f107 0710 	add.w	r7, r7, #16
 801e8b6:	46bd      	mov	sp, r7
 801e8b8:	bd80      	pop	{r7, pc}
 801e8ba:	bf00      	nop

0801e8bc <LIS302DL_FullScaleCmd>:
  *     @arg LIS302DL_FULLSCALE_2_3: +-2.3g
  *     @arg LIS302DL_FULLSCALE_9_2: +-9.2g   
  * @retval None
  */
void LIS302DL_FullScaleCmd(uint8_t FS_value)
{
 801e8bc:	b580      	push	{r7, lr}
 801e8be:	b084      	sub	sp, #16
 801e8c0:	af00      	add	r7, sp, #0
 801e8c2:	4603      	mov	r3, r0
 801e8c4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG1 register */
  LIS302DL_Read(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 801e8c6:	f107 030f 	add.w	r3, r7, #15
 801e8ca:	4618      	mov	r0, r3
 801e8cc:	f04f 0120 	mov.w	r1, #32
 801e8d0:	f04f 0201 	mov.w	r2, #1
 801e8d4:	f000 f86e 	bl	801e9b4 <LIS302DL_Read>
  
  /* Set new full scale configuration */
  tmpreg &= (uint8_t)~LIS302DL_FULLSCALE_9_2;
 801e8d8:	7bfb      	ldrb	r3, [r7, #15]
 801e8da:	f023 0320 	bic.w	r3, r3, #32
 801e8de:	b2db      	uxtb	r3, r3
 801e8e0:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FS_value;
 801e8e2:	7bfa      	ldrb	r2, [r7, #15]
 801e8e4:	79fb      	ldrb	r3, [r7, #7]
 801e8e6:	4313      	orrs	r3, r2
 801e8e8:	b2db      	uxtb	r3, r3
 801e8ea:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&tmpreg, LIS302DL_CTRL_REG1_ADDR, 1);
 801e8ec:	f107 030f 	add.w	r3, r7, #15
 801e8f0:	4618      	mov	r0, r3
 801e8f2:	f04f 0120 	mov.w	r1, #32
 801e8f6:	f04f 0201 	mov.w	r2, #1
 801e8fa:	f000 f823 	bl	801e944 <LIS302DL_Write>
}
 801e8fe:	f107 0710 	add.w	r7, r7, #16
 801e902:	46bd      	mov	sp, r7
 801e904:	bd80      	pop	{r7, pc}
 801e906:	bf00      	nop

0801e908 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 801e908:	b580      	push	{r7, lr}
 801e90a:	b082      	sub	sp, #8
 801e90c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  LIS302DL_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 801e90e:	f107 0307 	add.w	r3, r7, #7
 801e912:	4618      	mov	r0, r3
 801e914:	f04f 0121 	mov.w	r1, #33	; 0x21
 801e918:	f04f 0201 	mov.w	r2, #1
 801e91c:	f000 f84a 	bl	801e9b4 <LIS302DL_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 801e920:	79fb      	ldrb	r3, [r7, #7]
 801e922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e926:	b2db      	uxtb	r3, r3
 801e928:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 regsister */
  LIS302DL_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 801e92a:	f107 0307 	add.w	r3, r7, #7
 801e92e:	4618      	mov	r0, r3
 801e930:	f04f 0121 	mov.w	r1, #33	; 0x21
 801e934:	f04f 0201 	mov.w	r2, #1
 801e938:	f000 f804 	bl	801e944 <LIS302DL_Write>
}
 801e93c:	f107 0708 	add.w	r7, r7, #8
 801e940:	46bd      	mov	sp, r7
 801e942:	bd80      	pop	{r7, pc}

0801e944 <LIS302DL_Write>:
  * @param  WriteAddr : LIS302DL's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void LIS302DL_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 801e944:	b580      	push	{r7, lr}
 801e946:	b082      	sub	sp, #8
 801e948:	af00      	add	r7, sp, #0
 801e94a:	6078      	str	r0, [r7, #4]
 801e94c:	4613      	mov	r3, r2
 801e94e:	460a      	mov	r2, r1
 801e950:	70fa      	strb	r2, [r7, #3]
 801e952:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 801e954:	883b      	ldrh	r3, [r7, #0]
 801e956:	2b01      	cmp	r3, #1
 801e958:	d903      	bls.n	801e962 <LIS302DL_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 801e95a:	78fb      	ldrb	r3, [r7, #3]
 801e95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e960:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 801e962:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801e966:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e96a:	f04f 0108 	mov.w	r1, #8
 801e96e:	f7f6 fa93 	bl	8014e98 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
 801e972:	78fb      	ldrb	r3, [r7, #3]
 801e974:	4618      	mov	r0, r3
 801e976:	f000 f9af 	bl	801ecd8 <LIS302DL_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 801e97a:	e00c      	b.n	801e996 <LIS302DL_Write+0x52>
  {
    LIS302DL_SendByte(*pBuffer);
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	781b      	ldrb	r3, [r3, #0]
 801e980:	4618      	mov	r0, r3
 801e982:	f000 f9a9 	bl	801ecd8 <LIS302DL_SendByte>
    NumByteToWrite--;
 801e986:	883b      	ldrh	r3, [r7, #0]
 801e988:	f103 33ff 	add.w	r3, r3, #4294967295
 801e98c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	f103 0301 	add.w	r3, r3, #1
 801e994:	607b      	str	r3, [r7, #4]
  LIS302DL_CS_LOW();
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 801e996:	883b      	ldrh	r3, [r7, #0]
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d1ef      	bne.n	801e97c <LIS302DL_Write+0x38>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 801e99c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801e9a0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e9a4:	f04f 0108 	mov.w	r1, #8
 801e9a8:	f7f6 fa68 	bl	8014e7c <GPIO_SetBits>
}
 801e9ac:	f107 0708 	add.w	r7, r7, #8
 801e9b0:	46bd      	mov	sp, r7
 801e9b2:	bd80      	pop	{r7, pc}

0801e9b4 <LIS302DL_Read>:
  * @param  ReadAddr : LIS302DL's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the LIS302DL.
  * @retval None
  */
void LIS302DL_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 801e9b4:	b580      	push	{r7, lr}
 801e9b6:	b082      	sub	sp, #8
 801e9b8:	af00      	add	r7, sp, #0
 801e9ba:	6078      	str	r0, [r7, #4]
 801e9bc:	4613      	mov	r3, r2
 801e9be:	460a      	mov	r2, r1
 801e9c0:	70fa      	strb	r2, [r7, #3]
 801e9c2:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 801e9c4:	883b      	ldrh	r3, [r7, #0]
 801e9c6:	2b01      	cmp	r3, #1
 801e9c8:	d904      	bls.n	801e9d4 <LIS302DL_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 801e9ca:	78fb      	ldrb	r3, [r7, #3]
 801e9cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801e9d0:	70fb      	strb	r3, [r7, #3]
 801e9d2:	e003      	b.n	801e9dc <LIS302DL_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 801e9d4:	78fb      	ldrb	r3, [r7, #3]
 801e9d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801e9da:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 801e9dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801e9e0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801e9e4:	f04f 0108 	mov.w	r1, #8
 801e9e8:	f7f6 fa56 	bl	8014e98 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
 801e9ec:	78fb      	ldrb	r3, [r7, #3]
 801e9ee:	4618      	mov	r0, r3
 801e9f0:	f000 f972 	bl	801ecd8 <LIS302DL_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 801e9f4:	e00f      	b.n	801ea16 <LIS302DL_Read+0x62>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to LIS302DL (Slave device) */
    *pBuffer = LIS302DL_SendByte(DUMMY_BYTE);
 801e9f6:	f04f 0000 	mov.w	r0, #0
 801e9fa:	f000 f96d 	bl	801ecd8 <LIS302DL_SendByte>
 801e9fe:	4603      	mov	r3, r0
 801ea00:	461a      	mov	r2, r3
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 801ea06:	883b      	ldrh	r3, [r7, #0]
 801ea08:	f103 33ff 	add.w	r3, r3, #4294967295
 801ea0c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	f103 0301 	add.w	r3, r3, #1
 801ea14:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 801ea16:	883b      	ldrh	r3, [r7, #0]
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	d1ec      	bne.n	801e9f6 <LIS302DL_Read+0x42>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 801ea1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801ea20:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ea24:	f04f 0108 	mov.w	r1, #8
 801ea28:	f7f6 fa28 	bl	8014e7c <GPIO_SetBits>
}
 801ea2c:	f107 0708 	add.w	r7, r7, #8
 801ea30:	46bd      	mov	sp, r7
 801ea32:	bd80      	pop	{r7, pc}

0801ea34 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  s16 buffer to store data
  * @retval None
  */
void LIS302DL_ReadACC(int32_t* out)
{
 801ea34:	b580      	push	{r7, lr}
 801ea36:	b086      	sub	sp, #24
 801ea38:	af00      	add	r7, sp, #0
 801ea3a:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];
  uint8_t crtl, i = 0x00;
 801ea3c:	f04f 0300 	mov.w	r3, #0
 801ea40:	75fb      	strb	r3, [r7, #23]
   
  LIS302DL_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);  
 801ea42:	f107 030f 	add.w	r3, r7, #15
 801ea46:	4618      	mov	r0, r3
 801ea48:	f04f 0120 	mov.w	r1, #32
 801ea4c:	f04f 0201 	mov.w	r2, #1
 801ea50:	f7ff ffb0 	bl	801e9b4 <LIS302DL_Read>
  LIS302DL_Read(buffer, LIS302DL_OUT_X_ADDR, 6);
 801ea54:	f107 0310 	add.w	r3, r7, #16
 801ea58:	4618      	mov	r0, r3
 801ea5a:	f04f 0129 	mov.w	r1, #41	; 0x29
 801ea5e:	f04f 0206 	mov.w	r2, #6
 801ea62:	f7ff ffa7 	bl	801e9b4 <LIS302DL_Read>
  
  switch(crtl & 0x20) 
 801ea66:	7bfb      	ldrb	r3, [r7, #15]
 801ea68:	f003 0320 	and.w	r3, r3, #32
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d002      	beq.n	801ea76 <LIS302DL_ReadACC+0x42>
 801ea70:	2b20      	cmp	r3, #32
 801ea72:	d023      	beq.n	801eabc <LIS302DL_ReadACC+0x88>
 801ea74:	e045      	b.n	801eb02 <LIS302DL_ReadACC+0xce>
    {
    /* FS bit = 0 ==> Sensitivity typical value = 18milligals/digit*/ 
    case 0x00:
      for(i=0; i<0x03; i++)
 801ea76:	f04f 0300 	mov.w	r3, #0
 801ea7a:	75fb      	strb	r3, [r7, #23]
 801ea7c:	e01a      	b.n	801eab4 <LIS302DL_ReadACC+0x80>
      {
        *out =(int32_t)(LIS302DL_SENSITIVITY_2_3G *  (int8_t)buffer[2*i]);
 801ea7e:	7dfb      	ldrb	r3, [r7, #23]
 801ea80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ea84:	f107 0218 	add.w	r2, r7, #24
 801ea88:	18d3      	adds	r3, r2, r3
 801ea8a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 801ea8e:	b2db      	uxtb	r3, r3
 801ea90:	b25a      	sxtb	r2, r3
 801ea92:	4613      	mov	r3, r2
 801ea94:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801ea98:	189b      	adds	r3, r3, r2
 801ea9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ea9e:	461a      	mov	r2, r3
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	601a      	str	r2, [r3, #0]
        out++;
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	f103 0304 	add.w	r3, r3, #4
 801eaaa:	607b      	str	r3, [r7, #4]
  
  switch(crtl & 0x20) 
    {
    /* FS bit = 0 ==> Sensitivity typical value = 18milligals/digit*/ 
    case 0x00:
      for(i=0; i<0x03; i++)
 801eaac:	7dfb      	ldrb	r3, [r7, #23]
 801eaae:	f103 0301 	add.w	r3, r3, #1
 801eab2:	75fb      	strb	r3, [r7, #23]
 801eab4:	7dfb      	ldrb	r3, [r7, #23]
 801eab6:	2b02      	cmp	r3, #2
 801eab8:	d9e1      	bls.n	801ea7e <LIS302DL_ReadACC+0x4a>
      {
        *out =(int32_t)(LIS302DL_SENSITIVITY_2_3G *  (int8_t)buffer[2*i]);
        out++;
      }
      break;
 801eaba:	e023      	b.n	801eb04 <LIS302DL_ReadACC+0xd0>
    /* FS bit = 1 ==> Sensitivity typical value = 72milligals/digit*/ 
    case 0x20:
      for(i=0; i<0x03; i++)
 801eabc:	f04f 0300 	mov.w	r3, #0
 801eac0:	75fb      	strb	r3, [r7, #23]
 801eac2:	e01a      	b.n	801eafa <LIS302DL_ReadACC+0xc6>
      {
        *out =(int32_t)(LIS302DL_SENSITIVITY_9_2G * (int8_t)buffer[2*i]);
 801eac4:	7dfb      	ldrb	r3, [r7, #23]
 801eac6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801eaca:	f107 0218 	add.w	r2, r7, #24
 801eace:	18d3      	adds	r3, r2, r3
 801ead0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 801ead4:	b2db      	uxtb	r3, r3
 801ead6:	b25a      	sxtb	r2, r3
 801ead8:	4613      	mov	r3, r2
 801eada:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801eade:	189b      	adds	r3, r3, r2
 801eae0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801eae4:	461a      	mov	r2, r3
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	601a      	str	r2, [r3, #0]
        out++;
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	f103 0304 	add.w	r3, r3, #4
 801eaf0:	607b      	str	r3, [r7, #4]
        out++;
      }
      break;
    /* FS bit = 1 ==> Sensitivity typical value = 72milligals/digit*/ 
    case 0x20:
      for(i=0; i<0x03; i++)
 801eaf2:	7dfb      	ldrb	r3, [r7, #23]
 801eaf4:	f103 0301 	add.w	r3, r3, #1
 801eaf8:	75fb      	strb	r3, [r7, #23]
 801eafa:	7dfb      	ldrb	r3, [r7, #23]
 801eafc:	2b02      	cmp	r3, #2
 801eafe:	d9e1      	bls.n	801eac4 <LIS302DL_ReadACC+0x90>
      {
        *out =(int32_t)(LIS302DL_SENSITIVITY_9_2G * (int8_t)buffer[2*i]);
        out++;
      }         
      break;
 801eb00:	e000      	b.n	801eb04 <LIS302DL_ReadACC+0xd0>
    default:
      break;
 801eb02:	bf00      	nop
    }
 }
 801eb04:	f107 0718 	add.w	r7, r7, #24
 801eb08:	46bd      	mov	sp, r7
 801eb0a:	bd80      	pop	{r7, pc}

0801eb0c <LIS302DL_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the LIS302DL
  * @param  None
  * @retval None
  */
static void LIS302DL_LowLevel_Init(void)
{
 801eb0c:	b580      	push	{r7, lr}
 801eb0e:	b088      	sub	sp, #32
 801eb10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(LIS302DL_SPI_CLK, ENABLE);
 801eb12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801eb16:	f04f 0101 	mov.w	r1, #1
 801eb1a:	f7f8 fb6f 	bl	80171fc <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_SCK_GPIO_CLK | LIS302DL_SPI_MISO_GPIO_CLK | LIS302DL_SPI_MOSI_GPIO_CLK, ENABLE);
 801eb1e:	f04f 0001 	mov.w	r0, #1
 801eb22:	f04f 0101 	mov.w	r1, #1
 801eb26:	f7f8 fab9 	bl	801709c <RCC_AHB1PeriphClockCmd>

  /* Enable CS  GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_CS_GPIO_CLK, ENABLE);
 801eb2a:	f04f 0010 	mov.w	r0, #16
 801eb2e:	f04f 0101 	mov.w	r1, #1
 801eb32:	f7f8 fab3 	bl	801709c <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT1_GPIO_CLK, ENABLE);
 801eb36:	f04f 0010 	mov.w	r0, #16
 801eb3a:	f04f 0101 	mov.w	r1, #1
 801eb3e:	f7f8 faad 	bl	801709c <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT2_GPIO_CLK, ENABLE);
 801eb42:	f04f 0010 	mov.w	r0, #16
 801eb46:	f04f 0101 	mov.w	r1, #1
 801eb4a:	f7f8 faa7 	bl	801709c <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(LIS302DL_SPI_SCK_GPIO_PORT, LIS302DL_SPI_SCK_SOURCE, LIS302DL_SPI_SCK_AF);
 801eb4e:	f04f 0000 	mov.w	r0, #0
 801eb52:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801eb56:	f04f 0105 	mov.w	r1, #5
 801eb5a:	f04f 0205 	mov.w	r2, #5
 801eb5e:	f7f6 f9e1 	bl	8014f24 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MISO_GPIO_PORT, LIS302DL_SPI_MISO_SOURCE, LIS302DL_SPI_MISO_AF);
 801eb62:	f04f 0000 	mov.w	r0, #0
 801eb66:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801eb6a:	f04f 0106 	mov.w	r1, #6
 801eb6e:	f04f 0205 	mov.w	r2, #5
 801eb72:	f7f6 f9d7 	bl	8014f24 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MOSI_GPIO_PORT, LIS302DL_SPI_MOSI_SOURCE, LIS302DL_SPI_MOSI_AF);
 801eb76:	f04f 0000 	mov.w	r0, #0
 801eb7a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801eb7e:	f04f 0107 	mov.w	r1, #7
 801eb82:	f04f 0205 	mov.w	r2, #5
 801eb86:	f7f6 f9cd 	bl	8014f24 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801eb8a:	f04f 0302 	mov.w	r3, #2
 801eb8e:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801eb90:	f04f 0300 	mov.w	r3, #0
 801eb94:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 801eb96:	f04f 0302 	mov.w	r3, #2
 801eb9a:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801eb9c:	f04f 0302 	mov.w	r3, #2
 801eba0:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_SCK_PIN;
 801eba2:	f04f 0320 	mov.w	r3, #32
 801eba6:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 801eba8:	f107 0318 	add.w	r3, r7, #24
 801ebac:	f04f 0000 	mov.w	r0, #0
 801ebb0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ebb4:	4619      	mov	r1, r3
 801ebb6:	f7f6 f81f 	bl	8014bf8 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  LIS302DL_SPI_MOSI_PIN;
 801ebba:	f04f 0380 	mov.w	r3, #128	; 0x80
 801ebbe:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 801ebc0:	f107 0318 	add.w	r3, r7, #24
 801ebc4:	f04f 0000 	mov.w	r0, #0
 801ebc8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ebcc:	4619      	mov	r1, r3
 801ebce:	f7f6 f813 	bl	8014bf8 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_MISO_PIN;
 801ebd2:	f04f 0340 	mov.w	r3, #64	; 0x40
 801ebd6:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 801ebd8:	f107 0318 	add.w	r3, r7, #24
 801ebdc:	f04f 0000 	mov.w	r0, #0
 801ebe0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ebe4:	4619      	mov	r1, r3
 801ebe6:	f7f6 f807 	bl	8014bf8 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(LIS302DL_SPI);
 801ebea:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 801ebee:	f2c4 0001 	movt	r0, #16385	; 0x4001
 801ebf2:	f7fa ff39 	bl	8019a68 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 801ebf6:	f04f 0300 	mov.w	r3, #0
 801ebfa:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 801ebfc:	f04f 0300 	mov.w	r3, #0
 801ec00:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 801ec02:	f04f 0300 	mov.w	r3, #0
 801ec06:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 801ec08:	f04f 0300 	mov.w	r3, #0
 801ec0c:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 801ec0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ec12:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 801ec14:	f04f 0308 	mov.w	r3, #8
 801ec18:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 801ec1a:	f04f 0300 	mov.w	r3, #0
 801ec1e:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 801ec20:	f04f 0307 	mov.w	r3, #7
 801ec24:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 801ec26:	f44f 7382 	mov.w	r3, #260	; 0x104
 801ec2a:	80fb      	strh	r3, [r7, #6]
  SPI_Init(LIS302DL_SPI, &SPI_InitStructure);
 801ec2c:	f107 0304 	add.w	r3, r7, #4
 801ec30:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 801ec34:	f2c4 0001 	movt	r0, #16385	; 0x4001
 801ec38:	4619      	mov	r1, r3
 801ec3a:	f7fa ff59 	bl	8019af0 <SPI_Init>

  /* Enable SPI1  */
  SPI_Cmd(LIS302DL_SPI, ENABLE);
 801ec3e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 801ec42:	f2c4 0001 	movt	r0, #16385	; 0x4001
 801ec46:	f04f 0101 	mov.w	r1, #1
 801ec4a:	f7fb f8ef 	bl	8019e2c <SPI_Cmd>

  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_CS_PIN;
 801ec4e:	f04f 0308 	mov.w	r3, #8
 801ec52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801ec54:	f04f 0301 	mov.w	r3, #1
 801ec58:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801ec5a:	f04f 0300 	mov.w	r3, #0
 801ec5e:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801ec60:	f04f 0302 	mov.w	r3, #2
 801ec64:	777b      	strb	r3, [r7, #29]
  GPIO_Init(LIS302DL_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 801ec66:	f107 0318 	add.w	r3, r7, #24
 801ec6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801ec6e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ec72:	4619      	mov	r1, r3
 801ec74:	f7f5 ffc0 	bl	8014bf8 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(LIS302DL_SPI_CS_GPIO_PORT, LIS302DL_SPI_CS_PIN);
 801ec78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801ec7c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ec80:	f04f 0108 	mov.w	r1, #8
 801ec84:	f7f6 f8fa 	bl	8014e7c <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT1_PIN;
 801ec88:	f04f 0301 	mov.w	r3, #1
 801ec8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801ec8e:	f04f 0300 	mov.w	r3, #0
 801ec92:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801ec94:	f04f 0300 	mov.w	r3, #0
 801ec98:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801ec9a:	f04f 0302 	mov.w	r3, #2
 801ec9e:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801eca0:	f04f 0300 	mov.w	r3, #0
 801eca4:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(LIS302DL_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 801eca6:	f107 0318 	add.w	r3, r7, #24
 801ecaa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801ecae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ecb2:	4619      	mov	r1, r3
 801ecb4:	f7f5 ffa0 	bl	8014bf8 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT2_PIN;
 801ecb8:	f04f 0302 	mov.w	r3, #2
 801ecbc:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 801ecbe:	f107 0318 	add.w	r3, r7, #24
 801ecc2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801ecc6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ecca:	4619      	mov	r1, r3
 801eccc:	f7f5 ff94 	bl	8014bf8 <GPIO_Init>
}
 801ecd0:	f107 0720 	add.w	r7, r7, #32
 801ecd4:	46bd      	mov	sp, r7
 801ecd6:	bd80      	pop	{r7, pc}

0801ecd8 <LIS302DL_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
 801ecd8:	b580      	push	{r7, lr}
 801ecda:	b082      	sub	sp, #8
 801ecdc:	af00      	add	r7, sp, #0
 801ecde:	4603      	mov	r3, r0
 801ece0:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 801ece2:	f640 1320 	movw	r3, #2336	; 0x920
 801ece6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ecea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ecee:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 801ecf0:	e017      	b.n	801ed22 <LIS302DL_SendByte+0x4a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 801ecf2:	f640 1320 	movw	r3, #2336	; 0x920
 801ecf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	bf14      	ite	ne
 801ed00:	2200      	movne	r2, #0
 801ed02:	2201      	moveq	r2, #1
 801ed04:	b2d2      	uxtb	r2, r2
 801ed06:	f103 31ff 	add.w	r1, r3, #4294967295
 801ed0a:	f640 1320 	movw	r3, #2336	; 0x920
 801ed0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ed12:	6019      	str	r1, [r3, #0]
 801ed14:	2a00      	cmp	r2, #0
 801ed16:	d004      	beq.n	801ed22 <LIS302DL_SendByte+0x4a>
 801ed18:	f005 fa2a 	bl	8024170 <LIS302DL_TIMEOUT_UserCallback>
 801ed1c:	4603      	mov	r3, r0
 801ed1e:	b2db      	uxtb	r3, r3
 801ed20:	e046      	b.n	801edb0 <LIS302DL_SendByte+0xd8>
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 801ed22:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 801ed26:	f2c4 0001 	movt	r0, #16385	; 0x4001
 801ed2a:	f04f 0102 	mov.w	r1, #2
 801ed2e:	f7fb fa7d 	bl	801a22c <SPI_I2S_GetFlagStatus>
 801ed32:	4603      	mov	r3, r0
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	d0dc      	beq.n	801ecf2 <LIS302DL_SendByte+0x1a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
 801ed38:	79fb      	ldrb	r3, [r7, #7]
 801ed3a:	b29b      	uxth	r3, r3
 801ed3c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 801ed40:	f2c4 0001 	movt	r0, #16385	; 0x4001
 801ed44:	4619      	mov	r1, r3
 801ed46:	f7fb f9af 	bl	801a0a8 <SPI_I2S_SendData>
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 801ed4a:	f640 1320 	movw	r3, #2336	; 0x920
 801ed4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ed52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ed56:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 801ed58:	e017      	b.n	801ed8a <LIS302DL_SendByte+0xb2>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 801ed5a:	f640 1320 	movw	r3, #2336	; 0x920
 801ed5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ed62:	681b      	ldr	r3, [r3, #0]
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	bf14      	ite	ne
 801ed68:	2200      	movne	r2, #0
 801ed6a:	2201      	moveq	r2, #1
 801ed6c:	b2d2      	uxtb	r2, r2
 801ed6e:	f103 31ff 	add.w	r1, r3, #4294967295
 801ed72:	f640 1320 	movw	r3, #2336	; 0x920
 801ed76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801ed7a:	6019      	str	r1, [r3, #0]
 801ed7c:	2a00      	cmp	r2, #0
 801ed7e:	d004      	beq.n	801ed8a <LIS302DL_SendByte+0xb2>
 801ed80:	f005 f9f6 	bl	8024170 <LIS302DL_TIMEOUT_UserCallback>
 801ed84:	4603      	mov	r3, r0
 801ed86:	b2db      	uxtb	r3, r3
 801ed88:	e012      	b.n	801edb0 <LIS302DL_SendByte+0xd8>
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 801ed8a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 801ed8e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 801ed92:	f04f 0101 	mov.w	r1, #1
 801ed96:	f7fb fa49 	bl	801a22c <SPI_I2S_GetFlagStatus>
 801ed9a:	4603      	mov	r3, r0
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d0dc      	beq.n	801ed5a <LIS302DL_SendByte+0x82>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(LIS302DL_SPI);
 801eda0:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 801eda4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 801eda8:	f7fb f970 	bl	801a08c <SPI_I2S_ReceiveData>
 801edac:	4603      	mov	r3, r0
 801edae:	b2db      	uxtb	r3, r3
}
 801edb0:	4618      	mov	r0, r3
 801edb2:	f107 0708 	add.w	r7, r7, #8
 801edb6:	46bd      	mov	sp, r7
 801edb8:	bd80      	pop	{r7, pc}
 801edba:	bf00      	nop

0801edbc <_ZNK5CTask7IsValidEv>:
	vTaskAllocateMPURegions(m_handleTask, xRegions);
#endif
}

inline
bool CTask::IsValid() const{
 801edbc:	b480      	push	{r7}
 801edbe:	b083      	sub	sp, #12
 801edc0:	af00      	add	r7, sp, #0
 801edc2:	6078      	str	r0, [r7, #4]
	return m_handleTask != NULL;
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	685b      	ldr	r3, [r3, #4]
 801edc8:	2b00      	cmp	r3, #0
 801edca:	bf0c      	ite	eq
 801edcc:	2300      	moveq	r3, #0
 801edce:	2301      	movne	r3, #1
 801edd0:	b2db      	uxtb	r3, r3
}
 801edd2:	4618      	mov	r0, r3
 801edd4:	f107 070c 	add.w	r7, r7, #12
 801edd8:	46bd      	mov	sp, r7
 801edda:	bc80      	pop	{r7}
 801eddc:	4770      	bx	lr
 801edde:	bf00      	nop

0801ede0 <_ZN5CTask6DetachEv>:

inline
xGenericHandle CTask::Detach() {
 801ede0:	b480      	push	{r7}
 801ede2:	b085      	sub	sp, #20
 801ede4:	af00      	add	r7, sp, #0
 801ede6:	6078      	str	r0, [r7, #4]
	xTaskHandle res = m_handleTask;
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	685b      	ldr	r3, [r3, #4]
 801edec:	60fb      	str	r3, [r7, #12]
	m_handleTask = NULL;
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	f04f 0200 	mov.w	r2, #0
 801edf4:	605a      	str	r2, [r3, #4]
	return res;
 801edf6:	68fb      	ldr	r3, [r7, #12]
}
 801edf8:	4618      	mov	r0, r3
 801edfa:	f107 0714 	add.w	r7, r7, #20
 801edfe:	46bd      	mov	sp, r7
 801ee00:	bc80      	pop	{r7}
 801ee02:	4770      	bx	lr

0801ee04 <_ZN12AManagedTask8OnCreateEPKctm>:
	 * @param uxPriority specifies the task priority.
	 *
	 * @return pdTRUE if success, pdFALSE otherwise. If the method return pdFALSE the task creation process
	 * is stopped and no FreeRTOS resource are allocated.
	 */
	virtual portBASE_TYPE OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) { return pdTRUE; }
 801ee04:	b480      	push	{r7}
 801ee06:	b085      	sub	sp, #20
 801ee08:	af00      	add	r7, sp, #0
 801ee0a:	60f8      	str	r0, [r7, #12]
 801ee0c:	60b9      	str	r1, [r7, #8]
 801ee0e:	603b      	str	r3, [r7, #0]
 801ee10:	4613      	mov	r3, r2
 801ee12:	80fb      	strh	r3, [r7, #6]
 801ee14:	f04f 0301 	mov.w	r3, #1
 801ee18:	4618      	mov	r0, r3
 801ee1a:	f107 0714 	add.w	r7, r7, #20
 801ee1e:	46bd      	mov	sp, r7
 801ee20:	bc80      	pop	{r7}
 801ee22:	4770      	bx	lr

0801ee24 <_ZN6CMenueC1EP11CGraphicLCD>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CMenue::CMenue(CGraphicLCD *display) : glcd(display){
 801ee24:	b580      	push	{r7, lr}
 801ee26:	b082      	sub	sp, #8
 801ee28:	af00      	add	r7, sp, #0
 801ee2a:	6078      	str	r0, [r7, #4]
 801ee2c:	6039      	str	r1, [r7, #0]
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	4618      	mov	r0, r3
 801ee32:	f001 fa39 	bl	80202a8 <_ZN12AManagedTaskC1Ev>
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	4a05      	ldr	r2, [pc, #20]	; (801ee50 <_ZN6CMenueC1EP11CGraphicLCD+0x2c>)
 801ee3a:	601a      	str	r2, [r3, #0]
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	683a      	ldr	r2, [r7, #0]
 801ee40:	60da      	str	r2, [r3, #12]
}
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	4618      	mov	r0, r3
 801ee46:	f107 0708 	add.w	r7, r7, #8
 801ee4a:	46bd      	mov	sp, r7
 801ee4c:	bd80      	pop	{r7, pc}
 801ee4e:	bf00      	nop
 801ee50:	08026f10 	.word	0x08026f10

0801ee54 <_ZN6CMenueD1Ev>:

CMenue::~CMenue() {
 801ee54:	b580      	push	{r7, lr}
 801ee56:	b082      	sub	sp, #8
 801ee58:	af00      	add	r7, sp, #0
 801ee5a:	6078      	str	r0, [r7, #4]
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	4a0a      	ldr	r2, [pc, #40]	; (801ee88 <_ZN6CMenueD1Ev+0x34>)
 801ee60:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801ee62:	6878      	ldr	r0, [r7, #4]
 801ee64:	f001 fa3c 	bl	80202e0 <_ZN12AManagedTaskD1Ev>
 801ee68:	f04f 0300 	mov.w	r3, #0
 801ee6c:	f003 0301 	and.w	r3, r3, #1
 801ee70:	b2db      	uxtb	r3, r3
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d002      	beq.n	801ee7c <_ZN6CMenueD1Ev+0x28>
 801ee76:	6878      	ldr	r0, [r7, #4]
 801ee78:	f005 fdda 	bl	8024a30 <_ZdlPv>
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	4618      	mov	r0, r3
 801ee80:	f107 0708 	add.w	r7, r7, #8
 801ee84:	46bd      	mov	sp, r7
 801ee86:	bd80      	pop	{r7, pc}
 801ee88:	08026f10 	.word	0x08026f10

0801ee8c <_ZN6CMenueD0Ev>:


CMenue::CMenue(CGraphicLCD *display) : glcd(display){
}

CMenue::~CMenue() {
 801ee8c:	b580      	push	{r7, lr}
 801ee8e:	b082      	sub	sp, #8
 801ee90:	af00      	add	r7, sp, #0
 801ee92:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 801ee94:	6878      	ldr	r0, [r7, #4]
 801ee96:	f7ff ffdd 	bl	801ee54 <_ZN6CMenueD1Ev>
 801ee9a:	6878      	ldr	r0, [r7, #4]
 801ee9c:	f005 fdc8 	bl	8024a30 <_ZdlPv>
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	4618      	mov	r0, r3
 801eea4:	f107 0708 	add.w	r7, r7, #8
 801eea8:	46bd      	mov	sp, r7
 801eeaa:	bd80      	pop	{r7, pc}

0801eeac <_ZN6CMenue12HardwareInitEv>:
/**
  * @brief  HardwareInit called before Scheduler starts
  * @param  None
  * @retval true on succsess
  */
bool CMenue::HardwareInit(void){
 801eeac:	b480      	push	{r7}
 801eeae:	b083      	sub	sp, #12
 801eeb0:	af00      	add	r7, sp, #0
 801eeb2:	6078      	str	r0, [r7, #4]

	return true;
 801eeb4:	f04f 0301 	mov.w	r3, #1
}
 801eeb8:	4618      	mov	r0, r3
 801eeba:	f107 070c 	add.w	r7, r7, #12
 801eebe:	46bd      	mov	sp, r7
 801eec0:	bc80      	pop	{r7}
 801eec2:	4770      	bx	lr

0801eec4 <_ZN6CMenue3RunEv>:
/**
  * @brief  task function for Menu
  * @param  None
  * @retval None
  */
void CMenue::Run(void){
 801eec4:	b590      	push	{r4, r7, lr}
 801eec6:	b085      	sub	sp, #20
 801eec8:	af02      	add	r7, sp, #8
 801eeca:	6078      	str	r0, [r7, #4]
	glcd->Init();
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	68db      	ldr	r3, [r3, #12]
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	f103 0320 	add.w	r3, r3, #32
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	687a      	ldr	r2, [r7, #4]
 801eeda:	68d2      	ldr	r2, [r2, #12]
 801eedc:	4610      	mov	r0, r2
 801eede:	4798      	blx	r3
	glcd->Inverse(true);
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	68db      	ldr	r3, [r3, #12]
 801eee4:	4618      	mov	r0, r3
 801eee6:	f04f 0101 	mov.w	r1, #1
 801eeea:	f000 f8b5 	bl	801f058 <_ZN11CGraphicLCD7InverseEb>
	glcd->Clear();
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	68db      	ldr	r3, [r3, #12]
 801eef2:	681b      	ldr	r3, [r3, #0]
 801eef4:	681b      	ldr	r3, [r3, #0]
 801eef6:	687a      	ldr	r2, [r7, #4]
 801eef8:	68d2      	ldr	r2, [r2, #12]
 801eefa:	4610      	mov	r0, r2
 801eefc:	4798      	blx	r3


	glcd->Window(0,0,119,63);
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	68db      	ldr	r3, [r3, #12]
 801ef02:	681b      	ldr	r3, [r3, #0]
 801ef04:	f103 0308 	add.w	r3, r3, #8
 801ef08:	681c      	ldr	r4, [r3, #0]
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	68db      	ldr	r3, [r3, #12]
 801ef0e:	f04f 023f 	mov.w	r2, #63	; 0x3f
 801ef12:	9200      	str	r2, [sp, #0]
 801ef14:	4618      	mov	r0, r3
 801ef16:	f04f 0100 	mov.w	r1, #0
 801ef1a:	f04f 0200 	mov.w	r2, #0
 801ef1e:	f04f 0377 	mov.w	r3, #119	; 0x77
 801ef22:	47a0      	blx	r4
	glcd->Window(121,0,119,63);
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	68db      	ldr	r3, [r3, #12]
 801ef28:	681b      	ldr	r3, [r3, #0]
 801ef2a:	f103 0308 	add.w	r3, r3, #8
 801ef2e:	681c      	ldr	r4, [r3, #0]
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	68db      	ldr	r3, [r3, #12]
 801ef34:	f04f 023f 	mov.w	r2, #63	; 0x3f
 801ef38:	9200      	str	r2, [sp, #0]
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	f04f 0179 	mov.w	r1, #121	; 0x79
 801ef40:	f04f 0200 	mov.w	r2, #0
 801ef44:	f04f 0377 	mov.w	r3, #119	; 0x77
 801ef48:	47a0      	blx	r4
	glcd->Window(0,65,119,63);
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	68db      	ldr	r3, [r3, #12]
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	f103 0308 	add.w	r3, r3, #8
 801ef54:	681c      	ldr	r4, [r3, #0]
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	68db      	ldr	r3, [r3, #12]
 801ef5a:	f04f 023f 	mov.w	r2, #63	; 0x3f
 801ef5e:	9200      	str	r2, [sp, #0]
 801ef60:	4618      	mov	r0, r3
 801ef62:	f04f 0100 	mov.w	r1, #0
 801ef66:	f04f 0241 	mov.w	r2, #65	; 0x41
 801ef6a:	f04f 0377 	mov.w	r3, #119	; 0x77
 801ef6e:	47a0      	blx	r4
	glcd->Window(121,65,119,63);
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	68db      	ldr	r3, [r3, #12]
 801ef74:	681b      	ldr	r3, [r3, #0]
 801ef76:	f103 0308 	add.w	r3, r3, #8
 801ef7a:	681c      	ldr	r4, [r3, #0]
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	68db      	ldr	r3, [r3, #12]
 801ef80:	f04f 023f 	mov.w	r2, #63	; 0x3f
 801ef84:	9200      	str	r2, [sp, #0]
 801ef86:	4618      	mov	r0, r3
 801ef88:	f04f 0179 	mov.w	r1, #121	; 0x79
 801ef8c:	f04f 0241 	mov.w	r2, #65	; 0x41
 801ef90:	f04f 0377 	mov.w	r3, #119	; 0x77
 801ef94:	47a0      	blx	r4


	while(1){
 801ef96:	e7fe      	b.n	801ef96 <_ZN6CMenue3RunEv+0xd2>

0801ef98 <_ZN11CGraphicLCDC1Ev>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

CGraphicLCD::CGraphicLCD() {
 801ef98:	b480      	push	{r7}
 801ef9a:	b083      	sub	sp, #12
 801ef9c:	af00      	add	r7, sp, #0
 801ef9e:	6078      	str	r0, [r7, #4]
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	4a06      	ldr	r2, [pc, #24]	; (801efbc <_ZN11CGraphicLCDC1Ev+0x24>)
 801efa4:	601a      	str	r2, [r3, #0]
	bInverse=false;
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	f04f 0200 	mov.w	r2, #0
 801efac:	711a      	strb	r2, [r3, #4]
}
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	4618      	mov	r0, r3
 801efb2:	f107 070c 	add.w	r7, r7, #12
 801efb6:	46bd      	mov	sp, r7
 801efb8:	bc80      	pop	{r7}
 801efba:	4770      	bx	lr
 801efbc:	08026f38 	.word	0x08026f38

0801efc0 <_ZN11CGraphicLCDC1Eb>:

CGraphicLCD::CGraphicLCD(bool inverse) {
 801efc0:	b480      	push	{r7}
 801efc2:	b083      	sub	sp, #12
 801efc4:	af00      	add	r7, sp, #0
 801efc6:	6078      	str	r0, [r7, #4]
 801efc8:	460b      	mov	r3, r1
 801efca:	70fb      	strb	r3, [r7, #3]
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	4a06      	ldr	r2, [pc, #24]	; (801efe8 <_ZN11CGraphicLCDC1Eb+0x28>)
 801efd0:	601a      	str	r2, [r3, #0]
	bInverse=inverse;
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	78fa      	ldrb	r2, [r7, #3]
 801efd6:	711a      	strb	r2, [r3, #4]
}
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	4618      	mov	r0, r3
 801efdc:	f107 070c 	add.w	r7, r7, #12
 801efe0:	46bd      	mov	sp, r7
 801efe2:	bc80      	pop	{r7}
 801efe4:	4770      	bx	lr
 801efe6:	bf00      	nop
 801efe8:	08026f38 	.word	0x08026f38

0801efec <_ZN11CGraphicLCDD1Ev>:

CGraphicLCD::~CGraphicLCD() {
 801efec:	b580      	push	{r7, lr}
 801efee:	b082      	sub	sp, #8
 801eff0:	af00      	add	r7, sp, #0
 801eff2:	6078      	str	r0, [r7, #4]
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	4a09      	ldr	r2, [pc, #36]	; (801f01c <_ZN11CGraphicLCDD1Ev+0x30>)
 801eff8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801effa:	f04f 0300 	mov.w	r3, #0
 801effe:	f003 0301 	and.w	r3, r3, #1
 801f002:	b2db      	uxtb	r3, r3
 801f004:	2b00      	cmp	r3, #0
 801f006:	d002      	beq.n	801f00e <_ZN11CGraphicLCDD1Ev+0x22>
 801f008:	6878      	ldr	r0, [r7, #4]
 801f00a:	f005 fd11 	bl	8024a30 <_ZdlPv>
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	4618      	mov	r0, r3
 801f012:	f107 0708 	add.w	r7, r7, #8
 801f016:	46bd      	mov	sp, r7
 801f018:	bd80      	pop	{r7, pc}
 801f01a:	bf00      	nop
 801f01c:	08026f38 	.word	0x08026f38

0801f020 <_ZN11CGraphicLCDD0Ev>:

CGraphicLCD::CGraphicLCD(bool inverse) {
	bInverse=inverse;
}

CGraphicLCD::~CGraphicLCD() {
 801f020:	b580      	push	{r7, lr}
 801f022:	b082      	sub	sp, #8
 801f024:	af00      	add	r7, sp, #0
 801f026:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 801f028:	6878      	ldr	r0, [r7, #4]
 801f02a:	f7ff ffdf 	bl	801efec <_ZN11CGraphicLCDD1Ev>
 801f02e:	6878      	ldr	r0, [r7, #4]
 801f030:	f005 fcfe 	bl	8024a30 <_ZdlPv>
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	4618      	mov	r0, r3
 801f038:	f107 0708 	add.w	r7, r7, #8
 801f03c:	46bd      	mov	sp, r7
 801f03e:	bd80      	pop	{r7, pc}

0801f040 <_ZN11CGraphicLCD7InverseEv>:
/**
  * @brief gives inverted draw status
  * @param  None
  * @retval true on inverse mode
  */
bool CGraphicLCD::Inverse(){
 801f040:	b480      	push	{r7}
 801f042:	b083      	sub	sp, #12
 801f044:	af00      	add	r7, sp, #0
 801f046:	6078      	str	r0, [r7, #4]
	return bInverse;
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	791b      	ldrb	r3, [r3, #4]
}
 801f04c:	4618      	mov	r0, r3
 801f04e:	f107 070c 	add.w	r7, r7, #12
 801f052:	46bd      	mov	sp, r7
 801f054:	bc80      	pop	{r7}
 801f056:	4770      	bx	lr

0801f058 <_ZN11CGraphicLCD7InverseEb>:
/**
  * @brief  sets inverted draw mode
  * @param  ture for inverted draw mode
  * @retval None
  */
void CGraphicLCD::Inverse(bool inverse){
 801f058:	b480      	push	{r7}
 801f05a:	b083      	sub	sp, #12
 801f05c:	af00      	add	r7, sp, #0
 801f05e:	6078      	str	r0, [r7, #4]
 801f060:	460b      	mov	r3, r1
 801f062:	70fb      	strb	r3, [r7, #3]
	bInverse = inverse;
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	78fa      	ldrb	r2, [r7, #3]
 801f068:	711a      	strb	r2, [r3, #4]
}
 801f06a:	f107 070c 	add.w	r7, r7, #12
 801f06e:	46bd      	mov	sp, r7
 801f070:	bc80      	pop	{r7}
 801f072:	4770      	bx	lr

0801f074 <_ZN13CT6963CDriverC1Ev>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CT6963CDriver::CT6963CDriver() {
 801f074:	b580      	push	{r7, lr}
 801f076:	b082      	sub	sp, #8
 801f078:	af00      	add	r7, sp, #0
 801f07a:	6078      	str	r0, [r7, #4]
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	4618      	mov	r0, r3
 801f080:	f7ff ff8a 	bl	801ef98 <_ZN11CGraphicLCDC1Ev>
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	4a04      	ldr	r2, [pc, #16]	; (801f098 <_ZN13CT6963CDriverC1Ev+0x24>)
 801f088:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	4618      	mov	r0, r3
 801f08e:	f107 0708 	add.w	r7, r7, #8
 801f092:	46bd      	mov	sp, r7
 801f094:	bd80      	pop	{r7, pc}
 801f096:	bf00      	nop
 801f098:	08026f70 	.word	0x08026f70

0801f09c <_ZN13CT6963CDriverD1Ev>:

CT6963CDriver::~CT6963CDriver() {
 801f09c:	b580      	push	{r7, lr}
 801f09e:	b082      	sub	sp, #8
 801f0a0:	af00      	add	r7, sp, #0
 801f0a2:	6078      	str	r0, [r7, #4]
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	4a0a      	ldr	r2, [pc, #40]	; (801f0d0 <_ZN13CT6963CDriverD1Ev+0x34>)
 801f0a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801f0aa:	6878      	ldr	r0, [r7, #4]
 801f0ac:	f7ff ff9e 	bl	801efec <_ZN11CGraphicLCDD1Ev>
 801f0b0:	f04f 0300 	mov.w	r3, #0
 801f0b4:	f003 0301 	and.w	r3, r3, #1
 801f0b8:	b2db      	uxtb	r3, r3
 801f0ba:	2b00      	cmp	r3, #0
 801f0bc:	d002      	beq.n	801f0c4 <_ZN13CT6963CDriverD1Ev+0x28>
 801f0be:	6878      	ldr	r0, [r7, #4]
 801f0c0:	f005 fcb6 	bl	8024a30 <_ZdlPv>
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	4618      	mov	r0, r3
 801f0c8:	f107 0708 	add.w	r7, r7, #8
 801f0cc:	46bd      	mov	sp, r7
 801f0ce:	bd80      	pop	{r7, pc}
 801f0d0:	08026f70 	.word	0x08026f70

0801f0d4 <_ZN13CT6963CDriverD0Ev>:
CT6963CDriver::CT6963CDriver() {
	// TODO Auto-generated constructor stub

}

CT6963CDriver::~CT6963CDriver() {
 801f0d4:	b580      	push	{r7, lr}
 801f0d6:	b082      	sub	sp, #8
 801f0d8:	af00      	add	r7, sp, #0
 801f0da:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 801f0dc:	6878      	ldr	r0, [r7, #4]
 801f0de:	f7ff ffdd 	bl	801f09c <_ZN13CT6963CDriverD1Ev>
 801f0e2:	6878      	ldr	r0, [r7, #4]
 801f0e4:	f005 fca4 	bl	8024a30 <_ZdlPv>
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	4618      	mov	r0, r3
 801f0ec:	f107 0708 	add.w	r7, r7, #8
 801f0f0:	46bd      	mov	sp, r7
 801f0f2:	bd80      	pop	{r7, pc}

0801f0f4 <_ZN13CT6963CDriver4InitEv>:
/**
  * @brief  initializes Display controller
  * @param  None
  * @retval None
  */
void CT6963CDriver::Init(){
 801f0f4:	b580      	push	{r7, lr}
 801f0f6:	b082      	sub	sp, #8
 801f0f8:	af00      	add	r7, sp, #0
 801f0fa:	6078      	str	r0, [r7, #4]

	HardwareInit();
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	681b      	ldr	r3, [r3, #0]
 801f100:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	6878      	ldr	r0, [r7, #4]
 801f108:	4798      	blx	r3

	Reset();
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801f112:	681b      	ldr	r3, [r3, #0]
 801f114:	6878      	ldr	r0, [r7, #4]
 801f116:	4798      	blx	r3

	// Graphic home address
	WriteData(GLCD_GRAPHIC_HOME & 0xFF);
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	6878      	ldr	r0, [r7, #4]
 801f124:	f04f 01e0 	mov.w	r1, #224	; 0xe0
 801f128:	4798      	blx	r3
	WriteData(GLCD_GRAPHIC_HOME >> 8);
 801f12a:	687b      	ldr	r3, [r7, #4]
 801f12c:	681b      	ldr	r3, [r3, #0]
 801f12e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	6878      	ldr	r0, [r7, #4]
 801f136:	f04f 0101 	mov.w	r1, #1
 801f13a:	4798      	blx	r3
	WriteCommand(T6963_SET_GRAPHIC_HOME_ADDRESS);
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	6878      	ldr	r0, [r7, #4]
 801f148:	f04f 0142 	mov.w	r1, #66	; 0x42
 801f14c:	4798      	blx	r3

	//graphic line length
	WriteData(GLCD_GRAPHIC_AREA);
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	681b      	ldr	r3, [r3, #0]
 801f152:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	6878      	ldr	r0, [r7, #4]
 801f15a:	f04f 011e 	mov.w	r1, #30
 801f15e:	4798      	blx	r3
	WriteData(0x00);
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	6878      	ldr	r0, [r7, #4]
 801f16c:	f04f 0100 	mov.w	r1, #0
 801f170:	4798      	blx	r3
	WriteCommand(T6963_SET_GRAPHIC_AREA);
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	6878      	ldr	r0, [r7, #4]
 801f17e:	f04f 0143 	mov.w	r1, #67	; 0x43
 801f182:	4798      	blx	r3

	//text home address
	WriteData(GLCD_TEXT_HOME & 0xFF);
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	681b      	ldr	r3, [r3, #0]
 801f188:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f18c:	681b      	ldr	r3, [r3, #0]
 801f18e:	6878      	ldr	r0, [r7, #4]
 801f190:	f04f 0100 	mov.w	r1, #0
 801f194:	4798      	blx	r3
	WriteData(GLCD_TEXT_HOME >> 8);
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	6878      	ldr	r0, [r7, #4]
 801f1a2:	f04f 0100 	mov.w	r1, #0
 801f1a6:	4798      	blx	r3
	WriteCommand(T6963_SET_TEXT_HOME_ADDRESS);
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	6878      	ldr	r0, [r7, #4]
 801f1b4:	f04f 0140 	mov.w	r1, #64	; 0x40
 801f1b8:	4798      	blx	r3

	//text line length
	WriteData(GLCD_TEXT_AREA);
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	6878      	ldr	r0, [r7, #4]
 801f1c6:	f04f 011e 	mov.w	r1, #30
 801f1ca:	4798      	blx	r3
	WriteData(0x00);
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	6878      	ldr	r0, [r7, #4]
 801f1d8:	f04f 0100 	mov.w	r1, #0
 801f1dc:	4798      	blx	r3
	WriteCommand(T6963_SET_TEXT_AREA);
 801f1de:	687b      	ldr	r3, [r7, #4]
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801f1e6:	681b      	ldr	r3, [r3, #0]
 801f1e8:	6878      	ldr	r0, [r7, #4]
 801f1ea:	f04f 0141 	mov.w	r1, #65	; 0x41
 801f1ee:	4798      	blx	r3

	//write offset register  (no effect)
	WriteData(GLCD_OFFSET_REGISTER);
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	6878      	ldr	r0, [r7, #4]
 801f1fc:	f04f 0102 	mov.w	r1, #2
 801f200:	4798      	blx	r3
	WriteData(0x00);
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	681b      	ldr	r3, [r3, #0]
 801f206:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f20a:	681b      	ldr	r3, [r3, #0]
 801f20c:	6878      	ldr	r0, [r7, #4]
 801f20e:	f04f 0100 	mov.w	r1, #0
 801f212:	4798      	blx	r3
	WriteCommand(T6963_SET_OFFSET_REGISTER);
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	681b      	ldr	r3, [r3, #0]
 801f218:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801f21c:	681b      	ldr	r3, [r3, #0]
 801f21e:	6878      	ldr	r0, [r7, #4]
 801f220:	f04f 0122 	mov.w	r1, #34	; 0x22
 801f224:	4798      	blx	r3

	// display in XOR Mode
	WriteCommand(T6963_MODE_SET | 1);
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801f22e:	681b      	ldr	r3, [r3, #0]
 801f230:	6878      	ldr	r0, [r7, #4]
 801f232:	f04f 0181 	mov.w	r1, #129	; 0x81
 801f236:	4798      	blx	r3

	//Graphic and Text mode
	WriteCommand(T6963_DISPLAY_MODE  | T6963_TEXT_DISPLAY_ON | T6963_GRAPHIC_DISPLAY_ON );
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	6878      	ldr	r0, [r7, #4]
 801f244:	f04f 019c 	mov.w	r1, #156	; 0x9c
 801f248:	4798      	blx	r3
}
 801f24a:	f107 0708 	add.w	r7, r7, #8
 801f24e:	46bd      	mov	sp, r7
 801f250:	bd80      	pop	{r7, pc}
 801f252:	bf00      	nop

0801f254 <_ZN13CT6963CDriver17SetAddressPointerEj>:
/**
  * @brief  set address pointer in T6963C
  * @param  address
  * @retval None
  */
void CT6963CDriver::SetAddressPointer(unsigned int address){
 801f254:	b580      	push	{r7, lr}
 801f256:	b082      	sub	sp, #8
 801f258:	af00      	add	r7, sp, #0
 801f25a:	6078      	str	r0, [r7, #4]
 801f25c:	6039      	str	r1, [r7, #0]
	WriteData(address & 0xFF);
 801f25e:	687b      	ldr	r3, [r7, #4]
 801f260:	681b      	ldr	r3, [r3, #0]
 801f262:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	683a      	ldr	r2, [r7, #0]
 801f26a:	b2d2      	uxtb	r2, r2
 801f26c:	6878      	ldr	r0, [r7, #4]
 801f26e:	4611      	mov	r1, r2
 801f270:	4798      	blx	r3
	WriteData(address >> 8);
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	681b      	ldr	r3, [r3, #0]
 801f276:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	683a      	ldr	r2, [r7, #0]
 801f27e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 801f282:	b2d2      	uxtb	r2, r2
 801f284:	6878      	ldr	r0, [r7, #4]
 801f286:	4611      	mov	r1, r2
 801f288:	4798      	blx	r3
	WriteCommand(T6963_SET_ADDRESS_POINTER);
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	6878      	ldr	r0, [r7, #4]
 801f296:	f04f 0124 	mov.w	r1, #36	; 0x24
 801f29a:	4798      	blx	r3
}
 801f29c:	f107 0708 	add.w	r7, r7, #8
 801f2a0:	46bd      	mov	sp, r7
 801f2a2:	bd80      	pop	{r7, pc}

0801f2a4 <_ZN13CT6963CDriver8TextGoToEhh>:
  * @brief  sets address pointer to specific text address
  * @param  column and line
  * @retval None
  */
void CT6963CDriver::TextGoTo(unsigned char x, unsigned char y)
{
 801f2a4:	b580      	push	{r7, lr}
 801f2a6:	b084      	sub	sp, #16
 801f2a8:	af00      	add	r7, sp, #0
 801f2aa:	6078      	str	r0, [r7, #4]
 801f2ac:	4613      	mov	r3, r2
 801f2ae:	460a      	mov	r2, r1
 801f2b0:	70fa      	strb	r2, [r7, #3]
 801f2b2:	70bb      	strb	r3, [r7, #2]
	unsigned int address;

	address = GLCD_TEXT_HOME +  x + (GLCD_TEXT_AREA * y);
 801f2b4:	78f9      	ldrb	r1, [r7, #3]
 801f2b6:	78ba      	ldrb	r2, [r7, #2]
 801f2b8:	4613      	mov	r3, r2
 801f2ba:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801f2be:	1a9b      	subs	r3, r3, r2
 801f2c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f2c4:	18cb      	adds	r3, r1, r3
 801f2c6:	60fb      	str	r3, [r7, #12]
	SetAddressPointer(address);
 801f2c8:	6878      	ldr	r0, [r7, #4]
 801f2ca:	68f9      	ldr	r1, [r7, #12]
 801f2cc:	f7ff ffc2 	bl	801f254 <_ZN13CT6963CDriver17SetAddressPointerEj>
}
 801f2d0:	f107 0710 	add.w	r7, r7, #16
 801f2d4:	46bd      	mov	sp, r7
 801f2d6:	bd80      	pop	{r7, pc}

0801f2d8 <_ZN13CT6963CDriver11GraphicGoToEhh>:
  * @brief  sets address pointer to specific pixel in graphics ram
  * @param  coordinates of the pixel byte
  * @retval None
  */
void CT6963CDriver::GraphicGoTo(unsigned char x, unsigned char y)
{
 801f2d8:	b580      	push	{r7, lr}
 801f2da:	b084      	sub	sp, #16
 801f2dc:	af00      	add	r7, sp, #0
 801f2de:	6078      	str	r0, [r7, #4]
 801f2e0:	4613      	mov	r3, r2
 801f2e2:	460a      	mov	r2, r1
 801f2e4:	70fa      	strb	r2, [r7, #3]
 801f2e6:	70bb      	strb	r3, [r7, #2]
	unsigned int address;
	address = GLCD_GRAPHIC_HOME + (x / GLCD_FONT_WIDTH) + (GLCD_GRAPHIC_AREA * y);
 801f2e8:	78fb      	ldrb	r3, [r7, #3]
 801f2ea:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 801f2ee:	b2db      	uxtb	r3, r3
 801f2f0:	4619      	mov	r1, r3
 801f2f2:	78ba      	ldrb	r2, [r7, #2]
 801f2f4:	4613      	mov	r3, r2
 801f2f6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801f2fa:	1a9b      	subs	r3, r3, r2
 801f2fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f300:	18cb      	adds	r3, r1, r3
 801f302:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801f306:	60fb      	str	r3, [r7, #12]
	SetAddressPointer(address);
 801f308:	6878      	ldr	r0, [r7, #4]
 801f30a:	68f9      	ldr	r1, [r7, #12]
 801f30c:	f7ff ffa2 	bl	801f254 <_ZN13CT6963CDriver17SetAddressPointerEj>
}
 801f310:	f107 0710 	add.w	r7, r7, #16
 801f314:	46bd      	mov	sp, r7
 801f316:	bd80      	pop	{r7, pc}

0801f318 <_ZN13CT6963CDriver5ClearEv>:
/**
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void CT6963CDriver::Clear(){
 801f318:	b580      	push	{r7, lr}
 801f31a:	b084      	sub	sp, #16
 801f31c:	af00      	add	r7, sp, #0
 801f31e:	6078      	str	r0, [r7, #4]
	unsigned int i;
	// Graphics and Text are different mem pools in this Controller
	SetAddressPointer(GLCD_GRAPHIC_HOME);
 801f320:	6878      	ldr	r0, [r7, #4]
 801f322:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801f326:	f7ff ff95 	bl	801f254 <_ZN13CT6963CDriver17SetAddressPointerEj>

	for(i = 0; i < GLCD_GRAPHIC_SIZE; i++)
 801f32a:	f04f 0300 	mov.w	r3, #0
 801f32e:	60fb      	str	r3, [r7, #12]
 801f330:	e008      	b.n	801f344 <_ZN13CT6963CDriver5ClearEv+0x2c>
	{
		WriteDisplayData(0x00);
 801f332:	6878      	ldr	r0, [r7, #4]
 801f334:	f04f 0100 	mov.w	r1, #0
 801f338:	f000 f82e 	bl	801f398 <_ZN13CT6963CDriver16WriteDisplayDataEh>
void CT6963CDriver::Clear(){
	unsigned int i;
	// Graphics and Text are different mem pools in this Controller
	SetAddressPointer(GLCD_GRAPHIC_HOME);

	for(i = 0; i < GLCD_GRAPHIC_SIZE; i++)
 801f33c:	68fb      	ldr	r3, [r7, #12]
 801f33e:	f103 0301 	add.w	r3, r3, #1
 801f342:	60fb      	str	r3, [r7, #12]
 801f344:	68fa      	ldr	r2, [r7, #12]
 801f346:	f640 63ff 	movw	r3, #3839	; 0xeff
 801f34a:	429a      	cmp	r2, r3
 801f34c:	bf8c      	ite	hi
 801f34e:	2300      	movhi	r3, #0
 801f350:	2301      	movls	r3, #1
 801f352:	b2db      	uxtb	r3, r3
 801f354:	2b00      	cmp	r3, #0
 801f356:	d1ec      	bne.n	801f332 <_ZN13CT6963CDriver5ClearEv+0x1a>
	{
		WriteDisplayData(0x00);
	}

	SetAddressPointer(GLCD_TEXT_HOME);
 801f358:	6878      	ldr	r0, [r7, #4]
 801f35a:	f04f 0100 	mov.w	r1, #0
 801f35e:	f7ff ff79 	bl	801f254 <_ZN13CT6963CDriver17SetAddressPointerEj>

	for(i = 0; i < GLCD_TEXT_SIZE; i++)
 801f362:	f04f 0300 	mov.w	r3, #0
 801f366:	60fb      	str	r3, [r7, #12]
 801f368:	e008      	b.n	801f37c <_ZN13CT6963CDriver5ClearEv+0x64>
	{
		WriteDisplayData(0);
 801f36a:	6878      	ldr	r0, [r7, #4]
 801f36c:	f04f 0100 	mov.w	r1, #0
 801f370:	f000 f812 	bl	801f398 <_ZN13CT6963CDriver16WriteDisplayDataEh>
		WriteDisplayData(0x00);
	}

	SetAddressPointer(GLCD_TEXT_HOME);

	for(i = 0; i < GLCD_TEXT_SIZE; i++)
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	f103 0301 	add.w	r3, r3, #1
 801f37a:	60fb      	str	r3, [r7, #12]
 801f37c:	68fa      	ldr	r2, [r7, #12]
 801f37e:	f240 13df 	movw	r3, #479	; 0x1df
 801f382:	429a      	cmp	r2, r3
 801f384:	bf8c      	ite	hi
 801f386:	2300      	movhi	r3, #0
 801f388:	2301      	movls	r3, #1
 801f38a:	b2db      	uxtb	r3, r3
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	d1ec      	bne.n	801f36a <_ZN13CT6963CDriver5ClearEv+0x52>
	{
		WriteDisplayData(0);
	}
}
 801f390:	f107 0710 	add.w	r7, r7, #16
 801f394:	46bd      	mov	sp, r7
 801f396:	bd80      	pop	{r7, pc}

0801f398 <_ZN13CT6963CDriver16WriteDisplayDataEh>:
  * @brief  writes icremental data to display ram
  * @param  data byte
  * @retval None
  */
void CT6963CDriver::WriteDisplayData(unsigned char x)
{
 801f398:	b580      	push	{r7, lr}
 801f39a:	b082      	sub	sp, #8
 801f39c:	af00      	add	r7, sp, #0
 801f39e:	6078      	str	r0, [r7, #4]
 801f3a0:	460b      	mov	r3, r1
 801f3a2:	70fb      	strb	r3, [r7, #3]
	WriteData(x);
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801f3ac:	681b      	ldr	r3, [r3, #0]
 801f3ae:	78fa      	ldrb	r2, [r7, #3]
 801f3b0:	6878      	ldr	r0, [r7, #4]
 801f3b2:	4611      	mov	r1, r2
 801f3b4:	4798      	blx	r3
	WriteCommand(T6963_DATA_WRITE_AND_INCREMENT);
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	f103 0334 	add.w	r3, r3, #52	; 0x34
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	6878      	ldr	r0, [r7, #4]
 801f3c2:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 801f3c6:	4798      	blx	r3
}
 801f3c8:	f107 0708 	add.w	r7, r7, #8
 801f3cc:	46bd      	mov	sp, r7
 801f3ce:	bd80      	pop	{r7, pc}

0801f3d0 <_ZN13CT6963CDriver9WriteCharEc>:
  * @brief  writes single ASCII char to display
  * @param  ASCII char
  * @retval None
  */
void CT6963CDriver::WriteChar(char charCode)
{
 801f3d0:	b580      	push	{r7, lr}
 801f3d2:	b082      	sub	sp, #8
 801f3d4:	af00      	add	r7, sp, #0
 801f3d6:	6078      	str	r0, [r7, #4]
 801f3d8:	460b      	mov	r3, r1
 801f3da:	70fb      	strb	r3, [r7, #3]
	WriteDisplayData(charCode - 32);
 801f3dc:	78fb      	ldrb	r3, [r7, #3]
 801f3de:	f1a3 0320 	sub.w	r3, r3, #32
 801f3e2:	b2db      	uxtb	r3, r3
 801f3e4:	6878      	ldr	r0, [r7, #4]
 801f3e6:	4619      	mov	r1, r3
 801f3e8:	f7ff ffd6 	bl	801f398 <_ZN13CT6963CDriver16WriteDisplayDataEh>
}
 801f3ec:	f107 0708 	add.w	r7, r7, #8
 801f3f0:	46bd      	mov	sp, r7
 801f3f2:	bd80      	pop	{r7, pc}

0801f3f4 <_ZN13CT6963CDriver11WriteStringEPc5tFontjj>:
  * @brief  writes a string starting at upper left corner on (x,y) and specified font
  * @param  null terminated string, font structure, x, y
  * @retval None
  */
void CT6963CDriver::WriteString(char * str, const tFont font,unsigned int x, unsigned int y)
{
 801f3f4:	b082      	sub	sp, #8
 801f3f6:	b480      	push	{r7}
 801f3f8:	b083      	sub	sp, #12
 801f3fa:	af00      	add	r7, sp, #0
 801f3fc:	6078      	str	r0, [r7, #4]
 801f3fe:	6039      	str	r1, [r7, #0]
 801f400:	f107 0110 	add.w	r1, r7, #16
 801f404:	e881 000c 	stmia.w	r1, {r2, r3}
		}
	} else {

	}

}
 801f408:	f107 070c 	add.w	r7, r7, #12
 801f40c:	46bd      	mov	sp, r7
 801f40e:	bc80      	pop	{r7}
 801f410:	b002      	add	sp, #8
 801f412:	4770      	bx	lr

0801f414 <_ZN13CT6963CDriver8SetPixelEhh>:
  * @brief  sets a pixel in graphics ram
  * @param  coordinates from upper left corner
  * @retval None
  */
void CT6963CDriver::SetPixel(unsigned char x, unsigned char y)
{
 801f414:	b580      	push	{r7, lr}
 801f416:	b084      	sub	sp, #16
 801f418:	af00      	add	r7, sp, #0
 801f41a:	6078      	str	r0, [r7, #4]
 801f41c:	4613      	mov	r3, r2
 801f41e:	460a      	mov	r2, r1
 801f420:	70fa      	strb	r2, [r7, #3]
 801f422:	70bb      	strb	r3, [r7, #2]
	unsigned char tmp;
	GraphicGoTo(x,y);
 801f424:	78fa      	ldrb	r2, [r7, #3]
 801f426:	78bb      	ldrb	r3, [r7, #2]
 801f428:	6878      	ldr	r0, [r7, #4]
 801f42a:	4611      	mov	r1, r2
 801f42c:	461a      	mov	r2, r3
 801f42e:	f7ff ff53 	bl	801f2d8 <_ZN13CT6963CDriver11GraphicGoToEhh>

	tmp = ReadData();
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	6878      	ldr	r0, [r7, #4]
 801f43e:	4798      	blx	r3
 801f440:	4603      	mov	r3, r0
 801f442:	73fb      	strb	r3, [r7, #15]

	if(Inverse())
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	4618      	mov	r0, r3
 801f448:	f7ff fdfa 	bl	801f040 <_ZN11CGraphicLCD7InverseEv>
 801f44c:	4603      	mov	r3, r0
 801f44e:	2b00      	cmp	r3, #0
 801f450:	d011      	beq.n	801f476 <_ZN13CT6963CDriver8SetPixelEhh+0x62>
		tmp &=~ (1 <<  (GLCD_FONT_WIDTH - 1 - (x % GLCD_FONT_WIDTH)));
 801f452:	78fb      	ldrb	r3, [r7, #3]
 801f454:	ea6f 0303 	mvn.w	r3, r3
 801f458:	f003 0307 	and.w	r3, r3, #7
 801f45c:	f04f 0201 	mov.w	r2, #1
 801f460:	fa02 f303 	lsl.w	r3, r2, r3
 801f464:	b2db      	uxtb	r3, r3
 801f466:	ea6f 0303 	mvn.w	r3, r3
 801f46a:	b2da      	uxtb	r2, r3
 801f46c:	7bfb      	ldrb	r3, [r7, #15]
 801f46e:	4013      	ands	r3, r2
 801f470:	b2db      	uxtb	r3, r3
 801f472:	73fb      	strb	r3, [r7, #15]
 801f474:	e00d      	b.n	801f492 <_ZN13CT6963CDriver8SetPixelEhh+0x7e>
	else
		tmp |= (1 <<  (GLCD_FONT_WIDTH - 1 - (x % GLCD_FONT_WIDTH)));
 801f476:	78fb      	ldrb	r3, [r7, #3]
 801f478:	ea6f 0303 	mvn.w	r3, r3
 801f47c:	f003 0307 	and.w	r3, r3, #7
 801f480:	f04f 0201 	mov.w	r2, #1
 801f484:	fa02 f303 	lsl.w	r3, r2, r3
 801f488:	b2da      	uxtb	r2, r3
 801f48a:	7bfb      	ldrb	r3, [r7, #15]
 801f48c:	4313      	orrs	r3, r2
 801f48e:	b2db      	uxtb	r3, r3
 801f490:	73fb      	strb	r3, [r7, #15]

	WriteDisplayData(tmp);
 801f492:	7bfb      	ldrb	r3, [r7, #15]
 801f494:	6878      	ldr	r0, [r7, #4]
 801f496:	4619      	mov	r1, r3
 801f498:	f7ff ff7e 	bl	801f398 <_ZN13CT6963CDriver16WriteDisplayDataEh>

}
 801f49c:	f107 0710 	add.w	r7, r7, #16
 801f4a0:	46bd      	mov	sp, r7
 801f4a2:	bd80      	pop	{r7, pc}

0801f4a4 <_ZN13CT6963CDriver4LineEjjjj>:
  * @retval None
  *
  * Copyright (c) Radoslaw Kwiecien, 2007r
  * http://en.radzio.dxp.pl/t6963/
  */
void CT6963CDriver::Line(unsigned int x1, unsigned int y1,unsigned int x2, unsigned int y2){
 801f4a4:	b580      	push	{r7, lr}
 801f4a6:	b08e      	sub	sp, #56	; 0x38
 801f4a8:	af00      	add	r7, sp, #0
 801f4aa:	60f8      	str	r0, [r7, #12]
 801f4ac:	60b9      	str	r1, [r7, #8]
 801f4ae:	607a      	str	r2, [r7, #4]
 801f4b0:	603b      	str	r3, [r7, #0]
	unsigned int CurrentX, CurrentY;
	int Xinc, Yinc,
	Dx, Dy, TwoDx, TwoDy,
	TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (x2-x1);
 801f4b2:	683a      	ldr	r2, [r7, #0]
 801f4b4:	68bb      	ldr	r3, [r7, #8]
 801f4b6:	1ad3      	subs	r3, r2, r3
 801f4b8:	627b      	str	r3, [r7, #36]	; 0x24
	Dy = (y2-y1);
 801f4ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	1ad3      	subs	r3, r2, r3
 801f4c0:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 801f4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4c6:	18d3      	adds	r3, r2, r3
 801f4c8:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 801f4ca:	6a3a      	ldr	r2, [r7, #32]
 801f4cc:	6a3b      	ldr	r3, [r7, #32]
 801f4ce:	18d3      	adds	r3, r2, r3
 801f4d0:	61bb      	str	r3, [r7, #24]

	CurrentX = x1;
 801f4d2:	68bb      	ldr	r3, [r7, #8]
 801f4d4:	637b      	str	r3, [r7, #52]	; 0x34
	CurrentY = y1;
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	633b      	str	r3, [r7, #48]	; 0x30

	Xinc = 1;
 801f4da:	f04f 0301 	mov.w	r3, #1
 801f4de:	62fb      	str	r3, [r7, #44]	; 0x2c
	Yinc = 1;
 801f4e0:	f04f 0301 	mov.w	r3, #1
 801f4e4:	62bb      	str	r3, [r7, #40]	; 0x28

	if(Dx < 0)	// line from right to left
 801f4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	da0a      	bge.n	801f502 <_ZN13CT6963CDriver4LineEjjjj+0x5e>
	{
		Xinc = -1;
 801f4ec:	f04f 33ff 	mov.w	r3, #4294967295
 801f4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		Dx = -Dx;
 801f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4f4:	f1c3 0300 	rsb	r3, r3, #0
 801f4f8:	627b      	str	r3, [r7, #36]	; 0x24
		TwoDx = -TwoDx;
 801f4fa:	69fb      	ldr	r3, [r7, #28]
 801f4fc:	f1c3 0300 	rsb	r3, r3, #0
 801f500:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) // line from bottom to top
 801f502:	6a3b      	ldr	r3, [r7, #32]
 801f504:	2b00      	cmp	r3, #0
 801f506:	da0a      	bge.n	801f51e <_ZN13CT6963CDriver4LineEjjjj+0x7a>
	{
		Yinc = -1;
 801f508:	f04f 33ff 	mov.w	r3, #4294967295
 801f50c:	62bb      	str	r3, [r7, #40]	; 0x28
		Dy = -Dy;
 801f50e:	6a3b      	ldr	r3, [r7, #32]
 801f510:	f1c3 0300 	rsb	r3, r3, #0
 801f514:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 801f516:	69bb      	ldr	r3, [r7, #24]
 801f518:	f1c3 0300 	rsb	r3, r3, #0
 801f51c:	61bb      	str	r3, [r7, #24]
	}

	SetPixel(x1,y1); // starting point
 801f51e:	68bb      	ldr	r3, [r7, #8]
 801f520:	b2da      	uxtb	r2, r3
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	b2db      	uxtb	r3, r3
 801f526:	68f8      	ldr	r0, [r7, #12]
 801f528:	4611      	mov	r1, r2
 801f52a:	461a      	mov	r2, r3
 801f52c:	f7ff ff72 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>

	if ((Dx != 0) || (Dy != 0)) // line is vertical or horizontal
 801f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f532:	2b00      	cmp	r3, #0
 801f534:	d102      	bne.n	801f53c <_ZN13CT6963CDriver4LineEjjjj+0x98>
 801f536:	6a3b      	ldr	r3, [r7, #32]
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d056      	beq.n	801f5ea <_ZN13CT6963CDriver4LineEjjjj+0x146>
	{

		if (Dy <= Dx) // x is running var
 801f53c:	6a3a      	ldr	r2, [r7, #32]
 801f53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f540:	429a      	cmp	r2, r3
 801f542:	dc29      	bgt.n	801f598 <_ZN13CT6963CDriver4LineEjjjj+0xf4>
		{
			TwoDxAccumulatedError = 0;
 801f544:	f04f 0300 	mov.w	r3, #0
 801f548:	617b      	str	r3, [r7, #20]
			do
			{
				CurrentX += Xinc; // step X
 801f54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f54c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f54e:	18d3      	adds	r3, r2, r3
 801f550:	637b      	str	r3, [r7, #52]	; 0x34
				TwoDxAccumulatedError += TwoDy;
 801f552:	697a      	ldr	r2, [r7, #20]
 801f554:	69bb      	ldr	r3, [r7, #24]
 801f556:	18d3      	adds	r3, r2, r3
 801f558:	617b      	str	r3, [r7, #20]
				if(TwoDxAccumulatedError > Dx)  // Increase Y
 801f55a:	697a      	ldr	r2, [r7, #20]
 801f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f55e:	429a      	cmp	r2, r3
 801f560:	dd07      	ble.n	801f572 <_ZN13CT6963CDriver4LineEjjjj+0xce>
				{
					CurrentY += Yinc;
 801f562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f566:	18d3      	adds	r3, r2, r3
 801f568:	633b      	str	r3, [r7, #48]	; 0x30
					TwoDxAccumulatedError -= TwoDx;
 801f56a:	697a      	ldr	r2, [r7, #20]
 801f56c:	69fb      	ldr	r3, [r7, #28]
 801f56e:	1ad3      	subs	r3, r2, r3
 801f570:	617b      	str	r3, [r7, #20]
				}
				SetPixel(CurrentX,CurrentY);
 801f572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f574:	b2da      	uxtb	r2, r3
 801f576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f578:	b2db      	uxtb	r3, r3
 801f57a:	68f8      	ldr	r0, [r7, #12]
 801f57c:	4611      	mov	r1, r2
 801f57e:	461a      	mov	r2, r3
 801f580:	f7ff ff48 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	{

		if (Dy <= Dx) // x is running var
		{
			TwoDxAccumulatedError = 0;
			do
 801f584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f586:	683b      	ldr	r3, [r7, #0]
 801f588:	429a      	cmp	r2, r3
 801f58a:	bf0c      	ite	eq
 801f58c:	2300      	moveq	r3, #0
 801f58e:	2301      	movne	r3, #1
 801f590:	b2db      	uxtb	r3, r3
 801f592:	2b00      	cmp	r3, #0
 801f594:	d1d9      	bne.n	801f54a <_ZN13CT6963CDriver4LineEjjjj+0xa6>
 801f596:	e028      	b.n	801f5ea <_ZN13CT6963CDriver4LineEjjjj+0x146>
				SetPixel(CurrentX,CurrentY);
			}while (CurrentX != x2); // line finished
		}
		else // y is runnig var
		{
			TwoDyAccumulatedError = 0;
 801f598:	f04f 0300 	mov.w	r3, #0
 801f59c:	613b      	str	r3, [r7, #16]
			do
			{
				CurrentY += Yinc;
 801f59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f5a2:	18d3      	adds	r3, r2, r3
 801f5a4:	633b      	str	r3, [r7, #48]	; 0x30
				TwoDyAccumulatedError += TwoDx;
 801f5a6:	693a      	ldr	r2, [r7, #16]
 801f5a8:	69fb      	ldr	r3, [r7, #28]
 801f5aa:	18d3      	adds	r3, r2, r3
 801f5ac:	613b      	str	r3, [r7, #16]
				if(TwoDyAccumulatedError>Dy)
 801f5ae:	693a      	ldr	r2, [r7, #16]
 801f5b0:	6a3b      	ldr	r3, [r7, #32]
 801f5b2:	429a      	cmp	r2, r3
 801f5b4:	dd07      	ble.n	801f5c6 <_ZN13CT6963CDriver4LineEjjjj+0x122>
				{
					CurrentX += Xinc;
 801f5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f5ba:	18d3      	adds	r3, r2, r3
 801f5bc:	637b      	str	r3, [r7, #52]	; 0x34
					TwoDyAccumulatedError -= TwoDy;
 801f5be:	693a      	ldr	r2, [r7, #16]
 801f5c0:	69bb      	ldr	r3, [r7, #24]
 801f5c2:	1ad3      	subs	r3, r2, r3
 801f5c4:	613b      	str	r3, [r7, #16]
				}
				SetPixel(CurrentX,CurrentY);
 801f5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f5c8:	b2da      	uxtb	r2, r3
 801f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5cc:	b2db      	uxtb	r3, r3
 801f5ce:	68f8      	ldr	r0, [r7, #12]
 801f5d0:	4611      	mov	r1, r2
 801f5d2:	461a      	mov	r2, r3
 801f5d4:	f7ff ff1e 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
			}while (CurrentX != x2); // line finished
		}
		else // y is runnig var
		{
			TwoDyAccumulatedError = 0;
			do
 801f5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f5dc:	429a      	cmp	r2, r3
 801f5de:	bf0c      	ite	eq
 801f5e0:	2300      	moveq	r3, #0
 801f5e2:	2301      	movne	r3, #1
 801f5e4:	b2db      	uxtb	r3, r3
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	d1d9      	bne.n	801f59e <_ZN13CT6963CDriver4LineEjjjj+0xfa>
				}
				SetPixel(CurrentX,CurrentY);
			}while (CurrentY != y2); // line finished
		}
	}
}
 801f5ea:	f107 0738 	add.w	r7, r7, #56	; 0x38
 801f5ee:	46bd      	mov	sp, r7
 801f5f0:	bd80      	pop	{r7, pc}
 801f5f2:	bf00      	nop

0801f5f4 <_ZN13CT6963CDriver6WindowEjjjj>:
/**
  * @brief  draw a window with upper left corner at (x,y) and specified width and height, edges round or square
  * @param  x1,y1,width,heigth, edge type enum
  * @retval None
  */
void CT6963CDriver::Window(unsigned int x,unsigned int y,unsigned int width,unsigned int height){
 801f5f4:	b5b0      	push	{r4, r5, r7, lr}
 801f5f6:	b088      	sub	sp, #32
 801f5f8:	af02      	add	r7, sp, #8
 801f5fa:	60f8      	str	r0, [r7, #12]
 801f5fc:	60b9      	str	r1, [r7, #8]
 801f5fe:	607a      	str	r2, [r7, #4]
 801f600:	603b      	str	r3, [r7, #0]
	unsigned int i;

	Rectangle(x+4,y,x+width-4,4,true); // filled top bar
 801f602:	68fb      	ldr	r3, [r7, #12]
 801f604:	681b      	ldr	r3, [r3, #0]
 801f606:	f103 030c 	add.w	r3, r3, #12
 801f60a:	681c      	ldr	r4, [r3, #0]
 801f60c:	68bb      	ldr	r3, [r7, #8]
 801f60e:	f103 0204 	add.w	r2, r3, #4
 801f612:	68b9      	ldr	r1, [r7, #8]
 801f614:	683b      	ldr	r3, [r7, #0]
 801f616:	18cb      	adds	r3, r1, r3
 801f618:	f1a3 0304 	sub.w	r3, r3, #4
 801f61c:	f04f 0104 	mov.w	r1, #4
 801f620:	9100      	str	r1, [sp, #0]
 801f622:	f04f 0101 	mov.w	r1, #1
 801f626:	9101      	str	r1, [sp, #4]
 801f628:	68f8      	ldr	r0, [r7, #12]
 801f62a:	4611      	mov	r1, r2
 801f62c:	687a      	ldr	r2, [r7, #4]
 801f62e:	47a0      	blx	r4
	Line(x,y-4,x,y+height-4);			// left border
 801f630:	68fb      	ldr	r3, [r7, #12]
 801f632:	681b      	ldr	r3, [r3, #0]
 801f634:	f103 0304 	add.w	r3, r3, #4
 801f638:	681c      	ldr	r4, [r3, #0]
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	f1a3 0304 	sub.w	r3, r3, #4
 801f640:	6879      	ldr	r1, [r7, #4]
 801f642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f644:	188a      	adds	r2, r1, r2
 801f646:	f1a2 0204 	sub.w	r2, r2, #4
 801f64a:	9200      	str	r2, [sp, #0]
 801f64c:	68f8      	ldr	r0, [r7, #12]
 801f64e:	68b9      	ldr	r1, [r7, #8]
 801f650:	461a      	mov	r2, r3
 801f652:	68bb      	ldr	r3, [r7, #8]
 801f654:	47a0      	blx	r4
	Line(x+width,y-4,x+width,y+height-4);// right border
 801f656:	68fb      	ldr	r3, [r7, #12]
 801f658:	681b      	ldr	r3, [r3, #0]
 801f65a:	f103 0304 	add.w	r3, r3, #4
 801f65e:	681c      	ldr	r4, [r3, #0]
 801f660:	68ba      	ldr	r2, [r7, #8]
 801f662:	683b      	ldr	r3, [r7, #0]
 801f664:	18d1      	adds	r1, r2, r3
 801f666:	687b      	ldr	r3, [r7, #4]
 801f668:	f1a3 0204 	sub.w	r2, r3, #4
 801f66c:	68b8      	ldr	r0, [r7, #8]
 801f66e:	683b      	ldr	r3, [r7, #0]
 801f670:	18c3      	adds	r3, r0, r3
 801f672:	687d      	ldr	r5, [r7, #4]
 801f674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f676:	1828      	adds	r0, r5, r0
 801f678:	f1a0 0004 	sub.w	r0, r0, #4
 801f67c:	9000      	str	r0, [sp, #0]
 801f67e:	68f8      	ldr	r0, [r7, #12]
 801f680:	47a0      	blx	r4
	Line(x+4,y+height,x+width-4,y+height);// bottom border
 801f682:	68fb      	ldr	r3, [r7, #12]
 801f684:	681b      	ldr	r3, [r3, #0]
 801f686:	f103 0304 	add.w	r3, r3, #4
 801f68a:	681c      	ldr	r4, [r3, #0]
 801f68c:	68bb      	ldr	r3, [r7, #8]
 801f68e:	f103 0104 	add.w	r1, r3, #4
 801f692:	687a      	ldr	r2, [r7, #4]
 801f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f696:	18d2      	adds	r2, r2, r3
 801f698:	68b8      	ldr	r0, [r7, #8]
 801f69a:	683b      	ldr	r3, [r7, #0]
 801f69c:	18c3      	adds	r3, r0, r3
 801f69e:	f1a3 0304 	sub.w	r3, r3, #4
 801f6a2:	687d      	ldr	r5, [r7, #4]
 801f6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f6a6:	1828      	adds	r0, r5, r0
 801f6a8:	9000      	str	r0, [sp, #0]
 801f6aa:	68f8      	ldr	r0, [r7, #12]
 801f6ac:	47a0      	blx	r4

	for(i=1;i<4;i++){
 801f6ae:	f04f 0301 	mov.w	r3, #1
 801f6b2:	617b      	str	r3, [r7, #20]
 801f6b4:	e06f      	b.n	801f796 <_ZN13CT6963CDriver6WindowEjjjj+0x1a2>
		SetPixel(x+i,y+3);		// upper left
 801f6b6:	68bb      	ldr	r3, [r7, #8]
 801f6b8:	b2da      	uxtb	r2, r3
 801f6ba:	697b      	ldr	r3, [r7, #20]
 801f6bc:	b2db      	uxtb	r3, r3
 801f6be:	18d3      	adds	r3, r2, r3
 801f6c0:	b2da      	uxtb	r2, r3
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	b2db      	uxtb	r3, r3
 801f6c6:	f103 0303 	add.w	r3, r3, #3
 801f6ca:	b2db      	uxtb	r3, r3
 801f6cc:	68f8      	ldr	r0, [r7, #12]
 801f6ce:	4611      	mov	r1, r2
 801f6d0:	461a      	mov	r2, r3
 801f6d2:	f7ff fe9f 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+i,y+2);
 801f6d6:	68bb      	ldr	r3, [r7, #8]
 801f6d8:	b2da      	uxtb	r2, r3
 801f6da:	697b      	ldr	r3, [r7, #20]
 801f6dc:	b2db      	uxtb	r3, r3
 801f6de:	18d3      	adds	r3, r2, r3
 801f6e0:	b2da      	uxtb	r2, r3
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	b2db      	uxtb	r3, r3
 801f6e6:	f103 0302 	add.w	r3, r3, #2
 801f6ea:	b2db      	uxtb	r3, r3
 801f6ec:	68f8      	ldr	r0, [r7, #12]
 801f6ee:	4611      	mov	r1, r2
 801f6f0:	461a      	mov	r2, r3
 801f6f2:	f7ff fe8f 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+i,y+1);
 801f6f6:	68bb      	ldr	r3, [r7, #8]
 801f6f8:	b2da      	uxtb	r2, r3
 801f6fa:	697b      	ldr	r3, [r7, #20]
 801f6fc:	b2db      	uxtb	r3, r3
 801f6fe:	18d3      	adds	r3, r2, r3
 801f700:	b2da      	uxtb	r2, r3
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	b2db      	uxtb	r3, r3
 801f706:	f103 0301 	add.w	r3, r3, #1
 801f70a:	b2db      	uxtb	r3, r3
 801f70c:	68f8      	ldr	r0, [r7, #12]
 801f70e:	4611      	mov	r1, r2
 801f710:	461a      	mov	r2, r3
 801f712:	f7ff fe7f 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>

		SetPixel(x+width-i,y+3); // upper right
 801f716:	68bb      	ldr	r3, [r7, #8]
 801f718:	b2da      	uxtb	r2, r3
 801f71a:	683b      	ldr	r3, [r7, #0]
 801f71c:	b2db      	uxtb	r3, r3
 801f71e:	18d3      	adds	r3, r2, r3
 801f720:	b2da      	uxtb	r2, r3
 801f722:	697b      	ldr	r3, [r7, #20]
 801f724:	b2db      	uxtb	r3, r3
 801f726:	1ad3      	subs	r3, r2, r3
 801f728:	b2da      	uxtb	r2, r3
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	b2db      	uxtb	r3, r3
 801f72e:	f103 0303 	add.w	r3, r3, #3
 801f732:	b2db      	uxtb	r3, r3
 801f734:	68f8      	ldr	r0, [r7, #12]
 801f736:	4611      	mov	r1, r2
 801f738:	461a      	mov	r2, r3
 801f73a:	f7ff fe6b 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+width-i,y+2);
 801f73e:	68bb      	ldr	r3, [r7, #8]
 801f740:	b2da      	uxtb	r2, r3
 801f742:	683b      	ldr	r3, [r7, #0]
 801f744:	b2db      	uxtb	r3, r3
 801f746:	18d3      	adds	r3, r2, r3
 801f748:	b2da      	uxtb	r2, r3
 801f74a:	697b      	ldr	r3, [r7, #20]
 801f74c:	b2db      	uxtb	r3, r3
 801f74e:	1ad3      	subs	r3, r2, r3
 801f750:	b2da      	uxtb	r2, r3
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	b2db      	uxtb	r3, r3
 801f756:	f103 0302 	add.w	r3, r3, #2
 801f75a:	b2db      	uxtb	r3, r3
 801f75c:	68f8      	ldr	r0, [r7, #12]
 801f75e:	4611      	mov	r1, r2
 801f760:	461a      	mov	r2, r3
 801f762:	f7ff fe57 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(x+width-i,y+1);
 801f766:	68bb      	ldr	r3, [r7, #8]
 801f768:	b2da      	uxtb	r2, r3
 801f76a:	683b      	ldr	r3, [r7, #0]
 801f76c:	b2db      	uxtb	r3, r3
 801f76e:	18d3      	adds	r3, r2, r3
 801f770:	b2da      	uxtb	r2, r3
 801f772:	697b      	ldr	r3, [r7, #20]
 801f774:	b2db      	uxtb	r3, r3
 801f776:	1ad3      	subs	r3, r2, r3
 801f778:	b2da      	uxtb	r2, r3
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	b2db      	uxtb	r3, r3
 801f77e:	f103 0301 	add.w	r3, r3, #1
 801f782:	b2db      	uxtb	r3, r3
 801f784:	68f8      	ldr	r0, [r7, #12]
 801f786:	4611      	mov	r1, r2
 801f788:	461a      	mov	r2, r3
 801f78a:	f7ff fe43 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	Rectangle(x+4,y,x+width-4,4,true); // filled top bar
	Line(x,y-4,x,y+height-4);			// left border
	Line(x+width,y-4,x+width,y+height-4);// right border
	Line(x+4,y+height,x+width-4,y+height);// bottom border

	for(i=1;i<4;i++){
 801f78e:	697b      	ldr	r3, [r7, #20]
 801f790:	f103 0301 	add.w	r3, r3, #1
 801f794:	617b      	str	r3, [r7, #20]
 801f796:	697b      	ldr	r3, [r7, #20]
 801f798:	2b03      	cmp	r3, #3
 801f79a:	bf8c      	ite	hi
 801f79c:	2300      	movhi	r3, #0
 801f79e:	2301      	movls	r3, #1
 801f7a0:	b2db      	uxtb	r3, r3
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	d187      	bne.n	801f6b6 <_ZN13CT6963CDriver6WindowEjjjj+0xc2>
		SetPixel(x+width-i,y+3); // upper right
		SetPixel(x+width-i,y+2);
		SetPixel(x+width-i,y+1);
	}

	SetPixel(x+1,y+height-3);		// bottom left
 801f7a6:	68bb      	ldr	r3, [r7, #8]
 801f7a8:	b2db      	uxtb	r3, r3
 801f7aa:	f103 0301 	add.w	r3, r3, #1
 801f7ae:	b2da      	uxtb	r2, r3
 801f7b0:	687b      	ldr	r3, [r7, #4]
 801f7b2:	b2d9      	uxtb	r1, r3
 801f7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7b6:	b2db      	uxtb	r3, r3
 801f7b8:	18cb      	adds	r3, r1, r3
 801f7ba:	b2db      	uxtb	r3, r3
 801f7bc:	f1a3 0303 	sub.w	r3, r3, #3
 801f7c0:	b2db      	uxtb	r3, r3
 801f7c2:	68f8      	ldr	r0, [r7, #12]
 801f7c4:	4611      	mov	r1, r2
 801f7c6:	461a      	mov	r2, r3
 801f7c8:	f7ff fe24 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+1,y+height-2);
 801f7cc:	68bb      	ldr	r3, [r7, #8]
 801f7ce:	b2db      	uxtb	r3, r3
 801f7d0:	f103 0301 	add.w	r3, r3, #1
 801f7d4:	b2da      	uxtb	r2, r3
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	b2d9      	uxtb	r1, r3
 801f7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7dc:	b2db      	uxtb	r3, r3
 801f7de:	18cb      	adds	r3, r1, r3
 801f7e0:	b2db      	uxtb	r3, r3
 801f7e2:	f1a3 0302 	sub.w	r3, r3, #2
 801f7e6:	b2db      	uxtb	r3, r3
 801f7e8:	68f8      	ldr	r0, [r7, #12]
 801f7ea:	4611      	mov	r1, r2
 801f7ec:	461a      	mov	r2, r3
 801f7ee:	f7ff fe11 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+1,y+height-1);
 801f7f2:	68bb      	ldr	r3, [r7, #8]
 801f7f4:	b2db      	uxtb	r3, r3
 801f7f6:	f103 0301 	add.w	r3, r3, #1
 801f7fa:	b2da      	uxtb	r2, r3
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	b2d9      	uxtb	r1, r3
 801f800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f802:	b2db      	uxtb	r3, r3
 801f804:	18cb      	adds	r3, r1, r3
 801f806:	b2db      	uxtb	r3, r3
 801f808:	f103 33ff 	add.w	r3, r3, #4294967295
 801f80c:	b2db      	uxtb	r3, r3
 801f80e:	68f8      	ldr	r0, [r7, #12]
 801f810:	4611      	mov	r1, r2
 801f812:	461a      	mov	r2, r3
 801f814:	f7ff fdfe 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>

	SetPixel(x+1,y+height-1);		// bottom left
 801f818:	68bb      	ldr	r3, [r7, #8]
 801f81a:	b2db      	uxtb	r3, r3
 801f81c:	f103 0301 	add.w	r3, r3, #1
 801f820:	b2da      	uxtb	r2, r3
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	b2d9      	uxtb	r1, r3
 801f826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f828:	b2db      	uxtb	r3, r3
 801f82a:	18cb      	adds	r3, r1, r3
 801f82c:	b2db      	uxtb	r3, r3
 801f82e:	f103 33ff 	add.w	r3, r3, #4294967295
 801f832:	b2db      	uxtb	r3, r3
 801f834:	68f8      	ldr	r0, [r7, #12]
 801f836:	4611      	mov	r1, r2
 801f838:	461a      	mov	r2, r3
 801f83a:	f7ff fdeb 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+2,y+height-1);
 801f83e:	68bb      	ldr	r3, [r7, #8]
 801f840:	b2db      	uxtb	r3, r3
 801f842:	f103 0302 	add.w	r3, r3, #2
 801f846:	b2da      	uxtb	r2, r3
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	b2d9      	uxtb	r1, r3
 801f84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f84e:	b2db      	uxtb	r3, r3
 801f850:	18cb      	adds	r3, r1, r3
 801f852:	b2db      	uxtb	r3, r3
 801f854:	f103 33ff 	add.w	r3, r3, #4294967295
 801f858:	b2db      	uxtb	r3, r3
 801f85a:	68f8      	ldr	r0, [r7, #12]
 801f85c:	4611      	mov	r1, r2
 801f85e:	461a      	mov	r2, r3
 801f860:	f7ff fdd8 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+3,y+height-1);
 801f864:	68bb      	ldr	r3, [r7, #8]
 801f866:	b2db      	uxtb	r3, r3
 801f868:	f103 0303 	add.w	r3, r3, #3
 801f86c:	b2da      	uxtb	r2, r3
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	b2d9      	uxtb	r1, r3
 801f872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f874:	b2db      	uxtb	r3, r3
 801f876:	18cb      	adds	r3, r1, r3
 801f878:	b2db      	uxtb	r3, r3
 801f87a:	f103 33ff 	add.w	r3, r3, #4294967295
 801f87e:	b2db      	uxtb	r3, r3
 801f880:	68f8      	ldr	r0, [r7, #12]
 801f882:	4611      	mov	r1, r2
 801f884:	461a      	mov	r2, r3
 801f886:	f7ff fdc5 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>

	SetPixel(x+width-1,y+height-3);		// bottom right
 801f88a:	68bb      	ldr	r3, [r7, #8]
 801f88c:	b2da      	uxtb	r2, r3
 801f88e:	683b      	ldr	r3, [r7, #0]
 801f890:	b2db      	uxtb	r3, r3
 801f892:	18d3      	adds	r3, r2, r3
 801f894:	b2db      	uxtb	r3, r3
 801f896:	f103 33ff 	add.w	r3, r3, #4294967295
 801f89a:	b2da      	uxtb	r2, r3
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	b2d9      	uxtb	r1, r3
 801f8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8a2:	b2db      	uxtb	r3, r3
 801f8a4:	18cb      	adds	r3, r1, r3
 801f8a6:	b2db      	uxtb	r3, r3
 801f8a8:	f1a3 0303 	sub.w	r3, r3, #3
 801f8ac:	b2db      	uxtb	r3, r3
 801f8ae:	68f8      	ldr	r0, [r7, #12]
 801f8b0:	4611      	mov	r1, r2
 801f8b2:	461a      	mov	r2, r3
 801f8b4:	f7ff fdae 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-1,y+height-2);
 801f8b8:	68bb      	ldr	r3, [r7, #8]
 801f8ba:	b2da      	uxtb	r2, r3
 801f8bc:	683b      	ldr	r3, [r7, #0]
 801f8be:	b2db      	uxtb	r3, r3
 801f8c0:	18d3      	adds	r3, r2, r3
 801f8c2:	b2db      	uxtb	r3, r3
 801f8c4:	f103 33ff 	add.w	r3, r3, #4294967295
 801f8c8:	b2da      	uxtb	r2, r3
 801f8ca:	687b      	ldr	r3, [r7, #4]
 801f8cc:	b2d9      	uxtb	r1, r3
 801f8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8d0:	b2db      	uxtb	r3, r3
 801f8d2:	18cb      	adds	r3, r1, r3
 801f8d4:	b2db      	uxtb	r3, r3
 801f8d6:	f1a3 0302 	sub.w	r3, r3, #2
 801f8da:	b2db      	uxtb	r3, r3
 801f8dc:	68f8      	ldr	r0, [r7, #12]
 801f8de:	4611      	mov	r1, r2
 801f8e0:	461a      	mov	r2, r3
 801f8e2:	f7ff fd97 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-1,y+height-1);
 801f8e6:	68bb      	ldr	r3, [r7, #8]
 801f8e8:	b2da      	uxtb	r2, r3
 801f8ea:	683b      	ldr	r3, [r7, #0]
 801f8ec:	b2db      	uxtb	r3, r3
 801f8ee:	18d3      	adds	r3, r2, r3
 801f8f0:	b2db      	uxtb	r3, r3
 801f8f2:	f103 33ff 	add.w	r3, r3, #4294967295
 801f8f6:	b2da      	uxtb	r2, r3
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	b2d9      	uxtb	r1, r3
 801f8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8fe:	b2db      	uxtb	r3, r3
 801f900:	18cb      	adds	r3, r1, r3
 801f902:	b2db      	uxtb	r3, r3
 801f904:	f103 33ff 	add.w	r3, r3, #4294967295
 801f908:	b2db      	uxtb	r3, r3
 801f90a:	68f8      	ldr	r0, [r7, #12]
 801f90c:	4611      	mov	r1, r2
 801f90e:	461a      	mov	r2, r3
 801f910:	f7ff fd80 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>

	SetPixel(x+width-1,y+height-1);		// bottom right
 801f914:	68bb      	ldr	r3, [r7, #8]
 801f916:	b2da      	uxtb	r2, r3
 801f918:	683b      	ldr	r3, [r7, #0]
 801f91a:	b2db      	uxtb	r3, r3
 801f91c:	18d3      	adds	r3, r2, r3
 801f91e:	b2db      	uxtb	r3, r3
 801f920:	f103 33ff 	add.w	r3, r3, #4294967295
 801f924:	b2da      	uxtb	r2, r3
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	b2d9      	uxtb	r1, r3
 801f92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f92c:	b2db      	uxtb	r3, r3
 801f92e:	18cb      	adds	r3, r1, r3
 801f930:	b2db      	uxtb	r3, r3
 801f932:	f103 33ff 	add.w	r3, r3, #4294967295
 801f936:	b2db      	uxtb	r3, r3
 801f938:	68f8      	ldr	r0, [r7, #12]
 801f93a:	4611      	mov	r1, r2
 801f93c:	461a      	mov	r2, r3
 801f93e:	f7ff fd69 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-2,y+height-1);
 801f942:	68bb      	ldr	r3, [r7, #8]
 801f944:	b2da      	uxtb	r2, r3
 801f946:	683b      	ldr	r3, [r7, #0]
 801f948:	b2db      	uxtb	r3, r3
 801f94a:	18d3      	adds	r3, r2, r3
 801f94c:	b2db      	uxtb	r3, r3
 801f94e:	f1a3 0302 	sub.w	r3, r3, #2
 801f952:	b2da      	uxtb	r2, r3
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	b2d9      	uxtb	r1, r3
 801f958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f95a:	b2db      	uxtb	r3, r3
 801f95c:	18cb      	adds	r3, r1, r3
 801f95e:	b2db      	uxtb	r3, r3
 801f960:	f103 33ff 	add.w	r3, r3, #4294967295
 801f964:	b2db      	uxtb	r3, r3
 801f966:	68f8      	ldr	r0, [r7, #12]
 801f968:	4611      	mov	r1, r2
 801f96a:	461a      	mov	r2, r3
 801f96c:	f7ff fd52 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
	SetPixel(x+width-3,y+height-1);
 801f970:	68bb      	ldr	r3, [r7, #8]
 801f972:	b2da      	uxtb	r2, r3
 801f974:	683b      	ldr	r3, [r7, #0]
 801f976:	b2db      	uxtb	r3, r3
 801f978:	18d3      	adds	r3, r2, r3
 801f97a:	b2db      	uxtb	r3, r3
 801f97c:	f1a3 0303 	sub.w	r3, r3, #3
 801f980:	b2da      	uxtb	r2, r3
 801f982:	687b      	ldr	r3, [r7, #4]
 801f984:	b2d9      	uxtb	r1, r3
 801f986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f988:	b2db      	uxtb	r3, r3
 801f98a:	18cb      	adds	r3, r1, r3
 801f98c:	b2db      	uxtb	r3, r3
 801f98e:	f103 33ff 	add.w	r3, r3, #4294967295
 801f992:	b2db      	uxtb	r3, r3
 801f994:	68f8      	ldr	r0, [r7, #12]
 801f996:	4611      	mov	r1, r2
 801f998:	461a      	mov	r2, r3
 801f99a:	f7ff fd3b 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>


}
 801f99e:	f107 0718 	add.w	r7, r7, #24
 801f9a2:	46bd      	mov	sp, r7
 801f9a4:	bdb0      	pop	{r4, r5, r7, pc}
 801f9a6:	bf00      	nop

0801f9a8 <_ZN13CT6963CDriver9RectangleEjjjjb>:
/**
  * @brief  draw an rectangle with upper left corner at (x,y) and specified width and height
  * @param  x1,y1,width,heigth,  true for filled
  * @retval None
  */
void CT6963CDriver::Rectangle(unsigned int x,unsigned int y,unsigned int width,unsigned int height,  bool fill){
 801f9a8:	b580      	push	{r7, lr}
 801f9aa:	b086      	sub	sp, #24
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	60f8      	str	r0, [r7, #12]
 801f9b0:	60b9      	str	r1, [r7, #8]
 801f9b2:	607a      	str	r2, [r7, #4]
 801f9b4:	603b      	str	r3, [r7, #0]
	unsigned char i;
	unsigned char k;

	if(fill){	// fill rect
 801f9b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	d031      	beq.n	801fa22 <_ZN13CT6963CDriver9RectangleEjjjjb+0x7a>
		//lines
		for (i=0;i<height;i++){
 801f9be:	f04f 0300 	mov.w	r3, #0
 801f9c2:	75fb      	strb	r3, [r7, #23]
 801f9c4:	e023      	b.n	801fa0e <_ZN13CT6963CDriver9RectangleEjjjjb+0x66>
			// columns
			for (k=0;k<width;k++) {
 801f9c6:	f04f 0300 	mov.w	r3, #0
 801f9ca:	75bb      	strb	r3, [r7, #22]
 801f9cc:	e012      	b.n	801f9f4 <_ZN13CT6963CDriver9RectangleEjjjjb+0x4c>
				SetPixel(x+k,y+i);
 801f9ce:	68bb      	ldr	r3, [r7, #8]
 801f9d0:	b2da      	uxtb	r2, r3
 801f9d2:	7dbb      	ldrb	r3, [r7, #22]
 801f9d4:	18d3      	adds	r3, r2, r3
 801f9d6:	b2da      	uxtb	r2, r3
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	b2d9      	uxtb	r1, r3
 801f9dc:	7dfb      	ldrb	r3, [r7, #23]
 801f9de:	18cb      	adds	r3, r1, r3
 801f9e0:	b2db      	uxtb	r3, r3
 801f9e2:	68f8      	ldr	r0, [r7, #12]
 801f9e4:	4611      	mov	r1, r2
 801f9e6:	461a      	mov	r2, r3
 801f9e8:	f7ff fd14 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>

	if(fill){	// fill rect
		//lines
		for (i=0;i<height;i++){
			// columns
			for (k=0;k<width;k++) {
 801f9ec:	7dbb      	ldrb	r3, [r7, #22]
 801f9ee:	f103 0301 	add.w	r3, r3, #1
 801f9f2:	75bb      	strb	r3, [r7, #22]
 801f9f4:	7dba      	ldrb	r2, [r7, #22]
 801f9f6:	683b      	ldr	r3, [r7, #0]
 801f9f8:	429a      	cmp	r2, r3
 801f9fa:	bf2c      	ite	cs
 801f9fc:	2300      	movcs	r3, #0
 801f9fe:	2301      	movcc	r3, #1
 801fa00:	b2db      	uxtb	r3, r3
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d1e3      	bne.n	801f9ce <_ZN13CT6963CDriver9RectangleEjjjjb+0x26>
	unsigned char i;
	unsigned char k;

	if(fill){	// fill rect
		//lines
		for (i=0;i<height;i++){
 801fa06:	7dfb      	ldrb	r3, [r7, #23]
 801fa08:	f103 0301 	add.w	r3, r3, #1
 801fa0c:	75fb      	strb	r3, [r7, #23]
 801fa0e:	7dfa      	ldrb	r2, [r7, #23]
 801fa10:	6a3b      	ldr	r3, [r7, #32]
 801fa12:	429a      	cmp	r2, r3
 801fa14:	bf2c      	ite	cs
 801fa16:	2300      	movcs	r3, #0
 801fa18:	2301      	movcc	r3, #1
 801fa1a:	b2db      	uxtb	r3, r3
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d1d2      	bne.n	801f9c6 <_ZN13CT6963CDriver9RectangleEjjjjb+0x1e>
 801fa20:	e05f      	b.n	801fae2 <_ZN13CT6963CDriver9RectangleEjjjjb+0x13a>
				SetPixel(x+k,y+i);
			}
		}
	} else {
		//lines vertical
		for (i = 0; i < height; i++) {
 801fa22:	f04f 0300 	mov.w	r3, #0
 801fa26:	75fb      	strb	r3, [r7, #23]
 801fa28:	e022      	b.n	801fa70 <_ZN13CT6963CDriver9RectangleEjjjjb+0xc8>
			SetPixel(x, y + i);
 801fa2a:	68bb      	ldr	r3, [r7, #8]
 801fa2c:	b2da      	uxtb	r2, r3
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	b2d9      	uxtb	r1, r3
 801fa32:	7dfb      	ldrb	r3, [r7, #23]
 801fa34:	18cb      	adds	r3, r1, r3
 801fa36:	b2db      	uxtb	r3, r3
 801fa38:	68f8      	ldr	r0, [r7, #12]
 801fa3a:	4611      	mov	r1, r2
 801fa3c:	461a      	mov	r2, r3
 801fa3e:	f7ff fce9 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
			SetPixel(x + width - 1, y + i);
 801fa42:	68bb      	ldr	r3, [r7, #8]
 801fa44:	b2da      	uxtb	r2, r3
 801fa46:	683b      	ldr	r3, [r7, #0]
 801fa48:	b2db      	uxtb	r3, r3
 801fa4a:	18d3      	adds	r3, r2, r3
 801fa4c:	b2db      	uxtb	r3, r3
 801fa4e:	f103 33ff 	add.w	r3, r3, #4294967295
 801fa52:	b2da      	uxtb	r2, r3
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	b2d9      	uxtb	r1, r3
 801fa58:	7dfb      	ldrb	r3, [r7, #23]
 801fa5a:	18cb      	adds	r3, r1, r3
 801fa5c:	b2db      	uxtb	r3, r3
 801fa5e:	68f8      	ldr	r0, [r7, #12]
 801fa60:	4611      	mov	r1, r2
 801fa62:	461a      	mov	r2, r3
 801fa64:	f7ff fcd6 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
				SetPixel(x+k,y+i);
			}
		}
	} else {
		//lines vertical
		for (i = 0; i < height; i++) {
 801fa68:	7dfb      	ldrb	r3, [r7, #23]
 801fa6a:	f103 0301 	add.w	r3, r3, #1
 801fa6e:	75fb      	strb	r3, [r7, #23]
 801fa70:	7dfa      	ldrb	r2, [r7, #23]
 801fa72:	6a3b      	ldr	r3, [r7, #32]
 801fa74:	429a      	cmp	r2, r3
 801fa76:	bf2c      	ite	cs
 801fa78:	2300      	movcs	r3, #0
 801fa7a:	2301      	movcc	r3, #1
 801fa7c:	b2db      	uxtb	r3, r3
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	d1d3      	bne.n	801fa2a <_ZN13CT6963CDriver9RectangleEjjjjb+0x82>
			SetPixel(x, y + i);
			SetPixel(x + width - 1, y + i);
		}
		//lines horizontal
		for (i = 0; i < width; i++)	{
 801fa82:	f04f 0300 	mov.w	r3, #0
 801fa86:	75fb      	strb	r3, [r7, #23]
 801fa88:	e022      	b.n	801fad0 <_ZN13CT6963CDriver9RectangleEjjjjb+0x128>
			SetPixel(x + i, y);
 801fa8a:	68bb      	ldr	r3, [r7, #8]
 801fa8c:	b2da      	uxtb	r2, r3
 801fa8e:	7dfb      	ldrb	r3, [r7, #23]
 801fa90:	18d3      	adds	r3, r2, r3
 801fa92:	b2da      	uxtb	r2, r3
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	b2db      	uxtb	r3, r3
 801fa98:	68f8      	ldr	r0, [r7, #12]
 801fa9a:	4611      	mov	r1, r2
 801fa9c:	461a      	mov	r2, r3
 801fa9e:	f7ff fcb9 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
			SetPixel(x + i, y + height - 1);
 801faa2:	68bb      	ldr	r3, [r7, #8]
 801faa4:	b2da      	uxtb	r2, r3
 801faa6:	7dfb      	ldrb	r3, [r7, #23]
 801faa8:	18d3      	adds	r3, r2, r3
 801faaa:	b2da      	uxtb	r2, r3
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	b2d9      	uxtb	r1, r3
 801fab0:	6a3b      	ldr	r3, [r7, #32]
 801fab2:	b2db      	uxtb	r3, r3
 801fab4:	18cb      	adds	r3, r1, r3
 801fab6:	b2db      	uxtb	r3, r3
 801fab8:	f103 33ff 	add.w	r3, r3, #4294967295
 801fabc:	b2db      	uxtb	r3, r3
 801fabe:	68f8      	ldr	r0, [r7, #12]
 801fac0:	4611      	mov	r1, r2
 801fac2:	461a      	mov	r2, r3
 801fac4:	f7ff fca6 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		for (i = 0; i < height; i++) {
			SetPixel(x, y + i);
			SetPixel(x + width - 1, y + i);
		}
		//lines horizontal
		for (i = 0; i < width; i++)	{
 801fac8:	7dfb      	ldrb	r3, [r7, #23]
 801faca:	f103 0301 	add.w	r3, r3, #1
 801face:	75fb      	strb	r3, [r7, #23]
 801fad0:	7dfa      	ldrb	r2, [r7, #23]
 801fad2:	683b      	ldr	r3, [r7, #0]
 801fad4:	429a      	cmp	r2, r3
 801fad6:	bf2c      	ite	cs
 801fad8:	2300      	movcs	r3, #0
 801fada:	2301      	movcc	r3, #1
 801fadc:	b2db      	uxtb	r3, r3
 801fade:	2b00      	cmp	r3, #0
 801fae0:	d1d3      	bne.n	801fa8a <_ZN13CT6963CDriver9RectangleEjjjjb+0xe2>
			SetPixel(x + i, y);
			SetPixel(x + i, y + height - 1);
		}
	}
}
 801fae2:	f107 0718 	add.w	r7, r7, #24
 801fae6:	46bd      	mov	sp, r7
 801fae8:	bd80      	pop	{r7, pc}
 801faea:	bf00      	nop

0801faec <_ZN13CT6963CDriver11SectorClearEjjjj>:
/**
  * @brief  clear sector from upper left (x,y) with specified width and height
  * @param  x1,y1,width, height
  * @retval None
  */
void CT6963CDriver::SectorClear(unsigned int x,unsigned int y,unsigned int width,unsigned int height){
 801faec:	b590      	push	{r4, r7, lr}
 801faee:	b089      	sub	sp, #36	; 0x24
 801faf0:	af02      	add	r7, sp, #8
 801faf2:	60f8      	str	r0, [r7, #12]
 801faf4:	60b9      	str	r1, [r7, #8]
 801faf6:	607a      	str	r2, [r7, #4]
 801faf8:	603b      	str	r3, [r7, #0]
	bool oldInverse;

	oldInverse = Inverse();
 801fafa:	68fb      	ldr	r3, [r7, #12]
 801fafc:	4618      	mov	r0, r3
 801fafe:	f7ff fa9f 	bl	801f040 <_ZN11CGraphicLCD7InverseEv>
 801fb02:	4603      	mov	r3, r0
 801fb04:	75fb      	strb	r3, [r7, #23]
	Inverse(!oldInverse);
 801fb06:	68fa      	ldr	r2, [r7, #12]
 801fb08:	7dfb      	ldrb	r3, [r7, #23]
 801fb0a:	f083 0301 	eor.w	r3, r3, #1
 801fb0e:	b2db      	uxtb	r3, r3
 801fb10:	4610      	mov	r0, r2
 801fb12:	4619      	mov	r1, r3
 801fb14:	f7ff faa0 	bl	801f058 <_ZN11CGraphicLCD7InverseEb>

	Rectangle(x,y,width,height,true);
 801fb18:	68fb      	ldr	r3, [r7, #12]
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	f103 030c 	add.w	r3, r3, #12
 801fb20:	681c      	ldr	r4, [r3, #0]
 801fb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb24:	9300      	str	r3, [sp, #0]
 801fb26:	f04f 0301 	mov.w	r3, #1
 801fb2a:	9301      	str	r3, [sp, #4]
 801fb2c:	68f8      	ldr	r0, [r7, #12]
 801fb2e:	68b9      	ldr	r1, [r7, #8]
 801fb30:	687a      	ldr	r2, [r7, #4]
 801fb32:	683b      	ldr	r3, [r7, #0]
 801fb34:	47a0      	blx	r4

	Inverse(oldInverse);
 801fb36:	68fa      	ldr	r2, [r7, #12]
 801fb38:	7dfb      	ldrb	r3, [r7, #23]
 801fb3a:	4610      	mov	r0, r2
 801fb3c:	4619      	mov	r1, r3
 801fb3e:	f7ff fa8b 	bl	801f058 <_ZN11CGraphicLCD7InverseEb>
}
 801fb42:	f107 071c 	add.w	r7, r7, #28
 801fb46:	46bd      	mov	sp, r7
 801fb48:	bd90      	pop	{r4, r7, pc}
 801fb4a:	bf00      	nop

0801fb4c <_ZN13CT6963CDriver6CircleEhhh>:
  * @brief  draw a circle with center at (cx,cy) and specified radius
  * @param  x1,y1,width,
  * @retval None
  */
void CT6963CDriver::Circle(unsigned char cx, unsigned char cy ,unsigned char radius)
{
 801fb4c:	b580      	push	{r7, lr}
 801fb4e:	b088      	sub	sp, #32
 801fb50:	af00      	add	r7, sp, #0
 801fb52:	6078      	str	r0, [r7, #4]
 801fb54:	70f9      	strb	r1, [r7, #3]
 801fb56:	70ba      	strb	r2, [r7, #2]
 801fb58:	707b      	strb	r3, [r7, #1]
	int x, y, xchange, ychange, radiusError;
	x = radius;
 801fb5a:	787b      	ldrb	r3, [r7, #1]
 801fb5c:	61fb      	str	r3, [r7, #28]
	y = 0;
 801fb5e:	f04f 0300 	mov.w	r3, #0
 801fb62:	61bb      	str	r3, [r7, #24]
	xchange = 1 - 2 * radius;
 801fb64:	787a      	ldrb	r2, [r7, #1]
 801fb66:	4613      	mov	r3, r2
 801fb68:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 801fb6c:	1a9b      	subs	r3, r3, r2
 801fb6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fb72:	f103 0301 	add.w	r3, r3, #1
 801fb76:	617b      	str	r3, [r7, #20]
	ychange = 1;
 801fb78:	f04f 0301 	mov.w	r3, #1
 801fb7c:	613b      	str	r3, [r7, #16]
	radiusError = 0;
 801fb7e:	f04f 0300 	mov.w	r3, #0
 801fb82:	60fb      	str	r3, [r7, #12]
	while(x >= y)
 801fb84:	e096      	b.n	801fcb4 <_ZN13CT6963CDriver6CircleEhhh+0x168>
	{
		SetPixel(cx+x, cy+y);
 801fb86:	69fb      	ldr	r3, [r7, #28]
 801fb88:	b2da      	uxtb	r2, r3
 801fb8a:	78fb      	ldrb	r3, [r7, #3]
 801fb8c:	18d3      	adds	r3, r2, r3
 801fb8e:	b2da      	uxtb	r2, r3
 801fb90:	69bb      	ldr	r3, [r7, #24]
 801fb92:	b2d9      	uxtb	r1, r3
 801fb94:	78bb      	ldrb	r3, [r7, #2]
 801fb96:	18cb      	adds	r3, r1, r3
 801fb98:	b2db      	uxtb	r3, r3
 801fb9a:	6878      	ldr	r0, [r7, #4]
 801fb9c:	4611      	mov	r1, r2
 801fb9e:	461a      	mov	r2, r3
 801fba0:	f7ff fc38 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-x, cy+y );
 801fba4:	69fb      	ldr	r3, [r7, #28]
 801fba6:	b2db      	uxtb	r3, r3
 801fba8:	78fa      	ldrb	r2, [r7, #3]
 801fbaa:	1ad3      	subs	r3, r2, r3
 801fbac:	b2da      	uxtb	r2, r3
 801fbae:	69bb      	ldr	r3, [r7, #24]
 801fbb0:	b2d9      	uxtb	r1, r3
 801fbb2:	78bb      	ldrb	r3, [r7, #2]
 801fbb4:	18cb      	adds	r3, r1, r3
 801fbb6:	b2db      	uxtb	r3, r3
 801fbb8:	6878      	ldr	r0, [r7, #4]
 801fbba:	4611      	mov	r1, r2
 801fbbc:	461a      	mov	r2, r3
 801fbbe:	f7ff fc29 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-x, cy-y );
 801fbc2:	69fb      	ldr	r3, [r7, #28]
 801fbc4:	b2db      	uxtb	r3, r3
 801fbc6:	78fa      	ldrb	r2, [r7, #3]
 801fbc8:	1ad3      	subs	r3, r2, r3
 801fbca:	b2da      	uxtb	r2, r3
 801fbcc:	69bb      	ldr	r3, [r7, #24]
 801fbce:	b2db      	uxtb	r3, r3
 801fbd0:	78b9      	ldrb	r1, [r7, #2]
 801fbd2:	1acb      	subs	r3, r1, r3
 801fbd4:	b2db      	uxtb	r3, r3
 801fbd6:	6878      	ldr	r0, [r7, #4]
 801fbd8:	4611      	mov	r1, r2
 801fbda:	461a      	mov	r2, r3
 801fbdc:	f7ff fc1a 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+x, cy-y );
 801fbe0:	69fb      	ldr	r3, [r7, #28]
 801fbe2:	b2da      	uxtb	r2, r3
 801fbe4:	78fb      	ldrb	r3, [r7, #3]
 801fbe6:	18d3      	adds	r3, r2, r3
 801fbe8:	b2da      	uxtb	r2, r3
 801fbea:	69bb      	ldr	r3, [r7, #24]
 801fbec:	b2db      	uxtb	r3, r3
 801fbee:	78b9      	ldrb	r1, [r7, #2]
 801fbf0:	1acb      	subs	r3, r1, r3
 801fbf2:	b2db      	uxtb	r3, r3
 801fbf4:	6878      	ldr	r0, [r7, #4]
 801fbf6:	4611      	mov	r1, r2
 801fbf8:	461a      	mov	r2, r3
 801fbfa:	f7ff fc0b 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+y, cy+x );
 801fbfe:	69bb      	ldr	r3, [r7, #24]
 801fc00:	b2da      	uxtb	r2, r3
 801fc02:	78fb      	ldrb	r3, [r7, #3]
 801fc04:	18d3      	adds	r3, r2, r3
 801fc06:	b2da      	uxtb	r2, r3
 801fc08:	69fb      	ldr	r3, [r7, #28]
 801fc0a:	b2d9      	uxtb	r1, r3
 801fc0c:	78bb      	ldrb	r3, [r7, #2]
 801fc0e:	18cb      	adds	r3, r1, r3
 801fc10:	b2db      	uxtb	r3, r3
 801fc12:	6878      	ldr	r0, [r7, #4]
 801fc14:	4611      	mov	r1, r2
 801fc16:	461a      	mov	r2, r3
 801fc18:	f7ff fbfc 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-y, cy+x );
 801fc1c:	69bb      	ldr	r3, [r7, #24]
 801fc1e:	b2db      	uxtb	r3, r3
 801fc20:	78fa      	ldrb	r2, [r7, #3]
 801fc22:	1ad3      	subs	r3, r2, r3
 801fc24:	b2da      	uxtb	r2, r3
 801fc26:	69fb      	ldr	r3, [r7, #28]
 801fc28:	b2d9      	uxtb	r1, r3
 801fc2a:	78bb      	ldrb	r3, [r7, #2]
 801fc2c:	18cb      	adds	r3, r1, r3
 801fc2e:	b2db      	uxtb	r3, r3
 801fc30:	6878      	ldr	r0, [r7, #4]
 801fc32:	4611      	mov	r1, r2
 801fc34:	461a      	mov	r2, r3
 801fc36:	f7ff fbed 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx-y, cy-x );
 801fc3a:	69bb      	ldr	r3, [r7, #24]
 801fc3c:	b2db      	uxtb	r3, r3
 801fc3e:	78fa      	ldrb	r2, [r7, #3]
 801fc40:	1ad3      	subs	r3, r2, r3
 801fc42:	b2da      	uxtb	r2, r3
 801fc44:	69fb      	ldr	r3, [r7, #28]
 801fc46:	b2db      	uxtb	r3, r3
 801fc48:	78b9      	ldrb	r1, [r7, #2]
 801fc4a:	1acb      	subs	r3, r1, r3
 801fc4c:	b2db      	uxtb	r3, r3
 801fc4e:	6878      	ldr	r0, [r7, #4]
 801fc50:	4611      	mov	r1, r2
 801fc52:	461a      	mov	r2, r3
 801fc54:	f7ff fbde 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		SetPixel(cx+y, cy-x );
 801fc58:	69bb      	ldr	r3, [r7, #24]
 801fc5a:	b2da      	uxtb	r2, r3
 801fc5c:	78fb      	ldrb	r3, [r7, #3]
 801fc5e:	18d3      	adds	r3, r2, r3
 801fc60:	b2da      	uxtb	r2, r3
 801fc62:	69fb      	ldr	r3, [r7, #28]
 801fc64:	b2db      	uxtb	r3, r3
 801fc66:	78b9      	ldrb	r1, [r7, #2]
 801fc68:	1acb      	subs	r3, r1, r3
 801fc6a:	b2db      	uxtb	r3, r3
 801fc6c:	6878      	ldr	r0, [r7, #4]
 801fc6e:	4611      	mov	r1, r2
 801fc70:	461a      	mov	r2, r3
 801fc72:	f7ff fbcf 	bl	801f414 <_ZN13CT6963CDriver8SetPixelEhh>
		y++;
 801fc76:	69bb      	ldr	r3, [r7, #24]
 801fc78:	f103 0301 	add.w	r3, r3, #1
 801fc7c:	61bb      	str	r3, [r7, #24]
		radiusError += ychange;
 801fc7e:	68fa      	ldr	r2, [r7, #12]
 801fc80:	693b      	ldr	r3, [r7, #16]
 801fc82:	18d3      	adds	r3, r2, r3
 801fc84:	60fb      	str	r3, [r7, #12]
		ychange += 2;
 801fc86:	693b      	ldr	r3, [r7, #16]
 801fc88:	f103 0302 	add.w	r3, r3, #2
 801fc8c:	613b      	str	r3, [r7, #16]
		if ( 2*radiusError + xchange > 0 )
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	ea4f 0243 	mov.w	r2, r3, lsl #1
 801fc94:	697b      	ldr	r3, [r7, #20]
 801fc96:	18d3      	adds	r3, r2, r3
 801fc98:	2b00      	cmp	r3, #0
 801fc9a:	dd0b      	ble.n	801fcb4 <_ZN13CT6963CDriver6CircleEhhh+0x168>
		{
			x--;
 801fc9c:	69fb      	ldr	r3, [r7, #28]
 801fc9e:	f103 33ff 	add.w	r3, r3, #4294967295
 801fca2:	61fb      	str	r3, [r7, #28]
			radiusError += xchange;
 801fca4:	68fa      	ldr	r2, [r7, #12]
 801fca6:	697b      	ldr	r3, [r7, #20]
 801fca8:	18d3      	adds	r3, r2, r3
 801fcaa:	60fb      	str	r3, [r7, #12]
			xchange += 2;
 801fcac:	697b      	ldr	r3, [r7, #20]
 801fcae:	f103 0302 	add.w	r3, r3, #2
 801fcb2:	617b      	str	r3, [r7, #20]
	x = radius;
	y = 0;
	xchange = 1 - 2 * radius;
	ychange = 1;
	radiusError = 0;
	while(x >= y)
 801fcb4:	69fa      	ldr	r2, [r7, #28]
 801fcb6:	69bb      	ldr	r3, [r7, #24]
 801fcb8:	429a      	cmp	r2, r3
 801fcba:	bfb4      	ite	lt
 801fcbc:	2300      	movlt	r3, #0
 801fcbe:	2301      	movge	r3, #1
 801fcc0:	b2db      	uxtb	r3, r3
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	f47f af5f 	bne.w	801fb86 <_ZN13CT6963CDriver6CircleEhhh+0x3a>
			x--;
			radiusError += xchange;
			xchange += 2;
		}
	}
}
 801fcc8:	f107 0720 	add.w	r7, r7, #32
 801fccc:	46bd      	mov	sp, r7
 801fcce:	bd80      	pop	{r7, pc}

0801fcd0 <_ZN13CT6963CDriver6BitmapEPhhhhh>:
  * @brief  writes a bitmap to graphics ram
  * @param  coordinates, width and heigth
  * @retval None
  */
void CT6963CDriver::Bitmap(unsigned char * bitmap, unsigned char x, unsigned char y, unsigned char width, unsigned char height)
{
 801fcd0:	b580      	push	{r7, lr}
 801fcd2:	b086      	sub	sp, #24
 801fcd4:	af00      	add	r7, sp, #0
 801fcd6:	60f8      	str	r0, [r7, #12]
 801fcd8:	60b9      	str	r1, [r7, #8]
 801fcda:	71fa      	strb	r2, [r7, #7]
 801fcdc:	71bb      	strb	r3, [r7, #6]
	unsigned char i, j;

	for(j = 0; j < height; j++)
 801fcde:	f04f 0300 	mov.w	r3, #0
 801fce2:	75bb      	strb	r3, [r7, #22]
 801fce4:	e04f      	b.n	801fd86 <_ZN13CT6963CDriver6BitmapEPhhhhh+0xb6>
	{
		GraphicGoTo(x, y + j);
 801fce6:	79ba      	ldrb	r2, [r7, #6]
 801fce8:	7dbb      	ldrb	r3, [r7, #22]
 801fcea:	18d3      	adds	r3, r2, r3
 801fcec:	b2db      	uxtb	r3, r3
 801fcee:	79fa      	ldrb	r2, [r7, #7]
 801fcf0:	68f8      	ldr	r0, [r7, #12]
 801fcf2:	4611      	mov	r1, r2
 801fcf4:	461a      	mov	r2, r3
 801fcf6:	f7ff faef 	bl	801f2d8 <_ZN13CT6963CDriver11GraphicGoToEhh>
		for(i = 0; i < width/GLCD_FONT_WIDTH; i++)
 801fcfa:	f04f 0300 	mov.w	r3, #0
 801fcfe:	75fb      	strb	r3, [r7, #23]
 801fd00:	e030      	b.n	801fd64 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x94>
		{
			if(Inverse()){
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	4618      	mov	r0, r3
 801fd06:	f7ff f99b 	bl	801f040 <_ZN11CGraphicLCD7InverseEv>
 801fd0a:	4603      	mov	r3, r0
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d015      	beq.n	801fd3c <_ZN13CT6963CDriver6BitmapEPhhhhh+0x6c>
				WriteDisplayData(!bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
 801fd10:	7df9      	ldrb	r1, [r7, #23]
 801fd12:	7dba      	ldrb	r2, [r7, #22]
 801fd14:	4613      	mov	r3, r2
 801fd16:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801fd1a:	1a9b      	subs	r3, r3, r2
 801fd1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fd20:	18cb      	adds	r3, r1, r3
 801fd22:	68ba      	ldr	r2, [r7, #8]
 801fd24:	18d3      	adds	r3, r2, r3
 801fd26:	781b      	ldrb	r3, [r3, #0]
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	bf14      	ite	ne
 801fd2c:	2300      	movne	r3, #0
 801fd2e:	2301      	moveq	r3, #1
 801fd30:	b2db      	uxtb	r3, r3
 801fd32:	68f8      	ldr	r0, [r7, #12]
 801fd34:	4619      	mov	r1, r3
 801fd36:	f7ff fb2f 	bl	801f398 <_ZN13CT6963CDriver16WriteDisplayDataEh>
 801fd3a:	e00f      	b.n	801fd5c <_ZN13CT6963CDriver6BitmapEPhhhhh+0x8c>
			} else {
				WriteDisplayData(bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
 801fd3c:	7df9      	ldrb	r1, [r7, #23]
 801fd3e:	7dba      	ldrb	r2, [r7, #22]
 801fd40:	4613      	mov	r3, r2
 801fd42:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801fd46:	1a9b      	subs	r3, r3, r2
 801fd48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fd4c:	18cb      	adds	r3, r1, r3
 801fd4e:	68ba      	ldr	r2, [r7, #8]
 801fd50:	18d3      	adds	r3, r2, r3
 801fd52:	781b      	ldrb	r3, [r3, #0]
 801fd54:	68f8      	ldr	r0, [r7, #12]
 801fd56:	4619      	mov	r1, r3
 801fd58:	f7ff fb1e 	bl	801f398 <_ZN13CT6963CDriver16WriteDisplayDataEh>
	unsigned char i, j;

	for(j = 0; j < height; j++)
	{
		GraphicGoTo(x, y + j);
		for(i = 0; i < width/GLCD_FONT_WIDTH; i++)
 801fd5c:	7dfb      	ldrb	r3, [r7, #23]
 801fd5e:	f103 0301 	add.w	r3, r3, #1
 801fd62:	75fb      	strb	r3, [r7, #23]
 801fd64:	f897 3020 	ldrb.w	r3, [r7, #32]
 801fd68:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 801fd6c:	b2db      	uxtb	r3, r3
 801fd6e:	7dfa      	ldrb	r2, [r7, #23]
 801fd70:	429a      	cmp	r2, r3
 801fd72:	bf2c      	ite	cs
 801fd74:	2300      	movcs	r3, #0
 801fd76:	2301      	movcc	r3, #1
 801fd78:	b2db      	uxtb	r3, r3
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d1c1      	bne.n	801fd02 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x32>
  */
void CT6963CDriver::Bitmap(unsigned char * bitmap, unsigned char x, unsigned char y, unsigned char width, unsigned char height)
{
	unsigned char i, j;

	for(j = 0; j < height; j++)
 801fd7e:	7dbb      	ldrb	r3, [r7, #22]
 801fd80:	f103 0301 	add.w	r3, r3, #1
 801fd84:	75bb      	strb	r3, [r7, #22]
 801fd86:	7dba      	ldrb	r2, [r7, #22]
 801fd88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801fd8c:	429a      	cmp	r2, r3
 801fd8e:	bf2c      	ite	cs
 801fd90:	2300      	movcs	r3, #0
 801fd92:	2301      	movcc	r3, #1
 801fd94:	b2db      	uxtb	r3, r3
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d1a5      	bne.n	801fce6 <_ZN13CT6963CDriver6BitmapEPhhhhh+0x16>
			} else {
				WriteDisplayData(bitmap[i + (GLCD_GRAPHIC_AREA * j)]);
			}
		}
	}
}
 801fd9a:	f107 0718 	add.w	r7, r7, #24
 801fd9e:	46bd      	mov	sp, r7
 801fda0:	bd80      	pop	{r7, pc}
 801fda2:	bf00      	nop

0801fda4 <_ZN21CT6963_GPIO_InterfaceC1Ev>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/



CT6963_GPIO_Interface::CT6963_GPIO_Interface() {
 801fda4:	b580      	push	{r7, lr}
 801fda6:	b082      	sub	sp, #8
 801fda8:	af00      	add	r7, sp, #0
 801fdaa:	6078      	str	r0, [r7, #4]
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	4618      	mov	r0, r3
 801fdb0:	f7ff f960 	bl	801f074 <_ZN13CT6963CDriverC1Ev>
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	4a04      	ldr	r2, [pc, #16]	; (801fdc8 <_ZN21CT6963_GPIO_InterfaceC1Ev+0x24>)
 801fdb8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 801fdba:	687b      	ldr	r3, [r7, #4]
 801fdbc:	4618      	mov	r0, r3
 801fdbe:	f107 0708 	add.w	r7, r7, #8
 801fdc2:	46bd      	mov	sp, r7
 801fdc4:	bd80      	pop	{r7, pc}
 801fdc6:	bf00      	nop
 801fdc8:	08027018 	.word	0x08027018

0801fdcc <_ZN21CT6963_GPIO_InterfaceD1Ev>:

CT6963_GPIO_Interface::~CT6963_GPIO_Interface() {
 801fdcc:	b580      	push	{r7, lr}
 801fdce:	b082      	sub	sp, #8
 801fdd0:	af00      	add	r7, sp, #0
 801fdd2:	6078      	str	r0, [r7, #4]
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	4a0a      	ldr	r2, [pc, #40]	; (801fe00 <_ZN21CT6963_GPIO_InterfaceD1Ev+0x34>)
 801fdd8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801fdda:	6878      	ldr	r0, [r7, #4]
 801fddc:	f7ff f95e 	bl	801f09c <_ZN13CT6963CDriverD1Ev>
 801fde0:	f04f 0300 	mov.w	r3, #0
 801fde4:	f003 0301 	and.w	r3, r3, #1
 801fde8:	b2db      	uxtb	r3, r3
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d002      	beq.n	801fdf4 <_ZN21CT6963_GPIO_InterfaceD1Ev+0x28>
 801fdee:	6878      	ldr	r0, [r7, #4]
 801fdf0:	f004 fe1e 	bl	8024a30 <_ZdlPv>
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	4618      	mov	r0, r3
 801fdf8:	f107 0708 	add.w	r7, r7, #8
 801fdfc:	46bd      	mov	sp, r7
 801fdfe:	bd80      	pop	{r7, pc}
 801fe00:	08027018 	.word	0x08027018

0801fe04 <_ZN21CT6963_GPIO_InterfaceD0Ev>:
CT6963_GPIO_Interface::CT6963_GPIO_Interface() {
	// TODO Auto-generated constructor stub

}

CT6963_GPIO_Interface::~CT6963_GPIO_Interface() {
 801fe04:	b580      	push	{r7, lr}
 801fe06:	b082      	sub	sp, #8
 801fe08:	af00      	add	r7, sp, #0
 801fe0a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 801fe0c:	6878      	ldr	r0, [r7, #4]
 801fe0e:	f7ff ffdd 	bl	801fdcc <_ZN21CT6963_GPIO_InterfaceD1Ev>
 801fe12:	6878      	ldr	r0, [r7, #4]
 801fe14:	f004 fe0c 	bl	8024a30 <_ZdlPv>
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	4618      	mov	r0, r3
 801fe1c:	f107 0708 	add.w	r7, r7, #8
 801fe20:	46bd      	mov	sp, r7
 801fe22:	bd80      	pop	{r7, pc}

0801fe24 <_Z8delay_usj>:
/**
  * @brief  delay for us
  * @param  number of us
  * @retval None
  */
void delay_us(unsigned int us){
 801fe24:	b480      	push	{r7}
 801fe26:	b085      	sub	sp, #20
 801fe28:	af00      	add	r7, sp, #0
 801fe2a:	6078      	str	r0, [r7, #4]
	unsigned int i;

	for(i=0; i< (SystemCoreClock/1000000) * us; i++){
 801fe2c:	f04f 0300 	mov.w	r3, #0
 801fe30:	60fb      	str	r3, [r7, #12]
 801fe32:	e004      	b.n	801fe3e <_Z8delay_usj+0x1a>
		asm volatile ("nop");
 801fe34:	bf00      	nop
  * @retval None
  */
void delay_us(unsigned int us){
	unsigned int i;

	for(i=0; i< (SystemCoreClock/1000000) * us; i++){
 801fe36:	68fb      	ldr	r3, [r7, #12]
 801fe38:	f103 0301 	add.w	r3, r3, #1
 801fe3c:	60fb      	str	r3, [r7, #12]
 801fe3e:	f640 1330 	movw	r3, #2352	; 0x930
 801fe42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801fe46:	681a      	ldr	r2, [r3, #0]
 801fe48:	f64d 6383 	movw	r3, #56963	; 0xde83
 801fe4c:	f2c4 331b 	movt	r3, #17179	; 0x431b
 801fe50:	fba3 1302 	umull	r1, r3, r3, r2
 801fe54:	ea4f 4393 	mov.w	r3, r3, lsr #18
 801fe58:	687a      	ldr	r2, [r7, #4]
 801fe5a:	fb02 f203 	mul.w	r2, r2, r3
 801fe5e:	68fb      	ldr	r3, [r7, #12]
 801fe60:	429a      	cmp	r2, r3
 801fe62:	bf94      	ite	ls
 801fe64:	2300      	movls	r3, #0
 801fe66:	2301      	movhi	r3, #1
 801fe68:	b2db      	uxtb	r3, r3
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d1e2      	bne.n	801fe34 <_Z8delay_usj+0x10>
		asm volatile ("nop");
	}
}
 801fe6e:	f107 0714 	add.w	r7, r7, #20
 801fe72:	46bd      	mov	sp, r7
 801fe74:	bc80      	pop	{r7}
 801fe76:	4770      	bx	lr

0801fe78 <_Z11CheckStatusv>:
  * @brief  reads T6963C status byte
  * @param  None
  * @retval true for display ready
  */
bool CheckStatus(void)
{
 801fe78:	b580      	push	{r7, lr}
 801fe7a:	b082      	sub	sp, #8
 801fe7c:	af00      	add	r7, sp, #0

	uint16_t tmp;
	GLCD_DATA_INPUT;
 801fe7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801fe82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801fe86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801fe8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801fe8e:	6812      	ldr	r2, [r2, #0]
 801fe90:	ea4f 4202 	mov.w	r2, r2, lsl #16
 801fe94:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801fe98:	601a      	str	r2, [r3, #0]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD);
 801fe9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801fe9e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801fea2:	f04f 0120 	mov.w	r1, #32
 801fea6:	f7f4 fff7 	bl	8014e98 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 801feaa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801feae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801feb2:	f04f 0102 	mov.w	r1, #2
 801feb6:	f7f4 ffef 	bl	8014e98 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 801feba:	f04f 0005 	mov.w	r0, #5
 801febe:	f7ff ffb1 	bl	801fe24 <_Z8delay_usj>

	tmp = ((GPIO_ReadInputData(GLCD_DATA_PORT) & GLCD_DATA_PORT_MASK) >> GLCD_DATA_OFFSET);
 801fec2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801fec6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801feca:	f7f4 ff9d 	bl	8014e08 <GPIO_ReadInputData>
 801fece:	4603      	mov	r3, r0
 801fed0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801fed4:	80fb      	strh	r3, [r7, #6]

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 801fed6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801feda:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801fede:	f04f 0102 	mov.w	r1, #2
 801fee2:	f7f4 ffcb 	bl	8014e7c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_RD);GLCD_DATA_OUTPUT;
 801fee6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801feea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801feee:	f04f 0120 	mov.w	r1, #32
 801fef2:	f7f4 ffc3 	bl	8014e7c <GPIO_SetBits>
 801fef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801fefa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801fefe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ff02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801ff06:	6812      	ldr	r2, [r2, #0]
 801ff08:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 801ff0c:	f442 02aa 	orr.w	r2, r2, #5570560	; 0x550000
 801ff10:	601a      	str	r2, [r3, #0]

	delay_us(c_iDelayAfter);
 801ff12:	f04f 0003 	mov.w	r0, #3
 801ff16:	f7ff ff85 	bl	801fe24 <_Z8delay_usj>

	return ((tmp&0x03)==0x03);
 801ff1a:	88fb      	ldrh	r3, [r7, #6]
 801ff1c:	f003 0303 	and.w	r3, r3, #3
 801ff20:	2b03      	cmp	r3, #3
 801ff22:	bf14      	ite	ne
 801ff24:	2300      	movne	r3, #0
 801ff26:	2301      	moveq	r3, #1
 801ff28:	b2db      	uxtb	r3, r3
}
 801ff2a:	4618      	mov	r0, r3
 801ff2c:	f107 0708 	add.w	r7, r7, #8
 801ff30:	46bd      	mov	sp, r7
 801ff32:	bd80      	pop	{r7, pc}

0801ff34 <_ZN21CT6963_GPIO_Interface12HardwareInitEv>:
/**
  * @brief  initialize Hardware to drive the display
  * @param  None
  * @retval None
  */
void CT6963_GPIO_Interface::HardwareInit(void){
 801ff34:	b580      	push	{r7, lr}
 801ff36:	b084      	sub	sp, #16
 801ff38:	af00      	add	r7, sp, #0
 801ff3a:	6078      	str	r0, [r7, #4]


	GPIO_InitTypeDef GPIO_InitStructure;
	// activate Clock for Io Ports used
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
 801ff3c:	f04f 0002 	mov.w	r0, #2
 801ff40:	f04f 0101 	mov.w	r1, #1
 801ff44:	f7f7 f8aa 	bl	801709c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC , ENABLE);
 801ff48:	f04f 0004 	mov.w	r0, #4
 801ff4c:	f04f 0101 	mov.w	r1, #1
 801ff50:	f7f7 f8a4 	bl	801709c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE , ENABLE);
 801ff54:	f04f 0010 	mov.w	r0, #16
 801ff58:	f04f 0101 	mov.w	r1, #1
 801ff5c:	f7f7 f89e 	bl	801709c <RCC_AHB1PeriphClockCmd>

	// all pins as pp outputs with no pull
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801ff60:	f04f 0301 	mov.w	r3, #1
 801ff64:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801ff66:	f04f 0300 	mov.w	r3, #0
 801ff6a:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801ff6c:	f04f 0300 	mov.w	r3, #0
 801ff70:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 801ff72:	f04f 0301 	mov.w	r3, #1
 801ff76:	737b      	strb	r3, [r7, #13]

	//Control pins CD and RD
	GPIO_InitStructure.GPIO_Pin = GLCD_CD | GLCD_RD;
 801ff78:	f04f 0330 	mov.w	r3, #48	; 0x30
 801ff7c:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_CTRL_PORT_CD_RD,&GPIO_InitStructure);
 801ff7e:	f107 0308 	add.w	r3, r7, #8
 801ff82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801ff86:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ff8a:	4619      	mov	r1, r3
 801ff8c:	f7f4 fe34 	bl	8014bf8 <GPIO_Init>
	//Control pins WR, CE and RST
	GPIO_InitStructure.GPIO_Pin = GLCD_WR | GLCD_CE | GLCD_RESET;
 801ff90:	f640 0303 	movw	r3, #2051	; 0x803
 801ff94:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_CTRL_PORT_WR_CE,&GPIO_InitStructure);
 801ff96:	f107 0308 	add.w	r3, r7, #8
 801ff9a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801ff9e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ffa2:	4619      	mov	r1, r3
 801ffa4:	f7f4 fe28 	bl	8014bf8 <GPIO_Init>

	// data pins are high byte
	GPIO_InitStructure.GPIO_Pin = GLCD_DATA_PORT_MASK;
 801ffa8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 801ffac:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GLCD_DATA_PORT,&GPIO_InitStructure);
 801ffae:	f107 0308 	add.w	r3, r7, #8
 801ffb2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801ffb6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ffba:	4619      	mov	r1, r3
 801ffbc:	f7f4 fe1c 	bl	8014bf8 <GPIO_Init>

	//Set all Control pins to high level
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD | GLCD_RD);	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR | GLCD_CE );
 801ffc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801ffc4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ffc8:	f04f 0130 	mov.w	r1, #48	; 0x30
 801ffcc:	f7f4 ff56 	bl	8014e7c <GPIO_SetBits>
 801ffd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801ffd4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801ffd8:	f04f 0103 	mov.w	r1, #3
 801ffdc:	f7f4 ff4e 	bl	8014e7c <GPIO_SetBits>

}
 801ffe0:	f107 0710 	add.w	r7, r7, #16
 801ffe4:	46bd      	mov	sp, r7
 801ffe6:	bd80      	pop	{r7, pc}

0801ffe8 <_ZN21CT6963_GPIO_Interface5ResetEv>:
/**
  * @brief  Reset the Display
  * @param  None
  * @retval None
  */
void CT6963_GPIO_Interface::Reset(void){
 801ffe8:	b580      	push	{r7, lr}
 801ffea:	b082      	sub	sp, #8
 801ffec:	af00      	add	r7, sp, #0
 801ffee:	6078      	str	r0, [r7, #4]

	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_RESET | GLCD_CE );
 801fff0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801fff4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801fff8:	f640 0102 	movw	r1, #2050	; 0x802
 801fffc:	f7f4 ff4c 	bl	8014e98 <GPIO_ResetBits>

	vTaskDelay(20);  // sleep 20 ms
 8020000:	f04f 0014 	mov.w	r0, #20
 8020004:	f002 fd18 	bl	8022a38 <vTaskDelay>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_RESET | GLCD_CE );
 8020008:	f44f 6080 	mov.w	r0, #1024	; 0x400
 802000c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8020010:	f640 0102 	movw	r1, #2050	; 0x802
 8020014:	f7f4 ff32 	bl	8014e7c <GPIO_SetBits>

}
 8020018:	f107 0708 	add.w	r7, r7, #8
 802001c:	46bd      	mov	sp, r7
 802001e:	bd80      	pop	{r7, pc}

08020020 <_ZN21CT6963_GPIO_Interface12WriteCommandEh>:
/**
  * @brief  writes a command
  * @param  command
  * @retval None
  */
void CT6963_GPIO_Interface::WriteCommand(const unsigned char command){
 8020020:	b580      	push	{r7, lr}
 8020022:	b082      	sub	sp, #8
 8020024:	af00      	add	r7, sp, #0
 8020026:	6078      	str	r0, [r7, #4]
 8020028:	460b      	mov	r3, r1
 802002a:	70fb      	strb	r3, [r7, #3]

	while(!CheckStatus());
 802002c:	bf00      	nop
 802002e:	f7ff ff23 	bl	801fe78 <_Z11CheckStatusv>
 8020032:	4603      	mov	r3, r0
 8020034:	f083 0301 	eor.w	r3, r3, #1
 8020038:	b2db      	uxtb	r3, r3
 802003a:	2b00      	cmp	r3, #0
 802003c:	d1f7      	bne.n	802002e <_ZN21CT6963_GPIO_Interface12WriteCommandEh+0xe>

	GLCD_DATA_PORT->ODR &= ~GLCD_DATA_PORT_MASK;  //Clear Data pins
 802003e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020042:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8020046:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802004a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 802004e:	6952      	ldr	r2, [r2, #20]
 8020050:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8020054:	615a      	str	r2, [r3, #20]
	GLCD_DATA_PORT->ODR |= (command << (GLCD_DATA_OFFSET)); // lowbyte will stay as is in this write
 8020056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802005a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802005e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020062:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8020066:	6952      	ldr	r2, [r2, #20]
 8020068:	4611      	mov	r1, r2
 802006a:	78fa      	ldrb	r2, [r7, #3]
 802006c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020070:	430a      	orrs	r2, r1
 8020072:	615a      	str	r2, [r3, #20]

	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8020074:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8020078:	f2c4 0002 	movt	r0, #16386	; 0x4002
 802007c:	f04f 0101 	mov.w	r1, #1
 8020080:	f7f4 ff0a 	bl	8014e98 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8020084:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8020088:	f2c4 0002 	movt	r0, #16386	; 0x4002
 802008c:	f04f 0102 	mov.w	r1, #2
 8020090:	f7f4 ff02 	bl	8014e98 <GPIO_ResetBits>

	delay_us(c_iDelayFore);   // time for display to read the data
 8020094:	f04f 0005 	mov.w	r0, #5
 8020098:	f7ff fec4 	bl	801fe24 <_Z8delay_usj>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 802009c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80200a0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80200a4:	f04f 0102 	mov.w	r1, #2
 80200a8:	f7f4 fee8 	bl	8014e7c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 80200ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80200b0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80200b4:	f04f 0101 	mov.w	r1, #1
 80200b8:	f7f4 fee0 	bl	8014e7c <GPIO_SetBits>


	delay_us(c_iDelayAfter);
 80200bc:	f04f 0003 	mov.w	r0, #3
 80200c0:	f7ff feb0 	bl	801fe24 <_Z8delay_usj>
}
 80200c4:	f107 0708 	add.w	r7, r7, #8
 80200c8:	46bd      	mov	sp, r7
 80200ca:	bd80      	pop	{r7, pc}

080200cc <_ZN21CT6963_GPIO_Interface9WriteDataEh>:
/**
  * @brief  writes a data
  * @param  data
  * @retval None
  */
void CT6963_GPIO_Interface::WriteData(const unsigned char data){
 80200cc:	b580      	push	{r7, lr}
 80200ce:	b082      	sub	sp, #8
 80200d0:	af00      	add	r7, sp, #0
 80200d2:	6078      	str	r0, [r7, #4]
 80200d4:	460b      	mov	r3, r1
 80200d6:	70fb      	strb	r3, [r7, #3]
	while(!CheckStatus());
 80200d8:	bf00      	nop
 80200da:	f7ff fecd 	bl	801fe78 <_Z11CheckStatusv>
 80200de:	4603      	mov	r3, r0
 80200e0:	f083 0301 	eor.w	r3, r3, #1
 80200e4:	b2db      	uxtb	r3, r3
 80200e6:	2b00      	cmp	r3, #0
 80200e8:	d1f7      	bne.n	80200da <_ZN21CT6963_GPIO_Interface9WriteDataEh+0xe>

	GLCD_DATA_PORT->ODR &= ~GLCD_DATA_PORT_MASK;  //Clear Data pins
 80200ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80200ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80200f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80200f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80200fa:	6952      	ldr	r2, [r2, #20]
 80200fc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8020100:	615a      	str	r2, [r3, #20]
	GLCD_DATA_PORT->ODR |= ((uint16_t)data << GLCD_DATA_OFFSET); // lowbyte will stay as is in this write
 8020102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020106:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802010a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802010e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8020112:	6952      	ldr	r2, [r2, #20]
 8020114:	4611      	mov	r1, r2
 8020116:	78fa      	ldrb	r2, [r7, #3]
 8020118:	ea4f 2202 	mov.w	r2, r2, lsl #8
 802011c:	430a      	orrs	r2, r1
 802011e:	615a      	str	r2, [r3, #20]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD);
 8020120:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8020124:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8020128:	f04f 0110 	mov.w	r1, #16
 802012c:	f7f4 feb4 	bl	8014e98 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8020130:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8020134:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8020138:	f04f 0101 	mov.w	r1, #1
 802013c:	f7f4 feac 	bl	8014e98 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8020140:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8020144:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8020148:	f04f 0102 	mov.w	r1, #2
 802014c:	f7f4 fea4 	bl	8014e98 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 8020150:	f04f 0005 	mov.w	r0, #5
 8020154:	f7ff fe66 	bl	801fe24 <_Z8delay_usj>

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE);
 8020158:	f44f 6080 	mov.w	r0, #1024	; 0x400
 802015c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8020160:	f04f 0102 	mov.w	r1, #2
 8020164:	f7f4 fe8a 	bl	8014e7c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD);
 8020168:	f44f 6000 	mov.w	r0, #2048	; 0x800
 802016c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8020170:	f04f 0110 	mov.w	r1, #16
 8020174:	f7f4 fe82 	bl	8014e7c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_WR);
 8020178:	f44f 6080 	mov.w	r0, #1024	; 0x400
 802017c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8020180:	f04f 0101 	mov.w	r1, #1
 8020184:	f7f4 fe7a 	bl	8014e7c <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 8020188:	f04f 0003 	mov.w	r0, #3
 802018c:	f7ff fe4a 	bl	801fe24 <_Z8delay_usj>
}
 8020190:	f107 0708 	add.w	r7, r7, #8
 8020194:	46bd      	mov	sp, r7
 8020196:	bd80      	pop	{r7, pc}

08020198 <_ZN21CT6963_GPIO_Interface8ReadDataEv>:
/**
  * @brief  reads data from display
  * @param  None
  * @retval data from display
  */
unsigned char CT6963_GPIO_Interface::ReadData(){
 8020198:	b580      	push	{r7, lr}
 802019a:	b084      	sub	sp, #16
 802019c:	af00      	add	r7, sp, #0
 802019e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	while(!CheckStatus());
 80201a0:	bf00      	nop
 80201a2:	f7ff fe69 	bl	801fe78 <_Z11CheckStatusv>
 80201a6:	4603      	mov	r3, r0
 80201a8:	f083 0301 	eor.w	r3, r3, #1
 80201ac:	b2db      	uxtb	r3, r3
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	d1f7      	bne.n	80201a2 <_ZN21CT6963_GPIO_Interface8ReadDataEv+0xa>

	GLCD_DATA_INPUT;
 80201b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80201b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80201ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80201be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80201c2:	6812      	ldr	r2, [r2, #0]
 80201c4:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80201c8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80201cc:	601a      	str	r2, [r3, #0]

	GPIO_ResetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD | GLCD_RD);
 80201ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80201d2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80201d6:	f04f 0130 	mov.w	r1, #48	; 0x30
 80201da:	f7f4 fe5d 	bl	8014e98 <GPIO_ResetBits>
	GPIO_ResetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE );
 80201de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80201e2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80201e6:	f04f 0102 	mov.w	r1, #2
 80201ea:	f7f4 fe55 	bl	8014e98 <GPIO_ResetBits>

	delay_us(c_iDelayFore);
 80201ee:	f04f 0005 	mov.w	r0, #5
 80201f2:	f7ff fe17 	bl	801fe24 <_Z8delay_usj>

	tmp = ((GPIO_ReadInputData(GLCD_DATA_PORT) & GLCD_DATA_PORT_MASK) >> GLCD_DATA_OFFSET);
 80201f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80201fa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80201fe:	f7f4 fe03 	bl	8014e08 <GPIO_ReadInputData>
 8020202:	4603      	mov	r3, r0
 8020204:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8020208:	81fb      	strh	r3, [r7, #14]

	GPIO_SetBits(GLCD_CTRL_PORT_WR_CE , GLCD_CE );
 802020a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 802020e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8020212:	f04f 0102 	mov.w	r1, #2
 8020216:	f7f4 fe31 	bl	8014e7c <GPIO_SetBits>
	GPIO_SetBits(GLCD_CTRL_PORT_CD_RD , GLCD_CD | GLCD_RD);
 802021a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 802021e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8020222:	f04f 0130 	mov.w	r1, #48	; 0x30
 8020226:	f7f4 fe29 	bl	8014e7c <GPIO_SetBits>

	delay_us(c_iDelayAfter);
 802022a:	f04f 0003 	mov.w	r0, #3
 802022e:	f7ff fdf9 	bl	801fe24 <_Z8delay_usj>

	GLCD_DATA_OUTPUT;
 8020232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020236:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802023a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802023e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8020242:	6812      	ldr	r2, [r2, #0]
 8020244:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 8020248:	f442 02aa 	orr.w	r2, r2, #5570560	; 0x550000
 802024c:	601a      	str	r2, [r3, #0]
	return (unsigned char)tmp;
 802024e:	89fb      	ldrh	r3, [r7, #14]
 8020250:	b2db      	uxtb	r3, r3
}
 8020252:	4618      	mov	r0, r3
 8020254:	f107 0710 	add.w	r7, r7, #16
 8020258:	46bd      	mov	sp, r7
 802025a:	bd80      	pop	{r7, pc}

0802025c <_ZN5CTask13EnterCriticalEv>:
    inline static void Yeld() { taskYIELD(); }

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskENTER_CRITICAL">taskENTER_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void EnterCritical() { taskENTER_CRITICAL(); }
 802025c:	b580      	push	{r7, lr}
 802025e:	af00      	add	r7, sp, #0
 8020260:	f001 fa3a 	bl	80216d8 <vPortEnterCritical>
 8020264:	bd80      	pop	{r7, pc}
 8020266:	bf00      	nop

08020268 <_ZN5CTask12ExitCriticalEv>:

    /**
     * \sa <a href="http://www.freertos.org/a00020.html#taskEXIT_CRITICAL">taskEXIT_CRITICAL</a>  FreeRTOS API function.
     */
    inline static void ExitCritical() { taskEXIT_CRITICAL(); }
 8020268:	b580      	push	{r7, lr}
 802026a:	af00      	add	r7, sp, #0
 802026c:	f001 fa4a 	bl	8021704 <vPortExitCritical>
 8020270:	bd80      	pop	{r7, pc}
 8020272:	bf00      	nop

08020274 <_ZN12AManagedTask12HardwareInitEv>:
	 * The framework calls this function before the scheduler start. The default implementation simply return true.
	 * Override this method to perform task specific hardware initialization that does not use FreeRTOS API.
	 *
	 * @return true if success, false otherwise.
	 */
	virtual bool HardwareInit() { return true; }
 8020274:	b480      	push	{r7}
 8020276:	b083      	sub	sp, #12
 8020278:	af00      	add	r7, sp, #0
 802027a:	6078      	str	r0, [r7, #4]
 802027c:	f04f 0301 	mov.w	r3, #1
 8020280:	4618      	mov	r0, r3
 8020282:	f107 070c 	add.w	r7, r7, #12
 8020286:	46bd      	mov	sp, r7
 8020288:	bc80      	pop	{r7}
 802028a:	4770      	bx	lr

0802028c <_ZN9CFreeRTOS15SuspendAllTasksEv>:
	static void EndScheduler() { vTaskEndScheduler(); }

	/**
	 * \sa <a href="http://www.freertos.org/a00134.html">vTaskSuspendAll</a> FreeRTOS API function.
	 */
	static void SuspendAllTasks() { vTaskSuspendAll(); }
 802028c:	b580      	push	{r7, lr}
 802028e:	af00      	add	r7, sp, #0
 8020290:	f002 fe3e 	bl	8022f10 <vTaskSuspendAll>
 8020294:	bd80      	pop	{r7, pc}
 8020296:	bf00      	nop

08020298 <_ZN9CFreeRTOS14ResumeAllTasksEv>:

	/**
	 * \sa <a href="http://www.freertos.org/a00135.html">xTaskResumeAll</a> FreeRTOS API function.
	 */
	static signed portBASE_TYPE ResumeAllTasks() { return xTaskResumeAll(); }
 8020298:	b580      	push	{r7, lr}
 802029a:	af00      	add	r7, sp, #0
 802029c:	f002 fe4a 	bl	8022f34 <xTaskResumeAll>
 80202a0:	4603      	mov	r3, r0
 80202a2:	4618      	mov	r0, r3
 80202a4:	bd80      	pop	{r7, pc}
 80202a6:	bf00      	nop

080202a8 <_ZN12AManagedTaskC1Ev>:
#include "AManagedTask.h"
#include "CFreeRTOS.h"

AManagedTask* AManagedTask::s_pManagedTaskListHead = NULL;

AManagedTask::AManagedTask() {
 80202a8:	b580      	push	{r7, lr}
 80202aa:	b082      	sub	sp, #8
 80202ac:	af00      	add	r7, sp, #0
 80202ae:	6078      	str	r0, [r7, #4]
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	4618      	mov	r0, r3
 80202b4:	f001 f8a6 	bl	8021404 <_ZN5CTaskC1Ev>
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	4a08      	ldr	r2, [pc, #32]	; (80202dc <_ZN12AManagedTaskC1Ev+0x34>)
 80202bc:	601a      	str	r2, [r3, #0]
	m_pNextManagedTask = NULL;
 80202be:	687b      	ldr	r3, [r7, #4]
 80202c0:	f04f 0200 	mov.w	r2, #0
 80202c4:	609a      	str	r2, [r3, #8]
	AddToManagedTask(this);
 80202c6:	6878      	ldr	r0, [r7, #4]
 80202c8:	6879      	ldr	r1, [r7, #4]
 80202ca:	f000 f87b 	bl	80203c4 <_ZN12AManagedTask16AddToManagedTaskEPS_>
}
 80202ce:	687b      	ldr	r3, [r7, #4]
 80202d0:	4618      	mov	r0, r3
 80202d2:	f107 0708 	add.w	r7, r7, #8
 80202d6:	46bd      	mov	sp, r7
 80202d8:	bd80      	pop	{r7, pc}
 80202da:	bf00      	nop
 80202dc:	08027ea8 	.word	0x08027ea8

080202e0 <_ZN12AManagedTaskD1Ev>:

AManagedTask::~AManagedTask() {
 80202e0:	b580      	push	{r7, lr}
 80202e2:	b082      	sub	sp, #8
 80202e4:	af00      	add	r7, sp, #0
 80202e6:	6078      	str	r0, [r7, #4]
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	4a0c      	ldr	r2, [pc, #48]	; (802031c <_ZN12AManagedTaskD1Ev+0x3c>)
 80202ec:	601a      	str	r2, [r3, #0]
	RemoveFromManagedTask(this);
 80202ee:	6878      	ldr	r0, [r7, #4]
 80202f0:	6879      	ldr	r1, [r7, #4]
 80202f2:	f000 f88f 	bl	8020414 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>
}
 80202f6:	6878      	ldr	r0, [r7, #4]
 80202f8:	f001 f8b4 	bl	8021464 <_ZN5CTaskD1Ev>
 80202fc:	f04f 0300 	mov.w	r3, #0
 8020300:	f003 0301 	and.w	r3, r3, #1
 8020304:	b2db      	uxtb	r3, r3
 8020306:	2b00      	cmp	r3, #0
 8020308:	d002      	beq.n	8020310 <_ZN12AManagedTaskD1Ev+0x30>
 802030a:	6878      	ldr	r0, [r7, #4]
 802030c:	f004 fb90 	bl	8024a30 <_ZdlPv>
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	4618      	mov	r0, r3
 8020314:	f107 0708 	add.w	r7, r7, #8
 8020318:	46bd      	mov	sp, r7
 802031a:	bd80      	pop	{r7, pc}
 802031c:	08027ea8 	.word	0x08027ea8

08020320 <_ZN12AManagedTaskD0Ev>:
AManagedTask::AManagedTask() {
	m_pNextManagedTask = NULL;
	AddToManagedTask(this);
}

AManagedTask::~AManagedTask() {
 8020320:	b580      	push	{r7, lr}
 8020322:	b082      	sub	sp, #8
 8020324:	af00      	add	r7, sp, #0
 8020326:	6078      	str	r0, [r7, #4]
	RemoveFromManagedTask(this);
}
 8020328:	6878      	ldr	r0, [r7, #4]
 802032a:	f7ff ffd9 	bl	80202e0 <_ZN12AManagedTaskD1Ev>
 802032e:	6878      	ldr	r0, [r7, #4]
 8020330:	f004 fb7e 	bl	8024a30 <_ZdlPv>
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	4618      	mov	r0, r3
 8020338:	f107 0708 	add.w	r7, r7, #8
 802033c:	46bd      	mov	sp, r7
 802033e:	bd80      	pop	{r7, pc}

08020340 <_ZN12AManagedTask6CreateEPKctm>:

portBASE_TYPE AManagedTask::Create(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) {
 8020340:	b590      	push	{r4, r7, lr}
 8020342:	b087      	sub	sp, #28
 8020344:	af02      	add	r7, sp, #8
 8020346:	60f8      	str	r0, [r7, #12]
 8020348:	60b9      	str	r1, [r7, #8]
 802034a:	603b      	str	r3, [r7, #0]
 802034c:	4613      	mov	r3, r2
 802034e:	80fb      	strh	r3, [r7, #6]
	return OnCreate(pcName, usStackDepth, uxPriority) &&
 8020350:	68fb      	ldr	r3, [r7, #12]
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	f103 031c 	add.w	r3, r3, #28
 8020358:	681c      	ldr	r4, [r3, #0]
 802035a:	88fb      	ldrh	r3, [r7, #6]
 802035c:	68f8      	ldr	r0, [r7, #12]
 802035e:	68b9      	ldr	r1, [r7, #8]
 8020360:	461a      	mov	r2, r3
 8020362:	683b      	ldr	r3, [r7, #0]
 8020364:	47a0      	blx	r4
 8020366:	4603      	mov	r3, r0
			CTask::Create(AManagedTask::taskControlFunc, pcName, usStackDepth, this, uxPriority);
 8020368:	2b00      	cmp	r3, #0
 802036a:	d013      	beq.n	8020394 <_ZN12AManagedTask6CreateEPKctm+0x54>
 802036c:	68fa      	ldr	r2, [r7, #12]
 802036e:	88fb      	ldrh	r3, [r7, #6]
 8020370:	68f9      	ldr	r1, [r7, #12]
 8020372:	9100      	str	r1, [sp, #0]
 8020374:	6839      	ldr	r1, [r7, #0]
 8020376:	9101      	str	r1, [sp, #4]
 8020378:	4610      	mov	r0, r2
 802037a:	f240 31a5 	movw	r1, #933	; 0x3a5
 802037e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8020382:	68ba      	ldr	r2, [r7, #8]
 8020384:	f001 f8ca 	bl	802151c <_ZN5CTask6CreateEPFvPvEPKctS0_m>
 8020388:	4603      	mov	r3, r0
 802038a:	2b00      	cmp	r3, #0
 802038c:	d002      	beq.n	8020394 <_ZN12AManagedTask6CreateEPKctm+0x54>
 802038e:	f04f 0301 	mov.w	r3, #1
 8020392:	e001      	b.n	8020398 <_ZN12AManagedTask6CreateEPKctm+0x58>
 8020394:	f04f 0300 	mov.w	r3, #0
}
 8020398:	4618      	mov	r0, r3
 802039a:	f107 0714 	add.w	r7, r7, #20
 802039e:	46bd      	mov	sp, r7
 80203a0:	bd90      	pop	{r4, r7, pc}
 80203a2:	bf00      	nop

080203a4 <_ZN12AManagedTask15taskControlFuncEPv>:

void AManagedTask::taskControlFunc(void *pParams) {
 80203a4:	b580      	push	{r7, lr}
 80203a6:	b082      	sub	sp, #8
 80203a8:	af00      	add	r7, sp, #0
 80203aa:	6078      	str	r0, [r7, #4]
	static_cast<AManagedTask *>(pParams)->Run();
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	681b      	ldr	r3, [r3, #0]
 80203b0:	f103 0318 	add.w	r3, r3, #24
 80203b4:	681b      	ldr	r3, [r3, #0]
 80203b6:	6878      	ldr	r0, [r7, #4]
 80203b8:	4798      	blx	r3
}
 80203ba:	f107 0708 	add.w	r7, r7, #8
 80203be:	46bd      	mov	sp, r7
 80203c0:	bd80      	pop	{r7, pc}
 80203c2:	bf00      	nop

080203c4 <_ZN12AManagedTask16AddToManagedTaskEPS_>:

void AManagedTask::AddToManagedTask(AManagedTask *pTaskToAdd) {
 80203c4:	b580      	push	{r7, lr}
 80203c6:	b082      	sub	sp, #8
 80203c8:	af00      	add	r7, sp, #0
 80203ca:	6078      	str	r0, [r7, #4]
 80203cc:	6039      	str	r1, [r7, #0]
	EnterCritical();
 80203ce:	f7ff ff45 	bl	802025c <_ZN5CTask13EnterCriticalEv>
	// is the first element?
	if (s_pManagedTaskListHead == NULL) {
 80203d2:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80203d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80203da:	681b      	ldr	r3, [r3, #0]
 80203dc:	2b00      	cmp	r3, #0
 80203de:	d106      	bne.n	80203ee <_ZN12AManagedTask16AddToManagedTaskEPS_+0x2a>
		s_pManagedTaskListHead = this;
 80203e0:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80203e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80203e8:	687a      	ldr	r2, [r7, #4]
 80203ea:	601a      	str	r2, [r3, #0]
 80203ec:	e00c      	b.n	8020408 <_ZN12AManagedTask16AddToManagedTaskEPS_+0x44>
	}
	else {
		// add the task to the head of the managed task list.
		m_pNextManagedTask = s_pManagedTaskListHead;
 80203ee:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80203f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80203f6:	681a      	ldr	r2, [r3, #0]
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	609a      	str	r2, [r3, #8]
		s_pManagedTaskListHead = this;
 80203fc:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8020400:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8020404:	687a      	ldr	r2, [r7, #4]
 8020406:	601a      	str	r2, [r3, #0]
	}
	ExitCritical();
 8020408:	f7ff ff2e 	bl	8020268 <_ZN5CTask12ExitCriticalEv>
}
 802040c:	f107 0708 	add.w	r7, r7, #8
 8020410:	46bd      	mov	sp, r7
 8020412:	bd80      	pop	{r7, pc}

08020414 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_>:

void AManagedTask::RemoveFromManagedTask(AManagedTask *pTaskToRemove) {
 8020414:	b580      	push	{r7, lr}
 8020416:	b084      	sub	sp, #16
 8020418:	af00      	add	r7, sp, #0
 802041a:	6078      	str	r0, [r7, #4]
 802041c:	6039      	str	r1, [r7, #0]
	// search for the task to remove in the managed task list
	// is it the first element?
	EnterCritical();
 802041e:	f7ff ff1d 	bl	802025c <_ZN5CTask13EnterCriticalEv>
	if (pTaskToRemove == s_pManagedTaskListHead) {
 8020422:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8020426:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802042a:	681b      	ldr	r3, [r3, #0]
 802042c:	683a      	ldr	r2, [r7, #0]
 802042e:	429a      	cmp	r2, r3
 8020430:	d109      	bne.n	8020446 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x32>
		s_pManagedTaskListHead = pTaskToRemove->m_pNextManagedTask;
 8020432:	683b      	ldr	r3, [r7, #0]
 8020434:	689a      	ldr	r2, [r3, #8]
 8020436:	f640 13b4 	movw	r3, #2484	; 0x9b4
 802043a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802043e:	601a      	str	r2, [r3, #0]
		ExitCritical();
 8020440:	f7ff ff12 	bl	8020268 <_ZN5CTask12ExitCriticalEv>
 8020444:	e025      	b.n	8020492 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7e>
	}
	else {
		ExitCritical();
 8020446:	f7ff ff0f 	bl	8020268 <_ZN5CTask12ExitCriticalEv>
		CFreeRTOS::SuspendAllTasks();
 802044a:	f7ff ff1f 	bl	802028c <_ZN9CFreeRTOS15SuspendAllTasksEv>
		AManagedTask *pTask = s_pManagedTaskListHead;
 802044e:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8020452:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8020456:	681b      	ldr	r3, [r3, #0]
 8020458:	60fb      	str	r3, [r7, #12]
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 802045a:	e002      	b.n	8020462 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x4e>
			pTask = pTask->m_pNextManagedTask;
 802045c:	68fb      	ldr	r3, [r7, #12]
 802045e:	689b      	ldr	r3, [r3, #8]
 8020460:	60fb      	str	r3, [r7, #12]
	}
	else {
		ExitCritical();
		CFreeRTOS::SuspendAllTasks();
		AManagedTask *pTask = s_pManagedTaskListHead;
		while (pTask != NULL && pTask->m_pNextManagedTask != pTaskToRemove) {
 8020462:	68fb      	ldr	r3, [r7, #12]
 8020464:	2b00      	cmp	r3, #0
 8020466:	d007      	beq.n	8020478 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 8020468:	68fb      	ldr	r3, [r7, #12]
 802046a:	689a      	ldr	r2, [r3, #8]
 802046c:	683b      	ldr	r3, [r7, #0]
 802046e:	429a      	cmp	r2, r3
 8020470:	d002      	beq.n	8020478 <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x64>
 8020472:	f04f 0301 	mov.w	r3, #1
 8020476:	e001      	b.n	802047c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x68>
 8020478:	f04f 0300 	mov.w	r3, #0
 802047c:	2b00      	cmp	r3, #0
 802047e:	d1ed      	bne.n	802045c <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x48>
			pTask = pTask->m_pNextManagedTask;
		}
		if (pTask != NULL) { // Check to be sure that the task is in the list
 8020480:	68fb      	ldr	r3, [r7, #12]
 8020482:	2b00      	cmp	r3, #0
 8020484:	d003      	beq.n	802048e <_ZN12AManagedTask21RemoveFromManagedTaskEPS_+0x7a>
			// remove the thask from the list
			pTask->m_pNextManagedTask = pTaskToRemove->m_pNextManagedTask;
 8020486:	683b      	ldr	r3, [r7, #0]
 8020488:	689a      	ldr	r2, [r3, #8]
 802048a:	68fb      	ldr	r3, [r7, #12]
 802048c:	609a      	str	r2, [r3, #8]
		}
		CFreeRTOS::ResumeAllTasks();
 802048e:	f7ff ff03 	bl	8020298 <_ZN9CFreeRTOS14ResumeAllTasksEv>
	}
}
 8020492:	f107 0710 	add.w	r7, r7, #16
 8020496:	46bd      	mov	sp, r7
 8020498:	bd80      	pop	{r7, pc}
 802049a:	bf00      	nop

0802049c <_ZN12AManagedTask27InitHardwareForManagedTasksEv>:

bool AManagedTask::InitHardwareForManagedTasks() {
 802049c:	b590      	push	{r4, r7, lr}
 802049e:	b083      	sub	sp, #12
 80204a0:	af00      	add	r7, sp, #0
	bool bRes = true;
 80204a2:	f04f 0301 	mov.w	r3, #1
 80204a6:	71fb      	strb	r3, [r7, #7]
	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 80204a8:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80204ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80204b0:	681b      	ldr	r3, [r3, #0]
 80204b2:	603b      	str	r3, [r7, #0]
 80204b4:	e011      	b.n	80204da <_ZN12AManagedTask27InitHardwareForManagedTasksEv+0x3e>
		bRes &= pTask->HardwareInit();
 80204b6:	79fc      	ldrb	r4, [r7, #7]
 80204b8:	683b      	ldr	r3, [r7, #0]
 80204ba:	681b      	ldr	r3, [r3, #0]
 80204bc:	f103 0314 	add.w	r3, r3, #20
 80204c0:	681b      	ldr	r3, [r3, #0]
 80204c2:	6838      	ldr	r0, [r7, #0]
 80204c4:	4798      	blx	r3
 80204c6:	4603      	mov	r3, r0
 80204c8:	4023      	ands	r3, r4
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	bf0c      	ite	eq
 80204ce:	2300      	moveq	r3, #0
 80204d0:	2301      	movne	r3, #1
 80204d2:	71fb      	strb	r3, [r7, #7]
	}
}

bool AManagedTask::InitHardwareForManagedTasks() {
	bool bRes = true;
	for (AManagedTask *pTask=s_pManagedTaskListHead; pTask!=NULL; pTask=pTask->m_pNextManagedTask)
 80204d4:	683b      	ldr	r3, [r7, #0]
 80204d6:	689b      	ldr	r3, [r3, #8]
 80204d8:	603b      	str	r3, [r7, #0]
 80204da:	683b      	ldr	r3, [r7, #0]
 80204dc:	2b00      	cmp	r3, #0
 80204de:	bf0c      	ite	eq
 80204e0:	2300      	moveq	r3, #0
 80204e2:	2301      	movne	r3, #1
 80204e4:	b2db      	uxtb	r3, r3
 80204e6:	2b00      	cmp	r3, #0
 80204e8:	d1e5      	bne.n	80204b6 <_ZN12AManagedTask27InitHardwareForManagedTasksEv+0x1a>
		bRes &= pTask->HardwareInit();

	return bRes;
 80204ea:	79fb      	ldrb	r3, [r7, #7]
}
 80204ec:	4618      	mov	r0, r3
 80204ee:	f107 070c 	add.w	r7, r7, #12
 80204f2:	46bd      	mov	sp, r7
 80204f4:	bd90      	pop	{r4, r7, pc}
 80204f6:	bf00      	nop

080204f8 <_ZNK11ASyncObject7IsValidEv>:
};

// inline method

inline
bool ASyncObject::IsValid() const {
 80204f8:	b480      	push	{r7}
 80204fa:	b083      	sub	sp, #12
 80204fc:	af00      	add	r7, sp, #0
 80204fe:	6078      	str	r0, [r7, #4]
	return m_handleSemaphore != NULL;
 8020500:	687b      	ldr	r3, [r7, #4]
 8020502:	685b      	ldr	r3, [r3, #4]
 8020504:	2b00      	cmp	r3, #0
 8020506:	bf0c      	ite	eq
 8020508:	2300      	moveq	r3, #0
 802050a:	2301      	movne	r3, #1
 802050c:	b2db      	uxtb	r3, r3
}
 802050e:	4618      	mov	r0, r3
 8020510:	f107 070c 	add.w	r7, r7, #12
 8020514:	46bd      	mov	sp, r7
 8020516:	bc80      	pop	{r7}
 8020518:	4770      	bx	lr
 802051a:	bf00      	nop

0802051c <_ZN11ASyncObject6DetachEv>:

inline
xGenericHandle ASyncObject::Detach() {
 802051c:	b480      	push	{r7}
 802051e:	b085      	sub	sp, #20
 8020520:	af00      	add	r7, sp, #0
 8020522:	6078      	str	r0, [r7, #4]
	xSemaphoreHandle res = m_handleSemaphore;
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	685b      	ldr	r3, [r3, #4]
 8020528:	60fb      	str	r3, [r7, #12]
	m_handleSemaphore = NULL;
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	f04f 0200 	mov.w	r2, #0
 8020530:	605a      	str	r2, [r3, #4]
	return res;
 8020532:	68fb      	ldr	r3, [r7, #12]
}
 8020534:	4618      	mov	r0, r3
 8020536:	f107 0714 	add.w	r7, r7, #20
 802053a:	46bd      	mov	sp, r7
 802053c:	bc80      	pop	{r7}
 802053e:	4770      	bx	lr

08020540 <_ZN12IFreeRTOSObjC1Ev>:
#ifndef IFREERTOSPROTOCOL_H_
#define IFREERTOSPROTOCOL_H_

typedef void *xGenericHandle;

class IFreeRTOSObj {
 8020540:	b480      	push	{r7}
 8020542:	b083      	sub	sp, #12
 8020544:	af00      	add	r7, sp, #0
 8020546:	6078      	str	r0, [r7, #4]
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	4a04      	ldr	r2, [pc, #16]	; (802055c <_ZN12IFreeRTOSObjC1Ev+0x1c>)
 802054c:	601a      	str	r2, [r3, #0]
 802054e:	687b      	ldr	r3, [r7, #4]
 8020550:	4618      	mov	r0, r3
 8020552:	f107 070c 	add.w	r7, r7, #12
 8020556:	46bd      	mov	sp, r7
 8020558:	bc80      	pop	{r7}
 802055a:	4770      	bx	lr
 802055c:	08027ef8 	.word	0x08027ef8

08020560 <_ZN11ASyncObjectC1Ev>:
 */

#include "ASyncObject.h"
#include <assert.h>

ASyncObject::ASyncObject() {
 8020560:	b580      	push	{r7, lr}
 8020562:	b082      	sub	sp, #8
 8020564:	af00      	add	r7, sp, #0
 8020566:	6078      	str	r0, [r7, #4]
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	4618      	mov	r0, r3
 802056c:	f7ff ffe8 	bl	8020540 <_ZN12IFreeRTOSObjC1Ev>
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	4a06      	ldr	r2, [pc, #24]	; (802058c <_ZN11ASyncObjectC1Ev+0x2c>)
 8020574:	601a      	str	r2, [r3, #0]
	m_handleSemaphore = NULL;
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	f04f 0200 	mov.w	r2, #0
 802057c:	605a      	str	r2, [r3, #4]
}
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	4618      	mov	r0, r3
 8020582:	f107 0708 	add.w	r7, r7, #8
 8020586:	46bd      	mov	sp, r7
 8020588:	bd80      	pop	{r7, pc}
 802058a:	bf00      	nop
 802058c:	08027ed0 	.word	0x08027ed0

08020590 <_ZN11ASyncObjectD1Ev>:

ASyncObject::~ASyncObject() {
 8020590:	b580      	push	{r7, lr}
 8020592:	b082      	sub	sp, #8
 8020594:	af00      	add	r7, sp, #0
 8020596:	6078      	str	r0, [r7, #4]
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	4a0d      	ldr	r2, [pc, #52]	; (80205d0 <_ZN11ASyncObjectD1Ev+0x40>)
 802059c:	601a      	str	r2, [r3, #0]
	if (IsValid())
 802059e:	6878      	ldr	r0, [r7, #4]
 80205a0:	f7ff ffaa 	bl	80204f8 <_ZNK11ASyncObject7IsValidEv>
 80205a4:	4603      	mov	r3, r0
 80205a6:	2b00      	cmp	r3, #0
 80205a8:	d002      	beq.n	80205b0 <_ZN11ASyncObjectD1Ev+0x20>
		Delete();
 80205aa:	6878      	ldr	r0, [r7, #4]
 80205ac:	f000 f822 	bl	80205f4 <_ZN11ASyncObject6DeleteEv>
}
 80205b0:	f04f 0300 	mov.w	r3, #0
 80205b4:	f003 0301 	and.w	r3, r3, #1
 80205b8:	b2db      	uxtb	r3, r3
 80205ba:	2b00      	cmp	r3, #0
 80205bc:	d002      	beq.n	80205c4 <_ZN11ASyncObjectD1Ev+0x34>
 80205be:	6878      	ldr	r0, [r7, #4]
 80205c0:	f004 fa36 	bl	8024a30 <_ZdlPv>
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	4618      	mov	r0, r3
 80205c8:	f107 0708 	add.w	r7, r7, #8
 80205cc:	46bd      	mov	sp, r7
 80205ce:	bd80      	pop	{r7, pc}
 80205d0:	08027ed0 	.word	0x08027ed0

080205d4 <_ZN11ASyncObjectD0Ev>:

ASyncObject::ASyncObject() {
	m_handleSemaphore = NULL;
}

ASyncObject::~ASyncObject() {
 80205d4:	b580      	push	{r7, lr}
 80205d6:	b082      	sub	sp, #8
 80205d8:	af00      	add	r7, sp, #0
 80205da:	6078      	str	r0, [r7, #4]
	if (IsValid())
		Delete();
}
 80205dc:	6878      	ldr	r0, [r7, #4]
 80205de:	f7ff ffd7 	bl	8020590 <_ZN11ASyncObjectD1Ev>
 80205e2:	6878      	ldr	r0, [r7, #4]
 80205e4:	f004 fa24 	bl	8024a30 <_ZdlPv>
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	4618      	mov	r0, r3
 80205ec:	f107 0708 	add.w	r7, r7, #8
 80205f0:	46bd      	mov	sp, r7
 80205f2:	bd80      	pop	{r7, pc}

080205f4 <_ZN11ASyncObject6DeleteEv>:

void ASyncObject::Delete() {
 80205f4:	b580      	push	{r7, lr}
 80205f6:	b082      	sub	sp, #8
 80205f8:	af00      	add	r7, sp, #0
 80205fa:	6078      	str	r0, [r7, #4]
	if (m_handleSemaphore != NULL) {
 80205fc:	687b      	ldr	r3, [r7, #4]
 80205fe:	685b      	ldr	r3, [r3, #4]
 8020600:	2b00      	cmp	r3, #0
 8020602:	d008      	beq.n	8020616 <_ZN11ASyncObject6DeleteEv+0x22>
		vQueueDelete(m_handleSemaphore);
 8020604:	687b      	ldr	r3, [r7, #4]
 8020606:	685b      	ldr	r3, [r3, #4]
 8020608:	4618      	mov	r0, r3
 802060a:	f001 ff43 	bl	8022494 <vQueueDelete>
		m_handleSemaphore = NULL;
 802060e:	687b      	ldr	r3, [r7, #4]
 8020610:	f04f 0200 	mov.w	r2, #0
 8020614:	605a      	str	r2, [r3, #4]
	}
}
 8020616:	f107 0708 	add.w	r7, r7, #8
 802061a:	46bd      	mov	sp, r7
 802061c:	bd80      	pop	{r7, pc}
 802061e:	bf00      	nop

08020620 <_ZN11ASyncObject6AttachEPv>:

void ASyncObject::Attach(xGenericHandle handle) {
 8020620:	b580      	push	{r7, lr}
 8020622:	b082      	sub	sp, #8
 8020624:	af00      	add	r7, sp, #0
 8020626:	6078      	str	r0, [r7, #4]
 8020628:	6039      	str	r1, [r7, #0]
	assert(handle != NULL);
 802062a:	683b      	ldr	r3, [r7, #0]
 802062c:	2b00      	cmp	r3, #0
 802062e:	d10f      	bne.n	8020650 <_ZN11ASyncObject6AttachEPv+0x30>
 8020630:	f645 5078 	movw	r0, #23928	; 0x5d78
 8020634:	f6c0 0002 	movt	r0, #2050	; 0x802
 8020638:	f04f 011d 	mov.w	r1, #29
 802063c:	f647 7208 	movw	r2, #32520	; 0x7f08
 8020640:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020644:	f645 53a0 	movw	r3, #23968	; 0x5da0
 8020648:	f6c0 0302 	movt	r3, #2050	; 0x802
 802064c:	f7e6 fa54 	bl	8006af8 <__assert_func>

	if (IsValid()) {
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	681b      	ldr	r3, [r3, #0]
 8020656:	6878      	ldr	r0, [r7, #4]
 8020658:	4798      	blx	r3
 802065a:	4603      	mov	r3, r0
 802065c:	2b00      	cmp	r3, #0
 802065e:	d002      	beq.n	8020666 <_ZN11ASyncObject6AttachEPv+0x46>
		Delete();
 8020660:	6878      	ldr	r0, [r7, #4]
 8020662:	f7ff ffc7 	bl	80205f4 <_ZN11ASyncObject6DeleteEv>
	}
	m_handleSemaphore = handle;
 8020666:	687b      	ldr	r3, [r7, #4]
 8020668:	683a      	ldr	r2, [r7, #0]
 802066a:	605a      	str	r2, [r3, #4]
}
 802066c:	f107 0708 	add.w	r7, r7, #8
 8020670:	46bd      	mov	sp, r7
 8020672:	bd80      	pop	{r7, pc}

08020674 <_ZN16CBinarySemaphore4TakeEm>:


// inline methods implementation

inline
portBASE_TYPE CBinarySemaphore::Take(portTickType xBlockTime) {
 8020674:	b580      	push	{r7, lr}
 8020676:	b082      	sub	sp, #8
 8020678:	af00      	add	r7, sp, #0
 802067a:	6078      	str	r0, [r7, #4]
 802067c:	6039      	str	r1, [r7, #0]
	assert(IsValid());
 802067e:	687b      	ldr	r3, [r7, #4]
 8020680:	681b      	ldr	r3, [r3, #0]
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	687a      	ldr	r2, [r7, #4]
 8020686:	4610      	mov	r0, r2
 8020688:	4798      	blx	r3
 802068a:	4603      	mov	r3, r0
 802068c:	2b00      	cmp	r3, #0
 802068e:	d10f      	bne.n	80206b0 <_ZN16CBinarySemaphore4TakeEm+0x3c>
 8020690:	f645 50b0 	movw	r0, #23984	; 0x5db0
 8020694:	f6c0 0002 	movt	r0, #2050	; 0x802
 8020698:	f04f 0159 	mov.w	r1, #89	; 0x59
 802069c:	f647 7294 	movw	r2, #32660	; 0x7f94
 80206a0:	f6c0 0202 	movt	r2, #2050	; 0x802
 80206a4:	f645 53dc 	movw	r3, #24028	; 0x5ddc
 80206a8:	f6c0 0302 	movt	r3, #2050	; 0x802
 80206ac:	f7e6 fa24 	bl	8006af8 <__assert_func>

	return xSemaphoreTake(m_handleSemaphore, xBlockTime);
 80206b0:	687b      	ldr	r3, [r7, #4]
 80206b2:	685b      	ldr	r3, [r3, #4]
 80206b4:	4618      	mov	r0, r3
 80206b6:	f04f 0100 	mov.w	r1, #0
 80206ba:	683a      	ldr	r2, [r7, #0]
 80206bc:	f04f 0300 	mov.w	r3, #0
 80206c0:	f001 fdba 	bl	8022238 <xQueueGenericReceive>
 80206c4:	4603      	mov	r3, r0
}
 80206c6:	4618      	mov	r0, r3
 80206c8:	f107 0708 	add.w	r7, r7, #8
 80206cc:	46bd      	mov	sp, r7
 80206ce:	bd80      	pop	{r7, pc}

080206d0 <_ZN16CBinarySemaphore4GiveEv>:

inline
portBASE_TYPE CBinarySemaphore::Give() {
 80206d0:	b580      	push	{r7, lr}
 80206d2:	b082      	sub	sp, #8
 80206d4:	af00      	add	r7, sp, #0
 80206d6:	6078      	str	r0, [r7, #4]
	assert(IsValid());
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	687a      	ldr	r2, [r7, #4]
 80206e0:	4610      	mov	r0, r2
 80206e2:	4798      	blx	r3
 80206e4:	4603      	mov	r3, r0
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	d10f      	bne.n	802070a <_ZN16CBinarySemaphore4GiveEv+0x3a>
 80206ea:	f645 50b0 	movw	r0, #23984	; 0x5db0
 80206ee:	f6c0 0002 	movt	r0, #2050	; 0x802
 80206f2:	f04f 0160 	mov.w	r1, #96	; 0x60
 80206f6:	f647 7268 	movw	r2, #32616	; 0x7f68
 80206fa:	f6c0 0202 	movt	r2, #2050	; 0x802
 80206fe:	f645 53dc 	movw	r3, #24028	; 0x5ddc
 8020702:	f6c0 0302 	movt	r3, #2050	; 0x802
 8020706:	f7e6 f9f7 	bl	8006af8 <__assert_func>

	return xSemaphoreGive(m_handleSemaphore);
 802070a:	687b      	ldr	r3, [r7, #4]
 802070c:	685b      	ldr	r3, [r3, #4]
 802070e:	4618      	mov	r0, r3
 8020710:	f04f 0100 	mov.w	r1, #0
 8020714:	f04f 0200 	mov.w	r2, #0
 8020718:	f04f 0300 	mov.w	r3, #0
 802071c:	f001 fcb2 	bl	8022084 <xQueueGenericSend>
 8020720:	4603      	mov	r3, r0
}
 8020722:	4618      	mov	r0, r3
 8020724:	f107 0708 	add.w	r7, r7, #8
 8020728:	46bd      	mov	sp, r7
 802072a:	bd80      	pop	{r7, pc}

0802072c <_ZN16CBinarySemaphoreC1Ev>:
 */

#include "CBinarySemaphore.h"
#include <assert.h>

CBinarySemaphore::CBinarySemaphore() {
 802072c:	b580      	push	{r7, lr}
 802072e:	b082      	sub	sp, #8
 8020730:	af00      	add	r7, sp, #0
 8020732:	6078      	str	r0, [r7, #4]
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	4618      	mov	r0, r3
 8020738:	f7ff ff12 	bl	8020560 <_ZN11ASyncObjectC1Ev>
 802073c:	687b      	ldr	r3, [r7, #4]
 802073e:	4a04      	ldr	r2, [pc, #16]	; (8020750 <_ZN16CBinarySemaphoreC1Ev+0x24>)
 8020740:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	4618      	mov	r0, r3
 8020746:	f107 0708 	add.w	r7, r7, #8
 802074a:	46bd      	mov	sp, r7
 802074c:	bd80      	pop	{r7, pc}
 802074e:	bf00      	nop
 8020750:	08027f48 	.word	0x08027f48

08020754 <_ZN16CBinarySemaphoreD1Ev>:

CBinarySemaphore::~CBinarySemaphore() {
 8020754:	b580      	push	{r7, lr}
 8020756:	b082      	sub	sp, #8
 8020758:	af00      	add	r7, sp, #0
 802075a:	6078      	str	r0, [r7, #4]
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	4a0a      	ldr	r2, [pc, #40]	; (8020788 <_ZN16CBinarySemaphoreD1Ev+0x34>)
 8020760:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8020762:	6878      	ldr	r0, [r7, #4]
 8020764:	f7ff ff14 	bl	8020590 <_ZN11ASyncObjectD1Ev>
 8020768:	f04f 0300 	mov.w	r3, #0
 802076c:	f003 0301 	and.w	r3, r3, #1
 8020770:	b2db      	uxtb	r3, r3
 8020772:	2b00      	cmp	r3, #0
 8020774:	d002      	beq.n	802077c <_ZN16CBinarySemaphoreD1Ev+0x28>
 8020776:	6878      	ldr	r0, [r7, #4]
 8020778:	f004 f95a 	bl	8024a30 <_ZdlPv>
 802077c:	687b      	ldr	r3, [r7, #4]
 802077e:	4618      	mov	r0, r3
 8020780:	f107 0708 	add.w	r7, r7, #8
 8020784:	46bd      	mov	sp, r7
 8020786:	bd80      	pop	{r7, pc}
 8020788:	08027f48 	.word	0x08027f48

0802078c <_ZN16CBinarySemaphoreD0Ev>:
CBinarySemaphore::CBinarySemaphore() {
	// TODO Auto-generated constructor stub

}

CBinarySemaphore::~CBinarySemaphore() {
 802078c:	b580      	push	{r7, lr}
 802078e:	b082      	sub	sp, #8
 8020790:	af00      	add	r7, sp, #0
 8020792:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8020794:	6878      	ldr	r0, [r7, #4]
 8020796:	f7ff ffdd 	bl	8020754 <_ZN16CBinarySemaphoreD1Ev>
 802079a:	6878      	ldr	r0, [r7, #4]
 802079c:	f004 f948 	bl	8024a30 <_ZdlPv>
 80207a0:	687b      	ldr	r3, [r7, #4]
 80207a2:	4618      	mov	r0, r3
 80207a4:	f107 0708 	add.w	r7, r7, #8
 80207a8:	46bd      	mov	sp, r7
 80207aa:	bd80      	pop	{r7, pc}

080207ac <_ZN16CBinarySemaphoreC1EPv>:

CBinarySemaphore::CBinarySemaphore(xSemaphoreHandle handleSemaphore) {
 80207ac:	b580      	push	{r7, lr}
 80207ae:	b082      	sub	sp, #8
 80207b0:	af00      	add	r7, sp, #0
 80207b2:	6078      	str	r0, [r7, #4]
 80207b4:	6039      	str	r1, [r7, #0]
 80207b6:	687b      	ldr	r3, [r7, #4]
 80207b8:	4618      	mov	r0, r3
 80207ba:	f7ff fed1 	bl	8020560 <_ZN11ASyncObjectC1Ev>
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	4a06      	ldr	r2, [pc, #24]	; (80207dc <_ZN16CBinarySemaphoreC1EPv+0x30>)
 80207c2:	601a      	str	r2, [r3, #0]
	Attach(handleSemaphore);
 80207c4:	687b      	ldr	r3, [r7, #4]
 80207c6:	4618      	mov	r0, r3
 80207c8:	6839      	ldr	r1, [r7, #0]
 80207ca:	f7ff ff29 	bl	8020620 <_ZN11ASyncObject6AttachEPv>
}
 80207ce:	687b      	ldr	r3, [r7, #4]
 80207d0:	4618      	mov	r0, r3
 80207d2:	f107 0708 	add.w	r7, r7, #8
 80207d6:	46bd      	mov	sp, r7
 80207d8:	bd80      	pop	{r7, pc}
 80207da:	bf00      	nop
 80207dc:	08027f48 	.word	0x08027f48

080207e0 <_ZN16CBinarySemaphore6CreateEv>:

bool CBinarySemaphore::Create() {
 80207e0:	b580      	push	{r7, lr}
 80207e2:	b084      	sub	sp, #16
 80207e4:	af00      	add	r7, sp, #0
 80207e6:	6078      	str	r0, [r7, #4]
	xSemaphoreHandle handle;

	vSemaphoreCreateBinary(handle);
 80207e8:	f04f 0001 	mov.w	r0, #1
 80207ec:	f04f 0100 	mov.w	r1, #0
 80207f0:	f001 fb94 	bl	8021f1c <xQueueCreate>
 80207f4:	4603      	mov	r3, r0
 80207f6:	60fb      	str	r3, [r7, #12]
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	2b00      	cmp	r3, #0
 80207fc:	d008      	beq.n	8020810 <_ZN16CBinarySemaphore6CreateEv+0x30>
 80207fe:	68f8      	ldr	r0, [r7, #12]
 8020800:	f04f 0100 	mov.w	r1, #0
 8020804:	f04f 0200 	mov.w	r2, #0
 8020808:	f04f 0300 	mov.w	r3, #0
 802080c:	f001 fc3a 	bl	8022084 <xQueueGenericSend>

	if (handle != NULL)
 8020810:	68fb      	ldr	r3, [r7, #12]
 8020812:	2b00      	cmp	r3, #0
 8020814:	d008      	beq.n	8020828 <_ZN16CBinarySemaphore6CreateEv+0x48>
		Attach(handle);
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	681b      	ldr	r3, [r3, #0]
 802081a:	f103 0304 	add.w	r3, r3, #4
 802081e:	681b      	ldr	r3, [r3, #0]
 8020820:	687a      	ldr	r2, [r7, #4]
 8020822:	4610      	mov	r0, r2
 8020824:	68f9      	ldr	r1, [r7, #12]
 8020826:	4798      	blx	r3

	return IsValid();
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	681b      	ldr	r3, [r3, #0]
 802082c:	681b      	ldr	r3, [r3, #0]
 802082e:	687a      	ldr	r2, [r7, #4]
 8020830:	4610      	mov	r0, r2
 8020832:	4798      	blx	r3
 8020834:	4603      	mov	r3, r0
}
 8020836:	4618      	mov	r0, r3
 8020838:	f107 0710 	add.w	r7, r7, #16
 802083c:	46bd      	mov	sp, r7
 802083e:	bd80      	pop	{r7, pc}

08020840 <_ZN18CCountingSemaphore4TakeEm>:


// inline methods implementation

inline
portBASE_TYPE CCountingSemaphore::Take(portTickType xBlockTime) {
 8020840:	b580      	push	{r7, lr}
 8020842:	b082      	sub	sp, #8
 8020844:	af00      	add	r7, sp, #0
 8020846:	6078      	str	r0, [r7, #4]
 8020848:	6039      	str	r1, [r7, #0]
	assert(IsValid());
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	681b      	ldr	r3, [r3, #0]
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	687a      	ldr	r2, [r7, #4]
 8020852:	4610      	mov	r0, r2
 8020854:	4798      	blx	r3
 8020856:	4603      	mov	r3, r0
 8020858:	2b00      	cmp	r3, #0
 802085a:	d10f      	bne.n	802087c <_ZN18CCountingSemaphore4TakeEm+0x3c>
 802085c:	f645 50e8 	movw	r0, #24040	; 0x5de8
 8020860:	f6c0 0002 	movt	r0, #2050	; 0x802
 8020864:	f04f 0158 	mov.w	r1, #88	; 0x58
 8020868:	f248 0224 	movw	r2, #32804	; 0x8024
 802086c:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020870:	f645 6314 	movw	r3, #24084	; 0x5e14
 8020874:	f6c0 0302 	movt	r3, #2050	; 0x802
 8020878:	f7e6 f93e 	bl	8006af8 <__assert_func>

	return xSemaphoreTake(m_handleSemaphore, xBlockTime);
 802087c:	687b      	ldr	r3, [r7, #4]
 802087e:	685b      	ldr	r3, [r3, #4]
 8020880:	4618      	mov	r0, r3
 8020882:	f04f 0100 	mov.w	r1, #0
 8020886:	683a      	ldr	r2, [r7, #0]
 8020888:	f04f 0300 	mov.w	r3, #0
 802088c:	f001 fcd4 	bl	8022238 <xQueueGenericReceive>
 8020890:	4603      	mov	r3, r0
}
 8020892:	4618      	mov	r0, r3
 8020894:	f107 0708 	add.w	r7, r7, #8
 8020898:	46bd      	mov	sp, r7
 802089a:	bd80      	pop	{r7, pc}

0802089c <_ZN18CCountingSemaphore4GiveEv>:

inline
portBASE_TYPE CCountingSemaphore::Give() {
 802089c:	b580      	push	{r7, lr}
 802089e:	b082      	sub	sp, #8
 80208a0:	af00      	add	r7, sp, #0
 80208a2:	6078      	str	r0, [r7, #4]
	assert(IsValid());
 80208a4:	687b      	ldr	r3, [r7, #4]
 80208a6:	681b      	ldr	r3, [r3, #0]
 80208a8:	681b      	ldr	r3, [r3, #0]
 80208aa:	687a      	ldr	r2, [r7, #4]
 80208ac:	4610      	mov	r0, r2
 80208ae:	4798      	blx	r3
 80208b0:	4603      	mov	r3, r0
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	d10f      	bne.n	80208d6 <_ZN18CCountingSemaphore4GiveEv+0x3a>
 80208b6:	f645 50e8 	movw	r0, #24040	; 0x5de8
 80208ba:	f6c0 0002 	movt	r0, #2050	; 0x802
 80208be:	f04f 015f 	mov.w	r1, #95	; 0x5f
 80208c2:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 80208c6:	f6c0 0202 	movt	r2, #2050	; 0x802
 80208ca:	f645 6314 	movw	r3, #24084	; 0x5e14
 80208ce:	f6c0 0302 	movt	r3, #2050	; 0x802
 80208d2:	f7e6 f911 	bl	8006af8 <__assert_func>

	return xSemaphoreGive(m_handleSemaphore);
 80208d6:	687b      	ldr	r3, [r7, #4]
 80208d8:	685b      	ldr	r3, [r3, #4]
 80208da:	4618      	mov	r0, r3
 80208dc:	f04f 0100 	mov.w	r1, #0
 80208e0:	f04f 0200 	mov.w	r2, #0
 80208e4:	f04f 0300 	mov.w	r3, #0
 80208e8:	f001 fbcc 	bl	8022084 <xQueueGenericSend>
 80208ec:	4603      	mov	r3, r0
}
 80208ee:	4618      	mov	r0, r3
 80208f0:	f107 0708 	add.w	r7, r7, #8
 80208f4:	46bd      	mov	sp, r7
 80208f6:	bd80      	pop	{r7, pc}

080208f8 <_ZN18CCountingSemaphoreC1Ev>:
 */

#include "CCountingSemaphore.h"
#include <assert.h>

CCountingSemaphore::CCountingSemaphore() {
 80208f8:	b580      	push	{r7, lr}
 80208fa:	b082      	sub	sp, #8
 80208fc:	af00      	add	r7, sp, #0
 80208fe:	6078      	str	r0, [r7, #4]
 8020900:	687b      	ldr	r3, [r7, #4]
 8020902:	4618      	mov	r0, r3
 8020904:	f7ff fe2c 	bl	8020560 <_ZN11ASyncObjectC1Ev>
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	4a04      	ldr	r2, [pc, #16]	; (802091c <_ZN18CCountingSemaphoreC1Ev+0x24>)
 802090c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	4618      	mov	r0, r3
 8020912:	f107 0708 	add.w	r7, r7, #8
 8020916:	46bd      	mov	sp, r7
 8020918:	bd80      	pop	{r7, pc}
 802091a:	bf00      	nop
 802091c:	08027fd8 	.word	0x08027fd8

08020920 <_ZN18CCountingSemaphoreD1Ev>:

CCountingSemaphore::~CCountingSemaphore() {
 8020920:	b580      	push	{r7, lr}
 8020922:	b082      	sub	sp, #8
 8020924:	af00      	add	r7, sp, #0
 8020926:	6078      	str	r0, [r7, #4]
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	4a0a      	ldr	r2, [pc, #40]	; (8020954 <_ZN18CCountingSemaphoreD1Ev+0x34>)
 802092c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 802092e:	6878      	ldr	r0, [r7, #4]
 8020930:	f7ff fe2e 	bl	8020590 <_ZN11ASyncObjectD1Ev>
 8020934:	f04f 0300 	mov.w	r3, #0
 8020938:	f003 0301 	and.w	r3, r3, #1
 802093c:	b2db      	uxtb	r3, r3
 802093e:	2b00      	cmp	r3, #0
 8020940:	d002      	beq.n	8020948 <_ZN18CCountingSemaphoreD1Ev+0x28>
 8020942:	6878      	ldr	r0, [r7, #4]
 8020944:	f004 f874 	bl	8024a30 <_ZdlPv>
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	4618      	mov	r0, r3
 802094c:	f107 0708 	add.w	r7, r7, #8
 8020950:	46bd      	mov	sp, r7
 8020952:	bd80      	pop	{r7, pc}
 8020954:	08027fd8 	.word	0x08027fd8

08020958 <_ZN18CCountingSemaphoreD0Ev>:
CCountingSemaphore::CCountingSemaphore() {
	// TODO Auto-generated constructor stub

}

CCountingSemaphore::~CCountingSemaphore() {
 8020958:	b580      	push	{r7, lr}
 802095a:	b082      	sub	sp, #8
 802095c:	af00      	add	r7, sp, #0
 802095e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8020960:	6878      	ldr	r0, [r7, #4]
 8020962:	f7ff ffdd 	bl	8020920 <_ZN18CCountingSemaphoreD1Ev>
 8020966:	6878      	ldr	r0, [r7, #4]
 8020968:	f004 f862 	bl	8024a30 <_ZdlPv>
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	4618      	mov	r0, r3
 8020970:	f107 0708 	add.w	r7, r7, #8
 8020974:	46bd      	mov	sp, r7
 8020976:	bd80      	pop	{r7, pc}

08020978 <_ZN18CCountingSemaphoreC1EPv>:

CCountingSemaphore::CCountingSemaphore(xSemaphoreHandle handleSemaphore) {
 8020978:	b580      	push	{r7, lr}
 802097a:	b082      	sub	sp, #8
 802097c:	af00      	add	r7, sp, #0
 802097e:	6078      	str	r0, [r7, #4]
 8020980:	6039      	str	r1, [r7, #0]
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	4618      	mov	r0, r3
 8020986:	f7ff fdeb 	bl	8020560 <_ZN11ASyncObjectC1Ev>
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	4a06      	ldr	r2, [pc, #24]	; (80209a8 <_ZN18CCountingSemaphoreC1EPv+0x30>)
 802098e:	601a      	str	r2, [r3, #0]
	Attach(handleSemaphore);
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	4618      	mov	r0, r3
 8020994:	6839      	ldr	r1, [r7, #0]
 8020996:	f7ff fe43 	bl	8020620 <_ZN11ASyncObject6AttachEPv>
}
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	4618      	mov	r0, r3
 802099e:	f107 0708 	add.w	r7, r7, #8
 80209a2:	46bd      	mov	sp, r7
 80209a4:	bd80      	pop	{r7, pc}
 80209a6:	bf00      	nop
 80209a8:	08027fd8 	.word	0x08027fd8

080209ac <_ZN18CCountingSemaphore6CreateEmm>:

bool CCountingSemaphore::Create(unsigned portBASE_TYPE uxMaxCount, unsigned portBASE_TYPE uxInitialCount) {
 80209ac:	b580      	push	{r7, lr}
 80209ae:	b084      	sub	sp, #16
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	60f8      	str	r0, [r7, #12]
 80209b4:	60b9      	str	r1, [r7, #8]
 80209b6:	607a      	str	r2, [r7, #4]

	if (handle != NULL)
		Attach(handle);
#endif

	return IsValid();
 80209b8:	68fb      	ldr	r3, [r7, #12]
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	681b      	ldr	r3, [r3, #0]
 80209be:	68fa      	ldr	r2, [r7, #12]
 80209c0:	4610      	mov	r0, r2
 80209c2:	4798      	blx	r3
 80209c4:	4603      	mov	r3, r0
}
 80209c6:	4618      	mov	r0, r3
 80209c8:	f107 0710 	add.w	r7, r7, #16
 80209cc:	46bd      	mov	sp, r7
 80209ce:	bd80      	pop	{r7, pc}

080209d0 <_ZN9CFreeRTOSC1Ev>:
 */

#include "CFreeRTOS.h"
#include "AManagedTask.h"

CFreeRTOS::CFreeRTOS() {
 80209d0:	b480      	push	{r7}
 80209d2:	b083      	sub	sp, #12
 80209d4:	af00      	add	r7, sp, #0
 80209d6:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	4618      	mov	r0, r3
 80209dc:	f107 070c 	add.w	r7, r7, #12
 80209e0:	46bd      	mov	sp, r7
 80209e2:	bc80      	pop	{r7}
 80209e4:	4770      	bx	lr
 80209e6:	bf00      	nop

080209e8 <_ZN9CFreeRTOSD1Ev>:

CFreeRTOS::~CFreeRTOS() {
 80209e8:	b480      	push	{r7}
 80209ea:	b083      	sub	sp, #12
 80209ec:	af00      	add	r7, sp, #0
 80209ee:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	4618      	mov	r0, r3
 80209f4:	f107 070c 	add.w	r7, r7, #12
 80209f8:	46bd      	mov	sp, r7
 80209fa:	bc80      	pop	{r7}
 80209fc:	4770      	bx	lr
 80209fe:	bf00      	nop

08020a00 <_ZN9CFreeRTOS27InitHardwareForManagedTasksEv>:

bool CFreeRTOS::InitHardwareForManagedTasks() {
 8020a00:	b580      	push	{r7, lr}
 8020a02:	af00      	add	r7, sp, #0
	return AManagedTask::InitHardwareForManagedTasks();
 8020a04:	f7ff fd4a 	bl	802049c <_ZN12AManagedTask27InitHardwareForManagedTasksEv>
 8020a08:	4603      	mov	r3, r0
}
 8020a0a:	4618      	mov	r0, r3
 8020a0c:	bd80      	pop	{r7, pc}
 8020a0e:	bf00      	nop

08020a10 <_ZN6CQueue4SendEPKvm>:
};

// inline method implementation

inline
portBASE_TYPE CQueue::Send(const void * pvItemToQueue, portTickType xTicksToWait) {
 8020a10:	b580      	push	{r7, lr}
 8020a12:	b084      	sub	sp, #16
 8020a14:	af00      	add	r7, sp, #0
 8020a16:	60f8      	str	r0, [r7, #12]
 8020a18:	60b9      	str	r1, [r7, #8]
 8020a1a:	607a      	str	r2, [r7, #4]
	return xQueueSend(m_handleQueue, pvItemToQueue, xTicksToWait);
 8020a1c:	68fb      	ldr	r3, [r7, #12]
 8020a1e:	685b      	ldr	r3, [r3, #4]
 8020a20:	4618      	mov	r0, r3
 8020a22:	68b9      	ldr	r1, [r7, #8]
 8020a24:	687a      	ldr	r2, [r7, #4]
 8020a26:	f04f 0300 	mov.w	r3, #0
 8020a2a:	f001 fb2b 	bl	8022084 <xQueueGenericSend>
 8020a2e:	4603      	mov	r3, r0
}
 8020a30:	4618      	mov	r0, r3
 8020a32:	f107 0710 	add.w	r7, r7, #16
 8020a36:	46bd      	mov	sp, r7
 8020a38:	bd80      	pop	{r7, pc}
 8020a3a:	bf00      	nop

08020a3c <_ZN6CQueue11SendFromISREPKvPl>:

inline
portBASE_TYPE CQueue::SendFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorityTaskWoken) {
 8020a3c:	b580      	push	{r7, lr}
 8020a3e:	b084      	sub	sp, #16
 8020a40:	af00      	add	r7, sp, #0
 8020a42:	60f8      	str	r0, [r7, #12]
 8020a44:	60b9      	str	r1, [r7, #8]
 8020a46:	607a      	str	r2, [r7, #4]
	return xQueueSendFromISR(m_handleQueue, pvItemToQueue, pxHigherPriorityTaskWoken);
 8020a48:	68fb      	ldr	r3, [r7, #12]
 8020a4a:	685b      	ldr	r3, [r3, #4]
 8020a4c:	4618      	mov	r0, r3
 8020a4e:	68b9      	ldr	r1, [r7, #8]
 8020a50:	687a      	ldr	r2, [r7, #4]
 8020a52:	f04f 0300 	mov.w	r3, #0
 8020a56:	f001 fba7 	bl	80221a8 <xQueueGenericSendFromISR>
 8020a5a:	4603      	mov	r3, r0
}
 8020a5c:	4618      	mov	r0, r3
 8020a5e:	f107 0710 	add.w	r7, r7, #16
 8020a62:	46bd      	mov	sp, r7
 8020a64:	bd80      	pop	{r7, pc}
 8020a66:	bf00      	nop

08020a68 <_ZN6CQueue11SendToFrontEPKvm>:

	return xQueueSendToBack(m_handleQueue, pvItemToQueue, xTicksToWait);
}

inline
portBASE_TYPE CQueue::SendToFront(const void * pvItemToQueue, portTickType xTicksToWait) {
 8020a68:	b580      	push	{r7, lr}
 8020a6a:	b084      	sub	sp, #16
 8020a6c:	af00      	add	r7, sp, #0
 8020a6e:	60f8      	str	r0, [r7, #12]
 8020a70:	60b9      	str	r1, [r7, #8]
 8020a72:	607a      	str	r2, [r7, #4]
	assert(IsValid());
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	681b      	ldr	r3, [r3, #0]
 8020a78:	681b      	ldr	r3, [r3, #0]
 8020a7a:	68f8      	ldr	r0, [r7, #12]
 8020a7c:	4798      	blx	r3
 8020a7e:	4603      	mov	r3, r0
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d10f      	bne.n	8020aa4 <_ZN6CQueue11SendToFrontEPKvm+0x3c>
 8020a84:	f645 6020 	movw	r0, #24096	; 0x5e20
 8020a88:	f6c0 0002 	movt	r0, #2050	; 0x802
 8020a8c:	f04f 01b0 	mov.w	r1, #176	; 0xb0
 8020a90:	f248 02dc 	movw	r2, #32988	; 0x80dc
 8020a94:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020a98:	f645 6340 	movw	r3, #24128	; 0x5e40
 8020a9c:	f6c0 0302 	movt	r3, #2050	; 0x802
 8020aa0:	f7e6 f82a 	bl	8006af8 <__assert_func>

	return xQueueSendToFront(m_handleQueue, pvItemToQueue, xTicksToWait);
 8020aa4:	68fb      	ldr	r3, [r7, #12]
 8020aa6:	685b      	ldr	r3, [r3, #4]
 8020aa8:	4618      	mov	r0, r3
 8020aaa:	68b9      	ldr	r1, [r7, #8]
 8020aac:	687a      	ldr	r2, [r7, #4]
 8020aae:	f04f 0301 	mov.w	r3, #1
 8020ab2:	f001 fae7 	bl	8022084 <xQueueGenericSend>
 8020ab6:	4603      	mov	r3, r0
}
 8020ab8:	4618      	mov	r0, r3
 8020aba:	f107 0710 	add.w	r7, r7, #16
 8020abe:	46bd      	mov	sp, r7
 8020ac0:	bd80      	pop	{r7, pc}
 8020ac2:	bf00      	nop

08020ac4 <_ZN6CQueue7ReceiveEPvm>:

inline
portBASE_TYPE CQueue::Receive(void *pvBuffer, portTickType xTicksToWait) {
 8020ac4:	b580      	push	{r7, lr}
 8020ac6:	b084      	sub	sp, #16
 8020ac8:	af00      	add	r7, sp, #0
 8020aca:	60f8      	str	r0, [r7, #12]
 8020acc:	60b9      	str	r1, [r7, #8]
 8020ace:	607a      	str	r2, [r7, #4]
	assert(IsValid());
 8020ad0:	68fb      	ldr	r3, [r7, #12]
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	68f8      	ldr	r0, [r7, #12]
 8020ad8:	4798      	blx	r3
 8020ada:	4603      	mov	r3, r0
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d10f      	bne.n	8020b00 <_ZN6CQueue7ReceiveEPvm+0x3c>
 8020ae0:	f645 6020 	movw	r0, #24096	; 0x5e20
 8020ae4:	f6c0 0002 	movt	r0, #2050	; 0x802
 8020ae8:	f04f 01b7 	mov.w	r1, #183	; 0xb7
 8020aec:	f248 1214 	movw	r2, #33044	; 0x8114
 8020af0:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020af4:	f645 6340 	movw	r3, #24128	; 0x5e40
 8020af8:	f6c0 0302 	movt	r3, #2050	; 0x802
 8020afc:	f7e5 fffc 	bl	8006af8 <__assert_func>

	return xQueueReceive(m_handleQueue, pvBuffer, xTicksToWait);
 8020b00:	68fb      	ldr	r3, [r7, #12]
 8020b02:	685b      	ldr	r3, [r3, #4]
 8020b04:	4618      	mov	r0, r3
 8020b06:	68b9      	ldr	r1, [r7, #8]
 8020b08:	687a      	ldr	r2, [r7, #4]
 8020b0a:	f04f 0300 	mov.w	r3, #0
 8020b0e:	f001 fb93 	bl	8022238 <xQueueGenericReceive>
 8020b12:	4603      	mov	r3, r0
}
 8020b14:	4618      	mov	r0, r3
 8020b16:	f107 0710 	add.w	r7, r7, #16
 8020b1a:	46bd      	mov	sp, r7
 8020b1c:	bd80      	pop	{r7, pc}
 8020b1e:	bf00      	nop

08020b20 <_ZN6CQueue18SendToFrontFromISREPKvPl>:

	return xQueueSendToBackFromISR(m_handleQueue, pvItemToQueue, pxHigherPriorityTaskWoken);
}

inline
portBASE_TYPE CQueue::SendToFrontFromISR(const void * pvItemToQueue, portBASE_TYPE *pxHigherPriorityTaskWoken) {
 8020b20:	b580      	push	{r7, lr}
 8020b22:	b084      	sub	sp, #16
 8020b24:	af00      	add	r7, sp, #0
 8020b26:	60f8      	str	r0, [r7, #12]
 8020b28:	60b9      	str	r1, [r7, #8]
 8020b2a:	607a      	str	r2, [r7, #4]
	assert(IsValid());
 8020b2c:	68fb      	ldr	r3, [r7, #12]
 8020b2e:	681b      	ldr	r3, [r3, #0]
 8020b30:	681b      	ldr	r3, [r3, #0]
 8020b32:	68f8      	ldr	r0, [r7, #12]
 8020b34:	4798      	blx	r3
 8020b36:	4603      	mov	r3, r0
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	d10f      	bne.n	8020b5c <_ZN6CQueue18SendToFrontFromISREPKvPl+0x3c>
 8020b3c:	f645 6020 	movw	r0, #24096	; 0x5e20
 8020b40:	f6c0 0002 	movt	r0, #2050	; 0x802
 8020b44:	f04f 01cc 	mov.w	r1, #204	; 0xcc
 8020b48:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8020b4c:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020b50:	f645 6340 	movw	r3, #24128	; 0x5e40
 8020b54:	f6c0 0302 	movt	r3, #2050	; 0x802
 8020b58:	f7e5 ffce 	bl	8006af8 <__assert_func>

	return xQueueSendToFrontFromISR(m_handleQueue, pvItemToQueue, pxHigherPriorityTaskWoken);
 8020b5c:	68fb      	ldr	r3, [r7, #12]
 8020b5e:	685b      	ldr	r3, [r3, #4]
 8020b60:	4618      	mov	r0, r3
 8020b62:	68b9      	ldr	r1, [r7, #8]
 8020b64:	687a      	ldr	r2, [r7, #4]
 8020b66:	f04f 0301 	mov.w	r3, #1
 8020b6a:	f001 fb1d 	bl	80221a8 <xQueueGenericSendFromISR>
 8020b6e:	4603      	mov	r3, r0
}
 8020b70:	4618      	mov	r0, r3
 8020b72:	f107 0710 	add.w	r7, r7, #16
 8020b76:	46bd      	mov	sp, r7
 8020b78:	bd80      	pop	{r7, pc}
 8020b7a:	bf00      	nop

08020b7c <_ZN12CMessageTask6OnInitEv>:
	 * Called by the framework after the scheduler is started, but before the task
	 * enter its message loop. Use this method to perform one shot task initialization.
	 *
	 * @return <code>true</code> if success, <code>false</code> otherwise.
	 */
	virtual bool OnInit() { return true; }
 8020b7c:	b480      	push	{r7}
 8020b7e:	b083      	sub	sp, #12
 8020b80:	af00      	add	r7, sp, #0
 8020b82:	6078      	str	r0, [r7, #4]
 8020b84:	f04f 0301 	mov.w	r3, #1
 8020b88:	4618      	mov	r0, r3
 8020b8a:	f107 070c 	add.w	r7, r7, #12
 8020b8e:	46bd      	mov	sp, r7
 8020b90:	bc80      	pop	{r7}
 8020b92:	4770      	bx	lr

08020b94 <_ZN12CMessageTask9OnTimeOutEv>:

	/**
	 * Called by the framework during the message loop when the timeout expire and no message are
	 * received.
	 */
	virtual void OnTimeOut() {};
 8020b94:	b480      	push	{r7}
 8020b96:	b083      	sub	sp, #12
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
 8020b9c:	f107 070c 	add.w	r7, r7, #12
 8020ba0:	46bd      	mov	sp, r7
 8020ba2:	bc80      	pop	{r7}
 8020ba4:	4770      	bx	lr
 8020ba6:	bf00      	nop

08020ba8 <_ZN12CMessageTaskC1Ev>:

const CMessageTask::message_map_entry_t CMessageTask::s_message_map[] = {
		{ NULL_MSG, NULL }
};

CMessageTask::CMessageTask()
 8020ba8:	b580      	push	{r7, lr}
 8020baa:	b082      	sub	sp, #8
 8020bac:	af00      	add	r7, sp, #0
 8020bae:	6078      	str	r0, [r7, #4]
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	4618      	mov	r0, r3
 8020bb4:	f7ff fb78 	bl	80202a8 <_ZN12AManagedTaskC1Ev>
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	4a0b      	ldr	r2, [pc, #44]	; (8020be8 <_ZN12CMessageTaskC1Ev+0x40>)
 8020bbc:	601a      	str	r2, [r3, #0]
 8020bbe:	687b      	ldr	r3, [r7, #4]
 8020bc0:	f103 0310 	add.w	r3, r3, #16
 8020bc4:	4618      	mov	r0, r3
 8020bc6:	f000 fac1 	bl	802114c <_ZN6CQueueC1Ev>
{
	m_pDelegate = NULL;
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	f04f 0200 	mov.w	r2, #0
 8020bd0:	619a      	str	r2, [r3, #24]
	m_nTimeOut = portMAX_DELAY;
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8020bd8:	60da      	str	r2, [r3, #12]
}
 8020bda:	687b      	ldr	r3, [r7, #4]
 8020bdc:	4618      	mov	r0, r3
 8020bde:	f107 0708 	add.w	r7, r7, #8
 8020be2:	46bd      	mov	sp, r7
 8020be4:	bd80      	pop	{r7, pc}
 8020be6:	bf00      	nop
 8020be8:	08028070 	.word	0x08028070

08020bec <_ZN12CMessageTaskD1Ev>:

CMessageTask::~CMessageTask() {
 8020bec:	b580      	push	{r7, lr}
 8020bee:	b082      	sub	sp, #8
 8020bf0:	af00      	add	r7, sp, #0
 8020bf2:	6078      	str	r0, [r7, #4]
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	4a0d      	ldr	r2, [pc, #52]	; (8020c2c <_ZN12CMessageTaskD1Ev+0x40>)
 8020bf8:	601a      	str	r2, [r3, #0]
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	f103 0310 	add.w	r3, r3, #16
	// TODO Auto-generated destructor stub
}
 8020c00:	4618      	mov	r0, r3
 8020c02:	f000 fabb 	bl	802117c <_ZN6CQueueD1Ev>
 8020c06:	6878      	ldr	r0, [r7, #4]
 8020c08:	f7ff fb6a 	bl	80202e0 <_ZN12AManagedTaskD1Ev>
 8020c0c:	f04f 0300 	mov.w	r3, #0
 8020c10:	f003 0301 	and.w	r3, r3, #1
 8020c14:	b2db      	uxtb	r3, r3
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d002      	beq.n	8020c20 <_ZN12CMessageTaskD1Ev+0x34>
 8020c1a:	6878      	ldr	r0, [r7, #4]
 8020c1c:	f003 ff08 	bl	8024a30 <_ZdlPv>
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	4618      	mov	r0, r3
 8020c24:	f107 0708 	add.w	r7, r7, #8
 8020c28:	46bd      	mov	sp, r7
 8020c2a:	bd80      	pop	{r7, pc}
 8020c2c:	08028070 	.word	0x08028070

08020c30 <_ZN12CMessageTaskD0Ev>:
{
	m_pDelegate = NULL;
	m_nTimeOut = portMAX_DELAY;
}

CMessageTask::~CMessageTask() {
 8020c30:	b580      	push	{r7, lr}
 8020c32:	b082      	sub	sp, #8
 8020c34:	af00      	add	r7, sp, #0
 8020c36:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8020c38:	6878      	ldr	r0, [r7, #4]
 8020c3a:	f7ff ffd7 	bl	8020bec <_ZN12CMessageTaskD1Ev>
 8020c3e:	6878      	ldr	r0, [r7, #4]
 8020c40:	f003 fef6 	bl	8024a30 <_ZdlPv>
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	4618      	mov	r0, r3
 8020c48:	f107 0708 	add.w	r7, r7, #8
 8020c4c:	46bd      	mov	sp, r7
 8020c4e:	bd80      	pop	{r7, pc}

08020c50 <_ZN12CMessageTask8OnCreateEPKctm>:

portBASE_TYPE CMessageTask::OnCreate(const portCHAR * const pcName, unsigned portSHORT usStackDepth, unsigned portBASE_TYPE uxPriority) {
 8020c50:	b580      	push	{r7, lr}
 8020c52:	b086      	sub	sp, #24
 8020c54:	af00      	add	r7, sp, #0
 8020c56:	60f8      	str	r0, [r7, #12]
 8020c58:	60b9      	str	r1, [r7, #8]
 8020c5a:	603b      	str	r3, [r7, #0]
 8020c5c:	4613      	mov	r3, r2
 8020c5e:	80fb      	strh	r3, [r7, #6]
	portBASE_TYPE res;
	res = m_queue.Create(CMessageTask::MESSAGE_QUEUE_SIZE, sizeof(char[20])).IsValid();
 8020c60:	68fb      	ldr	r3, [r7, #12]
 8020c62:	f103 0310 	add.w	r3, r3, #16
 8020c66:	4618      	mov	r0, r3
 8020c68:	f04f 0105 	mov.w	r1, #5
 8020c6c:	f04f 0214 	mov.w	r2, #20
 8020c70:	f000 face 	bl	8021210 <_ZN6CQueue6CreateEmm>
 8020c74:	4603      	mov	r3, r0
 8020c76:	681a      	ldr	r2, [r3, #0]
 8020c78:	6812      	ldr	r2, [r2, #0]
 8020c7a:	4618      	mov	r0, r3
 8020c7c:	4790      	blx	r2
 8020c7e:	4603      	mov	r3, r0
 8020c80:	617b      	str	r3, [r7, #20]

	return res;
 8020c82:	697b      	ldr	r3, [r7, #20]
}
 8020c84:	4618      	mov	r0, r3
 8020c86:	f107 0718 	add.w	r7, r7, #24
 8020c8a:	46bd      	mov	sp, r7
 8020c8c:	bd80      	pop	{r7, pc}
 8020c8e:	bf00      	nop

08020c90 <_ZN12CMessageTask3RunEv>:

void CMessageTask::Run() {
 8020c90:	b580      	push	{r7, lr}
 8020c92:	b084      	sub	sp, #16
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	6078      	str	r0, [r7, #4]

	// call task specific initialization code.
	 if ( !OnInit() ) {
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	6878      	ldr	r0, [r7, #4]
 8020ca4:	4798      	blx	r3
 8020ca6:	4603      	mov	r3, r0
 8020ca8:	f083 0301 	eor.w	r3, r3, #1
 8020cac:	b2db      	uxtb	r3, r3
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	d008      	beq.n	8020cc4 <_ZN12CMessageTask3RunEv+0x34>
#if INCLUDE_vTaskDelete == 1
		 Delete();
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	4618      	mov	r0, r3
 8020cb6:	f000 fc6f 	bl	8021598 <_ZN5CTask6DeleteEv>
		else {
			// TODO: STF - timeout expired.
			OnTimeOut();
		}
	}
}
 8020cba:	f107 0710 	add.w	r7, r7, #16
 8020cbe:	46bd      	mov	sp, r7
 8020cc0:	bd80      	pop	{r7, pc}
		 Suspend();
#endif
	 }

	CMessage msg;
	for (;;) {
 8020cc2:	bf00      	nop

		if ( m_queue.Receive(&msg, m_nTimeOut) == pdTRUE ) {
 8020cc4:	687b      	ldr	r3, [r7, #4]
 8020cc6:	f103 0110 	add.w	r1, r3, #16
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	68db      	ldr	r3, [r3, #12]
 8020cce:	f107 0208 	add.w	r2, r7, #8
 8020cd2:	4608      	mov	r0, r1
 8020cd4:	4611      	mov	r1, r2
 8020cd6:	461a      	mov	r2, r3
 8020cd8:	f7ff fef4 	bl	8020ac4 <_ZN6CQueue7ReceiveEPvm>
 8020cdc:	4603      	mov	r3, r0
 8020cde:	2b01      	cmp	r3, #1
 8020ce0:	bf14      	ite	ne
 8020ce2:	2300      	movne	r3, #0
 8020ce4:	2301      	moveq	r3, #1
 8020ce6:	b2db      	uxtb	r3, r3
 8020ce8:	2b00      	cmp	r3, #0
 8020cea:	d02a      	beq.n	8020d42 <_ZN12CMessageTask3RunEv+0xb2>
			// Message Handling routine

			// Call the delegate, if one, before try to dispatch the event
			if (m_pDelegate) m_pDelegate->OnHandleEvent(msg);
 8020cec:	687b      	ldr	r3, [r7, #4]
 8020cee:	699b      	ldr	r3, [r3, #24]
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	d00a      	beq.n	8020d0a <_ZN12CMessageTask3RunEv+0x7a>
 8020cf4:	687b      	ldr	r3, [r7, #4]
 8020cf6:	699b      	ldr	r3, [r3, #24]
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	681b      	ldr	r3, [r3, #0]
 8020cfc:	687a      	ldr	r2, [r7, #4]
 8020cfe:	6991      	ldr	r1, [r2, #24]
 8020d00:	f107 0208 	add.w	r2, r7, #8
 8020d04:	4608      	mov	r0, r1
 8020d06:	4611      	mov	r1, r2
 8020d08:	4798      	blx	r3
			DispatchMessage(msg);
 8020d0a:	687b      	ldr	r3, [r7, #4]
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	f103 0320 	add.w	r3, r3, #32
 8020d12:	681b      	ldr	r3, [r3, #0]
 8020d14:	f107 0208 	add.w	r2, r7, #8
 8020d18:	6878      	ldr	r0, [r7, #4]
 8020d1a:	4611      	mov	r1, r2
 8020d1c:	4798      	blx	r3
			// Call the delegate, if one, after tried to dispatch the event
			if (m_pDelegate) m_pDelegate->DidHandleEvent(msg);
 8020d1e:	687b      	ldr	r3, [r7, #4]
 8020d20:	699b      	ldr	r3, [r3, #24]
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	d0cd      	beq.n	8020cc2 <_ZN12CMessageTask3RunEv+0x32>
 8020d26:	687b      	ldr	r3, [r7, #4]
 8020d28:	699b      	ldr	r3, [r3, #24]
 8020d2a:	681b      	ldr	r3, [r3, #0]
 8020d2c:	f103 0304 	add.w	r3, r3, #4
 8020d30:	681b      	ldr	r3, [r3, #0]
 8020d32:	687a      	ldr	r2, [r7, #4]
 8020d34:	6991      	ldr	r1, [r2, #24]
 8020d36:	f107 0208 	add.w	r2, r7, #8
 8020d3a:	4608      	mov	r0, r1
 8020d3c:	4611      	mov	r1, r2
 8020d3e:	4798      	blx	r3
		 Suspend();
#endif
	 }

	CMessage msg;
	for (;;) {
 8020d40:	e7bf      	b.n	8020cc2 <_ZN12CMessageTask3RunEv+0x32>
			// Call the delegate, if one, after tried to dispatch the event
			if (m_pDelegate) m_pDelegate->DidHandleEvent(msg);
		}
		else {
			// TODO: STF - timeout expired.
			OnTimeOut();
 8020d42:	687b      	ldr	r3, [r7, #4]
 8020d44:	681b      	ldr	r3, [r3, #0]
 8020d46:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8020d4a:	681b      	ldr	r3, [r3, #0]
 8020d4c:	6878      	ldr	r0, [r7, #4]
 8020d4e:	4798      	blx	r3
		 Suspend();
#endif
	 }

	CMessage msg;
	for (;;) {
 8020d50:	e7b7      	b.n	8020cc2 <_ZN12CMessageTask3RunEv+0x32>
 8020d52:	bf00      	nop

08020d54 <_ZN12CMessageTask15DispatchMessageERK8CMessage>:
			OnTimeOut();
		}
	}
}

void CMessageTask::DispatchMessage(const CMessage &msg) {
 8020d54:	b590      	push	{r4, r7, lr}
 8020d56:	b085      	sub	sp, #20
 8020d58:	af00      	add	r7, sp, #0
 8020d5a:	6078      	str	r0, [r7, #4]
 8020d5c:	6039      	str	r1, [r7, #0]
	for (int i=0; s_message_map[i].id!=NULL_MSG; ++i) {
 8020d5e:	f04f 0300 	mov.w	r3, #0
 8020d62:	60fb      	str	r3, [r7, #12]
 8020d64:	e077      	b.n	8020e56 <_ZN12CMessageTask15DispatchMessageERK8CMessage+0x102>
		if (s_message_map[i].id == msg.m_nId) {
 8020d66:	f248 025c 	movw	r2, #32860	; 0x805c
 8020d6a:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020d6e:	68f9      	ldr	r1, [r7, #12]
 8020d70:	460b      	mov	r3, r1
 8020d72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020d76:	185b      	adds	r3, r3, r1
 8020d78:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8020d7c:	18d3      	adds	r3, r2, r3
 8020d7e:	881a      	ldrh	r2, [r3, #0]
 8020d80:	683b      	ldr	r3, [r7, #0]
 8020d82:	881b      	ldrh	r3, [r3, #0]
 8020d84:	429a      	cmp	r2, r3
 8020d86:	d162      	bne.n	8020e4e <_ZN12CMessageTask15DispatchMessageERK8CMessage+0xfa>
			(this->*s_message_map[i].MessageHandler)(msg.wParam);
 8020d88:	f248 025c 	movw	r2, #32860	; 0x805c
 8020d8c:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020d90:	68f9      	ldr	r1, [r7, #12]
 8020d92:	460b      	mov	r3, r1
 8020d94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020d98:	185b      	adds	r3, r3, r1
 8020d9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8020d9e:	18d3      	adds	r3, r2, r3
 8020da0:	f103 0308 	add.w	r3, r3, #8
 8020da4:	681b      	ldr	r3, [r3, #0]
 8020da6:	f003 0301 	and.w	r3, r3, #1
 8020daa:	b2db      	uxtb	r3, r3
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	d026      	beq.n	8020dfe <_ZN12CMessageTask15DispatchMessageERK8CMessage+0xaa>
 8020db0:	f248 025c 	movw	r2, #32860	; 0x805c
 8020db4:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020db8:	68f9      	ldr	r1, [r7, #12]
 8020dba:	460b      	mov	r3, r1
 8020dbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020dc0:	185b      	adds	r3, r3, r1
 8020dc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8020dc6:	18d3      	adds	r3, r2, r3
 8020dc8:	f103 0308 	add.w	r3, r3, #8
 8020dcc:	681b      	ldr	r3, [r3, #0]
 8020dce:	ea4f 0363 	mov.w	r3, r3, asr #1
 8020dd2:	687a      	ldr	r2, [r7, #4]
 8020dd4:	18d3      	adds	r3, r2, r3
 8020dd6:	6818      	ldr	r0, [r3, #0]
 8020dd8:	f248 025c 	movw	r2, #32860	; 0x805c
 8020ddc:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020de0:	68f9      	ldr	r1, [r7, #12]
 8020de2:	460b      	mov	r3, r1
 8020de4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020de8:	185b      	adds	r3, r3, r1
 8020dea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8020dee:	18d3      	adds	r3, r2, r3
 8020df0:	f103 0304 	add.w	r3, r3, #4
 8020df4:	681b      	ldr	r3, [r3, #0]
 8020df6:	18c3      	adds	r3, r0, r3
 8020df8:	681b      	ldr	r3, [r3, #0]
 8020dfa:	461c      	mov	r4, r3
 8020dfc:	e00e      	b.n	8020e1c <_ZN12CMessageTask15DispatchMessageERK8CMessage+0xc8>
 8020dfe:	f248 025c 	movw	r2, #32860	; 0x805c
 8020e02:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020e06:	68f9      	ldr	r1, [r7, #12]
 8020e08:	460b      	mov	r3, r1
 8020e0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020e0e:	185b      	adds	r3, r3, r1
 8020e10:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8020e14:	18d3      	adds	r3, r2, r3
 8020e16:	f103 0304 	add.w	r3, r3, #4
 8020e1a:	681c      	ldr	r4, [r3, #0]
 8020e1c:	f248 025c 	movw	r2, #32860	; 0x805c
 8020e20:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020e24:	68f9      	ldr	r1, [r7, #12]
 8020e26:	460b      	mov	r3, r1
 8020e28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020e2c:	185b      	adds	r3, r3, r1
 8020e2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8020e32:	18d3      	adds	r3, r2, r3
 8020e34:	f103 0308 	add.w	r3, r3, #8
 8020e38:	681b      	ldr	r3, [r3, #0]
 8020e3a:	ea4f 0363 	mov.w	r3, r3, asr #1
 8020e3e:	687a      	ldr	r2, [r7, #4]
 8020e40:	18d2      	adds	r2, r2, r3
 8020e42:	683b      	ldr	r3, [r7, #0]
 8020e44:	685b      	ldr	r3, [r3, #4]
 8020e46:	4610      	mov	r0, r2
 8020e48:	4619      	mov	r1, r3
 8020e4a:	47a0      	blx	r4
			break;
 8020e4c:	e018      	b.n	8020e80 <_ZN12CMessageTask15DispatchMessageERK8CMessage+0x12c>
		}
	}
}

void CMessageTask::DispatchMessage(const CMessage &msg) {
	for (int i=0; s_message_map[i].id!=NULL_MSG; ++i) {
 8020e4e:	68fb      	ldr	r3, [r7, #12]
 8020e50:	f103 0301 	add.w	r3, r3, #1
 8020e54:	60fb      	str	r3, [r7, #12]
 8020e56:	f248 025c 	movw	r2, #32860	; 0x805c
 8020e5a:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020e5e:	68f9      	ldr	r1, [r7, #12]
 8020e60:	460b      	mov	r3, r1
 8020e62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020e66:	185b      	adds	r3, r3, r1
 8020e68:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8020e6c:	18d3      	adds	r3, r2, r3
 8020e6e:	881b      	ldrh	r3, [r3, #0]
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	bf0c      	ite	eq
 8020e74:	2300      	moveq	r3, #0
 8020e76:	2301      	movne	r3, #1
 8020e78:	b2db      	uxtb	r3, r3
 8020e7a:	2b00      	cmp	r3, #0
 8020e7c:	f47f af73 	bne.w	8020d66 <_ZN12CMessageTask15DispatchMessageERK8CMessage+0x12>
		if (s_message_map[i].id == msg.m_nId) {
			(this->*s_message_map[i].MessageHandler)(msg.wParam);
			break;
		}
	}
}
 8020e80:	f107 0714 	add.w	r7, r7, #20
 8020e84:	46bd      	mov	sp, r7
 8020e86:	bd90      	pop	{r4, r7, pc}

08020e88 <_ZN12CMessageTask11PostMessageEP8CMessagem>:

bool CMessageTask::PostMessage(CMessage *pMsg, portTickType nTicksToWait/*=portMAX_DELAY*/) {
 8020e88:	b580      	push	{r7, lr}
 8020e8a:	b084      	sub	sp, #16
 8020e8c:	af00      	add	r7, sp, #0
 8020e8e:	60f8      	str	r0, [r7, #12]
 8020e90:	60b9      	str	r1, [r7, #8]
 8020e92:	607a      	str	r2, [r7, #4]
	return (bool)m_queue.Send(pMsg, nTicksToWait);
 8020e94:	68fb      	ldr	r3, [r7, #12]
 8020e96:	f103 0310 	add.w	r3, r3, #16
 8020e9a:	4618      	mov	r0, r3
 8020e9c:	68b9      	ldr	r1, [r7, #8]
 8020e9e:	687a      	ldr	r2, [r7, #4]
 8020ea0:	f7ff fdb6 	bl	8020a10 <_ZN6CQueue4SendEPKvm>
 8020ea4:	4603      	mov	r3, r0
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	bf0c      	ite	eq
 8020eaa:	2300      	moveq	r3, #0
 8020eac:	2301      	movne	r3, #1
 8020eae:	b2db      	uxtb	r3, r3
}
 8020eb0:	4618      	mov	r0, r3
 8020eb2:	f107 0710 	add.w	r7, r7, #16
 8020eb6:	46bd      	mov	sp, r7
 8020eb8:	bd80      	pop	{r7, pc}
 8020eba:	bf00      	nop

08020ebc <_ZN12CMessageTask18PostMessageFromISREP8CMessagePl>:

bool CMessageTask::PostMessageFromISR(CMessage *pMsg, portBASE_TYPE *pxHigherPriorityTaskWoken) {
 8020ebc:	b580      	push	{r7, lr}
 8020ebe:	b084      	sub	sp, #16
 8020ec0:	af00      	add	r7, sp, #0
 8020ec2:	60f8      	str	r0, [r7, #12]
 8020ec4:	60b9      	str	r1, [r7, #8]
 8020ec6:	607a      	str	r2, [r7, #4]
	return (bool)m_queue.SendFromISR(pMsg, pxHigherPriorityTaskWoken);
 8020ec8:	68fb      	ldr	r3, [r7, #12]
 8020eca:	f103 0310 	add.w	r3, r3, #16
 8020ece:	4618      	mov	r0, r3
 8020ed0:	68b9      	ldr	r1, [r7, #8]
 8020ed2:	687a      	ldr	r2, [r7, #4]
 8020ed4:	f7ff fdb2 	bl	8020a3c <_ZN6CQueue11SendFromISREPKvPl>
 8020ed8:	4603      	mov	r3, r0
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	bf0c      	ite	eq
 8020ede:	2300      	moveq	r3, #0
 8020ee0:	2301      	movne	r3, #1
 8020ee2:	b2db      	uxtb	r3, r3
}
 8020ee4:	4618      	mov	r0, r3
 8020ee6:	f107 0710 	add.w	r7, r7, #16
 8020eea:	46bd      	mov	sp, r7
 8020eec:	bd80      	pop	{r7, pc}
 8020eee:	bf00      	nop

08020ef0 <_ZN12CMessageTask11SendMessageEP8CMessagem>:

bool CMessageTask::SendMessage(CMessage *pMsg, portTickType nTicksToWait/*=portMAX_DELAY*/) {
 8020ef0:	b580      	push	{r7, lr}
 8020ef2:	b084      	sub	sp, #16
 8020ef4:	af00      	add	r7, sp, #0
 8020ef6:	60f8      	str	r0, [r7, #12]
 8020ef8:	60b9      	str	r1, [r7, #8]
 8020efa:	607a      	str	r2, [r7, #4]
	return (bool)m_queue.SendToFront(pMsg, nTicksToWait);
 8020efc:	68fb      	ldr	r3, [r7, #12]
 8020efe:	f103 0310 	add.w	r3, r3, #16
 8020f02:	4618      	mov	r0, r3
 8020f04:	68b9      	ldr	r1, [r7, #8]
 8020f06:	687a      	ldr	r2, [r7, #4]
 8020f08:	f7ff fdae 	bl	8020a68 <_ZN6CQueue11SendToFrontEPKvm>
 8020f0c:	4603      	mov	r3, r0
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	bf0c      	ite	eq
 8020f12:	2300      	moveq	r3, #0
 8020f14:	2301      	movne	r3, #1
 8020f16:	b2db      	uxtb	r3, r3
}
 8020f18:	4618      	mov	r0, r3
 8020f1a:	f107 0710 	add.w	r7, r7, #16
 8020f1e:	46bd      	mov	sp, r7
 8020f20:	bd80      	pop	{r7, pc}
 8020f22:	bf00      	nop

08020f24 <_ZN12CMessageTask11SenfFromISREP8CMessagePl>:

bool CMessageTask::SenfFromISR(CMessage *pMsg, portBASE_TYPE * pxHigherPriorityTaskWoken) {
 8020f24:	b580      	push	{r7, lr}
 8020f26:	b084      	sub	sp, #16
 8020f28:	af00      	add	r7, sp, #0
 8020f2a:	60f8      	str	r0, [r7, #12]
 8020f2c:	60b9      	str	r1, [r7, #8]
 8020f2e:	607a      	str	r2, [r7, #4]
	return (bool)m_queue.SendToFrontFromISR(pMsg, pxHigherPriorityTaskWoken);
 8020f30:	68fb      	ldr	r3, [r7, #12]
 8020f32:	f103 0310 	add.w	r3, r3, #16
 8020f36:	4618      	mov	r0, r3
 8020f38:	68b9      	ldr	r1, [r7, #8]
 8020f3a:	687a      	ldr	r2, [r7, #4]
 8020f3c:	f7ff fdf0 	bl	8020b20 <_ZN6CQueue18SendToFrontFromISREPKvPl>
 8020f40:	4603      	mov	r3, r0
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	bf0c      	ite	eq
 8020f46:	2300      	moveq	r3, #0
 8020f48:	2301      	movne	r3, #1
 8020f4a:	b2db      	uxtb	r3, r3
}
 8020f4c:	4618      	mov	r0, r3
 8020f4e:	f107 0710 	add.w	r7, r7, #16
 8020f52:	46bd      	mov	sp, r7
 8020f54:	bd80      	pop	{r7, pc}
 8020f56:	bf00      	nop

08020f58 <_ZN6CMutex4TakeEm>:


// inline methods implementation

inline
portBASE_TYPE CMutex::Take(portTickType xBlockTime) {
 8020f58:	b580      	push	{r7, lr}
 8020f5a:	b082      	sub	sp, #8
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	6078      	str	r0, [r7, #4]
 8020f60:	6039      	str	r1, [r7, #0]
	assert(IsValid());
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	681b      	ldr	r3, [r3, #0]
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	687a      	ldr	r2, [r7, #4]
 8020f6a:	4610      	mov	r0, r2
 8020f6c:	4798      	blx	r3
 8020f6e:	4603      	mov	r3, r0
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d10f      	bne.n	8020f94 <_ZN6CMutex4TakeEm+0x3c>
 8020f74:	f645 604c 	movw	r0, #24140	; 0x5e4c
 8020f78:	f6c0 0002 	movt	r0, #2050	; 0x802
 8020f7c:	f04f 0152 	mov.w	r1, #82	; 0x52
 8020f80:	f248 1290 	movw	r2, #33168	; 0x8190
 8020f84:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020f88:	f645 636c 	movw	r3, #24172	; 0x5e6c
 8020f8c:	f6c0 0302 	movt	r3, #2050	; 0x802
 8020f90:	f7e5 fdb2 	bl	8006af8 <__assert_func>

	return xSemaphoreTake(m_handleSemaphore, xBlockTime);
 8020f94:	687b      	ldr	r3, [r7, #4]
 8020f96:	685b      	ldr	r3, [r3, #4]
 8020f98:	4618      	mov	r0, r3
 8020f9a:	f04f 0100 	mov.w	r1, #0
 8020f9e:	683a      	ldr	r2, [r7, #0]
 8020fa0:	f04f 0300 	mov.w	r3, #0
 8020fa4:	f001 f948 	bl	8022238 <xQueueGenericReceive>
 8020fa8:	4603      	mov	r3, r0
}
 8020faa:	4618      	mov	r0, r3
 8020fac:	f107 0708 	add.w	r7, r7, #8
 8020fb0:	46bd      	mov	sp, r7
 8020fb2:	bd80      	pop	{r7, pc}

08020fb4 <_ZN6CMutex4GiveEv>:

inline
portBASE_TYPE CMutex::Give() {
 8020fb4:	b580      	push	{r7, lr}
 8020fb6:	b082      	sub	sp, #8
 8020fb8:	af00      	add	r7, sp, #0
 8020fba:	6078      	str	r0, [r7, #4]
	assert(IsValid());
 8020fbc:	687b      	ldr	r3, [r7, #4]
 8020fbe:	681b      	ldr	r3, [r3, #0]
 8020fc0:	681b      	ldr	r3, [r3, #0]
 8020fc2:	687a      	ldr	r2, [r7, #4]
 8020fc4:	4610      	mov	r0, r2
 8020fc6:	4798      	blx	r3
 8020fc8:	4603      	mov	r3, r0
 8020fca:	2b00      	cmp	r3, #0
 8020fcc:	d10f      	bne.n	8020fee <_ZN6CMutex4GiveEv+0x3a>
 8020fce:	f645 604c 	movw	r0, #24140	; 0x5e4c
 8020fd2:	f6c0 0002 	movt	r0, #2050	; 0x802
 8020fd6:	f04f 0159 	mov.w	r1, #89	; 0x59
 8020fda:	f248 1270 	movw	r2, #33136	; 0x8170
 8020fde:	f6c0 0202 	movt	r2, #2050	; 0x802
 8020fe2:	f645 636c 	movw	r3, #24172	; 0x5e6c
 8020fe6:	f6c0 0302 	movt	r3, #2050	; 0x802
 8020fea:	f7e5 fd85 	bl	8006af8 <__assert_func>

	return xSemaphoreGive(m_handleSemaphore);
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	685b      	ldr	r3, [r3, #4]
 8020ff2:	4618      	mov	r0, r3
 8020ff4:	f04f 0100 	mov.w	r1, #0
 8020ff8:	f04f 0200 	mov.w	r2, #0
 8020ffc:	f04f 0300 	mov.w	r3, #0
 8021000:	f001 f840 	bl	8022084 <xQueueGenericSend>
 8021004:	4603      	mov	r3, r0
}
 8021006:	4618      	mov	r0, r3
 8021008:	f107 0708 	add.w	r7, r7, #8
 802100c:	46bd      	mov	sp, r7
 802100e:	bd80      	pop	{r7, pc}

08021010 <_ZN6CMutexC1Ev>:
 *      E-Mail: software@stf12.net
 */

#include "CMutex.h"

CMutex::CMutex() {
 8021010:	b580      	push	{r7, lr}
 8021012:	b082      	sub	sp, #8
 8021014:	af00      	add	r7, sp, #0
 8021016:	6078      	str	r0, [r7, #4]
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	4618      	mov	r0, r3
 802101c:	f7ff faa0 	bl	8020560 <_ZN11ASyncObjectC1Ev>
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	4a04      	ldr	r2, [pc, #16]	; (8021034 <_ZN6CMutexC1Ev+0x24>)
 8021024:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	4618      	mov	r0, r3
 802102a:	f107 0708 	add.w	r7, r7, #8
 802102e:	46bd      	mov	sp, r7
 8021030:	bd80      	pop	{r7, pc}
 8021032:	bf00      	nop
 8021034:	08028150 	.word	0x08028150

08021038 <_ZN6CMutexD1Ev>:

CMutex::~CMutex() {
 8021038:	b580      	push	{r7, lr}
 802103a:	b082      	sub	sp, #8
 802103c:	af00      	add	r7, sp, #0
 802103e:	6078      	str	r0, [r7, #4]
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	4a0a      	ldr	r2, [pc, #40]	; (802106c <_ZN6CMutexD1Ev+0x34>)
 8021044:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8021046:	6878      	ldr	r0, [r7, #4]
 8021048:	f7ff faa2 	bl	8020590 <_ZN11ASyncObjectD1Ev>
 802104c:	f04f 0300 	mov.w	r3, #0
 8021050:	f003 0301 	and.w	r3, r3, #1
 8021054:	b2db      	uxtb	r3, r3
 8021056:	2b00      	cmp	r3, #0
 8021058:	d002      	beq.n	8021060 <_ZN6CMutexD1Ev+0x28>
 802105a:	6878      	ldr	r0, [r7, #4]
 802105c:	f003 fce8 	bl	8024a30 <_ZdlPv>
 8021060:	687b      	ldr	r3, [r7, #4]
 8021062:	4618      	mov	r0, r3
 8021064:	f107 0708 	add.w	r7, r7, #8
 8021068:	46bd      	mov	sp, r7
 802106a:	bd80      	pop	{r7, pc}
 802106c:	08028150 	.word	0x08028150

08021070 <_ZN6CMutexD0Ev>:
CMutex::CMutex() {
	// TODO Auto-generated constructor stub

}

CMutex::~CMutex() {
 8021070:	b580      	push	{r7, lr}
 8021072:	b082      	sub	sp, #8
 8021074:	af00      	add	r7, sp, #0
 8021076:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8021078:	6878      	ldr	r0, [r7, #4]
 802107a:	f7ff ffdd 	bl	8021038 <_ZN6CMutexD1Ev>
 802107e:	6878      	ldr	r0, [r7, #4]
 8021080:	f003 fcd6 	bl	8024a30 <_ZdlPv>
 8021084:	687b      	ldr	r3, [r7, #4]
 8021086:	4618      	mov	r0, r3
 8021088:	f107 0708 	add.w	r7, r7, #8
 802108c:	46bd      	mov	sp, r7
 802108e:	bd80      	pop	{r7, pc}

08021090 <_ZN6CMutexC1EPv>:

CMutex::CMutex(xSemaphoreHandle handleSemaphore) {
 8021090:	b580      	push	{r7, lr}
 8021092:	b082      	sub	sp, #8
 8021094:	af00      	add	r7, sp, #0
 8021096:	6078      	str	r0, [r7, #4]
 8021098:	6039      	str	r1, [r7, #0]
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	4618      	mov	r0, r3
 802109e:	f7ff fa5f 	bl	8020560 <_ZN11ASyncObjectC1Ev>
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	4a06      	ldr	r2, [pc, #24]	; (80210c0 <_ZN6CMutexC1EPv+0x30>)
 80210a6:	601a      	str	r2, [r3, #0]
	Attach(handleSemaphore);
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	4618      	mov	r0, r3
 80210ac:	6839      	ldr	r1, [r7, #0]
 80210ae:	f7ff fab7 	bl	8020620 <_ZN11ASyncObject6AttachEPv>
}
 80210b2:	687b      	ldr	r3, [r7, #4]
 80210b4:	4618      	mov	r0, r3
 80210b6:	f107 0708 	add.w	r7, r7, #8
 80210ba:	46bd      	mov	sp, r7
 80210bc:	bd80      	pop	{r7, pc}
 80210be:	bf00      	nop
 80210c0:	08028150 	.word	0x08028150

080210c4 <_ZN6CMutex6CreateEv>:

bool CMutex::Create() {
 80210c4:	b580      	push	{r7, lr}
 80210c6:	b084      	sub	sp, #16
 80210c8:	af00      	add	r7, sp, #0
 80210ca:	6078      	str	r0, [r7, #4]

#if ( configUSE_MUTEXES == 1 )

	xSemaphoreHandle handle;

	handle = xSemaphoreCreateMutex();
 80210cc:	f000 ff8e 	bl	8021fec <xQueueCreateMutex>
 80210d0:	4603      	mov	r3, r0
 80210d2:	60fb      	str	r3, [r7, #12]

	if (handle != NULL)
 80210d4:	68fb      	ldr	r3, [r7, #12]
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	d008      	beq.n	80210ec <_ZN6CMutex6CreateEv+0x28>
		Attach(handle);
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	681b      	ldr	r3, [r3, #0]
 80210de:	f103 0304 	add.w	r3, r3, #4
 80210e2:	681b      	ldr	r3, [r3, #0]
 80210e4:	687a      	ldr	r2, [r7, #4]
 80210e6:	4610      	mov	r0, r2
 80210e8:	68f9      	ldr	r1, [r7, #12]
 80210ea:	4798      	blx	r3
#endif

	return IsValid();
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	681b      	ldr	r3, [r3, #0]
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	687a      	ldr	r2, [r7, #4]
 80210f4:	4610      	mov	r0, r2
 80210f6:	4798      	blx	r3
 80210f8:	4603      	mov	r3, r0
}
 80210fa:	4618      	mov	r0, r3
 80210fc:	f107 0710 	add.w	r7, r7, #16
 8021100:	46bd      	mov	sp, r7
 8021102:	bd80      	pop	{r7, pc}

08021104 <_ZNK6CQueue7IsValidEv>:
	vQueueAddToRegistry(m_handleQueue, pcQueueName);
#endif
}

inline
bool CQueue::IsValid() const{
 8021104:	b480      	push	{r7}
 8021106:	b083      	sub	sp, #12
 8021108:	af00      	add	r7, sp, #0
 802110a:	6078      	str	r0, [r7, #4]
	return m_handleQueue != NULL;
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	685b      	ldr	r3, [r3, #4]
 8021110:	2b00      	cmp	r3, #0
 8021112:	bf0c      	ite	eq
 8021114:	2300      	moveq	r3, #0
 8021116:	2301      	movne	r3, #1
 8021118:	b2db      	uxtb	r3, r3
}
 802111a:	4618      	mov	r0, r3
 802111c:	f107 070c 	add.w	r7, r7, #12
 8021120:	46bd      	mov	sp, r7
 8021122:	bc80      	pop	{r7}
 8021124:	4770      	bx	lr
 8021126:	bf00      	nop

08021128 <_ZN6CQueue6DetachEv>:

inline
xGenericHandle CQueue::Detach() {
 8021128:	b480      	push	{r7}
 802112a:	b085      	sub	sp, #20
 802112c:	af00      	add	r7, sp, #0
 802112e:	6078      	str	r0, [r7, #4]
	xQueueHandle res = m_handleQueue;
 8021130:	687b      	ldr	r3, [r7, #4]
 8021132:	685b      	ldr	r3, [r3, #4]
 8021134:	60fb      	str	r3, [r7, #12]
	m_handleQueue = NULL;
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	f04f 0200 	mov.w	r2, #0
 802113c:	605a      	str	r2, [r3, #4]
	return res;
 802113e:	68fb      	ldr	r3, [r7, #12]
}
 8021140:	4618      	mov	r0, r3
 8021142:	f107 0714 	add.w	r7, r7, #20
 8021146:	46bd      	mov	sp, r7
 8021148:	bc80      	pop	{r7}
 802114a:	4770      	bx	lr

0802114c <_ZN6CQueueC1Ev>:
 */

#include "CQueue.h"


CQueue::CQueue() {
 802114c:	b580      	push	{r7, lr}
 802114e:	b082      	sub	sp, #8
 8021150:	af00      	add	r7, sp, #0
 8021152:	6078      	str	r0, [r7, #4]
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	4618      	mov	r0, r3
 8021158:	f7ff f9f2 	bl	8020540 <_ZN12IFreeRTOSObjC1Ev>
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	4a06      	ldr	r2, [pc, #24]	; (8021178 <_ZN6CQueueC1Ev+0x2c>)
 8021160:	601a      	str	r2, [r3, #0]
	m_handleQueue = NULL;
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	f04f 0200 	mov.w	r2, #0
 8021168:	605a      	str	r2, [r3, #4]
}
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	4618      	mov	r0, r3
 802116e:	f107 0708 	add.w	r7, r7, #8
 8021172:	46bd      	mov	sp, r7
 8021174:	bd80      	pop	{r7, pc}
 8021176:	bf00      	nop
 8021178:	080281c8 	.word	0x080281c8

0802117c <_ZN6CQueueD1Ev>:

CQueue::~CQueue() {
 802117c:	b580      	push	{r7, lr}
 802117e:	b082      	sub	sp, #8
 8021180:	af00      	add	r7, sp, #0
 8021182:	6078      	str	r0, [r7, #4]
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	4a0d      	ldr	r2, [pc, #52]	; (80211bc <_ZN6CQueueD1Ev+0x40>)
 8021188:	601a      	str	r2, [r3, #0]
	if (IsValid())
 802118a:	6878      	ldr	r0, [r7, #4]
 802118c:	f7ff ffba 	bl	8021104 <_ZNK6CQueue7IsValidEv>
 8021190:	4603      	mov	r3, r0
 8021192:	2b00      	cmp	r3, #0
 8021194:	d002      	beq.n	802119c <_ZN6CQueueD1Ev+0x20>
		Delete();
 8021196:	6878      	ldr	r0, [r7, #4]
 8021198:	f000 f89a 	bl	80212d0 <_ZN6CQueue6DeleteEv>
}
 802119c:	f04f 0300 	mov.w	r3, #0
 80211a0:	f003 0301 	and.w	r3, r3, #1
 80211a4:	b2db      	uxtb	r3, r3
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	d002      	beq.n	80211b0 <_ZN6CQueueD1Ev+0x34>
 80211aa:	6878      	ldr	r0, [r7, #4]
 80211ac:	f003 fc40 	bl	8024a30 <_ZdlPv>
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	4618      	mov	r0, r3
 80211b4:	f107 0708 	add.w	r7, r7, #8
 80211b8:	46bd      	mov	sp, r7
 80211ba:	bd80      	pop	{r7, pc}
 80211bc:	080281c8 	.word	0x080281c8

080211c0 <_ZN6CQueueD0Ev>:

CQueue::CQueue() {
	m_handleQueue = NULL;
}

CQueue::~CQueue() {
 80211c0:	b580      	push	{r7, lr}
 80211c2:	b082      	sub	sp, #8
 80211c4:	af00      	add	r7, sp, #0
 80211c6:	6078      	str	r0, [r7, #4]
	if (IsValid())
		Delete();
}
 80211c8:	6878      	ldr	r0, [r7, #4]
 80211ca:	f7ff ffd7 	bl	802117c <_ZN6CQueueD1Ev>
 80211ce:	6878      	ldr	r0, [r7, #4]
 80211d0:	f003 fc2e 	bl	8024a30 <_ZdlPv>
 80211d4:	687b      	ldr	r3, [r7, #4]
 80211d6:	4618      	mov	r0, r3
 80211d8:	f107 0708 	add.w	r7, r7, #8
 80211dc:	46bd      	mov	sp, r7
 80211de:	bd80      	pop	{r7, pc}

080211e0 <_ZN6CQueueC1EPv>:

CQueue::CQueue(xQueueHandle handleQueue) {
 80211e0:	b580      	push	{r7, lr}
 80211e2:	b082      	sub	sp, #8
 80211e4:	af00      	add	r7, sp, #0
 80211e6:	6078      	str	r0, [r7, #4]
 80211e8:	6039      	str	r1, [r7, #0]
 80211ea:	687b      	ldr	r3, [r7, #4]
 80211ec:	4618      	mov	r0, r3
 80211ee:	f7ff f9a7 	bl	8020540 <_ZN12IFreeRTOSObjC1Ev>
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	4a05      	ldr	r2, [pc, #20]	; (802120c <_ZN6CQueueC1EPv+0x2c>)
 80211f6:	601a      	str	r2, [r3, #0]
	Attach(handleQueue);
 80211f8:	6878      	ldr	r0, [r7, #4]
 80211fa:	6839      	ldr	r1, [r7, #0]
 80211fc:	f000 f83e 	bl	802127c <_ZN6CQueue6AttachEPv>
}
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	4618      	mov	r0, r3
 8021204:	f107 0708 	add.w	r7, r7, #8
 8021208:	46bd      	mov	sp, r7
 802120a:	bd80      	pop	{r7, pc}
 802120c:	080281c8 	.word	0x080281c8

08021210 <_ZN6CQueue6CreateEmm>:

CQueue &CQueue::Create(unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize) {
 8021210:	b580      	push	{r7, lr}
 8021212:	b086      	sub	sp, #24
 8021214:	af00      	add	r7, sp, #0
 8021216:	60f8      	str	r0, [r7, #12]
 8021218:	60b9      	str	r1, [r7, #8]
 802121a:	607a      	str	r2, [r7, #4]
	assert(!IsValid());
 802121c:	68fb      	ldr	r3, [r7, #12]
 802121e:	681b      	ldr	r3, [r3, #0]
 8021220:	681b      	ldr	r3, [r3, #0]
 8021222:	68f8      	ldr	r0, [r7, #12]
 8021224:	4798      	blx	r3
 8021226:	4603      	mov	r3, r0
 8021228:	2b00      	cmp	r3, #0
 802122a:	d00f      	beq.n	802124c <_ZN6CQueue6CreateEmm+0x3c>
 802122c:	f645 6078 	movw	r0, #24184	; 0x5e78
 8021230:	f6c0 0002 	movt	r0, #2050	; 0x802
 8021234:	f04f 011a 	mov.w	r1, #26
 8021238:	f248 220c 	movw	r2, #33292	; 0x820c
 802123c:	f6c0 0202 	movt	r2, #2050	; 0x802
 8021240:	f645 639c 	movw	r3, #24220	; 0x5e9c
 8021244:	f6c0 0302 	movt	r3, #2050	; 0x802
 8021248:	f7e5 fc56 	bl	8006af8 <__assert_func>

	xQueueHandle handle;

	handle = xQueueCreate(uxQueueLength, uxItemSize);
 802124c:	68b8      	ldr	r0, [r7, #8]
 802124e:	6879      	ldr	r1, [r7, #4]
 8021250:	f000 fe64 	bl	8021f1c <xQueueCreate>
 8021254:	4603      	mov	r3, r0
 8021256:	617b      	str	r3, [r7, #20]
	if (handle != NULL)
 8021258:	697b      	ldr	r3, [r7, #20]
 802125a:	2b00      	cmp	r3, #0
 802125c:	d007      	beq.n	802126e <_ZN6CQueue6CreateEmm+0x5e>
		Attach(handle);
 802125e:	68fb      	ldr	r3, [r7, #12]
 8021260:	681b      	ldr	r3, [r3, #0]
 8021262:	f103 0304 	add.w	r3, r3, #4
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	68f8      	ldr	r0, [r7, #12]
 802126a:	6979      	ldr	r1, [r7, #20]
 802126c:	4798      	blx	r3

	return *this;
 802126e:	68fb      	ldr	r3, [r7, #12]
}
 8021270:	4618      	mov	r0, r3
 8021272:	f107 0718 	add.w	r7, r7, #24
 8021276:	46bd      	mov	sp, r7
 8021278:	bd80      	pop	{r7, pc}
 802127a:	bf00      	nop

0802127c <_ZN6CQueue6AttachEPv>:

void CQueue::Attach(xGenericHandle handle) {
 802127c:	b580      	push	{r7, lr}
 802127e:	b082      	sub	sp, #8
 8021280:	af00      	add	r7, sp, #0
 8021282:	6078      	str	r0, [r7, #4]
 8021284:	6039      	str	r1, [r7, #0]
	assert(handle != NULL);
 8021286:	683b      	ldr	r3, [r7, #0]
 8021288:	2b00      	cmp	r3, #0
 802128a:	d10f      	bne.n	80212ac <_ZN6CQueue6AttachEPv+0x30>
 802128c:	f645 6078 	movw	r0, #24184	; 0x5e78
 8021290:	f6c0 0002 	movt	r0, #2050	; 0x802
 8021294:	f04f 0126 	mov.w	r1, #38	; 0x26
 8021298:	f248 12e0 	movw	r2, #33248	; 0x81e0
 802129c:	f6c0 0202 	movt	r2, #2050	; 0x802
 80212a0:	f645 63a8 	movw	r3, #24232	; 0x5ea8
 80212a4:	f6c0 0302 	movt	r3, #2050	; 0x802
 80212a8:	f7e5 fc26 	bl	8006af8 <__assert_func>

	if (IsValid())
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	6878      	ldr	r0, [r7, #4]
 80212b4:	4798      	blx	r3
 80212b6:	4603      	mov	r3, r0
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	d002      	beq.n	80212c2 <_ZN6CQueue6AttachEPv+0x46>
		Delete();
 80212bc:	6878      	ldr	r0, [r7, #4]
 80212be:	f000 f807 	bl	80212d0 <_ZN6CQueue6DeleteEv>

	m_handleQueue = handle;
 80212c2:	687b      	ldr	r3, [r7, #4]
 80212c4:	683a      	ldr	r2, [r7, #0]
 80212c6:	605a      	str	r2, [r3, #4]
}
 80212c8:	f107 0708 	add.w	r7, r7, #8
 80212cc:	46bd      	mov	sp, r7
 80212ce:	bd80      	pop	{r7, pc}

080212d0 <_ZN6CQueue6DeleteEv>:

void CQueue::Delete() {
 80212d0:	b580      	push	{r7, lr}
 80212d2:	b082      	sub	sp, #8
 80212d4:	af00      	add	r7, sp, #0
 80212d6:	6078      	str	r0, [r7, #4]
	if (m_handleQueue != NULL) {
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	685b      	ldr	r3, [r3, #4]
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d008      	beq.n	80212f2 <_ZN6CQueue6DeleteEv+0x22>
		vQueueDelete(m_handleQueue);
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	685b      	ldr	r3, [r3, #4]
 80212e4:	4618      	mov	r0, r3
 80212e6:	f001 f8d5 	bl	8022494 <vQueueDelete>
		m_handleQueue = NULL;
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	f04f 0200 	mov.w	r2, #0
 80212f0:	605a      	str	r2, [r3, #4]
	}
}
 80212f2:	f107 0708 	add.w	r7, r7, #8
 80212f6:	46bd      	mov	sp, r7
 80212f8:	bd80      	pop	{r7, pc}
 80212fa:	bf00      	nop

080212fc <_ZN15CRecursiveMutex4TakeEm>:


// inline methods implementation

inline
portBASE_TYPE CRecursiveMutex::Take(portTickType xBlockTime) {
 80212fc:	b480      	push	{r7}
 80212fe:	b083      	sub	sp, #12
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
 8021304:	6039      	str	r1, [r7, #0]
#if (configUSE_RECURSIVE_MUTEXES == 1)
	assert(IsValid());

	return xSemaphoreTakeRecursive(m_handleSemaphore, xBlockTime);
#else
	return  pdFALSE;
 8021306:	f04f 0300 	mov.w	r3, #0
#endif
}
 802130a:	4618      	mov	r0, r3
 802130c:	f107 070c 	add.w	r7, r7, #12
 8021310:	46bd      	mov	sp, r7
 8021312:	bc80      	pop	{r7}
 8021314:	4770      	bx	lr
 8021316:	bf00      	nop

08021318 <_ZN15CRecursiveMutex4GiveEv>:

inline
portBASE_TYPE CRecursiveMutex::Give() {
 8021318:	b480      	push	{r7}
 802131a:	b083      	sub	sp, #12
 802131c:	af00      	add	r7, sp, #0
 802131e:	6078      	str	r0, [r7, #4]
#if (configUSE_RECURSIVE_MUTEXES == 1)
	assert(IsValid());

	return xSemaphoreGiveRecursive(m_handleSemaphore);
#else
	return  pdFALSE;
 8021320:	f04f 0300 	mov.w	r3, #0
#endif
}
 8021324:	4618      	mov	r0, r3
 8021326:	f107 070c 	add.w	r7, r7, #12
 802132a:	46bd      	mov	sp, r7
 802132c:	bc80      	pop	{r7}
 802132e:	4770      	bx	lr

08021330 <_ZN15CRecursiveMutexC1Ev>:
 *      E-Mail: software@stf12.net
 */

#include "CRecursiveMutex.h"

CRecursiveMutex::CRecursiveMutex() {
 8021330:	b580      	push	{r7, lr}
 8021332:	b082      	sub	sp, #8
 8021334:	af00      	add	r7, sp, #0
 8021336:	6078      	str	r0, [r7, #4]
 8021338:	687b      	ldr	r3, [r7, #4]
 802133a:	4618      	mov	r0, r3
 802133c:	f7ff f910 	bl	8020560 <_ZN11ASyncObjectC1Ev>
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	4a04      	ldr	r2, [pc, #16]	; (8021354 <_ZN15CRecursiveMutexC1Ev+0x24>)
 8021344:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8021346:	687b      	ldr	r3, [r7, #4]
 8021348:	4618      	mov	r0, r3
 802134a:	f107 0708 	add.w	r7, r7, #8
 802134e:	46bd      	mov	sp, r7
 8021350:	bd80      	pop	{r7, pc}
 8021352:	bf00      	nop
 8021354:	08028258 	.word	0x08028258

08021358 <_ZN15CRecursiveMutexC1EPv>:

CRecursiveMutex::CRecursiveMutex(xSemaphoreHandle handleSemaphore) {
 8021358:	b580      	push	{r7, lr}
 802135a:	b082      	sub	sp, #8
 802135c:	af00      	add	r7, sp, #0
 802135e:	6078      	str	r0, [r7, #4]
 8021360:	6039      	str	r1, [r7, #0]
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	4618      	mov	r0, r3
 8021366:	f7ff f8fb 	bl	8020560 <_ZN11ASyncObjectC1Ev>
 802136a:	687b      	ldr	r3, [r7, #4]
 802136c:	4a06      	ldr	r2, [pc, #24]	; (8021388 <_ZN15CRecursiveMutexC1EPv+0x30>)
 802136e:	601a      	str	r2, [r3, #0]
	Attach(handleSemaphore);
 8021370:	687b      	ldr	r3, [r7, #4]
 8021372:	4618      	mov	r0, r3
 8021374:	6839      	ldr	r1, [r7, #0]
 8021376:	f7ff f953 	bl	8020620 <_ZN11ASyncObject6AttachEPv>
}
 802137a:	687b      	ldr	r3, [r7, #4]
 802137c:	4618      	mov	r0, r3
 802137e:	f107 0708 	add.w	r7, r7, #8
 8021382:	46bd      	mov	sp, r7
 8021384:	bd80      	pop	{r7, pc}
 8021386:	bf00      	nop
 8021388:	08028258 	.word	0x08028258

0802138c <_ZN15CRecursiveMutexD1Ev>:

CRecursiveMutex::~CRecursiveMutex() {
 802138c:	b580      	push	{r7, lr}
 802138e:	b082      	sub	sp, #8
 8021390:	af00      	add	r7, sp, #0
 8021392:	6078      	str	r0, [r7, #4]
 8021394:	687b      	ldr	r3, [r7, #4]
 8021396:	4a0a      	ldr	r2, [pc, #40]	; (80213c0 <_ZN15CRecursiveMutexD1Ev+0x34>)
 8021398:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 802139a:	6878      	ldr	r0, [r7, #4]
 802139c:	f7ff f8f8 	bl	8020590 <_ZN11ASyncObjectD1Ev>
 80213a0:	f04f 0300 	mov.w	r3, #0
 80213a4:	f003 0301 	and.w	r3, r3, #1
 80213a8:	b2db      	uxtb	r3, r3
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	d002      	beq.n	80213b4 <_ZN15CRecursiveMutexD1Ev+0x28>
 80213ae:	6878      	ldr	r0, [r7, #4]
 80213b0:	f003 fb3e 	bl	8024a30 <_ZdlPv>
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	4618      	mov	r0, r3
 80213b8:	f107 0708 	add.w	r7, r7, #8
 80213bc:	46bd      	mov	sp, r7
 80213be:	bd80      	pop	{r7, pc}
 80213c0:	08028258 	.word	0x08028258

080213c4 <_ZN15CRecursiveMutexD0Ev>:

CRecursiveMutex::CRecursiveMutex(xSemaphoreHandle handleSemaphore) {
	Attach(handleSemaphore);
}

CRecursiveMutex::~CRecursiveMutex() {
 80213c4:	b580      	push	{r7, lr}
 80213c6:	b082      	sub	sp, #8
 80213c8:	af00      	add	r7, sp, #0
 80213ca:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 80213cc:	6878      	ldr	r0, [r7, #4]
 80213ce:	f7ff ffdd 	bl	802138c <_ZN15CRecursiveMutexD1Ev>
 80213d2:	6878      	ldr	r0, [r7, #4]
 80213d4:	f003 fb2c 	bl	8024a30 <_ZdlPv>
 80213d8:	687b      	ldr	r3, [r7, #4]
 80213da:	4618      	mov	r0, r3
 80213dc:	f107 0708 	add.w	r7, r7, #8
 80213e0:	46bd      	mov	sp, r7
 80213e2:	bd80      	pop	{r7, pc}

080213e4 <_ZN15CRecursiveMutex6CreateEv>:

bool CRecursiveMutex::Create() {
 80213e4:	b580      	push	{r7, lr}
 80213e6:	b082      	sub	sp, #8
 80213e8:	af00      	add	r7, sp, #0
 80213ea:	6078      	str	r0, [r7, #4]
	xSemaphoreHandle handle = xSemaphoreCreateRecursiveMutex();
	if (handle != NULL)
		Attach(handle);
#endif

	return IsValid();
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	687a      	ldr	r2, [r7, #4]
 80213f4:	4610      	mov	r0, r2
 80213f6:	4798      	blx	r3
 80213f8:	4603      	mov	r3, r0
}
 80213fa:	4618      	mov	r0, r3
 80213fc:	f107 0708 	add.w	r7, r7, #8
 8021400:	46bd      	mov	sp, r7
 8021402:	bd80      	pop	{r7, pc}

08021404 <_ZN5CTaskC1Ev>:

#include "CTask.h"
#include <assert.h>


CTask::CTask() {
 8021404:	b580      	push	{r7, lr}
 8021406:	b082      	sub	sp, #8
 8021408:	af00      	add	r7, sp, #0
 802140a:	6078      	str	r0, [r7, #4]
 802140c:	687b      	ldr	r3, [r7, #4]
 802140e:	4618      	mov	r0, r3
 8021410:	f7ff f896 	bl	8020540 <_ZN12IFreeRTOSObjC1Ev>
 8021414:	687b      	ldr	r3, [r7, #4]
 8021416:	4a06      	ldr	r2, [pc, #24]	; (8021430 <_ZN5CTaskC1Ev+0x2c>)
 8021418:	601a      	str	r2, [r3, #0]
	m_handleTask = NULL;
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	f04f 0200 	mov.w	r2, #0
 8021420:	605a      	str	r2, [r3, #4]
}
 8021422:	687b      	ldr	r3, [r7, #4]
 8021424:	4618      	mov	r0, r3
 8021426:	f107 0708 	add.w	r7, r7, #8
 802142a:	46bd      	mov	sp, r7
 802142c:	bd80      	pop	{r7, pc}
 802142e:	bf00      	nop
 8021430:	08028280 	.word	0x08028280

08021434 <_ZN5CTaskC1EPv>:

CTask::CTask(xTaskHandle handleTask) {
 8021434:	b580      	push	{r7, lr}
 8021436:	b082      	sub	sp, #8
 8021438:	af00      	add	r7, sp, #0
 802143a:	6078      	str	r0, [r7, #4]
 802143c:	6039      	str	r1, [r7, #0]
 802143e:	687b      	ldr	r3, [r7, #4]
 8021440:	4618      	mov	r0, r3
 8021442:	f7ff f87d 	bl	8020540 <_ZN12IFreeRTOSObjC1Ev>
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	4a05      	ldr	r2, [pc, #20]	; (8021460 <_ZN5CTaskC1EPv+0x2c>)
 802144a:	601a      	str	r2, [r3, #0]
	Attach(handleTask);
 802144c:	6878      	ldr	r0, [r7, #4]
 802144e:	6839      	ldr	r1, [r7, #0]
 8021450:	f000 f83a 	bl	80214c8 <_ZN5CTask6AttachEPv>
}
 8021454:	687b      	ldr	r3, [r7, #4]
 8021456:	4618      	mov	r0, r3
 8021458:	f107 0708 	add.w	r7, r7, #8
 802145c:	46bd      	mov	sp, r7
 802145e:	bd80      	pop	{r7, pc}
 8021460:	08028280 	.word	0x08028280

08021464 <_ZN5CTaskD1Ev>:

CTask::~CTask() {
 8021464:	b580      	push	{r7, lr}
 8021466:	b082      	sub	sp, #8
 8021468:	af00      	add	r7, sp, #0
 802146a:	6078      	str	r0, [r7, #4]
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	4a0d      	ldr	r2, [pc, #52]	; (80214a4 <_ZN5CTaskD1Ev+0x40>)
 8021470:	601a      	str	r2, [r3, #0]
	if (IsValid())
 8021472:	6878      	ldr	r0, [r7, #4]
 8021474:	f7fd fca2 	bl	801edbc <_ZNK5CTask7IsValidEv>
 8021478:	4603      	mov	r3, r0
 802147a:	2b00      	cmp	r3, #0
 802147c:	d002      	beq.n	8021484 <_ZN5CTaskD1Ev+0x20>
		Delete();
 802147e:	6878      	ldr	r0, [r7, #4]
 8021480:	f000 f88a 	bl	8021598 <_ZN5CTask6DeleteEv>
}
 8021484:	f04f 0300 	mov.w	r3, #0
 8021488:	f003 0301 	and.w	r3, r3, #1
 802148c:	b2db      	uxtb	r3, r3
 802148e:	2b00      	cmp	r3, #0
 8021490:	d002      	beq.n	8021498 <_ZN5CTaskD1Ev+0x34>
 8021492:	6878      	ldr	r0, [r7, #4]
 8021494:	f003 facc 	bl	8024a30 <_ZdlPv>
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	4618      	mov	r0, r3
 802149c:	f107 0708 	add.w	r7, r7, #8
 80214a0:	46bd      	mov	sp, r7
 80214a2:	bd80      	pop	{r7, pc}
 80214a4:	08028280 	.word	0x08028280

080214a8 <_ZN5CTaskD0Ev>:

CTask::CTask(xTaskHandle handleTask) {
	Attach(handleTask);
}

CTask::~CTask() {
 80214a8:	b580      	push	{r7, lr}
 80214aa:	b082      	sub	sp, #8
 80214ac:	af00      	add	r7, sp, #0
 80214ae:	6078      	str	r0, [r7, #4]
	if (IsValid())
		Delete();
}
 80214b0:	6878      	ldr	r0, [r7, #4]
 80214b2:	f7ff ffd7 	bl	8021464 <_ZN5CTaskD1Ev>
 80214b6:	6878      	ldr	r0, [r7, #4]
 80214b8:	f003 faba 	bl	8024a30 <_ZdlPv>
 80214bc:	687b      	ldr	r3, [r7, #4]
 80214be:	4618      	mov	r0, r3
 80214c0:	f107 0708 	add.w	r7, r7, #8
 80214c4:	46bd      	mov	sp, r7
 80214c6:	bd80      	pop	{r7, pc}

080214c8 <_ZN5CTask6AttachEPv>:

void CTask::Attach(xGenericHandle handle) {
 80214c8:	b580      	push	{r7, lr}
 80214ca:	b082      	sub	sp, #8
 80214cc:	af00      	add	r7, sp, #0
 80214ce:	6078      	str	r0, [r7, #4]
 80214d0:	6039      	str	r1, [r7, #0]
	assert(handle != NULL);
 80214d2:	683b      	ldr	r3, [r7, #0]
 80214d4:	2b00      	cmp	r3, #0
 80214d6:	d10f      	bne.n	80214f8 <_ZN5CTask6AttachEPv+0x30>
 80214d8:	f645 60b8 	movw	r0, #24248	; 0x5eb8
 80214dc:	f6c0 0002 	movt	r0, #2050	; 0x802
 80214e0:	f04f 011b 	mov.w	r1, #27
 80214e4:	f248 2298 	movw	r2, #33432	; 0x8298
 80214e8:	f6c0 0202 	movt	r2, #2050	; 0x802
 80214ec:	f645 63d8 	movw	r3, #24280	; 0x5ed8
 80214f0:	f6c0 0302 	movt	r3, #2050	; 0x802
 80214f4:	f7e5 fb00 	bl	8006af8 <__assert_func>

	if (IsValid()) {
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	681b      	ldr	r3, [r3, #0]
 80214fe:	6878      	ldr	r0, [r7, #4]
 8021500:	4798      	blx	r3
 8021502:	4603      	mov	r3, r0
 8021504:	2b00      	cmp	r3, #0
 8021506:	d002      	beq.n	802150e <_ZN5CTask6AttachEPv+0x46>
		Delete();
 8021508:	6878      	ldr	r0, [r7, #4]
 802150a:	f000 f845 	bl	8021598 <_ZN5CTask6DeleteEv>
	}
	m_handleTask = handle;
 802150e:	687b      	ldr	r3, [r7, #4]
 8021510:	683a      	ldr	r2, [r7, #0]
 8021512:	605a      	str	r2, [r3, #4]
}
 8021514:	f107 0708 	add.w	r7, r7, #8
 8021518:	46bd      	mov	sp, r7
 802151a:	bd80      	pop	{r7, pc}

0802151c <_ZN5CTask6CreateEPFvPvEPKctS0_m>:

portBASE_TYPE CTask::Create(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority)
{
 802151c:	b580      	push	{r7, lr}
 802151e:	b08a      	sub	sp, #40	; 0x28
 8021520:	af04      	add	r7, sp, #16
 8021522:	60f8      	str	r0, [r7, #12]
 8021524:	60b9      	str	r1, [r7, #8]
 8021526:	607a      	str	r2, [r7, #4]
 8021528:	807b      	strh	r3, [r7, #2]
	portBASE_TYPE res;
	xTaskHandle handle;
	res = xTaskCreate(pvTaskCode, (const signed char*)pcName, usStackDepth, pvParameters, uxPriority, &handle);
 802152a:	887b      	ldrh	r3, [r7, #2]
 802152c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802152e:	9200      	str	r2, [sp, #0]
 8021530:	f107 0210 	add.w	r2, r7, #16
 8021534:	9201      	str	r2, [sp, #4]
 8021536:	f04f 0200 	mov.w	r2, #0
 802153a:	9202      	str	r2, [sp, #8]
 802153c:	f04f 0200 	mov.w	r2, #0
 8021540:	9203      	str	r2, [sp, #12]
 8021542:	68b8      	ldr	r0, [r7, #8]
 8021544:	6879      	ldr	r1, [r7, #4]
 8021546:	461a      	mov	r2, r3
 8021548:	6a3b      	ldr	r3, [r7, #32]
 802154a:	f001 f8e5 	bl	8022718 <xTaskGenericCreate>
 802154e:	4603      	mov	r3, r0
 8021550:	617b      	str	r3, [r7, #20]
	if (res == pdTRUE)
 8021552:	697b      	ldr	r3, [r7, #20]
 8021554:	2b01      	cmp	r3, #1
 8021556:	d108      	bne.n	802156a <_ZN5CTask6CreateEPFvPvEPKctS0_m+0x4e>
		Attach(handle);
 8021558:	68fb      	ldr	r3, [r7, #12]
 802155a:	681b      	ldr	r3, [r3, #0]
 802155c:	f103 0304 	add.w	r3, r3, #4
 8021560:	681b      	ldr	r3, [r3, #0]
 8021562:	693a      	ldr	r2, [r7, #16]
 8021564:	68f8      	ldr	r0, [r7, #12]
 8021566:	4611      	mov	r1, r2
 8021568:	4798      	blx	r3

	return res;
 802156a:	697b      	ldr	r3, [r7, #20]
}
 802156c:	4618      	mov	r0, r3
 802156e:	f107 0718 	add.w	r7, r7, #24
 8021572:	46bd      	mov	sp, r7
 8021574:	bd80      	pop	{r7, pc}
 8021576:	bf00      	nop

08021578 <_ZN5CTask16CreateRestrictedEP15xTASK_PARAMTERS>:

portBASE_TYPE CTask::CreateRestricted(xTaskParameters *pxTaskDefinition)
{
 8021578:	b480      	push	{r7}
 802157a:	b085      	sub	sp, #20
 802157c:	af00      	add	r7, sp, #0
 802157e:	6078      	str	r0, [r7, #4]
 8021580:	6039      	str	r1, [r7, #0]
	portBASE_TYPE res = pdFALSE;
 8021582:	f04f 0300 	mov.w	r3, #0
 8021586:	60fb      	str	r3, [r7, #12]
	res = xTaskCreateRestricted(pxTaskDefinition, &handle);
	if (res == pdTRUE)
		Attach(handle);
#endif

	return res;
 8021588:	68fb      	ldr	r3, [r7, #12]
}
 802158a:	4618      	mov	r0, r3
 802158c:	f107 0714 	add.w	r7, r7, #20
 8021590:	46bd      	mov	sp, r7
 8021592:	bc80      	pop	{r7}
 8021594:	4770      	bx	lr
 8021596:	bf00      	nop

08021598 <_ZN5CTask6DeleteEv>:


void CTask::Delete() {
 8021598:	b580      	push	{r7, lr}
 802159a:	b082      	sub	sp, #8
 802159c:	af00      	add	r7, sp, #0
 802159e:	6078      	str	r0, [r7, #4]
	if (m_handleTask != NULL) {
 80215a0:	687b      	ldr	r3, [r7, #4]
 80215a2:	685b      	ldr	r3, [r3, #4]
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d008      	beq.n	80215ba <_ZN5CTask6DeleteEv+0x22>
#if ( INCLUDE_vTaskDelete == 1 )
		vTaskDelete(m_handleTask);
 80215a8:	687b      	ldr	r3, [r7, #4]
 80215aa:	685b      	ldr	r3, [r3, #4]
 80215ac:	4618      	mov	r0, r3
 80215ae:	f001 f989 	bl	80228c4 <vTaskDelete>
#else
		vTaskSuspend(m_handleTask);
#endif
		m_handleTask = NULL;
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	f04f 0200 	mov.w	r2, #0
 80215b8:	605a      	str	r2, [r3, #4]
	}
}
 80215ba:	f107 0708 	add.w	r7, r7, #8
 80215be:	46bd      	mov	sp, r7
 80215c0:	bd80      	pop	{r7, pc}
 80215c2:	bf00      	nop

080215c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80215c4:	b480      	push	{r7}
 80215c6:	b085      	sub	sp, #20
 80215c8:	af00      	add	r7, sp, #0
 80215ca:	60f8      	str	r0, [r7, #12]
 80215cc:	60b9      	str	r1, [r7, #8]
 80215ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80215d0:	68fb      	ldr	r3, [r7, #12]
 80215d2:	f1a3 0304 	sub.w	r3, r3, #4
 80215d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80215d8:	68fb      	ldr	r3, [r7, #12]
 80215da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80215de:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80215e0:	68fb      	ldr	r3, [r7, #12]
 80215e2:	f1a3 0304 	sub.w	r3, r3, #4
 80215e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 80215e8:	68ba      	ldr	r2, [r7, #8]
 80215ea:	68fb      	ldr	r3, [r7, #12]
 80215ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80215ee:	68fb      	ldr	r3, [r7, #12]
 80215f0:	f1a3 0304 	sub.w	r3, r3, #4
 80215f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 80215f6:	68fb      	ldr	r3, [r7, #12]
 80215f8:	f04f 0200 	mov.w	r2, #0
 80215fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80215fe:	68fb      	ldr	r3, [r7, #12]
 8021600:	f1a3 0314 	sub.w	r3, r3, #20
 8021604:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8021606:	687a      	ldr	r2, [r7, #4]
 8021608:	68fb      	ldr	r3, [r7, #12]
 802160a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802160c:	68fb      	ldr	r3, [r7, #12]
 802160e:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
 8021612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
 8021614:	68fb      	ldr	r3, [r7, #12]
 8021616:	f06f 0202 	mvn.w	r2, #2
 802161a:	601a      	str	r2, [r3, #0]
	return pxTopOfStack;
 802161c:	68fb      	ldr	r3, [r7, #12]
}
 802161e:	4618      	mov	r0, r3
 8021620:	f107 0714 	add.w	r7, r7, #20
 8021624:	46bd      	mov	sp, r7
 8021626:	bc80      	pop	{r7}
 8021628:	4770      	bx	lr
 802162a:	bf00      	nop

0802162c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 802162c:	4b06      	ldr	r3, [pc, #24]	; (8021648 <pxCurrentTCBConst2>)
 802162e:	6819      	ldr	r1, [r3, #0]
 8021630:	6808      	ldr	r0, [r1, #0]
 8021632:	f850 eb04 	ldr.w	lr, [r0], #4
 8021636:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802163a:	f380 8809 	msr	PSP, r0
 802163e:	f04f 0000 	mov.w	r0, #0
 8021642:	f380 8811 	msr	BASEPRI, r0
 8021646:	4770      	bx	lr

08021648 <pxCurrentTCBConst2>:
 8021648:	20000a38 	.word	0x20000a38

0802164c <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 802164c:	4803      	ldr	r0, [pc, #12]	; (802165c <vPortStartFirstTask+0x10>)
 802164e:	6800      	ldr	r0, [r0, #0]
 8021650:	6800      	ldr	r0, [r0, #0]
 8021652:	f380 8808 	msr	MSP, r0
 8021656:	b662      	cpsie	i
 8021658:	df00      	svc	0
 802165a:	bf00      	nop
 802165c:	e000ed08 	.word	0xe000ed08

08021660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8021660:	b580      	push	{r7, lr}
 8021662:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8021664:	f64e 5320 	movw	r3, #60704	; 0xed20
 8021668:	f2ce 0300 	movt	r3, #57344	; 0xe000
 802166c:	f64e 5220 	movw	r2, #60704	; 0xed20
 8021670:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8021674:	6812      	ldr	r2, [r2, #0]
 8021676:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 802167a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 802167c:	f64e 5320 	movw	r3, #60704	; 0xed20
 8021680:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8021684:	f64e 5220 	movw	r2, #60704	; 0xed20
 8021688:	f2ce 0200 	movt	r2, #57344	; 0xe000
 802168c:	6812      	ldr	r2, [r2, #0]
 802168e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8021692:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8021694:	f000 f89a 	bl	80217cc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8021698:	f640 1324 	movw	r3, #2340	; 0x924
 802169c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80216a0:	f04f 0200 	mov.w	r2, #0
 80216a4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80216a6:	f7ff ffd1 	bl	802164c <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 80216aa:	f04f 0300 	mov.w	r3, #0
}
 80216ae:	4618      	mov	r0, r3
 80216b0:	bd80      	pop	{r7, pc}
 80216b2:	bf00      	nop

080216b4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 80216b4:	b480      	push	{r7}
 80216b6:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM4F port will require this function as there
	is nothing to return to.  */
}
 80216b8:	46bd      	mov	sp, r7
 80216ba:	bc80      	pop	{r7}
 80216bc:	4770      	bx	lr
 80216be:	bf00      	nop

080216c0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 80216c0:	b480      	push	{r7}
 80216c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80216c4:	f64e 5304 	movw	r3, #60676	; 0xed04
 80216c8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80216cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80216d0:	601a      	str	r2, [r3, #0]
}
 80216d2:	46bd      	mov	sp, r7
 80216d4:	bc80      	pop	{r7}
 80216d6:	4770      	bx	lr

080216d8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80216d8:	b480      	push	{r7}
 80216da:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80216dc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80216e0:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 80216e4:	f640 1324 	movw	r3, #2340	; 0x924
 80216e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80216ec:	681b      	ldr	r3, [r3, #0]
 80216ee:	f103 0201 	add.w	r2, r3, #1
 80216f2:	f640 1324 	movw	r3, #2340	; 0x924
 80216f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80216fa:	601a      	str	r2, [r3, #0]
}
 80216fc:	46bd      	mov	sp, r7
 80216fe:	bc80      	pop	{r7}
 8021700:	4770      	bx	lr
 8021702:	bf00      	nop

08021704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8021704:	b480      	push	{r7}
 8021706:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8021708:	f640 1324 	movw	r3, #2340	; 0x924
 802170c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021710:	681b      	ldr	r3, [r3, #0]
 8021712:	f103 32ff 	add.w	r2, r3, #4294967295
 8021716:	f640 1324 	movw	r3, #2340	; 0x924
 802171a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802171e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8021720:	f640 1324 	movw	r3, #2340	; 0x924
 8021724:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021728:	681b      	ldr	r3, [r3, #0]
 802172a:	2b00      	cmp	r3, #0
 802172c:	d103      	bne.n	8021736 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 802172e:	f04f 0000 	mov.w	r0, #0
 8021732:	f380 8811 	msr	BASEPRI, r0
	}
}
 8021736:	46bd      	mov	sp, r7
 8021738:	bc80      	pop	{r7}
 802173a:	4770      	bx	lr

0802173c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 802173c:	f3ef 8009 	mrs	r0, PSP
 8021740:	4b13      	ldr	r3, [pc, #76]	; (8021790 <pxCurrentTCBConst>)
 8021742:	681a      	ldr	r2, [r3, #0]
 8021744:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8021748:	f01e 0f10 	tst.w	lr, #16
 802174c:	bf08      	it	eq
 802174e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8021752:	f840 ed04 	str.w	lr, [r0, #-4]!
 8021756:	6010      	str	r0, [r2, #0]
 8021758:	e92d 4008 	stmdb	sp!, {r3, lr}
 802175c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8021760:	f380 8811 	msr	BASEPRI, r0
 8021764:	f001 fec4 	bl	80234f0 <vTaskSwitchContext>
 8021768:	f04f 0000 	mov.w	r0, #0
 802176c:	f380 8811 	msr	BASEPRI, r0
 8021770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021774:	6819      	ldr	r1, [r3, #0]
 8021776:	6808      	ldr	r0, [r1, #0]
 8021778:	f850 eb04 	ldr.w	lr, [r0], #4
 802177c:	f01e 0f10 	tst.w	lr, #16
 8021780:	bf08      	it	eq
 8021782:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8021786:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802178a:	f380 8809 	msr	PSP, r0
 802178e:	4770      	bx	lr

08021790 <pxCurrentTCBConst>:
 8021790:	20000a38 	.word	0x20000a38

08021794 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8021794:	b580      	push	{r7, lr}
 8021796:	b082      	sub	sp, #8
 8021798:	af00      	add	r7, sp, #0
    unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 802179a:	f64e 5304 	movw	r3, #60676	; 0xed04
 802179e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80217a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80217a6:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80217a8:	f04f 0300 	mov.w	r3, #0
 80217ac:	607b      	str	r3, [r7, #4]
 80217ae:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80217b2:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 80217b6:	f001 fd5f 	bl	8023278 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80217ba:	f04f 0000 	mov.w	r0, #0
 80217be:	f380 8811 	msr	BASEPRI, r0
}
 80217c2:	f107 0708 	add.w	r7, r7, #8
 80217c6:	46bd      	mov	sp, r7
 80217c8:	bd80      	pop	{r7, pc}
 80217ca:	bf00      	nop

080217cc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80217cc:	b480      	push	{r7}
 80217ce:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80217d0:	f24e 0314 	movw	r3, #57364	; 0xe014
 80217d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80217d8:	f640 1230 	movw	r2, #2352	; 0x930
 80217dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80217e0:	6811      	ldr	r1, [r2, #0]
 80217e2:	f248 521f 	movw	r2, #34079	; 0x851f
 80217e6:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 80217ea:	fba2 0201 	umull	r0, r2, r2, r1
 80217ee:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80217f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80217f6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80217f8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80217fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8021800:	f04f 0207 	mov.w	r2, #7
 8021804:	601a      	str	r2, [r3, #0]
}
 8021806:	46bd      	mov	sp, r7
 8021808:	bc80      	pop	{r7}
 802180a:	4770      	bx	lr

0802180c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
 802180c:	b580      	push	{r7, lr}
 802180e:	b086      	sub	sp, #24
 8021810:	af00      	add	r7, sp, #0
 8021812:	60f8      	str	r0, [r7, #12]
 8021814:	60b9      	str	r1, [r7, #8]
 8021816:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
 8021818:	f04f 0038 	mov.w	r0, #56	; 0x38
 802181c:	f7e5 fc4a 	bl	80070b4 <malloc>
 8021820:	4603      	mov	r3, r0
 8021822:	613b      	str	r3, [r7, #16]
	if( pxCoRoutine )
 8021824:	693b      	ldr	r3, [r7, #16]
 8021826:	2b00      	cmp	r3, #0
 8021828:	d061      	beq.n	80218ee <xCoRoutineCreate+0xe2>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
 802182a:	f640 2324 	movw	r3, #2596	; 0xa24
 802182e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021832:	681b      	ldr	r3, [r3, #0]
 8021834:	2b00      	cmp	r3, #0
 8021836:	d107      	bne.n	8021848 <xCoRoutineCreate+0x3c>
		{
			pxCurrentCoRoutine = pxCoRoutine;
 8021838:	f640 2324 	movw	r3, #2596	; 0xa24
 802183c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021840:	693a      	ldr	r2, [r7, #16]
 8021842:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
 8021844:	f000 fa36 	bl	8021cb4 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 8021848:	68bb      	ldr	r3, [r7, #8]
 802184a:	2b01      	cmp	r3, #1
 802184c:	d902      	bls.n	8021854 <xCoRoutineCreate+0x48>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 802184e:	f04f 0301 	mov.w	r3, #1
 8021852:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
 8021854:	693b      	ldr	r3, [r7, #16]
 8021856:	f04f 0200 	mov.w	r2, #0
 802185a:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
 802185c:	693b      	ldr	r3, [r7, #16]
 802185e:	68ba      	ldr	r2, [r7, #8]
 8021860:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
 8021862:	693b      	ldr	r3, [r7, #16]
 8021864:	687a      	ldr	r2, [r7, #4]
 8021866:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 8021868:	693b      	ldr	r3, [r7, #16]
 802186a:	68fa      	ldr	r2, [r7, #12]
 802186c:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 802186e:	693b      	ldr	r3, [r7, #16]
 8021870:	f103 0304 	add.w	r3, r3, #4
 8021874:	4618      	mov	r0, r3
 8021876:	f000 fab3 	bl	8021de0 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 802187a:	693b      	ldr	r3, [r7, #16]
 802187c:	f103 0318 	add.w	r3, r3, #24
 8021880:	4618      	mov	r0, r3
 8021882:	f000 faad 	bl	8021de0 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 8021886:	693b      	ldr	r3, [r7, #16]
 8021888:	693a      	ldr	r2, [r7, #16]
 802188a:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 802188c:	693b      	ldr	r3, [r7, #16]
 802188e:	693a      	ldr	r2, [r7, #16]
 8021890:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8021892:	68bb      	ldr	r3, [r7, #8]
 8021894:	f1c3 0205 	rsb	r2, r3, #5
 8021898:	693b      	ldr	r3, [r7, #16]
 802189a:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 802189c:	693b      	ldr	r3, [r7, #16]
 802189e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80218a0:	f640 2328 	movw	r3, #2600	; 0xa28
 80218a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80218a8:	681b      	ldr	r3, [r3, #0]
 80218aa:	429a      	cmp	r2, r3
 80218ac:	d906      	bls.n	80218bc <xCoRoutineCreate+0xb0>
 80218ae:	693b      	ldr	r3, [r7, #16]
 80218b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80218b2:	f640 2328 	movw	r3, #2600	; 0xa28
 80218b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80218ba:	601a      	str	r2, [r3, #0]
 80218bc:	693b      	ldr	r3, [r7, #16]
 80218be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80218c0:	4613      	mov	r3, r2
 80218c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80218c6:	189b      	adds	r3, r3, r2
 80218c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80218cc:	461a      	mov	r2, r3
 80218ce:	f640 13b8 	movw	r3, #2488	; 0x9b8
 80218d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80218d6:	18d2      	adds	r2, r2, r3
 80218d8:	693b      	ldr	r3, [r7, #16]
 80218da:	f103 0304 	add.w	r3, r3, #4
 80218de:	4610      	mov	r0, r2
 80218e0:	4619      	mov	r1, r3
 80218e2:	f000 fa8b 	bl	8021dfc <vListInsertEnd>

		xReturn = pdPASS;
 80218e6:	f04f 0301 	mov.w	r3, #1
 80218ea:	617b      	str	r3, [r7, #20]
 80218ec:	e002      	b.n	80218f4 <xCoRoutineCreate+0xe8>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80218ee:	f04f 33ff 	mov.w	r3, #4294967295
 80218f2:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
 80218f4:	697b      	ldr	r3, [r7, #20]
}
 80218f6:	4618      	mov	r0, r3
 80218f8:	f107 0718 	add.w	r7, r7, #24
 80218fc:	46bd      	mov	sp, r7
 80218fe:	bd80      	pop	{r7, pc}

08021900 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
 8021900:	b580      	push	{r7, lr}
 8021902:	b084      	sub	sp, #16
 8021904:	af00      	add	r7, sp, #0
 8021906:	6078      	str	r0, [r7, #4]
 8021908:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 802190a:	f640 232c 	movw	r3, #2604	; 0xa2c
 802190e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021912:	681a      	ldr	r2, [r3, #0]
 8021914:	687b      	ldr	r3, [r7, #4]
 8021916:	18d3      	adds	r3, r2, r3
 8021918:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 802191a:	f640 2324 	movw	r3, #2596	; 0xa24
 802191e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021922:	681b      	ldr	r3, [r3, #0]
 8021924:	f103 0304 	add.w	r3, r3, #4
 8021928:	4618      	mov	r0, r3
 802192a:	f000 facd 	bl	8021ec8 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 802192e:	f640 2324 	movw	r3, #2596	; 0xa24
 8021932:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021936:	681b      	ldr	r3, [r3, #0]
 8021938:	68fa      	ldr	r2, [r7, #12]
 802193a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
 802193c:	f640 232c 	movw	r3, #2604	; 0xa2c
 8021940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021944:	681b      	ldr	r3, [r3, #0]
 8021946:	68fa      	ldr	r2, [r7, #12]
 8021948:	429a      	cmp	r2, r3
 802194a:	d210      	bcs.n	802196e <vCoRoutineAddToDelayedList+0x6e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 802194c:	f640 230c 	movw	r3, #2572	; 0xa0c
 8021950:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021954:	681a      	ldr	r2, [r3, #0]
 8021956:	f640 2324 	movw	r3, #2596	; 0xa24
 802195a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802195e:	681b      	ldr	r3, [r3, #0]
 8021960:	f103 0304 	add.w	r3, r3, #4
 8021964:	4610      	mov	r0, r2
 8021966:	4619      	mov	r1, r3
 8021968:	f000 fa72 	bl	8021e50 <vListInsert>
 802196c:	e00f      	b.n	802198e <vCoRoutineAddToDelayedList+0x8e>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 802196e:	f640 2308 	movw	r3, #2568	; 0xa08
 8021972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021976:	681a      	ldr	r2, [r3, #0]
 8021978:	f640 2324 	movw	r3, #2596	; 0xa24
 802197c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021980:	681b      	ldr	r3, [r3, #0]
 8021982:	f103 0304 	add.w	r3, r3, #4
 8021986:	4610      	mov	r0, r2
 8021988:	4619      	mov	r1, r3
 802198a:	f000 fa61 	bl	8021e50 <vListInsert>
	}

	if( pxEventList )
 802198e:	683b      	ldr	r3, [r7, #0]
 8021990:	2b00      	cmp	r3, #0
 8021992:	d00a      	beq.n	80219aa <vCoRoutineAddToDelayedList+0xaa>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 8021994:	f640 2324 	movw	r3, #2596	; 0xa24
 8021998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	f103 0318 	add.w	r3, r3, #24
 80219a2:	6838      	ldr	r0, [r7, #0]
 80219a4:	4619      	mov	r1, r3
 80219a6:	f000 fa53 	bl	8021e50 <vListInsert>
	}
}
 80219aa:	f107 0710 	add.w	r7, r7, #16
 80219ae:	46bd      	mov	sp, r7
 80219b0:	bd80      	pop	{r7, pc}
 80219b2:	bf00      	nop

080219b4 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
 80219b4:	b580      	push	{r7, lr}
 80219b6:	b082      	sub	sp, #8
 80219b8:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 80219ba:	e03f      	b.n	8021a3c <prvCheckPendingReadyList+0x88>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
 80219bc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80219c0:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 80219c4:	f640 2310 	movw	r3, #2576	; 0xa10
 80219c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80219cc:	68db      	ldr	r3, [r3, #12]
 80219ce:	68db      	ldr	r3, [r3, #12]
 80219d0:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	f103 0318 	add.w	r3, r3, #24
 80219d8:	4618      	mov	r0, r3
 80219da:	f000 fa75 	bl	8021ec8 <vListRemove>
		}
		portENABLE_INTERRUPTS();
 80219de:	f04f 0000 	mov.w	r0, #0
 80219e2:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 80219e6:	687b      	ldr	r3, [r7, #4]
 80219e8:	f103 0304 	add.w	r3, r3, #4
 80219ec:	4618      	mov	r0, r3
 80219ee:	f000 fa6b 	bl	8021ec8 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 80219f2:	687b      	ldr	r3, [r7, #4]
 80219f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80219f6:	f640 2328 	movw	r3, #2600	; 0xa28
 80219fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80219fe:	681b      	ldr	r3, [r3, #0]
 8021a00:	429a      	cmp	r2, r3
 8021a02:	d906      	bls.n	8021a12 <prvCheckPendingReadyList+0x5e>
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021a08:	f640 2328 	movw	r3, #2600	; 0xa28
 8021a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021a10:	601a      	str	r2, [r3, #0]
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021a16:	4613      	mov	r3, r2
 8021a18:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021a1c:	189b      	adds	r3, r3, r2
 8021a1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021a22:	461a      	mov	r2, r3
 8021a24:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8021a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021a2c:	18d2      	adds	r2, r2, r3
 8021a2e:	687b      	ldr	r3, [r7, #4]
 8021a30:	f103 0304 	add.w	r3, r3, #4
 8021a34:	4610      	mov	r0, r2
 8021a36:	4619      	mov	r1, r3
 8021a38:	f000 f9e0 	bl	8021dfc <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 8021a3c:	f640 2310 	movw	r3, #2576	; 0xa10
 8021a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021a44:	681b      	ldr	r3, [r3, #0]
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	d1b8      	bne.n	80219bc <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
 8021a4a:	f107 0708 	add.w	r7, r7, #8
 8021a4e:	46bd      	mov	sp, r7
 8021a50:	bd80      	pop	{r7, pc}
 8021a52:	bf00      	nop

08021a54 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
 8021a54:	b580      	push	{r7, lr}
 8021a56:	b082      	sub	sp, #8
 8021a58:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 8021a5a:	f001 fb15 	bl	8023088 <xTaskGetTickCount>
 8021a5e:	4602      	mov	r2, r0
 8021a60:	f640 2330 	movw	r3, #2608	; 0xa30
 8021a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021a68:	681b      	ldr	r3, [r3, #0]
 8021a6a:	1ad2      	subs	r2, r2, r3
 8021a6c:	f640 2334 	movw	r3, #2612	; 0xa34
 8021a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021a74:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
 8021a76:	e08f      	b.n	8021b98 <prvCheckDelayedList+0x144>
	{
		xCoRoutineTickCount++;
 8021a78:	f640 232c 	movw	r3, #2604	; 0xa2c
 8021a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021a80:	681b      	ldr	r3, [r3, #0]
 8021a82:	f103 0201 	add.w	r2, r3, #1
 8021a86:	f640 232c 	movw	r3, #2604	; 0xa2c
 8021a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021a8e:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
 8021a90:	f640 2334 	movw	r3, #2612	; 0xa34
 8021a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021a98:	681b      	ldr	r3, [r3, #0]
 8021a9a:	f103 32ff 	add.w	r2, r3, #4294967295
 8021a9e:	f640 2334 	movw	r3, #2612	; 0xa34
 8021aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021aa6:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
 8021aa8:	f640 232c 	movw	r3, #2604	; 0xa2c
 8021aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d165      	bne.n	8021b82 <prvCheckDelayedList+0x12e>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
 8021ab6:	f640 2308 	movw	r3, #2568	; 0xa08
 8021aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021abe:	681b      	ldr	r3, [r3, #0]
 8021ac0:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 8021ac2:	f640 230c 	movw	r3, #2572	; 0xa0c
 8021ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021aca:	681a      	ldr	r2, [r3, #0]
 8021acc:	f640 2308 	movw	r3, #2568	; 0xa08
 8021ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021ad4:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
 8021ad6:	f640 230c 	movw	r3, #2572	; 0xa0c
 8021ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021ade:	687a      	ldr	r2, [r7, #4]
 8021ae0:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 8021ae2:	e04e      	b.n	8021b82 <prvCheckDelayedList+0x12e>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 8021ae4:	f640 2308 	movw	r3, #2568	; 0xa08
 8021ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021aec:	681b      	ldr	r3, [r3, #0]
 8021aee:	68db      	ldr	r3, [r3, #12]
 8021af0:	68db      	ldr	r3, [r3, #12]
 8021af2:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 8021af4:	683b      	ldr	r3, [r7, #0]
 8021af6:	685a      	ldr	r2, [r3, #4]
 8021af8:	f640 232c 	movw	r3, #2604	; 0xa2c
 8021afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	429a      	cmp	r2, r3
 8021b04:	d847      	bhi.n	8021b96 <prvCheckDelayedList+0x142>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
 8021b06:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8021b0a:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
 8021b0e:	683b      	ldr	r3, [r7, #0]
 8021b10:	f103 0304 	add.w	r3, r3, #4
 8021b14:	4618      	mov	r0, r3
 8021b16:	f000 f9d7 	bl	8021ec8 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
 8021b1a:	683b      	ldr	r3, [r7, #0]
 8021b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	d005      	beq.n	8021b2e <prvCheckDelayedList+0xda>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
 8021b22:	683b      	ldr	r3, [r7, #0]
 8021b24:	f103 0318 	add.w	r3, r3, #24
 8021b28:	4618      	mov	r0, r3
 8021b2a:	f000 f9cd 	bl	8021ec8 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
 8021b2e:	f04f 0000 	mov.w	r0, #0
 8021b32:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
 8021b36:	683b      	ldr	r3, [r7, #0]
 8021b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b3a:	f640 2328 	movw	r3, #2600	; 0xa28
 8021b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021b42:	681b      	ldr	r3, [r3, #0]
 8021b44:	429a      	cmp	r2, r3
 8021b46:	d906      	bls.n	8021b56 <prvCheckDelayedList+0x102>
 8021b48:	683b      	ldr	r3, [r7, #0]
 8021b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b4c:	f640 2328 	movw	r3, #2600	; 0xa28
 8021b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021b54:	601a      	str	r2, [r3, #0]
 8021b56:	683b      	ldr	r3, [r7, #0]
 8021b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021b5a:	4613      	mov	r3, r2
 8021b5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021b60:	189b      	adds	r3, r3, r2
 8021b62:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021b66:	461a      	mov	r2, r3
 8021b68:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8021b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021b70:	18d2      	adds	r2, r2, r3
 8021b72:	683b      	ldr	r3, [r7, #0]
 8021b74:	f103 0304 	add.w	r3, r3, #4
 8021b78:	4610      	mov	r0, r2
 8021b7a:	4619      	mov	r1, r3
 8021b7c:	f000 f93e 	bl	8021dfc <vListInsertEnd>
 8021b80:	e000      	b.n	8021b84 <prvCheckDelayedList+0x130>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 8021b82:	bf00      	nop
 8021b84:	f640 2308 	movw	r3, #2568	; 0xa08
 8021b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021b8c:	681b      	ldr	r3, [r3, #0]
 8021b8e:	681b      	ldr	r3, [r3, #0]
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	d1a7      	bne.n	8021ae4 <prvCheckDelayedList+0x90>
 8021b94:	e000      	b.n	8021b98 <prvCheckDelayedList+0x144>
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
			{			
				/* Timeout not yet expired. */																			
				break;																				
 8021b96:	bf00      	nop
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
 8021b98:	f640 2334 	movw	r3, #2612	; 0xa34
 8021b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021ba0:	681b      	ldr	r3, [r3, #0]
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	f47f af68 	bne.w	8021a78 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
 8021ba8:	f640 232c 	movw	r3, #2604	; 0xa2c
 8021bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021bb0:	681a      	ldr	r2, [r3, #0]
 8021bb2:	f640 2330 	movw	r3, #2608	; 0xa30
 8021bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021bba:	601a      	str	r2, [r3, #0]
}
 8021bbc:	f107 0708 	add.w	r7, r7, #8
 8021bc0:	46bd      	mov	sp, r7
 8021bc2:	bd80      	pop	{r7, pc}

08021bc4 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
 8021bc4:	b580      	push	{r7, lr}
 8021bc6:	b082      	sub	sp, #8
 8021bc8:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
 8021bca:	f7ff fef3 	bl	80219b4 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
 8021bce:	f7ff ff41 	bl	8021a54 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 8021bd2:	e012      	b.n	8021bfa <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
 8021bd4:	f640 2328 	movw	r3, #2600	; 0xa28
 8021bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021bdc:	681b      	ldr	r3, [r3, #0]
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d063      	beq.n	8021caa <vCoRoutineSchedule+0xe6>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
 8021be2:	f640 2328 	movw	r3, #2600	; 0xa28
 8021be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	f103 32ff 	add.w	r2, r3, #4294967295
 8021bf0:	f640 2328 	movw	r3, #2600	; 0xa28
 8021bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021bf8:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 8021bfa:	f640 2328 	movw	r3, #2600	; 0xa28
 8021bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021c02:	681a      	ldr	r2, [r3, #0]
 8021c04:	4613      	mov	r3, r2
 8021c06:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021c0a:	189b      	adds	r3, r3, r2
 8021c0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021c10:	461a      	mov	r2, r3
 8021c12:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8021c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021c1a:	18d3      	adds	r3, r2, r3
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	2b00      	cmp	r3, #0
 8021c20:	d0d8      	beq.n	8021bd4 <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
 8021c22:	f640 2328 	movw	r3, #2600	; 0xa28
 8021c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021c2a:	681a      	ldr	r2, [r3, #0]
 8021c2c:	4613      	mov	r3, r2
 8021c2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021c32:	189b      	adds	r3, r3, r2
 8021c34:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021c38:	461a      	mov	r2, r3
 8021c3a:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8021c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021c42:	18d3      	adds	r3, r2, r3
 8021c44:	607b      	str	r3, [r7, #4]
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	685b      	ldr	r3, [r3, #4]
 8021c4a:	685b      	ldr	r3, [r3, #4]
 8021c4c:	461a      	mov	r2, r3
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	605a      	str	r2, [r3, #4]
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	685a      	ldr	r2, [r3, #4]
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	f103 0308 	add.w	r3, r3, #8
 8021c5c:	429a      	cmp	r2, r3
 8021c5e:	d105      	bne.n	8021c6c <vCoRoutineSchedule+0xa8>
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	685b      	ldr	r3, [r3, #4]
 8021c64:	685b      	ldr	r3, [r3, #4]
 8021c66:	461a      	mov	r2, r3
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	605a      	str	r2, [r3, #4]
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	685b      	ldr	r3, [r3, #4]
 8021c70:	68db      	ldr	r3, [r3, #12]
 8021c72:	461a      	mov	r2, r3
 8021c74:	f640 2324 	movw	r3, #2596	; 0xa24
 8021c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021c7c:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 8021c7e:	f640 2324 	movw	r3, #2596	; 0xa24
 8021c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021c86:	681b      	ldr	r3, [r3, #0]
 8021c88:	681a      	ldr	r2, [r3, #0]
 8021c8a:	f640 2324 	movw	r3, #2596	; 0xa24
 8021c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021c92:	6819      	ldr	r1, [r3, #0]
 8021c94:	f640 2324 	movw	r3, #2596	; 0xa24
 8021c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021c9c:	681b      	ldr	r3, [r3, #0]
 8021c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ca0:	4608      	mov	r0, r1
 8021ca2:	4619      	mov	r1, r3
 8021ca4:	4790      	blx	r2

	return;
 8021ca6:	bf00      	nop
 8021ca8:	e000      	b.n	8021cac <vCoRoutineSchedule+0xe8>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
 8021caa:	bf00      	nop

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
 8021cac:	f107 0708 	add.w	r7, r7, #8
 8021cb0:	46bd      	mov	sp, r7
 8021cb2:	bd80      	pop	{r7, pc}

08021cb4 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
 8021cb4:	b580      	push	{r7, lr}
 8021cb6:	b082      	sub	sp, #8
 8021cb8:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 8021cba:	f04f 0300 	mov.w	r3, #0
 8021cbe:	607b      	str	r3, [r7, #4]
 8021cc0:	e013      	b.n	8021cea <prvInitialiseCoRoutineLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 8021cc2:	687a      	ldr	r2, [r7, #4]
 8021cc4:	4613      	mov	r3, r2
 8021cc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021cca:	189b      	adds	r3, r3, r2
 8021ccc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8021cd0:	461a      	mov	r2, r3
 8021cd2:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8021cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021cda:	18d3      	adds	r3, r2, r3
 8021cdc:	4618      	mov	r0, r3
 8021cde:	f000 f85f 	bl	8021da0 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	f103 0301 	add.w	r3, r3, #1
 8021ce8:	607b      	str	r3, [r7, #4]
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	2b01      	cmp	r3, #1
 8021cee:	d9e8      	bls.n	8021cc2 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
 8021cf0:	f640 10e0 	movw	r0, #2528	; 0x9e0
 8021cf4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8021cf8:	f000 f852 	bl	8021da0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
 8021cfc:	f640 10f4 	movw	r0, #2548	; 0x9f4
 8021d00:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8021d04:	f000 f84c 	bl	8021da0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
 8021d08:	f640 2010 	movw	r0, #2576	; 0xa10
 8021d0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8021d10:	f000 f846 	bl	8021da0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 8021d14:	f640 2308 	movw	r3, #2568	; 0xa08
 8021d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021d1c:	f640 12e0 	movw	r2, #2528	; 0x9e0
 8021d20:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8021d24:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 8021d26:	f640 230c 	movw	r3, #2572	; 0xa0c
 8021d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021d2e:	f640 12f4 	movw	r2, #2548	; 0x9f4
 8021d32:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8021d36:	601a      	str	r2, [r3, #0]
}
 8021d38:	f107 0708 	add.w	r7, r7, #8
 8021d3c:	46bd      	mov	sp, r7
 8021d3e:	bd80      	pop	{r7, pc}

08021d40 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
 8021d40:	b580      	push	{r7, lr}
 8021d42:	b084      	sub	sp, #16
 8021d44:	af00      	add	r7, sp, #0
 8021d46:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	68db      	ldr	r3, [r3, #12]
 8021d4c:	68db      	ldr	r3, [r3, #12]
 8021d4e:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 8021d50:	68bb      	ldr	r3, [r7, #8]
 8021d52:	f103 0318 	add.w	r3, r3, #24
 8021d56:	4618      	mov	r0, r3
 8021d58:	f000 f8b6 	bl	8021ec8 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
 8021d5c:	68bb      	ldr	r3, [r7, #8]
 8021d5e:	f103 0318 	add.w	r3, r3, #24
 8021d62:	f640 2010 	movw	r0, #2576	; 0xa10
 8021d66:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8021d6a:	4619      	mov	r1, r3
 8021d6c:	f000 f846 	bl	8021dfc <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 8021d70:	68bb      	ldr	r3, [r7, #8]
 8021d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d74:	f640 2324 	movw	r3, #2596	; 0xa24
 8021d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8021d7c:	681b      	ldr	r3, [r3, #0]
 8021d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d80:	429a      	cmp	r2, r3
 8021d82:	d303      	bcc.n	8021d8c <xCoRoutineRemoveFromEventList+0x4c>
	{
		xReturn = pdTRUE;
 8021d84:	f04f 0301 	mov.w	r3, #1
 8021d88:	60fb      	str	r3, [r7, #12]
 8021d8a:	e002      	b.n	8021d92 <xCoRoutineRemoveFromEventList+0x52>
	}
	else
	{
		xReturn = pdFALSE;
 8021d8c:	f04f 0300 	mov.w	r3, #0
 8021d90:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8021d92:	68fb      	ldr	r3, [r7, #12]
}
 8021d94:	4618      	mov	r0, r3
 8021d96:	f107 0710 	add.w	r7, r7, #16
 8021d9a:	46bd      	mov	sp, r7
 8021d9c:	bd80      	pop	{r7, pc}
 8021d9e:	bf00      	nop

08021da0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8021da0:	b480      	push	{r7}
 8021da2:	b083      	sub	sp, #12
 8021da4:	af00      	add	r7, sp, #0
 8021da6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8021da8:	687b      	ldr	r3, [r7, #4]
 8021daa:	f103 0208 	add.w	r2, r3, #8
 8021dae:	687b      	ldr	r3, [r7, #4]
 8021db0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8021db2:	687b      	ldr	r3, [r7, #4]
 8021db4:	f04f 32ff 	mov.w	r2, #4294967295
 8021db8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8021dba:	687b      	ldr	r3, [r7, #4]
 8021dbc:	f103 0208 	add.w	r2, r3, #8
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	f103 0208 	add.w	r2, r3, #8
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8021dce:	687b      	ldr	r3, [r7, #4]
 8021dd0:	f04f 0200 	mov.w	r2, #0
 8021dd4:	601a      	str	r2, [r3, #0]
}
 8021dd6:	f107 070c 	add.w	r7, r7, #12
 8021dda:	46bd      	mov	sp, r7
 8021ddc:	bc80      	pop	{r7}
 8021dde:	4770      	bx	lr

08021de0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8021de0:	b480      	push	{r7}
 8021de2:	b083      	sub	sp, #12
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8021de8:	687b      	ldr	r3, [r7, #4]
 8021dea:	f04f 0200 	mov.w	r2, #0
 8021dee:	611a      	str	r2, [r3, #16]
}
 8021df0:	f107 070c 	add.w	r7, r7, #12
 8021df4:	46bd      	mov	sp, r7
 8021df6:	bc80      	pop	{r7}
 8021df8:	4770      	bx	lr
 8021dfa:	bf00      	nop

08021dfc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8021dfc:	b480      	push	{r7}
 8021dfe:	b085      	sub	sp, #20
 8021e00:	af00      	add	r7, sp, #0
 8021e02:	6078      	str	r0, [r7, #4]
 8021e04:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	685b      	ldr	r3, [r3, #4]
 8021e0a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8021e0c:	68fb      	ldr	r3, [r7, #12]
 8021e0e:	685b      	ldr	r3, [r3, #4]
 8021e10:	461a      	mov	r2, r3
 8021e12:	683b      	ldr	r3, [r7, #0]
 8021e14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	685a      	ldr	r2, [r3, #4]
 8021e1a:	683b      	ldr	r3, [r7, #0]
 8021e1c:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8021e1e:	68fb      	ldr	r3, [r7, #12]
 8021e20:	685b      	ldr	r3, [r3, #4]
 8021e22:	683a      	ldr	r2, [r7, #0]
 8021e24:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8021e26:	68fb      	ldr	r3, [r7, #12]
 8021e28:	683a      	ldr	r2, [r7, #0]
 8021e2a:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	683a      	ldr	r2, [r7, #0]
 8021e30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8021e32:	683b      	ldr	r3, [r7, #0]
 8021e34:	687a      	ldr	r2, [r7, #4]
 8021e36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	681b      	ldr	r3, [r3, #0]
 8021e3c:	f103 0201 	add.w	r2, r3, #1
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	601a      	str	r2, [r3, #0]
}
 8021e44:	f107 0714 	add.w	r7, r7, #20
 8021e48:	46bd      	mov	sp, r7
 8021e4a:	bc80      	pop	{r7}
 8021e4c:	4770      	bx	lr
 8021e4e:	bf00      	nop

08021e50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8021e50:	b480      	push	{r7}
 8021e52:	b085      	sub	sp, #20
 8021e54:	af00      	add	r7, sp, #0
 8021e56:	6078      	str	r0, [r7, #4]
 8021e58:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8021e5a:	683b      	ldr	r3, [r7, #0]
 8021e5c:	681b      	ldr	r3, [r3, #0]
 8021e5e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8021e60:	68bb      	ldr	r3, [r7, #8]
 8021e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e66:	d103      	bne.n	8021e70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8021e68:	687b      	ldr	r3, [r7, #4]
 8021e6a:	691b      	ldr	r3, [r3, #16]
 8021e6c:	60fb      	str	r3, [r7, #12]
 8021e6e:	e00e      	b.n	8021e8e <vListInsert+0x3e>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	f103 0308 	add.w	r3, r3, #8
 8021e76:	60fb      	str	r3, [r7, #12]
 8021e78:	e002      	b.n	8021e80 <vListInsert+0x30>
 8021e7a:	68fb      	ldr	r3, [r7, #12]
 8021e7c:	685b      	ldr	r3, [r3, #4]
 8021e7e:	60fb      	str	r3, [r7, #12]
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	685b      	ldr	r3, [r3, #4]
 8021e84:	681b      	ldr	r3, [r3, #0]
 8021e86:	461a      	mov	r2, r3
 8021e88:	68bb      	ldr	r3, [r7, #8]
 8021e8a:	429a      	cmp	r2, r3
 8021e8c:	d9f5      	bls.n	8021e7a <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	685b      	ldr	r3, [r3, #4]
 8021e92:	461a      	mov	r2, r3
 8021e94:	683b      	ldr	r3, [r7, #0]
 8021e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8021e98:	683b      	ldr	r3, [r7, #0]
 8021e9a:	685b      	ldr	r3, [r3, #4]
 8021e9c:	683a      	ldr	r2, [r7, #0]
 8021e9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8021ea0:	683b      	ldr	r3, [r7, #0]
 8021ea2:	68fa      	ldr	r2, [r7, #12]
 8021ea4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8021ea6:	68fb      	ldr	r3, [r7, #12]
 8021ea8:	683a      	ldr	r2, [r7, #0]
 8021eaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8021eac:	683b      	ldr	r3, [r7, #0]
 8021eae:	687a      	ldr	r2, [r7, #4]
 8021eb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8021eb2:	687b      	ldr	r3, [r7, #4]
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	f103 0201 	add.w	r2, r3, #1
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	601a      	str	r2, [r3, #0]
}
 8021ebe:	f107 0714 	add.w	r7, r7, #20
 8021ec2:	46bd      	mov	sp, r7
 8021ec4:	bc80      	pop	{r7}
 8021ec6:	4770      	bx	lr

08021ec8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8021ec8:	b480      	push	{r7}
 8021eca:	b085      	sub	sp, #20
 8021ecc:	af00      	add	r7, sp, #0
 8021ece:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	685b      	ldr	r3, [r3, #4]
 8021ed4:	687a      	ldr	r2, [r7, #4]
 8021ed6:	6892      	ldr	r2, [r2, #8]
 8021ed8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8021eda:	687b      	ldr	r3, [r7, #4]
 8021edc:	689b      	ldr	r3, [r3, #8]
 8021ede:	687a      	ldr	r2, [r7, #4]
 8021ee0:	6852      	ldr	r2, [r2, #4]
 8021ee2:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	691b      	ldr	r3, [r3, #16]
 8021ee8:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8021eea:	68fb      	ldr	r3, [r7, #12]
 8021eec:	685a      	ldr	r2, [r3, #4]
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	429a      	cmp	r2, r3
 8021ef2:	d103      	bne.n	8021efc <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	689a      	ldr	r2, [r3, #8]
 8021ef8:	68fb      	ldr	r3, [r7, #12]
 8021efa:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	f04f 0200 	mov.w	r2, #0
 8021f02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8021f04:	68fb      	ldr	r3, [r7, #12]
 8021f06:	681b      	ldr	r3, [r3, #0]
 8021f08:	f103 32ff 	add.w	r2, r3, #4294967295
 8021f0c:	68fb      	ldr	r3, [r7, #12]
 8021f0e:	601a      	str	r2, [r3, #0]
}
 8021f10:	f107 0714 	add.w	r7, r7, #20
 8021f14:	46bd      	mov	sp, r7
 8021f16:	bc80      	pop	{r7}
 8021f18:	4770      	bx	lr
 8021f1a:	bf00      	nop

08021f1c <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
 8021f1c:	b580      	push	{r7, lr}
 8021f1e:	b086      	sub	sp, #24
 8021f20:	af00      	add	r7, sp, #0
 8021f22:	6078      	str	r0, [r7, #4]
 8021f24:	6039      	str	r1, [r7, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8021f26:	f04f 0300 	mov.w	r3, #0
 8021f2a:	617b      	str	r3, [r7, #20]

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d056      	beq.n	8021fe0 <xQueueCreate+0xc4>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8021f32:	f04f 004c 	mov.w	r0, #76	; 0x4c
 8021f36:	f7e5 f8bd 	bl	80070b4 <malloc>
 8021f3a:	4603      	mov	r3, r0
 8021f3c:	613b      	str	r3, [r7, #16]
		if( pxNewQueue != NULL )
 8021f3e:	693b      	ldr	r3, [r7, #16]
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d04d      	beq.n	8021fe0 <xQueueCreate+0xc4>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	683a      	ldr	r2, [r7, #0]
 8021f48:	fb02 f303 	mul.w	r3, r2, r3
 8021f4c:	f103 0301 	add.w	r3, r3, #1
 8021f50:	60fb      	str	r3, [r7, #12]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8021f52:	68f8      	ldr	r0, [r7, #12]
 8021f54:	f7e5 f8ae 	bl	80070b4 <malloc>
 8021f58:	4603      	mov	r3, r0
 8021f5a:	461a      	mov	r2, r3
 8021f5c:	693b      	ldr	r3, [r7, #16]
 8021f5e:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8021f60:	693b      	ldr	r3, [r7, #16]
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	d038      	beq.n	8021fda <xQueueCreate+0xbe>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 8021f68:	693b      	ldr	r3, [r7, #16]
 8021f6a:	681a      	ldr	r2, [r3, #0]
 8021f6c:	687b      	ldr	r3, [r7, #4]
 8021f6e:	6839      	ldr	r1, [r7, #0]
 8021f70:	fb01 f303 	mul.w	r3, r1, r3
 8021f74:	18d2      	adds	r2, r2, r3
 8021f76:	693b      	ldr	r3, [r7, #16]
 8021f78:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8021f7a:	693b      	ldr	r3, [r7, #16]
 8021f7c:	f04f 0200 	mov.w	r2, #0
 8021f80:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 8021f82:	693b      	ldr	r3, [r7, #16]
 8021f84:	681a      	ldr	r2, [r3, #0]
 8021f86:	693b      	ldr	r3, [r7, #16]
 8021f88:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 8021f8a:	693b      	ldr	r3, [r7, #16]
 8021f8c:	681a      	ldr	r2, [r3, #0]
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	f103 33ff 	add.w	r3, r3, #4294967295
 8021f94:	6839      	ldr	r1, [r7, #0]
 8021f96:	fb01 f303 	mul.w	r3, r1, r3
 8021f9a:	18d2      	adds	r2, r2, r3
 8021f9c:	693b      	ldr	r3, [r7, #16]
 8021f9e:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
 8021fa0:	693b      	ldr	r3, [r7, #16]
 8021fa2:	687a      	ldr	r2, [r7, #4]
 8021fa4:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8021fa6:	693b      	ldr	r3, [r7, #16]
 8021fa8:	683a      	ldr	r2, [r7, #0]
 8021faa:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
 8021fac:	693b      	ldr	r3, [r7, #16]
 8021fae:	f04f 32ff 	mov.w	r2, #4294967295
 8021fb2:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 8021fb4:	693b      	ldr	r3, [r7, #16]
 8021fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8021fba:	649a      	str	r2, [r3, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8021fbc:	693b      	ldr	r3, [r7, #16]
 8021fbe:	f103 0310 	add.w	r3, r3, #16
 8021fc2:	4618      	mov	r0, r3
 8021fc4:	f7ff feec 	bl	8021da0 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8021fc8:	693b      	ldr	r3, [r7, #16]
 8021fca:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8021fce:	4618      	mov	r0, r3
 8021fd0:	f7ff fee6 	bl	8021da0 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8021fd4:	693b      	ldr	r3, [r7, #16]
 8021fd6:	617b      	str	r3, [r7, #20]
 8021fd8:	e002      	b.n	8021fe0 <xQueueCreate+0xc4>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
 8021fda:	6938      	ldr	r0, [r7, #16]
 8021fdc:	f7e5 f872 	bl	80070c4 <free>
		}
	}

	configASSERT( xReturn );

	return xReturn;
 8021fe0:	697b      	ldr	r3, [r7, #20]
}
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	f107 0718 	add.w	r7, r7, #24
 8021fe8:	46bd      	mov	sp, r7
 8021fea:	bd80      	pop	{r7, pc}

08021fec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
 8021fec:	b580      	push	{r7, lr}
 8021fee:	b082      	sub	sp, #8
 8021ff0:	af00      	add	r7, sp, #0
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8021ff2:	f04f 004c 	mov.w	r0, #76	; 0x4c
 8021ff6:	f7e5 f85d 	bl	80070b4 <malloc>
 8021ffa:	4603      	mov	r3, r0
 8021ffc:	607b      	str	r3, [r7, #4]
		if( pxNewQueue != NULL )
 8021ffe:	687b      	ldr	r3, [r7, #4]
 8022000:	2b00      	cmp	r3, #0
 8022002:	d038      	beq.n	8022076 <xQueueCreateMutex+0x8a>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8022004:	687b      	ldr	r3, [r7, #4]
 8022006:	f04f 0200 	mov.w	r2, #0
 802200a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 802200c:	687b      	ldr	r3, [r7, #4]
 802200e:	f04f 0200 	mov.w	r2, #0
 8022012:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	f04f 0200 	mov.w	r2, #0
 802201a:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
 802201c:	687b      	ldr	r3, [r7, #4]
 802201e:	f04f 0200 	mov.w	r2, #0
 8022022:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	f04f 0200 	mov.w	r2, #0
 802202a:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	f04f 0201 	mov.w	r2, #1
 8022032:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	f04f 0200 	mov.w	r2, #0
 802203a:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	f04f 32ff 	mov.w	r2, #4294967295
 8022042:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	f04f 32ff 	mov.w	r2, #4294967295
 802204a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 802204c:	687b      	ldr	r3, [r7, #4]
 802204e:	f103 0310 	add.w	r3, r3, #16
 8022052:	4618      	mov	r0, r3
 8022054:	f7ff fea4 	bl	8021da0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8022058:	687b      	ldr	r3, [r7, #4]
 802205a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 802205e:	4618      	mov	r0, r3
 8022060:	f7ff fe9e 	bl	8021da0 <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 8022064:	6878      	ldr	r0, [r7, #4]
 8022066:	f04f 0100 	mov.w	r1, #0
 802206a:	f04f 0200 	mov.w	r2, #0
 802206e:	f04f 0300 	mov.w	r3, #0
 8022072:	f000 f807 	bl	8022084 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
 8022076:	687b      	ldr	r3, [r7, #4]
	}
 8022078:	4618      	mov	r0, r3
 802207a:	f107 0708 	add.w	r7, r7, #8
 802207e:	46bd      	mov	sp, r7
 8022080:	bd80      	pop	{r7, pc}
 8022082:	bf00      	nop

08022084 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8022084:	b580      	push	{r7, lr}
 8022086:	b088      	sub	sp, #32
 8022088:	af00      	add	r7, sp, #0
 802208a:	60f8      	str	r0, [r7, #12]
 802208c:	60b9      	str	r1, [r7, #8]
 802208e:	607a      	str	r2, [r7, #4]
 8022090:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8022092:	f04f 0300 	mov.w	r3, #0
 8022096:	61fb      	str	r3, [r7, #28]
 8022098:	e000      	b.n	802209c <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 802209a:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802209c:	f7ff fb1c 	bl	80216d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80220a4:	461a      	mov	r2, r3
 80220a6:	68fb      	ldr	r3, [r7, #12]
 80220a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80220aa:	429a      	cmp	r2, r3
 80220ac:	d218      	bcs.n	80220e0 <xQueueGenericSend+0x5c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80220ae:	68f8      	ldr	r0, [r7, #12]
 80220b0:	68b9      	ldr	r1, [r7, #8]
 80220b2:	683a      	ldr	r2, [r7, #0]
 80220b4:	f000 f9fe 	bl	80224b4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80220b8:	68fb      	ldr	r3, [r7, #12]
 80220ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220bc:	2b00      	cmp	r3, #0
 80220be:	d00a      	beq.n	80220d6 <xQueueGenericSend+0x52>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80220c0:	68fb      	ldr	r3, [r7, #12]
 80220c2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80220c6:	4618      	mov	r0, r3
 80220c8:	f001 faee 	bl	80236a8 <xTaskRemoveFromEventList>
 80220cc:	4603      	mov	r3, r0
 80220ce:	2b01      	cmp	r3, #1
 80220d0:	d101      	bne.n	80220d6 <xQueueGenericSend+0x52>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 80220d2:	f7ff faf5 	bl	80216c0 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 80220d6:	f7ff fb15 	bl	8021704 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 80220da:	f04f 0301 	mov.w	r3, #1
 80220de:	e05d      	b.n	802219c <xQueueGenericSend+0x118>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	d104      	bne.n	80220f0 <xQueueGenericSend+0x6c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80220e6:	f7ff fb0d 	bl	8021704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80220ea:	f04f 0300 	mov.w	r3, #0
 80220ee:	e055      	b.n	802219c <xQueueGenericSend+0x118>
				}
				else if( xEntryTimeSet == pdFALSE )
 80220f0:	69fb      	ldr	r3, [r7, #28]
 80220f2:	2b00      	cmp	r3, #0
 80220f4:	d107      	bne.n	8022106 <xQueueGenericSend+0x82>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80220f6:	f107 0314 	add.w	r3, r7, #20
 80220fa:	4618      	mov	r0, r3
 80220fc:	f001 fb36 	bl	802376c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8022100:	f04f 0301 	mov.w	r3, #1
 8022104:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8022106:	f7ff fafd 	bl	8021704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802210a:	f000 ff01 	bl	8022f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802210e:	f7ff fae3 	bl	80216d8 <vPortEnterCritical>
 8022112:	68fb      	ldr	r3, [r7, #12]
 8022114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022116:	f1b3 3fff 	cmp.w	r3, #4294967295
 802211a:	d103      	bne.n	8022124 <xQueueGenericSend+0xa0>
 802211c:	68fb      	ldr	r3, [r7, #12]
 802211e:	f04f 0200 	mov.w	r2, #0
 8022122:	645a      	str	r2, [r3, #68]	; 0x44
 8022124:	68fb      	ldr	r3, [r7, #12]
 8022126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022128:	f1b3 3fff 	cmp.w	r3, #4294967295
 802212c:	d103      	bne.n	8022136 <xQueueGenericSend+0xb2>
 802212e:	68fb      	ldr	r3, [r7, #12]
 8022130:	f04f 0200 	mov.w	r2, #0
 8022134:	649a      	str	r2, [r3, #72]	; 0x48
 8022136:	f7ff fae5 	bl	8021704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802213a:	f107 0214 	add.w	r2, r7, #20
 802213e:	f107 0304 	add.w	r3, r7, #4
 8022142:	4610      	mov	r0, r2
 8022144:	4619      	mov	r1, r3
 8022146:	f001 fb29 	bl	802379c <xTaskCheckForTimeOut>
 802214a:	4603      	mov	r3, r0
 802214c:	2b00      	cmp	r3, #0
 802214e:	d11e      	bne.n	802218e <xQueueGenericSend+0x10a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8022150:	68f8      	ldr	r0, [r7, #12]
 8022152:	f000 fab3 	bl	80226bc <prvIsQueueFull>
 8022156:	4603      	mov	r3, r0
 8022158:	2b00      	cmp	r3, #0
 802215a:	d012      	beq.n	8022182 <xQueueGenericSend+0xfe>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 802215c:	68fb      	ldr	r3, [r7, #12]
 802215e:	f103 0210 	add.w	r2, r3, #16
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	4610      	mov	r0, r2
 8022166:	4619      	mov	r1, r3
 8022168:	f001 fa62 	bl	8023630 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 802216c:	68f8      	ldr	r0, [r7, #12]
 802216e:	f000 fa2d 	bl	80225cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8022172:	f000 fedf 	bl	8022f34 <xTaskResumeAll>
 8022176:	4603      	mov	r3, r0
 8022178:	2b00      	cmp	r3, #0
 802217a:	d18e      	bne.n	802209a <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 802217c:	f7ff faa0 	bl	80216c0 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8022180:	e78b      	b.n	802209a <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8022182:	68f8      	ldr	r0, [r7, #12]
 8022184:	f000 fa22 	bl	80225cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8022188:	f000 fed4 	bl	8022f34 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 802218c:	e785      	b.n	802209a <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 802218e:	68f8      	ldr	r0, [r7, #12]
 8022190:	f000 fa1c 	bl	80225cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8022194:	f000 fece 	bl	8022f34 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8022198:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 802219c:	4618      	mov	r0, r3
 802219e:	f107 0720 	add.w	r7, r7, #32
 80221a2:	46bd      	mov	sp, r7
 80221a4:	bd80      	pop	{r7, pc}
 80221a6:	bf00      	nop

080221a8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 80221a8:	b580      	push	{r7, lr}
 80221aa:	b086      	sub	sp, #24
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	60f8      	str	r0, [r7, #12]
 80221b0:	60b9      	str	r1, [r7, #8]
 80221b2:	607a      	str	r2, [r7, #4]
 80221b4:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80221b6:	f04f 0300 	mov.w	r3, #0
 80221ba:	613b      	str	r3, [r7, #16]
 80221bc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80221c0:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80221c4:	68fb      	ldr	r3, [r7, #12]
 80221c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80221c8:	461a      	mov	r2, r3
 80221ca:	68fb      	ldr	r3, [r7, #12]
 80221cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80221ce:	429a      	cmp	r2, r3
 80221d0:	d225      	bcs.n	802221e <xQueueGenericSendFromISR+0x76>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80221d2:	68f8      	ldr	r0, [r7, #12]
 80221d4:	68b9      	ldr	r1, [r7, #8]
 80221d6:	683a      	ldr	r2, [r7, #0]
 80221d8:	f000 f96c 	bl	80224b4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80221dc:	68fb      	ldr	r3, [r7, #12]
 80221de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80221e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80221e4:	d111      	bne.n	802220a <xQueueGenericSendFromISR+0x62>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d013      	beq.n	8022216 <xQueueGenericSendFromISR+0x6e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80221ee:	68fb      	ldr	r3, [r7, #12]
 80221f0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80221f4:	4618      	mov	r0, r3
 80221f6:	f001 fa57 	bl	80236a8 <xTaskRemoveFromEventList>
 80221fa:	4603      	mov	r3, r0
 80221fc:	2b00      	cmp	r3, #0
 80221fe:	d00a      	beq.n	8022216 <xQueueGenericSendFromISR+0x6e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
 8022200:	687b      	ldr	r3, [r7, #4]
 8022202:	f04f 0201 	mov.w	r2, #1
 8022206:	601a      	str	r2, [r3, #0]
 8022208:	e005      	b.n	8022216 <xQueueGenericSendFromISR+0x6e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 802220a:	68fb      	ldr	r3, [r7, #12]
 802220c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802220e:	f103 0201 	add.w	r2, r3, #1
 8022212:	68fb      	ldr	r3, [r7, #12]
 8022214:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8022216:	f04f 0301 	mov.w	r3, #1
 802221a:	617b      	str	r3, [r7, #20]
 802221c:	e002      	b.n	8022224 <xQueueGenericSendFromISR+0x7c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 802221e:	f04f 0300 	mov.w	r3, #0
 8022222:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8022224:	f04f 0000 	mov.w	r0, #0
 8022228:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 802222c:	697b      	ldr	r3, [r7, #20]
}
 802222e:	4618      	mov	r0, r3
 8022230:	f107 0718 	add.w	r7, r7, #24
 8022234:	46bd      	mov	sp, r7
 8022236:	bd80      	pop	{r7, pc}

08022238 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8022238:	b580      	push	{r7, lr}
 802223a:	b088      	sub	sp, #32
 802223c:	af00      	add	r7, sp, #0
 802223e:	60f8      	str	r0, [r7, #12]
 8022240:	60b9      	str	r1, [r7, #8]
 8022242:	607a      	str	r2, [r7, #4]
 8022244:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8022246:	f04f 0300 	mov.w	r3, #0
 802224a:	61fb      	str	r3, [r7, #28]
 802224c:	e000      	b.n	8022250 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 802224e:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8022250:	f7ff fa42 	bl	80216d8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8022254:	68fb      	ldr	r3, [r7, #12]
 8022256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022258:	2b00      	cmp	r3, #0
 802225a:	d03f      	beq.n	80222dc <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 802225c:	68fb      	ldr	r3, [r7, #12]
 802225e:	68db      	ldr	r3, [r3, #12]
 8022260:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8022262:	68f8      	ldr	r0, [r7, #12]
 8022264:	68b9      	ldr	r1, [r7, #8]
 8022266:	f000 f989 	bl	802257c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 802226a:	683b      	ldr	r3, [r7, #0]
 802226c:	2b00      	cmp	r3, #0
 802226e:	d11e      	bne.n	80222ae <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8022270:	68fb      	ldr	r3, [r7, #12]
 8022272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022274:	f103 32ff 	add.w	r2, r3, #4294967295
 8022278:	68fb      	ldr	r3, [r7, #12]
 802227a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802227c:	68fb      	ldr	r3, [r7, #12]
 802227e:	681b      	ldr	r3, [r3, #0]
 8022280:	2b00      	cmp	r3, #0
 8022282:	d104      	bne.n	802228e <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8022284:	f001 fd64 	bl	8023d50 <xTaskGetCurrentTaskHandle>
 8022288:	4602      	mov	r2, r0
 802228a:	68fb      	ldr	r3, [r7, #12]
 802228c:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802228e:	68fb      	ldr	r3, [r7, #12]
 8022290:	691b      	ldr	r3, [r3, #16]
 8022292:	2b00      	cmp	r3, #0
 8022294:	d01d      	beq.n	80222d2 <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8022296:	68fb      	ldr	r3, [r7, #12]
 8022298:	f103 0310 	add.w	r3, r3, #16
 802229c:	4618      	mov	r0, r3
 802229e:	f001 fa03 	bl	80236a8 <xTaskRemoveFromEventList>
 80222a2:	4603      	mov	r3, r0
 80222a4:	2b01      	cmp	r3, #1
 80222a6:	d114      	bne.n	80222d2 <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
 80222a8:	f7ff fa0a 	bl	80216c0 <vPortYieldFromISR>
 80222ac:	e011      	b.n	80222d2 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 80222ae:	68fb      	ldr	r3, [r7, #12]
 80222b0:	69ba      	ldr	r2, [r7, #24]
 80222b2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80222b4:	68fb      	ldr	r3, [r7, #12]
 80222b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80222b8:	2b00      	cmp	r3, #0
 80222ba:	d00a      	beq.n	80222d2 <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80222bc:	68fb      	ldr	r3, [r7, #12]
 80222be:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80222c2:	4618      	mov	r0, r3
 80222c4:	f001 f9f0 	bl	80236a8 <xTaskRemoveFromEventList>
 80222c8:	4603      	mov	r3, r0
 80222ca:	2b00      	cmp	r3, #0
 80222cc:	d001      	beq.n	80222d2 <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 80222ce:	f7ff f9f7 	bl	80216c0 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 80222d2:	f7ff fa17 	bl	8021704 <vPortExitCritical>
				return pdPASS;
 80222d6:	f04f 0301 	mov.w	r3, #1
 80222da:	e06b      	b.n	80223b4 <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	2b00      	cmp	r3, #0
 80222e0:	d104      	bne.n	80222ec <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80222e2:	f7ff fa0f 	bl	8021704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80222e6:	f04f 0300 	mov.w	r3, #0
 80222ea:	e063      	b.n	80223b4 <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80222ec:	69fb      	ldr	r3, [r7, #28]
 80222ee:	2b00      	cmp	r3, #0
 80222f0:	d107      	bne.n	8022302 <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80222f2:	f107 0310 	add.w	r3, r7, #16
 80222f6:	4618      	mov	r0, r3
 80222f8:	f001 fa38 	bl	802376c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80222fc:	f04f 0301 	mov.w	r3, #1
 8022300:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8022302:	f7ff f9ff 	bl	8021704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8022306:	f000 fe03 	bl	8022f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802230a:	f7ff f9e5 	bl	80216d8 <vPortEnterCritical>
 802230e:	68fb      	ldr	r3, [r7, #12]
 8022310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022316:	d103      	bne.n	8022320 <xQueueGenericReceive+0xe8>
 8022318:	68fb      	ldr	r3, [r7, #12]
 802231a:	f04f 0200 	mov.w	r2, #0
 802231e:	645a      	str	r2, [r3, #68]	; 0x44
 8022320:	68fb      	ldr	r3, [r7, #12]
 8022322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022328:	d103      	bne.n	8022332 <xQueueGenericReceive+0xfa>
 802232a:	68fb      	ldr	r3, [r7, #12]
 802232c:	f04f 0200 	mov.w	r2, #0
 8022330:	649a      	str	r2, [r3, #72]	; 0x48
 8022332:	f7ff f9e7 	bl	8021704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8022336:	f107 0210 	add.w	r2, r7, #16
 802233a:	f107 0304 	add.w	r3, r7, #4
 802233e:	4610      	mov	r0, r2
 8022340:	4619      	mov	r1, r3
 8022342:	f001 fa2b 	bl	802379c <xTaskCheckForTimeOut>
 8022346:	4603      	mov	r3, r0
 8022348:	2b00      	cmp	r3, #0
 802234a:	d12c      	bne.n	80223a6 <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802234c:	68f8      	ldr	r0, [r7, #12]
 802234e:	f000 f98d 	bl	802266c <prvIsQueueEmpty>
 8022352:	4603      	mov	r3, r0
 8022354:	2b00      	cmp	r3, #0
 8022356:	d020      	beq.n	802239a <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8022358:	68fb      	ldr	r3, [r7, #12]
 802235a:	681b      	ldr	r3, [r3, #0]
 802235c:	2b00      	cmp	r3, #0
 802235e:	d108      	bne.n	8022372 <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
 8022360:	f7ff f9ba 	bl	80216d8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8022364:	68fb      	ldr	r3, [r7, #12]
 8022366:	685b      	ldr	r3, [r3, #4]
 8022368:	4618      	mov	r0, r3
 802236a:	f001 fd01 	bl	8023d70 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 802236e:	f7ff f9c9 	bl	8021704 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8022372:	68fb      	ldr	r3, [r7, #12]
 8022374:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8022378:	687b      	ldr	r3, [r7, #4]
 802237a:	4610      	mov	r0, r2
 802237c:	4619      	mov	r1, r3
 802237e:	f001 f957 	bl	8023630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8022382:	68f8      	ldr	r0, [r7, #12]
 8022384:	f000 f922 	bl	80225cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8022388:	f000 fdd4 	bl	8022f34 <xTaskResumeAll>
 802238c:	4603      	mov	r3, r0
 802238e:	2b00      	cmp	r3, #0
 8022390:	f47f af5d 	bne.w	802224e <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 8022394:	f7ff f994 	bl	80216c0 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8022398:	e759      	b.n	802224e <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 802239a:	68f8      	ldr	r0, [r7, #12]
 802239c:	f000 f916 	bl	80225cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80223a0:	f000 fdc8 	bl	8022f34 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80223a4:	e753      	b.n	802224e <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80223a6:	68f8      	ldr	r0, [r7, #12]
 80223a8:	f000 f910 	bl	80225cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80223ac:	f000 fdc2 	bl	8022f34 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80223b0:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 80223b4:	4618      	mov	r0, r3
 80223b6:	f107 0720 	add.w	r7, r7, #32
 80223ba:	46bd      	mov	sp, r7
 80223bc:	bd80      	pop	{r7, pc}
 80223be:	bf00      	nop

080223c0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
 80223c0:	b580      	push	{r7, lr}
 80223c2:	b086      	sub	sp, #24
 80223c4:	af00      	add	r7, sp, #0
 80223c6:	60f8      	str	r0, [r7, #12]
 80223c8:	60b9      	str	r1, [r7, #8]
 80223ca:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80223cc:	f04f 0300 	mov.w	r3, #0
 80223d0:	613b      	str	r3, [r7, #16]
 80223d2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80223d6:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80223da:	68fb      	ldr	r3, [r7, #12]
 80223dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80223de:	2b00      	cmp	r3, #0
 80223e0:	d02a      	beq.n	8022438 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80223e2:	68f8      	ldr	r0, [r7, #12]
 80223e4:	68b9      	ldr	r1, [r7, #8]
 80223e6:	f000 f8c9 	bl	802257c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 80223ea:	68fb      	ldr	r3, [r7, #12]
 80223ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80223ee:	f103 32ff 	add.w	r2, r3, #4294967295
 80223f2:	68fb      	ldr	r3, [r7, #12]
 80223f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 80223f6:	68fb      	ldr	r3, [r7, #12]
 80223f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80223fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80223fe:	d111      	bne.n	8022424 <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8022400:	68fb      	ldr	r3, [r7, #12]
 8022402:	691b      	ldr	r3, [r3, #16]
 8022404:	2b00      	cmp	r3, #0
 8022406:	d013      	beq.n	8022430 <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8022408:	68fb      	ldr	r3, [r7, #12]
 802240a:	f103 0310 	add.w	r3, r3, #16
 802240e:	4618      	mov	r0, r3
 8022410:	f001 f94a 	bl	80236a8 <xTaskRemoveFromEventList>
 8022414:	4603      	mov	r3, r0
 8022416:	2b00      	cmp	r3, #0
 8022418:	d00a      	beq.n	8022430 <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	f04f 0201 	mov.w	r2, #1
 8022420:	601a      	str	r2, [r3, #0]
 8022422:	e005      	b.n	8022430 <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8022424:	68fb      	ldr	r3, [r7, #12]
 8022426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022428:	f103 0201 	add.w	r2, r3, #1
 802242c:	68fb      	ldr	r3, [r7, #12]
 802242e:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8022430:	f04f 0301 	mov.w	r3, #1
 8022434:	617b      	str	r3, [r7, #20]
 8022436:	e002      	b.n	802243e <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
 8022438:	f04f 0300 	mov.w	r3, #0
 802243c:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 802243e:	f04f 0000 	mov.w	r0, #0
 8022442:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 8022446:	697b      	ldr	r3, [r7, #20]
}
 8022448:	4618      	mov	r0, r3
 802244a:	f107 0718 	add.w	r7, r7, #24
 802244e:	46bd      	mov	sp, r7
 8022450:	bd80      	pop	{r7, pc}
 8022452:	bf00      	nop

08022454 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
 8022454:	b580      	push	{r7, lr}
 8022456:	b084      	sub	sp, #16
 8022458:	af00      	add	r7, sp, #0
 802245a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 802245c:	f7ff f93c 	bl	80216d8 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
 8022460:	687b      	ldr	r3, [r7, #4]
 8022462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022464:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8022466:	f7ff f94d 	bl	8021704 <vPortExitCritical>

	return uxReturn;
 802246a:	68fb      	ldr	r3, [r7, #12]
}
 802246c:	4618      	mov	r0, r3
 802246e:	f107 0710 	add.w	r7, r7, #16
 8022472:	46bd      	mov	sp, r7
 8022474:	bd80      	pop	{r7, pc}
 8022476:	bf00      	nop

08022478 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
 8022478:	b480      	push	{r7}
 802247a:	b085      	sub	sp, #20
 802247c:	af00      	add	r7, sp, #0
 802247e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022484:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8022486:	68fb      	ldr	r3, [r7, #12]
}
 8022488:	4618      	mov	r0, r3
 802248a:	f107 0714 	add.w	r7, r7, #20
 802248e:	46bd      	mov	sp, r7
 8022490:	bc80      	pop	{r7}
 8022492:	4770      	bx	lr

08022494 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
 8022494:	b580      	push	{r7, lr}
 8022496:	b082      	sub	sp, #8
 8022498:	af00      	add	r7, sp, #0
 802249a:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	681b      	ldr	r3, [r3, #0]
 80224a0:	4618      	mov	r0, r3
 80224a2:	f7e4 fe0f 	bl	80070c4 <free>
	vPortFree( pxQueue );
 80224a6:	6878      	ldr	r0, [r7, #4]
 80224a8:	f7e4 fe0c 	bl	80070c4 <free>
}
 80224ac:	f107 0708 	add.w	r7, r7, #8
 80224b0:	46bd      	mov	sp, r7
 80224b2:	bd80      	pop	{r7, pc}

080224b4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 80224b4:	b580      	push	{r7, lr}
 80224b6:	b084      	sub	sp, #16
 80224b8:	af00      	add	r7, sp, #0
 80224ba:	60f8      	str	r0, [r7, #12]
 80224bc:	60b9      	str	r1, [r7, #8]
 80224be:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 80224c0:	68fb      	ldr	r3, [r7, #12]
 80224c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	d10d      	bne.n	80224e4 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80224c8:	68fb      	ldr	r3, [r7, #12]
 80224ca:	681b      	ldr	r3, [r3, #0]
 80224cc:	2b00      	cmp	r3, #0
 80224ce:	d14a      	bne.n	8022566 <prvCopyDataToQueue+0xb2>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80224d0:	68fb      	ldr	r3, [r7, #12]
 80224d2:	685b      	ldr	r3, [r3, #4]
 80224d4:	4618      	mov	r0, r3
 80224d6:	f001 fcb7 	bl	8023e48 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80224da:	68fb      	ldr	r3, [r7, #12]
 80224dc:	f04f 0200 	mov.w	r2, #0
 80224e0:	605a      	str	r2, [r3, #4]
 80224e2:	e040      	b.n	8022566 <prvCopyDataToQueue+0xb2>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	2b00      	cmp	r3, #0
 80224e8:	d11b      	bne.n	8022522 <prvCopyDataToQueue+0x6e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 80224ea:	68fb      	ldr	r3, [r7, #12]
 80224ec:	6899      	ldr	r1, [r3, #8]
 80224ee:	68fb      	ldr	r3, [r7, #12]
 80224f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80224f2:	68ba      	ldr	r2, [r7, #8]
 80224f4:	4608      	mov	r0, r1
 80224f6:	4611      	mov	r1, r2
 80224f8:	461a      	mov	r2, r3
 80224fa:	f7e5 f911 	bl	8007720 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80224fe:	68fb      	ldr	r3, [r7, #12]
 8022500:	689a      	ldr	r2, [r3, #8]
 8022502:	68fb      	ldr	r3, [r7, #12]
 8022504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022506:	18d2      	adds	r2, r2, r3
 8022508:	68fb      	ldr	r3, [r7, #12]
 802250a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 802250c:	68fb      	ldr	r3, [r7, #12]
 802250e:	689a      	ldr	r2, [r3, #8]
 8022510:	68fb      	ldr	r3, [r7, #12]
 8022512:	685b      	ldr	r3, [r3, #4]
 8022514:	429a      	cmp	r2, r3
 8022516:	d326      	bcc.n	8022566 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8022518:	68fb      	ldr	r3, [r7, #12]
 802251a:	681a      	ldr	r2, [r3, #0]
 802251c:	68fb      	ldr	r3, [r7, #12]
 802251e:	609a      	str	r2, [r3, #8]
 8022520:	e021      	b.n	8022566 <prvCopyDataToQueue+0xb2>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8022522:	68fb      	ldr	r3, [r7, #12]
 8022524:	68d9      	ldr	r1, [r3, #12]
 8022526:	68fb      	ldr	r3, [r7, #12]
 8022528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802252a:	68ba      	ldr	r2, [r7, #8]
 802252c:	4608      	mov	r0, r1
 802252e:	4611      	mov	r1, r2
 8022530:	461a      	mov	r2, r3
 8022532:	f7e5 f8f5 	bl	8007720 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8022536:	68fb      	ldr	r3, [r7, #12]
 8022538:	68da      	ldr	r2, [r3, #12]
 802253a:	68fb      	ldr	r3, [r7, #12]
 802253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802253e:	f1c3 0300 	rsb	r3, r3, #0
 8022542:	18d2      	adds	r2, r2, r3
 8022544:	68fb      	ldr	r3, [r7, #12]
 8022546:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8022548:	68fb      	ldr	r3, [r7, #12]
 802254a:	68da      	ldr	r2, [r3, #12]
 802254c:	68fb      	ldr	r3, [r7, #12]
 802254e:	681b      	ldr	r3, [r3, #0]
 8022550:	429a      	cmp	r2, r3
 8022552:	d208      	bcs.n	8022566 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8022554:	68fb      	ldr	r3, [r7, #12]
 8022556:	685a      	ldr	r2, [r3, #4]
 8022558:	68fb      	ldr	r3, [r7, #12]
 802255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802255c:	f1c3 0300 	rsb	r3, r3, #0
 8022560:	18d2      	adds	r2, r2, r3
 8022562:	68fb      	ldr	r3, [r7, #12]
 8022564:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8022566:	68fb      	ldr	r3, [r7, #12]
 8022568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802256a:	f103 0201 	add.w	r2, r3, #1
 802256e:	68fb      	ldr	r3, [r7, #12]
 8022570:	639a      	str	r2, [r3, #56]	; 0x38
}
 8022572:	f107 0710 	add.w	r7, r7, #16
 8022576:	46bd      	mov	sp, r7
 8022578:	bd80      	pop	{r7, pc}
 802257a:	bf00      	nop

0802257c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 802257c:	b580      	push	{r7, lr}
 802257e:	b082      	sub	sp, #8
 8022580:	af00      	add	r7, sp, #0
 8022582:	6078      	str	r0, [r7, #4]
 8022584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	2b00      	cmp	r3, #0
 802258c:	d01a      	beq.n	80225c4 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 802258e:	687b      	ldr	r3, [r7, #4]
 8022590:	68da      	ldr	r2, [r3, #12]
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022596:	18d2      	adds	r2, r2, r3
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 802259c:	687b      	ldr	r3, [r7, #4]
 802259e:	68da      	ldr	r2, [r3, #12]
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	685b      	ldr	r3, [r3, #4]
 80225a4:	429a      	cmp	r2, r3
 80225a6:	d303      	bcc.n	80225b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	681a      	ldr	r2, [r3, #0]
 80225ac:	687b      	ldr	r3, [r7, #4]
 80225ae:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 80225b0:	687b      	ldr	r3, [r7, #4]
 80225b2:	68da      	ldr	r2, [r3, #12]
 80225b4:	687b      	ldr	r3, [r7, #4]
 80225b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225b8:	6839      	ldr	r1, [r7, #0]
 80225ba:	4608      	mov	r0, r1
 80225bc:	4611      	mov	r1, r2
 80225be:	461a      	mov	r2, r3
 80225c0:	f7e5 f8ae 	bl	8007720 <memcpy>
	}
}
 80225c4:	f107 0708 	add.w	r7, r7, #8
 80225c8:	46bd      	mov	sp, r7
 80225ca:	bd80      	pop	{r7, pc}

080225cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 80225cc:	b580      	push	{r7, lr}
 80225ce:	b082      	sub	sp, #8
 80225d0:	af00      	add	r7, sp, #0
 80225d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80225d4:	f7ff f880 	bl	80216d8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80225d8:	e014      	b.n	8022604 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225de:	2b00      	cmp	r3, #0
 80225e0:	d015      	beq.n	802260e <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80225e2:	687b      	ldr	r3, [r7, #4]
 80225e4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80225e8:	4618      	mov	r0, r3
 80225ea:	f001 f85d 	bl	80236a8 <xTaskRemoveFromEventList>
 80225ee:	4603      	mov	r3, r0
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	d001      	beq.n	80225f8 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 80225f4:	f001 f924 	bl	8023840 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 80225f8:	687b      	ldr	r3, [r7, #4]
 80225fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80225fc:	f103 32ff 	add.w	r2, r3, #4294967295
 8022600:	687b      	ldr	r3, [r7, #4]
 8022602:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022608:	2b00      	cmp	r3, #0
 802260a:	dce6      	bgt.n	80225da <prvUnlockQueue+0xe>
 802260c:	e000      	b.n	8022610 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
 802260e:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	f04f 32ff 	mov.w	r2, #4294967295
 8022616:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8022618:	f7ff f874 	bl	8021704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 802261c:	f7ff f85c 	bl	80216d8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8022620:	e014      	b.n	802264c <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	691b      	ldr	r3, [r3, #16]
 8022626:	2b00      	cmp	r3, #0
 8022628:	d015      	beq.n	8022656 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	f103 0310 	add.w	r3, r3, #16
 8022630:	4618      	mov	r0, r3
 8022632:	f001 f839 	bl	80236a8 <xTaskRemoveFromEventList>
 8022636:	4603      	mov	r3, r0
 8022638:	2b00      	cmp	r3, #0
 802263a:	d001      	beq.n	8022640 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 802263c:	f001 f900 	bl	8023840 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022644:	f103 32ff 	add.w	r2, r3, #4294967295
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022650:	2b00      	cmp	r3, #0
 8022652:	dce6      	bgt.n	8022622 <prvUnlockQueue+0x56>
 8022654:	e000      	b.n	8022658 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 8022656:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	f04f 32ff 	mov.w	r2, #4294967295
 802265e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8022660:	f7ff f850 	bl	8021704 <vPortExitCritical>
}
 8022664:	f107 0708 	add.w	r7, r7, #8
 8022668:	46bd      	mov	sp, r7
 802266a:	bd80      	pop	{r7, pc}

0802266c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 802266c:	b580      	push	{r7, lr}
 802266e:	b084      	sub	sp, #16
 8022670:	af00      	add	r7, sp, #0
 8022672:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8022674:	f7ff f830 	bl	80216d8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802267c:	2b00      	cmp	r3, #0
 802267e:	bf14      	ite	ne
 8022680:	2300      	movne	r3, #0
 8022682:	2301      	moveq	r3, #1
 8022684:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8022686:	f7ff f83d 	bl	8021704 <vPortExitCritical>

	return xReturn;
 802268a:	68fb      	ldr	r3, [r7, #12]
}
 802268c:	4618      	mov	r0, r3
 802268e:	f107 0710 	add.w	r7, r7, #16
 8022692:	46bd      	mov	sp, r7
 8022694:	bd80      	pop	{r7, pc}
 8022696:	bf00      	nop

08022698 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
 8022698:	b480      	push	{r7}
 802269a:	b085      	sub	sp, #20
 802269c:	af00      	add	r7, sp, #0
 802269e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	bf14      	ite	ne
 80226a8:	2300      	movne	r3, #0
 80226aa:	2301      	moveq	r3, #1
 80226ac:	60fb      	str	r3, [r7, #12]

	return xReturn;
 80226ae:	68fb      	ldr	r3, [r7, #12]
}
 80226b0:	4618      	mov	r0, r3
 80226b2:	f107 0714 	add.w	r7, r7, #20
 80226b6:	46bd      	mov	sp, r7
 80226b8:	bc80      	pop	{r7}
 80226ba:	4770      	bx	lr

080226bc <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 80226bc:	b580      	push	{r7, lr}
 80226be:	b084      	sub	sp, #16
 80226c0:	af00      	add	r7, sp, #0
 80226c2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80226c4:	f7ff f808 	bl	80216d8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226cc:	461a      	mov	r2, r3
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80226d2:	429a      	cmp	r2, r3
 80226d4:	bf14      	ite	ne
 80226d6:	2300      	movne	r3, #0
 80226d8:	2301      	moveq	r3, #1
 80226da:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 80226dc:	f7ff f812 	bl	8021704 <vPortExitCritical>

	return xReturn;
 80226e0:	68fb      	ldr	r3, [r7, #12]
}
 80226e2:	4618      	mov	r0, r3
 80226e4:	f107 0710 	add.w	r7, r7, #16
 80226e8:	46bd      	mov	sp, r7
 80226ea:	bd80      	pop	{r7, pc}

080226ec <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
 80226ec:	b480      	push	{r7}
 80226ee:	b085      	sub	sp, #20
 80226f0:	af00      	add	r7, sp, #0
 80226f2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226f8:	461a      	mov	r2, r3
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80226fe:	429a      	cmp	r2, r3
 8022700:	bf14      	ite	ne
 8022702:	2300      	movne	r3, #0
 8022704:	2301      	moveq	r3, #1
 8022706:	60fb      	str	r3, [r7, #12]

	return xReturn;
 8022708:	68fb      	ldr	r3, [r7, #12]
}
 802270a:	4618      	mov	r0, r3
 802270c:	f107 0714 	add.w	r7, r7, #20
 8022710:	46bd      	mov	sp, r7
 8022712:	bc80      	pop	{r7}
 8022714:	4770      	bx	lr
 8022716:	bf00      	nop

08022718 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8022718:	b580      	push	{r7, lr}
 802271a:	b08a      	sub	sp, #40	; 0x28
 802271c:	af02      	add	r7, sp, #8
 802271e:	60f8      	str	r0, [r7, #12]
 8022720:	60b9      	str	r1, [r7, #8]
 8022722:	603b      	str	r3, [r7, #0]
 8022724:	4613      	mov	r3, r2
 8022726:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8022728:	88fb      	ldrh	r3, [r7, #6]
 802272a:	4618      	mov	r0, r3
 802272c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802272e:	f001 f9cd 	bl	8023acc <prvAllocateTCBAndStack>
 8022732:	4603      	mov	r3, r0
 8022734:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
 8022736:	69bb      	ldr	r3, [r7, #24]
 8022738:	2b00      	cmp	r3, #0
 802273a:	f000 80a5 	beq.w	8022888 <xTaskGenericCreate+0x170>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 802273e:	69bb      	ldr	r3, [r7, #24]
 8022740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022742:	88fb      	ldrh	r3, [r7, #6]
 8022744:	f103 33ff 	add.w	r3, r3, #4294967295
 8022748:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802274c:	18d3      	adds	r3, r2, r3
 802274e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8022750:	697b      	ldr	r3, [r7, #20]
 8022752:	f023 0307 	bic.w	r3, r3, #7
 8022756:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8022758:	88fb      	ldrh	r3, [r7, #6]
 802275a:	9300      	str	r3, [sp, #0]
 802275c:	69b8      	ldr	r0, [r7, #24]
 802275e:	68b9      	ldr	r1, [r7, #8]
 8022760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022764:	f001 f88a 	bl	802387c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8022768:	6978      	ldr	r0, [r7, #20]
 802276a:	68f9      	ldr	r1, [r7, #12]
 802276c:	683a      	ldr	r2, [r7, #0]
 802276e:	f7fe ff29 	bl	80215c4 <pxPortInitialiseStack>
 8022772:	4602      	mov	r2, r0
 8022774:	69bb      	ldr	r3, [r7, #24]
 8022776:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8022778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802277a:	2b00      	cmp	r3, #0
 802277c:	d002      	beq.n	8022784 <xTaskGenericCreate+0x6c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 802277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022780:	69ba      	ldr	r2, [r7, #24]
 8022782:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8022784:	f7fe ffa8 	bl	80216d8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8022788:	f640 3314 	movw	r3, #2836	; 0xb14
 802278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022790:	681b      	ldr	r3, [r3, #0]
 8022792:	f103 0201 	add.w	r2, r3, #1
 8022796:	f640 3314 	movw	r3, #2836	; 0xb14
 802279a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802279e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80227a0:	f640 2338 	movw	r3, #2616	; 0xa38
 80227a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80227a8:	681b      	ldr	r3, [r3, #0]
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	d10f      	bne.n	80227ce <xTaskGenericCreate+0xb6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80227ae:	f640 2338 	movw	r3, #2616	; 0xa38
 80227b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80227b6:	69ba      	ldr	r2, [r7, #24]
 80227b8:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80227ba:	f640 3314 	movw	r3, #2836	; 0xb14
 80227be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	2b01      	cmp	r3, #1
 80227c6:	d118      	bne.n	80227fa <xTaskGenericCreate+0xe2>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80227c8:	f001 f89c 	bl	8023904 <prvInitialiseTaskLists>
 80227cc:	e015      	b.n	80227fa <xTaskGenericCreate+0xe2>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80227ce:	f640 3324 	movw	r3, #2852	; 0xb24
 80227d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	2b00      	cmp	r3, #0
 80227da:	d10e      	bne.n	80227fa <xTaskGenericCreate+0xe2>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80227dc:	f640 2338 	movw	r3, #2616	; 0xa38
 80227e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80227e4:	681b      	ldr	r3, [r3, #0]
 80227e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80227ea:	429a      	cmp	r2, r3
 80227ec:	d805      	bhi.n	80227fa <xTaskGenericCreate+0xe2>
					{
						pxCurrentTCB = pxNewTCB;
 80227ee:	f640 2338 	movw	r3, #2616	; 0xa38
 80227f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80227f6:	69ba      	ldr	r2, [r7, #24]
 80227f8:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80227fa:	69bb      	ldr	r3, [r7, #24]
 80227fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227fe:	f640 331c 	movw	r3, #2844	; 0xb1c
 8022802:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022806:	681b      	ldr	r3, [r3, #0]
 8022808:	429a      	cmp	r2, r3
 802280a:	d906      	bls.n	802281a <xTaskGenericCreate+0x102>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 802280c:	69bb      	ldr	r3, [r7, #24]
 802280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022810:	f640 331c 	movw	r3, #2844	; 0xb1c
 8022814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022818:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 802281a:	f640 3338 	movw	r3, #2872	; 0xb38
 802281e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	f103 0201 	add.w	r2, r3, #1
 8022828:	f640 3338 	movw	r3, #2872	; 0xb38
 802282c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022830:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8022832:	69bb      	ldr	r3, [r7, #24]
 8022834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022836:	f640 3320 	movw	r3, #2848	; 0xb20
 802283a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802283e:	681b      	ldr	r3, [r3, #0]
 8022840:	429a      	cmp	r2, r3
 8022842:	d906      	bls.n	8022852 <xTaskGenericCreate+0x13a>
 8022844:	69bb      	ldr	r3, [r7, #24]
 8022846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022848:	f640 3320 	movw	r3, #2848	; 0xb20
 802284c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022850:	601a      	str	r2, [r3, #0]
 8022852:	69bb      	ldr	r3, [r7, #24]
 8022854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022856:	4613      	mov	r3, r2
 8022858:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802285c:	189b      	adds	r3, r3, r2
 802285e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022862:	461a      	mov	r2, r3
 8022864:	f640 233c 	movw	r3, #2620	; 0xa3c
 8022868:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802286c:	18d2      	adds	r2, r2, r3
 802286e:	69bb      	ldr	r3, [r7, #24]
 8022870:	f103 0304 	add.w	r3, r3, #4
 8022874:	4610      	mov	r0, r2
 8022876:	4619      	mov	r1, r3
 8022878:	f7ff fac0 	bl	8021dfc <vListInsertEnd>

			xReturn = pdPASS;
 802287c:	f04f 0301 	mov.w	r3, #1
 8022880:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8022882:	f7fe ff3f 	bl	8021704 <vPortExitCritical>
 8022886:	e002      	b.n	802288e <xTaskGenericCreate+0x176>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8022888:	f04f 33ff 	mov.w	r3, #4294967295
 802288c:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 802288e:	69fb      	ldr	r3, [r7, #28]
 8022890:	2b01      	cmp	r3, #1
 8022892:	d111      	bne.n	80228b8 <xTaskGenericCreate+0x1a0>
	{
		if( xSchedulerRunning != pdFALSE )
 8022894:	f640 3324 	movw	r3, #2852	; 0xb24
 8022898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802289c:	681b      	ldr	r3, [r3, #0]
 802289e:	2b00      	cmp	r3, #0
 80228a0:	d00a      	beq.n	80228b8 <xTaskGenericCreate+0x1a0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80228a2:	f640 2338 	movw	r3, #2616	; 0xa38
 80228a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80228aa:	681b      	ldr	r3, [r3, #0]
 80228ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80228ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228b0:	429a      	cmp	r2, r3
 80228b2:	d201      	bcs.n	80228b8 <xTaskGenericCreate+0x1a0>
			{
				portYIELD_WITHIN_API();
 80228b4:	f7fe ff04 	bl	80216c0 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 80228b8:	69fb      	ldr	r3, [r7, #28]
}
 80228ba:	4618      	mov	r0, r3
 80228bc:	f107 0720 	add.w	r7, r7, #32
 80228c0:	46bd      	mov	sp, r7
 80228c2:	bd80      	pop	{r7, pc}

080228c4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
 80228c4:	b580      	push	{r7, lr}
 80228c6:	b084      	sub	sp, #16
 80228c8:	af00      	add	r7, sp, #0
 80228ca:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 80228cc:	f7fe ff04 	bl	80216d8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
 80228d0:	f640 2338 	movw	r3, #2616	; 0xa38
 80228d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80228d8:	681b      	ldr	r3, [r3, #0]
 80228da:	687a      	ldr	r2, [r7, #4]
 80228dc:	429a      	cmp	r2, r3
 80228de:	d102      	bne.n	80228e6 <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
 80228e0:	f04f 0300 	mov.w	r3, #0
 80228e4:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 80228e6:	687b      	ldr	r3, [r7, #4]
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d105      	bne.n	80228f8 <vTaskDelete+0x34>
 80228ec:	f640 2338 	movw	r3, #2616	; 0xa38
 80228f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80228f4:	681b      	ldr	r3, [r3, #0]
 80228f6:	e000      	b.n	80228fa <vTaskDelete+0x36>
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 80228fc:	68fb      	ldr	r3, [r7, #12]
 80228fe:	f103 0304 	add.w	r3, r3, #4
 8022902:	4618      	mov	r0, r3
 8022904:	f7ff fae0 	bl	8021ec8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 8022908:	68fb      	ldr	r3, [r7, #12]
 802290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802290c:	2b00      	cmp	r3, #0
 802290e:	d005      	beq.n	802291c <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 8022910:	68fb      	ldr	r3, [r7, #12]
 8022912:	f103 0318 	add.w	r3, r3, #24
 8022916:	4618      	mov	r0, r3
 8022918:	f7ff fad6 	bl	8021ec8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 802291c:	68fb      	ldr	r3, [r7, #12]
 802291e:	f103 0304 	add.w	r3, r3, #4
 8022922:	f640 20e4 	movw	r0, #2788	; 0xae4
 8022926:	f2c2 0000 	movt	r0, #8192	; 0x2000
 802292a:	4619      	mov	r1, r3
 802292c:	f7ff fa66 	bl	8021dfc <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8022930:	f640 23f8 	movw	r3, #2808	; 0xaf8
 8022934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022938:	681b      	ldr	r3, [r3, #0]
 802293a:	f103 0201 	add.w	r2, r3, #1
 802293e:	f640 23f8 	movw	r3, #2808	; 0xaf8
 8022942:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022946:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8022948:	f640 3338 	movw	r3, #2872	; 0xb38
 802294c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022950:	681b      	ldr	r3, [r3, #0]
 8022952:	f103 0201 	add.w	r2, r3, #1
 8022956:	f640 3338 	movw	r3, #2872	; 0xb38
 802295a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802295e:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8022960:	f7fe fed0 	bl	8021704 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 8022964:	f640 3324 	movw	r3, #2852	; 0xb24
 8022968:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802296c:	681b      	ldr	r3, [r3, #0]
 802296e:	2b00      	cmp	r3, #0
 8022970:	d004      	beq.n	802297c <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
 8022972:	687b      	ldr	r3, [r7, #4]
 8022974:	2b00      	cmp	r3, #0
 8022976:	d101      	bne.n	802297c <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
 8022978:	f7fe fea2 	bl	80216c0 <vPortYieldFromISR>
			}
		}
	}
 802297c:	f107 0710 	add.w	r7, r7, #16
 8022980:	46bd      	mov	sp, r7
 8022982:	bd80      	pop	{r7, pc}

08022984 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8022984:	b580      	push	{r7, lr}
 8022986:	b086      	sub	sp, #24
 8022988:	af00      	add	r7, sp, #0
 802298a:	6078      	str	r0, [r7, #4]
 802298c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 802298e:	f04f 0300 	mov.w	r3, #0
 8022992:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
 8022994:	f000 fabc 	bl	8022f10 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	681a      	ldr	r2, [r3, #0]
 802299c:	683b      	ldr	r3, [r7, #0]
 802299e:	18d3      	adds	r3, r2, r3
 80229a0:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
 80229a2:	687b      	ldr	r3, [r7, #4]
 80229a4:	681a      	ldr	r2, [r3, #0]
 80229a6:	f640 3318 	movw	r3, #2840	; 0xb18
 80229aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80229ae:	681b      	ldr	r3, [r3, #0]
 80229b0:	429a      	cmp	r2, r3
 80229b2:	d910      	bls.n	80229d6 <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	681a      	ldr	r2, [r3, #0]
 80229b8:	693b      	ldr	r3, [r7, #16]
 80229ba:	429a      	cmp	r2, r3
 80229bc:	d91b      	bls.n	80229f6 <vTaskDelayUntil+0x72>
 80229be:	f640 3318 	movw	r3, #2840	; 0xb18
 80229c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80229c6:	681b      	ldr	r3, [r3, #0]
 80229c8:	693a      	ldr	r2, [r7, #16]
 80229ca:	429a      	cmp	r2, r3
 80229cc:	d913      	bls.n	80229f6 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 80229ce:	f04f 0301 	mov.w	r3, #1
 80229d2:	617b      	str	r3, [r7, #20]
 80229d4:	e00f      	b.n	80229f6 <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	681a      	ldr	r2, [r3, #0]
 80229da:	693b      	ldr	r3, [r7, #16]
 80229dc:	429a      	cmp	r2, r3
 80229de:	d807      	bhi.n	80229f0 <vTaskDelayUntil+0x6c>
 80229e0:	f640 3318 	movw	r3, #2840	; 0xb18
 80229e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80229e8:	681b      	ldr	r3, [r3, #0]
 80229ea:	693a      	ldr	r2, [r7, #16]
 80229ec:	429a      	cmp	r2, r3
 80229ee:	d902      	bls.n	80229f6 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 80229f0:	f04f 0301 	mov.w	r3, #1
 80229f4:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80229f6:	687b      	ldr	r3, [r7, #4]
 80229f8:	693a      	ldr	r2, [r7, #16]
 80229fa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80229fc:	697b      	ldr	r3, [r7, #20]
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	d00c      	beq.n	8022a1c <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8022a02:	f640 2338 	movw	r3, #2616	; 0xa38
 8022a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	f103 0304 	add.w	r3, r3, #4
 8022a10:	4618      	mov	r0, r3
 8022a12:	f7ff fa59 	bl	8021ec8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8022a16:	6938      	ldr	r0, [r7, #16]
 8022a18:	f001 f812 	bl	8023a40 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8022a1c:	f000 fa8a 	bl	8022f34 <xTaskResumeAll>
 8022a20:	4603      	mov	r3, r0
 8022a22:	60fb      	str	r3, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8022a24:	68fb      	ldr	r3, [r7, #12]
 8022a26:	2b00      	cmp	r3, #0
 8022a28:	d101      	bne.n	8022a2e <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 8022a2a:	f7fe fe49 	bl	80216c0 <vPortYieldFromISR>
		}
	}
 8022a2e:	f107 0718 	add.w	r7, r7, #24
 8022a32:	46bd      	mov	sp, r7
 8022a34:	bd80      	pop	{r7, pc}
 8022a36:	bf00      	nop

08022a38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8022a38:	b580      	push	{r7, lr}
 8022a3a:	b084      	sub	sp, #16
 8022a3c:	af00      	add	r7, sp, #0
 8022a3e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8022a40:	f04f 0300 	mov.w	r3, #0
 8022a44:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d01a      	beq.n	8022a82 <vTaskDelay+0x4a>
		{
			vTaskSuspendAll();
 8022a4c:	f000 fa60 	bl	8022f10 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8022a50:	f640 3318 	movw	r3, #2840	; 0xb18
 8022a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022a58:	681a      	ldr	r2, [r3, #0]
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	18d3      	adds	r3, r2, r3
 8022a5e:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8022a60:	f640 2338 	movw	r3, #2616	; 0xa38
 8022a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022a68:	681b      	ldr	r3, [r3, #0]
 8022a6a:	f103 0304 	add.w	r3, r3, #4
 8022a6e:	4618      	mov	r0, r3
 8022a70:	f7ff fa2a 	bl	8021ec8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8022a74:	68b8      	ldr	r0, [r7, #8]
 8022a76:	f000 ffe3 	bl	8023a40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8022a7a:	f000 fa5b 	bl	8022f34 <xTaskResumeAll>
 8022a7e:	4603      	mov	r3, r0
 8022a80:	60fb      	str	r3, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8022a82:	68fb      	ldr	r3, [r7, #12]
 8022a84:	2b00      	cmp	r3, #0
 8022a86:	d101      	bne.n	8022a8c <vTaskDelay+0x54>
		{
			portYIELD_WITHIN_API();
 8022a88:	f7fe fe1a 	bl	80216c0 <vPortYieldFromISR>
		}
	}
 8022a8c:	f107 0710 	add.w	r7, r7, #16
 8022a90:	46bd      	mov	sp, r7
 8022a92:	bd80      	pop	{r7, pc}

08022a94 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
 8022a94:	b580      	push	{r7, lr}
 8022a96:	b084      	sub	sp, #16
 8022a98:	af00      	add	r7, sp, #0
 8022a9a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
 8022a9c:	f7fe fe1c 	bl	80216d8 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	d105      	bne.n	8022ab2 <uxTaskPriorityGet+0x1e>
 8022aa6:	f640 2338 	movw	r3, #2616	; 0xa38
 8022aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022aae:	681b      	ldr	r3, [r3, #0]
 8022ab0:	e000      	b.n	8022ab4 <uxTaskPriorityGet+0x20>
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8022ab6:	68fb      	ldr	r3, [r7, #12]
 8022ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022aba:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8022abc:	f7fe fe22 	bl	8021704 <vPortExitCritical>

		return uxReturn;
 8022ac0:	68bb      	ldr	r3, [r7, #8]
	}
 8022ac2:	4618      	mov	r0, r3
 8022ac4:	f107 0710 	add.w	r7, r7, #16
 8022ac8:	46bd      	mov	sp, r7
 8022aca:	bd80      	pop	{r7, pc}

08022acc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
 8022acc:	b580      	push	{r7, lr}
 8022ace:	b086      	sub	sp, #24
 8022ad0:	af00      	add	r7, sp, #0
 8022ad2:	6078      	str	r0, [r7, #4]
 8022ad4:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
 8022ad6:	f04f 0300 	mov.w	r3, #0
 8022ada:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
 8022adc:	683b      	ldr	r3, [r7, #0]
 8022ade:	2b04      	cmp	r3, #4
 8022ae0:	d902      	bls.n	8022ae8 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8022ae2:	f04f 0304 	mov.w	r3, #4
 8022ae6:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
 8022ae8:	f7fe fdf6 	bl	80216d8 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
 8022aec:	f640 2338 	movw	r3, #2616	; 0xa38
 8022af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	687a      	ldr	r2, [r7, #4]
 8022af8:	429a      	cmp	r2, r3
 8022afa:	d102      	bne.n	8022b02 <vTaskPrioritySet+0x36>
			{
				pxTask = NULL;
 8022afc:	f04f 0300 	mov.w	r3, #0
 8022b00:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	d105      	bne.n	8022b14 <vTaskPrioritySet+0x48>
 8022b08:	f640 2338 	movw	r3, #2616	; 0xa38
 8022b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022b10:	681b      	ldr	r3, [r3, #0]
 8022b12:	e000      	b.n	8022b16 <vTaskPrioritySet+0x4a>
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
 8022b18:	693b      	ldr	r3, [r7, #16]
 8022b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022b1c:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
 8022b1e:	68fa      	ldr	r2, [r7, #12]
 8022b20:	683b      	ldr	r3, [r7, #0]
 8022b22:	429a      	cmp	r2, r3
 8022b24:	d062      	beq.n	8022bec <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
 8022b26:	683a      	ldr	r2, [r7, #0]
 8022b28:	68fb      	ldr	r3, [r7, #12]
 8022b2a:	429a      	cmp	r2, r3
 8022b2c:	d906      	bls.n	8022b3c <vTaskPrioritySet+0x70>
				{
					if( pxTask != NULL )
 8022b2e:	687b      	ldr	r3, [r7, #4]
 8022b30:	2b00      	cmp	r3, #0
 8022b32:	d009      	beq.n	8022b48 <vTaskPrioritySet+0x7c>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
 8022b34:	f04f 0301 	mov.w	r3, #1
 8022b38:	617b      	str	r3, [r7, #20]
 8022b3a:	e005      	b.n	8022b48 <vTaskPrioritySet+0x7c>
					}
				}
				else if( pxTask == NULL )
 8022b3c:	687b      	ldr	r3, [r7, #4]
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	d102      	bne.n	8022b48 <vTaskPrioritySet+0x7c>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
 8022b42:	f04f 0301 	mov.w	r3, #1
 8022b46:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8022b48:	693b      	ldr	r3, [r7, #16]
 8022b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8022b4c:	693b      	ldr	r3, [r7, #16]
 8022b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b50:	429a      	cmp	r2, r3
 8022b52:	d102      	bne.n	8022b5a <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8022b54:	693b      	ldr	r3, [r7, #16]
 8022b56:	683a      	ldr	r2, [r7, #0]
 8022b58:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8022b5a:	693b      	ldr	r3, [r7, #16]
 8022b5c:	683a      	ldr	r2, [r7, #0]
 8022b5e:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
 8022b60:	683b      	ldr	r3, [r7, #0]
 8022b62:	f1c3 0205 	rsb	r2, r3, #5
 8022b66:	693b      	ldr	r3, [r7, #16]
 8022b68:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
 8022b6a:	693b      	ldr	r3, [r7, #16]
 8022b6c:	6959      	ldr	r1, [r3, #20]
 8022b6e:	68fa      	ldr	r2, [r7, #12]
 8022b70:	4613      	mov	r3, r2
 8022b72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022b76:	189b      	adds	r3, r3, r2
 8022b78:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022b7c:	461a      	mov	r2, r3
 8022b7e:	f640 233c 	movw	r3, #2620	; 0xa3c
 8022b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022b86:	18d3      	adds	r3, r2, r3
 8022b88:	4299      	cmp	r1, r3
 8022b8a:	d12a      	bne.n	8022be2 <vTaskPrioritySet+0x116>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
 8022b8c:	693b      	ldr	r3, [r7, #16]
 8022b8e:	f103 0304 	add.w	r3, r3, #4
 8022b92:	4618      	mov	r0, r3
 8022b94:	f7ff f998 	bl	8021ec8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8022b98:	693b      	ldr	r3, [r7, #16]
 8022b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022b9c:	f640 3320 	movw	r3, #2848	; 0xb20
 8022ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022ba4:	681b      	ldr	r3, [r3, #0]
 8022ba6:	429a      	cmp	r2, r3
 8022ba8:	d906      	bls.n	8022bb8 <vTaskPrioritySet+0xec>
 8022baa:	693b      	ldr	r3, [r7, #16]
 8022bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022bae:	f640 3320 	movw	r3, #2848	; 0xb20
 8022bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022bb6:	601a      	str	r2, [r3, #0]
 8022bb8:	693b      	ldr	r3, [r7, #16]
 8022bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022bbc:	4613      	mov	r3, r2
 8022bbe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022bc2:	189b      	adds	r3, r3, r2
 8022bc4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022bc8:	461a      	mov	r2, r3
 8022bca:	f640 233c 	movw	r3, #2620	; 0xa3c
 8022bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022bd2:	18d2      	adds	r2, r2, r3
 8022bd4:	693b      	ldr	r3, [r7, #16]
 8022bd6:	f103 0304 	add.w	r3, r3, #4
 8022bda:	4610      	mov	r0, r2
 8022bdc:	4619      	mov	r1, r3
 8022bde:	f7ff f90d 	bl	8021dfc <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
 8022be2:	697b      	ldr	r3, [r7, #20]
 8022be4:	2b01      	cmp	r3, #1
 8022be6:	d101      	bne.n	8022bec <vTaskPrioritySet+0x120>
				{
					portYIELD_WITHIN_API();
 8022be8:	f7fe fd6a 	bl	80216c0 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
 8022bec:	f7fe fd8a 	bl	8021704 <vPortExitCritical>
	}
 8022bf0:	f107 0718 	add.w	r7, r7, #24
 8022bf4:	46bd      	mov	sp, r7
 8022bf6:	bd80      	pop	{r7, pc}

08022bf8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
 8022bf8:	b580      	push	{r7, lr}
 8022bfa:	b084      	sub	sp, #16
 8022bfc:	af00      	add	r7, sp, #0
 8022bfe:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8022c00:	f7fe fd6a 	bl	80216d8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
 8022c04:	f640 2338 	movw	r3, #2616	; 0xa38
 8022c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022c0c:	681b      	ldr	r3, [r3, #0]
 8022c0e:	687a      	ldr	r2, [r7, #4]
 8022c10:	429a      	cmp	r2, r3
 8022c12:	d102      	bne.n	8022c1a <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
 8022c14:	f04f 0300 	mov.w	r3, #0
 8022c18:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	d105      	bne.n	8022c2c <vTaskSuspend+0x34>
 8022c20:	f640 2338 	movw	r3, #2616	; 0xa38
 8022c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022c28:	681b      	ldr	r3, [r3, #0]
 8022c2a:	e000      	b.n	8022c2e <vTaskSuspend+0x36>
 8022c2c:	687b      	ldr	r3, [r7, #4]
 8022c2e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 8022c30:	68fb      	ldr	r3, [r7, #12]
 8022c32:	f103 0304 	add.w	r3, r3, #4
 8022c36:	4618      	mov	r0, r3
 8022c38:	f7ff f946 	bl	8021ec8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 8022c3c:	68fb      	ldr	r3, [r7, #12]
 8022c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022c40:	2b00      	cmp	r3, #0
 8022c42:	d005      	beq.n	8022c50 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 8022c44:	68fb      	ldr	r3, [r7, #12]
 8022c46:	f103 0318 	add.w	r3, r3, #24
 8022c4a:	4618      	mov	r0, r3
 8022c4c:	f7ff f93c 	bl	8021ec8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8022c50:	68fb      	ldr	r3, [r7, #12]
 8022c52:	f103 0304 	add.w	r3, r3, #4
 8022c56:	f640 20fc 	movw	r0, #2812	; 0xafc
 8022c5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8022c5e:	4619      	mov	r1, r3
 8022c60:	f7ff f8cc 	bl	8021dfc <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8022c64:	f7fe fd4e 	bl	8021704 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
 8022c68:	687b      	ldr	r3, [r7, #4]
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	d120      	bne.n	8022cb0 <vTaskSuspend+0xb8>
		{
			if( xSchedulerRunning != pdFALSE )
 8022c6e:	f640 3324 	movw	r3, #2852	; 0xb24
 8022c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022c76:	681b      	ldr	r3, [r3, #0]
 8022c78:	2b00      	cmp	r3, #0
 8022c7a:	d002      	beq.n	8022c82 <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
 8022c7c:	f7fe fd20 	bl	80216c0 <vPortYieldFromISR>
 8022c80:	e016      	b.n	8022cb0 <vTaskSuspend+0xb8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8022c82:	f640 23fc 	movw	r3, #2812	; 0xafc
 8022c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022c8a:	681b      	ldr	r3, [r3, #0]
 8022c8c:	461a      	mov	r2, r3
 8022c8e:	f640 3314 	movw	r3, #2836	; 0xb14
 8022c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022c96:	681b      	ldr	r3, [r3, #0]
 8022c98:	429a      	cmp	r2, r3
 8022c9a:	d107      	bne.n	8022cac <vTaskSuspend+0xb4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8022c9c:	f640 2338 	movw	r3, #2616	; 0xa38
 8022ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022ca4:	f04f 0200 	mov.w	r2, #0
 8022ca8:	601a      	str	r2, [r3, #0]
 8022caa:	e001      	b.n	8022cb0 <vTaskSuspend+0xb8>
				}
				else
				{
					vTaskSwitchContext();
 8022cac:	f000 fc20 	bl	80234f0 <vTaskSwitchContext>
				}
			}
		}
	}
 8022cb0:	f107 0710 	add.w	r7, r7, #16
 8022cb4:	46bd      	mov	sp, r7
 8022cb6:	bd80      	pop	{r7, pc}

08022cb8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 8022cb8:	b480      	push	{r7}
 8022cba:	b085      	sub	sp, #20
 8022cbc:	af00      	add	r7, sp, #0
 8022cbe:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8022cc0:	f04f 0300 	mov.w	r3, #0
 8022cc4:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8022cca:	68bb      	ldr	r3, [r7, #8]
 8022ccc:	695a      	ldr	r2, [r3, #20]
 8022cce:	f640 23fc 	movw	r3, #2812	; 0xafc
 8022cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022cd6:	429a      	cmp	r2, r3
 8022cd8:	d10e      	bne.n	8022cf8 <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 8022cda:	68bb      	ldr	r3, [r7, #8]
 8022cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022cde:	f640 23d0 	movw	r3, #2768	; 0xad0
 8022ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022ce6:	429a      	cmp	r2, r3
 8022ce8:	d006      	beq.n	8022cf8 <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 8022cea:	68bb      	ldr	r3, [r7, #8]
 8022cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	d102      	bne.n	8022cf8 <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
 8022cf2:	f04f 0301 	mov.w	r3, #1
 8022cf6:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 8022cf8:	68fb      	ldr	r3, [r7, #12]
	}
 8022cfa:	4618      	mov	r0, r3
 8022cfc:	f107 0714 	add.w	r7, r7, #20
 8022d00:	46bd      	mov	sp, r7
 8022d02:	bc80      	pop	{r7}
 8022d04:	4770      	bx	lr
 8022d06:	bf00      	nop

08022d08 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
 8022d08:	b580      	push	{r7, lr}
 8022d0a:	b084      	sub	sp, #16
 8022d0c:	af00      	add	r7, sp, #0
 8022d0e:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8022d14:	68fb      	ldr	r3, [r7, #12]
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	d048      	beq.n	8022dac <vTaskResume+0xa4>
 8022d1a:	f640 2338 	movw	r3, #2616	; 0xa38
 8022d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022d22:	681b      	ldr	r3, [r3, #0]
 8022d24:	68fa      	ldr	r2, [r7, #12]
 8022d26:	429a      	cmp	r2, r3
 8022d28:	d040      	beq.n	8022dac <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8022d2a:	f7fe fcd5 	bl	80216d8 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8022d2e:	68f8      	ldr	r0, [r7, #12]
 8022d30:	f7ff ffc2 	bl	8022cb8 <xTaskIsTaskSuspended>
 8022d34:	4603      	mov	r3, r0
 8022d36:	2b01      	cmp	r3, #1
 8022d38:	d136      	bne.n	8022da8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
 8022d3a:	68fb      	ldr	r3, [r7, #12]
 8022d3c:	f103 0304 	add.w	r3, r3, #4
 8022d40:	4618      	mov	r0, r3
 8022d42:	f7ff f8c1 	bl	8021ec8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8022d46:	68fb      	ldr	r3, [r7, #12]
 8022d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022d4a:	f640 3320 	movw	r3, #2848	; 0xb20
 8022d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022d52:	681b      	ldr	r3, [r3, #0]
 8022d54:	429a      	cmp	r2, r3
 8022d56:	d906      	bls.n	8022d66 <vTaskResume+0x5e>
 8022d58:	68fb      	ldr	r3, [r7, #12]
 8022d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022d5c:	f640 3320 	movw	r3, #2848	; 0xb20
 8022d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022d64:	601a      	str	r2, [r3, #0]
 8022d66:	68fb      	ldr	r3, [r7, #12]
 8022d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022d6a:	4613      	mov	r3, r2
 8022d6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022d70:	189b      	adds	r3, r3, r2
 8022d72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022d76:	461a      	mov	r2, r3
 8022d78:	f640 233c 	movw	r3, #2620	; 0xa3c
 8022d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022d80:	18d2      	adds	r2, r2, r3
 8022d82:	68fb      	ldr	r3, [r7, #12]
 8022d84:	f103 0304 	add.w	r3, r3, #4
 8022d88:	4610      	mov	r0, r2
 8022d8a:	4619      	mov	r1, r3
 8022d8c:	f7ff f836 	bl	8021dfc <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8022d90:	68fb      	ldr	r3, [r7, #12]
 8022d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022d94:	f640 2338 	movw	r3, #2616	; 0xa38
 8022d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022da0:	429a      	cmp	r2, r3
 8022da2:	d301      	bcc.n	8022da8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8022da4:	f7fe fc8c 	bl	80216c0 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
 8022da8:	f7fe fcac 	bl	8021704 <vPortExitCritical>
		}
	}
 8022dac:	f107 0710 	add.w	r7, r7, #16
 8022db0:	46bd      	mov	sp, r7
 8022db2:	bd80      	pop	{r7, pc}

08022db4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
 8022db4:	b580      	push	{r7, lr}
 8022db6:	b084      	sub	sp, #16
 8022db8:	af00      	add	r7, sp, #0
 8022dba:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
 8022dbc:	f04f 0300 	mov.w	r3, #0
 8022dc0:	60fb      	str	r3, [r7, #12]
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
 8022dc2:	687b      	ldr	r3, [r7, #4]
 8022dc4:	60bb      	str	r3, [r7, #8]

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8022dc6:	68b8      	ldr	r0, [r7, #8]
 8022dc8:	f7ff ff76 	bl	8022cb8 <xTaskIsTaskSuspended>
 8022dcc:	4603      	mov	r3, r0
 8022dce:	2b01      	cmp	r3, #1
 8022dd0:	d149      	bne.n	8022e66 <xTaskResumeFromISR+0xb2>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8022dd2:	f640 3328 	movw	r3, #2856	; 0xb28
 8022dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022dda:	681b      	ldr	r3, [r3, #0]
 8022ddc:	2b00      	cmp	r3, #0
 8022dde:	d138      	bne.n	8022e52 <xTaskResumeFromISR+0x9e>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 8022de0:	68bb      	ldr	r3, [r7, #8]
 8022de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022de4:	f640 2338 	movw	r3, #2616	; 0xa38
 8022de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022dec:	681b      	ldr	r3, [r3, #0]
 8022dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022df0:	429a      	cmp	r2, r3
 8022df2:	bf34      	ite	cc
 8022df4:	2300      	movcc	r3, #0
 8022df6:	2301      	movcs	r3, #1
 8022df8:	60fb      	str	r3, [r7, #12]
				vListRemove(  &( pxTCB->xGenericListItem ) );
 8022dfa:	68bb      	ldr	r3, [r7, #8]
 8022dfc:	f103 0304 	add.w	r3, r3, #4
 8022e00:	4618      	mov	r0, r3
 8022e02:	f7ff f861 	bl	8021ec8 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
 8022e06:	68bb      	ldr	r3, [r7, #8]
 8022e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022e0a:	f640 3320 	movw	r3, #2848	; 0xb20
 8022e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022e12:	681b      	ldr	r3, [r3, #0]
 8022e14:	429a      	cmp	r2, r3
 8022e16:	d906      	bls.n	8022e26 <xTaskResumeFromISR+0x72>
 8022e18:	68bb      	ldr	r3, [r7, #8]
 8022e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022e1c:	f640 3320 	movw	r3, #2848	; 0xb20
 8022e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022e24:	601a      	str	r2, [r3, #0]
 8022e26:	68bb      	ldr	r3, [r7, #8]
 8022e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022e2a:	4613      	mov	r3, r2
 8022e2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022e30:	189b      	adds	r3, r3, r2
 8022e32:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022e36:	461a      	mov	r2, r3
 8022e38:	f640 233c 	movw	r3, #2620	; 0xa3c
 8022e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022e40:	18d2      	adds	r2, r2, r3
 8022e42:	68bb      	ldr	r3, [r7, #8]
 8022e44:	f103 0304 	add.w	r3, r3, #4
 8022e48:	4610      	mov	r0, r2
 8022e4a:	4619      	mov	r1, r3
 8022e4c:	f7fe ffd6 	bl	8021dfc <vListInsertEnd>
 8022e50:	e009      	b.n	8022e66 <xTaskResumeFromISR+0xb2>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8022e52:	68bb      	ldr	r3, [r7, #8]
 8022e54:	f103 0318 	add.w	r3, r3, #24
 8022e58:	f640 20d0 	movw	r0, #2768	; 0xad0
 8022e5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8022e60:	4619      	mov	r1, r3
 8022e62:	f7fe ffcb 	bl	8021dfc <vListInsertEnd>
			}
		}

		return xYieldRequired;
 8022e66:	68fb      	ldr	r3, [r7, #12]
	}
 8022e68:	4618      	mov	r0, r3
 8022e6a:	f107 0710 	add.w	r7, r7, #16
 8022e6e:	46bd      	mov	sp, r7
 8022e70:	bd80      	pop	{r7, pc}
 8022e72:	bf00      	nop

08022e74 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8022e74:	b580      	push	{r7, lr}
 8022e76:	b086      	sub	sp, #24
 8022e78:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
 8022e7a:	f04f 0300 	mov.w	r3, #0
 8022e7e:	9300      	str	r3, [sp, #0]
 8022e80:	f640 3310 	movw	r3, #2832	; 0xb10
 8022e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022e88:	9301      	str	r3, [sp, #4]
 8022e8a:	f04f 0300 	mov.w	r3, #0
 8022e8e:	9302      	str	r3, [sp, #8]
 8022e90:	f04f 0300 	mov.w	r3, #0
 8022e94:	9303      	str	r3, [sp, #12]
 8022e96:	f643 0059 	movw	r0, #14425	; 0x3859
 8022e9a:	f6c0 0002 	movt	r0, #2050	; 0x802
 8022e9e:	f645 61e8 	movw	r1, #24296	; 0x5ee8
 8022ea2:	f6c0 0102 	movt	r1, #2050	; 0x802
 8022ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022eaa:	f04f 0300 	mov.w	r3, #0
 8022eae:	f7ff fc33 	bl	8022718 <xTaskGenericCreate>
 8022eb2:	4603      	mov	r3, r0
 8022eb4:	607b      	str	r3, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	2b01      	cmp	r3, #1
 8022eba:	d115      	bne.n	8022ee8 <vTaskStartScheduler+0x74>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8022ebc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8022ec0:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8022ec4:	f640 3324 	movw	r3, #2852	; 0xb24
 8022ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022ecc:	f04f 0201 	mov.w	r2, #1
 8022ed0:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8022ed2:	f640 3318 	movw	r3, #2840	; 0xb18
 8022ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022eda:	f04f 0200 	mov.w	r2, #0
 8022ede:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8022ee0:	f001 fd68 	bl	80249b4 <init_us_timer>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8022ee4:	f7fe fbbc 	bl	8021660 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 8022ee8:	f107 0708 	add.w	r7, r7, #8
 8022eec:	46bd      	mov	sp, r7
 8022eee:	bd80      	pop	{r7, pc}

08022ef0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8022ef0:	b580      	push	{r7, lr}
 8022ef2:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
 8022ef4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8022ef8:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
 8022efc:	f640 3324 	movw	r3, #2852	; 0xb24
 8022f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022f04:	f04f 0200 	mov.w	r2, #0
 8022f08:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8022f0a:	f7fe fbd3 	bl	80216b4 <vPortEndScheduler>
}
 8022f0e:	bd80      	pop	{r7, pc}

08022f10 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8022f10:	b480      	push	{r7}
 8022f12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8022f14:	f640 3328 	movw	r3, #2856	; 0xb28
 8022f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022f1c:	681b      	ldr	r3, [r3, #0]
 8022f1e:	f103 0201 	add.w	r2, r3, #1
 8022f22:	f640 3328 	movw	r3, #2856	; 0xb28
 8022f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022f2a:	601a      	str	r2, [r3, #0]
}
 8022f2c:	46bd      	mov	sp, r7
 8022f2e:	bc80      	pop	{r7}
 8022f30:	4770      	bx	lr
 8022f32:	bf00      	nop

08022f34 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8022f34:	b590      	push	{r4, r7, lr}
 8022f36:	b083      	sub	sp, #12
 8022f38:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8022f3a:	f04f 0300 	mov.w	r3, #0
 8022f3e:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8022f40:	f7fe fbca 	bl	80216d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8022f44:	f640 3328 	movw	r3, #2856	; 0xb28
 8022f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022f4c:	681b      	ldr	r3, [r3, #0]
 8022f4e:	f103 32ff 	add.w	r2, r3, #4294967295
 8022f52:	f640 3328 	movw	r3, #2856	; 0xb28
 8022f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022f5a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8022f5c:	f640 3328 	movw	r3, #2856	; 0xb28
 8022f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022f64:	681b      	ldr	r3, [r3, #0]
 8022f66:	2b00      	cmp	r3, #0
 8022f68:	f040 8086 	bne.w	8023078 <xTaskResumeAll+0x144>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8022f6c:	f640 3314 	movw	r3, #2836	; 0xb14
 8022f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022f74:	681b      	ldr	r3, [r3, #0]
 8022f76:	2b00      	cmp	r3, #0
 8022f78:	d07e      	beq.n	8023078 <xTaskResumeAll+0x144>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8022f7a:	f04f 0300 	mov.w	r3, #0
 8022f7e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8022f80:	e03d      	b.n	8022ffe <xTaskResumeAll+0xca>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8022f82:	f640 23d0 	movw	r3, #2768	; 0xad0
 8022f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022f8a:	68db      	ldr	r3, [r3, #12]
 8022f8c:	68db      	ldr	r3, [r3, #12]
 8022f8e:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
 8022f90:	f104 0318 	add.w	r3, r4, #24
 8022f94:	4618      	mov	r0, r3
 8022f96:	f7fe ff97 	bl	8021ec8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8022f9a:	f104 0304 	add.w	r3, r4, #4
 8022f9e:	4618      	mov	r0, r3
 8022fa0:	f7fe ff92 	bl	8021ec8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8022fa4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8022fa6:	f640 3320 	movw	r3, #2848	; 0xb20
 8022faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022fae:	681b      	ldr	r3, [r3, #0]
 8022fb0:	429a      	cmp	r2, r3
 8022fb2:	d905      	bls.n	8022fc0 <xTaskResumeAll+0x8c>
 8022fb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8022fb6:	f640 3320 	movw	r3, #2848	; 0xb20
 8022fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022fbe:	601a      	str	r2, [r3, #0]
 8022fc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8022fc2:	4613      	mov	r3, r2
 8022fc4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022fc8:	189b      	adds	r3, r3, r2
 8022fca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8022fce:	461a      	mov	r2, r3
 8022fd0:	f640 233c 	movw	r3, #2620	; 0xa3c
 8022fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022fd8:	18d2      	adds	r2, r2, r3
 8022fda:	f104 0304 	add.w	r3, r4, #4
 8022fde:	4610      	mov	r0, r2
 8022fe0:	4619      	mov	r1, r3
 8022fe2:	f7fe ff0b 	bl	8021dfc <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8022fe6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8022fe8:	f640 2338 	movw	r3, #2616	; 0xa38
 8022fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ff4:	429a      	cmp	r2, r3
 8022ff6:	d302      	bcc.n	8022ffe <xTaskResumeAll+0xca>
					{
						xYieldRequired = pdTRUE;
 8022ff8:	f04f 0301 	mov.w	r3, #1
 8022ffc:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8022ffe:	f640 23d0 	movw	r3, #2768	; 0xad0
 8023002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023006:	681b      	ldr	r3, [r3, #0]
 8023008:	2b00      	cmp	r3, #0
 802300a:	d1ba      	bne.n	8022f82 <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 802300c:	f640 332c 	movw	r3, #2860	; 0xb2c
 8023010:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023014:	681b      	ldr	r3, [r3, #0]
 8023016:	2b00      	cmp	r3, #0
 8023018:	d018      	beq.n	802304c <xTaskResumeAll+0x118>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 802301a:	e00d      	b.n	8023038 <xTaskResumeAll+0x104>
					{
						vTaskIncrementTick();
 802301c:	f000 f92c 	bl	8023278 <vTaskIncrementTick>
						--uxMissedTicks;
 8023020:	f640 332c 	movw	r3, #2860	; 0xb2c
 8023024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023028:	681b      	ldr	r3, [r3, #0]
 802302a:	f103 32ff 	add.w	r2, r3, #4294967295
 802302e:	f640 332c 	movw	r3, #2860	; 0xb2c
 8023032:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023036:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8023038:	f640 332c 	movw	r3, #2860	; 0xb2c
 802303c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023040:	681b      	ldr	r3, [r3, #0]
 8023042:	2b00      	cmp	r3, #0
 8023044:	d1ea      	bne.n	802301c <xTaskResumeAll+0xe8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8023046:	f04f 0301 	mov.w	r3, #1
 802304a:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 802304c:	683b      	ldr	r3, [r7, #0]
 802304e:	2b01      	cmp	r3, #1
 8023050:	d006      	beq.n	8023060 <xTaskResumeAll+0x12c>
 8023052:	f640 3330 	movw	r3, #2864	; 0xb30
 8023056:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802305a:	681b      	ldr	r3, [r3, #0]
 802305c:	2b01      	cmp	r3, #1
 802305e:	d10b      	bne.n	8023078 <xTaskResumeAll+0x144>
				{
					xAlreadyYielded = pdTRUE;
 8023060:	f04f 0301 	mov.w	r3, #1
 8023064:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8023066:	f640 3330 	movw	r3, #2864	; 0xb30
 802306a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802306e:	f04f 0200 	mov.w	r2, #0
 8023072:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8023074:	f7fe fb24 	bl	80216c0 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8023078:	f7fe fb44 	bl	8021704 <vPortExitCritical>

	return xAlreadyYielded;
 802307c:	687b      	ldr	r3, [r7, #4]
}
 802307e:	4618      	mov	r0, r3
 8023080:	f107 070c 	add.w	r7, r7, #12
 8023084:	46bd      	mov	sp, r7
 8023086:	bd90      	pop	{r4, r7, pc}

08023088 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8023088:	b580      	push	{r7, lr}
 802308a:	b082      	sub	sp, #8
 802308c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 802308e:	f7fe fb23 	bl	80216d8 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8023092:	f640 3318 	movw	r3, #2840	; 0xb18
 8023096:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802309a:	681b      	ldr	r3, [r3, #0]
 802309c:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 802309e:	f7fe fb31 	bl	8021704 <vPortExitCritical>

	return xTicks;
 80230a2:	687b      	ldr	r3, [r7, #4]
}
 80230a4:	4618      	mov	r0, r3
 80230a6:	f107 0708 	add.w	r7, r7, #8
 80230aa:	46bd      	mov	sp, r7
 80230ac:	bd80      	pop	{r7, pc}
 80230ae:	bf00      	nop

080230b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
 80230b0:	b480      	push	{r7}
 80230b2:	b083      	sub	sp, #12
 80230b4:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80230b6:	f04f 0300 	mov.w	r3, #0
 80230ba:	607b      	str	r3, [r7, #4]
 80230bc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80230c0:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
 80230c4:	f640 3318 	movw	r3, #2840	; 0xb18
 80230c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80230cc:	681b      	ldr	r3, [r3, #0]
 80230ce:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80230d0:	f04f 0000 	mov.w	r0, #0
 80230d4:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 80230d8:	683b      	ldr	r3, [r7, #0]
}
 80230da:	4618      	mov	r0, r3
 80230dc:	f107 070c 	add.w	r7, r7, #12
 80230e0:	46bd      	mov	sp, r7
 80230e2:	bc80      	pop	{r7}
 80230e4:	4770      	bx	lr
 80230e6:	bf00      	nop

080230e8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
 80230e8:	b480      	push	{r7}
 80230ea:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
 80230ec:	f640 3314 	movw	r3, #2836	; 0xb14
 80230f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80230f4:	681b      	ldr	r3, [r3, #0]
}
 80230f6:	4618      	mov	r0, r3
 80230f8:	46bd      	mov	sp, r7
 80230fa:	bc80      	pop	{r7}
 80230fc:	4770      	bx	lr
 80230fe:	bf00      	nop

08023100 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
	{
 8023100:	b590      	push	{r4, r7, lr}
 8023102:	b085      	sub	sp, #20
 8023104:	af00      	add	r7, sp, #0
 8023106:	6078      	str	r0, [r7, #4]
	unsigned long ulTotalRunTime;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
 8023108:	f7ff ff02 	bl	8022f10 <vTaskSuspendAll>
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 802310c:	f001 fbce 	bl	80248ac <get_us_time>
 8023110:	4602      	mov	r2, r0
 8023112:	460b      	mov	r3, r1
 8023114:	4613      	mov	r3, r2
 8023116:	60bb      	str	r3, [r7, #8]
			#endif

			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
			ulTotalRunTime /= 100UL;
 8023118:	68ba      	ldr	r2, [r7, #8]
 802311a:	f248 531f 	movw	r3, #34079	; 0x851f
 802311e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8023122:	fba3 1302 	umull	r1, r3, r3, r2
 8023126:	ea4f 1353 	mov.w	r3, r3, lsr #5
 802312a:	60bb      	str	r3, [r7, #8]
			
			/* Run through all the lists that could potentially contain a TCB,
			generating a table of run timer percentages in the provided
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
 802312c:	687b      	ldr	r3, [r7, #4]
 802312e:	f04f 0200 	mov.w	r2, #0
 8023132:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 8023134:	687c      	ldr	r4, [r7, #4]
 8023136:	4620      	mov	r0, r4
 8023138:	f7e5 f8c2 	bl	80082c0 <strlen>
 802313c:	4603      	mov	r3, r0
 802313e:	18e2      	adds	r2, r4, r3
 8023140:	f645 63f0 	movw	r3, #24304	; 0x5ef0
 8023144:	f6c0 0302 	movt	r3, #2050	; 0x802
 8023148:	4611      	mov	r1, r2
 802314a:	461a      	mov	r2, r3
 802314c:	f04f 0303 	mov.w	r3, #3
 8023150:	4608      	mov	r0, r1
 8023152:	4611      	mov	r1, r2
 8023154:	461a      	mov	r2, r3
 8023156:	f7e4 fae3 	bl	8007720 <memcpy>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 802315a:	f640 331c 	movw	r3, #2844	; 0xb1c
 802315e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023162:	681b      	ldr	r3, [r3, #0]
 8023164:	f103 0301 	add.w	r3, r3, #1
 8023168:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
 802316a:	68fb      	ldr	r3, [r7, #12]
 802316c:	f103 33ff 	add.w	r3, r3, #4294967295
 8023170:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 8023172:	68fa      	ldr	r2, [r7, #12]
 8023174:	4613      	mov	r3, r2
 8023176:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802317a:	189b      	adds	r3, r3, r2
 802317c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023180:	461a      	mov	r2, r3
 8023182:	f640 233c 	movw	r3, #2620	; 0xa3c
 8023186:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802318a:	18d3      	adds	r3, r2, r3
 802318c:	681b      	ldr	r3, [r3, #0]
 802318e:	2b00      	cmp	r3, #0
 8023190:	d013      	beq.n	80231ba <vTaskGetRunTimeStats+0xba>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), ulTotalRunTime, tskREADY_CHAR );
 8023192:	68fa      	ldr	r2, [r7, #12]
 8023194:	4613      	mov	r3, r2
 8023196:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802319a:	189b      	adds	r3, r3, r2
 802319c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80231a0:	461a      	mov	r2, r3
 80231a2:	f640 233c 	movw	r3, #2620	; 0xa3c
 80231a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80231aa:	18d3      	adds	r3, r2, r3
 80231ac:	6878      	ldr	r0, [r7, #4]
 80231ae:	4619      	mov	r1, r3
 80231b0:	68ba      	ldr	r2, [r7, #8]
 80231b2:	f04f 0352 	mov.w	r3, #82	; 0x52
 80231b6:	f000 fcc3 	bl	8023b40 <prvGenerateRunTimeStatsForTasksInList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 80231ba:	68fb      	ldr	r3, [r7, #12]
 80231bc:	2b00      	cmp	r3, #0
 80231be:	d1d4      	bne.n	802316a <vTaskGetRunTimeStats+0x6a>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 80231c0:	f640 23c8 	movw	r3, #2760	; 0xac8
 80231c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80231c8:	681b      	ldr	r3, [r3, #0]
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	2b00      	cmp	r3, #0
 80231ce:	d00b      	beq.n	80231e8 <vTaskGetRunTimeStats+0xe8>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRunTime, tskBLOCKED_CHAR );
 80231d0:	f640 23c8 	movw	r3, #2760	; 0xac8
 80231d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80231d8:	681b      	ldr	r3, [r3, #0]
 80231da:	6878      	ldr	r0, [r7, #4]
 80231dc:	4619      	mov	r1, r3
 80231de:	68ba      	ldr	r2, [r7, #8]
 80231e0:	f04f 0342 	mov.w	r3, #66	; 0x42
 80231e4:	f000 fcac 	bl	8023b40 <prvGenerateRunTimeStatsForTasksInList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 80231e8:	f640 23cc 	movw	r3, #2764	; 0xacc
 80231ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80231f0:	681b      	ldr	r3, [r3, #0]
 80231f2:	681b      	ldr	r3, [r3, #0]
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	d00b      	beq.n	8023210 <vTaskGetRunTimeStats+0x110>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ulTotalRunTime, tskBLOCKED_CHAR );
 80231f8:	f640 23cc 	movw	r3, #2764	; 0xacc
 80231fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023200:	681b      	ldr	r3, [r3, #0]
 8023202:	6878      	ldr	r0, [r7, #4]
 8023204:	4619      	mov	r1, r3
 8023206:	68ba      	ldr	r2, [r7, #8]
 8023208:	f04f 0342 	mov.w	r3, #66	; 0x42
 802320c:	f000 fc98 	bl	8023b40 <prvGenerateRunTimeStatsForTasksInList>
			}

			#if ( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 8023210:	f640 23e4 	movw	r3, #2788	; 0xae4
 8023214:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023218:	681b      	ldr	r3, [r3, #0]
 802321a:	2b00      	cmp	r3, #0
 802321c:	d009      	beq.n	8023232 <vTaskGetRunTimeStats+0x132>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTime, tskDELETED_CHAR );
 802321e:	6878      	ldr	r0, [r7, #4]
 8023220:	f640 21e4 	movw	r1, #2788	; 0xae4
 8023224:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8023228:	68ba      	ldr	r2, [r7, #8]
 802322a:	f04f 0344 	mov.w	r3, #68	; 0x44
 802322e:	f000 fc87 	bl	8023b40 <prvGenerateRunTimeStatsForTasksInList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 8023232:	f640 23fc 	movw	r3, #2812	; 0xafc
 8023236:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802323a:	681b      	ldr	r3, [r3, #0]
 802323c:	2b00      	cmp	r3, #0
 802323e:	d009      	beq.n	8023254 <vTaskGetRunTimeStats+0x154>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime, tskSUSPENDED_CHAR );
 8023240:	6878      	ldr	r0, [r7, #4]
 8023242:	f640 21fc 	movw	r1, #2812	; 0xafc
 8023246:	f2c2 0100 	movt	r1, #8192	; 0x2000
 802324a:	68ba      	ldr	r2, [r7, #8]
 802324c:	f04f 0353 	mov.w	r3, #83	; 0x53
 8023250:	f000 fc76 	bl	8023b40 <prvGenerateRunTimeStatsForTasksInList>
				}
			}
			#endif
		}
		xTaskResumeAll();
 8023254:	f7ff fe6e 	bl	8022f34 <xTaskResumeAll>
	}
 8023258:	f107 0714 	add.w	r7, r7, #20
 802325c:	46bd      	mov	sp, r7
 802325e:	bd90      	pop	{r4, r7, pc}

08023260 <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	xTaskHandle xTaskGetIdleTaskHandle( void )
	{
 8023260:	b480      	push	{r7}
 8023262:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
 8023264:	f640 3310 	movw	r3, #2832	; 0xb10
 8023268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802326c:	681b      	ldr	r3, [r3, #0]
	}
 802326e:	4618      	mov	r0, r3
 8023270:	46bd      	mov	sp, r7
 8023272:	bc80      	pop	{r7}
 8023274:	4770      	bx	lr
 8023276:	bf00      	nop

08023278 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8023278:	b580      	push	{r7, lr}
 802327a:	b084      	sub	sp, #16
 802327c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 802327e:	f640 3328 	movw	r3, #2856	; 0xb28
 8023282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023286:	681b      	ldr	r3, [r3, #0]
 8023288:	2b00      	cmp	r3, #0
 802328a:	f040 80c0 	bne.w	802340e <vTaskIncrementTick+0x196>
	{
		++xTickCount;
 802328e:	f640 3318 	movw	r3, #2840	; 0xb18
 8023292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023296:	681b      	ldr	r3, [r3, #0]
 8023298:	f103 0201 	add.w	r2, r3, #1
 802329c:	f640 3318 	movw	r3, #2840	; 0xb18
 80232a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80232a4:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 80232a6:	f640 3318 	movw	r3, #2840	; 0xb18
 80232aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80232ae:	681b      	ldr	r3, [r3, #0]
 80232b0:	2b00      	cmp	r3, #0
 80232b2:	d140      	bne.n	8023336 <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 80232b4:	f640 23c8 	movw	r3, #2760	; 0xac8
 80232b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80232bc:	681b      	ldr	r3, [r3, #0]
 80232be:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 80232c0:	f640 23cc 	movw	r3, #2764	; 0xacc
 80232c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80232c8:	681a      	ldr	r2, [r3, #0]
 80232ca:	f640 23c8 	movw	r3, #2760	; 0xac8
 80232ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80232d2:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 80232d4:	f640 23cc 	movw	r3, #2764	; 0xacc
 80232d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80232dc:	68fa      	ldr	r2, [r7, #12]
 80232de:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 80232e0:	f640 3334 	movw	r3, #2868	; 0xb34
 80232e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80232e8:	681b      	ldr	r3, [r3, #0]
 80232ea:	f103 0201 	add.w	r2, r3, #1
 80232ee:	f640 3334 	movw	r3, #2868	; 0xb34
 80232f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80232f6:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80232f8:	f640 23c8 	movw	r3, #2760	; 0xac8
 80232fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023300:	681b      	ldr	r3, [r3, #0]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	2b00      	cmp	r3, #0
 8023306:	d107      	bne.n	8023318 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8023308:	f640 1328 	movw	r3, #2344	; 0x928
 802330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023310:	f04f 32ff 	mov.w	r2, #4294967295
 8023314:	601a      	str	r2, [r3, #0]
 8023316:	e00e      	b.n	8023336 <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8023318:	f640 23c8 	movw	r3, #2760	; 0xac8
 802331c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023320:	681b      	ldr	r3, [r3, #0]
 8023322:	68db      	ldr	r3, [r3, #12]
 8023324:	68db      	ldr	r3, [r3, #12]
 8023326:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8023328:	68bb      	ldr	r3, [r7, #8]
 802332a:	685a      	ldr	r2, [r3, #4]
 802332c:	f640 1328 	movw	r3, #2344	; 0x928
 8023330:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023334:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8023336:	f640 3318 	movw	r3, #2840	; 0xb18
 802333a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802333e:	681a      	ldr	r2, [r3, #0]
 8023340:	f640 1328 	movw	r3, #2344	; 0x928
 8023344:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	429a      	cmp	r2, r3
 802334c:	d36b      	bcc.n	8023426 <vTaskIncrementTick+0x1ae>
 802334e:	f640 23c8 	movw	r3, #2760	; 0xac8
 8023352:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023356:	681b      	ldr	r3, [r3, #0]
 8023358:	681b      	ldr	r3, [r3, #0]
 802335a:	2b00      	cmp	r3, #0
 802335c:	d107      	bne.n	802336e <vTaskIncrementTick+0xf6>
 802335e:	f640 1328 	movw	r3, #2344	; 0x928
 8023362:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023366:	f04f 32ff 	mov.w	r2, #4294967295
 802336a:	601a      	str	r2, [r3, #0]
 802336c:	e05b      	b.n	8023426 <vTaskIncrementTick+0x1ae>
 802336e:	f640 23c8 	movw	r3, #2760	; 0xac8
 8023372:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023376:	681b      	ldr	r3, [r3, #0]
 8023378:	68db      	ldr	r3, [r3, #12]
 802337a:	68db      	ldr	r3, [r3, #12]
 802337c:	60bb      	str	r3, [r7, #8]
 802337e:	68bb      	ldr	r3, [r7, #8]
 8023380:	685b      	ldr	r3, [r3, #4]
 8023382:	607b      	str	r3, [r7, #4]
 8023384:	f640 3318 	movw	r3, #2840	; 0xb18
 8023388:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802338c:	681a      	ldr	r2, [r3, #0]
 802338e:	687b      	ldr	r3, [r7, #4]
 8023390:	429a      	cmp	r2, r3
 8023392:	d206      	bcs.n	80233a2 <vTaskIncrementTick+0x12a>
 8023394:	f640 1328 	movw	r3, #2344	; 0x928
 8023398:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802339c:	687a      	ldr	r2, [r7, #4]
 802339e:	601a      	str	r2, [r3, #0]
 80233a0:	e041      	b.n	8023426 <vTaskIncrementTick+0x1ae>
 80233a2:	68bb      	ldr	r3, [r7, #8]
 80233a4:	f103 0304 	add.w	r3, r3, #4
 80233a8:	4618      	mov	r0, r3
 80233aa:	f7fe fd8d 	bl	8021ec8 <vListRemove>
 80233ae:	68bb      	ldr	r3, [r7, #8]
 80233b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d005      	beq.n	80233c2 <vTaskIncrementTick+0x14a>
 80233b6:	68bb      	ldr	r3, [r7, #8]
 80233b8:	f103 0318 	add.w	r3, r3, #24
 80233bc:	4618      	mov	r0, r3
 80233be:	f7fe fd83 	bl	8021ec8 <vListRemove>
 80233c2:	68bb      	ldr	r3, [r7, #8]
 80233c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80233c6:	f640 3320 	movw	r3, #2848	; 0xb20
 80233ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	429a      	cmp	r2, r3
 80233d2:	d906      	bls.n	80233e2 <vTaskIncrementTick+0x16a>
 80233d4:	68bb      	ldr	r3, [r7, #8]
 80233d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80233d8:	f640 3320 	movw	r3, #2848	; 0xb20
 80233dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80233e0:	601a      	str	r2, [r3, #0]
 80233e2:	68bb      	ldr	r3, [r7, #8]
 80233e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80233e6:	4613      	mov	r3, r2
 80233e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80233ec:	189b      	adds	r3, r3, r2
 80233ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80233f2:	461a      	mov	r2, r3
 80233f4:	f640 233c 	movw	r3, #2620	; 0xa3c
 80233f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80233fc:	18d2      	adds	r2, r2, r3
 80233fe:	68bb      	ldr	r3, [r7, #8]
 8023400:	f103 0304 	add.w	r3, r3, #4
 8023404:	4610      	mov	r0, r2
 8023406:	4619      	mov	r1, r3
 8023408:	f7fe fcf8 	bl	8021dfc <vListInsertEnd>
 802340c:	e79f      	b.n	802334e <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
 802340e:	f640 332c 	movw	r3, #2860	; 0xb2c
 8023412:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023416:	681b      	ldr	r3, [r3, #0]
 8023418:	f103 0201 	add.w	r2, r3, #1
 802341c:	f640 332c 	movw	r3, #2860	; 0xb2c
 8023420:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023424:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 8023426:	f107 0710 	add.w	r7, r7, #16
 802342a:	46bd      	mov	sp, r7
 802342c:	bd80      	pop	{r7, pc}
 802342e:	bf00      	nop

08023430 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
 8023430:	b580      	push	{r7, lr}
 8023432:	b084      	sub	sp, #16
 8023434:	af00      	add	r7, sp, #0
 8023436:	6078      	str	r0, [r7, #4]
 8023438:	6039      	str	r1, [r7, #0]
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	2b00      	cmp	r3, #0
 802343e:	d106      	bne.n	802344e <vTaskSetApplicationTaskTag+0x1e>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
 8023440:	f640 2338 	movw	r3, #2616	; 0xa38
 8023444:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023448:	681b      	ldr	r3, [r3, #0]
 802344a:	60fb      	str	r3, [r7, #12]
 802344c:	e001      	b.n	8023452 <vTaskSetApplicationTaskTag+0x22>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
 802344e:	687b      	ldr	r3, [r7, #4]
 8023450:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8023452:	f7fe f941 	bl	80216d8 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8023456:	68fb      	ldr	r3, [r7, #12]
 8023458:	683a      	ldr	r2, [r7, #0]
 802345a:	649a      	str	r2, [r3, #72]	; 0x48
		taskEXIT_CRITICAL();
 802345c:	f7fe f952 	bl	8021704 <vPortExitCritical>
	}
 8023460:	f107 0710 	add.w	r7, r7, #16
 8023464:	46bd      	mov	sp, r7
 8023466:	bd80      	pop	{r7, pc}

08023468 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
 8023468:	b580      	push	{r7, lr}
 802346a:	b084      	sub	sp, #16
 802346c:	af00      	add	r7, sp, #0
 802346e:	6078      	str	r0, [r7, #4]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
 8023470:	687b      	ldr	r3, [r7, #4]
 8023472:	2b00      	cmp	r3, #0
 8023474:	d106      	bne.n	8023484 <xTaskGetApplicationTaskTag+0x1c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
 8023476:	f640 2338 	movw	r3, #2616	; 0xa38
 802347a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802347e:	681b      	ldr	r3, [r3, #0]
 8023480:	60fb      	str	r3, [r7, #12]
 8023482:	e001      	b.n	8023488 <xTaskGetApplicationTaskTag+0x20>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8023488:	f7fe f926 	bl	80216d8 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
 802348c:	68fb      	ldr	r3, [r7, #12]
 802348e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023490:	60bb      	str	r3, [r7, #8]
		taskEXIT_CRITICAL();
 8023492:	f7fe f937 	bl	8021704 <vPortExitCritical>

		return xReturn;
 8023496:	68bb      	ldr	r3, [r7, #8]
	}
 8023498:	4618      	mov	r0, r3
 802349a:	f107 0710 	add.w	r7, r7, #16
 802349e:	46bd      	mov	sp, r7
 80234a0:	bd80      	pop	{r7, pc}
 80234a2:	bf00      	nop

080234a4 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
 80234a4:	b580      	push	{r7, lr}
 80234a6:	b084      	sub	sp, #16
 80234a8:	af00      	add	r7, sp, #0
 80234aa:	6078      	str	r0, [r7, #4]
 80234ac:	6039      	str	r1, [r7, #0]
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 80234ae:	687b      	ldr	r3, [r7, #4]
 80234b0:	2b00      	cmp	r3, #0
 80234b2:	d106      	bne.n	80234c2 <xTaskCallApplicationTaskHook+0x1e>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
 80234b4:	f640 2338 	movw	r3, #2616	; 0xa38
 80234b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80234bc:	681b      	ldr	r3, [r3, #0]
 80234be:	60fb      	str	r3, [r7, #12]
 80234c0:	e001      	b.n	80234c6 <xTaskCallApplicationTaskHook+0x22>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
 80234c2:	687b      	ldr	r3, [r7, #4]
 80234c4:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 80234c6:	68fb      	ldr	r3, [r7, #12]
 80234c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d006      	beq.n	80234dc <xTaskCallApplicationTaskHook+0x38>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 80234ce:	68fb      	ldr	r3, [r7, #12]
 80234d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80234d2:	6838      	ldr	r0, [r7, #0]
 80234d4:	4798      	blx	r3
 80234d6:	4603      	mov	r3, r0
 80234d8:	60bb      	str	r3, [r7, #8]
 80234da:	e002      	b.n	80234e2 <xTaskCallApplicationTaskHook+0x3e>
		}
		else
		{
			xReturn = pdFAIL;
 80234dc:	f04f 0300 	mov.w	r3, #0
 80234e0:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 80234e2:	68bb      	ldr	r3, [r7, #8]
	}
 80234e4:	4618      	mov	r0, r3
 80234e6:	f107 0710 	add.w	r7, r7, #16
 80234ea:	46bd      	mov	sp, r7
 80234ec:	bd80      	pop	{r7, pc}
 80234ee:	bf00      	nop

080234f0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80234f0:	b580      	push	{r7, lr}
 80234f2:	b082      	sub	sp, #8
 80234f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80234f6:	f640 3328 	movw	r3, #2856	; 0xb28
 80234fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80234fe:	681b      	ldr	r3, [r3, #0]
 8023500:	2b00      	cmp	r3, #0
 8023502:	d007      	beq.n	8023514 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8023504:	f640 3330 	movw	r3, #2864	; 0xb30
 8023508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802350c:	f04f 0201 	mov.w	r2, #1
 8023510:	601a      	str	r2, [r3, #0]
 8023512:	e089      	b.n	8023628 <vTaskSwitchContext+0x138>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8023514:	f001 f9ca 	bl	80248ac <get_us_time>
 8023518:	4602      	mov	r2, r0
 802351a:	460b      	mov	r3, r1
 802351c:	4613      	mov	r3, r2
 802351e:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8023520:	f640 2338 	movw	r3, #2616	; 0xa38
 8023524:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023528:	681a      	ldr	r2, [r3, #0]
 802352a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 802352c:	f640 3370 	movw	r3, #2928	; 0xb70
 8023530:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023534:	681b      	ldr	r3, [r3, #0]
 8023536:	6878      	ldr	r0, [r7, #4]
 8023538:	1ac3      	subs	r3, r0, r3
 802353a:	18cb      	adds	r3, r1, r3
 802353c:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 802353e:	f640 3370 	movw	r3, #2928	; 0xb70
 8023542:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023546:	687a      	ldr	r2, [r7, #4]
 8023548:	601a      	str	r2, [r3, #0]
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 802354a:	f640 2338 	movw	r3, #2616	; 0xa38
 802354e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023552:	681b      	ldr	r3, [r3, #0]
 8023554:	681a      	ldr	r2, [r3, #0]
 8023556:	f640 2338 	movw	r3, #2616	; 0xa38
 802355a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802355e:	681b      	ldr	r3, [r3, #0]
 8023560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023562:	429a      	cmp	r2, r3
 8023564:	d81d      	bhi.n	80235a2 <vTaskSwitchContext+0xb2>
 8023566:	f640 2338 	movw	r3, #2616	; 0xa38
 802356a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802356e:	681a      	ldr	r2, [r3, #0]
 8023570:	f640 2338 	movw	r3, #2616	; 0xa38
 8023574:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023578:	681b      	ldr	r3, [r3, #0]
 802357a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 802357e:	4610      	mov	r0, r2
 8023580:	4619      	mov	r1, r3
 8023582:	f000 fdc1 	bl	8024108 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8023586:	e00c      	b.n	80235a2 <vTaskSwitchContext+0xb2>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 8023588:	f640 3320 	movw	r3, #2848	; 0xb20
 802358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023590:	681b      	ldr	r3, [r3, #0]
 8023592:	f103 32ff 	add.w	r2, r3, #4294967295
 8023596:	f640 3320 	movw	r3, #2848	; 0xb20
 802359a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802359e:	601a      	str	r2, [r3, #0]
 80235a0:	e000      	b.n	80235a4 <vTaskSwitchContext+0xb4>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 80235a2:	bf00      	nop
 80235a4:	f640 3320 	movw	r3, #2848	; 0xb20
 80235a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80235ac:	681a      	ldr	r2, [r3, #0]
 80235ae:	4613      	mov	r3, r2
 80235b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80235b4:	189b      	adds	r3, r3, r2
 80235b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80235ba:	461a      	mov	r2, r3
 80235bc:	f640 233c 	movw	r3, #2620	; 0xa3c
 80235c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80235c4:	18d3      	adds	r3, r2, r3
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	2b00      	cmp	r3, #0
 80235ca:	d0dd      	beq.n	8023588 <vTaskSwitchContext+0x98>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 80235cc:	f640 3320 	movw	r3, #2848	; 0xb20
 80235d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80235d4:	681a      	ldr	r2, [r3, #0]
 80235d6:	4613      	mov	r3, r2
 80235d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80235dc:	189b      	adds	r3, r3, r2
 80235de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80235e2:	461a      	mov	r2, r3
 80235e4:	f640 233c 	movw	r3, #2620	; 0xa3c
 80235e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80235ec:	18d3      	adds	r3, r2, r3
 80235ee:	603b      	str	r3, [r7, #0]
 80235f0:	683b      	ldr	r3, [r7, #0]
 80235f2:	685b      	ldr	r3, [r3, #4]
 80235f4:	685b      	ldr	r3, [r3, #4]
 80235f6:	461a      	mov	r2, r3
 80235f8:	683b      	ldr	r3, [r7, #0]
 80235fa:	605a      	str	r2, [r3, #4]
 80235fc:	683b      	ldr	r3, [r7, #0]
 80235fe:	685a      	ldr	r2, [r3, #4]
 8023600:	683b      	ldr	r3, [r7, #0]
 8023602:	f103 0308 	add.w	r3, r3, #8
 8023606:	429a      	cmp	r2, r3
 8023608:	d105      	bne.n	8023616 <vTaskSwitchContext+0x126>
 802360a:	683b      	ldr	r3, [r7, #0]
 802360c:	685b      	ldr	r3, [r3, #4]
 802360e:	685b      	ldr	r3, [r3, #4]
 8023610:	461a      	mov	r2, r3
 8023612:	683b      	ldr	r3, [r7, #0]
 8023614:	605a      	str	r2, [r3, #4]
 8023616:	683b      	ldr	r3, [r7, #0]
 8023618:	685b      	ldr	r3, [r3, #4]
 802361a:	68db      	ldr	r3, [r3, #12]
 802361c:	461a      	mov	r2, r3
 802361e:	f640 2338 	movw	r3, #2616	; 0xa38
 8023622:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023626:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
 8023628:	f107 0708 	add.w	r7, r7, #8
 802362c:	46bd      	mov	sp, r7
 802362e:	bd80      	pop	{r7, pc}

08023630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8023630:	b580      	push	{r7, lr}
 8023632:	b084      	sub	sp, #16
 8023634:	af00      	add	r7, sp, #0
 8023636:	6078      	str	r0, [r7, #4]
 8023638:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 802363a:	f640 2338 	movw	r3, #2616	; 0xa38
 802363e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023642:	681b      	ldr	r3, [r3, #0]
 8023644:	f103 0318 	add.w	r3, r3, #24
 8023648:	6878      	ldr	r0, [r7, #4]
 802364a:	4619      	mov	r1, r3
 802364c:	f7fe fc00 	bl	8021e50 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8023650:	f640 2338 	movw	r3, #2616	; 0xa38
 8023654:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023658:	681b      	ldr	r3, [r3, #0]
 802365a:	f103 0304 	add.w	r3, r3, #4
 802365e:	4618      	mov	r0, r3
 8023660:	f7fe fc32 	bl	8021ec8 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8023664:	683b      	ldr	r3, [r7, #0]
 8023666:	f1b3 3fff 	cmp.w	r3, #4294967295
 802366a:	d10e      	bne.n	802368a <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 802366c:	f640 2338 	movw	r3, #2616	; 0xa38
 8023670:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023674:	681b      	ldr	r3, [r3, #0]
 8023676:	f103 0304 	add.w	r3, r3, #4
 802367a:	f640 20fc 	movw	r0, #2812	; 0xafc
 802367e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023682:	4619      	mov	r1, r3
 8023684:	f7fe fbba 	bl	8021dfc <vListInsertEnd>
 8023688:	e00a      	b.n	80236a0 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 802368a:	f640 3318 	movw	r3, #2840	; 0xb18
 802368e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023692:	681a      	ldr	r2, [r3, #0]
 8023694:	683b      	ldr	r3, [r7, #0]
 8023696:	18d3      	adds	r3, r2, r3
 8023698:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 802369a:	68f8      	ldr	r0, [r7, #12]
 802369c:	f000 f9d0 	bl	8023a40 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 80236a0:	f107 0710 	add.w	r7, r7, #16
 80236a4:	46bd      	mov	sp, r7
 80236a6:	bd80      	pop	{r7, pc}

080236a8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80236a8:	b580      	push	{r7, lr}
 80236aa:	b084      	sub	sp, #16
 80236ac:	af00      	add	r7, sp, #0
 80236ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	68db      	ldr	r3, [r3, #12]
 80236b4:	68db      	ldr	r3, [r3, #12]
 80236b6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80236b8:	68bb      	ldr	r3, [r7, #8]
 80236ba:	f103 0318 	add.w	r3, r3, #24
 80236be:	4618      	mov	r0, r3
 80236c0:	f7fe fc02 	bl	8021ec8 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80236c4:	f640 3328 	movw	r3, #2856	; 0xb28
 80236c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80236cc:	681b      	ldr	r3, [r3, #0]
 80236ce:	2b00      	cmp	r3, #0
 80236d0:	d12b      	bne.n	802372a <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80236d2:	68bb      	ldr	r3, [r7, #8]
 80236d4:	f103 0304 	add.w	r3, r3, #4
 80236d8:	4618      	mov	r0, r3
 80236da:	f7fe fbf5 	bl	8021ec8 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 80236de:	68bb      	ldr	r3, [r7, #8]
 80236e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80236e2:	f640 3320 	movw	r3, #2848	; 0xb20
 80236e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80236ea:	681b      	ldr	r3, [r3, #0]
 80236ec:	429a      	cmp	r2, r3
 80236ee:	d906      	bls.n	80236fe <xTaskRemoveFromEventList+0x56>
 80236f0:	68bb      	ldr	r3, [r7, #8]
 80236f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80236f4:	f640 3320 	movw	r3, #2848	; 0xb20
 80236f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80236fc:	601a      	str	r2, [r3, #0]
 80236fe:	68bb      	ldr	r3, [r7, #8]
 8023700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023702:	4613      	mov	r3, r2
 8023704:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023708:	189b      	adds	r3, r3, r2
 802370a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802370e:	461a      	mov	r2, r3
 8023710:	f640 233c 	movw	r3, #2620	; 0xa3c
 8023714:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023718:	18d2      	adds	r2, r2, r3
 802371a:	68bb      	ldr	r3, [r7, #8]
 802371c:	f103 0304 	add.w	r3, r3, #4
 8023720:	4610      	mov	r0, r2
 8023722:	4619      	mov	r1, r3
 8023724:	f7fe fb6a 	bl	8021dfc <vListInsertEnd>
 8023728:	e009      	b.n	802373e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 802372a:	68bb      	ldr	r3, [r7, #8]
 802372c:	f103 0318 	add.w	r3, r3, #24
 8023730:	f640 20d0 	movw	r0, #2768	; 0xad0
 8023734:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023738:	4619      	mov	r1, r3
 802373a:	f7fe fb5f 	bl	8021dfc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802373e:	68bb      	ldr	r3, [r7, #8]
 8023740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023742:	f640 2338 	movw	r3, #2616	; 0xa38
 8023746:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802374a:	681b      	ldr	r3, [r3, #0]
 802374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802374e:	429a      	cmp	r2, r3
 8023750:	d303      	bcc.n	802375a <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8023752:	f04f 0301 	mov.w	r3, #1
 8023756:	60fb      	str	r3, [r7, #12]
 8023758:	e002      	b.n	8023760 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
 802375a:	f04f 0300 	mov.w	r3, #0
 802375e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8023760:	68fb      	ldr	r3, [r7, #12]
}
 8023762:	4618      	mov	r0, r3
 8023764:	f107 0710 	add.w	r7, r7, #16
 8023768:	46bd      	mov	sp, r7
 802376a:	bd80      	pop	{r7, pc}

0802376c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 802376c:	b480      	push	{r7}
 802376e:	b083      	sub	sp, #12
 8023770:	af00      	add	r7, sp, #0
 8023772:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8023774:	f640 3334 	movw	r3, #2868	; 0xb34
 8023778:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802377c:	681a      	ldr	r2, [r3, #0]
 802377e:	687b      	ldr	r3, [r7, #4]
 8023780:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8023782:	f640 3318 	movw	r3, #2840	; 0xb18
 8023786:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802378a:	681a      	ldr	r2, [r3, #0]
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	605a      	str	r2, [r3, #4]
}
 8023790:	f107 070c 	add.w	r7, r7, #12
 8023794:	46bd      	mov	sp, r7
 8023796:	bc80      	pop	{r7}
 8023798:	4770      	bx	lr
 802379a:	bf00      	nop

0802379c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 802379c:	b580      	push	{r7, lr}
 802379e:	b084      	sub	sp, #16
 80237a0:	af00      	add	r7, sp, #0
 80237a2:	6078      	str	r0, [r7, #4]
 80237a4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80237a6:	f7fd ff97 	bl	80216d8 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80237aa:	683b      	ldr	r3, [r7, #0]
 80237ac:	681b      	ldr	r3, [r3, #0]
 80237ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80237b2:	d103      	bne.n	80237bc <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
 80237b4:	f04f 0300 	mov.w	r3, #0
 80237b8:	60fb      	str	r3, [r7, #12]
 80237ba:	e038      	b.n	802382e <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80237bc:	687b      	ldr	r3, [r7, #4]
 80237be:	681a      	ldr	r2, [r3, #0]
 80237c0:	f640 3334 	movw	r3, #2868	; 0xb34
 80237c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80237c8:	681b      	ldr	r3, [r3, #0]
 80237ca:	429a      	cmp	r2, r3
 80237cc:	d00c      	beq.n	80237e8 <xTaskCheckForTimeOut+0x4c>
 80237ce:	687b      	ldr	r3, [r7, #4]
 80237d0:	685a      	ldr	r2, [r3, #4]
 80237d2:	f640 3318 	movw	r3, #2840	; 0xb18
 80237d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80237da:	681b      	ldr	r3, [r3, #0]
 80237dc:	429a      	cmp	r2, r3
 80237de:	d803      	bhi.n	80237e8 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80237e0:	f04f 0301 	mov.w	r3, #1
 80237e4:	60fb      	str	r3, [r7, #12]
 80237e6:	e022      	b.n	802382e <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 80237e8:	f640 3318 	movw	r3, #2840	; 0xb18
 80237ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80237f0:	681a      	ldr	r2, [r3, #0]
 80237f2:	687b      	ldr	r3, [r7, #4]
 80237f4:	685b      	ldr	r3, [r3, #4]
 80237f6:	1ad2      	subs	r2, r2, r3
 80237f8:	683b      	ldr	r3, [r7, #0]
 80237fa:	681b      	ldr	r3, [r3, #0]
 80237fc:	429a      	cmp	r2, r3
 80237fe:	d213      	bcs.n	8023828 <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8023800:	683b      	ldr	r3, [r7, #0]
 8023802:	681a      	ldr	r2, [r3, #0]
 8023804:	687b      	ldr	r3, [r7, #4]
 8023806:	6859      	ldr	r1, [r3, #4]
 8023808:	f640 3318 	movw	r3, #2840	; 0xb18
 802380c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023810:	681b      	ldr	r3, [r3, #0]
 8023812:	1acb      	subs	r3, r1, r3
 8023814:	18d2      	adds	r2, r2, r3
 8023816:	683b      	ldr	r3, [r7, #0]
 8023818:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 802381a:	6878      	ldr	r0, [r7, #4]
 802381c:	f7ff ffa6 	bl	802376c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8023820:	f04f 0300 	mov.w	r3, #0
 8023824:	60fb      	str	r3, [r7, #12]
 8023826:	e002      	b.n	802382e <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8023828:	f04f 0301 	mov.w	r3, #1
 802382c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802382e:	f7fd ff69 	bl	8021704 <vPortExitCritical>

	return xReturn;
 8023832:	68fb      	ldr	r3, [r7, #12]
}
 8023834:	4618      	mov	r0, r3
 8023836:	f107 0710 	add.w	r7, r7, #16
 802383a:	46bd      	mov	sp, r7
 802383c:	bd80      	pop	{r7, pc}
 802383e:	bf00      	nop

08023840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8023840:	b480      	push	{r7}
 8023842:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8023844:	f640 3330 	movw	r3, #2864	; 0xb30
 8023848:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802384c:	f04f 0201 	mov.w	r2, #1
 8023850:	601a      	str	r2, [r3, #0]
}
 8023852:	46bd      	mov	sp, r7
 8023854:	bc80      	pop	{r7}
 8023856:	4770      	bx	lr

08023858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8023858:	b580      	push	{r7, lr}
 802385a:	b082      	sub	sp, #8
 802385c:	af00      	add	r7, sp, #0
 802385e:	6078      	str	r0, [r7, #4]
 8023860:	e000      	b.n	8023864 <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8023862:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8023864:	f000 f8a0 	bl	80239a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8023868:	f640 233c 	movw	r3, #2620	; 0xa3c
 802386c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023870:	681b      	ldr	r3, [r3, #0]
 8023872:	2b01      	cmp	r3, #1
 8023874:	d9f5      	bls.n	8023862 <prvIdleTask+0xa>
			{
				taskYIELD();
 8023876:	f7fd ff23 	bl	80216c0 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 802387a:	e7f2      	b.n	8023862 <prvIdleTask+0xa>

0802387c <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 802387c:	b580      	push	{r7, lr}
 802387e:	b084      	sub	sp, #16
 8023880:	af00      	add	r7, sp, #0
 8023882:	60f8      	str	r0, [r7, #12]
 8023884:	60b9      	str	r1, [r7, #8]
 8023886:	607a      	str	r2, [r7, #4]
 8023888:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 802388a:	68fb      	ldr	r3, [r7, #12]
 802388c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8023890:	4618      	mov	r0, r3
 8023892:	68b9      	ldr	r1, [r7, #8]
 8023894:	f04f 0210 	mov.w	r2, #16
 8023898:	f7e4 fd96 	bl	80083c8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 802389c:	68fb      	ldr	r3, [r7, #12]
 802389e:	f04f 0200 	mov.w	r2, #0
 80238a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 80238a6:	687b      	ldr	r3, [r7, #4]
 80238a8:	2b04      	cmp	r3, #4
 80238aa:	d902      	bls.n	80238b2 <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 80238ac:	f04f 0304 	mov.w	r3, #4
 80238b0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	687a      	ldr	r2, [r7, #4]
 80238b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80238b8:	68fb      	ldr	r3, [r7, #12]
 80238ba:	687a      	ldr	r2, [r7, #4]
 80238bc:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80238be:	68fb      	ldr	r3, [r7, #12]
 80238c0:	f103 0304 	add.w	r3, r3, #4
 80238c4:	4618      	mov	r0, r3
 80238c6:	f7fe fa8b 	bl	8021de0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80238ca:	68fb      	ldr	r3, [r7, #12]
 80238cc:	f103 0318 	add.w	r3, r3, #24
 80238d0:	4618      	mov	r0, r3
 80238d2:	f7fe fa85 	bl	8021de0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80238d6:	68fb      	ldr	r3, [r7, #12]
 80238d8:	68fa      	ldr	r2, [r7, #12]
 80238da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 80238dc:	687b      	ldr	r3, [r7, #4]
 80238de:	f1c3 0205 	rsb	r2, r3, #5
 80238e2:	68fb      	ldr	r3, [r7, #12]
 80238e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80238e6:	68fb      	ldr	r3, [r7, #12]
 80238e8:	68fa      	ldr	r2, [r7, #12]
 80238ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 80238ec:	68fb      	ldr	r3, [r7, #12]
 80238ee:	f04f 0200 	mov.w	r2, #0
 80238f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 80238f4:	68fb      	ldr	r3, [r7, #12]
 80238f6:	f04f 0200 	mov.w	r2, #0
 80238fa:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 80238fc:	f107 0710 	add.w	r7, r7, #16
 8023900:	46bd      	mov	sp, r7
 8023902:	bd80      	pop	{r7, pc}

08023904 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8023904:	b580      	push	{r7, lr}
 8023906:	b082      	sub	sp, #8
 8023908:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 802390a:	f04f 0300 	mov.w	r3, #0
 802390e:	607b      	str	r3, [r7, #4]
 8023910:	e013      	b.n	802393a <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8023912:	687a      	ldr	r2, [r7, #4]
 8023914:	4613      	mov	r3, r2
 8023916:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802391a:	189b      	adds	r3, r3, r2
 802391c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023920:	461a      	mov	r2, r3
 8023922:	f640 233c 	movw	r3, #2620	; 0xa3c
 8023926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802392a:	18d3      	adds	r3, r2, r3
 802392c:	4618      	mov	r0, r3
 802392e:	f7fe fa37 	bl	8021da0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8023932:	687b      	ldr	r3, [r7, #4]
 8023934:	f103 0301 	add.w	r3, r3, #1
 8023938:	607b      	str	r3, [r7, #4]
 802393a:	687b      	ldr	r3, [r7, #4]
 802393c:	2b04      	cmp	r3, #4
 802393e:	d9e8      	bls.n	8023912 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8023940:	f640 20a0 	movw	r0, #2720	; 0xaa0
 8023944:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023948:	f7fe fa2a 	bl	8021da0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 802394c:	f640 20b4 	movw	r0, #2740	; 0xab4
 8023950:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023954:	f7fe fa24 	bl	8021da0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8023958:	f640 20d0 	movw	r0, #2768	; 0xad0
 802395c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023960:	f7fe fa1e 	bl	8021da0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8023964:	f640 20e4 	movw	r0, #2788	; 0xae4
 8023968:	f2c2 0000 	movt	r0, #8192	; 0x2000
 802396c:	f7fe fa18 	bl	8021da0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8023970:	f640 20fc 	movw	r0, #2812	; 0xafc
 8023974:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023978:	f7fe fa12 	bl	8021da0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802397c:	f640 23c8 	movw	r3, #2760	; 0xac8
 8023980:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023984:	f640 22a0 	movw	r2, #2720	; 0xaa0
 8023988:	f2c2 0200 	movt	r2, #8192	; 0x2000
 802398c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802398e:	f640 23cc 	movw	r3, #2764	; 0xacc
 8023992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023996:	f640 22b4 	movw	r2, #2740	; 0xab4
 802399a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 802399e:	601a      	str	r2, [r3, #0]
}
 80239a0:	f107 0708 	add.w	r7, r7, #8
 80239a4:	46bd      	mov	sp, r7
 80239a6:	bd80      	pop	{r7, pc}

080239a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80239a8:	b580      	push	{r7, lr}
 80239aa:	b082      	sub	sp, #8
 80239ac:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80239ae:	f640 23f8 	movw	r3, #2808	; 0xaf8
 80239b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80239b6:	681b      	ldr	r3, [r3, #0]
 80239b8:	2b00      	cmp	r3, #0
 80239ba:	d03c      	beq.n	8023a36 <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
 80239bc:	f7ff faa8 	bl	8022f10 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80239c0:	f640 23e4 	movw	r3, #2788	; 0xae4
 80239c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	bf14      	ite	ne
 80239ce:	2300      	movne	r3, #0
 80239d0:	2301      	moveq	r3, #1
 80239d2:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 80239d4:	f7ff faae 	bl	8022f34 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	2b00      	cmp	r3, #0
 80239dc:	d12b      	bne.n	8023a36 <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80239de:	f7fd fe7b 	bl	80216d8 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 80239e2:	f640 23e4 	movw	r3, #2788	; 0xae4
 80239e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80239ea:	68db      	ldr	r3, [r3, #12]
 80239ec:	68db      	ldr	r3, [r3, #12]
 80239ee:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 80239f0:	683b      	ldr	r3, [r7, #0]
 80239f2:	f103 0304 	add.w	r3, r3, #4
 80239f6:	4618      	mov	r0, r3
 80239f8:	f7fe fa66 	bl	8021ec8 <vListRemove>
					--uxCurrentNumberOfTasks;
 80239fc:	f640 3314 	movw	r3, #2836	; 0xb14
 8023a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a04:	681b      	ldr	r3, [r3, #0]
 8023a06:	f103 32ff 	add.w	r2, r3, #4294967295
 8023a0a:	f640 3314 	movw	r3, #2836	; 0xb14
 8023a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a12:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8023a14:	f640 23f8 	movw	r3, #2808	; 0xaf8
 8023a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a1c:	681b      	ldr	r3, [r3, #0]
 8023a1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8023a22:	f640 23f8 	movw	r3, #2808	; 0xaf8
 8023a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a2a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8023a2c:	f7fd fe6a 	bl	8021704 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8023a30:	6838      	ldr	r0, [r7, #0]
 8023a32:	f000 f97d 	bl	8023d30 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 8023a36:	f107 0708 	add.w	r7, r7, #8
 8023a3a:	46bd      	mov	sp, r7
 8023a3c:	bd80      	pop	{r7, pc}
 8023a3e:	bf00      	nop

08023a40 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8023a40:	b580      	push	{r7, lr}
 8023a42:	b082      	sub	sp, #8
 8023a44:	af00      	add	r7, sp, #0
 8023a46:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8023a48:	f640 2338 	movw	r3, #2616	; 0xa38
 8023a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a50:	681b      	ldr	r3, [r3, #0]
 8023a52:	687a      	ldr	r2, [r7, #4]
 8023a54:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8023a56:	f640 3318 	movw	r3, #2840	; 0xb18
 8023a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a5e:	681b      	ldr	r3, [r3, #0]
 8023a60:	687a      	ldr	r2, [r7, #4]
 8023a62:	429a      	cmp	r2, r3
 8023a64:	d210      	bcs.n	8023a88 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8023a66:	f640 23cc 	movw	r3, #2764	; 0xacc
 8023a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a6e:	681a      	ldr	r2, [r3, #0]
 8023a70:	f640 2338 	movw	r3, #2616	; 0xa38
 8023a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a78:	681b      	ldr	r3, [r3, #0]
 8023a7a:	f103 0304 	add.w	r3, r3, #4
 8023a7e:	4610      	mov	r0, r2
 8023a80:	4619      	mov	r1, r3
 8023a82:	f7fe f9e5 	bl	8021e50 <vListInsert>
 8023a86:	e01d      	b.n	8023ac4 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8023a88:	f640 23c8 	movw	r3, #2760	; 0xac8
 8023a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a90:	681a      	ldr	r2, [r3, #0]
 8023a92:	f640 2338 	movw	r3, #2616	; 0xa38
 8023a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023a9a:	681b      	ldr	r3, [r3, #0]
 8023a9c:	f103 0304 	add.w	r3, r3, #4
 8023aa0:	4610      	mov	r0, r2
 8023aa2:	4619      	mov	r1, r3
 8023aa4:	f7fe f9d4 	bl	8021e50 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8023aa8:	f640 1328 	movw	r3, #2344	; 0x928
 8023aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	687a      	ldr	r2, [r7, #4]
 8023ab4:	429a      	cmp	r2, r3
 8023ab6:	d205      	bcs.n	8023ac4 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8023ab8:	f640 1328 	movw	r3, #2344	; 0x928
 8023abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023ac0:	687a      	ldr	r2, [r7, #4]
 8023ac2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8023ac4:	f107 0708 	add.w	r7, r7, #8
 8023ac8:	46bd      	mov	sp, r7
 8023aca:	bd80      	pop	{r7, pc}

08023acc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8023acc:	b580      	push	{r7, lr}
 8023ace:	b084      	sub	sp, #16
 8023ad0:	af00      	add	r7, sp, #0
 8023ad2:	4603      	mov	r3, r0
 8023ad4:	6039      	str	r1, [r7, #0]
 8023ad6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8023ad8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8023adc:	f7e3 faea 	bl	80070b4 <malloc>
 8023ae0:	4603      	mov	r3, r0
 8023ae2:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 8023ae4:	68fb      	ldr	r3, [r7, #12]
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d023      	beq.n	8023b32 <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8023aea:	683b      	ldr	r3, [r7, #0]
 8023aec:	2b00      	cmp	r3, #0
 8023aee:	d107      	bne.n	8023b00 <prvAllocateTCBAndStack+0x34>
 8023af0:	88fb      	ldrh	r3, [r7, #6]
 8023af2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023af6:	4618      	mov	r0, r3
 8023af8:	f7e3 fadc 	bl	80070b4 <malloc>
 8023afc:	4603      	mov	r3, r0
 8023afe:	e000      	b.n	8023b02 <prvAllocateTCBAndStack+0x36>
 8023b00:	683b      	ldr	r3, [r7, #0]
 8023b02:	68fa      	ldr	r2, [r7, #12]
 8023b04:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8023b06:	68fb      	ldr	r3, [r7, #12]
 8023b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b0a:	2b00      	cmp	r3, #0
 8023b0c:	d106      	bne.n	8023b1c <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8023b0e:	68f8      	ldr	r0, [r7, #12]
 8023b10:	f7e3 fad8 	bl	80070c4 <free>
			pxNewTCB = NULL;
 8023b14:	f04f 0300 	mov.w	r3, #0
 8023b18:	60fb      	str	r3, [r7, #12]
 8023b1a:	e00a      	b.n	8023b32 <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8023b1c:	68fb      	ldr	r3, [r7, #12]
 8023b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023b20:	88fb      	ldrh	r3, [r7, #6]
 8023b22:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023b26:	4610      	mov	r0, r2
 8023b28:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 8023b2c:	461a      	mov	r2, r3
 8023b2e:	f7e3 fe9d 	bl	800786c <memset>
		}
	}

	return pxNewTCB;
 8023b32:	68fb      	ldr	r3, [r7, #12]
}
 8023b34:	4618      	mov	r0, r3
 8023b36:	f107 0710 	add.w	r7, r7, #16
 8023b3a:	46bd      	mov	sp, r7
 8023b3c:	bd80      	pop	{r7, pc}
 8023b3e:	bf00      	nop

08023b40 <prvGenerateRunTimeStatsForTasksInList>:
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime, signed char cStatus  )
	{
 8023b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b44:	b08e      	sub	sp, #56	; 0x38
 8023b46:	af04      	add	r7, sp, #16
 8023b48:	60f8      	str	r0, [r7, #12]
 8023b4a:	60b9      	str	r1, [r7, #8]
 8023b4c:	607a      	str	r2, [r7, #4]
 8023b4e:	70fb      	strb	r3, [r7, #3]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8023b50:	68bb      	ldr	r3, [r7, #8]
 8023b52:	627b      	str	r3, [r7, #36]	; 0x24
 8023b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b56:	685b      	ldr	r3, [r3, #4]
 8023b58:	685b      	ldr	r3, [r3, #4]
 8023b5a:	461a      	mov	r2, r3
 8023b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b5e:	605a      	str	r2, [r3, #4]
 8023b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b62:	685a      	ldr	r2, [r3, #4]
 8023b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b66:	f103 0308 	add.w	r3, r3, #8
 8023b6a:	429a      	cmp	r2, r3
 8023b6c:	d105      	bne.n	8023b7a <prvGenerateRunTimeStatsForTasksInList+0x3a>
 8023b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b70:	685b      	ldr	r3, [r3, #4]
 8023b72:	685b      	ldr	r3, [r3, #4]
 8023b74:	461a      	mov	r2, r3
 8023b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b78:	605a      	str	r2, [r3, #4]
 8023b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b7c:	685b      	ldr	r3, [r3, #4]
 8023b7e:	68db      	ldr	r3, [r3, #12]
 8023b80:	623b      	str	r3, [r7, #32]
		do
		{
			/* Get next TCB in from the list. */
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8023b82:	68bb      	ldr	r3, [r7, #8]
 8023b84:	61fb      	str	r3, [r7, #28]
 8023b86:	69fb      	ldr	r3, [r7, #28]
 8023b88:	685b      	ldr	r3, [r3, #4]
 8023b8a:	685b      	ldr	r3, [r3, #4]
 8023b8c:	461a      	mov	r2, r3
 8023b8e:	69fb      	ldr	r3, [r7, #28]
 8023b90:	605a      	str	r2, [r3, #4]
 8023b92:	69fb      	ldr	r3, [r7, #28]
 8023b94:	685a      	ldr	r2, [r3, #4]
 8023b96:	69fb      	ldr	r3, [r7, #28]
 8023b98:	f103 0308 	add.w	r3, r3, #8
 8023b9c:	429a      	cmp	r2, r3
 8023b9e:	d105      	bne.n	8023bac <prvGenerateRunTimeStatsForTasksInList+0x6c>
 8023ba0:	69fb      	ldr	r3, [r7, #28]
 8023ba2:	685b      	ldr	r3, [r3, #4]
 8023ba4:	685b      	ldr	r3, [r3, #4]
 8023ba6:	461a      	mov	r2, r3
 8023ba8:	69fb      	ldr	r3, [r7, #28]
 8023baa:	605a      	str	r2, [r3, #4]
 8023bac:	69fb      	ldr	r3, [r7, #28]
 8023bae:	685b      	ldr	r3, [r3, #4]
 8023bb0:	68db      	ldr	r3, [r3, #12]
 8023bb2:	61bb      	str	r3, [r7, #24]

			/* Divide by zero check. */
			if( ulTotalRunTime > 0UL )
 8023bb4:	687b      	ldr	r3, [r7, #4]
 8023bb6:	2b00      	cmp	r3, #0
 8023bb8:	d076      	beq.n	8023ca8 <prvGenerateRunTimeStatsForTasksInList+0x168>
			{
				/* Has the task run at all? */
				if( pxNextTCB->ulRunTimeCounter == 0UL )
 8023bba:	69bb      	ldr	r3, [r7, #24]
 8023bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023bbe:	2b00      	cmp	r3, #0
 8023bc0:	d11c      	bne.n	8023bfc <prvGenerateRunTimeStatsForTasksInList+0xbc>
				{
					/* The task has used no CPU time at all. */
					sprintf( pcStatsString, ( char * ) "%u  %c  %-16s          0   0%%  %5u\r\n", (unsigned int) pxNextTCB->uxPriority, cStatus, pxNextTCB->pcTaskName, usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack ));
 8023bc2:	69bb      	ldr	r3, [r7, #24]
 8023bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023bc6:	461d      	mov	r5, r3
 8023bc8:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8023bcc:	69bb      	ldr	r3, [r7, #24]
 8023bce:	f103 0634 	add.w	r6, r3, #52	; 0x34
 8023bd2:	69bb      	ldr	r3, [r7, #24]
 8023bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023bd6:	4618      	mov	r0, r3
 8023bd8:	f000 f870 	bl	8023cbc <usTaskCheckFreeStackSpace>
 8023bdc:	4603      	mov	r3, r0
 8023bde:	9600      	str	r6, [sp, #0]
 8023be0:	9301      	str	r3, [sp, #4]
 8023be2:	f640 303c 	movw	r0, #2876	; 0xb3c
 8023be6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023bea:	f645 61f4 	movw	r1, #24308	; 0x5ef4
 8023bee:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023bf2:	462a      	mov	r2, r5
 8023bf4:	4623      	mov	r3, r4
 8023bf6:	f7e4 f9c7 	bl	8007f88 <sprintf>
 8023bfa:	e04e      	b.n	8023c9a <prvGenerateRunTimeStatsForTasksInList+0x15a>
				else
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTime has already been divided by 100. */
					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
 8023bfc:	69bb      	ldr	r3, [r7, #24]
 8023bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023c00:	461a      	mov	r2, r3
 8023c02:	687b      	ldr	r3, [r7, #4]
 8023c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8023c08:	617b      	str	r3, [r7, #20]

					if( ulStatsAsPercentage > 0UL )
 8023c0a:	697b      	ldr	r3, [r7, #20]
 8023c0c:	2b00      	cmp	r3, #0
 8023c0e:	d023      	beq.n	8023c58 <prvGenerateRunTimeStatsForTasksInList+0x118>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u %3u%%  %5u\r\n", (unsigned int) pxNextTCB->uxPriority, cStatus, pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage, usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack ));
 8023c10:	69bb      	ldr	r3, [r7, #24]
 8023c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c14:	461d      	mov	r5, r3
 8023c16:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8023c1a:	69bb      	ldr	r3, [r7, #24]
 8023c1c:	f103 0834 	add.w	r8, r3, #52	; 0x34
 8023c20:	69bb      	ldr	r3, [r7, #24]
 8023c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023c24:	461e      	mov	r6, r3
 8023c26:	69bb      	ldr	r3, [r7, #24]
 8023c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c2a:	4618      	mov	r0, r3
 8023c2c:	f000 f846 	bl	8023cbc <usTaskCheckFreeStackSpace>
 8023c30:	4603      	mov	r3, r0
 8023c32:	f8cd 8000 	str.w	r8, [sp]
 8023c36:	9601      	str	r6, [sp, #4]
 8023c38:	697a      	ldr	r2, [r7, #20]
 8023c3a:	9202      	str	r2, [sp, #8]
 8023c3c:	9303      	str	r3, [sp, #12]
 8023c3e:	f640 303c 	movw	r0, #2876	; 0xb3c
 8023c42:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023c46:	f645 711c 	movw	r1, #24348	; 0x5f1c
 8023c4a:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023c4e:	462a      	mov	r2, r5
 8023c50:	4623      	mov	r3, r4
 8023c52:	f7e4 f999 	bl	8007f88 <sprintf>
 8023c56:	e020      	b.n	8023c9a <prvGenerateRunTimeStatsForTasksInList+0x15a>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u  <1%%  %5u\r\n",  (unsigned int) pxNextTCB->uxPriority, cStatus, pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack ));
 8023c58:	69bb      	ldr	r3, [r7, #24]
 8023c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c5c:	461d      	mov	r5, r3
 8023c5e:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8023c62:	69bb      	ldr	r3, [r7, #24]
 8023c64:	f103 0834 	add.w	r8, r3, #52	; 0x34
 8023c68:	69bb      	ldr	r3, [r7, #24]
 8023c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023c6c:	461e      	mov	r6, r3
 8023c6e:	69bb      	ldr	r3, [r7, #24]
 8023c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c72:	4618      	mov	r0, r3
 8023c74:	f000 f822 	bl	8023cbc <usTaskCheckFreeStackSpace>
 8023c78:	4603      	mov	r3, r0
 8023c7a:	f8cd 8000 	str.w	r8, [sp]
 8023c7e:	9601      	str	r6, [sp, #4]
 8023c80:	9302      	str	r3, [sp, #8]
 8023c82:	f640 303c 	movw	r0, #2876	; 0xb3c
 8023c86:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8023c8a:	f645 713c 	movw	r1, #24380	; 0x5f3c
 8023c8e:	f6c0 0102 	movt	r1, #2050	; 0x802
 8023c92:	462a      	mov	r2, r5
 8023c94:	4623      	mov	r3, r4
 8023c96:	f7e4 f977 	bl	8007f88 <sprintf>
						}
						#endif
					}
				}

				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
 8023c9a:	68f8      	ldr	r0, [r7, #12]
 8023c9c:	f640 313c 	movw	r1, #2876	; 0xb3c
 8023ca0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8023ca4:	f7e4 f998 	bl	8007fd8 <strcat>
			}

		} while( pxNextTCB != pxFirstTCB );
 8023ca8:	69ba      	ldr	r2, [r7, #24]
 8023caa:	6a3b      	ldr	r3, [r7, #32]
 8023cac:	429a      	cmp	r2, r3
 8023cae:	f47f af68 	bne.w	8023b82 <prvGenerateRunTimeStatsForTasksInList+0x42>
	}
 8023cb2:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8023cb6:	46bd      	mov	sp, r7
 8023cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023cbc <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
 8023cbc:	b490      	push	{r4, r7}
 8023cbe:	b082      	sub	sp, #8
 8023cc0:	af00      	add	r7, sp, #0
 8023cc2:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0U;
 8023cc4:	f04f 0400 	mov.w	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8023cc8:	e006      	b.n	8023cd8 <usTaskCheckFreeStackSpace+0x1c>
		{
			pucStackByte -= portSTACK_GROWTH;
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	f103 0301 	add.w	r3, r3, #1
 8023cd0:	607b      	str	r3, [r7, #4]
			usCount++;
 8023cd2:	f104 0301 	add.w	r3, r4, #1
 8023cd6:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8023cd8:	687b      	ldr	r3, [r7, #4]
 8023cda:	781b      	ldrb	r3, [r3, #0]
 8023cdc:	2ba5      	cmp	r3, #165	; 0xa5
 8023cde:	d0f4      	beq.n	8023cca <usTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
 8023ce0:	ea4f 0394 	mov.w	r3, r4, lsr #2
 8023ce4:	b29c      	uxth	r4, r3

		return usCount;
 8023ce6:	4623      	mov	r3, r4
	}
 8023ce8:	4618      	mov	r0, r3
 8023cea:	f107 0708 	add.w	r7, r7, #8
 8023cee:	46bd      	mov	sp, r7
 8023cf0:	bc90      	pop	{r4, r7}
 8023cf2:	4770      	bx	lr

08023cf4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
 8023cf4:	b580      	push	{r7, lr}
 8023cf6:	b086      	sub	sp, #24
 8023cf8:	af00      	add	r7, sp, #0
 8023cfa:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8023cfc:	687b      	ldr	r3, [r7, #4]
 8023cfe:	2b00      	cmp	r3, #0
 8023d00:	d105      	bne.n	8023d0e <uxTaskGetStackHighWaterMark+0x1a>
 8023d02:	f640 2338 	movw	r3, #2616	; 0xa38
 8023d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023d0a:	681b      	ldr	r3, [r3, #0]
 8023d0c:	e000      	b.n	8023d10 <uxTaskGetStackHighWaterMark+0x1c>
 8023d0e:	687b      	ldr	r3, [r7, #4]
 8023d10:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 8023d12:	697b      	ldr	r3, [r7, #20]
 8023d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d16:	613b      	str	r3, [r7, #16]
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
 8023d18:	6938      	ldr	r0, [r7, #16]
 8023d1a:	f7ff ffcf 	bl	8023cbc <usTaskCheckFreeStackSpace>
 8023d1e:	4603      	mov	r3, r0
 8023d20:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8023d22:	68fb      	ldr	r3, [r7, #12]
	}
 8023d24:	4618      	mov	r0, r3
 8023d26:	f107 0718 	add.w	r7, r7, #24
 8023d2a:	46bd      	mov	sp, r7
 8023d2c:	bd80      	pop	{r7, pc}
 8023d2e:	bf00      	nop

08023d30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8023d30:	b580      	push	{r7, lr}
 8023d32:	b082      	sub	sp, #8
 8023d34:	af00      	add	r7, sp, #0
 8023d36:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8023d38:	687b      	ldr	r3, [r7, #4]
 8023d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d3c:	4618      	mov	r0, r3
 8023d3e:	f7e3 f9c1 	bl	80070c4 <free>
		vPortFree( pxTCB );
 8023d42:	6878      	ldr	r0, [r7, #4]
 8023d44:	f7e3 f9be 	bl	80070c4 <free>
	}
 8023d48:	f107 0708 	add.w	r7, r7, #8
 8023d4c:	46bd      	mov	sp, r7
 8023d4e:	bd80      	pop	{r7, pc}

08023d50 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8023d50:	b480      	push	{r7}
 8023d52:	b083      	sub	sp, #12
 8023d54:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8023d56:	f640 2338 	movw	r3, #2616	; 0xa38
 8023d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023d5e:	681b      	ldr	r3, [r3, #0]
 8023d60:	607b      	str	r3, [r7, #4]

		return xReturn;
 8023d62:	687b      	ldr	r3, [r7, #4]
	}
 8023d64:	4618      	mov	r0, r3
 8023d66:	f107 070c 	add.w	r7, r7, #12
 8023d6a:	46bd      	mov	sp, r7
 8023d6c:	bc80      	pop	{r7}
 8023d6e:	4770      	bx	lr

08023d70 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8023d70:	b580      	push	{r7, lr}
 8023d72:	b084      	sub	sp, #16
 8023d74:	af00      	add	r7, sp, #0
 8023d76:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8023d78:	687b      	ldr	r3, [r7, #4]
 8023d7a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8023d7c:	68fb      	ldr	r3, [r7, #12]
 8023d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023d80:	f640 2338 	movw	r3, #2616	; 0xa38
 8023d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023d88:	681b      	ldr	r3, [r3, #0]
 8023d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d8c:	429a      	cmp	r2, r3
 8023d8e:	d257      	bcs.n	8023e40 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8023d90:	f640 2338 	movw	r3, #2616	; 0xa38
 8023d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023d98:	681b      	ldr	r3, [r3, #0]
 8023d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d9c:	f1c3 0205 	rsb	r2, r3, #5
 8023da0:	68fb      	ldr	r3, [r7, #12]
 8023da2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8023da4:	68fb      	ldr	r3, [r7, #12]
 8023da6:	6959      	ldr	r1, [r3, #20]
 8023da8:	68fb      	ldr	r3, [r7, #12]
 8023daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023dac:	4613      	mov	r3, r2
 8023dae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023db2:	189b      	adds	r3, r3, r2
 8023db4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023db8:	461a      	mov	r2, r3
 8023dba:	f640 233c 	movw	r3, #2620	; 0xa3c
 8023dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023dc2:	18d3      	adds	r3, r2, r3
 8023dc4:	4299      	cmp	r1, r3
 8023dc6:	d133      	bne.n	8023e30 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8023dc8:	68fb      	ldr	r3, [r7, #12]
 8023dca:	f103 0304 	add.w	r3, r3, #4
 8023dce:	4618      	mov	r0, r3
 8023dd0:	f7fe f87a 	bl	8021ec8 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8023dd4:	f640 2338 	movw	r3, #2616	; 0xa38
 8023dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023ddc:	681b      	ldr	r3, [r3, #0]
 8023dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023de0:	68fb      	ldr	r3, [r7, #12]
 8023de2:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8023de4:	68fb      	ldr	r3, [r7, #12]
 8023de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023de8:	f640 3320 	movw	r3, #2848	; 0xb20
 8023dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023df0:	681b      	ldr	r3, [r3, #0]
 8023df2:	429a      	cmp	r2, r3
 8023df4:	d906      	bls.n	8023e04 <vTaskPriorityInherit+0x94>
 8023df6:	68fb      	ldr	r3, [r7, #12]
 8023df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023dfa:	f640 3320 	movw	r3, #2848	; 0xb20
 8023dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023e02:	601a      	str	r2, [r3, #0]
 8023e04:	68fb      	ldr	r3, [r7, #12]
 8023e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023e08:	4613      	mov	r3, r2
 8023e0a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023e0e:	189b      	adds	r3, r3, r2
 8023e10:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023e14:	461a      	mov	r2, r3
 8023e16:	f640 233c 	movw	r3, #2620	; 0xa3c
 8023e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023e1e:	18d2      	adds	r2, r2, r3
 8023e20:	68fb      	ldr	r3, [r7, #12]
 8023e22:	f103 0304 	add.w	r3, r3, #4
 8023e26:	4610      	mov	r0, r2
 8023e28:	4619      	mov	r1, r3
 8023e2a:	f7fd ffe7 	bl	8021dfc <vListInsertEnd>
 8023e2e:	e007      	b.n	8023e40 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8023e30:	f640 2338 	movw	r3, #2616	; 0xa38
 8023e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023e38:	681b      	ldr	r3, [r3, #0]
 8023e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023e3c:	68fb      	ldr	r3, [r7, #12]
 8023e3e:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}
 8023e40:	f107 0710 	add.w	r7, r7, #16
 8023e44:	46bd      	mov	sp, r7
 8023e46:	bd80      	pop	{r7, pc}

08023e48 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8023e48:	b580      	push	{r7, lr}
 8023e4a:	b084      	sub	sp, #16
 8023e4c:	af00      	add	r7, sp, #0
 8023e4e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8023e50:	687b      	ldr	r3, [r7, #4]
 8023e52:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8023e54:	687b      	ldr	r3, [r7, #4]
 8023e56:	2b00      	cmp	r3, #0
 8023e58:	d03a      	beq.n	8023ed0 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8023e5a:	68fb      	ldr	r3, [r7, #12]
 8023e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023e5e:	68fb      	ldr	r3, [r7, #12]
 8023e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023e62:	429a      	cmp	r2, r3
 8023e64:	d034      	beq.n	8023ed0 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 8023e66:	68fb      	ldr	r3, [r7, #12]
 8023e68:	f103 0304 	add.w	r3, r3, #4
 8023e6c:	4618      	mov	r0, r3
 8023e6e:	f7fe f82b 	bl	8021ec8 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8023e72:	68fb      	ldr	r3, [r7, #12]
 8023e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8023e76:	68fb      	ldr	r3, [r7, #12]
 8023e78:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8023e7a:	68fb      	ldr	r3, [r7, #12]
 8023e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023e7e:	f1c3 0205 	rsb	r2, r3, #5
 8023e82:	68fb      	ldr	r3, [r7, #12]
 8023e84:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 8023e86:	68fb      	ldr	r3, [r7, #12]
 8023e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023e8a:	f640 3320 	movw	r3, #2848	; 0xb20
 8023e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023e92:	681b      	ldr	r3, [r3, #0]
 8023e94:	429a      	cmp	r2, r3
 8023e96:	d906      	bls.n	8023ea6 <vTaskPriorityDisinherit+0x5e>
 8023e98:	68fb      	ldr	r3, [r7, #12]
 8023e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023e9c:	f640 3320 	movw	r3, #2848	; 0xb20
 8023ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023ea4:	601a      	str	r2, [r3, #0]
 8023ea6:	68fb      	ldr	r3, [r7, #12]
 8023ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023eaa:	4613      	mov	r3, r2
 8023eac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023eb0:	189b      	adds	r3, r3, r2
 8023eb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023eb6:	461a      	mov	r2, r3
 8023eb8:	f640 233c 	movw	r3, #2620	; 0xa3c
 8023ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8023ec0:	18d2      	adds	r2, r2, r3
 8023ec2:	68fb      	ldr	r3, [r7, #12]
 8023ec4:	f103 0304 	add.w	r3, r3, #4
 8023ec8:	4610      	mov	r0, r2
 8023eca:	4619      	mov	r1, r3
 8023ecc:	f7fd ff96 	bl	8021dfc <vListInsertEnd>
			}
		}
	}
 8023ed0:	f107 0710 	add.w	r7, r7, #16
 8023ed4:	46bd      	mov	sp, r7
 8023ed6:	bd80      	pop	{r7, pc}

08023ed8 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
 8023ed8:	b580      	push	{r7, lr}
 8023eda:	b082      	sub	sp, #8
 8023edc:	af00      	add	r7, sp, #0
 8023ede:	6078      	str	r0, [r7, #4]
 8023ee0:	6039      	str	r1, [r7, #0]
 8023ee2:	687b      	ldr	r3, [r7, #4]
 8023ee4:	4618      	mov	r0, r3
 8023ee6:	f7fc f9df 	bl	80202a8 <_ZN12AManagedTaskC1Ev>
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	4a07      	ldr	r2, [pc, #28]	; (8023f0c <_ZN24CLedHeartBeatSTM32F4DiscC1Em+0x34>)
 8023eee:	601a      	str	r2, [r3, #0]
	ledState = LED_Up;
 8023ef0:	687b      	ldr	r3, [r7, #4]
 8023ef2:	f04f 0200 	mov.w	r2, #0
 8023ef6:	731a      	strb	r2, [r3, #12]
	ledRate = newRate;
 8023ef8:	687b      	ldr	r3, [r7, #4]
 8023efa:	683a      	ldr	r2, [r7, #0]
 8023efc:	611a      	str	r2, [r3, #16]
}
 8023efe:	687b      	ldr	r3, [r7, #4]
 8023f00:	4618      	mov	r0, r3
 8023f02:	f107 0708 	add.w	r7, r7, #8
 8023f06:	46bd      	mov	sp, r7
 8023f08:	bd80      	pop	{r7, pc}
 8023f0a:	bf00      	nop
 8023f0c:	080282d0 	.word	0x080282d0

08023f10 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>:

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 8023f10:	b580      	push	{r7, lr}
 8023f12:	b082      	sub	sp, #8
 8023f14:	af00      	add	r7, sp, #0
 8023f16:	6078      	str	r0, [r7, #4]
 8023f18:	687b      	ldr	r3, [r7, #4]
 8023f1a:	4a0a      	ldr	r2, [pc, #40]	; (8023f44 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x34>)
 8023f1c:	601a      	str	r2, [r3, #0]
	// nothing to destroy
}
 8023f1e:	6878      	ldr	r0, [r7, #4]
 8023f20:	f7fc f9de 	bl	80202e0 <_ZN12AManagedTaskD1Ev>
 8023f24:	f04f 0300 	mov.w	r3, #0
 8023f28:	f003 0301 	and.w	r3, r3, #1
 8023f2c:	b2db      	uxtb	r3, r3
 8023f2e:	2b00      	cmp	r3, #0
 8023f30:	d002      	beq.n	8023f38 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev+0x28>
 8023f32:	6878      	ldr	r0, [r7, #4]
 8023f34:	f000 fd7c 	bl	8024a30 <_ZdlPv>
 8023f38:	687b      	ldr	r3, [r7, #4]
 8023f3a:	4618      	mov	r0, r3
 8023f3c:	f107 0708 	add.w	r7, r7, #8
 8023f40:	46bd      	mov	sp, r7
 8023f42:	bd80      	pop	{r7, pc}
 8023f44:	080282d0 	.word	0x080282d0

08023f48 <_ZN24CLedHeartBeatSTM32F4DiscD0Ev>:
CLedHeartBeatSTM32F4Disc::CLedHeartBeatSTM32F4Disc(portTickType newRate) {
	ledState = LED_Up;
	ledRate = newRate;
}

CLedHeartBeatSTM32F4Disc::~CLedHeartBeatSTM32F4Disc() {
 8023f48:	b580      	push	{r7, lr}
 8023f4a:	b082      	sub	sp, #8
 8023f4c:	af00      	add	r7, sp, #0
 8023f4e:	6078      	str	r0, [r7, #4]
	// nothing to destroy
}
 8023f50:	6878      	ldr	r0, [r7, #4]
 8023f52:	f7ff ffdd 	bl	8023f10 <_ZN24CLedHeartBeatSTM32F4DiscD1Ev>
 8023f56:	6878      	ldr	r0, [r7, #4]
 8023f58:	f000 fd6a 	bl	8024a30 <_ZdlPv>
 8023f5c:	687b      	ldr	r3, [r7, #4]
 8023f5e:	4618      	mov	r0, r3
 8023f60:	f107 0708 	add.w	r7, r7, #8
 8023f64:	46bd      	mov	sp, r7
 8023f66:	bd80      	pop	{r7, pc}

08023f68 <_ZN24CLedHeartBeatSTM32F4Disc12HardwareInitEv>:
/**
  * @brief  HardwareInit called before Scheduler starts
  * @param  None
  * @retval true on succsess
  */
bool CLedHeartBeatSTM32F4Disc::HardwareInit(){
 8023f68:	b580      	push	{r7, lr}
 8023f6a:	b082      	sub	sp, #8
 8023f6c:	af00      	add	r7, sp, #0
 8023f6e:	6078      	str	r0, [r7, #4]

	STM_EVAL_LEDInit(LED3);
 8023f70:	f04f 0001 	mov.w	r0, #1
 8023f74:	f7f8 fef6 	bl	801cd64 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8023f78:	f04f 0000 	mov.w	r0, #0
 8023f7c:	f7f8 fef2 	bl	801cd64 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 8023f80:	f04f 0002 	mov.w	r0, #2
 8023f84:	f7f8 feee 	bl	801cd64 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8023f88:	f04f 0003 	mov.w	r0, #3
 8023f8c:	f7f8 feea 	bl	801cd64 <STM_EVAL_LEDInit>
	return true;
 8023f90:	f04f 0301 	mov.w	r3, #1
}
 8023f94:	4618      	mov	r0, r3
 8023f96:	f107 0708 	add.w	r7, r7, #8
 8023f9a:	46bd      	mov	sp, r7
 8023f9c:	bd80      	pop	{r7, pc}
 8023f9e:	bf00      	nop

08023fa0 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv>:
/**
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
 8023fa0:	b580      	push	{r7, lr}
 8023fa2:	b082      	sub	sp, #8
 8023fa4:	af00      	add	r7, sp, #0
 8023fa6:	6078      	str	r0, [r7, #4]
	while(1){
		switch(ledState){
 8023fa8:	687b      	ldr	r3, [r7, #4]
 8023faa:	7b1b      	ldrb	r3, [r3, #12]
 8023fac:	2b03      	cmp	r3, #3
 8023fae:	d85f      	bhi.n	8024070 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xd0>
 8023fb0:	a201      	add	r2, pc, #4	; (adr r2, 8023fb8 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x18>)
 8023fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023fb6:	bf00      	nop
 8023fb8:	08023fc9 	.word	0x08023fc9
 8023fbc:	08023ff3 	.word	0x08023ff3
 8023fc0:	0802401d 	.word	0x0802401d
 8023fc4:	08024047 	.word	0x08024047
		case LED_Up:
			STM_EVAL_LEDOn(LED3);
 8023fc8:	f04f 0001 	mov.w	r0, #1
 8023fcc:	f7f8 ff00 	bl	801cdd0 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED5);
 8023fd0:	f04f 0002 	mov.w	r0, #2
 8023fd4:	f7f8 ff16 	bl	801ce04 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 8023fd8:	f04f 0003 	mov.w	r0, #3
 8023fdc:	f7f8 ff12 	bl	801ce04 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 8023fe0:	f04f 0000 	mov.w	r0, #0
 8023fe4:	f7f8 ff0e 	bl	801ce04 <STM_EVAL_LEDOff>
			ledState = LED_Right;
 8023fe8:	687b      	ldr	r3, [r7, #4]
 8023fea:	f04f 0201 	mov.w	r2, #1
 8023fee:	731a      	strb	r2, [r3, #12]
			break;
 8023ff0:	e043      	b.n	802407a <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Right:
			STM_EVAL_LEDOff(LED3);
 8023ff2:	f04f 0001 	mov.w	r0, #1
 8023ff6:	f7f8 ff05 	bl	801ce04 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED5);
 8023ffa:	f04f 0002 	mov.w	r0, #2
 8023ffe:	f7f8 fee7 	bl	801cdd0 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED6);
 8024002:	f04f 0003 	mov.w	r0, #3
 8024006:	f7f8 fefd 	bl	801ce04 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED4);
 802400a:	f04f 0000 	mov.w	r0, #0
 802400e:	f7f8 fef9 	bl	801ce04 <STM_EVAL_LEDOff>
			ledState = LED_Down;
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	f04f 0202 	mov.w	r2, #2
 8024018:	731a      	strb	r2, [r3, #12]
			break;
 802401a:	e02e      	b.n	802407a <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Down:
			STM_EVAL_LEDOff(LED3);
 802401c:	f04f 0001 	mov.w	r0, #1
 8024020:	f7f8 fef0 	bl	801ce04 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 8024024:	f04f 0002 	mov.w	r0, #2
 8024028:	f7f8 feec 	bl	801ce04 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED6);
 802402c:	f04f 0003 	mov.w	r0, #3
 8024030:	f7f8 fece 	bl	801cdd0 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED4);
 8024034:	f04f 0000 	mov.w	r0, #0
 8024038:	f7f8 fee4 	bl	801ce04 <STM_EVAL_LEDOff>
			ledState = LED_Left;
 802403c:	687b      	ldr	r3, [r7, #4]
 802403e:	f04f 0203 	mov.w	r2, #3
 8024042:	731a      	strb	r2, [r3, #12]
			break;
 8024044:	e019      	b.n	802407a <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		case LED_Left:
			STM_EVAL_LEDOff(LED3);
 8024046:	f04f 0001 	mov.w	r0, #1
 802404a:	f7f8 fedb 	bl	801ce04 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED5);
 802404e:	f04f 0002 	mov.w	r0, #2
 8024052:	f7f8 fed7 	bl	801ce04 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOff(LED6);
 8024056:	f04f 0003 	mov.w	r0, #3
 802405a:	f7f8 fed3 	bl	801ce04 <STM_EVAL_LEDOff>
			STM_EVAL_LEDOn(LED4);
 802405e:	f04f 0000 	mov.w	r0, #0
 8024062:	f7f8 feb5 	bl	801cdd0 <STM_EVAL_LEDOn>
			ledState = LED_Up;
 8024066:	687b      	ldr	r3, [r7, #4]
 8024068:	f04f 0200 	mov.w	r2, #0
 802406c:	731a      	strb	r2, [r3, #12]
			break;
 802406e:	e004      	b.n	802407a <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0xda>
		default:
			ledState = LED_Up;
 8024070:	687b      	ldr	r3, [r7, #4]
 8024072:	f04f 0200 	mov.w	r2, #0
 8024076:	731a      	strb	r2, [r3, #12]
			break;
 8024078:	bf00      	nop
		}
		vTaskDelay(ledRate); // 500ms delay
 802407a:	687b      	ldr	r3, [r7, #4]
 802407c:	691b      	ldr	r3, [r3, #16]
 802407e:	4618      	mov	r0, r3
 8024080:	f7fe fcda 	bl	8022a38 <vTaskDelay>
  * @brief  task function for Led Heartbeat
  * @param  None
  * @retval None
  */
void CLedHeartBeatSTM32F4Disc::Run(){
	while(1){
 8024084:	e790      	b.n	8023fa8 <_ZN24CLedHeartBeatSTM32F4Disc3RunEv+0x8>
 8024086:	bf00      	nop

08024088 <_ZN9CFreeRTOS14StartSchedulerEv>:
	~CFreeRTOS();

	/**
	 * \sa <a href="http://www.freertos.org/a00132.html">vTaskStartScheduler</a> FreeRTOS API function.
	 */
	static void StartScheduler() { vTaskStartScheduler(); }
 8024088:	b580      	push	{r7, lr}
 802408a:	af00      	add	r7, sp, #0
 802408c:	f7fe fef2 	bl	8022e74 <vTaskStartScheduler>
 8024090:	bd80      	pop	{r7, pc}
 8024092:	bf00      	nop

08024094 <main>:
/**
  * @brief  main function
  * @param  None
  * @retval None
  */
int main(void){
 8024094:	b580      	push	{r7, lr}
 8024096:	b082      	sub	sp, #8
 8024098:	af00      	add	r7, sp, #0

	/**
	 * create Led Heartbeat task with minimal stack size and priority
	 * 1 higher than idle task
	 */
	g_LedTast.Create("Led Heartbeat",configMINIMAL_STACK_SIZE,tskIDLE_PRIORITY+2);
 802409a:	f640 3074 	movw	r0, #2932	; 0xb74
 802409e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80240a2:	f645 715c 	movw	r1, #24412	; 0x5f5c
 80240a6:	f6c0 0102 	movt	r1, #2050	; 0x802
 80240aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80240ae:	f04f 0302 	mov.w	r3, #2
 80240b2:	f7fc f945 	bl	8020340 <_ZN12AManagedTask6CreateEPKctm>
	g_Menue.Create("Menue",configMINIMAL_STACK_SIZE * 2,tskIDLE_PRIORITY+1);
 80240b6:	f640 3090 	movw	r0, #2960	; 0xb90
 80240ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80240be:	f645 716c 	movw	r1, #24428	; 0x5f6c
 80240c2:	f6c0 0102 	movt	r1, #2050	; 0x802
 80240c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80240ca:	f04f 0301 	mov.w	r3, #1
 80240ce:	f7fc f937 	bl	8020340 <_ZN12AManagedTask6CreateEPKctm>
	/**
	 * Initialise the hardware for all Tasks and
	 * then FreeRTOS takes control of execution
	 */
	CFreeRTOS::InitHardwareForManagedTasks();
 80240d2:	f7fc fc95 	bl	8020a00 <_ZN9CFreeRTOS27InitHardwareForManagedTasksEv>
	CFreeRTOS::StartScheduler();
 80240d6:	f7ff ffd7 	bl	8024088 <_ZN9CFreeRTOS14StartSchedulerEv>

	while(1){
		u++;
 80240da:	687b      	ldr	r3, [r7, #4]
 80240dc:	f103 0301 	add.w	r3, r3, #1
 80240e0:	607b      	str	r3, [r7, #4]
	 * then FreeRTOS takes control of execution
	 */
	CFreeRTOS::InitHardwareForManagedTasks();
	CFreeRTOS::StartScheduler();

	while(1){
 80240e2:	e7fa      	b.n	80240da <main+0x46>

080240e4 <vApplicationTickHook>:

extern "C" {

	// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
	// ----------------------------------------------------------------------------
	void vApplicationTickHook( void ) {
 80240e4:	b480      	push	{r7}
 80240e6:	af00      	add	r7, sp, #0

	}
 80240e8:	46bd      	mov	sp, r7
 80240ea:	bc80      	pop	{r7}
 80240ec:	4770      	bx	lr
 80240ee:	bf00      	nop

080240f0 <vApplicationIdleHook>:

	// This FreeRTOS call-back function gets when no other task is ready to execute.
	// On a completely unloaded system this is getting called at over 2.5MHz!
	// ----------------------------------------------------------------------------
	void vApplicationIdleHook( void ) {
 80240f0:	b480      	push	{r7}
 80240f2:	af00      	add	r7, sp, #0

	}
 80240f4:	46bd      	mov	sp, r7
 80240f6:	bc80      	pop	{r7}
 80240f8:	4770      	bx	lr
 80240fa:	bf00      	nop

080240fc <vApplicationMallocFailedHook>:

	// A required FreeRTOS function.
	// ----------------------------------------------------------------------------
	void vApplicationMallocFailedHook( void ) {
 80240fc:	b480      	push	{r7}
 80240fe:	af00      	add	r7, sp, #0
		configASSERT( 0 );  // Latch on any failure / error.
	}
 8024100:	46bd      	mov	sp, r7
 8024102:	bc80      	pop	{r7}
 8024104:	4770      	bx	lr
 8024106:	bf00      	nop

08024108 <vApplicationStackOverflowHook>:

	// A required FreeRTOS function. gets called on stack overflow
	// ----------------------------------------------------------------------------
	void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName ){
 8024108:	b480      	push	{r7}
 802410a:	b083      	sub	sp, #12
 802410c:	af00      	add	r7, sp, #0
 802410e:	6078      	str	r0, [r7, #4]
 8024110:	6039      	str	r1, [r7, #0]
		/* TODO, implement your code here */
		while(1);
 8024112:	e7fe      	b.n	8024112 <vApplicationStackOverflowHook+0xa>

08024114 <EVAL_AUDIO_GetSampleCallBack>:
	}

	/* User Callbacks: user has to implement these functions in his code if
	  they are needed. -----------------------------------------------------------*/

	uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8024114:	b480      	push	{r7}
 8024116:	af00      	add	r7, sp, #0
		return -1;
 8024118:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
 802411c:	4618      	mov	r0, r3
 802411e:	46bd      	mov	sp, r7
 8024120:	bc80      	pop	{r7}
 8024122:	4770      	bx	lr

08024124 <EVAL_AUDIO_TransferComplete_CallBack>:
	/* This function is called when the requested data has been completely transferred.
	   In Normal mode (when  the define AUDIO_MAL_MODE_NORMAL is enabled) this function
	   is called at the end of the whole audio file.
	   In circular mode (when  the define AUDIO_MAL_MODE_CIRCULAR is enabled) this
	   function is called at the end of the current buffer transmission. */
	void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8024124:	b480      	push	{r7}
 8024126:	b083      	sub	sp, #12
 8024128:	af00      	add	r7, sp, #0
 802412a:	6078      	str	r0, [r7, #4]
 802412c:	6039      	str	r1, [r7, #0]

	}
 802412e:	f107 070c 	add.w	r7, r7, #12
 8024132:	46bd      	mov	sp, r7
 8024134:	bc80      	pop	{r7}
 8024136:	4770      	bx	lr

08024138 <EVAL_AUDIO_HalfTransfer_CallBack>:

	/* This function is called when half of the requested buffer has been transferred
	   This callback is useful in Circular mode only (when AUDIO_MAL_MODE_CIRCULAR
	   define is enabled)*/
	void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size){
 8024138:	b480      	push	{r7}
 802413a:	b083      	sub	sp, #12
 802413c:	af00      	add	r7, sp, #0
 802413e:	6078      	str	r0, [r7, #4]
 8024140:	6039      	str	r1, [r7, #0]

	}
 8024142:	f107 070c 	add.w	r7, r7, #12
 8024146:	46bd      	mov	sp, r7
 8024148:	bc80      	pop	{r7}
 802414a:	4770      	bx	lr

0802414c <EVAL_AUDIO_Error_CallBack>:

	/* This function is called when an Interrupt due to transfer error on or peripheral
	   error occurs. */
	void EVAL_AUDIO_Error_CallBack(void* pData){
 802414c:	b480      	push	{r7}
 802414e:	b083      	sub	sp, #12
 8024150:	af00      	add	r7, sp, #0
 8024152:	6078      	str	r0, [r7, #4]

	}
 8024154:	f107 070c 	add.w	r7, r7, #12
 8024158:	46bd      	mov	sp, r7
 802415a:	bc80      	pop	{r7}
 802415c:	4770      	bx	lr
 802415e:	bf00      	nop

08024160 <Codec_TIMEOUT_UserCallback>:
	   errors, busy devices ...) on the Codec control interface (I2C).
	   You can use the default timeout callback implementation by uncommenting the
	   define USE_DEFAULT_TIMEOUT_CALLBACK in stm32f4_discovery_audio_codec.h file.
	   Typically the user implementation of this callback should reset I2C peripheral
	   and re-initialize communication or in worst case reset all the application. */
	uint32_t Codec_TIMEOUT_UserCallback(void){
 8024160:	b480      	push	{r7}
 8024162:	af00      	add	r7, sp, #0
		return -1;
 8024164:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8024168:	4618      	mov	r0, r3
 802416a:	46bd      	mov	sp, r7
 802416c:	bc80      	pop	{r7}
 802416e:	4770      	bx	lr

08024170 <LIS302DL_TIMEOUT_UserCallback>:
	   or waiting receive data register is not empty flag (RXNE)).
	   You can use the default timeout callback implementation by uncommenting the
	   define USE_DEFAULT_TIMEOUT_CALLBACK in stm32f4_discovery_lis302dl.h file.
	   Typically the user implementation of this callback should reset MEMS peripheral
	   and re-initialize communication or in worst case reset all the application. */
	uint32_t LIS302DL_TIMEOUT_UserCallback(void){
 8024170:	b480      	push	{r7}
 8024172:	af00      	add	r7, sp, #0
		return -1;
 8024174:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8024178:	4618      	mov	r0, r3
 802417a:	46bd      	mov	sp, r7
 802417c:	bc80      	pop	{r7}
 802417e:	4770      	bx	lr

08024180 <_Z41__static_initialization_and_destruction_0ii>:
} // extern "C"
 8024180:	b580      	push	{r7, lr}
 8024182:	b082      	sub	sp, #8
 8024184:	af00      	add	r7, sp, #0
 8024186:	6078      	str	r0, [r7, #4]
 8024188:	6039      	str	r1, [r7, #0]
 802418a:	687b      	ldr	r3, [r7, #4]
 802418c:	2b01      	cmp	r3, #1
 802418e:	d149      	bne.n	8024224 <_Z41__static_initialization_and_destruction_0ii+0xa4>
 8024190:	683a      	ldr	r2, [r7, #0]
 8024192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024196:	429a      	cmp	r2, r3
 8024198:	d144      	bne.n	8024224 <_Z41__static_initialization_and_destruction_0ii+0xa4>

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
CLedHeartBeatSTM32F4Disc g_LedTast(500/portTICK_RATE_MS);
 802419a:	f640 3074 	movw	r0, #2932	; 0xb74
 802419e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80241a2:	f04f 0132 	mov.w	r1, #50	; 0x32
 80241a6:	f7ff fe97 	bl	8023ed8 <_ZN24CLedHeartBeatSTM32F4DiscC1Em>
 80241aa:	f643 7311 	movw	r3, #16145	; 0x3f11
 80241ae:	f6c0 0302 	movt	r3, #2050	; 0x802
 80241b2:	f640 3074 	movw	r0, #2932	; 0xb74
 80241b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80241ba:	4619      	mov	r1, r3
 80241bc:	f240 0200 	movw	r2, #0
 80241c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80241c4:	f000 fc2e 	bl	8024a24 <__aeabi_atexit>
CT6963_GPIO_Interface g_Display;
 80241c8:	f640 3088 	movw	r0, #2952	; 0xb88
 80241cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80241d0:	f7fb fde8 	bl	801fda4 <_ZN21CT6963_GPIO_InterfaceC1Ev>
 80241d4:	f64f 53cd 	movw	r3, #64973	; 0xfdcd
 80241d8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80241dc:	f640 3088 	movw	r0, #2952	; 0xb88
 80241e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80241e4:	4619      	mov	r1, r3
 80241e6:	f240 0200 	movw	r2, #0
 80241ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80241ee:	f000 fc19 	bl	8024a24 <__aeabi_atexit>
CMenue	g_Menue(&g_Display);
 80241f2:	f640 3090 	movw	r0, #2960	; 0xb90
 80241f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80241fa:	f640 3188 	movw	r1, #2952	; 0xb88
 80241fe:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8024202:	f7fa fe0f 	bl	801ee24 <_ZN6CMenueC1EP11CGraphicLCD>
 8024206:	f64e 6355 	movw	r3, #61013	; 0xee55
 802420a:	f6c0 0301 	movt	r3, #2049	; 0x801
 802420e:	f640 3090 	movw	r0, #2960	; 0xb90
 8024212:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8024216:	4619      	mov	r1, r3
 8024218:	f240 0200 	movw	r2, #0
 802421c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8024220:	f000 fc00 	bl	8024a24 <__aeabi_atexit>
	   Typically the user implementation of this callback should reset MEMS peripheral
	   and re-initialize communication or in worst case reset all the application. */
	uint32_t LIS302DL_TIMEOUT_UserCallback(void){
		return -1;
	}
} // extern "C"
 8024224:	f107 0708 	add.w	r7, r7, #8
 8024228:	46bd      	mov	sp, r7
 802422a:	bd80      	pop	{r7, pc}

0802422c <_GLOBAL__sub_I_g_LedTast>:
 802422c:	b580      	push	{r7, lr}
 802422e:	af00      	add	r7, sp, #0
 8024230:	f04f 0001 	mov.w	r0, #1
 8024234:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8024238:	f7ff ffa2 	bl	8024180 <_Z41__static_initialization_and_destruction_0ii>
 802423c:	bd80      	pop	{r7, pc}
 802423e:	bf00      	nop

08024240 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8024240:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8024242:	e003      	b.n	802424c <LoopCopyDataInit>

08024244 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8024244:	4b0e      	ldr	r3, [pc, #56]	; (8024280 <LoopFillZerobss+0x20>)
  ldr  r3, [r3, r1]
 8024246:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8024248:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802424a:	3104      	adds	r1, #4

0802424c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 802424c:	480d      	ldr	r0, [pc, #52]	; (8024284 <LoopFillZerobss+0x24>)
  ldr  r3, =_edata
 802424e:	4b0e      	ldr	r3, [pc, #56]	; (8024288 <LoopFillZerobss+0x28>)
  adds  r2, r0, r1
 8024250:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8024252:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8024254:	d3f6      	bcc.n	8024244 <CopyDataInit>
  ldr  r2, =_sbss
 8024256:	4a0d      	ldr	r2, [pc, #52]	; (802428c <LoopFillZerobss+0x2c>)
  b  LoopFillZerobss
 8024258:	e002      	b.n	8024260 <LoopFillZerobss>

0802425a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802425a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 802425c:	f842 3b04 	str.w	r3, [r2], #4

08024260 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8024260:	4b0b      	ldr	r3, [pc, #44]	; (8024290 <LoopFillZerobss+0x30>)
  cmp  r2, r3
 8024262:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8024264:	d3f9      	bcc.n	802425a <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8024266:	480b      	ldr	r0, [pc, #44]	; (8024294 <LoopFillZerobss+0x34>)
 ldr     r1,[r0]
 8024268:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 802426a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 802426e:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8024270:	f000 f928 	bl	80244c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8024274:	f7e2 fefa 	bl	800706c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8024278:	f7ff ff0c 	bl	8024094 <main>
  bx  lr    
 802427c:	4770      	bx	lr
 802427e:	0000      	.short	0x0000
 8024280:	08029050 	.word	0x08029050
 8024284:	20000000 	.word	0x20000000
 8024288:	2000094c 	.word	0x2000094c
 802428c:	20000950 	.word	0x20000950
 8024290:	20001634 	.word	0x20001634
 8024294:	e000ed88 	.word	0xe000ed88

08024298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8024298:	e7fe      	b.n	8024298 <ADC_IRQHandler>
	...

0802429c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 802429c:	b480      	push	{r7}
 802429e:	af00      	add	r7, sp, #0
}
 80242a0:	46bd      	mov	sp, r7
 80242a2:	bc80      	pop	{r7}
 80242a4:	4770      	bx	lr
 80242a6:	bf00      	nop

080242a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80242a8:	b480      	push	{r7}
 80242aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {}
 80242ac:	e7fe      	b.n	80242ac <HardFault_Handler+0x4>
 80242ae:	bf00      	nop

080242b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80242b0:	b480      	push	{r7}
 80242b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {}
 80242b4:	e7fe      	b.n	80242b4 <MemManage_Handler+0x4>
 80242b6:	bf00      	nop

080242b8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80242b8:	b480      	push	{r7}
 80242ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {}
 80242bc:	e7fe      	b.n	80242bc <BusFault_Handler+0x4>
 80242be:	bf00      	nop

080242c0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80242c0:	b480      	push	{r7}
 80242c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {}
 80242c4:	e7fe      	b.n	80242c4 <UsageFault_Handler+0x4>
 80242c6:	bf00      	nop

080242c8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{}
 80242c8:	b480      	push	{r7}
 80242ca:	af00      	add	r7, sp, #0
 80242cc:	46bd      	mov	sp, r7
 80242ce:	bc80      	pop	{r7}
 80242d0:	4770      	bx	lr
 80242d2:	bf00      	nop

080242d4 <_exit>:

size_t   __malloc_margin = 256;
char    *__brkval;

void _exit(int code)
{
 80242d4:	b480      	push	{r7}
 80242d6:	b083      	sub	sp, #12
 80242d8:	af00      	add	r7, sp, #0
 80242da:	6078      	str	r0, [r7, #4]
    for (;;);
 80242dc:	e7fe      	b.n	80242dc <_exit+0x8>
 80242de:	bf00      	nop

080242e0 <_read_r>:
}


ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
{
 80242e0:	b480      	push	{r7}
 80242e2:	b085      	sub	sp, #20
 80242e4:	af00      	add	r7, sp, #0
 80242e6:	60f8      	str	r0, [r7, #12]
 80242e8:	60b9      	str	r1, [r7, #8]
 80242ea:	607a      	str	r2, [r7, #4]
 80242ec:	603b      	str	r3, [r7, #0]
    //return uart_read_r(r, fd, ptr, len);
	/**
	 * printf mapping function
	 */
	return 0;
 80242ee:	f04f 0300 	mov.w	r3, #0
}
 80242f2:	4618      	mov	r0, r3
 80242f4:	f107 0714 	add.w	r7, r7, #20
 80242f8:	46bd      	mov	sp, r7
 80242fa:	bc80      	pop	{r7}
 80242fc:	4770      	bx	lr
 80242fe:	bf00      	nop

08024300 <_write_r>:


ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8024300:	b480      	push	{r7}
 8024302:	b085      	sub	sp, #20
 8024304:	af00      	add	r7, sp, #0
 8024306:	60f8      	str	r0, [r7, #12]
 8024308:	60b9      	str	r1, [r7, #8]
 802430a:	607a      	str	r2, [r7, #4]
 802430c:	603b      	str	r3, [r7, #0]
    //return uart_write_r(r, fd, ptr, len);
	/**
	 * printf maping function
	 */
	return 0;
 802430e:	f04f 0300 	mov.w	r3, #0
}
 8024312:	4618      	mov	r0, r3
 8024314:	f107 0714 	add.w	r7, r7, #20
 8024318:	46bd      	mov	sp, r7
 802431a:	bc80      	pop	{r7}
 802431c:	4770      	bx	lr
 802431e:	bf00      	nop

08024320 <_lseek_r>:


off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
{
 8024320:	b480      	push	{r7}
 8024322:	b085      	sub	sp, #20
 8024324:	af00      	add	r7, sp, #0
 8024326:	60f8      	str	r0, [r7, #12]
 8024328:	60b9      	str	r1, [r7, #8]
 802432a:	607a      	str	r2, [r7, #4]
 802432c:	603b      	str	r3, [r7, #0]

    r->_errno = ENOSYS;
 802432e:	68fb      	ldr	r3, [r7, #12]
 8024330:	f04f 0258 	mov.w	r2, #88	; 0x58
 8024334:	601a      	str	r2, [r3, #0]
    return -1;
 8024336:	f04f 33ff 	mov.w	r3, #4294967295
}
 802433a:	4618      	mov	r0, r3
 802433c:	f107 0714 	add.w	r7, r7, #20
 8024340:	46bd      	mov	sp, r7
 8024342:	bc80      	pop	{r7}
 8024344:	4770      	bx	lr
 8024346:	bf00      	nop

08024348 <_close_r>:


int _close_r(struct _reent *r, int fd)
{
 8024348:	b480      	push	{r7}
 802434a:	b083      	sub	sp, #12
 802434c:	af00      	add	r7, sp, #0
 802434e:	6078      	str	r0, [r7, #4]
 8024350:	6039      	str	r1, [r7, #0]
    r->_errno = ENOSYS;
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	f04f 0258 	mov.w	r2, #88	; 0x58
 8024358:	601a      	str	r2, [r3, #0]
    return -1;
 802435a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802435e:	4618      	mov	r0, r3
 8024360:	f107 070c 	add.w	r7, r7, #12
 8024364:	46bd      	mov	sp, r7
 8024366:	bc80      	pop	{r7}
 8024368:	4770      	bx	lr
 802436a:	bf00      	nop

0802436c <_fstat_r>:


int _fstat_r(struct _reent *r, int fd, struct stat *st)
{
 802436c:	b480      	push	{r7}
 802436e:	b085      	sub	sp, #20
 8024370:	af00      	add	r7, sp, #0
 8024372:	60f8      	str	r0, [r7, #12]
 8024374:	60b9      	str	r1, [r7, #8]
 8024376:	607a      	str	r2, [r7, #4]
    if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 8024378:	68bb      	ldr	r3, [r7, #8]
 802437a:	2b00      	cmp	r3, #0
 802437c:	db09      	blt.n	8024392 <_fstat_r+0x26>
 802437e:	68bb      	ldr	r3, [r7, #8]
 8024380:	2b02      	cmp	r3, #2
 8024382:	dc06      	bgt.n	8024392 <_fstat_r+0x26>
      st->st_mode = S_IFCHR;
 8024384:	687b      	ldr	r3, [r7, #4]
 8024386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802438a:	605a      	str	r2, [r3, #4]
      return 0;
 802438c:	f04f 0300 	mov.w	r3, #0
 8024390:	e005      	b.n	802439e <_fstat_r+0x32>
    }

    r->_errno = ENOSYS;
 8024392:	68fb      	ldr	r3, [r7, #12]
 8024394:	f04f 0258 	mov.w	r2, #88	; 0x58
 8024398:	601a      	str	r2, [r3, #0]
    return -1;
 802439a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802439e:	4618      	mov	r0, r3
 80243a0:	f107 0714 	add.w	r7, r7, #20
 80243a4:	46bd      	mov	sp, r7
 80243a6:	bc80      	pop	{r7}
 80243a8:	4770      	bx	lr
 80243aa:	bf00      	nop

080243ac <_isatty_r>:


int _isatty_r(struct _reent *r, int fd)
{
 80243ac:	b480      	push	{r7}
 80243ae:	b083      	sub	sp, #12
 80243b0:	af00      	add	r7, sp, #0
 80243b2:	6078      	str	r0, [r7, #4]
 80243b4:	6039      	str	r1, [r7, #0]
    return 1;
 80243b6:	f04f 0301 	mov.w	r3, #1
}
 80243ba:	4618      	mov	r0, r3
 80243bc:	f107 070c 	add.w	r7, r7, #12
 80243c0:	46bd      	mov	sp, r7
 80243c2:	bc80      	pop	{r7}
 80243c4:	4770      	bx	lr
 80243c6:	bf00      	nop

080243c8 <_sbrk_r>:


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 80243c8:	b490      	push	{r4, r7}
 80243ca:	b084      	sub	sp, #16
 80243cc:	af00      	add	r7, sp, #0
 80243ce:	6078      	str	r0, [r7, #4]
 80243d0:	6039      	str	r1, [r7, #0]
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 80243d2:	f241 6330 	movw	r3, #5680	; 0x1630
 80243d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80243da:	681b      	ldr	r3, [r3, #0]
 80243dc:	2b00      	cmp	r3, #0
 80243de:	d108      	bne.n	80243f2 <_sbrk_r+0x2a>
        __brkval = &end;
 80243e0:	f241 6330 	movw	r3, #5680	; 0x1630
 80243e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80243e8:	f241 6234 	movw	r2, #5684	; 0x1634
 80243ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80243f0:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 80243f2:	f241 6330 	movw	r3, #5680	; 0x1630
 80243f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80243fa:	681a      	ldr	r2, [r3, #0]
 80243fc:	683b      	ldr	r3, [r7, #0]
 80243fe:	18d2      	adds	r2, r2, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8024400:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8024404:	4623      	mov	r3, r4
 8024406:	4619      	mov	r1, r3
 8024408:	f640 132c 	movw	r3, #2348	; 0x92c
 802440c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024410:	681b      	ldr	r3, [r3, #0]
 8024412:	1acb      	subs	r3, r1, r3
 8024414:	429a      	cmp	r2, r3
 8024416:	d906      	bls.n	8024426 <_sbrk_r+0x5e>
        r->_errno = ENOMEM;
 8024418:	687b      	ldr	r3, [r7, #4]
 802441a:	f04f 020c 	mov.w	r2, #12
 802441e:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 8024420:	f04f 33ff 	mov.w	r3, #4294967295
 8024424:	e012      	b.n	802444c <_sbrk_r+0x84>
    }

    void *ret = __brkval;
 8024426:	f241 6330 	movw	r3, #5680	; 0x1630
 802442a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802442e:	681b      	ldr	r3, [r3, #0]
 8024430:	60fb      	str	r3, [r7, #12]
    __brkval += incr;
 8024432:	f241 6330 	movw	r3, #5680	; 0x1630
 8024436:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802443a:	681a      	ldr	r2, [r3, #0]
 802443c:	683b      	ldr	r3, [r7, #0]
 802443e:	18d2      	adds	r2, r2, r3
 8024440:	f241 6330 	movw	r3, #5680	; 0x1630
 8024444:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024448:	601a      	str	r2, [r3, #0]

    return ret;
 802444a:	68fb      	ldr	r3, [r7, #12]
}
 802444c:	4618      	mov	r0, r3
 802444e:	f107 0710 	add.w	r7, r7, #16
 8024452:	46bd      	mov	sp, r7
 8024454:	bc90      	pop	{r4, r7}
 8024456:	4770      	bx	lr

08024458 <_kill_r>:


int _kill_r(struct _reent *r, int pid, int signal)
{
 8024458:	b480      	push	{r7}
 802445a:	b085      	sub	sp, #20
 802445c:	af00      	add	r7, sp, #0
 802445e:	60f8      	str	r0, [r7, #12]
 8024460:	60b9      	str	r1, [r7, #8]
 8024462:	607a      	str	r2, [r7, #4]
    r->_errno = ENOSYS;
 8024464:	68fb      	ldr	r3, [r7, #12]
 8024466:	f04f 0258 	mov.w	r2, #88	; 0x58
 802446a:	601a      	str	r2, [r3, #0]
    return -1;
 802446c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8024470:	4618      	mov	r0, r3
 8024472:	f107 0714 	add.w	r7, r7, #20
 8024476:	46bd      	mov	sp, r7
 8024478:	bc80      	pop	{r7}
 802447a:	4770      	bx	lr

0802447c <_getpid_r>:


int _getpid_r(struct _reent *r)
{
 802447c:	b480      	push	{r7}
 802447e:	b083      	sub	sp, #12
 8024480:	af00      	add	r7, sp, #0
 8024482:	6078      	str	r0, [r7, #4]
    r->_errno = ENOSYS;
 8024484:	687b      	ldr	r3, [r7, #4]
 8024486:	f04f 0258 	mov.w	r2, #88	; 0x58
 802448a:	601a      	str	r2, [r3, #0]
    return -1;
 802448c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8024490:	4618      	mov	r0, r3
 8024492:	f107 070c 	add.w	r7, r7, #12
 8024496:	46bd      	mov	sp, r7
 8024498:	bc80      	pop	{r7}
 802449a:	4770      	bx	lr

0802449c <__malloc_lock>:


void __malloc_lock(struct _reent *r)
{
 802449c:	b580      	push	{r7, lr}
 802449e:	b082      	sub	sp, #8
 80244a0:	af00      	add	r7, sp, #0
 80244a2:	6078      	str	r0, [r7, #4]
    vPortEnterCritical();
 80244a4:	f7fd f918 	bl	80216d8 <vPortEnterCritical>
}
 80244a8:	f107 0708 	add.w	r7, r7, #8
 80244ac:	46bd      	mov	sp, r7
 80244ae:	bd80      	pop	{r7, pc}

080244b0 <__malloc_unlock>:


void __malloc_unlock(struct _reent *r)
{
 80244b0:	b580      	push	{r7, lr}
 80244b2:	b082      	sub	sp, #8
 80244b4:	af00      	add	r7, sp, #0
 80244b6:	6078      	str	r0, [r7, #4]
    vPortExitCritical();
 80244b8:	f7fd f924 	bl	8021704 <vPortExitCritical>
}
 80244bc:	f107 0708 	add.w	r7, r7, #8
 80244c0:	46bd      	mov	sp, r7
 80244c2:	bd80      	pop	{r7, pc}

080244c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80244c4:	b580      	push	{r7, lr}
 80244c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80244c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80244cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80244d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80244d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80244d8:	6812      	ldr	r2, [r2, #0]
 80244da:	f042 0201 	orr.w	r2, r2, #1
 80244de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80244e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80244e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80244e8:	f04f 0200 	mov.w	r2, #0
 80244ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80244ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80244f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80244f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80244fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80244fe:	6812      	ldr	r2, [r2, #0]
 8024500:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8024504:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8024508:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 802450a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 802450e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024512:	f243 0210 	movw	r2, #12304	; 0x3010
 8024516:	f2c2 4200 	movt	r2, #9216	; 0x2400
 802451a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 802451c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024520:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024524:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8024528:	f2c4 0202 	movt	r2, #16386	; 0x4002
 802452c:	6812      	ldr	r2, [r2, #0]
 802452e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8024532:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8024534:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024538:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802453c:	f04f 0200 	mov.w	r2, #0
 8024540:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8024542:	f000 f8c3 	bl	80246cc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8024546:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 802454a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 802454e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8024552:	609a      	str	r2, [r3, #8]
#endif
}
 8024554:	bd80      	pop	{r7, pc}
 8024556:	bf00      	nop

08024558 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8024558:	b480      	push	{r7}
 802455a:	b087      	sub	sp, #28
 802455c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 802455e:	f04f 0300 	mov.w	r3, #0
 8024562:	613b      	str	r3, [r7, #16]
 8024564:	f04f 0300 	mov.w	r3, #0
 8024568:	617b      	str	r3, [r7, #20]
 802456a:	f04f 0302 	mov.w	r3, #2
 802456e:	60fb      	str	r3, [r7, #12]
 8024570:	f04f 0300 	mov.w	r3, #0
 8024574:	60bb      	str	r3, [r7, #8]
 8024576:	f04f 0302 	mov.w	r3, #2
 802457a:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 802457c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024580:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024584:	689b      	ldr	r3, [r3, #8]
 8024586:	f003 030c 	and.w	r3, r3, #12
 802458a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 802458c:	693b      	ldr	r3, [r7, #16]
 802458e:	2b04      	cmp	r3, #4
 8024590:	d00d      	beq.n	80245ae <SystemCoreClockUpdate+0x56>
 8024592:	2b08      	cmp	r3, #8
 8024594:	d015      	beq.n	80245c2 <SystemCoreClockUpdate+0x6a>
 8024596:	2b00      	cmp	r3, #0
 8024598:	d16b      	bne.n	8024672 <SystemCoreClockUpdate+0x11a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 802459a:	f640 1330 	movw	r3, #2352	; 0x930
 802459e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80245a2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80245a6:	f2c0 02f4 	movt	r2, #244	; 0xf4
 80245aa:	601a      	str	r2, [r3, #0]
      break;
 80245ac:	e06b      	b.n	8024686 <SystemCoreClockUpdate+0x12e>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80245ae:	f640 1330 	movw	r3, #2352	; 0x930
 80245b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80245b6:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80245ba:	f2c0 027a 	movt	r2, #122	; 0x7a
 80245be:	601a      	str	r2, [r3, #0]
      break;
 80245c0:	e061      	b.n	8024686 <SystemCoreClockUpdate+0x12e>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80245c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80245c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80245ca:	685b      	ldr	r3, [r3, #4]
 80245cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80245d0:	ea4f 5393 	mov.w	r3, r3, lsr #22
 80245d4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80245d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80245da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80245de:	685b      	ldr	r3, [r3, #4]
 80245e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80245e4:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80245e6:	68bb      	ldr	r3, [r7, #8]
 80245e8:	2b00      	cmp	r3, #0
 80245ea:	d015      	beq.n	8024618 <SystemCoreClockUpdate+0xc0>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80245ec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80245f0:	f2c0 037a 	movt	r3, #122	; 0x7a
 80245f4:	687a      	ldr	r2, [r7, #4]
 80245f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80245fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80245fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024602:	685b      	ldr	r3, [r3, #4]
 8024604:	4619      	mov	r1, r3
 8024606:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802460a:	400b      	ands	r3, r1
 802460c:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8024610:	fb03 f302 	mul.w	r3, r3, r2
 8024614:	617b      	str	r3, [r7, #20]
 8024616:	e014      	b.n	8024642 <SystemCoreClockUpdate+0xea>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8024618:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 802461c:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8024620:	687a      	ldr	r2, [r7, #4]
 8024622:	fbb3 f2f2 	udiv	r2, r3, r2
 8024626:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 802462a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802462e:	685b      	ldr	r3, [r3, #4]
 8024630:	4619      	mov	r1, r3
 8024632:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8024636:	400b      	ands	r3, r1
 8024638:	ea4f 1393 	mov.w	r3, r3, lsr #6
 802463c:	fb03 f302 	mul.w	r3, r3, r2
 8024640:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8024642:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024646:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802464a:	685b      	ldr	r3, [r3, #4]
 802464c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8024650:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8024654:	f103 0301 	add.w	r3, r3, #1
 8024658:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802465c:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 802465e:	697a      	ldr	r2, [r7, #20]
 8024660:	68fb      	ldr	r3, [r7, #12]
 8024662:	fbb2 f2f3 	udiv	r2, r2, r3
 8024666:	f640 1330 	movw	r3, #2352	; 0x930
 802466a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802466e:	601a      	str	r2, [r3, #0]
      break;
 8024670:	e009      	b.n	8024686 <SystemCoreClockUpdate+0x12e>
    default:
      SystemCoreClock = HSI_VALUE;
 8024672:	f640 1330 	movw	r3, #2352	; 0x930
 8024676:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802467a:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 802467e:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8024682:	601a      	str	r2, [r3, #0]
      break;
 8024684:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8024686:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 802468a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802468e:	689b      	ldr	r3, [r3, #8]
 8024690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024694:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8024698:	f640 1334 	movw	r3, #2356	; 0x934
 802469c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80246a0:	5c9b      	ldrb	r3, [r3, r2]
 80246a2:	b2db      	uxtb	r3, r3
 80246a4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80246a6:	f640 1330 	movw	r3, #2352	; 0x930
 80246aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80246ae:	681a      	ldr	r2, [r3, #0]
 80246b0:	693b      	ldr	r3, [r7, #16]
 80246b2:	fa22 f203 	lsr.w	r2, r2, r3
 80246b6:	f640 1330 	movw	r3, #2352	; 0x930
 80246ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80246be:	601a      	str	r2, [r3, #0]
}
 80246c0:	f107 071c 	add.w	r7, r7, #28
 80246c4:	46bd      	mov	sp, r7
 80246c6:	bc80      	pop	{r7}
 80246c8:	4770      	bx	lr
 80246ca:	bf00      	nop

080246cc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80246cc:	b480      	push	{r7}
 80246ce:	b083      	sub	sp, #12
 80246d0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80246d2:	f04f 0300 	mov.w	r3, #0
 80246d6:	607b      	str	r3, [r7, #4]
 80246d8:	f04f 0300 	mov.w	r3, #0
 80246dc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80246de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80246e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80246e6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80246ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80246ee:	6812      	ldr	r2, [r2, #0]
 80246f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80246f4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80246f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80246fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80246fe:	681b      	ldr	r3, [r3, #0]
 8024700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024704:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8024706:	687b      	ldr	r3, [r7, #4]
 8024708:	f103 0301 	add.w	r3, r3, #1
 802470c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 802470e:	683b      	ldr	r3, [r7, #0]
 8024710:	2b00      	cmp	r3, #0
 8024712:	d103      	bne.n	802471c <SetSysClock+0x50>
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 802471a:	d1ec      	bne.n	80246f6 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 802471c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024720:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024724:	681b      	ldr	r3, [r3, #0]
 8024726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802472a:	2b00      	cmp	r3, #0
 802472c:	d003      	beq.n	8024736 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 802472e:	f04f 0301 	mov.w	r3, #1
 8024732:	603b      	str	r3, [r7, #0]
 8024734:	e002      	b.n	802473c <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8024736:	f04f 0300 	mov.w	r3, #0
 802473a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 802473c:	683b      	ldr	r3, [r7, #0]
 802473e:	2b01      	cmp	r3, #1
 8024740:	f040 8082 	bne.w	8024848 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8024744:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802474c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8024750:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8024754:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8024756:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802475a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 802475c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8024760:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8024764:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8024768:	f2c4 0200 	movt	r2, #16384	; 0x4000
 802476c:	6812      	ldr	r2, [r2, #0]
 802476e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8024772:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8024774:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024778:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802477c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8024780:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8024784:	6892      	ldr	r2, [r2, #8]
 8024786:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8024788:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 802478c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024790:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8024794:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8024798:	6892      	ldr	r2, [r2, #8]
 802479a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802479e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80247a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80247a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80247a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80247ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80247b0:	6892      	ldr	r2, [r2, #8]
 80247b2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80247b6:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80247b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80247bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80247c0:	f245 4208 	movw	r2, #21512	; 0x5408
 80247c4:	f2c0 7240 	movt	r2, #1856	; 0x740
 80247c8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80247ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80247ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80247d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80247d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80247da:	6812      	ldr	r2, [r2, #0]
 80247dc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80247e0:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80247e2:	bf00      	nop
 80247e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80247e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80247ec:	681b      	ldr	r3, [r3, #0]
 80247ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80247f2:	2b00      	cmp	r3, #0
 80247f4:	d0f6      	beq.n	80247e4 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80247f6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80247fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80247fe:	f240 6205 	movw	r2, #1541	; 0x605
 8024802:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8024804:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024808:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802480c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8024810:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8024814:	6892      	ldr	r2, [r2, #8]
 8024816:	f022 0203 	bic.w	r2, r2, #3
 802481a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 802481c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024820:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024824:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8024828:	f2c4 0202 	movt	r2, #16386	; 0x4002
 802482c:	6892      	ldr	r2, [r2, #8]
 802482e:	f042 0202 	orr.w	r2, r2, #2
 8024832:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8024834:	bf00      	nop
 8024836:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 802483a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802483e:	689b      	ldr	r3, [r3, #8]
 8024840:	f003 030c 	and.w	r3, r3, #12
 8024844:	2b08      	cmp	r3, #8
 8024846:	d1f6      	bne.n	8024836 <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8024848:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 802484c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024850:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8024854:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8024858:	6892      	ldr	r2, [r2, #8]
 802485a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 802485e:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8024860:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024864:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024868:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 802486c:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8024870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8024874:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024878:	f2c4 0302 	movt	r3, #16386	; 0x4002
 802487c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8024880:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8024884:	6812      	ldr	r2, [r2, #0]
 8024886:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802488a:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 802488c:	bf00      	nop
 802488e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024892:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8024896:	681b      	ldr	r3, [r3, #0]
 8024898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802489c:	2b00      	cmp	r3, #0
 802489e:	d0f6      	beq.n	802488e <SetSysClock+0x1c2>
  {
  }
}
 80248a0:	f107 070c 	add.w	r7, r7, #12
 80248a4:	46bd      	mov	sp, r7
 80248a6:	bc80      	pop	{r7}
 80248a8:	4770      	bx	lr
 80248aa:	bf00      	nop

080248ac <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 80248ac:	b580      	push	{r7, lr}
 80248ae:	b082      	sub	sp, #8
 80248b0:	af00      	add	r7, sp, #0
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 80248b2:	f7fc ff11 	bl	80216d8 <vPortEnterCritical>

    int t = TIM7->CNT;
 80248b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80248ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80248be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80248c0:	607b      	str	r3, [r7, #4]
    if (t < t0)
 80248c2:	f640 33a0 	movw	r3, #2976	; 0xba0
 80248c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80248ca:	881b      	ldrh	r3, [r3, #0]
 80248cc:	461a      	mov	r2, r3
 80248ce:	687b      	ldr	r3, [r7, #4]
 80248d0:	429a      	cmp	r2, r3
 80248d2:	dd03      	ble.n	80248dc <get_us_time+0x30>
        t += 0x10000;
 80248d4:	687b      	ldr	r3, [r7, #4]
 80248d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80248da:	607b      	str	r3, [r7, #4]

    tickcount += t - t0;
 80248dc:	f640 33a0 	movw	r3, #2976	; 0xba0
 80248e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80248e4:	881b      	ldrh	r3, [r3, #0]
 80248e6:	687a      	ldr	r2, [r7, #4]
 80248e8:	1ad1      	subs	r1, r2, r3
 80248ea:	460a      	mov	r2, r1
 80248ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80248f0:	f640 31a8 	movw	r1, #2984	; 0xba8
 80248f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80248f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80248fc:	1880      	adds	r0, r0, r2
 80248fe:	eb41 0103 	adc.w	r1, r1, r3
 8024902:	f640 33a8 	movw	r3, #2984	; 0xba8
 8024906:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802490a:	e9c3 0100 	strd	r0, r1, [r3]
    t0 = t;
 802490e:	687b      	ldr	r3, [r7, #4]
 8024910:	b29a      	uxth	r2, r3
 8024912:	f640 33a0 	movw	r3, #2976	; 0xba0
 8024916:	f2c2 0300 	movt	r3, #8192	; 0x2000
 802491a:	801a      	strh	r2, [r3, #0]

    vPortExitCritical();
 802491c:	f7fc fef2 	bl	8021704 <vPortExitCritical>

    return tickcount;
 8024920:	f640 33a8 	movw	r3, #2984	; 0xba8
 8024924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024928:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 802492c:	4610      	mov	r0, r2
 802492e:	4619      	mov	r1, r3
 8024930:	f107 0708 	add.w	r7, r7, #8
 8024934:	46bd      	mov	sp, r7
 8024936:	bd80      	pop	{r7, pc}

08024938 <delay_us>:
 * \param  us  number of microseconds to wait.
 * \note   The actual delay will last between us and (us-1) microseconds.
 *         To wait _at_least_ 1 us, you should use delay_us(2).
 */
void delay_us(unsigned long us)
{
 8024938:	b480      	push	{r7}
 802493a:	b085      	sub	sp, #20
 802493c:	af00      	add	r7, sp, #0
 802493e:	6078      	str	r0, [r7, #4]
    uint16_t  t0 = TIM7->CNT;
 8024940:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8024944:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8024948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802494a:	81fb      	strh	r3, [r7, #14]
    for (;;) {
        int  t = TIM7->CNT;
 802494c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8024950:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8024954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024956:	60bb      	str	r3, [r7, #8]
        if (t < t0)
 8024958:	89fa      	ldrh	r2, [r7, #14]
 802495a:	68bb      	ldr	r3, [r7, #8]
 802495c:	429a      	cmp	r2, r3
 802495e:	dd03      	ble.n	8024968 <delay_us+0x30>
            t += 0x10000;
 8024960:	68bb      	ldr	r3, [r7, #8]
 8024962:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8024966:	60bb      	str	r3, [r7, #8]

        if (us < t - t0)
 8024968:	89fb      	ldrh	r3, [r7, #14]
 802496a:	68ba      	ldr	r2, [r7, #8]
 802496c:	1ad3      	subs	r3, r2, r3
 802496e:	461a      	mov	r2, r3
 8024970:	687b      	ldr	r3, [r7, #4]
 8024972:	429a      	cmp	r2, r3
 8024974:	d808      	bhi.n	8024988 <delay_us+0x50>
            return;

        us -= t - t0;
 8024976:	89fa      	ldrh	r2, [r7, #14]
 8024978:	68bb      	ldr	r3, [r7, #8]
 802497a:	1ad3      	subs	r3, r2, r3
 802497c:	687a      	ldr	r2, [r7, #4]
 802497e:	18d3      	adds	r3, r2, r3
 8024980:	607b      	str	r3, [r7, #4]
        t0  = t;
 8024982:	68bb      	ldr	r3, [r7, #8]
 8024984:	81fb      	strh	r3, [r7, #14]
    }
 8024986:	e7e1      	b.n	802494c <delay_us+0x14>
        int  t = TIM7->CNT;
        if (t < t0)
            t += 0x10000;

        if (us < t - t0)
            return;
 8024988:	bf00      	nop

        us -= t - t0;
        t0  = t;
    }
}
 802498a:	f107 0714 	add.w	r7, r7, #20
 802498e:	46bd      	mov	sp, r7
 8024990:	bc80      	pop	{r7}
 8024992:	4770      	bx	lr

08024994 <delay_ms>:
 * Perform a millisecond delay
 *
 * \param  ms  number of milliseconds to wait.
 */
void delay_ms(unsigned long ms)
{
 8024994:	b580      	push	{r7, lr}
 8024996:	b082      	sub	sp, #8
 8024998:	af00      	add	r7, sp, #0
 802499a:	6078      	str	r0, [r7, #4]
    delay_us(ms * 1000);
 802499c:	687b      	ldr	r3, [r7, #4]
 802499e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80249a2:	fb02 f303 	mul.w	r3, r2, r3
 80249a6:	4618      	mov	r0, r3
 80249a8:	f7ff ffc6 	bl	8024938 <delay_us>
}
 80249ac:	f107 0708 	add.w	r7, r7, #8
 80249b0:	46bd      	mov	sp, r7
 80249b2:	bd80      	pop	{r7, pc}

080249b4 <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 80249b4:	b580      	push	{r7, lr}
 80249b6:	b084      	sub	sp, #16
 80249b8:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 80249ba:	463b      	mov	r3, r7
 80249bc:	4618      	mov	r0, r3
 80249be:	f7f2 fa19 	bl	8016df4 <RCC_GetClocksFreq>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 80249c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80249c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80249ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80249ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80249d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80249d4:	f042 0220 	orr.w	r2, r2, #32
 80249d8:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 80249da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80249de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80249e2:	68f9      	ldr	r1, [r7, #12]
 80249e4:	f64d 6283 	movw	r2, #56963	; 0xde83
 80249e8:	f2c4 321b 	movt	r2, #17179	; 0x431b
 80249ec:	fba2 0201 	umull	r0, r2, r2, r1
 80249f0:	ea4f 4292 	mov.w	r2, r2, lsr #18
 80249f4:	b292      	uxth	r2, r2
 80249f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80249fa:	b292      	uxth	r2, r2
 80249fc:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 80249fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8024a02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8024a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024a0a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 8024a0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8024a10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8024a14:	f04f 0201 	mov.w	r2, #1
 8024a18:	801a      	strh	r2, [r3, #0]
}
 8024a1a:	f107 0710 	add.w	r7, r7, #16
 8024a1e:	46bd      	mov	sp, r7
 8024a20:	bd80      	pop	{r7, pc}
 8024a22:	bf00      	nop

08024a24 <__aeabi_atexit>:
 8024a24:	4603      	mov	r3, r0
 8024a26:	4608      	mov	r0, r1
 8024a28:	4619      	mov	r1, r3
 8024a2a:	f7e2 b88f 	b.w	8006b4c <__cxa_atexit>
 8024a2e:	bf00      	nop

08024a30 <_ZdlPv>:
 8024a30:	b108      	cbz	r0, 8024a36 <_ZdlPv+0x6>
 8024a32:	f7e2 bb47 	b.w	80070c4 <free>
 8024a36:	4770      	bx	lr

08024a38 <__cxa_pure_virtual>:
 8024a38:	f248 3108 	movw	r1, #33544	; 0x8308
 8024a3c:	221b      	movs	r2, #27
 8024a3e:	b508      	push	{r3, lr}
 8024a40:	f6c0 0102 	movt	r1, #2050	; 0x802
 8024a44:	2002      	movs	r0, #2
 8024a46:	f7e4 fe81 	bl	800974c <write>
 8024a4a:	f000 f815 	bl	8024a78 <_ZSt9terminatev>
 8024a4e:	bf00      	nop

08024a50 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024a50:	b508      	push	{r3, lr}
 8024a52:	4780      	blx	r0
 8024a54:	f7e2 f848 	bl	8006ae8 <abort>
 8024a58:	f000 fa7e 	bl	8024f58 <__cxa_begin_catch>
 8024a5c:	f7e2 f844 	bl	8006ae8 <abort>
 8024a60:	460c      	mov	r4, r1
 8024a62:	4605      	mov	r5, r0
 8024a64:	f000 fabc 	bl	8024fe0 <__cxa_end_catch>
 8024a68:	3401      	adds	r4, #1
 8024a6a:	d001      	beq.n	8024a70 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 8024a6c:	f000 f8b6 	bl	8024bdc <__cxa_end_cleanup>
 8024a70:	4628      	mov	r0, r5
 8024a72:	f000 f9e1 	bl	8024e38 <__cxa_call_unexpected>
 8024a76:	bf00      	nop

08024a78 <_ZSt9terminatev>:
 8024a78:	b508      	push	{r3, lr}
 8024a7a:	f640 1344 	movw	r3, #2372	; 0x944
 8024a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024a82:	6818      	ldr	r0, [r3, #0]
 8024a84:	f7ff ffe4 	bl	8024a50 <_ZN10__cxxabiv111__terminateEPFvvE>

08024a88 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8024a88:	b508      	push	{r3, lr}
 8024a8a:	4780      	blx	r0
 8024a8c:	f7ff fff4 	bl	8024a78 <_ZSt9terminatev>

08024a90 <_ZSt10unexpectedv>:
 8024a90:	b508      	push	{r3, lr}
 8024a92:	f640 1348 	movw	r3, #2376	; 0x948
 8024a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024a9a:	681b      	ldr	r3, [r3, #0]
 8024a9c:	4798      	blx	r3
 8024a9e:	f7ff ffeb 	bl	8024a78 <_ZSt9terminatev>
 8024aa2:	bf00      	nop

08024aa4 <_ZSt13set_terminatePFvvE>:
 8024aa4:	f640 1344 	movw	r3, #2372	; 0x944
 8024aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024aac:	681a      	ldr	r2, [r3, #0]
 8024aae:	6018      	str	r0, [r3, #0]
 8024ab0:	4610      	mov	r0, r2
 8024ab2:	4770      	bx	lr

08024ab4 <_ZSt14set_unexpectedPFvvE>:
 8024ab4:	f640 1348 	movw	r3, #2376	; 0x948
 8024ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8024abc:	681a      	ldr	r2, [r3, #0]
 8024abe:	6018      	str	r0, [r3, #0]
 8024ac0:	4610      	mov	r0, r2
 8024ac2:	4770      	bx	lr

08024ac4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 8024ac4:	4b3e      	ldr	r3, [pc, #248]	; (8024bc0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8024ac6:	b570      	push	{r4, r5, r6, lr}
 8024ac8:	b082      	sub	sp, #8
 8024aca:	781a      	ldrb	r2, [r3, #0]
 8024acc:	2a00      	cmp	r2, #0
 8024ace:	d135      	bne.n	8024b3c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 8024ad0:	2401      	movs	r4, #1
 8024ad2:	701c      	strb	r4, [r3, #0]
 8024ad4:	f000 fe84 	bl	80257e0 <__cxa_current_exception_type>
 8024ad8:	2800      	cmp	r0, #0
 8024ada:	d047      	beq.n	8024b6c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa8>
 8024adc:	6845      	ldr	r5, [r0, #4]
 8024ade:	f04f 36ff 	mov.w	r6, #4294967295
 8024ae2:	782b      	ldrb	r3, [r5, #0]
 8024ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8024ae6:	ab02      	add	r3, sp, #8
 8024ae8:	bf08      	it	eq
 8024aea:	192d      	addeq	r5, r5, r4
 8024aec:	2100      	movs	r1, #0
 8024aee:	460a      	mov	r2, r1
 8024af0:	f843 6d04 	str.w	r6, [r3, #-4]!
 8024af4:	4628      	mov	r0, r5
 8024af6:	4c33      	ldr	r4, [pc, #204]	; (8024bc4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8024af8:	f7e0 ff96 	bl	8005a28 <__cxa_demangle>
 8024afc:	2101      	movs	r1, #1
 8024afe:	2230      	movs	r2, #48	; 0x30
 8024b00:	6823      	ldr	r3, [r4, #0]
 8024b02:	68db      	ldr	r3, [r3, #12]
 8024b04:	4606      	mov	r6, r0
 8024b06:	4830      	ldr	r0, [pc, #192]	; (8024bc8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8024b08:	f7e2 fa9c 	bl	8007044 <fwrite>
 8024b0c:	9b01      	ldr	r3, [sp, #4]
 8024b0e:	b17b      	cbz	r3, 8024b30 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8024b10:	6823      	ldr	r3, [r4, #0]
 8024b12:	4628      	mov	r0, r5
 8024b14:	68d9      	ldr	r1, [r3, #12]
 8024b16:	f7e2 f8bd 	bl	8006c94 <fputs>
 8024b1a:	6823      	ldr	r3, [r4, #0]
 8024b1c:	2101      	movs	r1, #1
 8024b1e:	482b      	ldr	r0, [pc, #172]	; (8024bcc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 8024b20:	2202      	movs	r2, #2
 8024b22:	68db      	ldr	r3, [r3, #12]
 8024b24:	f7e2 fa8e 	bl	8007044 <fwrite>
 8024b28:	9b01      	ldr	r3, [sp, #4]
 8024b2a:	b18b      	cbz	r3, 8024b50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8024b2c:	f000 fe20 	bl	8025770 <__cxa_rethrow>
 8024b30:	6823      	ldr	r3, [r4, #0]
 8024b32:	4630      	mov	r0, r6
 8024b34:	68d9      	ldr	r1, [r3, #12]
 8024b36:	f7e2 f8ad 	bl	8006c94 <fputs>
 8024b3a:	e7ee      	b.n	8024b1a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 8024b3c:	4b21      	ldr	r3, [pc, #132]	; (8024bc4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8024b3e:	2101      	movs	r1, #1
 8024b40:	221d      	movs	r2, #29
 8024b42:	4823      	ldr	r0, [pc, #140]	; (8024bd0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 8024b44:	681b      	ldr	r3, [r3, #0]
 8024b46:	68db      	ldr	r3, [r3, #12]
 8024b48:	f7e2 fa7c 	bl	8007044 <fwrite>
 8024b4c:	f7e1 ffcc 	bl	8006ae8 <abort>
 8024b50:	4630      	mov	r0, r6
 8024b52:	f7e2 fab7 	bl	80070c4 <free>
 8024b56:	f000 fe0b 	bl	8025770 <__cxa_rethrow>
 8024b5a:	2901      	cmp	r1, #1
 8024b5c:	460e      	mov	r6, r1
 8024b5e:	d00f      	beq.n	8024b80 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
 8024b60:	f000 f9fa 	bl	8024f58 <__cxa_begin_catch>
 8024b64:	f000 fa3c 	bl	8024fe0 <__cxa_end_catch>
 8024b68:	f7e1 ffbe 	bl	8006ae8 <abort>
 8024b6c:	4b15      	ldr	r3, [pc, #84]	; (8024bc4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8024b6e:	4621      	mov	r1, r4
 8024b70:	222d      	movs	r2, #45	; 0x2d
 8024b72:	4818      	ldr	r0, [pc, #96]	; (8024bd4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
 8024b74:	681b      	ldr	r3, [r3, #0]
 8024b76:	68db      	ldr	r3, [r3, #12]
 8024b78:	f7e2 fa64 	bl	8007044 <fwrite>
 8024b7c:	f7e1 ffb4 	bl	8006ae8 <abort>
 8024b80:	f000 f9ea 	bl	8024f58 <__cxa_begin_catch>
 8024b84:	4603      	mov	r3, r0
 8024b86:	681b      	ldr	r3, [r3, #0]
 8024b88:	689b      	ldr	r3, [r3, #8]
 8024b8a:	4798      	blx	r3
 8024b8c:	6823      	ldr	r3, [r4, #0]
 8024b8e:	4631      	mov	r1, r6
 8024b90:	220b      	movs	r2, #11
 8024b92:	68db      	ldr	r3, [r3, #12]
 8024b94:	4605      	mov	r5, r0
 8024b96:	4810      	ldr	r0, [pc, #64]	; (8024bd8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
 8024b98:	f7e2 fa54 	bl	8007044 <fwrite>
 8024b9c:	6823      	ldr	r3, [r4, #0]
 8024b9e:	4628      	mov	r0, r5
 8024ba0:	68d9      	ldr	r1, [r3, #12]
 8024ba2:	f7e2 f877 	bl	8006c94 <fputs>
 8024ba6:	6823      	ldr	r3, [r4, #0]
 8024ba8:	200a      	movs	r0, #10
 8024baa:	68d9      	ldr	r1, [r3, #12]
 8024bac:	f7e2 f836 	bl	8006c1c <fputc>
 8024bb0:	f000 fa16 	bl	8024fe0 <__cxa_end_catch>
 8024bb4:	e7d8      	b.n	8024b68 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 8024bb6:	f000 fa13 	bl	8024fe0 <__cxa_end_catch>
 8024bba:	f000 f80f 	bl	8024bdc <__cxa_end_cleanup>
 8024bbe:	bf00      	nop
 8024bc0:	20000bb0 	.word	0x20000bb0
 8024bc4:	20000008 	.word	0x20000008
 8024bc8:	08028344 	.word	0x08028344
 8024bcc:	08028378 	.word	0x08028378
 8024bd0:	08028324 	.word	0x08028324
 8024bd4:	0802837c 	.word	0x0802837c
 8024bd8:	080283ac 	.word	0x080283ac

08024bdc <__cxa_end_cleanup>:
 8024bdc:	b41e      	push	{r1, r2, r3, r4}
 8024bde:	f000 f8a9 	bl	8024d34 <__gnu_end_cleanup>
 8024be2:	bc1e      	pop	{r1, r2, r3, r4}
 8024be4:	f7e1 fd4e 	bl	8006684 <_Unwind_Resume>

08024be8 <__cxa_type_match>:
 8024be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024bea:	461e      	mov	r6, r3
 8024bec:	7803      	ldrb	r3, [r0, #0]
 8024bee:	b083      	sub	sp, #12
 8024bf0:	460d      	mov	r5, r1
 8024bf2:	2b47      	cmp	r3, #71	; 0x47
 8024bf4:	d02c      	beq.n	8024c50 <__cxa_type_match+0x68>
 8024bf6:	4c31      	ldr	r4, [pc, #196]	; (8024cbc <__cxa_type_match+0xd4>)
 8024bf8:	6823      	ldr	r3, [r4, #0]
 8024bfa:	4620      	mov	r0, r4
 8024bfc:	6832      	ldr	r2, [r6, #0]
 8024bfe:	689b      	ldr	r3, [r3, #8]
 8024c00:	9201      	str	r2, [sp, #4]
 8024c02:	4798      	blx	r3
 8024c04:	b110      	cbz	r0, 8024c0c <__cxa_type_match+0x24>
 8024c06:	9b01      	ldr	r3, [sp, #4]
 8024c08:	681b      	ldr	r3, [r3, #0]
 8024c0a:	9301      	str	r3, [sp, #4]
 8024c0c:	682f      	ldr	r7, [r5, #0]
 8024c0e:	4628      	mov	r0, r5
 8024c10:	4621      	mov	r1, r4
 8024c12:	aa01      	add	r2, sp, #4
 8024c14:	2301      	movs	r3, #1
 8024c16:	693f      	ldr	r7, [r7, #16]
 8024c18:	47b8      	blx	r7
 8024c1a:	b1b8      	cbz	r0, 8024c4c <__cxa_type_match+0x64>
 8024c1c:	9b01      	ldr	r3, [sp, #4]
 8024c1e:	4a28      	ldr	r2, [pc, #160]	; (8024cc0 <__cxa_type_match+0xd8>)
 8024c20:	6033      	str	r3, [r6, #0]
 8024c22:	6812      	ldr	r2, [r2, #0]
 8024c24:	682b      	ldr	r3, [r5, #0]
 8024c26:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8024c2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8024c2e:	f000 fedd 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8024c32:	b150      	cbz	r0, 8024c4a <__cxa_type_match+0x62>
 8024c34:	68eb      	ldr	r3, [r5, #12]
 8024c36:	2b00      	cmp	r3, #0
 8024c38:	d03e      	beq.n	8024cb8 <__cxa_type_match+0xd0>
 8024c3a:	681b      	ldr	r3, [r3, #0]
 8024c3c:	4921      	ldr	r1, [pc, #132]	; (8024cc4 <__cxa_type_match+0xdc>)
 8024c3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8024c42:	f000 fed3 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8024c46:	2800      	cmp	r0, #0
 8024c48:	d022      	beq.n	8024c90 <__cxa_type_match+0xa8>
 8024c4a:	2001      	movs	r0, #1
 8024c4c:	b003      	add	sp, #12
 8024c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c50:	7843      	ldrb	r3, [r0, #1]
 8024c52:	2b4e      	cmp	r3, #78	; 0x4e
 8024c54:	d1cf      	bne.n	8024bf6 <__cxa_type_match+0xe>
 8024c56:	7883      	ldrb	r3, [r0, #2]
 8024c58:	2b55      	cmp	r3, #85	; 0x55
 8024c5a:	d1cc      	bne.n	8024bf6 <__cxa_type_match+0xe>
 8024c5c:	78c3      	ldrb	r3, [r0, #3]
 8024c5e:	2b43      	cmp	r3, #67	; 0x43
 8024c60:	d1c9      	bne.n	8024bf6 <__cxa_type_match+0xe>
 8024c62:	7903      	ldrb	r3, [r0, #4]
 8024c64:	2b46      	cmp	r3, #70	; 0x46
 8024c66:	d01c      	beq.n	8024ca2 <__cxa_type_match+0xba>
 8024c68:	7903      	ldrb	r3, [r0, #4]
 8024c6a:	2b43      	cmp	r3, #67	; 0x43
 8024c6c:	d1c3      	bne.n	8024bf6 <__cxa_type_match+0xe>
 8024c6e:	7943      	ldrb	r3, [r0, #5]
 8024c70:	2b2b      	cmp	r3, #43	; 0x2b
 8024c72:	d1c0      	bne.n	8024bf6 <__cxa_type_match+0xe>
 8024c74:	7983      	ldrb	r3, [r0, #6]
 8024c76:	2b2b      	cmp	r3, #43	; 0x2b
 8024c78:	d1bd      	bne.n	8024bf6 <__cxa_type_match+0xe>
 8024c7a:	79c3      	ldrb	r3, [r0, #7]
 8024c7c:	2b01      	cmp	r3, #1
 8024c7e:	d8ba      	bhi.n	8024bf6 <__cxa_type_match+0xe>
 8024c80:	bf0a      	itet	eq
 8024c82:	f850 3c20 	ldreq.w	r3, [r0, #-32]
 8024c86:	f850 4c20 	ldrne.w	r4, [r0, #-32]
 8024c8a:	f853 4c78 	ldreq.w	r4, [r3, #-120]
 8024c8e:	e7b3      	b.n	8024bf8 <__cxa_type_match+0x10>
 8024c90:	68e8      	ldr	r0, [r5, #12]
 8024c92:	68e1      	ldr	r1, [r4, #12]
 8024c94:	f000 feaa 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8024c98:	2800      	cmp	r0, #0
 8024c9a:	bf0c      	ite	eq
 8024c9c:	2002      	moveq	r0, #2
 8024c9e:	2001      	movne	r0, #1
 8024ca0:	e7d4      	b.n	8024c4c <__cxa_type_match+0x64>
 8024ca2:	7943      	ldrb	r3, [r0, #5]
 8024ca4:	2b4f      	cmp	r3, #79	; 0x4f
 8024ca6:	d1df      	bne.n	8024c68 <__cxa_type_match+0x80>
 8024ca8:	7983      	ldrb	r3, [r0, #6]
 8024caa:	2b52      	cmp	r3, #82	; 0x52
 8024cac:	d1dc      	bne.n	8024c68 <__cxa_type_match+0x80>
 8024cae:	79c3      	ldrb	r3, [r0, #7]
 8024cb0:	4c05      	ldr	r4, [pc, #20]	; (8024cc8 <__cxa_type_match+0xe0>)
 8024cb2:	2b00      	cmp	r3, #0
 8024cb4:	d0a0      	beq.n	8024bf8 <__cxa_type_match+0x10>
 8024cb6:	e7d7      	b.n	8024c68 <__cxa_type_match+0x80>
 8024cb8:	f000 f888 	bl	8024dcc <__cxa_bad_typeid>
 8024cbc:	08028454 	.word	0x08028454
 8024cc0:	0802884c 	.word	0x0802884c
 8024cc4:	0802885c 	.word	0x0802885c
 8024cc8:	080283e8 	.word	0x080283e8

08024ccc <__cxa_begin_cleanup>:
 8024ccc:	b510      	push	{r4, lr}
 8024cce:	4604      	mov	r4, r0
 8024cd0:	f000 fa28 	bl	8025124 <__cxa_get_globals>
 8024cd4:	f1a4 0220 	sub.w	r2, r4, #32
 8024cd8:	7823      	ldrb	r3, [r4, #0]
 8024cda:	2b47      	cmp	r3, #71	; 0x47
 8024cdc:	d005      	beq.n	8024cea <__cxa_begin_cleanup+0x1e>
 8024cde:	6883      	ldr	r3, [r0, #8]
 8024ce0:	2b00      	cmp	r3, #0
 8024ce2:	d124      	bne.n	8024d2e <__cxa_begin_cleanup+0x62>
 8024ce4:	6082      	str	r2, [r0, #8]
 8024ce6:	2001      	movs	r0, #1
 8024ce8:	bd10      	pop	{r4, pc}
 8024cea:	7863      	ldrb	r3, [r4, #1]
 8024cec:	2b4e      	cmp	r3, #78	; 0x4e
 8024cee:	d1f6      	bne.n	8024cde <__cxa_begin_cleanup+0x12>
 8024cf0:	78a3      	ldrb	r3, [r4, #2]
 8024cf2:	2b55      	cmp	r3, #85	; 0x55
 8024cf4:	d1f3      	bne.n	8024cde <__cxa_begin_cleanup+0x12>
 8024cf6:	78e3      	ldrb	r3, [r4, #3]
 8024cf8:	2b43      	cmp	r3, #67	; 0x43
 8024cfa:	d1f0      	bne.n	8024cde <__cxa_begin_cleanup+0x12>
 8024cfc:	7923      	ldrb	r3, [r4, #4]
 8024cfe:	2b43      	cmp	r3, #67	; 0x43
 8024d00:	d1ed      	bne.n	8024cde <__cxa_begin_cleanup+0x12>
 8024d02:	7963      	ldrb	r3, [r4, #5]
 8024d04:	2b2b      	cmp	r3, #43	; 0x2b
 8024d06:	d1ea      	bne.n	8024cde <__cxa_begin_cleanup+0x12>
 8024d08:	79a3      	ldrb	r3, [r4, #6]
 8024d0a:	2b2b      	cmp	r3, #43	; 0x2b
 8024d0c:	d1e7      	bne.n	8024cde <__cxa_begin_cleanup+0x12>
 8024d0e:	79e3      	ldrb	r3, [r4, #7]
 8024d10:	2b01      	cmp	r3, #1
 8024d12:	d8e4      	bhi.n	8024cde <__cxa_begin_cleanup+0x12>
 8024d14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8024d18:	3301      	adds	r3, #1
 8024d1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8024d1e:	2b01      	cmp	r3, #1
 8024d20:	d1e1      	bne.n	8024ce6 <__cxa_begin_cleanup+0x1a>
 8024d22:	6883      	ldr	r3, [r0, #8]
 8024d24:	f844 3c08 	str.w	r3, [r4, #-8]
 8024d28:	6082      	str	r2, [r0, #8]
 8024d2a:	2001      	movs	r0, #1
 8024d2c:	bd10      	pop	{r4, pc}
 8024d2e:	f7ff fea3 	bl	8024a78 <_ZSt9terminatev>
 8024d32:	bf00      	nop

08024d34 <__gnu_end_cleanup>:
 8024d34:	b508      	push	{r3, lr}
 8024d36:	f000 f9f5 	bl	8025124 <__cxa_get_globals>
 8024d3a:	6883      	ldr	r3, [r0, #8]
 8024d3c:	2b00      	cmp	r3, #0
 8024d3e:	d030      	beq.n	8024da2 <__gnu_end_cleanup+0x6e>
 8024d40:	f893 2020 	ldrb.w	r2, [r3, #32]
 8024d44:	2a47      	cmp	r2, #71	; 0x47
 8024d46:	d004      	beq.n	8024d52 <__gnu_end_cleanup+0x1e>
 8024d48:	2200      	movs	r2, #0
 8024d4a:	6082      	str	r2, [r0, #8]
 8024d4c:	f103 0020 	add.w	r0, r3, #32
 8024d50:	bd08      	pop	{r3, pc}
 8024d52:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8024d56:	2a4e      	cmp	r2, #78	; 0x4e
 8024d58:	d1f6      	bne.n	8024d48 <__gnu_end_cleanup+0x14>
 8024d5a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8024d5e:	2a55      	cmp	r2, #85	; 0x55
 8024d60:	d1f2      	bne.n	8024d48 <__gnu_end_cleanup+0x14>
 8024d62:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8024d66:	2a43      	cmp	r2, #67	; 0x43
 8024d68:	d1ee      	bne.n	8024d48 <__gnu_end_cleanup+0x14>
 8024d6a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8024d6e:	2a43      	cmp	r2, #67	; 0x43
 8024d70:	d1ea      	bne.n	8024d48 <__gnu_end_cleanup+0x14>
 8024d72:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8024d76:	2a2b      	cmp	r2, #43	; 0x2b
 8024d78:	d1e6      	bne.n	8024d48 <__gnu_end_cleanup+0x14>
 8024d7a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8024d7e:	2a2b      	cmp	r2, #43	; 0x2b
 8024d80:	d1e2      	bne.n	8024d48 <__gnu_end_cleanup+0x14>
 8024d82:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8024d86:	2a01      	cmp	r2, #1
 8024d88:	d8de      	bhi.n	8024d48 <__gnu_end_cleanup+0x14>
 8024d8a:	69da      	ldr	r2, [r3, #28]
 8024d8c:	3a01      	subs	r2, #1
 8024d8e:	61da      	str	r2, [r3, #28]
 8024d90:	2a00      	cmp	r2, #0
 8024d92:	d1db      	bne.n	8024d4c <__gnu_end_cleanup+0x18>
 8024d94:	699a      	ldr	r2, [r3, #24]
 8024d96:	6082      	str	r2, [r0, #8]
 8024d98:	2200      	movs	r2, #0
 8024d9a:	f103 0020 	add.w	r0, r3, #32
 8024d9e:	619a      	str	r2, [r3, #24]
 8024da0:	bd08      	pop	{r3, pc}
 8024da2:	f7ff fe69 	bl	8024a78 <_ZSt9terminatev>
 8024da6:	bf00      	nop

08024da8 <__cxa_bad_cast>:
 8024da8:	b508      	push	{r3, lr}
 8024daa:	2004      	movs	r0, #4
 8024dac:	f000 fef2 	bl	8025b94 <__cxa_allocate_exception>
 8024db0:	4b05      	ldr	r3, [pc, #20]	; (8024dc8 <__cxa_bad_cast+0x20>)
 8024db2:	f648 21e0 	movw	r1, #35552	; 0x8ae0
 8024db6:	f645 2235 	movw	r2, #23093	; 0x5a35
 8024dba:	f6c0 0102 	movt	r1, #2050	; 0x802
 8024dbe:	f6c0 0202 	movt	r2, #2050	; 0x802
 8024dc2:	6003      	str	r3, [r0, #0]
 8024dc4:	f000 fc98 	bl	80256f8 <__cxa_throw>
 8024dc8:	08028b00 	.word	0x08028b00

08024dcc <__cxa_bad_typeid>:
 8024dcc:	b508      	push	{r3, lr}
 8024dce:	2004      	movs	r0, #4
 8024dd0:	f000 fee0 	bl	8025b94 <__cxa_allocate_exception>
 8024dd4:	4b05      	ldr	r3, [pc, #20]	; (8024dec <__cxa_bad_typeid+0x20>)
 8024dd6:	f648 3138 	movw	r1, #35640	; 0x8b38
 8024dda:	f645 2271 	movw	r2, #23153	; 0x5a71
 8024dde:	f6c0 0102 	movt	r1, #2050	; 0x802
 8024de2:	f6c0 0202 	movt	r2, #2050	; 0x802
 8024de6:	6003      	str	r3, [r0, #0]
 8024de8:	f000 fc86 	bl	80256f8 <__cxa_throw>
 8024dec:	08028b28 	.word	0x08028b28

08024df0 <__cxa_call_terminate>:
 8024df0:	b510      	push	{r4, lr}
 8024df2:	4604      	mov	r4, r0
 8024df4:	b120      	cbz	r0, 8024e00 <__cxa_call_terminate+0x10>
 8024df6:	f000 f8af 	bl	8024f58 <__cxa_begin_catch>
 8024dfa:	7823      	ldrb	r3, [r4, #0]
 8024dfc:	2b47      	cmp	r3, #71	; 0x47
 8024dfe:	d001      	beq.n	8024e04 <__cxa_call_terminate+0x14>
 8024e00:	f7ff fe3a 	bl	8024a78 <_ZSt9terminatev>
 8024e04:	7863      	ldrb	r3, [r4, #1]
 8024e06:	2b4e      	cmp	r3, #78	; 0x4e
 8024e08:	d1fa      	bne.n	8024e00 <__cxa_call_terminate+0x10>
 8024e0a:	78a3      	ldrb	r3, [r4, #2]
 8024e0c:	2b55      	cmp	r3, #85	; 0x55
 8024e0e:	d1f7      	bne.n	8024e00 <__cxa_call_terminate+0x10>
 8024e10:	78e3      	ldrb	r3, [r4, #3]
 8024e12:	2b43      	cmp	r3, #67	; 0x43
 8024e14:	d1f4      	bne.n	8024e00 <__cxa_call_terminate+0x10>
 8024e16:	7923      	ldrb	r3, [r4, #4]
 8024e18:	2b43      	cmp	r3, #67	; 0x43
 8024e1a:	d1f1      	bne.n	8024e00 <__cxa_call_terminate+0x10>
 8024e1c:	7963      	ldrb	r3, [r4, #5]
 8024e1e:	2b2b      	cmp	r3, #43	; 0x2b
 8024e20:	d1ee      	bne.n	8024e00 <__cxa_call_terminate+0x10>
 8024e22:	79a3      	ldrb	r3, [r4, #6]
 8024e24:	2b2b      	cmp	r3, #43	; 0x2b
 8024e26:	d1eb      	bne.n	8024e00 <__cxa_call_terminate+0x10>
 8024e28:	79e3      	ldrb	r3, [r4, #7]
 8024e2a:	2b01      	cmp	r3, #1
 8024e2c:	d8e8      	bhi.n	8024e00 <__cxa_call_terminate+0x10>
 8024e2e:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8024e32:	f7ff fe0d 	bl	8024a50 <_ZN10__cxxabiv111__terminateEPFvvE>
 8024e36:	bf00      	nop

08024e38 <__cxa_call_unexpected>:
 8024e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e3c:	b085      	sub	sp, #20
 8024e3e:	7803      	ldrb	r3, [r0, #0]
 8024e40:	2b47      	cmp	r3, #71	; 0x47
 8024e42:	d010      	beq.n	8024e66 <__cxa_call_unexpected+0x2e>
 8024e44:	2400      	movs	r4, #0
 8024e46:	f04f 0801 	mov.w	r8, #1
 8024e4a:	46a1      	mov	r9, r4
 8024e4c:	4625      	mov	r5, r4
 8024e4e:	4626      	mov	r6, r4
 8024e50:	4627      	mov	r7, r4
 8024e52:	f000 f881 	bl	8024f58 <__cxa_begin_catch>
 8024e56:	f1b8 0f00 	cmp.w	r8, #0
 8024e5a:	d001      	beq.n	8024e60 <__cxa_call_unexpected+0x28>
 8024e5c:	f7ff fe18 	bl	8024a90 <_ZSt10unexpectedv>
 8024e60:	4648      	mov	r0, r9
 8024e62:	f7ff fe11 	bl	8024a88 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8024e66:	7843      	ldrb	r3, [r0, #1]
 8024e68:	2b4e      	cmp	r3, #78	; 0x4e
 8024e6a:	d1eb      	bne.n	8024e44 <__cxa_call_unexpected+0xc>
 8024e6c:	7883      	ldrb	r3, [r0, #2]
 8024e6e:	2b55      	cmp	r3, #85	; 0x55
 8024e70:	d1e8      	bne.n	8024e44 <__cxa_call_unexpected+0xc>
 8024e72:	78c3      	ldrb	r3, [r0, #3]
 8024e74:	2b43      	cmp	r3, #67	; 0x43
 8024e76:	d1e5      	bne.n	8024e44 <__cxa_call_unexpected+0xc>
 8024e78:	7903      	ldrb	r3, [r0, #4]
 8024e7a:	2b43      	cmp	r3, #67	; 0x43
 8024e7c:	d1e2      	bne.n	8024e44 <__cxa_call_unexpected+0xc>
 8024e7e:	7943      	ldrb	r3, [r0, #5]
 8024e80:	2b2b      	cmp	r3, #43	; 0x2b
 8024e82:	d1df      	bne.n	8024e44 <__cxa_call_unexpected+0xc>
 8024e84:	7983      	ldrb	r3, [r0, #6]
 8024e86:	2b2b      	cmp	r3, #43	; 0x2b
 8024e88:	d1dc      	bne.n	8024e44 <__cxa_call_unexpected+0xc>
 8024e8a:	79c3      	ldrb	r3, [r0, #7]
 8024e8c:	2b01      	cmp	r3, #1
 8024e8e:	d8d9      	bhi.n	8024e44 <__cxa_call_unexpected+0xc>
 8024e90:	f850 9c18 	ldr.w	r9, [r0, #-24]
 8024e94:	f04f 0800 	mov.w	r8, #0
 8024e98:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8024e9c:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8024e9e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8024ea0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8024ea2:	e7d6      	b.n	8024e52 <__cxa_call_unexpected+0x1a>
 8024ea4:	f000 f858 	bl	8024f58 <__cxa_begin_catch>
 8024ea8:	f000 f936 	bl	8025118 <__cxa_get_globals_fast>
 8024eac:	6803      	ldr	r3, [r0, #0]
 8024eae:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8024eb2:	2a01      	cmp	r2, #1
 8024eb4:	bf18      	it	ne
 8024eb6:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 8024eba:	d100      	bne.n	8024ebe <__cxa_call_unexpected+0x86>
 8024ebc:	681a      	ldr	r2, [r3, #0]
 8024ebe:	f04f 0900 	mov.w	r9, #0
 8024ec2:	f10d 0a10 	add.w	sl, sp, #16
 8024ec6:	46a8      	mov	r8, r5
 8024ec8:	46cb      	mov	fp, r9
 8024eca:	f026 0603 	bic.w	r6, r6, #3
 8024ece:	3320      	adds	r3, #32
 8024ed0:	9600      	str	r6, [sp, #0]
 8024ed2:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8024ed6:	9301      	str	r3, [sp, #4]
 8024ed8:	455f      	cmp	r7, fp
 8024eda:	dd1e      	ble.n	8024f1a <__cxa_call_unexpected+0xe2>
 8024edc:	f8d8 5000 	ldr.w	r5, [r8]
 8024ee0:	b105      	cbz	r5, 8024ee4 <__cxa_call_unexpected+0xac>
 8024ee2:	4445      	add	r5, r8
 8024ee4:	9801      	ldr	r0, [sp, #4]
 8024ee6:	4629      	mov	r1, r5
 8024ee8:	2200      	movs	r2, #0
 8024eea:	4653      	mov	r3, sl
 8024eec:	f7ff fe7c 	bl	8024be8 <__cxa_type_match>
 8024ef0:	4602      	mov	r2, r0
 8024ef2:	b9f0      	cbnz	r0, 8024f32 <__cxa_call_unexpected+0xfa>
 8024ef4:	682b      	ldr	r3, [r5, #0]
 8024ef6:	4628      	mov	r0, r5
 8024ef8:	4913      	ldr	r1, [pc, #76]	; (8024f48 <__cxa_call_unexpected+0x110>)
 8024efa:	691e      	ldr	r6, [r3, #16]
 8024efc:	2301      	movs	r3, #1
 8024efe:	47b0      	blx	r6
 8024f00:	9b00      	ldr	r3, [sp, #0]
 8024f02:	f10b 0b01 	add.w	fp, fp, #1
 8024f06:	2800      	cmp	r0, #0
 8024f08:	bf18      	it	ne
 8024f0a:	f04f 0901 	movne.w	r9, #1
 8024f0e:	4498      	add	r8, r3
 8024f10:	e7e2      	b.n	8024ed8 <__cxa_call_unexpected+0xa0>
 8024f12:	f000 f821 	bl	8024f58 <__cxa_begin_catch>
 8024f16:	f7ff fdaf 	bl	8024a78 <_ZSt9terminatev>
 8024f1a:	f1b9 0f00 	cmp.w	r9, #0
 8024f1e:	d010      	beq.n	8024f42 <__cxa_call_unexpected+0x10a>
 8024f20:	2004      	movs	r0, #4
 8024f22:	f000 fe37 	bl	8025b94 <__cxa_allocate_exception>
 8024f26:	4b09      	ldr	r3, [pc, #36]	; (8024f4c <__cxa_call_unexpected+0x114>)
 8024f28:	4907      	ldr	r1, [pc, #28]	; (8024f48 <__cxa_call_unexpected+0x110>)
 8024f2a:	4a09      	ldr	r2, [pc, #36]	; (8024f50 <__cxa_call_unexpected+0x118>)
 8024f2c:	6003      	str	r3, [r0, #0]
 8024f2e:	f000 fbe3 	bl	80256f8 <__cxa_throw>
 8024f32:	f000 fc1d 	bl	8025770 <__cxa_rethrow>
 8024f36:	f000 f853 	bl	8024fe0 <__cxa_end_catch>
 8024f3a:	f000 f851 	bl	8024fe0 <__cxa_end_catch>
 8024f3e:	f7ff fe4d 	bl	8024bdc <__cxa_end_cleanup>
 8024f42:	4620      	mov	r0, r4
 8024f44:	f7ff fd84 	bl	8024a50 <_ZN10__cxxabiv111__terminateEPFvvE>
 8024f48:	080284c0 	.word	0x080284c0
 8024f4c:	08028468 	.word	0x08028468
 8024f50:	0802508d 	.word	0x0802508d

08024f54 <__cxa_get_exception_ptr>:
 8024f54:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8024f56:	4770      	bx	lr

08024f58 <__cxa_begin_catch>:
 8024f58:	b538      	push	{r3, r4, r5, lr}
 8024f5a:	4605      	mov	r5, r0
 8024f5c:	f000 f8e2 	bl	8025124 <__cxa_get_globals>
 8024f60:	f1a5 0320 	sub.w	r3, r5, #32
 8024f64:	782a      	ldrb	r2, [r5, #0]
 8024f66:	2a47      	cmp	r2, #71	; 0x47
 8024f68:	6804      	ldr	r4, [r0, #0]
 8024f6a:	d004      	beq.n	8024f76 <__cxa_begin_catch+0x1e>
 8024f6c:	2c00      	cmp	r4, #0
 8024f6e:	d12f      	bne.n	8024fd0 <__cxa_begin_catch+0x78>
 8024f70:	6003      	str	r3, [r0, #0]
 8024f72:	4620      	mov	r0, r4
 8024f74:	bd38      	pop	{r3, r4, r5, pc}
 8024f76:	786a      	ldrb	r2, [r5, #1]
 8024f78:	2a4e      	cmp	r2, #78	; 0x4e
 8024f7a:	d1f7      	bne.n	8024f6c <__cxa_begin_catch+0x14>
 8024f7c:	78aa      	ldrb	r2, [r5, #2]
 8024f7e:	2a55      	cmp	r2, #85	; 0x55
 8024f80:	d1f4      	bne.n	8024f6c <__cxa_begin_catch+0x14>
 8024f82:	78ea      	ldrb	r2, [r5, #3]
 8024f84:	2a43      	cmp	r2, #67	; 0x43
 8024f86:	d1f1      	bne.n	8024f6c <__cxa_begin_catch+0x14>
 8024f88:	792a      	ldrb	r2, [r5, #4]
 8024f8a:	2a43      	cmp	r2, #67	; 0x43
 8024f8c:	d1ee      	bne.n	8024f6c <__cxa_begin_catch+0x14>
 8024f8e:	796a      	ldrb	r2, [r5, #5]
 8024f90:	2a2b      	cmp	r2, #43	; 0x2b
 8024f92:	d1eb      	bne.n	8024f6c <__cxa_begin_catch+0x14>
 8024f94:	79aa      	ldrb	r2, [r5, #6]
 8024f96:	2a2b      	cmp	r2, #43	; 0x2b
 8024f98:	d1e8      	bne.n	8024f6c <__cxa_begin_catch+0x14>
 8024f9a:	79ea      	ldrb	r2, [r5, #7]
 8024f9c:	2a01      	cmp	r2, #1
 8024f9e:	d8e5      	bhi.n	8024f6c <__cxa_begin_catch+0x14>
 8024fa0:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8024fa4:	2900      	cmp	r1, #0
 8024fa6:	db10      	blt.n	8024fca <__cxa_begin_catch+0x72>
 8024fa8:	3101      	adds	r1, #1
 8024faa:	6842      	ldr	r2, [r0, #4]
 8024fac:	f845 1c0c 	str.w	r1, [r5, #-12]
 8024fb0:	3a01      	subs	r2, #1
 8024fb2:	42a3      	cmp	r3, r4
 8024fb4:	6042      	str	r2, [r0, #4]
 8024fb6:	bf1c      	itt	ne
 8024fb8:	f845 4c10 	strne.w	r4, [r5, #-16]
 8024fbc:	6003      	strne	r3, [r0, #0]
 8024fbe:	4628      	mov	r0, r5
 8024fc0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8024fc2:	f7e1 fa87 	bl	80064d4 <_Unwind_Complete>
 8024fc6:	4620      	mov	r0, r4
 8024fc8:	bd38      	pop	{r3, r4, r5, pc}
 8024fca:	f1c1 0101 	rsb	r1, r1, #1
 8024fce:	e7ec      	b.n	8024faa <__cxa_begin_catch+0x52>
 8024fd0:	f7ff fd52 	bl	8024a78 <_ZSt9terminatev>
 8024fd4:	3101      	adds	r1, #1
 8024fd6:	d001      	beq.n	8024fdc <__cxa_begin_catch+0x84>
 8024fd8:	f7ff fe00 	bl	8024bdc <__cxa_end_cleanup>
 8024fdc:	f7ff ff2c 	bl	8024e38 <__cxa_call_unexpected>

08024fe0 <__cxa_end_catch>:
 8024fe0:	b508      	push	{r3, lr}
 8024fe2:	f000 f899 	bl	8025118 <__cxa_get_globals_fast>
 8024fe6:	6803      	ldr	r3, [r0, #0]
 8024fe8:	4602      	mov	r2, r0
 8024fea:	2b00      	cmp	r3, #0
 8024fec:	d03f      	beq.n	802506e <__cxa_end_catch+0x8e>
 8024fee:	f893 1020 	ldrb.w	r1, [r3, #32]
 8024ff2:	2947      	cmp	r1, #71	; 0x47
 8024ff4:	d007      	beq.n	8025006 <__cxa_end_catch+0x26>
 8024ff6:	f103 0020 	add.w	r0, r3, #32
 8024ffa:	2300      	movs	r3, #0
 8024ffc:	6013      	str	r3, [r2, #0]
 8024ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8025002:	f7e1 ba69 	b.w	80064d8 <_Unwind_DeleteException>
 8025006:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 802500a:	294e      	cmp	r1, #78	; 0x4e
 802500c:	d1f3      	bne.n	8024ff6 <__cxa_end_catch+0x16>
 802500e:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8025012:	2955      	cmp	r1, #85	; 0x55
 8025014:	d1ef      	bne.n	8024ff6 <__cxa_end_catch+0x16>
 8025016:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 802501a:	2943      	cmp	r1, #67	; 0x43
 802501c:	d1eb      	bne.n	8024ff6 <__cxa_end_catch+0x16>
 802501e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8025022:	2943      	cmp	r1, #67	; 0x43
 8025024:	d1e7      	bne.n	8024ff6 <__cxa_end_catch+0x16>
 8025026:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 802502a:	292b      	cmp	r1, #43	; 0x2b
 802502c:	d1e3      	bne.n	8024ff6 <__cxa_end_catch+0x16>
 802502e:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8025032:	292b      	cmp	r1, #43	; 0x2b
 8025034:	d1df      	bne.n	8024ff6 <__cxa_end_catch+0x16>
 8025036:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 802503a:	2901      	cmp	r1, #1
 802503c:	d8db      	bhi.n	8024ff6 <__cxa_end_catch+0x16>
 802503e:	6959      	ldr	r1, [r3, #20]
 8025040:	2900      	cmp	r1, #0
 8025042:	db05      	blt.n	8025050 <__cxa_end_catch+0x70>
 8025044:	3901      	subs	r1, #1
 8025046:	d008      	beq.n	802505a <__cxa_end_catch+0x7a>
 8025048:	1c4a      	adds	r2, r1, #1
 802504a:	d00e      	beq.n	802506a <__cxa_end_catch+0x8a>
 802504c:	6159      	str	r1, [r3, #20]
 802504e:	bd08      	pop	{r3, pc}
 8025050:	3101      	adds	r1, #1
 8025052:	d1fb      	bne.n	802504c <__cxa_end_catch+0x6c>
 8025054:	6918      	ldr	r0, [r3, #16]
 8025056:	6010      	str	r0, [r2, #0]
 8025058:	e7f8      	b.n	802504c <__cxa_end_catch+0x6c>
 802505a:	6919      	ldr	r1, [r3, #16]
 802505c:	f103 0020 	add.w	r0, r3, #32
 8025060:	6011      	str	r1, [r2, #0]
 8025062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8025066:	f7e1 ba37 	b.w	80064d8 <_Unwind_DeleteException>
 802506a:	f7ff fd05 	bl	8024a78 <_ZSt9terminatev>
 802506e:	bd08      	pop	{r3, pc}

08025070 <_ZSt18uncaught_exceptionv>:
 8025070:	b508      	push	{r3, lr}
 8025072:	f000 f857 	bl	8025124 <__cxa_get_globals>
 8025076:	6840      	ldr	r0, [r0, #4]
 8025078:	3000      	adds	r0, #0
 802507a:	bf18      	it	ne
 802507c:	2001      	movne	r0, #1
 802507e:	bd08      	pop	{r3, pc}

08025080 <_ZNSt9exceptionD1Ev>:
 8025080:	4b01      	ldr	r3, [pc, #4]	; (8025088 <_ZNSt9exceptionD1Ev+0x8>)
 8025082:	6003      	str	r3, [r0, #0]
 8025084:	4770      	bx	lr
 8025086:	bf00      	nop
 8025088:	080283d8 	.word	0x080283d8

0802508c <_ZNSt13bad_exceptionD1Ev>:
 802508c:	4b01      	ldr	r3, [pc, #4]	; (8025094 <_ZNSt13bad_exceptionD1Ev+0x8>)
 802508e:	6003      	str	r3, [r0, #0]
 8025090:	4770      	bx	lr
 8025092:	bf00      	nop
 8025094:	080283d8 	.word	0x080283d8

08025098 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 8025098:	4b01      	ldr	r3, [pc, #4]	; (80250a0 <_ZN10__cxxabiv115__forced_unwindD1Ev+0x8>)
 802509a:	6003      	str	r3, [r0, #0]
 802509c:	4770      	bx	lr
 802509e:	bf00      	nop
 80250a0:	080283c0 	.word	0x080283c0

080250a4 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 80250a4:	4b01      	ldr	r3, [pc, #4]	; (80250ac <_ZN10__cxxabiv119__foreign_exceptionD1Ev+0x8>)
 80250a6:	6003      	str	r3, [r0, #0]
 80250a8:	4770      	bx	lr
 80250aa:	bf00      	nop
 80250ac:	08028490 	.word	0x08028490

080250b0 <_ZNKSt9exception4whatEv>:
 80250b0:	f248 400c 	movw	r0, #33804	; 0x840c
 80250b4:	f6c0 0002 	movt	r0, #2050	; 0x802
 80250b8:	4770      	bx	lr
 80250ba:	bf00      	nop

080250bc <_ZNKSt13bad_exception4whatEv>:
 80250bc:	f248 401c 	movw	r0, #33820	; 0x841c
 80250c0:	f6c0 0002 	movt	r0, #2050	; 0x802
 80250c4:	4770      	bx	lr
 80250c6:	bf00      	nop

080250c8 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 80250c8:	4b03      	ldr	r3, [pc, #12]	; (80250d8 <_ZN10__cxxabiv119__foreign_exceptionD0Ev+0x10>)
 80250ca:	b510      	push	{r4, lr}
 80250cc:	4604      	mov	r4, r0
 80250ce:	6003      	str	r3, [r0, #0]
 80250d0:	f7ff fcae 	bl	8024a30 <_ZdlPv>
 80250d4:	4620      	mov	r0, r4
 80250d6:	bd10      	pop	{r4, pc}
 80250d8:	08028490 	.word	0x08028490

080250dc <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 80250dc:	4b03      	ldr	r3, [pc, #12]	; (80250ec <_ZN10__cxxabiv115__forced_unwindD0Ev+0x10>)
 80250de:	b510      	push	{r4, lr}
 80250e0:	4604      	mov	r4, r0
 80250e2:	6003      	str	r3, [r0, #0]
 80250e4:	f7ff fca4 	bl	8024a30 <_ZdlPv>
 80250e8:	4620      	mov	r0, r4
 80250ea:	bd10      	pop	{r4, pc}
 80250ec:	080283c0 	.word	0x080283c0

080250f0 <_ZNSt13bad_exceptionD0Ev>:
 80250f0:	4b03      	ldr	r3, [pc, #12]	; (8025100 <_ZNSt13bad_exceptionD0Ev+0x10>)
 80250f2:	b510      	push	{r4, lr}
 80250f4:	4604      	mov	r4, r0
 80250f6:	6003      	str	r3, [r0, #0]
 80250f8:	f7ff fc9a 	bl	8024a30 <_ZdlPv>
 80250fc:	4620      	mov	r0, r4
 80250fe:	bd10      	pop	{r4, pc}
 8025100:	080283d8 	.word	0x080283d8

08025104 <_ZNSt9exceptionD0Ev>:
 8025104:	4b03      	ldr	r3, [pc, #12]	; (8025114 <_ZNSt9exceptionD0Ev+0x10>)
 8025106:	b510      	push	{r4, lr}
 8025108:	4604      	mov	r4, r0
 802510a:	6003      	str	r3, [r0, #0]
 802510c:	f7ff fc90 	bl	8024a30 <_ZdlPv>
 8025110:	4620      	mov	r0, r4
 8025112:	bd10      	pop	{r4, pc}
 8025114:	080283d8 	.word	0x080283d8

08025118 <__cxa_get_globals_fast>:
 8025118:	f640 30b4 	movw	r0, #2996	; 0xbb4
 802511c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8025120:	4770      	bx	lr
 8025122:	bf00      	nop

08025124 <__cxa_get_globals>:
 8025124:	f640 30b4 	movw	r0, #2996	; 0xbb4
 8025128:	f2c2 0000 	movt	r0, #8192	; 0x2000
 802512c:	4770      	bx	lr
 802512e:	bf00      	nop

08025130 <_ZL12read_sleb128PKhPl>:
 8025130:	2300      	movs	r3, #0
 8025132:	b470      	push	{r4, r5, r6}
 8025134:	461a      	mov	r2, r3
 8025136:	4604      	mov	r4, r0
 8025138:	f814 5b01 	ldrb.w	r5, [r4], #1
 802513c:	f005 067f 	and.w	r6, r5, #127	; 0x7f
 8025140:	4620      	mov	r0, r4
 8025142:	4096      	lsls	r6, r2
 8025144:	3207      	adds	r2, #7
 8025146:	f015 0f80 	tst.w	r5, #128	; 0x80
 802514a:	ea43 0306 	orr.w	r3, r3, r6
 802514e:	d1f3      	bne.n	8025138 <_ZL12read_sleb128PKhPl+0x8>
 8025150:	2a1f      	cmp	r2, #31
 8025152:	d807      	bhi.n	8025164 <_ZL12read_sleb128PKhPl+0x34>
 8025154:	f015 0f40 	tst.w	r5, #64	; 0x40
 8025158:	d004      	beq.n	8025164 <_ZL12read_sleb128PKhPl+0x34>
 802515a:	f04f 34ff 	mov.w	r4, #4294967295
 802515e:	fa14 f202 	lsls.w	r2, r4, r2
 8025162:	4313      	orrs	r3, r2
 8025164:	600b      	str	r3, [r1, #0]
 8025166:	bc70      	pop	{r4, r5, r6}
 8025168:	4770      	bx	lr
 802516a:	bf00      	nop

0802516c <_ZL28read_encoded_value_with_basehjPKhPj>:
 802516c:	2850      	cmp	r0, #80	; 0x50
 802516e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025170:	4604      	mov	r4, r0
 8025172:	b085      	sub	sp, #20
 8025174:	460d      	mov	r5, r1
 8025176:	d053      	beq.n	8025220 <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
 8025178:	f000 010f 	and.w	r1, r0, #15
 802517c:	290c      	cmp	r1, #12
 802517e:	d837      	bhi.n	80251f0 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8025180:	e8df f001 	tbb	[pc, r1]
 8025184:	07483807 	.word	0x07483807
 8025188:	36363620 	.word	0x36363620
 802518c:	07252c36 	.word	0x07252c36
 8025190:	20          	.byte	0x20
 8025191:	00          	.byte	0x00
 8025192:	f892 c001 	ldrb.w	ip, [r2, #1]
 8025196:	1d10      	adds	r0, r2, #4
 8025198:	7811      	ldrb	r1, [r2, #0]
 802519a:	7897      	ldrb	r7, [r2, #2]
 802519c:	78d6      	ldrb	r6, [r2, #3]
 802519e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 80251a2:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80251a6:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80251aa:	b141      	cbz	r1, 80251be <_ZL28read_encoded_value_with_basehjPKhPj+0x52>
 80251ac:	f004 0670 	and.w	r6, r4, #112	; 0x70
 80251b0:	2e10      	cmp	r6, #16
 80251b2:	bf08      	it	eq
 80251b4:	4615      	moveq	r5, r2
 80251b6:	0622      	lsls	r2, r4, #24
 80251b8:	4429      	add	r1, r5
 80251ba:	bf48      	it	mi
 80251bc:	6809      	ldrmi	r1, [r1, #0]
 80251be:	6019      	str	r1, [r3, #0]
 80251c0:	b005      	add	sp, #20
 80251c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80251c4:	f892 c001 	ldrb.w	ip, [r2, #1]
 80251c8:	f102 0008 	add.w	r0, r2, #8
 80251cc:	e7e4      	b.n	8025198 <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 80251ce:	7856      	ldrb	r6, [r2, #1]
 80251d0:	1c90      	adds	r0, r2, #2
 80251d2:	7811      	ldrb	r1, [r2, #0]
 80251d4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80251d8:	b209      	sxth	r1, r1
 80251da:	e7e6      	b.n	80251aa <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 80251dc:	4610      	mov	r0, r2
 80251de:	a903      	add	r1, sp, #12
 80251e0:	9201      	str	r2, [sp, #4]
 80251e2:	9300      	str	r3, [sp, #0]
 80251e4:	f7ff ffa4 	bl	8025130 <_ZL12read_sleb128PKhPl>
 80251e8:	9903      	ldr	r1, [sp, #12]
 80251ea:	9a01      	ldr	r2, [sp, #4]
 80251ec:	9b00      	ldr	r3, [sp, #0]
 80251ee:	e7dc      	b.n	80251aa <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 80251f0:	f7e1 fc7a 	bl	8006ae8 <abort>
 80251f4:	2100      	movs	r1, #0
 80251f6:	4610      	mov	r0, r2
 80251f8:	460e      	mov	r6, r1
 80251fa:	f810 7b01 	ldrb.w	r7, [r0], #1
 80251fe:	f007 0c7f 	and.w	ip, r7, #127	; 0x7f
 8025202:	fa0c fc06 	lsl.w	ip, ip, r6
 8025206:	3607      	adds	r6, #7
 8025208:	f017 0f80 	tst.w	r7, #128	; 0x80
 802520c:	ea41 010c 	orr.w	r1, r1, ip
 8025210:	d1f3      	bne.n	80251fa <_ZL28read_encoded_value_with_basehjPKhPj+0x8e>
 8025212:	e7ca      	b.n	80251aa <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8025214:	7856      	ldrb	r6, [r2, #1]
 8025216:	1c90      	adds	r0, r2, #2
 8025218:	7811      	ldrb	r1, [r2, #0]
 802521a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 802521e:	e7c4      	b.n	80251aa <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8025220:	1cd0      	adds	r0, r2, #3
 8025222:	f020 0003 	bic.w	r0, r0, #3
 8025226:	f850 1b04 	ldr.w	r1, [r0], #4
 802522a:	e7c8      	b.n	80251be <_ZL28read_encoded_value_with_basehjPKhPj+0x52>

0802522c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 802522c:	28ff      	cmp	r0, #255	; 0xff
 802522e:	b508      	push	{r3, lr}
 8025230:	d00d      	beq.n	802524e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 8025232:	f000 0370 	and.w	r3, r0, #112	; 0x70
 8025236:	2b20      	cmp	r3, #32
 8025238:	d019      	beq.n	802526e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
 802523a:	dd07      	ble.n	802524c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 802523c:	2b40      	cmp	r3, #64	; 0x40
 802523e:	d011      	beq.n	8025264 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8025240:	2b50      	cmp	r3, #80	; 0x50
 8025242:	d004      	beq.n	802524e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 8025244:	2b30      	cmp	r3, #48	; 0x30
 8025246:	d008      	beq.n	802525a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8025248:	f7e1 fc4e 	bl	8006ae8 <abort>
 802524c:	b90b      	cbnz	r3, 8025252 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 802524e:	2000      	movs	r0, #0
 8025250:	bd08      	pop	{r3, pc}
 8025252:	2b10      	cmp	r3, #16
 8025254:	d0fb      	beq.n	802524e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
 8025256:	f7e1 fc47 	bl	8006ae8 <abort>
 802525a:	4608      	mov	r0, r1
 802525c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8025260:	f7e1 bc3a 	b.w	8006ad8 <_Unwind_GetDataRelBase>
 8025264:	4608      	mov	r0, r1
 8025266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802526a:	f7e1 bc25 	b.w	8006ab8 <_Unwind_GetRegionStart>
 802526e:	4608      	mov	r0, r1
 8025270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8025274:	f7e1 bc34 	b.w	8006ae0 <_Unwind_GetTextRelBase>

08025278 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>:
 8025278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802527a:	4605      	mov	r5, r0
 802527c:	460e      	mov	r6, r1
 802527e:	4614      	mov	r4, r2
 8025280:	b10d      	cbz	r5, 8025286 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0xe>
 8025282:	f7e1 fc19 	bl	8006ab8 <_Unwind_GetRegionStart>
 8025286:	6020      	str	r0, [r4, #0]
 8025288:	f816 7b01 	ldrb.w	r7, [r6], #1
 802528c:	2fff      	cmp	r7, #255	; 0xff
 802528e:	bf08      	it	eq
 8025290:	6060      	streq	r0, [r4, #4]
 8025292:	d00a      	beq.n	80252aa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x32>
 8025294:	4629      	mov	r1, r5
 8025296:	4638      	mov	r0, r7
 8025298:	f7ff ffc8 	bl	802522c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 802529c:	4632      	mov	r2, r6
 802529e:	1d23      	adds	r3, r4, #4
 80252a0:	4601      	mov	r1, r0
 80252a2:	4638      	mov	r0, r7
 80252a4:	f7ff ff62 	bl	802516c <_ZL28read_encoded_value_with_basehjPKhPj>
 80252a8:	4606      	mov	r6, r0
 80252aa:	f816 3b01 	ldrb.w	r3, [r6], #1
 80252ae:	2bff      	cmp	r3, #255	; 0xff
 80252b0:	7523      	strb	r3, [r4, #20]
 80252b2:	d023      	beq.n	80252fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x84>
 80252b4:	2000      	movs	r0, #0
 80252b6:	4602      	mov	r2, r0
 80252b8:	4633      	mov	r3, r6
 80252ba:	f813 1b01 	ldrb.w	r1, [r3], #1
 80252be:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80252c2:	461e      	mov	r6, r3
 80252c4:	4095      	lsls	r5, r2
 80252c6:	3207      	adds	r2, #7
 80252c8:	0609      	lsls	r1, r1, #24
 80252ca:	ea40 0005 	orr.w	r0, r0, r5
 80252ce:	d4f3      	bmi.n	80252b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x40>
 80252d0:	1818      	adds	r0, r3, r0
 80252d2:	60e0      	str	r0, [r4, #12]
 80252d4:	2100      	movs	r1, #0
 80252d6:	f816 2b01 	ldrb.w	r2, [r6], #1
 80252da:	460b      	mov	r3, r1
 80252dc:	7562      	strb	r2, [r4, #21]
 80252de:	4630      	mov	r0, r6
 80252e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80252e4:	f002 057f 	and.w	r5, r2, #127	; 0x7f
 80252e8:	4606      	mov	r6, r0
 80252ea:	409d      	lsls	r5, r3
 80252ec:	3307      	adds	r3, #7
 80252ee:	0612      	lsls	r2, r2, #24
 80252f0:	ea41 0105 	orr.w	r1, r1, r5
 80252f4:	d4f3      	bmi.n	80252de <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x66>
 80252f6:	1841      	adds	r1, r0, r1
 80252f8:	6121      	str	r1, [r4, #16]
 80252fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80252fc:	2300      	movs	r3, #0
 80252fe:	60e3      	str	r3, [r4, #12]
 8025300:	e7e8      	b.n	80252d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x5c>
 8025302:	bf00      	nop

08025304 <__gxx_personality_v0>:
 8025304:	f000 0303 	and.w	r3, r0, #3
 8025308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802530c:	2400      	movs	r4, #0
 802530e:	b093      	sub	sp, #76	; 0x4c
 8025310:	2b01      	cmp	r3, #1
 8025312:	4688      	mov	r8, r1
 8025314:	4617      	mov	r7, r2
 8025316:	940b      	str	r4, [sp, #44]	; 0x2c
 8025318:	f000 80b2 	beq.w	8025480 <__gxx_personality_v0+0x17c>
 802531c:	2b02      	cmp	r3, #2
 802531e:	f000 80a4 	beq.w	802546a <__gxx_personality_v0+0x166>
 8025322:	f000 0608 	and.w	r6, r0, #8
 8025326:	f04f 0a01 	mov.w	sl, #1
 802532a:	ad0e      	add	r5, sp, #56	; 0x38
 802532c:	2b00      	cmp	r3, #0
 802532e:	f040 8085 	bne.w	802543c <__gxx_personality_v0+0x138>
 8025332:	2100      	movs	r1, #0
 8025334:	220c      	movs	r2, #12
 8025336:	460b      	mov	r3, r1
 8025338:	4638      	mov	r0, r7
 802533a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802533e:	ea46 0a0a 	orr.w	sl, r6, sl
 8025342:	9500      	str	r5, [sp, #0]
 8025344:	f7e0 fd8c 	bl	8005e60 <_Unwind_VRS_Set>
 8025348:	4638      	mov	r0, r7
 802534a:	f7e1 fbbb 	bl	8006ac4 <_Unwind_GetLanguageSpecificData>
 802534e:	4681      	mov	r9, r0
 8025350:	2800      	cmp	r0, #0
 8025352:	f000 808a 	beq.w	802546a <__gxx_personality_v0+0x166>
 8025356:	4601      	mov	r1, r0
 8025358:	aa05      	add	r2, sp, #20
 802535a:	4638      	mov	r0, r7
 802535c:	f7ff ff8c 	bl	8025278 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 8025360:	4639      	mov	r1, r7
 8025362:	4604      	mov	r4, r0
 8025364:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8025368:	f7ff ff60 	bl	802522c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 802536c:	2100      	movs	r1, #0
 802536e:	460b      	mov	r3, r1
 8025370:	220f      	movs	r2, #15
 8025372:	9500      	str	r5, [sp, #0]
 8025374:	4606      	mov	r6, r0
 8025376:	4638      	mov	r0, r7
 8025378:	9607      	str	r6, [sp, #28]
 802537a:	f7e0 fd4b 	bl	8005e14 <_Unwind_VRS_Get>
 802537e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025382:	f026 0601 	bic.w	r6, r6, #1
 8025386:	3e01      	subs	r6, #1
 8025388:	429c      	cmp	r4, r3
 802538a:	d23a      	bcs.n	8025402 <__gxx_personality_v0+0xfe>
 802538c:	f89d b029 	ldrb.w	fp, [sp, #41]	; 0x29
 8025390:	2100      	movs	r1, #0
 8025392:	4658      	mov	r0, fp
 8025394:	f7ff ff4a 	bl	802522c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8025398:	4622      	mov	r2, r4
 802539a:	ab0c      	add	r3, sp, #48	; 0x30
 802539c:	4601      	mov	r1, r0
 802539e:	4658      	mov	r0, fp
 80253a0:	f7ff fee4 	bl	802516c <_ZL28read_encoded_value_with_basehjPKhPj>
 80253a4:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 80253a8:	2100      	movs	r1, #0
 80253aa:	4683      	mov	fp, r0
 80253ac:	4620      	mov	r0, r4
 80253ae:	f7ff ff3d 	bl	802522c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80253b2:	465a      	mov	r2, fp
 80253b4:	ab0d      	add	r3, sp, #52	; 0x34
 80253b6:	4601      	mov	r1, r0
 80253b8:	4620      	mov	r0, r4
 80253ba:	f7ff fed7 	bl	802516c <_ZL28read_encoded_value_with_basehjPKhPj>
 80253be:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 80253c2:	2100      	movs	r1, #0
 80253c4:	4683      	mov	fp, r0
 80253c6:	4620      	mov	r0, r4
 80253c8:	f7ff ff30 	bl	802522c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80253cc:	462b      	mov	r3, r5
 80253ce:	465a      	mov	r2, fp
 80253d0:	4601      	mov	r1, r0
 80253d2:	4620      	mov	r0, r4
 80253d4:	f7ff feca 	bl	802516c <_ZL28read_encoded_value_with_basehjPKhPj>
 80253d8:	2100      	movs	r1, #0
 80253da:	460b      	mov	r3, r1
 80253dc:	4604      	mov	r4, r0
 80253de:	f814 2b01 	ldrb.w	r2, [r4], #1
 80253e2:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 80253e6:	4098      	lsls	r0, r3
 80253e8:	3307      	adds	r3, #7
 80253ea:	4301      	orrs	r1, r0
 80253ec:	0610      	lsls	r0, r2, #24
 80253ee:	d4f6      	bmi.n	80253de <__gxx_personality_v0+0xda>
 80253f0:	9b05      	ldr	r3, [sp, #20]
 80253f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80253f4:	18d3      	adds	r3, r2, r3
 80253f6:	429e      	cmp	r6, r3
 80253f8:	d222      	bcs.n	8025440 <__gxx_personality_v0+0x13c>
 80253fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80253fc:	4623      	mov	r3, r4
 80253fe:	429c      	cmp	r4, r3
 8025400:	d3c4      	bcc.n	802538c <__gxx_personality_v0+0x88>
 8025402:	2400      	movs	r4, #0
 8025404:	2601      	movs	r6, #1
 8025406:	46a3      	mov	fp, r4
 8025408:	f01a 0f01 	tst.w	sl, #1
 802540c:	d061      	beq.n	80254d2 <__gxx_personality_v0+0x1ce>
 802540e:	2e02      	cmp	r6, #2
 8025410:	d02b      	beq.n	802546a <__gxx_personality_v0+0x166>
 8025412:	2100      	movs	r1, #0
 8025414:	4638      	mov	r0, r7
 8025416:	460b      	mov	r3, r1
 8025418:	220d      	movs	r2, #13
 802541a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802541c:	9500      	str	r5, [sp, #0]
 802541e:	f7e0 fcf9 	bl	8005e14 <_Unwind_VRS_Get>
 8025422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025424:	2006      	movs	r0, #6
 8025426:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
 802542a:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 802542e:	f8c8 3020 	str.w	r3, [r8, #32]
 8025432:	f8c8 902c 	str.w	r9, [r8, #44]	; 0x2c
 8025436:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
 802543a:	e01e      	b.n	802547a <__gxx_personality_v0+0x176>
 802543c:	f7e1 fb54 	bl	8006ae8 <abort>
 8025440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025442:	189b      	adds	r3, r3, r2
 8025444:	429e      	cmp	r6, r3
 8025446:	d301      	bcc.n	802544c <__gxx_personality_v0+0x148>
 8025448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802544a:	e79d      	b.n	8025388 <__gxx_personality_v0+0x84>
 802544c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802544e:	469b      	mov	fp, r3
 8025450:	b113      	cbz	r3, 8025458 <__gxx_personality_v0+0x154>
 8025452:	9a06      	ldr	r2, [sp, #24]
 8025454:	eb03 0b02 	add.w	fp, r3, r2
 8025458:	4608      	mov	r0, r1
 802545a:	b111      	cbz	r1, 8025462 <__gxx_personality_v0+0x15e>
 802545c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802545e:	3901      	subs	r1, #1
 8025460:	1840      	adds	r0, r0, r1
 8025462:	f1bb 0f00 	cmp.w	fp, #0
 8025466:	f040 808c 	bne.w	8025582 <__gxx_personality_v0+0x27e>
 802546a:	4640      	mov	r0, r8
 802546c:	4639      	mov	r1, r7
 802546e:	f7e1 fb0d 	bl	8006a8c <__gnu_unwind_frame>
 8025472:	2800      	cmp	r0, #0
 8025474:	bf0c      	ite	eq
 8025476:	2008      	moveq	r0, #8
 8025478:	2009      	movne	r0, #9
 802547a:	b013      	add	sp, #76	; 0x4c
 802547c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025480:	f010 0608 	ands.w	r6, r0, #8
 8025484:	bf18      	it	ne
 8025486:	ad0e      	addne	r5, sp, #56	; 0x38
 8025488:	d002      	beq.n	8025490 <__gxx_personality_v0+0x18c>
 802548a:	f04f 0a02 	mov.w	sl, #2
 802548e:	e750      	b.n	8025332 <__gxx_personality_v0+0x2e>
 8025490:	4610      	mov	r0, r2
 8025492:	4633      	mov	r3, r6
 8025494:	220d      	movs	r2, #13
 8025496:	4631      	mov	r1, r6
 8025498:	f8d8 4020 	ldr.w	r4, [r8, #32]
 802549c:	ad0e      	add	r5, sp, #56	; 0x38
 802549e:	9500      	str	r5, [sp, #0]
 80254a0:	f7e0 fcb8 	bl	8005e14 <_Unwind_VRS_Get>
 80254a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80254a6:	429c      	cmp	r4, r3
 80254a8:	d1ef      	bne.n	802548a <__gxx_personality_v0+0x186>
 80254aa:	f108 0428 	add.w	r4, r8, #40	; 0x28
 80254ae:	4631      	mov	r1, r6
 80254b0:	4633      	mov	r3, r6
 80254b2:	4638      	mov	r0, r7
 80254b4:	220c      	movs	r2, #12
 80254b6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80254ba:	9500      	str	r5, [sp, #0]
 80254bc:	f7e0 fcd0 	bl	8005e60 <_Unwind_VRS_Set>
 80254c0:	e894 0a10 	ldmia.w	r4, {r4, r9, fp}
 80254c4:	2603      	movs	r6, #3
 80254c6:	f1bb 0f00 	cmp.w	fp, #0
 80254ca:	d13a      	bne.n	8025542 <__gxx_personality_v0+0x23e>
 80254cc:	4640      	mov	r0, r8
 80254ce:	f7ff fc8f 	bl	8024df0 <__cxa_call_terminate>
 80254d2:	f01a 0f08 	tst.w	sl, #8
 80254d6:	d032      	beq.n	802553e <__gxx_personality_v0+0x23a>
 80254d8:	2e01      	cmp	r6, #1
 80254da:	f000 80e3 	beq.w	80256a4 <__gxx_personality_v0+0x3a0>
 80254de:	2c00      	cmp	r4, #0
 80254e0:	f2c0 80e2 	blt.w	80256a8 <__gxx_personality_v0+0x3a4>
 80254e4:	2100      	movs	r1, #0
 80254e6:	4638      	mov	r0, r7
 80254e8:	460a      	mov	r2, r1
 80254ea:	460b      	mov	r3, r1
 80254ec:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80254f0:	9500      	str	r5, [sp, #0]
 80254f2:	f7e0 fcb5 	bl	8005e60 <_Unwind_VRS_Set>
 80254f6:	2100      	movs	r1, #0
 80254f8:	2201      	movs	r2, #1
 80254fa:	460b      	mov	r3, r1
 80254fc:	4638      	mov	r0, r7
 80254fe:	940e      	str	r4, [sp, #56]	; 0x38
 8025500:	9500      	str	r5, [sp, #0]
 8025502:	f7e0 fcad 	bl	8005e60 <_Unwind_VRS_Set>
 8025506:	2100      	movs	r1, #0
 8025508:	220f      	movs	r2, #15
 802550a:	460b      	mov	r3, r1
 802550c:	4638      	mov	r0, r7
 802550e:	9500      	str	r5, [sp, #0]
 8025510:	f7e0 fc80 	bl	8005e14 <_Unwind_VRS_Get>
 8025514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025516:	2100      	movs	r1, #0
 8025518:	220f      	movs	r2, #15
 802551a:	4638      	mov	r0, r7
 802551c:	f003 0301 	and.w	r3, r3, #1
 8025520:	9500      	str	r5, [sp, #0]
 8025522:	ea4b 0303 	orr.w	r3, fp, r3
 8025526:	930e      	str	r3, [sp, #56]	; 0x38
 8025528:	460b      	mov	r3, r1
 802552a:	f7e0 fc99 	bl	8005e60 <_Unwind_VRS_Set>
 802552e:	2007      	movs	r0, #7
 8025530:	2e02      	cmp	r6, #2
 8025532:	d1a2      	bne.n	802547a <__gxx_personality_v0+0x176>
 8025534:	4640      	mov	r0, r8
 8025536:	f7ff fbc9 	bl	8024ccc <__cxa_begin_cleanup>
 802553a:	2007      	movs	r0, #7
 802553c:	e79d      	b.n	802547a <__gxx_personality_v0+0x176>
 802553e:	2e01      	cmp	r6, #1
 8025540:	d0c4      	beq.n	80254cc <__gxx_personality_v0+0x1c8>
 8025542:	2c00      	cmp	r4, #0
 8025544:	dace      	bge.n	80254e4 <__gxx_personality_v0+0x1e0>
 8025546:	aa05      	add	r2, sp, #20
 8025548:	4638      	mov	r0, r7
 802554a:	4649      	mov	r1, r9
 802554c:	f7ff fe94 	bl	8025278 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
 8025550:	9b08      	ldr	r3, [sp, #32]
 8025552:	43e2      	mvns	r2, r4
 8025554:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8025558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802555c:	b133      	cbz	r3, 802556c <__gxx_personality_v0+0x268>
 802555e:	4602      	mov	r2, r0
 8025560:	2300      	movs	r3, #0
 8025562:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8025566:	3301      	adds	r3, #1
 8025568:	2900      	cmp	r1, #0
 802556a:	d1fa      	bne.n	8025562 <__gxx_personality_v0+0x25e>
 802556c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8025570:	2300      	movs	r3, #0
 8025572:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 8025576:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 802557a:	2304      	movs	r3, #4
 802557c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8025580:	e7b0      	b.n	80254e4 <__gxx_personality_v0+0x1e0>
 8025582:	2800      	cmp	r0, #0
 8025584:	f000 8089 	beq.w	802569a <__gxx_personality_v0+0x396>
 8025588:	f01a 0208 	ands.w	r2, sl, #8
 802558c:	9203      	str	r2, [sp, #12]
 802558e:	d07a      	beq.n	8025686 <__gxx_personality_v0+0x382>
 8025590:	2347      	movs	r3, #71	; 0x47
 8025592:	f888 3000 	strb.w	r3, [r8]
 8025596:	234e      	movs	r3, #78	; 0x4e
 8025598:	f888 3001 	strb.w	r3, [r8, #1]
 802559c:	2355      	movs	r3, #85	; 0x55
 802559e:	f888 3002 	strb.w	r3, [r8, #2]
 80255a2:	2343      	movs	r3, #67	; 0x43
 80255a4:	f888 3003 	strb.w	r3, [r8, #3]
 80255a8:	2346      	movs	r3, #70	; 0x46
 80255aa:	f888 3004 	strb.w	r3, [r8, #4]
 80255ae:	234f      	movs	r3, #79	; 0x4f
 80255b0:	f888 3005 	strb.w	r3, [r8, #5]
 80255b4:	2352      	movs	r3, #82	; 0x52
 80255b6:	f888 3006 	strb.w	r3, [r8, #6]
 80255ba:	2300      	movs	r3, #0
 80255bc:	f888 3007 	strb.w	r3, [r8, #7]
 80255c0:	2300      	movs	r3, #0
 80255c2:	9302      	str	r3, [sp, #8]
 80255c4:	463b      	mov	r3, r7
 80255c6:	4647      	mov	r7, r8
 80255c8:	4698      	mov	r8, r3
 80255ca:	a90f      	add	r1, sp, #60	; 0x3c
 80255cc:	f7ff fdb0 	bl	8025130 <_ZL12read_sleb128PKhPl>
 80255d0:	a910      	add	r1, sp, #64	; 0x40
 80255d2:	4606      	mov	r6, r0
 80255d4:	f7ff fdac 	bl	8025130 <_ZL12read_sleb128PKhPl>
 80255d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80255da:	2c00      	cmp	r4, #0
 80255dc:	4623      	mov	r3, r4
 80255de:	d014      	beq.n	802560a <__gxx_personality_v0+0x306>
 80255e0:	dd1e      	ble.n	8025620 <__gxx_personality_v0+0x31c>
 80255e2:	9b08      	ldr	r3, [sp, #32]
 80255e4:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 80255e8:	6819      	ldr	r1, [r3, #0]
 80255ea:	b1a9      	cbz	r1, 8025618 <__gxx_personality_v0+0x314>
 80255ec:	18c9      	adds	r1, r1, r3
 80255ee:	d013      	beq.n	8025618 <__gxx_personality_v0+0x314>
 80255f0:	b16f      	cbz	r7, 802560e <__gxx_personality_v0+0x30a>
 80255f2:	4638      	mov	r0, r7
 80255f4:	2200      	movs	r2, #0
 80255f6:	ab0b      	add	r3, sp, #44	; 0x2c
 80255f8:	f7ff faf6 	bl	8024be8 <__cxa_type_match>
 80255fc:	b138      	cbz	r0, 802560e <__gxx_personality_v0+0x30a>
 80255fe:	4643      	mov	r3, r8
 8025600:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025602:	46b8      	mov	r8, r7
 8025604:	461f      	mov	r7, r3
 8025606:	2603      	movs	r6, #3
 8025608:	e6fe      	b.n	8025408 <__gxx_personality_v0+0x104>
 802560a:	2301      	movs	r3, #1
 802560c:	9302      	str	r3, [sp, #8]
 802560e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025610:	2c00      	cmp	r4, #0
 8025612:	d029      	beq.n	8025668 <__gxx_personality_v0+0x364>
 8025614:	1930      	adds	r0, r6, r4
 8025616:	e7d8      	b.n	80255ca <__gxx_personality_v0+0x2c6>
 8025618:	4643      	mov	r3, r8
 802561a:	46b8      	mov	r8, r7
 802561c:	461f      	mov	r7, r3
 802561e:	e7f2      	b.n	8025606 <__gxx_personality_v0+0x302>
 8025620:	b1bf      	cbz	r7, 8025652 <__gxx_personality_v0+0x34e>
 8025622:	9a03      	ldr	r2, [sp, #12]
 8025624:	b9aa      	cbnz	r2, 8025652 <__gxx_personality_v0+0x34e>
 8025626:	9a08      	ldr	r2, [sp, #32]
 8025628:	43e1      	mvns	r1, r4
 802562a:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 802562e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8025632:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025634:	9211      	str	r2, [sp, #68]	; 0x44
 8025636:	b919      	cbnz	r1, 8025640 <__gxx_personality_v0+0x33c>
 8025638:	e011      	b.n	802565e <__gxx_personality_v0+0x35a>
 802563a:	f854 1f04 	ldr.w	r1, [r4, #4]!
 802563e:	b1e1      	cbz	r1, 802567a <__gxx_personality_v0+0x376>
 8025640:	1861      	adds	r1, r4, r1
 8025642:	4638      	mov	r0, r7
 8025644:	2200      	movs	r2, #0
 8025646:	ab11      	add	r3, sp, #68	; 0x44
 8025648:	f7ff face 	bl	8024be8 <__cxa_type_match>
 802564c:	2800      	cmp	r0, #0
 802564e:	d0f4      	beq.n	802563a <__gxx_personality_v0+0x336>
 8025650:	e7dd      	b.n	802560e <__gxx_personality_v0+0x30a>
 8025652:	9a08      	ldr	r2, [sp, #32]
 8025654:	43d9      	mvns	r1, r3
 8025656:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802565a:	2a00      	cmp	r2, #0
 802565c:	d1d7      	bne.n	802560e <__gxx_personality_v0+0x30a>
 802565e:	4642      	mov	r2, r8
 8025660:	461c      	mov	r4, r3
 8025662:	46b8      	mov	r8, r7
 8025664:	4617      	mov	r7, r2
 8025666:	e7ce      	b.n	8025606 <__gxx_personality_v0+0x302>
 8025668:	9a02      	ldr	r2, [sp, #8]
 802566a:	4643      	mov	r3, r8
 802566c:	46b8      	mov	r8, r7
 802566e:	461f      	mov	r7, r3
 8025670:	2a00      	cmp	r2, #0
 8025672:	f43f aefa 	beq.w	802546a <__gxx_personality_v0+0x166>
 8025676:	2602      	movs	r6, #2
 8025678:	e6c6      	b.n	8025408 <__gxx_personality_v0+0x104>
 802567a:	4643      	mov	r3, r8
 802567c:	46b8      	mov	r8, r7
 802567e:	461f      	mov	r7, r3
 8025680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025682:	461c      	mov	r4, r3
 8025684:	e7bf      	b.n	8025606 <__gxx_personality_v0+0x302>
 8025686:	f898 3007 	ldrb.w	r3, [r8, #7]
 802568a:	2b01      	cmp	r3, #1
 802568c:	bf14      	ite	ne
 802568e:	f108 0358 	addne.w	r3, r8, #88	; 0x58
 8025692:	f858 3c20 	ldreq.w	r3, [r8, #-32]
 8025696:	930b      	str	r3, [sp, #44]	; 0x2c
 8025698:	e792      	b.n	80255c0 <__gxx_personality_v0+0x2bc>
 802569a:	4604      	mov	r4, r0
 802569c:	2602      	movs	r6, #2
 802569e:	e6b3      	b.n	8025408 <__gxx_personality_v0+0x104>
 80256a0:	f7ff fc5a 	bl	8024f58 <__cxa_begin_catch>
 80256a4:	f7ff f9e8 	bl	8024a78 <_ZSt9terminatev>
 80256a8:	f7ff f9f2 	bl	8024a90 <_ZSt10unexpectedv>

080256ac <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 80256ac:	2801      	cmp	r0, #1
 80256ae:	b510      	push	{r4, lr}
 80256b0:	d81d      	bhi.n	80256ee <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 80256b2:	f04f 32ff 	mov.w	r2, #4294967295
 80256b6:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 80256ba:	f3bf 8f5f 	dmb	sy
 80256be:	e853 0f00 	ldrex	r0, [r3]
 80256c2:	4410      	add	r0, r2
 80256c4:	e843 0400 	strex	r4, r0, [r3]
 80256c8:	f094 0f00 	teq	r4, #0
 80256cc:	d1f7      	bne.n	80256be <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x12>
 80256ce:	f3bf 8f5f 	dmb	sy
 80256d2:	b958      	cbnz	r0, 80256ec <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x40>
 80256d4:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80256d8:	f101 0458 	add.w	r4, r1, #88	; 0x58
 80256dc:	b10b      	cbz	r3, 80256e2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x36>
 80256de:	4620      	mov	r0, r4
 80256e0:	4798      	blx	r3
 80256e2:	4620      	mov	r0, r4
 80256e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80256e8:	f000 ba86 	b.w	8025bf8 <__cxa_free_exception>
 80256ec:	bd10      	pop	{r4, pc}
 80256ee:	f851 0c14 	ldr.w	r0, [r1, #-20]
 80256f2:	f7ff f9ad 	bl	8024a50 <_ZN10__cxxabiv111__terminateEPFvvE>
 80256f6:	bf00      	nop

080256f8 <__cxa_throw>:
 80256f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256fa:	f640 1344 	movw	r3, #2372	; 0x944
 80256fe:	f640 1448 	movw	r4, #2376	; 0x948
 8025702:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8025706:	f2c2 0400 	movt	r4, #8192	; 0x2000
 802570a:	2743      	movs	r7, #67	; 0x43
 802570c:	681b      	ldr	r3, [r3, #0]
 802570e:	262b      	movs	r6, #43	; 0x2b
 8025710:	6825      	ldr	r5, [r4, #0]
 8025712:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
 8025716:	f840 1c78 	str.w	r1, [r0, #-120]
 802571a:	2101      	movs	r1, #1
 802571c:	f840 3c6c 	str.w	r3, [r0, #-108]
 8025720:	f245 63ad 	movw	r3, #22189	; 0x56ad
 8025724:	f840 1c80 	str.w	r1, [r0, #-128]
 8025728:	f6c0 0302 	movt	r3, #2050	; 0x802
 802572c:	f840 2c74 	str.w	r2, [r0, #-116]
 8025730:	f840 3c50 	str.w	r3, [r0, #-80]
 8025734:	2347      	movs	r3, #71	; 0x47
 8025736:	f840 5c70 	str.w	r5, [r0, #-112]
 802573a:	f800 3c58 	strb.w	r3, [r0, #-88]
 802573e:	234e      	movs	r3, #78	; 0x4e
 8025740:	f800 7c55 	strb.w	r7, [r0, #-85]
 8025744:	f800 3c57 	strb.w	r3, [r0, #-87]
 8025748:	2355      	movs	r3, #85	; 0x55
 802574a:	f800 7c54 	strb.w	r7, [r0, #-84]
 802574e:	f800 3c56 	strb.w	r3, [r0, #-86]
 8025752:	2300      	movs	r3, #0
 8025754:	f800 6c53 	strb.w	r6, [r0, #-83]
 8025758:	f800 3c51 	strb.w	r3, [r0, #-81]
 802575c:	f800 6c52 	strb.w	r6, [r0, #-82]
 8025760:	4620      	mov	r0, r4
 8025762:	f7e0 ff7d 	bl	8006660 <_Unwind_RaiseException>
 8025766:	4620      	mov	r0, r4
 8025768:	f7ff fbf6 	bl	8024f58 <__cxa_begin_catch>
 802576c:	f7ff f984 	bl	8024a78 <_ZSt9terminatev>

08025770 <__cxa_rethrow>:
 8025770:	b510      	push	{r4, lr}
 8025772:	f7ff fcd7 	bl	8025124 <__cxa_get_globals>
 8025776:	6843      	ldr	r3, [r0, #4]
 8025778:	6804      	ldr	r4, [r0, #0]
 802577a:	3301      	adds	r3, #1
 802577c:	6043      	str	r3, [r0, #4]
 802577e:	b164      	cbz	r4, 802579a <__cxa_rethrow+0x2a>
 8025780:	f894 3020 	ldrb.w	r3, [r4, #32]
 8025784:	2b47      	cmp	r3, #71	; 0x47
 8025786:	d00a      	beq.n	802579e <__cxa_rethrow+0x2e>
 8025788:	2300      	movs	r3, #0
 802578a:	6003      	str	r3, [r0, #0]
 802578c:	3420      	adds	r4, #32
 802578e:	4620      	mov	r0, r4
 8025790:	f7e0 ff8a 	bl	80066a8 <_Unwind_Resume_or_Rethrow>
 8025794:	4620      	mov	r0, r4
 8025796:	f7ff fbdf 	bl	8024f58 <__cxa_begin_catch>
 802579a:	f7ff f96d 	bl	8024a78 <_ZSt9terminatev>
 802579e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80257a2:	2b4e      	cmp	r3, #78	; 0x4e
 80257a4:	d1f0      	bne.n	8025788 <__cxa_rethrow+0x18>
 80257a6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80257aa:	2b55      	cmp	r3, #85	; 0x55
 80257ac:	d1ec      	bne.n	8025788 <__cxa_rethrow+0x18>
 80257ae:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80257b2:	2b43      	cmp	r3, #67	; 0x43
 80257b4:	d1e8      	bne.n	8025788 <__cxa_rethrow+0x18>
 80257b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80257ba:	2b43      	cmp	r3, #67	; 0x43
 80257bc:	d1e4      	bne.n	8025788 <__cxa_rethrow+0x18>
 80257be:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80257c2:	2b2b      	cmp	r3, #43	; 0x2b
 80257c4:	d1e0      	bne.n	8025788 <__cxa_rethrow+0x18>
 80257c6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80257ca:	2b2b      	cmp	r3, #43	; 0x2b
 80257cc:	d1dc      	bne.n	8025788 <__cxa_rethrow+0x18>
 80257ce:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80257d2:	2b01      	cmp	r3, #1
 80257d4:	d8d8      	bhi.n	8025788 <__cxa_rethrow+0x18>
 80257d6:	6963      	ldr	r3, [r4, #20]
 80257d8:	425b      	negs	r3, r3
 80257da:	6163      	str	r3, [r4, #20]
 80257dc:	e7d6      	b.n	802578c <__cxa_rethrow+0x1c>
 80257de:	bf00      	nop

080257e0 <__cxa_current_exception_type>:
 80257e0:	b508      	push	{r3, lr}
 80257e2:	f7ff fc9f 	bl	8025124 <__cxa_get_globals>
 80257e6:	6800      	ldr	r0, [r0, #0]
 80257e8:	b130      	cbz	r0, 80257f8 <__cxa_current_exception_type+0x18>
 80257ea:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80257ee:	2b01      	cmp	r3, #1
 80257f0:	bf04      	itt	eq
 80257f2:	6800      	ldreq	r0, [r0, #0]
 80257f4:	3878      	subeq	r0, #120	; 0x78
 80257f6:	6800      	ldr	r0, [r0, #0]
 80257f8:	bd08      	pop	{r3, pc}
 80257fa:	bf00      	nop

080257fc <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 80257fc:	4b03      	ldr	r3, [pc, #12]	; (802580c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 80257fe:	b510      	push	{r4, lr}
 8025800:	4604      	mov	r4, r0
 8025802:	6003      	str	r3, [r0, #0]
 8025804:	f000 f8dc 	bl	80259c0 <_ZNSt9type_infoD1Ev>
 8025808:	4620      	mov	r0, r4
 802580a:	bd10      	pop	{r4, pc}
 802580c:	080289d0 	.word	0x080289d0

08025810 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 8025810:	4b05      	ldr	r3, [pc, #20]	; (8025828 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
 8025812:	b510      	push	{r4, lr}
 8025814:	4604      	mov	r4, r0
 8025816:	6003      	str	r3, [r0, #0]
 8025818:	f000 f8d2 	bl	80259c0 <_ZNSt9type_infoD1Ev>
 802581c:	4620      	mov	r0, r4
 802581e:	f7ff f907 	bl	8024a30 <_ZdlPv>
 8025822:	4620      	mov	r0, r4
 8025824:	bd10      	pop	{r4, pc}
 8025826:	bf00      	nop
 8025828:	080289d0 	.word	0x080289d0

0802582c <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 802582c:	2001      	movs	r0, #1
 802582e:	4770      	bx	lr

08025830 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 8025830:	4b03      	ldr	r3, [pc, #12]	; (8025840 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 8025832:	b510      	push	{r4, lr}
 8025834:	4604      	mov	r4, r0
 8025836:	6003      	str	r3, [r0, #0]
 8025838:	f000 fa50 	bl	8025cdc <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 802583c:	4620      	mov	r0, r4
 802583e:	bd10      	pop	{r4, pc}
 8025840:	08028a20 	.word	0x08028a20

08025844 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 8025844:	4b05      	ldr	r3, [pc, #20]	; (802585c <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
 8025846:	b510      	push	{r4, lr}
 8025848:	4604      	mov	r4, r0
 802584a:	6003      	str	r3, [r0, #0]
 802584c:	f000 fa46 	bl	8025cdc <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8025850:	4620      	mov	r0, r4
 8025852:	f7ff f8ed 	bl	8024a30 <_ZdlPv>
 8025856:	4620      	mov	r0, r4
 8025858:	bd10      	pop	{r4, pc}
 802585a:	bf00      	nop
 802585c:	08028a20 	.word	0x08028a20

08025860 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 8025860:	2b01      	cmp	r3, #1
 8025862:	b530      	push	{r4, r5, lr}
 8025864:	4604      	mov	r4, r0
 8025866:	b083      	sub	sp, #12
 8025868:	460d      	mov	r5, r1
 802586a:	d908      	bls.n	802587e <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
 802586c:	68e4      	ldr	r4, [r4, #12]
 802586e:	3302      	adds	r3, #2
 8025870:	68e9      	ldr	r1, [r5, #12]
 8025872:	4620      	mov	r0, r4
 8025874:	6824      	ldr	r4, [r4, #0]
 8025876:	6924      	ldr	r4, [r4, #16]
 8025878:	47a0      	blx	r4
 802587a:	b003      	add	sp, #12
 802587c:	bd30      	pop	{r4, r5, pc}
 802587e:	68c0      	ldr	r0, [r0, #12]
 8025880:	4908      	ldr	r1, [pc, #32]	; (80258a4 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
 8025882:	9201      	str	r2, [sp, #4]
 8025884:	9300      	str	r3, [sp, #0]
 8025886:	f000 f8b1 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 802588a:	9a01      	ldr	r2, [sp, #4]
 802588c:	9b00      	ldr	r3, [sp, #0]
 802588e:	2800      	cmp	r0, #0
 8025890:	d0ec      	beq.n	802586c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0xc>
 8025892:	68eb      	ldr	r3, [r5, #12]
 8025894:	4618      	mov	r0, r3
 8025896:	681b      	ldr	r3, [r3, #0]
 8025898:	68db      	ldr	r3, [r3, #12]
 802589a:	4798      	blx	r3
 802589c:	f080 0001 	eor.w	r0, r0, #1
 80258a0:	b2c0      	uxtb	r0, r0
 80258a2:	e7ea      	b.n	802587a <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 80258a4:	0802885c 	.word	0x0802885c

080258a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80258a8:	4b03      	ldr	r3, [pc, #12]	; (80258b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80258aa:	b510      	push	{r4, lr}
 80258ac:	4604      	mov	r4, r0
 80258ae:	6003      	str	r3, [r0, #0]
 80258b0:	f000 f926 	bl	8025b00 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80258b4:	4620      	mov	r0, r4
 80258b6:	bd10      	pop	{r4, pc}
 80258b8:	08028a48 	.word	0x08028a48

080258bc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80258bc:	4b05      	ldr	r3, [pc, #20]	; (80258d4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 80258be:	b510      	push	{r4, lr}
 80258c0:	4604      	mov	r4, r0
 80258c2:	6003      	str	r3, [r0, #0]
 80258c4:	f000 f91c 	bl	8025b00 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80258c8:	4620      	mov	r0, r4
 80258ca:	f7ff f8b1 	bl	8024a30 <_ZdlPv>
 80258ce:	4620      	mov	r0, r4
 80258d0:	bd10      	pop	{r4, pc}
 80258d2:	bf00      	nop
 80258d4:	08028a48 	.word	0x08028a48

080258d8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80258d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80258da:	4607      	mov	r7, r0
 80258dc:	460e      	mov	r6, r1
 80258de:	4615      	mov	r5, r2
 80258e0:	461c      	mov	r4, r3
 80258e2:	f000 f8ff 	bl	8025ae4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80258e6:	b108      	cbz	r0, 80258ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>
 80258e8:	2001      	movs	r0, #1
 80258ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258ec:	68bf      	ldr	r7, [r7, #8]
 80258ee:	4623      	mov	r3, r4
 80258f0:	4631      	mov	r1, r6
 80258f2:	462a      	mov	r2, r5
 80258f4:	4638      	mov	r0, r7
 80258f6:	683c      	ldr	r4, [r7, #0]
 80258f8:	69a4      	ldr	r4, [r4, #24]
 80258fa:	47a0      	blx	r4
 80258fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258fe:	bf00      	nop

08025900 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8025900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025904:	b087      	sub	sp, #28
 8025906:	4689      	mov	r9, r1
 8025908:	4619      	mov	r1, r3
 802590a:	4698      	mov	r8, r3
 802590c:	4607      	mov	r7, r0
 802590e:	4692      	mov	sl, r2
 8025910:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025912:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8025916:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8025918:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802591a:	f000 f867 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 802591e:	4603      	mov	r3, r0
 8025920:	b168      	cbz	r0, 802593e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e>
 8025922:	f1b9 0f00 	cmp.w	r9, #0
 8025926:	6025      	str	r5, [r4, #0]
 8025928:	f884 a004 	strb.w	sl, [r4, #4]
 802592c:	db18      	blt.n	8025960 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x60>
 802592e:	444d      	add	r5, r9
 8025930:	2000      	movs	r0, #0
 8025932:	42ae      	cmp	r6, r5
 8025934:	bf14      	ite	ne
 8025936:	2601      	movne	r6, #1
 8025938:	2606      	moveq	r6, #6
 802593a:	71a6      	strb	r6, [r4, #6]
 802593c:	e00d      	b.n	802595a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 802593e:	42b5      	cmp	r5, r6
 8025940:	d015      	beq.n	802596e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8025942:	68bf      	ldr	r7, [r7, #8]
 8025944:	4649      	mov	r1, r9
 8025946:	4652      	mov	r2, sl
 8025948:	4643      	mov	r3, r8
 802594a:	4638      	mov	r0, r7
 802594c:	683f      	ldr	r7, [r7, #0]
 802594e:	9602      	str	r6, [sp, #8]
 8025950:	9403      	str	r4, [sp, #12]
 8025952:	e88d 0820 	stmia.w	sp, {r5, fp}
 8025956:	69fc      	ldr	r4, [r7, #28]
 8025958:	47a0      	blx	r4
 802595a:	b007      	add	sp, #28
 802595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025960:	2000      	movs	r0, #0
 8025962:	f119 0f02 	cmn.w	r9, #2
 8025966:	d1f8      	bne.n	802595a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 8025968:	2301      	movs	r3, #1
 802596a:	71a3      	strb	r3, [r4, #6]
 802596c:	e7f5      	b.n	802595a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 802596e:	4638      	mov	r0, r7
 8025970:	4659      	mov	r1, fp
 8025972:	9305      	str	r3, [sp, #20]
 8025974:	f000 f83a 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8025978:	9b05      	ldr	r3, [sp, #20]
 802597a:	2800      	cmp	r0, #0
 802597c:	d0e1      	beq.n	8025942 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 802597e:	f884 a005 	strb.w	sl, [r4, #5]
 8025982:	4618      	mov	r0, r3
 8025984:	e7e9      	b.n	802595a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a>
 8025986:	bf00      	nop

08025988 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8025988:	b570      	push	{r4, r5, r6, lr}
 802598a:	b084      	sub	sp, #16
 802598c:	4605      	mov	r5, r0
 802598e:	460e      	mov	r6, r1
 8025990:	9c08      	ldr	r4, [sp, #32]
 8025992:	4294      	cmp	r4, r2
 8025994:	d008      	beq.n	80259a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x20>
 8025996:	68ad      	ldr	r5, [r5, #8]
 8025998:	4631      	mov	r1, r6
 802599a:	4628      	mov	r0, r5
 802599c:	682d      	ldr	r5, [r5, #0]
 802599e:	9400      	str	r4, [sp, #0]
 80259a0:	6a2c      	ldr	r4, [r5, #32]
 80259a2:	47a0      	blx	r4
 80259a4:	b004      	add	sp, #16
 80259a6:	bd70      	pop	{r4, r5, r6, pc}
 80259a8:	4619      	mov	r1, r3
 80259aa:	9203      	str	r2, [sp, #12]
 80259ac:	9302      	str	r3, [sp, #8]
 80259ae:	f000 f81d 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 80259b2:	9a03      	ldr	r2, [sp, #12]
 80259b4:	9b02      	ldr	r3, [sp, #8]
 80259b6:	2800      	cmp	r0, #0
 80259b8:	d0ed      	beq.n	8025996 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80259ba:	2006      	movs	r0, #6
 80259bc:	e7f2      	b.n	80259a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 80259be:	bf00      	nop

080259c0 <_ZNSt9type_infoD1Ev>:
 80259c0:	4b01      	ldr	r3, [pc, #4]	; (80259c8 <_ZNSt9type_infoD1Ev+0x8>)
 80259c2:	6003      	str	r3, [r0, #0]
 80259c4:	4770      	bx	lr
 80259c6:	bf00      	nop
 80259c8:	08028ac8 	.word	0x08028ac8

080259cc <_ZNKSt9type_info14__is_pointer_pEv>:
 80259cc:	2000      	movs	r0, #0
 80259ce:	4770      	bx	lr

080259d0 <_ZNKSt9type_info15__is_function_pEv>:
 80259d0:	2000      	movs	r0, #0
 80259d2:	4770      	bx	lr

080259d4 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 80259d4:	2000      	movs	r0, #0
 80259d6:	4770      	bx	lr

080259d8 <_ZNSt9type_infoD0Ev>:
 80259d8:	4b03      	ldr	r3, [pc, #12]	; (80259e8 <_ZNSt9type_infoD0Ev+0x10>)
 80259da:	b510      	push	{r4, lr}
 80259dc:	4604      	mov	r4, r0
 80259de:	6003      	str	r3, [r0, #0]
 80259e0:	f7ff f826 	bl	8024a30 <_ZdlPv>
 80259e4:	4620      	mov	r0, r4
 80259e6:	bd10      	pop	{r4, pc}
 80259e8:	08028ac8 	.word	0x08028ac8

080259ec <_ZNKSt9type_infoeqERKS_>:
 80259ec:	4281      	cmp	r1, r0
 80259ee:	b508      	push	{r3, lr}
 80259f0:	d016      	beq.n	8025a20 <_ZNKSt9type_infoeqERKS_+0x34>
 80259f2:	6840      	ldr	r0, [r0, #4]
 80259f4:	7803      	ldrb	r3, [r0, #0]
 80259f6:	2b2a      	cmp	r3, #42	; 0x2a
 80259f8:	d00b      	beq.n	8025a12 <_ZNKSt9type_infoeqERKS_+0x26>
 80259fa:	6849      	ldr	r1, [r1, #4]
 80259fc:	780b      	ldrb	r3, [r1, #0]
 80259fe:	2b2a      	cmp	r3, #42	; 0x2a
 8025a00:	bf08      	it	eq
 8025a02:	3101      	addeq	r1, #1
 8025a04:	f7e2 fb10 	bl	8008028 <strcmp>
 8025a08:	f1d0 0001 	rsbs	r0, r0, #1
 8025a0c:	bf38      	it	cc
 8025a0e:	2000      	movcc	r0, #0
 8025a10:	bd08      	pop	{r3, pc}
 8025a12:	7843      	ldrb	r3, [r0, #1]
 8025a14:	2b2a      	cmp	r3, #42	; 0x2a
 8025a16:	d101      	bne.n	8025a1c <_ZNKSt9type_infoeqERKS_+0x30>
 8025a18:	2000      	movs	r0, #0
 8025a1a:	bd08      	pop	{r3, pc}
 8025a1c:	3001      	adds	r0, #1
 8025a1e:	e7ec      	b.n	80259fa <_ZNKSt9type_infoeqERKS_+0xe>
 8025a20:	2001      	movs	r0, #1
 8025a22:	bd08      	pop	{r3, pc}

08025a24 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8025a24:	f7ff bfe2 	b.w	80259ec <_ZNKSt9type_infoeqERKS_>

08025a28 <_ZNKSt8bad_cast4whatEv>:
 8025a28:	f648 3010 	movw	r0, #35600	; 0x8b10
 8025a2c:	f6c0 0002 	movt	r0, #2050	; 0x802
 8025a30:	4770      	bx	lr
 8025a32:	bf00      	nop

08025a34 <_ZNSt8bad_castD1Ev>:
 8025a34:	4b03      	ldr	r3, [pc, #12]	; (8025a44 <_ZNSt8bad_castD1Ev+0x10>)
 8025a36:	b510      	push	{r4, lr}
 8025a38:	4604      	mov	r4, r0
 8025a3a:	6003      	str	r3, [r0, #0]
 8025a3c:	f7ff fb20 	bl	8025080 <_ZNSt9exceptionD1Ev>
 8025a40:	4620      	mov	r0, r4
 8025a42:	bd10      	pop	{r4, pc}
 8025a44:	08028b00 	.word	0x08028b00

08025a48 <_ZNSt8bad_castD0Ev>:
 8025a48:	4b05      	ldr	r3, [pc, #20]	; (8025a60 <_ZNSt8bad_castD0Ev+0x18>)
 8025a4a:	b510      	push	{r4, lr}
 8025a4c:	4604      	mov	r4, r0
 8025a4e:	6003      	str	r3, [r0, #0]
 8025a50:	f7ff fb16 	bl	8025080 <_ZNSt9exceptionD1Ev>
 8025a54:	4620      	mov	r0, r4
 8025a56:	f7fe ffeb 	bl	8024a30 <_ZdlPv>
 8025a5a:	4620      	mov	r0, r4
 8025a5c:	bd10      	pop	{r4, pc}
 8025a5e:	bf00      	nop
 8025a60:	08028b00 	.word	0x08028b00

08025a64 <_ZNKSt10bad_typeid4whatEv>:
 8025a64:	f648 3044 	movw	r0, #35652	; 0x8b44
 8025a68:	f6c0 0002 	movt	r0, #2050	; 0x802
 8025a6c:	4770      	bx	lr
 8025a6e:	bf00      	nop

08025a70 <_ZNSt10bad_typeidD1Ev>:
 8025a70:	4b03      	ldr	r3, [pc, #12]	; (8025a80 <_ZNSt10bad_typeidD1Ev+0x10>)
 8025a72:	b510      	push	{r4, lr}
 8025a74:	4604      	mov	r4, r0
 8025a76:	6003      	str	r3, [r0, #0]
 8025a78:	f7ff fb02 	bl	8025080 <_ZNSt9exceptionD1Ev>
 8025a7c:	4620      	mov	r0, r4
 8025a7e:	bd10      	pop	{r4, pc}
 8025a80:	08028b28 	.word	0x08028b28

08025a84 <_ZNSt10bad_typeidD0Ev>:
 8025a84:	4b05      	ldr	r3, [pc, #20]	; (8025a9c <_ZNSt10bad_typeidD0Ev+0x18>)
 8025a86:	b510      	push	{r4, lr}
 8025a88:	4604      	mov	r4, r0
 8025a8a:	6003      	str	r3, [r0, #0]
 8025a8c:	f7ff faf8 	bl	8025080 <_ZNSt9exceptionD1Ev>
 8025a90:	4620      	mov	r0, r4
 8025a92:	f7fe ffcd 	bl	8024a30 <_ZdlPv>
 8025a96:	4620      	mov	r0, r4
 8025a98:	bd10      	pop	{r4, pc}
 8025a9a:	bf00      	nop
 8025a9c:	08028b28 	.word	0x08028b28

08025aa0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8025aa0:	b570      	push	{r4, r5, r6, lr}
 8025aa2:	b084      	sub	sp, #16
 8025aa4:	6806      	ldr	r6, [r0, #0]
 8025aa6:	2400      	movs	r4, #0
 8025aa8:	2310      	movs	r3, #16
 8025aaa:	4615      	mov	r5, r2
 8025aac:	9302      	str	r3, [sp, #8]
 8025aae:	466b      	mov	r3, sp
 8025ab0:	6812      	ldr	r2, [r2, #0]
 8025ab2:	9400      	str	r4, [sp, #0]
 8025ab4:	f88d 4004 	strb.w	r4, [sp, #4]
 8025ab8:	9403      	str	r4, [sp, #12]
 8025aba:	69b6      	ldr	r6, [r6, #24]
 8025abc:	47b0      	blx	r6
 8025abe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8025ac2:	f003 0306 	and.w	r3, r3, #6
 8025ac6:	2b06      	cmp	r3, #6
 8025ac8:	bf18      	it	ne
 8025aca:	4620      	movne	r0, r4
 8025acc:	d102      	bne.n	8025ad4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x34>
 8025ace:	9b00      	ldr	r3, [sp, #0]
 8025ad0:	2001      	movs	r0, #1
 8025ad2:	602b      	str	r3, [r5, #0]
 8025ad4:	b004      	add	sp, #16
 8025ad6:	bd70      	pop	{r4, r5, r6, pc}

08025ad8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8025ad8:	9800      	ldr	r0, [sp, #0]
 8025ada:	4290      	cmp	r0, r2
 8025adc:	bf14      	ite	ne
 8025ade:	2001      	movne	r0, #1
 8025ae0:	2006      	moveq	r0, #6
 8025ae2:	4770      	bx	lr

08025ae4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8025ae4:	b538      	push	{r3, r4, r5, lr}
 8025ae6:	4614      	mov	r4, r2
 8025ae8:	461d      	mov	r5, r3
 8025aea:	f7ff ff7f 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8025aee:	b128      	cbz	r0, 8025afc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x18>
 8025af0:	2001      	movs	r0, #1
 8025af2:	2308      	movs	r3, #8
 8025af4:	602c      	str	r4, [r5, #0]
 8025af6:	60eb      	str	r3, [r5, #12]
 8025af8:	2306      	movs	r3, #6
 8025afa:	712b      	strb	r3, [r5, #4]
 8025afc:	bd38      	pop	{r3, r4, r5, pc}
 8025afe:	bf00      	nop

08025b00 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8025b00:	4b03      	ldr	r3, [pc, #12]	; (8025b10 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8025b02:	b510      	push	{r4, lr}
 8025b04:	4604      	mov	r4, r0
 8025b06:	6003      	str	r3, [r0, #0]
 8025b08:	f7ff ff5a 	bl	80259c0 <_ZNSt9type_infoD1Ev>
 8025b0c:	4620      	mov	r0, r4
 8025b0e:	bd10      	pop	{r4, pc}
 8025b10:	08028b70 	.word	0x08028b70

08025b14 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8025b14:	4b05      	ldr	r3, [pc, #20]	; (8025b2c <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8025b16:	b510      	push	{r4, lr}
 8025b18:	4604      	mov	r4, r0
 8025b1a:	6003      	str	r3, [r0, #0]
 8025b1c:	f7ff ff50 	bl	80259c0 <_ZNSt9type_infoD1Ev>
 8025b20:	4620      	mov	r0, r4
 8025b22:	f7fe ff85 	bl	8024a30 <_ZdlPv>
 8025b26:	4620      	mov	r0, r4
 8025b28:	bd10      	pop	{r4, pc}
 8025b2a:	bf00      	nop
 8025b2c:	08028b70 	.word	0x08028b70

08025b30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8025b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b32:	b083      	sub	sp, #12
 8025b34:	4616      	mov	r6, r2
 8025b36:	4605      	mov	r5, r0
 8025b38:	9c08      	ldr	r4, [sp, #32]
 8025b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025b3c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025b3e:	4294      	cmp	r4, r2
 8025b40:	d00b      	beq.n	8025b5a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 8025b42:	4628      	mov	r0, r5
 8025b44:	4619      	mov	r1, r3
 8025b46:	f7ff ff51 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8025b4a:	b118      	cbz	r0, 8025b54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8025b4c:	2301      	movs	r3, #1
 8025b4e:	603c      	str	r4, [r7, #0]
 8025b50:	713e      	strb	r6, [r7, #4]
 8025b52:	71bb      	strb	r3, [r7, #6]
 8025b54:	2000      	movs	r0, #0
 8025b56:	b003      	add	sp, #12
 8025b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025b5c:	9301      	str	r3, [sp, #4]
 8025b5e:	f7ff ff45 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8025b62:	9b01      	ldr	r3, [sp, #4]
 8025b64:	2800      	cmp	r0, #0
 8025b66:	d0ec      	beq.n	8025b42 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
 8025b68:	717e      	strb	r6, [r7, #5]
 8025b6a:	e7f3      	b.n	8025b54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>

08025b6c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8025b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b6e:	4605      	mov	r5, r0
 8025b70:	460c      	mov	r4, r1
 8025b72:	4616      	mov	r6, r2
 8025b74:	461f      	mov	r7, r3
 8025b76:	f7ff ff39 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8025b7a:	b948      	cbnz	r0, 8025b90 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x24>
 8025b7c:	2f03      	cmp	r7, #3
 8025b7e:	d900      	bls.n	8025b82 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 8025b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b82:	6823      	ldr	r3, [r4, #0]
 8025b84:	4620      	mov	r0, r4
 8025b86:	4629      	mov	r1, r5
 8025b88:	4632      	mov	r2, r6
 8025b8a:	695b      	ldr	r3, [r3, #20]
 8025b8c:	4798      	blx	r3
 8025b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b90:	2001      	movs	r0, #1
 8025b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025b94 <__cxa_allocate_exception>:
 8025b94:	b538      	push	{r3, r4, r5, lr}
 8025b96:	f100 0580 	add.w	r5, r0, #128	; 0x80
 8025b9a:	4628      	mov	r0, r5
 8025b9c:	f7e1 fa8a 	bl	80070b4 <malloc>
 8025ba0:	4604      	mov	r4, r0
 8025ba2:	b168      	cbz	r0, 8025bc0 <__cxa_allocate_exception+0x2c>
 8025ba4:	f7ff fabe 	bl	8025124 <__cxa_get_globals>
 8025ba8:	2100      	movs	r1, #0
 8025baa:	2280      	movs	r2, #128	; 0x80
 8025bac:	4603      	mov	r3, r0
 8025bae:	4620      	mov	r0, r4
 8025bb0:	685d      	ldr	r5, [r3, #4]
 8025bb2:	3501      	adds	r5, #1
 8025bb4:	605d      	str	r5, [r3, #4]
 8025bb6:	f7e1 fe59 	bl	800786c <memset>
 8025bba:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8025bbe:	bd38      	pop	{r3, r4, r5, pc}
 8025bc0:	4a0b      	ldr	r2, [pc, #44]	; (8025bf0 <__cxa_allocate_exception+0x5c>)
 8025bc2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8025bc6:	6811      	ldr	r1, [r2, #0]
 8025bc8:	bf98      	it	ls
 8025bca:	460b      	movls	r3, r1
 8025bcc:	d805      	bhi.n	8025bda <__cxa_allocate_exception+0x46>
 8025bce:	07d8      	lsls	r0, r3, #31
 8025bd0:	d505      	bpl.n	8025bde <__cxa_allocate_exception+0x4a>
 8025bd2:	3401      	adds	r4, #1
 8025bd4:	085b      	lsrs	r3, r3, #1
 8025bd6:	2c04      	cmp	r4, #4
 8025bd8:	d1f9      	bne.n	8025bce <__cxa_allocate_exception+0x3a>
 8025bda:	f7fe ff4d 	bl	8024a78 <_ZSt9terminatev>
 8025bde:	2301      	movs	r3, #1
 8025be0:	4804      	ldr	r0, [pc, #16]	; (8025bf4 <__cxa_allocate_exception+0x60>)
 8025be2:	40a3      	lsls	r3, r4
 8025be4:	eb00 2444 	add.w	r4, r0, r4, lsl #9
 8025be8:	4319      	orrs	r1, r3
 8025bea:	6011      	str	r1, [r2, #0]
 8025bec:	e7da      	b.n	8025ba4 <__cxa_allocate_exception+0x10>
 8025bee:	bf00      	nop
 8025bf0:	20000da8 	.word	0x20000da8
 8025bf4:	20000db0 	.word	0x20000db0

08025bf8 <__cxa_free_exception>:
 8025bf8:	4b0a      	ldr	r3, [pc, #40]	; (8025c24 <__cxa_free_exception+0x2c>)
 8025bfa:	4298      	cmp	r0, r3
 8025bfc:	d30e      	bcc.n	8025c1c <__cxa_free_exception+0x24>
 8025bfe:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8025c02:	4290      	cmp	r0, r2
 8025c04:	d20a      	bcs.n	8025c1c <__cxa_free_exception+0x24>
 8025c06:	4a08      	ldr	r2, [pc, #32]	; (8025c28 <__cxa_free_exception+0x30>)
 8025c08:	1ac3      	subs	r3, r0, r3
 8025c0a:	2001      	movs	r0, #1
 8025c0c:	0a5b      	lsrs	r3, r3, #9
 8025c0e:	6811      	ldr	r1, [r2, #0]
 8025c10:	fa10 f303 	lsls.w	r3, r0, r3
 8025c14:	ea21 0303 	bic.w	r3, r1, r3
 8025c18:	6013      	str	r3, [r2, #0]
 8025c1a:	4770      	bx	lr
 8025c1c:	3880      	subs	r0, #128	; 0x80
 8025c1e:	f7e1 ba51 	b.w	80070c4 <free>
 8025c22:	bf00      	nop
 8025c24:	20000db0 	.word	0x20000db0
 8025c28:	20000da8 	.word	0x20000da8

08025c2c <__cxa_allocate_dependent_exception>:
 8025c2c:	b510      	push	{r4, lr}
 8025c2e:	2078      	movs	r0, #120	; 0x78
 8025c30:	f7e1 fa40 	bl	80070b4 <malloc>
 8025c34:	4604      	mov	r4, r0
 8025c36:	b158      	cbz	r0, 8025c50 <__cxa_allocate_dependent_exception+0x24>
 8025c38:	f7ff fa74 	bl	8025124 <__cxa_get_globals>
 8025c3c:	2100      	movs	r1, #0
 8025c3e:	2278      	movs	r2, #120	; 0x78
 8025c40:	6843      	ldr	r3, [r0, #4]
 8025c42:	3301      	adds	r3, #1
 8025c44:	6043      	str	r3, [r0, #4]
 8025c46:	4620      	mov	r0, r4
 8025c48:	f7e1 fe10 	bl	800786c <memset>
 8025c4c:	4620      	mov	r0, r4
 8025c4e:	bd10      	pop	{r4, pc}
 8025c50:	4a0a      	ldr	r2, [pc, #40]	; (8025c7c <__cxa_allocate_dependent_exception+0x50>)
 8025c52:	6811      	ldr	r1, [r2, #0]
 8025c54:	460b      	mov	r3, r1
 8025c56:	07dc      	lsls	r4, r3, #31
 8025c58:	d505      	bpl.n	8025c66 <__cxa_allocate_dependent_exception+0x3a>
 8025c5a:	3001      	adds	r0, #1
 8025c5c:	085b      	lsrs	r3, r3, #1
 8025c5e:	2804      	cmp	r0, #4
 8025c60:	d1f9      	bne.n	8025c56 <__cxa_allocate_dependent_exception+0x2a>
 8025c62:	f7fe ff09 	bl	8024a78 <_ZSt9terminatev>
 8025c66:	2301      	movs	r3, #1
 8025c68:	ebc0 1400 	rsb	r4, r0, r0, lsl #4
 8025c6c:	fa13 f000 	lsls.w	r0, r3, r0
 8025c70:	4b03      	ldr	r3, [pc, #12]	; (8025c80 <__cxa_allocate_dependent_exception+0x54>)
 8025c72:	4301      	orrs	r1, r0
 8025c74:	6011      	str	r1, [r2, #0]
 8025c76:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8025c7a:	e7dd      	b.n	8025c38 <__cxa_allocate_dependent_exception+0xc>
 8025c7c:	20000bc0 	.word	0x20000bc0
 8025c80:	20000bc8 	.word	0x20000bc8

08025c84 <__cxa_free_dependent_exception>:
 8025c84:	4b0e      	ldr	r3, [pc, #56]	; (8025cc0 <__cxa_free_dependent_exception+0x3c>)
 8025c86:	b410      	push	{r4}
 8025c88:	4298      	cmp	r0, r3
 8025c8a:	d315      	bcc.n	8025cb8 <__cxa_free_dependent_exception+0x34>
 8025c8c:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8025c90:	4290      	cmp	r0, r2
 8025c92:	d211      	bcs.n	8025cb8 <__cxa_free_dependent_exception+0x34>
 8025c94:	f648 0189 	movw	r1, #34953	; 0x8889
 8025c98:	1ac3      	subs	r3, r0, r3
 8025c9a:	f6c8 0188 	movt	r1, #34952	; 0x8888
 8025c9e:	4a09      	ldr	r2, [pc, #36]	; (8025cc4 <__cxa_free_dependent_exception+0x40>)
 8025ca0:	fba1 0103 	umull	r0, r1, r1, r3
 8025ca4:	2301      	movs	r3, #1
 8025ca6:	6814      	ldr	r4, [r2, #0]
 8025ca8:	0989      	lsrs	r1, r1, #6
 8025caa:	fa13 f101 	lsls.w	r1, r3, r1
 8025cae:	ea24 0101 	bic.w	r1, r4, r1
 8025cb2:	6011      	str	r1, [r2, #0]
 8025cb4:	bc10      	pop	{r4}
 8025cb6:	4770      	bx	lr
 8025cb8:	bc10      	pop	{r4}
 8025cba:	f7e1 ba03 	b.w	80070c4 <free>
 8025cbe:	bf00      	nop
 8025cc0:	20000bc8 	.word	0x20000bc8
 8025cc4:	20000bc0 	.word	0x20000bc0

08025cc8 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 8025cc8:	b510      	push	{r4, lr}
 8025cca:	3302      	adds	r3, #2
 8025ccc:	68c4      	ldr	r4, [r0, #12]
 8025cce:	68c9      	ldr	r1, [r1, #12]
 8025cd0:	4620      	mov	r0, r4
 8025cd2:	6824      	ldr	r4, [r4, #0]
 8025cd4:	6924      	ldr	r4, [r4, #16]
 8025cd6:	47a0      	blx	r4
 8025cd8:	bd10      	pop	{r4, pc}
 8025cda:	bf00      	nop

08025cdc <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 8025cdc:	4b03      	ldr	r3, [pc, #12]	; (8025cec <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 8025cde:	b510      	push	{r4, lr}
 8025ce0:	4604      	mov	r4, r0
 8025ce2:	6003      	str	r3, [r0, #0]
 8025ce4:	f7ff fe6c 	bl	80259c0 <_ZNSt9type_infoD1Ev>
 8025ce8:	4620      	mov	r0, r4
 8025cea:	bd10      	pop	{r4, pc}
 8025cec:	08028c00 	.word	0x08028c00

08025cf0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 8025cf0:	4b05      	ldr	r3, [pc, #20]	; (8025d08 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
 8025cf2:	b510      	push	{r4, lr}
 8025cf4:	4604      	mov	r4, r0
 8025cf6:	6003      	str	r3, [r0, #0]
 8025cf8:	f7ff fe62 	bl	80259c0 <_ZNSt9type_infoD1Ev>
 8025cfc:	4620      	mov	r0, r4
 8025cfe:	f7fe fe97 	bl	8024a30 <_ZdlPv>
 8025d02:	4620      	mov	r0, r4
 8025d04:	bd10      	pop	{r4, pc}
 8025d06:	bf00      	nop
 8025d08:	08028c00 	.word	0x08028c00

08025d0c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 8025d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d10:	4605      	mov	r5, r0
 8025d12:	460c      	mov	r4, r1
 8025d14:	4617      	mov	r7, r2
 8025d16:	461e      	mov	r6, r3
 8025d18:	f7ff fe68 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8025d1c:	4680      	mov	r8, r0
 8025d1e:	2800      	cmp	r0, #0
 8025d20:	d125      	bne.n	8025d6e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x62>
 8025d22:	682b      	ldr	r3, [r5, #0]
 8025d24:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8025d28:	2c00      	cmp	r4, #0
 8025d2a:	d023      	beq.n	8025d74 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x68>
 8025d2c:	6823      	ldr	r3, [r4, #0]
 8025d2e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8025d32:	f7ff fe5b 	bl	80259ec <_ZNKSt9type_infoeqERKS_>
 8025d36:	b1a8      	cbz	r0, 8025d64 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 8025d38:	f016 0001 	ands.w	r0, r6, #1
 8025d3c:	d015      	beq.n	8025d6a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5e>
 8025d3e:	68ab      	ldr	r3, [r5, #8]
 8025d40:	68a2      	ldr	r2, [r4, #8]
 8025d42:	439a      	bics	r2, r3
 8025d44:	d110      	bne.n	8025d68 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
 8025d46:	f8d5 e000 	ldr.w	lr, [r5]
 8025d4a:	07db      	lsls	r3, r3, #31
 8025d4c:	bf58      	it	pl
 8025d4e:	f026 0601 	bicpl.w	r6, r6, #1
 8025d52:	4621      	mov	r1, r4
 8025d54:	4628      	mov	r0, r5
 8025d56:	463a      	mov	r2, r7
 8025d58:	4633      	mov	r3, r6
 8025d5a:	f8de 4018 	ldr.w	r4, [lr, #24]
 8025d5e:	47a0      	blx	r4
 8025d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d68:	4640      	mov	r0, r8
 8025d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d6e:	2001      	movs	r0, #1
 8025d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d74:	f7ff f82a 	bl	8024dcc <__cxa_bad_typeid>
 8025d78:	462f2e2e 	.word	0x462f2e2e
 8025d7c:	52656572 	.word	0x52656572
 8025d80:	5f534f54 	.word	0x5f534f54
 8025d84:	532f4345 	.word	0x532f4345
 8025d88:	6372756f 	.word	0x6372756f
 8025d8c:	53412f65 	.word	0x53412f65
 8025d90:	4f636e79 	.word	0x4f636e79
 8025d94:	63656a62 	.word	0x63656a62
 8025d98:	70632e74 	.word	0x70632e74
 8025d9c:	00000070 	.word	0x00000070
 8025da0:	646e6168 	.word	0x646e6168
 8025da4:	2120656c 	.word	0x2120656c
 8025da8:	554e203d 	.word	0x554e203d
 8025dac:	00004c4c 	.word	0x00004c4c
 8025db0:	462f2e2e 	.word	0x462f2e2e
 8025db4:	52656572 	.word	0x52656572
 8025db8:	5f534f54 	.word	0x5f534f54
 8025dbc:	532f4345 	.word	0x532f4345
 8025dc0:	6372756f 	.word	0x6372756f
 8025dc4:	42432f65 	.word	0x42432f65
 8025dc8:	72616e69 	.word	0x72616e69
 8025dcc:	6d655379 	.word	0x6d655379
 8025dd0:	6f687061 	.word	0x6f687061
 8025dd4:	682e6572 	.word	0x682e6572
 8025dd8:	00000000 	.word	0x00000000
 8025ddc:	61567349 	.word	0x61567349
 8025de0:	2864696c 	.word	0x2864696c
 8025de4:	00000029 	.word	0x00000029
 8025de8:	462f2e2e 	.word	0x462f2e2e
 8025dec:	52656572 	.word	0x52656572
 8025df0:	5f534f54 	.word	0x5f534f54
 8025df4:	532f4345 	.word	0x532f4345
 8025df8:	6372756f 	.word	0x6372756f
 8025dfc:	43432f65 	.word	0x43432f65
 8025e00:	746e756f 	.word	0x746e756f
 8025e04:	53676e69 	.word	0x53676e69
 8025e08:	70616d65 	.word	0x70616d65
 8025e0c:	65726f68 	.word	0x65726f68
 8025e10:	0000682e 	.word	0x0000682e
 8025e14:	61567349 	.word	0x61567349
 8025e18:	2864696c 	.word	0x2864696c
 8025e1c:	00000029 	.word	0x00000029
 8025e20:	462f2e2e 	.word	0x462f2e2e
 8025e24:	52656572 	.word	0x52656572
 8025e28:	5f534f54 	.word	0x5f534f54
 8025e2c:	532f4345 	.word	0x532f4345
 8025e30:	6372756f 	.word	0x6372756f
 8025e34:	51432f65 	.word	0x51432f65
 8025e38:	65756575 	.word	0x65756575
 8025e3c:	0000682e 	.word	0x0000682e
 8025e40:	61567349 	.word	0x61567349
 8025e44:	2864696c 	.word	0x2864696c
 8025e48:	00000029 	.word	0x00000029
 8025e4c:	462f2e2e 	.word	0x462f2e2e
 8025e50:	52656572 	.word	0x52656572
 8025e54:	5f534f54 	.word	0x5f534f54
 8025e58:	532f4345 	.word	0x532f4345
 8025e5c:	6372756f 	.word	0x6372756f
 8025e60:	4d432f65 	.word	0x4d432f65
 8025e64:	78657475 	.word	0x78657475
 8025e68:	0000682e 	.word	0x0000682e
 8025e6c:	61567349 	.word	0x61567349
 8025e70:	2864696c 	.word	0x2864696c
 8025e74:	00000029 	.word	0x00000029
 8025e78:	462f2e2e 	.word	0x462f2e2e
 8025e7c:	52656572 	.word	0x52656572
 8025e80:	5f534f54 	.word	0x5f534f54
 8025e84:	532f4345 	.word	0x532f4345
 8025e88:	6372756f 	.word	0x6372756f
 8025e8c:	51432f65 	.word	0x51432f65
 8025e90:	65756575 	.word	0x65756575
 8025e94:	7070632e 	.word	0x7070632e
 8025e98:	00000000 	.word	0x00000000
 8025e9c:	56734921 	.word	0x56734921
 8025ea0:	64696c61 	.word	0x64696c61
 8025ea4:	00002928 	.word	0x00002928
 8025ea8:	646e6168 	.word	0x646e6168
 8025eac:	2120656c 	.word	0x2120656c
 8025eb0:	554e203d 	.word	0x554e203d
 8025eb4:	00004c4c 	.word	0x00004c4c
 8025eb8:	462f2e2e 	.word	0x462f2e2e
 8025ebc:	52656572 	.word	0x52656572
 8025ec0:	5f534f54 	.word	0x5f534f54
 8025ec4:	532f4345 	.word	0x532f4345
 8025ec8:	6372756f 	.word	0x6372756f
 8025ecc:	54432f65 	.word	0x54432f65
 8025ed0:	2e6b7361 	.word	0x2e6b7361
 8025ed4:	00707063 	.word	0x00707063
 8025ed8:	646e6168 	.word	0x646e6168
 8025edc:	2120656c 	.word	0x2120656c
 8025ee0:	554e203d 	.word	0x554e203d
 8025ee4:	00004c4c 	.word	0x00004c4c
 8025ee8:	454c4449 	.word	0x454c4449
 8025eec:	00000000 	.word	0x00000000
 8025ef0:	00000a0d 	.word	0x00000a0d
 8025ef4:	20207525 	.word	0x20207525
 8025ef8:	20206325 	.word	0x20206325
 8025efc:	36312d25 	.word	0x36312d25
 8025f00:	20202073 	.word	0x20202073
 8025f04:	20202020 	.word	0x20202020
 8025f08:	30202020 	.word	0x30202020
 8025f0c:	30202020 	.word	0x30202020
 8025f10:	20202525 	.word	0x20202525
 8025f14:	0d753525 	.word	0x0d753525
 8025f18:	0000000a 	.word	0x0000000a
 8025f1c:	20207525 	.word	0x20207525
 8025f20:	20206325 	.word	0x20206325
 8025f24:	36312d25 	.word	0x36312d25
 8025f28:	31252073 	.word	0x31252073
 8025f2c:	25207530 	.word	0x25207530
 8025f30:	25257533 	.word	0x25257533
 8025f34:	35252020 	.word	0x35252020
 8025f38:	000a0d75 	.word	0x000a0d75
 8025f3c:	20207525 	.word	0x20207525
 8025f40:	20206325 	.word	0x20206325
 8025f44:	36312d25 	.word	0x36312d25
 8025f48:	31252073 	.word	0x31252073
 8025f4c:	20207530 	.word	0x20207530
 8025f50:	2525313c 	.word	0x2525313c
 8025f54:	35252020 	.word	0x35252020
 8025f58:	000a0d75 	.word	0x000a0d75
 8025f5c:	2064654c 	.word	0x2064654c
 8025f60:	72616548 	.word	0x72616548
 8025f64:	61656274 	.word	0x61656274
 8025f68:	00000074 	.word	0x00000074
 8025f6c:	756e654d 	.word	0x756e654d
 8025f70:	00000065 	.word	0x00000065
 8025f74:	6e676973 	.word	0x6e676973
 8025f78:	63206465 	.word	0x63206465
 8025f7c:	00726168 	.word	0x00726168
 8025f80:	6c6f6f62 	.word	0x6c6f6f62
 8025f84:	00000000 	.word	0x00000000
 8025f88:	6c6f6f62 	.word	0x6c6f6f62
 8025f8c:	006e6165 	.word	0x006e6165
 8025f90:	72616863 	.word	0x72616863
 8025f94:	00000000 	.word	0x00000000
 8025f98:	65747962 	.word	0x65747962
 8025f9c:	00000000 	.word	0x00000000
 8025fa0:	62756f64 	.word	0x62756f64
 8025fa4:	0000656c 	.word	0x0000656c
 8025fa8:	676e6f6c 	.word	0x676e6f6c
 8025fac:	756f6420 	.word	0x756f6420
 8025fb0:	00656c62 	.word	0x00656c62
 8025fb4:	616f6c66 	.word	0x616f6c66
 8025fb8:	00000074 	.word	0x00000074
 8025fbc:	6c665f5f 	.word	0x6c665f5f
 8025fc0:	3174616f 	.word	0x3174616f
 8025fc4:	00003832 	.word	0x00003832
 8025fc8:	69736e75 	.word	0x69736e75
 8025fcc:	64656e67 	.word	0x64656e67
 8025fd0:	61686320 	.word	0x61686320
 8025fd4:	00000072 	.word	0x00000072
 8025fd8:	00746e69 	.word	0x00746e69
 8025fdc:	69736e75 	.word	0x69736e75
 8025fe0:	64656e67 	.word	0x64656e67
 8025fe4:	746e6920 	.word	0x746e6920
 8025fe8:	00000000 	.word	0x00000000
 8025fec:	69736e75 	.word	0x69736e75
 8025ff0:	64656e67 	.word	0x64656e67
 8025ff4:	00000000 	.word	0x00000000
 8025ff8:	676e6f6c 	.word	0x676e6f6c
 8025ffc:	00000000 	.word	0x00000000
 8026000:	69736e75 	.word	0x69736e75
 8026004:	64656e67 	.word	0x64656e67
 8026008:	6e6f6c20 	.word	0x6e6f6c20
 802600c:	00000067 	.word	0x00000067
 8026010:	6e695f5f 	.word	0x6e695f5f
 8026014:	38323174 	.word	0x38323174
 8026018:	00000000 	.word	0x00000000
 802601c:	69736e75 	.word	0x69736e75
 8026020:	64656e67 	.word	0x64656e67
 8026024:	695f5f20 	.word	0x695f5f20
 8026028:	3231746e 	.word	0x3231746e
 802602c:	00000038 	.word	0x00000038
 8026030:	726f6873 	.word	0x726f6873
 8026034:	00000074 	.word	0x00000074
 8026038:	69736e75 	.word	0x69736e75
 802603c:	64656e67 	.word	0x64656e67
 8026040:	6f687320 	.word	0x6f687320
 8026044:	00007472 	.word	0x00007472
 8026048:	64696f76 	.word	0x64696f76
 802604c:	00000000 	.word	0x00000000
 8026050:	61686377 	.word	0x61686377
 8026054:	00745f72 	.word	0x00745f72
 8026058:	676e6f6c 	.word	0x676e6f6c
 802605c:	6e6f6c20 	.word	0x6e6f6c20
 8026060:	00000067 	.word	0x00000067
 8026064:	69736e75 	.word	0x69736e75
 8026068:	64656e67 	.word	0x64656e67
 802606c:	6e6f6c20 	.word	0x6e6f6c20
 8026070:	6f6c2067 	.word	0x6f6c2067
 8026074:	0000676e 	.word	0x0000676e
 8026078:	002e2e2e 	.word	0x002e2e2e
 802607c:	69636564 	.word	0x69636564
 8026080:	336c616d 	.word	0x336c616d
 8026084:	00000032 	.word	0x00000032
 8026088:	69636564 	.word	0x69636564
 802608c:	366c616d 	.word	0x366c616d
 8026090:	00000034 	.word	0x00000034
 8026094:	69636564 	.word	0x69636564
 8026098:	316c616d 	.word	0x316c616d
 802609c:	00003832 	.word	0x00003832
 80260a0:	666c6168 	.word	0x666c6168
 80260a4:	00000000 	.word	0x00000000
 80260a8:	72616863 	.word	0x72616863
 80260ac:	745f3631 	.word	0x745f3631
 80260b0:	00000000 	.word	0x00000000
 80260b4:	72616863 	.word	0x72616863
 80260b8:	745f3233 	.word	0x745f3233
 80260bc:	00000000 	.word	0x00000000
 80260c0:	6c636564 	.word	0x6c636564
 80260c4:	65707974 	.word	0x65707974
 80260c8:	6c756e28 	.word	0x6c756e28
 80260cc:	7274706c 	.word	0x7274706c
 80260d0:	00000029 	.word	0x00000029

080260d4 <cplus_demangle_builtin_types>:
 80260d4:	08025f74 0000000b 08025f74 0000000b     t_......t_......
 80260e4:	00000000 08025f80 00000004 08025f88     ....._......._..
 80260f4:	00000007 00000007 08025f90 00000004     ........._......
 8026104:	08025f98 00000004 00000000 08025fa0     ._..........._..
 8026114:	00000006 08025fa0 00000006 00000008     ....._..........
 8026124:	08025fa8 0000000b 08025fa8 0000000b     ._......._......
 8026134:	00000008 08025fb4 00000005 08025fb4     ....._......._..
 8026144:	00000005 00000008 08025fbc 0000000a     ........._......
 8026154:	08025fbc 0000000a 00000008 08025fc8     ._..........._..
 8026164:	0000000d 08025fc8 0000000d 00000000     ....._..........
 8026174:	08025fd8 00000003 08025fd8 00000003     ._......._......
 8026184:	00000001 08025fdc 0000000c 08025fec     ....._......._..
 8026194:	00000008 00000002 00000000 00000000     ................
	...
 80261b0:	08025ff8 00000004 08025ff8 00000004     ._......._......
 80261c0:	00000003 08026000 0000000d 08026000     .....`.......`..
 80261d0:	0000000d 00000004 08026010 00000008     .........`......
 80261e0:	08026010 00000008 00000000 0802601c     .`...........`..
 80261f0:	00000011 0802601c 00000011 00000000     .....`..........
	...
 802623c:	08026030 00000005 08026030 00000005     0`......0`......
 802624c:	00000000 08026038 0000000e 08026038     ....8`......8`..
 802625c:	0000000e 00000000 00000000 00000000     ................
	...
 8026278:	08026048 00000004 08026048 00000004     H`......H`......
 8026288:	00000009 08026050 00000007 08025f90     ....P`......._..
 8026298:	00000004 00000000 08026058 00000009     ........X`......
 80262a8:	08025ff8 00000004 00000005 08026064     ._..........d`..
 80262b8:	00000012 08026064 00000012 00000006     ....d`..........
 80262c8:	08026078 00000003 08026078 00000003     x`......x`......
 80262d8:	00000000 0802607c 00000009 0802607c     ....|`......|`..
 80262e8:	00000009 00000000 08026088 00000009     .........`......
 80262f8:	08026088 00000009 00000000 08026094     .`...........`..
 8026308:	0000000a 08026094 0000000a 00000000     .....`..........
 8026318:	080260a0 00000004 080260a0 00000004     .`.......`......
 8026328:	00000008 080260a8 00000008 080260a8     .....`.......`..
 8026338:	00000008 00000000 080260b4 00000008     .........`......
 8026348:	080260b4 00000008 00000000 080260c0     .`...........`..
 8026358:	00000011 080260c0 00000011 00000000     .....`..........
 8026368:	00647473 4f4c475f 5f4c4142 00000000     std._GLOBAL_....
 8026378:	6f6e6128 6f6d796e 6e207375 73656d61     (anonymous names
 8026388:	65636170 00000029 00004e61 00003d26     pace)...aN..&=..
 8026398:	00005361 0000003d 00006161 00002626     aS..=...aa..&&..
 80263a8:	00006461 00000026 00006e61 00006c63     ad..&...an..cl..
 80263b8:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
 80263c8:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
 80263d8:	656c6564 5d5b6574 00000000 00006564     delete[]....de..
 80263e8:	0000002a 00006c64 656c6564 00006574     *...dl..delete..
 80263f8:	00007464 0000002e 00007664 0000002f     dt......dv../...
 8026408:	00004f65 00003d5e 00006f65 0000005e     eO..^=..eo..^...
 8026418:	00007165 00003d3d 00006567 00003d3e     eq..==..ge..>=..
 8026428:	00007467 0000003e 00007869 00005d5b     gt..>...ix..[]..
 8026438:	0000536c 003d3c3c 0000656c 00003d3c     lS..<<=.le..<=..
 8026448:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
 8026458:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
 8026468:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
 8026478:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
 8026488:	0000656e 00003d21 0000676e 0000746e     ne..!=..ng..nt..
 8026498:	00000021 0000776e 0077656e 0000526f     !...nw..new.oR..
 80264a8:	00003d7c 00006f6f 00007c7c 0000726f     |=..oo..||..or..
 80264b8:	0000007c 00004c70 00003d2b 00006c70     |...pL..+=..pl..
 80264c8:	0000002b 00006d70 002a3e2d 00007070     +...pm..->*.pp..
 80264d8:	00002b2b 00007370 00007470 00003e2d     ++..ps..pt..->..
 80264e8:	00007571 0000003f 00004d72 00003d25     qu..?...rM..%=..
 80264f8:	00005372 003d3e3e 00006d72 00000025     rS..>>=.rm..%...
 8026508:	00007372 00003e3e 00007473 657a6973     rs..>>..st..size
 8026518:	0020666f 00007a73 00007461 67696c61     of .sz..at..alig
 8026528:	20666f6e 00000000 00007a61              nof ....az..

08026534 <cplus_demangle_operators>:
 8026534:	08026390 08026394 00000002 00000002     .c...c..........
 8026544:	08026398 0802639c 00000001 00000002     .c...c..........
 8026554:	080263a0 080263a4 00000002 00000002     .c...c..........
 8026564:	080263a8 080263ac 00000001 00000001     .c...c..........
 8026574:	080263b0 080263ac 00000001 00000002     .c...c..........
 8026584:	080263b4 080263b8 00000002 00000002     .c...c..........
 8026594:	080263bc 080263c0 00000001 00000002     .c...c..........
 80265a4:	080263c4 080263c8 00000001 00000001     .c...c..........
 80265b4:	080263cc 080263d0 00000002 00000002     .c...c..........
 80265c4:	080263d4 080263d8 00000008 00000001     .c...c..........
 80265d4:	080263e4 080263e8 00000001 00000001     .c...c..........
 80265e4:	080263ec 080263f0 00000006 00000001     .c...c..........
 80265f4:	080263f8 080263fc 00000001 00000002     .c...c..........
 8026604:	08026400 08026404 00000001 00000002     .d...d..........
 8026614:	08026408 0802640c 00000002 00000002     .d...d..........
 8026624:	08026410 08026414 00000001 00000002     .d...d..........
 8026634:	08026418 0802641c 00000002 00000002     .d...d..........
 8026644:	08026420 08026424 00000002 00000002      d..$d..........
 8026654:	08026428 0802642c 00000001 00000002     (d..,d..........
 8026664:	08026430 08026434 00000002 00000002     0d..4d..........
 8026674:	08026438 0802643c 00000003 00000002     8d..<d..........
 8026684:	08026440 08026444 00000002 00000002     @d..Dd..........
 8026694:	08026448 0802644c 00000002 00000002     Hd..Ld..........
 80266a4:	08026450 08026454 00000001 00000002     Pd..Td..........
 80266b4:	08026458 0802645c 00000002 00000002     Xd..\d..........
 80266c4:	08026460 08026464 00000002 00000002     `d..dd..........
 80266d4:	08026468 0802646c 00000001 00000002     hd..ld..........
 80266e4:	08026470 080263e8 00000001 00000002     pd...c..........
 80266f4:	08026474 08026478 00000002 00000001     td..xd..........
 8026704:	0802647c 08026480 00000005 00000001     |d...d..........
 8026714:	08026488 0802648c 00000002 00000002     .d...d..........
 8026724:	08026490 0802646c 00000001 00000001     .d..ld..........
 8026734:	08026494 08026498 00000001 00000001     .d...d..........
 8026744:	0802649c 080264a0 00000003 00000001     .d...d..........
 8026754:	080264a4 080264a8 00000002 00000002     .d...d..........
 8026764:	080264ac 080264b0 00000002 00000002     .d...d..........
 8026774:	080264b4 080264b8 00000001 00000002     .d...d..........
 8026784:	080264bc 080264c0 00000002 00000002     .d...d..........
 8026794:	080264c4 080264c8 00000001 00000002     .d...d..........
 80267a4:	080264cc 080264d0 00000003 00000002     .d...d..........
 80267b4:	080264d4 080264d8 00000002 00000001     .d...d..........
 80267c4:	080264dc 080264c8 00000001 00000001     .d...d..........
 80267d4:	080264e0 080264e4 00000002 00000002     .d...d..........
 80267e4:	080264e8 080264ec 00000001 00000003     .d...d..........
 80267f4:	080264f0 080264f4 00000002 00000002     .d...d..........
 8026804:	080264f8 080264fc 00000003 00000002     .d...d..........
 8026814:	08026500 08026504 00000001 00000002     .e...e..........
 8026824:	08026508 0802650c 00000002 00000002     .e...e..........
 8026834:	08026510 08026514 00000007 00000001     .e...e..........
 8026844:	0802651c 08026514 00000007 00000001     .e...e..........
 8026854:	08026520 08026524 00000008 00000001      e..$e..........
 8026864:	08026530 08026524 00000008 00000001     0e..$e..........
	...
 8026884:	69727473 6c20676e 72657469 00006c61     string literal..
 8026894:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
 80268a4:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
 80268b4:	7361623a 735f6369 6e697274 00000067     :basic_string...
 80268c4:	69736162 74735f63 676e6972 00000000     basic_string....
 80268d4:	3a647473 7274733a 00676e69 3a647473     std::string.std:
 80268e4:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
 80268f4:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
 8026904:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
 8026914:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
 8026924:	00003e20 3a647473 7473693a 6d616572      >..std::istream
 8026934:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
 8026944:	65727473 633c6d61 2c726168 64747320     stream<char, std
 8026954:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
 8026964:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
 8026974:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
 8026984:	6d616572 00000000 3a647473 7361623a     ream....std::bas
 8026994:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
 80269a4:	64747320 68633a3a 745f7261 74696172      std::char_trait
 80269b4:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
 80269c4:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
 80269d4:	736f693a 61657274 0000006d 3a647473     :iostream...std:
 80269e4:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
 80269f4:	72616863 7473202c 633a3a64 5f726168     char, std::char_
 8026a04:	69617274 633c7374 3e726168 00003e20     traits<char> >..
 8026a14:	69736162 6f695f63 65727473 00006d61     basic_iostream..

08026a24 <standard_subs>:
 8026a24:	00000074 08026368 00000003 08026368     t...hc......hc..
 8026a34:	00000003 00000000 00000000 00000061     ............a...
 8026a44:	08026894 0000000e 08026894 0000000e     .h.......h......
 8026a54:	080268a4 00000009 00000062 080268b0     .h......b....h..
 8026a64:	00000011 080268b0 00000011 080268c4     .....h.......h..
 8026a74:	0000000c 00000073 080268d4 0000000b     ....s....h......
 8026a84:	080268e0 00000046 080268c4 0000000c     .h..F....h......
 8026a94:	00000069 08026928 0000000c 08026938     i...(i......8i..
 8026aa4:	00000031 0802696c 0000000d 0000006f     1...li......o...
 8026ab4:	0802697c 0000000c 0802698c 00000031     |i.......i..1...
 8026ac4:	080269c0 0000000d 00000064 080269d0     .i......d....i..
 8026ad4:	0000000d 080269e0 00000032 08026a14     .....i..2....j..
 8026ae4:	0000000e 00646c25 00003a3a 7272414a     ....%ld.::..JArr
 8026af4:	00007961 62617476 6620656c 0020726f     ay..vtable for .
 8026b04:	20545456 20726f66 00000000 736e6f63     VTT for ....cons
 8026b14:	63757274 6e6f6974 61747620 20656c62     truction vtable 
 8026b24:	20726f66 00000000 2d6e692d 00000000     for ....-in-....
 8026b34:	65707974 6f666e69 726f6620 00000020     typeinfo for ...
 8026b44:	65707974 6f666e69 6d616e20 6f662065     typeinfo name fo
 8026b54:	00002072 65707974 6f666e69 206e6620     r ..typeinfo fn 
 8026b64:	20726f66 00000000 2d6e6f6e 74726976     for ....non-virt
 8026b74:	206c6175 6e756874 6f74206b 00000020     ual thunk to ...
 8026b84:	74726976 206c6175 6e756874 6f74206b     virtual thunk to
 8026b94:	00000020 61766f63 6e616972 65722074      ...covariant re
 8026ba4:	6e727574 75687420 74206b6e 0000206f     turn thunk to ..
 8026bb4:	6176616a 616c4320 66207373 0020726f     java Class for .
 8026bc4:	72617567 61762064 62616972 6620656c     guard variable f
 8026bd4:	0020726f 65666572 636e6572 65742065     or .reference te
 8026be4:	726f706d 20797261 20726f66 00000000     mporary for ....
 8026bf4:	64646968 61206e65 7361696c 726f6620     hidden alias for
 8026c04:	00000020 7461535f 00000020 6363415f      ..._Sat ..._Acc
 8026c14:	00006d75 6172465f 00007463 0000202c     um.._Fract.., ..
 8026c24:	7265706f 726f7461 00000000 7265706f     operator....oper
 8026c34:	726f7461 00000020 00203a20 00006c75     ator ... : .ul..
 8026c44:	00006c6c 006c6c75 736c6166 00000065     ll..ull.false...
 8026c54:	65757274 00000000 6176616a 73657220     true....java res
 8026c64:	6372756f 00002065 6c636564 65707974     ource ..decltype
 8026c74:	00002820 7261707b 0000236d 626f6c67      (..{parm#..glob
 8026c84:	63206c61 74736e6f 74637572 2073726f     al constructors 
 8026c94:	6579656b 6f742064 00000020 626f6c67     keyed to ...glob
 8026ca4:	64206c61 72747365 6f746375 6b207372     al destructors k
 8026cb4:	64657965 206f7420 00000000 6d616c7b     eyed to ....{lam
 8026cc4:	28616462 00000000 00002329 6e6e757b     bda(....)#..{unn
 8026cd4:	64656d61 70797420 00002365 6c635b20     amed type#.. [cl
 8026ce4:	20656e6f 00000000 6665647b 746c7561     one ....{default
 8026cf4:	67726120 00000023 003a3a7d 73657220      arg#...}::. res
 8026d04:	63697274 00000074 6c6f7620 6c697461     trict... volatil
 8026d14:	00000065 6e6f6320 00007473 706d6f63     e... const..comp
 8026d24:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
 8026d34:	00002079 002a3a3a 765f5f20 6f746365     y ..::*. __vecto
 8026d44:	00002872 00002820                       r(.. (..

08026d4c <_global_impure_ptr>:
 8026d4c:	20000010                                ... 

08026d50 <blanks.3927>:
 8026d50:	20202020 20202020 20202020 20202020                     

08026d60 <zeroes.3928>:
 8026d60:	30303030 30303030 30303030 30303030     0000000000000000

08026d70 <blanks.3885>:
 8026d70:	20202020 20202020 20202020 20202020                     

08026d80 <zeroes.3886>:
 8026d80:	30303030 30303030 30303030 30303030     0000000000000000

08026d90 <p05.2449>:
 8026d90:	00000005 00000019 0000007d 00000000     ........}.......

08026da0 <__mprec_tens>:
 8026da0:	00000000 3ff00000 00000000 40240000     .......?......$@
 8026db0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8026dc0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8026dd0:	00000000 412e8480 00000000 416312d0     .......A......cA
 8026de0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8026df0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8026e00:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8026e10:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8026e20:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8026e30:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8026e40:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8026e50:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8026e60:	79d99db4 44ea7843                       ...yCx.D

08026e68 <__mprec_tinytens>:
 8026e68:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8026e78:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8026e88:	64ac6f43 0ac80628                       Co.d(...

08026e90 <__mprec_bigtens>:
 8026e90:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8026ea0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8026eb0:	7f73bf3c 75154fdd                       <.s..O.u

08026eb8 <blanks.3871>:
 8026eb8:	20202020 20202020 20202020 20202020                     

08026ec8 <zeroes.3872>:
 8026ec8:	30303030 30303030 30303030 30303030     0000000000000000

08026ed8 <GPIO_PIN>:
 8026ed8:	20001000 80004000                       ... .@..

08026ee0 <GPIO_CLK>:
 8026ee0:	00000008 00000008 00000008 00000008     ................

08026ef0 <BUTTON_PIN>:
 8026ef0:	00000001                                ....

08026ef4 <BUTTON_CLK>:
 8026ef4:	00000001                                ....

08026ef8 <BUTTON_EXTI_LINE>:
 8026ef8:	00000001                                ....

08026efc <BUTTON_PORT_SOURCE>:
 8026efc:	00000000                                ....

08026f00 <BUTTON_PIN_SOURCE>:
 8026f00:	00000000                                ....

08026f04 <BUTTON_IRQn>:
 8026f04:	00000006                                ....

08026f08 <_ZTV6CMenue>:
	...
 8026f10:	0801edbd 080214c9 0801ede1 0801ee55     ............U...
 8026f20:	0801ee8d 0801eead 0801eec5 0801ee05     ................

08026f30 <_ZTV11CGraphicLCD>:
	...
 8026f38:	08024a39 08024a39 08024a39 08024a39     9J..9J..9J..9J..
 8026f48:	08024a39 08024a39 08024a39 08024a39     9J..9J..9J..9J..
 8026f58:	08024a39 0801efed 0801f021 00000000     9J......!.......

08026f68 <_ZTV13CT6963CDriver>:
	...
 8026f70:	0801f319 0801f4a5 0801f5f5 0801f9a9     ................
 8026f80:	0801faed 0801fb4d 0801f3f5 0801fcd1     ....M...........
 8026f90:	0801f0f5 0801f09d 0801f0d5 08024a39     ............9J..
 8026fa0:	08024a39 08024a39 08024a39 08024a39     9J..9J..9J..9J..

08026fb0 <_ZL12c_FontNative>:
	...

08026fc8 <_ZL20GLCD_NUMBER_OF_LINES>:
 8026fc8:	1e08f080                                         .

08026fc9 <_ZL20GLCD_PIXELS_PER_LINE>:
 8026fc9:	1e1e08f0                                         .

08026fca <_ZL15GLCD_FONT_WIDTH>:
 8026fca:	001e1e08                                         .

08026fcb <_ZL17GLCD_GRAPHIC_AREA>:
 8026fcb:	00001e1e                                         .

08026fcc <_ZL14GLCD_TEXT_AREA>:
 8026fcc:	0000001e                                ....

08026fd0 <_ZL17GLCD_GRAPHIC_SIZE>:
 8026fd0:	00000f00                                ....

08026fd4 <_ZL14GLCD_TEXT_SIZE>:
 8026fd4:	000001e0                                ....

08026fd8 <_ZL14GLCD_TEXT_HOME>:
 8026fd8:	00000000                                ....

08026fdc <_ZL17GLCD_GRAPHIC_HOME>:
 8026fdc:	000001e0                                ....

08026fe0 <_ZL20GLCD_OFFSET_REGISTER>:
 8026fe0:	00000002                                ....

08026fe4 <_ZL21GLCD_EXTERNAL_CG_HOME>:
 8026fe4:	00001000                                ....

08026fe8 <_ZL24T6963_SET_CURSOR_POINTER>:
 8026fe8:	40242221                                         !

08026fe9 <_ZL25T6963_SET_OFFSET_REGISTER>:
 8026fe9:	41402422                                         "

08026fea <_ZL25T6963_SET_ADDRESS_POINTER>:
 8026fea:	42414024                                         $

08026feb <_ZL27T6963_SET_TEXT_HOME_ADDRESS>:
 8026feb:	43424140                                         @

08026fec <_ZL19T6963_SET_TEXT_AREA>:
 8026fec:	80434241                                         A

08026fed <_ZL30T6963_SET_GRAPHIC_HOME_ADDRESS>:
 8026fed:	90804342                                         B

08026fee <_ZL22T6963_SET_GRAPHIC_AREA>:
 8026fee:	01908043                                         C

08026fef <_ZL14T6963_MODE_SET>:
 8026fef:	02019080                                         .

08026ff0 <_ZL18T6963_DISPLAY_MODE>:
 8026ff0:	04020190                                         .

08026ff1 <_ZL21T6963_CURSOR_BLINK_ON>:
 8026ff1:	08040201                                         .

08026ff2 <_ZL23T6963_CURSOR_DISPLAY_ON>:
 8026ff2:	a0080402                                         .

08026ff3 <_ZL21T6963_TEXT_DISPLAY_ON>:
 8026ff3:	00a00804                                         .

08026ff4 <_ZL24T6963_GRAPHIC_DISPLAY_ON>:
 8026ff4:	0100a008                                         .

08026ff5 <_ZL27T6963_CURSOR_PATTERN_SELECT>:
 8026ff5:	020100a0                                         .

08026ff6 <_ZL19T6963_CURSOR_1_LINE>:
	...

08026ff7 <_ZL19T6963_CURSOR_2_LINE>:
 8026ff7:	04030201                                         .

08026ff8 <_ZL19T6963_CURSOR_3_LINE>:
 8026ff8:	05040302                                         .

08026ff9 <_ZL19T6963_CURSOR_4_LINE>:
 8026ff9:	06050403                                         .

08026ffa <_ZL19T6963_CURSOR_5_LINE>:
 8026ffa:	07060504                                         .

08026ffb <_ZL19T6963_CURSOR_6_LINE>:
 8026ffb:	b0070605                                         .

08026ffc <_ZL19T6963_CURSOR_7_LINE>:
 8026ffc:	b1b00706                                         .

08026ffd <_ZL19T6963_CURSOR_8_LINE>:
 8026ffd:	b2b1b007                                         .

08026ffe <_ZL25T6963_SET_DATA_AUTO_WRITE>:
 8026ffe:	c0b2b1b0                                         .

08026fff <_ZL24T6963_SET_DATA_AUTO_READ>:
 8026fff:	c1c0b2b1                                         .

08027000 <_ZL16T6963_AUTO_RESET>:
 8027000:	c2c1c0b2                                         .

08027001 <_ZL30T6963_DATA_WRITE_AND_INCREMENT>:
 8027001:	c3c2c1c0                                         .

08027002 <_ZL29T6963_DATA_READ_AND_INCREMENT>:
 8027002:	c4c3c2c1                                         .

08027003 <_ZL30T6963_DATA_WRITE_AND_DECREMENT>:
 8027003:	c5c4c3c2                                         .

08027004 <_ZL29T6963_DATA_READ_AND_DECREMENT>:
 8027004:	e0c5c4c3                                         .

08027005 <_ZL32T6963_DATA_WRITE_AND_NONVARIALBE>:
 8027005:	e8e0c5c4                                         .

08027006 <_ZL31T6963_DATA_READ_AND_NONVARIABLE>:
 8027006:	00e8e0c5                                         .

08027007 <_ZL17T6963_SCREEN_PEEK>:
 8027007:	0000e8e0                                         .

08027008 <_ZL17T6963_SCREEN_COPY>:
 8027008:	000000e8 00000000                       ........

08027010 <_ZTV21CT6963_GPIO_Interface>:
	...
 8027018:	0801f319 0801f4a5 0801f5f5 0801f9a9     ................
 8027028:	0801faed 0801fb4d 0801f3f5 0801fcd1     ....M...........
 8027038:	0801f0f5 0801fdcd 0801fe05 0801ff35     ............5...
 8027048:	0801ffe9 08020021 080200cd 08020199     ....!...........

08027058 <_ZL12c_FontNative>:
	...

08027070 <_ZL12c_iDelayFore>:
 8027070:	00000005                                ....

08027074 <_ZL13c_iDelayAfter>:
 8027074:	00000003                                ....

08027078 <_ZL35Microsoft_Sans_Serif__12_char_table>:
	...
 802708c:	001c0000 00220022 00410041 00410041     ....".".A.A.A.A.
 802709c:	00410041 00220022 0000001c 00000000     A.A.".".........
 80270ac:	00000000 10107010 10101010 10101010     .....p..........
	...
 80270c4:	0022001c 00010041 00020001 00080004     ..".A...........
 80270d4:	00200010 007f0040 00000000 00000000     .. .@...........
 80270e4:	00000000 0022001c 00010041 000c0002     ......".A.......
 80270f4:	00010002 00410001 001c0022 00000000     ......A.".......
	...
 802710c:	00060002 000a0006 00120012 00420022     ............".B.
 802711c:	0002007f 00020002 00000000 00000000     ................
 802712c:	00000000 0040007f 00400040 0062005c     ......@.@.@.\.b.
 802713c:	00010001 00410001 001c0022 00000000     ......A.".......
	...
 8027154:	0022001c 00400041 0062005c 00410041     ..".A.@.\.b.A.A.
 8027164:	00410041 001c0022 00000000 00000000     A.A."...........
 8027174:	00000000 0001007f 00020001 00020002     ................
 8027184:	00040004 00080004 00080008 00000000     ................
	...
 802719c:	0022001c 00410041 001c0022 00410022     ..".A.A."...".A.
 80271ac:	00410041 001c0022 00000000 00000000     A.A."...........
 80271bc:	00000000 0022001c 00410041 00410041     ......".A.A.A.A.
 80271cc:	001d0023 00410001 001c0022 00000000     #.....A.".......
	...
 80271e4:	00020002 00050005 80088008 c01f4010     .............@..
 80271f4:	20202020 10401040 00000000 00000000         @.@.........
 8027204:	00000000 0041007e 80408040 007e0041     ....~.A.@.@.A.~.
 8027214:	80400041 80408040 007e0041 00000000     A.@.@.@.A.~.....
	...
 802722c:	c030000f 20404020 00400040 00400040     ..0. @@ @.@.@.@.
 802723c:	40202040 000fc030 00000000 00000000     @  @0...........
 802724c:	00000000 8041007e 40408040 40404040     ....~.A.@.@@@@@@
 802725c:	40404040 80404040 007e8041 00000000     @@@@@@@.A.~.....
	...
 8027274:	0040807f 00400040 007f0040 00400040     ..@.@.@.@...@.@.
 8027284:	00400040 807f0040 00000000 00000000     @.@.@...........
 8027294:	00000000 0040807f 00400040 007f0040     ......@.@.@.@...
 80272a4:	00400040 00400040 00400040 00000000     @.@.@.@.@.@.....
	...
 80272bc:	c030000f 20404020 00400040 2040e041     ..0. @@ @.@.A.@ 
 80272cc:	60202040 200fe030 00000000 00000000     @  `0.. ........
 80272dc:	00000000 80408040 80408040 807f8040     ....@.@.@.@.@...
 80272ec:	80408040 80408040 80408040 00000000     @.@.@.@.@.@.....
 80272fc:	00000000 40400000 40404040 40404040     ......@@@@@@@@@@
 802730c:	00004040 00000000 02020202 02020202     @@..............
 802731c:	3c424242 00000000 00000000 00420041     BBB<........A.B.
 802732c:	00480044 00600050 00480050 00420044     D.H.P.`.P.H.D.B.
 802733c:	80400041 00000000 00000000 00000000     A.@.............
 802734c:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802735c:	00400040 007f0040 00000000 00000000     @.@.@...........
 802736c:	00000000 40404040 c060c060 40514051     ....@@@@`.`.Q@Q@
 802737c:	404a404a 40444044 40404040 00000000     J@J@D@D@@@@@....
	...
 8027394:	00610041 00510061 00490051 00450049     A.a.a.Q.Q.I.I.E.
 80273a4:	00430045 00410043 00000000 00000000     E.C.C.A.........
 80273b4:	00000000 c030000f 20404020 20402040     ......0. @@ @ @ 
 80273c4:	20402040 40202040 000fc030 00000000     @ @ @  @0.......
	...
 80273dc:	0041007e 80408040 00418040 0040007e     ~.A.@.@.@.A.~.@.
 80273ec:	00400040 00400040 00000000 00000000     @.@.@.@.........
 80273fc:	00000000 c030000f 20404020 20402040     ......0. @@ @ @ 
 802740c:	20402040 40212042 400fc030 00002000     @ @ B !@0..@. ..
	...
 8027424:	0041007e 80408040 00418040 0041007e     ~.A.@.@.@.A.~.A.
 8027434:	80408040 40408040 00000000 00000000     @.@.@.@@........
 8027444:	00000000 8020001f 00404040 001f0020     ...... .@@@. ...
 8027454:	40008000 40404000 001f8020 00000000     ...@.@@@ .......
	...
 802746c:	0004c07f 00040004 00040004 00040004     ................
 802747c:	00040004 00040004 00000000 00000000     ................
 802748c:	00000000 80408040 80408040 80408040     ....@.@.@.@.@.@.
 802749c:	80408040 80408040 001e0021 00000000     @.@.@.@.!.......
	...
 80274b4:	10401040 20202020 40104010 80088008     @.@.    .@.@....
 80274c4:	00050005 00020002 00000000 00000000     ................
 80274d4:	00000000 01400000 00814000 20008220     ......@..@.. .. 
 80274e4:	42210082 00441100 0a004411 280a0028     ..!B..D..D..(..(
 80274f4:	00100400 04001004 00000010 00000000     ................
	...
 802750c:	10400000 40102020 00058008 00020002     ..@.  .@........
 802751c:	80080005 20204010 00001040 00000000     .....@  @.......
 802752c:	00000000 10400000 40102020 00058008     ......@.  .@....
 802753c:	00020002 00020002 00020002 00000002     ................
	...
 8027554:	807f0000 00018000 00020002 00080004     ................
 8027564:	00100010 00400020 0000807f 00000000     .... .@.........
	...
 8027580:	0041003e 00010001 0041003f 00410041     >.A.....?.A.A.A.
 8027590:	0000803e 00000000 00000000 00400000     >.............@.
 80275a0:	00400040 0062005c 00410041 00410041     @.@.\.b.A.A.A.A.
 80275b0:	00620041 0000005c 00000000 00000000     A.b.\...........
	...
 80275c8:	0022001c 00400041 00400040 00220041     ..".A.@.@.@.A.".
 80275d8:	0000001c 00000000 00000000 00010000     ................
 80275e8:	00010001 0023001d 00410041 00410041     ......#.A.A.A.A.
 80275f8:	00230041 0000001d 00000000 00000000     A.#.............
	...
 8027610:	0022001c 00410041 0040007f 00220041     ..".A.A...@.A.".
 8027620:	0000001c 00000000 00000000 7c10100c     ...............|
 8027630:	10101010 10101010 00000000 00000000     ................
 8027640:	00000000 001d0000 00410023 00410041     ........#.A.A.A.
 8027650:	00410041 001d0023 00010001 003c0002     A.A.#.........<.
 8027660:	00000000 00400040 005c0040 00410062     ....@.@.@.\.b.A.
 8027670:	00410041 00410041 00410041 00000000     A.A.A.A.A.A.....
 8027680:	00000000 00400000 40404000 40404040     ......@..@@@@@@@
 8027690:	00004040 00000000 20000020 20202020     @@...... ..     
 80276a0:	20202020 40202020 00000000 00400040            @....@.@.
 80276b0:	00420040 00480044 00700050 00440048     @.B.D.H.P.p.H.D.
 80276c0:	00410042 00000000 00000000 40400000     B.A...........@@
 80276d0:	40404040 40404040 00004040 00000000     @@@@@@@@@@......
	...
 80276e8:	2065c058 10421042 10421042 10421042     X.e B.B.B.B.B.B.
 80276f8:	00001042 00000000 00000000 00000000     B...............
 8027708:	00000000 0062005c 00410041 00410041     ....\.b.A.A.A.A.
 8027718:	00410041 00000041 00000000 00000000     A.A.A...........
	...
 8027730:	0022001c 00410041 00410041 00220041     ..".A.A.A.A.A.".
 8027740:	0000001c 00000000 00000000 00000000     ................
 8027750:	00000000 0062005c 00410041 00410041     ....\.b.A.A.A.A.
 8027760:	00620041 0040005c 00400040 00000040     A.b.\.@.@.@.@...
	...
 8027778:	0023001d 00410041 00410041 00230041     ..#.A.A.A.A.A.#.
 8027788:	0001001d 00010001 00000001 58000000     ...............X
 8027798:	40404060 40404040 00000000 00000000     `@@@@@@@........
 80277a8:	40423c00 02023c40 00003c42 00000000     .<B@@<..B<......
 80277b8:	7c101010 10101010 08101010 00000000     ...|............
	...
 80277d0:	00410000 00410041 00410041 00410041     ..A.A.A.A.A.A.A.
 80277e0:	001d0023 00000000 00000000 00000000     #...............
 80277f0:	00000000 00410000 00220041 00140022     ......A.A."."...
 8027800:	00080014 00080008 00000000 00000000     ................
	...
 8027818:	10420000 10421042 20252025 c018a028     ..B.B.B.% % (...
 8027828:	40104010 00000000 00000000 00000000     .@.@............
 8027838:	00000000 00410000 00220022 00080014     ......A.".".....
 8027848:	00220014 00410022 00000000 00000000     ..".".A.........
	...
 8027860:	00410000 00220041 00140022 00080014     ..A.A.".".......
 8027870:	00080008 00100010 00600010 00000000     ..........`.....
 8027880:	04027e00 20101008 00007e40 00000000     .~..... @~......
	...
 8027898:	40000000 00000000 00000000 00000000     ...@............
 80278a8:	00000000 20202000 00000040 00000000     .....   @.......
 80278b8:	00000020 20000000 00402020 00000000      ......   @.....
 80278c8:	00400000 00000000 00004000 00000000     ..@......@......
 80278d8:	00000000 78000000 00000000 00000000     .......x........
	...
 8027908:	0000c07f 00000000 00000000 00080000     ................
 8027918:	00080008 0008007f 00080008 00000000     ................
	...
 8027930:	54100000 00282838 00000000 00000000     ...T8((.........
 8027940:	00000000 80080000 80088008 0011c03f     ............?...
 8027950:	00110011 807f0011 00220022 00000022     ........"."."...
	...
 802796c:	00000022 0022001c 00410041 00410041     ".....".A.A.A.A.
 802797c:	00220041 0000001c 00000000 00000000     A.".............
 802798c:	00000000 00000012 0041003e 00010001     ........>.A.....
 802799c:	0041003f 00410041 0000803e 00000000     ?.A.A.A.>.......
	...
 80279b4:	00000022 00410041 00410041 00410041     "...A.A.A.A.A.A.
 80279c4:	00230041 0000001d 00000000 00090000     A.#.............
 80279d4:	000f0000 4020c030 20402040 20402040     ....0. @@ @ @ @ 
 80279e4:	20402040 c0304020 0000000f 00000000     @ @  @0.........
 80279f4:	80080000 00020000 00050002 80080005     ................
 8027a04:	40108008 2020c01f 10402020 00001040     ...@..    @.@...
 8027a14:	00000000 00120000 80400000 80408040     ..........@.@.@.
 8027a24:	80408040 80408040 80408040 00218040     @.@.@.@.@.@.@.!.
 8027a34:	0000001e 00000000 00000000 001c0000     ................
 8027a44:	00410022 00010001 00040002 00080008     ".A.............
 8027a54:	00000000 00000008 00000000 00000000     ................
 8027a64:	40404040 40404040 40000040 00000000     @@@@@@@@@..@....
 8027a74:	48300000 00003048 00000000 00000000     ..0HH0..........
 8027a84:	00000000 00442810 00000000 00000000     .....(D.........
 8027a94:	00000000 08080000 10101010 20202020     ............    
 8027aa4:	00004040 00000000 20202010 40404040     @@.......   @@@@
 8027ab4:	40404040 10202020 20400000 10102020     @@@@   ...@   ..
 8027ac4:	10101010 20201010 00004020 001c0000     ......   @......
 8027ad4:	00220022 00140022 00240018 40412042     ".".".....$.B A@
 8027ae4:	40218040 0000201e 00000000 00000000     @.!@. ..........
 8027af4:	20380000 40444044 00458044 70020039     ..8 D@D@D.E.9..p
 8027b04:	88048802 88088808 00007010 00000000     .........p......
 8027b14:	00000000 001c0008 0049002a 00280048     ........*.I.H.(.
 8027b24:	000a001c 00090009 002a0049 0008001c     ........I.*.....
	...
 8027b3c:	e0030000 0410180c 2226e421 22482244     ........!.&"D"H"
 8027b4c:	42484248 cc484448 00207027 e0071018     HBHBHDH.'p .....
 8027b5c:	00000000 40404040 40404040 40404040     ....@@@@@@@@@@@@
 8027b6c:	40404040 00000000 00000000 00030000     @@@@............
 8027b7c:	0030000c 00300040 0003000c 00000000     ..0.@.0.........
	...
 8027b9c:	00600000 00060018 00060001 00600018     ..`...........`.
	...

08027bb8 <_ZL38Microsoft_Sans_Serif__12_mapping_table>:
	...
 8027bd8:	47004f00 00555657 45465453 523f4340     .O.GWVU.STFE@C?R
 8027be8:	04030201 08070605 41420a09 4e5b005a     ..........BAZ.[N
 8027bf8:	0d0c0b58 11100f0e 15141312 19181716     X...............
 8027c08:	1d1c1b1a 21201f1e 00242322 44510000     ...... !"#$...QD
 8027c18:	27262500 2b2a2928 2f2e2d2c 33323130     .%&'()*+,-./0123
 8027c28:	37363534 3b3a3938 003e3d3c 00000059     456789:;<=>.Y...
	...
 8027c68:	00000050 00000000 00000000 00000000     P...............
 8027c78:	00000000 0000004c 00000000 00000000     ....L...........
 8027c88:	00000000 004b0000 00000000 0000004d     ......K.....M...
 8027c98:	00000000 00000049 00000000 00000000     ....I...........
 8027ca8:	00000000 00480000 00000000 0000004a     ......H.....J...

08027cb8 <_ZL36Microsoft_Sans_Serif__12_width_table>:
 8027cb8:	09050905 09090909 0d090909 0a0b0c0a     ................
 8027cc8:	030a0c0a 0b090a08 0c0a0c09 0a0b0b0b     ................
 8027cd8:	0d0d110d 09090a0a 09070909 09040309     ................
 8027ce8:	09090d03 08060909 0d090907 03080909     ................
 8027cf8:	06030404 0b07090b 0c090a09 03090a0d     ................
 8027d08:	05060706 090e0c05 09090310              ............

08027d14 <_ZL37Microsoft_Sans_Serif__12_offset_table>:
 8027d14:	00000000 00000012 00000036 00000048     ........6...H...
 8027d24:	0000006c 00000090 000000b4 000000d8     l...............
 8027d34:	000000fc 00000120 00000144 00000168     .... ...D...h...
 8027d44:	0000018c 000001b0 000001d4 000001f8     ................
 8027d54:	0000021c 00000240 00000264 00000288     ....@...d.......
 8027d64:	0000029a 000002ac 000002d0 000002f4     ................
 8027d74:	00000318 0000033c 00000360 00000384     ....<...`.......
 8027d84:	000003a8 000003cc 000003f0 00000414     ................
 8027d94:	00000438 0000045c 00000492 000004b6     8...\...........
 8027da4:	000004da 000004fe 00000522 00000546     ........"...F...
 8027db4:	0000056a 0000058e 000005b2 000005c4     j...............
 8027dc4:	000005e8 0000060c 0000061e 00000630     ............0...
 8027dd4:	00000654 00000666 0000068a 000006ae     T...f...........
 8027de4:	000006d2 000006f6 0000071a 0000072c     ............,...
 8027df4:	0000073e 00000750 00000774 00000798     >...P...t.......
 8027e04:	000007bc 000007e0 00000804 00000816     ................
 8027e14:	00000828 0000083a 0000084c 0000085e     (...:...L...^...
 8027e24:	00000870 00000894 000008b8 000008ca     p...............
 8027e34:	000008ee 00000912 00000936 0000095a     ........6...Z...
 8027e44:	0000097e 000009a2 000009c6 000009ea     ~...............
 8027e54:	000009fc 00000a0e 00000a20 00000a32     ........ ...2...
 8027e64:	00000a44 00000a56 00000a7a 00000a9e     D...V...z.......
 8027e74:	00000ac2 00000ae6 00000af8 00000b1c     ................

08027e84 <_ZL17c_FontSansSerif12>:
 8027e84:	00000000 00000012 08027078 08027bb8     ........xp...{..
 8027e94:	08027cb8 08027d14 00000000              .|...}......

08027ea0 <_ZTV12AManagedTask>:
	...
 8027ea8:	0801edbd 080214c9 0801ede1 080202e1     ................
 8027eb8:	08020321 08020275 08024a39 0801ee05     !...u...9J......

08027ec8 <_ZTV11ASyncObject>:
	...
 8027ed0:	080204f9 08020621 0802051d 08020591     ....!...........
 8027ee0:	080205d5 08024a39 08024a39 00000000     ....9J..9J......

08027ef0 <_ZTV12IFreeRTOSObj>:
	...
 8027ef8:	08024a39 08024a39 08024a39 00000000     9J..9J..9J......

08027f08 <_ZZN11ASyncObject6AttachEPvE19__PRETTY_FUNCTION__>:
 8027f08:	74726976 206c6175 64696f76 79534120     virtual void ASy
 8027f18:	624f636e 7463656a 74413a3a 68636174     ncObject::Attach
 8027f28:	65477828 6972656e 6e614863 29656c64     (xGenericHandle)
	...

08027f40 <_ZTV16CBinarySemaphore>:
	...
 8027f48:	080204f9 08020621 0802051d 08020755     ....!.......U...
 8027f58:	0802078d 08020675 080206d1 00000000     ....u...........

08027f68 <_ZZN16CBinarySemaphore4GiveEvE19__PRETTY_FUNCTION__>:
 8027f68:	74726976 206c6175 676e6f6c 746e6920     virtual long int
 8027f78:	69424320 7972616e 616d6553 726f6870      CBinarySemaphor
 8027f88:	473a3a65 28657669 00000029              e::Give()...

08027f94 <_ZZN16CBinarySemaphore4TakeEmE19__PRETTY_FUNCTION__>:
 8027f94:	74726976 206c6175 676e6f6c 746e6920     virtual long int
 8027fa4:	69424320 7972616e 616d6553 726f6870      CBinarySemaphor
 8027fb4:	543a3a65 28656b61 74726f70 6b636954     e::Take(portTick
 8027fc4:	65707954 00000029 00000000              Type).......

08027fd0 <_ZTV18CCountingSemaphore>:
	...
 8027fd8:	080204f9 08020621 0802051d 08020921     ....!.......!...
 8027fe8:	08020959 08020841 0802089d 00000000     Y...A...........

08027ff8 <_ZZN18CCountingSemaphore4GiveEvE19__PRETTY_FUNCTION__>:
 8027ff8:	74726976 206c6175 676e6f6c 746e6920     virtual long int
 8028008:	6f434320 69746e75 6553676e 6870616d      CCountingSemaph
 8028018:	3a65726f 7669473a 00292865              ore::Give().

08028024 <_ZZN18CCountingSemaphore4TakeEmE19__PRETTY_FUNCTION__>:
 8028024:	74726976 206c6175 676e6f6c 746e6920     virtual long int
 8028034:	6f434320 69746e75 6553676e 6870616d      CCountingSemaph
 8028044:	3a65726f 6b61543a 6f702865 69547472     ore::Take(portTi
 8028054:	79546b63 00296570                       ckType).

0802805c <_ZN12CMessageTask13s_message_mapE>:
	...

08028068 <_ZTV12CMessageTask>:
	...
 8028070:	0801edbd 080214c9 0801ede1 08020bed     ................
 8028080:	08020c31 08020275 08020c91 08020c51     1...u.......Q...
 8028090:	08020d55 08020b7d 08020b95 00000000     U...}...........

080280a0 <_ZZN6CQueue18SendToFrontFromISREPKvPlE19__PRETTY_FUNCTION__>:
 80280a0:	676e6f6c 746e6920 75514320 3a657565     long int CQueue:
 80280b0:	6e65533a 466f5464 746e6f72 6d6f7246     :SendToFrontFrom
 80280c0:	28525349 736e6f63 6f762074 2c2a6469     ISR(const void*,
 80280d0:	6e6f6c20 6e692067 00292a74               long int*).

080280dc <_ZZN6CQueue11SendToFrontEPKvmE19__PRETTY_FUNCTION__>:
 80280dc:	676e6f6c 746e6920 75514320 3a657565     long int CQueue:
 80280ec:	6e65533a 466f5464 746e6f72 6e6f6328     :SendToFront(con
 80280fc:	76207473 2a64696f 6f70202c 69547472     st void*, portTi
 802810c:	79546b63 00296570                       ckType).

08028114 <_ZZN6CQueue7ReceiveEPvmE19__PRETTY_FUNCTION__>:
 8028114:	676e6f6c 746e6920 75514320 3a657565     long int CQueue:
 8028124:	6365523a 65766965 696f7628 202c2a64     :Receive(void*, 
 8028134:	74726f70 6b636954 65707954 00000029     portTickType)...
 8028144:	00000000                                ....

08028148 <_ZTV6CMutex>:
	...
 8028150:	080204f9 08020621 0802051d 08021039     ....!.......9...
 8028160:	08021071 08020f59 08020fb5 00000000     q...Y...........

08028170 <_ZZN6CMutex4GiveEvE19__PRETTY_FUNCTION__>:
 8028170:	74726976 206c6175 676e6f6c 746e6920     virtual long int
 8028180:	754d4320 3a786574 7669473a 00292865      CMutex::Give().

08028190 <_ZZN6CMutex4TakeEmE19__PRETTY_FUNCTION__>:
 8028190:	74726976 206c6175 676e6f6c 746e6920     virtual long int
 80281a0:	754d4320 3a786574 6b61543a 6f702865      CMutex::Take(po
 80281b0:	69547472 79546b63 00296570 00000000     rtTickType).....

080281c0 <_ZTV6CQueue>:
	...
 80281c8:	08021105 0802127d 08021129 0802117d     ....}...)...}...
 80281d8:	080211c1 00000000                       ........

080281e0 <_ZZN6CQueue6AttachEPvE19__PRETTY_FUNCTION__>:
 80281e0:	74726976 206c6175 64696f76 75514320     virtual void CQu
 80281f0:	3a657565 7474413a 28686361 6e654778     eue::Attach(xGen
 8028200:	63697265 646e6148 0029656c              ericHandle).

0802820c <_ZZN6CQueue6CreateEmmE19__PRETTY_FUNCTION__>:
 802820c:	65755143 20266575 65755143 3a3a6575     CQueue& CQueue::
 802821c:	61657243 6c286574 20676e6f 69736e75     Create(long unsi
 802822c:	64656e67 746e6920 6f6c202c 7520676e     gned int, long u
 802823c:	6769736e 2064656e 29746e69 00000000     nsigned int)....
 802824c:	00000000                                ....

08028250 <_ZTV15CRecursiveMutex>:
	...
 8028258:	080204f9 08020621 0802051d 0802138d     ....!...........
 8028268:	080213c5 080212fd 08021319 00000000     ................

08028278 <_ZTV5CTask>:
	...
 8028280:	0801edbd 080214c9 0801ede1 08021465     ............e...
 8028290:	080214a9 00000000                       ........

08028298 <_ZZN5CTask6AttachEPvE19__PRETTY_FUNCTION__>:
 8028298:	74726976 206c6175 64696f76 61544320     virtual void CTa
 80282a8:	3a3a6b73 61747441 78286863 656e6547     sk::Attach(xGene
 80282b8:	48636972 6c646e61 00002965              ricHandle)..

080282c4 <ulKernelPriority>:
 80282c4:	000000ff                                ....

080282c8 <_ZTV24CLedHeartBeatSTM32F4Disc>:
	...
 80282d0:	0801edbd 080214c9 0801ede1 08023f11     .............?..
 80282e0:	08023f49 08023f69 08023fa1 0801ee05     I?..i?...?......

080282f0 <_ZL12c_FontNative>:
	...
 8028308:	65727570 72697620 6c617574 74656d20     pure virtual met
 8028318:	20646f68 6c6c6163 000a6465 6d726574     hod called..term
 8028328:	74616e69 61632065 64656c6c 63657220     inate called rec
 8028338:	69737275 796c6576 0000000a 6d726574     ursively....term
 8028348:	74616e69 61632065 64656c6c 74666120     inate called aft
 8028358:	74207265 776f7268 20676e69 69206e61     er throwing an i
 8028368:	6174736e 2065636e 2720666f 00000000     nstance of '....
 8028378:	00000a27 6d726574 74616e69 61632065     '...terminate ca
 8028388:	64656c6c 74697720 74756f68 206e6120     lled without an 
 8028398:	69746361 65206576 70656378 6e6f6974     active exception
 80283a8:	0000000a 68772020 29287461 0020203a     ....  what():  .

080283b8 <_ZTVN10__cxxabiv115__forced_unwindE>:
 80283b8:	00000000 080283e8 08025099 080250dd     .........P...P..
 80283c8:	08024a39 00000000                       9J......

080283d0 <_ZTVSt9exception>:
 80283d0:	00000000 080283f0 08025081 08025105     .........P...Q..
 80283e0:	080250b1 00000000                       .P......

080283e8 <_ZTIN10__cxxabiv115__forced_unwindE>:
 80283e8:	08028b70 080284a0                       p.......

080283f0 <_ZTISt9exception>:
 80283f0:	08028b70 08028478                       p...x...

080283f8 <_ZTSSt13bad_exception>:
 80283f8:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
 8028408:	0000006e 3a647473 6378653a 69747065     n...std::excepti
 8028418:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
 8028428:	69747065 00006e6f                       eption..

08028430 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
 8028430:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 8028440:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
 8028450:	00456e6f                                onE.

08028454 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
 8028454:	08028b70 08028430 00000000              p...0.......

08028460 <_ZTVSt13bad_exception>:
 8028460:	00000000 080284c0 0802508d 080250f1     .........P...P..
 8028470:	080250bd 00000000                       .P......

08028478 <_ZTSSt9exception>:
 8028478:	65397453 70656378 6e6f6974 00000000     St9exception....

08028488 <_ZTVN10__cxxabiv119__foreign_exceptionE>:
 8028488:	00000000 08028454 080250a5 080250c9     ....T....P...P..
 8028498:	08024a39 00000000                       9J......

080284a0 <_ZTSN10__cxxabiv115__forced_unwindE>:
 80284a0:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
 80284b0:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

080284c0 <_ZTISt13bad_exception>:
 80284c0:	08028a48 080283f8 080283f0              H...........

080284cc <_ZTIPKDn>:
 80284cc:	08028a20 08028864 00000001 080284ec      ...d...........

080284dc <_ZTIPDn>:
 80284dc:	08028a20 0802886c 00000000 080284ec      ...l...........

080284ec <_ZTIDn>:
 80284ec:	080289d0 08028870                       ....p...

080284f4 <_ZTIPKDe>:
 80284f4:	08028a20 08028874 00000001 08028514      ...t...........

08028504 <_ZTIPDe>:
 8028504:	08028a20 0802887c 00000000 08028514      ...|...........

08028514 <_ZTIDe>:
 8028514:	080289d0 08028880                       ........

0802851c <_ZTIPKDd>:
 802851c:	08028a20 08028884 00000001 0802853c      ...........<...

0802852c <_ZTIPDd>:
 802852c:	08028a20 0802888c 00000000 0802853c      ...........<...

0802853c <_ZTIDd>:
 802853c:	080289d0 08028890                       ........

08028544 <_ZTIPKDf>:
 8028544:	08028a20 08028894 00000001 08028564      ...........d...

08028554 <_ZTIPDf>:
 8028554:	08028a20 0802889c 00000000 08028564      ...........d...

08028564 <_ZTIDf>:
 8028564:	080289d0 080288a0                       ........

0802856c <_ZTIPKe>:
 802856c:	08028a20 080288a4 00000001 0802858c      ...............

0802857c <_ZTIPe>:
 802857c:	08028a20 080288a8 00000000 0802858c      ...............

0802858c <_ZTIe>:
 802858c:	080289d0 080288ac                       ........

08028594 <_ZTIPKd>:
 8028594:	08028a20 080288b0 00000001 080285b4      ...............

080285a4 <_ZTIPd>:
 80285a4:	08028a20 080288b4 00000000 080285b4      ...............

080285b4 <_ZTId>:
 80285b4:	080289d0 080288b8                       ........

080285bc <_ZTIPKf>:
 80285bc:	08028a20 080288bc 00000001 080285dc      ...............

080285cc <_ZTIPf>:
 80285cc:	08028a20 080288c0 00000000 080285dc      ...............

080285dc <_ZTIf>:
 80285dc:	080289d0 080288c4                       ........

080285e4 <_ZTIPKy>:
 80285e4:	08028a20 080288c8 00000001 08028604      ...............

080285f4 <_ZTIPy>:
 80285f4:	08028a20 080288cc 00000000 08028604      ...............

08028604 <_ZTIy>:
 8028604:	080289d0 080288d0                       ........

0802860c <_ZTIPKx>:
 802860c:	08028a20 080288d4 00000001 0802862c      ...........,...

0802861c <_ZTIPx>:
 802861c:	08028a20 080288d8 00000000 0802862c      ...........,...

0802862c <_ZTIx>:
 802862c:	080289d0 080288dc                       ........

08028634 <_ZTIPKm>:
 8028634:	08028a20 080288e0 00000001 08028654      ...........T...

08028644 <_ZTIPm>:
 8028644:	08028a20 080288e4 00000000 08028654      ...........T...

08028654 <_ZTIm>:
 8028654:	080289d0 080288e8                       ........

0802865c <_ZTIPKl>:
 802865c:	08028a20 080288ec 00000001 0802867c      ...........|...

0802866c <_ZTIPl>:
 802866c:	08028a20 080288f0 00000000 0802867c      ...........|...

0802867c <_ZTIl>:
 802867c:	080289d0 080288f4                       ........

08028684 <_ZTIPKj>:
 8028684:	08028a20 080288f8 00000001 080286a4      ...............

08028694 <_ZTIPj>:
 8028694:	08028a20 080288fc 00000000 080286a4      ...............

080286a4 <_ZTIj>:
 80286a4:	080289d0 08028900                       ........

080286ac <_ZTIPKi>:
 80286ac:	08028a20 08028904 00000001 080286cc      ...............

080286bc <_ZTIPi>:
 80286bc:	08028a20 08028908 00000000 080286cc      ...............

080286cc <_ZTIi>:
 80286cc:	080289d0 0802890c                       ........

080286d4 <_ZTIPKt>:
 80286d4:	08028a20 08028910 00000001 080286f4      ...............

080286e4 <_ZTIPt>:
 80286e4:	08028a20 08028914 00000000 080286f4      ...............

080286f4 <_ZTIt>:
 80286f4:	080289d0 08028918                       ........

080286fc <_ZTIPKs>:
 80286fc:	08028a20 0802891c 00000001 0802871c      ...............

0802870c <_ZTIPs>:
 802870c:	08028a20 08028920 00000000 0802871c      ... ...........

0802871c <_ZTIs>:
 802871c:	080289d0 08028924                       ....$...

08028724 <_ZTIPKh>:
 8028724:	08028a20 08028928 00000001 08028744      ...(.......D...

08028734 <_ZTIPh>:
 8028734:	08028a20 0802892c 00000000 08028744      ...,.......D...

08028744 <_ZTIh>:
 8028744:	080289d0 08028930                       ....0...

0802874c <_ZTIPKa>:
 802874c:	08028a20 08028934 00000001 0802876c      ...4.......l...

0802875c <_ZTIPa>:
 802875c:	08028a20 08028938 00000000 0802876c      ...8.......l...

0802876c <_ZTIa>:
 802876c:	080289d0 0802893c                       ....<...

08028774 <_ZTIPKc>:
 8028774:	08028a20 08028940 00000001 08028794      ...@...........

08028784 <_ZTIPc>:
 8028784:	08028a20 08028944 00000000 08028794      ...D...........

08028794 <_ZTIc>:
 8028794:	080289d0 08028948                       ....H...

0802879c <_ZTIPKDi>:
 802879c:	08028a20 0802894c 00000001 080287bc      ...L...........

080287ac <_ZTIPDi>:
 80287ac:	08028a20 08028954 00000000 080287bc      ...T...........

080287bc <_ZTIDi>:
 80287bc:	080289d0 08028958                       ....X...

080287c4 <_ZTIPKDs>:
 80287c4:	08028a20 0802895c 00000001 080287e4      ...\...........

080287d4 <_ZTIPDs>:
 80287d4:	08028a20 08028964 00000000 080287e4      ...d...........

080287e4 <_ZTIDs>:
 80287e4:	080289d0 08028968                       ....h...

080287ec <_ZTIPKw>:
 80287ec:	08028a20 0802896c 00000001 0802880c      ...l...........

080287fc <_ZTIPw>:
 80287fc:	08028a20 08028970 00000000 0802880c      ...p...........

0802880c <_ZTIw>:
 802880c:	080289d0 08028974                       ....t...

08028814 <_ZTIPKb>:
 8028814:	08028a20 08028978 00000001 08028834      ...x.......4...

08028824 <_ZTIPb>:
 8028824:	08028a20 0802897c 00000000 08028834      ...|.......4...

08028834 <_ZTIb>:
 8028834:	080289d0 08028980                       ........

0802883c <_ZTIPKv>:
 802883c:	08028a20 08028984 00000001 0802885c      ...........\...

0802884c <_ZTIPv>:
 802884c:	08028a20 08028988 00000000 0802885c      ...........\...

0802885c <_ZTIv>:
 802885c:	080289d0 0802898c                       ........

08028864 <_ZTSPKDn>:
 8028864:	6e444b50 00000000                       PKDn....

0802886c <_ZTSPDn>:
 802886c:	006e4450                                PDn.

08028870 <_ZTSDn>:
 8028870:	00006e44                                Dn..

08028874 <_ZTSPKDe>:
 8028874:	65444b50 00000000                       PKDe....

0802887c <_ZTSPDe>:
 802887c:	00654450                                PDe.

08028880 <_ZTSDe>:
 8028880:	00006544                                De..

08028884 <_ZTSPKDd>:
 8028884:	64444b50 00000000                       PKDd....

0802888c <_ZTSPDd>:
 802888c:	00644450                                PDd.

08028890 <_ZTSDd>:
 8028890:	00006444                                Dd..

08028894 <_ZTSPKDf>:
 8028894:	66444b50 00000000                       PKDf....

0802889c <_ZTSPDf>:
 802889c:	00664450                                PDf.

080288a0 <_ZTSDf>:
 80288a0:	00006644                                Df..

080288a4 <_ZTSPKe>:
 80288a4:	00654b50                                PKe.

080288a8 <_ZTSPe>:
 80288a8:	00006550                                Pe..

080288ac <_ZTSe>:
 80288ac:	00000065                                e...

080288b0 <_ZTSPKd>:
 80288b0:	00644b50                                PKd.

080288b4 <_ZTSPd>:
 80288b4:	00006450                                Pd..

080288b8 <_ZTSd>:
 80288b8:	00000064                                d...

080288bc <_ZTSPKf>:
 80288bc:	00664b50                                PKf.

080288c0 <_ZTSPf>:
 80288c0:	00006650                                Pf..

080288c4 <_ZTSf>:
 80288c4:	00000066                                f...

080288c8 <_ZTSPKy>:
 80288c8:	00794b50                                PKy.

080288cc <_ZTSPy>:
 80288cc:	00007950                                Py..

080288d0 <_ZTSy>:
 80288d0:	00000079                                y...

080288d4 <_ZTSPKx>:
 80288d4:	00784b50                                PKx.

080288d8 <_ZTSPx>:
 80288d8:	00007850                                Px..

080288dc <_ZTSx>:
 80288dc:	00000078                                x...

080288e0 <_ZTSPKm>:
 80288e0:	006d4b50                                PKm.

080288e4 <_ZTSPm>:
 80288e4:	00006d50                                Pm..

080288e8 <_ZTSm>:
 80288e8:	0000006d                                m...

080288ec <_ZTSPKl>:
 80288ec:	006c4b50                                PKl.

080288f0 <_ZTSPl>:
 80288f0:	00006c50                                Pl..

080288f4 <_ZTSl>:
 80288f4:	0000006c                                l...

080288f8 <_ZTSPKj>:
 80288f8:	006a4b50                                PKj.

080288fc <_ZTSPj>:
 80288fc:	00006a50                                Pj..

08028900 <_ZTSj>:
 8028900:	0000006a                                j...

08028904 <_ZTSPKi>:
 8028904:	00694b50                                PKi.

08028908 <_ZTSPi>:
 8028908:	00006950                                Pi..

0802890c <_ZTSi>:
 802890c:	00000069                                i...

08028910 <_ZTSPKt>:
 8028910:	00744b50                                PKt.

08028914 <_ZTSPt>:
 8028914:	00007450                                Pt..

08028918 <_ZTSt>:
 8028918:	00000074                                t...

0802891c <_ZTSPKs>:
 802891c:	00734b50                                PKs.

08028920 <_ZTSPs>:
 8028920:	00007350                                Ps..

08028924 <_ZTSs>:
 8028924:	00000073                                s...

08028928 <_ZTSPKh>:
 8028928:	00684b50                                PKh.

0802892c <_ZTSPh>:
 802892c:	00006850                                Ph..

08028930 <_ZTSh>:
 8028930:	00000068                                h...

08028934 <_ZTSPKa>:
 8028934:	00614b50                                PKa.

08028938 <_ZTSPa>:
 8028938:	00006150                                Pa..

0802893c <_ZTSa>:
 802893c:	00000061                                a...

08028940 <_ZTSPKc>:
 8028940:	00634b50                                PKc.

08028944 <_ZTSPc>:
 8028944:	00006350                                Pc..

08028948 <_ZTSc>:
 8028948:	00000063                                c...

0802894c <_ZTSPKDi>:
 802894c:	69444b50 00000000                       PKDi....

08028954 <_ZTSPDi>:
 8028954:	00694450                                PDi.

08028958 <_ZTSDi>:
 8028958:	00006944                                Di..

0802895c <_ZTSPKDs>:
 802895c:	73444b50 00000000                       PKDs....

08028964 <_ZTSPDs>:
 8028964:	00734450                                PDs.

08028968 <_ZTSDs>:
 8028968:	00007344                                Ds..

0802896c <_ZTSPKw>:
 802896c:	00774b50                                PKw.

08028970 <_ZTSPw>:
 8028970:	00007750                                Pw..

08028974 <_ZTSw>:
 8028974:	00000077                                w...

08028978 <_ZTSPKb>:
 8028978:	00624b50                                PKb.

0802897c <_ZTSPb>:
 802897c:	00006250                                Pb..

08028980 <_ZTSb>:
 8028980:	00000062                                b...

08028984 <_ZTSPKv>:
 8028984:	00764b50                                PKv.

08028988 <_ZTSPv>:
 8028988:	00007650                                Pv..

0802898c <_ZTSv>:
 802898c:	00000076                                v...

08028990 <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
 8028990:	08028a48 0802899c 08028aa4              H...........

0802899c <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
 802899c:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
 80289ac:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
 80289bc:	6e695f65 00456f66 00000000              e_infoE.....

080289c8 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
 80289c8:	00000000 08028990 080257fd 08025811     .........W...X..
 80289d8:	080259cd 080259d1 08025a25 080259d5     .Y...Y..%Z...Y..

080289e8 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
 80289e8:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
 80289f8:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
 8028a08:	00456f66                                foE.

08028a0c <_ZTIN10__cxxabiv119__pointer_type_infoE>:
 8028a0c:	08028a48 080289e8 08028bc8              H...........

08028a18 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
 8028a18:	00000000 08028a0c 08025831 08025845     ........1X..EX..
 8028a28:	0802582d 080259d1 08025d0d 080259d5     -X...Y...]...Y..
 8028a38:	08025861 00000000                       aX......

08028a40 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 8028a40:	00000000 08028a70 080258a9 080258bd     ....p....X...X..
 8028a50:	080259cd 080259d1 08025b6d 08025aa1     .Y...Y..m[...Z..
 8028a60:	080258d9 08025901 08025989 00000000     .X...Y...Y......

08028a70 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 8028a70:	08028a48 08028a7c 08028b98              H...|.......

08028a7c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 8028a7c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 8028a8c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 8028a9c:	456f666e 00000000                       nfoE....

08028aa4 <_ZTISt9type_info>:
 8028aa4:	08028b70 08028aac                       p.......

08028aac <_ZTSSt9type_info>:
 8028aac:	74397453 5f657079 6f666e69 00000000     St9type_info....
 8028abc:	00000000                                ....

08028ac0 <_ZTVSt9type_info>:
 8028ac0:	00000000 08028aa4 080259c1 080259d9     .........Y...Y..
 8028ad0:	080259cd 080259d1 08025a25 080259d5     .Y...Y..%Z...Y..

08028ae0 <_ZTISt8bad_cast>:
 8028ae0:	08028a48 08028aec 080283f0              H...........

08028aec <_ZTSSt8bad_cast>:
 8028aec:	62387453 635f6461 00747361              St8bad_cast.

08028af8 <_ZTVSt8bad_cast>:
 8028af8:	00000000 08028ae0 08025a35 08025a49     ........5Z..IZ..
 8028b08:	08025a29 00000000 3a647473 6461623a     )Z......std::bad
 8028b18:	7361635f 00000074                       _cast...

08028b20 <_ZTVSt10bad_typeid>:
 8028b20:	00000000 08028b38 08025a71 08025a85     ....8...qZ...Z..
 8028b30:	08025a65 00000000                       eZ......

08028b38 <_ZTISt10bad_typeid>:
 8028b38:	08028a48 08028b54 080283f0 3a647473     H...T.......std:
 8028b48:	6461623a 7079745f 00646965              :bad_typeid.

08028b54 <_ZTSSt10bad_typeid>:
 8028b54:	30317453 5f646162 65707974 00006469     St10bad_typeid..
 8028b64:	00000000                                ....

08028b68 <_ZTVN10__cxxabiv117__class_type_infoE>:
 8028b68:	00000000 08028b98 08025b01 08025b15     .........[...[..
 8028b78:	080259cd 080259d1 08025b6d 08025aa1     .Y...Y..m[...Z..
 8028b88:	08025ae5 08025b31 08025ad9 00000000     .Z..1[...Z......

08028b98 <_ZTIN10__cxxabiv117__class_type_infoE>:
 8028b98:	08028a48 08028ba4 08028aa4              H...........

08028ba4 <_ZTSN10__cxxabiv117__class_type_infoE>:
 8028ba4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 8028bb4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 8028bc4:	00000045                                E...

08028bc8 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
 8028bc8:	08028a48 08028bd4 08028aa4              H...........

08028bd4 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
 8028bd4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 8028be4:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
 8028bf4:	00000045                                E...

08028bf8 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
 8028bf8:	00000000 08028bc8 08025cdd 08025cf1     .........\...\..
 8028c08:	080259cd 080259d1 08025d0d 080259d5     .Y...Y...]...Y..
 8028c18:	08025cc9 00000000 7566202c 6974636e     .\......, functi
 8028c28:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
 8028c38:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
 8028c48:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
 8028c58:	25732564 00000a73 00000043 00464e49     d%s%s...C...INF.
 8028c68:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
 8028c78:	37363534 42413938 46454443 00000000     456789ABCDEF....
 8028c88:	33323130 37363534 62613938 66656463     0123456789abcdef
 8028c98:	00000000 6c756e28 0000296c 00000030     ....(null)..0...
 8028ca8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8028cb8:	49534f50 00000058 0000002e              POSIX.......

08028cc4 <__EH_FRAME_BEGIN__>:
 8028cc4:	00000000                                ....

08028cc8 <_init>:
 8028cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028cca:	bf00      	nop
 8028ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028cce:	bc08      	pop	{r3}
 8028cd0:	469e      	mov	lr, r3
 8028cd2:	4770      	bx	lr

08028cd4 <_fini>:
 8028cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028cd6:	bf00      	nop
 8028cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028cda:	bc08      	pop	{r3}
 8028cdc:	469e      	mov	lr, r3
 8028cde:	4770      	bx	lr
